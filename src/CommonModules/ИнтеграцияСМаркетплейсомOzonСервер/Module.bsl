///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает хеш переданной строки.
//
// Параметры:
//  СтрокаДанных            - Строка - строка для хеширования.
//  ПреобразоватьВHEX       - Булево - признак преобразования в HEX.
//  ПеревестиВНижнийРегистр - Булево - признак перевода строки в нижний регистр.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - значение хеш-суммы.
//
Функция ПолучитьХешСтроки(знач СтрокаДанных, ПреобразоватьВHEX = Истина, ПеревестиВНижнийРегистр = Истина) Экспорт
	
	Если ТипЗнч(СтрокаДанных) <> Тип("Строка") Тогда 
		СтрокаДанных = "";
	КонецЕсли;
	
	Возврат ХешСуммаДвоичныхДанных(ПолучитьДвоичныеДанныеИзСтроки(СтрокаДанных,КодировкаТекста.UTF8), ПреобразоватьВHEX, ПеревестиВНижнийРегистр);
	
КонецФункции

// Возвращает детальную информацию по типам цен, используемым учетной записью Ozon.
//
// Параметры:
//  ВключатьВыгружаемые       - Булево - Признак включения в результат функции выгружаемых типов цен.
//  ВключатьЗагружаемые       - Булево - Признак включения в результат функции загружаемых типов цен.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с описанием указанных типов цен учетной записи. Содержит колонки:
//                  * Идентификатор - Строка - Строковое обозначение типа цен;
//                  * ИдентификаторДляФормул - Шаблон для формирования идентификатора вида цен;
//                  * Наименование - Строка - Наименование типа цен;
//                  * ДляУчетнойЗаписи - Булево - Признак отношения типа цен к учетной записи или к интеграции в целом;
//                  * ОбязательноеЗаполнение - Булево - Признак обязательного заполнения в формах;
//                  * Значение - СправочникСсылка.ВидыЦен - Пустая ссылка вида цен.
//
Функция ТипыЦенOzon(ВключатьВыгружаемые = Истина, ВключатьЗагружаемые = Истина) Экспорт

	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная));

	ТипыЦен = Новый ТаблицаЗначений;
	ТипыЦен.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока50);
	ТипыЦен.Колонки.Добавить("ИдентификаторДляФормул", ОписаниеТиповСтрока50);
	ТипыЦен.Колонки.Добавить("Наименование", ОписаниеТиповСтрока50);
	ТипыЦен.Колонки.Добавить("ДляУчетнойЗаписи", Новый ОписаниеТипов("Булево"), НСтр("ru = 'Тип цен уникален для учетной записи'"));
	ТипыЦен.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	ТипыЦен.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));

	Если ВключатьВыгружаемые Тогда
		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныСУчетомСкидок";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цена с учетом скидок'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Истина;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныДоСкидок";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цена до скидок'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныМинимальныхЦен";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Минимальная цена после применения всех акций'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;
	КонецЕсли;
	
	Если ВключатьЗагружаемые Тогда
		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныСАкциямиПродавца";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "marketing_seller_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цены с учетом акций продавца'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныСоВсемиАкциями";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "marketing_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цены с учетом всех акций'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныРекомендованный";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "recommended_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Рекомендованные цены'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Ложь;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныПоставщика";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "retail_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цены поставщика товаров'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Ложь;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;
	КонецЕсли;

	Возврат ТипыЦен;

КонецФункции

// Возвращает расписание регламентного задания по умолчанию.
//
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания - расписание регламентного задания.
//
Функция ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию() Экспорт
	
	РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня = 14400;// 4 часа
	РасписаниеРегламентногоЗадания.ПериодПовтораДней = 1; // каждый день
	
	Возврат РасписаниеРегламентногоЗадания;
	
КонецФункции

// Создает или обновляет регламентное задание обмена
//
// Параметры:
//  НастройкаИнтеграции     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Признак включения в результат функции
//                                                                          выгружаемых типов цен.
//  ЗаписатьНастройку       - Булево - Признак для записи ИдентификаторРегламентногоЗадания в НастройкаИнтеграции
//  ОбновитьРасписание      - Булево - Признак для обновления расписания в регламентном задании
//  ОписаниеНастроек        - Структура - Значения настроек интеграции, если не задано, то заполняется из НастройкаИнтеграции
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Идентификатор регламентного задания
//
Функция СоздатьОбновитьРегламентноеЗаданиеОбмена(НастройкаИнтеграции, ЗаписатьНастройку = Ложь, ОбновитьРасписание = Ложь, ОписаниеНастроек = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОписаниеНастроек = Неопределено Тогда
		ОписаниеНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаИнтеграции,
		"ПометкаУдаления,Наименование,ИдентификаторРегламентногоЗадания,ИспользоватьРегламентныеЗадания,РасписаниеРегламентногоЗадания");
	КонецЕсли;
	
	Если ОписаниеНастроек.ПометкаУдаления Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ОписаниеНастроек.ИспользоватьРегламентныеЗадания Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторРегламентногоЗадания = ОписаниеНастроек.ИдентификаторРегламентногоЗадания;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
	Если Задание = Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
		Если ОписаниеНастроек.РасписаниеРегламентногоЗадания <> "" Тогда
			Попытка
				РасписаниеРегламентногоЗадания = ЗначениеИзСтрокиВнутр(ОписаниеНастроек.РасписаниеРегламентногоЗадания);
			Исключение
				РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
			КонецПопытки;
		КонецЕсли;
		
		Параметры = Новый Массив;
		Параметры.Добавить(НастройкаИнтеграции.Ссылка);
		
		ПараметрыЗадания = Новый Структура();
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("ИмяМетода", "ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьТоварныйКаталогРегламентнымЗаданием");
		ПараметрыЗадания.Вставить("Параметры", Параметры);
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
		ПараметрыЗадания.Вставить("Наименование", ОписаниеНастроек.Наименование);
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеТоварногоКаталогаOzon);
		
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		ИдентификаторРегламентногоЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
		
		Если ЗаписатьНастройку Тогда
			НастройкаИнтеграцииОбъект = НастройкаИнтеграции.ПолучитьОбъект();
			НастройкаИнтеграцииОбъект.ИдентификаторРегламентногоЗадания = ИдентификаторРегламентногоЗадания;
			НастройкаИнтеграцииОбъект.ОбменДанными.Загрузка = Истина;
			НастройкаИнтеграцииОбъект.Записать();
		КонецЕсли;
	ИначеЕсли ОбновитьРасписание = Истина Тогда
		
		РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
		Если ОписаниеНастроек.РасписаниеРегламентногоЗадания <> "" Тогда
			Попытка
				РасписаниеРегламентногоЗадания = ЗначениеИзСтрокиВнутр(ОписаниеНастроек.РасписаниеРегламентногоЗадания);
			Исключение
				РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
			КонецПопытки;
		КонецЕсли;
		
		Параметры = Новый Массив;
		Параметры.Добавить(НастройкаИнтеграции.Ссылка);
		
		ПараметрыЗадания = Новый Структура();
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Параметры", Параметры);
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
		ПараметрыЗадания.Вставить("Наименование", ОписаниеНастроек.Наименование);
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторРегламентногоЗадания, ПараметрыЗадания);
	КонецЕсли;
	
	Возврат ИдентификаторРегламентногоЗадания;
	
КонецФункции

Процедура УдалитьРегламентноеЗаданиеОбмена(НастройкаИнтеграции) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторРегламентногоЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаИнтеграции, "ИдентификаторРегламентногоЗадания");
	
	Если НЕ ЕстьРегламентноеЗаданиеОбмена(НастройкаИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
	Если Задание <> Неопределено Тогда
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьРегламентноеЗаданиеОбмена(НастройкаИнтеграции, ИдентификаторРегламентногоЗадания = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		ИдентификаторРегламентногоЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаИнтеграции, "ИдентификаторРегламентногоЗадания");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
	Если Задание = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеТоварногоКаталогаOzon;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Возвращает детальную информацию по видам цен, используемым учетной записью Ozon с заполненным значением цены.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для детализации.
//  ВключатьВыгружаемые       - Булево - Признак включения в результат функции выгружаемых видов цен.
//  ВключатьЗагружаемые       - Булево - Признак включения в результат функции загружаемых видов цен.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с запрошенными видами цен и заполненным значением цены.
//                    см.описание функции ТипыЦенOzon()
//
Функция ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, ВключатьВыгружаемые = Истина, ВключатьЗагружаемые = Истина) Экспорт

	ТипыЦен = ТипыЦенOzon(ВключатьВыгружаемые, ВключатьЗагружаемые);

	// Выгружаемые виды цен.
	Если ВключатьВыгружаемые Тогда
		Для каждого ВидЦены Из УчетнаяЗаписьМаркетплейса.ВидыЦен Цикл
			Результат = ТипыЦен.НайтиСтроки(Новый Структура("Идентификатор", ВидЦены.ИмяНастройки));
			Если Результат.Количество() = 1 Тогда
				Результат[0].Значение = ВидЦены.ВидЦены;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Загружаемые виды цен
	Если ВключатьЗагружаемые Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК Ссылка,
		|	ВидыЦен.ХранилищеНастроекПараметровСпособаЗаданияЦены КАК ХранилищеНастроек
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|ВидыЦен.ПометкаУдаления = ЛОЖЬ";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат ТипыЦен;
		КонецЕсли;

		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Настройки = Выборка.ХранилищеНастроек.Получить();
			Если ТипЗнч(Настройки) = Тип("Структура")
			И (Настройки.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса
			Или Настройки.УчетнаяЗаписьМаркетплейса.Пустая()) Тогда
				Результат = ТипыЦен.НайтиСтроки(Новый Структура("Наименование", Настройки.ТипЦеныНаOzon));
				Если Результат.Количество() = 1 Тогда
					Результат[0].Значение = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ТипыЦен;

КонецФункции

// Возвращает загружаемые типы цен Ozon в виде списка значений.
//
// Возвращаемое значение:
//  СписокЗначений - Список типов цен Ozon.
//
Функция ЗагружаемыеТипыЦенНаOzon() Экспорт

	ТипыЦен = ТипыЦенOzon(Ложь);
	СписокТиповЦенНаOzon = Новый СписокЗначений;
	Для каждого ТипЦен Из ТипыЦен Цикл
		СписокТиповЦенНаOzon.Добавить(ТипЦен.ИдентификаторДляФормул, ТипЦен.Наименование);
	КонецЦикла;

	Возврат СписокТиповЦенНаOzon;

КонецФункции

// Возвращает загружаемые типы цен Ozon, применимые к учетным записям Ozon, в виде массива.
//
// Возвращаемое значение:
//  Массив - Загружаемые типы цен для учетных записей.
//
Функция ПолучитьТипыЦенНаOzonДляУчетныхЗаписей() Экспорт

	Результат = Новый Массив;
	ТипыЦен = ТипыЦенOzon(Ложь);
	ТипыЦенПоУчетнымЗаписям = ТипыЦен.НайтиСтроки(Новый Структура("ДляУчетнойЗаписи", Истина));
	Для каждого ТипЦены Из ТипыЦенПоУчетнымЗаписям Цикл
		Результат.Добавить(ТипЦены.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список действующих учетных записей маркетплейсов.
// 
// Возвращаемое значение:
//  СписокЗначений - Не помеченные на удаление учетные записи Ozon.
//
Функция СписокНастроекПодключенияКСервису() Экспорт
	
	СписокНастроек = Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(УчетныеЗаписиМаркетплейсов.Ссылка) КАК Наименование
	|ИЗ
	|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
	|ГДЕ
	|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
	|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СписокНастроек;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокНастроек.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокНастроек;
	
КонецФункции

// Возвращает параметра способа задания цены.
// 
// Возвращаемое значение:
//  Структура - параметры способа задания цены.
//
Функция СтруктураПараметровСпособаЗаданияЦены() Экспорт

	СтруктураПараметровСпособаЗаданияЦены = Новый Структура;
	СтруктураПараметровСпособаЗаданияЦены.Вставить("ТипЦеныНаOzon", "");
	СтруктураПараметровСпособаЗаданияЦены.Вставить("УчетнаяЗаписьМаркетплейса",
			ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка"));
	
	СтруктураПараметровСпособаЗаданияЦены.Вставить("ИмяТипЦеныНаOzon",
			НСтр("ru = 'Тип цены Ozon'"));
	
	СтруктураПараметровСпособаЗаданияЦены.Вставить("ИмяУчетнаяЗаписьМаркетплейса",
			НСтр("ru = 'Учетная запись Ozon'"));
	
	СтруктураПараметровСпособаЗаданияЦены.Вставить("СписокВыбора", ЗагружаемыеТипыЦенНаOzon());

	Возврат СтруктураПараметровСпособаЗаданияЦены;
	
КонецФункции

// Формирует строковое представление товарной позиции Ozon по шаблону.
//
// Параметры:
//  Номенклатура   - СправочникСсылка.Номенклатура - 
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
//  Упаковка       - СправочникСсылка.ЕдиницыИзмерения - 
//  ОбъектПубликации - СправочникСсылка.НоменклатураПрисоединенныеФайлы,
//                       - Если указано, то возвращается наименование данного объекта.
// 
// Возвращаемое значение:
//  Строка - Строковое представление товарной позиции Ozon.
//
Функция ПредставлениеТоварнойПозиции(Номенклатура, Характеристика, Упаковка = Неопределено, ОбъектПубликации = Неопределено) Экспорт
    
	Если ЗначениеЗаполнено(ОбъектПубликации) Тогда
		Возврат ОбъектПубликации.Наименование;
	Иначе
		ЧастиПредставления = Новый Массив;
		ЧастиПредставления.Добавить(Номенклатура);
		Если Не Характеристика.Пустая() Тогда
			ЧастиПредставления.Добавить(Характеристика);
		КонецЕсли;

		Возврат СтрСоединить(ЧастиПредставления, ", ");
	КонецЕсли;

КонецФункции

// Проверяет установку соединения с маркетплейсом.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись, подключение которой проверяется.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства КодСостояния и ТекстОшибки.
//
Функция ПроверитьСвязьСМаркетплейсом(УчетнаяЗаписьМаркетплейса) Экспорт

	МассивСкладов = Новый Массив;

	ТекстЗапроса = "v1/warehouse/list";
	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ВернутьКодСостояния = Истина;
	ПараметрыЗапроса = Новый Структура("СлужебныеПараметры", СлужебныеПараметры);
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина);

	Результат = Новый Структура("КодСостояния, ТекстОшибки", РезультатЗапроса, "");
	Если РезультатЗапроса = 200 Тогда
		Результат.ТекстОшибки = "OK";
	ИначеЕсли РезультатЗапроса = 301 Тогда
		Результат.ТекстОшибки = "Moved Permanently";
	ИначеЕсли РезультатЗапроса = 400 Тогда
		Результат.ТекстОшибки = "Bad Request";
	ИначеЕсли РезультатЗапроса = 401 Тогда
		Результат.ТекстОшибки = "Unauthorized";
	ИначеЕсли РезультатЗапроса = 403 Тогда
		Результат.ТекстОшибки = "Forbidden";
	ИначеЕсли РезультатЗапроса = 404 Тогда
		Результат.ТекстОшибки = "Not Found";
	ИначеЕсли РезультатЗапроса = 409 Тогда
		Результат.ТекстОшибки = "Conflict";
	ИначеЕсли РезультатЗапроса = 500 Тогда
		Результат.ТекстОшибки = "Internal Server Error";
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выгрузка остатков товарных позиций из ИБ на маркетплейс.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выгрузки.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
//  НулевыеОстатки            - Булево - Признак выгрузки нулевых остатков вместо фактических значений.
//  ТолькоИзменения           - Булево - Признак выгрузки только измененных значений.
//
Процедура ВыгрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, НулевыеОстатки = Ложь, ТолькоИзменения = Истина) Экспорт


	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегламентноеЗадание.ВыгрузкаОстатковНаМаркетплейсOzon.ПодготовкаДанных");

	// Получение настроек учетной записи. Определение необходимости выгрузки.
	ТаблицаСкладов = ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, Ложь);
	Если ТаблицаСкладов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружено сопоставленных складов OZON по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ТаблицаСкладов", ТаблицаСкладов);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаСкладов.Группа КАК Справочник.СтруктурныеЕдиницы) КАК Группа,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.Склад КАК Справочник.СтруктурныеЕдиницы) КАК Склад,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.ИдентификаторСклада КАК СТРОКА(50)) КАК ИдентификаторСклада
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	&ТаблицаСкладов КАК ТаблицаСкладов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка 
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	ТаблицаСкладов.Группа КАК ГруппаСкладов,
		|	ТаблицаСкладов.Склад КАК Склад,
		|	ТаблицаСкладов.ИдентификаторСклада КАК ИдентификаторСклада,
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъекта,
		|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации
		|ПОМЕСТИТЬ ВТНоменклатураСоСкладами
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|		ПО (ИСТИНА)
		|		И (&ОграничениеПоТаблицеТоваров)
		|ГДЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаТоваров";

	ТекстЗамены = "";
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ТекстЗамены =
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|		ПО ТаблицаТоваров.Номенклатура = СтатусыПубликации.Номенклатура
			|			И ТаблицаТоваров.Характеристика = СтатусыПубликации.Характеристика
			|			И ТаблицаТоваров.Упаковка = СтатусыПубликации.Упаковка";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (&ОграничениеПоТаблицеТоваров)", ТекстЗамены);

	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	Если НулевыеОстатки Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад,
			|	0 КАК Остаток
			|ПОМЕСТИТЬ ВТЗапасы";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Запасы.Номенклатура КАК Номенклатура,
			|	Запасы.Характеристика КАК Характеристика,
			|	Запасы.СтруктурнаяЕдиница КАК Склад,
			|	СУММА(Запасы.КоличествоОстаток) КАК Остаток
			|ПОМЕСТИТЬ ВТЗапасы
			|ИЗ
			|	РегистрНакопления.Запасы.Остатки(
			|			,
			|			(Номенклатура, Характеристика, СтруктурнаяЕдиница ) В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					ВТНоменклатураСоСкладами.Номенклатура КАК Номенклатура,
			|					ВТНоменклатураСоСкладами.Характеристика КАК Характеристика,
			|					ВТНоменклатураСоСкладами.Склад КАК Склад
			|				ИЗ
			|					ВТНоменклатураСоСкладами КАК ВТНоменклатураСоСкладами)) КАК Запасы
			|
			|СГРУППИРОВАТЬ ПО
			|	Запасы.Номенклатура,
			|	Запасы.Характеристика,
			|	Запасы.СтруктурнаяЕдиница
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Склад";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТНоменклатураСоСкладами.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВТНоменклатураСоСкладами.Номенклатура КАК Номенклатура,
		|	ВТНоменклатураСоСкладами.Характеристика КАК Характеристика,
		|	ВТНоменклатураСоСкладами.Упаковка КАК Упаковка,
		|	ВТНоменклатураСоСкладами.ГруппаСкладов КАК Склад,
		|	ВТНоменклатураСоСкладами.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ВТНоменклатураСоСкладами.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ВТНоменклатураСоСкладами.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СУММА(ЕСТЬNULL(Запасы.Остаток, 0)) КАК Остаток
		|ПОМЕСТИТЬ ВТНоменклатураКВыгрузке
		|ИЗ
		|	ВТНоменклатураСоСкладами КАК ВТНоменклатураСоСкладами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|		ПО ВТНоменклатураСоСкладами.Номенклатура = СправочникНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапасы КАК Запасы
		|		ПО ВТНоменклатураСоСкладами.Номенклатура = Запасы.Номенклатура
		|			И ВТНоменклатураСоСкладами.Характеристика = Запасы.Характеристика
		|			И ВТНоменклатураСоСкладами.Склад = Запасы.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНоменклатураСоСкладами.УчетнаяЗаписьМаркетплейса,
		|	ВТНоменклатураСоСкладами.Номенклатура,
		|	ВТНоменклатураСоСкладами.Характеристика,
		|	ВТНоменклатураСоСкладами.Упаковка,
		|	ВТНоменклатураСоСкладами.ГруппаСкладов,
		|	ВТНоменклатураСоСкладами.ИдентификаторСклада,
		|	ВТНоменклатураСоСкладами.ИдентификаторОбъекта,
		|	ВТНоменклатураСоСкладами.ИдентификаторПубликации,
		|	СправочникНоменклатуры.ЕдиницаИзмерения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗапасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНоменклатураСоСкладами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНоменклатураКВыгрузке.Номенклатура КАК Номенклатура,
		|	ОграниченияВыгрузки.ПроцентОстатка КАК ПроцентОстатка,
		|	ОграниченияВыгрузки.СтраховойЗапас КАК СтраховойЗапас,
		|	3 КАК Приоритет
		|ПОМЕСТИТЬ ВТОграниченияВыгрузки
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК ОграниченияВыгрузки
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = ОграниченияВыгрузки.ОбластьДействия
		|			И (ОграниченияВыгрузки.Используется)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНоменклатураКВыгрузке.Номенклатура,
		|	ОграниченияВыгрузки.ПроцентОстатка,
		|	ОграниченияВыгрузки.СтраховойЗапас,
		|	1
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = СправочникНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК ОграниченияВыгрузки
		|		ПО (СправочникНоменклатуры.КатегорияНоменклатуры = ОграниченияВыгрузки.ОбластьДействия)
		|			И (ОграниченияВыгрузки.Используется)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОграниченияВыгрузки.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВТОграниченияВыгрузки.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТПриоритетыОграничений
		|ИЗ
		|	ВТОграниченияВыгрузки КАК ВТОграниченияВыгрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОграниченияВыгрузки.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатураКВыгрузке.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВТНоменклатураКВыгрузке.Номенклатура КАК Номенклатура,
		|	ВТНоменклатураКВыгрузке.Характеристика КАК Характеристика,
		|	ВТНоменклатураКВыгрузке.Упаковка КАК Упаковка,
		|	ВТНоменклатураКВыгрузке.Склад КАК Склад,
		|	ВТНоменклатураКВыгрузке.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ВЫБОР
		|		КОГДА ВТПриоритетыОграничений.Приоритет ЕСТЬ NULL
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток
		|		КОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100 < ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100
		|		ИНАЧЕ ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|	КОНЕЦ КАК Остаток,
		|	ВТНоменклатураКВыгрузке.Остаток КАК ОстатокБезОграничений,
		|	ВТНоменклатураКВыгрузке.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ВТНоменклатураКВыгрузке.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ВЫБОР
		|		КОГДА ВТПриоритетыОграничений.Приоритет ЕСТЬ NULL
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток
		|		КОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100 < ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100
		|		ИНАЧЕ ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|	КОНЕЦ <> ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество, 0) КАК ОстатокИзменен
		|ПОМЕСТИТЬ ВыборкаОстатков
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетыОграничений КАК ВТПриоритетыОграничений
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = ВТПриоритетыОграничений.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОграниченияВыгрузки КАК ВТОграниченияВыгрузки
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = ВТОграниченияВыгрузки.Номенклатура
		|			И (ЕСТЬNULL(ВТПриоритетыОграничений.Приоритет, 0) = ВТОграниченияВыгрузки.Приоритет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
		|		ПО ВТНоменклатураКВыгрузке.УчетнаяЗаписьМаркетплейса = ОстаткиТоваровМаркетплейсов.УчетнаяЗаписьМаркетплейса
		|			И ВТНоменклатураКВыгрузке.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
		|			И ВТНоменклатураКВыгрузке.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
		|			И ВТНоменклатураКВыгрузке.Склад = ОстаткиТоваровМаркетплейсов.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНоменклатураКВыгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПриоритетыОграничений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОграниченияВыгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыборкаОстатков.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВыборкаОстатков.Номенклатура КАК Номенклатура,
		|	ВыборкаОстатков.Характеристика КАК Характеристика,
		|	ВыборкаОстатков.Упаковка КАК Упаковка,
		|	ВыборкаОстатков.Склад КАК Склад,
		|	ВыборкаОстатков.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ВЫБОР
		|		КОГДА ВыборкаОстатков.Остаток < 0
		|			ТОГДА 0
		|		ИНАЧЕ ВыборкаОстатков.Остаток
		|	КОНЕЦ КАК Остаток,
		|	ВЫБОР
		|		КОГДА ВыборкаОстатков.Остаток < 0
		|			ТОГДА 0
		|		ИНАЧЕ ВыборкаОстатков.Остаток * &ТекстЗапросаКоэффициентУпаковки
		|	КОНЕЦ КАК ОстатокВУпаковкахOzon,
		|	ВыборкаОстатков.ОстатокБезОграничений КАК ОстатокБезОграничений,
		|	ВыборкаОстатков.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ВыборкаОстатков.ИдентификаторПубликации КАК ИдентификаторПубликации
		|ИЗ
		|	ВыборкаОстатков КАК ВыборкаОстатков
		|ГДЕ
		|	&ТолькоИзменения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВыборкаОстатков";
	
	Если ТолькоИзменения Тогда
		ТекстЗамены = "ВыборкаОстатков.ОстатокИзменен";
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТолькоИзменения", ТекстЗамены);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки", "1/ЕстьNull(ВыборкаОстатков.Упаковка.Коэффициент, 1)");

	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
	
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены товары для выгрузки остатков по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
			
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			СкладыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаСкладов, "Склад" );
			ТоварыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаТоваров, "Номенклатура, Характеристика" );
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			ЛогКомментарий = НСтр("ru = 'Не обнаружены товары для выгрузки остатков по складам:'") + Символы.ПС
			+ СкладыСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ "Параметры:" + Символы.ПС + "НулевыеОстатки = " + НулевыеОстатки + "; " + Символы.ПС
			+ "ТолькоИзменения = " + ТолькоИзменения + ";" + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ "ТаблицаТоваров:" + Символы.ПС + ТоварыСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ПараметрыКонтекст );
		КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		СкладыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаСкладов, "Склад" );
		ТоварыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаТоваров, "Номенклатура, Характеристика" );
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		ЛогТоварыОстатки = Результат.Выгрузить();
		ЛогТоварыОстаткиСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ЛогТоварыОстатки );
		ЛогТоварыОстатки = Неопределено;
		
		ЛогКомментарий = НСтр("ru = 'Обнаружены товары для выгрузки остатков по складам:'") + Символы.ПС
		+ СкладыСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ "Параметры:" + Символы.ПС + "НулевыеОстатки = " + НулевыеОстатки + "; " + Символы.ПС
		+ "ТолькоИзменения = " + ТолькоИзменения + ";" + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ "ТаблицаТоваров:" + Символы.ПС + ТоварыСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ "Остатки: " + Символы.ПС + ЛогТоварыОстаткиСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ПараметрыКонтекст );
	КонецЕсли;

	// Выгрузка итерациями по 100 элементов.
	// Пока не ясна методика учета пакетов в минуту:
	// - по календарной минуте;
	// - по минуте относительно времени отправки первого запроса;
	// - по минуте относительно времени отправки каждого запроса.
	// Реализация построена по второму варианту.

	ЛимитПозицийНаИтерацию = 100;
	ИтерацийВМинуту = 80;

	СчетчикИтераций = 0;
	ДатаИтерации = ТекущаяДатаСеанса();
	ДанныеИтерации = Новый Структура("stocks", Новый Массив);
	ОтправленныеОстатки = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ОтправленныеОстатки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ОтправленныеОстатки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ОтправленныеОстатки.Колонки.Добавить("offer_id", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ОтправленныеОстатки.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
	ОтправленныеОстатки.Колонки.Добавить("warehouse_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));

	ОтправленныеОстатки.Индексы.Добавить("offer_id, product_id, warehouse_id");

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ДанныеОстатка = Новый Структура;
		ДанныеОстатка.Вставить("offer_id", Выборка.ИдентификаторПубликации);
		ДанныеОстатка.Вставить("product_id", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.ИдентификаторОбъекта));
		ДанныеОстатка.Вставить("stock", Цел(Выборка.ОстатокВУпаковкахOzon));
		ДанныеОстатка.Вставить("warehouse_id", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.ИдентификаторСклада));

		ДанныеИтерации.stocks.Добавить(ДанныеОстатка);
		НоваяСтрока = ОтправленныеОстатки.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.Склад = Выборка.Склад;
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Характеристика = Выборка.Характеристика;
		НоваяСтрока.Количество = Выборка.Остаток;
		НоваяСтрока.offer_id = ДанныеОстатка.offer_id;
		НоваяСтрока.product_id = ДанныеОстатка.product_id;
		НоваяСтрока.warehouse_id = ДанныеОстатка.warehouse_id;
		НоваяСтрока.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
		Если ДанныеИтерации.stocks.Количество() = ЛимитПозицийНаИтерацию Тогда
			Если ТекущаяДатаСеанса() - ДатаИтерации < 60 Тогда
				СчетчикИтераций = СчетчикИтераций + 1;
			Иначе
				ДатаИтерации = ТекущаяДатаСеанса();
			КонецЕсли;
			
			ОтправитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеОстатки);
			
			ДанныеИтерации = Новый Структура("stocks", Новый Массив);
			ОтправленныеОстатки.Очистить();
			Если СчетчикИтераций = ИтерацийВМинуту Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ДанныеИтерации.stocks.Количество() > 0 Тогда
		ОтправленныеОстатки.Индексы.Добавить("offer_id, product_id, warehouse_id");
		ОтправитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеОстатки);
	КонецЕсли;

КонецПроцедуры

// Загрузка остатки товарных позиций с маркетплейса в ИБ.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для загрузки.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
//
Процедура ЗагрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегламентноеЗадание.ЗагрузкаОстатковСМаркетплейсаOzon.ПодготовкаДанных");

	// Получение настроек учетной записи. Определение необходимости выгрузки.
	ТаблицаСкладов = ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, Ложь);
	Если ТаблицаСкладов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружено сопоставленных складов OZON по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
		Возврат;
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
	|	СтатусыПубликации.Номенклатура КАК Номенклатура,
	|	СтатусыПубликации.Характеристика КАК Характеристика,
	|	СтатусыПубликации.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК ОстатокFBS,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК РезервFBS,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК ОстатокFBO,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК РезервFBO
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура
	|			И СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика
	|			И СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка
	|ГДЕ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
	|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
	|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)";

	Если ТаблицаТоваров.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|		ПО СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура
			|			И СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика
			|			И СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка",
			"");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружено товаров для загрузки остатков по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
		Возврат;
	КонецЕсли;

	ЛимитПозицийНаИтерацию = 1000;
	ПоследнийИдентификатор = "";
	Фильтр = Новый Структура("offer_id, product_id, visibility", Новый Массив, Новый Массив, "ALL");
	ДанныеИтерации = Новый Структура("filter, last_id, limit", Фильтр, "", 1000);

	МассивИдентификаторов = Новый Массив;
	ПолученныеОстатки = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ПолученныеОстатки.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
	ПолученныеОстатки.Колонки.Добавить("ОстатокFBO", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ПолученныеОстатки.Колонки.Добавить("РезервFBO", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ПолученныеОстатки.Колонки.Добавить("ОстатокFBS", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ПолученныеОстатки.Колонки.Добавить("РезервFBS", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));

	Выборка = Результат.Выбрать();

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, Макс(ТаблицаТоваров.Количество(), Выборка.Количество()) / 1000);

	Пока Выборка.Следующий() Цикл
		ИдентификаторЧислом = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.ИдентификаторОбъектаМаркетплейса);
		МассивИдентификаторов.Добавить(ИдентификаторЧислом);
		НоваяСтрока = ПолученныеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.product_id = ИдентификаторЧислом;
		Если МассивИдентификаторов.Количество() = ЛимитПозицийНаИтерацию Тогда
			ДанныеИтерации.last_id = ПоследнийИдентификатор;
			ДанныеИтерации.filter.Вставить("product_id", МассивИдентификаторов);
			ПолученныеОстатки.Индексы.Добавить("product_id");
			ПоследнийИдентификатор = ПолучитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ПолученныеОстатки);
			ДанныеИтерации.filter.product_id.Очистить();
			ПолученныеОстатки.Очистить();
			ПолученныеОстатки.Индексы.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если МассивИдентификаторов.Количество() > 0 Тогда
		ДанныеИтерации.filter.Вставить("product_id", МассивИдентификаторов);
		ПолученныеОстатки.Индексы.Добавить("product_id");
		ПолучитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ПолученныеОстатки);
	КонецЕсли;

КонецПроцедуры

// Выгрузка цен товарных позиций из ИБ на маркетплейс.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выгрузки.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
//  ТолькоИзменения           - Булево - Признак выгрузки только измененных значений.
//
Процедура ВыгрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, ТолькоИзменения = Истина ) Экспорт

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ТаблицаТоваровПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаТоваров, "Номенклатура, Характеристика" );
		
		ЛогКомментарий = НСтр("ru = 'Выгрузка цен товаров:'") + Символы.ПС
		+ "Товары:" + Символы.ПС + ТаблицаТоваровПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С" ) );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ЛогПараметры );
	КонецЕсли;

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);

	Если НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок.Пустая()
		И НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок.Пустая()
		И НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен.Пустая() Тогда
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		НСтр("ru = 'Не установлены виды цен для выгрузки.'"));
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			ЛогКомментарий = НСтр("ru = 'Не установлены виды цен для выгрузки.'");
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина, ЛогПараметры );
		КонецЕсли;
			
		Возврат;
	КонецЕсли;

	ВидыЦен = Новый Массив;
	ВидыЦен.Добавить(НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок);
	ВидыЦен.Добавить(НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок);
	ВидыЦен.Добавить(НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен);

	ТекущаяДата = КонецДня(ТекущаяДатаСеанса());

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТоварыБезЦен
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	СтатусыПубликации.Номенклатура КАК Номенклатура,
	|	СтатусыПубликации.Характеристика КАК Характеристика,
	|	СтатусыПубликации.Упаковка КАК Упаковка,
	|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
	|	СтатусыПубликации.ЦенаДоСкидки КАК ЦенаДоСкидки,
	|	СтатусыПубликации.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
	|	СтатусыПубликации.МинимальнаяЦена КАК МинимальнаяЦена,
	|	ВидыЦен.Ссылка КАК ВидЦены
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО (ВидыЦен.Ссылка В (&ВидыЦен))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = СтатусыПубликации.Номенклатура.КатегорияНоменклатуры)
	|			И (&ОграничениеПоТаблицеТоваров)
	|ГДЕ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
	|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыБезЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦен, НЕОПРЕДЕЛЕНО) КАК ВидЦены,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент, 1) КАК Цена
	|ПОМЕСТИТЬ ТоварыСЦенами
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				(Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|							ТаблицаТоваров.Характеристика КАК Характеристика
	|						ИЗ
	|							ТаблицаТоваров КАК ТаблицаТоваров)
	|					И ВидЦен В (&ВидыЦен)) КАК ЦеныНоменклатуры
	|		ПО ТаблицаТоваров.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ЦеныНоменклатуры.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	ТаблицаТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныДоСкидок
	|				ТОГДА ТоварыСЦенами.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦенаДоСкидки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныСУчетомСкидок
	|				ТОГДА ТоварыСЦенами.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦенаСоСкидкой,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныМинимальныхЦен
	|				ТОГДА ТоварыСЦенами.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК МинимальнаяЦена
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	|		ПО ТаблицаТоваров.Номенклатура = ТоварыСЦенами.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТоварыСЦенами.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.ВидОбъектаМаркетплейса,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.ИдентификаторПубликации,
	|	ТаблицаТоваров.ИдентификаторОбъектаМаркетплейса,
	|	ТаблицаТоваров.ЦенаДоСкидки,
	|	ТаблицаТоваров.ЦенаСоСкидкой,
	|	ТаблицаТоваров.МинимальнаяЦена";
	
	Если ТолькоИзменения Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(ВЫБОР
		|				КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныДоСкидок
		|					ТОГДА ТоварыСЦенами.Цена
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> ТаблицаТоваров.ЦенаДоСкидки
		|		ИЛИ МАКСИМУМ(ВЫБОР
		|				КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныСУчетомСкидок
		|					ТОГДА ТоварыСЦенами.Цена
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> ТаблицаТоваров.ЦенаСоСкидкой
		|		ИЛИ МАКСИМУМ(ВЫБОР
		|				КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныМинимальныхЦен
		|					ТОГДА ТоварыСЦенами.Цена
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> ТаблицаТоваров.МинимальнаяЦена)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ДатаЦен", ТекущаяДата);
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	Запрос.УстановитьПараметр("ВидЦеныДоСкидок", НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок);
	Запрос.УстановитьПараметр("ВидЦеныСУчетомСкидок", НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок);
	Запрос.УстановитьПараметр("ВидЦеныМинимальныхЦен", НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);

	ТекстЗамены = "";
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ТекстЗамены =
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыБезЦен КАК ТоварыБезЦен
			|		ПО ТоварыБезЦен.Номенклатура = СтатусыПубликации.Номенклатура
			|			И ТоварыБезЦен.Характеристика = СтатусыПубликации.Характеристика
			|			И ТоварыБезЦен.Упаковка = СтатусыПубликации.Упаковка";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (&ОграничениеПоТаблицеТоваров)", ТекстЗамены);

	Запрос.Текст = ТекстЗапроса;

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружено товаров для выгрузки цен по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
			
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			ЛогКомментарий = НСтр("ru = 'Не обнаружено товаров для выгрузки цен.'");
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Ложь, ЛогПараметры );
		КонецЕсли;
			
		Возврат;
	КонецЕсли;

	ПредставлениеВалюты = "RUB";
	ЛимитПозицийНаИтерацию = 1000;

	ДанныеИтерации = Новый Структура("prices", Новый Массив);
	ОтправленныеЦены = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ОтправленныеЦены.Колонки.Добавить("offer_id", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ОтправленныеЦены.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
	ОтправленныеЦены.Колонки.Добавить("ЦенаДоСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ОтправленныеЦены.Колонки.Добавить("ЦенаСоСкидкой", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ОтправленныеЦены.Колонки.Добавить("МинимальнаяЦена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ОтправленныеЦены.Индексы.Добавить("offer_id, product_id");

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ДанныеЦены = Новый Структура;
		ДанныеЦены.Вставить("auto_action_enabled", "UNKNOWN");
		ДанныеЦены.Вставить("currency_code", ПредставлениеВалюты);
		ДанныеЦены.Вставить("min_price", Формат(Выборка.МинимальнаяЦена, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
		ДанныеЦены.Вставить("offer_id", Выборка.ИдентификаторПубликации);
		ДанныеЦены.Вставить("old_price", Формат(Выборка.ЦенаДоСкидки, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
		ДанныеЦены.Вставить("price", Формат(Выборка.ЦенаСоСкидкой, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
		ДанныеЦены.Вставить("product_id", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.ИдентификаторОбъектаМаркетплейса));

		ДанныеИтерации.prices.Добавить(ДанныеЦены);

		НоваяСтрока = ОтправленныеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.МинимальнаяЦена = Выборка.МинимальнаяЦена;
		НоваяСтрока.ЦенаДоСкидки = Выборка.ЦенаДоСкидки;
		НоваяСтрока.ЦенаСоСкидкой = Выборка.ЦенаСоСкидкой;
		НоваяСтрока.offer_id = ДанныеЦены.offer_id;
		НоваяСтрока.product_id = ДанныеЦены.product_id;

		Если ДанныеИтерации.prices.Количество() = ЛимитПозицийНаИтерацию Тогда
			ОтправитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеЦены);
			ДанныеИтерации.prices.Очистить();
			ОтправленныеЦены.Очистить();
			ОтправленныеЦены.Индексы.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ДанныеИтерации.prices.Количество() > 0 Тогда
		ОтправитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеЦены);
	КонецЕсли;

КонецПроцедуры

//  Возвращает информацию о счетчике выгрузки товаров.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для получения информации о счетчике.
// 
// Возвращаемое значение:
//  Структура - Структура формата:
//  ЗначениеУстановлено - Булево - Признак, что метод API успешно вернул результат;
//  Остаток - Число - Остаток счетчика;
//  ВремяСброса - Дата - Дата сброса счетчика;
//  Значение - Число - Номинальное значение счетчика.
//
Функция ПолучитьСчетчикВыгрузки(УчетнаяЗаписьМаркетплейса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = "reset_at";
	ПараметрыЗапроса = Новый Структура("СлужебныеПараметры", СлужебныеПараметры);
	Результат = Новый Структура;
	Результат.Вставить("ЗначениеУстановлено", Ложь);
	Результат.Вставить("Использовано", 0);
	Результат.Вставить("Остаток", 0);
	Результат.Вставить("ВремяСброса", '00010101000000');
	Результат.Вставить("Значение", 0);
	
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеЛимитовЗагрузки );
	
	ТекстЗапроса = "v4/product/info/limit";
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина
	, ПараметрыКонтекст	);

	Если РезультатЗапроса <> Неопределено Тогда
		Результат.ЗначениеУстановлено = Истина;
		Результат.Использовано = РезультатЗапроса.daily_update.usage;
		Результат.ВремяСброса = РезультатЗапроса.daily_update.reset_at;
		Результат.Значение = РезультатЗапроса.daily_update.limit;
		Результат.Остаток = Результат.Значение - Результат.Использовано;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Перенос товарных позиций из списка доступных для продажи в архив. 
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
// 
// Возвращаемое значение:
//  Структура - Результат выполнения.
//              Подробнее см.НоваяОшибка()
//
Функция ПеренестиТоварыВАрхив(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	ОписаниеОшибки = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТоварыКПереносу
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&УчетнаяЗапись КАК УчетнаяЗаписьМаркетплейса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
	|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
	|	ТоварыКПереносу.Характеристика КАК Характеристика,
	|	ТоварыКПереносу.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК product_id
	|ИЗ
	|	ТоварыКПереносу КАК ТоварыКПереносу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
	|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
	|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И (СтатусыПубликации.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))
	|ГДЕ
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса <> """"";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОписаниеОшибки.КодОшибки = 1;
		ОписаниеОшибки.ОписаниеОшибки = НСтр("ru = 'Доступные для переноса в архив товары не найдены. Переносить можно только товары, не находящиеся в архиве.'");
		Возврат ОписаниеОшибки;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ЛимитПозицийНаИтерацию = 500;

	СведенияОВыгруженныхДанных = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ИдентификаторыТоваров = Новый Массив;
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ИдентификаторыТоваров.Добавить(Выборка.product_id);
		НоваяСтрока = СведенияОВыгруженныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ИдентификаторыТоваров.Количество() = ЛимитПозицийНаИтерацию Тогда
			ДанныеИтерации = Новый Структура("product_id", ИдентификаторыТоваров);
			ВыгрузитьПорциюТоваровВАрхив(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки);
			ИдентификаторыТоваров.Очистить();
			СведенияОВыгруженныхДанных.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ИдентификаторыТоваров.Количество() > 0 Тогда
		ДанныеИтерации = Новый Структура("product_id", ИдентификаторыТоваров);
		ВыгрузитьПорциюТоваровВАрхив(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки);
	КонецЕсли;

	Если ЕстьОшибки Тогда
		ОписаниеОшибки.КодОшибки = 2;
		ОписаниеОшибки.ОписаниеОшибки = НСтр("ru = 'При переносе товаров в архив возникли ошибки.
			|Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Возврат ОписаниеОшибки;

КонецФункции

// Возврат товаров из архива.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
//
Процедура ВернутьТоварыИзАрхива(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТоварыКПереносу
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&УчетнаяЗапись КАК УчетнаяЗаписьМаркетплейса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
	|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
	|	ТоварыКПереносу.Характеристика КАК Характеристика,
	|	ТоварыКПереносу.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК product_id
	|ИЗ
	|	ТоварыКПереносу КАК ТоварыКПереносу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
	|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
	|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И (СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ЛимитПозицийНаИтерацию = 500;

	СведенияОВыгруженныхДанных = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ИдентификаторыТоваров = Новый Массив;
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ИдентификаторыТоваров.Добавить(Выборка.product_id);
		НоваяСтрока = СведенияОВыгруженныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ИдентификаторыТоваров.Количество() = ЛимитПозицийНаИтерацию Тогда
			ДанныеИтерации = Новый Структура("product_id", ИдентификаторыТоваров);
			ВыгрузитьПорциюТоваровИзАрхива(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных);
			ИдентификаторыТоваров.Очистить();
			СведенияОВыгруженныхДанных.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ИдентификаторыТоваров.Количество() > 0 Тогда
		ДанныеИтерации = Новый Структура("product_id", ИдентификаторыТоваров);
		ВыгрузитьПорциюТоваровИзАрхива(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных);
	КонецЕсли;

КонецПроцедуры

// Возвращает коды ошибок.
// 
// Возвращаемое значение:
//  Структура - описания ошибок.
//
Функция КодыОшибокРегистраСтатусовПубликацииТоваров() Экспорт

	КодыОшибок = Новый Структура;
	КодыОшибок.Вставить("ОшибкаЗаполненияДанных", "Ошибка_заполнения_данных_в_1С");
	КодыОшибок.Вставить("ОшибкаПубликацииТоваров", "Ошибка_публикации");
	КодыОшибок.Вставить("ОшибкаЗагрузкиСертификата", "Ошибка_загрузки_сертификата");
	КодыОшибок.Вставить("ОшибкаВыборкиТоваров", "Ошибка_выборки_товаров");
	КодыОшибок.Вставить("ОшибкаПереносаТоваров", "Ошибка_переноса_в_архив");
	КодыОшибок.Вставить("ОшибкаВозвратаТоваров", "Ошибка_возврата_из_архива");
	КодыОшибок.Вставить("ОшибкаУдаленияТоваров", "Ошибка_удаления_товаров");

	Возврат КодыОшибок;

КонецФункции

// Удаление товаров с маркетплейса.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
// 
// Возвращаемое значение:
//  Структура - Результат выполнения.
//              Подробнее см.НоваяОшибка()
//
Функция УдалитьТовары(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	ОписаниеОшибки = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТоварыКПереносу
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
	|	ТоварыКПереносу.Характеристика КАК Характеристика,
	|	ТоварыКПереносу.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторПубликации КАК offer_id
	|ИЗ
	|	ТоварыКПереносу КАК ТоварыКПереносу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
	|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
	|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И (СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))
	|			И (СтатусыПубликации.ИдентификаторFBOSKU = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
	|	ТоварыКПереносу.Характеристика КАК Характеристика,
	|	ТоварыКПереносу.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторПубликации КАК offer_id
	|ИЗ
	|	ТоварыКПереносу КАК ТоварыКПереносу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
	|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
	|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И (СтатусыПубликации.ИдентификаторFBOSKU = """")
	|			И (СтатусыПубликации.ИдентификаторFBSSKU = """")
	|			И (СтатусыПубликации.ДатаСозданияНаМаркетплейсе = ДАТАВРЕМЯ(1, 1, 1))
	|			И (СтатусыПубликации.ЗаданиеПубликации = """")
	|			И СтатусыПубликации.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве)";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	ПакетРезультата = Запрос.ВыполнитьПакет();
	Результат = ПакетРезультата[ПакетРезультата.ВГраница() - 1];
	РезультатНеАрхивныхПозиций = ПакетРезультата[ПакетРезультата.ВГраница()];
	
	ТоварыДляУдаленияКоличество = ТаблицаТоваров.Количество();
	АктивныеТоварыКоличество = Результат.Выгрузить().Количество();
	НеАктивныеТоварыКоличество = РезультатНеАрхивныхПозиций.Выгрузить().Количество();
	ВсеВыбранныеТоварыМожноУдалить = Истина;
	Если ТоварыДляУдаленияКоличество <> АктивныеТоварыКоличество + НеАктивныеТоварыКоличество Тогда
		ВсеВыбранныеТоварыМожноУдалить = Ложь;
	КонецЕсли;
	
	СтатусАрхив = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве");
	Если ВсеВыбранныеТоварыМожноУдалить = Ложь Тогда
		ОписаниеОшибки.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Шаблон = НСтр("ru = 'Не все выбранные товары можно удалить. Удалять можно только товары с незаполненными идентификаторами товара площадки маркетплейса Ozon (SKU FBO и SKU FBS), имеющие статус ""%1"".'");
		ОписаниеОшибки.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,	СтатусАрхив);
	ИначеЕсли Результат.Пустой() И РезультатНеАрхивныхПозиций.Пустой() Тогда
		ОписаниеОшибки.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Шаблон = НСтр("ru = 'Доступные для удаления товары не найдены. Удалять можно только товары с незаполненными идентификаторами товара площадки маркетплейса Ozon (SKU FBO и SKU FBS), имеющие статус ""%1"".'");
		ОписаниеОшибки.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтатусАрхив);
		Возврат ОписаниеОшибки;
	КонецЕсли;

	ЕстьОшибки = Ложь;

	// Удаление архивных товаров.
	ЛимитПозицийНаИтерацию = 500;

	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная));
	СведенияОВыгруженныхДанных = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	СведенияОВыгруженныхДанных.Колонки.Добавить("offer_id", ОписаниеТипаСтрока250);
	ИдентификаторыТоваров = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыТоваров.Добавить(Новый Структура("offer_id", Выборка.offer_id));
		НоваяСтрока = СведенияОВыгруженныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ИдентификаторыТоваров.Количество() = ЛимитПозицийНаИтерацию Тогда
			ДанныеИтерации = Новый Структура("products", ИдентификаторыТоваров);
			УдалитьПорциюТоваров(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки);
			ИдентификаторыТоваров.Очистить();
			СведенияОВыгруженныхДанных.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ИдентификаторыТоваров.Количество() > 0 Тогда
		ДанныеИтерации = Новый Структура("products", ИдентификаторыТоваров);
		УдалитьПорциюТоваров(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки);
	КонецЕсли;

	// Удаление неархивных товаров.
	Выборка = РезультатНеАрхивныхПозиций.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
			ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса",УчетнаяЗаписьМаркетплейса);
			ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", Выборка.Номенклатура);
			ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка", Выборка.Упаковка);
			БлокировкаДанных.Заблокировать();

			НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(Выборка.Упаковка);
			НаборЗаписей.Записать();

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЕстьОшибки = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При удалении товара %1 возникла ошибка: %2'"),
			ПредставлениеТоварнойПозиции(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Упаковка),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

	Если ЕстьОшибки Тогда
		ОписаниеОшибки.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаУдаленияТоваров;
		ОписаниеОшибки.ОписаниеОшибки = 
		НСтр("ru = 'При удалении товаров возникли ошибки.
              |Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Возврат ОписаниеОшибки;

КонецФункции

// Формирует список настроек учетной записи. 
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
//  ТолькоЗагружаемые         - Булево - Признак удаления выгружаемых видов цен из результата.
// 
// Возвращаемое значение:
//  Структура - Настройки учетной записи.
//
Функция НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса, ТолькоЗагружаемые = Ложь) Экспорт

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);

	ВидыЦен = НастройкиУчетнойЗаписи.ВидыЦен;
	Если ТолькоЗагружаемые Тогда
		ВидыЦен.Очистить();
	КонецЕсли;
	ТипыЦен = ТипыЦенOzon(Ложь);
	Для каждого ТипЦены Из ТипыЦен Цикл
		ВидыЦен.Вставить(ТипЦены.Идентификатор, ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
	КонецЦикла;
    
    Возврат НастройкиУчетнойЗаписи;
КонецФункции

// Возвращает список используемых видов цен. 
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
// 
// Возвращаемое значение:
//  Массив - Список используемых видов цен, исключая незаполненные.
//
Функция ИспользуемыеВидыЦен(УчетнаяЗаписьМаркетплейса) Экспорт

	НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса);

	ВидыЦен = Новый Массив;
	Для каждого ВидЦены Из НастройкиУчетнойЗаписи.ВидыЦен Цикл
		Если Не ВидЦены.Значение.Пустая() Тогда
			ВидыЦен.Добавить(ВидЦены.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат ВидыЦен;

КонецФункции

// Формирует настройки по-умолчанию для вывода цен и остатков в форме публикации товаров.
//
// Возвращаемое значение:
//  Структура - Настройки отображения остатков и цен в таблице и информационных полях.
//
Функция НовыеПараметрыОтображенияОстатковЦен() Экспорт

	Результат = Новый Структура();

	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокПоУчету", Истина, Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокНаOzon", Истина, Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокFBO", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокFBS", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаСоСкидкой", Истина, Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаДоСкидки", Истина, Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "МинимальнаяЦена", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаСУчетомАкцийПродавца", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаСУчетомВсехАкций", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "РекомендованнаяЦена", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаПоставщика", Истина);
	
	Результат.Вставить("ОстаткиИнфоПоля", Новый Массив);
	Результат.Вставить("ОстаткиПодсказки", Новый Массив);
	Результат.Вставить("ЦеныИнфоПоля", Новый Массив);
	Результат.Вставить("ЦеныПодсказки", Новый Массив);

	Возврат Результат;

КонецФункции


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс  

Функция СопоставлениеКатегорийТоваровКоличество( УчетнаяЗапись ) Экспорт
	Результат = 0;
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСопоставлено
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	|ГДЕ
	|	СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = &ВидОбъектаМаркетплейса
	|	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	Запрос.УстановитьПараметр( "ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров" ) );
	ЗапросВыборка = Запрос.Выполнить().Выбрать();
	Если ЗапросВыборка.Следующий() Тогда
		Если ЗапросВыборка.КоличествоСопоставлено <> Null Тогда
			Результат = ЗапросВыборка.КоличествоСопоставлено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПояснениеДляТекстаПоКлючевымСловам(Текст)
	Пояснение = "";
	Если Найти(Текст,"OVER_MAX_OVH_NON_KGT") > 0 Тогда
		Пояснение=НСтр("ru = 'Крупногабаритный товар не может продаваться с указанного склада'");
	КонецЕсли;

	Если Найти(Текст, Пояснение) > 0 Тогда
		Пояснение="";
	КонецЕсли;

	Возврат Пояснение;
КонецФункции

Процедура ОтправитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, СведенияОВыгруженныхДанных)

	ТекстЗапроса = "v2/products/stocks";
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина, ПараметрыКонтекст );
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	Иначе
		ДатаВыгрузки = ТекущаяДатаСеанса();
		Для каждого ЭлементРезультата Из РезультатЗапроса.result Цикл
			СтруктураПоиска = Новый Структура("offer_id, product_id, warehouse_id",
				ЭлементРезультата.offer_id,
				ЭлементРезультата.product_id,
				ЭлементРезультата.warehouse_id);
			РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
			Если РезультатПоиска.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;

			СтрокаРезультатаПоиска = РезультатПоиска[0];
			Если ЭлементРезультата.updated Тогда
				МенеджерЗаписи = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРезультатаПоиска);
				МенеджерЗаписи.ДатаВыгрузкиОстатков = ДатаВыгрузки;
				МенеджерЗаписи.Записать(Истина);
			Иначе
				МассивОшибок = Новый Массив;
				Для каждого ЭлементСпискаОшибок Из ЭлементРезультата.errors Цикл
					ОшибкаКодИТекст = "" + ЭлементСпискаОшибок.code + ":" + ЭлементСпискаОшибок.message;
					
					ПояснениеТекстаОшибки=ПолучитьПояснениеДляТекстаПоКлючевымСловам(ОшибкаКодИТекст);
					Если Не ПустаяСтрока(ПояснениеТекстаОшибки) Тогда
						ОшибкаКодИТекст = ОшибкаКодИТекст + " ( " + ПояснениеТекстаОшибки + " )"
					КонецЕсли;
					
					МассивОшибок.Добавить(ОшибкаКодИТекст);
				КонецЦикла;
				
				
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При выгрузке остатка товара %1 по складу %2 произошла ошибка:'"),
				ПредставлениеТоварнойПозиции(СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Упаковка),
				СтрокаРезультатаПоиска.Склад);
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				СообщениеОбОшибке + Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС));
				
				Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
					ЛогКомментарий = СообщениеОбОшибке + ": " + СтрСоединить(МассивОшибок, Символы.ПС);
					ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С" ) );
					ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина, ЛогПараметры );
				КонецЕсли;
					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, СведенияОВыгруженныхДанных)

	ТекстЗапроса = "v3/product/info/stocks";
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаОстатковВ1С );
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина, ПараметрыКонтекст );
	Если РезультатЗапроса = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ДатаЗагрузки = ТекущаяДатаСеанса();
	Для каждого ЭлементРезультата Из РезультатЗапроса.result.items Цикл
		СтруктураПоиска = Новый Структура("product_id", ЭлементРезультата.product_id);
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультатаПоиска = РезультатПоиска[0];
		Для каждого ОстаткиПоТипуСклада Из ЭлементРезультата.stocks Цикл
			Если ОстаткиПоТипуСклада.type = "fbo" Тогда
				СтрокаРезультатаПоиска.ОстатокFBO = СтрокаРезультатаПоиска.ОстатокFBO + ОстаткиПоТипуСклада.present;
				СтрокаРезультатаПоиска.РезервFBO = СтрокаРезультатаПоиска.РезервFBO + ОстаткиПоТипуСклада.reserved;
			ИначеЕсли ОстаткиПоТипуСклада.type = "fbs" Тогда
				СтрокаРезультатаПоиска.ОстатокFBS = СтрокаРезультатаПоиска.ОстатокFBS + ОстаткиПоТипуСклада.present;
				СтрокаРезультатаПоиска.РезервFBS = СтрокаРезультатаПоиска.РезервFBS + ОстаткиПоТипуСклада.reserved;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаОстатка Из СведенияОВыгруженныхДанных Цикл
			МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаОстатка);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ОстатокFBO = СтрокаОстатка.ОстатокFBO;
				МенеджерЗаписи.РезервFBO = СтрокаОстатка.РезервFBO;
				МенеджерЗаписи.ОстатокFBS = СтрокаОстатка.ОстатокFBS;
				МенеджерЗаписи.РезервFBS = СтрокаОстатка.РезервFBS;
				МенеджерЗаписи.ДатаАктуальностиОстатковМаркетплейса = ДатаЗагрузки;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат РезультатЗапроса.result.last_id;

КонецФункции

Процедура ОтправитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, СведенияОВыгруженныхДанных)

	ТекстЗапроса = "v1/product/import/prices";
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С );
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина, ПараметрыКонтекст );
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДатаВыгрузки = ТекущаяДатаСеанса();
	Для каждого ЭлементРезультата Из РезультатЗапроса.result Цикл
		СтруктураПоиска = Новый Структура("offer_id, product_id",
			ЭлементРезультата.offer_id,
			ЭлементРезультата.product_id);
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРезультатаПоиска = РезультатПоиска[0];
		Если ЭлементРезультата.updated Тогда
			МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРезультатаПоиска);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ЦенаДоСкидки = СтрокаРезультатаПоиска.ЦенаДоСкидки;
				МенеджерЗаписи.ЦенаСоСкидкой = СтрокаРезультатаПоиска.ЦенаСоСкидкой;
				МенеджерЗаписи.МинимальнаяЦена = СтрокаРезультатаПоиска.МинимальнаяЦена;
				МенеджерЗаписи.ДатаВыгрузкиЦенПродажи = ДатаВыгрузки;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		Иначе
			МассивОшибок = Новый Массив;
			Для каждого ЭлементСпискаОшибок Из ЭлементРезультата.errors Цикл
				МассивОшибок.Добавить(ЭлементСпискаОшибок.message);
			КонецЦикла;
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при выгрузке цен товара <%1>:'"),
			ПредставлениеТоварнойПозиции(СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Упаковка));
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке + Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС));
			
			Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
				ЛогКомментарий = СообщениеОбОшибке + ": " + СтрСоединить(МассивОшибок, Символы.ПС);
				ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С" ) );
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина, ЛогПараметры );
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьПорциюТоваровВАрхив(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки)

	ТекстЗапроса = "v1/product/archive";
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ТоварВАрхив );
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ДанныеИтерации, УчетнаяЗаписьМаркетплейса, Истина, ПараметрыКонтекст);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	Иначе
		Если РезультатЗапроса.result = Истина Тогда
			Для каждого КлючЗаписи Из СведенияОВыгруженныхДанных Цикл
				МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве");
					МенеджерЗаписи.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьОшибки = Истина;
			ТекстСообщения = НСтр("ru = 'При помещении товаров в архив возникли ошибки.'");
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьПорциюТоваровИзАрхива(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных)

	ТекстЗапроса = "v1/product/unarchive";
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ТоварИзАрхива );
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ДанныеИтерации, УчетнаяЗаписьМаркетплейса, Истина, ПараметрыКонтекст);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	Иначе
		Если РезультатЗапроса.result = Истина Тогда
			Для каждого КлючЗаписи Из СведенияОВыгруженныхДанных Цикл
				МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторFBOSKU) И ПустаяСтрока(МенеджерЗаписи.ИдентификаторFBSSKU) Тогда
						МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
					ИначеЕсли Не ПустаяСтрока(МенеджерЗаписи.ОписаниеОшибки) Тогда
						МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками");
					Иначе
						МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен");
					КонецЕсли;
					МенеджерЗаписи.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'При помещении товаров в архив возникли ошибки.'");
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	Возврат;

КонецПроцедуры

Процедура УдалитьПорциюТоваров(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки)

	ТекстЗапроса = "v2/products/delete";

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "status");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ТоварУдалить );	
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ДанныеИтерации, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина, ПараметрыКонтекст);

	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементОтвета Из РезультатЗапроса.Результат Цикл
		СтруктураПоиска = Новый Структура("offer_id");
		СтруктураПоиска.offer_id = ЭлементОтвета.offer_id;
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРезультатаПоиска = РезультатПоиска[0];
		Если ЭлементОтвета.is_deleted Тогда
			НачатьТранзакцию();
			Попытка
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
				ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса",УчетнаяЗаписьМаркетплейса);
				ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", СтрокаРезультатаПоиска.Номенклатура);
				ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", СтрокаРезультатаПоиска.Характеристика);
				ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка", СтрокаРезультатаПоиска.Упаковка);
				БлокировкаДанных.Заблокировать();
				
				НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
				НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаРезультатаПоиска.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(СтрокаРезультатаПоиска.Характеристика);
				НаборЗаписей.Отбор.Упаковка.Установить(СтрокаРезультатаПоиска.Упаковка);
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			ЕстьОшибки = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При удалении товара %1 возникла ошибка: %2'"),
			ПредставлениеТоварнойПозиции(СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Упаковка),
			СтрокаРезультатаПоиска.error);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция СтатусыПубликацииУстановитьИзмененыРеквизиты( Ссылка )
    
    УстановитьПривилегированныйРежим( Истина );
    
    ОтборЗначение = Неопределено;
    
	ИсточникТип = ТипЗнч( Ссылка );
	Если ИсточникТип = Тип( "СправочникСсылка.Номенклатура" ) Тогда
		ОтборИмяПоля = "Номенклатура";
		ОтборЗначение = Ссылка;
	ИначеЕсли ИсточникТип = Тип( "СправочникСсылка.НоменклатураПрисоединенныеФайлы" ) Тогда
		ОтборИмяПоля = "ОбъектПубликации";
		ОтборЗначение = Ссылка;
	ИначеЕсли ИсточникТип = Тип( "СправочникСсылка.ХарактеристикиНоменклатуры" ) Тогда
		ОтборИмяПоля = "Характеристика";
		ОтборЗначение = Ссылка;
	ИначеЕсли ИсточникТип = Тип( "СправочникСсылка.ХарактеристикиНоменклатурыПрисоединенныеФайлы" ) Тогда
		ОтборИмяПоля = "ОбъектПубликации";
		ОтборЗначение = Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( ОтборЗначение ) Тогда
		Возврат Ложь;
	КонецЕсли;

	ВидОбъектаМаркетплейса = ПредопределенноеЗначение( "Перечисление.ВидыОбъектовМаркетплейсов.Товар" );
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|ГДЕ
	|	ВидОбъектаМаркетплейса = &ВидОбъектаМаркетплейса
	|	И &УсловиеОтбора";
	
	ЗапросТекст = СтрЗаменить( ЗапросТекст, "&УсловиеОтбора", "СтатусыПубликацииОбъектовМаркетплейсаOzon." + ОтборИмяПоля + " = &ОтборЗначение"  );
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "ОтборЗначение", ОтборЗначение );
	Запрос.УстановитьПараметр( "ВидОбъектаМаркетплейса", ВидОбъектаМаркетплейса );
	
	ЗапросРезультат = Запрос.Выполнить();
	Если ЗапросРезультат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросВыборка = ЗапросРезультат.Выбрать();
	Пока ЗапросВыборка.Следующий() Цикл
		СтатусыЗапись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( СтатусыЗапись, ЗапросВыборка );
		СтатусыЗапись.Прочитать();
		Если СтатусыЗапись.Выбран() = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтатусыЗапись.ИзмененыРеквизиты = Ложь Тогда
			СтатусыЗапись.ИзмененыРеквизиты = Истина;
			СтатусыЗапись.Записать( Истина );
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим( Ложь );
	
	Возврат Истина;
КонецФункции


#Область ПодпискиНаСобытияСлужебные

Процедура ИнтеграцияСМаркетплейсомOzonПриЗаписиСправочников(Источник, Отказ) Экспорт

	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Источник.Ссылка;
	Попытка
		СтатусыПубликацииУстановитьИзмененыРеквизиты( Ссылка );
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , Ссылка, ТекстОшибки );
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти


#Область СервисныеФункции

Функция АдресСервера()

	Возврат "api-seller.ozon.ru";

КонецФункции

// Возвращает постфикс неиспользуемой категории
//
Функция ПостфиксНеиспользуемойКатегории() Экспорт

	Возврат " " + НСтр("ru = '(Не используется)'");

КонецФункции

// Возвращает данные учетной записи.
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//  Структура - данные учетной записи. 
//    * Организация   - СправочникСсылка.Организации - организация учетной записи.
//    * ИдентификаторКлиента - Строка - идентификатор клиента учетной записи.
//    * ИдентификаторУчетнойЗаписи - Строка - идентификатор учетной записи.
//
Функция ДанныеУчетнойЗаписи(УчетнаяЗаписьМаркетплейса)

	ДанныеУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьМаркетплейса, "Организация, ИдентификаторКлиента");

	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойЗаписи.Организация) ИЛИ НЕ ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ИдентификаторКлиента) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнены данные учетной записи.'");
	КонецЕсли;

	ИдентификаторУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса().НастройкиСервиса + УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор();
	ДанныеУчетнойЗаписи.Вставить("ИдентификаторУчетнойЗаписи", ИдентификаторУчетнойЗаписи);

	Возврат ДанныеУчетнойЗаписи;

КонецФункции

// Возвращает данные авторизации.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//  Структура - данные авторизации. 
//    * ИдентификаторКлиента - Строка - идентификатор учетной записи.
//    * КлючAPI   - Строка - API-ключ учетной записи.
//
Функция ПолучитьДанныеАвторизации(УчетнаяЗаписьМаркетплейса)

	ДанныеАвторизации = Новый Структура;
	ДанныеАвторизации.Вставить("ИдентификаторКлиента", УчетнаяЗаписьМаркетплейса.ИдентификаторКлиента);
	Если ТипЗнч(УчетнаяЗаписьМаркетплейса) = Тип("Структура") И УчетнаяЗаписьМаркетплейса.Свойство("КлючAPI") Тогда
		ДанныеАвторизации.Вставить("КлючAPI", УчетнаяЗаписьМаркетплейса.КлючAPI);
	Иначе
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
		КлючAPI = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ДанныеУчетнойЗаписи.ИдентификаторУчетнойЗаписи, "KeyAPI", Ложь);
		ДанныеАвторизации.Вставить("КлючAPI", КлючAPI);
	КонецЕсли;

	Возврат ДанныеАвторизации;

КонецФункции

Функция OzonПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗаписьМаркетплейса) Экспорт
	Попытка
		ДанныеАвторизацииOzon = ПолучитьДанныеАвторизации(УчетнаяЗаписьМаркетплейса);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат ЗначениеЗаполнено( ДанныеАвторизацииOzon.КлючAPI );
КонецФункции

Функция ЯндексПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗаписьМаркетплейса) Экспорт

	ПараметрыПриложенияЯндексДиск = ИнтеграцияСМаркетплейсамиСервер.ПараметрыПриложенияЯндексДиск();
	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыПриложенияЯндексДиск.ИдентификаторПриложения;

	УстановитьПривилегированныйРежим(Истина);
	ЗначениеКлюча = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресВХранилище, "expires_in");
	УстановитьПривилегированныйРежим(Ложь);

	Возврат (ЗначениеКлюча <> Неопределено);

КонецФункции

// Возвращает имя события журнала регистрации подсистемы Взаимодействия.
//
// Возвращаемое значение:
//  Строка - Наименование события для записей в журнале регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт

	Возврат НСтр("ru = 'Интеграция с Ozon'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

Функция ЧислоВСтроку(Знач Значение, ВыводитьПредставлениеНуля = Ложь)

	Если Значение = Неопределено Тогда
		Значение = 0;
	КонецЕсли;

	ФорматнаяСтрока = ?(ВыводитьПредставлениеНуля, "ЧН=; ЧРД=.; ЧГ=", "ЧРД=.; ЧГ=");
	Возврат Формат(Значение, ФорматнаяСтрока);  

КонецФункции

Функция JSONВДанные(Ответ, ПоляСДатами = "")

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ);
	Результат = ПрочитатьJSON(ЧтениеJSON, Ложь, ПоляСДатами);
	ЧтениеJSON.Закрыть();

	Возврат Результат;

КонецФункции

Функция ДанныеВJSON(СтруктураДанных)

	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);

	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкиСериализации);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция СоответствиеТипов()

	// При добавлении соответствия с типом значения следует указать его представление в функции ИнтеграцияСМаркетплейсомOzonСервер.ПредставлениеТипа()
	// и использовать представление типа при выводе в пользовательском интерфейсе.

	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("string", "Строка");
	СоответствиеТипов.Вставить("multiline", "Строка");
	СоответствиеТипов.Вставить("integer", "Число");
	СоответствиеТипов.Вставить("decimal", "Число");
	СоответствиеТипов.Вставить("data", "Дата");
	СоответствиеТипов.Вставить("boolean", "Булево");
	СоответствиеТипов.Вставить("url", "Строка");
	СоответствиеТипов.Вставить("imageurl", "Строка");

	Возврат СоответствиеТипов;

КонецФункции

Функция ПредставлениеТипа(ТипСтрокой)

	ПредставлениеТипа = ТипСтрокой;

	Если ТипСтрокой = "Строка" Тогда
		ПредставлениеТипа = НСтр("ru = 'Строка'");
	ИначеЕсли ТипСтрокой = "Строка" Тогда
		ПредставлениеТипа = НСтр("ru = 'Число'");
	ИначеЕсли ТипСтрокой = "Строка" Тогда
		ПредставлениеТипа = НСтр("ru = 'Дата'");
	ИначеЕсли ТипСтрокой = "Строка" Тогда
		ПредставлениеТипа = НСтр("ru = 'Булево'");
	КонецЕсли;

	Возврат ПредставлениеТипа;

КонецФункции

Функция ПолучитьТипыOzonДляТипа1С(ТипЗначенияСтрокой)

	ТипыOzonДляТипа1С = Новый Массив;

	СоответствиеТипов = СоответствиеТипов();
	Для Каждого СоответствиеТипа Из СоответствиеТипов Цикл
		Если СоответствиеТипа.Значение = ТипЗначенияСтрокой Тогда
			ТипыOzonДляТипа1С.Добавить(СоответствиеТипа.Ключ);
		КонецЕсли;
	КонецЦикла;

	Возврат ТипыOzonДляТипа1С;

КонецФункции

Функция ПривестиЗначениеКТипуOzon(Значение, ТипЗначенияOzon)

	ВозвращаемоеЗначение = Значение;

	Если ТипЗначенияOzon = "integer" Или ТипЗначенияOzon = "decimal" Тогда
		ВозвращаемоеЗначение = ЧислоВСтроку(ВозвращаемоеЗначение, Истина);
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция НомерКартинкиКоллекцииТипов(ТипЗначенияАтрибута, ТипЗначенияАтрибута1С,
									ЯвляетсяКоллекциейЗначений = Ложь, ДоступенВыборЗначенияИзСписка = Ложь)

	Если ЯвляетсяКоллекциейЗначений Или ДоступенВыборЗначенияИзСписка Тогда
		НомерКартинкиКоллекцииТипов = 9;
	ИначеЕсли ТипЗначенияАтрибута = "url"
		Или ТипЗначенияАтрибута = "imageurl" Тогда
		НомерКартинкиКоллекцииТипов = 7;
	ИначеЕсли ТипЗначенияАтрибута1С = "Строка" Тогда
		НомерКартинкиКоллекцииТипов = 8;
	ИначеЕсли ТипЗначенияАтрибута1С = "Булево" Тогда
		НомерКартинкиКоллекцииТипов = 0;
	ИначеЕсли ТипЗначенияАтрибута1С = "Дата" Тогда
		НомерКартинкиКоллекцииТипов = 2;
	ИначеЕсли ТипЗначенияАтрибута1С = "Число" Тогда
		НомерКартинкиКоллекцииТипов = 13;
	Иначе
		НомерКартинкиКоллекцииТипов = 18;
	КонецЕсли;

	Возврат НомерКартинкиКоллекцииТипов;

КонецФункции

Функция ХешСуммаПрисоединенногоФайла(ПрисоединенныйФайл)

	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);

	ХешСумма = ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла, Истина);

	Возврат ХешСумма;

КонецФункции

Функция ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла, ПреобразоватьВHEX = Ложь, ПеревестиВНижнийРегистр = Ложь)

	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);

	ХешСумма = ХешированиеДанных.ХешСумма;
	
	Если ПреобразоватьВHEX Тогда
		ХешСумма = ПолучитьHexСтрокуИзДвоичныхДанных(ХешСумма);
	КонецЕсли;

	Если ПеревестиВНижнийРегистр Тогда
		ХешСумма = НРег(ХешСумма);
	КонецЕсли;

	Возврат ХешСумма;

КонецФункции

// Возвращает служебные параметры HTTP-запроса.
// 
// Возвращаемое значение:
//  Структура - Структура, содержащая реквизиты:
//   ПодстрокаПоискаВТекстеОтвета
//   ПустойРезультат
//   ПоляТипаДата - Строка или Массив. Подробности см. в описании функции ПрочитатьJSON.
//                  Для приведения значения реквизитов, содержащих дату, к типу Дата, следует указывать их наименования
//                  в этом реквизите.
Функция СлужебныеПараметрыHTTPЗапроса()

	СлужебныеПараметры = Новый Структура;
	СлужебныеПараметры.Вставить("ПодстрокаПоискаВТекстеОтвета", "");
	СлужебныеПараметры.Вставить("ПустойРезультат", Неопределено);
	СлужебныеПараметры.Вставить("ПоляТипаДата", "");
	СлужебныеПараметры.Вставить("ВернутьКодСостояния", Ложь);
	СлужебныеПараметры.Вставить("ВернутьСтрокуОтвета", Ложь);
	СлужебныеПараметры.Вставить("ЭтоДвоичныеДанные", Ложь);
	СлужебныеПараметры.Вставить("ContentType", "application/json");
	СлужебныеПараметры.Вставить("ContentLenght", "");

	Возврат СлужебныеПараметры;

КонецФункции

Функция HTTPЗапросКСервису(УчетнаяЗаписьМаркетплейса, ТекстЗапроса, СлужебныеПараметры)

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Charset",      "UTF-8");
	Заголовки.Вставить("Accept",       "application/json");
	Заголовки.Вставить("Content-Type", СлужебныеПараметры.ContentType);
	
	Если СлужебныеПараметры.ЭтоДвоичныеДанные Тогда
		Заголовки.Вставить("Content-Lenght", СлужебныеПараметры.ContentLenght);
	КонецЕсли;

	ШаблонПредставленияКонфигурации = "%1 (%2)";
	ПредставлениеКонфигурации = СтрШаблон(ШаблонПредставленияКонфигурации, Метаданные.Синоним, Метаданные.Версия);
	Заголовки.Вставить("User-Agent",	ПредставлениеКонфигурации);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАвторизации = ПолучитьДанныеАвторизации(УчетнаяЗаписьМаркетплейса);
	УстановитьПривилегированныйРежим(Ложь);
	
	Заголовки.Вставить("Client-Id", ДанныеАвторизации.ИдентификаторКлиента);
	Заголовки.Вставить("Api-Key",   ДанныеАвторизации.КлючAPI);

	Возврат Новый HTTPЗапрос(ТекстЗапроса, Заголовки);

КонецФункции

Функция ВыполнитьЗапросКСервису(ТекстЗапроса, ЗНАЧ ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, POSTЗапрос = Истина, 
	ПараметрыКонтекст = Неопределено)

	Результат = Неопределено;

	АдресСервера = АдресСервера();
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	HTTPСоединение = Новый HTTPСоединение(АдресСервера, 443,,,, 60, ЗащищенноеСоединение);

	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	Если ПараметрыЗапроса.Свойство("СлужебныеПараметры") Тогда
		ЗаполнитьЗначенияСвойств(СлужебныеПараметры, ПараметрыЗапроса.СлужебныеПараметры);
		ПараметрыЗапроса.Удалить("СлужебныеПараметры");
	КонецЕсли;

	HTTPЗапрос = HTTPЗапросКСервису(УчетнаяЗаписьМаркетплейса, ТекстЗапроса, СлужебныеПараметры);

	ТоварСсылка = Неопределено;
	ТелоЗапроса = "";

	Если POSTЗапрос И ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		Если СлужебныеПараметры.ЭтоДвоичныеДанные Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыЗапроса.ДвоичныеДанные);
		Иначе
			ТелоЗапроса = ДанныеВJSON(ПараметрыЗапроса);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF8", ИспользованиеByteOrderMark.НеИспользовать);
			
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ПараметрыКонтекст_ДанныеПубликации = ПараметрыКонтекст.ДанныеПубликации;
	Исключение
		ПараметрыКонтекст_ДанныеПубликации = Неопределено;
	КонецПопытки;
	
	ТоварыКоличество = 0;
	Если ТипЗнч( ПараметрыКонтекст_ДанныеПубликации ) = Тип( "ТаблицаЗначений" ) Тогда
		ТоварыКоличество = ПараметрыКонтекст_ДанныеПубликации.Количество();
		Если ТоварыКоличество = 1 Тогда
			ТоварСсылка = ПараметрыКонтекст_ДанныеПубликации[0].Номенклатура;
		КонецЕсли;
	КонецЕсли;

	Попытка
		ПараметрыКонтекст_Действие = ПараметрыКонтекст.Действие;
	Исключение
		ПараметрыКонтекст_Действие = Неопределено;
	КонецПопытки;
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		HTTPМетод = ?(POSTЗапрос, "POST", "GET" );
		HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
		HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
		ЛогКомментарий = НСтр("ru = 'HTTP: Запрос: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
		+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", ПараметрыКонтекст_Действие );
		ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
		ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ЛогПараметры );
	КонецЕсли;	
	
	Попытка
		Если POSTЗапрос Тогда
			РезультатЗапроса = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			РезультатЗапроса = HTTPСоединение.Получить(HTTPЗапрос);
		КонецЕсли;

		СтрокаОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку("UTF8");
		КодСостояния = РезультатЗапроса.КодСостояния;
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса );
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ЛогЭтоОшибка = (КодСостояния <> 200);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;	

		ВернутьКодСостояния = Ложь;
		Если СлужебныеПараметры.Свойство("ВернутьКодСостояния", ВернутьКодСостояния) И ВернутьКодСостояния = Истина Тогда
			Возврат КодСостояния;
		КонецЕсли;
		
		Если СлужебныеПараметры.ВернутьСтрокуОтвета Тогда
			Возврат JSONВДанные(СтрокаОтвета, СлужебныеПараметры.ПоляТипаДата);
		КонецЕсли;

		Если КодСостояния = 400
			И Не ПустаяСтрока(СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета)
			И СтрНайти(СтрокаОтвета, СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета) Тогда
			// При выполнении запроса получен ответ, в котором содержится заданная подстрока поиска.
			// Поэтому такой ответ не считается ошибкой - возвращается заданный пустой результат.
			Результат = СлужебныеПараметры.ПустойРезультат;
		ИначеЕсли КодСостояния <> 200 Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения запроса %1: %2'"), ТекстЗапроса, СтрокаОтвета);
			
			ЗаписатьОшибку = Истина;
			Если ТекстЗапроса = "/v2/category/attribute/values" Тогда
				Если ПараметрыЗапроса.Свойство("limit") И ПараметрыЗапроса.limit = 1 Тогда
					ЗаписатьОшибку = Ложь;// запрос для проверки возможности выбора значений атрибутов
				КонецЕсли;
			КонецЕсли;
			Если ЗаписатьОшибку = Истина Тогда
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		Иначе
			Результат = JSONВДанные(СтрокаОтвета, СлужебныеПараметры.ПоляТипаДата);
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'"),
			АдресСервера,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			ЛогКомментарий = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина, ЛогПараметры );
		КонецЕсли;
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Возвращает результат запроса.
//
// Параметры:
//  ТекстЗапроса       - Строка - метод API.
//  ПараметрыЗапроса   - Структура - параметры запроса согласно описанию запрашиваемого метода API.
//  УчетнаяЗапись      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  АтрибутыРезультата - Структура - каждому ключу передается в качестве значения имя атрибута из ответа метода API, 
//                        в котором содержится необходимая информация. По ключам этого параметра заполняется
//                        возвращаемое значение.
// 
// Возвращаемое значение:
//  Структура - содержимое атрибутов результата на основании ключей параметра АтрибутыРезультата.
//
Функция ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса,
			Знач АтрибутыРезультата = Неопределено, POSTЗапрос = Истина
			, ПараметрыКонтекст = Неопределено)

	Результат = Новый Структура;

	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, POSTЗапрос, ПараметрыКонтекст);

	Если ЗначениеЗаполнено(АтрибутыРезультата) Тогда
		Для Каждого АтрибутРезультата Из АтрибутыРезультата Цикл
			Если РезультатЗапроса <> Неопределено Тогда
				ЗначениеАтрибута = РезультатЗапроса;
				КлючиРезультата = СтрРазделить(АтрибутРезультата.Значение, ".");

				Для Каждого КлючРезультата Из КлючиРезультата Цикл
					ЗначениеАтрибута = ЗначениеАтрибута[КлючРезультата];
				КонецЦикла;
			Иначе
				ЗначениеАтрибута = Неопределено;
			КонецЕсли;

			Результат.Вставить(АтрибутРезультата.Ключ, ЗначениеАтрибута);
		КонецЦикла;
	Иначе
		Результат = РезультатЗапроса;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти


#Область РегламентныеЗадания

// Выполняет выгрузку остатков товаров, используется регламентным заданием.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//
Процедура ВыгрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса)
		Или Не ИнтеграцияСМаркетплейсамиСервер.ИспользуетсяИнтеграцияСМаркетплейсомOzon() Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная выгрузка остатков номенклатуры на OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыгрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная выгрузка остатков номенклатуры на OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

// Выполняет справочную загрузку остатков товаров, используется регламентным заданием.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//
Процедура ЗагрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса)

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса)
		Или Не ИнтеграцияСМаркетплейсамиСервер.ИспользуетсяИнтеграцияСМаркетплейсомOzon() Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная загрузка остатков номенклатуры с маркетплейса OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗагрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная загрузка остатков номенклатуры с маркетплейса OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

// Выполняет выгрузку цен товаров, используется регламентным заданием.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//
Процедура ВыгрузитьЦеныТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса)
		Или Не ИнтеграцияСМаркетплейсамиСервер.ИспользуетсяИнтеграцияСМаркетплейсомOzon() Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная выгрузка цен номенклатуры на OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыгрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная выгрузка цен номенклатуры на OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

// Выполняет обновление данных по товарному каталогу, используется регламентным заданием.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//
Функция ОбновитьТоварныйКаталогРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
	Метаданные.РегламентныеЗадания.ОбновлениеТоварногоКаталогаOzon);

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ОбновитьТоварныйКаталогРегламентнымЗаданием:'") + Символы.ПС
		+ НСтр("ru = 'Учетная запись:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( УчетнаяЗаписьМаркетплейса ) 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ОбновлениеТоварногоКаталога" ) );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ЛогПараметры );
	КонецЕсли;

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса)
		Или Не ИнтеграцияСМаркетплейсамиСервер.ИспользуетсяИнтеграцияСМаркетплейсомOzon() Тогда
		Возврат Ложь;
	КонецЕсли;

	// Начало выполнение регламентного задания.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало обновления данных товарного каталога'", ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Истина);

	// Шаг 1. Проверить статус загрузки товаров.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало проверки заданий публикации товаров при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ВыполнитьПроверкуЗаданияПубликацииТоваров(УчетнаяЗаписьМаркетплейса); 

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание проверки заданий публикации товаров при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	// Шаг 2. Проверить статус загрузки изображений товаров.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало проверки публикации изображений при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыполнитьПроверкуПубликацииИзображенийТоваров(УчетнаяЗаписьМаркетплейса);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание проверки публикации изображений при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	// Шаг 3. Обновить информацию по загруженным товарам.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало обновления информации по публикуемым товарам при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыполнитьОбновлениеИнформацииПоТоварам(УчетнаяЗаписьМаркетплейса);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание обновления информации по публикуемым товарам при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	// Шаг 4. Опубликовать товары.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало публикации товаров при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	Результат = ВыполнитьПубликациюТоваров(УчетнаяЗаписьМаркетплейса);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		Шаблон = НСтр("ru = 'При обновлении данных товарного каталога обнаружены ошибки: %1'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Результат.ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				ТекстОшибки);
	КонецЕсли;

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание публикации товаров при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	// Шаг 5. Опубликовать изображения товаров.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало публикации изображений при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыполнитьПубликациюИзображенийТоваров(УчетнаяЗаписьМаркетплейса);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание публикации изображений при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	// Шаг 6. Удалить файлы из сервиса хранения файлов после публикации товара.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало удаления неактуальных публичных ссылок из сервиса хранения изображений при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыполнитьУдалениеПубличныхСсылок(УчетнаяЗаписьМаркетплейса);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание удаления неактуальных публичных ссылок из сервиса хранения изображений при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	// Шаг 7. Опубликовать цены товаров.
	ВыгрузитьЦеныТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);

	// Шаг 8. Загрузить остатки товаров в 1С
    ЗагрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);
    
	// Шаг 8. Опубликовать остатки товаров.
	ВыгрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);

	// Окончание выполнение регламентного задания.
	УстановитьПривилегированныйРежим(Ложь);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание обновления данных товарного каталога'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

#КонецОбласти


#Область РаботаСоСкладами

Функция СкладыСервиса(УчетнаяЗаписьМаркетплейса)
	
	МассивСкладов = Новый Массив;

	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаСкладовВ1С );

	// Документация по методу: https://docs.ozon.ru/api/seller/#operation/WarehouseAPI_WarehouseList	
	ТекстЗапроса = "v1/warehouse/list";
	ДанныеЗапроса = Новый Структура();
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ДанныеЗапроса, УчетнаяЗаписьМаркетплейса, Истина
	, ПараметрыКонтекст	);

	Если РезультатЗапроса = Неопределено Тогда
		МассивСкладов = Неопределено;
	Иначе
		Для Каждого ЭлементРезультата Из РезультатЗапроса.result Цикл
			
			// заполним список складов только со статусом "created" ( "Активный" )
			Если ЭлементРезультата.status <> "created" Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеСклада = Новый Структура("ИдентификаторСкладаМаркетплейса, НаименованиеСкладаМаркетплейса, ЭтоRealFBS",
				XMLСтрока(ЭлементРезультата.warehouse_id),
				ЭлементРезультата.name,
				ЭлементРезультата.is_rfbs);
			МассивСкладов.Добавить(ОписаниеСклада);
		КонецЦикла;
	КонецЕсли;

	Возврат МассивСкладов;

КонецФункции

Функция НоваяТаблицаСкладов()

	ТаблицаСкладов = Новый ТаблицаЗначений;
	ТаблицаСкладов.Колонки.Добавить("ИдентификаторСкладаМаркетплейса", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаСкладов.Колонки.Добавить("НаименованиеСкладаМаркетплейса", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
	ТаблицаСкладов.Колонки.Добавить("ЭтоRealFBS", Новый ОписаниеТипов("Булево"));
	ТаблицаСкладов.Колонки.Добавить("Склад1С", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));

	Возврат ТаблицаСкладов;

КонецФункции

// Возвращает сопоставленные склады из данных ИБ.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//  ТолькоСсылки              - Булево - признак возврата только массива складов, иначе возвращается таблица.
//  ВыводитьПодчиненныеСклады - Булево - признак включения в ответ подчиненных складов.
// 
// Возвращаемое значение:
//  Массив, ТаблицаЗначений -  список ссылок СправочникСсылка.Склады, таблица с данными по складам.
//
Функция ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, ТолькоСсылки = Истина, ВыводитьПодчиненныеСклады = Истина) Экспорт

	СопоставленныеСклады = Новый ТаблицаЗначений;
	СопоставленныеСклады.Колонки.Добавить("Группа", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	СопоставленныеСклады.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	СопоставленныеСклады.Колонки.Добавить("ИдентификаторСклада", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СопоставленныеСклады.Колонки.Добавить("НаименованиеСклада", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250)));

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствияОбъектов.Объект1С КАК Склад,
	|	СоответствияОбъектов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторСклада,
	|	СоответствияОбъектов.НаименованиеОбъектаМаркетплейса КАК НаименованиеСклада,
	|	ЛОЖЬ КАК ЭтоГруппаСкладов
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК Склады
	|		ПО СоответствияОбъектов.Объект1С = Склады.Ссылка
	|ГДЕ
	|	СоответствияОбъектов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
	|	И СоответствияОбъектов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)"; 
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ТолькоСсылки Тогда
			Возврат Новый Массив;
		Иначе
			Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
				ЛогКомментарий = НСтр("ru = 'ПолучитьСопоставленныеСклады: Сопоставление складов не задано.
				|Перейдите в настройки интеграции с интернет-магазином в закладку ""Обновление остатков товаров"".'");
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина );
			КонецЕсли;
			Возврат СопоставленныеСклады;
		КонецЕсли;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ВыводитьПодчиненныеСклады И Выборка.ЭтоГруппаСкладов Тогда
			ПодчиненныеСклады = СписокПодчиненныхСкладов(Выборка.Склад);
			Для каждого Склад Из ПодчиненныеСклады Цикл
				НоваяСтрока = СопоставленныеСклады.Добавить();
				НоваяСтрока.Группа = Выборка.Склад;
				НоваяСтрока.Склад = Склад.Значение;
				НоваяСтрока.ИдентификаторСклада = Выборка.ИдентификаторСклада;
				НоваяСтрока.НаименованиеСклада = Выборка.НаименованиеСклада;
			КонецЦикла;
		Иначе
			НоваяСтрока = СопоставленныеСклады.Добавить();
			НоваяСтрока.Группа = Выборка.Склад;
			НоваяСтрока.Склад = Выборка.Склад;
			НоваяСтрока.ИдентификаторСклада = Выборка.ИдентификаторСклада;
			НоваяСтрока.НаименованиеСклада = Выборка.НаименованиеСклада;
		КонецЕсли;
	КонецЦикла;

	Если ТолькоСсылки Тогда
		СопоставленныеСклады.Свернуть("Склад");
		Возврат СопоставленныеСклады.ВыгрузитьКолонку("Склад");
	Иначе
		СопоставленныеСклады.Свернуть("Группа, Склад, ИдентификаторСклада, НаименованиеСклада");
		Возврат СопоставленныеСклады;
	КонецЕсли;

КонецФункции

// Возврат складов из сервиса.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//  ТолькоИзСервиса           - Булево - признак включения в ответ только данных из сервиса,
//                                       иначе выполнится дополнение данными сопоставления из ИБ,
// 
// Возвращаемое значение:
//  Структура - в состав входит таблица с информацией по складам и  описание ошибки при получении складов из сервиса.
//
Функция ПолучитьСкладыСервиса(УчетнаяЗаписьМаркетплейса, ТолькоИзСервиса = Ложь) Экспорт

	МассивСкладов = СкладыСервиса(УчетнаяЗаписьМаркетплейса);
	
	ТаблицаСкладов = НоваяТаблицаСкладов();

	СопоставленныеСклады = ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, Ложь, Ложь);

	ОшибкаПолученияСкладовИзСервиса = Ложь;

	Если МассивСкладов = Неопределено Тогда
		ОшибкаПолученияСкладовИзСервиса = Истина;
		МассивСкладов = Новый Массив;
	КонецЕсли;

	Если МассивСкладов.Количество() > 0 Тогда
		Для Каждого ДанныеСклада Из МассивСкладов Цикл
			НоваяСтрока = ТаблицаСкладов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСклада);

			Отбор = Новый Структура("ИдентификаторСклада", ДанныеСклада.ИдентификаторСкладаМаркетплейса);
			СтрокиСопоставления = СопоставленныеСклады.НайтиСтроки(Отбор);
			Если СтрокиСопоставления.Количество() > 0 Тогда
				НоваяСтрока.Склад1С = СтрокиСопоставления[0].Склад;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Не ТолькоИзСервиса Тогда
		Для Каждого ДанныеСклада Из СопоставленныеСклады Цикл
			НоваяСтрока = ТаблицаСкладов.Добавить();
			НоваяСтрока.ИдентификаторСкладаМаркетплейса = ДанныеСклада.ИдентификаторСкладаМаркетплейса;
			НоваяСтрока.НаименованиеСкладаМаркетплейса = ДанныеСклада.НаименованиеСклада;
			НоваяСтрока.Склад1С = ДанныеСклада.Склад;
		КонецЦикла;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСкладов", ТаблицаСкладов);
	Результат.Вставить("ОшибкаПолученияСкладовИзСервиса", ОшибкаПолученияСкладовИзСервиса);

	Возврат Результат;

КонецФункции

#КонецОбласти


#Область РаботаСКатегориямиИАтрибутами

// Возвращает данные категорий.
//
// Параметры:
//  ИдентификаторКатегории: - Неопределено - данное значение указывается для получения полного списка категорий;
//							- Строка - указывается идентификатор категории.
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  Фильтр - Строка - фильтр по характеристикам: "ALL" (по-умолчанию), "REQUIRED", "OPTIONAL".
//
// Возвращаемое значение:
//  Соответствие - данные, соответствующие идентификатору категории.
//
Функция КатегорииСервиса(ИдентификаторКатегории, УчетнаяЗапись)

	ТекстЗапроса = "/v2/category/tree";

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	ПараметрыЗапроса = Новый Структура;
	Если ИдентификаторКатегории <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("category_id", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИдентификаторКатегории));
	КонецЕсли;
	ПараметрыЗапроса.Вставить("language", "DEFAULT");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Функция - Заполнить дерево категорий
//
// Параметры:
//  ДеревоКатегорий           - ДеревоЗначений - дерево, которое необходимо заполнить,
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//  ДанныеКэша                - Массив - массив данных из кэша клиентского приложения,
//                                       из переменной ПараметрыПриложения общего модуля управляемого приложения.
// 
// Возвращаемое значение:
//  Структура - структура с заполненным деревом и кэшем клиентского приложения.
//    * ДеревоКатегорий - ДеревоЗначение - заполненное дерево категорий, переданное во входящем параметре,
//    * ДанныеКэша     - Массив - кэш клиентского приложения.
//
Функция ЗаполнитьДеревоКатегорий(ДеревоКатегорий, УчетнаяЗапись, ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		ДанныеКэша = КатегорииСервиса(0, УчетнаяЗапись);
	КонецЕсли;

	ЗаполнитьДеревоКатегорийРекурсивно(ДеревоКатегорий, ДанныеКэша);
	ДеревоКатегорий.Строки.Сортировать("НаименованиеКатегорииМаркетплейса Возр", Истина);

	Результат = Новый Структура;
	Результат.Вставить("ДеревоКатегорий", ДеревоКатегорий);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДеревоКатегорийРекурсивно(СтрокаРодителя, ДанныеЗаполнения, НаименованиеРодителя = "")

	Для Каждого ДанныеКатегории Из ДанныеЗаполнения Цикл
		НоваяСтрока = СтрокаРодителя.Строки.Добавить();
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = Формат(ДанныеКатегории["category_id"], "ЧГ=");
		НоваяСтрока.НаименованиеКатегорииМаркетплейса = ДанныеКатегории["title"];
		НоваяСтрока.НаименованиеРодителяКатегорииМаркетплейса = НаименованиеРодителя;
		ЗаполнитьДеревоКатегорийРекурсивно(НоваяСтрока, ДанныеКатегории["children"], НоваяСтрока.НаименованиеКатегорииМаркетплейса);

		НоваяСтрока.ЭтоГруппа = (НоваяСтрока.Строки.Количество() > 0);
		НоваяСтрока.Уровень = ?(НоваяСтрока.ЭтоГруппа, 0, 3);
	КонецЦикла;

КонецПроцедуры

// Возвращает атрибуты категории из сервиса Ozon.
//
// Параметры:
//  ИдентификаторКатегории - Строка, Массив - идентификатор категории или массив идентификаторов категорий.
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  Фильтр - Строка - фильтр по атрибутам:
//		"ALL" - все атрибуты (по-умолчанию),
//		"REQUIRED" - обязательные атрибуты, 
//		"OPTIONAL" - дополнительные атрибуты.
//
// Возвращаемое значение:
//  Соответствие - соответствующие идентификатору категории атрибуты.
//
Функция АтрибутыКатегорииИзСервиса(ИдентификаторКатегории, УчетнаяЗапись, Фильтр = "ALL")

	МассивИдентификаторов = ПодготовитьМассивКатегорий(ИдентификаторКатегории);

	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТекстЗапроса = "/v3/category/attribute";

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("attribute_type",	Фильтр);
	ПараметрыЗапроса.Вставить("category_id",	МассивИдентификаторов);
	ПараметрыЗапроса.Вставить("language",		"DEFAULT");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаАтрибутовВ1С );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст );

	Возврат РезультатЗапроса.Результат;

КонецФункции

Функция ДлинаСтрокиМагическоеЧисло()
	Возврат 1000;// временно до доработки хранения и заполнения строковых значений атрибутов Ozon
КонецФункции

// Возвращает новую пустую таблицу значений для данных об атрибутах категории.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//	 * ИдентификаторКатегорииМаркетплейса 		 - Строка - идентификатор категории, которой принадлежит атрибут.
//	 * ИдентификаторРодителяАтрибутаМаркетплейса - Строка - идентификатор группы атрибутов.
//	 * НаименованиеРодителяАтрибутаМаркетплейса	 - Строка - наименование группы атрибутов.
//	 * ИдентификаторАтрибутаМаркетплейса  		 - Строка - идентификатор атрибута.
//	 * НаименованиеАтрибутаМаркетплейса 		 - Строка - наименование атрибута.
//	 * ОписаниеНазначенияАтрибута 				 - Строка - описание назначения атрибута.
//	 * ОбязательныйАтрибутМаркетплейса       	 - Булево - признак обязательной атрибута.
//	 * ЯвляетсяКоллекциейЗначений       	   	 - Булево - признак того, что атрибут содержит список значений выбора.
//	 * ДоступенВыборЗначенияИзСписка             - Булево - признак наличия списка выбора значений атрибута в 1С.
//	 * ТипЗначенияАтрибута                       - Строка - тип значения характеристики.	
//	 * ТипЗначенияАтрибута1С                     - Строка - тип значения характеристики в 1С.	
//	 * ЗначениеПоУмолчанию                       - Строка, Число, Булево, Дата - значение по умолчанию.	
//	 * Реквизит1С 				       			 - Строка - путь к реквизиту 1С.
//	 * ПредставлениеРеквизита1С 				 - Строка - пользовательское представление пути к реквизиту 1С.
//	 * ИнформацияОСопоставленииЗначений 	     - Строка - представление информации о сопоставлении атрибутов.
//	 * НомерКартинкиКоллекцииТипов 				 - Число - номер картинки в коллекции ПиктограммыТиповДанных.
//	 * ЗаполненРодитель 				         - Булево - признак заполненности родителя атрибута.
//
Функция НоваяТаблицаАтрибутовКатегорииМаркетплейса()

	ОписаниеТипаСтрока			= Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока1000		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(ДлинаСтрокиМагическоеЧисло()));
	ОписаниеТипаБулево			= Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло2			= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2));

	ТаблицаАтрибутов = Новый ТаблицаЗначений; 
	ТаблицаАтрибутов.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаАтрибутов.Колонки.Добавить("ИдентификаторРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаАтрибутов.Колонки.Добавить("НаименованиеРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаАтрибутов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаАтрибутов.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаАтрибутов.Колонки.Добавить("ОписаниеНазначенияАтрибута", ОписаниеТипаСтрока);
	ТаблицаАтрибутов.Колонки.Добавить("ОбязательныйАтрибут", ОписаниеТипаБулево);
	ТаблицаАтрибутов.Колонки.Добавить("ЯвляетсяКоллекциейЗначений", ОписаниеТипаБулево);
	ТаблицаАтрибутов.Колонки.Добавить("ДоступенВыборЗначенияИзСписка", ОписаниеТипаБулево);
	ТаблицаАтрибутов.Колонки.Добавить("ТипЗначенияАтрибута", ОписаниеТипаСтрока50);
	ТаблицаАтрибутов.Колонки.Добавить("ТипЗначенияАтрибута1С", ОписаниеТипаСтрока50);
	ТаблицаАтрибутов.Колонки.Добавить("ЗначениеПоУмолчанию", ОписаниеТипаСтрока1000);
	ТаблицаАтрибутов.Колонки.Добавить("Реквизит1С", ОписаниеТипаСтрока250);
	ТаблицаАтрибутов.Колонки.Добавить("ПредставлениеРеквизита1С", ОписаниеТипаСтрока250);
	ТаблицаАтрибутов.Колонки.Добавить("ИнформацияОСопоставленииЗначений", ОписаниеТипаСтрока50);
	ТаблицаАтрибутов.Колонки.Добавить("НомерКартинкиКоллекцииТипов", ОписаниеТипаЧисло2);
	ТаблицаАтрибутов.Колонки.Добавить("ЗаполненРодитель", ОписаниеТипаБулево);

	Возврат ТаблицаАтрибутов;

КонецФункции

Функция ПодготовитьМассивКатегорий(ИдентификаторКатегории)

	МассивКатегорий = Новый Массив;

	Если ТипЗнч(ИдентификаторКатегории) = Тип("Массив") Тогда
		Для Каждого Элемент Из ИдентификаторКатегории Цикл
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				Продолжить;
			КонецЕсли;

			МассивКатегорий.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Элемент));
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторКатегории) Тогда
		МассивКатегорий.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИдентификаторКатегории));
	КонецЕсли;

	Возврат МассивКатегорий;

КонецФункции

// Возвращает данные по атрибутам категории.
//
// Параметры:
//  ИдентификаторКатегории - Строка, Массив - идентификатор категории или массив идентификаторов категорий.
//  УчетнаяЗапись          - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица атрибутов, см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаАтрибутовКатегорииМаркетплейса. 
//
Функция АтрибутыКатегории(ИдентификаторКатегории, УчетнаяЗапись)

	ТаблицаАтрибутов = НоваяТаблицаАтрибутовКатегорииМаркетплейса();
	ТаблицаАтрибутов.Колонки.Добавить("ПорядокСортировки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1)));

	АтрибутыКатегорииИзСервиса = АтрибутыКатегорииИзСервиса(ИдентификаторКатегории, УчетнаяЗапись);

	Если АтрибутыКатегорииИзСервиса <> Неопределено Тогда
		СоответствиеТипов = СоответствиеТипов();

		Для Каждого ДанныеКатегории Из АтрибутыКатегорииИзСервиса Цикл 
			ИдентификаторКатегорииМаркетплейса = ЧислоВСтроку(ДанныеКатегории["category_id"]);

			Для Каждого ДанныеАтрибута Из ДанныеКатегории["attributes"] Цикл
				НоваяСтрока = ТаблицаАтрибутов.Добавить();
				НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
				НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = ЧислоВСтроку(ДанныеАтрибута["group_id"]);
				НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса = ДанныеАтрибута["group_name"];
				НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = ЧислоВСтроку(ДанныеАтрибута["id"]);
				НоваяСтрока.НаименованиеАтрибутаМаркетплейса = ДанныеАтрибута["name"];
				НоваяСтрока.ОбязательныйАтрибут = ДанныеАтрибута["is_required"];
				НоваяСтрока.ОписаниеНазначенияАтрибута = ДанныеАтрибута["description"];
				НоваяСтрока.ЯвляетсяКоллекциейЗначений = ДанныеАтрибута["is_collection"];
				НоваяСтрока.ТипЗначенияАтрибута = НРег(ДанныеАтрибута["type"]);
				НоваяСтрока.ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(НоваяСтрока.ТипЗначенияАтрибута);

				НоваяСтрока.ЗаполненРодитель = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);

				ПараметрыЗначенийАтрибутов = ПараметрыЗапросаЗначенийАтрибутов();
				ПараметрыЗначенийАтрибутов.ИдентификаторКатегорииМаркетплейса = НоваяСтрока.ИдентификаторКатегорииМаркетплейса;
				ПараметрыЗначенийАтрибутов.ИдентификаторАтрибутаМаркетплейса = НоваяСтрока.ИдентификаторАтрибутаМаркетплейса;
				ПараметрыЗначенийАтрибутов.КоличествоЗначенийВОтвете = 1;
				ПараметрыЗначенийАтрибутов.ПродолжитьЗапрос = Ложь;

				ТаблицаЗначенийАтрибутов = ЗначенияАтрибутаКатегории(ПараметрыЗначенийАтрибутов, УчетнаяЗапись);

				Если ТаблицаЗначенийАтрибутов.Количество() > 0 Тогда
					НоваяСтрока.ДоступенВыборЗначенияИзСписка = Истина;
				КонецЕсли;

				НоваяСтрока.НомерКартинкиКоллекцииТипов =НомерКартинкиКоллекцииТипов(НоваяСтрока.ТипЗначенияАтрибута, НоваяСтрока.ТипЗначенияАтрибута1С,,
						 НоваяСтрока.ДоступенВыборЗначенияИзСписка);

				НоваяСтрока.ПорядокСортировки = 1;
			КонецЦикла;

			ДополнитьВесогабаритамиУпаковки(ТаблицаАтрибутов, ИдентификаторКатегорииМаркетплейса);
		КонецЦикла;
	КонецЕсли;

	ТаблицаАтрибутов.Сортировать("ПорядокСортировки, ЗаполненРодитель УБЫВ, НаименованиеРодителяАтрибутаМаркетплейса, ОбязательныйАтрибут УБЫВ, НаименованиеАтрибутаМаркетплейса");
	ТаблицаАтрибутов.Колонки.Удалить("ПорядокСортировки");

	Возврат ТаблицаАтрибутов;

КонецФункции

// Возвращает значения атрибута категории из сервиса Ozon.
//
// Параметры:
//  Параметры     - Структура - список параметров, см. ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыЗапросаЗначенийАтрибутов.
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//  Структура - 
//    * ПродолжитьВыполнениеЗапроса - Булево - признак необходимости повторного получения новой порции данных.
//    * Результат     - Соответствие - данные значений характеристик.
//
Функция ЗначенияАтрибутаКатегорииИзСервиса(Параметры, УчетнаяЗапись)

	ТекстЗапроса = "/v2/category/attribute/values";

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",        "result");
	АтрибутыОтвета.Вставить("ПродолжитьЗапрос", "has_next");

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("attribute_id",  СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Параметры.ИдентификаторАтрибутаМаркетплейса));
	ПараметрыЗапроса.Вставить("category_id",   СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Параметры.ИдентификаторКатегорииМаркетплейса));
	ПараметрыЗапроса.Вставить("language",      "DEFAULT");
	ПараметрыЗапроса.Вставить("last_value_id", Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",         Параметры.КоличествоЗначенийВОтвете);

	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.Вставить("ПодстрокаПоискаВТекстеОтвета", "GetDictionaryValuesBatchWithFilter: dictionary not found");
	СлужебныеПараметры.Вставить("ПустойРезультат", Новый Структура("result, has_next", Новый Массив, Ложь));
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаАтрибутовЗначенияВ1С );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст);

	Возврат РезультатЗапроса;

КонецФункции

// Возвращает пустой список параметров.
// 
// Возвращаемое значение:
//  Структура - список параметров.
//
Функция ПараметрыЗапросаЗначенийАтрибутов() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторКатегории1С", "");
	Параметры.Вставить("ИдентификаторКатегорииМаркетплейса", "");
	Параметры.Вставить("ИдентификаторАтрибутаМаркетплейса",  "");
	Параметры.Вставить("ИдентификаторПоследнегоЗначения",    0);
	Параметры.Вставить("КоличествоЗначенийВОтвете",          500);
	Параметры.Вставить("ПродолжитьЗапрос",                   Истина);

	Возврат Параметры;

КонецФункции

// Возвращает новую пустую таблицу значений для данных о значениях атрибута категории.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//   * ИдентификаторКатегорииМаркетплейса  - Строка - идентификатор категории, которой принадлежит атрибут.
//   * ИдентификаторАтрибутаМаркетплейса   - Строка - идентификатор атрибута.
//   * ИдентификаторЗначенияАтрибута       - Строка - идентификатор значения атрибута.
//   * ЗначениеАтрибута                    - Строка, Число, Булево, Дата - значение атрибута.
//   * ОписаниеЗначенияАтрибута            - Строка - описание значения атрибута.
//   * АдресИзображенияДляЗначенияАтрибута - Строка - публичный адрес изображения для значения атрибута.
//
Функция НоваяТаблицаЗначенийАтрибутаКатегории()

	ОписаниеТипаСтрока    = Новый ОписаниеТипов("Строка"); 
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока1000 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(ДлинаСтрокиМагическоеЧисло()));

	ТаблицаАтрибутов = Новый ТаблицаЗначений; 
	ТаблицаАтрибутов.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаАтрибутов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаАтрибутов.Колонки.Добавить("ИдентификаторЗначенияАтрибута", ОписаниеТипаСтрока50);
	ТаблицаАтрибутов.Колонки.Добавить("ЗначениеАтрибута", ОписаниеТипаСтрока1000);
	ТаблицаАтрибутов.Колонки.Добавить("ОписаниеЗначенияАтрибута", ОписаниеТипаСтрока);
	ТаблицаАтрибутов.Колонки.Добавить("АдресИзображенияДляЗначенияАтрибута", ОписаниеТипаСтрока250);

	Возврат ТаблицаАтрибутов;

КонецФункции

Функция НовыйСписокСвойствОбъединенияТоваровВОднуКарточку()

	СвойстваОбъединенияТоваровВОднуКарточку = Новый Структура; 
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ДоступноОбъединениеТоваровВОднуКарточку", Ложь);
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ИдентификаторАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("НаименованиеАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ОбязательныйАтрибут", Ложь);
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ТипЗначенияАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ТипЗначенияАтрибута1С", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ОписаниеНазначенияАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("Реквизит1С", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ПредставлениеРеквизита1С", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ЗначениеРеквизита1С"); // Любая ссылка, Число, Строка, Дата, Булево
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ИзменилсяРеквизит1С", Ложь);
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("КэшЗначениеРеквизита1С"); // Любая ссылка, Число, Строка, Дата, Булево

	Возврат СвойстваОбъединенияТоваровВОднуКарточку;

КонецФункции

// Возвращает значения атрибутов из сервиса.
//
// Параметры:
//  Параметры     - Структура - список параметров, см. ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыЗапросаЗначенийАтрибутов.
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийАтрибутаКатегории().
//
Функция ЗначенияАтрибутаКатегории(Параметры, УчетнаяЗапись)

	ТаблицаЗначенийАтрибута = НоваяТаблицаЗначенийАтрибутаКатегории();

	Если Параметры.ИдентификаторАтрибутаМаркетплейса = "weight_unit" Тогда
		НоваяСтрока = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = Параметры.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = Параметры.ИдентификаторАтрибутаМаркетплейса;
		НоваяСтрока.ИдентификаторЗначенияАтрибута = "g";
		НоваяСтрока.ЗначениеАтрибута = "грамм";

		НоваяСтрока = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = Параметры.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = Параметры.ИдентификаторАтрибутаМаркетплейса;
		НоваяСтрока.ИдентификаторЗначенияАтрибута = "kg";
		НоваяСтрока.ЗначениеАтрибута = "килограмм";

		НоваяСтрока = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = Параметры.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = Параметры.ИдентификаторАтрибутаМаркетплейса;
		НоваяСтрока.ИдентификаторЗначенияАтрибута = "lb";
		НоваяСтрока.ЗначениеАтрибута = "фунт";
	ИначеЕсли Параметры.ИдентификаторАтрибутаМаркетплейса = "dimension_unit" Тогда
		НоваяСтрока = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = Параметры.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = Параметры.ИдентификаторАтрибутаМаркетплейса;
		НоваяСтрока.ИдентификаторЗначенияАтрибута = "mm";
		НоваяСтрока.ЗначениеАтрибута = "миллиметр";

		НоваяСтрока = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = Параметры.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = Параметры.ИдентификаторАтрибутаМаркетплейса;
		НоваяСтрока.ИдентификаторЗначенияАтрибута = "cm";
		НоваяСтрока.ЗначениеАтрибута = "сантиметр";

		НоваяСтрока = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = Параметры.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = Параметры.ИдентификаторАтрибутаМаркетплейса;
		НоваяСтрока.ИдентификаторЗначенияАтрибута = "in";
		НоваяСтрока.ЗначениеАтрибута = "дюйм";
	Иначе
		Пока Истина Цикл
			Ответ = ЗначенияАтрибутаКатегорииИзСервиса(Параметры, УчетнаяЗапись);
			ЗначенияАтрибутаКатегорииИзСервиса = Ответ.Результат;

			Если Не ЗначенияАтрибутаКатегорииИзСервиса = Неопределено Тогда
				Для Каждого ДанныеЗначенияАтрибута Из ЗначенияАтрибутаКатегорииИзСервиса Цикл
					НоваяСтрока = ТаблицаЗначенийАтрибута.Добавить();
					НоваяСтрока.ИдентификаторКатегорииМаркетплейса = Параметры.ИдентификаторКатегорииМаркетплейса;
					НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = Параметры.ИдентификаторАтрибутаМаркетплейса;
					НоваяСтрока.ИдентификаторЗначенияАтрибута = ЧислоВСтроку(ДанныеЗначенияАтрибута["id"]);
					НоваяСтрока.ЗначениеАтрибута = ДанныеЗначенияАтрибута["value"];
					НоваяСтрока.ОписаниеЗначенияАтрибута = ДанныеЗначенияАтрибута["info"];
					НоваяСтрока.АдресИзображенияДляЗначенияАтрибута = ДанныеЗначенияАтрибута["picture"];
				КонецЦикла;

				ЗначенияАтрибутаКатегорииИзСервиса = Неопределено;

				Если Не Параметры.ПродолжитьЗапрос ИЛИ Не Ответ.ПродолжитьЗапрос Тогда
					Прервать;
				ИначеЕсли Ответ.ПродолжитьЗапрос Тогда
					Параметры.ИдентификаторПоследнегоЗначения = НоваяСтрока.ИдентификаторЗначенияАтрибута;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ТаблицаЗначенийАтрибута.Сортировать("ЗначениеАтрибута Возр");
	КонецЕсли;

	Возврат ТаблицаЗначенийАтрибута;

КонецФункции

// Возвращает пустой список параметров.
// 
// Возвращаемое значение:
//  Структура - список параметров.
//
Функция ПараметрыДляЗаполненияАтрибутовКатегории() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ВариантОтображенияАтрибутов", "Все");
	Параметры.Вставить("ИдентификаторКатегорииМаркетплейса", "");
	Параметры.Вставить("ИсточникКатегорииМаркетплейса", Неопределено);
	Параметры.Вставить("ИдентификаторИсточникаКатегорииМаркетплейса", "");
	Параметры.Вставить("СоответствиеПсевдонимовМетаданных", Новый Структура);
	Параметры.Вставить("ПоляСхемыКомпоновкиДанных", Новый Массив);

	Возврат Параметры;

КонецФункции

Функция ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров()

	ДанныеПроверки = Новый Массив;
	ДанныеПроверки.Добавить("Объединить_на_одной_карточке");
	ДанныеПроверки.Добавить("Combine_into_One_PDP");

	Возврат ДанныеПроверки;

КонецФункции

// Заполняет атрибуты категории.
//
// Параметры:
//  Параметры       - Структура - см ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыДляЗаполненияАтрибутовКатегории().
//  УчетнаяЗапись   - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  ДеревоАтрибутов - ДеревоЗначений - 
//  ДанныеКэша      - Массив - массив данных из кэша клиентского приложения,
//                                       из переменной ПараметрыПриложения общего модуля управляемого приложения.
// 
// Возвращаемое значение:
//  Структура -
//    * СвойстваОбъединенияТоваровВОднуКарточку - Структура - см ИнтеграцияСМаркетплейсомOzonСервер.НовыйСписокСвойствОбъединенияТоваровВОднуКарточку(),
//    * ДеревоАтрибутов                         - ДеревоЗначений - заполненное дерево атрибутов,
//    * ДанныеКэша                              - Массив - кэш клиентского приложения.
//    * ТекстОшибки                             - Строка - описание ошибки.
//
Функция ЗаполнитьДанныеАтрибутовКатегории(Параметры, УчетнаяЗапись, ДеревоАтрибутов, ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		ТаблицаАтрибутов = АтрибутыКатегории(Параметры.ИдентификаторКатегорииМаркетплейса, УчетнаяЗапись);
		Если ЗначениеЗаполнено(ТаблицаАтрибутов) Тогда
			ДанныеКэша = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАтрибутов);
			ТаблицаАтрибутов = Неопределено;
		Иначе
			ДанныеКэша = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	// Данные из регистра сведений "Соответствия атрибутов маркетплейса".
	ДанныеСоответствияАтрибутовКатегории = ПолучитьДанныеСоответствияАтрибутовКатегории(Параметры.ИдентификаторКатегорииМаркетплейса,
			Параметры.ИсточникКатегорииМаркетплейса, УчетнаяЗапись);

	ТекстыОшибок = Новый Массив;

	Если НЕ ЗначениеЗаполнено(ДанныеКэша) Тогда
		ДанныеАтрибутов = ДанныеСоответствияАтрибутовКатегории;
		ТекстыОшибок.Добавить(НСтр("ru = 'Не удалось получить атрибуты выбранной категории из сервиса по причине: ошибка выполнения запроса. Подробнее см. журнал регистрации.'"));
	Иначе
		ДанныеАтрибутов = ДанныеКэша;
	КонецЕсли;

	СоответствиеТипов = СоответствиеТипов();
	СвойстваОбъединенияТоваровВОднуКарточку = НовыйСписокСвойствОбъединенияТоваровВОднуКарточку();

	МассивЗначенийПроверки = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();
	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();

	// Получение данных по доступным полям компоновщика, из которых был выбран реквизит 1С.
	Результат = СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Параметры.ПоляСхемыКомпоновкиДанных, Новый УникальныйИдентификатор());
	АдресСхемыАтрибутов = Результат.АдресСхемы;

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыАтрибутов));
	ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
	УдалитьИзВременногоХранилища(АдресСхемыАтрибутов);

	ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута = (ДеревоАтрибутов.Колонки.Найти("КоличествоЗначений1СВсего") <> Неопределено);

	// Заполнение дерева атрибутов категории.
	Для Каждого ДанныеАтрибута Из ДанныеАтрибутов Цикл
		Если МассивЗначенийПроверки.Найти(СтрЗаменить(ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса, " ", "_")) <> Неопределено Тогда
			СвойстваОбъединенияТоваровВОднуКарточку.ДоступноОбъединениеТоваровВОднуКарточку = Истина;
			СвойстваОбъединенияТоваровВОднуКарточку.ИдентификаторАтрибута = ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса;
			СвойстваОбъединенияТоваровВОднуКарточку.НаименованиеАтрибута = ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса;
			СвойстваОбъединенияТоваровВОднуКарточку.ОбязательныйАтрибут = ДанныеАтрибута.ОбязательныйАтрибут;
			СвойстваОбъединенияТоваровВОднуКарточку.ТипЗначенияАтрибута = ДанныеАтрибута.ТипЗначенияАтрибута;
			СвойстваОбъединенияТоваровВОднуКарточку.ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(ДанныеАтрибута.ТипЗначенияАтрибута);
			СвойстваОбъединенияТоваровВОднуКарточку.ОписаниеНазначенияАтрибута = ДанныеАтрибута.ОписаниеНазначенияАтрибута;

			ЗаписьСоответствия =
					ДанныеСоответствияАтрибутовКатегории.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса");

			Если ЗаписьСоответствия <> Неопределено Тогда
				ЗаписьСоответствия.Используется = Истина;

				СвойстваОбъединенияТоваровВОднуКарточку.Реквизит1С = ЗаписьСоответствия.Реквизит1С;
				СвойстваОбъединенияТоваровВОднуКарточку.ПредставлениеРеквизита1С = ЗаписьСоответствия.ПредставлениеРеквизита1С;

				СообщениеОбОшибке =
					ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПроверитьДублированиеДополнительногоРеквизита(ЗаписьСоответствия.Реквизит1С,
							ЗаписьСоответствия.ПредставлениеРеквизита1С, ДоступныеПоляВыбора);

				Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
					ТекстыОшибок.Добавить(СообщениеОбОшибке + " "
							+ НСтр("ru = 'Реквизит не используется при заполнении атрибутов товара. Необходимо выбрать другой реквизит или переименовать текущий в форме списка дополнительных реквизитов / сведений и перевыбрать его.'"));
				КонецЕсли;
			ИначеЕсли ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, ЗаписьСоответствия) Тогда	
				ЗаписьСоответствия.Свойство("Реквизит1С", СвойстваОбъединенияТоваровВОднуКарточку.Реквизит1С);
				ЗаписьСоответствия.Свойство("ПредставлениеРеквизита1С", СвойстваОбъединенияТоваровВОднуКарточку.ПредставлениеРеквизита1С);
			КонецЕсли;

			Если ЗаписьСоответствия = Неопределено И ДанныеАтрибута.ОбязательныйАтрибут Тогда
				// Добавление записи в регистр соответствия атрибутов.
				МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеАтрибута);
				МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
				МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
				МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
				МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
				МенеджерЗаписи.Записать();
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		Если Параметры.ВариантОтображенияАтрибутов = "Основные"
			И Не ДанныеАтрибута.ОбязательныйАтрибут
			Или Параметры.ВариантОтображенияАтрибутов = "Дополнительные"
			И ДанныеАтрибута.ОбязательныйАтрибут Тогда 
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса) Тогда
			Родитель = ДеревоАтрибутов.Строки.Найти(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса,
					"ИдентификаторАтрибутаМаркетплейса", Ложь);

			Если Родитель = Неопределено Тогда
				Родитель = ДеревоАтрибутов.Строки.Добавить();
				Родитель.ИдентификаторКатегорииМаркетплейса = ДанныеАтрибута.ИдентификаторКатегорииМаркетплейса;
				Родитель.ИдентификаторАтрибутаМаркетплейса = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;
				Родитель.НаименованиеАтрибутаМаркетплейса = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
				Родитель.НомерКартинкиКоллекцииТипов = 99;
				Родитель.Уровень = 0;
			КонецЕсли;
		Иначе
			Родитель = ДеревоАтрибутов;
		КонецЕсли;

		НоваяСтрока = Родитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАтрибута);
		НоваяСтрока.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
		НоваяСтрока.Уровень = 3;

		Если НоваяСтрока.ЯвляетсяКоллекциейЗначений И НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Коллекция значений из списка>'");
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию  = НСтр("ru = '<Значение из списка>'");
		ИначеЕсли НоваяСтрока.ЯвляетсяКоллекциейЗначений Тогда
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '<Коллекция значений типа %1>'"), ПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С));
		ИначеЕсли НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Значение из списка>'");
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию  = НСтр("ru = '<Значение из списка>'");
		Иначе
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = "<" + ПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С) + ">";
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию  = "<" + ПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С) + ">";
		КонецЕсли;

		ЗаписьСоответствия =
				ДанныеСоответствияАтрибутовКатегории.Найти(НоваяСтрока.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса");

		Если ЗаписьСоответствия <> Неопределено Тогда
			ЗаписьСоответствия.Используется = Истина;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьСоответствия, , "ТипЗначенияАтрибута");

			СообщениеОбОшибке =
					ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПроверитьДублированиеДополнительногоРеквизита(ЗаписьСоответствия.Реквизит1С,
							ЗаписьСоответствия.ПредставлениеРеквизита1С, ДоступныеПоляВыбора);

			Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
				ТекстыОшибок.Добавить(СообщениеОбОшибке + " "
						+ НСтр("ru = 'Реквизит не используется при заполнении атрибутов товара. Необходимо выбрать другой реквизит или переименовать текущий в форме списка дополнительных реквизитов / сведений и перевыбрать его.'"));
			КонецЕсли;
		ИначеЕсли ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, ЗаписьСоответствия) Тогда
			ПорядокСортировки = 0;
			ЗаписьСоответствия.Свойство("ПорядокСортировки", ПорядокСортировки);
			НоваяСтрока.ПорядокСортировки = ?(ПорядокСортировки = 0, НоваяСтрока.ПорядокСортировки, ПорядокСортировки);
			ЗаписьСоответствия.Свойство("Реквизит1С", НоваяСтрока.Реквизит1С);
			ЗаписьСоответствия.Свойство("ПредставлениеРеквизита1С", НоваяСтрока.ПредставлениеРеквизита1С);
			ЗаписьСоответствия.Свойство("ИдентификаторОбъектаМетаданных1С", НоваяСтрока.ИдентификаторОбъектаМетаданных1С);
			ЗаписьСоответствия.Свойство("ИдентификаторЗначенияПоУмолчанию", НоваяСтрока.ЗначениеПоУмолчаниюИдентификатор);
			ЗаписьСоответствия.Свойство("ЗначениеПоУмолчанию", НоваяСтрока.ЗначениеПоУмолчанию);

			// Добавление записи в регистр соответствия атрибутов.
			МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НоваяСтрока); 
			МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
			МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
			МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
			МенеджерЗаписи.ПолныйПутьКРеквизиту1С = НоваяСтрока.Реквизит1С;
			МенеджерЗаписи.ИдентификаторЗначенияПоУмолчанию = НоваяСтрока.ЗначениеПоУмолчаниюИдентификатор;
			МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
			МенеджерЗаписи.Записать();
		ИначеЕсли НоваяСтрока.ОбязательныйАтрибут Тогда
			// Добавление записи в регистр соответствия атрибутов.
			МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НоваяСтрока);
			МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
			МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
			МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
			МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
			МенеджерЗаписи.Записать();
		КонецЕсли;

		Если ЗначениеЗаполнено(НоваяСтрока.Реквизит1С) Тогда
			ПолеПоРеквизиту1С = ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(НоваяСтрока.Реквизит1С));

			Если ПолеПоРеквизиту1С <> Неопределено Тогда
				НоваяСтрока.ТипЗначенияРеквизита1С = ПолеПоРеквизиту1С.ТипЗначения;
			КонецЕсли;
		КонецЕсли;

		Если ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута Тогда
			ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(НоваяСтрока, УчетнаяЗапись, Параметры.СоответствиеПсевдонимовМетаданных);
		КонецЕсли;
	КонецЦикла;

	// Удаление атрибутов, отсутствующих в ответе метода API.
	Отбор = Новый Структура;
	Отбор.Вставить("Используется", Ложь);
	Если Параметры.ВариантОтображенияАтрибутов = "Основные" Тогда
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
	ИначеЕсли Параметры.ВариантОтображенияАтрибутов = "Дополнительные" Тогда
		Отбор.Вставить("ОбязательныйАтрибут", Ложь);
	КонецЕсли;

	УдаляемыеЗаписиСоответствия = ДанныеСоответствияАтрибутовКатегории.НайтиСтроки(Отбор);
	Для Каждого СтрокаСоответствия Из УдаляемыеЗаписиСоответствия Цикл 
		МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаСоответствия, "ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса");
		МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
		МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
		МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
		МенеджерЗаписи.Удалить();
	КонецЦикла;

	ДеревоАтрибутов.Строки.Сортировать("Уровень, ОбязательныйАтрибут Убыв, ПорядокСортировки, НаименованиеАтрибутаМаркетплейса", Истина);

	Если НЕ ЗначениеЗаполнено(ДанныеКэша) И ДеревоАтрибутов.Строки.Количество() > 0 Тогда
		ТекстыОшибок.Добавить(НСтр("ru = 'Заполнение атрибутов выполнено из сохраненных настроек.'"));
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("СвойстваОбъединенияТоваровВОднуКарточку", СвойстваОбъединенияТоваровВОднуКарточку);
	Результат.Вставить("ДеревоАтрибутов", ДеревоАтрибутов);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);
	Результат.Вставить("ТекстОшибки", СтрСоединить(ТекстыОшибок, Символы.ПС));

	Возврат Результат;

КонецФункции

// Функция - Заполнить информацию по атрибутам категории
//
// Параметры:
//  Параметры     - Структура - параметры ИдентификаторКатегорииМаркетплейса,
//                              НаименованиеКатегорииМаркетплейса,
//                              НаименованиеРодителяКатегорииМаркетплейса.
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  ДанныеКэша    - Массив - массив данных из кэша клиентского приложения,
//                           из переменной ПараметрыПриложения общего модуля управляемого приложения.
//
// Возвращаемое значение:
//  Структура -
//    * ТабличныйДокумент                     - ТабличныйДокумент - Описание атрибутов категории,
//    * ИнформацияОСопоставленныхКатегориях1С - Строка - список сопоставленных категорий 1С.
//    * ДанныеКэша                            - Массив - кэш клиентского приложения.
//
Функция ЗаполнитьИнформациюПоАтрибутамКатегории(Параметры, УчетнаяЗапись, ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		ТаблицаАтрибутов = АтрибутыКатегории(Параметры.ИдентификаторКатегорииМаркетплейса, УчетнаяЗапись);
		ТаблицаАтрибутов.Сортировать("ЗаполненРодитель УБЫВ, НаименованиеРодителяАтрибутаМаркетплейса ВОЗР,
				|ОбязательныйАтрибут УБЫВ, НаименованиеАтрибутаМаркетплейса ВОЗР");

		Если ЗначениеЗаполнено(ТаблицаАтрибутов) Тогда
			ДанныеКэша = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАтрибутов);
			ТаблицаАтрибутов = Неопределено;
		Иначе
			ДанныеКэша = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	// Заполнение дерева атрибутов в табличном документе.
	ТабличныйДокумент = Новый ТабличныйДокумент;

	Макет = Справочники.УчетныеЗаписиМаркетплейсов.ПолучитьМакет("ПФ_MXL_КарточкаКатегории");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьГруппаАтрибутов = Макет.ПолучитьОбласть("ГруппаАтрибутов");
	ОбластьУровень1_ОбязательныйАтрибут = Макет.ПолучитьОбласть("Уровень1_ОбязательныйАтрибут");
	ОбластьУровень1_Атрибут = Макет.ПолучитьОбласть("Уровень1_Атрибут");
	ОбластьУровень2_ОбязательныйАтрибут = Макет.ПолучитьОбласть("Уровень2_ОбязательныйАтрибут");
	ОбластьУровень2_Атрибут = Макет.ПолучитьОбласть("Уровень2_Атрибут");
	ОбластьОписаниеАтрибута = Макет.ПолучитьОбласть("ОписаниеАтрибута");
	ОбластьОписаниеАтрибутаСтрокой = Макет.ПолучитьОбласть("ОписаниеАтрибутаСтрокой");

	ОбластьШапка.Параметры.НаименованиеКатегории = Параметры.НаименованиеКатегорииМаркетплейса +
			" (" + Параметры.ИдентификаторКатегорииМаркетплейса + ")";
	ОбластьШапка.Параметры.НаименованиеРодителя = Параметры.НаименованиеРодителяКатегорииМаркетплейса;
	ТабличныйДокумент.Вывести(ОбластьШапка);

	СоответствиеТипов = СоответствиеТипов();

	ТекущийРодитель = "";

	Для Каждого ДанныеАтрибута Из ДанныеКэша Цикл
		Если ЗначениеЗаполнено(ТекущийРодитель) И ТекущийРодитель <> ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса Тогда
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			ТекущийРодитель = "";
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса) Тогда
			Если Не ЗначениеЗаполнено(ТекущийРодитель) Тогда
				ТекущийРодитель = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;

				ОбластьГруппаАтрибутов.Параметры.ГруппаАтрибутов = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
				ТабличныйДокумент.Вывести(ОбластьГруппаАтрибутов);

				ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
			КонецЕсли;
		КонецЕсли;

		Если ДанныеАтрибута.ОбязательныйАтрибут И ЗначениеЗаполнено(ТекущийРодитель) Тогда
			ОбластьАтрибута = ОбластьУровень2_ОбязательныйАтрибут;
		ИначеЕсли ДанныеАтрибута.ОбязательныйАтрибут Тогда
			ОбластьАтрибута = ОбластьУровень1_ОбязательныйАтрибут;
		ИначеЕсли ЗначениеЗаполнено(ТекущийРодитель) Тогда
			ОбластьАтрибута = ОбластьУровень2_Атрибут;
		Иначе
			ОбластьАтрибута = ОбластьУровень1_Атрибут;
		КонецЕсли;

		ОбластьАтрибута.Параметры.Атрибут = ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса;
		ТабличныйДокумент.Вывести(ОбластьАтрибута);

		ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);

		ОбластьОписаниеАтрибута.Параметры.Заголовок = НСтр("ru = 'Описание назначения атрибута'");
		ОбластьОписаниеАтрибута.Параметры.ОписаниеАтрибута = ДанныеАтрибута.ОписаниеНазначенияАтрибута;
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибута);

		ОбластьОписаниеАтрибута.Параметры.Заголовок = НСтр("ru = 'Тип значения атрибута'");
		ОбластьОписаниеАтрибута.Параметры.ОписаниеАтрибута = "" + СоответствиеТипов.Получить(ДанныеАтрибута.ТипЗначенияАтрибута)
		 + " (" + ДанныеАтрибута.ТипЗначенияАтрибута + ")";
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибута);

		ОбластьОписаниеАтрибута.Параметры.Заголовок = НСтр("ru = 'ID атрибута'");
		ОбластьОписаниеАтрибута.Параметры.ОписаниеАтрибута = ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса;
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибута);

		Если ДанныеАтрибута.ДоступенВыборЗначенияИзСписка И ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
			ОписаниеАтрибута =
					НСтр("ru = 'Для атрибута может быть выбрано несколько значений из предложенного списка.'");
		ИначеЕсли ДанныеАтрибута.ДоступенВыборЗначенияИзСписка Тогда
			ОписаниеАтрибута =
					НСтр("ru = 'Для атрибута может быть выбрано одно значение из предложенного списка.'");
		ИначеЕсли ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
			ОписаниеАтрибута =
					НСтр("ru = 'Для атрибута может быть указано одно значение.'");
		Иначе
			ОписаниеАтрибута =
					НСтр("ru = 'Для атрибута может быть указано одновременно несколько значений.'");
		КонецЕсли;

		Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
			ОписаниеАтрибута = ОписаниеАтрибута +  Символы.ПС
						+ НСтр("ru = 'Атрибут является обязательным для заполнения.'");
		Иначе
			ОписаниеАтрибута = ОписаниеАтрибута +  Символы.ПС
						+ НСтр("ru = 'Атрибут не является обязательным для заполнения.'");
		КонецЕсли;

		ОбластьОписаниеАтрибутаСтрокой.Параметры.ОписаниеАтрибута = ОписаниеАтрибута;
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибутаСтрокой);

		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		ТекущийРодитель = "";
	КонецЕсли;

	МассивКатегорий1С = СопоставленныеКатегории1С(Параметры.ИдентификаторКатегорииМаркетплейса, УчетнаяЗапись);
	ИнформацияОСопоставленныхКатегориях1С = СтрСоединить(МассивКатегорий1С, Символы.ПС);

	Результат = Новый Структура;
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);
	Результат.Вставить("ИнформацияОСопоставленныхКатегориях1С", ИнформацияОСопоставленныхКатегориях1С);

	Возврат Результат;

КонецФункции

Функция СопоставленныеКатегории1С(ИдентификаторКатегорииМаркетплейса, УчетнаяЗапись)

	МассивКатегорий1С = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторКатегорииМаркетплейса", ИдентификаторКатегорииМаркетплейса);
	Запрос.Текст =
	  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	  |	СоответствияОбъектовМаркетплейсов.Объект1С КАК Категория1С
	  |ИЗ
	  |	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	  |ГДЕ
	  |	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	  |	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
	  |	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса = &ИдентификаторКатегорииМаркетплейса";
	ВыборкаКатегорий1С = Запрос.Выполнить().Выбрать();
	Пока ВыборкаКатегорий1С.Следующий() Цикл
		МассивКатегорий1С.Добавить(ВыборкаКатегорий1С.Категория1С);
	КонецЦикла;

	Если МассивКатегорий1С.Количество() = 0 Тогда
		МассивКатегорий1С.Добавить(НСтр("ru = 'Нет данных сопоставления'"));
	КонецЕсли;

	Возврат МассивКатегорий1С;

КонецФункции

Функция ПолучитьДанныеСоответствияАтрибутовКатегории(ИдентификаторКатегории, Категория1С, УчетнаяЗапись)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторКатегории", ИдентификаторКатегории);
	Запрос.УстановитьПараметр("Категория1С", Категория1С);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегории1С КАК ИдентификаторКатегории1С,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторОбъектаМетаданных1С КАК ИдентификаторОбъектаМетаданных1С,
		|	СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
		|	СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
		|	СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
		|	СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
		|	СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
		|	СоответствияАтрибутовМаркетплейсов.ПолныйПутьКРеквизиту1С КАК Реквизит1С,
		|	СоответствияАтрибутовМаркетплейсов.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию КАК ЗначениеПоУмолчаниюИдентификатор,
		|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	СоответствияАтрибутовМаркетплейсов.ПорядокСортировки КАК ПорядокСортировки
		|ИЗ
		|	РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|ГДЕ
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса = &ИдентификаторКатегории
		|	И СоответствияАтрибутовМаркетплейсов.Категория1С = &Категория1С
		|	И СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";

	ДанныеСоответствияАтрибутовКатегории = Запрос.Выполнить().Выгрузить();
	ДанныеСоответствияАтрибутовКатегории.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ДанныеСоответствияАтрибутовКатегории.Индексы.Добавить("ИдентификаторАтрибутаМаркетплейса");

	Возврат ДанныеСоответствияАтрибутовКатегории;

КонецФункции

Функция ЗаполнитьДанныеЗначенийАтрибутаКатегории(ТаблицаСоответствияЗначенийАтрибута, Параметры, УчетнаяЗапись, ДанныеКэша = Неопределено) Экспорт

	ЗаполнитьСоответствияЗначенийАтрибута(ТаблицаСоответствияЗначенийАтрибута, Параметры, УчетнаяЗапись);

	Возврат ТаблицаСоответствияЗначенийАтрибута;

КонецФункции

// Возвращает список выбора по заданным параметрам.
//
// Параметры:
//  Параметры                - Структура - см. ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыЗапросаЗначенийАтрибутов()
//  УчетнаяЗапись            - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  ВариантПолученияЗначений - Строка - доступны варианты:
//                                      "ТипыСоответствияТребованиям",
//                                      "ЗначенияАтрибутов".
//  ДанныеКэша               - Массив - массив данных из кэша клиентского приложения,
//                                       из переменной ПараметрыПриложения общего модуля управляемого приложения.
// 
// Возвращаемое значение:
//  Структура -
//    * ТаблицаЗначенийВыбора - ТаблицаЗначений - таблица с данными по списку выбора,
//    * ДанныеКэша            - Массив - кэш клиентского приложения.
//
Функция ДоступныеЗначенияВыбора(Параметры, УчетнаяЗапись, ВариантПолученияЗначений, ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		ТаблицаЗначенийВыбора = ЗначенияАтрибутаКатегории(Параметры, УчетнаяЗапись);

		Если ТаблицаЗначенийВыбора <> Неопределено Тогда
			ТаблицаЗначенийВыбора.Сортировать("ЗначениеАтрибута");

			ДанныеКэша = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗначенийВыбора);
		КонецЕсли;
	Иначе
		ТаблицаЗначенийВыбора = МассивВТаблицуЗначений(ДанныеКэша);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаЗначенийВыбора", ТаблицаЗначенийВыбора);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);

	Возврат Результат;

КонецФункции

Функция ДанныеДляФормированияЗапросаЗначенийАтрибутовТекстЗапроса()
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК НаборСвойств
	|ПОМЕСТИТЬ НаборыСвойств
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = &ИмяПредопределенногоНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Ссылка КАК ДополнительноеСвойство,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка) КАК ПредставлениеСвойства,
	|	ЛОЖЬ КАК ТочноеСовпадение
	|ПОМЕСТИТЬ ДополнительныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборыСвойств КАК НаборыСвойств
	|		ПО Данные.НаборСвойств.Родитель = НаборыСвойств.НаборСвойств
	|ГДЕ
	|	Данные.Заголовок = &ЗаголовокСвойства
	|	И Данные.НаборСвойств <> ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка),
	|	ИСТИНА
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборыСвойств КАК НаборыСвойств
	|		ПО Данные.НаборСвойств.Родитель = НаборыСвойств.НаборСвойств
	|ГДЕ
	|	Данные.Ссылка.Заголовок = &ПредставлениеСвойства
	|	И Данные.Ссылка.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизиты.Свойство,
	|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизиты.Свойство),
	|	ЛОЖЬ
	|ИЗ
	|	НаборыСвойств КАК НаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ПО НаборыСвойств.НаборСвойств = ДополнительныеРеквизиты.Ссылка.Родитель
	|ГДЕ
	|	ДополнительныеРеквизиты.Свойство.Заголовок = &ЗаголовокСвойства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизиты.Свойство,
	|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизиты.Свойство),
	|	ИСТИНА
	|ИЗ
	|	НаборыСвойств КАК НаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ПО НаборыСвойств.НаборСвойств = ДополнительныеРеквизиты.Ссылка.Родитель
	|ГДЕ
	|	ДополнительныеРеквизиты.Свойство.Заголовок = &ПредставлениеСвойства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НаборыСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.ДополнительноеСвойство КАК ДополнительноеСвойство,
	|	Данные.ПредставлениеСвойства КАК ПредставлениеСвойства,
	|	Данные.ДополнительноеСвойство.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	Данные.ДополнительноеСвойство.ТипЗначения КАК ТипЗначения,
	|	Данные.ТочноеСовпадение КАК ТочноеСовпадение
	|ИЗ
	|	ДополнительныеСвойства КАК Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТочноеСовпадение УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДополнительныеСвойства";
	Возврат ТекстЗапроса;	
КонецФункции

Функция ДанныеДляФормированияЗапросаЗначенийАтрибутов(ПутьКПолю, ТипПоля, СоответствиеПсевдонимовМетаданных)

	ДанныеДляФормированияЗапроса = Новый Соответствие;

	Если Не ЗначениеЗаполнено(ПутьКПолю) Тогда
		Возврат ДанныеДляФормированияЗапроса;
	КонецЕсли;

	ЧастиПути = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ЧастиПутиКПолю(ПутьКПолю);
	КоличествоЧастейПути = ЧастиПути.Количество();

	Если КоличествоЧастейПути = 1 Тогда
		// Выбран элемент верхнего уровня.
		// В текущей задаче элементы верхнего уровня - это ссылочные типы.
		ЧастиПути.Добавить("Ссылка");
		КоличествоЧастейПути = 2;
	КонецЕсли;

	МассивПростыхТипов = ПростыеТипы();
	СоответствиеПолныхИменМетаданных = Новый Соответствие;

	ТаблицаДополнительныхСвойств = ТаблицаДополнительныхСвойств();

	Счетчик = 1;
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		Если Счетчик = 1 Тогда
			ИмяМетаданных = "";
			СоответствиеПсевдонимовМетаданных.Свойство(ЧастьПути, ИмяМетаданных);

			Если Не ЗначениеЗаполнено(ИмяМетаданных) Тогда
				Прервать;
			КонецЕсли;

			СоответствиеПолныхИменМетаданных.Вставить(ИмяМетаданных, Новый Структура);
		Иначе
			НовоеСоответствиеПолныхИменМетаданных = Новый Соответствие;

			ПредставлениеСвойства = СтрЗаменить(ЧастьПути, "[", "");
			ПредставлениеСвойства = СтрЗаменить(ПредставлениеСвойства, "]", "");

			Отбор = Новый Структура("Представление", ПредставлениеСвойства);
			ДополнительныеСведения = ТаблицаДополнительныхСвойств.НайтиСтроки(Отбор);
			ЭтоДополнительноеСвойство = (ДополнительныеСведения.Количество() > 0);

			Для Каждого ПолноеИмяМетаданных Из СоответствиеПолныхИменМетаданных Цикл

				ТипРеквизита = Неопределено;
				ДополнительноеСвойство = Неопределено;
				ЭтоДополнительноеСведение = Ложь;

				Если ЭтоДополнительноеСвойство Тогда
					ИмяПредопределенногоНабора = СтрЗаменить(ПолноеИмяМетаданных.Ключ, ".", "_");

					ПозицияПоиска = 1;
					Пока Истина Цикл
						РезультатПоиска = СтрНайти(ПредставлениеСвойства, "(", , ПозицияПоиска);

						Если РезультатПоиска = 0 Тогда
							Прервать;
						КонецЕсли;

						ПозицияПоиска = РезультатПоиска + 1;
					КонецЦикла;

					ЗаголовокСвойства = СтрЗаменить(СокрЛП(Лев(ПредставлениеСвойства, ПозицияПоиска - 2)), "[", "");

					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("ИмяПредопределенногоНабора", ИмяПредопределенногоНабора);
					Запрос.УстановитьПараметр("ЗаголовокСвойства", ЗаголовокСвойства);
					Запрос.УстановитьПараметр("ПредставлениеСвойства", ПредставлениеСвойства);
					Запрос.Текст = ДанныеДляФормированияЗапросаЗначенийАтрибутовТекстЗапроса();

					ВыборкаСвойств = Запрос.Выполнить().Выбрать();
					Пока ВыборкаСвойств.Следующий() Цикл
						Если ВыборкаСвойств.ТочноеСовпадение
							ИЛИ Не ВыборкаСвойств.ТочноеСовпадение И ВыборкаСвойств.ПредставлениеСвойства = ПредставлениеСвойства Тогда
							ТипРеквизита = ВыборкаСвойств.ТипЗначения;
							ДополнительноеСвойство = ВыборкаСвойств.ДополнительноеСвойство;
							ЭтоДополнительноеСведение = ВыборкаСвойств.ЭтоДополнительноеСведение;
							Прервать;
						КонецЕсли;
					КонецЦикла;

				ИначеЕсли Счетчик <> КоличествоЧастейПути Тогда

					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных.Ключ);
					Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
						Если Реквизит.Имя = ЧастьПути Тогда
							ТипРеквизита = Реквизит.Тип;
							Прервать;
						КонецЕсли;
					КонецЦикла;

					Если ТипРеквизита = Неопределено Тогда
						Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
							Если Реквизит.Имя = ЧастьПути Тогда
								ТипРеквизита = Реквизит.Тип;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;

				КонецЕсли;

				Если Счетчик = КоличествоЧастейПути И ТипПоля <> Неопределено Тогда
					Для Каждого ТипЗначенияПоля Из ТипПоля.Типы() Цикл
						Данные = Новый Структура;
						Данные.Вставить("ТипЗначенияРеквизита", ТипЗначенияПоля);

						Если ОбщегоНазначения.ЭтоСсылка(ТипЗначенияПоля) Тогда
							Данные.Вставить("ПутьКРеквизиту", "Ссылка"); 

							МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначенияПоля);

							Если ЗначениеЗаполнено(ДополнительноеСвойство) И МетаданныеПоТипу.Владельцы.Количество() > 0 Тогда
								ПараметрыЗапроса = Новый Структура("ДополнительноеСвойство", ДополнительноеСвойство);
								Данные.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
								Данные.Вставить("УсловиеЗапроса", "Владелец = &ДополнительноеСвойство");
							КонецЕсли;

							ДанныеДляФормированияЗапроса.Вставить(МетаданныеПоТипу.ПолноеИмя(), Данные);
						ИначеЕсли МассивПростыхТипов.Найти(ТипЗначенияПоля) <> Неопределено Тогда
							Если ЭтоДополнительноеСвойство Тогда
								ПараметрыЗапроса = Новый Структура("ДополнительноеСвойство", ДополнительноеСвойство);
								Данные.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);

								Если ЭтоДополнительноеСведение Тогда
									Данные.Вставить("ПутьКРеквизиту", "Значение");
									Данные.Вставить("УсловиеЗапроса", "ТИПЗНАЧЕНИЯ(Объект) = ТИП(" + ПолноеИмяМетаданных.Ключ + ") И Свойство = &ДополнительноеСвойство");
									ДанныеДляФормированияЗапроса.Вставить("РегистрСведений.ДополнительныеСведения", Данные);
								Иначе
									Данные.Вставить("ПутьКРеквизиту", "Значение");
									Данные.Вставить("УсловиеЗапроса", "Свойство = &ДополнительноеСвойство");
									ДанныеДляФормированияЗапроса.Вставить(ПолноеИмяМетаданных.Ключ + ".ДополнительныеРеквизиты", Данные);
								КонецЕсли;
							Иначе
								ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных.Ключ);
								
								Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ЧастьПути, ОбъектМетаданных)
									И Не ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ЧастьПути) Тогда
									Продолжить;
								КонецЕсли;

								Если ПолноеИмяМетаданных.Значение.Количество() > 0 Тогда 
									Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПолноеИмяМетаданных.Значение);
									Данные.Вставить("ТипЗначенияРеквизита", ТипЗначенияПоля);
								КонецЕсли;

								Данные.Вставить("ПутьКРеквизиту", "" + ЧастьПути);
								ДанныеДляФормированияЗапроса.Вставить(ПолноеИмяМетаданных.Ключ, Данные);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипРеквизита <> Неопределено Тогда
					Для Каждого ТипЗначенияПоля Из ТипРеквизита.Типы() Цикл
						Данные = Новый Структура;
						Данные.Вставить("ТипЗначенияРеквизита", ТипЗначенияПоля);

						Если ЭтоДополнительноеСвойство Тогда
							МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначенияПоля);
							
							Если МетаданныеПоТипу.Владельцы.Количество() > 0 Тогда
								ПараметрыЗапроса = Новый Структура("ДополнительноеСвойство", ДополнительноеСвойство);
								Данные.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
								Данные.Вставить("УсловиеЗапроса", "Владелец = &ДополнительноеСвойство");
							КонецЕсли;
						КонецЕсли;

						НовоеСоответствиеПолныхИменМетаданных.Вставить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ТипЗначенияПоля)), Данные);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;

			СоответствиеПолныхИменМетаданных = НовоеСоответствиеПолныхИменМетаданных;
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Возврат ДанныеДляФормированияЗапроса;

КонецФункции

Функция СобратьТекстЗапросаДляПолученияТаблицыИсточникаРеквизитов(ДанныеДляФормированияЗапроса)

	ТекстЗапросаДанных = "";

	ШаблонТекстаЗапросаПростыхТиповИСсылок =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&ПутьКРеквизиту КАК ЗначениеРеквизита
		|ПОМЕСТИТЬ ИсточникДанных
		|ИЗ
		|	&ИсточникДанных КАК ИсточникДанных
		|ГДЕ
		|	&УсловиеЗапроса";

	ШаблонТекстаЗапросаТипаБулево =
		"ВЫБРАТЬ
		|	ИСТИНА КАК ЗначениеРеквизита
		|ПОМЕСТИТЬ ИсточникДанных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК ЗначениеРеквизита";

	ОбъединениеТекстаЗапроса = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";

	ТипБулево = Тип("Булево");

	АтрибутыЗапроса = Новый Структура("ПутьКРеквизиту, ТипЗначенияРеквизита");
	АтрибутыЗапроса.Вставить("УсловиеЗапроса", "Истина");
	АтрибутыЗапроса.Вставить("ПараметрыЗапроса", Новый Структура);

	Для Каждого ЧастьДанныхДляФормированияЗапроса Из ДанныеДляФормированияЗапроса Цикл
		ИсточникДанных = ЧастьДанныхДляФормированияЗапроса.Ключ;
		ЗаполнитьЗначенияСвойств(АтрибутыЗапроса, ЧастьДанныхДляФормированияЗапроса.Значение);

		ДополнительноеУсловиеЗапроса = "";

		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИсточникДанных);
		Если ОбъектМетаданных <> Неопределено Тогда
			СвойстваПроверки = Новый Структура("Иерархический, ВидИерархии", Ложь);
			ЗаполнитьЗначенияСвойств(СвойстваПроверки, ОбъектМетаданных);
			Если СвойстваПроверки.Иерархический
				И СвойстваПроверки.ВидИерархии =  Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				ДополнительноеУсловиеЗапроса = Символы.ПС + "И НЕ ИсточникДанных.ЭтоГруппа";
			КонецЕсли;
		КонецЕсли;

		Если АтрибутыЗапроса.ТипЗначенияРеквизита = ТипБулево Тогда
			ТекстЧастиЗапроса = ШаблонТекстаЗапросаТипаБулево;
		Иначе
			ТекстЧастиЗапроса = СтрЗаменить(ШаблонТекстаЗапросаПростыхТиповИСсылок, "&ИсточникДанных", ИсточникДанных);
			Если АтрибутыЗапроса.ТипЗначенияРеквизита = Тип("Строка") Тогда
				ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "&ПутьКРеквизиту", "ВЫРАЗИТЬ(" + АтрибутыЗапроса.ПутьКРеквизиту + " КАК Строка(1024))");
			Иначе
				ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "&ПутьКРеквизиту", АтрибутыЗапроса.ПутьКРеквизиту);
			КонецЕсли;

			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "&УсловиеЗапроса", АтрибутыЗапроса.УсловиеЗапроса + ДополнительноеУсловиеЗапроса);
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстЗапросаДанных) Тогда
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "РАЗРЕШЕННЫЕ", "");
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "ПОМЕСТИТЬ ИсточникДанных", "");
			ТекстЗапросаДанных = ТекстЗапросаДанных + ОбъединениеТекстаЗапроса + ТекстЧастиЗапроса;
		Иначе
			ТекстЗапросаДанных = ТекстЧастиЗапроса;
		КонецЕсли;
	КонецЦикла;

	Результат = Новый Структура("ТекстЗапросаДанных, ПараметрыЗапроса", ТекстЗапросаДанных, АтрибутыЗапроса.ПараметрыЗапроса);
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(ДанныеДляЗаполнения, УчетнаяЗапись, СоответствиеПсевдонимовМетаданных) Экспорт

	ДанныеДляЗаполнения.КоличествоЗначений1СВсего = 0;
	ДанныеДляЗаполнения.КоличествоСопоставленныхЗначений = 0;
	ДанныеДляЗаполнения.ИнформацияОСопоставленииЗначений = НСтр("ru = 'Не обнаружены значения 1С'");

	ШаблонСоответствия = НСтр("ru = 'Сопоставлено %1 из %2'");

	ДанныеДляФормированияЗапроса = ДанныеДляФормированияЗапросаЗначенийАтрибутов(
			ДанныеДляЗаполнения.Реквизит1С, ДанныеДляЗаполнения.ТипЗначенияРеквизита1С, СоответствиеПсевдонимовМетаданных);

	Если ЗначениеЗаполнено(ДанныеДляФормированияЗапроса) Тогда
		Результат = СобратьТекстЗапросаДляПолученияТаблицыИсточникаРеквизитов(ДанныеДляФормированияЗапроса);
		ТекстЗапросаДанных = Результат.ТекстЗапросаДанных;

		ТекстЗапросаДанных = ТекстЗапросаДанных + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|" +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсточникДанных.ЗначениеРеквизита) КАК КоличествоЗначений1С,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствияОбъектовМаркетплейсов.Объект1С) КАК КоличествоСоответствий
			|ИЗ
			|	ИсточникДанных КАК ИсточникДанных
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
			|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров))
			|			И (СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = &ИдентификаторВладельцаОбъектаМаркетплейса)
			|			И ИсточникДанных.ЗначениеРеквизита = СоответствияОбъектовМаркетплейсов.Объект1С
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИсточникДанных";

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("ИдентификаторВладельцаОбъектаМаркетплейса",
				ДанныеДляЗаполнения.ИдентификаторКатегории1С +
				"/" + ДанныеДляЗаполнения.ИдентификаторКатегорииМаркетплейса +
				"/" + ДанныеДляЗаполнения.ИдентификаторАтрибутаМаркетплейса);

		Для Каждого ПараметрЗапроса Из Результат.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;

		Запрос.Текст = ТекстЗапросаДанных;

		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Следующий() Тогда
			ДанныеДляЗаполнения.КоличествоЗначений1СВсего = ВыборкаДанных.КоличествоЗначений1С;
			ДанныеДляЗаполнения.КоличествоСопоставленныхЗначений = ВыборкаДанных.КоличествоСоответствий;

			Если ДанныеДляЗаполнения.КоличествоЗначений1СВсего <> 0 Тогда
				ДанныеДляЗаполнения.ИнформацияОСопоставленииЗначений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСоответствия,
						ВыборкаДанных.КоличествоСоответствий, ВыборкаДанных.КоличествоЗначений1С); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСоответствияЗначенийАтрибута(ТаблицаСоответствияЗначенийАтрибута, Параметры, УчетнаяЗапись)

	ТаблицаСоответствияЗначенийАтрибута.Колонки.Добавить("ПредставлениеЗначенияРеквизита1С", Новый ОписаниеТипов("Строка"));
	ПараметрыАтрибута = Параметры.ПараметрыАтрибута;

	ДанныеДляФормированияЗапроса = ДанныеДляФормированияЗапросаЗначенийАтрибутов(
			Параметры.Реквизит1С, Параметры.ТипЗначенияРеквизита1С, Параметры.СоответствиеПсевдонимовМетаданных);

	Если ЗначениеЗаполнено(ДанныеДляФормированияЗапроса) Тогда
		Результат = СобратьТекстЗапросаДляПолученияТаблицыИсточникаРеквизитов(ДанныеДляФормированияЗапроса);
		ТекстЗапросаДанных = Результат.ТекстЗапросаДанных;

		ТекстЗапросаДанных = ТекстЗапросаДанных + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|" +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.ЗначениеРеквизита) КАК ПредставлениеЗначенияРеквизита1С,
			|	ИсточникДанных.ЗначениеРеквизита КАК ЗначениеРеквизита1С,
			|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторЗначенияАтрибутаМаркетплейса,
			|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеЗначенияАтрибутаМаркетплейса
			|ИЗ
			|	ИсточникДанных КАК ИсточникДанных
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
			|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров))
			|			И (СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = &ИдентификаторВладельцаОбъектаМаркетплейса)
			|			И ИсточникДанных.ЗначениеРеквизита = СоответствияОбъектовМаркетплейсов.Объект1С
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеЗначенияАтрибутаМаркетплейса
			|ИТОГИ ПО
			|	ЗначениеРеквизита1С
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИсточникДанных";

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("ИдентификаторВладельцаОбъектаМаркетплейса",
				ПараметрыАтрибута.ИдентификаторКатегории1С +
				"/" + ПараметрыАтрибута.ИдентификаторКатегорииМаркетплейса +
				"/" + ПараметрыАтрибута.ИдентификаторАтрибутаМаркетплейса);

		Для Каждого ПараметрЗапроса Из Результат.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;

		Запрос.Текст = ТекстЗапросаДанных;

		ВыборкаЗначенийРеквизита1С = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗначенийРеквизита1С.Следующий() Цикл
			ВыборкаДанных = ВыборкаЗначенийРеквизита1С.Выбрать();
			НоваяСтрока = ТаблицаСоответствияЗначенийАтрибута.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначенийРеквизита1С);
			НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыАтрибута.ИдентификаторКатегорииМаркетплейса;
			НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = ПараметрыАтрибута.ИдентификаторАтрибутаМаркетплейса;

			Если Параметры.МножественныйВыбор Тогда
				СписокЗначений = Новый СписокЗначений;
				Пока ВыборкаДанных.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаДанных.ИдентификаторЗначенияАтрибутаМаркетплейса) Тогда
						СписокЗначений.Добавить(ВыборкаДанных.ИдентификаторЗначенияАтрибутаМаркетплейса, ВыборкаДанных.НаименованиеЗначенияАтрибутаМаркетплейса);
					КонецЕсли;
				КонецЦикла;
				НоваяСтрока.ЗначенияАтрибута = СписокЗначений;

				Если СписокЗначений.Количество() > 0 Тогда
					НоваяСтрока.ЗначениеУстановлено = Истина;
					НоваяСтрока.ЗаданоСоответствие = Истина;
				КонецЕсли;
			Иначе
				Если ВыборкаДанных.Следующий() Тогда
					НоваяСтрока.НаименованиеЗначенияАтрибута = ВыборкаДанных.НаименованиеЗначенияАтрибутаМаркетплейса;
					НоваяСтрока.ИдентификаторЗначенияАтрибута = ВыборкаДанных.ИдентификаторЗначенияАтрибутаМаркетплейса;

					Если ЗначениеЗаполнено(НоваяСтрока.ИдентификаторЗначенияАтрибута) Тогда
						НоваяСтрока.ЗначениеУстановлено = Истина;
						НоваяСтрока.ЗаданоСоответствие = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТаблицаСоответствияЗначенийАтрибута.Сортировать("ПредставлениеЗначенияРеквизита1С, НаименованиеЗначенияАтрибута");
	ТаблицаСоответствияЗначенийАтрибута.Колонки.Удалить("ПредставлениеЗначенияРеквизита1С");

КонецПроцедуры

// Возвращает идентификаторы служебных атрибутов.
// 
// Возвращаемое значение:
//  Массив - идентификаторы служебных атрибутов.
//
Функция СлужебныеАтрибуты()

	МассивСлужебныхАтрибутов = Новый Массив;
	МассивСлужебныхАтрибутов.Добавить("weight_unit");
	МассивСлужебныхАтрибутов.Добавить("weight");
	МассивСлужебныхАтрибутов.Добавить("dimension_unit");
	МассивСлужебныхАтрибутов.Добавить("depth");
	МассивСлужебныхАтрибутов.Добавить("height");
	МассивСлужебныхАтрибутов.Добавить("width"); 

	Возврат МассивСлужебныхАтрибутов;

КонецФункции

Процедура ДополнитьВесогабаритамиУпаковки(ТаблицаАтрибутов, ИдентификаторКатегорииМаркетплейса)

	// Единица измерения веса
	НоваяСтрока = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "Весогабариты";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса = НСтр("ru = 'Весогабариты'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = "weight_unit";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса = НСтр("ru = 'Единица измерения веса'");
	НоваяСтрока.ОбязательныйАтрибут = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка = Истина; // г, кг, фунты
	НоваяСтрока.ТипЗначенияАтрибута = "string";
	НоваяСтрока.ТипЗначенияАтрибута1С = "Строка";
	НоваяСтрока.ЗаполненРодитель = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов = 8; // в коллекции это тип Строка;

	// Вес товара в упаковке
	НоваяСтрока = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "Весогабариты";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса = НСтр("ru = 'Весогабариты'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = "weight";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса = НСтр("ru = 'Вес товара в упаковке'");
	НоваяСтрока.ОбязательныйАтрибут = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута = НСтр("ru = 'Предельное значение - 1000 килограммов или конвертированная величина в других единицах измерения.'");
	НоваяСтрока.ЯвляетсяКоллекциейЗначений = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка = Ложь;
	НоваяСтрока.ТипЗначенияАтрибута = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С = "Число";
	НоваяСтрока.ЗаполненРодитель = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов = 13; // в коллекции это тип Число;

	// Единица измерения габаритов
	НоваяСтрока = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "Весогабариты";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса = НСтр("ru = 'Весогабариты'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = "dimension_unit";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса = НСтр("ru = 'Единица измерения габаритов'");
	НоваяСтрока.ОбязательныйАтрибут = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка = Истина; // мм, см, дюйм
	НоваяСтрока.ТипЗначенияАтрибута = "string";
	НоваяСтрока.ТипЗначенияАтрибута1С = "Строка";
	НоваяСтрока.ЗаполненРодитель = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов = 8; // в коллекции это тип Строка;

	// Глубина упаковки
	НоваяСтрока = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "Весогабариты";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса = НСтр("ru = 'Весогабариты'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = "depth";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса = НСтр("ru = 'Глубина упаковки'");
	НоваяСтрока.ОбязательныйАтрибут = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка = Ложь;
	НоваяСтрока.ТипЗначенияАтрибута = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С = "Число";
	НоваяСтрока.ЗаполненРодитель = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов = 13; // в коллекции это тип Число;

	// Высота упаковки
	НоваяСтрока = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "Весогабариты";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса = НСтр("ru = 'Весогабариты'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = "height";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса = НСтр("ru = 'Высота упаковки'");
	НоваяСтрока.ОбязательныйАтрибут = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка = Ложь;
	НоваяСтрока.ТипЗначенияАтрибута = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С = "Число";
	НоваяСтрока.ЗаполненРодитель = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов = 13; // в коллекции это тип Число;

	// Ширина упаковки
	НоваяСтрока = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "Весогабариты";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса = НСтр("ru = 'Весогабариты'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = "width";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса = НСтр("ru = 'Ширина упаковки'");
	НоваяСтрока.ОбязательныйАтрибут = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка = Ложь;
	НоваяСтрока.ТипЗначенияАтрибута = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С = "Число";
	НоваяСтрока.ЗаполненРодитель = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов = 13; // в коллекции это тип Число;

КонецПроцедуры

// Возвращает соответствие атрибутов реквизитам 1С, заданным по умолчанию.
// В ключе следует указывать префикс "Атрибут_" для поиска значения при условии,
// когда искомый идентификатор атрибута состоит только из цифр.
// ПорядокСортировки заполняется для сортировки в дереве значений, не обязателен к заполнению.
//
Функция ПутьКРеквизитам1СПоУмолчанию()

	ПутьКРеквизитам1СПоУмолчанию = Новый Структура;
	
	Возврат ПутьКРеквизитам1СПоУмолчанию;

КонецФункции

#КонецОбласти

#Область АлгоритмыЗаполненияАтрибутовТовара

// Возвращает новую пустую таблицу значений для данных о публикуемых товарах.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//	 * УчетнаяЗаписьМаркетплейса			- СправочникСсылка.УчетнаяЗаписьМаркетплейса - учетная запись маркетплейса.
//	 * Номенклатура							- СправочникСсылка.Номенклатура - номенклатура.
//	 * Характеристика						- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры.
//	 * Упаковка 							- СправочникСсылка.ЕдиницыИзмерения - упаковка.
//	 * ИсточникКатегории					- ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории,
//											колонка заполняется автоматически.
//	 * ОпубликоватьТовар					- Булево - признак необходимости публикации товара.
//	 * ИдентификаторПубликации				- Строка - уникальный идентификатор, созданный для сочетания полей Номенклатура, Характеристика, Упаковка;
//											колонка заполняется автоматически.
//	 * ИдентификаторОбъектаМаркетплейса		- Строка - идентификатор товара на маркетплейсе;
//											колонка заполняется автоматически.
//	 * Категория1С							- см. ИнтеграцияСМаркетплейсомOzonСервер.ОписаниеТипаКатегории1С() - категория 1С из номенклатуры;
//											колонка заполняется автоматически.
//	 * ИсточникКатегорииМаркетплейса		- см. ИнтеграцияСМаркетплейсомOzonСервер.ОписаниеТипаКатегории1С() - категория-источник,
//											по которой найдены правила заполнения атрибутов.
//	 * ИдентификаторКатегорииМаркетплейса	- Строка - идентификатор категории маркетплейса,
//											заполняется только при необходимости обновления значений атрибутов, при перезаполнении атрибутов не заполняется.
//	 * ДанныеОбъекта 						- ТаблицаЗначений - см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов();
//											колонка заполняется автоматически.
//	 * ДанныеОбъектаПереданы				- Булево - признак того, что реквизиты товара переданы, актуально для проверки заполнения или перезаполнения.
//	 * ДанныеДляПубликации					- Структура - см. ИнтеграцияСМаркетплейсомOzonСервер.НовыйСписокДанныхОТоваре();
//											колонка заполняется автоматически.
//	 * ОбъектыПубликации					- ТаблицаЗначений - см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОбъектовПубликации();
//											колонка заполняется автоматически.
//	 * ЕстьКритичныеОшибки					- Булево - признак наличия ошибок, из-за которых публикация товара невозможна;
//											колонка заполняется автоматически.
//	 * КодОшибки							- Строка - код ошибки заполнения атрибутов;
//											колонка заполняется автоматически.
//	 * ОписаниеОшибки						- Строка - описание ошибок заполнения атрибутов;
//											колонка заполняется автоматически.
//
Функция НоваяТаблицаПубликацииТоваров() Экспорт

	ОписаниеТипаСтрока          = Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаБулево          = Новый ОписаниеТипов("Булево");
	ОписаниеТипаТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
	ОписаниеТипаСтруктура       = Новый ОписаниеТипов("Структура");

	ТаблицаПубликацииТоваров = Новый ТаблицаЗначений; 
	ТаблицаПубликацииТоваров.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИсточникКатегории", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("ОпубликоватьТовар", ОписаниеТипаБулево);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИдентификаторПубликации", ОписаниеТипаСтрока50);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаПубликацииТоваров.Колонки.Добавить("Категория1С", ОписаниеТипаКатегории1С());
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИсточникКатегорииМаркетплейса", ОписаниеТипаКатегории1С());
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ДанныеОбъекта", ОписаниеТипаТаблицаЗначений);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ДанныеОбъектаПереданы", ОписаниеТипаБулево);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ДанныеДляПубликации", ОписаниеТипаСтруктура);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ОбъектыПубликации", ОписаниеТипаТаблицаЗначений);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ЕстьКритичныеОшибки", ОписаниеТипаБулево);
	ТаблицаПубликацииТоваров.Колонки.Добавить("КодОшибки", ОписаниеТипаСтрока);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ОписаниеОшибки", ОписаниеТипаСтрока);

	Возврат ТаблицаПубликацииТоваров;

КонецФункции

// Возвращает новую пустую таблицу значений для заполнения данных по реквизитам публикуемых товаров.
// См. СтатусыПубликацииОбъектовМаркетплейсаOzon.Формы.ФормаЗаписи.ДанныеОбъекта.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//	 * Номенклатура 		          			   - СправочникСсылка.Номенклатура - номенклатура.
//	 * Характеристика    			               - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//	 * Упаковка 		             			   - СправочникСсылка.ЕдиницыИзмерения - упаковка.
//	 * Категория1С 		             			   - см. ИнтеграцияСМаркетплейсомOzonСервер.ОписаниеТипаКатегории1С() - категория 1С из номенклатуры.
//	 * ИсточникКатегорииМаркетплейса 			   - см. ИнтеграцияСМаркетплейсомOzonСервер.ОписаниеТипаКатегории1С() - категория 1С, 
//															для которой задано соответствие категории маркетплейса, может быть указан элемент или группа элементов.
//	 * ИдентификаторИсточникаКатегорииМаркетплейса - Строка - идентификатор источника категории маркетплейса.
//	 * ИдентификаторКатегорииМаркетплейса		   - Строка - идентификатор категории маркетплейса.
//	 * ИдентификаторРодителяАтрибутаМаркетплейса   - Строка - идентификатор родителя атрибута маркетплейса.
//	 * НаименованиеРодителяАтрибутаМаркетплейса    - Строка - наименование родителя атрибута маркетплейса.
//	 * ИдентификаторАтрибутаМаркетплейса 		   - Строка - идентификатор атрибута маркетплейса.
//	 * НаименованиеАтрибутаМаркетплейса  		   - Строка - наименование атрибута.
//	 * ПолныйПутьКРеквизиту1С 			 		   - Строка - путь к реквизиту из регистра сведений СоответствияАтрибутовМаркетплейсов.
//	 * ОбязательныйАтрибут				   		   - Булево - признак обязательного атрибута.
//	 * ЯвляетсяКоллекциейЗначений 		 		   - Булево - признак того, что атрибут содержит список значений выбора.
//	 * ДоступенВыборЗначенияИзСписка  	  		   - Булево - признак наличия списка выбора значений атрибута в 1С.
//	 * ТипЗначенияАтрибута                		   - Строка - тип значения характеристики.
//	 * ЗначениеПоУмолчанию                		   - Строка, Число, Булево, Дата - значение по умолчанию.
//	 * ИдентификаторЗначенияПоУмолчанию  		   - Строка - идентификатор значения по умолчанию при выборе значения из списка.
//	 * ЗначениеРеквизита1С 				  		   - ЛюбаяСсылка, Строка, Число, Булево, Дата - значение реквизита 1С.
//	 * ЗначениеАтрибутаМаркетплейса 	  		   - Строка, Число, Булево, Дата - значение для маркетплейса.
//	 * ИдентификаторЗначенияАтрибутаМаркетплейса   - Строка - идентификатор значения для маркетплейса при выборе значения из списка.
//   * НеЗаполненРеквизит1С 				       - Булево - признак незаполненного реквизита 1С.
//	 * НеЗаполненоСоответствиеАтрибута	           - Булево - признак незаполненного соответствия атрибуту маркетплейса.
//	 * НеЗаполненАтрибут			 			   - Булево - признак незаполненного обязательного атрибута маркетплейса.
//	 * УстановленоЗначениеПоУмолчанию			   - Булево - признак установки значения по умолчанию из-за незаполненного реквизита 1С.
//															или незаполненного соответствия атрибуту маркетплейса.
//	 * ЗначениеАтрибутаЗаданоПользователем         - Булево - признак установки значения пользователем.
//
Функция НоваяТаблицаЗначенийРеквизитов() Экспорт

	ОписаниеТипаСтрока50    = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока500   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500));
	ОписаниеТипаБулево      = Новый ОписаниеТипов("Булево");
	ОписаниеТипаКатегории1С = ОписаниеТипаКатегории1С();

	ТаблицаЗначенийРеквизитов = Новый ТаблицаЗначений;
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("Категория1С", ОписаниеТипаКатегории1С);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ИсточникКатегорииМаркетплейса", ОписаниеТипаКатегории1С);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ИдентификаторИсточникаКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("НаименованиеКатегорииМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ИдентификаторРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("НаименованиеРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ПолныйПутьКРеквизиту1С", ОписаниеТипаСтрока500);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ПредставлениеРеквизита1С", ОписаниеТипаСтрока500);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ОбязательныйАтрибут", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ЯвляетсяКоллекциейЗначений", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ДоступенВыборЗначенияИзСписка", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ТипЗначенияАтрибута", ОписаниеТипаСтрока50);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ЗначениеПоУмолчанию", Новый ОписаниеТипов(ПростыеТипы()));
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ИдентификаторЗначенияПоУмолчанию", ОписаниеТипаСтрока50);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ЗначениеРеквизита1С"); // Любая ссылка и простые типы.
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ЗначениеАтрибутаМаркетплейса", Новый ОписаниеТипов(ПростыеТипы()));
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ИдентификаторЗначенияАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("НеЗаполненРеквизит1С", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("НеЗаполненоСоответствиеАтрибута", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("НеЗаполненАтрибут", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("НеЗаполненПутьКРеквизиту1С", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("УстановленоЗначениеПоУмолчанию", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ЗначениеАтрибутаЗаданоПользователем", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ОписаниеНазначенияАтрибута", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("ИзменилсяРеквизит1С", ОписаниеТипаБулево);
	ТаблицаЗначенийРеквизитов.Колонки.Добавить("НовоеЗначениеРеквизита1С"); // Любая ссылка и простые типы.

	Возврат ТаблицаЗначенийРеквизитов;

КонецФункции

Функция НоваяТаблицаОбъектовПубликации()

	МассивТиповОбъектаПубликации = Новый Массив; 
	МассивТиповОбъектаПубликации.Добавить(Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	МассивТиповОбъектаПубликации.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатурыПрисоединенныеФайлы"));

	ОписаниеТипаСтрока		= Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));

	ТаблицаОбъектовПубликации = Новый ТаблицаЗначений;
	ТаблицаОбъектовПубликации.Колонки.Добавить("ВидОбъектаМаркетплейса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("ОбъектПубликации", Новый ОписаниеТипов(МассивТиповОбъектаПубликации));
	ТаблицаОбъектовПубликации.Колонки.Добавить("НаименованиеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ИдентификаторПубликации", ОписаниеТипаСтрока50);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ДанныеОбъекта", Новый ОписаниеТипов("Структура"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("ЭтоОсновнойОбъект", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("ИзмененыРеквизиты", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("КодОшибки", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ОписаниеОшибки", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("Состояние", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ОписаниеСостояния", ОписаниеТипаСтрока);

	Возврат ТаблицаОбъектовПубликации;

КонецФункции

Функция НоваяТаблицаДанныхВесогабаритов()

	ОписаниеТипаСтрока3   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3));
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаЧисло  	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 5, ДопустимыйЗнак.Неотрицательный));

	ТаблицаДанныхВесогабаритов = Новый ТаблицаЗначений;
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("ИдентификаторЕдиницыИзмерения", ОписаниеТипаСтрока50);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("ИдентификаторЗначенияПоУмолчанию", ОписаниеТипаСтрока50);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("МеждународноеСокращение", ОписаниеТипаСтрока3);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("Числитель", ОписаниеТипаЧисло);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("Знаменатель", ОписаниеТипаЧисло);

	Возврат ТаблицаДанныхВесогабаритов;

КонецФункции

Функция НовыйСписокДанныхОТоваре()

	СтруктураДанныхЗаписи = Новый Структура;
	СтруктураДанныхЗаписи.Вставить("НаименованиеОбъектаМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ПредставлениеОбъектаМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ИдентификаторПубликации", "");
	СтруктураДанныхЗаписи.Вставить("ОписаниеОбъектаМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ИсточникКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ИдентификаторКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("НаименованиеКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("НеактивнаяКатегорияМаркетплейса", Ложь);
	СтруктураДанныхЗаписи.Вставить("ИспользуютсяКодыАктивации", Ложь);
	СтруктураДанныхЗаписи.Вставить("ОбъединяетсяВОднуКарточку", Ложь);
	СтруктураДанныхЗаписи.Вставить("ЗначениеОбъединенияВОднуКарточку", "");
	СтруктураДанныхЗаписи.Вставить("Валюта", "");
	СтруктураДанныхЗаписи.Вставить("КодВалюты", "");
	СтруктураДанныхЗаписи.Вставить("СтавкаНДС", 0);
	СтруктураДанныхЗаписи.Вставить("ВесогабаритыУпаковки", НовыйСписокАтрибутовВесогабаритовУпаковки());
	СтруктураДанныхЗаписи.Вставить("ОбъединятьТоварыВОднуКарточкуСвойства", НовыйСписокСвойствОбъединенияТоваровВОднуКарточку());
	СтруктураДанныхЗаписи.Вставить("ВидыЦенУчетнойЗаписи", Новый Структура); 
	СтруктураДанныхЗаписи.Вставить("Цены", Новый Структура);
	СтруктураДанныхЗаписи.Вставить("Штрихкод", "");

	Возврат СтруктураДанныхЗаписи;

КонецФункции

Функция НовыйСписокАтрибутовИзображения()

	СписокАтрибутовИзображения = Новый Структура;
	СписокАтрибутовИзображения.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", "");
	СписокАтрибутовИзображения.Вставить("ЭтоОсновноеИзображение", Ложь);
	СписокАтрибутовИзображения.Вставить("ЭтоИзображение360", Ложь);
	СписокАтрибутовИзображения.Вставить("УдаляемыеСсылки", Новый Соответствие);

	Возврат СписокАтрибутовИзображения;

КонецФункции

Функция НовыйСписокАтрибутовВесогабаритовУпаковки()

	СтруктураВесогабаритовУпаковки = Новый Структура; 
	СтруктураВесогабаритовУпаковки.Вставить("ЕдиницаВеса", "");
	СтруктураВесогабаритовУпаковки.Вставить("ВесТовараВУпаковке", 0);
	СтруктураВесогабаритовУпаковки.Вставить("ЕдиницаГабаритов", "");
	СтруктураВесогабаритовУпаковки.Вставить("Глубина", 0);
	СтруктураВесогабаритовУпаковки.Вставить("Высота", 0);
	СтруктураВесогабаритовУпаковки.Вставить("Ширина", 0);

	Возврат СтруктураВесогабаритовУпаковки;

КонецФункции

// Возвращает список параметров, используемых при заполнении данных публикуемого товара.
//
// Возвращаемое значение:
//  ПолучитьАтрибуты   	- Булево - признак получения сохраненных атрибутов для товаров маркетплейса.
//  ДляПубликации		- Булево - признак подготовки данных для отправки методом API маркетплейса.
//  ПолучитьИзображения	- Булево - признак подготовки данных для изображений.
//  ОбновитьДанные     	- Булево - признак обновления атрибутов для товаров маркетплейса, если ПолучитьАтрибуты = Истина,
//								   признак обновления данных по изображениям,
//								   если ПолучитьИзображения = Истина.
//
Функция СписокПараметровПодготовкиДанныхПубликуемыхТоваров() Экспорт

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ПолучитьАтрибуты", Ложь);
	СписокПараметров.Вставить("ДляПубликации", Ложь);
	СписокПараметров.Вставить("ПроверятьСоставАтрибутов", Ложь);
	СписокПараметров.Вставить("ПолучитьИзображения", Ложь);
	СписокПараметров.Вставить("ОбновитьДанные", Ложь);
	СписокПараметров.Вставить("ОбновитьКатегориюМаркетплейса", Ложь);
	СписокПараметров.Вставить("ПроверитьОшибкиЗаполнения", Ложь);

	Возврат СписокПараметров;

КонецФункции

Функция НоменклатураПолучитьСтавкуНДСЧислом( Номенклатура )
	ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Номенклатура, "ВидСтавкиНДС" );
	СтавкаНДССсылка = Справочники.СтавкиНДС.СтавкаНДС( ВидСтавкиНДС );
	Если ЗначениеЗаполнено( СтавкаНДССсылка ) Тогда
		СтавкаНДСЧислом = СтавкаНДССсылка.Ставка;
	Иначе
		СтавкаНДСЧислом = 0;
	КонецЕсли;
	Возврат СтавкаНДСЧислом;
КонецФункции

// Функция - Подготовить данные публикуемых товаров
//  Выполняет заполнение атрибутов товаров согласно установленным пользователем правилам соответствия реквизитов 1С
//  атрибутам маркетплейса.
//
// Параметры:
//  ДанныеПубликации    - ИсточникДанныхТоваров - см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаПубликацииТоваров();
//						- МенеджерВременныхТаблиц - менеджер временных таблиц с таблицей:
//							* Номенклатура      - СправочникСсылка.Номенклатура,
//							* Характеристика    - СправочникСсылка.ХарактеристикиНоменклатуры,
//							* Упаковка          - СправочникСсылка.УпаковкиИЕдиницыИзмерения,
//							* ИдентификаторКатегорииМаркетплейса - Строка.
//  УчетнаяЗапись       - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//	ПараметрыЗаполнения - Структура - список параметров, используемых при заполнении данных публикуемого товара,
//									  см. ИнтеграцияСМаркетплейсомOzonСервер.СписокПараметровПодготовкиДанныхПубликуемыхТоваров().
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаПубликацииТоваров().
//
Функция ПодготовитьДанныеПубликуемыхТоваров(ИсточникДанныхТоваров, ПараметрыЗаполнения, ПараметрыКонтекст = Неопределено) Экспорт

	ДляПубликации = ПараметрыЗаполнения.ДляПубликации;

	ПроверятьСоставАтрибутов = ПараметрыЗаполнения.ПроверятьСоставАтрибутов;
	ПолучитьАтрибуты = ПараметрыЗаполнения.ПолучитьАтрибуты;
	ПолучитьИзображения = ПараметрыЗаполнения.ПолучитьИзображения;
	ОбновитьДанные = ПараметрыЗаполнения.ОбновитьДанные;
	ОбновитьКатегориюМаркетплейса = ПараметрыЗаполнения.ОбновитьКатегориюМаркетплейса;
	ПроверитьОшибкиЗаполнения = ПараметрыЗаполнения.ПроверитьОшибкиЗаполнения;

	СоздаватьЗаписиВДанныхПубликации = Ложь;
	ЕстьКолонкаУчетнаяЗаписьМаркетплейса = Ложь;

	Если ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда
		ДанныеПубликации = ИсточникДанныхТоваров;
		ЕстьКолонкаУчетнаяЗаписьМаркетплейса = ИсточникДанныхТоваров.Колонки.Найти("УчетнаяЗаписьМаркетплейса") <> Неопределено;
	ИначеЕсли ТипЗнч(ИсточникДанныхТоваров) = Тип("МенеджерВременныхТаблиц") Тогда
		ДанныеПубликации = НоваяТаблицаПубликацииТоваров();
		СоздаватьЗаписиВДанныхПубликации = Истина;
		ЕстьКолонкаУчетнаяЗаписьМаркетплейса =
				(ИсточникДанныхТоваров.Таблицы.Получить("ДанныеПубликации").Колонки.Найти("УчетнаяЗаписьМаркетплейса") <> Неопределено);
	Иначе
		Возврат НоваяТаблицаПубликацииТоваров();
	КонецЕсли;

	ДанныеПубликации.Индексы.Добавить("УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");

	ЗаполненаТаблицаАтрибутов = Истина;

	Если ОбновитьДанные Тогда
		ТаблицаДанныхАтрибутов = ПолучитьДанныеЗначенийАтрибутов(ИсточникДанныхТоваров, ПараметрыКонтекст );

		Если ТаблицаДанныхАтрибутов = Неопределено Тогда
			ЗаполненаТаблицаАтрибутов = Ложь;

			Если ТипЗнч(ИсточникДанныхТоваров) = Тип("МенеджерВременныхТаблиц") Тогда
				ВыборкаДанныхПубликации = ИсточникДанныхТоваров.Таблицы.Получить("ДанныеПубликации").ПолучитьДанные().Выбрать();
				Пока ВыборкаДанныхПубликации.Следующий() Цикл
					СтрокаТовара = ДанныеПубликации.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТовара, ВыборкаДанныхПубликации);
				КонецЦикла; 
				
				СоздаватьЗаписиВДанныхПубликации = Ложь;
			КонецЕсли;

			ТаблицаДанныхАтрибутов = ДанныеПубликации;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда
		ТаблицаДанныхАтрибутов =
				ИсточникДанныхТоваров.Скопировать(, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка, ИсточникКатегории");
	Иначе // МенеджерВременныхТаблиц
		ТаблицаДанныхАтрибутов = Неопределено;
	КонецЕсли;
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ПодготовитьДанныеПубликуемыхТоваров:'") + " " + Символы.ПС
		+ "ПроверятьСоставАтрибутов: " + ПроверятьСоставАтрибутов + Символы.ПС
		+ "ПолучитьАтрибуты: " + ПолучитьАтрибуты + Символы.ПС
		+ "ПолучитьИзображения: " + ПолучитьИзображения + Символы.ПС
		+ "ОбновитьДанные: " + ОбновитьДанные + Символы.ПС
		+ "ОбновитьКатегориюМаркетплейса: " + ОбновитьКатегориюМаркетплейса + Символы.ПС
		+ "ПроверитьОшибкиЗаполнения: " + ПроверитьОшибкиЗаполнения + Символы.ПС
		+ "СоздаватьЗаписиВДанныхПубликации: " + СоздаватьЗаписиВДанныхПубликации + Символы.ПС
	
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ПараметрыКонтекст );
	КонецЕсли;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ОбновитьКатегориюМаркетплейса", ОбновитьКатегориюМаркетплейса);

	Если ПолучитьАтрибуты Тогда
		Запрос.УстановитьПараметр("БазоваяВалюта", БазоваяВалютаПоУмолчанию());
	КонецЕсли;

	// Подготовка текста запроса.
	ТекстыЗапроса = Новый Массив;

	Если ТаблицаДанныхАтрибутов = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = ИсточникДанныхТоваров;
	Иначе
		ЧастьТекстаЗапроса = ТекстЗапросаВыборкиДанныхТаблицыИсточника(ПолучитьАтрибуты, ОбновитьДанные И ЗаполненаТаблицаАтрибутов, ПолучитьИзображения);
		ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанныхАтрибутов);
	КонецЕсли;

	Если ПолучитьАтрибуты Тогда
		// Подготовка выборки штрихкодов.
		Если ОбновитьДанные Тогда
			ЧастьТекстаЗапроса = ТекстЗапросаВыборкиШтрихКодов();
			ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);
		КонецЕсли;

		ЧастьТекстаЗапроса = ТекстЗапросаВыборкиДанныхПоТоварамПубликации(ПолучитьАтрибуты, ОбновитьДанные И ЗаполненаТаблицаАтрибутов);
		ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);
	КонецЕсли;

	// Подготовка данных для конвертации единиц весогабаритов.
	Если ПолучитьАтрибуты И ОбновитьДанные И ЗаполненаТаблицаАтрибутов Тогда
		ЧастьТекстаЗапроса = ТекстЗапросаКоэффициентовКонвертацииЕдиницВесогабаритов();
		ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);

		ТипыЧисло = ПолучитьТипыOzonДляТипа1С("Число");
		Запрос.УстановитьПараметр("ТипыЧисло", ТипыЧисло);

		ТаблицаДанныхВесогабаритов = ПодготовитьТаблицуДанныхВесогабаритов();
		Запрос.УстановитьПараметр("ТаблицаВесогабаритов", ТаблицаДанныхВесогабаритов);
	КонецЕсли;

	// Подготовка выборки итоговых данных.
	ЧастьТекстаЗапроса = ТекстЗапросаВыборкиИтоговыхДанныхПоАтрибутам(ПолучитьАтрибуты, ОбновитьДанные И ЗаполненаТаблицаАтрибутов);
	ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);

	РазделительПакетаЗапросов = ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, РазделительПакетаЗапросов);
	Запрос.Текст = ТекстЗапроса;
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаУчетныхЗаписей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);

	ВидыЦенУчетнойЗаписи = Новый Соответствие;
	ВыборкаЦен = Неопределено;
	ВыборкаШтрихкодов = Неопределено;
	ВыборкаИзображений = Неопределено;

	Если ПолучитьАтрибуты Тогда
		// Подготовка выборки цен товаров.
		ТекстЗапроса = ТекстЗапросаВыборкиЦен(ОбновитьДанные);

		Запрос.Текст = ТекстЗапроса;
		ЦеныРезультатЗапроса = Запрос.Выполнить();
		ВыборкаЦен = ЦеныРезультатЗапроса.Выбрать();
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
			ЦеныПредставлениеСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ЦеныРезультатЗапроса.Выгрузить() );
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			ЛогКомментарий = НСтр("ru = 'ПодготовитьДанныеПубликуемыхТоваров:'") + Символы.ПС
			+ "Цены:" + Символы.ПС + ЦеныПредставлениеСтр 
			+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ЛогПараметры );
		КонецЕсли;
		

		Если ДляПубликации Тогда
			// Подготовка данных для сбора информации по упаковке.
			СоответствиеАтрибутовВесогабаритовУпаковки = СоответствиеАтрибутовВесогабаритовУпаковки();
		КонецЕсли;
	КонецЕсли;

	// Подготовка данных для выборки изображений.
	Если ПолучитьИзображения Тогда
		ИмяТаблицыТоваров = "ДанныеПубликации";
		ТекстЗапросаОчистка = "";

		Если ОбновитьДанные Тогда
			Запрос.Текст = ТекстЗапросаПодготовкиВременнойТаблицыДляПолученияОбъектовПубликации(ПолучитьАтрибуты);
			Запрос.Выполнить();
			
			ИмяТаблицыТоваров = "ТаблицаРазличныхДанныхПубликации";
			ТекстЗапросаОчистка = "УНИЧТОЖИТЬ ТаблицаРазличныхДанныхПубликации";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаВыборкиИзображений(ИмяТаблицыТоваров);
		Запрос.УстановитьПараметр("РасширенияИзображенийТоваров", РасширенияИзображений());
		Запрос.Текст = ТекстЗапроса;
		УстановитьПривилегированныйРежим(Истина);
		ИзображенияРезультатЗапроса = Запрос.Выполнить();
		ВыборкаИзображений = ИзображенияРезультатЗапроса.Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
			ИзображенияПредставлениеСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ИзображенияРезультатЗапроса.Выгрузить() );
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			ЛогКомментарий = НСтр("ru = 'ПодготовитьДанныеПубликуемыхТоваров:'") + Символы.ПС
			+ "Изображения:" + Символы.ПС + ИзображенияПредставлениеСтр 
			+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ЛогПараметры );
		КонецЕсли;
		

		Если ОбновитьДанные Тогда
			Запрос.Текст = ТекстЗапросаОчистка;
			Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;

	Если ПолучитьАтрибуты Тогда
		ТекстЗапроса = "УНИЧТОЖИТЬ ТаблицаДанныхПубликации";

		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;

	МенеджерВременныхТаблиц = Неопределено;

	// Получение данных из запроса и заполнение атрибутов публикуемых товаров.

	ШаблонОшибкиЗаполненияКатегории1С =
			НСтр("ru = 'Для номенклатуры <%1> не заполнен реквизит <%2>. Категория для сопоставления атрибутов неопределена.'");
	ШаблонОшибкиПравилЗаполнения = НСтр("ru = 'Для категории <%1> не настроены соответствия атрибутов маркетплейса реквизитам 1С.'");

	ПредставленияПризнакаОбъединенияКарточекТоваров = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();
	СоответствиеТипов = СоответствиеТипов();
	АтрибутыКатегорийСервиса = Новый Соответствие;
	Пока ВыборкаУчетныхЗаписей.Следующий() Цикл 
		
		Если ПолучитьАтрибуты Тогда
			// Подготовка видов цен учетной записи.
			ВидыЦенУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.ВидыЦенУчетнойЗаписи(ВыборкаУчетныхЗаписей.УчетнаяЗаписьМаркетплейса);
		КонецЕсли;

		ВыборкаНоменклатуры = ВыборкаУчетныхЗаписей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатуры.Следующий() Цикл

			СтавкаНДС = НоменклатураПолучитьСтавкуНДСЧислом( ВыборкаНоменклатуры.Номенклатура );

			ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл

				ВыборкаУпаковок = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаУпаковок.Следующий() Цикл

					Если СоздаватьЗаписиВДанныхПубликации Тогда
						СтрокаЗаполненияРеквизитовТовара = ДанныеПубликации.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗаполненияРеквизитовТовара, ВыборкаУпаковок,
								"УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
					Иначе
						СтрокаЗаполненияРеквизитовТовара = Неопределено;

						Отбор = Новый Структура;
						Отбор.Вставить("УчетнаяЗаписьМаркетплейса", Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка());
						Отбор.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
						Отбор.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
						Отбор.Вставить("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
						
						ЗаполнитьЗначенияСвойств(Отбор, ВыборкаУпаковок);
						СтрокиПубликации = ДанныеПубликации.НайтиСтроки(Отбор);

						МассивСтрокДублейКУдалению = Новый Массив;
						Для Каждого СтрокаПубликации Из СтрокиПубликации Цикл
							Если СтрокаЗаполненияРеквизитовТовара = Неопределено Тогда
								СтрокаЗаполненияРеквизитовТовара = СтрокаПубликации;
							Иначе
								МассивСтрокДублейКУдалению.Добавить(СтрокаПубликации);
							КонецЕсли;
						КонецЦикла;

						Для Каждого СтрокаУдаления Из МассивСтрокДублейКУдалению Цикл
							ДанныеПубликации.Удалить(СтрокаУдаления);
						КонецЦикла;

						Если СтрокаЗаполненияРеквизитовТовара = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаЗаполненияРеквизитовТовара.ИсточникКатегории = ВыборкаУпаковок.ИсточникКатегории;
					СтрокаЗаполненияРеквизитовТовара.ОпубликоватьТовар = ПолучитьАтрибуты И ОбновитьДанные;

					ТаблицаОбъектовПубликации = НоваяТаблицаОбъектовПубликации();
					ТаблицаЗначенийРеквизитов = НоваяТаблицаЗначенийРеквизитов();
					СтруктураДанныхЗаписи = НовыйСписокДанныхОТоваре();

					Если ПолучитьАтрибуты Тогда
						СвойстваОбъединенияТоваровВОднуКарточку = НовыйСписокСвойствОбъединенияТоваровВОднуКарточку();

						Если ДляПубликации Тогда
							СтруктураВесогабаритовУпаковки = НовыйСписокАтрибутовВесогабаритовУпаковки();
						КонецЕсли;

						СтруктураДанныхЗаписи.Валюта = ВыборкаНоменклатуры.КодВалюты;
						СтруктураДанныхЗаписи.КодВалюты = ВыборкаНоменклатуры.КодВалюты;
						СтруктураДанныхЗаписи.СтавкаНДС = СтавкаНДС;
						СтруктураДанныхЗаписи.Штрихкод = Строка(ВыборкаУпаковок.Штрихкод);

						Если Не ЗначениеЗаполнено(ВыборкаУпаковок.ИдентификаторПубликации) Тогда
							СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации = Новый УникальныйИдентификатор();
						Иначе
							СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации = ВыборкаУпаковок.ИдентификаторПубликации;
						КонецЕсли;

						СтрокаЗаполненияРеквизитовТовара.ИдентификаторОбъектаМаркетплейса = ВыборкаУпаковок.ИдентификаторОбъектаМаркетплейса;
						
						Если ЗначениеЗаполнено( ВыборкаУпаковок.НаименованиеОбъектаМаркетплейса ) Тогда
							НаименованиеОбъектаМаркетплейса = ВыборкаУпаковок.НаименованиеОбъектаМаркетплейса;
							СтруктураДанныхЗаписи.НаименованиеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
						Иначе
							НаименованиеОбъектаМаркетплейса = ПредставлениеТоварнойПозиции(ВыборкаУпаковок.Номенклатура, ВыборкаУпаковок.Характеристика, ВыборкаУпаковок.Упаковка);
						КонецЕсли;

						Если Не ЗначениеЗаполнено(ВыборкаУпаковок.Категория1С) Тогда
							Если ВыборкаУпаковок.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
								ПредставлениеРеквизитаИсточникаКатегории = Метаданные.Справочники.Номенклатура.Реквизиты.КатегорияНоменклатуры.Представление();
							Иначе
								ПредставлениеРеквизитаИсточникаКатегории = НСтр("ru = 'Ссылка'");
							КонецЕсли;

							СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации = СтруктураДанныхЗаписи;
							СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта = ТаблицаЗначенийРеквизитов;
							СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации = ТаблицаОбъектовПубликации;
							СтрокаЗаполненияРеквизитовТовара.ЕстьКритичныеОшибки = Истина;
								СтрокаЗаполненияРеквизитовТовара.ОписаниеОшибки =
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиЗаполненияКатегории1С,
												ВыборкаУпаковок.Номенклатура,
												ПредставлениеРеквизитаИсточникаКатегории);
						Иначе
							СтрокаЗаполненияРеквизитовТовара.Категория1С = ВыборкаУпаковок.Категория1С;
							СтруктураДанныхЗаписи.ИсточникКатегорииМаркетплейса = ВыборкаУпаковок.ИсточникКатегорииМаркетплейса;
						КонецЕсли;
					КонецЕсли;

					Если ПолучитьАтрибуты И ОбновитьДанные И ВыборкаУпаковок.СчетчикРеквизитов = 0 Тогда
						СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации = СтруктураДанныхЗаписи;
						СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта = ТаблицаЗначенийРеквизитов;
						СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации = ТаблицаОбъектовПубликации;
						СтрокаЗаполненияРеквизитовТовара.ЕстьКритичныеОшибки = Истина;
							СтрокаЗаполненияРеквизитовТовара.ОписаниеОшибки =
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиПравилЗаполнения, ВыборкаУпаковок.Категория1С);
					КонецЕсли;

					ИсточникДанныхЗаполнения = Новый Структура("УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
					ЗаполнитьЗначенияСвойств(ИсточникДанныхЗаполнения, ВыборкаУпаковок);

					// Получение таблицы атрибутов категории из сервиса для корректировки состава атрибутов при публикации.
					ТаблицаАтрибутовКатегорииИзСервиса = Неопределено;

					Если ПроверятьСоставАтрибутов Тогда
						ИдентификаторКатегорииМаркетплейса = ВыборкаУпаковок.ИдентификаторКатегорииМаркетплейса;
						Если Не ПустаяСтрока(ИдентификаторКатегорииМаркетплейса) Тогда
							ТаблицаАтрибутовКатегорииИзСервиса = АтрибутыКатегорийСервиса[ИдентификаторКатегорииМаркетплейса];
							Если ТаблицаАтрибутовКатегорииИзСервиса = Неопределено Тогда
								ТаблицаАтрибутовКатегорииИзСервиса = АтрибутыКатегории(ИдентификаторКатегорииМаркетплейса, ВыборкаУпаковок.УчетнаяЗаписьМаркетплейса);
								ТаблицаАтрибутовКатегорииИзСервиса.Индексы.Добавить("ИдентификаторАтрибутаМаркетплейса");
								АтрибутыКатегорийСервиса.Вставить(ИдентификаторКатегорииМаркетплейса, ТаблицаАтрибутовКатегорииИзСервиса);
							КонецЕсли;
						КонецЕсли;

						Если ТаблицаАтрибутовКатегорииИзСервиса = Неопределено Тогда
							ТаблицаАтрибутовКатегорииИзСервиса = НоваяТаблицаАтрибутовКатегорииМаркетплейса();
						КонецЕсли;

						Если ТаблицаАтрибутовКатегорииИзСервиса.Колонки.Найти("Используется") = Неопределено Тогда
							ТаблицаАтрибутовКатегорииИзСервиса.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
						КонецЕсли;
					КонецЕсли;

					ЗаполнитьОсновныеДанныеТовара = ПолучитьАтрибуты;

					Если ПолучитьАтрибуты И ОбновитьДанные Тогда

						// Заполнение таблицы значений реквизитов.

						ТаблицаЗначенийРеквизитовВХранилище = Неопределено;
						ЕстьКэш = Ложь;

						// Получение кэша значений атрибутов.
						Если СтрокаЗаполненияРеквизитовТовара.ДанныеОбъектаПереданы 
							И ТипЗнч(СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта) = Тип("ТаблицаЗначений")
							И СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта.Количество() > 0 Тогда
							ТаблицаЗначенийРеквизитовВХранилище = СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта;
							ТаблицаЗначенийРеквизитовВХранилище.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));

							ЕстьКэш = (ТаблицаЗначенийРеквизитовВХранилище.Количество() > 0);
						КонецЕсли;

						Если ВыборкаУпаковок.СчетчикРеквизитов > 0 Тогда
						ВыборкаЗначенийРеквизитов = ВыборкаУпаковок.Выбрать();
						Пока ВыборкаЗначенийРеквизитов.Следующий() Цикл
							// Проверка наличия атрибута в списке атрибутов категории в сервисе при публикации.
							Если ДляПубликации Тогда
								ОтборАтрибута = Новый Структура("ИдентификаторАтрибутаМаркетплейса", ВыборкаЗначенийРеквизитов.ИдентификаторАтрибутаМаркетплейса);
								СтрокиАтрибутовКатегорииИзСервиса = ТаблицаАтрибутовКатегорииИзСервиса.НайтиСтроки(ОтборАтрибута);
								Если СтрокиАтрибутовКатегорииИзСервиса.Количество() = 0 Тогда
									Продолжить; // Атрибут больше не используется.
								Иначе
									Для Каждого СтрокаАтрибутаИзСервиса Из СтрокиАтрибутовКатегорииИзСервиса Цикл
										СтрокаАтрибутаИзСервиса.Используется = Истина;
									КонецЦикла;
								КонецЕсли;

								// Заполнение весогабаритов упаковки.
								ИмяПоляВесогабарита = СоответствиеАтрибутовВесогабаритовУпаковки.Получить(ВыборкаЗначенийРеквизитов.ИдентификаторАтрибутаМаркетплейса);
								Если ЗначениеЗаполнено(ИмяПоляВесогабарита) Тогда
									СтруктураВесогабаритовУпаковки[ИмяПоляВесогабарита] =
											?(ЗначениеЗаполнено(ВыборкаЗначенийРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса),
											ВыборкаЗначенийРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса,
											ВыборкаЗначенийРеквизитов.ЗначениеАтрибутаМаркетплейса);
								КонецЕсли;
							КонецЕсли;

							Если ТаблицаЗначенийРеквизитовВХранилище = Неопределено Тогда
								ЗаполнитьЗначенияСвойств(ИсточникДанныхЗаполнения, ВыборкаЗначенийРеквизитов);

								// Получение кэша значений атрибутов.
								ТаблицаЗначенийРеквизитовВХранилище = ТаблицаЗначенийРеквизитов(ВыборкаЗначенийРеквизитов.ДанныеОбъекта);
								ТаблицаЗначенийРеквизитовВХранилище.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
								ЕстьКэш = (ТаблицаЗначенийРеквизитовВХранилище.Количество() > 0);
							КонецЕсли;

							Если ЗаполнитьОсновныеДанныеТовара Тогда
								// Заполнение основных данных товара из первой строки выборки.
								СтруктураДанныхЗаписи.НаименованиеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
								СтруктураДанныхЗаписи.ПредставлениеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
								СтруктураДанныхЗаписи.ОписаниеОбъектаМаркетплейса = ВыборкаЗначенийРеквизитов.ОписаниеОбъектаМаркетплейса;
								СтруктураДанныхЗаписи.ИдентификаторПубликации = СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации;
								СтруктураДанныхЗаписи.ИдентификаторКатегорииМаркетплейса = ВыборкаЗначенийРеквизитов.ИдентификаторКатегорииМаркетплейса;
								СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса = ВыборкаЗначенийРеквизитов.НаименованиеКатегорииМаркетплейса;
								СтруктураДанныхЗаписи.НеактивнаяКатегорияМаркетплейса = ВыборкаЗначенийРеквизитов.НеактивнаяКатегорияМаркетплейса;

								ЗаполнитьОсновныеДанныеТовара = Ложь;
							КонецЕсли;

							НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначенийРеквизитов);

							// Преобразование значения маркетплейса к требуемому типу.
							Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначенияАтрибута) Тогда
								ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(НоваяСтрока.ТипЗначенияАтрибута);
								ОписаниеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, НоваяСтрока.ТипЗначенияАтрибута);
								НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
							КонецЕсли;

							Если Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса) И ЗначениеЗаполнено(НоваяСтрока.ЗначениеПоУмолчанию) Тогда
								НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
								НоваяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса = НоваяСтрока.ИдентификаторЗначенияПоУмолчанию;
							КонецЕсли;

							// Заполнение признаков атрибута.
							НоваяСтрока.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
							НоваяСтрока.УстановленоЗначениеПоУмолчанию = Не НоваяСтрока.НеЗаполненоСоответствиеАтрибута
									И ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса)
									И НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
							НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = Ложь;

							// Отбор строк из кэша.
							Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка, Категория1С, ИдентификаторАтрибутаМаркетплейса");
							ЗаполнитьЗначенияСвойств(Отбор, ВыборкаЗначенийРеквизитов);
							Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
							СтрокиКэша = ТаблицаЗначенийРеквизитовВХранилище.НайтиСтроки(Отбор);

							ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеАтрибутаМаркетплейса;

							// Попытка заполнения пустого атрибута из сохраненных данных на случай, когда ранее атрибут был заполнен пользователем вручную.
							Если Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса) И ЕстьКэш Тогда
								ДозаполнениеСтроки = Истина; 

								Для Каждого СтрокаКэша Из СтрокиКэша Цикл
									СтрокаКэша.Обработана = Истина;

									Если ДозаполнениеСтроки Тогда
										ДозаполнениеСтроки = Ложь;
									ИначеЕсли ВыборкаЗначенийРеквизитов.ИдентификаторКатегорииМаркетплейса = СтрокаКэша.ИдентификаторКатегорииМаркетплейса Тогда
										НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
										ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначенийРеквизитов);
									Иначе
										Продолжить;
									КонецЕсли;

									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша, "ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса");

									// Заполнение признаков атрибута.
									НоваяСтрока.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
									НоваяСтрока.УстановленоЗначениеПоУмолчанию = Не НоваяСтрока.НеЗаполненоСоответствиеАтрибута
											И ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса)
											И НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
									НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = ЗначениеАтрибутаМаркетплейса <> НоваяСтрока.ЗначениеАтрибутаМаркетплейса;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
						КонецЕсли;

					ИначеЕсли ПолучитьАтрибуты И Не ОбновитьДанные Тогда

						// Получение таблицы значений реквизитов из кэша.
						Если СтрокаЗаполненияРеквизитовТовара.ДанныеОбъектаПереданы Тогда
							// Кэш из переданной таблицы данных объекта.
							ТаблицаЗначенийРеквизитов = СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта;
						Иначе
							// Кэш из хранилища значений.
							ТаблицаЗначенийРеквизитов = ТаблицаЗначенийРеквизитов(ВыборкаУпаковок.ДанныеОбъекта);
						КонецЕсли;

						Если ДляПубликации Или ПроверятьСоставАтрибутов Тогда
							МассивУдаляемыхСтрокРеквизитов = Новый Массив;
							Для Каждого СтрокаЗначенияРеквизита Из ТаблицаЗначенийРеквизитов Цикл
								// Заполнение весогабаритов упаковки.
								Если ДляПубликации Тогда
									ИмяПоляВесогабарита = СоответствиеАтрибутовВесогабаритовУпаковки.Получить(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса);
									Если ЗначениеЗаполнено(ИмяПоляВесогабарита) Тогда
										СтруктураВесогабаритовУпаковки[ИмяПоляВесогабарита] =
										?(ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса),
										СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса,
										СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса);
									КонецЕсли;
								КонецЕсли;

								// Проверка наличия атрибута в списке атрибутов категории в сервисе при публикации.
								Если ПроверятьСоставАтрибутов Тогда
									ОтборАтрибута = Новый Структура("ИдентификаторАтрибутаМаркетплейса", СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса);
									СтрокиАтрибутовКатегорииИзСервиса = ТаблицаАтрибутовКатегорииИзСервиса.НайтиСтроки(ОтборАтрибута);
									
									Если СтрокиАтрибутовКатегорииИзСервиса.Количество() = 0 Тогда
										МассивУдаляемыхСтрокРеквизитов.Добавить(СтрокаЗначенияРеквизита);
									Иначе
										Для Каждого СтрокаАтрибутаИзСервиса Из СтрокиАтрибутовКатегорииИзСервиса Цикл
											СтрокаАтрибутаИзСервиса.Используется = Истина;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли
							КонецЦикла;

							// Удаление атрибутов, отсутствующих в списке атрибутов категории в сервисе при публикации.
							Для Каждого СтрокаУдаления Из МассивУдаляемыхСтрокРеквизитов Цикл
								ТаблицаЗначенийРеквизитов.Удалить(СтрокаУдаления);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;

					Если ЗаполнитьОсновныеДанныеТовара Тогда
						// Заполнение основных данных товара.
						СтруктураДанныхЗаписи.НаименованиеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
						СтруктураДанныхЗаписи.ПредставлениеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
						СтруктураДанныхЗаписи.ОписаниеОбъектаМаркетплейса = ВыборкаУпаковок.ОписаниеОбъектаМаркетплейса;
						СтруктураДанныхЗаписи.ИдентификаторПубликации = СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации;
						СтруктураДанныхЗаписи.ИдентификаторКатегорииМаркетплейса = ВыборкаУпаковок.ИдентификаторКатегорииМаркетплейса;
						СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса = ВыборкаУпаковок.НаименованиеКатегорииМаркетплейса;
						СтруктураДанныхЗаписи.НеактивнаяКатегорияМаркетплейса = ВыборкаУпаковок.НеактивнаяКатегорияМаркетплейса;
			
						ЗаполнитьОсновныеДанныеТовара = Ложь;
					КонецЕсли;

					Если ПолучитьАтрибуты Тогда
						СтруктураДанныхЗаписи.ОбъединятьТоварыВОднуКарточкуСвойства =
								ПолучитьСвойстваОбъединенияТоваровВОднуКарточку(ТаблицаЗначенийРеквизитов, СтруктураДанныхЗаписи);
					КонецЕсли;

					Если ПроверятьСоставАтрибутов Тогда
						// Добавление обязательных атрибутов из сервиса.
						ОтборАтрибута = Новый Структура("Используется, ОбязательныйАтрибут", Ложь, Истина);
						СтрокиАтрибутовКатегорииИзСервиса = ТаблицаАтрибутовКатегорииИзСервиса.НайтиСтроки(ОтборАтрибута);
						Для Каждого СтрокаАтрибутаИзСервиса Из СтрокиАтрибутовКатегорииИзСервиса Цикл
							НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаполненияРеквизитовТовара);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанныхЗаписи);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАтрибутаИзСервиса);

							// Преобразование значения маркетплейса к требуемому типу.
							Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначенияАтрибута) Тогда
								ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(НоваяСтрока.ТипЗначенияАтрибута);
								ОписаниеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, НоваяСтрока.ТипЗначенияАтрибута);
								НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
							КонецЕсли;

							// Заполнение признаков атрибута.
							НоваяСтрока.НеЗаполненРеквизит1С = Истина;
							НоваяСтрока.НеЗаполненАтрибут = Истина;
							НоваяСтрока.УстановленоЗначениеПоУмолчанию = Ложь;
							НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = Ложь;
						КонецЦикла;
					КонецЕсли;
					
					Если ДляПубликации Тогда
						СтруктураДанныхЗаписи.Вставить("ВесогабаритыУпаковки", СтруктураВесогабаритовУпаковки);
					КонецЕсли;

					СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта = ТаблицаЗначенийРеквизитов;

					// Заполнение данных по изображениям.
					ЗаполнитьИнформациюПоИзображениям(ТаблицаОбъектовПубликации, ИсточникДанныхЗаполнения, ВыборкаИзображений, ОбновитьДанные);

					// Заполнение данных по ценам.
					ЗаполнитьИнформациюПоЦенам(СтруктураДанныхЗаписи, ИсточникДанныхЗаполнения, ВидыЦенУчетнойЗаписи, ВыборкаЦен);

					СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации = СтруктураДанныхЗаписи;
					СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации = ТаблицаОбъектовПубликации;

					// Проверка наличия ошибок.
					Если ПроверитьОшибкиЗаполнения Тогда
						СписокПараметровДляПроверки = СписокСвойствТовараДляКарточкиТовара();
						ЗаполнитьЗначенияСвойств(СписокПараметровДляПроверки, СтрокаЗаполненияРеквизитовТовара);
						СписокПараметровДляПроверки.НаименованиеКатегорииМаркетплейса = СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса;
						СписокПараметровДляПроверки.Цены = СтруктураДанныхЗаписи.Цены;

						РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара(СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта,
								СписокПараметровДляПроверки, СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации);
						СтрокаЗаполненияРеквизитовТовара.ЕстьКритичныеОшибки = РезультатПроверки.ЕстьКритичныеОшибки;
						СтрокаЗаполненияРеквизитовТовара.КодОшибки = РезультатПроверки.КодОшибки;
						СтрокаЗаполненияРеквизитовТовара.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
					КонецЕсли;

				КонецЦикла; // ВыборкаУпаковок

			КонецЦикла; //ВыборкаХарактеристик

		КонецЦикла; // ВыборкаНоменклатуры
		
	КонецЦикла; // ВыборкаУчетныхЗаписей

	Возврат ДанныеПубликации;

КонецФункции

// Функция - Получить свойства объединения товаров в одну карточку
//
// Параметры:
//  ТаблицаЗначенийРеквизитов - ТаблицаЗначений - источник данных.
//  ДанныеЗаписи              - Структура, СтрокаТаблицыЗначений -  приемник данных при необходимости заполнения.
// 
// Возвращаемое значение:
//  Структура - см. ИнтеграцияСМаркетплейсомOzonСервер.НовыйСписокСвойствОбъединенияТоваровВОднуКарточку().
//
Функция ПолучитьСвойстваОбъединенияТоваровВОднуКарточку(ТаблицаЗначенийРеквизитов, ДанныеЗаписи = Неопределено)

	СвойстваОбъединенияТоваровВОднуКарточку = НовыйСписокСвойствОбъединенияТоваровВОднуКарточку();

	ПредставленияПризнакаОбъединенияКарточекТоваров = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();
	СоответствиеТипов = СоответствиеТипов(); 

	Для Каждого НаименованиеОбъединения Из ПредставленияПризнакаОбъединенияКарточекТоваров Цикл
		Отбор = Новый Структура("НаименованиеАтрибутаМаркетплейса", СтрЗаменить(НаименованиеОбъединения, "_", " "));
		СтрокиАтрибутаОбъединения = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);

		Если СтрокиАтрибутаОбъединения.Количество() > 0 Тогда
			ВыборкаЗначенийРеквизитов = СтрокиАтрибутаОбъединения[0];

			СвойстваОбъединенияТоваровВОднуКарточку.ДоступноОбъединениеТоваровВОднуКарточку = Истина;
			СвойстваОбъединенияТоваровВОднуКарточку.ИдентификаторАтрибута = ВыборкаЗначенийРеквизитов.ИдентификаторАтрибутаМаркетплейса;
			СвойстваОбъединенияТоваровВОднуКарточку.НаименованиеАтрибута = ВыборкаЗначенийРеквизитов.НаименованиеАтрибутаМаркетплейса;
			СвойстваОбъединенияТоваровВОднуКарточку.ОбязательныйАтрибут = ВыборкаЗначенийРеквизитов.ОбязательныйАтрибут;
			СвойстваОбъединенияТоваровВОднуКарточку.ТипЗначенияАтрибута = ВыборкаЗначенийРеквизитов.ТипЗначенияАтрибута;
			СвойстваОбъединенияТоваровВОднуКарточку.ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(ВыборкаЗначенийРеквизитов.ТипЗначенияАтрибута);
			СвойстваОбъединенияТоваровВОднуКарточку.ОписаниеНазначенияАтрибута = ВыборкаЗначенийРеквизитов.ОписаниеНазначенияАтрибута;
			СвойстваОбъединенияТоваровВОднуКарточку.Реквизит1С = ВыборкаЗначенийРеквизитов.ПолныйПутьКРеквизиту1С;
			СвойстваОбъединенияТоваровВОднуКарточку.ПредставлениеРеквизита1С = ВыборкаЗначенийРеквизитов.ПредставлениеРеквизита1С;
			СвойстваОбъединенияТоваровВОднуКарточку.ЗначениеРеквизита1С = 
					?(ВыборкаЗначенийРеквизитов.ИзменилсяРеквизит1С, ВыборкаЗначенийРеквизитов.НовоеЗначениеРеквизита1С,
							ВыборкаЗначенийРеквизитов.ЗначениеРеквизита1С);
			СвойстваОбъединенияТоваровВОднуКарточку.ИзменилсяРеквизит1С = ВыборкаЗначенийРеквизитов.ИзменилсяРеквизит1С;
			СвойстваОбъединенияТоваровВОднуКарточку.КэшЗначениеРеквизита1С = ВыборкаЗначенийРеквизитов.ЗначениеРеквизита1С;

			Если ДанныеЗаписи <> Неопределено Тогда
				ДанныеЗаписи.ОбъединяетсяВОднуКарточку = ЗначениеЗаполнено(ВыборкаЗначенийРеквизитов.ПолныйПутьКРеквизиту1С);
				Если ДанныеЗаписи.ОбъединяетсяВОднуКарточку Тогда
					ДанныеЗаписи.ЗначениеОбъединенияВОднуКарточку = ВыборкаЗначенийРеквизитов.ЗначениеАтрибутаМаркетплейса;
				КонецЕсли;
			КонецЕсли;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат СвойстваОбъединенияТоваровВОднуКарточку;

КонецФункции

Функция ПолучитьДанныеЗначенийАтрибутов(ИсточникДанныхТоваров, ПараметрыКонтекст = Неопределено)

	// Таблица для сохранения псевдонимов полей.
	ТаблицаИменПолей = Новый ТаблицаЗначений;
	ТаблицаИменПолей.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка"));
	ТаблицаИменПолей.Колонки.Добавить("ПолныйПутьКРеквизиту1С", Новый ОписаниеТипов("Строка"));
	ТаблицаИменПолей.Колонки.Добавить("ДобавляемаяКолонка", Новый ОписаниеТипов("Булево"));

	// Подготовка схемы компоновки данных и компоновщика настроек для получения значений реквизитов.
	Поля = ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов(Истина);
	Результат = СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Поля);

	СхемаКомпоновкиДанных = Результат.СхемаКомпоновкиДанных;
	СоответствиеПсевдонимовМетаданных = Результат.СоответствиеПсевдонимовМетаданных;

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;

	// Получение таблицы значений реквизитов по установленным настройкам для атрибутов категорий 1С.
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));

	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	НастройкиКомпоновщика.Структура.Очистить();

	ГруппировкаПолей = НастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));

	ВыводРеквизитов = ГруппировкаПолей.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
	Если Не ВыводРеквизитов.Использование Тогда
		ВыводРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
		ВыводРеквизитов.Использование = Истина;
	КонецЕсли;

	Для Каждого ДанныеПоля Из Поля Цикл
		Поле = ДанныеПоля.Значение;

		СтрокаИмениПоля = ТаблицаИменПолей.Найти(Поле.ПолеКомпоновкиДанных, "ПолныйПутьКРеквизиту1С");
		Если СтрокаИмениПоля = Неопределено Тогда
			ВыбранноеПоле = ГруппировкаПолей.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле.ПолеКомпоновкиДанных);
			ВыбранноеПоле.Заголовок = Поле.ПутьКДанным;

			// Добавление записей в таблицу псевдонимов полей.
			СтрокаИмениПоля = ТаблицаИменПолей.Добавить();
			СтрокаИмениПоля.ИмяПоля = Поле.ПутьКДанным;
			СтрокаИмениПоля.ПолныйПутьКРеквизиту1С = Поле.ПолеКомпоновкиДанных;
		КонецЕсли;
	КонецЦикла;

	// Получение таблицы установленных настроек для атрибутов категорий 1С.
	ЧастиТекстаЗапроса = СоставныеЧастиТекстаЗапросаПолученияНастроекСоответствияАтрибутов();

	Запрос = Новый Запрос;

	Если ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДанныеПубликации", ИсточникДанныхТоваров);
		ДанныеПубликации = ИсточникДанныхТоваров;
	Иначе // МенеджерВременныхТаблиц
		Запрос.МенеджерВременныхТаблиц = ИсточникДанныхТоваров;
		ЧастиТекстаЗапроса.Пролог = СтрЗаменить(ЧастиТекстаЗапроса.Пролог, "&ДанныеПубликации", "ДанныеПубликации");
		ДанныеПубликации = ИсточникДанныхТоваров.Таблицы.Найти("ДанныеПубликации").ПолучитьДанные().Выгрузить();
	КонецЕсли;
	
	Если ДанныеПубликации.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос.Текст = ЧастиТекстаЗапроса.Пролог + ЧастиТекстаЗапроса.Разделитель + ЧастиТекстаЗапроса.Рефрен;

	УстановитьПривилегированныйРежим(Истина);

	Инд = 2;
	Пока Истина Цикл
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд + 1, "ЧГ="));
		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд - 1, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="));
		Запрос.Текст = ЧастиТекстаЗапроса.Рефрен;

		Инд = Инд + 1;
	КонецЦикла;

	ЧастиТекстаЗапроса.Эпилог = СтрЗаменить(ЧастиТекстаЗапроса.Эпилог, "ТаблицаАнализа2", "ТаблицаАнализа" + Формат(Инд, "ЧГ="));
	Запрос.Текст = ЧастиТекстаЗапроса.Эпилог;

	ТаблицаНастроекПолейКатегорий1С = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроекПолейКатегорий1С.Индексы.Добавить("ПолныйПутьКРеквизиту1С, Категория1С");
	ТаблицаНастроекПолейКатегорий1С.Индексы.Добавить("ПолныйПутьКРеквизиту1С, Категория1С, ИдентификаторКатегорииМаркетплейса");

	УстановитьПривилегированныйРежим(Ложь);

	Если ТаблицаНастроекПолейКатегорий1С.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Заполнение таблицы псевдонимов полей и дополнение компоновщика настроек полями из установленных настроек для
	// атрибутов категорий 1С.
	ИндПоля = 1;
	МассивНезаполненныхСопоставлений = Новый Массив;
	МассивДублейПолей = Новый Массив;

	Для Каждого СтрокаПоляКатегории1С Из ТаблицаНастроекПолейКатегорий1С Цикл
		СтрокаИмениПоля = ТаблицаИменПолей.Найти(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С, "ПолныйПутьКРеквизиту1С");
		Если СтрокаИмениПоля = Неопределено Тогда
			Если ПустаяСтрока(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С) Тогда
				МассивНезаполненныхСопоставлений.Добавить(СтрокаПоляКатегории1С);
				Продолжить;
			КонецЕсли;

			СтрокаИмениПоля = ТаблицаИменПолей.Добавить();
			СтрокаИмениПоля.ИмяПоля = "Значение1С_" + ИндПоля;
			СтрокаИмениПоля.ПолныйПутьКРеквизиту1С = СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С;
			СтрокаИмениПоля.ДобавляемаяКолонка = Истина;

			СообщениеОДубле =
					ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПроверитьДублированиеДополнительногоРеквизита(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С,
							СтрокаПоляКатегории1С.ПредставлениеРеквизита1С, НастройкиКомпоновщика.ДоступныеПоляВыбора);

			Если Не ПустаяСтрока(СообщениеОДубле) Тогда
				МассивДублейПолей.Добавить(СтрокаИмениПоля.ИмяПоля);
			Иначе
				ВыбранноеПоле = ГруппировкаПолей.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С);
				ВыбранноеПоле.Заголовок = СтрокаИмениПоля.ИмяПоля;
			КонецЕсли;

			ИндПоля = ИндПоля + 1;
		КонецЕсли;
	КонецЦикла;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    Попытка
		МакетКомпоновки =
			КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка получения значений атрибутов товаров, возможно, поменялось наименование дополнительного реквизита:'" )
		 + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, , Истина );
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;

	ВнешниеНаборы = Новый Структура("ДанныеПубликации", ДанныеПубликации);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы);

	ТаблицаЗначенийРеквизитов = Новый ТаблицаЗначений;

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначенийРеквизитов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	// Замена имен колонок таблицы значений реквизитов на псевдонимы из таблицы псевдонимов полей.
	ЯчейкиМакета = Новый Массив;
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
		ЯчейкиМакета = Макет.Макет.Ячейки;
		Прервать;
	КонецЦикла;

	Для Каждого ЯчейкаМакета Из ЯчейкиМакета Цикл
		СтрокаИмениПоля = ТаблицаИменПолей.Найти(ЯчейкаМакета.Заголовок, "ИмяПоля");
		Если СтрокаИмениПоля <> Неопределено Тогда
			КолонкаТаблицы = ТаблицаЗначенийРеквизитов.Колонки[ЯчейкаМакета.Имя];
			КолонкаТаблицы.Имя = ЯчейкаМакета.Заголовок;
			КолонкаТаблицы.Заголовок = СтрокаИмениПоля.ПолныйПутьКРеквизиту1С;
		КонецЕсли;
	КонецЦикла;

	Для Каждого ИсключенноеПоле Из МассивДублейПолей Цикл
		СтрокаИмениПоля = ТаблицаИменПолей.Найти(ИсключенноеПоле, "ИмяПоля");
		Если СтрокаИмениПоля <> Неопределено Тогда
			ТаблицаЗначенийРеквизитов.Колонки.Добавить(ИсключенноеПоле,, СтрокаИмениПоля.ПолныйПутьКРеквизиту1С);
		КонецЕсли;
	КонецЦикла;

	ТаблицаЗначенийРеквизитов.Колонки.Добавить("СтрокаОбработана", Новый ОписаниеТипов("Булево"));

	// Подготовка таблицы для получения соответствия значений реквизитов 1С значениям атрибутов маркетплейса.
	ТаблицаДанныхАтрибутов = ТаблицаНастроекПолейКатегорий1С.СкопироватьКолонки();

	МассивТипов = ПростыеТипы();
	Для Каждого Колонка Из ТаблицаЗначенийРеквизитов.Колонки Цикл
		Для Каждого ТипКолонки Из Колонка.ТипЗначения.Типы() Цикл
			Если ТипКолонки = Тип("Null") Тогда
				Продолжить;
			КонецЕсли;

			МассивТипов.Добавить(ТипКолонки);
		КонецЦикла;
	КонецЦикла;
	ОписаниеТипаЗначенияРеквизита = Новый ОписаниеТипов(МассивТипов,,,,Новый КвалификаторыСтроки(ДлинаСтрокиМагическоеЧисло()));

	ТаблицаДанныхАтрибутов.Колонки.Добавить("ЗначениеРеквизита1С", ОписаниеТипаЗначенияРеквизита);
	
	ДобавленныеОсновныеПоля = Новый Соответствие;
	Для Каждого ДанныеПоля Из Поля Цикл
		Поле = ДанныеПоля.Значение;
		Если ТаблицаДанныхАтрибутов.Колонки.Найти(Поле.ПутьКДанным) = Неопределено Тогда
			ТаблицаДанныхАтрибутов.Колонки.Добавить(Поле.ПутьКДанным, Поле.ТипЗначенияПоля);
			ДобавленныеОсновныеПоля.Вставить(Поле.ПутьКДанным, Поле.ПолеКомпоновкиДанных);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаДанных Из ТаблицаЗначенийРеквизитов Цикл
		Для Каждого Колонка Из ТаблицаЗначенийРеквизитов.Колонки Цикл
			Если ПустаяСтрока(Колонка.Заголовок) Тогда
				Продолжить;
			КонецЕсли;

			Отбор = Новый Структура("ПолныйПутьКРеквизиту1С", Колонка.Заголовок); 

			ИмяКолонкиКатегории = "Категория1С_" + ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДанных.ИсточникКатегории);
			ДобавленноеПоле = ДобавленныеОсновныеПоля.Получить(ИмяКолонкиКатегории);
			Если ДобавленноеПоле <> Неопределено Тогда
				СтрокаИмениПоля = ТаблицаИменПолей.Найти(ДобавленноеПоле, "ПолныйПутьКРеквизиту1С");
				Если СтрокаИмениПоля <> Неопределено Тогда
					ИмяКолонкиКатегории = СтрокаИмениПоля.ИмяПоля;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Отбор.Вставить("Категория1С", СтрокаДанных[ИмяКолонкиКатегории]);

			Если Не ПустаяСтрока(СтрокаДанных.ИдентификаторКатегорииМаркетплейса) Тогда
				Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", СтрокаДанных.ИдентификаторКатегорииМаркетплейса);
			КонецЕсли;

			СтрокиПолейКатегории1С = ТаблицаНастроекПолейКатегорий1С.НайтиСтроки(Отбор);

			Если СтрокиПолейКатегории1С.Количество() > 0 Тогда
				СтрокаДанных.СтрокаОбработана = Истина;

				Для Каждого СтрокаПолейКатегории1С Из СтрокиПолейКатегории1С Цикл
					НоваяСтрока = ТаблицаДанныхАтрибутов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолейКатегории1С);

					Если ДобавленныеОсновныеПоля.Количество() > 0 Тогда
						Для Каждого Поле Из ДобавленныеОсновныеПоля Цикл
							СтрокаИмениПоля = ТаблицаИменПолей.Найти(Поле.Значение, "ПолныйПутьКРеквизиту1С");
							Если СтрокаИмениПоля <> Неопределено Тогда
								НоваяСтрока[Поле.Ключ] = СтрокаДанных[СтрокаИмениПоля.ИмяПоля];
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;

					НоваяСтрока.ЗначениеРеквизита1С = СтрокаДанных[Колонка.Имя];
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Отбор = Новый Структура("СтрокаОбработана", Ложь);
	СтрокиБезПравилСопоставления = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
	Для Каждого СтрокаДанных Из СтрокиБезПравилСопоставления Цикл
		НоваяСтрока = ТаблицаДанныхАтрибутов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.ИдентификаторИсточникаКатегорииМаркетплейса = "";
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = "";
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = "";
		НоваяСтрока.ИдентификаторЗначенияПоУмолчанию = "";
		НоваяСтрока.НаименованиеАтрибутаМаркетплейса = "";
		НоваяСтрока.ПолныйПутьКРеквизиту1С = "";
		НоваяСтрока.ПредставлениеРеквизита1С = "";
		НоваяСтрока.ОбязательныйАтрибут = Ложь;
		НоваяСтрока.ЯвляетсяКоллекциейЗначений = Ложь;
		НоваяСтрока.ДоступенВыборЗначенияИзСписка = Ложь;
	КонецЦикла;

	Если МассивНезаполненныхСопоставлений.Количество() > 0 Тогда
		ИменаКолонок = "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка, ИсточникКатегории, Категория1С, ИсточникКатегорииМаркетплейса, ИдентификаторКатегорииМаркетплейса";
		ТаблицаПубликуемыхТоваров = ТаблицаДанныхАтрибутов.Скопировать(, ИменаКолонок);
		ТаблицаПубликуемыхТоваров.Свернуть(ИменаКолонок);
		ТаблицаПубликуемыхТоваров.Индексы.Добавить("УчетнаяЗаписьМаркетплейса, Категория1С, ИсточникКатегорииМаркетплейса");

		Для Каждого СтрокаДанных Из МассивНезаполненныхСопоставлений Цикл
			Отбор = Новый Структура("УчетнаяЗаписьМаркетплейса, Категория1С, ИсточникКатегорииМаркетплейса");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаДанных);
			СтрокиПубликации = ТаблицаПубликуемыхТоваров.НайтиСтроки(Отбор);

			Для Каждого СтрокаПубликации Из СтрокиПубликации Цикл
				Если Не ПустаяСтрока(СтрокаПубликации.ИдентификаторКатегорииМаркетплейса)
					И СтрокаПубликации.ИдентификаторКатегорииМаркетплейса <> СтрокаДанных.ИдентификаторКатегорииМаркетплейса Тогда
					Продолжить;
				КонецЕсли;

				НоваяСтрока = ТаблицаДанныхАтрибутов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПубликации);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаДанныхАтрибутов;

КонецФункции

Функция ТаблицаЗначенийРеквизитов(ДанныеОбъекта)

	ТаблицаЗначенийРеквизитовВХранилище = Неопределено;

	Если ДанныеОбъекта <> Неопределено Тогда
		ТаблицаЗначенийРеквизитовВХранилище = ДанныеОбъекта.Получить();
	КонецЕсли;

	Если ТипЗнч(ТаблицаЗначенийРеквизитовВХранилище) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаЗначенийРеквизитовВХранилище = НоваяТаблицаЗначенийРеквизитов();
	КонецЕсли;

	Возврат ТаблицаЗначенийРеквизитовВХранилище;

КонецФункции

Функция СоставныеЧастиТекстаЗапросаПолученияНастроекСоответствияАтрибутов()

	ЧастиТекстаЗапроса = Новый Структура;

	ЧастиТекстаЗапроса.Вставить("Пролог",
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВЫРАЗИТЬ(ТаблицаДанных.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории
		|ПОМЕСТИТЬ ВыборкаДанныхПубликации
		|ИЗ
		|	&ДанныеПубликации КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|			ТОГДА ТаблицаДанных.Номенклатура
		|		КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|			ТОГДА ТаблицаДанных.Номенклатура.КатегорияНоменклатуры
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Категория1С
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	ВыборкаДанныхПубликации КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВыборкаДанныхПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейсаТаблицы КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаДанных.Категория1С КАК Категория1С,
		|	ТаблицаДанных.Категория1С КАК РодительКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегории1С, """") КАК ИдентификаторКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса, """") КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса, """") КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса, """") КАК ИдентификаторАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса, """") КАК НаименованиеАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПолныйПутьКРеквизиту1С, """") КАК ПолныйПутьКРеквизиту1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПредставлениеРеквизита1С, """") КАК ПредставлениеРеквизита1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут, ЛОЖЬ) КАК ОбязательныйАтрибут,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений, ЛОЖЬ) КАК ЯвляетсяКоллекциейЗначений,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка, ЛОЖЬ) КАК ДоступенВыборЗначенияИзСписка,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута, """") КАК ТипЗначенияАтрибута,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчанию,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ИдентификаторЗначенияПоУмолчанию,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПорядокСортировки, 0) КАК ПорядокСортировки,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута, """") КАК ОписаниеНазначенияАтрибута
		|ПОМЕСТИТЬ ТаблицаАнализа1
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаДанных.Категория1С = СоответствияАтрибутовМаркетплейсов.Категория1С
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДанных");

	ЧастиТекстаЗапроса.Вставить("Разделитель",	"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");

	ЧастиТекстаЗапроса.Вставить("Рефрен",
		"ВЫБРАТЬ
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С.Родитель КАК РодительКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегории1С, """") КАК ИдентификаторКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса, """") КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса, """") КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса, """") КАК ИдентификаторАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса, """") КАК НаименованиеАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПолныйПутьКРеквизиту1С, """") КАК ПолныйПутьКРеквизиту1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПредставлениеРеквизита1С, """") КАК ПредставлениеРеквизита1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут, ЛОЖЬ) КАК ОбязательныйАтрибут,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений, ЛОЖЬ) КАК ЯвляетсяКоллекциейЗначений,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка, ЛОЖЬ) КАК ДоступенВыборЗначенияИзСписка,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута, ЛОЖЬ) КАК ТипЗначенияАтрибута,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчанию,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ИдентификаторЗначенияПоУмолчанию,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПорядокСортировки, 0) КАК ПорядокСортировки,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута, """") КАК ОписаниеНазначенияАтрибута
		|ПОМЕСТИТЬ ТаблицаАнализа2
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|		ПО (ТаблицаАнализа.УчетнаяЗаписьМаркетплейса = СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса)
		|			И ТаблицаАнализа.РодительКатегории1С.Родитель = СоответствияАтрибутовМаркетплейсов.Категория1С
		|ГДЕ
		|	ТаблицаАнализа.РодительКатегории1С.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ПолныйПутьКРеквизиту1С,
		|	ТаблицаАнализа.ПредставлениеРеквизита1С,
		|	ТаблицаАнализа.ОбязательныйАтрибут,
		|	ТаблицаАнализа.ЯвляетсяКоллекциейЗначений,
		|	ТаблицаАнализа.ДоступенВыборЗначенияИзСписка,
		|	ТаблицаАнализа.ТипЗначенияАтрибута,
		|	ТаблицаАнализа.ЗначениеПоУмолчанию,
		|	ТаблицаАнализа.ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаАнализа.ПорядокСортировки,
		|	ТаблицаАнализа.ОписаниеНазначенияАтрибута
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАнализа.Категория1С КАК Категория1С
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.РодительКатегории1С.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = """"");

	ЧастиТекстаЗапроса.Вставить("Эпилог",
		"ВЫБРАТЬ
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С КАК ИсточникКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторКатегории1С КАК ИдентификаторИсточникаКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
		|	ТаблицаАнализа.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
		|	ТаблицаАнализа.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
		|	ТаблицаАнализа.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
		|	ТаблицаАнализа.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
		|	ТаблицаАнализа.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
		|	ТаблицаАнализа.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	ТаблицаАнализа.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаАнализа.ПорядокСортировки КАК ПорядокСортировки,
		|	ТаблицаАнализа.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы <> """"
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса <> """"
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории,
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ПолныйПутьКРеквизиту1С,
		|	ТаблицаАнализа.ПредставлениеРеквизита1С,
		|	ТаблицаАнализа.ОбязательныйАтрибут,
		|	ТаблицаАнализа.ЯвляетсяКоллекциейЗначений,
		|	ТаблицаАнализа.ДоступенВыборЗначенияИзСписка,
		|	ТаблицаАнализа.ТипЗначенияАтрибута,
		|	ТаблицаАнализа.ЗначениеПоУмолчанию,
		|	ТаблицаАнализа.ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаАнализа.ПорядокСортировки,
		|	ТаблицаАнализа.ОписаниеНазначенияАтрибута
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияКатегорий
		|		ПО ТаблицаАнализа.УчетнаяЗаписьМаркетплейса = СоответствияКатегорий.УчетнаяЗаписьМаркетплейса
		|			И (СоответствияКатегорий.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = СоответствияКатегорий.ИдентификаторОбъектаМаркетплейса
		|			И ТаблицаАнализа.РодительКатегории1С = СоответствияКатегорий.Объект1С
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы = """"
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа2");

	Возврат ЧастиТекстаЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиДанныхТаблицыИсточника(ПолучитьАтрибуты, ОбновитьАтрибуты, ПолучитьОбъектыПубликации)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	&ДополнительныеПоляВыборки
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных";

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ТаблицаДанных.Категория1С КАК Категория1С,
				|	ТаблицаДанных.ИсточникКатегорииМаркетплейса КАК ИсточникКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
				|	ТаблицаДанных.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
				|	ТаблицаДанных.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	ТаблицаДанных.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	ТаблицаДанных.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	ТаблицаДанных.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	ТаблицаДанных.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
				|	ТаблицаДанных.ЗначениеРеквизита1С КАК ЗначениеРеквизита1С,
				|	ТаблицаДанных.ПорядокСортировки КАК ПорядокСортировки,
				|	ТаблицаДанных.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута");
	ИначеЕсли ПолучитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Категория1С,
				|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ИсточникКатегорииМаркетплейса,
				|	"""" КАК ИдентификаторКатегорииМаркетплейса");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "ИСТИНА");
	КонецЕсли;

	Если ПолучитьАтрибуты И ПолучитьОбъектыПубликации Тогда
		ТекстЗапроса = ТекстЗапроса + "
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Упаковка";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПодготовкиВременнойТаблицыДляПолученияОбъектовПубликации(ПолучитьАтрибуты)

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаРазличныхДанныхПубликации
		|ИЗ
		|	ДанныеПубликации КАК ТаблицаДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка";
	
	Если ПолучитьАтрибуты Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеПубликации", "ТаблицаДанныхПубликации");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиДанныхПоТоварамПубликации(ПолучитьАтрибуты, ОбновитьАтрибуты)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА &ОбновитьКатегориюМаркетплейса
		|			ТОГДА ТаблицаДанных.ИдентификаторКатегорииМаркетплейса
		|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса, ТаблицаДанных.ИдентификаторКатегорииМаркетплейса)
		|	КОНЕЦ КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеКатегорииМаркетплейса, """") КАК НаименованиеКатегорииМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта, НЕОПРЕДЕЛЕНО) КАК ДанныеОбъекта,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеОбъектаМаркетплейса,
		|	&ДополнительныеПоляВыборки
		|ПОМЕСТИТЬ ТаблицаДанныхПубликации
		|ИЗ
		|	ДанныеПубликации КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаДанных.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
		|			И ТаблицаДанных.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
		|			И ТаблицаДанных.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (&УсловиеСоединения)";

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	СправНоменклатура.НаименованиеПолное КАК ОписаниеОбъектаМаркетплейса,
				|	ВЫБОР
				|		КОГДА &ОбновитьКатегориюМаркетплейса
				|			ТОГДА ТаблицаДанных.Категория1С
				|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Категория, ТаблицаДанных.Категория1С)
				|	КОНЕЦ КАК Категория1С,
				|	ВЫБОР
				|		КОГДА &ОбновитьКатегориюМаркетплейса
				|			ТОГДА ТаблицаДанных.ИсточникКатегорииМаркетплейса
				|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса, ТаблицаДанных.ИсточникКатегорииМаркетплейса)
				|	КОНЕЦ КАК ИсточникКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
				|	ТаблицаДанных.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
				|	ТаблицаДанных.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	ТаблицаДанных.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	ТаблицаДанных.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	ТаблицаДанных.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	ТаблицаДанных.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
				|	ТаблицаДанных.ЗначениеРеквизита1С КАК ЗначениеРеквизита1С,
				|	ТаблицаДанных.ПорядокСортировки КАК ПорядокСортировки,
				|	ТаблицаДанных.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
				|	ЕСТЬNULL(ТаблицаШтрихкодов.Штрихкод, """") КАК Штрихкод");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&УсловиеСоединения)", "ИСТИНА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
		|		ПО ТаблицаДанных.Номенклатура = ТаблицаШтрихкодов.Номенклатура
		|			И ТаблицаДанных.Характеристика = ТаблицаШтрихкодов.Характеристика
		|			И ТаблицаДанных.Упаковка = ТаблицаШтрихкодов.Упаковка");
	ИначеЕсли ПолучитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ОписаниеОбъектаМаркетплейса, """") = """"
				|			ТОГДА СправНоменклатура.НаименованиеПолное
				|		ИНАЧЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ОписаниеОбъектаМаркетплейса
				|	КОНЕЦ КАК ОписаниеОбъектаМаркетплейса,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Категория, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Категория1С,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ИсточникКатегорииМаркетплейса,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Штрихкод, """") КАК Штрихкод");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&УсловиеСоединения)", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&УсловиеСоединения)", "ИСТИНА");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиИтоговыхДанныхПоАтрибутам(ПолучитьАтрибуты, ОбновитьАтрибуты)

	Если ПолучитьАтрибуты Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ЕСТЬNULL(СправВалюты.Наименование, """") КАК КодВалюты,
			|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
			|	ТаблицаДанных.Номенклатура КАК Номенклатура,
			|	ТаблицаДанных.Характеристика КАК Характеристика,
			|	ТаблицаДанных.Упаковка КАК Упаковка,
			|	ТаблицаДанных.Категория1С КАК Категория1С,
			|	ТаблицаДанных.ИсточникКатегорииМаркетплейса КАК ИсточникКатегорииМаркетплейса,
			|	ЕСТЬNULL(СоответствияКатегорий.НаименованиеОбъектаМаркетплейса, ТаблицаДанных.НаименованиеКатегорииМаркетплейса) КАК НаименованиеКатегорииМаркетплейса,
			|	(СоответствияКатегорий.НаименованиеОбъектаМаркетплейса ЕСТЬ NULL) КАК НеактивнаяКатегорияМаркетплейса,
			|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
			|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
			|	ТаблицаДанных.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
			|	ТаблицаДанных.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	ТаблицаДанных.ОписаниеОбъектаМаркетплейса КАК ОписаниеОбъектаМаркетплейса,
			|	ТаблицаДанных.Штрихкод КАК Штрихкод,
			|	ТаблицаДанных.ДанныеОбъекта КАК ДанныеОбъекта,
			|	0 КАК СчетчикРеквизитов,
			|	&ДополнительныеПоляВыборки
			|ИЗ
			|	ТаблицаДанныхПубликации КАК ТаблицаДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписиМаркетплейсов
			|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписиМаркетплейсов.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СправВалюты
			|		ПО СправУчетныеЗаписиМаркетплейсов.ВалютаУчета = СправВалюты.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияКатегорий
			|		ПО ТаблицаДанных.ИсточникКатегорииМаркетплейса = СоответствияКатегорий.Объект1С
			|			И ТаблицаДанных.ИдентификаторКатегорииМаркетплейса = СоответствияКатегорий.ИдентификаторОбъектаМаркетплейса
			|			И ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СоответствияКатегорий.УчетнаяЗаписьМаркетплейса
			|			И СоответствияКатегорий.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
			|			И (&СоединениеРезультирующейТаблицы)
			|
			|ИТОГИ
			|	МИНИМУМ(Упаковка),
			|	МИНИМУМ(ИдентификаторПубликации),
			|	МИНИМУМ(ИдентификаторОбъектаМаркетплейса),
			|	МИНИМУМ(НаименованиеОбъектаМаркетплейса),
			|	МИНИМУМ(ИсточникКатегории),
			|	МИНИМУМ(Категория1С),
			|	МИНИМУМ(КодВалюты),
			|	МИНИМУМ(ИсточникКатегорииМаркетплейса),
			|	МИНИМУМ(ИдентификаторКатегорииМаркетплейса),
			|	СУММА(СчетчикРеквизитов),
			|	МИНИМУМ(Штрихкод)
			|ПО
			|	УчетнаяЗаписьМаркетплейса,
			|	Номенклатура,
			|	Характеристика";

		Если ОбновитьАтрибуты Тогда
			// Дополнение полей раздела ИТОГИ ПО.
			ТекстЗапроса = ТекстЗапроса + ",
					|	Упаковка";

			// Уничтожение временной таблицы.
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "УНИЧТОЖИТЬ ЕдиницыИзмеренияВесогабаритов";

			// Добавление вычисления счетчика реквизитов товара.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК СчетчикРеквизитов", "ВЫБОР
				|		КОГДА ТаблицаДанных.ПолныйПутьКРеквизиту1С = """"
				|			ТОГДА 0
				|		ИНАЧЕ ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
				|	КОНЕЦ КАК СчетчикРеквизитов");

			// Добавление полей выборки.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
				|	ТаблицаДанных.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
				|	ТаблицаДанных.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	ТаблицаДанных.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	ТаблицаДанных.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	ТаблицаДанных.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	ТаблицаДанных.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
				|	ТаблицаДанных.ЗначениеРеквизита1С КАК ЗначениеРеквизита1С,
				|	ТаблицаДанных.ПорядокСортировки КАК ПорядокСортировки,
				|	ТаблицаДанных.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса = """"
				|			ТОГДА 3
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК Уровень,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.ДоступенВыборЗначенияИзСписка
				|			ТОГДА ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, ТаблицаДанных.ЗначениеПоУмолчанию)
				|		КОГДА ТаблицаДанных.ТипЗначенияАтрибута В (&ТипыЧисло) И ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ЧИСЛО)
				|			ТОГДА ВЫРАЗИТЬ(ТаблицаДанных.ЗначениеРеквизита1С КАК ЧИСЛО) * ЕСТЬNULL(ЕдиницыИзмеренияВесогабаритов.КоэффициентПересчета, 1)
				|		КОГДА ВЫБОР
				|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(СТРОКА)
				|					ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = """"
				|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ЧИСЛО)
				|					ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = 0
				|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ДАТА)
				|					ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = ДАТАВРЕМЯ(1, 1, 1)
				|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(БУЛЕВО)
				|					ТОГДА ЛОЖЬ
				|				КОГДА ТаблицаДанных.ЗначениеРеквизита1С = НЕОПРЕДЕЛЕНО
				|					ТОГДА ИСТИНА
				|				КОГДА ТаблицаДанных.ЗначениеРеквизита1С ЕСТЬ NULL
				|					ТОГДА ИСТИНА
				|				КОГДА ТаблицаДанных.ЗначениеРеквизита1С.ПометкаУдаления ЕСТЬ NULL
				|					ТОГДА ИСТИНА
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ
				|			ТОГДА ТаблицаДанных.ЗначениеПоУмолчанию
				|		ИНАЧЕ 
				|			ТаблицаДанных.ЗначениеРеквизита1С
				|	КОНЕЦ КАК ЗначениеАтрибутаМаркетплейса,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.ДоступенВыборЗначенияИзСписка
				|			ТОГДА ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию)
				|		КОГДА ВЫБОР
				|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(СТРОКА)
				|					ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = """"
				|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ЧИСЛО)
				|					ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = 0
				|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ДАТА)
				|					ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = ДАТАВРЕМЯ(1, 1, 1)
				|				КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(БУЛЕВО)
				|					ТОГДА ЛОЖЬ
				|				КОГДА ТаблицаДанных.ЗначениеРеквизита1С = НЕОПРЕДЕЛЕНО
				|					ТОГДА ИСТИНА
				|				КОГДА ТаблицаДанных.ЗначениеРеквизита1С ЕСТЬ NULL
				|					ТОГДА ИСТИНА
				|				КОГДА ТаблицаДанных.ЗначениеРеквизита1С.ПометкаУдаления ЕСТЬ NULL
				|					ТОГДА ИСТИНА
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ
				|			ТОГДА ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ИдентификаторЗначенияАтрибутаМаркетплейса,
				|	ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(СТРОКА)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = """"
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ЧИСЛО)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = 0
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ДАТА)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = ДАТАВРЕМЯ(1, 1, 1)
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(БУЛЕВО)
				|			ТОГДА ЛОЖЬ
				|		КОГДА ТаблицаДанных.ЗначениеРеквизита1С = НЕОПРЕДЕЛЕНО
				|			ТОГДА ИСТИНА
				|		КОГДА ТаблицаДанных.ЗначениеРеквизита1С ЕСТЬ NULL
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК НеЗаполненРеквизит1С,
				|	НЕ ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(СТРОКА)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = """"
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ЧИСЛО)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = 0
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ДАТА)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизита1С = ДАТАВРЕМЯ(1, 1, 1)
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(БУЛЕВО)
				|			ТОГДА ЛОЖЬ
				|		КОГДА ТаблицаДанных.ЗначениеРеквизита1С = НЕОПРЕДЕЛЕНО
				|			ТОГДА ИСТИНА
				|		КОГДА ТаблицаДанных.ЗначениеРеквизита1С ЕСТЬ NULL
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ
				|		И ТаблицаДанных.ДоступенВыборЗначенияИзСписка
				|		И СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса ЕСТЬ NULL КАК НеЗаполненоСоответствиеАтрибута,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С = """" КАК НеЗаполненПутьКРеквизиту1С,
				|	ЛОЖЬ КАК ЗначениеАтрибутаЗаданоПользователем");

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&СоединениеРезультирующейТаблицы)", "ИСТИНА
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
				|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса
				|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров))
				|			И (ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса + ""/"" + ТаблицаДанных.ИдентификаторКатегорииМаркетплейса + ""/"" + ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса = СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса)
				|			И ТаблицаДанных.ЗначениеРеквизита1С = СоответствияОбъектовМаркетплейсов.Объект1С
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЕдиницыИзмеренияВесогабаритов КАК ЕдиницыИзмеренияВесогабаритов
				|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = ЕдиницыИзмеренияВесогабаритов.УчетнаяЗаписьМаркетплейса
				|			И ТаблицаДанных.Номенклатура = ЕдиницыИзмеренияВесогабаритов.Номенклатура
				|			И ТаблицаДанных.Характеристика = ЕдиницыИзмеренияВесогабаритов.Характеристика
				|			И ТаблицаДанных.Упаковка = ЕдиницыИзмеренияВесогабаритов.Упаковка
				|			И ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса = ЕдиницыИзмеренияВесогабаритов.ИдентификаторАтрибутаМаркетплейса
				|
				|УПОРЯДОЧИТЬ ПО
				|	Уровень,
				|	ОбязательныйАтрибут УБЫВ,
				|	НаименованиеРодителяАтрибутаМаркетплейса,
				|	ПорядокСортировки,
				|	НаименованиеАтрибутаМаркетплейса");
		Иначе
			// Замена неиспользованных параметров.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "ИСТИНА");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&СоединениеРезультирующейТаблицы)", "ИСТИНА");
		КонецЕсли;
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
			|	ТаблицаДанных.Номенклатура КАК Номенклатура,
			|	ТаблицаДанных.Характеристика КАК Характеристика,
			|	ТаблицаДанных.Упаковка КАК Упаковка
			|ИЗ
			|	ДанныеПубликации КАК ТаблицаДанных
			|
			|ИТОГИ
			|	МИНИМУМ(Упаковка),
			|	МИНИМУМ(ИсточникКатегории)
			|ПО 
			|	УчетнаяЗаписьМаркетплейса,
			|	Номенклатура,
			|	Характеристика";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиЦен(ОбновитьАтрибуты) Экспорт

	РазделительПакетаЗапросов = ОбщегоНазначения.РазделительПакетаЗапросов();

	ИмяТаблицыТоваров = "ТаблицаДанныхПубликации";
	ТекстЗапроса = "";

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ТаблицаДанных.Номенклатура КАК Номенклатура,
			|	ТаблицаДанных.Характеристика КАК Характеристика,
			|	ТаблицаДанных.Упаковка КАК Упаковка
			|ПОМЕСТИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен
			|ИЗ
			|	ТаблицаДанныхПубликации КАК ТаблицаДанных
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	УчетнаяЗаписьМаркетплейса,
			|	Номенклатура,
			|	Упаковка";
		ТекстЗапроса = ТекстЗапроса + РазделительПакетаЗапросов;

		ИмяТаблицыТоваров = "ТаблицаРазличныхДанныхПубликацииДляЦен";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиМаркетплейсовВидыЦен.Ссылка КАК УчетнаяЗаписьМаркетплейса,
		|	УчетныеЗаписиМаркетплейсовВидыЦен.Ссылка.ВалютаУчета КАК ВалютаУчета,
		|	УчетныеЗаписиМаркетплейсовВидыЦен.ИмяНастройки КАК ИмяНастройки,
		|	УчетныеЗаписиМаркетплейсовВидыЦен.ВидЦены КАК ВидЦены
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаРазличныхДанныхПубликацииДляЦен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК УчетныеЗаписиМаркетплейсовВидыЦен
		|		ПО ТаблицаРазличныхДанныхПубликацииДляЦен.УчетнаяЗаписьМаркетплейса = УчетныеЗаписиМаркетплейсовВидыЦен.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ВидыЦен.ВалютаУчета КАК ВалютаУчета,
		|	ВидыЦен.ВидЦены КАК ВидЦены,
		|	ВидыЦен.ИмяНастройки КАК ИмяНастройки,
		|	ИСТИНА КАК Поле1
		|ПОМЕСТИТЬ ПодготовленнаяТаблицаВидовЦен
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
		|		ПО ТаблицаДанных.Номенклатура.КатегорияНоменклатуры = ВидыНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = ВидыЦен.УчетнаяЗаписьМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВидыЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.ЕдиницаИзмерения КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент, 1) КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ),
		|			(ВидЦен, Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					Товары.ВидЦены,
		|					Товары.Номенклатура,
		|					Товары.Характеристика
		|				ИЗ
		|					ПодготовленнаяТаблицаВидовЦен КАК Товары)) КАК ЦеныНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ЦеныНоменклатуры.Номенклатура = СправНоменклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодготовленнаяТаблицаВидовЦен КАК ТаблицаДанных
		|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.ВидЦены КАК ВидЦены,
		|	ТаблицаДанных.ИмяНастройки КАК ИмяНастройки,
		|	ЦеныНоменклатуры.Цена КАК Цена
		|ИЗ
		|	ПодготовленнаяТаблицаВидовЦен КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПодготовленнаяТаблицаВидовЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныНоменклатуры";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДанных", ИмяТаблицыТоваров);


	ТекстЗапросаРегистрСведенийЦеныНоменклатуры = 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИсточникЦенНоменклатуры",	ТекстЗапросаРегистрСведенийЦеныНоменклатуры);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
	"&УсловиеСоединенияЦеныНоменклатурыСрезПоследних",
	ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
	"ТаблицаДанных",
	"ЦеныНоменклатуры", "&ИсточникТоваров.ВидЦены"));


	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = ТекстЗапроса + РазделительПакетаЗапросов +
			"УНИЧТОЖИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиШтрихкодов()

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен
		|ИЗ
		|	ДанныеПубликации КАК ТаблицаДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК Порядок,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Упаковка КАК Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
		|ИЗ
		|	ТаблицаРазличныхДанныхПубликацииДляЦен КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТаблицаТоваров.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ТаблицаТоваров.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И ТаблицаТоваров.Упаковка = ШтрихкодыНоменклатуры.ЕдиницаИзмерения
		|ГДЕ
		|	ТаблицаТоваров.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика,
		|	ТаблицаТоваров.Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод
		|ИЗ
		|	ТаблицаРазличныхДанныхПубликацииДляЦен КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТаблицаТоваров.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ТаблицаТоваров.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И (ШтрихкодыНоменклатуры.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
		|	МИНИМУМ(ШтрихкодыНоменклатуры.Порядок) КАК Порядок
		|ПОМЕСТИТЬ МинимальныйПорядокШтрихкодов
		|ИЗ
		|	ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтрихкодыНоменклатуры.Упаковка,
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
		|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
		|ПОМЕСТИТЬ ТаблицаШтрихкодов
		|ИЗ
		|	МинимальныйПорядокШтрихкодов КАК МинимальныйПорядокШтрихкодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО МинимальныйПорядокШтрихкодов.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И МинимальныйПорядокШтрихкодов.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И МинимальныйПорядокШтрихкодов.Упаковка = ШтрихкодыНоменклатуры.Упаковка
		|			И МинимальныйПорядокШтрихкодов.Порядок = ШтрихкодыНоменклатуры.Порядок
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ШтрихкодыНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МинимальныйПорядокШтрихкодов";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыборкиИзображений(ИмяТаблицыТоваров)
    
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	НоменклатураПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение
	|ПОМЕСТИТЬ ВТПрисоединенныеФайлы
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточникДанных КАК ТаблицаИсточникДанных
	|		ПО НоменклатураПрисоединенныеФайлы.ВладелецФайла = ТаблицаИсточникДанных.Номенклатура
	|ГДЕ
	|	НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	|	И НоменклатураПрисоединенныеФайлы.Расширение В(&РасширенияИзображенийТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла.Владелец,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ДатаСоздания,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ДатаМодификацииУниверсальная,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Расширение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатурыПрисоединенныеФайлы КАК ХарактеристикиНоменклатурыПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточникДанных КАК ТаблицаИсточникДанных
	|		ПО ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла = ТаблицаИсточникДанных.Характеристика
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатурыПрисоединенныеФайлы.ПометкаУдаления
	|	И ХарактеристикиНоменклатурыПрисоединенныеФайлы.Расширение В(&РасширенияИзображенийТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ВТПрисоединенныеФайлы.Номенклатура КАК Номенклатура,
	|	ВТПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	ЕСТЬNULL(СортировкаФайловДляСайта.Сортировка, 9999) КАК Сортировка,
	|	ЕСТЬNULL(СортировкаФайловДляСайта.ВыгружатьНаСайт, ИСТИНА) КАК ВыгружатьНаСайт,
	|	ВТПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ВТПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	ВТПрисоединенныеФайлы.Расширение КАК Расширение
	|ПОМЕСТИТЬ ВТПрисоединенныеФайлыСортировка
	|ИЗ
	|	ВТПрисоединенныеФайлы КАК ВТПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СортировкаФайловДляСайта КАК СортировкаФайловДляСайта
	|		ПО (СортировкаФайловДляСайта.Файл = ВТПрисоединенныеФайлы.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновноеИзображение.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОсновноеИзображение
	|ИЗ
	|	ВТПрисоединенныеФайлыСортировка КАК ОсновноеИзображение
	|ГДЕ
	|	ОсновноеИзображение.ВыгружатьНаСайт = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеИзображение.Сортировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика,
	|	ВТПрисоединенныеФайлыСортировка.ВладелецФайла КАК ВладелецФайла,
	|	ТаблицаДанных.Упаковка КАК Упаковка,
	|	ВТПрисоединенныеФайлыСортировка.Ссылка КАК ОбъектПубликации,
	|	ПРЕДСТАВЛЕНИЕ(ВТПрисоединенныеФайлыСортировка.Ссылка) КАК НаименованиеОбъектаМаркетплейса,
	|	ВТПрисоединенныеФайлыСортировка.Сортировка КАК Сортировка,
	|	ВЫБОР
	|		КОГДА ВТОсновноеИзображение.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоОсновноеИзображение,
	|	ВТПрисоединенныеФайлыСортировка.ВыгружатьНаСайт КАК ВыгружатьНаСайт
	|ПОМЕСТИТЬ Изображения
	|ИЗ
	|	ТаблицаИсточникДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрисоединенныеФайлыСортировка КАК ВТПрисоединенныеФайлыСортировка
	|		ПО ТаблицаДанных.Номенклатура = ВТПрисоединенныеФайлыСортировка.Номенклатура
	|			И (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ВТПрисоединенныеФайлыСортировка.ВладелецФайла) = ТИП(Справочник.Номенклатура)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаДанных.Характеристика = ВТПрисоединенныеФайлыСортировка.ВладелецФайла
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновноеИзображение КАК ВТОсновноеИзображение
	|		ПО (ВТПрисоединенныеФайлыСортировка.Ссылка = ВТОсновноеИзображение.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Изображения.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	Изображения.Номенклатура КАК Номенклатура,
	|	Изображения.Характеристика КАК Характеристика,
	|	Изображения.ВладелецФайла КАК ВладелецФайла,
	|	Изображения.Упаковка КАК Упаковка,
	|	Изображения.ОбъектПубликации КАК ОбъектПубликации,
	|	Изображения.ЭтоОсновноеИзображение КАК ЭтоОсновноеИзображение,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса, Изображения.НаименованиеОбъектаМаркетплейса) КАК НаименованиеОбъектаМаркетплейса,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса, """") КАК ПредставлениеОбъектаМаркетплейса,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта, НЕОПРЕДЕЛЕНО) КАК ДанныеОбъекта,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)) КАК ТекущийСтатус,
	|	ВЫБОР
	|		КОГДА Изображения.ВыгружатьНаСайт = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется)
	|	КОНЕЦ КАК УстанавливаемыйСтатус,
	|	ИСТИНА КАК ДействующееИзображение,
	|	Изображения.Сортировка КАК Сортировка
	|ИЗ
	|	Изображения КАК Изображения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|		ПО Изображения.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
	|			И Изображения.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
	|			И Изображения.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка
	|			И Изображения.ОбъектПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации
	|			И Изображения.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
	|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Изображения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПрисоединенныеФайлы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПрисоединенныеФайлыСортировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновноеИзображение";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИсточникДанных", ИмяТаблицыТоваров);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаКоэффициентовКонвертацииЕдиницВесогабаритов()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаВесогабаритов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаВесогабаритов.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
		|	ТаблицаВесогабаритов.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаВесогабаритов.МеждународноеСокращение КАК МеждународноеСокращение,
		|	ТаблицаВесогабаритов.Числитель КАК Числитель,
		|	ТаблицаВесогабаритов.Знаменатель КАК Знаменатель
		|ПОМЕСТИТЬ ТаблицаВесогабаритовПодготовленная
		|ИЗ
		|	&ТаблицаВесогабаритов КАК ТаблицаВесогабаритов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВесогабаритов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаВесогабаритов.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
		|	ТаблицаВесогабаритов.МеждународноеСокращение КАК МеждународноеСокращение,
		|	ТаблицаВесогабаритов.Числитель КАК Числитель,
		|	ТаблицаВесогабаритов.Знаменатель КАК Знаменатель
		|ПОМЕСТИТЬ ТаблицаВесогабаритов
		|ИЗ
		|	ТаблицаВесогабаритовПодготовленная КАК ТаблицаВесогабаритов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|		ПО ТаблицаВесогабаритов.ИдентификаторЕдиницыИзмерения = СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса
		|			И ТаблицаВесогабаритов.ИдентификаторЗначенияПоУмолчанию = СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаВесогабаритовПодготовленная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	1 КАК КоэффициентПересчета
		|ПОМЕСТИТЬ ЕдиницыИзмеренияВесогабаритов
		|ИЗ
		|	ТаблицаДанныхПубликации КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВесогабаритов КАК ТаблицаВесогабаритов
		|		ПО ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса = ТаблицаВесогабаритов.ИдентификаторАтрибутаМаркетплейса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СправУпаковкиЕдиницыИзмерения
		|		ПО ((ВЫРАЗИТЬ(ТаблицаДанных.ЗначениеРеквизита1С КАК Справочник.ЕдиницыИзмерения)) = СправУпаковкиЕдиницыИзмерения.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаВесогабаритов";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПодготовитьТаблицуДанныхВесогабаритов()

	ТаблицаДанныхВесогабаритов = НоваяТаблицаДанныхВесогабаритов();
	КэшЗначений = Новый Структура;

	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();
	Для Каждого ПутьКРеквизиту Из ПутьКРеквизитам1СПоУмолчанию Цикл
		ИдентификаторЕдиницыИзмерения = Неопределено;
		Если ПутьКРеквизиту.Значение.Свойство("ИдентификаторЕдиницыИзмерения", ИдентификаторЕдиницыИзмерения) Тогда
			ДанныеЕдиницыИзмерения = Неопределено;
			КэшЗначений.Свойство(ИдентификаторЕдиницыИзмерения, ДанныеЕдиницыИзмерения);
			Если ДанныеЕдиницыИзмерения = Неопределено 
				И ПутьКРеквизитам1СПоУмолчанию.Свойство(ИдентификаторЕдиницыИзмерения, ДанныеЕдиницыИзмерения) Тогда
				КэшЗначений.Вставить(ИдентификаторЕдиницыИзмерения, ДанныеЕдиницыИзмерения);
			Иначе
				Продолжить;
			КонецЕсли;

			СписокВыбора = Неопределено;
			ДанныеЕдиницыИзмерения.Свойство("СписокВыбора", СписокВыбора);
			Если СписокВыбора = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого ЗначениеВыбора Из СписокВыбора Цикл
				НоваяСтрока = ТаблицаДанныхВесогабаритов.Добавить(); 
				НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = СтрЗаменить(ПутьКРеквизиту.Ключ, "Атрибут_", "");
				НоваяСтрока.ИдентификаторЕдиницыИзмерения = СтрЗаменить(ИдентификаторЕдиницыИзмерения, "Атрибут_", "");
				НоваяСтрока.ИдентификаторЗначенияПоУмолчанию = ЗначениеВыбора.ИдентификаторЗначенияАтрибутаМаркетплейса;
				НоваяСтрока.МеждународноеСокращение = ЗначениеВыбора.МеждународноеСокращение;
				НоваяСтрока.Числитель = ЗначениеВыбора.Числитель;
				НоваяСтрока.Знаменатель = ЗначениеВыбора.Знаменатель;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаДанныхВесогабаритов;

КонецФункции

Функция СоответствиеАтрибутовВесогабаритовУпаковки()

	СоответствиеАтрибутовВесогабаритовУпаковки = Новый Соответствие; 
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("weight_unit", "ЕдиницаВеса");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("weight", "ВесТовараВУпаковке");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("dimension_unit", "ЕдиницаГабаритов");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("depth", "Глубина");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("height", "Высота");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("width", "Ширина");

	Возврат СоответствиеАтрибутовВесогабаритовУпаковки;

КонецФункции

Процедура ЗаполнитьДанныеПубликацииИзображения(Запись, ИсточникДанных, ИдентификаторОбъектаПубликации = Неопределено, ПолучитьДанные = Ложь)

	Если Не ЗначениеЗаполнено(ИдентификаторОбъектаПубликации) Тогда
		ИдентификаторОбъектаПубликации = ЧислоВСтроку(ХешСуммаПрисоединенногоФайла(ИсточникДанных.ОбъектПубликации));
	КонецЕсли;

	Если ИсточникДанных.ИдентификаторПубликации <> ИдентификаторОбъектаПубликации Или ПолучитьДанные Тогда
		Запись.ИдентификаторПубликации = ИдентификаторОбъектаПубликации;

		ДанныеОбъекта = Неопределено;
		КэшДанныеОбъекта = Новый Структура;

		Если ИсточникДанных.ДанныеОбъекта <> Неопределено Тогда
			ДанныеОбъекта = ИсточникДанных.ДанныеОбъекта.Получить();
			КэшДанныеОбъекта = ИсточникДанных.ДанныеОбъекта.Получить();
		КонецЕсли;

		Если ТипЗнч(ДанныеОбъекта) <> Тип("Структура") Тогда
			ДанныеОбъекта = НовыйСписокАтрибутовИзображения();
		КонецЕсли;

		СтруктураПроверки = Новый Структура("ЭтоОсновноеИзображение");
		ЗаполнитьЗначенияСвойств(СтруктураПроверки, ИсточникДанных);
		Если ЗначениеЗаполнено(СтруктураПроверки.ЭтоОсновноеИзображение) Тогда
			ДанныеОбъекта.Вставить("ЭтоОсновноеИзображение", СтруктураПроверки.ЭтоОсновноеИзображение);
		КонецЕсли;

		Если (ИсточникДанных.ИдентификаторПубликации <> ИдентификаторОбъектаПубликации
			Или ИсточникДанных.УстанавливаемыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется"))
			И Не ПустаяСтрока(ИсточникДанных.ПредставлениеОбъектаМаркетплейса) Тогда

			Если Не ДанныеОбъекта.Свойство("УдаляемыеСсылки") Тогда
				ДанныеОбъекта.Вставить("УдаляемыеСсылки", Новый Соответствие);
			КонецЕсли;

			Если Не ДанныеОбъекта.Свойство("СсылкаНаФайлВСервисеПубличныхСсылок") Тогда
				ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", "");
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеОбъекта.УдаляемыеСсылки.Получить(ИсточникДанных.ПредставлениеОбъектаМаркетплейса)) Тогда
				ДанныеОбъекта.УдаляемыеСсылки.Вставить(ИсточникДанных.ПредставлениеОбъектаМаркетплейса, ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
			КонецЕсли;

			Запись.ПредставлениеОбъектаМаркетплейса = "";
			Запись.ИзмененыРеквизиты = Истина;
			ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок = "";
		КонецЕсли;

		Если ПолучитьДанные И (ИсточникДанных.ИдентификаторПубликации <> ИдентификаторОбъектаПубликации
			Или Не ИдентичныКоллекцииСКлючами(КэшДанныеОбъекта, ДанныеОбъекта, "УдаляемыеСсылки")) Тогда
			Запись.ЕстьИзменения = Истина;
		КонецЕсли;

		Если ПолучитьДанные Тогда
			Запись.ДанныеОбъекта = ДанныеОбъекта;
		Иначе
			Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюПоИзображениям(ТаблицаОбъектовПубликации, ИсточникДанныхЗаполнения, ВыборкаИзображений, ОбновитьДанные = Ложь)

	Если ВыборкаИзображений <> Неопределено Тогда
		ВыборкаИзображений.Сбросить();

		ТаблицаОбъектовПубликации.Колонки.Добавить("ЕстьИзменения", Новый ОписаниеТипов("Булево"));
		ТаблицаОбъектовПубликации.Колонки.Добавить("ТекущийСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon"));
		БезИзмененияАктивностиИзображений = Истина;

		Отбор = Новый Структура;
		Отбор.Вставить("УчетнаяЗаписьМаркетплейса", ИсточникДанныхЗаполнения.УчетнаяЗаписьМаркетплейса);
		Отбор.Вставить("Номенклатура", ИсточникДанныхЗаполнения.Номенклатура);
		Отбор.Вставить("Характеристика", ИсточникДанныхЗаполнения.Характеристика);
		Отбор.Вставить("Упаковка", ИсточникДанныхЗаполнения.Упаковка); 

		ВидОбъектаИзображение = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение");
		СтатусНеИспользуется = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется");

		Счетчик = 0;
		Пока ВыборкаИзображений.НайтиСледующий(Отбор) Цикл
			НоваяСтрокаОбъектаПубликации = ТаблицаОбъектовПубликации.Добавить();
			НоваяСтрокаОбъектаПубликации.ВидОбъектаМаркетплейса = ВидОбъектаИзображение;
			НоваяСтрокаОбъектаПубликации.ПредставлениеОбъектаМаркетплейса = ВыборкаИзображений.ПредставлениеОбъектаМаркетплейса;

			Если ОбновитьДанные Тогда
				НоваяСтрокаОбъектаПубликации.ОбъектПубликации = ВыборкаИзображений.ОбъектПубликации;
				НоваяСтрокаОбъектаПубликации.НаименованиеОбъектаМаркетплейса = ВыборкаИзображений.НаименованиеОбъектаМаркетплейса;
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъектаПубликации, ВыборкаИзображений);
			КонецЕсли;

			НоваяСтрокаОбъектаПубликации.ТекущийСтатус = ВыборкаИзображений.ТекущийСтатус;

			Если ВыборкаИзображений.ДействующееИзображение И Счетчик >= 15 Тогда
				НоваяСтрокаОбъектаПубликации.Статус = СтатусНеИспользуется;
			Иначе
				НоваяСтрокаОбъектаПубликации.Статус = ВыборкаИзображений.УстанавливаемыйСтатус;
			КонецЕсли;

			Если НоваяСтрокаОбъектаПубликации.ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется")
				Или НоваяСтрокаОбъектаПубликации.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется")
				И НоваяСтрокаОбъектаПубликации.ТекущийСтатус <> НоваяСтрокаОбъектаПубликации.Статус Тогда
				БезИзмененияАктивностиИзображений = Ложь;
			КонецЕсли;

			Если ВыборкаИзображений.ДействующееИзображение Тогда
				Счетчик = Счетчик + 1;
			КонецЕсли;

			ИдентификаторПубликации =
					?(НоваяСтрокаОбъектаПубликации.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется"),
					"", ВыборкаИзображений.ИдентификаторПубликации);

			ЗаполнитьДанныеПубликацииИзображения(НоваяСтрокаОбъектаПубликации, ВыборкаИзображений, ИдентификаторПубликации, Истина);

			НоваяСтрокаОбъектаПубликации.ЭтоОсновнойОбъект = НоваяСтрокаОбъектаПубликации.ДанныеОбъекта.ЭтоОсновноеИзображение;
		КонецЦикла;

		Если ОбновитьДанные И БезИзмененияАктивностиИзображений Тогда
			Отбор = Новый Структура("Статус, ЕстьИзменения", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"), Ложь);
			СтрокиБезИзменений = ТаблицаОбъектовПубликации.НайтиСтроки(Отбор);
			Если СтрокиБезИзменений.Количество() > 0 Тогда
				Отбор = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"));
				СтрокиКПубликации = ТаблицаОбъектовПубликации.НайтиСтроки(Отбор);
				Если СтрокиКПубликации.Количество() = СтрокиБезИзменений.Количество() Тогда
					Для Каждого СтрокаБезИзменений Из СтрокиБезИзменений Цикл
						СтрокаБезИзменений.Статус = СтрокаБезИзменений.ТекущийСтатус;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТаблицаОбъектовПубликации.Колонки.Удалить("ЕстьИзменения");
		ТаблицаОбъектовПубликации.Колонки.Удалить("ТекущийСтатус");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюПоЦенам(ДанныеТовара, ИсточникДанныхЗаполнения, Знач ВидыЦенУчетнойЗаписи, ВыборкаЦен)

	Цены = Новый Структура;

	Если ВыборкаЦен <> Неопределено Тогда
		ВыборкаЦен.Сбросить();

		Пока ВыборкаЦен.НайтиСледующий(ИсточникДанныхЗаполнения) Цикл
			ДанныеВидаЦен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВидыЦенУчетнойЗаписи, ВыборкаЦен.ИмяНастройки, Неопределено);
			ВидЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен, "ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
			ТребуетсяПроверкаЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен, "ПроверкаЗаполнения", Ложь);
			ПредставлениеВидаЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен, "ПредставлениеВидаЦены", Ложь);

			СтруктураЦены = Новый Структура;
			СтруктураЦены.Вставить("ВидЦены", ВидЦены);
			СтруктураЦены.Вставить("ПредставлениеВидаЦены", ПредставлениеВидаЦены);
			СтруктураЦены.Вставить("ПроверкаЗаполнения", ТребуетсяПроверкаЗаполнения);
			СтруктураЦены.Вставить("Цена", ВыборкаЦен.Цена);

			Цены.Вставить(ВыборкаЦен.ИмяНастройки, СтруктураЦены);

			ВидыЦенУчетнойЗаписи.Удалить(ВыборкаЦен.ИмяНастройки);
		КонецЦикла;
	КонецЕсли;

	Для Каждого ДанныеВидаЦен Из ВидыЦенУчетнойЗаписи Цикл
		ВидЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен.Значение, "ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
		ТребуетсяПроверкаЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен.Значение, "ПроверкаЗаполнения", Ложь);
		ПредставлениеВидаЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен.Значение, "ПредставлениеВидаЦены", Ложь);

		СтруктураЦены = Новый Структура;
		СтруктураЦены.Вставить("ВидЦены", ВидЦены);
		СтруктураЦены.Вставить("ПредставлениеВидаЦены", ПредставлениеВидаЦены);
		СтруктураЦены.Вставить("ПроверкаЗаполнения", ТребуетсяПроверкаЗаполнения);
		СтруктураЦены.Вставить("Цена", 0);

		Цены.Вставить(ДанныеВидаЦен.Ключ, СтруктураЦены);
	КонецЦикла;

	ДанныеТовара.Вставить("Цены", Цены);

КонецПроцедуры

#КонецОбласти


#Область ЗаполнениеКарточкиТовара

Функция НовоеДеревоАтрибутов()

	ОписаниеТипаСтрока			= Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаБулево			= Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло2			= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2));
	ОписаниеТипаСтрока1000		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(ДлинаСтрокиМагическоеЧисло()));

	ДеревоАтрибутов = Новый ДеревоЗначений;
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторКатегории1С", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("НаименованиеРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ОписаниеНазначенияАтрибута", ОписаниеТипаСтрока);
	ДеревоАтрибутов.Колонки.Добавить("ОбязательныйАтрибут", ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("ЯвляетсяКоллекциейЗначений", ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("ДоступенВыборЗначенияИзСписка", ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("ТипЗначенияАтрибута", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ТипЗначенияАтрибута1С", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ЗначениеПоУмолчанию", ОписаниеТипаСтрока1000);
	ДеревоАтрибутов.Колонки.Добавить("ЗначениеПоУмолчаниюИдентификатор", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("Реквизит1С", ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ПредставлениеРеквизита1С", ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ПредставлениеТипаСоответствияЗначений", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ПредставлениеТипаЗначенияПоУмолчанию", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторОбъектаМетаданных1С", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДеревоАтрибутов.Колонки.Добавить("ТипЗначенияРеквизита1С", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДеревоАтрибутов.Колонки.Добавить("НомерКартинкиКоллекцииТипов", ОписаниеТипаЧисло2);
	ДеревоАтрибутов.Колонки.Добавить("Уровень", ОписаниеТипаЧисло2);
	ДеревоАтрибутов.Колонки.Добавить("ПорядокСортировки", ОписаниеТипаЧисло2);

	Возврат ДеревоАтрибутов;

КонецФункции

Функция НовоеДеревоРеквизитов()

	ОписаниеТипаСтрока50	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока500	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500));
	ОписаниеТипаБулево		= Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло2		= Новый ОписаниеТипов("Число", ,, Новый КвалификаторыЧисла(2));

	ДеревоРеквизитов = Новый ДеревоЗначений;
	ДеревоРеквизитов.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ДеревоРеквизитов.Колонки.Добавить("ПредставлениеРеквизита1С", ОписаниеТипаСтрока500);
	ДеревоРеквизитов.Колонки.Добавить("ОбязательныйАтрибут", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ЯвляетсяКоллекциейЗначений", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ДоступенВыборЗначенияИзСписка", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ТипЗначенияАтрибута", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ТипЗначенияАтрибута1С", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ОписаниеНазначенияАтрибута", Новый ОписаниеТипов("Строка"));
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеРеквизита1С"); // Любая ссылка и простые типы.
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаМаркетплейса", Новый ОписаниеТипов(ПростыеТипы()));
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаМаркетплейсаБулево", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ИдентификаторЗначенияАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ЗначенияАтрибутаМаркетплейса", Новый ОписаниеТипов("СписокЗначений"));
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаЗаполнено", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаЗаданоПользователем", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("НеЗаполненРеквизит1С", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("НеЗаполненАтрибут", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ПредставлениеТипаСоответствияЗначений", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("НомерКартинкиКоллекцииТипов", ОписаниеТипаЧисло2);
	ДеревоРеквизитов.Колонки.Добавить("Уровень", ОписаниеТипаЧисло2);
	ДеревоРеквизитов.Колонки.Добавить("ПорядокСортировки", ОписаниеТипаЧисло2);
	ДеревоРеквизитов.Колонки.Добавить("АдресХранилищаДоступныхЗначений", ОписаниеТипаСтрока500);
	ДеревоРеквизитов.Колонки.Добавить("ИзменилсяРеквизит1С", ОписаниеТипаБулево); // Любая ссылка и простые типы.
	ДеревоРеквизитов.Колонки.Добавить("КэшЗначениеРеквизита1С"); // Любая ссылка и простые типы.

	Возврат ДеревоРеквизитов;

КонецФункции

// Возвращает пустой список свойств для заполнения карточки товара.
// 
// Возвращаемое значение:
//  Структура - свойства для заполнения карточки товара.
//
Функция СписокСвойствТовараДляКарточкиТовара() Экспорт

	ОписаниеТипаСтрока50 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока200 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200));

	СписокСвойствТовар = Новый Структура;
	СписокСвойствТовар.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокСвойствТовар.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СписокСвойствТовар.Вставить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	СписокСвойствТовар.Вставить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	СписокСвойствТовар.Вставить("ИдентификаторПубликации", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("Категория1С", ОписаниеТипаКатегории1С());
	СписокСвойствТовар.Вставить("ИсточникКатегорииМаркетплейса", ОписаниеТипаКатегории1С());
	СписокСвойствТовар.Вставить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("НаименованиеКатегорииМаркетплейса", ОписаниеТипаСтрока250);
	СписокСвойствТовар.Вставить("Валюта", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("Цены", Новый ОписаниеТипов("Структура"));
	СписокСвойствТовар.Вставить("СтавкаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4,1)));
	СписокСвойствТовар.Вставить("Штрихкод", ОписаниеТипаСтрока200);

	Возврат СписокСвойствТовар;

КонецФункции

// Возвращает в зависимости от ожидаемых действий таблицу реквизитов, описание свойств товара, изображения,
// дерево реквизитов, дерево атрибутов, описание ошибок заполнения карточки товара.
//
// Параметры:
//	Параметры - Структура - структура с ключами:
//								ОписаниеТовара - Структура - см. ИнтеграцияСМаркетплейсомOzonСервер.СписокСвойствТовараДляКарточкиТовара(),
//								ДанныеОбъекта - Структура - см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов(),
//								ПараметрыЗаполненияДереваАтрибутов - Структура - 
//															см. ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыДляЗаполненияАтрибутовКатегории(),
//								ОтображаетсяДеревоАтрибутов - Булево - признак отображения дерева атрибутов в карточке товара.
//	УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись маркетплейса.
//	ПараметрыДействий - Структура - структура с действиями, которые ожидается выполнить,
//								см. ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара().
// 
// Возвращаемое значение:
//	Структура:
//			* Категория1С - .
//			* ДанныеДляПубликации - .
//			* ДанныеОбъекта - .
//			* ОбъектыПубликации - .
//			* ДеревоРеквизитов - .
//			* ДанныеКэша - .
//			* ОписаниеДанныхТовара - .
//			* КодОшибки - .
//			* ОписаниеОшибки - .
//
Функция ЗаполнитьДанныеКарточкиТовара(Параметры, УчетнаяЗапись, Знач ПараметрыДействий, ПараметрыКонтекст = Неопределено) Экспорт

	Результат = Новый Структура;

	Событие							= ПараметрыДействий.Событие;
	ПолучитьДанныеТовара			= ПараметрыДействий.ПолучитьДанныеТовара;
	ОбновитьДанныеТовара			= ПараметрыДействий.ОбновитьДанныеТовара;
	ОбновитьКатегориюМаркетплейса	= ПараметрыДействий.ОбновитьКатегориюМаркетплейса;
	ЗаполнитьДеревоРеквизитов		= ПараметрыДействий.ЗаполнитьДеревоРеквизитов;
	ЗаполнитьДеревоАтрибутов		= ПараметрыДействий.ЗаполнитьДеревоАтрибутов;
	ПолучитьОписаниеТовара			= ПараметрыДействий.ПолучитьОписаниеТовара;
	ПроверитьОшибки					= ПараметрыДействий.ПроверитьОшибки;
	ПолучитьОбъектыПубликации		= ПараметрыДействий.ПолучитьОбъектыПубликации
			Или (ПроверитьОшибки И Не ПараметрыДействий.ПолучитьОбъектыПубликации И Не Параметры.Свойство("ОбъектыПубликации"));
	ОбновитьОбъектыПубликации		= ПараметрыДействий.ОбновитьОбъектыПубликации;

	ОписаниеТовара = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОписаниеТовара", Неопределено);
	ДанныеОбъекта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ДанныеОбъекта", Неопределено);
	ОбъектыПубликации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОбъектыПубликации", Неопределено);
	ОтображаетсяДеревоАтрибутов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОтображаетсяДеревоАтрибутов", Ложь);
	ПараметрыЗаполненияДереваАтрибутов =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПараметрыЗаполненияДереваАтрибутов", Неопределено);
    
	Если ПолучитьДанныеТовара Или ОбновитьДанныеТовара Или ПолучитьОбъектыПубликации Тогда

		Если ОписаниеТовара <> Неопределено Тогда
			ТаблицаПубликацииТоваров = НоваяТаблицаПубликацииТоваров();

			СтрокаСОписаниемТовара = ТаблицаПубликацииТоваров.Добавить();
			СтрокаСОписаниемТовара.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
			ЗаполнитьЗначенияСвойств(СтрокаСОписаниемТовара, ОписаниеТовара);
			СтрокаСОписаниемТовара.ДанныеОбъекта = ДанныеОбъекта;
			СтрокаСОписаниемТовара.ДанныеОбъектаПереданы = (Событие <> "ПриОткрытии");

			Если ЗначениеЗаполнено(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) Тогда
				Если ТипЗнч(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры");
				ИначеЕсли ТипЗнч(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры");
				Иначе
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ПустаяСсылка");
				КонецЕсли;
			Иначе
				СтрокаСОписаниемТовара.ИсточникКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ИсточникКатегории");
			КонецЕсли;

			Если ОбновитьКатегориюМаркетплейса Тогда
				СтрокаСОписаниемТовара.ИдентификаторКатегорииМаркетплейса = "";
			КонецЕсли;

			СписокПараметров = СписокПараметровПодготовкиДанныхПубликуемыхТоваров();
			СписокПараметров.ПолучитьАтрибуты = ПолучитьДанныеТовара;
			СписокПараметров.ОбновитьДанные = ОбновитьДанныеТовара Или ОбновитьОбъектыПубликации;
			СписокПараметров.ОбновитьКатегориюМаркетплейса = ОбновитьКатегориюМаркетплейса;
			СписокПараметров.ПолучитьИзображения = ПолучитьОбъектыПубликации;

			ТаблицаТоваров = ПодготовитьДанныеПубликуемыхТоваров(ТаблицаПубликацииТоваров, СписокПараметров, ПараметрыКонтекст);

			СтрокаСНовымОписаниемТовара = ТаблицаТоваров[0];
			ТаблицаПубликацииТоваров = Неопределено;
			ТаблицаТоваров = Неопределено;

			Если ПолучитьДанныеТовара Или ОбновитьДанныеТовара Тогда
				ОписаниеТовара.Валюта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации, "Валюта", "");
				ОписаниеТовара.Цены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации, "Цены", Новый Структура);
				ОписаниеТовара.СтавкаНДС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации, "СтавкаНДС", 0);

				ДанныеОбъекта = СтрокаСНовымОписаниемТовара.ДанныеОбъекта;

				Результат.Вставить("Категория1С", СтрокаСНовымОписаниемТовара.Категория1С);
				Результат.Вставить("ДанныеДляПубликации", СтрокаСНовымОписаниемТовара.ДанныеДляПубликации);
				Результат.Вставить("ДанныеОбъекта", ДанныеОбъекта);

				Если Результат.ДанныеДляПубликации.Количество() = 0 Тогда
					Результат.ДанныеДляПубликации = НовыйСписокДанныхОТоваре();
				КонецЕсли;

				Результат.ДанныеДляПубликации.Свойство("НаименованиеКатегорииМаркетплейса", ОписаниеТовара.НаименованиеКатегорииМаркетплейса);

				Если ОписаниеТовара.Категория1С <> Результат.Категория1С
					Или Результат.ДанныеДляПубликации.ИсточникКатегорииМаркетплейса <> ОписаниеТовара.ИсточникКатегорииМаркетплейса
					Или Результат.ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса <> ОписаниеТовара.ИдентификаторКатегорииМаркетплейса Тогда
					ОписаниеТовара.Категория1С = Результат.Категория1С;

					СтрокаСвойствЗаполнения = "ИсточникКатегорииМаркетплейса, ИдентификаторПубликации,
							|ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса";
					ЗаполнитьЗначенияСвойств(ОписаниеТовара, Результат.ДанныеДляПубликации, СтрокаСвойствЗаполнения);

					Если ЗначениеЗаполнено(ОписаниеТовара.ИсточникКатегорииМаркетплейса) Тогда
						ОписаниеТовара.Вставить("ИдентификаторИсточникаКатегорииМаркетплейса",
								СтрЗаменить(ОписаниеТовара.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_"));
					КонецЕсли;

					Если ОтображаетсяДеревоАтрибутов Тогда
						ЗаполнитьДеревоАтрибутов = Истина;

						Если ПараметрыЗаполненияДереваАтрибутов.Свойство("ДанныеКэша") Тогда
							ПараметрыЗаполненияДереваАтрибутов.ДанныеКэша = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ОбъектыПубликации = СтрокаСНовымОписаниемТовара.ОбъектыПубликации;
			Если ПараметрыДействий.ПолучитьОбъектыПубликации Тогда
				Результат.Вставить("ОбъектыПубликации", ОбъектыПубликации);
			КонецЕсли;
		Иначе
			ДанныеОбъекта = НоваяТаблицаЗначенийРеквизитов();
		КонецЕсли;
	КонецЕсли;

	Если ЗаполнитьДеревоРеквизитов Тогда
		ДеревоРеквизитов = ПодготовитьДеревоРеквизитовТовара(ДанныеОбъекта);
		Результат.Вставить("ДеревоРеквизитов", ДеревоРеквизитов);
	КонецЕсли;

	Если ЗаполнитьДеревоАтрибутов Тогда
		ДанныеКэша = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполненияДереваАтрибутов, "ДанныеКэша", Неопределено);

		ДеревоАтрибутов = НовоеДеревоАтрибутов();
		ЗаполнитьДанныеАтрибутовКатегории(ПараметрыЗаполненияДереваАтрибутов, УчетнаяЗапись, ДеревоАтрибутов, ДанныеКэша);

		Результат.Вставить("ДеревоАтрибутов", ДеревоАтрибутов);
		Результат.Вставить("ДанныеКэша", ДанныеКэша);
	КонецЕсли;

	Если ПолучитьОписаниеТовара Тогда
		Если ДанныеОбъекта = Неопределено Тогда
			ДанныеОбъекта = НоваяТаблицаЗначенийРеквизитов();
		КонецЕсли;

		ОписаниеДанныхТовара = ПолучитьОписаниеТовараМаркетплейса(ДанныеОбъекта, ОписаниеТовара);
		Результат.Вставить("ОписаниеДанныхТовара", ОписаниеДанныхТовара);
	КонецЕсли;

	Если ПроверитьОшибки Тогда
		Результат.Вставить("ЕстьКритичныеОшибки", Ложь);
		Результат.Вставить("КодОшибки", "");
		Результат.Вставить("ОписаниеОшибки", "");

		РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара(ДанныеОбъекта, ОписаниеТовара, ОбъектыПубликации);
		ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполняет проверку заполнения данных карточки товара.
//
// Параметры:
//   * ТаблицаЗначенийРеквизитов - ТаблицаЗначений - см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов().
//   * Параметры - Структура - параметры для проверки
//   * ОбъектыПубликации - ТаблицаЗначений - см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаОбъектовПубликации().
// 
// Возвращаемое значение:
//	Структура:  
//    * ЕстьКритичныеОшибки - Булево - признак наличия ошибок, критичных для публикации товара.
//    * КодОшибки - Строка - код ошибки.
//    * ОписаниеОшибки - Строка - текст с описанием всех ошибок.
//
Функция ПроверитьЗаполнениеКарточкиТовара(ТаблицаЗначенийРеквизитов, Параметры = Неопределено, ОбъектыПубликации = Неопределено)

	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьКритичныеОшибки", Ложь);
	РезультатПроверки.Вставить("КодОшибки", "");
	РезультатПроверки.Вставить("ОписаниеОшибки", "");

	ЕстьКритичныеОшибки = Ложь;

	ШаблонОшибкиЗаполненияВсехАтрибутов = НСтр("ru = 'Не заполнены все атрибуты товара.'");
	ШаблонОшибкиОтсутствияАтрибутов = НСтр("ru = 'Отсутствуют данные об атрибутах товара.'");
	ШаблонОшибкиЗаполненияНеобязательныхАтрибутов = НСтр("ru = 'Не заполнены некоторые необязательные атрибуты товара.'");
	ШаблонОшибкиЗаполненияОбязательныхАтрибутов = НСтр("ru = 'Обнаружены ошибки заполнения обязательных атрибутов товара: %1'");
	ШаблонНезаполненногоРеквизита1С = НСтр("ru = '- для атрибута <%1> не заполнен реквизит 1С <%2>'");
	ШаблонНезаполненногоПутиКРеквизиту1С =
			НСтр("ru = '- для атрибута <%1> в настройках категории не указан путь к реквизиту 1С - требуется настройка соответствия для категории <%2>'");
	ШаблонОтсутствующегоСоответствия = НСтр("ru = '- для атрибута <%1> не задано соответствие для значения <%2> реквизита 1С <%3>'");
	ШаблонОтсутствующегоЗначения = НСтр("ru = '- для атрибута <%1> не задано значение'");

	КодОшибки = НСтр("ru = 'Ошибка заполнения в 1С'");

	МассивОшибок = Новый Массив;
	
	Если ТаблицаЗначенийРеквизитов.Количество() > 0 Тогда

		// Проверка заполнения пути к реквизиту 1С для обязательных атрибутов.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина); 
		Отбор.Вставить("НеЗаполненПутьКРеквизиту1С", Истина);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл 
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНезаполненногоПутиКРеквизиту1С,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")",
					СтрокаСОшибкой.ИсточникКатегорииМаркетплейса));
		КонецЦикла;

		// Проверка заполнения реквизита 1С для обязательных атрибутов.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		Отбор.Вставить("НеЗаполненРеквизит1С", Истина);
		Отбор.Вставить("НеЗаполненПутьКРеквизиту1С", Ложь);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл 
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНезаполненногоРеквизита1С,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")",
					СтрокаСОшибкой.ПредставлениеРеквизита1С));
		КонецЦикла;

		// Проверка отсутствия соответствия для обязательного атрибута.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		Отбор.Вставить("НеЗаполненоСоответствиеАтрибута", Истина);
		Отбор.Вставить("УстановленоЗначениеПоУмолчанию", Ложь);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл 
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОтсутствующегоСоответствия,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")",
					СтрокаСОшибкой.ЗначениеРеквизита1С,
					СтрокаСОшибкой.ПредставлениеРеквизита1С));
		КонецЦикла;

		// Проверка заполнения для обязательных атрибутов, значения которых отредактированы пользователем вручную.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОтсутствующегоЗначения,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")"));
		КонецЦикла;

		// Проверка наличия хотя бы одного заполненного атрибута.
		ВсеАтрибутыНеЗаполнены = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Если СтрокиСОшибками.Количество() = ТаблицаЗначенийРеквизитов.Количество() Тогда
			МассивОшибок.Добавить(ШаблонОшибкиЗаполненияВсехАтрибутов);
			ВсеАтрибутыНеЗаполнены = Истина;
		КонецЕсли;

		// Проверка наличия хотя бы одного незаполненного атрибута.
		Если Не ВсеАтрибутыНеЗаполнены Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("НеЗаполненАтрибут", Истина);
			Отбор.Вставить("ОбязательныйАтрибут", Ложь);
			СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
			Если СтрокиСОшибками.Количество() > 0 Тогда
				Если МассивОшибок.Количество() > 0 Тогда
					МассивОшибок.Добавить(ШаблонОшибкиЗаполненияНеобязательныхАтрибутов);
				Иначе
					РезультатПроверки.ОписаниеОшибки = ШаблонОшибкиЗаполненияНеобязательныхАтрибутов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Заполнение описания ошибки.
		Если МассивОшибок.Количество() > 0 Тогда
			ЕстьКритичныеОшибки = Истина;
		КонецЕсли;
	Иначе
		РезультатПроверки.ЕстьКритичныеОшибки = Истина;
		РезультатПроверки.КодОшибки = КодОшибки; 
		РезультатПроверки.ОписаниеОшибки = ШаблонОшибкиОтсутствияАтрибутов;

		Если ТипЗнч( Параметры ) = Тип( "Структура" ) И Параметры.Свойство( "ИсточникКатегорииМаркетплейса" ) И Не ЗначениеЗаполнено( Параметры.ИсточникКатегорииМаркетплейса ) Тогда
			РезультатПроверки.ОписаниеОшибки = НСтр( "ru = 'Не заполнено соответствие категории 1С и маркетплейса. Настройка в ""Категории, атрибуты категорий и их значения"".'" );
			МассивОшибок.Добавить( ШаблонОшибкиОтсутствияАтрибутов );
			ЕстьКритичныеОшибки = Истина;
		КонецЕсли;

		ЕстьКритичныеОшибки = Истина;
	КонецЕсли;

	Если Параметры <> Неопределено Тогда
		
		// проверим заполнение характеристики
       	НоменклатураРеквизитыЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( Параметры.Номенклатура, "ИспользоватьХарактеристики, ПроверятьЗаполнениеХарактеристики" );
        
        Если НоменклатураРеквизитыЗначения.ИспользоватьХарактеристики = Истина Тогда
        	Если НоменклатураРеквизитыЗначения.ПроверятьЗаполнениеХарактеристики = Истина Тогда
        		Если Не ЗначениеЗаполнено( Параметры.Характеристика ) Тогда
        			// Обязательное заполнение характеристики
        		
        			ЕстьКритичныеОшибки = Истина;
        			
        			Шаблон = НСтр( "ru = 'Для товара <%1> необходимо заполнить характеристику. Для данного товара в справочнике номенклатура включен признак ""Обязательное заполнение характеристики"".'" );
        			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметры.Номенклатура);
        			МассивОшибок.Добавить(СообщениеОбОшибке);
        			
        		КонецЕсли;
        	КонецЕсли;
        Иначе
        	Если ЗначениеЗаполнено(Параметры.Характеристика) Тогда
					// характеристика должна быть пустой
					
        			ЕстьКритичныеОшибки = Истина;
        			Шаблон = НСтр("ru = 'Для товара <%1> заполнена характеристика. Для данного товара в справочнике номенклатура не включен признак ""Использовать характеристики"".'");
        			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметры.Номенклатура);
        			МассивОшибок.Добавить(СообщениеОбОшибке);
        			
        	КонецЕсли; 
        КонецЕсли;

		// Проверка цен.
		Цены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Цены", Неопределено);
		Если Цены <> Неопределено Тогда
			Шаблон1 = НСтр("ru = 'Для вида цены <%1> необходимо установить цену товара.'");
			Шаблон2 = НСтр("ru = 'Не заполнена настройка синхронизации для вида цены выгрузки на площадку маркетплейса <%1>. Необходимо заполнить настройки синхронизации и установить цену для товара по виду цен, указанному в настройках синхронизации.'");

			Для Каждого ДанныеПоВидуЦены Из Цены Цикл
				ДанныеПоЦене = ДанныеПоВидуЦены.Значение;
				Если ДанныеПоЦене.ПроверкаЗаполнения И Не ЗначениеЗаполнено(ДанныеПоЦене.Цена) Тогда
					Если ЗначениеЗаполнено(ДанныеПоЦене.ВидЦены) Тогда
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон1,
								ДанныеПоЦене.ВидЦены);
					Иначе
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон2,
								ДанныеПоВидуЦены.Значение.ПредставлениеВидаЦены); 
					КонецЕсли;

					МассивОшибок.Добавить(СообщениеОбОшибке);
				КонецЕсли;
			КонецЦикла;

			ЕстьКритичныеОшибки = Истина;
		КонецЕсли;

		// Проверка изображений
		Если ОбъектыПубликации <> Неопределено Тогда
			// Проверка изображений.  
			Если ОбъектыПубликации.Колонки.Найти("ВидОбъектаМаркетплейса") <> Неопределено Тогда
				Отбор = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение"));
				СтрокиИзображений = ОбъектыПубликации.НайтиСтроки(Отбор);  
			Иначе 
				СтрокиИзображений = Новый Массив;
			КонецЕсли;
		
			Если СтрокиИзображений.Количество() = 0 Тогда
				Шаблон = НСтр("ru = 'Необходимо настроить изображения товаров в форме ""Состав и сортировка для сайта"" для номенклатуры <%1>. Требуемый формат файлов: %2.'");
				
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,	Параметры.Номенклатура, СтрСоединить(РасширенияИзображений(), ", "));
				МассивОшибок.Добавить(СообщениеОбОшибке);

				ЕстьКритичныеОшибки = Истина;
			КонецЕсли;

		КонецЕсли;

		// Обработка массива ошибок.
		Если МассивОшибок.Количество() > 0 Тогда
			ОшибкиПроверкиДанныхТовара = СтрСоединить(МассивОшибок, Символы.ПС);

			РезультатПроверки.ЕстьКритичныеОшибки = ЕстьКритичныеОшибки;
			РезультатПроверки.КодОшибки = ?(ЕстьКритичныеОшибки, КодОшибки, ""); // Для некритичных ошибок код ошибки не заполняется.
			РезультатПроверки.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки
					+ ?(ПустаяСтрока(РезультатПроверки.ОписаниеОшибки), "", Символы.ПС) + ОшибкиПроверкиДанныхТовара;
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатПроверки;

КонецФункции

Функция ПодготовитьДеревоРеквизитовТовара(ТаблицаРеквизитов)

	ДеревоРеквизитов = НовоеДеревоРеквизитов();

	МассивЗначенийПроверки = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();
	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();
	СоответствиеТипов = СоответствиеТипов();

	Для Каждого ДанныеАтрибута Из ТаблицаРеквизитов Цикл
		Если МассивЗначенийПроверки.Найти(СтрЗаменить(ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса, " ", "_")) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса) Тогда
			Родитель = ДеревоРеквизитов.Строки.Найти(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса,
					"ИдентификаторАтрибутаМаркетплейса", Ложь);

			Если Родитель = Неопределено Тогда
				Родитель = ДеревоРеквизитов.Строки.Добавить();
				Родитель.ИдентификаторКатегорииМаркетплейса = ДанныеАтрибута.ИдентификаторКатегорииМаркетплейса;
				Родитель.ИдентификаторАтрибутаМаркетплейса = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;
				Родитель.НаименованиеАтрибутаМаркетплейса = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
				Родитель.НомерКартинкиКоллекцииТипов = 99;
				Родитель.Уровень = 0;
			КонецЕсли;
		Иначе
			Родитель = ДеревоРеквизитов;
		КонецЕсли;

		СтрокаРеквизитовЗначенияАтрибута = "ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса";

		ЭтоСуществующаяСтрока = Ложь;

		Если ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
			НоваяСтрока = Родитель.Строки.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса");

			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = Родитель.Строки.Добавить();
			Иначе
				ЭтоСуществующаяСтрока = Истина;
			КонецЕсли;

			Если ЗначениеЗаполнено(ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса) Тогда
				Если ДанныеАтрибута.ДоступенВыборЗначенияИзСписка Тогда
					НоваяСтрока.ЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса,
							ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса);
				Иначе
					НоваяСтрока.ЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса);
				КонецЕсли;

				НоваяСтрока.ЗначениеАтрибутаЗаполнено = (НоваяСтрока.ЗначенияАтрибутаМаркетплейса.Количество() > 0);
			КонецЕсли;

			Если ЭтоСуществующаяСтрока Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			НоваяСтрока = Родитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАтрибута, СтрокаРеквизитовЗначенияАтрибута);
			НоваяСтрока.ЗначениеАтрибутаЗаполнено = ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
		КонецЕсли;

		// Заполнение новой строки.

		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАтрибута, , СтрокаРеквизитовЗначенияАтрибута);
		НоваяСтрока.ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(ДанныеАтрибута.ТипЗначенияАтрибута);

		Если НоваяСтрока.ТипЗначенияАтрибута1С = "Булево" Тогда
			НоваяСтрока.ЗначениеАтрибутаМаркетплейсаБулево = НоваяСтрока.ЗначениеАтрибутаМаркетплейса;
		КонецЕсли;

		Если НоваяСтрока.ИзменилсяРеквизит1С Тогда
			НоваяСтрока.КэшЗначениеРеквизита1С = ДанныеАтрибута.ЗначениеРеквизита1С;
			НоваяСтрока.ЗначениеРеквизита1С = ДанныеАтрибута.НовоеЗначениеРеквизита1С;
		КонецЕсли;

		НоваяСтрока.Уровень = 3;

		НоваяСтрока.НомерКартинкиКоллекцииТипов =НомерКартинкиКоллекцииТипов(ДанныеАтрибута.ТипЗначенияАтрибута, НоваяСтрока.ТипЗначенияАтрибута1С,
				НоваяСтрока.ЯвляетсяКоллекциейЗначений, НоваяСтрока.ДоступенВыборЗначенияИзСписка);

		Если НоваяСтрока.ЯвляетсяКоллекциейЗначений И НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Коллекция значений из списка>'");
		ИначеЕсли НоваяСтрока.ЯвляетсяКоллекциейЗначений Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '<Коллекция значений типа %1>'"),
					ПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С));
		ИначеЕсли НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Значение из списка>'");
		Иначе
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = "<" + ПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С) + ">";
		КонецЕсли;

		РеквизитыЗаполнения = Неопределено;
		Если ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, РеквизитыЗаполнения) Тогда
			ПорядокСортировки = 0;
			РеквизитыЗаполнения.Свойство("ПорядокСортировки", ПорядокСортировки);
			НоваяСтрока.ПорядокСортировки = ПорядокСортировки;
		КонецЕсли;
	КонецЦикла;

	ДеревоРеквизитов.Строки.Сортировать("Уровень Возр, ОбязательныйАтрибут Убыв, ПорядокСортировки, НаименованиеАтрибутаМаркетплейса Возр", Истина);
	ДеревоРеквизитов.Колонки.Удалить("ПорядокСортировки");

	Возврат ДеревоРеквизитов;

КонецФункции

Функция ПолучитьОписаниеТовараМаркетплейса(ДанныеОбъекта, ПараметрыЗаполнения)

	ОписаниеДанныхТовара = "";

	Если ДанныеОбъекта = Неопределено
		Или Не ЗначениеЗаполнено(ПараметрыЗаполнения.ИдентификаторПубликации) И ДанныеОбъекта.Количество() = 0 Тогда
		Возврат ПолучитьОписаниеНовогоТовараМаркетплейса();
	КонецЕсли;

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокументАтрибутов = Новый ТабличныйДокумент;

	Макет = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолучитьМакет("ПФ_MXL_ОписаниеТовара");

	ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокГруппыДанных");

	ОбластьМаркера = Макет.ПолучитьОбласть("Маркер|ОбластьМаркера");
	ОбластьПустогоМаркера = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьМаркера");

	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");

	ОбластьСвойствоЗаголовок         = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьЗаголовок");
	ОбластьСвойствоЗначениеЗаполнено = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьЗначение");
	ОбластьСвойствоПустоеЗначение    = Макет.ПолучитьОбласть("СтрокаСвойстваПустоеЗначение|ОбластьЗначение");
	ОбластьСвойствоПримечание        = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьПримечание");

	ОбластьГруппаАтрибутов = Макет.ПолучитьОбласть("СтрокаГруппыАтрибутов");
	
	ОбластьАтрибутГруппыОбязательныйЗаголовок   = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппы|ОбластьЗаголовок");
	ОбластьАтрибутГруппыНеобязательныйЗаголовок = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппыНеобязательного|ОбластьЗаголовок");
	ОбластьАтрибутОбязательныйЗаголовок         = Макет.ПолучитьОбласть("СтрокаАтрибута|ОбластьЗаголовок");
	ОбластьАтрибутНеобязательныйЗаголовок       = Макет.ПолучитьОбласть("СтрокаАтрибутаНеобязательного|ОбластьЗаголовок");
	
	ОбластьАтрибутЗначениеЗаполнено = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппы|ОбластьЗначение");
	ОбластьАтрибутПустоеЗначение    = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппыНеобязательного|ОбластьЗначение");
	ОбластьАтрибутПримечание        = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппы|ОбластьПримечание");

	// Основные данные.
	ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Основные данные'");
	ТабличныйДокумент.Вывести(ОбластьЗаголовка);

	// Представление товара.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Представление товара на площадке маркетплейса'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.ПредставлениеОбъектаМаркетплейса);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не задано представление товара'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);
	
	// Штрихкод.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Штрихкод'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.Штрихкод);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не задан штрихкод'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено ;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);
	
	// Ставка НДС.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Ставка НДС (из номенклатуры)'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.СтавкаНДС);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не задана ставка НДС'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Значение = Значение + " %";
		Область = ОбластьСвойствоЗначениеЗаполнено ;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Категория 1С.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Категория 1С'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.Категория1С);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не определена категория 1С'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Источник категории маркетплейса.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Категория 1С, являющаяся источником категории маркетплейса (по настройкам соответствия)'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.ИсточникКатегорииМаркетплейса);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не определен источник категории маркетплейса'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Категория маркетплейса.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Категория маркетплейса'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = ПараметрыЗаполнения.НаименованиеКатегорииМаркетплейса;
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не определена категория маркетплейса'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Если Не ПустаяСтрока(ПараметрыЗаполнения.ИдентификаторКатегорииМаркетплейса) Тогда
		Значение = Значение + " (id " + ПараметрыЗаполнения.ИдентификаторКатегорииМаркетплейса + ")";
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Идентификатор публикации - идентификатор товара в 1С.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Идентификатор публикации (артикул на площадке маркетплейса)'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	ОбластьСвойствоЗначениеЗаполнено.Параметры.Значение = ПараметрыЗаполнения.ИдентификаторПубликации;
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗначениеЗаполнено);

	// Идентификатор товара на маркетплейсе.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Идентификатор товара на маркетплейсе'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = ПараметрыЗаполнения.ИдентификаторОбъектаМаркетплейса;
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Товар не прошел модерацию'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	Если ДанныеОбъекта.Количество() > 0 Тогда
		СлужебныеАтрибуты = СлужебныеАтрибуты();
		ПредставленияПризнакаОбъединенияКарточекТоваров = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();

		ТабличныйДокументАтрибутов.Вывести(ОбластьРазделитель);
		ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Атрибуты товара'");
		ТабличныйДокументАтрибутов.Вывести(ОбластьЗаголовка);

		ТекущийРодитель = "";

		Для Каждого ДанныеАтрибута Из ДанныеОбъекта Цикл

			МассивЧастейСтрокиОписания = Новый Массив;

			// Вставка признака Объединения карточек.
			ЗначениеСравнения = СтрЗаменить(ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса, " ", "_");
			Если ПредставленияПризнакаОбъединенияКарточекТоваров.Найти(ЗначениеСравнения) <> Неопределено Тогда
				Значение = ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса;
				Примечание = "";

				МассивПримечаний = Новый Массив;
				Если ЗначениеЗаполнено(Значение) Тогда
					Область = ОбластьСвойствоЗначениеЗаполнено;
				Иначе
					Значение = НСтр("ru = 'Не заполнено значение'");
					Область = ОбластьСвойствоПустоеЗначение;

					Примечание = НСтр("ru = 'Причина: %1'");
					Если ДанныеАтрибута.НеЗаполненПутьКРеквизиту1С Тогда
						ЗначениеПримечания = НСтр("ru = 'не указан путь к реквизиту 1С'");
					ИначеЕсли ДанныеАтрибута.НеЗаполненРеквизит1С Тогда
						ШаблонДополнения = НСтр("ru = 'не заполнен реквизит 1С <%1>'");
						ЗначениеПримечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДополнения, ДанныеАтрибута.ПредставлениеРеквизита1С);
					КонецЕсли;
					МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Примечание, ЗначениеПримечания));
				КонецЕсли;

				Если ДанныеАтрибута.ИзменилсяРеквизит1С Тогда
					ТабличныйДокумент.Вывести(ОбластьМаркера);

					ШаблонДополнения = НСтр("ru = 'Изменено значение реквизита 1С - новое значение [ %1 ]'");
					МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДополнения, ДанныеАтрибута.НовоеЗначениеРеквизита1С));
				Иначе
					ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
				КонецЕсли;

				ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Товар объединяется в одну карточку по значению'");
				ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);

				Область.Параметры.Значение = Значение;
				ТабличныйДокумент.Присоединить(Область);

				ОбластьСвойствоПримечание.Параметры.Примечание = СтрСоединить(МассивПримечаний, Символы.ПС);
				ТабличныйДокумент.Присоединить(ОбластьСвойствоПримечание);

				Продолжить;
			КонецЕсли;

			Если ТекущийРодитель <> ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса Тогда
				ТекущийРодитель = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;

				// Вывод группы атрибутов.
				Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
					ОбластьГруппаАтрибутов.Параметры.Заголовок = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
					Если СлужебныеАтрибуты.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса) = Неопределено Тогда
						ОбластьГруппаАтрибутов.Параметры.Заголовок =  ОбластьГруппаАтрибутов.Параметры.Заголовок
								+ " (id " + ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса + ")";
					КонецЕсли;
					ТабличныйДокументАтрибутов.Вывести(ОбластьГруппаАтрибутов);
				КонецЕсли;
			КонецЕсли;

			// Вывод атрибута.
			Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
				Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутГруппыОбязательныйЗаголовок;
				Иначе
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутГруппыНеобязательныйЗаголовок;
				КонецЕсли;
			Иначе
				Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутОбязательныйЗаголовок;
				Иначе
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутНеобязательныйЗаголовок;
				КонецЕсли;
			КонецЕсли;

			Если ДанныеАтрибута.ИзменилсяРеквизит1С Тогда
				ТабличныйДокументАтрибутов.Вывести(ОбластьМаркера);
			Иначе
				ТабличныйДокументАтрибутов.Вывести(ОбластьПустогоМаркера);
			КонецЕсли;

			ИспользуемаяОбластьЗаголовок.Параметры.Заголовок = ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса;
			Если СлужебныеАтрибуты.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса) = Неопределено Тогда
				ИспользуемаяОбластьЗаголовок.Параметры.Заголовок = ИспользуемаяОбластьЗаголовок.Параметры.Заголовок
						+ " (id " + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса + ")";
			КонецЕсли;
			ТабличныйДокументАтрибутов.Присоединить(ИспользуемаяОбластьЗаголовок);

			МассивПримечаний = Новый Массив;
			Если ЗначениеЗаполнено(ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса) Тогда
				ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса;
				Если Не ПустаяСтрока(ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса) Тогда
					ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение
							+ " (id " + ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса + ")";
				КонецЕсли;
				ТабличныйДокументАтрибутов.Присоединить(ОбластьАтрибутЗначениеЗаполнено);

				Если ДанныеАтрибута.ЗначениеАтрибутаЗаданоПользователем Тогда
					МассивПримечаний.Добавить(НСтр("ru = 'Значение заполнено / изменено пользователем'"));
				ИначеЕсли ДанныеАтрибута.УстановленоЗначениеПоУмолчанию Тогда
					МассивПримечаний.Добавить(НСтр("ru = 'Установлено значение по умолчанию'"));
				КонецЕсли;
			Иначе
				Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
					ОбластьАтрибутПустоеЗначение.Параметры.Значение = НСтр("ru = 'Не заполнен обязательный атрибут'");
				Иначе
					ОбластьАтрибутПустоеЗначение.Параметры.Значение = НСтр("ru = 'Не заполнен атрибут'");
				КонецЕсли;
				ТабличныйДокументАтрибутов.Присоединить(ОбластьАтрибутПустоеЗначение);

				Значение = "";
				Если ДанныеАтрибута.НеЗаполненПутьКРеквизиту1С Тогда
					Значение = НСтр("ru = 'не указан путь к реквизиту 1С'");
				ИначеЕсли ДанныеАтрибута.НеЗаполненРеквизит1С Тогда
					Шаблон = НСтр("ru = 'не заполнен реквизит 1С <%1>'");
					Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеАтрибута.ПредставлениеРеквизита1С);
				ИначеЕсли ДанныеАтрибута.НеЗаполненоСоответствиеАтрибута Тогда
					Шаблон = НСтр("ru = 'не заполнено соответствие для значения <%1>'");
					Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеАтрибута.ЗначениеРеквизита1С);
				КонецЕсли;

				МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Причина: %1'"), Значение));
			КонецЕсли;

			Если ДанныеАтрибута.ИзменилсяРеквизит1С Тогда
				Шаблон = НСтр("ru = 'Изменено значение реквизита 1С - новое значение <%1>'");
				МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеАтрибута.НовоеЗначениеРеквизита1С));
			КонецЕсли;

			ОбластьАтрибутПримечание.Параметры.Примечание = СтрСоединить(МассивПримечаний, Символы.ПС);
			ТабличныйДокументАтрибутов.Присоединить(ОбластьАтрибутПримечание);

		КонецЦикла;
	Иначе
		ТабличныйДокументАтрибутов.Вывести(ОбластьРазделитель);
		ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Не обнаружены сохраненные данные по атрибутам.'") + Символы.ПС
				+ НСтр("ru = 'Необходимо заполнить атрибуты товара.'");
		ТабличныйДокументАтрибутов.Вывести(ОбластьЗаголовка);
	КонецЕсли;

	ТабличныйДокумент.Вывести(ТабличныйДокументАтрибутов);
	
	Если ПараметрыЗаполнения.Цены.Количество() > 0 Тогда
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Цены товара'");
		ТабличныйДокумент.Вывести(ОбластьЗаголовка);

		Для Каждого ДанныеЦены Из ПараметрыЗаполнения.Цены Цикл
			ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);

			ДанныеЦены = ДанныеЦены.Значение;

			Если ДанныеЦены.ПроверкаЗаполнения Тогда
				ИспользуемаяОбластьЗаголовок = ОбластьАтрибутОбязательныйЗаголовок;
			Иначе
				ИспользуемаяОбластьЗаголовок = ОбластьАтрибутНеобязательныйЗаголовок;
			КонецЕсли;

			Значение = ДанныеЦены.ВидЦены;
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Значение = НСтр("ru = '<Не задан вид цены>'");
			КонецЕсли;
			ИспользуемаяОбластьЗаголовок.Параметры.Заголовок = Значение;
			ТабличныйДокумент.Присоединить(ИспользуемаяОбластьЗаголовок);

			Если ЗначениеЗаполнено(ДанныеЦены.Цена) Тогда
				ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = Формат(ДанныеЦены.Цена, "ЧДЦ=2; ЧН=; ЧГ=") + " " + ПараметрыЗаполнения.Валюта;
				ТабличныйДокумент.Присоединить(ОбластьАтрибутЗначениеЗаполнено);
			ИначеЕсли ДанныеЦены.ПроверкаЗаполнения Тогда
				ОбластьАтрибутПустоеЗначение.Параметры.Значение = НСтр("ru = 'Не задана цена'");
				ТабличныйДокумент.Присоединить(ОбластьАтрибутПустоеЗначение);
			Иначе
				ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = НСтр("ru = 'Не задана цена'");
				ТабличныйДокумент.Присоединить(ОбластьАтрибутЗначениеЗаполнено);
			КонецЕсли;

			ОбластьАтрибутПримечание.Параметры.Примечание = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вид цены маркетплейса: <%1>'"),
							ДанныеЦены.ПредставлениеВидаЦены);
			ТабличныйДокумент.Присоединить(ОбластьАтрибутПримечание);
		КонецЦикла;
	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

// Возвращает сообщение об отсутствии атрибутов.
// 
// Возвращаемое значение:
//  Строка - форматированная строка.
//
Функция ПолучитьОписаниеНовогоТовараМаркетплейса()

	Значение = НСтр("ru = 'Для нового товара еще не заполнены атрибуты'");
	ОписаниеДанныхТовара = Новый ФорматированнаяСтрока(Значение, Новый Шрифт(, 12, Истина), ЦветаСтиля.ПоясняющийТекст);

	Возврат ОписаниеДанныхТовара;

КонецФункции

// Процедура - Обработка выбора подбор
//
// Параметры:
//  ТаблицаТоваров             - ТаблицаЗначений - см. ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаПубликацииТоваров()
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ОбработкаВыбораПодбор(ТаблицаТоваров, УчетнаяЗапись) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&УчетнаяЗапись КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
	|	ВЫБОР
	|		КОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса ЕСТЬ NULL
	|			ТОГДА СправУчетныеЗаписи.ИсточникКатегории
	|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
	|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.КатегорииНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
	|		ИНАЧЕ СправУчетныеЗаписи.ИсточникКатегории
	|	КОНЕЦ КАК ИсточникКатегории
	|ПОМЕСТИТЬ ДанныеПубликации
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписи
	|		ПО ТаблицаТоваров.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|		ПО ТаблицаТоваров.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
	|			И ТаблицаТоваров.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
	|			И ТаблицаТоваров.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка
	|			И ТаблицаТоваров.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
	|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|ГДЕ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТоваров";

	Запрос.Выполнить();

	ПараметрыЗаполненияТоваров = СписокПараметровПодготовкиДанныхПубликуемыхТоваров();
	ПараметрыЗаполненияТоваров.ПолучитьАтрибуты = Истина;
	ПараметрыЗаполненияТоваров.ПолучитьИзображения = Истина;
	ПараметрыЗаполненияТоваров.ОбновитьДанные = Истина;
	ПараметрыЗаполненияТоваров.ПроверитьОшибкиЗаполнения = Истина;
	
    ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПодборТоваров );
    
	ДанныеПубликации = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполненияТоваров, ПараметрыКонтекст);

	СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ДанныеПубликации, ПараметрыКонтекст);

КонецПроцедуры

#КонецОбласти


#Область ПубликацияОбъектов

Функция СостоянияПубликации()

	СостоянияПубликации = Новый Структура;

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Ложь);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Отправлен на модерацию'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар отправлен на модерацию, получен номер задания публикации'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Отправлен на модерацию'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект отправлен на модерацию вместе с товаром, получен номер задания публикации'"));
	СостоянияПубликации.Вставить("ОтправленНаМодерацию", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Ложь);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'На модерации'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар проходит модерацию'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НаМодерации", ДанныеСостояния); 

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Не создан на витрине'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар не продается, т.к. не прошел модерацию'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НеСоздан", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Не обновлен'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар продается, но не обновлен'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НеОбновлен", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Готов к продаже'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар готов к продаже'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("ГотовКПродаже", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'На модерации'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар проходит модерацию'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Отправлен на модерацию'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект отправлен на модерацию'"));
	СостоянияПубликации.Вставить("ОбъектПубликацииНаМодерации", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Не обновлен'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар продается, но не обновлен'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Не загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект не загружен'"));
	СостоянияПубликации.Вставить("ОбъектПубликацииЗагруженСОшибкой", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Готов к продаже'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар готов к продаже'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен'"));
	СостоянияПубликации.Вставить("ОбъектПубликацииЗагружен", ДанныеСостояния);

	Возврат СостоянияПубликации;

КонецФункции

Функция СоответствиеСостоянийПубликации()

	СостоянияПубликации = СостоянияПубликации();

	// Статус при проверке номера задания публикации товаров.
	СоответствиеСостоянийПубликации = Новый Соответствие;
	СоответствиеСостоянийПубликации.Вставить("pending", СостоянияПубликации.ОтправленНаМодерацию);
	СоответствиеСостоянийПубликации.Вставить("failed", СостоянияПубликации.НеСоздан);
	СоответствиеСостоянийПубликации.Вставить("imported", СостоянияПубликации.НаМодерации);

	// Статус при проверке статуса загрузки изображения.
	СоответствиеСостоянийПубликации.Вставить("imported_object", СостоянияПубликации.ОбъектПубликацииНаМодерации);
	СоответствиеСостоянийПубликации.Вставить("uploaded_object", СостоянияПубликации.ОбъектПубликацииЗагружен);
	СоответствиеСостоянийПубликации.Вставить("failed_object", СостоянияПубликации.ОбъектПубликацииЗагруженСОшибкой);

	// Статус при получении информации о товаре.
	СоответствиеСостоянийПубликации.Вставить("обновляем_товар", СостоянияПубликации.НаМодерации);
	СоответствиеСостоянийПубликации.Вставить("создаем_товар", СостоянияПубликации.НаМодерации);
	СоответствиеСостоянийПубликации.Вставить("на_модерации", СостоянияПубликации.НаМодерации);
	СоответствиеСостоянийПубликации.Вставить("не_обновлен", СостоянияПубликации.НеОбновлен);
	СоответствиеСостоянийПубликации.Вставить("обновление_отклонено_модератором", СостоянияПубликации.НеОбновлен);
	СоответствиеСостоянийПубликации.Вставить("нет_на_складе", СостоянияПубликации.ГотовКПродаже);
	СоответствиеСостоянийПубликации.Вставить("продается", СостоянияПубликации.ГотовКПродаже);
	СоответствиеСостоянийПубликации.Вставить("не_создан", СостоянияПубликации.НеСоздан);
	СоответствиеСостоянийПубликации.Вставить("не_прошел_модерацию", СостоянияПубликации.НеСоздан);

	Возврат СоответствиеСостоянийПубликации;

КонецФункции

Функция НовыйСписокСвойствТовараДляПубликации()

	ДанныеПоАтрибутам = Новый Структура;

	// Основные свойства товара.
	ДанныеПоАтрибутам.Вставить("offer_id", "");
	ДанныеПоАтрибутам.Вставить("name", "");

	ДанныеПоАтрибутам.Вставить("vat", "");
	ДанныеПоАтрибутам.Вставить("currency_code", "");
	ДанныеПоАтрибутам.Вставить("category_id", 0);

	ДанныеПоАтрибутам.Вставить("barcode", "");
	ДанныеПоАтрибутам.Вставить("service_type", "IS_CODE_SERVICE");

	// Данные по упаковке.
	ДанныеПоАтрибутам.Вставить("weight_unit", "");
	ДанныеПоАтрибутам.Вставить("weight", 0);
	ДанныеПоАтрибутам.Вставить("dimension_unit", "");
	ДанныеПоАтрибутам.Вставить("depth", 0);
	ДанныеПоАтрибутам.Вставить("height", 0);
	ДанныеПоАтрибутам.Вставить("width", 0);

	// Список атрибутов
	ДанныеПоАтрибутам.Вставить("attributes", Новый Массив);
	ДанныеПоАтрибутам.Вставить("complex_attributes", Новый Массив);

	// Изображения
	ДанныеПоАтрибутам.Вставить("primary_image", "");
	ДанныеПоАтрибутам.Вставить("images", Новый Массив);

	// Цены
	ДанныеПоАтрибутам.Вставить("old_price", "");
	ДанныеПоАтрибутам.Вставить("price", "");
	ДанныеПоАтрибутам.Вставить("min_price", "");
	ДанныеПоАтрибутам.Вставить("premium_price", "");

	Возврат ДанныеПоАтрибутам;

КонецФункции

Функция АтрибутыТовараДляПубликации(ДанныеТовара, УчетнаяЗапись, ТокенДоступа = "")

	ДанныеДляПубликации = ДанныеТовара.ДанныеДляПубликации;

	ДанныеПоАтрибутам = НовыйСписокСвойствТовараДляПубликации();

	// Основные свойства товара.
	ДанныеПоАтрибутам.offer_id = ДанныеДляПубликации.ИдентификаторПубликации;
	ДанныеПоАтрибутам.name = ДанныеДляПубликации.НаименованиеОбъектаМаркетплейса;

	ДанныеПоАтрибутам.vat = ЧислоВСтроку(ДанныеДляПубликации.СтавкаНДС / 100, Истина);
	ДанныеПоАтрибутам.currency_code = ДанныеДляПубликации.КодВалюты;
	ДанныеПоАтрибутам.category_id = ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса;

	ДанныеПоАтрибутам.barcode = ДанныеТовара.ДанныеДляПубликации.Штрихкод;
	ДанныеПоАтрибутам.service_type = "IS_CODE_SERVICE";

	// Данные по упаковке.
	ДанныеПоАтрибутам.weight_unit = ДанныеДляПубликации.ВесогабаритыУпаковки.ЕдиницаВеса;
	ДанныеПоАтрибутам.weight = ДанныеДляПубликации.ВесогабаритыУпаковки.ВесТовараВУпаковке;
	ДанныеПоАтрибутам.dimension_unit = ДанныеДляПубликации.ВесогабаритыУпаковки.ЕдиницаГабаритов;
	ДанныеПоАтрибутам.depth = ДанныеДляПубликации.ВесогабаритыУпаковки.Глубина;
	ДанныеПоАтрибутам.height = ДанныеДляПубликации.ВесогабаритыУпаковки.Высота;
	ДанныеПоАтрибутам.width = ДанныеДляПубликации.ВесогабаритыУпаковки.Ширина;

	// Заполнение атрибутов товара.
	МассивДанныхПоАтрибутам = Новый Массив;
	МассивДанныхПоКомплекснымАтрибутам = Новый Массив;

	ИдентификаторАтрибута = "";
	КомплексныйАтрибут = Ложь;

	СлужебныеАтрибуты = СлужебныеАтрибуты();

	СтруктураАтрибута = Новый Структура;

	Для Каждого СтрокаЗначенияРеквизита Из ДанныеТовара.ДанныеОбъекта Цикл
		Если СлужебныеАтрибуты.Найти(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса <> ИдентификаторАтрибута Тогда
			Если ЗначениеЗаполнено(ИдентификаторАтрибута) Тогда
				МассивДанныхПоАтрибутам.Добавить(СтруктураАтрибута);

				Если КомплексныйАтрибут Тогда
					МассивДанныхПоКомплекснымАтрибутам.Добавить(СтруктураАтрибута);
				КонецЕсли;
			КонецЕсли;

			СтруктураАтрибута = Новый Структура;
			СтруктураАтрибута.Вставить("complex_id",
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаЗначенияРеквизита.ИдентификаторРодителяАтрибутаМаркетплейса));
			СтруктураАтрибута.Вставить("id",
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса));
			СтруктураАтрибута.Вставить("values", Новый Массив);

			ИдентификаторАтрибута = СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса;
			КомплексныйАтрибут = ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ИдентификаторРодителяАтрибутаМаркетплейса);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса) Тогда 
			СтруктураЗначенияАтрибута = Новый Структура;
			СтруктураЗначенияАтрибута.Вставить("dictionary_value_id",
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса));

			ЗначениеАтрибутаМаркетплейса =
					ПривестиЗначениеКТипуOzon(СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса, СтрокаЗначенияРеквизита.ТипЗначенияАтрибута);
			СтруктураЗначенияАтрибута.Вставить("value", ЗначениеАтрибутаМаркетплейса);

			СтруктураАтрибута.values.Добавить(СтруктураЗначенияАтрибута);
		КонецЕсли
	КонецЦикла;

	Если ЗначениеЗаполнено(ИдентификаторАтрибута) Тогда
		МассивДанныхПоАтрибутам.Добавить(СтруктураАтрибута);

		Если КомплексныйАтрибут Тогда
			МассивДанныхПоКомплекснымАтрибутам.Добавить(СтруктураАтрибута);
		КонецЕсли;
	КонецЕсли;

	ДанныеПоАтрибутам.attributes = МассивДанныхПоАтрибутам;
	ДанныеПоАтрибутам.complex_attributes = МассивДанныхПоКомплекснымАтрибутам;

	// Изображения товара.
	ОсновноеИзображение = "";
	ПерваяПубличнаяСсылка = "";
	МассивИзображений = Новый Массив;

	Отбор = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение"));
	СтрокиИзображений = ДанныеТовара.ОбъектыПубликации.НайтиСтроки(Отбор);

	ОтбиратьОсновноеИзображение = (СтрокиИзображений.Количество() > 1);
	
	СтатусКПубликации = ПредопределенноеЗначение( "Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации" );
	Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл
	
		ПубличнаяСсылка = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;
		
		Если СтрокаИзображения.Статус <> СтатусКПубликации Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ПубличнаяСсылка) Тогда
		
			// Генерация ссылки URL на Яндекс.Диск .
			Если ПустаяСтрока(ТокенДоступа) Тогда
				ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗапись);
			КонецЕсли;

			ДанныеПубличнойСсылки = ИнтеграцияСМаркетплейсамиСервер.ЗагрузитьФайлНаСервис(ТокенДоступа, СтрокаИзображения.ОбъектПубликации);
			
			Если ДанныеПубличнойСсылки.Отказ = Истина Тогда
				// файл не загружен в Яндекс диск
				Продолжить;
			КонецЕсли;
			
			ПубличнаяСсылка = ДанныеПубличнойСсылки.ПубличнаяСсылка;
			СтрокаИзображения.ПредставлениеОбъектаМаркетплейса = ПубличнаяСсылка;
			СтрокаИзображения.ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", ДанныеПубличнойСсылки.ПутьКФайлуНаЯДиске);
			
		КонецЕсли;

		Если Не ПустаяСтрока(ПубличнаяСсылка) Тогда
			Если ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
				ПерваяПубличнаяСсылка = ПубличнаяСсылка;
			КонецЕсли;

			Если ОтбиратьОсновноеИзображение И ПустаяСтрока(ОсновноеИзображение)
				И СтрокаИзображения.ДанныеОбъекта.ЭтоОсновноеИзображение Тогда
				ОсновноеИзображение = ПубличнаяСсылка;
			ИначеЕсли Не ОтбиратьОсновноеИзображение Тогда
				ОсновноеИзображение = ПубличнаяСсылка;
			Иначе
				МассивИзображений.Добавить(ПубличнаяСсылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если ПустаяСтрока(ОсновноеИзображение) И Не ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
		ОсновноеИзображение = ПерваяПубличнаяСсылка;
		ИндексОсновногоИзображения = МассивИзображений.Найти(ПерваяПубличнаяСсылка);
		МассивИзображений.Удалить(ИндексОсновногоИзображения);
	ИначеЕсли ПустаяСтрока(ОсновноеИзображение) Тогда
		Шаблон = НСтр("ru = 'Не удалось получить публичную ссылку на основное изображение товара %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеТовара.Номенклатура);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);

		Возврат НовыйСписокСвойствТовараДляПубликации();
	КонецЕсли;

	ДанныеПоАтрибутам.primary_image = ОсновноеИзображение;
	ДанныеПоАтрибутам.images = МассивИзображений;

	// Цены товара.
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");

	ИнформацияЦеныДоСкидок = Неопределено;
	ИнформацияЦеныСУчетомСкидок = Неопределено;
	ИнформацияЦеныМинимальная = Неопределено;
	ИнформацияЦеныПремиум = Неопределено;

	ДанныеДляПубликации.Цены.Свойство("ВидЦеныДоСкидок", ИнформацияЦеныДоСкидок);
	ДанныеДляПубликации.Цены.Свойство("ВидЦеныСУчетомСкидок", ИнформацияЦеныСУчетомСкидок);
	ДанныеДляПубликации.Цены.Свойство("ВидЦеныМинимальныхЦен", ИнформацияЦеныМинимальная);
	ДанныеДляПубликации.Цены.Свойство("ВидЦеныПремиум", ИнформацияЦеныПремиум);

	Цена_old_price = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныДоСкидок, "Цена", 0);
	Цена_price = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныСУчетомСкидок, "Цена", 0);
	Цена_min_price = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныМинимальная, "Цена", 0);
	Цена_premium_price = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныПремиум, "Цена", 0);

	ДанныеПоАтрибутам.old_price = ЧислоВСтроку(Цена_old_price, Истина);
	ДанныеПоАтрибутам.price = ЧислоВСтроку(Цена_price, Истина);
	ДанныеПоАтрибутам.min_price = ЧислоВСтроку(Цена_min_price, Истина);
	ДанныеПоАтрибутам.premium_price = ЧислоВСтроку(Цена_premium_price, Истина);

	Возврат ДанныеПоАтрибутам;

КонецФункции

Процедура СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ДанныеПубликации, ПараметрыКонтекст = Неопределено) Экспорт

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
		ДанныеПубликацииСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ДанныеПубликации );
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon: Начало:'") + Символы.ПС
		+ НСтр("ru = 'Данные публикации:'") + Символы.ПС + ДанныеПубликацииСтр
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = ПараметрыКонтекст;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ЛогПараметры );
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.ИсточникДанных = ДанныеПубликации;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьМаркетплейса", "УчетнаяЗаписьМаркетплейса");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Упаковка", "Упаковка");
		БлокировкаДанных.Заблокировать();

		ВидОбъекта = Неопределено;
		ОбъектПубликации = Неопределено;
        
        СтатусКПубликации = ПредопределенноеЗначение( "Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации" );
        
		Для Каждого ДанныеТовара Из ДанныеПубликации Цикл
		
			// Создание записи по товару
			Если ДанныеТовара.ОпубликоватьТовар Тогда
				ВидОбъекта = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
				ОбъектПубликации = ДанныеТовара.Номенклатура;

				Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи(); 
				Запись.ВидОбъектаМаркетплейса = ВидОбъекта;
				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				Запись.ОбъектПубликации = Неопределено;
				Запись.Прочитать();

				Если Запись.Выбран() Тогда
					Запись.ДатаОбновления = ТекущаяДатаСеанса();
				Иначе
					Запись.ДатаСоздания = ТекущаяДатаСеанса();
					Запись.ВидОбъектаМаркетплейса = ВидОбъекта;
					Запись.ПредставлениеОбъектаМаркетплейса = ДанныеТовара.ДанныеДляПубликации.НаименованиеОбъектаМаркетплейса;
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара);
				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара.ДанныеДляПубликации);
				Запись.Категория = ДанныеТовара.Категория1С;
				Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеТовара.ДанныеОбъекта);

				Запись.Записать();
			КонецЕсли;

			// Создание записей по изображениям
			ИндексИзображенияВКоллекции = 0;
			Для Каждого ДанныеОбъектаПубликации Из ДанныеТовара.ОбъектыПубликации Цикл
				ОбъектПубликации = ДанныеТовара.Номенклатура;

				Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				ЗаполнитьЗначенияСвойств(Запись, ДанныеОбъектаПубликации);
				Запись.Прочитать();
				
				Если Не Запись.Выбран() Тогда
					Запись.ДатаСоздания = ТекущаяДатаСеанса();
				Иначе
					Запись.ДатаОбновления = ТекущаяДатаСеанса();
					Запись.Состояние = "";
					Запись.ОписаниеСостояния = "";
					Запись.ЗаданиеПубликации = "";
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				ЗаполнитьЗначенияСвойств(Запись, ДанныеОбъектаПубликации);
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъектаПубликации.ДанныеОбъекта);
                
                
                Если ДанныеОбъектаПубликации.Статус = СтатусКПубликации Тогда
                	ИндексИзображенияВКоллекцииСтрока = ЧислоВСтроку(ИндексИзображенияВКоллекции, Истина);
                	// ИдентификаторОбъектаМаркетплейса = Индекс изображения (сортировка) строка, начинается с "0" по
                	Запись.ИдентификаторОбъектаМаркетплейса = ИндексИзображенияВКоллекцииСтрока; 
                	
                	ИндексИзображенияВКоллекции = ИндексИзображенияВКоллекции + 1;
                КонецЕсли;
                
				Запись.Записать();
			КонецЦикла;
		КонецЦикла;

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
			ЛогКомментарий = НСтр("ru = 'СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon: Окончание'");
			ЛогПараметры = ПараметрыКонтекст;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ЛогПараметры );
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();

		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонОшибки = НСтр("ru = 'Не удалось записать %1 ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				ВидОбъекта, ОбъектПубликации);
				
		ТекстОшибки = ТекстОшибки + ":" + ПодробноеПредставлениеОшибки;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
			ЛогКомментарий = НСтр("ru = 'СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon: Ошибка:'") + " " + ТекстОшибки;
			ЛогПараметры = ПараметрыКонтекст;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , Истина, ЛогПараметры );
		КонецЕсли;
		
	КонецПопытки;

КонецПроцедуры

Функция ВыполнитьПубликациюТоваровВСервисе(МассивДанныхПубликации, УчетнаяЗапись, ПараметрыКонтекст = Неопределено )

	ТекстЗапроса = "/v2/product/import";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("items", МассивДанныхПубликации);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Функция ВыполнитьПубликациюТоваров(УчетнаяЗаписьМаркетплейса, ИдентификаторыПубликации = Неопределено, Знач ЛимитПозицийНаИтерацию = 100) Экспорт

	ПараметрыКонтекст = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С" ) );
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		ИдентификаторыПубликацииСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ИдентификаторыПубликации );
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПубликациюТоваров: Отправка на модерацию:'") + Символы.ПС
		+ НСтр("ru = 'Идентификаторы публикации:'") + Символы.ПС + ИдентификаторыПубликацииСтр 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = ПараметрыКонтекст;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ЛогПараметры );
	КонецЕсли;

	Если ЛимитПозицийНаИтерацию > 100 Тогда
		ЛимитПозицийНаИтерацию = 100;
	КонецЕсли;

	Результат = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	ДанныеСчетчикаВыгрузки = ПолучитьСчетчикВыгрузки(УчетнаяЗаписьМаркетплейса);
	ОстатокЗаписей = ДанныеСчетчикаВыгрузки.Остаток;

	Если ОстатокЗаписей = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Превышен лимит публикации товаров в сутки.'");
		Результат.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПубликацииТоваров;
		Результат.ОписаниеОшибки = ТекстОшибки;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗаписьМаркетплейса, Истина );
		Возврат Результат;
	КонецЕсли;

	ТаблицаПроверенныхПозиций = Новый ТаблицаЗначений;
	ТаблицаПроверенныхПозиций.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	ТаблицаПроверенныхПозиций.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПроверенныхПозиций.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПроверенныхПозиций.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаПроверенныхПозиций.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПроверенныхПозиций.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверенныхПозиций.Характеристика КАК Характеристика,
		|	ТаблицаПроверенныхПозиций.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаПроверенныхПозиций
		|ИЗ
		|	&ТаблицаПроверенныхПозиций КАК ТаблицаПроверенныхПозиций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.КатегорииНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		ИНАЧЕ СправУчетныеЗаписи.ИсточникКатегории
		|	КОНЕЦ КАК ИсточникКатегории
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписи
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписи.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроверенныхПозиций КАК ТаблицаПроверенныхПозиций
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = ТаблицаПроверенныхПозиций.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = ТаблицаПроверенныхПозиций.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = ТаблицаПроверенныхПозиций.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = ТаблицаПроверенныхПозиций.Упаковка
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И ТаблицаПроверенныхПозиций.Номенклатура ЕСТЬ NULL
		|	И &УсловиеЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ДанныеПубликации.Номенклатура КАК Номенклатура,
		|	ДанныеПубликации.Характеристика КАК Характеристика,
		|	ДанныеПубликации.Упаковка КАК Упаковка
		|ИЗ
		|	ДанныеПубликации КАК ДанныеПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПроверенныхПозиций";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "100", Формат(ЛимитПозицийНаИтерацию, "ЧГ="));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);

	ПроверятьСоставАтрибутов = Ложь;

	Если ТипЗнч(ИдентификаторыПубликации) = Тип("Массив") И ИдентификаторыПубликации.Количество() > 0 Тогда
		ПроверятьСоставАтрибутов = Ложь;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗапроса",
				"СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации В (&ИдентификаторыПубликации)");
		Запрос.УстановитьПараметр("ИдентификаторыПубликации", ИдентификаторыПубликации);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗапроса", "ИСТИНА");
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	КоличествоОпубликованныхТоваров = 0;
	ЕстьЗаписиКПубликации = Ложь;

	СостоянияПубликации = СостоянияПубликации();

	ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
	ВидОбъектаМаркетплейсаИзображение = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение");
	СтатусЗначениеНеИспользуется = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется");

	ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса);
    
    КоличествоПубликуемыхЭлементов = 0;
    
	Пока ОстатокЗаписей >0 Цикл
		Если ОстатокЗаписей < ЛимитПозицийНаИтерацию Тогда
			ЛимитПозицийНаИтерацию = ОстатокЗаписей;
		КонецЕсли;

		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаПроверенныхПозиций", ТаблицаПроверенныхПозиций);

		НачатьТранзакцию();
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);

			Если РезультатЗапроса.Пустой()Тогда
				ОтменитьТранзакцию();
				Прервать;
			Иначе
				ВыборкаДанных = РезультатЗапроса.Выбрать();
				Если ВыборкаДанных.Количество() = 0 Тогда
					ОтменитьТранзакцию();
					Прервать;
				Иначе
					ОстатокЗаписей = ОстатокЗаписей - ВыборкаДанных.Количество();
					ЕстьЗаписиКПубликации = Истина;
				КонецЕсли;
			КонецЕсли;

			// Блокировка изменения публикуемых товаров.
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВидОбъектаМаркетплейсаТовар);
			ЭлементБлокировкиДанных.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьМаркетплейса", "УчетнаяЗаписьМаркетплейса");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Упаковка", "Упаковка");
			БлокировкаДанных.Заблокировать();

			СписокПараметров = СписокПараметровПодготовкиДанныхПубликуемыхТоваров();
			СписокПараметров.ПолучитьАтрибуты = Истина;
			СписокПараметров.ДляПубликации = Истина;
			СписокПараметров.ПроверятьСоставАтрибутов = ПроверятьСоставАтрибутов;
			СписокПараметров.ПолучитьИзображения = Истина;
			СписокПараметров.ПроверитьОшибкиЗаполнения = Истина;

			ДанныеПубликации = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, СписокПараметров, ПараметрыКонтекст);

			МассивДанныхПубликации = Новый Массив;
			КоличествоПубликуемыхЭлементов = 0;
			
			Для Каждого СтрокаПубликации Из ДанныеПубликации Цикл
				НоваяСтрока = ТаблицаПроверенныхПозиций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПубликации);

				Если СтрокаПубликации.ЕстьКритичныеОшибки Тогда
					Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
					Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар;
					ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
					Запись.ОбъектПубликации = Неопределено;
					Запись.Прочитать();

					Если Запись.Выбран() И Запись.ОписаниеОшибки <> СтрокаПубликации.ОписаниеОшибки Тогда
						ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "КодОшибки, ОписаниеОшибки");
						Запись.Записать();
					КонецЕсли;
				Иначе
					АтрибутыТовара = АтрибутыТовараДляПубликации(СтрокаПубликации, УчетнаяЗаписьМаркетплейса, ТокенДоступа);

					Если АтрибутыТовара.Свойство("ОписаниеОшибки") Тогда
						Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар; 
						ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();

						Если Запись.Выбран() И Не ПустаяСтрока(АтрибутыТовара.ОписаниеОшибки)
							И Запись.ОписаниеОшибки <> АтрибутыТовара.ОписаниеОшибки Тогда
							Запись.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаЗаполненияДанных;
							Запись.ОписаниеОшибки = АтрибутыТовара.ОписаниеОшибки;
							Запись.Записать();

							Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + ?(ПустаяСтрока(Результат.ОписаниеОшибки), "", Символы.ПС)
									+ АтрибутыТовара.ОписаниеОшибки;
						КонецЕсли;
					ИначеЕсли Не ПустаяСтрока(АтрибутыТовара.offer_id) Тогда
						МассивДанныхПубликации.Добавить(АтрибутыТовара);
						КоличествоПубликуемыхЭлементов = КоличествоПубликуемыхЭлементов + 1;
					КонецЕсли;

					Если КоличествоПубликуемыхЭлементов >= ЛимитПозицийНаИтерацию Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если КоличествоПубликуемыхЭлементов > 0 Тогда
				Ответ = ВыполнитьПубликациюТоваровВСервисе(МассивДанныхПубликации, УчетнаяЗаписьМаркетплейса);

				Если Ответ <> Неопределено Тогда
					СтруктураОтвета = Новый Структура("task_id", 0);
					ЗаполнитьЗначенияСвойств(СтруктураОтвета, Ответ);

					КоличествоОпубликованныхТоваров = КоличествоОпубликованныхТоваров + ДанныеПубликации.Количество();

					СостояниеТовара = СостоянияПубликации.ОтправленНаМодерацию;
					ДатаОбновления = ТекущаяДатаСеанса();

					Отбор = Новый Структура("ЕстьКритичныеОшибки", Ложь);
					СтрокиИзмененияСтатуса = ДанныеПубликации.НайтиСтроки(Отбор);
					Для Каждого СтрокаПубликации Из СтрокиИзмененияСтатуса Цикл
					
						ИзображенияСоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzonПоНоменклатуре( СтрокаПубликации.Номенклатура );
					
						Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар; 
						ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();

						Если Запись.Выбран() Тогда
							Запись.ЗаданиеПубликации = ЧислоВСтроку(СтруктураОтвета.task_id);

							Запись.КодОшибки = "";
							Запись.ОписаниеОшибки = "";
							Запись.Статус = СостояниеТовара.Статус;
							Запись.Состояние = СостояниеТовара.Состояние;
							Запись.ОписаниеСостояния = СостояниеТовара.ОписаниеСостояния; 

							ИнформацияЦеныДоСкидок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПубликации.ДанныеДляПубликации.Цены, "ВидЦеныДоСкидок", ИнформацияЦеныДоСкидок);
							ИнформацияЦеныСУчетомСкидок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПубликации.ДанныеДляПубликации.Цены, "ВидЦеныСУчетомСкидок", ИнформацияЦеныСУчетомСкидок);
							ИнформацияЦеныМинимальная = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПубликации.ДанныеДляПубликации.Цены, "ВидЦеныМинимальныхЦен", ИнформацияЦеныМинимальная);

							Запись.ЦенаДоСкидки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныДоСкидок, "Цена", 0);
							Запись.ЦенаСоСкидкой = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныСУчетомСкидок, "Цена", 0);
							Запись.МинимальнаяЦена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныМинимальная, "Цена", 0);
							Запись.ДатаВыгрузкиЦенПродажи = ДатаОбновления;

							Запись.Записать();
						КонецЕсли;

						Отбор = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение"));
						СтрокиИзображений = СтрокаПубликации.ОбъектыПубликации.НайтиСтроки(Отбор);
						// запись статусов Изображений
						Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл 
							Если СтрокаИзображения.Статус = СтатусЗначениеНеИспользуется Тогда
								Продолжить;
							КонецЕсли;
							
							Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
							Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаИзображение;
							ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
							Запись.ОбъектПубликации = СтрокаИзображения.ОбъектПубликации;
							Запись.Прочитать();

							Если Запись.Выбран() Тогда
								ЗаполнитьПубличнуюСсылкуИзображений = (Запись.ПредставлениеОбъектаМаркетплейса <> СтрокаИзображения.ПредставлениеОбъектаМаркетплейса);

								Если Не ЗаполнитьПубличнуюСсылкуИзображений Тогда
									// Запись статуса для изображения конкретного товара.
									Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);
									Запись.ЗаданиеПубликации = ЧислоВСтроку(СтруктураОтвета.task_id);
									
									Запись.Статус = СостояниеТовара.СтатусОбъектаПубликации;
									Запись.Состояние = СостояниеТовара.СостояниеОбъектаПубликации;
									Запись.ОписаниеСостояния = СостояниеТовара.ОписаниеСостоянияОбъектаПубликации;
									
									Запись.Записать();
								Иначе
									// Запись публичной ссылки URL изображения для всех товаров с этим изображением.
									БлокировкаДанных = Новый БлокировкаДанных;
									ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
									ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
									ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВидОбъектаМаркетплейсаИзображение);
									ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", СтрокаПубликации.Номенклатура);
									ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", СтрокаИзображения.ОбъектПубликации);
									БлокировкаДанных.Заблокировать();

									НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
									НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
									НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВидОбъектаМаркетплейсаИзображение);
									НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаПубликации.Номенклатура);
									НаборЗаписей.Отбор.ОбъектПубликации.Установить(СтрокаИзображения.ОбъектПубликации);
									НаборЗаписей.Прочитать();

									Для Каждого Запись Из НаборЗаписей Цикл
										Запись.ПредставлениеОбъектаМаркетплейса = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;//URL

										Если Запись.Характеристика = СтрокаПубликации.Характеристика
											И Запись.Упаковка = СтрокаПубликации.Упаковка Тогда
											// Запись статуса для изображения конкретного товара.
											Запись.ЗаданиеПубликации = ЧислоВСтроку(СтруктураОтвета.task_id);

											Запись.Статус = СостояниеТовара.СтатусОбъектаПубликации;
											Запись.Состояние = СостояниеТовара.СостояниеОбъектаПубликации;
											Запись.ОписаниеСостояния = СостояниеТовара.ОписаниеСостоянияОбъектаПубликации;

											Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);
										Иначе
											ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
											ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", СтрокаИзображения.ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
											Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
										КонецЕсли;
									КонецЦикла;

									НаборЗаписей.Записать();
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Прервать;
			
		КонецПопытки;

		Если КоличествоПубликуемыхЭлементов >= ЛимитПозицийНаИтерацию Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьЗаписиКПубликации И КоличествоОпубликованныхТоваров = 0 Тогда
		Результат.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПубликацииТоваров;
		Результат.ОписаниеОшибки =
				НСтр("ru = 'Не найдены товары, доступные для публикации. Необходимо проверить наличие ошибок в товарах к публикации.'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция СобратьОписаниеОшибокСтатусаДобавления(ДанныеОбОшибках)

	ОписаниеОшибок = Новый Структура("КодОшибки, ОписаниеОшибки");

	Если ЗначениеЗаполнено(ДанныеОбОшибках) Тогда
		ШаблонОшибки1 = НСтр("ru = 'Для значения из атрибута <%1> отсутствует действующий сертификат бренда - необходимо добавить сертификат бренда в личном кабинете. Ошибка: %2 (Техническое описание ошибки: %3. Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки2 = НСтр("ru = 'Обнаружена ошибка в атрибуте <%1>: %2 (Техническое описание ошибки: %3. Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки3 = НСтр("ru = 'Обнаружена ошибка заполнения данных: %2 (Техническое описание ошибки: %3. Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки4 = НСтр("ru = 'Обнаружена ошибка в атрибуте <%1>: %2 (Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки5 = НСтр("ru = 'Обнаружена ошибка заполнения данных: %2 (Код ошибки: %4 (%5), состояние товара <%6>).'");

		МассивКодовОшибок = Новый Массив;
		МассивОписанийОшибок = Новый Массив;

		Для Каждого ДанныеОбОшибке Из ДанныеОбОшибках Цикл
			СтруктураДанныхОбОшибке = Новый Структура;
			СтруктураДанныхОбОшибке.Вставить("code", "");
			СтруктураДанныхОбОшибке.Вставить("message", "");
			СтруктураДанныхОбОшибке.Вставить("attribute_name", "");
			СтруктураДанныхОбОшибке.Вставить("description", "");
			СтруктураДанныхОбОшибке.Вставить("level", "");
			СтруктураДанныхОбОшибке.Вставить("state", "");
			ЗаполнитьЗначенияСвойств(СтруктураДанныхОбОшибке, ДанныеОбОшибке);

			МассивКодовОшибок.Добавить(СтруктураДанныхОбОшибке.code);
			
			ТехническоеОписаниеОшибки = Неопределено;
			СтруктураДанныхОбОшибке.Свойство("message", ТехническоеОписаниеОшибки);

			Если СтрНайти(СтруктураДанныхОбОшибке.code, "brand_in_stop_list") Тогда
				ШаблонОшибки = ШаблонОшибки1;
			ИначеЕсли Не ЗначениеЗаполнено(ТехническоеОписаниеОшибки) Тогда
				ШаблонОшибки = ?(ПустаяСтрока(СтруктураДанныхОбОшибке.attribute_name), ШаблонОшибки5, ШаблонОшибки4);
			Иначе
				ШаблонОшибки = ?(ПустаяСтрока(СтруктураДанныхОбОшибке.attribute_name), ШаблонОшибки3, ШаблонОшибки2);
			КонецЕсли;

			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					СтруктураДанныхОбОшибке.attribute_name,
					СтруктураДанныхОбОшибке.description,
					ТехническоеОписаниеОшибки,
					СтруктураДанныхОбОшибке.code,
					СтруктураДанныхОбОшибке.level,
					СтруктураДанныхОбОшибке.state);

			МассивОписанийОшибок.Добавить(ОписаниеОшибки);
		КонецЦикла;

		ОписаниеОшибок.КодОшибки = СтрСоединить(МассивКодовОшибок, ", ");
		ОписаниеОшибок.ОписаниеОшибки = СтрСоединить(МассивОписанийОшибок, Символы.ПС);
	КонецЕсли;

	Возврат ОписаниеОшибок;

КонецФункции

Функция ВыполнитьПроверкуЗаданияПубликацииТоваровВСервисе(ЗаданиеПубликации, УчетнаяЗаписьМаркетплейса)

	ТекстЗапроса = "/v1/product/import/info";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("task_id", ЗаданиеПубликации);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	
	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета
	, , ПараметрыКонтекст);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Процедура ВыполнитьПроверкуЗаданияПубликацииТоваров(УчетнаяЗаписьМаркетплейса, ИдентификаторыПубликации = Неопределено)

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПроверкуЗаданияПубликацииТоваров:'") + Символы.ПС
		+ НСтр("ru = 'Учетная запись:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( УчетнаяЗаписьМаркетплейса ) 
		+ НСтр("ru = 'Идентификаторы публикации:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ИдентификаторыПубликации ) 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса );
	КонецЕсли;

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗаданиеПубликации КАК ЗаданиеПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗаданиеПубликации <> """"
		|	И ИСТИНА
		|ИТОГИ ПО
		|	ЗаданиеПубликации";

	Если ТипЗнч(ИдентификаторыПубликации) = Тип("Массив") И ИдентификаторыПубликации.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации В (&ИдентификаторыПубликации)");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	Запрос.Текст = ТекстЗапроса;

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();  
	
	ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");

	ВыборкаЗаданийПубликации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаданийПубликации.Следующий() Цикл
		Ответ = ВыполнитьПроверкуЗаданияПубликацииТоваровВСервисе(ВыборкаЗаданийПубликации.ЗаданиеПубликации, УчетнаяЗаписьМаркетплейса);

		Если Ответ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтвета = Новый Структура("items", Новый Массив);
		ЗаполнитьЗначенияСвойств(СтруктураОтвета, Ответ);
		
		Если Не ЗначениеЗаполнено(СтруктураОтвета.items) Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаТоваров = ВыборкаЗаданийПубликации.Выбрать();
		
		Для Каждого ДанныеТовара Из СтруктураОтвета.items Цикл
			СтруктураДанныхТовара = Новый Структура;
			СтруктураДанныхТовара.Вставить("status", "");
			СтруктураДанныхТовара.Вставить("offer_id", "");
			СтруктураДанныхТовара.Вставить("product_id", 0);
			СтруктураДанныхТовара.Вставить("errors", Новый Массив);
			ЗаполнитьЗначенияСвойств(СтруктураДанныхТовара, ДанныеТовара);
			
			ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураДанныхТовара.status];
			
			Если ТекущееСостояние = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаТоваров.Сбросить();
			
			Отбор = Новый Структура("ИдентификаторПубликации", СтруктураДанныхТовара.offer_id);
			Если ВыборкаТоваров.НайтиСледующий(Отбор) Тогда 
				ОписаниеОшибок = СобратьОписаниеОшибокСтатусаДобавления(СтруктураДанныхТовара.errors);
				
				Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
				Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
				Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар;
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаТоваров, "Номенклатура, Характеристика, Упаковка"); 
				Запись.ОбъектПубликации = Неопределено;
				Запись.Прочитать();
				
				Если Запись.Выбран() Тогда
					Запись.Статус = ТекущееСостояние.Статус;
					Запись.Состояние = ТекущееСостояние.Состояние;
					Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостояния;
					Запись.КодОшибки = ОписаниеОшибок.КодОшибки;
					Запись.ОписаниеОшибки = ОписаниеОшибок.ОписаниеОшибки;
					
					Если ЗначениеЗаполнено(СтруктураДанныхТовара.product_id) Тогда
						Запись.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(СтруктураДанныхТовара.product_id);
					КонецЕсли;
					
					Если ТекущееСостояние.ОчищатьЗаданиеПубликации Тогда
						Запись.ЗаданиеПубликации = "";
					КонецЕсли;
					
					Запись.Записать();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция НовыйСписокПараметровТовараДляПолученияОписания()

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ИдентификаторПубликации", "");
	СписокПараметров.Вставить("ИдентификаторОбъектаМаркетплейса", "");
	СписокПараметров.Вставить("ИдентификаторSKU", "");

	Возврат СписокПараметров;

КонецФункции

Функция ПолучитьИнформациюОТовареВСервисе(ПараметрыТовара, УчетнаяЗапись)

	ТекстЗапроса = "/v2/product/info";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("offer_id", ПараметрыТовара.ИдентификаторПубликации);
	ПараметрыЗапроса.Вставить("product_id", ПараметрыТовара.ИдентификаторОбъектаМаркетплейса);
	ПараметрыЗапроса.Вставить("sku", ПараметрыТовара.ИдентификаторSKU);

	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("created_at");
	МассивПолейТипаДата.Добавить("state_updated_at");

	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = МассивПолейТипаДата;
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаТоваровВ1С );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Функция ПолучитьОписаниеТовараВСервисе(ПараметрыТовара, УчетнаяЗапись)

	ТекстЗапроса = "/v1/product/info/description";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("offer_id", ПараметрыТовара.ИдентификаторПубликации);
	ПараметрыЗапроса.Вставить("product_id", ПараметрыТовара.ИдентификаторОбъектаМаркетплейса);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Процедура ВыполнитьОбновлениеИнформацииПоТоварам(УчетнаяЗапись)

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьОбновлениеИнформацииПоТоварам:'") + Символы.ПС
		+ НСтр("ru = 'Учетная запись:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( УчетнаяЗапись ) 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись );
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВЫБОР
		|		КОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторFBOSKU = """"
		|			ТОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторFBSSKU
		|		ИНАЧЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторFBOSKU
		|	КОНЕЦ КАК ИдентификаторSKU
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации))
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса <> """"";

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();

	ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");

	ВыборкаТоваров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТоваров.Следующий() Цикл
		СписокПараметров = НовыйСписокПараметровТовараДляПолученияОписания();
		СписокПараметров.ИдентификаторПубликации = ВыборкаТоваров.ИдентификаторПубликации;
		СписокПараметров.ИдентификаторОбъектаМаркетплейса = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВыборкаТоваров.ИдентификаторОбъектаМаркетплейса);
		СписокПараметров.ИдентификаторSKU = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВыборкаТоваров.ИдентификаторSKU);

		ИнформацияОТоваре = ПолучитьИнформациюОТовареВСервисе(СписокПараметров, УчетнаяЗапись);

		ОписаниеТовара = ПолучитьОписаниеТовараВСервисе(СписокПараметров, УчетнаяЗапись);

		Если ИнформацияОТоваре <> Неопределено Тогда

			СтруктураИнформацииОТоваре = Новый Структура;
			СтруктураИнформацииОТоваре.Вставить("status", Новый Структура);
			СтруктураИнформацииОТоваре.Вставить("created_at", Дата(1,1,1));
			СтруктураИнформацииОТоваре.Вставить("fbo_sku", 0);
			СтруктураИнформацииОТоваре.Вставить("fbs_sku", 0);
			СтруктураИнформацииОТоваре.Вставить("price_index", "");
			СтруктураИнформацииОТоваре.Вставить("sources", Новый Массив);
			ЗаполнитьЗначенияСвойств(СтруктураИнформацииОТоваре, ИнформацияОТоваре);

			СтруктураСтатуса = СтруктураИнформацииОТоваре.status;
			
            СтатусТовараДляОбработки = ?(ПустаяСтрока(СтруктураСтатуса.state_description), СтруктураСтатуса.state_name, СтруктураСтатуса.state_description);
			СтатусТовара = НРег(СтрЗаменить(СтатусТовараДляОбработки, " ", "_"));
			ТекущееСостояние = СоответствиеСостоянийПубликации[СтатусТовара];

			Если ТекущееСостояние = Неопределено Тогда
				ТекущееСостояние = СоответствиеСостоянийПубликации["на_модерации"];
			КонецЕсли;

			КодОшибки = "";
			ОписаниеОшибки = "";

			ОписаниеОшибок = СобратьОписаниеОшибокСтатусаДобавления(СтруктураСтатуса.item_errors);
			Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
				КодОшибки = ОписаниеОшибок.КодОшибки;
				ОписаниеОшибки = ОписаниеОшибок.ОписаниеОшибки;
			КонецЕсли;

			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
			Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар;
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаТоваров, "Номенклатура, Характеристика, Упаковка");
			Запись.ОбъектПубликации = Неопределено;
			Запись.Прочитать();

			Если Запись.Выбран() Тогда
				ДатаСозданияНаМаркетплейсе = СтруктураИнформацииОТоваре.created_at;
				ДатаОбновленияНаМаркетплейсе = СтруктураСтатуса.state_updated_at;

				Запись.КодОшибки = КодОшибки;
				Запись.ОписаниеОшибки = ОписаниеОшибки;

				Запись.ДатаСозданияНаМаркетплейсе = ДатаСозданияНаМаркетплейсе;
				Запись.ДатаОбновленияНаМаркетплейсе = ДатаОбновленияНаМаркетплейсе;
				Запись.ИдентификаторFBOSKU = ЧислоВСтроку(СтруктураИнформацииОТоваре.fbo_sku);
				Запись.ИдентификаторFBSSKU = ЧислоВСтроку(СтруктураИнформацииОТоваре.fbs_sku);
				Запись.ЦеновойИндекс = СтруктураИнформацииОТоваре.price_index;

				Запись.Статус = ТекущееСостояние.Статус;
				Запись.Состояние = ТекущееСостояние.Состояние;
				Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостояния;

				Запись.ЦеновойИндекс = СтруктураИнформацииОТоваре.price_index;

				МассивИсточниковСхожихПредложений = Новый Массив;

				Для Каждого ИсточникПредложения Из СтруктураИнформацииОТоваре.sources Цикл
					СтруктураИсточникаПредложения = Новый Структура;
					СтруктураИсточникаПредложения.Вставить("sku", 0);
					СтруктураИсточникаПредложения.Вставить("is_enabled", Ложь);
					СтруктураИсточникаПредложения.Вставить("source", "");
					ЗаполнитьЗначенияСвойств(СтруктураИсточникаПредложения, ИсточникПредложения);

					ИсточникиСхожихПредложений = Новый Структура;
					ИсточникиСхожихПредложений.Вставить("УчитываетсяПриРасчетеРыночногоЗначения", СтруктураИсточникаПредложения.is_enabled);
					ИсточникиСхожихПредложений.Вставить("ИдентификаторSKU", ЧислоВСтроку(СтруктураИсточникаПредложения.sku));
					ИсточникиСхожихПредложений.Вставить("СсылкаНаТовар", СтруктураИсточникаПредложения.source);

					МассивИсточниковСхожихПредложений.Добавить(ИсточникиСхожихПредложений);
				КонецЦикла;

				Если МассивИсточниковСхожихПредложений.Количество() > 0 Тогда
					Запись.ИсточникиСхожихПредложений = Новый ХранилищеЗначения(МассивИсточниковСхожихПредложений);
				Иначе
					Запись.ИсточникиСхожихПредложений = Неопределено;
				КонецЕсли;

				Если ОписаниеТовара <> Неопределено Тогда
					СтруктураОписанияТовара = Новый Структура;
					СтруктураОписанияТовара.Вставить("name", "");
					СтруктураОписанияТовара.Вставить("description", "");
					ЗаполнитьЗначенияСвойств(СтруктураОписанияТовара, ОписаниеТовара);

					Описание = ?(ПустаяСтрока(СтруктураОписанияТовара.description), Запись.ОписаниеОбъектаМаркетплейса, СтруктураОписанияТовара.description);
					Запись.ОписаниеОбъектаМаркетплейса = Описание;

					Название = ?(ПустаяСтрока(СтруктураОписанияТовара.name), Запись.ПредставлениеОбъектаМаркетплейса, СтруктураОписанияТовара.name);
					Запись.ПредставлениеОбъектаМаркетплейса = Название;
				КонецЕсли;

				Если ТекущееСостояние.ОчищатьЗаданиеПубликации Тогда
					Запись.ЗаданиеПубликации = "";
				КонецЕсли;

				Запись.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ВыполнитьПубликациюИзображенийТоваровВСервисе(ПараметрыИзображения, УчетнаяЗапись)

	ТекстЗапроса = "/v1/product/pictures/import";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("product_id", ПараметрыИзображения.ИдентификаторТовара);
	ПараметрыЗапроса.Вставить("images", ПараметрыИзображения.Изображения);
	ПараметрыЗапроса.Вставить("images360", ПараметрыИзображения.Изображения360);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.pictures");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаИзображенийИз1С );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст );

	Возврат РезультатЗапроса.Результат;

КонецФункции

Функция ВыполнитьПубликациюИзображенийТоваров(УчетнаяЗапись) Экспорт

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПубликациюИзображенийТоваров'") + Символы.ПС
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаИзображенийИз1С" ) );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПубличнаяСсылка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта КАК ДанныеОбъекта
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Упаковка
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса <> """")
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса
		|ИТОГИ ПО
		|	ИдентификаторОбъектаМаркетплейса";

	СоответствияПубликацииИзображений = Новый Соответствие;

	ТаблицаЗаписиИзменений = Новый ТаблицаЗначений;
	ТаблицаЗаписиИзменений.Колонки.Добавить("ИдентификаторТовара", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ВидОбъектаМаркетплейса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ОбъектПубликации" );
	ТаблицаЗаписиИзменений.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ДанныеОбъекта", Новый ОписаниеТипов("Структура"));

	ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗапись);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	СтатусКПубликации = ПредопределенноеЗначение( "Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации" );
	
	ВыборкаИдентификаторовТоваров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторовТоваров.Следующий() Цикл
		МассивИзображений = Новый Массив;
		МассивИзображений360 = Новый Массив;

		ЕстьОсновноеИзображение = Ложь;
		ПерваяПубличнаяСсылка = "";

		ВыборкаИзображений = ВыборкаИдентификаторовТоваров.Выбрать();
		Пока ВыборкаИзображений.Следующий() Цикл
			ДанныеОбъекта = ВыборкаИзображений.ДанныеОбъекта.Получить();

			ПубличнаяСсылка = ВыборкаИзображений.ПубличнаяСсылка;
			
			Если ПустаяСтрока(ПубличнаяСсылка) Тогда
				// Генерация ссылки на Яндекс.Диск.
				ДанныеПубличнойСсылки = ИнтеграцияСМаркетплейсамиСервер.ЗагрузитьФайлНаСервис(ТокенДоступа, ВыборкаИзображений.ОбъектПубликации);
				ПубличнаяСсылка = ДанныеПубличнойСсылки.ПубличнаяСсылка;
				ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", ДанныеПубличнойСсылки.ПутьКФайлуНаЯДиске);
			КонецЕсли;

			Если ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
				ПерваяПубличнаяСсылка = ПубличнаяСсылка;
			КонецЕсли;

			Если ДанныеОбъекта.ЭтоИзображение360 Тогда
				МассивИзображений360.Добавить(ПубличнаяСсылка);
			Иначе
				Если ДанныеОбъекта.ЭтоОсновноеИзображение Тогда
					ЕстьОсновноеИзображение = Истина;
					МассивИзображений.Вставить(0, ПубличнаяСсылка);
				Иначе
					МассивИзображений.Добавить(ПубличнаяСсылка);
				КонецЕсли;
			КонецЕсли;

			// Сохранить данные для записи изменений в регистр статусов публикации.
			СтрокаИзменений = ТаблицаЗаписиИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзменений, ВыборкаИзображений, , "ДанныеОбъекта");
			СтрокаИзменений.ИдентификаторТовара = ВыборкаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса;
			СтрокаИзменений.ПредставлениеОбъектаМаркетплейса = ПубличнаяСсылка;
			СтрокаИзменений.ДанныеОбъекта = ДанныеОбъекта;
		КонецЦикла;

		Если Не ЕстьОсновноеИзображение И Не ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
			ИндексОсновногоИзображения = МассивИзображений.Найти(ПерваяПубличнаяСсылка);
			Если ИндексОсновногоИзображения <> Неопределено Тогда
				МассивИзображений.Удалить(ИндексОсновногоИзображения);
				МассивИзображений.Вставить(0, ПерваяПубличнаяСсылка);
			КонецЕсли;
		КонецЕсли;

		// Создать соответствие для публикации.
		Если МассивИзображений.Количество() Или МассивИзображений360.Количество() > 0 Тогда
			СтруктураПубликации = Новый Структура;
			СтруктураПубликации.Вставить("Изображения", МассивИзображений);
			СтруктураПубликации.Вставить("Изображения360", МассивИзображений360);

			СоответствияПубликацииИзображений.Вставить(ВыборкаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса, СтруктураПубликации);
		КонецЕсли;
	КонецЦикла;

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();

	Для Каждого СоответствиеПубликации Из СоответствияПубликацииИзображений Цикл
		ИдентификаторТовара = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СоответствиеПубликации.Ключ);

		// Публикация изображений.
		ПараметрыИзображения = Новый Структура;
		ПараметрыИзображения.Вставить("ИдентификаторТовара", ИдентификаторТовара);
		ПараметрыИзображения.Вставить("Изображения", СоответствиеПубликации.Значение.Изображения);
		ПараметрыИзображения.Вставить("Изображения360", СоответствиеПубликации.Значение.Изображения360);

		Результат = ВыполнитьПубликациюИзображенийТоваровВСервисе(ПараметрыИзображения, УчетнаяЗапись);

		// Запись изменений в регистр статусов публикации.
		Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
			ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
			
			Для Каждого ДанныеРезультата Из Результат Цикл
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("state", "");
				СтруктураРезультата.Вставить("url", "");
				ЗаполнитьЗначенияСвойств(СтруктураРезультата, ДанныеРезультата);

				ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураРезультата.state + "_object"];

				Если ТекущееСостояние = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ИндексИзображения = ЧислоВСтроку(Результат.Найти(ДанныеРезультата), Истина);

				ПубличнаяСсылка = СтруктураРезультата.url;

				УстановитьСтатусТовара = Истина;

				Отбор = Новый Структура("ИдентификаторТовара, ПредставлениеОбъектаМаркетплейса", ЧислоВСтроку(ИдентификаторТовара), ПубличнаяСсылка);
				СтрокиИзображения = ТаблицаЗаписиИзменений.НайтиСтроки(Отбор);
				Для Каждого СтрокаИзображения Из СтрокиИзображения Цикл
					Если УстановитьСтатусТовара Тогда
						Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
						Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар; 
						ЗаполнитьЗначенияСвойств(Запись, СтрокаИзображения, "Номенклатура, Характеристика, Упаковка");
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();

						Запись.Статус = ТекущееСостояние.Статус;
						Запись.Состояние = ТекущееСостояние.Состояние;
						Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостояния;

						Запись.Записать();

						УстановитьСтатусТовара = Ложь;
					КонецЕсли;
			
					Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
					Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
					Запись.ВидОбъектаМаркетплейса = СтрокаИзображения.ВидОбъектаМаркетплейса;
					ЗаполнитьЗначенияСвойств(Запись, СтрокаИзображения, "Номенклатура, Характеристика, Упаковка");
					Запись.ОбъектПубликации = СтрокаИзображения.ОбъектПубликации;
					Запись.Прочитать();

					ЗаполнитьПубличнуюСсылкуИзображений = (Запись.ПредставлениеОбъектаМаркетплейса <> СтрокаИзображения.ПредставлениеОбъектаМаркетплейса);

					Если Не ЗаполнитьПубличнуюСсылкуИзображений Тогда
						// Запись статуса для изображения конкретного товара.
						Запись.ПредставлениеОбъектаМаркетплейса = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;
						Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);

						Запись.ИдентификаторОбъектаМаркетплейса = ИндексИзображения;
						Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
						Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
						Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;

						Запись.Записать();
					Иначе
						// Запись публичной ссылки изображения для всех товаров с этим изображением.
						НачатьТранзакцию();
						Попытка

							// Блокировка изменения публикуемых изображений.
							БлокировкаДанных = Новый БлокировкаДанных;
							ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
							ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
							ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
							ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", СтрокаИзображения.ВидОбъектаМаркетплейса);
							ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", СтрокаИзображения.Номенклатура);
							ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", СтрокаИзображения.ОбъектПубликации);
							БлокировкаДанных.Заблокировать();

							НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
							НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(СтрокаИзображения.ВидОбъектаМаркетплейса);
							НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаИзображения.Номенклатура);
							НаборЗаписей.Отбор.ОбъектПубликации.Установить(СтрокаИзображения.ОбъектПубликации);
							НаборЗаписей.Прочитать();

							Для Каждого Запись Из НаборЗаписей Цикл
								Запись.ПредставлениеОбъектаМаркетплейса = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;

								Если Запись.Характеристика = СтрокаИзображения.Характеристика
									И Запись.Упаковка = СтрокаИзображения.Упаковка Тогда
									// Запись статуса для изображения конкретного товара.
									Запись.ИдентификаторОбъектаМаркетплейса = ИндексИзображения;
									Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
									Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
									Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;
									Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);
								Иначе
									ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
									ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", СтрокаИзображения.ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
									Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
								КонецЕсли;
							КонецЦикла;

							НаборЗаписей.Записать();

							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();

								ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Ошибка,,,
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ВыполнитьПроверкуПубликацииИзображенийТоваровВСервисе(ПараметрыИзображения, УчетнаяЗапись)

	ТекстЗапроса = "/v1/product/pictures/info";

	ПараметрыЗапроса = Новый Структура;     
	ПараметрыЗапроса.Вставить("product_id", ПараметрыИзображения.ИдентификаторТовара);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.pictures");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Процедура ВыполнитьПроверкуПубликацииИзображенийТоваров(УчетнаяЗапись)
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПроверкуПубликацииИзображенийТоваров:'") + Символы.ПС
		+ НСтр("ru = 'Учетная запись:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( УчетнаяЗапись ) 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись );
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса КАК ИндексИзображенияВКоллекции,
		|	"""" КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта КАК ДанныеОбъекта
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Упаковка
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками)))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса <> """")
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса
		|ИТОГИ ПО
		|	ИдентификаторОбъектаМаркетплейса";

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		ПубликацииСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса.Выгрузить() );
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПроверкуПубликацииИзображенийТоваров:'") + Символы.ПС
		+ "Публикации:" + Символы.ПС + ПубликацииСтр 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись );
	КонецЕсли;

	ВыборкаИдентификаторовТоваров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторовТоваров.Следующий() Цикл
		ИдентификаторТовара = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВыборкаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса);

		// Проверка публикации изображений.
		МассивИдентификаторов = Новый Массив;
		МассивИдентификаторов.Добавить(ИдентификаторТовара);

		ПараметрыИзображения = Новый Структура;
		ПараметрыИзображения.Вставить("ИдентификаторТовара", МассивИдентификаторов);

		Результат = ВыполнитьПроверкуПубликацииИзображенийТоваровВСервисе(ПараметрыИзображения, УчетнаяЗапись);

		Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
			ВыборкаИзображений = ВыборкаИдентификаторовТоваров.Выбрать();

			МассивЗаписанныхИдентификаторов = Новый Массив;

			Для Каждого ДанныеРезультата Из Результат Цикл
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("state", "");
				СтруктураРезультата.Вставить("product_id", 0);
				СтруктураРезультата.Вставить("url", "");
				ЗаполнитьЗначенияСвойств(СтруктураРезультата, ДанныеРезультата);

				ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураРезультата.state + "_object"];

				Если ТекущееСостояние = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ИндексИзображения = ЧислоВСтроку(Результат.Найти(ДанныеРезультата), Истина);

				ИдентификаторТовара = ЧислоВСтроку(СтруктураРезультата.product_id);
				НоваяПубличнаяСсылка = СтруктураРезультата.url;

				ВыборкаИзображений.Сбросить();

				НайденыЗаписи = Ложь;

				Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса, ИндексИзображенияВКоллекции", ИдентификаторТовара, ИндексИзображения);
				Пока ВыборкаИзображений.НайтиСледующий(Отбор) Цикл
					НайденыЗаписи = Истина;

					НачатьТранзакцию();
					Попытка
						// Блокировка изменения публикуемых изображений.
						БлокировкаДанных = Новый БлокировкаДанных;
						ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
						ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
						ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
						ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВыборкаИзображений.ВидОбъектаМаркетплейса);
						ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", ВыборкаИзображений.Номенклатура); 
						ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", ВыборкаИзображений.ОбъектПубликации);
						БлокировкаДанных.Заблокировать();

						НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
						НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВыборкаИзображений.ВидОбъектаМаркетплейса);
						НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаИзображений.Номенклатура);
						НаборЗаписей.Отбор.ОбъектПубликации.Установить(ВыборкаИзображений.ОбъектПубликации);
						НаборЗаписей.Прочитать();

						Для Каждого Запись Из НаборЗаписей Цикл
							Если Запись.Характеристика = ВыборкаИзображений.Характеристика
								И Запись.Упаковка = ВыборкаИзображений.Упаковка Тогда
								Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
								Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
								Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;

								ЗаполнитьДанныеПубликацииИзображения(Запись, ВыборкаИзображений);
							КонецЕсли;

							Запись.ПредставлениеОбъектаМаркетплейса = НоваяПубличнаяСсылка;
						КонецЦикла;

						Если НаборЗаписей.Количество() > 0 Тогда
							НаборЗаписей.Записать();
						КонецЕсли;

						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();

						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,,,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЦикла;

				Если НайденыЗаписи Тогда
					МассивЗаписанныхИдентификаторов.Добавить(ИндексИзображения);
				КонецЕсли;
			КонецЦикла;

			// Запишем состояния для изображений с очисткой публичной ссылки,
			// т.к. содержимое полученной публичной ссылки Ozon не соответствует содержимому публичной ссылки записи.
			Если Результат.Количество() <> МассивЗаписанныхИдентификаторов.Количество() Тогда
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("state", "");
				СтруктураРезультата.Вставить("product_id", 0);
				СтруктураРезультата.Вставить("url", "");
				ЗаполнитьЗначенияСвойств(СтруктураРезультата, Результат[0]);

				ИдентификаторТовара = ЧислоВСтроку(СтруктураРезультата.product_id);
				ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураРезультата.state + "_object"];

				Если ТекущееСостояние <> Неопределено Тогда
					ВыборкаИзображений.Сбросить();

					Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса", ИдентификаторТовара);
					Пока ВыборкаИзображений.НайтиСледующий(Отбор) Цикл
						Если МассивЗаписанныхИдентификаторов.Найти(ВыборкаИзображений.ИндексИзображенияВКоллекции) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;

						НачатьТранзакцию();
						Попытка
							// Блокировка изменения публикуемых изображений.
							БлокировкаДанных = Новый БлокировкаДанных;
							ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
							ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
							ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
							ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВыборкаИзображений.ВидОбъектаМаркетплейса);
							ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", ВыборкаИзображений.Номенклатура); 
							ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", ВыборкаИзображений.ОбъектПубликации);
							БлокировкаДанных.Заблокировать();

							НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
							НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВыборкаИзображений.ВидОбъектаМаркетплейса);
							НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаИзображений.Номенклатура);
							НаборЗаписей.Отбор.ОбъектПубликации.Установить(ВыборкаИзображений.ОбъектПубликации);
							НаборЗаписей.Прочитать();

							Для Каждого Запись Из НаборЗаписей Цикл
								Если Запись.Характеристика = ВыборкаИзображений.Характеристика
									И Запись.Упаковка = ВыборкаИзображений.Упаковка Тогда
									Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
									Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
									Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;

									ЗаполнитьДанныеПубликацииИзображения(Запись, ВыборкаИзображений);
								КонецЕсли;

								Запись.ПредставлениеОбъектаМаркетплейса = "";
							КонецЦикла;

							Если НаборЗаписей.Количество() > 0 Тогда
								НаборЗаписей.Записать();
							КонецЕсли;

							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();

							ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Ошибка,,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьУдалениеПубличныхСсылок(УчетнаяЗапись)

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьУдалениеПубличныхСсылок:'") + Символы.ПС
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее" ) );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;

	ЗаписьИзмененийВыполнена = Истина;

	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос; 
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтатусыПубликацииОбъектовИзмененных.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
			|	СтатусыПубликацииОбъектовИзмененных.Номенклатура КАК Номенклатура,
			|	СтатусыПубликацииОбъектовИзмененных.Характеристика КАК Характеристика,
			|	СтатусыПубликацииОбъектовИзмененных.Упаковка КАК Упаковка,
			|	СтатусыПубликацииОбъектовИзмененных.ОбъектПубликации КАК ОбъектПубликации,
			|	СтатусыПубликацииОбъектовИзмененных.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	СтатусыПубликацииОбъектовИзмененных.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
			|	СтатусыПубликацииОбъектовИзмененных.ДанныеОбъекта КАК ДанныеОбъекта
			|ПОМЕСТИТЬ ВыборкаИзмененийПубличныхСсылок
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовИзмененных
			|ГДЕ
			|	СтатусыПубликацииОбъектовИзмененных.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
			|	И СтатусыПубликацииОбъектовИзмененных.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
			|	И СтатусыПубликацииОбъектовИзмененных.ОбъектПубликации <> НЕОПРЕДЕЛЕНО
			|	И СтатусыПубликацииОбъектовИзмененных.ИзмененыРеквизиты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации КАК ОбъектПубликации,
			|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))) КАК КоличествоОтличающихсяТоваров
			|ПОМЕСТИТЬ ВыборкаОтличающихсяПубличныхСсылок
			|ИЗ
			|	ВыборкаИзмененийПубличныхСсылок КАК ВыборкаИзмененийПубличныхСсылок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовДругогоТовара
			|		ПО (СтатусыПубликацииОбъектовДругогоТовара.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
			|			И ВыборкаИзмененийПубличныхСсылок.ВидОбъектаМаркетплейса = СтатусыПубликацииОбъектовДругогоТовара.ВидОбъектаМаркетплейса
			|			И ВыборкаИзмененийПубличныхСсылок.Номенклатура = СтатусыПубликацииОбъектовДругогоТовара.Номенклатура
			|			И ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации = СтатусыПубликацииОбъектовДругогоТовара.ОбъектПубликации
			|			И ВыборкаИзмененийПубличныхСсылок.Характеристика <> СтатусыПубликацииОбъектовДругогоТовара.Характеристика
			|			И ВыборкаИзмененийПубличныхСсылок.Упаковка <> СтатусыПубликацииОбъектовДругогоТовара.Упаковка
			|			И ВыборкаИзмененийПубличныхСсылок.ПредставлениеОбъектаМаркетплейса <> СтатусыПубликацииОбъектовДругогоТовара.ПредставлениеОбъектаМаркетплейса
			|
			|СГРУППИРОВАТЬ ПО
			|	ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектПубликации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВыборкаИзмененийПубличныхСсылок.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
			|	ВыборкаИзмененийПубличныхСсылок.Номенклатура КАК Номенклатура,
			|	ВыборкаИзмененийПубличныхСсылок.Характеристика КАК Характеристика,
			|	ВыборкаИзмененийПубличныхСсылок.Упаковка КАК Упаковка,
			|	ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации КАК ОбъектПубликации,
			|	ВыборкаИзмененийПубличныхСсылок.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	ВыборкаИзмененийПубличныхСсылок.ДанныеОбъекта КАК ДанныеОбъекта
			|ИЗ
			|	ВыборкаИзмененийПубличныхСсылок КАК ВыборкаИзмененийПубличныхСсылок
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаОтличающихсяПубличныхСсылок КАК ВыборкаОтличающихсяПубличныхСсылок
			|		ПО ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации = ВыборкаОтличающихсяПубличныхСсылок.ОбъектПубликации
			|ГДЕ
			|	ВыборкаОтличающихсяПубличныхСсылок.КоличествоОтличающихсяТоваров ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВыборкаОтличающихсяПубличныхСсылок";

		МассивУдаляемыхПубличныхСсылок = Новый Массив;
		СоответствияУдаляемыхПубличныхСсылок = Новый Соответствие;

		РезультатЗапросаОбъектовПубликации = Запрос.Выполнить();

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			ТоварыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапросаОбъектовПубликации.Выгрузить(),  );
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			ЛогКомментарий = НСтр("ru = 'ВыполнитьУдалениеПубличныхСсылок:'") + Символы.ПС
			+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;

		ВыборкаОбъектовПубликации = РезультатЗапросаОбъектовПубликации.Выбрать();
		

		// Получение массива удаляемых публичных ссылок и очистка массива для каждого измененного изображения со снятием
		// признака "Изменены реквизиты".
		Пока ВыборкаОбъектовПубликации.Следующий() Цикл
			ДанныеОбъекта = ВыборкаОбъектовПубликации.ДанныеОбъекта.Получить();
			Если ТипЗнч(ДанныеОбъекта) <> Тип("Структура") Тогда
				ДанныеОбъекта = НовыйСписокАтрибутовИзображения();
			КонецЕсли;

			УдаляемыеСсылки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОбъекта, "УдаляемыеСсылки", Новый Соответствие);

			Для Каждого ДанныеПубличнойСсылки Из УдаляемыеСсылки Цикл
				Если ПустаяСтрока(ДанныеПубличнойСсылки.Значение) Тогда
					Продолжить;
				КонецЕсли;

				СоответствияУдаляемыхПубличныхСсылок.Вставить(ДанныеПубличнойСсылки.Ключ, ДанныеПубличнойСсылки.Значение);

				Если МассивУдаляемыхПубличныхСсылок.Найти(ДанныеПубличнойСсылки.Ключ) = Неопределено Тогда
					МассивУдаляемыхПубличныхСсылок.Добавить(ДанныеПубличнойСсылки.Ключ);
				КонецЕсли;
			КонецЦикла;

			ДанныеОбъекта.Вставить("УдаляемыеСсылки", Новый Соответствие);

			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись; 
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаОбъектовПубликации, "Номенклатура, Характеристика, Упаковка, ОбъектПубликации, ВидОбъектаМаркетплейса");
			Запись.Прочитать();
			
			Если Запись.Выбран() Тогда
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
				Запись.ИзмененыРеквизиты = Ложь;

				Запись.Записать();
			КонецЕсли;
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ЗаписьИзмененийВыполнена = Ложь;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если ЗаписьИзмененийВыполнена И МассивУдаляемыхПубличныхСсылок.Количество() > 0 Тогда
		// Поиск изображений, у которых используемая публичная ссылка среди удаляемых публичных ссылок.
		// Такие публичные ссылки должны быть исключены из удаления с сервиса хранения публичных файлов (например, Яндекс.Диск).
		Запрос.УстановитьПараметр("МассивУдаляемыхПубличныхСсылок", МассивУдаляемыхПубличныхСсылок);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПубличнаяСсылка
			|ИЗ
			|	ВыборкаИзмененийПубличныхСсылок КАК ВыборкаИзмененийПубличныхСсылок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
			|		ПО (СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
			|			И ВыборкаИзмененийПубличныхСсылок.ВидОбъектаМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса
			|			И ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации
			|ГДЕ
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса В(&МассивУдаляемыхПубличныхСсылок)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВыборкаИзмененийПубличныхСсылок";

		ВыборкаПубличныхСсылок = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПубличныхСсылок.Следующий() Цикл
			СоответствияУдаляемыхПубличныхСсылок.Удалить(ВыборкаПубличныхСсылок.ПубличнаяСсылка);

			ИндексЭлемента = МассивУдаляемыхПубличныхСсылок.Найти(ВыборкаПубличныхСсылок.ПубличнаяСсылка);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивУдаляемыхПубличныхСсылок.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;

		// Удаление публичных ссылок с сервиса хранения публичных файлов (например, Яндекс.Диск).
		Если СоответствияУдаляемыхПубличныхСсылок.Количество() > 0 Тогда
			Попытка
				ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗапись);

				ТекущаяПубличнаяСсылка = "";
				Для Каждого ДанныеПубличнойСсылки Из СоответствияУдаляемыхПубличныхСсылок Цикл
					ТекущаяПубличнаяСсылка = ДанныеПубличнойСсылки.Ключ;
					ИнтеграцияСМаркетплейсамиСервер.УдалитьФайлССервиса(ТокенДоступа, ДанныеПубличнойСсылки.Значение);
				КонецЦикла;
			Исключение
				Шаблон = НСтр("ru = 'Не удалось удалить публичную ссылку %1 по причине: %2'");
				СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
						ТекущаяПубличнаяСсылка,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,,,
						СообщениеПользователю);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


// Возвращает простые типы.
// 
// Возвращаемое значение:
//  Массив - массив простых типов.
//
Функция ПростыеТипы()

	МассивПростыхТипов = Новый Массив;
	МассивПростыхТипов.Добавить(Тип("Строка"));
	МассивПростыхТипов.Добавить(Тип("Число"));
	МассивПростыхТипов.Добавить(Тип("Дата"));
	МассивПростыхТипов.Добавить(Тип("Булево"));

	Возврат МассивПростыхТипов;

КонецФункции

// Возвращает расширения изображений.
//
// Параметры:
//  ИспользоватьPDF - Булево - необходимость включать файлы PDF.
// 
// Возвращаемое значение:
//  Массив - массив расширений изображений.
//
Функция РасширенияИзображений(ИспользоватьPDF = Ложь) Экспорт

	РасширенияИзображений = Новый Массив;
	РасширенияИзображений.Добавить("jpg");
	РасширенияИзображений.Добавить("jpeg");
	РасширенияИзображений.Добавить("png");

	Если ИспользоватьPDF Тогда
		РасширенияИзображений.Добавить("pdf");
	КонецЕсли;

	Возврат РасширенияИзображений;

КонецФункции

Функция ОписаниеТипаКатегории1С()

	МассивТиповКатегории1С = Новый Массив;
	МассивТиповКатегории1С.Добавить(Тип("СправочникСсылка.КатегорииНоменклатуры"));
	МассивТиповКатегории1С.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипаКатегории1С = Новый ОписаниеТипов(МассивТиповКатегории1С);

	Возврат ОписаниеТипаКатегории1С;

КонецФункции

Функция ИдентичныКоллекцииСКлючами(Коллекция1, Коллекция2, ИсключаемыеКлючи = "")

	Если Не (ТипЗнч(Коллекция1) = Тип("Структура") Или ТипЗнч(Коллекция1) = Тип("Соответствие")) Тогда
		Возврат Ложь;
	КонецЕсли;

	Ключи1 = СтрРазделить(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Коллекция1, ","), ",");
	Ключи2 = СтрРазделить(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Коллекция2, ","), ",");

	Если Не ОбщегоНазначения.КоллекцииИдентичны(Ключи1, Ключи2) Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого Ключ Из Ключи1 Цикл 
		Если Не ПустаяСтрока(ИсключаемыеКлючи) И СтрНайти(ИсключаемыеКлючи, Ключ) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Коллекция1[Ключ]) = Тип("Структура") Или ТипЗнч(Коллекция1[Ключ]) = Тип("Соответствие") Тогда
			РезультатСравнения = ИдентичныКоллекцииСКлючами(Коллекция1[Ключ], Коллекция2[Ключ]);
			Если Не РезультатСравнения Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Коллекция1[Ключ] <> Коллекция2[Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

// Возвращает информацию о всех дополнительных реквизитах и сведениях.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными о дополнительных реквизитах и сведениях.
//
Функция ТаблицаДополнительныхСвойств()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизитыИСведения.Ссылка) КАК Представление
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения";
	
	ТаблицаДополнительныхСвойств = Запрос.Выполнить().Выгрузить();
	ТаблицаДополнительныхСвойств.Индексы.Добавить("Представление");
	
	Возврат ТаблицаДополнительныхСвойств;
	
КонецФункции

// Возвращает путь к полю, собранный из его составляющих, в виде строки с точками-разделителями.
//
// Параметры:
//  ЧастиПутиКПолю - Массив со значениями типа Строка - составляющие пути к полю.
// 
// Возвращаемое значение:
//  Строка - путь к полю с точками-разделителями вида "Номенклатура.ВидНоменклатуры.Наименование".
//
Функция ПутьКПолюИзЧастейПути(ЧастиПутиКПолю) Экспорт

	СоответствиеПутиДополнительногоСвойства = Новый Соответствие;

	Инд = 0;
	НомерСвойства = 1;
	Для Каждого ЧастьПути Из ЧастиПутиКПолю Цикл
		ЭтоДополнительноеСвойство = СтрНайти(ЧастьПути, "[") > 0;

		Если ЭтоДополнительноеСвойство Тогда
			ИмяСвойства = "Свойство" + НомерСвойства;
			СоответствиеПутиДополнительногоСвойства.Вставить(ИмяСвойства, ЧастьПути);

			ЧастиПутиКПолю[Инд] = ИмяСвойства;

			НомерСвойства = НомерСвойства + 1;
		КонецЕсли;

		Инд = Инд + 1;
	КонецЦикла;

	ПутьКПолю = СтрСоединить(ЧастиПутиКПолю, ".");

	Для Каждого СоответствиеПути Из СоответствиеПутиДополнительногоСвойства Цикл
		ПутьКПолю = СтрЗаменить(ПутьКПолю, СоответствиеПути.Ключ, СоответствиеПути.Значение);
	КонецЦикла;

	Возврат ПутьКПолю;

КонецФункции

// Возвращает структуру свойств поля схемы компоновки данных.
//
Функция СтруктураПоляНабораДанныхСхемыКомпоновкиДанных() Экспорт

	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПолеКомпоновкиДанных", "");
	СтруктураПоля.Вставить("ПутьКДанным", "");
	СтруктураПоля.Вставить("Заголовок", "");
	СтруктураПоля.Вставить("ИмяМетаданных", "");
	СтруктураПоля.Вставить("ПолноеИмяМетаданных", "");
	СтруктураПоля.Вставить("ТипЗначенияПоля", Неопределено);
	СтруктураПоля.Вставить("ЭтоПолеУпорядочивания", Ложь);

	Возврат СтруктураПоля;

КонецФункции

// Возвращает список полей схемы компоновки данных для получения значений атрибутов.
//
// Параметры:
//  ИсточникКатегории - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории 1С.
//
// Возвращаемое значение:
//  Массив со значениями типа Структура - см. ИнтеграцияСМаркетплейсомOzonСервер.СтруктураПоляНабораДанныхСхемыКомпоновкиДанных().
//
Функция ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов(ПолучитьПоляКатегории1С = Ложь) Экспорт

	Поля = Новый Структура;

	ОбъектМетаданных = Метаданные.Справочники.Номенклатура;
	СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
	СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура";
	СтруктураПоля.ПутьКДанным = "Номенклатура";
	СтруктураПоля.Заголовок = ОбъектМетаданных.ПредставлениеОбъекта;
	СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
	СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Поля.Вставить("Номенклатура", СтруктураПоля);

	ОбъектМетаданных = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
	СтруктураПоля.ПолеКомпоновкиДанных = "Характеристика";
	СтруктураПоля.ПутьКДанным = "Характеристика";
	СтруктураПоля.Заголовок = ОбъектМетаданных.ПредставлениеОбъекта;
	СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
	СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Поля.Вставить("Характеристика", СтруктураПоля);

	ОбъектМетаданных = Метаданные.Справочники.ЕдиницыИзмерения;
	СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
	СтруктураПоля.ПолеКомпоновкиДанных = "Упаковка";
	СтруктураПоля.ПутьКДанным = "Упаковка";
	СтруктураПоля.Заголовок = ОбъектМетаданных.ПредставлениеОбъекта;
	СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
	СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения");
	Поля.Вставить("Упаковка", СтруктураПоля);

	Если ПолучитьПоляКатегории1С Тогда
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "УчетнаяЗаписьМаркетплейса";
		СтруктураПоля.Заголовок = НСтр("ru = 'Учетная запись маркетплейса'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "УчетнаяЗаписьМаркетплейса";
		ОбъектМетаданных = Метаданные.Справочники.УчетныеЗаписиМаркетплейсов;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("УчетнаяЗаписьМаркетплейса", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "ИсточникКатегории";
		СтруктураПоля.Заголовок = НСтр("ru = 'Источник категории'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "ИсточникКатегории";
		ОбъектМетаданных = Метаданные.Перечисления.ИсточникиКатегорийДляМаркетплейса;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("ИсточникКатегории", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "Категория1С_ВидНоменклатуры";
		СтруктураПоля.Заголовок = НСтр("ru = 'Категория 1С'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура.КатегорияНоменклатуры";
		
		ОбъектМетаданных = Метаданные.Справочники.КатегорииНоменклатуры;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("Категория1С_ВидНоменклатуры", СтруктураПоля);
		
	
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "Категория1С_ИерархияНоменклатуры";
		СтруктураПоля.Заголовок = НСтр("ru = 'Категория 1С'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура";
		ОбъектМетаданных = Метаданные.Справочники.Номенклатура;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("Категория1С_ИерархияНоменклатуры", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "ИдентификаторКатегорииМаркетплейса";
		СтруктураПоля.Заголовок = НСтр("ru = 'Идентификатор категории маркетплейса'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "ИдентификаторКатегорииМаркетплейса";
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("Строка");
		СтруктураПоля.ИмяМетаданных = "";
		СтруктураПоля.ПолноеИмяМетаданных = "";
		Поля.Вставить("ИдентификаторКатегорииМаркетплейса", СтруктураПоля);
	КонецЕсли;

	Возврат Поля;

КонецФункции

// Возвращает значение из описания поля по заданному имени.
//
// Параметры:
//  ИмяПоля - Строка - имя поля.
// 
// Возвращаемое значение:
//  Строка, Тип - содержимое поля, см. ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов().
//
Функция ДанныеПоляСхемыДляПолученияРеквизитовАтрибутов(ИмяПоля) Экспорт

	Поля = ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов();
	ДанныеПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Поля, ИмяПоля, СтруктураПоляНабораДанныхСхемыКомпоновкиДанных());

	Возврат ДанныеПоля;

КонецФункции

// Подготавливает схему компоновки данных для выбора реквизитов.
//
// Параметры:
//  Поля - Массив - см ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов().
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, из которой вызывается создание схемы
//                                                           компоновки данных.
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных.
//
Функция СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Поля, УникальныйИдентификаторФормы = Неопределено) Экспорт

	СоответствиеПсевдонимовМетаданных = Новый Структура;

	СхемаКомпоновкиДанных = ПустаяСхема();
	НаборДанных = ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДанныеПубликации");

	Для Каждого ДанныеПоля Из Поля Цикл
		Поле = ДанныеПоля.Значение;

		ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле        = Поле.ПолеКомпоновкиДанных;
		ПолеНабора.ПутьКДанным = Поле.ПутьКДанным;
		ПолеНабора.Заголовок   = Поле.Заголовок;
		ПолеНабора.ТипЗначения = Поле.ТипЗначенияПоля;

		СоответствиеПсевдонимовМетаданных.Вставить(Поле.ПутьКДанным, Поле.ПолноеИмяМетаданных);
	КонецЦикла;

	Если УникальныйИдентификаторФормы = Неопределено Тогда
		Результат = Новый Структура("СхемаКомпоновкиДанных, СоответствиеПсевдонимовМетаданных",
				СхемаКомпоновкиДанных, СоответствиеПсевдонимовМетаданных);
	Иначе
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
		Результат = Новый Структура("АдресСхемы, СоответствиеПсевдонимовМетаданных", АдресСхемы, СоответствиеПсевдонимовМетаданных);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает категорию-источник, для которой выполнены настройки сопоставления.
//
// Параметры:
//  Категория1С       - СправочникСсылка.ВидыНоменклатуры
//					  - СправочникСсылка.Номенклатура
//					  - СправочникСсылка.ТоварныеКатегории - категория, для которой нужно получить категорию-источник.
//  УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// ВозвращаемоеЗначение:
//	Категория - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории.
//
Функция ПолучитьТекущийИсточникКатегорииМаркетплейса(Категория1С, УчетнаяЗапись) Экспорт

	ДанныеИсточникаКатегорииМаркетплейса = Новый Структура;
	ДанныеИсточникаКатегорииМаркетплейса.Вставить("ИсточникКатегорииМаркетплейса", Неопределено);
	ДанныеИсточникаКатегорииМаркетплейса.Вставить("НаименованиеИсточникаКатегорииМаркетплейса", "");

	Если ЗначениеЗаполнено(Категория1С) Тогда
		ИсточникКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ИсточникКатегории");
		МассивКатегорий = Новый Массив;
		МассивКатегорий.Добавить(Категория1С);

		ВыборкаДанных = ВыборкаИсточникаКатегорииМаркетплейса(МассивКатегорий,
				ИсточникКатегории, УчетнаяЗапись);

		Если ВыборкаДанных.Следующий() Тогда
			ДанныеИсточникаКатегорииМаркетплейса.ИсточникКатегорииМаркетплейса = ВыборкаДанных.РодительКатегории1С;
			ДанныеИсточникаКатегорииМаркетплейса.НаименованиеИсточникаКатегорииМаркетплейса = ВыборкаДанных.НаименованиеОбъектаМаркетплейса;
		КонецЕсли;
	КонецЕсли;

	Возврат ДанныеИсточникаКатегорииМаркетплейса;

КонецФункции

// Возвращает выборку результата запроса, содержащую категорию-источник для категории маркетплейса.
//
// Параметры:
//  Категории         - Массив - категории, для которых нужно получить категорию-источник.
//  ИсточникКатегории - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории из настроек сопоставления.
//  УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// ВозвращаемоеЗначение:
//	ВыборкаРезультатаЗапроса.
//
Функция ВыборкаИсточникаКатегорииМаркетплейса(Категории, ИсточникКатегории, УчетнаяЗапись) Экспорт

	ЧастиТекстаЗапроса = СоставныеЧастиТекстаЗапросаПолученияКатегорииМаркетплейса(ИсточникКатегории);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Категории", Категории);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст = ЧастиТекстаЗапроса.Пролог + ЧастиТекстаЗапроса.Разделитель + ЧастиТекстаЗапроса.Рефрен;

	Инд = 2;
	Пока Истина Цикл
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд + 1, "ЧГ="));
		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд - 1, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="));
		Запрос.Текст = ЧастиТекстаЗапроса.Рефрен;

		Инд = Инд + 1;
	КонецЦикла;

	ЧастиТекстаЗапроса.Эпилог = СтрЗаменить(ЧастиТекстаЗапроса.Эпилог, "ТаблицаАнализа2", "ТаблицаАнализа" + Формат(Инд, "ЧГ="));
	Запрос.Текст = ЧастиТекстаЗапроса.Эпилог;
	ВыборкаДанных = Запрос.Выполнить().Выбрать();

	Возврат ВыборкаДанных;

КонецФункции

Функция СоставныеЧастиТекстаЗапросаПолученияКатегорииМаркетплейса(ИсточникКатегории)

	ЧастиТекстаЗапроса = Новый Структура;

	Пролог =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникДанных.Ссылка КАК Категория1С,
		|	ИсточникДанных.Ссылка КАК РодительКатегории1С,
		|	"""" КАК ИдентификаторОбъектаМаркетплейса,
		|	"""" КАК НаименованиеОбъектаМаркетплейса
		|ПОМЕСТИТЬ ТаблицаАнализа1
		|ИЗ
		|	&ИсточникДанных КАК ИсточникДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ИсточникДанных.Ссылка = СоответствияОбъектовМаркетплейсов.Объект1С
		|ГДЕ
		|	ИсточникДанных.Ссылка В(&Категории)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса ЕСТЬ NULL";

	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
		Пролог = СтрЗаменить(Пролог, "&ИсточникДанных", "Справочник.КатегорииНоменклатуры");
	Иначе
		Пролог = СтрЗаменить(Пролог, "&ИсточникДанных", "Справочник.Номенклатура");
	КонецЕсли;

	ЧастиТекстаЗапроса.Вставить("Пролог", Пролог);

	ЧастиТекстаЗапроса.Вставить("Разделитель",	"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");

	ЧастиТекстаЗапроса.Вставить("Рефрен",
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С.Родитель КАК РодительКатегории1С,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеОбъектаМаркетплейса
		|ПОМЕСТИТЬ ТаблицаАнализа2
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ТаблицаАнализа.РодительКатегории1С.Родитель = СоответствияОбъектовМаркетплейсов.Объект1С
		|ГДЕ
		|	ТаблицаАнализа.РодительКатегории1С.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеОбъектаМаркетплейса
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАнализа.Категория1С КАК Категория1С
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.РодительКатегории1С.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса = """"");

	ЧастиТекстаЗапроса.Вставить("Эпилог",
		"ВЫБРАТЬ
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеОбъектаМаркетплейса
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа2");

	Возврат ЧастиТекстаЗапроса;

КонецФункции

// Сведения о выгруженных данных
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пуста таблица для заполнения выгруженными данными.
//
Функция СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	Результат.Колонки.Добавить("ВидОбъектаМаркетплейса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	
	ТипОбъектПубликации = Новый Массив;
	ТипОбъектПубликации.Добавить(Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	ТипОбъектПубликации.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатурыПрисоединенныеФайлы"));
	Результат.Колонки.Добавить("ОбъектПубликации", Новый ОписаниеТипов(ТипОбъектПубликации));

	Возврат Результат;

КонецФункции

// Очищает сохраненные данных авторизации по учетной записи.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//  Булево - результат выполнения очистки.
//
Функция ОчиститьНастройкиУчетнойЗаписи(УчетнаяЗапись) Экспорт

	ОчисткаУспешна = Истина;

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		Владелец = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса().НастройкиСервиса + УчетнаяЗапись.УникальныйИдентификатор();
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, Неопределено);

		ТекОб = УчетнаяЗапись.ПолучитьОбъект();
		ТекОб.УстановитьПометкуУдаления(Истина);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		
		ОчисткаУспешна = Ложь;
		
		ШаблонСообщения = НСтр("ru = 'Не удалось очистить настройки по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	КонецПопытки;

	Возврат ОчисткаУспешна;

КонецФункции

Процедура ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(ПараметрыОтображенияОстатковЦен, Идентификатор, ОтображатьВТаблице = Ложь, ОтображатьВИнформационномПоле = Ложь)

	Результат = Новый Структура("ОтображатьВТаблице, ОтображатьВИнформационномПоле", ОтображатьВТаблице, ОтображатьВИнформационномПоле);
	ПараметрыОтображенияОстатковЦен.Вставить(Идентификатор, Результат);

КонецПроцедуры

Функция НоменклатураИзображенияПолучить( НоменклатураИлиХарактеристика, ИзображенияДляНоменклатурыИХарактеристики = Ложь, Параметры = Неопределено ) Экспорт
	
	Изображения = ИнтеграцияСМаркетплейсамиСервер.НоменклатураИзображенияПолучить( НоменклатураИлиХарактеристика, ИзображенияДляНоменклатурыИХарактеристики, Параметры );
	
	УчетнаяЗаписьМаркетплейса = Неопределено;
	Упаковка = Неопределено;
	ВыгрузитьВТаблицуЗначений = Истина;
	Если ТипЗнч( Параметры ) = Тип( "Структура" ) Тогда
		Параметры.Свойство( "УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса );
		Параметры.Свойство( "Упаковка", Упаковка );
		Если Параметры.Свойство( "ВыгрузитьВТаблицуЗначений" ) Тогда
			ВыгрузитьВТаблицуЗначений = Параметры.ВыгрузитьВТаблицуЗначений;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч( НоменклатураИлиХарактеристика ) = Тип( "СправочникСсылка.Номенклатура" ) Тогда
		Номенклатура = НоменклатураИлиХарактеристика;
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
	    Характеристика = НоменклатураИлиХарактеристика;
	    Если ИзображенияДляНоменклатурыИХарактеристики = Истина Тогда
			Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Характеристика, "Владелец" );
		Иначе
			Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайлов = ?(ЗначениеЗаполнено(Характеристика), Характеристика, Номенклатура );
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изображения.Номенклатура КАК Номенклатура,
	|	Изображения.Характеристика КАК Характеристика,
	|	Изображения.Файл КАК Файл,
	|	Изображения.Сортировка КАК Сортировка,
	|	Изображения.ВыгружатьНаСайт КАК ВыгружатьНаСайт,
	|	Изображения.Владелец КАК Владелец,
	|	Изображения.ВладелецФайлов КАК ВладелецФайлов,
	|	Изображения.ДатаСоздания КАК ДатаСоздания,
	|	Изображения.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	Изображения.Расширение КАК Расширение,
	|	Изображения.ЭтоИзображение КАК ЭтоИзображение
	|ПОМЕСТИТЬ ВТПрисоединенныеФайлыСортировка
	|ИЗ
	|	&Изображения КАК Изображения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками)
	|				ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыПубликации.ОписаниеОшибки КАК СТРОКА(1024)), """") <> """"
	|			ТОГДА 0
	|		КОГДА СтатусыПубликации.Статус ЕСТЬ NULL
	|					И ВТПрисоединенныеФайлыСортировка.Расширение В (&РасширенияИзображений)
	|				ИЛИ СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
	|				ИЛИ СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации)
	|			ТОГДА 1
	|		КОГДА СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве)
	|			ТОГДА 2
	|		КОГДА СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК МаркерСтатуса,
	|	ВТПрисоединенныеФайлыСортировка.Файл КАК Файл,
	|	ЕСТЬNULL(СправочникНоменклатуры.ФайлКартинки, ЗНАЧЕНИЕ(Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка)) = ВТПрисоединенныеФайлыСортировка.Файл КАК ОсновноеИзображение,
	|	ЕСТЬNULL(СтатусыПубликации.ПредставлениеОбъектаМаркетплейса, """") КАК ПубличнаяСсылка,
	|	ВЫБОР
	|		КОГДА НЕ ВТПрисоединенныеФайлыСортировка.Расширение В (&РасширенияИзображений)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется)
	|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликации.Статус, &СтатусНовый)
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА ВТПрисоединенныеФайлыСортировка.Расширение В (&РасширенияИзображений)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыПубликации.ОписаниеОшибки КАК СТРОКА(1024)), """")
	|		ИНАЧЕ &ОписаниеОшибкиФорматФайла
	|	КОНЕЦ КАК ОписаниеОшибки
	|ПОМЕСТИТЬ ВТНоменклатураИзображенияСтатусы
	|ИЗ
	|	ВТПрисоединенныеФайлыСортировка КАК ВТПрисоединенныеФайлыСортировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|		ПО (СправочникНоменклатуры.Ссылка = ВТПрисоединенныеФайлыСортировка.Владелец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение))
	|			И (СтатусыПубликации.Номенклатура = &Номенклатура)
	|			И (СтатусыПубликации.Характеристика = &Характеристика)
	|			И (СтатусыПубликации.Упаковка = &Упаковка)
	|			И (СтатусыПубликации.ОбъектПубликации = ВТПрисоединенныеФайлыСортировка.Файл)
	|ГДЕ
	|	СтатусыПубликации.ОбъектПубликации ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	&Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	&Упаковка КАК Упаковка,
	|	ВТПрисоединенныеФайлыСортировка.Файл КАК Файл,
	|	ВТПрисоединенныеФайлыСортировка.Сортировка КАК Сортировка,
	|	ВТПрисоединенныеФайлыСортировка.ВыгружатьНаСайт КАК ВыгружатьНаСайт,
	|	ВТПрисоединенныеФайлыСортировка.Владелец КАК Владелец,
	|	ВТПрисоединенныеФайлыСортировка.ВладелецФайлов КАК ВладелецФайлов,
	|	ВТПрисоединенныеФайлыСортировка.ДатаСоздания КАК ДатаСоздания,
	|	ВТПрисоединенныеФайлыСортировка.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	ВТПрисоединенныеФайлыСортировка.Расширение КАК Расширение,
	|	ВТПрисоединенныеФайлыСортировка.ЭтоИзображение КАК ЭтоИзображение,
	|	ВТНоменклатураИзображенияСтатусы.МаркерСтатуса КАК МаркерСтатуса,
	|	ВТНоменклатураИзображенияСтатусы.ОсновноеИзображение КАК ОсновноеИзображение,
	|	ВТНоменклатураИзображенияСтатусы.ПубличнаяСсылка КАК ПубличнаяСсылка,
	|	ВТНоменклатураИзображенияСтатусы.Статус КАК Статус,
	|	ВТНоменклатураИзображенияСтатусы.ОписаниеОшибки КАК ОписаниеОшибки
	|ИЗ
	|	ВТПрисоединенныеФайлыСортировка КАК ВТПрисоединенныеФайлыСортировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНоменклатураИзображенияСтатусы КАК ВТНоменклатураИзображенияСтатусы
	|		ПО (ВТНоменклатураИзображенияСтатусы.Файл = ВТПрисоединенныеФайлыСортировка.Файл)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка";
	
	
	РасширенияИзображений = РасширенияИзображений();
	                                                                                  
	Запрос.УстановитьПараметр("Изображения", Изображения);
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	Запрос.УстановитьПараметр("РасширенияИзображений", РасширенияИзображений);
	Запрос.УстановитьПараметр("СтатусНовый", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"));
	
	ОписаниеОшибкиФорматФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Присоединенный файл изображения товара не выгружается на маркетплейс, т.к. не соответствует требуемым форматам файлов: %1.'"),
			СтрСоединить(РасширенияИзображений, ", "));
	Запрос.УстановитьПараметр("ОписаниеОшибкиФорматФайла", ОписаниеОшибкиФорматФайла );
	
	РезультатЗапроса = Запрос.Выполнить();
	Если ВыгрузитьВТаблицуЗначений = Истина Тогда
		Данные = РезультатЗапроса.Выгрузить();
	Иначе
		Данные = РезультатЗапроса.Выбрать();
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

Функция ПрисоединенныйФайлЭтоИзображение( ПрисоединенныйФайл, Параметры = Неопределено ) Экспорт
	РасширенияИзображений = РасширенияИзображений();
	Расширение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( ПрисоединенныйФайл, "Расширение" );
	Если ТипЗнч( Параметры ) = Тип( "Структура" ) Тогда
		Параметры.Вставить( "Расширение", Расширение );
	КонецЕсли;
	Если РасширенияИзображений.Найти( НРег( Расширение ) ) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция СоставИСортировкаФайловДляСайтаЗаписать( ТаблицаФайлов ) Экспорт
	
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВладелецФайлов = ТаблицаФайлов[0].ВладелецФайлов;
	Если ТипЗнч( ВладелецФайлов ) = Тип( "СправочникСсылка.Номенклатура" ) Тогда
		Номенклатура = ВладелецФайлов;
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
	    Характеристика = ВладелецФайлов;
		Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Характеристика, "Владелец" );
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|ГДЕ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
	|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = &Номенклатура
	|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = &Характеристика";

	Запрос = Новый Запрос( ТекстЗапроса );
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	УчетныеЗаписиТоваров = Запрос.Выполнить().Выбрать();
	Пока УчетныеЗаписиТоваров.Следующий() Цикл
		ИзображенияПараметры = Новый Структура( "УчетнаяЗаписьМаркетплейса, Упаковка", УчетныеЗаписиТоваров.УчетнаяЗаписьМаркетплейса, УчетныеЗаписиТоваров.Упаковка );
		Изображения = НоменклатураИзображенияПолучить( ВладелецФайлов, Истина, ИзображенияПараметры );
		
		ИзображенияСоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzonПоНоменклатуре( Номенклатура );

	КонецЦикла;
	
КонецФункции

// Номенклатура: Ссылка, список значений или массив
Функция ИзображенияСоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzonПоНоменклатуре( Номенклатура )
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	СтатусыПубликации.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.КатегорииНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		ИНАЧЕ СправУчетныеЗаписи.ИсточникКатегории
		|	КОНЕЦ КАК ИсточникКатегории
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса.Ссылка = СтатусыПубликации.УчетнаяЗаписьМаркетплейса)
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликации.Номенклатура В (&Номенклатура))";
	Запрос.Выполнить();

	ПараметрыЗаполненияОбъектовПубликации = СписокПараметровПодготовкиДанныхПубликуемыхТоваров();
	ПараметрыЗаполненияОбъектовПубликации.ПолучитьИзображения = Истина;
	ПараметрыЗаполненияОбъектовПубликации.ОбновитьДанные = Истина;

	ТаблицаДанныхИзображений = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполненияОбъектовПубликации);

	СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ТаблицаДанныхИзображений);
	
	Возврат Истина;
КонецФункции

// Формирует список с подчиненными складами, включая переданный
//
// Параметры:
//  Склад	 - СправочникСсылка.Склады - склад, по которому формируется список.
// 
// Возвращаемое значение:
//  СписокЗначений - список с подчиненными складами.
//
Функция СписокПодчиненныхСкладов(Склад) Экспорт
	
	Список = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В ИЕРАРХИИ(&Склад)
		|	И (НЕ Склады.ЭтоГруппа
		|			ИЛИ &УсловиеПоГруппеСкладов)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоГруппеСкладов", "Ложь");
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция БазоваяВалютаПоУмолчанию() Экспорт
	Возврат Справочники.Валюты.НайтиПоКоду( "643" );
КонецФункции

Функция ВалютаРегламентированногоУчетаОрганизации(Организация) Экспорт
	Возврат Справочники.Валюты.НайтиПоКоду( "643" );
КонецФункции

// Возвращает таблицу значений на основании массива структур
// 
// Параметры:
//	МассивСтруктур - Массив Из Структура - Массив структур, которые будут преобразованы в таблиц значений.
//										   Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, созданная из массива структур.
// 
Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

// Возвращает описание типов по переданному типу
// 
// Параметры:
//	Тип - Тип - Тип значения
//
// Возвращаемое значение:
//	ОписаниеТипов - созданное на основании переданного типа описание типов.
//
Функция ОписаниеТиповПоТипу(Тип)
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
КонецФункции

// Возвращает пустую схему СКД
//
// Параметры:
//  ИмяИсточника - Строка - имя источника данных новой схемы компоновки (необязательное по умолчанию "ИсточникДанных1")
//  ТипИсточника - Строка - тип источника данных новой схему компоновки данных (необязательное по умолчанию "Local").
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - пустая схема компоновки данных.
//
Функция ПустаяСхема(ИмяИсточника = "ИсточникДанных1", ТипИсточника = "Local") Экспорт
	
	НоваяСхема = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = НоваяСхема.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = ИмяИсточника;
	ИсточникДанных.ТипИсточникаДанных = ТипИсточника;
	
	Возврат НоваяСхема;
	
КонецФункции

// Добавляет новый набор данных заданного типа и возвращает ссылку на него
//
// Параметры:
//  СхемаНабор - СхемаКомпоновкиДанных -
//  			- НаборыДанныхСхемыКомпоновкиДанных -
//  			- НаборДанныхОбъединениеСхемыКомпоновкиДанных - схема или набор компоновки данных, в которой необходимо создать новый набор.
//  ТипНабора - Тип - Тип нового набора (необязательное по умолчанию "НаборДанныхЗапросСхемыКомпоновкиДанных")
//  					Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
//  					Тип("НаборДанныхОбъектСхемыКомпоновкиДанных").
//  ИмяНабора - Строка - имя нового набора (необязательное по умолчанию "НаборДанных1")
//  ИмяИсточника - Строка - имя источника данных новой схемы компоновки (необязательное по умолчанию "ИсточникДанных1")
//  ИмяОбъекта - Строка - имя внешнего источника данных (необязательное по умолчанию равно имени набора данных).
//
// Возвращаемое значение:
//  НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных,
//      НаборДанныхОбъектСхемыКомпоновкиДанных - новый набор данных заданного типа.
//
Функция ДобавитьПустойНаборДанных(СхемаНабор, ТипНабора = Неопределено, ИмяНабора = "НаборДанных1", ИмяИсточника = "ИсточникДанных1", ИмяОбъекта = "") Экспорт
	
	Если ТипНабора = Неопределено Тогда
		ТипНабора = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	КонецЕсли;
	
	Если ТипЗнч(СхемаНабор) = Тип("СхемаКомпоновкиДанных") Тогда
		
		НаборыДанных = СхемаНабор.НаборыДанных;
		
	ИначеЕсли ТипЗнч(СхемаНабор) = Тип("НаборыДанныхСхемыКомпоновкиДанных") Тогда
		
		НаборыДанных = СхемаНабор;
		
	ИначеЕсли ТипЗнч(СхемаНабор) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		
		НаборыДанных = СхемаНабор.Элементы;
		
	КонецЕсли;
	
	НовыйНабор = НаборыДанных.Добавить(ТипНабора);
	
	НовыйНабор.Имя = ИмяНабора;
	Если Не ТипНабора = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
		И ЗначениеЗаполнено(ИмяИсточника) Тогда
		
		НовыйНабор.ИсточникДанных = ИмяИсточника;
		
	КонецЕсли;
	
	Если ТипНабора = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		НовыйНабор.ИмяОбъекта = ?(ЗначениеЗаполнено(ИмяОбъекта), ИмяОбъекта, ИмяНабора);
	КонецЕсли;
		
	Возврат НовыйНабор;
	
КонецФункции

// Устанавливает значение параметра динамического списка, или отключает его использование в зависимости от признака.
//
// Параметры:
//	Список - ДинамическийСписок - список,
//	ИмяПараметра - Строка - имя параметра,
//	Значение - Произвольный - значение параметра,
//	Использование - Булево - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра <> Неопределено Тогда
		Если Использование Тогда
			Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
		Иначе
			ЗначениеПараметра.Значение = Значение;
			ЗначениеПараметра.Использование = Ложь;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Текст запроса регистр сведений цены номенклатуры условие соединения.
// 
// Параметры:
//  ИсточникТоваров - Строка - название таблицы с товарами
//  ИсточникЦен - Строка - название таблицы с ценами
//  ИсточникВидовЦен - Строка, Неопределено - значение, если необходимо в соединение соединять по виду цен
//  ИспользуетсяЦенообразование25 - Неопределено, Булево - Используется ценообразование 2.5
// 
// Возвращаемое значение:
//  Строка - Текст запроса регистр сведений цены номенклатуры условие соединения
Функция ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(ИсточникТоваров,
																	ИсточникЦен,
																	ИсточникВидовЦен = Неопределено,
																	ИспользуетсяЦенообразование25 = Неопределено) Экспорт
	
	ТекстыЗапросов = Новый Массив();
	ТекстЗапроса = "
		|			&ИсточникТоваров.Номенклатура = &ИсточникЦен.Номенклатура
		|			И &ИсточникТоваров.Характеристика = &ИсточникЦен.Характеристика";
	ТекстыЗапросов.Добавить(ТекстЗапроса);

	Если ИсточникВидовЦен <> Неопределено Тогда
		ТекстыЗапросов.Добавить(Символы.ПС + "		И ");
		ТекстыЗапросов.Добавить(ИсточникВидовЦен);
		ТекстыЗапросов.Добавить(" = &ИсточникЦен.ВидЦен");
	КонецЕсли;
		
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникТоваров", ИсточникТоваров);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникЦен", ИсточникЦен);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает строковое представление номенклатуры с характеристикой и другими полями для отображения в сообщениях.
//
// Параметры:
//  Номенклатура	 - Строка, СправочникСсылка.Номенклатура			 - номенклатура;
//  Характеристика	 - Строка, СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика номенклатуры;
//  Упаковка		 - Строка, СправочникСсылка.УпаковкиЕдиницыИзмерения	 - упаковка / единица измерения номенклатуры;
//  Серия			 - Строка, СправочникСсылка.СерииНоменклатуры			 - серия номенклатуры;
//  Назначение		 - Строка, СправочникСсылка.Назначения					 - назначение номенклатуры.
// 
// Возвращаемое значение:
//  Строка - представление номенклатуры.
//
Функция ПредставлениеНоменклатуры(Номенклатура, Характеристика, Упаковка = "", Серия = "", Назначение = "") Экспорт

	СтрПредставление = СокрЛП(Номенклатура);

	Если ЗначениеЗаполнено(Характеристика)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(Характеристика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Назначение) Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(Назначение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Серия) Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(Серия);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

Функция СкладыПроверитьИЗаписатьСоответствие(ДанныеЗаписи) Экспорт

	ПроверкаПройдена = Истина;

	Если ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда

		СообщенияПроверки = Новый Массив;

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
		Запрос.УстановитьПараметр("ИдентификаторСклада", ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);
		Запрос.УстановитьПараметр("УстанавливаемыйСклад", ДанныеЗаписи.Объект1С);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(Склады.Ссылка) КАК ПредставлениеСклада,
			|	ЛОЖЬ КАК ЭтоГруппа
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК Склады
			|ГДЕ
			|	Склады.Ссылка = &УстанавливаемыйСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	ЛОЖЬ КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = """"
			|	И СоответствияОбъектовМаркетплейсов.Объект1С В ИЕРАРХИИ(&УстанавливаемыйСклад)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	Склады.Наименование КАК НаименованиеСклада1С,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	ЛОЖЬ КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада";
		
		ПакетЗапроса = Запрос.ВыполнитьПакет();

		// Проверка на вхождение записанных складов в иерархию выбранного склада.

		МассивПересечений = Новый Массив;

		ПолноеНаименованиеУстанавливаемогоСклада = "";
		ПредставлениеСклада = "";
		ЭтоГруппаСкладов = Ложь;

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 2].Выбрать();
		Если ВыборкаСкладов.Следующий() Тогда 
			ПолноеНаименованиеУстанавливаемогоСклада = "/" + ДанныеЗаписи.Объект1С.ПолноеНаименование() + "/";
			ПредставлениеСклада = ВыборкаСкладов.ПредставлениеСклада;
			ЭтоГруппаСкладов = ВыборкаСкладов.ЭтоГруппа;
		КонецЕсли;

		Если ЭтоГруппаСкладов Тогда
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемая группа складов <%1> совпадает со значением для склада маркетплейса <%2>.'");
		Иначе
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемый склад <%1> совпадает со значением для склада маркетплейса <%2>.'");
		КонецЕсли;

		ШаблонПересеченияСклада = " - " + НСтр("ru = 'склад 1С <%1>, установленный для склада маркетплейса <%2>'");
		ШаблонПересеченияГруппыСклада = " - " + НСтр("ru = 'группа складов 1С <%1>, установленная для склада маркетплейса <%2>'");

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 1].Выбрать();
		Пока ВыборкаСкладов.Следующий() Цикл
			Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
						ПредставлениеСклада, 
						ВыборкаСкладов.СкладМаркетплейса);

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
				Продолжить;
			КонецЕсли;

			Шаблон = ?(ВыборкаСкладов.ЭтоГруппа, ШаблонПересеченияГруппыСклада, ШаблонПересеченияСклада);

			ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
					ВыборкаСкладов.ПредставлениеСклада1С,
					ВыборкаСкладов.СкладМаркетплейса);

			МассивПересечений.Добавить(ОписаниеПересечения);
		КонецЦикла;

		Если МассивПересечений.Количество() > 0 Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены склады, входящие в состав выбранной группы складов <%1>: %2.'");

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПроверки,
					ПредставлениеСклада,
					Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

			СообщенияПроверки.Добавить(ТекстСообщения);

			ПроверкаПройдена = Ложь;
		КонецЕсли;

		// Проверка на вхождение выбранного склада в иерархию записанных складов.

		Если ЗначениеЗаполнено(ПолноеНаименованиеУстанавливаемогоСклада) Тогда
			МассивПересечений = Новый Массив;

			ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница()].Выбрать();
			Пока ВыборкаСкладов.Следующий() Цикл
				Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
							ПредставлениеСклада, 
							ВыборкаСкладов.СкладМаркетплейса);

					СообщенияПроверки.Добавить(ТекстСообщения);

					ПроверкаПройдена = Ложь;
					Продолжить;
				КонецЕсли;

				НаименованиеСкладаВыборки = "/" + ВыборкаСкладов.НаименованиеСклада1С + "/";
				Если СтрНайти(ПолноеНаименованиеУстанавливаемогоСклада, НаименованиеСкладаВыборки) Тогда
					ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПересеченияГруппыСклада,
							ВыборкаСкладов.ПредставлениеСклада1С,
							ВыборкаСкладов.СкладМаркетплейса);

					МассивПересечений.Добавить(ОписаниеПересечения);

					ПроверкаПройдена = Ложь;
				КонецЕсли;
			КонецЦикла;

			Если МассивПересечений.Количество() > 0 Тогда
				Если ЭтоГруппаСкладов Тогда
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранная группа складов <%1>: %2.'");
				Иначе
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранный склад <%1>: %2.'");
				КонецЕсли;

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( ШаблонСообщенияПроверки,
						ПредставлениеСклада,
						Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
			КонецЕсли;
		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

		Если СообщенияПроверки.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрСоединить(СообщенияПроверки, Символы.ПС));
		КонецЕсли;
	КонецЕсли;

	Если ПроверкаПройдена Тогда
		ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи);
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции

Процедура ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи)

	НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
	НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ДанныеЗаписи.ВидОбъектаМаркетплейса);
	НаборЗаписей.Отбор.ИдентификаторОбъектаМаркетплейса.Установить(ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);

	Если ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
		Запись.ДатаАктуальности = ТекущаяДатаСеанса();
	КонецЕсли;

	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#КонецЕсли

