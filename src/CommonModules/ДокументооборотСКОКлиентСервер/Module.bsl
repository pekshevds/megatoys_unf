
#Область ПрограммныйИнтерфейс

Функция ПоддерживаетсяФормированиеПакетаДляВнесенияИзмененийВЕГРЮЛ() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	ПоддерживаетсяНачинаяС = ВерсияДляФормированиеПакетаЕГРЮЛ();

	Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, ПоддерживаетсяНачинаяС);
	Возврат Результат >= 0 ИЛИ ИспользуетсяРежимТестирования();
	
КонецФункции

Функция ВерсияДляФормированиеПакетаЕГРЮЛ() Экспорт
	
	Возврат "8.3.16.1791";
	
КонецФункции

Процедура ПриИнициализацииФормыРегламентированногоОтчета(Форма, КонтролирующийОрган = "ФНС", ПараметрыПрорисовкиПанели = Неопределено) Экспорт
	
	// если кнопка отправки отсутствует, то не будем регулировать
	КнопкаОтправитьВКонтролирующийОрган = Форма.Элементы.Найти("ОтправитьВКонтролирующийОрган");
	Если КнопкаОтправитьВКонтролирующийОрган = Неопределено Тогда
		КнопкаОтправитьВКонтролирующийОрган = Форма.Элементы.Найти("ФормаОтправитьВПФР");
		Если КнопкаОтправитьВКонтролирующийОрган = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// вызываем серверный обработчик
	Отчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ОрганизацияОтчета = ПолучитьОрганизациюПоФорме(Форма);
	ПараметрыПрорисовкиКнопокОтправки = Неопределено;
	
	ДокументооборотСКОВызовСервера.ПриИнициализацииФормыРегламентированногоОтчета(Отчет, ОрганизацияОтчета, КонтролирующийОрган, ПараметрыПрорисовкиКнопокОтправки, ПараметрыПрорисовкиПанели);
	
	// регулируем видимость кнопки в зависимости от результата
	УстановитьВидимостьГруппыКнопокОтправки(Форма, ПараметрыПрорисовкиКнопокОтправки);
	
КонецПроцедуры

Функция ПолучитьОрганизациюПоФорме(Форма) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "СтруктураРеквизитовФормы")
	И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.СтруктураРеквизитовФормы, "Организация") Тогда
		Возврат Форма.СтруктураРеквизитовФормы.Организация;
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "Объект")
	И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.Объект, "Организация") Тогда
		СсылкаНаОрганизацию = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОрганизациюОтправляемогоДокументаПоФорме(Форма);
		Возврат ?(ЗначениеЗаполнено(СсылкаНаОрганизацию), СсылкаНаОрганизацию, Форма.Объект.Организация);
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "ОтправкаОбъект")
	И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.ОтправкаОбъект, "Организация") Тогда
		Возврат Форма.ОтправкаОбъект.Организация;
	Иначе
		Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОрганизациюОтправляемогоДокументаПоФорме(Форма);
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////
// ВНИМАНИЕ!!! 
// Не удалять метод. Используется в 1С:УП Калуги Астрал
/////////////////////////////////////////////////////////////

Процедура УстановитьВидимостьГруппыКнопокОтправки(Форма, ПараметрыПрорисовкиКнопокОтправки) Экспорт
	
	Для Каждого Эл Из ПараметрыПрорисовкиКнопокОтправки Цикл
		ЭУ = Форма.Элементы.Найти(Эл.Ключ);
		Если ЭУ <> Неопределено Тогда
			ЭУ.Видимость = Эл.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма, КонтролирующийОрган) Экспорт
	
	ОтчетСсылка 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ОрганизацияОтчета 	= ПолучитьОрганизациюПоФорме(Форма);
	Возврат ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(ОтчетСсылка, ОрганизацияОтчета, КонтролирующийОрган);
	
КонецФункции

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач ИдентификаторНазначения  = "") Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Если ЗначениеЗаполнено(ИдентификаторНазначения) Тогда
		Сообщение.ИдентификаторНазначения  = ИдентификаторНазначения;
	КонецЕсли;	
	Сообщение.Сообщить();

КонецПроцедуры

Функция ЭтоВидОтправляемогоДокументаРеестраНДС(ВидОтчета) Экспорт
	
	ВидыРеестровНДС = ВидыОтправляемыхДокументовРеестровНДС();
	Возврат ВидыРеестровНДС.Найти(ВидОтчета) <> Неопределено;
	
КонецФункции

Функция ВидыОтправляемыхДокументовРеестровНДС() Экспорт
	
	Виды = Новый Массив;
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСДекларацииИТаможенныеДекларации23"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСДекларацииНаЭкспрессГрузы"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение1"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение2"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение3"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение4"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение5"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение6"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение7"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение8"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение9"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение10"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение11"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение12"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение13"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрНДСПриложение14"));
	
	Возврат Виды;

КонецФункции

Функция ЭтоВидОтправляемогоДокументаРеестраАкцизов(ВидОтчета) Экспорт
	
	ВидыРеестровАкцизов = ВидыОтправляемыхДокументовРеестровАкцизов();
	Возврат ВидыРеестровАкцизов.Найти(ВидОтчета) <> Неопределено;
	
КонецФункции

Функция ВидыОтправляемыхДокументовРеестровАкцизов() Экспорт
	
	Виды = Новый Массив;
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрАкцизыПриложение1"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрАкцизыПриложение2"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрАкцизыВычетыДенатурированныйЭтиловыйСпирт"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрАкцизыВычетыВиноматериалыВиногрИФруктСусло"));
	Виды.Добавить(ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрАкцизыВычетыВиноград"));
	
	Возврат Виды;
	
КонецФункции

Функция УдалитьРазделители(Знач АнализируемаяСтрока) Экспорт
	
	Разделители = " ""%&'()+,-./:;@_«№»";
	НоваяСтрока = "";
	
	Для Инд = 1 По СтрДлина(АнализируемаяСтрока) Цикл
		
		СимволАнализируемойСтроки = Сред(АнализируемаяСтрока, Инд, 1);
		
		ЭтоРазделитель = СтрНайти(Разделители, СимволАнализируемойСтроки) <> 0;
		Если НЕ ЭтоРазделитель Тогда
			НоваяСтрока = НоваяСтрока + СимволАнализируемойСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ПроверитьЦифровойКодЗаданнойДлины(Параметр, Длина, ПропускатьПустой = Ложь) Экспорт
	
	Параметр = СокрЛП(Параметр);
	
	Если ПустаяСтрока(Параметр) И ПропускатьПустой Тогда
		
	ИначеЕсли СтрДлина(Параметр) = Длина Тогда
		
		Для Счетчик = 1 по Длина Цикл
			
			КодСимвола = КодСимвола(Сред(Параметр, Счетчик, 1));
			
			Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьКПП(КПП) Экспорт
	
	Параметр = СокрЛП(КПП);
	
	Если СтрДлина(Параметр) = 9 Тогда
		
		Для Счетчик = 1 по 9 Цикл
			
			КодСимвола = КодСимвола(Сред(Параметр, Счетчик, 1));
			
			Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
				
				Если Счетчик = 5 ИЛИ Счетчик = 6 Тогда
					
					Если НЕ (КодСимвола >= 65 И КодСимвола <= 90) Тогда
						
						Возврат Ложь;
						
					КонецЕсли;
					
				Иначе
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьРегистрационныйНомерПФР(Параметр, ПропускатьПустой = Ложь) Экспорт
	
	Возврат (ПустаяСтрока(Параметр) И ПропускатьПустой)
	ИЛИ (Сред(Параметр,4,1) = "-" 
	И Сред(Параметр,8,1) = "-" 
	И СтрДлина(Параметр) = 14 
	И ПроверитьЦифровойКодЗаданнойДлины(СтрЗаменить(Параметр,"-",""),12));
	
КонецФункции

Функция ЭтоФНС(КонтролирующийОрган) Экспорт
	
	Возврат КонтролирующийОрган = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС")
		ИЛИ КонтролирующийОрган = "ФНС";
		
КонецФункции

Функция НайденыЗапрещенныеСимволы(АнализируемаяСтрока, НаименованиеРеквизита, Поле, ТихийРежим = Ложь, ТекстОшибки = "") Экспорт
	
	ЗапрещенныеСимволы = ЗапрещенныеСимволыВСтроке(АнализируемаяСтрока);
	Если СтрДлина(ЗапрещенныеСимволы) = 0 Тогда
		
		Возврат Ложь;
		
	Иначе
		
		ЗапрещенныеСимволыПрописью 		= НаименованиеРеквизита + НСтр("ru = ' содержит запрещенные символы: '");
		ДлинаСтрокиЗапрещенныхСимволов 	= СтрДлина(ЗапрещенныеСимволы);
		
		Для Индекс = 1 По ДлинаСтрокиЗапрещенныхСимволов Цикл
			
			ЗапрещенныйСимвол = Сред(ЗапрещенныеСимволы, Индекс, 1);
			
			ЗапрещенныеСимволыПрописью = 
				ЗапрещенныеСимволыПрописью
				+ НазваниеСимвола(ЗапрещенныйСимвол) 
				+ ?(Индекс = ДлинаСтрокиЗапрещенныхСимволов, "", ", ");
		
		КонецЦикла; 
		
		ТекстОшибки = ЗапрещенныеСимволыПрописью;
		Если НЕ ТихийРежим Тогда
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ЗапрещенныеСимволыПрописью, , Поле);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ЗапрещенныеСимволыВСтроке(АнализируемаяСтрока) Экспорт
	
	// Исключение из стандарта 456.
	РазрешенныеСимволыПриказФНС142 = " ""%&'()+,-./0123456789:;@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyzЁ«ё№»АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя";
	
	// Вариант списка разрешенных символов от Калуги-Астрал:
	// А-ЯЁа-яёA-Za-z0-9 "%&'()+,-.:;@_№«»!?/=
	ДополнительныеСимволыОтКалугиАстрал = "!?=";
	
	РазрешенныеСимволыПриказФНС142 = РазрешенныеСимволыПриказФНС142 + ДополнительныеСимволыОтКалугиАстрал;
	
	ЗапрещенныеСимволы = "";
	
	Для Инд = 1 По СтрДлина(АнализируемаяСтрока) Цикл
		
		СимволАнализируемойСтроки = Сред(АнализируемаяСтрока, Инд, 1);
		
		СимволНаходитсяВМножествеЗапрещенных = СтрНайти(РазрешенныеСимволыПриказФНС142, СимволАнализируемойСтроки) = 0;
		Если СимволНаходитсяВМножествеЗапрещенных Тогда
			
			СимволЕщеНеДобавленВРезультат = СтрНайти(ЗапрещенныеСимволы, СимволАнализируемойСтроки) = 0;
			Если СимволЕщеНеДобавленВРезультат Тогда
				
				ЗапрещенныеСимволы = ЗапрещенныеСимволы + СимволАнализируемойСтроки;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗапрещенныеСимволы;
	
КонецФункции

Функция ПараметрыОткрытияМастера() Экспорт
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СоздатьНовоеЗаявление",		Истина);
	ДополнительныеПараметры.Вставить("Организация", 				Неопределено);
	ДополнительныеПараметры.Вставить("ЗначениеКопирования", 		Неопределено);
	ДополнительныеПараметры.Вставить("ВидЗаявления", 				Неопределено);
	ДополнительныеПараметры.Вставить("ПараметрыОткрытияМастера",	Неопределено);
	ДополнительныеПараметры.Вставить("РучнойВвод", 					Ложь);
	ДополнительныеПараметры.Вставить("ИгнорироватьКонфликт", 		Ложь);
	ДополнительныеПараметры.Вставить("КриптопровайдерПриКонфликте", Неопределено);
	ДополнительныеПараметры.Вставить("НовыйСертификат", 			Неопределено);
	
	// Не сереализуются!
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 		Неопределено);
	ДополнительныеПараметры.Вставить("ВладелецОткрываемойФормы",	Неопределено);
	
	Возврат ДополнительныеПараметры;
		
КонецФункции

Функция ПроверитьСНИЛС(Параметр, ПропускатьПустой = Ложь, ПроверятьКонтрольноеЧисло = Ложь) Экспорт
	
	ПараметрТолькоЦифры = СтрЗаменить(Параметр,"-","");
	ПараметрТолькоЦифры = СтрЗаменить(ПараметрТолькоЦифры," ","");
	
	Результат = (ПустаяСтрока(Параметр) И ПропускатьПустой)
	ИЛИ (Сред(Параметр,4,1) = "-" 
	И Сред(Параметр,8,1) = "-" 
	И Сред(Параметр,12,1) = " " 
	И СтрДлина(Параметр) = 14 
	И ПроверитьЦифровойКодЗаданнойДлины(ПараметрТолькоЦифры,11));
	
	Если Результат И ПроверятьКонтрольноеЧисло  Тогда
		
		ПроверяемоеЧисло = Лев(ПараметрТолькоЦифры,9);
		КонтрольноеЧисло = Прав(ПараметрТолькоЦифры,2);
		
		Если (Число(ПроверяемоеЧисло) > 1001998) Тогда
			
			Сумма =0;
			
			Для Счетчик = 1 По СтрДлина(ПроверяемоеЧисло) Цикл
				Цифра = Число(Сред(ПроверяемоеЧисло, Счетчик, 1));
				Сумма=Сумма + Цифра * (СтрДлина(ПроверяемоеЧисло) - Счетчик +1);
			КонецЦикла;
			
			Если Сумма < 100 Тогда
				КонтрольнаяСумма = Сумма;
			ИначеЕсли Сумма=100 ИЛИ Сумма=101 Тогда
				КонтрольнаяСумма = 0;
			Иначе
				Сумма = Сумма%101;
				
				Если (Сумма < 100) Тогда
					КонтрольнаяСумма = Сумма;
				Иначе
					КонтрольнаяСумма = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат КонтрольнаяСумма = Число(КонтрольноеЧисло);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПроверкиРеквизитов() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	
	ДополнительныеПараметры.Вставить("ЕстьОшибка",  Ложь);
	ДополнительныеПараметры.Вставить("Пустой",      Ложь);
	ДополнительныеПараметры.Вставить("ТекстОшибки", "");
	
	// Не заполняются в случае проверки одного реквизита:
	
	// Реквизит формы, который нужно оформлять:
	// треугольничек ошибки или красная надпись
	ДополнительныеПараметры.Вставить("Реквизит", "");
	// Указатель, к которому привязывается сообщение об ошибке
	ДополнительныеПараметры.Вставить("Поле",     "");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения) Экспорт
	
	ЕстьОшибка = Ложь;
	Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
		РезультатПроверки.ЕстьОшибка = Истина;
		МастерДалее = Ложь;
		ЕстьОшибка  = Истина;
		Если ВыводитьСообщения Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ОбщегоНазначения.СообщитьПользователю(РезультатПроверки.ТекстОшибки, ,РезультатПроверки.Поле);
			#Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПроверки.ТекстОшибки, ,РезультатПроверки.Поле);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОшибка;
	
КонецФункции

// Сравнивает одну версию формата с другой, например "5.05" и "5.04"
// Написана на базе ОбщегоНазначенияКлиентСервер.СравнитьВерсии
// 
// Возвращаемое значение:
//   Число   - отрицательное, если первая меньше второй.
//           - 0, если равны.
//           - положительное, если первая больше второй.
Функция СравнитьВерсииФормата(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Версия1 = СтрРазделить(СтрокаВерсии1, ".");
	Версия2 = СтрРазделить(СтрокаВерсии2, ".");
	
	Результат = 0;
	Для Разряд = 0 По 1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс) Экспорт
	
	Если ЗначениеЗаполнено(ДобСтрока) Тогда
		Текст = Текст + Префикс + ДобСтрока;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьПредставлениеФИО(СтрокаФИО) Экспорт
	
	Представление = "";
	ДобавитьРеквизит(Представление, СтрокаФИО.Фамилия, "");
	ДобавитьРеквизит(Представление, СтрокаФИО.Имя, " ");
	ДобавитьРеквизит(Представление, СтрокаФИО.Отчество, " ");
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьПредставлениеУдостоверение(СтрокаУдостоверения) Экспорт
	
	Представление = "";
	Если (ТипЗнч(СтрокаУдостоверения) = Тип("Структура")
		ИЛИ ТипЗнч(СтрокаУдостоверения) = Тип("ФиксированнаяСтруктура"))
		И СтрокаУдостоверения.Свойство("ДокументВид")
		И СтрокаУдостоверения.Свойство("ДокументСерия")
		И СтрокаУдостоверения.Свойство("ДокументНомер")
		И СтрокаУдостоверения.Свойство("ДокументДатаВыдачи")
		И СтрокаУдостоверения.Свойство("ДокументКемВыдан")
		И СтрокаУдостоверения.Свойство("ДокументКодПодразделения") Тогда
		
		ВидДок = СтрокаУдостоверения.ДокументВид;
		СерДок = СтрокаУдостоверения.ДокументСерия;
		НомДок = СтрокаУдостоверения.ДокументНомер;
		ДатаДок = СтрокаУдостоверения.ДокументДатаВыдачи;
		ВыдДок = СтрокаУдостоверения.ДокументКемВыдан;
		КодВыдДок = СтрокаУдостоверения.ДокументКодПодразделения;
		
	Иначе
		ВидДок = СтрокаУдостоверения.ВидДок;
		СерДок = СтрокаУдостоверения.СерДок;
		НомДок = СтрокаУдостоверения.НомДок;
		ДатаДок = СтрокаУдостоверения.ДатаДок;
		ВыдДок = СтрокаУдостоверения.ВыдДок;
		КодВыдДок = СтрокаУдостоверения.КодВыдДок;
	КонецЕсли;
	
	ДобавитьРеквизит(Представление, ВидДок, 					"");
	ДобавитьРеквизит(Представление, СерДок, 					" ");
	ДобавитьРеквизит(Представление, НомДок, 					" " + НСтр("ru = '№'"));
	ДобавитьРеквизит(Представление, Формат(ДатаДок, "ДЛФ=ДД"), 	" " + НСтр("ru = 'выдан'") + " ");
	ДобавитьРеквизит(Представление, ВыдДок, 					" ");
	ДобавитьРеквизит(Представление, КодВыдДок, 					", " + НСтр("ru = 'код подразделения'") + ":");
	
	Возврат Представление;
	
КонецФункции

Функция ПроверитьИННВладельцаЭП(Форма) Экспорт

	ТекстОшибки = "";
	
	РезультатПроверки = РезультатПроверкиРеквизитов();
	
	ФИО = ФамилияИнициалы(Форма.ВладелецЭЦПФамилия, Форма.ВладелецЭЦПИмя, Форма.ВладелецЭЦПОтчество);
	
	Если ПустаяСтрока(ФИО) Тогда
		
		ТекстОшибки = НСтр("ru = 'Заполните ИНН владельца эл. подписи в карточке физ. лица'");
		
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Пустой	  = Истина;
		
	ИначеЕсли ПустаяСтрока(Форма.ВладелецЭЦПИНН) Тогда
		
		ТекстОшибки = НСтр("ru = 'Заполните ИНН владельца эл. подписи (%1) в карточке физ. лица'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ФИО);
		
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Пустой	  = Истина;
		
	ИначеЕсли СтрДлина(Форма.ВладелецЭЦПИНН) <> 12 Тогда
		
		ТекстОшибки = НСтр("ru = 'ИНН владельца эл. подписи (%1) должен состоять из 12 цифр'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ФИО);
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Пустой	  = СтрДлина(Форма.ВладелецЭЦПИНН) < 12;

	Иначе          
		
		ТекстОшибкиПоСути = "";
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Форма.ВладелецЭЦПИНН, Ложь, ТекстОшибкиПоСути);
		
		Если ЗначениеЗаполнено(ТекстОшибкиПоСути) Тогда
			
			ТекстОшибки = НСтр("ru = 'ИНН владельца эл. подписи (%1) некорректный:'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ФИО);
			ТекстОшибки = ТекстОшибки + Символы.ПС +  ТекстОшибкиПоСути;
			
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ФамилияИнициалы(Фамилия, Имя, Отчество) Экспорт
	
	ФИО = Новый Структура();
	ФИО.Вставить("Фамилия", 	СокрЛП(Фамилия));
	ФИО.Вставить("Имя", 		СокрЛП(Имя));
	ФИО.Вставить("Отчество", 	СокрЛП(Отчество));
		
	Возврат ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);

КонецФункции

Функция ИспользуетсяРежимТестирования() Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ЭтоРежимТестирования = ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования();
	#Иначе
		ЭтоРежимТестирования = ДокументооборотСКОКлиент.ИспользуетсяРежимТестирования();
	#КонецЕсли
	
	Возврат ЭтоРежимТестирования;
	
КонецФункции

Функция КоличествоПолномочийМЧДЦБ() Экспорт
	
	Возврат 22;
	
КонецФункции

Функция ОбозначениеПолномочияМЧДЦБПоКоду(ПолномочиеПредставителя, ВернутьНаименование = Ложь) Экспорт
	
	Если ПолномочиеПредставителя = "99" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Все'");
		Иначе
			Возврат "All";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "01" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Активация Личного кабинета'");
		Иначе
			Возврат "Activation";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "02" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Электронный документооборот'");
		Иначе
			Возврат "Letters";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "03" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Информационные агентства'");
		Иначе
			Возврат "AKRI";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "04" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Взаимодействие с Агентством страхования вкладов'");
		Иначе
			Возврат "ASV";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "05" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Взаимодействие с ЦИК'");
		Иначе
			Возврат "CIK";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "06" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Данные ГБО ФНС России'");
		Иначе
			Возврат "FNS";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "07" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Направление статистической отчетности'");
		Иначе
			Возврат "Reporting-FSN";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "08" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Направление отчетности НФО'");
		Иначе
			Возврат "Reporting-NFO";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "09" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Представление информации о ВПОДК и их результатах'");
		Иначе
			Возврат "VPODK";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "10" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Унифицированный обмен'");
		Иначе
			Возврат "Universal";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "11" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Представление первичных документов'");
		Иначе
			Возврат "Source_documents";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "12" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Сбор Информационного фонда Росстата'");
		Иначе
			Возврат "Rosstat";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "13" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Направление отчетности КО'");
		Иначе
			Возврат "Reporting-KO";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "14" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Расчёт и регулирование размера обязательных резервов'");
		Иначе
			Возврат "FOR";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "15" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'ЭДО ДКО'");
		Иначе
			Возврат "EDO_DKO";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "16" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Процедура допуска'");
		Иначе
			Возврат "Dopusk";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "17" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Представление данных АО ДОМ.РФ в Банк России'");
		Иначе
			Возврат "DOM.RF";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "18" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Массовая рассылка в соответствии со 115-ФЗ'");
		Иначе
			Возврат "639-P";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "19" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Представление информации по потоку ""Know Your Customer""'");
		Иначе
			Возврат "KYC";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "20" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Пенсионный фонд РФ'");
		Иначе
			Возврат "PFR";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "21" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Направление отчетности субъектов НПС'");
		Иначе
			Возврат "Reporting-SNPS";
		КонецЕсли;
	ИначеЕсли ПолномочиеПредставителя = "22" Тогда
		Если ВернутьНаименование Тогда
			Возврат НСтр("ru = 'Документы по допуску ценных бумаг'");
		Иначе
			Возврат "RVECB";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ФамилияИнициалыПоСсылке(СсылкаНаФизЛицо) Экспорт
	
	ФИО = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(СсылкаНаФизЛицо);
		
	Возврат ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);

КонецФункции

Функция ОтправитьHTTPЗапрос(ТранспортныйМодуль, Параметры) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КодСостояния");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	Если Параметры.ВозвращатьСодержимоеРезультата Тогда
		ВозвращаемоеЗначение.Вставить("Заголовки");
		ВозвращаемоеЗначение.Вставить("ТекстОтвета");
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Обмен из веб-клиента недоступен. Используйте тонкий клиент'");
	#Иначе
		HTTPЗапрос = Новый HTTPЗапрос(Параметры.АдресЗапроса, Параметры.Заголовки);
		
		ЭтоДвоичныеДанные 	= ТипЗнч(Параметры.ТелоЗапроса) = Тип("ДвоичныеДанные");
		ЭтоФайл 			= ТипЗнч(Параметры.ТелоЗапроса) = Тип("Файл");
		
		Если Параметры.ТелоЗапроса <> Неопределено Тогда
			Если ЭтоДвоичныеДанные Тогда
				HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Параметры.ТелоЗапроса);
			ИначеЕсли ЭтоФайл Тогда
				HTTPЗапрос.УстановитьИмяФайлаТела(Параметры.ТелоЗапроса.ПолноеИмя);
			Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(Параметры.ТелоЗапроса, КодировкаТекста.UTF8,
					ИспользованиеByteOrderMark.НеИспользовать);
			КонецЕсли;
		КонецЕсли;
		
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTP");
		
		HTTPОтвет 	= Неопределено;
		ТекстОшибки = "";
		
		Попытка
			Соединение = Новый HTTPСоединение(
				СокрЛП(ТранспортныйМодуль.Адрес),
				ТранспортныйМодуль.Порт,,,
				ИнтернетПрокси,
				ТранспортныйМодуль.Таймаут);
			
			Если Параметры.ТипЗапроса = "GET" Тогда
				HTTPОтвет = Соединение.Получить(HTTPЗапрос);
			ИначеЕсли Параметры.ТипЗапроса = "POST" Тогда
				HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
			ИначеЕсли Параметры.ТипЗапроса = "DELETE" Тогда
				HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
			КонецЕсли;
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка отправки %1-запроса по адресу %2'"),
				Параметры.ТипЗапроса,
				Параметры.АдресЗапроса) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ЗаписьЖурналаРегистрации(
					Параметры.СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстСообщения);
			#Иначе
				ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
					Параметры.СобытиеЖурналаРегистрации,
					"Ошибка",
					ТекстСообщения,,
					Истина);
			#КонецЕсли
		КонецПопытки;
		
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		Если HTTPОтвет <> Неопределено Тогда
			ВозвращаемоеЗначение.КодСостояния 	= HTTPОтвет.КодСостояния;
			Если Параметры.ВозвращатьСодержимоеРезультата Тогда
				ВозвращаемоеЗначение.Заголовки 		= HTTPОтвет.Заголовки;
				Если ТранспортныйМодуль.ПолучитьДвоичныеДанные = Истина Тогда
					ВозвращаемоеЗначение.ТекстОтвета = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
				Иначе 
					ВозвращаемоеЗначение.ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИННИзСертификата(Сертификат, ОбрезатьНули = Истина, ЭтоЮЛ = Неопределено) Экспорт
	
	ИННы = ИННыИзСертификата(Сертификат, ОбрезатьНули);
	
	ИНН = "";
	Если (ЭтоЮЛ = Неопределено ИЛИ ЭтоЮЛ) 
		И ЗначениеЗаполнено(ИННы.ЮЛ) Тогда
		ИНН = ИННы.ЮЛ;
	Иначе
		ИНН = ИННы.ФЛ;
	КонецЕсли;
	
	Возврат ИНН;
	
КонецФункции

Функция ИННыИзСертификата(Сертификат, ОбрезатьНули = Истина) Экспорт
	
	// Орг |INN орг          |      |INNLE орг     + INN ФЛ           |     |Рук|INNLE орг     + INN ФЛ
	//     |ИНН              |      |1.2.643.100.4   ИНН              |     |   |1.2.643.100.4   ИНН
	//     |1.2.643.3.131.1.1|      |(10 цифр)       1.2.643.3.131.1.1|     |   |(10 цифр)       1.2.643.3.131.1.1
	//     |(00+10 цифр)     |      |                (12 цифр)        |     |   |                (12 цифр)
	//     |                 |      |                                 |     |---|----------------------------
	//     |                 |      |                                 |     |Др.|INN ФЛ
	//     |                 |      |                                 |     |   |ИНН
	//     |                 |      |                                 |     |   |1.2.643.3.131.1.1
	//     |                 |      |                                 |     |   |(12 цифр)
	// ----------------------1.09.21----------------------------------1.01.22--------------------------------
	// ИП  |INN ИП           |      |INN ИП                           |     |INN ИП
	//     |ИНН              |      |ИНН                              |     |ИНН
	//     |1.2.643.3.131.1.1|      |1.2.643.3.131.1.1                |     |1.2.643.3.131.1.1
	//     |(12 цифр)        |      |(12 цифр)                        |     |(12 цифр)
	
	ЭтоСписокЗначений = ТипЗнч(Сертификат) = Тип("СписокЗначений");
	ЭтоСоотвествие    = ТипЗнч(Сертификат) = Тип("Соответствие");
	ЭтоСтруктура      = ТипЗнч(Сертификат) = Тип("Структура") ИЛИ ТипЗнч(Сертификат) = Тип("ФиксированнаяСтруктура");
	
	Имена = Новый Массив;
	
	// ИНН ЮЛ(10 цифр) после 01.09.2021
	Имена.Добавить("_1_2_643_100_4"); 
	Имена.Добавить("OID1_2_643_100_4");
	Имена.Добавить("INNLE");
	Если ЭтоСоотвествие ИЛИ ЭтоСписокЗначений Тогда
		Имена.Добавить("1.2.643.100.4");
	КонецЕсли;	
	
	// ИНН ИП/ФЛ(12 цифр) или ИНН ЮЛ(00+10 цифр) до 01.09.2021
	Имена.Добавить("OID1_2_643_3_131_1_1");
	Имена.Добавить("INN");
	Имена.Добавить("ИНН");
	Если ЭтоСоотвествие ИЛИ ЭтоСписокЗначений Тогда
		Имена.Добавить("1.2.643.3.131.1.1");
	КонецЕсли;
	
	ИННы = Новый Структура("ЮЛ,ФЛ", "","");
	
	Для каждого Имя Из Имена Цикл
		
		Значение = ПолеСертификатаПоИмени(Имя, Сертификат);
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Длина = СтрДлина(Значение);
		Если Длина = 10 Тогда
			// 10 цифр
			ИННы.ЮЛ = Значение;
		ИначеЕсли Лев(Значение, 2) = "00" И ОбрезатьНули Тогда
			// 12 цифр (00+10 цифр)
			ИННы.ЮЛ = ИННБезНулей(Значение);
		ИначеЕсли Лев(Значение, 2) = "00" И НЕ ОбрезатьНули Тогда
			// 12 цифр (00+10 цифр)
			ИННы.ЮЛ = Значение;
		Иначе
			// 12 цифр
			ИННы.ФЛ = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИННы;
	
КонецФункции

Функция ИННБезНулей(Знач ИНН) Экспорт

	Если Лев(ИНН, 2) = "00" Тогда
		ИНН = Сред(ИНН, 3);
	КонецЕсли;
	
	Возврат ИНН;
	
КонецФункции

Функция ВладелецСертификат(Сертификат) Экспорт
	
	Если Сертификат.Свойство("ВладелецСтруктура") Тогда
		ВладелецСтруктура = Сертификат.ВладелецСтруктура;
	ИначеЕсли Сертификат.Свойство("Субъект") Тогда
		ВладелецСтруктура = Сертификат.Субъект;
	Иначе
		ВладелецСтруктура = Неопределено;
	КонецЕсли;
	
	Возврат ВладелецСтруктура;
	
КонецФункции

Функция ЗначенияСовпадают(Значение1, Значение2) Экспорт
	
	Значение1Заполнено = ЗначениеЗаполнено(Значение1);
	Значение2Заполнено = ЗначениеЗаполнено(Значение2);
	
	Если Значение1Заполнено И НЕ Значение2Заполнено 
		ИЛИ НЕ Значение1Заполнено И Значение2Заполнено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Подстрока1 = ПодстрокаДляСравнения(Значение1);
	Подстрока2 = ПодстрокаДляСравнения(Значение2);
	
	Совпадают1 = Подстрока1 = Подстрока2;
	
	ЕстьВхождение1 = СтрНайти(Подстрока1, Подстрока2);
	ЕстьВхождение2 = СтрНайти(Подстрока2, Подстрока1);
	
	Совпадают2 = ЕстьВхождение1 ИЛИ ЕстьВхождение2;
	
	Цифры1 = ОбработкаЗаявленийАбонентаКлиентСервер.ЦифрыИзСтроки(Подстрока1, Ложь);
	Цифры2 = ОбработкаЗаявленийАбонентаКлиентСервер.ЦифрыИзСтроки(Подстрока2, Ложь);
	
	Совпадают3 = Цифры1 = Цифры2 И СтрДлина(Цифры1) > 0;
	
	Слово1 = СамоеБольшоеСлово(Подстрока1);
	Слово2 = СамоеБольшоеСлово(Подстрока2);
	
	Совпадают4 = Слово1 = Слово2;
	
	Совпадают = 
		Совпадают1
		ИЛИ Совпадают2
		ИЛИ Совпадают3
		ИЛИ Совпадают4;
	
	Возврат Совпадают;
	
КонецФункции

Функция СамоеБольшоеСлово(Текст)
	
	Слова = СтрРазделить(Текст, " ");
	МаксСлово = "";
	Для каждого Слово Из Слова Цикл
		Если СтрДлина(СокрЛП(Слово)) > СтрДлина(СокрЛП(МаксСлово)) Тогда
			МаксСлово = СокрЛП(Слово);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксСлово;
	
КонецФункции

Функция ПодстрокаДляСравнения(Знач Текст)
	
	Текст = Лев(Текст, 2000);
	Текст = Врег(Текст);
	Текст = СтрЗаменить(Текст, "_", " ");
	Текст = СокрЛП(Текст);
	
	Возврат Текст;
	
КонецФункции

Функция ИмяФайлаЭПФайлаОписиИсходящихДокументов(Знач ИмяФайла) Экспорт
	
	ИмяФайлаБезРасширения = Сред(ИмяФайла, 1, СтрДлина(ИмяФайла) - 4);
	
	// ПРИКАЗ от 28 ноября 2016 г. N ММВ-7-6/643@
	//Имя файла ЭП имеет следующий вид:
	//ИмяФайл_XXX_N.sgn, где:
	//ИмяФайл - имя файла, представляемого в налоговый орган документа в соответствии с утвержденным форматом для данного документа, без расширения и точки;
	//XXX - постфикс файла ЭП, принимающий значение "SGN";
	//N - идентификационный номер файла (GUID);

	GUID 		= ВРЕГ(Строка(Новый УникальныйИдентификатор));
	Результат 	= ИмяФайлаБезРасширения + "_SGN_" + GUID + ".sgn";
	
	Возврат Результат;
	
КонецФункции

Функция ПодсистемаЦБСуществует() Экспорт
	
	Имя = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВЦБ";
	Возврат ПодсистемаСуществует(Имя);
	
КонецФункции

Функция ПодсистемаУдалитьЦБСуществует() Экспорт
	
	Имя = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.УдалитьСдачаОтчетностиВБанкРоссии";
	Возврат ПодсистемаСуществует(Имя);
	
КонецФункции

Функция ПодсистемаЦПРРМЧДСуществует() Экспорт
	
	Имя = "СтандартныеПодсистемы.МашиночитаемыеДоверенности";
	Возврат ПодсистемаСуществует(Имя);
	
КонецФункции

Функция ПодсистемаСуществует(Имя) Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ОбщегоНазначения.ПодсистемаСуществует(Имя);
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(Имя);
	#КонецЕсли
	
	Возврат Ложь;
	
КонецФункции

// Обход ошибки платформы 10214719 Веб - не прорисовываются элементы управления
Процедура АктивизироватьСтраницу(МногостраничныйЭлемент, ТекущаяСтраница) Экспорт
	
	Для каждого Страница Из МногостраничныйЭлемент.ПодчиненныеЭлементы Цикл
		Если Страница <> ТекущаяСтраница Тогда
			Страница.Видимость = Ложь;
		Иначе
			Страница.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
	МногостраничныйЭлемент.ТекущаяСтраница 	= ТекущаяСтраница;
	
КонецПроцедуры

Функция ПредставлениеПакетаСДопДокументами(СМаленькойБуквы = Ложь) Экспорт

	Если СМаленькойБуквы Тогда
		Возврат НСтр("ru = 'пакет с доп. документами для ФНС'");
	Иначе
		Возврат НСтр("ru = 'Пакет с доп. документами для ФНС'");
	КонецЕсли;

КонецФункции

Функция ПредставлениеПакетаСДопДокументамиВРодительномПадеже(СМаленькойБуквы = Ложь) Экспорт

	Если СМаленькойБуквы Тогда
		Возврат НСтр("ru = 'пакета с доп. документами для ФНС'");
	Иначе
		Возврат НСтр("ru = 'Пакета с доп. документами для ФНС'");
	КонецЕсли;

КонецФункции

Процедура ИзменитьОформлениеДокумента(
		Форма, 
		ВидДокумента, 
		Размер, 
		Количество, 
		ИмяПервого, 
		Обязательно = Истина,
		ПараметрыПредметаИсчисления1 = "файл",
		ПараметрыПредметаИсчисления2 = "файла",
		ПараметрыПредметаИсчисления3 = "файлов",
		Род = "м",
		СканированиеДоступно = Неопределено) Экспорт
		
	Если СканированиеДоступно = Неопределено Тогда
		СканированиеДоступно = Форма.СканированиеДоступно;
	КонецЕсли;
		
	ЗапретитьИзменение = Форма.ЗапретитьИзменение;
	Элементы           = Форма.Элементы;
	КрестикОчистки     = Элементы["ОчиститьСсылка" + ВидДокумента];
	
	Размер = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(Размер);
	
	Если Количество = 0 Тогда
		
		КрестикОчистки.Видимость = Ложь;
		
		Если Обязательно Тогда
			Цвет = Форма.КрасныйЦвет;
		Иначе
			Цвет = Новый Цвет(28, 85, 174);
		КонецЕсли;
		
		Если ЗапретитьИзменение Тогда
			ЗаголовокСсылки = НСтр("ru = '<%1 не выбран>'");
			ЗаголовокСсылки = СтрШаблон(ЗаголовокСсылки, ПараметрыПредметаИсчисления1);
		ИначеЕсли СканированиеДоступно Тогда
			
			СтрокаОтсканируйте = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Отсканировать'"),
				,
				Цвет,
				,
				"Отсканируйте");
				
			СтрокаВыберите = Новый ФорматированнаяСтрока(
				НСтр("ru = 'выбрать '") + ПараметрыПредметаИсчисления1,
				,
				Цвет,
				,
				"выберите");
				
			ЗаголовокСсылки = Новый ФорматированнаяСтрока(СтрокаОтсканируйте, НСтр("ru = ' или '"), СтрокаВыберите, " ");
			
		Иначе
			
			// Неразрывный пробел в середине - обход ошибки платформы 
			// 10187265 веб - Форматированная строка разбивается на две, хотя не должна
			ЗаголовокСсылки = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Выбрать'") + Символы.НПП + ПараметрыПредметаИсчисления1,
				,
				Цвет,
				,
				"выберите");
			
		КонецЕсли;
			
		Элементы["Ссылка" + ВидДокумента].Заголовок = ЗаголовокСсылки;
		
	ИначеЕсли Количество = 1 Тогда
		
		Представление = ИмяПервого + " (" + Размер + ")";
		Представление = СтрЗаменить(Представление, " ", Символы.НПП);
		
		Элементы["Ссылка" + ВидДокумента].Заголовок = Новый ФорматированнаяСтрока(Представление,,,,"Файл");
		
		КрестикОчистки.Видимость = НЕ Форма.ЗапретитьИзменение;
		
	Иначе
		
		Количество = ДлительнаяОтправкаКлиентСервер.ЧислоИПредметИсчисления(
			Количество,
			ПараметрыПредметаИсчисления1,
			ПараметрыПредметаИсчисления2,
			ПараметрыПредметаИсчисления3,
			Род);
		
		Представление = Количество + " (" + Размер + ")";
		Представление = СтрЗаменить(Представление, " ", Символы.НПП);
		
		Элементы["Ссылка" + ВидДокумента].Заголовок = Новый ФорматированнаяСтрока(Представление,,,,"Файл");
		
		КрестикОчистки.Видимость = НЕ Форма.ЗапретитьИзменение;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоБанковскаяГарантия(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = ОбработкаЗаявленийАбонентаКлиентСервер.КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоФормаЗаявления = СтрНайти(ИмяФормы, "БанковскиеГарантии"); 
	Возврат ЭтоФормаЗаявления;
	
КонецФункции

Функция НазваниеСимвола(Символ) Экспорт
	
	Если Символ = Символы.ВК Тогда
		НазваниеСимвола = НСтр("ru = 'символ возврата каретки'");
	ИначеЕсли Символ = Символы.ВТаб Тогда
		НазваниеСимвола = НСтр("ru = 'символ табуляции'");
	ИначеЕсли Символ = Символы.НПП Тогда
		НазваниеСимвола = НСтр("ru = 'символ неразрывного пробела'");
	ИначеЕсли Символ = Символы.ПС Тогда
		НазваниеСимвола = НСтр("ru = 'символ перевода строки'");
	ИначеЕсли Символ = Символы.ПФ Тогда
		НазваниеСимвола = НСтр("ru = 'символ перевода страницы'");
	ИначеЕсли Символ = Символы.Таб Тогда
		НазваниеСимвола = НСтр("ru = 'символ табуляции'");
	Иначе
		НазваниеСимвола = Символ;
	КонецЕсли;
			
	Возврат НазваниеСимвола;
	
КонецФункции

Функция ПредставлениеСертификата(Сертификат, ВключитьИздателя = Истина) Экспорт
	
	Если Сертификат = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЕстьСвойство(Сертификат, "ДействителенС") Тогда
		СертификатДействителенС = Формат(Сертификат.ДействителенС, "ДЛФ=D");
	ИначеЕсли ЕстьСвойство(Сертификат, "ДатаНачала") Тогда
		СертификатДействителенС = Формат(Сертификат.ДатаНачала, "ДЛФ=D");
	КонецЕсли;
		
	Если ЕстьСвойство(Сертификат, "ДействителенПо") Тогда
		СертификатДействителенПо = Формат(Сертификат.ДействителенПо, "ДЛФ=D");
	ИначеЕсли ЕстьСвойство(Сертификат, "ДатаОкончания") Тогда
		СертификатДействителенПо = Формат(Сертификат.ДатаОкончания, "ДЛФ=D");
	КонецЕсли;

	Если НЕ ВключитьИздателя Тогда
		Издатель = "";
	ИначеЕсли ЕстьСвойство(Сертификат, "ПоставщикСтруктура") И ЕстьСвойство(Сертификат.ПоставщикСтруктура, "O") Тогда
		Издатель = ", " + Сертификат.ПоставщикСтруктура["O"];
	ИначеЕсли ЕстьСвойство(Сертификат, "Издатель") И ЕстьСвойство(Сертификат.Издатель, "O") Тогда
		Издатель = ", " + Сертификат.Издатель["O"];
	Иначе
		Издатель = "";
	КонецЕсли;
	
	Наименование = НаименованиеСертификата(Сертификат);
	
	Шаблон = НСтр("ru = '%1 (%2-%3)%4'");
	
	Представление = СтрШаблон(
		Шаблон,
		Наименование,
		СертификатДействителенС,
		СертификатДействителенПо,
		Издатель);
	
	Возврат Представление;
	
КонецФункции

#Область ЗаявленияВПФР

Функция НужноОтправитьЗаявлениеНаСертификат(Состояние) Экспорт
	
	// Сейчас этот вид заявлений не используется
	Возврат Ложь;
		
КонецФункции

Процедура ИзменитьОформлениеСтраницыОтправкаЗаявленияВПФР(Форма) Экспорт

	Элементы = Форма.Элементы;
	
	ИзменитьОформлениеПодсказкиПроЗаявление(Форма);
	ИзменитьОформлениеКрасныхНадписей(Форма);
	
	Если ЗначениеЗаполнено(Форма.ТекущееЗаявлениеПо1СОтчетности) Тогда
		Заявление = Форма.ТекущееЗаявлениеПо1СОтчетности;
		Реквизиты = ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьСтруктуруРеквизитовЗаявления(Заявление);
		ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Реквизиты);
	Иначе
		ИспользоватьСуществующий = Ложь;
	КонецЕсли;
	
	Элементы.ЗаявлениеВПФР_ГруппаЗаявления.Видимость = Форма.ЭтоИзначальноНаПодключениеИлиОтключение;
	
	// Кнопки
	Элементы.ЗаявленияВПФР_ПропуститьОтправку.Видимость = НЕ Форма.ЭтоПредупреждениеИзНастроек;
	Если Элементы.ЗаявлениеВПФР_ГруппаЗаявления.Видимость И НЕ Форма.ФлагЗаявлениеУжеПредоставленоВПФР Тогда
		ЗаголовокКнопки = НСтр("ru = 'Отправить заявление в СФР'");
	Иначе
		ЗаголовокКнопки = Форма.ЗаголовокКнопкиПоЗавершению;
		Элементы.ЗаявленияВПФР_ПропуститьОтправку.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ЗаявленияВПФР_ОтправитьЗаявление.Заголовок = ЗаголовокКнопки;
	Элементы.ЗаявленияВПФР_ОтправитьЗаявление.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

Процедура ИзменитьОформлениеКрасныхНадписей(Форма)
	
	Элементы = Форма.Элементы;
	НадписьПодЗаявлением = Элементы.ТекстПодГалкойЗаявленияВПФР;
	
	ЭтоНужныйРежим = Форма.ЭтоПредупреждениеИзНастроек ИЛИ Форма.ЭтоПредупреждениеИзОтправки И ЗначениеЗаполнено(Форма.Отчет);
	
	Если ЭтоНужныйРежим Тогда
		
		Если Форма.ЭтоПредупреждениеИзОтправки Тогда
			
			Представление = ДлительнаяОтправкаКлиентСервер.НазваниеОбъектаВИменительномПадеже(Форма.Отчет);
			
			Шаблон = НСтр("ru = 'Отправляемый %1 не будет принят, если заявление не было предоставлено в СФР ранее.'");
			НадписьПодЗаявлением.Заголовок = СтрШаблон(Шаблон, Представление);
			
			Шаблон = НСтр("ru = 'Отправляемый %1 не будет принят, если сертификат не был предоставлен в СФР ранее.'");
			
		ИначеЕсли Форма.ЭтоПредупреждениеИзНастроек Тогда
			
			НадписьПодЗаявлением.Заголовок = НСтр("ru = 'Отправляемые документы не будут приняты, если заявление не предоставлено в СФР ранее.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	НадписьПодЗаявлением.Видимость = 
		ЭтоНужныйРежим 
		И Форма.ФлагЗаявлениеУжеПредоставленоВПФР;
	
КонецПроцедуры

Процедура ИзменитьОформлениеПодсказкиПроЗаявление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ИзначальныйВидЗаявленияПФР = Форма.НаПодключение Тогда
		
		Элементы.ЗаявлениеВПФР_ПодсказкаПроЗаявление.Заголовок = 
			НСтр("ru = 'Для обмена электронными документами с СФР необходимо отправить в СФР специальное заявление и дождаться положительного результата его рассмотрения.'");
			
	ИначеЕсли Форма.ИзначальныйВидЗаявленияПФР = Форма.НаОтключение Тогда
		
		Элементы.ЗаявлениеВПФР_ПодсказкаПроЗаявление.Заголовок = 
			НСтр("ru = 'В связи с тем, что направление СФР было отключено в настройках учетной записи, вам необходимо отправить в СФР специальное заявление на отключение от эл. документооборота.'");
		
	КонецЕсли;
		
	Элементы.ЗаявлениеВПФР_ПодсказкаПроСменуОператора.Видимость = Форма.ИзначальныйВидЗаявленияПФР = Форма.НаПодключение;
	
КонецПроцедуры

Процедура ИзменитьОформлениеСтраницыОшибкаОтправкиВПФР(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ОшибкаОтправкиЗаявленияВПФР_ПовторитьОтправку.КнопкаПоУмолчанию = Истина;
	Элементы.ОшибкаОтправкиЗаявленияВПФР_ДляЗаявления.Видимость = Истина;
	
	Если Форма.ВидОтправляемогоЗаявления = Форма.НаПодключение Тогда
		
		Элементы.ОшибкаОтправкиЗаявленияВПФР_Подсказка.Заголовок = НСтр("ru = 'Не удалось отправить в СФР (бывш. ПФР) заявление на подключение к эл. документообороту.'");
		
	ИначеЕсли Форма.ВидОтправляемогоЗаявления = Форма.НаОтключение Тогда
		
		Элементы.ОшибкаОтправкиЗаявленияВПФР_Подсказка.Заголовок = НСтр("ru = 'Не удалось отправить в СФР (бывш. ПФР) заявление на отключение от эл. документооборота.'");
		
	Иначе
		Элементы.ОшибкаОтправкиЗаявленияВПФР_Подсказка.Заголовок = НСтр("ru = 'Не удалось отправить заявление в СФР (бывш. ПФР).'");
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменитьЗаголовокФормыОтправкиВПФР(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ОтправкаЗаявленияВПФР Тогда
		
		Форма.Заголовок = НСтр("ru = 'Отправьте заявление на подключение к ЭДО с СФР (бывш. ПФР)'");
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОшибкаОтправкиВПФР Тогда
		
		Форма.Заголовок = НСтр("ru = 'Отправка в СФР (бывш. ПФР) заявления на подключение к эл. документообороту'");

	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОжидаетсяРезультатРассмотрения Тогда
		
		Если Форма.ЭтоПредупреждениеИзОтправки Тогда
			
			ВидОтчета = ДлительнаяОтправкаКлиентСервер.НазваниеОбъектаВИменительномПадеже(Форма.Отчет);
			Шаблон    = НСтр("ru = 'Внимание! Отправляемый %1 может быть не принят'");
			Форма.Заголовок = СтрШаблон(Шаблон, ВидОтчета);
			
		Иначе
			Форма.Заголовок = НСтр("ru = 'Ожидается результат рассмотрения заявления'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Форма.Заголовок;
	
КонецФункции

Функция ПодсказкаКЗаявлениюНаПодключениеПФР() Экспорт
	 Возврат НСтр("ru = 'Заявление используется для подключения обмена электронными документами с СФР, а также при смене оператора эл. документооборота '");
КонецФункции
 
Функция ПодсказкаКЗаявлениюНаОтключениеПФР() Экспорт
	 Возврат НСтр("ru = 'Заявление представляется в случае отказа от использования обмена электронными документами с СФР.'");
КонецФункции
 
#КонецОбласти

Функция ПолеСертификатаПоИмени(Имя, Сертификат)
	
	ЭтоСписокЗначений = ТипЗнч(Сертификат) = Тип("СписокЗначений");
	ЭтоСоотвествие    = ТипЗнч(Сертификат) = Тип("Соответствие");
	ЭтоСтруктура      = ТипЗнч(Сертификат) = Тип("Структура") ИЛИ ТипЗнч(Сертификат) = Тип("ФиксированнаяСтруктура");
	
	Поле = "";
	Если ЭтоСоотвествие И Сертификат.Получить(Имя) <> Неопределено Тогда
		Поле = Сертификат.Получить(Имя);
	ИначеЕсли ЭтоСтруктура И Сертификат.Свойство(Имя) Тогда
		Поле = Сертификат[Имя];
	ИначеЕсли ЭтоСписокЗначений И Сертификат.НайтиПоЗначению(Имя) <> Неопределено Тогда
		Поле = Сертификат.НайтиПоЗначению(Имя).Представление;
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

Функция ОшибкаНаРазмерБольше5Мб(Размер) Экспорт
	
	ПредставлениеРазмера = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(Размер, 2);
	ТекстОшибки = НСтр("ru = 'Размер письма после шифрования и архивирования составил %1. 
                        |В соответствии с Приказом ФНС России от 22.11.2021 № ЕД-7-26/1011@ размер не может превышать 5 Мб.'");

	ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставлениеРазмера);
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(ТекстОшибки);
	Подстроки.Добавить(Символы.ПС);
	Подстроки.Добавить(Символы.ПС);
	Подстроки.Добавить(НСтр("ru = 'Для отправки больших писем и ответов на требование используйте Пакет с дополнительными документами.'"));
	
	ТекстОшибки = Новый ФорматированнаяСтрока(Подстроки);
	
	Результат = ШаблонОшибкиПисьмаФНС();
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	Результат.Вставить("ТекстКнопки", НСтр("ru = 'Создать Пакет с дополнительными документами'"));
	Результат.Вставить("БлокироватьОтправку", Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ОшибкаНаОтветНаТребованиеФНСПисьмом() Экспорт
	
	ТекстОшибки = НСтр("ru = 'Ответ на требование документов (информации) не рекомендуется отправлять письмом, поскольку оно может попасть к другому инспектору ИФНС.
                        |
                        |Создать ответ в рекомендуемом формате по приказу ФНС от 18 января 2017 г. N ММВ-7-6/16@?'");

	Результат = ШаблонОшибкиПисьмаФНС();
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	Результат.Вставить("ТекстКнопки", НСтр("ru = 'Создать ответ в рекомендуемом формате'"));
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонОшибкиПисьмаФНС() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ТекстКнопки", "");
	Результат.Вставить("БлокироватьОтправку", Ложь);
	
	Возврат Результат;
	
КонецФункции

#Область МашиночитаемыеДоверенности

Функция РезультатОбновитьСостояниеМЧДРР() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПовторятьСоединение", 	Ложь);
	Результат.Вставить("АдресСервера", 			"");
	Результат.Вставить("ХешДоверенности", 		"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("ДатаРегистрации", 		Неопределено);
	Результат.Вставить("ДатаИзмененияСтатуса", 	Неопределено);
	Результат.Вставить("СтатусДоверенности", 	"");
	Результат.Вставить("ПубличныйКлюч", 		"");
	Результат.Вставить("Рассматривается", 		Ложь);
	Результат.Вставить("СостояниеИзменено", 	Ложь);
	Результат.Вставить("СтатусИзменился", 		Ложь);
	Результат.Вставить("Выполнено", 			Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция МодульЧисла(Число) Экспорт
	
	Возврат Макс(Число, -Число);
	
КонецФункции

Функция СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, Число) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, Число,, "ЧН=0")
	
КонецФункции

Функция ЗаменитьПФРиФССнаСФР(Текст, ДобавлятьБывш = Ложь, БезСкобок = Ложь, БезЗамены = Ложь) Экспорт
	
	Результат = Текст;
	
	Если НЕ БезЗамены Тогда
		Результат = ЗаменитьОрганНаСФР(Результат, "ФСС", ДобавлятьБывш, БезСкобок);
		Результат = ЗаменитьОрганНаСФР(Результат, "ПФР", ДобавлятьБывш, БезСкобок);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаменитьОрганНаСФР(Текст, ЗаменяемыйОрган, ДобавлятьБывш = Ложь, БезСкобок = Ложь) Экспорт
	
	Результат = Текст;
	
	ПозицияЗамены = СтрНайти(Текст, ЗаменяемыйОрган);
	ЭтоЗаменяемыйОрган = ПозицияЗамены <> 0;
	Если ЭтоЗаменяемыйОрган Тогда
		ОрганСФР = "СФР";
		НаименованиеПослеЗамены = ОрганСФР;
		Если ДобавлятьБывш Тогда
			НаименованиеПослеЗамены = НаименованиеПослеЗамены + ?(БезСкобок, ", ", " (") + НСтр("ru = 'бывш.'")
				+ " " + ЗаменяемыйОрган + ?(БезСкобок, "", ")");
		КонецЕсли;
		
		ДлинаЗаменяемогоОргана = СтрДлина(ЗаменяемыйОрган);
		ТекстПослеПервогоЗаменяемогоФрагмента = Сред(Текст, ПозицияЗамены + ДлинаЗаменяемогоОргана);
		
		Результат = Лев(Текст, ПозицияЗамены - 1) + НаименованиеПослеЗамены
			+ СтрЗаменить(ТекстПослеПервогоЗаменяемогоФрагмента, ЗаменяемыйОрган, ОрганСФР);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаОбъединенияПФРиФССвСФР() Экспорт
	
	Возврат ?(ИспользуетсяРежимТестирования(), '20221201', '20230101');
	
КонецФункции

Функция ЭтоОтправкаВСФР(
		СсылкаНаОбъект = Неопределено,
		ИмяФайла = "",
		ДатаОтправки = Неопределено,
		КонтролирующийОрганИлиВидЦиклаОбмена = Неопределено,
		ТипЦиклаОбмена = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайлаВРег = ВРег(ИмяФайла);
		Если СтрНайти(ИмяФайлаВРег, "_ЕФС-1_") <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтролирующийОрганИлиВидЦиклаОбмена)
		И КонтролирующийОрганИлиВидЦиклаОбмена <> ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР")
		И КонтролирующийОрганИлиВидЦиклаОбмена <> ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС")
		И КонтролирующийОрганИлиВидЦиклаОбмена <> ПредопределенноеЗначение("Перечисление.ВидыЦикловОбмена.ЦиклОбменаСПФР")
		И КонтролирующийОрганИлиВидЦиклаОбмена <> "ПФР" И КонтролирующийОрганИлиВидЦиклаОбмена <> "ФСС"
		И (ТипЗнч(КонтролирующийОрганИлиВидЦиклаОбмена) <> Тип("Строка")
			ИЛИ Лев(КонтролирующийОрганИлиВидЦиклаОбмена, 3) <> "СФР") Тогда
		
		Возврат Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СсылкаНаОбъект)
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.МакетыПенсионныхДел")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ЗаявлениеОНазначенииПенсии")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.УведомлениеОПрекращенииПолномочийПредставителя")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС")
		ИЛИ ТипЦиклаОбмена = ПредопределенноеЗначение("Перечисление.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие")
		ИЛИ ТипЦиклаОбмена = ПредопределенноеЗначение("Перечисление.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие")
		ИЛИ ТипЦиклаОбмена = ПредопределенноеЗначение("Перечисление.ТипыЦикловОбмена.РассылкаПФР")
		ИЛИ ТипЦиклаОбмена = ПредопределенноеЗначение("Перечисление.ТипыЦикловОбмена.ИОС") Тогда
		
		Возврат НЕ ЗначениеЗаполнено(ДатаОтправки)
			ИЛИ ДатаОтправки >= ДатаОбъединенияПФРиФССвСФР();
			
	Иначе
		Возврат ДокументооборотСКОВызовСервера.ЭтоОтправкаВСФРСервер(
			СсылкаНаОбъект,
			ИмяФайла,
			ДатаОтправки,
			КонтролирующийОрганИлиВидЦиклаОбмена,
			ТипЦиклаОбмена);
	КонецЕсли;
	
КонецФункции

Функция НеВыполнено() Экспорт

	Результат = Новый Структура(); 
	Результат.Вставить("Выполнено", Ложь);
	
	Возврат Результат;

КонецФункции

Функция Выполнено() Экспорт

	Результат = Новый Структура(); 
	Результат.Вставить("Выполнено", Истина);
	
	Возврат Результат;

КонецФункции

Функция ЕстьСвойство(Объект, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита);
	
КонецФункции

Функция НаименованиеСертификата(СертификатКриптографии) Экспорт
	
	Наименование = "Сертификат";
	
	Если ЕстьСвойство(СертификатКриптографии, "Субъект") Тогда
		
		Субъект = СертификатКриптографии.Субъект;
		
		Если ЕстьСвойство(Субъект, "CN") Тогда
			Наименование = Субъект.CN;
		ИначеЕсли ЕстьСвойство(Субъект, "O") Тогда
			Наименование = Субъект.O;
		ИначеЕсли ЕстьСвойство(Субъект, "E") Тогда 
			Наименование = Субъект.E;
		КонецЕсли;
		
	ИначеЕсли ЕстьСвойство(СертификатКриптографии, "Наименование") Тогда
		
		Наименование = СертификатКриптографии.Наименование;
		
	КонецЕсли; 
	
	Возврат Наименование;
	
КонецФункции

Функция УстанавливатьСертификат(Отпечаток, Сертификаты) Экспорт

	// Внимание!
	// ---------
	// В Контейнере есть одноименная процедура, которая используется при отправке отчетов
	// в интерактивном режиме пользователем.
	// При изменениях необходимо синхронно менять обе процедуры.

	УстанавливатьСертификат = Истина;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Отпечаток", НРег(Отпечаток));
	Отбор.Вставить("Хранилище", "MY");
	
	НайденныеСертификаты = Сертификаты.НайтиСтроки(Отбор);
	
	Если НайденныеСертификаты.Количество() = 0 Тогда
		УстанавливатьСертификат = Ложь;
	КонецЕсли;
	
	Возврат УстанавливатьСертификат;
	
КонецФункции

Функция Жирным(Текст) Экспорт
	
	Строка = Новый ФорматированнаяСтрока(Текст, Новый Шрифт(,,Истина));
	
	Возврат Строка;
	
КонецФункции

Функция СтрСоединитьUPD(Подстроки) Экспорт
	
	Результат = Новый Массив;
	Для каждого Строка Из Подстроки Цикл
	
		Результат.Добавить(Строка);
		
		Если НЕ ЭтоПоследнийЭлемент(Подстроки, Строка) Тогда
			Результат.Добавить(" ");
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый ФорматированнаяСтрока(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПоследнийЭлемент(Подстроки, Строка) Экспорт
	
	Возврат Подстроки.Найти(Строка) = Подстроки.Количество() - 1;
	
КонецФункции

// Заменяет в строке одну подстроку на одну форматированную подстроку с сохранением формата
//
Процедура ЗаменитьСтрокуНаСсылку(Строка, ПодстрокаПоиска, Ссылка) Экспорт
	
	Позиция = СтрНайти(Строка, ПодстрокаПоиска);
	ЛеваяЧасть  = Сред(Строка, 1, Позиция - 1);
	ПраваяЧасть = Сред(Строка, Позиция + СтрДлина(ПодстрокаПоиска));
	
	Строка = Новый ФорматированнаяСтрока(
		ЛеваяЧасть,
		Ссылка,
		ПраваяЧасть);
	
КонецПроцедуры

Функция ПараметрыОбработатьОбновление() Экспорт

	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ИдентификаторДокументооборота", "");
	ПараметрыФункции.Вставить("ТелефонМобильныйДляАвторизации", "");
	ПараметрыФункции.Вставить("ИдентификаторАбонента");
	ПараметрыФункции.Вставить("СпецОператорСвязи");
	ПараметрыФункции.Вставить("ПутьКонтейнерЗакрытогоКлюча");
	ПараметрыФункции.Вставить("Организация");
	ПараметрыФункции.Вставить("УчетнаяЗапись", Неопределено);
	ПараметрыФункции.Вставить("ТихийРежим", Ложь);
	ПараметрыФункции.Вставить("РежимАвтонастройки", Ложь);
	ПараметрыФункции.Вставить("ВызовИзМастераАвтонастройки", Ложь);
	ПараметрыФункции.Вставить("ВызовИзМастераПодключенияК1СОтчетности", Ложь);
	ПараметрыФункции.Вставить("ТекстОшибокДляМастераПодключенияК1СОтчетности", "");
	ПараметрыФункции.Вставить("ОтпечатокСертификатаИзОтвета", Неопределено);
	ПараметрыФункции.Вставить("ЭтоВторичноеЗаявление", Ложь);
	ПараметрыФункции.Вставить("ВыполнятьРасшифровкуЗашифрованнойЧастиФайлаАвтонастроки", Истина);
	ПараметрыФункции.Вставить("ОбращениеКСерверуОтключено", Ложь);
	ПараметрыФункции.Вставить("СохранениеВИБОтключено", Ложь);
	ПараметрыФункции.Вставить("СтруктураДляИнформацииОСервереОнлайнПроверки", Неопределено);
	ПараметрыФункции.Вставить("ИгнорироватьРежимАвтонастройки", Ложь);
	ПараметрыФункции.Вставить("ЗаявлениеПодключения", Неопределено);
	ПараметрыФункции.Вставить("СсылкаНаЗаявление", Неопределено);
	ПараметрыФункции.Вставить("АдресПользователиМультирежима", Неопределено);
	
	Возврат ПараметрыФункции;
	
КонецФункции

Функция ПараметрыСохранитьДополнительныеРеквизитыУчетнойЗаписи() Экспорт
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("УчетнаяЗаписьОрганизации");
	ПараметрыФункции.Вставить("ПараметрыСертификата", Неопределено);
	ПараметрыФункции.Вставить("ИдентификаторАбонента", "");
	ПараметрыФункции.Вставить("ВременныйФайлОбновленийАдрес", Неопределено);
	ПараметрыФункции.Вставить("ВызовИзМастераПодключенияК1СОтчетности", Ложь);
	ПараметрыФункции.Вставить("ТекстОшибокДляМастераПодключенияК1СОтчетности", "");
	ПараметрыФункции.Вставить("СсылкаНаЗаявление", Неопределено);
	ПараметрыФункции.Вставить("АдресПользователиМультирежима", Неопределено);
	ПараметрыФункции.Вставить("Организация", Неопределено);
	
	Возврат ПараметрыФункции;
	
КонецФункции

Процедура ЗаписьСобытияВЖурналРегистрации(Знач Имя, ОписаниеОшибки, Уровень = "Ошибка") Экспорт
	
	#Если Клиент Тогда
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(Имя,Уровень,ОписаниеОшибки,,Истина);
		
	#Иначе
		
		Уровни = Новый Соответствие;
		Уровни.Вставить("Информация", 		УровеньЖурналаРегистрации.Информация);
		Уровни.Вставить("Ошибка", 			УровеньЖурналаРегистрации.Ошибка);
		Уровни.Вставить("Предупреждение", 	УровеньЖурналаРегистрации.Предупреждение);
		Уровни.Вставить("Примечание", 		УровеньЖурналаРегистрации.Примечание);
		
		УровеньЖР = Уровни.Получить(Уровень);
		
		ЗаписьЖурналаРегистрации(Имя, УровеньЖР,,,ОписаниеОшибки);
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти
