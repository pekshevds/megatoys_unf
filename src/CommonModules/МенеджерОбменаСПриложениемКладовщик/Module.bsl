////////////////////////////////////////////////////////////////////////////////
// Менеджер обмена через универсальный формат (1С:Кладовщик от 14.08.2023 17:16:14)
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных..
//
// Параметры:
//  КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ВариантНастройки = Неопределено;
	Если КомпонентыОбмена.УзелКорреспондента <> Неопределено Тогда
		ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента.МобильноеПриложение, "ВариантНастройки");
	КонецЕсли;
	ПараметрыКонвертации.ВариантНастройки = ВариантНастройки;  
	ПараметрыКонвертации.Кладовщик = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Кладовщик");
	
	ПараметрыКонвертации.ИспользоватьСвободныйВводПоступлений = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ИспользоватьСвободныйВводПоступлений");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.ИспользоватьСвободныйВводПоступлений) Тогда
		ПараметрыКонвертации.ИспользоватьСвободныйВводПоступлений = Ложь;
	КонецЕсли;
	ПараметрыКонвертации.ИспользоватьСвободныйВводСборок = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ИспользоватьСвободныйВводСборок");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.ИспользоватьСвободныйВводСборок) Тогда
		ПараметрыКонвертации.ИспользоватьСвободныйВводСборок = Ложь;
	КонецЕсли;
	ПараметрыКонвертации.ИспользоватьДиспетчеризациюЗаданий = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ИспользоватьДиспетчеризациюЗаданий");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.ИспользоватьДиспетчеризациюЗаданий) Тогда
		ПараметрыКонвертации.ИспользоватьДиспетчеризациюЗаданий = Ложь;
	КонецЕсли;
	ПараметрыКонвертации.РедактироватьЦеныТоваров = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "РедактироватьЦеныТоваров");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.РедактироватьЦеныТоваров) Тогда
		ПараметрыКонвертации.РедактироватьЦеныТоваров = Ложь;
	КонецЕсли;  
	ПараметрыКонвертации.ИспользоватьВес = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ИспользоватьВес");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.ИспользоватьВес) Тогда
		ПараметрыКонвертации.ИспользоватьВес = Ложь;
	КонецЕсли;  
	ПараметрыКонвертации.ИспользоватьУпаковки = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ИспользоватьЕдиницыИзмерений");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.ИспользоватьУпаковки) Тогда
		ПараметрыКонвертации.ИспользоватьУпаковки = Ложь;
	КонецЕсли;  
	
	ПараметрыКонвертации.СоздаватьОрдерПоЗаказуПокупателя = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СоздаватьОрдерПоЗаказуПокупателя");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.СоздаватьОрдерПоЗаказуПокупателя) Тогда
		ПараметрыКонвертации.СоздаватьОрдерПоЗаказуПокупателя = Ложь;
	КонецЕсли;  
	ПараметрыКонвертации.СоздаватьОрдерПоЗаказуПоставщику = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СоздаватьОрдерПоЗаказуПоставщику");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.СоздаватьОрдерПоЗаказуПоставщику) Тогда
		ПараметрыКонвертации.СоздаватьОрдерПоЗаказуПоставщику = Ложь;
	КонецЕсли;  
	
	ПараметрыКонвертации.ВариантЗагрузкиЗаказаПокупателя = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ВариантЗагрузкиЗаказаПокупателя");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.ВариантЗагрузкиЗаказаПокупателя) Тогда
		ПараметрыКонвертации.ВариантЗагрузкиЗаказаПокупателя = 0;
	КонецЕсли;  
	ПараметрыКонвертации.ВариантЗагрузкиЗаказаПоставщику = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ВариантЗагрузкиЗаказаПоставщику");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.ВариантЗагрузкиЗаказаПоставщику) Тогда
		ПараметрыКонвертации.ВариантЗагрузкиЗаказаПоставщику = 0;
	КонецЕсли;  
	ПараметрыКонвертации.ВариантЗагрузкиПриходнойНакладной = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ВариантЗагрузкиПриходнойНакладной");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.ВариантЗагрузкиПриходнойНакладной) Тогда
		ПараметрыКонвертации.ВариантЗагрузкиПриходнойНакладной = 0;
	КонецЕсли;  
	
	
	ПараметрыКонвертации.Приемка_СкрыватьЦену = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Приемка_СкрыватьЦену");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.Приемка_СкрыватьЦену) Тогда
		ПараметрыКонвертации.Приемка_СкрыватьЦену = Ложь;
	КонецЕсли;  
	ПараметрыКонвертации.Приемка_СкрыватьПлан = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Приемка_СкрыватьПлан");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.Приемка_СкрыватьПлан) Тогда
		ПараметрыКонвертации.Приемка_СкрыватьПлан = Ложь;
	КонецЕсли;  
	ПараметрыКонвертации.Приемка_ЗапретДобавленияТовара = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Приемка_ЗапретДобавленияТовара");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.Приемка_ЗапретДобавленияТовара) Тогда
		ПараметрыКонвертации.Приемка_ЗапретДобавленияТовара = Ложь;
	КонецЕсли;  
	
	ПараметрыКонвертации.Сборка_СкрыватьЦену = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Сборка_СкрыватьЦену");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.Сборка_СкрыватьЦену) Тогда
		ПараметрыКонвертации.Сборка_СкрыватьЦену = Ложь;
	КонецЕсли;  
	ПараметрыКонвертации.Сборка_СкрыватьПлан = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Сборка_СкрыватьПлан");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.Сборка_СкрыватьПлан) Тогда
		ПараметрыКонвертации.Сборка_СкрыватьПлан = Ложь;
	КонецЕсли;  
	ПараметрыКонвертации.Сборка_ЗапретДобавленияТовара = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Сборка_ЗапретДобавленияТовара");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.Сборка_ЗапретДобавленияТовара) Тогда
		ПараметрыКонвертации.Сборка_ЗапретДобавленияТовара = Ложь;
	КонецЕсли;  
	
	ПараметрыКонвертации.Пересчет_СкрыватьЦену = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Пересчет_СкрыватьЦену");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.Пересчет_СкрыватьЦену) Тогда
		ПараметрыКонвертации.Пересчет_СкрыватьЦену = Ложь;
	КонецЕсли;  
	ПараметрыКонвертации.Пересчет_СкрыватьПлан = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Пересчет_СкрыватьПлан");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.Пересчет_СкрыватьПлан) Тогда
		ПараметрыКонвертации.Пересчет_СкрыватьПлан = Ложь;
	КонецЕсли;  
	ПараметрыКонвертации.Пересчет_ЗапретДобавленияТовара = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "Пересчет_ЗапретДобавленияТовара");
	Если Не ЗначениеЗаполнено(ПараметрыКонвертации.Пересчет_ЗапретДобавленияТовара) Тогда
		ПараметрыКонвертации.Пересчет_ЗапретДобавленияТовара = Ложь;
	КонецЕсли; 
	
	ПараметрыКонвертации.ВидЦенЗакупки = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ВидЦенЗакупки");
	ПараметрыКонвертации.ВидЦенПродажи = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ВидЦенПродажи");
	ПараметрыКонвертации.ПапкаНовойНоменклатуры = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "ПапкаНовойНоменклатуры");
	ПараметрыКонвертации.КатегорияНовойНоменклатуры = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "КатегорияНовойНоменклатуры");
	 
	ЗаполнитьТаблицуЦенНоменклатуры(КомпонентыОбмена); 
	
	ПараметрыКонвертации.ИдентификаторИнформационнойБазы = Константы.ИдентификаторИнформационнойБазы.Получить();
	УзелОбмена = КомпонентыОбмена.УзелКорреспондента;
	Пользователь = Пользователи.ТекущийПользователь();
	ОбменЗапрещен = Ложь;
	Если ЗначениеЗаполнено(УзелОбмена.Пользователь) 
		И Пользователь <> УзелОбмена.Пользователь Тогда
		ОбменЗапрещен = Истина;
	ИначеЕсли ЗначениеЗаполнено(УзелОбмена.ГруппаПользователей) Тогда
		Если УзелОбмена.ГруппаПользователей.Состав.Найти(Пользователь, "Пользователь") = Неопределено Тогда
			ОбменЗапрещен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменЗапрещен Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Пользователь %1 не является участником настройки обмена'"), Пользователь);
		ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СообщениеОбОшибке);
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			ВыгрузкаШтрихкодовНоменклатуры(КомпонентыОбмена);		
		КонецЕсли;  
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
//
// Возвращаемое значение:
//  Строка - номер версии.
//
Функция ВерсияФорматаМенеджераОбмена() Экспорт
	Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена      - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - см. ОбменДаннымиXDTOСервер.ТаблицаПравилОбработкиДанных
// 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеЗапасов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РаспоряжениеНаОтгрузку_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РаспоряжениеНаПриемку_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена  - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила.
// 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Магазины_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Штрихкоды_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриходныйОрдер_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходнаяНакладная_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходныйОрдер_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации);
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Cтрока - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// Перечисление_ТипыНоменклатуры.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыНоменклатуры";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ВидРабот, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Запас, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Операция, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Работа, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ЮридическоеФизическоеЛицо.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮридическоеФизическоеЛицо";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// Перечисление_ТипыНоменклатуры_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыНоменклатуры_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("МногооборотнаяТара", Перечисления.ТипыНоменклатуры.Запас);
		ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Запас);
		ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Работа);
		ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// Перечисление_ВидыКонтрагентов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыКонтрагентов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыКонтрагентов;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ГосударственныйОрган, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ГосударственныйОрган);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации:
//                         Ключ - имя параметра, значение - значение параметра, по умолчанию - Неопределено.
//
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВариантНастройки");
	ПараметрыКонвертации.Вставить("Кладовщик");
	ПараметрыКонвертации.Вставить("ИспользоватьДиспетчеризациюЗаданий");
	ПараметрыКонвертации.Вставить("РедактироватьЦеныТоваров");
	ПараметрыКонвертации.Вставить("ИспользоватьВес");
	ПараметрыКонвертации.Вставить("ИспользоватьУпаковки");
	ПараметрыКонвертации.Вставить("ВыгруженнаяНоменклатура");
	ПараметрыКонвертации.Вставить("СоздаватьОрдерПоЗаказуПокупателя");
	ПараметрыКонвертации.Вставить("СоздаватьОрдерПоЗаказуПоставщику");
	ПараметрыКонвертации.Вставить("ВариантЗагрузкиЗаказаПокупателя");
	ПараметрыКонвертации.Вставить("ВариантЗагрузкиЗаказаПоставщику");
	ПараметрыКонвертации.Вставить("ВариантЗагрузкиПриходнойНакладной");
	ПараметрыКонвертации.Вставить("Приемка_СкрыватьЦену");
	ПараметрыКонвертации.Вставить("Приемка_СкрыватьПлан");
	ПараметрыКонвертации.Вставить("Приемка_ЗапретДобавленияТовара");
	ПараметрыКонвертации.Вставить("Сборка_СкрыватьЦену");
	ПараметрыКонвертации.Вставить("Сборка_СкрыватьПлан");
	ПараметрыКонвертации.Вставить("Сборка_ЗапретДобавленияТовара");
	ПараметрыКонвертации.Вставить("Пересчет_СкрыватьЦену");
	ПараметрыКонвертации.Вставить("Пересчет_СкрыватьПлан");
	ПараметрыКонвертации.Вставить("Пересчет_ЗапретДобавленияТовара");
	ПараметрыКонвертации.Вставить("ВидЦенЗакупки");
	ПараметрыКонвертации.Вставить("ВидЦенПродажи");
	ПараметрыКонвертации.Вставить("ПапкаНовойНоменклатуры");
	ПараметрыКонвертации.Вставить("КатегорияНовойНоменклатуры");
	ПараметрыКонвертации.Вставить("ТаблицаЦенНоменклатуры");
	ПараметрыКонвертации.Вставить("ИдентификаторИнформационнойБазы");
	ПараметрыКонвертации.Вставить("ИспользоватьСвободныйВводПоступлений");
	ПараметрыКонвертации.Вставить("ИспользоватьСвободныйВводСборок");
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура:
//    * ОбъектОбработки - Произвольный
//    * ИспользованиеПКО - Структура
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * ДанныеИБ - СправочникОбъект
//               - ДокументОбъект
//               - и т.п.
//    * ПолученныеДанные - СправочникОбъект
//                       - ДокументОбъект
//                       - и т.п.
//    * КонвертацияСвойств - ТаблицаЗначений
//    * ДанныеXDTO - см. ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * СтекВыгрузки - Массив из Произвольный
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеЗапасов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеЗапасов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриходныйОрдер_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПриходныйОрдер_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РасходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РасходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходныйОрдер_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РасходныйОрдер_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Магазины_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Магазины_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Функция Подключаемый_ИдентификаторМодуля() Экспорт
	Возврат "16a542a0-1778-4d34-9b1a-e769e747cd7d";
КонецФункции
#Область Документы
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходнаяНакладная;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказПокупателя_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПеремещениеЗапасов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеЗапасов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеЗапасов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриемкаПоПеремещениюЗапасов_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПересчетТоваров";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваров_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РаспоряжениеНаОтгрузку_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РаспоряжениеНаОтгрузку_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтгрузкаПоПеремещениюЗапасов_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходнаяНакладная_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходныйОрдер_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РаспоряжениеНаПриемку_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РаспоряжениеНаПриемку_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РаспоряжениеНаПриемку";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровРаспоряжение_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриемкаПоПеремещениюЗапасов_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриходныйОрдер_Получение");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ОжидаемаяДатаОтгрузки", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "");
	ДобавитьПКС(СвойстваШапки, "",                   "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Маркировка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1, "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Проведен", "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаОтгрузки",             "ОжидаемаяДатаОтгрузки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "ДатаВыполнения");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СостояниеЗаказа",          "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв", "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "ЦенаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ШтрихкодыУпаковок", "Маркировка");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеШтрихкода", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ШтрихкодУпаковки",  "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "Всего",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",  "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоСобрано", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",      "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",    "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",              "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаПоступления",          "ОжидаемаяДатаПоступления");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                         "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "СостояниеЗаказа",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "");
	ДобавитьПКС(СвойстваТЧ, "Всего",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "ОрганизацияПолучатель", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                             "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                             "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",           "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "СкладПолучатель", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтгрузкаПоПеремещениюЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Проведен", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересчетТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "",                   "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПересчетТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Менеджер", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "",                        "ОжидаемаяДатаПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                        "ТелефонМенеджера", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Маркировка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерАкцизнойМарки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1, "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1, "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваровРаспоряжение_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",           "Ответственный", 1);
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "ЦенаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ШтрихкодыУпаковок", "Маркировка");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеШтрихкода", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ШтрихкодУпаковки",  "", 1, "Справочник_ШтрихкодыУпаковокТоваров_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "Всего",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоСправочно", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,НомерВходящегоДокумента,Организация");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПриемкаПоПеремещениюЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                             "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "ОрганизацияОтправитель", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                             "Представление", 1);
	ДобавитьПКС(СвойстваШапки, "",                             "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",           "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВесЕдиницыТовара", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Весовой", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Маркируемый", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтатусУказанияСерий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПриемкаПоПеремещениюЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Проведен", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПриходныйОрдер_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПриходныйОрдер_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаПриемку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПриходныйОрдер_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",       "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "");
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("ДокументОснование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РасходнаяНакладная_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РасходнаяНакладная_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РасходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РасходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "ЦенаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ШтрихкодыУпаковок", "Маркировка");
	ДобавитьПКС(СвойстваТЧ, "ШтрихкодУпаковки", "", 1, "Справочник_ШтрихкодыУпаковокТоваров_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "Всего",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РасходныйОрдер_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РасходныйОрдер_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РаспоряжениеНаОтгрузку";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РасходныйОрдер_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "");
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("ДокументОснование");
	
КонецПроцедуры


#КонецОбласти
#Область Справочники_Контрагенты
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента", "ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "ИНН",            "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",            "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "",               "Ссылка", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";

	
КонецПроцедуры


#КонецОбласти
#Область Справочники_Номенклатура
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СерииНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СерииНоменклатуры";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерииНоменклатуры");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Штрихкоды_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КатегорииНоменклатурыВН_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",               "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатурыПоУмолчанию", "ТипНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КатегорииНоменклатурыВН_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",               "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатурыПоУмолчанию", "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры_Получение");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",            "Артикул");
	ДобавитьПКС(СвойстваШапки, "Весовой",            "Весовой");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",   "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "",                   "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",    "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",               "Артикул");
	ДобавитьПКС(СвойстваШапки, "Весовой",               "Весовой");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",      "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "КатегорияНоменклатуры", "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",    "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "",                      "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",       "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СерииНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СерииНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоденДо",      "ГоденДо");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование", "СерийныйНомер");
	ДобавитьПКС(СвойстваШапки, "",             "Ссылка", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Упаковки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Упаковки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Упаковки_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмеренияПоКлассификатору", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Коэффициент",                      "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "Наименование",                     "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                                 "Номенклатура", 1, "Справочник_Номенклатура_Отправка");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,ЕдиницаИзмеренияПоКлассификатору,Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВН_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",              "ВладелецХарактеристики", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеДляПечати", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "",                      "Номенклатура", 1, "Справочник_Номенклатура_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Штрихкоды_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Штрихкоды_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Серия",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "");
	ДобавитьПКС(СвойстваШапки, "Характеристика",    "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Номенклатура,Серия,Характеристика");
	
КонецПроцедуры


#КонецОбласти
#Область Справочники_Структура_предприятия
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтруктурныеЕдиницы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Магазины_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Магазины_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Магазины_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Магазины_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_Магазины_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "Ссылка", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                       "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                       "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "СкладГруппа", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "Ссылка", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";

	
КонецПроцедуры


#КонецОбласти
#Область Справочники_Базовые_классификаторы
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЕдиницыИзмерения_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	
КонецПроцедуры


#КонецОбласти


Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата, ПространствоИмен = "")
	
	Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
		ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
	КонецЕсли;
	
	КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
	КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
	КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
	КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
	КонвертацияТабличнойЧасти.ПространствоИмен = ПространствоИмен;
	Возврат КонвертацияТабличнойЧасти.Свойства;
	
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
		ПравилоКонвертацииСвойства = "", ПространствоИмен = "")
	
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
	НоваяСтрока.ПространствоИмен                = ПространствоИмен;
	
КонецПроцедуры

#Область ОбработчикиКонвертации
#Область Документы
Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВес", КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВес);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВозвратТоваровПоставщикуТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Количество * ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Номенклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ)
	|				ИЛИ ВозвратТоваровПоставщикуТовары.Номенклатура.ВидПродукцииИС В (ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)) КАК Маркируемый,
	|				ИЛИ ВозвратТоваровПоставщикуТовары.Номенклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Весовой КАК Весовой,
	|	ВЫБОР
	|		КОГДА &ИспользоватьВес
	|			ТОГДА ВозвратТоваровПоставщикуТовары.Номенклатура.Вес
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесЕдиницыТовара
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуСерии.Серия КАК Серия,
	|	ВозвратТоваровПоставщикуСерии.Количество КАК Количество,
	|	ЕСТЬNULL(ВозвратТоваровПоставщикуСерии.Серия.Наименование, """") КАК Номер
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.РасходнаяНакладная.СерииНоменклатуры КАК ВозвратТоваровПоставщикуСерии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК ВозвратТоваровПоставщикуТовары
	|		ПО ВозвратТоваровПоставщикуСерии.КлючСвязи = ВозвратТоваровПоставщикуТовары.КлючСвязи
	|ГДЕ
	|	ВозвратТоваровПоставщикуСерии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_Товары.Маркируемый КАК Маркируемый,
	|	ВТ_Товары.Весовой КАК Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.Сумма КАК Сумма,
	|	ВТ_Товары.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Товары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ТоварыИтог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|ГДЕ
	|	ВТ_Товары.СтатусУказанияСерий В (0, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки,
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА Серии.Номер = """"
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Серии.Серия
	|	КОНЕЦ,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """"),
	|	ВТ_Товары.ЕдиницаИзмерения,
	|	Серии.Количество,
	|	Серии.Количество,
	|	ВЫБОР
	|		КОГДА Серии.Номер = """"
	|			ТОГДА 1
	|		ИНАЧЕ ВТ_Товары.СтатусУказанияСерий
	|	КОНЕЦ,
	|	ВТ_Товары.Маркируемый,
	|	ВТ_Товары.Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара,
	|	ВТ_Товары.Цена,
	|	ВТ_Товары.Сумма * Серии.Количество / ВТ_Товары.Количество,
	|	ВТ_Товары.СтавкаНДС,
	|	ВТ_Товары.СуммаНДС * Серии.Количество / ВТ_Товары.Количество
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО ВТ_Товары.Номенклатура = Серии.Номенклатура
	|			И ВТ_Товары.Характеристика = Серии.Характеристика
	|ГДЕ
	|	ВТ_Товары.СтатусУказанияСерий = 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыИтог.Характеристика КАК Характеристика,
	|	ВТ_ТоварыИтог.Серия КАК Серия,
	|	ВТ_ТоварыИтог.Штрихкод КАК Штрихкод,
	|	ВТ_ТоварыИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТоварыИтог.Количество КАК Количество,
	|	ВТ_ТоварыИтог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_ТоварыИтог.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_ТоварыИтог.Маркируемый КАК Маркируемый,
	|	ВТ_ТоварыИтог.Весовой КАК Весовой,
	|	ВТ_ТоварыИтог.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_ТоварыИтог.Цена КАК Цена,
	|	ВТ_ТоварыИтог.Сумма КАК Сумма,
	|	ВТ_ТоварыИтог.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ТоварыИтог.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВТ_ТоварыИтог КАК ВТ_ТоварыИтог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыИтог.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ЗаполнитьЕдиницыИСтавкиНДС_Отправка(Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК НомерАкцизнойМарки
	|ИЗ
	|	Документ.РасходнаяНакладная.ШтрихкодыУпаковок КАК ВозвратТоваровПоставщикуШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ВозвратТоваровПоставщикуШтрихкодыУпаковок.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщикуШтрихкодыУпаковок.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	
	Маркировка = Результат.Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("Маркировка", Маркировка);
КонецПроцедуры
Процедура ПОД_Документ_ЗаказПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаказПокупателя_Отправка = Ложь;   
	
	СостояниеЗаказаДляСборки = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаДляСборки");
	СостояниеЗаказаСобран = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаСобран");  
	Если ДанныеИБ.СостояниеЗаказа <> СостояниеЗаказаДляСборки
		И ДанныеИБ.СостояниеЗаказа <> СостояниеЗаказаСобран Тогда
			Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Заказ = &ЗаказПокупателя
	|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РеализацияТоваров
	|ГДЕ
	|	НЕ РеализацияТоваров.ПометкаУдаления
	|	И РеализацияТоваров.Проведен
	|	И РеализацияТоваров.Заказ = &ЗаказПокупателя";
	
	Результат = Запрос.ВыполнитьПакет();
	Если НЕ(Результат[0].Пустой()
		И Результат[1].Пустой()) Тогда
		Возврат;
	КонецЕсли;
	  
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Если ПараметрыКонвертации.ИспользоватьДиспетчеризациюЗаданий = Истина 
		И ЗначениеЗаполнено(ПараметрыКонвертации.Кладовщик)
		И ДанныеИБ.Ответственный <> ПараметрыКонвертации.Кладовщик Тогда
			Возврат;
	КонецЕсли;  
	
	ИспользованиеПКО.Документ_ЗаказПокупателя_Отправка = Истина;
КонецПроцедуры
Процедура ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаказПоставщику_Отправка = Ложь;   
	
	СостояниеЗаказаДляПриемки = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаПоставщикуДляПриемки");
	СостояниеЗаказаПринят = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаПоставщикуПринят");  
	Если ДанныеИБ.СостояниеЗаказа <> СостояниеЗаказаДляПриемки
		И ДанныеИБ.СостояниеЗаказа <> СостояниеЗаказаПринят Тогда
			Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходнаяНакладная.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	НЕ ПриходнаяНакладная.ПометкаУдаления
	|	И ПриходнаяНакладная.Проведен
	|	И ПриходнаяНакладная.Заказ = &ЗаказПоставщику";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;   
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Если ПараметрыКонвертации.ИспользоватьДиспетчеризациюЗаданий = Истина 
		И ЗначениеЗаполнено(ПараметрыКонвертации.Кладовщик)
		И ДанныеИБ.Ответственный <> ПараметрыКонвертации.Кладовщик Тогда
			Возврат;
	КонецЕсли;  
	
	ИспользованиеПКО.Документ_ЗаказПоставщику_Отправка = Истина;
КонецПроцедуры
Процедура ПОД_Документ_ПеремещениеЗапасов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВес", КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВес);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПеремещениеТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПеремещениеТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНаПеремещениеТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеремещениеТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНаПеремещениеТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказНаПеремещениеТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеремещениеТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНаПеремещениеТовары.Количество * ЗаказНаПеремещениеТовары.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ЗаказНаПеремещениеТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказНаПеремещениеТовары.Количество КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказНаПеремещениеТовары.Номенклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказНаПеремещениеТовары.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ)
	|				ИЛИ ЗаказНаПеремещениеТовары.Номенклатура.ВидПродукцииИС В (ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)) КАК Маркируемый,
	|				ИЛИ ЗаказНаПеремещениеТовары.Номенклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.МаркируемаяПродукция)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ЗаказНаПеремещениеТовары.Номенклатура.Весовой КАК Весовой,
	|	ВЫБОР
	|		КОГДА &ИспользоватьВес
	|			ТОГДА ЗаказНаПеремещениеТовары.Номенклатура.Вес
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесЕдиницыТовара
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ЗаказНаПеремещениеТовары
	|ГДЕ
	|	ЗаказНаПеремещениеТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.Маркируемый КАК Маркируемый,
	|	ВТ_Товары.Весовой КАК Весовой,
	|	ВТ_Товары.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВТ_Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ВТ_ТоварыИтог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыИтог.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыИтог.Характеристика КАК Характеристика,
	|	ВТ_ТоварыИтог.Штрихкод КАК Штрихкод,
	|	ВТ_ТоварыИтог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ТоварыИтог.Количество КАК Количество,
	|	ВТ_ТоварыИтог.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_ТоварыИтог.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_ТоварыИтог.Маркируемый КАК Маркируемый,
	|	ВТ_ТоварыИтог.Весовой КАК Весовой,
	|	ВТ_ТоварыИтог.ВесЕдиницыТовара КАК ВесЕдиницыТовара
	|ИЗ
	|	ВТ_ТоварыИтог КАК ВТ_ТоварыИтог
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТоварыИтог.НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	ИспользованиеПКО.Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПриемкаПоПеремещениюЗапасов_Отправка = Ложь;
	Если Не Результат.Пустой() Тогда
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	
		ФильтрПройден = УправлениеМобильнымиПриложениямиУНФ.ПроверитьФильтрПоСкладу(
			КомпонентыОбмена.УзелКорреспондента, ДанныеИБ.СтруктурнаяЕдиница, ДанныеИБ.СтруктурнаяЕдиница, ДанныеИБ.Организация, Истина);
		Если ФильтрПройден Тогда 
			ИспользованиеПКО.Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка = Истина;
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_СтруктурныеЕдиницы_Отправка", "Имя");
			Если ПравилоОбработки <> Неопределено Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.СтруктурнаяЕдиницаПолучатель, ПравилоОбработки);    
			КонецЕсли;
		КонецЕсли;
	
		ФильтрПройден = УправлениеМобильнымиПриложениямиУНФ.ПроверитьФильтрПоСкладу(
			КомпонентыОбмена.УзелКорреспондента, ДанныеИБ.СтруктурнаяЕдиницаПолучатель, ДанныеИБ.СтруктурнаяЕдиницаПолучатель, ДанныеИБ.Организация, Истина);
		Если ФильтрПройден Тогда 
			ИспользованиеПКО.Документ_ПриемкаПоПеремещениюЗапасов_Отправка = Истина;   
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_СтруктурныеЕдиницы_Отправка", "Имя");
			Если ПравилоОбработки <> Неопределено Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.СтруктурнаяЕдиница, ПравилоОбработки);    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Инвентаризация", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОприходованиеЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК ОприходованиеЗапасов
	|ГДЕ
	|	НЕ ОприходованиеЗапасов.ПометкаУдаления
	|	И ОприходованиеЗапасов.Проведен
	|	И ОприходованиеЗапасов.ДокументОснование = &Инвентаризация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеЗапасов КАК СписаниеЗапасов
	|ГДЕ
	|	НЕ СписаниеЗапасов.ПометкаУдаления
	|	И СписаниеЗапасов.Проведен
	|	И СписаниеЗапасов.ДокументОснование = &Инвентаризация";
	
	Результат = Запрос.ВыполнитьПакет();
	Если НЕ(Результат[0].Пустой()
		И Результат[1].Пустой()) Тогда
		ИспользованиеПКО.Документ_ПересчетТоваров_Отправка = Ложь;
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ПересчетТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПересчетТоваровТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПересчетТоваровТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ПересчетТоваровТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ПересчетТоваровТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПересчетТоваровТовары.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ПересчетТоваровТовары.КоличествоУчет * ПересчетТоваровТовары.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ПересчетТоваровТовары.КоличествоУчет
	|	КОНЕЦ КАК Количество,
	|	ПересчетТоваровТовары.КоличествоУчет КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ИнвентаризацияЗапасов.Запасы КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И Товары.Характеристика = Штрихкоды.Характеристика
	|			И Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.Характеристика КАК Характеристика,
	|	ВТ_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И ВТ_Товары.Характеристика = Штрихкоды.Характеристика
	|			И ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользованиеПКО.Документ_ПересчетТоваров_Отправка = Ложь;
	Иначе
		Товары = Результат.Выгрузить();
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПоступлениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Маркировка ЕГАИС
	ТаблицаМаркировка = Новый ТаблицаЗначений;
	ТаблицаМаркировка.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМаркировка.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМаркировка.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаМаркировка.Колонки.Добавить("НомерАкцизнойМарки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	
	ТТНВходящаяЕГАИС = ДанныеИБ.Ссылка.ДокументОснование;
	
	Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) И ТипЗнч(ТТНВходящаяЕГАИС) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ДанныеПроверкиИПодбора = ТТНВходящаяЕГАИС.ДанныеПроверкиИПодбора.Получить();
		Если ДанныеПроверкиИПодбора <> Неопределено Тогда
			Для Каждого СтрокаДерева Из ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки Цикл
				Если НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
					НоваяСтрока = ТаблицаМаркировка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
					НоваяСтрока.НомерАкцизнойМарки = СтрокаДерева.Штрихкод;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("Маркировка", ТаблицаМаркировка);
КонецПроцедуры
Процедура ПОД_Документ_РаспоряжениеНаОтгрузку_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаказПокупателя_Получение = Ложь;
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Получение = Ложь;
	ИспользованиеПКО.Документ_ОтгрузкаПоПеремещениюЗапасов_Получение = Ложь;    
	ИспользованиеПКО.Документ_РасходныйОрдер_Получение = Ложь;    
	ИспользованиеПКО.Документ_РасходнаяНакладная_Получение = Ложь;    
	
	Если ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаПоВозвратуПоставщику" Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Получение = Истина;
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаПоПеремещению" Тогда
		ИспользованиеПКО.Документ_ОтгрузкаПоПеремещениюЗапасов_Получение = Истина;
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаКлиенту" Тогда
		ИспользованиеПКО.Документ_ЗаказПокупателя_Получение = Истина;      
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиЗаказаПокупателя = 2 Тогда
			ИспользованиеПКО.Документ_РасходнаяНакладная_Получение = Истина;
		КонецЕсли;
		Если КомпонентыОбмена.ПараметрыКонвертации.СоздаватьОрдерПоЗаказуПокупателя Тогда
			ИспользованиеПКО.Документ_РасходныйОрдер_Получение = Истина;      
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_РаспоряжениеНаПриемку_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаказПоставщику_Получение = Ложь;
	ИспользованиеПКО.Документ_ПриемкаПоПеремещениюЗапасов_Получение = Ложь;
	ИспользованиеПКО.Документ_ПоступлениеТоваровРаспоряжение_Получение = Ложь;
	ИспользованиеПКО.Документ_ПриходныйОрдер_Получение = Ложь;
	
	Если ДанныеXDTO.ВидОперации.Значение = "ПриемкаОтПоставщика" Тогда   
		Идентификатор = Новый УникальныйИдентификатор(ДанныеXDTO.Ссылка.Значение);
		ДокументПоступление = Документы.ПриходнаяНакладная.ПолучитьСсылку(Идентификатор);
		ДокументЗаказПоставщику = Документы.ЗаказПоставщику.ПолучитьСсылку(Идентификатор);
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиЗаказаПоставщику = 2 
			И ДокументЗаказПоставщику.Дата <> Дата(1,1,1)  Тогда
			ИспользованиеПКО.Документ_ПоступлениеТоваровРаспоряжение_Получение = Истина;
			ИспользованиеПКО.Документ_ЗаказПоставщику_Получение = Истина;    
			Если КомпонентыОбмена.ПараметрыКонвертации.СоздаватьОрдерПоЗаказуПоставщику Тогда
				ИспользованиеПКО.Документ_ПриходныйОрдер_Получение = Истина;      
			КонецЕсли; 
			ДанныеXDTO.Вставить("ЗагрузкаЗаказаПоставщику", Истина);
		ИначеЕсли ДокументПоступление.Дата = Дата(1,1,1)
			И ДокументЗаказПоставщику.Дата <> Дата(1,1,1) Тогда
			ИспользованиеПКО.Документ_ЗаказПоставщику_Получение = Истина;    
			Если КомпонентыОбмена.ПараметрыКонвертации.СоздаватьОрдерПоЗаказуПоставщику Тогда
				ИспользованиеПКО.Документ_ПриходныйОрдер_Получение = Истина;      
			КонецЕсли;
		Иначе
			ИспользованиеПКО.Документ_ПоступлениеТоваровРаспоряжение_Получение = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеXDTO.ВидОперации.Значение = "ПриемкаПоПеремещению" Тогда
		ИспользованиеПКО.Документ_ПриемкаПоПеремещениюЗапасов_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаПоВозвратуПоставщику");
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));     
	
	ДанныеXDTO.Вставить("ОжидаемаяДатаОтгрузки", ТекущаяДатаСеанса());
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Маркировка", ДанныеИБ.ДополнительныеСвойства.Маркировка);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.Физлицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.Физлицо.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);	
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));     
	
	СостояниеЗаказаСобран = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаСобран");  
	Если ДанныеИБ.СостояниеЗаказа = СостояниеЗаказаСобран Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаКлиентуСобран");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаКлиенту");
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказПокупателя(ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.Физлицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.Физлицо.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");    
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");    
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиЗаказаПокупателя = 0 Тогда
			ПравилаЗаполнения.Вставить("КоличествоУпаковок", "Количество");
			ПравилаЗаполнения.Вставить("Сумма", "Сумма");
			ПравилаЗаполнения.Вставить("Цена", "Цена");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС"); 
		Иначе
			ПравилаЗаполнения.Вставить("Количество", "КоличествоСобрано");
		КонецЕсли;
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);    
			Если СтруктураДанныхСтроки.Свойство("Упаковка") Тогда
				СтруктураДанныхСтроки.ЕдиницаИзмерения = СтруктураДанныхСтроки.Упаковка; 
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	 
	// Маркировка
	МассивСтрокМаркировка = МассивМаркировка(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
	Если МассивСтрокМаркировка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ШтрихкодыУпаковок", МассивСтрокМаркировка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда  
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиЗаказаПокупателя = 0 Тогда
			ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
			Для Каждого ИмеющаясяСтрока Из ДанныеИБ.Запасы Цикл     
				ИмеющаясяСтрока.Количество = 0;    
			КонецЦикла;
			
			Для каждого Строка Из ПолученныеДанные.Запасы Цикл 
			
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", Строка.Характеристика);
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);       
				
				РаспределитьКоличество = Строка.Количество;
	
				МассивСтрокТЧ = ДанныеИБ.Запасы.НайтиСтроки(ПараметрыОтбора);
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					
					НоваяСтрока = ДанныеИБ.Запасы.Добавить(); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);  
					ПересчитатьСтрокуЗаказа(НоваяСтрока, ДанныеИБ.СуммаВключаетНДС);   
					РаспределитьКоличество = 0;
				Иначе   
					Для Каждого ИмеющаясяСтрока Из МассивСтрокТЧ Цикл     
						Если ИмеющаясяСтрока.Количество <= РаспределитьКоличество Тогда 
							РаспределитьКоличество = РаспределитьКоличество -  ИмеющаясяСтрока.Количество;
						Иначе   
							ИмеющаясяСтрока.Количество = РаспределитьКоличество;    
							РаспределитьКоличество = 0;
						КонецЕсли;  
						ПересчитатьСтрокуЗаказа(ИмеющаясяСтрока, ДанныеИБ.СуммаВключаетНДС);
						
						Если РаспределитьКоличество <= 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла; 
					
					Если РаспределитьКоличество > 0 Тогда
						НоваяСтрока = ДанныеИБ.Запасы.Добавить(); 
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
						НоваяСтрока.Количество = РаспределитьКоличество;
						ПересчитатьСтрокуЗаказа(НоваяСтрока, ДанныеИБ.СуммаВключаетНДС);
						РаспределитьКоличество = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;  
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Количество", 0);
			МассивСтрокТЧ = ДанныеИБ.Запасы.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ИмеющаясяСтрока Из МассивСтрокТЧ Цикл    
				ДанныеИБ.Запасы.Удалить(ИмеющаясяСтрока);
			КонецЦикла;   
			
			ДанныеИБ.СуммаДокумента = ДанныеИБ.Запасы.Итог("Всего") + ДанныеИБ.Работы.Итог("Всего");  
			
			// Маркировка
			ДанныеИБ.ШтрихкодыУпаковок.Загрузить(ПолученныеДанные.ШтрихкодыУпаковок.Выгрузить());       
			
		ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиЗаказаПокупателя = 1 Тогда    
	
			Для Каждого ИмеющаясяСтрока Из ДанныеИБ.Запасы Цикл     
				ИмеющаясяСтрока.КоличествоСобрано = 0;    
			КонецЦикла;
			
			Для каждого Строка Из ПолученныеДанные.Запасы Цикл 
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", Строка.Характеристика);
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);       
				
				МассивСтрокТЧ = ДанныеИБ.Запасы.НайтиСтроки(ПараметрыОтбора);
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					НоваяСтрока = ДанныеИБ.Запасы.Добавить(); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);  
					ПересчитатьСтрокуЗаказа(НоваяСтрока, ДанныеИБ.СуммаВключаетНДС);
					НоваяСтрока.КоличествоСобрано = Строка.КоличествоСобрано;    
				Иначе   
					ИмеющаясяСтрока = МассивСтрокТЧ[0];     
					ИмеющаясяСтрока.КоличествоСобрано = ИмеющаясяСтрока.КоличествоСобрано + Строка.КоличествоСобрано;    
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	
		ДанныеИБ.СостояниеЗаказа = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаСобран");   
		ДанныеИБ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
		ДанныеИБ.Проведен = Истина; 
		ДанныеИБ.СкидкиРассчитаны = Ложь;    
		ПолученныеДанные = Неопределено; 
	
	Иначе   
	
		ПолученныеДанные.Автор = КомпонентыОбмена.УзелКорреспондента.Пользователь;
		ПолученныеДанные.Ответственный =  УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					КомпонентыОбмена.УзелКорреспондента.Пользователь,
					"ОсновнойОтветственный");;
		
		КассаПоУмолчанию = Справочники.Организации.ВалютаИКассаПоУмолчанию(ПолученныеДанные);
		Если ЗначениеЗаполнено(КассаПоУмолчанию) Тогда
			ПолученныеДанные.Касса = КассаПоУмолчанию.Касса; 
		КонецЕсли;   
		ПолученныеДанные.ВалютаДокумента = Константы.НациональнаяВалюта.Получить(); 
		
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолученныеДанные.Дата, Новый Структура("Валюта", ПолученныеДанные.ВалютаДокумента));
		ПолученныеДанные.Курс = СтруктураПоВалюте.Курс;
		ПолученныеДанные.Кратность = СтруктураПоВалюте.Кратность;        
		
		ПолученныеДанные.БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетСубъекта(ПолученныеДанные.Организация,
			ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
		ПолученныеДанные.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;   
		ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата); 
		
		ПолученныеДанные.Касса = ПолученныеДанные.Организация.КассаПоУмолчанию;
		ПолученныеДанные.ПодписьРуководителя = ПолученныеДанные.Организация.ПодписьРуководителя;
		ПолученныеДанные.ПодписьГлавногоБухгалтера = ПолученныеДанные.Организация.ПодписьГлавногоБухгалтера;    
		
		ПолученныеДанные.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ПолученныеДанные.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ПолученныеДанные.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;    
		ПолученныеДанные.СкидкиРассчитаны = Истина;   
		ПолученныеДанные.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;      
		
		ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЗаказНаПродажу;  
		ПолученныеДанные.СтруктурнаяЕдиницаПродажи = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение; 
	
		
		Для Каждого СтрокаЗапасов Из ПолученныеДанные.Запасы Цикл   
			СтрокаЗапасов.ТипНоменклатурыЗапас = СтрокаЗапасов.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
											ИЛИ СтрокаЗапасов.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
		
			Если ПолученныеДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			ИначеЕсли ЗначениеЗаполнено(СтрокаЗапасов.Номенклатура.ВидСтавкиНДС) Тогда
				СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаЗапасов.Номенклатура.ВидСтавкиНДС, ПолученныеДанные.Дата);
			Иначе
				СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ПолученныеДанные.Организация.ВидСтавкиНДСПоУмолчанию, ПолученныеДанные.Дата);
			КонецЕсли;  
		 	СтрокаЗапасов.ЕдиницаИзмерения = СтрокаЗапасов.Номенклатура.ЕдиницаИзмерения;
	
			СтрокаЗапасов.СтавкаНДС = СтавкаНДС;      
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(СтрокаЗапасов, Новый Структура("СуммаВключаетНДС",ПолученныеДанные.СуммаВключаетНДС));  
			
			Если Не ЗначениеЗаполнено(СтрокаЗапасов.СтруктурнаяЕдиницаРезерв) Тогда
				СтрокаЗапасов.СтруктурнаяЕдиницаРезерв = ПолученныеДанные.СтруктурнаяЕдиницаРезерв;
			КонецЕсли;
	
		КонецЦикла;   
		
		ПолученныеДанные.СостояниеЗаказа = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаСобран");   
		ПолученныеДанные.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Запасы.Итог("Всего");
		ПолученныеДанные.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		ПолученныеДанные.ДатаОтгрузки = ПолученныеДанные.Дата;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));     
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));     
	
	СостояниеЗаказаПринят = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаПоставщикуПринят");  
	Если ДанныеИБ.СостояниеЗаказа = СостояниеЗаказаПринят Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ПриемкаОтПоставщикаПринят");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ПриемкаОтПоставщика");
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказПоставщику(ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.Физлицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.Физлицо.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");    
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС"); 
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);      
			Если СтруктураДанныхСтроки.Свойство("Упаковка") Тогда
				СтруктураДанныхСтроки.ЕдиницаИзмерения = СтруктураДанныхСтроки.Упаковка; 
			КонецЕсли;
			СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковок;
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиЗаказаПоставщику = 0 Тогда
			ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);   
			
			ДанныеИБ.Запасы.Очистить();
			Для каждого Строка Из ПолученныеДанные.Запасы Цикл
				НоваяСтрока = ДанныеИБ.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(НоваяСтрока, Новый Структура("СуммаВключаетНДС",ДанныеИБ.СуммаВключаетНДС));  
			КонецЦикла;
			ДанныеИБ.СуммаДокумента = ДанныеИБ.Запасы.Итог("Всего");
		КонецЕсли;     
		
		ДанныеИБ.СостояниеЗаказа = УправлениеМобильнымиПриложениямиУНФ.ЗначениеНастройки(КомпонентыОбмена.УзелКорреспондента, "СостояниеЗаказаПоставщикуПринят");           
		ДанныеИБ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
		ДанныеИБ.Проведен = Истина; 
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ОтгрузкаПоПеремещению");
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));     
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
Процедура ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");    
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);      
			Если СтруктураДанныхСтроки.Свойство("Упаковка") Тогда
				СтруктураДанныхСтроки.ЕдиницаИзмерения = СтруктураДанныхСтроки.Упаковка; 
			КонецЕсли;
			СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковок;
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтгрузкаПоПеремещениюЗапасов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Запасы
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Характеристика");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("УчитыватьВНУ");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Запасы,
		ДанныеИБ.Запасы,
		МассивКлючевыхПолей);
	
	ДанныеИБ.Запасы.Загрузить(ПолученныеДанные.Запасы.Выгрузить());
	
	ДанныеИБ.Проведен = Истина;
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));
КонецПроцедуры
Процедура ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("КоличествоФакт", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковокФакт", "КоличествоУпаковокФакт");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);      
			СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковокФакт;
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();   
		
		// Очистка факт
		Для каждого СтрокаИБ Из ДанныеИБ.Запасы Цикл 
			СтрокаИБ.Количество = 0;
			СтрокаИБ.Сумма = 0;
			СтрокаИБ.Отклонение = - СтрокаИБ.КоличествоУчет;
		КонецЦикла; 
		
		Для каждого Строка Из ПолученныеДанные.Запасы Цикл 
		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", Строка.Характеристика);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);
	
			МассивСтрокТЧ = ДанныеИБ.Запасы.НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				НоваяСтрока = ДанныеИБ.Запасы.Добавить(); 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				НоваяСтрока.Отклонение = НоваяСтрока.Количество - НоваяСтрока.КоличествоУчет;
			Иначе
				
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + Строка.Количество;
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				НоваяСтрока.Отклонение = НоваяСтрока.Количество - НоваяСтрока.КоличествоУчет;
			КонецЕсли;
		
			Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
				СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(ДанныеИБ, НоваяСтрока);
			КонецЕсли;	
		КонецЦикла; 
		
		ДанныеИБ.Проведен = Истина; 
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗаказПоставщику = ДанныеИБ.Заказ;
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ДанныеXDTO.Вставить("Ссылка", ЗаказПоставщику.Ссылка);
		ОжидаемаяДатаПоступления = ЗаказПоставщику.ДатаПоступления;
	Иначе
		ДанныеXDTO.Вставить("Ссылка", ДанныеИБ.Ссылка);
		ОжидаемаяДатаПоступления = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ПриемкаОтПоставщика");
	ДанныеXDTO.Вставить("ОжидаемаяДатаПоступления", ОжидаемаяДатаПоступления);
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));     
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Маркировка", ДанныеИБ.ДополнительныеСвойства.Маркировка);
	
	ОтветственныйЗаДокумент = ДанныеИБ.Ответственный;
	ТелефонМенеджера = "";
	Менеджер = ОтветственныйЗаДокумент.Физлицо.Наименование;
	
	Для Каждого СтрокаКИ Из ОтветственныйЗаДокумент.Физлицо.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ТелефонМенеджера = СтрокаКИ.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Менеджер", Менеджер);
	ДанныеXDTO.Вставить("ТелефонМенеджера", ТелефонМенеджера);
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиЗаказаПоставщику = 2 Тогда
		ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ЗаказПоставщику_Получение");
		ПолученныеДанные.Заказ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO,
									ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка; 
		Если ЗначениеЗаполнено(ПолученныеДанные.Заказ) Тогда
			ЗаполнитьЗначенияСвойств(ПолученныеДанные, ПолученныеДанные.Заказ, , "Номер");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолученныеДанные.Комментарий) Тогда 
			ПолученныеДанные.Комментарий = СтрШаблон("%1; %2: %3", ПолученныеДанные.Комментарий, НСтр("ru='Завершено в приложении'"), ДанныеXDTO.ДатаВыполнения);
		Иначе
			ПолученныеДанные.Комментарий = СтрШаблон("%1: %2", НСтр("ru='Завершено в приложении'"), ДанныеXDTO.ДатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиПриходнойНакладной = 1 
		И НЕ ДанныеXDTO.Свойство("ЗагрузкаЗаказаПоставщику") Тогда   
		ПолученныеДанные.ПроверятьРасхожденияСВходящимДокументом = Истина;
	КонецЕсли;
	
	// Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");   
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");    
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		Если ДанныеXDTO.Свойство("ЗагрузкаЗаказаПоставщику")
			ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиПриходнойНакладной = 0 Тогда
			ПравилаЗаполнения.Вставить("Количество", "Количество");
			ПравилаЗаполнения.Вставить("Сумма", "Сумма");
			ПравилаЗаполнения.Вставить("Цена", "Цена");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС"); 
		Иначе
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("Количество", "КоличествоСправочно");
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если СтруктураДанныхСтроки.Свойство("Упаковка") Тогда
				СтруктураДанныхСтроки.ЕдиницаИзмерения = СтруктураДанныхСтроки.Упаковка; 
			КонецЕсли;
			Если ДанныеXDTO.Свойство("ЗагрузкаЗаказаПоставщику")
				ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиПриходнойНакладной = 0 Тогда
					СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковок;
			Иначе
				СтруктураДанныхСтроки.КоличествоСправочно = СтруктураДанныхСтроки.КоличествоУпаковок;
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			СтруктураДанныхСтроки.Вставить("Всего", Строка.Сумма + Строка.СуммаНДС);
			Если ТипЗнч(СтруктураДанныхСтроки.СтавкаНДС) = Тип("Структура") Тогда
				СтруктураДанныхСтроки.СтавкаНДС = СтавкаНДСПоСтроке(СтруктураДанныхСтроки.СтавкаНДС.Значение);
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;      
	
	// Маркировка
	МассивСтрокМаркировка = МассивМаркировка(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
	Если МассивСтрокМаркировка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ШтрихкодыУпаковок", МассивСтрокМаркировка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Дата) Тогда
		ПолученныеДанные.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;  
	Если ДанныеXDTO.Свойство("ЗагрузкаЗаказаПоставщику") Тогда   
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ЗагрузкаЗаказаПоставщику", ДанныеXDTO.ЗагрузкаЗаказаПоставщику);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеТоваровРаспоряжение_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиПриходнойНакладной = 0
			ИЛИ ПолученныеДанные.ДополнительныеСвойства.Свойство("ЗагрузкаЗаказаПоставщику") Тогда
			СвойстваИсключения = Новый Массив;
			СвойстваИсключения.Добавить("Номер");
			СвойстваИсключения.Добавить("Дата");
			ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, СвойстваИсключения);   
	
			Для Каждого ИмеющаясяСтрока Из ДанныеИБ.Запасы Цикл     
				ИмеющаясяСтрока.Количество = 0;    
			КонецЦикла;
		
			Для каждого Строка Из ПолученныеДанные.Запасы Цикл 
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", Строка.Характеристика);
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);       
				
				РаспределитьКоличество = Строка.Количество;
	
				МассивСтрокТЧ = ДанныеИБ.Запасы.НайтиСтроки(ПараметрыОтбора);
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					
					НоваяСтрока = ДанныеИБ.Запасы.Добавить(); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);  
					ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(НоваяСтрока, Новый Структура("СуммаВключаетНДС", ДанныеИБ.СуммаВключаетНДС));     
					РаспределитьКоличество = 0;
				Иначе   
					Для Каждого ИмеющаясяСтрока Из МассивСтрокТЧ Цикл     
						Если ИмеющаясяСтрока.Количество <= РаспределитьКоличество Тогда 
							РаспределитьКоличество = РаспределитьКоличество -  ИмеющаясяСтрока.Количество;
						Иначе   
							ИмеющаясяСтрока.Количество = РаспределитьКоличество;    
							РаспределитьКоличество = 0;
						КонецЕсли;  
						ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(ИмеющаясяСтрока, Новый Структура("СуммаВключаетНДС", ДанныеИБ.СуммаВключаетНДС));     
						
						Если РаспределитьКоличество <= 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла; 
					
					Если РаспределитьКоличество > 0 Тогда
						НоваяСтрока = ДанныеИБ.Запасы.Добавить(); 
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
						НоваяСтрока.Количество = РаспределитьКоличество;
						ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(НоваяСтрока, Новый Структура("СуммаВключаетНДС", ДанныеИБ.СуммаВключаетНДС));     
						РаспределитьКоличество = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Количество", 0);
			МассивСтрокТЧ = ДанныеИБ.Запасы.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ИмеющаясяСтрока Из МассивСтрокТЧ Цикл    
				ДанныеИБ.Запасы.Удалить(ИмеющаясяСтрока);
			КонецЦикла;  
			
		ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ВариантЗагрузкиПриходнойНакладной = 1 Тогда    
			Для Каждого ИмеющаясяСтрока Из ДанныеИБ.Запасы Цикл     
				ИмеющаясяСтрока.КоличествоСправочно = 0;    
			КонецЦикла;
			
			Для каждого Строка Из ПолученныеДанные.Запасы Цикл 
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", Строка.Характеристика);
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);       
				
				МассивСтрокТЧ = ДанныеИБ.Запасы.НайтиСтроки(ПараметрыОтбора);
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					НоваяСтрока = ДанныеИБ.Запасы.Добавить(); 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);  
					ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(НоваяСтрока, Новый Структура("СуммаВключаетНДС", ДанныеИБ.СуммаВключаетНДС));     
					НоваяСтрока.КоличествоСправочно = Строка.КоличествоСправочно;    
				Иначе   
					ИмеющаясяСтрока = МассивСтрокТЧ[0];     
					ИмеющаясяСтрока.КоличествоСправочно = ИмеющаясяСтрока.КоличествоСправочно + Строка.КоличествоСправочно;    
				КонецЕсли;
			КонецЦикла; 
			ДанныеИБ.ПроверятьРасхожденияСВходящимДокументом = Истина;   
		КонецЕсли;
		
		// Маркировка
		ДанныеИБ.ШтрихкодыУпаковок.Загрузить(ПолученныеДанные.ШтрихкодыУпаковок.Выгрузить());  
		     
		ДанныеИБ.СуммаДокумента = ДанныеИБ.Запасы.Итог("Всего") + ДанныеИБ.Расходы.Итог("Всего");
		ДанныеИБ.Проведен = Истина; 
		
		ПолученныеДанные = Неопределено;
	Иначе
		Для каждого Строка Из ПолученныеДанные.Запасы Цикл
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(Строка, Новый Структура("СуммаВключаетНДС", ПолученныеДанные.СуммаВключаетНДС));     
			Если Не ЗначениеЗаполнено(Строка.СтруктурнаяЕдиница) Тогда
				Строка.СтруктурнаяЕдиница = ПолученныеДанные.СтруктурнаяЕдиница;
			КонецЕсли;
		КонецЦикла;
	
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Запасы.Итог("Всего") + ПолученныеДанные.Расходы.Итог("Всего");
		ПолученныеДанные.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		ПолученныеДанные.Проведен = Истина; 
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Представление", Строка(ДанныеИБ.Ссылка));
	ДанныеXDTO.Вставить("ВидОперации", "ПриемкаПоПеремещению");
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));
КонецПроцедуры
Процедура ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");    
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);      
			Если СтруктураДанныхСтроки.Свойство("Упаковка") Тогда
				СтруктураДанныхСтроки.ЕдиницаИзмерения = СтруктураДанныхСтроки.Упаковка; 
			КонецЕсли;
			СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковок;
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПриемкаПоПеремещениюЗапасов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Запасы
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Характеристика");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("УчитыватьВНУ");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Запасы,
		ДанныеИБ.Запасы,
		МассивКлючевыхПолей);
	
	ДанныеИБ.Запасы.Загрузить(ПолученныеДанные.Запасы.Выгрузить());
	
	ДанныеИБ.Проведен = Истина;
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПриходныйОрдер_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");    
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);      
			Если СтруктураДанныхСтроки.Свойство("Упаковка") Тогда
				СтруктураДанныхСтроки.ЕдиницаИзмерения = СтруктураДанныхСтроки.Упаковка; 
			КонецЕсли;
			СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковок;
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.РасходныйОрдер;  
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Дата) Тогда
		ПолученныеДанные.Дата = ТекущаяДатаСеанса();
	КонецЕсли;  
	
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда      
		ПолученныеДанные.ДокументОснование = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(ДанныеXDTO.Ссылка.Значение, Тип("ДокументСсылка.ЗаказПоставщику"), КомпонентыОбмена);
	КонецЕсли;
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры
Процедура ПКО_Документ_РасходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПКОДляЗагрузки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ЗаказПокупателя_Получение");
	ПолученныеДанные.Заказ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO,
								ПКОДляЗагрузки, "ПолучитьСсылку").Ссылка; 
	ЗаполнитьЗначенияСвойств(ПолученныеДанные, ПолученныеДанные.Заказ, , "Номер");
	
	ПолученныеДанные.Дата = ТекущаяДатаСеанса();                   
	Если ЗначениеЗаполнено(ПолученныеДанные.Комментарий) Тогда 
		ПолученныеДанные.Комментарий = СтрШаблон("%1; %2: %3", ПолученныеДанные.Комментарий, НСтр("ru='Завершено в приложении'"), ДанныеXDTO.ДатаВыполнения);
	Иначе
		ПолученныеДанные.Комментарий = СтрШаблон("%1: %2", НСтр("ru='Завершено в приложении'"), ДанныеXDTO.ДатаВыполнения);
	КонецЕсли;
	
	ПолученныеДанные.СкидкиРассчитаны = Истина;    
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");    
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС"); 
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);      
			Если СтруктураДанныхСтроки.Свойство("Упаковка") Тогда
				СтруктураДанныхСтроки.ЕдиницаИзмерения = СтруктураДанныхСтроки.Упаковка; 
			КонецЕсли;
			СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковок;
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	// Маркировка
	МассивСтрокМаркировка = МассивМаркировка(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO);
	Если МассивСтрокМаркировка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ШтрихкодыУпаковок", МассивСтрокМаркировка);
	КонецЕсли;
	   
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РасходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		СвойстваИсключения = Новый Массив;
		СвойстваИсключения.Добавить("Номер");
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, СвойстваИсключения);
		
		ДанныеИБ.Запасы.Очистить();
		Для каждого Строка Из ПолученныеДанные.Запасы Цикл
			НоваяСтрока = ДанныеИБ.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ТипНоменклатурыЗапас = НоваяСтрока.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
							ИЛИ НоваяСтрока.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(НоваяСтрока, Новый Структура("СуммаВключаетНДС", ПолученныеДанные.СуммаВключаетНДС));     
		КонецЦикла; 
		
		// Маркировка
		ДанныеИБ.ШтрихкодыУпаковок.Загрузить(ПолученныеДанные.ШтрихкодыУпаковок.Выгрузить());       
			
		ДанныеИБ.СуммаДокумента = ДанныеИБ.Запасы.Итог("Всего");
		ДанныеИБ.Проведен = Истина;     
		
		ПолученныеДанные = Неопределено;
	Иначе
		Для каждого Строка Из ПолученныеДанные.Запасы Цикл
			Строка.ТипНоменклатурыЗапас = Строка.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
							ИЛИ Строка.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(Строка, Новый Структура("СуммаВключаетНДС", ПолученныеДанные.СуммаВключаетНДС));     
		КонецЦикла;
	
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Запасы.Итог("Всего");
		ПолученныеДанные.Проведен = Истина;     
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РасходныйОрдер_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");    
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);      
			Если СтруктураДанныхСтроки.Свойство("Упаковка") Тогда
				СтруктураДанныхСтроки.ЕдиницаИзмерения = СтруктураДанныхСтроки.Упаковка; 
			КонецЕсли;
			СтруктураДанныхСтроки.Количество = СтруктураДанныхСтроки.КоличествоУпаковок;
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.РасходныйОрдер;  
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Дата) Тогда
		ПолученныеДанные.Дата = ТекущаяДатаСеанса();
	КонецЕсли;  
	
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда      
		ПолученныеДанные.ДокументОснование = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(ДанныеXDTO.Ссылка.Значение, Тип("ДокументСсылка.ЗаказПокупателя"), КомпонентыОбмена);
	КонецЕсли;
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры

#КонецОбласти
#Область Справочники_Номенклатура
Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("РегистрСведенийНаборЗаписей.ШтрихкодыНоменклатуры") Тогда
		ИспользованиеПКО.Справочник_Штрихкоды_Отправка = Ложь;
	Иначе
		Номенклатура = ДанныеИБ.Отбор.Номенклатура;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Попытка
		Если НЕ ЗначениеЗаполнено(ДанныеИБ.ТипНоменклатурыПоУмолчанию) Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
			ДанныеXDTO.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
		КонецЕсли;
	Исключение  
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Исключение определения категории'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение);
	КонецПопытки;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));     
	
	СтавкаНДССсылка = Справочники.СтавкиНДС.СтавкаНДС(ДанныеИБ.ВидСтавкиНДС);
	Если СтавкаНДССсылка.НеОблагается Тогда
		СтавкаНДС = "БезНДС";
	ИначеЕсли СтавкаНДССсылка.Ставка = 18
		И НЕ СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС18";
	ИначеЕсли СтавкаНДССсылка.Ставка = 18
		И СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС18_118";
	ИначеЕсли СтавкаНДССсылка.Ставка = 10 
		И НЕ СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС10";
	ИначеЕсли СтавкаНДССсылка.Ставка = 10 
		И СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС10_110";
	ИначеЕсли СтавкаНДССсылка.Ставка = 20 
		И НЕ СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС20";
	ИначеЕсли СтавкаНДССсылка.Ставка = 20 
		И СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС20_120";
	ИначеЕсли СтавкаНДССсылка.Ставка = 0 Тогда
		СтавкаНДС = "НДС0";
	Иначе
		СтавкаНДС = "БезНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("СтавкаНДС", СтавкаНДС);    
	
	// Признак маркировки
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Маркируемый", Ложь);         
	
	СтруктураВидАП = Неопределено;
	Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукции) 
		И ДанныеXDTO.Свойство("ВидАлкогольнойПродукции", СтруктураВидАП) 
		И СтруктураВидАП <> Неопределено Тогда
		
		МаркируемыйАП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ВидАлкогольнойПродукции, "Маркируемый");
		СтруктураНастроек.Вставить("Маркируемый", Истина);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура("Номенклатура", ДанныеИБ.Ссылка);
	ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМП(СтруктураДанные);
	Если СтруктураДанные.МаркируемаяПродукция Тогда
		СтруктураНастроек.Вставить("Маркируемый", Истина); 
	КонецЕсли;
	
	// Отправка веса    
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВес Тогда
		СтруктураНастроек.Вставить("Вес", ДанныеИБ.Вес);
	КонецЕсли; 
	 
	// Отправка цен
	ВидЦенЗакупки = КомпонентыОбмена.ПараметрыКонвертации.ВидЦенЗакупки;
	ВидЦенПродажи = КомпонентыОбмена.ПараметрыКонвертации.ВидЦенПродажи;
	Если ТипЗнч(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаЦенНоменклатуры) = Тип("ТаблицаЗначений") Тогда
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ВидЦен");  
		СтруктураПоиска.Номенклатура = ДанныеИБ.Ссылка;
		СтруктураПоиска.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СтруктураПоиска.ВидЦен = ВидЦенЗакупки;  
		СтрокиЦен = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаЦенНоменклатуры.НайтиСтроки(СтруктураПоиска); 
		Если СтрокиЦен.Количество() = 0 Тогда
			СтруктураНастроек.Вставить("ЦенаЗакупки", 0);
		Иначе
			СтрокаЦены = СтрокиЦен[0];
			СтруктураНастроек.Вставить("ЦенаЗакупки", СтрокаЦены.Цена);
		КонецЕсли;  
		                                                 
		СтруктураПоиска.ВидЦен = ВидЦенПродажи;  
		СтрокиЦен = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаЦенНоменклатуры.НайтиСтроки(СтруктураПоиска); 
		Если СтрокиЦен.Количество() = 0 Тогда
			СтруктураНастроек.Вставить("ЦенаПродажи", 0);
		Иначе
			СтрокаЦены = СтрокиЦен[0];
			СтруктураНастроек.Вставить("ЦенаПродажи", СтрокаЦены.Цена);
		КонецЕсли;                                                   
	КонецЕсли;
		 
	МассивДопРеквизитов = Новый Массив;
	Для Каждого ЭлементНастроек Из СтруктураНастроек Цикл
		МассивДопРеквизитов.Добавить(ЭлементНастроек.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураНастроек, ДанныеXDTO, МассивДопРеквизитов);
	
	
	ВыгруженнаяНоменклатура = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура;
	Если ВыгруженнаяНоменклатура = Неопределено Тогда
		ВыгруженнаяНоменклатура = Новый Массив;
	КонецЕсли; 
	Если ВыгруженнаяНоменклатура.Найти(ДанныеИБ.Ссылка) = Неопределено Тогда
		ВыгруженнаяНоменклатура.Добавить(ДанныеИБ.Ссылка);
	КонецЕсли;
	КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура = ВыгруженнаяНоменклатура;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ЗначениеЗаполнено(ДанныеXDTO.AdditionalInfo) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ДанныеXDTO.AdditionalInfo);
		ДополнительныеДанные = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть(); 
		
		Если ДополнительныеДанные.Свойство("ЦенаЗакупки") И ЗначениеЗаполнено(ДополнительныеДанные.ЦенаЗакупки) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ЦенаЗакупки", ДополнительныеДанные.ЦенаЗакупки);
		КонецЕсли;
		Если ДополнительныеДанные.Свойство("ЦенаПродажи") И ЗначениеЗаполнено(ДополнительныеДанные.ЦенаПродажи) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ЦенаПродажи", ДополнительныеДанные.ЦенаПродажи);
		КонецЕсли;
		Если ДополнительныеДанные.Свойство("ИспользоватьСерии") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИспользоватьСерии", ДополнительныеДанные.ИспользоватьСерии);
		КонецЕсли;
		Если ДополнительныеДанные.Свойство("Штрихкоды") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Штрихкоды", ДополнительныеДанные.Штрихкоды);
		КонецЕсли;
	КонецЕсли; 
	
	КатегорияНовойНоменклатуры = КомпонентыОбмена.ПараметрыКонвертации.КатегорияНовойНоменклатуры;  
	Если ЗначениеЗаполнено(КатегорияНовойНоменклатуры) Тогда     
	
		ПолученныеДанные.КатегорияНоменклатуры = КатегорияНовойНоменклатуры;
		КатегорииНоменклатурыСервер.ЗаполнитьСвойстваНоменклатурыПоКатегории(ПолученныеДанные, Истина);    
		
		ТипНоменклатуры = ПолученныеДанные.ТипНоменклатуры; 
		
		Если ЗначениеЗаполнено(ПолученныеДанные.КатегорияНоменклатуры.СпособПополнения) И Не ЗначениеЗаполнено(ПолученныеДанные.СпособПополнения) Тогда
			ПолученныеДанные.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
		КонецЕсли;     
		Если ЗначениеЗаполнено(ПолученныеДанные.КатегорияНоменклатуры.ПризнакПредметаРасчета) И Не ЗначениеЗаполнено(ПолученныеДанные.ПризнакПредметаРасчета)  Тогда
			ПолученныеДанные.ПризнакПредметаРасчета = ПолученныеДанные.КатегорияНоменклатуры.ПризнакПредметаРасчета;
		КонецЕсли;
		
		ПолученныеДанные.МетодОценки = ?(Не ЗначениеЗаполнено(ПолученныеДанные.МетодОценки), ПредопределенноеЗначение("Перечисление.МетодОценкиЗапасов.ПоСредней"), ПолученныеДанные.МетодОценки);
		ПолученныеДанные.НаправлениеДеятельности = ?(Не ЗначениеЗаполнено(ПолученныеДанные.НаправлениеДеятельности), ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ОсновноеНаправление"), ПолученныеДанные.НаправлениеДеятельности);
	
		Если Не ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаЗапасов) Тогда
			ПолученныеДанные.СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаЗатрат) Тогда
			ФОИспользоватьПодсистемуПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство");
			Если ФОИспользоватьПодсистемуПроизводство Тогда
				ПолученныеДанные.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.НезавершенноеПроизводство");
			Иначе
				ПолученныеДанные.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
			КонецЕсли;
		КонецЕсли;
		
		ПолученныеДанные.СрокИсполненияЗаказа = ?(Не ЗначениеЗаполнено(ПолученныеДанные.СрокИсполненияЗаказа),1, ПолученныеДанные.СрокИсполненияЗаказа);
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПапкаНовойНоменклатуры = КомпонентыОбмена.ПараметрыКонвертации.ПапкаНовойНоменклатуры;
	Если ДанныеИБ = Неопределено Тогда  
		Если ЗначениеЗаполнено(ПапкаНовойНоменклатуры) Тогда 
			ПолученныеДанные.Родитель = ПапкаНовойНоменклатуры;
		КонецЕсли;
	КонецЕсли;   
	
	ЦенаЗакупки = 0;
	ЦенаПродажи = 0;
	НоменклатураСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	Если (ПолученныеДанные.ДополнительныеСвойства.Свойство("ЦенаЗакупки")
		И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ЦенаЗакупки))  Тогда
			ЦенаЗакупки = ПолученныеДанные.ДополнительныеСвойства.ЦенаЗакупки;
	КонецЕсли;  
	Если (ПолученныеДанные.ДополнительныеСвойства.Свойство("ЦенаПродажи")
		И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ЦенаПродажи)) Тогда
			ЦенаПродажи = ПолученныеДанные.ДополнительныеСвойства.ЦенаПродажи;
	КонецЕсли; 
	Если ЦенаЗакупки > 0 ИЛИ ЦенаПродажи > 0 Тогда
		ЗаписатьЦены (НоменклатураСсылка, ЦенаЗакупки, ЦенаПродажи, КомпонентыОбмена);
	КонецЕсли;   
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Штрихкоды")
		И ТипЗнч(ПолученныеДанные.ДополнительныеСвойства.Штрихкоды) = Тип("Массив") Тогда
			ЗаписатьШтрихкоды (НоменклатураСсылка, ПолученныеДанные.ДополнительныеСвойства.Штрихкоды, КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));
КонецПроцедуры
Процедура ПКО_Справочник_Упаковки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмеренияПоКлассификатору) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ЕдиницаИзмерения", ДанныеИБ.ЕдиницаИзмеренияПоКлассификатору);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
	КонецЕсли;
	
	Номенклатура = Неопределено;
	Если ЗначениеЗаполнено(ДанныеИБ.Владелец) И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = ДанныеИБ.Владелец;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ДанныеXDTO.Вставить("Номенклатура", Номенклатура);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Номенклатура") Тогда
	
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", ДанныеXDTO.КлючевыеСвойства.Номенклатура);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец)
		ИЛИ (ДанныеИБ <> Неопределено И ТипЗнч(ДанныеИБ.Владелец) <> Тип("СправочникСсылка.Номенклатура")) Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеДляПечати) И ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		НоменклатураСтруктура = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Номенклатура_Отправка"); 
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", НоменклатураСтруктура);
			
		// Отправка цен
		СтруктураНастроек = Новый Структура;
		ВидЦенЗакупки = КомпонентыОбмена.ПараметрыКонвертации.ВидЦенЗакупки;
		ВидЦенПродажи = КомпонентыОбмена.ПараметрыКонвертации.ВидЦенПродажи;
		Если ТипЗнч(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаЦенНоменклатуры) = Тип("ТаблицаЗначений") Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ВидЦен");  
			СтруктураПоиска.Номенклатура = ДанныеИБ.Владелец;
			СтруктураПоиска.Характеристика = ДанныеИБ.Ссылка;
			СтруктураПоиска.ВидЦен = ВидЦенЗакупки;  
			СтрокиЦен = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаЦенНоменклатуры.НайтиСтроки(СтруктураПоиска); 
			Если СтрокиЦен.Количество() = 0 Тогда
				СтруктураНастроек.Вставить("ЦенаЗакупки", 0);
			Иначе
				СтрокаЦены = СтрокиЦен[0];
				СтруктураНастроек.Вставить("ЦенаЗакупки", СтрокаЦены.Цена);
			КонецЕсли;  
			                                                 
			СтруктураПоиска.ВидЦен = ВидЦенПродажи;  
			СтрокиЦен = КомпонентыОбмена.ПараметрыКонвертации.ТаблицаЦенНоменклатуры.НайтиСтроки(СтруктураПоиска); 
			Если СтрокиЦен.Количество() = 0 Тогда
				СтруктураНастроек.Вставить("ЦенаПродажи", 0);
			Иначе
				СтрокаЦены = СтрокиЦен[0];
				СтруктураНастроек.Вставить("ЦенаПродажи", СтрокаЦены.Цена);
			КонецЕсли;                                                   
		КонецЕсли;
			 
		МассивДопРеквизитов = Новый Массив;
		Для Каждого ЭлементНастроек Из СтруктураНастроек Цикл
			МассивДопРеквизитов.Добавить(ЭлементНастроек.Ключ);
		КонецЦикла;
		ЗаполнитьДополнительныеРеквизиты(СтруктураНастроек, ДанныеXDTO, МассивДопРеквизитов);
			
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидНоменклатуры", ДанныеИБ.Владелец);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИнструкцияВладелец = Новый Структура;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидНоменклатуры") Тогда
		ИнструкцияВладелец.Вставить("Значение", ДанныеXDTO.КлючевыеСвойства.ВидНоменклатуры);
		ИнструкцияВладелец.Вставить("ИмяПКО",   "Справочник_КатегорииНоменклатурыВН_Получение");
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Номенклатура") Тогда
		ИнструкцияВладелец.Вставить("Значение", ДанныеXDTO.КлючевыеСвойства.Номенклатура);
		ИнструкцияВладелец.Вставить("ИмяПКО",   "Справочник_Номенклатура_Получение");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнструкцияВладелец) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", ИнструкцияВладелец);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Штрихкоды_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номенклатура 		= ДанныеИБ.Отбор.Номенклатура;
	Характеристика 		= ДанныеИБ.Отбор.Характеристика;
	Упаковка	= ДанныеИБ.Отбор.ЕдиницаИзмерения;
	Если ЗначениеЗаполнено(Упаковка) Тогда
		Если ЗначениеЗаполнено(Упаковка.Владелец) И ТипЗнч(Упаковка.Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
			УпаковкаСтруктура = Новый Структура("Наименование, ЕдиницаИзмеренияПоКлассификатору, Коэффициент, Ссылка");
			ЗаполнитьЗначенияСвойств(УпаковкаСтруктура, Упаковка);
			УпаковкаСтруктура.Вставить("Номенклатура", Номенклатура);  
			УпаковкаСтруктура.Вставить("Владелец", Номенклатура);  
			Упаковка = УпаковкаСтруктура;
		КонецЕсли;	
	Иначе
		Упаковка = Неопределено;
	КонецЕсли;
	
	Штрихкоды = Новый ТаблицаЗначений;
	Штрихкоды.Колонки.Добавить("Номенклатура");
	Штрихкоды.Колонки.Добавить("Упаковка");
	Штрихкоды.Колонки.Добавить("Характеристика");
	Штрихкоды.Колонки.Добавить("Штрихкод");
	
	Если ЗначениеЗаполнено(Номенклатура)
		И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтрокаШК = Штрихкоды.Добавить();
		СтрокаШК.Номенклатура = Номенклатура;
		СтрокаШК.Упаковка = Упаковка; 
		Если ЗначениеЗаполнено(Характеристика) Тогда
			СтрокаШК.Характеристика = Характеристика;
		КонецЕсли;
		СтрокаШК.Штрихкод = ДанныеИБ.Отбор.Штрихкод;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Отбор.Штрихкод);
	ДанныеXDTO.Вставить("Записи", Штрихкоды);
КонецПроцедуры

#КонецОбласти
#Область Справочники_Структура_предприятия
Процедура ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ЭтоМагазинГруппаСкладов = ДанныеИБ.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов;
	
	ИспользованиеПКО.Справочник_Склады_Отправка = Не ЭтоМагазинГруппаСкладов;
	ИспользованиеПКО.Справочник_Магазины_Отправка = ЭтоМагазинГруппаСкладов;
КонецПроцедуры
Процедура ПКО_Справочник_Магазины_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));
КонецПроцедуры
Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));     
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьСвободныйВводПоступлений", КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьСвободныйВводПоступлений);
	СтруктураНастроек.Вставить("ИспользоватьСвободныйВводСборок", КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьСвободныйВводСборок);
	СтруктураНастроек.Вставить("РедактироватьЦеныТоваров", КомпонентыОбмена.ПараметрыКонвертации.РедактироватьЦеныТоваров);
	СтруктураНастроек.Вставить("ИспользоватьВес", КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьВес);
	СтруктураНастроек.Вставить("ИспользоватьУпаковки", КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьУпаковки);   
	
	СтруктураНастроек.Вставить("Приемка_СкрыватьЦену", КомпонентыОбмена.ПараметрыКонвертации.Приемка_СкрыватьЦену);   
	СтруктураНастроек.Вставить("Приемка_СкрыватьПлан", КомпонентыОбмена.ПараметрыКонвертации.Приемка_СкрыватьПлан);   
	СтруктураНастроек.Вставить("Приемка_ЗапретДобавленияТовара", КомпонентыОбмена.ПараметрыКонвертации.Приемка_ЗапретДобавленияТовара);   
	СтруктураНастроек.Вставить("Сборка_СкрыватьЦену", КомпонентыОбмена.ПараметрыКонвертации.Сборка_СкрыватьЦену);   
	СтруктураНастроек.Вставить("Сборка_СкрыватьПлан", КомпонентыОбмена.ПараметрыКонвертации.Сборка_СкрыватьПлан);   
	СтруктураНастроек.Вставить("Сборка_ЗапретДобавленияТовара", КомпонентыОбмена.ПараметрыКонвертации.Сборка_ЗапретДобавленияТовара);   
	СтруктураНастроек.Вставить("Пересчет_СкрыватьЦену", КомпонентыОбмена.ПараметрыКонвертации.Пересчет_СкрыватьЦену);   
	СтруктураНастроек.Вставить("Пересчет_СкрыватьПлан", КомпонентыОбмена.ПараметрыКонвертации.Пересчет_СкрыватьПлан);   
	СтруктураНастроек.Вставить("Пересчет_ЗапретДобавленияТовара", КомпонентыОбмена.ПараметрыКонвертации.Пересчет_ЗапретДобавленияТовара);   
	
	СтруктураНастроек.Вставить("ИдентификаторИнформационнойБазы", КомпонентыОбмена.ПараметрыКонвертации.ИдентификаторИнформационнойБазы);   
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	КонфигурацияУправляющейСистемы = СтрШаблон("%1 (%2)/ %3", Метаданные.Синоним, Метаданные.Версия, СистемнаяИнформация.ВерсияПриложения);
	СтруктураНастроек.Вставить("КонфигурацияУправляющейСистемы", КонфигурацияУправляющейСистемы);
	
	МассивДопРеквизитов = Новый Массив;
	Для каждого ЭлементНастроек Из СтруктураНастроек Цикл
		МассивДопРеквизитов.Добавить(ЭлементНастроек.Ключ);
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураНастроек, ДанныеXDTO, МассивДопРеквизитов);
КонецПроцедуры

#КонецОбласти
#Область Справочники_Базовые_классификаторы
Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
	
		Код = ДанныеИБ.МеждународноеСокращение;
		Если Не ЗначениеЗаполнено(Код) Тогда
			Код = ДанныеИБ.Наименование;
		КонецЕсли;
		
		Код = Лев(Код, 4);
		
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Код") И Не ЗначениеЗаполнено(ДанныеXDTO.Код) Тогда    
		ПолученныеДанные = Справочники.КлассификаторЕдиницИзмерения.шт;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Справочники_Контрагенты
Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Ссылка", (ДанныеИБ.Ссылка));
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Область Алгоритмы


Процедура ВыгрузкаШтрихкодовНоменклатуры(КомпонентыОбмена)
	ВыгруженнаяНоменклатура = КомпонентыОбмена.ПараметрыКонвертации.ВыгруженнаяНоменклатура;
	Если ТипЗнч(ВыгруженнаяНоменклатура) = Тип("Массив") Тогда  
		Запрос = Новый Запрос;    
		Запрос.УстановитьПараметр("ВыгруженнаяНоменклатура", ВыгруженнаяНоменклатура);
		Запрос.Текст = "ВЫБРАТЬ
			|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
			|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
			|	ШтрихкодыНоменклатуры.Партия КАК Партия,
			|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Номенклатура В (&ВыгруженнаяНоменклатура)";
		Результат = Запрос.Выполнить();  	 
		
		Если НЕ Результат.Пустой() Тогда   
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ШтрихкодыНоменклатуры_Отправка", "Имя"); 
			Если ПравилоОбработки <> Неопределено Тогда 
				ВыборкаШК = Результат.Выбрать(); 
				Пока ВыборкаШК.Следующий() Цикл   
					СтруктураОтбор = Новый Структура;
					СтруктураОтбор.Вставить("Штрихкод", ВыборкаШК.Штрихкод);
					СтруктураОтбор.Вставить("Номенклатура", ВыборкаШК.Номенклатура);
					СтруктураОтбор.Вставить("Характеристика", ВыборкаШК.Характеристика);
					СтруктураОтбор.Вставить("ЕдиницаИзмерения", ВыборкаШК.ЕдиницаИзмерения);
					СтруктураНабора = Новый Структура("Отбор", СтруктураОтбор);      
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураНабора, ПравилоОбработки);  
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;  
	КонецЕсли;
КонецПроцедуры
Функция ДанныеДокументаЗаказПокупателя(ДанныеИБ, ПараметрыКонвертации)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ЕстьКП = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу 
	И ДанныеИБ.КоличествоВариантовКП > 0;
	
	Запрос.УстановитьПараметр("ЕстьКП", ЕстьКП);
	Запрос.УстановитьПараметр("НомерВариантаКП", ДанныеИБ.ОсновнойВариантКП);
	Запрос.УстановитьПараметр("ИспользоватьВес", ПараметрыКонвертации.ИспользоватьВес);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказПокупателяЗапасы.ЕдиницаИзмерения
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказПокупателяЗапасы.Количество КАК КоличествоУпаковок,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И ЗаказПокупателяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПокупателяЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ЕСТЬNULL(ЗаказПокупателяЗапасы.Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|		ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ВидПродукцииИС В (ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)) КАК Маркируемый,
	|	ЗаказПокупателяЗапасы.Номенклатура.Весовой КАК Весовой,
	|	ВЫБОР
	|		КОГДА &ИспользоватьВес
	|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.Вес
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесЕдиницыТовара,
	|	ЗаказПокупателяЗапасы.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЗаказПокупателяЗапасы.Номенклатура.ВидМаркировки КАК ВидМаркировки
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (НЕ &ЕстьКП
	|			ИЛИ ЗаказПокупателяЗапасы.НомерВариантаКП = &НомерВариантаКП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЗаказПокупателяЗапасы.Содержание, 1, 100) = """"
	|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (НЕ &ЕстьКП
	|			ИЛИ ЗаказПокупателяЗапасы.НомерВариантаКП = &НомерВариантаКП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЗаказПокупателя.НоменклатураДоставки,
	|	1,
	|	ЗаказПокупателя.СтоимостьДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки,
	|	ЗаказПокупателя.СтавкаНДСДоставки,
	|	ЗаказПокупателя.СуммаНДСДоставки,
	|	ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка
	|	И ЗаказПокупателя.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ЗаказПокупателя.СтоимостьДоставки > 0";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
	ЗаполнитьЕдиницыИСтавкиНДС_Отправка(ТаблицаТоваров);
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
	ЗаполнитьЕдиницыИСтавкиНДС_Отправка(ТаблицаУслуги);
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаЗаказПоставщику(ДанныеИБ, ПараметрыКонвертации)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВес", ПараметрыКонвертации.ИспользоватьВес);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказПоставщикуЗапасы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказПоставщикуЗапасы.ЕдиницаИзмерения
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПоставщикуЗапасы.Количество * ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказПоставщикуЗапасы.Количество КАК КоличествоУпаковок,
	|	ЗаказПоставщикуЗапасы.Цена КАК Цена,
	|	ЗаказПоставщикуЗапасы.Сумма КАК Сумма,
	|	ЗаказПоставщикуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщикуЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПоставщикуЗапасы.Всего КАК Всего,
	|	ЗаказПоставщикуЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПоставщикуЗапасы.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказПоставщикуЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ЕСТЬNULL(ЗаказПоставщикуЗапасы.Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|		ИЛИ ЗаказПоставщикуЗапасы.Номенклатура.ВидПродукцииИС В (ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)) КАК Маркируемый,
	|	ЗаказПоставщикуЗапасы.Номенклатура.Весовой КАК Весовой,
	|	ВЫБОР
	|		КОГДА &ИспользоватьВес
	|			ТОГДА ЗаказПоставщикуЗапасы.Номенклатура.Вес
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесЕдиницыТовара,
	|	ЗаказПоставщикуЗапасы.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЗаказПоставщикуЗапасы.Номенклатура.ВидМаркировки КАК ВидМаркировки
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &Ссылка
	|	И ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПоставщикуЗапасы.Количество * ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ЗаказПоставщикуЗапасы.Цена КАК Цена,
	|	ЗаказПоставщикуЗапасы.Сумма КАК Сумма,
	|	ЗаказПоставщикуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщикуЗапасы.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЗаказПоставщикуЗапасы.Содержание, 1, 100) = """"
	|			ТОГДА ЗаказПоставщикуЗапасы.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &Ссылка
	|	И ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
	ЗаполнитьЕдиницыИСтавкиНДС_Отправка(ТаблицаТоваров);
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
	ЗаполнитьЕдиницыИСтавкиНДС_Отправка(ТаблицаУслуги);
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПриходнаяНакладная(ДанныеИБ, ПараметрыКонвертации)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьВес", ПараметрыКонвертации.ИспользоватьВес); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Цена / ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Цена
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ПриходнаяНакладнаяЗапасы.Сумма КАК Сумма,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ПОДСТРОКА(ПриходнаяНакладнаяЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
	|	ПриходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|				И ПриходнаяНакладнаяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И ПриходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК Всего,
	|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика, 
	|	ЕСТЬNULL(ПриходнаяНакладнаяЗапасы.Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|		ИЛИ ПриходнаяНакладнаяЗапасы.Номенклатура.ВидПродукцииИС В (ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)) КАК Маркируемый,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.Весовой КАК Весовой,
	|	ВЫБОР
	|		КОГДА &ИспользоватьВес
	|			ТОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.Вес
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесЕдиницыТовара,
	|	ПриходнаяНакладнаяЗапасы.Партия КАК Партия,
	|	""ПоФактическомуИспользованию"" КАК ВозвратПодДеятельность,
	|	ПриходнаяНакладнаяЗапасы.Себестоимость КАК Себестоимость,
	|	ЕСТЬNULL(ПриходнаяНакладнаяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
	|	ПриходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТДСсылка,
	|	ПриходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ПриходнаяНакладнаяЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|	И ПриходнаяНакладнаяЗапасы.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяРасходы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ПриходнаяНакладнаяРасходы.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				ТОГДА ПриходнаяНакладнаяРасходы.Количество * ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПриходнаяНакладнаяРасходы.Цена / ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Цена
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ПриходнаяНакладнаяРасходы.Сумма КАК Сумма,
	|	ПриходнаяНакладнаяРасходы.СтавкаНДС КАК СтавкаНДС,
	|	ПриходнаяНакладнаяРасходы.СуммаНДС КАК СуммаНДС,
	|	ПриходнаяНакладнаяРасходы.СтруктурнаяЕдиница КАК ПодразделениеЗатрат,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
	|				И (ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
	|					ИЛИ ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроизводственныйРасход,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ПриходнаяНакладнаяРасходы.Содержание, 1, 100) = """"
	|			ТОГДА ПриходнаяНакладнаяРасходы.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ ПриходнаяНакладнаяРасходы.Содержание
	|	КОНЕЦ КАК Содержание,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВключатьРасходыВСебестоимость
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоДопРасходы,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ПриходнаяНакладнаяРасходы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
	|ГДЕ
	|	ПриходнаяНакладнаяРасходы.Ссылка = &Ссылка
	|	И ПриходнаяНакладнаяРасходы.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК СтоимостьТоваров,
	|	ПриходнаяНакладнаяЗапасы.Ссылка КАК ДокументПоступления,
	|	ПриходнаяНакладнаяЗапасы.Себестоимость КАК Себестоимость,
	|	ПриходнаяНакладнаяЗапасы.СуммаРасходов КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС
	|				ТОГДА ПриходнаяНакладнаяЗапасы.СуммаРасходов - ПриходнаяНакладнаяЗапасы.СуммаРасходов / ((ПриходнаяНакладнаяЗапасы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.СуммаРасходов * ПриходнаяНакладнаяЗапасы.СтавкаНДС.Ставка / 100
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|	И ПриходнаяНакладнаяЗапасы.Ссылка.ВключатьРасходыВСебестоимость
	|	И ПриходнаяНакладнаяЗапасы.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяПредоплата.Документ КАК Документ,
	|	ПриходнаяНакладнаяПредоплата.СуммаРасчетов КАК Сумма
	|ИЗ
	|	Документ.ПриходнаяНакладная.Предоплата КАК ПриходнаяНакладнаяПредоплата
	|ГДЕ
	|	ПриходнаяНакладнаяПредоплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
	|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
	|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПриходнаяНакладная.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
	|ГДЕ
	|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
	ЗаполнитьЕдиницыИСтавкиНДС_Отправка(ТаблицаТоваров);
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
	ЗаполнитьЕдиницыИСтавкиНДС_Отправка(ТаблицаУслуги);
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	Результат.Вставить("РасшифровкаДопРасходов", РезультатыЗапроса[2].Выгрузить());
		
	ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
		
	Возврат Результат;
КонецФункции
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Процедура ЗаписатьЦены(НоменклатураСсылка, ЦенаЗакупки, ЦенаПродажи, КомпонентыОбмена)
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", НоменклатураСсылка);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
	
		Запрос = Новый Запрос;               
		ВидЦенЗакупки = КомпонентыОбмена.ПараметрыКонвертации.ВидЦенЗакупки;
		ВидЦенПродажи = КомпонентыОбмена.ПараметрыКонвертации.ВидЦенПродажи;
		
		Запрос.УстановитьПараметр("ВидЦенЗакупки", ВидЦенЗакупки);          
		Если ЗначениеЗаполнено(ВидЦенЗакупки) Тогда
			Запрос.УстановитьПараметр("ЦенаЗакупки", ЦенаЗакупки);          
		Иначе
			Запрос.УстановитьПараметр("ЦенаЗакупки", 0);          
		КонецЕсли;
			
		Запрос.УстановитьПараметр("ВидЦенПродажи", ВидЦенПродажи);          
		Если ЗначениеЗаполнено(ВидЦенПродажи) Тогда
			Запрос.УстановитьПараметр("ЦенаПродажи", ЦенаПродажи);
		Иначе
			Запрос.УстановитьПараметр("ЦенаПродажи", 0);          
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
		Запрос.Текст = "ВЫБРАТЬ
			|	&ВидЦенЗакупки КАК ВидЦен,
			|	&Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
			|	&ЦенаЗакупки КАК НоваяЦена,
			|	ИСТИНА КАК Актуальность
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			,
			|			Номенклатура = &Номенклатура
			|				И ВидЦен = &ВидЦенЗакупки) КАК ЦеныНоменклатурыСрезПоследних
			|		ПРАВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
			|		ПО (ЦеныНоменклатурыСрезПоследних.ВидЦен = ВидыЦен.Ссылка)
			|ГДЕ
			|	ВидыЦен.Ссылка = &ВидЦенЗакупки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&ВидЦенПродажи КАК ВидЦен,
			|	&Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
			|	&ЦенаПродажи КАК НоваяЦена,
			|	ИСТИНА КАК Актуальность
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			,
			|			Номенклатура = &Номенклатура
			|				И ВидЦен = &ВидЦенПродажи) КАК ЦеныНоменклатурыСрезПоследних
			|		ПРАВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
			|		ПО (ЦеныНоменклатурыСрезПоследних.ВидЦен = ВидыЦен.Ссылка)
			|ГДЕ
			|	ВидыЦен.Ссылка = &ВидЦенПродажи";
	
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		ПериодЦен = НачалоДня(ТекущаяДатаСеанса());
	
		ВыборкаЗакупки = ПакетРезультатов[0].Выбрать();
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);
		НаборЗаписей.Отбор.ВидЦен.Установить(ВидЦенЗакупки);
		НаборЗаписей.Отбор.Период.Установить(ПериодЦен);
		Пока ВыборкаЗакупки.Следующий() Цикл 
			Если ВыборкаЗакупки.НоваяЦена > 0 И ВыборкаЗакупки.НоваяЦена <> ВыборкаЗакупки.Цена Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаЗакупки);
				Запись.Период = ПериодЦен;
				Запись.Цена = ВыборкаЗакупки.НоваяЦена;
				Запись.ЕдиницаИзмерения = Запись.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
		КонецЦикла;
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать();
		КонецЕсли; 
		
		ВыборкаПродажи = ПакетРезультатов[1].Выбрать();
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);
		НаборЗаписей.Отбор.ВидЦен.Установить(ВидЦенПродажи);
		НаборЗаписей.Отбор.Период.Установить(ПериодЦен);
		Пока ВыборкаПродажи.Следующий() Цикл 
			Если ВыборкаПродажи.НоваяЦена > 0 И ВыборкаПродажи.НоваяЦена <> ВыборкаПродажи.Цена Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаПродажи);
				Запись.Период = ПериодЦен;
				Запись.Цена = ВыборкаПродажи.НоваяЦена;
				Запись.ЕдиницаИзмерения = Запись.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
		КонецЦикла;
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
	Исключение
	
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись цен'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры
Процедура ЗаписатьШтрихкоды(НоменклатураСсылка, Штрихкоды, КомпонентыОбмена)
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", НоменклатураСсылка);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
	
		Запрос = Новый Запрос;               
		
		ТаблицаШтрихкодов = Новый ТаблицаЗначений;
		ТаблицаШтрихкодов.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
		Для Каждого Штрихкод Из Штрихкоды Цикл
			Строка = ТаблицаШтрихкодов.Добавить();
			Строка.Штрихкод = Штрихкод; 
		КонецЦикла; 
		Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодов);          
		
		Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
		Запрос.Текст = "ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТаблицаШтрихкодов.Штрихкод КАК СТРОКА(200)) КАК Штрихкод
			|ПОМЕСТИТЬ ТаблицаШтрихкодов
			|ИЗ
			|	&ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
			|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
			|	ШтрихкодыНоменклатуры.Партия КАК Партия,
			|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ИСТИНА КАК ЕстьВБазе
			|ПОМЕСТИТЬ Объединенная
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаШтрихкодов.Штрихкод,
			|	&Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
			|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
			|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка),
			|	ЛОЖЬ
			|ИЗ
			|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Объединенная.Штрихкод КАК Штрихкод,
			|	Объединенная.Номенклатура КАК Номенклатура,
			|	Объединенная.Характеристика КАК Характеристика,
			|	Объединенная.Партия КАК Партия,
			|	МАКСИМУМ(Объединенная.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
			|	МАКСИМУМ(Объединенная.ЕстьВБазе) КАК ЕстьВБазе
			|ИЗ
			|	Объединенная КАК Объединенная
			|
			|СГРУППИРОВАТЬ ПО
			|	Объединенная.Штрихкод,
			|	Объединенная.Номенклатура,
			|	Объединенная.Характеристика,
			|	Объединенная.Партия
			|
			|ИМЕЮЩИЕ
			|	НЕ МАКСИМУМ(Объединенная.ЕстьВБазе)";
	
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
	
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(НоменклатураСсылка);
		НаборЗаписей.Прочитать(); 
		
		Пока Выборка.Следующий() Цикл 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
	Исключение
	
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись штрихкодов'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры
Процедура ЗаполнитьДополнительныеРеквизиты(ДанныеИБ, ДанныеXDTO, МассивДопРеквизитов)
	ДопРеквизиты = Новый ТаблицаЗначений;
	ДопРеквизиты.Колонки.Добавить("Свойство");
	ДопРеквизиты.Колонки.Добавить("ЗначениеСвойства");
	
	Для каждого Элемент Из МассивДопРеквизитов Цикл
		СтрокаДопРеквизита = ДопРеквизиты.Добавить();
		Свойство = Новый Структура("Наименование", Элемент);
		СтрокаДопРеквизита.Свойство = Свойство;
		СтрокаДопРеквизита.ЗначениеСвойства = ДанныеИБ[Элемент];
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ДопРеквизиты);
КонецПроцедуры
Процедура ЗаполнитьЕдиницыИСтавкиНДС_Отправка(ТабличнаяЧасть)
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");     
	ЕстьУпаковка = ТабличнаяЧасть.Колонки.Найти("Упаковка") <> Неопределено; 
	Если ЕстьУпаковка Тогда  
		ТабличнаяЧасть.Колонки.Добавить("УпаковкаСтруктура");     
	КонецЕсли;
	Для Каждого Строка Из ТабличнаяЧасть Цикл
	
		Если Строка.СтавкаНДС.НеОблагается Тогда	
			Строка.СтавкаНДССтрокой = "БезНДС";
		ИначеЕсли Строка.СтавкаНДС.Ставка = 18
			И НЕ Строка.СтавкаНДС.Расчетная Тогда
			Строка.СтавкаНДССтрокой = "НДС18";
		ИначеЕсли Строка.СтавкаНДС.Ставка = 18
			И Строка.СтавкаНДС.Расчетная Тогда
			Строка.СтавкаНДССтрокой = "НДС18_118";
		ИначеЕсли Строка.СтавкаНДС.Ставка = 10 
			И НЕ Строка.СтавкаНДС.Расчетная Тогда
			Строка.СтавкаНДССтрокой = "НДС10";
		ИначеЕсли Строка.СтавкаНДС.Ставка = 10 
			И Строка.СтавкаНДС.Расчетная Тогда
			Строка.СтавкаНДССтрокой = "НДС10_110";
		ИначеЕсли Строка.СтавкаНДС.Ставка = 20 
			И НЕ Строка.СтавкаНДС.Расчетная Тогда
			Строка.СтавкаНДССтрокой = "НДС20";
		ИначеЕсли Строка.СтавкаНДС.Ставка = 20 
			И Строка.СтавкаНДС.Расчетная Тогда
			Строка.СтавкаНДССтрокой = "НДС20_120";
		ИначеЕсли Строка.СтавкаНДС.Ставка = 0 Тогда
			Строка.СтавкаНДССтрокой = "НДС0"; 
		Иначе
			Строка.СтавкаНДССтрокой = "БезНДС";
		КонецЕсли;   
		
		Если ЕстьУпаковка Тогда
			Номенклатура 		= Строка.Номенклатура;
			Упаковка	= Строка.Упаковка;
			Строка.УпаковкаСтруктура = Упаковка;
			Если Упаковка <> Неопределено И ЗначениеЗаполнено(Упаковка.Владелец) И ТипЗнч(Упаковка.Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
				УпаковкаСтруктура = Новый Структура("Наименование, ЕдиницаИзмеренияПоКлассификатору, Коэффициент, Ссылка");
				ЗаполнитьЗначенияСвойств(УпаковкаСтруктура, Упаковка);
				УпаковкаСтруктура.Вставить("Номенклатура", Номенклатура);  
				УпаковкаСтруктура.Вставить("Владелец", Номенклатура);  
				Строка.УпаковкаСтруктура = УпаковкаСтруктура;
			КонецЕсли;	
		КонецЕсли;	
	
	КонецЦикла;
	ТабличнаяЧасть.Колонки.Удалить("СтавкаНДС");
	ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = "СтавкаНДС";
	Если ЕстьУпаковка Тогда  
		ТабличнаяЧасть.Колонки.Удалить("Упаковка");
		ТабличнаяЧасть.Колонки.УпаковкаСтруктура.Имя = "Упаковка";
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьТаблицуЦенНоменклатуры(КомпонентыОбмена)
	Запрос = Новый Запрос;               
	ВидЦенЗакупки = КомпонентыОбмена.ПараметрыКонвертации.ВидЦенЗакупки;
	ВидЦенПродажи = КомпонентыОбмена.ПараметрыКонвертации.ВидЦенПродажи;
	
	Запрос.УстановитьПараметр("ВидЦенЗакупки", ВидЦенЗакупки);          
	Запрос.УстановитьПараметр("ВидЦенПродажи", ВидЦенПродажи);          
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			 ВидЦен = &ВидЦенЗакупки) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			 ВидЦен = &ВидЦенПродажи) КАК ЦеныНоменклатурыСрезПоследних";
	
	Результат = Запрос.Выполнить();
	КомпонентыОбмена.ПараметрыКонвертации.ТаблицаЦенНоменклатуры = Результат.Выгрузить();
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КлючевыеПоля = "", КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки,
		КлючевыеПоля, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Функция МассивМаркировка(КомпонентыОбмена, ПолученныеДанные, ДанныеXDTO)
	МассивСтрокМаркировка = Новый Массив;
	Если ДанныеXDTO.Свойство("Маркировка")
		И ЗначениеЗаполнено(ДанныеXDTO.Маркировка) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");  
		
		Для Каждого Строка Из ДанныеXDTO.Маркировка Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);   
			ДвоичныеДанные = Base64Значение(Строка.НомерАкцизнойМарки);
			Если ДвоичныеДанные = Неопределено Тогда
				Штрихкод = Строка.НомерАкцизнойМарки;
			Иначе
				Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
			КонецЕсли;
			ЗначениеШтрихкода = ИнтерфейсИСМП.РазобратьИНормализоватьКодМаркировки(Штрихкод);
			
			Если СтруктураДанныхСтроки.Свойство("Характеристика") Тогда 
				СтруктураДанныхСтроки.Вставить("ШтрихкодУпаковки", ШтрихкодУпаковки(КомпонентыОбмена, ПолученныеДанные, ЗначениеШтрихкода, СтруктураДанныхСтроки.Номенклатура, СтруктураДанныхСтроки.Характеристика));
			Иначе
				СтруктураДанныхСтроки.Вставить("ШтрихкодУпаковки", ШтрихкодУпаковки(КомпонентыОбмена, ПолученныеДанные, ЗначениеШтрихкода, СтруктураДанныхСтроки.Номенклатура));
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("ЗначениеШтрихкода", ЗначениеШтрихкода);
			
			МассивСтрокМаркировка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;  
	
	Возврат МассивСтрокМаркировка;
КонецФункции
Процедура ПересчитатьСтрокуЗаказа(СтрокаТабличнойЧасти, СуммаВключаетНДС)
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) И ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Номенклатура.Вес * СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.Номенклатура.Объем * СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	Иначе
		СтрокаТабличнойЧасти.Вес = СтрокаТабличнойЧасти.Номенклатура.Вес * СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.Объем = СтрокаТабличнойЧасти.Номенклатура.Объем * СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 
	Если СтрокаТабличнойЧасти.КоличествоСобрано > 0 Тогда
		Если СтрокаТабличнойЧасти.КоличествоСобрано <> СтрокаТабличнойЧасти.Количество Тогда              
			СтрокаТабличнойЧасти.КоличествоСобрано = СтрокаТабличнойЧасти.Количество; 
		КонецЕсли;      
	Иначе
		СтрокаТабличнойЧасти.КоличествоСобрано = СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	Если СтрокаТабличнойЧасти.Резерв > 0 Тогда
		Если СтрокаТабличнойЧасти.Резерв > СтрокаТабличнойЧасти.Количество Тогда              
			СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.Количество; 
		КонецЕсли;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = Истина;
	ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, Новый Структура("СуммаВключаетНДС", СуммаВключаетНДС));
КонецПроцедуры
Функция СтавкаНДСПоСтроке(СтавкаСтрокой)
	Если СтавкаСтрокой = "НДС18" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС18_118" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10_110" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС0" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 0
		|	И НЕ СтавкиНДС.НеОблагается";
	ИначеЕсли СтавкаСтрокой = "НДС20" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС20_120" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";	
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.НеОблагается";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	Иначе
		Возврат Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
КонецФункции
Функция ШтрихкодУпаковки(КомпонентыОбмена, ПолученныеДанные, АкцизнаяМаркаТекст, СтруктураНоменклатуры, СтруктураХарактеристики = Неопределено)
	МассивТиповУпаковки = Новый Массив;
	МассивТиповУпаковки.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	МассивТиповУпаковки.Добавить(Перечисления.ТипыУпаковок.МонотоварнаяУпаковка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивТиповУпаковки", МассивТиповУпаковки);
	Запрос.УстановитьПараметр("ЗначениеШтрихкода", АкцизнаяМаркаТекст);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &ЗначениеШтрихкода
	|	И ШтрихкодыУпаковокТоваров.ТипУпаковки В(&МассивТиповУпаковки)";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать(); 
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
	
		ИсходныеДанные = Новый Структура("Штрихкод, Количество", АкцизнаяМаркаТекст, 1);
		ШтрихкодКоличество = ОбщегоНазначения.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ПолученныеДанные);
		
		ДанныеШтрихкодаСписок = Новый Массив;
		ДанныеШтрихкодаСписок.Добавить(ШтрихкодКоличество);
		ДанныеПоШтрихкодам    = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
		ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = Ложь;
		ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования);
		
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
		ДанныеШтрихкода = ДанныеКодовМаркировки[0];
	
		НоваяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент(); 
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ТипУпаковки) Тогда
			НоваяАкцизнаяМарка.ТипУпаковки = ДанныеШтрихкода.ТипУпаковки;                      
		Иначе
			НоваяАкцизнаяМарка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;                      
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ТипШтрихкода) Тогда
			НоваяАкцизнаяМарка.ТипШтрихкода = ДанныеШтрихкода.ТипШтрихкода;         
		Иначе   
			НоваяАкцизнаяМарка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
		КонецЕсли;    
		
		НоваяАкцизнаяМарка.ДатаУпаковки = ТекущаяДатаСеанса(); 
		НоваяАкцизнаяМарка.ЗначениеШтрихкода = АкцизнаяМаркаТекст;  
		НоваяАкцизнаяМарка.Упаковка = ДанныеШтрихкода.Упаковка;  
		Если ТипЗнч(НоваяАкцизнаяМарка.Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			НоваяАкцизнаяМарка.Количество = НоваяАкцизнаяМарка.Упаковка.Коэффициент;        
		Иначе
			НоваяАкцизнаяМарка.Количество = 1;
		КонецЕсли;
		  
		ИмяПКО = "Справочник_Номенклатура_Получение";
		ПКОНоменклатура = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		Номенклатура = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтруктураНоменклатуры,
									ПКОНоменклатура, "ПолучитьСсылку").Ссылка;
		НоваяАкцизнаяМарка.Номенклатура = Номенклатура;
		
		Если СтруктураХарактеристики <> Неопределено Тогда
			ИмяПКО = "Справочник_ХарактеристикиНоменклатуры";
			ПКОХарактеристика = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			Характеристика = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтруктураХарактеристики,
									ПКОХарактеристика, "ПолучитьСсылку").Ссылка;
			НоваяАкцизнаяМарка.Характеристика = Характеристика;
		КонецЕсли;   
		
		НоваяАкцизнаяМарка.Записать(); 
		Возврат НоваяАкцизнаяМарка.Ссылка;      
	КонецЕсли;
КонецФункции

#КонецОбласти
#КонецОбласти
