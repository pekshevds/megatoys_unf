
#Область ПрограммныйИнтерфейс

// Функция проверяет возможность печати чека на фискальном регистраторе путем проведения документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма проверяемого документа
//	ТекстПредупреждения - Строка - текст предупреждения в случае неудачи
//	ВыводитьОписаниеОшибки - Булево - требуется вывести описание ошибки
//
// Возвращаемое значение:
// 	Булево - Истина когда не удалось провести документ 
Функция ПечатьЧекаНевозможна(Форма, ТекстПредупреждения, ВыводитьОписаниеОшибки = Ложь) Экспорт
	
	Если Форма.Объект.Проведен И Не Форма.Модифицированность Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Если Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Если ВыводитьОписаниеОшибки Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ИнформацияОбОшибке.Описание);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция формирует заголовок для общей формы "Печать".
// Параметры:
// 	ПараметрКоманды - Массив - параметр команды печати.
// Возвращаемое значение:
// 	Структура - с полем "ЗаголовокФормы".
Функция ЗаголовокПечатнойФормы(ПараметрКоманды) Экспорт
	
	Результат = Новый Структура;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() = 1 Тогда 
		
		Результат.Вставить("ЗаголовокФормы", ПараметрКоманды[0]);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Обработчик подключаемой команды печати Универсального корректировочного документа.
// Клиентский обработчик команды печати вызывается с помощью "Вычислить" и может быть только функцией.
//
// Параметры:
// 	ПараметрКоманды - Массив - печатаемые документы.
// Возвращаемое значение:
// 	Неопределено - всегда возвращает Неопределено. 
Функция ПечатьУКД(ПараметрКоманды) Экспорт
	Перем Ошибки;
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	ПечатьДокументовУНФВызовСервера.ПроверитьВозможностьПечатиУКД(МассивОбъектовПечати, Ошибки);
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		СформироватьПечатныеФормыУКД(МассивОбъектовПечати);
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция формирования Приложения 4 (ТН)
//
// Параметры:
// 	ПараметрКоманды - Массив - печатаемые документы.
// Возвращаемое значение:
// 	Неопределено - всегда возвращает Неопределено. 
Функция ПечатьТН(ПараметрКоманды) Экспорт
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		ОткрытьФорму("Обработка.ПечатьТН.Форма", Новый Структура("Документ", МассивОбъектовПечати[0]));
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура обработки команды "ПечатьЭтикетки" или "ПечатьЦенника".
//
// Параметры:
// 	ПараметрКоманды - Массив - печатаемые документы.
// Возвращаемое значение:
// 	Неопределено - всегда возвращает Неопределено. 
Функция ПечатьЭтикетокИЦенниковИзДокументов(ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды.Количество() > 0 Тогда
		Если Не ПечатьДокументовУНФВызовСервера.ВыключеноИспользованиеНовойПечатиЦенников() Тогда
			МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
			ЭтоЦенники = СтрНайти(ПараметрКоманды.Идентификатор, "ПечатьЦенников") > 0;
			АдресВХранилище = ПечатьДокументовУНФВызовСервера.ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов(
			МассивОбъектовПечати, ЭтоЦенники);
			СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
			ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенниковБПО.Форма.Форма", СтруктураПараметры, , Новый УникальныйИдентификатор);
		Иначе
			МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
			ЭтоЦенники = СтрНайти(ПараметрКоманды.Идентификатор, "ПечатьЦенников") > 0;
			АдресВХранилище = ПечатьДокументовУНФВызовСервера.ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов(
			МассивОбъектовПечати, ЭтоЦенники);
			СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
			ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.Форма", СтруктураПараметры, , Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура - обработчик общей команды УниверсальныйКорректировочныйДокумент
// 
// Параметры:
// 	ПараметрКоманды - Массив - параметры команды.
Процедура СформироватьПечатныеФормыУКД(ПараметрКоманды) Экспорт
	
	СообщенияПользователю = Новый Массив;
	ИсточникиПечати = Новый Структура;
	ИсточникиПечати.Вставить("ИмяИсточника");
	ИсточникиПечати.Вставить("СчетФактура");
	ИсточникиПечати.Вставить("ДокументыРеализации");
	ИсточникиПечати.Вставить("СозданныеСчетаФактуры");
	
	СчетаФактурыУНФВызовСервера.ЗаполнитьПараметрыПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
	
	Если ИсточникиПечати.СчетФактура <> Неопределено Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьУКД", "УКДСтатус1",
			ИсточникиПечати.СчетФактура, , ЗаголовокПечатнойФормы(ИсточникиПечати.СчетФактура));
		
	ИначеЕсли ИсточникиПечати.ДокументыРеализации <> Неопределено Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьУКД", "УКДСтатус2",
			ИсточникиПечати.ДокументыРеализации, , ЗаголовокПечатнойФормы(ИсточникиПечати.ДокументыРеализации));
		СчетаФактурыУНФКлиент.ОбновитьНадписиОСчетахФактурахОткрытыхФормах(ИсточникиПечати.СозданныеСчетаФактуры);
		
	КонецЕсли;
	
	Для каждого Сообщение Из СообщенияПользователю Цикл
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Обновляет значения реквизитов печати в объекте
//
// Параметры:
//  ТекущийОбъект		 - ДанныеФормыСтруктура	 - Объект с измененными реквизитами печати
//  ИзмененныеРеквизиты	 - Структура			 - Структура новых значений реквизитов печати
//
Процедура ОбновитьЗначенияРеквизитовПечати(ТекущийОбъект, ИзмененныеРеквизиты) Экспорт
	
	Если ТекущийОбъект.ТолькоПросмотр Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из ИзмененныеРеквизиты Цикл
		
		ТекущийОбъект.Объект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		
		Если НЕ ТекущийОбъект.Модифицированность Тогда
			
			ТекущийОбъект.Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обрабатывает подбор товаров по штрихкоду для печати этикеток и ценников
//
// Параметры:
//  Результат - Структура - Данные поиска по штрихкоду
//  ПараметрыОперации - Структура - Параметры поиска штрихкода
//  МассивТоваровДляПечати - Массив - массив Товаров
//
Процедура ОбработкаПодбораТоваровПоШтрихкодуДляПечатиЭтикетокИЦенниковЗавершение(Результат, ПараметрыОперации) Экспорт
	
	ДанныеШтрихкодов = Новый Структура("Штрихкод, Количество", Результат, 1);
	МассивШтрихкодов = Новый Массив;
	МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ВидЦены", ПараметрыОперации.ВидЦены);
	СтруктураДанные.Вставить("ВидЦеныАкционный", ПараметрыОперации.ВидЦеныАкционный);
	СтруктураДанные.Вставить("Дата", ПараметрыОперации.ЦеныНаДату);
	ПечатьДокументовУНФВызовСервера.ПолучитьДанныеПоШтрихКодам(СтруктураДанные, МассивШтрихкодов);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные", СтруктураДанные));
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		ИначеЕсли ДанныеШтрихкода.Количество() = 1 Тогда
			
			СтруктураНоменклатуры = Новый Структура();
			СтруктураНоменклатуры.Вставить("МассивНоменклатуры", ДанныеШтрихкода);
			СтруктураНоменклатуры.Вставить("ТекШтрихкод", ТекШтрихкод);
			ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, СтруктураНоменклатуры);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обрабатывает открытие формы подбора товаров
//
// Параметры:
//  ПараметрыОткрытия - Структура - параметры открытия формы
//
Процедура ОткрытьФормуПодбора(ПараметрыОткрытия) Экспорт
	
	ТекущийПользователь = ПользователиКлиент.ТекущийПользователь();
	ВидЦены = ПараметрыОткрытия.ВидЦены;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда 
		ВидЦены = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнойВидЦенПродажи");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.Учетная");
	КонецЕсли;
	
	ВидЦеныАкционный = ПараметрыОткрытия.ВидЦеныАкционный; 
	
	Если Не ЗначениеЗаполнено(ВидЦеныАкционный) Тогда 
		ВидЦены = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнойВидЦенПродажи");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЦеныАкционный) Тогда
		ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.Учетная");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОткрытия.ТорговыйОбъект) Тогда
		Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнаяОрганизация");
	Иначе
		Организация = ПараметрыОткрытия.ТорговыйОбъект;
	КонецЕсли;
	
	ТипыНоменклатуры = Новый СписокЗначений;
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Организация);
	ПараметрыПодбора.Вставить("Дата", ПараметрыОткрытия.ЦеныНаДату);
	ПараметрыПодбора.Вставить("ВидЦен", ВидЦены);
	ПараметрыПодбора.Вставить("ВидЦенАкционный", ВидЦены);
	ПараметрыПодбора.Вставить("ПериодЦен", ПараметрыОткрытия.ЦеныНаДату);
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", ПараметрыОткрытия.ФормаВладелец.УникальныйИдентификатор);
	ПараметрыПодбора.Вставить("ПоказыватьНаборыКомплекты", Истина);
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипыНоменклатуры);
	ПараметрыПодбора.Вставить("ПечатьЭтикетокИЦенников", Истина);
	ПараметрыПодбора.Вставить("НеПоказыватьИнформациюПоСкладуИРезервам", Истина);
	
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ПараметрыОткрытия.ФормаВладелец,, ПараметрыПодбора, ПараметрыОткрытия.ОбработчикЗакрытия);
	
КонецПроцедуры

// Процедура - обрабатывает открытие формы подбора товаров
//
// Параметры:
//  ПараметрыОперации - Структура - параметры операции заполнения
//  МассивТоваровДляПечати - Массив - массив товаров для заполнения
//
Процедура ЗаполнитьПоОтбору(ПараметрыОперации, МассивТоваровДляПечати) Экспорт
	
	ТекущийПользователь = ПользователиКлиент.ТекущийПользователь();
	ВидЦены = ПараметрыОперации.ВидЦены;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда 
		ПараметрыОперации.ВидЦены = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнойВидЦенПродажи");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ПараметрыОперации.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.Учетная");
	КонецЕсли;
	
	ПечатьДокументовУНФВызовСервера.ОбработкаПодбораТоваровПоОтборуДляПечатиЭтикетокИЦенниковЗавершение(ПараметрыОперации, МассивТоваровДляПечати);
	
КонецПроцедуры

// Процедура - обрабатывает открытие формы подбора товаров
//
// Параметры:
//  ПараметрКоманды - Массив - параметры команды
//  ПараметрыВыполненияКоманды - Массив - параметры выполнения команды
//
Процедура ОбработкаКомандыПечатиЦенников(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если Не ПечатьДокументовУНФВызовСервера.ВыключеноИспользованиеНовойПечатиЦенников() Тогда
		ПараметрыФормы = Новый Структура("", );
		ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенниковБПО.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);	
	Иначе
		ПараметрыФормы = Новый Структура("", );
		ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обрабатывает открытие формы редактирования СКД шаблона.
//
// Параметры:
//  ПараметрыОткрытия - Структура - параметры открытия формы
//
Процедура РедактироватьСКД(ПараметрыОткрытия) Экспорт
	
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройки СКД этикетки / ценника'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", ПараметрыОткрытия.АдресХранилищаСКД);
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", ПараметрыОткрытия.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("НастраиватьОтбор", Истина);
	ПараметрыФормы.Вставить("НастраиватьПараметры", Истина);
	ПараметрыФормы.Вставить("НастраиватьПорядок", Истина);
	ПараметрыФормы.Вставить("НастраиватьУсловноеОформление", Истина);
	ПараметрыФормы.Вставить("НастраиватьВыбор", Истина);
	ПараметрыФормы.Вставить("РедактироватьСхемуКомпоновкиДанных", Истина);
	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы, , , , , ПараметрыОткрытия.ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Функция ПерезаполнитьСУчетомОтбора(Форма) Экспорт
	
	Возврат ПечатьДокументовУНФВызовСервера.ПерезаполнитьСУчетомОтбора(
		Форма.МассивДокументов,
		Форма.Объект.РежимПечати,
		Форма.КомпоновщикНастроек);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураНоменклатуры) Тогда
		ПечатьДокументовУНФВызовСервера.ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры);
		Результат = СтруктураНоменклатуры.МассивТоваровДляПечати;
	Иначе
		Результат = Новый Массив;
	КонецЕсли;
	Оповестить("ЗаполнитьДанныеЭтикетокИЦенников", Результат);
	
КонецПроцедуры

Функция ПредложитьЗаполнитьРеквизитыОрганизации(ПараметрыПечати) Экспорт
	
	ОткрытьФормуЗаполненияРеквизитовДляПечати(ПараметрыПечати,
		"ПодписьРуководителя,ПодписьГлавногоБухгалтера,ИНН,КПП,БанковскийСчетПоУмолчанию,ФайлЛоготип,ЮрАдрес");
	
	// Клиентский обработчик команды печати вызывается с помощью "Вычислить" и может быть только функцией.
	Возврат Неопределено; 
	
КонецФункции

Функция ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью(ПараметрыПечати) Экспорт
	
	ОткрытьФормуЗаполненияРеквизитовДляПечати(ПараметрыПечати,
		"ПодписьРуководителя,ПодписьГлавногоБухгалтера,ИНН,КПП,БанковскийСчетПоУмолчанию,ФайлЛоготип,ЮрАдрес,ФайлФаксимильнаяПечать");
	
	// Клиентский обработчик команды печати вызывается с помощью "Вычислить" и может быть только функцией.
	Возврат Неопределено; 
	
КонецФункции

Процедура ОткрытьФормуЗаполненияРеквизитовДляПечати(ПараметрыПечати, ИменаРеквизитовДляЗаполнения)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМенеджераПечати", ПараметрыПечати.МенеджерПечати);
	ПараметрыФормы.Вставить("ИменаМакетов", ПараметрыПечати.Идентификатор);
	ПараметрыФормы.Вставить("ПараметрКоманды", ПараметрыПечати.ОбъектыПечати);
	ПараметрыФормы.Вставить("ИменаРеквизитовДляЗаполнения", ИменаРеквизитовДляЗаполнения);
	ПараметрыФормы.Вставить("ПараметрыПечати", Новый Структура);
	Для Каждого КлючИЗначение Из ПараметрыПечати Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ФормаКлиентскогоПриложения") Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыФормы.ПараметрыПечати.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Ключ", ПечатьДокументовУНФВызовСервера.ОрганизацияИзПараметраКоманды(
		ПараметрыФормы.ПараметрКоманды));
	
	Если ЗначениеЗаполнено(ПараметрыФормы.Ключ) Тогда
		
		ФормаЗаполненияРеквизитовДляПечати = ОткрытьФорму(
			"Справочник.Организации.Форма.ФормаЗаполненияРеквизитовДляПечати", ПараметрыФормы, Строка(
			Новый УникальныйИдентификатор));
		
		Если ФормаЗаполненияРеквизитовДляПечати <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ПараметрыФормы.ИмяМенеджераПечати, ПараметрыФормы.ИменаМакетов,
		ПараметрыФормы.ПараметрКоманды, ПараметрыПечати.Форма, ПараметрыФормы);
	
КонецПроцедуры

Процедура ОбработкаКомандыПечатиЦенниковИЭтикетокНаПринтереЭтикеток(ПараметрыПечати) Экспорт
	
	Обработка = ПараметрыПечати.ОбъектыПечати[0];
	
	Если Обработка.Товары.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного товара'"));
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ИдентификаторФормы") Тогда
		ИдентификаторФормы = ПараметрыПечати.ИдентификаторФормы;
	Иначе
		ИдентификаторФормы = ПараметрыПечати.Форма.УникальныйИдентификатор;
	КонецЕсли;
	
	ДанныеДляПринтераЭтикеток = УправлениеНебольшойФирмойВызовСервера.ПодготовитьСтруктуруДанныхЦенниковИЭтикетокДляПринтераЭтикеток(
		Обработка, ПараметрыПечати.МенеджерПечати, ПараметрыПечати.ТекущийРазмер);
	
	Если ДанныеДляПринтераЭтикеток.Количество() > 0 Тогда
		
		Для Каждого ТекМакет Из ДанныеДляПринтераЭтикеток Цикл
			
			ЗавершениеПечати = Новый ОписаниеОповещения("ОбработкаКомандыПечатиЦенниковИЭтикетокНаПринтереЭтикетокЗавершение",
				ПечатьДокументовУНФКлиент, ТекМакет);
				
			ПараметрыОперацииПечатиЭтикеток = ОборудованиеПринтерыЭтикетокКлиент.ПараметрыОперацииПечатиЭтикеток(ТекМакет.XML, 
				ТекМакет.Этикетки);
			ОборудованиеПринтерыЭтикетокКлиент.НачатьПечатьЭтикеток(ЗавершениеПечати, ИдентификаторФормы, Неопределено,
				ПараметрыОперацииПечатиЭтикеток);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаКомандыПечатиЦенниковИЭтикетокНаПринтереЭтикетокЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Возврат;
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'При печати произошла ошибка.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#Область КлиентскиеМетодыПечати

Функция ПечатьКонтактнойИнформации(ПараметрыПечати) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтрагентыНачальноеЗначение", ПараметрыПечати.ОбъектыПечати);
	
	Если ПараметрыПечати.ОбъектыПечати.Количество() > 0 Тогда
		КлючУникальности = ПараметрыПечати.ОбъектыПечати[0];
	Иначе
		КлючУникальности = Ложь;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаКонтактнойИнформации", ПараметрыФормы, , КлючУникальности);
	
	// Клиентский обработчик команды печати вызывается с помощью "Вычислить" и может быть только функцией.
	Возврат Неопределено; 
	
КонецФункции

Функция ПечатьКонверта(ОписаниеКоманды) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектыПечати", ОписаниеКоманды.ОбъектыПечати);
	
	ОткрытьФорму("Обработка.ПечатьКонвертов.Форма", ПараметрыФормы);
	
	// Клиентский обработчик команды печати вызывается с помощью "Вычислить" и может быть только функцией.
	Возврат Неопределено; 
	
КонецФункции

Функция ПечатьСобытияПисьма(ПараметрыПечати) Экспорт
	
	ПараметрыФормы = Новый Структура("Письмо, ПечататьНемедленно", 
		ПараметрыПечати.ОбъектыПечати[0], Истина);
	
	ОткрытьФорму(
		"Документ.Событие.Форма.ПечатьПисьма",
		ПараметрыФормы);
		
	// Клиентский обработчик команды печати вызывается с помощью "Вычислить" и может быть только функцией.
	Возврат Неопределено;
	
КонецФункции
	
#КонецОбласти

#Область ПриИзмененииРеквизитовФорм

Процедура ПриИзмененииДоговораКонтрагента(ДоговорПослеИзменения, ОснованиеПечатиСсылка, ОснованиеПечати,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаполнитьОснованиеПечатиДоговором = Истина;
	ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		ЗначениеКонстанты = Неопределено;
		Если ДополнительныеПараметры.Свойство("ОснованиеПечатиСчетНаОплату", ЗначениеКонстанты) Тогда
			
			ЗаполнитьОснованиеПечатиДоговором = (ЗначениеКонстанты = ПредопределенноеЗначение("Перечисление.ОснованиеПечатиСпособНачальногоЗаполнение.ДоговорКонтрагента"));
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ОснованиеПечатиЗаказПокупателя", ЗначениеКонстанты) Тогда
			
			ЗаполнитьОснованиеПечатиДоговором = (ЗначениеКонстанты = ПредопределенноеЗначение("Перечисление.ОснованиеПечатиСпособНачальногоЗаполнение.ДоговорКонтрагента"));
			
		КонецЕсли;
		
		ДополнительныеПараметры.Свойство("ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати",
			ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати);
		ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати = (ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати = Неопределено ИЛИ ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати = Истина);
		
	КонецЕсли;
	
	Если ЗаполнитьОснованиеПечатиДоговором Тогда
		
		Если НЕ ЗначениеЗаполнено(ДоговорПослеИзменения) Тогда
			
			Если НЕ ЗначениеЗаполнено(ОснованиеПечатиСсылка)
				ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				
				ОснованиеПечатиСсылка = Неопределено;
				ОснованиеПечати = "";
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ДоговорПослеИзменения) Тогда
			
			Если НЕ ЗначениеЗаполнено(ОснованиеПечатиСсылка)
				ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
				ОснованиеПечатиСсылка = ДоговорПослеИзменения;
				
				ЗаголовокПредставления = "";
				Если ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати Тогда
					
					ЗаголовокПредставления = НСтр("ru = 'Договор:'") + " ";
					
				КонецЕсли;
				
				ОснованиеПечати = ЗаголовокПредставления + Строка(ДоговорПослеИзменения);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти