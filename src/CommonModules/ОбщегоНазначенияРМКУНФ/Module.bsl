
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПомощникНастройкиКассовогоМеста

// Переопределяет запрос динамического списка.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора продавцов.
//	ИмяДинамическогоСписка - Строка - имя переопределяемого динамического списка.
//  Отказ - Булево.
//
Процедура ПереопределитьДинамическийСписокПомощникаНастройкиРМК(Форма, ИмяДинамическогоСписка, Отказ) Экспорт

	ДинамическийСписокФормы = Форма[ИмяДинамическогоСписка];
	
	ТекстЗапроса = "";
	ОсновнаяТаблицаСтрокой = "";
	
	Если ИмяДинамическогоСписка = "ДополнительныеДанныеПользователей" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
	|	ОрганизацииПользователей.Пользователь КАК Пользователь,
	|	ОрганизацииПользователей.Настройка КАК Настройка,
	|	ОрганизацииПользователей.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК ОрганизацииПользователей
	|ГДЕ
	|	ОрганизацииПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация)
	|	И ОрганизацииПользователей.Значение ССЫЛКА Справочник.Организации
	|	И ОрганизацииПользователей.Значение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладыПользователей.Пользователь,
	|	СкладыПользователей.Настройка,
	|	СкладыПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК СкладыПользователей
	|ГДЕ
	|	СкладыПользователей.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НастройкиПользователей.ОсновнойСклад)
	|	И СкладыПользователей.Значение ССЫЛКА Справочник.СтруктурныеЕдиницы
	|	И СкладыПользователей.Значение = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)";
		
		ОсновнаяТаблицаСтрокой = "РегистрСведений.НастройкиПользователей";
		
	ИначеЕсли ИмяДинамическогоСписка = "ВидыОплат" Тогда
		
		ТекстЗапроса = "";
		ОсновнаяТаблицаСтрокой = "";
		
	ИначеЕсли ИмяДинамическогоСписка = "КодыДоступаПользователей" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Пользователь,
	|	Сотрудники.ШтрихКод КАК КодДоступа
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ПометкаУдаления
	|	И Сотрудники.ШтрихКод = """"
	|	И НЕ Сотрудники.Недействителен";
		
	ОсновнаяТаблицаСтрокой = "Справочник.Сотрудники";
		
	ИначеЕсли ИмяДинамическогоСписка = "КассыККМ" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	СправочникКассыККМ.Ссылка КАК Ссылка,
		|	СправочникКассыККМ.Владелец КАК Организация,
		|	СправочникКассыККМ.СтруктурнаяЕдиница КАК ТорговыйОбъект,
		|	НЕ СправочникКассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
		|		И ЕСТЬNULL(СправочникПодключаемоеОборудование.УстройствоИспользуется, ЛОЖЬ) КАК КассаПодключена
		|ИЗ
		|	Справочник.КассыККМ КАК СправочникКассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
		|		ПО СправочникКассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка
		|ГДЕ
		|	НЕ СправочникКассыККМ.ПометкаУдаления";
		ОсновнаяТаблицаСтрокой = "Справочник.КассыККМ";
		
	ИначеЕсли ИмяДинамическогоСписка = "ЭквайринговыеТерминалы" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка,
		|	ЭквайринговыеТерминалы.ПометкаУдаления КАК ПометкаУдаления,
		|	ЭквайринговыеТерминалы.Код КАК Код,
		|	ЭквайринговыеТерминалы.Наименование КАК Наименование,
		|	ЭквайринговыеТерминалы.Организация КАК Организация,
		|	ЭквайринговыеТерминалы.Касса КАК Касса,
		|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
		|	НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ОборудованиеИспользуется,
		|	ЭквайринговыеТерминалы.Предопределенный КАК Предопределенный,
		|	ЭквайринговыеТерминалы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	1 КАК ПолеУпорядочивания,
		|	ЛОЖЬ КАК Недействителен,
		|	""КассаККМ"" КАК ТипКассы,
		|	КассыККМ.СтруктурнаяЕдиница КАК ТорговыйОбъект
		|ИЗ
		|	Справочник.СпособыОплаты КАК ЭквайринговыеТерминалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
		|		ПО ЭквайринговыеТерминалы.Касса = КассыККМ.Ссылка
		|ГДЕ
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И ЭквайринговыеТерминалы.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыСпособовОплат.Эквайринг)";
			
		ОсновнаяТаблицаСтрокой = "Справочник.СпособыОплаты";

		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ДинамическийСписокФормы.ТекстЗапроса = ТекстЗапроса;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОсновнаяТаблицаСтрокой) Тогда
		ДинамическийСписокФормы.ОсновнаяТаблица = ОсновнаяТаблицаСтрокой;
	КонецЕсли;
	
	Отказ = НЕ ЗначениеЗаполнено(ТекстЗапроса);
	
КонецПроцедуры

// Проверяет наличие ошибок при настройке текущего пользователя 
//
// Параметры:
//  Отказ - Истина - признак наличия отказа, выставляется при выявлении ошибки настройки.
//  ТекстЗаголовка - Строка - текст заголовка ошибки для передачи в заголовок панели ошибок формы РМК.
//  ТекстСообщения - Строка - текст ошибки для передачи в тело ошибки панели ошибок формы РМК.
//
//
Процедура ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения) Экспорт
КонецПроцедуры 

// Заполняет значение нового кода доступа для сотрудника.
//
// Параметры:
//  НовыйКодСотрудника - Строка - новый код доступа сотрудника.
//
Процедура ЗаполнитьНовыйКодДоступаКассира(НовыйКодСотрудника) Экспорт
	НовыйКодСотрудника = РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13Сотрудник();
КонецПроцедуры

// Заполняет изображение штрихкода в табличном документе.
//
// Параметры:
//  КодКассира - Строка - исходные данные кода доступа кассира для выведения в виде сканируемого изображения
//  Наименование - Строка - исходные данные кассира для выведения в виде сканируемого изображения
//  Результат - ТабличныйДокумент - табличный документ, в котором необходимо вывести изображение штрихкода.
//
Процедура ПодготовитьКодДоступаПользователяДляСохранения(КодКассира, Наименование, Результат) Экспорт
	
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Ширина = 200;
	ПараметрыШтрихкода.Высота = 100;
	ПараметрыШтрихкода.УровеньКоррекцииQR = 0;
	ПараметрыШтрихкода.Штрихкод = КодКассира;
	ПараметрыШтрихкода.ТипКода = 99;
	ПараметрыШтрихкода.ОтображатьТекст = Истина;
	ПараметрыШтрихкода.РазмерШрифта = 11;
	ПараметрыШтрихкода.УголПоворота = 0;

	ИзображениеШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);

	МакетШК = Справочники.Сотрудники.ПолучитьМакет("ШтрихКодСотрудника");

	ОбластьМакета = МакетШК.ПолучитьОбласть("ОбластьСотрудник");
	ОбластьМакета.Параметры.Сотрудник = Наименование;
	Результат.Вывести(ОбластьМакета);

	ОбластьМакета = МакетШК.ПолучитьОбласть("ОбластьКартинка");
	НовыйРисунок = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	НовыйРисунок.Картинка = ИзображениеШтрихкода.Картинка;
	НовыйРисунок.Верх = 3;
	НовыйРисунок.Лево = 20;
	НовыйРисунок.Ширина = 60;
	НовыйРисунок.Высота = 30;
	Результат.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Заполняет признак возможности отправки электронной почты без функциональности БСП.
//
// Параметры:
//  Результат - Булево - Истина, если возможно отправить почту без использования БСП.
//
Процедура ЗаполнитьПризнакДоступнаОтправкаПочтыБезБСП(Результат) Экспорт
КонецПроцедуры

// Отправляет email.
//
// Параметры:
//  Результат - Булево - признак выполнения операции отправки email.
//  ТемаПисьма - Строка - тема отправляемого email.
//  ТелоПисьма - Строка - тело текста отправляемого email .
//  АдресаПолучателей - Строка - адреса получателей через разделитель.
//  РазделительАдресовПолучателей - Строка - разделитель для адресов получателей.
//
Процедура ОтправитьEmail(Результат, ТемаПисьма, ТелоПисьма, АдресаПолучателей, РазделительАдресовПолучателей) Экспорт
	
	Если НЕ ПустаяСтрока(АдресаПолучателей) Тогда
		
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ТипСобытия",
		ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо"));
		ИмяЭлементаПредопределеннойУчетнойЗаписи =
		"Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты";
		УчетнаяЗаписьДляОтправкиEmail =
			ОбщегоНазначения.ПредопределенныйЭлемент(ИмяЭлементаПредопределеннойУчетнойЗаписи);
		
		НовоеСобытие = Документы.Событие.СоздатьДокумент();
		НовоеСобытие.Заполнить(ЗначенияЗаполнения);
		НовоеСобытие.Дата = ТекущаяДатаСеанса();
		НовоеСобытие.УчетнаяЗапись = УчетнаяЗаписьДляОтправкиEmail;
		НовоеСобытие.ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо");
		НовоеСобытие.Тема = ТемаПисьма;
		НовоеСобытие.СодержаниеHTML = ТелоПисьма;
		НовоеСобытие.Содержание = ТелоПисьма;
		
		НовоеСобытие.Участники.Очистить();
		
		Адреса =
			СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресаПолучателей, РазделительАдресовПолучателей);
			
		НазначениеАдресата = ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Кому");
		
		Для Каждого Адрес Из Адреса Цикл
			
			Если НЕ ЗначениеЗаполнено(Адрес) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НовоеСобытие.Участники.Добавить();
			НоваяСтрока.Контакт = Адрес;
			НоваяСтрока.КакСвязаться = Адрес;
			НоваяСтрока.ТипПолучателяЭлектронногоПисьма = НазначениеАдресата;
			
		КонецЦикла;
		
		Результат = НовоеСобытие.Участники.Количество() > 0;
		Если НЕ Результат Тогда
			Возврат;
		КонецЕсли;
		
		Попытка

			НовоеСобытие.Записать();
			НовоеСобытие.ОтправитьЭлектронноеПисьмо();
			Результат = Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Отправка email с новым кодом доступа в интерфейс нового рабочего места кассира'",
					КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос для получения последнего внутреннего штрихкода в базе.
// В выборке должно быть поле "Код".
//
// Параметры:
//  Запрос - Запрос - переопределяемый запрос.
//  ПрефиксВнутреннегоШтрихкода - Число - префикс для внутреннего штрихкода.
//  ПрефиксШтрихкодаИБ - Число - префикс для информационной базы.
//
Процедура СформироватьЗапросПоследнийШтрихкод(Запрос, ПрефиксВнутреннегоШтрихкода, ПрефиксШтрихкодаИБ) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(ШтрихкодыНоменклатуры.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ШаблонШтрихкод";
	
	ШаблонШтрихкод = СтрШаблон("2%1%2_________", ПрефиксВнутреннегоШтрихкода, ПрефиксШтрихкодаИБ); 
	Запрос.УстановитьПараметр("ШаблонШтрихкод", ШаблонШтрихкод);
	
КонецПроцедуры

// Записывает код доступа владельца в базу данных и меняет значение признака успешности записи кода доступа.
//
// Параметры:
//  Владелец - ОпределяемыйТип.ВладелецШтрихкодаРМК - владелец кода доступа.
//  КодДоступа - Строка - код доступа для записи в базу данных.
//
Процедура УстановитьКодДоступаКассиру(Владелец, КодДоступа) Экспорт
	
	Если Владелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецОбъект = Владелец.ПолучитьОбъект();
	Попытка
		ВладелецОбъект.Заблокировать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка блокировки.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,
			ВладелецОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ВладелецОбъект.Штрихкод = КодДоступа;
	Попытка
		ВладелецОбъект.Записать();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Формирует запрос на получение паролей текущего пользователя.
// Запрос должен получать все коды доступа для текущего пользователя.
//
// Параметры:
//  Запрос - Запрос - запрос, для проверки кодов доступа у пользователя.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросПолученияКодовДоступаПользователя(Запрос, ЭтотОбъект) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.ШтрихКод КАК ШтрихКод
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Сотрудник
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ЭтоГруппа
	|	И НЕ Сотрудники.Недействителен
	|	И НЕ Сотрудники.ШтрихКод = """"";
	
	Запрос.УстановитьПараметр("Сотрудник", ЭтотОбъект.КассирДляВхода);
	
КонецПроцедуры

// Формирует запрос для отчета о подключенном оборудовании.
//
// Параметры:
//  Запрос - Запрос - запрос, для отчета о подключенном оборудовании.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросОтчетОПодключенномОборудовании(Запрос, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК НаименованиеКасса,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК НаличныеПОСкрыть,
	|	КассыККМ.ПодключаемоеОборудование КАК НаличныеПОСсылка
	|ПОМЕСТИТЬ ТаблицаНаличные
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	|		ПО КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка
	|ГДЕ
	|	&РабочееМесто = &РабочееМесто
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.Владелец = &Организация
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И ЕСТЬNULL(СправочникПодключаемоеОборудование.УстройствоИспользуется, ЛОЖЬ)
	|	И НЕ ЕСТЬNULL(СправочникПодключаемоеОборудование.ПометкаУдаления, ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Организация КАК Организация,
	|	МИНИМУМ(ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования) КАК ИспользоватьБезПодключенияОборудования
	|ПОМЕСТИТЬ ТаблицаЭТ
	|ИЗ
	|	Справочник.СпособыОплаты КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	&ТорговыйОбъект = &ТорговыйОбъект
	|	И &ИспользоватьОплатуПлатежнымиКартами
	|	И ЭквайринговыеТерминалы.Организация = &Организация
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалы.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаличные.КассаККМ КАК КассаККМ,
	|	ТаблицаНаличные.НаименованиеКасса КАК НаименованиеКасса,
	|	ТаблицаНаличные.Организация КАК Организация,
	|	ТаблицаНаличные.НаличныеПОСкрыть КАК НаличныеПОСкрыть,
	|	ТаблицаНаличные.НаличныеПОСсылка КАК НаличныеПОСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаЭТ.Организация ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ""V""
	|	КОНЕЦ КАК ОплатаКартой,
	|	ЕСТЬNULL(ТаблицаЭТ.ИспользоватьБезПодключенияОборудования, ИСТИНА) КАК ОплатаКартойПОСкрыть
	|ИЗ
	|	ТаблицаНаличные КАК ТаблицаНаличные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭТ КАК ТаблицаЭТ
	|		ПО ТаблицаНаличные.Организация = ТаблицаЭТ.Организация";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("ИспользоватьОплатуПлатежнымиКартами", Форма.ИспользоватьОплатуПлатежнымиКартами);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
КонецПроцедуры

// Формирует запрос для определения количества касс ККМ с отбором по организации и торговому объекту.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросКоличествоКассККМ(Запрос, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Владелец = &Владелец
	|	И КассыККМ.СтруктурнаяЕдиница = &ТорговыйОбъект
	|	И НЕ КассыККМ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	
КонецПроцедуры

// Формирует запрос для определения подключенных касс ККМ в рабочему месту кассира.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросПодключенныеКассыККМ(Запрос, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И КассыККМ.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|	И КассыККМ.Владелец В(&Организации)
	|	И КассыККМ.СтруктурнаяЕдиница = &ТорговыйОбъект";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("Организации" , Объект.Организации.Выгрузить().ВыгрузитьКолонку("Организация"));
	
КонецПроцедуры

// Формирует запрос для определения подключенных эквайринговых терминалов в рабочему месту кассира.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросПодключенныеЭквайринговыеТерминалы(Запрос, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал) КАК ТипОборудования,
	|	ЭквайринговыеТерминалы.Организация КАК Организация,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер,
	|	&ТорговыйОбъект КАК ТорговыйОбъект
	|ИЗ
	|	Справочник.СпособыОплаты КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса ССЫЛКА Справочник.КассыККМ
	|	И НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
	|	И НЕ ЭквайринговыеТерминалы.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	
КонецПроцедуры

// Формирует запрос для определения терминалов с незаполнными тарифами за операции.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросТерминалыСПустымиТарифами(Запрос, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(&ТорговыйОбъект) КАК ТорговыйОбъект
	|ПОМЕСТИТЬ втТерминалы
	|ИЗ
	|	Справочник.СпособыОплаты КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Организация = &Организация
	|	И ЭквайринговыеТерминалы.Касса = &Касса
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЭквайринговыеТерминалыВидыПлатежныхКарт.НомерСтроки) КАК КоличествоЗаписейТарифов,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втТарифыОбслуживанияТерминалов
	|ИЗ
	|	втТерминалы КАК втТерминалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОплаты.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|		ПО втТерминалы.Ссылка = ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТерминалы.Ссылка КАК Ссылка,
	|	втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов КАК КоличествоЗаписейТарифов,
	|	&ТорговыйОбъект КАК ТорговыйОбъект
	|ИЗ
	|	втТерминалы КАК втТерминалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифыОбслуживанияТерминалов КАК втТарифыОбслуживанияТерминалов
	|		ПО втТерминалы.Ссылка = втТарифыОбслуживанияТерминалов.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов, 0) = 0";
	
	ПодключенныеКассыККМ = Объект.Организации.Выгрузить().ВыгрузитьКолонку("КассаККМ");
	ПодключеннаяКассаККМ = ?(ПодключенныеКассыККМ.Количество() > 0,
		ПодключенныеКассыККМ[0],
		Неопределено);
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("Касса", ПодключеннаяКассаККМ);
	
КонецПроцедуры

// Формирует запрос для отображения результатов настройки КассККМ.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросНастроенныеКассыККМВПомощнике(Запрос, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаОрганизации
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК Наименование,
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	КассыККМ.ТипКассы КАК ТипКассы,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования
	|ПОМЕСТИТЬ ТаблицаКассККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.СтруктурнаяЕдиница = &ТорговыйОбъект
	|	И КассыККМ.Владелец В
	|			(ВЫБРАТЬ
	|				ТаблицаОрганизации.Организация КАК Организация
	|			ИЗ
	|				ТаблицаОрганизации КАК ТаблицаОрганизации)
	|	И КассыККМ.ТипКассы В(&ТипыКассы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ТаблицаКассККМ.КассаККМ, ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)) КАК КассаККМ,
	|	ЕСТЬNULL(ТаблицаКассККМ.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ТаблицаКассККМ.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ПодключаемоеОборудование,
	|	ЕСТЬNULL(ТаблицаКассККМ.ТипКассы, ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ПустаяСсылка)) КАК ТипКассы
	|ИЗ
	|	ТаблицаОрганизации КАК ТаблицаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМ КАК ТаблицаКассККМ
	|		ПО ТаблицаОрганизации.Организация = ТаблицаКассККМ.Организация";
	
	МассивТиповКассы = Новый Массив;
	МассивТиповКассы.Добавить(Перечисления.ТипыКассККМ.АвтономнаяККМ);
	МассивТиповКассы.Добавить(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	Запрос.УстановитьПараметр("Организации", Объект.Организации.Выгрузить());
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("ТипыКассы", МассивТиповКассы);
	
КонецПроцедуры

// Формирует запрос для получения данных:
// Пакет 1: выборка организаций.
// Пакет 2: выборка торговых объектов.
// Пакет 3: выборка касс ККМ.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросДанныеПредприятия(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления";
	
КонецПроцедуры

// Формирует запрос для определения используемых видов оплат в помощнике настройки кассового места.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросИспользуемыеВидыОплат(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФункциональнаяОпцияИспользоватьОплатуКартами.Значение КАК ИспользоватьОплатуПлатежнымиКартами,
	|	ЛОЖЬ КАК ИспользоватьОплатуПлатежнымиСистемами
	|ИЗ
	|	Константа.ФункциональнаяОпцияИспользоватьОплатуКартами КАК ФункциональнаяОпцияИспользоватьОплатуКартами";
	
КонецПроцедуры

// Настройка элементов формы "Помощник настройки РМК".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма обработки помощник настроек РМК.
//
Процедура НастроитьИспользованиеРежимаСкупкиПомощникРМК(Форма) Экспорт
	Форма.Элементы.СтраницаНастройкаРМКСкупка.Видимость = Ложь;
КонецПроцедуры

// Настройка элементов формы "Помощник настройки РМК".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма обработки помощник настроек РМК.
//
Процедура НастройкаСтраницыВидовОплат(Форма) Экспорт
	ЭлементыФормы = Форма.Элементы;
	ЭлементыФормы.ГруппаВидыОплатВертикальная.Видимость = Ложь;
	ЭлементыФормы.ГруппаВидыОплатПереопределение.Видимость = Истина;
	ЭлементыФормы.Переместить(ЭлементыФормы.ДекорацияВидыОплатЗаголовок, ЭлементыФормы.ГруппаВидыОплатПереопределение, ЭлементыФормы.ГруппаОплатаНаличными);
	ЭлементыФормы.Переместить(ЭлементыФормы.ИспользоватьОплатуПлатежнымиКартами, ЭлементыФормы.ГруппаВидыОплатПереопределение, ЭлементыФормы.ГруппаОплатаНаличными);
	
	ИспользоватьОплатуБонусами =
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьБонусныеПрограммы");
		
	ИспользоватьОплатуСертификатами =
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьПодарочныеСертификаты");
		
	ЭлементыФормы.НастройкаРМКИспользоватьОплатуБонусами.Доступность = ИспользоватьОплатуБонусами;
	ЭлементыФормы.НастройкаРМКИспользоватьОплатуСертификатами.Доступность = ИспользоватьОплатуСертификатами;
	
	
КонецПроцедуры

// Возвращает значение изменения страницы видов оплат
//
// Возвращаемое значение:
//  ИзмененаСтраницаВидовОплат - Булево - признак изменения страницы видов оплат.
//
Функция ИзмененаСтраницаВидовОплат() Экспорт
	Возврат Истина;
КонецФункции
#КонецОбласти

#Область ФормированиеЗапросов

// Формирует запрос для получения данных эквайринговый терминалов.
// В результате запроса должна быть заполнена таблица на форме РМК "ТаблицаТерминалы".
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных ЭТ.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросДанныеЭквайринговыхТерминалов(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта) КАК ВидОплаты,
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссии КАК ПроцентКомиссииПриПродаже,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссииПриОтмене КАК ПроцентКомиссииПриОтмене,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссииПриВозврате КАК ПроцентКомиссииПриВозврате,
	|	ЭквайринговыеТерминалы.Организация КАК Организация,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ПлатежнаяСистема КАК ПлатежнаяСистема,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.КонтрольВзаиморасчетовЭквайринг, ЛОЖЬ) КАК КонтролироватьВзаиморасчетыПоДоговору
	|ИЗ
	|	Справочник.СпособыОплаты.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОплаты КАК ЭквайринговыеТерминалы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ПО ЭквайринговыеТерминалы.Договор = ДоговорыКонтрагентов.Ссылка
	|		ПО ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка = ЭквайринговыеТерминалы.Ссылка
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса В(&МассивКассККМ)
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	МассивКассККМ = Форма.ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("КассаККМ");
	Запрос.УстановитьПараметр("МассивКассККМ", МассивКассККМ);
	
КонецПроцедуры

// Формирует запрос для получения данных касс ККМ.
// Поля обязательные в выборке: КассаККМ, Организация, ПодключаемоеОборудование, ИспользоватьБезПодключенияОборудования,
// ТорговыйОбъект.
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных касс ККМ.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ДополнительныеПараметры - Структура - дополнительные параметры, если по данным формы не удается задать параметры запроса.
//
Процедура СформироватьЗапросДанныеКассыККМ(Запрос, Форма = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТорговыйОбъект = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	РабочееМесто = Справочники.РабочиеМеста.ПустаяСсылка();
	
	Если Не Форма = Неопределено Тогда
		Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
			Если Форма.ИмяФормы = "Справочник.НастройкиРМК.Форма.ФормаЭлемента" Тогда
				РабочееМесто = Форма.Объект.РабочееМесто;
				ТорговыйОбъект = ОбщегоНазначенияРМК.ТекущийТорговыйОбъект();
			ИначеЕсли Форма.ИмяФормы = "Обработка.РабочееМестоКассира.Форма.ФормаРМК" Тогда
				РабочееМесто = Форма.РабочееМесто;
				ТорговыйОбъект = Форма.Объект.ТорговыйОбъект;
			КонецЕсли;
		Иначе
			РабочееМесто = Форма.РабочееМесто;
			ТорговыйОбъект = ОбщегоНазначенияРМК.ТекущийТорговыйОбъект();
		КонецЕсли;
	Иначе
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			Если ДополнительныеПараметры.Свойство("ТорговыйОбъект") Тогда
				ТорговыйОбъект = ДополнительныеПараметры.ТорговыйОбъект;
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("РабочееМесто") Тогда
				РабочееМесто = ДополнительныеПараметры.РабочееМесто;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад
	|ПОМЕСТИТЬ ТаблицаСкладов
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
	|ГДЕ
	|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
	|ГДЕ
	|	(ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ИЛИ ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.СтруктурнаяЕдиница КАК ТорговыйОбъект,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК СпрПодключаемоеОборудование
	|		ПО КассыККМ.ПодключаемоеОборудование = СпрПодключаемоеОборудование.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
	|		ПО КассыККМ.СтруктурнаяЕдиница = ТаблицаСкладов.Склад
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И СпрПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И СпрПодключаемоеОборудование.УстройствоИспользуется
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассыККМ.Ссылка,
	|	КассыККМ.СтруктурнаяЕдиница,
	|	КассыККМ.Владелец,
	|	КассыККМ.ПодключаемоеОборудование,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
	|		ПО КассыККМ.СтруктурнаяЕдиница = ТаблицаСкладов.Склад
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И КассыККМ.ИспользоватьБезПодключенияОборудования";
	
	МассивТиповСтруктурныхЕдиниц = Новый Массив;
	МассивТиповСтруктурныхЕдиниц.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	МассивТиповСтруктурныхЕдиниц.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	
	Если Не ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект", "");
	Иначе
		Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	КонецЕсли;
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("МассивТиповСтруктурныхЕдиниц", МассивТиповСтруктурныхЕдиниц);
	
КонецПроцедуры

// Формирует запрос для получения данных избранных товаров.
// В результате запроса должна быть заполнена таблица на форме РМК "ИзбранныеПозиции".
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных избранных товаров.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросДанныеИзбранныхТоваров(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка,
	|	ПалитраТоваровРМКСостав.НомерСтроки КАК НомерСтроки,
	|	ПалитраТоваровРМКСостав.Номенклатура КАК Номенклатура,
	|	ПалитраТоваровРМКСостав.Характеристика КАК Характеристика,
	|	ПалитраТоваровРМКСостав.ЗаголовокЭлемента КАК ЗаголовокЭлемента,
	|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
	|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции,
	|	ПалитраТоваровРМКСостав.Шрифт КАК Шрифт,
	|	ПалитраТоваровРМКСостав.ЦветШрифта КАК ЦветШрифта,
	|	ПалитраТоваровРМКСостав.ЦветФона КАК ЦветФона,
	|	ПалитраТоваровРМКСостав.ЭтоКатегория КАК ЭтоКатегория,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК Наименование,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК ИмяЭлемента,
	|	ПалитраТоваровРМКСостав.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	ПалитраТоваровРМКСостав.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ПалитраТоваровРМКСостав.КатегорияРазмещения КАК КатегорияРазмещения,
	|	ПалитраТоваровРМКСостав.ВидМодификатора КАК ВидМодификатора,
	|	ПалитраТоваровРМКСостав.ИмеетсяВложенность КАК ИмеетсяВложенность
	|ПОМЕСТИТЬ ПалитраТоваровРМКСостав
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|		ПО НастройкиРабочегоМестаКассира.СтруктураБыстрыхТоваров = ПалитраТоваровРМКСостав.Ссылка
	|ГДЕ
	|	НастройкиРабочегоМестаКассира.Ссылка = &НастройкаРМК
	|	И НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
	|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтрокиМодификатора
	|ПОМЕСТИТЬ ВТГрупповыеМодификаторы
	|ИЗ
	|	ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|			ПалитраТоваровРМКСостав.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
	|		ГДЕ
	|			ПалитраТоваровРМКСостав.НомерКатегорииРазмещения > 0
	|			И НЕ ПалитраТоваровРМКСостав.ВидМодификатора = ЗНАЧЕНИЕ(Перечисление.ВидыМодификаторовРМК.ПустаяСсылка)) КАК ВложенныйЗапрос
	|		ПО ПалитраТоваровРМКСостав.НомерКатегорииРазмещения = ВложенныйЗапрос.НомерКатегорииРазмещения
	|ГДЕ
	|	ПалитраТоваровРМКСостав.ВидМодификатора = ЗНАЧЕНИЕ(Перечисление.ВидыМодификаторовРМК.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка,
	|	ПалитраТоваровРМКСостав.НомерСтроки КАК НомерСтроки,
	|	ПалитраТоваровРМКСостав.Номенклатура КАК Номенклатура,
	|	ПалитраТоваровРМКСостав.Характеристика КАК Характеристика,
	|	ПалитраТоваровРМКСостав.ЗаголовокЭлемента КАК ЗаголовокЭлемента,
	|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
	|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции,
	|	ПалитраТоваровРМКСостав.Шрифт КАК Шрифт,
	|	ПалитраТоваровРМКСостав.ЦветШрифта КАК ЦветШрифта,
	|	ПалитраТоваровРМКСостав.ЦветФона КАК ЦветФона,
	|	ПалитраТоваровРМКСостав.ЭтоКатегория КАК ЭтоКатегория,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК Наименование,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК ИмяЭлемента,
	|	ПалитраТоваровРМКСостав.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	ПалитраТоваровРМКСостав.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ПалитраТоваровРМКСостав.КатегорияРазмещения КАК КатегорияРазмещения,
	|	ПалитраТоваровРМКСостав.ВидМодификатора КАК ВидМодификатора,
	|	ПалитраТоваровРМКСостав.ИмеетсяВложенность КАК ИмеетсяВложенность
	|ПОМЕСТИТЬ СтруктураПалитрыБезМодификаторов
	|ИЗ
	|	ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
	|ГДЕ
	|	НЕ ПалитраТоваровРМКСостав.НомерСтроки В
	|				(ВЫБРАТЬ
	|					ВТГрупповыеМодификаторы.НомерСтрокиМодификатора
	|				ИЗ
	|					ВТГрупповыеМодификаторы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПалитраТоваровРМКСостав.Номенклатура КАК Номенклатура,
	|	ПалитраТоваровРМКСостав.Характеристика КАК Характеристика,
	|	ПалитраТоваровРМКСостав.ЦветФона КАК ЦветФона,
	|	СтруктураПалитрыБезМодификаторов.НомерСтроки КАК НомерСтроки,
	|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка,
	|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
	|	СтруктураПалитрыБезМодификаторов.НомерКатегории КАК НомерКатегорииРазмещения,
	|	ПалитраТоваровРМКСостав.ЭтоКатегория КАК ЭтоКатегория,
	|	ЛОЖЬ КАК ИмеетсяВложенность,
	|	ПалитраТоваровРМКСостав.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК ИмяЭлемента,
	|	ПалитраТоваровРМКСостав.ЦветШрифта КАК ЦветШрифта
	|ПОМЕСТИТЬ СтруктураПалитрыМодификаторов
	|ИЗ
	|	СтруктураПалитрыБезМодификаторов КАК СтруктураПалитрыБезМодификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрупповыеМодификаторы КАК ВТГрупповыеМодификаторы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
	|			ПО ВТГрупповыеМодификаторы.НомерСтрокиМодификатора = ПалитраТоваровРМКСостав.НомерСтроки
	|		ПО СтруктураПалитрыБезМодификаторов.НомерКатегории = ВТГрупповыеМодификаторы.НомерКатегории
	|			И СтруктураПалитрыБезМодификаторов.НомерКатегорииРазмещения = ВТГрупповыеМодификаторы.НомерКатегорииРазмещения
	|			И СтруктураПалитрыБезМодификаторов.ИндексПозиции = ВТГрупповыеМодификаторы.ИндексПозиции
	|			И (СтруктураПалитрыБезМодификаторов.ЭтоКатегория = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПалитрыБезМодификаторов.Номенклатура КАК Номенклатура,
	|	СтруктураПалитрыБезМодификаторов.Характеристика КАК Характеристика,
	|	СтруктураПалитрыБезМодификаторов.ЦветФона КАК ЦветФона,
	|	СтруктураПалитрыБезМодификаторов.НомерСтроки КАК НомерСтроки,
	|	СтруктураПалитрыБезМодификаторов.Ссылка КАК Ссылка,
	|	СтруктураПалитрыБезМодификаторов.НомерКатегории КАК НомерКатегории,
	|	СтруктураПалитрыБезМодификаторов.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	СтруктураПалитрыБезМодификаторов.ЭтоКатегория КАК ЭтоКатегория,
	|	СтруктураПалитрыБезМодификаторов.ИмеетсяВложенность КАК ИмеетсяВложенность,
	|	СтруктураПалитрыБезМодификаторов.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	СтруктураПалитрыБезМодификаторов.ИмяЭлемента КАК ИмяЭлемента,
	|	СтруктураПалитрыБезМодификаторов.ИндексПозиции КАК ИндексПозиции,
	|	СтруктураПалитрыБезМодификаторов.ЦветШрифта КАК ЦветШрифта
	|ПОМЕСТИТЬ СтруктураПалитры
	|ИЗ
	|	СтруктураПалитрыБезМодификаторов КАК СтруктураПалитрыБезМодификаторов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураПалитрыМодификаторов.Номенклатура,
	|	СтруктураПалитрыМодификаторов.Характеристика,
	|	СтруктураПалитрыМодификаторов.ЦветФона,
	|	СтруктураПалитрыМодификаторов.НомерСтроки,
	|	СтруктураПалитрыМодификаторов.Ссылка,
	|	СтруктураПалитрыМодификаторов.НомерКатегории,
	|	СтруктураПалитрыМодификаторов.НомерКатегорииРазмещения,
	|	СтруктураПалитрыМодификаторов.ЭтоКатегория,
	|	СтруктураПалитрыМодификаторов.ИмеетсяВложенность,
	|	СтруктураПалитрыМодификаторов.ИзображениеЭлемента,
	|	СтруктураПалитрыМодификаторов.ИмяЭлемента,
	|	СтруктураПалитрыМодификаторов.ИндексПозиции,
	|	СтруктураПалитрыМодификаторов.ЦветШрифта
	|ИЗ
	|	СтруктураПалитрыМодификаторов КАК СтруктураПалитрыМодификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПалитры.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
	|			ТОГДА СтруктураПалитры.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СтруктураПалитры.НомерСтроки КАК НомерСтроки,
	|	СпрНоменклатура.Представление КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СтруктураПалитры.Характеристика) КАК ХарактеристикаПредставление,
	|	СпрНоменклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерии,
	|	ВЫБОР
	|		КОГДА НЕ СпрНоменклатура.ВидАлкогольнойПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|				И СпрНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		ИНАЧЕ СпрНоменклатура.ВидПродукцииИС
	|	КОНЕЦ КАК ОсобенностьУчета,
	|	СпрНоменклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
	|	СпрНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СпрНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрПолитикаУчетаСерий.ТипПолитики, ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьЗаполнениеСерий,
	|	СпрНоменклатура.Номинал КАК Номинал,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.СпособРасчетаЦеныНабора КАК СпособРасчетаЦеныНабора,
	|	СпрНоменклатура.ЭтоНабор
	|		ИЛИ СпрНоменклатура.ЭтоАгентскаяУслуга КАК ЭтоНабор,
	|	СпрНоменклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	СтруктураПалитры.ЦветФона КАК ЦветФона,
	|	СтруктураПалитры.НомерКатегории КАК НомерКатегории,
	|	СтруктураПалитры.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	СтруктураПалитры.ЭтоКатегория КАК ЭтоКатегория,
	|	СтруктураПалитры.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	СтруктураПалитры.ИмяЭлемента КАК ИмяЭлемента,
	|	СтруктураПалитры.ИндексПозиции КАК ИндексПозиции,
	|	СтруктураПалитры.ЦветШрифта КАК ЦветШрифта,
	|	СтруктураПалитры.ИмеетсяВложенность КАК ИмеетсяВложенность
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	СтруктураПалитры КАК СтруктураПалитры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолитикаУчетаСерий КАК СпрПолитикаУчетаСерий
	|			ПО СпрНоменклатура.ПолитикаУчетаСерий = СпрПолитикаУчетаСерий.Ссылка
	|		ПО (СпрНоменклатура.Ссылка = СтруктураПалитры.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК Упаковка,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ втЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						втНоменклатура.Номенклатура КАК Номенклатура,
	|						втНоменклатура.Характеристика КАК Характеристика
	|					ИЗ
	|						втНоменклатура КАК втНоменклатура)
	|				И ВидЦен = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад
	|ПОМЕСТИТЬ ТаблицаСклады
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
	|ГДЕ
	|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
	|ГДЕ
	|	(ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ИЛИ ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.Характеристика КАК Характеристика,
	|	СУММА(ОстаткиТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ втОстаткиТоваров
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ТаблицаСклады.Склад КАК Склад
	|			ИЗ
	|				ТаблицаСклады КАК ТаблицаСклады)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.НомерСтроки КАК НомерСтроки,
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Характеристика КАК Характеристика,
	|	втНоменклатура.НоменклатураПредставление КАК НоменклатураПредставление,
	|	втНоменклатура.ХарактеристикаПредставление КАК ХарактеристикаПредставление,
	|	ЕСТЬNULL(втЦеныНоменклатуры.Упаковка, втНоменклатура.ЕдиницаИзмерения) КАК Упаковка,
	|	ВЫБОР
	|		КОГДА втНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА втНоменклатура.Номинал
	|		ИНАЧЕ ЕСТЬNULL(втЦеныНоменклатуры.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	втНоменклатура.ИспользоватьСерии КАК ИспользоватьСерии,
	|	втНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	втНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	втНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	втНоменклатура.ПроверятьЗаполнениеСерий КАК ПроверятьЗаполнениеСерий,
	|	ВЫБОР
	|		КОГДА втНоменклатура.ЭтоНабор
	|				И (втНоменклатура.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
	|					ИЛИ втНоменклатура.Номенклатура.ЭтоАгентскаяУслуга)
	|			ТОГДА ИСТИНА
	|		КОГДА втНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ВЫБОР
	|					КОГДА втНоменклатура.ПроизвольныйНоминал
	|						ТОГДА ИСТИНА
	|					КОГДА втНоменклатура.Номинал > 0
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА ЕСТЬNULL(втЦеныНоменклатуры.Цена, 0) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА втНоменклатура.ЭтоКатегория
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступностьКоманды,
	|	втНоменклатура.ЦветФона КАК ЦветФона,
	|	втНоменклатура.НомерКатегории КАК НомерКатегории,
	|	втНоменклатура.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	втНоменклатура.ЭтоКатегория КАК ЭтоКатегория,
	|	втНоменклатура.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	втНоменклатура.ИмяЭлемента КАК ИмяЭлемента,
	|	втНоменклатура.ИндексПозиции КАК ИндексПозиции,
	|	втНоменклатура.ЦветШрифта КАК ЦветШрифта,
	|	ЕСТЬNULL(втОстаткиТоваров.Количество, 0) КАК Доступно,
	|	ПРЕДСТАВЛЕНИЕ(втНоменклатура.ЕдиницаИзмерения) КАК ПредставлениеЕдиницыИзмерения,
	|	втНоменклатура.ИмеетсяВложенность КАК ИмеетсяВложенность
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
	|		ПО втНоменклатура.Номенклатура = втЦеныНоменклатуры.Номенклатура
	|			И втНоменклатура.Характеристика = втЦеныНоменклатуры.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиТоваров КАК втОстаткиТоваров
	|		ПО втНоменклатура.Номенклатура = втОстаткиТоваров.Номенклатура
	|			И втНоменклатура.Характеристика = втОстаткиТоваров.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("НастройкаРМК", Форма.ТекущаяНастройкаРМК);
	Запрос.УстановитьПараметр("ВидЦены", Форма.РозничныйВидЦены);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры());
	Запрос.УстановитьПараметр("ТорговыйОбъект", Форма.Объект.ТорговыйОбъект);
	
КонецПроцедуры

// Формирует запрос, который выводит данные из таблицы "Быстрые товары" справочника "Настройки рабочего места кассира".
// Запрос должен строки, в которых для товара обязательно заполнение характеристики, но характеристика не заполнена.
//
// Параметры:
//  Запрос - Запрос - запрос для получения строк с незаполненной характеристикой.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
Процедура СформироватьЗапросИспользованияХарактеристикВБыстрыхТоварах(Запрос, НастройкаРМК) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО НастройкиРМКБыстрыеТовары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	НастройкиРМКБыстрыеТовары.Ссылка = &Ссылка
	|	И НастройкиРМКБыстрыеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И СпрНоменклатура.ИспользоватьХарактеристики
	|	И СпрНоменклатура.ПроверятьЗаполнениеХарактеристики";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаРМК);
	
КонецПроцедуры

// Формирует запрос, который выводит данные из таблицы "Быстрые товары" справочника "Настройки рабочего места кассира".
// Запрос должен выводить дублирующиеся строки в разрезе "Номенклатура - Характеристика".
//
// Параметры:
//  Запрос - Запрос - запрос для получения дублей строк.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
Процедура СформироватьЗапросДублейСтрокВБыстрыхТоварах(Запрос, НастройкаРМК) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.Номенклатура КАК Номенклатура,
	|	НастройкиРМКБыстрыеТовары.Характеристика КАК Характеристика,
	|	КОЛИЧЕСТВО(*) КАК КоличествоПозиций
	|ПОМЕСТИТЬ втДубли
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|ГДЕ
	|	НастройкиРМКБыстрыеТовары.Ссылка = &Ссылка
	|	И НЕ НастройкиРМКБыстрыеТовары.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиРМКБыстрыеТовары.Номенклатура,
	|	НастройкиРМКБыстрыеТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втДубли КАК втДубли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|		ПО втДубли.Номенклатура = НастройкиРМКБыстрыеТовары.Номенклатура
	|			И втДубли.Характеристика = НастройкиРМКБыстрыеТовары.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаРМК);
	
КонецПроцедуры

// Формирует запрос для получения данных организаций.
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных организаций.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросДанныеОрганизаций(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
КонецПроцедуры

#КонецОбласти

#Область Запреты_продаж_ПрограммныйИнтерфейс

// Заполняет признак использования запретов продаж по данным сервера лояльности
//
// Параметры:
//  Результат - Булево - устанавливаемое значение признака
//
Процедура ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат) Экспорт
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗапретПродаж");
КонецПроцедуры

// Устанавливает признак использования запретов продаж, поставляемых конфигурацией
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - исходное значение признака
//
Процедура ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(ИспользоватьОграниченияПродаж) Экспорт
	ИспользоватьОграниченияПродаж = Ложь;
КонецПроцедуры

// Обновляет признак использования календарного запрета продаж по данным использования поставляемого конфигурацией
// признака запрета продаж
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - устанавливаемое значение признака
//  ПараметрыОбновления - Структура - дополнительные параметры
//
Процедура ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьОграниченияПродаж, ПараметрыОбновления) Экспорт
	Возврат;
КонецПроцедуры

// Обновляет регистр сведений запретов продаж по поставляемым (встроенным) конфигурацией ограничениям 
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК- торговый объект для отбора перечня ограничений.
//  Результат - Структура:
//  	* КомментарийОбновленияЗапретов - Строка - при наличии ошибок обновления данных содержит пояснение
//
Процедура ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область Печать_заявления_на_возврат_ПрограммныйИнтерфейс

// Дополняет исходные данные для заявления на возврат 
//
//	Параметры:
//	ДанныеЗаявленияНаВозврат - Структура:
//		*Товары - Массив,
//		*ФИОПокупателя - Строка,
//		*ДатаРождения - Дата,
//		*УдостоверениеЛичности - Строка,
//		*СуммаДокумента - Число,
//		*ЧекПродажи - ОпределяемыйТип.ЧекККМРМК,
//		*Магазин - ОпределяемыйТип.ТорговыйОбъектРМК,
//		*ЧекНомер - Число,
//		*ЧекДата - Дата,
//		*Кому - Строка,
//		*ОтКого - Строка,
//		*Дата - Дата.
//
Процедура ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат) Экспорт
	
	Если ДанныеЗаявленияНаВозврат.Свойство("ЧекПродажи") 
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ЧекПродажи) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЧекККМ.Номер КАК ЧекНомер,
		|	ЧекККМ.Дата КАК ЧекДата
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Ссылка = &Ссылка
		|	И НЕ ЧекККМ.ПометкаУдаления");
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаявленияНаВозврат.ЧекПродажи);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеЗаявленияНаВозврат, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределение формирования заявления на возврат
//
// Параметры:
//  ЗаявлениеНаВозврат - ТабличныйДокумент - исходный макет заявления, сформированный по умолчанию
//  ДанныеЗаявленияНаВозврат - Структура - см. ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат)
//
Процедура ЗаполнитьЗаявлениеНаВозврат(ЗаявлениеНаВозврат, ДанныеЗаявленияНаВозврат) Экспорт
КонецПроцедуры

// Заполняет ФИО и дату рождения клиента по данным карты лояльности
//
// Параметры:
//  ДисконтнаяКартаКлиента - ОпределяемыйТип.ДисконтнаяКартаРМК - карта лояльности, содержащая исходные данные;
//  ФИО - Строка;
//  ДатаРождения - Дата.
//
Процедура ЗаполнитьПерсональныеДанныеПоКартеКлиента(ДисконтнаяКартаКлиента, ФИО, ДатаРождения) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДисконтныеКарты.ВладелецКарты ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ВЫРАЗИТЬ(ДисконтныеКарты.ВладелецКарты КАК Справочник.Контрагенты).ДатаРождения
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаРождения,
	|	ПРЕДСТАВЛЕНИЕ(ДисконтныеКарты.ВладелецКарты) КАК ФИОПокупателя
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.Ссылка = &КартаЛояльности");
	Запрос.УстановитьПараметр("КартаЛояльности",ДисконтнаяКартаКлиента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ФИО = Выборка.ФИОПокупателя;
		ДатаРождения = Выборка.ДатаРождения;
	
	КонецЕсли;
	
КонецПроцедуры

// Получает краткое наименование организации
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК;
//  КраткоеНаименованиеОрганизации - Строка.
//
Процедура ЗаполнитьКраткоеНаименованиеОрганизации(Организация, КраткоеНаименованиеОрганизации) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КраткоеНаименованиеОрганизации = Результат.Наименование;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Переопределение_обработчиков_форм_ПрограммныйИнтерфейс

// Переопределяет поведение формы при создании на сервере
//
// Параметры:
//  Форма - - ФормаКлиентскогоПриложения - форма, поведение которой переопределяется.
//  Отказ - Булево.
//  СтандартнаяОбработка - Булево.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.ПомощникНастройкиКассовогоМестаРМК.Форма.Форма" Тогда
		
		ОбменНастроен = Истина;
		Форма.ОбменНастроен = ОбменНастроен;
		Форма.Элементы.СтраницаЗапускаПомощникаНастройкиОбмена.Видимость = НЕ ОбменНастроен;
		Форма.Элементы.СтраницаНастройкаСинхронизацииДанных.Видимость = НЕ ОбменНастроен;
		ВариантыОкругления = Форма.Элементы.ТекущаяНастройкаРМКТочностьОкругления.СписокВыбора;
		ВариантыОкругления.Очистить();
		ВариантыОкругления.Вставить(0,
			ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр1"), НСтр("ru = 'Без копеек'"));
		ВариантыОкругления.Вставить(1,
			ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр0_01"), НСтр("ru = 'С копейками'"));
		
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СерверЛояльности

// Заполняет имя реквизита, в котором хранится код карты лояльности.
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита.
//
Процедура ЗаполнитьИмяРеквизитаКодКартыЛояльности(ИмяРеквизита) Экспорт
	
	ИмяРеквизита = НСтр("ru='КодКартыМагнитный'");
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПрограммы

// Заполняет признак использования замены товаров.
//
// Параметры:
//  Результат - Булево - признак использования замены товаров.
//
Процедура ЗаполнитьПризнакИспользоватьЗаменуТоваров(Результат) Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаменуТоваров");
	
КонецПроцедуры

// Заполняет признак использования сервиса лояльности.
//
// Параметры:
//  Результат - Булево - признак использования сервиса лояльности.
//
Процедура ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Результат) Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьСерверЛояльностиПолучательДанных");
	
КонецПроцедуры

// Заполняет признак использования оплат сертификатами НСПК.
//
// Параметры:
//  Результат - Булево - признак использования оплат сертификатами НСПК.
//
Процедура ЗаполнитьПризнакИспользоватьОплатуСертификатамиНСПК(Результат) Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуСертификатамиНСПК");
	
КонецПроцедуры

// Заполняет признак использования характеристик в конфигурации.
//
// Параметры:
//  ИспользоватьХарактеристики - Булево - признак использования характеристик.
//
Процедура ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики) Экспорт
	ИспользоватьХарактеристики = ИспользоватьХарактеристикиНоменклатуры();
КонецПроцедуры

// Заполняет признак использования оплат платежными картами.
//
// Параметры:
//  ИспользоватьОплатуПлатежнымиКартами - Булево - признак использования оплат платежными картами.
//
Процедура ЗаполнитьПризнакИспользованияОплатПК(ИспользоватьОплатуПлатежнымиКартами) Экспорт
	
	ИспользоватьОплатуПлатежнымиКартами = ИспользоватьОплатуПлатежнымиКартами();
	
КонецПроцедуры

// Заполняет признак использования оплат платежными системами.
//
// Параметры:
//  ИспользоватьОплатуПлатежнымиСистемами - Булево - признак использования оплат платежными системами.
//
Процедура ЗаполнитьПризнакИспользованияОплатПлатежнымиСистемами(ИспользоватьОплатуПлатежнымиСистемами) Экспорт
	
	ИспользоватьОплатуПлатежнымиСистемами = Ложь;
	
КонецПроцедуры

// Заполняет признак использования продаж алкогольной продукции.
//
// Параметры:
//  ИспользоватьПродажуАлкоголя - Булево - признак использования продаж алкогольной продукции.
//
Процедура ЗаполнитьПризнакИспользованияПродажАлкоголя(ИспользоватьПродажуАлкоголя) Экспорт
	
	ИспользоватьПродажуАлкоголя = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
КонецПроцедуры

// Заполняет имя константы в прикладной конфигурации по переданному виду параметра.
//
// Параметры:
//  ВидКонстанты - Строка - вид переданной константы.
//  ИмяКонстанты - Строка - имя константы в прикладной конфигурации.
//
Процедура ЗаполнитьИмяКонстантыПоВиду(ВидКонстанты, ИмяКонстанты) Экспорт
	
	Если ВидКонстанты = "ВестиСведенияДляДекларацийПоАлкоголю" Тогда
		ИмяКонстанты = Метаданные.Константы.ВестиСведенияДляДекларацийПоАлкогольнойПродукции.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьЗаменуТоваров" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьЗаменуТоваров.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьЗапретПродаж" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьЗапретПродаж.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьОплатуПлатежнымиКартами" Тогда
		ИмяКонстанты = Метаданные.Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьОплатуСертификатамиНСПК" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьОплатуСертификатамиНСПК.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьСерверЛояльностиПолучательДанных" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьСерверЛояльностиПолучательДанных.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьПодключаемоеОборудование" Тогда
		ИмяКонстанты = Метаданные.Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьСовмещенныйКодДляЧекаЕГАИСИЧекаККМ" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьЕдиныйШтриховойКодДляККТИЕГАИС.Имя;
	ИначеЕсли ВидКонстанты = "ПечататьКороткийСлипЧек" Тогда
		ИмяКонстанты = Метаданные.Константы.ПечататьКороткийСлипЧек.Имя;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак, который определяет, что используется сокращенный сценарий настройки рабочего места кассира.
//
// Параметры:
//  Результат - Булево - признак для заполнения.
//
Процедура ЗаполнитьПризнакЭтоСокращенныйСценарийНастройкиРМК(Результат) Экспорт
	Результат = Ложь;
КонецПроцедуры

 // Заполняет признак формирования отдельного чека ЕГАИС при продаже алкогольной продукции.
//
// Параметры:
//  Результат - Булево - значение признака до переопределения.
//
Процедура ЗаполнитьПризнакПечатиОбщегоКодаДляЧекаККТИЕГАИС(Результат) Экспорт
	Результат = Константы.ИспользоватьЕдиныйШтриховойКодДляККТИЕГАИС.Получить();
КонецПроцедуры

// Заполняет признак формирования слип - чека, встроенного в фискальный чек.
//
// Параметры:
//  Результат - Булево - значение признака до переопределения.
//
Процедура ЗаполнитьПризнакФормированияКороткогоСлипЧека(Результат) Экспорт
	Результат = Константы.ПечататьКороткийСлипЧек.Получить();
КонецПроцедуры

// Заполняет признак возможности применения промокода без использования сервера лояльности.
//
// Параметры:
//  Результат - Булево - значение признака до переопределения.
//
Процедура ЛокальныйРасчетСкидокПоддерживаетПромокоды(Результат) Экспорт
	Результат = Константы.ФункциональнаяОпцияИспользоватьПромокоды.Получить();
КонецПроцедуры


#КонецОбласти

#Область ВыборСкладаИЯчейкиПриПродаже

// Формирует запрос для получения списка складов, которые можно вручную выбрать для продажи в форме РМК.
// Процедура должна сформировать запрос динамического списка "Список" на форме "ФормаВыбораСкладЯчейка".
// Поле запроса должно иметь синоним "ДанныеСтроки".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора склада и ячейки при продаже.
//
Процедура СформироватьЗапросСкладыДляРучногоВыбора(Форма) Экспорт
	
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	НастройкаРМК = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(ТекущееРабочееМесто);
	
	Если ЗначениеЗаполнено(НастройкаРМК) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НастройкиРМКСтруктурныеЕдиницы.СтруктурнаяЕдиница КАК ДанныеСтроки
		|ИЗ
		|	Справочник.НастройкиРМК.СтруктурныеЕдиницы КАК НастройкиРМКСтруктурныеЕдиницы
		|ГДЕ
		|	НастройкиРМКСтруктурныеЕдиницы.Ссылка = &НастройкаРМК";
		
		Форма.Список.ТекстЗапроса = ТекстЗапроса;
		Форма.Список.Параметры.УстановитьЗначениеПараметра("НастройкаРМК", НастройкаРМК);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос для получения списка ячеек, которые можно вручную выбрать для продажи в форме РМК.
// Процедура должна сформировать запрос динамического списка "Список" на форме "ФормаВыбораСкладЯчейка".
// Поле запроса должно иметь синоним "ДанныеСтроки".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора склада и ячейки при продаже.
//
Процедура СформироватьЗапросЯчейкиДляРучногоВыбора(Форма) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Ячейки.Ссылка КАК ДанныеСтроки
	|ИЗ
	|	Справочник.Ячейки КАК Ячейки
	|ГДЕ
	|	Ячейки.Владелец = &Склад";
	
	Форма.Список.ТекстЗапроса = ТекстЗапроса;
	Форма.Список.Параметры.УстановитьЗначениеПараметра("Склад", Форма.Склад);
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемое_оборудование_ПрограммныйИнтерфейс

// Заполняет параметры по исходным данным 
//
// Параметры:
//	ОбщиеПараметры - Структура -
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ПараметрыПакетнойФискализации - Структура - 
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков().
//  ДанныеЗаполнения - Структура - Исходные данные:
//		* ИдентификаторЭТ - СправочникСсылка.ПодключаемоеОборудование.
//		* СуммаОплатыКартой - Число.
//		* ВидОплаты - ОпределяемыйТип.ВидОплатыРМК.
//		* ПроцентКомиссии - Число.
//		* ДанныеЧекаПродажи - ДокументСсылка.ЧекКККМ.
//		* ПараметрыВыдачиНаличных:
//			** ОрганизацияВыдачи - ОпределяемыйТип.ОрганизацияРМК.
//			** СуммаВыдачи - Число.
//
Процедура ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
	ПараметрыПакетнойФискализации, ДанныеЗаполнения, Отказ = Ложь, ТекстОшибки = "") Экспорт
	
	ЭтоВыдачаНаличных = ДанныеЗаполнения.Свойство("ПараметрыВыдачиНаличных");
	
	ПараметрыПакетнойФискализации =
		ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков();
	ТипПакетнойОперации = ?(ЭтоВыдачаНаличных,
		ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ПродажаСВыдачейНаличных"),
		ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ФискализацияЧекаСОплатойКартой"));
	ПараметрыПакетнойФискализации.ТипОперации = ТипПакетнойОперации;

	ПараметрыПакетнойФискализации.ИдентификаторЭТ = ДанныеЗаполнения.ИдентификаторЭТ;
	
	// вид оплаты, процент комиссии
	ЗаполнитьЗначенияСвойств(ПараметрыПакетнойФискализации.ПараметрыЭквайринговойОперации, ДанныеЗаполнения);
	
	Если НЕ ОбщиеПараметры.Свойство("ТаблицаОплат") Тогда
		ОбщиеПараметры.Вставить("ТаблицаОплат", Новый Массив());
	КонецЕсли;
	
	Если ЭтоВыдачаНаличных Тогда
	
		СуммаВыдачи = ?(ДанныеЗаполнения.ПараметрыВыдачиНаличных.Свойство("СуммаВыдачи"),
			ДанныеЗаполнения.ПараметрыВыдачиНаличных.СуммаВыдачи, 0);
		ОрганизацияВыдачи = ?(ДанныеЗаполнения.ПараметрыВыдачиНаличных.Свойство("ОрганизацияВыдачи"),
			ДанныеЗаполнения.ПараметрыВыдачиНаличных.ОрганизацияВыдачи,
			ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
			
		ИсходныеДанные = Новый Структура();
		ИсходныеДанные.Вставить("ОборудованиеТерминалаВыдачи", ДанныеЗаполнения.ИдентификаторЭТ);
		ИсходныеДанные.Вставить("ОрганизацияВыдачи", ОрганизацияВыдачи);
		
		ДанныеАгента = ДанныеАгентаВыдачиНаличных(ИсходныеДанные);
		ДанныеПоставщика = ДанныеПоставщикаУслугиВыдачиНаличных(ИсходныеДанные);
		
		ДанныеДляФормированияЧекаВыдачи = ДанныеЗаполнения.ДанныеЧекаПродажи;
		
		ДокументВыдачиНаличных = ЧекВыдачиНаличных(ДанныеДляФормированияЧекаВыдачи, СуммаВыдачи, Отказ, ТекстОшибки);
		
		ПараметрыВыдачиНаличных = ПараметрыПакетнойФискализации.ПараметрыПродажаСВыдачейНаличных;
		ПараметрыВыдачиНаличных.СуммаВыдачи = СуммаВыдачи;
		ПараметрыВыдачиНаличных.ДанныеАгента = ДанныеАгента;
		ПараметрыВыдачиНаличных.ДокументОснованиеВыдачи = ДокументВыдачиНаличных;
		ПараметрыВыдачиНаличных.ДанныеПоставщика = ДанныеПоставщика;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ТипОплатыКартой = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно");
		ДобавленаОплатаКартой = Ложь;
		
		Для Каждого Оплата Из ОбщиеПараметры.ТаблицаОплат Цикл
			
			ДобавленаОплатаКартой = (Оплата.ТипОплаты = ТипОплатыКартой);
			Если ДобавленаОплатаКартой Тогда
				Возврат;
			КонецЕсли;
		
		КонецЦикла;
		
		Если НЕ ДобавленаОплатаКартой Тогда
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", ТипОплатыКартой);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
			СтрокаОплаты.Вставить("Сумма", ДанныеЗаполнения.СуммаОплатыКартой);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
	
#КонецОбласти

#Область Выдача_наличных_при_продаже_ПрограммныйИнтерфейс

// Перезаполняет и сохраняет документ выдачи наличных как документ возврата.
// Актуально для случаев, когда в рамках пакетной фискализации продажи с выдачей наличных
// возникла ошибка фискализации выдачи, но ранее успешно прошла фискализация продажи.
// В момент отмены фискализации автоматически отменяется 
// фискализация чека продажи, её нужно отразить возвратом в документах РМК,при этом 
// в РС "Фискальные операции" под регистратором выдачи наличных появится запись фискализации возврата.
//
// Параметры:
//  СсылкаНаЧекВыдачиНаличных - ДокументСсылка.ЧекККМ - ссылка на изменяемый документ
//  ЧекПродажиПриВыдачеНаличных - ДокументСсылка.ЧекККМ - исходные данные для перезаполнения.
//  НомерЧекаККМ - Число - номер чека ККМ для постобработки.
//  НомерСменыККМ - Число - номер смены ККМ для постобработки.
//  ПараметрыЭквайринговойОперации - Структура:
//   *ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   *НомерЧекаЭТ - Строка
//   *СсылочныйНомер - Строка
//   *НомерКарты - Строка
//
Процедура ЗаменитьЧекВыдачиНаЧекВозврата(СсылкаНаЧекВыдачиНаличных,ЧекПродажиПриВыдачеНаличных,
	НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации) Экспорт

	Если ЗначениеЗаполнено(СсылкаНаЧекВыдачиНаличных) И ЗначениеЗаполнено(ЧекПродажиПриВыдачеНаличных) Тогда
		
		ЧекПродажиБезСтатуса = НЕ ЗначениеЗаполнено(ЧекПродажиПриВыдачеНаличных.Статус);
		
		Если ЧекПродажиБезСтатуса Тогда
			
			ЧекПродажиОбъект = ЧекПродажиПриВыдачеНаличных.ПолучитьОбъект();
			
			Попытка
				ЧекПродажиОбъект.Заблокировать();
			Исключение
				
				ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,
				ЧекПродажиОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
				
			КонецПопытки;
			
			ЧекПродажиОбъект.НомерСменыККМ = НомерСменыККМ;
			ЧекПродажиОбъект.НомерЧекаККМ = НомерЧекаККМ;
			ЧекПродажиОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
			
			// дополнить сведения об оплате картой
			ОтборДляПоиска = Новый Структура();
			ОтборДляПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта"));
			РезультатПоиска = ЧекПродажиОбъект.БезналичнаяОплата.НайтиСтроки(ОтборДляПоиска);
			
			Если РезультатПоиска.Количество() > 0 
				И ТипЗнч(ПараметрыЭквайринговойОперации) = Тип("Структура")
				И ПараметрыЭквайринговойОперации.Свойство("ИдентификаторУстройства") Тогда
				
				Запрос = Новый Запрос( "ВЫБРАТЬ
				|	СпособыОплаты.Ссылка КАК ЭквайринговыйТерминал
				|ИЗ
				|	Справочник.СпособыОплаты КАК СпособыОплаты
				|ГДЕ
				|	СпособыОплаты.ПодключаемоеОборудование = &ИдентификаторУстройства
				|	И НЕ СпособыОплаты.ПометкаУдаления");
				
				Запрос.УстановитьПараметр("ИдентификаторУстройства", ПараметрыЭквайринговойОперации.ИдентификаторУстройства);
				Выборка = Запрос.Выполнить().Выбрать();
				ЭквайринговыйТерминал = ?(Выборка.Следующий(), Выборка.ЭквайринговыйТерминал,
					ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СпособыОплаты.ПустаяСсылка"));
				
				ЗаполнитьЗначенияСвойств(РезультатПоиска[0], ПараметрыЭквайринговойОперации);
				РезультатПоиска[0].НомерПлатежнойКарты = ПараметрыЭквайринговойОперации.НомерКарты;
				РезультатПоиска[0].ЭквайринговыйТерминал = ЭквайринговыйТерминал;
				
			КонецЕсли;
			
			Попытка
				ЧекПродажиОбъект.Записать(РежимЗаписи());
			Исключение
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Дополнение чека продажи при ошибке фискализации выдачи наличных в пакетном режиме.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
		ЧекВозвратаОбъект = Документы.ЧекККМВозврат.СоздатьДокумент();
		ЧекВозвратаОбъект.ЗаполнитьПоЧекуККМ(ЧекПродажиПриВыдачеНаличных);
		
		Попытка
			ЧекВозвратаОбъект.Заблокировать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,
			ЧекВозвратаОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
			
		КонецПопытки;
		
		ИдентификаторЧекаВыдачиНаличныхВОчереди = СсылкаНаЧекВыдачиНаличных.ИдентификаторЧекаВОчереди;
		ДатаЧекаВыдачиНаличных = СсылкаНаЧекВыдачиНаличных.Дата;
		НомерЧекаВыдачиНаличных = СсылкаНаЧекВыдачиНаличных.Номер;
		
		//ЗаполнитьЗначенияСвойств(ЧекВозвратаОбъект, ЧекПродажиПриВыдачеНаличных);
		//ЧекВозвратаОбъект.ЧекККМ = ЧекПродажиПриВыдачеНаличных;
		//
		//ЧекВозвратаОбъект.Запасы.Очистить();
		//Для Каждого ТоварнаяПозиция Из ЧекПродажиПриВыдачеНаличных.Запасы Цикл
		//	ЗаполнитьЗначенияСвойств(ЧекВозвратаОбъект.Запасы.Добавить(), ТоварнаяПозиция);
		//КонецЦикла;
		//ЧекВозвратаОбъект.БезналичнаяОплата.Очистить();
		//
		//Для Каждого СоставляющаяОплаты Из ЧекПродажиПриВыдачеНаличных.БезналичнаяОплата Цикл
		//	ЗаполнитьЗначенияСвойств(ЧекВозвратаОбъект.БезналичнаяОплата.Добавить(), СоставляющаяОплаты);
		//КонецЦикла;
		
		ЧекВозвратаОбъект.ИдентификаторЧекаВОчереди = ИдентификаторЧекаВыдачиНаличныхВОчереди;
		ЧекВозвратаОбъект.Дата = ДатаЧекаВыдачиНаличных;
		//ЧекВозвратаОбъект.Номер = НомерЧекаВыдачиНаличных;
		
		Если ЧекПродажиБезСтатуса Тогда
			
			ЧекВозвратаОбъект.НомерСменыККМ = НомерСменыККМ;
			ЧекВозвратаОбъект.НомерЧекаККМ = НомерЧекаККМ + 1;
			
		КонецЕсли;
		
		Попытка
			ЧекВозвратаОбъект.Записать(РежимЗаписи());
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Подготовка документа ЧекККМ на возврат при ошибке фискализации выдачи наличных в пакетном режиме.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			Возврат;
			
		КонецПопытки;
		
		// изменить запись в Фискальные Операции СсылкаНаЧекВыдачиНаличных
		УстановитьПривилегированныйРежим(Истина);
		ЧекВозврата  = ЧекВозвратаОбъект.Ссылка;
		ФискальнаяЗапись = РегистрыСведений.ОчередьЧековККТ.СоздатьМенеджерЗаписи();
		ФискальнаяЗапись.Регистратор = СсылкаНаЧекВыдачиНаличных;
		ФискальнаяЗапись.Прочитать();
		
		Если НЕ ФискальнаяЗапись.Выбран() И ЗначениеЗаполнено(ЧекВозврата) Тогда
			
			ФискальнаяЗапись.Регистратор = ЧекВозврата;
			ФискальнаяЗапись.Записать();
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область Локализация

// Настройка локализации картинок на форме.
// Необходимо заполнить значения для ключей структуры: "СкидкаТекущийТоварСумма", "СкидкаНаЧекСуммой".
//
// Параметры:
//  ПараметрыКартинок - Структура - структура с соответствиями картинок.
//    СкидкаНаЧекСуммой - БиблиотекаКартинок.
//    СкидкаТекущийТоварСумма - БиблиотекаКартинок.
//
Процедура ЛокализоватьКартинки(ПараметрыКартинок) Экспорт
	
	ПараметрыВалюты = ОбщегоНазначенияРМК.ПараметрыНациональнойВалюты();
	КодВалюты = ПараметрыВалюты.Код;
	Картинка = БиблиотекаКартинок.RUB;
	Если КодВалюты = "840" Тогда
		Картинка = БиблиотекаКартинок.USD;
	ИначеЕсли КодВалюты = "978" Тогда
		Картинка = БиблиотекаКартинок.EUR;
	КонецЕсли;
	
	ПараметрыКартинок.СкидкаНаЧекСуммой = Картинка;
	ПараметрыКартинок.СкидкаТекущийТоварСумма = Картинка;
	ПараметрыКартинок.ПодготовитьДанныеВыдачиНаличных = Картинка;
	ПараметрыКартинок.ДекорацияЛогоВнесение = Картинка;
	ПараметрыКартинок.ДекорацияЛогоВыемка = Картинка;
	
КонецПроцедуры

// Заполняет представление национальной валюты.
//
// Параметры:
//  ПредставлениеВалюты - Строка - представление валюты.
//
Процедура ЗаполнитьПредставлениеВалюты(ПредставлениеВалюты) Экспорт
	
	ПараметрыВалюты = ОбщегоНазначенияРМК.ПараметрыНациональнойВалюты();
	ПредставлениеВалюты = ПараметрыВалюты.Наименование;
	
КонецПроцедуры

// Заполняет параметры национальной валюты.
//
// Параметры:
//  ПараметрыВалюты - Структура - параметры национальной валюты.
//    Код - Строка - код валюты.
//    Наименование - Строка - наименование валюты.
//
Процедура ЗаполнитьПараметрыНациональнойВалюты(ПараметрыВалюты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Валюты.Код КАК Код,
	|	Валюты.Наименование КАК Наименование
	|ИЗ
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО НациональнаяВалюта.Значение = Валюты.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВалюты, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Проверка соответствия валюты в настройках программы и в данных при запуске рабочего места кассира.
//
// Параметры:
//  ВалютаЗаполненаПравильно - Булево - Истина, если валюта укзана верно.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ПроверитьВозможностьРаботыСВалютой(ВалютаЗаполненаПравильно, Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НациональнаяВалюта.Значение КАК ВалютаВНастройкахПрограммы,
	|	ЕСТЬNULL(СпрВидыЦен.ВалютаЦены, &ВалютаПоУмолчанию) КАК ВалютаПриВходе
	|ИЗ
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
	|	Справочник.СтруктурныеЕдиницы КАК СпрСтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК СпрВидыЦен
	|		ПО СпрСтруктурныеЕдиницы.РозничныйВидЦен = СпрВидыЦен.Ссылка
	|ГДЕ
	|	СпрСтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект";
	
	Если ЗначениеЗаполнено(Форма.Объект.ТорговыйОбъект) Тогда
		ВалютаПоУмолчанию = Справочники.ВидыЦен.Оптовая.ВалютаЦены;
	Иначе
		ВалютаПоУмолчанию = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаПоУмолчанию", ВалютаПоУмолчанию);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Форма.Объект.ТорговыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не Выборка.ВалютаВНастройкахПрограммы = Выборка.ВалютаПриВходе Тогда
			ВалютаЗаполненаПравильно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПлиточныйИнтерфейсПодбора_ПрограммныйИнтерфейс

//  Дополняет данные о цене, особенности учета, виде номенклатуры и остатке
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(Форма) Экспорт
	
	ВведеныОпорныеДанные = Форма.ОпорныеДанные.Количество() > 0;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТекущийТорговыйОбъект") Тогда
		ТорговыйОбъект = Форма.ТекущийТорговыйОбъект;
	Иначе
		ТорговыйОбъект = Форма.Объект.ТорговыйОбъект;
	КонецЕсли;
	
	ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "РозничныйВидЦены") Тогда
		ВидЦены = Форма.РозничныйВидЦены;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) И Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговыйОбъект, "РозничныйВидЦен");
	КонецЕсли;
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ИсходныеДанные.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));

	Если ВведеныОпорныеДанные И ЗначениеЗаполнено(ВидЦены) Тогда
	
		Для Каждого Запись Из Форма.ОпорныеДанные Цикл
			
			Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
				ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), Запись);
			КонецЕсли;
			
		КонецЦикла;
		ИсходныеДанные.Свернуть("Номенклатура,Характеристика");
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Склад,
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
		|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
		|	И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Склад
		|ПОМЕСТИТЬ ТаблицаСклады
		|ИЗ
		|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
		|ГДЕ
		|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
		|ГДЕ
		|	(ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
		|			ИЛИ ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК Упаковка,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ втЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			(Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						втНоменклатура.Номенклатура КАК Номенклатура,
		|						втНоменклатура.Характеристика КАК Характеристика
		|					ИЗ
		|						Товары КАК втНоменклатура)
		|				И ВидЦен = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваров.Характеристика КАК Характеристика,
		|	СУММА(ОстаткиТоваров.Количество) КАК Количество
		|ПОМЕСТИТЬ втОстаткиТоваров
		|ИЗ
		|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
		|ГДЕ
		|	ОстаткиТоваров.СтруктурнаяЕдиница В
		|			(ВЫБРАТЬ
		|				ТаблицаСклады.Склад КАК Склад
		|			ИЗ
		|				ТаблицаСклады КАК ТаблицаСклады)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
		|	ВЫБОР
		|		КОГДА НЕ СпрНоменклатура.ВидАлкогольнойПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
		|				И СпрНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
		|		ИНАЧЕ СпрНоменклатура.ВидПродукцииИС
		|	КОНЕЦ КАК ОсобенностьУчета,
		|	СпрНоменклатура.КодТРУ КАК КодТРУ,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(втЦеныНоменклатуры.Упаковка, СпрНоменклатура.ЕдиницаИзмерения) КАК Упаковка,
		|	ЕСТЬNULL(втЦеныНоменклатуры.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(втОстаткиТоваров.Количество, 0) КАК Доступно,
		|	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.ЕдиницаИзмерения) КАК ПредставлениеЕдиницыИзмерения
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
		|		ПО Товары.Номенклатура = втЦеныНоменклатуры.Номенклатура
		|			И Товары.Характеристика = втЦеныНоменклатуры.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиТоваров КАК втОстаткиТоваров
		|		ПО Товары.Номенклатура = втОстаткиТоваров.Номенклатура
		|			И Товары.Характеристика = втОстаткиТоваров.Характеристика");
		
		Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ТаблицаТовары", ИсходныеДанные);
		Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Форма.ОпорныеДанные Цикл
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
			
			Результат = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
			
			Если Результат.Количество() > 0 Тогда
				
				Для Каждого Элемент Из Результат Цикл
					ЗаполнитьЗначенияСвойств(Строка, Элемент);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//  Заполняет исходные данные для формы элемента палитры избранных товаров по данным подбора.
//
// Параметры:
//  ИсходныеДанные - Произвольный - исходные данные подбора номенклатуры.
//  Результат - ТаблицаЗначений:
//		* Номенклатура - ОпределяемыйТип.НоменклатураРМК.
//		* Характеристика - ОпределяемыйТип.ХарактеристикаРМК.
//
Процедура ЗаполнитьЗначенияПодбораДляПалитры(ИсходныеДанные, Результат) Экспорт
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсходныеДанные, "АдресКорзиныВХранилище") Тогда
		
			ВыбранноеЗначение = ИсходныеДанные.АдресКорзиныВХранилище;
		
			Результат.Очистить();
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И ЭтоАдресВременногоХранилища(ВыбранноеЗначение) Тогда
				
				ДанныеИзВременногоХранилища = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
				
				Если ТипЗнч(ДанныеИзВременногоХранилища) = Тип("ТаблицаЗначений") Тогда
					
					Для Каждого Позиция Из ДанныеИзВременногоХранилища Цикл
						ЗаполнитьЗначенияСвойств(Результат.Добавить(), Позиция);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Обновляет рабочие места касс ККМ, отличные от текущего рабочего места 
//
Процедура УстановитьТекущееРабочееМестоКассамККМ() Экспорт
	Возврат;
КонецПроцедуры

// Выполняет конвертацию настроек РМК в настройки нового РМК
//
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложение - общая форма настройки рабочего места кассира
//
Процедура КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект) Экспорт
	
	АктуализироватьНастройкиРМК();
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
	
	ИдентификаторРабочегоМеста = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	Запрос.УстановитьПараметр("РабочееМесто", ИдентификаторРабочегоМеста);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭтотОбъект.Параметры.НастройкаРабочегоМеста = ?(Выборка.Следующий() И Выборка.Количество() > 1,
		Неопределено,
		Выборка.Ссылка);
	
КонецПроцедуры

// Позволяет реализовать дополнительную логику заполнения подключаемого оборудования при обновлении
//  
// Параметры:
//  СсылкаПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование 
//
Процедура ОбновитьСправочникПодключаемогоОборудования(СсылкаПодключаемоеОборудование) Экспорт
КонецПроцедуры

// Настройка элементов формы "Настройки рабочего места кассира".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ПереопределитьНастройкиРМК(Форма) Экспорт
	
	ЗаполнитьПрефиксыВесовогоТовара(Форма);
	НастроитьГруппуСинхронизацияДанных(Форма);
	НастроитьИспользованиеСервераЛояльности(Форма);
	НастроитьГруппуШаблоныЧеков(Форма);
	НастроитьГруппуЗапретыПродаж(Форма);
	НастроитьСписокВыбораНоменклатурыБыстрыхТоваров(Форма);
	НастроитьОтборКассККМ(Форма);
	НастроитьГруппуРаспределенияПродаж(Форма);
	НастроитьИспользованиеРежимаСкупки(Форма);
	НастроитьГруппуSMSПодтверждения(Форма);
	НастроитьГруппуШаблоныШтрихкодов(Форма);
	НастроитьТочностьОкругления(Форма);
	НастроитьГруппуРучнойВыборСкладаИЯчейки(Форма);
	НастроитьВариантыЗаполнения(Форма);
	ЗаполнитьТекстПодсказкиНастройкиВыдачиНаличных(Форма);
	АктуализироватьВидимостьЭлементовНастроек(Форма);
	НастроитьГруппуЗаказы(Форма);
	
КонецПроцедуры

// Процедура заполняет данные для работы рабочего места кассира.
// Список параметров: Текущий магазин, розничный вид цен, цена включает НДС, использование подключаемого оборудования,
// использование оплат платежными картами использование бонусных программ, настройка динамического списка товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьДанныеДляРМК(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ЧекКоррекции.Видимость = Истина;
	
	Если ЗначениеЗаполнено(Форма.ТорговыйОбъектДляВхода) Тогда
		Объект.ТорговыйОбъект = Форма.ТорговыйОбъектДляВхода;
	Иначе
		ОпределитьТекущийТорговыйОбъект(Объект.ТорговыйОбъект);
	КонецЕсли;
	
	Объект.ВидОперации = ОбщегоНазначенияРМК.ВидТекущейОперации();
	Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.ТорговыйОбъект, ТекущаяДатаСеанса());
	Форма.ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	Форма.ИспользоватьОплатуПлатежнымиКартами = ИспользоватьОплатуПлатежнымиКартами();
	ЭлектронныеСертификатыНСПКРМКПереопределяемый.ЗаполнитьВидОплатыПлатежнаяСистемаНСПК(Форма.ВидОплатыНСПК);
	ЗаполнитьПризнакИспользоватьОплатуСертификатамиНСПК(Форма.ИспользоватьОплатуСертификатамиНСПК);
	ЗаполнитьПризнакИспользоватьЗаменуТоваров(Форма.ИспользоватьЗаменуТоваров);
	Форма.ИспользоватьЗапретПродаж = ИспользоватьЗапретыПродажПоДням();
	
	Форма.ИспользоватьАвтоматическиеСкидки = ИспользуютсяАвтоматическиеСкидки();
	Форма.ПечататьКороткийСлипЧек = ОбщегоНазначенияРМК.ФормироватьИнтегрированныйСлипЧек();
	ПрограммноСоздатьРеквизитыФормы(Форма);
	
	ЗаполнитьРозничныйВидЦены(Форма);
	ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Форма.ИспользоватьСерверЛояльностиПолучательДанных);
	НастроитьДинамическийСписокТоваров(Форма);
	НастроитьИспользованиеПродажПоЗаказам(Форма);
	НастроитьИспользованиеБезналичныхПлатежей(Форма);
	НастроитьИспользованиеРасчетовСКлиентами(Форма);
	НастроитьВидимостьВыбораМагазина(Форма);
	ЗаполнитьКэшРаспределенияПродаж(Форма);
	ОпределитьЗапускПодАдминистратором(Форма);
	ЗаполнитьСтавкиНДСДляЧекаКоррекции(Форма);
	НастроитьВидимостьВыбораКонтрагента(Форма);
	ОпределитьЗаполненностьФизЛицаТекущегоПользователя(Форма.ФизЛицоПользователяЗаполнено);
	
	НастройкиСканирования = ИнтеграцияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	Если НЕ НастройкиСканирования = Неопределено И НастройкиСканирования.Свойство("УчитыватьМРЦ") Тогда
		Форма.УчитыватьМРЦ = НастройкиСканирования.УчитыватьМРЦ;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса для видов оплат.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВидовОплат() Экспорт
	
	ТекстЗапроса ="";
	Возврат ТекстЗапроса;

КонецФункции

// Определеяет значение налогообложения НДС для текущей организации.
//
// Параметры:
//  НалогообложениеНДС - ОпределяемыйТип.НалогообложениеНДСРМК - налогообложение НДС для организации.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьСНОНДСДляОрганизации(НалогообложениеНДС, Форма) Экспорт
	
	НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Форма.Объект.Организация);
	
КонецПроцедуры

// Определеяет значение налогообложения ККТ для организации.
//
// Параметры:
//  НалогообложениеККТ - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - налогообложение ККТ для организации.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  Дата - ДатаВремя - (необязательный).
//
Процедура ЗаполнитьСНОККТДляОрганизации(НалогообложениеККТ, Форма, ТекущаяСтрока, Дата) Экспорт
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	Дата = ?(Дата = '00010101', ТекущаяДата, Дата);
	Организация = ?(ТекущаяСтрока = Неопределено, Форма.Объект.Организация, ТекущаяСтрока.Организация);
	СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Организация, Форма.Объект.ТорговыйОбъект, Дата);
	
	НалогообложениеККТ = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		Организация,
		Форма.Объект.ТорговыйОбъект,
		Дата,
		СпециальныйНалоговыйРежим);
	
КонецПроцедуры

// Определяет значение системы налогообложения организации на указанную дату.
//
//  Параметры:
//   Организация - ОпределяемыйТип.ОрганизацияРМК - организация для которой нужно определить СНО.
//   Дата - Дата - дата на которую нужно определить тип СНО.
//   СНОККТ - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - значение системы налогообложения ККТ.
//
Процедура ОпределитьСНОККТДляОрганизации(Организация, Дата, СНОККТ) Экспорт
КонецПроцедуры

// Процедура заполняет системы налогообложения в чеке ККМ.
//
// Параметры:
//  ЧекККМСсылка - ДокументСсылка.ЧекККМ - документ, в котором нужно заполнить СНО перед записью.
//  СтруктураПараметров - Структура/Неопределено - параметры для выполнения процедуры.
//
Процедура ЗаполнитьСНОВЧекККМ(ЧекККМСсылка, СтруктураПараметров = Неопределено) Экспорт
	
	ЧекККМСсылка.НалогообложениеНДС = СтруктураПараметров.СистемаНалогообложения;
	
КонецПроцедуры

// Возвращает текущую кассовую смену.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - касса ККМ, для которой нужно определить кассовую смену.
//
// Возвращаемое значение:
//  ДокументСсылка.КассоваяСмена - ссылка на документ "Кассовая смена".
//
Функция ТекущаяКассоваяСмена(КассаККМ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.КассаККМ = &КассаККМ
	|	И НЕ КассоваяСмена.ПометкаУдаления
	|	И КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)");
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	КассоваяСмена = Документы.КассоваяСмена.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КассоваяСмена = Выборка.КассоваяСмена;
	КонецЕсли;
	
	Возврат КассоваяСмена;
	
КонецФункции


// Процедура фомирует запрос и его параметры для получения чеков при закрытии смены.
//
// Параметры:
//  Запрос - Новый Запрос - объект запрос.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура СформироватьЗапросЧековККМДляЗакрытияСмены(Запрос, Форма) Экспорт
	
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	Док.Ссылка КАК Ссылка
	//|ИЗ
	//|	Документ.ЧекККМ КАК Док
	//|ГДЕ
	//|	Док.КассаККМ = &КассаККМ
	//|	И Док.Проведен
	//|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	//|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	//|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)";
	//
	//Запрос.УстановитьПараметр("КассаККМ", Форма.Объект.КассаККМ);
	
КонецПроцедуры

// Возвращает признак нужно ли удалять чеки при закрытии смены.
//
// Возвращаемое значение:
//  Булево - нужно удалять чеки при закрытии смены.
//
Функция УдалятьЧекиПриЗакрытииСмены() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Процедура фомирует запрос и его параметры для получения чеков для удаления при закрытии смены.
//
// Параметры:
//  Запрос - Новый Запрос - объект запрос.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура СформироватьЗапросЧековККМДляУдаления(Запрос, Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура создает отложенный документ "Чек ККМ".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекСоздан - Булево - признак, того, что создан отложенный чек.
//
Процедура СоздатьОтложенныйЧек(Форма, ЧекСоздан) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Объект.ВидОперации = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	
	Если ЗначениеЗаполнено(Форма.ОтложенныйЧек) 
		И ОбщегоНазначения.СсылкаСуществует(Форма.ОтложенныйЧек) Тогда
		
		ЧекККМОбъект = Форма.ОтложенныйЧек.ПолучитьОбъект();
		Если Не Форма.ОтложенныйЧекПолностьюОплачен Тогда
			ЧекККМОбъект.Запасы.Очистить();
		КонецЕсли;
		
	Иначе
		
		Если Не ЭтоВозврат Тогда
			ЧекККМОбъект = Документы.ЧекККМ.СоздатьДокумент();
		Иначе
			ЧекККМОбъект = Документы.ЧекККМВозврат.СоздатьДокумент();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ОтложенныйЧек) Тогда
			ЧекККМОбъект.УстановитьСсылкуНового(Форма.ОтложенныйЧек);
		КонецЕсли;
		
	КонецЕсли;

	Если Не ЭтоВозврат Тогда
		ЧекККМОбъект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	КонецЕсли;
	ЧекККМОбъект.БезналичнаяОплата.Очистить();
	ЧекККМОбъект.Предоплата.Очистить();
	ЧекККМОбъект.БонусныеБаллыКНачислению.Очистить();
	ЧекККМОбъект.СкидкиНаценки.Очистить();
	
	Если ЧекККМОбъект.Проведен Тогда
		Попытка
			ЧекККМОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при попытке отложить чек.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЧекККМОбъект, Объект);
	ЧекККМОбъект.Заказ = Объект.ЗаказПокупателя;
	
	ДанныеКассаККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаККМ,
		"ВалютаДенежныхСредств, Подразделение, СтруктурнаяЕдиница");
	
	ЧекККМОбъект.СтруктурнаяЕдиница = ДанныеКассаККМ.СтруктурнаяЕдиница;
	ЧекККМОбъект.Дата = ТекущаяДатаСеанса();
	ЧекККМОбъект.Автор = Объект.ПользовательБД;
	ЧекККМОбъект.Ответственный = Объект.Кассир;
	ЧекККМОбъект.СуммаВключаетНДС = Объект.ЦенаВключаетНДС;
	ЧекККМОбъект.ВидЦен = Форма.РозничныйВидЦены;
	ЧекККМОбъект.НДСВключатьВСтоимость = Истина;
	ЧекККМОбъект.Комментарий = Форма.КомментарийКЧеку;
	
	ЧекККМОбъект.ВалютаДокумента = ДанныеКассаККМ.ВалютаДенежныхСредств;
	ПараметрыКурсаВалют = Новый Структура("Валюта", ЧекККМОбъект.ВалютаДокумента);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ЧекККМОбъект.Дата, ПараметрыКурсаВалют);
	ЧекККМОбъект.Курс = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Курс);
	ЧекККМОбъект.Кратность = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Кратность);
	
	ЧекККМОбъект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(ЧекККМОбъект.Организация,
		ЧекККМОбъект.СтруктурнаяЕдиница,
		ЧекККМОбъект.Дата);
		
	Если ЧекККМОбъект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН И Не ЭтоВозврат Тогда
		ЗаполнитьПатент(ЧекККМОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧекККМОбъект.ДисконтнаяКарта) И Не ЗначениеЗаполнено(ЧекККМОбъект.Контрагент) Тогда
		ЧекККМОбъект.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМОбъект.ДисконтнаяКарта, "ВладелецКарты");
	КонецЕсли;
	
	ЧекККМОбъект.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		ЧекККМОбъект.Ссылка, ЧекККМОбъект.Контрагент, ЧекККМОбъект.Организация);
	
	ЧекККМОбъект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ЧекККМОбъект.Организация,
		ЧекККМОбъект.СтруктурнаяЕдиница,
		ЧекККМОбъект.Дата);
		
	Если ТипЗнч(ЧекККМОбъект) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
		Если ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
			ЧекККМОбъект.ЧекККМ = Форма.ЧекККМПродажа;
		КонецЕсли;
	КонецЕсли;
		
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ЧекККМОбъект.КассаККМ);
	ЧекККМОбъект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
	ЧекККМОбъект.Подразделение = ДанныеКассаККМ.Подразделение;
	Если Не ЗначениеЗаполнено(ЧекККМОбъект.Подразделение) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.ПользовательБД,
			"ОсновноеПодразделение");
		ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки),
			ЗначениеНастройки,
			Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		ЧекККМОбъект.Подразделение = ОсновноеПодразделение;
	КонецЕсли;
	
	ЧекККМОбъект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ЧекККМОбъект.ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки(
		"ПоложениеЗаказаПокупателяВДокументахОтгрузки");
	Если Не ЗначениеЗаполнено(ЧекККМОбъект.ПоложениеЗаказаПокупателя) Тогда
		ЧекККМОбъект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	
	ЗаполнитьАналитикуХозОперации(ЧекККМОбъект);
	ЗаполнитьТабличныеЧастиЧекККМ(Форма, Объект, ЧекККМОбъект);
	// Кэшированые значения скидок наценок
	ЧекККМОбъект.СкидкиНаценки.Загрузить(Форма.ТаблицаСкидкиНаценки.Выгрузить());
	ЧекККМОбъект.БонусныеБаллыКНачислению.Загрузить(Форма.ТаблицаБонусныеБаллы.Выгрузить());
	
	ЧекККМОбъект.СуммаДокумента = ЧекККМОбъект.Запасы.Итог("Сумма");
	
	Если Не ЧекККМОбъект.НДСВключатьВСтоимость Тогда
		ЧекККМОбъект.СуммаДокумента = ЧекККМОбъект.СуммаДокумента + Объект.Запасы.Итог("СуммаНДС");
	КонецЕсли;

	Если Объект.Оплата.Количество() 
		И ИнтеграцияСПлатежнымиСистемамиУНФ.ВидОплатыПлатежнойСистемы(Объект.Оплата[0].ВидОплаты) Тогда
		ЧекККМОбъект.Оплачивается = Истина;
	КонецЕсли;
		
	Форма.ОтложенныйЧек = Документы.ЧекККМ.ПустаяСсылка();
	
	Попытка
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЧекСоздан = Истина;
	Исключение
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Ошибка при попытке отложить чек.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// По переданным параметрам вида операции определяет текущий вид операции.
//
// Параметры:
//  ПараметрыВидаОперации - Структура - см.ОбщегоНазначенияРМККлиентСервер.ПараметрыВидаОперации().
//
Процедура ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации) Экспорт
	
	Если ПараметрыВидаОперации.ЭтоВозврат Тогда
		ВидОперации = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	Иначе
		ВидОперации = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	КонецЕсли;
	
	ПараметрыВидаОперации.ВидОперации = ВидОперации;
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией продажи.
//
// Параметры:
//  ЭтоОперацияПродажи - Булево - признак, который говорит, что текущий вид операции это продажа.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперации(ЭтоОперацияПродажи, ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
		ЭтоОперацияПродажи = Ложь;
	Иначе
		ЭтоОперацияПродажи = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет количество отложенных чеков. Если количество отложенных чеков = 1, то заполняет
// реквизит параметр "ОтложенныйЧек" ссылкой на чекККМ.
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры для выполнения запроса.
//  ОтложенныйЧек - ОпределяемыйТип.ЧекККМРМК - реквизит формы, для хранения текущего отложенного чека.
//  КоличествоЧеков - Число - количество чеков ККМ со статусом "Отложен".
//
Процедура ЗаполнитьКоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек, КоличествоЧеков) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад
	|ПОМЕСТИТЬ ТаблицаСклады
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
	|ГДЕ
	|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
	|ГДЕ
	|	(ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ИЛИ ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЧекККМ.Ссылка КАК ЧекККМ
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументЧекККМ
	|ГДЕ
	|	НЕ ДокументЧекККМ.ПометкаУдаления
	|	И ДокументЧекККМ.КассаККМ В(&МассивКассККМ)
	|	И ДокументЧекККМ.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ТаблицаСклады.Склад КАК СтруктурнаяЕдиница
	|			ИЗ
	|				ТаблицаСклады КАК ТаблицаСклады)
	|	И ДокументЧекККМ.Организация В(&МассивОрганизаций)
	|	И ДокументЧекККМ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложен))
	|	И ДокументЧекККМ.КассоваяСмена = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.ПометкаУдаления
	|	И ЧекККМВозврат.НомерЧекаККМ = 0
	|	И ЧекККМВозврат.КассаККМ В(&МассивКассККМ)
	|	И ЧекККМВозврат.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ТаблицаСклады.Склад КАК СтруктурнаяЕдиница
	|			ИЗ
	|				ТаблицаСклады КАК ТаблицаСклады)
	|	И ЧекККМВозврат.Организация В(&МассивОрганизаций)
	|	И ЧекККМВозврат.КассоваяСмена = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЧекККМ.Ссылка КАК ЧекККМ
	|ПОМЕСТИТЬ ТаблицаЧековТекущейСмены
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументЧекККМ
	|ГДЕ
	|	НЕ ДокументЧекККМ.ПометкаУдаления
	|	И ДокументЧекККМ.КассаККМ В(&МассивКассККМ)
	|	И ДокументЧекККМ.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ТаблицаСклады.Склад КАК СтруктурнаяЕдиница
	|			ИЗ
	|				ТаблицаСклады КАК ТаблицаСклады)
	|	И ДокументЧекККМ.Организация В(&МассивОрганизаций)
	|	И ДокументЧекККМ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложен))
	|	И ЕСТЬNULL(ДокументЧекККМ.КассоваяСмена.СтатусКассовойСмены, ЗНАЧЕНИЕ(Перечисление.СтатусыОтчетаОРозничныхПродажах.ПустаяСсылка)) = &СтатусОткрытойСмены
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.ПометкаУдаления  
	|	И ЧекККМВозврат.НомерЧекаККМ = 0
	|	И ЧекККМВозврат.КассаККМ В(&МассивКассККМ)
	|	И ЧекККМВозврат.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ТаблицаСклады.Склад КАК СтруктурнаяЕдиница
	|			ИЗ
	|				ТаблицаСклады КАК ТаблицаСклады)
	|	И ЧекККМВозврат.Организация В(&МассивОрганизаций)
	|	И ЕСТЬNULL(ЧекККМВозврат.КассоваяСмена.СтатусКассовойСмены, ЗНАЧЕНИЕ(Перечисление.СтатусыОтчетаОРозничныхПродажах.ПустаяСсылка)) = &СтатусОткрытойСмены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.КоличествоЧеков) КАК КоличествоЧеков,
	|	СУММА(ВложенныйЗапрос.КоличествоЧековТекущейСмены) КАК КоличествоЧековТекущейСмены
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(ТаблицаЧеков.ЧекККМ) КАК КоличествоЧеков,
	|		0 КАК КоличествоЧековТекущейСмены
	|	ИЗ
	|		ТаблицаЧеков КАК ТаблицаЧеков
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		КОЛИЧЕСТВО(ТаблицаЧеков.ЧекККМ)
	|	ИЗ
	|		ТаблицаЧековТекущейСмены КАК ТаблицаЧеков) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЧеков.ЧекККМ КАК ЧекККМ
	|ИЗ
	|	ТаблицаЧеков КАК ТаблицаЧеков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЧеков.ЧекККМ КАК ЧекККМ
	|ИЗ
	|	ТаблицаЧековТекущейСмены КАК ТаблицаЧеков");
	
	Запрос.УстановитьПараметр("МассивКассККМ", СтруктураПараметров.МассивКассККМ);
	Запрос.УстановитьПараметр("МассивОрганизаций", СтруктураПараметров.МассивОрганизаций);
	Запрос.УстановитьПараметр("ТорговыйОбъект", СтруктураПараметров.ТорговыйОбъект);
	Запрос.УстановитьПараметр("СтатусОткрытойСмены", Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта);	
	
	МассивРезультат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	ТаблицаКоличества = МассивРезультат[4].Выгрузить();
	КоличествоЧековДругихСмен = ТаблицаКоличества[0].КоличествоЧеков;
	КоличествоЧековТекущейСмены = ТаблицаКоличества[0].КоличествоЧековТекущейСмены;
	ТаблицаЧеков = Неопределено;
	Если КоличествоЧековТекущейСмены > 0 Тогда
		ТаблицаЧеков = МассивРезультат[6].Выгрузить();
	Иначе
		ТаблицаЧеков = МассивРезультат[5].Выгрузить();
	КонецЕсли;
	
	КоличествоЧеков = КоличествоЧековДругихСмен + КоличествоЧековТекущейСмены;
	Если КоличествоЧеков = 1 И КоличествоЧековТекущейСмены = 1 Тогда
		// Если всего отложен только один чек и только в текущей смене, то сразу его вернем в работу
		// Если есть и другие отложенные чеки, или только один отложенный из другой смены то откроем окно выбора чека
		ОтложенныйЧек = ТаблицаЧеков[0].ЧекККМ;
	КонецЕсли;
	
КонецПроцедуры

// Формирует и записывает документ "Чек ККМ" перед пробитием на ККТ.
// Ссылку на записанный документ необходимо присвоить реквизиту формы "ЧекККМВОбработке"
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Отказ - Булево - признак наличия ошибки при записи документа.
//  ТекстОшибки - Строка - текст ошибки.
//  СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//
Процедура ЗаписатьЧекККМПередПробитием(Форма, Отказ, ТекстОшибки, СистемаНалогообложения) Экспорт
	
	Если Форма.ЭтоЧекКоррекции Тогда
		Форма.ЧекККМВОбработке = ЗаписатьЧекККМПередПробитиемКоррекции(Форма, Отказ, ТекстОшибки, СистемаНалогообложения);
		Возврат;
	КонецЕсли;
	
	ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Форма.Объект.ВидОперации);
	
	Если ЭтоПродажа Тогда
		ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
	Иначе
		ЧекККМ = Документы.ЧекККМВозврат.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Форма.ЧекККМВОбработке = ЧекККМ;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ЧекККМВОбработке)
		И ОбщегоНазначения.СсылкаСуществует(Форма.ЧекККМВОбработке) Тогда
		
		ТекущийЧек = Форма.ЧекККМВОбработке.ПолучитьОбъект();
		
	ИначеЕсли ЗначениеЗаполнено(Форма.ОтложенныйЧек)
		И ОбщегоНазначения.СсылкаСуществует(Форма.ОтложенныйЧек) Тогда
		
		ТекущийЧек = Форма.ОтложенныйЧек.ПолучитьОбъект();
		
	Иначе
		
		Если ЭтоПродажа Тогда
			ТекущийЧек = Документы.ЧекККМ.СоздатьДокумент();
		Иначе
			ТекущийЧек = Документы.ЧекККМВозврат.СоздатьДокумент();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ЧекККМВОбработке) Тогда
			ТекущийЧек.УстановитьСсылкуНового(Форма.ЧекККМВОбработке);
		ИначеЕсли ЗначениеЗаполнено(Форма.ОтложенныйЧек) Тогда
			ТекущийЧек.УстановитьСсылкуНового(Форма.ОтложенныйЧек);
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ТекущийЧек.Заблокировать();
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,
			ТекущийЧек,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Форма.ЧекККМВОбработке = ЧекККМ;
		Возврат;
	КонецПопытки;
	
	ДанныеКассаККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаККМ,
		"ВалютаДенежныхСредств, Подразделение, СтруктурнаяЕдиница");
	
	Если Не Форма.ОтложенныйЧекПолностьюОплачен Тогда
		ТекущийЧек.Запасы.Очистить();
	КонецЕсли;
	ТекущийЧек.БезналичнаяОплата.Очистить();
	ТекущийЧек.Предоплата.Очистить();
	ТекущийЧек.СкидкиНаценки.Очистить();
	ТекущийЧек.АкцизныеМарки.Очистить();
	ТекущийЧек.СерииНоменклатуры.Очистить();
	ТекущийЧек.ДобавленныеНаборы.Очистить();
	ТекущийЧек.БонусныеБаллыКНачислению.Очистить();
	
	ТоварыИОплаты = ДанныеЧекаПоСистемеНалогообложения(Форма, СистемаНалогообложения, Форма.ОжидаемоеКоличествоЧеков);
	
	ТекущийЧек.Дата = ТекущаяДатаСеанса();
	
	Если Не ЗначениеЗаполнено(ТекущийЧек.ИдентификаторЧекаВОчереди) Тогда
		
		Идентификатор = Новый УникальныйИдентификатор;
		ТекущийЧек.ИдентификаторЧекаВОчереди = XMLСтрока(Идентификатор);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущийЧек, Объект);
	ДописатьВЧекКартуЛояльности(ТекущийЧек, Форма.ПараметрыКартыЛояльности);
	
	ТекущийЧек.СтруктурнаяЕдиница = ДанныеКассаККМ.СтруктурнаяЕдиница;
	ТекущийЧек.Автор = Объект.ПользовательБД;
	ТекущийЧек.Ответственный = Объект.Кассир;
	ТекущийЧек.СуммаВключаетНДС = Объект.ЦенаВключаетНДС;
	ТекущийЧек.ВидЦен = Форма.РозничныйВидЦены;
	ТекущийЧек.ВалютаДокумента = ДанныеКассаККМ.ВалютаДенежныхСредств;
	ТекущийЧек.НДСВключатьВСтоимость = Истина;
	ТекущийЧек.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(ТекущийЧек.Организация,
		ТекущийЧек.СтруктурнаяЕдиница,
		ТекущийЧек.Дата);
	ТекущийЧек.Комментарий = Форма.КомментарийКЧеку;
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		ТекущийЧек.Заказ = Объект.ЗаказПокупателя;
	КонецЕсли;
	
	Если ТоварыИОплаты.Товары.Количество() > 0 Тогда
		
		СНОККТ = ТоварыИОплаты.Товары[0].СистемаНалогообложения;
		Если СНОККТ = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД Тогда
			СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕНВД;
		ИначеЕсли СНОККТ = Перечисления.ТипыСистемНалогообложенияККТ.Патент Тогда
			СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН;
		ИначеЕсли СНОККТ = Перечисления.ТипыСистемНалогообложенияККТ.ЕСН Тогда
			СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕСХН;
		Иначе
			СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.НеПрименяется;
		КонецЕсли;
		
		ТекущийЧек.СпециальныйНалоговыйРежим = СпециальныйНалоговыйРежим;
		
	КонецЕсли;
		
	Если ТекущийЧек.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН И ЭтоПродажа Тогда
		ЗаполнитьПатент(ТекущийЧек);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийЧек.ДисконтнаяКарта) И ОбщегоНазначения.СсылкаСуществует(ТекущийЧек.ДисконтнаяКарта)
		И Не ЗначениеЗаполнено(ТекущийЧек.Контрагент) Тогда
		ТекущийЧек.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийЧек.ДисконтнаяКарта, "ВладелецКарты");
	КонецЕсли;
	
	ТекущийЧек.Договор = Справочники.ДоговорыКонтрагентов.ПоДокументуКонтрагентуОрганизацииИВидуОперации(
		ТекущийЧек.Ссылка, ТекущийЧек.Контрагент, ТекущийЧек.Организация);
	ТекущийЧек.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	
	ТекущийЧек.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ТекущийЧек.Организация,
		ТекущийЧек.СтруктурнаяЕдиница,
		ТекущийЧек.Дата);
	
	Если ТипЗнч(ТекущийЧек) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
		Если ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
			ТекущийЧек.ЧекККМ = Форма.ЧекККМПродажа;
		КонецЕсли;
		ЗаполнитьПатентВЧекеНаВозврат(ТекущийЧек);
		ТекущийЧек.ПодписьРуководителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация,
			"ПодписьРуководителя");
	КонецЕсли;
	
	ПараметрыКурсаВалют = Новый Структура("Валюта", ТекущийЧек.ВалютаДокумента);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущийЧек.Дата, ПараметрыКурсаВалют);
	ТекущийЧек.Курс = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Курс);
	ТекущийЧек.Кратность = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Кратность);
	
	ТекущийЧек.Подразделение = ДанныеКассаККМ.Подразделение;
	Если Не ЗначениеЗаполнено(ТекущийЧек.Подразделение) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Объект.ПользовательБД,
			"ОсновноеПодразделение");
		ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки),
			ЗначениеНастройки,
			Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		ТекущийЧек.Подразделение = ОсновноеПодразделение;
	КонецЕсли;
	
	ИспользоватьВыборСклада = Форма.ИспользоватьВыборСкладаПриПродаже;
	ЗаполнитьПоложениеРеквизитов(ТекущийЧек, ТоварыИОплаты, ИспользоватьВыборСклада);
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ТекущийЧек.КассаККМ);
	ТекущийЧек.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;

	Если Не Форма.ПечататьБумажныйЧек Тогда
		Если ЗначениеЗаполнено(Форма.ОтправкаЧекаПочта) Тогда
			ТекущийЧек.АдресЭП = Форма.ОтправкаЧекаПочта;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.ОтправкаЧекаТелефон) И НЕ ЗначениеЗаполнено(Форма.ОтправкаЧекаПочта) Тогда
			НомерТелефонаБезПробелов = СтрШаблон("%1%2", ИнтерфейсРМКСлужебныйКлиентСервер.ТелефонныйКодСтраны(),
				ИнтерфейсРМКСлужебныйКлиентСервер.ТелефонБезКодаСтраны(Форма.ОтправкаЧекаТелефон));
			ТелефонВФорматеМаски = СтрШаблон("%1(%2)%3-%4-%5",
				Лев(НомерТелефонаБезПробелов,2),
				Сред(НомерТелефонаБезПробелов,3,3),
				Сред(НомерТелефонаБезПробелов,6,3),
				Сред(НомерТелефонаБезПробелов,9,2),
				Сред(НомерТелефонаБезПробелов,11,2));
			ТекущийЧек.Телефон = ТелефонВФорматеМаски;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьАналитикуХозОперации(ТекущийЧек);
	ЗаполнитьТабличныеЧастиЧекККМ(Форма, ТоварыИОплаты, ТекущийЧек);
	СкорректироватьСуммуНДСДляСворачиванияСтрокВЧеке(Форма, ТекущийЧек.Запасы);
	ПроверитьИЗаполнитьАналитикуРасчетаСКонтрагентом(Форма, ТекущийЧек.Контрагент);
	
	СуммаТоваров = ТекущийЧек.Запасы.Итог("Всего");
	Если Не ТекущийЧек.ОперацияСДенежнымиСредствами Тогда
		ТекущийЧек.СуммаДокумента = СуммаТоваров;
	Иначе
		Если Форма.ПриемАванса Тогда
			ТекущийЧек.СуммаДокумента = Объект.Товары.Итог("Сумма");
		ИначеЕсли Форма.ПриемАвансаПоЗаказу Тогда
			ТекущийЧек.СуммаДокумента = ТекущийЧек.СуммаДокумента - Форма.СуммаОплаченоВРассрочку;
		ИначеЕсли Форма.ЭтоОплатаРассрочки Тогда
			ТекущийЧек.СуммаДокумента = Форма.СуммаОстаткаДокументаРасчета - Форма.СуммаОплаченоВРассрочку;
		ИначеЕсли Не ЭтоПродажа И Не Форма.ЭтоВозвратАванса Тогда
			ТекущийЧек.СуммаДокумента = Объект.Товары.Итог("Сумма") - Форма.СуммаКОплате - Форма.СуммаОплаченоВРассрочку;
		ИначеЕсли Форма.ЭтоЗачетАванса И ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
			ТекущийЧек.СуммаДокумента = СуммаТоваров - Форма.СуммаОплаченоВРассрочку - Форма.СуммаОплаченоЗачетАванса;
		Иначе
			ТекущийЧек.СуммаДокумента = СуммаТоваров - Форма.СуммаОплаченоВРассрочку;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийЧек.НомерЧекаККМ = 1;
	
	Если Не ЭтоПродажа И ЗначениеЗаполнено(Форма.ЧекККМПродажа)
		И Не Форма.ЭтоВозвратАванса И Не ТекущийЧек.ОперацияСДенежнымиСредствами Тогда
		
		ТекущийЧек.ЧекККМ = Форма.ЧекККМПродажа;
		ПроверитьВозможностьВозвратаПоЧекуККМ(ТекущийЧек, Отказ, ТекстОшибки);
		
		Если Отказ Тогда
			Форма.ЧекККМВОбработке = ЧекККМ;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПродажа И Не ТекущийЧек.ОперацияСДенежнымиСредствами Тогда
		// ЕГАИС.
		ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
			ТекущийЧек.Организация, ТекущийЧек.СтруктурнаяЕдиница, ТекущийЧек.Дата);
		Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
			ИнтеграцияЕГАИСУНФ.ПроверитьЗаполнениеДокумента(ТекущийЧек, Отказ);
		КонецЕсли;
		
		// ИСМП.
		Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
			ИнтеграцияИСУНФ.ПроверитьЗаполнениеАкцизныхМарок(ТекущийЧек, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Форма.ЧекККМВОбработке = ЧекККМ;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ТекущийЧек) = Тип("ДокументОбъект.ЧекККМ") Тогда
		ТекущийЧек.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	КонецЕсли;
	
	Попытка
		ТекущийЧек.Записать(РежимЗаписи());
		Форма.ЧекККМВОбработке = ТекущийЧек.Ссылка;
	Исключение
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись документа ЧекККМ перед пробитием на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Заполняет данные для пробития на ККТ.
//
// Параметры:
//  ЧекККМВОбработке - ОпределяемыйТип.ЧекККМРМК - ссылка на документ печать, которого производится.
//  ДополнительныеПараметры - Структура:
//   *ЕстьПродукцияЕГАИС - Булево - признак наличия маркируемой алкогольной продукции.
//   *ПечататьБумажныйЧек - Булево - признак нужно печатать чек на ККТ или отправлять в эл.виде.
//   *СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//   *СворачиватьСтрокиПриПечатиЧека - Булево - признак нужно ли сворачивать маркируемые товары в чеке.
//   *ОсобенностиУчетаВозвращаемойМаркируемойПродукции - Список - значения особенностей учета товаров из чека,
//     по которым осуществляется возврат без марки.
//  ОбщиеПараметры - Массив - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//
Процедура ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры, ОбщиеПараметры) Экспорт
	
	Если ТипЗНЧ(ЧекККМВОбработке) = Тип("ДокументСсылка.ЧекККМКоррекции") Тогда 
		
		ИдентификаторУстройства = Неопределено;
		ОбщиеПараметры = Документы.ЧекККМКоррекции.ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке, ИдентификаторУстройства);
		
		Если ОбщиеПараметры.Свойство("ШаблонЧека") Тогда
			ОбщиеПараметры.Удалить("ШаблонЧека");
		КонецЕсли;
		
		ОбщиеПараметры.Вставить("ИдентификаторФискальнойЗаписи", XMLСтрока(ЧекККМВОбработке));
		ОбщиеПараметры.Вставить("СформироватьЧекКоррекцииСторно", Ложь);
		Если ДополнительныеПараметры.СворачиватьСтрокиПриПечатиЧека Тогда
			СвернутьСтрокиПриПечатиЧека(ОбщиеПараметры);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЕстьПродукцияЕГАИС = ДополнительныеПараметры.ЕстьПродукцияЕГАИС;
	ВариантЗаполненияМестаРасчетов = ДополнительныеПараметры.ВариантЗаполненияМестаРасчетов;
	ВариантЗаполненияКассира = ДополнительныеПараметры.ВариантЗаполненияКассира;
	
	ОбщиеПараметры = Документы.ЧекККМ.ПолучитьДанныеДляФискализации(ЧекККМВОбработке,
		ЕстьПродукцияЕГАИС,ВариантЗаполненияМестаРасчетов, ВариантЗаполненияКассира);
	ДополнительныеПараметры.ЕстьПродукцияЕГАИС = ЕстьПродукцияЕГАИС;
	
	ЗаполнитьШаблонЧека(ЧекККМВОбработке, ОбщиеПараметры);
	Если ДополнительныеПараметры.СворачиватьСтрокиПриПечатиЧека Тогда
		СвернутьСтрокиПриПечатиЧека(ОбщиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает ЧекККМ после пробития на ККИ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ПробитьЧекЗавершение(ВходящиеДанные, Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ВходящиеДанные.Свойство("Результат") Тогда
		
		// Чек в состоянии "Фискализируется".
		Если ВходящиеДанные.Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		УспешнаяФискализацияЧекаПродажиВПакетномРежиме = Ложь;
		
		Если ВходящиеДанные.Свойство("РезультатПакетнойОперации")
			И ЗначениеЗаполнено(ВходящиеДанные.РезультатПакетнойОперации)
			И ВходящиеДанные.РезультатПакетнойОперации.Свойство("РезультатФискализацииЧека")
			И ЗначениеЗаполнено(ВходящиеДанные.РезультатПакетнойОперации.РезультатФискализацииЧека)
			И ВходящиеДанные.РезультатПакетнойОперации.РезультатФискализацииЧека.Свойство("Результат") Тогда
				УспешнаяФискализацияЧекаПродажиВПакетномРежиме =
					ВходящиеДанные.РезультатПакетнойОперации.РезультатФискализацииЧека.Результат;
		КонецЕсли;
		
		// Чек в состоянии "Ошибка".
		Если Не ВходящиеДанные.Результат 
			И Не УспешнаяФискализацияЧекаПродажиВПакетномРежиме
			Тогда
		
			Если Не ВходящиеДанные.ЧекККМСсылка = Неопределено Тогда
				ЧекККМОбъект = ВходящиеДанные.ЧекККМСсылка.ПолучитьОбъект();
				
				ДокументЗаблокирован = Ложь;
				Попытка
					ЧекККМОбъект.Заблокировать();
					Если ТипЗнч(ВходящиеДанные.ЧекККМСсылка) = Тип("ДокументСсылка.ЧекККМКоррекции") Тогда
						ЧекККМОбъект.Оплата.Очистить();
					Иначе
						ЧекККМОбъект.БезналичнаяОплата.Очистить();
					КонецЕсли;
					ДокументЗаблокирован = Истина;
					Если ТипЗнч(ЧекККМОбъект) = Тип("ДокументОбъект.ЧекККМ") Тогда
						ЧекККМОбъект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;
					ИначеЕсли ТипЗнч(ЧекККМОбъект) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
						ЧекККМОбъект.НомерЧекаККМ = 0;
					КонецЕсли;
				Исключение
					ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(ТекстОшибки,
						УровеньЖурналаРегистрации.Ошибка,,
						ЧекККМОбъект,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				Если ДокументЗаблокирован Тогда
					ЧекККМОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВходящиеДанные.ЧекККМСсылка) = Тип("ДокументСсылка.ЧекККМКоррекции") Тогда
		
		ЧекККМСсылка = ВходящиеДанные.ЧекККМСсылка;
		ЭтоЧекНаВозврат = ЧекККМСсылка.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
		ОтборПоВидуОперации = Новый Структура("Возврат", ЭтоЧекНаВозврат);
		
		Если Форма.ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации).Количество() = 0
			И Форма.ОжидаемоеКоличествоЧеков > 0 Тогда
			
			УспешноПробитыйЧек = Форма.ПробитыеЧеки.Добавить();
			УспешноПробитыйЧек.ЧекККМ = ВходящиеДанные.ЧекККМСсылка;
			УспешноПробитыйЧек.СистемаНалогообложения = ЧекККМСсылка.СистемаНалогообложения;
			УспешноПробитыйЧек.Организация = ЧекККМСсылка.Организация;
			УспешноПробитыйЧек.Возврат = ЭтоЧекНаВозврат;
			
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЧекККМОбъект = ВходящиеДанные.ЧекККМСсылка.ПолучитьОбъект();
	
	Если ЧекККМОбъект.Запасы.Количество() > 0 Тогда
		
		Если Форма.ЭтоЗаменаТоваров Тогда
		
			ЭтоЧекНаВозврат = ТипЗнч(ЧекККМОбъект) = Тип("ДокументОбъект.ЧекККМВозврат");
			ОтборПоВидуОперации = Новый Структура("Возврат", ЭтоЧекНаВозврат);
			СистемаНалогообложенияПродажи = ОбщегоНазначенияРМК.СистемаНалогообложенияЧека(ЧекККМОбъект);
			
			Если Форма.ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации).Количество() = 0
				И Форма.ОжидаемоеКоличествоЧеков > 0 Тогда
				
				УспешноПробитыйЧек = Форма.ПробитыеЧеки.Добавить();
				УспешноПробитыйЧек.ЧекККМ = ВходящиеДанные.ЧекККМСсылка;
				УспешноПробитыйЧек.СистемаНалогообложения = СистемаНалогообложенияПродажи;
				УспешноПробитыйЧек.Возврат = ЭтоЧекНаВозврат;
				УспешноПробитыйЧек.Организация = ЧекККМОбъект.Организация;
				
			КонецЕсли;
			
		Иначе
			
			ОплатыКРаспределению = Объект.Оплата.Выгрузить();
			
			Для каждого СтрокаОплатыЧека Из ЧекККМОбъект.БезналичнаяОплата Цикл
				
				ОтборПоВидуОплаты = Новый Структура("ВидОплаты",СтрокаОплатыЧека.ВидОплаты);
				СтрокиОплатыКРаспределению = ОплатыКРаспределению.НайтиСтроки(ОтборПоВидуОплаты);
				
				Если СтрокиОплатыКРаспределению.Количество() > 0 Тогда
					СтрокиОплатыКРаспределению[0].Сумма = СтрокиОплатыКРаспределению[0].Сумма - СтрокаОплатыЧека.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			
			Объект.Оплата.Загрузить(ОплатыКРаспределению);
			
			СистемаНалогообложенияПродажи = ОбщегоНазначенияРМК.СистемаНалогообложенияЧека(ЧекККМОбъект);
			
			ОтборПоСистемеНалогообложения = Новый Структура("СистемаНалогообложения, Организация",
			СистемаНалогообложенияПродажи,
			ЧекККМОбъект.Организация);
			
			Если Форма.ПробитыеЧеки.НайтиСтроки(ОтборПоСистемеНалогообложения).Количество() = 0
				И Форма.ОжидаемоеКоличествоЧеков > 0 Тогда
				
				УспешноПробитыйЧек = Форма.ПробитыеЧеки.Добавить();
				УспешноПробитыйЧек.ЧекККМ = ВходящиеДанные.ЧекККМСсылка;
				УспешноПробитыйЧек.СистемаНалогообложения = СистемаНалогообложенияПродажи;
				УспешноПробитыйЧек.Организация = ЧекККМОбъект.Организация;
				УспешноПробитыйЧек.СуммаЧека = Форма.СуммаИтого;
				УспешноПробитыйЧек.ПринятоНаличными = Форма.СуммаОплаченоНал;
				УспешноПробитыйЧек.Сдача = Форма.Сдача;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для возврата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозврат(Форма) Экспорт
	
	НастроитьЗапросСписокЧеков(Форма);
	
	СтатусыЧеков = Новый Массив;
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.ТоварЗарезервирован);
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Пробит);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ТаблицаЧековККМ,
		"Статус",
		СтатусыЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка отложенных чеков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуОтложенныхЧековККМ(Форма) Экспорт
	
	Форма.ТаблицаЧековККМ.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Номер КАК Номер,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.КассоваяСмена КАК КассоваяСмена,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ЧекККМ.ДисконтнаяКарта КАК ДисконтнаяКарта
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ";
	
	НовыйЭлемент = Форма.Элементы.Добавить("КолонкаКассаККМ", Тип("ПолеФормы"), Форма.Элементы.ТаблицаЧековККМ); 
	НовыйЭлемент.ПутьКДанным = "ТаблицаЧековККМ.КассаККМ";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.КрупныйШрифтТекста,,,);
	НовыйЭлемент = Форма.Элементы.Добавить("КолонкаДисконтнаяКарта", Тип("ПолеФормы"), Форма.Элементы.ТаблицаЧековККМ); 
	НовыйЭлемент.ПутьКДанным = "ТаблицаЧековККМ.ДисконтнаяКарта";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.КрупныйШрифтТекста,,,);
	НовыйЭлемент = Форма.Элементы.Добавить("Ссылка", Тип("ПолеФормы"), Форма.Элементы.ТаблицаЧековККМ); 
	НовыйЭлемент.ПутьКДанным = "ТаблицаЧековККМ.Ссылка";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.Видимость = Ложь;
	Форма.ТаблицаЧековККМ.УстановитьОбязательноеИспользование("Ссылка", Истина);
	
	ВключатьОтложенныеЧекиВозврата = Истина;
	
	НастроитьЗапросСписокЧеков(Форма,, ВключатьОтложенныеЧекиВозврата);
	
	// Отключим фильтр в запросе по ККМ текущего рабочего места. Это условие сделаем отключаемым, на уровне отборов ДС
	ТекстЗапроса = Форма.ТаблицаЧековККМ.ТекстЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ДокументЧекККМ.КассаККМ В(&МассивКассККМ)", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ЧекККМВозврат.КассаККМ В(&МассивКассККМ)", "");
	
	СтатусыОтложенногоЧека = Новый Массив();
	СтатусыОтложенногоЧека.Добавить(Перечисления.СтатусыЧековККМ.ПустаяСсылка());
	СтатусыОтложенногоЧека.Добавить(Перечисления.СтатусыЧековККМ.Отложен);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ТаблицаЧековККМ,
		"Статус",
		СтатусыОтложенногоЧека,
		ВидСравненияКомпоновкиДанных.ВСписке);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ТаблицаЧековККМ,
		"ВозможноПродолжитьЧек",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ТаблицаЧековККМ,
		"СменаЗаполнена",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Открытая смена'"),
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ТаблицаЧековККМ,
		"ЭтоТекущаяКассаККМ",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Текущая касса'"),
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для повторной печати.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМДляПовторнойПечати(Форма) Экспорт

	ВключатьЧекиНаВозврат = Истина;
	
	НастроитьЗапросСписокЧеков(Форма, ВключатьЧекиНаВозврат);
	
	СтатусыЧеков = Новый Массив;
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Пробит);
	
	ОперацияПродажи =
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ЧекККМ");
	ОперацияВозврата =
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ЧекККМВозврат");
		
	ВидыОперацийЧеков = Новый Массив;
	ВидыОперацийЧеков.Добавить(ОперацияПродажи);
	ВидыОперацийЧеков.Добавить(ОперацияВозврата);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ТаблицаЧековККМ,
		"ХозяйственнаяОперация",
		ВидыОперацийЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке, Новый УникальныйИдентификатор);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ТаблицаЧековККМ,
		"Статус",
		СтатусыЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке,,,, Новый УникальныйИдентификатор);
		
КонецПроцедуры

// Процедура архивирует чеки при закрытии смены. При необходимости удаляет чеки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Параметры - Структура - параметры для анализа закрытия смены.
//
Процедура ЗаархивироватьЧекиККМ(Форма, Параметры) Экспорт
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Если НЕ ЗначениеЗаполнено(Форма.РабочееМесто) Тогда
	//	
	//	Параметры.ТекстОшибки = НСтр("ru = 'Ошибка определения рабочего места.
	//		|Обратитесь к администратору системы.'");
	//	Параметры.Отказ = Истина;
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//СформироватьЗапросЧековККМДляЗакрытияСмены(Запрос, Форма);
	//
	//ТаблицаЧеков = Запрос.Выполнить().Выгрузить();
	//
	// //Архивация чеков ККМ.
	//НачатьТранзакцию();
	//
	//Блокировка = Новый БлокировкаДанных;
	//ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМ");
	//ЭлементБлокировки.ИсточникДанных = ТаблицаЧеков;
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	//Блокировка.Заблокировать();
	//
	//Попытка
	//	
	//	Для Каждого ТекущийЧек Из ТаблицаЧеков Цикл
	//		
	//		ДокументОбъект = ТекущийЧек.Ссылка.ПолучитьОбъект();
	//		ДокументОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный;
	//		ДокументОбъект.КассоваяСмена = Форма.КассоваяСмена;
	//		ДокументОбъект.Записать(РежимЗаписи());
	//		
	//	КонецЦикла;
	//	
	//	ЗафиксироватьТранзакцию();
	//	
	//Исключение
	//	
	//	ОтменитьТранзакцию();
	//	
	//	Параметры.ТекстОшибки = СтрШаблон(
	//		НСтр("ru = 'Не удалось заархивировать чеки. %1'"),
	//		ОписаниеОшибки());
	//	Параметры.Отказ = Истина;
	//	
	//	ЗаписьЖурналаРегистрации(
	//		НСтр("ru = 'Ошибка при архивации документов ""Чек ККМ"".'"),
	//		УровеньЖурналаРегистрации.Ошибка,,,Параметры.ТекстОшибки);
	//		
	//	Возврат;
	//	
	//КонецПопытки;
	//
	//Параметры.ФИОКассира = ПродажиРМК.ФИОФизЛица(Форма.Объект.Кассир, Форма.Объект.ПользовательБД);
	//
	//Если Не УдалятьЧекиПриЗакрытииСмены() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	// //Удаление отложенных и прочих чеков за текущую кассовую смену.
	//Запрос = Новый Запрос;
	//СформироватьЗапросЧековККМДляУдаления(Запрос, Форма);
	//
	//ТаблицаЧековДляУдаления = Запрос.Выполнить().Выгрузить();
	//
	//НачатьТранзакцию();
	//
	//Блокировка = Новый БлокировкаДанных;
	//ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМ");
	//ЭлементБлокировки.ИсточникДанных = ТаблицаЧековДляУдаления;
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	//Блокировка.Заблокировать();
	//
	//Попытка
	//	
	//	Для Каждого ЧекДляУдаления Из ТаблицаЧековДляУдаления Цикл
	//		
	//		ЧекДляУдаления = ЧекДляУдаления.Ссылка.ПолучитьОбъект();
	//		Если ЧекДляУдаления.Проведен Тогда
	//			ЧекДляУдаления.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//		КонецЕсли;
	//		ЧекДляУдаления.Удалить();
	//		
	//	КонецЦикла;
	//	
	//	ЗафиксироватьТранзакцию();
	//	
	//Исключение
	//	
	//	ОтменитьТранзакцию();
	//	
	//	Параметры.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось удалить чеки. %1'"),ОписаниеОшибки());
	//	Параметры.Отказ = Истина;
	//	
	//	ЗаписьЖурналаРегистрации(
	//		НСтр("ru = 'Ошибка при попытке удалить документ ""Чек ККМ"".'"),
	//		УровеньЖурналаРегистрации.Ошибка,,,Параметры.ТекстОшибки);
	//		
	//КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет доступные права для текущего пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ЗаполнитьТаблицуРолейПользователя(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Форма.СписокРолейПользователя.Очистить();
	
	Если Пользователи.РолиДоступны("ПравоРучнаяСкидкаРМК", Объект.ПользовательБД) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоРучнаяСкидкаРМК");
	КонецЕсли;
	Если Пользователи.РолиДоступны("ПравоУдалитьСтрокуРМК", Объект.ПользовательБД) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоУдалитьСтрокуРМК");
	КонецЕсли;
	Если Пользователи.РолиДоступны("ПравоЧекНаВозвратРМК", Объект.ПользовательБД) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоЧекНаВозвратРМК");
	КонецЕсли;
	Если Пользователи.РолиДоступны("ПравоУдалитьЧекРМК", Объект.ПользовательБД) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоУдалитьЧекРМК");
	КонецЕсли;
	Если Пользователи.РолиДоступны("ПравоИзменятьЦенуРМК", Объект.ПользовательБД) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоИзменятьЦенуРМК");
	КонецЕсли;
	Если Пользователи.РолиДоступны("ПравоРедактироватьКартуРМК", Объект.ПользовательБД) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоРедактироватьКартуРМК");
	КонецЕсли;
	Если Пользователи.РолиДоступны("ПравоЧекКоррекцииРМК", Объект.ПользовательБД) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоЧекКоррекцииРМК");
	КонецЕсли;
	Если Пользователи.РолиДоступны("ПравоОтложитьЧекРМК", Объект.ПользовательБД) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоОтложитьЧекРМК");
	КонецЕсли;
	Если Пользователи.РолиДоступны("ПравоПродолжитьЧекРМК", Объект.ПользовательБД) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоПродолжитьЧекРМК");
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на освновании выбранного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекККМ - ДокументСсылка.ЧекККМ - выбранный чек ККМ.
//
Процедура ЗаполнитьНаОснованииЧекаККМ(Форма, ЧекККМ) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЧекПродажиНаАванс = ЧекККМ.ОперацияСДенежнымиСредствами И ЧекККМ.Запасы.Количество() = 0;
	ЧекПредоплаты = ЧекККМ.ОперацияСДенежнымиСредствами И ЧекККМ.Запасы.Количество() > 0;
	
	ЭтоВозвратПредоплаты = Ложь;
	ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Форма.Объект.ВидОперации);
	Если НЕ ЭтоПродажа И ЧекПредоплаты Тогда
		ЭтоВозвратПредоплаты = Истина;
	КонецЕсли;
	
	ЭтоВозвратАванса = Ложь;
	Если НЕ ЭтоПродажа И ЧекПродажиНаАванс Тогда
		ЭтоВозвратАванса = Истина;
	КонецЕсли;
	Форма.ЭтоВозвратАванса = ЭтоВозвратАванса;
	
	Объект.Товары.Очистить();
	Объект.Оплата.Очистить();
	
	ОрганизацияЧекаПродажи = ЧекККМ.Организация;
	Если ЗначениеЗаполнено(ЧекККМ) Тогда
		СНОЧекаПродажи = ОбщегоНазначенияРМК.СистемаНалогообложенияЧека(ЧекККМ);
		ЗаполнитьЗначенияСвойств(Объект, ЧекККМ);
	КонецЕсли;
	
	Форма.ЧекККМПродажа = ЧекККМ;
	Объект.ЗаказПокупателя = ЧекККМ.Заказ;
	
	Форма.ОтправкаЧекаПочта = ЧекККМ.АдресЭП;
	Форма.ОтправкаЧекаТелефон = ЧекККМ.Телефон;
	
	Если ЭтоВозвратАванса Тогда
		
		ОстатокАванса = ОстатокАвансаПоЧеку(ЧекККМ);
		Форма.ДопустимаяСуммаВозвратаАванса = ОстатокАванса;
		Форма.ПриемАванса = Истина;
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.ПредставлениеНоменклатураХарактеристика = НСтр("ru = 'Аванс'");
		НоваяСтрокаТовары.ПредставлениеЕдиницыИзмерения = НСтр("ru = 'шт'");
		НоваяСтрокаТовары.Количество = 1;
		НоваяСтрокаТовары.КоличествоУпаковок = 1;
		НоваяСтрокаТовары.СистемаНалогообложения = СНОЧекаПродажи;
		НоваяСтрокаТовары.Организация = ОрганизацияЧекаПродажи;
		НоваяСтрокаТовары.Цена = ОстатокАванса;
		НоваяСтрокаТовары.Сумма = ОстатокАванса;
		НоваяСтрокаТовары.СуммаБезСкидки = ОстатокАванса;
		
	ИначеЕсли ЭтоВозвратПредоплаты Тогда
		
		ОстатокАванса = ОстатокАвансаПоЧеку(ЧекККМ);
		Форма.ДопустимаяСуммаВозвратаАванса = ОстатокАванса;
		ЗаполнитьТабличныеЧастиИзЧекККМ(ЧекККМ, Форма);
		
	Иначе
		ЗаполнитьТабличныеЧастиИзЧекККМ(ЧекККМ, Форма);
	КонецЕсли;
	
	Если Форма.ЭтоЗачетАванса ИЛИ ЧекККМ.Предоплата.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СуммаОплаченоНал = 0;
	СуммаНаличных = ЧекККМ.СуммаДокумента - ЧекККМ.БезналичнаяОплата.Итог("Сумма");
	
	Если ЭтоВозвратАванса ИЛИ ЭтоВозвратПредоплаты Тогда
		
		СуммаОстаткаАвансаНужноРаспределить = ОстатокАванса;
		СуммаНаличных = СуммаОстаткаАвансаНужноРаспределить - ЧекККМ.БезналичнаяОплата.Итог("Сумма");
		СуммаНаличных = Макс(СуммаНаличных, 0);
		СуммаОстаткаАвансаНужноРаспределить = СуммаОстаткаАвансаНужноРаспределить - СуммаНаличных;
		
	КонецЕсли;
	
	Если НЕ СуммаНаличных = 0 ИЛИ ЭтоВозвратАванса ИЛИ ЭтоВозвратПредоплаты Тогда
		
		ОплатаНаличными = Объект.Оплата.Добавить();
		ОплатаНаличными.ВидОплаты = "Наличные";
		ОплатаНаличными.Сумма = СуммаНаличных;
		Форма.СуммаОплаченоНал = СуммаНаличных;
		
	КонецЕсли;
	
	Форма.СуммаОплаченоБН = 0;
	СуммаОплатБанковскойКартой = 0;
	ВидПлатежнойКарты = "";
	
	ТаблицаБезналичнаяОплата = ЧекККМ.БезналичнаяОплата.Выгрузить();
	
	Для Каждого СтрокаБезналОплаты Из ТаблицаБезналичнаяОплата Цикл
		
		Если ЭтоВозвратАванса Тогда
			
			СтрокаБезналОплаты.Сумма = Мин(СтрокаБезналОплаты.Сумма, СуммаОстаткаАвансаНужноРаспределить);
			СуммаОстаткаАвансаНужноРаспределить = СуммаОстаткаАвансаНужноРаспределить - СтрокаБезналОплаты.Сумма;
			Если СтрокаБезналОплаты.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяОплатаБезнал = Объект.Оплата.Добавить();
		
		Если СтрокаБезналОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяОплатаБезнал, СтрокаБезналОплаты);
			СуммаОплатБанковскойКартой = СуммаОплатБанковскойКартой + СтрокаБезналОплаты.Сумма;
			ВидПлатежнойКарты = СтрокаБезналОплаты.ВидПлатежнойКарты;
			
		КонецЕсли;
		
		Если СтрокаБезналОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.СертификатНСПК 
			ИЛИ СтрокаБезналОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ВстречноеПредоставление Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяОплатаБезнал, СтрокаБезналОплаты);
			ВидПлатежнойКарты = СтрокаБезналОплаты.ВидПлатежнойКарты;
			
		КонецЕсли;
		
		Если СтрокаБезналОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Кредит Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяОплатаБезнал, СтрокаБезналОплаты);
			Форма.ПараметрыОплатыКредитом = Новый Структура("ЭквайринговыйТерминал, ВидПлатежнойКарты, Сумма, СуммаКомиссии, ВидОплаты");
			Форма.СуммаОплаченоКредитом = СтрокаБезналОплаты.Сумма;
			ЗаполнитьЗначенияСвойств(Форма.ПараметрыОплатыКредитом, СтрокаБезналОплаты);
			
		КонецЕсли;
		
		Если СтрокаБезналОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку И НЕ ЭтоПродажа Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяОплатаБезнал, СтрокаБезналОплаты);
			Форма.СуммаОплаченоВРассрочку = СтрокаБезналОплаты.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.СуммаОплаченоБН = СуммаОплатБанковскойКартой;
	
	Если ЭтоВозвратАванса ИЛИ ЭтоВозвратПредоплаты Тогда
		Форма.СуммаОплаченоВРассрочку = Объект.Товары.Итог("Сумма") - ОстатокАванса;
	КонецЕсли;
	
	Если ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Форма.Объект.ВидОперации) Тогда
		
		Если ЗначениеЗаполнено(ВидПлатежнойКарты) Тогда
			Форма.ВыбранныйВидОплаты = ВидПлатежнойКарты;
		КонецЕсли;

	Иначе
	
		Если ТаблицаБезналичнаяОплата.Количество() > 0 Тогда
			
			ФильтрПоиска = Новый Структура();
			ВидПлатежнойКарты = ТаблицаБезналичнаяОплата[0].ВидПлатежнойКарты;
			ФильтрПоиска.Вставить("ВидОплаты", ВидПлатежнойКарты);
			
			Результат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ФильтрПоиска);
			
			Если Результат.Количество() > 0 Тогда
				Форма.ВыбранныйВидОплаты = Результат[0].ИмяКоманды;
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на освновании выбранного отложенного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ОтложенныйЧек - ДокументСсылка.ЧекККМ - выбранный отложенный чек ККМ.
//
Процедура ЗаполнитьДанныеИзОтложенногоЧека(Форма, ОтложенныйЧек) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ОтложенныйЧек);
	Объект.ЗаказПокупателя = ОтложенныйЧек.Заказ;
	Форма.КомментарийКЧеку = ОтложенныйЧек.Комментарий;
	
	Если ТипЗнч(ОтложенныйЧек) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Объект.ВидОперации = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	Иначе
		Объект.ВидОперации = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
		Если ТипЗнч(ОтложенныйЧек) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			Форма.ЧекККМПродажа = ОтложенныйЧек.ЧекККМ;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТабличныеЧастиИзЧекККМ(ОтложенныйЧек, Форма, Истина);
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК о номенклатуре.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ДополнитьСведенияОТоварах(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.Серия КАК Серия
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Наименование КАК НаименованиеНоменклатуры,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпрНоменклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
	|	СпрНоменклатура.ВидПродукцииИС КАК ОсобенностьУчета,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК Маркируемый,
	|	СпрХарактеристикиНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	Товары.Характеристика КАК Характеристика,
	|	СпрНоменклатура.Наименование + ВЫБОР
	|		КОГДА НЕ Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА "" ("" + ЕСТЬNULL(СпрХарактеристикиНоменклатуры.Наименование, """") + "")""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеНоменклатураХарактеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Серия КАК Серия,
	|	СпрНоменклатура.ИспользоватьСерииНоменклатуры
	|		ИЛИ СпрНоменклатура.ИспользоватьПартии КАК НеобходимоДобавитьСтроку,
	|	СпрНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СпрНоменклатура.ИспользоватьСерииНоменклатуры КАК НеобходимостьВводаСерии,
	|	СпрНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрПолитикаУчетаСерий.ТипПолитики, ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьЗаполнениеСерий,
	|	СпрНоменклатура.ИспользоватьУникальныеСерии КАК УникальностьСерии,
	|	СпрНоменклатура.КодТРУ КАК КодТРУ,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.КодТРУ = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозможнаОплатаЭС,
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	СпрНоменклатура.ЗапретитьВводДробногоКоличества КАК ЗапретитьВводДробногоКоличества
	|ПОМЕСТИТЬ ПредставлениеТовара
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
	|		ПО Товары.Характеристика = СпрХарактеристикиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолитикаУчетаСерий КАК СпрПолитикаУчетаСерий
	|		ПО (СпрНоменклатура.ПолитикаУчетаСерий = СпрПолитикаУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредставлениеТовара.Номенклатура КАК Номенклатура,
	|	ПредставлениеТовара.Характеристика КАК Характеристика,
	|	ПредставлениеТовара.Серия КАК Серия,
	|	ПредставлениеТовара.Упаковка КАК Упаковка,
	|	ПредставлениеТовара.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ПредставлениеТовара.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ПредставлениеТовара.Маркируемый КАК НеобходимостьВводаКодаМаркировки,
	|	ПредставлениеТовара.ПредставлениеНоменклатураХарактеристика КАК ПредставлениеНоменклатураХарактеристика,
	|	ВЫБОР
	|		КОГДА ПредставлениеТовара.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПредставлениеТовара.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ЕдиницыИзмерения.Наименование
	|	КОНЕЦ КАК ПредставлениеЕдиницыИзмерения,
	|	ПредставлениеТовара.НеобходимоДобавитьСтроку КАК НеобходимоДобавитьСтроку,
	|	ПредставлениеТовара.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ПредставлениеТовара.НеобходимостьВводаСерии КАК НеобходимостьВводаСерии,
	|	ПредставлениеТовара.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ПредставлениеТовара.ПроверятьЗаполнениеСерий КАК ПроверятьЗаполнениеСерий,
	|	ПредставлениеТовара.УникальностьСерии КАК УникальностьСерии,
	|	ПредставлениеТовара.КодТРУ КАК КодТРУ,
	|	ПредставлениеТовара.ВозможнаОплатаЭС КАК ВозможнаОплатаЭС,
	|	ПредставлениеТовара.Весовой КАК Весовой,
	|	ПредставлениеТовара.ЗапретитьВводДробногоКоличества КАК ЗапретитьВводДробногоКоличества
	|ИЗ
	|	ПредставлениеТовара КАК ПредставлениеТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ПредставлениеТовара.Упаковка = ЕдиницыИзмерения.Ссылка");
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСУНФ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("СпрНоменклатура");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
		СтруктураПоиска.Вставить("Серия", Строка.Серия);
		СтруктураПоиска.Вставить("Упаковка", Строка.Упаковка);
		
		МассивСтрок = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Строка, МассивСтрок[0]);
		КонецЕсли;
		ПереопределитьПараметрыЗаполненияСерийИПартий(Строка, Форма);
		
		Если Форма.ЭтоОплатаРассрочки Тогда
			Строка.НеобходимостьВводаКодаМаркировки = Ложь;
			Строка.НеобходимостьВводаСерии = Ложь;
			Строка.ПроверятьЗаполнениеСерий = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет является ли вид оплаты безналичной формой оплаты.
//
// Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// Возвращаемое значение:
//  Булево - Истина, если переданный вид оплаты является безналичной формой оплаты.
//
Функция ЭтоОплатаПлатежнойКартой(ВидОплаты) Экспорт
	
	//Возврат ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
	
КонецФункции

// Определяет систему налогообложения чека ККМ.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - чек ККМ, для которого нужно определить систему налогообложения.
//  СНО - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - система налогообложения.
//
Процедура ЗаполнитьСНОЧекаККМ(ЧекККМ, СНО) Экспорт
	
	СНО = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		ЧекККМ.Организация,
		ЧекККМ.СтруктурнаяЕдиница,
		ЧекККМ.Дата,
		ЧекККМ.СпециальныйНалоговыйРежим);
	
КонецПроцедуры

// Процедура устанавливает статус чека.
//
// Параметры:
//  ЧекККМ - ДокументОбъект.ЧекККМ - чек ККМ для смены статуса.
//  Статус - Строка - статус, который необходимо установить. Если пустая строка, то очистить статус.
//
Процедура УстановитьСтатусЧека(ЧекККМ, Статус) Экспорт
	
	Если Статус = "" И ТипЗнч(ЧекККМ) = Тип("ДокументОбъект.ЧекККМ") Тогда
		ЧекККМ.Статус = Перечисления.СтатусыЧековККМ.ЧекНеПробит;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает вид оплаты платежной картой при продаже
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - чек ККМ продажи.
//
// Возвращаемое значение:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты платежной карты, который был учтен при продаже.
//
Функция ВидОплатыПриПродаже(ЧекПродажи) Экспорт
	
	ВидОплаты = Неопределено;
	Для Каждого СтрокаОплаты Из ЧекПродажи.БезналичнаяОплата Цикл
		Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
			ВидОплаты = СтрокаОплаты.ВидПлатежнойКарты;
			Прервать;
		ИначеЕсли СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.СертификатНСПК Тогда
			ВидОплаты = СтрокаОплаты.ВидОплаты;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидОплаты;
	
КонецФункции

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - товар, для которого необходимо заполнить серии.
//  МассивСерий - Массив - массив, в который необходимо добавить найденные серии.
//  ИсключаяСерии - Массив - массив, в котором содержаться серии, которые уже присутствуют в РМК и их нужно исключить.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - вид текущей операции.
//
Процедура ЗаполнитьСписокВыбораСерийНоменклатуры(Номенклатура, МассивСерий, ИсключаяСерии, ВидОперации) Экспорт
	
	СтатусСерииПродан = Ложь;
	Если ВидОперации = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
		СтатусСерииПродан = Истина;
	КонецЕсли;
	
	МассивДобавленныхСерий = Новый Массив;
	Для Каждого СтрокаМассива Из ИсключаяСерии Цикл
		Если ЗначениеЗаполнено(СтрокаМассива) Тогда
			МассивДобавленныхСерий.Добавить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Владелец = &Номенклатура
	|	И НЕ СерииНоменклатуры.ПометкаУдаления
	|	И НЕ СерииНоменклатуры.Ссылка В (&МассивСерий)
	|	И ВЫБОР
	|			КОГДА СерииНоменклатуры.ГоденДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СерииНоменклатуры.ГоденДо > &ТекущаяДата
	|		КОНЕЦ
	|	И СерииНоменклатуры.Продан = &СтатусСерииПродан");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("МассивСерий", МассивДобавленныхСерий);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СтатусСерииПродан", СтатусСерииПродан);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивСерий.Добавить(Выборка.Серия);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет шаблон чека в параметры перед пробитием чека на ККТ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - ссылка на чек, который будет пробит.
//  ОбщиеПараметры - Структура - см. Документы.ЧекККМ.ПолучитьДанныеДляФискализации().
//
Процедура ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры) Экспорт
	
	ЭтоВозврат = Истина;
	ОперацияВозврата = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ЧекККМВозврат");

	ВидОперации = ?(ТипЗнч(ЧекККМ) = Тип("ДокументСсылка.ЧекККМВозврат"),
		ОперацияВозврата, ЧекККМ.ХозяйственнаяОперация);
		
	ШаблонЧека = ШаблонЧека(ВидОперации, ЧекККМ);
	
	Если ЗначениеЗаполнено(ШаблонЧека) Тогда
		ОбщиеПараметры.Вставить("ШаблонЧека", ШаблонЧека);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает шаблон чека, выбранный для применения
//
// Параметры:
//  ВидОперации - СправочникСсылка.ХозяйственныеОперации - вид операции, для которой формируется шаблон чека.
//  ЧекККМ - ДокументСсылка.ЧекККМ - ссылка на чек, для которого формируется шаблон.
//
// Возвращаемое значение:
//  Результат - СправочникСсылка.ХранилищеШаблонов
//
Функция ШаблонЧека(ВидОперации, ЧекККМ) Экспорт
	
	Результат = Справочники.ХранилищеШаблонов.ПустаяСсылка();
	
	ОперацияПродажи = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ЧекККМ");
	ОперацияВозврата = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ЧекККМВозврат");
	
	КассаККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМ, "КассаККМ");
	
	Если ВидОперации = ОперацияПродажи Тогда
		ИмяРеквизитаШаблона = НСтр("ru = 'ШаблонЧекаПродажи'");
	ИначеЕсли ВидОперации = ОперацияВозврата Тогда
		ИмяРеквизитаШаблона = НСтр("ru = 'ШаблонЧекаВозврата'");
	Иначе
		ИмяРеквизитаШаблона = НСтр("ru = ''");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРеквизитаШаблона) Тогда 
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, ИмяРеквизитаШаблона);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет возможность внесения денег.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ.
//  Организация - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//  Булево - Ложь, если документы для внесения отсутствуют.
//
Функция ВозможностьВнесенияДенег(КассаККМ, Организация) Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	// "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи КАК Документ,
	//|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток КАК СуммаОстаток,
	//|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Организация КАК Организация,
	//|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Касса КАК Касса
	//|ПОМЕСТИТЬ ТаблицаДокументовСОстатками
	//|ИЗ
	//|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(
	//|			,
	//|			Касса = &КассаККМ
	//|				И Организация = &Организация) КАК ДенежныеСредстваКПоступлениюНаличныеОстатки
	//|ГДЕ
	//|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток > 0
	//|	И ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи ССЫЛКА Документ.РасходныйКассовыйОрдер
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РасходныйКассовыйОрдер.Ссылка КАК РасходныйКассовыйОрдер,
	//|	РасходныйКассовыйОрдер.Номер КАК Номер,
	//|	РасходныйКассовыйОрдер.Дата КАК Дата,
	//|	ТаблицаДокументовСОстатками.СуммаОстаток КАК СуммаОстаток,
	//|	ТаблицаДокументовСОстатками.Организация КАК Организация,
	//|	ТаблицаДокументовСОстатками.Касса КАК Касса
	//|ИЗ
	//|	ТаблицаДокументовСОстатками КАК ТаблицаДокументовСОстатками
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	//|		ПО ТаблицаДокументовСОстатками.Документ = РасходныйКассовыйОрдер.Ссылка";
	//
	//Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	//Запрос.УстановитьПараметр("Организация", Организация);
	//
	//Результат = Запрос.Выполнить();
	//
	//Возврат НЕ Результат.Пустой();
	
КонецФункции

// Процедура изменяет запрос, если при пробитии чеков необходимо сворачивать строки.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запрос.
//
Процедура ПереопределитьЗапросДляСворачиванияСтрок(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура очищает значение параметра "ОтложенныйЧек", если у него пустой статус.
//
// Параметры:
//  ОтложенныйЧек - ОпределяемыйТип.ЧекККМРМК - ссылка на отложенный чек.
//
Процедура ОчиститьОтложенныйЧек(ОтложенныйЧек) Экспорт
	
	Если ЗначениеЗаполнено(ОтложенныйЧек)
		И ТипЗнч(ОтложенныйЧек) = Тип("ДокументОбъект.ЧекККМ")
		И ОтложенныйЧек.Статус.Пустая() Тогда
		
		ОтложенныйЧек = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение данных из выбранного документа заказ покупателя.
//
// Параметры:
//  ЗаказПокупателя - Структура, ДокументСсылка - выбранный документ заказ покупателя;
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира;
//  Отказ - Булево - флаг ошибки при выполнении;
//  ОписаниеОшибки - Строка - описание ошибки выполнеия.
//
Процедура ЗаполнитьПоЗаказу(ЗаказПокупателя, Форма, Отказ, ОписаниеОшибки) Экспорт
	
	Если НЕ ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияПроверяемыхРеквизитов =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказПокупателя, "СостояниеЗаказа, Проведен, ОжидаетсяВыборВариантаКП");
	ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(
		ЗаказПокупателя,
		ЗначенияПроверяемыхРеквизитов,
		Отказ,
		ОписаниеОшибки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоТоварамЗаказаПокупателя(ЗаказПокупателя, Форма);
	
КонецПроцедуры

// Заполнение данных из выбранного документа безналичной оплаты.
//
// Параметры:
//  ДанныеВыбора - Структура - данные выбранного документа безналичной оплаты.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не ДанныеВыбора.Свойство("ДокументРасчета") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРасчета = ДанныеВыбора.ДокументРасчета;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ЗаполнитьПоЗаказу(ДокументРасчета.ДокументОснование, Форма, Отказ, ОписаниеОшибки);
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтрокаТовара = Объект.Товары[0];
		Форма.ВыбраннаяСистемаНалогообложения = СтрокаТовара.СистемаНалогообложения;
		Форма.ВыбраннаяОрганизация = СтрокаТовара.Организация;
		
		Отбор = Новый Структура("Организация", Форма.ВыбраннаяОрганизация);
		СтрокаКассы = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		
		Форма.ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
		Объект.Организация = СтрокаКассы.Организация;
		Объект.КассаККМ = СтрокаКассы.КассаККМ;
		Форма.КассоваяСмена = СтрокаКассы.КассоваяСмена;
		Форма.ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
		
	КонецЕсли;
	
	Форма.ТаблицаПредоплаты.Очистить();
	СтрокаПредоплаты = Форма.ТаблицаПредоплаты.Добавить();
	СтрокаПредоплаты.Документ = ДокументРасчета;
	СтрокаПредоплаты.Заказ = ДокументРасчета.ДокументОснование;
	СтрокаПредоплаты.СуммаРасчетов = ДокументРасчета.СуммаДокумента;
	СтрокаПредоплаты.Курс = 1;
	СтрокаПредоплаты.Кратность = 1;
	СтрокаПредоплаты.СуммаПлатежа = ДокументРасчета.СуммаДокумента;
	
	Если НЕ Отказ Тогда
		
		Объект.Контрагент = ДокументРасчета.Контрагент;
		Объект.Оплата.Очистить();
		
		НоваяСтрокаОплаты = Объект.Оплата.Добавить();
		НоваяСтрокаОплаты.ВидОплаты = "БанковскийПлатеж";
		НоваяСтрокаОплаты.Сумма = ДокументРасчета.СуммаДокумента;
		
		Форма.Элементы.ГруппаОплатаБезнал.Видимость = Истина;
		Форма.СуммаОплаченоБезнал = НоваяСтрокаОплаты.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак формы по одноименному значению функциональной опции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//  ИспользоватьБонусныеПрограммы - булево - признак использования бонусных программ.
//
Процедура УстановитьПризнакФормеПоДаннымФункциональнойОпции(Форма, ИмяФункциональнойОпции) Экспорт
	
	Если НЕ (Метаданные.ФункциональныеОпции.Найти(ИмяФункциональнойОпции) = Неопределено)
			И РеквизитФормыСуществует(Форма,ИмяФункциональнойОпции) Тогда
				Форма[ИмяФункциональнойОпции] = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит дополнительные действия для настройки работы с оплатой по карте.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура НастроитьОплатуПлатежнымиКартами(Форма) Экспорт
	
	Объект = Форма.Объект;
	НужноИзменитьРеквизиты = Ложь;
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВыбранныйВидОплаты") Тогда
		НужноИзменитьРеквизиты = Истина;
		ТипРеквизита = Новый Массив;
		ТипРеквизита.Добавить(Тип("Строка"));
		ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипРеквизита);
		НовыйРеквизит = Новый РеквизитФормы("ВыбранныйВидОплаты", ОписаниеТиповДляРеквизита);
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТаблицаПлатежныхКарт") Тогда
		НужноИзменитьРеквизиты = Истина;
		ТипРеквизита = Новый Массив;
		ТипРеквизита.Добавить(Тип("ТаблицаЗначений"));
		ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипРеквизита);
		НовыйРеквизит = Новый РеквизитФормы("ТаблицаПлатежныхКарт", ОписаниеТиповДляРеквизита);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("ВидОплаты", Новый ОписаниеТипов("Строка"), "ТаблицаПлатежныхКарт");
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("ИмяКоманды", Новый ОписаниеТипов("Строка"), "ТаблицаПлатежныхКарт");
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЕсли;
	
	Если НужноИзменитьРеквизиты Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидОплаты
	|ИЗ
	|	Справочник.СпособыОплаты.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка.ПометкаУдаления
	|	И ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка.Касса В (&КассыККМ)");
	
	МассивКассККМ = Форма.ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("КассаККМ");

	Запрос.УстановитьПараметр("КассыККМ", МассивКассККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	НужноСоздаватьПодменюКарта = Выборка.Количество() > 1;
	Итератор = 0;
	
	Если НужноСоздаватьПодменюКарта Тогда
		Форма.ТаблицаПлатежныхКарт.Очистить();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НазваниеКоманды = СтрШаблон("ОплатаКартой_%1", Итератор);
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяКоманды", НазваниеКоманды);
		МассивПлатежныхКарт = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(СтруктураПоиска);
		Если МассивПлатежныхКарт.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаблицыПлатКарт = Форма.ТаблицаПлатежныхКарт.Добавить();
		НоваяСтрокаТаблицыПлатКарт.ИмяКоманды = НазваниеКоманды;
		НоваяСтрокаТаблицыПлатКарт.ВидОплаты = Выборка.ВидОплаты;
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Находит по магнитному коду карту лояльности и заполняет её данные.
//
// Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск.
//  ДанныеКарты - Структура - см.ШтрихкодированиеРМК.ДанныеКартыЛояльности().
//
Процедура ЗаполнитьДанныеКартыЛояльности(МагнитныйКод, ДанныеКарты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДисконтныеКарты.Ссылка КАК ДисконтнаяКарта
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.КодКартыМагнитный = &КодКартыМагнитный";
	
	Запрос.УстановитьПараметр("КодКартыМагнитный", МагнитныйКод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		НайденнаяКартаЛояльности = Неопределено;
		ШтрихкодированиеРМКУНФ.ЗаполнитьДанныеНайденнойКартыЛояльности(
			Выборка.ДисконтнаяКарта, НайденнаяКартаЛояльности);
		
		Если Не НайденнаяКартаЛояльности = Неопределено Тогда
			ДанныеКарты = НайденнаяКартаЛояльности;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит обработку выбранного документа расчета.
//
// Параметры:
//  ПараметрыВыбора - Структура - данные выбранного документа расчета.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура ОбработатьВыборДокументаРасчета(ПараметрыВыбора, Форма) Экспорт
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Форма.Элементы.ПанельУправленияЧеком);
	Форма.Элементы.ГруппаЛево.Доступность = Истина;
	Форма.Элементы.ГруппаОперации.Доступность = Истина;
	
	Объект = Форма.Объект;
	
	Если ПараметрыВыбора.Свойство("СуммаРассрочки") Тогда
		Объект.ДокументРасчета = ПараметрыВыбора.ЧекККМ;
		Форма.СуммаОстаткаДокументаРасчета = ПараметрыВыбора.СуммаРассрочки;
		Форма.ЭтоЗачетАванса = Ложь;
		Форма.ЭтоОплатаРассрочки = Истина;
		Объект.ОперацияСДенежнымиСредствами = Истина; 
	Иначе
		Объект.ДокументРасчета = ПараметрыВыбора.ДокументРасчета;
		Форма.СуммаОстаткаДокументаРасчета = ПараметрыВыбора.СуммаЗачетаАванса;
		Форма.ЭтоЗачетАванса = Истина;
		Форма.ЭтоОплатаРассрочки = Ложь;
		Объект.ОперацияСДенежнымиСредствами = Ложь;
	КонецЕсли;
	
	Если Объект.ДокументРасчета = Неопределено Тогда
		Объект.ДокументРасчета = Документы.ЧекККМ.ПустаяСсылка();
		Форма.ВыбраннаяОрганизация = Объект.Организация; 
		Форма.ВыбраннаяСистемаНалогообложения = ОбщегоНазначенияРМК.СНОККТДляОрганизации(Форма);
	Иначе
		ЗаполнитьСНОЧекаККМ(Объект.ДокументРасчета, Форма.ВыбраннаяСистемаНалогообложения);
		Форма.ВыбраннаяОрганизация = Объект.ДокументРасчета.Организация;
		
		Отбор = Новый Структура("Организация", Форма.ВыбраннаяОрганизация);
		СтрокаКассы = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		
		Форма.ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
		Объект.Организация = СтрокаКассы.Организация;
		Объект.КассаККМ = СтрокаКассы.КассаККМ;
		Форма.КассоваяСмена = СтрокаКассы.КассоваяСмена;
		Форма.ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;   
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументРасчета) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьНаОснованииЧекаККМ(Форма, Объект.ДокументРасчета);
		Объект.ОперацияСДенежнымиСредствами = Форма.ЭтоОплатаРассрочки;
		ЕстьТоварыВДокументеРасчета = Объект.Товары.Количество() > 0;
	КонецЕсли;
	
КонецПроцедуры

// Получает цену на товар.
//
// Параметры:
//  Магазин - СправочникСсылка.Магазины - Магазин, для которого нужно получить цену.
//  ДанныеТовара - Структура - структура с параметрами товара, для которых нужно получить цену.
//
// Возвращаемое значение:
//  Цена - Число - актцальное значения цены.
//
Функция ЦенаПродажи(Магазин, ДанныеТовара) Экспорт
	
	//Номенклатура = ДанныеТовара.Номенклатура;
	//
	//Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	//Если ДанныеТовара.Свойство("Характеристика") Тогда
	//	Характеристика = ДанныеТовара.Характеристика;
	//КонецЕсли;
	//
	//Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	//Если ДанныеТовара.Свойство("Упаковка") Тогда
	//	Упаковка = ДанныеТовара.Упаковка;
	//КонецЕсли;
	//
	//Дата = ТекущаяДатаСеанса();
	//
	//Цена = ЗапасыСервер.ЦенаПродажи(Магазин, Дата, Номенклатура, Характеристика, Упаковка, Истина);
	//
	//Возврат Цена;
	
КонецФункции

// Процедура формирует структуру данных, которая затем будет выгружена в XML.
//
// Параметры:
//  СтруктураНастроек - Структура - структура, в которую нужно добавить настройки.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
Процедура СформироватьСтруктуруНастроек(СтруктураНастроек, Знач НастройкаРМК) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.МаксимальныйПроцентРучнойСкидки КАК НастройкаРМК_МаксимальныйПроцентРучнойСкидки,
	|	НастройкиРабочегоМестаКассира.ПечататьБумажныйЧек КАК НастройкаРМК_ПечататьБумажныйЧек,
	|	НастройкиРабочегоМестаКассира.ВидОтображения КАК НастройкаРМК_ВидОтображения,
	|	НастройкиРабочегоМестаКассира.ТочностьОкругления КАК НастройкаРМК_ТочностьОкругления,
	|	НастройкиРабочегоМестаКассира.ОкруглятьПриПроизвольномВидеОплаты КАК НастройкаРМК_ОкруглятьПриПроизвольномВидеОплаты,
	|	НастройкиРабочегоМестаКассира.ОкруглятьЧекВПользуПокупателяПострочно КАК НастройкаРМК_ОкруглятьЧекВПользуПокупателяПострочно,
	|	НастройкиРабочегоМестаКассира.АдресСервераЛояльности КАК НастройкаРМК_АдресСервераЛояльности,
	|	НастройкиРабочегоМестаКассира.ПользовательСервераЛояльности КАК НастройкаРМК_ПользовательСервераЛояльности,
	|	НастройкиРабочегоМестаКассира.СворачиватьСтрокиПриПечатиЧека КАК НастройкаРМК_СворачиватьСтрокиПриПечатиЧека,
	|	НастройкиРабочегоМестаКассира.Наименование КАК НастройкаРМК_Наименование,
	|	НастройкиРабочегоМестаКассира.ЗапрашиватьПодтверждениеВозраста18Плюс КАК НастройкаРМК_ЗапрашиватьПодтверждениеВозраста18Плюс,
	|	НастройкиРабочегоМестаКассира.ЗапрещеноРедактированиеУсловийОграниченийПродаж КАК НастройкаРМК_ЗапрещеноРедактированиеУсловийОграниченийПродаж,
	|	НастройкиРабочегоМестаКассира.ИспользоватьНовыйПодборТоваров КАК НастройкаРМК_ИспользоватьНовыйПодборТоваров,
	|	НастройкиРабочегоМестаКассира.ЗакрыватьПодборПриВыбореТовара КАК НастройкаРМК_ЗакрыватьПодборПриВыбореТовара,
	|	НастройкиРабочегоМестаКассира.ПоказыватьАртикулНоменклатуры КАК НастройкаРМК_ПоказыватьАртикулНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ПоказыватьКодНоменклатуры КАК НастройкаРМК_ПоказыватьКодНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ШаблонЧекаПродажи КАК НастройкаРМК_ШаблонЧекаПродажи,
	|	НастройкиРабочегоМестаКассира.ШаблонЧекаВозврата КАК НастройкаРМК_ШаблонЧекаВозврата,
	|	НастройкиРабочегоМестаКассира.РазрешитьВыборПродавца КАК НастройкаРМК_РазрешитьВыборПродавца,
	|	НастройкиРабочегоМестаКассира.ПродажиСНесколькихКассККМ КАК НастройкаРМК_ПродажиСНесколькихКассККМ,
	|	НастройкиРабочегоМестаКассира.ОсновнаяКассаККМ КАК НастройкаРМК_ОсновнаяКассаККМ,
	|	НастройкиРабочегоМестаКассира.ОжидатьРезультатПроверкиМарок КАК НастройкаРМК_ОжидатьРезультатПроверкиМарок,
	|	ИспользоватьЗапретПродаж.Значение КАК Константа_ИспользоватьЗапретПродаж,
	|	ВестиСведенияДляДекларацийПоАлкогольнойПродукции.Значение КАК Константа_ВестиСведенияДляДекларацийПоАлкогольнойПродукции,
	|	НастройкиРабочегоМестаКассира.СпособФормированияТоварногоЧека КАК НастройкаРМК_СпособФормированияТоварногоЧека,
	|	НастройкиРабочегоМестаКассира.ВертикальнаяОриентация КАК НастройкаРМК_ВертикальнаяОриентация,
	|	НастройкиРабочегоМестаКассира.ОтображатьНумерациюСтрок КАК НастройкаРМК_ОтображатьНумерациюСтрок,
	|	НастройкиРабочегоМестаКассира.РежимОтображенияСкидки КАК НастройкаРМК_РежимОтображенияСкидки
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира,
	|	Константа.ИспользоватьЗапретПродаж КАК ИспользоватьЗапретПродаж,
	|	Константа.ВестиСведенияДляДекларацийПоАлкогольнойПродукции КАК ВестиСведенияДляДекларацийПоАлкогольнойПродукции
	|ГДЕ
	|	НастройкиРабочегоМестаКассира.Ссылка = &НастройкаРМК");
	
	Запрос.УстановитьПараметр("НастройкаРМК", НастройкаРМК.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СтруктураНастроек = Новый Структура;
	Для Каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
		СтруктураНастроек.Вставить(КолонкаЗапроса.Имя, Выборка[КолонкаЗапроса.Имя]);
	КонецЦикла;
	
	ТаблицаГорячиеКлавиши = НастройкаРМК.ГорячиеКлавиши.Выгрузить();
	ТаблицаГорячиеКлавиши.Колонки.Удалить("НомерСтроки");
	ТаблицаГорячиеКлавиши.Колонки.Удалить("ИсходныйНомерСтроки");
	СтруктураНастроек.Вставить("НастройкаРМК_ГорячиеКлавиши", ТаблицаГорячиеКлавиши);
	
	ТаблицаБыстрыеТовары = НастройкаРМК.БыстрыеТовары.Выгрузить(, "Номенклатура, Характеристика");
	СтруктураНастроек.Вставить("НастройкаРМК_БыстрыеТовары", ТаблицаБыстрыеТовары);
	
КонецПроцедуры

// Процедура производит переопределение запроса для формирования списка продавцов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора продавцов.
//
Процедура ПереопределитьЗапросДоступныхПродавцов(Форма) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Продавец
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ЭтоГруппа";
	
	Форма.СписокПродавцов.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

// Заполняет ставку НДС для товара по данным системы налогообложения.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные текущего объекта.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  СНОПоУмолчанию - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - СНО по умолчанию в РМК.
//  СтавкаНДС - ОпределяемыйТип.СтавкаНДСРМК - ставка НДС для заполнения.
//
Процедура ЗаполнитьСтавкуНДС(Объект, ТекущаяСтрока, СНОПоУмолчанию, СтавкаНДС) Экспорт
	
	Если ТекущаяСтрока.Свойство("Партия") И ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Партия, "НалогообложениеНДС") = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Возврат;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Партия, "НалогообложениеНДС") = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			Дата = ТекущаяДатаСеанса();
			ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидСтавкиНДС");
			
			Если НЕ ЗначениеЗаполнено(ВидСтавкиНДС) Тогда
				ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Организация, "ВидСтавкиНДСПоУмолчанию");
			КонецЕсли;
			
			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, Дата);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	
	ПрименяетсяНДС = ТекущаяСтрока.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	Если ПрименяетсяНДС Тогда
		Дата = ТекущаяДатаСеанса();
		ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидСтавкиНДС");
		Если НЕ ЗначениеЗаполнено(ВидСтавкиНДС) Тогда
			ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Организация, "ВидСтавкиНДСПоУмолчанию");
		КонецЕсли;
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, Дата);
	Иначе
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает в базу штрихкод.
//
// Параметры:
//  ДанныеСтроки - Структура - данные для записи в регистр штрихкодов.
//
Процедура ЗаписатьШтрихкод(ДанныеСтроки) Экспорт
	
	Штрихкод = ДанныеСтроки.Штрихкод;
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(Штрихкод, 2) = "29" И ЗначениеЗаполнено(ДанныеСтроки.КодМаркировки) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи                  = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Штрихкод         = ДанныеСтроки.Штрихкод;
		МенеджерЗаписи.Номенклатура     = ДанныеСтроки.Номенклатура;
		МенеджерЗаписи.Характеристика   = ДанныеСтроки.Характеристика;
		МенеджерЗаписи.ЕдиницаИзмерения = ДанныеСтроки.Упаковка;
		МенеджерЗаписи.Партия           = ДанныеСтроки.Партия;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи в регистр ""ШтрихкодыНоменклатуры"".'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
	
	КонецПопытки;
	
КонецПроцедуры

// Возвращает структуру дисконтной карты
//
// Параметры:
//  СтруктураРезультат - Структура - параметры создания карты лояльности.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура СоздатьЛокальноКартуЛояльности(СтруктураРезультат, Форма) Экспорт
	
	ДанныеКарты = Новый Структура;
	ДанныеКарты.Вставить("ИдентификаторКартыКлиента", Форма.НоваяКартаНомер);
	ДанныеКарты.Вставить("ГУИДВидаКарты", Форма.НоваяКартаВидКарты);
	ДанныеКарты.Вставить("Контрагент", Форма.Объект.Контрагент);
	ДанныеКарты.Вставить("Клиент", Форма.НоваяКартаФИО);
	ДанныеКарты.Вставить("НомерТелефона", Форма.НоваяКартаТелефон);
	ДанныеКарты.Вставить("АдресЭП", Форма.НоваяКартаПочта);
	ДанныеКарты.Вставить("ДатаРождения",
		ИнтерфейсРМКСлужебныйКлиентСервер.ПреобразоватьДатуИзСтроковогоПредставления(Форма.НоваяКартаДатаРождения));
	
	КартаКлиента = Неопределено;
	СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиКартуКлиента(ДанныеКарты, КартаКлиента);
	
	Если ЗначениеЗаполнено(КартаКлиента) Тогда
		СтруктураРезультат.ТекстОшибки = НСтр("ru = 'Карта с текущими параметрами уже существует'");
		СтруктураРезультат.ЕстьОшибки  = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		КартаКлиента = Неопределено;
		ДругойКлиент = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.СоздатьКартуКлиента(ДанныеКарты, КартаКлиента, ДругойКлиент);
		Если Не ЗначениеЗаполнено(КартаКлиента) Тогда
			Если ЗначениеЗаполнено(ДругойКлиент) Тогда
				СтруктураРезультат.ТекстОшибки = НСтр("ru = 'Клиент с текущим e-mail, но другим телефоном уже существует'");
				СтруктураРезультат.ЕстьОшибки  = Истина;
				Возврат;
			Иначе
				ВызватьИсключение НСтр("ru = 'Зафиксированы ошибки при создании карты, подробности в журнале регистрации.'");
			КонецЕсли;
		КонецЕсли;
		Форма.Объект.ДисконтнаяКарта = КартаКлиента;
		СтруктураРезультат.ЕстьОшибки = Ложь;
		ВладелецКарты = КартаКлиента.ВладелецКарты;
		ДатаРожденияСтрокой
		= ?(ЗначениеЗаполнено(ВладелецКарты.ДатаРождения), Формат(ВладелецКарты.ДатаРождения, "ДФ=dd.MM.yyyy"), "");
		Форма.Объект.Контрагент = ВладелецКарты;
		Форма.НайденнаяКартаНомер = ?(ЗначениеЗаполнено(КартаКлиента.КодКартыШтрихкод),
									КартаКлиента.КодКартыШтрихкод, 
									КартаКлиента.КодКартыМагнитный);
		Форма.НайденнаяКартаФИО = ?(ЗначениеЗаполнено(ВладелецКарты.ФИО), 
									ВладелецКарты.ФИО,
									ВладелецКарты.Наименование);
		Форма.НайденнаяКартаДатаРождения = ДатаРожденияСтрокой;
		Форма.НайденнаяКартаТелефон = ВладелецКарты.НомерТелефонаДляПоиска;
		Форма.НайденнаяКартаПочта = ВладелецКарты.АдресЭПДляПоиска;
		ЗафиксироватьТранзакцию();
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(Форма, Ложь, Ложь);
	Исключение
		ОтменитьТранзакцию();
		Форма.Объект.ДисконтнаяКарта   = Справочники.ДисконтныеКарты.ПустаяСсылка();
		СтруктураРезультат.ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтруктураРезультат.ЕстьОшибки  = Истина;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет исходные данные запрета продаж с выведением статуса обновления.
//
// Параметры:
//  ИсходныеДанные - Структура - содержит десериализованные данные ответа из сервера лояльности.
//  ДанныеОбновлены - Булево - Истина, если данные успешно обновлены.
//
Процедура АктуализироватьДанныеЗапрета(ИсходныеДанные, ДанныеОбновлены) Экспорт
	
	Если ЗначениеЗаполнено(ИсходныеДанные) Тогда
		
		БазовыеУсловияЗапрета = Новый ТаблицаЗначений;
		БазовыеУсловияЗапрета.Колонки.Добавить("ДатаНачалаДействия");
		БазовыеУсловияЗапрета.Колонки.Добавить("ДатаОкончанияДействия");
		БазовыеУсловияЗапрета.Колонки.Добавить("ИдентификаторЗапрета");
		БазовыеУсловияЗапрета.Колонки.Добавить("ИмяЗапрещающегоДокументаМастерСистемы");
		БазовыеУсловияЗапрета.Колонки.Добавить("Организация");
		
		ЗаполнитьЗначенияСвойств(БазовыеУсловияЗапрета.Добавить(), ИсходныеДанные);
		
		ИсходныеДниНеделиЗапрета = Новый ТаблицаЗначений;
		ИсходныеДниНеделиЗапрета.Колонки.Добавить("ДеньНедели");
		ИсходныеДниНеделиЗапрета.Колонки.Добавить("ВремяНачала");
		ИсходныеДниНеделиЗапрета.Колонки.Добавить("ВремяОкончания");
		
		Для каждого День Из ИсходныеДанные.ДниНедели Цикл
			ЗаполнитьЗначенияСвойств(ИсходныеДниНеделиЗапрета.Добавить(), День);
		КонецЦикла;
		
		ДополнительныеУсловияЗапрета = Новый ТаблицаЗначений;
		ДополнительныеУсловияЗапрета.Колонки.Добавить("ВидНоменклатуры");
		ДополнительныеУсловияЗапрета.Колонки.Добавить("ОсобенностьУчета");
		
		ИтоговаяТаблица = БазовыеУсловияЗапрета.СкопироватьКолонки();
		ИтоговаяТаблица.Колонки.Добавить("ДеньНедели");
		ИтоговаяТаблица.Колонки.Добавить("ВремяНачала");
		ИтоговаяТаблица.Колонки.Добавить("ВремяОкончания");
		ИтоговаяТаблица.Колонки.Добавить("ВидНоменклатуры");
		ИтоговаяТаблица.Колонки.Добавить("ОсобенностьУчета");
		
		Для каждого ДополнительноеУсловие Из ИсходныеДанные.ДополнительныеУсловия Цикл
			ЗаполнитьЗначенияСвойств(ДополнительныеУсловияЗапрета.Добавить(), ДополнительноеУсловие);
		КонецЦикла;
		
	#Область Сворачивание_строк_запретов
		
		// Запреты, действующие все дни недели в одно и то же время сворачиваются в одну запись
		
		ДанныеДляСворачивания = ИсходныеДниНеделиЗапрета.Скопировать();
		ДанныеДляСворачивания.Колонки.Добавить("Счетчик");
		
		ДанныеДляПодсчета = Новый Массив;
		Для ш = 0 По ДанныеДляСворачивания.Количество() - 1 Цикл
			ДанныеДляПодсчета.Добавить(1);
		КонецЦикла;
		
		ДанныеДляСворачивания.ЗагрузитьКолонку(ДанныеДляПодсчета, "Счетчик");
		ДанныеДляСворачивания.Свернуть("ВремяНачала,ВремяОкончания", "Счетчик");
		
		// опорная таблица для сворачивания подневных запретов в недельный
		ДниНеделиЗапрета = ИсходныеДниНеделиЗапрета.СкопироватьКолонки();
		
		Для каждого СтрокаДанныхДляСворачивания Из ДанныеДляСворачивания Цикл
			
			// для недельных запретов дни пустые
			Если СтрокаДанныхДляСворачивания.Счетчик = 7 Тогда
				ЗаполнитьЗначенияСвойств(ДниНеделиЗапрета.Добавить(), СтрокаДанныхДляСворачивания);
			Иначе
				
				ОтборПоиска = Новый Структура("ВремяНачала,ВремяОкончания");
				ЗаполнитьЗначенияСвойств(ОтборПоиска, СтрокаДанныхДляСворачивания);
				РезультатПоиска = ИсходныеДниНеделиЗапрета.НайтиСтроки(ОтборПоиска);
				
				Если РезультатПоиска.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ДниНеделиЗапрета.Добавить(), РезультатПоиска[0]);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	#КонецОбласти
		
		// исходные данные для записи в регистр запретов
		Для каждого ЧасыЗапрета Из ДниНеделиЗапрета Цикл
			
			Для каждого ДополнительноеУсловие Из ДополнительныеУсловияЗапрета Цикл
				
				Для каждого БазовоеУсловиеЗапрета Из БазовыеУсловияЗапрета Цикл
					
					ДанныеИтоговойТаблицы = ИтоговаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(ДанныеИтоговойТаблицы, БазовоеУсловиеЗапрета);
					ЗаполнитьЗначенияСвойств(ДанныеИтоговойТаблицы, ДополнительноеУсловие);
					ЗаполнитьЗначенияСвойств(ДанныеИтоговойТаблицы, ЧасыЗапрета);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;

		// Обновить данные:
		// - ранее выгруженные из мастер - системы
		// - с ключом записи, аналогичным полученному из мастер - системы
		// создать новые записи
		
		ИдентификаторЗапрета = БазовыеУсловияЗапрета[0].ИдентификаторЗапрета;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	УсловияЗапретаПродаж.Организация КАК Организация,
		|	УсловияЗапретаПродаж.ВидНоменклатуры КАК ВидНоменклатуры,
		|	УсловияЗапретаПродаж.ОсобенностьУчета КАК ОсобенностьУчета,
		|	УсловияЗапретаПродаж.ДеньНедели КАК ДеньНедели,
		|	УсловияЗапретаПродаж.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	УсловияЗапретаПродаж.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	УсловияЗапретаПродаж.ВремяНачала КАК ВремяНачала,
		|	УсловияЗапретаПродаж.ВремяОкончания КАК ВремяОкончания
		|ИЗ
		|	РегистрСведений.УсловияЗапретаПродаж КАК УсловияЗапретаПродаж
		|ГДЕ
		|	УсловияЗапретаПродаж.ИдентификаторЗапрета = &ИдентификаторЗапрета");
		Запрос.УстановитьПараметр("ИдентификаторЗапрета", ИдентификаторЗапрета);
		
		ЗаписиЗапретов = Запрос.Выполнить().Выбрать();
		
		Пока ЗаписиЗапретов.Следующий() Цикл
		
			ЗаписьЗапрета = РегистрыСведений.УсловияЗапретаПродажРМК.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьЗапрета, ЗаписиЗапретов);
			ЗаписьЗапрета.Удалить();
		
		КонецЦикла;
		
		ЕстьОшибки = Ложь;
		Для каждого НовыйЗапрет Из ИтоговаяТаблица Цикл
		
			ЗаписьНовогоЗапрета = РегистрыСведений.УсловияЗапретаПродажРМК.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьНовогоЗапрета, НовыйЗапрет);
			ЗаписьНовогоЗапрета.Прочитать();
			
			Если НЕ ЗаписьНовогоЗапрета.Выбран() Тогда
				
				ЗаполнитьЗначенияСвойств(ЗаписьНовогоЗапрета, НовыйЗапрет);
				
				Попытка
					ЗаписьНовогоЗапрета.Записать();
				Исключение
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось записать данные запрета продаж'"),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЕстьОшибки = Истина;
					Прервать;
				КонецПопытки;
					
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьОшибки Тогда
			ДанныеОбновлены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текущий торговый объект, который далее используется в РМК.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - текущий торговый объект РМК.
//
Процедура ОпределитьТекущийТорговыйОбъект(ТорговыйОбъект) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	МагазинПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
		"ОсновнаяГруппаСкладов");
	ТорговыйОбъект = МагазинПоУмолчанию;
	
КонецПроцедуры

// Заполняет адрес торгового объекта.
//
// Параметры:
//  АдресМагазина - Строка - адрес торгового объекта.
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для получения адреса.
//
Процедура ЗаполнитьАдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет наличие в документе "ЧекККМ" аклогольной продукции.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - документ, в котором нужно проверить наличии алкогольной продукции.
//  Результат - Булево - Истина, если в документе есть алкогольная продукция.
//
Процедура ПроверитьНаличиеПродукцииЕГАИСВЧекККМ(ЧекККМ, Результат) Экспорт
	
	Если ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ТабличнаяЧасть = ЧекККМ.Запасы;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка
		|ГДЕ
		|	НЕ СпрНоменклатура.ВидМаркировки = ЗНАЧЕНИЕ(Перечисление.ВидыМаркировки.ПустаяСсылка)
		|	И СпрНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)");
		
		Запрос.УстановитьПараметр("ТаблицаТовары", ТабличнаяЧасть.Выгрузить());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Результат = Выборка.Следующий();
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет значение основной организации из настройки РМК.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - значение основной организации.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - настройка РМК, по которой необходимо определить
//                                                                  основную организацию.
//
Процедура ЗаполнитьОрганизациюИзНастройкиРМК(Организация, НастройкаРМК) Экспорт
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаРМК.ОсновнаяКассаККМ, "Владелец");
КонецПроцедуры

// Определяет значение системы налогообложения организации на указанную дату.
//
//  Параметры:
//   Организация - СправочникСсылка.Организации - организация для которой нужно определить СНО.
//   ДатаДокумента - Дата, Неопределено - дата на которую нужно определить тип СНО.
//  
// Возвращаемое значение:
//  СистемыНалогообложенияККТ - Перечисление.ТипыСистемНалогообложенияККТ - значение СНО.
//
Функция ТипСистемыНалогообложенияККТ(Организация, ДатаДокумента) Экспорт
	
	//СНООрганизации = РегистрыСведений.ПрименениеСистемНалогообложения.СистемаНалогообложенияОрганизации(Организация, ДатаДокумента);
	
КонецФункции

// Обновляет данные карты лояльности
//
// Параметры:
//	КартаЛояльности - СправочникСсылка.КартыЛояльности - карта, данные которой будут изменены
//	ДанныеДляИзменения - Структура
//		* НомерКартыДоИзменения - Строка - предыдущее значение номера карты лояльности
//		* МагнитныйКодКартыЛояльности - Строка - магнитный код карты лояльности
//		* НовыйEmailКлиента - Строка - новый email владельца карты
//		* НовыйНомерТелефонаКлиента - Строка - новый номер телефона владельца карты
//
Процедура СохранитьДанныеКартыЛояльности(КартаЛояльности, ДанныеДляИзменения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет реквизиты кассы ККМ.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - Ссылка на кассу ККМ.
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК, Неопределено - (необязательный) ссылка на рабочее место.
//  Реквизиты - Структура:
//    Организация - ОпределяемыйТип.ОрганизацияРМК.
//    ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК.
//    РабочееМесто - ОпределяемыйТип.РабочееМестоРМК.
//    КассаККМ - ОпределяемыйТип.КассаККМРМК.
//
Процедура ЗаполнитьРеквизитыКассыККМ(КассаККМ, РабочееМесто, Реквизиты) Экспорт
	
	//Возврат Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
	
КонецПроцедуры

// Процедура заполняет организацию продажи в строке.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьОрганизациюПродажи(ДанныеСтроки, Форма) Экспорт
	
	КэшРаспределенияПродаж = Форма.КэшРаспределенияПродаж;
	
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("КатегорияНоменклатуры",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Номенклатура, "КатегорияНоменклатуры"));
	ДанныеНоменклатуры.Вставить("Родитель",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Номенклатура, "Родитель"));
	
	ОрганизацияИСпецРежимПродажи = ОрганизацияИСпецРежим(КэшРаспределенияПродаж, ДанныеНоменклатуры);
	
	Организация = Форма.ОсновнаяОрганизация;
	СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ОрганизацияИСпецРежимПродажи) Тогда
		
		Если ЗначениеЗаполнено(ОрганизацияИСпецРежимПродажи.Организация) Тогда
			Организация = ОрганизацияИСпецРежимПродажи.Организация;
		КонецЕсли;
		
		СпециальныйНалоговыйРежим = ОрганизацияИСпецРежимПродажи.СпециальныйНалоговыйРежим;
		
		Если СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕНВД Тогда
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
		ИначеЕсли СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕСХН Тогда
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕСН;
		ИначеЕсли СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
			СистемаНалогообложения =  Перечисления.ТипыСистемНалогообложенияККТ.Патент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		ТорговыйОбъект = Форма.Объект.ТорговыйОбъект;
		СистемаНалогообложения = СистемаНалогообложенияОрганизации(Организация, КэшРаспределенияПродаж, ТорговыйОбъект);
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("СистемаНалогообложения") Тогда
		ДанныеСтроки.СистемаНалогообложения = СистемаНалогообложения;
	КонецЕсли;
	
	ДанныеСтроки.Организация = Организация;
	
КонецПроцедуры

// Процедура производит поиск подарочного сертификата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура НайтиСертификатЛокально(Форма) Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("НомерСертификата", Форма.НомерСертификата);
	ПараметрыПоиска.Вставить("ГУИДСертификата", XMLСтрока(Форма.ВыбранныйСертификат));
	
	ДанныеСертификата = Неопределено;
	СтруктураОтвета = Неопределено;
	СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиПодарочныйСертификат(ПараметрыПоиска, ДанныеСертификата);
	СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ЗапросДанныхПодарочногоСертификата", СтруктураОтвета);
	СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьБалансПодарочногоСертификата(ДанныеСертификата, СтруктураОтвета);
	
	Если СтруктураОтвета.Свойство("GiftCardBalance") И СтруктураОтвета.GiftCardBalance > 0 Тогда
		Форма.СуммаСертификата = СтруктураОтвета.GiftCardBalance;
	КонецЕсли;
	
	Форма.ПодарочныйСертификат = ДанныеСертификата.ПодарочныйСертификат;
	
КонецПроцедуры

// Процедура производит поиск бонусных баллов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура НайтиБонусыЛокально(Форма) Экспорт
	
	ДисконтнаяКарта = Форма.Объект.ДисконтнаяКарта;
	
	Если Не ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеБонуснойКарты = РаботаСБонусами.ПолучитьДанныеБонуснойКарты(ДисконтнаяКарта, ТекущаяДатаСеанса());
	РеквизитыБонуснойПрограммы = РаботаСБонусами.РеквизитыБонуснойПрограммы(ДисконтнаяКарта);
	
	Форма.КоличествоБонусов = ДанныеБонуснойКарты.Остаток;
	Форма.БонусыДоступноКОплате = Форма.КоличествоБонусов;
	Форма.ПроцентОплатыБонусами = РеквизитыБонуснойПрограммы.МаксимальныйПроцентОплаты;
	
	Форма.Элементы.ОплатитьБонусами.Доступность = (Форма.КоличествоБонусов > 0 И Форма.Элементы.ГруппаОплатаБонусами.Доступность);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьДоступныхБонусов(Форма.Элементы, Истина);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Бонусами можно оплатить до %1%2 от суммы чека'"), Форма.ПроцентОплатыБонусами, "%");
	Форма.Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = ТекстСообщения;
	Форма.Элементы.ИнформацияМожноОплатитьБонусами.Заголовок = ТекстСообщения;
	
КонецПроцедуры

// Определяет необходимость контроля остатков при пробитии чека.
//
// Параметры:
//  ТребуетсяКонтрольОстатков - Булево - признак необходимости контроля остатков.
//
Процедура ОпределитьНеобходимостьКонтролироватьОстатки(ТребуетсяКонтрольОстатков) Экспорт
	
	ТребуетсяКонтрольОстатков = Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	
КонецПроцедуры

// Процедура производит контроль остатков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  КонтрольОстатковПройден - Булево - признак успешной проверки остатков.
//  ТекстОшибки - Строка - текст возможной ошибки.
//
Процедура ПроверитьНаличиеТоваров(Форма, КонтрольОстатковПройден, ТекстОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаТовары = Форма.Объект.Товары.Выгрузить();
	Если Не Форма.ИспользоватьВыборСкладаПриПродаже Тогда
		ПустойТорговыйОбъект = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		ТаблицаТовары.ЗаполнитьЗначения(ПустойТорговыйОбъект, "ТорговыйОбъект");
	КонецЕсли;
	Если Форма.ИспользоватьЗаменуТоваров Тогда
		СтруктураОтбора = Новый Структура("ТоварКЗамене", Истина);
		СтрокиКЗамене = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаКЗамене Из СтрокиКЗамене Цикл
			ТаблицаТовары.Удалить(СтрокаКЗамене);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Оплачена", Истина);
	ОплаченныеТовары = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
	Для Каждого ОплаченныйТовар Из ОплаченныеТовары Цикл
		ТаблицаТовары.Удалить(ОплаченныйТовар);
	КонецЦикла;
	
	МассивОрганизаций = Новый Массив;
	Если Константы.УчетПоКомпании.Получить() Тогда
		МассивОрганизаций.Добавить(Константы.Компания.Получить());
	Иначе
		МассивОрганизаций = Форма.ТаблицаКассККМОрганизаций.Выгрузить(, "Организация");
		ДополнитьМассивОрганизацийСУчетомНастроекПередачи(МассивОрганизаций);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКассККМ.Организация КАК Организация,
	|	ТаблицаКассККМ.КассаККМ КАК КассаККМ
	|ПОМЕСТИТЬ ТаблицаКассККМ
	|ИЗ
	|	&ТаблицаКассККМ КАК ТаблицаКассККМ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Партия КАК Партия,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ПредставлениеЕдиницыИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаТовары.ТорговыйОбъект КАК ТорговыйОбъект
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Количество * ТаблицаТовары.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Партия КАК Партия,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Организация КАК Организация,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ТорговыйОбъект = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СпрКассыККМ.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|		ИНАЧЕ ТаблицаТовары.ТорговыйОбъект
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ТаблицаТовары.ЕдиницаИзмеренияПредставление КАК ЕдиницаИзмеренияПредставление,
	|	ВЫБОР
	|		КОГДА СпрПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СпрПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КонтрольОстатковСерий
	|ПОМЕСТИТЬ ИтоговаяТаблицаТовары
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМ КАК ТаблицаКассККМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК СпрКассыККМ
	|			ПО ТаблицаКассККМ.КассаККМ = СпрКассыККМ.Ссылка
	|		ПО ТаблицаТовары.Организация = ТаблицаКассККМ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолитикаУчетаСерий КАК СпрПолитикаУчетаСерий
	|			ПО СпрНоменклатура.ПолитикаУчетаСерий = СпрПолитикаУчетаСерий.Ссылка
	|		ПО ТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры В(&ТипыНоменклатуры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Партия,
	|	Организация,
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия КАК Партия,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыНаСкладахОстатки.КоличествоОстаток КАК ОстатокНаСкладе
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			&Дата,
	|			Организация В (&МассивОрганизаций)
	|				И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия) В
	|					(ВЫБРАТЬ
	|						ТоварыДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ТоварыДокумента.Номенклатура КАК Номенклатура,
	|						ТоварыДокумента.Характеристика КАК Характеристика,
	|						ТоварыДокумента.Партия КАК Партия
	|					ИЗ
	|						ИтоговаяТаблицаТовары КАК ТоварыДокумента
	|					ГДЕ
	|						НЕ ТоварыДокумента.КонтрольОстатковСерий)) КАК ЗапасыНаСкладахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыТоваровОрганизацийОстатки.Номенклатура КАК Номенклатура,
	|	РезервыТоваровОрганизацийОстатки.Характеристика КАК Характеристика,
	|	РезервыТоваровОрганизацийОстатки.Партия КАК Партия,
	|	РезервыТоваровОрганизацийОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РезервыТоваровОрганизацийОстатки.КоличествоОстаток КАК КоличествоРезерв
	|ПОМЕСТИТЬ ТаблицаРезерв
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&Дата,
	|			Организация В (&МассивОрганизаций)
	|				И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия) В
	|					(ВЫБРАТЬ
	|						ТоварыДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ТоварыДокумента.Номенклатура КАК Номенклатура,
	|						ТоварыДокумента.Характеристика КАК Характеристика,
	|						ТоварыДокумента.Партия КАК Партия
	|					ИЗ
	|						ИтоговаяТаблицаТовары КАК ТоварыДокумента)
	|				И НЕ ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И НЕ ЗаказПокупателя = &ЗаказПокупателя) КАК РезервыТоваровОрганизацийОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	|	СерииНоменклатурыОстатки.Характеристика КАК Характеристика,
	|	СерииНоменклатурыОстатки.Партия КАК Партия,
	|	СерииНоменклатурыОстатки.Серия КАК Серия,
	|	СерииНоменклатурыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СерииНоменклатурыОстатки.КоличествоОстаток КАК КоличествоСерий
	|ПОМЕСТИТЬ ТаблицаОстатокСерий
	|ИЗ
	|	РегистрНакопления.СерииНоменклатуры.Остатки(
	|			&Дата,
	|			Организация В (&МассивОрганизаций)
	|				И (СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Серия) В
	|					(ВЫБРАТЬ
	|						ТоварыДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ТоварыДокумента.Номенклатура КАК Номенклатура,
	|						ТоварыДокумента.Характеристика КАК Характеристика,
	|						ТоварыДокумента.Партия КАК Партия,
	|						ТоварыДокумента.Серия КАК Серия
	|					ИЗ
	|						ИтоговаяТаблицаТовары КАК ТоварыДокумента
	|					ГДЕ
	|						ТоварыДокумента.КонтрольОстатковСерий)) КАК СерииНоменклатурыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	Серия,
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ИтоговаяТаблицаТовары.Серия КАК Серия,
	|	ИтоговаяТаблицаТовары.Количество КАК Количество,
	|	ИтоговаяТаблицаТовары.Партия КАК Партия,
	|	ИтоговаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ИтоговаяТаблицаТовары.Организация КАК Организация,
	|	ИтоговаяТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИтоговаяТаблицаТовары.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаОстатки.ОстатокНаСкладе, 0) + ЕСТЬNULL(ТаблицаОстатокСерий.КоличествоСерий, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ТаблицаОстатокСерий.КоличествоСерий, 0) КАК КоличествоСерий,
	|	ЕСТЬNULL(ТаблицаРезерв.КоличествоРезерв, 0) КАК КоличествоРезерв,
	|	ИтоговаяТаблицаТовары.ЕдиницаИзмеренияПредставление КАК ЕдиницаИзмеренияПредставление
	|ПОМЕСТИТЬ ТаблицаИтоговоеКоличество
	|ИЗ
	|	ИтоговаяТаблицаТовары КАК ИтоговаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО ИтоговаяТаблицаТовары.Номенклатура = ТаблицаОстатки.Номенклатура
	|			И ИтоговаяТаблицаТовары.Характеристика = ТаблицаОстатки.Характеристика
	|			И ИтоговаяТаблицаТовары.Партия = ТаблицаОстатки.Партия
	|			И ИтоговаяТаблицаТовары.СтруктурнаяЕдиница = ТаблицаОстатки.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРезерв КАК ТаблицаРезерв
	|		ПО ИтоговаяТаблицаТовары.Номенклатура = ТаблицаРезерв.Номенклатура
	|			И ИтоговаяТаблицаТовары.Характеристика = ТаблицаРезерв.Характеристика
	|			И ИтоговаяТаблицаТовары.Партия = ТаблицаРезерв.Партия
	|			И ИтоговаяТаблицаТовары.СтруктурнаяЕдиница = ТаблицаРезерв.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатокСерий КАК ТаблицаОстатокСерий
	|		ПО ИтоговаяТаблицаТовары.Номенклатура = ТаблицаОстатокСерий.Номенклатура
	|			И ИтоговаяТаблицаТовары.Характеристика = ТаблицаОстатокСерий.Характеристика
	|			И ИтоговаяТаблицаТовары.Партия = ТаблицаОстатокСерий.Партия
	|			И ИтоговаяТаблицаТовары.Серия = ТаблицаОстатокСерий.Серия
	|			И ИтоговаяТаблицаТовары.СтруктурнаяЕдиница = ТаблицаОстатокСерий.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИтоговоеКоличество.Номенклатура КАК Номенклатура,
	|	ТаблицаИтоговоеКоличество.Характеристика КАК Характеристика,
	|	ТаблицаИтоговоеКоличество.Серия КАК Серия,
	|	ТаблицаИтоговоеКоличество.Количество КАК Количество,
	|	ТаблицаИтоговоеКоличество.Партия КАК Партия,
	|	ТаблицаИтоговоеКоличество.НомерСтроки КАК НомерСтроки,
	|	ТаблицаИтоговоеКоличество.Организация КАК Организация,
	|	ТаблицаИтоговоеКоличество.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаИтоговоеКоличество.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаИтоговоеКоличество.КоличествоОстаток - ТаблицаИтоговоеКоличество.КоличествоРезерв КАК КоличествоОстаток,
	|	ТаблицаИтоговоеКоличество.КоличествоСерий КАК КоличествоСерий,
	|	ТаблицаИтоговоеКоличество.КоличествоРезерв КАК КоличествоРезерв,
	|	ТаблицаИтоговоеКоличество.КоличествоОстаток - ТаблицаИтоговоеКоличество.Количество - ТаблицаИтоговоеКоличество.КоличествоРезерв КАК НедостающееКоличество,
	|	ВЫБОР
	|		КОГДА ТаблицаИтоговоеКоличество.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаИтоговоеКоличество.ЕдиницаИзмеренияПредставление КАК ЕдиницаИзмеренияПредставление
	|ПОМЕСТИТЬ ТаблицаИтог
	|ИЗ
	|	ТаблицаИтоговоеКоличество КАК ТаблицаИтоговоеКоличество
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО ТаблицаИтоговоеКоличество.ЕдиницаИзмерения = СпрЕдиницыИзмерения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИтог.Номенклатура КАК Номенклатура,
	|	ТаблицаИтог.Характеристика КАК Характеристика,
	|	ТаблицаИтог.КоличествоОстаток КАК Количество,
	|	ТаблицаИтог.Партия КАК Партия,
	|	ТаблицаИтог.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаИтог.НедостающееКоличество КАК НедостающееКоличество,
	|	ЕСТЬNULL(СпрСтруктурныеЕдиницы.ТипСтруктурнойЕдиницы, ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.ПустаяСсылка)) КАК ТипСтруктурнойЕдиницы,
	|	ТаблицаИтог.ЕдиницаИзмеренияПредставление КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаИтог.НомерСтроки КАК НомерСтроки,
	|	ТаблицаИтог.Коэффициент КАК Коэффициент
	|ИЗ
	|	ТаблицаИтог КАК ТаблицаИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СпрСтруктурныеЕдиницы
	|		ПО ТаблицаИтог.СтруктурнаяЕдиница = СпрСтруктурныеЕдиницы.Ссылка
	|ГДЕ
	|	ТаблицаИтог.Количество > ТаблицаИтог.КоличествоОстаток";
	
	ТипыНоменклатуры = Новый Массив;
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ВидЦен", Форма.РозничныйВидЦены);
	Запрос.УстановитьПараметр("ТаблицаКассККМ", Форма.ТаблицаКассККМОрганизаций.Выгрузить());
	Запрос.УстановитьПараметр("ЗаказПокупателя", Форма.Объект.ЗаказПокупателя);
	Запрос.УстановитьПараметр("ТипыНоменклатуры", ТипыНоменклатуры);
	
	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
		|%ТипСтруктурнойЕдиницы% %СтруктурнаяЕдиницаПредставление%
		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%, недостаточно %Количество% %ЕдиницаИзмерения%'");
	
	УчетПоНесколькимСкладам = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
	УчетПоНесколькимПодразделениям = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Коэффициент = ?(ВыборкаЗаписей.Коэффициент = 0, 1, ВыборкаЗаписей.Коэффициент);
		
		Форма.Элементы.Товары.ТекущаяСтрока = Форма.Объект.Товары[ВыборкаЗаписей.НомерСтроки - 1].ПолучитьИдентификатор();
		
		Если (НЕ УчетПоНесколькимСкладам И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад)
			ИЛИ (НЕ УчетПоНесколькимПодразделениям
			И ВыборкаЗаписей.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение)Тогда
			
			ПредставлениеСтруктурнойЕдиницы = "";
		Иначе
			ПредставлениеСтруктурнойЕдиницы = Справочники.СтруктурныеЕдиницы.Представление(
				ВыборкаЗаписей.СтруктурнаяЕдиница);
		КонецЕсли;
		
		ПредставлениеНоменклатуры = Справочники.Номенклатура.Представление(ВыборкаЗаписей.Номенклатура,
			ВыборкаЗаписей.Характеристика, ВыборкаЗаписей.Партия);
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипСтруктурнойЕдиницы%",
			Перечисления.ТипыСтруктурныхЕдиниц.Представление(ВыборкаЗаписей.ТипСтруктурнойЕдиницы));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтруктурнаяЕдиницаПредставление%", ПредставлениеСтруктурнойЕдиницы);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", ВыборкаЗаписей.Количество / Коэффициент);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", -ВыборкаЗаписей.НедостающееКоличество / Коэффициент);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%",
			СокрЛП(ВыборкаЗаписей.ЕдиницаИзмеренияПредставление));
		
		ТекстОшибки = ТекстОшибки + ?(КонтрольОстатковПройден, "", Символы.ПС) + ТекстСообщения + Символы.ПС;
		
		КонтрольОстатковПройден = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьМассивОрганизацийСУчетомНастроекПередачи(МассивОрганизаций)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкаПередачиТоваровМеждуОрганизациями.ОрганизацияВладелец КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями КАК НастройкаПередачиТоваровМеждуОрганизациями
	|ГДЕ
	|	НастройкаПередачиТоваровМеждуОрганизациями.ОрганизацияПродавец В (&МассивОрганизаций)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = МассивОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты эквайринговой операции Чека продажи.
//
// Параметры:
//  ЧекПродажи - ОпределяемыйТип.ЧекККМРМК - чек продажи, основание чека на возврат.
//  Реквизиты - Структура:
//    НомерПлатежнойКарты - Строка.
//    НомерЧекаЭТ - Строка.
//    СсылочныйНомер - Строка.
//    ЭквайринговыйТерминал - ОпределяемыйТип.ЭквайринговыйТерминалРМК.
//
Процедура ЗаполнитьРеквизитыЭквайринговойОперации(ЧекПродажи, Реквизиты) Экспорт
	
	Для Каждого СтрокаОплатыПродажи Из ЧекПродажи.БезналичнаяОплата Цикл
		Если СтрокаОплатыПродажи.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
			
			ЗаполнитьЗначенияСвойств(Реквизиты, СтрокаОплатыПродажи);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает статус аннулированный у чекаККМ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - документ для изменения статуса.
//
Процедура АннулироватьЧек(ЧекККМ) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		Если ТипЗнч(ЧекККМ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ЧекККМ");
		Иначе
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ЧекККМВозврат");
		КонецЕсли;
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ЧекККМ);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ЧекККМОбъект = ЧекККМ.ПолучитьОбъект();
		ЧекККМОбъект.УстановитьПометкуУдаления(Истина);
		Если ТипЗнч(ЧекККМ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ЧекККМОбъект.Статус = Перечисления.СтатусыЧековККМ.ПустаяСсылка();
		КонецЕсли;
		
		ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись документа ЧекККМ при аннулировании.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Переопределяет признак, который определяет возможность запуска РМК.
//
// Параметры:
//  МожноОткрыватьРМК - Булево - признак возможности запуска РМК.
//
Процедура ОпределитьВозможностьЗапускаРМК(МожноОткрыватьРМК) Экспорт
	
	МожноОткрыватьРМК = ВключеноИспользованиеНовогоРМК();
	
КонецПроцедуры

// Возвращает строку для печати на ФР разбитую по ширине ленты.
//
// Параметры:
//  МассивЧеков - Массив - массив документов, для которых нужно сформировать текст товарного чека.
//  ТекстЧека - Строка - текст товарного чека.
//  ШиринаЛенты - Число - ширина ленты печати.
//
Процедура СформироватьТекстТоварногоЧека(МассивЧеков, ТекстЧека, ШиринаЛенты) Экспорт
	
	РеквизитыДокумента = Новый Структура();
	РеквизитыДокумента.Вставить("Номер");
	РеквизитыДокумента.Вставить("Дата");
	РеквизитыДокумента.Вставить("Префикс");
	
	#Область ТекстЗапроса

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМБезналичнаяОплата.Ссылка КАК Ссылка,
	|	СУММА(ЧекККМБезналичнаяОплата.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втБезналичныеОплаты
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМБезналичнаяОплата
	|ГДЕ
	|	ЧекККМБезналичнаяОплата.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМБезналичнаяОплата.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЧекККМБезналичнаяОплата.Сумма) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка,
	|	СУММА(ЧекККМВозвратБезналичнаяОплата.Сумма)
	|ИЗ
	|	Документ.ЧекККМВозврат.БезналичнаяОплата КАК ЧекККМВозвратБезналичнаяОплата
	|ГДЕ
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЧекККМВозвратБезналичнаяОплата.Сумма) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.СтруктурнаяЕдиница КАК ТорговыйОбъект,
	|	Документ.ХозяйственнаяОперация КАК ВидОперации,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК НаименованиеОрганизации,
	|	Документ.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.СтруктурнаяЕдиница) КАК ТорговыйОбъектПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Автор КАК Ответственный
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЧекККМВозврат.Номер,
	|	ЧекККМВозврат.Дата,
	|	ЧекККМВозврат.СтруктурнаяЕдиница,
	|	ЧекККМВозврат.ХозяйственнаяОперация,
	|	ИСТИНА,
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМВозврат.Организация),
	|	ЧекККМВозврат.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо),
	|	ЧекККМВозврат.Организация,
	|	ЧекККМВозврат.СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМВозврат.СтруктурнаяЕдиница),
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМВозврат.Организация),
	|	ЧекККМВозврат.Автор
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплата.ВидОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты) КАК ПредставлениеТипОплаты,
	|	СУММА(ТаблицаОплата.Сумма) КАК СуммаБезналичныхОплат,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И НЕ ТаблицаОплата.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ЧекККМВозврат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ТаблицаОплата.Сумма) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОплата.ВидОплаты,
	|	ТаблицаОплата.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты),
	|	СУММА(0),
	|	СУММА(ТаблицаОплата.Сумма - ЕСТЬNULL(втБезналичныеОплаты.Сумма, 0))
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ТаблицаОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБезналичныеОплаты КАК втБезналичныеОплаты
	|		ПО ТаблицаОплата.Ссылка = втБезналичныеОплаты.Ссылка
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И НЕ ТаблицаОплата.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ЧекККМВозврат)
	|	И ТаблицаОплата.Сумма - ЕСТЬNULL(втБезналичныеОплаты.Сумма, 0) > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ТаблицаОплата.Сумма) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратБезналичнаяОплата.ВидОплаты,
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМВозвратБезналичнаяОплата.ВидОплаты),
	|	СУММА(ЧекККМВозвратБезналичнаяОплата.Сумма),
	|	СУММА(ЧекККМВозвратБезналичнаяОплата.Сумма)
	|ИЗ
	|	Документ.ЧекККМВозврат.БезналичнаяОплата КАК ЧекККМВозвратБезналичнаяОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБезналичныеОплаты КАК втБезналичныеОплаты
	|		ПО ЧекККМВозвратБезналичнаяОплата.Ссылка = втБезналичныеОплаты.Ссылка
	|ГДЕ
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка В(&МассивОбъектов)
	|	И НЕ ЧекККМВозвратБезналичнаяОплата.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Справочник.ХозяйственныеОперации.ЧекККМВозврат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМВозвратБезналичнаяОплата.Ссылка,
	|	ЧекККМВозвратБезналичнаяОплата.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ЧекККМВозвратБезналичнаяОплата.Сумма) = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратЗапасы.НомерСтроки,
	|	ЧекККМВозвратЗапасы.Номенклатура,
	|	ЧекККМВозвратЗапасы.Номенклатура.Представление,
	|	ЧекККМВозвратЗапасы.Номенклатура.НаименованиеПолное,
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМВозвратЗапасы.Характеристика),
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМВозвратЗапасы.Номенклатура.ЕдиницаИзмерения),
	|	ПРЕДСТАВЛЕНИЕ(ЧекККМВозвратЗапасы.Номенклатура.ЕдиницаИзмерения),
	|	ЧекККМВозвратЗапасы.Количество,
	|	ЧекККМВозвратЗапасы.Цена,
	|	ЧекККМВозвратЗапасы.Сумма,
	|	ЧекККМВозвратЗапасы.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
	|ГДЕ
	|	ЧекККМВозвратЗапасы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивЧеков);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДокументЧекККМ  = Новый ТекстовыйДокумент();

	// Получение макета
	МакетЧекаККМ		= Документы.ЧекККМ.ПолучитьМакет("ЧекПокупателя");
	
	ОбластьШапкаЧека	= МакетЧекаККМ.ПолучитьОбласть(СтрШаблон("ШапкаЧека%1", ШиринаЛенты));
	ОбластьТелоЧека		= МакетЧекаККМ.ПолучитьОбласть(СтрШаблон("ТелоЧека%1", ШиринаЛенты));
	ОбластьПодвалЧека	= МакетЧекаККМ.ПолучитьОбласть(СтрШаблон("ПодвалЧека%1", ШиринаЛенты));
	ОбластьРазрывЧека	= МакетЧекаККМ.ПолучитьОбласть(СтрШаблон("РазрывЧека%1", ШиринаЛенты));
	
	ВыборкаПоДокументам = Результаты[1].Выбрать();
	ВыборкаПоТабличнойЧастиОплата = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоТабличнымЧастям = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			ДокументЧекККМ.Вывести(ОбластьРазрывЧека);
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		СинонимДокумента = НСтр("ru='Товарный чек'");
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			СинонимДокумента = НСтр("ru = 'Товарный чек (возврат)'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьШапкаЧека.Параметры.Заголовок = ОбщегоНазначенияРМК.СформироватьЗаголовокДокумента(РеквизитыДокумента,
			СинонимДокумента);
		СведенияОПоставщике = СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация,
			ВыборкаПоДокументам.Дата);
		ОбластьШапкаЧека.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьШапкаЧека.Параметры.Организация = ВыборкаПоДокументам.НаименованиеОрганизации;
		
		ДокументЧекККМ.Вывести(ОбластьШапкаЧека);
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьТелоЧека.Параметры.НаименованиеТовара = ОбщегоНазначенияРМК.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаПоСтрокамТЧ.НоменклатураПредставление, ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
					
					
			ФорматКоличество = Формат(ВыборкаПоСтрокамТЧ.Количество, НСтр("ru = 'ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0'"));
			ФорматЦена = Формат(ВыборкаПоСтрокамТЧ.Цена, НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0'"));
			
			ОбластьТелоЧека.Параметры.КоличествоЦена = СтрШаблон("%1 х %2", ФорматКоличество, ФорматЦена);
			
			КонечнаяСкидка = ВыборкаПоСтрокамТЧ.Количество * ВыборкаПоСтрокамТЧ.Цена - ВыборкаПоСтрокамТЧ.Сумма;

			Если КонечнаяСкидка <> 0 Тогда
				
				// АПК:1036-выкл имя параметра шаблона
				ОбластьТелоЧека.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0, НСтр("ru = 'Скидка:'"), НСтр("ru = 'Надбавка:'"));
				// АПК:1036-вкл
				
				ОбластьТелоЧека.Параметры.Скидка = Формат(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка),
					НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0'"));
					
			КонецЕсли;
			
			ДокументЧекККМ.Вывести(ОбластьТелоЧека);
			
		КонецЦикла;
		ДокументЧекККМ.УдалитьСтроку(ДокументЧекККМ.КоличествоСтрок());
		
		ОбластьПодвалЧека.Параметры.Итог = Формат(ВыборкаПоДокументам.СуммаДокумента,
			НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0'"));
		
		ОбластьПодвалЧека.Параметры.Сотрудник =  ОбщегоНазначенияРМК.ФамилияИнициалыФизЛица(
			ВыборкаПоДокументам.Ответственный);
		
		ДокументЧекККМ.Вывести(ОбластьПодвалЧека);
		
	КонецЦикла;
	
	КоличествоСтрок = ДокументЧекККМ.КоличествоСтрок();
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		
		ТекстЧека = ТекстЧека + ДокументЧекККМ.ПолучитьСтроку(Индекс); 
		
		Если НЕ Индекс = КоличествоСтрок Тогда
			ТекстЧека = ТекстЧека + Символы.ПС; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку для печати заказа на ФР разбитую по ширине ленты.
//
// Параметры:
//  МассивЧеков - Массив - массив документов, для которых нужно сформировать текст заказа.
//  ТекстЧека - Строка - текст товарного чека.
//  ШиринаЛенты - Число - ширина ленты печати.
//
Процедура СформироватьТекстЗаказа(МассивЧеков, ТекстЧека, ШиринаЛенты = 32) Экспорт
	
	РеквизитыДокумента = Новый Структура();
	РеквизитыДокумента.Вставить("Номер");
	РеквизитыДокумента.Вставить("Дата");
	РеквизитыДокумента.Вставить("Префикс");
	
	ТекстЗапросаДанныхДляЗаказа = 
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.СтруктурнаяЕдиницаПродажи КАК ТорговыйОбъект,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК НаименованиеОрганизации,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.СтруктурнаяЕдиницаПродажи) КАК ТорговыйОбъектПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.Физлицо КАК Ответственный,
	|	Документ.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапросаДанныхДляЗаказа);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивЧеков);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДокументЧекККМ  = Новый ТекстовыйДокумент();
	
	// Получение макета
	МакетЧекаККМ		= Документы.ЧекККМ.ПолучитьМакет("ЧекПокупателя");
	
	ОбластьШапкаЧека	= МакетЧекаККМ.ПолучитьОбласть(СтрШаблон("ШапкаЧека%1", ШиринаЛенты));
	ОбластьТелоЧека		= МакетЧекаККМ.ПолучитьОбласть(СтрШаблон("ТелоЧека%1", ШиринаЛенты));
	ОбластьПодвалЧека	= МакетЧекаККМ.ПолучитьОбласть(СтрШаблон("ПодвалЧека%1", ШиринаЛенты));
	ОбластьРазрывЧека	= МакетЧекаККМ.ПолучитьОбласть(СтрШаблон("РазрывЧека%1", ШиринаЛенты));
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			ДокументЧекККМ.Вывести(ОбластьРазрывЧека);
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		СинонимДокумента = НСтр("ru='Заказ'");
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьШапкаЧека.Параметры.Заголовок = ОбщегоНазначенияРМК.СформироватьЗаголовокДокумента(РеквизитыДокумента,
			СинонимДокумента);
		ОбластьШапкаЧека.Параметры.Организация = ВыборкаПоДокументам.НаименованиеОрганизации;
		
		ДокументЧекККМ.Вывести(ОбластьШапкаЧека);
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
	
			ОбластьТелоЧека.Параметры.НаименованиеТовара = ОбщегоНазначенияРМК.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаПоСтрокамТЧ.НоменклатураПредставление, ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
					
					
			ФорматКоличество = Формат(ВыборкаПоСтрокамТЧ.Количество, НСтр("ru = 'ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0'"));
			ФорматЦена = Формат(ВыборкаПоСтрокамТЧ.Цена, НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0'"));
			
			СуммаБезСкидки = ВыборкаПоСтрокамТЧ.Количество * ВыборкаПоСтрокамТЧ.Цена;
			ФорматСумма = Формат(СуммаБезСкидки, НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0'"));
			
			ОбластьТелоЧека.Параметры.КоличествоЦена = СтрШаблон("%1 х %2 = %3", ФорматКоличество, ФорматЦена, ФорматСумма);
			
			КонечнаяСкидка = ВыборкаПоСтрокамТЧ.Количество * ВыборкаПоСтрокамТЧ.Цена - ВыборкаПоСтрокамТЧ.Сумма;
	
			Если КонечнаяСкидка <> 0 Тогда
				
				// АПК:1036-выкл. имя обусловлено соблюдением ширины шаблона чека
				ОбластьТелоЧека.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0, НСтр("ru = 'Скидка:'"), НСтр("ru = 'Надбавка:'"));
				// АПК:1036-вкл.
				ОбластьТелоЧека.Параметры.Скидка = Формат(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка),
					НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0'"));
					
			КонецЕсли;
			
			ДокументЧекККМ.Вывести(ОбластьТелоЧека);
			
		КонецЦикла;
		ДокументЧекККМ.УдалитьСтроку(ДокументЧекККМ.КоличествоСтрок());
		
		ОбластьПодвалЧека.Параметры.Итог = Формат(ВыборкаПоДокументам.СуммаДокумента,
			НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0'"));
		
		ОбластьПодвалЧека.Параметры.Сотрудник = ОбщегоНазначенияРМК.ФамилияИнициалыФизЛица(
			ВыборкаПоДокументам.Ответственный);
		
		ДокументЧекККМ.Вывести(ОбластьПодвалЧека);
		
	КонецЦикла;
	
	СтрокаВозврат = НСтр("ru = ''");
	
	КоличествоСтрок = ДокументЧекККМ.КоличествоСтрок();
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		
		СтрокаВозврат = СтрокаВозврат + ДокументЧекККМ.ПолучитьСтроку(Индекс); 
		
		Если НЕ Индекс = КоличествоСтрок Тогда
			СтрокаВозврат = СтрокаВозврат + Символы.ПС; 
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЧека = СтрокаВозврат;
	
КонецПроцедуры

// Формирует запрос, который производит поиск чека по фискальному признаку в регистре "Фискальные операции".
//
// Параметры:
//  Запрос - Запрос - переопределяемый запрос.
//  Форма - ФормаКлиентскогоПриложения - форма выбора чека.
//  РасшифровкаКода - Структура - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыQRКодаЧекаККТ().
//
Процедура СформироватьЗапросЧекПоФискальномуПризнаку(Запрос, Форма, РасшифровкаКода) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФискальныеОперации.ДокументОснование КАК Ссылка
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	ФискальныеОперации.ФискальныйПризнак = &ФискальныйПризнак
	|	И ТИПЗНАЧЕНИЯ(ФискальныеОперации.ДокументОснование) = ТИП(Документ.ЧекККМ)";
	
	Запрос.УстановитьПараметр("ФискальныйПризнак", РасшифровкаКода.ФискальныйПризнак)
	
КонецПроцедуры

// Определяет присутствие товаров с возрастным ограничением в документе "ЧекККМ.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - анализируемый документ.
//  Результат - Булево - Истина, если в документе есть товары с возрастным ограничением.
//
Процедура ЗаполнитьПризнакЕстьТоварСВозрастнымОграничениемВЧекККМ(ЧекККМ, Результат) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЕстьТоварыСВозрастнымОграничением
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Номенклатура.ВидПродукцииИС В(&ВидыПродукцииИС)
	|	И ЧекККМТовары.Ссылка = &ЧекККМ");
	
	ВидыПродукцииИС = Новый Массив;
	ВидыПродукцииИС.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
	ВидыПродукцииИС.Добавить(Перечисления.ВидыПродукцииИС.Табак);
	ВидыПродукцииИС.Добавить(Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
	
	Запрос.УстановитьПараметр("ВидыПродукцииИС", ВидыПродукцииИС);
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Выборка.Следующий();
	
КонецПроцедуры

// Определяет необходимость ввода характеристики по переданной номенклатуре.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура, для которой необходимо проверить характеристики.
//  Результат - Булево - признак необходимости ввода характеристики для номенклатуры.
//
Процедура ОпределитьНеобходимостьВводаХарактеристикиДляНоменклатуры(Номенклатура, Результат) Экспорт
	
	Если ИспользоватьХарактеристикиНоменклатуры() Тогда
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(Номенклатура) Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьХарактеристики");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет текущее рабочее место.
//
// Параметры:
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК - текущее рабочее место.
//
Процедура ОпределитьТекущееРабочееМесто(РабочееМесто) Экспорт
	
	РабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	
КонецПроцедуры

// Заполняет массив видами номенклатуры, которые определили по значению особенности учета.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - текущее значение особенности учета номенклатуры.
//  МассивВидовНоменклатуры - Массив - массив, в который необходимо добавить значения видов номенклатуры.
//
Процедура ЗаполнитьМассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета, МассивВидовНоменклатуры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	Номенклатура.КатегорияНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ВидПродукцииИС = &ОсобенностьУчета
	|	И НЕ Номенклатура.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.КатегорияНоменклатуры");

	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВидовНоменклатуры.Добавить(Выборка.ВидНоменклатуры);
	КонецЦикла;
	
КонецПроцедуры

// Определяет значение текущего префикса информационной базы.
//
// Параметры:
//  ОчищатьПрефикс - Булево - признак необходимости сброса значения префикса.
//  ТекущийПрефикс - Строка - Значение текущего префикса информационной базы.
//
Процедура ЗаполнитьТекущийПрефиксИБ(ОчищатьПрефикс, ТекущийПрефикс) Экспорт
КонецПроцедуры

// Определяет физ лицо для текущего пользователя.
//
// Параметры:
//  ФизЛицоПользователя - ОпределяемыйТип.КассирРМК - физ лицо пользователя.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ОпределитьФизЛицоПользователя(ФизЛицоПользователя, Форма) Экспорт
	
	ФизЛицоПользователя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновнойОтветственный");
	
КонецПроцедуры

// Запускает длительную операцию для формирования ОРП.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - касса ККМ для формирования ОРП.
//  УникальныйИдентификатор - Строка - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция НачатьФормированиеОтчетаОРозничныхПродажах(КассаККМ, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Документы.ОтчетОРозничныхПродажах.СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию",
		КассаККМ);
	
КонецФункции

// Процедура создает документ Поступление в кассу.
//
// Параметры:
//  ДокументОснование - ДокументСсылка.ВыемкаНаличных - документ выемки из кассы ККМ.
//  ПараметрыСозданияПоступления - Структура - параметры для создания документа.
//    * Касса - СправочникСсылка.Кассы - Касса организации, для которой оформляется поступление.
//    * КассаККМ - ОпределяемыйТип.КассаККМРМК - Касса ККМ, с которой оформляется прием розничной выручки.
//
Процедура СоздатьПоступлениеВКассу(ДокументОснование, ПараметрыСозданияПоступления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоступлениеВКассу = Документы.ПоступлениеВКассу.СоздатьДокумент();
	
	ПоступлениеВКассу.Заполнить(ДокументОснование);
	ПоступлениеВКассу.Касса = ПараметрыСозданияПоступления.Касса;
	ПоступлениеВКассу.Дата = ТекущаяДатаСеанса();
	
	Попытка
		ПоступлениеВКассу.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при записи документа ""Поступление в кассу"".'"),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Процедура создает документ Выемка наличных.
//
// Параметры:
//  Результат - Число, Неопределено - результат обработки оповещения.
//  ПараметрыВыемки - Структура - параметры для создания документа.
//    * ИзымаемаяСумма - Число - изымаемая сумма.
//    * КассаККМ - ОпределяемыйТип.КассаККМРМК - Касса ККМ, из которой оформляется прием розничной выручки.
//    * ОРП - ДокументСсылка.ОтчетОРозничныхПродажах - ОРП, в рамках которого оформляется выемка.
//
// Возвращаемое значение:
//  Неопределено, ДокументСсылка.ВыемкаНаличных.
//
Функция СформироватьДокументВыемки(Результат, ПараметрыВыемки) Экспорт
	
	ДокументВыемки = Неопределено;
	
	ИзымаемаяСумма = ПараметрыВыемки.ИзымаемаяСумма;
	КассаККМ = ПараметрыВыемки.КассаККМ;
	ОРП = ПараметрыВыемки.ОРП;
	
	ПараметрыКассаККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, "ВалютаДенежныхСредств, Владелец");
	
	СуммаДокумента = ?(Результат = Неопределено, ИзымаемаяСумма, Результат);
	
	Если Результат <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НовыйДокумент = Документы.ВыемкаНаличных.СоздатьДокумент();
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
		СтруктураЗаполнения.Вставить("СуммаДокумента", СуммаДокумента);
		СтруктураЗаполнения.Вставить("КассаККМ", КассаККМ);
		СтруктураЗаполнения.Вставить("ВалютаДенежныхСредств", ПараметрыКассаККМ.ВалютаДенежныхСредств);
		СтруктураЗаполнения.Вставить("Организация", ПараметрыКассаККМ.Владелец);
		СтруктураЗаполнения.Вставить("ОтчетОРозничныхПродажах", ОРП);
		
		НовыйДокумент.Заполнить(СтруктураЗаполнения);
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при записи документа ""Выемка наличных"".'"),
				УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ДокументВыемки = НовыйДокумент.Ссылка;
		
	КонецЕсли;
	
	Возврат ДокументВыемки;
	
КонецФункции

// Заполняет имя кассира и его ИНН для печати на ККТ.
//
// Параметры:
//  ПараметрыОперации - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены().
//  Пользователь - СправочникСсылка.Пользователи - пользователь РМК.
//  Кассир - ОпределяемыйТип.КассирРМК - кассир РМК
//
Процедура ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати) Экспорт
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(ДополнительныеПараметрыДляПечати.Пользователь);
	ФИОКассира = РеквизитыКассира.ИмяКассираИДолжность;
	Если ЗначениеЗаполнено(ФИОКассира) Тогда
		ПараметрыОперации.Кассир = ФИОКассира;
		ПараметрыОперации.КассирИНН = РеквизитыКассира.КассирИНН;
	Иначе
		ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	КонецЕсли;
	
	РеквизитыКассы = РозничныеПродажиСервер.ПолучитьРеквизитыМестаРасчета(ДополнительныеПараметрыДляПечати.КассаККМ, ДополнительныеПараметрыДляПечати.ВариантЗаполненияМестаРасчетов);
	ПараметрыОперации.МестоРасчетов = РеквизитыКассы.МестоРасчетов;
	ПараметрыОперации.АдресРасчетов = РеквизитыКассы.АдресРасчетов;
	
	Если ЗначениеЗаполнено(ПараметрыОперации.КассаККМ) И НЕ ПараметрыОперации.КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		ПараметрыОперации.КассаККМ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сумму оплат, которые были приняты используя эквайринговый
// терминал, подключенный к программе.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - анализируемый документ.
//  СуммаОплат - Число - сумма безналичной оплаты.
//
Процедура ЗаполнитьСуммуБНОплатыЧекаККМ(ЧекККМ, СуммаОплат) Экспорт
	
	Для Каждого СтрокаОплаты Из ЧекККМ.БезналичнаяОплата Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.СсылочныйНомер) Тогда
			СуммаОплат = СуммаОплат + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает цену емрц из данных информационной базы на дату.
//
// Параметры:
//  ОсобенностьУчета - Перечисления.ВидыМаркированнойПродукцииБПО - тип маркированной продукции для проверки цены.
//  Период - Дата - дата проверки цены.
//  ЕМРЦ - Число - значение емрц.
//
Процедура ПолучитьЦенуЕМРЦ(ОсобенностьУчета, Период = Неопределено, ЕМРЦ = 0) Экспорт
	МенеджерОборудованияВызовСервера.ПолучитьЦенуЕМРЦ(ОсобенностьУчета, , ЕМРЦ);
КонецПроцедуры

// Формирует текст сообщения по шаблону сообщения.
//
// Параметры:
//  ШаблонСообщения - СправочникСсылка.ШаблоныСообщений - ссылка на шаблон сообщения.
//  ДополнительныеПараметры - Структура - список дополнительных параметров, который будет передан в параметр
//                                        Сообщение в процедурах ПриФормированииСообщения при создании сообщения.
//  ТекстСообщения - Строка - текст отправляемого сообщения.
//
Процедура СформироватьТекстСообщения(ШаблонСообщения, ДополнительныеПараметры, ТекстСообщения) Экспорт
	
	Предмет = Справочники.ДисконтныеКарты.ПустаяСсылка();
	НовыйИдентификатор = Новый УникальныйИдентификатор;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатСообщение =
		ШаблоныСообщений.СформироватьСообщение(ШаблонСообщения, Предмет , НовыйИдентификатор, ДополнительныеПараметры);
		
	ТекстСообщения = РезультатСообщение.Текст;
	
КонецПроцедуры

// Отправляет SMS через настроенного поставщика услуги.
//
// Параметры:
//  НомераПолучателей - Массив из Строка - номера получателей в формате +7ХХХХХХХХХХ.
//  ТекстСообщения - Строка - текст сообщения, максимальная длина у операторов может быть разной.
//  РезультатОтправки - Структура:
//    Результат - Булево - Истина, если отправка SMS прошла успешно.
//    ОписаниеОшибки - Строка - Текст ошибки.
//    НомерТелефона - Строка - номер телефона получателя.
//
Процедура ОтправитьSMS(НомераПолучателей, ТекстСообщения, РезультатОтправки) Экспорт
	
	РезультатОтправкиБСП = ОтправкаSMS.ОтправитьSMS(НомераПолучателей, ТекстСообщения);
	Если РезультатОтправкиБСП.ОтправленныеСообщения.Количество() = 0 Тогда
		Если РезультатОтправкиБСП.Свойство("ОписаниеОшибки") Тогда
			РезультатОтправки.ОписаниеОшибки = РезультатОтправкиБСП.ОписаниеОшибки;
		КонецЕсли;
	Иначе
		РезультатОтправки.Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак возможности отправки СМС.
//
// Параметры:
//  ДоступнаОтправкаSMS - Булево - признак возможности отправки СМС
//
Процедура ПроверитьВозможностьОтправкиSMS(ДоступнаОтправкаSMS) Экспорт
	
	ДоступнаОтправкаSMS = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	
КонецПроцедуры

// Процедура фискализирует ЧекККМ после пробития на ККТ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры пробития чека.
//  РезультатВыполненияПакетнойОперации - Структура - результат выполнения пакетной операции.
//
Процедура ФискализироватьЧекЗавершение(ВходящиеДанные, ДополнительныеПараметры,
	РезультатВыполненияПакетнойОперации = Неопределено)Экспорт
	
	ЭквайринговыйТерминал =ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СпособыОплаты.ПустаяСсылка");
	НомерПлатежнойКарты = "";
	НомерЧекаЭТ = "";
	СсылочныйНомер = "";

	Если ЗначениеЗаполнено(ВходящиеДанные) Тогда
		ЧекККМОбъект = ВходящиеДанные.ДокументОснование.ПолучитьОбъект();
	Иначе
		ЧекККМОбъект = ДополнительныеПараметры.ДокументОснование.ПолучитьОбъект();
	КонецЕсли;
	ДокументЗаблокирован = Истина;
	
	Попытка
		ЧекККМОбъект.Заблокировать();
	Исключение
		ДокументЗаблокирован = Ложь;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			ЧекККМОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ДокументЗаблокирован Тогда
		
		Если ТипЗнч(ЧекККМОбъект) = Тип("ДокументОбъект.ЧекККМКоррекции") Тогда
			ЧекККМОбъект.НомерЧека = ВходящиеДанные.НомерЧекаККМ;
			ЧекККМОбъект.НомерСмены = ВходящиеДанные.НомерСменыККМ;
			ЧекККМОбъект.ПробитЧек = Истина;
		Иначе
			Если ЗначениеЗаполнено(ВходящиеДанные) Тогда
				ЧекККМОбъект.НомерЧекаККМ = ВходящиеДанные.НомерЧекаККМ;
				ЧекККМОбъект.НомерСменыККМ = ВходящиеДанные.НомерСменыККМ;
			Иначе
				ЧекККМОбъект.НомерЧекаККМ = ДополнительныеПараметры.НомерЧека;
				ЧекККМОбъект.НомерСменыККМ = ДополнительныеПараметры.НомерСмены;
			КонецЕсли;
			Если ТипЗнч(ЧекККМОбъект) = Тип("ДокументОбъект.ЧекККМ") Тогда
				ЧекККМОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатВыполненияПакетнойОперации)
			И РезультатВыполненияПакетнойОперации.Свойство("РезультатВыполненияЭквайринговойОперации")
			И ЗначениеЗаполнено(РезультатВыполненияПакетнойОперации.РезультатВыполненияЭквайринговойОперации) Тогда
			
			// Заполнить таблицу оплат чека данными: номерКарты, номерЧекаЭТ, СсылочныйНомер
			// на основании РезультатВыполненияПакетнойОперации
			РезультатЭквайринговойОперации = РезультатВыполненияПакетнойОперации.РезультатВыполненияЭквайринговойОперации;
			ДополнительныеДанные = РезультатВыполненияПакетнойОперации.ПараметрыЭквайринговойОперации;
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ВидОплаты", ДополнительныеДанные.ВидОплаты);
			СуммаДляОтбора = 0;

			Для Каждого СтрокаОплат Из ДополнительныеПараметры.ТаблицаОплат Цикл
				
				Если СтрокаОплат.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
					СуммаДляОтбора = СтрокаОплат.Сумма;
				КонецЕсли;
				
			КонецЦикла;
	
			СтруктураПоиска.Вставить("Сумма", СуммаДляОтбора);
			
			МассивОплат = ЧекККМОбъект.БезналичнаяОплата.НайтиСтроки(СтруктураПоиска);
			
			Если МассивОплат.Количество() > 0 Тогда
				
				Если РезультатЭквайринговойОперации.Свойство("ИдентификаторУстройства") Тогда
				
					Запрос = Новый Запрос("ВЫБРАТЬ
					|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.СпособыОплаты КАК ЭквайринговыеТерминалы
					|ГДЕ
					|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
					|	И ЭквайринговыеТерминалы.ПодключаемоеОборудование = &ПодключаемоеОборудование");
					Запрос.УстановитьПараметр("ПодключаемоеОборудование", РезультатЭквайринговойОперации.ИдентификаторУстройства);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ЭквайринговыйТерминал = Выборка.Ссылка;
					КонецЕсли;
				
				КонецЕсли;
				
				СтрокаОплаты = МассивОплат[0];
				СтрокаОплаты.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
				СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * ДополнительныеДанные.ПроцентКомиссии / 100;
				
				Если РезультатЭквайринговойОперации.Свойство("НомерКарты") Тогда
					СтрокаОплаты.НомерПлатежнойКарты = РезультатЭквайринговойОперации.НомерКарты;
				КонецЕсли;
				Если РезультатЭквайринговойОперации.Свойство("НомерЧекаЭТ") Тогда
					СтрокаОплаты.НомерЧекаЭТ = РезультатЭквайринговойОперации.НомерЧекаЭТ;
				КонецЕсли;
				Если РезультатЭквайринговойОперации.Свойство("СсылочныйНомер") Тогда
					СтрокаОплаты.СсылочныйНомер = РезультатЭквайринговойОперации.СсылочныйНомер;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ДокументЗаблокирован = Ложь;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				ЧекККМОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	// обработка результата фискализации чека выдачи наличных
	Если ЗначениеЗаполнено(РезультатВыполненияПакетнойОперации)
		И РезультатВыполненияПакетнойОперации.Свойство("ТипОперации")
		И РезультатВыполненияПакетнойОперации.ТипОперации =
			ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ПродажаСВыдачейНаличных") Тогда
			
			Если РезультатВыполненияПакетнойОперации.Свойство("ПараметрыПродажаСВыдачейНаличных")
				И РезультатВыполненияПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.Свойство("ДокументОснованиеВыдачи")
				И ЗначениеЗаполнено(РезультатВыполненияПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.ДокументОснованиеВыдачи)
				И РезультатВыполненияПакетнойОперации.Свойство("РезультатФискализацииЧекаВыдачи")
				И РезультатВыполненияПакетнойОперации.РезультатФискализацииЧекаВыдачи.Свойство("НомерЧекаККТ")
				И РезультатВыполненияПакетнойОперации.РезультатФискализацииЧекаВыдачи.Свойство("НомерСменыККТ") Тогда
				
					ДанныеДополненияЧекаВыдачи = РезультатВыполненияПакетнойОперации.РезультатФискализацииЧекаВыдачи;
					
					Если ДанныеДополненияЧекаВыдачи.Результат Тогда
					
						ЧекВыдачи =
							РезультатВыполненияПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.ДокументОснованиеВыдачи;
						ЧекВыдачиОбъект = ЧекВыдачи.ПолучитьОбъект();
						ЧекВыдачиЗаблокирован = Истина;
						
						Попытка
							ЧекВыдачиОбъект.Заблокировать();
						Исключение
							
							ЧекВыдачиЗаблокирован = Ложь;
							ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'",
									ОбщегоНазначения.КодОсновногоЯзыка()),
								УровеньЖурналаРегистрации.Ошибка,,
								ЧекВыдачиОбъект,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							Возврат;
							
						КонецПопытки;
						
						Если ЧекВыдачиЗаблокирован Тогда
							
												
							ЧекВыдачиОбъект.НомерЧекаККМ = ДанныеДополненияЧекаВыдачи.НомерЧекаККТ;
							ЧекВыдачиОбъект.НомерСменыККМ = ДанныеДополненияЧекаВыдачи.НомерСменыККТ;
							ЧекВыдачиОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
							ЧекВыдачиОбъект.КассоваяСмена = ТекущаяКассоваяСмена(ЧекВыдачиОбъект.КассаККМ);
							
							// дополнить чек выдачи наличных данными эквайринговой операции
							Если РезультатВыполненияПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.Свойство("СуммаВыдачи") Тогда
								
								СуммаВыдачиНаличных = РезультатВыполненияПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.СуммаВыдачи;
								
								СтруктураПоиска = Новый Структура();
								СтруктураПоиска.Вставить("Сумма", СуммаВыдачиНаличных);
								
								ДанныеВыдачи = ЧекВыдачиОбъект.БезналичнаяОплата.НайтиСтроки(СтруктураПоиска);
								
								Если ДанныеВыдачи.Количество() > 0 Тогда
									
									ПроцентКомиссии = ДополнительныеДанные.ПроцентКомиссии;
									
									Для Каждого Элемент Из ДанныеВыдачи Цикл
										
										Элемент.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
										Элемент.СуммаКомиссии = Элемент.Сумма * ПроцентКомиссии / 100;
										Элемент.НомерПлатежнойКарты = НомерПлатежнойКарты;
										Элемент.НомерЧекаЭТ = НомерЧекаЭТ;
										Элемент.СсылочныйНомер = СсылочныйНомер;
										
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЕсли;
						
						КонецЕсли;
						
						Попытка
							ЧекВыдачиОбъект.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							
							ЧекВыдачиЗаблокирован = Ложь;
							ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи документа.'",
									ОбщегоНазначения.КодОсновногоЯзыка()),
								УровеньЖурналаРегистрации.Ошибка,,
								ЧекВыдачиОбъект,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
						КонецПопытки;
						
					Иначе
					КонецЕсли;
				
			КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

// Рассчитывает автоматические скидки 
//
// Параметры:
//  ФормаРМК - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//
Процедура РассчитатьАвтоматическиеСкидки(ФормаРМК) Экспорт
	
	ПараметрыРасчета = ПолучитьПараметрыРасчетаСкидок(ФормаРМК);
	СтруктураСкидок = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ПараметрыРасчета.ВходныеПараметры);
	ТаблицаСообщенийПослеОформления = СкидкиНаценкиСервер.ПолучитьТаблицуСообщений(СтруктураСкидок.ТаблицаСкидкиНаценки, Перечисления.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека);
	
	Если СтруктураСкидок.Свойство("ТаблицаСкидкиНаценки") Тогда
		ТаблицаСкидкиНаценки = СтруктураСкидок.ТаблицаСкидкиНаценки;
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ПараметрыРасчета, "Товары", ТаблицаСкидкиНаценки);
		ФормаРМК.Объект.Товары.Очистить();
		ФормаРМК.Объект.Товары.Загрузить(ПараметрыРасчета.Товары);
		// Заполним связь скидки со строкой таблицы товаров
		ТаблицаСкидкиНаценки.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(36)));
		ТаблицаСкидкиНаценки.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		Для Каждого СтрокаСкидки Из ТаблицаСкидкиНаценки Цикл
			Если ЗначениеЗаполнено(СтрокаСкидки.КлючСвязи) Тогда // Иначе, идентификатор строки не требуется
				СтрокиТоваровСкидки = ПараметрыРасчета.Товары.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаСкидки.КлючСвязи));
				Если СтрокиТоваровСкидки.Количество() Тогда
					СтрокаСкидки.ИдентификаторСтроки = СтрокиТоваровСкидки[0].ИдентификаторСтроки;
				КонецЕсли;
			КонецЕсли;
			СтрокаСкидки.Представление = Строка(СтрокаСкидки.СкидкаНаценка);
		КонецЦикла;
		ФормаРМК.ТаблицаСкидкиНаценки.Загрузить(ТаблицаСкидкиНаценки);
		// Промокоды, которые нужно выдать при продаже
		СработавшиеСкидки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСкидкиНаценки.ВыгрузитьКолонку("СкидкаНаценка"));
		ПромокодыПереопределяемый.ОтметитьСработавшиеПромокоды(ФормаРМК.ТаблицаПримененныхПромокодов, СработавшиеСкидки);
		ПромокодыПереопределяемый.ДобавитьПромокодыКВыдаче(ФормаРМК.ТаблицаПримененныхПромокодов, ТаблицаСкидкиНаценки);
		
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ТаблицаБонусыКНачислению") Тогда
		ФормаРМК.ТаблицаБонусныеБаллы.Загрузить(СтруктураСкидок.ТаблицаБонусыКНачислению);
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ТаблицаПодарков") И СтруктураСкидок.ТаблицаПодарков.Количество() > 0 Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ПараметрыРасчета, "Товары", СтруктураСкидок.ТаблицаСкидкиНаценки);
		ФормаРМК.ТаблицаПодарков.Очистить();
		Для каждого СтрокаПодарок Из СтруктураСкидок.ТаблицаПодарков Цикл
			НоваяСтрока = ФормаРМК.ТаблицаПодарков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарок);
			НоваяСтрока.ВладелецПодарка = XMLСтрока(СтрокаПодарок.СкидкаНаценка);
			НоваяСтрока.ВыборИзСписка = СтрокаПодарок.ПодарокИзСписка;
			НоваяСтрока.Склад = СтрокаПодарок.СтруктурнаяЕдиница;
			НоваяСтрока.КоличествоУпаковок = СтрокаПодарок.Количество;
			НоваяСтрока.Организация = ФормаРМК.Объект.Организация;
			НоваяСтрока.Упаковка = СтрокаПодарок.ЕдиницаИзмерения;
			НоваяСтрока.ВыводитьПодарокВЧек = СтрокаПодарок.СкидкаНаценка.УчитыватьПодарокКакПродажу;
			НоваяСтрока.ПредставлениеВладельца = Строка(СтрокаПодарок.СкидкаНаценка);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ДеревоСкидок") Тогда
		ТаблицаСкидок = Новый ТаблицаЗначений;
		ТаблицаСкидок = ДеревоЗначенийВТаблицуЗначений(СтруктураСкидок.ДеревоСкидок);
		ФормаРМК.ТаблицаДействующихСкидок.Очистить();
		Для Каждого СтрокаСкидкиНаценки Из ТаблицаСкидок Цикл
			НоваяСтрока = ФормаРМК.ТаблицаДействующихСкидок.Добавить();
			НоваяСтрока.СкидкаНаценка = СтрокаСкидкиНаценки.СкидкаНаценка;
			НоваяСтрока.СкидкаНаценкаПредставление = Строка(СтрокаСкидкиНаценки.СкидкаНаценка);
			НоваяСтрока.ЗначениеСкидкиНаценки = ?(СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки = null, 0, СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки);
			НоваяСтрока.ЭтоГруппа = СтрокаСкидкиНаценки.ЭтоГруппа;
			НоваяСтрока.Родитель = XMLСтрока(СтрокаСкидкиНаценки.СкидкаНаценка.Родитель);
			НоваяСтрока.КоличествоВыполненныхУсловий = СтрокаСкидкиНаценки.КоличествоВыполненийУсловия;
			УсловияПредоставления = "";
			Если СтрокаСкидкиНаценки.ПараметрыУсловий.Свойство("ТаблицаУсловий") Тогда
				Для Каждого СтрокаУсловий Из СтрокаСкидкиНаценки.ПараметрыУсловий.ТаблицаУсловий Цикл
					УсловияПредоставления = УсловияПредоставления + ?(УсловияПредоставления = "","",Символы.ПС) + Строка(СтрокаУсловий.УсловиеПредоставления);
				КонецЦикла;
			КонецЕсли;
			НоваяСтрока.УсловияПредоставления = УсловияПредоставления;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ТаблицаСообщений") И СтруктураСкидок.ТаблицаСообщений.Количество() > 0
		Или ТаблицаСообщенийПослеОформления.Количество() > 0 Тогда
		ФормаРМК.ТаблицаСообщений.Очистить();
		СкопироватьСообщенияВТаблицу(СтруктураСкидок.ТаблицаСообщений, ФормаРМК.ТаблицаСообщений);
		СкопироватьСообщенияВТаблицу(ТаблицаСообщенийПослеОформления, ФормаРМК.ТаблицаСообщений);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив особенностями учета номенклатуры, для которых разрешен возврат без указания марки.
//
// Параметры:
//  МассивОсобенностейУчета - Массив - массив особенностей учета номенклатуры.
//
Процедура ЗаполнитьМассивОсобенностейУчетаДляВозвратаБезМарки(МассивОсобенностейУчета) Экспорт
	
	Антисептики = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики");
	БАДы = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы");
	Велосипеды = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды");
	Духи = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи");
	КреслаКоляски = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски");
	Обувь = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	Одежда = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
	ПродукцияИзНатуральногоМеха = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	Фотоаппараты = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты");
	Шины = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
	
	МассивОсобенностейУчета.Добавить(Антисептики);
	МассивОсобенностейУчета.Добавить(БАДы);
	МассивОсобенностейУчета.Добавить(Велосипеды);
	МассивОсобенностейУчета.Добавить(Духи);
	МассивОсобенностейУчета.Добавить(КреслаКоляски);
	МассивОсобенностейУчета.Добавить(Обувь);
	МассивОсобенностейУчета.Добавить(Одежда);
	МассивОсобенностейУчета.Добавить(ПродукцияИзНатуральногоМеха);
	МассивОсобенностейУчета.Добавить(Фотоаппараты);
	МассивОсобенностейУчета.Добавить(Шины);

КонецПроцедуры

// Определяет является ли переданное значение особенности учета табачной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - табачная продукция.
//
Процедура ОпределитьОсобенностьУчетаТабачнаяПродукция(ОсобенностьУчета, Результат) Экспорт
	
	Если ОсобенностьУчета = Перечисления.ВидыПродукцииИС.Табак Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета алкогольная продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - алкогольная продукция.
//
Процедура ОпределитьОсобенностьУчетаАлкогольнаяПродукция(ОсобенностьУчета, Результат) Экспорт
	
	Если ОсобенностьУчета = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета молочной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - молочная продукция.
//
Процедура ОпределитьОсобенностьУчетаМолочнаяПродукция(ОсобенностьУчета, Результат) Экспорт
	
	Если ОсобенностьУчета = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
		ИЛИ ОсобенностьУчета = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
			Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет свойства "КодТРУ" и "ВозможнаОплатаЭС" в строке товара.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьВозможностьОплатыЭС(ДанныеСтроки, Форма) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Номенклатура.КодТРУ КАК СТРОКА(30)) КАК КодТРУ,
	|	ВЫБОР
	|		КОГДА Номенклатура.КодТРУ = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозможнаОплатаЭС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", ДанныеСтроки.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ДанныеСтроки.Свойство("КодТРУ") Тогда
			ДанныеСтроки.КодТРУ = Выборка.КодТРУ;
		КонецЕсли;
		Если ДанныеСтроки.Свойство("ВозможнаОплатаЭС") Тогда
			ДанныеСтроки.ВозможнаОплатаЭС = Выборка.ВозможнаОплатаЭС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина,
	Знач БанковскийСчет = Неопределено) Экспорт

	Сведения	= Новый Структура();
	Сведения.Вставить("Представление");
	Сведения.Вставить("ПолноеНаименование");
	Сведения.Вставить("КодПоОКПО");
	Сведения.Вставить("ИНН");
	Сведения.Вставить("КПП");
	Сведения.Вставить("Телефоны");
	Сведения.Вставить("ЮридическийАдрес");
	Сведения.Вставить("ФактическийАдрес");
	Запрос		= Новый Запрос;
	Данные		= Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("Строка") Тогда
		
		Сведения.Вставить("Представление", ЮрФизЛицо);
		Сведения.Вставить("полноеНаименование", ЮрФизЛицо);
		Возврат Сведения;
		
	КонецЕсли;

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФормаОрганизации", ЮрФизЛицо);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Представление       КАК Наименование,";
	
	
	Если ИмяСправочника = "Организации" Тогда
		
		Запрос.Текст = Запрос.Текст + "
		| Организации.НаименованиеПолное КАК ПолноеНаименование,";
		
	КонецЕсли;	
	
	ТипЮрФизЛицо = ЮрФизЛицо.ЮридическоеФизическоеЛицо;
	Если ТипЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И ИмяСправочника = "Контрагенты" Тогда
		ТекстЗапросаИННКПП = "
		|	Организации.ФизЛицо.ИНН         КАК ИНН,";
	Иначе
		ТекстЗапросаИННКПП = "
		|	Организации.ИНН                 КАК ИНН,
		|	Организации.КПП                 КАК КПП,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаИННКПП;
	
	Запрос.Текст = Запрос.Текст + "
	|	Организации.КодПоОКПО           КАК КодПоОКПО";
	
	Если ИмяСправочника = "Организации" Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	Организации.СвидетельствоСерияНомер,
		|	Организации.СвидетельствоДатаВыдачи,
		|	Организации.НаименованиеПолное КАК НаименованиеПолноеПоУчредительнымДокументам,
		|	Организации.КодПоОКАТО         КАК КодПоОКАТО";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК Организации
	|
	|ГДЕ
	|	Организации.Ссылка = &ФормаОрганизации";

	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
	Сведения.Вставить("ЮрФизЛицо", ТипЮрФизЛицо);
	Если ТипЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Сведения.Вставить("КПП",       Данные.КПП);
		Сведения.Вставить("Свидетельство", "");
	Иначе
		
		Сведения.Вставить("КПП",       "");
		Если ИмяСправочника = "Организации" Тогда
			
			ТекстСвидетельство = НСтр("ru = 'свидетельство %1 от %2'");
			ТекстСвидетельство =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Данные.СвидетельствоСерияНомер,
					Формат(Данные.СвидетельствоДатаВыдачи, НСтр("ru='ДЛФ=D'")));
			Сведения.Вставить("Свидетельство", ТекстСвидетельство);
			
		КонецЕсли;
		
	КонецЕсли;

	Если ИмяСправочника = "Организации" Тогда
		
		Сведения.Вставить("НаименованиеПолноеПоУчредительнымДокументам",
			Данные.НаименованиеПолноеПоУчредительнымДокументам);
		Сведения.Вставить("КодПоОКАТО", Данные.КодПоОКАТО);
		
	КонецЕсли;
	
	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление", Данные.Наименование);
		Сведения.Вставить("ИНН", Данные.ИНН);

		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;

	Возврат Сведения;

КонецФункции

// В процедуре описывается условное оформление для настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьУсловноеОформлениеВНастройкахРМК(Форма) Экспорт
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	// Пустое рабочее место.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокНастроек.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНастроек.РабочееМесто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.РабочиеМеста.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(220, 220, 220));
	
	// Характеристики не используются.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристикиИспользуются.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Характеристики не заполнены.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристикиИспользуются.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристика.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

// Процедура определяет может ли операция являться сторнирующей по таким параметрам как:
// Чек продажи, сумма итого, текущая кассовая смена.
// Резльтат процедуры необходимо записать в "ПараметрыСторно.Результат".
//
// Параметры:
//  ПараметрыСторно - Структура - параметры операции. Содержит свойства:
//                    ЧекККМПродажа - ОпределяемыйТип.ЧекККМРМК - чек продажи.
//                    СуммаИтого - Число - возвращаемая сумма.
//                    КассоваяСмена - ДокументСсылка.КассоваяСмена - текущая кассовая смена.
//                    Результат - Булево - признак того, является ли текущая операция сторнирующей.
//
Процедура ЗаполнитьПризнакЭтоСторно(ПараметрыСторно) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСторно.ЧекККМПродажа) И ЗначениеЗаполнено(ПараметрыСторно.КассоваяСмена)
		И ПараметрыСторно.СуммаИтого > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
		|ПОМЕСТИТЬ СуммаЧЕКА
		|ИЗ
		|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМОплата
		|ГДЕ
		|	ЧекККМОплата.ЭквайринговыйТерминал = &ЭквайринговыйТерминал
		|	И ЧекККМОплата.Ссылка = &ЧекККМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ОтчетОРозничныхПродажах
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.КассоваяСмена = &КассоваяСмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМ.КассоваяСмена = ОтчетОРозничныхПродажах.Ссылка
		|		И СуммаЧека.Сумма = &СуммаКСторнированию
		|		И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит) КАК ЭтоСторноОплаты
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ,
		|	СуммаЧЕКА КАК СуммаЧека,
		|	ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ЧекККМ.Ссылка = &ЧекККМ");
		
		Запрос.УстановитьПараметр("КассоваяСмена", ПараметрыСторно.КассоваяСмена);
		Запрос.УстановитьПараметр("ЧекККМ", ПараметрыСторно.ЧекККМПродажа);
		Запрос.УстановитьПараметр("СуммаКСторнированию", ПараметрыСторно.СуммаИтого);
		Запрос.УстановитьПараметр("ЭквайринговыйТерминал", ПараметрыСторно.ЭквайринговыйТерминал);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПараметрыСторно.Результат = Выборка.ЭтоСторноОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает временное хранилище с пустой таблицей значений.
//
// Параметры:
//  УникальныйИдентификатор - Строка - уникальный идентификатор формы.
//
// Возвращаемое значение:
//  Строка - Адрес временного хранилища
//
Функция СоздатьХранилище(УникальныйИдентификатор) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(
		Новый ТаблицаЗначений,
		УникальныйИдентификатор);
	
КонецФункции

// Возвращает массив структур таблицы авансов из временного хранилища.
//
// Параметры:
//  АдресПредоплатаВХранилище - Строка - Адрес временного хранилища таблицы авансов.
//
// Возвращаемое значение:
//  Массив - структур - соответствует возвращаемой таблице из общей формы ФормаПодбораАвансовПокупателей
//
Функция ЗаполнитьАвансы(АдресПредоплатаВХранилище) Экспорт
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище); 
	
	ТаблицаДляЗагрузки.Колонки.Добавить("ЕстьТовары", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаАванса Из ТаблицаДляЗагрузки Цикл
		Если ТипЗНЧ(СтрокаАванса.Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			Если СтрокаАванса.Документ.Запасы.Количество() > 0 Тогда
				СтрокаАванса.ЕстьТовары = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивАвансов = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаДляЗагрузки);
	
	Возврат МассивАвансов;
	
КонецФункции

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - товар, для которого необходимо заполнить партии.
//  МассивПартий - Массив - массив, в который необходимо добавить найденные партии.
//
Процедура ЗаполнитьСписокВыбораПартийНоменклатуры(Номенклатура, МассивПартий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииНоменклатуры.Ссылка КАК Партия
	|ИЗ
	|	Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
	|ГДЕ
	|	ПартииНоменклатуры.Владелец = &Номенклатура
	|	И НЕ ПартииНоменклатуры.ПометкаУдаления
	|	И НЕ ПартииНоменклатуры.Недействителен
	|	И ПартииНоменклатуры.Статус В(&СтатусыПартий)
	|	И ВЫБОР
	|			КОГДА ПартииНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ТОГДА НЕ ПартииНоменклатуры.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	МассивСтатусовПартий = Новый Массив;
	МассивСтатусовПартий.Добавить(Перечисления.СтатусыПартий.СобственныеЗапасы);
	МассивСтатусовПартий.Добавить(Перечисления.СтатусыПартий.ТоварыНаКомиссии);
	
	Запрос.УстановитьПараметр("СтатусыПартий", МассивСтатусовПартий);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПартий.Добавить(Выборка.Партия);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре производится прикладная логика, влияющая на
// заполнение серий и партий в строке товаров.
//
// Параметры:
//  ТекущаяСтрока - ДанныеТекущейСтроки - текущая строка товаров.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, Форма) Экспорт
	
	ВидОперации = Форма.Объект.ВидОперации;
	Если ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(ВидОперации) Тогда
		ТипДокумента = Тип("ДокументСсылка.ЧекККМ");
	Иначе
		ТипДокумента = Тип("ДокументСсылка.ЧекККМВозврат");
	КонецЕсли;
	
	Если ТекущаяСтрока.НеобходимостьВводаСерии Тогда
		Если Не ТекущаяСтрока.ПроверятьЗаполнениеСерий Тогда
			
			ТипПолитики = Неопределено;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СпрПолитикаУчетаСерий.ТипПолитики КАК ТипПолитики
			|ИЗ
			|	Справочник.Номенклатура КАК СпрНоменклатура
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолитикаУчетаСерий КАК СпрПолитикаУчетаСерий
			|		ПО СпрНоменклатура.ПолитикаУчетаСерий = СпрПолитикаУчетаСерий.Ссылка
			|ГДЕ
			|	СпрНоменклатура.Ссылка = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТипПолитики = Выборка.ТипПолитики;
			КонецЕсли;
			
			Если ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий Тогда
				ПараметрыПодбораСтатуса = Новый Структура;
				ПараметрыПодбораСтатуса.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
				ПараметрыПодбораСтатуса.Вставить("Организация", Форма.ВыбраннаяОрганизация);
				ПараметрыПодбораСтатуса.Вставить("СтруктурнаяЕдиница", Форма.Объект.ТорговыйОбъект);
				ПараметрыПодбораСтатуса.Вставить("ТипДокумента", ТипДокумента);
				ПараметрыПодбораСтатуса.Вставить("ВидОперации", ВидОперации);
				
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("ПараметрыПодбораСтатуса", ПараметрыПодбораСтатуса);
				
				СтатусСерии = СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанных);
				ТекущаяСтрока.ПроверятьЗаполнениеСерий = ?(СтатусСерии = 0, Ложь, Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.ПроверятьЗаполнениеСерий = Ложь;
	КонецЕсли;
	
	Если ТекущаяСтрока.ИспользоватьПартии Тогда
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			
			ПартияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
				ТекущаяСтрока.Номенклатура,
				СтатусПартии);
			Если Не ПартияПоУмолчанию = Неопределено Тогда
				Форма.ВыборПартии = ПартияПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Партия)
			И ТекущаяСтрока.Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии
			И Не ЗначениеЗаполнено(ТекущаяСтрока.Партия.ВладелецПартии) Тогда
			Форма.ВыборПартии = Неопределено;
			ТекущаяСтрока.Партия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли документ чеком продажи.
//
// Параметры:
//  Результат - Булево - Истина, если документ - чек продажи.
//  ЧекККМ - ОпределяемыйТип.ОпределяемыйТип.ЧекККМРМК - чек ккм.
//
Процедура ОпределитьЧекККМПродажа(Результат, ЧекККМ) Экспорт
	
	Если ТипЗнч(ЧекККМ) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заолняет таблицу данными о переданных товарах.
// Таблица должна содержать данные для заполнения табличной части "Товары" обработки "РабочееМестоКассира".
//
// Параметры:
//  МассивТоваров - Массив - массив, в котором содержится список товаров.
//  ТаблицаТовары - ТаблицаЗначений - таблица, в которую необходимо поместить информацию по товарам.
//
Процедура ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК Маркируемый,
	|	СпрНоменклатура.ВидСтавкиНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА НЕ СпрНоменклатура.ВидАлкогольнойПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|				И СпрНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		ИНАЧЕ СпрНоменклатура.ВидПродукцииИС
	|	КОНЕЦ КАК ОсобенностьУчета,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Весовой
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Весовой
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	ЛОЖЬ КАК Фасованный,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.ИспользоватьСерииНоменклатуры
	|		ИЛИ СпрНоменклатура.ИспользоватьПартии КАК НеобходимоДобавитьСтроку,
	|	СпрНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СпрНоменклатура.ИспользоватьСерииНоменклатуры КАК НеобходимостьВводаСерии,
	|	СпрНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрПолитикаУчетаСерий.ТипПолитики, ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьЗаполнениеСерий,
	|	СпрНоменклатура.ИспользоватьУникальныеСерии КАК УникальностьСерии,
	|	СпрНоменклатура.ЭтоНабор
	|		ИЛИ СпрНоменклатура.ЭтоАгентскаяУслуга КАК ЭтоНабор,
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	КатегорииНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	СпрНоменклатура.Склад КАК Склад,
	|	СпрНоменклатура.Ячейка КАК Ячейка,
	|	СпрНоменклатура.ЗапретитьВводДробногоКоличества КАК ЗапретитьВводДробногоКоличества
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|		ПО СпрНоменклатура.КатегорияНоменклатуры = КатегорииНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолитикаУчетаСерий КАК СпрПолитикаУчетаСерий
	|		ПО СпрНоменклатура.ПолитикаУчетаСерий = СпрПолитикаУчетаСерий.Ссылка
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&МассивТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Маркируемый КАК Маркируемый,
	|	ТаблицаНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ТаблицаНоменклатура.Количество КАК Количество,
	|	ТаблицаНоменклатура.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаНоменклатура.Наименование КАК Наименование,
	|	ТаблицаНоменклатура.Весовой КАК Весовой,
	|	ТаблицаНоменклатура.Фасованный КАК Фасованный,
	|	ТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаНоменклатура.НеобходимоДобавитьСтроку КАК НеобходимоДобавитьСтроку,
	|	ТаблицаНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ТаблицаНоменклатура.НеобходимостьВводаСерии КАК НеобходимостьВводаСерии,
	|	ТаблицаНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ТаблицаНоменклатура.ПроверятьЗаполнениеСерий КАК ПроверятьЗаполнениеСерий,
	|	ТаблицаНоменклатура.УникальностьСерии КАК УникальностьСерии,
	|	ТаблицаНоменклатура.ЭтоНабор КАК ЭтоНабор,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ВариантЧастичногоВыбытия,
	|	НЕ НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие,
	|	ТаблицаНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаНоменклатура.Склад КАК ТорговыйОбъект,
	|	ТаблицаНоменклатура.Ячейка КАК Ячейка,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.ЗапретитьВводДробногоКоличества КАК ЗапретитьВводДробногоКоличества
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|			ПО НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ПО ТаблицаНоменклатура.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия");
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСУНФ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("СпрНоменклатура");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ПроверитьСкладДляРучногоВыбора(ТаблицаТовары);
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТовары.ИспользоватьПартии Тогда
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			
			ПартияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
				СтрокаТовары.Номенклатура,
				СтатусПартии);
			Если ЗначениеЗаполнено(ПартияПоУмолчанию) Тогда
				СтрокаТовары.Партия = ПартияПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрокаТовары.ОсобенностьУчета = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТовары.Маркируемый И СтрокаТовары.НеобходимостьВводаСерии Тогда
			СтрокаТовары.Маркируемый = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре производится получение состава набора и заполнение
// таблицы товарами, которые входят в состав набора.
// Также необходимо заполнить в таблице все данные для товара, которые получают в
// ОбщегоНазначенияРМКПереопределяемый.ТаблицаДанныхОТоварах.
//
// Параметры:
//  ДанныеНабора - Структура - данные выбранного набора.
//  ТаблицаСоставНабора - ТаблицаЗначений - таблица, в которой находятся строки с товарами из состава набора и их данные.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьСоставНабора(ДанныеНабора, ТаблицаСоставНабора, Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставНаборов.Номенклатура КАК Номенклатура,
	|	СоставНаборов.Характеристика КАК Характеристика,
	|	СоставНаборов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(СоставНаборов.Количество) КАК Количество,
	|	СУММА(СоставНаборов.ДоляСтоимости) КАК ДоляСтоимости,
	|	МИНИМУМ(СоставНаборов.Порядок) КАК Порядок,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ФиксированнаяСтоимость
	|				ИЛИ НЕ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксированнаяСтоимость,
	|	СоставНаборов.НоменклатураНабора КАК НоменклатураНабора,
	|	СоставНаборов.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА СоставНаборов.НоменклатураНабора.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЦенаНабораСводно
	|ПОМЕСТИТЬ ТаблицаСоставНабора
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СоставНаборов.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СоставНаборов.НоменклатураНабора = &НоменклатураНабора
	|	И (СоставНаборов.ХарактеристикаНабора = &ХарактеристикаНабора
	|				И НЕ СоставНаборов.Общий
	|			ИЛИ &ХарактеристикаНабора <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И СоставНаборов.Общий)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставНаборов.Номенклатура,
	|	СоставНаборов.Характеристика,
	|	СоставНаборов.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ФиксированнаяСтоимость
	|				ИЛИ НЕ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	СоставНаборов.НоменклатураНабора,
	|	СоставНаборов.ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА СоставНаборов.НоменклатураНабора.СпособРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка,
	|	&ХарактеристикаНабора,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	1,
	|	100 - ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВознаграждениеВключеноВСтоимость
	|			ТОГДА ЕСТЬNULL(ПроцентыВознагражденияПоДоговорамСрезПоследних.ПроцентВознаграждения, ДоговорыКонтрагентов.ПроцентКомиссионногоВознаграждения)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	1,
	|	NULL,
	|	СправочникНоменклатура.Ссылка,
	|	&ХарактеристикаНабора,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО СправочникНоменклатура.Договор = ДоговорыКонтрагентов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыВознагражденияПоДоговорам.СрезПоследних(&Дата, Номенклатура = &НоменклатураНабора) КАК ПроцентыВознагражденияПоДоговорамСрезПоследних
	|		ПО СправочникНоменклатура.Договор = ПроцентыВознагражденияПоДоговорамСрезПоследних.ДоговорКонтрагента
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &НоменклатураНабора
	|	И СправочникНоменклатура.ЭтоАгентскаяУслуга
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.УслугаКомиссионногоВознаграждения,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка),
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	1,
	|	ЕСТЬNULL(ПроцентыВознагражденияПоДоговорамСрезПоследних.ПроцентВознаграждения, ДоговорыКонтрагентов.ПроцентКомиссионногоВознаграждения),
	|	1,
	|	NULL,
	|	СправочникНоменклатура.Ссылка,
	|	&ХарактеристикаНабора,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО СправочникНоменклатура.Договор = ДоговорыКонтрагентов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыВознагражденияПоДоговорам.СрезПоследних(&Дата, Номенклатура = &НоменклатураНабора) КАК ПроцентыВознагражденияПоДоговорамСрезПоследних
	|		ПО СправочникНоменклатура.Договор = ПроцентыВознагражденияПоДоговорамСрезПоследних.ДоговорКонтрагента
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &НоменклатураНабора
	|	И СправочникНоменклатура.ЭтоАгентскаяУслуга
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоставНабора.Номенклатура КАК Номенклатура,
	|	ТаблицаСоставНабора.Характеристика КАК Характеристика,
	|	ТаблицаСоставНабора.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаСоставНабора.Количество КАК Количество,
	|	ТаблицаСоставНабора.Количество КАК КоличествоУпаковок,
	|	ТаблицаСоставНабора.ДоляСтоимости КАК ДоляСтоимости,
	|	ТаблицаСоставНабора.Порядок КАК Порядок,
	|	ТаблицаСоставНабора.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК Маркируемый,
	|	СпрНоменклатура.ВидСтавкиНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА НЕ СпрНоменклатура.ВидАлкогольнойПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|				И СпрНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		ИНАЧЕ СпрНоменклатура.ВидПродукцииИС
	|	КОНЕЦ КАК ОсобенностьУчета,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	ЛОЖЬ КАК Фасованный,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СпрНоменклатура.ИспользоватьСерииНоменклатуры КАК НеобходимостьВводаСерии,
	|	СпрНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрПолитикаУчетаСерий.ТипПолитики, ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьЗаполнениеСерий,
	|	СпрНоменклатура.ИспользоватьУникальныеСерии КАК УникальностьСерии,
	|	КатегорииНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ТаблицаСоставНабора.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаСоставНабора.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ИСТИНА КАК ЭтоНабор,
	|	ТаблицаСоставНабора.ЦенаНабораСводно КАК ЦенаНабораСводно,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК НеобходимостьВводаКодаМаркировки
	|ПОМЕСТИТЬ ТаблицаДанныеНоменклатуры
	|ИЗ
	|	ТаблицаСоставНабора КАК ТаблицаСоставНабора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаСоставНабора.Номенклатура = СпрНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|		ПО СпрНоменклатура.КатегорияНоменклатуры = КатегорииНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолитикаУчетаСерий КАК СпрПолитикаУчетаСерий
	|		ПО СпрНоменклатура.ПолитикаУчетаСерий = СпрПолитикаУчетаСерий.Ссылка
	|		
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныеНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаДанныеНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаДанныеНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаДанныеНоменклатуры.Количество КАК Количество,
	|	ТаблицаДанныеНоменклатуры.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДанныеНоменклатуры.ДоляСтоимости КАК ДоляСтоимости,
	|	ТаблицаДанныеНоменклатуры.Порядок КАК Порядок,
	|	ТаблицаДанныеНоменклатуры.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	ТаблицаДанныеНоменклатуры.Маркируемый КАК Маркируемый,
	|	ТаблицаДанныеНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДанныеНоменклатуры.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ТаблицаДанныеНоменклатуры.Наименование КАК Наименование,
	|	ТаблицаДанныеНоменклатуры.Весовой КАК Весовой,
	|	ТаблицаДанныеНоменклатуры.Фасованный КАК Фасованный,
	|	ТаблицаДанныеНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаДанныеНоменклатуры.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ТаблицаДанныеНоменклатуры.НеобходимостьВводаСерии КАК НеобходимостьВводаСерии,
	|	ТаблицаДанныеНоменклатуры.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ТаблицаДанныеНоменклатуры.ПроверятьЗаполнениеСерий КАК ПроверятьЗаполнениеСерий,
	|	ТаблицаДанныеНоменклатуры.УникальностьСерии КАК УникальностьСерии,
	|	ТаблицаДанныеНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаДанныеНоменклатуры.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаДанныеНоменклатуры.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаДанныеНоменклатуры.ЭтоНабор КАК ЭтоНабор,
	|	ТаблицаДанныеНоменклатуры.ЦенаНабораСводно КАК ЦенаНабораСводно,
	|	МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период,
	|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
	|	ТаблицаДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки КАК НеобходимостьВводаКодаМаркировки
	|ПОМЕСТИТЬ ТаблицаМаксимальныйПериодЦен
	|ИЗ
	|	ТаблицаДанныеНоменклатуры КАК ТаблицаДанныеНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО ТаблицаДанныеНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ТаблицаДанныеНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
	|			И ТаблицаДанныеНоменклатуры.ЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения
	|			И ЦеныНоменклатуры.Период <= &Дата
	|			И ЦеныНоменклатуры.ВидЦен = &ВидЦены
	|			И ЦеныНоменклатуры.Актуальность
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанныеНоменклатуры.ТипНоменклатуры,
	|	ТаблицаДанныеНоменклатуры.ИспользоватьПартии,
	|	ТаблицаДанныеНоменклатуры.Характеристика,
	|	ТаблицаДанныеНоменклатуры.Номенклатура,
	|	ТаблицаДанныеНоменклатуры.ЕдиницаИзмерения,
	|	ТаблицаДанныеНоменклатуры.ФиксированнаяСтоимость,
	|	ТаблицаДанныеНоменклатуры.Маркируемый,
	|	ТаблицаДанныеНоменклатуры.ОсобенностьУчета,
	|	ТаблицаДанныеНоменклатуры.СтавкаНДС,
	|	ТаблицаДанныеНоменклатуры.Наименование,
	|	ТаблицаДанныеНоменклатуры.ЦенаНабораСводно,
	|	ТаблицаДанныеНоменклатуры.ПроверятьЗаполнениеПартий,
	|	ТаблицаДанныеНоменклатуры.ЭтоНабор,
	|	ТаблицаДанныеНоменклатуры.ХарактеристикаНабора,
	|	ТаблицаДанныеНоменклатуры.ПроверятьЗаполнениеСерий,
	|	ТаблицаДанныеНоменклатуры.УникальностьСерии,
	|	ТаблицаДанныеНоменклатуры.ВидНоменклатуры,
	|	ЦеныНоменклатуры.ВидЦен,
	|	ТаблицаДанныеНоменклатуры.Фасованный,
	|	ТаблицаДанныеНоменклатуры.НеобходимостьВводаСерии,
	|	ТаблицаДанныеНоменклатуры.НоменклатураНабора,
	|	ТаблицаДанныеНоменклатуры.Весовой,
	|	ТаблицаДанныеНоменклатуры.Количество,
	|	ТаблицаДанныеНоменклатуры.КоличествоУпаковок,
	|	ТаблицаДанныеНоменклатуры.ДоляСтоимости,
	|	ТаблицаДанныеНоменклатуры.Порядок,
	|	ТаблицаДанныеНоменклатуры.НеобходимостьВводаКодаМаркировки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ЕдиницаИзмерения,
	|	ВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМаксимальныйПериодЦен.Номенклатура КАК Номенклатура,
	|	ТаблицаМаксимальныйПериодЦен.Характеристика КАК Характеристика,
	|	ТаблицаМаксимальныйПериодЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаМаксимальныйПериодЦен.Количество КАК Количество,
	|	ТаблицаМаксимальныйПериодЦен.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаМаксимальныйПериодЦен.ДоляСтоимости КАК ДоляСтоимости,
	|	ТаблицаМаксимальныйПериодЦен.Порядок КАК Порядок,
	|	ТаблицаМаксимальныйПериодЦен.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	ТаблицаМаксимальныйПериодЦен.Маркируемый КАК Маркируемый,
	|	ТаблицаМаксимальныйПериодЦен.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаМаксимальныйПериодЦен.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ТаблицаМаксимальныйПериодЦен.Наименование КАК Наименование,
	|	ТаблицаМаксимальныйПериодЦен.Весовой КАК Весовой,
	|	ТаблицаМаксимальныйПериодЦен.Фасованный КАК Фасованный,
	|	ТаблицаМаксимальныйПериодЦен.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаМаксимальныйПериодЦен.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ТаблицаМаксимальныйПериодЦен.НеобходимостьВводаСерии КАК НеобходимостьВводаСерии,
	|	ТаблицаМаксимальныйПериодЦен.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ТаблицаМаксимальныйПериодЦен.ПроверятьЗаполнениеСерий КАК ПроверятьЗаполнениеСерий,
	|	ТаблицаМаксимальныйПериодЦен.УникальностьСерии КАК УникальностьСерии,
	|	ТаблицаМаксимальныйПериодЦен.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаМаксимальныйПериодЦен.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаМаксимальныйПериодЦен.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаМаксимальныйПериодЦен.ЭтоНабор КАК ЭтоНабор,
	|	ТаблицаМаксимальныйПериодЦен.ЦенаНабораСводно КАК ЦенаНабораСводно,
	|	ТаблицаМаксимальныйПериодЦен.Период КАК Период,
	|	ТаблицаМаксимальныйПериодЦен.ВидЦен КАК ВидЦен,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	ТаблицаМаксимальныйПериодЦен.НеобходимостьВводаКодаМаркировки КАК НеобходимостьВводаКодаМаркировки,
	|	1 КАК КоличествоНаборов
	|ИЗ
	|	ТаблицаМаксимальныйПериодЦен КАК ТаблицаМаксимальныйПериодЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО ТаблицаМаксимальныйПериодЦен.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ТаблицаМаксимальныйПериодЦен.Характеристика = ЦеныНоменклатуры.Характеристика
	|			И ТаблицаМаксимальныйПериодЦен.ЕдиницаИзмерения = ЦеныНоменклатуры.ЕдиницаИзмерения
	|			И ТаблицаМаксимальныйПериодЦен.ВидЦен = ЦеныНоменклатуры.ВидЦен
	|			И ТаблицаМаксимальныйПериодЦен.Период = ЦеныНоменклатуры.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСУНФ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("СпрНоменклатура");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	ХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если ДанныеНабора.Свойство("Характеристика") Тогда
		ХарактеристикаНабора = ДанныеНабора.Характеристика;
	КонецЕсли;
	Запрос.УстановитьПараметр("НоменклатураНабора", ДанныеНабора.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНабора", ХарактеристикаНабора);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидЦены", Форма.РозничныйВидЦены);
	
	ТаблицаСоставНабора = Запрос.Выполнить().Выгрузить();
	
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеНабора.Номенклатура,
		"СпособРасчетаЦеныНабора, ЭтоАгентскаяУслуга");
	
	СуммаДолейСтоимости = 0;
	ЦенаНабора = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаСоставНабора Цикл
		СуммаДолейСтоимости = СуммаДолейСтоимости + СтрокаТаблицы.ДоляСтоимости;
		Если НЕ ДанныеНоменклатуры.ЭтоАгентскаяУслуга ИЛИ ДанныеНабора.Номенклатура = СтрокаТаблицы.Номенклатура Тогда
			ЦенаНабора = ЦенаНабора + СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
		КонецЕсли;
	КонецЦикла;
	
	Счетчик = 0;
	Остаток = ЦенаНабора;
	Для Каждого СтрокаТаблицы Из ТаблицаСоставНабора Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНабора) И ЗначениеЗаполнено(ХарактеристикаНабора) Тогда
			СтрокаТаблицы.ХарактеристикаНабора = ХарактеристикаНабора;
		КонецЕсли;
		
		ЦенаПозиции = 0;
		Если ДанныеНоменклатуры.ЭтоАгентскаяУслуга Тогда
			ЦенаПозиции = ДанныеНабора.Цена / 100 * СтрокаТаблицы.ДоляСтоимости;
		ИначеЕсли ДанныеНоменклатуры.СпособРасчетаЦеныНабора = Перечисления.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоДолеСтоимости Тогда
			ЦенаПозиции = ДанныеНабора.Цена * СтрокаТаблицы.ДоляСтоимости / СуммаДолейСтоимости / СтрокаТаблицы.Количество;
		ИначеЕсли ДанныеНоменклатуры.СпособРасчетаЦеныНабора = Перечисления.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоЦене Тогда
			ЦенаПозиции = ДанныеНабора.Цена * СтрокаТаблицы.Цена / ЦенаНабора;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЦенаПозиции) Тогда
			СтрокаТаблицы.Цена = Окр(ЦенаПозиции, 2);
		КонецЕсли;
		
		Остаток = Остаток - СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		
		Если Счетчик = ТаблицаСоставНабора.Количество() И Остаток <> 0 Тогда
			СтрокаТаблицы.Цена = СтрокаТаблицы.Цена + Остаток / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыНабора = Новый Структура;
	ПараметрыНабора.Вставить("Номенклатура", ДанныеНабора.Номенклатура);
	ПараметрыНабора.Вставить("Характеристика", ХарактеристикаНабора);
	ПараметрыНабора.Вставить("Цена", ДанныеНабора.Цена);
	ПараметрыНабора.Вставить("ПроцентСкидкиНаценки");
	ПараметрыНабора.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
	ПараметрыНабора.Вставить("Организация", Форма.ВыбраннаяОрганизация);
	ПараметрыНабора.Вставить("ВидЦен", Форма.РозничныйВидЦены);
	ПараметрыНабора.Вставить("СуммаВключаетНДС", Форма.Объект.ЦенаВключаетНДС);
	ПараметрыНабора.Вставить("НалогообложениеНДС", Форма.Объект.НалогообложениеНДС);
	ПараметрыНабора.Вставить("ВалютаДокумента", УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту());
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеНабора.Номенклатура, "ЭтоАгентскаяУслуга") Тогда
		НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(ПараметрыНабора);
		Для Каждого СтрокаНабора Из ПараметрыНабора.СоставНабора Цикл
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура", СтрокаНабора.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", СтрокаНабора.Характеристика);
			МассивСтрок = ТаблицаСоставНабора.НайтиСтроки(ПараметрыПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				Если Не МассивСтрок[0].Цена = СтрокаНабора.Цена И Не СтрокаНабора.Цена = 0 Тогда
					МассивСтрок[0].Цена = СтрокаНабора.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость выполнения интерактивной проверки кода маркировки в форме РМК.
// Под проверкой понимается отправка и ожидание результата проверки кода маркировки от ОИСМ (если настройка включена).
//
// Параметры:
//  ПроверятьМаркированныйТоварНаККТ - Булево - признак необходимости проверки марки на ККТ.
//  ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
// 
Процедура ЗаполнитьНеобходимостьПроверкиМаркиНаККТ(ПроверятьМаркированныйТоварНаККТ, ПодключаемоеОборудование) Экспорт
	
	ПроверятьМаркированныйТоварНаККТ = ОборудованиеЧекопечатающиеУстройстваВызовСервера.
		ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(
			ПодключаемоеОборудование);
	
КонецПроцедуры

// Настраивает запрос по умолчанию для динамического списка реквизита "ТаблицаЧековККМ".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура СформироватьЗапросТаблицаЧековПоУмолчанию(Форма) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЧекККМ.Номер КАК Номер,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ";
	
	Форма.ТаблицаЧековККМ.ПроизвольныйЗапрос = Истина;
	Форма.ТаблицаЧековККМ.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

// Настраивает динамический список для получения списка чеков оплаченых в рассрочку.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМОплаченныхВРассрочку(Форма) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад
	|ПОМЕСТИТЬ ТаблицаСклады
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
	|ГДЕ
	|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
	|ГДЕ
	|	(ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ИЛИ ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.Документ КАК Ссылка,
	|	ЧекККМ.Номер КАК Номер,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.Статус КАК Статус,
	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаДокумента,
	|	ЧекККМ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЧекККМ.Проведен КАК Проведен,
	|	ЧекККМ.ДисконтнаяКарта КАК ДисконтнаяКарта
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			&ДатаОстатков,
	|			ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ЧекККМ)
	|				И Контрагент = &Контрагент
	|				И Организация В (&МассивОрганизаций)
	|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПокупателямиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	|		ПО РасчетыСПокупателямиОстатки.Документ = ЧекККМ.Ссылка
	|ГДЕ
	|	НЕ ЧекККМ.ПометкаУдаления
	|	И ЧекККМ.КассаККМ В(&МассивКассККМ)
	|	И ЧекККМ.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ТаблицаСклады.Склад КАК Склад
	|			ИЗ
	|				ТаблицаСклады КАК ТаблицаСклады)
	|	И ЧекККМ.Организация В(&МассивОрганизаций)";

	Форма.ТаблицаЧековККМ.ПроизвольныйЗапрос = Истина;
	Форма.ТаблицаЧековККМ.ТекстЗапроса = ТекстЗапроса;
	
	Контрагент = Форма.Параметры.Контрагент;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ТаблицаЧековККМ,
		"Контрагент",
		Контрагент);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.ТаблицаЧековККМ,
		"ДатаОстатков",
		ТекущаяДатаСеанса());
	
КонецПроцедуры

// Обрабатывает результат подбора товаров из формы подбора товаров.
// Метод вызывается после обработки оповещения о закрытии формы подбора товаров.
//
// Параметры:
//  РезультатПодбора - Структура - результат подбора товаров из формы подбора товаров, содержит:
//    АдресКорзиныВХранилище - Строка- адрес таблицы подобранных товаров во временном хранилище;
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьПоПодборуТоваров(РезультатПодбора, Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
		Запасы = Объект.Товары;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ (ТипЗнч(РезультатПодбора) = Тип("Структура")
		И РезультатПодбора.Свойство("АдресКорзиныВХранилище")
		И ЗначениеЗаполнено(РезультатПодбора.АдресКорзиныВХранилище)) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДобавлятьКаждыйТоварОтдельнойСтрокой = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДобавлятьВсеТоварыОтдельнойСтрокой") Тогда
		ДобавлятьКаждыйТоварОтдельнойСтрокой = Форма.ДобавлятьВсеТоварыОтдельнойСтрокой;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(РезультатПодбора.АдресКорзиныВХранилище);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Валюта КАК Валюта,
	|	ТаблицаТовары.Всего КАК Всего,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ТаблицаТовары.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Остаток КАК Остаток,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Партия КАК Справочник.ПартииНоменклатуры) КАК Партия,
	|	ТаблицаТовары.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ТаблицаТовары.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	ТаблицаТовары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ТаблицаТовары.Резерв КАК Резерв,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ТаблицаТовары.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.ЦенаВВалютеПодбора КАК ЦенаВВалютеПодбора,
	|	ТаблицаТовары.ЭтоНабор КАК ЭтоНабор,
	|	ТаблицаТовары.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ТаблицаПодбор
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодбор.Валюта КАК Валюта,
	|	ТаблицаПодбор.Всего КАК Всего,
	|	ТаблицаПодбор.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаПодбор.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ТаблицаПодбор.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ТаблицаПодбор.Количество КАК Количество,
	|	ТаблицаПодбор.Номенклатура КАК Номенклатура,
	|	ТаблицаПодбор.Остаток КАК Остаток,
	|	ВЫБОР
	|		КОГДА ТаблицаПодбор.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				И ТаблицаПодбор.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаПодбор.Партия
	|	КОНЕЦ КАК Партия,
	|	ТаблицаПодбор.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ТаблицаПодбор.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	ТаблицаПодбор.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ТаблицаПодбор.Резерв КАК Резерв,
	|	ТаблицаПодбор.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПодбор.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПодбор.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПодбор.Сумма КАК Сумма,
	|	ТаблицаПодбор.СуммаНДС КАК СуммаНДС,
	|	ТаблицаПодбор.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ТаблицаПодбор.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаПодбор.Характеристика КАК Характеристика,
	|	ТаблицаПодбор.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ТаблицаПодбор.Цена КАК Цена,
	|	ТаблицаПодбор.ЦенаВВалютеПодбора КАК ЦенаВВалютеПодбора,
	|	ТаблицаПодбор.ЭтоНабор
	|		ИЛИ СпрНоменклатура.ЭтоАгентскаяУслуга КАК ЭтоНабор,
	|	ТаблицаПодбор.Ячейка КАК Ячейка,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ВариантЧастичногоВыбытия,
	|	НЕ НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие,
	|	ЕСТЬNULL(СпрНоменклатура.Весовой, ЛОЖЬ) КАК Весовой,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК Маркируемый,
	|	ЕСТЬNULL(СпрНоменклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ) КАК ИспользоватьСерииНоменклатуры,
	|	СпрНоменклатура.ИспользоватьУникальныеСерии КАК УникальностьСерии
	|ИЗ
	|	ТаблицаПодбор КАК ТаблицаПодбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|			ПО СпрНоменклатура.ВидАлкогольнойПродукции = ВидыАлкогольнойПродукции.Ссылка
	|		ПО ТаблицаПодбор.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|			ПО НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ПО ТаблицаПодбор.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия";
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСУНФ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("СпрНоменклатура");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТоваров);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		Упаковка = СтрокаТоваров.ЕдиницаИзмерения;
		Коэффициент = 1;
		
		Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
		КонецЕсли;
		
		КоличествоУпаковок = СтрокаТоваров.Количество;
		
		РазбиватьСтроку = Ложь;
		Если Не СтрокаТоваров.Весовой
			И ((СтрокаТоваров.Маркируемый И Не СтрокаТоваров.ПоштучноеВыбытие)
				Или (СтрокаТоваров.ИспользоватьСерииНоменклатуры И СтрокаТоваров.УникальностьСерии)
				Или (ДобавлятьКаждыйТоварОтдельнойСтрокой)) Тогда
				
				РазбиватьСтроку = Истина;
		КонецЕсли;
		
		Если РазбиватьСтроку Тогда
			
			Для к = 1 По КоличествоУпаковок Цикл
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров, "Номенклатура, Характеристика, Партия, Цена, СтавкаНДС");
				
				НоваяСтрока.ТорговыйОбъект = СтрокаТоваров.СтруктурнаяЕдиница;
				ЗаполнитьОрганизациюПродажи(НоваяСтрока, Форма);
				
				СкорректироватьСтавкуНДСКомиссионногоТовара(НоваяСтрока, Объект);
				
				НоваяСтрока.Количество = 1;
				НоваяСтрока.КоличествоУпаковок = 1;
				НоваяСтрока.Упаковка = Упаковка;
				НоваяСтрока.ЭтоНабор = СтрокаТоваров.ЭтоНабор;
				НоваяСтрока.КоличествоВПотребительскойУпаковке = СтрокаТоваров.КоличествоВПотребительскойУпаковке;
				НоваяСтрока.ПоштучноеВыбытие = СтрокаТоваров.ПоштучноеВыбытие;
				
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("Количество", НоваяСтрока.Количество);
				ДанныеСтроки.Вставить("КоличествоУпаковок", НоваяСтрока.КоличествоУпаковок);
				ДанныеСтроки.Вставить("Цена", СтрокаТоваров.Цена);
				ДанныеСтроки.Вставить("Сумма", 0);
				ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", СтрокаТоваров.ПроцентСкидкиНаценки);
				ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
				ДанныеСтроки.Вставить("СтавкаНДС", НоваяСтрока.СтавкаНДС);
				ДанныеСтроки.Вставить("СуммаНДС", 0);
				ДанныеСтроки.Вставить("СуммаВключаетНДС", Объект.ЦенаВключаетНДС);
				ДанныеСтроки.Вставить("Всего", 0);
				ДанныеСтроки.Вставить("СуммаБезСкидки", 0);
				
				РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			КонецЦикла;
		Иначе
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТоваров.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТоваров.Характеристика);
			СтруктураПоиска.Вставить("Партия", СтрокаТоваров.Партия);
			СтруктураПоиска.Вставить("Цена", СтрокаТоваров.Цена);
			
			НайденныеСтроки = Запасы.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество()>0 И Не ДобавлятьКаждыйТоварОтдельнойСтрокой
				И (Не СтрокаТоваров.ИспользоватьСерииНоменклатуры) Тогда
				СтрокаПодбора = НайденныеСтроки[0];
				КоличествоУпаковок = КоличествоУпаковок + СтрокаПодбора.Количество;
			Иначе
				СтрокаПодбора = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПодбора, СтрокаТоваров, "Номенклатура, Характеристика, Партия, Цена, СтавкаНДС");
				
				СтрокаПодбора.ТорговыйОбъект = СтрокаТоваров.СтруктурнаяЕдиница;
				
				ЗаполнитьОрганизациюПродажи(СтрокаПодбора, Форма);
			КонецЕсли;
			
			СкорректироватьСтавкуНДСКомиссионногоТовара(СтрокаПодбора, Объект);
			
			СтрокаПодбора.Количество = КоличествоУпаковок;
			СтрокаПодбора.КоличествоУпаковок = КоличествоУпаковок;
			СтрокаПодбора.Упаковка = Упаковка;
			СтрокаПодбора.ЭтоНабор = СтрокаТоваров.ЭтоНабор;
			СтрокаПодбора.КоличествоВПотребительскойУпаковке = СтрокаТоваров.КоличествоВПотребительскойУпаковке;
			СтрокаПодбора.ПоштучноеВыбытие = СтрокаТоваров.ПоштучноеВыбытие;
			
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("Количество", СтрокаПодбора.Количество);
			ДанныеСтроки.Вставить("КоличествоУпаковок", СтрокаПодбора.КоличествоУпаковок);
			ДанныеСтроки.Вставить("Цена", СтрокаТоваров.Цена);
			ДанныеСтроки.Вставить("Сумма", 0);
			ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", СтрокаТоваров.ПроцентСкидкиНаценки);
			ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
			ДанныеСтроки.Вставить("СтавкаНДС", СтрокаПодбора.СтавкаНДС);
			ДанныеСтроки.Вставить("СуммаНДС", 0);
			ДанныеСтроки.Вставить("СуммаВключаетНДС", Объект.ЦенаВключаетНДС);
			ДанныеСтроки.Вставить("Всего", 0);
			ДанныеСтроки.Вставить("СуммаБезСкидки", 0);
			
			РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
			
			ЗаполнитьЗначенияСвойств(СтрокаПодбора, ДанныеСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для возврата скупки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозвратСкупки(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура настраивает элементы настроек форм подбора в настройках РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы настроек РМК.
//
Процедура НастроитьЭлементыПодбораТоваров(Форма) Экспорт
	
	ИспользоватьНовыйПодборТоваров = Форма.НастройкаРМК.ИспользоватьНовыйПодборТоваров;
	
	Форма.Элементы.НастройкаРМКЗакрыватьПодборПриВыбореТовара.Доступность = ИспользоватьНовыйПодборТоваров;
	Если Не ИспользоватьНовыйПодборТоваров Тогда
		Форма.НастройкаРМК.ЗакрыватьПодборПриВыбореТовара = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Метод реализующий дополнительную логику при сохранении настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Результат - Структура - возвращаемый параметр работы метода, ключи структуры:
//   * ВыполненоУспешно - Булево - Ложь, если сохранение настроек формы недопустимо.
//   * ТекстПредупрежденийОшибок - Строка - текст сообщения об ошибке, который будет выведен пользователю.
//
Процедура ПриСохраненииНастроекРМК(Форма, Результат) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяет значение владельца кода доступа по исходным данным
Процедура ПереопределитьВладельцаКодаДоступа(ВладелецКодаДоступа) Экспорт
КонецПроцедуры

// Заполняет параметры для работы РМК при запуске
//
// Параметры:
//  ЗапуститьНовыйРМК - Булево - признак того, будет ли запущен РМК при старте системы
//  НеобходимоОбновитьИнтерфейс - Булево - признак того, что необходимо обновить интерфейс,
//    например, если добавили РМК на стартовую страницу.
//
Процедура ЗаполнитьПараметрыРаботыКлиентаПриЗапуске(ЗапуститьНовыйРМК, НеобходимоОбновитьИнтерфейс) Экспорт
	
	НастроитьРабочийСтол(НеобходимоОбновитьИнтерфейс);
	
	Если Не ВключеноИспользованиеНовогоРМК() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьТекущегоПользователя = Истина;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
			ПолучитьТекущегоПользователя = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	Если ПолучитьТекущегоПользователя Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ОткрыватьРМКПриСтарте = УправлениеДоступомУНФ.ЕстьПрофильРабочееМестоКассира();
		ПользовательСПолнымиПравами = УправлениеДоступом.ЕстьРоль("ПолныеПрава",, ТекущийПользователь);
		ЗапуститьНовыйРМК = ОткрыватьРМКПриСтарте И Не ПользовательСПолнымиПравами;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредварительнаяПроверкаЧеков(КассаККМ) Экспорт
	
	ОписаниеОшибки = "";
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Ложь);
	Результат.Вставить("НеПробитыеЧеки", Новый Массив);
	Результат.Вставить("ЧекиБезФискальногоНомера", Новый Массив);
	Результат.Вставить("ОтчетОРозничныхПродажах", Неопределено);
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	Если НЕ ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах) Тогда
		// Если нет связи кассовой смены и отчета, создаем новый отчет.
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.КассоваяСмена) Тогда
			ОтчетОРозничныхПродажахОбъект = РозничныеПродажиСервер.СоздатьОтчетОРозничныхПродажах(
				СтруктураСостояниеКассовойСмены.КассоваяСмена, ОписаниеОшибки);
		Иначе
			Возврат Результат;
		КонецЕсли;
		Если ОтчетОРозничныхПродажахОбъект <> Неопределено Тогда
			ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажахОбъект.Ссылка;
			СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах; 
		КонецЕсли;
	Иначе
		ОтчетОРозничныхПродажах = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		Результат.Вставить("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		
		Если НЕ Константы.УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены.Получить() Тогда
			НепробитыеЧеки = РозничныеПродажиСервер.НепробитыеЧекиПередЗакрытиемСмены(ОтчетОРозничныхПродажах);
			Если НепробитыеЧеки.Количество() > 0 Тогда
				Результат.Вставить("Ошибки", Истина);
				Результат.Вставить("НепробитыеЧеки", НепробитыеЧеки);
			КонецЕсли;
		КонецЕсли;
		
		ЧекиБезФискальногоНомера = РозничныеПродажиСервер.ЧекиБезФискальногоНомераПередЗакрытиемСмены(ОтчетОРозничныхПродажах);
		Если ЧекиБезФискальногоНомера.Количество() > 0 Тогда
			Результат.Вставить("Ошибки", Истина);
			Результат.Вставить("ЧекиБезФискальногоНомера", ЧекиБезФискальногоНомера);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Позволяет обработать событие ОбработкаОповещения для формы Обработки.РабочееМестоКассира.Формы.ФормаРМК. на сервере.
// Дополнительно см. метод ОбщегоНазначенияРМККлиентПереопределяемый.ОбработкаОповещения.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	Возврат;
КонецПроцедуры

// Обработчик подписки на событие "НастроитьДоступностьФОИспользоватьНовоеРМК".
//
Процедура НастроитьВозможностьИзмененияНастройкиИспользованияНовогоРМК(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТолькоНовыйРМК") И Источник.Значение = Ложь Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Разрешено использование только нового РМК.'"));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак использования автоматических скидок.
//
// Возвращаемое значение:
//  Булево - Истина, если используются автоматические скидки.
//
Функция ИспользуютсяАвтоматическиеСкидки() Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Возврат Результат;
	
КонецФункции

// Проверяет настройки касс ККМ перед открытием формы РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Отказ - Булево - флаг ошибки.
//  ТекстЗаголовка - Строка - текст заголовка ошибки.
//  ТекстСообщения - Строка - текст сообщения ошибки.
//
Процедура ПроверитьНастройкиКассККМ(Форма, Отказ, ТекстЗаголовка, ТекстСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиРМКРаспределениеНоменклатуры.КассаККМ.Владелец КАК Организация,
	|	НастройкиРМКРаспределениеНоменклатуры.КассаККМ КАК КассаККМ
	|ИЗ
	|	Справочник.НастройкиРМК.РаспределениеНоменклатуры КАК НастройкиРМКРаспределениеНоменклатуры
	|ГДЕ
	|	НастройкиРМКРаспределениеНоменклатуры.Ссылка.РабочееМесто = &РабочееМесто";
	
	Запрос.УстановитьПараметр("РабочееМесто", Форма.РабочееМесто);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("Организация", Выборка.Организация);
		СтрокиКасс = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
		
		Если СтрокиКасс.Количество() > 0 Тогда
			Если НЕ Выборка.КассаККМ = СтрокиКасс[0].КассаККМ Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка настройки распределения продаж по кассам ККМ'");
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Касса ККМ ""%1"", по организации ""%2"" не подключена.
					|Обратитесь к администратору системы.'"), Выборка.КассаККМ, Выборка.Организация);
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает/обновляет настройки нового РМК (справочник "Настройки рабочего места кассира") на основе
// значений по умолчанию, либо на основе ранее созданных настроек РМК ( справочник "Настройки РМК").
//
//
Процедура АктуализироватьНастройкиРМК() Экспорт
	
	ИсходныеДанные = ДействующиеНастройкиРМКДляВсехРабочихМест();
	
	Если ИсходныеДанные.Количество() > 0 Тогда
		
		Для Каждого Настройки Из ИсходныеДанные Цикл
			АктуализироватьНастройкуРМК(Настройки.НастройкиБРМК, Настройки.НастройкиРМК, Настройки.РабочееМесто);
		КонецЦикла;
		
	Иначе
		
		НастройкиБРМКСуществуют = СозданыНастройкиБРМКДляТекущегоРабочегоМеста();
		
		Если НЕ НастройкиБРМКСуществуют Тогда
			
			НастройкаБРМК = ПредопределенноеЗначение("Справочник.НастройкиРабочегоМестаКассира.ПустаяСсылка");
			АктуализироватьНастройкуРМК(НастройкаБРМК);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет вид номенклатуры
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура вид которой необходимо получить.
//  Результат - ОпределяемыйТип.ВидНоменклатурыРМК - результат заполнения.
//
Процедура ЗаполнитьВидНоменклатуры(Номенклатура, Результат) Экспорт
	Результат = Номенклатура.КатегорияНоменклатуры;
КонецПроцедуры

// Получает ссылку на подарочный сертификат по ГУИД.
//
// Параметры:
//  ГУИД - Строка - значение ГУИД, по которому необходимо получить подарочный сертификат.
//  Результат - ОпределяемыйТип.НоменклатураРМК, Неопределено - возвращаемый параметр для значения подарочного сертификата.
//
Процедура ПодарочныйСертификатПоГУИД(ГУИД, Результат = Неопределено) Экспорт
	
	Попытка
		
		ПодарочныйСертификат = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		
		Если ПодарочныйСертификат.Наименование = "" Тогда
			ПодарочныйСертификат = Неопределено;
		КонецЕсли;
		
	Исключение
		ПодарочныйСертификат = Неопределено;
	КонецПопытки;
	
	Результат = ПодарочныйСертификат;
	
КонецПроцедуры

Функция НайтиСоздатьСериюПоДаннымШтрихкода(Номенклатура, Штрихкод) Экспорт
	
	Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	НЕ СерииНоменклатуры.ПометкаУдаления
	|	И СерииНоменклатуры.Владелец = &Номенклатура
	|	И СерииНоменклатуры.НомерКиЗГИСМ = &Штрихкод";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Серия = Выборка.Серия;
	Иначе
		СоздатьСериюПоДаннымШтрихкода(Номенклатура, Штрихкод, Серия);
	КонецЕсли;
	
	Возврат Серия;
	
КонецФункции

// Получает адрес таблицы значений с используемыми подарочными сертификатами.
//
// Параметры:
//  Адрес - Строка - переменная, куда будет записан адрес таблицы с подарочными сертификатами.
//
Процедура ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
		|			И (ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.Номенклатура)
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПодарочныхСертификатов = РезультатЗапроса.Выгрузить();
	Адрес = ПоместитьВоВременноеХранилище(ТаблицаПодарочныхСертификатов);
	
КонецПроцедуры

// Определяет используются ли серии для номенкдатуры
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - позиция номенклатуры, для которой будет определяться использование серий.
//  Результат - Булево - переменная, куда будет записан результат проверки использования серий.
//
Процедура ОпределитьИспользованиеСерий(Номенклатура, Результат) Экспорт
	
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьСерииНоменклатуры");
	
КонецПроцедуры

// Процедура определяет актуальный баланс подарочного сертификата.
//
// Параметры:
//  ПараметрыСертификата - Структура:
//    БалансСертификата - Число - баланс подарочного сертификата.
//    Сертификат - ОпределяемыйТип.НоменклатураРМК - подарочный сертификат.
//    Серия - ОпределяемыйТип.СерияРМК - серия подарочного сертификата.
//
Процедура ЗапроситьБалансСертификата(ПараметрыСертификата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодарочныеСертификатыОстатки.СуммаОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты.Остатки(
	|			,
	|			ПодарочныйСертификат = &ПодарочныйСертификат
	|				И НомерСертификата = &НомерСертификата) КАК ПодарочныеСертификатыОстатки";
	
	Запрос.УстановитьПараметр("ПодарочныйСертификат", ПараметрыСертификата.Сертификат);
	Запрос.УстановитьПараметр("НомерСертификата", ПараметрыСертификата.Серия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПараметрыСертификата.БалансСертификата = Выборка.Остаток;
	КонецЕсли;
	
КонецПроцедуры

// Процедура корректирует цену подарочного сертификата в строке.
// Если текущая операция возврат и в текущей строке серийный подарочный сертификат, то цена должна быть установлена
// равной 0, чтобы запросить актуальный баланс сертификата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - Структура - данные текущей строки.
//
Процедура СкорректироватьЦенуПодарочногоСертификата(Форма, ТекущаяСтрока) Экспорт
	
	Объект = Форма.Объект;
	
	ОбнулитьБалансСертификата = Ложь;
	Если Объект.ВидОперации = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
		ОбнулитьБалансСертификата = Истина;
	КонецЕсли;
	
	Если Не ОбнулитьБалансСертификата Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.НеобходимостьВводаСерии
		И ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		Если ТекущаяСтрока.Свойство("Цена") Тогда
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("Сумма") Тогда
			ТекущаяСтрока.Сумма = 0;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("СуммаБезСкидки") Тогда
			ТекущаяСтрока.СуммаБезСкидки = 0;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("СуммаНДС") Тогда
			ТекущаяСтрока.СуммаНДС = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает цену на товар, который был выбран в строке быстрого добавления товара..
//
// Параметры:
//  ПараметрыРасчетаЦены - см. ОбщегоНазначенияРМК.ПараметрыРасчетаЦены().
//
Процедура РассчитатьЦенуВыбранногоТовара(ПараметрыРасчетаЦены) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА ЕСТЬNULL(СпрЕдиницыИзмерения.Коэффициент, 1)
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦен = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = СпрЕдиницыИзмерения.Ссылка");
	
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыРасчетаЦены.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидЦены", ПараметрыРасчетаЦены.ВидЦены);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПараметрыРасчетаЦены.Цена = Выборка.Цена / Выборка.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

// Корректирует ставку НДС комиссионного товара
//
// Параметры:
//   СтруктураДанные - Структура данных номенклатуры
//   Объект - Объект формы
//
Процедура СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные, Объект = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Или Не ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект = Неопределено И СтруктураДанные.Организация = Объект.Организация Тогда
		Возврат
	КонецЕсли;
	
	СтавкаНДСДоИзменения = СтруктураДанные.СтавкаНДС;
	
	СтруктураДанные.СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Объект, СтруктураДанные, СтруктураДанные.СистемаНалогообложения);
	
	Партия = СтруктураДанные.Партия;
	
	СтавкаБезНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	Если ЗначениеЗаполнено(Партия) 
		И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии
		И ЗначениеЗаполнено(Партия.НалогообложениеНДС) Тогда
		
		Если Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.СтавкаНДС = СтавкаБезНДС;
			СтруктураДанные.СуммаНДС = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураДанные.СтавкаНДС = СтавкаНДСДоИзменения И НЕ СтруктураДанные.СтавкаНДС = СтавкаБезНДС Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.РозничныйВидЦен КАК РозничныйВидЦен,
		|	ВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ВидыЦен.ВалютаЦены КАК ВалютаЦены
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
		|		ПО СтруктурныеЕдиницы.РозничныйВидЦен = ВидыЦен.Ссылка
		|ГДЕ
		|	СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект";
		
		Запрос.УстановитьПараметр("ТорговыйОбъект", СтруктураДанные.ТорговыйОбъект);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЦенаВключаетНДС = Выборка.ЦенаВключаетНДС;
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтруктураДанные.СтавкаНДС);
			СтруктураДанные.СуммаНДС = ?(ЦенаВключаетНДС, СтруктураДанные.Сумма - (СтруктураДанные.Сумма) / ((СтавкаНДС + 100) / 100),
			СтруктураДанные.Сумма * СтавкаНДС / 100);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признаки видов оплат в настройкахРМК по данным информационной базы.
//
// Параметры:
//  ОбъектНастройкаРМК - СправочникОбъект.НастройкиРабочегоМестаКассира - настройка РМК.
//
Процедура ОбновитьНастройкиПризнаковВидовОплат(ОбъектНастройкаРМК) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерверЛояльностиПолучательДанных") Тогда
		ОбъектНастройкаРМК.ИспользоватьОплатуБонусами = Истина;
		ОбъектНастройкаРМК.ИспользоватьОплатуСертификатами = Истина;
	Иначе
		ОбъектНастройкаРМК.ИспользоватьОплатуБонусами = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы");
		ОбъектНастройкаРМК.ИспользоватьОплатуСертификатами =ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	КонецЕсли;
	
КонецПроцедуры

// Определяет существование кода у кассира
//
// Параметры:
//  КассирДляПроверки - ОпределяемыйТип.КассирРМК - проверяемый кассир
//  Результат - Булево - признак установленного кода у кассира
//
Процедура ОпределитьСуществованиеКодаУКассира(КассирДляПроверки, Результат) Экспорт
	
	Если ЗначениеЗаполнено(КассирДляПроверки.ШтрихКод) Или ЗначениеЗаполнено(КассирДляПроверки.МагнитныйКод) Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит поиск Промокода и отображает его статус на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура НайтиПромокодЛокально(Форма) Экспорт
	
	Форма.Элементы.ВведенныйПромокод.Подсказка = "";
	
	ДанныеПромокода = Новый Структура;
	ДанныеПромокода.Вставить("Промокод", Форма.ВведенныйПромокод);
	СтруктураОтвета = Неопределено;
	СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ЗапросСостоянияПромокода", СтруктураОтвета);
	СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьСостояниеПромокода(ДанныеПромокода, СтруктураОтвета, Ложь);
	
	ПромокодДоступен = Неопределено;
	Если СтруктураОтвета.Свойство("PromocodeIsAvalible", ПромокодДоступен) Тогда
		Скидка = Неопределено;
		УИДСкидки = Неопределено;
		Форма.СкидкаВведенногоПромокода = Неопределено;
		Если ПромокодДоступен И СтруктураОтвета.Свойство("PromocodeDiscount", УИДСкидки) Тогда
			Скидка = Неопределено;
			СкидкаНаценкаПоГУИД(УИДСкидки.Ref, Скидка);
			Форма.СкидкаВведенногоПромокода = Скидка;
			Форма.ОписаниеСкидкиПромокода = Строка(Скидка);
		ИначеЕсли ПромокодДоступен Тогда
			СкидкиПромокода = ПромокодыУНФ.СкидкиПромокодов(Форма.ВведенныйПромокод);
			Форма.СкидкаВведенногоПромокода = СкидкиПромокода[Форма.ВведенныйПромокод];
			Форма.ОписаниеСкидкиПромокода = Строка(СкидкиПромокода[Форма.ВведенныйПромокод]);
		КонецЕсли;
		ТекстСостояния = "";
		Если ПромокодДоступен И ЗначениеЗаполнено(Скидка) Тогда
			УжеПримененныеПромокоды = Форма.ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("СкидкаНаценка", Скидка));
			Если УжеПримененныеПромокоды.Количество() > 0 Тогда
				ПромокодДоступен = Ложь;
				ТекстСостояния = НСтр("ru = 'Промокод на эту скидку уже добавлен.'");
			КонецЕсли;
		ИначеЕсли Не ПромокодДоступен Тогда
			СтруктураОтвета.Свойство("PromocodeStatus", ТекстСостояния); 
		КонецЕсли;
		Форма.Элементы.ВведенныйПромокод.Подсказка = ТекстСостояния;
	КонецЕсли;
	Форма.ПромокодДоступен = ПромокодДоступен;
	
КонецПроцедуры

// Получает ссылку на скидку (наценку) по ГУИД.
//
// Параметры:
//  ГУИД - Строка - значение ГУИД, по которому необходимо получить подарочный сертификат.
//  Результат - ОпределяемыйТип.СкидкаНаценкаРМК, Неопределено - возвращаемый параметр для значения подарочного сертификата.
//
Процедура СкидкаНаценкаПоГУИД(ГУИД, Результат = Неопределено) Экспорт
	
	Попытка
		
		СкидкаНаценка = Справочники.АвтоматическиеСкидки.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		
		Если СкидкаНаценка.Наименование = "" Тогда
			СкидкаНаценка = Неопределено;
		КонецЕсли;
		
	Исключение
		СкидкаНаценка = Неопределено;
	КонецПопытки;
	
	Результат = СкидкаНаценка;
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета альтернативный табак.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - альтернативный табак.
//
Процедура ОпределитьОсобенностьУчетаАльтернативныйТабак(ОсобенностьУчета, Результат) Экспорт
	
	Если ОсобенностьУчета = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли переданное значение типа номенклатуры подарочный сертификат.
//
// Параметры:
//  ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК - тип номенклатуры.
//  Результат - Булево - Истина, если типа номенклатуры - подарочный сертификат.
//
Процедура ОпределитьТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры, Результат) Экспорт
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет тип номенклатуры
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК номенклатура вид которой необходимо получить
//  Результат - ПеречислениеСсылка.ТипНоменклатуры - результат заполнения
//
Процедура ЗаполнитьТипНоменклатуры(Номенклатура, Результат) Экспорт
	Результат = Номенклатура.ТипНоменклатуры;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруПоТРУ(Форма, МассивТРУ) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СправочникНоменклатура.Ссылка КАК Ссылка,
	               |	СправочникНоменклатура.КодТРУ КАК КодТРУ,
	               |	СправочникНоменклатура.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Номенклатура КАК СправочникНоменклатура
	               |ГДЕ
	               |	СправочникНоменклатура.КодТРУ В(&КодыТРУ)";
	
	Запрос.УстановитьПараметр("КодыТРУ", МассивТРУ);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	
	Форма.СписокТоваров.Отбор.Элементы.Очистить();
	ГруппаЭлементовОтбора = Форма.СписокТоваров.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Наименование");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЗапроса.Наименование;
	КонецЦикла;
	
КонецПроцедуры

// Процедура анализирует данные выбранные пользователем и дозаполняет при необходимости.
// В массив данных необходимо добавить выбранные значения из формы подбора. Т.к возможна
// ситуация, когда в форме подбора реализован множественный выбор строк.
//
// Параметры:
//  ДанныеВыбора - Структура - выбранные данные в форме ручного подбора.
//                 Обязательно должна содержать ключи Номенклатура, Цена.
//                 При необходимости - Характеристика, Упаковка.
//  МассивДанных - Массив - массив, в который нужно добавить выбранные данные.
//  РозничныйВидЦены - ОпределяемыйТип.ВидЦеныРМК - форма РМК.
//
Процедура ДозаполнитьДанныеРучногоВыбора(ДанныеВыбора, МассивДанных, РозничныйВидЦены) Экспорт
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		               |ГДЕ
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура
		               |	И ЦеныНоменклатурыСрезПоследних.ВидЦен = &ВидЦены";
		
		Запрос.УстановитьПараметр("Номенклатура", ДанныеВыбора.Номенклатура);
		Запрос.УстановитьПараметр("ВидЦены", РозничныйВидЦены);
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаЦены = РезультатЗапроса.Выбрать();
		Пока ВыборкаЦены.Следующий() Цикл 
			СтруктураТовара = Новый Структура();
			СтруктураТовара.Вставить("Номенклатура", ВыборкаЦены.Номенклатура);
			СтруктураТовара.Вставить("Цена", ВыборкаЦены.Цена);
			СтруктураТовара.Вставить("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			СтруктураТовара.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			СтруктураТовара.Вставить("ОсобенностьУчета", ВыборкаЦены.Номенклатура.ВидПродукцииИС);
			СтруктураТовара.Вставить("ВидНоменклатуры", ВыборкаЦены.Номенклатура.КатегорияНоменклатуры);
			МассивДанных.Добавить(СтруктураТовара);
		КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьДеревоТоваровПоКодамТРУ(ДеревоСертификатовЗначение, КодыТоваровТРУ) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыТоваровТРУ.Сертификат КАК Сертификат,
	               |	КодыТоваровТРУ.КодТРУ КАК КодТРУ,
	               |	КодыТоваровТРУ.Количество КАК Количество
	               |ПОМЕСТИТЬ ТаблицаСертификатов
	               |ИЗ
	               |	&КодыТоваровТРУ КАК КодыТоваровТРУ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСертификатов.Сертификат КАК Сертификат,
	               |	ТаблицаСертификатов.Количество КАК Количество,
	               |	СправочникНоменклатура.Ссылка КАК Ссылка,
	               |	СправочникНоменклатура.КодТРУ КАК КодТРУ
	               |ИЗ
	               |	Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
	               |		ПО (ТаблицаСертификатов.КодТРУ = СправочникНоменклатура.КодТРУ)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТаблицаСертификатов.Сертификат
	               |ИТОГИ ПО
	               |	Сертификат";

	Запрос.УстановитьПараметр("КодыТоваровТРУ", КодыТоваровТРУ); 
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСертификат = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСертификат.Следующий() Цикл
		
		ЭлементСертификат = ДеревоСертификатовЗначение.Строки.Добавить();
		ЭлементСертификат.Сертификат = ВыборкаСертификат.Сертификат;
		
		ВыборкаКодыТРУ = ВыборкаСертификат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКодыТРУ.Следующий() Цикл
			ЭлементКодТРУ = ЭлементСертификат.Строки.Добавить();
			ЭлементКодТРУ.Номенклатура = ВыборкаКодыТРУ.Ссылка;
			ЭлементКодТРУ.Баланс = ВыборкаКодыТРУ.Количество;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу данных контрагента по переданному контрагенту
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентРМК.
//  АдресТаблицыДанныеКлиента - Строка - Адрес таблицы данных клиентов
//  	*Карта - ссылка на карту лояльности
//  	*НомерКарты - номер карты лояльности (штрихкод или магнитный код)
//  	*НомерТелефона - номер телефона владельца карты лояльности
//
Процедура ПолучитьДанныеЛокальнойКартыКонтрагента(Контрагент, АдресТаблицыДанныеКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаДанныеКартыЛояльностиКлиента = ПолучитьИзВременногоХранилища(АдресТаблицыДанныеКлиента);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КартыЛояльности.Ссылка КАК Карта,
	|	ВЫБОР
	|		КОГДА СпрВидыДисконтныхКарт.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыКарт.Магнитная)
	|			ТОГДА ВЫБОР
	|					КОГДА КартыЛояльности.КодКартыМагнитный = """"
	|						ТОГДА КартыЛояльности.КодКартыШтрихкод
	|					ИНАЧЕ КартыЛояльности.КодКартыМагнитный
	|				КОНЕЦ
	|		КОГДА КартыЛояльности.КодКартыШтрихкод = """"
	|			ТОГДА КартыЛояльности.КодКартыМагнитный
	|		ИНАЧЕ КартыЛояльности.КодКартыШтрихкод
	|	КОНЕЦ КАК НомерКарты,
	|	КонтрагентыКИТелефон.Представление КАК НомерТелефона
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК СпрВидыДисконтныхКарт
	|		ПО КартыЛояльности.Владелец = СпрВидыДисконтныхКарт.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКИТелефон
	|		ПО КартыЛояльности.ВладелецКарты = КонтрагентыКИТелефон.Ссылка
	|			И (КонтрагентыКИТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
	|ГДЕ
	|	КартыЛояльности.ВладелецКарты = &ВладелецКарты";
	Запрос.УстановитьПараметр("ВладелецКарты", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаДанныеКартыЛояльностиКлиента.Добавить();
			НоваяСтрока.Карта = Выборка.Карта;
			НоваяСтрока.НомерКарты = Выборка.НомерКарты;
			НоваяСтрока.НомерТелефона = Выборка.НомерТелефона;
		КонецЦикла;
	КонецЕсли;
	АдресТаблицыДанныеКлиента = ПоместитьВоВременноеХранилище(ТаблицаДанныеКартыЛояльностиКлиента);
	
КонецПроцедуры

// Функция преобразует дерево значений в таблицу значений.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево скидок
//  Таблица - ТаблицаЗначений - таблица скидок
//
// Возвращаемое значение:
//  Таблица - Булево ТаблицаЗначений - таблица скидок
//
Функция ДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт
	
	Если Таблица = Неопределено Тогда
		
		Таблица = Новый ТаблицаЗначений;
		
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл

		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
		КонецЕсли;

	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

// Процедура заполняет остаток по строке
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для отбора остатков
//
Процедура ЗаполнитьКолонкуОстаток(ДанныеСтроки, ТорговыйОбъект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад
	|ПОМЕСТИТЬ ТаблицаСклады
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
	|ГДЕ
	|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
	|ГДЕ
	|	(ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ИЛИ ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваров.Количество КАК КоличествоОстаток
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.Номенклатура = &Номенклатура
	|	И ОстаткиТоваров.Характеристика = &Характеристика
	|	И ОстаткиТоваров.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ТаблицаСклады.Склад КАК Склад
	|			ИЗ
	|				ТаблицаСклады КАК ТаблицаСклады)";
	Запрос.УстановитьПараметр("Номенклатура", ДанныеСтроки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеСтроки.Характеристика);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДанныеСтроки.КоличествоОстаток = Выборка.КоличествоОстаток;
	Иначе
		ДанныеСтроки.КоличествоОстаток = 0;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конвертация_настроек_РМК_СлужебныеПроцедурыИФункции

Функция ДействующиеНастройкиРМКДляВсехРабочихМест()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НастройкиРМК");
	Результат.Колонки.Добавить("НастройкиБРМК");
	Результат.Колонки.Добавить("РабочееМесто");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиРМК.Ссылка КАК НастройкиРМК,
	|	НастройкиРМК.РабочееМесто КАК РабочееМесто,
	|	ЕСТЬNULL(НастройкиРабочегоМестаКассира.Ссылка, ЗНАЧЕНИЕ(Справочник.НастройкиРабочегоМестаКассира.ПустаяСсылка)) КАК НастройкиБРМК
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК КАК НастройкиРМК
	|		ПО НастройкиРабочегоМестаКассира.РабочееМесто = НастройкиРМК.РабочееМесто
	|ГДЕ
	|	НЕ НастройкиРМК.ПометкаУдаления
	|	И НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СозданыНастройкиБРМКДляТекущегоРабочегоМеста()
	
	РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	
	Запрос = Новый Запрос( "ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	Результат = Запрос.Выполнить().Выбрать();
	Возврат Результат.Следующий();

КонецФункции

Процедура АктуализироватьНастройкуРМК(НастройкиБРМК, НастройкиРМК = Неопределено, РабочееМесто = Неопределено)
	
	ТекущееРабочееМесто = ?(ЗначениеЗаполнено(РабочееМесто), РабочееМесто,
		МенеджерОборудованияВызовСервера.РабочееМестоКлиента());

	ДоступныеНастройкиБРМК = ОбщегоНазначенияРМК.НастройкиРМКДляТекущегоРабочегоМеста(ТекущееРабочееМесто);
	СозданыНастройкиБРМК = ЗначениеЗаполнено(НастройкиБРМК);
	ЕстьИсходныеДанныеДляКонвертации = ЗначениеЗаполнено(НастройкиРМК);
	ОбновитьНастройкиБРМК = Ложь;
	НастройкиБРМККИзменению = ?(СозданыНастройкиБРМК, НастройкиБРМК.ПолучитьОбъект(),
		Справочники.НастройкиРабочегоМестаКассира.СоздатьЭлемент());
		
	Если ЕстьИсходныеДанныеДляКонвертации Тогда
			
		Запрос = Новый Запрос;
		
		ИзменитьНастройкуРаспределенияПродажи = (НастройкиБРМККИзменению.ПродажиСНесколькихКассККМ <> 
			(НастройкиРМК.РаспределениеНоменклатуры.Количество() > 1));
		
		ОбновитьНастройкиБРМК = ИзменитьНастройкуРаспределенияПродажи;
		
		Если ИзменитьНастройкуРаспределенияПродажи Тогда
			НастройкиБРМККИзменению.ПродажиСНесколькихКассККМ = (НастройкиРМК.РаспределениеНоменклатуры.Количество() > 1);
		КонецЕсли;

	// конвертация комбинаций горячих клавиш
		Если НастройкиРМК.КнопкиНижнейПанели.Количество() > 0 Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ПоказатьБыстрыеТовары""
			|			ТОГДА ""ОткрытьПанельИзбранныхТоваров""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ВыемкаДенег""
			|			ТОГДА ""Выемка""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ВнесениеДенег""
			|			ТОГДА ""Внесение""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ПолучитьВес""
			|			ТОГДА ""ПолучитьВес""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ПечатьОтчетаБезГашения""
			|			ТОГДА ""СнятьОтчетБезГашения""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""УвеличитьКоличество""
			|			ТОГДА ""ТекущийТоварУвеличитьКоличество""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""УменьшитьКоличество""
			|			ТОГДА ""ТекущийТоварУменьшитьКоличество""
			|		ИНАЧЕ ""-""
			|	КОНЕЦ КАК ПодменноеИмяКнопки,
			|	НастройкиРМККнопкиНижнейПанели.Alt КАК Alt,
			|	НастройкиРМККнопкиНижнейПанели.Ctrl КАК Ctrl,
			|	НастройкиРМККнопкиНижнейПанели.Shift КАК Shift,
			|	НастройкиРМККнопкиНижнейПанели.Клавиша КАК Клавиша,
			|	ВЫБОР
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ПоказатьБыстрыеТовары""
			|			ТОГДА ""Избранные товары""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ВыемкаДенег""
			|			ТОГДА ""Выемка""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ВнесениеДенег""
			|			ТОГДА ""Внесение""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ПолучитьВес""
			|			ТОГДА ""Получить вес""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""ПечатьОтчетаБезГашения""
			|			ТОГДА ""Снять отчет без гашения""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""УвеличитьКоличество""
			|			ТОГДА ""Увеличить количество""
			|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""УменьшитьКоличество""
			|			ТОГДА ""Уменьшить количество""
			|		ИНАЧЕ ""-""
			|	КОНЕЦ КАК ЗаголовокКнопки
			|ПОМЕСТИТЬ втКомбинацииСПодменойИмен
			|ИЗ
			|	Справочник.НастройкиРМК.КнопкиНижнейПанели КАК НастройкиРМККнопкиНижнейПанели
			|ГДЕ
			|	НастройкиРМККнопкиНижнейПанели.Ссылка = &НастройкиРМК
			|	И НЕ НастройкиРМККнопкиНижнейПанели.Ссылка.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			Запрос.УстановитьПараметр("НастройкиРМК", НастройкиРМК);

			Если СозданыНастройкиБРМК Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	НастройкиРабочегоМестаКассираГорячиеКлавиши.ЗаголовокКнопки КАК ЗаголовокКнопки,
				|	НастройкиРабочегоМестаКассираГорячиеКлавиши.ИмяКнопки КАК ИмяКнопки,
				|	втКомбинацииСПодменойИмен.Alt КАК АкселераторAlt,
				|	втКомбинацииСПодменойИмен.Ctrl КАК АкселераторCtrl,
				|	втКомбинацииСПодменойИмен.Shift КАК АкселераторShift,
				|	втКомбинацииСПодменойИмен.Клавиша КАК Клавиша
				|ИЗ
				|	Справочник.НастройкиРабочегоМестаКассира.ГорячиеКлавиши КАК НастройкиРабочегоМестаКассираГорячиеКлавиши
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКомбинацииСПодменойИмен КАК втКомбинацииСПодменойИмен
				|		ПО НастройкиРабочегоМестаКассираГорячиеКлавиши.ИмяКнопки = втКомбинацииСПодменойИмен.ПодменноеИмяКнопки
				|ГДЕ
				|	НастройкиРабочегоМестаКассираГорячиеКлавиши.Ссылка = &НастройкиБРМК";
				Запрос.УстановитьПараметр("НастройкиБРМК", НастройкиБРМК);
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	втКомбинацииСПодменойИмен.ПодменноеИмяКнопки КАК ИмяКнопки,
				|	втКомбинацииСПодменойИмен.ЗаголовокКнопки КАК ЗаголовокКнопки,
				|	втКомбинацииСПодменойИмен.Alt КАК АкселераторAlt,
				|	втКомбинацииСПодменойИмен.Ctrl КАК АкселераторCtrl,
				|	втКомбинацииСПодменойИмен.Shift КАК АкселераторShift,
				|	втКомбинацииСПодменойИмен.Клавиша КАК Клавиша
				|ИЗ
				|	втКомбинацииСПодменойИмен КАК втКомбинацииСПодменойИмен
				|ГДЕ
				|	НЕ втКомбинацииСПодменойИмен.ПодменноеИмяКнопки = ""-""";
				
			КонецЕсли;
			
			
			ДанныеДляЗаполнения = Запрос.Выполнить().Выбрать();
			ОбновитьНастройкиБРМК = ДанныеДляЗаполнения.Количество() > 0;
			
			Пока ДанныеДляЗаполнения.Следующий() Цикл
			
				ДанныеОтбора = Новый Структура();
				ДанныеОтбора.Вставить("ИмяКнопки", ДанныеДляЗаполнения.ИмяКнопки);
				РезультатПоиска = НастройкиБРМККИзменению.ГорячиеКлавиши.НайтиСтроки(ДанныеОтбора);
				
				Если РезультатПоиска.Количество() > 0 Тогда
				
					Для Каждого Составляющая Из РезультатПоиска Цикл
						ЗаполнитьЗначенияСвойств(Составляющая, ДанныеДляЗаполнения);
					КонецЦикла;

				Иначе
					ЗаполнитьЗначенияСвойств(НастройкиБРМККИзменению.ГорячиеКлавиши.Добавить(), ДанныеДляЗаполнения);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
		// конвертация настроек избранных товаров
		МаксимальноеКоличествоИзбранныхТоваровБРМК = 10;
		КоличествоТоваровКДобавлению = МаксимальноеКоличествоИзбранныхТоваровБРМК - НастройкиБРМККИзменению.БыстрыеТовары.Количество();
		
		Если НастройкиРМК.БыстрыеТовары.Количество() > 0
			И КоличествоТоваровКДобавлению > 0 Тогда
			
			Запрос.УстановитьПараметр("НастройкиРМК", НастройкиРМК);
			
			Если СозданыНастройкиБРМК Тогда
				
				Запрос.Текст = "ВЫБРАТЬ
				|	НастройкиРабочегоМестаКассираБыстрыеТовары.Номенклатура КАК Номенклатура,
				|	НастройкиРабочегоМестаКассираБыстрыеТовары.Характеристика КАК Характеристика
				|ПОМЕСТИТЬ втИзбранныеТоварыБРМК
				|ИЗ
				|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРабочегоМестаКассираБыстрыеТовары
				|ГДЕ
				|	НастройкиРабочегоМестаКассираБыстрыеТовары.Ссылка = &НастройкиБРМК
				|	И НЕ НастройкиРабочегоМестаКассираБыстрыеТовары.Ссылка.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 10
				|	НастройкиРМКБыстрыеТовары.Номенклатура КАК Номенклатура,
				|	НастройкиРМКБыстрыеТовары.Характеристика КАК Характеристика,
				|	НастройкиРМКБыстрыеТовары.НомерСтроки КАК НомерСтроки
				|ИЗ
				|	Справочник.НастройкиРМК.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
				|		ЛЕВОЕ СОЕДИНЕНИЕ втИзбранныеТоварыБРМК КАК втИзбранныеТоварыБРМК
				|		ПО НастройкиРМКБыстрыеТовары.Номенклатура = втИзбранныеТоварыБРМК.Номенклатура
				|			И НастройкиРМКБыстрыеТовары.Характеристика = втИзбранныеТоварыБРМК.Характеристика
				|ГДЕ
				|	НастройкиРМКБыстрыеТовары.Ссылка = &НастройкиРМК
				|	И НЕ НастройкиРМКБыстрыеТовары.Ссылка.ПометкаУдаления
				|	И ЕСТЬNULL(втИзбранныеТоварыБРМК.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
				|	И ЕСТЬNULL(втИзбранныеТоварыБРМК.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 10", СтрШаблон("ПЕРВЫЕ %1", КоличествоТоваровКДобавлению));
				Запрос.УстановитьПараметр("НастройкиБРМК", НастройкиБРМК);
				
			Иначе
				
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
				|	НастройкиРМКБыстрыеТовары.Номенклатура КАК Номенклатура,
				|	НастройкиРМКБыстрыеТовары.Характеристика КАК Характеристика,
				|	НастройкиРМКБыстрыеТовары.НомерСтроки КАК НомерСтроки
				|ИЗ
				|	Справочник.НастройкиРМК.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
				|ГДЕ
				|	НастройкиРМКБыстрыеТовары.Ссылка = &НастройкиРМК
				|	И НЕ НастройкиРМКБыстрыеТовары.Ссылка.ПометкаУдаления
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 10", СтрШаблон("ПЕРВЫЕ %1",
					МаксимальноеКоличествоИзбранныхТоваровБРМК));
				
			КонецЕсли;
			
			ДанныеЗаполненияИзбранныхТоваров = Запрос.Выполнить().Выбрать();
			ОбновитьНастройкиБРМК = ДанныеЗаполненияИзбранныхТоваров.Количество() > 0;
			
			Пока ДанныеЗаполненияИзбранныхТоваров.Следующий() Цикл
				
				Отбор = Новый Структура();
				Отбор.Вставить("Номенклатура", ДанныеЗаполненияИзбранныхТоваров.Номенклатура);
				Отбор.Вставить("Характеристика", ДанныеЗаполненияИзбранныхТоваров.Характеристика);
				
				РезультатПоиска = НастройкиБРМККИзменению.БыстрыеТовары.НайтиСтроки(Отбор);
				Если РезультатПоиска.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НастройкиБРМККИзменению.БыстрыеТовары.Добавить(), ДанныеЗаполненияИзбранныхТоваров);
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(НастройкиБРМККИзменению.Наименование) Тогда
		НастройкиБРМККИзменению.Наименование = НСтр("ru = 'Настройка РМК'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиБРМККИзменению.РабочееМесто) Тогда
		НастройкиБРМККИзменению.РабочееМесто = ТекущееРабочееМесто;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиБРМККИзменению.ТочностьОкругления) Тогда
		НастройкиБРМККИзменению.ТочностьОкругления = ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр0_01");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиБРМККИзменению.ВидОтображения) Тогда
		НастройкиБРМККИзменению.ВидОтображения = ПредопределенноеЗначение("Перечисление.ВидыОтображения.Стандартный");
	КонецЕсли;
	
	ОбновитьНастройкиБРМК = ОбновитьНастройкиБРМК 
		Или Не(ЗначениеЗаполнено(НастройкиБРМККИзменению.Наименование)
			И ЗначениеЗаполнено(НастройкиБРМККИзменению.РабочееМесто)
			И ЗначениеЗаполнено(НастройкиБРМККИзменению.ТочностьОкругления)
			И Не ЗначениеЗаполнено(НастройкиБРМККИзменению.ВидОтображения));
	
	Если ОбновитьНастройкиБРМК Тогда
	
		Попытка
			НастройкиБРМККИзменению.Записать();
		Исключение

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Конвертация настроек рабочего места кассира при обновлении программы.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВводНаОснованииЗаказаПокупателя

Процедура ДанныеПоТоварамЗаказаПокупателя(ЗаказПокупателя, Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.ЗаказПокупателя = ЗаказПокупателя;
	
	ЗаполнитьЗначенияСвойств(Объект, ЗаказПокупателя,, "КассаККМ");
	Объект.ВидОперации = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		
		НайденнаяКартаЛояльности = Неопределено;
		ШтрихкодированиеРМКУНФ.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.ДисконтнаяКарта, НайденнаяКартаЛояльности);
		
		Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
			ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(Форма, НайденнаяКартаЛояльности);
		КонецЕсли;
		
	КонецЕсли;
	
	// Для заказ-нарядов заполнение ТЧ не требуется
	Если ЗаказПокупателя.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Объект.ОперацияСДенежнымиСредствами = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = РасчетыСлужебный.ТекстЗапросаДляУчетаОплатыДругимиДокументамиСчетаИЗаказы();
		Запрос.УстановитьПараметр("Ссылка", ЗаказПокупателя);
		Запрос.УстановитьПараметр("СсылкаНаТекущийДокумент", Документы.ЧекККМ.ПустаяСсылка());
		Оплачено = 0;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Оплачено = Оплачено + Выборка.ОплаченоВалДок;
		КонецЦикла;
		СуммаАванса = ЗаказПокупателя.СуммаДокумента - Оплачено;
		Если СуммаАванса <= 0 Тогда
			ВызватьИсключение НСтр("ru = 'Выбранный документ уже оплачен. Прием аванса по нему невозможен'")
		КонецЕсли;
		Объект.СуммаДокумента = СуммаАванса;
		Объект.Товары.Очистить();
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.ПредставлениеНоменклатураХарактеристика = НСтр("ru = 'Аванс'");
		НоваяСтрокаТовары.ПредставлениеЕдиницыИзмерения = НСтр("ru = 'шт'");
		НоваяСтрокаТовары.Количество = 1;
		НоваяСтрокаТовары.КоличествоУпаковок = 1;
		НоваяСтрокаТовары.Цена = СуммаАванса;
		НоваяСтрокаТовары.Сумма = СуммаАванса;
		НоваяСтрокаТовары.СуммаБезСкидки = СуммаАванса;
		НоваяСтрокаТовары.СистемаНалогообложения = Форма.СистемаНалогообложенияОрганизацииПоУмолчанию;
		НоваяСтрокаТовары.Организация = Форма.ОсновнаяОрганизация;
		Форма.ПриемАвансаПоЗаказу = Истина;
		Возврат;
	КонецЕсли;
	
	Запасы = Объект.Товары;
	
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(ЗаказПокупателя);
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТЗаказПокупателя
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			ЗаказПокупателя В (&МассивЗаказов)
	|				И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|					ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|					ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗаказПокупателя.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТЗаказПокупателя.Номенклатура КАК Номенклатура,
	|	ВТЗаказПокупателя.Характеристика КАК Характеристика,
	|	ВТЗаказПокупателя.КоличествоОстаток КАК КоличествоОстаток,
	|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК Резерв
	|ИЗ
	|	ВТЗаказПокупателя КАК ВТЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|				,
	|				(ЗаказПокупателя, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ВТЗаказПокупателя.ЗаказПокупателя,
	|						ВТЗаказПокупателя.Номенклатура,
	|						ВТЗаказПокупателя.Характеристика
	|					ИЗ
	|						ВТЗаказПокупателя)) КАК ЗапасыОстатки
	|		ПО ВТЗаказПокупателя.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
	|			И ВТЗаказПокупателя.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ВТЗаказПокупателя.Характеристика = ЗапасыОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Ссылка.Организация КАК Организация,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.КоличествоСобрано КАК КоличествоСобрано,
	|	ЗаказПокупателяЗапасы.ЕстьСборка КАК ЕстьСборка,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки1,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки1,
	|	ЗаказПокупателяЗапасы.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	|	ЗаказПокупателяЗапасы.Номенклатура.ВидАлкогольнойПродукции.Маркируемый КАК МаркируемыйАлкоголь,
	|	ЗаказПокупателяЗапасы.Номенклатура.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНоменклатуры,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателяЗапасы.Ячейка КАК Ячейка,
	|	ЗаказПокупателяЗапасы.Резерв КАК Резерв,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ВариантЧастичногоВыбытия,
	|	НЕ НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|			ПО НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ПО ЗаказПокупателяЗапасы.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия
	|ГДЕ
	|	(ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка В(&МассивЗаказов)
	|	И ДобавленныеНаборы.НомерВариантаКП = ДобавленныеНаборы.Ссылка.ОсновнойВариантКП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказСерииНоменклатуры.Ссылка КАК Заказ,
	|	ЗаказСерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	ЗаказСерииНоменклатуры.Серия КАК Серия,
	|	ЗаказСерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.СерииНоменклатуры КАК ЗаказСерииНоменклатуры
	|ГДЕ
	|	ЗаказСерииНоменклатуры.Ссылка В(&МассивЗаказов)";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ТекущаяДатаСеанса());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[1].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя, Номенклатура, Характеристика");
	
	ИспользоватьАвтоматическиеСкидки = ИспользуютсяАвтоматическиеСкидки();
	Если ИспользоватьАвтоматическиеСкидки Тогда
		СкидкиНаценкиЗаказа = МассивРезультатов[3].Выгрузить();
	КонецЕсли;
	
	ЕстьМаркируемыйАлкоголь = Ложь;
	
	Объект.Товары.Очистить();
	
	ПропускаемыеНаборы = Новый Массив;

	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		ТаблицаСерий = МассивРезультатов[5].Выгрузить();
		Если ТаблицаСерий.Количество() >= 200 Тогда
			ТаблицаСерий.Индексы.Добавить("Заказ,КлючСвязи");
		КонецЕсли;
		
		Выборка = МассивРезультатов[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.Заказ);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
					ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Коэффициент = Выборка.Коэффициент;
			Упаковка = Выборка.ЕдиницаИзмерения;
			КоличествоЕдиниц = Выборка.Количество*Коэффициент;
			ИсходноеКоличествоВЗаказе = КоличествоЕдиниц;
			ИсходноеКоличествоУпаковокВЗаказе = Выборка.Количество;
			ОстатокЕдиниц = МассивСтрокОстатков[0].КоличествоОстаток;
			ЦенаТовара = Выборка.Цена;
			Если Выборка.ИспользоватьСерииНоменклатуры Тогда
				КоличествоУпаковок = КоличествоЕдиниц;
				ИсходноеКоличествоУпаковокВЗаказе = КоличествоЕдиниц;
				ОстатокУпаковок = МассивСтрокОстатков[0].КоличествоОстаток;
				Если Не ТипЗнч(Упаковка) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
					Упаковка = Выборка.ЕдиницаИзмеренияНоменклатуры;
				КонецЕсли;
				ЦенаТовара = Выборка.Цена / Коэффициент;
			Иначе
				КоличествоУпаковок = Выборка.Количество;
				ОстатокУпаковок = МассивСтрокОстатков[0].КоличествоОстаток/Коэффициент;
			КонецЕсли;
			Резерв = МассивСтрокОстатков[0].Резерв;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСборкуЗаказов") И Выборка.ЕстьСборка Тогда
				КоличествоСобраноЕдиниц = Выборка.КоличествоСобрано*Коэффициент;
				КоличествоСобраноУпаковок = Выборка.КоличествоСобрано;
			
				УжеОтгруженоЕдиниц = КоличествоЕдиниц - ОстатокЕдиниц;
				УжеОтгруженоУпаковок = КоличествоУпаковок - ОстатокУпаковок;
				
				СобраноНеОтгруженоЕдиниц = КоличествоСобраноЕдиниц - ?(УжеОтгруженоЕдиниц > 0, УжеОтгруженоЕдиниц, 0);
				СобраноНеОтгруженоУпаковок = КоличествоСобраноУпаковок - ?(УжеОтгруженоУпаковок > 0, УжеОтгруженоУпаковок, 0);
				
				Если СобраноНеОтгруженоЕдиниц > 0 Тогда
					КоличествоЕдиниц = СобраноНеОтгруженоЕдиниц;
					КоличествоУпаковок = СобраноНеОтгруженоУпаковок;
				Иначе
					КоличествоЕдиниц = 0;
					КоличествоУпаковок = 0;
					
					Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
						ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
					КонецЕсли;
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			КоличествоКДобавлению = КоличествоЕдиниц;
			КоличествоУпаковокКДобавлению = КоличествоУпаковок;
			Если ОстатокЕдиниц < КоличествоЕдиниц Тогда
				КоличествоКДобавлению = ОстатокЕдиниц;
				КоличествоУпаковокКДобавлению = ОстатокУпаковок;
			КонецЕсли;
			
			ТаблицаСерийТовара = ТаблицаРаспределенияСерий();
			ЗаполнитьТаблицуРаспределенияСерийТовара(Выборка, 
				ТаблицаСерий, 
				ТаблицаСерийТовара, 
				ИсходноеКоличествоВЗаказе, 
				КоличествоКДобавлению, 
				КоличествоУпаковокКДобавлению, 
				Резерв);
			
			Для Каждого СтрокаСерии Из ТаблицаСерийТовара Цикл
			
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				Если НЕ НоваяСтрока.ПроцентСкидкиНаценки = 0 Тогда
					НоваяСтрока.ОтображаетсяСкидкаПроцентом = Истина;
				КонецЕсли;
				
				Если НЕ НоваяСтрока.СуммаСкидкиНаценки = 0 Тогда
					НоваяСтрока.ОтображаетсяСкидкаСуммой = Истина;
					НоваяСтрока.ОтображаетсяСкидкаПроцентом = Ложь;
					НоваяСтрока.ПроцентСкидкиНаценки = 0;
				КонецЕсли;
				
				НоваяСтрока.Количество = СтрокаСерии.КоличествоУпаковок;
				НоваяСтрока.КоличествоУпаковок = СтрокаСерии.КоличествоУпаковок;
				НоваяСтрока.Упаковка = Упаковка;
				НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Сумма 
					+ ?(НоваяСтрока.СуммаАвтоматическойСкидки > 0, НоваяСтрока.СуммаАвтоматическойСкидки, 0) 
					+ ?(НоваяСтрока.СуммаСкидкиНаценки > 0, НоваяСтрока.СуммаСкидкиНаценки, 0);
				НоваяСтрока.Резерв = СтрокаСерии.Резерв;
				НоваяСтрока.Серия = СтрокаСерии.Серия;
				
				ЗаполнитьОрганизациюПродажи(НоваяСтрока, Форма);
				
				Если СтрокаСерии.Количество < ИсходноеКоличествоВЗаказе ИЛИ СтрокаСерии.КоличествоУпаковок <> ИсходноеКоличествоУпаковокВЗаказе Тогда
					
					Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
						ДобавитьОписаниеНабора(ПропускаемыеНаборы, Выборка.НоменклатураНабора, Выборка.ХарактеристикаНабора);
					КонецЕсли;
					
					ДанныеСтроки = Новый Структура;
					ДанныеСтроки.Вставить("Количество", СтрокаСерии.Количество);
					ДанныеСтроки.Вставить("КоличествоУпаковок", СтрокаСерии.КоличествоУпаковок);
					ДанныеСтроки.Вставить("Цена", ЦенаТовара);
					ДанныеСтроки.Вставить("Сумма", 0);
					ДанныеСтроки.Вставить("ПроцентСкидкиНаценки", Выборка.ПроцентСкидкиНаценки);
					ДанныеСтроки.Вставить("СуммаСкидкиНаценки", 0);
					ДанныеСтроки.Вставить("СтавкаНДС", Выборка.СтавкаНДС);
					ДанныеСтроки.Вставить("СуммаНДС", 0);
					ДанныеСтроки.Вставить("СуммаВключаетНДС", Выборка.СуммаВключаетНДС);
					ДанныеСтроки.Вставить("Всего", 0);
					ДанныеСтроки.Вставить("СуммаБезСкидки", 0);
					
					РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки);
				
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
					
				КонецЕсли;
				
				Если ИспользоватьАвтоматическиеСкидки Тогда
					ПересчитатьСуммы = ИсходноеКоличествоУпаковокВЗаказе <> СтрокаСерии.КоличествоУпаковок;
					КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, СтрокаСерии.КоличествоУпаковок/ИсходноеКоличествоУпаковокВЗаказе, 1);
					Если КоэффициентПересчетаСкидки <> 1 Тогда
						НоваяСтрока.СуммаАвтоматическойСкидки =
							Окр(Выборка.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
					КонецЕсли;
					
					СуммаАвтоматическойСкидки = 0;
					Если Выборка.КлючСвязи <> 0 Тогда
						ОтборСтрок = Новый Структура("Заказ,КлючСвязи", Выборка.Заказ, Выборка.КлючСвязи);
						Для Каждого СтрокаСкидкиЗаказа Из СкидкиНаценкиЗаказа.НайтиСтроки(ОтборСтрок) Цикл
							
							СуммаСкидки = 0;
							Если ЗначениеЗаполнено(СтрокаСкидкиЗаказа.ЗначениеСкидкиНаценки)
								И СтрокаСкидкиЗаказа.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
								СуммаСкидки = ОКР(НоваяСтрока.Цена * НоваяСтрока.Количество
									* СтрокаСкидкиЗаказа.ЗначениеСкидкиНаценки / 100, 2);
							Иначе
								СуммаСкидки = ОКР(КоэффициентПересчетаСкидки * СтрокаСкидкиЗаказа.Сумма, 2);
							КонецЕсли;
							СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки + СуммаСкидки;
							
						КонецЦикла;
					КонецЕсли;
					
					НоваяСтрока.СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки;
				
				КонецЕсли;
				
				НоваяСтрока.СуммаБезСкидкиЧекаПродажи             = НоваяСтрока.СуммаБезСкидки;
				НоваяСтрока.СуммаАвтоматическойСкидкиЧекаПродажи  = НоваяСтрока.СуммаАвтоматическойСкидки;
				НоваяСтрока.СуммаСкидкиНаценкиЧекаПродажи         = НоваяСтрока.СуммаСкидкиНаценки;
				НоваяСтрока.СуммаСкидкиОплатыБонусомЧекаПродажи   = НоваяСтрока.СуммаСкидкиОплатыБонусом;
				
			КонецЦикла;
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		УдаляемыеСтроки = Запасы.НайтиСтроки(ОписаниеНабора);
		Для каждого СтрокаЗапаса Из УдаляемыеСтроки Цикл
			Запасы.Удалить(СтрокаЗапаса);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаАвансов = ПолучитьТаблицуАвансовПоЗаказу(ЗаказПокупателя, Форма);
	СуммаАвансов = 0;
	Форма.ТаблицаПредоплаты.Очистить();
	
	Для Каждого СтрокаПредоплаты Из ТаблицаАвансов Цикл
		НоваяСтрока = Форма.ТаблицаПредоплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредоплаты);
		СуммаАвансов = СуммаАвансов + СтрокаПредоплаты.СуммаРасчетов;
	КонецЦикла;
	
	Если СуммаАвансов > 0 Тогда
		Форма.ЭтоЗачетАванса = Истина;
		Форма.СуммаОстаткаДокументаРасчета = СуммаАвансов;
		Форма.СуммаОплаченоЗачетАванса = СуммаАвансов;
		Форма.Элементы.ГруппаОплатаЗачетАванса.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

Функция ПолучитьТаблицуАвансовПоЗаказу(ПараметрЗаказ, Форма)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРегОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ = &Заказ
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ = &Заказ) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРег) КАК СуммаРег,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРег, 0) = 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|						КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|							ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|						ИНАЧЕ 1
	|					КОНЕЦ * (КурсыВалютыУчета.Курс / КурсыВалютыУчета.Кратность)
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаРег / ВЫБОР
	|					КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|						ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК Курс,
	|	1 КАК Кратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * КурсыВалютыДокумента.Кратность / (КурсыВалютыДокумента.Курс * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРег
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДокумента) КАК КурсыВалютыДокумента
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	КурсыВалютыУчета.Курс,
	|	КурсыВалютыУчета.Кратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(ПараметрЗаказ.Организация));
	Запрос.УстановитьПараметр("Контрагент", ПараметрЗаказ.Контрагент);
	Запрос.УстановитьПараметр("Договор", ПараметрЗаказ.Договор);
	Запрос.УстановитьПараметр("Заказ", ПараметрЗаказ);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВалютаРасчетов", ПараметрЗаказ.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента", ПараметрЗаказ.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка", Неопределено);
	
	Результат = Запрос.Выполнить();
	РезультатТЗ = Результат.Выгрузить();
	
	Возврат РезультатТЗ;
	
КонецФункции

Процедура ДобавитьОписаниеНабора(ПропускаемыеНаборы, НоменклатураНабора, ХарактеристикаНабора)
	
	Для каждого ОписаниеНабора Из ПропускаемыеНаборы Цикл
		Если ОписаниеНабора.НоменклатураНабора = НоменклатураНабора
			И ОписаниеНабора.ХарактеристикаНабора = ХарактеристикаНабора Тогда
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНабора = Новый Структура;
	СтруктураНабора.Вставить("НоменклатураНабора", НоменклатураНабора);
	СтруктураНабора.Вставить("ХарактеристикаНабора", ХарактеристикаНабора);
	ПропускаемыеНаборы.Добавить(СтруктураНабора);
	
КонецПроцедуры

Процедура ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ЗаказПокупателя, ЗначенияРеквизитов, Отказ, ОписаниеОшибки)
	
	Если НЕ ЗначенияРеквизитов.Проведен Тогда
		Отказ = Истина;
		ОписаниеОшибки =
			СтрШаблон(НСтр("ru='Документ %1 не проведен. Ввод на основании непроведенного документа запрещен.'"),
				ЗаказПокупателя);
		Возврат;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ОжидаетсяВыборВариантаКП Тогда
		Отказ = Истина;
		ОписаниеОшибки =
			СтрШаблон(НСтр("ru='В документе %1 не выбран основной вариант коммерческого предложения.'"),
				ЗаказПокупателя);
		Возврат;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		Отказ = Истина;
		ОписаниеОшибки =
			СтрШаблон(НСтр("ru='Документ %1 в состоянии %2. Ввод на основании запрещен.'"),
				ЗаказПокупателя);
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура РассчитатьСуммыВСтрокеТабличнойЧасти(ДанныеСтроки)
	
	ДанныеСтроки.СуммаБезСкидки = ДанныеСтроки.КоличествоУпаковок*ДанныеСтроки.Цена;
	ДанныеСтроки.Сумма = ДанныеСтроки.КоличествоУпаковок*ДанныеСтроки.Цена;
	
	Если ДанныеСтроки.Свойство("СуммаСкидкиНаценки") И ДанныеСтроки.СуммаСкидкиНаценки <> 0 Тогда
		ДанныеСтроки.Сумма = ДанныеСтроки.Сумма - ДанныеСтроки.СуммаСкидкиНаценки;
	ИначеЕсли ДанныеСтроки.Свойство("ПроцентСкидкиНаценки") Тогда
		Если ДанныеСтроки.ПроцентСкидкиНаценки = 100 Тогда
			ДанныеСтроки.Сумма = 0;
		ИначеЕсли ДанныеСтроки.ПроцентСкидкиНаценки <> 0 Тогда
			ДанныеСтроки.Сумма = ДанныеСтроки.Сумма*(1 - ДанныеСтроки.ПроцентСкидкиНаценки/100);
			Если ДанныеСтроки.Свойство("СуммаСкидкиНаценки") И ДанныеСтроки.СуммаСкидкиНаценки = 0 Тогда
				ДанныеСтроки.СуммаСкидкиНаценки =
					ДанныеСтроки.КоличествоУпаковок*ДанныеСтроки.Цена*ДанныеСтроки.ПроцентСкидкиНаценки/100;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("СуммаНДС") Тогда
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ДанныеСтроки.СтавкаНДС);
		Если ДанныеСтроки.СуммаВключаетНДС Тогда
			ДанныеСтроки.СуммаНДС = ДанныеСтроки.Сумма - ДанныеСтроки.Сумма
				/ ((СтавкаНДС + 100)/100);
			ДанныеСтроки.Всего = ДанныеСтроки.Сумма;
		Иначе
			ДанныеСтроки.СуммаНДС = ДанныеСтроки.Сумма*СтавкаНДС/100;
			ДанныеСтроки.Всего = ДанныеСтроки.Сумма + ДанныеСтроки.СуммаНДС;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЧекКоррекции

// Формирует и записывает документ "ЧекККМКоррекции" перед пробитием на ККТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Отказ - Булево - признак наличия ошибки при записи документа.
//  ТекстОшибки - Строка - текст ошибки.
//  СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//
// Возвращаемое значение:
//  ДокументСсылка.ЧекККМКоррекции - ссылка на документ Чек ККМ коррекции.
//
Функция ЗаписатьЧекККМПередПробитиемКоррекции(Форма, Отказ, ТекстОшибки, СистемаНалогообложения)
	
	ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Форма.Объект.ВидОперации);
	
	ЧекККМ = Документы.ЧекККМКоррекции.ПустаяСсылка();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат ЧекККМ;
	КонецЕсли;
	
	ТекущийЧек = Документы.ЧекККМКоррекции.СоздатьДокумент();
	
	Попытка
		ТекущийЧек.Заблокировать();
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,
			ТекущийЧек,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ЧекККМ;
	КонецПопытки;
	
	ДанныеКассаККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаККМ, "ВалютаДенежныхСредств, Подразделение");
	
	ТекущийЧек.ПозицииЧека.Очистить();
	ТекущийЧек.Оплата.Очистить();
	
	ДокументОснование = Форма.ЧекККМПродажа;
	ФискальнаяОперация = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументОснование);
	
	АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(ТекущийЧек.СтруктурнаяЕдиница, 
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
		
	КассирФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Кассир, "Физлицо");
	КассирИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассирФизЛицо, "ИНН");
	
	ТекущийЧек.Дата                   = ТекущаяДатаСеанса();
	ТекущийЧек.ПометкаУдаления        = Ложь;
	ТекущийЧек.ДатаКоррекции          = ФискальнаяОперация.Дата;
	ТекущийЧек.ДокументОснование      = ДокументОснование;
	ТекущийЧек.ДокументРасчетов       = ДокументОснование;
	ТекущийЧек.ДополнительныйРеквизит = ФискальнаяОперация.ФискальныйПризнак;
	ТекущийЧек.КассаККМ               = Объект.КассаККМ;
	ТекущийЧек.Кассир                 = КассирФизЛицо;
	ТекущийЧек.КассирИНН              = КассирИНН;
	ТекущийЧек.СтруктурнаяЕдиница     = Объект.ТорговыйОбъект;
	ТекущийЧек.НеприменениеККТ        = Ложь;
	ТекущийЧек.НомерПредписания       = "";
	ТекущийЧек.НомерСмены             = 0;
	ТекущийЧек.НомерЧека              = 1;
	ТекущийЧек.ОписаниеКоррекции      = НСтр("ru = 'Корректировка данных чека'");
	ТекущийЧек.Организация            = Объект.Организация;
	ТекущийЧек.Ответственный          = Пользователи.ТекущийПользователь();
	ТекущийЧек.ПризнакАгента          = Перечисления.ПризнакиАгента.ПустаяСсылка();
	ТекущийЧек.ПробитЧек              = Ложь;
	ТекущийЧек.ТипКоррекции           = 0;
	ТекущийЧек.ТипРасчета             = Форма.Объект.ВидОперации;
	ТекущийЧек.АдресМагазина          = АдресМагазина;
	
	Если НЕ ЭтоПродажа Тогда
		
		ТекущийЧек.ЭтоСторно = Истина;
		ДанныеXMLКорректируемогоЧека = ФискальнаяОперация.ДанныеXML.Получить();
		ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗагрузитьДанныеФискализацииИзXML(
			ДанныеXMLКорректируемогоЧека);
		
		ЗаполнитьЗначенияСвойств(ТекущийЧек, ОбщиеПараметры, "СистемаНалогообложения");
		
		ЗаполнитьПозицииЧекаИзXML(ОбщиеПараметры.ПозицииЧека, ТекущийЧек);
		
		// Оплаты
		Для Каждого СтрокаОплаты Из ОбщиеПараметры.ТаблицаОплат Цикл
			НоваяСтрока = ТекущийЧек.Оплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		КонецЦикла;
		
		Попытка
			ТекущийЧек.Записать(РежимЗаписи());
			ЧекККМ = ТекущийЧек.Ссылка;
		Исключение
			Отказ = Истина;
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись документа ЧекККМ перед пробитием на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		КонецПопытки;
		
		Возврат ЧекККМ;
	
	КонецЕсли;
	
	ТекущийЧек.СистемаНалогообложения = СистемаНалогообложения;
	
	Корзина = Форма.Объект.Товары;
	
	ЭтоОбщаяСНО = СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	СтавкаБезНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	Для Каждого СтрокаКорзины Из Корзина Цикл
		СтрокаКорзины.СистемаНалогообложения = СистемаНалогообложения;
		Если НЕ ЭтоОбщаяСНО Тогда
			СтрокаКорзины.СтавкаНДС = СтавкаБезНДС;
			СтрокаКорзины.СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТоварыИОплаты = ДанныеЧекаПоСистемеНалогообложения(Форма, СистемаНалогообложения, Форма.ОжидаемоеКоличествоЧеков);
	
	Если Форма.СуммаОплаченоВРассрочку >= Форма.СуммаИтого И Форма.СуммаИтого > 0 Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
	ИначеЕсли Форма.СуммаОплаченоВРассрочку > 0 И Форма.СуммаИтого > 0 Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
	Иначе
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТоварыИОплаты.Товары Цикл
		
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтрокаТовара.Номенклатура,
			"НаименованиеПолное,ТипНоменклатуры,ЭтоНабор,ВидМаркировки,
			|АлкогольнаяПродукция,ПодакцизныйТовар, ВидПродукцииИС, ВидМаркировки, ПризнакПредметаРасчета");
			
		ПризнакПредметаРасчета = РозничныеПродажиСервер.ПолучитьПризнакПредметаРасчета(РеквизитыНоменклатуры);
		
		СтрокаПозицииЧека = ТекущийЧек.ПозицииЧека.Добавить();
		СтрокаПозицииЧека.Количество                  = СтрокаТовара.Количество;
		СтрокаПозицииЧека.НаименованиеПредметаРасчета = СтрокаТовара.ПредставлениеНоменклатураХарактеристика;
		СтрокаПозицииЧека.ПризнакПредметаРасчета      = ПризнакПредметаРасчета;
		СтрокаПозицииЧека.ПризнакСпособаРасчета       = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.СтавкаНДС                   = СтрокаТовара.СтавкаНДС;
		СтрокаПозицииЧека.СуммаНДС                    = СтрокаТовара.СуммаНДС;
		
		СтрокаПозицииЧека.СуммаСкидок                 = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.Сумма;
		СтрокаПозицииЧека.СуммаСоСкидками             = СтрокаТовара.Сумма;
		СтрокаПозицииЧека.ЦенаСоСкидками              = СтрокаТовара.Сумма / СтрокаТовара.Количество;
		
	КонецЦикла;
	
	Для Каждого СтрокаОплаты Из ТоварыИОплаты.Оплата Цикл
		
		Если СтрокаОплаты.ВидОплаты = "Наличные" Тогда
			ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		ИначеЕсли СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ВстречноеПредоставление Тогда
			ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
		ИначеЕсли СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку Тогда
			ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата;
		ИначеЕсли СтрокаОплаты.ВидОплаты = "ЗачетАванса" Тогда
			ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
		Иначе
			ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
		КонецЕсли;
		
		Строка = ТекущийЧек.Оплата.Добавить();
		Строка.ТипОплаты = ТипОплаты;
		Строка.Сумма     = СтрокаОплаты.Сумма;
		
	КонецЦикла;
	
	Попытка
		ТекущийЧек.Записать(РежимЗаписи());
		ЧекККМ = ТекущийЧек.Ссылка;
	Исключение
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись документа ЧекККМКоррекции перед пробитием на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецПопытки;
	
	Возврат ЧекККМ;
	
КонецФункции

Процедура ЗаполнитьПозицииЧекаИзXML(ПозицииЧекаXML, ЧекКоррекции)
	
	ПозицииЧека = ЧекКоррекции.ПозицииЧека;
	
	Для Каждого ПозицияЧека Из ПозицииЧекаXML Цикл
		
		Если ПозицияЧека.Свойство("ТекстоваяСтрока") ИЛИ ПозицияЧека.Свойство("ТипШтрихкода") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ПозицииЧека.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека.ДанныеКодаТоварнойНоменклатуры);
		
		НоваяСтрока.ОператорПереводаАдрес 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес;
		НоваяСтрока.ОператорПереводаИНН 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН;
		НоваяСтрока.ОператорПереводаНаименование 	= ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование;
		НоваяСтрока.ОператорПереводаТелефон 		= ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон;
		
		НоваяСтрока.ОператорПоПриемуПлатежейТелефон	= ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон;
		
		НоваяСтрока.ПлатежныйАгентОперация 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция;
		НоваяСтрока.ПлатежныйАгентТелефон 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон;
		
		НоваяСтрока.ДанныеПоставщикаИНН 			= ПозицияЧека.ДанныеПоставщика.ИНН;
		НоваяСтрока.ДанныеПоставщикаНаименование 	= ПозицияЧека.ДанныеПоставщика.Наименование;
		НоваяСтрока.ДанныеПоставщикаТелефон 		= ПозицияЧека.ДанныеПоставщика.Телефон;
		
		НоваяСтрока.НаименованиеПредметаРасчета 	= ПозицияЧека.Наименование;
		НоваяСтрока.СуммаСоСкидками 				= ПозицияЧека.Сумма;
		
		Если ПозицияЧека.СтавкаНДС = 0 Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Нулевая);
		ИначеЕсли ПозицияЧека.СтавкаНДС = 10 ИЛИ ПозицияЧека.СтавкаНДС = 110 Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Пониженная);
		ИначеЕсли ПозицияЧека.СтавкаНДС = 18 ИЛИ ПозицияЧека.СтавкаНДС = 118 Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая);
		ИначеЕсли ПозицияЧека.СтавкаНДС = 20 ИЛИ ПозицияЧека.СтавкаНДС = 120 Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая);
		Иначе
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);
		КонецЕсли;
		
		Если НоваяСтрока.СуммаНДС = 0 И ЗначениеЗаполнено(ПозицияЧека.СтавкаНДС) Тогда
			ТекПроцентНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС) / 100;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаСоСкидками * ТекПроцентНДС / (ТекПроцентНДС + 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура НастроитьИспользованиеСервераЛояльности(Форма)
	
	ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Форма.ИспользоватьСерверЛояльностиПолучательДанных);
	
КонецПроцедуры

// Возвращает режим записи документа ЧекККМ.
//
// Возвращаемое значение:
//  РежимЗаписиДокумента - режим, который необходим при записи документа ЧекККМ.
//
Функция РежимЗаписи()
	
	Возврат РежимЗаписиДокумента.Проведение;
	
КонецФункции

// Возвращает признак использования запретов продаж по дням.
//
// Возвращаемое значение:
//  ИспользоватьЗапретПродаж - Булево - признак использования оплат платежными системами.
//
Функция ИспользоватьЗапретыПродажПоДням()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЗапретПродаж");
	
КонецФункции

// Возвращает признак использования оплат платежными картами.
//
// Возвращаемое значение:
//  ИспользоватьОплатуПлатежнымиКартами - булево - признак использования оплат платежными картами.
//
Функция ИспользоватьОплатуПлатежнымиКартами()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКартами");
	
КонецФункции

// Возвращает текущее значение признака использования характеристик номенклатуры
//
// Возвращаемое значение:
//   Результат - Булево
//
Функция ИспользоватьХарактеристикиНоменклатуры()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
КонецФункции

Процедура НастроитьРабочийСтол(НеобходимоОбновитьИнтерфейс)
	
	ИспользоватьНовоеРМК = ВключеноИспользованиеНовогоРМК();
	ФормаПоиска = ?(ИспользоватьНовоеРМК,
		"Документ.ЧекККМ.Форма.ФормаДокумента_РМК",
		"Обработка.РабочееМестоКассира.Форма.ФормаРМК");
	ФормаЗамены = ?(ИспользоватьНовоеРМК,
		"Обработка.РабочееМестоКассира.Форма.ФормаРМК",
		"Документ.ЧекККМ.Форма.ФормаДокумента_РМК");
	
	НастройкиНачальнойСтраницы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
		"Общее/НастройкиНачальнойСтраницы",
		"");
	
	Если НастройкиНачальнойСтраницы = Неопределено Тогда
		НеобходимоОбновитьИнтерфейс = Истина;
		Возврат;
	КонецЕсли;
	
	СоставФорм = НастройкиНачальнойСтраницы.ПолучитьСоставФорм();
	
	ЛеваяКолонка = СоставФорм.ЛеваяКолонка;
	ПраваяКолонка = СоставФорм.ПраваяКолонка;
	ФормаЧекККМНайдена = Ложь;
	
	ЭлементМассива = ЛеваяКолонка.Найти(ФормаПоиска);
	Если Не ЭлементМассива = Неопределено Тогда
		НеобходимоОбновитьИнтерфейс = Истина;
		ФормаЧекККМНайдена = Истина;
		ЛеваяКолонка.Удалить(ЭлементМассива);
		ЛеваяКолонка.Добавить(ФормаЗамены);
		НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы",
			"",
			НастройкиНачальнойСтраницы);
	КонецЕсли;
	
	Если Не ФормаЧекККМНайдена Тогда
		ЭлементМассива = ПраваяКолонка.Найти(ФормаПоиска);
		Если Не ЭлементМассива = Неопределено Тогда
			НеобходимоОбновитьИнтерфейс = Истина;
			ФормаЧекККМНайдена = Истина;
			ПраваяКолонка.Удалить(ЭлементМассива);
			ПраваяКолонка.Добавить(ФормаЗамены);
			НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
			ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Общее/НастройкиНачальнойСтраницы",
				"",
				НастройкиНачальнойСтраницы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьСписокВыбораНоменклатурыБыстрыхТоваров(Форма)
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	
	ФиксированныйМассивТиповНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	
	ПараметрВыбораНоменклатурыТип = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ФиксированныйМассивТиповНоменклатуры);
	ПараметрВыбораНоменклатурыПометка = Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь);
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(ПараметрВыбораНоменклатурыПометка);
	МассивПараметровВыбора.Добавить(ПараметрВыбораНоменклатурыТип);
	
	ПараметрыВыбораНоменклатуры = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	Форма.Элементы.НастройкаРМКБыстрыеТоварыНоменклатура.ПараметрыВыбора = ПараметрыВыбораНоменклатуры;
	
КонецПроцедуры

Процедура НастроитьОтборКассККМ(Форма)
	
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	ТорговыйОбъект = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ОпределитьТекущийТорговыйОбъект(ТорговыйОбъект);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РабочееМесто", ТекущееРабочееМесто);
	ДополнительныеПараметры.Вставить("ТорговыйОбъект", ТорговыйОбъект);
	
	Запрос = Новый Запрос;
	СформироватьЗапросДанныеКассыККМ(Запрос,, ДополнительныеПараметры);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ТекстСообщения = НСтр("ru = 'Не сформирован запрос для получения данных Касс ККМ'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивКассККМ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КассаККМ");
	
	ФиксированныйМассивКассККМ = Новый ФиксированныйМассив(МассивКассККМ);
	ПараметрКассыККМ = Новый ПараметрВыбора("Отбор.Ссылка", ФиксированныйМассивКассККМ);
	
	МассивТиповКасс = Новый Массив;
	МассивТиповКасс.Добавить(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	ФиксированныйМассивТиповКасс = Новый ФиксированныйМассив(МассивТиповКасс);
	
	ПараметрВыбораКассыККМТип = Новый ПараметрВыбора("Отбор.ТипКассы", ФиксированныйМассивТиповКасс);
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(ПараметрВыбораКассыККМТип);
	МассивПараметровВыбора.Добавить(ПараметрКассыККМ);
	
	ПараметрыВыбораКассыККМ = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	Форма.Элементы.НастройкаРМКОсновнаяКассаККМ.ПараметрыВыбора = ПараметрыВыбораКассыККМ;
	
КонецПроцедуры

Процедура НастроитьГруппуРаспределенияПродаж(Форма)
	
	Форма.Элементы.РаспределениеПродаж.Видимость = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРозничныйВидЦены(Форма)
	
	Объект = Форма.Объект;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.РозничныйВидЦен КАК РозничныйВидЦен,
	|	ВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВидыЦен.ВалютаЦены КАК ВалютаЦены
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО СтруктурныеЕдиницы.РозничныйВидЦен = ВидыЦен.Ссылка
	|ГДЕ
	|	СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект";
	
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Форма.РозничныйВидЦены = Выборка.РозничныйВидЦен;
		Объект.ЦенаВключаетНДС = Выборка.ЦенаВключаетНДС;
		Форма.ВалютаДокумента = Выборка.ВалютаЦены;
	Иначе
		Если ЗначениеЗаполнено(Объект.ТорговыйОбъект) Тогда
			ВидЦеныПоУмолчанию = Справочники.ВидыЦен.Оптовая;
			Форма.РозничныйВидЦены = ВидЦеныПоУмолчанию;
			Объект.ЦенаВключаетНДС = ВидЦеныПоУмолчанию.ЦенаВключаетНДС;
			Форма.ВалютаДокумента = ВидЦеныПоУмолчанию.ВалютаЦены;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение ФО ИспользоватьНовыйРМК.
// Значение по умолчанию Истина.
//
// Возвращаемое значение:
//  ИспользоватьНовыйРМК - булево - признак использования нового РМК.
//
Функция ВключеноИспользованиеНовогоРМК()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНовоеРМК");
	
КонецФункции

// Настройки видимости группы с шаблонами штрихкодов и заполнение значений префиксов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ЗаполнитьПрефиксыВесовогоТовара(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Настройки видимости группы синхронизация данных.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура НастроитьГруппуСинхронизацияДанных(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПрограммноСоздатьРеквизитыФормы(Форма)
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(50);
	КвалификаторЧисла = Новый КвалификаторыЧисла(15,2);
	МассивРеквизитов = Новый Массив;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВалютаДокумента") Тогда
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВалютаДокумента",
			Новый ОписаниеТипов("СправочникСсылка.Валюты")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ДопустимаяСуммаВозвратаАванса",
			Новый ОписаниеТипов("Число", КвалификаторЧисла)));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидПлатежнойКарты",
			Новый ОписаниеТипов("Строка", КвалификаторСтроки), "Объект.Оплата"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидПлатежнойКарты",
			Новый ОписаниеТипов("Строка", КвалификаторСтроки), "ТаблицаТерминалы"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КлючСвязиЧекаПродажи",
			Новый ОписаниеТипов("Число", КвалификаторЧисла), "Объект.Товары"));
		
		ТипыРеквизита = Новый Массив;
		ТипыРеквизита.Добавить(Тип("Булево"));
		ОписаниеТипаКолонки = Новый ОписаниеТипов(ТипыРеквизита);
		ЭтоСохраняемыеДанные = Истина;
		
		КолонкаТаблицыТерминалов = Новый РеквизитФормы("КонтролироватьВзаиморасчетыПоДоговору",
			ОписаниеТипаКолонки,
			"ТаблицаТерминалы",
			"Контролировать взаиморасчеты",
			ЭтоСохраняемыеДанные);
			
		МассивРеквизитов.Добавить(КолонкаТаблицыТерминалов);
			
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуХозОперации(ЧекККМ)
	
	Если ТипЗнч(ЧекККМ) = Тип("ДокументОбъект.ЧекККМ") Тогда
		ЧекККМ.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЧекККМ;
	Иначе
		ЧекККМ.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЧекККМВозврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЧекаПоСистемеНалогообложения(Форма, СистемаНалогообложения, ОжидаемоеКоличествоЧеков)
	
	Результат = Новый Структура("Товары,Оплата,СкидкиНаценки,БонусныеБаллыКНачислению, ПримененныеПромокоды, ПодаркиБезВыводаВЧек");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	ЭтоОперацияВозврат = НЕ ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	Если ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		
		СтруктураПараметровЗаполнения = Новый Структура;
		СтруктураПараметровЗаполнения.Вставить("Магазин", Объект.ТорговыйОбъект);
		СтруктураПараметровЗаполнения.Вставить("РабочееМесто", Форма.РабочееМесто);
		СтруктураПараметровЗаполнения.Вставить("Организация", Объект.Организация);
		
		ОрганизацияКассыККМ = Объект.КассаККМ.Владелец;
		
		Если Форма.ЭтоЗаменаТоваров Тогда
			
			ОплатаСпискаПокупок = Объект.Оплата;
			СтруктураОтбораТовары = Новый Структура("СистемаНалогообложения, Организация",СистемаНалогообложения, ОрганизацияКассыККМ);
			
			Если ЭтоОперацияВозврат Тогда
				СтруктураОтбораТовары.Вставить("ТоварКЗамене", Истина);
				СтруктураОтбораОплаты = Новый Структура("ВидОплаты", ОбщегоНазначения.ПредопределенныйЭлемент(
					"Перечисление.ВидыБезналичныхОплат.ВстречноеПредоставление"));
				
				ПокупкиСУчетомСНО = Объект.Товары.НайтиСтроки(СтруктураОтбораТовары);
				ОплатаПокупокПоВидамОплат = ОплатаСпискаПокупок.Выгрузить(СтруктураОтбораОплаты);
			Иначе
				ПокупкиСУчетомСНО = Объект.Товары.НайтиСтроки(СтруктураОтбораТовары);
				ОплатаПокупокПоВидамОплат = ОплатаСпискаПокупок.Выгрузить();
			КонецЕсли;
			ПодаркиБезВыводаВЧек = Новый Массив;
			
		Иначе
			ОтборПоСНО = Новый Структура("СистемаНалогообложения, Организация",СистемаНалогообложения, ОрганизацияКассыККМ);
			ПокупкиСУчетомСНО = Объект.Товары.НайтиСтроки(ОтборПоСНО);
			
			ОтборПодарковБезВыводаВЧек = Новый Структура("СистемаНалогообложения, Организация, Подарок, ВыводитьПодарокВЧек",СистемаНалогообложения, ОрганизацияКассыККМ, Истина, Ложь);
			ПодаркиБезВыводаВЧек = Объект.Товары.НайтиСтроки(ОтборПодарковБезВыводаВЧек);
			
			ОплатаСпискаПокупок = Объект.Оплата;
			ОплатаПокупокПоВидамОплат = ОплатаСпискаПокупок.Выгрузить();
		КонецЕсли;
		
		СуммаБонусовПоСНО = 0;
		СуммаПокупокПоСНО = 0;
		Для каждого СтрокаПокупок Из ПокупкиСУчетомСНО Цикл
			СуммаПокупокПоСНО = СуммаПокупокПоСНО + СтрокаПокупок.Сумма + ?(ЭтоОперацияВозврат, 0, СтрокаПокупок.СуммаСкидкиОплатыБонусом);
			СтрокаПокупок.Резерв = Мин(СтрокаПокупок.Количество, СтрокаПокупок.Резерв);
			СуммаБонусовПоСНО = СуммаБонусовПоСНО + СтрокаПокупок.СуммаСкидкиОплатыБонусом;
		КонецЦикла;
		ОплатаПокупокПоСНО = Новый Массив;
		ОсталосьРаспределить = СуммаПокупокПоСНО;
		ОплатаПокупокПоВидамОплат.Колонки.Добавить("Ранг",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0)));
		
		Для каждого СтрокаОплаты Из ОплатаПокупокПоВидамОплат Цикл
			
			ВидОплаты = СтрокаОплаты.ВидОплаты;
			
			Если ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы Тогда
				СтрокаОплаты.Ранг = 0;
				СтрокаОплаты.Сумма = СуммаБонусовПоСНО;
			ИначеЕсли ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта 
				ИЛИ ИнтеграцияСПлатежнымиСистемамиУНФ.ВидОплатыПлатежнойСистемы(ВидОплаты) Тогда
				СтрокаОплаты.Ранг = 1;
			ИначеЕсли ВидОплаты = "Наличные" Тогда
				СтрокаОплаты.Ранг = 9; //Всегда должен быть максимальный
			Иначе
				СтрокаОплаты.Ранг = 1;
			КонецЕсли;
			
		КонецЦикла;
		
		ОплатаПокупокПоВидамОплат.Сортировать("Ранг Возр");
		
		Для каждого ОплатаСРазделениемПоВиду Из ОплатаПокупокПоВидамОплат Цикл
		
			Если ОсталосьРаспределить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ОплатаСРазделениемПоВиду.Сумма > 0 Тогда
				
				ЧастьОплаты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОплатаСРазделениемПоВиду);
				
				Если ОплатаСРазделениемПоВиду.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы Тогда
					ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта
					ИЛИ ИнтеграцияСПлатежнымиСистемамиУНФ.ВидОплатыПлатежнойСистемы(ОплатаСРазделениемПоВиду.ВидОплаты) Тогда
					ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = "Наличные" Тогда
					ЧастьСуммыОплаты = Макс(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				Иначе
					ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				КонецЕсли;
				
				ЧастьОплаты.Сумма = ЧастьСуммыОплаты;
				ОплатаПокупокПоСНО.Добавить(ЧастьОплаты);
				ОплатаСРазделениемПоВиду.Сумма = ОплатаСРазделениемПоВиду.Сумма - ЧастьСуммыОплаты;
				ОсталосьРаспределить = ОсталосьРаспределить - ЧастьСуммыОплаты;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Вставить("Товары", ПокупкиСУчетомСНО);
		Результат.Вставить("Оплата", ОплатаПокупокПоСНО);
		
		// Кэшированые значения скидок наценок
		МассивУдаляемыхСтрок = Новый Массив;
		СкидкиНаценки = Форма.ТаблицаСкидкиНаценки.Выгрузить();
		Для Каждого СтрокаСкидкиНаценки Из СкидкиНаценки Цикл
			
			Если СтрокаСкидкиНаценки.СкидкаНаценка.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок И
				НЕ СтрокаСкидкиНаценки.СкидкаНаценка.УчитыватьПодарокКакПродажу Тогда
				Продолжить;
			КонецЕсли;
			
			УдалятьСтроку = Истина;
			Для Каждого СтрокаТоваров Из ПокупкиСУчетомСНО Цикл
				Если СтрокаТоваров.ВладелецПодарка = XMLСтрока(СтрокаСкидкиНаценки.СкидкаНаценка) И
					НЕ ЗначениеЗаполнено(СтрокаСкидкиНаценки.КлючСвязи) Тогда
					
					СтрокаСкидкиНаценки.КлючСвязи = СтрокаТоваров.НомерСтроки;
					УдалятьСтроку = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если СтрокаСкидкиНаценки.КлючСвязи = СтрокаТоваров.НомерСтроки Тогда
					УдалятьСтроку = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалятьСтроку Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаСкидкиНаценки);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			СкидкиНаценки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		МассивУдаляемыхСтрок = Новый Массив;
		БонусныеБаллыКНачислению = Форма.ТаблицаБонусныеБаллы.Выгрузить();
		Для Каждого СтрокаБонусныеБаллыКНачислению Из БонусныеБаллыКНачислению Цикл
			
			УдалятьСтроку = Истина;
			Для Каждого СтрокаТоваров Из ПокупкиСУчетомСНО Цикл
				Если СтрокаБонусныеБаллыКНачислению.КлючСвязи = СтрокаТоваров.НомерСтроки Тогда
					УдалятьСтроку = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалятьСтроку Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаБонусныеБаллыКНачислению);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			БонусныеБаллыКНачислению.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		// Промокоды
		ПримененныеПромокоды = Форма.ТаблицаПримененныхПромокодов.Выгрузить();
		УсловияПримененияПромокодов = ПромокодыУНф.УсловияПримененияПромокодов(ПримененныеПромокоды.ВыгрузитьКолонку("Промокод"));
		УсловияСкидокСледующейПокупки = ПромокодыУНФ.УсловияПримененияСкидокЗаПромокод(ПримененныеПромокоды.ВыгрузитьКолонку("СкидкаНаценка"));
		Для Каждого СтрокаПромокода Из ПримененныеПромокоды Цикл
			УсловиеПредоставленияСкидки = СтрокаПромокода.УсловиеПредоставленияСкидки;
			Если СтрокаПромокода.ЭтоАктивацияПромокода Тогда
				СтрокаПромокода.УсловиеПредоставленияСкидки = УсловияСкидокСледующейПокупки[СтрокаПромокода.СкидкаНаценка];
			Иначе
				СтрокаПромокода.УсловиеПредоставленияСкидки = УсловияПримененияПромокодов[СтрокаПромокода.Промокод];
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаПромокода.УсловиеПредоставленияСкидки) Тогда
				СтрокаПромокода.УсловиеПредоставленияСкидки = УсловиеПредоставленияСкидки;
			КонецЕсли;
		КонецЦикла;
		
		Результат.Вставить("СкидкиНаценки", СкидкиНаценки);
		Результат.Вставить("БонусныеБаллыКНачислению", БонусныеБаллыКНачислению);
		Результат.Вставить("ПримененныеПромокоды", ПримененныеПромокоды);
		Результат.Вставить("ПодаркиБезВыводаВЧек", ПодаркиБезВыводаВЧек);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьЗапросСписокЧеков(Форма, ДобавлятьЧекиНаВозврат = Ложь, ДобавлятьОтложенныеЧекиВозврата = Ложь)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад
	|ПОМЕСТИТЬ ТаблицаСклады
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
	|ГДЕ
	|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
	|ГДЕ
	|	(ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ИЛИ ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЧекККМ.Ссылка КАК Ссылка,
	|	ДокументЧекККМ.Номер КАК Номер,
	|	ДокументЧекККМ.Дата КАК Дата,
	|	ДокументЧекККМ.КассаККМ КАК КассаККМ,
	|	ДокументЧекККМ.КассоваяСмена КАК КассоваяСмена,	
	|	ЕСТЬNULL(ДокументЧекККМ.КассоваяСмена.СтатусКассовойСмены, НЕОПРЕДЕЛЕНО) В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.СтатусыОтчетаОРозничныхПродажах.Открыта)) КАК ВозможноПродолжитьЧек,
	|	ДокументЧекККМ.КассоваяСмена <> Значение(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка) КАК СменаЗаполнена,
	|	ДокументЧекККМ.КассаККМ В (&МассивКассККМ) КАК ЭтоТекущаяКассаККМ,
	|	ДокументЧекККМ.Статус КАК Статус,
	|	ДокументЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЧекККМ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументЧекККМ.Проведен КАК Проведен,
	|	ДокументЧекККМ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ДокументЧекККМ.Комментарий КАК Комментарий	
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументЧекККМ
	|ГДЕ
	|	НЕ ДокументЧекККМ.ПометкаУдаления
	|	И ДокументЧекККМ.КассаККМ В(&МассивКассККМ)
	|	И ДокументЧекККМ.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				ТаблицаСклады.Склад КАК Склад
	|			ИЗ
	|				ТаблицаСклады КАК ТаблицаСклады)
	|	И ДокументЧекККМ.Организация В(&МассивОрганизаций)
	|";
	
	Если ДобавлятьЧекиНаВозврат Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозврат.Ссылка,
		|	ЧекККМВозврат.Номер,
		|	ЧекККМВозврат.Дата,
		|	ЧекККМВозврат.КассаККМ,
		|	ЧекККМВозврат.КассоваяСмена,
		|	ЕСТЬNULL(ЧекККМВозврат.КассоваяСмена.СтатусКассовойСмены, НЕОПРЕДЕЛЕНО) В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.СтатусыОтчетаОРозничныхПродажах.Открыта)),
		|	ЧекККМВозврат.КассоваяСмена <> Значение(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка),
		|	ЧекККМВозврат.КассаККМ В(&МассивКассККМ),	
		|	ЗНАЧЕНИЕ (Перечисление.СтатусыЧековККМ.Пробит),
		|	ЧекККМВозврат.СуммаДокумента,
		|	ЧекККМВозврат.ХозяйственнаяОперация,
		|	ЧекККМВозврат.Проведен,
		|	ЧекККМВозврат.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ЧекККМВозврат.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	НЕ ЧекККМВозврат.ПометкаУдаления
		|	И ЧекККМВозврат.КассаККМ В(&МассивКассККМ)
		|	И ЧекККМВозврат.СтруктурнаяЕдиница В
		|			(ВЫБРАТЬ
		|				ТаблицаСклады.Склад КАК Склад
		|			ИЗ
		|				ТаблицаСклады КАК ТаблицаСклады)
		|	И ЧекККМВозврат.Организация В(&МассивОрганизаций)
		|";
		
	КонецЕсли;
	
	Если ДобавлятьОтложенныеЧекиВозврата Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозврат.Ссылка,
		|	ЧекККМВозврат.Номер,
		|	ЧекККМВозврат.Дата,
		|	ЧекККМВозврат.КассаККМ,
		|	ЧекККМВозврат.КассоваяСмена,
		|	ЕСТЬNULL(ЧекККМВозврат.КассоваяСмена.СтатусКассовойСмены, НЕОПРЕДЕЛЕНО) В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.СтатусыОтчетаОРозничныхПродажах.Открыта)),
		|	ЧекККМВозврат.КассоваяСмена <> Значение(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка),
		|	ЧекККМВозврат.КассаККМ В (&МассивКассККМ),
		|	ВЫБОР
		|		КОГДА ЧекККМВозврат.НомерЧекаККМ = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	КОНЕЦ,
		|	ЧекККМВозврат.СуммаДокумента,
		|	ЧекККМВозврат.ХозяйственнаяОперация,
		|	ЧекККМВозврат.Проведен,
		|	ЧекККМВозврат.ДисконтнаяКарта,
		|	ЧекККМВозврат.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	НЕ ЧекККМВозврат.ПометкаУдаления
		|	И ЧекККМВозврат.НомерЧекаККМ = 0
		|	И ЧекККМВозврат.КассаККМ В(&МассивКассККМ)
		|	И ЧекККМВозврат.СтруктурнаяЕдиница В
		|			(ВЫБРАТЬ
		|				ТаблицаСклады.Склад КАК Склад
		|			ИЗ
		|				ТаблицаСклады КАК ТаблицаСклады)
		|	И ЧекККМВозврат.Организация В(&МассивОрганизаций)
		|";
		
	КонецЕсли;
	
	Форма.ТаблицаЧековККМ.ПроизвольныйЗапрос = Истина;
	Форма.ТаблицаЧековККМ.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

Процедура НастроитьГруппуШаблоныЧеков(Форма)
	
	Форма.Элементы.ШаблоныЧекаККТ.Видимость = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиЧекККМ(Форма, Источник, ТекущийЧек)
	
	ИспользоватьВыборСкладаПриПродаже = Форма.ИспользоватьВыборСкладаПриПродаже;
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
		ТекущийЧек.Организация,
		ТекущийЧек.СтруктурнаяЕдиница);
	
	ДобавлятьТовары = Истина;
	Если Форма.ПриемАванса Тогда
		ДобавлятьТовары = Ложь;
	ИначеЕсли Форма.ПриемАвансаПоЗаказу Тогда
		ДобавлятьТовары = Ложь;
	ИначеЕсли Форма.ЭтоВозвратАванса Тогда
		ДобавлятьТовары = Ложь;
	ИначеЕсли Форма.ЭтоОплатаРассрочки Тогда
		ДобавлятьТовары = Ложь;
	ИначеЕсли Форма.ОтложенныйЧекПолностьюОплачен Тогда
		ДобавлятьТовары = Ложь;
	КонецЕсли;
	СоответствиеИдентификаторСтрокиКлючСвязи = Новый Соответствие;
	
	ТекущийЧек.ДобавленныеНаборы.Очистить();
	ТекущийЧек.СерииНоменклатуры.Очистить();
	ТекущийЧек.АкцизныеМарки.Очистить();
	Если Не Форма.ОтложенныйЧекПолностьюОплачен Тогда
		ТекущийЧек.Запасы.Очистить();
	КонецЕсли;
	
	Если ДобавлятьТовары Тогда
		
		ТекущийНомерНабора = 0;
		Для Каждого СтрокаТовара Из Источник.Товары Цикл
			
			Если СтрокаТовара.Подарок И НЕ СтрокаТовара.ВыводитьПодарокВЧек Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаЧека = ТекущийЧек.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЧека, СтрокаТовара,, "Ячейка");
			
			ЗаполнитьДанныеМеховыхИзделий(НоваяСтрокаЧека, СтрокаТовара);
			
			НоваяСтрокаЧека.Всего = СтрокаТовара.Сумма + ?(Форма.Объект.ЦенаВключаетНДС, 0, СтрокаТовара.СуммаНДС);
			
			ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрокаЧека.Номенклатура, "ВидСтавкиНДС, ЕдиницаИзмерения,
				|ЭтоАгентскаяУслуга, Договор");
			
			Если Не ЗначениеЗаполнено(НоваяСтрокаЧека.ЕдиницаИзмерения) Тогда
				НоваяСтрокаЧека.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовара.Упаковка) Тогда
				НоваяСтрокаЧека.ЕдиницаИзмерения = СтрокаТовара.Упаковка;
			КонецЕсли;
			
			Если ДанныеНоменклатуры.ЭтоАгентскаяУслуга Тогда
				НоваяСтрокаЧека.ДоговорПлатежногоАгента = ДанныеНоменклатуры.Договор;
			КонецЕсли;
			
			НоваяСтрокаЧека.СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Форма.Объект, СтрокаТовара,
				Форма.СистемаНалогообложенияОрганизацииПоУмолчанию);
			
			ОбщегоНазначенияРМКУНФКлиентСервер.РассчитатьСуммуНДС(Форма.Объект, НоваяСтрокаЧека);
			
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ТекущийЧек.Запасы, НоваяСтрокаЧека, "КлючСвязи");
			
			КодМарки = СтрокаТовара.КодМаркировки;
			
			НоваяСтрокаЧека.ПродажаПодарка = СтрокаТовара.Подарок;
			
			Если ЗначениеЗаполнено(КодМарки) И СтрокаТовара.НеобходимостьВводаКодаМаркировки Тогда
				
				ЭтоШтрихкодАкцизнойМарки = ШтрихкодированиеЕГАИС.ЭтоШтрихкодАкцизнойМарки(КодМарки);
				НоваяСтрокаЧека.НеобходимостьВводаАкцизнойМарки = ЭтоШтрихкодАкцизнойМарки;
				НоваяСтрокаЧека.НеобходимостьВводаКодаМаркировки = НЕ ЭтоШтрихкодАкцизнойМарки;
				
				СтруктураШтрихкода = ШтрихкодУпаковкиТовараПоПолномуКодуМарки(КодМарки, СтрокаТовара);
				
				КодМаркировкиНормализованный = СтруктураШтрихкода.КодМаркировкиНормализованный;
				АкцизнаяМарка = СтруктураШтрихкода.ШтрихкодУпаковки;
				
				СтрокаТовара.КодМаркировки = КодМаркировкиНормализованный;
				НоваяСтрокаЧека.КодМаркировки = "";
				
				Если Не ЗначениеЗаполнено(НоваяСтрокаЧека.Штрихкод) Тогда
					НоваяСтрокаЧека.Штрихкод = 
						РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоНоменклатуре(НоваяСтрокаЧека.Номенклатура);
				КонецЕсли;
				
				НоваяСтрокаАкцизныеМарки = ТекущийЧек.АкцизныеМарки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАкцизныеМарки, СтрокаТовара);
				НоваяСтрокаАкцизныеМарки.КлючСвязи = НоваяСтрокаЧека.КлючСвязи;
				НоваяСтрокаАкцизныеМарки.АкцизнаяМарка = АкцизнаяМарка;
				НоваяСтрокаАкцизныеМарки.ШтрихкодУпаковки = АкцизнаяМарка;
				Если ЭтоШтрихкодАкцизнойМарки
					Или СтрокаТовара.ОсобенностьУчета = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
					НоваяСтрокаАкцизныеМарки.КодАкцизнойМарки = КодМаркировкиНормализованный;
				КонецЕсли;
				
				Если ЭтоШтрихкодАкцизнойМарки И Не ОрганизацияЕГАИС = Неопределено Тогда
					ЗаполнитьСправку2(НоваяСтрокаАкцизныеМарки, ОрганизацияЕГАИС);
					
					КодАлкогольнойПродукции = СтруктураШтрихкода.КодАлкогольнойПродукции;
					Если ЗначениеЗаполнено(КодАлкогольнойПродукции) Тогда
						КодыАлкогольнойПродукции = Новый Массив;
						КодыАлкогольнойПродукции.Добавить(КодАлкогольнойПродукции);
						
						СоответствиеАлкогольнойПродукции = ИнтеграцияЕГАИС.СоответствиеАлкогольнойПродукции(КодыАлкогольнойПродукции);
						НоменклатураЕГАИС = СоответствиеАлкогольнойПродукции[КодАлкогольнойПродукции];
						Если ЗначениеЗаполнено(НоменклатураЕГАИС) Тогда
							НоваяСтрокаЧека.НоменклатураЕГАИС = НоменклатураЕГАИС;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущийЧек.Заказ) Тогда
				НоваяСтрокаЧека.Заказ = ТекущийЧек.Заказ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовара.Партия) Тогда
				НоваяСтрокаЧека.Партия = СтрокаТовара.Партия;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовара.Серия) Тогда
				НоваяСтрокаЧека.СерииНоменклатуры = СтрокаТовара.Серия;
				
				НоваяСтрокаСерииНоменклатуры = ТекущийЧек.СерииНоменклатуры.Добавить();
				НоваяСтрокаСерииНоменклатуры.Серия = СтрокаТовара.Серия;
				НоваяСтрокаСерииНоменклатуры.КлючСвязи = НоваяСтрокаЧека.КлючСвязи;
				НоваяСтрокаСерииНоменклатуры.Количество = СтрокаТовара.Количество;
			КонецЕсли;
			
			Если ИспользоватьВыборСкладаПриПродаже И
				ТекущийЧек.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				
				НоваяСтрокаЧека.Ячейка = СтрокаТовара.Ячейка;
				НоваяСтрокаЧека.СтруктурнаяЕдиница = СтрокаТовара.ТорговыйОбъект;
			КонецЕсли;
			
			Если ТекущийЧек.ПоложениеОтветственный = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				НоваяСтрокаЧека.Ответственный = СтрокаТовара.Продавец;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовара.НоменклатураНабора) Тогда
				Если Не ТекущийНомерНабора = СтрокаТовара.НомерНабора Тогда
					
					ТекущийНомерНабора = СтрокаТовара.НомерНабора;
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("НоменклатураНабора", СтрокаТовара.НоменклатураНабора);
					СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТовара.ХарактеристикаНабора);
					МассивДобавленныхНаборов = ТекущийЧек.ДобавленныеНаборы.НайтиСтроки(СтруктураПоиска);
					Если МассивДобавленныхНаборов.Количество() = 0 Тогда
						НовыйНабор = ТекущийЧек.ДобавленныеНаборы.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйНабор, НоваяСтрокаЧека);
						НовыйНабор.Количество = СтрокаТовара.КоличествоНаборов;
					Иначе
						МассивДобавленныхНаборов[0].Количество = МассивДобавленныхНаборов[0].Количество + СтрокаТовара.КоличествоНаборов;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СоответствиеИдентификаторСтрокиКлючСвязи[СтрокаТовара.ИдентификаторСтроки] = НоваяСтрокаЧека.КлючСвязи;
		КонецЦикла;
	КонецЕсли;
	
	ТекущийЧек.БезналичнаяОплата.Очистить();
	СуммаНаличных = 0;
	СуммаЗачетАвансов = 0;
	СуммаБонусов = 0;
	
	Для Каждого СтрокаОплатыРМК Из Источник.Оплата Цикл
		
		Если СтрокаОплатыРМК.Свойство("ВидОплаты") Тогда
			Если СтрокаОплатыРМК.ВидОплаты = "Наличные" Тогда
				СуммаНаличных = СуммаНаличных + СтрокаОплатыРМК.Сумма;
				Продолжить;
			ИначеЕсли СтрокаОплатыРМК.ВидОплаты = "ЗачетАванса" Тогда
				СуммаЗачетАвансов = СуммаЗачетАвансов + СтрокаОплатыРМК.Сумма;
				Продолжить;
			ИначеЕсли СтрокаОплатыРМК.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку
				И ТекущийЧек.ОперацияСДенежнымиСредствами Тогда
				Продолжить;
			ИначеЕсли СтрокаОплатыРМК.ВидОплаты = "БанковскийПлатеж" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаОплатыЧекККМ = ТекущийЧек.БезналичнаяОплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОплатыЧекККМ, СтрокаОплатыРМК);
		
		Если СтрокаОплатыРМК.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
			НоваяСтрокаОплатыЧекККМ.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта;
			НоваяСтрокаОплатыЧекККМ.ВидПлатежнойКарты = СтрокаОплатыРМК.ВидПлатежнойКарты;
		КонецЕсли;

		Если (СтрокаОплатыРМК.ВидОплаты = Перечисления.ВидыБезналичныхОплат.СБП
			ИЛИ СтрокаОплатыРМК.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта
			ИЛИ СтрокаОплатыРМК.ВидОплаты = Перечисления.ВидыБезналичныхОплат.СертификатНСПК)
			И ТипЗнч(ТекущийЧек.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			НоваяСтрокаОплатыЧекККМ.ОплатаОтменена = Истина;
		КонецЕсли;
		
		Если СтрокаОплатыРМК.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат Тогда
			НоваяСтрокаОплатыЧекККМ.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат;
			НоваяСтрокаОплатыЧекККМ.СуммаПогашенияСертификата = СтрокаОплатыРМК.Сумма;
			ТаблицаНомеровСертификатов = РаботаСПодарочнымиСертификатами.ВыполнитьПоискСертификатаПоНомеру(СтрокаОплатыРМК.НомерСертификата);
			Если ТаблицаНомеровСертификатов.Количество() > 0 Тогда
				НоваяСтрокаОплатыЧекККМ.НомерСертификата = ТаблицаНомеровСертификатов[0].НомерСертификата;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаОплатыРМК.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы Тогда
			НоваяСтрокаОплатыЧекККМ.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы;
			НоваяСтрокаОплатыЧекККМ.СуммаБонусов = СтрокаОплатыРМК.Сумма;
			НоваяСтрокаОплатыЧекККМ.Сумма = 0;
			НоваяСтрокаОплатыЧекККМ.БонуснаяКарта = Форма.Объект.ДисконтнаяКарта;
			СуммаБонусов = СуммаБонусов + СтрокаОплатыРМК.Сумма;
		КонецЕсли;
		
		Если СтрокаОплатыРМК.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Кредит Тогда
			
			СуммаКомиссии = ПосчитатьКомиссию(СтрокаОплатыРМК.Сумма,
				СтрокаОплатыРМК.ЭквайринговыйТерминал, ЭквайринговыеОперацииКлиентСервер.ВидПлатежнойКартыДляКредита());
				
			СтрокаОплатыРМК.СуммаКомиссии = СуммаКомиссии;
			Если НЕ Форма.ПараметрыОплатыКредитом = Неопределено Тогда
				Форма.ПараметрыОплатыКредитом.СуммаКомиссии = СуммаКомиссии;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Зачет аванса из банковского платежа
	Если Форма.СуммаОплаченоБезнал > 0 И НЕ Форма.ЭтоЗачетАванса Тогда
		Для Каждого СтрокаПредоплаты Из Форма.ТаблицаПредоплаты Цикл
			СтрокаПредоплатыЧека = ТекущийЧек.Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПредоплатыЧека, СтрокаПредоплаты);
		КонецЦикла;
	КонецЕсли;
	
	// Зачет аванса
	ОсталосьАвансов = СуммаЗачетАвансов;
	Если Форма.ТаблицаПредоплаты.Количество() > 0 И ОсталосьАвансов > 0
		И Форма.ЭтоЗачетАванса И НЕ ТекущийЧек.ОперацияСДенежнымиСредствами Тогда
		
		Для Каждого СтрокаПредоплаты Из Форма.ТаблицаПредоплаты Цикл
			Если ОсталосьАвансов > 0 Тогда
				СуммаАванса = Мин(СтрокаПредоплаты.СуммаРасчетов, ОсталосьАвансов);
				СтрокаПредоплатыЧека = ТекущийЧек.Предоплата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатыЧека, СтрокаПредоплаты);
				СтрокаПредоплатыЧека.СуммаРасчетов = СуммаАванса;
				СтрокаПредоплатыЧека.СуммаПлатежа = СуммаАванса;
				ОсталосьАвансов = ОсталосьАвансов - СуммаАванса;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Оплата рассрочки
	Если Форма.ЭтоОплатаРассрочки Тогда
		
		СтрокаРассрочкиЧека = ТекущийЧек.Предоплата.Добавить();
		СтрокаРассрочкиЧека.Документ = Форма.ЧекККМПродажа;
		СтрокаРассрочкиЧека.Кратность = 1;
		СтрокаРассрочкиЧека.Курс = 1;
		СтрокаРассрочкиЧека.СуммаПлатежа = Форма.СуммаОстаткаДокументаРасчета - Форма.СуммаОплаченоВРассрочку;
		СтрокаРассрочкиЧека.СуммаРасчетов = Форма.СуммаОстаткаДокументаРасчета - Форма.СуммаОплаченоВРассрочку;
		
	КонецЕсли;
	
	// Возврат оплаты бонусами. Пропорционально. Начисление бонусов.
	ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Форма.Объект.ВидОперации);
	Если НЕ ЭтоПродажа И Форма.СуммаБонусов > 0 Тогда
		БонуснаяКарта = Форма.Объект.ДисконтнаяКарта;
		РеквизитыБонуснойПрограммы = РаботаСБонусами.РеквизитыБонуснойПрограммы(БонуснаяКарта);
		Если ЗначениеЗаполнено(РеквизитыБонуснойПрограммы.БонуснаяПрограмма)
			И РеквизитыБонуснойПрограммы.НачислятьБонусыПриВозврате Тогда
			
			НоваяСтрокаОплатыЧекККМ = ТекущийЧек.БезналичнаяОплата.Добавить();
			НоваяСтрокаОплатыЧекККМ.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Бонусы;
			НоваяСтрокаОплатыЧекККМ.СуммаБонусов = Форма.СуммаБонусов;
			НоваяСтрокаОплатыЧекККМ.БонуснаяКарта = БонуснаяКарта;
			
		КонецЕсли;
	КонецЕсли;
	
	// Возврат начисленных бонусов. Пропорционально. Списание бонусов.
	Если Не ЭтоПродажа И ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
		
		ЧекПродажи = Форма.ЧекККМПродажа;
		ТекущийЧек.БонусныеБаллыКНачислению.Загрузить(ЧекПродажи.БонусныеБаллыКНачислению.Выгрузить());
		
		Для Каждого СтрокаТабличнойЧасти Из Форма.Объект.Товары Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязиЧекаПродажи);
			
			СтрокиВЧеке = ЧекПродажи.Запасы.НайтиСТроки(СтруктураПоиска);
			Если СтрокиВЧеке.Количество() > 0 Тогда
				СуммаТовараПриПродаже = СтрокиВЧеке[0].Сумма;
			КонецЕсли;
			
			СуммаВозвратаТовара = СтрокаТабличнойЧасти.Сумма;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязиЧекаПродажи);
			
			ОбрабатываемыеСтроки = ТекущийЧек.БонусныеБаллыКНачислению.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТаблицы Из ОбрабатываемыеСтроки Цикл
				
				СтрокаТаблицы.КоличествоБонусныхБаллов =
					СтрокаТаблицы.КоличествоБонусныхБаллов * СуммаВозвратаТовара / ?(СуммаТовараПриПродаже = 0, 1, СуммаТовараПриПродаже);
				
			КонецЦикла;
			
		КонецЦикла;
		
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого СтрокаТабличнойЧасти Из ТекущийЧек.БонусныеБаллыКНачислению Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязиЧекаПродажи", СтрокаТабличнойЧасти.КлючСвязи);
			
			СтрокиВЧеке = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
			Если СтрокиВЧеке.Количество() = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
			ТекущийЧек.БонусныеБаллыКНачислению.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	КонецЕсли;
	
	// Кэшированые значения скидок наценок
	Если Источник.Свойство("СкидкиНаценки") Тогда
		ТекущийЧек.СкидкиНаценки.Загрузить(Источник.СкидкиНаценки);
	КонецЕсли;
	Если Источник.Свойство("БонусныеБаллыКНачислению") Тогда
		ТекущийЧек.БонусныеБаллыКНачислению.Загрузить(Источник.БонусныеБаллыКНачислению);
	КонецЕсли;
	Если Источник.Свойство("ПримененныеПромокоды") Тогда
		ТекущийЧек.ПримененныеПромокоды.Загрузить(Источник.ПримененныеПромокоды);
	КонецЕсли;
	Если Источник.Свойство("ПодаркиБезВыводаВЧек") Тогда
		Для Каждого Подарок Из Источник.ПодаркиБезВыводаВЧек Цикл
			СтрокаПодарка = ТекущийЧек.Подарки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодарка, Подарок);
			СтруктурнаяЕдиница = Подарок.ТорговыйОбъект;
			Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				СтруктурнаяЕдиница = ТекущийЧек.СтруктурнаяЕдиница;
			КонецЕсли;
			СтрокаПодарка.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			СтрокаПодарка.СкидкаНаценка = Справочники.АвтоматическиеСкидки.ПолучитьСсылку(Новый УникальныйИдентификатор(Подарок.ВладелецПодарка));
			
			Если Не ЗначениеЗаполнено(СтрокаПодарка.ЕдиницаИзмерения) Тогда
				СтрокаПодарка.ЕдиницаИзмерения = Подарок.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Подарок.Упаковка) Тогда
				СтрокаПодарка.ЕдиницаИзмерения = Подарок.Упаковка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Управляемые скидки
	Если ЭтоПродажа Тогда
		ВыбранныеУправляемыеСкидки = Форма.ТаблицаВыбранныхУправляемыхСкидок.Выгрузить();
		ВыбранныеУправляемыеСкидки.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10,0)));
		Для Каждого УправляемаяСкидка Из ВыбранныеУправляемыеСкидки Цикл
			Если ЗначениеЗаполнено(УправляемаяСкидка.ИдентификаторСтроки) Тогда
				УправляемаяСкидка.КлючСвязи = СоответствиеИдентификаторСтрокиКлючСвязи[УправляемаяСкидка.ИдентификаторСтроки];
			КонецЕсли;
		КонецЦикла;
		ТекущийЧек.ВыбранныеУправляемыеСкидки.Загрузить(ВыбранныеУправляемыеСкидки);
	КонецЕсли;
	
	ТекущийЧек.ПолученоНаличными = СуммаНаличных;
	
	Если ТипЗнч(ТекущийЧек) = Тип("ДокументОбъект.ЧекККМ") Тогда
		// Заполним реквизит "ФормаОплаты".
		Если ТекущийЧек.ПолученоНаличными > 0 И ТекущийЧек.БезналичнаяОплата.Количество() = 0 Тогда
			ТекущийЧек.ФормаОплаты = Перечисления.ТипыДенежныхСредств.Наличные;
		ИначеЕсли ТекущийЧек.ПолученоНаличными = 0 И ТекущийЧек.БезналичнаяОплата.Количество() > 0 Тогда
			ТекущийЧек.ФормаОплаты = Перечисления.ТипыДенежныхСредств.Безналичные;
		Иначе
			ТекущийЧек.ФормаОплаты = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПосчитатьКомиссию(Сумма, ЭквайринговыйТерминал, ВидПлатежнойКарты)
	
	ТаблицаВидовКарт = Справочники.СпособыОплаты.ВидыПлатежныхКартИПроцентыКомиссии(ЭквайринговыйТерминал);
	НайденныеСтроки = ТаблицаВидовКарт.НайтиСтроки(Новый Структура("ВидПлатежнойКарты", ВидПлатежнойКарты));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СуммаКомиссии = Сумма * НайденныеСтроки[0].ПроцентКомиссии/100;
	Иначе
		СуммаКомиссии = 0;
	КонецЕсли;
	
	Возврат СуммаКомиссии;
	
КонецФункции

Функция ШтрихкодУпаковкиТовараПоПолномуКодуМарки(КодМаркировки, СтруктураТовара)
	
	ВидПродукцииИС = Неопределено;
	Если ЗначениеЗаполнено(СтруктураТовара.ОсобенностьУчета) Тогда
		ВидПродукцииИС = СтруктураТовара.ОсобенностьУчета;
	КонецЕсли;
	СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	КодМаркировкиОригинал = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
	ДанныеРазбораКода = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировкиОригинал, ВидПродукцииИС);
	
	КодАлкогольнойПродукции = "";
	Если НЕ ДанныеРазбораКода = Неопределено Тогда
		КодМаркировкиНормализованный = ДанныеРазбораКода.НормализованныйКодМаркировки;
		СоставКодаМаркировки = Неопределено;
		Если ДанныеРазбораКода.Свойство("СоставКодаМаркировки", СоставКодаМаркировки) Тогда
			Если ТипЗнч(СоставКодаМаркировки) = Тип("Структура") Тогда
				Если СоставКодаМаркировки.Свойство("КодАлкогольнойПродукции") Тогда
					КодАлкогольнойПродукции = СоставКодаМаркировки.КодАлкогольнойПродукции;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КодМаркировкиНормализованный = СтрЗаменить(КодМаркировки, Разделитель, "");
	КонецЕсли;
	
	ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьПоЗначениюШтрихкода(КодМаркировкиНормализованный);
	Если ШтрихкодУпаковки = Неопределено Тогда
		
		СтруктураСоздания = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
		Если СтруктураТовара.ПоштучноеВыбытие Тогда
			ДанныеОсновнойНоменклатурыЧастичногоВыбытия = ДанныеОсновнойНоменклатурыЧастичногоВыбытия(СтруктураТовара.Номенклатура,
				СтруктураТовара.Характеристика);
			ЗаполнитьЗначенияСвойств(СтруктураСоздания, ДанныеОсновнойНоменклатурыЧастичногоВыбытия);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтруктураСоздания.Номенклатура) Тогда
			СтруктураСоздания.Номенклатура = СтруктураТовара.Номенклатура;
			СтруктураСоздания.Характеристика = СтруктураТовара.Характеристика;
		КонецЕсли;
		СтруктураСоздания.Серия = СтруктураТовара.Серия;
		
		СтруктураСоздания.Штрихкод = КодМаркировкиНормализованный;
		
		Если НЕ ДанныеРазбораКода = Неопределено И ДанныеРазбораКода.Свойство("ВидУпаковки")
			И ДанныеРазбораКода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			
			СтруктураСоздания.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			СтруктураСоздания.Упаковка = СтруктураТовара.Упаковка;
			Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтруктураТовара.ОсобенностьУчета)
				И ЗначениеЗаполнено(СтруктураТовара.Упаковка)
				И ТипЗнч(СтруктураТовара.Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				СтруктураСоздания.Количество = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураТовара.Упаковка, "Коэффициент");
			Иначе
				СтруктураСоздания.Количество = СтруктураТовара.Количество;
			КонецЕсли;
		Иначе
			Если СтруктураТовара.ПоштучноеВыбытие Тогда
				СтруктураСоздания.Количество = 1;
			Иначе
				СтруктураСоздания.Количество = СтруктураТовара.Количество;
			КонецЕсли;
			СтруктураСоздания.КоличествоПотребительскихУпаковок = 1;
			СтруктураСоздания.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		КонецЕсли;
		
		ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(СтруктураСоздания);
		
	Иначе
		
		КоличествоВШтрихкодеДолжноБыть = 0;
		Если НЕ ДанныеРазбораКода = Неопределено И ДанныеРазбораКода.Свойство("ВидУпаковки")
			И ДанныеРазбораКода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтруктураТовара.ОсобенностьУчета)
				И ЗначениеЗаполнено(СтруктураТовара.Упаковка)
				И ТипЗнч(СтруктураТовара.Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				КоличествоВШтрихкодеДолжноБыть = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураТовара.Упаковка, "Коэффициент");
			Иначе
				КоличествоВШтрихкодеДолжноБыть = СтруктураТовара.Количество;
			КонецЕсли;
		Иначе
			Если СтруктураТовара.ПоштучноеВыбытие Тогда
				КоличествоВШтрихкодеДолжноБыть = 1;
			Иначе
				КоличествоВШтрихкодеДолжноБыть = СтруктураТовара.Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ КоличествоВШтрихкодеДолжноБыть = ШтрихкодУпаковки.Количество Тогда
			НовыеРеквизиты = Новый Структура;
			НовыеРеквизиты.Вставить("Количество", КоличествоВШтрихкодеДолжноБыть);
			Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(ШтрихкодУпаковки, НовыеРеквизиты);
		КонецЕсли;
		
	КонецЕсли;
		
		
	СтруктураШтрихкода = Новый Структура;
	СтруктураШтрихкода.Вставить("КодМаркировкиНормализованный", КодМаркировкиНормализованный);
	СтруктураШтрихкода.Вставить("ШтрихкодУпаковки", ШтрихкодУпаковки);
	СтруктураШтрихкода.Вставить("КодАлкогольнойПродукции", КодАлкогольнойПродукции);
	
	Возврат СтруктураШтрихкода;
	
КонецФункции

Процедура ЗаполнитьСправку2(СтрокаАкцизныеМарки, ОрганизацияЕГАИС)
	
	Справка2 = Справочники.Справки2ЕГАИС.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АкцизныеМаркиЕГАИС.АкцизнаяМарка = &АкцизнаяМарка
	|	И АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии)";
	
	Запрос.УстановитьПараметр("АкцизнаяМарка", СтрокаАкцизныеМарки.АкцизнаяМарка);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Справка2 = Выборка.Справка2;
	КонецЕсли;
	
	СтрокаАкцизныеМарки.Справка2 = Справка2;
	
КонецПроцедуры

Процедура НастроитьИспользованиеПродажПоЗаказам(Форма)
	
	Форма.Элементы.ПродажаПоЗаказу.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
	
КонецПроцедуры

// Проверяет факт существования реквизита формы по имени реквизита 
//
// Параметры:
//  Форма - Форма - форма, наличие реквизита у которой предстоит проверить
//  ИмяРеквизита - Строка - имя реквизита, наличие которого у формы предстоит проверить
//
// Возвращаемое значение:
//  Результат - Булево - результат проверки наличия реквизита
//
Функция РеквизитФормыСуществует(Форма, ИмяРеквизита)

	Результат = Ложь;
	
	Если ТипЗнч(ИмяРеквизита) = Тип("Строка") 
		И НЕ ПустаяСтрока(ИмяРеквизита) Тогда
		
		ИмяРеквизита = СокрЛП(ИмяРеквизита);
		РеквизитыФормы = Форма.ПолучитьРеквизиты();
		
		Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		
			Если РеквизитФормы.Имя = ИмяРеквизита Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура НастроитьГруппуЗапретыПродаж(Форма)
	
	Форма.Элементы.ГруппаИспользованиеЗапретовПродаж.Видимость = Истина;
	
КонецПроцедуры

Процедура НастроитьГруппуЗаказы(Форма)
	
	Форма.Элементы.ГруппаЗаказы.Видимость = Истина;
	Форма.Элементы.ГруппаСоздаватьЗаказы.Видимость = Ложь;
	Форма.Элементы.НастройкаРМКПечататьЗаказПриСоздании.Видимость = Ложь;
	
КонецПроцедуры

Процедура НастроитьИспользованиеБезналичныхПлатежей(Форма)
	
	Форма.Элементы.БезналичныеПлатежи.Видимость = Истина;
	
КонецПроцедуры

Процедура НастроитьИспользованиеРасчетовСКлиентами(Форма)
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатуВЧекахККМ");
	ИспользоватьРассрочку = ПолучитьФункциональнуюОпцию("ИспользоватьРассрочкуПлатежаВЧекахККМ");
	ИспользоватьОплатуКредитом = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКредитом");
	
	Форма.Элементы.ПриемАванса.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.ДокументРасчета.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.ГруппаВидОплатыПредоплата.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.ГруппаВидОплатыВРассрочку.Видимость = ИспользоватьРассрочку;
	Форма.Элементы.ОплатаРассрочки.Видимость = ИспользоватьРассрочку;
	Форма.Элементы.ДокументРасчета.Заголовок = НСтр("ru='Зачет аванса'");
	Форма.Элементы.ГруппаВидОплатыКредитом.Видимость = ИспользоватьОплатуКредитом;
	
	ПрограммноСоздатьТаблицуДокументовРасчета(Форма);
	
КонецПроцедуры

Процедура ПрограммноСоздатьТаблицуДокументовРасчета(Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТаблицаПредоплаты") Тогда
		Возврат;
	КонецЕсли;
	
	КвалификаторЧисла15_2 = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
	КвалификаторЧисла10_4 = Новый КвалификаторыЧисла(10, 4, ДопустимыйЗнак.Неотрицательный);
	КвалификаторЧисла10_0 = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);
	
	Предоплаты = Новый ТаблицаЗначений;
	Предоплаты.Колонки.Добавить("Документ", Метаданные.ОпределяемыеТипы.ДокументРасчетаРМК.Тип);
	Предоплаты.Колонки.Добавить("Заказ", Метаданные.ОпределяемыеТипы.ЗаказПокупателяРМК.Тип);
	Предоплаты.Колонки.Добавить("СуммаРасчетов", Новый ОписаниеТипов("Число", КвалификаторЧисла15_2));
	Предоплаты.Колонки.Добавить("Курс", Новый ОписаниеТипов("Число", КвалификаторЧисла10_4));
	Предоплаты.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число", КвалификаторЧисла10_0));
	Предоплаты.Колонки.Добавить("СуммаПлатежа", Новый ОписаниеТипов("Число", КвалификаторЧисла15_2));
	
	ДобавляемыеРеквизиты = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("ТаблицаПредоплаты", Новый ОписаниеТипов("ТаблицаЗначений")); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Для Каждого Колонка Из Предоплаты.Колонки Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ТаблицаПредоплаты"));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ЗаполнитьПатент(ЧекККМ)
	
	ЧекККМ.Патент = НалогиУНФ.ПатентПоСкладу(ЧекККМ.Организация, ЧекККМ.СтруктурнаяЕдиница, ЧекККМ.Дата);
	Если Не ЗначениеЗаполнено(ЧекККМ.Патент) Тогда
		ЧекККМ.Патент = Справочники.Патенты.ПолучитьПатентПоУмолчанию(ЧекККМ.Организация, ЧекККМ.Дата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПатентВЧекеНаВозврат(ЧекККМВозврат)
	
	ПатентИзПродажи = ПолучитьДействующийПатентЧекаПродажи(ЧекККМВозврат.ЧекККМ, ЧекККМВозврат.Дата);
	Если ЗначениеЗаполнено(ПатентИзПродажи) Тогда
		ЧекККМВозврат.Патент = ПатентИзПродажи;
	ИначеЕсли ЧекККМВозврат.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
		ЗаполнитьПатент(ЧекККМВозврат);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДействующийПатентЧекаПродажи(ЧекККМСсылка, ДатаВозврата)
	
	ПатентИзПродажи = Справочники.Патенты.ПустаяСсылка();
	Если ЗначениеЗаполнено(ЧекККМСсылка) Тогда
		
		ЗапросПатента = Новый Запрос;
		ЗапросПатента.Текст =
		"ВЫБРАТЬ
		|	ДокЧекККМ.Патент КАК Патент
		|ИЗ
		|	Документ.ЧекККМ КАК ДокЧекККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Патенты КАК СпрПатенты
		|		ПО ДокЧекККМ.Патент = СпрПатенты.Ссылка
		|			И (ДокЧекККМ.Патент = СпрПатенты.Ссылка
		|				И КОНЕЦПЕРИОДА(СпрПатенты.ДатаОкончания, ДЕНЬ) >= &ДатаВозврата)
		|ГДЕ
		|	ДокЧекККМ.Ссылка = &ЧекККМ";
		ЗапросПатента.УстановитьПараметр("ЧекККМ", ЧекККМСсылка);
		ЗапросПатента.УстановитьПараметр("ДатаВозврата", ДатаВозврата);
		РезультатЗапроса = ЗапросПатента.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПатентИзПродажи = Выборка.Патент;
		КонецЕсли;
		
	КонецЕсли;
	Возврат ПатентИзПродажи;
	
КонецФункции

Процедура ЗаполнитьКэшРаспределенияПродаж(Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшРаспределенияПродаж") Тогда
		Возврат;
	КонецЕсли;
		
	КэшРаспределенияПродаж = Новый РеквизитФормы("КэшРаспределенияПродаж", Новый ОписаниеТипов("Неопределено"));
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(КэшРаспределенияПродаж);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	РабочееМесто = Форма.РабочееМесто;
	
	КэшРаспределенияПродаж = Новый Структура;
	КэшРаспределенияПродаж.Вставить("ГруппыКатегории", 0);
	КэшРаспределенияПродаж.Вставить("РаспределениеНоменклатуры", Новый Соответствие);
	КэшРаспределенияПродаж.Вставить("СистемаНалогообложения", Новый Соответствие);
	
	// формирование кэша распределения номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиРМКРаспределениеНоменклатуры.ГруппаНоменклатуры КАК ГруппаНоменклатуры,
	|	НастройкиРМКРаспределениеНоменклатуры.КассаККМ.Владелец КАК Организация,
	|	НастройкиРМКРаспределениеНоменклатуры.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
	|	НастройкиРМКРаспределениеНоменклатуры.Ссылка.ГруппыКатегории КАК ГруппыКатегории
	|ИЗ
	|	Справочник.НастройкиРМК.РаспределениеНоменклатуры КАК НастройкиРМКРаспределениеНоменклатуры
	|ГДЕ
	|	НастройкиРМКРаспределениеНоменклатуры.Ссылка.РабочееМесто = &РабочееМесто
	|	И НастройкиРМКРаспределениеНоменклатуры.Ссылка.ГруппыКатегории = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиРМКРаспределениеНоменклатуры.КатегорияНоменклатуры,
	|	НастройкиРМКРаспределениеНоменклатуры.КассаККМ.Владелец,
	|	НастройкиРМКРаспределениеНоменклатуры.СпециальныйНалоговыйРежим,
	|	НастройкиРМКРаспределениеНоменклатуры.Ссылка.ГруппыКатегории
	|ИЗ
	|	Справочник.НастройкиРМК.РаспределениеНоменклатуры КАК НастройкиРМКРаспределениеНоменклатуры
	|ГДЕ
	|	НастройкиРМКРаспределениеНоменклатуры.Ссылка.РабочееМесто = &РабочееМесто
	|	И НастройкиРМКРаспределениеНоменклатуры.Ссылка.ГруппыКатегории = 1";
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		СтруктураОрганизацияИСпецРежим = Новый Структура;
		СтруктураОрганизацияИСпецРежим.Вставить("Организация", ВыборкаЗапроса.Организация);
		СтруктураОрганизацияИСпецРежим.Вставить("СпециальныйНалоговыйРежим", ВыборкаЗапроса.СпециальныйНалоговыйРежим);
		
		КэшРаспределенияПродаж.Вставить("ГруппыКатегории", ВыборкаЗапроса.ГруппыКатегории);
		КэшРаспределенияПродаж.РаспределениеНоменклатуры.Вставить(ВыборкаЗапроса.ГруппаНоменклатуры,
			СтруктураОрганизацияИСпецРежим);
			
	КонецЦикла;
	
	Форма.КэшРаспределенияПродаж = КэшРаспределенияПродаж;
	
КонецПроцедуры

Функция СистемаНалогообложенияОрганизации(Организация, КэшРаспределенияПродаж = Неопределено, ТорговыйОбъект)
	
	Если КэшРаспределенияПродаж <> Неопределено
		И КэшРаспределенияПродаж.СистемаНалогообложения.Получить(Организация) <> Неопределено Тогда
		
		СистемаНалогообложения = КэшРаспределенияПродаж.СистемаНалогообложения.Получить(Организация);
		
	Иначе
		
		СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Организация, ТорговыйОбъект);
		СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(Организация, ТорговыйОбъект, ,
			СпециальныйНалоговыйРежим);
		
		Если КэшРаспределенияПродаж <> Неопределено Тогда
			КэшРаспределенияПродаж.СистемаНалогообложения.Вставить(Организация, СистемаНалогообложения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

Функция ОрганизацияИСпецРежим(КэшРаспределенияПродаж, ДанныеНоменклатуры)
	
	ГруппыКатегории = КэшРаспределенияПродаж.ГруппыКатегории;
	
	Если ГруппыКатегории = 1 Тогда
		ОрганизацияПродажи = КэшРаспределенияПродаж.РаспределениеНоменклатуры.Получить(ДанныеНоменклатуры.КатегорияНоменклатуры);
	ИначеЕсли ГруппыКатегории = 0 Тогда
		
		ОрганизацияПродажи = КэшРаспределенияПродаж.РаспределениеНоменклатуры.Получить(ДанныеНоменклатуры.Родитель);
		
		Если ОрганизацияПродажи = Неопределено 
			И ЗначениеЗаполнено(ДанныеНоменклатуры.Родитель) Тогда
			
			ОрганизацияПродажи = ОрганизацияИСпецРежим(КэшРаспределенияПродаж, ДанныеНоменклатуры.Родитель);
			
			Если ОрганизацияПродажи <> Неопределено Тогда
				КэшРаспределенияПродаж.РаспределениеНоменклатуры.Вставить(ДанныеНоменклатуры.Родитель, ОрганизацияПродажи);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОрганизацияПродажи;
	
КонецФункции

Процедура ОпределитьЗапускПодАдминистратором(Форма)
	
	Пользователь = Пользователи.ТекущийПользователь();
	ЕстьПрофильРМК = УправлениеДоступомУНФ.ЕстьПрофильРабочееМестоКассира(Пользователь);
	Форма.ЗапущеноПодАдминистратором = Не ЕстьПрофильРМК;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкиНДСДляЧекаКоррекции(Форма)
	
	СписокВыбора = Форма.Элементы.ТоварыСтавкаНДСПереключатель.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая), "20%");
	СписокВыбора.Добавить(Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Пониженная), "10%");
	СписокВыбора.Добавить(Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Нулевая), "0%");
	
КонецПроцедуры

Процедура НастроитьИспользованиеРежимаСкупки(Форма)
	Форма.Элементы.НастройкаРМКИспользоватьРежимСкупки.Видимость = Ложь;
КонецПроцедуры

Процедура НастроитьТочностьОкругления(Форма)
	
	СписокВыбора = Форма.Элементы.НастройкаРМКТочностьОкругления.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ПорядкиОкругления.Окр1, НСтр("ru = 'Без копеек'"));
	СписокВыбора.Добавить(Перечисления.ПорядкиОкругления.Окр0_01, НСтр("ru = 'С копейками'"));
	
	Если Не ЗначениеЗаполнено(Форма.НастройкаРМК.ТочностьОкругления) Тогда
		Форма.НастройкаРМК.ТочностьОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;
	
	ТекстПодсказки = НСтр("ru = 'Округление уменьшает сумму чека при оплате наличными.'");
	Форма.Элементы.НастройкаРМКТочностьОкругления.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	ИспользоватьАвтоматическиеСкидки = ИспользуютсяАвтоматическиеСкидки();
	
КонецПроцедуры

Процедура НастроитьВариантыЗаполнения(Форма)
	
	Форма.Элементы.НастройкаРМКВариантЗаполненияМестаРасчетов.Видимость = Истина;
	
	СписокВыбора = Форма.Элементы.НастройкаРМКВариантЗаполненияМестаРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru = 'Магазин'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'Магазин + Адрес'"));
	
	Если НЕ ЗначениеЗаполнено(Форма.НастройкаРМК.ВариантЗаполненияМестаРасчетов) Тогда
		Форма.НастройкаРМК.ВариантЗаполненияМестаРасчетов = 2;
	КонецЕсли;
	
	Форма.Элементы.НастройкаРМКВариантЗаполненияКассира.Видимость = Истина;
	
	СписокВыбора = Форма.Элементы.НастройкаРМКВариантЗаполненияКассира.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru = 'ФИО'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'ФИО + Должность'"));
	
	Если НЕ ЗначениеЗаполнено(Форма.НастройкаРМК.ВариантЗаполненияКассира) Тогда
		Форма.НастройкаРМК.ВариантЗаполненияКассира = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьГруппуРучнойВыборСкладаИЯчейки(Форма)
	
	Форма.Элементы.ГруппаРазрешитьВыборСклада.Видимость = Истина;
	Форма.Элементы.ГруппаРазрешитьВыборЯчейки.Видимость = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	
КонецПроцедуры

Функция ПолучитьПараметрыРасчетаСкидок(ФормаРМК)
	
	Объект = ФормаРМК.Объект;
	
	Товары = Объект.Товары.Выгрузить();
	Товары.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10,0)));
	Товары.Колонки.Добавить("КоличествоВБазовыхЕдиницах", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("Всего", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Если Не Товары.Колонки.Найти("КартинкаПроцентов") = Неопределено Тогда
		Товары.Колонки.Удалить("КартинкаПроцентов");
	КонецЕсли;
	
	Индекс = 1;
	Для Каждого СтрокаТовар Из Товары Цикл
		СтрокаТовар.КлючСвязи = Индекс;
		СтрокаТовар.ЕдиницаИзмерения = СтрокаТовар.Номенклатура.ЕдиницаИзмерения;
		СтрокаТовар.КоличествоВБазовыхЕдиницах = СтрокаТовар.КоличествоУпаковок;
		Индекс = Индекс + 1;
	КонецЦикла;

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Товары");

	ТекущаяДатаОбъекта = ТекущаяДатаСеанса();
	
	Если ФормаРМК.ЧекККМПродажа = Неопределено Тогда
		СкидкиНаценки = Документы.ЧекККМ.ПустаяСсылка().СкидкиНаценки;
	Иначе
		СкидкиНаценки = ФормаРМК.ЧекККМПродажа.СкидкиНаценки;
	КонецЕсли;
	
	Для Каждого СтрокаПромокода Из ФормаРМК.ТаблицаПримененныхПромокодов Цикл
		СтрокаПромокода.УсловиеПредоставленияСкидки = ПромокодыУНФ.УсловияПримененияПромокодов(СтрокаПромокода.Промокод).Получить(СтрокаПромокода.Промокод);
	КонецЦикла;
	ПримененныеПромокоды = ФормаРМК.ТаблицаПримененныхПромокодов.Выгрузить();
	Для Каждого СтрокаПромокода Из ПримененныеПромокоды Цикл
		СтрокаПромокода.УсловиеПредоставленияСкидки = ПромокодыУНФ.УсловияПримененияПромокодов(СтрокаПромокода.Промокод);
	КонецЦикла;
	Для Каждого СтрокаПромокода Из ПримененныеПромокоды Цикл
		СтрокаПромокода.УсловиеПредоставленияСкидки = ПромокодыУНФ.УсловияПримененияПромокодов(СтрокаПромокода.Промокод);
	КонецЦикла;
	ВыбранныеУправляемыеСкидки = ФормаРМК.ТаблицаВыбранныхУправляемыхСкидок.Выгрузить();
	ВыбранныеУправляемыеСкидки.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10,0)));
	Для Каждого УправляемаяСкидка Из ВыбранныеУправляемыеСкидки Цикл
		Если ЗначениеЗаполнено(УправляемаяСкидка.ИдентификаторСтроки) Тогда			
			СтрокиТоваровСкидки = Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", УправляемаяСкидка.ИдентификаторСтроки));
			Если СтрокиТоваровСкидки.Количество() Тогда
				УправляемаяСкидка.КлючСвязи = СтрокиТоваровСкидки[0].НомерСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВходныеПараметры = Новый Структура;
	ВходныеПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	ВходныеПараметры.Вставить("ПрименятьКОбъекту", Истина);
	ВходныеПараметры.Вставить("РабочееМесто", ФормаРМК.РабочееМесто);
	
	// Бонусная программа
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		РеквизитыБП = РаботаСБонусами.РеквизитыБонуснойПрограммы(Объект.ДисконтнаяКарта);
		Если ЗначениеЗаполнено(РеквизитыБП.БонуснаяПрограмма) Тогда
			ВходныеПараметры.Вставить("БонуснаяПрограмма", РеквизитыБП.БонуснаяПрограмма);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСкидок = Новый Структура;
	ПараметрыСкидок.Вставить("Дата", ТекущаяДатаОбъекта);
	ПараметрыСкидок.Вставить("Ссылка", Документы.ЧекККМ.ПустаяСсылка());
	ПараметрыСкидок.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыСкидок.Вставить("СтруктурнаяЕдиница", Объект.ТорговыйОбъект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ПроцентСкидкиПоДисконтнойКарте", 0);
	ПараметрыРасчета.Вставить("СкидкиРассчитаны",		Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки",
								СкидкиНаценкиСерверПереопределяемый.ПолучитьТаблицуСкидокНаценок(
								ПараметрыСкидок,
								ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Розница")));
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения",
								Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Регистратор",			Документы.ЧекККМ.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Ссылка",					Документы.ЧекККМ.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Магазин",				Объект.ТорговыйОбъект);
	ПараметрыРасчета.Вставить("ВидЦен",					ФормаРМК.РозничныйВидЦены);
	ПараметрыРасчета.Вставить("СкладПродажи",			Объект.КассаККМ.Подразделение);
	ПараметрыРасчета.Вставить("Товары",					Товары);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",		Объект.ЦенаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаДокумента",		Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",			Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",			ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("Контрагент",				Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",			СкидкиНаценкиСервер.БлижайшаяДатаЕжегодногоСобытия(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",		Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",		Объект.ДисконтнаяКарта.Владелец);
	ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления", Ложь);
	ПараметрыРасчета.Вставить("ВходныеПараметры",		ВходныеПараметры);
	ПараметрыРасчета.Вставить("ПромокодыСкидок",		ПримененныеПромокоды);
	ПараметрыРасчета.Вставить("ГраницаДокумента",		Новый Граница(ТекущаяДатаОбъекта, ВидГраницы.Исключая));
	ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", ВыбранныеУправляемыеСкидки);
	ПараметрыРасчета.Вставить("ДанныеДляПроизвольныхУсловий", Справочники.УсловияПредоставленияСкидокНаценок.ПодготовитьОписаниеОбъектаПроизвольныхУсловий(Объект, Товары));
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура СкопироватьСообщенияВТаблицу(ТабилицаИсточник, ТаблицаПриемник)
	
	Для каждого СтрокаСообщения Из ТабилицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		НоваяСтрока.ТекстСообщения = СтрокаСообщения.ТекстСообщения;
		НоваяСтрока.ПослеОформленияЧека = (СтрокаСообщения.СкидкаНаценка.МоментВыдачиСообщения = 
		Перечисления.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТекстПодсказкиНастройкиВыдачиНаличных(Форма)
	
	Строка1 = НСтр("ru = 'Выдача наличных при оплате картой на кассе. Доступна только по тем договорам эквайринга,'");
	Строка2 = НСтр("ru = 'где установлена опция ""Разносить и контролировать взаиморасчеты..."". Также, должны быть'");
	Строка3 = НСтр("ru = 'заполнены номер телефона и юридический адрес банка-эквайера и данные организации продажи:'");
	Строка4 = НСтр("ru = 'номер телефона, ИНН.'");
	
	ТекстПодсказки = СтрШаблон("%1 %2 %3 %4", Строка1, Строка2, Строка3, Строка4);
	
	Форма.Элементы.НастройкаРМКВыдаватьНаличныеНаКассе.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиИзЧекККМ(ЧекККМ, Форма, ЗаполнитьОплату = Ложь)
	
	Объект = Форма.Объект;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЧекККМЗапасы.Количество КАК Количество,
	|	ЧекККМЗапасы.Количество КАК КоличествоУпаковок,
	|	ЧекККМЗапасы.НеобходимостьВводаКодаМаркировки
	|		ИЛИ ЧекККМЗапасы.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаКодаМаркировки,
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЧекККМЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМЗапасы.Сумма КАК Сумма,
	|	ЧекККМЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЧекККМЗапасы.Цена * ЧекККМЗапасы.Количество КАК СуммаБезСкидки,
	|	ЧекККМЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЧекККМЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЧекККМЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница КАК ТорговыйОбъект,
	|	ЧекККМЗапасы.ЕдиницаИзмерения КАК Упаковка,
	|	ЧекККМЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СправочникЕдиницыИзмерения.Ссылка ЕСТЬ NULL
	|				ИЛИ СправочникЕдиницыИзмерения.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ СправочникЕдиницыИзмерения.Коэффициент
	|	КОНЕЦ КАК КоэффициентУпаковки,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМЗапасы.Цена КАК Цена,
	|	ЧекККМЗапасы.Штрихкод КАК Штрихкод,
	|	ЕСТЬNULL(СпрНоменклатура.ИспользоватьСерииНоменклатуры, ЛОЖЬ) КАК НеобходимостьВводаСерии,
	|	ЧекККМЗапасы.Партия КАК Партия,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеКоличество, 0) КАК ЧастичноеВыбытиеКоличество,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеВариантУчета, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеНоменклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЧастичноеВыбытиеНоменклатура,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеХарактеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЧастичноеВыбытиеХарактеристика,
	|	ЧекККМЗапасы.МРЦ КАК МРЦ,
	|	ЕСТЬNULL(СпрНоменклатура.Весовой, ЛОЖЬ) КАК Весовой,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.КатегорияНоменклатуры КАК ВидНоменклатуры,
	|	ЧекККМЗапасы.СуммаСкидкиНаценки + ЧекККМЗапасы.СуммаАвтоматическойСкидки + ЧекККМЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидокОбщая,
	|	ЕСТЬNULL(СпрНоменклатура.КодТРУ, """") КАК КодТРУ,
	|	ЕСТЬNULL(СпрНоменклатура.ИспользоватьПартии, ЛОЖЬ) КАК ИспользоватьПартии,
	|	ЕСТЬNULL(СпрНоменклатура.ПроверятьЗаполнениеПартий, ЛОЖЬ) КАК ПроверятьЗаполнениеПартий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрПолитикаУчетаСерий.ТипПолитики, ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьЗаполнениеСерий,
	|	СпрНоменклатура.ИспользоватьУникальныеСерии КАК УникальностьСерии,
	|	ВЫБОР
	|		КОГДА ЧекККМЗапасы.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоНабор,
	|	ЧекККМЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЧекККМЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНоменклатура.СпособРасчетаЦеныНабора, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЦенаНабораСводно,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНоменклатура.КодТРУ, """") = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозможнаОплатаЭС,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	НЕ НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие,
	|	ЧекККМЗапасы.Ячейка КАК Ячейка,
	|	ЧекККМЗапасы.Ответственный КАК Продавец,
	|	СпрНоменклатура.ВидПродукцииИС КАК ОсобенностьУчета,
	|	ЧекККМЗапасы.КлючСвязи КАК КлючСвязиЧекаПродажи,
	|	ЧекККМЗапасы.ПродажаПодарка КАК Подарок,
	|	ЧекККМЗапасы.ПродажаПодарка КАК ВыводитьПодарокВЧек
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СправочникЕдиницыИзмерения
	|		ПО ЧекККМЗапасы.ЕдиницаИзмерения = СправочникЕдиницыИзмерения.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолитикаУчетаСерий КАК СпрПолитикаУчетаСерий
	|			ПО СпрНоменклатура.ПолитикаУчетаСерий = СпрПолитикаУчетаСерий.Ссылка
	|		ПО ЧекККМЗапасы.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|		ПО ЧекККМЗапасы.Ссылка = ЧекККМАкцизныеМарки.Ссылка
	|			И ЧекККМЗапасы.КлючСвязи = ЧекККМАкцизныеМарки.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|			ПО НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ПО ЧекККМЗапасы.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &ЧекККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЧекККМЗапасы.КлючСвязи), 0) КАК КлючСвязиМаксимум
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &ЧекККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМСерииНоменклатуры.КлючСвязи КАК КлючСвязи,
	|	ЧекККМСерииНоменклатуры.Серия КАК Серия,
	|	ЧекККМСерииНоменклатуры.Количество КАК Количество
	|ИЗ
	|	Документ.ЧекККМ.СерииНоменклатуры КАК ЧекККМСерииНоменклатуры
	|ГДЕ
	|	ЧекККМСерииНоменклатуры.Ссылка = &ЧекККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ЧекККМСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ЧекККМСкидкиНаценки.Сумма КАК Сумма,
	|	ЧекККМСкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК ЧекККМСкидкиНаценки
	|ГДЕ
	|	ЧекККМСкидкиНаценки.Ссылка = &ЧекККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМБонусныеБаллыКНачислению.КлючСвязи КАК КлючСвязи,
	|	ЧекККМБонусныеБаллыКНачислению.СкидкаНаценка КАК СкидкаНаценка,
	|	ЧекККМБонусныеБаллыКНачислению.ДатаНачисления КАК ДатаНачисления,
	|	ЧекККМБонусныеБаллыКНачислению.ДатаСписания КАК ДатаСписания,
	|	ЧекККМБонусныеБаллыКНачислению.КоличествоБонусныхБаллов КАК КоличествоБонусныхБаллов
	|ИЗ
	|	Документ.ЧекККМ.БонусныеБаллыКНачислению КАК ЧекККМБонусныеБаллыКНачислению
	|ГДЕ
	|	ЧекККМБонусныеБаллыКНачислению.Ссылка = &ЧекККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПримененныеПромокоды.Промокод КАК Промокод,
	|	МАКСИМУМ(УсловияПредоставленияСкидок.Ссылка) КАК СкидкаНаценка,
	|	ПримененныеПромокоды.СкидкаПредоставлена КАК СкидкаПредоставлена,
	|	ПримененныеПромокоды.ЭтоАктивацияПромокода КАК ЭтоАктивацияПромокода
	|ИЗ
	|	Документ.ЧекККМ.ПримененныеПромокоды КАК ПримененныеПромокоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК УсловияПредоставленияСкидок
	|		ПО ПримененныеПромокоды.УсловиеПредоставленияСкидки = УсловияПредоставленияСкидок.УсловиеПредоставления
	|ГДЕ
	|	ПримененныеПромокоды.Ссылка = &ЧекККМ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПримененныеПромокоды.Промокод,
	|	ПримененныеПромокоды.СкидкаПредоставлена,
	|	ПримененныеПромокоды.ЭтоАктивацияПромокода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныеУправляемыеСкидки.КлючСвязи КАК КлючСвязи,
	|	ВыбранныеУправляемыеСкидки.СкидкаНаценка КАК СкидкаНаценка,
	|	""123456789012345678901234567890123456"" КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ЧекККМ.ВыбранныеУправляемыеСкидки КАК ВыбранныеУправляемыеСкидки
	|ГДЕ
	|	ВыбранныеУправляемыеСкидки.Ссылка = &ЧекККМ";
	
	Если ТипЗнч(ЧекККМ.Ссылка) = Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЧекККМЗапасы", "ЧекККМВозвратЗапасы");
	КонецЕсли;
	
	Если ТипЗнч(ЧекККМ.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЧекККМ.Запасы", "Документ.ЧекККМВозврат.Запасы");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаТоварыЧека = МассивРезультатов[0].Выгрузить();
	ТаблицаСерийНоменклатуры = МассивРезультатов[2].Выгрузить();
	ТаблицаСкидокНаценок = МассивРезультатов[3].Выгрузить();
	ТаблицаБонусов = МассивРезультатов[4].Выгрузить();
	ТаблицаПримененныхПромокодов = МассивРезультатов[5].Выгрузить();
	ТаблицаВыбранныхУправляемыхСкидок = МассивРезультатов[6].Выгрузить();
	
	КлючСвязиМаксимум = 0;
	ВыборкаМаксимальногоКлючаСвязи = МассивРезультатов[1].Выбрать();
	Если ВыборкаМаксимальногоКлючаСвязи.Следующий() Тогда
		КлючСвязиМаксимум = ВыборкаМаксимальногоКлючаСвязи.КлючСвязиМаксимум;
	КонецЕсли;
	ДанныеДляРаспределения = Новый Структура;
	ДанныеДляРаспределения.Вставить("КлючСвязиМаксимум", КлючСвязиМаксимум);
	ДанныеДляРаспределения.Вставить("ТаблицаСерийНоменклатуры", ТаблицаСерийНоменклатуры);
	ДанныеДляРаспределения.Вставить("ТаблицаСкидокНаценок", ТаблицаСкидокНаценок);
	ДанныеДляРаспределения.Вставить("ТаблицаБонусов", ТаблицаБонусов);
	
	Если Форма.ЭтоОплатаРассрочки Тогда
		ТаблицаТоварыЧека.ЗаполнитьЗначения(Ложь, 
			"НеобходимостьВводаКодаМаркировки, НеобходимостьВводаСерии, ПроверятьЗаполнениеСерий");
	КонецЕсли;
	
	ПеренестиТаблицуТоваровЧекаВТаблицуФормы(Форма, ТаблицаТоварыЧека, ДанныеДляРаспределения);
	
	Для Каждого СтрокаУправляемойСкидки Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		Если Не ЗначениеЗаполнено(СтрокаУправляемойСкидки.КлючСвязи) Тогда
			СтрокаУправляемойСкидки.ИдентификаторСтроки = "";
			Продолжить;
		КонецЕсли;
		СтруктураОтбора = Новый Структура("КлючСвязиЧекаПродажи", СтрокаУправляемойСкидки.КлючСвязи);
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если СтрокиТоваров.Количество() > 0 Тогда 
			СтрокаУправляемойСкидки.ИдентификаторСтроки = СтрокиТоваров[0].ИдентификаторСтроки; 
		Иначе
			СтрокаУправляемойСкидки.ИдентификаторСтроки = "";
		КонецЕсли;
	КонецЦикла;

	Если (Не ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации)) 
		Или ЗначениеЗаполнено(Объект.ЗаказПокупателя)
		Или ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		
		РасчитатьСуммуСкидокВСтроках(Объект.Товары);
		
	КонецЕсли;
	
	МаксимальныйНомерНабора = 0;
	Для Каждого ДобавленныйНабор Из ЧекККМ.ДобавленныеНаборы Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураНабора", ДобавленныйНабор.НоменклатураНабора);
		СтруктураПоиска.Вставить("ХарактеристикаНабора", ДобавленныйНабор.ХарактеристикаНабора);
		МассивТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если МассивТоваров.Количество() > 0 Тогда
			МаксимальныйНомерНабора = МаксимальныйНомерНабора + 1;
			ВНабореЕстьПострочныйТовар = Ложь;
			Для Каждого СтрокаТовара Из МассивТоваров Цикл
				Если СтрокаТовара.НеобходимостьВводаКодаМаркировки Или СтрокаТовара.НеобходимостьВводаСерии Тогда
					ВНабореЕстьПострочныйТовар = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаТовара Из МассивТоваров Цикл
				СтрокаТовара.НомерНабора = МаксимальныйНомерНабора;
				СтрокаТовара.КоличествоНаборов = ?(ВНабореЕстьПострочныйТовар, 1, ДобавленныйНабор.Количество);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ДанныеДляРаспределения.ТаблицаСкидокНаценок, Форма.ТаблицаСкидкиНаценки, Истина);
	ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ДанныеДляРаспределения.ТаблицаБонусов, Форма.ТаблицаБонусныеБаллы, Истина);
	ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ДанныеДляРаспределения.ТаблицаБонусов, Форма.ТаблицаБонусныеБаллыЧекаПродажи, Истина);
	ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ТаблицаПримененныхПромокодов, Форма.ТаблицаПримененныхПромокодов, Истина);
	ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ТаблицаВыбранныхУправляемыхСкидок, Форма.ТаблицаВыбранныхУправляемыхСкидок, Истина);
	
	Если ЗаполнитьОплату Тогда
		
		ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ЧекККМ.БезналичнаяОплата, Объект.Оплата, Истина);
		
		Форма.СуммаОплаченоНал = 0;
		СуммаНаличных = ЧекККМ.ПолученоНаличными;
		Если НЕ СуммаНаличных = 0 Тогда
			ОплатаНаличными = Объект.Оплата.Добавить();
			ОплатаНаличными.ВидОплаты = "Наличные";
			ОплатаНаличными.Сумма = СуммаНаличных;
			Форма.СуммаОплаченоНал = СуммаНаличных;
		КонецЕсли;
		
		Если Объект.Оплата.Количество() > 0 И ЗначениеЗаполнено(Форма.ОтложенныйЧек)Тогда
			Для Каждого Оплата Из Объект.Оплата Цикл
				Если Оплата.ВидОплаты = "Наличные" Тогда
					Форма.СуммаОплаченоНал = Оплата.Сумма;
				ИначеЕсли Оплата.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
					Форма.СуммаОплаченоБН = Оплата.Сумма;
				ИначеЕсли Оплата.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Кредит Тогда
					Форма.СуммаОплаченоБезнал = Оплата.Сумма;
				ИначеЕсли Оплата.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку Тогда
					Форма.СуммаОплаченоВРассрочку = Оплата.Сумма; 
				ИначеЕсли Оплата.ВидОплаты = Перечисления.ВидыБезналичныхОплат.СБП Тогда
					Форма.СуммаОплаченоСБП = Оплата.Сумма;
				ИначеЕсли Оплата.ВидОплаты = Перечисления.ВидыБезналичныхОплат.СертификатНСПК Тогда
					Форма.СуммаОплаченоСертификатамиНСПК = Оплата.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчитатьСуммуСкидокВСтроках(ТабличнаяЧастьТовары)
	
	Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
		ИтоговаяСумма = Строка.Сумма + Строка.СуммаСкидкиОплатыБонусом + Строка.СуммаАвтоматическойСкидки + Строка.СуммаСкидкиНаценки;
		ИтоговаяЦенаПродажи = Окр(ИтоговаяСумма / Строка.Количество, 2, РежимОкругления.Окр15как10);

		Строка.Сумма = ИтоговаяСумма - Строка.СуммаСкидкиОплатыБонусом - Строка.СуммаАвтоматическойСкидки - Строка.СуммаСкидкиНаценки;
		Строка.СуммаБезСкидки = ИтоговаяСумма;
		Строка.СуммаАвтоматическойСкидкиЧекаПродажи = Строка.СуммаАвтоматическойСкидки;
		Строка.СуммаСкидкиНаценкиЧекаПродажи = Строка.СуммаСкидкиНаценки;
		Строка.СуммаСкидкиОплатыБонусомЧекаПродажи = Строка.СуммаСкидкиОплатыБонусом;
		Строка.СуммаСкидокОбщая = Строка.СуммаСкидкиОплатыБонусом + Строка.СуммаАвтоматическойСкидки + Строка.СуммаСкидкиНаценки;
		Строка.СуммаБезСкидкиЧекаПродажи = Строка.СуммаБезСкидки;
		Строка.Цена = ИтоговаяЦенаПродажи;
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьГруппуSMSПодтверждения(Форма)
	
	Возврат;
	
КонецПроцедуры

Процедура НастроитьГруппуШаблоныШтрихкодов(Форма)
	
	Форма.Элементы.ГруппаШаблоныШтрихкодов.Видимость = Ложь;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВозвратаПоЧекуККМ(ТекущийЧек, Отказ, ТекстОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТекущихТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТекущихТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТекущихТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТекущихТоваров.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаТекущихТоваров
	|ИЗ
	|	&ТаблицаТекущихТоваров КАК ТаблицаТекущихТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТекущихТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТекущихТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТекущихТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТекущихТоваров.Количество КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоПродажи,
	|	0 КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ТаблицаТекущихТоваров КАК ТаблицаТекущихТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратЗапасы.Номенклатура,
	|	ЧекККМВозвратЗапасы.Характеристика,
	|	ЧекККМВозвратЗапасы.ЕдиницаИзмерения,
	|	0,
	|	0,
	|	ЧекККМВозвратЗапасы.Количество
	|ИЗ
	|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
	|ГДЕ
	|	ЧекККМВозвратЗапасы.Ссылка.ЧекККМ = &ЧекПродажи
	|	И НЕ ЧекККМВозвратЗапасы.Ссылка = &ТекущийЧекНаВозврат
	|	И ЧекККМВозвратЗапасы.Ссылка.Проведен
	|	И НЕ ЧекККМВозвратЗапасы.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.Номенклатура,
	|	ЧекККМЗапасы.Характеристика,
	|	ЧекККМЗапасы.ЕдиницаИзмерения,
	|	0,
	|	ЧекККМЗапасы.Количество,
	|	0
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка = &ЧекПродажи
	|	И НЕ ЧекККМЗапасы.Ссылка.ПометкаУдаления
	|	И ЧекККМЗапасы.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ТаблицаТовары.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаТовары.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаТовары.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего КАК КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоПродажи КАК КоличествоПродажи,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого КАК КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	Запрос.УстановитьПараметр("ТекущийЧекНаВозврат", ТекущийЧек.Ссылка);
	Запрос.УстановитьПараметр("ЧекПродажи", ТекущийЧек.ЧекККМ);
	Запрос.УстановитьПараметр("ТаблицаТекущихТоваров", ТекущийЧек.Запасы.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отказ = Истина;
		ШаблонТекстаОшибки = НСтр("ru = 'Попытка вернуть
										|%1 %2
										|в количестве %4 %3.
										|
										|Было продано: %5 %3.
										|Ранее возвращено: %6 %3.'");
		
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки,
			Выборка.Номенклатура,
			Выборка.Характеристика,
			Выборка.ЕдиницаИзмерения,
			Выборка.КоличествоВозвратаТекущего,
			Выборка.КоличествоПродажи,
			Выборка.КоличествоВозвратаПрошлого);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОстатокАвансаПоЧеку(ЧекККМ)
	
	Если Не ЧекККМ.Контрагент.ВестиРасчетыПоДокументам Тогда
		ОстатокАванса = ЧекККМ.СуммаДокумента;
		Возврат ОстатокАванса;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	-РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			,
	|			Документ = &Документ
	|				И Договор = &Договор
	|				И Контрагент = &Контрагент
	|				И Организация = &Организация
	|				И ТипРасчетов = &ТипРасчетаАванс) КАК РасчетыСПокупателямиОстатки");
	
	Запрос.УстановитьПараметр("Документ", ЧекККМ);
	Запрос.УстановитьПараметр("Договор", ЧекККМ.Договор);
	Запрос.УстановитьПараметр("Контрагент", ЧекККМ.Контрагент);
	Запрос.УстановитьПараметр("Организация", ЧекККМ.Организация);
	Запрос.УстановитьПараметр("ТипРасчетаАванс", Перечисления.ТипыРасчетов.Аванс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОстатокАванса = 0;
	Если Выборка.Следующий() Тогда
		ОстатокАванса = Макс(Выборка.СуммаОстаток, 0);
	КонецЕсли;
	
	Возврат ОстатокАванса;
	
КонецФункции

// Формирование текста запроса динамического списка для списка товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьДинамическийСписокТоваров(Форма)
	
	Если ИспользоватьХарактеристикиНоменклатуры() Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТипыНоменклатуры.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТипыНоменклатуры
		|ИЗ
		|	Перечисление.ТипыНоменклатуры КАК ТипыНоменклатуры
		|ГДЕ
		|	ТипыНоменклатуры.Ссылка В(&МассивТиповНоменклатуры)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Наименование КАК Наименование,
		|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Код КАК Код,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ВЫБОР
		|		КОГДА НЕ СпрНоменклатура.ВидАлкогольнойПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
		|				И СпрНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
		|		ИНАЧЕ СпрНоменклатура.ВидПродукцииИС
		|	КОНЕЦ КАК ОсобенностьУчета,
		|	СпрНоменклатура.ЭтоНабор
		|		ИЛИ СпрНоменклатура.ЭтоАгентскаяУслуга КАК ЭтоНабор,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СпрНоменклатура.Номинал КАК Номинал
		|ПОМЕСТИТЬ ТаблицаНоменклатура
		|ИЗ
		|	ТипыНоменклатуры КАК ТипыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТипыНоменклатуры.Ссылка = СпрНоменклатура.ТипНоменклатуры
		|ГДЕ
		|	НЕ СпрНоменклатура.ПометкаУдаления
		|	И НЕ СпрНоменклатура.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ТаблицаНоменклатура.Наименование КАК Наименование,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК Период,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦен,
		|	ТаблицаНоменклатура.Код КАК Код,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	0 КАК Номинал,
		|	ТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ПОМЕСТИТЬ ТаблицаМаксПериодЦен
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ЦеныНоменклатуры.Период <= &Дата
		|	И ЦеныНоменклатуры.ВидЦен = &ВидЦены
		|	И ЦеныНоменклатуры.Актуальность
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ЕСТЬNULL(ЦеныНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)),
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.Наименование,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	&Дата,
		|	&ВидЦены,
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	0,
		|	ТаблицаНоменклатура.ТипНоменклатуры
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ЭтоНабор
		|	И ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.Наименование,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	&Дата,
		|	&ВидЦены,
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.Номинал,
		|	ТаблицаНоменклатура.ТипНоменклатуры
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	ТаблицаНоменклатура.Номинал,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидЦен,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаМаксПериодЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаМаксПериодЦен.Наименование КАК Наименование,
		|	ТаблицаМаксПериодЦен.Характеристика КАК Характеристика,
		|	ТаблицаМаксПериодЦен.Упаковка КАК Упаковка,
		|	ТаблицаМаксПериодЦен.Период КАК Период,
		|	ТаблицаМаксПериодЦен.ВидЦен КАК ВидЦен,
		|	ТаблицаМаксПериодЦен.Код КАК Код,
		|	ТаблицаМаксПериодЦен.Артикул КАК Артикул,
		|	ТаблицаМаксПериодЦен.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ТаблицаМаксПериодЦен.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаМаксПериодЦен.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ТаблицаМаксПериодЦен.Номинал
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатуры.ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ТОГДА ЦеныНоменклатуры.ВалютаЦены
		|		ИНАЧЕ ЦеныНоменклатуры.ВидЦен.ВалютаЦены
		|	КОНЕЦ КАК ВалютаЦены
		|ПОМЕСТИТЬ ТаблицаИтоговыхЦен
		|ИЗ
		|	ТаблицаМаксПериодЦен КАК ТаблицаМаксПериодЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаМаксПериодЦен.Период = ЦеныНоменклатуры.Период
		|			И ТаблицаМаксПериодЦен.ВидЦен = ЦеныНоменклатуры.ВидЦен
		|			И ТаблицаМаксПериодЦен.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И ТаблицаМаксПериодЦен.Характеристика = ЦеныНоменклатуры.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Упаковка,
		|	ВалютаЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Курсы.Валюта КАК Валюта,
		|	Курсы.Курс КАК Курс,
		|	Курсы.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(
		|			&Дата,
		|			Валюта В
		|				(ВЫБРАТЬ
		|					Таблица.ВалютаЦены
		|				ИЗ
		|					ТаблицаИтоговыхЦен КАК Таблица)) КАК Курсы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИтоговыхЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаИтоговыхЦен.Наименование КАК Наименование,
		|	ТаблицаИтоговыхЦен.Характеристика КАК Характеристика,
		|	ТаблицаИтоговыхЦен.Упаковка КАК Упаковка,
		|	ТаблицаИтоговыхЦен.Период КАК Период,
		|	ТаблицаИтоговыхЦен.ВидЦен КАК ВидЦен,
		|	ТаблицаИтоговыхЦен.Код КАК Код,
		|	ТаблицаИтоговыхЦен.Артикул КАК Артикул,
		|	ТаблицаИтоговыхЦен.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ТаблицаИтоговыхЦен.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаИтоговыхЦен.Цена * ЕСТЬNULL(КурсыВалют.Курс, 1) * ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Цена,
		|	ВЫБОР
		|		КОГДА ТаблицаИтоговыхЦен.Упаковка ССЫЛКА Справочник.ЕдиницыИзмерения
		|			ТОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1)
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки
		|ПОМЕСТИТЬ ТаблицаКоэффициентыУпаковок
		|ИЗ
		|	ТаблицаИтоговыхЦен КАК ТаблицаИтоговыхЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ТаблицаИтоговыхЦен.Упаковка = ЕдиницыИзмерения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ТаблицаИтоговыхЦен.ВалютаЦены = КурсыВалют.Валюта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Склад,
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
		|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
		|	И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Склад
		|ПОМЕСТИТЬ ТаблицаСклады
		|ИЗ
		|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
		|ГДЕ
		|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
		|ГДЕ
		|	(ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
		|			ИЛИ ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ОстаткиТоваров.Количество) КАК Количество,
		|	СУММА(ОстаткиТоваров.Резерв) КАК Резерв,
		|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваров.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТаблицаОстатки
		|ИЗ
		|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
		|ГДЕ
		|	ОстаткиТоваров.СтруктурнаяЕдиница В
		|			(ВЫБРАТЬ
		|				ТаблицаСклады.Склад КАК Склад
		|			ИЗ
		|				ТаблицаСклады КАК ТаблицаСклады)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКоэффициентыУпаковок.Номенклатура КАК Номенклатура,
		|	ТаблицаКоэффициентыУпаковок.Наименование КАК Наименование,
		|	ТаблицаКоэффициентыУпаковок.Характеристика КАК Характеристика,
		|	ТаблицаКоэффициентыУпаковок.Упаковка КАК Упаковка,
		|	ТаблицаКоэффициентыУпаковок.Период КАК Период,
		|	ТаблицаКоэффициентыУпаковок.Цена КАК Цена,
		|	ТаблицаКоэффициентыУпаковок.Код КАК Код,
		|	ТаблицаКоэффициентыУпаковок.Артикул КАК Артикул,
		|	ТаблицаКоэффициентыУпаковок.КатегорияНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаКоэффициентыУпаковок.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ЕСТЬNULL(ТаблицаОстатки.Резерв, 0) / ТаблицаКоэффициентыУпаковок.КоэффициентУпаковки КАК ВРезерве,
		|	ЕСТЬNULL(ТаблицаОстатки.Количество, 0) / ТаблицаКоэффициентыУпаковок.КоэффициентУпаковки КАК Доступно
		|ИЗ
		|	ТаблицаКоэффициентыУпаковок КАК ТаблицаКоэффициентыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
		|		ПО ТаблицаКоэффициентыУпаковок.Номенклатура = ТаблицаОстатки.Номенклатура
		|			И ТаблицаКоэффициентыУпаковок.Характеристика = ТаблицаОстатки.Характеристика";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТипыНоменклатуры.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТипыНоменклатуры
		|ИЗ
		|	Перечисление.ТипыНоменклатуры КАК ТипыНоменклатуры
		|ГДЕ
		|	ТипыНоменклатуры.Ссылка В(&МассивТиповНоменклатуры)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Наименование КАК Наименование,
		|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Код КАК Код,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ВЫБОР
		|		КОГДА НЕ СпрНоменклатура.ВидАлкогольнойПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
		|				И СпрНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
		|		ИНАЧЕ СпрНоменклатура.ВидПродукцииИС
		|	КОНЕЦ КАК ОсобенностьУчета,
		|	СпрНоменклатура.ЭтоНабор
		|		ИЛИ СпрНоменклатура.ЭтоАгентскаяУслуга КАК ЭтоНабор,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СпрНоменклатура.Номинал КАК Номинал
		|ПОМЕСТИТЬ ТаблицаНоменклатура
		|ИЗ
		|	ТипыНоменклатуры КАК ТипыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО ТипыНоменклатуры.Ссылка = СпрНоменклатура.ТипНоменклатуры
		|ГДЕ
		|	НЕ СпрНоменклатура.ПометкаУдаления
		|	И НЕ СпрНоменклатура.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ТаблицаНоменклатура.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК Период,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦен,
		|	ТаблицаНоменклатура.Код КАК Код,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	0 КАК Номинал,
		|	ТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ПОМЕСТИТЬ ТаблицаМаксПериодЦен
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ЦеныНоменклатуры.Период <= &Дата
		|	И ЦеныНоменклатуры.ВидЦен = &ВидЦены
		|	И ЦеныНоменклатуры.Актуальность
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)),
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.Наименование,
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	&Дата,
		|	&ВидЦены,
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	0,
		|	ТаблицаНоменклатура.ТипНоменклатуры
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ЭтоНабор
		|	И ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.Наименование,
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	&Дата,
		|	&ВидЦены,
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.Номинал,
		|	ТаблицаНоменклатура.ТипНоменклатуры
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.КатегорияНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	ТаблицаНоменклатура.Номинал,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидЦен,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаМаксПериодЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаМаксПериодЦен.Наименование КАК Наименование,
		|	ТаблицаМаксПериодЦен.Упаковка КАК Упаковка,
		|	ТаблицаМаксПериодЦен.Период КАК Период,
		|	ТаблицаМаксПериодЦен.ВидЦен КАК ВидЦен,
		|	ТаблицаМаксПериодЦен.Код КАК Код,
		|	ТаблицаМаксПериодЦен.Артикул КАК Артикул,
		|	ТаблицаМаксПериодЦен.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ТаблицаМаксПериодЦен.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаМаксПериодЦен.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ТаблицаМаксПериодЦен.Номинал
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатуры.ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ТОГДА ЦеныНоменклатуры.ВалютаЦены
		|		ИНАЧЕ ЦеныНоменклатуры.ВидЦен.ВалютаЦены
		|	КОНЕЦ КАК ВалютаЦены
		|ПОМЕСТИТЬ ТаблицаИтоговыхЦен
		|ИЗ
		|	ТаблицаМаксПериодЦен КАК ТаблицаМаксПериодЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаМаксПериодЦен.Период = ЦеныНоменклатуры.Период
		|			И ТаблицаМаксПериодЦен.ВидЦен = ЦеныНоменклатуры.ВидЦен
		|			И ТаблицаМаксПериодЦен.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Упаковка,
		|	ВалютаЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Курсы.Валюта КАК Валюта,
		|	Курсы.Курс КАК Курс,
		|	Курсы.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(
		|			&Дата,
		|			Валюта В
		|				(ВЫБРАТЬ
		|					Таблица.ВалютаЦены
		|				ИЗ
		|					ТаблицаИтоговыхЦен КАК Таблица)) КАК Курсы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИтоговыхЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаИтоговыхЦен.Наименование КАК Наименование,
		|	ТаблицаИтоговыхЦен.Упаковка КАК Упаковка,
		|	ТаблицаИтоговыхЦен.Период КАК Период,
		|	ТаблицаИтоговыхЦен.ВидЦен КАК ВидЦен,
		|	ТаблицаИтоговыхЦен.Код КАК Код,
		|	ТаблицаИтоговыхЦен.Артикул КАК Артикул,
		|	ТаблицаИтоговыхЦен.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ТаблицаИтоговыхЦен.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаИтоговыхЦен.Цена * ЕСТЬNULL(КурсыВалют.Курс, 1) * ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Цена,
		|	ВЫБОР
		|		КОГДА ТаблицаИтоговыхЦен.Упаковка ССЫЛКА Справочник.ЕдиницыИзмерения
		|			ТОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1)
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки
		|ПОМЕСТИТЬ ТаблицаКоэффициентыУпаковок
		|ИЗ
		|	ТаблицаИтоговыхЦен КАК ТаблицаИтоговыхЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ТаблицаИтоговыхЦен.Упаковка = ЕдиницыИзмерения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ТаблицаИтоговыхЦен.ВалютаЦены = КурсыВалют.Валюта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Склад,
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
		|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
		|	И СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Склад
		|ПОМЕСТИТЬ ТаблицаСклады
		|ИЗ
		|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
		|ГДЕ
		|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка
		|ИЗ
		|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
		|ГДЕ
		|	(ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
		|			ИЛИ ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ОстаткиТоваров.Количество) КАК Количество,
		|	СУММА(ОстаткиТоваров.Резерв) КАК Резерв,
		|	ОстаткиТоваров.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаОстатки
		|ИЗ
		|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
		|ГДЕ
		|	ОстаткиТоваров.СтруктурнаяЕдиница В
		|			(ВЫБРАТЬ
		|				ТаблицаСклады.Склад КАК Склад
		|			ИЗ
		|				ТаблицаСклады КАК ТаблицаСклады)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКоэффициентыУпаковок.Номенклатура КАК Номенклатура,
		|	ТаблицаКоэффициентыУпаковок.Наименование КАК Наименование,
		|	ТаблицаКоэффициентыУпаковок.Упаковка КАК Упаковка,
		|	ТаблицаКоэффициентыУпаковок.Период КАК Период,
		|	ТаблицаКоэффициентыУпаковок.Код КАК Код,
		|	ТаблицаКоэффициентыУпаковок.Артикул КАК Артикул,
		|	ТаблицаКоэффициентыУпаковок.КатегорияНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаКоэффициентыУпаковок.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаКоэффициентыУпаковок.Цена КАК Цена,
		|	ЕСТЬNULL(ТаблицаОстатки.Резерв, 0) / ТаблицаКоэффициентыУпаковок.КоэффициентУпаковки КАК ВРезерве,
		|	ЕСТЬNULL(ТаблицаОстатки.Количество, 0) / ТаблицаКоэффициентыУпаковок.КоэффициентУпаковки КАК Доступно
		|ИЗ
		|	ТаблицаКоэффициентыУпаковок КАК ТаблицаКоэффициентыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
		|		ПО ТаблицаКоэффициентыУпаковок.Номенклатура = ТаблицаОстатки.Номенклатура";
		
	КонецЕсли;
	
	Форма.СписокТоваров.ТекстЗапроса = ТекстЗапроса;
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("ВидЦены", Форма.РозничныйВидЦены);
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("ТорговыйОбъект", Форма.Объект.ТорговыйОбъект);
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("Дата", ТекущаяДатаСеанса());
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("МассивТиповНоменклатуры", МассивТиповНоменклатуры);
	
	Если Форма.Элементы.Найти("СписокТоваровДоступно") = Неопределено Тогда 
		НоваяКолонка = Форма.Элементы.Добавить("СписокТоваровДоступно", Тип("ПолеФормы"), Форма.Элементы.СписокТоваров);
		НоваяКолонка.Вид = ВидПоляФормы.ПолеНадписи;
		НоваяКолонка.ПутьКДанным = "СписокТоваров.Доступно";
		НоваяКолонка.Заголовок = НСтр("ru = 'Доступно'");
		НоваяКолонка.ШрифтЗаголовка = ШрифтыСтиля.КрупныйШрифтТекста;
		НоваяКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		НоваяКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
		НоваяКолонка.Формат = "ЧДЦ=3";
	КонецЕсли;
	
	Если Форма.Элементы.Найти("СписокТоваровВРезерве") = Неопределено Тогда 
		НоваяКолонка = Форма.Элементы.Добавить("СписокТоваровВРезерве", Тип("ПолеФормы"), Форма.Элементы.СписокТоваров);
		НоваяКолонка.Вид = ВидПоляФормы.ПолеНадписи;
		НоваяКолонка.ПутьКДанным = "СписокТоваров.ВРезерве";
		НоваяКолонка.Заголовок = НСтр("ru = 'В резерве'");
		НоваяКолонка.ШрифтЗаголовка = ШрифтыСтиля.КрупныйШрифтТекста;
		НоваяКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		НоваяКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
		НоваяКолонка.Формат = "ЧДЦ=3";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСкладДляРучногоВыбора(ТекущиеДанные) Экспорт
	
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	НастройкаРМК = РабочееМестоКассираВызовСервера.ПолучитьНастройкуРМК(ТекущееРабочееМесто);
	Если НастройкаРМК = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСкладовВНастройке = НастройкаРМК.СтруктурныеЕдиницы.ВыгрузитьКолонку("СтруктурнаяЕдиница");
	Если МассивСкладовВНастройке.Количество() = 0 Тогда
		Если ТипЗнч(ТекущиеДанные) = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаТаблицы Из ТекущиеДанные Цикл
				СтрокаТаблицы.ТорговыйОбъект = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
				СтрокаТаблицы.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			КонецЦикла;
		ИначеЕсли ТипЗнч(ТекущиеДанные) = Тип("Структура") Тогда
			ТекущиеДанные.ТорговыйОбъект = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			ТекущиеДанные.Ячейка = Справочники.Ячейки.ПустаяСсылка();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТаблицы Из ТекущиеДанные Цикл
			ТекущийСклад = СтрокаТаблицы.ТорговыйОбъект;
			Если МассивСкладовВНастройке.Найти(ТекущийСклад) = Неопределено Тогда
				СтрокаТаблицы.ТорговыйОбъект = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
				СтрокаТаблицы.Ячейка = Справочники.Ячейки.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТекущиеДанные) = Тип("Структура") Тогда
		ТекущийСклад = ТекущиеДанные.ТорговыйОбъект;
		Если МассивСкладовВНастройке.Найти(ТекущийСклад) = Неопределено Тогда
			ТекущиеДанные.ТорговыйОбъект = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			ТекущиеДанные.Ячейка = Справочники.Ячейки.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоложениеРеквизитов(ЧекККМ, ТоварыИОплаты, ИспользоватьВыборСклада)
	
	ЧекККМ.ПоложениеОтветственный = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ЧекККМ.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ЧекККМ.ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки(
		"ПоложениеЗаказаПокупателяВДокументахОтгрузки");
	Если Не ЗначениеЗаполнено(ЧекККМ.ПоложениеЗаказаПокупателя) Тогда
		ЧекККМ.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	
	ЕстьСкладВТЧ = Ложь;
	ЕстьПродавецВТЧ = Ложь;
	Для Каждого СтрокаТовары Из ТоварыИОплаты.Товары Цикл
		Если ИспользоватьВыборСклада И ЗначениеЗаполнено(СтрокаТовары.ТорговыйОбъект) Тогда
			ЕстьСкладВТЧ = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.Продавец) Тогда
			ЕстьПродавецВТЧ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСкладВТЧ Тогда
		ЧекККМ.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	КонецЕсли;
	Если ЕстьПродавецВТЧ Тогда
		ЧекККМ.ПоложениеОтветственный = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сведения об агенте, выдающем наличные средства
//
// Параметры:
//  ИсходныеДанные - Структура:
//		* ОборудованиеТерминалаВыдачи - Тип - пояснение
//		* ОрганизацияВыдачи - Тип - пояснение
//
// Возвращаемое значение:
//  Результат - Структура - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеАгента()
//
Функция ДанныеАгентаВыдачиНаличных(ИсходныеДанные)
	
	Результат = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеАгента();
	
	ПодключаемоеОборудованиеТерминала = ИсходныеДанные.ОборудованиеТерминалаВыдачи;
	ОрганизацияВыдачи = ИсходныеДанные.ОрганизацияВыдачи;

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.ИНН КАК ИНН,
	|	ЕСТЬNULL(ЮридическийАдресЭквайрера.Представление, """") КАК Адрес,
	|	Контрагенты.Наименование КАК Наименование,
	|	ЕСТЬNULL(НомерТелефонаЭквайрера.Представление, """") КАК Телефон
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОплаты КАК ЭквайринговыеТерминалы
	|		ПО Контрагенты.Ссылка = ЭквайринговыеТерминалы.Эквайрер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ЮридическийАдресЭквайрера
	|		ПО Контрагенты.Ссылка = ЮридическийАдресЭквайрера.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК НомерТелефонаЭквайрера
	|		ПО Контрагенты.Ссылка = НомерТелефонаЭквайрера.Ссылка
	|ГДЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование = &Оборудование
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НомерТелефонаЭквайрера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
	|	И ЮридическийАдресЭквайрера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)");
	
	Запрос.УстановитьПараметр("Оборудование", ПодключаемоеОборудованиеТерминала);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат.ОператорПеревода, Выборка);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Телефон
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &ОрганизацияВыдачи
	|	И НЕ ОрганизацииКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|	И ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)";
	Запрос.УстановитьПараметр("ОрганизацияВыдачи", ОрганизацияВыдачи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат.ПлатежныйАгент, Выборка);
	КонецЕсли;
	
	Результат.ПлатежныйАгент.Операция = НСтр("ru = 'Выдача наличных'");
	
	Возврат Результат;

КонецФункции

// Заполняет сведения об поставщике услуги выдачи наличных
//
// Параметры:
//  ИсходныеДанные - Структура:
// 	* ОрганизацияВыдачи - Тип - пояснение
//
// Возвращаемое значение:
//  Результат - Структура - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеПоставщика()
//
Функция ДанныеПоставщикаУслугиВыдачиНаличных(ИсходныеДанные)

	Результат = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеПоставщика();
	ОрганизацияВыдачи = ИсходныеДанные.ОрганизацияВыдачи;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕСТЬNULL(ОрганизацииКонтактнаяИнформация.Представление, """") КАК Телефон,
	|	Организации.ИНН КАК ИНН,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|		ПО Организации.Ссылка = ОрганизацииКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &ОрганизацияВыдачи
	|	И НЕ Организации.ПометкаУдаления
	|	И ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)");
	
	Запрос.УстановитьПараметр("ОрганизацияВыдачи", ОрганизацияВыдачи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Формирует чек выдачи по данным чека продажи 
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - документ, на основании которого заполняется чек выдачи.
//  СуммаВыдачи - Число - Сумма выдаваемых наличных.
//
// Возвращаемое значение:
//  СсылкаНаЧекВыдачи - ДокументСсылка.ЧекККМ.
//
Функция ЧекВыдачиНаличных(ЧекПродажи, СуммаВыдачи, Отказ, ТекстОшибки)
	
	СсылкаНаЧекВыдачи = ОбщегоНазначения.ПредопределенныйЭлемент("Документ.ЧекККМ.ПустаяСсылка");

	ЧекВыдачи = Документы.ЧекККМ.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ЧекВыдачи, ЧекПродажи);
	ЧекВыдачи.ВыдачаНаличных = Истина;
	ЧекВыдачи.Номер = "";
	ЧекВыдачи.СуммаДокумента = СуммаВыдачи;
	ЧекВыдачи.НомерЧекаККМ = ЧекВыдачи.НомерЧекаККМ + 1;
	ЧекВыдачи.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС");
	ЧекВыдачи.НДСВключатьВСтоимость = Ложь;
	ЧекВыдачи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
	ЧекВыдачи.БезналичнаяОплата.Очистить();
	СтрокаВыдачиНаличных = ЧекВыдачи.БезналичнаяОплата.Добавить();
	СтрокаВыдачиНаличных.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ВыдачаНаличных");
	СтрокаВыдачиНаличных.Сумма = СуммаВыдачи;
	
	Попытка
		ЧекВыдачи.Заблокировать();
	Исключение

		ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,
			ЧекВыдачи,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
		
	КонецПопытки;

	Если Не Отказ Тогда
		
		Попытка
			
			ЧекВыдачи.Записать(РежимЗаписи());
			СсылкаНаЧекВыдачи = ЧекВыдачи.Ссылка;
			
		Исключение
			
			Отказ = Истина;
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись чека выдачи наличных перед пробитием на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
				
		КонецПопытки;
			
	КонецЕсли;
	
	Если Отказ Тогда
		Попытка 
			ЧекПродажиОбъект = ЧекПродажи.ПолучитьОбъект();
			ЧекПродажиОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ТоварЗарезервирован");
			ЧекПродажиОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка отмены проведения чека продажи.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			
			КонецПопытки;
			
	КонецЕсли;
		
	Возврат СсылкаНаЧекВыдачи;
	
КонецФункции

Процедура АктуализироватьВидимостьЭлементовНастроек(Форма)

	ЭлементыФормы = Форма.Элементы;
	ЭлементыФормы.НастройкаРМКЗавершатьСессиюКассираПослеПродажи.Видимость = Истина;
	ЭлементыФормы.КонвертироватьНастройкиСтарогоРМК.Видимость = Истина;
	ЭлементыФормы.ГруппаРезервноеКопированиеИВосстановление.Видимость = Ложь;
	
КонецПроцедуры

Процедура НастроитьВидимостьВыбораМагазина(Форма)
	
	Форма.Элементы.ГруппаВыборМагазинаДляВхода.Видимость = Истина;
	Форма.Элементы.СменитьМагазин.Видимость = Истина;
	
	ТекстПодсказки = НСтр("ru = 'От выбора магазина зависит, какие кассы ККМ будут подключены к РМК.
		|Кассы ККМ определяются складами, которые входят в группу выбранного магазина.'");
	Форма.Элементы.ТорговыйОбъектДляВхода.Подсказка = ТекстПодсказки;
	Форма.Элементы.ТорговыйОбъектДляВхода.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Форма.Элементы.ТорговыйОбъектДляВхода.МаксимальнаяШирина = 19;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеМеховыхИзделий(НоваяСтрока, СтрокаТовара)
	
	Если Не СтрокаТовара.ОсобенностьУчета = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТовара.НеобходимостьВводаКодаМаркировки И ЗначениеЗаполнено(СтрокаТовара.КодМаркировки)
		И Не ЗначениеЗаполнено(СтрокаТовара.Серия) Тогда
		СозданнаяСерия = НайтиСоздатьСериюПоДаннымШтрихкода(СтрокаТовара.Номенклатура, СтрокаТовара.КодМаркировки);
		СтрокаТовара.Серия = СозданнаяСерия;
	ИначеЕсли СтрокаТовара.НеобходимостьВводаСерии И ЗначениеЗаполнено(СтрокаТовара.Серия) Тогда
		КодМарки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара.Серия, "НомерКиЗГИСМ");
		ДанныеШтрихкода = ШтрихкодУпаковкиТовараПоПолномуКодуМарки(КодМарки, СтрокаТовара);
		СтрокаТовара.КодМаркировки = КодМарки;
		СтрокаТовара.НеобходимостьВводаКодаМаркировки = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСериюПоДаннымШтрихкода(Номенклатура, Штрихкод, Серия)
	
	НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
	НоваяСерия.Владелец = Номенклатура;
	НоваяСерия.Наименование = Штрихкод;
	
	Попытка
		НоваяСерия.Записать();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка записи элемента справочника ""Серии номенклатуры""",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.СерииНоменклатуры,,
			ТекстОшибки);
		ВызватьИсключение;
	КонецПопытки;
	
	Серия = НоваяСерия;
	
КонецПроцедуры

Процедура НастроитьВидимостьВыбораКонтрагента(Форма)
	Форма.Элементы.ВыбратьКонтрагента.Видимость = Истина;
КонецПроцедуры

Процедура ОпределитьЗаполненностьФизЛицаТекущегоПользователя(ФизЛицоПользователяЗаполнено)
	
	ФизЛицоПользователя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновнойОтветственный");
	ФизЛицоПользователяЗаполнено = ЗначениеЗаполнено(ФизЛицоПользователя);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРаспределенияСерийТовара(Выборка, ТаблицаСерий, ТаблицаСерийТовара, ИсходноеКоличествоВЗаказе, КоличествоКДобавлению, КоличествоУпаковокКДобавлению, Резерв)
	
	Если Выборка.ИспользоватьСерииНоменклатуры Тогда
		ОстатокРезерва = Резерв;
		ОстатокКоличества = КоличествоКДобавлению;
		Если КоличествоКДобавлению = ИсходноеКоличествоВЗаказе Тогда
			
			ОтборСтрокСерий = Новый Структура("Заказ,КлючСвязи", Выборка.Заказ, Выборка.КлючСвязи);
			СтрокиСерийТовара = ТаблицаСерий.НайтиСтроки(ОтборСтрокСерий);
			КоличествоСтрокСерий = СтрокиСерийТовара.Количество();
			ИндексСтроки = 0;
			Пока ИндексСтроки < КоличествоСтрокСерий И ОстатокКоличества > 0 Цикл
				ТекущаяСтрокаСерии = СтрокиСерийТовара[ИндексСтроки];
				Если ЗначениеЗаполнено(ТекущаяСтрокаСерии.Серия) Тогда
					
					КоличествоСерии = Мин(ОстатокКоличества, ТекущаяСтрокаСерии.Количество);
					КоличествоРезерва = Мин(ОстатокРезерва, КоличествоСерии);
					ДобавитьСтрокуВТаблицуРаспределенияСерий(ТаблицаСерийТовара, ТекущаяСтрокаСерии.Серия, КоличествоСерии, КоличествоСерии, КоличествоРезерва);
					ОстатокРезерва = ОстатокРезерва - КоличествоРезерва;
					ОстатокКоличества = ОстатокКоличества - КоличествоСерии;
					
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		
		КонецЕсли;
		Пока ОстатокКоличества > 0 Цикл
			КоличествоРезерва = Мин(ОстатокРезерва, 1);
			ДобавитьСтрокуВТаблицуРаспределенияСерий(ТаблицаСерийТовара, Справочники.СерииНоменклатуры.ПустаяСсылка(), 1, 1, КоличествоРезерва);
			ОстатокРезерва = ОстатокРезерва - КоличествоРезерва;
			ОстатокКоличества = ОстатокКоличества - 1;
		КонецЦикла;
	Иначе
		ДобавитьСтрокуВТаблицуРаспределенияСерий(ТаблицаСерийТовара,
			Справочники.СерииНоменклатуры.ПустаяСсылка(), 
			КоличествоКДобавлению, 
			КоличествоУпаковокКДобавлению, 
			Резерв);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуРаспределенияСерий(ТаблицаРаспределенияСерий, Серия, Количество, КоличествоУпаковок, КоличествоРезерва)
	
	НоваяСтрокаТаблицыСерий = ТаблицаРаспределенияСерий.Добавить();
	НоваяСтрокаТаблицыСерий.Серия = Серия;
	НоваяСтрокаТаблицыСерий.Количество = Количество;
	НоваяСтрокаТаблицыСерий.КоличествоУпаковок = КоличествоУпаковок;
	НоваяСтрокаТаблицыСерий.Резерв = КоличествоРезерва;
	
КонецПроцедуры

Функция ТаблицаРаспределенияСерий()
	
	ТипЧисло15_3_Положительное = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный);
	
	ТаблицаРаспределенияСерий = Новый ТаблицаЗначений;
	ТаблицаРаспределенияСерий.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРаспределенияСерий.Колонки.Добавить("Количество", ТипЧисло15_3_Положительное);
	ТаблицаРаспределенияСерий.Колонки.Добавить("КоличествоУпаковок", ТипЧисло15_3_Положительное);
	ТаблицаРаспределенияСерий.Колонки.Добавить("Резерв", ТипЧисло15_3_Положительное);
	
	Возврат ТаблицаРаспределенияСерий;
	
КонецФункции

Процедура ДобавитьСтрокуВТабличнуюЧастьТоваров(Форма, СтрокаИсточника)
	
	Объект = Форма.Объект;
	
	НоваяСтрокаТовары = Объект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаИсточника);
	НоваяСтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрокаТовары, Форма);
	Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.Организация) Тогда
		НоваяСтрокаТовары.Организация = Форма.ОсновнаяОрганизация;
	Иначе
		ОтборПоОрганизации = Новый Структура("Организация", НоваяСтрокаТовары.Организация);
		КассыККМПоОрганизации = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
		Если КассыККМПоОрганизации.Количество() = 0 Тогда
			НоваяСтрокаТовары.ОплатаНедоступна = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.СистемаНалогообложения) Тогда
		НоваяСтрокаТовары.СистемаНалогообложения = ОбщегоНазначенияРМК.СНОККТДляОрганизации(Форма, НоваяСтрокаТовары);
	КонецЕсли;
		
	Если СтрокаИсточника.ОсобенностьУчета = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
		И СтрокаИсточника.НеобходимостьВводаКодаМаркировки
		И СтрокаИсточника.НеобходимостьВводаСерии Тогда
		
		НоваяСтрокаТовары.НеобходимостьВводаСерии = Ложь;
		НоваяСтрокаТовары.ПроверятьЗаполнениеСерий = Ложь;
		НоваяСтрокаТовары.УникальностьСерии = Ложь;
		
	КонецЕсли;
	
	СкорректироватьЦенуПодарочногоСертификата(Форма, НоваяСтрокаТовары);
	
КонецПроцедуры

Процедура ПеренестиТаблицуТоваровЧекаВТаблицуФормы(Форма, ТаблицаТоварыЧека, ДанныеДляРаспределения)

	ПоляСтруктуры = "";
	НовыйКлючСвязи = ДанныеДляРаспределения.КлючСвязиМаксимум + 1;
	Для Каждого СтрокаЧека Из ТаблицаТоварыЧека Цикл
		
		ОтборПоКлючуСвязи = Новый Структура("КлючСвязи", СтрокаЧека.КлючСвязиЧекаПродажи);
		СтрокиСерийНоменклатуры = ДанныеДляРаспределения.ТаблицаСерийНоменклатуры.НайтиСтроки(ОтборПоКлючуСвязи);
		Если СтрокиСерийНоменклатуры.Количество() = 0 Тогда
			ДобавитьСтрокуВТабличнуюЧастьТоваров(Форма, СтрокаЧека);
		ИначеЕсли СтрокиСерийНоменклатуры.Количество() = 1 Тогда
			СтрокаЧека.Серия = СтрокиСерийНоменклатуры[0].Серия;
			ДобавитьСтрокуВТабличнуюЧастьТоваров(Форма, СтрокаЧека);
		ИначеЕсли Не СтрокаЧека.Количество = 0 Тогда
			
			Если ПоляСтруктуры = "" Тогда
				Для Каждого КолонкаТаблицы Из ТаблицаТоварыЧека.Колонки Цикл
					ПоляСтруктуры = ПоляСтруктуры + "," + КолонкаТаблицы.Имя;
				КонецЦикла;
				ПоляСтруктуры = Сред(ПоляСтруктуры, 2);
			КонецЕсли;
			
			СтрокиСкидок = ДанныеДляРаспределения.ТаблицаСкидокНаценок.НайтиСтроки(ОтборПоКлючуСвязи);
			СтрокиБонусов = ДанныеДляРаспределения.ТаблицаБонусов.НайтиСтроки(ОтборПоКлючуСвязи);
			
			СтруктураСуммСтрокиЧека = Новый Структура("Сумма,СуммаАвтоматическойСкидки,СуммаБезСкидки,СуммаНДС,СуммаСкидкиНаценки,СуммаСкидкиОплатыБонусом,СуммаСкидокОбщая");
			ЗаполнитьЗначенияСвойств(СтруктураСуммСтрокиЧека, СтрокаЧека);
			ИсходноеКоличество = СтрокаЧека.Количество * СтрокаЧека.КоэффициентУпаковки;
			ЦенаТовара = СтрокаЧека.Цена / СтрокаЧека.КоэффициентУпаковки;
			
			ИндексСтрокиСерии = 0;
			Пока ИндексСтрокиСерии < СтрокиСерийНоменклатуры.Количество() И ИсходноеКоличество > 0 Цикл
				СтрокаСерии = СтрокиСерийНоменклатуры.Получить(ИндексСтрокиСерии);
				ВыделеннаяСтрокаЧека = Новый Структура(ПоляСтруктуры);
				ЗаполнитьЗначенияСвойств(ВыделеннаяСтрокаЧека, СтрокаЧека);
				Если Не СтрокаЧека.КоэффициентУпаковки = 1 Тогда
					ВыделеннаяСтрокаЧека.Упаковка = СтрокаЧека.ЕдиницаИзмеренияНоменклатуры;
				КонецЕсли;
				ВыделеннаяСтрокаЧека.Цена = ЦенаТовара;
				ВыделеннаяСтрокаЧека.Количество = СтрокаСерии.Количество;
				ВыделеннаяСтрокаЧека.КоличествоУпаковок = СтрокаСерии.Количество;
				Если ИндексСтрокиСерии > 0 Тогда
					ВыделеннаяСтрокаЧека.КлючСвязиЧекаПродажи = НовыйКлючСвязи;
					НовыйКлючСвязи = НовыйКлючСвязи + 1;
				КонецЕсли;
				ВыделеннаяСтрокаЧека.Серия = СтрокаСерии.Серия;
				Для Каждого РеквизитСуммы Из СтруктураСуммСтрокиЧека Цикл
					Если ИндексСтрокиСерии = (СтрокиСерийНоменклатуры.Количество() - 1) Тогда
						ВыделеннаяСтрокаЧека[РеквизитСуммы.Ключ] = СтруктураСуммСтрокиЧека[РеквизитСуммы.Ключ];
					Иначе
						ВыделеннаяСтрокаЧека[РеквизитСуммы.Ключ] = окр(СтруктураСуммСтрокиЧека[РеквизитСуммы.Ключ] * СтрокаСерии.Количество / ИсходноеКоличество, 2, 1);
					КонецЕсли;
					СтруктураСуммСтрокиЧека[РеквизитСуммы.Ключ] = СтруктураСуммСтрокиЧека[РеквизитСуммы.Ключ] - ВыделеннаяСтрокаЧека[РеквизитСуммы.Ключ];
				КонецЦикла;
				Для Каждого СтрокаСкидки Из СтрокиСкидок Цикл
					НоваяСумма = окр(СтрокаСкидки.Сумма * ?(ИндексСтрокиСерии = (СтрокиСерийНоменклатуры.Количество() - 1), 1, СтрокаСерии.Количество / ИсходноеКоличество), 2, 1);
					СтрокаСкидки.Сумма = СтрокаСкидки.Сумма - НоваяСумма;
					НоваяСтрокаСкидки = ДанныеДляРаспределения.ТаблицаСкидокНаценок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСкидки, СтрокаСкидки, "СкидкаНаценка,ЗначениеСкидкиНаценки");
					НоваяСтрокаСкидки.КлючСвязи = ВыделеннаяСтрокаЧека.КлючСвязиЧекаПродажи;
					НоваяСтрокаСкидки.Сумма = НоваяСумма;
				КонецЦикла;
				Для Каждого СтрокаБонуса Из СтрокиБонусов Цикл
					НовоеКоличествоБонусов = окр(СтрокаБонуса.КоличествоБонусныхБаллов 
						* ?(ИндексСтрокиСерии = (СтрокиСерийНоменклатуры.Количество() - 1), 1, СтрокаСерии.Количество / ИсходноеКоличество), 2, 1);
					СтрокаБонуса.КоличествоБонусныхБаллов = СтрокаБонуса.КоличествоБонусныхБаллов - НовоеКоличествоБонусов;
					НоваяСтрокаБонусов = ДанныеДляРаспределения.ТаблицаБонусов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаБонусов, СтрокаБонуса, "СкидкаНаценка,ДатаНачисления,ДатаСписания");
					НоваяСтрокаБонусов.КлючСвязи = ВыделеннаяСтрокаЧека.КлючСвязиЧекаПродажи;
					НоваяСтрокаБонусов.КоличествоБонусныхБаллов = НовоеКоличествоБонусов;
				КонецЦикла;
				ДобавитьСтрокуВТабличнуюЧастьТоваров(Форма, ВыделеннаяСтрокаЧека);
				ИсходноеКоличество = ИсходноеКоличество - СтрокаСерии.Количество;
				ИндексСтрокиСерии = ИндексСтрокиСерии + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	УдалитьИсходныеДляРаспределенияСтрокиСкидокИБонусов(ДанныеДляРаспределения);
	
КонецПроцедуры

Процедура УдалитьНулевыеСтрокиТаблицы(ОбрабатываемаяТаблица, ИмяКолонки)
	КоличествоСтрок = ОбрабатываемаяТаблица.Количество();
	Счетчик = 0;
	Пока Счетчик < КоличествоСтрок Цикл
		ИндексСтроки = КоличествоСтрок - Счетчик - 1;
		ТекущаяСтрока = ОбрабатываемаяТаблица.Получить(ИндексСтроки);
		Если ТекущаяСтрока[ИмяКолонки] = 0 Тогда
			ОбрабатываемаяТаблица.Удалить(ИндексСтроки);
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьИсходныеДляРаспределенияСтрокиСкидокИБонусов(ДанныеДляРаспределения)
	УдалитьНулевыеСтрокиТаблицы(ДанныеДляРаспределения.ТаблицаСкидокНаценок, "Сумма");
	УдалитьНулевыеСтрокиТаблицы(ДанныеДляРаспределения.ТаблицаБонусов, "КоличествоБонусныхБаллов");
КонецПроцедуры

// Заполняет ТаблицаОстатков на форме РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ПараметрыПолученияОстатков - Структура:
//    Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура.
//    Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика.
//    Упаковка - ОпределяемыйТип.УпаковкаРМК - упаковка.
//
Процедура ЗаполнитьТаблицуОстатков(Форма, ПараметрыПолученияОстатков) Экспорт
	
	ТаблицаОстатков = СерверЛояльностиПоставщикДанныхУНФ.ПолучитьТаблицуОстатков(ПараметрыПолученияОстатков);
	ТаблицаОстатковНаФорме = Форма.ТаблицаОстатков;
	
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		
		НоваяСтрока = ТаблицаОстатковНаФорме.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИЗаполнитьАналитикуРасчетаСКонтрагентом(Форма, Контрагент)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ВестиРасчетыПоДокументам = Ложь;
	ВестиРасчетыПоЗаказам = Ложь;
	
	Если Форма.ПриемАванса ИЛИ Форма.ЭтоВозвратАванса Тогда
		ВестиРасчетыПоДокументам = Истина;
		ВестиРасчетыПоЗаказам = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.ЗаказПокупателя) Тогда
		ВестиРасчетыПоДокументам = Истина;
		ВестиРасчетыПоЗаказам = Истина;
	КонецЕсли;
	
	АналитикиКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ВестиРасчетыПоДокументам, ВестиРасчетыПоЗаказам");
	
	Если АналитикиКонтрагента.ВестиРасчетыПоДокументам И АналитикиКонтрагента.ВестиРасчетыПоЗаказам Тогда
		Возврат;
	КонецЕсли;
	
	АналитикиКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ВестиРасчетыПоДокументам, ВестиРасчетыПоЗаказам");
	Если (НЕ АналитикиКонтрагента.ВестиРасчетыПоДокументам = ВестиРасчетыПоДокументам ИЛИ
		НЕ АналитикиКонтрагента.ВестиРасчетыПоЗаказам = ВестиРасчетыПоЗаказам) И Макс(ВестиРасчетыПоДокументам, ВестиРасчетыПоЗаказам) Тогда
		
		ОбъектКонтрагент = Контрагент.ПолучитьОбъект();
		
		Попытка
			ОбъектКонтрагент.Заблокировать();
			ОбъектКонтрагент.ВестиРасчетыПоДокументам = Макс(АналитикиКонтрагента.ВестиРасчетыПоДокументам, ВестиРасчетыПоДокументам);
			ОбъектКонтрагент.ВестиРасчетыПоЗаказам = Макс(АналитикиКонтрагента.ВестиРасчетыПоЗаказам, ВестиРасчетыПоЗаказам);
			ОбъектКонтрагент.Записать();
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка заполнения аналитики контрагента при пробитии чека из РМК.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,
			ОбъектКонтрагент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеОсновнойНоменклатурыЧастичногоВыбытия(НоменклатураЧастичногоВыбытия, ХарактеристикаЧастичногоВыбытия)
	
	ВозвращаемоеЗначение = Новый  Структура;
	ВозвращаемоеЗначение.Вставить("Номенклатура",   ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	ВозвращаемоеЗначение.Вставить("Характеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура КАК Номенклатура,
		|	НастройкиЧастичногоВыбытияТоваровИСМП.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
		|ГДЕ
		|	НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия = &НоменклатураЧастичногоВыбытия
		|	И НастройкиЧастичногоВыбытияТоваровИСМП.ХарактеристикаЧастичногоВыбытия = &ХарактеристикаЧастичногоВыбытия";
	
	Запрос.УстановитьПараметр("НоменклатураЧастичногоВыбытия",   НоменклатураЧастичногоВыбытия);
	Запрос.УстановитьПараметр("ХарактеристикаЧастичногоВыбытия", ХарактеристикаЧастичногоВыбытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура УстановитьПризнакИзмененияЦеныПередЗаписью(Источник, Отказ, Замещение) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	Для Каждого Запись Из Источник Цикл
		Номенклатура = Запись.Номенклатура;
		Характеристика = Запись.Характеристика;
		ВидЦены = Запись.ВидЦен;
	КонецЦикла;
	ЗначениеОбновленаИнформацияПоЦенамИзбранныеТовары = Константы.ОбновленаИнформацияПоЦенамИзбранныеТовары.Получить();
	
	Если НЕ ЗначениеОбновленаИнформацияПоЦенамИзбранныеТовары Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	спрОборудование.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ втРабочееМесто
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО КассыККМ.СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК спрОборудование
		|		ПО КассыККМ.ПодключаемоеОборудование = спрОборудование.Ссылка
		|ГДЕ
		|	СтруктурныеЕдиницы.РозничныйВидЦен = &ТекущийВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.СтруктураБыстрыхТоваров КАК СтруктураБыстрыхТоваров
		|ПОМЕСТИТЬ втНастройкиРабочегоМеста
		|ИЗ
		|	втРабочееМесто КАК втРабочееМесто
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|		ПО втРабочееМесто.РабочееМесто = НастройкиРабочегоМестаКассира.РабочееМесто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка
		|ИЗ
		|	втНастройкиРабочегоМеста КАК втНастройкиРабочегоМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
		|		ПО втНастройкиРабочегоМеста.СтруктураБыстрыхТоваров = ПалитраТоваровРМКСостав.Ссылка
		|ГДЕ
		|	ПалитраТоваровРМКСостав.Номенклатура = &НоменклатураЗаписи
		|	И ПалитраТоваровРМКСостав.Характеристика = &ХарактеристикаЗаписи";
	
		Запрос.УстановитьПараметр("НоменклатураЗаписи", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаЗаписи", Характеристика);
		Запрос.УстановитьПараметр("ТекущийВидЦены", ВидЦены);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Константы.ОбновленаИнформацияПоЦенамИзбранныеТовары.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеОбновленаИнформацияПоЦенамПлиточныйПодбор = Константы.ОбновленаИнформацияПоЦенамПлиточныйПодбор.Получить();
	
	Если НЕ ЗначениеОбновленаИнформацияПоЦенамПлиточныйПодбор Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	спрОборудование.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ втРабочееМесто
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ПО КассыККМ.СтруктурнаяЕдиница = СтруктурныеЕдиницы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК спрОборудование
		|		ПО КассыККМ.ПодключаемоеОборудование = спрОборудование.Ссылка
		|ГДЕ
		|	СтруктурныеЕдиницы.РозничныйВидЦен = &ТекущийВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.СтруктураПлиточногоИнтерфейсаПодбора КАК СтруктураПлиточногоИнтерфейсаПодбора
		|ПОМЕСТИТЬ втНастройкиРабочегоМеста
		|ИЗ
		|	втРабочееМесто КАК втРабочееМесто
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|		ПО втРабочееМесто.РабочееМесто = НастройкиРабочегоМестаКассира.РабочееМесто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка
		|ИЗ
		|	втНастройкиРабочегоМеста КАК втНастройкиРабочегоМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
		|		ПО втНастройкиРабочегоМеста.СтруктураПлиточногоИнтерфейсаПодбора = ПалитраТоваровРМКСостав.Ссылка
		|ГДЕ
		|	ПалитраТоваровРМКСостав.Номенклатура = &НоменклатураЗаписи
		|	И ПалитраТоваровРМКСостав.Характеристика = &ХарактеристикаЗаписи";
	
		Запрос.УстановитьПараметр("НоменклатураЗаписи", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаЗаписи", Характеристика);
		Запрос.УстановитьПараметр("ТекущийВидЦены", ВидЦены);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Константы.ОбновленаИнформацияПоЦенамПлиточныйПодбор.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Возвращает значение перезаполнения данных в панели избранных товаров
//
// Параметры:
//  ОтображатьОстаток - Булево
//
Функция ПерезаполнитьИзбранное(ОтображатьОстаток) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновленыЦены = Константы.ОбновленаИнформацияПоЦенамИзбранныеТовары.Получить();
	
	Результат = ОбновленыЦены ИЛИ ОтображатьОстаток;
	
	Константы.ОбновленаИнформацияПоЦенамИзбранныеТовары.Установить(Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;

КонецФункции

// Возвращает значение перезаполнения данных в плиточном интерфейсе
//
// Параметры:
//  ОтображатьОстаток - Булево
//
Функция ПерезаполнитьПлиточныйИнтерфейс(ОтображатьОстаток) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновленыЦены = Константы.ОбновленаИнформацияПоЦенамПлиточныйПодбор.Получить();
	
	Результат = ОбновленыЦены ИЛИ ОтображатьОстаток;
	
	Константы.ОбновленаИнформацияПоЦенамПлиточныйПодбор.Установить(Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

Процедура ДописатьВЧекКартуЛояльности(ТекущийЧек, ПараметрыКартыЛояльности)
	
	Если Не ЗначениеЗаполнено(ТекущийЧек.ДисконтнаяКарта)
			И ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЗаполнены(ПараметрыКартыЛояльности) Тогда
			
		Если ЗначениеЗаполнено(ПараметрыКартыЛояльности.ИдентификаторКарты) Тогда
			КартаГУИД = Новый УникальныйИдентификатор(ПараметрыКартыЛояльности.ИдентификаторКарты);
			КартаКлиента = Справочники.ДисконтныеКарты.ПолучитьСсылку(КартаГУИД);
			
			ТекущийЧек.ДисконтнаяКарта = КартаКлиента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие признака НДС сверху, для организаций плательщиков НДС 
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Отказ - Истина - признак наличия отказа, выставляется при выявлении ошибки настройки.
//  ТекстЗаголовка - Строка - текст заголовка ошибки для передачи в заголовок панели ошибок формы РМК.
//  ТекстСообщения - Строка - текст ошибки для передачи в тело ошибки панели ошибок формы РМК.
//
//
Процедура ПроверитьИспользованиеНДССверху(Форма, Отказ, ТекстЗаголовка, ТекстСообщения) Экспорт
	
	Объект = Форма.Объект;
	ТаблицаКассККМ = Форма.ТаблицаКассККМОрганизаций;
	
	Для Каждого КассаККМ Из ТаблицаКассККМ Цикл
		НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(КассаККМ.Организация);
		ОрганизацияПлательщикНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
		Если ОрганизацияПлательщикНДС И НЕ Объект.ЦенаВключаетНДС Тогда
			Отказ = Истина;
			
			ТекстЗаголовка = НСтр("ru = 'Определение вида цен'");
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Организация ""%1"" является плательщиком НДС.
				|В торговом объекте ""%2"" установлен розничный вид цен с признаком учета НДС ""Сверх цены"".
				|Измените или укажите вид цен с признаком учета НДС ""Включен в цену"".'"), КассаККМ.Организация, Объект.ТорговыйОбъект);
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьСтрокиПриПечатиЧека(ДанныеДляПробитияЧека)
	
	ПозицииЧека = ДанныеДляПробитияЧека.ПозицииЧека;
	
	Если ПозицииЧека.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Чеки с текстовыми строками не сворачиваются
	Для Каждого ПозицияЧека Из ПозицииЧека Цикл
		Если ПозицияЧека.Свойство("Текст") Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПозицийЧека = МассивВТаблицуЗначений(ПозицииЧека);
	
	ОтборДляСвертки = Новый Структура();
	ОтборДляСвертки.Вставить("СуммаСкидок", 0);
	
	МассивСтрокДляСвертки = ТаблицаПозицийЧека.НайтиСтроки(ОтборДляСвертки);
	
	Если МассивСтрокДляСвертки.Количество() > 1 Тогда
		
		КолонкиТаблицы = ТаблицаПозицийЧека.Колонки;
		МассивИменКолонокСтруктур = Новый Массив;
		
		Для Каждого СтрокаТовара Из ТаблицаПозицийЧека Цикл
			Для Каждого КолонкаТаблицы Из КолонкиТаблицы Цикл
				Если ТипЗнч(СтрокаТовара[КолонкаТаблицы.Имя]) = Тип("Структура") Тогда
					МассивИменКолонокСтруктур.Добавить(КолонкаТаблицы.Имя);
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЦикла;
		
		Для Каждого СтрокаДляСвертки Из МассивСтрокДляСвертки Цикл
			СтрокаДляСвертки.НомерСтрокиТовара = 0;
			Для Каждого КолонкаСтруктуры Из МассивИменКолонокСтруктур Цикл
				ЗначениеСтруктуры = СтрокаДляСвертки[КолонкаСтруктуры];
				СтруктураВСТрокеXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЗначениеСтруктуры);
				СтрокаДляСвертки[КолонкаСтруктуры] = СтруктураВСТрокеXML;
			КонецЦикла;
		КонецЦикла;
		
		ИменаКолонокСуммируемых = "";
		ИменаКолонокСвертки = "";
		
		Для Каждого КолонкаТаблицы Из ТаблицаПозицийЧека.Колонки Цикл	
			Если Лев(КолонкаТаблицы.Имя, 5) = "Сумма" ИЛИ Лев(КолонкаТаблицы.Имя, 10) = "Количество" Тогда
				ИменаКолонокСуммируемых = ИменаКолонокСуммируемых + ", " + КолонкаТаблицы.Имя;
			Иначе
				ИменаКолонокСвертки = ИменаКолонокСвертки + ", " + КолонкаТаблицы.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ИменаКолонокСуммируемых = Сред(ИменаКолонокСуммируемых,3);
		ИменаКолонокСвертки = Сред(ИменаКолонокСвертки,3);
		
		ТаблицаПозицийЧека.Свернуть(ИменаКолонокСвертки, ИменаКолонокСуммируемых);
		
		НомерСтрокиТовара = 0;
		Для Каждого СтрокаТовара Из ТаблицаПозицийЧека Цикл
			Если СтрокаТовара.НомерСтрокиТовара = 0 Тогда
				Для Каждого КолонкаСтруктуры Из МассивИменКолонокСтруктур Цикл
					СтруктураВСТрокеXML = СтрокаТовара[КолонкаСтруктуры];
					ЗначениеСтруктуры = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтруктураВСТрокеXML);
					СтрокаТовара[КолонкаСтруктуры] = ЗначениеСтруктуры;
				КонецЦикла;
			КонецЕсли;
			НомерСтрокиТовара = НомерСтрокиТовара + 1;
			СтрокаТовара.НомерСтрокиТовара = НомерСтрокиТовара;
		КонецЦикла;
		
		ПозицииЧека = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаПозицийЧека);
		ДанныеДляПробитияЧека.ПозицииЧека = ПозицииЧека;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу значений на основании массива структур.
// 
// Параметры:
//  МассивСтруктур - Массив - массив структур, которые будут преобразованы в таблицу значений.
//                            Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, созданная из массива структур.
// 
Функция МассивВТаблицуЗначений(МассивСтруктур)
	
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ);
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Процедура СкорректироватьСуммуНДСДляСворачиванияСтрокВЧеке(Форма, Товары)
	Перем ТаблицаИтоговНДС;
	
	СворачиватьСтрокиПриПечатиЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ТекущаяНастройкаРМК,
		"СворачиватьСтрокиПриПечатиЧека");
	
	Если СворачиватьСтрокиПриПечатиЧека Тогда
		
		ТаблицаИтоговНДС = Товары.Выгрузить();
		ИсключитьСтрокиСоСкидками(ТаблицаИтоговНДС);
		КолонкиСворачивания = СформироватьСтрокуКолонокСворачиванияЧека(ТаблицаИтоговНДС);
		ТаблицаИтоговНДС.Свернуть(КолонкиСворачивания, "Сумма,СуммаНДС");
		Если ТаблицаИтоговНДС.Количество() < Товары.Количество() Тогда
			ПересчитатьСтрокиЗаполненныхСуммНДС(Форма.Объект, ТаблицаИтоговНДС);
			СкорректироватьСуммуНДСВСтрокахТоваров(Товары, ТаблицаИтоговНДС, КолонкиСворачивания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьСтрокиСоСкидками(ТаблицаИтоговНДС)
	
	КоличествоСтрок = ТаблицаИтоговНДС.Количество();
	КолонкиТаблицы = ТаблицаИтоговНДС.Колонки;
	ПорядковыйНомер = 0;
	Пока ПорядковыйНомер < КоличествоСтрок Цикл
		ПорядковыйНомер = ПорядковыйНомер + 1;
		ИндексСтроки = КоличествоСтрок - ПорядковыйНомер;
		ТекущаяСтрока = ТаблицаИтоговНДС.Получить(ИндексСтроки);
		Если Не (КолонкиТаблицы.Найти("СуммаСкидок") = Неопределено Или ТекущаяСтрока.СуммаСкидок = 0) Тогда
			ТаблицаИтоговНДС.Удалить(ИндексСтроки);
		ИначеЕсли (Не КолонкиТаблицы.Найти("СуммаАвтоматическойСкидки") = Неопределено)
				И Не (ТекущаяСтрока.СуммаАвтоматическойСкидки = 0 И ТекущаяСтрока.СуммаСкидкиОплатыБонусом = 0
					И ТекущаяСтрока.СуммаСкидкиНаценки = 0) Тогда
			ТаблицаИтоговНДС.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КолонкиИсключенияСвертки()
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("ДоляСтоимости");
	КолонкиИсключения.Добавить("Заказ");
	КолонкиИсключения.Добавить("МРЦ");
	КолонкиИсключения.Добавить("КлючСвязи");
	КолонкиИсключения.Добавить("Резерв");
	КолонкиИсключения.Добавить("Всего");
	КолонкиИсключения.Добавить("НомерСтроки");
	
	Возврат КолонкиИсключения;
	
КонецФункции

Функция СформироватьСтрокуКолонокСворачиванияЧека(ТаблицаИтоговНДС)
	
	ИменаКолонокСвертки = "";
	КолонкиИсключения = КолонкиИсключенияСвертки();
	
	Для Каждого КолонкаТаблицы Из ТаблицаИтоговНДС.Колонки Цикл
		Если Не (Лев(КолонкаТаблицы.Имя, 5) = "Сумма" ИЛИ Лев(КолонкаТаблицы.Имя, 10) = "Количество")
			И КолонкиИсключения.Найти(КолонкаТаблицы.Имя) = Неопределено Тогда
			
			ИменаКолонокСвертки = ИменаКолонокСвертки + ?(ИменаКолонокСвертки = "", "", ",") + КолонкаТаблицы.Имя;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаКолонокСвертки;
	
КонецФункции

Процедура ПересчитатьСтрокиЗаполненныхСуммНДС(Объект, ТаблицаИтоговНДС)
	
	КоличествоСтрок = ТаблицаИтоговНДС.Количество();
	ТаблицаИтоговНДС.Колонки.Добавить("БылаСуммаНДС", Метаданные.ОпределяемыеТипы.НеотрицательноеЧисло15_2_РМК.Тип);
	ПорядковыйИндекс = 0;
	Пока ПорядковыйИндекс < КоличествоСтрок Цикл
		ПорядковыйИндекс = ПорядковыйИндекс + 1;
		ИндексСтроки = КоличествоСтрок - ПорядковыйИндекс;
		ТекущаяСтрока = ТаблицаИтоговНДС.Получить(ИндексСтроки);
		Если ТекущаяСтрока.СуммаНДС = 0 Тогда
			ТаблицаИтоговНДС.Удалить(ТекущаяСтрока);
		Иначе
			ТекущаяСтрока.БылаСуммаНДС = ТекущаяСтрока.СуммаНДС;
			ОбщегоНазначенияРМКУНФКлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьСуммуНДСВСтрокахТоваров(ТаблицаТоваров, ТаблицаИтоговНДС, КолонкиСворачивания)
	
	МассивКолонок = СтрРазделить(КолонкиСворачивания, ",", Ложь);
	Для Каждого СтрокаИтогаНДС Из ТаблицаИтоговНДС Цикл
		Если СтрокаИтогаНДС.СуммаНДС <> СтрокаИтогаНДС.БылаСуммаНДС Тогда
			ОтборСтрок = ПодготовитьОтборСтрокСвернутыхТоваров(СтрокаИтогаНДС, МассивКолонок);
			СтрокиТоваров = ВыделитьСтрокиПоОтбору(ТаблицаТоваров, ОтборСтрок);
			КорректируемаяСтрока = ПолучитьСтрокуСМаксимальнойСуммойНДС(СтрокиТоваров);
			Если Не КорректируемаяСтрока = Неопределено Тогда
				КорректируемаяСтрока.СуммаНДС = КорректируемаяСтрока.СуммаНДС
						+ (СтрокаИтогаНДС.СуммаНДС - СтрокаИтогаНДС.БылаСуммаНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыделитьСтрокиПоОтбору(ТаблицаТоваров, ОтборСтрок)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строкатовара Из ТаблицаТоваров Цикл
		Если СтрокаУдовлетворяетУсловиямОтбора(Строкатовара, ОтборСтрок) Тогда
			МассивСтрок.Добавить(Строкатовара);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСтрок;
	
КонецФункции

Функция СтрокаУдовлетворяетУсловиямОтбора(СтрокаТовара, ОтборСтрок)
	
	СтрокаПодходит = Истина;
	Для Каждого ЭлементОтбора Из ОтборСтрок Цикл
		Если Не СтрокаТовара[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение Тогда
			СтрокаПодходит = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат СтрокаПодходит;
	
КонецФункции

Функция ПолучитьСтрокуСМаксимальнойСуммойНДС(СтрокиТоваров)
	
	РезультатФункции = Неопределено;
	КоличествоСтрок = СтрокиТоваров.Количество();
	ПорядковыйИндекс = 0;
	Пока ПорядковыйИндекс < КоличествоСтрок Цикл
		ПорядковыйИндекс = ПорядковыйИндекс + 1;
		ИндексСтроки = КоличествоСтрок - ПорядковыйИндекс;
		СтрокаТовара = СтрокиТоваров[ИндексСтроки];
		Если РезультатФункции = Неопределено Или РезультатФункции.СуммаНДС < СтрокаТовара.СуммаНДС Тогда
			РезультатФункции = СтрокаТовара;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

Функция ПодготовитьОтборСтрокСвернутыхТоваров(СтрокаИтогаНДС, МассивКолонок)
	
	ОтборСтрок = Новый Структура;
	Для каждого КолонкаСворачивания Из МассивКолонок Цикл
		ОтборСтрок.Вставить(КолонкаСворачивания, СтрокаИтогаНДС[КолонкаСворачивания]);
	КонецЦикла;
	Возврат ОтборСтрок;
	
КонецФункции

// Заполняет данные выбора по номенклатуре, для добавления в корзину РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//  ДанныеВыбора - Структура:
//    Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура.
//    Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика.
//    Упаковка - ОпределяемыйТип.УпаковкаРМК - упаковка.
//    Цена
//    ОсобенностьУчета
//    ВидНоменклатуры
//    ВыборТовараВручную
//
Процедура ПодготовитьДанныеВыбораНоменклатуры(Форма, ДанныеВыбора) Экспорт
	
	Номенклатура = ДанныеВыбора.Номенклатура;
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	СписокТоваров = Форма.СписокТоваров;
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТоваров, "Упаковка", ЕдиницаИзмерения, , , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТоваров, "Номенклатура", Номенклатура, , , Истина);
	
	Схема = Элементы.СписокТоваров.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокТоваров.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокТоваров, "Упаковка");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокТоваров, "Номенклатура");
	
	Если Результат.Количество() <> 0 Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеВыбора, Результат[0]);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение для видимости ручной скидки на форме РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//
//
Процедура УстановитьЗначениеПримененияРучнойСкидки(Форма) Экспорт
	
	ПравоУстанавливатьРучныеСкидки =
		НЕ (Форма.СписокРолейПользователя.НайтиПоЗначению("ПравоРучнаяСкидкаРМК") = Неопределено);
	
	Форма.ДопускаетсяПрименениеСкидок = ПравоУстанавливатьРучныеСкидки И (Форма.МаксимальныйПроцентРучнойСкидки > 0);
	
КонецПроцедуры

// Устанавливает видимость элементов доступных остатков в зависимости от настройки РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//
Процедура ДополнитьНастройкиОтображенияОстатков(Форма) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	ОтображатьОстаток = Форма.ОтображатьОстаток;
	ЭлементыФормы.СписокТоваровДоступно.Видимость = ОтображатьОстаток;
	ЭлементыФормы.СписокТоваровВРезерве.Видимость = ОтображатьОстаток;
	
КонецПроцедуры

#КонецОбласти
