
#Область ПрограммныйИнтерфейс

// См. МенеджерОбменаЧерезУниверсальныйФормат18.ЗаполнитьПравилаОбработкиДанных.
//
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	
	Если НаправлениеОбмена = "Отправка" Тогда
		
		ДобавитьПОД_Справочник_БонусныеПрограммы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДисконтныеКарты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КомплектацияЗапасов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_НастройкиЧастичногоВыбытияТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ОписаниеНоменклатурыИС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СоставНабора_Отправка(ПравилаОбработкиДанных);
		
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		
		ДобавитьПОД_Документ_КассоваяСменаОткрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КассоваяСменаЗакрытие_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДисконтныеКарты_Получение(ПравилаОбработкиДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// См. МенеджерОбменаЧерезУниверсальныйФормат18.ЗаполнитьПравилаКонвертацииОбъектов.
//
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	
	Если НаправлениеОбмена = "Отправка" Тогда
		
		ДобавитьПКО_Справочник_ДисконтныеКарты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БонусныеПрограммы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДополнительныеРеквизиты_Отправка_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_УдалениеПозицииПрайсЛиста_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СоставНабора_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ИнформативныеОстатки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации);
		
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходныйКассовыйОрдер_ИзСтр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВнесениеНаличных_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыемкаНаличных_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаОткрытиеИзСтруктуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаОткрытие_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДисконтныеКарты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМВозврат_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаВОтчетОРозничныхПродажах(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_ИзСтр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажахЗакрытие_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение(ПравилаКонвертации);
		
	КонецЕсли;
	
КонецПроцедуры

// См. МенеджерОбменаЧерезУниверсальныйФормат18.ВыполнитьПроцедуруМодуляМенеджера.
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	
	Если ИмяПроцедуры = "ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СоставНабора_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СоставНабора_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_ОписаниеНоменклатурыИС_Отправка_ПриОбработке" Тогда 
		ПОД_ОписаниеНоменклатурыИС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_Производство_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Производство_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КомплектацияЗапасов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КомплектацияЗапасов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_НастройкиЧастичногоВыбытияТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_НастройкиЧастичногоВыбытияТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КассоваяСменаОткрытие_Получение_ПриОбработке" Тогда 
		ПОД_Документ_КассоваяСменаОткрытие_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КассоваяСменаЗакрытие_Получение_ПриОбработке" Тогда 
		ПОД_Документ_КассоваяСменаЗакрытие_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЧекККМ_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЧекККМ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "АлгоритмПоиска_НайтиКассовуюСмену" Тогда 
		АлгоритмПоиска_НайтиКассовуюСмену(
			Параметры.ДанныеИБ, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СоставНабора_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СоставНабора_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);

	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);

	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_УдалениеПозицииПрайсЛиста_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_УдалениеПозицииПрайсЛиста_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);

	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходныйКассовыйОрдер_ИзСтр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РасходныйКассовыйОрдер_ИзСтр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "Документ_ОтчетОРозничныхПродажахЗакрытие_Получение_ПриКонвертацииДанныхXDTO" Тогда
		Документ_ОтчетОРозничныхПродажахЗакрытие_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "Документ_КассоваяСменаВОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO" Тогда
		Документ_КассоваяСменаВОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыемкаНаличных_Получение_ПриКонвертацииДанныхXDTO" Тогда
		ПКО_Документ_ВыемкаНаличных_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO" Тогда
		ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO" Тогда
		ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнесениеНаличных_Получение_ПриКонвертацииДанныхXDTO" Тогда
		ПКО_Документ_ВнесениеНаличных_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);

	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки); 
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ИнформативныеОстатки_Отправка_ПриОтправкеДанных" Тогда
		ПКО_Справочник_ИнформативныеОстатки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO(Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЧекККМ" Тогда 
		ОтложеннаяОбработка_ЧекККМ(
			Параметры.Объект, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЗакрытиеКассовойСмены" Тогда 
		ОтложеннаяОбработка_ЗакрытиеКассовойСмены(
			Параметры.Объект, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных" Тогда
		ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных" Тогда
		ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Получение_ПриОбработке" Тогда
		ПОД_Справочник_ФизическиеЛица_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO" Тогда
		ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДисконтныеКарты_Получение_ПередЗаписьюПолученныхДанных" Тогда
		ПКО_Справочник_ДисконтныеКарты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДисконтныеКарты_Получение_ПриОбработке" Тогда
		ПОД_Справочник_ДисконтныеКарты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
			
	КонецЕсли;
		
КонецПроцедуры

// Обработчик регистрации изменений для начальной выгрузки данных.
//
// Параметры:
//
//   Получатель - ПланОбменаСсылка - узел плана обмена, в который требуется выгрузить данные.
//   СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения стандартной
//                          (системной) обработки события.
//                          Если в теле процедуры-обработчика установить данному параметру значение Ложь,
//                          стандартная обработка события производиться не будет.
//                          Отказ от стандартной обработки не отменяет действие.
//                          Значение по умолчанию - Истина.
//   Отбор - Массив из ОбъектМетаданных
//         - ОбъектМетаданных - определяет отбор по объектам метаданных,
//           для которых следует выполнить регистрацию изменений.
//
Процедура РегистрацияИзмененийНачальнойВыгрузкиДанных(Знач Получатель, СтандартнаяОбработка = Ложь, Отбор = Неопределено) Экспорт
	
	Если ТипЗнч(Получатель) <> Тип("ПланОбменаСсылка.ОбменСУРМК") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	Отбор					= Новый Массив;
	
	ЗначенияРеквизитов 		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель,
								"ВариантНастройки, ИспользоватьОтборПоОрганизациям, ДатаНачалаВыгрузкиДокументов, Организации");
	
	Для Каждого ЭлементСостава Из Получатель.Метаданные().Состав Цикл
		Отбор.Добавить(ЭлементСостава.Метаданные);
	КонецЦикла;
	
	МетаданныеРегистрируютсяПриНеобходимости = Новый Массив;
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.ЕдиницыИзмерения);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.СерииНоменклатуры);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.Номенклатура);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.Контрагенты);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	МетаданныеРегистрируютсяПриНеобходимости.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);  
	
	Для каждого ЭлементМассива Из МетаданныеРегистрируютсяПриНеобходимости Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Отбор, ЭлементМассива);
	КонецЦикла;
	
	Если ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям Тогда
		ОтборОрганизации = ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
	Иначе
		ОтборОрганизации = Неопределено;
	КонецЕсли;
	
	ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Получатель,
		ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, ОтборОрганизации, Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДанных

Процедура ДобавитьПОД_Документ_КомплектацияЗапасов_Отправка(ПравилаОбработкиДанных)    
	
	ПравилоОбработки                         = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Документ_КомплектацияЗапасов_Отправка");
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КомплектацияЗапасов_Отправка_ПриОбработке";
	
КонецПроцедуры

Процедура ПОД_Документ_КомплектацияЗапасов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	Если ДанныеИБ.Запасы.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_КомплектацияЗапасов_Отправка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПОД_Документ_Производство_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	Если ДанныеИБ.Запасы.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_Комплектация_Отправка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КассоваяСменаЗакрытие_Получение(ПравилаОбработкиДанных)

	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Документ_КассоваяСменаЗакрытие_Получение");
	ПравилоОбработки.Имя                     = "Документ_КассоваяСменаЗакрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗакрытиеКассовойСмены";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КассоваяСменаЗакрытие_Получение_ПриОбработке";

	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Документ_КассоваяСменаЗакрытие_Получение") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаЗакрытие_Получение");
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажахЗакрытие_Получение");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПОД_Документ_КассоваяСменаЗакрытие_Получение_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		
	Иначе
		ИспользованиеПКО.Документ_КассоваяСменаЗакрытие_Получение 			= Ложь;
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажахЗакрытие_Получение = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПОД_Документ_КассоваяСменаОткрытие_Получение(ПравилаОбработкиДанных)

	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Документ_КассоваяСменаОткрытие_Получение");
	ПравилоОбработки.Имя                     = "Документ_КассоваяСменаОткрытие_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОткрытиеКассовойСмены";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КассоваяСменаОткрытие_Получение_ПриОбработке";
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Документ_КассоваяСменаОткрытие_Получение") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаОткрытие_Получение");
	КонецЕсли;
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Документ_КассоваяСменаВОтчетОРозничныхПродажах") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаВОтчетОРозничныхПродажах");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПОД_Документ_КассоваяСменаОткрытие_Получение_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		
	Иначе
		ИспользованиеПКО.Документ_КассоваяСменаВОтчетОРозничныхПродажах = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_ТипыЦен_Отправка");
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке";

КонецПроцедуры

Процедура ПОД_Справочник_ТипыЦен_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз КАК ОбщиеНастройкиУзловИнформационныхБаз
	|ГДЕ
	|	ОбщиеНастройкиУзловИнформационныхБаз.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И ОбщиеНастройкиУзловИнформационныхБаз.НачальнаяВыгрузкаДанных");
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", КомпонентыОбмена.УзелКорреспондента);
	
	НачальнаяВыгрузкаДанных =  Не Запрос.Выполнить().Пустой();

	Если НЕ НачальнаяВыгрузкаДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоУстановкаЦенОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатурыРегистр_Отправка", "Имя");  
	
	Если ПравилоУстановкаЦенОтправка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПериодЦен    	= КомпонентыОбмена.УзелКорреспондентаОбъект.ДатаНачалаВыгрузкиДокументов-1;
	ВидЦен		 	= ДанныеИБ.Ссылка;
	ДанныеИБРегистр	= РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	ДанныеИБРегистр.Отбор.ВидЦен.Установить(ДанныеИБ.Ссылка);
	ДанныеИБРегистр.Отбор.Период.Установить(ПериодЦен);
	
	// удаление цен
	ДанныеИБРегистр.ДополнительныеСвойства.Вставить("УдалитьВсеЦены", Истина);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБРегистр, ПравилоУстановкаЦенОтправка);
	ДанныеИБРегистр.ДополнительныеСвойства.Удалить("УдалитьВсеЦены");
	
	Запрос 		 = Новый Запрос();
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	&ПериодЦен КАК Период,
	|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ПериодЦен,
	|			ВидЦен = &ВидЦен
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|				И НЕ Номенклатура.ПометкаУдаления
	|				И НЕ Номенклатура.Недействителен) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	
	Запрос.УстановитьПараметр("ВидЦен", 	ВидЦен);
	Запрос.УстановитьПараметр("ПериодЦен",	ПериодЦен);

	ПакетЗапросов  	= Запрос.ВыполнитьПакет();
	
	Если Не ПакетЗапросов[0].Пустой() Тогда
		
		ВыборкаЦен 	= ПакетЗапросов[0].Выбрать();
		
		Пока ВыборкаЦен.Следующий() Цикл
			
			СтрокаЗаписи = ДанныеИБРегистр.Добавить();
		
			ЗаполнитьЗначенияСвойств(СтрокаЗаписи, ВыборкаЦен);
		
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.6")
				И НЕ (ЗначениеЗаполнено(ВыборкаЦен.Характеристика.Владелец) И ТипЗнч(ВыборкаЦен.Характеристика.Владелец) = Тип("СправочникСсылка.Номенклатура")) Тогда
				СтрокаЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		
		КонецЦикла;	

		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБРегистр, ПравилоУстановкаЦенОтправка);
		
	КонецЕсли;
	
	ВыборкаПС		= ПакетЗапросов[1].Выбрать();
	
	Пока ВыборкаПС.Следующий() Цикл
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ВыборкаПС.Ссылка.ПолучитьОбъект());
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаОбработкиДанных) 
	
	ПравилоОбработки                         = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Документ_УстановкаЦенНоменклатурыРегистр_Отправка");
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_УдалениеПозицииПрайсЛиста_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	Перем УдалитьВсеЦены;
	
	ИспользованиеПКО.Справочник_УдалениеПозицииПрайсЛиста_Отправка = Ложь;

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("УдалитьВсеЦены", УдалитьВсеЦены)
		И УдалитьВсеЦены Тогда
		ИспользованиеПКО.Справочник_УдалениеПозицииПрайсЛиста_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Справочник_УдалениеПозицииПрайсЛиста_Отправка = ДанныеИБ.Количество() = 0 И ДанныеИБ.Отбор.Номенклатура.Использование;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)    
	
	ПравилоОбработки                         = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Документ_УстановкаЦенНоменклатуры_Отправка");
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_УдалениеПозицииПрайсЛиста_Отправка");
	
КонецПроцедуры

Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	ТекстЗапроса = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Ссылка
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Запасы КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.ВидЦены = &ВидЦен
	|	И ЦеныНоменклатуры.Ссылка.Проведен
	|	И ЦеныНоменклатуры.Ссылка = &ДокументУстановки
	|	И ЦеныНоменклатуры.Ссылка.Дата >= &ПериодЦен";
	
	ИспользованиеПКО.Справочник_УдалениеПозицииПрайсЛиста_Отправка = Ложь;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;

	ДокументПроведен = Истина;
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") 
		И ДанныеИБ.Свойство("Ссылка") Тогда
		
		ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Проведен");
		
	ИначеЕсли ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда

		ДокументПроведен    = ДанныеИБ.Проведен;
		
		ПериодЦен   		= КомпонентыОбмена.УзелКорреспондентаОбъект.ДатаНачалаВыгрузкиДокументов-1;
		ВидЦен				= КомпонентыОбмена.УзелКорреспондента.ВидЦен;
		Запрос 				= Новый Запрос(ТекстЗапроса);
	
		Запрос.УстановитьПараметр("ВидЦен", 			ВидЦен);
		Запрос.УстановитьПараметр("ПериодЦен",  		ПериодЦен);
		Запрос.УстановитьПараметр("ДокументУстановки", 	ДанныеИБ.Ссылка);

		ИспользованиеПКО.Справочник_УдалениеПозицииПрайсЛиста_Отправка = Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Если Не ДокументПроведен Тогда
		ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка	   = Ложь;   
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьПОД_НастройкиЧастичногоВыбытияТоваров_Отправка(ПравилаОбработкиДанных)   
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НастройкиЧастичногоВыбытияТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.НастройкиЧастичногоВыбытияТоваровИСМП;
	ПравилоОбработки.ПриОбработке            = "ПОД_НастройкиЧастичногоВыбытияТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
КонецПроцедуры

Процедура ПОД_НастройкиЧастичногоВыбытияТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	#Область ТекстЗапроса
	ТекстЗапросаШКМарок = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.НоменклатураЧастичногоВыбытия КАК НоменклатураЧастичногоВыбытия,
	|	Т.ХарактеристикаЧастичногоВыбытия КАК ХарактеристикаЧастичногоВыбытия
	|ПОМЕСТИТЬ НастройкиЧастичногоВыбытияТоваров
	|ИЗ
	|	&НастройкиЧВТ КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЧастичногоВыбытияТоваров.НоменклатураЧастичногоВыбытия КАК Номенклатура,
	|	НастройкиЧастичногоВыбытияТоваров.ХарактеристикаЧастичногоВыбытия КАК Характеристика,
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	НастройкиЧастичногоВыбытияТоваров КАК НастройкиЧастичногоВыбытияТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Т
	|		ПО (Т.Номенклатура = НастройкиЧастичногоВыбытияТоваров.Номенклатура)
	|			И (Т.Характеристика = НастройкиЧастичногоВыбытияТоваров.Характеристика)
	|			И (Т.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар))
	|ГДЕ
	|	Т.ПометкаУдаления = ЛОЖЬ";
	#КонецОбласти
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ВложенныеТоварыПустая = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка().ВложенныеТовары;

	НастройкиЧВТ 		  = РегистрыСведений.НастройкиЧастичногоВыбытияТоваровИСМП.СоздатьНаборЗаписей();
	НастройкиЧВТ 		  = НастройкиЧВТ.ВыгрузитьКолонки();
		
	Для Каждого СтрокаИБ Из ДанныеИБ Цикл
		ЗаполнитьЗначенияСвойств(НастройкиЧВТ.Добавить(), СтрокаИБ);
	КонецЦикла;
	
	ШтрихкодыУпаковокОтправка 	= КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ШтрихкодыУпаковокТоваров_Отправка", "Имя");
	ПравилоНоменклатураОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Номенклатура_Отправка", "Имя");
	
	Если Не ШтрихкодыУпаковокОтправка = Неопределено Тогда
		
		Запрос = Новый Запрос(ТекстЗапросаШКМарок);
		Запрос.УстановитьПараметр("НастройкиЧВТ", НастройкиЧВТ);

		ВыборкаМарки = Запрос.Выполнить().Выбрать();
				
		Пока ВыборкаМарки.Следующий() Цикл
                                                                             
			МаркаОбъект = ВыборкаМарки.Ссылка.ПолучитьОбъект();
				
			ДанныеИБСтруктура = Новый Структура("Ссылка, Упаковка, Серия, ТипУпаковки, ТипШтрихкода,
				|ЗначениеШтрихкода, Количество, ДатаУпаковки, Ответственный");
			
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, МаркаОбъект);
				
			ДанныеИБСтруктура.Вставить("Номенклатура", 		ВыборкаМарки.Номенклатура);
			ДанныеИБСтруктура.Вставить("Характеристика", 	ВыборкаМарки.Характеристика);
            ДанныеИБСтруктура.Вставить("ВложенныеТовары", 	ВложенныеТоварыПустая);
				
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ШтрихкодыУпаковокОтправка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ПравилоНоменклатураОтправка = Неопределено Тогда
		
		Для Каждого Строка Из НастройкиЧВТ Цикл
			
			НоменклатураОбъект = Строка.НоменклатураЧастичногоВыбытия.ПолучитьОбъект();
			Если НоменклатураОбъект <> Неопределено Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, НоменклатураОбъект, ПравилоНоменклатураОтправка);
			КонецЕсли;
			
		КонецЦикла;				
	
	КонецЕсли;       
	
КонецПроцедуры

Процедура ДобавитьПОД_ОписаниеНоменклатурыИС_Отправка(ПравилаОбработкиДанных)   
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ОписаниеНоменклатурыИС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ОписаниеНоменклатурыИС;
	ПравилоОбработки.ПриОбработке            = "ПОД_ОписаниеНоменклатурыИС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
КонецПроцедуры

Процедура ПОД_ОписаниеНоменклатурыИС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоНоменклатураОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Номенклатура_Отправка", "Имя");
	Если Не ПравилоНоменклатураОтправка = Неопределено Тогда
		НоменклатураСсылка = ДанныеИБ.Отбор.Номенклатура.Значение;
	
		Если ОбщегоНазначения.СсылкаСуществует(НоменклатураСсылка) Тогда
	        НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, НоменклатураОбъект, ПравилоНоменклатураОтправка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных)   
	
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Документ_ЧекККМ_Получение");
	
КонецПроцедуры

Процедура ПОД_Документ_ЧекККМ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)

	Перем AdditionalInfo;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Корректировочный")
		И ДанныеXDTO.Корректировочный Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧастиТовары 		= ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
			"ТоварыПродажа", "Товары");
	
	ИмяТабличнойЧастиВозвратТоваров = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
			"ТоварыВозвратПродажи", "ВозвратТоваров");
	
	ПродажаТоваровУслуг = ДанныеXDTO.Свойство(ИмяТабличнойЧастиТовары) ИЛИ ДанныеXDTO.Свойство("Услуги");
	ВозвратТоваровУслуг = ДанныеXDTO.Свойство(ИмяТабличнойЧастиВозвратТоваров);
	
	ПродажаПС 			= ДанныеXDTO.Свойство("ПодарочныеСертификаты") И ДанныеXDTO.ПодарочныеСертификаты.Итог("Сумма") > 0;
	ВозвратПС			= ДанныеXDTO.Свойство("ПодарочныеСертификаты") И ДанныеXDTO.ПодарочныеСертификаты.Итог("Сумма") < 0;

	ВыдачаНаличных		= ДанныеXDTO.Свойство("AdditionalInfo", AdditionalInfo) И AdditionalInfo.Свойство("ЭтоВыдачаНаличных");
	
	ИспользованиеПКО.Документ_ЧекККМ_Получение 							= ПродажаТоваровУслуг ИЛИ ПродажаПС ИЛИ ВыдачаНаличных;
	ИспользованиеПКО.Документ_ЧекККМВозврат_Получение 					= (ВозвратТоваровУслуг ИЛИ ВозвратПС) И Не ВыдачаНаличных;
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СоставНабора_Отправка(ПравилаОбработкиДанных)    
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СоставНабора_Отправка";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СоставНабора_Отправка_ПриОбработке";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СоставНаборов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СоставНабора_Отправка");
	
КонецПроцедуры

Процедура ПОД_Справочник_СоставНабора_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"
		ИЛИ ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("НоменклатураНабора", 	Справочники.Номенклатура.ПустаяСсылка());
	
	Для Каждого Отбор Из ДанныеИБ.Отбор Цикл
		
		Если Отбор.Использование Тогда
			СтруктураОтборов.Вставить(Отбор.Имя, Отбор.Значение);
		КонецЕсли;
		
	КонецЦикла;

	ПометкаУдаления	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОтборов.НоменклатураНабора, "ПометкаУдаления");
	
	Если ПометкаУдаления Тогда
		ИспользованиеПКО.Справочник_СоставНабора_Отправка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БонусныеПрограммы_Отправка(ПравилаОбработкиДанных)   
	
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_БонусныеПрограммы_Отправка");
	ПравилоОбработки.Имя                     = "Справочник_БонусныеПрограммы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БонусныеПрограммы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Справочник_БонусныеПрограммы_Отправка") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БонусныеПрограммы_Отправка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДисконтныеКарты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_ДисконтныеКарты_Отправка");
	ПравилоОбработки.Имя                     = "Справочник_ДисконтныеКарты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДисконтныеКарты;
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Справочник_ДисконтныеКарты_Отправка") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДисконтныеКарты_Отправка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных)

	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_ЭквайринговыеТерминалы_Отправка");
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СпособыОплаты;
	
	Если ПравилоОбработки.ИспользуемыеПКО.Найти("Справочник_ЭквайринговыеТерминалы_Отправка") = Неопределено Тогда
		ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы_Отправка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

#Область ТекстЗапроса
	ТекстЗапросаМарки = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Номенклатура = &Номенклатура
	|	И НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура ЕСТЬ NULL
	|	И ШтрихкодыУпаковокТоваров.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО ШтрихкодыУпаковокТоваров.Ссылка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Номенклатура = &Номенклатура
	|	И НЕ АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.Реализована)
	|	И ШтрихкодыУпаковокТоваров.ПометкаУдаления = ЛОЖЬ";
	
#КонецОбласти
	
	ИспользованиеПКО.Справочник_ВидыПодарочныхСертификатов_Отправка = Ложь;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;

	ИспользованиеПКО.Очистить();	
	
	Если ДанныеИБ.ПометкаУдаления Тогда

		ИспользованиеПКО.Вставить("Справочник_Номенклатура_Отправка", 					Ложь);
		ИспользованиеПКО.Вставить("Справочник_НоменклатураГруппа", 						Ложь);
		ИспользованиеПКО.Вставить("Справочник_ВидыПодарочныхСертификатов_Отправка", 	Ложь);

    	Возврат
		
	ИначеЕсли ДанныеИБ.ЭтоГруппа Тогда
		
		ИспользованиеПКО.Вставить("Справочник_НоменклатураГруппа", 						Истина);
		
		Возврат;
		
	КонецЕсли;
	
	Продукция10Релиза = Новый Массив;
	Продукция10Релиза.Добавить(Перечисления.ВидыПродукцииИС.АльтернативныйТабак);	
	Продукция10Релиза.Добавить(Перечисления.ВидыПродукцииИС.УпакованнаяВода);	
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.10") 
		И Продукция10Релиза.Найти(ДанныеИБ.ВидПродукцииИС) <> Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Если ДанныеИБ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		ИспользованиеПКО.Вставить("Справочник_ВидыПодарочныхСертификатов_Отправка", 	Истина);
	Иначе
		ИспользованиеПКО.Вставить("Справочник_Номенклатура_Отправка", 					Истина);
	КонецЕсли;
	
	Номенклатура = ДанныеИБ.Ссылка;
		
	НаборВсехШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	НаборВсехШК.Отбор.Номенклатура.Установить(Номенклатура);
		
	НаборВсехШК.Прочитать();
		
	Для Каждого ЗаписьШК Из НаборВсехШК Цикл
			
		ОбъектШтрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
			
		ОбъектШтрихкод.Отбор.Штрихкод.Установить(ЗаписьШК.Штрихкод);
		ОбъектШтрихкод.Отбор.Номенклатура.Установить(ЗаписьШК.Номенклатура);
		ОбъектШтрихкод.Отбор.Характеристика.Установить(ЗаписьШК.Характеристика);
		ОбъектШтрихкод.Отбор.Партия.Установить(ЗаписьШК.Партия);
		ОбъектШтрихкод.Отбор.ЕдиницаИзмерения.Установить(ЗаписьШК.ЕдиницаИзмерения);
		
		ЗаполнитьЗначенияСвойств(ОбъектШтрихкод.Добавить(), ЗаписьШК);
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектШтрихкод);
			
	КонецЦикла;
		
	ВыборкаСерии = Справочники.СерииНоменклатуры.Выбрать(, Номенклатура);
			
	Пока ВыборкаСерии.Следующий() Цикл
				
		СерияОбъект = ВыборкаСерии.Ссылка.ПолучитьОбъект();
			
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СерияОбъект);
				
	КонецЦикла;
			
	ВыборкаЕдиницы = Справочники.ЕдиницыИзмерения.Выбрать(, Номенклатура);
		
	Пока ВыборкаЕдиницы.Следующий() Цикл
				
		ЕдиницаИзмеренияОбъект = ВыборкаЕдиницы.Ссылка.ПолучитьОбъект();
			
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ЕдиницаИзмеренияОбъект);
				
	КонецЦикла;
		
	ПравилоМаркиОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ШтрихкодыУпаковокТоваров_Отправка", "Имя");
	Если Не ПравилоМаркиОтправка = Неопределено Тогда
		Запрос = Новый Запрос(ТекстЗапросаМарки);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
		ВыборкаМарки = Запрос.Выполнить().Выбрать();
				
		Пока ВыборкаМарки.Следующий() Цикл
			МаркаОбъект = ВыборкаМарки.Ссылка.ПолучитьОбъект();
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, МаркаОбъект, ПравилоМаркиОтправка);
		КонецЦикла;
	КонецЕсли;

	ПравилоНаборОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_СоставНабора_Отправка", "Имя");
	Если Не ПравилоНаборОтправка = Неопределено
		И ДанныеИБ.ЭтоНабор Тогда
		
		ДублиЗаписей  = Новый Соответствие;
		
		РегистрСоставНабора = РегистрыСведений.СоставНаборов.СоздатьНаборЗаписей();
		РегистрСоставНабора.Отбор.НоменклатураНабора.Установить(ДанныеИБ.Ссылка);
		
		РегистрСоставНабора.Прочитать();
		
		Для Каждого ЗаписьНабора Из РегистрСоставНабора Цикл
			
			Ключ = XMLСтрока(ЗаписьНабора.ХарактеристикаНабора) + XMLСтрока(ЗаписьНабора.Общий);
			
			Если ДублиЗаписей.Получить(Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РегистрСоставНабора.Отбор.ХарактеристикаНабора.Установить(ЗаписьНабора.ХарактеристикаНабора);
			РегистрСоставНабора.Отбор.Общий.Установить(ЗаписьНабора.Общий);
			
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, РегистрСоставНабора, ПравилоНаборОтправка);
			
			ДублиЗаписей.Вставить(Ключ, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ПравилоНаборОтправка = Неопределено И ДанныеИБ.ЭтоАгентскаяУслуга Тогда
		// Выгрузим агентскую услугу и вознаграждение как "Набор".
		
		ДанныеНабора = Новый Структура;
		ДанныеНабора.Вставить("ЭтоАгентскаяУслуга", Истина);
		ДанныеНабора.Вставить("НоменклатураНабора", ДанныеИБ.Ссылка);
		ДанныеНабора.Вставить("ХарактеристикаНабора", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		
		ПризнакиАгента = Новый Массив;
		ПризнакиАгента.Добавить(Перечисления.ПризнакиАгента.ПлатежныйАгент);
		ПризнакиАгента.Добавить(Перечисления.ПризнакиАгента.ПлатежныйСубагент);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатураНабора", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ПризнакиАгента", ПризнакиАгента);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Количество,
		|	100 - ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.ВознаграждениеВключеноВСтоимость
		|			ТОГДА ЕСТЬNULL(ПроцентыВознагражденияПоДоговорамСрезПоследних.ПроцентВознаграждения, ДоговорыКонтрагентов.ПроцентКомиссионногоВознаграждения)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДоляСтоимости,
		|	1 КАК НомерСтрокиДокумента
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО СправочникНоменклатура.Договор = ДоговорыКонтрагентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыВознагражденияПоДоговорам.СрезПоследних(&Дата, Номенклатура = &НоменклатураНабора) КАК ПроцентыВознагражденияПоДоговорамСрезПоследних
		|		ПО СправочникНоменклатура.Договор = ПроцентыВознагражденияПоДоговорамСрезПоследних.ДоговорКонтрагента
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &НоменклатураНабора
		|	И ДоговорыКонтрагентов.ПризнакАгента В (&ПризнакиАгента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.УслугаКомиссионногоВознаграждения,
		|	СправочникНоменклатура.ЕдиницаИзмерения,
		|	1,
		|	ЕСТЬNULL(ПроцентыВознагражденияПоДоговорамСрезПоследних.ПроцентВознаграждения, ДоговорыКонтрагентов.ПроцентКомиссионногоВознаграждения),
		|	2
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО СправочникНоменклатура.Договор = ДоговорыКонтрагентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыВознагражденияПоДоговорам.СрезПоследних(&Дата, Номенклатура = &НоменклатураНабора) КАК ПроцентыВознагражденияПоДоговорамСрезПоследних
		|		ПО СправочникНоменклатура.Договор = ПроцентыВознагражденияПоДоговорамСрезПоследних.ДоговорКонтрагента
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &НоменклатураНабора
		|	И ДоговорыКонтрагентов.ПризнакАгента В (&ПризнакиАгента)";
		
		Товары = Запрос.Выполнить().Выгрузить();
		Если Товары.Количество() Тогда
			ДанныеНабора.Вставить("Товары", Товары);
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеНабора, ПравилоНаборОтправка);
		КонецЕсли;;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из ДанныеИБ.АкцизныеМарки Цикл

		МаркаОбъект = Строка.МаркаСсылка.ПолучитьОбъект();
				
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, МаркаОбъект);
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыПодарочныхСертификатов_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_ФизическиеЛица_Получение");
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ФизическиеЛица_Получение_ПриОбработке";
	
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_ФизическиеЛица_Получение = Ложь;
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДисконтныеКарты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПолучитьПравилоОбработки(ПравилаОбработкиДанных, "Справочник_ДисконтныеКарты_Получение");
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ДисконтныеКарты_Получение_ПриОбработке";
	
КонецПроцедуры

Процедура ПОД_Справочник_ДисконтныеКарты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_ДисконтныеКарты_Получение",
		"ИмяПКО");
	Если Не ПравилоКонвертации = Неопределено Тогда
		СвойствоВладелецКарты = ПравилоКонвертации.Свойства.Найти("ВладелецКарты", "СвойствоКонфигурации");
		Если Не СвойствоВладелецКарты = Неопределено Тогда
			ПравилоКонвертации.Свойства.Удалить(СвойствоВладелецКарты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонвертацияДанных

Процедура ДобавитьПКО_Документ_РасходныйКассовыйОрдер_ИзСтр_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РасходныйКассовыйОрдер_ИзСтр_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РасходныйКассовыйОрдер_ИзСтр_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  	"Дата", 1);
	ДобавитьПКС(СвойстваШапки, "КассаККМ",              	"КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           	"Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                 	"Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",           	"Организация", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Автор",         			"", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",             	 	"", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        	"СуммаДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", 	"", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации", 				"", 1);
	ДобавитьПКС(СвойстваШапки, "Статья", 					"", 1);
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ", 				"", 1);
	ДобавитьПКС(СвойстваШапки, "НовыйМеханизмИнкассации", 	"", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПлатежа", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Курс", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Кратность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	
	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,КассаККМ,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_РасходныйКассовыйОрдер_ИзСтр_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	ШаблонРеквизитов  = Новый Структура;
	ШаблонРеквизитов.Вставить("Организация", 			"Владелец");
	ШаблонРеквизитов.Вставить("Касса", 					"Владелец.КассаПоУмолчанию");
	ШаблонРеквизитов.Вставить("ВалютаДенежныхСредств", 	"ВалютаДенежныхСредств");
	ШаблонРеквизитов.Вставить("СтруктурнаяЕдиница",		"СтруктурнаяЕдиница");

	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, ШаблонРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ПолученныеДанные, РеквизитыКассыККМ);

	ПолученныеДанные.НовыйМеханизмИнкассации    = Истина;
	ПолученныеДанные.Проведен 					= Истина;
	ПолученныеДанные.ВидОперации 				= Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ;
	ПолученныеДанные.Статья 					= Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	ПолученныеДанные.НомерЧекаККМ 				= ДанныеXDTO.КлючевыеСвойства.НомерЧекаККМ;
	ПолученныеДанные.НалогообложениеНДС 		= НалогиУНФ.НалогообложениеНДС(
		РеквизитыКассыККМ.Организация, 
		РеквизитыКассыККМ.СтруктурнаяЕдиница, 
		ПолученныеДанные.Дата);
		
	// заполнение расшифровки платежа
	РасшифровкаПлатежа = ПолученныеДанные.РасшифровкаПлатежа.Выгрузить();
	
	СтрокаТабличнойЧасти = РасшифровкаПлатежа.Добавить();
	СтрокаТабличнойЧасти.СуммаПлатежа 	= ПолученныеДанные.СуммаДокумента;
	СтрокаТабличнойЧасти.Курс 			= 1;
	СтрокаТабличнойЧасти.Кратность 		= 1;
	СтрокаТабличнойЧасти.СуммаРасчетов 	= СтрокаТабличнойЧасти.СуммаПлатежа;
	СтрокаТабличнойЧасти.СтавкаНДС 		= УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВнесениеНаличных_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_ВнесениеНаличных_Получение");
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ОтчетОРозничныхПродажах",   "", 1);  
	ДобавитьПКС(СвойстваШапки, "Автор",     				"", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование", 		"", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнесениеНаличных_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)

	ДокументОснованиеСтруктура = Новый Структура();
	ДокументОснованиеСтруктура.Вставить("Дата", 				ПолученныеДанные.Дата);
	ДокументОснованиеСтруктура.Вставить("НомерКассовойСмены",	ДанныеXDTO.КлючевыеСвойства.НомерКассовойСмены);
	ДокументОснованиеСтруктура.Вставить("КассаККМ", 			ПолученныеДанные.КассаККМ);

	Инструкция 	= Новый Структура(
		"Значение, ИмяПКО", 
		ДокументОснованиеСтруктура, 
		"Документ_ОтчетОРозничныхПродажах_ИзСтр_Получение");
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ОтчетОРозничныхПродажах", 		Инструкция); 
	
	ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
    ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные);
	
	ДокументОснованиеСтруктура = Новый Структура();
	ДокументОснованиеСтруктура.Вставить("Дата");
	ДокументОснованиеСтруктура.Вставить("Номер"); 
	ДокументОснованиеСтруктура.Вставить("Организация");
	ДокументОснованиеСтруктура.Вставить("КассаККМ");          
	ДокументОснованиеСтруктура.Вставить("НомерЧекаККМ");
	ДокументОснованиеСтруктура.Вставить("Автор");
	ДокументОснованиеСтруктура.Вставить("СуммаДокумента");			
	
	ЗаполнитьЗначенияСвойств(ДокументОснованиеСтруктура, ПолученныеДанные);
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("НомерЧекаФР") Тогда
		ДокументОснованиеСтруктура.Вставить("НомерЧекаККМ",	ДанныеXDTO.КлючевыеСвойства.НомерЧекаФР);
	КонецЕсли;

	Инструкция 	= Новый Структура(
		"Значение, ИмяПКО", 
		ДокументОснованиеСтруктура, 
		"Документ_РасходныйКассовыйОрдер_ИзСтр_Получение");
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", 		Инструкция); 
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВыемкаНаличных_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_ВыемкаНаличных_Получение");
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",         			"", 1);
	ДобавитьПКС(СвойстваШапки, "ОтчетОРозничныхПродажах",   "", 1);  

КонецПроцедуры

Процедура ПКО_Документ_ВыемкаНаличных_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
    ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные);

	ДокументОснованиеСтруктура = Новый Структура();
	ДокументОснованиеСтруктура.Вставить("Дата", 				ПолученныеДанные.Дата);
	ДокументОснованиеСтруктура.Вставить("НомерКассовойСмены",	ДанныеXDTO.КлючевыеСвойства.НомерКассовойСмены);
	ДокументОснованиеСтруктура.Вставить("КассаККМ", 			ПолученныеДанные.КассаККМ);

	Инструкция 	= Новый Структура(
		"Значение, ИмяПКО", 
		ДокументОснованиеСтруктура, 
		"Документ_ОтчетОРозничныхПродажах_ИзСтр_Получение");
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ОтчетОРозничныхПродажах", 		Инструкция); 
		
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КассоваяСменаВОтчетОРозничныхПродажах(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаВОтчетОРозничныхПродажах";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОткрытиеКассовойСмены";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "Документ_КассоваяСменаВОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;

	ДобавитьПКС(СвойстваШапки, "Дата",               	"Дата");
	ДобавитьПКС(СвойстваШапки, "НомерКассовойСменыККМ", "НомерКассовойСмены");   
	ДобавитьПКС(СвойстваШапки, "НачалоКассовойСмены", 	"Дата");   
	ДобавитьПКС(СвойстваШапки, "КассаККМ",           	"КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        	"Комментарий");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    	"", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Организация",        	"", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", 	"", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "КассоваяСмена", 		"", 1);
	ДобавитьПКС(СвойстваШапки, "Подразделение",      	"", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",             	"", 1, "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "СтатусКассовойСмены",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",   				"", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   	"", 1);
	ДобавитьПКС(СвойстваШапки, "Автор",         		"", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", 	"", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Проведен",           	"", 1);
	
	ПравилоКонвертации.ПоляПоиска.Добавить("КассоваяСмена");
	
КонецПроцедуры

Процедура Документ_КассоваяСменаВОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	ШаблонРеквизитов  = Новый Структура;
	ШаблонРеквизитов.Вставить("Организация", 			"Владелец");
	ШаблонРеквизитов.Вставить("ВалютаДокумента", 		"ВалютаДенежныхСредств");
	ШаблонРеквизитов.Вставить("Подразделение",			"Подразделение");
	ШаблонРеквизитов.Вставить("СтруктурнаяЕдиница",		"СтруктурнаяЕдиница");
	ШаблонРеквизитов.Вставить("ВидЦен",					"СтруктурнаяЕдиница.РозничныйВидЦен"); 
	ШаблонРеквизитов.Вставить("СуммаВключаетНДС",		"СтруктурнаяЕдиница.РозничныйВидЦен.ЦенаВключаетНДС"); 
	
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, ШаблонРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ПолученныеДанные, РеквизитыКассыККМ);
	
	ПолученныеДанные.Проведен 				= Истина;
	ПолученныеДанные.СтатусКассовойСмены 	= Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
	ПолученныеДанные.Статья 				= Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ПолученныеДанные.НалогообложениеНДС 	= НалогиУНФ.НалогообложениеНДС(
		ПолученныеДанные.Организация, 
		ПолученныеДанные.СтруктурнаяЕдиница, 
		ПолученныеДанные.Дата);
	
	ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
    ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные);

	Инструкция 	= Новый Структура(
		"Значение, ИмяПКО", 
		ДанныеXDTO.КлючевыеСвойства, 
		"Документ_КассоваяСменаОткрытиеИзСтруктуры_Получение");
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("КассоваяСмена", Инструкция); 
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КассоваяСменаОткрытие_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_КассоваяСменаОткрытие_Получение");
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаОткрытие_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОткрытиеКассовойСмены";
	ПравилоКонвертации.АлгоритмПоиска				= "АлгоритмПоиска_НайтиКассовуюСмену";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        			"Дата");
	ДобавитьПКС(СвойстваШапки, "НачалоКассовойСмены",  	"Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСменыККТ",  		"Дата");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККТ",        	"НомерКассовойСмены", 1);
	ДобавитьПКС(СвойстваШапки, "КассаККМ",    			"КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",       			"НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Организация", 			"", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",    			"", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",      			"", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,КассаККМ,НомерСменыККТ");  
	
КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)

	РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(ПолученныеДанные.КассаККМ);
	ЗаполнитьЗначенияСвойств(ПолученныеДанные, РеквизитыКассыККМ);

	ПолученныеДанные.Статус 	= Перечисления.СтатусыКассовойСмены.Открыта;
    ПолученныеДанные.Проведен 	= Ложь; // документ будет проводиться после загрузки данных (для формирования выемки наличных)
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_ИзСтр_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажах_ИзСтр_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "Документ_КассоваяСменаВОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               	"Дата");
	ДобавитьПКС(СвойстваШапки, "НомерКассовойСменыККМ", "НомерКассовойСмены");   
	ДобавитьПКС(СвойстваШапки, "НачалоКассовойСмены", 	"Дата");   
	ДобавитьПКС(СвойстваШапки, "КассаККМ",           	"КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    	"", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Организация",        	"", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", 	"", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "КассоваяСмена", 		"", 1);
	ДобавитьПКС(СвойстваШапки, "Подразделение",      	"", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",             	"", 1, "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "СтатусКассовойСмены",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",   				"", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   	"", 1);
	ДобавитьПКС(СвойстваШапки, "Автор",         		"", 1);
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", 	"", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Проведен",           	"", 1);
	
	ПравилоКонвертации.ПоляПоиска.Добавить("КассоваяСмена");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КассоваяСменаОткрытиеИзСтруктуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_КассоваяСменаОткрытиеИзСтруктуры_Получение");
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаОткрытиеИзСтруктуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.АлгоритмПоиска				= "АлгоритмПоиска_НайтиКассовуюСмену";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КассоваяСменаОткрытие_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        			"Дата");
	ДобавитьПКС(СвойстваШапки, "НачалоКассовойСмены",  	"Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаСменыККТ",  		"Дата");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККТ",        	"НомерКассовойСмены", 1);
	ДобавитьПКС(СвойстваШапки, "КассаККМ",    			"КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация", 			"", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",    			"", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",      			"", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,КассаККМ,НомерСменыККТ");  
	
КонецПроцедуры

Процедура АлгоритмПоиска_НайтиКассовуюСмену(ДанныеИБ, ПолученныеДанные, КомпонентыОбмена)
	
    ТекстаЗапроса = 
	
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.НомерСменыККТ = &НомерСменыККТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.НачалоКассовойСмены МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.НомерСменыККТ = &НомерСменыККТ";

	Если ДанныеИБ = Неопределено Тогда
		
		Запрос = Новый Запрос(ТекстаЗапроса);
		Запрос.УстановитьПараметр("Дата", 			ПолученныеДанные.Дата);
		Запрос.УстановитьПараметр("КассаККМ", 		ПолученныеДанные.КассаККМ);
		Запрос.УстановитьПараметр("НомерСменыККТ", 	ПолученныеДанные.НомерСменыККТ);

		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаЗапроса.Следующий() Тогда
			ДанныеИБ = ВыборкаЗапроса.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_КассоваяСменаЗакрытие_Получение");
	ПравилоКонвертации.ИмяПКО                       = "Документ_КассоваяСменаЗакрытие_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗакрытиеКассовойСмены";
	ПравилоКонвертации.АлгоритмПоиска				= "АлгоритмПоиска_НайтиКассовуюСмену";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "КассаККМ",               "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",        			 "Дата");
	ДобавитьПКС(СвойстваШапки, "ОкончаниеКассовойСмены", "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККТ",          "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "Статус",               	 "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",    			 "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,КассаККМ,НомерСменыККТ");  
	
КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаЗакрытие_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		ПолученныеДанные.Проведен = Истина;
	Иначе
		ПолученныеДанные.Проведен = Ложь; // документ будет проводиться после загрузки данных (для формирования выемки наличных)
	КонецЕсли;
	
	ПолученныеДанные.Статус = Перечисления.СтатусыКассовойСмены.Закрыта;
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажахЗакрытие_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажахЗакрытие_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗакрытиеКассовойСмены";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "Документ_ОтчетОРозничныхПродажахЗакрытие_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗакрытиеКассовойСмены";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;

	ДобавитьПКС(СвойстваШапки, "Дата",               		"Дата");   
	ДобавитьПКС(СвойстваШапки, "ОкончаниеКассовойСмены",    "Дата");   
	ДобавитьПКС(СвойстваШапки, "Комментарий",        		"Комментарий");
	ДобавитьПКС(СвойстваШапки, "КассоваяСмена", 			"", 1);
	ДобавитьПКС(СвойстваШапки, "СтатусКассовойСмены",   	"", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",           		"", 1);
	
	ПравилоКонвертации.ПоляПоиска.Добавить("КассоваяСмена");
	
КонецПроцедуры

Процедура Документ_ОтчетОРозничныхПродажахЗакрытие_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	ПолученныеДанные.Проведен 				= Истина;
	
	Если Константы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены.Получить() Тогда
		ПолученныеДанные.СтатусКассовойСмены 	= Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы;
	Иначе
		ПолученныеДанные.СтатусКассовойСмены 	= Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	КонецЕсли;
	
	Инструкция 	= Новый Структура(
		"Значение, ИмяПКО", 
		ДанныеXDTO.КлючевыеСвойства, 
		"Документ_КассоваяСменаОткрытиеИзСтруктуры_Получение");
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("КассоваяСмена", Инструкция); 
	
КонецПроцедуры

Процедура ОтложеннаяОбработка_ЗакрытиеКассовойСмены(Объект, КомпонентыОбмена)                 
	
	#Область ТекстаЗапросаВыдачаПодарка
	ТекстЗапросаЧеки = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	""Документ.ЧекККМ"" КАК ТипОбъекта
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	НЕ ЧекККМ.Проведен
	|	И ЧекККМ.НомерЧекаККМ > 0
	|	И ЧекККМ.КассоваяСмена = &ОтчетОРозничныхПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	""Документ.ЧекККМВозврат""
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.НомерЧекаККМ > 0
	|	И ЧекККМВозврат.КассоваяСмена = &ОтчетОРозничныхПродажах";
	
    ТекстЗапросаПодарки = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АвтоматическиеСкидки.СчетЗатратПодарка КАК СчетЗатратПодарка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	АвтоматическиеСкидки.ПометкаУдаления = ЛОЖЬ
	|	И АвтоматическиеСкидки.Действует = ИСТИНА
	|	И АвтоматическиеСкидки.СчетЗатратПодарка <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеЗапасов КАК СписаниеЗапасов
	|ГДЕ
	|	СписаниеЗапасов.Проведен = ИСТИНА
	|	И СписаниеЗапасов.ДокументОснование = &ОтчетОРозничныхПродажах";
	#КонецОбласти
	
	// обработка чеков
	Запрос = Новый Запрос(ТекстЗапросаЧеки);
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", Объект.Ссылка);
	ВыборкаЧековККМ = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЧековККМ.Следующий() Цикл
		
		ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
		ЧекККМОбъект.Проведен = Истина;

		Если Объект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы Тогда
			ЧекККМОбъект.Архивный = Истина;
		КонецЕсли;
		
		ОбменДаннымиXDTOСервер.ЗаписатьОбъектВИБ(КомпонентыОбмена, ЧекККМОбъект, ВыборкаЧековККМ.ТипОбъекта);
		
	КонецЦикла;

	Документы.ОтчетОРозничныхПродажах.ЗаполнитьОтчетОРозничныхПродажахПоДаннымВЧеках(Объект);
	
	Если Объект.СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы Тогда
		Документы.ОтчетОРозничныхПродажах.УдалитьДвиженияПоРегиструЗапасыВПробитыхЧекахККМ(Объект);
	КонецЕсли;
	
	Запрос 		   = Новый Запрос(ТекстЗапросаПодарки);
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", Объект.Ссылка);
	
	ПакетЗапросов  = Запрос.ВыполнитьПакет();
	ВыборкаСкидок  = ПакетЗапросов[0].Выбрать();
	
	Если ВыборкаСкидок.Следующий()
		И ПакетЗапросов[1].Пустой() Тогда
		РозничныеПродажиСервер.СписаниеПодарков(Объект.Ссылка, ВыборкаСкидок.СчетЗатратПодарка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_УдалениеПозицииПрайсЛиста_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_УдалениеПозицииПрайсЛиста_Отправка";
	ПравилоКонвертации.ОбъектФормата                = "Справочник.УдалениеПозицииПрайсЛиста";
	ПравилоКонвертации.ПриОтправкеДанных 			= "ПКО_Справочник_УдалениеПозицииПрайсЛиста_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ХешЗаписи", "", 1);
	
КонецПроцедуры

Процедура ПКО_Справочник_УдалениеПозицииПрайсЛиста_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)

	Перем УдалитьВсеЦены;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ХД = Новый ХешированиеДанных(ХешФункция.MD5);

	Если ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		ХД.Добавить(XMLСтрока(ДанныеИБ.Ссылка));
	Иначе
		
		Если ДанныеИБ.ДополнительныеСвойства.Свойство("УдалитьВсеЦены", УдалитьВсеЦены)
			И УдалитьВсеЦены Тогда 
			
			ХД.Добавить(XMLСтрока(Справочники.ВидыЦен.ПустаяСсылка()));
			
		Иначе		
			
			ХД.Добавить(XMLСтрока(ДанныеИБ.Отбор.Период.Значение));
			ХД.Добавить(XMLСтрока(ДанныеИБ.Отбор.ВидЦен.Значение));
			ХД.Добавить(XMLСтрока(ДанныеИБ.Отбор.Номенклатура.Значение));
			ХД.Добавить(XMLСтрока(ДанныеИБ.Отбор.Характеристика.Значение));
			ХД.Добавить(XMLСтрока(Справочники.СерииНоменклатуры.ПустаяСсылка()));
			
		КонецЕсли;		
		
	КонецЕсли;
	
	ХешКлюча			= НРег(СтрЗаменить(ХД.ХешСумма, " ", ""));

	ДанныеXDTO.КлючевыеСвойства.Вставить("ХешЗаписи", ХешКлюча);
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_УстановкаЦенНоменклатуры_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "SKU", 1);

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Перем Записи;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" 
		ИЛИ ДанныеXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Товары", Записи) Тогда
		
		МассивНоменклатуры = Записи.ВыгрузитьКолонку("Номенклатура");
		
		// удаление работ и операций
		Записи.Индексы.Добавить("Номенклатура");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Т
		|ГДЕ
		|	Т.Ссылка В(&Номенклатура)
		|	И НЕ Т.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))");
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			СтрокиНаУдаление = Записи.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаЗапроса.Ссылка));
			
			Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
				Записи.Удалить(СтрокаНаУдаление);
			КонецЦикла;
			
			СтрокаМассива = МассивНоменклатуры.Найти(ВыборкаЗапроса.Ссылка);
			
			Если СтрокаМассива <> Неопределено Тогда
				МассивНоменклатуры.Удалить(СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Записи.Количество() > 0 Тогда
			
			// Заполнение SKU
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КодыТоваровSKU.SKU КАК SKU,
			|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
			|	КодыТоваровSKU.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
			|ГДЕ
			|	КодыТоваровSKU.Номенклатура В(&Номенклатура)";
			
			Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	
			КодыТоваров = Запрос.Выполнить().Выгрузить();
			КодыТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
			Если КодыТоваров.Количество() Тогда
		
				Если Записи.Колонки.Найти("SKU") = Неопределено Тогда
					Записи.Колонки.Добавить("SKU", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(9)));
				КонецЕсли;
		
				Для Каждого СтрокаТЧ Из Записи Цикл
			
					СтрокаСКодом = КодыТоваров.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
					СтрокаСКодом = ?(СтрокаСКодом.Количество(), СтрокаСКодом[0], Неопределено);
			
					Если СтрокаСКодом <> Неопределено Тогда
						СтрокаТЧ.SKU 		= Формат(СтрокаСКодом.SKU, "ЧГ=");
					КонецЕсли;
			
				КонецЦикла;
		
			КонецЕсли;
	
		Иначе
			ДанныеXDTO.Вставить("ОчиститьДанныеXDTO", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_УстановкаЦенНоменклатурыРегистр_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "SKU", 1);
	
КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Перем Записи;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" 
		ИЛИ ДанныеXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаСтрокой = СтрЗаменить(ДанныеИБ.Отбор.Период.Значение, "/", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ".", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, " ", "");
		
		НомерСтрокой = Сред(ДатаСтрокой,1,6) + Прав(ДанныеИБ.Отбор.Номенклатура.Значение.Код, "3") + Прав(ДанныеИБ.Отбор.ВидЦен.Значение.Код, "2");
		
			// Свойство, соответствующее отбору, заполняется из отбора в наборе записей.
		ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", ДанныеИБ.Отбор.Период.Значение);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерСтрокой);
		
		ДанныеXDTO.Вставить("ТипЦен", ДанныеИБ.Отбор.ВидЦен.Значение);
		
		// Подготовка таблицы значений, содержащую данные из набора записей.
		Записи = Новый ТаблицаЗначений;
		Записи.Колонки.Добавить("Номенклатура");
		Записи.Колонки.Добавить("Характеристика");
		Записи.Колонки.Добавить("Упаковка");
		Записи.Колонки.Добавить("Цена");
		
		Для Каждого СтрокаНабора Из ДанныеИБ Цикл
			СтрокаЗаписи = Записи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
			
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.6")
				И НЕ (ЗначениеЗаполнено(СтрокаНабора.Характеристика.Владелец) И ТипЗнч(СтрокаНабора.Характеристика.Владелец) = Тип("СправочникСсылка.Номенклатура")) Тогда
				СтрокаЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			
			Если ТипЗнч(СтрокаНабора.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				СтрокаЗаписи.Упаковка = СтрокаНабора.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Записи.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Товары", Записи);
		КонецЕсли;
		
	Если ДанныеXDTO.Свойство("Товары", Записи) Тогда
		
		МассивНоменклатуры = Записи.ВыгрузитьКолонку("Номенклатура");
		
		// удаление работ и операций
		Записи.Индексы.Добавить("Номенклатура");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Т
		|ГДЕ
		|	Т.Ссылка В(&Номенклатура)
		|	И НЕ Т.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))");
		
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			СтрокиНаУдаление = Записи.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаЗапроса.Ссылка));
			
			Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
				Записи.Удалить(СтрокаНаУдаление);
			КонецЦикла;
			
			СтрокаМассива = МассивНоменклатуры.Найти(ВыборкаЗапроса.Ссылка);
			
			Если СтрокаМассива <> Неопределено Тогда
				МассивНоменклатуры.Удалить(СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Записи.Количество() > 0 Тогда
			
			// Заполнение SKU
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КодыТоваровSKU.SKU КАК SKU,
			|	КодыТоваровSKU.Номенклатура КАК Номенклатура,
			|	КодыТоваровSKU.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
			|ГДЕ
			|	КодыТоваровSKU.Номенклатура В(&Номенклатура)";
			
			Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	
			КодыТоваров = Запрос.Выполнить().Выгрузить();
			КодыТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
			Если КодыТоваров.Количество() Тогда
		
				Если Записи.Колонки.Найти("SKU") = Неопределено Тогда
					Записи.Колонки.Добавить("SKU", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(9)));
				КонецЕсли;
		
				Для Каждого СтрокаТЧ Из Записи Цикл
			
					СтрокаСКодом = КодыТоваров.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
					СтрокаСКодом = ?(СтрокаСКодом.Количество(), СтрокаСКодом[0], Неопределено);
			
					Если СтрокаСКодом <> Неопределено Тогда
						СтрокаТЧ.SKU 		= Формат(СтрокаСКодом.SKU, "ЧГ=");
					КонецЕсли;
			
				КонецЦикла;
		
			КонецЕсли;
	
		Иначе
			ДанныеXDTO.Вставить("ОчиститьДанныеXDTO", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_ЧекККМ_Получение");
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДисконтнаяКарта",  "КартаЛояльности", , "Справочник_ДисконтныеКарты_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",    			"", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",      			"", 1);
	ДобавитьПКС(СвойстваШапки, "НДСВключатьВСтоимость", "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",    	"", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПроцентСкидкиНаценки",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСкидкиНаценки",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПроцентАвтоматическойСкидки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаАвтоматическойСкидки",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСкидкиОплатыБонусом",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Партия",                      "", 1);
	

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "БезналичнаяОплата",            "");
	ДобавитьПКС(СвойстваТЧ, "ВидПлатежнойКарты",			   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СсылочныйНомер",			   	   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторПлатежнойСистемы",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаКомиссии",			   	   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат",      	   "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерСертификата",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПогашенияСертификата",	   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБонусов",			   	   	   "", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",	"");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",				   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АкцизныеМарки",                   "");
	ДобавитьПКС(СвойстваТЧ, "АкцизнаяМарка",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КодАкцизнойМарки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ШтрихкодУпаковки", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Подарки",            "");
	ДобавитьПКС(СвойстваТЧ, "Всего",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",				   "", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииПодарков",	"");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",	  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СкидкиНаценки", "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",		"", 1);
	ДобавитьПКС(СвойстваТЧ, "СкидкаНаценка",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "БонусныеБаллыКНачислению", "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СкидкаНаценка",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДатаНачисления",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоБонусныхБаллов",    "", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПримененныеПромокоды", "");
	ДобавитьПКС(СвойстваТЧ, "Промокод", 					"", 1);
	ДобавитьПКС(СвойстваТЧ, "УсловиеПредоставленияСкидки",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СкидкаПредоставлена",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭтоАктивацияПромокода",        "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты) Тогда
		Для каждого ЭлементКоллекции Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
			ДополнительныйРеквизит = ЭлементКоллекции.Свойство;
			ЗначениеДополнительногоРеквизита = ЭлементКоллекции.ЗначениеСвойства;
			Если ДополнительныйРеквизит.Свойство("Наименование")
				И НРЕГ(СокрЛП(ДополнительныйРеквизит.Наименование)) = НРЕГ("ИдентификаторДисконтнойКарты")
				И НЕ (ЗначениеДополнительногоРеквизита = Неопределено) Тогда
					ЗаполнитьДисконтнуюКартуПоУникальномуИдентификатору(ПолученныеДанные, ЗначениеДополнительногоРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ВидЦен		   		= КомпонентыОбмена.УзелКорреспондента.ВидЦен;
	ПолученныеДанные.Статус 			= Перечисления.СтатусыЧековККМ.Пробит;
	ПолученныеДанные.Договор 			= ПолученныеДанные.Заказ.Договор;

	Если ПолученныеДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
	
		ЦенаВключаетНДС							 = КомпонентыОбмена.УзелКорреспондента.ВидЦен.ЦенаВключаетНДС;
		
		ПолученныеДанные.НДСВключатьВСтоимость 	 = ЦенаВключаетНДС;
		ПолученныеДанные.СуммаВключаетНДС 	 	 = ЦенаВключаетНДС;
		
	КонецЕсли;
		
	ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
	
	ЗаполнитьСвойстваТЧТовары(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
	
	МассивСтрокОплата = ПолучитьСтрокиТЧБезналичнаяОплата(ДанныеXDTO, КомпонентыОбмена);
		
	ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокОплата);
	
	Если ДанныеXDTO.Свойство("ПризнакСпособаРасчета") И ЗначениеЗаполнено(ДанныеXDTO.ПризнакСпособаРасчета.Значение)Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПризнакСпособаРасчета" , ДанныеXDTO.ПризнакСпособаРасчета.Значение);
		Если ПолученныеДанные.ДополнительныеСвойства.ПризнакСпособаРасчета = "ОплатаКредита" Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ЭтоОплатаРассрочки", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СуммаПредоплаты = 0;
	СуммаПостоплаты = 0;
	Если ДанныеXDTO.Свойство("ОплатыККМ") Тогда
		Для Каждого Строка Из ДанныеXDTO.ОплатыККМ Цикл
			Если Строка.ТипОплаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ТипОплаты.Значение = "Предоплата" Тогда
				СуммаПредоплаты = СуммаПредоплаты + Строка.Сумма;
			ИначеЕсли Строка.ТипОплаты.Значение = "Постоплата" Тогда
				СуммаПостоплаты = СуммаПостоплаты + Строка.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СуммаОплаченоСертификатами = 0;
	Для Каждого СтрокаОплаты Из МассивСтрокОплата Цикл
		Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат Тогда
			СуммаОплаченоСертификатами = СуммаОплаченоСертификатами + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	СуммаПредоплаты = СуммаПредоплаты - СуммаОплаченоСертификатами;
	
	Если СуммаПредоплаты > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СуммаПредоплаты", СуммаПредоплаты);
	КонецЕсли;
	
	Если СуммаПостоплаты > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СуммаПостоплаты", СуммаПостоплаты);
	КонецЕсли;
	
	ЗаполнитьВЧекеДисконтнуюКартуПриНеобходимости(КомпонентыОбмена, ДанныеXDTO, ПолученныеДанные);
	ДополнитьЧекДополнительнойИнформацией(ДанныеXDTO, ПолученныеДанные);
	
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;

	Если ПолученныеДанные <> Неопределено Тогда
		
		СуммаБонусов = ПолученныеДанные.Запасы.Итог("СуммаСкидкиОплатыБонусом");
		Если СуммаБонусов <> 0 Тогда
			СтрокаОплатыБонусом = ПолученныеДанные.БезналичнаяОплата.Добавить();
			СтрокаОплатыБонусом.ВидОплаты 		= Перечисления.ВидыБезналичныхОплат.Бонусы;
			СтрокаОплатыБонусом.СуммаБонусов 	= СуммаБонусов;
			СтрокаОплатыБонусом.БонуснаяКарта 	= ПолученныеДанные.ДисконтнаяКарта;
		КонецЕсли;
	
		ЗаполнитьПатент(ПолученныеДанные);
		ЗаполнитьКонтрагентаВЧеке(ПолученныеДанные);
		
		ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные);
		ЗаполнитьПартииИСерии(ПолученныеДанные);

		ПолученныеДанные.ДополнительныеСвойства.Удалить("ОчиститьПолученныеДанные");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НеПроверятьСмену", Истина);

		Если ДанныеИБ <> Неопределено Тогда
			ДанныеИБ.ДополнительныеСвойства.Вставить("НеПроверятьСмену", Истина);
		КонецЕсли;
		
		ПолученныеДанные.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ПараметрыКурсаВалют = Новый Структура("Валюта", ПолученныеДанные.ВалютаДокумента);
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолученныеДанные.Дата, ПараметрыКурсаВалют);
		ПолученныеДанные.Курс = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Курс);
		ПолученныеДанные.Кратность = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Кратность);
		
		ПолученныеДанные.ОперацияСДенежнымиСредствами = Ложь;
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ПризнакСпособаРасчета") Тогда
			ПризнакСпособаРасчета = ПолученныеДанные.ДополнительныеСвойства.ПризнакСпособаРасчета;
			Если ПризнакСпособаРасчета = "ПредоплатаЧастичная" Или ПризнакСпособаРасчета = "ПредоплатаПолная" Тогда
				ПолученныеДанные.ОперацияСДенежнымиСредствами = Истина;
			ИначеЕсли ПризнакСпособаРасчета = "ОплатаКредита" Тогда
				ПолученныеДанные.ОперацияСДенежнымиСредствами = Истина;
				ПолученныеДанные.Запасы.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		ПолученныеДанные.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		ПолученныеДанные.Предоплата.Очистить();
		
		Если ДанныеИБ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
				"ПоложениеЗаказаПокупателя, Курс, Кратность, Контрагент, СпособЗачетаПредоплаты, ОперацияСДенежнымиСредствами");
			
			ДанныеИБ.Предоплата.Очистить();
			
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ТаблицаЧековККМПоЗаказуРМК") Тогда
				ТаблицаЧековККМПоЗаказуРМК = ПолученныеДанные.ДополнительныеСвойства.ТаблицаЧековККМПоЗаказуРМК;
				ДанныеИБ.ДополнительныеСвойства.Вставить("ТаблицаЧековККМПоЗаказуРМК", ТаблицаЧековККМПоЗаказуРМК);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМВозврат_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_ЧекККМВозврат_Получение");
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДисконтнаяКарта",  "КартаЛояльности", , "Справочник_ДисконтныеКарты_Получение");
	ДобавитьПКС(СвойстваШапки, "ЧекККМ",           "Основание", , "Документ_ЧекККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",    			"", 1);
	ДобавитьПКС(СвойстваШапки, "НДСВключатьВСтоимость", "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",    	"", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",	  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПроцентСкидкиНаценки",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСкидкиНаценки",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПроцентАвтоматическойСкидки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаАвтоматическойСкидки",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаСкидкиОплатыБонусом",    "", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",	"");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",	  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",          "", 1,"Справочник_СерииНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "БезналичнаяОплата",            "");
	ДобавитьПКС(СвойстваТЧ, "ВидПлатежнойКарты",			   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СсылочныйНомер",			   	   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторПлатежнойСистемы",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаКомиссии",			   	   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат",      	   "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерСертификата",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АкцизныеМарки",                   "");
	ДобавитьПКС(СвойстваТЧ, "АкцизнаяМарка",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "КодАкцизнойМарки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ШтрихкодУпаковки", "", 1);

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СкидкиНаценки", "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",		"", 1);
	ДобавитьПКС(СвойстваТЧ, "СкидкаНаценка",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ЧекККМ) Тогда
		ПолученныеДанные.ЧекККМ	= ?(ДанныеXDTO.Свойство("AdditionalInfo") И ДанныеXDTO.AdditionalInfo.Свойство("Основание"),
			ДанныеXDTO.AdditionalInfo.Основание.Ссылка,
			Неопределено);
	КонецЕсли;	
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты) Тогда
		Для каждого ЭлементКоллекции Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
			ДополнительныйРеквизит = ЭлементКоллекции.Свойство;
			ЗначениеДополнительногоРеквизита = ЭлементКоллекции.ЗначениеСвойства;
			Если ДополнительныйРеквизит.Свойство("Наименование")
				И НРЕГ(СокрЛП(ДополнительныйРеквизит.Наименование)) = НРЕГ("ИдентификаторДисконтнойКарты")
				И НЕ (ЗначениеДополнительногоРеквизита = Неопределено) Тогда
					ЗаполнитьДисконтнуюКартуПоУникальномуИдентификатору(ПолученныеДанные, ЗначениеДополнительногоРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ВидЦен		   		= КомпонентыОбмена.УзелКорреспондента.ВидЦен;
			
	Если ПолученныеДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
	
		ЦенаВключаетНДС							 = КомпонентыОбмена.УзелКорреспондента.ВидЦен.ЦенаВключаетНДС;
		
		ПолученныеДанные.НДСВключатьВСтоимость 	 = ЦенаВключаетНДС;
		ПолученныеДанные.СуммаВключаетНДС 	 	 = ЦенаВключаетНДС;
		
	КонецЕсли;
		
	ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
	
	ЗаполнитьСвойстваТЧТовары(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, Истина);
	
	МассивСтрокОплата = ПолучитьСтрокиТЧБезналичнаяОплата(ДанныеXDTO, КомпонентыОбмена, Истина);
	
	СуммаОплатыКартой = 0;
	
	Для Каждого СтрокаОплаты Из МассивСтрокОплата Цикл
		СуммаОплатыКартой = СуммаОплатыКартой + СтрокаОплаты.Сумма;
	КонецЦикла;
	
	СуммаВозвратаНаличными = ПолученныеДанные.СуммаДокумента - СуммаОплатыКартой;
	ПолученныеДанные.ПолученоНаличными = СуммаВозвратаНаличными;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокОплата);
	
	Если ДанныеXDTO.Свойство("ПризнакСпособаРасчета") И ЗначениеЗаполнено(ДанныеXDTO.ПризнакСпособаРасчета.Значение) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПризнакСпособаРасчета" , ДанныеXDTO.ПризнакСпособаРасчета.Значение);
		Если ПолученныеДанные.ДополнительныеСвойства.ПризнакСпособаРасчета = "ОплатаКредита" Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ЭтоОплатаРассрочки", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СуммаПредоплаты = 0;
	СуммаПостоплаты = 0;
	Если ДанныеXDTO.Свойство("ОплатыККМ") Тогда
		Для Каждого Строка Из ДанныеXDTO.ОплатыККМ Цикл
			Если Строка.ТипОплаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ТипОплаты.Значение = "Предоплата" Тогда
				СуммаПредоплаты = СуммаПредоплаты + Строка.Сумма;
			ИначеЕсли Строка.ТипОплаты.Значение = "Постоплата" Тогда
				СуммаПостоплаты = СуммаПостоплаты + Строка.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СуммаОплаченоСертификатами = 0;
	Для Каждого СтрокаОплаты Из МассивСтрокОплата Цикл
		Если СтрокаОплаты.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат Тогда
			СуммаОплаченоСертификатами = СуммаОплаченоСертификатами + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	СуммаПредоплаты = СуммаПредоплаты - СуммаОплаченоСертификатами;
	
	Если СуммаПредоплаты > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СуммаПредоплаты", СуммаПредоплаты);
	КонецЕсли;
	
	Если СуммаПостоплаты > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СуммаПостоплаты", СуммаПостоплаты);
	КонецЕсли;
	
	ЗаполнитьВЧекеДисконтнуюКартуПриНеобходимости(КомпонентыОбмена, ДанныеXDTO, ПолученныеДанные);
	ДополнитьЧекДополнительнойИнформацией(ДанныеXDTO, ПолученныеДанные);
	
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолученныеДанные <> Неопределено Тогда
		
		СуммаБонусов = ПолученныеДанные.Запасы.Итог("СуммаСкидкиОплатыБонусом");
		Если СуммаБонусов <> 0 Тогда
			СтрокаОплатыБонусом = ПолученныеДанные.БезналичнаяОплата.Добавить();
			СтрокаОплатыБонусом.ВидОплаты 		= Перечисления.ВидыБезналичныхОплат.Бонусы;
			СтрокаОплатыБонусом.СуммаБонусов 	= СуммаБонусов;
			СтрокаОплатыБонусом.БонуснаяКарта 	= ПолученныеДанные.ДисконтнаяКарта;
		КонецЕсли;
	
		ПолученныеДанные.ВидЦен		   	= КомпонентыОбмена.УзелКорреспондента.ВидЦен;
			
		Если ПолученныеДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
			ЦенаВключаетНДС							 = КомпонентыОбмена.УзелКорреспондента.ВидЦен.ЦенаВключаетНДС;
		
			ПолученныеДанные.НДСВключатьВСтоимость 	 = ЦенаВключаетНДС;
			ПолученныеДанные.СуммаВключаетНДС 	 	 = ЦенаВключаетНДС;
		
		КонецЕсли;
		
		ЗаполнитьПатент(ПолученныеДанные);
		ЗаполнитьКонтрагентаВЧеке(ПолученныеДанные);
		
		ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные);
		ЗаполнитьПартииИСерии(ПолученныеДанные);
		
		ПолученныеДанные.ДополнительныеСвойства.Удалить("ОчиститьПолученныеДанные");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НеПроверятьСмену", Истина);

		Если ДанныеИБ <> Неопределено Тогда
			ДанныеИБ.ДополнительныеСвойства.Вставить("НеПроверятьСмену", Истина);
		КонецЕсли;
		
		ПолученныеДанные.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ПараметрыКурсаВалют = Новый Структура("Валюта", ПолученныеДанные.ВалютаДокумента);
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ПолученныеДанные.Дата, ПараметрыКурсаВалют);
		ПолученныеДанные.Курс = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Курс);
		ПолученныеДанные.Кратность = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Кратность);
		
		Если ЗначениеЗаполнено(ПолученныеДанные.ЧекККМ.Заказ) Тогда
			ПолученныеДанные.Заказ = ПолученныеДанные.ЧекККМ.Заказ;
		КонецЕсли;
		
		ПолученныеДанные.ОперацияСДенежнымиСредствами = Ложь;
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ПризнакСпособаРасчета") Тогда
			ПризнакСпособаРасчета = ПолученныеДанные.ДополнительныеСвойства.ПризнакСпособаРасчета;
			Если ПризнакСпособаРасчета = "ПредоплатаЧастичная" Или ПризнакСпособаРасчета = "ПредоплатаПолная" Тогда
				ПолученныеДанные.ОперацияСДенежнымиСредствами = Истина;
			ИначеЕсли ПризнакСпособаРасчета = "ОплатаКредита" Тогда
				ПолученныеДанные.ОперацияСДенежнымиСредствами = Истина;
				ПолученныеДанные.Запасы.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		ПолученныеДанные.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		ПолученныеДанные.Предоплата.Очистить();
		
		Если ДанныеИБ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
				"Заказ, ПоложениеЗаказаПокупателя, Курс, Кратность, СпособЗачетаПредоплаты, ОперацияСДенежнымиСредствами");
			
			ДанныеИБ.Предоплата.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтложеннаяОбработка_ЧекККМ(Объект, КомпонентыОбмена)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Т
	|ГДЕ
	|	Т.Ссылка В(&Номенклатура)
	|	И Т.ЭтоНабор");                              
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Запасы.ВыгрузитьКолонку("Номенклатура"));
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл

		СтрокиНабора = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаЗапроса.Номенклатура));
		
		Для Каждого СтрокаТабличнойЧасти Из СтрокиНабора Цикл
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", 		Константы.УчетПоКомпании.Компания(Объект.Организация));
			СтруктураДанные.Вставить("Номенклатура", 		СтрокаТабличнойЧасти.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 		СтрокаТабличнойЧасти.Характеристика);
			СтруктураДанные.Вставить("НалогообложениеНДС", 	Объект.НалогообложениеНДС);
			СтруктураДанные.Вставить("Цена", 				СтрокаТабличнойЧасти.Цена);
			СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
			СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
			СтруктураДанные.Вставить("ВидЦен", 				Объект.ВидЦен);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", 	СтрокаТабличнойЧасти.ЕдиницаИзмерения);
			
			НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
			
			ИндексСтроки = Объект.Запасы.Индекс(СтрокаТабличнойЧасти);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
			
			ДобавленныеСтроки = Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
			Если ДобавленныеСтроки.Количество()=0 Тогда
				ДобавленнаяСтрока = Объект.ДобавленныеНаборы.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОтбора);
			Иначе
				ДобавленнаяСтрока = ДобавленныеСтроки[0];
			КонецЕсли; 
			ДобавленнаяСтрока.Количество = ДобавленнаяСтрока.Количество+?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
			ДобавленыСтроки = Ложь;
			
			Для каждого ОписаниеСостава Из СтруктураДанные.СоставНабора Цикл
				
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеСостава);
				СтруктураПоиска.Вставить("НоменклатураНабора", СтрокаТабличнойЧасти.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТабличнойЧасти.Характеристика);
				СтруктураПоиска.Вставить("ПроцентСкидкиНаценки", СтрокаТабличнойЧасти.ПроцентСкидкиНаценки);
				НайденныеСтроки = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество()>0 Тогда
					НоваяСтрока = НайденныеСтроки[0];
					Если СтруктураДанные.СпособРасчетаЦеныНабора<>ПредопределенноеЗначение("Перечисление.СпособыРасчетаЦеныНабора.СкладыватьИзЦенКомплектующих") Тогда
						Если НоваяСтрока.Количество+ОписаниеСостава.Количество<>0 И НоваяСтрока.Цена<>ОписаниеСостава.Цена Тогда
							НоваяСтрока.Цена = (НоваяСтрока.Количество*НоваяСтрока.Цена+ОписаниеСостава.Количество*ОписаниеСостава.Цена)/(НоваяСтрока.Количество+ОписаниеСостава.Количество);
						КонецЕсли; 
					КонецЕсли; 
				Иначе
					НоваяСтрока = Объект.Запасы.Вставить(ИндексСтроки);
					ИндексСтроки = ИндексСтроки+1;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСостава, , "Количество, ДоляСтоимости");
					НоваяСтрока.НоменклатураНабора = СтрокаТабличнойЧасти.Номенклатура;
					НоваяСтрока.ХарактеристикаНабора = СтрокаТабличнойЧасти.Характеристика;
					НоваяСтрока.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
					ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, НоваяСтрока, "КлючСвязи");
					ДобавленыСтроки = Истина;
				КонецЕсли; 
				
				НоваяСтрока.Количество = НоваяСтрока.Количество+ОписаниеСостава.Количество*?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
				НоваяСтрока.ДоляСтоимости = НоваяСтрока.ДоляСтоимости+ОписаниеСостава.ДоляСтоимости*?(СтрокаТабличнойЧасти.Количество=0, 1, СтрокаТабличнойЧасти.Количество);
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				Если НоваяСтрока.ПроцентСкидкиНаценки = 100 Тогда
					НоваяСтрока.Сумма = 0;
				ИначеЕсли НоваяСтрока.ПроцентСкидкиНаценки <> 0 И НоваяСтрока.Количество <> 0 Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма * (1 - НоваяСтрока.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				Если Объект.СуммаВключаетНДС Тогда
					НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - НоваяСтрока.Сумма / ((СтавкаНДС + 100) / 100);
				Иначе
					НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДС / 100;
				КонецЕсли;
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				
			КонецЦикла;
			
			Объект.Запасы.Удалить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЦикла;

	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМ") Тогда
	
		Для Каждого СтрокаПодарок Из Объект.Подарки Цикл
			СтрокаПодарок.СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
		КонецЦикла;
		
		Объект.ОтменаПереносаПодарковВПродажи = Объект.Подарки.Количество() > 0;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КассоваяСмена) Тогда
		Объект.КассоваяСмена = НайтиКассовуюСмену(Объект.КассаККМ, Объект.НомерСменыККМ, Объект.Дата);
	КонецЕсли;
	
	АрхивироватьЧеки = Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы;
	
	Если Не Объект.Архивный
		И ЗначениеЗаполнено(Объект.КассоваяСмена)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассоваяСмена, "СтатусКассовойСмены") = АрхивироватьЧеки Тогда
		Объект.Архивный = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМ") И Объект.Запасы.Количество() > 0 Тогда
		Объект.ЗаполнитьКолонкуРезервПоРезервам();
	КонецЕсли;
	
	ЭтоОплатаРассрочки = Объект.ДополнительныеСвойства.Свойство("ЭтоОплатаРассрочки");
	ЭтоЗачетПредоплаты = Объект.ДополнительныеСвойства.Свойство("СуммаПредоплаты");
	СуммаПредоплатыВЧеке = 0;
	Если ЭтоЗачетПредоплаты ИЛИ ЭтоОплатаРассрочки Тогда
		
		ЧекиККМ = Неопределено;
		Если Объект.ДополнительныеСвойства.Свойство("ТаблицаЧековККМПоЗаказуРМК") Тогда
			ТаблицаЧековККМПоЗаказуРМК = Объект.ДополнительныеСвойства.ТаблицаЧековККМПоЗаказуРМК;
			ТаблицаЧековККМПоЗаказуРМК.Колонки.Добавить("ЧекККМ", Новый ОписаниеТипов("ДокументСсылка.ЧекККМ"));
			
			Для Каждого СтрокаЧекаККМ Из ТаблицаЧековККМПоЗаказуРМК Цикл
				СсылкаКекаККМ = Документы.ЧекККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаЧекаККМ.ГУИДСтрока));
				СтрокаЧекаККМ.ЧекККМ = СсылкаКекаККМ;
			КонецЦикла;
			
			ЧекиККМ = ТаблицаЧековККМПоЗаказуРМК.ВыгрузитьКолонку("ЧекККМ");
		КонецЕсли;
			
		СуммаПредоплатыПоДокументам = 0;
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Дата", Объект.Дата);
		СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПараметров.Вставить("Договор", Объект.Договор);
		СтруктураПараметров.Вставить("Организация", Объект.Организация);
		СтруктураПараметров.Вставить("Заказ", Объект.Заказ);
		СтруктураПараметров.Вставить("ВалютаДокумента", Объект.Договор.ВалютаРасчетов);
		СтруктураПараметров.Вставить("ЧекиККМ", ЧекиККМ);
		
		Если ЭтоОплатаРассрочки Тогда
			
			СуммаПредоплатыВЧеке = Объект.СуммаДокумента;
			
			Если Не ЧекиККМ = Неопределено Тогда
				ЗаполнитьДолгиПоРассрочке(Объект.Предоплата, СуммаПредоплатыПоДокументам, СтруктураПараметров);
			Иначе
				РозничныеПродажиСервер.ЗаполнитьДолгиПоРассрочке(Объект.Предоплата, СуммаПредоплатыПоДокументам, СтруктураПараметров);
			КонецЕсли;
			
			Объект.Запасы.Очистить();
			
		Иначе
			
			СуммаПредоплатыВЧеке = Объект.ДополнительныеСвойства.СуммаПредоплаты;
			ТаблицаАвансов = ПолучитьТаблицуАвансовПоЗаказу(СтруктураПараметров);
			Объект.Предоплата.Загрузить(ТаблицаАвансов);
			СуммаПредоплатыПоДокументам = ТаблицаАвансов.Итог("СуммаПлатежа");
			
			Объект.ПолученоНаличными = Объект.СуммаДокумента - Объект.БезналичнаяОплата.Итог("Сумма") - СуммаПредоплатыВЧеке;
		КонецЕсли;
		
		Если Не СуммаПредоплатыВЧеке = СуммаПредоплатыПоДокументам Тогда
			
			СуммаПредоплатыВЧекеОстаток = СуммаПредоплатыВЧеке;
			СтрокиДляУдаления = Новый Массив;
			Для Каждого СтрокаПредоплаты Из Объект.Предоплата Цикл
				
				Если СуммаПредоплатыВЧекеОстаток <= 0 Тогда
					СтрокиДляУдаления.Добавить(СтрокаПредоплаты);
					Продолжить;
				КонецЕсли;
				
				Если СтрокаПредоплаты.СуммаПлатежа > СуммаПредоплатыВЧекеОстаток Тогда
					СтрокаПредоплаты.СуммаПлатежа = СуммаПредоплатыВЧекеОстаток;
					СтрокаПредоплаты.СуммаРасчетов = СуммаПредоплатыВЧекеОстаток;
				КонецЕсли;
				
				СуммаПредоплатыВЧекеОстаток = СуммаПредоплатыВЧекеОстаток - СтрокаПредоплаты.СуммаПлатежа;
			КонецЦикла;
			
			Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
				Объект.Предоплата.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось провести Чек ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Объект.Метаданные(),
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыПодарочныхСертификатов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыПодарочныхСертификатов";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номинал",      "Номинал");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ВидыПодарочныхСертификатов_Отправка");
	
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыПодарочныхСертификатов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыПодарочныхСертификатов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",             "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",             "КоличествоПериодовДействия", 1);
	ДобавитьПКС(СвойстваШапки, "",             "РазрешитьЧастичнуюОплату", 1);
	ДобавитьПКС(СвойстваШапки, "",             "ТипПериодаДействия", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номинал",      "Номинал");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСерииНоменклатуры", "ИспользоватьСерии");

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",                        "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты_Отправка_ИзСтруктуры");

КонецПроцедуры

Процедура ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)

	ДанныеXDTO.КлючевыеСвойства.Вставить("Валюта", 					 Константы.ВалютаУчета.Получить());
	ДанныеXDTO.КлючевыеСвойства.Вставить("РазрешитьЧастичнуюОплату", ДанныеИБ.ЧастичноеПогашение);
	
	ТипПериодаДействия = Неопределено;
	КоличествоПериодовДействия = Неопределено;

	Если ДанныеИБ.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.БезОграниченияСрока Тогда
		ТипПериодаДействия 		   = "Месяц";
		КоличествоПериодовДействия = 999;
	
	Иначе
	
		Если ДанныеИБ.Периодичность = Перечисления.Периодичность.Неделя Тогда
			ТипПериодаДействия = "День";
			КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 7;
		ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Декада Тогда
			ТипПериодаДействия = "День";
			КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 10;
		ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Месяц Тогда
			ТипПериодаДействия = "Месяц";
			КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия;
		ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Квартал Тогда
			ТипПериодаДействия = "Месяц";
			КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 3;
		ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Полугодие Тогда
			ТипПериодаДействия = "Месяц";
			КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 6;
		ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Год Тогда
			ТипПериодаДействия = "Месяц";
			КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 12;
		Иначе // день
			ТипПериодаДействия = "День";
			КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия;
		КонецЕсли;

	КонецЕсли;
	
	ДанныеXDTO.Вставить("ТипПериодаДействия", ТипПериодаДействия);
	ДанныеXDTO.Вставить("КоличествоПериодовДействия", КоличествоПериодовДействия);
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ИспользоватьСерии", ДанныеИБ.ИспользоватьСерииНоменклатуры);
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO);
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БонусныеПрограммы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_БонусныеПрограммы_Отправка");
	ПравилоКонвертации.ИмяПКО            = "Справочник_БонусныеПрограммы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БонусныеПрограммы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПрограммыЛояльности";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "НеНачислятьПриОплатеБонусами", 		"НеНачислятьБаллыПриОплатеБонусами");
	ДобавитьПКС(СвойстваШапки, "",           						"КурсКонвертацииБонусовВВалюту", 1);
	ДобавитьПКС(СвойстваШапки, "МаксимальныйПроцентОплаты",       	"МаксимальныйПроцентОплатыБонусами");
	ДобавитьПКС(СвойстваШапки, "Наименование",                      "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                                  "ВалютаКонвертацииБонусов", 1, "Справочник_Валюты");

КонецПроцедуры

Процедура ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = Константы.НациональнаяВалюта.Получить();
	
	ДанныеXDTO.Вставить("КурсКонвертацииБонусовВВалюту", 1);
	ДанныеXDTO.Вставить("ВалютаКонвертацииБонусов", Валюта);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаКонвертацииБонусов", Валюта);
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДисконтныеКарты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ДисконтныеКарты_Получение");
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДисконтныеКарты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДисконтныеКарты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДисконтныеКарты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДисконтныеКарты_Получение_ПередЗаписьюПолученныхДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецКарты", "ВладелецКарты", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "НомерКарты");
	ДобавитьПКС(СвойстваШапки, "КодКартыШтрихкод",  "НомерКарты");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДисконтныеКарты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ДисконтныеКарты_Отправка");
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДисконтныеКарты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДисконтныеКарты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДисконтныеКарты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецКарты",            "ВладелецКарты", 1);
	ДобавитьПКС(СвойстваШапки, "",             			   "НомерКарты", 1);
	ДобавитьПКС(СвойстваШапки, "", 	   					   "ПрограммаЛояльности", 	1, "Справочник_БонусныеПрограммы_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВладелецКарты)  Тогда
		ДанныеXDTO.Вставить("ОчиститьДанныеXDTO", Истина);
	Иначе
		
		СтруктураВладельца = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ВладелецКарты, "Справочник_Контрагенты_Отправка");
		БонуснаяПрограмма  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Владелец, "БонуснаяПрограмма");
		
		Если ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
			ДанныеXDTO.Вставить("ПрограммаЛояльности", БонуснаяПрограмма);
		КонецЕсли;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВладелецКарты", СтруктураВладельца);
		
		Если ЗначениеЗаполнено(ДанныеИБ.КодКартыШтрихкод) Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКарты", ДанныеИБ.КодКартыШтрихкод);
		ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.КодКартыМагнитный) Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКарты", ДанныеИБ.КодКартыМагнитный);
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКарты", ДанныеИБ.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации 	= ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_КатегорииНоменклатурыВН_Отправка");
	СвойстваШапки 		= ПравилоКонвертации.Свойства;
	
	ДобавитьПКС(СвойстваШапки, "",            	"ИспользоватьСерии", 1);
	ДобавитьПКС(СвойстваШапки, "",            	"ИспользоватьСрокГодностиСерии", 1);
	ДобавитьПКС(СвойстваШапки, "", 				"ИспользоватьХарактеристики", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",                        "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты_Отправка_ИзСтруктуры");

КонецПроцедуры

Процедура ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ИспользоватьСерии", 				ДанныеИБ.ИспользоватьСерииНоменклатуры);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ИспользоватьСрокГодностиСерии", 	ДанныеИБ.ИспользоватьСрокГодностиСерии);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ИспользоватьХарактеристики", 		ДанныеИБ.ИспользоватьХарактеристики);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ИспользоватьХарактеристики", ДанныеИБ.ИспользоватьХарактеристики);
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO);
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации 	= ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_Номенклатура_Отправка");
	СвойстваШапки 		= ПравилоКонвертации.Свойства;
	
	ДобавитьПКС(СвойстваШапки, "Крепость",                               	"Крепость");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСерииНоменклатуры",            	"ИспользоватьСерии");
	ДобавитьПКС(СвойстваШапки, "",            								"Маркируемый", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "СистемаНалогообложения", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "ОрганизацияПродажи", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                          "ПризнакПредметаРасчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "ПодакцизныйТовар", 1);
	
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)

	Перем СтруктураВидАП;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;

	// добавление реквизитов для алкогольной продукции
	Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукции) 
		И ДанныеXDTO.Свойство("ВидАлкогольнойПродукции", СтруктураВидАП) 
		И СтруктураВидАП <> Неопределено Тогда
		
		МаркируемыйАП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ВидАлкогольнойПродукции, "Маркируемый");
		
		СтруктураВидАП.Вставить("Маркируемый", МаркируемыйАП)
		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура("Номенклатура", ДанныеИБ.Ссылка);
	
	ИнтеграцияИСМПУНФ.ЗаполнитьСлужебныеРеквизитыИСМП(СтруктураДанные);

	Маркируемый = СтруктураДанные.МаркируемаяПродукция;
	
	ДатаОбязательнойМаркировки = ИнтеграцияИСМПКлиентСерверПовтИсп.ДатаОбязательнойМаркировкиПродукции(ДанныеИБ.ВидПродукцииИС);
	
	Если Маркируемый
		И ТекущаяДатаСеанса() < ДатаОбязательнойМаркировки Тогда
		Маркируемый = Ложь;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Маркируемый", Маркируемый);

	Если ИнициализироватьРасширенныйРежим(КомпонентыОбмена) Тогда

		ОрганизацияПродажиСтруктура = ОрганизацияПродажи(КомпонентыОбмена.ПараметрыКонвертации, ДанныеИБ);

		Если ЗначениеЗаполнено(ОрганизацияПродажиСтруктура) Тогда
		
			ДанныеXDTO.Вставить("ОрганизацияПродажи", 		ОрганизацияПродажиСтруктура.Организация);
			
			Если ОрганизацияПродажиСтруктура.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕНВД Тогда
				СистемаНалогообложения = "ЕНВД";				
			ИначеЕсли ОрганизацияПродажиСтруктура.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕСХН Тогда
				СистемаНалогообложения = "ЕдиныйСельскохозяйственныйНалог";
			ИначеЕсли ОрганизацияПродажиСтруктура.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
				СистемаНалогообложения = "ПатентнаяСистема";
			Иначе
				ТорговыйОбъект = Неопределено;
				Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда	
					ТорговыйОбъект = КомпонентыОбмена.УзелКорреспондента.ТорговыйОбъект;
				КонецЕсли;
				СистемаНалогообложения = СистемаНалогообложения(
					ОрганизацияПродажиСтруктура.Организация,
					ТорговыйОбъект,
					КомпонентыОбмена.ПараметрыКонвертации.КешРасширенногоРежима);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СистемаНалогообложения) Тогда
				ДанныеXDTO.Вставить("СистемаНалогообложения", 	СистемаНалогообложения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	
	ПризнакПредметаРасчета = РозничныеПродажиСервер.ПолучитьПризнакПредметаРасчета(ДанныеИБ);
		
	Если ТекущаяДатаСеанса() < ДатаОбязательнойМаркировки Тогда
		Если ДанныеИБ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
		ИначеЕсли ДанныеИБ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
		КонецЕсли;
	КонецЕсли;		

	ДанныеXDTO.Вставить("ПризнакПредметаРасчета", ПолучитьСоответствие(ПризнакПредметаРасчета));

	МассивПодакцизныхППР = Новый Массив;
	МассивПодакцизныхППР.Добавить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар);
	МассивПодакцизныхППР.Добавить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ);
	МассивПодакцизныхППР.Добавить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ);
	
	ПодакцизныйТовар = НЕ МассивПодакцизныхППР.Найти(ПризнакПредметаРасчета) = Неопределено;
	ДанныеXDTO.Вставить("ПодакцизныйТовар", ПодакцизныйТовар);
	
	Если ТекущаяДатаСеанса() < ДатаОбязательнойМаркировки Тогда
		Инструкция = Новый Структура;
		Инструкция.Вставить("ИмяПКО",   "Перечисление_ВидыПродукцииИС");
		Инструкция.Вставить("Значение", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
		ДанныеXDTO.Вставить("ВидПродукцииИС", Инструкция);
	КонецЕсли;
	
	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("КодТРУ", ДанныеИБ.КодТРУ);

	Если ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ Тогда
		КодППР = 31;
	ИначеЕсли ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ Тогда
		КодППР = 30;
	ИначеЕсли ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ Тогда
		КодППР = 33;
	ИначеЕсли ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ Тогда
		КодППР = 32;
	КонецЕсли;

	Если ЗначениеЗаполнено(КодППР) Тогда
		СтруктураДопРеквизитов.Вставить("КодПризнакаПредметаРасчета", КодППР);
	КонецЕсли;

	Если ТекущаяДатаСеанса() >= ДатаОбязательнойМаркировки Тогда
		Если ДанныеИБ.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Антисептики Тогда
			СтруктураДопРеквизитов.Вставить("Антисептики", Истина);
		ИначеЕсли ДанныеИБ.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
			СтруктураДопРеквизитов.Вставить("НикотиносодержащаяПродукция", Истина);
		ИначеЕсли ДанныеИБ.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			СтруктураДопРеквизитов.Вставить("ПродукцияИзНатуральногоМеха", Истина);
		ИначеЕсли ДанныеИБ.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.СоковаяПродукция Тогда
			СтруктураДопРеквизитов.Вставить("СоковаяПродукция", Истина);
		ИначеЕсли ДанныеИБ.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво Тогда
			СтруктураДопРеквизитов.Вставить("БезалкогольноеПиво", Истина);
		ИначеЕсли ДанныеИБ.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Пиво Тогда
			СтруктураДопРеквизитов.Вставить("Пиво", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Маркируемый
		И СтекВыгрузки.Количество() = 1 Тогда
		ОписаниеНоменклатурыИС(СтруктураДопРеквизитов, ДанныеИБ);
	КонецЕсли;
	
	Если ДанныеИБ.ЭтоНабор Тогда
		
		СтруктураДопРеквизитов.Вставить("ЭтоНабор", 				ДанныеИБ.ЭтоНабор);
		СтруктураДопРеквизитов.Вставить("СпособРасчетаЦеныНабора", 	XMLСтрока(ДанныеИБ.СпособРасчетаЦеныНабора));
		
	КонецЕсли;
	
	Если ДанныеИБ.ЭтоАгентскаяУслуга И ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.Договор,
			"Владелец, ПризнакАгента");
		Поставщик = Новый Структура("Значение, ИмяПКО", ДанныеДоговора.Владелец,
						"Справочник_Контрагенты_Отправка");
		СтруктураДопРеквизитов.Вставить("Поставщик", Поставщик);
		СтруктураДопРеквизитов.Вставить("ПризнакАгента", XMLСтрока(ДанныеДоговора.ПризнакАгента));
		СтруктураДопРеквизитов.Вставить("ЭтоНабор", Истина);
		СтруктураДопРеквизитов.Вставить("СпособРасчетаЦеныНабора",
			XMLСтрока(Перечисления.СпособыРасчетаЦеныНабора.НазначаетсяИРаспределяетсяПоДолеСтоимости));
		
	КонецЕсли;
	
	Если ПолучитьФО(КомпонентыОбмена, "ПриемТоваровНаКомиссию") Тогда
		ПартияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(ДанныеИБ.Ссылка);
		Если ЗначениеЗаполнено(ПартияПоУмолчанию) Тогда
			ДанныеПартии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПартияПоУмолчанию, "ВладелецПартии, Статус");
			Если ЗначениеЗаполнено(ДанныеПартии.ВладелецПартии)
				И ДанныеПартии.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии Тогда
				Поставщик = Новый Структура("Значение, ИмяПКО", ДанныеПартии.ВладелецПартии,
					"Справочник_Контрагенты_Отправка");
				СтруктураДопРеквизитов.Вставить("Поставщик", Поставщик);
				СтруктураДопРеквизитов.Вставить("ПризнакАгента", XMLСтрока(Перечисления.ПризнакиАгента.Комиссионер));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеИБ.ПроверятьЗаполнениеПартий Тогда
		СтруктураДопРеквизитов.Вставить("ОбязательноеЗаполнениеШтрихкода", ДанныеИБ.ПроверятьЗаполнениеПартий);
	КонецЕсли;
	
	Если ДанныеИБ.ЗапретитьВводДробногоКоличества Тогда
		СтруктураДопРеквизитов.Вставить("ЗапретитьВводДробногоКоличества", ДанныеИБ.ЗапретитьВводДробногоКоличества);
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СоставНабора_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СоставНабора_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СоставНабора_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      	"Дата");
	ДобавитьПКС(СвойстваШапки, "",                     		"Номер");
	ДобавитьПКС(СвойстваШапки, "",               			"Организация", 1, 	 "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Количество", 1);
	ДобавитьПКС(СвойстваШапки, "",        					"Номенклатура", 1, 	 "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "",							"Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "", 							"ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "",               			"ВидОперации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,	 "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",  "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты_Отправка_ИзСтруктуры");

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации 	= ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ФизическиеЛица_Отправка");
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	
КонецПроцедуры 

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСотрудник = ФизлицоЯвляетсяДействующимСотрудником(ДанныеИБ);
	Если ЭтоСотрудник Тогда
		ДанныеXDTO.Вставить("AdditionalInfo", Новый Структура("Сотрудник", Истина));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ИнформативныеОстатки_Отправка(ПравилаКонвертации)

	ПравилоКонвертации 	= ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ИнформативныеОстатки_Отправка");
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ИнформативныеОстатки_Отправка_ПриОтправкеДанных";
	
КонецПроцедуры 

Процедура ПКО_Справочник_ИнформативныеОстатки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	ТоварыРезерв = Новый ТаблицаЗначений;
	ТоварыРезерв.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТоварыРезерв.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТоварыРезерв.Колонки.Добавить("Резерв");
	
	Для каждого СтрокаОстатков Из ДанныеИБ Цикл
		НоваяСтрока = ТоварыРезерв.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
		НоваяСтрока.Резерв = СтрокаОстатков.Резерв;
	КонецЦикла;
	ДанныеXDTO.Вставить("AdditionalInfo", Новый Структура("ТоварыРезерв", ТоварыРезерв));
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_Подразделения_Отправка");
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных";
	
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьПризнакХраненияКартЛояльностиВРМК(ДанныеXDTO, КомпонентыОбмена.УзелКорреспондента);
	
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьПризнакХраненияКартЛояльностиВРМК(ДанныеXDTO, КомпонентыОбмена.УзелКорреспондента);
	
КонецПроцедуры

Процедура ПКО_Справочник_СоставНабора_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)

	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("НоменклатураНабора", 	Справочники.Номенклатура.ПустаяСсылка());
	СтруктураОтборов.Вставить("ХарактеристикаНабора",   Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураОтборов.Вставить("Общий",					Ложь);
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") И ДанныеИБ.Свойство("ЭтоАгентскаяУслуга") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОтборов, ДанныеИБ);
		
		Товары = ДанныеИБ.Товары;
	Иначе
		// Выгрузка набора записей.
		
		Для Каждого Отбор Из ДанныеИБ.Отбор Цикл
			
			Если Отбор.Использование Тогда
				СтруктураОтборов.Вставить(Отбор.Имя, Отбор.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		РегистрСоставНабора = РегистрыСведений.СоставНаборов.СоздатьНаборЗаписей();
		РегистрСоставНабора.Отбор.НоменклатураНабора.Установить(СтруктураОтборов.НоменклатураНабора);
		РегистрСоставНабора.Отбор.ХарактеристикаНабора.Установить(СтруктураОтборов.ХарактеристикаНабора);
		РегистрСоставНабора.Отбор.Общий.Установить(СтруктураОтборов.Общий);

		РегистрСоставНабора.Прочитать();
		
		Товары = РегистрСоставНабора.Выгрузить();
		Товары.Колонки.Порядок.Имя = "НомерСтрокиДокумента";
		
	КонецЕсли;

	РеквизитыНабора		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураОтборов.НоменклатураНабора, "Код, ЕдиницаИзмерения");
	НомерСборки 		= РеквизитыНабора.Код;
	ЕдиницаИзмерения    = РеквизитыНабора.ЕдиницаИзмерения;
	ДатаСборки			= ТекущаяДатаСеанса();
	Организация 		= КомпонентыОбмена.УзелКорреспондентаОбъект.Организации[0].Организация;
	
	КлючевыеСвойства = Новый Структура();
	КлючевыеСвойства.Вставить("Номер", 			НомерСборки);
	КлючевыеСвойства.Вставить("Дата", 			ДатаСборки);
	КлючевыеСвойства.Вставить("Организация", 	Организация);    
	
	ДанныеXDTO.Вставить("Номер", 				НомерСборки);
	ДанныеXDTO.Вставить("Дата", 				ДатаСборки);
	ДанныеXDTO.Вставить("Организация", 			Организация);    
	ДанныеXDTO.Вставить("КлючевыеСвойства",		КлючевыеСвойства);	
	ДанныеXDTO.Вставить("ВидОперации", 			"Сборка");
	ДанныеXDTO.Вставить("Номенклатура", 		СтруктураОтборов.НоменклатураНабора);
	ДанныеXDTO.Вставить("Характеристика", 		СтруктураОтборов.ХарактеристикаНабора);
	ДанныеXDTO.Вставить("ЕдиницаИзмерения",		ЕдиницаИзмерения);
	ДанныеXDTO.Вставить("Количество", 			1);
	ДанныеXDTO.Вставить("ТипЗапасов", 			"СобственныеТовары");
	ДанныеXDTO.Вставить("Товары", 				Товары);

	СтруктураДопРеквизитов = Новый Структура;
	СтруктураДопРеквизитов.Вставить("ЭтоНабор",	Истина);	
	СтруктураДопРеквизитов.Вставить("Общий", 	СтруктураОтборов.Общий);	
	
	ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO);
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ТипыЦен");
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных";

	ДобавитьПКС(ПравилоКонвертации.Свойства, "",   "Идентификатор", 1);
	
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Идентификатор", ДанныеИБ.ИдентификаторФормул);
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ЭквайринговыеТерминалы_Отправка");
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СпособыОплаты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Эквайрер",     "Эквайер", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетЭквайринг",     "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_ЭквайринговыеТерминалы_Получение");
	ПравилоКонвертации.ИмяПКО            	= "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоКонвертации.ОбъектДанных      	= Метаданные.Справочники.СпособыОплаты;
	ПравилоКонвертации.ОбъектФормата     	= "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          				  "Номер");
	
КонецПроцедуры

Процедура ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.Тип = Перечисления.ТипыСпособовОплат.СБП Тогда
		ВидПлатежнойСистемы = Новый Структура("ВидПлатежнойСистемы",
			XMLСтрока(Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей));
	ИначеЕсли ДанныеИБ.Тип = Перечисления.ТипыСпособовОплат.ЮKassa Тогда
		ВидПлатежнойСистемы = Новый Структура("ВидПлатежнойСистемы",
			XMLСтрока(Перечисления.ТипыПлатежнойСистемыККТ.ЮКасса));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПлатежнойСистемы) Тогда
		ДанныеXDTO.Вставить("AdditionalInfo", ВидПлатежнойСистемы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Справочник_СерииНоменклатуры");
	ПравилоКонвертации.ИмяПКО            = "Справочник_СерииНоменклатуры";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СерииНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных";
	
	ДобавитьПКС(ПравилоКонвертации.Свойства, "",        "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(ПравилоКонвертации.Свойства, "ГоденДо", "ГоденДо");
	
КонецПроцедуры

Процедура ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", 	ДанныеИБ.Владелец);
	ДанныеXDTO.КлючевыеСвойства.Вставить("СерийныйНомер", 	ДанныеИБ.Наименование);
	
КонецПроцедуры

Процедура ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)

	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		
		Кеш = Неопределено;
		Если ИнициализироватьРасширенныйРежим(КомпонентыОбмена) Тогда
			Кеш = КомпонентыОбмена.ПараметрыКонвертации.КешРасширенногоРежима;
		КонецЕсли;
		
		ТорговыйОбъект = Неопределено;
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда	
			ТорговыйОбъект = КомпонентыОбмена.УзелКорреспондента.ТорговыйОбъект;
		КонецЕсли;
		СистемаНалогообложения = СистемаНалогообложения(ДанныеИБ.Владелец, ТорговыйОбъект, Кеш);

		Если СистемаНалогообложения <> Неопределено Тогда
			ДанныеXDTO.Вставить("СистемаНалогообложения", 	СистемаНалогообложения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "ЗначениеШтрихкода");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Серия",             "Серия", , "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "Упаковка",          "Упаковка", , "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "Характеристика",    "Характеристика", , "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ТипУпаковки",       "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ЗначениеШтрихкода,Номенклатура,ТипУпаковки");
	ПравилоКонвертации.ПоляПоиска.Добавить("ЗначениеШтрихкода");
КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если СтрДлина(ПолученныеДанные.ЗначениеШтрихкода) = 150 Тогда
		ПолученныеДанные.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	Иначе
		ПолученныеДанные.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительнаяИнформация = Неопределено;
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		ДополнительнаяИнформация = ДанныеXDTO.AdditionalInfo;
		
	КонецЕсли;
	КартаСсылка = ПолучитьДисконтнуюКартуПоНомеру(КомпонентыОбмена, ДанныеXDTO.КлючевыеСвойства, ДополнительнаяИнформация);
	КартаОбъект = КартаСсылка.ПолучитьОбъект();
	ПолученныеДанные = КартаОбъект;
	
	Если Не (ДополнительнаяИнформация = Неопределено ИЛИ ЗначениеЗаполнено(ПолученныеДанные.ВладелецКарты)) Тогда
		СтруктураПоиска = Новый Структура("ИмяОбработчика,СсылкаНаОбъект", "ДобавлениеКартыИзЧека", КартаСсылка);
		СтрокиКарты = КомпонентыОбмена.ЗагруженныеОбъекты.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКарты.Количество() > 0 Тогда
			ВладелецКарты = ПолучитьВладельцаДисконтнойКарты(ДанныеXDTO.КлючевыеСвойства.ВладелецКарты,
				ДополнительнаяИнформация);
			ПолученныеДанные.ВладелецКарты = ВладелецКарты;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_Справочник_ДисконтныеКарты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК"  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		КартаЛояльности = НайтиДисконтнуюКартуПоНомеру(ПолученныеДанные.КодКартыШтрихкод);
		Если Не КартаЛояльности = Неопределено Тогда
			ДанныеИБ = КартаЛояльности.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	Если Не (ДанныеИБ = Неопределено Или ЗначениеЗаполнено(ДанныеИБ.ВладелецКарты)) Тогда
		СтруктураПоиска = Новый Структура("ИмяОбработчика,СсылкаНаОбъект", "ДобавлениеКартыИзЧека", ДанныеИБ.Ссылка);
		СтрокиКарты = КомпонентыОбмена.ЗагруженныеОбъекты.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКарты.Количество() > 0 Тогда
			ДанныеИБ.ВладелецКарты = ПолученныеДанные.ВладелецКарты;
			ДанныеИБ.Наименование = ДисконтныеКартыУНФСервер.УстановитьНаименованиеДисконтнойКарты(ДанныеИБ.Владелец,
					ДанныеИБ.ВладелецКарты, ДанныеИБ.КодКартыШтрихкод, ДанныеИБ.КодКартыМагнитный);
			Если ЗначениеЗаполнено(ДанныеИБ.ВладелецКарты) Тогда
				ДописатьПокупателяВЧек(КомпонентыОбмена.ЗагруженныеОбъекты, ДанныеИБ.Ссылка, ДанныеИБ.ВладелецКарты);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ОчиститьПолученныеДанные");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ПолучитьПравилоКонвертации(ПравилаКонвертации, "Документ_ЗаказПокупателя_Отправка");
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных";
	
КонецПроцедуры

Процедура ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУРМК" Тогда
		Возврат;
	КонецЕсли;

	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя В (&МассивЗаказов)
	|					И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПокупателей.ЗаказПокупателя,
	|		ДвиженияДокументаЗаказыПокупателей.Номенклатура,
	|		ДвиженияДокументаЗаказыПокупателей.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.КоличествоСобрано КАК КоличествоСобрано,
	|	ЗаказПокупателяЗапасы.ЕстьСборка КАК ЕстьСборка,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки1,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки1,
	|	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность,
	|	ЗаказПокупателяЗапасы.Номенклатура.ВидАлкогольнойПродукции.Маркируемый КАК МаркируемыйАлкоголь,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателяЗапасы.Ячейка КАК Ячейка
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	(ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	| 		И НЕ ЗаказПокупателяЗапасы.ПродажаПодарка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка В(&МассивЗаказов) 
	|		И ДобавленныеНаборы.НомерВариантаКП = ДобавленныеНаборы.Ссылка.ОсновнойВариантКП";
	
	ЗаказОснование = ДанныеИБ.Ссылка;
	Ссылка = Документы.ЧекККМ.ПустаяСсылка();
	Дата = НачалоДня(ТекущаяДатаСеанса());
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(ЗаказОснование.Ссылка);
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		ТаблицаОстатков.Колонки.Удалить("ЗаказПокупателя");
		ТаблицаОстатков.Колонки.Найти("КоличествоОстаток").Имя = "Количество";
	Иначе
		ТаблицаОстатков = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура;
	Если ЗначениеЗаполнено(ЗаказОснование.ДисконтнаяКарта) Тогда
		ДополнительнаяИнформация.Вставить("ДисконтнаяКарта", ЗаказОснование.ДисконтнаяКарта);
	КонецЕсли;
	ДополнительнаяИнформация.Вставить("ТаблицаОстатков", ТаблицаОстатков);
	
	ТаблицаСкидок = ЗаказОснование.СкидкиНаценки.Выгрузить();
	ТаблицаСкидок.Колонки.Добавить("ИДСкидки");
	
	Для Каждого СтрокаСкидки из ТаблицаСкидок Цикл
		СтрокаСкидки.ИДСкидки = Строка(СтрокаСкидки.СкидкаНаценка.УникальныйИдентификатор());
	КонецЦикла;
	
	ТаблицаСкидок.Колонки.Удалить("СкидкаНаценка");
	ДополнительнаяИнформация.Вставить("ТаблицаСкидокНаценок", ТаблицаСкидок);
	
	ТаблицаЗапасы = ЗаказОснование.Запасы.Выгрузить( ,"НомерСтроки, КлючСвязи, ПроцентСкидкиНаценки, СуммаСкидкиНаценки, ПроцентАвтоматическойСкидки,
		| СуммаАвтоматическойСкидки, СуммаСкидкиОплатыБонусом");
	
	ДополнительнаяИнформация.Вставить("ТаблицаТоваров", ТаблицаЗапасы);
	
	ТаблицаСерий = ЗаказОснование.СерииНоменклатуры.Выгрузить();
	ДополнительнаяИнформация.Вставить("ТаблицаСерий", ТаблицаСерий);
	
	СуммаРассрочки = 0;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРассрочкуПлатежаВЧекахККМ") Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Дата", ТекущаяДатаСеанса());
		СтруктураПараметров.Вставить("Контрагент", ЗаказОснование.Контрагент);
		СтруктураПараметров.Вставить("Договор", ЗаказОснование.Договор);
		СтруктураПараметров.Вставить("Организация", ЗаказОснование.Организация);
		СтруктураПараметров.Вставить("Заказ", ЗаказОснование);
		
		ТЗПредоплата = Новый ТаблицаЗначений;
		ТЗПредоплата.Колонки.Добавить("СуммаРасчетов");
		РозничныеПродажиСервер.ЗаполнитьДолгиПоРассрочке(ТЗПредоплата, СуммаРассрочки, СтруктураПараметров);
		
	КонецЕсли;
	
	СуммаПредоплаты = 0;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатуВЧекахККМ") И ЗаказОснование.Контрагент.ВестиРасчетыПоЗаказам Тогда 
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Дата", ТекущаяДатаСеанса());
		СтруктураПараметров.Вставить("Контрагент", ЗаказОснование.Контрагент);
		СтруктураПараметров.Вставить("Договор", ЗаказОснование.Договор);
		СтруктураПараметров.Вставить("Организация", ЗаказОснование.Организация);
		СтруктураПараметров.Вставить("Заказ", ЗаказОснование);
		СтруктураПараметров.Вставить("ВалютаДокумента", ЗаказОснование.ВалютаДокумента);
		СтруктураПараметров.Вставить("ЧекиККМ", Неопределено);
		
		ТаблицаАвансов = ПолучитьТаблицуАвансовПоЗаказу(СтруктураПараметров);
		СуммаПредоплаты = ТаблицаАвансов.Итог("СуммаПлатежа");
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаОборот,
	|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот КАК СуммаАвансаОборот,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК СуммаОплатыОборот,
	|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК СуммаОсталосьОплатить,
	|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК СуммаОплачено
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, , , СчетНаОплату = &Заказ) КАК ОплатаСчетовИЗаказовОбороты";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Заказ", ЗаказОснование);
	ВыборкаОплаты = Запрос.Выполнить().Выбрать();
	
	СуммаОплачено = 0;
	СуммаОсталосьОплатить = 0;
	Если ВыборкаОплаты.Следующий() Тогда
		СуммаОплачено = ВыборкаОплаты.СуммаОплачено;
		СуммаОсталосьОплатить = ВыборкаОплаты.СуммаОсталосьОплатить;
	КонецЕсли;
	
	СтруктураСостоянияЗаказа = Новый Структура;
	СтруктураСостоянияЗаказа.Вставить("СуммаПредоплаты", СуммаПредоплаты);
	СтруктураСостоянияЗаказа.Вставить("СуммаРассрочки", СуммаРассрочки);
	СтруктураСостоянияЗаказа.Вставить("СуммаОплачено", СуммаОплачено);
	СтруктураСостоянияЗаказа.Вставить("СуммаОсталосьОплатить", СуммаОсталосьОплатить);
	
	ДополнительнаяИнформация.Вставить("СостояниеЗаказаОплаты", СтруктураСостоянияЗаказа);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказыПокупателей.Регистратор КАК Регистратор,
	|	""00000000-0000-0000-0000-000000000000"" КАК ГУИДСтрока
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|ГДЕ
	|	ЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
	|	И (ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ЧекККМ
	|			ИЛИ ЗаказыПокупателей.Регистратор ССЫЛКА Документ.ЧекККМВозврат)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОплатаСчетовИЗаказов.Регистратор,
	|	""00000000-0000-0000-0000-000000000000""
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов КАК ОплатаСчетовИЗаказов
	|ГДЕ
	|	ОплатаСчетовИЗаказов.СчетНаОплату = &ЗаказПокупателя
	|	И (ОплатаСчетовИЗаказов.Регистратор ССЫЛКА Документ.ЧекККМ
	|			ИЛИ ОплатаСчетовИЗаказов.Регистратор ССЫЛКА Документ.ЧекККМВозврат)");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказОснование);
	
	ТаблицаЧековККМПоЗаказу = Запрос.Выполнить().Выгрузить();
	Для Каждого ЧекККМПоЗаказу из ТаблицаЧековККМПоЗаказу Цикл
		ЧекККМПоЗаказу.ГУИДСтрока = ЧекККМПоЗаказу.Регистратор.УникальныйИдентификатор();
	КонецЦикла;
	ТаблицаЧековККМПоЗаказу.Колонки.Удалить("Регистратор");
	
	ДополнительнаяИнформация.Вставить("ТаблицаЧековККМПоЗаказу", ТаблицаЧековККМПоЗаказу);
	
	ДанныеXDTO.AdditionalInfo = ДополнительнаяИнформация;
	
КонецПроцедуры

Функция ПолучитьТаблицуАвансовПоЗаказу(ПараметрЗаказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРегОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ = &Заказ
	|					И &УсловиеПоЧекамККМ
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ = &Заказ) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРег) КАК СуммаРег,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРег, 0) = 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|						КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|							ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|						ИНАЧЕ 1
	|					КОНЕЦ * (КурсыВалютыУчета.Курс / КурсыВалютыУчета.Кратность)
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаРег / ВЫБОР
	|					КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|						ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК Курс,
	|	1 КАК Кратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * КурсыВалютыДокумента.Кратность / (КурсыВалютыДокумента.Курс * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРег
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДокумента) КАК КурсыВалютыДокумента
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	КурсыВалютыУчета.Курс,
	|	КурсыВалютыУчета.Кратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(ПараметрЗаказ.Организация));
	Запрос.УстановитьПараметр("Контрагент", ПараметрЗаказ.Контрагент);
	Запрос.УстановитьПараметр("Договор", ПараметрЗаказ.Договор);
	Запрос.УстановитьПараметр("Заказ", ПараметрЗаказ.Заказ);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВалютаРасчетов", ПараметрЗаказ.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента", ПараметрЗаказ.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка", Неопределено);
	
	Если ПараметрЗаказ.Свойство("ЧекиККМ") И Не ПараметрЗаказ.ЧекиККМ = Неопределено Тогда
		Запрос.УстановитьПараметр("ЧекиККМ", ПараметрЗаказ.ЧекиККМ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоЧекамККМ", "(Документ В (&ЧекиККМ))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоЧекамККМ", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	РезультатТЗ = Результат.Выгрузить();
	
	Возврат РезультатТЗ;
	
КонецФункции

Процедура ЗаполнитьДолгиПоРассрочке(ТабличнаяЧасть, СуммаДокумента, СтруктураПараметров)
	
	Дата = ?(Не ЗначениеЗаполнено(СтруктураПараметров.Дата), КонецДня(ТекущаяДатаСеанса()), КонецДня(СтруктураПараметров.Дата));
	Контрагент = СтруктураПараметров.Контрагент;
	Договор = СтруктураПараметров.Договор;
	Организация = СтруктураПараметров.Организация;
	Заказ = СтруктураПараметров.Заказ;
	ЧекиККМ = СтруктураПараметров.ЧекиККМ;
	
	ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ЧекиККМ", ЧекиККМ);

	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаРасчетов,
	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаПлатежа
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			&ДатаОстатков,
	|			ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ЧекККМ)
	|				И Контрагент = &Контрагент
	|				И Договор = &Договор
	|				И Организация = &Организация
	|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|				И Заказ = &Заказ
	|				И Документ В (&ЧекиККМ)) КАК РасчетыСПокупателямиОстатки";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	СуммаДокумента = ТабличнаяЧасть.Итог("СуммаРасчетов");
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияИзмененийНачальнойВыгрузкиДанных

// Выполняет регистрацию изменений для начальной выгрузки данных с учетом даты начала выгрузки и списка организаций.
// Процедура является универсальной и может быть использована для регистрации изменений данных по дате начала выгрузки
// и списку организаций для объектных типов данных и наборов записей регистров.
// Если список организаций не задан (Организации = Неопределено), то изменения регистрируются только по дате начала
// выгрузки.
// Регистрации подлежат данные для всех объектов метаданных, включенных в состав плана обмена.
// Если для объекта метаданных в составе плана обмена установлен признак авторегистрации
// или если признак авторегистрации не установлен и правила регистрации не заданы,
// то регистрация изменений будет выполнена безусловно для всех данных этого типа.
// Если для объекта метаданных заданы правила регистрации, то регистрация изменений будет выполнена 
// с учетом даты начала выгрузки и списка организаций.
// Для документов поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Для бизнес-процессов и для задач поддерживается регистрация изменений по дате начала выгрузки.
// Для наборов записей регистров поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Данная процедура может служить прототипом для разработки собственных процедур регистрации изменений
// для начальной выгрузки данных.
//
// Параметры:
//
//  Получатель - ПланОбменаСсылка - узел плана обмена,
//               для которого требуется выполнить регистрацию изменений данных.
//  ДатаНачалаВыгрузки - Дата - дата, относительно которой необходимо выполнить
//               регистрацию изменений данных для выгрузки. Изменения будут зарегистрированы для данных,
//               которые на оси времени располагаются после этой даты.
//  Организации - Массив
//              - Неопределено - список организаций, для которых необходимо выполнить регистрацию
//               изменений данных. Если параметр не задан, то организации не будут
//               учитываться при регистрации изменений.
//  Данные 		- Массив
//              - Неопределено - список объектов метаданных, для которых необходимо выполнить регистрацию
//               изменений данных. Если параметр не задан, то будут зарегистрированы все объекты из плана обмена.
//
Процедура ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Знач Получатель, ДатаНачалаВыгрузки,
	Организации = Неопределено,
	Данные = Неопределено)
	
	ОтборПоОрганизациям = (Организации <> Неопределено);
	ОтборПоДатеНачалаВыгрузки = ЗначениеЗаполнено(ДатаНачалаВыгрузки);
	
	Если Не ОтборПоОрганизациям И Не ОтборПоДатеНачалаВыгрузки Тогда
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			
			Для Каждого ОбъектМетаданных Из Данные Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ОбъектМетаданных);
				
			КонецЦикла;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Данные);
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ОтборПоДатеНачалаВыгрузкиИОрганизациям = ОтборПоДатеНачалаВыгрузки И ОтборПоОрганизациям;
	
	ИмяПланаОбмена = Получатель.Метаданные().Имя;
	
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ИспользоватьФильтрПоМетаданным = (ТипЗнч(Данные) = Тип("Массив"));
	
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ИспользоватьФильтрПоМетаданным
			И Данные.Найти(ЭлементСоставаПланаОбмена.Метаданные) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
		
		Если ЭлементСоставаПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Запретить Тогда
			
			Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Документы
				
				Если ОтборПоДатеНачалаВыгрузкиИОрганизациям
					// Регистрация по дате и организациям.
					И ЭлементСоставаПланаОбмена.Метаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
					
					Выборка = ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				Иначе // Регистрация по дате
					
					Выборка = ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ЭлементСоставаПланаОбмена.Метаданные)
				ИЛИ ОбщегоНазначения.ЭтоЗадача(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Бизнес-процессы и Задачи
				
				// Регистрация по дате
				Выборка = ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
				
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
					
				КонецЦикла;
				
				Продолжить;
				
			ИначеЕсли ОбщегоНазначения.ЭтоРегистр(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Регистры
				
				// Регистры сведений (независимые).
				Если ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные)
					И ЭлементСоставаПланаОбмена.Метаданные.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					
					ОсновнойОтбор = ОсновнойОтборРегистраСведений(ЭлементСоставаПланаОбмена.Метаданные);
					
					ОтборПоПериоду     = (ОсновнойОтбор.Найти("Период") <> Неопределено);
					ОтборПоОрганизации = (ОсновнойОтбор.Найти("Организация") <> Неопределено);
					
					// Регистрация по дате и организациям.
					Если ОтборПоДатеНачалаВыгрузкиИОрганизациям И ОтборПоПериоду И ОтборПоОрганизации Тогда
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузкиИОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
						
					ИначеЕсли ОтборПоДатеНачалаВыгрузки И ОтборПоПериоду Тогда // Регистрация по дате
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузки(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
						
					ИначеЕсли ОтборПоОрганизациям И ОтборПоОрганизации Тогда // Регистрация по организациям.
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, Организации);
						
					Иначе
						
						Выборка = Неопределено;
						
					КонецЕсли;
					
					Если Выборка <> Неопределено Тогда
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							Для Каждого ИмяИзмерения Из ОсновнойОтбор Цикл
								
								НаборЗаписей.Отбор[ИмяИзмерения].Значение = Выборка[ИмяИзмерения];
								НаборЗаписей.Отбор[ИмяИзмерения].Использование = Истина;
								
							КонецЦикла;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе // Регистры (прочие)
					ЕстьПериодВРегистре = ОбщегоНазначения.ЭтоРегистрБухгалтерии(ЭлементСоставаПланаОбмена.Метаданные)
							ИЛИ ОбщегоНазначения.ЭтоРегистрНакопления(ЭлементСоставаПланаОбмена.Метаданные)
							ИЛИ (ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные)
								И ЭлементСоставаПланаОбмена.Метаданные.ПериодичностьРегистраСведений 
									<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
					Если ОтборПоДатеНачалаВыгрузкиИОрганизациям
						И ЕстьПериодВРегистре
						// Регистрация по дате и организациям.
						И ЭлементСоставаПланаОбмена.Метаданные.Измерения.Найти("Организация") <> Неопределено Тогда
						
						Выборка = ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
							НаборЗаписей.Отбор.Регистратор.Использование = Истина;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					// Регистрация по дате
					ИначеЕсли ЕстьПериодВРегистре Тогда
						
						Выборка = ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
							НаборЗаписей.Отбор.Регистратор.Использование = Истина;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ЭлементСоставаПланаОбмена.Метаданные);
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	&ПолноеИмяОбъекта КАК Таблица
	|ГДЕ
	|	Таблица.Организация В(&Организации)
	|	И Таблица.Дата >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	&ПолноеИмяОбъекта КАК Таблица
	|ГДЕ
	|	Таблица.Дата >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)
	|	И ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузкиИОрганизациям(ОсновнойОтбор,
	ПолноеИмяОбъекта,
	ДатаНачалаВыгрузки,
	Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Измерения
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)
	|	И ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", СтрСоединить(ОсновнойОтбор, ","));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузки(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Измерения
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", СтрСоединить(ОсновнойОтбор, ","));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Измерения
	|ИЗ
	|	&ПолноеИмяОбъекта КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", СтрСоединить(ОсновнойОтбор, ","));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ОсновнойОтборРегистраСведений(ОбъектМетаданных)
	
	Результат = Новый Массив;
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
		И ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
		
		Результат.Добавить("Период");
		
	КонецЕсли;
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		
		Если Измерение.ОсновнойОтбор Тогда
			
			Результат.Добавить(Измерение.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбработкаДанных

Функция НайтиКассовуюСмену(КассаККМ, НомерСмены, ДатаСмены)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.НомерСменыККТ = &НомерКассовойСменыККМ
	|	И (&ДатаСмены МЕЖДУ КассоваяСмена.НачалоКассовойСмены И КассоваяСмена.ОкончаниеКассовойСмены
	|		ИЛИ КассоваяСмена.НачалоКассовойСмены <= &ДатаСмены И КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1))");
	
	Запрос.УстановитьПараметр("НомерКассовойСменыККМ", Число(НомерСмены));
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ДатаСмены", ДатаСмены);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Документ = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(Выборка.Ссылка);
	Иначе
		Документ = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Функция СтавкаНДСПоСтроке(СтавкаСтрокой)
	Если СтавкаСтрокой = "НДС18" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС18_118" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10_110" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС0" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 0
		|	И НЕ СтавкиНДС.НеОблагается";
	ИначеЕсли СтавкаСтрокой = "НДС20" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС20_120" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";	
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.НеОблагается";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	Иначе
		Возврат Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ПолучитьСтрокиТЧБезналичнаяОплата(ДанныеXDTO, КомпонентыОбмена, ДляВозвратТовара = Ложь)

	Перем ОплатыПлатежнымиСистемами, AdditionalInfo;
	
	МассивСтрокОплата 		= Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаСертификатами Цикл
			
			СтруктураДанныхСтроки = Новый Структура;
			
			Если ЗначениеЗаполнено(Строка.СерийныйНомер) Тогда
				
				ПС = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
					КомпонентыОбмена,
					Строка.ВидПодарочногоСертификата,
					ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ВидыПодарочныхСертификатов_Получение"), 
					"ПолучитьСсылку").Ссылка;
				
				Если ОбщегоНазначения.СсылкаСуществует(ПС) Тогда
					СерийныйНомерСсылка = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Строка.СерийныйНомер,Истина,,ПС);
						
					СтруктураДанныхСтроки.Вставить("НомерСертификата", СерийныйНомерСсылка);
				КонецЕсли;
			КонецЕсли;
					
			Инструкция = Новый Структура;
			Инструкция.Вставить("Значение", Строка.ВидПодарочногоСертификата);
			Инструкция.Вставить("ИмяПКО", "Справочник_ВидыПодарочныхСертификатов_Получение");
			
			СтруктураДанныхСтроки.Вставить("ПодарочныйСертификат", Инструкция);
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);        
			Если НЕ ДляВозвратТовара Тогда
				СтруктураДанныхСтроки.Вставить("СуммаПогашенияСертификата", Строка.Сумма);
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ДанныеXDTO.Свойство("AdditionalInfo") 
		ИЛИ Не ДанныеXDTO.AdditionalInfo.Свойство("ОплатыПлатежнымиСистемами", ОплатыПлатежнымиСистемами) Тогда 
		ОплатыПлатежнымиСистемами = Новый Соответствие;
	КонецЕсли;
	
	ОплатаПлатежнымиКартами = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		ОплатаПлатежнымиКартами = ДанныеXDTO.ОплатаПлатежнымиКартами;
	КонецЕсли;
	
	ВыдачаНаличных			= ДанныеXDTO.Свойство("AdditionalInfo", AdditionalInfo) И AdditionalInfo.Свойство("ЭтоВыдачаНаличных");
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартамиПодарочныхСертификатов")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОплатаПлатежнымиКартами, 
														ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов);
	КонецЕсли;
	
	Для Каждого Строка Из ОплатаПлатежнымиКартами Цикл
			
		СтруктураДанныхСтроки = Новый Структура(
			"Сумма, 
			|ВидОплаты, 
			|НомерПлатежнойКарты, 
			|ЭквайринговыйТерминал, 
			|ВидПлатежнойКарты, 
			|СсылочныйНомер, 
			|ИдентификаторПлатежнойСистемы, 
			|СуммаКомиссии, 
			|СпособОплаты, 
			|ТипПлатежнойСистемы,
			|ИдентификаторСтроки, 
			|ВидКарты");

		ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, Строка);
		
		СтруктураДанныхСтроки.Сумма 				= Строка.СуммаОплаты;
		СтруктураДанныхСтроки.ВидОплаты 			= Перечисления.ВидыБезналичныхОплат.БанковскаяКарта;
		СтруктураДанныхСтроки.НомерПлатежнойКарты	= Строка.НомерКарты;
		СтруктураДанныхСтроки.ЭквайринговыйТерминал	= Справочники.СпособыОплаты.ПустаяСсылка();
		СтруктураДанныхСтроки.ВидПлатежнойКарты		= СтруктураДанныхСтроки.ВидКарты;

		Если ОплатыПлатежнымиСистемами.Количество()
			И ЗначениеЗаполнено(СтруктураДанныхСтроки.ИдентификаторСтроки)
			И ТипЗнч(ОплатыПлатежнымиСистемами.Получить(СтруктураДанныхСтроки.ИдентификаторСтроки)) = Тип("Структура") Тогда

			ПараметрыПС = ОплатыПлатежнымиСистемами.Получить(СтруктураДанныхСтроки.ИдентификаторСтроки);
			ПараметрыПС.Свойство("ИдентификаторПлатежнойСистемы", СтруктураДанныхСтроки.ИдентификаторПлатежнойСистемы);
			ПараметрыПС.Свойство("ИдентификаторОплаты", 		  СтруктураДанныхСтроки.СсылочныйНомер);				
			ПараметрыПС.Свойство("СпособОплаты", 		  		  СтруктураДанныхСтроки.СпособОплаты);				
			ПараметрыПС.Свойство("ТипПлатежнойСистемы", 		  СтруктураДанныхСтроки.ТипПлатежнойСистемы);				

			СтруктураДанныхСтроки.ТипПлатежнойСистемы = ?(ЗначениеЗаполнено(СтруктураДанныхСтроки.ТипПлатежнойСистемы), 
				XMLЗначение(
					Тип("ПеречислениеСсылка.ТипыПлатежнойСистемыККТ"), 
					СтруктураДанныхСтроки.ТипПлатежнойСистемы),
				Перечисления.ТипыПлатежнойСистемыККТ.ПустаяСсылка());
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				
			ИмяПКО 					= "Справочник_Контрагенты_Получение";
			ПКОКонтрагент 			= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			Контрагент 				= ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
															ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
															
			СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
				
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Строка.ЭквайринговыйТерминал) Тогда
				
			ИмяПКО 					= "Справочник_ЭквайринговыеТерминалы_Получение";
			ПКОЭТ 					= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			ЭквайринговыйТерминал 	= ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
																		Строка.ЭквайринговыйТерминал,
																		ПКОЭТ, 
																		"ПолучитьСсылку").Ссылка;
															
			СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
				
		КонецЕсли;
			
		Если СтруктураДанныхСтроки.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей
			ИЛИ СтруктураДанныхСтроки.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.ЮКасса Тогда
			
			ЭтоСБП = СтруктураДанныхСтроки.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей;
			
			СтруктураДанныхСтроки.ВидОплаты = ?(ЭтоСБП, 
				Перечисления.ВидыБезналичныхОплат.СБП, 
				Перечисления.ВидыБезналичныхОплат.БанковскаяКарта);
			
			Если ЗначениеЗаполнено(СтруктураДанныхСтроки.СпособОплаты) Тогда
				ЭквайринговыйТерминал = XMLЗначение(
					Тип("СправочникСсылка.СпособыОплаты"), 
					СтруктураДанныхСтроки.СпособОплаты);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) 
				ИЛИ Не ОбщегоНазначения.СсылкаСуществует(ЭквайринговыйТерминал) Тогда
			
				ИмяПКО 					= "Справочник_КассыККМ_Получение";
				ПКОКасса 				= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				КассаККМ 				= ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					ДанныеXDTO.КлючевыеСвойства.КассаККМ,
					ПКОКасса, "ПолучитьСсылку").Ссылка;
				
    	        Организация				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "Владелец");    

				Если СтруктураДанныхСтроки.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей Тогда
				
					ЭквайринговыйТерминал 	= ИнтеграцияСПлатежнымиСистемамиУНФ.НайтиИлиСоздатьЭквайринговыйТерминалСБП(
						Организация, 
						КассаККМ);
				Иначе
					
					Если СтруктураДанныхСтроки.Свойство("Контрагент") Тогда
						Эквайрер = СтруктураДанныхСтроки.Контрагент;
					Иначе
						Эквайрер = ОнлайнОплатыУНФ.НайтиИлиСоздатьЭквайераПоУмолчанию(Организация, Истина);
					КонецЕсли;
					
					СтруктураПараметровЭТ = Новый Структура;
					СтруктураПараметровЭТ.Вставить("Организация", 	Организация);
					СтруктураПараметровЭТ.Вставить("Эквайер", 		Эквайрер);
					
					ЭквайринговыйТерминал 	= ОнлайнОплатыУНФ.НайтиИлиСоздатьЭквайринговыйТерминалПоУмолчанию(СтруктураПараметровЭТ);
					
				КонецЕсли;			
					
			КонецЕсли;

			Если ЗначениеЗаполнено(ЭквайринговыйТерминал) 
				И ЭквайринговыйТерминал.ВидыПлатежныхКарт.Количество() Тогда
				
				ПроцентКомиссии = ?(ДляВозвратТовара, 				
					ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ПроцентКомиссииПриВозврате,
					ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ПроцентКомиссии);
					
				СуммаКомиссии   = Строка.СуммаОплаты * ПроцентКомиссии / 100;
				
				СтруктураДанныхСтроки.Вставить("СуммаКомиссии", СуммаКомиссии);
			
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			
		КонецЕсли;

		Если ВыдачаНаличных	Тогда
			СтруктураДанныхСтроки.ВидОплаты	= Перечисления.ВидыБезналичныхОплат.ВыдачаНаличных;
		КонецЕсли;
		
		МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	СуммаПостоплаты = 0;
	Если ДанныеXDTO.Свойство("ОплатыККМ") Тогда
		Для Каждого Строка Из ДанныеXDTO.ОплатыККМ Цикл
			Если Строка.ТипОплаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ТипОплаты.Значение = "Постоплата" Тогда
				СуммаПостоплаты = СуммаПостоплаты + Строка.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СуммаПостоплаты > 0 Тогда
		СтруктураДанныхСтроки = Новый Структура;	
		СтруктураДанныхСтроки.Вставить("Сумма", СуммаПостоплаты);
		СтруктураДанныхСтроки.Вставить("ВидОплаты", Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку);
		МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
	КонецЕсли;
	
	Возврат МассивСтрокОплата;
	
КонецФункции

Функция ФизлицоЯвляетсяДействующимСотрудником(Физлицо)

	Результат = Ложь;
	Если ТипЗнч(Физлицо) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		
		СсылкаНаФизлицо = Физлицо.Ссылка;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втСотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Физлицо = &Физлицо
		|	И НЕ Сотрудники.ЭтоГруппа
		|	И НЕ Сотрудники.ПометкаУдаления
		|	И НЕ Сотрудники.Недействителен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	втСотрудник.Ссылка КАК Сотрудник
		|ИЗ
		|	втСотрудник КАК втСотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудниковУНФ КАК ТекущиеКадровыеДанныеСотрудниковУНФ
		|		ПО втСотрудник.Ссылка = ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник
		|			И (ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаПриема <= &Сегодня)
		|			И (ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1))
		|			И (ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
		|ГДЕ
		|	НЕ ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втСотрудник.Ссылка
		|ИЗ
		|	втСотрудник КАК втСотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудниковУНФ КАК ТекущиеКадровыеДанныеСотрудниковУНФ
		|		ПО втСотрудник.Ссылка = ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник
		|			И (ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаПриема <= &Сегодня)
		|			И (ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1))
		|			И (ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаУвольнения > &Сегодня)
		|ГДЕ
		|	НЕ ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)");
		Запрос.УстановитьПараметр("Физлицо", СсылкаНаФизлицо);
		Запрос.УстановитьПараметр("Сегодня", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = ЗначениеЗаполнено(Выборка.Сотрудник);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолучитьПравилоКонвертации(ПравилаКонвертации, ОбъектФорматаИмяПКО)
	
	ПравилоКонвертации = ПравилаКонвертации.Найти(ОбъектФорматаИмяПКО, "ОбъектФормата");
	
	Если ПравилоКонвертации = Неопределено Тогда
		ПравилоКонвертации = ПравилаКонвертации.Найти(ОбъектФорматаИмяПКО, "ИмяПКО");
	КонецЕсли;

	Если ПравилоКонвертации = Неопределено Тогда
		ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	КонецЕсли;
	
	Возврат ПравилоКонвертации;
	
КонецФункции

Функция ПолучитьПравилоОбработки(ПравилаОбработки, Имя)
	
	ПравилоКонвертации = ПравилаОбработки.Найти(Имя, "Имя");

	Если ПравилоКонвертации = Неопределено Тогда
		
		ПравилоКонвертации = ПравилаОбработки.Добавить();
		ПравилоКонвертации.Имя = Имя;
		
	КонецЕсли;
	
	Возврат ПравилоКонвертации;
	
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
					
	Если (ЗначениеЗаполнено(СвойствоКонфигурации)
			И РодительПКС.Найти(СвойствоКонфигурации, "СвойствоКонфигурации") <> Неопределено)
		ИЛИ (НЕ ЗначениеЗаполнено(СвойствоКонфигурации)
			И ЗначениеЗаполнено(СвойствоФормата)
			И РодительПКС.Найти(СвойствоФормата, "СвойствоФормата") <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
	
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
	
	КонвертацияТабличнойЧасти = ?(ЗначениеЗаполнено(ИмяТЧКонфигурации),
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти(ИмяТЧКонфигурации, "ТЧКонфигурации"),
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти(ИмяТЧФормата, "ТЧФормата"));
	
	Если КонвертацияТабличнойЧасти = Неопределено Тогда
		
		КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    	КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    	КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    	КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
		
	КонецЕсли;
	
    Возврат КонвертацияТабличнойЧасти.Свойства;
	
КонецФункции

Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции

Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	
	Результат = Новый Структура;

	Если Источник = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции

Процедура ОбработатьТегКассир_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, ИмяРеквизита = "Кассир")
	
	Если ДанныеXDTO.Свойство("Кассир") Тогда
		
		ИмяПКО 		= "Справочник_ФизическиеЛица_Получение";
		ПКОФизЛицо	= ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		Автор		= ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.Кассир, ПКОФизЛицо, "ПолучитьСсылку").Ссылка;
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяРеквизита, Автор);
		
		ЗаполнитьЗначенияСвойств(ПолученныеДанные, Новый Структура(ИмяРеквизита, Автор));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКассираПоДаннымЧека(ПолученныеДанные)
	
	Перем Кассир;
	
	Если  ПолученныеДанные.ДополнительныеСвойства.Свойство("Кассир", Кассир) 
		И ЗначениеЗаполнено(Кассир) Тогда
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиПользователя.Пользователь КАК Автор,
		|	Сотрудники.Ссылка КАК Ответственный
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
		|		ПО СотрудникиПользователя.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.Физлицо = &Кассир";
		
		Запрос.УстановитьПараметр("Кассир",	Кассир);
		
		ДанныеПоиска = Запрос.Выполнить().Выбрать();
		
		Если ДанныеПоиска.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПолученныеДанные, ДанныеПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПартииИСерии(ПолученныеДанные)
	
	Перем Запасы, ШтрихКод, Партия;
	
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧМарки.НомерСтроки КАК НомерСтроки,
	|	ТЧМарки.Номенклатура КАК Номенклатура,
	|	ТЧМарки.Марка КАК Марка
	|ПОМЕСТИТЬ ТЧМарки
	|ИЗ
	|	&ТЧМарки КАК ТЧМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ТЧМарки.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ МаркиЧВТ
	|ИЗ
	|	ТЧМарки КАК ТЧМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТЧМарки.Марка = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	ТЧМарки.Номенклатура <> ШтрихкодыУпаковокТоваров.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке КАК ЧастичноеВыбытиеКоличество,
	|	ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия КАК ЧастичноеВыбытиеВариантУчета,
	|	МаркиЧВТ.Номенклатура КАК ЧастичноеВыбытиеНоменклатура,
	|	МаркиЧВТ.Характеристика КАК ЧастичноеВыбытиеХарактеристика,
	|	МаркиЧВТ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	МаркиЧВТ КАК МаркиЧВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО (ОписаниеНоменклатурыИС.Номенклатура = МаркиЧВТ.Номенклатура)";

	ТекстЗапросаПартииПоУмолчанию = 
	
	"ВЫБРАТЬ
	|	ТЧЗапасы.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТЧЗапасы.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТЧЗапасы
	|ИЗ
	|	&ТЧЗапасы КАК ТЧЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПартииКонтрагентов.Партия) КАК Партия,
	|	ТЧЗапасы.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТЧЗапасы КАК ТЧЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПартииКонтрагентов КАК ПартииКонтрагентов
	|		ПО ТЧЗапасы.Номенклатура = ПартииКонтрагентов.Номенклатура
	|ГДЕ
	|	ТЧЗапасы.Номенклатура.ПроверятьЗаполнениеПартий
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧЗапасы.НомерСтроки";
	
	#КонецОбласти

	СписокШтрихкодов 	= Новый Массив;
	СоответствиеСтрок   = Новый Соответствие;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Запасы", Запасы) Тогда
		
		Для НомерСтроки = 1 По Запасы.Количество() Цикл
			
			СтруктураСтроки = Запасы[НомерСтроки-1];
			
			Если СтруктураСтроки.Свойство("ШтрихКод", ШтрихКод)
				И ЗначениеЗаполнено(ШтрихКод) Тогда
				
				Если СоответствиеСтрок.Получить(ШтрихКод) = Неопределено Тогда 
					
					СписокШтрихкодов.Добавить(СтруктураСтроки);
					СоответствиеСтрок.Вставить(ШтрихКод, Новый Массив);
					
				КонецЕсли;
				
				МассивСтрок = СоответствиеСтрок.Получить(ШтрихКод);
				МассивСтрок.Добавить(НомерСтроки);
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Если СписокШтрихкодов.Количество() Тогда
	
		ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СписокШтрихкодов);

		Для Каждого КлючИЗначение Из ДанныеПоШтрихкодам Цикл
			
			Если НЕ КлючИЗначение.Значение.Свойство("Партия", Партия) 
				ИЛИ Не ЗначениеЗаполнено(Партия) Тогда
				Продолжить;
			КонецЕсли;
			
			ШтрихКод  	= КлючИЗначение.Ключ;
			СтрокиТЧ	= СоответствиеСтрок.Получить(ШтрихКод);
			
			Для Каждого НомерСтроки Из СтрокиТЧ Цикл
				
				ПолученныеДанные.Запасы[НомерСтроки-1].Партия = Партия;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// заполнение партий по-умолчанию
	ТЧЗапасы = ПолученныеДанные.Запасы.Выгрузить(
		Новый Структура("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка()),
		"НомерСтроки, Номенклатура");

	Запрос = Новый Запрос(ТекстЗапросаПартииПоУмолчанию);
	Запрос.УстановитьПараметр("ТЧЗапасы", ТЧЗапасы);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();

	Пока ВыборкаЗапроса.Следующий() Цикл
		ПолученныеДанные.Запасы[ВыборкаЗапроса.НомерСтроки-1].Партия = ВыборкаЗапроса.Партия;
	КонецЦикла;
	
	Если ПолученныеДанные.СерииНоменклатуры.Количество() Тогда
		
		Для Каждого СтрокаТЧ Из ПолученныеДанные.Запасы Цикл
			СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(СтрокаТЧ, ПолученныеДанные, "КлючСвязи");
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолученныеДанные.АкцизныеМарки.Количество() Тогда
		
		ТЧМарки = ПолученныеДанные.АкцизныеМарки.Выгрузить(,"НомерСтроки");
        ТЧМарки.Очистить();
		
		ТЧМарки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЧМарки.Колонки.Добавить("Марка", 		 Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
				
		Для Каждого СтрокаМарки Из ПолученныеДанные.АкцизныеМарки Цикл
		
        	СтрокаТоваров	= ПолученныеДанные.Запасы.Найти(СтрокаМарки.КлючСвязи, "КлючСвязи");
			Марка 			= ?(ЗначениеЗаполнено(СтрокаМарки.АкцизнаяМарка),
				СтрокаМарки.АкцизнаяМарка,
				СтрокаМарки.ШтрихкодУпаковки);
			
			Если СтрокаТоваров <> Неопределено 
				И ЗначениеЗаполнено(Марка) Тогда
			
				ОбработкаМарки = ТЧМарки.Добавить();
				
				ЗаполнитьЗначенияСвойств(ОбработкаМарки, СтрокаТоваров);
				ЗаполнитьЗначенияСвойств(ОбработкаМарки, СтрокаМарки);

				ОбработкаМарки.Марка = Марка;
				
			КонецЕсли;	

		КонецЦикла;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТЧМарки", ТЧМарки);

		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			
		Пока ВыборкаЗапроса.Следующий() Цикл

			СтрокаМарки = ПолученныеДанные.АкцизныеМарки[ВыборкаЗапроса.НомерСтроки - 1];
			
			ЗаполнитьЗначенияСвойств(СтрокаМарки, ВыборкаЗапроса);
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваТЧТовары(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, ДляВозврата = Ложь)
	
	МассивСтрокТовары 			= Новый Массив;
	МассивСтрокСерии			= Новый Массив;

	МассивСтрокПодарки 			= Новый Массив;
	МассивСтрокСерииПодарков	= Новый Массив;
	
	МассивСтрокСкидки 				= Новый Массив;
	МассивСтрокНачисленныеБонусы 	= Новый Массив;

	ИдентификаторыСтрок = Новый Соответствие;

	Скидки = Новый Соответствие;
	НачисленныеБонусы = Новый Соответствие;

	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		Если ДанныеXDTO.AdditionalInfo.Свойство("ПримененныеСкидки") Тогда
			Скидки = ДанныеXDTO.AdditionalInfo.ПримененныеСкидки;
		КонецЕсли;
		Если ДанныеXDTO.AdditionalInfo.Свойство("НачисленныеБонусы") Тогда
			НачисленныеБонусы = ДанныеXDTO.AdditionalInfo.НачисленныеБонусы;
		КонецЕсли;
		Если ДанныеXDTO.AdditionalInfo.Свойство("ПримененныеПромокоды") Тогда
			ДанныеXDTO.Вставить("ПримененныеПромокоды", ДанныеXDTO.AdditionalInfo.ПримененныеПромокоды);
		КонецЕсли;
	КонецЕсли;

	Если ДляВозврата Тогда
		
		ИмяТабличнойЧасти = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
			"ТоварыВозвратПродажи", "ВозвратТоваров");
		
	Иначе
		
		ИмяТабличнойЧасти = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
			"ТоварыПродажа", "Товары");
		
	КонецЕсли;
	
	#Область ТоварыУслуги
	КлючСвязи = 0;
	ТабличнаяЧастьТовары = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧасти, ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Штрихкод", "Штрихкод");
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
		
		ИспользоватьТипыЗапасов = ТабличнаяЧастьТовары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			
			КлючСвязи 			  = КлючСвязи + 1;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если Не ЗначениеЗаполнено(Строка.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			// Получим хранимое значение ШК по переданному значению из РМК.
			// Это необходимо для символьных значений ШК переданных из РМК с несовпадающим регистром.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Т.Штрихкод КАК Штрихкод
				|ИЗ
				|	РегистрСведений.ШтрихкодыНоменклатуры КАК Т
				|ГДЕ
				|	Т.Штрихкод = &Штрихкод
				|");
			
			Запрос.УстановитьПараметр("Штрихкод", Строка.Штрихкод);
	
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураДанныхСтроки.Вставить("Штрихкод", Выборка.Штрихкод);
			КонецЕсли;

			#Область СкидкиНаценки
			ДанныеСкидки = Скидки.Получить(Строка.ИдентификаторСтроки);
			Если ДанныеСкидки <> Неопределено Тогда
	  			СкидкаСтруктура = Новый Структура;
				
				ИдентификаторСкидки = Новый УникальныйИдентификатор(ДанныеСкидки.СкидкаНаценка);
				СкидкаСсылка = Справочники.АвтоматическиеСкидки.ПолучитьСсылку(ИдентификаторСкидки);
				
				Если ОбщегоНазначения.СсылкаСуществует(СкидкаСсылка) Тогда
					СкидкаСтруктура.Вставить("КлючСвязи", КлючСвязи);
		   			СкидкаСтруктура.Вставить("СкидкаНаценка", СкидкаСсылка);
					СкидкаСтруктура.Вставить("Сумма", ДанныеСкидки.Сумма);
					
					МассивСтрокСкидки.Добавить(СкидкаСтруктура);
				КонецЕсли;
			КонецЕсли;
			#КонецОбласти
	
			#Область БонусныеБаллыКНачислению
			ДанныеНачисленныхБонусов = НачисленныеБонусы.Получить(Строка.ИдентификаторСтроки);
			Если ДанныеНачисленныхБонусов <> Неопределено Тогда
	  			НачисленныеБонусыСтруктура = Новый Структура;
				
				ИдентификаторСкидки = Новый УникальныйИдентификатор(ДанныеНачисленныхБонусов.СкидкаНаценка);
				СкидкаСсылка = Справочники.АвтоматическиеСкидки.ПолучитьСсылку(ИдентификаторСкидки);
	
				Если ОбщегоНазначения.СсылкаСуществует(СкидкаСсылка) Тогда
					НачисленныеБонусыСтруктура.Вставить("КлючСвязи", КлючСвязи);
		   			НачисленныеБонусыСтруктура.Вставить("СкидкаНаценка", СкидкаСсылка);
					НачисленныеБонусыСтруктура.Вставить("ДатаНачисления", ДанныеНачисленныхБонусов.ДатаНачисления);
					НачисленныеБонусыСтруктура.Вставить("КоличествоБонусныхБаллов", ДанныеНачисленныхБонусов.КоличествоБонусныхБаллов);
					
					МассивСтрокНачисленныеБонусы.Добавить(НачисленныеБонусыСтруктура);
				КонецЕсли;
			КонецЕсли;
			#КонецОбласти

			ЭтоПодарок = Ложь;
			
			Если ДанныеXDTO.Свойство("СкидкиНаценки")
				И ЗначениеЗаполнено(ДанныеXDTO.СкидкиНаценки) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторСтроки", Строка.ИдентификаторСтроки);
				
				НайденныеСтроки = ДанныеXDTO.СкидкиНаценки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для каждого СтрокаСкидкиНаценки Из НайденныеСтроки Цикл
						Если СтрокаСкидкиНаценки.ВидСкидки.Значение = "Подарок" Тогда
							ЭтоПодарок = Истина;
							СтруктураДанныхСтроки.Сумма = СтруктураДанныхСтроки.Сумма + СтрокаСкидкиНаценки.СуммаСкидки;
						ИначеЕсли СтрокаСкидкиНаценки.ВидСкидки.Значение = "Бонус" Тогда
							СтруктураДанныхСтроки.Вставить("СуммаСкидкиОплатыБонусом", СтрокаСкидкиНаценки.СуммаСкидки);
						ИначеЕсли СтрокаСкидкиНаценки.ВидСкидки.Значение = "Дисконтная" Тогда
							СтруктураДанныхСтроки.Вставить("ПроцентАвтоматическойСкидки", СтрокаСкидкиНаценки.ПроцентСкидки);
							СтруктураДанныхСтроки.Вставить("СуммаАвтоматическойСкидки", СтрокаСкидкиНаценки.СуммаСкидки);
						ИначеЕсли СтрокаСкидкиНаценки.ВидСкидки.Значение = "НаТовар" Тогда
							СтруктураДанныхСтроки.Вставить("ПроцентСкидкиНаценки", СтрокаСкидкиНаценки.ПроцентСкидки);
							СтруктураДанныхСтроки.Вставить("СуммаСкидкиНаценки", СтрокаСкидкиНаценки.СуммаСкидки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Поставщик) Тогда
				Номенклатура = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена,
					Строка.Номенклатура,
					ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Номенклатура_Получение"),
					"ПолучитьСсылку").Ссылка;
				Поставщик = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена,
					Строка.Поставщик,
					ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Контрагенты_Получение"),
					"ПолучитьСсылку").Ссылка;
				ПартияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(Номенклатура,
					Перечисления.СтатусыПартий.ТоварыНаКомиссии,
					Поставщик);
				Если ЗначениеЗаполнено(ПартияПоУмолчанию) Тогда
					СтруктураДанныхСтроки.Вставить("Партия", ПартияПоУмолчанию);
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоПодарок Тогда
				
				МассивСтрокПодарки.Добавить(СтруктураДанныхСтроки);
				
				Если ЗначениеЗаполнено(Строка.Серия) Тогда
					СтруктураДанныхСтроки.Вставить("Серия", Строка.Серия);
					МассивСтрокСерииПодарков.Добавить(СтруктураДанныхСтроки);
				КонецЕсли;
				
			Иначе
				
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
				Если ЗначениеЗаполнено(Строка.Серия) Тогда
					СтруктураДанныхСтроки.Вставить("Серия", Строка.Серия);
					МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
				КонецЕсли;
				
			КонецЕсли;
			
			ИдентификаторыСтрок.Вставить(Строка.ИдентификаторСтроки, СтруктураДанныхСтроки);	
			
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Услуги")    
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Штрихкод", "Штрихкод");
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПодарочныеСертификаты
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл

			КлючСвязи = КлючСвязи + 1;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			                                
			Если СтруктураДанныхСтроки.Сумма < 0 Тогда
				СтруктураДанныхСтроки.Сумма = - СтруктураДанныхСтроки.Сумма;
			КонецЕсли;

			ИнструкцияНоменклатура = Новый Структура;
			ИнструкцияНоменклатура.Вставить("Значение", Строка.ВидПодарочногоСертификата);
			ИнструкцияНоменклатура.Вставить("ИмяПКО", "Справочник_ВидыПодарочныхСертификатов_Получение");
			
			ПС 		  = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена,
				Строка.ВидПодарочногоСертификата,
				ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ВидыПодарочныхСертификатов_Получение"), 
				"ПолучитьСсылку").Ссылка;

			СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.Общая);
			
			Если ОбщегоНазначения.СсылкаСуществует(ПС) Тогда
			
				РеквизитыПС 		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПС, "ВидСтавкиНДС, ЕдиницаИзмерения");
				СтавкаНДС 			= Справочники.СтавкиНДС.СтавкаНДС(РеквизитыПС.ВидСтавкиНДС);
				ЕдиницаИзмерения 	= РеквизитыПС.ЕдиницаИзмерения;
				
				Если ЗначениеЗаполнено(Строка.СерийныйНомер) Тогда
				
					Серия = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Строка.СерийныйНомер,Истина,,ПС);

					Если ЗначениеЗаполнено(Серия) Тогда
						
						СтруктураДанныхСтроки.Вставить("Серия", Серия);
					
						МассивСтрокСерии.Добавить(СтруктураДанныхСтроки); 

					КонецЕсли;
					
				КонецЕсли;
	
			КонецЕсли;

			СтавкаНДСЧисло 	= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС);
			СуммаНДС  		= СтруктураДанныхСтроки.Сумма - СтруктураДанныхСтроки.Сумма / ((СтавкаНДСЧисло + 100) / 100);
			
			СтруктураДанныхСтроки.Вставить("КлючСвязи", 		 КлючСвязи);
			СтруктураДанныхСтроки.Вставить("Количество", 		 1);
			СтруктураДанныхСтроки.Вставить("Цена", 				 СтруктураДанныхСтроки.Сумма);
			СтруктураДанныхСтроки.Вставить("Всего", 			 СтруктураДанныхСтроки.Сумма);
			СтруктураДанныхСтроки.Вставить("Номенклатура", 		 ИнструкцияНоменклатура);
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", 		 СтавкаНДС);
			СтруктураДанныхСтроки.Вставить("СуммаНДС", 		 	 СуммаНДС);
			СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", 	 ЕдиницаИзмерения);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	#Область АкцизныеМарки
	МассивСтрокМарки = Новый Массив;

	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("НомерСтрокиДокумента", 	"КлючСвязи");
	ПравилаЗаполнения.Вставить("НомерАкцизнойМарки", 	"КодАкцизнойМарки");
	
	Если ДанныеXDTO.Свойство("АкцизныеМарки")
		И ЗначениеЗаполнено(ДанныеXDTO.АкцизныеМарки) Тогда
		
		ПравилаЗаполненияАкциз = Новый Соответствие;
		ПравилаЗаполненияАкциз.Вставить("Номенклатура", 		"Номенклатура");
		ПравилаЗаполненияАкциз.Вставить("Характеристика", 		"Характеристика");
		ПравилаЗаполненияАкциз.Вставить("Серия", 				"Серия");
		ПравилаЗаполненияАкциз.Вставить("Упаковка", 			"Упаковка");
		
		Для Каждого Строка Из ДанныеXDTO.АкцизныеМарки Цикл

			СтрокаТоваров 		  = ИдентификаторыСтрок.Получить(Строка.ИдентификаторСтроки);
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);

			Если Не ЗначениеЗаполнено(Строка.НомерСтрокиДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("КлючСвязи", СтрокаТоваров.КлючСвязи);
			КонецЕсли;
			
			СтруктураАкцизнаяМарка 	= ДанныеКоллекцииВВидеСтруктуры(СтрокаТоваров, ПравилаЗаполненияАкциз);
			СтруктураАкцизнаяМарка.Вставить("ЗначениеШтрихкода", Строка.НомерАкцизнойМарки);
			
			Инструкция = Новый Структура("Значение, ИмяПКО");
			Инструкция.Значение = СтруктураАкцизнаяМарка;
			Инструкция.ИмяПКО = "Справочник_ШтрихкодыУпаковокТоваровИзСтр_Получение";
			
			СтруктураДанныхСтроки.Вставить("АкцизнаяМарка", Инструкция);
			
			МассивСтрокМарки.Добавить(СтруктураДанныхСтроки);
				
		КонецЦикла;
		
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("НомерСтрокиДокумента", 	"КлючСвязи");
	
	Если ДанныеXDTO.Свойство("МаркировкиУпаковок")
		И ЗначениеЗаполнено(ДанныеXDTO.МаркировкиУпаковок) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.МаркировкиУпаковок Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);

			Инструкция = Новый Структура("Значение, ИмяПКО");
			Инструкция.Значение = Строка.МаркировкаУпаковки;
			Инструкция.ИмяПКО = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
			
			СтруктураДанныхСтроки.Вставить("ШтрихкодУпаковки", Инструкция);
			
			МассивСтрокМарки.Добавить(СтруктураДанныхСтроки);

		КонецЦикла;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПримененныеПромокоды
	МассивСтрокПримененныеПромокоды = Новый Массив;

	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Промокод", "Промокод");
	ПравилаЗаполнения.Вставить("СкидкаПредоставлена", "СкидкаПредоставлена");
	ПравилаЗаполнения.Вставить("ЭтоАктивацияПромокода", "ЭтоАктивацияПромокода");
	
	Если ДанныеXDTO.Свойство("ПримененныеПромокоды")
		И ЗначениеЗаполнено(ДанныеXDTO.ПримененныеПромокоды) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПримененныеПромокоды Цикл

			Если НЕ ЗначениеЗаполнено(Строка.УсловиеПредоставленияСкидки) Тогда
				Продолжить;
			КонецЕсли;

			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			ИдентификаторУсловияПредоставленияСкидки = Новый УникальныйИдентификатор(Строка.УсловиеПредоставленияСкидки);
			УсловиеПредоставленияСкидкиСсылка = Справочники.УсловияПредоставленияСкидокНаценок.ПолучитьСсылку(ИдентификаторУсловияПредоставленияСкидки);
			
			Если ОбщегоНазначения.СсылкаСуществует(УсловиеПредоставленияСкидкиСсылка) Тогда
				СтруктураДанныхСтроки.Вставить("УсловиеПредоставленияСкидки", УсловиеПредоставленияСкидкиСсылка);
			КонецЕсли;
			
			МассивСтрокПримененныеПромокоды.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти

	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
	
	Если МассивСтрокМарки.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("АкцизныеМарки", МассивСтрокМарки);
	КонецЕсли;
	
	Если МассивСтрокПодарки.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Подарки", МассивСтрокПодарки);
	КонецЕсли;
	
	Если МассивСтрокСерииПодарков.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииПодарков", МассивСтрокСерииПодарков);
	КонецЕсли;
	
	Если МассивСтрокСкидки.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СкидкиНаценки", МассивСтрокСкидки);
	КонецЕсли;
	
	Если МассивСтрокНачисленныеБонусы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БонусныеБаллыКНачислению", МассивСтрокНачисленныеБонусы);
	КонецЕсли;
	
	Если МассивСтрокПримененныеПромокоды.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПримененныеПромокоды", МассивСтрокПримененныеПромокоды);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты_Отправка_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДополнительныеРеквизиты_Отправка_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДополнительныеРеквизиты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры

Функция ИнициализироватьРасширенныйРежим(КомпонентыОбмена) 

	Перем КешРасширенногоРежима;

	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	Если НЕ ПараметрыКонвертации.Свойство("КешРасширенногоРежима", КешРасширенногоРежима) Тогда

		КешРасширенногоРежима 						= Новый Структура;
		ИспользоватьРасширенныйРежимНастройкиУРМК 	= ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныйРежимНастройкиУРМК");
		
		КешРасширенногоРежима.Вставить("ИспользоватьРасширенныйРежимНастройкиУРМК", ИспользоватьРасширенныйРежимНастройкиУРМК);
		
		Если ИспользоватьРасширенныйРежимНастройкиУРМК Тогда
		
			УРМК				 						= КомпонентыОбмена.УзелКорреспондентаОбъект.УРМК;
			ГруппыКатегории		 						= УРМК.ГруппыКатегории;
		
			КешРасширенногоРежима.Вставить("ГруппыКатегории", 		 				 УРМК.ГруппыКатегории);
            КешРасширенногоРежима.Вставить("РаспределениеНоменклатуры", 			 Новый Соответствие);
            КешРасширенногоРежима.Вставить("СистемаНалогообложения", 				 Новый Соответствие);
			
			// формирование кеша распределения номенклатуры
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.ГруппаНоменклатуры КАК ГруппаНоменклатуры,
			|	УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.КассаККМ.Владелец КАК Организация,
			|	УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим
			|ИЗ
			|	Справочник.УниверсальныеРабочиеМестаКассиров.РаспределениеНоменклатуры КАК УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры
			|ГДЕ
			|	УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.Ссылка = &УРМК
			|	И УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.Ссылка.ГруппыКатегории = 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.КатегорияНоменклатуры,
			|	УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.КассаККМ.Владелец,
			|	УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.СпециальныйНалоговыйРежим
			|ИЗ
			|	Справочник.УниверсальныеРабочиеМестаКассиров.РаспределениеНоменклатуры КАК УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры
			|ГДЕ
			|	УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.Ссылка = &УРМК
			|	И УниверсальныеРабочиеМестаКассировРаспределениеНоменклатуры.Ссылка.ГруппыКатегории = 1";

			Запрос.УстановитьПараметр("УРМК", 			 УРМК);

			ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
			Пока ВыборкаЗапроса.Следующий() Цикл
				КешРасширенногоРежима.РаспределениеНоменклатуры.Вставить(ВыборкаЗапроса.ГруппаНоменклатуры, Новый Структура("Организация, СпециальныйНалоговыйРежим", ВыборкаЗапроса.Организация, ВыборкаЗапроса.СпециальныйНалоговыйРежим));
			КонецЦикла;

		КонецЕсли;
		
		ПараметрыКонвертации.Вставить("КешРасширенногоРежима", КешРасширенногоРежима);
		
	КонецЕсли;
	
	Возврат КешРасширенногоРежима.ИспользоватьРасширенныйРежимНастройкиУРМК;
	
КонецФункции

Функция СистемаНалогообложения(Организация, ТорговыйОбъект, Кеш = Неопределено)
	
	Если Кеш <> Неопределено
		И Кеш.СистемаНалогообложения.Получить(Организация) <> Неопределено Тогда       
		
		СистемаНалогообложения = Кеш.СистемаНалогообложения.Получить(Организация);
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
		
		Запрос.УстановитьПараметр("Организация", Организация);
	
		РезультатЗапроса = Запрос.Выполнить();

		ПараметрыПолитики = РезультатЗапроса.Выбрать();
		Если ПараметрыПолитики.Следующий() Тогда
			
			НастроеноРаспределение = Кеш <> Неопределено И Кеш.РаспределениеНоменклатуры.Количество() > 0;
			
			Если РегистрыСведений.ПримененияПатенты.ПрименяетсяПатент(Организация, ТорговыйОбъект) Тогда
				СистемаНалогообложения = "ПатентнаяСистема";
			ИначеЕсли ПараметрыПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
				Если ПараметрыПолитики.ПлательщикЕНВД Тогда
					СистемаНалогообложения = "ЕНВД";
				ИначеЕсли ПараметрыПолитики.ПрименяетсяПатент Тогда
					СистемаНалогообложения = "ПатентнаяСистема";
				Иначе
					СистемаНалогообложения = "Общая";
				КонецЕсли;
			ИначеЕсли ПараметрыПолитики.ПрименяетсяПатент И Не НастроеноРаспределение Тогда
				СистемаНалогообложения = "ПатентнаяСистема";
			ИначеЕсли ПараметрыПолитики.ПлательщикУСН Тогда
				Если ПараметрыПолитики.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
					СистемаНалогообложения = "УпрощеннаяДоход";
				Иначе
					СистемаНалогообложения = "УпрощеннаяДоходМинусРасход";
				КонецЕсли;
			Иначе
				СистемаНалогообложения = "Общая";
			КонецЕсли;

			Если Кеш <> Неопределено Тогда
				Кеш.СистемаНалогообложения.Вставить(Организация, СистемаНалогообложения);
			КонецЕсли;
		Иначе
			СистемаНалогообложения = "Общая";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

Функция ОрганизацияПродажи(ПараметрыКонвертации, ДанныеИБ)
	
	ГруппыКатегории = ПараметрыКонвертации.КешРасширенногоРежима.ГруппыКатегории; 

	Если ГруппыКатегории = 1 Тогда
		ОрганизацияПродажи = ПараметрыКонвертации.КешРасширенногоРежима.РаспределениеНоменклатуры.Получить(ДанныеИБ.КатегорияНоменклатуры);
	ИначеЕсли ГруппыКатегории = 0 Тогда

		ОрганизацияПродажи = ПараметрыКонвертации.КешРасширенногоРежима.РаспределениеНоменклатуры.Получить(ДанныеИБ.Родитель);
	
		Если ОрганизацияПродажи = Неопределено 
			И ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
			
			ОрганизацияПродажи = ОрганизацияПродажи(ПараметрыКонвертации, ДанныеИБ.Родитель);
			
			Если ОрганизацияПродажи <> Неопределено Тогда
				ПараметрыКонвертации.КешРасширенногоРежима.РаспределениеНоменклатуры.Вставить(ДанныеИБ.Родитель, ОрганизацияПродажи);
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;	

	Возврат ОрганизацияПродажи;
	
КонецФункции

Процедура ЗаполнитьДополнительныеРеквизиты(СтруктураДопРеквизитов, ДанныеXDTO)

	МассивДопРеквизитов = Новый Массив;
		
	Для каждого ЭлементНастроек Из СтруктураДопРеквизитов Цикл
		МассивДопРеквизитов.Добавить(ЭлементНастроек.Ключ);
	КонецЦикла;
	
	ДопРеквизиты = Новый ТаблицаЗначений;
	ДопРеквизиты.Колонки.Добавить("Свойство");
	ДопРеквизиты.Колонки.Добавить("ЗначениеСвойства");
		
	Для каждого Элемент Из МассивДопРеквизитов Цикл
		
		Если Не ЗначениеЗаполнено(СтруктураДопРеквизитов[Элемент]) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДопРеквизита = ДопРеквизиты.Добавить();
		Свойство 		 = Новый Структура("Наименование", Элемент);     
		КлючевыеСвойства = Новый Структура("Наименование", Элемент);

		Свойство.Вставить("КлючевыеСвойства", КлючевыеСвойства);
		
		Инструкция = Новый Структура();
		Инструкция.Вставить("ИмяПКО", 	"Справочник_ДополнительныеРеквизиты_Отправка_ИзСтруктуры");
		Инструкция.Вставить("Значение",  Свойство);
		
		СтрокаДопРеквизита.Свойство = Инструкция;
		СтрокаДопРеквизита.ЗначениеСвойства = СтруктураДопРеквизитов[Элемент];
		
	КонецЦикла;
		
	ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ДопРеквизиты);
	
КонецПроцедуры

Процедура ОписаниеНоменклатурыИС(СтруктураДопРеквизитов, ДанныеИБ)

	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки КАК ЕмкостьПотребительскойУпаковки,
	|	ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке,
	|	ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия КАК ВариантЧастичногоВыбытия,
	|	ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения КАК ВариантИспользованияЕдиницыХранения,
	|	0 КАК Порядок
	|ИЗ
	|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|ГДЕ
	|	ОписаниеНоменклатурыИС.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки,
	|	ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура),
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки),
	|	1
	|ИЗ
	|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|		ПО ОписаниеНоменклатурыИС.Номенклатура = НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура
	|ГДЕ
	|	НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	#КонецОбласти
	
	ДанныеНоменклатуры = Новый Структура(
		"ЕмкостьПотребительскойУпаковки, 
		|КоличествоВПотребительскойУпаковке,
		|ВариантЧастичногоВыбытия, 
		|ВариантИспользованияЕдиницыХранения");	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", ДанныеИБ.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, Выборка);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.ВариантЧастичногоВыбытия) Тогда
		
		СтруктураДопРеквизитов.Вставить(
			"ЕмкостьПотребительскойУпаковки", 	 
			ДанныеНоменклатуры.ЕмкостьПотребительскойУпаковки);
			
		СтруктураДопРеквизитов.Вставить(
			"КоличествоВПотребительскойУпаковке", 
			ДанныеНоменклатуры.КоличествоВПотребительскойУпаковке);
			
		СтруктураДопРеквизитов.Вставить(
			"ВариантЧастичногоВыбытия", 
			XMLСтрока(ДанныеНоменклатуры.ВариантЧастичногоВыбытия));
			
		СтруктураДопРеквизитов.Вставить(
			"ВариантИспользованияЕдиницыХранения", 
			XMLСтрока(ДанныеНоменклатуры.ВариантИспользованияЕдиницыХранения));
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСоответствие(ЗначениеСсылка)
	
	Если ТипЗнч(ЗначениеСсылка) = Тип("ПеречислениеСсылка.ПризнакиПредметаРасчета") Тогда
		
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.АгентскоеВознаграждение, "АгентскоеВознаграждение");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход, "ВнереализационныйДоход");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры, "ВыигрышАзартнойИгры");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВыигрышЛотереи, "ВыигрышЛотереи");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ИмущественноеПраво, "ИмущественноеПраво");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета, "ИнойПредметРасчета");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.КурортныйСбор, "КурортныйСбор");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ЛотерейныйБилет, "ЛотерейныйБилет");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата, "ПлатежВыплата");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар, "ПодакцизныйТовар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ, "ПодакцизныйТовар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ, "ПодакцизныйТовар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Работа, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СоставнойПредметРасчета, "СоставнойПредметРасчета");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СтавкаАзартнойИгры, "СтавкаАзартнойИгры");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СтраховыеВзносы, "СтраховыеВзносы");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Товар, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТорговыйСбор, "ТорговыйСбор");
		ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Услуга, "Услуга");
		
	КонецЕсли;
	
	СоответствиеЗначения = ЗначенияДляОтправки.Получить(ЗначениеСсылка);

	Возврат СоответствиеЗначения;
	
КонецФункции

Процедура ЗаполнитьПатент(Объект)

	Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(
		Объект.Организация, 
		Объект.СтруктурнаяЕдиница, 
		Объект.Дата);
		
	Если Объект.СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда

		Объект.Патент = НалогиУНФ.ПатентПоСкладу(
			Объект.Организация, 
			Объект.СтруктурнаяЕдиница, 
			Объект.Дата);
			
			Если Не ЗначениеЗаполнено(Объект.Патент) Тогда
				
			Объект.Патент = Справочники.Патенты.ПолучитьПатентПоУмолчанию(
				Объект.Организация, 
				Объект.Дата);
				
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКонтрагентаВЧеке(ПолученныеДанные)

	Если ЗначениеЗаполнено(ПолученныеДанные.ДисконтнаяКарта) Тогда

		ВладелецДК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.ДисконтнаяКарта, "ВладелецКарты");
		Если ЗначениеЗаполнено(ВладелецДК) Тогда
			ПолученныеДанные.Контрагент = ВладелецДК;
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) 
		И ЗначениеЗаполнено(ПолученныеДанные.Организация) Тогда
		
		СписокВидовДоговора = Новый Массив;
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	
		ПолученныеДанные.Договор = Справочники.ДоговорыКонтрагентов.ПоКонтрагентуПоОрганизации(
			ПолученныеДанные.Контрагент, 
			ПолученныеДанные.Организация, 
			СписокВидовДоговора);

	КонецЕсли;		

КонецПроцедуры

Функция ПолучитьФО(КомпонентыОбмена, ИмяОпции)
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	Если ПараметрыКонвертации.Свойство("КешЗначенийФО") Тогда
		КешЗначенийФО = ПараметрыКонвертации.КешЗначенийФО
	Иначе
		КешЗначенийФО = Новый Структура;
	КонецЕсли;
	
	Если КешЗначенийФО.Свойство(ИмяОпции) Тогда
		ЗначениеОпции = КешЗначенийФО.ИмяОпции;
	Иначе
		ЗначениеОпции = ПолучитьФункциональнуюОпцию(ИмяОпции);
		КешЗначенийФО.Вставить(ИмяОпции, ЗначениеОпции);
		КомпонентыОбмена.Вставить("КешЗначенийФО", КешЗначенийФО);
	КонецЕсли;
	
	Возврат ЗначениеОпции;
	
КонецФункции

Процедура ЗаписатьПризнакХраненияКартЛояльностиВРМК(ДанныеXDTO, УзелСсылка)
	
	ХранитьКартыЛояльностиВРМК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелСсылка, "ХранитьКартыЛояльностиВРМК");
	ДанныеXDTO.Вставить("AdditionalInfo", Новый Структура("ХранитьКартыЛояльностиВРМК", ХранитьКартыЛояльностиВРМК));
	
КонецПроцедуры

Процедура ЗаполнитьДисконтнуюКартуПоУникальномуИдентификатору(ПолученныеДанные, СтрокаГУИД)
	
	ИдентификаторДисконтнойКарты = Новый УникальныйИдентификатор(СтрокаГУИД);
	СсылкаДК = Справочники.ДисконтныеКарты.ПолучитьСсылку(ИдентификаторДисконтнойКарты);
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаДК) Тогда
		ПолученныеДанные.ДисконтнаяКарта = СсылкаДК;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиДисконтнуюКартуПоНомеру(НомерКарты)
	
	КартаЛояльности = Неопределено;
	
	Если Не (НомерКарты) = "" Тогда
		
		ЗапросКарты = Новый Запрос;
		ЗапросКарты.Текст =
		"ВЫБРАТЬ
		|	ДисконтныеКарты.Ссылка КАК Карта
		|ИЗ
		|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
		|ГДЕ
		|	ДисконтныеКарты.КодКартыШтрихкод = &НомерКарты
		|	И НЕ ДисконтныеКарты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДисконтныеКарты.Ссылка
		|ИЗ
		|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
		|ГДЕ
		|	ДисконтныеКарты.КодКартыМагнитный = &НомерКарты
		|	И НЕ ДисконтныеКарты.ПометкаУдаления";
		ЗапросКарты.УстановитьПараметр("НомерКарты", НомерКарты);
		
		РезультатЗапроса = ЗапросКарты.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаКарт = РезультатЗапроса.Выбрать();
			ВыборкаКарт.Следующий();
			КартаЛояльности = ВыборкаКарт.Карта;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КартаЛояльности;
	
КонецФункции

Функция ПолучитьВладельцаКартыПоФИОДатеРождения(ДанныеВладельца)
	ВладелецКарты = Справочники.Контрагенты.ПустаяСсылка();
	
	ЗапросКлиента = Новый Запрос;
	ЗапросКлиента.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Клиент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияЭлПочта
	|		ПО Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформацияЭлПочта.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияЭлПочта.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.Наименование = &КлиентФИО
	|	И Контрагенты.ДатаРождения = &ДатаРождения
	|	И Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|	И (КонтрагентыКонтактнаяИнформацияТелефон.Ссылка ЕСТЬ NULL
	|			ИЛИ КонтрагентыКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|	И (КонтрагентыКонтактнаяИнформацияЭлПочта.Ссылка ЕСТЬ NULL
	|			ИЛИ КонтрагентыКонтактнаяИнформацияЭлПочта.АдресЭП = """")";
	ЗапросКлиента.УстановитьПараметр("КлиентФИО", ДанныеВладельца.Клиент);
	ЗапросКлиента.УстановитьПараметр("ДатаРождения", ДанныеВладельца.ДатаРождения);
	РезультатЗапроса = ЗапросКлиента.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаКлиента = РезультатЗапроса.Выбрать();
		ВыборкаКлиента.Следующий();
		ВладелецКарты = ВыборкаКлиента.Клиент;
	КонецЕсли;
	
	Возврат ВладелецКарты;
КонецФункции

Функция ПолучитьВладельцаДисконтнойКарты(ДанныеВладельцаКарты, ДополнительнаяИнформация)
	ВладелецКарты = Справочники.Контрагенты.ПустаяСсылка();
	
	Если Не ДополнительнаяИнформация = Неопределено Тогда
		
		ДанныеВладельца = ПодготовитьДанныеПоискаСозданияВладельцаКарты(ДанныеВладельцаКарты, ДополнительнаяИнформация);
		Если ДанныеВладельца.НомерТелефона = "" И ДанныеВладельца.АдресЭП = "" Тогда
			ВладелецКарты = ПолучитьВладельцаКартыПоФИОДатеРождения(ДанныеВладельца);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВладелецКарты) Тогда
			РезультатПолучения = СерверЛояльностиПоставщикДанныхУНФ.ПолучитьВладельцаКарты(ДанныеВладельца);
			ВладелецКарты = РезультатПолучения.ВладелецКарты;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВладелецКарты;
КонецФункции

Функция ПодготовитьДанныеПоискаСозданияВладельцаКарты(ДанныеВладельцаКарты, ДополнительнаяИнформация)
	ДанныеВладельца = Новый Структура();
	ДатаРожденияВладельца = Дата(1, 1, 1);
	Если ДанныеВладельцаКарты.Свойство("Датарождения") Тогда
		ДатаРожденияВладельца = ДанныеВладельцаКарты.ДатаРождения;
	КонецЕсли;
	КлиентФИО = "";
	Если ДанныеВладельцаКарты.Свойство("ФИО") Тогда
		КлиентФИО = СокрЛП(ДанныеВладельцаКарты.ФИО)
	ИначеЕсли ДанныеВладельцаКарты.Свойство("Наименование") Тогда
		КлиентФИО = СокрЛП(ДанныеВладельцаКарты.Наименование);
	КонецЕсли;
	
	ДанныеВладельца.Вставить("НомерТелефона", СокрЛП(ДополнительнаяИнформация.НомерТелефона));
	ДанныеВладельца.Вставить("АдресЭП", СокрЛП(ДополнительнаяИнформация.АдресЭП));
	ДанныеВладельца.Вставить("Клиент", КлиентФИО);
	ДанныеВладельца.Вставить("ДатаРождения", ДатаРожденияВладельца);
	
	Возврат ДанныеВладельца;
КонецФункции

Функция ПолучитьДисконтнуюКартуПоНомеру(КомпонентыОбмена, КартаЛояльностиСвойства, ДополнительнаяИнформация = Неопределено)
	
	КартаЛояльности = Справочники.ДисконтныеКарты.ПустаяСсылка();
	КартаГУИД = Новый УникальныйИдентификатор(КартаЛояльностиСвойства.Ссылка.Значение);
	КартаСсылка = Справочники.ДисконтныеКарты.ПолучитьСсылку(КартаГУИД);
	Если Не ОбщегоНазначения.СсылкаСуществует(КартаСсылка) Тогда
		НомерКарты = СокрЛП(КартаЛояльностиСвойства.НомерКарты);
		Если Не НомерКарты = "" Тогда
			КартаЛояльности = НайтиДисконтнуюКартуПоНомеру(НомерКарты);
			Если Не ЗначениеЗаполнено(КартаЛояльности) Тогда
				
				ВладелецКарты = ПолучитьВладельцаДисконтнойКарты(КартаЛояльностиСвойства.ВладелецКарты, ДополнительнаяИнформация);
				КартаОбъект = Справочники.ДисконтныеКарты.СоздатьЭлемент();
				КартаОбъект.КодКартыШтрихкод  = НомерКарты;
				КартаОбъект.КодКартыМагнитный = НомерКарты;
				КартаОбъект.Владелец = СерверЛояльностиПоставщикДанныхУНФ.ПолучитьВидДисконтнойКарты();
				КартаОбъект.ВладелецКарты = ВладелецКарты;
				КартаОбъект.Наименование = ДисконтныеКартыУНФСервер.УстановитьНаименованиеДисконтнойКарты(КартаОбъект.Владелец,
					ВладелецКарты, НомерКарты, НомерКарты);
				КартаОбъект.УстановитьСсылкуНового(КартаСсылка);
				КартаОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
				КартаОбъект.Записать();
				
				Если ДополнительнаяИнформация = Неопределено И Не ЗначениеЗаполнено(ВладелецКарты) Тогда
					СтрокаНовойКарты = КомпонентыОбмена.ЗагруженныеОбъекты.Добавить();
					СтрокаНовойКарты.ИмяОбработчика = "ДобавлениеКартыИзЧека";
					СтрокаНовойКарты.СсылкаНаОбъект = КартаСсылка;
					СтрокаНовойКарты.Объект = КартаОбъект;
				КонецЕсли;
				КартаЛояльности = КартаСсылка;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		КартаЛояльности = КартаСсылка;
	КонецЕсли;
	
	Возврат КартаЛояльности;
	
КонецФункции

Процедура ДописатьПокупателяВЧек(ЗагруженныеОбъекты, КартаСсылка, ВладелецКарты)
	Для Каждого СтрокаЧека Из ЗагруженныеОбъекты Цикл
		Если ТипЗнч(СтрокаЧека.СсылкаНаОбъект) = Тип("ДокументСсылка.ЧекККМ")
				Или ТипЗнч(СтрокаЧека.СсылкаНаОбъект) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
				
			Если СтрокаЧека.Объект.ДисконтнаяКарта = КартаСсылка И Не ЗначениеЗаполнено(СтрокаЧека.Объект.Контрагент) Тогда
				СтрокаЧека.Объект.Контрагент = ВладелецКарты;
				СтрокаЧека.Объект.Записать();
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьВЧекеДисконтнуюКартуПриНеобходимости(КомпонентыОбмена, ДанныеXDTO, ПолученныеДанные)
	Если ДанныеXDTO.Свойство("КартаЛояльности") И ЗначениеЗаполнено(ДанныеXDTO.КартаЛояльности)
			И Не (ЗначениеЗаполнено(ПолученныеДанные.ДисконтнаяКарта)
				И ОбщегоНазначения.СсылкаСуществует(ПолученныеДанные.ДисконтнаяКарта)) Тогда
				
		ПолученныеДанные.ДисконтнаяКарта
			= ПолучитьДисконтнуюКартуПоНомеру(КомпонентыОбмена, ДанныеXDTO.КартаЛояльности);
				
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьЧекДополнительнойИнформацией(ДанныеXDTO, ПолученныеДанные)
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
	
		Если ДанныеXDTO.AdditionalInfo.Свойство("Комментарий") Тогда
		
			ПолученныеДанные.Комментарий = ДанныеXDTO.AdditionalInfo.Комментарий;
		
		КонецЕсли;
		Если Не (ЗначениеЗаполнено(ПолученныеДанные.ДисконтнаяКарта)
				И ОбщегоНазначения.СсылкаСуществует(ПолученныеДанные.ДисконтнаяКарта)) Тогда
				
			Если ДанныеXDTO.AdditionalInfo.Свойство("ИдентификаторКарты") Тогда
				ЗаполнитьДисконтнуюКартуПоУникальномуИдентификатору(ПолученныеДанные,
					ДанныеXDTO.AdditionalInfo.ИдентификаторКарты);
			ИначеЕсли ДанныеXDTO.AdditionalInfo.Свойство("НомерКарты") Тогда
				ДисконтнаяКарта = НайтиДисконтнуюКартуПоНомеру(ДанныеXDTO.AdditionalInfo.НомерКарты);
				Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
					ПолученныеДанные.ДисконтнаяКарта = ДисконтнаяКарта;
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
		
		ДополнительныеДанные = ДанныеXDTO.AdditionalInfo;
		Если ДополнительныеДанные.Свойство("ТаблицаЧековККМПоЗаказуРМК") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ТаблицаЧековККМПоЗаказуРМК",
				ДополнительныеДанные.ТаблицаЧековККМПоЗаказуРМК);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
			
