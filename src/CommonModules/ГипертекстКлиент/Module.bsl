///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область КомандыHTML

// Возвращает параметры, которые необходимо передавать при вызове других методов данного модуля
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//  НазваниеПоляHTML - Строка - название элемента Поля HTML
//  НазваниеКоманднойПанели - Строка
//  ОповещениеПриУспехе - ОписаниеОповещения - вызывается, если команда завершилась без ошибок
// 
// Возвращаемое значение:
//  Структура - Форма, НазваниеКоманднойПанели, ДокументHTML, ОповещениеПриУспехе
//
Функция ПараметрыДляПередачи(
	Форма,
	ДокументHTML,
	НазваниеПоляHTML,
	НазваниеКоманднойПанели = Неопределено,
	ОповещениеПриУспехе = Неопределено) Экспорт
	
	ПараметрыДляПередачи = Новый Структура;
	
	ПараметрыДляПередачи.Вставить("Форма", Форма);
	ПараметрыДляПередачи.Вставить("ДокументHTML", ДокументHTML);
	ПараметрыДляПередачи.Вставить("НазваниеПоляHTML", НазваниеПоляHTML);
	ПараметрыДляПередачи.Вставить("НазваниеКоманднойПанели", НазваниеКоманднойПанели);
	ПараметрыДляПередачи.Вставить("ОповещениеПриУспехе", ОповещениеПриУспехе);
	
	Возврат ПараметрыДляПередачи;
	
КонецФункции

// Выполняет HTML команду с помощью execCommand()
// 
// Параметры:
//  НазваниеКоманды - Строка - Пример: "foreColor", см execCommand()
//  Параметры - Структура - см СоздатьПараметры
//  ПараметрКоманды - ПроизвольныйТип - Передается в метод execCommand
//
Процедура ВыполнитьHTMLКоманду(НазваниеКоманды, Параметры, ПараметрКоманды = Неопределено) Экспорт
	
	ДокументHTML = Параметры.ДокументHTML;
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	УстановитьФокус(Параметры);
	
	Если ПараметрКоманды = Неопределено Тогда
		ДокументHTML.execCommand(НазваниеКоманды);
	Иначе
		ДокументHTML.execCommand(НазваниеКоманды, , ПараметрКоманды);
	КонецЕсли;
	
	НазваниеКоманднойПанели = Неопределено;
	Параметры.Свойство("НазваниеКоманднойПанели", НазваниеКоманднойПанели);
	Если НазваниеКоманднойПанели <> Неопределено Тогда
		ПоказатьРежимыКнопокКоманднойПанели(Параметры.Форма.Элементы, НазваниеКоманднойПанели, ДокументHTML);
	КонецЕсли;
	
	ЗакончитьКоманду(Параметры);
	
КонецПроцедуры

// Вставляет текст в HTML на место курсора,
// если есть выделенный текст, то он заменяется вставленным
// 
// Параметры:
//  Текст - Строка
//  Параметры - Структура - см СоздатьПараметры
//
Процедура ВставитьТекст(Текст, Параметры) Экспорт
	
	ВыполнитьHTMLКоманду("InsertText", Параметры, Текст);
	
КонецПроцедуры

// Изменяет шрифт выделенного текста
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//
Процедура ИзменитьШрифт(Параметры) Экспорт
	
	ДокументHTML = Параметры.ДокументHTML;
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	ИмяШрифта = ДокументHTML.queryCommandValue("fontName");
	ИмяШрифта = ИмяШрифтаПоИмениШрифтаHTML(ИмяШрифта);
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	Размер = ОписаниеТипа.ПривестиЗначение(ДокументHTML.queryCommandValue("fontSize"));
	Размер = РазмерТекстаПоРазмеруТекстаHTML(Размер);
	
	Полужирный = ДокументHTML.queryCommandState("Bold");
	Наклонный = ДокументHTML.queryCommandState("Italic");
	Подчеркнутый = ДокументHTML.queryCommandState("Underline");
	Зачеркнутый = ДокументHTML.queryCommandState("StrikeThrough");
	
	Шрифт = Новый Шрифт(ИмяШрифта, Размер, Полужирный, Наклонный, Подчеркнутый, Зачеркнутый);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработчикОповещенияИзменитьШрифт", ЭтотОбъект, Параметры);
	
	ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
	ДиалогВыбораШрифта.Шрифт = Шрифт;
	ДиалогВыбораШрифта.Показать(ОписаниеОповещения);
	
КонецПроцедуры 

// Изменяет размер выделенного текста на указанную величину
// Конечный размер варьируется от 1 до 7
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//  ДобавочныйРазмер - Число
//
Процедура ИзменитьРазмерШрифта(Параметры, ДобавочныйРазмер = 1) Экспорт
	
	ДокументHTML = Параметры.ДокументHTML;
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	Размер = ДокументHTML.queryCommandValue("fontSize");
	
	Если ЗначениеПустое(Размер) Тогда
		Размер = 2;
	Иначе
		Размер = Число(Размер);
	КонецЕсли;
	
	ВыполнитьHTMLКоманду("fontSize", Параметры, Размер + ДобавочныйРазмер);
	
	ВыполнитьОповещение(Параметры.ОповещениеПриУспехе);
	
КонецПроцедуры

// Открывает форму ФормаВыбораЦвета и на основе выбранных параметров изменяет цвет выделенного текста
// Также сохраняет выбранный цвет в реквизит формы, если тот передан
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//  НазваниеРеквизитаЦвета - Строка
//
Процедура ИзменитьЦветТекста(Параметры, НазваниеРеквизитаЦвета = Неопределено) Экспорт
	
	ИзменитьЦвет(НазваниеРеквизитаЦвета, "ЦветТекста", Параметры);
	
КонецПроцедуры

// Открывает форму ФормаВыбораЦвета и на основе выбранных параметров изменяет цвет фона выделенного текста
// Также сохраняет выбранный цвет в реквизит формы, если тот передан
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//  НазваниеРеквизитаЦвета - Строка
//
Процедура ИзменитьЦветФона(Параметры, НазваниеРеквизитаЦвета = Неопределено) Экспорт
	
	ИзменитьЦвет(НазваниеРеквизитаЦвета, "ЦветФона", Параметры);
	
КонецПроцедуры

// Проверяет, выделены ли ячейки таблицы:
// если так, то изменяет цвет фона всей ячейки, иначе изменяет цвет фона текста
// Также запоминает выбранный цвет в реквизит, если тот передан
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//  НазваниеРеквизитаЦвета - Строка
//
Процедура ИзменитьЦветФонаСТаблицей(Параметры, НазваниеРеквизитаЦвета = Неопределено) Экспорт
	
	ДокументHTML = Параметры.ДокументHTML;
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	ОкноHTMLДокумента = ДокументHTML.defaultView;
	
	Если Не ВыбранаТаблица(ОкноHTMLДокумента) Тогда
		ИзменитьЦвет(НазваниеРеквизитаЦвета, "ЦветФона", Параметры);
		Возврат;
	КонецЕсли;
	
	ВыбранныеЭлементы = ВыбранныеЭлементы(ОкноHTMLДокумента);
	ВыбранныеЯчейкиТаблицы = Новый Массив;
	
	Для Каждого Элемент Из ВыбранныеЭлементы Цикл
		
		Если Элемент.nodeName = "TD" Тогда
			ДобавитьНовыйЭлементВМассив(ВыбранныеЯчейкиТаблицы, Элемент);
		КонецЕсли;
		
		Если Не ЗначениеПустое(Элемент.children) Тогда
			
			ДетиЭлемента = Элемент.children;
			ДобавитьЭлементыЯчейкиТаблицыВМассив(ДетиЭлемента, ВыбранныеЯчейкиТаблицы);
			
		КонецЕсли;
		
		РодителиЭлемента = РодителиЭлемента(Элемент);
		ДобавитьЭлементыЯчейкиТаблицыВМассив(РодителиЭлемента, ВыбранныеЯчейкиТаблицы);
		
	КонецЦикла;
	
	Параметры.Вставить("ВыбранныеЯчейкиТаблицы", ВыбранныеЯчейкиТаблицы);
	ОткрытьФормуВыбораЦвета(НазваниеРеквизитаЦвета, "ОбработчикОповещенияИзменитьЦветСТаблицей", Параметры);
	
КонецПроцедуры

// Вставляет новую таблицу или изменяет существующую, если внутри нее установлен курсор
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//
Процедура ВставитьИзменитьТаблицу(Параметры) Экспорт
	
	ЭлементыТаблицы = ЭлементыВыбраннойТаблицы(Параметры.ДокументHTML);
	Если ЭлементыТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементТаблицы = Неопределено;
	Если ЭлементыТаблицы.Свойство("ЭлементТаблицы", ЭлементТаблицы) Тогда
		ПараметрыОткрытия = ПараметрыОткрытияФормыТаблицы(ЭлементыТаблицы);
	Иначе
		ПараметрыОткрытия = Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ЭлементТаблицы", ЭлементТаблицы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВставитьИзменитьТаблицу", ЭтотОбъект, Параметры);
	
	ОткрытьФорму(
		"Обработка.ПараметрыHTML.Форма.ФормаВыбораДанныхТаблицы",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Изменяет существующую таблицу, если внутри нее установлен курсор
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//
Процедура ИзменитьТаблицу(Параметры) Экспорт
	
	ЭлементыТаблицы = ЭлементыВыбраннойТаблицы(Параметры.ДокументHTML);
	Если ЭлементыТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыТаблицы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Установите курсор внутри таблицы'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыТаблицы(ЭлементыТаблицы);
	
	Параметры.Вставить("ЭлементТаблицы", ЭлементыТаблицы.ЭлементТаблицы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВставитьИзменитьТаблицу", ЭтотОбъект, Параметры);
	
	ОткрытьФорму(
		"Обработка.ПараметрыHTML.Форма.ФормаВыбораДанныхТаблицы",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Вставляет изображение на место курсора
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//
Процедура ВставитьИзображение(Параметры) Экспорт
	
	Если Параметры.ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	ФильтрДляДиалогаВыбораФайлов =
		НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf'")
		+ НСтр("ru = '|Все файлы(*.*)|*.*'")
		+ НСтр("ru = '|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle'")
		+ НСтр("ru = '|Формат GIF(*.gif*)|*.gif'")
		+ НСтр("ru = '|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg'")
		+ НСтр("ru = '|Формат PNG(*.png*)|*.png'")
		+ НСтр("ru = '|Формат TIFF(*.tif)|*.tif'")
		+ НСтр("ru = '|Формат icon(*.ico)|*.ico'")
		+ НСтр("ru = '|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Истина;
	Диалог.Фильтр = ФильтрДляДиалогаВыбораФайлов;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВставитьИзображение", ЭтотОбъект, Параметры);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОписаниеОповещения, Диалог);
	
КонецПроцедуры

// Добавляет в HTML картинку через объект Картинка или ДвоичныеДанные
// Атрибут можно установить для дальнейшего определения картинки
// 
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные картинки
//  Параметры - Структура - см СоздатьПараметры 
//  ДопАтрибут - Строка
//
Процедура ВставитьКартинкуПоДвоичнымДанным(ДвоичныеДанные, Параметры, ДопАтрибут = Неопределено) Экспорт
	
	Если Параметры.ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	ПутьИзображения = СтрШаблон("data:image/jpg;base64,%1", Base64Строка(ДвоичныеДанные));
	ДобавитьИзображение(ПутьИзображения, Параметры, ДопАтрибут);
	
КонецПроцедуры

// Изменяет интервал выделенного текста
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//
Процедура ИзменитьМеждустрочныйИнтервал(Параметры) Экспорт
	
	ДокументHTML = Параметры.ДокументHTML;
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	ОдинВыбранныйЭлемент = УказанныйЭлемент(ДокументHTML.defaultView);
	Если ОдинВыбранныйЭлемент.nodeName = "#text" Тогда
		ОдинВыбранныйЭлемент = ОдинВыбранныйЭлемент.parentNode;
	КонецЕсли;
	
	Интервал = ОдинВыбранныйЭлемент.style.lineHeight;
	Если ЗначениеПустое(Интервал) Тогда
		Интервал = 1.15;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Интервал", Интервал);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияМеждустрочныйИнтервал", ЭтотОбъект, Параметры);
	ОткрытьФорму(
		"Обработка.ПараметрыHTML.Форма.ФормаВыбораИнтервала",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Помимо обычной вставки добавляются проверки на добавление необходимых изменений для вставленных элементов
// (изменение картинок/таблиц и т.д.)
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//
Процедура КомандаВставить(Параметры) Экспорт
	
	ДокументHTML = Параметры.ДокументHTML;
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	// В веб-клиенте браузеры не позволяют выполнять команду execCommand('paste') без каких-то специфичных условий
	#Если Не ВебКлиент Тогда
		
		ОкноHTMLДокумента = ДокументHTML.defaultView;
		
		ВыполнитьHTMLКоманду("Paste", Параметры);
		
		Если Не ЗначениеПустое(ОкноHTMLДокумента.setResizableToImages) Тогда
			ОкноHTMLДокумента.setResizableToImages();
		КонецЕсли;
		
		Если Не ЗначениеПустое(ОкноHTMLДокумента.setResizableToTables) Тогда
			ОкноHTMLДокумента.setResizableToTables();
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Вставляет гиперссылку на место курсора
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//
Процедура ВставитьГиперссылку(Параметры) Экспорт
	
	Если Параметры.ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВставитьГиперссылку", ЭтотОбъект, Параметры);
	ОткрытьФорму("Обработка.ПараметрыHTML.Форма.ФормаДобавленияГиперссылки", , ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Вставляет символ на место курсора
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//
Процедура ВставитьСимвол(Параметры) Экспорт
	
	Если Параметры.ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВставитьСимвол", ЭтотОбъект, Параметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСимвола", , ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Цитирует выделенный блок или убирает цитирование
// 
// Параметры:
//  Параметры - Структура - см СоздатьПараметры
//
Процедура Цитировать(Параметры) Экспорт
	
	ДокументHTML = Параметры.ДокументHTML;
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	ОтключитьИзменениеИзображений(ДокументHTML);
	
	Если ДокументHTML.queryCommandValue("formatBlock") = "blockquote" Тогда
		ВыполнитьHTMLКоманду("outdent", Параметры);
	Иначе
		ВыполнитьHTMLКоманду("formatBlock", Параметры, "<blockquote>");
	КонецЕсли;
	
	ВключитьИзменениеИзображений(ДокументHTML);
	
КонецПроцедуры

#КонецОбласти

#Область Отображение

// Задает вопрос и после согласия преобразует HTML в простой текст
// Вместо цитат проставляет кавычки согласно уровню цитаты
//
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//  ОповещениеПриУспехе - ОписаниеОповещения - Первым параметром принимает результат преобразования
//
Процедура ПереключательПростойТекст(ДокументHTML, ОповещениеПриУспехе) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументHTML", ДокументHTML);
	ПараметрыОповещения.Вставить("ОповещениеПриУспехе", ОповещениеПриУспехе);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОписаниеОповещенияПриПереключенииНаПростойТекст", ЭтотОбъект, ПараметрыОповещения);
	
	ТекстСообщения =
	НСтр("ru = 'При преобразовании этого сообщения в обычный текст будут утеряны все элементы оформления, картинки и прочие вставленные элементы. Продолжить?'");
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстСообщения,
		РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Нет,
		НСтр("ru = 'Изменение формата письма'"));
	
КонецПроцедуры

// Преобразует простой текст в HTML
// Вместо кавычек ">" создает цитаты
//
// Параметры:
//  ТекстHTML - Строка - строка в формате HTML
//  ОповещениеПриУспехе - ОписаниеОповещения - Первым параметром принимает результат преобразования
//
Процедура ПереключательHTML(ТекстHTML, ОповещениеПриУспехе) Экспорт
	
	Результат = СтрЗаменить(ТекстHTML, ">", "&gt;");
	Результат = СтрЗаменить(Результат, "<", "&lt;");
	
	Результат = ГипертекстВызовСервера.HTMLИзПростогоТекста(Результат);
	Результат = СоздатьЦитированиеПоКавычкам(Результат);
	Результат = СтрЗаменить(Результат, "body", "body contenteditable");
	
	ВыполнитьОповещение(ОповещениеПриУспехе, Результат);
	
КонецПроцедуры

// Открытие формы с последующим изменением изображения
// 
// Параметры:
//  ЭлементИзображения - ПроизвольныйТип - Элемент изображения HTML
//  ОповещениеПриУспехе - ОписаниеОповещения
//
Процедура ИзменитьИзображение(ЭлементИзображения, ОповещениеПриУспехе = Неопределено) Экспорт
	
	Элемент = ЭлементИзображения;
	
	Если Элемент.nodeName <> "IMG" Тогда
		Если ЗначениеПустое(Элемент.firstElementChild) Тогда
			Возврат;
		КонецЕсли; 
		
		Если Элемент.firstElementChild.nodeName = "IMG" Тогда
			Элемент = Элемент.firstElementChild;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Высота = Элемент.height;
	Ширина = Элемент.width; 
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ПервоначальнаяВысота = ОписаниеТипа.ПривестиЗначение(Элемент.getAttribute("data-default-height"));
	Если ПервоначальнаяВысота = 0 Тогда
		
		ПервоначальнаяВысота = Элемент.height;
		ПервоначальнаяШирина = Элемент.width;
		
		Элемент.setAttribute("data-default-height", ПервоначальнаяВысота);
		Элемент.setAttribute("data-default-width", ПервоначальнаяШирина);
		
	Иначе
		
		ПервоначальнаяШирина = ОписаниеТипа.ПривестиЗначение(Элемент.getAttribute("data-default-width"));
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭлементИзображения", Элемент);
	ПараметрыОповещения.Вставить("ОповещениеПриУспехе", ОповещениеПриУспехе);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработчикОповещенияИзменитьИзображение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Высота", Высота);
	ПараметрыОткрытия.Вставить("Ширина", Ширина);
	ПараметрыОткрытия.Вставить("ПервоначальнаяВысота", ПервоначальнаяВысота);
	ПараметрыОткрытия.Вставить("ПервоначальнаяШирина", ПервоначальнаяШирина);
	
	ОткрытьФорму(
		"Обработка.ПараметрыHTML.Форма.ФормаИзмененияПараметровИзображения",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Устанавливает размер HTML Поля в зависимости от типа клиента
// 
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//
Процедура УстановитьРазмерHTMLПоля(ДокументHTML) Экспорт
	
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	#Если Не МобильныйКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ИнформацияОбЭкранах = ПолучитьИнформациюЭкрановКлиента();
	Если Не ЗначениеЗаполнено(ИнформацияОбЭкранах) Тогда
		Возврат;
	КонецЕсли;
	
	Ширина = ИнформацияОбЭкранах[0].Ширина;
	
	ШиринаПустойОбласти = 20;
	ДокументHTML.body.style.maxWidth = Строка(Ширина - ШиринаПустойОбласти) + "px";
	
КонецПроцедуры

// Устанавливает начальные стили на ДокументHTML
// 
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//
Процедура УстановкаНачальныхСтилей(ДокументHTML) Экспорт
	
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	Стили = "<style type=text/css>
	|	html {
	|		font-family: ""Microsoft Sans Serif"", ""Arial"", ""Calibri"", ""Times New Roman"";
	|	}
	|
	|	.text-wrap {
	|		word-break: break-word;
	|	}
	|
	|	blockquote {
	|		padding-left: 7px;
	|		border-left: 2px solid #c7d1e8;
	|		margin: 10px 5px 5px 5px;
	|	}
	|
	|	a {
	|		cursor: pointer;
	|		position: relative;
	|		z-index: 10;
	|	}
	|</style>";
	
	ДокументHTML.head.innerHTML =  СтрШаблон("%1%2", Стили, ДокументHTML.head.innerHTML);
	
	СтилиОтступа = "margin: 0px 0px 0px 40px; border: none; padding: 0px;";
	
	Цитаты = ДокументHTML.querySelectorAll("blockquote");
	Для Каждого Цитата Из Цитаты Цикл
		Если Цитата.style.cssText <> СтилиОтступа Тогда
			Цитата.style.cssText = "padding-left: 7px; border-left: 2px solid #c7d1e8; margin: 10px 5px 5px 5px;";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает возможность перехода по ссылкам по клику
//
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//
Процедура УстановитьПереходПоСсылкам(ДокументHTML) Экспорт
	
	Ссылки = ДокументHTML.querySelectorAll("a");
	Для Каждого Ссылка Из Ссылки Цикл
		Ссылка.setAttribute("target", "_blank");
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает принадлежность таблиц к их конечному варианту (см Гипертекст.ДобавитьКодДляИзмененияТаблиц)
//
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//
Процедура УстановитьГотовностьТаблиц(ДокументHTML) Экспорт
	
	Таблицы = ДокументHTML.querySelectorAll("table");
	Для Каждого Таблица Из Таблицы Цикл
		Таблица.setAttribute("data-our-ready-table", "true");
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает начальные стили на документ
// 
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//
Процедура ПрименитьНастройкиОтображения(ДокументHTML) Экспорт
	
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	УстановкаНачальныхСтилей(ДокументHTML);
	УстановитьРазмерHTMLПоля(ДокументHTML);
	УстановитьПереходПоСсылкам(ДокументHTML);
	УстановитьГотовностьТаблиц(ДокументHTML);
	
КонецПроцедуры

// Позволяет красиво отобразить цитированную переписку
// 
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//
Процедура СтилизоватьПерепискуСЦитированием(ДокументHTML) Экспорт
	
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	Цитаты = ДокументHTML.querySelectorAll("blockquote");
	
	МетаданныеЦитат = Новый Массив;
	
	Индекс = 0;
	Для Каждого Цитата Из Цитаты Цикл
		
		Элемент = Неопределено;
		МетаданныеЦитаты = ВыявленныеМетаданныеЦитаты(Цитата, Элемент);
		Если МетаданныеЦитаты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Цитата.setAttribute("data-bq-index", Индекс);
		Индекс = Индекс + 1;
		
		МетаданныеЦитат.Добавить(МетаданныеЦитаты);
		Элемент.parentNode.removeChild(Элемент);
		
	КонецЦикла;
	
	Если Индекс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Счетчик = 0 По Индекс - 1 Цикл
		
		СелекторCSS = СтрШаблон("blockquote[data-bq-index=""%1""]", Счетчик);
		Цитата = ДокументHTML.querySelector(СелекторCSS);
		СтилизоватьЦитату(Цитата, МетаданныеЦитат[Счетчик], ДокументHTML, Счетчик);
		
	КонецЦикла;
	
	ДобавитьКодДляСтилизацииЦитирования(ДокументHTML);
	
КонецПроцедуры

// Меняет режимы кнопок в зависимости от выделенных блоков
// 
// Параметры:
//  Элементы - ВсеЭлементыФормы
//  НазваниеКоманднойПанели - Строка
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//
Процедура ПоказатьРежимыКнопокКоманднойПанели(Элементы, НазваниеКоманднойПанели, ДокументHTML) Экспорт
	
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	КоманднаяПанельДокумента = Элементы[НазваниеКоманднойПанели];
	
	Для Каждого ЭлементПанели Из КоманднаяПанельДокумента.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементПанели) = Тип("ГруппаФормы") Тогда
			
			Для Каждого Кнопка Из ЭлементПанели.ПодчиненныеЭлементы Цикл
				
				Если ТипЗнч(Кнопка) <> тип("КнопкаФормы") Тогда
					Продолжить;
				КонецЕсли;
				
				ПоказатьРежимКнопкиКоманднойПанели(Кнопка, ДокументHTML);
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЭлементПанели) = тип("КнопкаФормы") Тогда
			ПоказатьРежимКнопкиКоманднойПанели(ЭлементПанели, ДокументHTML);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывает все методы, которые предполагается вызывать при нажатии на Поле HTML Документа
// 
// Параметры:
//  ДанныеСобытия - ФиксированнаяСтруктура - Document, Element
//  СтандартнаяОбработка - Булево - флаг стандартной обработки события
//  Элементы - ВсеЭлементыФормы
//  НазваниеКоманднойПанели - Строка
//  ОповещениеПриУспехе - ОписаниеОповещения
//
Процедура ПолеHTMLДокументаПриНажатии(
	ДанныеСобытия,
	СтандартнаяОбработка,
	Элементы,
	НазваниеКоманднойПанели,
	ЭлементыКомандВставкиТаблиц = Неопределено,
	ЭлементыКомандИзмененияТаблиц = Неопределено,
	ОповещениеПриУспехе = Неопределено) Экспорт
	
	ДокументHTML = ДанныеСобытия.Document;
	АктивныйЭлемент = ДанныеСобытия.Element;
	
	Если ЭлементыКомандВставкиТаблиц <> Неопределено И ЭлементыКомандИзмененияТаблиц <> Неопределено Тогда
		УстановитьВидимостьКомандДляТаблиц(АктивныйЭлемент, ЭлементыКомандВставкиТаблиц, ЭлементыКомандИзмененияТаблиц);
	КонецЕсли;
	
	ПоказатьРежимыКнопокКоманднойПанели(Элементы, НазваниеКоманднойПанели, ДокументHTML);
	ИзменитьИзображение(АктивныйЭлемент, ОповещениеПриУспехе);
	
	Если ДанныеСобытия.Href <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ДанныеСобытия.Href);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Устанавливает курсор на первый элемент в body.
// Если такого элемента нет, он создается
//
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//
Процедура УстановитьКурсорВначале(ДокументHTML) Экспорт
	
	Диапазон = ДокументHTML.createRange();
	Выделение = ДокументHTML.defaultView.getSelection();
	
	Тело = ДокументHTML.body;
	
	Если Тело.children.length = 0 Тогда
		Тело.innerHTML = СтрШаблон("<div><br></div>%1", Тело.innerHTML);
	КонецЕсли;
	
	Обертка = Тело.children.item(0);
	
	Диапазон.setStart(Обертка, 0);
	Диапазон.collapse(Ложь);
	Выделение.removeAllRanges();
	Выделение.addRange(Диапазон);
	
	Обертка.focus();
	
КонецПроцедуры

// История записывается с помощью JS метода recordHTML
//
// Параметры:
//  ОкноHTMLДокумента - ВнешнийОбъект - ДокументHTML.defaultView
//
Процедура ЗаписатьHTMLВИсторию(ОкноHTMLДокумента) Экспорт
	
	// История иногда сохраняется здесь, иногда с помощью JS
	// Из-за невозможности проверки наличия метода нужно обернуть его в Попытку
	Попытка
		ОкноHTMLДокумента.recordHTML();
	Исключение
		
		ЗаписатьОшибку(
			ИнформацияОбОшибке(),
			НСтр("ru = 'ГипертекстКлиент.Вызов команды HTML снаружи HTML'",
			ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
		
	КонецПопытки;
	
КонецПроцедуры

// Меняет src картинок в HTML на двоичные данные в формате Base64
// 
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
// 
// Возвращаемое значение:
//  Строка - Тело HTML
//
Функция ТелоHTMLСКартинкамиВДвоичныхДанных(Знач ДокументHTML) Экспорт
	
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ДокументHTML.body.outerHTML;
	
	МассивSRCКартинок = Новый Массив;
	Для Каждого Картинка Из ДокументHTML.images Цикл
		МассивSRCКартинок.Добавить(Картинка.getAttribute("src"));
	КонецЦикла;
	
	Для Каждого ПутьКартинки Из МассивSRCКартинок Цикл
		Если СтрНайти(ПутьКартинки, "base64") Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКартинкиБезHTTP = АдресВременногоХранилищаБезHTTP(ПутьКартинки);
		Если ЭтоАдресВременногоХранилища(ПутьКартинкиБезHTTP) Тогда
			
			ДанныеВФорматеBase64 = Base64Строка(ПолучитьИзВременногоХранилища(ПутьКартинкиБезHTTP));
			Если ПустаяСтрока(ДанныеВФорматеBase64) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйПутьКартинки = СтрШаблон("data:image/jpg;base64,%1", ДанныеВФорматеBase64);
			Результат = СтрЗаменить(Результат, ПутьКартинки, НовыйПутьКартинки);
			
		ИначеЕсли СтрНайти(ПутьКартинки, "http") = 0 И СтрНайти(ПутьКартинки, "cid") = 0 Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ТекстПисьма", Результат);
			ПараметрыОповещения.Вставить("ПутьКартинки", ПутьКартинки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОбработкаОповещенияПодключенияРасширения",
				ЭтотОбъект,
				ПараметрыОповещения);
			
			// СтандартныеПодсистемы.ФайловаяСистемаКлиент
			ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения, , Ложь);
			// Конец СтандартныеПодсистемы.ФайловаяСистемаКлиент
			
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Переносит в SRC картинок данные из их атрибута (см Гипертекст.ОчиститьНежелательныеHTTP)
// 
// Параметры:
//  ДокументHTML - ДокументHTML - нужен встроенный в Поле HTML Документа, а не платформенный
//  Атрибут - Строка - атрибут, откуда вытаскивается путь HTTP
// 
// Возвращаемое значение:
//  - Неопределено - если ДокументHTML недоступен
//  - Булево - если ДокументHTML доступен
//
Функция ПереопределитьHTTPИзАтрибута(ДокументHTML, Атрибут = "data-cleared-http") Экспорт
	
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат Неопределено;
	КонецЕсли;
	
	Картинки = ДокументHTML.images;
	Для Каждого Картинка Из Картинки Цикл
		
		Картинка.setAttribute("data-http-used", "true");
		
		ДанныеАтрибута = Картинка.getAttribute(Атрибут);
		Если ЗначениеПустое(ДанныеАтрибута) Тогда
			Продолжить;
		КонецЕсли;
		
		Картинка.setAttribute("src", ДанныеАтрибута);
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФайлами

Функция Base64ПоПутиФайла(ПутьДоФайла)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьДоФайла);
	Возврат СтрШаблон("data:image/jpg;base64,%1", Base64Строка(ДвоичныеДанные));
	
КонецФункции

Процедура ОбработчикОповещенияВставитьИзображение(ВыбранныеФайлы, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Для Каждого Картинка Из ВыбранныеФайлы Цикл
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияСозданияДвоичныхДанных", ЭтотОбъект, Параметры);
			НачатьСозданиеДвоичныхДанныхИзФайла(ОписаниеОповещения, Картинка);
		КонецЦикла;
	#Иначе
		Для Каждого Картинка Из ВыбранныеФайлы Цикл
			ДобавитьИзображение(Base64ПоПутиФайла(Картинка), Параметры);
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбработчикОповещенияСозданияДвоичныхДанных(ДвоичныеДанные, Параметры) Экспорт
	
	Если Не ЗначениеПустое(ДвоичныеДанные) Тогда
		ДобавитьИзображение(СтрШаблон("data:image/jpg;base64,%1", Base64Строка(ДвоичныеДанные)), Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияПодключенияРасширения(РасширениеУстановлено, ПараметрыОповещения) Экспорт
	
	Если Не РасширениеУстановлено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаОповещенияПроверкаСуществованияФайла",
		ЭтотОбъект,
		ПараметрыОповещения);
	Файл = Новый Файл(ПараметрыОповещения.ПутьКартинки);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОбработкаОповещенияПроверкаСуществованияФайла(РезультатПроверки, Параметры) Экспорт
	
	Если РезультатПроверки Тогда
		
		НовыйПутьКартинки = Base64ПоПутиФайла(Параметры.ПутьКартинки);
		
		Параметры.ТекстПисьма = СтрЗаменить(
			Параметры.ТекстПисьма,
			Параметры.ПутьКартинки,
			НовыйПутьКартинки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция АдресВременногоХранилищаБезHTTP(ПолныйАдресВХ)
	
	Если СтрНайти(ПолныйАдресВХ, "http") = 0 Или ПолныйАдресВХ = """" Тогда
		Возврат ПолныйАдресВХ;
	КонецЕсли;
	
	ПутьКартинки = ПолныйАдресВХ;
	ИндексНачалаВХ = СтрНайти(ПолныйАдресВХ, "e1cib");
	Если ИндексНачалаВХ <> 0 Тогда
		ПутьКартинки = Прав(ПолныйАдресВХ, СтрДлина(ПолныйАдресВХ) - ИндексНачалаВХ + 1);
	КонецЕсли;
	
	Возврат ПутьКартинки;
	
КонецФункции

#КонецОбласти

#Область РаботаСЭлементами

Процедура ИзменитьЦвет(НазваниеРеквизитаЦвета, ТипЦвета, Параметры)
	
	Если Параметры.ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ТипЦвета", ТипЦвета);
	ОткрытьФормуВыбораЦвета(НазваниеРеквизитаЦвета, "ОбработчикОповещенияИзменитьЦвет", Параметры);
	
КонецПроцедуры

Процедура СтилизоватьЦитату(ЭлементЦитаты, ДанныеПочтовогоСообщения, ДокументHTML, Индекс)
	
	Адрес = ДанныеПочтовогоСообщения.Адрес;
	Имя = ДанныеПочтовогоСообщения.Имя;
	День = ДанныеПочтовогоСообщения.День;
	Месяц = ДанныеПочтовогоСообщения.Месяц;
	Год = ДанныеПочтовогоСообщения.Год;
	Часы = ДанныеПочтовогоСообщения.Часы;
	Минуты = ДанныеПочтовогоСообщения.Минуты;
	
	Если Индекс % 2 Тогда
		КлассЦвета = "blue";
	Иначе
		КлассЦвета = "yellow";
	КонецЕсли;
	
	КонечныйБлок = ДокументHTML.createElement("div");
	КонечныйБлок.classList.add("my-bq");
	КонечныйБлок.style.display = "flex";
	КонечныйБлок.style.flexDirection = "column";
	
	День = ЧислоСНулем(День);
	Месяц = ЧислоСНулем(Месяц);
	Год = СтрЗаменить(Строка(ЧислоСНулем(Год)), " ", "");
	Часы = ЧислоСНулем(Часы);
	Минуты = ЧислоСНулем(Минуты);
	
	ОтображениеДаты = СтрШаблон("%1.%2.%3 %4 %5:%6",
		День, Месяц, Год, НСтр("ru = 'в'"), Часы, Минуты);
	
	ИнициалыИмени = Инициалы(Имя);
	СообщениеДляОткрытия = НСтр("ru = 'Открыть сообщение'");
	
	РезультатHTML = СтрШаблон("
		|	<div class=""my-bq__top"">
		|		<div class=""my-bq__circle %1"">
		|			<div class=""my-bq__circle-content"">%2</div>
		|		</div>
		|		<div class=""my-bq__name"">%3</div>
		|		<div class=""my-bq__address"">&lt;%4&gt;</div>
		|		<div class=""my-bq__date"">%5</div>
		|	</div>
		|	<div class=""my-bq__bottom"">
		|		<div class=""my-bq__wrapper"">
		|			<div class=""my-bq__line %1""></div>
		|		</div>
		|		<div class=""my-bq__content"" style=""display: block;"">%6</div>
		|		<div class=""my-bq__btn"" style=""display: none;"">%7</div>
		|	</div>
		|",
		КлассЦвета,
		ИнициалыИмени,
		Имя,
		Адрес,
		ОтображениеДаты,
		ЭлементЦитаты.innerHTML,
		СообщениеДляОткрытия);
	
	КонечныйБлок.innerHTML = РезультатHTML;
	
	ЭлементЦитаты.parentNode.insertBefore(КонечныйБлок, ЭлементЦитаты);
	ЭлементЦитаты.parentNode.removeChild(ЭлементЦитаты);
	
КонецПроцедуры

Процедура ОбработчикОповещенияМеждустрочныйИнтервал(Интервал, Параметры) Экспорт
	
	Если ПустыеДанныеСФормы(Интервал) Или Интервал = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Интервал = СтрЗаменить(Строка(Интервал), ",", ".");
	
	ВыбранныеЭлементы = ВыбранныеЭлементы(Параметры.ДокументHTML.defaultView);
	
	Для Каждого Элемент Из ВыбранныеЭлементы Цикл
		Если Элемент.nodeName = "#text" Тогда
			Элемент.parentNode.style.lineHeight = Интервал;
		Иначе
			Элемент.style.lineHeight = Интервал;
		КонецЕсли;
	КонецЦикла;
	
	ЗакончитьКоманду(Параметры);
	
КонецПроцедуры

Процедура ОбработчикОповещенияВставитьГиперссылку(Результат, Параметры) Экспорт
	
	Если ПустыеДанныеСФормы(Результат) Или ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Результат, "http") = 0 Тогда
		Результат = СтрШаблон("http://%1", Результат);
	КонецЕсли;
	
	ВыполнитьHTMLКоманду("createLink", Параметры, Результат);
	
	Ссылки = Параметры.ДокументHTML.querySelectorAll("a");
	Для Каждого Ссылка Из Ссылки Цикл
		
		Ссылка.setAttribute("target", "_blank");
		Если Не ЗначениеПустое(Ссылка.nextElementSibling) Тогда
			Если Ссылка.nextElementSibling.nodeName = "BR" Тогда
				Ссылка.nextElementSibling.remove();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработчикОповещенияВставитьСимвол(Результат, Параметры) Экспорт
	
	Если ПустыеДанныеСФормы(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьHTMLКоманду("insertText", Параметры, Результат);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораЦвета(НазваниеРеквизитаЦвета, НазваниеПроцедурыОписанияОповещения, Параметры)
	
	Параметры.Вставить("НазваниеРеквизитаЦвета", НазваниеРеквизитаЦвета);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		НазваниеПроцедурыОписанияОповещения, ЭтотОбъект, Параметры);
	
	ПараметрыОткрытияФормы = Новый Структура;
	Если Не ЗначениеПустое(НазваниеРеквизитаЦвета) Тогда
		ПараметрыОткрытияФормы.Вставить("Цвет", Параметры.Форма[НазваниеРеквизитаЦвета]);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораЦветаУНФ", ПараметрыОткрытияФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОбработчикОповещенияИзменитьЦвет(Цвет, Параметры) Экспорт
	
	Если ПустыеДанныеСФормы(Цвет) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеПустое(Параметры.НазваниеРеквизитаЦвета) Тогда
		Параметры.Форма[Параметры.НазваниеРеквизитаЦвета] = Цвет;
	КонецЕсли;
	
	НазваниеКоманды = ?(Параметры.ТипЦвета = "ЦветТекста", "foreColor", "backColor");
	
	ВыполнитьHTMLКоманду(НазваниеКоманды, Параметры, RGBвCSSПоЦвету(Цвет));
	
КонецПроцедуры

Процедура ОбработчикОповещенияИзменитьЦветСТаблицей(Цвет, Параметры) Экспорт
	
	Если ПустыеДанныеСФормы(Цвет) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Форма[Параметры.НазваниеРеквизитаЦвета] = Цвет;
	
	ВыбранныеЯчейкиТаблицы = Параметры.ВыбранныеЯчейкиТаблицы;
	
	Если Цвет.Красный = 255 И Цвет.Зеленый = 255 И Цвет.Синий = 255 Тогда
		
		Для Каждого ЯчейкаТаблицы Из ВыбранныеЯчейкиТаблицы Цикл
			ЯчейкаТаблицы.style.backgroundColor = Неопределено;
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ФорматRGBвCSS = RGBвCSSПоЦвету(Цвет);
	
	Для Каждого ЯчейкаТаблицы Из ВыбранныеЯчейкиТаблицы Цикл
		ЯчейкаТаблицы.style.backgroundColor = ФорматRGBвCSS;
	КонецЦикла;
	
	ЗакончитьКоманду(Параметры);
	
КонецПроцедуры

Процедура ОбработчикОповещенияИзменитьШрифт(Шрифт, Параметры) Экспорт
	
	Если ПустыеДанныеСФормы(Шрифт) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументHTML = Параметры.ДокументHTML;
	
	ВыполнитьHTMLКоманду("fontName", Параметры, Шрифт.Имя);
	
	Размер = Шрифт.Размер;
	Размер = РазмерТекстаHTMLПоРазмеруТекста(Размер);
	ВыполнитьHTMLКоманду("fontSize", Параметры, Размер);
	
	Если ЗначениеИстинно(Шрифт.Полужирный) Тогда
		Если Не ДокументHTML.queryCommandState("Bold") Тогда
			ВыполнитьHTMLКоманду("Bold", Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеИстинно(Шрифт.Наклонный) Тогда
		Если Не ДокументHTML.queryCommandState("Italic") Тогда
			ВыполнитьHTMLКоманду("Italic", Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеИстинно(Шрифт.Подчеркивание) Тогда
		Если Не ДокументHTML.queryCommandState("Underline") Тогда
			ВыполнитьHTMLКоманду("Underline", Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеИстинно(Шрифт.Зачеркивание) Тогда
		Если Не ДокументHTML.queryCommandState("StrikeThrough") Тогда
			ВыполнитьHTMLКоманду("StrikeThrough", Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикОповещенияИзменитьИзображение(ДанныеИзображения, ДополнительныеПараметры) Экспорт
	
	ЭлементИзображения = ДополнительныеПараметры.ЭлементИзображения;
	ОповещениеПриУспехе = ДополнительныеПараметры.ОповещениеПриУспехе;
	
	Если ПустыеДанныеСФормы(ДанныеИзображения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзображения.Свойство("Высота", ЭлементИзображения.height);
	ДанныеИзображения.Свойство("Ширина", ЭлементИзображения.width);
	
	ВыполнитьОповещение(ОповещениеПриУспехе);
	
КонецПроцедуры

Процедура ДобавитьИзображение(ПутьДоИзображения, Параметры, ДопАтрибут = Неопределено)
	
	РезультатHTML = СтрШаблон("
		|<div class=""img-editor"" data-new-img><div class=""img-wrapper"">
		|	<img src=""%1"" %2>
		|	<div class=""img-right"" onmousedown=""resizeImage(true, false)""></div>
		|	<div class=""img-bottom"" onmousedown=""resizeImage(false, true)""></div>
		|	<div class=""img-corner"" onmousedown=""resizeImage(true, true)""></div>
		|</div></div>
		|<div><br></div>",
		ПутьДоИзображения,
		?(ДопАтрибут = Неопределено, "", ДопАтрибут));
	
	ВыполнитьHTMLКоманду("InsertHTML", Параметры, РезультатHTML);
	
	КоличествоЭлементовДляРастягивания = 3;
	БлокиДляИзменения = Параметры.ДокументHTML.querySelectorAll(".img-editor");
	Для Каждого БлокДляИзменения Из БлокиДляИзменения Цикл
		
		// Удаляем контейнеры без картинок
		Если ЗначениеПустое(БлокДляИзменения.querySelector("img"))
			И БлокДляИзменения.children.length = 1
			И БлокДляИзменения.children.item(0).children.length = КоличествоЭлементовДляРастягивания Тогда
			
			БлокДляИзменения.parentNode.removeChild(БлокДляИзменения);
			Продолжить;
			
		КонецЕсли;
		
		Если БлокДляИзменения.getAttribute("data-new-img") <> Неопределено Тогда
			БлокДляИзменения.removeAttribute("data-new-img");
			БлокДляИзменения.children.item(0).contentEditable = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьИзменениеИзображений(ДокументHTML)
	
	БлокиДляРедактирования = ДокументHTML.querySelectorAll(".img-editor");
	
	Для Каждого БлокДляРедактирования Из БлокиДляРедактирования Цикл
		
		Картинка = БлокДляРедактирования.querySelector("img").cloneNode(Истина);
		БлокДляРедактирования.parentElement.insertBefore(Картинка, БлокДляРедактирования);
		
		БлокДляРедактирования.parentElement.removeChild(БлокДляРедактирования);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьИзменениеИзображений(ДокументHTML)
	
	Картинки = ДокументHTML.querySelectorAll("img");
	
	Для Каждого Картинка Из Картинки Цикл
		
		Обертка = ДокументHTML.createElement("div");
		Обертка.classList.add("img-wrapper");
		Обертка.contentEditable = "false";
		Обертка.append(Картинка.cloneNode(Истина));
		
		Обертка.innerHTML = Обертка.innerHTML + "
		|<div class=""img-right"" onmousedown=""resizeImage(true, false)""></div>
		|<div class=""img-bottom"" onmousedown=""resizeImage(false, true)""></div>
		|<div class=""img-corner"" onmousedown=""resizeImage(true, true)""></div>
		|";
		
		БлокДляРедактирования = ДокументHTML.createElement("div");
		БлокДляРедактирования.classList.add("img-editor");
		БлокДляРедактирования.append(Обертка);
		
		Картинка.parentElement.insertBefore(БлокДляРедактирования, Картинка);
		Картинка.parentElement.removeChild(Картинка);
		
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСУзламиНапрямую

Функция РодителиЭлемента(Знач Элемент)
	
	Результат = Новый Массив;
	
	Если ЗначениеПустое(Элемент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пока Не ЗначениеПустое(Элемент.parentNode) Цикл
		Результат.Добавить(Элемент.parentNode);
		Элемент = Элемент.parentNode;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбщийРодитель(Элемент1, Элемент2)
	
	РодителиА = РодителиЭлемента(Элемент1);
	РодителиБ = РодителиЭлемента(Элемент2);
	
	Результат = Неопределено;
	
	Для Каждого РодительА Из РодителиА Цикл
		Для Каждого РодительБ Из РодителиБ Цикл
			Если РодительА = РодительБ Тогда
				Результат = РодительА;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементыСвязаны(Родитель, Элемент)
	
	Узел = Элемент;
	Пока Не ЗначениеПустое(Узел) Цикл
		Если Узел = Родитель Тогда
			Возврат Истина;
		КонецЕсли;
		
		Узел = Узел.parentNode;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭлементыМежду(Родитель, Элемент1, Элемент2)
	
	Результат = Новый Массив;
	
	ЕстьЭлементыМежду = Ложь;
	Для Каждого Элемент Из Родитель.children Цикл
		Если ЭлементыСвязаны(Элемент, Элемент1) Или ЭлементыСвязаны(Элемент, Элемент2) Тогда
			
			ЕстьЭлементыМежду = (Результат.Количество() = 0);
			Результат.Добавить(Элемент);
			
		ИначеЕсли Результат.Количество() Тогда
			
			Если ЕстьЭлементыМежду Тогда
				Результат.Добавить(Элемент);
			Иначе
				Возврат Результат;
			КонецЕсли;
			
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		
		Результат.Добавить(Родитель);
		Возврат Результат;
		
	ИначеЕсли ЭлементыСвязаны(Результат[Результат.ВГраница()], Элемент1)
		Или ЭлементыСвязаны(Результат[Результат.ВГраница()], Элемент2) Тогда
		
		Возврат Результат;
		
	Иначе
		
		ПервыйЭлемент = Результат[0];
		Результат = Новый Массив;
		Результат.Добавить(ПервыйЭлемент);
		Возврат Результат;
		
	КонецЕсли;

КонецФункции

Функция УказанныйЭлемент(ОкноHTMLДокумента)
	
	Возврат ОкноHTMLДокумента.getSelection().anchorNode;
	
КонецФункции

Функция ВыделенныеЭлементы(ОкноHTMLДокумента)
	
	Выборка = ОкноHTMLДокумента.getSelection();
	Результат = Новый Массив;
	
	Если Выборка.isCollapsed Тогда
		Возврат Результат;
	КонецЕсли;
	
	Элемент1 = Выборка.anchorNode;
	Элемент2 = Выборка.focusNode;
	
	ОбщийРодитель = ОбщийРодитель(Элемент1, Элемент2);
	Если ЗначениеПустое(ОбщийРодитель) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат ЭлементыМежду(ОбщийРодитель, Элемент1, Элемент2);
	
КонецФункции

Функция ВыбранныеЭлементы(ОкноHTMLДокумента)
	
	Результат = ВыделенныеЭлементы(ОкноHTMLДокумента);
	
	Если Результат.Количество() = 0 Тогда
		Элемент = УказанныйЭлемент(ОкноHTMLДокумента);
		Если Не ЗначениеПустое(Элемент) Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработкаЦитат

Функция ВыявленныеМетаданныеЦитаты(Цитата, ЭлементДляПолучения)
	
	Элемент = Цитата.previousSibling;
	МетаданныеЦитаты = ДанныеПочтовогоСообщения(Элемент);
	Если МетаданныеЦитаты <> Неопределено Тогда
		ЭлементДляПолучения = Элемент;
		Возврат МетаданныеЦитаты;
	КонецЕсли;
	
	Элемент = Цитата.firstElementChild;
	Если Не ЗначениеПустое(Элемент)
		И Цитата.childNodes.length = 1
		И Элемент.nodeName = "DIV"
		И Элемент.firstChild.nodeName = "BR" Тогда
		
		Элемент.removeChild(Элемент.firstChild);
		Элемент = Элемент.firstChild;
		
	КонецЕсли;
	
	МетаданныеЦитаты = ДанныеПочтовогоСообщения(Элемент);
	Если МетаданныеЦитаты <> Неопределено Тогда
		ЭлементДляПолучения = Элемент;
		Возврат МетаданныеЦитаты;
	КонецЕсли;
	
	Элемент = Цитата.firstChild;
	МетаданныеЦитаты = ДанныеПочтовогоСообщения(Элемент);
	ЭлементДляПолучения = Элемент;
	Возврат МетаданныеЦитаты;
	
КонецФункции

Функция ДанныеПочтовогоСообщения(ЭлементHTML)
	
	Если ЗначениеПустое(ЭлементHTML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = ЭлементHTML.textContent;
	Если ПустаяСтрока(СокрЛП(Текст)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Адрес = Неопределено;
	Имя = Неопределено;
	Проверка = АдресИИмя(Текст, Адрес, Имя);
	
	Если Проверка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	День = Неопределено;
	Месяц = Неопределено;
	Год = Неопределено;
	Часы = Неопределено;
	Минуты = Неопределено;
	Проверка = ДанныеВремени(Текст, День, Месяц, Год, Часы, Минуты);
	
	Если Проверка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Адрес", Адрес);
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("День", День);
	Результат.Вставить("Месяц", Месяц);
	Результат.Вставить("Год", Год);
	Результат.Вставить("Часы", Часы);
	Результат.Вставить("Минуты", Минуты);
	
	Возврат Результат;
	
КонецФункции

Функция АдресИИмя(Текст, Адрес, Имя)
	
	ИндексСлеваОтАдреса = 1;
	Адрес = АдресПоСтроке(Текст, ИндексСлеваОтАдреса);
	Если Адрес = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Имя = ИмяПоАдресуИСтроке(Текст, Адрес, ИндексСлеваОтАдреса);
	
	Возврат 0;
	
КонецФункции

Функция АдресПоСтроке(Текст, ИндексСлеваОтАдреса)
	
	ИндексЛевойСкобки = СтрНайти(Текст, "<");
	
	Если ИндексЛевойСкобки Тогда
		
		Адрес = Сред(Текст, ИндексЛевойСкобки + 1, СтрНайти(Текст, ">") - ИндексЛевойСкобки - 1);
		Если Не СтрНайти(Адрес, "@") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИндексСлеваОтАдреса = ИндексЛевойСкобки;
		Возврат Адрес;
		
	КонецЕсли;
	
	ИндексСобаки = СтрНайти(Текст, "@");
	Если Не ИндексСобаки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Символ = "";
	Индекс = ИндексСобаки;
	Строка = "";
	Пока Индекс >=0 Цикл
		
		Символ = Сред(Текст, Индекс, 1);
		
		Если Символ = " " Тогда
			Прервать;
		КонецЕсли;
		
		Строка = СтрШаблон("%1%2", Символ, Строка);
		Индекс = Индекс - 1;
		
	КонецЦикла;
	ИндексСлеваОтАдреса = Индекс;
	
	ДлинаТекста = СтрДлина(Текст);
	Индекс = ИндексСобаки + 1;
	Пока Индекс <= ДлинаТекста Цикл
		
		Символ = Сред(Текст, Индекс, 1);
		
		Если Символ = " " Или Символ = "," Или Символ = ":" Или Символ = ";" Тогда
			Прервать;
		КонецЕсли;
		
		Строка = СтрШаблон("%1%2", Строка, Символ);
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Функция ИмяПоАдресуИСтроке(Текст, Адрес, ИндексСлеваОтАдреса)
	
	Если Сред(Текст, ИндексСлеваОтАдреса, 1) = "<" Тогда
		ИндексСлеваОтАдреса = ИндексСлеваОтАдреса - 1;
	КонецЕсли;
	
	Если СтрНайти(Текст, "@", НаправлениеПоиска.СКонца, ИндексСлеваОтАдреса) Тогда
		Возврат Адрес;
	КонецЕсли;
	
	Имя = ИмяПоПредлогуОтправителя("от", Текст, Адрес, ИндексСлеваОтАдреса);
	Если Имя <> Неопределено Тогда
		Возврат Имя;
	КонецЕсли;
	
	Имя = ИмяПоПредлогуОтправителя("from", Текст, Адрес, ИндексСлеваОтАдреса);
	Если Имя <> Неопределено Тогда
		Возврат Имя;
	КонецЕсли;
	
	// Поиск имени ведется справа налево от адреса
	Имя = "";
	Символ = "";
	КоличествоПробелов = 0;
	Индекс = ИндексСлеваОтАдреса - 1;
	Пока Индекс >= 0 Цикл
		
		Символ = Сред(Текст, Индекс, 1);
		
		Если Символ = "," Тогда
			
			Если ПустаяСтрока(Имя) Тогда
				Возврат Адрес;
			КонецЕсли;
			Прервать;
			
		КонецЕсли;
		
		Если Символ = " " Тогда
			КоличествоПробелов = КоличествоПробелов + 1;
			Если КоличествоПробелов = 2 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Имя = СтрШаблон("%1%2", Символ, Имя);
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	Если Сред(Имя, 1, 1) = """" Тогда
		Имя = Сред(Имя, 2, СтрДлина(Имя) - 2);
	КонецЕсли;
	
	Возврат СокрЛП(Имя);
	
КонецФункции

Функция ИмяПоПредлогуОтправителя(Предлог, Текст, Адрес, ИндексСлеваОтАдреса)
	
	Предлог = СтрШаблон(" %1 ", Предлог);
	Длина = СтрДлина(Предлог);
	
	ИндексОт = СтрНайти(Текст, " от ");
	Если ИндексОт Тогда
		
		Если ИндексОт + Длина - 1 = ИндексСлеваОтАдреса Тогда
			Возврат Адрес;
		КонецЕсли;
		
		Возврат Сред(Текст, ИндексОт + Длина, ИндексСлеваОтАдреса - ИндексОт - Длина);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДанныеВремени(Текст, День, Месяц, Год, Часы, Минуты)
	
	ПервыйСимвол = Сред(Текст, 1, 1);
	
	ПервыйСимволНеПервоеЧислоДня =
		ПервыйСимвол <> "0"
		И ПервыйСимвол <> "1"
		И ПервыйСимвол <> "2"
		И ПервыйСимвол <> "3";
	
	Если ПервыйСимволНеПервоеЧислоДня Тогда
		Текст = Сред(Текст, СтрНайти(Текст, " ") + 1);
	КонецЕсли;
	
	День = ДеньИзДанныхЦитаты(Текст);
	Если День = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = МесяцИГодИзДанныхЦитаты(Текст, Месяц, Год);
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ЧасыИМинутыИзДанныхЦитаты(Текст, Часы, Минуты);
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция Инициалы(ПолноеИмя)
	
	ИндексПробела = СтрНайти(ПолноеИмя, " ");
	Если ИндексПробела Тогда
		
		ПервоеСлово = Сред(ПолноеИмя, 1, ИндексПробела - 1);
		ВтороеСлово = Сред(ПолноеИмя, ИндексПробела + 1);
		
		Если ПервоеСлово = "от" Или ПервоеСлово = "from" Тогда
			Возврат ВРег(Сред(ВтороеСлово, 1, 1));
		КонецЕсли;
		
		Возврат ВРег(СтрШаблон("%1%2", Сред(ПервоеСлово, 1, 1), Сред(ВтороеСлово, 1, 1)));
		
	КонецЕсли;
	
	Возврат ВРег(Сред(ПолноеИмя, 1, 1));
	
КонецФункции

Функция ЧислоСНулем(Число)
	
	Если Число < 10 Тогда
		Возврат "0" + Число;
	КонецЕсли;
	
	Возврат Строка(Число);
	
КонецФункции

Процедура ДобавитьКодДляСтилизацииЦитирования(ДокументHTML)
	
	Стили = ДокументHTML.createElement("style");
	
	Стили.innerHTML = "
	|	.my-bq {
	|		display: flex; 
	|		flex-direction: column;
	|	}
	|
	|	.my-bq__top {
	|		display: flex; 
	|		align-items: center;
	|	}
	|
	|	.my-bq__circle {
	|		width: 30px; 
	|		height: 30px; 
	|		margin-right: 10px; 
	|		border-radius: 100%; 
	|		display: flex; 
	|		justify-content: center; 
	|		align-items: center; 
	|		text-align: center;
	|		cursor: pointer;
	|		transition: all 0.15s;
	|	}
	|	.my-bq__circle:hover {
	|		opacity: 0.7;
	|	}
	|
	|
	|	.my-bq__name, .my-bq__address {
	|		margin-right: 10px;
	|	}
	|
	|	.my-bq__bottom {
	|		position: relative;
	|	}
	|
	|	.my-bq__wrapper {
	|		position: absolute;
	|		top: 10px;
	|		bottom: -10px;
	|		padding: 0 13px; 
	|		margin: 0 10px 0 0; 
	|		cursor: pointer;
	|		transition: all 0.15s;
	|		border-radius: 4px;
	|	}
	|	.my-bq__wrapper:hover {
	|		background-color: #eeeeee60;
	|	}
	|
	|	.my-bq__line {
	|		height: 100%; 
	|		width: 4px;
	|		cursor: pointer;
	|		display: block;
	|	}
	|
	|	.my-bq__content {
	|		position: relative;
	|		left: 40px;
	|		top: 10px;
	|	}
	|
	|	.my-bq__btn {
	|		font-weight: 700;
	|		position: relative;
	|		left: 40px;
	|		top: 10px;
	|		cursor: pointer;
	|		transition: all 0.15s;
	|	}
	|	.my-bq__btn:hover {
	|		color: #818181;
	|	}
	|
	|	.red {	
	|		background-color: #e8c7c7;
	|	}
	|
	|	.blue {	
	|		background-color: #c7d1e8;
	|	} 
	|
	|	.yellow {	
	|		background-color: #e4dfc6;
	|	}
	|";
	
	ДокументHTML.head.appendChild(Стили);
	
	ТегКода = ДокументHTML.createElement("script");
	ТегКода.innerHTML = "
	|function toggleMessageBlockquote(elem1, elem2) {
	|	if (elem1.style.display == 'none') {
	|		elem1.style.display = 'block';
	|		elem2.style.display = 'none';
	|	} else {
	|		elem2.style.display = 'block';
	|		elem1.style.display = 'none';
	|	}
	|}; 
	|
	|function toggleWithParent(parent) {
	|	toggleMessageBlockquote(
	|		directChild(parent, '.my-bq__content'),
	|		directChild(parent, '.my-bq__btn')
	|	);
	|}
	|
	|function directChild(parent, selector) {
	|	const children = parent.children;
	|
	|	for (let i = 0; i < children.length; i++) {
	|		const element = children[i];
	|		if (element.matches(selector)) {
	|			return element;
	|		}
	|	}
	|
	|	return undefined;
	|}
	|
	|document.body.addEventListener('click', e => {
	|	const elem = e.target;
	|
	|	if (elem.matches('.my-bq__btn')) {
	|		toggleMessageBlockquote(directChild(elem.parentNode, '.my-bq__content'), elem);
	|	} else if (elem.matches('.my-bq__line')) {
	|		toggleWithParent(elem.parentNode.parentNode);
	|	} else if (elem.matches('.my-bq__wrapper')) {
	|		toggleWithParent(elem.parentNode);
	|	} else if (elem.matches('.my-bq__circle')) {
	|		toggleWithParent(elem.parentNode.nextElementSibling);
	|	} else if (elem.matches('.my-bq__circle-content')) {
	|		toggleWithParent(elem.parentNode.parentNode.nextElementSibling);
	|	}
	|});";
	
	ДокументHTML.head.appendChild(ТегКода);
	
КонецПроцедуры

Функция ДеньИзДанныхЦитаты(Текст)
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	День = ОписаниеТипа.ПривестиЗначение(Сред(Текст, 1, 2));
	Если День = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат День;
	
КонецФункции

Функция МесяцИГодИзДанныхЦитаты(Текст, Месяц, Год)
	
	Если Сред(Текст, 3, 1) = "." Тогда
		
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		Месяц = ОписаниеТипа.ПривестиЗначение(Сред(Текст, 4, 2));
		Год = ОписаниеТипа.ПривестиЗначение(Сред(Текст, 7, 4));
		
		Если Месяц = 0 Или Год = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат 0;
		
	КонецЕсли;
	
	Месяц = МесяцИзДанныхЦитаты(Текст);
	Если Месяц = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Год = ГодИзДанныхЦитаты(Текст);
	Если Год = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция МесяцИзДанныхЦитаты(Текст)
	
	Если Сред(Текст, 3, 1) = " " Тогда
		ВременныйМесяц = НРег(Сред(Текст, 4, 3));
	Иначе
		ВременныйМесяц = НРег(Сред(Текст, 3, 3));
	КонецЕсли;
	
	ОдинСимвол = Сред(ВременныйМесяц, 1, 1);
	ДваСимвола = Сред(ВременныйМесяц, 1, 2);
	ТриСимвола = Сред(ВременныйМесяц, 1, 3);
	
	Январь = НСтр("ru = 'я'");
	Февраль = НСтр("ru = 'ф'");
	Март = НСтр("ru = 'мар'");
	Апрель = НСтр("ru = 'ап'");
	Май = НСтр("ru = 'май'");
	Июнь = НСтр("ru = 'июн'");
	Июль = НСтр("ru = 'июл'");
	Август = НСтр("ru = 'ав'");
	Сентябрь = НСтр("ru = 'с'");
	Октябрь = НСтр("ru = 'о'");
	Ноябрь = НСтр("ru = 'н'");
	Декабрь = НСтр("ru = 'д'");
	
	Если ОдинСимвол = Январь Тогда
		Месяц = 1;
	ИначеЕсли ОдинСимвол = Февраль Тогда
		Месяц = 2;
	ИначеЕсли ТриСимвола = Март Тогда
		Месяц = 3;
	ИначеЕсли ДваСимвола = Апрель Тогда
		Месяц = 4;
	ИначеЕсли ТриСимвола = Май Тогда
		Месяц = 5;
	ИначеЕсли ТриСимвола = Июнь Тогда
		Месяц = 6;
	ИначеЕсли ТриСимвола = Июль Тогда
		Месяц = 7;
	ИначеЕсли ДваСимвола = Август Тогда
		Месяц = 8;
	ИначеЕсли ОдинСимвол = Сентябрь Тогда
		Месяц = 9;
	ИначеЕсли ОдинСимвол = Октябрь Тогда
		Месяц = 10;
	ИначеЕсли ОдинСимвол = Ноябрь Тогда
		Месяц = 11;
	ИначеЕсли ОдинСимвол = Декабрь Тогда
		Месяц = 12;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Месяц;
	
КонецФункции

Функция ГодИзДанныхЦитаты(Текст)
	
	ИндексПервогоПробела = СтрНайти(Текст, " ");
	ИндексВторогоПробела = ИндексПервогоПробела + СтрНайти(Сред(Текст, ИндексПервогоПробела + 1), " ");
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	Год = ОписаниеТипа.ПривестиЗначение(Сред(Текст, ИндексВторогоПробела + 1, 4));
	Если Год = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Год;
	
КонецФункции

Функция ЧасыИМинутыИзДанныхЦитаты(Текст, Часы, Минуты)
	
	ИндексДвоеточия = СтрНайти(Текст, ":");
	
	Попытка
		
		Часы = Число(Сред(Текст, ИндексДвоеточия - 2, 2));
		Минуты = Число(Сред(Текст, ИндексДвоеточия + 1, 2));
		
	Исключение
		
		ЗаписатьОшибку(
			ИнформацияОбОшибке(),
			НСтр("ru = 'ГипертекстКлиент.Стилизация переписки'",
			ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат 0;
	
КонецФункции

#КонецОбласти

#Область АдаптацияДанныхHTML

Функция РазмерТекстаПоРазмеруТекстаHTML(РазмерТекстаHTML)
	
	Если РазмерТекстаHTML = 1 Тогда
		Возврат 10;
	ИначеЕсли РазмерТекстаHTML = 2 Тогда
		Возврат 13;
	ИначеЕсли РазмерТекстаHTML = 3 Тогда
		Возврат 16;
	ИначеЕсли РазмерТекстаHTML = 4 Тогда
		Возврат 18;
	ИначеЕсли РазмерТекстаHTML = 5 Тогда
		Возврат 24;
	ИначеЕсли РазмерТекстаHTML = 6 Тогда
		Возврат 32;
	Иначе
		Возврат 48;
	КонецЕсли;
	
КонецФункции

Функция ИмяШрифтаПоИмениШрифтаHTML(ИмяШрифтаHTML)
	
	Если Лев(ИмяШрифтаHTML, 1) = """" Тогда
		ИмяШрифтаHTML = Сред(ИмяШрифтаHTML, 2);
	КонецЕсли;
	
	Если Прав(ИмяШрифтаHTML, 1) = """" Тогда
		ИмяШрифтаHTML = Лев(ИмяШрифтаHTML, СтрДлина(ИмяШрифтаHTML) - 1);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяШрифтаHTML) Или СтрНайти(ИмяШрифтаHTML, "Microsoft Sans Serif") Тогда
		
		Возврат "Microsoft Sans Serif";
		
	ИначеЕсли СтрНайти(ИмяШрифтаHTML, "Arial") Тогда
		
		Возврат "Arial";
		
	ИначеЕсли СтрНайти(ИмяШрифтаHTML, "Calibri") Тогда
		
		Возврат "Calibri";
		
	Иначе
		
		ИндексЗапятой = СтрНайти(ИмяШрифтаHTML, ",");
		
		Если ИндексЗапятой Тогда
			Возврат Сред(ИмяШрифтаHTML, 1, ИндексЗапятой - 1);
		Иначе
			Возврат ИмяШрифтаHTML;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция RGBвCSSПоЦвету(Цвет)
	
	Возврат СтрШаблон("rgb(%1, %2, %3)", Цвет.Красный, Цвет.Зеленый, Цвет.Синий);
	
КонецФункции

Функция РазмерТекстаHTMLПоРазмеруТекста(РазмерТекста)
	
	// Передать в HTML Команду fontSize можно только размеры от 1 до 7
	Если РазмерТекста <= 10 Тогда
		Возврат 1;
	ИначеЕсли РазмерТекста <= 14 Тогда
		Возврат 2;
	ИначеЕсли РазмерТекста <= 16 Тогда
		Возврат 3;
	ИначеЕсли РазмерТекста <= 18 Тогда
		Возврат 4;
	ИначеЕсли РазмерТекста <= 24 Тогда
		Возврат 5;
	ИначеЕсли РазмерТекста <= 32 Тогда
		Возврат 6;
	Иначе
		Возврат 7;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСТаблицами

Процедура УстановитьВидимостьКомандДляТаблиц(
	АктивныйЭлемент,
	ЭлементыКомандВставкиТаблиц,
	ЭлементыКомандИзмененияТаблиц)
	
	ВнутриТаблицы = КурсорУстановленВнутриТаблицы(АктивныйЭлемент);
	
	Для Каждого Элемент Из ЭлементыКомандВставкиТаблиц Цикл
		Элемент.Видимость = Не ВнутриТаблицы;
	КонецЦикла;
	
	Для Каждого Элемент Из ЭлементыКомандИзмененияТаблиц Цикл
		Элемент.Видимость = ВнутриТаблицы;
	КонецЦикла;
	
КонецПроцедуры

Функция КурсорУстановленВнутриТаблицы(АктивныйЭлемент)
	
	Если АктивныйЭлемент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АктивныйЭлемент = АктивныйЭлементТаблицы(АктивныйЭлемент);
	
	Родители = РодителиЭлемента(АктивныйЭлемент);
	
	Для Каждого Элемент Из Родители Цикл
		
		nodeName = Элемент.nodeName;
		Если nodeName = "TD"
			Или nodeName = "TR"
			Или nodeName = "TBODY"
			Или nodeName = "TABLE" Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработчикОповещенияВставитьИзменитьТаблицу(ДанныеТаблицы, Параметры) Экспорт
	
	Если ПустыеДанныеСФормы(ДанныеТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ДанныеТаблицы.КоличествоСтрок;
	КоличествоКолонок = ДанныеТаблицы.КоличествоКолонок;
	Если КоличествоКолонок = 0 Или КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШиринаЯчеек = ДанныеТаблицы.ШиринаЯчеек;
	ВысотаЯчеек = ДанныеТаблицы.ВысотаЯчеек;
	ПоказатьГраницы = ДанныеТаблицы.ПоказатьГраницы;
	
	Если ЗначениеПустое(Параметры.ЭлементТаблицы) Тогда
		
		СоздатьТаблицу(КоличествоСтрок, КоличествоКолонок, ШиринаЯчеек, ВысотаЯчеек, ПоказатьГраницы, Параметры);
		
	Иначе
		
		РазмерыИзменились = Неопределено;
		ДанныеТаблицы.Свойство("РазмерыИзменились", РазмерыИзменились);
		
		ИзменитьТаблицуПоПараметрам(
			КоличествоСтрок,
			КоличествоКолонок,
			ШиринаЯчеек,
			ВысотаЯчеек,
			ПоказатьГраницы,
			РазмерыИзменились,
			Параметры);
		
	КонецЕсли;
	
	// Растягивание/сжатие доступно не на всех платформах
	Попытка
		Параметры.ДокументHTML.defaultView.setResizableToTables(Ложь);
	Исключение
		
		ЗаписатьОшибку(
			ИнформацияОбОшибке(),
			НСтр("ru = 'ГипертекстКлиент.Вызов команды HTML снаружи HTML'",
			ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьТаблицу(КоличествоСтрок, КоличествоКолонок, ШиринаЯчеек, ВысотаЯчеек, ПоказатьГраницы, Параметры)
	
	Если ШиринаЯчеек = 0 Тогда
		ШиринаЯчеек = Формат(ШиринаДокумента(Параметры.ДокументHTML) / КоличествоКолонок, "ЧГ=");
	КонецЕсли;
	
	ЗнакГраниц = ?(ПоказатьГраницы, "border=""""", "");
	
	РазмерыЯчейки = СтрШаблон("width=""%1""", ШиринаЯчеек)
		+ ?(ВысотаЯчеек, СтрШаблон(" height=""%1""", ВысотаЯчеек), "");
	
	ТегЯчейки = СтрШаблон("<td %1 class=""text-wrap"">&nbsp;</td>", РазмерыЯчейки);
	
	РезультатHTML = СтрШаблон(
		"<table %1 cellspacing=""0"" data-our-ready-table=""true""><tbody>",
		ЗнакГраниц);
	
	Для Счетчик1 = 1 По КоличествоСтрок Цикл
		РезультатHTML = СтрШаблон("%1<tr>", РезультатHTML);
		
		Для Счетчик2 = 1 По КоличествоКолонок Цикл
			РезультатHTML = СтрШаблон("%1%2", РезультатHTML, ТегЯчейки);
		КонецЦикла;
		
		РезультатHTML = СтрШаблон("%1</tr>", РезультатHTML);
	КонецЦикла;
	
	ВыполнитьHTMLКоманду("insertHTML", Параметры, СтрШаблон("%1</tbody></table>", РезультатHTML));
	
КонецПроцедуры

Процедура ИзменитьТаблицуПоПараметрам(
	КоличествоСтрок,
	КоличествоКолонок,
	ШиринаЯчеек,
	ВысотаЯчеек,
	ПоказатьГраницы,
	РазмерыИзменились,
	Параметры)
	
	ЭлементТаблицы = Параметры.ЭлементТаблицы;
	ДокументHTML = Параметры.ДокументHTML;
	
	ЭлементТелаТаблицы = ЭлементТаблицы.children.item(0);
	
	УстановитьРазмерыЯчеекТаблицы(
		ЭлементТелаТаблицы,
		ШиринаЯчеек, ВысотаЯчеек,
		РазмерыИзменились,
		КоличествоКолонок,
		ДокументHTML);
	
	ИзменитьКоличествоКолонокТаблицы(ЭлементТелаТаблицы, КоличествоКолонок);
	ИзменитьКоличествоСтрокТаблицы(ЭлементТелаТаблицы, КоличествоСтрок);
	
	УстановитьВидимостьГраницТаблицы(ПоказатьГраницы, ЭлементТаблицы);
	
	ЗакончитьКоманду(Параметры);
	
КонецПроцедуры

Функция ЭлементыВыбраннойТаблицы(ДокументHTML)
	
	Если ДокументHTML = Неопределено Тогда
		ПоказатьСообщениеОНедоступностиHTML();
		Возврат Неопределено;
	КонецЕсли;
	
	ОкноHTML = ДокументHTML.defaultView;
	АктивныйЭлемент = ОкноHTML.getSelection().anchorNode;
	
	АктивныйЭлемент = АктивныйЭлементТаблицы(АктивныйЭлемент);
	
	Элементы = РодителиЭлемента(АктивныйЭлемент);
	Элементы.Вставить(0, АктивныйЭлемент);
	
	Результат = Новый Структура;
	Для Каждого Элемент Из Элементы Цикл
		
		nodeName = Элемент.nodeName;
		Если nodeName = "TD" Тогда
			Результат.Вставить("ЯчейкаТаблицы", Элемент);
		ИначеЕсли nodeName = "TR" Тогда
			Результат.Вставить("СтрокаТаблицы", Элемент);
		ИначеЕсли nodeName = "TBODY" Тогда
			Результат.Вставить("ЭлементТелаТаблицы", Элемент);
		ИначеЕсли nodeName = "TABLE" Тогда
			Результат.Вставить("ЭлементТаблицы", Элемент);
			Прервать;
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АктивныйЭлементТаблицы(АктивныйЭлемент)
	
	Если АктивныйЭлемент.nodeName = "#text" Или АктивныйЭлемент.nodeName = "#document" Тогда
		Возврат АктивныйЭлемент;
	КонецЕсли;
	
	Если АктивныйЭлемент.classList.contains("table-bottom")
		Или АктивныйЭлемент.classList.contains("table-right") Тогда
		АктивныйЭлемент = АктивныйЭлемент.parentNode.querySelector("td");
	КонецЕсли;
		
	Если АктивныйЭлемент.classList.contains("table-wrapper") Тогда
		АктивныйЭлемент = АктивныйЭлемент.querySelector("td");
	КонецЕсли;
	
	Возврат АктивныйЭлемент;
	
КонецФункции

Функция ПараметрыОткрытияФормыТаблицы(ЭлементыТаблицы)
	
	ЭлементТаблицы = ЭлементыТаблицы.ЭлементТаблицы;
	ЭлементТелаТаблицы = ЭлементыТаблицы.ЭлементТелаТаблицы;
	СтрокаТаблицы = ЭлементыТаблицы.СтрокаТаблицы;
	ЯчейкаТаблицы = ЭлементыТаблицы.ЯчейкаТаблицы;
	
	ПоказатьГраницы = (СтрНайти(ЭлементТаблицы.outerHTML, "table border=""""") <> 0);
	КоличествоКолонок = СтрокаТаблицы.children.length;
	КоличествоСтрок = ЭлементТелаТаблицы.children.length;
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ШиринаЯчеек = ОписаниеТипа.ПривестиЗначение(ЯчейкаТаблицы.offsetWidth);
	ВысотаЯчеек = ОписаниеТипа.ПривестиЗначение(ЯчейкаТаблицы.offsetHeight);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПоказатьГраницы", ПоказатьГраницы);
	ПараметрыОткрытия.Вставить("КоличествоКолонок", КоличествоКолонок);
	ПараметрыОткрытия.Вставить("КоличествоСтрок", КоличествоСтрок);
	ПараметрыОткрытия.Вставить("ШиринаЯчеек", ШиринаЯчеек);
	ПараметрыОткрытия.Вставить("ВысотаЯчеек", ВысотаЯчеек);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ДобавитьЭлементыЯчейкиТаблицыВМассив(Элементы, Массив)
	
	Для Каждого Ребенок Из Элементы Цикл
		Если Ребенок.nodeName = "TD" Тогда
			ДобавитьНовыйЭлементВМассив(Массив, Ребенок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыбранаТаблица(ОкноHTMLДокумента)
	
	ВыбранныйЭлемент = ОкноHTMLДокумента.getSelection().anchorNode;
	
	ЭтоИлиПервыйПотомокТаблица =
		Не ЗначениеПустое(ВыбранныйЭлемент.children)
		И (ВыбранныйЭлемент.nodeName = "TABLE" Или (ВыбранныйЭлемент.children.length
		И ВыбранныйЭлемент.children.item(0).nodeName = "TABLE"));
	
	Если ЭтоИлиПервыйПотомокТаблица Тогда
		Возврат Истина;
	КонецЕсли;
	
	РодителиЭлемента = РодителиЭлемента(ВыбранныйЭлемент);
	
	Для Каждого Элемент Из РодителиЭлемента Цикл
		Если Элемент.nodeName <> "TABLE" Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьРазмерыЯчеекТаблицы(
	ЭлементТелаТаблицы,
	ШиринаЯчеек, ВысотаЯчеек,
	РазмерыИзменились,
	КоличествоКолонок,
	ДокументHTML)
	
	Если Не ЗначениеИстинно(РазмерыИзменились) Тогда
		Возврат;
	КонецЕсли;
	
	Если ШиринаЯчеек = 0 Тогда
		ШиринаЯчеек = ШиринаДокумента(ДокументHTML) / КоличествоКолонок;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ЭлементТелаТаблицы.children Цикл
		Для Каждого ЯчейкаТаблицы Из СтрокаТаблицы.children Цикл
			
			ЯчейкаТаблицы.height = ВысотаЯчеек;
			ЯчейкаТаблицы.width = ШиринаЯчеек;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьКоличествоКолонокТаблицы(ЭлементТелаТаблицы, КоличествоКолонок)
	
	СтрокаТаблицы = ЭлементТелаТаблицы.children.item(0);
	ПредыдущееКоличествоКолонок = СтрокаТаблицы.children.length;
	
	Если ПредыдущееКоличествоКолонок = КоличествоКолонок Тогда
		Возврат;
	КонецЕсли;
	
	РазницаВКолонках = КоличествоКолонок - ПредыдущееКоличествоКолонок;
	
	Если РазницаВКолонках > 0 Тогда
		
		HTMLЯчейки = "<td class=""text-wrap"" width=""20"">&nbsp;</td>";
		
		Для Каждого СтрокаТаблицы Из ЭлементТелаТаблицы.children Цикл
			Для а = 1 По РазницаВКолонках Цикл
				СтрокаТаблицы.innerHTML = СтрШаблон("%1%2", СтрокаТаблицы.innerHTML, HTMLЯчейки);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из ЭлементТелаТаблицы.children Цикл
			Для а = 1 По - РазницаВКолонках Цикл
				СтрокаТаблицы.removeChild(СтрокаТаблицы.lastChild);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьКоличествоСтрокТаблицы(ЭлементТелаТаблицы, КоличествоСтрок)
	
	ПредыдущееКоличествоСтрок = ЭлементТелаТаблицы.children.length;
	
	Если ПредыдущееКоличествоСтрок = КоличествоСтрок Тогда
		Возврат;
	КонецЕсли;
	
	РазницаВСтроках = КоличествоСтрок - ПредыдущееКоличествоСтрок;
	
	Если РазницаВСтроках > 0 Тогда
		
		КоличествоЯчеекВСтроке = ЭлементТелаТаблицы.children.item(0).children.length;
		
		HTMLСтроки = "<tr>";
		Для Счетчик = 1 По КоличествоЯчеекВСтроке Цикл
			HTMLСтроки = СтрШаблон("%1<td class=""text-wrap"" height=""20"">&nbsp;</td>", HTMLСтроки);
		КонецЦикла;
		HTMLСтроки = СтрШаблон("%1</tr>", HTMLСтроки);
		
		Для а = 1 По РазницаВСтроках Цикл
			ЭлементТелаТаблицы.innerHTML = СтрШаблон("%1%2", ЭлементТелаТаблицы.innerHTML, HTMLСтроки);
		КонецЦикла;
		
	Иначе
		
		Для а = 1 По - РазницаВСтроках Цикл
			ЭлементТелаТаблицы.removeChild(ЭлементТелаТаблицы.lastChild);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьГраницТаблицы(ПоказатьГраницы, ЭлементТаблицы)
	
	Если ПоказатьГраницы Тогда
		Если СтрНайти(ЭлементТаблицы.outerHTML, "table border=""""") = 0 Тогда
			ЭлементТаблицы.outerHTML = СтрЗаменить(ЭлементТаблицы.outerHTML, "table", "table border=""""");
		КонецЕсли;
	Иначе
		ЭлементТаблицы.outerHTML = СтрЗаменить(ЭлементТаблицы.outerHTML, "table border=""""", "table");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереключательФорматаРедактирования

Процедура ОписаниеОповещенияПриПереключенииНаПростойТекст(ОтветПользователя, Параметры) Экспорт
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДокументHTML = Параметры.ДокументHTML;
	
	Результат = СоздатьКавычкиПоЦитатам(ДокументHTML);
	Результат = СтрЗаменить(Результат, "<br>", "");
	
	ВыполнитьОповещение(Параметры.ОповещениеПриУспехе, Результат);
	
КонецПроцедуры

Функция СоздатьКавычкиПоЦитатам(ДокументHTML)
	
	Цитаты = ДокументHTML.querySelectorAll("blockquote");
	
	МаксимальныйУровень = 0; // Получаем максимальный уровень вложенности цитат друг в друга
	УровниЦитаты = Новый Массив;
	
	ОпределитьУровниЦитат(Цитаты, МаксимальныйУровень, УровниЦитаты);
	
	Пока МаксимальныйУровень <> 0 Цикл
		
		Индекс = 0;
		Для Каждого Уровень Из УровниЦитаты Цикл
			
			// Всегда берем самый высокий уровень цитат
			Если Уровень <> МаксимальныйУровень Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			Цитата = Цитаты[Индекс];
			Индекс = Индекс + 1;
			
			ИзменитьЭлементыЦитатыНаНовыйБлок(ДокументHTML, Цитата);
			
		КонецЦикла;
		
		МаксимальныйУровень = МаксимальныйУровень - 1;
		
	КонецЦикла;
	
	Возврат СтрЗаменить(СтрЗаменить(ДокументHTML.body.innerHTML, Символы.ПС, ""), Символы.ВК, "");
	
КонецФункции

Процедура ОпределитьУровниЦитат(Цитаты, МаксимальныйУровень, УровниЦитаты)
	
	Для Каждого Цитата Из Цитаты Цикл
		
		Элемент = Цитата;
		Родители = Новый Массив;
		Пока ТипЗнч(Элемент.parentNode) <> Тип("Null") И Элемент.parentNode <> Неопределено Цикл
			Родители.Добавить(Элемент.parentNode);
			Элемент = Элемент.parentNode;
		КонецЦикла;
		
		Уровень = 1;
		Для Каждого Элемент Из Родители Цикл
			Если Элемент.nodeName <> "BLOCKQUOTE" Тогда
				Продолжить;
			КонецЕсли;
			
			Уровень = Уровень + 1;
		КонецЦикла;
		
		УровниЦитаты.Добавить(Уровень);
		Если Уровень > МаксимальныйУровень Тогда
			МаксимальныйУровень = Уровень;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьЭлементыЦитатыНаНовыйБлок(ДокументHTML, Цитата)
	
	// Все элементы внутри цитаты меняем на новый div
	НовыйЭлемент = ДокументHTML.createElement("div");
	Для Каждого Элемент Из Цитата.childNodes Цикл
		
		ТекстЭлемента = Элемент.innerText;
		Если ТекстЭлемента = Неопределено Тогда
			ТекстЭлемента = Элемент.textContent;
		КонецЕсли;
		
		ТекстЭлемента = СтрЗаменить(ТекстЭлемента, "<", "&lt;");
		ТекстЭлемента = СтрЗаменить(ТекстЭлемента, ">", "&gt;");
		
		НовыйТекст = "<div>&gt;";
		Символ = "";
		Для Счетчик = 1 По СтрДлина(ТекстЭлемента) Цикл
			Символ = Сред(ТекстЭлемента, Счетчик, 1);
			
			Если Символ = Символы.ПС Или Символ = Символы.ВК Тогда
				НовыйТекст = СтрШаблон("%1</div><div>&gt;", НовыйТекст);
			КонецЕсли;
			
			НовыйТекст = СтрШаблон("%1%2", НовыйТекст, Символ);
		КонецЦикла;
		НовыйТекст = СтрШаблон("%1</div>", НовыйТекст);
		
		Если НовыйТекст = "<div>&gt;</div><div>&gt;</div>" Тогда
			НовыйТекст = "<div>&gt;</div>";
		КонецЕсли;
		
		НовыйЭлемент.innerHTML = СтрШаблон("%1%2", НовыйЭлемент.innerHTML, НовыйТекст);
		
	КонецЦикла;
	
	НовыйЭлемент.innerHTML = СтрЗаменить(СтрЗаменить(НовыйЭлемент.innerHTML, Символы.ПС, ""), Символы.ВК, "");
	Цитата.parentNode.replaceChild(НовыйЭлемент, Цитата);
	
КонецПроцедуры

Функция СоздатьЦитированиеПоКавычкам(Текст)
	
	Результат = ПоместитьЦитатыСогласноКавычкам(Текст);
	Результат = УдалитьКавычки(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПоместитьЦитатыСогласноКавычкам(Текст)
	
	СимволКавычки = "&gt;";
	НачалоТегаЦитирования = "<blockquote>";
	КонецТегаЦитирования = "</blockquote>";
	
	Результат = "";
	
	Символ = "";
	ПредыдущийУровень = 0;
	ТекущийУровень = 0;
	Для Индекс = 1 По СтрДлина(Текст) Цикл
		
		Символ = Сред(Текст, Индекс, 1);
		
		Если Сред(Текст, Индекс, 4) = "<div" Тогда
			
			НачальныйИндекс = Индекс + 5;
			ТекущийУровень = 0;
			
			Пока Сред(Текст, НачальныйИндекс, 4) = СимволКавычки Цикл
				ТекущийУровень = ТекущийУровень + 1;
				НачальныйИндекс = НачальныйИндекс + 4;
			КонецЦикла;
			
			Для Счетчик = 1 По ПредыдущийУровень - ТекущийУровень Цикл
				Результат = СтрШаблон("%1%2", Результат, КонецТегаЦитирования);
			КонецЦикла;
			
			Для Счетчик = 1 По ТекущийУровень - ПредыдущийУровень Цикл
				Результат = СтрШаблон("%1%2", Результат, НачалоТегаЦитирования);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Сред(Текст, Индекс, 6) = "</body" Тогда
			Для Счетчик = 1 По ТекущийУровень Цикл
				Результат = СтрШаблон("%1%2", Результат, КонецТегаЦитирования);
			КонецЦикла;
		КонецЕсли;
		
		Результат = СтрШаблон("%1%2", Результат, Символ);
		
		ПредыдущийУровень = ТекущийУровень;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьКавычки(Текст)
	
	СимволПравойКавычки = "&gt;";
	СимволЛевойКавычки = "&lt;";
	
	// Удаление кавычек, кроме таких случаев: "<email@1c.ru>"
	Строка = СтрЗаменить(Текст, СимволПравойКавычки, "");
	
	Результат = "";
	БылаЛеваяКавычка = Ложь;
	БылСимволСобаки = Ложь;
	Для Счетчик = 1 По СтрДлина(Строка) Цикл
		Символ =  Сред(Строка, Счетчик, 1);
		
		Если БылаЛеваяКавычка Тогда
			
			Если Сред(Строка, Счетчик, 4) = СимволЛевойКавычки Тогда
				Результат = СтрШаблон("%1%2", Результат, Символ);
				БылаЛеваяКавычка = Ложь;
				БылСимволСобаки = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если Символ = "@" Тогда
				Если БылСимволСобаки Тогда
					БылаЛеваяКавычка = Ложь;
					БылСимволСобаки = Ложь;
				Иначе
					БылСимволСобаки = Истина;
				КонецЕсли;
				
				Результат = СтрШаблон("%1%2", Результат, Символ);
				Продолжить;
			КонецЕсли;
			
			Если БылСимволСобаки Тогда
				Если Символ = " " Или Символ = Символы.ПС Или Символ = Символы.ВК Тогда
					Результат = СтрШаблон("%1%2%3", Результат, СимволПравойКавычки, Символ);
					БылаЛеваяКавычка = Ложь;
					БылСимволСобаки = Ложь;
					Продолжить;
				КонецЕсли;
			Иначе
				Если Символ = " " Или Символ = Символы.ПС Или Символ = Символы.ВК Тогда
					Результат = СтрШаблон("%1%2", Результат, Символ);
					БылаЛеваяКавычка = Ложь;
					БылСимволСобаки = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Сред(Строка, Счетчик, 4) = СимволЛевойКавычки Тогда
			БылаЛеваяКавычка = Истина;
		КонецЕсли;
		
		Результат = СтрШаблон("%1%2", Результат, Символ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбщиеСлужебные

Процедура УстановитьФокус(Параметры)
	
	Если Параметры.Форма.ТекущийЭлемент = Параметры.Форма.Элементы[Параметры.НазваниеПоляHTML] Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Форма.ТекущийЭлемент = Параметры.Форма.Элементы[Параметры.НазваниеПоляHTML];
	
	#Если ВебКлиент Тогда
		УстановитьКурсорВначале(Параметры.ДокументHTML);
	#КонецЕсли
	
КонецПроцедуры

Процедура ДобавитьНовыйЭлементВМассив(Массив, НовыйЭлемент)
	
	ЭлементПрисутствует = Ложь;
	
	Для Каждого Элемент Из Массив Цикл
		Если Элемент = НовыйЭлемент Тогда 
			ЭлементПрисутствует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭлементПрисутствует Тогда
		Массив.Добавить(НовыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОповещение(Оповещение, Результат = Неопределено)
	
	Если ЗначениеПустое(Оповещение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеПустое(Значение)
	Возврат ТипЗнч(Значение) = Тип("Null") Или Значение = Неопределено;
КонецФункции

Функция ЗначениеИстинно(Данные)
	Возврат Не ЗначениеПустое(Данные) И Данные <> Ложь;
КонецФункции

Процедура ЗакончитьКоманду(Параметры)
	
	ВыполнитьОповещение(Параметры.ОповещениеПриУспехе);
	Параметры.Форма.Модифицированность = Истина;
	
КонецПроцедуры

Функция ПустыеДанныеСФормы(Данные)
	Возврат ЗначениеПустое(Данные) Или Данные = КодВозвратаДиалога.Отмена;
КонецФункции

Процедура ПоказатьСообщениеОНедоступностиHTML()
	
	ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите загрузку содержания письма'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(ИнформацияОбОшибке, ИмяСобытия)
	
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ИмяСобытия, "Информация", ТекстОшибки);
	
КонецПроцедуры

Функция ШиринаДокумента(ДокументHTML)
	
	Возврат ДокументHTML.body.offsetWidth;
	
КонецФункции

#КонецОбласти

Процедура ПоказатьРежимКнопкиКоманднойПанели(Кнопка, ДокументHTML)
	
	Команда = Сред(Кнопка.ИмяКоманды, 8);
	Если ДокументHTML.queryCommandSupported(Команда) Тогда
		
		Попытка
			Кнопка.Пометка = ДокументHTML.queryCommandState(Команда);
		Исключение
			
			ЗаписатьОшибку(
				ИнформацияОбОшибке(),
				НСтр("ru = 'ГипертекстКлиент.Вызов команды HTML снаружи HTML'",
				ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти