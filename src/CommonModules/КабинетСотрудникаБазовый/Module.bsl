
#Область СлужебныйПрограммныйИнтерфейс

Процедура РасчетЗарплатыДляНебольшихОрганизацийПриЗаписи() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#Область РегистрацияПубликуемыхОбъектов

Процедура ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей) Экспорт

	Сотрудники = НаборЗаписей.ВыгрузитьКолонку("Сотрудник");
	ТекущиеДанные = ТекущиеКадровыеДанныеСотрудников(Сотрудники);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПрежниеДанные", ТекущиеДанные);

КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей) Экспорт
	
	ПрежниеДанные = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ПрежниеДанные", ПрежниеДанные);
	Если ПрежниеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(НаборЗаписей, "Сотрудник", Истина);
	НовыеДанные = ТекущиеКадровыеДанныеСотрудников(Сотрудники);
	
	Отбор = Новый Структура("Сотрудник");
	СписокСотрудников = Новый Массив;
	
	Для каждого Сотрудник Из Сотрудники Цикл
		Отбор.Сотрудник = Сотрудник;
		ПрежниеДанныеПоСотруднику 	= ПрежниеДанные.Скопировать(Отбор);
		НовыеДанныеПоСотруднику 	= НовыеДанные.Скопировать(Отбор);
		Если Не ОбщегоНазначения.КоллекцииИдентичны(ПрежниеДанныеПоСотруднику, НовыеДанныеПоСотруднику) Тогда
			СписокСотрудников.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокСотрудников.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудников)
		|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка";
		ТаблицаСотрудников  = Запрос.Выполнить().Выгрузить();
		
		ИнтеграцияУправлениеПерсоналом.ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегистрацияПубликуемыхОбъектов

Функция ТекущиеКадровыеДанныеСотрудников(Сотрудники)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ТекущийВидЗанятости
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В(&Сотрудники)
	|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область НастройкиФункциональностиСервиса

Процедура ЗаполнитьНастройкиФункциональностиСервиса(НастройкиФункциональности, ВерсияФормата) Экспорт

	НастройкиФункциональности.ИнформацияОбОтпуске 				= Ложь;
	НастройкиФункциональности.ГрафикОтпусков 					= Ложь;
	НастройкиФункциональности.ЗапросСправкиСМестаРаботы 		= Ложь;
	НастройкиФункциональности.ОтсутствиеПоЛичнымОбстоятельствам = Ложь;
	НастройкиФункциональности.Опоздание 						= Ложь;
	НастройкиФункциональности.Командировка 						= Ложь;
	НастройкиФункциональности.Отгул 							= Ложь;
	НастройкиФункциональности.ОтпускПоУходуЗаРебенком 			= Ложь;
	НастройкиФункциональности.УходЗаРебенкомИнвалидом 			= Ложь;
	
	НастройкиФункциональности.ЗаявленияНаДСВ 						= Ложь;
	НастройкиФункциональности.СпособРасчетаДСВПроцентом 			= Ложь;
	НастройкиФункциональности.СпособРасчетаДСВСуммой 				= Ложь;
	НастройкиФункциональности.СпособРасчетаДСВПроцентомНеБолееСуммы = Ложь;
	НастройкиФункциональности.ЗаявленияНаКомпенсациюОтпуска 		= Ложь;
	НастройкиФункциональности.ЕдиновременнаяВыплатаКОтпуску 		= Ложь;
	НастройкиФункциональности.МатериальнаяПомощьКОтпуску 			= Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		НастройкиФункциональности.РегистрацияОтсутствий 		= Ложь;
		НастройкиФункциональности.Отпуск 						= Ложь;
		НастройкиФункциональности.ОтпускБезОплаты 				= Ложь;
		НастройкиФункциональности.УчебныйОтпуск 				= Ложь;
		НастройкиФункциональности.Болезнь 						= Ложь;
		НастройкиФункциональности.ОтпускПоБеременностиИРодам 	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступнаяФункциональностьСервисаПоВерсииПриложения() Экспорт

	ИспользуемыеФункции = КабинетСотрудникаМенеджерОбмена.НовоеОписаниеИспользуемыеФункции();
	Для каждого ЭлементКоллекции Из ИспользуемыеФункции Цикл
		ИспользуемыеФункции[ЭлементКоллекции.Ключ] = Истина;
	КонецЦикла;
	
	ИспользуемыеФункции.ИнформацияОбОтпуске 				= Ложь;
	ИспользуемыеФункции.ГрафикОтпусков 						= Ложь;
	ИспользуемыеФункции.ЗапросСправкиСМестаРаботы 			= Ложь;
	ИспользуемыеФункции.ОтсутствиеПоЛичнымОбстоятельствам 	= Ложь;
	ИспользуемыеФункции.Опоздание 							= Ложь;
	ИспользуемыеФункции.Командировка 						= Ложь;
	ИспользуемыеФункции.Отгул 								= Ложь;
	ИспользуемыеФункции.ОтпускПоУходуЗаРебенком 			= Ложь;
	ИспользуемыеФункции.УходЗаРебенкомИнвалидом 			= Ложь;
	ИспользуемыеФункции.ЗаявленияНаКомпенсациюОтпуска 		= Ложь;
	ИспользуемыеФункции.ЗаявленияНаДСВ 						= Ложь;
	ИспользуемыеФункции.СпособРасчетаДСВПроцентом 			= Ложь;
	ИспользуемыеФункции.СпособРасчетаДСВСуммой 				= Ложь;
	ИспользуемыеФункции.СпособРасчетаДСВПроцентомНеБолееСуммы = Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		ИспользуемыеФункции.РегистрацияОтсутствий 		= Ложь;
		ИспользуемыеФункции.Отпуск 						= Ложь;
		ИспользуемыеФункции.ОтпускБезОплаты 			= Ложь;
		ИспользуемыеФункции.УчебныйОтпуск 				= Ложь;
		ИспользуемыеФункции.Болезнь 					= Ложь;
		ИспользуемыеФункции.ОтпускПоБеременностиИРодам 	= Ложь;
	КонецЕсли;
	
	Возврат ИспользуемыеФункции;

КонецФункции

#КонецОбласти

Процедура СоздатьВТШтатноеРасписание(МенеджерВТ, ИспользоватьШтатноеРасписание) Экспорт
	
	ИспользоватьШтатноеРасписание = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого Организация Из Организации Цикл
		СоздатьПозицииОрганизации(Организация);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Подразделение КАК Подразделение,
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Должность КАК Должность
	|ПОМЕСТИТЬ ВТШтатноеРасписание
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Владелец В(&Организации)";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПубликуемаяСтруктураПредприятия(Позиции) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодразделенияПредприятия = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО (СтруктураПредприятия.Источник = ШтатноеРасписание.Подразделение
	|				И ШтатноеРасписание.Ссылка В (&Позиции))
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	
	ПодразделенияПредприятия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если ПодразделенияПредприятия.Количество() > 0 Тогда
		ПодразделенияПредприятия = РодителиПодразделений(ПодразделенияПредприятия);
	КонецЕсли;
	
	Возврат ПодразделенияПредприятия

КонецФункции

Функция РодителиПодразделений(Подразделения)
	
	РодителиПодразделений = Новый Массив;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Родитель", Ложь);
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			РодителиПодразделений.Добавить(ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
	РодителиПодразделений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РодителиПодразделений);
	Если РодителиПодразделений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
		РодителиПодразделений = РодителиПодразделений(РодителиПодразделений);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Подразделения);

КонецФункции

Функция ПодразделениеВСтруктуреПредприятия(Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Источник = &Подразделение";
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Подразделение;
	КонецЕсли;
	
	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();

КонецФункции

Функция ИменаКонтролируемыхПолей(Объект) Экспорт

	ИменаКонтролируемыхПолей = "";
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		ИменаКонтролируемыхПолей = "Наименование,Код,Родитель";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		ИменаКонтролируемыхПолей = "Наименование,ПометкаУдаления";
	КонецЕсли;
	
	Возврат ИменаКонтролируемыхПолей;

КонецФункции

Функция ФотографииФизическихЛиц(ФизическиеЛица) Экспорт

	Возврат Неопределено;

КонецФункции

Функция ТипСтруктураПредприятия() Экспорт
		
	Возврат Тип("СправочникСсылка.СтруктураПредприятия");

КонецФункции

Функция ТипШтатноеРасписание() Экспорт

	Возврат Тип("СправочникСсылка.ШтатноеРасписание");

КонецФункции

Функция ДанныеСтруктурыПредприятия(СписокОтбора) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Список", СписокОтбора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК СтруктураПредприятия,
	|	СтруктураПредприятия.Код КАК Код,
	|	СтруктураПредприятия.Наименование КАК Наименование,
	|	СтруктураПредприятия.Родитель КАК Родитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицоРуководителя,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Источник.РеквизитДопУпорядочиванияИерархического, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Порядок,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.Организации
	|			ТОГДА СтруктураПредприятия.Источник
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА СтруктураПредприятия.Источник.Владелец
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&Список)";
	ТаблицаСтруктурыПредприятия = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(ТаблицаСтруктурыПредприятия) Тогда
		Возврат ТаблицаСтруктурыПредприятия;
	КонецЕсли;
	
	ПубликуемыеФизическиеЛица = КабинетСотрудника.ПубликуемыеФизическиеЛица();
	
	РуководителиОрганизаций = Новый Соответствие;
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСтруктурыПредприятия, "Организация", Истина);
	Для Каждого Организация Из Организации Цикл
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		ЗапрашиваемыеЗначения = Новый Структура("Организация, Руководитель");
		ЗапрашиваемыеЗначения.Организация = Организация;
		ПодписиДокументов.ЗаполнитьСведенияОПодписяхДокументовПоОрганизации(ЗапрашиваемыеЗначения);
		Если ПубликуемыеФизическиеЛица[ЗапрашиваемыеЗначения.Руководитель] <> Неопределено Тогда
			РуководителиОрганизаций.Вставить(Организация, ЗапрашиваемыеЗначения.Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	ПорядокОрганизаций = ПорядокОрганизаций();
	Для Каждого СтрокаТаблицы Из ТаблицаСтруктурыПредприятия Цикл
		ПорядокОрганизации = ПорядокОрганизаций[СтрокаТаблицы.Организация];
		ПорядокПодразделения = СтрокаТаблицы.Порядок;
		Если ЗначениеЗаполнено(ПорядокОрганизации) Тогда
			СтрокаТаблицы.Порядок = ПорядокОрганизации + ПорядокПодразделения;
		КонецЕсли;
		СтрокаТаблицы.ФизическоеЛицоРуководителя = РуководителиОрганизаций[СтрокаТаблицы.Организация];
	КонецЦикла;
	
	Возврат ТаблицаСтруктурыПредприятия;

КонецФункции

Функция ДанныеШтатногоРасписания(СписокОтбора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Список", СписокОтбора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Наименование КАК Наименование,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	СтруктураПредприятия.Ссылка КАК МестоВСтруктуреПредприятия
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО ШтатноеРасписание.Подразделение = СтруктураПредприятия.Источник
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Список)";
	
	ДанныеШтатногоРасписания = Запрос.Выполнить().Выгрузить();
	Возврат ДанныеШтатногоРасписания;

КонецФункции

Функция НоваяПубликуемаяСтруктураПредприятияПозиций(Позиции) Экспорт

	ПодразделенияПредприятия = ПубликуемаяСтруктураПредприятия(Позиции);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодразделенияПредприятия", ПодразделенияПредприятия);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В(&ПодразделенияПредприятия)";
	НовыеПодразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПредприятия, НовыеПодразделения);

КонецФункции

Функция ТипыОбрабатываемыхЗаявок() Экспорт

	ТипыЗаявок = Новый Массив;
	Для каждого ТипЗаявки Из Перечисления.ТипыЗаявокКабинетСотрудника Цикл
		Если ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска
			Или ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы Тогда
			Продолжить;
		КонецЕсли;
		ТипыЗаявок.Добавить(ТипЗаявки);
	КонецЦикла;
	
	Возврат ТипыЗаявок;

КонецФункции

Функция МестаПозицийВСтруктуреПредприятия(Позиции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК Позиция,
	|	СтруктураПредприятия.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО ШтатноеРасписание.Подразделение = СтруктураПредприятия.Источник
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция КадровыеДанныеОбновляемыхСотрудников(МенеджерВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыеДанные.Организация КАК Владелец,
	|	КадровыеДанные.Подразделение КАК Подразделение,
	|	КадровыеДанные.Должность КАК Должность
	|ИЗ
	|	ВТКадровыеДанные КАК КадровыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
	|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность
	|ГДЕ
	|	ШтатноеРасписание.Ссылка ЕСТЬ NULL
	|	И ЕСТЬNULL(КадровыеДанные.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И ЕСТЬNULL(КадровыеДанные.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПозицияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ПозицияОбъект, Выборка);
		ПозицияОбъект.Наименование = Строка(ПозицияОбъект.Должность) + " /" + Строка(ПозицияОбъект.Подразделение);
		ПозицияОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанные.Сотрудник КАК Сотрудник,
	|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
	|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы,
	|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
	|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
	|	КадровыеДанные.Организация КАК Организация,
	|	КадровыеДанные.Подразделение КАК Подразделение,
	|	КадровыеДанные.Должность КАК Должность
	|ИЗ
	|	ВТКадровыеДанные КАК КадровыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
	|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Создает позиции штатного расписания.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации
//
Процедура СоздатьПозицииОрганизации(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.Организация = Организация;
	ПараметрыПолучения.НачалоПериода = ТекущаяДатаСеанса();
	ПараметрыПолучения.ОкончаниеПериода = ПараметрыПолучения.НачалоПериода;
	ПараметрыПолучения.КадровыеДанные = "Подразделение,Должность";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ПараметрыПолучения,
		"ВТСотрудникиОрганизацииДляСозданияПозиций");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Подразделение КАК Подразделение,
	|	СотрудникиОрганизации.Должность КАК Должность,
	|	ШтатноеРасписание.Ссылка КАК Позиция
	|ИЗ
	|	ВТСотрудникиОрганизацииДляСозданияПозиций КАК СотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО СотрудникиОрганизации.Подразделение = ШтатноеРасписание.Подразделение
	|			И СотрудникиОрганизации.Должность = ШтатноеРасписание.Должность
	|ГДЕ
	|	ШтатноеРасписание.Ссылка ЕСТЬ NULL
	|	И ЕСТЬNULL(СотрудникиОрганизации.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И ЕСТЬNULL(СотрудникиОрганизации.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПозицияОбъект = Справочники.ШтатноеРасписание.СоздатьЭлемент();
		ПозицияОбъект.Владелец = Организация;
		ЗаполнитьЗначенияСвойств(ПозицияОбъект, Выборка);
		ПозицияОбъект.Наименование = Строка(ПозицияОбъект.Должность) + " /" + Строка(ПозицияОбъект.Подразделение);
		ПозицияОбъект.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПорядокОрганизаций()
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование");
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Счетчик = 1;
		Пока Выборка.Следующий() Цикл
			Порядок = ДобавитьЛидирующиеНули(Формат(Счетчик, "ЧГ=0"), 3);
			Результат.Вставить(Выборка.Организация, Порядок);
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(Знач Строка, Знач ДлинаСтроки)
	
	ТекстПолный = Строка;
	Пока СтрДлина(ТекстПолный) < ДлинаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	
	Возврат ТекстПолный;
	
КонецФункции

Функция ДоступнаяФункциональностьСервиса() Экспорт

	ИспользуемыеФункции = КабинетСотрудникаМенеджерОбмена.НовоеОписаниеИспользуемыеФункции();
	Для каждого ЭлементКоллекции Из ИспользуемыеФункции Цикл
		ИспользуемыеФункции[ЭлементКоллекции.Ключ] = Истина;
	КонецЦикла;
	
	ИспользуемыеФункции.ИнформацияОбОтпуске 				= Ложь;
	ИспользуемыеФункции.ГрафикОтпусков 						= Ложь;
	ИспользуемыеФункции.ЗапросСправкиСМестаРаботы 			= Ложь;
	ИспользуемыеФункции.ОтсутствиеПоЛичнымОбстоятельствам 	= Ложь;
	ИспользуемыеФункции.Опоздание 							= Ложь;
	ИспользуемыеФункции.Командировка 						= Ложь;
	ИспользуемыеФункции.Отгул 								= Ложь;
	ИспользуемыеФункции.ОтпускПоУходуЗаРебенком 			= Ложь;
	ИспользуемыеФункции.УходЗаРебенкомИнвалидом 			= Ложь;
	ИспользуемыеФункции.ЗаявленияНаКомпенсациюОтпуска 		= Ложь;
	ИспользуемыеФункции.ЗаявленияНаДСВ 						= Ложь;
	ИспользуемыеФункции.СпособРасчетаДСВПроцентом 			= Ложь;
	ИспользуемыеФункции.СпособРасчетаДСВСуммой 				= Ложь;
	ИспользуемыеФункции.СпособРасчетаДСВПроцентомНеБолееСуммы = Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		ИспользуемыеФункции.РегистрацияОтсутствий 		= Ложь;
		ИспользуемыеФункции.Отпуск 						= Ложь;
		ИспользуемыеФункции.ОтпускБезОплаты 			= Ложь;
		ИспользуемыеФункции.УчебныйОтпуск 				= Ложь;
		ИспользуемыеФункции.Болезнь 					= Ложь;
		ИспользуемыеФункции.ОтпускПоБеременностиИРодам 	= Ложь;
	КонецЕсли;
	
	Возврат ИспользуемыеФункции;
	
КонецФункции

Функция ТипыОбъектовДляРучнойРегистрации() Экспорт
	
	ТипыОбъектов = Новый Массив;
	Для Каждого ТипОбъекта Из Метаданные.ОпределяемыеТипы.ПредметПубликацииКабинетСотрудника.Тип.Типы() Цикл
		
		Если ТипОбъекта = Тип("БизнесПроцессСсылка.УдалитьЗаявкаКабинетСотрудника") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипОбъекта = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыОбъектов.Добавить(ТипОбъекта);
		
	КонецЦикла;
	
	Возврат ТипыОбъектов;
	
КонецФункции

Функция ПодразделенияДляПроверкиРуководителей(Организации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК СтруктураПредприятия
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО СтруктураПредприятия.Источник = ПодразделенияОрганизаций.Ссылка
	|ГДЕ
	|	(ПодразделенияОрганизаций.Владелец В (&Организации)
	|			ИЛИ СтруктураПредприятия.Источник В (&Организации))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтруктураПредприятия");

КонецФункции 

Функция ДанныеСотрудниковДляПубликации(ПараметрыОбмена, МассивОтбора) Экспорт

	ДатаАктуальности = ТекущаяДатаСеанса();
	
	ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения,
	|ВидЗанятости,ТарифнаяСтавка";
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивОтбора, ВыбираемыеПоля, ДатаАктуальности);
	
	ПоказательТарифнойСтавки = НСтр("ru = 'Оклад'");
	ТаблицаДанных.Колонки.Добавить("ПоказательТарифнойСтавки");
	ТаблицаДанных.ЗаполнитьЗначения(ПоказательТарифнойСтавки, "ПоказательТарифнойСтавки");
	ТаблицаДанных.Колонки.Добавить("ДолжностьПоШтатномуРасписанию");
	ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
	ТаблицаДанных.Колонки.Добавить("РабочееМестоПериодРегистрации");
	ТаблицаДанных.Колонки.Добавить("ВидСобытия");
	
	ПозицииСотрудников = Новый Соответствие;
	ПодразделенияПозиций = Новый Соответствие;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанные.Сотрудник КАК Сотрудник,
	|	КадровыеДанные.Подразделение КАК Подразделение,
	|	КадровыеДанные.Должность КАК Должность
	|ПОМЕСТИТЬ ВТКадровыеДанные
	|ИЗ
	|	&КадровыеДанные КАК КадровыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыеДанные.Сотрудник КАК Сотрудник,
	|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
	|ИЗ
	|	ВТКадровыеДанные КАК КадровыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
	|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
	ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
		ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
	КонецЦикла;
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
	СтруктураПредприятия = МестаПозицийВСтруктуреПредприятия(Позиции);
	Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
		ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) И СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
			СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
			СтрокаТЗ.РабочееМестоПериодРегистрации = СтрокаТЗ.ДатаУвольнения;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) И СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
			СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
			СтрокаТЗ.РабочееМестоПериодРегистрации = СтрокаТЗ.ДатаПриема;
		Иначе
			Продолжить;
		КонецЕсли;
		СтрокаТЗ.ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
		СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[СтрокаТЗ.ДолжностьПоШтатномуРасписанию];
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции

Процедура ОбновитьЭлементСтруктурыПредприятия(Источник, Отказ) Экспорт
	ИнтеграцияУправлениеПерсоналомБазовый.ОбновитьЭлементСтруктурыПредприятия(Источник, Отказ);
КонецПроцедуры


#КонецОбласти