////////////////////////////////////////////////////////////////////////////////
// Подсистема "Организации".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	//УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf55-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.Организации);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.Организации, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияС1СДокументооборотом

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗаполнитьРеквизитыИзПотребителя.
Процедура ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	Если Не ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		
		Если МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization") Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СсылкаНаПотребитель,,
				"ИННЮЛ, КППЮЛ, ОКПО");
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель,
				"ЮридическоеФизическоеЛицо, НаименованиеПолное");
			
			Если ЗначениеЗаполнено(СведенияОбОрганизации.ИННЮЛ) Тогда
				ОбъектXDTO.inn = СведенияОбОрганизации.ИННЮЛ;
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОбОрганизации.КППЮЛ) Тогда
				ОбъектXDTO.kpp = СведенияОбОрганизации.КППЮЛ;
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОбОрганизации.ОКПО) Тогда
				ОбъектXDTO.okpo = СведенияОбОрганизации.ОКПО;
			КонецЕсли;
			Если ЗначениеЗаполнено(Реквизиты.НаименованиеПолное) Тогда
				ОбъектXDTO.fullName = Реквизиты.НаименованиеПолное;
			КонецЕсли;
			
			ЗарплатаКадрыБазовый.ЗаполнитьРеквизитыОбъектаДокументооборота(
				Прокси,
				ОбъектXDTO.legalPrivatePerson,
				Реквизиты.ЮридическоеФизическоеЛицо);
		ИначеЕсли МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMParty") Тогда
			ОбъектXDTO.organization = МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMOrganization",
				СсылкаНаПотребитель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриСозданииПоСсылке.
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС) Экспорт
	
	Если Не ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБЗК.ПриСозданииЮрЛицаПоСсылке(
		ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС);
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ДополнитьСоответствиеТипов.
Процедура ДополнитьСоответствиеТипов(Таблица) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
			Таблица, "DMOrganization", Тип("СправочникСсылка.Организации"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Организации.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Организации.ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций";
	
КонецПроцедуры

// Обработчик подписки на событие ПроверитьЗначениеОпцииИспользоватьНесколькоОрганизаций.
// Вызывается при записи элемента справочника "Организации".
//
Процедура ПроверитьЗначениеОпцииИспользоватьНесколькоОрганизацийПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ЭтоГруппа
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И Справочники.Организации.КоличествоОрганизаций() > 1 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
