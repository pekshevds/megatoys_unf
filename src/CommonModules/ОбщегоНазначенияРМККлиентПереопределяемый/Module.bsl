
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВидыОпераций

// Определяет является ли полученный вид операции операцией продажи.
//
// Параметры:
//  ЭтоОперацияПродажи - Булево - признак, который говорит, что текущий вид операции это продажа.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииПродажа(ЭтоОперацияПродажи, ВидОперации) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОперацииПродажа(ЭтоОперацияПродажи, ВидОперации);
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией возврата продажи.
//
// Параметры:
//  ЭтоОперацияВозвратПродажи - Булево - признак, который говорит, что текущий вид операции это возврат продажи.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииВозвратПродажи(ЭтоОперацияВозвратПродажи, ВидОперации) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОперацииВозвратПродажи(ЭтоОперацияВозвратПродажи, ВидОперации);
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией скупка.
//
// Параметры:
//  ЭтоОперацияСкупка - Булево - признак, который говорит, что текущий вид операции это скупка.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииСкупка(ЭтоОперацияСкупка, ВидОперации) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОперацииСкупка(ЭтоОперацияСкупка, ВидОперации);
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией возврат скупки.
//
// Параметры:
//  ЭтоОперацияВозвратСкупки - Булево - признак, который говорит, что текущий вид операции это возврат скупки.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииВозвратСкупки(ЭтоОперацияВозвратСкупки, ВидОперации) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОперацииВозвратСкупки(ЭтоОперацияВозвратСкупки, ВидОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ВидыОплат

// Определяет является ли полученный вид оплаты наличной формой оплаты.
//
// Параметры:
//  ЭтоОплатаНаличными - Булево - признак, который говорит, что текущий вид оплаты это наличные.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыНаличные(ЭтоОплатаНаличными, ВидОплаты) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОплатыНаличные(ЭтоОплатаНаличными, ВидОплаты);
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты оплатой платежной картой.
//
// Параметры:
//  ЭтоОплатаПлатежнойКартой - Булево - признак, который говорит, что текущий вид оплаты это платежная карта.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыПлатежнаяКарта(ЭтоОплатаПлатежнойКартой, ВидОплаты) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОплатыПлатежнаяКарта(ЭтоОплатаПлатежнойКартой, ВидОплаты);
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты зачетом аванса.
//
// Параметры:
//  ЭтоОплатаЗачетАванса - Булево - признак, который говорит, что текущий вид оплаты это зачет аванса.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыЗачетАванса(ЭтоОплатаЗачетАванса, ВидОплаты) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОплатыЗачетАванса(ЭтоОплатаЗачетАванса, ВидОплаты);
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты безналичными.
//
// Параметры:
//  ЭтоОплатаБезналичные - Булево - признак, который говорит, что текущий вид оплаты это безналичные.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыБезналичные(ЭтоОплатаБезналичные, ВидОплаты) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОплатыБезналичные(ЭтоОплатаБезналичные, ВидОплаты);
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой в рассрочку.
//
// Параметры:
//  ЭтоОплатаВРассрочку - Булево - признак, который говорит, что текущий вид оплаты это оплата в рассрочку.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыВРассрочку(ЭтоОплатаВРассрочку, ВидОплаты) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОплатыВРассрочку(ЭтоОплатаВРассрочку, ВидОплаты);
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой встречным предоставлением.
//
// Параметры:
//  ЭтоОплатаВстречнымПредоставлением - Булево - признак, который говорит, что текущий вид оплаты это оплата встречным предоставлением.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыВстречнымПредоставлением(ЭтоОплатаВстречнымПредоставлением, ВидОплаты) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОплатыВстречнымПредоставлением(ЭтоОплатаВстречнымПредоставлением,
		ВидОплаты);
	
КонецПроцедуры

// Заполняет полученный параметр значением вида оплаты - платежная карта для НСПК.
//
// Параметры:
//  ВидОплатыПлатежнаяКартаНСПК - Неопределено - значение для заполнения.
//
Процедура ОпределитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК);
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой кредитом.
//
// Параметры:
//  ЭтоОплатаКредитом - Булево - признак, который говорит, что текущий вид оплаты это оплата кредитом.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыКредитом(ЭтоОплатаКредитом, ВидОплаты) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьВидОплатыКредитом(ЭтоОплатаКредитом, ВидОплаты);
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой подарочным сертификатом.
//
// Параметры:
//  ЭтоОплатаПодарочнымСертификатом - Булево - признак, который говорит, что текущий вид оплаты это подарочным сертификатом.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыПодарочнымСертификатом(ЭтоОплатаПодарочнымСертификатом, ВидОплаты) Экспорт


КонецПроцедуры

#КонецОбласти

#Область ТипыЗначений

// Процедура определяет значение типа номенклатуры "Подарочный сертификат".
//
// Параметры:
//  ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК, Неопределено - значение типа номенклатуры.
//
Процедура ОпределитьТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры);
	
КонецПроцедуры

// Процедура определяет значение особенности учета номенклатуры "Алкоголь".
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК, Неопределено - значение особенности учета номенклатуры.
//
Процедура ОпределитьОсобенностьУчетаАлкоголь(ОсобенностьУчета) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьОсобенностьУчетаАлкоголь(ОсобенностьУчета);
	
КонецПроцедуры

// Процедура определяет значение особенности учета номенклатуры "ГИСМ".
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК, Неопределено - значение особенности учета номенклатуры.
//
Процедура ОпределитьОсобенностьУчетаГИСМ(ОсобенностьУчета) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьОсобенностьУчетаГИСМ(ОсобенностьУчета);
	
КонецПроцедуры

// Процедура определяет значение особенности учета номенклатуры "Табак".
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК, Неопределено - значение особенности учета номенклатуры.
//
Процедура ОпределитьОсобенностьУчетаТабак(ОсобенностьУчета) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьОсобенностьУчетаТабак(ОсобенностьУчета);
	
КонецПроцедуры

#КонецОбласти

#Область Печать_товарного_чека_ПрограммныйИнтерфейс

Процедура СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ, Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ, Форма);
	
КонецПроцедуры

Процедура СформироватьПечатнуюФормуЗаказаПокупателя(Заказ, Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.СформироватьПечатнуюФормуЗаказаПокупателя(Заказ, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Пакетная_фискализация_ПрограммныйИнтерфейс

// Расширение возможности проверки условия выполнения пакетной фискализации
//
// Параметры:
//  ВозможнаВыдачаНаличных - Булево - исходное значение признака.
//  КонтекстПроверки - Структура:
//		*ДанныеТерминала: ДанныеФормыЭлементКоллекции (см. ФормаРМК.ТаблицаТерминалы)
//		*КонтекстФормы: ФормаКлиентскогоПриложения
//
Процедура ПроверитьДополнительныеУсловияВыполненияВыдачиНаличных(ВозможнаВыдачаНаличных, КонтекстПроверки) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.
		ПроверитьДополнительныеУсловияВыполненияВыдачиНаличных(ВозможнаВыдачаНаличных, КонтекстПроверки);
КонецПроцедуры

#КонецОбласти

#Область Локализация

// Заполняет представление национальной валюты.
//
// Параметры:
//  ПредставлениеВалюты - Строка - представление валюты.
//
Процедура ЗаполнитьПредставлениеВалюты(ПредставлениеВалюты) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПлиточныйИнтерфейсПодбораТоваров

// Вызывает интерфейс для подбора номенклатуры
//
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложения - форма элемента структуры плиточного интерфейса.
//  Параметры - Структура - параметры открытия формы.
//  ОповещениеОВыборе - ОписаниеОповещения - оповещение об обработке выбора.
//
Процедура ОткрытьИнтерфейсПодбораНоменклатуры(ЭтотОбъект, Параметры, ОповещениеОВыборе) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьИнтерфейсПодбораНоменклатуры(ЭтотОбъект, Параметры,
		ОповещениеОВыборе);
КонецПроцедуры

// Переопределяет заполнение параметров открытия формы подбора товаров в состав палитры.
//
// Параметры:
//  Параметры - Структура - параметры открытия формы.
//
Процедура ЗаполнитьПараметрыОткрытияФормыПодбораВСоставПалитрыТоваров(Параметры) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПараметрыОткрытияФормыПодбораВСоставПалитрыТоваров(Параметры);
КонецПроцедуры

#КонецОбласти

// Заполняет параметры для передачи в ОбщаяФорма.ПечатьДокументов
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК.
//  ПараметрыОткрытия - Структура:
//   * ИмяМенеджераПечати - Строка.
//   * ИменаМакетов - Строка.
//   * ПараметрКоманды - Массив из ОпределяемыйТип.ЧекККМРМК.
//   * ПараметрыПечати - Строка.
//  СтандартнаяОбработка - Булево.
//
Процедура ЗаполнитьПараметрыОткрытияФормыПечатиДокументовДляТоварногоЧека(ЧекККМ, ПараметрыОткрытия,
	СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПараметрыОткрытияФормыПечатиДокументовДляТоварногоЧека(ЧекККМ,
		ПараметрыОткрытия, СтандартнаяОбработка);
		
КонецПроцедуры

// Определяет значение текущего рабочего места и заполняет реквизит на форме РМК "РабочееМесто".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьРабочееМесто(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьРабочееМесто(Форма);
	
КонецПроцедуры

// Процедура заполняет таблицу оплат на форме рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ЗаполнитьТаблицуОплат(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьТаблицуОплат(Форма);
	
КонецПроцедуры

// Процедура сохраняет выбранный вид платежной карты в случае, если видов ПК несколько.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ИмяКоманды - Строка - наименование переданной команды вида оплаты.
//
Процедура ЗаполнитьВыбранныйВидОплаты(Форма, ИмяКоманды) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьВыбранныйВидОплаты(Форма, ИмяКоманды);
	
КонецПроцедуры

// Процедура производит закрытие смены.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ЗакрытиеСменыПереопределено - Булево - признак того, что используется прикладной механизм закрытия смены. Значение по умолчанию Ложь.
//
Процедура ЗакрытьСмену(Форма, ЗакрытиеСменыПереопределено) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗакрытьСмену(Форма, ЗакрытиеСменыПереопределено);
	
КонецПроцедуры

// Процедура производит выемку денежных средств из кассы ККМ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыполнитьОперациюВыемка(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ВыполнитьОперациюВыемка(Форма);
	
КонецПроцедуры

// Процедура производит внесение денежных средств в кассу ККМ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыполнитьОперациюВнесение(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ВыполнитьОперациюВнесение(Форма);
	
КонецПроцедуры

// Процедура производит выбор документа для продажи по заказу.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументЗаказПокупателя(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ВыбратьДокументЗаказПокупателя(Форма);
	
КонецПроцедуры

// Процедура производит выбор документа безналичной оплаты.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументБезналичнойОплаты(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ВыбратьДокументБезналичнойОплаты(Форма);
	
КонецПроцедуры

// Процедура выполняет дополнительные действия после того, как прошла оплата по карте.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДозаполнитьДанныеПослеОплатыПоКарте(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ДозаполнитьДанныеПослеОплатыПоКарте(Форма);
	
КонецПроцедуры

// Процедура производит выбор документа расчета.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументРасчета(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ВыбратьДокументРасчета(Форма);
	
КонецПроцедуры

// Процедура формирует и устанавливает заголовок программы.
//
// Параметры:
//  ТекстЗаголовка - Строка - текст заголовка программы.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура СформироватьЗаголовокПрограммы(ТекстЗаголовка, Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.СформироватьЗаголовокПрограммы(ТекстЗаголовка, Форма);
	
КонецПроцедуры

// Процедура открывает форму подбора товаров в рабочем месте кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ОткрытьФормуПодбораТоваров(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьФормуПодбораТоваров(Форма);
	
КонецПроцедуры

// Процедура анализирует данные выбранные пользователем и дозаполняет при необходимости.
// В массив данных необходимо добавить выбранные значения из формы подбора. Т.к возможна
// ситуация, когда в форме подбора реализован множественный выбор строк.
//
// Параметры:
//  ДанныеВыбора - Структура - выбранные данные в форме ручного подбора.
//                 Обязательно должна содержать ключи Номенклатура, Цена.
//                 При необходимости - Характеристика, Упаковка.
//  МассивДанных - Массив - массив, в который нужно добавить выбранные данные.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ДозаполнитьДанныеРучногоВыбора(ДанныеВыбора, МассивДанных, Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ДозаполнитьДанныеРучногоВыбора(ДанныеВыбора, МассивДанных, Форма);
	
КонецПроцедуры

// Процедура заполняет массив особенностями учета номенклатуры, для которых необходима проверка возраста.
//
// Параметры:
//  МассивДанных - Массив - массив, который нужно заполнить.
//
Процедура ЗаполнитьМассивДляПроверкиВозраста(МассивДанных) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьМассивДляПроверкиВозраста(МассивДанных);
	
КонецПроцедуры

// Процедура производит обработку выбранного значения при подборе
// номенклатуры в таблицу быстрых товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  ВыбранноеЗначение - Структура - данные для обработки.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ОбработатьВыбранноеЗначениеБыстрыхТоваров(Форма, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОбработатьВыбранноеЗначениеБыстрыхТоваров(Форма,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Открывает форму настроек распределения продаж по кассам ККМ
//
Процедура ОткрытьНастройкиРаспределенияПродаж() Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьНастройкиРаспределенияПродаж();
	
КонецПроцедуры

// Процедура производит действия после открытия чека в очереди.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура производит действия после ошибки печати чека в очереди.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяет доступное ККТ для фискализации чека
// Параметры:
//  РеквизитыЧека - Структура - реквизиты фискального чека
//  СписокУстройств - Массив - список доступных ККТ для фискализации
//  ИдентификаторУстройстваККТ - СправочникСсылка.ПодключаемоеОборудование - выбранное ККТ для фискализации
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки
//
Процедура ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ, СтандартнаяОбработка = Истина) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ДоступноеККТДляФискализации(РеквизитыЧека,
		СписокУстройств,
		ИдентификаторУстройстваККТ,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Заполняет параметры выбора для отбора характеристик по владельцу.
//
// Параметры:
//  ПараметрыВыбора - Структура - параметры для отбора характеристик.
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - владелец характеристик.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбора, Номенклатура, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбора,
		Номенклатура,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Открывает форму помощника настройки обмена 1С:РМК с другими системами.
//
Процедура ОткрытьПомощникНастройкиОбмена() Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьПомощникНастройкиОбмена();
	
КонецПроцедуры

// Процедура выполняет дополнительные действия при открытии каталога товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ПриОткрытииКаталогаТоваров(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ПриОткрытииКаталогаТоваров(Форма);
	
КонецПроцедуры

// Метод реализует собственную логику в конфигурации потребителе по созданию документов списания алкогольной продукции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура СписатьАлкогольнуюПродукцию(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.СписатьАлкогольнуюПродукцию(Форма);
	
КонецПроцедуры

// Метод для обработки событий элементов формы добавленных программным способом.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Элемент - ПолеФормы - Имя элемента.
//
Процедура ПроизвольнаяНастройкаПриИзменении(Форма, Элемент) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ПроизвольнаяНастройкаПриИзменении(Форма, Элемент);
	
КонецПроцедуры

// Стандартный обработчик события формы см. вызов из Обработки.РабочееМестоКассира.Формы.ФормаРМК
// с возможностью вернуть во входящий параметр ОбработатьОповещениеНаСервере значение Истина, если
// далее требуется обработать событие на сервере.
// Дополнительно см. метод ОбщегоНазначенияРМКПереопределяемый.ОбработкаОповещения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - текущая форма приложения.
//  ИмяСобытия - Строка - название текущего события.
//  Параметр - Неопределено, Структура - параметры обработки оповещения.
//  Источник - Строка - название источника оповещения.
//  ОбработатьОповещениеНаСервере - Булево - признак необходимости обработки на сервере.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ОбработатьОповещениеНаСервере) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник,
		ОбработатьОповещениеНаСервере);
	
КонецПроцедуры

// Открывает форму опроса владельца карты.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ПровестиОпросВладельцаКарты(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ПровестиОпросВладельцаКарты(Форма);
	
КонецПроцедуры

// Проверяет корректность заполнения оплат перед пробитием чека.
// В случае если установить СтандартнаяОбработка = Ложь, дальнейшие проверки в форме РМК производиться не будут.
//
// Параметры:
//  ОплатаЗаполненаВерно - Булево - признак верно заполненной оплаты
//  СтруктураОшибки - Структура - текст заголовка и ошибки.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно, СтруктураОшибки, Форма, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно,
		СтруктураОшибки,
		Форма,
		СтандартнаяОбработка);
	
КонецПроцедуры

// Открывает форму списка чеков ККМ с ошибками НСПК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ОповещениеОЗакрытии - ОписаниеОповещения - оповещение, которое нужно выполнить после закрытия формы чеков
//
Процедура ОткрытьСписокЧековСОшибкамиНСПК(Форма, ОповещениеОЗакрытии) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьСписокЧековСОшибкамиНСПК(Форма, ОповещениеОЗакрытии);
	
КонецПроцедуры

// По переданным параметрам вида операции определяет текущий вид операции.
//
// Параметры:
//  ПараметрыВидаОперации - Структура - см.ОбщегоНазначенияРМККлиентСервер.ПараметрыВидаОперации().
//
Процедура ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации);
	
КонецПроцедуры

// Заполняет данные текущего эквайрингового терминала.
// Поиск по реквизиту формы РМК - "ТаблицаТерминалы".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ДанныеЭТ - Массив - данные текущего эквайрингового терминала.
//
Процедура ЗаполнитьДанныеТекущегоЭквайринговогоТерминала(Форма, ДанныеЭТ) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьДанныеТекущегоЭквайринговогоТерминала(Форма, ДанныеЭТ);
	
КонецПроцедуры

// Заполняет данные текущих эквайринговых терминалов.
// Поиск терминалов происходит в реквизите "ТаблицаТерминалы" формы рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Результат - Массив - массив для заполнения данными текущих терминалов.
//
// Возвращаемое значение:
//  Массив - данные текущих эквайринговых терминалов.
//
Процедура ЗаполнитьДанныеТекущихЭквайринговыхТерминалов(Форма, Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьДанныеТекущихЭквайринговыхТерминалов(Форма, Результат);
	
КонецПроцедуры 

// Заполняет данные текущих эквайринговых терминалов с отбором по организации.
// Поиск терминалов происходит в реквизите "ТаблицаТерминалы" формы рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Организация - ОпределяемыйТип.ОрганизацияРМК - организация отбора.
//  Результат - Массив - массив для заполнения данными текущих терминалов.
//
// Возвращаемое значение:
//  Массив - данные текущих эквайринговых терминалов.
//
Процедура ЗаполнитьДанныеТекущихЭквайринговыхТерминаловПоОрганизации(Форма, Организация, Результат) Экспорт
	

	
КонецПроцедуры

// Возвращает данные оплат картой по отложенному чеку.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Результат - Массив - массив для заполнения данными текущих терминалов.
//
// Возвращаемое значение:
//  Массив - данные текущих эквайринговых терминалов.
//
Процедура ЗаполнитьДанныеОплатКартойПоЧеку(Форма, Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьДанныеОплатКартойПоЧеку(Форма, Результат);
	
КонецПроцедуры

// Заполняет признак использования стандартного интерфейса внесения денежных средств.
// Если признак имеет значение Ложь, то механизм внесения необходимо описать в переопределении.
//
// Параметры:
//  Результат - Булево - признак использования стандартного интерфейса внесения.
//
Процедура ЗаполнитьПризнакСтандартныйИнтерфейсВнесения(Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПризнакСтандартныйИнтерфейсВнесения(Результат);
	
КонецПроцедуры

// Проверяет использование внешнего события в конфигурации при получении данных с торгового оборудования.
//
// Параметры:
//  Результат - Булево - признак использования внешнего события.
//
Процедура ЗаполнитьПризнакИспользованияВнешнегоСобытия(Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПризнакИспользованияВнешнегоСобытия(Результат);
	
КонецПроцедуры

// Проверяет наличие ошибок при заполнении данных карты лояльности на форме РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ЕстьОшибки - Булево - признак наличия ошибок.
//  СтандартнаяОбработка - Булево - признак стандартной проверки ошибок заполнения.
//    Истина, если используется стандартная проверка.
//
Процедура ПроверитьОшибкиЗаполненияКартыЛояльности(Форма, ЕстьОшибки, СтандартнаяОбработка = Истина) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ПроверитьОшибкиЗаполненияКартыЛояльности(Форма, ЕстьОшибки);
	
КонецПроцедуры

// Заполняет признак, который отвечает за способ создания карты лояльности.
// Значение по умолчанию - Ложь, карта лояльности будет создана в сервисе лояльности.
//
// Параметры:
//  Результат - Булево - признак, отвечающий за способ создания карты лояльности.
//
Процедура ЗаполнитьПризнакСоздаватьЛокальноКартуЛояльности(Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПризнакСоздаватьЛокальноКартуЛояльности(Результат);
	
КонецПроцедуры

// Заполняет признак использования локального поиска подарочного сертификата.
// Если признак имеет значение Ложь, то поиск сертификата будет идти через запрос сервера лояльности.
//
// Параметры:
//  Результат - Булево - признак использования локального поиска сертификата.
//
Процедура ЗаполнитьПризнакИспользоватьПоискСертификатаЛокально(Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПризнакИспользоватьПоискСертификатаЛокально(Результат);
	
КонецПроцедуры

// Заполняет признак использования локального поиска промокода.
// Если признак имеет значение Ложь, то поиск промокода будет идти через запрос сервера лояльности.
//
// Параметры:
//  Результат - Булево - признак использования локального поиска сертификата.
//
Процедура ЗаполнитьПризнакИспользоватьПоискПромокодаЛокально(Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПризнакИспользоватьПоискПромокодаЛокально(Результат);
	
КонецПроцедуры

// Заполняет признак использования локального запроса бонусов.
// Если признак имеет значение Ложь, то бонусы будут запрошены используя сервер лояльности.
//
// Параметры:
//  Результат - Булево - признак использования локального запроса бонусов.
//
Процедура ЗаполнитьПризнакИспользоватьЗапросБонусовЛокально(Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПризнакИспользоватьЗапросБонусовЛокально(Результат);
	
КонецПроцедуры

// Проверяет является ли переданное значение - документом безналичной оплаты.
//
// Параметры:
//  ДокументСсылка - ОпределяемыйТип.ДокументРасчетаРМК - ссылка на документ расчета.
//  ЭтоДокументБезналичнойОплаты - Булево - Истина, если это документ безналичной оплаты.
//
Процедура ЗаполнитьПризнакЭтоДокументБезналичнойОплаты(ДокументСсылка, ЭтоДокументБезналичнойОплаты) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПризнакЭтоДокументБезналичнойОплаты(ДокументСсылка,
		ЭтоДокументБезналичнойОплаты);
	
КонецПроцедуры

// Процедура производит обработку выбранного значения кода доступа
// кассира в помощнике настройки рабочего места кассира.
// Если СтандартнаяОбработка = Ложь, то необходимо вызвать обработку оповещения "ОповещениеВыборКодаДоступа"
// в форме помощника настройки кассового места.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  ВыбранноеЗначение - Структура - данные для обработки.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ОбработатьВыбранноеЗначениеКодаДоступа(Форма, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ОбработатьВыбранноеЗначениеКодаДоступа(Форма,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
КонецПроцедуры

// Заполняет массив, который содержит особенности учета номенклатуры, которые можно возвращать без марки.
//
// Параметры:
//  МассивОсобенностей - Массив - массив, который содержит значения особенностей номенклатуры, которые
//    можно возвращать без марки.
//
Процедура ЗаполнитьМассивОсобенностейДляВозвратаБезМарки(МассивОсобенностей) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьМассивОсобенностейДляВозвратаБезМарки(МассивОсобенностей);
	
КонецПроцедуры

// Проверяет необходимость заполнения контрагента при выполнении операций "Предоплата", "Оплата в рассрочку".
//
// Параметры:
//  Результат - Булево - признак необходимости заполнения контрагента.
//
Процедура ПроверитьНеобходимостьЗаполненияКонтрагента(Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ПроверитьНеобходимостьЗаполненияКонтрагента(Результат);
	
КонецПроцедуры

// Заполняет признак, от которого будет зависеть будет ли задаваться вопрос для подтверждения
// верности владельца для ввода марки. Значение по умолчанию признака - Истина.
// 
// Параметры:
//  НужноПодтверждениеМаркиАлкоголя - Булево - признак, от значения которого зависит будет ли выводиться вопрос
//    при сканировании марки алкоголя.
//
Процедура ЗаполнитьПодтверждениеМаркиАлкоголя(НужноПодтверждениеМаркиАлкоголя) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПодтверждениеМаркиАлкоголя(НужноПодтверждениеМаркиАлкоголя);
	
КонецПроцедуры

// Настраивает элементы формы настроек РМК по разделу SMS подтверждение
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек РМК.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура НастроитьЭлементыSMSПодтвержденияНаФормеНастроек(Форма, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.НастроитьЭлементыSMSПодтвержденияНаФормеНастроек(Форма, СтандартнаяОбработка);
	
КонецПроцедуры

// Заполняет признак использования автоматических скидок/бонусных программ
// 
// Параметры:
//  Результат - Булево - признак использования автоматических скидок/бонусных программ
//
Процедура ЗаполнитьПризнакИспользованияАвтоматическихСкидок(Результат) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ЗаполнитьПризнакИспользованияАвтоматическихСкидок(Результат);
	
КонецПроцедуры

// Разблокирует объект сервера лояльности (например - подарочный сертификат)
// 
// Параметры:
//  ТипОбъекта - Строка - описание, какой именно объект требуется разблокировать
//                        (например: clientbonuses- разблокировать бонусы, giftcard - разблокировать подарочный сертификат)
//  ПараметрыОбъекта - Структура - параметры для разблокировки объекта сервера лояльности.
//    * НомерСертификата - Строка - номер подарочного сертификата.
//    * ДисконтнаяКарта - ОпределяемыйТип.ДисконтнаяКартаРМК - дисконтная карта, бонусы которой будут разблокированы.
//
Процедура РазблокироватьОбъектСервераЛояльности(ТипОбъекта, ПараметрыОбъекта) Экспорт
	
	ОбщегоНазначенияРМКУНФВызовСервера.РазблокироватьОбъектСервераЛояльности(ТипОбъекта, ПараметрыОбъекта);
	
КонецПроцедуры

// Переопределяет возможность редактировать цену для строки корзины.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка корзины, для которой производится переопределение.
//  РазрешеноРедактироватьЦену - Булево - переопределяемый признак.
//
Процедура ПереопределитьРазрешениеРедактироватьЦенуДляТекущейСтроки(Форма, ТекущаяСтрока, РазрешеноРедактироватьЦену) Экспорт
	Если ТекущаяСтрока.ЭтоНабор И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		РазрешеноРедактироватьЦену = Истина;
	КонецЕсли;
КонецПроцедуры

// Заполняет сумму выемки наличных денежных средств.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  СуммаВыемка - Число - заполняемая сумма.
//
Процедура ЗаполнитьСуммуВыемки(Форма, СуммаВыемка) Экспорт
КонецПроцедуры

// Процедура открывает форму, в которой можно заполнить список складов, которые
// можно вручную указать при продаже для каждой строки товара.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//
Процедура ОткрытьВыборСкладовДляПродажи(Форма) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьВыборСкладовДляПродажи(Форма);
КонецПроцедуры

// Открывает форму оплаты кредитом
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ОткрытьФормуОплатыКредитом(Форма) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьФормуОплатыКредитом(Форма);
КонецПроцедуры

// Открывает форму вновь созданного эквайрингового терминала
// в интерфейсе помощника настройки рабочего места кассира.
// Когда СтандартнаяОбработка = Ложь, в клиентском коде следует обработать оповещение
// "ОповещениеОткрытьФормуСозданияЭквайринговогоТерминала" в форме помощника настройки кассового места.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки рабочего места кассира.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ОткрытьФормуНовогоТерминалаВИнтерфейсеПомощникаНастройки(Форма, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьФормуНовогоТерминалаВИнтерфейсеПомощникаНастройки(Форма,
		СтандартнаяОбработка);
КонецПроцедуры

// Изменяет поведение поля с суммой оплаты для режимов оплаты "Предоплата" и "Рассрочка".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ЭтоОперацияПродажи - Булево - признак вида операции, Истина если продажа, Ложь если возврат.
//
Процедура НастроитьПолеВводаСуммыВРассрочку(Форма, ЭтоОперацияПродажи) Экспорт
КонецПроцедуры

// Изменяет сообщение, которое видит пользователь при срабатывании запрета продажи.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ТекстЗапретаПродажи - Строка - стандартный текст, который можно поменять.
//  ВидНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРМК - вид номенклатуры, для которого сработал запрет.
//  ВремяНачала - Число - время начала запрета продажи в секундах.
//  ВремяОкончания - Число - время окончания запрета продажи в секундах.
//
Процедура ЗаполнитьТекстЗапретаПродажиПоВремени(Форма, ТекстЗапретаПродажи, ВидНоменклатуры, ВремяНачала, ВремяОкончания) Экспорт
КонецПроцедуры

// Детализирует ошибку при проверке кода маркировки в ИСМП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  РезультатПроверкиККМ - Неопределено, Структура - Содержит результат локальной проверки марки через ККМ.
//   * КодМаркировкиПроверен - Булево - Признак локальной проверки.  Истина если марка проверялась.
//   * РезультатПроверки - Булево - Результат локальной проверки. Истина если марка проверена успешно.
//  РезультатПроверкиИСМП - Неопределено, Структура - Содержит результат удаленной проверки марки через ИСМП.
//   * РезультатПроверкиОИСМ - Булево - Результат удаленной проверки. Истина если марка проверена успешно.
//   * КодОбработкиЗапроса - Число - Код обработки запроса ИСМП.
//   * КодРезультатаПроверкиОИСМ - Число - Код результата проверки ИСМП.
//   * РезультатПроверкиСведенийОТоваре - Строка - Представление результата проверки и запроса статуса.
//   * РезультатПроверкиСведенийОТовареПФ - Строка - Краткое представление результата проверки, например [М].
//   * РезультатОбработкиЗапроса - Строка - Представление результата обработки запроса.
//   * РезультатПроверкиОИСМПредставление - Строка - Представление результата проверки.
//   * СтатусОбработкиЗапроса - ПеречислениеСсылка.СтатусОбработкиЗапросаКМ.ПустаяСсылка - Статус обработки запроса ИСМП.
//   * СтатусРезультата - ПеречислениеСсылка.СтатусРезультатаЗапросаКМ.ПустаяСсылка - Статус результата запроса ИСМП.
//   * СтатусТовара - ПеречислениеСсылка.ОтветОИСМОСтатусеТовара.ПустаяСсылка - Ответ ИСМП о статусе товара.
//
Процедура ОбработатьОшибкуПроверкиКодаМаркировки(Форма, РезультатПроверкиККМ = Неопределено, РезультатПроверкиИСМП = Неопределено) Экспорт
КонецПроцедуры

// Определяет необходимость запрашивать баланс подарочного сертификата при возврате.
//
// Параметры:
//  ЗапрашиватьБаланс - Булево - истина, если требуется запрашивать баланс сертификата.
//
Процедура ОпределитьНеобходимостьЗапросаБалансаСертификата(ЗапрашиватьБаланс) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ОпределитьНеобходимостьЗапросаБалансаСертификата(ЗапрашиватьБаланс);
КонецПроцедуры

// Открывает форму выбора кассира. При завершении событие должно вызывать процедуру
// "ВыборКассираЗавершение" на форме рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОткрытьФормуВыбораКассира(Форма, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьФормуВыбораКассира(Форма, СтандартнаяОбработка);
КонецПроцедуры

// Открывает форму выбора контрагента.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * ОписаниеОповещенияОЗакрытии - описание оповещения о закрытии формы выбора.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОткрытьФормуВыбораКонтрагента(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьФормуВыбораКонтрагента(СтруктураПараметров, СтандартнаяОбработка);
КонецПроцедуры

// Открывает форму настройки эквайринга.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * ОписаниеОповещенияОЗакрытии - описание оповещения о закрытии формы выбора.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОткрытьФормуНастройкиЭквайринга(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ОткрытьФормуНастройкиЭквайринга(СтруктураПараметров, СтандартнаяОбработка);
КонецПроцедуры

// Переопределяет настройки элементов видов оплат.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура НастроитьЭлементыВидовОплат(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.НастроитьЭлементыВидовОплат(СтруктураПараметров, СтандартнаяОбработка);
КонецПроцедуры

// Выводит сообщение об ошибке при авторизации
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * ТипОшибки - Строка - описывающая тип ошибки.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ВывестиСообщениеОбОшибкеАвторизации(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКУНФКлиент.ВывестиСообщениеОбОшибкеАвторизации(СтруктураПараметров, СтандартнаяОбработка);
КонецПроцедуры

// Производит дополнительные настройки формы РМК после выбора заказа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК
//
Процедура ПослеВыбораЗаказаПокупателя(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ПослеВыбораЗаказаПокупателя(Форма);
	
КонецПроцедуры

// Переопределяет настройки формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК
//
Процедура ИнициализироватьФормуРабочегоМестаКассира(Форма) Экспорт
	
	ОбщегоНазначенияРМКУНФКлиент.ИнициализироватьФормуРабочегоМестаКассира(Форма);
	
КонецПроцедуры

#КонецОбласти
