
#Область ПрограммныйИнтерфейс

// Заполняет табличную часть текущими остатками товаров у комиссионера
//
Функция ТаблицаОстатковТоваровУКомиссионера(Объект, ДополнительныеПараметры = Неопределено, ИмяТабличнойЧасти = "Запасы", КлючСвязи = Неопределено, ОчищатьТабЧасть = Истина) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("ВалютаРасчетов", Объект.Договор.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаДокумента", Объект.ВалютаДокумента);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Не ЗначениеЗаполнено(Объект.Дата) Тогда
		ДатаОбработки = Новый Граница(КонецДня(ТекущаяДатаСеанса()), ВидГраницы.Включая);
	Иначе
		ДатаОбработки = Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	
	КомпенсироватьДвижения = Объект.Проведен;
	
	Если Не КомпенсироватьДвижения Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗапасыПереданныеОстатки.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(ЗапасыПереданныеОстатки.Номенклатура.Наименование КАК СТРОКА(50)) КАК НоменклатураНаименование,
		|	ЗапасыПереданныеОстатки.Характеристика КАК Характеристика,
		|	ЗапасыПереданныеОстатки.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданныеОстатки.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|		ИНАЧЕ ЗапасыПереданныеОстатки.Заказ
		|	КОНЕЦ КАК ЗаказПокупателя,
		|	СУММА(ЗапасыПереданныеОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(ЗапасыПереданныеОстатки.КоличествоОстаток) КАК Остаток,
		|	ЗапасыПереданныеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ВЫБОР
		|			КОГДА &ВалютаДокумента = &ВалютаРасчетов
		|				ТОГДА ЗапасыПереданныеОстатки.СуммаРасчетовОстаток
		|			ИНАЧЕ ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток * КурсВалютыРасчетов.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыРасчетов.Кратность), 0)
		|		КОНЕЦ) КАК СуммаРасчетов,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(2099, 12, 31, 23, 59, 59)
		|		КОГДА ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗапасыПереданныеОстатки.Заказ.Дата
		|		ИНАЧЕ ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки
		|	КОНЕЦ КАК Дата
		|ИЗ
		|	РегистрНакопления.ЗапасыПереданные.Остатки(
		|			&ДатаОбработки,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И Договор = &Договор
		|				И ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)) КАК ЗапасыПереданныеОстатки,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаРасчетов) КАК КурсВалютыРасчетов,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыПереданныеОстатки.Номенклатура,
		|	ЗапасыПереданныеОстатки.Характеристика,
		|	ЗапасыПереданныеОстатки.Партия,
		|	ВЫРАЗИТЬ(ЗапасыПереданныеОстатки.Номенклатура.Наименование КАК СТРОКА(50)),
		|	ВЫБОР
		|		КОГДА ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(2099, 12, 31, 23, 59, 59)
		|		КОГДА ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗапасыПереданныеОстатки.Заказ.Дата
		|		ИНАЧЕ ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки
		|	КОНЕЦ,
		|	ЗапасыПереданныеОстатки.Номенклатура.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданныеОстатки.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|		ИНАЧЕ ЗапасыПереданныеОстатки.Заказ
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	НоменклатураНаименование";
		
	Иначе
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
			Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ВидДвижения = ВидДвиженияНакопления.Расход
		Иначе
			ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапасыПереданныеОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыПереданныеОстатки.Характеристика КАК Характеристика,
		|	ЗапасыПереданныеОстатки.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданныеОстатки.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|		ИНАЧЕ ЗапасыПереданныеОстатки.Заказ
		|	КОНЕЦ КАК ЗаказПокупателя,
		|	СУММА(ЗапасыПереданныеОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(ЗапасыПереданныеОстатки.КоличествоОстаток) КАК Остаток,
		|	ЗапасыПереданныеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ВЫБОР
		|			КОГДА &ВалютаДокумента = &ВалютаРасчетов
		|				ТОГДА ЗапасыПереданныеОстатки.СуммаРасчетовОстаток
		|			ИНАЧЕ ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток * КурсВалютыРасчетов.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыРасчетов.Кратность), 0)
		|		КОНЕЦ) КАК СуммаРасчетов,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(2099, 12, 31, 23, 59, 59)
		|		КОГДА ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗапасыПереданныеОстатки.Заказ.Дата
		|		ИНАЧЕ ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки
		|	КОНЕЦ КАК Дата
		|ПОМЕСТИТЬ Итог
		|ИЗ
		|	РегистрНакопления.ЗапасыПереданные.Остатки(
		|			&ДатаОбработки,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И Договор = &Договор
		|				И ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)) КАК ЗапасыПереданныеОстатки,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаРасчетов) КАК КурсВалютыРасчетов,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыПереданныеОстатки.Номенклатура,
		|	ЗапасыПереданныеОстатки.Характеристика,
		|	ЗапасыПереданныеОстатки.Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(2099, 12, 31, 23, 59, 59)
		|		КОГДА ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗапасыПереданныеОстатки.Заказ.Дата
		|		ИНАЧЕ ЗапасыПереданныеОстатки.Заказ.ДатаОтгрузки
		|	КОНЕЦ,
		|	ЗапасыПереданныеОстатки.Номенклатура.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданныеОстатки.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|		ИНАЧЕ ЗапасыПереданныеОстатки.Заказ
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗапасыПереданные.Номенклатура,
		|	ЗапасыПереданные.Характеристика,
		|	ЗапасыПереданные.Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданные.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|		ИНАЧЕ ЗапасыПереданные.Заказ
		|	КОНЕЦ,
		|	СУММА(ВЫБОР
		|			КОГДА ЗапасыПереданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И ТИПЗНАЧЕНИЯ(&Ссылка) = ТИП(Документ.ПриходнаяНакладная)
		|				ТОГДА ЗапасыПереданные.Количество * -1
		|			ИНАЧЕ ЗапасыПереданные.Количество
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ЗапасыПереданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И ТИПЗНАЧЕНИЯ(&Ссылка) = ТИП(Документ.ПриходнаяНакладная)
		|				ТОГДА ЗапасыПереданные.Количество * -1
		|			ИНАЧЕ ЗапасыПереданные.Количество
		|		КОНЕЦ),
		|	ЗапасыПереданные.Номенклатура.ЕдиницаИзмерения,
		|	СУММА(ВЫБОР
		|			КОГДА ЗапасыПереданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И НЕ ТИПЗНАЧЕНИЯ(&Ссылка) = ТИП(Документ.ОтчетКомиссионера)
		|				ТОГДА ВЫБОР
		|						КОГДА &ВалютаДокумента = &ВалютаРасчетов
		|							ТОГДА ЗапасыПереданные.СуммаРасчетов * -1
		|						ИНАЧЕ ЕСТЬNULL(ЗапасыПереданные.СуммаРасчетов * -1 * КурсВалютыРасчетов.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыРасчетов.Кратность), 0)
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВалютаДокумента = &ВалютаРасчетов
		|						ТОГДА ЗапасыПереданные.СуммаРасчетов
		|					ИНАЧЕ ЕСТЬNULL(ЗапасыПереданные.СуммаРасчетов * КурсВалютыРасчетов.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыРасчетов.Кратность), 0)
		|				КОНЕЦ
		|		КОНЕЦ),
		|	ВЫБОР
		|		КОГДА ЗапасыПереданные.Заказ.ДатаОтгрузки ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(2099, 12, 31, 23, 59, 59)
		|		КОГДА ЗапасыПереданные.Заказ.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗапасыПереданные.Заказ.Дата
		|		ИНАЧЕ ЗапасыПереданные.Заказ.ДатаОтгрузки
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ЗапасыПереданные КАК ЗапасыПереданные,
		|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента,
		|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаРасчетов) КАК КурсВалютыРасчетов
		|ГДЕ
		|	ЗапасыПереданные.Регистратор = &Ссылка
		|	И ЗапасыПереданные.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)
		|	И ЗапасыПереданные.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыПереданные.Характеристика,
		|	ЗапасыПереданные.Номенклатура,
		|	ЗапасыПереданные.Партия,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданные.Заказ.ДатаОтгрузки ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(2099, 12, 31, 23, 59, 59)
		|		КОГДА ЗапасыПереданные.Заказ.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗапасыПереданные.Заказ.Дата
		|		ИНАЧЕ ЗапасыПереданные.Заказ.ДатаОтгрузки
		|	КОНЕЦ,
		|	ЗапасыПереданные.Номенклатура.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЗапасыПереданные.Заказ = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|		ИНАЧЕ ЗапасыПереданные.Заказ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Итог.Номенклатура КАК Номенклатура,
		|	Итог.Характеристика КАК Характеристика,
		|	Итог.Партия КАК Партия,
		|	Итог.ЗаказПокупателя КАК ЗаказПокупателя,
		|	СУММА(Итог.Количество) КАК Количество,
		|	СУММА(Итог.Остаток) КАК Остаток,
		|	Итог.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(Итог.СуммаРасчетов) КАК СуммаРасчетов,
		|	Итог.Дата КАК Дата
		|ИЗ
		|	Итог КАК Итог
		|
		|СГРУППИРОВАТЬ ПО
		|	Итог.Номенклатура,
		|	Итог.Партия,
		|	Итог.ЗаказПокупателя,
		|	Итог.ЕдиницаИзмерения,
		|	Итог.Характеристика,
		|	Итог.Дата"
		
	КонецЕсли;
	
	ЕстьРеквизитЗаказ = ОбщегоНазначения.ЕстьРеквизитОбъекта("Заказ", Объект.Ссылка.Метаданные());
	
	НеУчитыватьЗаказыПриПередачеНаКомиссию = Ложь;
	
	Если (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная")
		И Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера)
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПереоценкаТоваровНаКомиссии") 
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
		НеУчитыватьЗаказыПриПередачеНаКомиссию = Объект.Договор.НеУчитыватьЗаказыПриПередачеНаКомиссию;
	КонецЕсли;
	
	Если ЕстьРеквизитЗаказ И ЗначениеЗаполнено(Объект.Заказ) И Не НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
		Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Договор = &Договор", "И Договор = &Договор И Заказ = &Заказ");
	КонецЕсли;
	
	ВыгрузитьВХранилище = Ложь;
	
	Если НЕ ДополнительныеПараметры = Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Если ДополнительныеПараметры.Свойство("Заказ") И Не НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
			Запрос.УстановитьПараметр("Заказ", ДополнительныеПараметры.Заказ);
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Договор = &Договор", "И Договор = &Договор И Заказ = &Заказ");
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("Номенклатура") Тогда
			
			Запрос.УстановитьПараметр("Номенклатура", ДополнительныеПараметры.Номенклатура);
			
			Если ДополнительныеПараметры.Свойство("Характеристика") Тогда
				Запрос.УстановитьПараметр("Характеристика", ДополнительныеПараметры.Характеристика);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("Партия") Тогда
				Запрос.УстановитьПараметр("Партия", ДополнительныеПараметры.Партия);
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"И ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру),","И ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)
			|				И Характеристика = &Характеристика
			|				И Партия = &Партия) КАК ЗапасыПереданныеОстатки,");
		Иначе
			Если ОчищатьТабЧасть Тогда
				ОчиститьТабличнуюЧасть(Объект, ИмяТабличнойЧасти, КлючСвязи);
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыгрузитьВХранилище") Тогда
			ВыгрузитьВХранилище = ДополнительныеПараметры.ВыгрузитьВХранилище;
		КонецЕсли;
		
	Иначе
		Если ОчищатьТабЧасть Тогда
			ОчиститьТабличнуюЧасть(Объект, ИмяТабличнойЧасти, КлючСвязи);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыгрузитьВХранилище Тогда
		Возврат ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), Новый УникальныйИдентификатор);
	Иначе
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецФункции

// Заполняет количество номенклатуры в табличной части остатками у комиссионера
//
Процедура РаспределитьНоменклатуруПоЗаказам(Форма, ДополнительныеПараметры = Неопределено, ИмяТабличнойЧасти = "Запасы", КлючСвязи = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	ЭтоОтчетКомиссионера = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера"), Истина, Ложь);
	ЭтоПереоценка = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПереоценкаТоваровНаКомиссии"), Истина, Ложь);
	
	ТабличнаяЧастьОбъекта = Объект[ИмяТабличнойЧасти];
	
	Если ЭтоОтчетКомиссионера Тогда
		ПараметрыОтбора = Новый Структура("КлючСвязи", КлючСвязи);
		ТабличнаяЧасть = Объект[ИмяТабличнойЧасти].Выгрузить(ПараметрыОтбора);
	Иначе
		ТабличнаяЧасть = Объект[ИмяТабличнойЧасти].Выгрузить();
	КонецЕсли;
	
	ТаблицаОстатков = ТаблицаОстатковТоваровУКомиссионера(Объект, ДополнительныеПараметры, ИмяТабличнойЧасти, КлючСвязи);
	
	ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Партия");
	
	СтрокиКУдалению = Новый Массив;
	
	ИмяКолонкиЗаказ = "Заказ";
	Если ЭтоОтчетКомиссионера Тогда
		ИмяКолонкиЗаказ = "ЗаказПокупателя";
	КонецЕсли;
	
	ОчиститьКолонкуЗаказ(ТабличнаяЧасть, ИмяКолонкиЗаказ);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда Продолжить КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда Продолжить КонецЕсли;
		
		ПараметрыОтбора.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		ПараметрыОтбора.Характеристика = СтрокаТабличнойЧасти.Характеристика;
		ПараметрыОтбора.Партия = СтрокаТабличнойЧасти.Партия;
		
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбора);
		
		Если Не НайденныеСтроки.Количество() Тогда
			НоваяСтрока = ТабличнаяЧастьОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			Продолжить
		КонецЕсли;
		
		СуммаВознаграждения = 0;
		Если ЭтоОтчетКомиссионера Тогда 
			СтрокаТабличнойЧасти.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
			СтавкаНДСВознаграждения = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
			СуммаВознаграждения = СтрокаТабличнойЧасти.СуммаВознаграждения;
		КонецЕсли;
		
		КоличествоДляРаспределения = СтрокаТабличнойЧасти.Количество;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НайденнаяСтрока.Количество = 0 Тогда 
				Продолжить 
			КонецЕсли;
			
			НоваяСтрока = ТабличнаяЧастьОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			
			Если ЭтоОтчетКомиссионера Тогда
				НоваяСтрока.СуммаВознаграждения = СуммаВознаграждения;
			КонецЕсли;
			
			СуммыРасчитаны = Ложь;
			Если КоличествоДляРаспределения >= НайденнаяСтрока.Количество Тогда
				
				НоваяСтрока.Количество = НайденнаяСтрока.Количество;
				НоваяСтрока[ИмяКолонкиЗаказ] = НайденнаяСтрока.ЗаказПокупателя;
				
				Если ЭтоОтчетКомиссионера Тогда
					НоваяСтрока.ЦенаПередачи = Окр(НайденнаяСтрока.СуммаРасчетов/НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НоваяСтрока.СуммаПередачи = Окр(НоваяСтрока.ЦенаПередачи*НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					
					СуммаРасчетовОстаток = НайденнаяСтрока.СуммаРасчетов;
					НайденнаяСтрока.СуммаРасчетов = СуммаРасчетовОстаток - НоваяСтрока.СуммаПередачи;
					
					РассчитатьСуммуВСтрокеТабличнойЧастиЗапасыОтчетКомиссионера(Объект, Неопределено, НоваяСтрока, Истина);
					
					Если НайденнаяСтрока.СуммаРасчетов < 0.01 Тогда
						НайденнаяСтрока.СуммаРасчетов = 0;
						НоваяСтрока.СуммаПередачи = СуммаРасчетовОстаток;
					КонецЕсли;
					
				ИначеЕсли ЭтоПереоценка Тогда
					НоваяСтрока.ЦенаСтарая = Окр(НайденнаяСтрока.СуммаРасчетов/НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НоваяСтрока.СуммаСтарая = Окр(НоваяСтрока.ЦенаСтарая*НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НайденнаяСтрока.СуммаРасчетов = НайденнаяСтрока.СуммаРасчетов - НоваяСтрока.СуммаСтарая;
				Иначе
					НоваяСтрока.Цена = Окр(НайденнаяСтрока.СуммаРасчетов/НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НоваяСтрока.Сумма = Окр(НоваяСтрока.Цена*НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НайденнаяСтрока.СуммаРасчетов = НайденнаяСтрока.СуммаРасчетов - НоваяСтрока.Сумма;
				КонецЕсли;
				
				КоличествоДляРаспределения = КоличествоДляРаспределения - НоваяСтрока.Количество;
				НайденнаяСтрока.Количество = 0;
				НайденнаяСтрока.СуммаРасчетов = 0;
				
			Иначе
				НоваяСтрока[ИмяКолонкиЗаказ] = НайденнаяСтрока.ЗаказПокупателя;
				НоваяСтрока.Количество = КоличествоДляРаспределения;
				
				Если ЭтоОтчетКомиссионера Тогда
					НоваяСтрока.ЦенаПередачи = Окр(НайденнаяСтрока.СуммаРасчетов/НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НоваяСтрока.СуммаПередачи = Окр(НоваяСтрока.ЦенаПередачи*НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НайденнаяСтрока.СуммаРасчетов = НайденнаяСтрока.СуммаРасчетов - НоваяСтрока.СуммаПередачи;
					РассчитатьСуммуВСтрокеТабличнойЧастиЗапасыОтчетКомиссионера(Объект, Неопределено, НоваяСтрока, Истина);
				ИначеЕсли ЭтоПереоценка Тогда
					НоваяСтрока.ЦенаСтарая = Окр(НайденнаяСтрока.СуммаРасчетов/НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НоваяСтрока.СуммаСтарая = Окр(НоваяСтрока.ЦенаСтарая*НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НайденнаяСтрока.СуммаРасчетов = НайденнаяСтрока.СуммаРасчетов - НоваяСтрока.СуммаСтарая;
				Иначе
					НоваяСтрока.Цена = Окр(НайденнаяСтрока.СуммаРасчетов/НайденнаяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НоваяСтрока.Сумма = Окр(НоваяСтрока.Цена*НоваяСтрока.Количество, 2, РежимОкругления.Окр15как20);
					НайденнаяСтрока.СуммаРасчетов = НайденнаяСтрока.СуммаРасчетов - НоваяСтрока.Сумма;
				КонецЕсли;
				
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - НоваяСтрока.Количество;
				КоличествоДляРаспределения = 0;
				
			КонецЕсли;
			
			Если ЭтоОтчетКомиссионера Тогда
				
				Если НоваяСтрока.СуммаВознаграждения > НоваяСтрока.Сумма Тогда
					НоваяСтрока.СуммаВознаграждения = НоваяСтрока.Сумма;
				Иначе
					НоваяСтрока.СуммаВознаграждения = СуммаВознаграждения;
				КонецЕсли;
				
				НоваяСтрока.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
				НоваяСтрока.СуммаВознаграждения - (НоваяСтрока.СуммаВознаграждения) / ((СтавкаНДСВознаграждения + 100) / 100),
				НоваяСтрока.СуммаВознаграждения * СтавкаНДСВознаграждения / 100);
				
				СуммаВознаграждения = СуммаВознаграждения - НоваяСтрока.СуммаВознаграждения;
				
				РассчитатьКомиссионноеВознаграждениеЗапасыОтчетКомиссионера(Объект, НоваяСтрока);
				НоваяСтрока.КлючСвязи = КлючСвязи;
				
				НоваяСтрока.СпособРаспределения = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную; 
			КонецЕсли;
			
			Если НайденнаяСтрока.Количество = 0 Тогда
				СтрокиКУдалению.Добавить(НайденнаяСтрока);
			КонецЕсли;
			
			Если КоличествоДляРаспределения = 0 Тогда
				
				Если ЭтоОтчетКомиссионера Тогда
					Если СуммаВознаграждения > 0 Тогда
						
						НоваяСтрока.СуммаВознаграждения = НоваяСтрока.СуммаВознаграждения + СуммаВознаграждения;
						
						НоваяСтрока.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
						НоваяСтрока.СуммаВознаграждения - (НоваяСтрока.СуммаВознаграждения) / ((СтавкаНДСВознаграждения + 100) / 100),
						НоваяСтрока.СуммаВознаграждения * СтавкаНДСВознаграждения / 100);
						
						СуммаВознаграждения = 0;
						
					КонецЕсли;
				КонецЕсли;
				
				Прервать 
			КонецЕсли;
				
		КонецЦикла;
		
		ЭтоСтрокаРодитель = Ложь;
			
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаОстатков.Удалить(СтрокаКУдалению);
		КонецЦикла;
		СтрокиКУдалению.Очистить();
			
		КонецЦикла;
		
КонецПроцедуры

// Рассчитывает суммы в строке Табличной части "Запасы" документа "Отчет комиссионера"
//
Процедура РассчитатьСуммуВСтрокеТабличнойЧастиЗапасыОтчетКомиссионера(Объект, ИспользоватьСерииНоменклатурыОстатки, СтрокаТабличнойЧасти, РассчитыватьСуммуПередачи = Ложь) Экспорт
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	Если РассчитыватьСуммуПередачи Тогда
		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПередачи;
	КонецЕсли;
	
	РассчитатьСуммуНДС(Объект, СтрокаТабличнойЧасти);
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДСПередачи = ?(Объект.СуммаВключаетНДС,
	СтрокаТабличнойЧасти.СуммаПередачи - (СтрокаТабличнойЧасти.СуммаПередачи) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.СуммаПередачи * СтавкаНДС / 100);
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДС) Тогда
		СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	КонецЕсли;
		
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	Если ИспользоватьСерииНоменклатурыОстатки = Неопределено Тогда
		ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	КонецЕсли;
	
	// Серии номенклатуры
	Если ИспользоватьСерииНоменклатурыОстатки<>Неопределено Тогда
		СерииНоменклатурыУНФКлиентСервер.ОбновитьСерииНоменклатурыКоличество(Объект, СтрокаТабличнойЧасти,,"КлючСвязиСерииНоменклатуры");
	КонецЕсли;

КонецПроцедуры

// Рассчитывает сумму комиссионного вознаграждения в строке Табличной части "Запасы" документа "Отчет комиссионера"
//
Процедура РассчитатьКомиссионноеВознаграждениеЗапасыОтчетКомиссионера(Объект, СтрокаТабличнойЧасти) Экспорт
	
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
	
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;
	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления Тогда
		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;
	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
	
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
													СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
													
КонецПроцедуры

// Проверяет соответствие договора параметрам документа
//
Функция ДоговорСоответствуетДокументу(Объект) Экспорт
	
	ТекстСообщения = "";
	
	Если Не Объект.Договор.Организация = Объект.Организация Тогда
		ТекстСообщения = НСтр("ru = 'Организация договора не соответствует организации документа '");
	КонецЕсли;
	
	Если Не Объект.Договор.ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером Тогда
		
		ТекстСообщения = ?(Не ЗначениеЗаполнено(ТекстСообщения), ТекстСообщения, ТекстСообщения +"
		|");
		
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Реквизиты договора не соответствуют условиям документа:
 		| - Не совпадает вид договора. Для выбора доступны договоры следующих видов:""С комиссионером""'");
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращает признак наличия в табличной части комиссионной партии
//
// Параметры:
//   Объект - Документ - проверяемый документ
//
// Возвращаемое значение:
//   Булево - признак наличия комиссионной партии
//
Функция ВТабличнойЧастиЕстьКомиссионнаяПартия(Объект, ИмяТабличнойЧасти = "Запасы") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемаяТаблица = Объект[ИмяТабличнойЧасти];
	
	Для Каждого СтрокаТаблицы Из ПроверяемаяТаблица Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Партия) Тогда
			Продолжить
		КонецЕсли;
		
		СтатусПартии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Партия, "Статус");
		
		Если СтатусПартии = Перечисления.СтатусыПартий.ТоварыНаКомиссии Тогда
			Возврат Истина
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак наличия в табличной части комиссионной партии c типом налогообложения с НДС
//
// Параметры:
//   Объект - Документ - проверяемый документ
//
// Возвращаемое значение:
//   Булево - признак наличия комиссионной партии
//   ИмяТабличнойЧасти - имя табличной части документа в которой осуществляется поиск
//
Функция ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложениемНДС(Объект, ИмяТабличнойЧасти = "Запасы") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		ПроверяемаяТаблица = Новый ТаблицаЗначений;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ПартииНоменклатуры"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		ПроверяемаяТаблица.Колонки.Добавить("Партия", ОписаниеТипов);

		Для Каждого ЭлементМассива Из Объект Цикл
			НоваяСтрока = ПроверяемаяТаблица.Добавить();
			НоваяСтрока.Партия = ЭлементМассива;
		КонецЦикла
	Иначе
		ПроверяемаяТаблица = Объект[ИмяТабличнойЧасти];
		ПроверяемаяТаблица = ПроверяемаяТаблица.Выгрузить(, "Партия");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ Партии ИЗ &ПроверяемаяТаблица КАК Партии";
	
	Запрос.УстановитьПараметр("ПроверяемаяТаблица", ПроверяемаяТаблица);
	Запрос.Выполнить();
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Партии.Партия КАК Справочник.ПартииНоменклатуры) КАК Партия
	|ПОМЕСТИТЬ ВТПартии
	|ИЗ
	|	Партии КАК Партии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТПартии.Партия КАК Партия
	|ИЗ
	|	ВТПартии КАК ВТПартии
	|ГДЕ
	|	ВТПартии.Партия.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|	И ВТПартии.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает признак наличия в табличной части комиссионной партии c типом налогообложения
//
// Параметры:
//   Объект - Документ - проверяемый документ
//
// Возвращаемое значение:
//   Булево - признак наличия комиссионной партии
//   ИмяТабличнойЧасти - имя табличной части документа в которой осуществляется поиск
//
Функция ВТабличнойЧастиЕстьКомиссионнаяПартияСНалогообложением(Объект, ИмяТабличнойЧасти = "Запасы") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		ПроверяемаяТаблица = Новый ТаблицаЗначений;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ПартииНоменклатуры"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		ПроверяемаяТаблица.Колонки.Добавить("Партия", ОписаниеТипов);

		Для Каждого ЭлементМассива Из Объект Цикл
			НоваяСтрока = ПроверяемаяТаблица.Добавить();
			НоваяСтрока.Партия = ЭлементМассива;
		КонецЦикла
	Иначе
		ПроверяемаяТаблица = Объект[ИмяТабличнойЧасти];
		ПроверяемаяТаблица = ПроверяемаяТаблица.Выгрузить(, "Партия");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ Партии ИЗ &ПроверяемаяТаблица КАК Партии";
	
	Запрос.УстановитьПараметр("ПроверяемаяТаблица", ПроверяемаяТаблица);
	Запрос.Выполнить();
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Партии.Партия КАК Справочник.ПартииНоменклатуры) КАК Партия
	|ПОМЕСТИТЬ ВТПартии
	|ИЗ
	|	Партии КАК Партии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТПартии.Партия КАК Партия
	|ИЗ
	|	ВТПартии КАК ВТПартии
	|ГДЕ
	|	НЕ ВТПартии.Партия.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	И ВТПартии.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Корректирует ставку НДС комиссионного товара
//
// Параметры:
//   СтруктураДанные - Структура данных номенклатуры
//   ИмяПоляСтавкаНДС - Имя поля для корректировки
//
Процедура СкорректироватьСтавкуНДСКомиссионногоТовара(СтруктураДанные, ИмяПоляСтавкаНДС = "СтавкаНДС") Экспорт
	
	Если Не СтруктураДанные.Свойство("НалогообложениеНДС") Тогда 
		Возврат
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		Возврат;
	КонецЕсли;

	Если Не СтруктураДанные.Свойство("Партия") Или Не СтруктураДанные.Свойство(ИмяПоляСтавкаНДС) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидОперации") И ЭтоВозвратРасходнаяНакладная(СтруктураДанные.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаБезНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	Партия = СтруктураДанные.Партия;
	Если ЗначениеЗаполнено(Партия) 
		И Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии
		И ЗначениеЗаполнено(Партия.НалогообложениеНДС) Тогда
		
		Если Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
			Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
				СтруктураДанные.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС);
			Иначе
				СтруктураДанные.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию);
			КонецЕсли;
			
		ИначеЕсли Партия.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.СтавкаНДС = СтавкаБезНДС;
		КонецЕсли;
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС
			И Не СтруктураДанные.СтавкаНДС = СтавкаБезНДС Тогда
			СтруктураДанные.ТребуетсяИзменениеНалогообложениеНаСНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак операции возврата для Расходной накладной
//
// Параметры:
//   ВидОперации - Перечисление - вид операции документа
//
// Возвращаемое значение:
//   Булево - признак операции возврата
//
Функция ЭтоВозвратРасходнаяНакладная(ВидОперации) Экспорт
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения");
	
КонецФункции

// Заполняет поля табличной части признаками комиссионных партий с НДС
//
// Параметры:
//  Объект - Объект заполнения
//  ДополнительныеСвойства - Дополнительные свойства заполнения серий
//
Процедура ЗаполнитьПризнакиКомиссионныхПартийСНДС(Объект, ДополнительныеСвойства = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		Возврат;
	КонецЕсли;
	
	ПоддерживаемыеТипыДокументов = МассивТиповДокументовДляПроверкиКомиссииСНДС();
	
	Если ПоддерживаемыеТипыДокументов.Найти(ТипЗнч(Объект.Ссылка)) = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		КопияТабличнойЧастиДляПроверки = Объект.Запасы.Выгрузить(Новый Структура());
		КолонкаКомиссияСНДС = КопияТабличнойЧастиДляПроверки.Колонки.Найти("КомиссияСНДС");
		
		Если КолонкаКомиссияСНДС = Неопределено Тогда
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	
	МассивПартий = Объект.Запасы.Выгрузить(,"Партия");
	МассивПартий.Свернуть("Партия");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПартий", МассивПартий);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартииНоменклатуры.Ссылка КАК Партия,
	|	ВЫБОР
	|		КОГДА ПартииНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				И ПартииНоменклатуры.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КомиссияСНДС
	|ИЗ
	|	Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
	|ГДЕ
	|	ПартииНоменклатуры.Ссылка В(&МассивПартий)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыПоиска = Новый Структура("Партия");
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПоиска.Партия = Выборка.Партия;
		СтрокиЗапасов = Объект.Запасы.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого СтрокаЗапасов Из СтрокиЗапасов Цикл
			СтрокаЗапасов.КомиссияСНДС = Выборка.КомиссияСНДС;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак наличия в табличной части комиссионной партии без указанного владельца
//
// Параметры:
//   Объект - Документ - проверяемый документ
//   ИмяТабличнойЧасти - имя табличной части документа в которой осуществляется поиск
//
// Возвращаемое значение:
//   Булево - признак наличия комиссионной партии без владельца
//
Функция ВТабличнойЧастиЕстьКомиссионнаяПартияБезВладельца(Объект, ИмяТабличнойЧасти = "Запасы") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемаяТаблица = Неопределено;
	МассивДокументов = Ложь;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		
		ПроверяемаяТаблица = Объект[ИмяТабличнойЧасти];
		ПроверяемаяТаблица = ПроверяемаяТаблица.Выгрузить(, "НомерСтроки, Партия");
		
	КонецЕсли;
		
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеВКассу")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходИзКассы")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		
		ПроверяемаяТаблица = ТаблицаПартияПоДокументамРасчетов(Объект);
		МассивДокументов = Истина;
		
	КонецЕсли;

	Если ПроверяемаяТаблица = Неопределено Тогда
		Возврат Ложь
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ Партии ИЗ &ПроверяемаяТаблица КАК Партии";
	
	Запрос.УстановитьПараметр("ПроверяемаяТаблица", ПроверяемаяТаблица);
	Запрос.Выполнить();
	
	Если МассивДокументов Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Партии.Партия КАК Справочник.ПартииНоменклатуры) КАК Партия,
		|	Партии.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПартии
		|ИЗ
		|	Партии КАК Партии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПартии.Партия КАК Партия,
		|	ВТПартии.Ссылка КАК Ссылка
		|ИЗ
		|	ВТПартии КАК ВТПартии
		|ГДЕ
		|	ВТПартии.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|	И ВТПартии.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Партии.Партия КАК Справочник.ПартииНоменклатуры) КАК Партия,
		|	Партии.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТПартии
		|ИЗ
		|	Партии КАК Партии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПартии.Партия КАК Партия,
		|	ВТПартии.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТПартии КАК ВТПартии
		|ГДЕ
		|	ВТПартии.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|	И ВТПартии.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отказ = Ложь;

	Если МассивДокументов Тогда
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В документе %1 у комиссионной партии %2 не заполнен владелец.'"), Строка(Выборка.Ссылка), Строка(Выборка.Партия));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЦикла;
		
	Иначе
		
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 у комиссионной партии не заполнен владелец.'"), Выборка.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаПартияПоДокументамРасчетов(Объект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументовРасчетов", Объект.РасшифровкаПлатежа.Выгрузить(,"Документ"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтИтог
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказПокупателяЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И ЗаказПокупателяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И ЗаказПокупателяЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступленияЗапасы.Партия,
	|	КорректировкаПоступленияЗапасы.Ссылка
	|ИЗ
	|	Документ.КорректировкаПоступления.Запасы КАК КорректировкаПоступленияЗапасы
	|ГДЕ
	|	КорректировкаПоступленияЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И КорректировкаПоступленияЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И КорректировкаПоступленияЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииЗапасы.Партия,
	|	КорректировкаРеализацииЗапасы.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
	|ГДЕ
	|	КорректировкаРеализацииЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И КорректировкаРеализацииЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И КорректировкаРеализацииЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомиссионераЗапасы.Партия,
	|	ОтчетКомиссионераЗапасы.Ссылка
	|ИЗ
	|	Документ.ОтчетКомиссионера.Запасы КАК ОтчетКомиссионераЗапасы
	|ГДЕ
	|	ОтчетКомиссионераЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И ОтчетКомиссионераЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И ОтчетКомиссионераЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомитентуЗапасы.Партия,
	|	ОтчетКомитентуЗапасы.Ссылка
	|ИЗ
	|	Документ.ОтчетКомитенту.Запасы КАК ОтчетКомитентуЗапасы
	|ГДЕ
	|	ОтчетКомитентуЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И ОтчетКомитентуЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И ОтчетКомитентуЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОПереработкеЗапасы.Партия,
	|	ОтчетОПереработкеЗапасы.Ссылка
	|ИЗ
	|	Документ.ОтчетОПереработке.Запасы КАК ОтчетОПереработкеЗапасы
	|ГДЕ
	|	ОтчетОПереработкеЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И ОтчетОПереработкеЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И ОтчетОПереработкеЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетПереработчикаЗапасы.Партия,
	|	ОтчетПереработчикаЗапасы.Ссылка
	|ИЗ
	|	Документ.ОтчетПереработчика.Запасы КАК ОтчетПереработчикаЗапасы
	|ГДЕ
	|	ОтчетПереработчикаЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И ОтчетПереработчикаЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И ОтчетПереработчикаЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Партия,
	|	ПриходнаяНакладнаяЗапасы.Ссылка
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И ПриходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И ПриходнаяНакладнаяЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Партия,
	|	РасходнаяНакладнаяЗапасы.Ссылка
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И РасходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И РасходнаяНакладнаяЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.Партия,
	|	ЧекККМЗапасы.Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|ГДЕ
	|	ЧекККМЗапасы.Ссылка В(&МассивДокументовРасчетов)
	|	И ЧекККМЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|	И ЧекККМЗапасы.Партия.ВладелецПартии = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтИтог.Партия КАК Партия,
	|	ВтИтог.Ссылка КАК Ссылка
	|ИЗ
	|	ВтИтог КАК ВтИтог";
	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОчиститьТабличнуюЧасть(Объект, ИмяТабличнойЧасти, КлючСвязи = Неопределено)
	
	Если КлючСвязи = Неопределено Тогда
		Объект[ИмяТабличнойЧасти].Очистить();
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("КлючСвязи", КлючСвязи);
	
	НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект[ИмяТабличнойЧасти].Удалить(НайденнаяСтрока.НомерСтроки -1);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьКолонкуЗаказ(ТабличнаяЧасть, ИмяКолонкиЗаказ)
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СтрокаТабличнойЧасти[ИмяКолонкиЗаказ] = Неопределено
	КонецЦикла;
КонецПроцедуры

Процедура РассчитатьСуммуНДС(Объект, СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если Объект.СуммаВключаетНДС Тогда
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100;
	КонецЕсли;
	
КонецПроцедуры

Функция МассивТиповДокументовДляПроверкиКомиссииСНДС()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЧекККМ"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

