#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.165";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.206";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("bf0e44ef-e92b-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ИнициализироватьРолиИсполнителейЗадач";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление ролей исполнителей задач.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.15.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("5295d003-f66e-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьПубликациюПравНаВычеты";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикации прав на вычеты.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.16.9";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.16.42";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a518af76-0896-11eb-8108-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника";
	Обработчик.Комментарий     = НСтр("ru = 'Настройка регламентного задания Проверка состояния сервиса ""1С:Кабинет сотрудника"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.85";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.УстановитьВерсияИзмененийКабинетСотрудника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.7";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f0f899de-ffd3-4f35-8dda-017425bd0e67");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеНастроекСервиса";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление настроек сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.32";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("1a994315-b6ba-4fad-857b-c43cb900ddaf");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеНастроекСервисаВерсии303";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление настроек сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a6ae4155-996e-40bb-b4ee-7854d960aba3");
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьСобытиеСотрудникиДляОбновленияПубликуемыхОбъектов";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение события в ""Сотрудники для обновления публикуемых объектов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.91";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ec985970-fd7d-4382-ba93-be8ae07623de");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьФункциональностьСервисаПриИспользованииКЭДО";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление используемой функциональности сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.21.63";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("92fc10bf-5ec9-422c-b73e-75f148786586");
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьСодержимоеДокументаКЭДОРасчетныхЛистков";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по расчетным листкам.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.22.21";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("4a4010a6-0de3-47c1-9395-856281e05ae1");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьПроверкуОзнакомленияСРасчетнымиЛистками";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация проверки ознакомления с расчетными листками.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.57";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("96515a13-fec5-405f-9da2-fefeb3aa0db5");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеУволенныхСотрудников";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления физических лиц в сервисе 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия		   = "3.1.24.8";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура	   = "КабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.24.13";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьОбъектыСОшибкамиЗаполнения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.13";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("c843cd59-a9cd-4677-b342-69f8bb754f07");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеФункциональностиСервиса";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления функциональности сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.14";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9b76b382-ba92-4154-8b2a-7bc684798633");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбработчикОбновленияФизическихЛиц";
	Обработчик.Комментарий     = НСтр("ru = 'Проверка заполнения данных физических лиц, публикуемых в сервисе.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.18";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.ПроверитьВерсиюФормата";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.133";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("dd585e79-82f5-4402-b08d-d4393a1c2710");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеУровеньДоступаКИ";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления уровней доступа к контактной информации в сервисе 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьИсключенияИзПравил"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.8";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("81df590d-aff6-4c30-b04f-b041119f55da");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбработчикОбновленияРуководителей";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация  обновления руководителей в сервисе 1С:Кабинет сотрудника.'");
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеДоступностиДанных

Функция ДоступноИзменениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

Функция ДоступноЧтениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетныеЛисткиКабинетСотрудника, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника
	|РегистрСведений.РасчетныеЛисткиКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.РасчетныеЛисткиКабинетСотрудника.Чтение.Организации";
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработатьНовыеОбсужденияКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуютсяОбсужденияКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	КабинетСотрудникаВнутренний.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбработатьНовыеОбсужденияКабинетСотрудника.Имя);
	
	КабинетСотрудникаВнутренний.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбработатьНовыеОбсужденияКабинетСотрудника.ИмяМетода);
	
	КабинетСотрудникаВнутренний.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		
		Если Не Форма.Параметры.Свойство("ПодписаниеПечатныхФорм") Тогда
			
			ИмяКоманды = ИмяКомандыПодписатьФормыПечатьДокументов();
			
			КомандаФормы = КомандаПодписатьФормыПечатьДокументов(Форма);
			Если КомандаФормы = Неопределено Тогда
				
				СвойстваКоманды = СвойстваКомандыПередачиВКабинетСотрудника();
				
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
				КомандаФормы.Заголовок = СвойстваКоманды.Заголовок;
				КомандаФормы.Подсказка = СвойстваКоманды.Подсказка;
				КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
				КомандаФормы.Картинка = СвойстваКоманды.Картинка;
				
				КнопкаФормы = КадровыйЭДО.РазместитьКомандуНаФормеПечатьДокументов(Форма, КомандаФормы);
				Если КнопкаФормы <> Неопределено Тогда
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
					КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваКомандыПередачиВКабинетСотрудника() Экспорт
	Возврат Новый Структура("Заголовок,Подсказка,Картинка",
		НСтр("ru = 'Передать в ""1С:Кабинет сотрудника""'"),
		НСтр("ru = 'Подписать и передать в ""1С:Кабинет сотрудника""'"),
		БиблиотекаКартинок.СервисКабинетСотрудника);
КонецФункции

Функция ИмяКомандыПодписатьФормыПечатьДокументов()
	Возврат "ПередатьПодписанныеPDFВСервисКабинетСотрудника";
КонецФункции

Функция КомандаПодписатьФормыПечатьДокументов(Форма) Экспорт
	Возврат Форма.Команды.Найти(ИмяКомандыПодписатьФормыПечатьДокументов());
КонецФункции

// Устанавливает значение для ФО ПоказыватьПриглашениеКабинетСотрудника
//	Параметры:
//		ВыполняетсяНачальнаяНастройка - Булево;
//		ИспользуетсяСервисКабинетСотрудника - Булево.
Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника(Знач ВыполняетсяНачальнаяНастройка = Неопределено,
																   Знач ИспользуетсяСервисКабинетСотрудника = Неопределено) Экспорт
															   
	Если ВыполняетсяНачальнаяНастройка = Неопределено Тогда 
		 Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
			 Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
			 ВыполняетсяНачальнаяНастройка = Модуль.ВыполняетсяНачальнаяНастройкаПрограммы();
		 Иначе
			 ВыполняетсяНачальнаяНастройка = Ложь;
		 КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяСервисКабинетСотрудника = ?(ИспользуетсяСервисКабинетСотрудника <> Неопределено, ИспользуетсяСервисКабинетСотрудника,
																								 ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника"));
	ПоказыватьПриглашениеКабинетаСотрудника = НЕ (ВыполняетсяНачальнаяНастройка ИЛИ ИспользуетсяСервисКабинетСотрудника);
	
	Если ПоказыватьПриглашениеКабинетаСотрудника <> Константы.ПоказыватьПриглашениеКабинетСотрудника.Получить() Тогда
		Константы.ПоказыватьПриглашениеКабинетСотрудника.Установить(ПоказыватьПриглашениеКабинетаСотрудника);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение для ФО ПоказыватьПриглашениеКабинетСотрудника для базовой версии
//
Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии() Экспорт

	Если ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации() Тогда
		УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение настройки ИспользуетсяКадровыйЭДО.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ИспользуетсяКадровыйЭДО() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");

КонецФункции

Функция ФайлРасчетногоЛисткаОпубликован(ДокументКадровогоЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументКадровогоЭДО", ДокументКадровогоЭДО);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛисткиКабинетСотрудника
		|ГДЕ
		|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО = &ДокументКадровогоЭДО";
	
	Возврат Не Запрос.Выполнить().Пустой()
	
КонецФункции

// Возвращает текущую версию формата обмена.
//
// 	Возвращаемое значение:
// 		Строка - строка формата х.х
//
Функция ВерсияФормата() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Настройки.ВерсияФормата;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПубликацияОтветственногоЛица

Процедура ОпубликоватьОтветственноеЛицоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СообщениеОбОшибке");
	
	БылиОшибки = ЗарегистрироватьОпубликоватьОтветственного(Параметры.Ответственный);
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = НСтр("ru='Не удалось опубликовать ответственное лицо.'");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ЗарегистрироватьОпубликоватьОтветственного(Ответственный) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// Регистрируем ответственного к публикации.
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ответственный);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Ответственный);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Ссылка = Ответственный;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат КабинетСотрудникаМенеджерОбмена.РезультатПубликацииФизическогоЛица(Ответственный);

КонецФункции

#КонецОбласти

#Область РаботаСКлючамиПриложения

Функция ЕстьКлючиПриложения() Экспорт
	
	Возврат (КлючиПриложенияИзБезопасногоХранилища() <> Неопределено);
	
КонецФункции

Функция КлючиПриложенияИзБезопасногоХранилища() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Приложение.Ключи",
		"ИдентификаторКлиента,СекретКлиента");
	УстановитьПривилегированныйРежим(Ложь);

	Если ДанныеВБезопасномХранилище.ИдентификаторКлиента <> Неопределено
		И ДанныеВБезопасномХранилище.СекретКлиента <> Неопределено Тогда
		Возврат Новый Структура(
			"ИдентификаторКлиента,СекретКлиента",
			ДанныеВБезопасномХранилище.ИдентификаторКлиента,
			ДанныеВБезопасномХранилище.СекретКлиента);
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции

Функция КлючиПриложенияАктуальные() Экспорт

	Ответ = КабинетСотрудникаМенеджерОбмена.ПроверкаАвторизации();
	Если Ответ.НеактуальныеКлючи Тогда
		// ключи не актуальны, удаляем токен, если он сохранен
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Токен");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	Возврат Не Ответ.НеактуальныеКлючи;

КонецФункции

Процедура СохранитьКлючиПриложенияВБезопасномХранилище(ИдентификаторКлиента, СекретКлиента) Экспорт

	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Ключи",ИдентификаторКлиента, "ИдентификаторКлиента");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Ключи",СекретКлиента, "СекретКлиента");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПравиламиПубликации

Процедура ОбновитьСведенияОПубликацииФизическихЛиц(ФизическиеЛица) Экспорт

	Если Не ЗначениеЗаполнено(ФизическиеЛица) Или Не ПравилаВыгрузкиЗаданы() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Сотрудники.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ФизическиеЛица.Ссылка = Сотрудники.ФизическоеЛицо
	|			И (Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник)
	|			И (НЕ Сотрудники.ПометкаУдаления)
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)";
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	ИнтеграцияУправлениеПерсоналом.ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников, Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	
	Если ИнтеграцияУправлениеПерсоналом.ОбновлятьРуководителейПриСменеРуководителяОрганизации() Тогда
		Организации = ОрганизацииГдеФизическиеЛицаРуководители(ФизическиеЛица);
		Подразделения = ПодразделенияДляОбновленияРуководителя(Организации);
		Если ЗначениеЗаполнено(Подразделения) Тогда
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
				ЭлементБлокировки.ИсточникДанных = Подразделения;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
				Блокировка.Заблокировать();
				Для каждого СтрокаТЗ Из Подразделения Цикл
					МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
					МенеджерЗаписи.Записать();
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегистрацияПубликуемыхОбъектов

Процедура РегистрацияПовторнойПубликацииДокументовКЭДО(ИдентификаторыДокументов) Экспорт
	
	Если Не ИспользоватьФормат503() Или Не ЗначениеЗаполнено(ИдентификаторыДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДокументНаПодпись) КАК ТипОбъекта
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл 
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
				МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
				МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(Выборка.Ссылка, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбъектДляУдаленияИзСервиса(Ссылка, ТипОбъекта) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ссылка = Ссылка;
		МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
		МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.ВыгружатьУдаление = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибкуРегистрацииИзменений(Ссылка, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеОбменаССервисом

// Процедура регламентного задания ОбменССервисомКабинетСотрудника
//
Процедура ОбменССервисомКабинетСотрудника() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника);
	Если ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияПубликации()) Тогда
		Возврат;
	КонецЕсли;
	
	Если СервисЗаблокирован() Тогда
		// Сервис заблокирован.
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не Настройки.ВыполнятьРегламентноеЗадание Тогда
		// Реализации паузы первого запуска регламентного задания.
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.ВключитьВыполнениеРегламентногоЗадания();
		Возврат;
	КонецЕсли;
	
	БылиОшибки = КабинетСотрудникаМенеджерОбмена.РезультатВыполненияОбмена(Ложь);
	
	Если БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Обмен данными с сервисом 1С:Кабинет сотрудника завершен с ошибками.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбменССервисомФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки", Ложь);
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал обмен.
	УстановитьПривилегированныйРежим(Истина);
	
	Результат.БылиОшибки = КабинетСотрудникаМенеджерОбмена.РезультатВыполненияОбмена(Параметры.ПодготовитьДанныеДляТехПоддержки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция КлючФоновогоЗаданияПубликации() Экспорт

	Возврат "ПубликацияВСервисе";

КонецФункции

Функция ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗадания)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ",      КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Возврат (АктивныеФоновыеЗадания.Количество() > 0);
	
КонецФункции

#КонецОбласти

#Область ПубликацияРасчетныхЛистков

// Публикация расчетных листков из формы публикации.
Процедура ОпубликоватьРасчетныеЛистыВФоне(Параметры, АдресХранилища) Экспорт
	
	// Параметры ПодготовитьДанныеДляТехПоддержки, ДатаНачала, ДатаОкончания
	// используются для получения списка событий журнала регистрации при подготовке
	// данных для техподдержки.
	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки,ДатаНачала,ДатаОкончания,НеОбработаны,КоличествоВыгружено", Ложь);
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	Результат.ДатаНачала = ТекущаяДатаСеанса();
	
	ФизическиеЛицаОрганизации = Новый Соответствие;
	ФизическиеЛицаОрганизации.Вставить(Параметры.Организация, Параметры.СписокФизическихЛиц);
	
	ДанныеДляПубликации = Новый Соответствие;
	ДанныеДляПубликации.Вставить(Параметры.МесяцРасчетныхЛистов, ФизическиеЛицаОрганизации);
	
	ПараметрыПубликации = КабинетСотрудникаМенеджерОбмена.ПараметрыПубликацииРасчетныхЛистов();
	ПараметрыПубликации.ВестиПротокол 								= Параметры.ПодготовитьДанныеДляТехПоддержки;
	ПараметрыПубликации.ПовторнаяПубликация 						= Параметры.ПовторнаяПубликация;
	ПараметрыПубликации.ПерваяПоловинаМесяца 						= Параметры.ПерваяПоловинаМесяца;
	ПараметрыПубликации.ВариантОтчета 								= Параметры.ВариантОтчета;
	ПараметрыПубликации.ФормироватьРасчетныеЛистыОтдельнымЗапросом 	= Параметры.ФормироватьРасчетныеЛистыОтдельнымЗапросом;
	
	УстановитьПривилегированныйРежим(Истина);
	Ответ = КабинетСотрудникаМенеджерОбмена.РезультатПубликацииРасчетныхЛистков(ДанныеДляПубликации, ПараметрыПубликации);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.ДатаОкончания = ТекущаяДатаСеанса();
	Результат.БылиОшибки = Ответ.БылиОшибки;
	Результат.НеОбработаны = Ответ.НеОбработаны;
	Результат.КоличествоВыгружено = Ответ.КоличествоВыгружено;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Публикация расчетных листков из формы интеграции с сервисом.
Процедура ОпубликоватьРасчетныеЛистыЗаМесяцВФоне(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("БылиОшибки", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|		ПО ФизическиеЛица.Ссылка = ОшибкиЗаполнения.Ссылка
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|			И (ОшибкиЗаполнения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL
	|	И ФизическиеЛица.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
			
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(ПараметрыПроцедуры.Месяц);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(ПараметрыПроцедуры.Месяц);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Организация КАК Организация
	|ИЗ
	|	ВТСотрудникиОрганизации КАК Сотрудники
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо";
	РезультатЗапроса = Запрос.Выполнить();
	
	ФизическиеЛицаОрганизации = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Организация = Выборка.Организация;
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ФизическиеЛицаОрганизации.Вставить(Организация, СписокФизическихЛиц);
		
	КонецЦикла;
	
	ДанныеДляПубликации = Новый Соответствие;
	ДанныеДляПубликации.Вставить(ПараметрыПроцедуры.Месяц, ФизическиеЛицаОрганизации);
	
	Ответ = КабинетСотрудникаМенеджерОбмена.РезультатПубликацииРасчетныхЛистков(
		ДанныеДляПубликации, КабинетСотрудникаМенеджерОбмена.ПараметрыПубликацииРасчетныхЛистовПоУмолчанию());
	Результат.БылиОшибки = Ответ.БылиОшибки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Публикация расчетных листков после подключения к сервису.
Процедура ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков)

	Если ПериодыРасчетныхЛистков.Количество() = 0 Тогда
		Возврат
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыгружаемыеОбъекты.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиКПубликации
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.Ссылка
	|				И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|				И (ОшибкиЗаполнения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|		ПО ВыгружаемыеОбъекты.Ссылка = Сотрудники.Ссылка
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Сотрудники
	|	И ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКПубликации") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляПубликации = Новый Соответствие;
	Для каждого МесяцПубликации Из ПериодыРасчетныхЛистков Цикл
		ФизическиеЛицаОрганизации = ФизическиеЛицаОрганизаций(МесяцПубликации, Запрос.МенеджерВременныхТаблиц);
		ДанныеДляПубликации.Вставить(НачалоМесяца(МесяцПубликации), ФизическиеЛицаОрганизации);
	КонецЦикла;
	
	КабинетСотрудникаМенеджерОбмена.РезультатПубликацииРасчетныхЛистков(
		ДанныеДляПубликации, КабинетСотрудникаМенеджерОбмена.ПараметрыПубликацииРасчетныхЛистовПоУмолчанию());

КонецПроцедуры

Функция ФизическиеЛицаОрганизаций(Месяц, МенеджерВременныхТаблиц)
	
	ФизическиеЛицаПоОрганизациям = Новый Соответствие;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(Месяц);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(Месяц);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Организация КАК Организация,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиКПубликации КАК ПубликуемыеСотрудники
	|		ПО СотрудникиОрганизации.ФизическоеЛицо = ПубликуемыеСотрудники.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО СотрудникиОрганизации.Организация = ПубликуемыеОбъекты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() > 0 Тогда
			ФизическиеЛицаПоОрганизациям.Вставить(Выборка.Организация, СписокФизическихЛиц);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	Запрос.Выполнить();
	
	Возврат ФизическиеЛицаПоОрганизациям;
	
КонецФункции

#КонецОбласти

#Область ПроверкаСостоянияСервиса

// Процедура регламентного задания ПроверкаСостоянияСервисаКабинетСотрудника
Процедура ПроверкаСостоянияСервиса() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	
	ИСДоступна = КабинетСотрудникаМенеджерОбмена.ЗапросСостояниеДоступностиИнформационнойСистемы();
	Если ИСДоступна = Неопределено Тогда
		// Не удалось получить информацию о состоянии ИС.
		Возврат;
	КонецЕсли;
	
	СервисЗаблокирован = Не ИСДоступна;
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьСостояниеБлокировкиСервиса(СервисЗаблокирован);

КонецПроцедуры

Функция СервисЗаблокирован() Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Возврат Настройки.СервисЗаблокирован;

КонецФункции

#КонецОбласти

#Область РаботаСЛокальнымСервисом

Процедура ПодключениеКСервисуЛокальноФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СсылкаДляАдминистратора,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ВерсияПриложения = "";
	ИдентификаторПриложения = "";
	ВерсияФормата = "";
	ВерсияAPI = "";
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.АдресПриложения 		= Параметры.АдресПриложения;
	Настройки.ТребуетсяОбновитьНастройкиФункциональности 	= Истина;
	НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьКлючиПриложенияВБезопасномХранилище(Параметры.ИдентификаторКлиента, Параметры.СекретКлиента);
	УстановитьПривилегированныйРежим(Ложь);
	
	ШаблонСообщения = НСтр("ru='Подключение недоступно. Указаны неверные настройки подключения или недоступно приложение по адресу ""%1"". Обратитесь к вашему администратору.'");
	ТекстСообщенияОбОшибке = СтрШаблон(ШаблонСообщения, Параметры.АдресПриложения);
	
	// Проверка правильности ввода данных настройки сервиса.
	Ответ = КабинетСотрудникаМенеджерОбмена.ПроверкаАвторизации();
	Если Не Ответ.ТокенПолучен Тогда
		Результат.СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Отказ = Истина
	КонецЕсли;
	
	// Версия и идентификатор приложения.
	Если Не Отказ Тогда
		
		Ответ = КабинетСотрудникаМенеджерОбмена.ИнформацияЛокальногоПриложения();
		Если Ответ = Неопределено Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		Иначе
			ВерсияПриложения = Ответ.ВерсияПриложения;
			ИдентификаторПриложения = Ответ.ИдентификаторПриложения;
			Если Не ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
				СообщениеОбОшибке = НСтр("ru='Подключение недоступно. Приложение еще не зарегистрировано, обратитесь к вашему администратору.'");
				Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Версии формата и API.
	Если Не Отказ Тогда
		Ответ = КабинетСотрудникаМенеджерОбмена.ВерсииФорматаЛокальногоПриложения();
		Если Ответ.Использовать = Истина Тогда
			Если ЗначениеЗаполнено(Ответ.ВерсииФормата.ВерсияФормата) Тогда
				ВерсияФормата = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(Ответ.ВерсииФормата.ВерсияФормата, КабинетСотрудникаМенеджерОбмена.ВерсииФорматаОбмена());
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.ВерсииФормата.ВерсияAPI) Тогда
				ВерсияAPI = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(Ответ.ВерсииФормата.ВерсияAPI, КабинетСотрудникаМенеджерОбмена.ВерсииAPI());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка адреса приложения.
	Если Не Отказ Тогда
		
		Если Не КабинетСотрудникаМенеджерОбмена.УстановитьАдресЛокальногоПриложения(Параметры.АдресПриложения) Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Публикация ответственного.
	Если Не Отказ Тогда
		БылиОшибки = ЗарегистрироватьОпубликоватьОтветственного(Параметры.Ответственный);
		Если БылиОшибки Тогда
			Результат.СообщениеОбОшибке = НСтр("ru='Не удалось опубликовать ответственное лицо.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Установка администратора.
	Если Не Отказ Тогда
		
		Ответ = КабинетСотрудникаМенеджерОбмена.УстановитьАдминистратораЛокальногоПриложения(Параметры.ОписаниеАдминистратора);
		Если Ответ.БылиОшибки Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		Иначе
			Результат.СсылкаДляАдминистратора = Ответ.СсылкаДляАдминистратора;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Ключи");
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Токен");
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Настройки.ИдентификаторПриложения 	= ИдентификаторПриложения;
		Настройки.Идентификатор 			= "local";
		Настройки.Ответственный 			= Параметры.Ответственный;
		Если ЗначениеЗаполнено(ВерсияФормата) И ЗначениеЗаполнено(ВерсияAPI) Тогда
			Настройки.ВерсияФормата = ВерсияФормата;
			Настройки.ВерсияAPI 	= ВерсияAPI;
		Иначе
			Настройки.ВерсияПриложения = ВерсияПриложения;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
		НаборЗаписей.Записать();
		
		КабинетСотрудникаМенеджерОбмена.ОбновитьНастройкиФункциональностиСервиса();
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ОбновлениеОтветственногоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("НовыйОтветственный,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ТекстСообщенияОбОшибке = НСтр("ru='Не удалось изменить ответственное лицо.'");
	СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
	
	БылиОшибки = ЗарегистрироватьОпубликоватьОтветственного(Параметры.Ответственный);
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Ответ = КабинетСотрудникаМенеджерОбмена.УстановитьАдминистратораЛокальногоПриложения(Параметры.ОписаниеАдминистратора);
		Если Ответ.БылиОшибки Тогда
			Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Иначе
			Результат.НовыйОтветственный = Параметры.Ответственный;
			Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
			Настройки.Ответственный = Параметры.Ответственный;
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеПодключенияОтключенияСервиса

Процедура ВыполнитьПубликациюПослеПодключенияКСервисуВФоне(ПериодыРасчетныхЛистков) Экспорт
	
	Попытка
		КабинетСотрудникаМенеджерОбмена.РезультатПубликацииПослеПодключения();
		Если ПериодыРасчетныхЛистков.Количество() > 0 И ПравилаВыгрузкиЗаданы() Тогда
			ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры

Функция ПравилаВыгрузкиЗаданы()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Правила.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом КАК Правила
	|ГДЕ
	|	Правила.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника)";
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Процедура ВключитьНастройкиПрограммыПослеПодключенияСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	КонецЕсли;
	Попытка
		БизнесПроцессыЗаявокСотрудников.ИнициализироватьРолиИсполнителей();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось инициализировать роли исполнителей задач'");
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = НСтр(
		"ru = '%1
		|
		|%2'");
		Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	КонецПопытки;
	
	Если Не ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Попытка
			ИнтеграцияУправлениеПерсоналом.ОбновитьСтруктуруПредприятия();
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось обновить структуру предприятия'");
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = НСтр(
			"ru = '%1
			|
			|%2'");
			Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецПопытки;
	КонецЕсли;
		
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Попытка
		БизнесПроцессыЗаявокСотрудников.НачальноеЗаполнениеИсполнителейЗадач(ТекущийПользователь);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить начальное заполнение исполнителей задач'");
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = НСтр(
		"ru = '%1
		|
		|%2'");
		Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	КонецПопытки;
	
	Если ИспользоватьФормат303() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если КабинетСотрудникаВнутренний.ИспользоватьПубликациюВидовСправок() И ИспользоватьФормат50375() Тогда
		ЗарегистрироватьПубликациюВидовСправок();
	КонецЕсли;
	
	Если ИспользуетсяВерсияФормата("1.0") Тогда
		БизнесПроцессыЗаявокСотрудников.ОбработатьПереходНаВерсиюФормата_1_0();
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ВключитьСборГрафиковОтпусков();
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеФункциональностиПоВерсииСервиса

// Сравнивает текущую версию сервиса с переданным значением.
//
// Параметры:
// 	ПроверяемаяВерсия - Строка - сравниваемая версия.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ВерсияПриложенияМеньшеВерсии(ПроверяемаяВерсия)

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияПриложения) Тогда
		Возврат Истина;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Настройки.ВерсияПриложения, ПроверяемаяВерсия) < 0;
	КонецЕсли;

КонецФункции

Функция ИспользоватьФормат202() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("2.0.2.1");

КонецФункции

Функция ИспользоватьФормат301() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.1.1");

КонецФункции

Функция ИспользоватьФормат302() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.2.19");

КонецФункции

Функция ИспользоватьФормат303() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.3.1");

КонецФункции

Функция ИспользоватьФормат30396() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.3.96");

КонецФункции

Функция ИспользоватьФормат401() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("4.0.1.31");

КонецФункции

Функция ИспользоватьФормат503() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.3.1");

КонецФункции

Функция ИспользоватьФормат50366() Экспорт
	
	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.3.66");
	
КонецФункции

Функция ИспользоватьРасширениеФайлаВЗаголовке() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.2.1");

КонецФункции

Функция ПовторнаяЗагрузкаОбъектовДоступна() Экспорт
	
	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.2.72");

КонецФункции

Функция ИспользоватьФормат502() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.2.1");

КонецФункции

Функция ИспользоватьФормат50375() Экспорт
	
	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.3.75");
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбменаКабинетСотрудника

Процедура ВыполнитьОбработчикиОбмена(ПараметрыОбмена) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработчикиОбменаКабинетСотрудника.Обработчик КАК Обработчик,
	|	ОбработчикиОбменаКабинетСотрудника.НомерИтерации КАК НомерИтерации,
	|	ОбработчикиОбменаКабинетСотрудника.ДатаРегистрации КАК ДатаРегистрации,
	|	ОбработчикиОбменаКабинетСотрудника.ДатаВыполнения КАК ДатаВыполнения
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбменаКабинетСотрудника
	|ГДЕ
	|	НЕ ОбработчикиОбменаКабинетСотрудника.Выполнено";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Обработчик = "РегистрацияВыполненныхНеопубликованныхЗаявок" Тогда
			ОтключитьОбработчикОбмена("РегистрацияВыполненныхНеопубликованныхЗаявок")
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний() Тогда
			Если КабинетСотрудникаВнутренний.ЗарегистрироватьИзмененияПлановыхУдержаний() Тогда
				ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний());
			КонецЕсли;
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками() Тогда
			Если Выборка.НомерИтерации > 10 Тогда
				ОтключитьОбработчикОбмена(ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками());
			ИначеЕсли Выборка.ДатаВыполнения < НачалоДня(ТекущаяДатаСеанса()) Тогда
				ПроверкаОзнакомленияСРасчетнымиЛистками(Выборка.НомерИтерации, Выборка.ДатаРегистрации, ПараметрыОбмена);
			КонецЕсли;
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеУволенныхСотрудников() Тогда
			ЗарегистрироватьПубликациюУволенныхСотрудников();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок() Тогда
			ЗарегистрироватьПубликациюВидовСправок();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеФизическихЛиц() Тогда
			ЗарегистрироватьОбновлениеФизическихЛиц();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеРуководителей() Тогда
			ЗарегистрироватьОбновлениеРуководителей();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей() Тогда
			ЗарегистрироватьПубликациюМашиночитаемыхДоверенностей();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний() Экспорт

	Возврат "ЗарегистрироватьИзмененияПлановыхУдержаний";

КонецФункции

Функция ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками()

	Возврат "ПроверкаОзнакомленияСРасчетнымиЛистками";

КонецФункции

Процедура ЗарегистрироватьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками()

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик 		= ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками(); 
	МенеджерЗаписи.Выполнено 		= Ложь;
	МенеджерЗаписи.НомерИтерации 	= 1;
	МенеджерЗаписи.ДатаРегистрации 	= ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ОбновитьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками(НомерИтерации)

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками();
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.НомерИтерации 	= НомерИтерации;
	МенеджерЗаписи.ДатаВыполнения 	= ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ИмяОбработчикаОбновлениеУволенныхСотрудников()

	Возврат "ОбновлениеУволенныхСотрудников";

КонецФункции

Процедура ЗарегистрироватьПубликациюУволенныхСотрудников()

	ОпубликованныеФизическиеЛица = ОпубликованныеФизическиеЛица();
	Если ОпубликованныеФизическиеЛица = Неопределено Тогда
		// не удалось получить данные
		Возврат;
	ИначеЕсли ОпубликованныеФизическиеЛица.Количество() = 0 Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеУволенныхСотрудников());
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ОпубликованныеФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО ФизическиеЛица.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
	|	И ВыгружаемыеОбъекты.ОкончаниеВыгрузки ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Сотрудник) КАК ТипОбъекта
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Сотрудники.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|	И Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеУволенныхСотрудников());
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 				= Выборка.Ссылка;
			МенеджерЗаписи.УсловноВыгружается 	= Истина;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
				
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеУволенныхСотрудников());
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

#Область ОзнакомлениеСРасчетнымиЛистками

Процедура ПроверкаОзнакомленияСРасчетнымиЛистками(НомерИтерации, ДатаРегистрации, ПараметрыОбмена)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	Запрос.УстановитьПараметр("ДатаПубликации", ДатаРегистрации + 86400);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетныеЛистки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеЛистки.Месяц КАК Месяц
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛистки
	|ГДЕ
	|	РасчетныеЛистки.СостояниеПубликации = ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.Опубликован)
	|	И РасчетныеЛистки.ДатаПубликации < &ДатаПубликации
	|	И РасчетныеЛистки.НомерИтерации < &НомерИтерации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновитьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками(НомерИтерации+1);
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаРезультатов.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаРезультатов.Колонки.Добавить("Ознакомлен", Новый ОписаниеТипов("Булево"));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		
		ТаблицаРезультатов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Ознакомлен = КабинетСотрудникаМенеджерОбмена.РезультатОзнакомленияСРасчетнымЛистком(ПараметрыОбмена, Выборка.ФизическоеЛицо, Выборка.Месяц);
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Ознакомлен = Ознакомлен;
		КонецЦикла;
		
		ЗарегистрироватьОзнакомлениеСРасчетнымиЛистками(ТаблицаРезультатов, НомерИтерации);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗарегистрироватьОзнакомлениеСРасчетнымиЛистками(ТаблицаРезультатов, НомерИтерации)
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыОбработки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РезультатыОбработки.Месяц КАК Месяц,
	|	РезультатыОбработки.Ознакомлен КАК Ознакомлен
	|ПОМЕСТИТЬ ВТРезультатОбработки
	|ИЗ
	|	&ТаблицаРезультатов КАК РезультатыОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеЛистки.Организация КАК Организация,
	|	РасчетныеЛистки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеЛистки.Месяц КАК Месяц,
	|	РасчетныеЛистки.ПерваяПоловинаМесяца КАК ПерваяПоловинаМесяца,
	|	РасчетныеЛистки.ДатаПубликации КАК ДатаПубликации,
	|	РасчетныеЛистки.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА РезультатыОбработки.Ознакомлен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился)
	|		КОГДА ПубликуемыеФизическиеЛица.ОкончаниеВыгрузки ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.ОпубликованНеПроверятьОзнакомление)
	|		ИНАЧЕ РасчетныеЛистки.СостояниеПубликации
	|	КОНЕЦ КАК СостояниеПубликации,
	|	РасчетныеЛистки.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО,
	|	РезультатыОбработки.Ознакомлен КАК Ознакомлен
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛистки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРезультатОбработки КАК РезультатыОбработки
	|		ПО РасчетныеЛистки.ФизическоеЛицо = РезультатыОбработки.ФизическоеЛицо
	|			И РасчетныеЛистки.Месяц = РезультатыОбработки.Месяц
	|			И (НЕ РасчетныеЛистки.СостояниеПубликации В (ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился), ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.ОпубликованНеПроверятьОзнакомление)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО РасчетныеЛистки.ФизическоеЛицо = ПубликуемыеФизическиеЛица.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Месяц", "Месяц");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПерваяПоловинаМесяца", "ПерваяПоловинаМесяца");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "ДокументКадровогоЭДО");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.НомерИтерации = НомерИтерации;
			Запись.Записать();
			
			Если Выборка.Ознакомлен И ЗначениеЗаполнено(Выборка.ДокументКадровогоЭДО) Тогда
				Запись = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
				Запись.Объект 			= Выборка.ДокументКадровогоЭДО;
				Запись.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр(
		"ru = 'Проверка ознакомления с расчетными листками
		|Описание ошибки:
		|%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Процедура ОтключитьОбработчикОбмена(ИмяОбработчика)

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик = ИмяОбработчика;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Выполнено = Истина;
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикОбмена(ИмяОбработчика)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаписьНабора.Обработчик = ИмяОбработчика; 
	ЗаписьНабора.Выполнено = Ложь;
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок() Экспорт

	Возврат "ЗарегистрироватьПубликациюВидовСправок";

КонецФункции

Функция ИмяОбработчикаОбновлениеФизическихЛиц()

	Возврат "ЗарегистрироватьОбновлениеФизическихЛиц";

КонецФункции

Процедура ЗарегистрироватьОбновлениеФизическихЛиц()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ФизическиеЛица;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ФизическиеЛица Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= СтрокаТЗ.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеФизическихЛиц());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция ИмяОбработчикаОбновлениеРуководителей()

	Возврат "ЗарегистрироватьОбновлениеРуководителей";

КонецФункции

Процедура ЗарегистрироватьОбновлениеРуководителей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка ССЫЛКА Справочник.Организации";
	Организации = Запрос.Выполнить().Выгрузить();
	
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	
	ТипПодразделений = "";
	Если Не ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТипПодразделений = "Справочник.СтруктураПредприятия";
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка ССЫЛКА Справочник.ПодразделенияОрганизаций";
	Если Не ПустаяСтрока(ТипПодразделений) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник.ПодразделенияОрганизаций",ТипПодразделений);
	КонецЕсли;
	Подразделения = Запрос.Выполнить().Выгрузить();
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Организации, Подразделения);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = Подразделения;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из Подразделения Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= СтрокаТЗ.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеРуководителей());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей() Экспорт

	Возврат "ЗарегистрироватьПубликациюМашиночитаемыхДоверенностей";

КонецФункции

Процедура ЗарегистрироватьПубликациюМашиночитаемыхДоверенностей() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронныеПодписи.МЧД КАК МЧД
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиКЭДО КАК ЭлектронныеПодписи
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ЭлектронныеПодписи.МЧД) = ТИП(Справочник.МашиноЧитаемыеДоверенностиКЭДО)
		|	И ЭлектронныеПодписи.МЧД <> ЗНАЧЕНИЕ(Справочник.МашиноЧитаемыеДоверенностиКЭДО.ПустаяСсылка)";
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрируемыеСсылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МЧД");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(РегистрируемыеСсылки) Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей());
		Возврат;
	КонецЕсли;
	
	ТаблицаРегистрируемыхОбъектов = Новый ТаблицаЗначений;
	ТаблицаРегистрируемыхОбъектов.Колонки.Добавить("Ссылка");
	ТаблицаРегистрируемыхОбъектов.Колонки.Добавить("ТипОбъекта");
	Для каждого Ссылка Из РегистрируемыеСсылки Цикл
		НоваяСтрока = ТаблицаРегистрируемыхОбъектов.Добавить();
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.МашиночитаемаяДоверенностьКЭДО;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаРегистрируемыхОбъектов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаРегистрируемыхОбъектов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаРегистрируемыхОбъектов Цикл
		
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = СтрокаТЗ.Ссылка;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= СтрокаТЗ.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
				
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей());
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

Процедура ЗарегистрироватьПубликациюВидовСправок() Экспорт

	ВидыСправок = ИнтеграцияУправлениеПерсоналом.ВидыПредоставляемыхСотрудникамСправок();
	
	Если Не ЗначениеЗаполнено(ВидыСправок) Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовСправок = Новый ТаблицаЗначений;
	ТаблицаВидовСправок.Колонки.Добавить("ВидСправки");
	ТаблицаВидовСправок.Колонки.Добавить("ТипОбъекта");
	Для каждого ВидСправки Из ВидыСправок Цикл
		НоваяСтрока = ТаблицаВидовСправок.Добавить();
		НоваяСтрока.ВидСправки = ВидСправки;
		НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ВидПредоставляемойСотрудникамСправки;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаВидовСправок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ВидСправки");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаВидовСправок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ВидСправки");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаВидовСправок Цикл
		
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = СтрокаТЗ.ВидСправки;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= СтрокаТЗ.ВидСправки;
			МенеджерЗаписи.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
				
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область РаботаСКабинетами

Процедура ОтключитьКабинетыНепубликуемыхСотрудниковФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СообщениеОбОшибке");
	
	Ответ = ОтключитьКабинетыНепубликуемыхСотрудников();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ОтключитьКабинетыНепубликуемыхСотрудников()

	// Привилегированный режим устанавливается для обработки всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал отключение кабинетов.
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("СообщениеОбОшибке");
	
	Идентификаторы = КабинетСотрудникаМенеджерОбмена.ИдентификаторыАктивныхФизическихЛиц();
	Если Идентификаторы = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка получения данных из сервиса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФизическихЛиц.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	Для каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаФизическихЛиц.Добавить();
		НоваяСтрока.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		НоваяСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ТаблицаФизическихЛиц КАК ФизическиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Идентификатор КАК Идентификатор
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО ФизическиеЛица.ФизическоеЛицо = ПубликуемыеФизическиеЛица.Ссылка
	|ГДЕ
	|	ПубликуемыеФизическиеЛица.ОкончаниеВыгрузки ЕСТЬ NULL";
	НепубликуемыеФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	Если НепубликуемыеФизическиеЛица.Количество() > 0 Тогда
		Если Не КабинетСотрудникаМенеджерОбмена.ДеактивироватьФизическихЛиц(НепубликуемыеФизическиеЛица) Тогда
			СообщениеОбОшибке = НСтр("ru='Ошибка получения данных из сервиса.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпубликованныеФизическиеЛица()

	Идентификаторы = КабинетСотрудникаМенеджерОбмена.ИдентификаторыОпубликованныхФизическихЛиц();
	Если Идентификаторы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокФизическихЛицПоИдентификаторам(Идентификаторы);

КонецФункции

Функция СписокФизическихЛицПоИдентификаторам(Идентификаторы)

	СписокФизическихЛиц = Новый Массив;
	Для каждого Идентификатор Из Идентификаторы Цикл
		СписокФизическихЛиц.Добавить(Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	КонецЦикла;
	
	Возврат СписокФизическихЛиц;

КонецФункции

#КонецОбласти

#Область ЖурналаРегистрации

#Область ИменаСобытийЖурналаРегистрации

Функция НазваниеГруппыСобытийЖР()
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Возврат ИнтеграцияУправлениеПерсоналом.НазваниеГруппыСобытийЖР(Приложение);
	
КонецФункции

Функция ИмяСобытияМенеджера() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Менеджер сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПротоколЗапрос() Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналом.ИмяСобытияЗапрос(НазваниеГруппыСобытийЖР());

КонецФункции

Функция ИмяСобытияПротоколОтвет() Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналом.ИмяСобытияОтвет(НазваниеГруппыСобытийЖР());

КонецФункции

Функция ИмяСобытияОтключениеСервиса() Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналом.ИмяСобытияОтключение(НазваниеГруппыСобытийЖР());

КонецФункции 

Функция ИмяСобытияПрочиеСобытия() Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналом.ИмяСобытияПрочиеСобытия(НазваниеГруппыСобытийЖР())
	
КонецФункции

Функция ИмяСобытияОбсуждения() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Обсуждения'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

Процедура ЗаписатьОшибкуРегистрацииИзменений(ДанныеСсылка, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при регистрации изменений %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДанныеСсылка), ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,, ДанныеСсылка, ТекстОшибки);
	
КонецПроцедуры

Функция ПодробностиВЖурналеРегистрации() Экспорт

	Возврат НСтр("ru = 'Подробности см. в журнале регистрации.'");

КонецФункции

Процедура ЗаписатьОшибкуЧтенияJSON(ОтветСтрока, ОписаниеОшибки) Экспорт

	ШаблонОписания = НСтр(
	"ru = 'Ошибка чтения JSON:
	|Описание ошибки:
	|%1
	|Строка JSON:
	|%2'");
	
	ОтветСтрокаПустой = НСтр("ru = '<пустая строка>'");
	ОтветСтрока = ?(Не ЗначениеЗаполнено(ОтветСтрока), ОтветСтрокаПустой, ОтветСтрока);
	Комментарий = СтрШаблон(ШаблонОписания, ОписаниеОшибки, ОтветСтрока);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ИнициализироватьРолиИсполнителейЗадач(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьБизнесПроцессыИЗадачи.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	РолиИсполнителей = Новый Массив;
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РолиИсполнителей", РолиИсполнителей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиИсполнителей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Ссылка В(&РолиИсполнителей)
	|	И (НЕ РолиИсполнителей.ИспользуетсяСОбъектамиАдресации
	|			ИЛИ НЕ РолиИсполнителей.ИспользуетсяБезОбъектовАдресации
	|			ИЛИ РолиИсполнителей.ТипыОсновногоОбъектаАдресации <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации))";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.РолиИсполнителей", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		РольИсполнителя = Выборка.Ссылка.ПолучитьОбъект();
		РольИсполнителя.ИспользуетсяСОбъектамиАдресации 	= Истина;
		РольИсполнителя.ИспользуетсяБезОбъектовАдресации 	= Истина;
		РольИсполнителя.ТипыОсновногоОбъектаАдресации 		= ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РольИсполнителя);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПубликациюПравНаВычеты(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновления
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновления.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛицаДляОбновления.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", "ПроверкаСостоянияСервисаКабинетСотрудника");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Не ЗначениеЗаполнено(Задания) Или Задания[0].Использование Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура УстановитьВерсияИзмененийКабинетСотрудника() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(УдалитьВерсииЗаявокКабинетСотрудника.ВерсияИзменений) КАК ВерсияИзменений
	|ИЗ
	|	РегистрСведений.УдалитьВерсииЗаявокКабинетСотрудника КАК УдалитьВерсииЗаявокКабинетСотрудника";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Константы.УдалитьВерсияИзмененийКабинетСотрудника.Получить() <> Выборка.ВерсияИзменений Тогда
			Константы.УдалитьВерсияИзмененийКабинетСотрудника.Установить(Выборка.ВерсияИзменений);
		КонецЕсли;
		РегистрыСведений.УдалитьВерсииЗаявокКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеНастроекСервиса(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат301() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеНастроекСервисаВерсии303(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат301() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Получить() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Константа.КонтролироватьОзнакомлениеСРасчетнымиЛистками", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			МенеджерКонстанты = Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.СоздатьМенеджерЗначения();
			МенеджерКонстанты.Значение = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ЗаполнитьСобытиеСотрудникиДляОбновленияПубликуемыхОбъектов(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДляОбновления.Сотрудник КАК Сотрудник,
	|	СотрудникиДляОбновления.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА СотрудникиДляОбновления.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные)
	|		ИНАЧЕ СотрудникиДляОбновления.Событие
	|	КОНЕЦ КАК Событие
	|ИЗ
	|	РегистрСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СотрудникиДляОбновления.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления
	|		ГДЕ
	|			СотрудникиДляОбновления.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.ПустаяСсылка)) КАК Сотрудники
	|		ПО СотрудникиДляОбновления.Сотрудник = Сотрудники.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов", "Сотрудник", Выборка.Сотрудник) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		
		Пока Выборка.Следующий() Цикл
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Сотрудник 		= Выборка.Сотрудник;
			ЗаписьНабора.ДатаСобытия 	= Выборка.ДатаСобытия;
			ЗаписьНабора.Событие 		= Выборка.Событие;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ОбновитьФункциональностьСервисаПриИспользованииКЭДО(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Настройки.ТребуетсяОбновитьНастройкиФункциональности Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаЗавершена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаЗавершена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗаполнитьСодержимоеДокументаКЭДОРасчетныхЛистков(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.СодержимоеДокумента = ЗНАЧЕНИЕ(Перечисление.СодержимоеДокументов.ПустаяСсылка)
	|	И ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументКадровогоЭДО.Дата УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ДокументКадровогоЭДО", "Ссылка", Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СодержимоеДокумента = Перечисления.СодержимоеДокументов.СодержитЗарплату;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьПроверкуОзнакомленияСРасчетнымиЛистками(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат502() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
		
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		ЗаписьНабора.НомерИтерации = 1;
		ЗаписьНабора.ДатаРегистрации = ТекущаяДатаСеанса();
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура УстановитьТребуетсяОбновитьНастройкиФункциональности() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеУволенныхСотрудников(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат503() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;

	ИмяОбработчика = ИмяОбработчикаОбновлениеУволенныхСотрудников();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗаполнитьОбъектыСОшибкамиЗаполнения() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК ОбъектПубликации,
	|	ОшибкиЗаполнения.ОписаниеОшибки КАК ОписаниеОшибки
	|ИЗ
	|	РегистрСведений.УдалитьОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.ОбъектПубликации ССЫЛКА Справочник.ФизическиеЛица";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УдалитьОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПубликации.Установить(Выборка.ОбъектПубликации);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектПубликации 	= Выборка.ОбъектПубликации;
		НоваяЗапись.БлокирующаяОшибка 	= Истина;
		НоваяЗапись.ОписаниеБлокирующейОшибки = Выборка.ОписаниеОшибки;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
	РегистрыСведений.УдалитьОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьНаборЗаписей().Записать();

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеФункциональностиСервиса(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
		ОбработкаВыполнена = Ложь;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
		ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикОбновленияФизическихЛиц(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбработчикаОбновлениеФизическихЛиц();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикОбновленияРуководителей(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбработчикаОбновлениеРуководителей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ПроверитьВерсиюФормата() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ВерсииФорматаОбмена = КабинетСотрудникаМенеджерОбмена.ВерсииФорматаОбмена();
	НоваяВерсия = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(Настройки.ВерсияФормата, ВерсииФорматаОбмена);
	Если НоваяВерсия <> Настройки.ВерсияФормата Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюФормата(НоваяВерсия);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьИсключенияИзПравил() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не ЗначениеЗаполнено(Настройки.Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", Настройки.Ответственный);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенияИзПравил.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсключенияИзПравил.Публикуется КАК Публикуется,
	|	ИсключенияИзПравил.ЭтоОтветственный КАК ЭтоОтветственный
	|ИЗ
	|	РегистрСведений.ИсключенияИзПравилПубликацииКабинетСотрудника КАК ИсключенияИзПравил
	|ГДЕ
	|	ИсключенияИзПравил.ЭтоОтветственный
	|	И ИсключенияИзПравил.ФизическоеЛицо = &ФизическоеЛицо
	|	И ИсключенияИзПравил.Публикуется";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Настройки.Ответственный);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаписьНабора.ФизическоеЛицо 	= Настройки.Ответственный;
	ЗаписьНабора.Публикуется 		= Истина;
	ЗаписьНабора.ЭтоОтветственный 	= Истина;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеУровеньДоступаКИ(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ОбновитьУровеньДоступаКИ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
		ОбработкаВыполнена = Ложь;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
		ЗаписьНабора.ОбновитьУровеньДоступаКИ = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

#КонецОбласти

#Область СохранениеНастроек

Процедура СохранитьНастройкиИспользуемаяФункциональностьСервиса(НастройкиФункциональность, СообщениеОбОшибке = Неопределено) Экспорт

	ТекущиеНастройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	ОбновитьУровеньДоступаКИ = (ТекущиеНастройки.УровеньДоступаКИ <> НастройкиФункциональность.УровеньДоступаКИ);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиСервисаКабинетСотрудника");
		Блокировка.Заблокировать();
		
		РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.СохранитьНовыеНастройки(НастройкиФункциональность);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		Если ОбновитьУровеньДоступаКИ Тогда
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьОбновитьУровеньДоступаКИ(Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

Процедура СохранитьНастройкиЗаявокНаОтпуск(НастройкиЗаявокНаОтпуск, СообщениеОбОшибке = Неопределено) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.СохранитьНовыеНастройки(НастройкиЗаявокНаОтпуск);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСменыВерсий

Процедура ВыполнитьДействияПриПереходеНаВерсию(ПрежняяВерсия, НоваяВерсия) Экспорт

	Если ПрежняяВерсия = НоваяВерсия Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.1.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.1.1") < 0) Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеГрафиковРаботы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.3.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.3.1") < 0) Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Истина);
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеДанныхГрафиковРаботы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.2.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.2.1") < 0) Тогда
		
		ИмяОбработчика = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками();
		МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Обработчик = ИмяОбработчика;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			ЗарегистрироватьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.3.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.3.1") < 0) Тогда
		
		ИмяОбработчика = ИмяОбработчикаОбновлениеУволенныхСотрудников();
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика; 
		ЗаписьНабора.Выполнено = Ложь;
		НаборЗаписей.Записать();
		
	КонецЕсли;

	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.3.66") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.3.66") < 0) Тогда
		КадровыйЭДО.УстановитьЗначениеВедетсяУчетСогласийНаПрисоединениеККЭДО(ИспользуетсяКадровыйЭДО());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.3.75") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.3.75") < 0)
		И КабинетСотрудникаВнутренний.ИспользоватьПубликациюВидовСправок() Тогда
		
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияПриПереходеНаВерсиюAPI(СтараяВерсия, НоваяВерсия) Экспорт

	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		ВыполнитьДействияПриПереходеНаВерсию(Настройки.ВерсияПриложения, "6.0.1.1");
		БизнесПроцессыЗаявокСотрудников.ОбработатьПереходНаВерсиюФормата_1_0();
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьДействияПриПереходеНаВерсиюФормата(СтараяВерсия, НоваяВерсия) Экспорт

	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаОбновлениеФизическихЛиц());
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьОбновитьУровеньДоступаКИ(Истина);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	КонецЕсли;
	
	Если НоваяВерсия = "1.1" Тогда
		КабинетСотрудникаВнутренний.ВключитьСборГрафиковОтпусков();
	КонецЕсли;

	Если Не ВерсияФорматаМеньшеВерсии(НоваяВерсия, "2.0") Тогда
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюМашиночитаемыхДоверенностей());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Процедура ПроверкаДоступностиАдресаПоИмениФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	КабинетСотрудникаМенеджерОбмена.ПроверитьДоступностьАдресаПоИмени(Ложь);

КонецПроцедуры

Функция ЕстьАктивныеФоновыеЗаданияОбменПубликация() Экспорт
	
	Возврат ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияПубликации())
		Или ЕстьАктивныеФоновыеЗадания("ПубликацияДанныхВСервисе") ;
	
КонецФункции

Функция ФизическоеЛицоПубликуется(ФизическоеЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОбъектыСОшибками
	|		ПО ФизическиеЛица.Ссылка = ОбъектыСОшибками.Ссылка
	|			И (ОбъектыСОшибками.БлокирующаяОшибка)
	|			И (ОбъектыСОшибками.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизическоеЛицо
	|	И ОбъектыСОшибками.БлокирующаяОшибка ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция НастройкиПрограммы() Экспорт

	
	Настройки = Новый Структура("ИспользоватьДСВ");
	Настройки.ИспользоватьДСВ = Ложь;
	КабинетСотрудникаВнутренний.ЗаполнитьНастройкиПрограммы(Настройки);
	
	Возврат Настройки;
	
КонецФункции

Функция ДоступнаПубликацияРасчетныхЛистков() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.РасчетныеЛисткиКабинетСотрудника);

КонецФункции

Функция КонтактнаяИнформацияФизическихЛиц(ФизическиеЛица) Экспорт

	КонтактнаяИнформация = Новый Структура("МобильныеТелефоны, АдресаПочты", Новый Соответствие, Новый Соответствие);
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат КонтактнаяИнформация;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.Настройки();
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Настройки.ВидКИМобильныйТелефон);
	ВидыКИ.Добавить(Настройки.ВидКИАдресЭлектроннойПочты);
	
	МобильныеТелефоны = Новый Соответствие;
	АдресаПочты = Новый Соответствие;
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ФизическиеЛица, , ВидыКИ, ТекущаяДатаСеанса());
	Для каждого СтрокаТЗ Из ТаблицаКИ Цикл
		Если СтрокаТЗ.Вид = Настройки.ВидКИМобильныйТелефон Тогда
			МобильныеТелефоны.Вставить(СтрокаТЗ.Объект, СокрЛП(СтрокаТЗ.Представление));
		ИначеЕсли СтрокаТЗ.Вид = Настройки.ВидКИАдресЭлектроннойПочты Тогда
			АдресаПочты.Вставить(СтрокаТЗ.Объект, СокрЛП(СтрокаТЗ.Представление));
		КонецЕсли;
	КонецЦикла;
	
	КонтактнаяИнформация.МобильныеТелефоны = МобильныеТелефоны;
	КонтактнаяИнформация.АдресаПочты = АдресаПочты;
	
	Возврат КонтактнаяИнформация;

КонецФункции

Функция ЭтоПодписанСервиса(СтрокаРольПодписантаЭП) Экспорт

	РолиПодписантаСервиса = Новый Соответствие;
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП("Руководитель")), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.Сотрудник)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.НепосредственныйРуководитель)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.РуководителиПоВсемМестамРаботы)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.РуководительПоДополнительнымМестамРаботы)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.ВышестоящийРуководитель)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.НеформальныйРуководитель)), Истина);
	
	Если РолиПодписантаСервиса[ВРег(СтрокаРольПодписантаЭП)] = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция СтрокаРольПодписантаДляЭП(РольПодписанта) Экспорт
	
	Если ТипЗнч(РольПодписанта) = Тип("ПеречислениеСсылка.РолиПодписантовКЭДО") Тогда
		СтрокаРольПодписанта = ОбщегоНазначения.ИмяЗначенияПеречисления(РольПодписанта);
	Иначе
		СтрокаРольПодписанта = РольПодписанта;
	КонецЕсли;

	Возврат СтрШаблон("%1:%2", "РольПодписанта", СтрокаРольПодписанта);

КонецФункции

Функция РазмерФайлаСоответсвуетТребованиям(ДвоичныеДанные) Экспорт

	Возврат ДвоичныеДанные.Размер() <= КабинетСотрудникаКлиентСервер.МаксимальныйРазмерПринимаемогоФайла();

КонецФункции

Функция РасширениеФотографии(ДвоичныеДанные) Экспорт
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	ФорматФайла = Картинка.Формат();
	Если ФорматФайла = ФорматКартинки.JPEG 
		Или ФорматФайла = ФорматКартинки.GIF
		Или ФорматФайла = ФорматКартинки.TIFF
		Или ФорматФайла = ФорматКартинки.PNG
		Или ФорматФайла = ФорматКартинки.BMP Тогда
		Возврат Строка(ФорматФайла);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СистемнаяУчетнаяЗаписьНастроена() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	СистемнаяУчетнаяЗаписьНастроена = РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СистемнаяУчетнаяЗаписьНастроена;

КонецФункции

Функция ОрганизацииГдеФизическиеЛицаРуководители(ФизическиеЛица)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Организация
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Организации";
	Выборка = Запрос.Выполнить().Выбрать();
	Организации = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ОтветственныеЛица = ПодписиДокументов.ОтветственныеЛицаОрганизации(Выборка.Организация, "Руководитель", ТекущаяДатаСеанса());
		Если ФизическиеЛица.Найти(ОтветственныеЛица.Руководитель) <> Неопределено Тогда
			Организации.Добавить(Выборка.Организация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Организации;

КонецФункции

Функция ПодразделенияДляОбновленияРуководителя(Организации) Экспорт
	
	Подразделения = Новый Массив;
	Если Не ЗначениеЗаполнено(Организации) Тогда
		Возврат Подразделения;
	КонецЕсли;
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	Запрос = Новый Запрос;
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Запрос.УстановитьПараметр("Организации", Организации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК Подразделение
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
		|		ПО ВыгружаемыеОбъекты.Ссылка = Подразделения.Ссылка
		|			И (Подразделения.Владелец В (&Организации))
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ПодразделенияОрганизаций";
		ПодразделенияДляПроверки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		Для каждого Организация Из Организации Цикл
			Подразделения.Добавить(Организация);
		КонецЦикла;
	Иначе
		ПодразделенияДляПроверки = ИнтеграцияУправлениеПерсоналом.ПодразделенияДляПроверкиРуководителей(Организации);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодразделенияДляПроверки) Тогда
		Возврат Подразделения;
	КонецЕсли;
	
	ФизическиеЛица = ИнтеграцияУправлениеПерсоналом.ВыгружаемыеФизическиеЛица(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	ВыгружаемыеФизическиеЛица = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ФизическиеЛица);
	ПодразделенияРуководители = ИнтеграцияУправлениеПерсоналом.РуководителиПодразделенийОрганизаций(ПодразделенияДляПроверки, ВыгружаемыеФизическиеЛица);
	
	ПодразделенияБезРуководителей = Новый Массив;
	Для каждого Подразделение Из ПодразделенияДляПроверки Цикл
		Если Не ЗначениеЗаполнено(ПодразделенияРуководители[Подразделение]) Тогда
			ПодразделенияБезРуководителей.Добавить(Подразделение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПодразделенияБезРуководителей) Тогда
		Запрос.УстановитьПараметр("Подразделения", ПодразделенияБезРуководителей);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение) КАК ТипОбъекта
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка В(&Подразделения)";
		Подразделения = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат Подразделения;

КонецФункции

Функция ПубликуемыеФизическиеЛица() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|		ПО ФизическиеЛица.Ссылка = ОшибкиЗаполнения.Ссылка
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|			И (ОшибкиЗаполнения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL
	|	И ФизическиеЛица.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	Выборка = Запрос.Выполнить().Выбрать();
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	Возврат ПубликуемыеФизическиеЛица;

КонецФункции

#КонецОбласти

#Область ОпределениеФункциональностиПоВерсииФормата

Функция ВерсионированиеИспользуется() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеЗаполнено(Настройки.ВерсияAPI);

КонецФункции

Функция ВерсияФорматаМеньшеВерсии(ВерсияФормата, ВерсияДляСравнения) Экспорт

	Если ПустаяСтрока(ВерсияФормата) Тогда
		Возврат Истина;
	Иначе
		Возврат СравнитьВерсии(ВерсияФормата, ВерсияДляСравнения) < 0;
	КонецЕсли;

КонецФункции 

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате 0.0 либо 0.0.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//             Меньше 0 если СтрокаВерсии1 < СтрокаВерсии2.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Результат = 0;
	Если СокрЛП(СтрокаВерсии1) = СокрЛП(СтрокаВерсии2) Тогда
		Возврат 0;
	КонецЕсли;
	
	Версия1 = СтрРазделить(СтрокаВерсии1, ".");
	Версия2 = СтрРазделить(СтрокаВерсии2, ".");
	
	// Значимыми при сравнении являются первые 2 разряда (всегда число).
	Для Разряд = 0 По 1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РасчетныеЛисткиПервойПоловиныМесяцаДоступны() Экспорт
	
	Возврат ВерсионированиеИспользуется();
	
КонецФункции

Функция ИспользуетсяВерсияФормата(ВерсияДляСравнения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияФормата) Тогда
		Возврат Ложь;
	Иначе
		Возврат СравнитьВерсии(Настройки.ВерсияФормата, ВерсияДляСравнения) >= 0;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область НастройкиФункциональностиСервиса

Функция НовыеНастройкиФункциональностиСервиса() Экспорт

	ВерсияФормата = ВерсияФормата();
	
	НастройкиФункциональности = КабинетСотрудникаМенеджерОбмена.НовоеОписаниеНастроекФункциональностиСервиса(ВерсияФормата);
	КабинетСотрудникаВнутренний.ЗаполнитьНастройкиФункциональностиСервиса(НастройкиФункциональности, ВерсияФормата);
	
	НастройкиФункциональности.ИспользуютсяОбсуждения 		= ПолучитьФункциональнуюОпцию("ИспользуютсяОбсужденияКабинетСотрудника");
	НастройкиФункциональности.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	НастройкиФункциональности.ДоступноПолучениеКопииНаЭлектроннуюПочту 	= СистемнаяУчетнаяЗаписьНастроена();
	
	Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	НастройкиФункциональности.РазделКомпания 	= Не Настройки.СкрытьРазделКомпания;
	НастройкиФункциональности.РазделСправки 	= Не Настройки.СкрытьРазделСправки;
	НастройкиФункциональности.РазделДокументы 	= Не Настройки.СкрытьРазделДокументы;
	НастройкиФункциональности.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") И Не Настройки.ПолучениеДокументаСЭПНедоступно;
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	НастройкиФункциональности.ИспользуетсяКЭДО = Настройки.ИспользуетсяКадровыйЭДО;
	СпособПолученияСогласия = Настройки.СпособПолученияСогласияНаПрисоединениеККЭДО;
	НастройкиФункциональности.ПолучениеСогласияКЭДОНаБумаге = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.БумажныйДокумент);
	НастройкиФункциональности.ПолучениеСогласияКЭДОУНЭП 	= (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.УНЭП);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиФункциональности, "ИнтеграцияС1СПерсонал") Тогда
		НастройкиФункциональности.ИнтеграцияС1СПерсонал = ИнтеграцияУправлениеПерсоналом.Используется1СПерсонал();
	КонецЕсли;
	
	Возврат НастройкиФункциональности;
	
КонецФункции

Функция ДоступнаяФункциональностьСервисаПоВерсииПриложения() Экспорт

	ДоступнаяФункциональность = КабинетСотрудникаВнутренний.ДоступнаяФункциональностьСервисаПоВерсииПриложения();
	
	ДоступнаяФункциональность.ЗапросМестаРаботыВЗаявлении 	= ИспользоватьФормат303();
	ДоступнаяФункциональность.ИспользуютсяОбсуждения 		= ПолучитьФункциональнуюОпцию("ИспользуютсяОбсужденияКабинетСотрудника");
	ДоступнаяФункциональность.РасширенныйЗапросНаИзменениеЛичнойИнформации = ИспользоватьФормат503();
	ДоступнаяФункциональность.ДоступноПолучениеДокументаСЭП 			= ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	ДоступнаяФункциональность.ДоступноПолучениеКопииНаЭлектроннуюПочту 	= СистемнаяУчетнаяЗаписьНастроена();
	
	Если ИспользоватьФормат503() Тогда
		Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
		ДоступнаяФункциональность.РазделКомпания 	= Не Настройки.СкрытьРазделКомпания;
		ДоступнаяФункциональность.РазделСправки 	= Не Настройки.СкрытьРазделСправки;
		ДоступнаяФункциональность.РазделДокументы 	= Не Настройки.СкрытьРазделДокументы;
		ДоступнаяФункциональность.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") И Не Настройки.ПолучениеДокументаСЭПНедоступно;
	КонецЕсли;
	
	Если ИспользоватьФормат50366() Тогда
		НастройкиИнтеграции = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
		ДоступнаяФункциональность.ИспользуетсяКЭДО = НастройкиИнтеграции.ИспользуетсяКадровыйЭДО;
		СпособПолученияСогласия = НастройкиИнтеграции.СпособПолученияСогласияНаПрисоединениеККЭДО;  
		ДоступнаяФункциональность.ПолучениеСогласияКЭДОНаБумаге = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.БумажныйДокумент);
		ДоступнаяФункциональность.ПолучениеСогласияКЭДОУНЭП = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.УНЭП);
	КонецЕсли;
	
	Возврат ДоступнаяФункциональность;

КонецФункции

#КонецОбласти

#КонецОбласти

