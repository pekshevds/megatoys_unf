// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеИПроверкаЗаполнения

// Переопределение/дополнение события "Перед записью" библиотечных справочников и документов.
//   Позволяет модифицировать библиотечные объекты при необходимости.
//   * Не вызывается в режиме "ОбменДанными.Загрузка"
// 
// Параметры:
//  Объект          - СправочникОбъект, ДокументОбъект - записываемый объект
//  Отказ           - Булево - Отказ
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи (для документов)
//  РежимПроведения - РежимПроведенияДокумента - режим проведения (для документов)
// 
Процедура ПередЗаписьюОбъекта(Объект, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("СправочникОбъект.ШтрихкодыУпаковокТоваров")
			Или ТипОбъекта = Тип("ДокументОбъект.МаркировкаТоваровИСМП") Тогда
		Если Не ЗначениеЗаполнено(Объект.Серия) Тогда
			Объект.Серия = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если ТипОбъекта = Тип("ДокументОбъект.ВозвратВОборотИСМП")
			Или ТипОбъекта = Тип("ДокументОбъект.ВыводИзОборотаИСМП")
			Или ТипОбъекта = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП")
			Или ТипОбъекта = Тип("ДокументОбъект.ПриемкаТоваровИСМП")
			Или ТипОбъекта = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП")
			Или ТипОбъекта = Тип("ДокументОбъект.МаркировкаТоваровИСМП")
			Или ТипОбъекта = Тип("ДокументОбъект.УточнениеСведенийОКодахМаркировкиИСМП") Тогда
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовар.Серия) Тогда
				СтрокаТовар.Серия = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Заполняет в табличной части служебные реквизиты.
// ТабличнаяЧасть может иметь различный состав колонок.
// В ТабличнаяЧасть обязательно содержится колонка Номенклатура - ОпределяемыйТип.Номенклатура.
// Заполнению подлежат колонки из нижеперечисленного списка, если значения, указываемые в колонке, используются в
// прикладном решении. Например:
// 	В "ТабличнаяЧасть" присутствует колонка "Артикул".
// 	Колонка подлежит заполнению, если в прикладном решении для номенклатуры возможно указание артикула.
// Список колонок для заполнения:
// 	Артикул                    - ОпределяемыйТип.Артикул - артикул номенклатуры.
// 	Код                        - ОпределяемыйТип.УникальныйИдентификаторИС - код номенклатуры.
// 	ХарактеристикиИспользуются - Булево - признак обязательного использования характеристик номенклатуры.
// 	ЕдиницаИзмерения           - ОпределяемыйТип.Упаковка - базовая единица измерения номенклатуры, в которой осуществляется учет и хранение.
// 	ТипНоменклатуры            - ОпределяемыйТип.ТипНоменклатуры - тип номенклатуры.
// 	ТребуетВзвешивания         - Булево - признак, что для номенклатуры маркированные потребительские упаковки имеют индивидуальный вес.
// 	ПроизвольнаяЕдиницаУчета   - Булево - признак, что для номенклатуры базовая единица учета отличается от маркированной потребительской упаковки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть);
	
КонецПроцедуры

// Обрабатывает строку табличной части в соостветствии с переданной структурой действий.
//
// Параметры:
//  СтрокаТабличнойЧасти - Структура, СтрокаТабличнойЧасти, ДанныеФормыЭлементКоллекции - обрабатываемая строка.
//  СтруктураДействий - структура - структура выполняемых действий.
Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий) Экспорт
	
	ИнтеграцияИСУНФ.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	ИнтеграцияИСУНФ.ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ);
	
КонецПроцедуры

// Необходимо заполнить информацию о сертификатах номенклатуры в виде соответствия из массива структур со свойствами:
//    "ВидСертификации", "НомерСертификации", "ДатаСертификации", "СрокДействия", "Бессрочный".
// Информацию по сертификатам следует добавить в соответствие 
//     "СертификатыНоменклатуры".
// 
// Параметры:
//  СписокНоменклатуры - ОпределяемыйТип.Номенклатура - элемент номенклатура.
//  СертификатыНоменклатуры - Соответствие Из Структура - данные сертификатов:
//   * Ключ - ОпределяемыйТип.Номенклатура,
//   * Значение - Массив из структура:
//   ** ВидСертификации - ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИС - Вид сертификата.
//   ** НомерСертификации - Строка - Идентификационный номер сертификата.
//   ** ДатаСертификации - Дата - Дата начала действия сертификата.
//   ** СрокДействия - Дата - Дата окончания срока действия сертификата.
//   ** Бессрочный - Булево - истина, если сертификат бессрочный.
Процедура ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Настроить способ расчета статусов оформления.
// 
// Параметры:
//  РасчетОтдельно - Булево - Истина если расчет статусов оформления осуществляется отдельно от транзакции записи
Процедура НастроитьСпособРасчетаСтатусовОформления(РасчетОтдельно) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Обработка проведения.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ ГосИС который проводится
//  Отказ - Булево - флаг отказа
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Встраивание движений документов ГосИС по прикладным регистрам (при необходимости, например регистрация серий)
// 
Процедура ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура формирования движений по прикладным регистрам.
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

#Область КодыТНВЭД

// В данной процедуре требуется переопределить текст запроса, определяющий сопоставление классификатора ТН ВЭД и данных
// регистра сведений КодыТНВЭДИСМП. Требования к тексту запроса:
//     Если классификатора ТН ВЭД не используется, переопределение также не заполнять.
//     Результат запроса обязательно должен содержать следующие поля:
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//     КодТНВЭД           - Строка - код.
//     ВидПродукции       - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции.
//     НаименованиеПолное - Строка - наименование.
//     КодТНВЭДСсылка     - Произвольный - ссылка на сопоставленный элемент классификатора.
//     Сопоставлено       - Число - 0, если в базе не найден соотвествующий элемент классификатора, 1 - если найден.
// Параметры:
//  ТекстЗапроса - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСопоставлениеКодовТНВЭД(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// В процедуре требуется определить наличие товаров по виду продукции для которых используется механизм частичного выбытия
//
// Параметры:
//  Использование - Булево - Признак использования частичного выбытия (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеЧастичноеВыбытие(Использование, ВидПродукцииИС) Экспорт
	
	ИнтеграцияИСУНФ.ИспользованиеЧастичноеВыбытие(Использование, ВидПродукцииИС);
	
КонецПроцедуры

#Область ОписаниеНоменклатурыИС

// В процедуре требуется определить наличие товаров по виду продукции для которых единица учета не совпадает с 
//   количеством в потребительском коде маркировки
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (для вида продукции) (исходящий)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеПроизвольныхЕдиницУчета(Использование, ВидПродукцииИС) Экспорт
	
	ИнтеграцияИСУНФ.ИспользованиеПроизвольныхЕдиницУчета(Использование, ВидПродукцииИС);
	
КонецПроцедуры

// В процедуре требуется определить наличие маркируемых товаров для которых нет стандартной фабричной упаковки
//   (настраиваемых не в регистре ОписаниеноменклатурыИС).
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (исходящий).
//
Процедура ИспользованиеПродукцииТребующейВзвешивания(Использование) Экспорт
	
	Запрос = Новый Запрос;
	
	ВидыПродукцииИСМП = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	Запрос.УстановитьПараметр("ВидыПродукцииИСМП", ВидыПродукцииИСМП);
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО (ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка)
		|ГДЕ
		|	СправочникНоменклатура.ВидПродукцииИС В(&ВидыПродукцииИСМП)
		|	И (СправочникНоменклатура.Весовой
		|			ИЛИ ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1) = 0)";
	
	Использование = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании источника описания номенклатуры отличного от ссылки 
//   на номенклатуру:
//   * Дополняет входящий массив классами номенклатуры,
//   * Возвращает соответствие добавленных классов и исходной номенклатуры.
//
// Параметры:
//  Номенклатура - Массив Из ОпределяемыйТип.ИсточникОписанияноменклатурыИС - Источник описания номенклатуры.
//  СоответстиеИсточникаНоменклатуре - Соответствие - описание добавленных классов номенклатуры:
//   * Ключ - ОпределяемыйТип.ИсточникОписанияНоменклатурыИС - Источник описания номенклатуры,
//   * Значение - Массив Из ОпределяемыйТип.Номенклатура - номенклатура из входящего массива
Процедура ДополнитьИсточникиОписанияНоменклатуры(Номенклатура, СоответстиеИсточникаНоменклатуре) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании значений описания номенклатуры отличных от напрямую
//   записанных в регистре, а также при использовании режима "ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками":
//   * Дополняет входящий текст запроса.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса получения описания номенклатуры ИС.
Процедура ДополнитьТекстЗапросаОписанияНоменклатуры(ТекстЗапроса) Экспорт
	
	// Дополняем:
	// 1. Получение реквизита "Вариант частичного выбытия" из явного указания субпотребительской упаковки
	// 2. Получение реквизита "ЕмкостьПотребительскойУпаковки" в зависимости от указания упаковок
	// 3. Изменение значения по-умолчанию для продукции с мерным типом измеряемой величины единицы хранения
	// 4. Не для алкоголя и немаркируемой продукции
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОписаниеНоменклатурыИС.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками)
		|				И ОписаниеНоменклатурыИС.ПотребительскаяУпаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|				И ОписаниеНоменклатурыИС.УпаковкаЧастичногоВыбытия <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками)
		|			ТОГДА 0
		|		ИНАЧЕ ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки
		|	КОНЕЦ                               КАК ЕмкостьПотребительскойУпаковки,
		|	ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке  КАК КоличествоВПотребительскойУпаковке,
		|	ВЫБОР
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками)
		|			ТОГДА ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ЧастьПотребительскойУпаковки)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ТекущаяНоменклатура)
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)
		|		КОГДА ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.ПотребительскаяУпаковка)
		|			ТОГДА ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)
		|	КОНЕЦ                                                      КАК ВариантЧастичногоВыбытия,
		|	ОписаниеНоменклатурыИС.ВариантИспользованияЕдиницыХранения КАК ВариантИспользованияЕдиницыХранения,
		|	ОписаниеНоменклатурыИС.ПотребительскаяУпаковка             КАК ПотребительскаяУпаковка,
		|	ОписаниеНоменклатурыИС.УпаковкаЧастичногоВыбытия           КАК УпаковкаЧастичногоВыбытия
		|ИЗ
		|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|ГДЕ
		|	ОписаниеНоменклатурыИС.Номенклатура В (&Номенклатура)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка,
		|	Неопределено,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидПродукцииИС В (
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво))
		|		И СправочникНоменклатура.Весовой
		|			ТОГДА 0
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
		|			И СправочникНоменклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
		|			И СправочникНоменклатура.ВидПродукцииИС <> ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво)
		|		ТОГДА ЗНАЧЕНИЕ (Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидПродукцииИС В (
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво))
		|		И СправочникНоменклатура.Весовой
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияТребуетУказанияЗначения)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ,
		|	Неопределено,
		|	Неопределено
		|ИЗ Справочник.Номенклатура КАК СправочникНоменклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|	ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	СправочникНоменклатура.Ссылка В (&Номенклатура)
		|	И ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
		|";
	
КонецПроцедуры

// Работа с регистром "ОписаниеНоменклатурыИС" при использовании значений описания номенклатуры отличных от напрямую
//   записанных в регистре:
//   * Модифицирует соединение с регистром если в качестве источника описания может использоваться не номенклатура,
//   * Получает значение служебного реквизита "Произвольная единица учета" (для номенклатуры единица учета отличается от
//     маркированной потребительской упаковки),
//   * Получает значение служебного реквизита "Требует взвешивания" (маркированные потребительские упаковки имеют
//     индивидуальный вес).
//
// Параметры:
//  ТекстЗапроса          - Строка - текст запроса с регистром "ОписаниеНоменклатурыИС" (исходящий),
//  ПутьКРегистру         - Строка - имя таблицы регистра "ОписаниеНоменклатурыИС" в запросе,
//  ПутьКПолюНоменклатура - Строка - путь к номенклатуре в запросе
Процедура ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, ПутьКРегистру, ПутьКПолюНоменклатура) Экспорт
	
	// Соединение с регистром
	ИмяПоляЗамены = "&ТоварыОписаниеНоменклатурыИС";
	ТекстЗамены = СтрШаблон("%2.Номенклатура = %1", ПутьКПолюНоменклатура, ПутьКРегистру);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоляЗамены, ТекстЗамены);
	// Получение признака Произвольная единица учета
	ИмяПоляЗамены = "&ПроизвольнаяЕдиницаУчета";
	ТекстЗамены = СтрШаблон("ЕСТЬNULL(%1.КоличествоВПотребительскойУпаковке, 1) <> 1
	|	ИЛИ ЕСТЬNULL(%1.ЕмкостьПотребительскойУпаковки, 1) > 1
	|	ИЛИ (%1.Номенклатура ЕСТЬ NULL
	|		И %2.ВидПродукцииИС В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво))
	|		И %2.Весовой)
	|", ПутьКРегистру, ПутьКПолюНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоляЗамены, ТекстЗамены);
	// Получение признака Требует взвешивания
	ИмяПоляЗамены = "&ТребуетВзвешивания";
	ТекстЗамены = СтрШаблон("ЕСТЬNULL(%1.КоличествоВПотребительскойУпаковке, 1) = 0
	|	ИЛИ (%1.Номенклатура ЕСТЬ NULL
	|		И %2.ВидПродукцииИС В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво))
	|		И %2.Весовой)
	|", ПутьКРегистру, ПутьКПолюНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПоляЗамены, ТекстЗамены);
	
КонецПроцедуры


#КонецОбласти

#Область МаркируемаяПродукция

Процедура ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура) Экспорт
	
	ИнтеграцияИСУНФ.ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура);
	
КонецПроцедуры

#КонецОбласти

#Область УпаковкиЕдиницыИзмерения

// Коэффициент упаковки.
// 
// Параметры:
// Коэффициент - Число - Выходное значение коэффициента упаковки.
//  Упаковка - ОпределяемыйТип.Упаковка - Упаковка
//  Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура
// КэшированныеЗначения - Произвольный - Кэшированные значениия
Процедура КоэффициентУпаковки(Коэффициент, Знач Упаковка, Знач Номенклатура, КэшированныеЗначения) Экспорт
	
	Если ЗначениеЗаполнено(Упаковка) И ТипЗнч(Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
	Иначе
		Коэффициент = 1;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает объем упаковки или единицы измерения в литрах.
//  * Если не задана упаковка, то для единицы учета номенклатуры
//  * Если задана упаковка, то для указанной упаковки
//  * Если задана единица измерения, то для указанной единицы измерения
// 
// Параметры:
//  Объем - Число - Объем упаковки (исходящий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Номенклатура
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения, Неопределено - Упаковка или единица измерения номенклатуры
//  КэшированныеЗначения - Произвольный - Кэшированные значения
Процедура ОбъемУпаковки(Объем, Знач Номенклатура, Знач Упаковка, КэшированныеЗначения) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Возвращает коэффициенты переданной единицы измерения
// 
// Параметры:
//  Упаковка - ОпределяемыйТип.Упаковка, ОпределяемыйТип.ЕдиницаИзмерения - Упаковка или единица измерения
//  Номенклатура - Массив Из ОпределяемыйТип.Номенклатура - Номенклатура
//  КоэффициентыУпаковокНоменклатуры - Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.Номенклатура
//   * Значение - структура:
//   * КодОшибки - Число  - Код ошибки получения коэффициента:
//        0 - Нет ошибок;
//        1 - Не заполнена единица измерения в справочнике 'ЕдиницыИзмеренияВЕТИС';
//        2 - В справочнике 'Номенклатура' выключена возможность пересчета количества в соответствующую мерную единицу измерения;
//        3 - Не удалось сопоставить единицу хранения справочника 'Номенклатура' с единицей измерения 'Упаковка'.
//   * Коэффициент - Число  - Коэффициент пересчета единицы измерения из 'Упаковка'.
Процедура ПриОпределенииКоэффициентовУпаковки(Упаковка, Номенклатура, КоэффициентыУпаковокНоменклатуры) Экспорт
	
	Если Номенклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонРезультата = Новый Структура;
	ШаблонРезультата.Вставить("КодОшибки",   0);
	ШаблонРезультата.Вставить("Коэффициент", 1);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|ПОМЕСТИТЬ втДанныеНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	1 КАК Коэффициент,
	|	втДанныеНоменклатуры.Ссылка КАК Номенклатура
	|ИЗ
	|	втДанныеНоменклатуры КАК втДанныеНоменклатуры
	|ГДЕ
	|	втДанныеНоменклатуры.ЕдиницаИзмерения = &Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЕдиницыИзмерения.Коэффициент,
	|	втДанныеНоменклатуры.Ссылка
	|ИЗ
	|	втДанныеНоменклатуры КАК втДанныеНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО втДанныеНоменклатуры.Ссылка = ЕдиницыИзмерения.Владелец
	|ГДЕ
	|	(ЕдиницыИзмерения.Ссылка = &Упаковка
	|			ИЛИ ЕдиницыИзмерения.ЕдиницаИзмеренияПоКлассификатору = &Упаковка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ЕдиницыИзмерения.Коэффициент,
	|	втДанныеНоменклатуры.Ссылка
	|ИЗ
	|	втДанныеНоменклатуры КАК втДанныеНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО втДанныеНоменклатуры.КатегорияНоменклатуры = ЕдиницыИзмерения.Владелец
	|ГДЕ
	|	(ЕдиницыИзмерения.Ссылка = &Упаковка
	|			ИЛИ ЕдиницыИзмерения.ЕдиницаИзмеренияПоКлассификатору = &Упаковка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка",     Упаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонРезультата);
		
		Если Выборка.Коэффициент = 0 Тогда
			Результат.Коэффициент = 1;
			Результат.КодОшибки = 3;
		Иначе
			Результат.Коэффициент = Выборка.Коэффициент;
		КонецЕсли;
		
		КоэффициентыУпаковокНоменклатуры.Вставить(Выборка.Номенклатура, Результат);
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре требуется определить единицу измерения веса с кодом по ОКЕИ 166.
// Используется для пересчета упаковок в килограммы.
// 
// Параметры:
//  ЕдиницаИзмеренияКилограмм - ОпределяемыйТип.Упаковка - Единица измерения веса (килограмм).
Процедура ЕдиницаИзмеренияКилограмм(ЕдиницаИзмеренияКилограмм) Экспорт
	
	Результат = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("166");
	Если ЗначениеЗаполнено(Результат) Тогда
		ЕдиницаИзмеренияКилограмм = Результат;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить единицу измерения объема с кодом по ОКЕИ 112.
// Используется для пересчета упаковок в литры.
//  
// Параметры:
//  ЕдиницаИзмеренияЛитр - ОпределяемыйТип.Упаковка - Единица измерения объема (литр).
Процедура ЕдиницаИзмеренияЛитр(ЕдиницаИзмеренияЛитр) Экспорт
	
	Результат = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("112");
	Если ЗначениеЗаполнено(Результат) Тогда
		ЕдиницаИзмеренияЛитр = Результат;
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для получения значения коэффициента, веса и объема упаковки
//
// Параметры:
//  ДанныеУпаковок - ТаблицаЗначений - Таблица с колонками:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на номенклатуру - обязательно для указания.
//   * Упаковка     - ОпределяемыйТип.Упаковка - упаковка, данные которой нужно получить - если не указана,
//                    тогда получаются данные базовой единицы измерения номенклатуры.
//   * Вес          - Число - Вес упаковки.
//   * Объем        - Число - Объем упаковки.
//   * Коэффициент  - Число - Коэффициент упаковки.
//  ВесОбъемУпаковкиВЕдиницеКонстантИС - Булево - если ЛОЖЬ, то вес и объем возвращаются в единицах измерения веса и объема,
//                                       иначе - в единицах измерения, указанных в константах:
//                                       ЕдиницаИзмеренияКилограммИС, ЕдиницаИзмеренияЛитрИС.
//
Процедура КоэффициентВесОбъемУпаковок(ДанныеУпаковок, ВесОбъемУпаковкиВЕдиницеКонстантИС = Истина) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#Область ДляERP

//// Предназначена для получения значения коэффициента, веса и объема упаковки
////
//// Параметры:
////  ДанныеУпаковок - ТаблицаЗначений - Таблица с колонками:
////   * Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на номенклатуру - обязательно для указания.
////   * Упаковка     - ОпределяемыйТип.Упаковка - упаковка, данные которой нужно получить - если не указана,
////                    тогда получаются данные базовой единицы измерения номенклатуры.
////   * Вес          - Число - Вес упаковки.
////   * Объем        - Число - Объем упаковки.
////   * Коэффициент  - Число - Коэффициент упаковки.
////  ВесОбъемУпаковкиВЕдиницеКонстантИС - Булево - если ЛОЖЬ, то вес и объем возвращаются в единицах измерения веса и объема,
////                                       иначе - в единицах измерения, указанных в константах:
////                                       ЕдиницаИзмеренияКилограммИС, ЕдиницаИзмеренияЛитрИС.
////
//Процедура КоэффициентВесОбъемУпаковок(ДанныеУпаковок, ВесОбъемУпаковкиВЕдиницеКонстантИС = Истина) Экспорт
//	
//	//++ НЕ ГОСИС
//	
//	Если ДанныеУпаковок.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТаблицаДляЗапроса = Новый ТаблицаЗначений;
//	ТаблицаДляЗапроса.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
//	ТаблицаДляЗапроса.Колонки.Добавить("Упаковка",     Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
//	ТаблицаДляЗапроса.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
//	
//	Для Каждого Строка Из ДанныеУпаковок Цикл
//		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
//			НоваяСтрока = ТаблицаДляЗапроса.Добавить();
//			НоваяСтрока.Номенклатура = Строка.Номенклатура;
//			НоваяСтрока.Упаковка     = Строка.Упаковка;
//			НоваяСтрока.ИндексСтроки = ДанныеУпаковок.Индекс(Строка);
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если ВесОбъемУпаковкиВЕдиницеКонстантИС Тогда
//		ТекстЗапросаКоэффициентовВесаИОбъема =
//		"ВЫБРАТЬ
//		|	ВЫБОР
//		|		КОГДА ЕдиницаИзмеренияКилограммИС.Значение.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
//		|		ТОГДА ЕдиницаИзмеренияКилограммИС.Значение.Коэффициент
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК КоэффициентВеса,
//		|	ВЫБОР
//		|		КОГДА ЕдиницаИзмеренияЛитрИС.Значение.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
//		|		ТОГДА ЕдиницаИзмеренияЛитрИС.Значение.Коэффициент
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК КоэффициентОбъема
//		|ПОМЕСТИТЬ КоэффициентыВесаИОбъема
//		|ИЗ
//		|	Константа.ЕдиницаИзмеренияКилограммИС КАК ЕдиницаИзмеренияКилограммИС,
//		|	Константа.ЕдиницаИзмеренияЛитрИС КАК ЕдиницаИзмеренияЛитрИС";
//	Иначе
//		ТекстЗапросаКоэффициентовВесаИОбъема =
//		"ВЫБРАТЬ
//		|	1 КАК КоэффициентВеса,
//		|	1 КАК КоэффициентОбъема
//		|ПОМЕСТИТЬ КоэффициентыВесаИОбъема";
//	КонецЕсли;
//	
//	ИсточникУпаковки        = "Данные.Упаковка";
//	ИсточникУпаковкиБазовая = "Данные.ЕдиницаИзмерения";
//	ИсточникНоменклатуры    = "Данные.Номенклатура";
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ДанныеУпаковок", ТаблицаДляЗапроса);
//	Запрос.Текст = СтрШаблон(
//	"ВЫБРАТЬ
//	|	ДанныеУпаковок.ИндексСтроки,
//	|	ДанныеУпаковок.Номенклатура,
//	|	ДанныеУпаковок.Упаковка
//	|ПОМЕСТИТЬ ДанныеУпаковок
//	|ИЗ
//	|	&ДанныеУпаковок КАК ДанныеУпаковок
//	|;
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ДанныеУпаковок.ИндексСтроки КАК ИндексСтроки,
//	|	ДанныеУпаковок.Номенклатура КАК Номенклатура,
//	|	ВЫБОР
//	|		КОГДА ДанныеУпаковок.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
//	|		ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
//	|		ИНАЧЕ ДанныеУпаковок.Упаковка
//	|	КОНЕЦ КАК Упаковка,
//	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
//	|ПОМЕСТИТЬ Данные
//	|ИЗ
//	|	ДанныеУпаковок КАК ДанныеУпаковок
//	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
//	|	ПО ДанныеУпаковок.Номенклатура = СправочникНоменклатура.Ссылка
//	|;
//	|////////////////////////////////////////////////////////////////////////////////
//	|%1
//	|;
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	Данные.ИндексСтроки,
//	|	%2 КАК Коэффициент,
//	|	ВЫБОР
//	|		КОГДА ЕстьNULL(КоэффициентыВесаИОбъема.КоэффициентВеса, 0) = 0
//	|		ТОГДА 0
//	|		ИНАЧЕ ВЫРАЗИТЬ(%3 / КоэффициентыВесаИОбъема.КоэффициентВеса КАК ЧИСЛО(18, 6))
//	|	КОНЕЦ КАК ВесЕдиницы,
//	|	ВЫБОР
//	|		КОГДА ЕстьNULL(КоэффициентыВесаИОбъема.КоэффициентОбъема, 0) = 0
//	|		ТОГДА 0
//	|		ИНАЧЕ ВЫРАЗИТЬ(%4 / КоэффициентыВесаИОбъема.КоэффициентОбъема КАК ЧИСЛО(18, 6))
//	|	КОНЕЦ КАК ОбъемЕдиницы
//	|ИЗ
//	|	Данные КАК Данные
//	|	ПОЛНОЕ СОЕДИНЕНИЕ КоэффициентыВесаИОбъема КАК КоэффициентыВесаИОбъема
//	|	ПО ИСТИНА",
//	ТекстЗапросаКоэффициентовВесаИОбъема,
//	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры),
//	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковкиБазовая, ИсточникНоменклатуры, Ложь),
//	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковкиБазовая, ИсточникНоменклатуры, Ложь));
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		Строка = ДанныеУпаковок[Выборка.ИндексСтроки];
//		Строка.Коэффициент = Выборка.Коэффициент;
//		Строка.Вес         = Выборка.Коэффициент * Выборка.ВесЕдиницы;
//		Строка.Объем       = Выборка.Коэффициент * Выборка.ОбъемЕдиницы;
//	КонецЦикла;
//	
//	//-- НЕ ГОСИС
//	
//	Возврат;
//	
//КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти


#Область ОрганизацииИКонтрагенты

// Требуется определить массив ссылок служебных организаций, исключаемых из списков выбора в библиотеке.
// 
// Параметры:
//  СписокОрганизаций - Массив из ОпределяемыйТип.Организация - переопределяемый параметр, массив организаций, исключаемых из списков.
Процедура ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций) Экспорт
	
	ИнтеграцияИСУНФ.ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций);
	
КонецПроцедуры

// Проверяет использование подразделений в информационной базе.
// 
// Параметры:
//  Использовать - Булево - Подразделения используются (исходящий).
//
Процедура ИспользованиеПодразделений(Использовать) Экспорт
	
	ИнтеграцияГИСМУНФ.ИспользоватьПодразделения(Использовать);
	
КонецПроцедуры

// Определяет использование в инофрмационной базе обособленных подразделений выделенных на отдельный баланс
// 
// Параметры:
//  Использовать - Булево - Используются подразделения, выделенных на обособленный баланс
//
Процедура ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс(Использовать) Экспорт
	
	
КонецПроцедуры

// Процедура заполняет признак использования гос.контрактов по 275ФЗ.
//
// Параметры:
//  Используется - Булево - Признак использования гос.контрактов по 275ФЗ. Значение по умолчанию Ложь.
Процедура ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(Используется) Экспорт

	
	Возврат;

КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений);
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение соответствия ИНН (или налогового номера в стране регистрации) и контрагентов
// для переданного массива контрагентов.
//
// Параметры:
//  СоответствиеИННКонтрагентам - Соответствие из Строка- соответствие для заполнения:
//   * Ключ - ОпределяемыйТип.КонтрагентГосИС - ссылка на контрагента.
//   * Значение - Строка - ИНН (или его аналог).
//  Контрагенты - Массив из ОпределяемыйТип.КонтрагентГосИС - массив контрагентов.
Процедура ПриОпределенииИНННалоговыхНомеровКонтрагентов(СоответствиеИННКонтрагентам, Контрагенты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКонтрагентов", Контрагенты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Контрагенты.ИНН = """"
	|			ТОГДА Контрагенты.РегистрационныйНомер
	|		ИНАЧЕ Контрагенты.ИНН
	|	КОНЕЦ КАК ИНН,
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&СписокКонтрагентов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеИННКонтрагентам.Вставить(Выборка.Ссылка, Выборка.ИНН);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//  Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//                                                                                              собственную организацию
//                                                                                              или контрагента
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект);
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП/GLN из информационной базы.
//
// Параметры:
//  Сведения      - Структура - структура с реквизитами организации, которые требуется заполнить,
//  Организация   - ОпределяемыйТип.Организация - ссылка на собственную организацию,
//  Подразделение - ОпределяемыйТип.Подразделение - Подразделение организации.
Процедура ПриОпределенииИННКППGLNОрганизации(Сведения, Организация, Подразделение) Экспорт
	
	ИННКППGLNОрганизации = ИнтеграцияИСУНФ.ИННКППGLNОрганизации(Организация, Подразделение);
	ЗаполнитьЗначенияСвойств(Сведения, ИННКППGLNОрганизации);
	
КонецПроцедуры

// Получение кода ОКОПФ по организации.
//
// Параметры:
//  КодОКОПФ    - Строка - Код ОКОПФ организации.
//  Организация - ОпределяемыйТип.Организация - Организация, для которой необходимо получить код ОКОПФ.
//
Процедура КодОКОПФОрганизации(КодОКОПФ, Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		КодОКОПФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОКОПФ");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации)
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	ИнтеграцияИСУНФ.ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация (исходящий),
//              - Неопределено - организация не найдена (исходящий),
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
//
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент (исходящий),
//             - Неопределено - контрагент не найден (исходящий),
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП);
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив Из Строка - Список ИНН.
//  Соответствие - Соответствие Из ОпределяемыйТип.КонтрагентГосИС - Соответсвие вида:
//   * Ключ - Строка - ИНН
//   * Значение - ОпределяемыйТип.КонтрагентГосИС - Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие);
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции налоговых номеров. Ключ - налоговый номер, значение - Контрагент.
//
// Параметры:
//  КоллекцияНалоговыхНомеров - Массив Из Строка - Список налоговых номеров юр.лиц за пределами РФ.
//  Соответствие - Соответствие Из ОпределяемыйТип.КонтрагентГосИС - Соответсвие вида:
//    * Ключ - Строка - Налоговый номер
//    * Значение - ОпределяемыйТип.КонтрагентГосИС - Контрагент
Процедура ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, Соответствие) Экспорт
	
	ИнтеграцияИСУНФ.ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, Соответствие);
	
КонецПроцедуры

// В процедуре необходимо заполнить соответствие по коллекции ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив Из Строка - Список ИНН.
//  Соответствие - Соответствие Из ОпределяемыйТип.Организация - Соответсвие вида:
//   * Ключ - Строка - ИНН организации
//   * Значение - ОпределяемыйТип.Организация - Организация
Процедура ЗаполнитьСоответствиеИННОрганизациям(КоллекцияИНН, Соответствие) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации в прикладном объекте.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - найденная организация
//  Объект      - Произвольный                - объект в котором производится поиск
//
Процедура ПриОпределенииОрганизацииИзПрикладногоОбъекта(Организация, Объект) Экспорт
	
	ИнтеграцияИСУНФ.ПриОпределенииОрганизацииИзПрикладногоОбъекта(Организация, Объект);
	
КонецПроцедуры

#Область ПраваДоступа

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Процедура ПравоСозданияКонтрагента(ДоступРазрешен) Экспорт
	
	ИнтеграцияИСУНФ.ПравоСозданияКонтрагента(ДоступРазрешен);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить
//                                    видимость команд.
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ИнтеграцияИСУНФ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

//Особенности работы с длительными операциями в конкретном окружении
//
//Параметры:
//   Параметры - Структура - параметры фонового задания.
//   ПараметрыВыполнения - см. ДлительныеОперации.ПараметрыВыполненияВФоне.
Процедура НастроитьДлительнуюОперацию(Параметры, ПараметрыВыполнения) Экспорт
	

	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
//  ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
//  ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияУТ

// (См ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании)
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	ИнтеграцияИСУНФ.ПроверитьВозможностьВводаНаОсновании(Документ,
														 Статус,
														 ЕстьОшибкиПроведен,
														 ЕстьОшибкиСтатус,
														 МассивДопустимыхСтатусов,
														 СоглашениеДоступноВнешнемуПользователю);
	
КонецПроцедуры

// Возвращает представление объекта.
// 
// Параметры:
//  Представление - Строка - Исходящий параметр со значением представления.
//  ПараметрОбъект - Строка, ОбъектМетаданных - Наименование типа объекта либо сам объект.
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	ИнтеграцияИСУНФ.УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект);
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//  Представление  - Строка                                     - представление для заполнения,
//  Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//  Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//  Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//  Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия);
	
КонецПроцедуры

#КонецОбласти


#Область ВызовыИзБСП

// (См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту)
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	ИнтеграцияИСУНФ.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	
КонецПроцедуры

#КонецОбласти

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// В процедуре необходимо реализовать проверку возможности выбора серии для номенклатуры.
// 
// Параметры:
//  ДанныеДляРасчетаСерии  - Структура - Данные для расчета серий.
//  ПараметрыУказанияСерий - Структура - Параметры указания серий.
//  ТребуетсяВыбор         - Булево - исходящий, признак необходимости выбора серии.
//  СерияДолжнаБытьУказана - Булево - исходящий, признак обязательного заполнения серии.
//  КэшированныеЗначения   - Произвольный - кэшированные значения
//
Процедура ПриОпределенииНеобходимостиВыбораСерии(ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяВыбор, СерияДолжнаБытьУказана, КэшированныеЗначения = Неопределено) Экспорт
	
	ИспользоватьСерииНоменклатуры = Неопределено;
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ПараметрыУказанияСерий) = Тип("Структура") Тогда
		ПараметрыУказанияСерий.Свойство("ИспользоватьСерииНоменклатуры", ИспользоватьСерииНоменклатуры);
	КонецЕсли;
	Если ИспользоватьСерииНоменклатуры = Неопределено Тогда
		ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	КонецЕсли;
	Если ИспользоватьСерииНоменклатуры = Ложь Тогда
		Возврат;
	КонецЕсли;
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = Новый Структура;
	КонецЕсли;
	Если Не КэшированныеЗначения.Свойство("ПризнакУказанияСерий") Тогда
		КэшированныеЗначения.Вставить("ПризнакУказанияСерий", Новый Соответствие);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляРасчетаСерии.Номенклатура) Тогда
		ТребуетсяВыбор = КэшированныеЗначения.ПризнакУказанияСерий.Получить(ДанныеДляРасчетаСерии.Номенклатура);
		Если ТребуетсяВыбор = Неопределено Тогда
			ТребуетсяВыбор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляРасчетаСерии.Номенклатура, "ИспользоватьСерииНоменклатуры");
			КэшированныеЗначения.ПризнакУказанияСерий.Вставить(ДанныеДляРасчетаСерии.Номенклатура, ТребуетсяВыбор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет имена реквизитов, от значений которых зависят параметры указания серий.
//
// Параметры:
//  ИменаРеквизитов - Строка           - Результат заполнения.
//  ТипОбъекта      - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
Процедура ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ИменаРеквизитов, ТипОбъекта) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры  - Произвольный     - выходной, параметры указания серий, состав полей определен в прикладной конфигурации.
//  ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//  Объект     - Структура        - Значения реквизитов объекта, необходимых для заполнения параметров указания серий.
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект);
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры - Структура - выходной, параметры указания серий, состав полей определен в прикладной конфигурации.
//  Объект    - ДокументОбъект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                             указания серий.
//  МенеджерОбъекта - ДокументМенеджер - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта);
	
КонецПроцедуры

// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" объекта,
//   перерасчитывает статусы указания серий строках товарной табличной части.
//
// Параметры:
//  Форма                       - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыФормыУказанияСерий - Структура           - Состав полей определен в функции НоменклатураСервер.ПараметрыФормыУказанияСерий.
//  КэшированныеЗначения        - Структура           - Сохраненные значения параметров, используемых при обработке
//                                                      строки таблицы.
Процедура ОбработатьУказаниеСерий(Форма, ПараметрыФормыУказанияСерий, КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках товарной табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - Общая форма или основной реквизит формы объекта.
//  ПараметрыУказанияСерий - Произвольный - Параметры указания серий номенклатуры.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерийФормы(Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУказанияСерийФормы(Менеджер, Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаПараметрыУказанияСерий) Тогда
		ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Форма[ИмяРеквизитаПараметрыУказанияСерий], Форма[ИмяРеквизитаОбъект], Менеджер);
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий 
// другим строкам таблицы.
//
// Параметры:
//  Форма                      - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыУказанияСерий     - Произвольный - См. ИнтеграцияИС.ПараметрыУказанияСерий.
//  ТекущаяСтрокаИдентификатор - Число               - Идентификатор текущей строки товаров в форме объекта.
//  КэшированныеЗначения       - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
	Форма,
	ПараметрыУказанияСерий = "",
	ТекущаяСтрокаИдентификатор,
	КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса заполнения статусов указания серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Произвольный     - См. ИнтеграцияИС.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	ИнтеграцияИСУНФ.ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий);
	
КонецПроцедуры

// Заполняет текст запроса проверки заполнения серий в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса проверки заполнения серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Произвольный     - См. ИнтеграцияИС.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаПроверкиЗаполненияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Устарело. Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет, при необходимости создает серии в документе ГосИС или его выделенных строках
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект для заполнения
//  Товары - ДанныеФормыКоллекция, ТаблицаЗначений - табличная часть документа
//  ВыделенныеСтроки - Массив Из ДанныеФормыЭлементКоллекции - выделенные строки документа
//  ПараметрыУказанияСерий - см. ИнтеграцияИС.ПараметрыУказанияСерий
//  РезультатЗаполненияСерий - см. ИнтеграцияИС.РезультатГенерацииИЗаполненияСерий.
Процедура ПриГенерацииСерий(Объект, Товары, ВыделенныеСтроки, ПараметрыУказанияСерий, РезультатЗаполненияСерий) Экспорт

	Возврат;

КонецПроцедуры

#КонецОбласти

#Область Локализация

Процедура ПриОпределенииМенеджераОбъектаПоПолномуИмени(МенеджерОбъекта, ПолноеИмя) Экспорт
	
	ИнтеграцияИСУНФ.ПриОпределенииМенеджераОбъектаПоПолномуИмени(МенеджерОбъекта, ПолноеИмя);
	
КонецПроцедуры

Процедура ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка) Экспорт
	
	ИнтеграцияИСУНФ.ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// В функции требуется определить право на регистрацию нового штрихкода для текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право на регистрацию штрихкода. Ложь - в противном случае.
//
Процедура ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен) Экспорт
	
	ИнтеграцияИСУНФ.ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен);
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	ИнтеграцияИСУНФ.ИспользованиеХарактеристик(Использование, Номенклатура);
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования серий (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	ИнтеграцияИСУНФ.ИспользованиеСерий(Использование, Номенклатура);
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	ИнтеграцияИСУНФ.ИспользованиеУпаковок(Использование, Номенклатура);
	
КонецПроцедуры

// В процедуре требуется определить признак использования видов номенклатуры.
//
// Параметры:
//  Использование - Булево - Признак использования видов номенклатуры в программе.
//
Процедура ИспользованиеВидовНоменклатуры(Использование) Экспорт
	
	ИнтеграцияИСУНФ.ИспользованиеВидовНоменклатуры(Использование);
	
КонецПроцедуры
