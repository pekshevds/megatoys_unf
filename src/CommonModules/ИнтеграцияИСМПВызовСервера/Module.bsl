#Область ПрограммныйИнтерфейс

#Область ДлительныеОперации

// Подготавливает сообщения к передаче в сервис ИСМП.
//
// Параметры:
//  ВходящиеДанные - Массив Из (См. ИнтерфейсИСМПКлиентСервер.ПараметрыОбработкиДокументов)
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - см. функцию ПодготовитьСообщенияКПередаче().
//
Функция ПодготовитьКПередаче(ВходящиеДанные, УникальныйИдентификатор = Неопределено) Экспорт
	
	Организации = Неопределено;
	
	ПараметрыОбмена = ИнтеграцияИСМП.ПараметрыОбмена(Организации, УникальныйИдентификатор);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ВходящиеДанные",    ВходящиеДанные);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ПодготовитьКПередачеДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подготавливает сообщения к передаче в сервис ИСМП.
//
// Параметры:
//  ПараметрыЗагрузки - Структура - Структура со свойствами:
//   * Организация - ОпределяемыйТип.Организация - Организация
//   * Интервал - Структура - Структура со свойствами:
//     ** НачалоПериода - Дата - Дата начала периода.
//     ** КонецПериода - Дата - Дата окончания периода.
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - см. функцию ПодготовитьСообщенияКПередаче().
//
Функция ЗагрузитьВходящиеДокументы(ПараметрыЗагрузки, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбмена = ИнтеграцияИСМП.ПараметрыОбмена(ПараметрыЗагрузки.Организация, УникальныйИдентификатор);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка входящих документов из ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ЗагрузитьВходящиеДокументыДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ЗагрузитьВходящиеДокументыУниверсально(ПараметрыЗагрузки, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбмен(Организации = Неопределено, УникальныйИдентификатор = Неопределено, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ПараметрыОбмена = ИнтеграцияИСМП.ПараметрыОбмена(Организации, УникальныйИдентификатор);
	
	ИнтеграцияИСМПСлужебный.ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ВыполнитьОбменДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ВыполнитьОбменУниверсально(ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбмена(ПодписанныеДанныеПоОрганизациям, АдресВоВременномХранилище) Экспорт
	
	ПараметрыОбмена = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	// Установка параметров сеанса выполняется НЕ в фоновом задании.
	ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено;
	ПодписанныеСообщенияПоОрганизациям     = Неопределено;
	Если ПодписанныеДанныеПоОрганизациям <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПодписанныеДанныеПоОрганизациям Цикл
			
			Организация = КлючИЗначение.Ключ;
			Сообщения   = КлючИЗначение.Значение;
			
			ЗапроситьУстановитьКлючСессии = Новый Массив;
			ПодписанныеСообщения          = Новый Массив;
			
			Для Каждого Сообщение Из Сообщения Цикл
				Если Сообщение.Свойство("ПараметрыАвторизации") Тогда
					ЗапроситьУстановитьКлючСессии.Добавить(Сообщение);
				Иначе
					ПодписанныеСообщения.Добавить(Сообщение);
				КонецЕсли;
				Если ЭтоАдресВременногоХранилища(Сообщение.СвойстваПодписи) Тогда
					Сообщение.СвойстваПодписи = ПолучитьИзВременногоХранилища(Сообщение.СвойстваПодписи);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗапроситьУстановитьКлючСессии.Количество() > 0 Тогда
				Если ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено Тогда
					ТребуетсяЗапроситьУстановитьКлючСессии = Новый Соответствие;
				КонецЕсли;
				ТребуетсяЗапроситьУстановитьКлючСессии.Вставить(Организация, ЗапроситьУстановитьКлючСессии);
			КонецЕсли;
			
			Если ПодписанныеСообщения.Количество() > 0 Тогда
				Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
					ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
				КонецЕсли;
				ПодписанныеСообщенияПоОрганизациям.Вставить(Организация, ПодписанныеСообщения);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ИнтеграцияИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
		ТребуетсяЗапроситьУстановитьКлючСессии,
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	// В процессе установки ключа сессии могли произойти ошибки.
	Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
			ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
	
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено
		И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
		ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
		ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
		ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
		ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
		ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
		ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
		ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыОбмена.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ИС МП'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПодписанныеСообщенияПоОрганизациям", ПодписанныеСообщенияПоОрганизациям);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",                    ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС",                  ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияИСМПСлужебный.ПродолжитьВыполнениеОбменаДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияИСМПСлужебный.ПродолжитьВыполнениеОбменаУниверсально(
			ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ЧастичноеВыбытие

// Данные представления настройки номенклатуры. Формирует гиперссылку для отображения в карточке номенклатуры.
// Гиперссылка открывает форму настройки номенклатуры.
// 
// Параметры:
//  ПараметрыФормирования - см. ИнтеграцияИСМПКлиентСервер.ПараметрыФормированияДанныхПредставленияНастройкиНоменклатуры
// Возвращаемое значение:
//  Неопределено, ФорматированнаяСтрока - Данные представления настройки номенклатуры.
Функция ПредставлениеНастройкиПараметровНоменклатуры(ПараметрыФормирования) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ВидПродукции                           = ПараметрыФормирования.ВидПродукции;
	СсылкаНаОбъект                         = ПараметрыФормирования.СсылкаНаОбъект;
	РазрешеноРедактированиеРеквизитов      = ПараметрыФормирования.РазрешеноРедактированиеРеквизитов;
	ЕстьПравоРедактирования                = ПараметрыФормирования.ЕстьПравоРедактирования;
	ТребуетВзвешивания                     = ПараметрыФормирования.ТребуетВзвешивания;
	ПредставлениеВНесколькоСтрок           = ПараметрыФормирования.ПредставлениеВНесколькоСтрок;
	ДопустимаНастройкаЛогистическойЕдиницы = ПараметрыФормирования.ДопустимаНастройкаЛогистическойЕдиницы;
	ОтступПриВыводеНастройкиВидаУпаковки   = ПараметрыФормирования.ОтступПриВыводеНастройкиВидаУпаковки;
	ВыводитьНастройкиВидовУпаковокПоGTIN   = ПараметрыФормирования.ВыводитьГиперссылкуНастройкиВидовУпаковокПоGTIN;
	РазделительНастройкиВидовУпаковок      = ПараметрыФормирования.РазделительНастройкиВидовУпаковокПоGTIN;
	
	Если Не ЗначениеЗаполнено(ВидПродукции)
		И ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(СсылкаНаОбъект);
	КонецЕсли;
	Если Не ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, Истина) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ДанныеПредставления            = Новый Массив();
	ПоддерживаетсяЧастичноеВыбытие = ИнтеграцияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции);
	ЭтоМолочнаяПродукция           = ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции);
	ЭтоТабак                       = (ВидПродукции = Перечисления.ВидыПродукцииИС.Табак);
	ЭтоПиво                        = (ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво);
	ЭтоБАПиво                      = (ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво);
	ЭтоАльтернативныйТабак         = (ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
	ЭтоДухи                        = (ВидПродукции = Перечисления.ВидыПродукцииИС.Духи);
	ТолькоПросмотр                 = Ложь;
	ДопустимаНастройкаТабака       = (ЭтоТабак И ДопустимаНастройкаЛогистическойЕдиницы);
	
	Если Не РазрешеноРедактированиеРеквизитов
		Или Не ЕстьПравоРедактирования Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		ИмяГиперссылкиНастройки = "ГиперссылкаОткрытьФормуНастройкиПараметровНоменклатурыИСМПДляПросмотра";
		ТекстГиперсылкиОткрытияФормы = НСтр("ru = 'Подробнее'");
	Иначе
		ИмяГиперссылкиНастройки = "ГиперссылкаОткрытьФормуНастройкиПараметровНоменклатурыИСМП";
		ТекстГиперсылкиОткрытияФормы = НСтр("ru = 'Настроить'");
	КонецЕсли;
	
	Если ПоддерживаетсяЧастичноеВыбытие Тогда
		УчаствуетКакПродаваемая = ИнтеграцияИСМП.ОсновнаяНоменклатураЧастичногоВыбытия(СсылкаНаОбъект);
		ОбщийСписокНоменклатуры = УчаствуетКакПродаваемая.ВыгрузитьКолонку("Номенклатура");
	Иначе
		ОбщийСписокНоменклатуры = Новый Массив();
	КонецЕсли;
	ОбщийСписокНоменклатуры.Добавить(СсылкаНаОбъект);
	
	ЭтоОтдельнаяНоменклаутра    = Ложь;
	ОписаниеНоменклатур         = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(ОбщийСписокНоменклатуры);
	ОписаниеНоменклатуры        = ОписаниеНоменклатур[СсылкаНаОбъект];
	ВариантИспользованияЕдиницы = ОписаниеНоменклатуры.ВариантИспользованияЕдиницыХранения;
	
	Если ПоддерживаетсяЧастичноеВыбытие Тогда
		
		ДанныеПредставленияОсновнойНоменклатуры = Новый Массив();
		
		Для Каждого СтрокаТаблицы Из УчаствуетКакПродаваемая Цикл
			ТекущееОписаниеНоменклатуры = ОписаниеНоменклатур[СтрокаТаблицы.Номенклатура];
			Если ЗначениеЗаполнено(ТекущееОписаниеНоменклатуры.ВариантЧастичногоВыбытия) Тогда
				ЭтоОтдельнаяНоменклаутра = Истина;
				Если ДанныеПредставленияОсновнойНоменклатуры.Количество() Тогда
					ДанныеПредставленияОсновнойНоменклатуры.Добавить(Символы.ПС);
				КонецЕсли;
				ДанныеПредставленияОсновнойНоменклатуры.Добавить(
					Новый ФорматированнаяСтрока(
						СтрокаТаблицы.НоменклатураПредставление,,,,
						ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Номенклатура)));
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоОтдельнаяНоменклаутра Тогда
			
			Если ЭтоДухи Или ЭтоПиво Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'Используется для продажи на разлив:'"));
			Иначе
				ДанныеПредставления.Добавить(НСтр("ru = 'Используется для поштучной продажи:'"));
			КонецЕсли;
			ДанныеПредставления.Добавить(" ");
			ДанныеПредставления.Добавить(Новый ФорматированнаяСтрока(ДанныеПредставленияОсновнойНоменклатуры));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоОтдельнаяНоменклаутра Тогда
		
		ТребуетВзвешиванияОпределеноВКарточкеНоменклатуры = (ТребуетВзвешивания <> Неопределено И ТребуетВзвешивания);
		
		Если ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияТребуетУказанияЗначения
			Или ТребуетВзвешиванияОпределеноВКарточкеНоменклатуры Тогда
			ДанныеПредставления.Добавить(НСтр("ru = 'Маркируемые потребительские упаковки требуют взвешивания'"));
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ПотребительскаяУпаковка
			Или Не ЗначениеЗаполнено(ВариантИспользованияЕдиницы) Тогда
			Если ЭтоМолочнаяПродукция Или ЭтоПиво Или ЭтоБАПиво Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'Соответствует потребительской упаковке'"));
			ИначеЕсли ДопустимаНастройкаТабака Или ЭтоАльтернативныйТабак Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'Соответствует пачке'"));
			ИначеЕсли ЭтоДухи Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'Соответствует флакону'"));
			КонецЕсли;
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияТребуетУказанияЗначения Тогда
			ДанныеПредставления.Добавить(НСтр("ru = 'Потребительские упаковки требуют взвешивания'"));
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка Тогда
			
			ЗначениеКоличества = 1;
			Если ЗначениеЗаполнено(ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке) Тогда
				ЗначениеКоличества = Окр(1 / ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке);
			КонецЕсли;
			ДанныеПредставления.Добавить(НСтр("ru = 'Содержит'"));
			ДанныеПредставления.Добавить(" ");
			
			Если ЭтоАльтернативныйТабак Или ДопустимаНастройкаТабака Тогда
				ДанныеПредставления.Добавить(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1 пачку;;%1 пачки;%1 пачек;%1 пачек'"),
						ЗначениеКоличества));
			ИначеЕсли ЭтоДухи Тогда
				ДанныеПредставления.Добавить(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1 флакон;;%1 флакона;%1 флаконов;%1 флакона'"),
						ЗначениеКоличества));
			Иначе
				ДанныеПредставления.Добавить(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = ';%1 потребительскую упаковку;;%1 потребительских упаковок;%1 потребительских упаковок;%1 потребительская упаковка'"),
						ЗначениеКоличества));
			КонецЕсли;
			
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.МернаяПродукцияСФиксированнымЗначением Тогда
			
			ДанныеНоменклатуры = ИнтеграцияИСМП.ДанныеНоменклатуры(СсылкаНаОбъект);
			ДанныеПредставления.Добавить(
				СтрШаблон(
					НСтр("ru = 'В потребительской упаковке %1 %2'"),
					ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке,
					ДанныеНоменклатуры.ЕдиницаИзмерения));
		
		ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ЗаданУпаковками Тогда
			
			ДанныеНоменклатуры = ИнтеграцияИСМП.ДанныеНоменклатуры(СсылкаНаОбъект);
			ДанныеПредставления.Добавить(
				СтрШаблон(
					НСтр("ru = 'Маркируемая потребительская упаковка: %1'"),
					ОписаниеНоменклатуры.ПотребительскаяУпаковка));
			
		КонецЕсли;
		
		Если ПоддерживаетсяЧастичноеВыбытие Тогда
			
			Если ДанныеПредставления.Количество() Тогда
				ДанныеПредставления.Добавить(". ");
			КонецЕсли;
			Если ПредставлениеВНесколькоСтрок Тогда
				ДанныеПредставления.Добавить(Символы.ПС);
			КонецЕсли;
			
			ДанныеПредставления.Добавить(ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПродукции));
			ДанныеПредставления.Добавить(":");
			ДанныеПредставления.Добавить(" ");
			Если ЗначениеЗаполнено(ОписаниеНоменклатуры.ВариантЧастичногоВыбытия) Тогда
				Если ЭтоДухи Тогда
					ДанныеПредставления.Добавить(
						СтрШаблон(
							НСтр("ru = '%1 мл. во флаконе'"),
							ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки));
				ИначеЕсли ЭтоПиво или ЭтоБАПиво Тогда
					ДанныеПредставления.Добавить(
						СтрШаблон(
							НСтр("ru = '%1 л. в кеге'"),
							ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки));
				Иначе
					ДанныеПредставления.Добавить(
						СтрШаблон(
							НСтр("ru = '%1 шт. в пачке'"),
							ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки));
				КонецЕсли;
			ИначеЕсли ВариантИспользованияЕдиницы = Перечисления.ВариантыИспользованияЕдиницыХраненияИСМП.ГрупповаяЛогистическаяУпаковка Тогда
				ДанныеПредставления.Добавить(НСтр("ru = 'не поддерживается'"));
			Иначе
				ДанныеПредставления.Добавить(НСтр("ru = 'не используется'"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеПредставления.Количество()
			И Не ТребуетВзвешиванияОпределеноВКарточкеНоменклатуры Тогда
			ДанныеПредставления.Добавить(". ");
			ДанныеПредставления.Добавить(Новый ФорматированнаяСтрока(ТекстГиперсылкиОткрытияФормы,,,, ИмяГиперссылкиНастройки));
		КонецЕсли;
		
	КонецЕсли;
	
	// Виды упаковок
	Если ВыводитьНастройкиВидовУпаковокПоGTIN Тогда
		Если ДанныеПредставления.Количество() Тогда
			Если ОтступПриВыводеНастройкиВидаУпаковки Тогда
				ДанныеПредставления.Добавить(Символы.ПС);
			ИначеЕсли РазделительНастройкиВидовУпаковок = Неопределено Тогда
				ДанныеПредставления.Добавить(". ");
			КонецЕсли;
			Если РазделительНастройкиВидовУпаковок <> Неопределено Тогда
				ДанныеПредставления.Добавить(РазделительНастройкиВидовУпаковок);
			КонецЕсли;
		КонецЕсли;
		ДанныеПредставления.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Виды упаковок по GTIN'"),,,,
				"ГиперссылкаОткрытьФормуНастройкиВидовУпаковокПоGTINИСМП"));
	КонецЕсли;
	
	Если ДанныеПредставления.Количество() Тогда
		ВозвращаемоеЗначение = Новый ФорматированнаяСтрока(ДанныеПредставления);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устарел. см. ПредставлениеНастройкиПараметровНоменклатуры
Функция ДанныеПредставленияНастройкиНоменклатуры(СсылкаНаОбъект, ВидПродукции = Неопределено, ЕстьПравоРедактирования = Истина, РазрешеноРедактированиеРеквизитов = Истина) Экспорт
	
	ПараметрыФормированияДанных = ИнтеграцияИСМПКлиентСервер.ПараметрыФормированияДанныхПредставленияНастройкиНоменклатуры();
	ПараметрыФормированияДанных.СсылкаНаОбъект                    = СсылкаНаОбъект;
	ПараметрыФормированияДанных.ВидПродукции                      = ВидПродукции;
	ПараметрыФормированияДанных.ЕстьПравоРедактирования           = ЕстьПравоРедактирования;
	ПараметрыФормированияДанных.РазрешеноРедактированиеРеквизитов = РазрешеноРедактированиеРеквизитов;
	
	Возврат ПредставлениеНастройкиПараметровНоменклатуры(ПараметрыФормированияДанных);
	
КонецФункции

Функция ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПродукции) Экспорт
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Духи
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
		Возврат НСтр("ru = 'Продажа на разлив'");
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		Возврат НСтр("ru = 'Поштучная продажа'");
	Иначе
		Возврат НСтр("ru = 'Частичное выбытие'");
	КонецЕсли;
КонецФункции

#КонецОбласти

// Удаляет неотправленную операцию из очереди передачи данных в ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияИСМПСлужебный.СтруктураИзменения(), или Неопределено (если в очереди нет сообщений).
//
Функция ОтменитьПередачу(ДокументСсылка) Экспорт
	
	ОчередьСообщений = РегистрыСведений.ОчередьСообщенийИСМП.ОчередьСообщенийПоДокументу(ДокументСсылка);
	
	Если ОчередьСообщений.Количество() = 0 Тогда
		
		ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		Возврат ЗаполнитьИзменения(ДокументСсылка);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЭлементОчереди Из ОчередьСообщений Цикл
			НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		НовыйСтатус = ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЭлементОчереди.Сообщение);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ЭлементОчереди, ТекстОшибки, НовыйСтатус);
	
КонецФункции

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияИСМПСлужебный.СтруктураИзменения().
//
Функция ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ИСМППрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "Передано");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	Попытка
		НовыйСтатус = ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ДанныеПоследнегоСообщения.Сообщение);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияИСМПСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ДанныеПоследнегоСообщения, ТекстОшибки, НовыйСтатус);
	
КонецФункции

#Область ОтветственныеЗаАктуализациюТокеновАвторизации

// Получает настройки текущего пользователя для актуализации токенов авторизации.
// 
// Параметры:
//  ДляПросмотра - Булево - определяет для чего нужно получить настройки:
//                          для просмотра списка токенов или для актуализации токенов.
// 
// Возвращаемое значение:
// см. Справочники.ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП.НастройкиОтветственногоЗаАктуализациюТокеновАвторизации.
//
Функция НастройкиОтветственногоЗаАктуализациюТокеновАвторизации(ДляПросмотра) Экспорт
	
	Возврат Справочники.ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП.НастройкиОтветственногоЗаАктуализациюТокеновАвторизации(ДляПросмотра);
	
КонецФункции

// Получает напоминания пользователю, ответственному за актуализацию токенов авторизации.
//
// Параметры:
//  Настройки - см. Справочники.ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП.НастройкиОтветственногоЗаАктуализациюТокеновАвторизации.
// 
// Возвращаемое значение:
//  Массив из Структура:
//   * ТипТокенаАвторизации - ПеречислениеСсылка.ТипыТокеновАвторизации - тип токена авторизации.
//   * Организация - ОпределяемыйТип.Организация - организация.
//   * ПроизводственныйОбъект - ОпределяемыйТип.ПроизводственныйОбъектИС - производственный объект.
//   * ДатаДействия - Дата - дата и время, до которой действителен токен.
//   * ВремяДействия - Число - сколько времени (в секундах, кратно минутам) осталось до окончания действия токена.
//   * Отсутствует - Булево - Истина, если токен отсутствует.
//   * Просрочен - Булево - Истина, если токен имеется, но дата действия токена больше текущей.
//   * ТребуетсяАктуализация - Булево - Истина, если требуется актуализация токена.
//   * ОповещениеИспользуется - Булево - Истина, если требуется оповещение пользователя о скором окончании действия токена.
//   * ОповещатьЗа - Число - время в секундах до истечения действия токена, за которое необходимо оповестить пользователя.
//   * ОповеститьЧерез - Число - время в секундах до момента ближайшего оповещения пользователя.
//
Функция ПолучитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации(Настройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПараметраИСМП = ИнтерфейсИСМПКлиентСервер.ИмяДанныхКлючаСессии(Перечисления.ТипыТокеновАвторизации.ИСМП);
	ИмяПараметраСУЗ  = ИнтерфейсИСМПКлиентСервер.ИмяДанныхКлючаСессии(Перечисления.ТипыТокеновАвторизации.СУЗ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",     Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ИмяПараметраИСМП", ИмяПараметраИСМП);
	Запрос.УстановитьПараметр("ИмяПараметраСУЗ",  ИмяПараметраСУЗ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИмяПараметраСеанса,
	|	Данные
	|ИЗ
	|	РегистрСведений.ДанныеКлючаСессииИСМП
	|ГДЕ
	|	ИмяПараметраСеанса = &ИмяПараметраИСМП
	|	ИЛИ ИмяПараметраСеанса = &ИмяПараметраСУЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СрокНапоминания
	|ИЗ
	|	РегистрСведений.НапоминанияПользователяИСМП
	|ГДЕ
	|	Пользователь = &Пользователь";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТекущаяДата = ТекущаяУниверсальнаяДата();
	ПустаяДата  = Дата(1,1,1);
	
	ДанныеКлючаСессииИСМП = Неопределено;
	ДанныеКлючаСессииСУЗ  = Неопределено;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИмяПараметраСеанса = ИмяПараметраИСМП Тогда
			ДанныеКлючаСессииИСМП = Выборка.Данные.Получить();
		ИначеЕсли Выборка.ИмяПараметраСеанса = ИмяПараметраСУЗ Тогда
			ДанныеКлючаСессииСУЗ = Выборка.Данные.Получить();
		КонецЕсли;
	КонецЦикла;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Если Выборка.Следующий() Тогда
		СрокНапоминания = Выборка.СрокНапоминания;
	Иначе
		СрокНапоминания = ПустаяДата;
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого Настройка Из Настройки Цикл
		
		ТипТокенаАвторизации   = Настройка.ТипТокенаАвторизации;
		Организация            = Настройка.Организация;
		ПроизводственныйОбъект = Настройка.ПроизводственныйОбъект;
		ОповещатьЗа            = Настройка.ВремяОповещения;
		
		Если ТипТокенаАвторизации = Перечисления.ТипыТокеновАвторизации.СУЗ Тогда
			Если ДанныеКлючаСессииСУЗ = Неопределено
				Или ДанныеКлючаСессииСУЗ[Организация] = Неопределено
				Или ДанныеКлючаСессииСУЗ[Организация][ПроизводственныйОбъект] = Неопределено Тогда
				ДатаДействияТокена = ПустаяДата;
			Иначе
				ДатаДействияТокена = ДанныеКлючаСессииСУЗ[Организация][ПроизводственныйОбъект].ДействуетДо;
			КонецЕсли;
		Иначе
			Если ДанныеКлючаСессииИСМП = Неопределено
				Или ДанныеКлючаСессииИСМП[Организация] = Неопределено Тогда
				ДатаДействияТокена = ПустаяДата;
			Иначе
				ДатаДействияТокена = ДанныеКлючаСессииИСМП[Организация].ДействуетДо;
			КонецЕсли;
		КонецЕсли;
		
		ТокенОтсутствует = ДатаДействияТокена = ПустаяДата;
		
		Если ТокенОтсутствует Тогда
			ВремяДействияТокена = 0;
		Иначе
			ВремяДействияТокена = ДатаДействияТокена - ТекущаяДата;
			Если ВремяДействияТокена < 0 Тогда
				ВремяДействияТокена = 0;
			Иначе
				ВремяДействияТокена = Цел(ВремяДействияТокена / 60) * 60;
			КонецЕсли;
		КонецЕсли;
		
		ТокенПросрочен = Не ТокенОтсутствует И ВремяДействияТокена = 0;
		
		ТребуетсяАктуализацияТокена = ТокенОтсутствует
			Или ТокенПросрочен
			Или ВремяДействияТокена <= ОповещатьЗа И СрокНапоминания <= ТекущаяДата;
		
		ОповещениеИспользуется = ОповещатьЗа > 0;
		
		ОповеститьЧерез = 0;
		Если ОповещениеИспользуется Тогда
			Если ВремяДействияТокена > ОповещатьЗа Тогда
				ОповеститьЧерез = ВремяДействияТокена - ОповещатьЗа;
			ИначеЕсли СрокНапоминания > ТекущаяДата Тогда
				ОповеститьЧерез = СрокНапоминания - ТекущаяДата;
			КонецЕсли;
		КонецЕсли;
		
		Данные = Новый Структура;
		Данные.Вставить("ТипТокенаАвторизации",   ТипТокенаАвторизации);
		Данные.Вставить("Организация",            Организация);
		Данные.Вставить("ПроизводственныйОбъект", ПроизводственныйОбъект);
		Данные.Вставить("ДатаДействия",           ДатаДействияТокена);
		Данные.Вставить("ВремяДействия",          ВремяДействияТокена);
		Данные.Вставить("Отсутствует",            ТокенОтсутствует);
		Данные.Вставить("Просрочен",              ТокенПросрочен);
		Данные.Вставить("ТребуетсяАктуализация",  ТребуетсяАктуализацияТокена);
		Данные.Вставить("ОповещениеИспользуется", ОповещениеИспользуется);
		Данные.Вставить("ОповещатьЗа",            ОповещатьЗа);
		Данные.Вставить("ОповеститьЧерез",        ОповеститьЧерез);
		
		Результат.Добавить(Данные);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкиУчета

// Возвращает признак ведения учета маркируемой продукции.
// 
// Возвращаемое значение:
// 	Булево - Истина, если учет маркируемой продукции используется.
//
Функция ИспользуетсяМаркируемаяПродукция() Экспорт
	
	Возврат ИнтеграцияИСМП.ИспользуетсяМаркируемаяПродукция();
	
КонецФункции

// Возвращает дату обязательной маркировки маркируемой продукци переданного вида.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Дата - дата обязательной маркировки маркируемой продукции.
//
Функция ДатаОбязательнойМаркировкиПродукции(ВидМаркируемойПродукции) Экспорт
	
	ДатаОбязательнойМаркировки = '00010101';
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаОбязательнойМаркировки КАК ДатаОбязательнойМаркировки
	|ИЗ
	|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП
	|ГДЕ
	|	ВидПродукции = &ВидМаркируемойПродукции
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидМаркируемойПродукции", ВидМаркируемойПродукции);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДатаОбязательнойМаркировки = Выборка.ДатаОбязательнойМаркировки;
	КонецЕсли;
	
	Возврат ДатаОбязательнойМаркировки;

КонецФункции

// Возвращает признак ведения учета маркируемой продукци переданного вида.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - признак ведения учета маркируемой продукции переданного вида.
//
Функция ВестиУчетМаркируемойПродукции(ВидМаркируемойПродукции = Неопределено) Экспорт
	
	Если ВидМаркируемойПродукции = Неопределено Тогда
		
		Возврат ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");

	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.ПустаяСсылка() Тогда
		
		Возврат ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
		
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидМаркируемойПродукции, Истина) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
			ТекстЗапроса = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВестиУчетПродукции КАК ВестиУчетПродукции
			|ИЗ
			|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП
			|ГДЕ
			|	ВидПродукции = &ВидМаркируемойПродукции
			|";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ВидМаркируемойПродукции", ВидМаркируемойПродукции);
			
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Возврат Ложь;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Возврат Выборка.ВестиУчетПродукции;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

//Возвращает учитываемые виды маркируемой продукции.
//  При вызове с параметрами -только находящиеся в тестовом/обязательном периоде эксплуатации.
//
//Параметры:
//   НаДату - Неопределено - все учитываемые
//          - Дата - требуется получение только видов продукции в тестовом/обязательном периоде на указанную дату
//   ТестовыйПериод - Булево - признак тестового периода
//
// Возвращаемое значение:
//   ФиксированныйМассив Из Перечислениессылка.ВидыПродукцииИС - учитываемые виды маркируемой продукции.
//
Функция УчитываемыеВидыМаркируемойПродукции(НаДату = Неопределено, ТестовыйПериод = Ложь) Экспорт
	
	ВидыПродукции = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Настройки.ВидПродукции КАК ВидПродукции,
		|	Настройки.ДатаОбязательнойМаркировки КАК ДатаОбязательнойМаркировки
		|ИЗ
		|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК Настройки
		|ГДЕ
		|	Настройки.ВестиУчетПродукции";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НаДату = Неопределено Тогда
				ВидыПродукции.Добавить(Выборка.ВидПродукции);
			ИначеЕсли ТестовыйПериод = (НаДату < Выборка.ДатаОбязательнойМаркировки) Тогда
				ВидыПродукции.Добавить(Выборка.ВидПродукции);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(ВидыПродукции);
	
КонецФункции

// Возвращает виды продукции, по которым доступно заполнение документа ИСМП
//
// Параметры:
//   ПолноеИмяДокумента - Строка - создаваемый вводом на основании документ
//   Ссылка - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документ по которому происходит обработка заполнения
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - различные виды продукции в документе ИСМП, заполненном 
//     по основанию без фильтра по виду продукции.
Функция ВидыПродукцииДанныхЗаполнения(ПолноеИмяДокумента, Ссылка) Экспорт
	
	ДоступныеВидыПродукции = Новый Массив;
	
	Если НЕ ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		Возврат ДоступныеВидыПродукции;
	КонецЕсли;
	
	ВидыПродукцииИСМП = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	Для Каждого ВидПродукцииИСМП Из ВидыПродукцииИСМП Цикл
		Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукцииИСМП) Тогда
			ДоступныеВидыПродукции.Добавить(ВидПродукцииИСМП);
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступныеВидыПродукции.Количество() < 2 Тогда
		Возврат ДоступныеВидыПродукции;
	КонецЕсли;
	
	ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
	Предзаполнение = Документы[ИмяДокумента].СоздатьДокумент();
	Предзаполнение.Заполнить(Ссылка);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
		И ИнтеграцияИС.ЕстьРеквизитТабЧастиОбъекта("GTIN", Предзаполнение.Метаданные(), "Товары")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Операция") = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
		Товары = Предзаполнение.Товары.Выгрузить(, "Номенклатура, GTIN");
		ПараметрыЗаполненияПоКодамОстатков = Новый Структура;
		ПараметрыЗаполненияПоКодамОстатков.Вставить("Организация", Предзаполнение.Организация);
	Иначе
		Товары = Предзаполнение.Товары.Выгрузить(, "Номенклатура");
		Товары.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ПараметрыЗаполненияПоКодамОстатков = Неопределено;
	КонецЕсли;
	
	Товары.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	Возврат ИнтеграцияИСМП.ВидыПродукцииПоТаблицеНоменклатуры(Товары, ПараметрыЗаполненияПоКодамОстатков);
	
КонецФункции

// 
// Параметры:
// 	Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// Возвращаемое значение:
// 	СправочникСсылка.ВидыАлкогольнойПродукции
//
Функция ВидПродукцииПоНоменклатуре(Номенклатура) Экспорт
	Возврат ИнтеграцияИС.ВидПродукцииПоНоменклатуре(Номенклатура);
КонецФункции

//Возвращает признак запроса данных из сервиса ИС МП.
//
//Возвращаемое значение:
//   Булево - Истина, в случае необходимости запроса данных сервиса.
//
Функция ЗапрашиватьДанныеСервиса() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ЗапрашиватьДанныеСервисаИСМП");

КонецФункции

// Возвращает признак необходимости контроля статусов кодов маркировок ИС МП.
//
//Параметры:
//	 ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//	 ВидОперации  - ПеречислениеСсылка.ВидыОперацийИСМП, Неопределено - Вид операции.
//	
// Возвращаемое значение:
//  Произвольный - Истина, в случае необходимости контроля статусов.
Функция КонтролироватьСтатусыКодовМаркировки(ВидПродукции = Неопределено, ВидОперации = Неопределено) Экспорт
	
	Возврат ИнтеграцияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(ВидПродукции = Неопределено, ВидОперации = Неопределено);
	
КонецФункции

// Возвращает признак необходимости контроля статусов кодов маркировок при розничной торговле.
//
//Параметры:
//	 ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//	 ВидОперации  - ПеречислениеСсылка.ВидыОперацийИСМП, Неопределено - Вид операции.
// Возвращаемое значение:
//  Булево - Истина, в случае необходимости контроля статусов в рознице.
Функция КонтролироватьСтатусыКодовМаркировкиВРознице(ВидПродукции = Неопределено, ВидОперации = Неопределено) Экспорт
	
	Возврат ИнтеграцияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице(ВидПродукции = Неопределено, ВидОперации = Неопределено);
	
КонецФункции

// Возвращает настройки сканирования кодов маркировки ИС МП.
//
// Возвращаемое значение:
//  Булево - Истина, в случае необходимости контроля статусов.
Функция НастройкиСканированияКодовМаркировки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗапрашиватьДанныеСервисаИСМП", ПолучитьФункциональнуюОпцию("ЗапрашиватьДанныеСервисаИСМП"));
	Результат.Вставить("ПараметрыКонтроляСтатусов",    НастройкаПараметровСканированияСлужебныйКлиентСервер.НоваяГруппаПараметровНастройки());
	Результат.Вставить("ПараметрыКонтроляВладельцев",  НастройкаПараметровСканированияСлужебныйКлиентСервер.НоваяГруппаПараметровНастройки());
	
	Результат.Вставить("ПараметрыИгнорированияПроверкиККТ", НастройкаПараметровСканированияСлужебныйКлиентСервер.НоваяГруппаПараметровНастройки(Ложь));
	Результат.Вставить("РежимКонтроляСредствамиККТ",        "");
	Результат.Вставить("ПропускатьПроверкуСредствамиККТ",   Ложь);
	
	Результат.Вставить("КонтролироватьСтандартнуюВложенность",      Ложь);
	Результат.Вставить("ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД", Истина);
	Результат.Вставить("ПроверятьАлфавитКодовМаркировки",           Истина);
	
	Результат.Вставить("ПроверятьСтруктуруКодовМаркировки", Истина);
	
	Результат.Вставить("КоличествоКодовВПакетеДляЗапросаСтатусов", 500);

	Результат.Вставить("СлужебныйШтрихкодПечатиУпаковки", "");
	// Табачная продукция
	Результат.Вставить("ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП",          Истина);
	Результат.Вставить("ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП", Истина);
	Результат.Вставить("УчитыватьМРЦ",                                                       Истина);
	Результат.Вставить("ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП",          ПроверкаИПодборПродукцииМОТПКлиентСервер.ДатаНачалаКонтроляКодовМаркировки());
	// Весовая продукция
	Результат.Вставить("ЗапрашиватьКоличествоМерногоТовара", Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеКонстанты = Константы.НастройкиСканированияКодовМаркировкиИСМП.Получить().Получить();
	Если ТипЗнч(ЗначениеКонстанты) = Тип("Структура") Тогда
		ИсключаемыеСвойства = Новый Массив();
		Если ЗначениеКонстанты.Свойство("ПараметрыКонтроляСтатусов") Тогда
			ЗаполнитьЗначенияСвойств(Результат.ПараметрыКонтроляСтатусов, ЗначениеКонстанты.ПараметрыКонтроляСтатусов);
			ИсключаемыеСвойства.Добавить("ПараметрыКонтроляСтатусов");
		КонецЕсли;
		Если ЗначениеКонстанты.Свойство("ПараметрыКонтроляВладельцев") Тогда
			ЗаполнитьЗначенияСвойств(Результат.ПараметрыКонтроляВладельцев, ЗначениеКонстанты.ПараметрыКонтроляВладельцев);
			ИсключаемыеСвойства.Добавить("ПараметрыКонтроляВладельцев");
		КонецЕсли;
		Если ЗначениеКонстанты.Свойство("ПараметрыИгнорированияПроверкиККТ") Тогда
			ЗаполнитьЗначенияСвойств(Результат.ПараметрыИгнорированияПроверкиККТ, ЗначениеКонстанты.ПараметрыИгнорированияПроверкиККТ);
			ИсключаемыеСвойства.Добавить("ПараметрыИгнорированияПроверкиККТ");
		Иначе
			Если ЗначениеКонстанты.Свойство("ПараметрыКонтроляСредствамиККТ") Тогда
				Если ЗначениеКонстанты.ПараметрыКонтроляСредствамиККТ.Включено Тогда
					Если ЗначениеКонстанты.ПараметрыКонтроляСредствамиККТ.Исключения.Количество() Тогда
						ВключитьИгнорирование  = Ложь;
						ПараметрыКонтроля      = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
						ДопустимыеВидыОперации = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ДопустимыеВидыОпераций(ПараметрыКонтроля.ПараметрыИгнорированияПроверкиККТ);
						Для Каждого КлючИЗначение Из ЗначениеКонстанты.ПараметрыКонтроляСредствамиККТ.Исключения Цикл
							ВидПродукции = КлючИЗначение.Ключ;
							Если КлючИЗначение.Значение.Количество() Тогда
								Для Каждого КлючИЗначениеОперация Из КлючИЗначение.Значение Цикл
									ВидОперации = КлючИЗначениеОперация.Ключ;
									Если ДопустимыеВидыОперации.НайтиПоЗначению(ВидОперации) <> Неопределено Тогда
										ВключитьИгнорирование = Истина;
										ОперацииПоВидуПродукции = Результат.ПараметрыИгнорированияПроверкиККТ.Исключения[ВидПродукции];
										Если ОперацииПоВидуПродукции = Неопределено Тогда
											ОперацииПоВидуПродукции = Новый Соответствие();
											Результат.ПараметрыИгнорированияПроверкиККТ.Исключения.Вставить(ВидПродукции, ОперацииПоВидуПродукции);
										КонецЕсли;
										ОперацииПоВидуПродукции.Вставить(ВидОперации, Истина);
									КонецЕсли;
								КонецЦикла;
							Иначе
								Результат.ПараметрыИгнорированияПроверкиККТ.Исключения.Вставить(ВидПродукции, Новый Соответствие());
							КонецЕсли;
						КонецЦикла;
						Результат.ПараметрыИгнорированияПроверкиККТ.Включено = ВключитьИгнорирование;
					КонецЕсли;
				Иначе
					Результат.ПараметрыИгнорированияПроверкиККТ.Включено = Истина;
				КонецЕсли;
				Если Результат.ПараметрыИгнорированияПроверкиККТ.Включено Тогда
					Результат.ПараметрыИгнорированияПроверкиККТ.ВариантОтображения = ЗначениеКонстанты.ПараметрыКонтроляСредствамиККТ.ВариантОтображения;
					Результат.ПропускатьПроверкуСредствамиККТ = Ложь;
					Если ЗначениеКонстанты.Свойство("ПропускатьПроверкуСредствамиККТ") Тогда
						ИсключаемыеСвойства.Добавить("ПропускатьПроверкуСредствамиККТ");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Результат, ЗначениеКонстанты,, СтрСоединить(ИсключаемыеСвойства, ","));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак включения режима работы с тестовым контуром ИС МП
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим работы с тестовым контуром ИС МП.
//
Функция РежимРаботыСТестовымКонтуромИСМП() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("РежимРаботыСТестовымКонтуромИСМП");
	
КонецФункции

#КонецОбласти

// Восстанавливает статус документа по данным протокола обмена.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется восстановить статус.
//  СообщениеПрерывания - Строка, СправочникСсылка.ИСМППрисоединенныеФайлы - Сообщение на котором необходимо закончить процесс расчета статусов.
// Возвращаемое значение:
// 	ПеречислениеСсылка.СтатусыОбработкиВозвратаВОборотИСМП, ПеречислениеСсылка.СтатусыОбработкиСписанияКодовМаркировкиИСМП, ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП, ПеречислениеСсылка.СтатусыОбработкиПеремаркировкиТоваровИСМП, ПеречислениеСсылка.СтатусыОбработкиПриемкиТоваровИСМП, ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП, ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП, ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Рассчитанный статус.
Функция ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, СообщениеПрерывания = Неопределено) Экспорт
	
	НаборПоДокументу = ИнтеграцияИСМП.РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка,, СообщениеПрерывания);
	
	Возврат НаборПоДокументу[0].Статус;
	
КонецФункции

// Функция - Документы ИСМП по документу основанию
//
// Параметры:
//  ДокументОснование - ДокументСсылка - основание по которому надо получить документы ИСМП
// 
// Возвращаемое значение:
//  Структура - (см. ИнтеграцияИС.ДокументыИСПоДокументуОснованию)
//
Функция ДокументыИСМППоДокументуОснованию(ДокументОснование) Экспорт
	
	ДокументыИСМП = ИнтеграцияИС.ДокументыИСПоДокументуОснованию(
		ДокументОснование,
		Метаданные.РегистрыСведений.СтатусыДокументовИСМП);
	
	Возврат ДокументыИСМП;
	
КонецФункции

// Возвращает имена документов ИСМП, основанием для которых может являться указанный документ.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - документ-основание для документа ИСМП
//
// Возвращаемое значение:
//   Массив из Строка - имена документов ИСМП
//
Функция ИменаДокументовДляДокументаОснования(ДокументОснование) Экспорт
	
	Возврат РасчетСтатусовОформленияИСМП.ИменаДокументовДляДокументаОснования(ДокументОснование);
	
КонецФункции

Функция АрхивироватьДокументы(ДокументыКАрхивированию) Экспорт
	
	Возврат РегистрыСведений.СтатусыДокументовИСМП.Архивировать(ДокументыКАрхивированию);
	
КонецФункции

// Архивирует (убирает из интерфейса к обработке) записи из регистра по переданным документам.
//
// Параметры:
//   Основания - Массив Из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовИСМП - массив распоряжений
//   Документ  - ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления - документ, данные по которому
//                                                                              необходимо архивировать.
//
Функция АрхивироватьРаспоряженияКОформлению(Основания, Документ) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовИСМП.АрхивироватьРаспоряженияКОформлению(Основания, Документ);
	
КонецФункции

Функция ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Знач ДокументОснование) Экспорт
	
	ТекстНадписи = "";
	
	// Получим структуру вида ИмяДокументаИСМП - Статус
	СтатусыОформления = РегистрыСведений.СтатусыОформленияДокументовИСМП.СтатусыДокументовИСМППоДокументуОснованию(ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(СтатусыОформления) Тогда
		Возврат ТекстНадписи;
	КонецЕсли;
	
	// Получим структуру вида ИмяДокументаИСМП - Массив(ДокументыИСМПДанногоВида)
	ДокументыИСМП = ДокументыИСМППоДокументуОснованию(ДокументОснование);
	
	ТекстыНадписиПоДокументам = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтатусыОформления Цикл
		
		МетаданныеДокумента = Метаданные.Документы[КлючИЗначение.Ключ];
		
		Если ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента).Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			
			// Получим структуру с ключами "Представление, МассивДокументов, СтатусОформления, МетаданныеДокумента"
			Описание = ИнтеграцияИСМП.ОписаниеОформленныхДокументов(МетаданныеДокумента, ДокументОснование, ДокументыИСМП, СтатусыОформления);
			
			Если Описание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекстыНадписиПоДокументам.Количество() > 0 Тогда
				ТекстыНадписиПоДокументам.Добавить(", ");
			КонецЕсли;
			
			ТекстыНадписиПоДокументам.Добавить(Описание.ТекстНадписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстыНадписиПоДокументам);
	Возврат ТекстНадписи;
	
КонецФункции

// Получает ТН ВЭД
//
// Параметры:
//  КодТНВЭД - Строка - Код по классификатору товарной номенклатуры внешнеэкономической деятельности
//
// Возвращаемое значение:
//   Произвольный - элемент классификатора (если он определен в конфигурации)
//
Функция КлассификаторТНВЭДПоКоду(КодТНВЭД) Экспорт
	
	ТНВЭД = Неопределено;
	
	ИнтеграцияИСМППереопределяемый.КлассификаторТНВЭД(КодТНВЭД, ТНВЭД);
	
	Возврат ТНВЭД;
	
КонецФункции

Процедура ИзвлечьЛогЗапросовИзРезультатаОбмена(РезультатОбмена) Экспорт
	
	ДанныеЛогаЗапросов = ЛогированиеЗапросовИС.ДанныеЛогаЗапросовПоАдресуВременногоХранилища(РезультатОбмена.АдресДанныхЛогаЗапроса);
	
	ДанныеДляЗаписи = Новый Структура();
	ДанныеДляЗаписи.Вставить("ДанныеЛогаЗапросов", ДанныеЛогаЗапросов);
	
	ЛогированиеЗапросовИС.ДописатьВТекущийЛогДанныеИзФоновогоЗадания(
		ДанныеДляЗаписи,
		ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов());
	
КонецПроцедуры

Функция ИнформацияСертификатовНоменклатуры(СписокНоменклатуры) Экспорт
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры);
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

Функция ТребуетсяПерейтиВПул(Знач ДокументОснование) Экспорт
	
	Возврат Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ТребуетсяПерейтиВПул(ДокументОснование);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОрганизацияЯвляетсяФермером(Организация) Экспорт
	
	КодОКОПФ = "";
	
	ИнтеграцияИСПереопределяемый.КодОКОПФОрганизации(КодОКОПФ, Организация);
	
	Возврат КодОКОПФ = "15300" Или КодОКОПФ = "50101" Или КодОКОПФ = "14100";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет структуру изменений по документу.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//  ЭлементОчереди - Неопределено,
//                   СтрокаТаблицыЗначений с колонками:
//                     Сообщение - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор сообщения.
//                     Операция - ПеречислениеСсылка.ВидыОперацийИСМП - операция.
//                     Организация - ОпределяемыйТип.Организация - организация.
//  ТекстОшибки - Строка.
//  НовыйСтатус - Неопределено.
// 
// Возвращаемое значение:
//  Массив из см. ИнтеграцияИСМПСлужебный.СтруктураИзменения()
Функция ЗаполнитьИзменения(ДокументСсылка, ЭлементОчереди = Неопределено, ТекстОшибки = "", НовыйСтатус = Неопределено)
	
	Изменения = Новый Массив;
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ИнтеграцияИСМПСлужебный.СтруктураИзменения();
	СтрокаРезультата.Объект            = ДокументСсылка;
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	
	Если ЭлементОчереди <> Неопределено Тогда
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Операция          = ЭлементОчереди.Операция;
	КонецЕсли;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;
	
КонецФункции

// см. ИнтеграцияИС.СертификатыПользователяДляПодписиПоОрганизации
Функция СертификатыПользователяДляПодписиПоОрганизации(Организация, ВключатьСертификатыФЛ = Ложь) Экспорт
	Возврат ИнтеграцияИС.СертификатыПользователяДляПодписиПоОрганизации(Организация, ВключатьСертификатыФЛ);
КонецФункции

#КонецОбласти
