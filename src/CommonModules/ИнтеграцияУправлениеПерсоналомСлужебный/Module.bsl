
#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьФизическоеЛицо(Объект, ИдентификаторСсылка) Экспорт
	
	Идентификатор = Объект.ФизическоеЛицо;
	
	ДанныеОбъекта = Новый Структура("
	|Фамилия,
	|Имя,
	|Отчество,
	|Пол,
	|ДатаРождения,
	|ИНН,
	|СтраховойНомерПФР,
	|МестоРожденияПредставление,
	|ДокументУдостоверяющийЛичность,
	|ТелефонМобильныйПредставление,
	|EMailПредставление,
	|Фотография");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.Настройки();
	ВидКИМобильныйТелефон = Настройки.ВидКИМобильныйТелефон;
	ВидКИАдресЭлектроннойПочты = Настройки.ВидКИАдресЭлектроннойПочты;
	
	ФизическоеЛицоОбъект = Неопределено;
	
	Ссылка = ИдентификаторСсылка[Идентификатор];
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ФизическоеЛицоОбъект = Ссылка.ПолучитьОбъект();
	Иначе
		
		СсылкаНаОбъект = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
			Ссылка = СсылкаНаОбъект;
		Иначе
			
			Запрос = Новый Запрос;
			// поиск по СтраховойНомерПФР
			Если ЗначениеЗаполнено(ДанныеОбъекта.СтраховойНомерПФР) Тогда
				Запрос.УстановитьПараметр("СтраховойНомерПФР", ДанныеОбъекта.СтраховойНомерПФР);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР";
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					Ссылка = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			// поиск по ИНН
			Если Не ЗначениеЗаполнено(Ссылка) И ЗначениеЗаполнено(ДанныеОбъекта.ИНН) Тогда
				Запрос.УстановитьПараметр("ИНН", ДанныеОбъекта.ИНН);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛица.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.ИНН = &ИНН";
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					Ссылка = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			ФизическоеЛицоОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Записывать = Ложь;
	Если ФизическоеЛицоОбъект = Неопределено Тогда
		
		Записывать = Истина;
		
		ФИО = Новый Структура("Фамилия,Имя,Отчество");
		ЗаполнитьЗначенияСвойств(ФИО, ДанныеОбъекта);
		
		АдресФотографии = "";
		Если ЗначениеЗаполнено(ДанныеОбъекта.Фотография) Тогда
			АдресФотографии = ПоместитьВоВременноеХранилище(ДанныеОбъекта.Фотография.ДвоичныеДанные);
		КонецЕсли;
		
		КонтактнаяИнформация = Новый Массив;
		Если ЗначениеЗаполнено(ДанныеОбъекта.ТелефонМобильныйПредставление) Тогда
			ОписаниеКонтактнойИнформации = КадровыйУчет.НоваяКонтактнаяИнформация();
			ОписаниеКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ДанныеОбъекта.ТелефонМобильныйПредставление, ВидКИМобильныйТелефон);
			ОписаниеКонтактнойИнформации.Вставить("ВидИнформации", ВидКИМобильныйТелефон);
			ОписаниеКонтактнойИнформации.Вставить("ТипИнформации", Перечисления.ТипыКонтактнойИнформации.Телефон);
			КонтактнаяИнформация.Добавить(ОписаниеКонтактнойИнформации); 
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеОбъекта.EMailПредставление) Тогда
			ОписаниеКонтактнойИнформации = КадровыйУчет.НоваяКонтактнаяИнформация();
			ОписаниеКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ДанныеОбъекта.EMailПредставление, ВидКИАдресЭлектроннойПочты);
			ОписаниеКонтактнойИнформации.Вставить("ВидИнформации", ВидКИАдресЭлектроннойПочты);
			ОписаниеКонтактнойИнформации.Вставить("ТипИнформации", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			КонтактнаяИнформация.Добавить(ОписаниеКонтактнойИнформации);
		КонецЕсли;
		
		ДанныеФизическогоЛица = КадровыйУчет.НовыеДанныеФизическогоЛица();
		ЗаполнитьЗначенияСвойств(ДанныеФизическогоЛица, ДанныеОбъекта);
		ДанныеФизическогоЛица.МестоРождения 		= ДанныеОбъекта.МестоРожденияПредставление;
		ДанныеФизическогоЛица.КонтактнаяИнформация 	= КонтактнаяИнформация;
		ДанныеФизическогоЛица.АдресФотографии 		= АдресФотографии;
		
		ФизическоеЛицоОбъект = КадровыйУчет.НовоеФизическоеЛицо(ФИО, ДанныеФизическогоЛица,,Ложь);
		
		СсылкаНового = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		ФизическоеЛицоОбъект.УстановитьСсылкуНового(СсылкаНового);
		
	Иначе
		
		// Ссылка может существовать, но объект будет пустой, в случае
		// загрузки, например Оффера, раньше загрузки объекта ФизическоеЛицо.
		
		СвязанныеОбъекты = Новый Структура;
		
		Наименование = ДанныеОбъекта.Фамилия;
		Если ЗначениеЗаполнено(ДанныеОбъекта.Имя) Тогда
			Наименование = СтрШаблон("%1 %2", Наименование, ДанныеОбъекта.Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеОбъекта.Отчество) Тогда
			Наименование = СтрШаблон("%1 %2", Наименование, ДанныеОбъекта.Отчество);
		КонецЕсли;
		
		// Заполняем пустые свойства физического лица.
		Если ПустаяСтрока(ФизическоеЛицоОбъект.Наименование) Тогда
			ФизическоеЛицоОбъект.Наименование = Наименование;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.ДатаРождения) И ЗначениеЗаполнено(ДанныеОбъекта.ДатаРождения) Тогда
			ФизическоеЛицоОбъект.ДатаРождения = ДанныеОбъекта.ДатаРождения;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.Пол) И ЗначениеЗаполнено(ДанныеОбъекта.Пол) Тогда
			ФизическоеЛицоОбъект.Пол = ДанныеОбъекта.Пол;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.ИНН) И ЗначениеЗаполнено(ДанныеОбъекта.ИНН) Тогда
			ФизическоеЛицоОбъект.ИНН = ДанныеОбъекта.ИНН;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.СтраховойНомерПФР) И ЗначениеЗаполнено(ДанныеОбъекта.СтраховойНомерПФР) Тогда
			ФизическоеЛицоОбъект.СтраховойНомерПФР = ДанныеОбъекта.СтраховойНомерПФР;
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.ФИО) Тогда
			ФизическоеЛицоОбъект.ФИО = Наименование;
			ФизическоеЛицоОбъект.ДополнительныеСвойства.Вставить("ФИОУстановлены", Истина); 
			ФИО = Новый Структура("Фамилия,Имя,Отчество");
			ЗаполнитьЗначенияСвойств(ФИО, ДанныеОбъекта);
			ДанныеФИО = Новый Структура;
			ДанныеФИО.Вставить("ФИО", ФИО);
			ДанныеФИО.Вставить("Период", Неопределено);
			СвязанныеОбъекты.Вставить("ФИО", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеФИО));
			Записывать = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.Пол) Тогда
			ФизическоеЛицоОбъект.Пол = ДанныеОбъекта.Пол;
			Записывать = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвязанныеОбъекты) Тогда
			ФизическоеЛицоОбъект.ДополнительныеСвойства.Вставить("СвязанныеОбъекты", СвязанныеОбъекты);
		КонецЕсли;
		
		КонтактнаяИнформация = ИнтеграцияУправлениеПерсоналом.КонтактнаяИнформацияФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
		
		МобильныйТелефон = КонтактнаяИнформация.МобильныеТелефоны[Ссылка];
		Если Не ЗначениеЗаполнено(МобильныйТелефон) И ЗначениеЗаполнено(ДанныеОбъекта.ТелефонМобильныйПредставление) Тогда
			Записывать = Истина;
			ОписаниеКонтактнойИнформации = КадровыйУчет.НоваяКонтактнаяИнформация();
			ОписаниеКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ДанныеОбъекта.ТелефонМобильныйПредставление, ВидКИМобильныйТелефон);
			ОписаниеКонтактнойИнформации.Вставить("ВидИнформации", ВидКИМобильныйТелефон);
			ОписаниеКонтактнойИнформации.Вставить("ТипИнформации", Перечисления.ТипыКонтактнойИнформации.Телефон);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ФизическоеЛицоОбъект,
					ОписаниеКонтактнойИнформации.ЗначенияПолей, ОписаниеКонтактнойИнформации.ВидИнформации,
					ОписаниеКонтактнойИнформации.ТипИнформации);
		КонецЕсли;
		
		АдресПочты = КонтактнаяИнформация.АдресаПочты[Ссылка];
		Если Не ЗначениеЗаполнено(АдресПочты) И ЗначениеЗаполнено(ДанныеОбъекта.EMailПредставление) Тогда
			Записывать = Истина;
			ОписаниеКонтактнойИнформации = КадровыйУчет.НоваяКонтактнаяИнформация();
			ОписаниеКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ДанныеОбъекта.EMailПредставление, ВидКИАдресЭлектроннойПочты);
			ОписаниеКонтактнойИнформации.Вставить("ВидИнформации", ВидКИАдресЭлектроннойПочты);
			ОписаниеКонтактнойИнформации.Вставить("ТипИнформации", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ФизическоеЛицоОбъект,
					ОписаниеКонтактнойИнформации.ЗначенияПолей, ОписаниеКонтактнойИнформации.ВидИнформации,
					ОписаниеКонтактнойИнформации.ТипИнформации);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Записывать Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокиновки = Блокировка.Добавить("Справочник.ФизическиеЛица");
				ЭлементБлокиновки.УстановитьЗначение("Ссылка", Ссылка);
				Блокировка.Заблокировать();
			КонецЕсли;
			
			ФизическоеЛицоОбъект.Записать();
			Если Не ЗначениеЗаполнено(Ссылка) Тогда
				МенеджерЗаписи = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Идентификатор 	= Идентификатор;
				МенеджерЗаписи.Ссылка 			= ФизическоеЛицоОбъект.Ссылка;
				МенеджерЗаписи.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

#Область ОбработкаОфферов

Функция ОфферИдентификаторДокументаСсылка(Идентификаторы) Экспорт
	
	ИдентификаторДокументаСсылка = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оффер.Ссылка КАК Ссылка,
	|	Оффер.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	Документ.Оффер КАК Оффер
	|ГДЕ
	|	Оффер.ИдентификаторДокумента В(&Идентификаторы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторДокументаСсылка.Вставить(Выборка.ИдентификаторДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ИдентификаторДокументаСсылка;

КонецФункции

Процедура ЗагрузитьОффер(Объект) Экспорт

	СтруктураЗаполнения = Документы.Оффер.СтруктураЗаполнения();
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Объект);
	ДокументОбъект = Документы.Оффер.НовыйДокумент(СтруктураЗаполнения);
	
	Попытка
		ДокументОбъект.Записать();
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаявок

Функция ПараметрыСозданияЗаявок(СписокФизическихЛиц, ТаблицаЗаявок) Экспорт

	Возврат БизнесПроцессыЗаявокСотрудников.ПараметрыСозданияБизнесПроцессовПоЗаявкамСервиса(СписокФизическихЛиц, ТаблицаЗаявок);

КонецФункции

Процедура СоздатьЗаявку(ДанныеЗаявки, ПараметрыЗаявок) Экспорт

	Объект = ДанныеЗаявки.Объект;
	
	ИмяТаблицы = ДанныеЗаявки.ИмяТаблицы;
	ОписаниеБизнесПроцесса = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗаявок.ОписанияБизнесПроцессов[ИмяТаблицы]);
	ОписаниеБизнесПроцесса.ТипЗаявкиКабинетСотрудника 	= ДанныеЗаявки.ТипЗаявки;
	ОписаниеБизнесПроцесса.ИдентификаторЗаявки 			= ДанныеЗаявки.ИдентификаторЗаявки;
	ОписаниеБизнесПроцесса.Вложения 					= ДанныеЗаявки.Вложения;
	ОписаниеБизнесПроцесса.ЭлектронныйДокумент 			= ДанныеЗаявки.ЭлектронныйДокумент;
	
	СвойстваОтветовПоЗаявкам =  "КоличествоЭкземпляров,ОтправлятьEmail,АдресEmail";
	Если ДанныеЗаявки.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеБизнесПроцесса, Объект, СвойстваОтветовПоЗаявкам);
		
		ОписаниеБизнесПроцесса.Организация 			 = Объект.Организация;
		ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = Объект.ФизическоеЛицо;
		ОписаниеБизнесПроцесса.КомментарийСотрудника = Объект.Комментарий;
		ОписаниеБизнесПроцесса.ВариантФормированияФайлаОтвета = Объект.ВариантПолученияДокументаРезультата;
		
		Если Объект.Назначение2НДФЛ = "ПодтверждениеДоходов" Тогда
			ОписаниеБизнесПроцесса.НачалоПериода 		= Объект.НачалоПериода;
			ОписаниеБизнесПроцесса.ОкончаниеПериода 	= Объект.ОкончаниеПериода;
			ОписаниеБизнесПроцесса.СпособФормирования 	= Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно;
		Иначе
			ОписаниеБизнесПроцесса.НалоговыйПериод 		= Объект.НалоговыйПериод;
			ОписаниеБизнесПроцесса.СпособФормирования 	= Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО;
		КонецЕсли; 
		
	ИначеЕсли ДанныеЗаявки.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеБизнесПроцесса, Объект, СвойстваОтветовПоЗаявкам);
		
		ОписаниеБизнесПроцесса.Организация 			 = Объект.Организация;
		ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = Объект.ФизическоеЛицо;
		ОписаниеБизнесПроцесса.КомментарийСотрудника = Объект.Комментарий;
		ОписаниеБизнесПроцесса.ВариантФормированияФайлаОтвета = Объект.ВариантПолученияДокументаРезультата;
		
		ОписаниеБизнесПроцесса.НазначениеСправки = Объект.НазначениеСправкиСРаботыСтрока;
		
		ВидСправки = Неопределено;
		Если Объект.Свойство("ВидСправки", ВидСправки) Тогда
			ОписаниеБизнесПроцесса.ВидСправки = ВидСправки;
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		БизнесПроцессыЗаявокСотрудников.СоздатьБизнесПроцессПоЗаявке(ИмяТаблицы, ОписаниеБизнесПроцесса, ПараметрыЗаявок);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СборГрафиковОтпусковПодразделения

Функция ДокументыСборГрафиковОтпусковПоИдентификаторам(Идентификаторы, МодульСборГрафиковОтпусков) Экспорт

	Возврат МодульСборГрафиковОтпусков.ДокументыПоИдентификаторам(Идентификаторы)

КонецФункции

Процедура ЗагрузитьСборГрафиковОтпусковПодразделения(Объект, ИдентификаторыДокументы, МодульСборГрафиковОтпусков) Экспорт
	
	ОписаниеДокумента = МодульСборГрафиковОтпусков.ОписаниеДокументаГрафикПодразделения();
	ОписаниеДокумента.Год 								= Объект.Год;
	ОписаниеДокумента.Подразделение 					= Объект.Подразделение;
	ОписаниеДокумента.ИдентификаторДокумента 			= Объект.ИдентификаторДокумента;
	ОписаниеДокумента.СостояниеСбораГрафиковОтпусков 	= Объект.Состояние;
	ОписаниеДокумента.ОтветственныйЗаСбор 				= Объект.Ответственный;
	Для каждого ЗаписьПериода Из Объект.Периоды Цикл
		НоваяСтрока = ОписаниеДокумента.Периоды.Добавить();
		НоваяСтрока.ФизическоеЛицо 	= ЗаписьПериода.ФизическоеЛицо;
		НоваяСтрока.ДатаНачала 		= ЗаписьПериода.ДатаНачала;
		НоваяСтрока.ДатаОкончания 	= ЗаписьПериода.ДатаОкончания;
	КонецЦикла;
	
	МодульСборГрафиковОтпусков.ОбработатьНовыйГрафикПодразделения(ОписаниеДокумента, ИдентификаторыДокументы);

КонецПроцедуры 

Процедура ЗагрузитьСборГрафиковОтпусковПредприятия(Объект, ИдентификаторыДокументы, МодульСборГрафиковОтпусков) Экспорт
	
	ОписаниеДокумента = МодульСборГрафиковОтпусков.ОписаниеДокументаГрафикПредприятия();
	ОписаниеДокумента.Год 								= Объект.Год;
	ОписаниеДокумента.ИдентификаторДокумента 			= Объект.ИдентификаторДокумента;
	ОписаниеДокумента.СостояниеСбораГрафиковОтпусков 	= Объект.Состояние;
	
	МодульСборГрафиковОтпусков.ОбработатьНовыйГрафикПредприятия(ОписаниеДокумента, ИдентификаторыДокументы);

КонецПроцедуры

#КонецОбласти

#Область РегистрацияДокументовНаПодпись

Процедура ЗарегистрироватьДокументыНаПодпись() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданияКИсполнению = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
		Ложь, Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокФайлов = ЗаданияКИсполнению.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	Если СписокФайлов <> Неопределено Тогда
		ЗарегистрироватьИзмененияДокументовКадровогоЭДО(СписокФайлов)
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗарегистрироватьИзмененияДокументовКадровогоЭДО(СписокФайлов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФайлов", СписокФайлов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДокументНаПодпись) КАК ТипОбъекта
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент В(&СписокФайлов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбработанныеФайлы = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбработанныеФайлы.Добавить(Выборка.ЭлектронныйДокумент);
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
				МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
				МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.УдалитьФайлыИзОбработки(
							ОбработанныеФайлы,
							Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция РолиИсполнителейЗадач() Экспорт

	РолиИсполнителейЗадач = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗадач();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РолиИсполнителейЗадач", РолиИсполнителейЗадач);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РолиИсполнителей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Ссылка В(&РолиИсполнителейЗадач)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти



