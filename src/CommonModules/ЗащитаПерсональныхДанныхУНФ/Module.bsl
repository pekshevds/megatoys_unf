#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Справочник.ФизическиеЛица";
	НовыеСведения.ПоляРегистрации	= "Ссылка";
	НовыеСведения.ПоляДоступа		= "ДатаРождения";
	НовыеСведения.ОбластьДанных		= ИмяКатегорииЛичныеДанные();
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ДокументыФизическихЛиц";
	НовыеСведения.ПоляРегистрации	= "Физлицо";
	НовыеСведения.ПоляДоступа		= "ВидДокумента,Серия,Номер,ДатаВыдачи,СрокДействия,КемВыдан,КодПодразделения,Представление";
	НовыеСведения.ОбластьДанных		= ИмяКатегорииПаспортныеДанные();
	
КонецПроцедуры

Процедура ЗаполнитьОбластиПерсональныхДанных(КатегорииПерсональныхДанных) Экспорт
	
	КатегорияЛичныеДанные = КатегорииПерсональныхДанных.Добавить();
	КатегорияЛичныеДанные.Имя = ИмяКатегорииЛичныеДанные();
	КатегорияЛичныеДанные.Представление = НСтр("ru = 'Личные данные'");
	
	КатегорияФИО = КатегорииПерсональныхДанных.Добавить();
	КатегорияФИО.Имя = ИмяКатегорииФИО();
	КатегорияФИО.Представление = НСтр("ru = 'Фамилия, имя, отчество'");
	КатегорияФИО.Родитель = ИмяКатегорииЛичныеДанные();
	
	КатегорияДатаМестоРождения = КатегорииПерсональныхДанных.Добавить();
	КатегорияДатаМестоРождения.Имя = ИмяКатегорииДатаМестоРождения();
	КатегорияДатаМестоРождения.Представление = НСтр("ru = 'Дата и место рождения'");
	КатегорияДатаМестоРождения.Родитель = ИмяКатегорииЛичныеДанные();
	
	КатегорияИНН = КатегорииПерсональныхДанных.Добавить();
	КатегорияИНН.Имя = ИмяКатегорииИНН();
	КатегорияИНН.Представление = НСтр("ru = 'Сведения о постановке на налоговый учет (ИНН)'");
	КатегорияИНН.Родитель = ИмяКатегорииЛичныеДанные();
	
	КатегорияСтраховойНомерПФР = КатегорииПерсональныхДанных.Добавить();
	КатегорияСтраховойНомерПФР.Имя = ИмяКатегорииСтраховойНомерПФР();
	КатегорияСтраховойНомерПФР.Представление = НСтр(
		"ru = 'Сведения о регистрации в Пенсионном фонде (номер страхового свидетельства)'");
	КатегорияСтраховойНомерПФР.Родитель = ИмяКатегорииЛичныеДанные();
	
	КатегорияМестоРегистрацииПроживания = КатегорииПерсональныхДанных.Добавить();
	КатегорияМестоРегистрацииПроживания.Имя = ИмяКатегорииМестоРегистрацииПроживания();
	КатегорияМестоРегистрацииПроживания.Представление = НСтр("ru = 'Сведения о месте регистрации и месте проживания'");
	КатегорияМестоРегистрацииПроживания.Родитель = ИмяКатегорииЛичныеДанные();
	
	КатегорияКонтактнаяИнформация = КатегорииПерсональныхДанных.Добавить();
	КатегорияКонтактнаяИнформация.Имя = ИмяКатегорииКонтактнаяИнформация();
	КатегорияКонтактнаяИнформация.Представление = НСтр("ru = 'Контактная информация'");
	КатегорияКонтактнаяИнформация.Родитель = ИмяКатегорииЛичныеДанные();
		
	КатегорияПаспортныеДанные = КатегорииПерсональныхДанных.Добавить();
	КатегорияПаспортныеДанные.Имя = ИмяКатегорииПаспортныеДанные();
	КатегорияПаспортныеДанные.Представление = НСтр("ru = 'Паспортные данные'");
	КатегорияПаспортныеДанные.Родитель = ИмяКатегорииЛичныеДанные();
	
КонецПроцедуры

Процедура ДополнитьДанныеСубъектовПерсональныхДанных(СубъектыПерсональныхДанных, ДатаАктуальности) Экспорт
	
	Для каждого ДанныеСубъекта Из СубъектыПерсональныхДанных Цикл
		
		// ДанныеСубъекта.Субъект
		// ДанныеСубъекта.ФИО
		// ДанныеСубъекта.Адрес
		// ДанныеСубъекта.ПаспортныеДанные
		
		СубъектСсылка = ДанныеСубъекта.Субъект;
		Если ТипЗнч(СубъектСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			ЗаполнитьДанныеПоФизическомуЛицу(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности);
			
		ИначеЕсли ТипЗнч(СубъектСсылка) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ЗаполнитьДанныеПоСотруднику(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности);
			
		ИначеЕсли ТипЗнч(СубъектСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			ЗаполнитьДанныеПоКонтактномуЛицу(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности);
			
		ИначеЕсли ТипЗнч(СубъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ЗаполнитьДанныеПоКонтрагенту(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеОрганизацииОператораПерсональныхДанных(Организация, ДанныеОрганизации, ДатаАктуальности) Экспорт
	
	Если НЕ УправлениеДоступом.ЧтениеРазрешено(Организация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Организация, ДатаАктуальности);
	ДанныеОрганизации.АдресОрганизации = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОбОрганизации,
		"ЮридическийАдрес");
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		
		ДанныеОрганизации.ОтветственныйЗаОбработкуПерсональныхДанных = ОтветственныйЗаОбработкуПерсональныхДанных(
			Организация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФИОФизическогоЛица(ФизическоеЛицо, ФИО) Экспорт
	
	ФИО = РегистрыСведений.ФИОФизическихЛиц.ФИОФизЛица(ТекущаяДатаСеанса(), ФизическоеЛицо);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных
Процедура ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений) Экспорт
	
	ОписатьПерсональныеДанныеКонтактныхЛиц(ТаблицаСведений);
	ОписатьПерсональныеДанныеКонтрагентов(ТаблицаСведений);
	ОписатьПерсональныеДанныеСотрудников(ТаблицаСведений);
	ОписатьПерсональныеДанныеФизическихЛиц(ТаблицаСведений);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередСкрытиемПерсональныхДанныхСубъектов
Процедура ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, ОтказОтСкрытия) Экспорт
	
	ОтказОтСкрытия = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субъекты", Субъекты);
	Запрос.Текст = ТекстЗапросаИсключения();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Субъект) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеИсключение = ТаблицаИсключений.Добавить();
		НовоеИсключение.Субъект = Выборка.Субъект;
		НовоеИсключение.ПричинаОтменыУничтожения = КомментарийИсключения(Выборка.Субъект);
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриРасчетеСроковХраненияПерсональныхДанных
Процедура ПриРасчетеСроковХраненияПерсональныхДанных(ДанныеСубъектов, СрокиХранения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субъекты", ДанныеСубъектов.ВыгрузитьКолонку("Субъект"));
	Запрос.Текст = ТекстЗапросаИсключения();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Субъект");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Субъект) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора.Субъект = Выборка.Субъект;
		НайденныеСтроки = СрокиХранения.НайтиСтроки(ПараметрыОтбора);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.СрокХранения = МаксимальнаяДатаВремя();
				НайденнаяСтрока.Комментарий = КомментарийИсключения(Выборка.Субъект);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СрокиХранения.Добавить();
		НоваяСтрока.Субъект = Выборка.Субъект;
		НоваяСтрока.Организация = Выборка.Организация;
		НоваяСтрока.СрокХранения = МаксимальнаяДатаВремя();
		НоваяСтрока.Комментарий = КомментарийИсключения(Выборка.Субъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеПоСотруднику(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СубъектСсылка, "Наименование,Физлицо");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.Физлицо) Тогда
		
		ЗаполнитьДанныеПоФизическомуЛицу(ДанныеСубъекта, ЗначенияРеквизитов.Физлицо, ДатаАктуальности)
		
	Иначе
		
		ДанныеСубъекта.ФИО = ЗначенияРеквизитов.Наименование;
		ДанныеСубъекта.Адрес = "";
		ДанныеСубъекта.ПаспортныеДанные = "";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоФизическомуЛицу(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности) 
	
	ФИО = РегистрыСведений.ФИОФизическихЛиц.ФИОФизЛица(ДатаАктуальности, СубъектСсылка);
	
	НаименованиеСубъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СубъектСсылка, "Наименование");
	
	ДанныеСубъекта.ФИО = ?(ПустаяСтрока(ФИО), НаименованиеСубъекта, ФИО);
	ДанныеСубъекта.Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СубъектСсылка,
		Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	
	ДокументыФизическихЛиц = Справочники.ФизическиеЛица.ДокументФизЛицаПоВиду(ДатаАктуальности, СубъектСсылка,
		Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
	Если ДокументыФизическихЛиц.Количество() > 0 Тогда
		
		ДанныеСубъекта.ПаспортныеДанные	= ДокументыФизическихЛиц[0].Представление;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоКонтактномуЛицу(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СубъектСсылка,
		"Наименование,ДокументУдостоверяющийЛичность");
	
	ДанныеСубъекта.ФИО = ЗначенияРеквизитов.Наименование;
	ДанныеСубъекта.Адрес = "";
	ДанныеСубъекта.ПаспортныеДанные = ЗначенияРеквизитов.ДокументУдостоверяющийЛичность;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоКонтрагенту(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СубъектСсылка,
		"ВидКонтрагента,Наименование,ДокументУдостоверяющийЛичность,ФИО,КонтактноеЛицо");
	
	Если ЗначенияРеквизитов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
		
		ДанныеСубъекта.ФИО = ЗначенияРеквизитов.Наименование;
		ДанныеСубъекта.ПаспортныеДанные = "";
		
	ИначеЕсли ЗначенияРеквизитов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо
		ИЛИ ЗначенияРеквизитов.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
		
		ДанныеСубъекта.ФИО = ЗначенияРеквизитов.ФИО;
		Если ПустаяСтрока(ДанныеСубъекта.ФИО)
			И ЗначениеЗаполнено(ЗначенияРеквизитов.КонтактноеЛицо) Тогда
			
			ДанныеСубъекта.ФИО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.КонтактноеЛицо,
				"Наименование");
			
		КонецЕсли;
		
		ДанныеСубъекта.ПаспортныеДанные = ЗначенияРеквизитов.ДокументУдостоверяющийЛичность;
		Если ПустаяСтрока(ДанныеСубъекта.ПаспортныеДанные)
			И ЗначениеЗаполнено(ЗначенияРеквизитов.КонтактноеЛицо) Тогда
			
			ДанныеСубъекта.ПаспортныеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ЗначенияРеквизитов.КонтактноеЛицо, "ДокументУдостоверяющийЛичность");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСубъекта.Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СубъектСсылка, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ТекущаяДатаСеанса());
	
КонецПроцедуры

Функция ОтветственныйЗаОбработкуПерсональныхДанных(Организация)
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.ПодписьРуководителя.ФизическоеЛицо КАК ПодписьРуководителяФизическоеЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ПодписьРуководителяФизическоеЛицо;
КонецФункции

Процедура ОписатьПерсональныеДанныеКонтактныхЛиц(ТаблицаСведений)
	
	МетаданныеКонтактныеЛица = Метаданные.Справочники.КонтактныеЛица;
	
	СведенияФИО = ТаблицаСведений.Добавить();
	СведенияФИО.Объект = МетаданныеКонтактныеЛица.ПолноеИмя();
	СведенияФИО.ПолеСубъект = МетаданныеКонтактныеЛица.СтандартныеРеквизиты.Ссылка.Имя;
	ПоляСведенияФИО = Новый Массив;
	ПоляСведенияФИО.Добавить(МетаданныеКонтактныеЛица.СтандартныеРеквизиты.Наименование.Имя);
	СведенияФИО.Поля = ПоляСведенияФИО;
	СведенияФИО.КатегорияДанных = ИмяКатегорииФИО();
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеКонтактныеЛица.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеКонтактныеЛица.СтандартныеРеквизиты.Ссылка.Имя;
	КонтактнаяИнформацияРеквизиты = МетаданныеКонтактныеЛица.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	ПоляКонтактнаяИнформация = Новый Массив; // Массив из Строка
	ПоляКонтактнаяИнформация.Добавить(МетаданныеКонтактныеЛица.Реквизиты.АдресЭПДляПоиска.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.ЗначенияПолей.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.Значение.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.Представление.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.АдресЭП.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.НомерТелефона.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.НомерТелефонаБезКодов.ПолноеИмя());
	НовыеСведения.Поля = ПоляКонтактнаяИнформация;
	НовыеСведения.КатегорияДанных = ИмяКатегорииКонтактнаяИнформация();
	
КонецПроцедуры

Процедура ОписатьПерсональныеДанныеКонтрагентов(ТаблицаСведений)
	
	МетаданныеКонтрагенты = Метаданные.Справочники.Контрагенты;
	
	СведенияФИО = ТаблицаСведений.Добавить();
	СведенияФИО.Объект = МетаданныеКонтрагенты.ПолноеИмя();
	СведенияФИО.ПолеСубъект = МетаданныеКонтрагенты.СтандартныеРеквизиты.Ссылка.Имя;
	ПоляСведенияФИО = Новый Массив;
	ПоляСведенияФИО.Добавить(МетаданныеКонтрагенты.СтандартныеРеквизиты.Наименование.Имя);
	СведенияФИО.Поля = ПоляСведенияФИО;
	СведенияФИО.КатегорияДанных = ИмяКатегорииФИО();
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеКонтрагенты.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеКонтрагенты.СтандартныеРеквизиты.Ссылка.Имя;
	КонтактнаяИнформацияРеквизиты = МетаданныеКонтрагенты.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	ПоляКонтактнаяИнформация = Новый Массив; // Массив из Строка
	ПоляКонтактнаяИнформация.Добавить(МетаданныеКонтрагенты.Реквизиты.АдресЭПДляПоиска.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.ЗначенияПолей.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.Значение.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.Представление.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.АдресЭП.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.НомерТелефона.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.НомерТелефонаБезКодов.ПолноеИмя());
	НовыеСведения.Поля = ПоляКонтактнаяИнформация;
	НовыеСведения.КатегорияДанных = ИмяКатегорииКонтактнаяИнформация();
	
КонецПроцедуры

Процедура ОписатьПерсональныеДанныеСотрудников(ТаблицаСведений)
	
	МетаданныеСотрудники = Метаданные.Справочники.Сотрудники;
	
	СведенияФИО = ТаблицаСведений.Добавить();
	СведенияФИО.Объект = МетаданныеСотрудники.ПолноеИмя();
	СведенияФИО.ПолеСубъект = МетаданныеСотрудники.СтандартныеРеквизиты.Ссылка.Имя;
	ПоляСведенияФИО = Новый Массив;
	ПоляСведенияФИО.Добавить(МетаданныеСотрудники.СтандартныеРеквизиты.Наименование.Имя);
	СведенияФИО.Поля = ПоляСведенияФИО;
	СведенияФИО.КатегорияДанных = ИмяКатегорииФИО();
	
КонецПроцедуры

Процедура ОписатьПерсональныеДанныеФизическихЛиц(ТаблицаСведений)
	
	МетаданныеФизическиеЛица = Метаданные.Справочники.ФизическиеЛица;
	
	СведенияФИО = ТаблицаСведений.Добавить();
	СведенияФИО.Объект = МетаданныеФизическиеЛица.ПолноеИмя();
	СведенияФИО.ПолеСубъект = МетаданныеФизическиеЛица.СтандартныеРеквизиты.Ссылка.Имя;
	ПоляСведенияФИО = Новый Массив;
	ПоляСведенияФИО.Добавить(МетаданныеФизическиеЛица.СтандартныеРеквизиты.Наименование.Имя);
	ПоляСведенияФИО.Добавить(МетаданныеФизическиеЛица.Реквизиты.ФИО.ПолноеИмя());
	ПоляСведенияФИО.Добавить(МетаданныеФизическиеЛица.Реквизиты.Фамилия.ПолноеИмя());
	ПоляСведенияФИО.Добавить(МетаданныеФизическиеЛица.Реквизиты.Имя.ПолноеИмя());
	ПоляСведенияФИО.Добавить(МетаданныеФизическиеЛица.Реквизиты.Отчество.ПолноеИмя());
	ПоляСведенияФИО.Добавить(МетаданныеФизическиеЛица.Реквизиты.Инициалы.ПолноеИмя());
	СведенияФИО.Поля = ПоляСведенияФИО;
	СведенияФИО.КатегорияДанных = ИмяКатегорииФИО();
	
	МетаданныеФИОФизическихЛиц = Метаданные.РегистрыСведений.ФИОФизическихЛиц;
	
	СведенияФИОФизическихЛиц = ТаблицаСведений.Добавить();
	СведенияФИОФизическихЛиц.Объект = МетаданныеФИОФизическихЛиц.ПолноеИмя();
	СведенияФИОФизическихЛиц.ПолеСубъект = МетаданныеФИОФизическихЛиц.Измерения.ФизическоеЛицо.Имя;
	ПоляФИОФизическихЛиц = Новый Массив; // Массив из Строка
	ПоляФИОФизическихЛиц.Добавить(МетаданныеФИОФизическихЛиц.Ресурсы.Фамилия.ПолноеИмя());
	ПоляФИОФизическихЛиц.Добавить(МетаданныеФИОФизическихЛиц.Ресурсы.Имя.ПолноеИмя());
	ПоляФИОФизическихЛиц.Добавить(МетаданныеФИОФизическихЛиц.Ресурсы.Отчество.ПолноеИмя());
	ПоляФИОФизическихЛиц.Добавить(МетаданныеФИОФизическихЛиц.Ресурсы.Инициалы.ПолноеИмя());
	СведенияФИОФизическихЛиц.Поля = ПоляФИОФизическихЛиц;
	СведенияФИОФизическихЛиц.КатегорияДанных = ИмяКатегорииФИО();
	
	СведенияДатаМестоРождения = ТаблицаСведений.Добавить();
	СведенияДатаМестоРождения.Объект = МетаданныеФизическиеЛица.ПолноеИмя();
	СведенияДатаМестоРождения.ПолеСубъект = МетаданныеФизическиеЛица.СтандартныеРеквизиты.Ссылка.Имя;
	ПоляДатаМестоРождения = Новый Массив; // Массив из Строка
	ПоляДатаМестоРождения.Добавить(МетаданныеФизическиеЛица.Реквизиты.МестоРождения.ПолноеИмя());
	ПоляДатаМестоРождения.Добавить(МетаданныеФизическиеЛица.Реквизиты.ДатаРождения.ПолноеИмя());
	СведенияДатаМестоРождения.Поля = ПоляДатаМестоРождения;
	СведенияДатаМестоРождения.КатегорияДанных = ИмяКатегорииДатаМестоРождения();
	
	СведенияИНН = ТаблицаСведений.Добавить();
	СведенияИНН.Объект = МетаданныеФизическиеЛица.ПолноеИмя();
	СведенияИНН.ПолеСубъект = МетаданныеФизическиеЛица.СтандартныеРеквизиты.Ссылка.Имя;
	СведенияИНН.Поля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		МетаданныеФизическиеЛица.Реквизиты.ИНН.ПолноеИмя());
	СведенияИНН.КатегорияДанных = ИмяКатегорииИНН();
	
	СведенияСтраховойНомерПФР = ТаблицаСведений.Добавить();
	СведенияСтраховойНомерПФР.Объект = МетаданныеФизическиеЛица.ПолноеИмя();
	СведенияСтраховойНомерПФР.ПолеСубъект = МетаданныеФизическиеЛица.СтандартныеРеквизиты.Ссылка.Имя;
	СведенияСтраховойНомерПФР.Поля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		МетаданныеФизическиеЛица.Реквизиты.СтраховойНомерПФР.ПолноеИмя());
	СведенияСтраховойНомерПФР.КатегорияДанных = ИмяКатегорииСтраховойНомерПФР();
	
	МетаданныеДокументыФизическихЛиц = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	
	СведенияПаспортныеДанные = ТаблицаСведений.Добавить();
	СведенияПаспортныеДанные.Объект = МетаданныеДокументыФизическихЛиц.ПолноеИмя();
	СведенияПаспортныеДанные.ПолеСубъект = МетаданныеДокументыФизическихЛиц.Измерения.Физлицо.Имя;
	ПоляПаспортныеДанные = Новый Массив; // Массив из Строка
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.Серия.ПолноеИмя());
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.Номер.ПолноеИмя());
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.ДатаВыдачи.ПолноеИмя());
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.СрокДействия.ПолноеИмя());
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.КемВыдан.ПолноеИмя());
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.КодПодразделения.ПолноеИмя());
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.Представление.ПолноеИмя());
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.ФамилияЛатиницей.ПолноеИмя());
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.ИмяЛатиницей.ПолноеИмя());
	ПоляПаспортныеДанные.Добавить(МетаданныеДокументыФизическихЛиц.Ресурсы.СтранаВыдачи.ПолноеИмя());
	СведенияПаспортныеДанные.Поля = ПоляПаспортныеДанные;
	СведенияПаспортныеДанные.КатегорияДанных = ИмяКатегорииПаспортныеДанные();
	
	СведенияМестоРегистрацииПроживания = ТаблицаСведений.Добавить();
	СведенияМестоРегистрацииПроживания.Объект = МетаданныеФизическиеЛица.ПолноеИмя();
	СведенияМестоРегистрацииПроживания.ПолеСубъект = МетаданныеФизическиеЛица.СтандартныеРеквизиты.Ссылка.Имя;
	ПоляМестоРегистрацииПроживания = Новый Массив; // Массив из Строка
	ПоляМестоРегистрацииПроживания.Добавить(
		МетаданныеФизическиеЛица.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Регион.ПолноеИмя());
	ПоляМестоРегистрацииПроживания.Добавить(
		МетаданныеФизическиеЛица.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Город.ПолноеИмя());
	СведенияМестоРегистрацииПроживания.Поля = ПоляМестоРегистрацииПроживания;
	СведенияМестоРегистрацииПроживания.КатегорияДанных = ИмяКатегорииМестоРегистрацииПроживания();
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеФизическиеЛица.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеФизическиеЛица.СтандартныеРеквизиты.Ссылка.Имя;
	КонтактнаяИнформацияРеквизиты = МетаданныеФизическиеЛица.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	ПоляКонтактнаяИнформация = Новый Массив; // Массив из Строка
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.ЗначенияПолей.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.Значение.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.Представление.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.АдресЭП.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.НомерТелефона.ПолноеИмя());
	ПоляКонтактнаяИнформация.Добавить(КонтактнаяИнформацияРеквизиты.НомерТелефонаБезКодов.ПолноеИмя());
	НовыеСведения.Поля = ПоляКонтактнаяИнформация;
	НовыеСведения.КатегорияДанных = ИмяКатегорииКонтактнаяИнформация();
	
КонецПроцедуры

Функция ТекстЗапросаИсключения()
	// АПК:96-выкл ОБЪЕДИНИТЬ является необходимым условием запроса
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыНачисленияУдержания.Сотрудник.Физлицо КАК Субъект
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ.НачисленияУдержания КАК НачислениеЗарплатыНачисленияУдержания
	|ГДЕ
	|	НачислениеЗарплатыНачисленияУдержания.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыНалогиНаДоходы.Сотрудник.Физлицо
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ.НалогиНаДоходы КАК НачислениеЗарплатыНалогиНаДоходы
	|ГДЕ
	|	НачислениеЗарплатыНалогиНаДоходы.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыПогашениеЗаймов.Сотрудник.Физлицо
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ.ПогашениеЗаймов КАК НачислениеЗарплатыПогашениеЗаймов
	|ГДЕ
	|	НачислениеЗарплатыПогашениеЗаймов.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыВзносы.Сотрудник.Физлицо
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ.Взносы КАК НачислениеЗарплатыВзносы
	|ГДЕ
	|	НачислениеЗарплатыВзносы.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыПримененныеВычетыПоНДФЛ.Сотрудник.Физлицо
	|ИЗ
	|	Документ.НачислениеЗарплатыУНФ.ПримененныеВычетыПоНДФЛ КАК НачислениеЗарплатыПримененныеВычетыПоНДФЛ
	|ГДЕ
	|	НачислениеЗарплатыПримененныеВычетыПоНДФЛ.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РССотрудники.Сотрудник.Физлицо
	|ИЗ
	|	РегистрСведений.Сотрудники КАК РССотрудники
	|ГДЕ
	|	РССотрудники.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РССотрудники.Сотрудник
	|ИЗ
	|	РегистрСведений.Сотрудники КАК РССотрудники
	|ГДЕ
	|	РССотрудники.Сотрудник В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&Субъекты)
	|	И Контрагенты.ВидКонтрагента <> ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязиКонтрагентКонтакт.Контакт
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт КАК СвязиКонтрагентКонтакт
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контакт В(&Субъекты)
	|	И СвязиКонтрагентКонтакт.Контрагент.ВидКонтрагента <> ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КонтрагентДляПодарочныхСертификатов.Значение
	|ИЗ
	|	Константа.КонтрагентДляПодарочныхСертификатов КАК КонтрагентДляПодарочныхСертификатов
	|ГДЕ
	|	КонтрагентДляПодарочныхСертификатов.Значение В(&Субъекты)";
	// АПК:96-вкл
КонецФункции

Функция КомментарийИсключения(Субъект)
	Если ТипЗнч(Субъект) <> Тип("СправочникСсылка.Сотрудники")
		И ТипЗнч(Субъект) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат НСтр("ru = 'Не является субъектом персональных данных'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат НСтр("ru = 'Субъект оформлен по ТК РФ'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
КонецФункции

Функция ИмяКатегорииЛичныеДанные()
	Возврат "ЛичныеДанные";
КонецФункции

Функция ИмяКатегорииФИО()
	Возврат "ФИО";
КонецФункции

Функция ИмяКатегорииДатаМестоРождения()
	Возврат "ДатаМестоРождения";
КонецФункции

Функция ИмяКатегорииИНН()
	Возврат "ИНН";
КонецФункции

Функция ИмяКатегорииСтраховойНомерПФР()
	Возврат "СтраховойНомерПФР";
КонецФункции

Функция ИмяКатегорииМестоРегистрацииПроживания()
	Возврат "МестоРегистрацииПроживания";
КонецФункции

Функция ИмяКатегорииКонтактнаяИнформация()
	Возврат "КонтактнаяИнформация";
КонецФункции

Функция ИмяКатегорииПаспортныеДанные()
	Возврат "ПаспортныеДанные";
КонецФункции

Функция МаксимальнаяДатаВремя()
	
	Возврат '39991231235959';
	
КонецФункции

#КонецОбласти
