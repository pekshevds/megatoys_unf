#Область ПрограммныйИнтерфейс

// Процедура запускает регламент загрузки статусов заказов СБП из формы списка документов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма-владелец, откуда вызывается обработчик;
//
Процедура ЗагрузитьСтатусыОплатыИзФормыСписка(Форма) Экспорт

	ОснованиеПлатежа = Новый Массив;
	ОснованиеПлатежа.Добавить(Форма.Элементы.Список.ТекущаяСтрока);
	
	ПараметрыВыполненияКоманды = ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды();
    ПараметрыВыполненияКоманды.Вставить("Форма", Форма);
	
	Подключаемый_ЗагрузитьСтатусыОплаты(ОснованиеПлатежа, ПараметрыВыполненияКоманды);
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриОткрытииФормыQRКода.
//
Процедура ПриОткрытииФормыQRКода(Форма, ДанныеПлатежнойСсылки, ОповещениеПослеЗавершенияНастройкиФормы) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		ОповещениеПослеЗавершенияНастройкиФормы.ДополнительныеПараметры, 
		ДанныеПлатежнойСсылки);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПослеЗавершенияНастройкиФормы, Форма, "ДисплейПокупателя");
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриОтображенииQRКода.
//
Процедура ПриОтображенииQRКода(ДанныеПлатежнойСсылки, Параметры) Экспорт
	
	ВывестиQRКодНаДисплей(
		ДанныеПлатежнойСсылки.ПлатежнаяСсылка, 
		Base64Строка(ДанныеПлатежнойСсылки.QRКод), 
		Новый ОписаниеОповещения("ПечатьПречекаЗавершение", ЭтотОбъект));
																				
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриОбработкеНажатияКоманды.
//
Процедура ПриОбработкеНажатияКоманды(Форма, Команда, ДанныеПлатежнойСсылки) Экспорт
	
	Если Команда.Имя = "ПечатьПречека" Тогда

        ПечатьПречека(
			ДанныеПлатежнойСсылки.ПлатежнаяСсылка, 
			0, 
			Новый ОписаниеОповещения("ПечатьПречекаЗавершение", ЭтотОбъект));
			
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриЗакрытииФормыQRКода
//
Процедура ПриЗакрытииФормыQRКода(Форма) Экспорт

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

// Процедура обрабатывает события элементов формы по работе с кассовыми qr-кодами
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма-владелец, откуда вызывается обработчик;
//  Элемент - ЭлементФормы - элемент обработки
//  ВидДействия - Строка - вариант действия обработки / имя элемента
//  СтандартнаяОбработка - Булево - признак обработки действия по данному элементу
//
Процедура ОбработкаЭлементаФормыПомощника(Форма, Элемент, ВидДействия, СтандартнаяОбработка = Ложь) Экспорт
	
	Отказ 			= Ложь;
    ОписаниеОшибки 	= "";
		
	Если ВидДействия = "ПерейтиНаИнструкциюNFC" Тогда

		СтандартнаяОбработка = Ложь;
		ПереводыСБПc2bКлиент.ОткрытьИнструкциюПоПрограммированиюNFCМетки();
			
	ИначеЕсли ВидДействия = "Подключить" Тогда
		
		КассовыеСсылки 			= Форма.НастройкиКассовыхСсылокСБП.КассовыеСсылки;
					
		НастройкиСпособаОплаты  = КассовыеСсылки.СпособыОплаты.Получить(Форма.СпособОплатыКассовойСсылкиСБП);

		Если НастройкиСпособаОплаты <> Неопределено Тогда
		
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПодключитьКассовуюСсылкуЗавершение",
				ЭтотОбъект,
				Новый Структура("Форма", Форма));

			Для Каждого НастройкаПодключения Из Форма.НастройкиКассовыхСсылокСБП.НастройкиПодключения Цикл
		
				Если НастройкаПодключения.СпособОплаты = Форма.СпособОплатыКассовойСсылкиСБП Тогда
			
					ПереводыСБПc2bКлиент.ПодключитьКассовуюСсылку(
						НастройкаПодключения.Интеграция,
						ОписаниеОповещения,
						ЭтотОбъект);

				КонецЕсли;
				
			КонецЦикла;			
				
		КонецЕсли;
			
	ИначеЕсли ВидДействия = "ПерейтиНаИнструкциюКассовыйQRКод"  Тогда

		СтандартнаяОбработка = Ложь;
		ПереводыСБПc2bКлиент.ОткрытьОписаниеКассовыхСсылок();
			
	ИначеЕсли ВидДействия = "СпособОплатыКассовойСсылкиСБП"  Тогда

		РеквизитыКассы			= Форма.НастройкиКассовыхСсылокСБП.РеквизитыКассы;
		КассовыеСсылки 			= Форма.НастройкиКассовыхСсылокСБП.КассовыеСсылки;
					
		КассовыеСсылки.СпособОплатыДляПечати = Форма.СпособОплатыКассовойСсылкиСБП;
				
		ИнтеграцияСПлатежнымиСистемамиУНФВызовСервера.ЗаписатьДанныеКассовойСсылки(
			РеквизитыКассы.КассаККМ,
			КассовыеСсылки);
			
	ИначеЕсли ВидДействия = "ИспользоватьКассовыйQRКодСБП"  Тогда

		РеквизитыКассы			= Форма.НастройкиКассовыхСсылокСБП.РеквизитыКассы;
		КассовыеСсылки 			= Форма.НастройкиКассовыхСсылокСБП.КассовыеСсылки;
		
		КассовыеСсылки.ИспользоватьКассовыйQRКодСБП = Форма.ИспользоватьКассовыйQRКодСБП;

		Если ЗначениеЗаполнено(РеквизитыКассы.КассаККМ) Тогда
		
			ИнтеграцияСПлатежнымиСистемамиУНФВызовСервера.ЗаписатьДанныеКассовойСсылки(
				РеквизитыКассы.КассаККМ,
				КассовыеСсылки);

		КонецЕсли;
			
	ИначеЕсли ВидДействия = "СформироватьКассовыеСсылки"  Тогда
		
		Отказ = Ложь;
		
		Если ПроверитьЗаполнениеНастроек(Форма, ВидДействия) Тогда
			СформироватьКассовыеСсылки(Форма, Отказ, ОписаниеОшибки);
		Иначе
			Отказ = Истина;
		КонецЕсли;		
		
	КонецЕсли;

	ИнтеграцияСПлатежнымиСистемамиУНФКлиентСервер.НастроитьПояснениеКФормеПомощника(Форма);

	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьКассовуюСсылкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РеквизитыКассы					= ДополнительныеПараметры.Форма.НастройкиКассовыхСсылокСБП.РеквизитыКассы;
	КассовыеСсылки 					= ДополнительныеПараметры.Форма.НастройкиКассовыхСсылокСБП.КассовыеСсылки;
	СпособОплатыКассовойСсылкиСБП 	= ДополнительныеПараметры.Форма.СпособОплатыКассовойСсылкиСБП;
	
	НастройкиСпособаОплаты  = КассовыеСсылки.СпособыОплаты.Получить(СпособОплатыКассовойСсылкиСБП);

	ЗаполнитьЗначенияСвойств(НастройкиСпособаОплаты, Результат);
	
	ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ЗаписатьДанныеКассовойСсылки(
		РеквизитыКассы.КассаККМ,
		КассовыеСсылки);

	ИнтеграцияСПлатежнымиСистемамиУНФКлиентСервер.НастроитьПояснениеКФормеПомощника(ДополнительныеПараметры.Форма);
		
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриЗаполненииПараметровСообщенияБезШаблонаСБП
//
Процедура ПриЗаполненииПараметровСообщенияБезШаблонаСБП(ПараметрыСообщения, ПараметрыОперации) Экспорт

	Шаблон = ИнтеграцияСПлатежнымиСистемамиУНФВызовСервера.ШаблонСообщенияОплатаСБП(
		ПараметрыСообщения.Предмет, 
		ПараметрыОперации.ПлатежнаяСсылка);

	ПараметрыСообщения.Тема  	= Шаблон.Тема;
	ПараметрыСообщения.Текст 	= Шаблон.Тело;
	
    ПараметрыСообщения.Вставить("Вложения", Новый Массив);

КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриОткрытииФормыПодключенияСсылки
Процедура ПриОткрытииФормыПодключенияСсылки(Форма, Отказ) Экспорт
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, Форма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриЗакрытииФормыПодключенияСсылки
//
Процедура ПриЗакрытииФормыПодключенияСсылки(Форма, ЗавершениеРаботы) Экспорт

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

// Определяет алгоритм, выполняющийся при открытии подключения кассовой ссылки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подключения кассовой ссылки.
//  ИмяСобытия - Строка - может быть использовано для идентификации сообщений
//    принимающими их формами.
//  Параметр - Произвольный - могут быть переданы любые необходимые данные для обработки.
//  Источник - Произвольный - источник события, например, в качестве источника может быть
//   указана другая форма.//
Процедура ОбработкаОповещенияФормыПодключенияСсылки(
		Форма,
		ИмяСобытия,
		Параметр,
		Источник) Экспорт
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И Форма.ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				Форма.КассоваяСсылка = Штрихкод;     
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВывестиQRКодНаДисплей(ИдентификаторQRКода, КартинкаQRКода, ОписаниеОповещениеПриЗавершении) Экспорт
	
	Если ОборудованиеДисплеиПокупателяКлиент.ПодключенныеДисплеиПокупателяВыводятQRКод() Тогда
		
		ПараметрыОперации = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя();
		ПараметрыОперации.ЗначениеQRКода = ИдентификаторQRКода;
		ПараметрыОперации.КартинкаQRКода = КартинкаQRКода;
		
		ОборудованиеДисплеиПокупателяКлиент.НачатьВыводQRКодаНаДисплейПокупателя(
			ОписаниеОповещениеПриЗавершении, 
			Новый УникальныйИдентификатор, 
			Неопределено, 
			ПараметрыОперации);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьПречека(ИдентификаторQRКода, СуммаОперации, ОписаниеОповещениеПриЗавершении) Экспорт
	
	СБП				  = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей");
	ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатиQRКодаНаФискальномУстройстве();
		
	ПараметрыОперации.СуммаОперации		  		= СуммаОперации;
	ПараметрыОперации.ТипПлатежнойСистемы 		= СБП;
	ПараметрыОперации.QRКод.ЗначениеКода  		= ИдентификаторQRКода;
	ПараметрыОперации.QRКод.ТекстПользователя 	= НСтр("ru='Для совершения платежа отсканируйте QR-код'");
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьQRКодаНаФискальномУстройстве(
		ОписаниеОповещениеПриЗавершении, 
		Новый УникальныйИдентификатор, 
		Неопределено, 
		ПараметрыОперации); 
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
Процедура Подключаемый_ЗагрузитьСтатусыОплаты(ОснованиеПлатежа, ПараметрыВыполненияКоманды = Неопределено) Экспорт

	Форма = ПараметрыВыполненияКоманды.Форма;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Загрузка статусов операций.'");
	
	РезультатВыполнения = ИнтеграцияСПлатежнымиСистемамиУНФВызовСервера.ЗагрузитьСтатусыОплатыЗапускЗадания(
		Форма.УникальныйИдентификатор);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ЗагрузитьСтатусыОплатыЗавершение",
		ЭтотОбъект);
		
	Если РезультатВыполнения.Статус = "Выполнено" Или РезультатВыполнения.Статус = "Ошибка" Тогда
		ЗагрузитьСтатусыОплатыЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗагрузитьСтатусыОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Загрузка статусов операций успешно завершена.'"),
			,
			,
			БиблиотекаКартинок.Успешно32);
			
		Оповестить("ОнлайнОплата_ЗагруженыДокументы");
			
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОповещениеПользователя(
			Результат.КраткоеПредставлениеОшибки,
			,
			,
			БиблиотекаКартинок.Ошибка32);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьПречекаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда  
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции         

Функция ПроверитьЗаполнениеНастроек(Форма, ВидДействия)

	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Форма.СпособОплатыКассовойСсылкиСБП) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не заполнено поле ""Способ оплаты""'"));
		Отказ = Истина;
	КонецЕсли;

	Если ВидДействия = "ЗаписатьНастройкиКассовойСсылки"  Тогда	

		Если Не ЗначениеЗаполнено(Форма.КассоваяСсылкаСБП) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Необходимо сформировать кассовую ссылку'"));
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

Процедура СформироватьКассовыеСсылки(Форма, Отказ, ОписаниеОшибки = "")

	КассоваяСсылка = ИнтеграцияСПлатежнымиСистемамиУНФВызовСервера.СформироватьКассовыеСсылки(
		Форма.СпособОплатыКассовойСсылкиСБП,
		Форма.НастройкиКассовыхСсылокСБП, 
		Отказ);
				
	Если Не ЗначениеЗаполнено(КассоваяСсылка) Тогда
		Отказ = Истина;
	КонецЕсли;
			
	Если Не Отказ Тогда
				
		РеквизитыКассы			= Форма.НастройкиКассовыхСсылокСБП.РеквизитыКассы;
		КассовыеСсылки 			= Форма.НастройкиКассовыхСсылокСБП.КассовыеСсылки;
					
		НастройкиСпособаОплаты  = Новый Структура;
		НастройкиСпособаОплаты.Вставить("КассоваяСсылка", 		КассоваяСсылка.КассоваяСсылка);
		НастройкиСпособаОплаты.Вставить("ИдентификаторОплаты",	КассоваяСсылка.ИдентификаторОплаты);

		КассовыеСсылки.СпособыОплаты.Вставить(Форма.СпособОплатыКассовойСсылкиСБП, НастройкиСпособаОплаты);
		КассовыеСсылки.СпособОплатыДляПечати = Форма.СпособОплатыКассовойСсылкиСБП;
		
		ИнтеграцияСПлатежнымиСистемамиУНФВызовСервера.ЗаписатьДанныеКассовойСсылки(
			РеквизитыКассы.КассаККМ,
			КассовыеСсылки,
			Отказ);

	ИначеЕсли ЗначениеЗаполнено(КассоваяСсылка) Тогда
		ОписаниеОшибки = КассоваяСсылка;
	КонецЕсли;			

КонецПроцедуры

Процедура ОткрытьФормуПлатежнойСсылкиПродолжение(Знач ПроверкаПройдена, Знач Параметры) Экспорт
	
	Если Не ПроверкаПройдена Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОснованиеПлатежа", Параметры.ОснованиеПлатежа);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодготовкиПлатежнойСсылкиСБП", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти
