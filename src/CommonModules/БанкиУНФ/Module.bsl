///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновляет банки из классификатора и устанавливает их текущее состояние (реквизит РучноеИзменение).
// Связь устанавливается по БИК и КоррСчету (только для элементов).
// Обновляются все элементы, у которых хотя бы один реквизит не совпадает с аналогичным в классификаторе.
// 
// Параметры:
//  СписокБанков - Массив из СправочникСсылка.КлассификаторБанков - список банков для обновления,
//                 если передан пустой массив, то необходимо проверить все элементы и обновить измененные.
Процедура СинхронизироватьБанкиСКлассификатором(Знач СписокБанков) Экспорт
	
	ОбновитьБанкиИзКлассификатора(СписокБанков);
	УстановитьПризнакРучноеИзменениеПриПотереСвязиСКлассификатором();
	
КонецПроцедуры

// Читает текущее состояние объекта из информационной базы и приводит форму в соответствие с ним
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ПрочитатьФлагРучногоИзменения(Знач Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Банки.РучноеИзменение КАК РучноеИзменение
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	Банки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Форма.Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Форма.РучноеИзменение = Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.РучноеИзменение >= 2 Тогда
			Форма.РучноеИзменение = Неопределено;
		Иначе
			Форма.РучноеИзменение = Выборка.РучноеИзменение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.РучноеИзменение = Неопределено Тогда
		СсылкаНаКлассификатор = СсылкаПоКлассификатору(Форма.Объект.Код);
		Если ЗначениеЗаполнено(СсылкаНаКлассификатор) Тогда
			Запрос.УстановитьПараметр("Ссылка", СсылкаНаКлассификатор);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КлассификаторБанковРФ.ДеятельностьПрекращена
			|ИЗ
			|	Справочник.КлассификаторБанков КАК КлассификаторБанковРФ
			|ГДЕ
			|	КлассификаторБанковРФ.Ссылка = &Ссылка";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Форма.ДеятельностьПрекращена = Выборка.ДеятельностьПрекращена;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьФлагРучногоИзменения(Форма);
	
КонецПроцедуры

// Функция осуществляет подбор данных классификатора, для копирования в элемент справочника Банки
// если такого банка еще нет, то он создается
// если банк находится в иерархии не на первом уровне, то создается/копируется вся цепочка родителей
//
// Параметры:
//  СсылкиБанков - Массив из СправочникСсылка.КлассификаторБанков - элементы классификатора для обработки
//  ИгнорироватьРучноеИзменение - Булево - указание не обрабатывать банки, измененные вручную
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.Банки
//
Функция ПодобратьБанкИзКлассификатора(Знач СсылкиБанков, ИгнорироватьРучноеИзменение = Ложь) Экспорт
	
	МассивБанков = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СсылкиБанков) Тогда
		Возврат МассивБанков;
	КонецЕсли;
	
	СсылкиИерархия = ДополнитьМассивРодителямиСсылок(СсылкиБанков);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкиИерархия", СсылкиИерархия);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторБанков.Код КАК БИК,
	|	КлассификаторБанков.КоррСчет КАК КоррСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КлассификаторБанковРКЦ.Наименование, """") = """"
	|			ТОГДА КлассификаторБанков.Наименование
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанковРКЦ.Наименование, """") + ""//"" + КлассификаторБанков.Наименование
	|	КОНЕЦ КАК Наименование,
	|	КлассификаторБанков.Город КАК Город,
	|	КлассификаторБанков.Адрес КАК Адрес,
	|	КлассификаторБанков.Телефоны КАК Телефоны,
	|	КлассификаторБанков.ЭтоГруппа КАК ЭтоГруппа,
	|	КлассификаторБанков.ДеятельностьПрекращена КАК ДеятельностьПрекращена,
	|	КлассификаторБанков.Родитель.Код КАК РодительКод,
	|	КлассификаторБанков.СВИФТБИК КАК СВИФТБИК
	|ПОМЕСТИТЬ ВТ_КлассификаторБанков
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковРКЦ
	|		ПО КлассификаторБанков.БИКРКЦ = КлассификаторБанковРКЦ.Ссылка
	|ГДЕ
	|	КлассификаторБанков.Ссылка В (&СсылкиИерархия)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БИК,
	|	КоррСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Банки.Ссылка, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк,
	|	ВТ_КлассификаторБанков.БИК КАК Код,
	|	ВТ_КлассификаторБанков.КоррСчет КАК КоррСчет,
	|	ВТ_КлассификаторБанков.ЭтоГруппа КАК ЭтоРегион,
	|	ВТ_КлассификаторБанков.Наименование КАК Наименование,
	|	ВТ_КлассификаторБанков.Город КАК Город,
	|	ВТ_КлассификаторБанков.Адрес КАК Адрес,
	|	ВТ_КлассификаторБанков.Телефоны КАК Телефоны,
	|	ВТ_КлассификаторБанков.СВИФТБИК КАК СВИФТБИК,
	|	ВЫБОР
	|		КОГДА ВТ_КлассификаторБанков.ДеятельностьПрекращена
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РучноеИзменение,
	|	ЕСТЬNULL(ВТ_КлассификаторБанков.РодительКод, """") КАК РодительКод
	|ПОМЕСТИТЬ БанкиБезРодителей
	|ИЗ
	|	ВТ_КлассификаторБанков КАК ВТ_КлассификаторБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО ВТ_КлассификаторБанков.КоррСчет = Банки.КоррСчет
	|		И ВТ_КлассификаторБанков.БИК = Банки.Код
	|		И ВТ_КлассификаторБанков.ЭтоГруппа = Банки.ЭтоГруппа
	|ГДЕ
	|	НЕ ВТ_КлассификаторБанков.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Банки.Ссылка, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)),
	|	ВТ_КлассификаторБанков.БИК,
	|	NULL,
	|	ВТ_КлассификаторБанков.ЭтоГруппа,
	|	ВТ_КлассификаторБанков.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	ЕСТЬNULL(ВТ_КлассификаторБанков.РодительКод, """")
	|ИЗ
	|	ВТ_КлассификаторБанков КАК ВТ_КлассификаторБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО ВТ_КлассификаторБанков.БИК = Банки.Код
	|		И ВТ_КлассификаторБанков.ЭтоГруппа = Банки.ЭтоГруппа
	|ГДЕ
	|	ВТ_КлассификаторБанков.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РодительКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанкиБезРодителей.Банк КАК Банк,
	|	БанкиБезРодителей.Код КАК Код,
	|	БанкиБезРодителей.КоррСчет КАК КоррСчет,
	|	БанкиБезРодителей.ЭтоРегион КАК ЭтоРегион,
	|	БанкиБезРодителей.Наименование КАК Наименование,
	|	БанкиБезРодителей.Город КАК Город,
	|	БанкиБезРодителей.Адрес КАК Адрес,
	|	БанкиБезРодителей.Телефоны КАК Телефоны,
	|	БанкиБезРодителей.РучноеИзменение КАК РучноеИзменение,
	|	БанкиБезРодителей.РодительКод КАК РодительКод,
	|	ЕСТЬNULL(Банки.Ссылка, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Родитель,
	|	БанкиБезРодителей.СВИФТБИК КАК СВИФТБИК
	|ИЗ
	|	БанкиБезРодителей КАК БанкиБезРодителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанкиБезРодителей.РодительКод = Банки.Родитель
	|		И БанкиБезРодителей.ЭтоРегион = Банки.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоРегион УБЫВ,
	|	Код";
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаБанков = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Ссылки = Новый Массив;
	Для каждого СтрокаТаблицыЗначений Из ТаблицаБанков Цикл
		
		ОписаниеОбъекта = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений);
		УдалитьЛишниеСвойства(ОписаниеОбъекта);
		Ссылки.Добавить(ОписаниеОбъекта);
		
	КонецЦикла;
	
	МассивБанков = СоздатьОбновитьБанкиВИБ(Ссылки, ИгнорироватьРучноеИзменение);
	
	Возврат МассивБанков;
	
КонецФункции

// Восстановить данные из общего объекта и изменить состояние объекта
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ВосстановитьЭлементИзОбщихДанных(Знач Форма) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Ссылки = Новый Массив;
		Классификатор = СсылкаПоКлассификатору(Форма.Объект.Код, СокрЛП(Форма.Объект.КоррСчет));
		
		Если ЗначениеЗаполнено(Классификатор) Тогда
			Ссылки.Добавить(Классификатор);
			ПодобратьБанкИзКлассификатора(Ссылки, Истина);
			
			Форма.РучноеИзменение = Ложь;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытия = НСтр("ru = 'БанкиУНФ.ВосстановитьЭлементИзОбщихДанных'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки);
		ВызватьИсключение;
	КонецПопытки;
	
	Форма.Прочитать();
	
КонецПроцедуры

// Копирует банки во все области данных
// 
// Параметры:
//  СписокБанков - см. СинхронизироватьБанкиСКлассификатором.СписокБанков
//  ИдентификаторФайла - см. ПоставляемыеДанные.ОбластиТребующиеОбработки.ИдентификаторФайла
//  КодОбработчика - см. ПоставляемыеДанные.ОбластьОбработана.КодОбработчика
Процедура РаспространитьБанкиПоОД(Знач СписокБанков, Знач ИдентификаторФайла, Знач КодОбработчика) Экспорт
	
	ОбластиДляОбновления  = ПоставляемыеДанные.ОбластиТребующиеОбработки(ИдентификаторФайла, "БанкиРФ");
	
	Для каждого ОбластьДанных Из ОбластиДляОбновления Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		РаботаВМоделиСервиса.ВойтиВОбластьДанных(ОбластьДанных);
		УстановитьПривилегированныйРежим(Ложь);
		
		НачатьТранзакцию();
		Попытка
			//@skip-check query-in-loop
			СинхронизироватьБанкиСКлассификатором(СписокБанков);
			ПоставляемыеДанные.ОбластьОбработана(ИдентификаторФайла, КодОбработчика, ОбластьДанных);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось синхронизировать банки в области данных %1.
											|%2'"), ОбластьДанных, ПодробноеПредставлениеОшибки);
			ИмяСобытия = НСтр("ru = 'БанкиУНФ.РаспространитьБанкиПоОД'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение параметра ДанныеВыбора по введенному текста.
//
// Параметры:
//  ПараметрПоиска		 - Строка - часть наименования банка или БИК.
// 
// Возвращаемое значение:
//  СписокЗначений - значение, которое затем будет передано в ДанныеВыбора
//  обработчика АвтоПодбор.
//
Функция БанкАвтоПодборДанныеВыбора(ПараметрПоиска) Экспорт
	
	Конструктор = Новый СхемаЗапроса;
	Пакет = Конструктор.ПакетЗапросов[0];
	Пакет.ВыбиратьРазрешенные = Истина;
	Оператор0 = Пакет.Операторы[0];
	Оператор0.Источники.Добавить("Справочник.КлассификаторБанков");
	Оператор0.ВыбираемыеПоля.Добавить("Ссылка");
	Оператор0.ВыбираемыеПоля.Добавить("Код");
	Оператор0.ВыбираемыеПоля.Добавить("КоррСчет");
	Оператор0.ВыбираемыеПоля.Добавить("Наименование");
	Оператор0.ВыбираемыеПоля.Добавить("Город");
	Если СтрДлина(ПараметрПоиска) <= 5 Тогда
		Оператор0.КоличествоПолучаемыхЗаписей = СтрДлина(ПараметрПоиска) * 3;
	КонецЕсли;
	Оператор0.Отбор.Добавить("НЕ ЭтоГруппа");
	Оператор0.Отбор.Добавить("ДеятельностьПрекращена = Ложь");
	Оператор1 = Пакет.Операторы.Добавить(Оператор0);
	Оператор2 = Пакет.Операторы.Добавить(Оператор0);
	
	Оператор0.Отбор.Добавить("Код ПОДОБНО &ПараметрПоиска");
	Оператор1.Отбор.Добавить("КоррСчет ПОДОБНО &ПараметрПоиска");
	Оператор2.Отбор.Добавить("Наименование ПОДОБНО &ПараметрПоиска");
	
	Запрос = Новый Запрос(Конструктор.ПолучитьТекстЗапроса());
	
	Запрос.УстановитьПараметр(
	"ПараметрПоиска",
	СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
	"%[ПараметрПоиска]%",
	Новый Структура("ПараметрПоиска", ПараметрПоиска)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		
		Если Результат.НайтиПоЗначению(Выборка.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(
		Выборка.Ссылка,
		ПредставлениеБанка(Выборка));
		
	КонецЦикла;
	
	ДобавитьПредложениеЗагрузкиКлассификатора(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление банка в виде форматированной строки
//
// Параметры:
//  ЗаписьКлассификатора - ВыборкаИзРезультатаЗапроса - запись классификатора банков
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - представление банка
//
Функция ПредставлениеБанка(ЗаписьКлассификатора) Экспорт
	
	Наименование = Новый ФорматированнаяСтрока(ЗаписьКлассификатора.Наименование, Новый Шрифт(, 8, Истина));
	
	Город = Новый ФорматированнаяСтрока(ЗаписьКлассификатора.Город, Новый Шрифт(, 8, , Истина));
	
	БИК = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(%1)",
		ЗаписьКлассификатора.Код), Новый Шрифт(, 8));
	
	Результат = Новый Массив;
	Результат.Добавить(Наименование);
	Результат.Добавить(" ");
	Результат.Добавить(Город);
	Результат.Добавить(" ");
	Результат.Добавить(БИК);
	
	Возврат Новый ФорматированнаяСтрока(Результат); 
	
КонецФункции

// Создает элемент справочника Банки по данным элемента КлассификаторБанков
// 
// Параметры:
//  КлассификаторБанков - СправочникСсылка.КлассификаторБанков - ссылка на элемент справочника классификатор банков, 
//                                                               из которого будет создан элемент справочника Банки
// 
// Возвращаемое значение:
//  СправочникСсылка.Банки - банк из классификатора
Функция БанкИзКлассификатора(КлассификаторБанков) Экспорт
	
	Результат = ПодобратьБанкИзКлассификатора(
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
	КлассификаторБанков));
	
	Для Каждого КлючИЗначение Из ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Результат, "ЭтоГруппа") Цикл
		Если Не КлючИЗначение.Значение.ЭтоГруппа Тогда
			Возврат КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Справочники.Банки.ПустаяСсылка();
	
КонецФункции

// Возвращает ссылку на банк по значению из классификатора.
// Если карточка банка не найдена - возвращается пустая ссылка.
// 
// Параметры:
//  КлассификаторБанков - СправочникСсылка.КлассификаторБанков - ссылка на элемент справочника классификатор банков
// 
// Возвращаемое значение:
//  СправочникСсылка.Банки - ссылка на банк из классификатора
Функция СсылкаНаБанкИзКлассификатора(КлассификаторБанков) Экспорт
	
	ДанныеКлассификатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КлассификаторБанков, "Код, ЭтоГруппа");
	Возврат СсылкаНаБанк(ДанныеКлассификатора.Код, ДанныеКлассификатора.ЭтоГруппа);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьБанкиИзКлассификатора(Знач СписокБанков)
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокБанков", СписокБанков);
		Запрос.Текст = ТекстЗапросаБанки();
		Если ЗначениеЗаполнено(СписокБанков) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСпискуБанков",
				"КлассификаторБанков.Ссылка В(&СписокБанков)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСпискуБанков", "ИСТИНА");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			БлокировкаДанных = Новый БлокировкаДанных();
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.Банки");
			ЭлементБлокировкиДанных.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Ссылка", "Банк");
			БлокировкаДанных.Заблокировать();
			
			ВыборкаБанков = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаБанков.Следующий() Цикл
				
				БанкОбъект = ВыборкаБанков.Банк.ПолучитьОбъект();
				Если ВыборкаБанков.ЭтоГруппа Тогда
					ЗаполнитьЗначенияСвойств(БанкОбъект, ВыборкаБанков, ,
						"Адрес, Город, КоррСчет, Телефоны, Родитель, СВИФТБИК, Страна, ЭтоГруппа");
				Иначе
					ЗаполнитьЗначенияСвойств(БанкОбъект, ВыборкаБанков, , "ЭтоГруппа");
				КонецЕсли;
				
				//@skip-check query-in-loop
				ЗаполнитьРегион(БанкОбъект, ВыборкаБанков);
				БанкОбъект.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать элемент.
										|%1'"), ПодробноеПредставлениеОшибки);
		ИмяСобытия = НСтр("ru = 'БанкиУНФ.Обновление'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Банки, ВыборкаБанков.Банк, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ТекстЗапросаБанки()
	Результат =
	"ВЫБРАТЬ
	|	КлассификаторБанков.Код КАК Код,
	|	КлассификаторБанков.КоррСчет КАК КоррСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КлассификаторБанковРКЦ.Наименование, """") = """"
	|			ТОГДА КлассификаторБанков.Наименование
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанковРКЦ.Наименование, """") + ""//"" + КлассификаторБанков.Наименование
	|	КОНЕЦ КАК Наименование,
	|	КлассификаторБанков.Город КАК Город,
	|	КлассификаторБанков.Адрес КАК Адрес,
	|	КлассификаторБанков.Телефоны КАК Телефоны,
	|	КлассификаторБанков.ЭтоГруппа КАК ЭтоГруппа,
	|	КлассификаторБанков.Родитель.Код КАК РодительКод,
	|	КлассификаторБанков.Родитель.Наименование КАК РодительНаименование,
	|	КлассификаторБанков.ДеятельностьПрекращена КАК ДеятельностьПрекращена,
	|	КлассификаторБанков.СВИФТБИК КАК СВИФТБИК,
	|	КлассификаторБанков.Наименование КАК БанкНаименование,
	|	ЕСТЬNULL(КлассификаторБанковРКЦ.Наименование, """") КАК БИКРКФЦНаименование,
	|	ЕСТЬNULL(КлассификаторБанковРКЦ.Наименование, """") + ""//"" + КлассификаторБанков.Наименование КАК БанкУФКНаименование,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия) КАК Страна
	|ПОМЕСТИТЬ ВТ_ИзмененныеБанки
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковРКЦ
	|		ПО КлассификаторБанков.БИКРКЦ = КлассификаторБанковРКЦ.Ссылка
	|ГДЕ
	|	НЕ КлассификаторБанков.ПометкаУдаления
	|	И НЕ КлассификаторБанков.ДеятельностьПрекращена
	|	И &ОтборПоСпискуБанков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код,
	|	КоррСчет,
	|	ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапросБанки.Банк КАК Банк,
	|	ВложенныйЗапросБанки.Код КАК Код,
	|	ВложенныйЗапросБанки.КоррСчет КАК КоррСчет,
	|	ВложенныйЗапросБанки.Наименование КАК Наименование,
	|	ВложенныйЗапросБанки.Город КАК Город,
	|	ВложенныйЗапросБанки.Адрес КАК Адрес,
	|	ВложенныйЗапросБанки.Телефоны КАК Телефоны,
	|	ВложенныйЗапросБанки.ЭтоГруппа КАК ЭтоГруппа,
	|	ВложенныйЗапросБанки.РодительКод КАК РодительКод,
	|	ВложенныйЗапросБанки.РодительНаименование КАК РодительНаименование,
	|	ВложенныйЗапросБанки.ДеятельностьПрекращена КАК ДеятельностьПрекращена,
	|	ВложенныйЗапросБанки.СВИФТБИК КАК СВИФТБИК,
	|	ВложенныйЗапросБанки.Страна КАК Страна
	|ПОМЕСТИТЬ ВТ_ИзмененныеЭлементы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Банки.Ссылка КАК Банк,
	|		ВТ_ИзмененныеБанки.Код КАК Код,
	|		ВТ_ИзмененныеБанки.КоррСчет КАК КоррСчет,
	|		ВТ_ИзмененныеБанки.Наименование КАК Наименование,
	|		ВТ_ИзмененныеБанки.Город КАК Город,
	|		ВТ_ИзмененныеБанки.Адрес КАК Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны КАК Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа КАК ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод КАК РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование КАК РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена КАК ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК КАК СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна КАК Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И (ВТ_ИзмененныеБанки.БИКРКФЦНаименование = """")
	|			И Банки.Наименование <> ВТ_ИзмененныеБанки.БанкНаименование
	|			И (Банки.РучноеИзменение = 0)
	|	ГДЕ
	|		НЕ Банки.ЭтоГруппа
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Банки.Ссылка,
	|		ВТ_ИзмененныеБанки.Код,
	|		ВТ_ИзмененныеБанки.КоррСчет,
	|		ВТ_ИзмененныеБанки.БанкУФКНаименование,
	|		ВТ_ИзмененныеБанки.Город,
	|		ВТ_ИзмененныеБанки.Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И (ВТ_ИзмененныеБанки.БИКРКФЦНаименование <> """")
	|			И Банки.Наименование <> ВТ_ИзмененныеБанки.БанкУФКНаименование
	|			И (Банки.РучноеИзменение = 0)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Банки.Ссылка,
	|		ВТ_ИзмененныеБанки.Код,
	|		ВТ_ИзмененныеБанки.КоррСчет,
	|		ВТ_ИзмененныеБанки.Наименование,
	|		ВТ_ИзмененныеБанки.Город,
	|		ВТ_ИзмененныеБанки.Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И Банки.Город <> ВТ_ИзмененныеБанки.Город
	|			И (Банки.РучноеИзменение = 0)
	|	ГДЕ
	|		НЕ Банки.ЭтоГруппа
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Банки.Ссылка,
	|		ВТ_ИзмененныеБанки.Код,
	|		ВТ_ИзмененныеБанки.КоррСчет,
	|		ВТ_ИзмененныеБанки.Наименование,
	|		ВТ_ИзмененныеБанки.Город,
	|		ВТ_ИзмененныеБанки.Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И Банки.Адрес <> ВТ_ИзмененныеБанки.Адрес
	|			И (Банки.РучноеИзменение = 0)
	|	ГДЕ
	|		НЕ Банки.ЭтоГруппа
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Банки.Ссылка,
	|		ВТ_ИзмененныеБанки.Код,
	|		ВТ_ИзмененныеБанки.КоррСчет,
	|		ВТ_ИзмененныеБанки.Наименование,
	|		ВТ_ИзмененныеБанки.Город,
	|		ВТ_ИзмененныеБанки.Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И Банки.Телефоны <> ВТ_ИзмененныеБанки.Телефоны
	|			И (Банки.РучноеИзменение = 0)
	|	ГДЕ
	|		НЕ Банки.ЭтоГруппа
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Банки.Ссылка,
	|		ВТ_ИзмененныеБанки.Код,
	|		ВТ_ИзмененныеБанки.КоррСчет,
	|		ВТ_ИзмененныеБанки.Наименование,
	|		ВТ_ИзмененныеБанки.Город,
	|		ВТ_ИзмененныеБанки.Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И Банки.Родитель.Код <> ВТ_ИзмененныеБанки.РодительКод
	|			И (Банки.РучноеИзменение = 0)
	|	ГДЕ
	|		НЕ Банки.ЭтоГруппа
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Банки.Ссылка,
	|		ВТ_ИзмененныеБанки.Код,
	|		ВТ_ИзмененныеБанки.КоррСчет,
	|		ВТ_ИзмененныеБанки.Наименование,
	|		ВТ_ИзмененныеБанки.Город,
	|		ВТ_ИзмененныеБанки.Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И Банки.СВИФТБИК <> ВТ_ИзмененныеБанки.СВИФТБИК
	|			И (Банки.РучноеИзменение = 0)
	|	ГДЕ
	|		НЕ Банки.ЭтоГруппа
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Банки.Ссылка,
	|		ВТ_ИзмененныеБанки.Код,
	|		ВТ_ИзмененныеБанки.КоррСчет,
	|		ВТ_ИзмененныеБанки.Наименование,
	|		ВТ_ИзмененныеБанки.Город,
	|		ВТ_ИзмененныеБанки.Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО (Банки.РучноеИзменение = 0)
	|			И Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И Банки.Страна <> ВТ_ИзмененныеБанки.Страна
	|	ГДЕ
	|		НЕ Банки.ЭтоГруппа
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Банки.Ссылка,
	|		ВТ_ИзмененныеБанки.Код,
	|		ВТ_ИзмененныеБанки.КоррСчет,
	|		ВТ_ИзмененныеБанки.Наименование,
	|		ВТ_ИзмененныеБанки.Город,
	|		ВТ_ИзмененныеБанки.Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И (Банки.РучноеИзменение = 2)
	|	ГДЕ
	|		НЕ Банки.ЭтоГруппа
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Банки.Ссылка,
	|		ВТ_ИзмененныеБанки.Код,
	|		ВТ_ИзмененныеБанки.КоррСчет,
	|		ВТ_ИзмененныеБанки.Наименование,
	|		ВТ_ИзмененныеБанки.Город,
	|		ВТ_ИзмененныеБанки.Адрес,
	|		ВТ_ИзмененныеБанки.Телефоны,
	|		ВТ_ИзмененныеБанки.ЭтоГруппа,
	|		ВТ_ИзмененныеБанки.РодительКод,
	|		ВТ_ИзмененныеБанки.РодительНаименование,
	|		ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|		ВТ_ИзмененныеБанки.СВИФТБИК,
	|		ВТ_ИзмененныеБанки.Страна
	|	ИЗ
	|		Справочник.Банки КАК Банки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|			ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|			И Банки.КоррСчет = ВТ_ИзмененныеБанки.КоррСчет
	|			И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|			И (Банки.РучноеИзменение = 3)
	|	ГДЕ
	|		НЕ Банки.ЭтоГруппа) КАК ВложенныйЗапросБанки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИзмененныеЭлементы.Банк КАК Банк,
	|	ВТ_ИзмененныеЭлементы.Код КАК Код,
	|	ВТ_ИзмененныеЭлементы.КоррСчет КАК КоррСчет,
	|	ВТ_ИзмененныеЭлементы.Наименование КАК Наименование,
	|	ВТ_ИзмененныеЭлементы.Город КАК Город,
	|	ВТ_ИзмененныеЭлементы.Адрес КАК Адрес,
	|	ВТ_ИзмененныеЭлементы.Телефоны КАК Телефоны,
	|	ВТ_ИзмененныеЭлементы.ЭтоГруппа КАК ЭтоГруппа,
	|	0 КАК РучноеИзменение,
	|	ЕСТЬNULL(Банки.Ссылка, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Родитель,
	|	ВТ_ИзмененныеЭлементы.РодительКод КАК РодительКод,
	|	ВТ_ИзмененныеЭлементы.РодительНаименование КАК РодительНаименование,
	|	ВТ_ИзмененныеЭлементы.ДеятельностьПрекращена КАК ДеятельностьПрекращена,
	|	ВТ_ИзмененныеЭлементы.СВИФТБИК КАК СВИФТБИК,
	|	ВТ_ИзмененныеЭлементы.Страна КАК Страна
	|ИЗ
	|	ВТ_ИзмененныеЭлементы КАК ВТ_ИзмененныеЭлементы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО ВТ_ИзмененныеЭлементы.РодительКод = Банки.Код
	|		И (Банки.ЭтоГруппа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Банки.Ссылка,
	|	ВТ_ИзмененныеБанки.Код,
	|	NULL,
	|	ВТ_ИзмененныеБанки.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_ИзмененныеБанки.ЭтоГруппа,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|		ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|		И Банки.Наименование <> ВТ_ИзмененныеБанки.Наименование
	|		И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|		И (Банки.РучноеИзменение = 0)
	|ГДЕ
	|	ВТ_ИзмененныеБанки.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Банки.Ссылка,
	|	ВТ_ИзмененныеБанки.Код,
	|	NULL,
	|	ВТ_ИзмененныеБанки.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_ИзмененныеБанки.ЭтоГруппа,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВТ_ИзмененныеБанки.ДеятельностьПрекращена,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзмененныеБанки КАК ВТ_ИзмененныеБанки
	|		ПО Банки.Код = ВТ_ИзмененныеБанки.Код
	|		И Банки.ЭтоГруппа = ВТ_ИзмененныеБанки.ЭтоГруппа
	|		И (Банки.РучноеИзменение = 2)
	|ГДЕ
	|	ВТ_ИзмененныеБанки.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа УБЫВ";
	Возврат Результат
КонецФункции

Процедура ЗаполнитьРегион(БанкОбъект, ВыборкаБанков)
	
	Если ВыборкаБанков.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаБанков.Родитель) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ВыборкаБанков.РодительКод) Тогда
		Возврат;
	КонецЕсли;
	
	БанкОбъект.Родитель = СсылкаНаБанк(ВыборкаБанков.РодительКод, Истина);
	Если ЗначениеЗаполнено(БанкОбъект.Родитель) Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = Справочники.Банки.СоздатьГруппу();
	Родитель.Код = ВыборкаБанков.РодительКод;
	Родитель.Наименование = ВыборкаБанков.РодительНаименование;
	Родитель.Записать();
	БанкОбъект.Родитель = Родитель.Ссылка;
	
КонецПроцедуры

Процедура УстановитьПризнакРучноеИзменениеПриПотереСвязиСКлассификатором()
	
	// АПК:96 -выкл результат должен содержать уникальные значения
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Банки.Ссылка КАК Банк,
	|	2 КАК РучноеИзменение
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковРФ
	|		ПО Банки.Код = КлассификаторБанковРФ.Код
	|			И (Банки.ЭтоГруппа
	|				ИЛИ Банки.КоррСчет = КлассификаторБанковРФ.КоррСчет)
	|ГДЕ
	|	КлассификаторБанковРФ.Ссылка ЕСТЬ NULL 
	|	И Банки.РучноеИзменение <> 2
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Банки.Ссылка,
	|	3
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковРФ
	|		ПО Банки.Код = КлассификаторБанковРФ.Код
	|			И (Банки.ЭтоГруппа
	|				ИЛИ Банки.КоррСчет = КлассификаторБанковРФ.КоррСчет)
	|ГДЕ
	|	КлассификаторБанковРФ.ДеятельностьПрекращена
	|	И Банки.РучноеИзменение < 2";
	
	// АПК:96 -вкл
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.Банки");
		ЭлементБлокировкиДанных.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Ссылка", "Банк");
		БлокировкаДанных.Заблокировать();
		
		ВыборкаБанков = РезультатЗапроса.Выбрать();
		Пока ВыборкаБанков.Следующий() Цикл
			Банк = ВыборкаБанков.Банк.ПолучитьОбъект();
			Банк.РучноеИзменение = ВыборкаБанков.РучноеИзменение;
			Банк.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать элемент.
										|%1'"), ПодробноеПредставлениеОшибки);
		ИмяСобытия = НСтр("ru = 'БанкиУНФ.УстановитьПризнакРучноеИзменениеПриПотереСвязиСКлассификатором'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Банки, ВыборкаБанков.Банк, ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

// Задает текст состояние разделенного объекта, устанавливает доступность
// кнопок управления состоянием и флага ТолькоПросмотр формы
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ОбработатьФлагРучногоИзменения(Знач Форма)
	
	Элементы  = Форма.Элементы;
	
	Если Форма.РучноеИзменение = Неопределено Тогда
		Если Форма.ДеятельностьПрекращена Тогда
			Форма.ТекстРучногоИзменения = "";
		Иначе
			Форма.ТекстРучногоИзменения = НСтр("ru = 'Элемент создан вручную. Автоматическое обновление не возможно.'");
		КонецЕсли;
		
		Элементы.ОбновитьИзКлассификатора.Доступность = Ложь;
		Элементы.Изменить.Доступность = Ложь;
		Форма.ТолькоПросмотр          = Ложь;
		Элементы.Родитель.Доступность = Истина;
		Элементы.Код.Доступность      = Истина;
		Если НЕ Форма.Объект.ЭтоГруппа Тогда
			Элементы.КоррСчет.Доступность = Истина;
		КонецЕсли;
	ИначеЕсли Форма.РучноеИзменение = Истина Тогда
		Форма.ТекстРучногоИзменения = НСтр("ru = 'Автоматическое обновление элемента отключено.'");
		
		Элементы.ОбновитьИзКлассификатора.Доступность = Истина;
		Элементы.Изменить.Доступность = Ложь;
		Форма.ТолькоПросмотр          = Ложь;
		Элементы.Родитель.Доступность = Ложь;
		Элементы.Код.Доступность      = Ложь;
		Если НЕ Форма.Объект.ЭтоГруппа Тогда
			Элементы.КоррСчет.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Форма.ТекстРучногоИзменения = НСтр("ru = 'Элемент обновляется автоматически.'");
		
		Элементы.ОбновитьИзКлассификатора.Доступность = Ложь;
		Элементы.Изменить.Доступность = Истина;
		Форма.ТолькоПросмотр          = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в список ДанныеВыбора предложение загрузить классификатор банков
// в случае его неактуальности и при наличии полномочий.
// При актуальном классификаторе список ДанныеВыбора не изменяется.
//
// Параметры:
//  ДанныеВыбора - СписокЗначений - список значений с данными выбора.
//
Процедура ДобавитьПредложениеЗагрузкиКлассификатора(ДанныеВыбора)
	
	// В модели сервиса классификатор обновляется автоматически.
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// В узле РИБ обновляется автоматически.
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	// Пользователь с необходимыми правами.
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.КлассификаторБанков) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора.Добавить("ЗагрузитьКлассификатор", НСтр("ru = 'Загрузить классификатор банков...'"), ,
		БиблиотекаКартинок.Банк);
	
КонецПроцедуры

// Функция для изменения и запись справочника Банки по переданным параметрам
// если такого банка еще нет, то он создается
// если банк находится в иерархии не на первом уровне, то создается/копируется вся цепочка родителей
//
// Параметры:
//   Ссылки - Массив из Структура - Ключ - имя реквизита справочника, Значение - значение данного реквизита
//   ИгнорироватьРучноеИзменение - Булево - обрабатывать банки, измененные вручную
//   
// Возвращаемое значение:
//   Массив из СправочникСсылка.Банки
//
//@skip-check module-unused-method
Функция СоздатьОбновитьБанкиВИБ(Ссылки, ИгнорироватьРучноеИзменение)
	
	МассивБанков = Новый Массив;
	
	Для Индекс = 0 По Ссылки.ВГраница() Цикл
		ПараметрыОбъект = Ссылки[Индекс];
		Банк = ПараметрыОбъект.Банк;
		
		Если ПараметрыОбъект.РучноеИзменение = 1
			И НЕ ИгнорироватьРучноеИзменение Тогда
			МассивБанков.Добавить(Банк);
			Продолжить;
		КонецЕсли;
		
		Если Банк.Пустая() Тогда
			Если ПараметрыОбъект.ЭтоРегион Тогда
				БанкОбъект = Справочники.Банки.СоздатьГруппу();
			Иначе
				БанкОбъект = Справочники.Банки.СоздатьЭлемент();
			КонецЕсли;
		Иначе
			БанкОбъект = Банк.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не БанкОбъект.ЭтоГруппа Тогда
			ПараметрыОбъект.Вставить("Страна", Справочники.СтраныМира.Россия);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(БанкОбъект, ПараметрыОбъект);
		Если НЕ ПустаяСтрока(ПараметрыОбъект.РодительКод) И НЕ ЗначениеЗаполнено(ПараметрыОбъект.Родитель) Тогда
			//@skip-check query-in-loop
			Регион = СсылкаНаБанк(ПараметрыОбъект.РодительКод, Истина);
			
			Если НЕ ЗначениеЗаполнено(Регион) Тогда
				ПараметрыБанковВышеПоИерархии = Новый Массив;
				//@skip-check query-in-loop
				ПараметрыБанковВышеПоИерархии.Добавить(СсылкаПоКлассификатору(ПараметрыОбъект.РодительКод));
				
				// Если переданный Родитель не является корневым элементом,
				// то будет возвращен массив всех элементов (групп) выше по иерархии.
				// В начале массива будет корневой элемент иерархии, в конце массива - элемента переданный в параметрах 
				//@skip-check query-in-loop
				МассивБанковВышеПоИерархии = ПодобратьБанкИзКлассификатора(ПараметрыБанковВышеПоИерархии);
				
				Если МассивБанковВышеПоИерархии.Количество() > 0 Тогда
					// Переданный в параметре элемент (к созданию) в возвращенном Массиве будет всегда на последней позиции
					ПоследнийЭлемент = МассивБанковВышеПоИерархии.ВГраница();
					Регион = МассивБанковВышеПоИерархии[ПоследнийЭлемент];
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Регион) И Регион.ЭтоГруппа Тогда
				БанкОбъект.Родитель = Регион;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(БанкОбъект.Родитель) Тогда
				ИмяСобытия = НСтр("ru = 'БанкиУНФ.СоздатьОбновитьБанкиВИБ'", ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не смогли получить родителя у элемента с БИК %1'"), СокрЛП(ПараметрыОбъект.Код));
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.Банки");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", БанкОбъект.Ссылка);
			БлокировкаДанных.Заблокировать();
			БанкОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытия = НСтр("ru = 'БанкиУНФ.СоздатьОбновитьБанкиВИБ'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки);
			Прервать;
		КонецПопытки;
		
		МассивБанков.Добавить(БанкОбъект.Ссылка);
	КонецЦикла;
	
	Возврат МассивБанков;
	
КонецФункции

// Получение ссылки на элемент справочника Классификатор банков РФ  по текстовому представлению БИК или КоррСчет
// 
// Параметры:
//  БИК - Строка
//  КоррСчет - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторБанков
Функция СсылкаПоКлассификатору(БИК, КоррСчет = "")
	
	Если Не ЗначениеЗаполнено(БИК) Тогда
		Возврат Справочники.КлассификаторБанков.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КлассификаторБанковРФ.Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанковРФ
	|ГДЕ
	|	КлассификаторБанковРФ.Код = &БИК
	|	И КлассификаторБанковРФ.КоррСчет = &КоррСчет";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Если Не ЗначениеЗаполнено(КоррСчет) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И КлассификаторБанковРФ.КоррСчет = &КоррСчет", "");
	Иначе
		Запрос.УстановитьПараметр("КоррСчет", КоррСчет);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.КлассификаторБанков.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции 

// Получение ссылки на элемент справочника Банки по текстовому представлению БИК или КоррСчет
// 
// Параметры:
//  БИК - Строка
//  ЭтоРегион - Булево
// 
// Возвращаемое значение:
//  СправочникСсылка.Банки
Функция СсылкаНаБанк(БИК, ЭтоРегион = Ложь)
	
	Если Не ЗначениеЗаполнено(БИК) Тогда
		Возврат Справочники.Банки.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Банки.Ссылка
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	Банки.Код = &БИК
	|	И Банки.ЭтоГруппа = &ЭтоГруппа";
	
	Запрос.УстановитьПараметр("БИК",       БИК);
	Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоРегион);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Банки.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ДополнитьМассивРодителямиСсылок(Знач Ссылки)
	
	МассивСсылок = Новый Массив;
	Для каждого Ссылка Из Ссылки Цикл
		МассивСсылок.Добавить(Ссылка);
	КонецЦикла;
	
	ТекущиеСсылки = Ссылки;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Родитель КАК Ссылка
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&Ссылки)
	|	И Таблица.Родитель <> &ЗначениеПустаяСсылка";
	
	ИмяТаблицы = Ссылки[0].Метаданные().ПолноеИмя();
	ЗначениеПустаяСсылка = СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", ИмяТаблицы); 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗначениеПустаяСсылка", ЗначениеПустаяСсылка);
	
	Пока Истина Цикл
		Запрос.УстановитьПараметр("Ссылки", ТекущиеСсылки);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		ТекущиеСсылки = Новый Массив;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущиеСсылки.Добавить(Выборка.Ссылка);
			МассивСсылок.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

Процедура УдалитьЛишниеСвойства(ОписаниеОбъекта)
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого КлючИЗначение Из ОписаниеОбъекта Цикл
		Если КлючИЗначение.Значение = Null ИЛИ КлючИЗначение.Ключ = "ЭтоГруппа" Тогда
			УдаляемыеЭлементы.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		ОписаниеОбъекта.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
