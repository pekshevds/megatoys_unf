///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает признак наличия ошибок отправки подтверждений НСПК.
//
// Возвращаемое значение:
//  Булево - признак наличия ошибок отправки подтверждений НСПК.
//
Функция ЕстьОшибкиОтправкиПодтвержденийНСПК() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОшибкиПодтвержденияНСПК.ОснованиеФискальнойОперации КАК ОснованиеФискальнойОперации
		|ИЗ
		|	РегистрСведений.ОшибкиПодтвержденияНСПК КАК ОшибкиПодтвержденияНСПК";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = НЕ Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление ошибки операции НСПК.
//
// Параметры:
//  ОснованиеФискальнойОперации - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО.
//
// Возвращаемое значение:
//  Строка - содержит представление ошибки НСПК.
//
Функция ПолучитьПредставлениеОшибкиНСПК(ОснованиеФискальнойОперации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОшибкиПодтвержденияНСПК.ОснованиеФискальнойОперации КАК ОснованиеФискальнойОперации,
		|	ОшибкиПодтвержденияНСПК.КодРезультата КАК КодРезультата,
		|	ОшибкиПодтвержденияНСПК.ОписаниеОшибки КАК ОписаниеОшибки
		|ИЗ
		|	РегистрСведений.ОшибкиПодтвержденияНСПК КАК ОшибкиПодтвержденияНСПК
		|ГДЕ
		|	ОшибкиПодтвержденияНСПК.ОснованиеФискальнойОперации = &ОснованиеФискальнойОперации";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОснованиеФискальнойОперации", ОснованиеФискальнойОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = СтрШаблон(НСтр("ru='%1
									|Код результата: %2
									|Описание ошибки: %3'"),
							Строка(ОснованиеФискальнойОперации),
							Строка(Выборка.КодРезультата),
							Строка(Выборка.ОписаниеОшибки));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела: используйте клиентскую версию компоненты.
// Возвращает версию ВК взаимодействия с НСПК
//
// Возвращаемое значение:
//  Строка - Версия ВК.
//
Функция ВерсияВК() Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК();
	Версия = ВнешняяКомпонента.Версия();
	
	Возврат Версия;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Тестовое подключение к НСПК
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ТестовоеПодключение(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы = ПараметрыОперации.ИдентификаторКассы;
	ТестовоеСообщение = НСтр("ru = 'Тест 1С'");
	
	ТекстРезультата = ВнешняяКомпонента.эхо(ИдентификаторЗапроса, ИдентификаторКассы, ТестовоеСообщение);
	
	СписокОшибок = ВнешняяКомпонента.СписокОшибок;
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ПрочитатьJSONРезультатОперации(ТекстРезультата, СписокОшибок);   
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Предварительное одобрение использования сертификатов
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ПредварительноеОдобрениеИспользования(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса  = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы    = ПараметрыОперации.ИдентификаторКассы;
	ХешНомерКарты         = ПараметрыОперации.ХешНомерКарты;       
	СсылкаНаПлатежныйСчет = ПараметрыОперации.СсылкаНаПлатежныйСчет; 
	ТоварныеПозицииJSON = ЭлектронныеСертификатыНСПКВызовСервера.ПолучитьJSONТоварныеПозиции(ПараметрыОперации.ТоварныеПозиции); 
	
	ТекстРезультата = ВнешняяКомпонента.ЗапросНаПредварительноеОдобрениеИспользования(
		ИдентификаторЗапроса, // Строка 
		ИдентификаторКассы, // Строка 
		ХешНомерКарты, // Строка 
		СсылкаНаПлатежныйСчет, // Строка 
		ТоварныеПозицииJSON); // Строка
	
	Параметры = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперацииНаСервере();
	Параметры.ТекстРезультата      = ТекстРезультата;
	Параметры.СписокОшибок         = ВнешняяКомпонента.СписокОшибок;
	Параметры.ПараметрыОперации    = ПараметрыОперации;
	Параметры.ТипПлатежнойОперации = ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПредварительноеОдобрениеИспользованияЭС();
	
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ОбработатьРезультатВыполненияНаСервере(Параметры);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Предварительное одобрение возврата сертификатов
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ПредварительноеОдобрениеВозврата(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса  = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы    = ПараметрыОперации.ИдентификаторКассы;
	ХешНомерКарты         = ПараметрыОперации.ХешНомерКарты;    
	СсылкаНаПлатежныйСчет = ПараметрыОперации.СсылкаНаПлатежныйСчет; 
	ИдентификаторКорзины  = ПараметрыОперации.ИдентификаторКорзины;
	ТоварныеПозицииJSON = ЭлектронныеСертификатыНСПКВызовСервера.ПолучитьJSONТоварныеПозиции(ПараметрыОперации.ТоварныеПозиции);
	
	ТекстРезультата = ВнешняяКомпонента.ЗапросНаПредварительноеОдобрениеВозврата(
		ИдентификаторЗапроса, // Строка
		ИдентификаторКассы, // Строка 
		ИдентификаторКорзины, // Строка 
		ХешНомерКарты, // Строка 
		СсылкаНаПлатежныйСчет, // Строка
		ТоварныеПозицииJSON); // Строка
	
	Параметры = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперацииНаСервере();
	Параметры.ТекстРезультата      = ТекстРезультата;
	Параметры.СписокОшибок         = ВнешняяКомпонента.СписокОшибок;
	Параметры.ПараметрыОперации    = ПараметрыОперации;
	Параметры.ТипПлатежнойОперации = ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПредварительноеОдобрениеВозвратаЭС();
	
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ОбработатьРезультатВыполненияНаСервере(Параметры);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Получение идентификатора корзины
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ИдентификаторКорзины - Число.
//
Функция ПолучениеИдентификатораКорзины(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
	
	НомерФискальногоНакопителя = ПараметрыОперации.НомерФискальногоНакопителя;
	ФискальныйПризнакЧека      = ПараметрыОперации.ФискальныйПризнакЧека;
	ФискальныйЧекНомер         = ПараметрыОперации.ФискальныйЧекНомер;   

	Если НЕ ПустаяСтрока(ПараметрыОперации.QRКодЧекаККТ) Тогда
		ДанныеШтрихкода = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасшифроватьQRКодЧекаККТ(ПараметрыОперации.QRКодЧекаККТ);
		Если ДанныеШтрихкода.Расшифрован Тогда
			НомерФискальногоНакопителя = ДанныеШтрихкода.НомерФискальногоНакопителя;
			ФискальныйПризнакЧека      = ДанныеШтрихкода.ФискальныйПризнак;
			ФискальныйЧекНомер         = ДанныеШтрихкода.НомерФискальногоДокумента;   
		КонецЕсли;   
	КонецЕсли;
	
	ТекстРезультата = ВнешняяКомпонента.ЗапросНаПолучениеИдентификатораКорзиныОперацииПокупки(
		ИдентификаторЗапроса, // Строка
		ИдентификаторКассы, // Строка 
		НомерФискальногоНакопителя, // Строка 
		ФискальныйЧекНомер, // Строка 
		ФискальныйПризнакЧека); // Строка
	
	Параметры = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперацииНаСервере();
	Параметры.ТекстРезультата      = ТекстРезультата;
	Параметры.СписокОшибок         = ВнешняяКомпонента.СписокОшибок;
	Параметры.ПараметрыОперации    = ПараметрыОперации;
	Параметры.ТипПлатежнойОперации = ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПолучениеИдентификатораОперации();
	
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ОбработатьРезультатВыполненияНаСервере(Параметры);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Передача данных фискального чека
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ПередачаДанныхФискальногоЧека(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
	ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;
	
	НомерФискальногоНакопителя = Строка(ПараметрыОперации.НомерФискальногоНакопителя);
	ФискальныйТипРасчета = Число(ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодРасчетаДенежнымиСредствами(ПараметрыОперации.ФискальныйТипРасчета));
	ФискальныйПризнакЧека = Строка(ПараметрыОперации.ФискальныйПризнакЧека);
	
	ФискальныйЧекНомер = Формат(Число(ПараметрыОперации.ФискальныйЧекНомер), "ЧГ=0");     
	ФискальныйЧекСумма = Формат(ПараметрыОперации.ФискальныйЧекСумма, "ЧГ=0;ЧДЦ=2;ЧРД=.");
	ФискальныйМестоРасчетов = Строка(ПараметрыОперации.ФискальныйМестоРасчетов); 
	// АПК: 1367-выкл особенность локального законодательства
	ФискальныйЧекДатаВремя = Формат(ПараметрыОперации.ФискальныйЧекДатаВремя, "ДФ=""ггггММддЧЧмм""");
	// АПК: 1367
	ОснованиеФискальнойОперации = ПараметрыОперации.ОснованиеФискальнойОперации;
	
	ТекстРезультата = ВнешняяКомпонента.ПередачаДанныхФискальногоЧека(
		ИдентификаторЗапроса, // Строка
		ИдентификаторКассы, // Строка
		ИдентификаторКорзины, // Строка 
		НомерФискальногоНакопителя, // Строка
		ФискальныйЧекНомер, // Строка
		ФискальныйПризнакЧека, // Строка
		ФискальныйЧекСумма,  // Строка
		ФискальныйЧекДатаВремя, // Строка
		ФискальныйТипРасчета, // Число
		ФискальныйМестоРасчетов); // Строка
		
	Параметры = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперацииНаСервере();
	Параметры.ТекстРезультата      = ТекстРезультата;
	Параметры.СписокОшибок         = ВнешняяКомпонента.СписокОшибок;
	Параметры.ПараметрыОперации    = ПараметрыОперации;
	Параметры.ТипПлатежнойОперации = ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПередачаДанныхФискальногоЧека();
	Параметры.ОснованиеФискальнойОперации = ОснованиеФискальнойОперации;
	
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ОбработатьРезультатВыполненияНаСервере(Параметры);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Получение состава корзины
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//  *ТоварныеПозиции - Массив.
//  *ИдентификаторКорзины - Число.
//  *СуммаСертификатами - Число.
//
Функция ПолучениеСоставаКорзины(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
	ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;
	
	ТекстРезультата = ВнешняяКомпонента.ЗапросНаПолучениеСоставаКорзиныОригинальнойПокупки(
		ИдентификаторЗапроса, // Строка
		ИдентификаторКассы, // Строка
		ИдентификаторКорзины); // Строка
	
	Параметры = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперацииНаСервере();
	Параметры.ТекстРезультата      = ТекстРезультата;
	Параметры.СписокОшибок         = ВнешняяКомпонента.СписокОшибок;
	Параметры.ПараметрыОперации    = ПараметрыОперации;
	Параметры.ТипПлатежнойОперации = ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПолучениеСоставаКорзины();
	
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ОбработатьРезультатВыполненияНаСервере(Параметры);

	Возврат РезультатВыполнения;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Получение списка сертификатов
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//
Функция ПолучениеСпискаСертификатов(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса  = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы    = ПараметрыОперации.ИдентификаторКассы;
	ХешНомерКарты         = ПараметрыОперации.ХешНомерКарты;    
	СсылкаНаПлатежныйСчет = ПараметрыОперации.СсылкаНаПлатежныйСчет; 
	
	ТекстРезультата = ВнешняяКомпонента.ЗапросНаПолучениеСпискаСертификатов(
		ИдентификаторЗапроса, // Строка
		ИдентификаторКассы, // Строка
		ХешНомерКарты, // Строка
		СсылкаНаПлатежныйСчет); // Строка 
		
	Параметры = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперацииНаСервере();
	Параметры.ТекстРезультата      = ТекстРезультата;
	Параметры.СписокОшибок         = ВнешняяКомпонента.СписокОшибок;
	Параметры.ПараметрыОперации    = ПараметрыОперации;
	Параметры.ТипПлатежнойОперации = ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПолучениеСпискаСертификатов();
	
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ОбработатьРезультатВыполненияНаСервере(Параметры);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Получение списка идентификаторов корзин покупок ТСП
//
// Параметры: 
//   ПараметрыОперации - см.ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
//
// Возвращаемое значение:
//  Структура:
//  *Результат - Булево.
//  *КодРезультата - Число.
//  *ОписаниеОшибки - Строка.
//
Функция ПолучениеСпискаИдентификаторовКорзинПокупокТСП(ПараметрыОперации) Экспорт
	
	ВнешняяКомпонента = ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации);
	
	ИдентификаторЗапроса  = ПараметрыОперации.ИдентификаторЗапроса;
	ИдентификаторКассы    = ПараметрыОперации.ИдентификаторКассы;
	ХешНомерКарты         = ПараметрыОперации.ХешНомерКарты;    
	СсылкаНаПлатежныйСчет = ПараметрыОперации.СсылкаНаПлатежныйСчет;  
	КодТовараТРУ          = ПараметрыОперации.КодТовараТРУ;
	
	ТекстРезультата = ВнешняяКомпонента.ЗапросНаПолучениеСпискаИдентификаторовКорзинПокупокТСП(
		ИдентификаторЗапроса, // Строка
		ИдентификаторКассы, // Строка   
		КодТовараТРУ, // Строка
		ХешНомерКарты, // Строка
		СсылкаНаПлатежныйСчет); // Строка 
		
	Параметры = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперацииНаСервере();
	Параметры.ТекстРезультата      = ТекстРезультата;
	Параметры.СписокОшибок         = ВнешняяКомпонента.СписокОшибок;
	Параметры.ПараметрыОперации    = ПараметрыОперации;
	Параметры.ТипПлатежнойОперации = ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПолучениеСпискаИдентификаторовКорзинПокупокТСП();
	
	РезультатВыполнения = ЭлектронныеСертификатыНСПКВызовСервера.ОбработатьРезультатВыполненияНаСервере(Параметры);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Выполняет подключение внешней компоненты.
//
// Возвращаемое значение: 
//   ОбъектВнешнейКомпоненты
//   Неопределено - если компоненту не удалось загрузить.
//
Функция ПодключитьКомпонентуИнтеграцииНСПК() Экспорт
	
#Если НЕ МобильноеПриложениеСервер Тогда  
	УстановитьОтключениеБезопасногоРежима(Истина);
#КонецЕсли
	ВнешняяКомпонента = Неопределено;
	
#Если НЕ МобильноеПриложениеСервер Тогда
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеКомпоненты") Тогда
			МодульВнешниеКомпонентыСервер = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСервер");
			РезультатПодключения = МодульВнешниеКомпонентыСервер.ПодключитьКомпоненту("FECNSPK");
			Если РезультатПодключения.Подключено Тогда
				ВнешняяКомпонента = РезультатПодключения.ПодключаемыйМодуль;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
#КонецЕсли
	
	Если ВнешняяКомпонента = Неопределено Тогда 
		ВнешняяКомпонента = ОбщегоНазначения.ПодключитьКомпонентуИзМакета("FECNSPK", "ОбщийМакет.КомпонентаИнтеграцииНСПК");
	КонецЕсли;
	
	Если ВнешняяКомпонента = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВнешняяКомпонента;
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Пустая структура для выполнения операции взаимодействия с сервером НСПК
// 
// Возвращаемое значение:
//   Структура:
//   * АдресСервера - Строка - Endpoint
//   * КлючДоступа - Строка - APIKey
//   * КлючКассы - Строка - MACKey
//
Функция ПараметрыОперацииНСПК() Экспорт
	
	Возврат ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК();
	 
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Пустая структура для параметров товарной позиции
// 
// Возвращаемое значение:
//   Структура:
//   * НомерПозиции - Строка - Порядковый номер позиции в корзине начиная с 1
//   * Артикул - Строка - Артикул товара
//   * КодТовараТРУ - Строка - Полный код товара, согласованный с перечнем ТРУ
//   * Количество - Число - Количество единиц товара
//   * Цена - Число - Цена за единицу товара в рублях
//   * Сертификаты - Массив из см.ЭлектронныеСертификатыНСПК.ПараметрыСертификата
//
Функция ПараметрыТоварнойПозиции() Экспорт
	
	Возврат ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыТоварнойПозиции();
	
КонецФункции

// Устарела: используйте клиентскую версию компоненты.
// Пустая структура параметров сертификата
// 
// Возвращаемое значение:
//   Структура:
//   * Идентификатор - Строка - Идентификатор сертификата
//   * Количество - Число - Количество
//   * Цена - Число - Цена 
//   * МаксимальнаяЦена - Число - Максимальная цена
//
Функция ПараметрыСертификата() Экспорт
	
	Возврат ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыСертификата();
	
КонецФункции

#КонецОбласти

#КонецОбласти                   

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет обработку результата отправки подтверждения.
//
Процедура ОбработатьРезультатОтправкиПодтверждения(ОснованиеФискальнойОперации, РезультатВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ОшибкиПодтвержденияНСПК.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОснованиеФискальнойОперации = ОснованиеФискальнойОперации;
	Если РезультатВыполнения.Результат Тогда
		МенеджерЗаписи.Удалить();
	Иначе
		МенеджерЗаписи.КодРезультата = РезультатВыполнения.КодРезультата;
		МенеджерЗаписи.ОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

// Выполняет подготовка внешней компоненты.
//
// Возвращаемое значение: 
//   ОбъектВнешнейКомпоненты
//   Неопределено - если компоненту не удалось загрузить.
//
Функция ПодготовитьКомпонентуИнтеграцииНСПК(ПараметрыОперации = Неопределено)
	
	ВнешняяКомпонента = ПодключитьКомпонентуИнтеграцииНСПК();
	Если ВнешняяКомпонента = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подключения внешней компоненты НСПК.'");
		МенеджерОборудования.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка компоненты НСПК'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ПараметрыОперации <> Неопределено Тогда
		
		Если ПараметрыОперации.Свойство("АдресСервера") Тогда
			АдресСервера = ПараметрыОперации.АдресСервера;
			Если Прав(АдресСервера, 1)="/" Или Прав(АдресСервера, 1)="\" Тогда
				АдресСервера = Лев(АдресСервера, СтрДлина(АдресСервера)-1);
			КонецЕсли;
			ВнешняяКомпонента.АдресСервера = СокрЛП(АдресСервера);
		КонецЕсли;
	
		Если ПараметрыОперации.Свойство("КлючДоступа") Тогда
			ВнешняяКомпонента.КлючДоступа = СокрЛП(ПараметрыОперации.КлючДоступа);
		КонецЕсли;
	
		Если ПараметрыОперации.Свойство("КлючКассы") Тогда
			ВнешняяКомпонента.КлючКассы = СокрЛП(ПараметрыОперации.КлючКассы);
		КонецЕсли;
		
		Если ПараметрыОперации.Свойство("ПроверятьКорневыеСертификаты") Тогда
			ВнешняяКомпонента.ПроверятьКорневыеСертификаты = ПараметрыОперации.ПроверятьКорневыеСертификаты;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВнешняяКомпонента;
	
КонецФункции  

#КонецОбласти
