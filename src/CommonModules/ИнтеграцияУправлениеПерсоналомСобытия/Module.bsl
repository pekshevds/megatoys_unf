
#Область СлужебныйПрограммныйИнтерфейс

// Обработка записи набора записей РС СтандартныеВычетыНаДетейНДФЛ.
//
Процедура ЗарегистрироватьОбновлениеВычетов(СписокФизическихЛиц) Экспорт
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ИзмененияДляОбмена
	|		ПО ВыгружаемыеОбъекты.Ссылка = ИзмененияДляОбмена.Ссылка
	|			И (ИзмененияДляОбмена.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ПрименяемыеВычетыНДФЛ))
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка В(&СписокФизическихЛиц)
	|	И ИзмененияДляОбмена.ВыгружатьУдаление ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Изменения = Новый ТаблицаЗначений;
		Изменения.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаИзменениеКабинетСотрудника.Тип));
		Изменения.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом"));
		Изменения.Колонки.Добавить("ВерсияДанных", 	Новый ОписаниеТипов("Строка"));
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Изменения.Добавить();
			НоваяСтрока.Ссылка 			= Выборка.Ссылка;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ПрименяемыеВычетыНДФЛ;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		
		ЗарегистрироватьИзмененияОбъектов(Неопределено, Неопределено, Неопределено, Неопределено, Изменения); 
		
	КонецЕсли;

КонецПроцедуры

// Обработка записи УстановитьПодключенККЭДОДляФизическогоЛица.
//
Процедура ЗарегистрироватьОбновлениеДоступныхФункцийФизическогоЛица(СписокФизическихЛиц) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника()
		Или Не ЗначениеЗаполнено(СписокФизическихЛиц) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ИзмененияДляОбмена
	|		ПО ВыгружаемыеОбъекты.Ссылка = ИзмененияДляОбмена.Ссылка
	|			И (ИзмененияДляОбмена.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДоступныеФункцииФизическогоЛица))
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка В(&СписокФизическихЛиц)
	|	И ИзмененияДляОбмена.ВыгружатьУдаление ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Изменения = Новый ТаблицаЗначений;
		Изменения.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаИзменениеКабинетСотрудника.Тип));
		Изменения.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом"));
		Изменения.Колонки.Добавить("ВерсияДанных", 	Новый ОписаниеТипов("Строка"));
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Изменения.Добавить();
			НоваяСтрока.Ссылка 			= Выборка.Ссылка;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДоступныеФункцииФизическогоЛица;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		
		ЗарегистрироватьИзмененияОбъектов(Неопределено, Неопределено, Неопределено, Неопределено, Изменения);
		
	КонецЕсли;

КонецПроцедуры

// Обработка записи набора записей РС ТекущиеКадровыеДанныеСотрудников.
//
Процедура ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналомСобытияВнутренний.ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей);

КонецПроцедуры

// Обработка записи набора записей РС ТекущиеКадровыеДанныеСотрудников.
//
Процедура ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналомСобытияВнутренний.ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей);

КонецПроцедуры

// Обработка записи набора записей РС ФизическиеЛицаПрисоединенныеККЭДО.
//
Процедура ФизическиеЛицаПрисоединенныеККЭДОПередЗаписью(НаборЗаписей) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО")
		Или Не КабинетСотрудника.ИспользоватьФормат503() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", НаборЗаписей.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаПрисоединенныеККЭДО КАК Таблица
	|ГДЕ
	|	Таблица.ФизическоеЛицо В(&ФизическиеЛица)";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	НаборЗаписей.ДополнительныеСвойства.Вставить("ФизическиеЛицаОбновленияИспользованияКЭДО", СписокФизическихЛиц);

КонецПроцедуры

// Обработка записи набора записей РС ФизическиеЛицаПрисоединенныеККЭДО.
//
Процедура ФизическиеЛицаПрисоединенныеККЭДОПриЗаписи(НаборЗаписей) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО")
		Или Не КабинетСотрудника.ИспользоватьФормат503() Тогда
		Возврат;
	КонецЕсли;
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	СписокФизическихЛиц = НаборЗаписей.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	СписокФизическихЛицПередЗаписью = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ФизическиеЛицаОбновленияИспользованияКЭДО", СписокФизическихЛицПередЗаписью);
	Если СписокФизическихЛицПередЗаписью <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФизическихЛиц, СписокФизическихЛицПередЗаписью, Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыгружаемыеФизическиеЛица = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаютсяВПриложение(СписокФизическихЛиц, Приложение);
	Если Не ЗначениеЗаполнено(ВыгружаемыеФизическиеЛица) Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаИзменениеКабинетСотрудника.Тип));
	Изменения.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУпралениеПерсоналом"));
	Изменения.Колонки.Добавить("ВерсияДанных", 	Новый ОписаниеТипов("Строка"));
	
	Для каждого ФизическоеЛицо Из ВыгружаемыеФизическиеЛица Цикл
		НоваяСтрока = Изменения.Добавить();
		НоваяСтрока.Ссылка 			= ФизическоеЛицо;
		НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДоступныеФункцииФизическогоЛица;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	ЗарегистрироватьИзмененияОбъектов(Неопределено, Неопределено, Неопределено, Неопределено, Изменения);
	
КонецПроцедуры

// Обработка события ОбработкаДокументовПечатныхФорм()
Процедура ВыполнитьРегистрациюКПередачеФайловДокументовКЭДО() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналомСлужебный.ЗарегистрироватьДокументыНаПодпись();
	
КонецПроцедуры

// Обработка записи набора записей РН ИмущественныеВычетыНДФЛ.
//
Процедура ИмущественныеВычетыНДФЛПередЗаписью(НаборЗаписей) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ИмущественныеВычетыНДФЛ.Регистратор = &Регистратор";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	НаборЗаписей.ДополнительныеСвойства.Вставить("ФизическиеЛицаОбновленияПубликацииВычетов", СписокФизическихЛиц);

КонецПроцедуры

// Обработка записи набора записей РН ИмущественныеВычетыНДФЛ.
//
Процедура ИмущественныеВычетыНДФЛПриЗаписи(НаборЗаписей) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизическихЛиц = НаборЗаписей.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	СписокФизическихЛицПередЗаписью = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ФизическиеЛицаОбновленияПубликацииВычетов", СписокФизическихЛицПередЗаписью);
	Если СписокФизическихЛицПередЗаписью <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФизическихЛиц, СписокФизическихЛицПередЗаписью ,Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ПрименяемыеВычетыНДФЛ) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ИзмененияДляОбмена
	|		ПО ФизическиеЛица.Ссылка = ИзмененияДляОбмена.Ссылка
	|			И (ИзмененияДляОбмена.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ПрименяемыеВычетыНДФЛ))
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)
	|	И ИзмененияДляОбмена.ВерсияДанных ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ФизическоеЛицо");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка 		= Выборка.ФизическоеЛицо;
				МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
				МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

// Обработка записи набора записей РС ПлановыеУдержания.
//
Процедура ПлановыеУдержанияПередЗаписью(НаборЗаписей) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналомСобытияВнутренний.ПлановыеУдержанияПередЗаписью(НаборЗаписей);

КонецПроцедуры

// Обработка записи набора записей РС ПлановыеУдержания.
//
Процедура ПлановыеУдержанияПриЗаписи(НаборЗаписей) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналомСобытияВнутренний.ПлановыеУдержанияПриЗаписи(НаборЗаписей);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбъектПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКонтролируемыхРеквизитов = ИменаКонтролируемыхРеквизитов(Источник);
	Если Источник.ЭтоНовый() Тогда
		ПрежниеДанныеОбъекта = Новый Структура(ИменаКонтролируемыхРеквизитов);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.МашиночитаемыеДоверенностиКЭДО") Тогда
		ПрежниеДанныеОбъекта = КонтролируемыеДанныеМашиночитаемойДоверенности(Источник.Ссылка);
	Иначе
		ПрежниеДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, ИменаКонтролируемыхРеквизитов);
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("ПрежниеДанныеПубликуемогоОбъекта", ПрежниеДанныеОбъекта);
	
	Если Источник.ЭтоНовый() И ТипЗнч(Источник) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеНастройкиПубликации") Тогда
			Возврат;
		КонецЕсли;
		Источник.ДополнительныеСвойства.Вставить("ОбновитьНастройкуПубликации", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектПриЗаписи(Источник) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначенияКонтролируемыхРеквизитовИзменились(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикПриЗаписиОбъекта(Источник);
	
КонецПроцедуры

Процедура ОбработчикПриЗаписиОбъекта(Источник)

	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ПриЗаписиФизическиеЛица(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
			ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение;
			ПриЗаписиОбъекта(Источник, ТипОбъекта);
		Иначе
			ПриЗаписиПодразделенияОрганизаций(Источник);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Организации") Тогда
		ПриЗаписиОрганизации(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Должности") Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Должность;
		ПриЗаписиОбъекта(Источник, ТипОбъекта);
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользуетсяПриложение1СПерсонал") Тогда
		ПриЗаписиИспользуетсяПриложение1СПерсонал(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.МашиночитаемыеДоверенностиКЭДО") Тогда
		ПриЗаписиМашиночитаемыеДоверенностиКЭДО(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьЭлектронныеПодписи") Тогда
		ПриЗаписиИспользоватьЭлектронныеПодписи(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты") Тогда
		ПриЗаписиУчетныеЗаписиЭлектроннойПочты(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ДокументКадровогоЭДО") Тогда
		ПриЗаписиДокументКадровогоЭДО(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СогласиеНаПрисоединениеККЭДО") Тогда
		ПриЗаписиСогласиеНаПрисоединениеККЭДО(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаИзменитьЛичныеДанные")
			ИЛИ ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаНалоговыйВычет")
			ИЛИ ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтпуск")
			ИЛИ ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаСправка2НДФЛ")
			ИЛИ ТипЗнч(Источник) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтсутствиеПоБолезни") Тогда
		ПриЗаписиЗаявкиСотрудника(Источник)	
	Иначе
		ИнтеграцияУправлениеПерсоналомСобытияВнутренний.ОбработчикПриЗаписиОбъекта(Источник);
	КонецЕсли;

КонецПроцедуры

Функция ИменаКонтролируемыхРеквизитов(Объект)
	
	ИменаРеквизитов = "";
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Должности") Тогда
		ИменаРеквизитов = "Наименование";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Организации") Тогда
		ИменаРеквизитов = "Наименование,ИНН,ГоловнаяОрганизация,ОбособленноеПодразделение,НаименованиеПолное,ОГРН";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
			ИменаРеквизитов = "Наименование,Код,Родитель,РеквизитДопУпорядочиванияИерархического";
		Иначе
			ИменаРеквизитов = "РеквизитДопУпорядочиванияИерархического";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.МашиночитаемыеДоверенностиКЭДО") Тогда
		ИменаРеквизитов = "Наименование,ДатаНачала,ДатаОкончания";
	Иначе
		ИменаРеквизитов = ИнтеграцияУправлениеПерсоналомСобытияВнутренний.ИменаКонтролируемыхРеквизитов(Объект);
	КонецЕсли;
	
	Возврат ИменаРеквизитов;

КонецФункции

Функция КонтролируемыеДанныеМашиночитаемойДоверенности(Объект)
	
	КонтролируемыеДанные = Новый Структура(
		"Наименование,
		|ДатаНачала,
		|ДатаОкончания,
		|НомерВРеестре,
		|Отозвана");
	
	ДанныеДоверенности = Справочники.МашиночитаемыеДоверенностиКЭДО.ДанныеДоверенности(Объект);
	ЗаполнитьЗначенияСвойств(КонтролируемыеДанные, ДанныеДоверенности);
	
	Возврат КонтролируемыеДанные;
	
КонецФункции

Функция ЗначенияКонтролируемыхРеквизитовИзменились(Объект) Экспорт

	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ПрежниеДанныеПубликуемогоОбъекта", ЗначенияКонтролируемыхРеквизитов);
	Если Не ЗначениеЗаполнено(ЗначенияКонтролируемыхРеквизитов) Тогда
		Возврат Истина;
	Иначе
		Для каждого ЭлементКоллекции Из ЗначенияКонтролируемыхРеквизитов Цикл
			Если Объект[ЭлементКоллекции.Ключ] <> ЭлементКоллекции.Значение Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#Область ОбработчикиПриЗаписи

Процедура ПриЗаписиОбъекта(Объект, ТипОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектВыгружается = ИнтеграцияУправлениеПерсоналом.ОбъектВыгружается(Объект.Ссылка);
	РегистрироватьУправлениеПерсоналом 	= (ОбъектВыгружается[Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом] = Истина);
	РегистрироватьКабинетСотрудника 	= (ОбъектВыгружается[Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника] = Истина);
	Если Не РегистрироватьУправлениеПерсоналом И Не РегистрироватьКабинетСотрудника Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеДляОбмена(Объект.Ссылка, ТипОбъекта,
					РегистрироватьУправлениеПерсоналом, РегистрироватьКабинетСотрудника, Неопределено);
	
КонецПроцедуры

Процедура ПриЗаписиФизическиеЛица(Объект)

	УстановитьПривилегированныйРежим(Истина);
	
	ФизическоеЛицоВыгружается = ИнтеграцияУправлениеПерсоналом.ОбъектВыгружается(Объект.Ссылка);
	РегистрироватьУправлениеПерсоналом 	= (ФизическоеЛицоВыгружается[Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом] = Истина);
	РегистрироватьКабинетСотрудника 	= (ФизическоеЛицоВыгружается[Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника] = Истина);
	Если Не РегистрироватьУправлениеПерсоналом И Не РегистрироватьКабинетСотрудника Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиФизическогоЛица(Объект.Ссылка);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо;
	ЗарегистрироватьИзменениеДляОбмена(Объект.Ссылка, ТипОбъекта,
					РегистрироватьУправлениеПерсоналом, РегистрироватьКабинетСотрудника, РезультатПроверки);

КонецПроцедуры

Процедура ПриЗаписиПодразделенияОрганизаций(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодразделениеПредприятия = ИнтеграцияУправлениеПерсоналом.ПодразделениеВСтруктуреПредприятия(Объект.Ссылка);
	Если ЗначениеЗаполнено(ПодразделениеПредприятия) Тогда
		
		ОбъектВыгружается = ИнтеграцияУправлениеПерсоналом.ОбъектВыгружается(ПодразделениеПредприятия);
		РегистрироватьУправлениеПерсоналом 	= (ОбъектВыгружается[Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом] = Истина);
		РегистрироватьКабинетСотрудника 	= (ОбъектВыгружается[Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника] = Истина);
		Если Не РегистрироватьУправлениеПерсоналом И Не РегистрироватьКабинетСотрудника Тогда
			Возврат;
		КонецЕсли;
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение;
		ЗарегистрироватьИзменениеДляОбмена(ПодразделениеПредприятия, ТипОбъекта,
				РегистрироватьУправлениеПерсоналом, РегистрироватьКабинетСотрудника, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиОрганизации(Объект)

	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		
		// Организация регистрируется как Организация и Подразделение.
		УстановитьПривилегированныйРежим(Истина);
		
		ОбъектВыгружается = ИнтеграцияУправлениеПерсоналом.ОбъектВыгружается(Объект.Ссылка);
		РегистрироватьУправлениеПерсоналом 	= (ОбъектВыгружается[Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом] = Истина);
		РегистрироватьКабинетСотрудника 	= (ОбъектВыгружается[Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника] = Истина);
		Если Не РегистрироватьУправлениеПерсоналом  И Не РегистрироватьКабинетСотрудника Тогда
			Возврат;
		КонецЕсли;
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Организация;
		ЗарегистрироватьИзменениеДляОбмена(Объект.Ссылка, ТипОбъекта,
			РегистрироватьУправлениеПерсоналом, РегистрироватьКабинетСотрудника, Неопределено);
			
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение;
		ЗарегистрироватьИзменениеДляОбмена(Объект.Ссылка, ТипОбъекта,
			РегистрироватьУправлениеПерсоналом, РегистрироватьКабинетСотрудника, Неопределено);
		
	Иначе
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Организация;
		ПриЗаписиОбъекта(Объект, ТипОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиМашиночитаемыеДоверенностиКЭДО(Объект)

	Если Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияФормата("2.0") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектВыгружается = ИнтеграцияКабинетСотрудника.ОбъектВыгружается(Объект.Ссылка);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.МашиночитаемаяДоверенностьКЭДО;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		Если Не ОбъектВыгружается Или Объект.ПометкаУдаления Тогда
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 				= Объект.Ссылка;
			МенеджерЗаписи.УсловноВыгружается 	= Объект.ПометкаУдаления;
			МенеджерЗаписи.Записать();
		КонецЕсли; 
		
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ссылка 		= Объект.Ссылка;
		МенеджерЗаписи.ТипОбъекта 	= ТипОбъекта;
		МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписиИспользуетсяПриложение1СПерсонал(Объект)

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);

КонецПроцедуры

Процедура ПриЗаписиИспользоватьЭлектронныеПодписи(Объект)
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	Если Не Объект.Значение Тогда
		Настройки.ПолучениеДокументаСЭПНедоступно = Истина;
		Если Настройки.ПолучениеДокументаФайлДляПечатиНедоступно
			И Настройки.ПолучениеДокументаВБумажномВидеНедоступно
			И Настройки.ПолучениеДокументаСканОригиналаНедоступно Тогда
			Настройки.ПолучениеДокументаФайлДляПечатиНедоступно = Ложь;
		КонецЕсли;
			КабинетСотрудника.СохранитьНастройкиИспользуемаяФункциональностьСервиса(Настройки);
	КонецЕсли;
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);

КонецПроцедуры

Процедура ПриЗаписиУчетныеЗаписиЭлектроннойПочты(Объект)
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Объект.Ссылка = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись() Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиДокументКадровогоЭДО(Объект)
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления И КабинетСотрудника.ИспользоватьФормат401() Тогда
		
		НеОбрабатывать = Объект.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника
			Или Объект.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток 
			Или Объект.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.СправкаСотруднику
			Или ТипЗнч(Объект.ОснованиеДокумента)= Тип("ДокументСсылка.СправкаНДФЛ")
			Или ТипЗнч(Объект.ОснованиеДокумента)= БизнесПроцессыЗаявокСотрудников.ТипЗаявкаСотрудникаСправкаСМестаРаботы()
			Или Не КадровыйЭДО.ЭтоТипОбъектаСПечатнымиФормами(ТипЗнч(Объект.ОснованиеДокумента));
			
		Если НеОбрабатывать Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
			ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДокументНаПодпись);
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 				= Объект.Ссылка;
			МенеджерЗаписи.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДокументНаПодпись;
			МенеджерЗаписи.ВыгружатьУдаление 	= Истина;
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		
		РегистрироватьИзменения = Неопределено;
		Объект.ДополнительныеСвойства.Свойство("РегистрироватьИзмененияКабинетСотрудника", РегистрироватьИзменения);
		Если РегистрироватьИзменения <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВнешниеПодписанты, "ФизическоеЛицо");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка В(&ФизическиеЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка = &Организация";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Если Не РезультатЗапроса[0].Пустой() И Не РезультатЗапроса[1].Пустой() Тогда
			ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДокументНаПодпись;
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
				ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
				Блокировка.Заблокировать();
				
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка 		= Объект.Ссылка;
				МенеджерЗаписи.ТипОбъекта 	= ТипОбъекта;
				МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиСогласиеНаПрисоединениеККЭДО(Объект)
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
			ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.СогласиеНаПрисоединениеККЭДО);
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 				= Объект.Ссылка;
			МенеджерЗаписи.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.СогласиеНаПрисоединениеККЭДО;
			МенеджерЗаписи.ВыгружатьУдаление 	= Истина;
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиЗаявкиСотрудника(Объект) Экспорт
	
	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяКабинетСотрудника() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипЗаявкиТипОбъекта = ИнтеграцияКабинетСотрудника.ТипЗаявкиТипОбъекта();
	ТипОбъекта = ТипЗаявкиТипОбъекта[Объект.ТипЗаявкиКабинетСотрудника];
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ссылка 		= Объект.Ссылка;
		МенеджерЗаписи.ТипОбъекта 	= ТипОбъекта;
		МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗарегистрироватьИзменениеДляОбмена(Ссылка, ТипОбъекта, РегистрироватьУправлениеПерсоналом, РегистрироватьКабинетСотрудника, РезультатПроверки) Экспорт
	
	ЕстьРезультатПроверки = ЗначениеЗаполнено(РезультатПроверки);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Если ЕстьРезультатПроверки Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
			ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		КонецЕсли;
		Если РегистрироватьУправлениеПерсоналом Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", 		Ссылка);
			ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", 	ТипОбъекта);
		КонецЕсли;
		Если РегистрироватьКабинетСотрудника Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", 		Ссылка);
			ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", 	ТипОбъекта);
		КонецЕсли;
		Блокировка.Заблокировать();
		
		Если ЕстьРезультатПроверки Тогда
			Для каждого СтрокаТЗ Из РезультатПроверки Цикл
				МенеджерЗаписи = РегистрыСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				Если СтрокаТЗ.ЕстьОшибка Тогда
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РегистрироватьУправлениеПерсоналом Тогда
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если РегистрироватьКабинетСотрудника Тогда
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ЗарегистрироватьИзмененияОбъектов(РезультатПроверки, ВыгрузкаУП, ИзмененияУП, ВыгрузкаКС, ИзмененияКС) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатПроверки)
		И Не ЗначениеЗаполнено(ВыгрузкаУП)
		И Не ЗначениеЗаполнено(ИзмененияУП)
		И Не ЗначениеЗаполнено(ВыгрузкаКС)
		И Не ЗначениеЗаполнено(ИзмененияКС) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
			ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыгрузкаУП) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
			ЭлементБлокировки.ИсточникДанных = ВыгрузкаУП;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		КонецЕсли;
		Если ЗначениеЗаполнено(ИзмененияУП) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
			ЭлементБлокировки.ИсточникДанных = ИзмененияУП;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыгрузкаКС) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = ВыгрузкаКС;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		КонецЕсли;
		Если ЗначениеЗаполнено(ИзмененияКС) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = ИзмененияКС;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		КонецЕсли;
		Блокировка.Заблокировать();
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			Для каждого СтрокаТЗ Из РезультатПроверки Цикл
				МенеджерЗаписи = РегистрыСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыгрузкаУП) Тогда
			Для каждого СтрокаТЗ Из ВыгрузкаУП Цикл
				МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзмененияУП) Тогда 
			Для каждого СтрокаТЗ Из ИзмененияУП Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыгрузкаКС) Тогда
			Для каждого СтрокаТЗ Из ВыгрузкаКС Цикл
				МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзмененияКС) Тогда 
			Для каждого СтрокаТЗ Из ИзмененияКС Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнтеграцияУправлениеПерсоналомСобытия.ЗаписатьОшибку(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбработатьИзменениеКадровойИстории(ИзменившиесяДанные) Экспорт

	Если Не ИнтеграцияУправлениеПерсоналом.ИспользуетсяИнтеграция() Тогда
		Возврат;
	КонецЕсли;

	Если ИзменившиесяДанные = Неопределено Или ИзменившиесяДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтарыеЗначенияДолжностьПоШтатномуРасписанию = Неопределено;
	Если ИзменившиесяДанные.Колонки.Найти("СтароеЗначениеДолжностьПоШтатномуРасписанию") <> Неопределено
		И ИнтеграцияУправлениеПерсоналом.РассчитыватьПодразделенияРуководителей() Тогда
		СтарыеЗначенияДолжностьПоШтатномуРасписанию = ОбщегоНазначения.ВыгрузитьКолонку(ИзменившиесяДанные, "СтароеЗначениеДолжностьПоШтатномуРасписанию", Истина);
		ОбщегоНазначенияБЗККлиентСервер.УдалитьПустыеЗначенияИзМассива(СтарыеЗначенияДолжностьПоШтатномуРасписанию);
	КонецЕсли;
	
	СписокСотрудников = ИзменившиесяДанные.ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокСотрудников)
	|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка";
	ТаблицаСотрудников  = Запрос.Выполнить().Выгрузить();
	
	ИнтеграцияУправлениеПерсоналом.ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников);
	
	ФизическиеЛицаОрганизации = ИзменившиесяДанные.Скопировать(Новый Структура("Удаление", Ложь), "ФизическоеЛицо, НовоеЗначениеОрганизация");
	Если ЗначениеЗаполнено(ФизическиеЛицаОрганизации) Тогда
		ФизическиеЛицаОрганизации.Колонки.НовоеЗначениеОрганизация.Имя = "Организация";
		КадровыйЭДО.СформироватьСогласияНаПрисоединениеККЭДО(ФизическиеЛицаОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтарыеЗначенияДолжностьПоШтатномуРасписанию) Тогда
		ИнтеграцияУправлениеПерсоналомСобытияВнутренний.ЗарегистрироватьОбновлениеРуководителейПодразделений(СтарыеЗначенияДолжностьПоШтатномуРасписанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОшибку(ПодробноеПредставлениеОшибки) Экспорт
	
	ШаблонОписания = НСтр("ru = 'Ошибка при записи изменений для обмена:
		|%1'");
	Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИнтеграцияУправлениеПерсоналом.ИмяОбщегоСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

#КонецОбласти 












