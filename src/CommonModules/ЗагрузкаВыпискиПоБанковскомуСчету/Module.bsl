#Область ПрограммныйИнтерфейс

Функция РаспознанныеДанныеИзБанка(ИмяФайла,
								  Настройки,
								  СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено,
								  ОдиночныйРазделительСтрок = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатЧтенияФайла = ОбменСБанкомВФормате1С.РезультатЧтенияФайла(ИмяФайла, Настройки.Кодировка, ОдиночныйРазделительСтрок);
	
	Результат = РаспознанныеДанныеИзБанкаОбщая(РезультатЧтенияФайла, Настройки, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Возврат Результат;
	
КонецФункции

Функция РаспознанныеДанныеИзБанкаДБ(ВыпискаБанка,
									Настройки,
									СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыпискаБанка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = РаспознанныеДанныеИзБанкаОбщая(ВыпискаБанка, Настройки, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Возврат Результат
	
КонецФункции

Функция НовыйРаспознанныеДанныеИзБанка(Выписки, РаспознанныеВыписки, УчастникиОпераций, Настройки, ПротоколЧтенияФайла, ПротоколГруппировкиВыписки) Экспорт
	
	РаспознанныеДанныеИзБанка = Новый Структура;
	РаспознанныеДанныеИзБанка.Вставить("Выписки",                    Выписки);
	РаспознанныеДанныеИзБанка.Вставить("РаспознанныеВыписки",        РаспознанныеВыписки);
	РаспознанныеДанныеИзБанка.Вставить("УчастникиОпераций",          УчастникиОпераций);
	РаспознанныеДанныеИзБанка.Вставить("Настройки",                  Настройки);
	РаспознанныеДанныеИзБанка.Вставить("ПротоколЧтенияФайла",        ПротоколЧтенияФайла);
	РаспознанныеДанныеИзБанка.Вставить("ПротоколГруппировкиВыписки", ПротоколГруппировкиВыписки);
	
	Возврат РаспознанныеДанныеИзБанка;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Загрузка выписки по банковскому счету'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
КонецФункции

// Настройки - см. НовыйНастройкиОбменСБанком()
Функция РаспознатьВыписки(Выписки, УчастникиОпераций, ДанныеИзБанка) Экспорт
	
	РаспознанныеВыписки = Новый Соответствие; // Ключ - идентификатор выписки; Значение - см. НовыйРаспознаннаяВыписка()
	
	ПравилаОпределенияХозяйственныхОпераций = ПравилаОпределенияХозяйственныхОпераций();
	ШаблоныОбъектов = ШаблоныОбъектовСохранениеДанныхАвтозаполнения();
	
	Для Каждого КлючИЗначение Из Выписки Цикл
		
		Выписка = КлючИЗначение.Значение;
		
		РаспознаннаяВыписка = НовыйРаспознаннаяВыписка(Выписка.Идентификатор, УчастникиОпераций);
		РаспознанныеВыписки.Вставить(Выписка.Идентификатор, РаспознаннаяВыписка);
		
		Если Не БанковскийСчетВыпискиОпределен(РаспознаннаяВыписка, УчастникиОпераций) Тогда
			Продолжить;
		КонецЕсли;
		
		НайтиПлатежныеПоручения(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
		НайтиРанееСозданныеДокументы(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
		
		Организация = РаспознаннаяВыписка.ВладелецСчета.Организация;
		БанковскийСчет = РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет;
		НастройкиКБУНФ = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
		КонтекстРазбораВыписки = ПодготовитьКонтекстДляРазбораБанковскойВыписки(НастройкиКБУНФ);
	
		// Определим хозяйственные операции
		ПараметрыОпределенияХозяйственнойОперации = НовыйПараметрыОпределенияХозяйственнойОперации();
		ПараметрыОпределенияХозяйственнойОперации.ВладелецСчета                 = РаспознаннаяВыписка.ВладелецСчета;
		ПараметрыОпределенияХозяйственнойОперации.УчастникиОпераций             = УчастникиОпераций;
		
		Для Каждого Операция Из Выписка.Операции Цикл
			
			// Итерация разбора выписки по алгоритму УНФ
			СтрокаСекции = Неопределено;
			Документ = ДанныеИзБанка.Документы[Операция.ПорядковыйНомерВФайле];
			ИтерацияРазбораБанковскойВыпискиУНФ(Документ, КонтекстРазбораВыписки, СтрокаСекции);
			Операция.СтрокаСекции = СтрокаСекции;
	
			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
			
			ПодставитьДокументУНФ(Документ, РаспознаннаяОперация);
			
			Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
				Или ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьПараметрыОпределенияХозяйственнойОперации(ПараметрыОпределенияХозяйственнойОперации, Операция);
			
			РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация(
				ПараметрыОпределенияХозяйственнойОперации,
				ПравилаОпределенияХозяйственныхОпераций);
			
			ПредупрежденияПриВыбореСсылок = ПредупрежденияПриВыбореСсылок(
				РаспознаннаяОперация.ХозяйственнаяОперация, ПараметрыОпределенияХозяйственнойОперации);
			ЗаписатьПредупреждения(РаспознаннаяОперация, ПредупрежденияПриВыбореСсылок);
			
			Если РаспознаннаяОперация.ХозяйственнаяОперация.Свойство("СуммаУслуг") Тогда
				СтрокаСекции.Вставить("СуммаКомиссииДокумента", РаспознаннаяОперация.ХозяйственнаяОперация.СуммаУслуг);
			КонецЕсли;
			
		КонецЦикла;
		
		СохранитьДанныеАвтозаполненияСтрокВыписки(РаспознаннаяВыписка, Выписка, ШаблоныОбъектов);
		
	КонецЦикла;
	
	Возврат РаспознанныеВыписки;
	
КонецФункции

// Определяет свойства распознанной операции, одновременно соответствующие сведениям, указанным
// - в форме (пользователем)
// - в операции выписки (инициатором платежа).
// Если подходящих ссылок нет, то создает их, дополняя (модифицируя) содержимое РаспознанныеДанныеИзБанка.
//
// Для распознавания операции по виду операции следует использовать ХозяйственнаяОперацияПоВидуОперации()
//
// Параметры:
//  ДанныеВведенныеПользователем - Структура - Ключ - имя данных; Значение - значение данных. 
//     Допускаются ключи: "Контрагент", "ДоговорКонтрагента", "ВидОперацииДокумента"
//  ИдентификаторВыписки         - см. ТипИдентификатор()
//  ИдентификаторОперации        - см. ТипИдентификатор()
//  РаспознанныеДанныеИзБанка    - см. НовыйРаспознанныеДанныеИзБанка()
//  Настройки                    - см. НовыйНастройкиОбменСБанком()
// 
// Возвращаемое значение:
//   см. НовыйХозяйственнаяОперация() - значения уточненных свойств хозяйственной операции
//
Функция УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(ДанныеВведенныеПользователем, ИдентификаторВыписки, ИдентификаторОперации, РаспознанныеДанныеИзБанка, Настройки) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеВведенныеПользователем) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Операция = ОперацияВыписки(РаспознанныеДанныеИзБанка.Выписки, ИдентификаторВыписки, ИдентификаторОперации);
	Если Операция = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	РаспознаннаяВыписка = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[ИдентификаторВыписки];
	Если РаспознаннаяВыписка = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, ИдентификаторОперации);
	Если РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
		ХозяйственнаяОперация = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеВведенныеПользователем);
	Иначе
		ХозяйственнаяОперация = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РаспознаннаяОперация.ХозяйственнаяОперация);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
			ХозяйственнаяОперация,
			ДанныеВведенныеПользователем,
			Истина);
	КонецЕсли;
	
	Если ДанныеВведенныеПользователем.Свойство("ВидОперацииДокумента") Тогда 
		Если Не ХозяйственнаяОперация.Свойство("Контрагент") Тогда 
			ЗаменитьХозяйственнуюОперацию = Истина;
		Иначе
			ТипКонтрагента = ТипЗнч(ХозяйственнаяОперация.Контрагент);
			Если ДанныеВведенныеПользователем.ВидОперацииДокумента = 
					Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
				И ТипКонтрагента = Тип("СправочникСсылка.Контрагенты") Тогда 
				// могут быть только контрагенты-юр. лица
				КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ХозяйственнаяОперация.Контрагент, "ЮридическоеФизическоеЛицо");
				ЗаменитьХозяйственнуюОперацию = КонтрагентЮрФизЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			Иначе
				ЗаменитьХозяйственнуюОперацию = 
					ТипКонтрагента <> УчетДенежныхСредствКлиентСервер.ТипКонтрагентаПоВидуОперации(ДанныеВведенныеПользователем.ВидОперацииДокумента);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаменитьХозяйственнуюОперацию = Ложь;
	КонецЕсли;
		
	Параметры = НовыйПараметрыОпределенияХозяйственнойОперации();
	Параметры.ВладелецСчета                 = РаспознаннаяВыписка.ВладелецСчета;
	Параметры.УчастникиОпераций             = РаспознанныеДанныеИзБанка.УчастникиОпераций;
	
	ЗаполнитьПараметрыОпределенияХозяйственнойОперации(Параметры, Операция);
	
	ВидОперацииДокумента =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВведенныеПользователем, "ВидОперацииДокумента");
	
	Если ЗаменитьХозяйственнуюОперацию Тогда
		
		ПравилаОпределенияХозяйственныхОпераций = ПравилаОпределенияХозяйственныхОпераций(
			ВидОперацииДокумента);
		
		Если Не ЗначениеЗаполнено(ПравилаОпределенияХозяйственныхОпераций) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
		ХозяйственнаяОперация = ХозяйственнаяОперация(Параметры, ПравилаОпределенияХозяйственныхОпераций, Истина);
		Если ХозяйственнаяОперация = Неопределено Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
	Иначе
		
		ДопАналитика = ДопАналитикаПоВидуОперации(ВидОперацииДокумента);
		
		ЗаполнитьБанковскийСчет = ДанныеВведенныеПользователем.Свойство("Контрагент");
		ЗаполнитьДоговор        = ДанныеВведенныеПользователем.Свойство("ВидОперацииДокумента")
			Или ДанныеВведенныеПользователем.Свойство("Контрагент");
		ЗаполнитьПоДоговору     = ДанныеВведенныеПользователем.Свойство("ДоговорКонтрагента");
		ЗаполнитьСтатьюДДС      = ДанныеВведенныеПользователем.Свойство("ВидОперацииДокумента");
		ЗаполнитьДопАналитику   = ЗначениеЗаполнено(ДопАналитика);
		
		Если ЗаполнитьБанковскийСчет Тогда
			
			// Банковский счет заполняем, только если его можно идентифицировать по данным файла
			ХозяйственнаяОперация.Удалить("БанковскийСчетКонтрагента");
			УстановитьБанковскийСчетКонтрагента(ХозяйственнаяОперация, Параметры);
			Если Не ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента") Тогда
				ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчета.ПустаяСсылка());
			КонецЕсли;
			
			ЗаполнитьДоговор = Истина;
			
		КонецЕсли;
		
		Если ЗаполнитьДоговор Тогда
			
			ХозяйственнаяОперация.Удалить("ДоговорКонтрагента");
			Если ХозяйственнаяОперация.Свойство("Контрагент")
				И ХозяйственнаяОперация.Свойство("ВидОперацииДокумента")
				И ЗначениеЗаполнено(ХозяйственнаяОперация.Контрагент)
				И ЗначениеЗаполнено(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
				
				// Логика заполнения договора использует коллекцию УчастникиОпераций.
				// Однако, контрагент может быть выбран пользователем среди тех, что не могут быть идентифицированы по данным файла,
				// а значит, отсутствуют в УчастникиОпераций.
				// Поэтому добавим в УчастникиОпераций контрагента, выбранного пользователем,
				// а затем дополним коллекцию всеми договорами этого контрагента.
				
				Идентификаторы = Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"];
				ИдентификацияУчастниковБанковскихОпераций.ДополнитьУчастникиОперацийСсылкой(
					Параметры.УчастникиОпераций,
					ХозяйственнаяОперация.Контрагент,
					Новый Структура, // описание ссылки не должно использоваться
					Идентификаторы);
				ИдентификацияУчастниковБанковскихОпераций.НайтиДоговорыКонтрагентовВИнформационнойБазе(
					Параметры.УчастникиОпераций,
					ХозяйственнаяОперация.Контрагент);
				
				ЗаполнитьПоДоговору = НайтиДоговорПоВидуОперации(
					ХозяйственнаяОперация,
					Параметры,
					ХозяйственнаяОперация.ВидОперацииДокумента);
				
			КонецЕсли;
			
			Если ЗаполнитьПоДоговору И Не ХозяйственнаяОперация.Свойство("ДоговорКонтрагента") Тогда
				ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаполнитьПоДоговору Тогда
			// Реквизиты, зависящие от договора
			УстановитьПоказателиРасчетов(ХозяйственнаяОперация, Параметры);
			УстановитьПоказателиНДС(ХозяйственнаяОперация, Параметры);
		КонецЕсли;
		
		Если ЗаполнитьСтатьюДДС Тогда
			ХозяйственнаяОперация.Вставить("СтатьяДвиженияДенежныхСредств",
				УчетДенежныхСредствСервер.СтатьяДДСПоУмолчанию(ХозяйственнаяОперация.ВидОперацииДокумента));
		КонецЕсли;
		
		Если ЗаполнитьДопАналитику Тогда
			Для Каждого КлючИЗначение Из ДопАналитика Цикл
				ЗначениеДопАналитики = Неопределено;
				Если ХозяйственнаяОперация.Свойство(КлючИЗначение.Ключ, ЗначениеДопАналитики)
					И ЗначениеЗаполнено(ЗначениеДопАналитики) Тогда
					Продолжить;
				КонецЕсли;
				
				ХозяйственнаяОперация.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация;
	
	Возврат ХозяйственнаяОперация;
	
КонецФункции 

// Распознает операцию из строки выписки для загруженного ранее документа.
//
// Параметры:
//  СтрокаВыписки		 - Структура - Структура с ранее подготовленными данными об операции из банковской выписки.
//                                     См. регистр ПредупрежденияПриЗагрузкеВыписки.СтрокаВыписки.
//  ПараметрыДокумента	 - Структура - Параметры загруженного документа, для которого нужно распознать распознать операцию.
//                                     См. НовыйПараметрыДокументаДляРаспознаванияОперации
// 
// Возвращаемое значение:
//   - Структура - Распознанные данные документа. См. НовыйРаспознаннаяОперацияДокумента
//
Функция РаспознатьОперациюДокумента(СтрокаВыписки, ПараметрыДокумента) Экспорт
	
	Операция = СтрокаВыписки.Операция;
	УчастникиОпераций = УчастникиОперацииДокумента(СтрокаВыписки.ИдентификаторыУчастников, 
		ПараметрыДокумента.Организация, ПараметрыДокумента.СчетОрганизации);
	
	ПараметрыОпределенияХозяйственнойОперации = ПараметрыОпределенияХозяйственнойОперацииДокумента(
		СтрокаВыписки.ИдентификаторВыписки, УчастникиОпераций, Операция);
	
	ПравилаОпределенияХозяйственныхОпераций = ПравилаОпределенияХозяйственныхОпераций(ПараметрыДокумента.ВидОперации);
	
	ХозяйственнаяОперация = ХозяйственнаяОперация(
		ПараметрыОпределенияХозяйственнойОперации, ПравилаОпределенияХозяйственныхОпераций);
	
	ПредупрежденияПриВыбореСсылок = ПредупрежденияПриВыбореСсылок(
		ХозяйственнаяОперация, ПараметрыОпределенияХозяйственнойОперации);
	
	РаспознаннаяОперация = НовыйРаспознаннаяОперацияДокумента();
	РаспознаннаяОперация.Операция = Операция;
	РаспознаннаяОперация.УчастникиОпераций = УчастникиОпераций;
	РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация;
	РаспознаннаяОперация.Предупреждения = ПредупрежденияПриВыбореСсылок;
	
	Возврат РаспознаннаяОперация;
	
КонецФункции

#КонецОбласти

#Область ISO20022

Функция ТипИдентификатор() Экспорт
	
	// Тип Max35Text часто используется в ISO 20022 для идентификаторов
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(35);
	
КонецФункции

Функция НовыйВыпискаПоБанковскомуСчету(Идентификатор) Экспорт
	
	// Представляет значения типа AccountStatement5 сообщения camt.053.001.05 (BankToCustomerStatementV05) стандарта ISO 20022
	// Где уместно, приводятся имена на русском языке в соответствии с проектом стандартов национальной практики применения
	// платежных сообщений ISO 20022, опубликованном Центральным банком РФ
	
	ТипСумма         = ОбщегоНазначения.ОписаниеТипаЧисло(15,2); // в рублях
	ТипИдентификатор = ТипИдентификатор();
	
	Выписка = Новый Структура;
	Выписка.Вставить("Идентификатор",         Идентификатор); // Identification
	Выписка.Вставить("НачалоПериода",         '0001-01-01');  // FromToDate.FromDateTime
	Выписка.Вставить("КонецПериода",          '0001-01-01');  // FromToDate.ToDateTime
	
	Выписка.Вставить("Сальдо", Новый ТаблицаЗначений); // Balance
	Выписка.Сальдо.Колонки.Добавить("Дата",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); // Balance.Date.DateTime; Принимаем, что для всех записей сальдо на начало дня; Balance.Type = OPBD
	Выписка.Сальдо.Колонки.Добавить("Сумма", ТипСумма);                                          // Balance.Amount; Принимаем, что это кредитовое сальдо по счету клиента банка; Balance.CreditDebitIndicator = CRDT
	
	Выписка.Вставить("ВсегоСписано",       0); // TransactionsSummary.TotalDebitEntries.Sum
	Выписка.Вставить("ВсегоПоступило",     0); // TransactionsSummary.TotalCreditEntries.Sum
	
	Выписка.Вставить("Операции", Новый ТаблицаЗначений); // Entry
	Выписка.Операции.Колонки.Добавить("Идентификатор",            ТипИдентификатор); // EntryReference Идентифицирует операцию в рамках выписки
	// Поле, аналогичное ПорядковыйНомерВФайле, не предусмотрено camt.053 и может использоваться только для заполнения коллекции
	// (не должно использоваться позднее).
	// Ограничение в 10 символов выбрано в соответствии с ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу()
	Выписка.Операции.Колонки.Добавить("ПорядковыйНомерВФайле",    ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	// В программе длину номера документа ограничиваем до 20 символов: только такие номера могут быть сохранены в ИБ. 
	// См.
	// - Метаданные.Документы.ПоступлениеНаСчет.Реквизиты.НомерВходящегоДокумента
	// - Метаданные.Документы.РасходСоСчета.Реквизиты.НомерВходящегоДокумента
	Выписка.Операции.Колонки.Добавить("НомерДокумента",           ОбщегоНазначения.ОписаниеТипаСтрока(20)); // TransactionDetails.References.EndToEndIdentification Для идентификации используется номер и дата документа, передаваемые от плательщика получателю (или при прямом дебитовании - от получателя плательщику)
	Выписка.Операции.Колонки.Добавить("ДатаДокумента",            ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); 
	Выписка.Операции.Колонки.Добавить("НомерСчетаКонтрагента",    БанковскиеПравила.ТипНомерСчета()); // TransactionDetails.References.InstructionIdentification Для идентификации операции в цепочке "банк-владелец счета" используется часть номера и дата документа, которым идентифицирована транзакция, а также номер банковского счета контрагента
	Выписка.Операции.Колонки.Добавить("Сумма",                    ОбщегоНазначения.ОписаниеТипаЧисло(15,2)); // Amount
	Выписка.Операции.Колонки.Добавить("ПоступилоСписано",         ТипПоступилоСписано());   // "Поступило" или "Списано" - CreditDebitIndicator
	Выписка.Операции.Колонки.Добавить("ДатаИсполнения",           ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); // BookingDate; Принимаем, что Status = BOOK
	Выписка.Операции.Колонки.Добавить("ПлательщикИдентификаторы", Новый ОписаниеТипов("Массив")); // См. TransactionDetails.RelatedParties.Proprietary.Party.Identification.OrganisationIdentification.Other.Identification
	Выписка.Операции.Колонки.Добавить("ПолучательИдентификаторы", Новый ОписаниеТипов("Массив"));
	Выписка.Операции.Колонки.Добавить("ПлательщикРеквизиты",      Новый ОписаниеТипов("Структура")); // См. ОбменСБанкомВФормате1С.ЭлементыРеквизитовУчастника()
	Выписка.Операции.Колонки.Добавить("ПолучательРеквизиты",      Новый ОписаниеТипов("Структура")); // См. ОбменСБанкомВФормате1С.ЭлементыРеквизитовУчастника()
	Выписка.Операции.Колонки.Добавить("РеквизитыПлатежаВБюджет",  Новый ОписаниеТипов("Структура")); // См. TransactionDetails.RemittanceInformation.Structured.TaxRemittance; ЭлементыРеквизитовПлатежаВБюджет()
	// Описание банковской операции может содержать BankTransactionCode - указание на вид этой операции не в терминах банка,
	// а в терминах бизнеса получателя или отправителя платежа, его хозяйственной деятельности.
	// Стандарт предписывает передачу BankTransactionCode
	// 1. либо в централизованном формате Domain-Family-SubFamily в соответствии с External Code Set
	// 2. либо в соответствии с какой-либо проприетарной схемой.
	// Во втором случае может быть передан только один идентификатор по одной схеме.
	// Однако, в российской практике для идентификациии типа операции используются два понятия:
	// - ШифрОперации
	// - БалансовыйСчет
	// (см. 385-П - план счетов и Приложение 1)
	// Поэтому, для строгого соблюдения стандарта следует при подготовке данных в соответствии с ISO 20022 "перекодировать" 
	// из сочетания ШифрОперации + БалансовыйСчет в значения, описанные во внешнем наборе кодов.
	// В данном случае, поскольку нет необходимости строго соблюдать представления, заданные в стандарте,
	// такое "перекодирование" выполним позже, а в структуру данных поместим два поля отдельно.
	// То есть, сделаем вид, что стандарт позволяет передавать несколько идентификаторов по разным проприетарным схемам:
	Выписка.Операции.Колонки.Добавить("ШифрОперации",             Новый ОписаниеТипов("Число"));                 // BankTransactionCode.Proprietary
	Выписка.Операции.Колонки.Добавить("БалансовыйСчет",           БанковскиеПравила.ТипНомерБалансовогоСчета()); // BankTransactionCode.Proprietary
	Выписка.Операции.Колонки.Добавить("Очередность",              Новый ОписаниеТипов("Число"));
	// TransactionDetails.RemittanceInformation
	// Стандарт национальной практики применения платежных сообщений ISO 20022:
	//  "информация, которая позволят осуществить квитовку, т.е. сверку платежа с позициями,
	//  для оплаты которых данный платеж предназначен, 
	//  например, коммерческими счетами в системе учета дебиторской задолженности"
	// ISO20022: 
	//  "information that enables the matching, that is reconciliation, of a payment 
	//  with the items that the payment is intended to settle, such as commercial invoices in an account receivable system"
	Выписка.Операции.Колонки.Добавить("НазначениеПлатежа", Новый ОписаниеТипов("Строка")); // может содержать разделители строки; каждая строка, ограниченная разделителем, должна иметь длину до 140 символов (по ISO), в то время как 383-П ограничивает общую длину строки 210 символами
	Выписка.Операции.Колонки.Добавить("СловаНазначениеПлатежа",  Новый ОписаниеТипов("Массив")); // Назначение платежа разложенное на слова по всем разделителям (см. ниже)
	Выписка.Операции.Колонки.Добавить("РазделителиИзНазначения", Новый ОписаниеТипов("Строка")); // Все разделители из Назначение платежа
	
	Выписка.Операции.Колонки.Добавить("СтрокаСекции", Новый ОписаниеТипов("Структура")); // Поддержка алгоритмов разбора выписки УНФ
	
	Выписка.Операции.Индексы.Добавить("Идентификатор");
	
	Возврат Выписка;
	
КонецФункции

Функция ВыпискаПоИдентификатору(Выписки, Идентификатор)
	
	Выписка = Выписки[Идентификатор];
	Если Выписка = Неопределено Тогда
		Выписка = НовыйВыпискаПоБанковскомуСчету(Идентификатор);
		Выписки.Вставить(Идентификатор, Выписка);
	КонецЕсли;
	
	Возврат Выписка;
	
КонецФункции

Функция ТипПоступилоСписано() Экспорт
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(9); // "Поступило" или "Списано" - CreditDebitIndicator - см. ВариантыПоступилоСписано()
КонецФункции

Функция ВариантыПоступилоСписано()
	
	ВариантыПоступилоСписано = Новый Массив;
	ВариантыПоступилоСписано.Добавить("Поступило");
	ВариантыПоступилоСписано.Добавить("Списано");
	
	Возврат ВариантыПоступилоСписано;
	
КонецФункции

#КонецОбласти

#Область ГруппировкаВыписки

// Данные из формата обмена 1С приближаем к общепринятому формату: 
// - группируем операции по выпискам
// - присваиваем формальные идентификаторы участникам операций
//
// Параметры:
//  ДанныеИзБанка				 - см. ОбменСБанкомВФормате1С.НовыйДанныеИзБанка()
//  УчастникиОпераций			 - см. ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций()
//  ИдентификаторыВсехДокументов - см. УчастникиОперацийЗаполнитьПоДаннымИзБанка()
//  Протокол					 - см. НовыйПротоколГруппировкиВыписки()
// 
// Возвращаемое значение:
//  Соответствие - Ключ: идентификатор; Значение: см. НовыйВыпискаПоБанковскомуСчету()
//
Функция ВыпискиПоБанковскимСчетам(ДанныеИзБанка, УчастникиОпераций, ИдентификаторыВсехДокументов, Протокол = Неопределено)
	
	Выписки         = Новый Соответствие; // Ключ - идентификатор; Значение - см. НовыйВыпискаПоБанковскомуСчету()
	СчетаВВыписке   = Новый Соответствие; // Ключ - номер счета (не идентификатор), значение - соответствие, которое содержит идентификаторы выписок с этим номером счета
	СчетаВЗаголовке = Новый Соответствие; // Ключ - номер счета (не идентификатор), значение - Истина
	
	// Сначала в заголовке прочитаем только номера счетов, а после того, как обработаем документы - и остальные данные.
	Для Каждого НомерСчета Из ДанныеИзБанка.Условия.РасчСчет Цикл
		СчетаВВыписке.Вставить(НомерСчета, Новый Соответствие);
		СчетаВЗаголовке.Вставить(НомерСчета, Истина);
	КонецЦикла;
	
	Для Каждого Остаток Из ДанныеИзБанка.Остатки Цикл
		СчетаВВыписке.Вставить(Остаток.РасчСчет, Новый Соответствие);
	КонецЦикла;
	
	// ДОКУМЕНТЫ
	
	Стороны = Новый Структура;
	Стороны.Вставить("Поступило", "Получатель");
	Стороны.Вставить("Списано",   "Плательщик");
	
	ПриоритетыАргументовПоступилоСписано = Новый Массив; // По возрастанию приоритета
	ПриоритетыАргументовПоступилоСписано.Добавить("СчетВВыписке");   // Наименее надежный, так как зависит от порядка следования документов в файле
	ПриоритетыАргументовПоступилоСписано.Добавить("ДатаИсполнения"); // Этот признак часто непонятен разработчикам банковских систем и они ошибаются. Поэтому приоритет низкий
	ПриоритетыАргументовПоступилоСписано.Добавить("РедактированиеОрганизацииДоступно");
	ПриоритетыАргументовПоступилоСписано.Добавить("ОрганизацияВИнформационнойБазе");
	ПриоритетыАргументовПоступилоСписано.Добавить("СчетВЗаголовке"); // Это достаточно надежный признак, но заполнен не всегда
	
	// Для сравнения наборов аргументов потребуются веса аргументов, выраженные степенями двойки
	ВесаАргументовПоступилоСписано = Новый Структура;
	Для ИндексАргумента = 0 По ПриоритетыАргументовПоступилоСписано.ВГраница() Цикл
		ИмяАргумента = ПриоритетыАргументовПоступилоСписано[ИндексАргумента];
		ВесАргумента = Pow(2, ИндексАргумента);
		ВесаАргументовПоступилоСписано.Вставить(ИмяАргумента, ВесАргумента);
	КонецЦикла;
	
	КешИдентификаторовБанковскихСчетов = Новый Соответствие;
	КешИдентификаторовОрганизаций = Новый Соответствие; // Ключ - строка, набор идентификаторов; Значение - Структура с ключами Организации (набор ссылок) и РедактированиеДоступно (Булево)
	ДоступныеОрганизации          = ИнтерфейсыВзаимодействияБРОВызовСервера.ВсеОрганизации();
		
	// Каждый документ соотнесем с одним или несколькими банковскими счетами нашей организации
	Для Каждого Документ Из ДанныеИзБанка.Документы Цикл
		
		ПоступилоСписано          = Новый Структура; // Является ли конкретный документ поступлением на наш счет или списанием с нашего счета
		АргументыПоступилоСписано = Новый Структура; // Аргументы в отношении конкретного документа: считать его поступлением или списанием
		ИдентификаторыДокумента   = ИдентификаторыВсехДокументов.Найти(Документ.Идентификатор, "Документ");
		
		СчетИзЗаголовка = "";
		Для Каждого Сторона Из Стороны Цикл
			
			ИмяПоступилоСписано = Сторона.Ключ;
			ИмяСтороны          = Сторона.Значение;
			
			ПоступилоСписано.Вставить(ИмяПоступилоСписано, Ложь);
			АргументыПоступилоСписано.Вставить(ИмяПоступилоСписано, Новый Структура);
			
			Счет = Документ[ИмяСтороны + "Счет"];
			
			Если Не ЗначениеЗаполнено(Счет) Тогда
				СчетИзЗаголовка = "";
				
				СчетВЗаголовке  = "";
				Если СчетаВЗаголовке.Количество() > 1 Тогда
					// В выписке несколько счетов, не можем загрузить документ по неизвестному счету.
					Продолжить;
				ИначеЕсли СчетаВЗаголовке.Количество() = 1 Тогда
					Для Каждого КлючИЗначение Из СчетаВЗаголовке Цикл
						СчетВЗаголовке = КлючИЗначение.Ключ;
					КонецЦикла;
				КонецЕсли;
				
				СчетВВыписке = "";
				Если СчетаВВыписке.Количество() > 1 Тогда
					// В выписке несколько счетов, не можем загрузить документ по неизвестному счету.
					Продолжить;
				ИначеЕсли СчетаВВыписке.Количество() = 1 Тогда
					Для Каждого КлючИЗначение Из СчетаВВыписке Цикл
						СчетВВыписке = КлючИЗначение.Ключ;
					КонецЦикла;
				КонецЕсли;
				
				Если ПустаяСтрока(СчетВВыписке) И ЗначениеЗаполнено(СчетВЗаголовке) Тогда
					СчетИзЗаголовка = СчетВЗаголовке;
				ИначеЕсли ПустаяСтрока(СчетВЗаголовке) И ЗначениеЗаполнено(СчетВВыписке) Тогда
					СчетИзЗаголовка = СчетВВыписке;
				ИначеЕсли СчетВВыписке = СчетВЗаголовке И ЗначениеЗаполнено(СчетВЗаголовке) Тогда
					СчетИзЗаголовка = СчетВЗаголовке;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
					// Не можем загрузить документ по неизвестному счету.
					Продолжить;
				КонецЕсли;
				
				Счет = СчетИзЗаголовка;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИдентификаторыДокумента[ИмяСтороны + "Счет"])
				И Не ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
				// Не можем загрузить документ по неизвестному счету
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Документ["Дата" + ИмяПоступилоСписано]) Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("ДатаИсполнения");
			ИначеЕсли ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
				// В операции не указан счет и нет соответствующей стороне даты исполнения.
				Продолжить;
			КонецЕсли;
			
			Если СчетаВЗаголовке[Счет] <> Неопределено Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("СчетВЗаголовке");
			КонецЕсли;
			
			Если СчетаВВыписке[Счет] <> Неопределено Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("СчетВВыписке");
			КонецЕсли;
			
			ИдентификаторыУчастникаОперации = ИдентификаторыДокумента[ИмяСтороны];
			
			ВсеИдентификаторыСтрокой = СтрСоединить(ИдентификаторыУчастникаОперации, "+");
			
			ОписаниеОрганизации = КешИдентификаторовОрганизаций[ВсеИдентификаторыСтрокой];
			Если ОписаниеОрганизации = Неопределено Тогда
				Отбор = Новый Структура("Тип", Тип("СправочникСсылка.Организации"));
				Организации = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылки(
					ИдентификаторыУчастникаОперации,
					УчастникиОпераций,
					Отбор);
				ОписаниеОрганизации = Новый Структура;
				ОписаниеОрганизации.Вставить("Организации",            Организации);
				ОписаниеОрганизации.Вставить("РедактированиеДоступно", Ложь);
				Если ЗначениеЗаполнено(Организации) Тогда
					Для Каждого КлючИЗначение Из Организации Цикл
						ОписаниеОрганизации.РедактированиеДоступно = (ДоступныеОрганизации.Найти(КлючИЗначение.Ключ) <> Неопределено);
						Если ОписаниеОрганизации.РедактированиеДоступно Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				КешИдентификаторовОрганизаций.Вставить(ВсеИдентификаторыСтрокой, ОписаниеОрганизации);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ОписаниеОрганизации.Организации) Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("ОрганизацияВИнформационнойБазе");
				Если ОписаниеОрганизации.РедактированиеДоступно Тогда
					АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("РедактированиеОрганизацииДоступно");
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(АргументыПоступилоСписано.Поступило) И Не ЗначениеЗаполнено(АргументыПоступилоСписано.Списано) Тогда
			ПоступилоСписано.Поступило = Истина;
		ИначеЕсли ЗначениеЗаполнено(АргументыПоступилоСписано.Списано) И Не ЗначениеЗаполнено(АргументыПоступилоСписано.Поступило) Тогда
			ПоступилоСписано.Списано = Истина;
		ИначеЕсли ЗначениеЗаполнено(АргументыПоступилоСписано.Списано) И ЗначениеЗаполнено(АргументыПоступилоСписано.Поступило) Тогда
			
			ВесаАргументов  = Новый Структура;
			МаксимальныйВес = 0;
			Для Каждого Сторона Из Стороны Цикл
				Вес = 0;
				Для Каждого ОписаниеАргумента Из АргументыПоступилоСписано[Сторона.Ключ] Цикл
					Вес = Вес + ВесаАргументовПоступилоСписано[ОписаниеАргумента.Ключ];
				КонецЦикла;
				ВесаАргументов.Вставить(Сторона.Ключ, Вес);
				МаксимальныйВес = Макс(МаксимальныйВес, Вес);
			КонецЦикла;
			
			Для Каждого Сторона Из Стороны Цикл
				ПоступилоСписано[Сторона.Ключ] = (ВесаАргументов[Сторона.Ключ] >= МаксимальныйВес);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ПоступилоСписано.Поступило И Не ПоступилоСписано.Списано Тогда
			// Такой документ не может быть включен в выписку
			Если Не АргументыПоступилоСписано.Поступило.Свойство("ДатаИсполнения")
				И Не АргументыПоступилоСписано.Списано.Свойство("ДатаИсполнения") Тогда
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Дата исполнения документа не указана'"));
			Иначе
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Документ не может быть включен в выписку ни по одному счету'"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Стороны Цикл
			
			ИмяПоступилоСписано = КлючИЗначение.Ключ;
			ИмяСтороны          = КлючИЗначение.Значение;
			
			Если Не ПоступилоСписано[ИмяПоступилоСписано] Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаИсполнения = Документ["Дата" + ИмяПоступилоСписано];
			Если Не ЗначениеЗаполнено(ДатаИсполнения) Тогда
				// Может быть не заполнена в файле
				ДатаИсполнения = Документ.Дата;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДатаИсполнения) Тогда
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Дата исполнения документа не указана'"));
				Продолжить;
			КонецЕсли;
			
			НомерСчета = Документ[ИмяСтороны + "Счет"];
			Если ПустаяСтрока(НомерСчета) Тогда
				Если ЗначениеЗаполнено(Документ["Дата" + ИмяПоступилоСписано]) И ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
					НомерСчета = СчетИзЗаголовка;
				Иначе
					ДополнитьПротоколГруппировкиВыписки(
						Протокол,
						ДанныеИзБанка,
						Документ.Идентификатор,
						НСтр("ru = 'Не указан номер счета, по которому проведена операция'"));
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ИдентификаторВыписки = ИдентификаторыДокумента[ИмяСтороны + "Счет"];
			Если ПустаяСтрока(ИдентификаторВыписки)
				И ЗначениеЗаполнено(Документ["Дата" + ИмяПоступилоСписано]) И ЗначениеЗаполнено(СчетИзЗаголовка) Тогда
				// Добавим идентификатор BBAN для счета из заголовка.
				БИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Документ[ИмяСтороны + "Реквизиты"], "БИК", "");
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоМеждународномуНомеруБанковскогоСчета(
					УчастникиОпераций,
					НомерСчета,
					БИК);
				БалансовыйСчет = "";
				Если Идентификатор = Неопределено Тогда
					Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
						УчастникиОпераций,
						НомерСчета,
						БИК,
						Ложь);
					Если ЗначениеЗаполнено(Идентификатор) Тогда
						ОписаниеИдентификатораBBAN = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
						Если ОписаниеИдентификатораBBAN <> Неопределено Тогда
							ОписаниеИдентификатораBBAN.Состав.Свойство("БалансовыйСчет", БалансовыйСчет);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Идентификатор <> Неопределено
					И СчетПозволяетИдентифицироватьКонтрагента(БалансовыйСчет, Ложь) Тогда
					ИдентификаторыУчастника = ИдентификаторыДокумента[ИмяСтороны];
					ИдентификаторыУчастника.Добавить(Идентификатор);
					ИдентификаторыДокумента[ИмяСтороны + "Счет"] = Идентификатор;
					ИдентификаторВыписки = Идентификатор;
				КонецЕсли;
			КонецЕсли;
			
			Выписка = ВыпискаПоИдентификатору(Выписки, ИдентификаторВыписки);
			
			// Дополним перечень счетов в выписке и их идентификаторов.
			ИдентификаторыСчетаВВыписке = СчетаВВыписке[НомерСчета];
			Если ИдентификаторыСчетаВВыписке = Неопределено Тогда
				ИдентификаторыСчетаВВыписке = Новый Соответствие;
				СчетаВВыписке.Вставить(НомерСчета, ИдентификаторыСчетаВВыписке);
			КонецЕсли;
			ИдентификаторыСчетаВВыписке.Вставить(ИдентификаторВыписки);
			
			ИмяПротивоположнойСтороны = ?(ИмяПоступилоСписано = "Поступило", Стороны.Списано, Стороны.Поступило);
			НомерСчетаПротивоположнойСтороны = Документ[ИмяПротивоположнойСтороны + "Счет"];
			РеквизитыПротивоположнойСтороны  = Документ[ИмяПротивоположнойСтороны + "Реквизиты"];
			ИмяНашейСтороны = ?(ИмяПоступилоСписано = "Поступило", Стороны.Поступило, Стороны.Списано);
			
			Если ИмяПоступилоСписано = "Списано" И ПоступилоСписано.Поступило Тогда
				РеквизитыНашейСтороны = Документ[ИмяНашейСтороны + "Реквизиты"];
				Если РеквизитыСчетаИдентичны(РеквизитыПротивоположнойСтороны, РеквизитыНашейСтороны) Тогда
					// Реквизиты счета плательщика и получателя совпадают - это или ошибка банка, или самоинкассация.
					// В этом случае документ должен попасть только в операцию поступления,
					// иначе он будет отражен в операциях дважды - и как поступление и как списание.
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Дополним выписку операцией
			Операция = Выписка.Операции.Добавить();
			ЗаполнитьЗначенияСвойств(Операция, Документ, "Идентификатор,Сумма,НазначениеПлатежа,ПлательщикРеквизиты,ПолучательРеквизиты");
			Операция.ПорядковыйНомерВФайле = ДанныеИзБанка.Документы.Индекс(Документ);
			Операция.ДатаДокумента  = Документ.Дата;
			Операция.НомерДокумента = Документ.Номер;
			Если СтрДлина(Документ.Номер) > СтрДлина(Операция.НомерДокумента) Тогда
				// В информационную базу нельзя записать такой длинный номер.
				// Так как наиболее точные разряды номера обычно справа, то номер обрежем слева.
				Операция.НомерДокумента = Прав(Документ.Номер, СтрДлина(Операция.НомерДокумента));
			КонецЕсли;
			
			Операция.ПоступилоСписано = ИмяПоступилоСписано;
			Операция.ДатаИсполнения   = ДатаИсполнения;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Операция.ПлательщикИдентификаторы, ИдентификаторыДокумента.Плательщик);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Операция.ПолучательИдентификаторы, ИдентификаторыДокумента.Получатель);
			
			Операция.РеквизитыПлатежаВБюджет = Документ.РеквизитыПлатежаВБюджет;
			Если Операция.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") 
				И ИдентификаторыДокумента.ТретьиЛица.Свойство("Налогоплательщик") Тогда
				Операция.РеквизитыПлатежаВБюджет.Налогоплательщик.Вставить("Идентификаторы", ИдентификаторыДокумента.ТретьиЛица.Налогоплательщик);
			КонецЕсли;
			Если Операция.РеквизитыПлатежаВБюджет.Свойство("Должник") 
				И ИдентификаторыДокумента.ТретьиЛица.Свойство("Должник") Тогда
				Операция.РеквизитыПлатежаВБюджет.Должник.Вставить("Идентификаторы", ИдентификаторыДокумента.ТретьиЛица.Должник);
			КонецЕсли;
			
			Операция.ШифрОперации          = Документ.ВидОплаты;
			Операция.Очередность           = Документ.Очередность;
			Операция.НомерСчетаКонтрагента = НомерСчетаПротивоположнойСтороны;
			
			// Балансовый счет - определяем только, если номер счета контрагента - по правилам ЦБР
			Если БанковскиеПравила.СтрокаСоответствуетФорматуБанковскогоСчета(НомерСчетаПротивоположнойСтороны) Тогда
				
				Если Операция[ИмяПротивоположнойСтороны + "Идентификаторы"].Количество() Тогда
					ИспользуетсяБанкДляРасчетов = Ложь;
					Если РеквизитыПротивоположнойСтороны.Свойство("РасчСчет") Тогда
						ИспользуетсяБанкДляРасчетов = НомерСчетаПротивоположнойСтороны <> РеквизитыПротивоположнойСтороны.РасчСчет;
					КонецЕсли;
					
					Если ИспользуетсяБанкДляРасчетов Тогда
						НомерСчетаПротивоположнойСтороныСоответствуетБИК = Не РеквизитыПротивоположнойСтороны.Свойство("БИК")
							Или БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(
								РеквизитыПротивоположнойСтороны.РасчСчет,
								РеквизитыПротивоположнойСтороны.БИК,
								Истина);
						Если НомерСчетаПротивоположнойСтороныСоответствуетБИК
							Или БанковскиеПравила.ЭтоРублевыйСчет(РеквизитыПротивоположнойСтороны.РасчСчет) Тогда
							БалансовыйСчетБанкаДляРасчетов = БанковскиеПравила.БалансовыйСчет(РеквизитыПротивоположнойСтороны.РасчСчет);
							Если Не БанковскиеПравила.ЭтоКорсчетБанкаНерезидента(БалансовыйСчетБанкаДляРасчетов) Тогда
								Операция.БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерСчетаПротивоположнойСтороны);
							КонецЕсли;
						КонецЕсли;
					Иначе
						НомерСчетаПротивоположнойСтороныСоответствуетБИК = Не РеквизитыПротивоположнойСтороны.Свойство("БИК")
							Или БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(
								НомерСчетаПротивоположнойСтороны,
								РеквизитыПротивоположнойСтороны.БИК,
								Истина);
						Если НомерСчетаПротивоположнойСтороныСоответствуетБИК
							Или БанковскиеПравила.ЭтоРублевыйСчет(НомерСчетаПротивоположнойСтороны) Тогда
							Операция.БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерСчетаПротивоположнойСтороны);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ЭтоФизическоеЛицо = Ложь;
			Для Каждого Идентификатор Из Операция[ИмяПротивоположнойСтороны + "Идентификаторы"] Цикл
				// При возврате по корпоративной карте плательщиком должно быть юр.лицо (банк).
				Если ИмяПротивоположнойСтороны = "Плательщик"
					И ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторФизическогоЛица(Идентификатор, УчастникиОпераций) Тогда
					ЭтоФизическоеЛицо = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЭтоФизическоеЛицо И ЭтоОперацияПоКорпоративнойКарте(Операция) Тогда
				ОписаниеБанковскогоСчета = КешИдентификаторовБанковскихСчетов[ВсеИдентификаторыСтрокой];
				Если ОписаниеБанковскогоСчета = Неопределено Тогда
					Для Каждого КлючИЗначение Из ОписаниеОрганизации.Организации Цикл
						Организация = КлючИЗначение.Ключ;
					КонецЦикла;
					
					ОтборБанковскийСчет = Новый Структура();
					ОтборБанковскийСчет.Вставить("Тип", Тип("СправочникСсылка.БанковскиеСчета"));
					ОтборБанковскийСчет.Вставить("Владелец", Организация);
					БанковскиеСчета = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылки(
						ИдентификаторыУчастникаОперации,
						УчастникиОпераций,
						ОтборБанковскийСчет);
					ОписаниеБанковскогоСчета = Новый Структура;
					ОписаниеБанковскогоСчета.Вставить("БанковскийСчет", БанковскиеСчета);
					ОписаниеБанковскогоСчета.Вставить("СчетКорпоративныхРасчетов", Ложь);
					ОписаниеБанковскогоСчета.Вставить("СчетУчета", ПланыСчетов.Управленческий.ПустаяСсылка());
					ОписаниеБанковскогоСчета.Вставить("КорпоративныеКартыПодотчетныхЛиц", Новый Соответствие);
					Если ЗначениеЗаполнено(БанковскиеСчета) Тогда
						Для Каждого КлючИЗначение Из БанковскиеСчета Цикл
							БанковскийСчет = КлючИЗначение.Ключ;
							ОписаниеБанковскогоСчета.СчетКорпоративныхРасчетов = КлючИЗначение.Значение.ОписаниеСсылки.СчетКорпоративныхРасчетов;
							ОписаниеБанковскогоСчета.СчетУчета = КлючИЗначение.Значение.ОписаниеСсылки.СчетБанк;
							ОписаниеБанковскогоСчета.КорпоративныеКартыПодотчетныхЛиц = КорпоративныеКартыПодотчетныхЛиц(
								Организация, БанковскийСчет, ОписаниеБанковскогоСчета.СчетКорпоративныхРасчетов);
							Прервать;
						КонецЦикла;
					КонецЕсли;
					КешИдентификаторовБанковскихСчетов.Вставить(ВсеИдентификаторыСтрокой, ОписаниеБанковскогоСчета);
				КонецЕсли;
				
				КоличествоКарт = ОписаниеБанковскогоСчета.КорпоративныеКартыПодотчетныхЛиц.Количество();
				Если ОписаниеБанковскогоСчета.СчетКорпоративныхРасчетов И КоличествоКарт > 0 Тогда
					Если ЭтоОперацияПоКорпоративнойКарте(Операция, ОписаниеБанковскогоСчета) Тогда // выше уже проверяли, но без учета данных банковского счета
						Операция[ИмяПротивоположнойСтороны + "Идентификаторы"].Очистить();
					КонецЕсли;
					
					НайденныйНомерКарты = "";
					ОднаКартаНаКарточномСчете = Ложь;
					Если КоличествоКарт = 1
						И ОписаниеБанковскогоСчета.СчетБанк = ПланыСчетов.Управленческий.Банк Тогда
						ОднаКартаНаКарточномСчете = Истина;
					КонецЕсли;
					
					Если ОднаКартаНаКарточномСчете Тогда
						// Если задана одна карта на карточном счете, то дополнительно ничего не уточняем
						// - используем ее и физ.лицо, которому она выдана.
						Для каждого КлючИЗначение Из ОписаниеБанковскогоСчета.КорпоративныеКартыПодотчетныхЛиц Цикл
							НайденныйНомерКарты = КлючИЗначение.Ключ;
							ПодотчетноеЛицо     = КлючИЗначение.Значение;
						КонецЦикла;
					Иначе
						// К банковскому счету подключено несколько карт, выданных подотчетным лицам.
						// Уточним в Назначение платежа по какой карте прошла операция.
						МаксПриоритет = 0;
						Для Каждого КартаПодотчетногоЛица Из ОписаниеБанковскогоСчета.КорпоративныеКартыПодотчетныхЛиц Цикл
							НомерКарты = КартаПодотчетногоЛица.Ключ;
							Приоритет = ПриоритетПоискаНомерКартыВНазначениеПлатежа(НомерКарты, Операция.НазначениеПлатежа);
							Если Приоритет > МаксПриоритет Тогда
								ПодотчетноеЛицо     = КартаПодотчетногоЛица.Значение;
								НайденныйНомерКарты = НомерКарты;
								МаксПриоритет = Приоритет;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если Не ПустаяСтрока(НайденныйНомерКарты) Тогда
						Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруКарты(
							УчастникиОпераций,
							НайденныйНомерКарты);
						Если Идентификатор <> Неопределено Тогда
							Идентификаторы = Операция[ИмяПротивоположнойСтороны + "Идентификаторы"];
							Идентификаторы.Добавить(Идентификатор);
							ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
								Идентификатор, УчастникиОпераций);
							ИдентификацияУчастниковБанковскихОпераций.ДополнитьУчастникиОперацийСсылкой(
								УчастникиОпераций, ПодотчетноеЛицо, ОписаниеИдентификатора, Идентификаторы);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// Расширим период выписки
			РасширитьПериод(Выписка.НачалоПериода, Выписка.КонецПериода, Операция.ДатаИсполнения);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// В файле могут быть указаны номера счета как с БИК, так и без БИК.
	// В результате будет определено несколько выписок.
	// Объединим их.
	Для Каждого СчетВВыписке Из СчетаВВыписке Цикл
		
		Если СчетВВыписке.Значение.Количество() <> 2 Тогда
			// Объединить можем только один точный с одним неточным.
			Продолжить;
		КонецЕсли;
		
		ЧтоЗаменяем   = Неопределено;
		НаЧтоЗаменяем = Неопределено;
		Для Каждого ИдентификаторВыписки Из СчетВВыписке.Значение Цикл
			
			ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				ИдентификаторВыписки.Ключ,
				УчастникиОпераций);
				
			Если ОписаниеИдентификатора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			Если ОписаниеИдентификатора.Точный Тогда
				НаЧтоЗаменяем = ОписаниеИдентификатора;
			Иначе
				ЧтоЗаменяем   = ОписаниеИдентификатора;
			КонецЕсли;
					
		КонецЦикла;
		
		Если ЧтоЗаменяем = Неопределено Или НаЧтоЗаменяем = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыпискаОбъединенная = Выписки[НаЧтоЗаменяем.Идентификатор];
		Если ВыпискаОбъединенная = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыпискаКУдалению = Выписки[ЧтоЗаменяем.Идентификатор];
		Если ВыпискаКУдалению = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		БИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаЧтоЗаменяем.Состав, "БИК", ""); // Этим БИКом попробуем дополнить неточные идентификаторы
		
		ТребуетсяУпорядочить = Ложь;
		
		КоличествоОпераций = ВыпискаКУдалению.Операции.Количество();
		Для НомерСКонца = 1 По КоличествоОпераций Цикл
			
			ИндексОперации = КоличествоОпераций - НомерСКонца;
			Операция = ВыпискаКУдалению.Операции[ИндексОперации];
			
			Если ВыпискаОбъединенная.Операции.Найти(Операция.Идентификатор, "Идентификатор") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Заменим на более точные идентификаторы счета, по которому выписка
			Для Каждого Сторона Из Стороны Цикл
				
				ИдентификаторыСтороны = Операция[Сторона.Значение + "Идентификаторы"];
				ИндексИдентификатора = ИдентификаторыСтороны.Найти(ЧтоЗаменяем.Идентификатор);
				
				Если ИндексИдентификатора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторыСтороны[ИндексИдентификатора] = НаЧтоЗаменяем.Идентификатор;
				
			КонецЦикла;
			
			РасширитьПериод(ВыпискаОбъединенная.НачалоПериода, ВыпискаОбъединенная.КонецПериода, Операция.ДатаИсполнения);
			ЗаполнитьЗначенияСвойств(ВыпискаОбъединенная.Операции.Добавить(), Операция);
			ВыпискаКУдалению.Операции.Удалить(Операция);
			
			ТребуетсяУпорядочить = Истина; // Добавлением в конец нарушили порядок следования операций в файле
			
		КонецЦикла;
		
		Если ВыпискаКУдалению.Операции.Количество() = 0 Тогда
			Выписки.Удалить(ЧтоЗаменяем.Идентификатор);
			СчетВВыписке.Значение.Удалить(ЧтоЗаменяем.Идентификатор);
		КонецЕсли;
		
		Если ТребуетсяУпорядочить Тогда
			ВыпискаОбъединенная.Операции.Сортировать("ПорядковыйНомерВФайле");
		КонецЕсли;
		
	КонецЦикла;
	
	// Если операция внутри банка, то может быть не указан БИК в реквизитах корреспондирующего счета.
	// В таком случае попробуем дополнить идентификатор счета БИКом владельца счета.
	Для Каждого Выписка Из Выписки Цикл
		ОписаниеИдентификатораСчетаВыписки = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(Выписка.Ключ, УчастникиОпераций);
		Если ОписаниеИдентификатораСчетаВыписки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ОписаниеИдентификатораСчетаВыписки.Точный Тогда
			Продолжить;
		КонецЕсли;
		БИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеИдентификатораСчетаВыписки.Состав, "БИК", ""); // Этим БИКом попробуем дополнить неточные идентификаторы
		
		Для Каждого Операция Из Выписка.Значение.Операции Цикл
			
			Для Каждого Сторона Из Стороны Цикл
				
				ИдентификаторыСтороны = Операция[Сторона.Значение + "Идентификаторы"];
				
				Для Каждого Идентификатор Из ИдентификаторыСтороны Цикл
					
					ТочныйИдентификатор = ИдентификацияУчастниковБанковскихОпераций.ДополнитьИдентификаторПоНомеруБанковскогоСчета(
						Идентификатор,
						БИК,
						УчастникиОпераций);
					Если ТочныйИдентификатор <> Неопределено 
						И ИдентификаторыСтороны.Найти(ТочныйИдентификатор) = Неопределено Тогда
						ИдентификаторыСтороны.Добавить(ТочныйИдентификатор);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// ОСТАТКИ
	Для Каждого Остаток Из ДанныеИзБанка.Остатки Цикл
		
		НомерСчета = Остаток.РасчСчет;
		
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыСчета = СчетаВВыписке[НомерСчета];
		Если ИдентификаторыСчета = Неопределено Тогда
			
			ИдентификаторВыписки = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
				УчастникиОпераций,
				НомерСчета,
				Неопределено);
			
			ИдентификаторыСчета = Новый Соответствие;
			ИдентификаторыСчета.Вставить(ИдентификаторВыписки);
			СчетаВВыписке.Вставить(НомерСчета, ИдентификаторыСчета);
			
		КонецЕсли;
		
		Для Каждого ИдентификаторВыпискиКлючИЗначение Из ИдентификаторыСчета Цикл
		
			Выписка = ВыпискаПоИдентификатору(Выписки, ИдентификаторВыпискиКлючИЗначение.Ключ);
			
			Если ЗначениеЗаполнено(Остаток.ДатаНачала) Тогда
				Сальдо = Выписка.Сальдо.Добавить();
				Сальдо.Дата  = Остаток.ДатаНачала;
				Сальдо.Сумма = Остаток.НачальныйОстаток;
			КонецЕсли;
			
			Сальдо = Выписка.Сальдо.Добавить();
			// Дата конца может быть не заполнена в файле.
			// В этом случае позже заменим пустую дату, на дату окончания выписки.
			Если ЗначениеЗаполнено(Остаток.ДатаКонца) Тогда
				Сальдо.Дата = КонецДня(Остаток.ДатаКонца) + 1;
			КонецЕсли;
			Сальдо.Сумма = Остаток.КонечныйОстаток;
		
			Выписка.ВсегоПоступило = Выписка.ВсегоПоступило + Остаток.ВсегоПоступило;
			Выписка.ВсегоСписано   = Выписка.ВсегоСписано   + Остаток.ВсегоСписано;
			
			РасширитьПериод(Выписка.НачалоПериода, Выписка.КонецПериода, Остаток.ДатаНачала);
			РасширитьПериод(Выписка.НачалоПериода, Выписка.КонецПериода, Остаток.ДатаКонца);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Выписка Из Выписки Цикл
		СтруктураВыписки = Выписка.Значение;
		Если НЕ СтруктураВыписки.Свойство("Сальдо") Тогда
			Продолжить;
		КонецЕсли;
		// Заменим пустую дату, на дату окончания выписки.
		Для Каждого СтрокаСальдо Из СтруктураВыписки.Сальдо.НайтиСтроки(Новый Структура("Дата", '00010101')) Цикл
			СтрокаСальдо.Дата = СтруктураВыписки.КонецПериода;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Выписки;
	
КонецФункции

Функция РеквизитыСчетаИдентичны(РеквизитыПротивоположнойСтороны, РеквизитыНашейСтороны)
	
	Результат = Истина;
	
	Для Каждого ЭлементРеквизитовСчетаУчастника Из ОбменСБанкомВФормате1С.ЭлементыРеквизитовСчетаУчастника() Цикл
		РеквизитСчетаПротивоположнойСтороны =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыПротивоположнойСтороны, ЭлементРеквизитовСчетаУчастника);
		РеквизитСчетаНашейСтороны =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыНашейСтороны, ЭлементРеквизитовСчетаУчастника);
		Если ЗначениеЗаполнено(РеквизитСчетаПротивоположнойСтороны)
			И ЗначениеЗаполнено(РеквизитСчетаНашейСтороны)
			И РеквизитСчетаПротивоположнойСтороны <> РеквизитСчетаНашейСтороны Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура РасширитьПериод(НачалоПериода, КонецПериода, Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоДня = НачалоДня(Дата);
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = НачалоДня;
	Иначе
		НачалоПериода = Мин(НачалоПериода, НачалоДня);
	КонецЕсли;
	
	КонецДня  = КонецДня(Дата);
	
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = КонецДня;
	Иначе
		КонецПериода = Макс(КонецПериода, КонецДня);
	КонецЕсли;
	
КонецПроцедуры

// "Плательщик" или "Получатель"
Функция СторонаКонтрагента(ПоступилоСписано)
	
	Если ПоступилоСписано = "Поступило" Тогда
		Возврат "Плательщик";
	Иначе
		Возврат "Получатель";
	КонецЕсли;
	
КонецФункции

Функция НовыйПротоколГруппировкиВыписки()
	
	Протокол = Новый ТаблицаЗначений;
	Протокол.Колонки.Добавить("Идентификатор",   ТипИдентификатор());
	Протокол.Колонки.Добавить("КраткоеОписание", Новый ОписаниеТипов("Строка"));
	Протокол.Колонки.Добавить("ПолноеОписание",  Новый ОписаниеТипов("Строка"));
	Возврат Протокол;
	
КонецФункции

Процедура ДополнитьПротоколГруппировкиВыписки(Протокол, ДанныеИзБанка, ИдентификаторДокумента, ОписаниеПроблемы)
	
	Документ = ДанныеИзБанка.Документы.Найти(ИдентификаторДокумента, "Идентификатор");
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = Новый Массив;
	Если ЗначениеЗаполнено(Документ.Номер) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'номер %1'"), Документ.Номер));
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ.Дата) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), Формат(Документ.Дата, "ДЛФ=D")));
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ.Сумма) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'на сумму %1'"), Документ.Сумма));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РеквизитыДокумента) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'порядковый номер %1'"), Документ.Идентификатор));
	КонецЕсли;
	РеквизитыДокумента = СтрСоединить(РеквизитыДокумента, " ");
	
	ПолноеОписание = СтрШаблон(НСтр("ru = 'Пропущен документ %1. %2'"), РеквизитыДокумента, ОписаниеПроблемы);
	
	Запись = Протокол.Добавить();
	Запись.Идентификатор   = ИдентификаторДокумента;
	Запись.КраткоеОписание = ОписаниеПроблемы;
	Запись.ПолноеОписание  = ПолноеОписание;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

Функция НовыйНастройкиОбменСБанком() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("СозданиеДокументов",            НовыйНастройкиСозданияДокументов());
	Настройки.Вставить("ЗаполнениеНовыхЭлементов",      Новый Соответствие); // Ключ - Тип ссылки; Значение - структура, содержащая значения заполнения
	Настройки.Вставить("Кодировка",                     Неопределено);       // Кодировка файла
	
	Возврат Настройки;
	
КонецФункции

// Заполняет Настройки переданными данными, обеспечивая целостность настроек.
//
// Параметры:
//  Настройки		 - см. НовыйНастройкиОбменСБанком()
//  ДанныеЗаполнения - см. НовыйНастройкиОбменСБанком(). Допускается передавать и другие значения (коллекции).
// 
// Возвращаемое значение:
//  Булево - Истина, если что-то заполнили; Ложь, если ДанныеЗаполнения пустые или не пригодны для заполнения.
//
Функция ЗаполнитьНастройкиОбменСБанком(Настройки, ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Или ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтоТоЗаполнили = Ложь;
	
	Если ДанныеЗаполнения.Свойство("СозданиеДокументов")
		И ТипЗнч(ДанныеЗаполнения.СозданиеДокументов) = Тип("Соответствие") Тогда
		
		Для Каждого Настройка Из Настройки.СозданиеДокументов Цикл
			ЗначениеСохраненнойНастройки = ДанныеЗаполнения.СозданиеДокументов[Настройка.Ключ];
			Если ТипЗнч(ЗначениеСохраненнойНастройки) <> Тип("Структура")
				Или Не ЗначениеЗаполнено(ЗначениеСохраненнойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Настройка.Значение, ЗначениеСохраненнойНастройки);
			ЧтоТоЗаполнили = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЗаполнениеНовыхЭлементов")
		И ТипЗнч(ДанныеЗаполнения.ЗаполнениеНовыхЭлементов) = Тип("Соответствие") Тогда
		
		Для Каждого СохраненнаяНастройка Из ДанныеЗаполнения.ЗаполнениеНовыхЭлементов Цикл
			Если ТипЗнч(СохраненнаяНастройка.Значение) <> Тип("Структура") 
				Или Не ЗначениеЗаполнено(СохраненнаяНастройка.Значение) Тогда
				Продолжить;
			КонецЕсли;
			Настройки.ЗаполнениеНовыхЭлементов.Вставить(СохраненнаяНастройка.Ключ, СохраненнаяНастройка.Значение);
		КонецЦикла;
		
		ЧтоТоЗаполнили = Истина;
		
	КонецЕсли;
	
	Возврат ЧтоТоЗаполнили;
	
КонецФункции

Функция НовыйНастройкиСозданияДокументов()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить(Тип("ДокументСсылка.РасходСоСчета"),   НовыйНастройкаСозданияДокументов());
	Настройки.Вставить(Тип("ДокументСсылка.ПоступлениеНаСчет"), НовыйНастройкаСозданияДокументов());
	
	Возврат Настройки;
	
КонецФункции

Функция НовыйНастройкаСозданияДокументов()
	
	Настройка = Новый Структура;
	Настройка.Вставить("ПроводитьДокумент", Истина);
	Возврат Настройка;
	
КонецФункции

Функция ЗначениеНастройкиСозданияДокументов(Настройки, Имя, ТипДокумента)
	
	Настройка = Настройки.СозданиеДокументов[ТипДокумента];
	Если Настройка = Неопределено Тогда
		Настройка = НовыйНастройкаСозданияДокументов();
	КонецЕсли;
	
	ЗначениеНастройки = Настройка[Имя];
	
	Возврат ЗначениеНастройки;
	
КонецФункции

#КонецОбласти

#Область ИдентификацияУчастниковОперации

Функция ЗаполнитьИдентификаторыУчастниковОперацийПоДаннымИзБанка(УчастникиОпераций, ДанныеИзБанка)
	
	// Содержит идентификаторы участников операций, информация о которых есть в секции Документы данных из банка.
	ИдентификаторыУчастников = Новый ТаблицаЗначений;
	ИдентификаторыУчастников.Колонки.Добавить("Документ",       ТипИдентификатор()); // Идентификатор документа
	ИдентификаторыУчастников.Колонки.Добавить("Плательщик",     Новый ОписаниеТипов("Массив")); // Массив строк - идентификаторов
	ИдентификаторыУчастников.Колонки.Добавить("Получатель",     Новый ОписаниеТипов("Массив")); // Массив строк - идентификаторов
	ИдентификаторыУчастников.Колонки.Добавить("ПлательщикСчет", Новый ОписаниеТипов("Строка")); // Идентификатор
	ИдентификаторыУчастников.Колонки.Добавить("ПолучательСчет", Новый ОписаниеТипов("Строка")); // Идентификатор
	ИдентификаторыУчастников.Колонки.Добавить("ТретьиЛица",     Новый ОписаниеТипов("Структура")); // Ключ - тип третьего лица; Значение - массив идентификаторов
	ИдентификаторыУчастников.Индексы.Добавить("Документ");
	
	Стороны = Новый Массив;
	Стороны.Добавить("Плательщик");// Порядок важен для УплатаНалогаТретьегоЛица
	Стороны.Добавить("Получатель");
	
	Для Каждого Документ Из ДанныеИзБанка.Документы Цикл
		
		ИдентификаторыДокумента = ИдентификаторыУчастников.Добавить();
		ИдентификаторыДокумента.Документ = Документ.Идентификатор;
		
		Для Каждого Сторона Из Стороны Цикл
			
			Счет            = Документ[Сторона + "Счет"];
			ИНН             = Документ[Сторона + "ИНН"];
			ДругиеРеквизиты = Документ[Сторона + "Реквизиты"];
			
			ИдентификаторыУчастника = ИдентификаторыДокумента[Сторона];
			
			// Разберем наименование
			Наименование = "";
			Если ДругиеРеквизиты.Свойство("Наименование") Тогда
				Наименование = ДругиеРеквизиты.Наименование;
			КонецЕсли;
			
			ИдентификаторыФизическогоЛица = ИдентификаторыФизическогоЛицаИзНаименования(Наименование, ИНН, Счет);
			Если ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо Тогда
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
					УчастникиОпераций,
					ИдентификаторыФизическогоЛица.Наименование);
				Если Идентификатор <> Неопределено Тогда
					ИдентификаторыУчастника.Добавить(Идентификатор);
				КонецЕсли;
				
				Если ИдентификаторыФизическогоЛица.ВалидныйИННФизическогоЛица Тогда
					Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, ИНН, "");
					Если Идентификатор <> Неопределено Тогда
						ИдентификаторыУчастника.Добавить(Идентификатор);
					КонецЕсли;
				КонецЕсли;
			Иначе
				// TXID (Налоговый идентификатор)
				КПП = ?(ДругиеРеквизиты.Свойство("КПП"), ДругиеРеквизиты.КПП, "");
				КППСоответствуетТребованиямФормата =
					ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямФорматаКПП(КПП, Истина);
				Если Не КППСоответствуетТребованиямФормата.СоответствуетТребованиям Тогда
					КПП = "";
				КонецЕсли;
				
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, ИНН, КПП);
				Если Идентификатор <> Неопределено Тогда
					ИдентификаторыУчастника.Добавить(Идентификатор);
				КонецЕсли;
			КонецЕсли;
			
			// BBAN (Basic Bank Account Number) или IBAN (International Bank Account Number)
			БИК = ?(ДругиеРеквизиты.Свойство("БИК"), ДругиеРеквизиты.БИК, "");
			Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоМеждународномуНомеруБанковскогоСчета(
				УчастникиОпераций,
				Счет,
				БИК);
			БалансовыйСчет = "";
			Если Идентификатор = Неопределено Тогда
				// Попробуем BBAN
				// Расчеты могут вестись через корреспондентский счет, открытый в другой кредитной организации
				ИспользуетсяБанкДляРасчетов = (ДругиеРеквизиты.Свойство("РасчСчет")
					И Не ПустаяСтрока(ДругиеРеквизиты.РасчСчет)
					И ДругиеРеквизиты.РасчСчет <> Счет);
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
					УчастникиОпераций,
					Счет,
					БИК,
					ИспользуетсяБанкДляРасчетов);
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					ОписаниеИдентификатораBBAN = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
					Если ОписаниеИдентификатораBBAN <> Неопределено Тогда
						ОписаниеИдентификатораBBAN.Состав.Свойство("БалансовыйСчет", БалансовыйСчет);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Здесь Идентификатор может быть как BBAN, так и IBAN
			Если Идентификатор <> Неопределено
				И (СчетПозволяетИдентифицироватьКонтрагента(БалансовыйСчет, ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо)
					Или БанковскиеПравила.ЭтоКазначейскийСчет(Счет)) Тогда
				ИдентификаторыУчастника.Добавить(Идентификатор);
				ИдентификаторыДокумента[Сторона + "Счет"] = Идентификатор;
			КонецЕсли;
			
			Если Не ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо // Это может быть и физическое лицо, но из наименования это не удалось определить
				И ЗначениеЗаполнено(БалансовыйСчет) Тогда
				
				Если БанковскиеПравила.ЭтоСчетВнутрибанковскихОпераций(БалансовыйСчет)
					Или БанковскиеПравила.ЭтоСчетРасчетовСБанком(БалансовыйСчет)
					Или БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(БалансовыйСчет) Тогда
					
					// Банк
					
					Если Не ЗначениеЗаполнено(ИНН) Тогда
					
						// BKNM (Наименование банка)
						Банк = ?(ДругиеРеквизиты.Свойство("Банк"), ДругиеРеквизиты.Банк, "");
						Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНаименованиюБанка(УчастникиОпераций, Банк, Наименование);
						
						Если Идентификатор <> Неопределено Тогда
							ИдентификаторыУчастника.Добавить(Идентификатор);
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет)
					Или БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет) Тогда
					
					// Физическое лицо
					
					Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
						УчастникиОпераций,
						Наименование);
					Если Идентификатор <> Неопределено Тогда
						ИдентификаторыУчастника.Добавить(Идентификатор);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			// TXZN (Единица административно-территориального деления, к которой относится налоговый платеж) Национальная
			//     практика: ОКАТО (ОКТМО)
			Если Сторона = "Получатель"
				И Документ.РеквизитыПлатежаВБюджет.Свойство("ОКАТО")
				И ПлатежиВБюджетКлиентСервер.ЭтоКодОКТМО(Документ.РеквизитыПлатежаВБюджет.ОКАТО) Тогда
				
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоОКТМО(УчастникиОпераций, Документ.РеквизитыПлатежаВБюджет.ОКАТО);
				
				Если Идентификатор <> Неопределено Тогда
					ИдентификаторыУчастника.Добавить(Идентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
			// Здесь же может быть описано получение идентификаторов по другим данным.
			// Например, получателя можно идентифицировать по номеру карты, указанному в назначении платежа,
			// номеру счета физ. лица, указанному в наименовании или назначении платежа и другим признакам.
			
		КонецЦикла;
		
		// Третьи стороны
		// TXID (Налоговый идентификатор)
		Если Документ.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") Тогда
			
			Налогоплательщик = Документ.РеквизитыПлатежаВБюджет.Налогоплательщик;
			КПП = ?(Налогоплательщик.Свойство("КПП"), Налогоплательщик.КПП, "");
			Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, Налогоплательщик.ИНН, КПП);
			
			ИдентификаторыДокумента.ТретьиЛица.Вставить("Налогоплательщик", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор));
			
		КонецЕсли;
		
		Если Документ.РеквизитыПлатежаВБюджет.Свойство("Должник") Тогда
			
			Должник = Документ.РеквизитыПлатежаВБюджет.Должник;
			Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, Должник.ИНН, "");
			
			ИдентификаторыДокумента.ТретьиЛица.Вставить("Должник", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор));
			
		КонецЕсли;
	КонецЦикла;
	
	// Кроме секции Документы в ДанныеИзБанка идентификаторы содержатся в заголовочной части.
	// Их также следует поместить в УчастникиОпераций, чтобы найти для них соответствия в информационной базе.
	// УСЛОВИЯ
	Для Каждого НомерБанковскогоСчета Из ДанныеИзБанка.Условия.РасчСчет Цикл
		ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
			УчастникиОпераций,
			НомерБанковскогоСчета,
			Неопределено);
	КонецЦикла;
	
	// ОСТАТКИ
	Для Каждого ДанныеОбОстатках Из ДанныеИзБанка.Остатки Цикл
		ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
			УчастникиОпераций,
			ДанныеОбОстатках.РасчСчет,
			Неопределено);
	КонецЦикла;
	
	Возврат ИдентификаторыУчастников;
	
КонецФункции

Функция СчетПозволяетИдентифицироватьКонтрагента(БалансовыйСчет, ЭтоФизическоеЛицо)
	
	Если Не ЗначениеЗаполнено(БалансовыйСчет) Тогда
		// Предполагаем, что это IBAN - он всегда позволяет идентифицировать контрагента
		Возврат Истина;
	КонецЕсли;
	
	Если Не БанковскиеПравила.СчетПозволяетИдентифицироватьКонтрагента(БалансовыйСчет)
		И Не БанковскиеПравила.ЭтоСчетЮридическогоЛица(БалансовыйСчет) // Требуется учитывать счета гос.органов.
		И Не БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов(БалансовыйСчет) Тогда // Требуется учитывать, если платеж не от физ.лица.
		Возврат Ложь;
	КонецЕсли;
	
	// Идентификацию контрагента по указанному в выписке номеру счета плательщика не производим,
	// если это счет незавершенных расчетов банка,
	// а из наименования плательщика смогли выделить наименование физлица
	// (тогда это внутренний счет банка, а не счет контрагента)
	Если ЭтоФизическоеЛицо И БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов(БалансовыйСчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Приложение 1 к Положению Банка России от 19 июня 2012 года N 383-П
// "О правилах осуществления перевода денежных средств"
// При переводе денежных средств по банковскому счету ... 
// в реквизите "Плательщик" после Ф.И.О. физического лица ...
// - адрес места жительства (регистрации) или места пребывания.
// Для выделения информации об адресе места нахождения,
// адресе места жительства (регистрации) или места пребывания до и после адреса используется символ "//".
// При переводе денежных средств без открытия банковского счета указываются полное или сокращенное наименование
// кредитной организации, филиала кредитной организации - отправителя распоряжения и информация о плательщике -
// физическом лице Для выделения информации о плательщике - физическом лице используется символ "//".
// После указания установленной настоящей графой соответствующей информации в реквизите "Плательщик" 
// может указываться в соответствии с законодательством или договором, 
// в том числе договором с получателем средств, договором доверительного управления, 
// дополнительная информация, обеспечивающая возможность установить сведения о плательщике, 
// при этом для их выделения используется символ "//"
// <конец цитаты из нормативного документа>
//
// На практике "//" используются для указания информации о физическом лице.
// Хотя, в теории "//" могут использоваться и для возможности установить сведения о других плательщиках,
// но о такой практике неизвестно.
// Поддерживаем варианты:
// - ИНН нет + "//" - отделен адрес от наименования (имени)
// - ИНН 12 символов + "//" - отделен адрес от наименования (имени)
// - ИНН 10 символов + "//" - отделено имя от названия банка


Функция УдалитьТекстПослеРазделителя(Наименование)
	
	Разделитель = "//";
	ПозицияРазделителя = СтрНайти(Наименование, Разделитель);
	Если ПозицияРазделителя > 0 Тогда
		Наименование = СокрП(Сред(Наименование, 1, ПозицияРазделителя - 1));
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Функция ИдентификаторыФизическогоЛицаИзНаименования(Наименование, ИНН, Счет)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоФизическоеЛицо",           Ложь);
	Результат.Вставить("Наименование",                Наименование);
	Результат.Вставить("Адрес",                       "");
	Результат.Вставить("ИННИдентифицируетПосредника", Ложь);
	Результат.Вставить("ВалидныйИННФизическогоЛица",  Ложь);
	Результат.Вставить("ИННПустой",                   Ложь);
	
	РазделительСлеши = "//";
	
	ИННПриведенный = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ИНН, "0");
	ЭтоИННЮридическогоЛица = ЗначениеЗаполнено(ИННПриведенный)
		И ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(ИНН);
	
	БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(Счет);
	ЭтоСчетФизЛица = БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет);
	ЭтоПереводЧерезСБП = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Актив(БалансовыйСчет);
	
	СловоИННСПробелом = НСтр("ru = 'ИНН'") + " ";
	РазделительРС = НСтр("ru = 'р/с'");
	Если СтрНачинаетсяС(СокрЛ(Наименование), СловоИННСПробелом) Тогда
		Наименование = СокрЛ(Сред(Наименование, 4));
	КонецЕсли;
	
	Разделитель = РазделительСлеши;
	Если СтрНайти(Наименование, Разделитель) = 0 Тогда
		Если ЭтоИННЮридическогоЛица И ЭтоСчетФизЛица Тогда
			Результат.ЭтоФизическоеЛицо = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ИНН) Тогда
			Разделитель = РазделительРС;
		КонецЕсли;
		
		Если СтрНайти(Наименование, Разделитель) = 0 Тогда
			Если ЭтоПереводЧерезСБП Тогда
				Разделитель = РазделительСлеши;
				Наименование = Разделитель + Наименование;
			Иначе
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Здесь не следует использовать СтрРазделить, потому что она не умеет работать с разделителями,
	// состоящими из нескольких символов.
	ЭлементыНаименования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		Наименование, Разделитель, Ложь, Истина);
	
	Если ЭтоПереводЧерезСБП И СтрНачинаетсяС(Наименование, РазделительСлеши) Тогда
		Наименование = Сред(Наименование, СтрДлина(РазделительСлеши) + 1);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭлементыНаименования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИНН)
		И ЭтоИННЮридическогоЛица
		И СтрНайти(ЭлементыНаименования[0], ",") > 0 Тогда
		// Это не похоже на имя физического лица. Возможно, это как раз тот случай,
		// когда в наименовании юридического лица указали адрес.
		Результат.Наименование = ЭлементыНаименования[0];
		Если ЭлементыНаименования.Количество() > 1 Тогда
			Результат.Адрес = ЭлементыНаименования[1];
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(ИНН) Тогда
		СоответствиеТребованиямИНН = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(
			ИНН, Ложь);
		Результат.ВалидныйИННФизическогоЛица = СоответствиеТребованиямИНН.СоответствуетТребованиям;
	ИначеЕсли ПустаяСтрока(ИНН) Тогда
		Результат.ИННПустой = Истина;
	Иначе
		Результат.ИННИдентифицируетПосредника = Истина;
	КонецЕсли;
	
	// Текст Получателя разбили на фразы разделенные "//".
	// Если получилась одна фраза (в тексте нет "//") - значит это не платеж от физ.лиц.
	// Если фраз несколько, то пытаемся выделить из них ФИО.
	// ФИО должно отвечать следующим требованиям:
	//  - там могут быть только кирилические символы и "-";
	//  - если после первых "//" идут сразу еще "//" - это говорит о том, что ФИО должно было быть, но не указано.
	// Если условия по ФИО не выполняются, то считаем что это не платеж от физ.лица.
	
	ТолькоРазрешенныеСимволы = Новый Массив;
	
	ТолькоРазрешенныеСимволы.Добавить(СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(
		СтрЗаменить(ЭлементыНаименования[0], " ", ""),, "-"));
	ТолькоРазрешенныеСимволы.Добавить(СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(
		СтрЗаменить(ЭлементыНаименования[1], " ", ""),, "-"));
	
	Если ПустаяСтрока(ЭлементыНаименования[1]) // ФИО физ.лица не указано, в наименовании идут 4 слеша подряд - "////".
		Или НЕ ТолькоРазрешенныеСимволы[0] И НЕ ТолькоРазрешенныеСимволы[1] Тогда
		// Не можем найти ФИО физического лица
		Возврат Результат;
	КонецЕсли;
	
	// Возможные варианты:
	// - Наименование посредника // ФИО физ.лица // адрес и прочие элементы
	// - ФИО физ.лица // адрес и прочие элементы
	Если (Результат.ИННПустой Или Результат.ИННИдентифицируетПосредника) И Разделитель <> РазделительРС Тогда
		// Наименование посредника скорее указано
		ПроверяемСИндекса = 1;
	Иначе
		// Наименование посредника скорее не указано
		ПроверяемСИндекса = 0;
	КонецЕсли;
	
	СоставныеЧастиНазванияБанка = СоставныеЧастиНазванияБанка();
	
	Для Индекс = 0 По 1 Цикл
		ИндексФИО = Макс(ПроверяемСИндекса - Индекс, Индекс - ПроверяемСИндекса);
		Если Не ПустаяСтрока(ЭлементыНаименования[ИндексФИО]) И ТолькоРазрешенныеСимволы[ИндексФИО]
			И Не ЭтоНазваниеБанка(ЭлементыНаименования[ИндексФИО], СоставныеЧастиНазванияБанка) Тогда
			Результат.ЭтоФизическоеЛицо = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат.ЭтоФизическоеЛицо Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЭлементыНаименования.ВГраница() >= ИндексФИО Тогда
		Результат.Наименование = ЭлементыНаименования[ИндексФИО];
	КонецЕсли;
	
	ИндексАдреса = ИндексФИО + 1;
	Если ЭлементыНаименования.ВГраница() >= ИндексАдреса Тогда
		Результат.Адрес = ЭлементыНаименования[ИндексАдреса];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоНазваниеБанка(ТекстПлательщика, СоставныеЧастиНазванияБанка)
	
	ЧастиНаименования = СтрРазделить(ТекстПлательщика, " ", Ложь);
	Для каждого Слово Из ЧастиНаименования Цикл
		СловоВВерхнемРегистре = ВРег(Слово);
		Если СоставныеЧастиНазванияБанка.ТочноеСоответствие[СловоВВерхнемРегистре] <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для каждого КлючИЗначение Из СоставныеЧастиНазванияБанка.НачалоСлова Цикл
			Если СтрНачинаетсяС(СловоВВерхнемРегистре, КлючИЗначение.Ключ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого КлючИЗначение Из СоставныеЧастиНазванияБанка.КонецСлова Цикл
			Если СтрЗаканчиваетсяНа(СловоВВерхнемРегистре, КлючИЗначение.Ключ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СоставныеЧастиНазванияБанка()
	
	Результат = Новый Структура("ТочноеСоответствие, НачалоСлова, КонецСлова");
	
	ТочноеСоответствие = Новый Соответствие;
	ТочноеСоответствие.Вставить("ОАО",  Истина); // Открытое акционерное общество
	ТочноеСоответствие.Вставить("ЗАО",  Истина); // Закрытое акционерное общество
	ТочноеСоответствие.Вставить("ПАО",  Истина); // Публичное акционерное общество
	ТочноеСоответствие.Вставить("ООО",  Истина); // Общество с ограниченной ответственностью
	ТочноеСоответствие.Вставить("АО",   Истина); // Акционерное общество
	ТочноеСоответствие.Вставить("АКБ",  Истина); // Акционерный коммерческий банк
	ТочноеСоответствие.Вставить("ФКБ",  Истина); // Филиал коммерческого банка
	ТочноеСоответствие.Вставить("ФАКБ", Истина); // Филиал акционерного коммерческого банка
	ТочноеСоответствие.Вставить("КБ",   Истина); // Коммерческий банк
	ТочноеСоответствие.Вставить("КИБ",  Истина); // Коммерческий инвестиционный банк
	ТочноеСоответствие.Вставить("НКО",  Истина); // Небанковская кредитная организация
	ТочноеСоответствие.Вставить("РНКО", Истина); // Расчетная небанковская кредитная организация
	ТочноеСоответствие.Вставить("НДКО", Истина); // Небанковская депозитно-кредитная организация
	ТочноеСоответствие.Вставить("РКЦ",  Истина); // Расчетно-кассовый центр
	ТочноеСоответствие.Вставить("Ф-Л",  Истина); // Филиал
	ТочноеСоответствие.Вставить("БАНК", Истина);
	ТочноеСоответствие.Вставить("БАНКА",  Истина);
	ТочноеСоответствие.Вставить("ФИЛИАЛ", Истина);
	ТочноеСоответствие.Вставить("ОТДЕЛЕНИЕ", Истина);
	
	НачалоСлова = Новый Соответствие;
	НачалоСлова.Вставить("Ф-Л",      Истина);
	НачалоСлова.Вставить("ФИЛИАЛ",   Истина);
	НачалоСлова.Вставить("ОТДЕЛЕНИ", Истина);
	НачалоСлова.Вставить("КРЕДИ",    Истина);
	
	КонецСлова = Новый Соответствие;
	КонецСлова.Вставить("БАНКА",  Истина);
	КонецСлова.Вставить("БАНК",   Истина);
	КонецСлова.Вставить("КРЕДИТ", Истина);
	
	Результат.ТочноеСоответствие = ТочноеСоответствие;
	Результат.НачалоСлова = НачалоСлова;
	Результат.КонецСлова  = КонецСлова;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаспознаваниеХозяйственныхОпераций

Функция НовыйРаспознаннаяВыписка(Идентификатор, УчастникиОпераций)
	
	РаспознаннаяВыписка = Новый Структура;
	РаспознаннаяВыписка.Вставить("Идентификатор",  Идентификатор);
	РаспознаннаяВыписка.Вставить("ВладелецСчета",  НовыйОписаниеВладельцаСчета(Идентификатор, УчастникиОпераций));
	РаспознаннаяВыписка.Вставить("Операции",       НовыйРаспознанныеОперации());
	РаспознаннаяВыписка.Вставить("Предупреждения", НовыйПредупрежденияПриРаспознавании());
	
	Возврат РаспознаннаяВыписка;
	
КонецФункции

Функция НовыйРаспознанныеОперации()
	
	РаспознанныеОперации = Новый ТаблицаЗначений;
	РаспознанныеОперации.Колонки.Добавить("Идентификатор",      ТипИдентификатор());
	РаспознанныеОперации.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение"));
	РаспознанныеОперации.Колонки.Добавить("Ссылка",             ОписаниеТиповДокументыИсполнения());
	РаспознанныеОперации.Колонки.Добавить("ХозяйственнаяОперация"); // См. НовыйХозяйственнаяОперация()
	РаспознанныеОперации.Колонки.Добавить("Предупреждения"); // См. НовыйПредупрежденияПриРаспознавании()
	РаспознанныеОперации.Индексы.Добавить("Идентификатор");
	
	Возврат РаспознанныеОперации;
	
КонецФункции

Функция ОписаниеТиповДокументыИсполнения()
	Возврат Новый ОписаниеТипов("ДокументСсылка.РасходСоСчета, ДокументСсылка.ПоступлениеНаСчет");
КонецФункции

Функция ХозяйственнаяОперация(Параметры, ПравилаОпределенияХозяйственныхОпераций, ВыполнитьПравилоОбязательно = Ложь)
	
	ДежурноеПравило = Неопределено; // Одно из правил выполним обязательно. Если не найдем ничего лучше, то последнее, прошедшее обязательные проверки.
	
	Для Каждого Правило Из ПравилаОпределенияХозяйственныхОпераций Цикл
		
		// Обязательные проверки, внешние по отношению к правилу (общие для всех правил)
		Если Правило.ПоступилоСписано <> Параметры.Операция.ПоступилоСписано Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатОпределенияХозяйственнойОперации = ВыполнитьПравилоОпределенияХозяйственнойОперации(Параметры, Правило, Истина);
		
		Если РезультатОпределенияХозяйственнойОперации.Определена Тогда
			
			Возврат РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация;
			
		Иначе
			
			ДежурноеПравило = Правило;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Все правила сообщили, что операции они не соответствуют.
	Если Не ВыполнитьПравилоОбязательно Или ДежурноеПравило = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выполним дежурное правило
	РезультатОпределенияХозяйственнойОперации = ВыполнитьПравилоОпределенияХозяйственнойОперации(Параметры, ДежурноеПравило, Ложь);
		
	Если РезультатОпределенияХозяйственнойОперации.Определена Тогда
		
		Возврат РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация;
		
	Иначе
		Возврат Неопределено; // Ничего не нашли
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьПравилоОпределенияХозяйственнойОперации(Параметры, Правило, ПроверитьПрименимостьПравила)
	
	Параметры.Правило                      = Правило;
	Параметры.ПроверитьПрименимостьПравила = ПроверитьПрименимостьПравила;
	Параметры.ПротоколыВыбораСсылок.Очистить();
	
	Если Правило.ПоступилоСписано = "Поступило" Тогда
		РезультатОпределенияХозяйственнойОперации = ХозяйственнаяОперацияПоступило(Параметры);
	Иначе
		РезультатОпределенияХозяйственнойОперации = ХозяйственнаяОперацияСписано(Параметры);
	КонецЕсли;
	
	Если РезультатОпределенияХозяйственнойОперации.Определена Тогда
		
		УстановитьПоказателиРасчетов(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		УстановитьПоказателиНДС(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		УстановитьБанковскийСчетКонтрагента(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		
		Если Не РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
			УстановитьСтатьюДвиженияДенежныхСредств(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		КонецЕсли;
		
		// Для ссылок на новые объекты, установленных в ХозяйственнаяОперация, дозаполним из выписки значения реквизитов
		ЗаполнитьРеквизитыНовыхОбъектов(
			Параметры.УчастникиОпераций,
			РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация,
			Параметры.Операция,
			Параметры.ИсточникиСсылок,
			Параметры.ВладелецСчета,
			Параметры.КешОбщихПараметров.РеквизитыНовыхОбъектовИнформационнойБазы);
		
	КонецЕсли;
	
	Возврат РезультатОпределенияХозяйственнойОперации;
	
КонецФункции

Функция НайтиПоИдентификатору(Коллекция, Идентификатор)
	
	Элемент = Коллекция.Найти(Идентификатор, "Идентификатор");
	Если Элемент = Неопределено Тогда
		Элемент = Коллекция.Добавить();
		Элемент.Идентификатор = Идентификатор;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ОперацияВыписки(Выписки, ИдентификаторВыписки, ИдентификаторОперации)
	
	Выписка = Выписки[ИдентификаторВыписки];
	Если Выписка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Операция = Выписка.Операции.Найти(ИдентификаторОперации, "Идентификатор");
	Если Операция = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

Функция НовыйРезультатОпределенияХозяйственнойОперации(Определена = Ложь, Правило = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Определена",            Определена);
	Результат.Вставить("ХозяйственнаяОперация", Неопределено); // Может быть инициализирована ниже
	
	Если Определена Тогда
		Результат.ХозяйственнаяОперация = НовыйХозяйственнаяОперация();
		Если Правило <> Неопределено И ЗначениеЗаполнено(Правило.ОсновнойВидОперации) Тогда
			Результат.ХозяйственнаяОперация.Вставить("ВидОперацииДокумента", Правило.ОсновнойВидОперации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйХозяйственнаяОперация()
	
	Возврат Новый Структура;
	
КонецФункции

Функция НовыйПараметрыОпределенияХозяйственнойОперации()
	
	Параметры = Новый Структура;
	// Коллекции дополняются в ходе распознавания:
	Параметры.Вставить("УчастникиОпераций");             // См. ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций()
	// Значения одинаковые для всех операций в выписке:
	Параметры.Вставить("ВладелецСчета");                 // См. НовыйОписаниеВладельцаСчета()
	Параметры.Вставить("КешОбщихПараметров",                  НовыйКешОбщихПараметров());
	// Значения следующих параметров заполняются (меняются) для каждой обрабатываемой операции
	// - См. ЗаполнитьПараметрыОпределенияХозяйственнойОперации()
	Параметры.Вставить("Операция",                            Неопределено);// Ссылка на операцию
	Параметры.Вставить("СторонаКонтрагента",                  ""); // "Плательщик" или "Получатель"
	Параметры.Вставить("ПлательщикЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	Параметры.Вставить("ПлательщикКешИдентификаторов",        Неопределено); // Для использования в НайтиСсылку()
	Параметры.Вставить("ПолучательКешИдентификаторов",        Неопределено); // Для использования в НайтиСсылку()
	Параметры.Вставить("КешПроверенныхСвойствПравил",         Новый Структура);
	// Значения следующих параметров заполняются (меняются, модифицируются) при применении разных правил к одной операции
	// - для каждого правила присваиваются новые значения
	Параметры.Вставить("Правило",                             Неопределено); // Ссылка на строку таблицы НовыйПравилаОпределенияХозяйственныхОпераций() или Неопределено
	Параметры.Вставить("ПроверитьПрименимостьПравила",        Истина); // Истина означает, что Правило должно проверить, подходит ли оно для конкретной операции. Ложь означает, что правило следует выполнить, несмотря на условия (проверки), которые оно содержит. Например, если такая проверка уже выполнена с учетом вида операции, заданному пользователем явно.
	Параметры.Вставить("ПротоколыВыбораСсылок",               Новый Структура); // Ключ - имя свойства хозяйственной операции; Значение - см. НовыйПротоколВыбораСсылок()
	// - коллекция может дополняться
	Параметры.Вставить("ИсточникиСсылок",                     Новый Соответствие); // Ключ - ссылка, наденная при распознавании операции; Значение - сторона операции, к которой относится ссылка ("Плательщик" или "Получатель")
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьПараметрыОпределенияХозяйственнойОперации(Параметры, Операция)
	
	Параметры.Операция           = Операция;
	
	Параметры.СторонаКонтрагента = СторонаКонтрагента(Операция.ПоступилоСписано); // "Плательщик" или "Получатель"
	
	// У каждой операции свои наборы идентификаторов, поэтому следует сбросить кеши
	Параметры.ПлательщикКешИдентификаторов = Неопределено;
	Параметры.ПолучательКешИдентификаторов = Неопределено;
	Параметры.КешПроверенныхСвойствПравил  = Новый Структура;
	
	Параметры.ПлательщикЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка();
	
	// Инициализируем параметры, значения которых меняются в ходе выполнения правил
	Параметры.Правило                      = Неопределено;
	Параметры.ПроверитьПрименимостьПравила = Истина;
	Параметры.ИсточникиСсылок              = Новый Соответствие;
	
КонецПроцедуры

Функция ПравилаОпределенияХозяйственныхОпераций(ВидОперации = Неопределено)
	
	ПравилаОпределенияХозяйственныхОпераций = НовыйПравилаОпределенияХозяйственныхОпераций();
	
	ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(ПравилаОпределенияХозяйственныхОпераций, ВидОперации);
	
	Возврат ПравилаОпределенияХозяйственныхОпераций;
	
КонецФункции

Функция НовыйПравилаОпределенияХозяйственныхОпераций()
	
	ТипВидыОпераций = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРасходСоСчета, ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет");
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("Имя",                 Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("ПоступилоСписано",    ТипПоступилоСписано());
	Правила.Колонки.Добавить("ОсновнойВидОперации", ТипВидыОпераций);
	Правила.Колонки.Добавить("ОсновнаяСтатьяДДС",   Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	
	Возврат Правила;
	
КонецФункции

Функция НовыйОписаниеВладельцаСчета(ИдентификаторВыписки, УчастникиОпераций)
	
	ОписаниеВладельцаСчета = Новый Структура;
	ОписаниеВладельцаСчета.Вставить("Организация",               Справочники.Организации.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("БанковскийСчет",            Справочники.БанковскиеСчета.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("Подразделение",             Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("ВалютаСчета",               Справочники.Валюты.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("БИК",                       "");
	ОписаниеВладельцаСчета.Вставить("ИПИспользуетТрудНаемныхРаботников", Ложь);
	ОписаниеВладельцаСчета.Вставить("СчетКорпоративныхРасчетов", Ложь);
	ОписаниеВладельцаСчета.Вставить("СчетБанк", ПланыСчетов.Управленческий.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("КорпоративныеКартыПодотчетныхЛиц", Новый Соответствие); // Ключ - номер карты; Значение - физ.лицо
	ОписаниеВладельцаСчета.Вставить("УчредителиОрганизации", Новый ТаблицаЗначений);
	ОписаниеВладельцаСчета.Вставить("ПротоколыВыбораСсылок", Новый Структура); // Ключ - имя свойств описания; Значение - см. НовыйПротоколВыбораСсылок()
	ОписаниеВладельцаСчета.Вставить("ЕстьНеоплаченныеРеестрыСамозанятых", Ложь);
	ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.Вставить("Организация",    ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок());
	ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.Вставить("БанковскийСчет", ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок());
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторВыписки);
	
	Отбор = Новый Структура("Тип", Тип("СправочникСсылка.Организации"));
	ОписаниеОрганизации = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Идентификаторы,
		УчастникиОпераций,
		Отбор,
		,// ПриоритетнаяСсылка. Здесь не используется, см. СведенияОВладельцеБанковскогоСчетаИзКонтекста
		ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.Организация);
	Если ОписаниеОрганизации = Неопределено Тогда
		Отбор = Новый Структура("Тип", Тип("СправочникСсылка.БанковскиеСчета"));
		ОписаниеСчета = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
			Идентификаторы,
			УчастникиОпераций,
			Отбор);
		Если ОписаниеСчета = Неопределено Тогда
			Возврат ОписаниеВладельцаСчета;
		Иначе
			Организация = ОписаниеСчета.ОписаниеСсылки.Владелец;
			Если ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
				Возврат ОписаниеВладельцаСчета;
			КонецЕсли;
			
			ОписаниеВладельцаСчета.Организация = Организация;
			ЮридическоеФизическоеЛицо = ОписаниеСчета.ОписаниеСсылки.ЮридическоеФизическоеЛицо;
		КонецЕсли;
	Иначе
		ОписаниеВладельцаСчета.Организация = ОписаниеОрганизации.Ссылка;
		ЮридическоеФизическоеЛицо = ОписаниеОрганизации.ОписаниеСсылки.ЮридическоеФизическоеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		ОписаниеВладельцаСчета.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
	КонецЕсли;
	
	Если ОписаниеВладельцаСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ОписаниеВладельцаСчета.ИПИспользуетТрудНаемныхРаботников =
			Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец", ОписаниеВладельцаСчета.Организация);
	ОписаниеСчета = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Идентификаторы,
		УчастникиОпераций,
		Отбор,
		,// ПриоритетнаяСсылка. Здесь не используется, см. СведенияОВладельцеБанковскогоСчетаИзКонтекста
		ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.БанковскийСчет);
	
	Если ОписаниеСчета <> Неопределено Тогда
		
		ОписаниеВладельцаСчета.БанковскийСчет = ОписаниеСчета.Ссылка;
		
		ПутиКРеквизитам = Новый Структура;
		ПутиКРеквизитам.Вставить("ВалютаСчета", "ВалютаДенежныхСредств");
		ПутиКРеквизитам.Вставить("БИК",         "Банк.Код");
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеВладельцаСчета.БанковскийСчет, ПутиКРеквизитам);
		
		ЗаполнитьЗначенияСвойств(ОписаниеВладельцаСчета, РеквизитыСчета);
		
		ОписаниеВладельцаСчета.СчетКорпоративныхРасчетов = ОписаниеСчета.ОписаниеСсылки.СчетКорпоративныхРасчетов;
		Если ОписаниеВладельцаСчета.СчетКорпоративныхРасчетов
			И ТипЗнч(ОписаниеСчета.ОписаниеСсылки.Владелец) = Тип("СправочникСсылка.Организации") Тогда
			ОписаниеВладельцаСчета.СчетБанк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ОписаниеВладельцаСчета.БанковскийСчет, "СчетУчета");
			ОписаниеВладельцаСчета.КорпоративныеКартыПодотчетныхЛиц = КорпоративныеКартыПодотчетныхЛиц(
				ОписаниеВладельцаСчета.Организация, ОписаниеВладельцаСчета.БанковскийСчет, ОписаниеВладельцаСчета.СчетКорпоративныхРасчетов);
		КонецЕсли;
		
	КонецЕсли;
	
	//ОписаниеВладельцаСчета.ЕстьНеоплаченныеРеестрыСамозанятых = 
	//	Документы.ВыплатыСамозанятым.ЕстьНеоплаченныеРеестрыСамозанятых(ОписаниеВладельцаСчета.Организация);
	
	//ОписаниеВладельцаСчета.Подразделение = Справочники.БанковскиеСчета.ПодразделениеПоУмолчанию(
	//	ОписаниеВладельцаСчета.Организация,
	//	ОписаниеВладельцаСчета.БанковскийСчет);
	
	//ОписаниеВладельцаСчета.УчредителиОрганизации =
	//	Справочники.Организации.УчредителиОрганизации(ОписаниеВладельцаСчета.Организация);
	
	Возврат ОписаниеВладельцаСчета;
	
КонецФункции

#Область РаспознаваниеСохраненнойОперацииВыписки

Функция НовыйРаспознаннаяОперацияДокумента()
	
	РаспознаннаяОперацияДокумента = Новый Структура();
	РаспознаннаяОперацияДокумента.Вставить("Операция",              Неопределено);
	РаспознаннаяОперацияДокумента.Вставить("УчастникиОпераций",     Неопределено);
	РаспознаннаяОперацияДокумента.Вставить("ХозяйственнаяОперация", Неопределено);
	РаспознаннаяОперацияДокумента.Вставить("Предупреждения",        Неопределено);
	
	Возврат РаспознаннаяОперацияДокумента;
	
КонецФункции

Функция УчастникиОперацииДокумента(ИдентификаторыУчастников, Организация, СчетОрганизации);
	
	СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация));
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СчетОрганизации));
	
	УчастникиОпераций = ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций();
	УчастникиОпераций.Идентификаторы = ИдентификаторыУчастников;
	
	ИдентификацияУчастниковБанковскихОпераций.НайтиВИнформационнойБазе(УчастникиОпераций, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Возврат УчастникиОпераций;
	
КонецФункции

Функция ПараметрыОпределенияХозяйственнойОперацииДокумента(ИдентификаторВыписки, УчастникиОпераций, Операция)
	
	ПараметрыОпределенияХозяйственнойОперации = НовыйПараметрыОпределенияХозяйственнойОперации();
	ВладелецСчета = НовыйОписаниеВладельцаСчета(ИдентификаторВыписки, УчастникиОпераций);
	ПараметрыОпределенияХозяйственнойОперации.ВладелецСчета     = ВладелецСчета;
	ПараметрыОпределенияХозяйственнойОперации.УчастникиОпераций = УчастникиОпераций;
	
	ЗаполнитьПараметрыОпределенияХозяйственнойОперации(ПараметрыОпределенияХозяйственнойОперации, Операция);
	
	Возврат ПараметрыОпределенияХозяйственнойОперации;
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеПравилаОпределенияХозяйственныхОпераций

Процедура ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(Правила, ОтборВидОперации = Неопределено)
	
	// Содержимое правил вызывается из
	// ХозяйственнаяОперацияСписано()
	// и
	// ХозяйственнаяОперацияПоступило()
	//
	// Кроме того, основные виды операций всех правил должны быть описаны в ОсновнойВидОперацииПредопределенногоПравила()
	
	ИменаПравил = Новый Структура;
	ИменаПравил.Вставить("Списано",   Новый Массив);
	ИменаПравил.Вставить("Поступило", Новый Массив);
	
	ИменаПравил.Списано.Добавить("Налог");
	ИменаПравил.Списано.Добавить("ОперацияПоКорпоративнойКарте");
	ИменаПравил.Списано.Добавить("ВыводПредпринимателемЛичныхСредств");
	ИменаПравил.Списано.Добавить("СнятиеНаличных");
	ИменаПравил.Списано.Добавить("ПереводНаДругойСчет");
	ИменаПравил.Списано.Добавить("ПополнениеКартыПодотчетногоЛица");
	ИменаПравил.Списано.Добавить("ЗаработнаяПлата");
	ИменаПравил.Списано.Добавить("ЗаработнаяПлатаПоВедомости");
	ИменаПравил.Списано.Добавить("ВозвратКредитаБанку");
	ИменаПравил.Списано.Добавить("УплатаПроцентовПоКредиту");
	ИменаПравил.Списано.Добавить("КомиссияБанка");
	
	// Порядок проверки правил по займам должны располагаться в указанной последовательности
	
	ИменаПравил.Списано.Добавить("ОплатаИзвестномуПоставщику");
	ИменаПравил.Списано.Добавить("ПрочиеВыплатыКонтрагентам");
	ИменаПравил.Списано.Добавить("ВозвратПокупателю");
	ИменаПравил.Списано.Добавить("ДругиеПлатежиГосОрганам");
	
	ИменаПравил.Списано.Добавить("ОплатаНовомуПолучателюПрочихВыплат");
	ИменаПравил.Списано.Добавить("ВозвратНовомуПокупателю");
	ИменаПравил.Списано.Добавить("ОплатаНовомуПоставщику");
	
	ИменаПравил.Поступило.Добавить("ВозвратПоКорпоративнойКарте");
	ИменаПравил.Поступило.Добавить("ПоступлениеНаличныхВБанк");
	ИменаПравил.Поступило.Добавить("ВыручкаРозничнойТорговлиЧерезПосредника");
	ИменаПравил.Поступило.Добавить("ВнесениеПредпринимателемЛичныхСредств");
	ИменаПравил.Поступило.Добавить("ПереводССобственногоСчета");
	ИменаПравил.Поступило.Добавить("ПолучениеКредитаВБанке");
	
	// Порядок проверки правил по займам должны располагаться в указанной последовательности
	
	ИменаПравил.Поступило.Добавить("ВозвратОтПодотчетногоЛица"); // должно быть выше ВозвратОтПоставщика и ВозвратОтНовогоПоставщика
	
	ИменаПравил.Поступило.Добавить("ОплатаОтИзвестногоПокупателя");
	ИменаПравил.Поступило.Добавить("ВозвратОтПоставщика");
	ИменаПравил.Поступило.Добавить("ПрочиеПоступленияОтКонтрагентов");
	ИменаПравил.Поступило.Добавить("ВозвратОтНовогоПоставщика");
	ИменаПравил.Поступило.Добавить("ОплатаОтНовогоПокупателя");
	
	Для Каждого ПоступилоСписано Из ИменаПравил Цикл
		
		Для Каждого ИмяПравила Из ПоступилоСписано.Значение Цикл
			
			ОсновнойВидОперации = ОсновнойВидОперацииПредопределенногоПравила(ПоступилоСписано.Ключ, ИмяПравила);
			
			Если ОтборВидОперации <> Неопределено И ОсновнойВидОперации <> ОтборВидОперации Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяПравила = "КомиссияБанка" Тогда
				КонтекстОперации = "КомиссияБанка";
			ИначеЕсли ИмяПравила = "УплатаПроцентовПоКредиту" Тогда
				КонтекстОперации = "УплатаПроцентов";
			ИначеЕсли ИмяПравила = "ВозвратЗаймаКонтрагенту" Тогда
				КонтекстОперации = "ПогашениеДолга";
			Иначе
				КонтекстОперации = ОсновнойВидОперации;
			КонецЕсли;
			
			ОсновнаяСтатьяДДС = УчетДенежныхСредствСервер.СтатьяДДСПоУмолчанию(КонтекстОперации);
			
			Правило = Правила.Добавить();
			Правило.ПоступилоСписано    = ПоступилоСписано.Ключ;
			Правило.Имя                 = ИмяПравила;
			Правило.ОсновнойВидОперации = ОсновнойВидОперации;
			Правило.ОсновнаяСтатьяДДС   = ОсновнаяСтатьяДДС;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОсновнойВидОперацииПредопределенногоПравила(ПоступилоСписано, ИмяПравила)
	
	// Эти правила должны быть объявлены в ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций().
	
	Если ПоступилоСписано = "Списано" Тогда
		
		Если ИмяПравила = "Налог" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.Налоги;
		ИначеЕсли ИмяПравила = "СнятиеНаличных" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
		ИначеЕсли ИмяПравила = "КомиссияБанка" Тогда
			// Если предопределенный элемент расходов на услуги банка отсутствует, нельзя будет сформировать корректные проводки.
			// В этом случае, пользователь должен сам заполнить субконто.
			//РасходыНаУслугиБанков = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
			РасходыНаУслугиБанков = ОбщегоНазначения.ПредопределенныйЭлемент("ПланСчетов.Управленческий.ПрочиеРасходы");
			Если ЗначениеЗаполнено(РасходыНаУслугиБанков) Тогда
				Возврат Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка;
			Иначе
				Возврат Перечисления.ВидыОперацийРасходСоСчета.Прочее;
			КонецЕсли;
		ИначеЕсли ИмяПравила = "ВыводПредпринимателемЛичныхСредств" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя;
		ИначеЕсли ИмяПравила = "ПереводНаДругойСчет" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
		ИначеЕсли ИмяПравила = "ЗаработнаяПлата" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику;
		ИначеЕсли ИмяПравила = "ЗаработнаяПлатаПоВедомости" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.Зарплата;
		ИначеЕсли ИмяПравила = "ОплатаИзвестномуПоставщику" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
		ИначеЕсли ИмяПравила = "ПрочиеВыплатыКонтрагентам" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
		ИначеЕсли ИмяПравила = "ВозвратПокупателю" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
		ИначеЕсли ИмяПравила = "ПополнениеКартыПодотчетногоЛица"
			Или ИмяПравила = "ОперацияПоКорпоративнойКарте" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику;
		ИначеЕсли ИмяПравила = "ВозвратЗаймаКонтрагенту"
			Или ИмяПравила = "УплатаПроцентовПоЗаймуКонтрагенту" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам;
		ИначеЕсли ИмяПравила = "ВозвратКредитаБанку"
			Или ИмяПравила = "УплатаПроцентовПоКредиту" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам;
		ИначеЕсли ИмяПравила = "ОплатаНовомуПолучателюПрочихВыплат" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
		ИначеЕсли ИмяПравила = "ДругиеПлатежиГосОрганам" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
		ИначеЕсли ИмяПравила = "ВозвратНовомуПокупателю" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
		ИначеЕсли ИмяПравила = "ОплатаНовомуПоставщику" Тогда
			Возврат Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
		КонецЕсли;
		
	ИначеЕсли ПоступилоСписано = "Поступило" Тогда
		
		Если ИмяПравила = "ПоступлениеНаличныхВБанк" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
		ИначеЕсли ИмяПравила = "ВозвратПоКорпоративнойКарте"
			Или ИмяПравила = "ВозвратОтПодотчетногоЛица" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника;
		ИначеЕсли ИмяПравила = "ВыручкаРозничнойТорговлиЧерезПосредника" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам;
		ИначеЕсли ИмяПравила = "ВнесениеПредпринимателемЛичныхСредств" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ЛичныеСредстваПредпринимателя;
		ИначеЕсли ИмяПравила = "ПереводССобственногоСчета" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
		ИначеЕсли ИмяПравила = "ПолучениеКредитаВБанке" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам;
		ИначеЕсли ИмяПравила = "ОплатаОтИзвестногоПокупателя" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
		ИначеЕсли ИмяПравила = "ВозвратОтПоставщика" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика;
		ИначеЕсли ИмяПравила = "ПрочиеПоступленияОтКонтрагентов" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты;
		ИначеЕсли ИмяПравила = "ВозвратОтНовогоПоставщика" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика;
		ИначеЕсли ИмяПравила = "ОплатаОтНовогоПокупателя" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область Списано

Функция ХозяйственнаяОперацияСписано(Параметры)
	
	// Эти правила должны быть объявлены в ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций().
	// Кроме того, основные виды операций всех правил должны быть описаны в ОсновнойВидОперацииПредопределенногоПравила()
	
	Если Параметры.Правило.Имя = "НалогТретьегоЛица" Тогда
		Возврат ХозяйственнаяОперацияНалогТретьегоЛица(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПеречислениеПоИсполнительномуЛисту" Тогда
		Возврат ХозяйственнаяОперацияПеречислениеПоИсполнительномуЛисту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "Налог" Тогда
		Возврат ХозяйственнаяОперацияНалог(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "СнятиеНаличных" Тогда
		Возврат ХозяйственнаяОперацияСнятиеНаличных(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "КомиссияБанка" Тогда
		Возврат ХозяйственнаяОперацияКомиссияБанка(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОперацияПоКорпоративнойКарте" Тогда
		Возврат ХозяйственнаяОперацияПоКорпоративнойКарте(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВыводПредпринимателемЛичныхСредств" Тогда
		Возврат ХозяйственнаяОперацияВыводПредпринимателемЛичныхСредств(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПереводНаДругойСчет" Тогда
		Возврат ХозяйственнаяОперацияПереводМеждуСобственнымиСчетами(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ЗаработнаяПлата" Тогда
		Возврат ХозяйственнаяОперацияЗаработнаяПлата(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПеречислениеПоГПХ" Тогда
		Возврат ХозяйственнаяОперацияПеречислениеПоГПХ(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ЗаработнаяПлатаПоВедомости" Тогда
		Возврат ХозяйственнаяОперацияЗаработнаяПлатаПоВедомости(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаИзвестномуПоставщику" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПрочиеВыплатыКонтрагентам" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратПокупателю" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ДругиеПлатежиГосОрганам" Тогда
		Возврат ХозяйственнаяОперацияДругиеПлатежиГосОрганам(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПополнениеКартыПодотчетногоЛица" Тогда
		Возврат ХозяйственнаяОперацияПополнениеКартыПодотчетногоЛица(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВыдачаЗаймаКонтрагенту" Тогда
		Возврат ХозяйственнаяОперацияВыдачаЗаймаКонтрагенту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратЗаймаКонтрагенту" Тогда
		Возврат ХозяйственнаяОперацияВозвратЗаймаКонтрагенту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "УплатаПроцентовПоЗаймуКонтрагенту" Тогда
		Возврат ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагенту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратКредитаБанку" Тогда
		Возврат ХозяйственнаяОперацияВозвратКредита(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "УплатаПроцентовПоКредиту" Тогда
		Возврат ХозяйственнаяОперацияУплатаПроцентовПоКредиту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаНовомуПолучателюПрочихВыплат" Тогда
		Возврат ХозяйственнаяОперацияОплатаНовомуПолучателюПрочихВыплат(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратНовомуПокупателю" Тогда
		Возврат ХозяйственнаяОперацияВозвратНовомуПокупателю(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаНовомуПоставщику" Тогда
		Возврат ХозяйственнаяОперацияОплатаНовомуПоставщику(Параметры);
	
	Иначе
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	
	КонецЕсли;
	
КонецФункции

Функция КБКНалога(РеквизитыПлатежаВБюджет)
	
	Если Не ПлатежиВБюджетКлиентСервер.ЭтоПлатежВБюджет(РеквизитыПлатежаВБюджет) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не РеквизитыПлатежаВБюджет.Свойство("ПоказательКБК") Тогда
		Возврат "";
	КонецЕсли;
	
	КБК = РеквизитыПлатежаВБюджет.ПоказательКБК;
	
	Если Не ПлатежиВБюджетКлиентСервер.КБКЗадан(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПлатежиВБюджетКлиентСервер.ЭтоНалоговыеДоходы(КБК)
		И Не ПлатежиВБюджетКлиентСервер.ЭтоЕдиныйНалоговыйПлатеж(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат КБК;
	
КонецФункции

Функция ХозяйственнаяОперацияНалогТретьегоЛица(Параметры)
	
	// Классификация по ISO
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "TAXE"; // Taxes
	
	// Платеж за третье лицо - это когда идентификатор плательщика, который берет в расчет налоговая,
	// не соответствует идентификаторам владельца счета.
	// Идентификатор плательщика может поступить двумя способами:
	// - если из назначения платежа понятно, что это платеж за третье лицо, то в составе РеквизитыПлатежаВБюджет
	// - если непонятно, то в составе идентификаторов плательщика
	
	ИдентификаторыНалогоплательщика = Новый Массив;
	Если Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Должник") Тогда
		// Это перечисление по исполнительному листу
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	ИначеЕсли Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") Тогда
		
		Для Каждого Идентификатор Из Параметры.Операция.РеквизитыПлатежаВБюджет.Налогоплательщик.Идентификаторы Цикл
			
			ИдентификаторыНалогоплательщика.Добавить(Идентификатор);
			
			Если Параметры.ПроверитьПрименимостьПравила Тогда
				ОписаниеИдентификатора = Параметры.УчастникиОпераций.Идентификаторы.Найти(Идентификатор, "Идентификатор");
				
				Если ОписаниеИдентификатора = Неопределено Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
				
				Если ОписаниеИдентификатора.Ссылки[Параметры.ВладелецСчета.Организация] <> Неопределено Тогда
					// Это уплата за самого себя, а не за третье лицо
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Это вообще налог?
		Если Параметры.ПроверитьПрименимостьПравила Тогда
			КБК = КБКНалога(Параметры.Операция.РеквизитыПлатежаВБюджет);
			Если ПустаяСтрока(КБК) Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		// В расчет берем только налоговые
		ИдентификаторыНалогоплательщика = Новый Массив;
		Для Каждого Идентификатор Из Параметры.Операция.ПлательщикИдентификаторы Цикл
			
			ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				Идентификатор,
				Параметры.УчастникиОпераций);
				
			Если ОписаниеИдентификатора = Неопределено Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
			
			Если ОписаниеИдентификатора.Схема <> "TXID" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеИдентификатора.Ссылки[Параметры.ВладелецСчета.Организация] <> Неопределено Тогда
				// Это уплата за самого себя, а не за третье лицо
				Если Параметры.ПроверитьПрименимостьПравила Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
			Иначе
				// Это реквизиты третьего лица
				ИдентификаторыНалогоплательщика.Добавить(Идентификатор);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
		
	// Заполним свойства хозяйственной операции
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	// Налоговый орган
	НайденКонтрагент = НайтиГосОрган(Результат.ХозяйственнаяОперация, Параметры);
	
	Если Не НайденКонтрагент Тогда
		ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет);
		УстановитьНовогоКонтрагента(Результат.ХозяйственнаяОперация, ОписаниеГосОргана, Параметры);
	КонецЕсли;
	
	// Налогоплательщик
	// Общие методы не работают с третьими лицами, поэтому обрабатываем здесь в особом (упрощенном) порядке
	
	Параметры.КешПроверенныхСвойствПравил.Удалить("ДоговорыКонтрагентовПоВидам");// Не используем кеш
	
	// Ищем договор
	ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(Результат.ХозяйственнаяОперация.ВидОперацииДокумента, Параметры.КешОбщихПараметров);
	Если Не ЗначениеЗаполнено(ВидыДоговоров) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПротоколВыбораСсылок = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
		
	ОтборДоговор = ОтборДоговорКонтрагента(Параметры);
	
	Для Каждого ВидДоговора Из ВидыДоговоров Цикл
		
		ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
	
		ОписаниеДоговора = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
			ИдентификаторыНалогоплательщика,
			Параметры.УчастникиОпераций, 
			ОтборДоговор,
			,// ПриоритетнаяСсылка
			ПротоколВыбораСсылок);
		
		Если ОписаниеДоговора <> Неопределено Тогда
				
			Результат.ХозяйственнаяОперация.Вставить("Налогоплательщик",   ОписаниеДоговора.ОписаниеСсылки.Владелец);
			Результат.ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", ОписаниеДоговора.Ссылка);
			
			Параметры.ПротоколыВыбораСсылок.Вставить("Налогоплательщик",   ПротоколВыбораСсылок);
			Параметры.ПротоколыВыбораСсылок.Вставить("ДоговорКонтрагента", ПротоколВыбораСсылок);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Результат.ХозяйственнаяОперация.Свойство("Налогоплательщик") Тогда
		
		// Ищем контрагента
		ОтборКонтрагент = Новый Структура;
		ОтборКонтрагент.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
		
		ПротоколВыбораСсылок = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
		
		ОписаниеКонтрагента = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
			ИдентификаторыНалогоплательщика,
			Параметры.УчастникиОпераций, 
			ОтборКонтрагент,
			,// ПриоритетнаяСсылка
			ПротоколВыбораСсылок);
		
		Если ОписаниеКонтрагента <> Неопределено Тогда
			Параметры.ПротоколыВыбораСсылок.Вставить("Налогоплательщик", ПротоколВыбораСсылок);
			Результат.ХозяйственнаяОперация.Вставить("Налогоплательщик", ОписаниеКонтрагента.Ссылка);
		Иначе
			
			// Создаем контрагента-налогоплательщика 
			Налогоплательщик = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
				ИдентификаторыНалогоплательщика,
				ОтборКонтрагент, 
				Тип("СправочникСсылка.Контрагенты"),
				Параметры.УчастникиОпераций);
				
			Если Налогоплательщик <> Неопределено Тогда
				
				Результат.ХозяйственнаяОперация.Вставить("Налогоплательщик", Налогоплательщик);
				
				Если Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") Тогда
					// Содержит наименование налогоплательщика (третьего лица)
				
					ОписаниеНовогоОбъекта = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
						Налогоплательщик,
						Параметры.УчастникиОпераций);
					Если ОписаниеНовогоОбъекта <> Неопределено Тогда
						ИдентификацияУчастниковБанковскихОпераций.ЗаполнитьПустыеРеквизитыНовогоОбъекта(
							ОписаниеНовогоОбъекта,
							Новый Структура("НаименованиеПолное", Параметры.Операция.РеквизитыПлатежаВБюджет.Налогоплательщик.Наименование),
							Параметры.КешОбщихПараметров.РеквизитыНовыхОбъектовИнформационнойБазы);
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат.ХозяйственнаяОперация.Свойство("Налогоплательщик") Тогда
			
			// Создаем договор
			ОтборДоговор = ОтборДоговорКонтрагента(Параметры);
			ОтборДоговор.Вставить("ВидДоговора", ВидыДоговоров[0]);
			ОтборДоговор.Вставить("Владелец",    Результат.ХозяйственнаяОперация.Налогоплательщик);
			
			ДоговорКонтрагента = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
				ИдентификаторыНалогоплательщика,
				ОтборДоговор, 
				Тип("СправочникСсылка.ДоговорыКонтрагентов"),
				Параметры.УчастникиОпераций);
				
			Если ДоговорКонтрагента <> Неопределено Тогда
				
				Результат.ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияНалог(Параметры)
	
	// Классификация по ISO
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "TAXE"; // Taxes
	
	КБК = КБКНалога(Параметры.Операция.РеквизитыПлатежаВБюджет);
	
	Если Параметры.ПроверитьПрименимостьПравила И ПустаяСтрока(КБК) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	НайденКонтрагент = НайтиГосОрган(Результат.ХозяйственнаяОперация, Параметры);
	
	Если Не НайденКонтрагент Тогда
		ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет);
		УстановитьНовогоКонтрагента(Результат.ХозяйственнаяОперация, ОписаниеГосОргана, Параметры);
	КонецЕсли;
	
	СтатусПлательщика = Неопределено;
	Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("СтатусСоставителя", СтатусПлательщика);
	
	Контрагент = ?(
		Результат.ХозяйственнаяОперация.Свойство("Контрагент"),
		Результат.ХозяйственнаяОперация.Контрагент,
		Справочники.Контрагенты.ПустаяСсылка());
		
	НастройкаПлатежейВБюджет = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.НайтиПоРеквизитамПлатежа(
		КБК,
		Параметры.ВладелецСчета.Организация,
		Контрагент);
	
	Налог = Справочники.ВидыНалогов.НалогПоКБК(КБК, , СтатусПлательщика);
	Если ЗначениеЗаполнено(Налог) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	КонецЕсли;
	
	Результат.ХозяйственнаяОперация.Вставить("Налог", Налог);
	
	Если НастройкаПлатежейВБюджет <> Неопределено Тогда
		Результат.ХозяйственнаяОперация.Вставить("Налог", НастройкаПлатежейВБюджет.Налог);
		Результат.ХозяйственнаяОперация.Вставить("СтатьяДвиженияДенежныхСредств",
			НастройкаПлатежейВБюджет.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	// Установим СтатьяДвиженияДенежныхСредств по исходному виду налога
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Если ЗначениеЗаполнено(ВидНалога) И Не ЕдиныйНалоговыйСчетВызовСервера.НалогУплачиваетсяОтдельно(
			Параметры.ВладелецСчета.Организация,
			Параметры.Операция.ДатаИсполнения,
			Налог,
			Результат.ХозяйственнаяОперация.Контрагент) Тогда
		// Организация является плательщиком единого налогового платежа,
		// поэтому при уплате по реквизитам других налогов (кроме оговоренных), средства попадают на единый налоговый счет.
		// Соответственно и при загрузке выписки деньги по реквизитам от этих налогов относим на единый налоговый платеж.
		ВидНалога = Перечисления.ВидыНалогов.ЕдиныйНалоговыйПлатеж;
		Результат.ХозяйственнаяОперация.Налог = Справочники.ВидыНалогов.НалогПоВиду(ВидНалога);
	КонецЕсли;
	
	// ВидНалоговогоОбязательства
	ВидНалоговогоОбязательства = Справочники.ВидыНалогов.ВидНалоговогоОбязательстваПоКБК(
		КБК, Параметры.Операция.ДатаДокумента, ВидНалога);
	Если ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог
		И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога)
		И НазначениеПлатежаУказываетНаСтраховыеВзносыСДоходов(Параметры.Операция) Тогда
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
	КонецЕсли;
	
	Результат.ХозяйственнаяОперация.Вставить("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства);
	Если Параметры.Операция.ПлательщикРеквизиты.Свойство("КПП") Тогда
		Результат.ХозяйственнаяОперация.Вставить("КПППлательщика", Параметры.Операция.ПлательщикРеквизиты.КПП);
	КонецЕсли;
	
	// НалоговыйПериод
	Если Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("ПоказательПериода") Тогда
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Параметры.Операция.РеквизитыПлатежаВБюджет.ПоказательПериода);
		Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
			НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Параметры.Операция.ДатаДокумента, -1));
		Иначе
			НалоговыйПериод = ОписаниеПериода.Дата;
		КонецЕсли;
		
		// Особые требования к значению поля НалоговыйПериод
		Если ЗначениеЗаполнено(Результат.ХозяйственнаяОперация.Налог) Тогда
			Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
				НалоговыйПериод = НачалоГода(НалоговыйПериод);
			ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(ВидНалога) Тогда
				НалоговыйПериод = УчетУСН.НалоговыйПериодПоДаннымПлатежногоДокумента(
					ОписаниеПериода,
					Параметры.Операция.ДатаДокумента,
					Параметры.ВладелецСчета.Организация);
			ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(ВидНалога) Тогда
				НалоговыйПериод = УчетНДФЛПредпринимателя.НалоговыйПериодПоПлатежнымДанным(
					Параметры.Операция.РеквизитыПлатежаВБюджет.ПоказательПериода,
					Параметры.Операция.ДатаДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Результат.ХозяйственнаяОперация.Вставить("НалоговыйПериод", НалоговыйПериод);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияСнятиеНаличных(Параметры)
	
	// Классификация по ISO2002
	// Family    = "CNTR"; // Counter Transactions
	// SubFamily = "CWDL"; // Cash Withdrawal
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если ОбработкаЗаявленийАбонента.ЭтоИнтеграцияСБанком()
			Или Не ЭтоСнятиеНаличныхВКассеБанка(Параметры.Операция)
			И   Не ЭтоСнятиеНаличныхСКартыЧерезТерминал(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
КонецФункции

Функция ХозяйственнаяОперацияКомиссияБанка(Параметры)
	
	// Классификация по ISO2002
	// Family    = "RDDT"; // Received Direct Debits
	// SubFamily = "FEES"; // Fees
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоКомиссияБанка = БанковскиеПравила.ЭтоСчетДоходовБанка(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоСчетКомиссииПоКредитуДепозиту(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоСчетРасчетовСБанком(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоБанковскийОрдер(Параметры.Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоСчетВнутрибанковскихОперацийНДС(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоВнутрибанковскиеРасчетыСПрочимиКредиторами(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоРасчетыПоВыданнымБанковскимГарантиям(Параметры.Операция.БалансовыйСчет)
				И (БанковскиеПравила.ЭтоМемориальныйОрдер(Параметры.Операция.ШифрОперации)
					Или БанковскиеПравила.ЭтоПлатежноеТребование(Параметры.Операция.ШифрОперации)
					Или БанковскиеПравила.ЭтоИнкассовоеПоручение(Параметры.Операция.ШифрОперации));
		
		Если Не ЭтоКомиссияБанка Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьБанк(Результат.ХозяйственнаяОперация, Параметры);
	
	// Аналитика для отнесения расходов
	// В операциях с видом ПрочееСписание стандартные методы заполнения счетов не применяются
	Результат.ХозяйственнаяОперация.Вставить("СчетДт",          ПланыСчетов.Управленческий.ПрочиеРасходы);
	//Результат.ХозяйственнаяОперация.Вставить("ПодразделениеДт", Параметры.ВладелецСчета.Подразделение);
	
	//СтатьяРасходов = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
	//Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
	//	Результат.ХозяйственнаяОперация.Вставить("СубконтоДт", Новый Соответствие);
	//	Результат.ХозяйственнаяОперация.СубконтоДт.Вставить(
	//		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
	//		СтатьяРасходов);
	//КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыводПредпринимателемЛичныхСредств(Параметры)
	
	// Классификация по ISO2002
	// Family    = "ICCN"; // Issued Cash Concentration
	// SubFamily = "COAT"; // Corporate Own Account Transfer
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ЭтоСчетПереводовФизическимЛицам = БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет);
		ЭтоСчетДепозитовФизическихЛиц   = БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет);
		ЭтоСнятиеНаличныхВКассеБанка    = ЭтоСнятиеНаличныхВКассеБанка(Параметры.Операция);
		ВыплатаФизЛицу                  = ЭтоСчетПереводовФизическимЛицам Или ЭтоСчетДепозитовФизическихЛиц;
		ОплатаКартой                    = ЭтоОплатаКартой(Параметры.Операция);
		ВыводЛичныхСредствСКартыЧерезТерминал = ЭтоСнятиеНаличныхСКартыЧерезТерминал(Параметры.Операция);
		
		ПереводСобственныхСредств = ВыплатаЗаработнойПлатыПоРеестру(Параметры.Операция, Ложь)
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников
			И ВыплатаПоРееструСамозанятым(Параметры.Операция)
			И Не НазначениеПлатежаУказываетНаРеестрСамозанятых(Параметры.Операция);
		
		Если  Не ВыплатаФизЛицу
			И Не ЭтоСнятиеНаличныхВКассеБанка
			И Не ВыводЛичныхСредствСКартыЧерезТерминал
			И Не ОплатаКартой
			И Не ПереводСобственныхСредств Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если ВыплатаФизЛицу Тогда
			ПлательщикИПолучательОдноФизическоеЛицо = ПлательщикИПолучательОдноФизическоеЛицо(Параметры);
			Если Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
				Если Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
				
				Если ЭтоЮридическоеЛицо(Параметры, "Получатель") Тогда // получатель - банк
					// сохраним исходные идентификаторы
					ПолучательИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.Операция.ПолучательИдентификаторы);
					ПлательщикИПолучательОдноФизическоеЛицо = ПлательщикИПолучательОдноФизЛицоПоСхемеPNNM(Параметры);
					Если ПлательщикИПолучательОдноФизическоеЛицо Тогда
						Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"] = Неопределено; // очистим кэш
					Иначе
						Параметры.Операция.ПолучательИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПолучательИдентификаторы);
					КонецЕсли;
				ИначеЕсли КонтрагентУстановлен(Параметры) Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации(); // это прочие расчеты с контрагентом-физ.лицом
				КонецЕсли;
				
				Если Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
					Если ФизлицоУстановлено(Параметры) Тогда // возможно это все-таки выплата зп, например, по договору подряда
						Возврат НовыйРезультатОпределенияХозяйственнойОперации();
					КонецЕсли;
					
					Если Не ПлательщикИПолучательОдноФизЛицоПоСхемеPNNM(Параметры) Тогда // данная проверка очищает возможные идентификаторы банка у Получателя
						Если КонтрагентУстановлен(Параметры) Тогда
							Возврат НовыйРезультатОпределенияХозяйственнойОперации();
						ИначеЕсли Параметры.Операция.ПолучательИдентификаторы.Количество() > 0 Тогда
							// Сохраним исходные идентификаторы
							ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.Операция.ПлательщикИдентификаторы);
							ДобавимПлательщикуИдентификаторPNNM(Параметры);
							Если Не ПлательщикИПолучательОдноФизЛицоПоСхемеPNNM(Параметры) Тогда // ФИО плательщика и получателя не совпадают, а значит это оплата другому лицу
								// Восстановим исходные идентификаторы
								Параметры.Операция.ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПлательщикИдентификаторы);
								Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"] = Неопределено; // очистим кэш
								Возврат НовыйРезультатОпределенияХозяйственнойОперации();
							КонецЕсли;
							
							// Восстановим исходные идентификаторы
							Параметры.Операция.ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПлательщикИдентификаторы);
						КонецЕсли;
						
						// Проверки не прошли, поэтому очистим идентификаторы получателя, чтобы не создавался контрагент
						Параметры.Операция.ПолучательИдентификаторы.Очистить();
					КонецЕсли;
				КонецЕсли;
				
				Если НазначениеПлатежаУказываетПеречислениеПоГПХ(Параметры.Операция)
					Или НазначениеПлатежаУказываетНаПеречислениеПодотчет(Параметры.Операция) Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли (ПереводСобственныхСредств Или ОплатаКартой Или ВыводЛичныхСредствСКартыЧерезТерминал)
			И ЭтоЮридическоеЛицо(Параметры, "Получатель") Тогда
			ОчиститьИдентификаторыНеСоответствующиеФизЛицу(Параметры, "Получатель");
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияЗаработнаяПлата(Параметры)
	
	// Классификация по ISO2002
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "SALA"; // Payroll/Salary Payment
	
	// Вывод денег на счет предпринимателя уже должен быть проверен.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ВладелецСчетаКонтрагента =
			Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", Параметры.Операция.НомерСчетаКонтрагента).Владелец;
		Если ТипЗнч(ВладелецСчетаКонтрагента) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не ФизлицоУстановлено(Параметры) Тогда // физ.лицо не найдено
			// Если физ.лицо не найдено, а получатель "банк", то вид операции "выплата зп по ведомости".
			Если ЭтоЮридическоеЛицо(Параметры, "Получатель") Тогда // получатель - банк
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
			
			Если КонтрагентУстановлен(Параметры) Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		Если НазначениеПлатежаУказываетПеречислениеПоГПХ(Параметры.Операция)
			Или НазначениеПлатежаУказываетНаПеречислениеПодотчет(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПеречислениеПоГПХ(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не ФизлицоУстановлено(Параметры) Тогда // физ.лицо не найдено
			// Если физ.лицо не найдено, а получатель "банк", то вид операции "выплата зп по ведомости".
			Если ЭтоЮридическоеЛицо(Параметры, "Получатель") Тогда // получатель - банк
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
			
			Если КонтрагентУстановлен(Параметры) Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		Если Не НазначениеПлатежаУказываетПеречислениеПоГПХ(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияЗаработнаяПлатаПоВедомости(Параметры)
	
	// Классификация по ISO2002
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "SALA"; // Payroll/Salary Payment
	
	// Вывод денег на счет предпринимателя и Перечисление заработной платы работнику уже должны быть проверены.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет)
			И Не ВыплатаЗаработнойПлатыПоРеестру(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ВалютаСчета
			<> УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета() Тогда
			// Выплата заработной платы должна производиться в денежной форме в валюте РФ.
			// Исключения есть, но в БП они не поддерживаются.
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ПолучательНеБанк = ЭтоФизическоеЛицо(Параметры, "Получатель");
		Если ПолучательНеБанк Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаНовомуПолучателюПрочихВыплат(Параметры)
	
	// Используется в качестве дежурного правила, только когда вид операции документа указан пользователем явно.
	// Приводит к созданию нового договора с видом "Прочее".
	// Позволяет избежать выполнения правила "ДругиеПлатежиГосОрганам" (и, как следствие - создания контрагента с видом Гос.орган),
	// когда в операции не указаны реквизиты платежа в бюджет.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации(); // Обычно в качестве дежурного применяется правило "ОплатаНовомуПоставщику"
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	// Выполняем в том случае, если нет подходящих договоров
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияДругиеПлатежиГосОрганам(Параметры)
	
	// Применимость правила проверяем всегда - см. правило "ОплатаНовомуПолучателюПрочихВыплат"
	Если Не ПлатежиВБюджетКлиентСервер.ЭтоПлатежВБюджет(Параметры.Операция.РеквизитыПлатежаВБюджет) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	// Правило вызывается позже ХозяйственнаяОперацияНалог, поэтому проверили, что это не налог.
	// Правило вызывается позже других, ориентирующихся на вид договора, поэтому подходящего договора нет - нужно создать новый.
	// Но, в отличие от платежам обычным юридическим лицам, не госорганам, вид нового договора будет Прочее.
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет); // Вид госоргана зависит от КБК
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры, ОписаниеГосОргана);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратНовомуПокупателю(Параметры)
	
	// Правило вызывается перед ХозяйственнаяОперацияОплатаНовомуПоставщику, чтобы не ошибиться
	// в определении вида договора для нового контрагента
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не НазначениеПлатежаУказываетНаВозврат(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаНовомуПоставщику(Параметры)
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило); // Самая последняя в списке правил.
	
	// Выполняем в том случае, если нет подходящих договоров
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПополнениеКартыПодотчетногоЛица(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Параметры.Операция.Очередность = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда() Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не НазначениеПлатежаУказываетНаПеречислениеПодотчет(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратОтПодотчетногоЛица(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда // ИП без работников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не НазначениеПлатежаУказываетНаВозврат(Параметры.Операция)
			И Не НазначениеПлатежаУказываетНаПеречислениеПодотчет(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратКредита(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияКредитБанка(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоров.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияУплатаПроцентовПоКредиту(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияУплатаПроцентовПоКредиту(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоров.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыдачаЗаймаКонтрагенту(Параметры)
	
	// Используется, только когда вид операции документа указан пользователем явно.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияВыдачаЗаймаКонтрагенту(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоров.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратЗаймаКонтрагенту(Параметры)
	
	// Используется, только когда вид операции документа указан пользователем явно.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияВозвратЗаймаКонтрагенту(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоров.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПоКорпоративнойКарте(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		ЭтоСчетКорпоративнойКарты = Параметры.ВладелецСчета.СчетКорпоративныхРасчетов
			И ЗначениеЗаполнено(Параметры.ВладелецСчета.КорпоративныеКартыПодотчетныхЛиц);
		Если Не ЭтоСчетКорпоративнойКарты Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда
			// ИП без сотрудников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не ЭтоОперацияПоКорпоративнойКарте(Параметры.Операция, Параметры.ВладелецСчета) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьПодотчетноеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПеречислениеПоИсполнительномуЛисту(Параметры)
	
	// Классификация по ISO
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "TAXE"; // Taxes
	
	// Платеж за третье лицо - это когда идентификатор плательщика, который берет в расчет налоговая,
	// не соответствует идентификаторам владельца счета.
	// Идентификатор плательщика может поступить двумя способами:
	// - если из назначения платежа понятно, что это платеж за третье лицо, то в составе РеквизитыПлатежаВБюджет
	// - если непонятно, то в составе идентификаторов плательщика
	
	ИдентификаторыНалогоплательщика = Новый Массив;
	Если Не Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Должник") Тогда
		// Это не перечисление по исполнительному листу
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Для Каждого Идентификатор Из Параметры.Операция.РеквизитыПлатежаВБюджет.Должник.Идентификаторы Цикл
		
		ИдентификаторыНалогоплательщика.Добавить(Идентификатор);
		
		Если Параметры.ПроверитьПрименимостьПравила Тогда
			ОписаниеИдентификатора = Параметры.УчастникиОпераций.Идентификаторы.Найти(Идентификатор, "Идентификатор");
			
			Если ОписаниеИдентификатора = Неопределено Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	// Заполним свойства хозяйственной операции
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	// Налоговый орган
	НайденКонтрагент = НайтиГосОрган(Результат.ХозяйственнаяОперация, Параметры);
	
	Если Не НайденКонтрагент Тогда
		ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет);
		УстановитьНовогоКонтрагента(Результат.ХозяйственнаяОперация, ОписаниеГосОргана, Параметры);
	КонецЕсли;
	
	// Должник
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры, "Сотрудник");
	
	ПротоколВыбораСсылок = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
	Результат.ХозяйственнаяОперация.Вставить("Сотрудник", Результат.ХозяйственнаяОперация.Сотрудник);
	Параметры.ПротоколыВыбораСсылок.Вставить("Сотрудник", ПротоколВыбораСсылок);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Поступило

Функция ХозяйственнаяОперацияПоступило(Параметры)
	
	// Эти правила должны быть объявлены в ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций()
	
	Если Параметры.Правило.Имя = "ПоступлениеНаличныхВБанк" Тогда
		Возврат ХозяйственнаяОперацияПоступлениеНаличныхВБанк(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратПоКорпоративнойКарте" Тогда
		Возврат ХозяйственнаяОперацияВозвратПоКорпоративнойКарте(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратОтПодотчетногоЛица" Тогда
		Возврат ХозяйственнаяОперацияВозвратОтПодотчетногоЛица(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВыручкаРозничнойТорговлиЧерезПосредника" Тогда
		Возврат ХозяйственнаяОперацияВыручкаРозничнойТорговлиЧерезПосредника(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВнесениеПредпринимателемЛичныхСредств" Тогда
		Возврат ХозяйственнаяОперацияВнесениеПредпринимателемЛичныхСредств(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПереводССобственногоСчета" Тогда
		Возврат ХозяйственнаяОперацияПереводМеждуСобственнымиСчетами(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаОтФакторинговойКомпании" Тогда
		Возврат ХозяйственнаяОперацияОплатаОтФакторинговойКомпании(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПолучениеКредитаВБанке" Тогда
		Возврат ХозяйственнаяОперацияПолучениеКредитаВБанке(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВзносВУставныйКапитал" Тогда
		Возврат ХозяйственнаяОперацияВзносВУставныйКапитал(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаОтИзвестногоПокупателя" Тогда
		Возврат ХозяйственнаяОперацияОплатаОтИзвестногоПокупателя(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПрочиеПоступленияОтКонтрагентов" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратОтПоставщика" Тогда
		Возврат ХозяйственнаяОперацияВозвратОтПоставщика(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ПолучениеЗаймаОтКонтрагента" Тогда
		Возврат ХозяйственнаяОперацияПолучениеЗаймаОтКонтрагента(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратЗаймаКонтрагентом" Тогда
		Возврат ХозяйственнаяОперацияВозвратЗаймаКонтрагентом(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "УплатаПроцентовПоЗаймуКонтрагентом" Тогда
		Возврат ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагентом(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "УплатаПроцентовПоЗаймуКонтрагенту" Тогда
		Возврат ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагенту(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ВозвратОтНовогоПоставщика" Тогда
		Возврат ХозяйственнаяОперацияВозвратОтНовогоПоставщика(Параметры);
	
	ИначеЕсли Параметры.Правило.Имя = "ОплатаОтНовогоПокупателя" Тогда
		Возврат ХозяйственнаяОперацияОплатаОтНовогоПокупателя(Параметры);
	
	Иначе
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	
	КонецЕсли;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратПоКорпоративнойКарте(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		ЭтоСчетКорпоративнойКарты = Параметры.ВладелецСчета.СчетКорпоративныхРасчетов
			И ЗначениеЗаполнено(Параметры.ВладелецСчета.КорпоративныеКартыПодотчетныхЛиц);
		Если Не ЭтоСчетКорпоративнойКарты Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
			И Не Параметры.ВладелецСчета.ИПИспользуетТрудНаемныхРаботников Тогда
			// ИП без сотрудников
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не ЭтоОперацияПоКорпоративнойКарте(Параметры.Операция, Параметры.ВладелецСчета)
			// Такие же реквизиты могут быть у эквайринга,
			// поэтому дополнительно проверим наличие идентификатора и его соответствие физ.лицу.
			Или Не ЕстьИдентификаторКарты(Параметры, "Плательщик")
			Или Не ФизлицоУстановлено(Параметры) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьПодотчетноеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПоступлениеНаличныхВБанк(Параметры)
	
	// Классификация по ISO2002
	// Family    = "CNTR"; // Counter Transactions
	// SubFamily = "BCDP"; // Branch Deposit
	// SubFamily = "CDPT"; // Cash Deposit

	ЭтоСамоИнкассация = Ложь;
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоИП = Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Если ЭтоИП
			И Не Параметры.КешОбщихПараметров.ИспользоватьИнкассацию Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		КонтрагентФизическоеЛицо = ЭтоФизическоеЛицо(Параметры, Параметры.СторонаКонтрагента);
		Если КонтрагентФизическоеЛицо Тогда
			// Это оплата от покупателя-физического лица, без открытия банковского счета
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ОрганизацияИП = Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо
			= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		ЭтоНезавершенныеРасчеты = Не ОрганизацияИП И ЭтоНезавершенныеРасчетыЧерезТерминал(Параметры.Операция);
		ЭтоРасчетыТребование = Не ОрганизацияИП И ЭтоРасчетыТребование(Параметры.Операция);
		
		ЭтоПоступлениеНаличныхВКассуБанка = ЭтоПоступлениеНаличныхВКассуБанка(Параметры.Операция);
		ЭтоОбязательстваПоПрочимОперациям = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(
			Параметры.Операция.БалансовыйСчет);
		
		Если НазначениеПлатежаУказываетНаЭквайринг(Параметры.Операция)
			Или НазначениеПлатежаУказываетНаВзносВУставныйКапитал(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		НазначениеПлатежаУказываетНаИнкассацию = НазначениеПлатежаУказываетНаИнкассацию(Параметры.Операция);
		
		Если (ЭтоНезавершенныеРасчеты Или ЭтоРасчетыТребование
				Или ЭтоОбязательстваПоПрочимОперациям И Не ЭтоПоступлениеНаличныхВКассуБанка)
			И Не НазначениеПлатежаУказываетНаИнкассацию Тогда
			ВидОперации =
				Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам;
			ХозяйственнаяОперацияЭквайринга = НовыйХозяйственнаяОперация();
			ХозяйственнаяОперацияЭквайринга.Вставить("ВидОперацииДокумента", ВидОперации);
			НайденДоговорЭквайринга = НайтиДоговорПоВидуОперации(
				ХозяйственнаяОперацияЭквайринга,
				Параметры,
				ВидОперации);
			Если НайденДоговорЭквайринга И ХозяйственнаяОперацияЭквайринга.Свойство("ВидОплаты") Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		ЭтоСамоИнкассация = ЭтоСамоИнкассация(Параметры) И Не ЭтоИП;
		ЭтоИнкассированиеСДругогоСчета = БанковскиеПравила.ЭтоСчетИнкассированныхНаличныхДенег(
			Параметры.Операция.БалансовыйСчет);
		
		Если  Не ЭтоПоступлениеНаличныхВКассуБанка
			И Не ИнкассированнаяНаличность(Параметры.Операция)
			И Не ЭтоИнкассированиеСДругогоСчета
			И Не ЭтоНезавершенныеРасчеты
			И Не ЭтоРасчетыТребование
			И Не ЭтоСамоИнкассация Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	Если ЭтоСамоИнкассация Тогда
		// Организация сама вносит деньги в банк, поэтому вне зависимости
		// от установленной функциональности (используется "Инкассация"), вид операции должен быть "Взнос наличными".
		Результат.ХозяйственнаяОперация.Вставить("ВидОперацииДокумента",
			Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными);
	КонецЕсли;
	
	ВидОперацииДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ХозяйственнаяОперация, "ВидОперацииДокумента");
	
	Если ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными Тогда
		// В качестве контрагента обычно указан банк, но может быть и вноситель
		УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыручкаРозничнойТорговлиЧерезПосредника(Параметры)
	Перем ОтборДоговоров;
	
	// Классификация по ISO2002
	// Family    = "MCRD"; // Merchant Card Transactions
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		ЭтоСчетНезавершенныхРасчетов = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов(Параметры.Операция.БалансовыйСчет);
		
		// Некоторые банки применяют при расчетах через Систему быстрых платежей.
		ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка = БанковскиеПравила.ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка(
			Параметры.Операция.БалансовыйСчет) И БанковскиеПравила.ЭтоБанковскийОрдер(Параметры.Операция.ШифрОперации);
		
		// Банковские платежные агенты при расчетах через Систему быстрых платежей
		ЭтоСчетБанковскогоПлатежногоАгента = БанковскиеПравила.ЭтоСчетБанковскогоПлатежногоАгента(
			Параметры.Операция.БалансовыйСчет);
		
		Если Не ЭтоСчетНезавершенныхРасчетов
			И Не ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка
			И Не ЭтоСчетБанковскогоПлатежногоАгента Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если НазначениеПлатежаУказываетНаВзносВУставныйКапитал(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	ОрганизацияИП = Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	ЮридическоеФизическоеЛицо = ИдентификацияУчастниковБанковскихОпераций.ЮридическоеФизическоеЛицоПоИдентификаторам(
		Параметры.Операция.ПлательщикИдентификаторы,
		Параметры.УчастникиОпераций);
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Если Параметры.ПроверитьПрименимостьПравила Тогда
			// Посредник - банк или другая финансовая организация, а значит юридическое лицо.
			// В то же время, счета незавершенных расчетов могут использоваться для платежей физических лиц без открытия банковского счета.
			// В этих случаях данные о плательщике могут содержать идентификаторы как юридического, так и физического лица.
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		Иначе
			ОчиститьИдентификаторыБанкСчетаНеСоответствующиеЮрЛицу(Параметры, "Плательщик");
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	Результат.ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      1);
	Результат.ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", 1);
	Результат.ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов",     Параметры.Операция.Сумма);
	
	НазначениеПлатежаУказываетНаСБП = Ложь;
	НашлиВидОплатыПоПроцентуКомиссии = Ложь;
	НазначениеПлатежаУказываетНаЭквайринг = НазначениеПлатежаУказываетНаЭквайринг(Параметры.Операция);
	ДобавитьОтбор(ОтборДоговоров, "ВидОплаты");
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента,
		ОтборДоговоров);
	Если ДоговорНайден Тогда
		// Если договор, ассоциированный с Видом оплаты найден, то возможно таких договоров (и Видов оплат) много,
		// попытаемся усилить отбор доп.параметрами.
		// Если в этом случае договор не будет найден, то восстановим результаы предыдущего поиска.
		ХозяйственнаяОперация = ОбщегоНазначения.СкопироватьРекурсивно(Результат.ХозяйственнаяОперация);
		Если Параметры.КешПроверенныхСвойствПравил.Свойство("ДоговорыКонтрагентовПоВидам") Тогда
			Параметры.КешПроверенныхСвойствПравил.Удалить("ДоговорыКонтрагентовПоВидам"); // очистим кэш
		КонецЕсли;
		
		ДоговорНайден = Ложь; // Поищем другие договора с доп.отборами, если ничего не найдем, то вернем найденный выше.
		
		НазначениеПлатежаУказываетНаСБП = НазначениеПлатежаУказываетНаСБП(Параметры.Операция);
		Если НазначениеПлатежаУказываетНаСБП Или Не НазначениеПлатежаУказываетНаЭквайринг Тогда
			ДобавитьОтбор(ОтборДоговоров, "ЭтоСБП", Истина);
			ДоговорНайден = НайтиДоговорПоВидуОперации(
				Результат.ХозяйственнаяОперация,
				Параметры,
				Результат.ХозяйственнаяОперация.ВидОперацииДокумента,
				ОтборДоговоров);
		КонецЕсли;
		
		Если Не ДоговорНайден Тогда
			ДобавитьОтбор(ОтборДоговоров, "ЭтоСБП", Ложь);
			ДобавитьОтбор(ОтборДоговоров, "ЗаполненПроцентКомиссии", Истина);
			ДоговорНайден = ДоговорНайден Или НайтиДоговорПоВидуОперации(
				Результат.ХозяйственнаяОперация,
				Параметры,
				Результат.ХозяйственнаяОперация.ВидОперацииДокумента,
				ОтборДоговоров);
			НашлиВидОплатыПоПроцентуКомиссии = Истина;
		КонецЕсли;
		
		Если Не ДоговорНайден Тогда
			НашлиВидОплатыПоПроцентуКомиссии = Ложь;
			ДоговорНайден = Истина;
			Результат.ХозяйственнаяОперация = ХозяйственнаяОперация;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДоговорНайден Тогда
		// Если договор с ассоциированным Видом оплаты не найден, то попробуем найти любой другой подходящий договор
		ДоговорНайден = НайтиДоговорПоВидуОперации(
			Результат.ХозяйственнаяОперация,
			Параметры,
			Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	КонецЕсли;
	
	Если ДоговорНайден Тогда
		Если Параметры.ПроверитьПрименимостьПравила
			И ОрганизацияИП
			И Не Результат.ХозяйственнаяОперация.Свойство("ВидОплаты")
			И ЭтоНезавершенныеРасчетыЧерезТерминал(Параметры.Операция)
			И Не НазначениеПлатежаУказываетНаЭквайринг
			И Не НазначениеПлатежаУказываетНаИнкассацию(Параметры.Операция) Тогда
			// Не найдено соглашение с банком по эквайрингу.
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	Иначе
		// Не найден договор эквайринга с банком
		Если Параметры.ПроверитьПрименимостьПравила
			И ОрганизацияИП И ЭтоНезавершенныеРасчетыЧерезТерминал(Параметры.Операция)
			И Не НазначениеПлатежаУказываетНаЭквайринг Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	НаборШаблонов = НовыйШаблоныКомиссия();
	СуммаУслугБанка = ВыделитьСуммуКомиссииВозвратаИзНазначенияПлатежа(Параметры.Операция.НазначениеПлатежа, НаборШаблонов);
	Если ЗначениеЗаполнено(СуммаУслугБанка) И СуммаУслугБанка <= Параметры.Операция.Сумма Тогда
		Результат.ХозяйственнаяОперация.Вставить("СуммаУслуг", СуммаУслугБанка);
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяАУСН(Параметры.ВладелецСчета.Организация, Параметры.Операция.ДатаИсполнения) Тогда
		НаборШаблонов = НовыйШаблонВозвратыПоЭквайрингу();
		СуммаВозврата = ВыделитьСуммуКомиссииВозвратаИзНазначенияПлатежа(Параметры.Операция.НазначениеПлатежа, НаборШаблонов);
		Если ЗначениеЗаполнено(СуммаВозврата) Тогда
			Результат.ХозяйственнаяОперация.Вставить("СуммаВозврата", СуммаВозврата);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоСБП = НазначениеПлатежаУказываетНаСБП
		Или Не (НазначениеПлатежаУказываетНаЭквайринг Или НашлиВидОплатыПоПроцентуКомиссии);
	Если Не ЗначениеЗаполнено(СуммаУслугБанка) И ЭтоСБП Тогда
		Если Результат.ХозяйственнаяОперация.Свойство("ВидОплаты")
			И ЗначениеЗаполнено(Результат.ХозяйственнаяОперация.ВидОплаты) Тогда
			Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ХозяйственнаяОперация.ВидОплаты, "Наименование");
			ЭтоВидОплатыПоСБП = СтрНайти(Наименование, НСтр("ru = 'СБП'")) > 0;
			Результат.ХозяйственнаяОперация.Вставить("РассчитыватьКомиссиюПоДаннымВидаОплаты", ЭтоВидОплатыПоСБП);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВнесениеПредпринимателемЛичныхСредств(Параметры)
	
	// Классификация по ISO2002
	// Family    = "RCCN"; // Received Cash Concentration
	// SubFamily = "COAT"; // Corporate Own Account Transfer
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ИспользоватьИнкассацию = Ложь; 
		
		ЭтоСчетПереводовФизическимЛицам   = БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет);
		ЭтоПоступлениеНаличныхВКассуБанка = ЭтоПоступлениеНаличныхВКассуБанка(Параметры.Операция)
			И Не ИспользоватьИнкассацию;
		ЭтоСамоИнкассация = ЭтоСамоИнкассация(Параметры);
		
		ВнесениеЛичныхСредствСКартыЧерезТерминал = ЭтоВнесениеНаличныхНаКартуЧерезТерминал(Параметры.Операция);
		
		ЭтоНезавершенныеРасчеты = ЭтоНезавершенныеРасчетыЧерезТерминал(Параметры.Операция);
		ЭтоРасчетыТребование = ЭтоРасчетыТребование(Параметры.Операция);
		Если ЭтоНезавершенныеРасчеты И Не ЭтоПоступлениеНаличныхВКассуБанка Тогда
			ВидОперации =
				ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам");
			ХозяйственнаяОперацияЭквайринга = НовыйХозяйственнаяОперация();
			ХозяйственнаяОперацияЭквайринга.Вставить("ВидОперацииДокумента", ВидОперации);
			НайденДоговорЭквайринга = НайтиДоговорПоВидуОперации(
				ХозяйственнаяОперацияЭквайринга,
				Параметры,
				ВидОперации);
			Если НайденДоговорЭквайринга И ХозяйственнаяОперацияЭквайринга.Свойство("ВидОплаты") Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		Если  Не ЭтоСчетПереводовФизическимЛицам
			И Не ЭтоПоступлениеНаличныхВКассуБанка
			И Не ЭтоРасчетыТребование
			И Не ЭтоСамоИнкассация
			И Не ВнесениеЛичныхСредствСКартыЧерезТерминал Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		КонтрагентФизическоеЛицо = ЭтоФизическоеЛицо(Параметры, Параметры.СторонаКонтрагента);
		ПлательщикИПолучательОдноФизическоеЛицо = ПлательщикИПолучательОдноФизическоеЛицо(Параметры);
		
		Если КонтрагентФизическоеЛицо И ВнесениеЛичныхСредствСКартыЧерезТерминал
			И Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
			// Это оплата от покупателя-физического лица, без открытия банковского счета
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если ЭтоСчетПереводовФизическимЛицам И Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если ЭтоСамоИнкассация Или ВнесениеЛичныхСредствСКартыЧерезТерминал Тогда
			// Очистим, потому что там реквизиты (счет) ИП или банка, а не физ.лица.
			Параметры.Операция.ПлательщикИдентификаторы.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаОтИзвестногоПокупателя(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если НазначениеПлатежаУказываетНаВозврат(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратОтПоставщика(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не НазначениеПлатежаУказываетНаВозврат(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = ХозяйственнаяОперацияПоВидуДоговора(Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратОтНовогоПоставщика(Параметры)
	
	// Правило вызывается перед ХозяйственнаяОперацияОплатаОтНовогоПокупателя, чтобы не ошибиться
	// в определении вида договора для нового контрагента.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не НазначениеПлатежаУказываетНаВозврат(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПолучениеЗаймаОтКонтрагента(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияПолучениеЗаймаОтКонтрагента(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоров.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВозвратЗаймаКонтрагентом(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияВозвратЗаймаКонтрагентом(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоров.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагенту(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияУплатаПроцентовПоЗаймуКонтрагенту(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоров.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияУплатаПроцентовПоЗаймуКонтрагентом(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияУплатаПроцентовПоЗаймуКонтрагентом(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоров.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаОтНовогоПокупателя(Параметры)
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило); // Дежурное правило
	
	// Выполняем в том случае, если нет подходящих договоров
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаОтФакторинговойКомпании(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		Если Не БанковскиеПравила.ЭтоСчетРасчетовПоФакторингу(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	Результат.ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      1);
	Результат.ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", 1);
	Результат.ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов",     Параметры.Операция.Сумма);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПолучениеКредитаВБанке(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не ЭтоОперацияКредитБанка(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры, Перечисления.ВидыДоговоров.Прочее);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВзносВУставныйКапитал(Параметры)
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоИП = Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Если ЭтоИП Тогда 
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не НазначениеПлатежаУказываетНаВзносВУставныйКапитал(Параметры.Операция) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		КонтрагентФизическоеЛицо = ЭтоФизическоеЛицо(Параметры, Параметры.СторонаКонтрагента);
		Если Не КонтрагентФизическоеЛицо Тогда 
			ЭтоНезавершенныеРасчеты = ЭтоНезавершенныеРасчетыЧерезТерминал(Параметры.Операция);
			ЭтоПоступлениеНаличныхВКассуБанка = ЭтоПоступлениеНаличныхВКассуБанка(Параметры.Операция);
			Если ЭтоНезавершенныеРасчеты Или ЭтоПоступлениеНаличныхВКассуБанка Тогда 
				// Не устанавливаем контрагента, если в качестве плательщика выступает банк.
				// Вместо этого ищем учредителя в назначении платежа
				Параметры.Операция.ПлательщикИдентификаторы.Очистить();
				
				Учредитель = УчредительФизЛицоИзНазначенияПлатежа(Параметры);
				Если ЗначениеЗаполнено(Учредитель) Тогда 
					// Добавим идентификатор учредителя
					ДобавитьПлательщикуИдентификаторФизЛицаСоСсылкой(Параметры, Учредитель.Ссылка, Учредитель.Наименование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	КонтрагентФизическоеЛицо = ЭтоФизическоеЛицо(Параметры, Параметры.СторонаКонтрагента);
	Если КонтрагентФизическоеЛицо Тогда 
		УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	Иначе
		УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Общие

Функция ХозяйственнаяОперацияПоВидуДоговора(Параметры)
	
	// Служебная, следует вызывать из других ХозяйственнаяОперация...()
	// Проверяет, есть ли договоры, подходящие для переданного вида операции.
	// Если есть, то хозяйственная операция определяется переданным видом договора.
	
	Если Не ЗначениеЗаполнено(Параметры.Правило.ОсновнойВидОперации) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	НайденДоговор = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Параметры.Правило.ОсновнойВидОперации);
		
	Если Не НайденДоговор Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПереводМеждуСобственнымиСчетами(Параметры)
	
	// Классификация по ISO2002
	// Family    = 
	//  "ICCN"; // Issued Cash Concentration
	// или
	//  "RCCN"; // Received Cash Concentration
	// SubFamily = "ICCT"; // Intra Company Transfer
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец", Параметры.ВладелецСчета.Организация);
	
	ОписаниеСчетаПолучателя = НайтиСсылку(Отбор, Параметры, "БанковскийСчетКонтрагента");
	
	Если ОписаниеСчетаПолучателя <> Неопределено Тогда
		СчетПолучателя = ОписаниеСчетаПолучателя.Ссылка;
	Иначе
		Если Параметры.ПроверитьПрименимостьПравила Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		Иначе
			СчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	Результат.ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", СчетПолучателя);
	Результат.ХозяйственнаяОперация.Вставить("Контрагент",                Параметры.ВладелецСчета.Организация);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ПлательщикИПолучательОдноФизическоеЛицо(Параметры)
	
	// Проверим совпадение идентификаторов физического лица плательщика и получателя
	Для Каждого ИдентификаторПлательщика Из Параметры.Операция.ПлательщикИдентификаторы Цикл
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторФизическогоЛица(
			ИдентификаторПлательщика, Параметры.УчастникиОпераций)
			И Параметры.Операция.ПолучательИдентификаторы.Найти(ИдентификаторПлательщика) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.ФизическиеЛица"));
	
	ОписаниеСсылкиПлательщик = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция.ПлательщикИдентификаторы, Параметры.УчастникиОпераций, Отбор);
	ОписаниеСсылкиПолучатель = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция.ПолучательИдентификаторы, Параметры.УчастникиОпераций, Отбор);
	ПлательщикИПолучательОдноФизическоеЛицо =
		ОписаниеСсылкиПлательщик <> Неопределено И ОписаниеСсылкиПолучатель <> Неопределено
		И ОписаниеСсылкиПлательщик.Ссылка = ОписаниеСсылкиПолучатель.Ссылка;
	
	Возврат ПлательщикИПолучательОдноФизическоеЛицо;
	
КонецФункции

Функция ПлательщикИПолучательОдноФизЛицоПоСхемеPNNM(Параметры)
	
	// Иногда в операциях в качестве ИНН получателя указан ИНН банка.
	// Удалим идентификаторы, не соответствующие физ.лицу, и проверим оставщиеся идентификаторы.
	// Если по ним нельзя получить такое же физ.лицо, как и по идентификаторам плательщика,
	// то необходимо полностью очистить все идентификаторы. Получатель в этом виде операции не обязателен
	// - лучше ничего не заполнить, чем заполнить (и возможно создать) иное физ.лицо.
	
	ОчиститьИдентификаторыНеСоответствующиеФизЛицу(Параметры, "Получатель");
	
	Возврат ПлательщикИПолучательОдноФизическоеЛицо(Параметры);
	
КонецФункции

Функция КонтрагентУстановлен(Параметры)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
	
	Возврат НайтиСсылку(Отбор, Параметры, "Контрагент") <> Неопределено;
	
КонецФункции

Функция ФизлицоУстановлено(Параметры, СторонаКонтрагента = Истина)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.ФизическиеЛица"));
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция[?(СторонаКонтрагента, Параметры.СторонаКонтрагента, "Плательщик") + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор);
	
	Возврат ОписаниеСсылки <> Неопределено;
	
КонецФункции

Функция ЕстьИдентификаторКарты(Параметры, СторонаКонтрагента)
	
	Результат = Ложь;
	
	Для Каждого Идентификатор Из Параметры.Операция[СторонаКонтрагента + "Идентификаторы"] Цикл
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторКарты(Идентификатор, Параметры.УчастникиОпераций) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФизическоеЛицо(Параметры, СторонаКонтрагента)
	
	Для каждого Идентификатор Из Параметры.Операция[СторонаКонтрагента + "Идентификаторы"] Цикл
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторФизическогоЛица(Идентификатор, Параметры.УчастникиОпераций) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоЮридическоеЛицо(Параметры, СторонаКонтрагента)
	
	Для каждого Идентификатор Из Параметры.Операция[СторонаКонтрагента + "Идентификаторы"] Цикл
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторЮридическогоЛица(Идентификатор, Параметры.УчастникиОпераций) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавимПлательщикуИдентификаторPNNM(Параметры)
	
	Отбор = Новый Структура("Тип", Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеСсылкиПлательщик = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция.ПлательщикИдентификаторы, Параметры.УчастникиОпераций, Отбор);
	
	Если ОписаниеСсылкиПлательщик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеСсылкиПлательщик.Ссылка, "Наименование");
	ПлательщикИдентификаторPNNM = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
		Параметры.УчастникиОпераций, Наименование);
	
	Параметры.Операция.ПлательщикИдентификаторы.Добавить(ПлательщикИдентификаторPNNM);
	Параметры.Операция.ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		Параметры.Операция.ПлательщикИдентификаторы);
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыНеСоответствующиеФизЛицу(Параметры, СторонаКонтрагента)
	
	МассивКУдалению = Новый Массив;
	МассивИдентификаторов = Параметры.Операция[СторонаКонтрагента + "Идентификаторы"];
	Для Индекс = 0 По МассивИдентификаторов.ВГраница() Цикл
		Идентификатор = МассивИдентификаторов[Индекс];
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторФизическогоЛица(
			Идентификатор, Параметры.УчастникиОпераций) Тогда
			Продолжить;
		КонецЕсли;
		
		Схема = "TXID";
		Если СтрНачинаетсяС(Идентификатор, Схема) Тогда
			МассивКУдалению.Добавить(Индекс);
			Продолжить;
		КонецЕсли;
		
		Схема = "BBAN";
		Если СтрНачинаетсяС(Идентификатор, Схема) Тогда
			НомерСчета = Сред(Идентификатор, СтрДлина(Схема) + 1, БанковскиеПравила.ДлинаНомераСчета());
			БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерСчета);
			Если БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет)
				Или БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивКУдалению.Добавить(Индекс);
	КонецЦикла;
	
	КоличествоКУдалению = МассивКУдалению.Количество();
	Для Счетчик = 1 По КоличествоКУдалению Цикл
		ИндексКУдалению = МассивКУдалению[КоличествоКУдалению - Счетчик];
		МассивИдентификаторов.Удалить(ИндексКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыБанкСчетаНеСоответствующиеЮрЛицу(Параметры, СторонаКонтрагента)
	
	МассивКУдалению = Новый Массив;
	МассивИдентификаторов = Параметры.Операция[СторонаКонтрагента + "Идентификаторы"];
	Для Индекс = 0 По МассивИдентификаторов.ВГраница() Цикл
		Идентификатор = МассивИдентификаторов[Индекс];
		Схема = "BBAN";
		Если СтрНачинаетсяС(Идентификатор, Схема) Тогда
			НомерСчета = Сред(Идентификатор, СтрДлина(Схема) + 1, БанковскиеПравила.ДлинаНомераСчета());
			БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(НомерСчета);
			Если БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет)
				Или БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет) Тогда
				МассивКУдалению.Добавить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКУдалению = МассивКУдалению.Количество();
	Для Счетчик = 1 По КоличествоКУдалению Цикл
		ИндексКУдалению = МассивКУдалению[КоличествоКУдалению - Счетчик];
		МассивИдентификаторов.Удалить(ИндексКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйКешОбщихПараметров()
	
	Результат = Новый Структура();
	Результат.Вставить("ИспользоватьВалютныйУчет",                  ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	Результат.Вставить("ИспользоватьСтатьиДвиженияДенежныхСредств", Истина);
	Результат.Вставить("ВалютаРегламентированногоУчета",
		УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
	Результат.Вставить("ИспользоватьИнкассацию",                    Ложь); // Константы.ИспользоватьИнкассацию.Получить()
	
	// Заполняются по мере необходимости
	// в ОпределитьВидДоговораСКонтрагентом()
	Результат.Вставить("ВидыДоговоровПоВидамОпераций",              Новый Соответствие);
	// в ЗаполнитьПустыеРеквизитыНовогоОбъекта()
	Результат.Вставить("РеквизитыНовыхОбъектовИнформационнойБазы",  Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПоступлениеНаличныхВКассуБанка(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетКассыКредитнойОрганизации(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоДокументПоступленияНаличныхВБанк(Операция.ШифрОперации)
	
КонецФункции

Функция ЭтоСнятиеНаличныхВКассеБанка(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетКассыКредитнойОрганизации(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоДокументВыдачиБанкомНаличных(Операция.ШифрОперации);
	
КонецФункции

Функция ЭтоСнятиеНаличныхСКартыЧерезТерминал(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов302(Операция.БалансовыйСчет)
		И (БанковскиеПравила.ЭтоДокументВыдачиБанкомНаличных(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоРасчетыСПрименениемБанковскихКарт(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоБанковскийОрдер(Операция.ШифрОперации));
	
КонецФункции

Функция ЭтоОплатаКартой(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(Операция.БалансовыйСчет)
		И БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации);
	
КонецФункции

Функция ЭтоСамоИнкассация(Параметры)
	Перем СчетНашейСтороны, СчетПротивоположнойСтороны;
	
	Стороны = Новый Структура;
	Стороны.Вставить("Поступило", "Получатель");
	Стороны.Вставить("Списано",   "Плательщик");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец", Параметры.ВладелецСчета.Организация);
	
	ИмяНашейСтороны = ?(Параметры.Операция.ПоступилоСписано = "Поступило", Стороны.Поступило, Стороны.Списано);
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция[ИмяНашейСтороны + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		СчетНашейСтороны = ОписаниеСсылки.Ссылка;
	КонецЕсли;
	
	ИмяПротивоположнойСтороны = ?(Параметры.Операция.ПоступилоСписано = "Поступило", Стороны.Списано, Стороны.Поступило);
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция[ИмяПротивоположнойСтороны + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		СчетПротивоположнойСтороны = ОписаниеСсылки.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетНашейСтороны)
		И СчетНашейСтороны = Параметры.ВладелецСчета.БанковскийСчет
		И СчетНашейСтороны = СчетПротивоположнойСтороны Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоВнесениеНаличныхНаКартуЧерезТерминал(Операция)
	
	ЭтоНезавершенныеРасчетыБанкКартаКасса = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов302(Операция.БалансовыйСчет)
		И (БанковскиеПравила.ЭтоДокументПоступленияНаличныхВБанк(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоРасчетыСПрименениемБанковскихКарт(Операция.ШифрОперации));
	ЭтоНезавершенныеРасчетыЧерезТерминал = ЭтоНезавершенныеРасчетыЧерезТерминал(Операция);
	ЭтоВнутрибанковскиеРаспределенияМеморОрдер = БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации)
		И БанковскиеПравила.ЭтоСчетРасчетовВнутрибанковскиеРаспределения(Операция.БалансовыйСчет);
	
	Возврат ЭтоНезавершенныеРасчетыБанкКартаКасса
		Или ЭтоНезавершенныеРасчетыЧерезТерминал
		Или ЭтоВнутрибанковскиеРаспределенияМеморОрдер;
	
КонецФункции

Функция ИнкассированнаяНаличность(Операция)
	
	Возврат (БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3022Пассив(Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Операция.БалансовыйСчет))
		И БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации);
	
КонецФункции

Функция ЭтоНезавершенныеРасчетыЧерезТерминал(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Актив(Операция.БалансовыйСчет)
		И (БанковскиеПравила.ЭтоБанковскийОрдер(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации));
	
КонецФункции

Функция ЭтоРасчетыТребование(Операция)
	
	Возврат БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Актив(Операция.БалансовыйСчет)
				И БанковскиеПравила.ЭтоПлатежноеТребование(Операция.ШифрОперации)
			Или БанковскиеПравила.ЭтоСчетРасчетовСБанком(Операция.БалансовыйСчет)
				И БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации);
	
КонецФункции

Функция ВыплатаЗаработнойПлатыПоРеестру(Операция, УчитыватьОчередность = Истина)
	
	ЭтоПлатежноеПоручение = БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации);
	ЭтоМемориальныйОрдер  = БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации);
	
	ЭтоОбязательстваПоПрочимОперациям = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Операция.БалансовыйСчет);
	
	ОплатаЧерезКоррСчет = ПустаяСтрока(Операция.БалансовыйСчет)
		И ПустаяСтрока(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Операция.ПолучательРеквизиты, "РасСчет", ""))
		И Не ПустаяСтрока(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Операция.ПолучательРеквизиты, "КорСчет", ""));
	
	ОчередностьОплатаТруда = Операция.Очередность = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда();
	ЭтоСчетНезавершенныхРасчетов3023Пассив = БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(
		Операция.БалансовыйСчет);
	ЭтоРасчетыПоПереводамДенежныхСредств =
		БанковскиеПравила.ЭтоРасчетыПоПереводамДенежныхСредств(Операция.БалансовыйСчет);
	
	ЭтоПеречислениеЗаплаты = ОплатаЧерезКоррСчет
		Или ЭтоРасчетыПоПереводамДенежныхСредств Или ЭтоСчетНезавершенныхРасчетов3023Пассив;
	Если УчитыватьОчередность Тогда
		ЭтоПеречислениеЗаплатыПоОчередности = ОчередностьОплатаТруда И ЭтоПеречислениеЗаплаты;
	Иначе
		ЭтоПеречислениеЗаплатыПоОчередности = ЭтоПеречислениеЗаплаты;
	КонецЕсли;
	
	ОплатаЧерезКоррСчетПустаяОчередность = Не ЗначениеЗаполнено(Операция.Очередность) И ОплатаЧерезКоррСчет;
	
	Возврат ЭтоПлатежноеПоручение
		И (ЭтоОбязательстваПоПрочимОперациям
			Или ЭтоПеречислениеЗаплатыПоОчередности)
		Или ЭтоМемориальныйОрдер И ОплатаЧерезКоррСчетПустаяОчередность;
	
КонецФункции

Функция ВыплатаПоРееструСамозанятым(Операция)

	ЭтоПлатежноеПоручение = БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации);
	ЭтоМемориальныйОрдер  = БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации);
	
	ЭтоОбязательстваПоПрочимОперациям = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Операция.БалансовыйСчет);
	
	ОплатаЧерезКоррСчет = ПустаяСтрока(Операция.БалансовыйСчет)
		И ПустаяСтрока(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Операция.ПолучательРеквизиты, "РасСчет", ""))
		И Не ПустаяСтрока(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Операция.ПолучательРеквизиты, "КорСчет", ""));
	
	ОчередностьПоУмолчанию = Операция.Очередность = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчанию();
	ЭтоСчетНезавершенныхРасчетов30232 = ОчередностьПоУмолчанию
		И (ОплатаЧерезКоррСчет Или БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(Операция.БалансовыйСчет));
	
	НазначениеПлатежаСодержитУпоминаниеРеестра = НазначениеПлатежаУказываетНаРеестрСамозанятых(Операция);
	
	ОплатаЧерезКоррСчетПустаяОчередность = Не ЗначениеЗаполнено(Операция.Очередность) И ОплатаЧерезКоррСчет;
	
	Возврат ЭтоПлатежноеПоручение
		И (ЭтоОбязательстваПоПрочимОперациям
			Или ЭтоСчетНезавершенныхРасчетов30232
			Или НазначениеПлатежаСодержитУпоминаниеРеестра)
		Или ЭтоМемориальныйОрдер И ОплатаЧерезКоррСчетПустаяОчередность;

КонецФункции

Функция ЭтоОперацияПоКорпоративнойКарте(Операция, ВладелецСчета = Неопределено)
	
	Если Операция.Очередность = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоОбязательстваПоПрочимОперациям = БанковскиеПравила.ЭтоОбязательстваПоПрочимОперациям(Операция.БалансовыйСчет);
	ЭтоСчетРасчетовСБанком     = БанковскиеПравила.ЭтоСчетРасчетовСБанком(Операция.БалансовыйСчет);
	ЭтоБанковскийОрдер         = БанковскиеПравила.ЭтоБанковскийОрдер(Операция.ШифрОперации);
	ЭтоБалансовыйСчетКорпКарты = БанковскиеПравила.ЭтоСчетКассыКредитнойОрганизации(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов302(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка(Операция.БалансовыйСчет);
	
	ЭтоВнутрибанковскиеРасчетыОбязательства = ЭтоОбязательстваПоПрочимОперациям Или ЭтоСчетРасчетовСБанком;
	
	Если ЭтоВнутрибанковскиеРасчетыОбязательства И ЭтоБанковскийОрдер
		И ВладелецСчета <> Неопределено
		И ВладелецСчета.СчетБанк <> ПланыСчетов.Управленческий.Банк Тогда
		// На основном расчетном счете встречаются разные операции
		// и отражение операции по корп.счету по описанию может быть похоже на отражение комиссии банка.
		// Поэтому дополнительно проверим наличие карты в Назначение платежа, чтобы разделить эти операции.
		ЭтоВнутрибанковскиеРасчетыОбязательства = Ложь;
		Для Каждого КартаПодотчетногоЛица Из ВладелецСчета.КорпоративныеКартыПодотчетныхЛиц Цикл
			НомерКарты = КартаПодотчетногоЛица.Ключ;
			Приоритет = ПриоритетПоискаНомерКартыВНазначениеПлатежа(НомерКарты, Операция.НазначениеПлатежа);
			Если Приоритет > 0 Тогда // нашли номер карты в Назначение платежа
				ЭтоВнутрибанковскиеРасчетыОбязательства = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭтоВнутрибанковскиеРасчетыОбязательства Тогда
			// Номер карты не нашли, но возможно не все номера карт привязали к счету,
			// поэтому проверим, что назначение платежа не содержит упоминание комиссии.
			ЭтоВнутрибанковскиеРасчетыОбязательства = Не НазначениеПлатежаУказываетНаКомиссиюБанка(Операция);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоШифрОперацииКорпКарты = ЭтоБанковскийОрдер
		Или БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации)
		Или БанковскиеПравила.ЭтоДокументВыдачиБанкомНаличных(Операция.ШифрОперации)
		Или БанковскиеПравила.ЭтоРасчетыСПрименениемБанковскихКарт(Операция.ШифрОперации)
		Или БанковскиеПравила.ЭтоМемориальныйОрдер(Операция.ШифрОперации);
	
	ЭтоОплатаОтПокупателя = БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации)
		И БанковскиеПравила.ЭтоСчетРасчетовФилиалаБанкаСКлиентамиБанка(Операция.БалансовыйСчет);
	
	Возврат ЭтоШифрОперацииКорпКарты
		И (ЭтоВнутрибанковскиеРасчетыОбязательства Или ЭтоБалансовыйСчетКорпКарты И Не ЭтоОплатаОтПокупателя);
	
КонецФункции

Функция КорпоративныеКартыПодотчетныхЛиц(Организация, БанковскийСчет, СчетКорпоративныхРасчетов)
	
	Результат = Новый Соответствие;
	
	Если Не СчетКорпоративныхРасчетов Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорпоративныеКарты.НомерКарты КАК НомерКарты,
	|	КорпоративныеКарты.ПодотчетноеЛицо КАК ПодотчетноеЛицо
	|ИЗ
	|	РегистрСведений.КорпоративныеКарты КАК КорпоративныеКарты
	|ГДЕ
	|	КорпоративныеКарты.БанковскийСчет = &БанковскийСчет
	|	И КорпоративныеКарты.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.НомерКарты, Выборка.ПодотчетноеЛицо);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоОперацияКредитБанка(Операция)
	
	ЭтоБалансовыйСчетКредитБанкаЮрЛицу = БанковскиеПравила.ЭтоСчетКредитаБанка(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДо30Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДо90Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДо180Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДоГода(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанкаНаСрокДо3Лет(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка401(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка403НаСрокДо30Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка404НаСрокДо90Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка405НаСрокДо180Дней(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка406НаСрокДоГода(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка407НаСрокДо3Лет(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетКредитаБанка408НаСрокСвыше3Лет(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетПросроченногоКредита(Операция.БалансовыйСчет);
	
	Возврат ЭтоБалансовыйСчетКредитБанкаЮрЛицу;
	
КонецФункции

Функция ЭтоОперацияУплатаПроцентовПоКредиту(Операция)
	
	ЭтоБалансовыйСчетПроцентовПоКредиту = БанковскиеПравила.ЭтоСчетПроцентовПоКредиту(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетПроцентовПоПросроченномуКредиту(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетПроцентовПоПросроченномуКредитуИП(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоРасчетыПоПроцентамПоРазмещеннымДенСредствам(Операция.БалансовыйСчет);
	
	Возврат ЭтоБалансовыйСчетПроцентовПоКредиту;
	
КонецФункции

Функция ЭтоОперацияВыдачаЗаймаКонтрагенту(Операция)
	
	ЭтоБалансовыйСчетВыдачаЗаймаКонтрагенту = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция)
		Или БанковскиеПравила.ЭтоСчетВнутрибанковскиеТребованияПоПереводамКлиентов(Операция.БалансовыйСчет);
	
	Возврат ЭтоБалансовыйСчетВыдачаЗаймаКонтрагенту И НазначениеПлатежаУказываетНаПолучениеВыдачаЗайма(Операция);
	
КонецФункции

Функция ЭтоОперацияВозвратЗаймаКонтрагенту(Операция)
	
	ЭтоБалансовыйСчетВыдачаЗаймаКонтрагенту = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция)
		Или БанковскиеПравила.ЭтоСчетВнутрибанковскиеТребованияПоПереводамКлиентов(Операция.БалансовыйСчет);
	
	Возврат ЭтоБалансовыйСчетВыдачаЗаймаКонтрагенту И НазначениеПлатежаУказываетНаВозвратЗайма(Операция);
	
КонецФункции

Функция ЭтоОперацияПолучениеЗаймаОтКонтрагента(Операция)
	
	ЭтоБалансовыйСчетПолучениеЗаймаОтКонтрагента = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция)
		Или БанковскиеПравила.ЭтоКассаКредитнойОрганизации(Операция.БалансовыйСчет);
	
	Возврат ЭтоБалансовыйСчетПолучениеЗаймаОтКонтрагента И НазначениеПлатежаУказываетНаПолучениеВыдачаЗайма(Операция);
	
КонецФункции

Функция ЭтоОперацияВозвратЗаймаКонтрагентом(Операция)
	
	ЭтоБалансовыйСчетВозвратЗаймаКонтрагентом = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция);
	
	Возврат ЭтоБалансовыйСчетВозвратЗаймаКонтрагентом И НазначениеПлатежаУказываетНаВозвратЗайма(Операция);
	
КонецФункции

Функция ЭтоОперацияУплатаПроцентовПоЗаймуКонтрагенту(Операция)
	
	ЭтоБалансовыйСчетУплатаПроцентовПоЗаймуКонтрагенту = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция);
	
	Возврат ЭтоБалансовыйСчетУплатаПроцентовПоЗаймуКонтрагенту
		И НазначениеПлатежаУказываетНаУплатаПроцентовПоЗайму(Операция);
	
КонецФункции

Функция ЭтоОперацияУплатаПроцентовПоЗаймуКонтрагентом(Операция)
	
	ЭтоБалансовыйСчетУплатаПроцентовПоЗаймуКонтрагентом = ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция);
	
	Возврат ЭтоБалансовыйСчетУплатаПроцентовПоЗаймуКонтрагентом
		И НазначениеПлатежаУказываетНаУплатаПроцентовПоЗайму(Операция);
	
КонецФункции

Функция ЭтоСчетУчаствуетВЗаймах(Операция)
	
	Результат = БанковскиеПравила.ЭтоПрочийСчет(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетНегосударственныхОрганизаций(Операция.БалансовыйСчет)
		Или БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Актив(Операция.БалансовыйСчет);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоРасширенныйСчетУчаствуетВЗаймах(Операция)
	
	Результат = ЭтоСчетУчаствуетВЗаймах(Операция)
		Или БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов3023Пассив(Операция.БалансовыйСчет);
	
	Возврат Результат;
	
КонецФункции

// Добавляет для плательщика идентификатор физического лица с присвоением ссылки.
//
// Параметры:
//  Параметры - см. НовыйПараметрыОпределенияХозяйственнойОперации()
//  Ссылка - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты - физическое лицо в ИБ
//  Наименование - Строка - имя физического лица
//
Процедура ДобавитьПлательщикуИдентификаторФизЛицаСоСсылкой(Параметры, Ссылка, Наименование)
	
	ПлательщикИдентификаторФизЛица = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
		Параметры.УчастникиОпераций, Наименование);
	Параметры.Операция.ПлательщикИдентификаторы.Добавить(ПлательщикИдентификаторФизЛица);
	Параметры.Операция.ПлательщикИдентификаторы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		Параметры.Операция.ПлательщикИдентификаторы);
		
	ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
		ПлательщикИдентификаторФизЛица, Параметры.УчастникиОпераций);
	Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"] = Неопределено; // очистим кэш
	
	ОписаниеСсылкиПлательщик = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(Ссылка, 
		Параметры.УчастникиОпераций, ОписаниеИдентификатора);
	ОписаниеСсылкиПлательщик.Ссылка = Ссылка;
	ОписаниеСсылкиПлательщик.СхемыИдентификации.Вставить(ОписаниеИдентификатора.Схема, Истина);
	
	ОписаниеИдентификатора.Ссылки.Вставить(ОписаниеСсылкиПлательщик.Ссылка, Истина);
	
КонецПроцедуры

#КонецОбласти

Функция ДопАналитикаВидовОпераций()
	
	АналитикаВидовОпераций = Новый Соответствие;
	
	ВозвратКредита = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам;
	
	АналитикаВидовОпераций.Вставить(ВозвратКредита, Новый Структура);
	
	Возврат АналитикаВидовОпераций;
	
КонецФункции

Функция ДопАналитикаПоВидуОперации(ВидОперацииДокумента)
	
	Аналитика = ДопАналитикаВидовОпераций();
	
	Возврат Аналитика[ВидОперацииДокумента];
	
КонецФункции

#КонецОбласти

#Область ПоискУчастниковОпераций

// Следует использовать при распознавании хозяйственных операций.
// В отличие от методов из ИдентификацияУчастниковБанковскихОпераций,
// методы из этой области сохраняют в параметрах определения хозяйственной операции
// к какой стороне операции относится каждая ссылка.
// Это позволяет корректно заполнить реквизиты новых объектов, не участвующие в идентификации ссылок,
// сведениями, содержащимися в выписке.
// Например, с помощью этого подхода заполняется город банка или наименование контрагента.
// 
// При вызове методов из области ПоискУчастниковОпераций еще нет уверенности, что ссылка будет включена в распознанную операцию.
// Поэтому непосредственно заполнение реквизитов новых объектов выполняется по завершении распознавания хозяйственной операции,
// только для тех ссылок, которые фактически включены в распознанную операцию - см. ЗаполнитьРеквизитыНовыхОбъектов()
//
// Параметры:
//  Отбор           - Структура - для передачи в ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку()
//  Параметры       - см. "НовыйПараметрыОпределенияХозяйственнойОперации"
//  ИмяПоля         - строка, используется для записи в протокол и получения данных документа
Функция НайтиСсылку(Отбор, Параметры, ИмяПоля, СторонаКонтрагента = Истина)
	
	ПротоколВыбора = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция[?(СторонаКонтрагента, Параметры.СторонаКонтрагента, "Плательщик") + "Идентификаторы"],
		Параметры.УчастникиОпераций, 
		Отбор,
		,// ПриоритетнаяСсылка
		ПротоколВыбора,
		Параметры[?(СторонаКонтрагента, Параметры.СторонаКонтрагента, "Плательщик") + "КешИдентификаторов"]);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		
		ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, ОписаниеСсылки.Ссылка, ?(СторонаКонтрагента, Параметры.СторонаКонтрагента, "Плательщик"));
		
	КонецЕсли;
	
	Параметры.ПротоколыВыбораСсылок.Вставить(ИмяПоля, ПротоколВыбора);
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Функция НайтиСсылки(Отбор, Параметры)
	
	Возврат ИдентификацияУчастниковБанковскихОпераций.НайтиСсылки(
		Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор,
		,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
	
КонецФункции

Функция ВыбратьСсылку(НайденныеСсылки, Параметры, ИмяПоля)
	
	ПротоколВыбора = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.ВыбратьСсылку(
		НайденныеСсылки,
		Параметры.УчастникиОпераций,
		,// ПриоритетнаяСсылка
		ПротоколВыбора,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, ОписаниеСсылки.Ссылка, Параметры.СторонаКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПротоколВыбора) Тогда
		Параметры.ПротоколыВыбораСсылок.Вставить(ИмяПоля, ПротоколВыбора);
	КонецЕсли;
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Функция СсылкаНового(Отбор, Тип, Параметры)
	
	Если Тип = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И Параметры.КешПроверенныхСвойствПравил.Свойство("ДоговорыКонтрагентовПоВидам") Тогда
		// При добавлении новой ссылки кеш устарел
		Параметры.КешПроверенныхСвойствПравил.Удалить("ДоговорыКонтрагентовПоВидам");
	КонецЕсли;
	
	Ссылка = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
		Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"],
		Отбор, 
		Тип,
		Параметры.УчастникиОпераций,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
		
	ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, Ссылка, Параметры.СторонаКонтрагента);
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#Область Контрагенты

// Здесь под "контрагентами" понимаем другого участника операции.
//
// Это
// - плательщик, если речь идет о поступлении денег
// - получатель денег, если о списании.
//
// Как правило, это элемент справочника Контрагенты, но не только, например ФизическиеЛица или Организации.

Функция НайтиГосОрган(ХозяйственнаяОперация, Параметры, ВидДоговора = Неопределено)
	
	ВариантыГосОрган = Новый Массив; // Для того, чтобы найти элементы справочника, у которых флаг ГосОрган не установлен ошибочно
	ВариантыГосОрган.Добавить(Перечисления.ВидыКонтрагентов.ГосударственныйОрган);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",                       Тип("СправочникСсылка.Контрагенты"));
	
	Для Каждого ЭтоГосОрган Из ВариантыГосОрган Цикл
	
		Отбор.Вставить("ВидКонтрагента", ЭтоГосОрган);
	
		Если ЗначениеЗаполнено(ВидДоговора) Тогда
			
			РезультатПоиска  = НайтиДоговорыКонтрагентов(Отбор, Параметры);
			ОписаниеДоговора = ВыбратьСсылку(РезультатПоиска, Параметры, "ДоговорКонтрагента");
			
			Если ОписаниеДоговора = Неопределено Тогда
				Возврат Ложь;
			Иначе
				УстановитьНайденныйДоговор(ХозяйственнаяОперация, ОписаниеДоговора, Параметры);
				Возврат Истина;
			КонецЕсли;
			
		Иначе
			
			ОписаниеКонтрагента = НайтиСсылку(Отбор, Параметры, "Контрагент");
			Если ОписаниеКонтрагента <> Неопределено Тогда
				ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьНайденныйДоговор(ХозяйственнаяОперация, ОписаниеДоговора, Параметры)
	
	ХозяйственнаяОперация.Вставить("Контрагент",         ОписаниеДоговора.ОписаниеСсылки.Владелец);
	ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", ОписаниеДоговора.Ссылка);
	
	Если ЗначениеЗаполнено(ОписаниеДоговора.ОписаниеСсылки.ВидОплаты) Тогда
		ХозяйственнаяОперация.Вставить("ВидОплаты", ОписаниеДоговора.ОписаниеСсылки.ВидОплаты);
	КонецЕсли;
	
	Если Параметры.ПротоколыВыбораСсылок.Свойство("ДоговорКонтрагента") Тогда
		Параметры.ПротоколыВыбораСсылок.Вставить("Контрагент", Параметры.ПротоколыВыбораСсылок.ДоговорКонтрагента); // Контрагента определили по договору
	КонецЕсли;
	
	ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, ХозяйственнаяОперация.Контрагент, Параметры.СторонаКонтрагента);// Выбирается неявно - через Владелец
	
КонецПроцедуры

Процедура ДобавитьОтбор(ОтборДоговоров, Свойство, Значение = Неопределено)
	
	Если ОтборДоговоров = Неопределено Тогда
		ОтборДоговоров = Новый Структура;
	КонецЕсли;
	
	ОтборДоговоров.Вставить(Свойство, Значение);
	
КонецПроцедуры

Функция НайтиДоговорПоВидуОперации(ХозяйственнаяОперация, Параметры, ВидОперации, ОтборДоговоров = Неопределено)
	
	ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(ВидОперации, Параметры.КешОбщихПараметров);
	
	Если Не ЗначениеЗаполнено(ВидыДоговоров) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Поиск договора по виду операции используется в разных правилах.
	// Поэтому как только понадобится искать договор по виду операции,
	// составим и поместим в кеш все договоры в разрезе видов операций.
	Если Параметры.КешПроверенныхСвойствПравил.Свойство("ДоговорыКонтрагентовПоВидам") Тогда
		ДоговорыПоВидам = Параметры.КешПроверенныхСвойствПравил.ДоговорыКонтрагентовПоВидам;
	Иначе
		ДоговорыПоВидам = Новый Структура;
		ДоговорыПоВидам.Вставить("УстановленныеОсновными", Новый Соответствие);
		ДоговорыПоВидам.Вставить("Обычные",                Новый Соответствие);
		
		Если ХозяйственнаяОперация.Свойство("Контрагент") И ЗначениеЗаполнено(ХозяйственнаяОперация.Контрагент) Тогда
			ДобавитьОтбор(ОтборДоговоров, "Владелец", ХозяйственнаяОперация.Контрагент);
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из НайтиДоговорыКонтрагентов(ОтборДоговоров, Параметры) Цикл
			
			ОписаниеСсылки = КлючИЗначение.Значение.ОписаниеСсылки;
			УстановленОсновным = ОписаниеСсылки.УстановленОсновным;
			ВидДоговора        = ОписаниеСсылки.ВидДоговора;
			
			ОтношениеКОсновным = ?(УстановленОсновным, "УстановленныеОсновными", "Обычные");
			
			НайденныеСсылки = ДоговорыПоВидам[ОтношениеКОсновным][ВидДоговора];
			
			Если НайденныеСсылки = Неопределено Тогда
				НайденныеСсылки = Новый Соответствие;
				ДоговорыПоВидам[ОтношениеКОсновным].Вставить(ВидДоговора, НайденныеСсылки);
			КонецЕсли;
			НайденныеСсылки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла;
		Параметры.КешПроверенныхСвойствПравил.Вставить("ДоговорыКонтрагентовПоВидам", ДоговорыПоВидам);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДоговорыПоВидам.УстановленныеОсновными) И Не ЗначениеЗаполнено(ДоговорыПоВидам.Обычные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем договоры
	ВидыОтношенияКОсновным = Новый Массив;
	ВидыОтношенияКОсновным.Добавить("УстановленныеОсновными"); // сначала ищем среди основных
	ВидыОтношенияКОсновным.Добавить("Обычные");
	Для Каждого ОтношениеКОсновным Из ВидыОтношенияКОсновным Цикл
		Для Каждого ВидДоговора Из ВидыДоговоров Цикл
			НайденныеСсылки = ДоговорыПоВидам[ОтношениеКОсновным][ВидДоговора];
			Если НайденныеСсылки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеДоговора = ВыбратьСсылку(НайденныеСсылки, Параметры, "ДоговорКонтрагента");
			Если ОписаниеДоговора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			УстановитьНайденныйДоговор(ХозяйственнаяОперация, ОписаниеДоговора, Параметры);
			Возврат Истина;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьБанк(ХозяйственнаяОперация, Параметры, ВидДоговора = Неопределено)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",                       Тип("СправочникСсылка.Контрагенты"));
	Отбор.Вставить("ВидКонтрагента",			Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
	
	ПоискКонтрагенты = НайтиСсылки(Отбор, Параметры);
	
	Если Не ЗначениеЗаполнено(ПоискКонтрагенты) Тогда
		// Возможно ИНН банка не заполнен, поищем его через банковский счет.
		Отбор = Новый Структура;
		Отбор.Вставить("Тип", Тип("СправочникСсылка.БанковскиеСчета"));
		Отбор.Вставить("ВалютаДенежныхСредств", Параметры.ВладелецСчета.ВалютаСчета);
		ОписаниеСчета = НайтиСсылку(Отбор, Параметры, "БанковскийСчетКонтрагента");
		
		Если ОписаниеСчета = Неопределено Тогда
			УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора);
		Иначе
			ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеСчета.ОписаниеСсылки.Владелец);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ВидДоговора = Неопределено Тогда
		ОписаниеКонтрагента = ВыбратьСсылку(ПоискКонтрагенты, Параметры, "Контрагент");
		ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
		Возврат;
	КонецЕсли;
	
	// Найдем или создадим договор
	Контрагент = Неопределено;
	Договор    = Неопределено;
	
	// Найдем договор этого вида. Возможно, и с контрагентом определимся.
	ОтборДоговор = Новый Структура;
	ОтборДоговор.Вставить("Тип", Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	Для Каждого ОписаниеКонтрагента Из ПоискКонтрагенты Цикл
		ОтборДоговор.Вставить("Владелец", ОписаниеКонтрагента.Ссылка);
		ОписаниеДоговора = НайтиСсылку(ОтборДоговор, Параметры, "ДоговорКонтрагента");
		Если ОписаниеДоговора <> Неопределено Тогда
			Контрагент = ОписаниеДоговора.Владелец;
			Договор    = ОписаниеДоговора.Ссылка;
			Параметры.ПротоколыВыбораСсылок.Вставить("Контрагент", Параметры.ПротоколыВыбораСсылок.ДоговорКонтрагента); // Контрагента определили по договору
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Контрагент = Неопределено Тогда
		ОписаниеКонтрагента = ВыбратьСсылку(ПоискКонтрагенты, Параметры, "Контрагент");
		Контрагент = ОписаниеКонтрагента.Ссылка;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("Контрагент", Контрагент);
	
	Если Договор <> Неопределено Тогда
		ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", Договор);
	Иначе
		ОтборДоговор.Вставить("Владелец", Контрагент);
		УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговор, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФизическоеЛицо(ХозяйственнаяОперация, Параметры, ИмяПараметра = "Контрагент")
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.ФизическиеЛица"));
	
	СторонаКонтрагента = ИмяПараметра = "Контрагент";
	
	ОписаниеФизическогоЛица = НайтиСсылку(Отбор, Параметры, ИмяПараметра, СторонаКонтрагента);
	
	Если ОписаниеФизическогоЛица <> Неопределено Тогда
		
		ФизическоеЛицо = ОписаниеФизическогоЛица.Ссылка;
		
	Иначе
		
		ФизическоеЛицо = СсылкаНового(Отбор, Отбор.Тип, Параметры);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ХозяйственнаяОперация.Вставить(ИмяПараметра, ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовыйДоговорПоВидуОперации(ХозяйственнаяОперация, Параметры, Знач Отбор = Неопределено)
	
	// Договор будет вида по умолчанию
	ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(ХозяйственнаяОперация.ВидОперацииДокумента, Параметры.КешОбщихПараметров);
	Если Не ЗначениеЗаполнено(ВидыДоговоров) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДоговора = ВидыДоговоров[0];
	
	// Ищем контрагента
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	Иначе
		Отбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
	КонецЕсли;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
	
	ОписаниеКонтрагента = НайтиСсылку(Отбор, Параметры, "Контрагент");
		
	Если ОписаниеКонтрагента = Неопределено Тогда
		УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора);
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
	// Создадим только договор
	ОтборДоговор = Новый Структура;
	ОтборДоговор.Вставить("Владелец",    ОписаниеКонтрагента.Ссылка);
	ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
	УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговор, Параметры);
	
КонецПроцедуры

Функция НайтиДоговорыКонтрагентов(Отбор, Параметры)
	
	ОтборДоговор = ОтборДоговорКонтрагента(Параметры);
	Если ЗначениеЗаполнено(Отбор) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОтборДоговор, Отбор, Истина);
	КонецЕсли;
	
	Возврат НайтиСсылки(ОтборДоговор, Параметры);
	
КонецФункции

Процедура УстановитьБанковскийСчетКонтрагента(ХозяйственнаяОперация, Параметры)
	
	Если ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента") 
		Или Не ХозяйственнаяОперация.Свойство("Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = ОтборБанковскийСчетКонтрагента(ХозяйственнаяОперация.Контрагент, Параметры.ВладелецСчета.ВалютаСчета);
	
	ОписаниеСчета = НайтиСсылку(Отбор, Параметры, "БанковскийСчетКонтрагента");
		
	Если ОписаниеСчета = Неопределено Тогда
		УстановитьНовыйБанковскийСчетКонтрагента(ХозяйственнаяОперация, Отбор, Параметры);
	Иначе
		ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", ОписаниеСчета.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПоказателиРасчетов(ХозяйственнаяОперация, Параметры)
	
	Если Не ХозяйственнаяОперация.Свойство("ВидОперацииДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ХозяйственнаяОперация.ВидОперацииДокумента)
		И Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Параметры.КешОбщихПараметров.ВалютаРегламентированногоУчета;
	
	// ВалютаВзаиморасчетов
	ВалютаВзаиморасчетов = Неопределено;
	Если ХозяйственнаяОперация.Свойство("ДоговорКонтрагента")
		И ЗначениеЗаполнено(ХозяйственнаяОперация.ДоговорКонтрагента) Тогда
		ОписаниеДоговора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(
			ХозяйственнаяОперация.ДоговорКонтрагента,
			Параметры.УчастникиОпераций);
		Если ОписаниеДоговора <> Неопределено Тогда
			ВалютаВзаиморасчетов = ОписаниеДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = Параметры.ВладелецСчета.ВалютаСчета;
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация.Свойство("ВалютаВзаиморасчетов") Или ХозяйственнаяОперация.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетов Тогда
		ХозяйственнаяОперация.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		ХозяйственнаяОперация.Удалить("КурсВзаиморасчетов");
		ХозяйственнаяОперация.Удалить("КратностьВзаиморасчетов");
	КонецЕсли;
	
	// КурсВзаиморасчетов, КратностьВзаиморасчетов
	Если Не ХозяйственнаяОперация.Свойство("КурсВзаиморасчетов") 
		Или Не ХозяйственнаяОперация.Свойство("КратностьВзаиморасчетов") Тогда
		
		Если ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
			КурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Параметры.Операция.ДатаИсполнения);
			ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      КурсКратность.Курс);
			ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", КурсКратность.Кратность);
		Иначе
			ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      1);
			ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", 1);
		КонецЕсли;
		ХозяйственнаяОперация.Удалить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	// СуммаВзаиморасчетов
	Если Не ХозяйственнаяОперация.Свойство("СуммаВзаиморасчетов") Тогда
		
		Если Параметры.ВладелецСчета.ВалютаСчета <> ВалютаРегламентированногоУчета Тогда
			КурсКратностьВалютыПлатежа = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				Параметры.ВладелецСчета.ВалютаСчета,
				Параметры.Операция.ДатаИсполнения);
		Иначе
			КурсКратностьВалютыПлатежа = Новый Структура();
			КурсКратностьВалютыПлатежа.Вставить("Курс", 		1);
			КурсКратностьВалютыПлатежа.Вставить("Кратность", 	1);
		КонецЕсли;
			
		СуммаВзаиморасчетов = ВалютыУНФКлиентСервер.Пересчитать(
			Параметры.Операция.Сумма,
			КурсКратностьВалютыПлатежа.Курс,                 // Из - Курс
			ХозяйственнаяОперация.КурсВзаиморасчетов,        // В  - Курс
			КурсКратностьВалютыПлатежа.Кратность,            // Из - Кратность
			ХозяйственнаяОперация.КратностьВзаиморасчетов);  // В  - Кратность
		
		ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПоказателиНДС(ХозяйственнаяОперация, Параметры)
	
	Если Не ХозяйственнаяОперация.Свойство("ВидОперацииДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСПокупателями(ХозяйственнаяОперация.ВидОперацииДокумента)
		И Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСПоставщиками(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОНДС = ВыделитьНДСИзНазначенияПлатежа(Параметры.Операция.НазначениеПлатежа, Параметры.Операция.Сумма);
	Если ИнформацияОНДС.Свойство("СтавкаНДС") Тогда
		ХозяйственнаяОперация.Вставить("СтавкаНДС", ИнформацияОНДС.СтавкаНДС);
	КонецЕсли;
	
	Если ИнформацияОНДС.Свойство("СуммаНДС") Тогда
		ХозяйственнаяОперация.Вставить("СуммаНДС", ИнформацияОНДС.СуммаНДС);
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация.Свойство("СтавкаНДС") Тогда
		
		Если Параметры.Операция.ПоступилоСписано = "Поступило"
			Или ХозяйственнаяОперация.ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			НалогообложениеНДС = НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Параметры.ВладелецСчета.Организация);
			ПлательщикНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС; 
		Иначе
			// Уточнение для контрагента будет произведено ниже, из договора.
			ПлательщикНДС = Истина;
		КонецЕсли;
		
		ВидСтавки = ?(ПлательщикНДС, Перечисления.ВидыСтавокНДС.Общая, Перечисления.ВидыСтавокНДС.БезНДС);
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавки, Параметры.Операция.ДатаИсполнения);
		
		ХозяйственнаяОперация.Вставить("СтавкаНДС", СтавкаНДС);
		ХозяйственнаяОперация.Удалить("СуммаНДС");
		
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация.Свойство("СуммаНДС") Тогда
		
		СуммаНДС = ВычислитьСуммуНДС(ХозяйственнаяОперация.СтавкаНДС, Параметры.Операция.Сумма);
		ХозяйственнаяОперация.Вставить("СуммаНДС", СуммаНДС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора = Неопределено)
	
	Контрагент = СсылкаНового(
		Отбор,
		Тип("СправочникСсылка.Контрагенты"),
		Параметры);
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("Контрагент", Контрагент);
	
	Если ЗначениеЗаполнено(ВидДоговора) Тогда
		ОтборДоговор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
		ОтборДоговор.Вставить("Владелец",    Контрагент);
		ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
		УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговор, Параметры);
	КонецЕсли;
	
	ОтборБанковскогоСчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
	ОтборБанковскогоСчета.Вставить("Владелец", Контрагент);
	
	УстановитьНовыйБанковскийСчетКонтрагента(ХозяйственнаяОперация, ОтборБанковскогоСчета, Параметры);
	
КонецПроцедуры

Процедура УстановитьКонтрагента(ХозяйственнаяОперация, Параметры, ВидДоговора = Неопределено)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
	ОписаниеКонтрагента = НайтиСсылку(Отбор, Параметры, "Контрагент");
	Если ОписаниеКонтрагента <> Неопределено Тогда
		ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
	Иначе
		УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовыйДоговор(ХозяйственнаяОперация, Отбор, Параметры)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Отбор, ОтборДоговорКонтрагента(Параметры), Истина);
	
	Договор = СсылкаНового(
		Отбор,
		Тип("СправочникСсылка.ДоговорыКонтрагентов"),
		Параметры);
		
	Если ЗначениеЗаполнено(Договор) Тогда
		ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", Договор);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборДоговорКонтрагента(Параметры)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",         Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	Отбор.Вставить("Организация",
		РегламентированнаяОтчетность.ГоловнаяОрганизация(Параметры.ВладелецСчета.Организация));
	
	Если Параметры.КешОбщихПараметров.ИспользоватьВалютныйУчет Тогда
		
		Если Параметры.ВладелецСчета.ВалютаСчета = Параметры.КешОбщихПараметров.ВалютаРегламентированногоУчета Тогда
			// Оплата в национальной валюте, расчеты могут быть и в национальной валюте и в условных единицах.
			Отбор.Вставить("ОплатаВВалюте",        Ложь);
		Иначе
			// Оплата и расчеты в иностранной валюте
			Отбор.Вставить("ОплатаВВалюте",        Истина);
			Отбор.Вставить("ВалютаВзаиморасчетов", Параметры.ВладелецСчета.ВалютаСчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Процедура УстановитьНовыйБанковскийСчетКонтрагента(ХозяйственнаяОперация, Отбор, Параметры)
	
	Отбор.Вставить("ВалютаДенежныхСредств", Параметры.ВладелецСчета.ВалютаСчета);
	
	БанковскийСчет = СсылкаНового(
		Отбор,
		Тип("СправочникСсылка.БанковскиеСчета"),
		Параметры);
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", БанковскийСчет);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеГосОргана(РеквизитыПлатежаВБюджет)
	
	Описание = Новый Структура;
	Описание.Вставить("Тип",                       Тип("СправочникСсылка.Контрагенты"));
	Описание.Вставить("ВидКонтрагента",      	   Перечисления.ВидыКонтрагентов.ГосударственныйОрган);
	
	Если РеквизитыПлатежаВБюджет.Свойство("ПоказательКБК") Тогда
		КБК = РеквизитыПлатежаВБюджет.ПоказательКБК;
	Иначе
		КБК = "";
	КонецЕсли;
	
	ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(КБК);
	
	Если НЕ ЗначениеЗаполнено(ВидГосударственногоОргана) Тогда
		ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.Прочий;
	КонецЕсли;
	Описание.Вставить("ВидГосударственногоОргана", ВидГосударственногоОргана);
	
	Возврат Описание;
	
КонецФункции

Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации, КешОбщихПараметров)
	
	Результат = КешОбщихПараметров.ВидыДоговоровПоВидамОпераций[ВидОперации];
	Если Результат = Неопределено Тогда
		Результат = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
		КешОбщихПараметров.ВидыДоговоровПоВидамОпераций.Вставить(ВидОперации, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПодотчетноеЛицо(ХозяйственнаяОперация, Параметры)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",        Тип("СправочникСсылка.ФизическиеЛица"));
	Отбор.Вставить("Владелец",   Параметры.ВладелецСчета.БанковскийСчет);
	Отбор.Вставить("НомерКарты", Параметры.ВладелецСчета.БанковскийСчет);
	
	ОписаниеПодотчетноеЛицо = НайтиСсылку(Отбор, Параметры, "Контрагент");
	Если ОписаниеПодотчетноеЛицо <> Неопределено Тогда
		ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеПодотчетноеЛицо.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборБанковскийСчетКонтрагента(Контрагент, ВалютаСчета)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",                   Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец",              Контрагент);
	Отбор.Вставить("ВалютаДенежныхСредств", ВалютаСчета);
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти

#Область РеквизитыНовыхОбъектов

Процедура ЗаписатьИсточникСсылки(ИсточникиСсылок, Ссылка, СторонаОперации)
	
	ИсточникиСсылок.Вставить(Ссылка, СторонаОперации);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНовыхОбъектов(УчастникиОпераций, ХозяйственнаяОперация, Операция, ИсточникиСсылок, ВладелецСчета, КешОписанийРеквизитов = Неопределено)
	
	Для Каждого РеквизитОперации Из ХозяйственнаяОперация Цикл
		
		ОписаниеНовогоОбъекта = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(РеквизитОперации.Значение, УчастникиОпераций);
		Если ОписаниеНовогоОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СторонаОперации = ИсточникиСсылок[ОписаниеНовогоОбъекта.Ссылка];
		Если СторонаОперации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьПустыеРеквизитыНовогоОбъекта(ОписаниеНовогоОбъекта, Операция, СторонаОперации, ВладелецСчета, КешОписанийРеквизитов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеРеквизитыНовогоОбъекта(ОписаниеНовогоОбъекта, Операция, СторонаОперации, ВладелецСчета, КешОписанийРеквизитов = Неопределено)
	
	// Из Операция выберем элементы для заполнения реквизитов объекта с учетом СторонаОперации
	ВсеРеквизиты = Операция[СторонаОперации + "Реквизиты"];
	
	РеквизитыНовогоОбъекта = Новый Структура;
	Если ТипЗнч(ОписаниеНовогоОбъекта.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "НаименованиеПолное", "Наименование");
		Если РеквизитыНовогоОбъекта.Свойство("НаименованиеПолное") Тогда
			РеквизитыНовогоОбъекта.Вставить("Наименование", РеквизитыНовогоОбъекта.НаименованиеПолное);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОписаниеНовогоОбъекта.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "Наименование");
		Если РеквизитыНовогоОбъекта.Свойство("Наименование") Тогда
			Наименование = РеквизитыНовогоОбъекта.Наименование;
			РеквизитыНовогоОбъекта.Наименование = УдалитьТекстПослеРазделителя(Наименование);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОписаниеНовогоОбъекта.Ссылка) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		// См. РаботаСБанкамиБП.УстановитьБанк()
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "НаименованиеБанка", "Банк");
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "ГородБанка",        "ГородБанка");
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "КоррСчетБанка",     "КорСчет");
		// БИК банка может не поставляться, если операция внутри банка. В таком случае возьмем БИК владельца счета.
		Если Не ЗначениеЗаполнено(ОписаниеНовогоОбъекта.БИК) 
			И Не ЗначениеЗаполнено(ОписаниеНовогоОбъекта.ВозможныйБИК)
			И ЗначениеЗаполнено(ВладелецСчета.БИК) Тогда
			РеквизитыНовогоОбъекта.Вставить("ВозможныйБИК", ВладелецСчета.БИК);
		КонецЕсли;
	КонецЕсли;
	
	// заполним недостающие элементы в ОписаниеНовогоОбъекта
	ИдентификацияУчастниковБанковскихОпераций.ЗаполнитьПустыеРеквизитыНовогоОбъекта(
		ОписаниеНовогоОбъекта,
		РеквизитыНовогоОбъекта,
		КешОписанийРеквизитов);
	
КонецПроцедуры

Процедура ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, ИмяРеквизита, Знач ИмяРеквизитаВсеРеквизиты = "")
	
	Если ПустаяСтрока(ИмяРеквизитаВсеРеквизиты) Тогда
		ИмяРеквизитаВсеРеквизиты = ИмяРеквизита;
	КонецЕсли;
	
	Если Не ВсеРеквизиты.Свойство(ИмяРеквизитаВсеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНовогоОбъекта.Вставить(ИмяРеквизита, ВсеРеквизиты[ИмяРеквизитаВсеРеквизиты]);
	
КонецПроцедуры

#КонецОбласти

#Область СтатьиДДС

Процедура УстановитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация, Параметры)
	
	Если Не Параметры.КешОбщихПараметров.ИспользоватьСтатьиДвиженияДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = Параметры.Правило.ОсновнаяСтатьяДДС;
	
	Налог = "";
	ВидНалоговогоОбязательства = "";
	Если ХозяйственнаяОперация.Свойство("Налог", Налог)
		И ХозяйственнаяОперация.Свойство("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства)
		И УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалога(ВидНалоговогоОбязательства) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
		Если УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалогаНаПрибыль(ВидНалога) Тогда
			КонтекстОперации = "НалогНаПрибыль";
			СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствСервер.СтатьяДДСПоУмолчанию(КонтекстОперации);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	
КонецПроцедуры

#КонецОбласти

#Область Документы

Функция ТипДокументаОперацииВыписки(Операция)
	
	Если Операция.ПоступилоСписано = "Списано" Тогда
		Возврат Тип("ДокументСсылка.РасходСоСчета");
	ИначеЕсли Операция.ПоступилоСписано = "Поступило" Тогда
		Возврат Тип("ДокументСсылка.ПоступлениеНаСчет");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ПоискРанееСозданныхДокументов

Процедура НайтиПлатежныеПоручения(РаспознаннаяВыписка, Выписка, УчастникиОпераций)
	
	// Выберем из выписки те строки, что могут быть результатом проведения банком распоряжений владельца счета (платежных поручений).
	// Одновременно определим период, за который эти платежные поручения. 
	// Предполагаем, что выписка содержит документы за непрерывный период.
	// Не используем значения свойств выписки НачалоПериода и КонецПериода, 
	// так как они соответствуют дате исполнения платежки, а не дате ее оформления.
	ОперацииДляПоискаДокументов = Новый Соответствие; // Ключ - ключ поиска; Значение - массив Операций
	НачалоПериода               = Неопределено;
	КонецПериода                = Неопределено;
	
	Для Каждого Операция Из Выписка.Операции Цикл
		
		Если Не ОперацияМоглаБытьВыполненаНаОснованииПлатежногоПоручения(Операция) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерБанковскогоСчетаКонтрагента = Операция.НомерСчетаКонтрагента;
		
		КлючПоиска = КлючПоискаПлатежногоПоручения(
			Операция.ДатаДокумента,
			Операция.НомерДокумента,
			НомерБанковскогоСчетаКонтрагента);
			// В платежках можно включать в ключ номер счета, но в строках выписки - нет.
			// Потому что контрагент в созданных документах - это не достаточно надежный признак для поиска документов.
			// На него надо опираться, но искать и документы с другими контрагентами (с меньшим приоритетом).
			// Например, потому что пользователь может указать "сводного контрагента" - т.е. не такого, как в файлах выписки.
			
		ОперацииПоКлючу = ОперацииДляПоискаДокументов[КлючПоиска];
		Если ОперацииПоКлючу = Неопределено Тогда
			ОперацииПоКлючу = Новый Массив;
			ОперацииДляПоискаДокументов.Вставить(КлючПоиска, ОперацииПоКлючу);
		КонецЕсли;
		
		ОперацииПоКлючу.Добавить(Операция);
		РасширитьПериод(НачалоПериода, КонецПериода, Операция.ДатаДокумента);
			
	КонецЦикла;
	
	Если НачалоПериода = Неопределено Или КонецПериода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем платежные поручения владельца счета за период
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",               РаспознаннаяВыписка.ВладелецСчета.Организация);
	Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",              КонецДня(КонецПериода));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК НомерБанковскогоСчетаКонтрагента,
	|	ПлатежноеПоручение.Проведен КАК Проведен,
	|	ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННКонтрагента,
	|	ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	ЕСТЬNULL(РасходСоСчетаПодчиненное.Ссылка, ЕСТЬNULL(РасходСоСчетаОснование.Ссылка, НЕОПРЕДЕЛЕНО)) КАК ДокументИсполнения,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(РасходСоСчетаПодчиненное.Дата, ЕСТЬNULL(РасходСоСчетаОснование.Дата, ДАТАВРЕМЯ(1, 1, 1))), ДЕНЬ) КАК ДатаИсполнения,
	|	ЕСТЬNULL(РасходСоСчетаПодчиненное.СуммаДокумента, ЕСТЬNULL(РасходСоСчетаОснование.СуммаДокумента, 0)) КАК СуммаИсполнения
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходСоСчета КАК РасходСоСчетаОснование
	|		ПО ПлатежноеПоручение.ДокументОснование = РасходСоСчетаОснование.Ссылка
	|			И (НЕ РасходСоСчетаОснование.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходСоСчета КАК РасходСоСчетаПодчиненное
	|		ПО ПлатежноеПоручение.Ссылка = РасходСоСчетаПодчиненное.ДокументОснование
	|			И (НЕ РасходСоСчетаПодчиненное.ПометкаУдаления)
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПлатежноеПоручение.БанковскийСчет = &БанковскийСчетОрганизации
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаИсполнения)
	|ПО
	|	ПлатежноеПоручение";
	
	СоответствиеДокументовБанкаКлиента = НовыйСоответствиеДокументовБанкаКлиента();
	
	ИдентификаторОперацииКлиент = 0; // Пронумеруем строки результата запроса
	
	СуммыПлатежныхПоручений = Новый Соответствие;
	ВыборкаПлатежныхПоручений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПлатежныхПоручений.Следующий() Цикл
		
		НомерБезПрефикса                 = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПлатежныхПоручений.Номер, Истина, Истина));
		ДатаПлатежногоПоручения          = НачалоДня(ВыборкаПлатежныхПоручений.Дата);
		НомерБанковскогоСчетаКонтрагента = Строка(ВыборкаПлатежныхПоручений.НомерБанковскогоСчетаКонтрагента);
		
		КлючПоиска = КлючПоискаПлатежногоПоручения(ДатаПлатежногоПоручения, НомерБезПрефикса, НомерБанковскогоСчетаКонтрагента);
		
		НомерСПрефиксомИнтеграции = "";
		ЭтоСчетИнтеграции = ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
		Если ЭтоСчетИнтеграции Тогда
			НомерСПрефиксомИнтеграции = РегистрыСведений.ДокументыИнтеграцииСБанком.НомерОбъектаСПрефиксомБанкаИнтеграции(
				НомерБезПрефикса,
				РаспознаннаяВыписка.ВладелецСчета.Организация,
				РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
		КонецЕсли;
		
		ОперацииПоКлючуБанк = ОперацииДляПоискаДокументов[КлючПоиска];
		Если ОперацииПоКлючуБанк = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыПлатежныхПоручений.Вставить(
			ВыборкаПлатежныхПоручений.ПлатежноеПоручение,
			ВыборкаПлатежныхПоручений.Сумма - ВыборкаПлатежныхПоручений.СуммаИсполнения);
		
		// Каждый элемент выборки содержит "операцию": сочетание документов "Платежное поручение" и "Списание с расчетного счета".
		// Для работы алгоритма ниже, также нужны сочетания всех платежных поручений с незаполненным "Списанием...".
		// Однако, в выборке такие будут только в случае, когда нет ни одного "Списания", соответствующего платежке.
		// Поэтому, при необходимости будем дополнять данные запроса записями с незаполненными "Списаниями".
		ВыбраноПлатежноеПоручениеБезДокументаИсполнения = Ложь;
		
		ВыборкаОперацийКлиент = ВыборкаПлатежныхПоручений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОперацийКлиент.Следующий() Цикл
			
			ВыбраноПлатежноеПоручениеБезДокументаИсполнения = ВыбраноПлатежноеПоручениеБезДокументаИсполнения 
				Или Не ЗначениеЗаполнено(ВыборкаОперацийКлиент.ДокументИсполнения);
			
			ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(
				СоответствиеДокументовБанкаКлиента,
				ОперацииПоКлючуБанк,
				ИдентификаторОперацииКлиент,
				ВыборкаПлатежныхПоручений,
				НомерБезПрефикса,
				ВыборкаОперацийКлиент,
				УчастникиОпераций,
				НомерСПрефиксомИнтеграции);
			
		КонецЦикла;
		
		Если Не ВыбраноПлатежноеПоручениеБезДокументаИсполнения Тогда
			ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(
				СоответствиеДокументовБанкаКлиента,
				ОперацииПоКлючуБанк,
				ИдентификаторОперацииКлиент,
				ВыборкаПлатежныхПоручений,
				НомерБезПрефикса,
				Неопределено,
				УчастникиОпераций,
				НомерСПрефиксомИнтеграции);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовБанкаКлиента, СуммыПлатежныхПоручений);
	
	Для Каждого СоответствиеДокументаОперации Из СоответствиеДокументовБанкаКлиента Цикл
		
		РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, СоответствиеДокументаОперации.ИдентификаторОперацииБанк);
		РаспознаннаяОперация.ПлатежноеПоручение = СоответствиеДокументаОперации.ПлатежноеПоручение;
		РаспознаннаяОперация.Ссылка 			= СоответствиеДокументаОперации.ДокументИсполнения;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(СоответствиеДокументовБанкаКлиента,
	                                                         ОперацииБанк,
															 ИдентификаторОперацииКлиент,
															 ПлатежноеПоручение,
															 НомерБезПрефикса,
															 ОперацияКлиент,
															 УчастникиОпераций,
															 НомерСПрефиксомИнтеграции)
	
	ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент + 1;
	
	Для Каждого Операция Из ОперацииБанк Цикл
		
		Если ОперацияКлиент = Неопределено Тогда
			// Нет сведений об исполнении операции.
			ДатаИсполнения     = Неопределено;
			СуммаИсполнения    = Неопределено;
			ДокументИсполнения = Неопределено;
		Иначе
			ДатаИсполнения     = ОперацияКлиент.ДатаИсполнения;
			СуммаИсполнения    = ОперацияКлиент.СуммаИсполнения;
			ДокументИсполнения = ОперацияКлиент.ДокументИсполнения;
		КонецЕсли;
		
		Соответствие = СоответствиеДокументовБанкаКлиента.Добавить();
		
		Соответствие.ИдентификаторОперацииБанк 	 = Операция.Идентификатор;
		Соответствие.ОперацияБанк      			 = Операция;
		Соответствие.СуммаОперацииБанк           = Операция.Сумма;
		
		Соответствие.ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент;
		Соответствие.ПлатежноеПоручение          = ПлатежноеПоручение.ПлатежноеПоручение;
		Соответствие.ДокументИсполнения		     = ДокументИсполнения;
		Соответствие.СуммаОперацииКлиент         = СуммаИсполнения;
					
		Оценщик = НачатьОценкуСоответствия();
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Проведен);
		ОценитьСоответствиеПоКритерию(Оценщик, НомерБезПрефикса         = Операция.НомерДокумента);
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Номер = НомерСПрефиксомИнтеграции);
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Номер = Операция.НомерДокумента);
		
		ОценитьСоответствиеПоКритерию(Оценщик, ДатаИсполнения  = Операция.ДатаИсполнения);
		ОценитьСоответствиеПоКритерию(Оценщик, СуммаИсполнения = Операция.Сумма);
				
		НайденКонтрагент = ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторыСсылки(
			Операция.ПолучательИдентификаторы,
			ПлатежноеПоручение.Контрагент,
			УчастникиОпераций);
		ОценитьСоответствиеПоКритерию(Оценщик, НайденКонтрагент);
				
		ОценитьСоответствиеПоКритерию(Оценщик, Не ЗначениеЗаполнено(ПлатежноеПоручение.ИННКонтрагента));
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Сумма = Операция.Сумма);
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Сумма > Операция.Сумма);
				
		Соответствие.Приоритет = Оценщик.Приоритет;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиРанееСозданныеДокументы(РаспознаннаяВыписка, Выписка, УчастникиОпераций)
	
	// Выберем из выписки строки без платежных поручений - то есть те, что 
	// - либо были инициированы не владельцем счета (входящие платежи, прямое дебитование)
	// - либо были инициированы из другой программы (например, непосредственно на сайте банка)
	// 
	// Для этих строк установим соответствие документов в информационной базе по реквизитам документов.
	//
	// Для строк с платежными поручениями соответствие установлено вне этой процедуры другим способом - 
	// по связи в информационной базе между платежкой и документами движений по банковскому счету -
	// у таких документов будет меньший приоритет.
	//
	// Алгоритм поиска описан в области "Описание"
	
	// Ищем раздельно среди поступлений на счет и списаний.
	Для Каждого ПоступилоСписано Из ВариантыПоступилоСписано() Цикл
		
		ОперацииДляПоискаДокументов = Новый Соответствие; // Ключ - ключ поиска; Значение - массив Операций
		// Одновременно определим период, за который искать документы.
		// Предполагаем, что выписка содержит документы за непрерывный период.
		// Не используем значения свойств выписки НачалоПериода и КонецПериода, чтобы по возможности сократить выборку.
		НачалоПериода = Неопределено;
		КонецПериода  = Неопределено;
		
		Для Каждого Операция Из Выписка.Операции Цикл
			
			Если ЗначениеЗаполнено(Операция.ПоступилоСписано) И Операция.ПоступилоСписано <> ПоступилоСписано Тогда
				Продолжить;
			КонецЕсли;
			
			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
			
			Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение) 
				И ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда 
				// Ссылку получили из платежного поручения
				Продолжить;
			КонецЕсли;
			
			КлючПоиска = КлючПоискаДокументаДвиженияПоБанковскомуСчету(Операция.ДатаИсполнения, Операция.НомерДокумента);
			// В общем случае документы могут исходить от разных контрагентов и нумероваться независимо.
			// Поэтому для идентификации документа недостаточно даты и номера - нужны еще и данные о контрагенте.
			// Их учтем ниже в виде приоритетов.
			
			ОперацииПоКлючу = ОперацииДляПоискаДокументов[КлючПоиска];
			Если ОперацииПоКлючу = Неопределено Тогда
				ОперацииПоКлючу = Новый Массив;
				ОперацииДляПоискаДокументов.Вставить(КлючПоиска, ОперацииПоКлючу);
			КонецЕсли;
			
			ОперацииПоКлючу.Добавить(Операция);
			РасширитьПериод(НачалоПериода, КонецПериода, Операция.ДатаИсполнения);
			
		КонецЦикла;
		
		Если НачалоПериода = Неопределено Или КонецПериода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Найдем документы за период
		
		// Приоритет при поиске отдается документам, которые не связаны с документами инициации платежа,
		// потому что по документам инициации платежа ищем отдельно.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",               РаспознаннаяВыписка.ВладелецСчета.Организация);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
		Запрос.УстановитьПараметр("НачалоПериода",             НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",              КонецДня(КонецПериода));
		
		Если ПоступилоСписано = "Поступило" Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Документы.Ссылка КАК Ссылка,
			|	НАЧАЛОПЕРИОДА(Документы.Дата, ДЕНЬ) КАК ДатаИсполнения,
			|	Документы.ДатаВходящегоДокумента КАК ДатаДокумента,
			|	Документы.НомерВходящегоДокумента КАК Номер,
			|	Документы.ПометкаУдаления КАК ПометкаУдаления,
			|	Документы.Проведен КАК Проведен,
			|	Документы.СуммаДокумента КАК Сумма,
			|	Документы.Контрагент КАК Контрагент,
			|	Документы.СчетКонтрагента КАК СчетКонтрагента,
			|	ЕСТЬNULL(Документы.Контрагент.ИНН, """") КАК ИННКонтрагента,
			|	ЕСТЬNULL(Документы.СчетКонтрагента.НомерСчета, """") КАК НомерСчетаКонтрагента,
			|	ИСТИНА КАК НетОснованияПлатежноеПоручение,
			|	Документы.ДополнительныеРеквизиты.(
			|		Свойство КАК Свойство,
			|		Значение КАК Значение
			|	) КАК ДополнительныеРеквизиты,
			|	Документы.ВидОперации КАК ВидОперации,
			|	Документы.Статья КАК Статья,
			|	ЕСТЬNULL(Документы.Контрагент.ИНН, """") КАК КонтрагентИНН,
			|	Документы.Контрагент.Наименование КАК КонтрагентНаименование,
			|	Документы.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
			|	Документы.ДатаВходящегоДокумента КАК Дата,
			|	Документы.Дата КАК ДатаДок,
			|	ЕСТЬNULL(Документы.СчетКонтрагента.НомерСчета, """") КАК НомерСчета,
			|	Документы.Организация КАК Организация,
			|	Документы.Корреспонденция КАК Корреспонденция,
			|	Документы.Касса КАК Касса,
			|	ТИПЗНАЧЕНИЯ(Документы.Ссылка) КАК ВидДокумента,
			|	Документы.ДокументОснование КАК ПлатежноеПоручение,
			|	Документы.БанковскаяОперация КАК БанковскаяОперация,
			|	Документы.ВидНалога КАК ВидНалога,
			|	Документы.Подотчетник КАК Подотчетник,
			|	НЕОПРЕДЕЛЕНО КАК СрокУплаты
			|ИЗ
			|	Документ.ПоступлениеНаСчет КАК Документы
			|ГДЕ
			|	Документы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Документы.БанковскийСчет = &БанковскийСчетОрганизации
			|	И Документы.Организация = &Организация
			|	И НЕ Документы.ПометкаУдаления";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Документы.Ссылка КАК Ссылка,
			|	НАЧАЛОПЕРИОДА(Документы.Дата, ДЕНЬ) КАК ДатаИсполнения,
			|	Документы.ДатаВходящегоДокумента КАК ДатаДокумента,
			|	Документы.НомерВходящегоДокумента КАК Номер,
			|	Документы.ПометкаУдаления КАК ПометкаУдаления,
			|	Документы.Проведен КАК Проведен,
			|	Документы.СуммаДокумента КАК Сумма,
			|	Документы.Контрагент КАК Контрагент,
			|	Документы.СчетКонтрагента КАК СчетКонтрагента,
			|	ЕСТЬNULL(Документы.Контрагент.ИНН, """") КАК ИННКонтрагента,
			|	ЕСТЬNULL(Документы.СчетКонтрагента.НомерСчета, """") КАК НомерСчетаКонтрагента,
			|	ПлатежноеПоручениеОснование.Ссылка ЕСТЬ NULL КАК НетОснованияПлатежноеПоручение,
			|	Документы.ДополнительныеРеквизиты.(
			|		Свойство КАК Свойство,
			|		Значение КАК Значение
			|	) КАК ДополнительныеРеквизиты,
			|	Документы.ВидОперации КАК ВидОперации,
			|	Документы.Статья КАК Статья,
			|	ЕСТЬNULL(Документы.Контрагент.ИНН, """") КАК КонтрагентИНН,
			|	Документы.Контрагент.Наименование КАК КонтрагентНаименование,
			|	Документы.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
			|	Документы.ДатаВходящегоДокумента КАК Дата,
			|	Документы.Дата КАК ДатаДок,
			|	ЕСТЬNULL(Документы.СчетКонтрагента.НомерСчета, """") КАК НомерСчета,
			|	Документы.Организация КАК Организация,
			|	Документы.Корреспонденция КАК Корреспонденция,
			|	Документы.Касса КАК Касса,
			|	ТИПЗНАЧЕНИЯ(Документы.Ссылка) КАК ВидДокумента,
			|	Документы.ДокументОснование КАК ПлатежноеПоручение,
			|	Документы.БанковскаяОперация КАК БанковскаяОперация,
			|	Документы.ВидНалога КАК ВидНалога,
			|	Документы.Подотчетник КАК Подотчетник,
			|	Документы.СрокУплаты КАК СрокУплаты
			|ИЗ
			|	Документ.РасходСоСчета КАК Документы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручениеПодчиненное
			|		ПО Документы.Ссылка = ПлатежноеПоручениеПодчиненное.ДокументОснование
			|			И (НЕ ПлатежноеПоручениеПодчиненное.ПометкаУдаления)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручениеОснование
			|		ПО Документы.ДокументОснование = ПлатежноеПоручениеОснование.Ссылка
			|			И (НЕ ПлатежноеПоручениеОснование.ПометкаУдаления)
			|ГДЕ
			|	Документы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Документы.БанковскийСчет = &БанковскийСчетОрганизации
			|	И Документы.Организация = &Организация
			|	И ПлатежноеПоручениеПодчиненное.ДокументОснование ЕСТЬ NULL
			|	И НЕ Документы.ПометкаУдаления";
		
		КонецЕсли;
		
		ИмяКонтрагента = СторонаКонтрагента(ПоступилоСписано);
		
		СоответствиеДокументовОперациям = НовыйСоответствиеДокументовБанкаКлиента();
		
		Выборка = Запрос.Выполнить().Выбрать();
		ИдентификаторОперацииКлиент = 0; // Соответствует каждой строке выборки
		Пока Выборка.Следующий() Цикл
			
			КлючПоиска = КлючПоискаДокументаДвиженияПоБанковскомуСчету(Выборка.ДатаИсполнения, Выборка.Номер);
			
			ОперацииПоКлючуБанк = ОперацииДляПоискаДокументов[КлючПоиска];
			Если ОперацииПоКлючуБанк = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент + 1;
			
			
			СохраненныеИдентификаторыКонтрагента = Новый Соответствие;
			ВыборкаРеквизитыКонтрагента = Выборка.ДополнительныеРеквизиты.Выбрать();
			
			СхемаВнутреннийИдентификатор = ИдентификацияУчастниковБанковскихОпераций.СхемаВнутреннийИдентификатор();
			
			Пока ВыборкаРеквизитыКонтрагента.Следующий() Цикл
				
				Если ВыборкаРеквизитыКонтрагента.Свойство <> "Идентификатор" Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрНачинаетсяС(ВыборкаРеквизитыКонтрагента.Значение, СхемаВнутреннийИдентификатор) Тогда
					Продолжить;
				КонецЕсли;
				
				СохраненныеИдентификаторыКонтрагента.Вставить(ВыборкаРеквизитыКонтрагента.Значение, ВыборкаРеквизитыКонтрагента.Значение);
				
			КонецЦикла;
			
			Для Каждого Операция Из ОперацииПоКлючуБанк Цикл
				
				Соответствие = СоответствиеДокументовОперациям.Добавить();
				Соответствие.ИдентификаторОперацииБанк   = Операция.Идентификатор;
				Соответствие.ОперацияБанк                = Операция;
				Соответствие.СуммаОперацииБанк           = Операция.Сумма;
				
				Соответствие.ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент;
				Соответствие.ДокументИсполнения          = Выборка.Ссылка;
				Соответствие.СуммаОперацииКлиент         = Выборка.Сумма;
				
				Оценщик = НачатьОценкуСоответствия();
				
				// Документы по основанию платежного поручения (ПП) должны были найтись ранее,
				// поэтому приоритет у признака (отсутствие ПП-основания) максимальный.
				// Если основание все же есть (и не было найдено), а документ при этом подходит по другим критериям, значит
				// имеет место случай частичного списания для исполнения платежного поручения при недостатке средств на счете.
				// Банк, с помощью платежных ордеров выполняет частичный перевод в пределах доступного остатка.
				// В этом случае дата платежного ордера может не совпадать с исходной ПП, поэтому ПП и не было найдено.
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.НетОснованияПлатежноеПоручение);
				
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.Сумма = Операция.Сумма);
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.Проведен);
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.ДатаДокумента = Операция.ДатаДокумента);
				
				ИдентификаторыКонтрагента = Операция[ИмяКонтрагента + "Идентификаторы"];
				НайденКонтрагент = ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторыСсылки(
					ИдентификаторыКонтрагента,
					Выборка.Контрагент,
					УчастникиОпераций);
				ОценитьСоответствиеПоКритерию(Оценщик, НайденКонтрагент);
				
				НайденСчетКонтрагента = ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторыСсылки(
					ИдентификаторыКонтрагента,
					Выборка.СчетКонтрагента,
					УчастникиОпераций);
				ОценитьСоответствиеПоКритерию(Оценщик, НайденСчетКонтрагента);
				
				// Учтем значения реквизитов хранящегося в информационной базе документа, переданным банком.
				СовпадающиеИдентификаторы = Новый Массив;
				Для Каждого Идентификатор Из ИдентификаторыКонтрагента Цикл
					
					Если СохраненныеИдентификаторыКонтрагента[Идентификатор] = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СовпадающиеИдентификаторы.Добавить(Идентификатор);
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СохраненныеИдентификаторыКонтрагента)
					И ИдентификаторыКонтрагента.Количество() > 0
					И Не ЗначениеЗаполнено(СовпадающиеИдентификаторы) Тогда
					// Нет ни одного совпадения, хотя документ ранее загружался: документ явно не соответствует операции
					Соответствие.Приоритет = -1;
					Продолжить;
				КонецЕсли;
				
				КонтрагентИдентифицированПоСохраненнымРеквизитам = Ложь;
				НадежностьИдентификации = ИдентификацияУчастниковБанковскихОпераций.ОценитьНадежностьИдентификаторов(
					СовпадающиеИдентификаторы,
					?(ТипЗнч(Выборка.Контрагент) = Тип("Неопределено"),
						Тип("СправочникСсылка.Контрагенты"),
						ТипЗнч(Выборка.Контрагент)),
					УчастникиОпераций);
					
				Для Каждого ИдентифицированСхемой Из НадежностьИдентификации Цикл
					ОценитьСоответствиеПоКритерию(Оценщик, ИдентифицированСхемой);
					Если ИдентифицированСхемой Тогда
						КонтрагентИдентифицированПоСохраненнымРеквизитам = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Выборка.Контрагент)
					И ИдентификаторыКонтрагента.Количество() > 0
					И Не НайденКонтрагент И Не НайденСчетКонтрагента
					И Не КонтрагентИдентифицированПоСохраненнымРеквизитам Тогда
					// Исключим ситуацию, когда в документе указан совсем другой контрагент, чем в файле.
					// При этом опираемся на оба признака 
					// - соответствие ссылкам - НайденКонтрагент, НайденСчетКонтрагента
					// - соответствие идентификаторам - КонтрагентИдентифицированПоСохраненнымРеквизитам.
					// Учитывать оба признака нужно на случай, если у документа в информационной базе после загрузки уточнили контрагента.
					Если СохраненныеИдентификаторыКонтрагента.Количество() > 0 Тогда
						Соответствие.Приоритет = -1;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ОценитьСоответствиеПоКритерию(Оценщик, Не ЗначениеЗаполнено(Выборка.ИННКонтрагента));
				ОценитьСоответствиеПоКритерию(Оценщик, Не ЗначениеЗаполнено(Выборка.НомерСчетаКонтрагента));
			
				Соответствие.Приоритет = Оценщик.Приоритет;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Удалим записи, для которых соответствие отменено
		КУдалению = СоответствиеДокументовОперациям.НайтиСтроки(Новый Структура("Приоритет", -1));
		Для Каждого ЗаписьКУдалению Из КУдалению Цикл
			СоответствиеДокументовОперациям.Удалить(ЗаписьКУдалению);
		КонецЦикла;	
		
		ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовОперациям);
		
		Для Каждого СоответствиеДокументаОперации Из СоответствиеДокументовОперациям Цикл
			
			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, СоответствиеДокументаОперации.ИдентификаторОперацииБанк);
			РаспознаннаяОперация.Ссылка = СоответствиеДокументаОперации.ДокументИсполнения;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйСоответствиеДокументовБанкаКлиента()
	
	СоответствиеДокументовОперациям = Новый ТаблицаЗначений;
	// Данные из банка
	СоответствиеДокументовОперациям.Колонки.Добавить("ИдентификаторОперацииБанк", ТипИдентификатор());
	СоответствиеДокументовОперациям.Колонки.Добавить("СуммаОперацииБанк", 	      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // Сумма операции по данным банка
	СоответствиеДокументовОперациям.Колонки.Добавить("ОперацияБанк");
	// Данные клиента (имеющиеся в информационной базе)
	// Операцией считаем факт исполнения платежного поручения (т.е.  сочетание платежного поручения и документа его исполнения)
	// либо неисполненное платежное поручение.
	// Другими словами, каждая комбинация полей ПлатежноеПоручение и ДокументИсполнения 
	// получит свой идентификатор операции со стороны информационной базы.
	СоответствиеДокументовОперациям.Колонки.Добавить("ИдентификаторОперацииКлиент", Новый ОписаниеТипов("Число"));
	СоответствиеДокументовОперациям.Колонки.Добавить("СуммаОперацииКлиент", 	    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // Сумма документа в базе.
	СоответствиеДокументовОперациям.Колонки.Добавить("ПлатежноеПоручение",          Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение"));
	СоответствиеДокументовОперациям.Колонки.Добавить("ДокументИсполнения", 	        ОписаниеТиповДокументыИсполнения());
	// Сочетание данных бана и клиента
	СоответствиеДокументовОперациям.Колонки.Добавить("Приоритет",     	            Новый ОписаниеТипов("Число"));
	
	Возврат СоответствиеДокументовОперациям;
	
КонецФункции

Функция КлючПоискаПлатежногоПоручения(ДатаДокумента, НомерДокумента, НомерБанковскогоСчетаКонтрагента)
	
	//	В ключ поиска входит номер 
	//  1. без префикса
	//  2. не более 6 символов, по возможности состоящий из цифр
	//  (если в правых 6 символах есть цифры, то в "чистый номер" включаются только они;
	//  лидирующие нули игнорируются;
	//  если нет ни одной цифры, то выбираются все 6 правых символов).
	
	СодержательнаяЧастьНомераДокумента = "";
	
	НомерБезПрефикса = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Истина);
	ОграниченныйНомерБезПрефикса = Прав(НомерБезПрефикса, БанковскиеПравила.ДлинаНомераПлатежногоПоручения());
	ЕстьЗначащиеЦифры = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ОграниченныйНомерБезПрефикса) Цикл
		
		Символ = Сред(ОграниченныйНомерБезПрефикса, НомерСимвола, 1);
		
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЕстьЗначащиеЦифры Тогда
			Если Символ = "0" Тогда
				Продолжить;
			КонецЕсли;
			ЕстьЗначащиеЦифры = Истина;
		КонецЕсли;
		
		СодержательнаяЧастьНомераДокумента = СодержательнаяЧастьНомераДокумента + Символ;
		
	КонецЦикла;
	
	Если ПустаяСтрока(СодержательнаяЧастьНомераДокумента) Тогда
		СодержательнаяЧастьНомераДокумента = ОграниченныйНомерБезПрефикса;
	КонецЕсли;
	
	Возврат СокрЛП(НомерБанковскогоСчетаКонтрагента) + "/" + Формат(ДатаДокумента, "ДФ=yyyy-MM-dd") + "/" + СодержательнаяЧастьНомераДокумента;
	
КонецФункции

Функция КлючПоискаДокументаДвиженияПоБанковскомуСчету(ДатаИсполнения, НомерДокумента)
	
	// В отличие от поиска платежек не включаем в ключ номер счета,
	// потому что после загрузки документа контрагент (и счет) в нем могут быть изменены
	// (например, пользователь может указать "сводного контрагента").
	
	Возврат Формат(ДатаИсполнения, "ДФ=yyyy-MM-dd") + "/" + СокрЛП(НомерДокумента);
	
КонецФункции

Функция ОперацияМоглаБытьВыполненаНаОснованииПлатежногоПоручения(Операция)
	
	Если Операция.ПоступилоСписано <> "Списано" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Операция.ШифрОперации)
		И Не (БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации)
			// При недостатке средств на счете для исполнения платежного поручения
			// банк выполняет частичный перевод средств с помощью платежных ордеров,
			// в пределах доступного остатка.
			Или БанковскиеПравила.ЭтоПлатежныйОрдер(Операция.ШифрОперации)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Операция.ДатаДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НачатьОценкуСоответствия()
	
	Оценщик = Новый Структура;
	Оценщик.Вставить("Приоритет",                     0);
	Оценщик.Вставить("КоличествоВыполненныхПроверок", 0);
	
	Возврат Оценщик;
	
КонецФункции

Процедура ОценитьСоответствиеПоКритерию(Оценщик, СоответствуетЛучше)
	
	Оценщик.КоличествоВыполненныхПроверок = Оценщик.КоличествоВыполненныхПроверок + 1;
	Оценщик.Приоритет                     = Оценщик.Приоритет * 2; // Сдвигаем на 1 бит влево
	
	Если Не СоответствуетЛучше Тогда
		Возврат;
	КонецЕсли;
	
	Оценщик.Приоритет = Оценщик.Приоритет + 1; // Устанавливаем новый (самый правый) бит
	
КонецПроцедуры

// Выбирает из таблицы с соответствиями документов и операций те, которые в наибольшей степени
// подходят друг другу по приоритетам.
//
// Параметры:
//	СоответствиеДокументовОперациям - см. НовыйСоответствиеДокументовОперациям(), модифицируется в ходе выполнения
//  СуммыПлатежныхПоручений - Соответствие, Неопределено. Если передано Соответствие, то при поиске платежному поручению 
//               могут быть сопоставлены несколько документов исполнения, с учетом суммы документов: 
//               общая сумма подобранных документов исполнения не будет превышать переданной суммы остатка платежного поручения.
//               Ключ соответствия - ДокументСсылка.ПлатежноеПоручение, 
//               Значение соответствия - Число, сумма платежного поручения за вычетом имеющихся в базе документов
//               исполнения этого платежного поручения.
//
Процедура ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовОперациям, СуммыПлатежныхПоручений = Неопределено)
	
	Если СоответствиеДокументовОперациям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В общем случае соответствия могут быть многие-ко-многим.
	// Среди них могут быть:
	// 1. однозначные, когда идентификатор со стороны клиента и идентификатор со стороны банка встречается только один раз
	// 2. один-ко-многим, когда одному идентификатору со стороны клиента соответствует несколько со стороны банка
	// 3. многие-к-одному, когда многим идентификаторам со стороны банка соответствуют один со стороны клиента.
	// Также могут быть ситуации, когда одни и те же идентификаторы одновременно участвуют в (2) и (3).
	
	// Среди лучших могут быть не все из них.
	//
	// Во-первых, связи один-ко-многим не могут быть выбраны: одному идентификатору со стороны банка может соответствовать
	// не более одного идентификатора со стороны клиента.
	// Потому что одной транзакцией банк выполняет только одно поручение клиента, не несколько.
	//
	// Во-вторых, стремимся к тому, чтобы как можно больше операций со стороны клиента считать лучшими.
	// Потому что операции, отраженные на стороне клиента,
	// с большой вероятностью должны быть отражены и на стороне банка (зачем-то их пользователь ввел в базу).
	//
	// В-третьих, некоторые связи многие-к-одному допускаются: со стороны клиента есть платежное поручение,
	// но нет соответствующего ему документа об исполнении.
	// Такому платежному поручению может соответствовать несколько операций со стороны банка.
	// Однако, сумма таких исполнений не должна превышать суммы платежки.
	//
	// Наконец, следует учитывать степень соответствия идентификаторов друг-другу (приоритет соответствий).
	
	// Для поиска лучших соответствий упрощаем связи - сводим их к один-к-одному и, когда это допускается, - многие-к-одному.
	// Для этого может понадобиться несколько итераций, поскольку связи могут быть цепными и циклическими.
	// Пример цепной связи: A1, B1, B2, C2, C3
	// Пример цикличной: A1, A2, B2, B3, C3, C1
	// (Здесь идентификаторы со стороны клиента обозначены цифрами, а со стороны банка - буквами).
	
	// Алгоритм такой:
	// 1. Для каждого клиентского идентификатора определяем количество соответствующих ему банковских (C - capacity).
	//    Ниже, по мере того, как будем исключать лучшие и отвергнутые, уточняем, поддерживаем эти значения. 
	// 2. Все соответствия считаем неоднозначными и выделяем среди них лучшие и отвергнутые итерационно,
	//    до тех пор, пока неоднозначных не останется.
	// 2.1. Обходим по убыванию приоритета те, у кого C = 1.
	//      Записываем каждый из них в лучшие.
	//      Для каждого, который сочли лучшим, отвергаем (вытессняем) те, 
	//      что имеют тот же идентификатор со стороны банка (см. "во-первых").
	// 2.2. Если после 2.1 появились новые C = 1, то повторяем 2.1.
	// 2.3. Далее остаются соответствия с C > 1. Обходим их по убыванию приоритета снова.
	//      Автоматически считаем их лучшими, однако каждый клиентский идентификатор автоматически считаем лучшим только
	//      один раз. Для этого выбранным устанавливаем C=0: если C<1 то клиентский идентификатор встретился повторно, и
	//      соответствия с ним требуют дополнительной проверки (см. "в-третьих") и могут быть либо выбраны либо отвергнуты.
	//      Так же, как и на шаге 2.1, если кого-то выбрали, то вытесняем все остальные с таким же идентификатором со
	//      стороны банка. Если в какой-то момент у какого-то идентификатора стало C = 1, то сразу возвращаемся на п.2.1.
	
	ЕмкостьИдентификаторовОперацииКлиент  = Новый Соответствие; // Ключ - идентификатор со стороны клиента; значение - Число (выше обозначено как C)
	// Подготовительный этап - 1.
	Для Каждого Соответствие Из СоответствиеДокументовОперациям Цикл
		
		Емкость = ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент];
		Если Емкость = Неопределено Тогда
			ЕмкостьИдентификаторовОперацииКлиент.Вставить(Соответствие.ИдентификаторОперацииКлиент, 1);
		Иначе
			ЕмкостьИдентификаторовОперацииКлиент.Вставить(Соответствие.ИдентификаторОперацииКлиент, Емкость + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	// Основной (итерационный) этап - 2
	Лучшие = СоответствиеДокументовОперациям.СкопироватьКолонки();
	// На каждой итерации будем выделять Лучшие и удалять отвергнутые из СоответствиеДокументовОперациям.
	// В конце процедуры заменим СоответствиеДокументовОперациям на Лучшие.
	
	
	СоответствиеДокументовОперациям.Сортировать("Приоритет");// Коллекцию будем обходить с конца, потому что удаляем в цикле
	СоответствиеДокументовОперациям.Индексы.Добавить("ИдентификаторОперацииБанк");
	
	Пока СоответствиеДокументовОперациям.Количество() > 0 Цикл
		
		НадоВыполнитьПервыйЭтап = Истина;
		Пока НадоВыполнитьПервыйЭтап Цикл
			
			// 2.1
			ВыбранныеИдентификаторыОперацииБанк = Новый Соответствие; // Ключ - идентификатор со стороны банка;  значение - Истина
			КоличествоСтрок = СоответствиеДокументовОперациям.Количество();
			Для НомерСКонца = 1 По КоличествоСтрок Цикл
				
				Индекс       = КоличествоСтрок - НомерСКонца;
				Соответствие = СоответствиеДокументовОперациям[Индекс];
				
				Если ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВыбранныеИдентификаторыОперацииБанк[Соответствие.ИдентификаторОперацииБанк] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ВыбранныеИдентификаторыОперацииБанк.Вставить(Соответствие.ИдентификаторОперацииБанк, Истина);
				ЗаполнитьЗначенияСвойств(Лучшие.Добавить(), Соответствие);
				
			КонецЦикла;
			
			// Удаляем из списка неоднозначных все выбранные и вытесненные ими
			НадоВыполнитьПервыйЭтап = Ложь;
			Для НомерСКонца = 1 По КоличествоСтрок Цикл
				
				Индекс       = КоличествоСтрок - НомерСКонца;
				Соответствие = СоответствиеДокументовОперациям[Индекс];
				
				Если ВыбранныеИдентификаторыОперацииБанк[Соответствие.ИдентификаторОперацииБанк] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Емкость = ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] - 1;
				Если Емкость = 1 Тогда
					НадоВыполнитьПервыйЭтап = Истина;
				КонецЕсли;
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = Емкость;
				СоответствиеДокументовОперациям.Удалить(Соответствие);
				
			КонецЦикла;
			
		КонецЦикла; // по НадоВыполнитьПервыйЭтап
			
			
		// 2.3.
		КоличествоСтрок = СоответствиеДокументовОперациям.Количество();
		Пока КоличествоСтрок > 0 Цикл
			
			Соответствие = СоответствиеДокументовОперациям[КоличествоСтрок - 1];
			
			Если СуммыПлатежныхПоручений = Неопределено Тогда
				СуммаПлатежногоПоручения = Неопределено;
			Иначе
				СуммаПлатежногоПоручения = СуммыПлатежныхПоручений[Соответствие.ПлатежноеПоручение];
			КонецЕсли;
				
			Если ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] > 0 Тогда
				Выбрано = Истина;
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = 0;
				Если СуммаПлатежногоПоручения <> Неопределено И Не ЗначениеЗаполнено(Соответствие.ДокументИсполнения) Тогда
					СуммыПлатежныхПоручений[Соответствие.ПлатежноеПоручение] = СуммаПлатежногоПоручения - Соответствие.СуммаОперацииБанк;
				КонецЕсли;
			Иначе
				// Этот идентификатор со стороны клиента попал в выборку повторно. Проверим, допускается ли это.
				Если ЗначениеЗаполнено(Соответствие.ДокументИсполнения) Тогда
					Выбрано = Ложь;
				ИначеЕсли СуммаПлатежногоПоручения = Неопределено Тогда
					Выбрано = Ложь;
				ИначеЕсли СуммаПлатежногоПоручения < Соответствие.СуммаОперацииБанк Тогда
					Выбрано = Ложь;
				Иначе
					Выбрано = Истина;
					СуммыПлатежныхПоручений[Соответствие.ПлатежноеПоручение] = СуммаПлатежногоПоручения - Соответствие.СуммаОперацииБанк;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Выбрано Тогда
				// Удалим отвергнутую строку
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] =
					ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] - 1;
				СоответствиеДокументовОперациям.Удалить(Соответствие);
				КоличествоСтрок = КоличествоСтрок - 1;
			Иначе
				ЗаполнитьЗначенияСвойств(Лучшие.Добавить(), Соответствие);
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = 0; // Отметили, что выбрана
				
				// Вытесим все записи с выбранным идентификатором со стороны банка.
				Отбор = Новый Структура("ИдентификаторОперацииБанк", Соответствие.ИдентификаторОперацииБанк);
				// При этом может оказаться, что нужна еще одна итерация
				НужнаЕщеИтерация = Ложь;
				КУдалению = СоответствиеДокументовОперациям.НайтиСтроки(Отбор);
				Для Каждого Соответствие Из КУдалению Цикл
					
					Емкость = ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] - 1;
					Если Емкость = 1 Тогда
						НужнаЕщеИтерация = Истина;
					КонецЕсли;
					ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = Емкость;
					СоответствиеДокументовОперациям.Удалить(Соответствие);
					КоличествоСтрок = КоличествоСтрок - 1;
					
				КонецЦикла;
				
				Если НужнаЕщеИтерация Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	СоответствиеДокументовОперациям = Лучшие;
	
КонецПроцедуры

Функция СтавкаНДС(ЗначениеСтавкиНДС)
	
	Если Не ЗначениеЗаполнено(ЗначениеСтавкиНДС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	ЗначениеСтавкиНДС = СтрЗаменить(ЗначениеСтавкиНДС, "/", "_"); // Приводим 20/120 к 20_120
	ПриведенноеЗначениеСтавкиНДС = СтрЗаменить(ЗначениеСтавкиНДС, "_", "");
	ЧисловоеЗначениеСтавки = ОписаниеТипаЧисло.ПривестиЗначение(ПриведенноеЗначениеСтавкиНДС);
	
	Возврат УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(ЧисловоеЗначениеСтавки);
	
КонецФункции

Функция СуммаНДС(СтавкаНДС, СуммаДокумента)
	
	Если СтавкаНДС = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВычислитьСуммуНДС(СтавкаНДС, СуммаДокумента);
	
КонецФункции

Функция ВычислитьСуммуНДС(ТекущаяСтавкаНДС, Сумма)
	
	ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекущаяСтавкаНДС);
	СуммаНДС = Окр(РассчитатьСуммуНДС(Сумма, Истина, ЗначениеСтавкиНДС), 2);
	
	Возврат СуммаНДС;
	
КонецФункции

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма            - Число - сумма от которой надо рассчитывать налоги;
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму ("внутри" или "сверху");
//  СтавкаНДС        - Число - процентная ставка НДС.
//
// Возвращаемое значение:
//  Число - полученная сумма НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС)

	Если СуммаВключаетНДС Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если НЕ СуммаВключаетНДС Тогда
		СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
	КонецЕсли;
	
	Возврат СуммаНДС;

КонецФункции // РассчитатьСуммуНДС()

#КонецОбласти

#Область ПрограммныйИнтерфейсЗаполнениеДокументов

Функция НовыйДанныеЗаполнения(Операция, ПлатежноеПоручение, ХозяйственнаяОперация, ВладелецСчета)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидДанныхЗаполнения",   "ДанныеБанка");
	ДанныеЗаполнения.Вставить("Операция",              Операция);
	ДанныеЗаполнения.Вставить("ПлатежноеПоручение",    ПлатежноеПоручение);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("ВладелецСчета",         ВладелецСчета);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументов

// Отбор - Массив идентификаторов операций в выписке
Функция СоздатьДокументы(Выписка, РаспознаннаяВыписка, Настройки, Отбор = Неопределено) Экспорт
	
	РезультатСозданияДокументов = Новый Соответствие; // Ключ - идентификатор операции, значение - см. НовыйРезультатЗаписиДокумента()
	
	СохранятьДанныеАвтозаполнения = СохранятьДанныеАвтозаполненияДокументов();
	
	// Будем сохранять информацию о созданных во время загрузки контрагентах в отдельной таблице
	// и использовать ее, чтобы не создавать контрагентов повторно.
	ТаблицаОбъектовСозданныхПриЗагрузке = Обработки.КлиентБанк.СоздатьСтруктуруТаблицыОбъектовСозданныхПриЗагрузке();
	
	Для Каждого Операция Из Выписка.Операции Цикл
		
		Если Отбор <> Неопределено И Отбор.Найти(Операция.Идентификатор) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РаспознаннаяОперация = РаспознаннаяВыписка.Операции.Найти(Операция.Идентификатор, "Идентификатор");
		Если РаспознаннаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ХозяйственнаяОперация = РаспознаннаяОперация.ХозяйственнаяОперация;
		Если ХозяйственнаяОперация = Неопределено 
			И Не ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
			И Не ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
			// Записывать такой документ не имеет смысла
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
			// 1. Может быть "распознана" пользователем. В этом случае следует записать результат его работы.
			// 2. Банковский документ может быть создан вручную, при загрузке получаем только отметку подтверждения выпиской банка.
			ОбъектДокумента = РаспознаннаяОперация.Ссылка.ПолучитьОбъект();
			
			Если Операция.ПоступилоСписано = "Списано"
				И ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.РасходСоСчета") Тогда
				// Если документ уже подтвержден выпиской банка, то отметку не изменяем, чтобы не устанавливалась
				// "модифицированность" документа, т.к. в ЗаписатьДокумент() если документ модифицирован,
				// он обязательно будет перезаписан, а это замедляет загрузку Выписки и сбивает Последовательность документов.
				// А также может привести к тому, что у документов будет отменено проведение, если в Настройках не установлено,
				// что документы нужно Проводить после загрузки.
				//Если ОбъектДокумента.НеПодтвержденоВыпискойБанка Тогда
				//	ОбъектДокумента.НеПодтвержденоВыпискойБанка = Ложь;
				//КонецЕсли;
				
				// Документ "Списание с расчетного счета" может быть создан на основании документа "Платежное поручение",
				// до выгрузки платежа в банк.
				// Дата банковского документа при этом будет такой же, как в платежном поручении.
				// При загрузке выписки необходимо привести дату банковского документа в соответствие с датой исполнения платежа.
				Если ЗначениеЗаполнено(Операция.ДатаИсполнения)
					И НачалоДня(Операция.ДатаИсполнения) <> НачалоДня(ОбъектДокумента.Дата) Тогда
					ВремяДокумента = ОбъектДокумента.Дата - НачалоДня(ОбъектДокумента.Дата);
					ОбъектДокумента.Дата = Операция.ДатаИсполнения + ВремяДокумента;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СохранятьДанныеАвтозаполнения Тогда
			ОбъектДокумента = РанееЗаполненныйОбъект(ХозяйственнаяОперация, Настройки);
		Иначе
			ОбъектДокумента = Неопределено;
		КонецЕсли;
			
		Если ОбъектДокумента = Неопределено Тогда
			ТипСсылки = ТипДокументаОперацииВыписки(Операция);
			Если ТипСсылки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый(ТипСсылки));
			Если МенеджерДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбъектДокумента = МенеджерДокумента.СоздатьДокумент();
			//ДанныеЗаполнения = НовыйДанныеЗаполнения(
			//	Операция,
			//	РаспознаннаяОперация.ПлатежноеПоручение,
			//	ХозяйственнаяОперация,
			//	РаспознаннаяВыписка.ВладелецСчета);
			//ОбъектДокумента.Заполнить(ДанныеЗаполнения);
			
			//
			ЭтоНовыйДокумент = Истина;
			СтрокаИзмененныхРеквизитов = "";
			ТаблицаРезультата = Неопределено;
			ЕстьПредупреждения = Ложь;
			ВыдаватьСообщения = Истина;
			
			СтрокаСекции = Операция.СтрокаСекции;
			ДанныеОбъекта = Новый Структура("Организация, БанковскийСчет", СтрокаСекции.БанковскийСчет.Владелец, СтрокаСекции.БанковскийСчет);
			
			// Некоторые элементы справочников могли быть уже созданы к этому моменту
			Если ХозяйственнаяОперация <> Неопределено Тогда
				Если ХозяйственнаяОперация.Свойство("Контрагент") И ЗначениеЗаполнено(ХозяйственнаяОперация.Контрагент)
					И СтрокаСекции.Контрагент <> ХозяйственнаяОперация.Контрагент Тогда
					СтрокаСекции.Контрагент = ХозяйственнаяОперация.Контрагент;
					СтрокаСекции.КонтрагентИсходный = ХозяйственнаяОперация.Контрагент;
					СтрокаСекции.КонтрагентНайден = Истина;
					СтрокаСекции.КонтрагентНеНайденКартинка = -1;
				КонецЕсли;
				
				Если ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента")
					И ЗначениеЗаполнено(ХозяйственнаяОперация.БанковскийСчетКонтрагента)
					И СтрокаСекции.СчетКонтрагента <> ХозяйственнаяОперация.БанковскийСчетКонтрагента Тогда
					СтрокаСекции.СчетКонтрагента = ХозяйственнаяОперация.БанковскийСчетКонтрагента;
					СтрокаСекции.СчетКонтрагентаИсходный = ХозяйственнаяОперация.БанковскийСчетКонтрагента;
					СтрокаСекции.СчетКонтрагентаНеНайденКартинка = -1;
				КонецЕсли;
				
				Если ХозяйственнаяОперация.Свойство("ДоговорКонтрагента")
					И ЗначениеЗаполнено(ХозяйственнаяОперация.ДоговорКонтрагента)
					И СтрокаСекции.Договор <> ХозяйственнаяОперация.ДоговорКонтрагента Тогда
					СтрокаСекции.Договор = ХозяйственнаяОперация.ДоговорКонтрагента;
					СтрокаСекции.ДоговорНеНайденКартинка = -1;
				КонецЕсли;
			КонецЕсли;
			
			// Контрагент, Счет, Договор будут созданы, если соответствующее действие выбрано в помощнике создания справочников
			Если СтрокаСекции.ИспользоватьПомощникСозданияСправочников Тогда
				Обработки.КлиентБанк.СоздатьКонтрагентаСчетДоговор(СтрокаСекции, ДанныеОбъекта, ТаблицаОбъектовСозданныхПриЗагрузке);
			КонецЕсли;
			
			СтрокаИзмененныхРеквизитов = "";
			ТипДокумента = ОбъектДокумента.Метаданные().Имя;
			СтрокаСекции.Вставить("ТолькоДополнитьЗначениямиИзНастроек", Истина);
			ОбъектДокумента.Заполнить(СтрокаСекции);
			Если МенеджерДокумента = Документы.РасходСоСчета Тогда
				ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов, ДанныеОбъекта);
			ИначеЕсли МенеджерДокумента = Документы.ПоступлениеНаСчет Тогда
				ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов, ДанныеОбъекта);
			КонецЕсли;
			ОбъектДокумента.БанковскаяОперация = СтрокаСекции.Операция;
			
			// Зададим пометку на удаление.
			Если ОбъектДокумента.ПометкаУдаления Тогда
				ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь, ТаблицаРезультата, СтрокаСекции);
			КонецЕсли;
			
			// Заполним комментарий.
			Если СтрокаСекции.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента Тогда
				Если Не ПустаяСтрока(ОбъектДокумента.Комментарий) Тогда
					ОбъектДокумента.Комментарий = ОбъектДокумента.Комментарий + Символы.ПС;
				КонецЕсли;
				ОбъектДокумента.Комментарий = ОбъектДокумента.Комментарий + СтрокаСекции.ТекстДокумента;
			КонецЕсли;
			
			// Запишем объект.
			ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, ТаблицаРезультата, ЕстьПредупреждения, ВыдаватьСообщения, СтрокаИзмененныхРеквизитов, Настройки);
			
			// Обновим информацию о документе в таблице импорта.
			Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
					Если СтрокаСекции.ВидДокумента = "РасходСоСчета" Тогда
						РеквизитНомера = "Номер";
					Иначе
						РеквизитНомера = "НомерВходящегоДокумента";
					КонецЕсли;
					СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если СохранятьДанныеАвтозаполнения Тогда
			СохранитьДанныеАвтозаполненияДокумента(ОбъектДокумента, ХозяйственнаяОперация);
		КонецЕсли;
		
		Проводить = ЗначениеНастройкиСозданияДокументов(Настройки, "ПроводитьДокумент", ТипЗнч(ОбъектДокумента.Ссылка));
		РезультатСозданияДокумента = ЗаписатьДокумент(ОбъектДокумента, Проводить);
		
		Если ЗначениеЗаполнено(РезультатСозданияДокумента.Ссылка) Тогда
			РаспознаннаяОперация.Ссылка = РезультатСозданияДокумента.Ссылка;
		КонецЕсли;
		
		РезультатСозданияДокументов.Вставить(Операция.Идентификатор, РезультатСозданияДокумента);
		
	КонецЦикла;
	
	Возврат РезультатСозданияДокументов;
	
КонецФункции

// Перед созданием документов следует избавиться от ссылок на не созданные новые объекты,
// чтобы в созданных документов не было "битых" ссылок.
// При работе формы в режиме "не создавать элементы автоматически" новые объекты не создаются, но документы должны быть созданы.
Процедура УдалитьНовыеОбъекты(РаспознанныеОперации, УчастникиОпераций) Экспорт
	
	Для Каждого РаспознаннаяОперация Из РаспознанныеОперации Цикл
		
		СвойстваКУдалению = Новый Массив;
		
		Если РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СвойствоОперации Из РаспознаннаяОперация.ХозяйственнаяОперация Цикл
			
			ТипСвойства = ТипЗнч(СвойствоОперации.Значение);
			
			НовыеОбъектыПоТипу = УчастникиОпераций.НовыеОбъекты[ТипСвойства];
			Если НовыеОбъектыПоТипу = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НовыеОбъектыПоТипу.Найти(СвойствоОперации.Значение, "Ссылка") <> Неопределено Тогда
				СвойстваКУдалению.Добавить(СвойствоОперации.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ИмяСвойства Из СвойстваКУдалению Цикл
			РаспознаннаяОперация.ХозяйственнаяОперация.Удалить(ИмяСвойства);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьДокумент(Документ, Проводить)
	
	Результат = НовыйРезультатЗаписиДокумента();
	Результат.Успешно       = Истина;
	Результат.Ссылка        = Документ.Ссылка;
	Результат.Идентификатор = Документ.НомерВходящегоДокумента;
	
	Если Документ.ПометкаУдаления Тогда
		Документ.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	// Проверим, надо ли что-то записывать
	Если Не Документ.Модифицированность()
		И Не Документ.ЭтоНовый()
		И (Не Проводить Или Документ.Проведен) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Отказ = ДатыЗапретаИзменения.ИзменениеЗапрещено(Документ,, ОписаниеОшибки);
	Если Отказ Тогда
		Результат.Успешно = Ложь;
		
		Результат.КраткоеПредставлениеОшибки   = ОписаниеОшибки;
		Результат.ПодробноеПредставлениеОшибки = ОписаниеОшибки;
		
		Возврат Результат;
	Иначе
		Документ.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	КонецЕсли;
	
	Если Проводить Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли Документ.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	// Подготовим элементы описания ошибки
	ШаблонСообщенияОбОшибке = НСтр("ru = 'Не удалось %1 документ %2 по причине: 
                                    |%3'"); // "создать", "записать", "провести"
	
	Если Не Документ.ЭтоНовый() Тогда
		ПредставлениеДокумента = Строка(Документ.Ссылка);
	Иначе
		// Стандартное представление не подходит, поэтому сконструируем нестандартное
		ШаблонПредставления = НСтр("ru = '%1 № %2 от %3'");
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			Документ.Метаданные().Синоним,
			Документ.НомерВходящегоДокумента,
			Формат(Документ.ДатаВходящегоДокумента, "ДЛФ=D"));
	КонецЕсли;
	
	ОшибкаПроверкиЗаполнения = Ложь;
	
	// Проверим возможность проведения
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПолучитьСообщенияПользователю(Истина); // Очистим стек сообщений
		
		Если Не Документ.ПроверитьЗаполнение() Тогда
			
			ОшибкаПроверкиЗаполнения = Истина;
			
			Результат.Успешно = Ложь;
			
			СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
			ТекстыСообщений = Новый Массив;
			Для Каждого СообщениеПользователю Из СообщенияПроверкиЗаполнения Цикл
				ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
				Результат.КраткоеПредставлениеОшибки = СтрСоединить(ТекстыСообщений, Символы.ПС);
			Иначе
				Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Документ заполнен неверно'");
			КонецЕсли;
			
			Результат.ПодробноеПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запишем документ
	Если Результат.Успешно Тогда
		ПолучитьСообщенияПользователю(Истина); // Очистим стек сообщений
		
		Попытка
			Документ.Записать(РежимЗаписи);
		Исключение
			Результат.Успешно = Ложь;
			
			СообщенияПриЗаписи = ПолучитьСообщенияПользователю(Истина);
			ТекстыСообщений = Новый Массив;
			Для Каждого СообщениеПользователю Из СообщенияПриЗаписи Цикл
				ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
				Результат.КраткоеПредставлениеОшибки   = СтрСоединить(ТекстыСообщений, Символы.ПС);
				Результат.ПодробноеПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
			Иначе
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				Результат.КраткоеПредставлениеОшибки   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Результат.Успешно Тогда
		Результат.Ссылка = Документ.Ссылка;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (Не ТранзакцияАктивна() ИЛИ ОшибкаПроверкиЗаполнения) Тогда
		// Если не удалось провести документ, то хотя бы запишем. Сделать это можем только, если запись выполняется вне транзакции.
		РезультатЗаписи = ЗаписатьДокумент(Документ, Ложь);
		Если Не РезультатЗаписи.Успешно Тогда
			Возврат РезультатЗаписи;
		Иначе
			// Все равно считаем операцию не успешной
			Результат.Ссылка       = Документ.Ссылка;
			ПредставлениеДокумента = Строка(Результат.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Оформим результат операции
	Если Не Результат.Успешно Тогда
		
		УровеньОшибкиЖР = УровеньЖурналаРегистрации.Ошибка;
		Если Не ЗначениеЗаполнено(Результат.Ссылка) Тогда
			Действие = НСтр("ru = 'создать'");
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Действие = НСтр("ru = 'провести'");
			
			// Документ может не проводится из-за того, что не полностью заполнен.
			// Это не является "ошибкой" базы (или файла), поэтому такие сообщения выводим для информации.
			УровеньОшибкиЖР = УровеньЖурналаРегистрации.Предупреждение;
		Иначе
			Действие = НСтр("ru = 'записать'");
		КонецЕсли;
		
		Результат.ТекстСообщенияПользователю  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбОшибке,
			Действие,
			ПредставлениеДокумента,
			Результат.КраткоеПредставлениеОшибки);
		
		ТекстЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбОшибке,
			Действие,
			ПредставлениеДокумента,
			Результат.ПодробноеПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньОшибкиЖР,
			Документ.Метаданные(),
			Документ.Ссылка,
			ТекстЖурналаРегистрации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатЗаписиДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",                      Ложь);
	Результат.Вставить("Ссылка",                       Неопределено);
	Результат.Вставить("Идентификатор",                "");
	Результат.Вставить("ТекстСообщенияПользователю",   "");
	Результат.Вставить("ПодробноеПредставлениеОшибки", "");
	Результат.Вставить("КраткоеПредставлениеОшибки",   "");
	
	Возврат Результат;
	
КонецФункции


#Область ПроцедурыИзКБУНФ

Процедура ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаТаблицы, Состояние, ЭтоНовый, Загружен, СписокДействий, 
	Комментарий, Документ = Неопределено, Важность = 0, СтрокаИзмененныхРеквизитов = "")
	
	Если ТаблицаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ложь Тогда ТаблицаРезультата = Новый ТаблицаЗначений КонецЕсли; // УДАЛИТЬ СТРОКУ!!!
	
	ДокументСтрока = СтрокаТаблицы.ИмяДокумента + НСтр("ru=' №'") + СтрокаТаблицы.Номер + НСтр("ru=' от '") + СтрокаТаблицы.Дата;
	
	МаксВажность = Важность;
	
	// Обработаем комментарии (
	// Строк с комментариями может быть несколько.
	МассивСтрок = ТаблицаРезультата.НайтиСтроки(Новый Структура("Документ, Состояние, Важность", ДокументСтрока, Состояние, Важность));
	ИтоговыйКомментарий = "";
	Если МассивСтрок.Количество() > 0 Тогда
		Для Каждого ЭлементМассива Из МассивСтрок Цикл
			МаксВажность = Макс(МаксВажность, ЭлементМассива.Важность);
			Если ИтоговыйКомментарий = "" Тогда
				ИтоговыйКомментарий = ЭлементМассива.Комментарий;
			Иначе
				ИтоговыйКомментарий = ИтоговыйКомментарий + Символы.ПС + ЭлементМассива.Комментарий;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИтоговыйКомментарий = "" Тогда
		ИтоговыйКомментарий = Комментарий;
	Иначе
		ИтоговыйКомментарий = ИтоговыйКомментарий + Символы.ПС + Комментарий;
	КонецЕсли;
	
	Если СтрокаИзмененныхРеквизитов <> "" Тогда
		Если ИтоговыйКомментарий = "" Тогда
			ИтоговыйКомментарий = СтрокаИзмененныхРеквизитов;
		Иначе
			ИтоговыйКомментарий = ИтоговыйКомментарий + Символы.ПС + СтрокаИзмененныхРеквизитов;
		КонецЕсли;
	КонецЕсли;
	// ) Обработаем комментарии
	
	СтрокаРезультата = ТаблицаРезультата.Добавить();
	
	СтрокаРезультата.СтрокаИзмененныхРеквизитов = СтрокаИзмененныхРеквизитов;
	СтрокаРезультата.Важность = МаксВажность;
	СтрокаРезультата.Комментарий = ИтоговыйКомментарий;
	СтрокаРезультата.Состояние = Состояние;
	СтрокаРезультата.Документ = ДокументСтрока;
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		СтрокаРезультата.Сумма = СтрокаТаблицы.СуммаДокумента;
	Иначе
		СтрокаРезультата.ДокументСсылка = СтрокаТаблицы.Документ;
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Документ, "ВидОперации, СуммаДокумента");
		СтрокаРезультата.ВидОперации = ДанныеДокумента.ВидОперации;
		СтрокаРезультата.Сумма = ДанныеДокумента.СуммаДокумента;
	КонецЕсли;
	
	СтрокаРезультата.Записывался = Загружен;
	СтрокаРезультата.СозданНовый = ЭтоНовый;
	
	Если ЭтоНовый И Не ЗначениеЗаполнено(СписокДействий) Тогда
		
		СтрокаРезультата.Действия = НСтр("ru='• Создан новый документ'");
		
	Иначе
		Если ТипЗнч(СписокДействий) = Тип("Массив") Тогда
			ПерваяСтрока = Истина;
			Для Каждого Действие Из СписокДействий Цикл
				
				СтрокаРезультата.Действия = СтрокаРезультата.Действия + ?(ПерваяСтрока, "",Символы.ПС) + "• " + Действие;
				ПерваяСтрока = Ложь;
				
			КонецЦикла;
		Иначе
			СтрокаРезультата.Действия = СписокДействий;
		КонецЕсли;
	КонецЕсли;
	
	СчетчикСтрок = МассивСтрок.Количество() - 1;
	Пока СчетчикСтрок >= 0 Цикл
		ЭлементМассива = МассивСтрок[СчетчикСтрок];
		ТаблицаРезультата.Удалить(ЭлементМассива);
		СчетчикСтрок = СчетчикСтрок - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка, ТаблицаРезультата = Неопределено, СтрокаСекции = Неопределено, ТаблицаПомеченныхНаУдалениеКакДубль = Неопределено)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, НСтр("ru = ' помечен на удаление'"), НСтр("ru = ' отменена пометка на удаление'"));
	НазваниеДействияДляПротокола = ?(Пометка, НСтр("ru = '• Помечен на удаление'"), НСтр("ru = '• Отменена пометка на удаление'"));
	
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: %НазваниеДействия%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Если ТаблицаРезультата <> Неопределено Тогда
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НазваниеДействияДляПротокола, Ложь, Ложь, НазваниеДействияДляПротокола, "");
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред%: не %НазваниеДействия%! Произошли ошибки при записи!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеДействия%", НазваниеДействия);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Если ТаблицаРезультата <> Неопределено Тогда
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НазваниеДействияДляПротокола, Ложь, Ложь, НСтр("ru = '• Произошли ошибки при записи!'"), ОписаниеОшибки());
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки
	
КонецФункции

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет") Тогда
		НазваниеОбъекта = НСтр(
			"ru = 'документ ""Поступление на счет"" № %Номер% от %Дата%'");
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Номер%", Строка(СокрЛП(Объект.Номер)));
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Дата%", Строка(Объект.Дата));
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходСоСчета") Тогда
		НазваниеОбъекта = НСтр(
			"ru = 'документ ""Расход со счета"" № %Номер% от %Дата%'");
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Номер%", Строка(СокрЛП(Объект.Номер)));
		НазваниеОбъекта = СтрЗаменить(НазваниеОбъекта, "%Дата%", Строка(Объект.Дата));
	Иначе
		НазваниеОбъекта = НСтр("ru = 'объект'");
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

// Процедура заполняет реквизиты документа РасходСоСчета.
//
Процедура ЗаполнитьРеквизитыРасходСоСчета(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов, ДанныеОбъекта)
	
	ТекущийДокументПланирования = Неопределено;
	
	// Платежное поручение укажем в качестве основания.
	Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
		
		ОбъектДокумента.Заполнить(ИсходныеДанные.ПлатежноеПоручение);
		
		УстановитьСвойство(
			ОбъектДокумента,
			"ДокументОснование",
			ИсходныеДанные.ПлатежноеПоручение,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
		Если ИсходныеДанные.ПлатежноеПоручение.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение.РасшифровкаПлатежа[0].ДокументПланирования) Тогда
				ТекущийДокументПланирования = ИсходныеДанные.ПлатежноеПоручение.РасшифровкаПлатежа[0].ДокументПланирования;
			ИначеЕсли ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение.ДокументОснование) И
				ТипЗнч(ИсходныеДанные.ПлатежноеПоручение.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан") Тогда
				ТекущийДокументПланирования = ИсходныеДанные.ПлатежноеПоручение.ДокументОснование
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение шапки документа.
	УстановитьСвойство(
		ОбъектДокумента,
		"Дата",
		?(НачалоДня(ИсходныеДанные.ДатаДок) = НачалоДня(ТекущаяДатаСеанса()), ТекущаяДатаСеанса(), КонецДня(ИсходныеДанные.ДатаДок)),
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		ИсходныеДанные.ВидОперации,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Организация",
		ДанныеОбъекта.Организация,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.БанковскийСчет,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	// Перемещение денег
	УстановитьСвойство(
		ОбъектДокумента,
		"Касса",
		ИсходныеДанные.Касса,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	// Конец Перемещение денег
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВалютаДенежныхСредств",
		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Статья",
		ИсходныеДанные.СтатьяДДС,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
		
	УстановитьСвойство(
		ОбъектДокумента,
		"Проект",
		ИсходныеДанные.Проект,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
		
	УстановитьСвойство(
		ОбъектДокумента,
		"Подразделение",
		ИсходныеДанные.Подразделение,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаОтсылки,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
		
	УстановитьСвойство(
		ОбъектДокумента,
		"Корреспонденция",
		ИсходныеДанные.Корреспонденция,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		
		// Поищем вид налогообложения в назначении платежа.
		Если СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru='НДС не облагается'"))) > 0 ИЛИ 
			СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru='Без НДС'"))) > 0 ИЛИ
			СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru='Без налога (НДС)'"))) > 0 ИЛИ
			СтрНайти(ВРег(ИсходныеДанные.НазначениеПлатежа), ВРег(НСтр("ru='НДС не предусмотрен'"))) > 0
		Тогда
			ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		// Иначе установим налогообложение по умолчанию.
		Иначе
			ОбъектДокумента.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ДанныеОбъекта.Организация, , ИсходныеДанные.ДатаДок);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
		УстановитьСвойство(
			ОбъектДокумента,
			"СчетКонтрагента",
			ИсходныеДанные.СчетКонтрагента,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
		Тогда
		
		//Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
		//	УстановитьСвойство(
		//		ОбъектДокумента,
		//		"СчетКонтрагента",
		//		ИсходныеДанные.СчетКонтрагента,
		//		,
		//		ЭтоНовыйДокумент,
		//		СтрокаИзмененныхРеквизитов);
		//КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
			
		НайденоПлатежноеПоручение = ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
		
		УстановитьСвойство(
			СтрокаРасшифровки,
			"Договор",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор),
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
		Если ЭтоНовыйДокумент ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Документ) Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"ПризнакАванса",
				ИсходныеДанные.ПризнакАванса,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		Если НЕ НайденоПлатежноеПоручение Тогда
			СтрокаРасшифровки.Документ = Неопределено;
		КонецЕсли;
		
		Если ЭтоНовыйДокумент
		 ИЛИ ОднаСтрокаВРасшифровкеПлатежа
		   И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента 
		   Тогда
		   
			Если НЕ НайденоПлатежноеПоручение Тогда
				СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			КонецЕсли;
			
			ДатаЗаполнения = ОбъектДокумента.Дата;
			ВалютаРасчетов = СтрокаРасшифровки.Договор.ВалютаРасчетов;
			
			РассчитатьКурсИСуммуРасчетов(
				СтрокаРасшифровки,
				ВалютаРасчетов,
				ДатаЗаполнения,
				ОбъектДокумента,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
			
			Если СтрокаРасшифровки.Курс = 0 Тогда
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Курс",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Кратность",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"СуммаРасчетов",
					СтрокаРасшифровки.СуммаПлатежа,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
				СтрокаРасшифровки.СтавкаНДС = ИсходныеДанные.ПлатежноеПоручение.СтавкаНДС;
				
				Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
					ЗначениеСтавкиНДС = 0;
					ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные, СтрокаРасшифровки.СтавкаНДС, ЗначениеСтавкиНДС);
				Иначе
					ЗначениеСтавкиНДС = ИсходныеДанные.ПлатежноеПоручение.СтавкаНДС.Ставка;
				КонецЕсли;
				
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа
					- (СтрокаРасшифровки.СуммаПлатежа)
					/ ((ЗначениеСтавкиНДС + 100) / 100);
			Иначе
				Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(ОбъектДокумента.Организация.ВидСтавкиНДСПоУмолчанию);
					
					Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
						// Поищем ставку НДС в назначении платежа.
						СтавкаНДСВНазначенииПлатежа = Неопределено;
						ЗначениеСтавкиНДС = 0;
						ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные, СтавкаНДСВНазначенииПлатежа, ЗначениеСтавкиНДС);
					Иначе
						СтавкаНДСВНазначенииПлатежа = Неопределено;
						ЗначениеСтавкиНДС = 0;
					КонецЕсли;
					
					Если ЗначениеСтавкиНДС = 0 ИЛИ СтавкаНДСВНазначенииПлатежа = Неопределено Тогда
						ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
					Иначе
						СтавкаНДСПоУмолчанию = СтавкаНДСВНазначенииПлатежа;
					КонецЕсли;
					
					СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
					СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа
						- (СтрокаРасшифровки.СуммаПлатежа)
						/ ((ЗначениеСтавкиНДС + 100) / 100);
					
				Иначе
					
					Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
						СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
					Иначе
						СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
					КонецЕсли;
					
					СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
					СтрокаРасшифровки.СуммаНДС = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаРасшифровки.Проект = ОбъектДокумента.Проект;
			СтрокаРасшифровки.Подразделение = ОбъектДокумента.Подразделение;
			
		КонецЕсли;
		
		// Способ зачета
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
			И НЕ ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"СпособЗачета",
				ИсходныеДанные.СпособЗачетаТЧ,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		// Заполним информацию о заказе, счете и расчетном документе.
		Если ИсходныеДанные.СпособЗачетаТЧ <> ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
			И (ЭтоНовыйДокумент ИЛИ ОднаСтрокаВРасшифровкеПлатежа) Тогда
			ЗаполнитьИнформациюОЗаказеСчетеДокументеРасчетов(ЭтоНовыйДокумент, ОбъектДокумента, ИсходныеДанные, СтрокаРасшифровки, Истина, СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
		Если ОбъектДокумента.ЭквайринговыйТерминал.Пустая() Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ЭквайринговыйТерминал",
				Справочники.СпособыОплаты.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(
					ОбъектДокумента.БанковскийСчет, ОбъектДокумента.Организация, ОбъектДокумента.Контрагент),
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ПланыСчетов.Управленческий.НераспределеннаяПрибыль,
			Истина,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
		Если Не ЗначениеЗаполнено(ИсходныеДанные.ВидНалога)
			И ЗначениеЗаполнено(ИсходныеДанные.ПлатежноеПоручение) Тогда
			
			ТекущийВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходныеДанные.ПлатежноеПоручение, "Налог");
			ДатаОбязательногоПримененияЕНП = РегламентированнаяОтчетностьУСН.ДатаОбязательногоПримененияЕНП();
			Если ОбъектДокумента.Дата >= ДатаОбязательногоПримененияЕНП Тогда
				ТекущийВидНалога = РегламентированнаяОтчетностьУСН.АктуальныйНалогЕНП(ТекущийВидНалога);
			КонецЕсли;
			
			УстановитьСвойство(
				ОбъектДокумента,
				"ВидНалога",
				ТекущийВидНалога,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		ИначеЕсли ЗначениеЗаполнено(ИсходныеДанные.ВидНалога) Тогда
			
			ТекущийВидНалога = ИсходныеДанные.ВидНалога;
			ДатаОбязательногоПримененияЕНП = РегламентированнаяОтчетностьУСН.ДатаОбязательногоПримененияЕНП();
			Если ОбъектДокумента.Дата >= ДатаОбязательногоПримененияЕНП Тогда
				ТекущийВидНалога = РегламентированнаяОтчетностьУСН.АктуальныйНалогЕНП(ТекущийВидНалога);
			КонецЕсли;
			
			УстановитьСвойство(
				ОбъектДокумента,
				"ВидНалога",
				ТекущийВидНалога,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсходныеДанные.СрокУплаты) Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СрокУплаты",
				ИсходныеДанные.СрокУплаты,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
		Или ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Подотчетник",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
		Подразделение = Справочники.Сотрудники.ПолучитьТекущееПодразделениеСотрудника(ИсходныеДанные.Контрагент);
		Если Подразделение <> Неопределено Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"Подразделение",
				Подразделение,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
		УстановитьСвойство(
				ОбъектДокумента,
				"ДоговорКредитаЗайма",
				ИсходныеДанные.Договор,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
			
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику
		ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных Тогда
		
		КонтрагентПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			КонтрагентПустаяСсылка,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
	КонецЕсли;
	
	 // Определим значение флага "УчитыватьВНУ"
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(ОбъектДокумента.Организация, ОбъектДокумента.Дата);

	Если ОбъектДокумента.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
		ИЛИ ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
		ИЛИ ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
		ИЛИ ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты) Тогда
		ОбъектДокумента.УчитыватьВНУ = СистемаНалогообложенияСтруктура.ПлательщикУСН;
	Иначе
		Если ЗначениеЗаполнено(ОбъектДокумента.Статья) Тогда
			ОбъектДокумента.УчитыватьВНУ = ОбъектДокумента.Статья.УчитыватьВНУ И СистемаНалогообложенияСтруктура.ПлательщикУСН;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийДокументПланирования <> Неопределено Тогда
		Для Каждого ТекущаяСтрокаРасшифровки Из ОбъектДокумента.РасшифровкаПлатежа Цикл
			ТекущаяСтрокаРасшифровки.ДокументПланирования = ТекущийДокументПланирования;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ОтображатьСчетаУчета")
		И НЕ ЗначениеЗаполнено(ОбъектДокумента.Корреспонденция) Тогда
		
		УстановитьСвойство(
				ОбъектДокумента,
				"Корреспонденция",
				ПланыСчетов.Управленческий.ПрочиеРасходы,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыРасходСоСчета()

// Процедура заполняет реквизиты документа ПоступлениеНаСчет.
//
Процедура ЗаполнитьРеквизитыПоступлениеНаСчет(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов, ДанныеОбъекта)
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Дата",
		?(НачалоДня(ИсходныеДанные.ДатаДок) = НачалоДня(ТекущаяДатаСеанса()), ТекущаяДатаСеанса(), КонецДня(ИсходныеДанные.ДатаДок)),
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВидОперации",
		ИсходныеДанные.ВидОперации,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Организация",
		ДанныеОбъекта.Организация,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"БанковскийСчет",
		ИсходныеДанные.БанковскийСчет,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	// Перемещение денег
	УстановитьСвойство(
		ОбъектДокумента,
		"Касса",
		ИсходныеДанные.Касса,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	// Конец Перемещение денег
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ВалютаДенежныхСредств",
		ИсходныеДанные.БанковскийСчет.ВалютаДенежныхСредств,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"Статья",
		ИсходныеДанные.СтатьяДДС,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
		
	УстановитьСвойство(
		ОбъектДокумента,
		"Проект",
		ИсходныеДанные.Проект,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
		
	УстановитьСвойство(
		ОбъектДокумента,
		"ПодразделениеЗатраты",
		ИсходныеДанные.Подразделение,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"СуммаДокумента",
		ИсходныеДанные.СуммаДокумента,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"НомерВходящегоДокумента",
		ИсходныеДанные.НомерДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	УстановитьСвойство(
		ОбъектДокумента,
		"ДатаВходящегоДокумента",
		ИсходныеДанные.ДатаДок,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
		
	УстановитьСвойство(
		ОбъектДокумента,
		"Корреспонденция",
		ИсходныеДанные.Корреспонденция,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
	Если ЭтоНовыйДокумент Тогда
		ОбъектДокумента.УстановитьНовыйНомер();
		ОбъектДокумента.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ДанныеОбъекта.Организация, , ИсходныеДанные.ДатаДок);
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
	 ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
	Тогда
	 
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
		
		УстановитьСвойство(
			СтрокаРасшифровки,
			"Договор",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор),
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
		Если ЭтоНовыйДокумент ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Документ) Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"ПризнакАванса",
				ИсходныеДанные.ПризнакАванса,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		СтрокаРасшифровки.Документ = Неопределено;
		
		// Заполнение табличной части документа.
		Если ЭтоНовыйДокумент
		 ИЛИ ОднаСтрокаВРасшифровкеПлатежа
		   И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
			
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			ДатаЗаполнения = ОбъектДокумента.Дата;
			ВалютаРасчетов = СтрокаРасшифровки.Договор.ВалютаРасчетов;
			
			РассчитатьКурсИСуммуРасчетов(
				СтрокаРасшифровки,
				ВалютаРасчетов,
				ДатаЗаполнения,
				ОбъектДокумента,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
			
			Если СтрокаРасшифровки.Курс = 0 Тогда
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Курс",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"Кратность",
					1,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов);
				
				УстановитьСвойство(
					СтрокаРасшифровки,
					"СуммаРасчетов",
					СтрокаРасшифровки.СуммаПлатежа,
					,
					ЭтоНовыйДокумент,
					СтрокаИзмененныхРеквизитов);
				
			КонецЕсли;
			
			Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				
				СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(ОбъектДокумента.Организация.ВидСтавкиНДСПоУмолчанию);
				
				// Поищем ставку НДС в назначении платежа.
				Если СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 18%") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(18%)") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (18%)") > 0 Тогда
					СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
					ЗначениеСтавкиНДС = 18;
				ИначеЕсли СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 10%") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(10%)") > 0 ИЛИ
					СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (10%)") > 0 Тогда
					СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(10);
					ЗначениеСтавкиНДС = 10;
				Иначе
					СтавкаНДСВНазначенииПлатежа = Неопределено;
					ЗначениеСтавкиНДС = 0;
				КонецЕсли;
				
				Если ЗначениеСтавкиНДС = 0 ИЛИ СтавкаНДСВНазначенииПлатежа = Неопределено Тогда
					ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
				Иначе
					СтавкаНДСПоУмолчанию = СтавкаНДСВНазначенииПлатежа;
				КонецЕсли;
				
				СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа
					- (СтрокаРасшифровки.СуммаПлатежа)
					/ ((ЗначениеСтавкиНДС + 100) / 100);
				
			Иначе
				
				Если ОбъектДокумента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
				СтрокаРасшифровки.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаРасшифровки.СуммаНДС = 0;
				
			КонецЕсли;
			
			СтрокаРасшифровки.Проект = ОбъектДокумента.Проект;
			СтрокаРасшифровки.Подразделение = ОбъектДокумента.ПодразделениеЗатраты;
			
		КонецЕсли;
		
		// Способ зачета
		Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			УстановитьСвойство(
				СтрокаРасшифровки,
				"СпособЗачета",
				ИсходныеДанные.СпособЗачетаТЧ,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		// Заполним информацию о заказе, счете и расчетном документе.
		Если ИсходныеДанные.СпособЗачетаТЧ <> ПредопределенноеЗначение("Перечисление.СпособыЗачетаИРаспределенияПлатежей.Авто")
			И (ЭтоНовыйДокумент ИЛИ ОднаСтрокаВРасшифровкеПлатежа) Тогда
			ЗаполнитьИнформациюОЗаказеСчетеДокументеРасчетов(ЭтоНовыйДокумент, ОбъектДокумента, ИсходныеДанные, СтрокаРасшифровки, Истина, СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		
		УстановитьСвойство(
			СтрокаРасшифровки,
			"Договор",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор),
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам
		ИЛИ ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам Тогда
		
		Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"СчетКонтрагента",
				ИсходныеДанные.СчетКонтрагента,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			ИсходныеДанные.Контрагент,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
		Если ОбъектДокумента.ЭквайринговыйТерминал.Пустая() Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ЭквайринговыйТерминал",
				Справочники.СпособыОплаты.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(
					ОбъектДокумента.БанковскийСчет, ОбъектДокумента.Организация, ОбъектДокумента.Контрагент),
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
		КонецЕсли;
		
		ПоложениеЭквайринговогоТерминала = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеЭквайринговогоТерминалаВБанковскихДокументах");
		ПоложениеНастроекНалоговогоУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах");
		УстановитьСвойство(ОбъектДокумента, "ПоложениеЭквайринговогоТерминала", ПоложениеЭквайринговогоТерминала, Истина, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов);
		УстановитьСвойство(ОбъектДокумента, "ПоложениеНастроекНалоговогоУчета", ПоложениеНастроекНалоговогоУчета, Истина, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
		
		Если ЗначениеЗаполнено(ИсходныеДанные.ВидНалога) Тогда
			УстановитьСвойство(
				ОбъектДокумента,
				"ВидНалога",
				ИсходныеДанные.ВидНалога,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
			КонецЕсли;
			
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ЛичныеСредстваПредпринимателя Тогда
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Корреспонденция",
			ПланыСчетов.Управленческий.НераспределеннаяПрибыль,
			Истина,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными Тогда
		
		КонтрагентПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
		
		УстановитьСвойство(
			ОбъектДокумента,
			"Контрагент",
			КонтрагентПустаяСсылка,
			,
			ЭтоНовыйДокумент,
			СтрокаИзмененныхРеквизитов);
		
	КонецЕсли;
	
	// Определим значение флага "УчитыватьВНУ"
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(ОбъектДокумента.Организация, ОбъектДокумента.Дата);
	
	// Если используется стандартная статья Прочее, то нужно установить УчитыватьВНУ
	Если ОбъектДокумента.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И (ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам
		ИЛИ ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги) Тогда
		ОбъектДокумента.УчитыватьВНУ = СистемаНалогообложенияСтруктура.ПлательщикУСН;
	Иначе
		Если ЗначениеЗаполнено(ОбъектДокумента.Статья) Тогда
			ОбъектДокумента.УчитыватьВНУ = ОбъектДокумента.Статья.УчитыватьВНУ И СистемаНалогообложенияСтруктура.ПлательщикУСН;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ОтображатьСчетаУчета")
		И НЕ ЗначениеЗаполнено(ОбъектДокумента.Корреспонденция) Тогда
		
		УстановитьСвойство(
				ОбъектДокумента,
				"Корреспонденция",
				ПланыСчетов.Управленческий.ПрочиеДоходы,
				Истина,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоступлениеНаСчет()

// Процедура записывает объект.
//
Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, ЭтоНовыйДокумент, ТаблицаРезультата, ЕстьПредупреждения, ВыдаватьСообщения, СтрокаИзмененныхРеквизитов, Настройки)
	
	УстановитьСвойство(
		ОбъектДляЗаписи,
		"НазначениеПлатежа",
		СтрокаСекции.НазначениеПлатежа,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	УстановитьСвойство(
		ОбъектДляЗаписи,
		"Автор",
		Пользователи.ТекущийПользователь(),
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				// Очистим дополнительные свойства самого документа и всех наборов записей.
				ОбъектДляЗаписи.ДополнительныеСвойства.Очистить();
				Для Каждого НаборЗаписей Из ОбъектДляЗаписи.Движения Цикл
					НаборЗаписей.ДополнительныеСвойства.Очистить();
				КонецЦикла;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Если ЭтоНовыйДокумент Тогда
				СтрокаСекции.Документ = ОбъектДляЗаписи.Ссылка;
			КонецЕсли;
			
			ТекстСообщения = НСтр("ru = '%Статус%%НазваниеОбъекта%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%" , ?(ЭтоНовыйДокумент, НСтр("ru = 'Создан '"), НСтр("ru = 'Перезаписан '")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Комментарий'"), ЭтоНовыйДокумент, Истина, 
				?(ЭтоНовыйДокумент, НСтр("ru = '• Создан новый документ'"), НСтр("ru = '• Перезаписан документ'")), "",,, 
				?(ЭтоНовыйДокумент, "", СтрокаИзмененныхРеквизитов));
			
			// Запись истории выбранных значений для последующей автоматической подстановки.
			// Сохраняем информацию о выборе пользователя, если его выбор отличается от значения по умолчанию.
			Если ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Контрагенты") И
				(
				СтрокаСекции.Договор <> СтрокаСекции.ДоговорИсходноеЗначение ИЛИ
				СтрокаСекции.Корреспонденция <> СтрокаСекции.КорреспонденцияИсходноеЗначение ИЛИ
				СтрокаСекции.ВидОперации <> СтрокаСекции.ВидОперацииИсходноеЗначение ИЛИ
				СтрокаСекции.СтатьяДДС <> СтрокаСекции.СтатьяДДСИсходноеЗначение) Тогда
				
				НаборЗаписейИстории = РегистрыСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СоздатьНаборЗаписей();
				
				НаборЗаписейИстории.Отбор.Контрагент.Установить(СтрокаСекции.Контрагент);
				НаборЗаписейИстории.Отбор.БанковскийСчетКонтрагента.Установить(СтрокаСекции.СчетКонтрагента);
				НаборЗаписейИстории.Отбор.БанковскийСчетОрганизации.Установить(СтрокаСекции.БанковскийСчет);
				НаборЗаписейИстории.Отбор.Документ.Установить(ОбъектДляЗаписи.Ссылка);
				НаборЗаписейИстории.Отбор.Исходящий.Установить(СтрокаСекции.Исходящий);
				
				ЗаписьИстории = НаборЗаписейИстории.Добавить();
				// Измерения.
				ЗаписьИстории.Контрагент = СтрокаСекции.Контрагент;
				ЗаписьИстории.БанковскийСчетКонтрагента = СтрокаСекции.СчетКонтрагента;
				ЗаписьИстории.БанковскийСчетОрганизации = СтрокаСекции.БанковскийСчет;
				ЗаписьИстории.Документ = ОбъектДляЗаписи.Ссылка;
				ЗаписьИстории.Исходящий = СтрокаСекции.Исходящий;
				// Ресурсы.
				ЗаписьИстории.Договор = СтрокаСекции.Договор;
				ЗаписьИстории.ВидОперации = СтрокаСекции.ВидОперации;
				ЗаписьИстории.СтатьяДДС = СтрокаСекции.СтатьяДДС;
				ЗаписьИстории.Корреспонденция = СтрокаСекции.Корреспонденция;
				ЗаписьИстории.ДатаЗагрузкиЧислом = Год(ТекущаяДатаСеанса())*10000 + Месяц(ТекущаяДатаСеанса())*100 + День(ТекущаяДатаСеанса());
				
				НаборЗаписейИстории.Записать(Истина);
				
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% %Статус%! Произошли ошибки при записи!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектДляЗаписи.ЭтоНовый(), НСтр("ru = ' не создан'"), НСтр("ru = ' не записан'")));
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Ошибка при загрузке'"), ЭтоНовыйДокумент, Ложь, ТекстСообщения, ОписаниеОшибки());
			ЕстьПредупреждения = Истина;
			Возврат;
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% не перезаписан, т.к. данные в нем не менялись. Возможно загрузка производилась ранее.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
		Если ВыдаватьСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Комментарий'"), ЭтоНовыйДокумент, Ложь, "• Не перезаписан", ТекстСообщения);
		ЕстьПредупреждения = Истина;
	КонецЕсли;
	
	Проводить = ЗначениеНастройкиСозданияДокументов(Настройки, "ПроводитьДокумент", ТипЗнч(ОбъектДляЗаписи.Ссылка));
	Если Проводить И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда 
		
		Попытка
			ОшибкиНеОбнаружены = ОбъектДляЗаписи.ПроверитьЗаполнение();
			Если ОшибкиНеОбнаружены Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
				ТекстСообщения = НСтр("ru = '%Статус%%НазваниеОбъекта%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", ?(ОбъектПроведен, НСтр("ru = 'Перепроведен '"), НСтр("ru = 'Проведен '"))); // АПК:1036
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Комментарий'"), ЭтоНовыйДокумент, Истина, 
					?(ОбъектПроведен, НСтр("ru = '• Перепроведен '"), НСтр("ru = '• Проведен '")), ТекстСообщения); // АПК:1036
			Иначе
				ТекстСообщения = НСтр("ru = '%Статус% %НазваниеОбъекта% %Статус%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", НСтр("ru = 'Не проведен '"));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъекта%", НазваниеОбъекта);
				ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Заполнены не все реквизиты'");
				Если ВыдаватьСообщения Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Комментарий'"),
					ЭтоНовыйДокумент, Истина, НСтр(
					"ru = '• Произошли ошибки при проведении (заполнены не все реквизиты).'"), ТекстСообщения, , 1);
				ЕстьПредупреждения = Истина;
			КонецЕсли;
		Исключение
			// Поищем сообщения об ошибках.
			ТекстСообщения = НСтр("ru = '%НазваниеОбъектаЛев%%НазваниеОбъектаСред% не проведен. Произошли ошибки при проведении.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаЛев%", ВРег(Лев(НазваниеОбъекта, 1)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеОбъектаСред%", Сред(НазваниеОбъекта, 2));
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			ДобавитьСтрокуВТаблицуРезультат(ТаблицаРезультата, СтрокаСекции, НСтр("ru='Ошибка при загрузке'"), ЭтоНовыйДокумент, Ложь, 
				НСтр("ru = '• Произошли ошибки при проведении!'"), ТекстСообщения,, 1);
			ЕстьПредупреждения = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьОбъект()

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов)
	
	Если ЗначениеСвойства <> Неопределено
		И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		
		Если ЭтоНовыйДокумент
		 ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства])
		 ИЛИ ОбязательнаяЗаменаСтарогоЗначения)
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
		 ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") 
		Тогда
		
			ПредЗнач = "" + Объект[ИмяСвойства];
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
			Если Не ЭтоНовыйДокумент Тогда
				ИмяСвойстваДляПротокола = ПолучитьИмяСвойстваДляПротокола(ИмяСвойства, Объект);
				
				СтрокаИзмененныхРеквизитов = СтрокаИзмененныхРеквизитов + ?(СтрокаИзмененныхРеквизитов = "", "", Символы.ПС) + 
					ИмяСвойстваДляПротокола + ?(ЗначениеЗаполнено(ПредЗнач), НСтр("ru = ' (с '") + ПредЗнач + НСтр("ru = ' на '"), НСтр("ru = ' ('")) + ЗначениеСвойства + ")";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойство()

// Функция возвращает имя свойства (синоним реквизита), который был изменен в документе.
//
Функция ПолучитьИмяСвойстваДляПротокола(ИмяСвойства, Объект)
	
	// Реквизиты документа.
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет") Тогда
		РеквизитМетаданных = Метаданные.Документы.ПоступлениеНаСчет.Реквизиты.Найти(ИмяСвойства);
		Если РеквизитМетаданных = Неопределено Тогда
			Возврат Метаданные.Документы.ПоступлениеНаСчет.СтандартныеРеквизиты[ИмяСвойства].Синоним;
		Иначе
			Возврат Метаданные.Документы.ПоступлениеНаСчет.Реквизиты[ИмяСвойства].Синоним;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходСоСчета") Тогда
		РеквизитМетаданных = Метаданные.Документы.РасходСоСчета.Реквизиты.Найти(ИмяСвойства);
		Если РеквизитМетаданных = Неопределено Тогда
			Возврат Метаданные.Документы.РасходСоСчета.СтандартныеРеквизиты[ИмяСвойства].Синоним;
		Иначе
			Возврат Метаданные.Документы.РасходСоСчета.Реквизиты[ИмяСвойства].Синоним;
		КонецЕсли;
	// Реквизиты табличной части.
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументТабличнаяЧастьСтрока.ПоступлениеНаСчет.РасшифровкаПлатежа") Тогда
		Возврат Метаданные.Документы.ПоступлениеНаСчет.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты[ИмяСвойства].Синоним;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументТабличнаяЧастьСтрока.РасходСоСчета.РасшифровкаПлатежа") Тогда
		Возврат Метаданные.Документы.РасходСоСчета.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты[ИмяСвойства].Синоним;
	// Имя свойства как оно есть.
	Иначе
		Возврат ИмяСвойства;
	КонецЕсли;
	
КонецФункции // ПолучитьИмяСвойстваДляПротокола()

Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)
	
	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	
	Возврат Структура;
	
КонецФункции

Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0
	 ИЛИ КурсКон = 0
	 ИЛИ КратностьНач = 0
	 ИЛИ КратностьКон = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции

#КонецОбласти


// Процедура рассчитывает курс и сумму документа.
//
Процедура РассчитатьКурсИСуммуРасчетов(СтрокаПлатеж, ВалютаРасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент, СтрокаИзмененныхРеквизитов)
	
	СтруктураКурсаРасчетов = ПолучитьКурсВалюты(ВалютаРасчетов, ДатаКурса);
	СтруктураКурсаРасчетов.Курс = ?(СтруктураКурсаРасчетов.Курс = 0, 1, СтруктураКурсаРасчетов.Курс);
	СтруктураКурсаРасчетов.Кратность = ?(СтруктураКурсаРасчетов.Кратность = 0, 1, СтруктураКурсаРасчетов.Кратность);
	
	УстановитьСвойство(
		СтрокаПлатеж,
		"Курс",
		СтруктураКурсаРасчетов.Курс,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	УстановитьСвойство(
		СтрокаПлатеж,
		"Кратность",
		СтруктураКурсаРасчетов.Кратность,
		,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ОбъектДокумента.ВалютаДенежныхСредств, ДатаКурса);
	
	СуммаРасчетов = ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		СтруктураКурсаДокумента.Курс,
		СтруктураКурсаРасчетов.Курс,
		СтруктураКурсаДокумента.Кратность,
		СтруктураКурсаРасчетов.Кратность);
	
	УстановитьСвойство(
		СтрокаПлатеж,
		"СуммаРасчетов",
		СуммаРасчетов,
		Истина,
		ЭтоНовыйДокумент,
		СтрокаИзмененныхРеквизитов);
	
КонецПроцедуры // РассчитатьКурсИСуммуРасчетов()

Процедура ОпределитьСтавкуНДСПоНазначениюПлатежа(ИсходныеДанные, СтавкаНДСВНазначенииПлатежа, ЗначениеСтавкиНДС)
	
	Если СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 18%") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(18%)") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (18%)") > 0 Тогда
		СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(18);
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС 10%") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС(10%)") > 0 ИЛИ
		СтрНайти(ИсходныеДанные.НазначениеПлатежа, "НДС (10%)") > 0 Тогда
		СтавкаНДСВНазначенииПлатежа = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДС(10);
		ЗначениеСтавкиНДС = 10;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОЗаказеСчетеДокументеРасчетов(ЭтоНовыйДокумент, ОбъектДокумента, ИсходныеДанные, СтрокаРасшифровки, Исходящий, СтрокаИзмененныхРеквизитов)
	
	// Заполним заказ.
	Если ОбъектДокумента.Контрагент.ВестиРасчетыПоЗаказам И ЗначениеЗаполнено(ИсходныеДанные.Заказ) Тогда
		УстановитьСвойство(
				СтрокаРасшифровки,
				"Заказ",
				ИсходныеДанные.Заказ,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
	КонецЕсли;
	
	// Заполним счет на оплату.
	Если ОбъектДокумента.Контрагент.ВестиУчетОплатыПоСчетам И ЗначениеЗаполнено(ИсходныеДанные.СчетНаОплату) Тогда
		УстановитьСвойство(
				СтрокаРасшифровки,
				"СчетНаОплату",
				ИсходныеДанные.СчетНаОплату,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
	КонецЕсли;
	
	// Заполним документ расчетов.
	Если Не ИсходныеДанные.ПризнакАванса И ОбъектДокумента.Контрагент.ВестиРасчетыПоДокументам И ЗначениеЗаполнено(ИсходныеДанные.ДокументРасчетов) Тогда
		УстановитьСвойство(
				СтрокаРасшифровки,
				"Документ",
				ИсходныеДанные.ДокументРасчетов,
				,
				ЭтоНовыйДокумент,
				СтрокаИзмененныхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПредупреждениеОПроблемах

Функция БанковскийСчетВыпискиОпределен(РаспознаннаяВыписка, УчастникиОпераций)
	
	Протокол = Неопределено;
	Если Не ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.Организация) Тогда
		Протокол = РаспознаннаяВыписка.ВладелецСчета.ПротоколыВыбораСсылок.Организация;
	ИначеЕсли Не ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет) Тогда
		Протокол = РаспознаннаяВыписка.ВладелецСчета.ПротоколыВыбораСсылок.БанковскийСчет;
	КонецЕсли;
	
	Если Протокол = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Предупреждение = УстановитьПредупреждениеПриРаспознавании(РаспознаннаяВыписка, "БанковскийСчетНеНайден");
	Предупреждение.Текст = НСтр("ru = 'Не найден банковский счет.'");
	
	Для Каждого ЗаписьПротокола Из Протокол Цикл
		Если ЗаписьПротокола.ПричинаОтказа = "НетИдентификаторов" Тогда
			Предупреждение.Текст = НСтр("ru = 'Не указаны реквизиты банковского счета.'");
			Прервать;
		ИначеЕсли ЗначениеЗаполнено(ЗаписьПротокола.Идентификатор) Тогда
			ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				ЗаписьПротокола.Идентификатор,
				УчастникиОпераций);
			Если ОписаниеИдентификатора <> Неопределено И ОписаниеИдентификатора.Схема = "BBAN" Тогда
					
				Предупреждение.ДетальныеДанные = ЗаписьПротокола.Идентификатор;
				
				ПредставлениеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ПредставлениеИдентификатора(
					ЗаписьПротокола.Идентификатор,
					УчастникиОпераций);
					
				Если Не ПустаяСтрока(ПредставлениеИдентификатора) Тогда
					Предупреждение.Текст = СтрШаблон(НСтр("ru = 'В выписке указан расчетный счет, не принадлежащий организации: %1.'"), ПредставлениеИдентификатора);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПредупрежденияПриВыбореСсылок(ХозяйственнаяОперация, Параметры)
	
	Если ХозяйственнаяОперация = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ПротоколыВыбораСсылок) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Контрагент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "Контрагент");
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не КонтрагентДолженБытьОпределенТочно(Параметры.Операция.ПоступилоСписано, ХозяйственнаяОперация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПротоколВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры.ПротоколыВыбораСсылок, "Контрагент");
	
	Если ПротоколВыбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОПроблеме = ПротоколВыбора.НайтиСтроки(Новый Структура("ПричинаОтказа", "СлучайныйВыбор"));
	
	Если Не ЗначениеЗаполнено(ДанныеОПроблеме) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылки = Новый Массив;
	Ссылки.Добавить(Контрагент);
	
	ЕстьСсылкиНовыхОбъектов = Ложь;
	Для Каждого Проблема Из ДанныеОПроблеме Цикл
		
		Ссылка = Проблема.Ссылка;
		
		// Контрагенты могли быть определены поиском среди договоров.
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(Ссылка, Параметры.УчастникиОпераций);
			Если ОписаниеСсылки <> Неопределено Тогда
				Ссылка = ОписаниеСсылки.Владелец;
			КонецЕсли;
		КонецЕсли;
		
		Ссылки.Добавить(Ссылка);
		
		Если ЕстьСсылкиНовыхОбъектов Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНовогоОбъекта = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
			Ссылка,
			Параметры.УчастникиОпераций);
		
		ЕстьСсылкиНовыхОбъектов = ОписаниеНовогоОбъекта <> Неопределено;
		
	КонецЦикла;
	
	Ссылки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Ссылки);
	Если Ссылки.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЕстьСсылкиНовыхОбъектов Тогда
		Текст = НСтр("ru = 'Проверьте, верно ли указан контрагент: указанные реквизиты не позволяют достоверно его определить.'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Проверьте, верно ли указан контрагент: указанным реквизитам соответствуют %1.'");
		КоличествоСсылок = ЧислоПрописью(
			Ссылки.Количество(),
			"",
			НСтр("ru = 'контрагент, контрагента, контрагентов, м,,,,,0'"));
		Текст = СтрШаблон(ШаблонТекста, НРег(КоличествоСсылок));
	КонецЕсли;
	
	Предупреждения = НовыйПредупрежденияПриРаспознавании();
	Предупрежедение = Предупреждения.Добавить();
	Предупрежедение.КодПроблемы     = "СлучайныйВыбор";
	Предупрежедение.Текст           = Текст;
	Предупрежедение.ДетальныеДанные = Ссылки;
	
	Возврат Предупреждения;
	
КонецФункции

Процедура ЗаписатьПредупреждения(Контекст, Предупреждения)
	
	Если НЕ ЗначениеЗаполнено(Предупреждения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Предупреждения = Неопределено Тогда
		Контекст.Предупреждения = НовыйПредупрежденияПриРаспознавании();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Предупреждения, Контекст.Предупреждения);
	
КонецПроцедуры

Функция КонтрагентДолженБытьОпределенТочно(ПоступилоСписано, ХозяйственнаяОперация)
	
	ВидОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "ВидОперацииДокумента");
	Если ВидОперации = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПоступилоСписано = "Поступило" Тогда
		Возврат Документы.ПоступлениеНаСчет.КонтрагентДолженБытьЗаполнен(ВидОперации);
	ИначеЕсли ПоступилоСписано = "Списано" Тогда
		Возврат Документы.РасходСоСчета.КонтрагентДолженБытьЗаполнен(ВидОперации);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НовыйПредупрежденияПриРаспознавании()
	
	Предупреждения = Новый ТаблицаЗначений;
	Предупреждения.Колонки.Добавить("КодПроблемы", Новый ОписаниеТипов("Строка"));
	Предупреждения.Колонки.Добавить("Текст",       Новый ОписаниеТипов("Строка"));
	Предупреждения.Колонки.Добавить("ДетальныеДанные");
	
	Возврат Предупреждения;
	
КонецФункции

Функция УстановитьПредупреждениеПриРаспознавании(Контекст, КодПроблемы)
	
	Если Контекст.Предупреждения = Неопределено Тогда
		Контекст.Предупреждения = НовыйПредупрежденияПриРаспознавании();
	КонецЕсли;
	
	НоваяЗапись = Контекст.Предупреждения.Добавить();
	НоваяЗапись.КодПроблемы = КодПроблемы;
	
	Возврат НоваяЗапись;
	
КонецФункции

#КонецОбласти

#Область АнализНазначенияПлатежа

// Назначение платежа может содержать структурированную информацию.
// Перенесем ее в предназначенные для этого поля.
//
Процедура РазобратьНазначениеПлатежа(ДанныеИзБанка)
	
	// При исполнении обязанности третьих лиц по уплате налогов действуют особые правила, установленные приложениями к Приказу 107н:
	// - в поле, которое обычно используется для идентификации плательщика указывается налоговый идентификатор (ИНН, КПП) третьего лица
	//   (прил. 1 п. 4)
	// - в назначении платежа указываются идентификаторы плательщика (лица, со счета которого списываются деньги) - ИНН, КПП, наименование
	//   (прил. 2 п. 13 пп. 5)
	//
	// Если идентифицируем документ, как содержащий информацию о применении этих особых правил,
	// то исправим его реквизиты в соответствии с этими правилами.
	
	ИННВладельцевСчетов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИННВладельцевСчетов.Вставить(СокрЛП(Выборка.ИНН), Истина);
	КонецЦикла;
	
	Для Каждого Документ Из ДанныеИзБанка.Документы Цикл
		
		КБК = КБКНалога(Документ.РеквизитыПлатежаВБюджет);
		Если Не ПустаяСтрока(КБК) Тогда
			// Это точно уплата налога
			ДанныеПлатежаТретьихЛиц = ПлатежиВБюджетКлиентСервер.РазобратьНазначениеПлатежаУплатыНалоговТретьихЛиц(Документ.НазначениеПлатежа);
			Если ДанныеПлатежаТретьихЛиц <> Неопределено Тогда
				// Это уплата налога за третьих лиц
				Если ИННВладельцевСчетов[ДанныеПлатежаТретьихЛиц.ИНН] = Неопределено Тогда
					// Нет уверенности, что это валидные данные
					Продолжить;
				КонецЕсли;
				
				Налогоплательщик = Новый Структура;
				Налогоплательщик.Вставить("Наименование", ДанныеПлатежаТретьихЛиц.НаименованиеТретьегоЛица);
				Налогоплательщик.Вставить("ИНН",          Документ.ПлательщикИНН);
				Если Документ.РеквизитыПлатежаВБюджет.Свойство("ПлательщикКПП") Тогда
					Налогоплательщик.Вставить("КПП", Документ.РеквизитыПлатежаВБюджет.ПлательщикКПП);
				КонецЕсли;
				
				Документ.РеквизитыПлатежаВБюджет.Вставить("Налогоплательщик", Налогоплательщик);
				
				Документ.ПлательщикИНН = ДанныеПлатежаТретьихЛиц.ИНН;
				Если ДанныеПлатежаТретьихЛиц.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
					И Не ПустаяСтрока(ДанныеПлатежаТретьихЛиц.КПП) Тогда
					Документ.ПлательщикРеквизиты.Вставить("КПП", ДанныеПлатежаТретьихЛиц.КПП);
				Иначе
					Документ.ПлательщикРеквизиты.Удалить("КПП");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИННВладельцевСчетов[Документ.ПлательщикИНН] = Неопределено
				И ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(Документ.ПлательщикИНН) Тогда
				// Перечисление по исполнительному листу
				Должник = Новый Структура;
				Должник.Вставить("ИНН", Документ.ПлательщикИНН);
				Документ.РеквизитыПлатежаВБюджет.Вставить("Должник", Должник);
				Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазделителиИзТекста(Знач НазначениеПлатежа)
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, " ", ""); // Будем искать разделители только в "значащих" символах.
	Разделители = "";
	Для сч = 1 По СтрДлина(НазначениеПлатежа) Цикл
		Символ = Сред(НазначениеПлатежа, сч, 1);
		Если Символ = СимволНомера() // Символ номера "№" необходимо сохранить в тексте.
			ИЛИ СтрНайти(Разделители, Символ) > 0 // Этот символ уже включен в разделители.
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ)
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Символ)
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Символ) Тогда
			Продолжить;
		КонецЕсли;
		Разделители = Разделители + Символ;
	КонецЦикла;
	
	Возврат " " + Разделители; // Добавим пробел к остальным разделителям
	
КонецФункции

Функция СимволПроцента()
	
	Возврат "%";
	
КонецФункции

Функция СимволНомера()
	
	Возврат "№";
	
КонецФункции

Функция НазначениеПлатежаУказываетНаКомиссиюБанка(Операция)
	
	// Достаточно найти любое слово
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'комис'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'банк'"));
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаИнкассацию(Операция)
	
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'инкассир'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'налич'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'выручк'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'вносител'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'пополнен'"));
	
	// Нужно найти все слова в тексте. Слова должны идти подряд, друг за другом.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'ден'"));
	Фраза.Добавить(НСтр("ru = 'нал'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'внес'"));
	Фраза.Добавить(НСтр("ru = 'нал'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'внес'"));
	Фраза.Добавить(НСтр("ru = 'ср'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'зачисл'"));
	Фраза.Добавить(НСтр("ru = 'нал'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'прием'"));
	Фраза.Добавить(НСтр("ru = 'нал'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'торг'"));
	Фраза.Добавить(НСтр("ru = 'выруч'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'ден'"));
	Фраза.Добавить(НСтр("ru = 'выруч'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'зачисл'"));
	Фраза.Добавить(НСтр("ru = 'выруч'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'уст'"));
	Фраза.Добавить(НСтр("ru = 'cash'")); // устройство Cash-in
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСловаНазначенияСБП(КлючевыеФразы)
	
	КлючевыеФразы.Добавить(НСтр("ru = 'СБП'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	
	// Нужно найти все слова в тексте. Слова должны идти подряд, друг за другом.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'систем'"));
	Фраза.Добавить(НСтр("ru = 'быстр'"));
	Фраза.Добавить(НСтр("ru = 'платеж'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
КонецПроцедуры

Функция НазначениеПлатежаУказываетНаСБП(Операция)
	
	КлючевыеФразы = Новый Массив;
	
	ДобавитьСловаНазначенияСБП(КлючевыеФразы);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаЭквайринг(Операция)
	
	КлючевыеФразы = Новый Массив;
	
	// Данных слов не должно быть найдено в тексте.
	// Такие правила должны располагаться первыми
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'займ'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "КромеСловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'взнос'"));
	Фраза.Добавить(НСтр("ru = 'собствен'"));
	Фраза.Добавить(НСтр("ru = 'средств'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "КромеСловаПодряд");
	
	КлючевыеФразы.Добавить(НСтр("ru = 'эквай'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'мерчант'"));
	
	ДобавитьСловаНазначенияСБП(КлючевыеФразы);
	
	// Нужно найти все слова в тексте. Слова должны быть расположены последовательно, но могут быть не подряд.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'комис'"));
	Фраза.Добавить(НСтр("ru = 'возвр'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	// Нужно найти все слова в тексте. Слова должны быть расположены последовательно, но могут быть не подряд.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'ком'"));
	Фраза.Добавить(НСтр("ru = 'банк'"));
	Фраза.Добавить(НСтр("ru = 'возвр'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'догов'"));
	Фраза.Добавить(НСтр("ru = 'ТСП'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'операц'"));
	Фраза.Добавить(НСтр("ru = 'МБК'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'реестр'"));
	Фраза.Добавить(НСтр("ru = 'договор'"));
	Фраза.Добавить(НСтр("ru = 'НЭК'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'MISC'"));
	Фраза.Добавить(НСтр("ru = 'комис'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'расчет'"));
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	Фраза.Добавить(НСтр("ru = 'Э'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	Фраза.Добавить(НСтр("ru = 'экв'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'усл'"));
	Фраза.Добавить(НСтр("ru = 'банк'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возмещ'"));
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'терм'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'оплат'"));
	Фраза.Добавить(НСтр("ru = 'товар'"));
	Фраза.Добавить(НСтр("ru = 'услуг'"));
	Фраза.Добавить(НСтр("ru = 'ТСТ'")); // аббревиатуру указываем заглавными, чтобы проверять на точное соответствие
	Фраза.Добавить(НСтр("ru = 'возврат'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаВЛюбомПорядке");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'реестр'"));
	Фраза.Добавить(НСтр("ru = 'платеж'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаВЛюбомПорядке");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаВзносВУставныйКапитал(Операция)
	
	// Ищем фразу "уставный капитал" в произвольном падеже, например, "уставном капитале".
	
	КлючевыеФразы = Новый Массив;
	
	// Нужно найти оба слова в тексте. Слова должны идти подряд, друг за другом.
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'устав'"));
	Фраза.Добавить(НСтр("ru = 'капитал'"));
	
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Операция)
	
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'зарплат'"));
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'зар'"));
	Фраза.Добавить(НСтр("ru = 'плат'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаРеестрСамозанятых(Операция)
	
	// По договоренности с банками эта фраза встречается при выплате самозанятым
	// используется ключевая фраза "согласно реестру'"
	
	Если НазначениеПлатежаУказываетПеречислениеПоГПХ(Операция)
		Или НазначениеПлатежаУказываетНаПеречислениеЗарплаты(Операция) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'согласно'"));
	Фраза.Добавить(НСтр("ru = 'реестру'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаВозврат(Операция)
	
	КлючеваяФразаСПробелом = НСтр("ru = 'возврат'") + " ";
	
	НазначениеПлатежа = НРег(СокрЛ(Операция.НазначениеПлатежа));
	Результат = СтрНачинаетсяС(НазначениеПлатежа, КлючеваяФразаСПробелом);
	Если Результат Тогда
		// С очень большой вероятностью наличие слова "возврат" в начале фразы означет Возврат покупателю/поставщику,
		// т.к. другие возвраты (кредиты, займы, подотчетные средства) проверены ранее.
		Возврат Истина;
	КонецЕсли;
	
	// Не всегда в операциях по возврату, слово "возврат" идет в начале текста Назначения,
	// к тому же словом может быть сокращено как "возвр" или "воз-т".
	// Но если искать такие "возвраты" по всему тексту Назначения, то они во многих случаях
	// могут характеризовать не операцию возврата, а, например, в эквайринге обозначать сумму возвратов.
	
	КлючевыеФразыКроме = Новый Массив;
	КлючевыеФразыКроме.Добавить(НСтр("ru = 'возвратов'")); // "сумма возвратов"
	КлючевыеФразыКроме.Добавить(НСтр("ru = 'возврата'"));  // "удержали по актам возврата"
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возврат'"));
	Фраза.Добавить(НСтр("ru = 'комис'")); // при эквайринге в тексте выделяют не только возвраты, но и комиссию банка
	ДобавитьПравилоПроверкиФразы(КлючевыеФразыКроме, Фраза, "СловаВЛюбомПорядке");
	
	РезультатКроме = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразыКроме, Операция);
	Если РезультатКроме Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возвр'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд", 2);
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'воз-т'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд", 2);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, "-");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСловаНазначенияУплатаПроцентов(КлючевыеФразы)
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возврат'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'процент'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПоследовательно");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перечислен'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'выплат'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'оплат'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'уплат'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'возврат'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'перечислен'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'выплат'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'оплат'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'уплат'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
КонецПроцедуры

Процедура ДобавитьСловаНазначенияЗаймыСсуды(КлючевыеФразы)
	
	КлючевыеФразы.Добавить(НСтр("ru = 'займ'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'заем'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'заём'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'ссуд'"));
	
КонецПроцедуры

Процедура ДобавитьСловаНазначенияВозвратПогашение(КлючевыеФразы)
	
	КлючевыеФразы.Добавить(НСтр("ru = 'возвр'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'расчет'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'погашени'"));
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'платеж'"));
	Фраза.Добавить(НСтр("ru = 'по'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
КонецПроцедуры

Функция НазначениеПлатежаУказываетНаПолучениеВыдачаЗайма(Операция)
	
	// Данных слов не должно быть найдено в тексте.
	// Такие правила должны располагаться первыми
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияУплатаПроцентов(КлючевыеФразы);
	ДобавитьСловаНазначенияВозвратПогашение(КлючевыеФразы);
	
	РезультатКроме = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, СимволПроцента());
	
	Если РезультатКроме Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияЗаймыСсуды(КлючевыеФразы);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаВозвратЗайма(Операция)
	
	// Данных слов не должно быть найдено в тексте.
	// Такие правила должны располагаться первыми
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'предоставлен'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'взнос'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'выдач'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'переплат'"));
	
	ДобавитьСловаНазначенияУплатаПроцентов(КлючевыеФразы);
	
	РезультатКроме = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, СимволПроцента());
	
	Если РезультатКроме Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияЗаймыСсуды(КлючевыеФразы);
	
	РезультатЗайм = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	Если Не РезультатЗайм Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияВозвратПогашение(КлючевыеФразы);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаУплатаПроцентовПоЗайму(Операция)
	
	// Данных слов не должно быть найдено в тексте.
	// Такие правила должны располагаться первыми
	КлючевыеФразы = Новый Массив;
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'включ'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'включ'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'том'"));
	Фраза.Добавить(НСтр("ru = 'числ'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'том'"));
	Фраза.Добавить(НСтр("ru = 'числ'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'т'"));
	Фраза.Добавить(НСтр("ru = 'ч'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'т'"));
	Фраза.Добавить(НСтр("ru = 'ч'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тч'"));
	Фраза.Добавить(НСтр("ru = 'процент'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тч'"));
	Фраза.Добавить(НСтр("ru = '%'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'основн'"));
	Фраза.Добавить(НСтр("ru = 'долг'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'сумм'"));
	Фраза.Добавить(НСтр("ru = 'долг'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тел'"));
	Фраза.Добавить(НСтр("ru = 'займ'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тел'"));
	Фраза.Добавить(НСтр("ru = 'долг'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'тел'"));
	Фраза.Добавить(НСтр("ru = 'ссуд'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	РезультатКроме = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, СимволПроцента());
	
	Если РезультатКроме Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияЗаймыСсуды(КлючевыеФразы);
	
	РезультатЗайм = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	Если Не РезультатЗайм Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючевыеФразы = Новый Массив;
	ДобавитьСловаНазначенияУплатаПроцентов(КлючевыеФразы);
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, СимволПроцента());
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаПеречислениеПодотчет(Операция)
	
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'подотчет'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'подотчёт'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'командиров'"));
	КлючевыеФразы.Добавить(НСтр("ru = 'суточн'"));
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'под'"));
	Фраза.Добавить(НСтр("ru = 'очет'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'под'"));
	Фраза.Добавить(НСтр("ru = 'отчёт'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза.Добавить(НСтр("ru = 'аванс'"));
	Фраза.Добавить(НСтр("ru = 'отч'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'хоз'"));
	Фраза.Добавить(НСтр("ru = 'нужд'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'хоз'"));
	Фраза.Добавить(НСтр("ru = 'расход'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетПеречислениеПоГПХ(Операция)
	
	КлючевыеФразы = Новый Массив;
	КлючевыеФразы.Добавить(НСтр("ru = 'ГПХ'"));
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'гражданск'"));
	Фраза.Добавить(НСтр("ru = 'правов'"));
	Фраза.Добавить(НСтр("ru = 'характер'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'гражданск'"));
	Фраза.Добавить(НСтр("ru = 'правов'"));
	Фраза.Добавить(НСтр("ru = 'дог'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'дог'"));
	Фраза.Добавить(НСтр("ru = 'подряд'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Фраза = Новый Массив;
	Фраза.Добавить(НСтр("ru = 'за'"));
	Фраза.Добавить(НСтр("ru = 'услуг'"));
	ДобавитьПравилоПроверкиФразы(КлючевыеФразы, Фраза, "СловаПодряд");
	
	Результат = НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция);
	
	Возврат Результат;
	
КонецФункции

Функция НазначениеПлатежаУказываетНаСтраховыеВзносыСДоходов(Операция)
	
	КлючеваяФраза = " " + НСтр("ru = 'доход'");
	
	НазначениеПлатежа = НРег(Операция.НазначениеПлатежа);
	
	Возврат СтрНайти(НазначениеПлатежа, КлючеваяФраза) > 0;
	
КонецФункции

Процедура ДобавитьПравилоПроверкиФразы(КлючевыеФразы, СловаФразы, Правило, ПроверитьСловВНачале = Неопределено)
	
	// Скопируем источник, чтобы не перезатереть значение других правил
	КопияСловаФразы = ОбщегоНазначения.СкопироватьРекурсивно(СловаФразы);
	ПравилоОбработки = Новый Структура(Правило, КопияСловаФразы);
	Если ЗначениеЗаполнено(ПроверитьСловВНачале) Тогда
		ПравилоОбработки.Вставить("ПроверитьСловВНачалеКоличество", ПроверитьСловВНачале);
	КонецЕсли;
	
	КлючевыеФразы.Добавить(ПравилоОбработки);
	
КонецПроцедуры

Функция НайтиКлючевыеФразыВТекстеНазначения(КлючевыеФразы, Операция, КромеРазделителей = "")
	
	Результат = Ложь;
	
	НазначениеПлатежа = НРег(СокрЛП(СтрЗаменить(Операция.НазначениеПлатежа, Символы.ПС, " ")));
	
	Если ПустаяСтрока(НазначениеПлатежа) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КромеРазделителей) Тогда // требуется нетиповое сочетание разделителей
		Если ЗначениеЗаполнено(Операция.РазделителиИзНазначения) Тогда
			РазделителиИзНазначения = Операция.РазделителиИзНазначения;
		Иначе
			РазделителиИзНазначения = РазделителиИзТекста(НазначениеПлатежа);
		КонецЕсли;
		
		Для НомерСимвола = 1 По СтрДлина(КромеРазделителей) Цикл
			РазделителиИзНазначения = СтрЗаменить(РазделителиИзНазначения, Сред(КромеРазделителей, НомерСимвола, 1), "");
		КонецЦикла;
		
		СловаНазначениеПлатежа = СтрРазделить(НазначениеПлатежа, РазделителиИзНазначения, Ложь);
	Иначе
		Если Не ЗначениеЗаполнено(Операция.СловаНазначениеПлатежа) Тогда
			Операция.РазделителиИзНазначения = РазделителиИзТекста(НазначениеПлатежа);
			Операция.СловаНазначениеПлатежа = СтрРазделить(НазначениеПлатежа, Операция.РазделителиИзНазначения, Ложь);
		КонецЕсли;
		
		РазделителиИзНазначения = Операция.РазделителиИзНазначения;
		СловаНазначениеПлатежа  = Операция.СловаНазначениеПлатежа;
	КонецЕсли;
	
	ПроверитьСловВНачалеКоличество = 0;
	Для Каждого КлючеваяФраза Из КлючевыеФразы Цикл
		ПозитивныйПоиск = Истина;
		Если ТипЗнч(КлючеваяФраза) = Тип("Строка") Тогда
			Правило = "СловаПодряд";
			СловаФразы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючеваяФраза);
		ИначеЕсли ТипЗнч(КлючеваяФраза) = Тип("Структура") Тогда
			Для Каждого КлючИЗначение Из КлючеваяФраза Цикл
				Если КлючИЗначение.Ключ = "ПроверитьСловВНачалеКоличество" Тогда
					ПроверитьСловВНачалеКоличество = КлючИЗначение.Значение;
					Продолжить;
				КонецЕсли;
				
				Ключ = КлючИЗначение.Ключ;
			КонецЦикла;
			
			Префикс = "Кроме";
			ПозитивныйПоиск = Не СтрНачинаетсяС(Ключ, Префикс);
			Если ПозитивныйПоиск Тогда
				Префикс = "";
			КонецЕсли;
			
			Правила = ВариантыПравил();
			Правило = Сред(Ключ, СтрДлина(Префикс) + 1);
			Если Правила.Найти(Правило) = Неопределено Тогда
				// Неиизвестный тип обработки слов.
				Продолжить;
			КонецЕсли;
			
			СловаФразы = КлючеваяФраза[Префикс + Правило];
		Иначе
			// Неизвестный тип - не обслуживаем.
			Продолжить;
		КонецЕсли;
		
		ВсегоСловФразы = СловаФразы.Количество();
		Найдено = 0;
		КэшНайденных = Новый Соответствие;
		
		КоличествоПроверенных = 0;
		
		// Каждое слово в назначении платежа сравниваем со словами фразы по порядку.
		Для Каждого ТекущееСлово Из СловаНазначениеПлатежа Цикл
			КоличествоПроверенных = КоличествоПроверенных + 1;
			Если ЗначениеЗаполнено(ПроверитьСловВНачалеКоличество)
				И КоличествоПроверенных > ПроверитьСловВНачалеКоличество Тогда
				Прервать;
			КонецЕсли;
			
			Если Правило = "СловаПодряд" Или Правило = "СловаПоследовательно" Тогда
				СловоФразы = СловаФразы[Найдено];
				Если ПроверитьВхождениеСлова(ТекущееСлово, СловоФразы) Тогда
					Найдено = Найдено + 1; // ищем следующее слово фразы
					Если Найдено = ВсегоСловФразы Тогда // найдены все слова
						Результат = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли Правило = "СловаПодряд" Тогда
					Найдено = 0; // начинаем поиск фразы сначала
				КонецЕсли;
			ИначеЕсли Правило = "СловаВЛюбомПорядке" Тогда
				Для Каждого СловоФразы Из СловаФразы Цикл
					Если ПроверитьВхождениеСлова(ТекущееСлово, СловоФразы) И КэшНайденных[ТекущееСлово] = Неопределено Тогда
						Найдено = Найдено + 1;
						КэшНайденных.Вставить(ТекущееСлово, Истина);
					КонецЕсли;
					
					Если Найдено = ВсегоСловФразы Тогда
						Результат = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат И ПозитивныйПоиск;
	
КонецФункции

Функция ВариантыПравил()
	
	Правила = Новый Массив;
	Правила.Добавить("СловаПодряд");
	Правила.Добавить("СловаПоследовательно");
	Правила.Добавить("СловаВЛюбомПорядке");
	
	Возврат Правила;
	
КонецФункции

Функция ПроверитьВхождениеСлова(ПроверяемоеСлово, Знач ПроверочноеСлово)
	
	Результат = Ложь;
	
	ЭтоАббревиатура = Ложь;
	Если ТолькоЗаглавныеВСтроке(ПроверочноеСлово) Тогда
		ПроверочноеСлово = НРег(ПроверочноеСлово);
		ЭтоАббревиатура = Истина;
	КонецЕсли;
	
	Если ЭтоАббревиатура Тогда
		// Для аббревиатур проверяем полное соответствие
		Результат = ПроверочноеСлово = ПроверяемоеСлово;
	Иначе
		Результат = СтрНачинаетсяС(ПроверяемоеСлово, ПроверочноеСлово);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТолькоЗаглавныеВСтроке(Значение)
	
	Для Позиция = 1 По СтрДлина(Значение) Цикл
		Символ = Сред(Значение, Позиция, 1);
		Если Символ <> ВРег(Символ) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция НовыйСловаНазначенияПлатежа()
	
	СловаНазначенияПлатежа = Новый ТаблицаЗначений;
	СловаНазначенияПлатежа.Колонки.Добавить("НомерСтроки",     ОбщегоНазначения.ОписаниеТипаЧисло(10));
	СловаНазначенияПлатежа.Колонки.Добавить("СловоНазначения", ОбщегоНазначения.ОписаниеТипаСтрока(210));
	СловаНазначенияПлатежа.Колонки.Добавить("Приоритет",       ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	Возврат СловаНазначенияПлатежа;
	
КонецФункции

Функция ПриоритетПоискаНомерКартыВНазначениеПлатежа(НомерКарты, НазначениеПлатежа)
	
	СловаНазначенияПлатежа = НовыйСловаНазначенияПлатежа();
	
	сч = 0;
	СловаНазначения = СтрРазделить(НазначениеПлатежа, " ,", Ложь);
	Для каждого СловоНазначения Из СловаНазначения Цикл
		НоваяСтрока = СловаНазначенияПлатежа.Добавить();
		НоваяСтрока.НомерСтроки = сч;
		НоваяСтрока.СловоНазначения = СловоНазначения;
		сч = сч + 1;
	КонецЦикла;
	
	ЧастиКарты = Новый Структура;
	ЧастиКарты.Вставить("НачКарты6", Лев(НомерКарты,  6));
	ЧастиКарты.Вставить("НачКарты4", Лев(НомерКарты,  4));
	ЧастиКарты.Вставить("НачКарты1", Лев(НомерКарты,  1));
	ЧастиКарты.Вставить("КонКарты4", Прав(НомерКарты, 4));
	
	Шаблон1_4  = ЧастиКарты.НачКарты1 + СимволПроцента() + ЧастиКарты.КонКарты4;
	Шаблон4    = ЧастиКарты.НачКарты4 + СимволПроцента() + ЧастиКарты.КонКарты4;
	Шаблон6    = ЧастиКарты.НачКарты6 + СимволПроцента() + ЧастиКарты.КонКарты4;
	ШаблонКон1 = "[*]" + ЧастиКарты.КонКарты4;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СловаНазначения", СловаНазначенияПлатежа);
	Запрос.УстановитьПараметр("Шаблон",          НомерКарты);
	Запрос.УстановитьПараметр("ШаблонРасш",      НомерКарты + "[.:)]%");
	Запрос.УстановитьПараметр("Шаблон1_4",       Шаблон1_4);
	Запрос.УстановитьПараметр("Шаблон1_4Расш",   Шаблон1_4  + "[.:)]%");
	Запрос.УстановитьПараметр("Шаблон4",         Шаблон4);
	Запрос.УстановитьПараметр("Шаблон4Расш",     Шаблон4    + "[.:)]%");
	Запрос.УстановитьПараметр("Шаблон6",         Шаблон6);
	Запрос.УстановитьПараметр("Шаблон6Расш",     Шаблон6    + "[.:)]%");
	Запрос.УстановитьПараметр("ШаблонКон1",      ШаблонКон1);
	Запрос.УстановитьПараметр("ШаблонКон1Расш",  ШаблонКон1 + "[.:)]%");
	Запрос.УстановитьПараметр("ШаблонКон2",      "[*]" + ШаблонКон1);
	Запрос.УстановитьПараметр("ШаблонКон2Расш",  "[*]" + ШаблонКон1 + "[.:)]%");
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СловаНазначения.НомерСтроки КАК НомерСтроки,
	|	СловаНазначения.СловоНазначения КАК СловоНазначения
	|ПОМЕСТИТЬ ВТ_СловаНазначения
	|ИЗ
	|	&СловаНазначения КАК СловаНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СловаНазначения.НомерСтроки КАК НомерСтроки,
	|	ВТ_СловаНазначения.СловоНазначения КАК СловоНазначения,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонРасш КАК НашлиВесьНомерКарты,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон1_4
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон1_4Расш КАК НашлиНомерКартыСерединаСкрыта1,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон4
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон4Расш КАК НашлиНомерКартыСерединаСкрыта4,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон6
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &Шаблон6Расш КАК НашлиНомерКартыСерединаСкрыта6,
	|	ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонКон1
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонКон1Расш
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонКон2
	|		ИЛИ ВТ_СловаНазначения.СловоНазначения ПОДОБНО &ШаблонКон2Расш КАК НашлиТолькоКонецКарты
	|ИЗ
	|	ВТ_СловаНазначения КАК ВТ_СловаНазначения";
	
	МаксПриоритет = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = СловаНазначенияПлатежа.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СловоНазначения = СокрЛП(Выборка.СловоНазначения);
		Если Выборка.НашлиВесьНомерКарты Тогда
			СтрокаТаблицы.Приоритет = 4;
		ИначеЕсли Выборка.НашлиНомерКартыСерединаСкрыта6
			Или   Выборка.НашлиНомерКартыСерединаСкрыта4
			Или   Выборка.НашлиНомерКартыСерединаСкрыта1 Тогда
			// Проверяем сначала вариант с 6-ю символами карты, т.к. он включает в себя вариант с 4-мя символами.
			Если Выборка.НашлиНомерКартыСерединаСкрыта6 Тогда
				КолОткрытыхСимволов = 6;
			ИначеЕсли Выборка.НашлиНомерКартыСерединаСкрыта4 Тогда
				КолОткрытыхСимволов = 4;
			ИначеЕсли Выборка.НашлиНомерКартыСерединаСкрыта1 Тогда
				КолОткрытыхСимволов = 1;
			Иначе
				Продолжить;
			КонецЕсли;
			ПозНач = СтрНайти(СловоНазначения, ЧастиКарты["НачКарты" + КолОткрытыхСимволов]);
			ПозКон = СтрНайти(СловоНазначения, ЧастиКарты.КонКарты4);
			Разделитель = Сред(СловоНазначения,
				ПозНач + КолОткрытыхСимволов,
				ПозКон - ПозНач - КолОткрытыхСимволов);
			СимволРазделителя = Лев(Разделитель, 1);
			Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволРазделителя)
				И ПустаяСтрока(СтрЗаменить(Разделитель, СимволРазделителя, "")) Тогда
				// Выяснили, что в качестве разделителя используется один и тот же символ и это не цифра.
				СтрокаТаблицы.Приоритет = 2;
			КонецЕсли;
		ИначеЕсли Выборка.НашлиТолькоКонецКарты Тогда
			СтрокаТаблицы.Приоритет = 1;
		КонецЕсли;
		
		Если СтрокаТаблицы.Приоритет > МаксПриоритет Тогда
			МаксПриоритет = СтрокаТаблицы.Приоритет;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксПриоритет;
	
КонецФункции

Функция ВыделитьНомерСчетаИзТекста(ИсходныйТекст, НаборШаблонов) Экспорт
	
	ПриведенныйТекст = ПривестиТекстНазначения(ИсходныйТекст);
	
	НомераСчета = СокрЛП(ВыделитьИнформацияОСуммеВНазначении(ПриведенныйТекст, "", НаборШаблонов));
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомераСчета) Тогда
		НомераСчета = "";
	КонецЕсли;
	
	Возврат НомераСчета;
	
КонецФункции

Функция ВыделитьСуммуКомиссииВозвратаИзНазначенияПлатежа(ИсходноеНазначениеПлатежа, НаборШаблонов)
	
	НазначениеПлатежа = ПривестиТекстНазначения(ИсходноеНазначениеПлатежа);
	
	СпецСимволыЧисла = ":,.-= ";
	ИнформацияОСумме = ВыделитьИнформацияОСуммеВНазначении(НазначениеПлатежа, СпецСимволыЧисла, НаборШаблонов);
	
	СуммаЧисло = 0;
	Если ЗначениеЗаполнено(ИнформацияОСумме) Тогда
		СуммаЧисло = СтрокаВЧисло(ИнформацияОСумме, СпецСимволыЧисла);
	КонецЕсли;
	
	Возврат СуммаЧисло;
	
КонецФункции

Функция ВыделитьНДСИзНазначенияПлатежа(ИсходноеНазначениеПлатежа, СуммаПлатежа)
	Перем СтавкаНДС, ЗначениеСтавкиНДС, ЗначениеСуммыНДС;
	
	Результат = Новый Структура;
	
	НазначениеПлатежа = ПривестиТекстНазначения(ИсходноеНазначениеПлатежа);
	
	СпецСимволыЧисла = ":(%),.-= ";
	ИнформацияОНДС = ВыделитьИнформациюОНДСВНазначении(НазначениеПлатежа, ЗначениеСтавкиНДС, СпецСимволыЧисла);
	
	Если ЗначениеСтавкиНДС = "БезНДС" Тогда
		СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Перечисления.ВидыСтавокНДС.БезНДС);
		ЗначениеСуммыНДС = 0;
	ИначеЕсли ЗначениеСтавкиНДС = "ПустаяСсылка" Тогда
		СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		ЗначениеСуммыНДС = 0;
	ИначеЕсли ИнформацияОНДС = Неопределено Тогда
		ЗначениеСтавкиНДС = Неопределено;
	Иначе
		ЗначениеСтавкиНДС = Неопределено;
		РезультатПоиска = ВыделитьИскомыйТекст(ИнформацияОНДС, СимволПроцента());
		Если РезультатПоиска <> Неопределено Тогда
			ИнформацияОПроцентеНДС = РезультатПоиска.ТекстДо;
			ИнформацияОСумме = РезультатПоиска.ТекстПосле;
		Иначе
			ИнформацияОПроцентеНДС = "";
			ИнформацияОСумме = ИнформацияОНДС;
		КонецЕсли;
		
		ЧисловоеЗначениеСтавкиНДС = СтрокаВЧисло(ИнформацияОПроцентеНДС, СпецСимволыЧисла);
		ЗначениеСуммыНДС = СтрокаВЧисло(ИнформацияОСумме, СпецСимволыЧисла);
		
		Если ЗначениеСуммыНДС <> Неопределено Тогда
			СуммаБезНДС = СуммаПлатежа - ЗначениеСуммыНДС;
			Если СуммаБезНДС > 0 Тогда
				РасчетноеЗначениеСтавкиНДС = Окр(100 * ЗначениеСуммыНДС / СуммаБезНДС, 0);
				Если ЧисловоеЗначениеСтавкиНДС = Неопределено Или РасчетноеЗначениеСтавкиНДС = ЧисловоеЗначениеСтавкиНДС Тогда
					ПроцентНДС = XMLСтрока(РасчетноеЗначениеСтавкиНДС);
					СтавкаНДС = СтавкаНДС(ПроцентНДС);
					Если СтавкаНДС = Неопределено Тогда
						// Расчетная ставка не найдена, подставим в документа пустую ставку и сумму НДС.
						// Если оставить Неопределено, то в документ подставится ставка "по умолчанию".
						СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
					КонецЕсли;
				Иначе
					СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЧисловоеЗначениеСтавкиНДС <> Неопределено И СтавкаНДС = Неопределено Тогда
			ПроцентНДС = XMLСтрока(ЧисловоеЗначениеСтавкиНДС);
			СтавкаНДС = СтавкаНДС(ПроцентНДС);
			ЗначениеСуммыНДС = СуммаНДС(СтавкаНДС, СуммаПлатежа);
		КонецЕсли;
	КонецЕсли;
	
	Если СтавкаНДС <> Неопределено Тогда
		Результат.Вставить("СтавкаНДС", СтавкаНДС);
	КонецЕсли;
	
	Если ЗначениеСуммыНДС <> Неопределено Тогда
		Результат.Вставить("СуммаНДС", ЗначениеСуммыНДС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СловоИсключениеОтмены()
	
	Возврат НСтр("ru = 'отмены'");
	
КонецФункции

Функция НовыйШаблонВозвратыПоЭквайрингу()
	
	// Порядок шаблонов имеет значение.
	
	ТаблицаШаблонов = Новый Массив;
	ТаблицаШаблонов.Добавить(НСтр("ru = 'сумма возвратов'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'операций возврата'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возврат покупки по тст'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возврат покупки'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возвратов покупки'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'удержано по операциям возврата'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возвратов'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возврат:'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'возвр.'"));
	
	Возврат ТаблицаШаблонов;
	
КонецФункции

Функция НовыйШаблоныКомиссия()
	
	// Порядок шаблонов имеет значение.
	
	ТаблицаШаблонов = Новый Массив;
	ТаблицаШаблонов.Добавить(НСтр("ru = 'сумма комиссии'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'ком банка'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'ком.банка'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'усл.банка'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комиссия банка'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комиссия банка'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комиссия по операциям'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комиссия'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комиссии'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'с учетом взаимозачет. вознагр.'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'комис.'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'ком.'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'к.'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'удержано ком'"));
	ТаблицаШаблонов.Добавить(НСтр("ru = 'удержано'"));
	
	Возврат ТаблицаШаблонов;
	
КонецФункции

Функция НовыйШаблоныТекстаНДС()
	
	ТаблицаШаблонов = Новый ТаблицаЗначений;
	ТаблицаШаблонов.Колонки.Добавить("ТекстШаблона",  Новый ОписаниеТипов("Строка"));
	ТаблицаШаблонов.Колонки.Добавить("ОблагаетсяНДС", Новый ОписаниеТипов("Булево"));
	
	// Шаблоны "Без НДС".
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'без налога'");   // "Без налога (НДС)"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'без ндс'");
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'нет ндс'");
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс нет'");
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс включен'");
	// Текст может быть сокращен, или не уместиться.
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс не обл'");    // "НДС не облагается"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс необл'");     // "НДС не облагается" (могут быть некорректные сокращения)
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс не упл'");    // "НДС не уплачивается"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс не взим'");   // "НДС не взимается"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс не пред'");   // "НДС не предусмотрен"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'не облагается'"); // "Не облагается НДС"
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'не взимается'");  // "Не взимается НДС"
	
	// Шаблоны, с выделенным НДС.
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс в том числе'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс в т.ч.'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс в т ч'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс в тч'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'в том числе ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'в т.ч. ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'в т ч ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'в тч ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	
	// Должен быть последним в таблице, чтобы можно было проверить предыдущие шаблоны.
	СтрокаШаблона = ТаблицаШаблонов.Добавить();
	СтрокаШаблона.ТекстШаблона = НСтр("ru = 'ндс'");
	СтрокаШаблона.ОблагаетсяНДС = Истина;
	
	ТаблицаШаблонов.Индексы.Добавить("ТекстШаблона");
	
	Возврат ТаблицаШаблонов;
	
КонецФункции

Функция ВыделитьИнформацияОСуммеВНазначении(ТекстНазначениеПлатежа, СпецСимволыЧисла, НаборШаблонов)
	Перем ИнформацияОСумме;
	
	ДопустимыеСимволыЧисла = "0123456789" + СпецСимволыЧисла;
	
	Пока Не ПустаяСтрока(ТекстНазначениеПлатежа) Цикл
		РезультатПоиска = ПоискШаблонаВТекстеНазначения(ТекстНазначениеПлатежа, НаборШаблонов);
		Если РезультатПоиска = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ТекстНазначениеПлатежа = СокрЛП(РезультатПоиска.ТекстПосле);
		
		Если Не ПустаяСтрока(ТекстНазначениеПлатежа) Тогда
			ВыделитьТекстСуммыИзНазначения(ТекстНазначениеПлатежа, ИнформацияОСумме, ДопустимыеСимволыЧисла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИнформацияОСумме;
	
КонецФункции

Функция ВыделитьИнформациюОНДСВНазначении(ТекстНазначениеПлатежа, ЗначениеСтавкиНДС, СпецСимволыЧисла)
	Перем ИнформацияОНДС;
	
	ОбозначениеПроцента = СимволПроцента();
	ОбозначениеПроцентаМеждународное = "pct"; // латинские символы (сокращение от Percent), указываются без локализации
	
	ДопустимыеСимволыЧисла = "0123456789" + СпецСимволыЧисла;
	НаборШаблонов = НовыйШаблоныТекстаНДС();
	
	Пока Не ПустаяСтрока(ТекстНазначениеПлатежа) Цикл
		РезультатПоиска = ПоискШаблонаВТекстеНазначения(ТекстНазначениеПлатежа, НаборШаблонов);
		Если РезультатПоиска = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ТекстНазначениеПлатежа = СокрЛП(РезультатПоиска.ТекстПосле);
		
		Шаблон = НаборШаблонов.Найти(РезультатПоиска.ИскомыйТекст, "ТекстШаблона");
		Если Не Шаблон.ОблагаетсяНДС Тогда
			ЗначениеСтавкиНДС = "БезНДС";
			Прервать;
		ИначеЕсли ИнформацияОНДС <> Неопределено Тогда
			// В тексте назначения нашли несколько ставок НДС,
			// либо в одной из найденных подстрок есть паттерны похожие на НДС, но таковыми не являющиеся.
			// Такие ситуации не обслуживаем.
			ЗначениеСтавкиНДС = Неопределено;
			ИнформацияОНДС    = Неопределено;
			Прервать;
		КонецЕсли;
		
		Если Шаблон.ОблагаетсяНДС И Не ПустаяСтрока(ТекстНазначениеПлатежа) Тогда
			Если СтрНайти(ТекстНазначениеПлатежа, ОбозначениеПроцента) = 0 Тогда
				ТекстНазначениеПлатежа = СтрЗаменить(
					ТекстНазначениеПлатежа, ОбозначениеПроцентаМеждународное, ОбозначениеПроцента);
			КонецЕсли;
			
			ВыделитьТекстСуммыИзНазначения(ТекстНазначениеПлатежа, ИнформацияОНДС, ДопустимыеСимволыЧисла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИнформацияОНДС;
	
КонецФункции

Процедура ВыделитьТекстСуммыИзНазначения(ТекстНазначениеПлатежа, ИнформацияОСумме, ДопустимыеСимволыЧисла)
	
	ПозицияРуб = СтрНайти(НРег(ТекстНазначениеПлатежа), НСтр("ru = 'руб'"));
	ПозицияКоп = СтрНайти(НРег(ТекстНазначениеПлатежа), НСтр("ru = 'коп'"));
	
	СуммаВВидеРубКоп = ПозицияРуб > 0 И ПозицияКоп > 0;
	Если СуммаВВидеРубКоп Тогда
		ТекстРуб = СокрП(Лев(ТекстНазначениеПлатежа, ПозицияРуб - 1));
		ТекстПослеРуб = Сред(ТекстНазначениеПлатежа, ПозицияРуб + 3);
		ПозицияКопВТекстПослеРуб = СтрНайти(НРег(ТекстПослеРуб), НСтр("ru = 'коп'"));
		
		НачальнаяПозицияКопеек = 0;
		Для Индекс = 1 По ПозицияКопВТекстПослеРуб Цикл
			Символ = Сред(ТекстПослеРуб, Индекс, 1);
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ) Тогда
				НачальнаяПозицияКопеек = Индекс;
				Прервать
			КонецЕсли;
		КонецЦикла;
		
		ДлинаСтрокиСКопейками = 0;
		Если НачальнаяПозицияКопеек > 0 Тогда
			ДлинаСтрокиСКопейками = ПозицияКопВТекстПослеРуб - НачальнаяПозицияКопеек - 1;
		КонецЕсли;
		
		Разделитель = ".";
		ИнформацияОСумме = ТекстРуб + Разделитель + Сред(ТекстПослеРуб, НачальнаяПозицияКопеек, ДлинаСтрокиСКопейками);
		ТекстНазначениеПлатежа = Сред(ТекстНазначениеПлатежа, ПозицияКоп + 3);
	Иначе
		КонечнаяПозицияЧисла = 0;
		Для Индекс = 1 По СтрДлина(ТекстНазначениеПлатежа) Цикл
			Символ = Сред(ТекстНазначениеПлатежа, Индекс, 1);
			Если ОбменСБанкомКлиентСервер.ДопустимыйСимвол(Символ, ДопустимыеСимволыЧисла) Тогда
				КонечнаяПозицияЧисла = Индекс;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КонечнаяПозицияЧисла > 0 Тогда
			ИнформацияОСумме = Лев(ТекстНазначениеПлатежа, КонечнаяПозицияЧисла);
			ТекстНазначениеПлатежа = СокрЛ(Сред(ТекстНазначениеПлатежа, КонечнаяПозицияЧисла + 1));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиТекстНазначения(ИсходноеНазначениеПлатежа)
	
	ЗаменяемыеСимволы = "()"
		+ Символы.НПП
		+ Символы.ПС
		+ Символы.ВК
		+ Символы.ПФ
		+ Символы.Таб
		+ Символы.ВТаб;
	
	НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(
		ЗаменяемыеСимволы, ИсходноеНазначениеПлатежа,
		СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", СтрДлина(ЗаменяемыеСимволы)));
	
	ЗаменитьПодстрокуВТексте(НазначениеПлатежа, "  ", " ");
	НазначениеПлатежа = СокрЛП(НазначениеПлатежа);
	
	Если СтрЗаканчиваетсяНа(НазначениеПлатежа, ".") Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(НазначениеПлатежа);
	КонецЕсли;
	
	Возврат НРег(СокрП(НазначениеПлатежа));
	
КонецФункции

// Ищет по шаблону текст в Назначение платежа и получает часть текста после этого шаблона
//
// Параметры:
//  Текст - Строка - текст Назначения платежа
//  Шаблоны - Таблица значений, Массив - шаблоны, которые нужно искать в тексте
//
// Результат
//  Неопределено, Структура - неопределено, если не нашли данные по шабонам,
// либо структура с позицией найденного в тексте шаблона и текстом до и после шаблона
//
Функция ПоискШаблонаВТекстеНазначения(Текст, Шаблоны)
	Перем Результат;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоШаблоныНДС = ТипЗнч(Шаблоны) = Тип("ТаблицаЗначений");
	
	ДопустимыеСимволы = "0123456789" + ОбменСБанкомКлиентСервер.Спецсимволы();
	Для Каждого Шаблон Из Шаблоны Цикл
		Если ЭтоШаблоныНДС Тогда
			РезультатПоиска = ВыделитьИскомыйТекст(Текст, Шаблон.ТекстШаблона);
			Если РезультатПоиска = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СимволДо = СокрЛП(Прав(РезультатПоиска.ТекстДо, 1));
			Если Шаблон.ОблагаетсяНДС Тогда
				СимволПосле = СокрЛП(Лев(РезультатПоиска.ТекстПосле, 1));
			Иначе
				РезультатПоиска.ТекстПосле = "";
				СимволПосле = "";
			КонецЕсли;
		Иначе
			РезультатПоиска = ВыделитьИскомыйТекст(Текст, Шаблон);
			Если РезультатПоиска = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СимволДо    = СокрЛП(Прав(РезультатПоиска.ТекстДо,   1));
			СимволПосле = СокрЛП(Лев(РезультатПоиска.ТекстПосле, 1));
		КонецЕсли;
		
		Если Не ПустаяСтрока(СимволДо) И Не ОбменСБанкомКлиентСервер.ДопустимыйСимвол(СимволДо, ДопустимыеСимволы)
			Или СтрЗаканчиваетсяНа(СокрП(РезультатПоиска.ТекстДо), СловоИсключениеОтмены())
			Или Не ПустаяСтрока(СимволПосле) И Не ОбменСБанкомКлиентСервер.ДопустимыйСимвол(СимволПосле, ДопустимыеСимволы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат = Неопределено Или Результат.Позиция > РезультатПоиска.Позиция Тогда
			Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатПоиска);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыделитьИскомыйТекст(ОбрабатываемыйТекст, ИскомыйТекст)
	
	ПозицияНачала = СтрНайти(НРег(ОбрабатываемыйТекст), НРег(ИскомыйТекст));
	Если ПозицияНачала = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстДо = СокрЛ(Лев(ОбрабатываемыйТекст, ПозицияНачала - 1));
	ТекстПосле = СокрЛП(Сред(ОбрабатываемыйТекст, ПозицияНачала + СтрДлина(ИскомыйТекст)));
	
	Возврат Новый Структура("ТекстДо, ИскомыйТекст, ТекстПосле, Позиция",
		ТекстДо, ИскомыйТекст, ТекстПосле, ПозицияНачала - 1);
	
КонецФункции

Функция СтрокаВЧисло(ТекстСЧислом, ДопустимыеСимволыЧисла)
	
	Если ПустаяСтрока(ТекстСЧислом) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = СтрЗаменить(ТекстСЧислом, " ", "");
	
	УдалитьСимволВНачале = Ложь;
	УдалитьСимволВКонце  = Ложь;
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволыЧисла) Цикл
		СпецСимвол = Сред(ДопустимыеСимволыЧисла, Индекс, 1);
		Если СтрНачинаетсяС(Текст, СпецСимвол) Тогда
			УдалитьСимволВНачале = Истина;
		КонецЕсли;
		Если СтрЗаканчиваетсяНа(Текст, СпецСимвол) Тогда
			УдалитьСимволВКонце = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если УдалитьСимволВНачале Тогда
		Текст = Сред(Текст, 2);
	КонецЕсли;
	
	Если УдалитьСимволВКонце Тогда
		Текст = Сред(Текст, 1, СтрДлина(Текст) - 1);
	КонецЕсли;
	
	// Группы разрядов цифр могут быть отделены запятой, уберем ее.
	РазделительЗапятая = ",";
	РазделительТочка   = ".";
	ЭтоРазделитель     = Ложь;
	ГруппаРазрядов     = "";
	КоличествоСимволов = СтрДлина(Текст);
	Для Номер = 1 По КоличествоСимволов Цикл
		Символ = Сред(Текст, Номер, 1);
		ДлинаГруппы = СтрДлина(ГруппаРазрядов);
		Если Символ = РазделительТочка Или Символ = РазделительЗапятая Тогда
			ГруппаРазрядов = "";
			Если ДлинаГруппы = 0 И Символ = РазделительЗапятая Или ДлинаГруппы = 3 Тогда
				ЭтоРазделитель = Истина;
			Иначе
				ЭтоРазделитель = Ложь;
			КонецЕсли;
			
			Если Символ = РазделительТочка Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоРазделитель Тогда
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ) Тогда
				ГруппаРазрядов = ГруппаРазрядов + Символ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДлинаГруппы = СтрДлина(ГруппаРазрядов);
	Если ЭтоРазделитель И ДлинаГруппы = 0 Или ДлинаГруппы = 3 Тогда
		Текст = СтрЗаменить(Текст, ",", "");
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволыЧисла) Цикл
		Символ = Сред(ДопустимыеСимволыЧисла, Индекс, 1);
		Текст = СтрЗаменить(Текст, Символ, ".");
	КонецЦикла;
	
	ЗаменитьПодстрокуВТексте(Текст, "..", ".");
	
	Пока СтрНачинаетсяС(Текст, ".") Цикл
		Текст = Сред(Текст, 2);
	КонецЦикла;
	
	Пока СтрЗаканчиваетсяНа(Текст, ".") Цикл
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Текст);
	КонецЦикла;
	
	Если СтрЧислоВхождений(Текст, ".") > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияТочки = СтрНайти(Текст, ".");
	Точность = ?(ПозицияТочки = 0, 0, СтрДлина(Текст) - ПозицияТочки);
	ФорматнаяСтрока = "ЧДЦ=" + Точность + "; ЧН=0; ЧРД=.; ЧГ=0";
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ЧисловоеЗначение = ОписаниеТипаЧисло.ПривестиЗначение(Текст);
	
	Если Формат(ЧисловоеЗначение, ФорматнаяСтрока) = Текст Тогда
		Возврат ЧисловоеЗначение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаменитьПодстрокуВТексте(Значение, ПодстрокаПоиска, ПодстрокаЗамены)
	
	Если СтрНайти(ПодстрокаЗамены, ПодстрокаПоиска) > 0 Тогда
		Возврат; // иначе цикл ниже никогда не остановится
	КонецЕсли;
	
	Пока СтрНайти(Значение, ПодстрокаПоиска) > 0 Цикл
		Значение = СтрЗаменить(Значение, ПодстрокаПоиска, ПодстрокаЗамены);
	КонецЦикла;
	
КонецПроцедуры

// Ищет ФИО учредителя в назначении платежа.
//
// Параметры:
//  Параметры - см. НовыйПараметрыОпределенияХозяйственнойОперации()
//
// Возвращаемое значение:
//  - Структура - реквизиты учредителя, если найден
//   * Ссылка - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты - учредитель
//   * Наименование - имя учредителя
//  - Неопределено - если учредитель не найден
//
Функция УчредительФизЛицоИзНазначенияПлатежа(Параметры)
	
	НазначениеПлатежа = НРег(Параметры.Операция.НазначениеПлатежа);
	
	СоставУчредителей = Параметры.ВладелецСчета.УчредителиОрганизации;
	
	Для Каждого Учредитель Из СоставУчредителей Цикл 
		Если Учредитель.ЭтоФизЛицо 
			И СтрНайти(НазначениеПлатежа, НРег(Учредитель.Наименование)) > 0 Тогда 
			Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Учредитель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СохранениеДанныхАвтозаполнения

Функция СохранятьДанныеАвтозаполненияДокументов()

	УстановитьПривилегированныйРежим(Истина);
	Результат = Константы.СохранятьДанныеАвтозаполненияБанковскихВыписок.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;

КонецФункции

Процедура СохранитьДанныеАвтозаполненияДокумента(ДокументОбъект, ХозяйственнаяОперация)
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДанныеАвтозаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАвтозаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "ДанныеАвтозаполнения");
	Если НЕ ЗначениеЗаполнено(ДанныеАвтозаполнения) Тогда
		ДанныеОбъекта = ДанныеОбъектаДляКонтроляАвтозаполнения(ДокументОбъект);
		ДанныеАвтозаполнения = ЗначениеВJSON(ДанныеОбъекта);
	КонецЕсли;
	ДокументОбъект.ДанныеАвтозаполнения = ДанныеАвтозаполнения;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаВыписки", Истина);
	
КонецПроцедуры

Процедура СохранитьДанныеАвтозаполненияСтрокВыписки(РаспознаннаяВыписка, Выписка, ШаблоныОбъектов)
	
	Если ШаблоныОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Операция Из Выписка.Операции Цикл
			
		РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
		Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
			ИЛИ ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) 
			ИЛИ РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		ДанныеЗаполнения = НовыйДанныеЗаполнения(
			Операция,
			РаспознаннаяОперация.ПлатежноеПоручение,
			РаспознаннаяОперация.ХозяйственнаяОперация,
			РаспознаннаяВыписка.ВладелецСчета);
		ДокументОбъект = ?(Операция.ПоступилоСписано = "Поступило", 
			ДесериализованноеЗначениеИзJSON(ШаблоныОбъектов.ПоступлениеНаСчет),
			ДесериализованноеЗначениеИзJSON(ШаблоныОбъектов.РасходСоСчета));
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		СериализованныйОбъект = СериализованноеЗначениеВJSON(ДокументОбъект);
		РаспознаннаяОперация.ХозяйственнаяОперация.Вставить("ДокументОбъект", СериализованныйОбъект);
		ДанныеОбъекта = ДанныеСериализованногоОбъекта(СериализованныйОбъект);
		РаспознаннаяОперация.ХозяйственнаяОперация.Вставить("ДанныеАвтозаполнения", ЗначениеВJSON(ДанныеОбъекта));
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеОбъектаДляКонтроляАвтозаполнения(ДокументОбъект)

	СериализованныйОбъект = СериализованноеЗначениеВJSON(ДокументОбъект);
	Результат = ДанныеСериализованногоОбъекта(СериализованныйОбъект);
	Возврат Результат;
	
КонецФункции

Функция ДанныеСериализованногоОбъекта(СериализованныйОбъект)
	
	СериализованныйОбъект = СтрЗаменить(СериализованныйОбъект, "#type", "type");
	СериализованныйОбъект = СтрЗаменить(СериализованныйОбъект, "#value", "value");
	СериализованныйОбъект = СтрЗаменить(СериализованныйОбъект, "jcfg:", "");
	СтруктураОбъекта = ЗначениеИзJSON(СериализованныйОбъект);
	
	УдаляемыеКлючи = СтрРазделить("Ref,DeletionMark,Date,Number,Posted,"
		+ "РучнаяКорректировка,ДанныеАвтозаполнения,ИзмененияАвтозаполнения,РеквизитыКонтрагента,"
		+ "НазначениеПлатежа,Ответственный,Комментарий", ",", Ложь);
	Для каждого ЭлементСтруктуры Из СтруктураОбъекта.value Цикл
		Если СтрНачинаетсяС(ЭлементСтруктуры.Ключ, "Удалить") Тогда
			УдаляемыеКлючи.Добавить(ЭлементСтруктуры.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для каждого УдаляемыйКлюч Из УдаляемыеКлючи Цикл
		СтруктураОбъекта.value.Удалить(УдаляемыйКлюч);
	КонецЦикла;
	
	Возврат СтруктураОбъекта.value;
	
КонецФункции

Функция ШаблоныОбъектовСохранениеДанныхАвтозаполнения()
	
	Если НЕ СохранятьДанныеАвтозаполненияДокументов() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	ДокументОбъект = Документы.ПоступлениеНаСчет.СоздатьДокумент();
	Результат.Вставить("ПоступлениеНаСчет", СериализованноеЗначениеВJSON(ДокументОбъект));
	ДокументОбъект = Документы.РасходСоСчета.СоздатьДокумент();
	Результат.Вставить("РасходСоСчета", СериализованноеЗначениеВJSON(ДокументОбъект));
	Возврат Результат;

КонецФункции

Функция РанееЗаполненныйОбъект(ХозяйственнаяОперация, Настройки)
	
	ИспользоватьРанееЗаполненныеОбъекты = НЕ Настройки.Свойство("ИспользуетсяФормаОбменаСБанком");
	Если НЕ ИспользоватьРанееЗаполненныеОбъекты Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОбъекта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "ДокументОбъект");
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта)
		ИЛИ ТипЗнч(ДанныеОбъекта) <> Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументОбъект = ДесериализованноеЗначениеИзJSON(ХозяйственнаяОперация.ДокументОбъект);
	Возврат ДокументОбъект;
	
КонецФункции

Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция СериализованноеЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЗначениеИзJSON(ТекстJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Попытка
		Значение = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

Функция ДесериализованноеЗначениеИзJSON(ТекстJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Попытка
		Значение = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РаспознанныеДанныеИзБанкаОбщая(ВыпискаБанка, Настройки, СведенияОВладельцеБанковскогоСчетаИзКонтекста)
	
	Если Не ЗначениеЗаполнено(ВыпискаБанка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазобратьНазначениеПлатежа(ВыпискаБанка.ДанныеИзБанка);
	
	Если СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
	КонецЕсли;
	
	УчастникиОпераций = ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций();
	
	ИдентификаторыУчастниковОпераций = ЗаполнитьИдентификаторыУчастниковОперацийПоДаннымИзБанка(
		УчастникиОпераций,
		ВыпискаБанка.ДанныеИзБанка);
	ИдентификацияУчастниковБанковскихОпераций.НайтиВИнформационнойБазе(УчастникиОпераций, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	ПротоколГруппировкиВыписки = НовыйПротоколГруппировкиВыписки();
	Выписки = ВыпискиПоБанковскимСчетам(
		ВыпискаБанка.ДанныеИзБанка,
		УчастникиОпераций,
		ИдентификаторыУчастниковОпераций,
		ПротоколГруппировкиВыписки);
	ИдентификаторыУчастниковОпераций = Неопределено; // Все данные помещены в коллекцию Выписки; использовать ИдентификаторыУчастниковОпераций более не следует
	
	РаспознанныеВыписки = РаспознатьВыписки(Выписки, УчастникиОпераций, ВыпискаБанка.ДанныеИзБанка);
	
	Возврат НовыйРаспознанныеДанныеИзБанка(
		Выписки,
		РаспознанныеВыписки,
		УчастникиОпераций,
		Настройки,
		ВыпискаБанка.Протокол,
		ПротоколГруппировкиВыписки);
	
КонецФункции

Процедура ПодставитьДокументУНФ(Документ, РаспознаннаяОперация)
	
	Если ТипЗнч(Документ) <> Тип("СтрокаТаблицыЗначений")
		И РаспознаннаяОперация.Ссылка <> Документ Тогда // В данный момент приоритет у алгоритма определения документа УНФ
		РаспознаннаяОперация.Ссылка = Документ;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИзМодуляМенеджераКБУНФ

Функция ПодготовитьКонтекстДляРазбораБанковскойВыписки(НастройкиКБУНФ)
	
	ПараметрыВыделенияКолонок = Новый Структура();
	ПараметрыВыделенияКолонок.Вставить("ВыделитьКолонкуДокумент", Ложь);
	ПараметрыВыделенияКолонок.Вставить("ВыделитьКолонкуСуммаСписано", Ложь);
	ПараметрыВыделенияКолонок.Вставить("ВыделитьКолонкуСуммаПоступило", Ложь);
	ПараметрыВыделенияКолонок.Вставить("ВыделитьКолонкуКонтрагент", Ложь);
	ПараметрыВыделенияКолонок.Вставить("ВыделитьКолонкуДоговор", Ложь);
	ПараметрыВыделенияКолонок.Вставить("ВыделитьКолонкуРСКонтрагента", Ложь);
	ПараметрыВыделенияКолонок.Вставить("ВыделитьКолонкуВидОперации", Ложь);
	
	ДокументыКИмпорту = Обработки.КлиентБанк.Создать().Загрузка.Выгрузить();
	ДокументыКИмпорту.Колонки.Добавить("КодНазПлатежа", Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(1)));
	ДокументыКИмпорту.Колонки.Добавить("ДокументНеЗагружен", Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(0)));
	ДокументыКИмпорту.Колонки.Добавить("ОписаниеОшибокПодТЧ", Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(0)));
	ДокументыКИмпорту.Колонки.Добавить("КонтрагентНеНайденКартинка", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(1, 0)));
	ДокументыКИмпорту.Колонки.Добавить("КонтрагентНайден", Новый ОписаниеТипов("Булево"));
	ДокументыКИмпорту.Колонки.Добавить("СчетКонтрагентаНеНайденКартинка", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(1, 0)));
	ДокументыКИмпорту.Колонки.Добавить("ДоговорНеНайденКартинка", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(1, 0)));
	ДокументыКИмпорту.Колонки.Добавить("СуммаСписаноСМинусом", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(15, 2)));
	ДокументыКИмпорту.Колонки.Добавить("ДокументНайден", Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(0)));
	ДокументыКИмпорту.Колонки.Добавить("ВидОперацииНеНайденКартинка", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(1, 0)));
	ДокументыКИмпорту.Колонки.Добавить("НеВерныйФорматСуммыКартинка", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(1, 0)));
	ДокументыКИмпорту.Колонки.Добавить("НесколькоДокументовКартинка", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(1, 0)));
	ДокументыКИмпорту.Колонки.Добавить("СчетКонтрагентаИсходный",
		Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка", Новый КвалификаторыСтроки(255)));
	
	ТаблицаНайденныхДокументов = Новый ТаблицаЗначений;
	ТаблицаНайденныхДокументов.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(15, 2)));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",
		Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("ДокументСсылка.РасходСоСчета, ДокументСсылка.ПоступлениеНаСчет"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Корреспонденция",
		Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("Статья",
		Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("СчетКонтрагента",
		Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаНайденныхДокументов.Колонки.Добавить("БудетОбрабатыватьсяПриЗагрузке", Новый ОписаниеТипов("Булево"));
	ТаблицаНайденныхДокументов.Колонки.Добавить(
		"ДатаДок", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	ТаблицаТаблицДокументов = Новый ТаблицаЗначений;
	ТаблицаТаблицДокументов.Колонки.Добавить(
		"ТаблицаНайденныхДокументов", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТаблицДокументов.Колонки.Добавить(
		"НомерСтрокиВТаблицеИмпорта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
	
	ТаблицаКонтрагентов = Новый ДеревоЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(255)));
	ТаблицаКонтрагентов.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.Контрагенты, Строка",
		Новый КвалификаторыСтроки(255)));
	ТаблицаКонтрагентов.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(255)));
	ТаблицаКонтрагентов.Колонки.Добавить("НомСтроки", Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(255)));
	ТаблицаКонтрагентов.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"));
	ТаблицаКонтрагентов.Колонки.Добавить("ЭтоКонтрагент", Новый ОписаниеТипов("Булево"));
	ТаблицаКонтрагентов.Колонки.Добавить("ВидОперации",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРасходСоСчета,
		|ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет"));
	
	ИмпортНеПустые = Неопределено;
	ИмпортНеПустыеПлатежноеПоручение = Неопределено;
	ИмпортНеПустыеПлатежноеПоручениеБюджет = Неопределено;
	
	СформироватьСоответствияНеПустыхПриИмпорте(ИмпортНеПустые, ИмпортНеПустыеПлатежноеПоручение,
		ИмпортНеПустыеПлатежноеПоручениеБюджет);

	КоличествоНеНайденныхКонтрагентов = 0;
	КоличествоНеНайденныхРСчетов = 0;
	НомерСтроки = 0;
	
	Объект = НастройкиКБУНФ;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Объект", Объект);
	Контекст.Вставить("ПараметрыВыделенияКолонок", ПараметрыВыделенияКолонок);
	Контекст.Вставить("ДокументыКИмпорту", ДокументыКИмпорту);
	Контекст.Вставить("ТаблицаНайденныхДокументов", ТаблицаНайденныхДокументов);
	Контекст.Вставить("ТаблицаТаблицДокументов", ТаблицаТаблицДокументов);
	Контекст.Вставить("ТаблицаКонтрагентов", ТаблицаКонтрагентов);
	Контекст.Вставить("ИмпортНеПустые", ИмпортНеПустые);
	Контекст.Вставить("КоличествоНеНайденныхКонтрагентов", 0);
	Контекст.Вставить("КоличествоНеНайденныхРСчетов", 0);
	Контекст.Вставить("НомерСтроки", 0);
		
	Возврат Контекст;
	
КонецФункции // ПодготовитьКонтекстДляРазбораБанковскойВыписки()

Процедура ИтерацияРазбораБанковскойВыпискиУНФ(Документ, Контекст, Результат)
	
	СтрокаДокумента = Контекст.ДокументыКИмпорту.Добавить();
	СтрокаДокумента.Загружать = Истина;
	
	РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, Документ, Контекст.ПараметрыВыделенияКолонок, Контекст.Объект,
		Контекст.ТаблицаТаблицДокументов, Контекст.ТаблицаНайденныхДокументов);
	
	Контекст.НомерСтроки = Контекст.НомерСтроки + 1;
	СтрокаДокумента.НомерСтроки = Контекст.НомерСтроки;
	
	// Для каждого реквизита (= колонка) надо проверить на пустое значение.
	Для каждого КолонкаИмпорта Из Контекст.ДокументыКИмпорту.Колонки Цикл
		ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя,
			КолонкаИмпорта.Заголовок, Контекст.ИмпортНеПустые);
	КонецЦикла;
	
	Результат = Новый Структура;
	
	Для Каждого Колонка Из Контекст.ДокументыКИмпорту.Колонки Цикл
		Результат.Вставить(Колонка.Имя);		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Результат, СтрокаДокумента);
	
КонецПроцедуры // ИтерацияРазбораБанковскойВыпискиУНФ()

Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, Документ, ПараметрыВыделенияКолонок, Объект, ТаблицаТаблицДокументов, ТаблицаНайденныхДокументов, ПослеЗагрузкиВыписокВ1С = Ложь)
	
	// Предопределенные значения
	ВидОперацииВзносНаличных = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
	ВидОперацииСписаниеНаличных = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
	ВидОперацииПереводСДругогоСчета = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
	ВидОперацииПереводНаДругойСчет = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
	ВидОперацииОтКурьерскойКомпанииПочты = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты;
	
	ДействиеНеСоздаватьНовогоКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	СпособЗачетаАвтоматически = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	// Конец Предопределенные значения
	
	ОбработатьОплатуОтФизЛицЧерезБанк(Объект, Документ, СтрокаДокумента);
	
	// Сводим старый и новый форматы
	ЗаполнитьЗначенияСвойств(СтрокаДокумента, Документ);
	СтрокаДокумента.Операция = Документ.Вид;
	
	СтрокаДокумента.Плательщик =         ?(Документ.ПлательщикРеквизиты.Свойство("НаименованиеРасширенное"), Документ.ПлательщикРеквизиты.НаименованиеРасширенное, "");
	СтрокаДокумента.Плательщик1 =        ?(Документ.ПлательщикРеквизиты.Свойство("Наименование"),			 Документ.ПлательщикРеквизиты.Наименование, "");
	СтрокаДокумента.ПлательщикБИК =      ?(Документ.ПлательщикРеквизиты.Свойство("БИК"),					 Документ.ПлательщикРеквизиты.БИК, "");
	СтрокаДокумента.ПлательщикБанк1 =    ?(Документ.ПлательщикРеквизиты.Свойство("Банк"),					 Документ.ПлательщикРеквизиты.Банк, "");
	СтрокаДокумента.ПлательщикБанк2 =    ?(Документ.ПлательщикРеквизиты.Свойство("ГородБанка"),				 Документ.ПлательщикРеквизиты.ГородБанка, "");
	СтрокаДокумента.ПлательщикКПП =      ?(Документ.ПлательщикРеквизиты.Свойство("КПП"),					 Документ.ПлательщикРеквизиты.КПП, "");
	СтрокаДокумента.ПлательщикКорСчет =  ?(Документ.ПлательщикРеквизиты.Свойство("КорСчет"),				 Документ.ПлательщикРеквизиты.КорСчет, "");
	СтрокаДокумента.ПлательщикРасчСчет = ?(Документ.ПлательщикРеквизиты.Свойство("РасчСчет"),				 Документ.ПлательщикРеквизиты.РасчСчет, "");
	
	СтрокаДокумента.Получатель =         ?(Документ.ПолучательРеквизиты.Свойство("НаименованиеРасширенное"), Документ.ПолучательРеквизиты.НаименованиеРасширенное, "");
	СтрокаДокумента.Получатель1 =        ?(Документ.ПолучательРеквизиты.Свойство("Наименование"),			 Документ.ПолучательРеквизиты.Наименование, "");
	СтрокаДокумента.ПолучательБИК =      ?(Документ.ПолучательРеквизиты.Свойство("БИК"),					 Документ.ПолучательРеквизиты.БИК, "");
	СтрокаДокумента.ПолучательБанк1 =    ?(Документ.ПолучательРеквизиты.Свойство("Банк"),					 Документ.ПолучательРеквизиты.Банк, "");
	СтрокаДокумента.ПолучательБанк2 =    ?(Документ.ПолучательРеквизиты.Свойство("ГородБанка"),				 Документ.ПолучательРеквизиты.ГородБанка, "");
	СтрокаДокумента.ПолучательКПП =      ?(Документ.ПолучательРеквизиты.Свойство("КПП"),					 Документ.ПолучательРеквизиты.КПП, "");
	СтрокаДокумента.ПолучательКорСчет =  ?(Документ.ПолучательРеквизиты.Свойство("КорСчет"),				 Документ.ПолучательРеквизиты.КорСчет, "");
	СтрокаДокумента.ПолучательРасчСчет = ?(Документ.ПолучательРеквизиты.Свойство("РасчСчет"),				 Документ.ПолучательРеквизиты.РасчСчет, "");
	
	СтрокаДокумента.ПоказательКБК = ?(Документ.РеквизитыПлатежаВБюджет.Свойство("ПоказательКБК"),				 Документ.РеквизитыПлатежаВБюджет.ПоказательКБК, "");
	Если ЗначениеЗаполнено(СтрокаДокумента.ПоказательКБК) И СтрокаДокумента.ПоказательКБК = "18210507000011000110" Тогда
		СтрокаДокумента.ВидНалога = Справочники.ВидыНалогов.АУСН; 
		СтрокаДокумента.СрокУплаты = РегламентированнаяОтчетностьУСН.СрокУплатыПоНалогуИДате(Справочники.ВидыНалогов.АУСН, ТекущаяДатаСеанса());
	КонецЕсли;

	СтрокаДокумента.СтатусСоставителя =
	?(Документ.РеквизитыПлатежаВБюджет.Свойство("СтатусСоставителя"), Документ.РеквизитыПлатежаВБюджет.СтатусСоставителя, "");
	
	СтрокаДокумента.Сумма = СтрЗаменить(Документ.Сумма, Символы.НПП, "");
	
	СтруктураЗначенийИзСоответствия = ПолучитьДанныеИзСоответствияНазначенияПлатежа(СтрокаДокумента, ЕстьЗаписиВСправочникеСоответствий());
	
	ПустаяДата = Дата("00010101");
	
	// Установим номера картинок.
	СтрокаДокумента.КонтрагентНеНайденКартинка = -1;
	СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = -1;
	СтрокаДокумента.ДоговорНеНайденКартинка = -1;
	
	// 1) Определим вид платежа: входящий или исходящий.
	ПлатежноеПоручение = ВРег(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	Исходящий = СтрокаДокумента.ПлательщикСчет = СокрЛП(Объект.БанковскийСчет.НомерСчета)
				 И (СтрокаДокумента.ПлательщикБИК = СокрЛП(Объект.БанковскийСчет.Банк.Код)
				 Или СтрокаДокумента.ПлательщикБИК = "");
	
	СтрокаДокумента.Исходящий = Исходящий;
	
	// 2) Определим вид документа в программе.
	ВидДокумента = ?(Исходящий, "РасходСоСчета", "ПоступлениеНаСчет"); // Не локализуется
	ИмяДокумента = ?(Исходящий, НСтр("ru = 'Расход со счета'"), НСтр("ru = 'Поступление на счет'"));
	
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	РеквизитСчета = ?(Исходящий, "БанковскийСчет", "СчетКонтрагента"); // Не локализуется
	
	// 10) Определим сумму.
	
	// Преобразуем из строки в число.
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если ПустаяСтрока(Буфер) Тогда
		СтрокаДокумента.НеВерныйФорматСуммыКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Сумма не указана'");
		ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
		Если Исходящий Тогда
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано = Истина;
		Иначе
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило = Истина;
		КонецЕсли;
	ИначеЕсли Не ЕстьНеЦифрыНаСервере(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		Сумма = Число(Буфер);
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано = Сумма;
			СтрокаДокумента.СуммаСписаноСМинусом = -Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
		СтрокаДокумента.НеВерныйФорматСуммыКартинка = -1;
	Иначе
		СтрокаДокумента.НеВерныйФорматСуммыКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Укажите сумму вручную (%Буфер%)'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Буфер%", Буфер);
		ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
		Если Исходящий Тогда
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано = Истина;
		Иначе
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// 3) Найдем ранее загруженный (введенный вручную) документ.
	// Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа.
	ДатаДок = ПустаяДата;
	
	Если НЕ ПустаяСтрока(СтрокаДокумента.Дата) Тогда
		СтрокаДокумента.ДатаОтсылки = ПолучитьДатуИзСтроки(СтрокаДокумента.Дата, СтрокаДокумента.Дата);
	КонецЕсли;

	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаСписано);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И НЕ ПустаяСтрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаПоступило);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СтрокаДокумента.ДатаДок = Результат;
		НомерДляПоискаДок = СтрокаДокумента.Номер;
		РеквизитДаты = "ДатаВходящегоДокумента";
		РеквизитНомера = "НомерВходящегоДокумента";
		ВсеРеквизитыПоискаЕсть = Истина;
	Иначе
		ВсеРеквизитыПоискаЕсть = Ложь;
	КонецЕсли;
	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	СтрокаДокумента.НесколькоДокументовКартинка = -1;
	
	АнализироватьИсторию = Ложь;
	ДокументНайден = Ложь;
	Если ВсеРеквизитыПоискаЕсть Тогда
		
		// При наличии нескольких предпочтение отдается первому, с совпадающим
		// номером счета.
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежныеДокументы.Ссылка,
		|	ПлатежныеДокументы.ВидОперации,
		|	ПлатежныеДокументы.Статья,
		|	ПлатежныеДокументы.СчетКонтрагента,
		|	ПлатежныеДокументы.Контрагент,
		|	ПлатежныеДокументы.Контрагент.ИНН КАК КонтрагентИНН,
		|	ПлатежныеДокументы.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ПлатежныеДокументы.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ПлатежныеДокументы.Проведен,
		|	ПлатежныеДокументы." + РеквизитНомера + " КАК Номер,
		|	ПлатежныеДокументы." + РеквизитДаты + " КАК Дата,
		|	ПлатежныеДокументы.Дата КАК ДатаДок,
		|	ПлатежныеДокументы.СчетКонтрагента.НомерСчета КАК НомерСчета,
		|	ПлатежныеДокументы.Организация,
		|	ПлатежныеДокументы.Корреспонденция,
		|	ПлатежныеДокументы.Касса,
		|	ПлатежныеДокументы.СуммаДокумента КАК Сумма,
		|	ТипЗначения(ПлатежныеДокументы.Ссылка) КАК ВидДокумента,
		|	ПлатежныеДокументы.ДокументОснование КАК ПлатежноеПоручение,
		|	ПлатежныеДокументы.БанковскаяОперация КАК БанковскаяОперация,
		|	ПлатежныеДокументы.ВидНалога КАК ВидНалога,
		|	ПлатежныеДокументы.Подотчетник КАК Подотчетник,
		|	&ЗаменитьНаСрокУплаты
		|ИЗ
		|	Документ." + СтрокаДокумента.ВидДокумента + " КАК ПлатежныеДокументы
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ)= &ДатаДок
		|	И ПлатежныеДокументы.БанковскийСчет = &БанковскийСчет
		|	И ПлатежныеДокументы.Организация = &Организация";
		
		Если НРег(СтрокаДокумента.ВидДокумента) = НРег("РасходСоСчета") Тогда
			ЗапросПоискаДокумента.Текст = СтрЗаменить(ЗапросПоискаДокумента.Текст, "&ЗаменитьНаСрокУплаты", "ПлатежныеДокументы.СрокУплаты КАК СрокУплаты");
		Иначе
			ЗапросПоискаДокумента.Текст = СтрЗаменить(ЗапросПоискаДокумента.Текст, "&ЗаменитьНаСрокУплаты", "Неопределено КАК СрокУплаты");
		КонецЕсли;
		
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Объект.Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
		Результат = ЗапросПоискаДокумента.Выполнить();
		ВыборкаДокументов = Результат.Выбрать();
		СчетДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
		ДлинаНомера = СтрДлина(НомерДляПоискаДок);
		КоличествоДок = 0;
		
		СтрокаСТаблицейДокументов = ТаблицаТаблицДокументов.Добавить();
		СтрокаСТаблицейДокументов.НомерСтрокиВТаблицеИмпорта = СтрокаДокумента.Владелец().Индекс(СтрокаДокумента);
		СтрокаСТаблицейДокументов.ТаблицаНайденныхДокументов = ТаблицаНайденныхДокументов.Скопировать();
		
		Пока ВыборкаДокументов.Следующий() Цикл
															// Так не очень корректно, т.к. нумерация за расчетное обслуживание может быть одна, а по фактическим операциям другая.
			ВыборкаНомер = СокрЛП(ВыборкаДокументов.Номер); // Прав(СокрЛП(ВыборкаДокументов.Номер), ДлинаНомера);
			Если ВыборкаНомер = НомерДляПоискаДок
				И (НЕ ЗначениеЗаполнено(ВыборкаДокументов.НомерСчета) ИЛИ ВыборкаДокументов.НомерСчета = СчетДляПоискаДок) Тогда
				
				БудетОбрабатыватьсяПриЗагрузке = Ложь;
				
				ДокументПодходит = Истина;
				Если КоличествоДок = 0 Тогда
					
					Если СтрокаДокумента.СуммаДокумента <> ВыборкаДокументов.Сумма И НЕ ВыборкаДокументов.Проведен Тогда
						
						ДокументПодходит = Ложь;
						
					// У документа может быть нужный номер и дата, но он может быть не тот, что нужен.
					// Из банка иногда приходит файл, в котором у документов разного вида будут одинаковые номера, например,
					// у банковского ордера и платежного поручения.
					ИначеЕсли СтрокаДокумента.СуммаДокумента <> ВыборкаДокументов.Сумма 
						И (СокрЛП(ВРег(СтрокаДокумента.Операция)) <> СокрЛП(ВРег(ВыборкаДокументов.БанковскаяОперация)) 
						И ЗначениеЗаполнено(СтрокаДокумента.Операция) 
						И ЗначениеЗаполнено(ВыборкаДокументов.БанковскаяОперация)) Тогда
						
						ДокументПодходит = Ложь;
						
					КонецЕсли;
					
					Если ДокументПодходит Тогда
						
						СтрокаДокумента.Документ = ВыборкаДокументов.Ссылка;
						Если ПослеЗагрузкиВыписокВ1С Тогда
							СтрокаДокумента.ДокументНайден = Строка(ВыборкаДокументов.Ссылка);
						Иначе
							Шаблон = ?(СтрокаДокумента.Исходящий, НСтр("ru = 'Найден %1'"), НСтр("ru = 'Найдено %1'"));
							СтрокаДокумента.ДокументНайден =  СтрШаблон(Шаблон, ВыборкаДокументов.Ссылка);
						КонецЕсли;
						СтрокаДокумента.Проведен = ВыборкаДокументов.Проведен;
						СтрокаДокумента.НомерДок = ВыборкаДокументов.Номер;
						СтрокаДокумента.ДатаДок = ВыборкаДокументов.Дата;
						СтрокаДокумента.ВидОперации = ВыборкаДокументов.ВидОперации;
						СтрокаДокумента.СтатьяДДС = ВыборкаДокументов.Статья; 
						СтрокаДокумента.СчетКонтрагента = ВыборкаДокументов.СчетКонтрагента;
						Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
							ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
							Тогда
							
							//
							
						ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
							ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
							Тогда
							
							СтрокаДокумента.Касса = ВыборкаДокументов.Касса;
							
						Иначе
							СтрокаДокумента.Контрагент = ВыборкаДокументов.Контрагент;
						КонецЕсли;
						СтрокаДокумента.Корреспонденция = ВыборкаДокументов.Корреспонденция;
						БудетОбрабатыватьсяПриЗагрузке = Истина;
						
						// Налоги
						СтрокаДокумента.ВидНалога = ВыборкаДокументов.ВидНалога;
						СтрокаДокумента.СрокУплаты = ВыборкаДокументов.СрокУплаты;
						
						// Зарплата
						Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику Тогда
							СтрокаДокумента.Контрагент = ВыборкаДокументов.Подотчетник;
						КонецЕсли;
						
						// Подотчетнику
						Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда
							СтрокаДокумента.Контрагент = ВыборкаДокументов.Подотчетник;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				Если ДокументПодходит Тогда
					КоличествоДок = КоличествоДок + 1;
				КонецЕсли;
				
				// Поместим данные о документа в служебную таблицу.
				СтрокаНайденныеДокументы = СтрокаСТаблицейДокументов.ТаблицаНайденныхДокументов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНайденныеДокументы, ВыборкаДокументов);
				СтрокаНайденныеДокументы.БудетОбрабатыватьсяПриЗагрузке = БудетОбрабатыватьсяПриЗагрузке;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоДок > 1 Тогда
			
			СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%КоличествоДок%) соответствующих документов.'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%КоличествоДок%", КоличествоДок);
			
			Если Не ПослеЗагрузкиВыписокВ1С Тогда
				СтрокаДокумента.ДокументНайден = СтрокаДокумента.ДокументНайден + НСтр("ru = '. И еще %КоличествоДок% док.'");
				СтрокаДокумента.ДокументНайден = СтрЗаменить(СтрокаДокумента.ДокументНайден, "%КоличествоДок%", КоличествоДок-1);
			КонецЕсли;
			
			ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДокумент = Истина;
			СтрокаДокумента.НесколькоДокументовКартинка = 0;
			
		КонецЕсли;
		
		// Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		Если ДокументНайден Тогда
			
			Документ = СтрокаДокумента.Документ; 
			СтрокаДокумента.БанковскийСчет = Объект.БанковскийСчет;
			
			Если Документ.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаДокумента.Договор = Документ.РасшифровкаПлатежа[0].Договор;
				СтрокаДокумента.ПризнакАванса = Документ.РасшифровкаПлатежа[0].ПризнакАванса;
				СтрокаДокумента.Заказ = Документ.РасшифровкаПлатежа[0].Заказ;
				СтрокаДокумента.ДокументРасчетов = Документ.РасшифровкаПлатежа[0].Документ;
				СтрокаДокумента.СчетНаОплату = Документ.РасшифровкаПлатежа[0].СчетНаОплату;
				Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
					СтрокаДокумента.ПлатежноеПоручение = Документ.ДокументОснование;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			АнализироватьИсторию = Истина;
		КонецЕсли;
		
	Иначе // Попробуем собрать статистику использования данных по выбранному контрагенту.
		
		АнализироватьИсторию = Истина;
	КонецЕсли;
	
	#Область ВидОперации
	// 4) Определяем вид операции документа.
	ЭтоПереводМеждуСчетами = Ложь;
	ЭтоСнятиеИлиВзносНаличных = Ложь;
	ЭтоКомиссия = Ложь;
	ЭтоПлатежСотруднику = Ложь;
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПлательщикСчет);
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			КонтрагентПоБанковскомуСчету = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "Владелец");
		Иначе
			КонтрагентПоБанковскомуСчету = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		НеСоздаватьНовыхЭлементов = Ложь;
		
		Если Исходящий Тогда
			
			Если ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) И СокрП(СтрокаДокумента.СтатусСоставителя) <> "0" Тогда
				
				ОписаниеТипа = Новый ОписаниеТипов("Число");
				СтатусСоставителя = ОписаниеТипа.ПривестиЗначение(СтрокаДокумента.СтатусСоставителя);
				
				Если СтрокаДокумента.СтатусСоставителя = "06" ИЛИ СтрокаДокумента.СтатусСоставителя = "08"
					ИЛИ (ЗначениеЗаполнено(СтатусСоставителя) И СтатусСоставителя >= 16 И СтатусСоставителя <= 20) Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
					
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
				КонецЕсли;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ИначеЕсли Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПолучательСчет).Владелец = Объект.БанковскийСчет.Владелец Тогда // перевод на другой счет
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				ЭтоПереводМеждуСчетами = Истина;
				НеСоздаватьНовыхЭлементов = Истина;
				
			ИначеЕсли ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПолучательСчет)) Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				ЭтоСнятиеИлиВзносНаличных = Истина;
				НеСоздаватьНовыхЭлементов = Истина;
				
			ИначеЕсли ЭтоКомиссияБанка(СтрокаДокумента, Исходящий) Тогда
				ЭтоКомиссия = Истина;
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				
			ИначеЕсли ТипЗнч(Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПолучательСчет).Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда // Сотруднику
				ЭтоПлатежСотруднику = Истина;
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				
			Иначе // оплата поставщику
				
				ВидОперацииДокумента = ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия);
				
				Если ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику Тогда
					ЭтоПлатежСотруднику = Истина;
				КонецЕсли;	
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ПоказательКБК) И СтрокаДокумента.ПоказательКБК = "18210507000011000110" Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
			КонецЕсли;
			
		ИначеЕсли КонтрагентПоБанковскомуСчету = Объект.БанковскийСчет.Владелец Тогда // перевод на другой счет
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
			СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ЭтоПереводМеждуСчетами = Истина;
			НеСоздаватьНовыхЭлементов = Истина;
			
		ИначеЕсли ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПлательщикСчет)) Тогда
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
			СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ЭтоСнятиеИлиВзносНаличных = Истина;
			НеСоздаватьНовыхЭлементов = Истина;
			
		ИначеЕсли ЕстьДоговорЭквайринга(КонтрагентПоБанковскомуСчету) Тогда
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам;
			СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			НеСоздаватьНовыхЭлементов = Истина;
			
		ИначеЕсли ЕстьДоговорКредита(КонтрагентПоБанковскомуСчету) Тогда
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам;
			СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			НеСоздаватьНовыхЭлементов = Истина;
			
		Иначе
			
			ВидОперацииДокумента = ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия);
				
			Если ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику Тогда
				ЭтоПлатежСотруднику = Истина;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если НеСоздаватьНовыхЭлементов Тогда
			СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
		СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
	КонецЕсли;
	#КонецОбласти
	
	// 5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.БанковскийСчет) Тогда
		СтрокаДокумента.БанковскийСчет = Объект.БанковскийСчет;
	КонецЕсли;
	
	#Область БанковскийСчет
	// 6) Определяем банковский счет контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		ЗапросПоискаСчета = Новый Запрос;
		Если ОрганизацияПлательщик(ВидДокумента) Тогда
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПолучательБИК;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СокрЛП(СтрокаДокумента.ПолучательСчет));
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СокрЛП(СтрокаДокумента.ПлательщикСчет));
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
		Если СокрЛП(КППКонтрагента) = "0" Тогда
			КППКонтрагента = "";
		КонецЕсли;
		
		Если ПустаяСтрока(СчетКонтрагента) Тогда
			
			Если НЕ СтрокаДокумента.ЭтоФизическоеЛицо Тогда // У физических лиц может быть указан счет банка-посредника
				СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%).'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'");
				СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
				СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
				СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;				
			КонецЕсли;
			
		Иначе
		
			ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
			ЗапросПоискаСчета.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
			ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
			ИмяКонтрагентаДополнительно = СтрЗаменить(ИмяКонтрагента, "ё", "е");
			ИмяКонтрагентаДополнительно = СтрЗаменить(ИмяКонтрагентаДополнительно, "Ё", "Е");
			ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагентаДополнительно", ИмяКонтрагентаДополнительно);
			ЗапросПоискаСчета.УстановитьПараметр("БИКБанка", БИКСчета);
			
			ЗапросПоискаСчета.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Владелец КАК Владелец,
			|	БанковскиеСчета.Владелец.ИНН КАК ВладелецИНН,
			|	БанковскиеСчета.Владелец.КПП КАК ВладелецКПП,
			|	БанковскиеСчета.Ссылка КАК Ссылка,
			|	БанковскиеСчета.НомерСчета КАК НомерСчета,
			|	БанковскиеСчета.Банк.Код КАК БИК_из_Базы,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Банк.Код = &БИКБанка
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетБИК,
			|	ВЫБОР
			|		КОГДА ВЫБОР
			|				КОГДА БанковскиеСчета.Владелец.КПП = ""0""
			|					ТОГДА """"
			|				ИНАЧЕ БанковскиеСчета.Владелец.КПП
			|			КОНЕЦ = &КППКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетКПП,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетИНН,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагента
			|				ИЛИ БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагентаДополнительно
			|				ИЛИ (ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|				ИЛИ (ВЫРАЗИТЬ(БанковскиеСчета.Владелец.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаДополнительно
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетНаименования
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты
			|	И БанковскиеСчета.НомерСчета = &НомерСчета
			|	И НЕ БанковскиеСчета.ПометкаУдаления
			|	И НЕ БанковскиеСчета.Недействителен
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриоритетИНН,
			|	ПриоритетБИК,
			|	ПриоритетНаименования,
			|	ПриоритетКПП";
			
			Если ЭтоПереводМеждуСчетами Тогда
				ЗапросПоискаСчета.Текст = СтрЗаменить(ЗапросПоискаСчета.Текст,
					"БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты",
					"БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации");
			ИначеЕсли ЭтоПлатежСотруднику Тогда
				ЗапросПоискаСчета.Текст = СтрЗаменить(ЗапросПоискаСчета.Текст,
					"БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты",
					"БанковскиеСчета.Владелец ССЫЛКА Справочник.ФизическиеЛица");
			КонецЕсли;
			
			РезультатЗапросаПоБС = ЗапросПоискаСчета.Выполнить();
			ВыборкаПоиска = РезультатЗапросаПоБС.Выбрать();
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			
			// Нужно обработать следующую ситуацию.
			// У контрагента изменился ИНН, но номер счета остался прежним.
			// Будем в этом случае выдавать предупреждающее сообщение и предлагать создать нового контрагента, если не нашли
			// контрагента с нужным ИНН.
			
			КонтрагентНеНайден = Истина;
			Если ВыборкаПоиска.Следующий() Тогда
				ПроверкаБИКа = Ложь;
				
				// Если в файле указан ИНН контрагента, но мы его не нашли.
				Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 И ВыборкаПоиска.ПриоритетНаименования = 2 Тогда
					
					СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%).'");
					Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
					Иначе
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
					КонецЕсли;
					ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
					СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
					СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
					ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
					
				Иначе
					
					КонтрагентНеНайден = Ложь;
					
					СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
					Контрагент = ВыборкаПоиска.Владелец;
					СтрокаДокумента.КонтрагентНеНайденКартинка = -1;
					
					// Не совпадает БИК в базе и в выписке.
					Если (ВыборкаПоиска.ПриоритетБИК = 2) Тогда
						// Проверим БИК банка. Может не совпадать. Например у разных контрагентов есть разные счета в разных банках,
						// но с одинаковым номером.
						ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
						СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
						
						СтрокаЗамечание = НСтр("ru = 'БИК банка счета контрагента в базе (%БИК_из_Базы%) не совпадает с БИК банка в выписке (%БИК_в_Выписке%).'");
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_из_Базы%", ?(ЗначениеЗаполнено(ВыборкаПоиска.БИК_из_Базы), ВыборкаПоиска.БИК_из_Базы, НСтр("ru = '<пустой>'")));
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_в_Выписке%", ?(ЗначениеЗаполнено(БИКСчета), БИКСчета, НСтр("ru = '<пустой>'")));
						ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
					КонецЕсли;
					
					// Не совпадает ИНН (в частности, когда ИНН не заполнен в ИБ.
					Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 Тогда
						СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%).'");
						Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
							СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
						Иначе
							СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
						КонецЕсли;
						ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
						СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
						ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
						СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
						СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если КонтрагентНеНайден Тогда
				СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%).'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
				
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				
				СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'");
				СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
				СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
				СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
			КонецЕсли;
			
			КоличествоЭлементовВВыборке = КоличествоЭлементовВВыборке(ВыборкаПоиска, ИННКонтрагента, СтрокаДокумента);
			
			Если КоличествоЭлементовВВыборке > 1 Тогда
				// Если ИНН и наименование контрагента совпадают с теми, что указаны в выписке, то не будем выдавать сообщения о
				// нескольких РС.
				СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) одинаковых банковских счетов. Проверьте контрагента и р/счет.'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", КоличествоЭлементовВВыборке);
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				Если ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") ИЛИ Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
					СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
				КонецЕсли;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
				СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область КассаОрганизации
	// Определим кассу организации для операций снятия наличных и взноса наличных на счет организации.
	Если ЭтоСнятиеИлиВзносНаличных И СтрокаДокумента.Касса.Пустая() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|ИТОГИ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
			|ПО
			|	ОБЩИЕ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		
		Если ВыборкаОбщийИтог.Ссылка = 1 Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			СтрокаДокумента.Касса = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область Контрагент
	
	// 7) Определим контрагента.
	ДанныеКонтрагентаПолучены = Ложь;
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДокумента.Контрагент = Контрагент;
		ИначеЕсли НЕ ПустаяСтрока(ИННКонтрагента) ИЛИ СтрокаДокумента.ЭтоФизическоеЛицо Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			ЗапросПоискаКонтрагента = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка КАК Ссылка,
			|	Контрагенты.ИНН КАК ИНН,
			|	Контрагенты.Наименование КАК Наименование,
			|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
			|	ВЫБОР
			|		КОГДА Контрагенты.КПП = ""0""
			|			ТОГДА """"
			|		ИНАЧЕ Контрагенты.КПП
			|	КОНЕЦ КАК КПП,
			|	ВЫБОР
			|		КОГДА ВЫБОР
			|				КОГДА Контрагенты.КПП = ""0""
			|					ТОГДА """"
			|				ИНАЧЕ Контрагенты.КПП
			|			КОНЕЦ = &КППКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетКПП,
			|	ВЫБОР
			|		КОГДА Контрагенты.ИНН = &КонтрагентИНН
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетИНН,
			|	ВЫБОР
			|		КОГДА Контрагенты.Наименование = &ИмяКонтрагента
			|				ИЛИ Контрагенты.Наименование = &ИмяКонтрагентаДополнительно
			|				ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|				ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаДополнительно
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетНаименования,
			|	ВЫБОР
			|		КОГДА Контрагенты.ПометкаУдаления
			|				ИЛИ Контрагенты.Недействителен
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ПриоритетНедействителен
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	ВЫБОР
			|			КОГДА &ЭтоФизическоеЛицо
			|					И &КонтрагентИНН = """"
			|				ТОГДА Контрагенты.Наименование = &ИмяКонтрагента
			|						ИЛИ Контрагенты.Наименование = &ИмяКонтрагентаДополнительно
			|						ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|						ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаДополнительно
			|			ИНАЧЕ Контрагенты.ИНН = &КонтрагентИНН И Контрагенты.КПП = &КППКонтрагента
			|					ИЛИ ВЫБОР
			|						КОГДА Контрагенты.Наименование = &ИмяКонтрагента
			|								ИЛИ Контрагенты.Наименование = &ИмяКонтрагентаДополнительно
			|								ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|								ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагентаДополнительно
			|							ТОГДА ИСТИНА
			|						ИНАЧЕ ЛОЖЬ
			|					КОНЕЦ
			|		КОНЕЦ
			|	И НЕ Контрагенты.ЭтоГруппа
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриоритетИНН,
			|	ПриоритетНаименования,
			|	ПриоритетКПП,
			|	ПриоритетНедействителен");
			
			ЗапросПоискаКонтрагента.УстановитьПараметр("ЭтоФизическоеЛицо", СтрокаДокумента.ЭтоФизическоеЛицо);
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("ИмяКонтрагентаДополнительно", ИмяКонтрагентаДополнительно);
			
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
			
			Если ВыборкаПоиска.Следующий() Тогда
				СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
				
				ИННКонтрагентаВБазе = ВыборкаПоиска.ИНН;
				КППКонтрагентаВБазе = ВыборкаПоиска.КПП;
				
				НаименованиеПолноеКонтрагентаВБазе = ВыборкаПоиска.НаименованиеПолное;
				
				ДанныеКонтрагентаПолучены = Истина;
				
				Если ПустаяСтрока(ВыборкаПоиска.ИНН) И НЕ СтрокаДокумента.ЭтоФизическоеЛицо Тогда
					СтрокаЗамечание = НСтр("ru = 'У контрагента не заполнен ИНН!'");
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
					ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыборкаПоиска.Количество() > 1 Тогда
				СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) контрагентов с одинаковым ИНН.'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", ВыборкаПоиска.Количество());
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
			ИначеЕсли ВыборкаПоиска.Количество() = 0 Тогда
				СтрокаЗамечание = НСтр("ru = 'Не найден контрагент (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяКонтрагента%", ИмяКонтрагента);
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИННКонтрагента%", ИННКонтрагента);
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание, Истина);
				СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, ИНН %ИННКонтрагента%).'");
				СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
				СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИННКонтрагента%", ИННКонтрагента);
				СтрокаДокумента.Контрагент = СтрокаКонтрагент; // БЫЛО РАНЬШЕ - СтрокаСчетКонтрагента;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
			КонецЕсли;
			
		Иначе
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не указан ИНН контрагента.'"), Истина);
			СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, не указан ИНН).'");
			СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
			СтрокаДокумента.Контрагент = СтрокаКонтрагент;
			ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
			СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Если платеж осуществляется сотруднику, подставляем первого подходящего сотрудника по найденному физ лицу
	Если ЭтоПлатежСотруднику И ЗначениеЗаполнено(Контрагент) Тогда
		
		ЗапросПоСотруднику = Новый Запрос;
		ЗапросПоСотруднику.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Сотрудники.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Физлицо = &Физлицо
			|	И НЕ Сотрудники.Недействителен
			|	И НЕ Сотрудники.ПометкаУдаления";
		
		ЗапросПоСотруднику.УстановитьПараметр("Физлицо", Контрагент);
		
		ВыборкаСотрудник = ЗапросПоСотруднику.Выполнить().Выбрать();
		
		Если ВыборкаСотрудник.Следующий() Тогда
			СтрокаДокумента.Контрагент = ВыборкаСотрудник.Ссылка;
			СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.КонтрагентНайден = Истина;
			Контрагент = ВыборкаСотрудник.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим совпадают ли данные контрагента в выписке с данными в информационной базе.
	// Если не совпадают, то будем выводить восклицательный знак.
	Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ДанныеКонтрагентаПолучены И ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			ИННКонтрагентаВБазе = СтрокаДокумента.Контрагент.ИНН;
			КППКонтрагентаВБазе = СтрокаДокумента.Контрагент.КПП;
			Если СокрЛП(КППКонтрагентаВБазе) = "0" Тогда
				КППКонтрагентаВБазе = "";
			КонецЕсли;
			НаименованиеПолноеКонтрагентаВБазе = СтрокаДокумента.Контрагент.НаименованиеПолное;
		КонецЕсли;
		Если ИмяКонтрагента = Неопределено Тогда
			Если ОрганизацияПлательщик(ВидДокумента) Тогда
				ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
				КППКонтрагента = СтрокаДокумента.ПолучательКПП;
				Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
					ИмяКонтрагента = СтрокаДокумента.Получатель1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Получатель;
				КонецЕсли;
			Иначе
				ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
				КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
				Если СтрокаДокумента.Плательщик1 <> "" Тогда
					ИмяКонтрагента = СтрокаДокумента.Плательщик1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Плательщик;
				КонецЕсли;
			КонецЕсли;
			
			Если СокрЛП(КППКонтрагента) = "0" Тогда
				КППКонтрагента = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) И СтрокаДокумента.КонтрагентНеНайденКартинка = -1 Тогда
			Если ИННКонтрагентаВБазе <> ИННКонтрагента
				ИЛИ (КППКонтрагентаВБазе <> КППКонтрагента И ЗначениеЗаполнено(КППКонтрагента))
				ИЛИ ВРег(СокрЛП(НаименованиеПолноеКонтрагентаВБазе)) <> ВРег(СокрЛП(ИмяКонтрагента)) Тогда
				
				СтрокаПроверки = "";
				РеквизитовДляПроверки = 0;
				Если ИННКонтрагентаВБазе <> ИННКонтрагента Тогда
					СтрокаПроверки = НСтр("ru = 'ИНН%'");
					РеквизитовДляПроверки = РеквизитовДляПроверки + 1;
				КонецЕсли;
				Если КППКонтрагентаВБазе <> КППКонтрагента И ЗначениеЗаполнено(КППКонтрагента) Тогда
					СтрокаПроверки = СтрокаПроверки + НСтр("ru = 'КПП%'");
					РеквизитовДляПроверки = РеквизитовДляПроверки + 1;
				КонецЕсли;
				Если ВРег(СокрЛП(НаименованиеПолноеКонтрагентаВБазе)) <> ВРег(СокрЛП(ИмяКонтрагента)) Тогда
					СтрокаПроверки = СтрокаПроверки + НСтр("ru = 'юридическое название%'");
					РеквизитовДляПроверки = РеквизитовДляПроверки + 1;
				КонецЕсли;
				СтрокаПроверки = Лев(СтрокаПроверки, СтрДлина(СтрокаПроверки) - 1);
				
				Если РеквизитовДляПроверки = 2 Тогда
					СтрокаПроверки = СтрЗаменить(СтрокаПроверки, "%", " и "); // Не локализуется
				Иначе
					СтрокаПроверки = СтрЗаменить(СтрокаПроверки, "%", ", "); // Не локализуется
				КонецЕсли;
				
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
				Если РеквизитовДляПроверки = 1 Тогда
					СтрокаЗамечание = НСтр("ru = 'Проверьте %СтрокаПроверки% контрагента.'");
				Иначе
					СтрокаЗамечание = НСтр("ru = 'Проверьте реквизиты контрагента: %СтрокаПроверки%.'");
				КонецЕсли;
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СтрокаПроверки%", СтрокаПроверки);
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Для новых контрагентов не будем выводить информацию о том, что не найден РС или договор.
		СтрокаДокумента.ОписаниеОшибок = УдалитьДанныеИзОписанияОшибкиНаСервере(НСтр("ru = 'Не найден счет контрагента'"), СтрокаДокумента.ОписаниеОшибок, СтрокаДокумента);
	КонецЕсли;
	
	#КонецОбласти
	
	ВидОперацииОпределен = Ложь;
	
	// 14) Поищем платежное поручение, заказ покупателя и счет на оплату.
	//     Ищем только точное совпадение суммы, вхождение номера и года.
	Если Не ДокументНайден Тогда
		// Поищем платежное поручение и заполним все по нему, если найдем.
		НашлиПП = Ложь;
		Если Исходящий Тогда
			СтруктураВозвратаПП = ОпределитьПлатежноеПоручение(СтрокаДокумента);
			НашлиПП = СтруктураВозвратаПП.НашлиПП;
		КонецЕсли;
		
		Если Объект.АвтоматическиПодставлятьДокументы Тогда
			
			// Поищем заказ или счет на оплату. Если найдем, то договор возьмем оттуда.
			ДоговорВЗаказеСчете = ОпределитьЗаказИСчетНаСервере(СтрокаДокумента, Объект);
			// Поищем расчетный документ. Если договор уже определили, то документы ищем с отбором по договору.
			// Более приоритетны расчетные документы, которые связаны с найденным заказом.
			Если ЗначениеЗаполнено(ДоговорВЗаказеСчете) Тогда
				ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, Объект, ДоговорВЗаказеСчете);
			Иначе
				ДоговорВЗаказеСчете = ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, Объект);
			КонецЕсли;
			
			// Если заказ и счет на оплату определить не удалось, то поищем их в связанных документах.
			// Если они там есть в единственном экземпляре, то подставим их.
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов)
				И НЕ ЗначениеЗаполнено(СтрокаДокумента.Заказ)
				И НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
				СчетНаОплату = УчетРасчетовСКонтрагентами.ПолучитьСчетНаОплатуПоОснованию(СтрокаДокумента.ДокументРасчетов, Истина);
				СчетНаОплатуПоставщика = УчетРасчетовСКонтрагентами.ПолучитьСчетНаОплатуПоОснованию(СтрокаДокумента.ДокументРасчетов, Ложь);
				Если ЗначениеЗаполнено(СчетНаОплату) И НЕ ЗначениеЗаполнено(СчетНаОплатуПоставщика) Тогда
					СтрокаДокумента.СчетНаОплату = СчетНаОплату;
				ИначеЕсли НЕ ЗначениеЗаполнено(СчетНаОплату) И ЗначениеЗаполнено(СчетНаОплатуПоставщика) Тогда
					СтрокаДокумента.СчетНаОплату = СчетНаОплатуПоставщика;
				КонецЕсли;
			КонецЕсли;
			
			Если НашлиПП Тогда
				
				Если СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа.Количество() = 1 Тогда
					
					// Документ расчетов
					Если ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Документ) Тогда
						СтрокаДокумента.ДокументРасчетов = СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Документ;
					КонецЕсли;
					
					// Заказ
					Если ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Заказ) Тогда
						СтрокаДокумента.Заказ = СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].Заказ;
					КонецЕсли;
					
					// Счет на оплату
					Если ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].СчетНаОплату) Тогда
						СтрокаДокумента.СчетНаОплату = СтрокаДокумента.ПлатежноеПоручение.РасшифровкаПлатежа[0].СчетНаОплату;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
					
					Если ТипЗнч(СтруктураВозвратаПП.ДокументОснованиеПП) = Тип("ДокументСсылка.ЗаказПоставщику")
						И ЗначениеЗаполнено(СтруктураВозвратаПП.ДокументОснованиеПП) Тогда
						СтрокаДокумента.Заказ = СтруктураВозвратаПП.ДокументОснованиеПП;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаДокумента.Договор) И ЗначениеЗаполнено(СтруктураВозвратаПП.Договор) Тогда
						СтрокаДокумента.Договор = СтруктураВозвратаПП.Договор;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
					
					Если ТипЗнч(СтруктураВозвратаПП.ДокументОснованиеПП) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") 
						И ЗначениеЗаполнено(СтруктураВозвратаПП.ДокументОснованиеПП) Тогда
						
						Если СтруктураВозвратаПП.ДокументОснованиеПП.Контрагент = СтрокаДокумента.Контрагент Тогда
							СтрокаДокумента.СчетНаОплату = СтруктураВозвратаПП.ДокументОснованиеПП;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Попробуем определить вид операции по данным в ПП.
				Если СтруктураВозвратаПП.ВидОперацииПП <> Неопределено Тогда
					
					ВидОперацииОпределен = Истина;
					
					Если СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Прочее Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.Подотчетнику Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику;
					ИначеЕсли СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам Тогда
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам;
					Иначе
						СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
						ВидОперацииОпределен = Ложь;
					КонецЕсли;
					
					Если ВидОперацииОпределен Тогда
						// Удалим предупреждение о проверке вида операции.
						СтрокаДокумента.ОписаниеОшибок = УдалитьДанныеИзОписанияОшибкиНаСервере(НСтр("ru = 'Проверьте операцию'"), СтрокаДокумента.ОписаниеОшибок, СтрокаДокумента);
						СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
					КонецЕсли;
					
				КонецЕсли;
				
				// Корреспонденция и статья ДДС
				Если СтруктураВозвратаПП.КорреспонденцияПП <> Неопределено Тогда
					СтрокаДокумента.Корреспонденция = СтруктураВозвратаПП.КорреспонденцияПП;
				КонецЕсли;
				Если СтруктураВозвратаПП.СтатьяДДС_ПП <> Неопределено Тогда
					СтрокаДокумента.СтатьяДДС = СтруктураВозвратаПП.СтатьяДДС_ПП;
				КонецЕсли;
				
			ИначеЕсли Не ДоговорВЗаказеСчете.Пустая() Тогда
				СтрокаДокумента.Договор = ДоговорВЗаказеСчете;
			КонецЕсли; // Если НашлиПП Тогда
		Иначе
			ДоговорВЗаказеСчете = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		// Заполним договор, вид операции, статью ДДС и корреспонденцию по данным из предыдущих документов (загрузок).
		Если Не НашлиПП И Объект.АнализироватьИсториюВыбораЗначенийРеквизитов
			И АнализироватьИсторию И (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
			И ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			
			ВыполнитьАнализИсторииНаСервере(СтрокаДокумента, Объект, ДоговорВЗаказеСчете, ПараметрыВыделенияКолонок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Исходящий Тогда
		СтрокаДокумента.ВидОперацииСписание = СтрокаДокумента.ВидОперации;
	Иначе
		СтрокаДокумента.ВидОперацииПоступление = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	// 8) Определим договор контрагента
	Если СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Налоги
	И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги
	И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
	И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику
	И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам
	И НЕ ЗначениеЗаполнено(СтрокаДокумента.Договор) Тогда
	
		СтруктураДанныхПоискаДоговора = НайтиДоговорВВидеСтруктуры(СтрокаДокумента.Контрагент, Объект.Организация, СтрокаДокумента.ВидОперации);
		СтрокаДокумента.Договор = СтруктураДанныхПоискаДоговора.Договор;
		// Если контрагент новый и будет создан новый, то не будем сообщать, что не найден договор и РС.
		Если СтрНайти(СтрокаДокумента.Договор, НСтр("ru = 'Не найден'")) > 0 И ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка") Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не найден договор контрагента.'"));
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
			СтрокаДокумента.ДоговорНеНайденКартинка = 0;
		КонецЕсли;
		Если СтруктураДанныхПоискаДоговора.КоличествоДоговоров > 1
			И НЕ ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение)
			И НЕ ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
			СтрокаЗамечания = НСтр("ru = 'У контрагента несколько договоров (%КоличествоДоговоров%).'");
			СтрокаЗамечания = СтрЗаменить(СтрокаЗамечания, "%КоличествоДоговоров%", СтруктураДанныхПоискаДоговора.КоличествоДоговоров);
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечания);
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
			СтрокаДокумента.ДоговорНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
		
		Если НашлиПП = Неопределено Тогда
			НашлиПП = Ложь;
		КонецЕсли;
		
		Если ДокументНайден Тогда
			СтрокаДокумента.Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДокумента.Документ, "ДоговорКредитаЗайма");
		ИначеЕсли НашлиПП Тогда
			СтрокаДокумента.Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДокумента.ПлатежноеПоручение, "ДоговорКредитаЗайма");
		Иначе
			СтрокаДокумента.Договор = Документы.ДоговорКредитаИЗайма.ПустаяСсылка();
			СтрокаДокумента.ДоговорНеНайденКартинка = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	// 9) Определим Статью ДДС по умолчанию.
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		
		Если ЭтоКомиссия Тогда
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
			ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
			
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			
		ИначеЕсли Исходящий Тогда
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСИсходящий;
		Иначе
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСВходящий;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
			СтрокаДокумента.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперации(СтрокаДокумента.ВидОперации, СтрокаДокумента.СтатьяДДС);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПроект(СтрокаДокумента, Документ, СтруктураЗначенийИзСоответствия);
	ЗаполнитьПодразделение(СтрокаДокумента, Документ, СтруктураЗначенийИзСоответствия);
	
	// 11) Определим очередность платежа.
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> "" И НЕ ЕстьНеЦифрыНаСервере(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
	
	// 12) Определим ПоказательДатыДок (для Платежного поручения исходящего при перечислении налогов).
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ПоказательДаты) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДатыДок, СтрокаДокумента.ПоказательДаты);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.ПоказательДатыДок = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// 13) ДатаСписано и ДатаПоступило, ДатаПроведения.
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = ПустаяДата;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = ПустаяДата;
	КонецЕсли;
	
	// Если НазначениеПлатежа пустое, формируем его из НазначениеПлатежа1...НазначениеПлатежа6.
	Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
		СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
		Для Сч = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + Сч]) Тогда
				Прервать;
			КонецЕсли;
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + Сч];
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Корреспонденция) Тогда
			СтрокаДокумента.Корреспонденция = СтруктураЗначенийИзСоответствия.Корреспонденция;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.КонтрагентИсходный = СтрокаДокумента.Контрагент;
	
	Если СтрокаДокумента.ВидОперации = ВидОперацииСписаниеНаличных ИЛИ СтрокаДокумента.ВидОперации = ВидОперацииВзносНаличных Тогда
		СтрокаДокумента.СчетКонтрагента = "";
	КонецЕсли;
	
	СтрокаДокумента.СчетКонтрагентаИсходный = СтрокаДокумента.СчетКонтрагента;
	
	// Способ зачета
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		УстановитьСпособЗачетаПоДокументу(СтрокаДокумента);
	Иначе
		Если Объект.СпособЗачета = СпособЗачетаВручную Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		ИначеЕсли Объект.СпособЗачета = СпособЗачетаАвтоматически
			И ЭтоОперацияГдеВозможныАвтоРасчеты(СтрокаДокумента.ВидОперации) Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаАвтоматически;
			ОчиститьИнформациюОДокументахНаСервере(СтрокаДокумента);
		Иначе
			УстановитьСпособЗачетаПоУмолчанию(СтрокаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	// Вид налога по КБК
	Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ПоказательКБК) И НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидНалога) Тогда
			ЗаполнитьВидНалогаПоКБК(СтрокаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	// Код вида дохода
	СтрокаДокумента.КодВидаДохода = СтрокаДокумента.КодНазПлатежа;
	
КонецПроцедуры

Функция КоличествоЭлементовВВыборке(Знач ВыборкаПоиска, Знач ИННКонтрагента, Знач СтрокаДокумента)
	
	Перем КоличествоЭлементовВВыборке;
	
	// Если ИНН не указан, то в выборку попадут все контрагенты, у которых есть счет с нужным номером.
	// Если ИНН указан, то нужно сообщать только количестве счетов у контрагентов с ИНН как в выписке из банка.
	Если НЕ ПустаяСтрока(ИННКонтрагента) Тогда
		КоличествоЭлементовВВыборке = 0;
		ВыборкаПоиска.Сбросить();
		Пока ВыборкаПоиска.Следующий() Цикл
			Если ВыборкаПоиска.ВладелецИНН = ИННКонтрагента
				И ВыборкаПоиска.БИК_из_Базы	= СтрокаДокумента.БанковскийСчет.Банк.Код Тогда
				КоличествоЭлементовВВыборке = КоличествоЭлементовВВыборке + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КоличествоЭлементовВВыборке = ВыборкаПоиска.Количество();
	КонецЕсли;
	
	Возврат КоличествоЭлементовВВыборке;

КонецФункции // РаспознатьДанныеВСтрокеДокумента()

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства, ИмпортНеПустые)
	
	Если ИмпортНеПустые[0][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			СтрокаЗамечание = НСтр("ru = 'Не заполнено ""%ИмяСвойства%"".'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяСвойства%", ИмяСвойства);
			ДобавитьЗамечание(СтрокаИмпорта, 3, СтрокаЗамечание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаПустоеЗначениеИмпорта()

// Процедура формирует соответствие непустых при загрузке.
//
Процедура СформироватьСоответствияНеПустыхПриИмпорте(ИмпортНеПустые, ИмпортНеПустыеПлатежноеПоручение, ИмпортНеПустыеПлатежноеПоручениеБюджет)
	
	ИмпортНеПустыеПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
		"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН");
	
	// По наличию статуса составителя определяется что платеж - налоговый.
	ИмпортНеПустыеПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
		"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН,"
	  + "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,"
	  + "ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа");
	
	ИмпортНеПустые = Новый Массив;
	ИмпортНеПустые.Добавить(ИмпортНеПустыеПлатежноеПоручение);
	ИмпортНеПустые.Добавить(ИмпортНеПустыеПлатежноеПоручениеБюджет);
	
КонецПроцедуры

Процедура ОбработатьОплатуОтФизЛицЧерезБанк(Объект, Документ, СтрокаДокумента)

	// Если счет плательщика принадлежит нашей организации, дальнейшая обработка не имеет смысла
	НомерАктивногоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "НомерСчета");
	Если НомерАктивногоСчета <> Неопределено И Документ.ПлательщикСчет = СокрЛП(НомерАктивногоСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Стороны = Новый Массив;
	Стороны.Добавить("Плательщик");// Порядок важен для УплатаНалогаТретьегоЛица
	Стороны.Добавить("Получатель");
	
	Для Каждого Сторона Из Стороны Цикл
		
		Счет            = Документ[Сторона + "Счет"];
		ИНН             = Документ[Сторона + "ИНН"];
		ДругиеРеквизиты = Документ[Сторона + "Реквизиты"];
		
		// Разберем наименование
		Наименование = "";
		Если ДругиеРеквизиты.Свойство("Наименование") Тогда
			Наименование = ДругиеРеквизиты.Наименование;
		КонецЕсли;
			
		ИдентификаторыФизическогоЛица = ИдентификаторыФизическогоЛицаИзНаименования(Наименование, ИНН, Счет);
		
		Если ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо
			И ЗначениеЗаполнено(ИдентификаторыФизическогоЛица.Наименование) Тогда
			
			Если Документ[Сторона + "Реквизиты"].Свойство("Наименование") Тогда
				Документ[Сторона + "Реквизиты"].Наименование = ИдентификаторыФизическогоЛица.Наименование;
			КонецЕсли;
			
			Если Документ[Сторона + "Реквизиты"].Свойство("НаименованиеРасширенное") Тогда
				Документ[Сторона + "Реквизиты"].НаименованиеРасширенное = ИдентификаторыФизическогоЛица.Наименование;
			КонецЕсли;
			
			Если НЕ ИдентификаторыФизическогоЛица.ВалидныйИННФизическогоЛица Тогда
				
				Документ[Сторона + "ИНН"] = "";
				
				Если Документ[Сторона + "Реквизиты"].Свойство("РасчСчет") Тогда
					Документ[Сторона + "Реквизиты"].РасчСчет = "";
				КонецЕсли;
				
				Если Документ[Сторона + "Реквизиты"].Свойство("КПП") Тогда
					Документ[Сторона + "Реквизиты"].КПП = "";
				КонецЕсли;
				
				Документ[Сторона + "Счет"] = "";
				
			КонецЕсли;
			
			СтрокаДокумента.ЭтоФизическоеЛицо = Истина;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДанныеИзСоответствияНазначенияПлатежа(СтрокаДокумента, ИскатьВСправочникеСоответствий)
	
	СтруктураЗначенийИзСоответствия = Новый Структура;
	СтруктураЗначенийИзСоответствия.Вставить("СоответствиеНайдено", Ложь);
	СтруктураЗначенийИзСоответствия.Вставить("ВидОперацииПоступленияНаСчет");
	СтруктураЗначенийИзСоответствия.Вставить("ВидОперацииРасходаСоСчета");
	СтруктураЗначенийИзСоответствия.Вставить("СтатьяДДС");
	СтруктураЗначенийИзСоответствия.Вставить("Корреспонденция");
	СтруктураЗначенийИзСоответствия.Вставить("Проект");
	СтруктураЗначенийИзСоответствия.Вставить("Подразделение");
	
	Если ИскатьВСправочникеСоответствий Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.ВидОперацииПоступленияНаСчет,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.ВидОперацииРасходаСоСчета,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.СтатьяДДС,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.Корреспонденция,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.Проект,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.Подразделение,
			|	ВЫРАЗИТЬ(СоответствияНазначенийПлатежаИРеквизитовПлатежа.ФразаДляПоискаВНазначенииПлатежа КАК СТРОКА(1024)) КАК Фраза
			|ИЗ
			|	Справочник.СоответствияНазначенийПлатежаИРеквизитовПлатежа КАК СоответствияНазначенийПлатежаИРеквизитовПлатежа
			|ГДЕ
			|	НЕ СоответствияНазначенийПлатежаИРеквизитовПлатежа.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(Выборка.Фраза)) > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураЗначенийИзСоответствия, Выборка);
				СтруктураЗначенийИзСоответствия.СоответствиеНайдено = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураЗначенийИзСоответствия;
	
КонецФункции

// Процедура добавляет замечание.
//
Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания, ВНачало = Ложь)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания, ВНачало);
	СтруктураДокумента.НомерКартинки = 1;
	УстановитьНомерКартинкиДляПодвалаНаСервере(СтруктураДокумента);
	
КонецПроцедуры // ДобавитьЗамечание()

Функция ЕстьНеЦифрыНаСервере(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Сч, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьНеЦифры()

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	ПозицияТочки = СтрНайти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	ПозицияТочки = СтрНайти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	Если СтрДлина(ГодДаты) > 4 Тогда
		ГодДаты = Лев(ГодДаты, 4);
	КонецЕсли;
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
	Исключение
		Возврат НСтр("ru = 'Не удалось преобразовать строку в дату'");
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Функция ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет)
	
	Возврат БалансовыйСчет = "20202" // "Касса кредитных организаций"
		Или БалансовыйСчет = "20208"; // "Денежные средства в банкоматах и платежных терминалах"
	
КонецФункции

Функция БалансовыйСчет(НомерСчета)
	
	Возврат Лев(НомерСчета, 5);
	
КонецФункции

Функция ЭтоКомиссияБанка(Знач СтрокаДокумента, Знач Исходящий)
	
	СчетКонтрагентаДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
	ВидОплаты = ВидОплатыЧислом(СтрокаДокумента.ВидОплаты);
	Операция  = ВРег(СтрЗаменить(СтрокаДокумента.Операция, " ", ""));
	ЭтоКомиссияБанка = СтрокаДокумента.ПолучательБИК = СтрокаДокумента.ПлательщикБИК
		И (Операция = "МЕМОРИАЛЬНЫЙОРДЕР" ИЛИ Операция = "БАНКОВСКИЙОРДЕР" ИЛИ Операция = "ВНУТРЕННИЙПЕРЕВОД")
		ИЛИ ВидОплаты > 1 И ВидОплаты <> 3;
	
	// последняя проверка по корр.счету
	Если НЕ ЭтоКомиссияБанка Тогда
		БалансовыйСчет = БалансовыйСчет(СчетКонтрагентаДляПоиска);
		Если БалансовыйСчет    = "70601" // доходы (банка)
			ИЛИ БалансовыйСчет = "61301" // Доходы (банка) будущих периодов по кредитным операциям
			ИЛИ БалансовыйСчет = "61304" // Доходы (банка) будущих периодов по другим операциям
		Тогда
			ЭтоКомиссияБанка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоКомиссияБанка;
	
КонецФункции

Функция ЕстьДоговорЭквайринга(КонтрагентПоБанковскомуСчету)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ЭтоДоговорЭквайринга";
	
	Запрос.УстановитьПараметр("Владелец", КонтрагентПоБанковскомуСчету);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЕстьДоговорКредита(КонтрагентПоБанковскомуСчету)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ЭтоДоговорКредита";
	
	Запрос.УстановитьПараметр("Владелец", КонтрагентПоБанковскомуСчету);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия)
	
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		Результат = ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	ЕстьКлючевоеСлово = СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'СЧЕТ'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'ЗАКАЗ'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'СЧЁТ'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'НАКЛ'")) > 0;
		
	ЕстьСловаОРасчетномОбслуживании = СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р/О'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчетное обслуживание'"))) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчетные услуги'"))) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчётные услуги'"))) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р\О'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р\У'")) > 0
		ИЛИ СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчётное обслуживание'"))) > 0;
		
	ЕслиСловоВозврат = СтрНайти(СтрокаДокумента.НазначениеПлатежа, НСтр("ru = 'Возврат'")) > 0;
		
	Если НЕ ЕстьКлючевоеСлово ИЛИ ЕстьСловаОРасчетномОбслуживании ИЛИ ЕслиСловоВозврат Тогда
		
		СтрокаДокумента.ВидОперацииНеНайденКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Проверьте операцию.'");
		ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
		ПараметрыВыделенияКолонок.ВыделитьКолонкуВидОперации = Истина;
		
	Иначе
		
		СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
		
	КонецЕсли;
	
	Если СтрокаДокумента.Исходящий Тогда
		Возврат Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
	Иначе
		Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
	КонецЕсли;
	
КонецФункции

Функция ОрганизацияПлательщик(ВидДокумента)
	
	Если ВидДокумента = "ПоступлениеНаСчет" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ОрганизацияПлательщик()

Функция УдалитьДанныеИзОписанияОшибкиНаСервере(ТекстУдаления, Знач ОписаниеОшибок, ДанныеСтроки)

	НовоеОписаниеОшибок = "";
	
	СимволТекстаУдаления = СтрНайти(ОписаниеОшибок, ТекстУдаления);
	Если СимволТекстаУдаления = 0 Тогда
		НовоеОписаниеОшибок = ОписаниеОшибок;
	Иначе
		НовоеОписаниеОшибок = Лев(ОписаниеОшибок, СимволТекстаУдаления - 1);
		
		ДанныеСправаОтТекстаУдаления = Сред(ОписаниеОшибок, СимволТекстаУдаления + 1);
		СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
		Если СимволТочки = 0 Тогда
			СимволТочкиИСкобки = СтрНайти(ДанныеСправаОтТекстаУдаления, ").");
		КонецЕсли;
		Если СимволТочки = 0 Тогда
			СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, ".");
		КонецЕсли;
		Если СимволТочки <> 0 Тогда
			НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволТочки + 1);
		Иначе
			СимволВосклицательногоЗнака = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
			Если СимволВосклицательногоЗнака <> 0 Тогда
				НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволВосклицательногоЗнака + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовоеОписаниеОшибок;

КонецФункции // УдалитьИзОписанияОшибки()

Функция ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, Объект, ДоговорВЗаказеСчете = Неопределено)
	
	Если (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
		И ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
		И СтрокаДокумента.Контрагент.ВестиРасчетыПоДокументам
		Тогда
		
		// Для сценария, когда заполнен заказ, в результат запроса не попадают те документы, в которых заказ заполнен и он не
		// равен заказу в параметре &Заказ.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетыСПокупателямиОстатки.Документ КАК ДокументРасчетов,
			|	РасчетыСПокупателямиОстатки.СуммаОстаток,
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток,
			|	РасчетыСПокупателямиОстатки.Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Заказ,
			|	РасчетыСПокупателямиОстатки.Договор,
			|	РасчетыСПокупателямиОстатки.Документ.Номер КАК Номер,
			|	РасчетыСПокупателямиОстатки.Документ.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	РегистрНакопления.РасчетыСПокупателями.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
			|ГДЕ
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток = &Сумма
			|	И НЕ &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПокупателямиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетыСПоставщикамиОстатки.Документ,
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток,
			|	РасчетыСПоставщикамиОстатки.Документ.НомерВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Документ.ДатаВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Заказ,
			|	РасчетыСПоставщикамиОстатки.Договор,
			|	РасчетыСПоставщикамиОстатки.Документ.Номер,
			|	РасчетыСПоставщикамиОстатки.Документ.Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки
			|ГДЕ
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток = &Сумма
			|	И &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПоставщикамиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	ДокументРасчетов УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасчетыСПокупателямиОстатки.Документ КАК ДокументРасчетов,
			|	РасчетыСПокупателямиОстатки.СуммаОстаток,
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток,
			|	РасчетыСПокупателямиОстатки.Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Заказ,
			|	РасчетыСПокупателямиОстатки.Договор,
			|	РасчетыСПокупателямиОстатки.Документ.Номер КАК Номер,
			|	РасчетыСПокупателямиОстатки.Документ.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	РегистрНакопления.РасчетыСПокупателями.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
			|ГДЕ
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток > &Сумма
			|	И НЕ &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПокупателямиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетыСПоставщикамиОстатки.Документ,
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток,
			|	РасчетыСПоставщикамиОстатки.Документ.НомерВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Документ.ДатаВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Заказ,
			|	РасчетыСПоставщикамиОстатки.Договор,
			|	РасчетыСПоставщикамиОстатки.Документ.Номер,
			|	РасчетыСПоставщикамиОстатки.Документ.Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки
			|ГДЕ
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток > &Сумма
			|	И &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПоставщикамиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	ДокументРасчетов УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Сумма", СтрокаДокумента.СуммаДокумента);
		Запрос.УстановитьПараметр("Исходящий", СтрокаДокумента.Исходящий);
		Запрос.УстановитьПараметр("Заказ", СтрокаДокумента.Заказ);
		Запрос.УстановитьПараметр("ЗаказЗаполнен", ЗначениеЗаполнено(СтрокаДокумента.Заказ));
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		РезультатЗапроса = МассивРезультатов[0];
		Если Не РезультатЗапроса.Пустой() Тогда
		
			ВыборкаДокументовРасчетов = РезультатЗапроса.Выбрать();
			
			// Поищем номер в основании платежа.
			// Нужно учесть номер и год документа, а также вид документа и флаги учета взаиморасчетов, которые установлены в договоре.
			ДокументНайденныйПоНомеру = Неопределено;
			
			Пока ВыборкаДокументовРасчетов.Следующий() Цикл
				// Сценарий, когда дата документа > 2011.01.01.
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументовРасчетов.Номер, Истина, Истина);
				
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаДокументовРасчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.ДатаВходящегоДокумента) Тогда
					ДатаДляПоиска = ВыборкаДокументовРасчетов.ДатаВходящегоДокумента;
				Иначе
					ДатаДляПоиска = ВыборкаДокументовРасчетов.Дата;
				КонецЕсли;
				
				Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0
					ИЛИ СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0
					ИЛИ (ЗначениеЗаполнено(СтрокаДокумента.Заказ) И ВыборкаДокументовРасчетов.Приоритет = 1) Тогда
					
					ДокументНайденныйПоНомеру = ВыборкаДокументовРасчетов.ДокументРасчетов;
					
					НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
					
					Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, НомерГода) > 0 Тогда // Поищем год.
						
						СтрокаДокумента.ДокументРасчетов = ВыборкаДокументовРасчетов.ДокументРасчетов;
						СтрокаДокумента.ПризнакАванса = Ложь;
						
						ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
						
						Возврат ДоговорВДокументе;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ДокументНайденныйПоНомеру <> Неопределено Тогда
				СтрокаДокумента.ДокументРасчетов = ДокументНайденныйПоНомеру;
				СтрокаДокумента.ПризнакАванса = Ложь;
				
				ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
				
				Возврат ДоговорВДокументе;
			КонецЕсли;
			
		КонецЕсли;
		
		// Во вторую очередь обработаем ситуацию, когда с клиентом оформлен только один не оплаченный заказ или счет.
		// Если сумма этого документа > суммы платежа, то выберем этот документ.
		// Документ будет выбран, если в назначении нет информации о заказе или счете.
		РезультатЗапроса = МассивРезультатов[1];
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДокументовРасчетов = РезультатЗапроса.Выбрать();
			Если ВыборкаДокументовРасчетов.Количество() = 1 Тогда
				ВыборкаДокументовРасчетов.Следующий();
				
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументовРасчетов.Номер, Истина, Истина);
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаДокументовРасчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если (СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0
					ИЛИ СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0)
					ИЛИ (ЗначениеЗаполнено(СтрокаДокумента.Заказ) И ВыборкаДокументовРасчетов.Приоритет = 1) Тогда
				
					СтрокаДокумента.ДокументРасчетов = ВыборкаДокументовРасчетов.ДокументРасчетов;
					СтрокаДокумента.ПризнакАванса = Ложь;
					
					ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
					
					Возврат ДоговорВДокументе;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьСтатьюДДСПоВидуОперации(ВидОперации, СтатьяДДС)
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьЗаказИСчетНаСервере(СтрокаДокумента, Объект)
	
	НашлиЗаказ = Ложь;
	НашлиСчет = Ложь;
	
	ДоговорЗаказа = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ДоговорСчета = ДоговорЗаказа;
	
	Если (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
		И ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК Документ,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК Оплачено,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК НеОплачено,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Дата КАК Дата,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Номер КАК Номер,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор КАК Договор
			|ИЗ
			|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
			|			,
			|			,
			|			,
			|			Организация = &Организация
			|				И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
			|ГДЕ
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот = &Сумма
			|	И ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.ЗаказПоставщику)
			|					ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.СчетНаОплатуПоставщика)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ = &Исходящий
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК Документ,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК Оплачено,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК НеОплачено,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Дата КАК Дата,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Номер КАК Номер,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор КАК Договор
			|ИЗ
			|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
			|			,
			|			,
			|			,
			|			Организация = &Организация
			|				И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.ЗаказПоставщику)
			|					ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.СчетНаОплатуПоставщика)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ = &Исходящий
			|	И ВЫБОР
			|			КОГДА ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Кратность, 0) = 0
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ (ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) * ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Курс * &КратностьОплаты / ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Кратность * &КурсОплаты > &Сумма
			|		КОНЕЦ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказПокупателя.Ссылка,
			|	ЗаказПокупателя.СуммаДокумента,
			|	ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) + ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0),
			|	ЗаказПокупателя.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0),
			|	ЗаказПокупателя.Дата,
			|	ЗаказПокупателя.Номер,
			|	"""",
			|	"""",
			|	ЗаказПокупателя.Договор
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
			|				,
			|				,
			|				,
			|				Организация = &Организация
			|					И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
			|		ПО (ОплатаСчетовИЗаказовОбороты.СчетНаОплату = ЗаказПокупателя.Ссылка)
			|			И (ОплатаСчетовИЗаказовОбороты.СуммаОборот = 0)
			|ГДЕ
			|	ЗаказПокупателя.Проведен
			|	И ЗаказПокупателя.Контрагент = &Контрагент
			|	И НЕ ЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
			|	И НЕ &Исходящий
			|	И ВЫБОР
			|			КОГДА ЕСТЬNULL(ЗаказПокупателя.Кратность, 0) = 0
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ (ЗаказПокупателя.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0)) * ЗаказПокупателя.Курс * &КратностьОплаты / (ЗаказПокупателя.Кратность * &КурсОплаты) > &Сумма
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Объект.Организация));
		Запрос.УстановитьПараметр("Сумма", СтрокаДокумента.СуммаДокумента);
		Запрос.УстановитьПараметр("Исходящий", СтрокаДокумента.Исходящий);
	
		СтруктураКурсВалюта = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтрокаДокумента.ДатаДок, Новый Структура("Валюта", Объект.БанковскийСчет.ВалютаДенежныхСредств));
		Запрос.УстановитьПараметр("КурсОплаты", ?(СтруктураКурсВалюта.Курс = 0, 1, СтруктураКурсВалюта.Курс));
		Запрос.УстановитьПараметр("КратностьОплаты", ?(СтруктураКурсВалюта.Кратность = 0, 1, СтруктураКурсВалюта.Кратность));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Сначала обработаем документы, которые точно совпадают по сумме.
		РезультатЗапроса = МассивРезультатов[0];
		Если Не РезультатЗапроса.Пустой() Тогда
		
			ВыборкаЗаказовИСчетов = РезультатЗапроса.Выбрать();
			
			// Поищем номер в основании платежа.
			// Нужно учесть номер и год документа, а также вид документа и флаги учета взаиморасчетов, которые установлены в договоре.
			
			ДоговорЗаказаНайденныйПоНомеру = Неопределено;
			ДоговорСчетаНайденныйПоНомеру = Неопределено;
			ЗаказНайденныйПоНомеру = Неопределено;
			СчетНайденныйПоНомеру = Неопределено;
			
			Пока ВыборкаЗаказовИСчетов.Следующий() Цикл
				// Сценарий, когда дата документа > 2011.01.01.
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаказовИСчетов.Номер, Истина, Истина);
				НомерСПрефиксом = СокрЛП(ВыборкаЗаказовИСчетов.Номер);
				
				Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику"))
					ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")))
					И ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику"))
					ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")))
					И ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.ДатаВходящегоДокумента) Тогда
					ДатаДляПоиска = ВыборкаЗаказовИСчетов.ДатаВходящегоДокумента;
				Иначе
					ДатаДляПоиска = ВыборкаЗаказовИСчетов.Дата;
				КонецЕсли;
				
				Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерСПрефиксом) > 0
					Или СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерСПрефиксом) > 0
					Или СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0
					Или СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0 Тогда
					
					НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
					
					Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, НомерГода) > 0 Тогда // Поищем год.
						// для заполнения информации об основании.
						Если Не НашлиЗаказ И (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя"))
							ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							СтрокаДокумента.Заказ = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказа = ВыборкаЗаказовИСчетов.Договор;
							НашлиЗаказ = Истина;
						// будет нагляднее, если будем их выводить.
						ИначеЕсли Не НашлиСчет И (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплату"))
							ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
							СтрокаДокумента.СчетНаОплату = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчета = ВыборкаЗаказовИСчетов.Договор;
							НашлиСчет = Истина;
						КонецЕсли;
						Если НашлиЗаказ И НашлиСчет Тогда
							Прервать;
						КонецЕсли;
						
					Иначе
						
						Если (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя"))
							ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							ЗаказНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказаНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Договор;
						ИначеЕсли (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплату"))
							ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
							СчетНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчетаНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Договор;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Не НашлиЗаказ И Не НашлиСчет Тогда
				Если ЗаказНайденныйПоНомеру <> Неопределено Тогда
					СтрокаДокумента.Заказ = ЗаказНайденныйПоНомеру;
					ДоговорЗаказа = ДоговорЗаказаНайденныйПоНомеру;
					НашлиЗаказ = Истина;
				ИначеЕсли СчетНайденныйПоНомеру <> Неопределено Тогда
					СтрокаДокумента.СчетНаОплату = СчетНайденныйПоНомеру;
					ДоговорСчета = ДоговорСчетаНайденныйПоНомеру;
					НашлиСчет = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Во вторую очередь обработаем ситуацию, когда с клиентом оформлен только один не оплаченный заказ или счет.
		// Если сумма этого документа > суммы платежа, то выберем этот документ.
		// Документ будет выбран, если в назначении нет информации о заказе или счете.
		Если Не НашлиЗаказ И Не НашлиСчет Тогда
			
			РезультатЗапроса = МассивРезультатов[1];
			Если Не РезультатЗапроса.Пустой() Тогда
				
				ВыборкаЗаказовИСчетов = РезультатЗапроса.Выбрать();
				Если ВыборкаЗаказовИСчетов.Количество() = 1 Тогда
					ВыборкаЗаказовИСчетов.Следующий();
					
					НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаказовИСчетов.Номер, Истина, Истина);
					Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику"))
						ИЛИ (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")))
						И ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента) Тогда
						НомерДляПоиска = СокрЛП(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента);
					Иначе
						НомерДляПоиска = НомерНаПечать;
					КонецЕсли;
					
					Если (СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0
						ИЛИ СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0) Тогда
						
						Если ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя")
							ИЛИ ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
							СтрокаДокумента.Заказ = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказа = ВыборкаЗаказовИСчетов.Договор;
							НашлиЗаказ = Истина;
						Иначе // Это счет на оплату или счет на оплату от поставщика.
							СтрокаДокумента.СчетНаОплату = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчета = ВыборкаЗаказовИСчетов.Договор;
							НашлиСчет = Истина;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НашлиСчет И НЕ НашлиЗаказ И НЕ ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
		
		Если (СтрокаДокумента.Исходящий И ТипЗнч(СтрокаДокумента.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
			И ТипЗнч(СтрокаДокумента.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"))
			ИЛИ (НЕ СтрокаДокумента.Исходящий И ТипЗнч(СтрокаДокумента.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплату")
			И ТипЗнч(СтрокаДокумента.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
			
			СтрокаДокумента.Заказ = СтрокаДокумента.СчетНаОплату.ДокументОснование;
			
		КонецЕсли;
		
	ИначеЕсли НЕ НашлиСчет И НашлиЗаказ И НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
		
		Если ТипЗнч(СтрокаДокумента.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетНаОплату.Ссылка КАК СчетНаОплату
			|ИЗ
			|	Документ.СчетНаОплату КАК СчетНаОплату
			|ГДЕ
			|	СчетНаОплату.ДокументОснование = &ДокументОснование
			|	И НЕ СчетНаОплату.ПометкаУдаления";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетНаОплатуПоставщика.Ссылка КАК СчетНаОплату
			|ИЗ
			|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
			|ГДЕ
			|	СчетНаОплатуПоставщика.ДокументОснование = &ДокументОснование
			|	И НЕ СчетНаОплатуПоставщика.ПометкаУдаления";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", СтрокаДокумента.Заказ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1
			И Выборка.Следующий() Тогда
			
			СтрокаДокумента.СчетНаОплату = Выборка.СчетНаОплату;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НашлиЗаказ Тогда
		Возврат ДоговорЗаказа;
	ИначеЕсли НашлиСчет Тогда
		Возврат ДоговорСчета;
	Иначе
		Возврат ДоговорЗаказа;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьПлатежноеПоручение(СтрокаДокумента)
	
	НашлиПП = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
		|	ПлатежноеПоручение.Номер КАК Номер,
		|	ПлатежноеПоручение.Дата КАК Дата,
		|	ПлатежноеПоручение.ДокументОснование КАК ДокументОснование,
		|	ПлатежноеПоручение.ВидОперации КАК ВидОперации,
		|	ПлатежноеПоручение.Корреспонденция КАК Корреспонденция,
		|	ПлатежноеПоручение.Статья КАК СтатьяДДС,
		|	ПлатежноеПоручение.Договор КАК Договор,
		|	ПлатежноеПоручение.РасшифровкаПлатежа.(
		|		Договор КАК Договор
		|	) КАК РасшифровкаПлатежа
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
		|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
		|ГДЕ
		|	ПлатежноеПоручение.СуммаДокумента = &СуммаДокумента
		|	И ПлатежноеПоручение.Дата <= &ДатаОкончания
		|	И ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
		|	И НЕ ПлатежноеПоручение.ПометкаУдаления
		|	И ПлатежноеПоручение.Контрагент = &Контрагент
		|	И ПлатежноеПоручение.Номер ПОДОБНО ""%"" + &НомерДок
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлатежноеПоручение УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПлатежноеПоручение.Контрагент", "И ПлатежноеПоручение.Подотчетник");
	ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПлатежноеПоручение.Контрагент = &Контрагент", "");
	КонецЕсли;
	
	ДатаОкончания = КонецДня(СтрокаДокумента.ДатаДок);
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
	Запрос.УстановитьПараметр("СуммаДокумента", СтрокаДокумента.СуммаДокумента);
	Запрос.УстановитьПараметр("НомерДок", СтрокаДокумента.НомерДок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПП = РезультатЗапроса.Выбрать();
	
	ДокументНайденныйПоНомеру = Неопределено;
	ДокументОснованиеПП = Неопределено;
	ДоговорИзРасшифровкиПлатежа = Неопределено;
	ВидОперацииПП = Неопределено;
	СтатьяДДС_ПП = Неопределено;
	КорреспонденцияПП = Неопределено;
	
	Пока ВыборкаПП.Следующий() Цикл
		
		// Сценарий, когда дата документа > 2011.01.01.
		НомерВБазеБезНулей = УправлениеНебольшойФирмойКлиентСервер.НомерДокументаБезЛидирующихНулей(ВыборкаПП.Номер, Истина, Истина);
		НомерВФайлеБезНулей = УправлениеНебольшойФирмойКлиентСервер.НомерДокументаБезЛидирующихНулей(СтрокаДокумента.НомерДок, Истина, Истина);
		ДатаДляПоиска = ВыборкаПП.Дата;
		
		Если НомерВБазеБезНулей = НомерВФайлеБезНулей Тогда
			
			ДокументНайденныйПоНомеру = ВыборкаПП.ПлатежноеПоручение;
			ДокументОснованиеПП = ВыборкаПП.ДокументОснование;
			РасшифровкаПлатежа = ВыборкаПП.РасшифровкаПлатежа.Выгрузить();
			Если РасшифровкаПлатежа.Количество() > 0 Тогда
				ДоговорИзРасшифровкиПлатежа = РасшифровкаПлатежа[0].Договор;
			Иначе	
				ДоговорИзРасшифровкиПлатежа = ВыборкаПП.Договор;
			КонецЕсли;
			ВидОперацииПП = ВыборкаПП.ВидОперации;
			СтатьяДДС_ПП = ВыборкаПП.СтатьяДДС;
			КорреспонденцияПП = ВыборкаПП.Корреспонденция;
			
			НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
			
			Если Год(ДатаДляПоиска) = Год(СтрокаДокумента.ДатаДок) Тогда // Поищем год.
				
				СтрокаДокумента.ПлатежноеПоручение = ВыборкаПП.ПлатежноеПоручение;
				НашлиПП = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НашлиПП И ДокументНайденныйПоНомеру <> Неопределено Тогда
		СтрокаДокумента.ПлатежноеПоручение = ДокументНайденныйПоНомеру;
		НашлиПП = Истина;
	КонецЕсли;
	
	СтруктураВозврат = Новый Структура();
	СтруктураВозврат.Вставить("НашлиПП", НашлиПП);
	СтруктураВозврат.Вставить("ДокументОснованиеПП", ДокументОснованиеПП);
	СтруктураВозврат.Вставить("Договор", ДоговорИзРасшифровкиПлатежа);
	СтруктураВозврат.Вставить("ВидОперацииПП", ВидОперацииПП);
	СтруктураВозврат.Вставить("СтатьяДДС_ПП", СтатьяДДС_ПП);
	СтруктураВозврат.Вставить("КорреспонденцияПП", КорреспонденцияПП);
	
	Возврат СтруктураВозврат;
	
КонецФункции

Процедура ВыполнитьАнализИсторииНаСервере(ДанныеСтроки, Объект, ДоговорВЗаказеСчете, ПараметрыВыделенияКолонок)

	СтруктураРеквизитов = ПолучитьСтатистикуПоКонтрагенту(1, ДанныеСтроки.Контрагент, ДанныеСтроки.СчетКонтрагента, Объект.БанковскийСчет, ДанныеСтроки.Исходящий, ДоговорВЗаказеСчете);
	
	Если СтруктураРеквизитов.Договор <> Неопределено Тогда
		ДанныеСтроки.Договор = СтруктураРеквизитов.Договор;
	КонецЕсли;
	Если СтруктураРеквизитов.ВидОперации <> Неопределено Тогда
		ДанныеСтроки.ВидОперации = СтруктураРеквизитов.ВидОперации;
	КонецЕсли;
	Если СтруктураРеквизитов.СтатьяДДС <> Неопределено Тогда
		ДанныеСтроки.СтатьяДДС = СтруктураРеквизитов.СтатьяДДС;
	КонецЕсли;
	Если СтруктураРеквизитов.Корреспонденция <> Неопределено Тогда
		ДанныеСтроки.Корреспонденция = СтруктураРеквизитов.Корреспонденция;
	КонецЕсли;

КонецПроцедуры

Функция НайтиДоговорВВидеСтруктуры(ВладелецДоговора, ОрганизацияДоговора = Неопределено, Знач ВидОперации = Неопределено)
	
	СтруктураВозврат = Новый Структура("Договор, КоличествоДоговоров", НСтр("ru = 'Не найден договор по умолчанию'"), 0);
	
	// Заполним список видов договоров
	МассивДоговоров = Новый Массив;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
		Или ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
		МассивДоговоров.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
		Или ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
		МассивДоговоров.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
		Или ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты Тогда
		МассивДоговоров.Добавить(Перечисления.ВидыДоговоров.Прочее);
	КонецЕсли;
	
	// Получим данные
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Контрагент ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора В (&МассивДоговоров)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетПоВидуДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Контрагент = ДоговорыКонтрагентов.Владелец)
	|			И ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагента.Договор
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетПоВидуДоговора,
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	
	ТекстФильтра =
	"	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора"
  + ?(ОрганизацияДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора", "") 
  +	"	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	// Обработаем данные
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		СтруктураВозврат.КоличествоДоговоров = Выборка.Количество();
		
		Выборка.Следующий();
		СтруктураВозврат.Договор = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции // НайтиДоговор()

Функция ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия)
		
	Если (СтрокаДокумента.Исходящий И НЕ СтруктураЗначенийИзСоответствия.ВидОперацииРасходаСоСчета.Пустая()) 
		ИЛИ (НЕ СтрокаДокумента.Исходящий И НЕ СтруктураЗначенийИзСоответствия.ВидОперацииПоступленияНаСчет.Пустая()) Тогда
		
		Если Не СтруктураЗначенийИзСоответствия.СтатьяДДС.Пустая() Тогда
			СтрокаДокумента.СтатьяДДС = СтруктураЗначенийИзСоответствия.СтатьяДДС;
		КонецЕсли;
		
		Если Не СтруктураЗначенийИзСоответствия.Корреспонденция.Пустая() Тогда
			СтрокаДокумента.Корреспонденция = СтруктураЗначенийИзСоответствия.Корреспонденция;
		КонецЕсли;
		
		Если Не СтруктураЗначенийИзСоответствия.Проект.Пустая() Тогда
			СтрокаДокумента.Проект = СтруктураЗначенийИзСоответствия.Проект;
		КонецЕсли;
		
		Если Не СтруктураЗначенийИзСоответствия.Подразделение.Пустая() Тогда
			СтрокаДокумента.Подразделение = СтруктураЗначенийИзСоответствия.Подразделение;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
		
		Возврат ?(СтрокаДокумента.Исходящий, СтруктураЗначенийИзСоответствия.ВидОперацииРасходаСоСчета, СтруктураЗначенийИзСоответствия.ВидОперацииПоступленияНаСчет);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#Область ЗаполнениеДанныхЗагружаемогоДокумента

Процедура ЗаполнитьПроект(СтрокаДокумента, Документ, СтруктураЗначенийИзСоответствия)
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоПроектам") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДокумента.Проект.Пустая() Тогда
		// Заполняем проект
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПодразделение(СтрокаДокумента, Документ, СтруктураЗначенийИзСоответствия)
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДокумента.Подразделение.Пустая() Тогда
		//Заполняем Подразделение
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидНалогаПоКБК(СтрокаДокумента)
	
	ВидыНалогов = Справочники.ВидыНалогов.ДанныеВыбораПоКБК(СтрокаДокумента.ПоказательКБК);
	
	Для каждого ЭлементСписка Из ВидыНалогов Цикл
		СтруктураНалога = ЭлементСписка.Значение;
		Если НЕ СтруктураНалога.ПометкаУдаления Тогда
			СтрокаДокумента.ВидНалога = СтруктураНалога.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьСпособЗачетаПоУмолчанию(СтрокаДокумента)
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		УстановитьСпособЗачетаПоДокументу(СтрокаДокумента);
	Иначе
		ОбновитьСпособЗачетаНаСервере(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСпособЗачетаПоДокументу(СтрокаДокумента)
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	
	Если СтрокаДокумента.Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
		СтрокаДокумента.СпособЗачетаТЧ = СтрокаДокумента.Документ.РасшифровкаПлатежа[0].СпособЗачета;
		Если СтрокаДокумента.СпособЗачетаТЧ.Пустая() Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		КонецЕсли;
	Иначе
		ОбновитьСпособЗачетаНаСервере(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСпособЗачетаНаСервере(СтрокаДокумента)
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	
	Если ЭтоОперацияГдеВозможныАвтоРасчеты(СтрокаДокумента.ВидОперации) Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов)
			Или ЗначениеЗаполнено(СтрокаДокумента.ПлатежноеПоручение)
			Или ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату)
			Или ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
			СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), СтрокаДокумента.Контрагент);
		ИначеЕсли ТипЗнч(СтрокаДокумента.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			И ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаДокумента.СпособЗачетаТЧ = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(СтрокаДокумента.Договор, СтрокаДокумента.Контрагент);
		Иначе
			СтрокаДокумента.СпособЗачетаТЧ = СпособРазнесенияОплатыПоУмолчанию;
		КонецЕсли;
	Иначе
		СтрокаДокумента.СпособЗачетаТЧ = СпособЗачетаВручную;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОперацияГдеВозможныАвтоРасчеты(пВидОперации)
	
	Возврат (пВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя")
		Или пВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику"));
	
КонецФункции

Процедура ОчиститьИнформациюОДокументахНаСервере(пСтрока)
	
	пСтрока.Заказ = Неопределено;
	пСтрока.СчетНаОплату = Неопределено;
	пСтрока.ДокументРасчетов = Неопределено;
	
КонецПроцедуры

// Функция создает соответствие из строки.
//
Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;
	ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	Пока ПозицияРазделителя > 0 Цикл
		ИмяЭлемента = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяЭлемента, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	КонецЦикла;
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
	КонецЕсли;
	
	Возврат НовоеСоответствие;
	
КонецФункции // СоздатьСоответствиеИзСтроки()

// Процедура проверяет устанавливает готовность.
//
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ЗначениеЗаполнено(ТекущаяГотовность)
	   И ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяГотовность) Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры // УстановитьГотовность()

// Процедура добавляет строку.
//
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, ВНачало = Ложь)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	ИначеЕсли ВНачало Тогда
		Буфер = НоваяСтрока + Символы.ПС + Буфер;
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВСтроку()

Процедура УстановитьНомерКартинкиДляПодвалаНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.НомерКартинкиДляПодвала = ?(ДанныеСтроки.НомерКартинки = -1, 0, ДанныеСтроки.НомерКартинки);
	
КонецПроцедуры

Функция ВидОплатыЧислом(Знач ВидОплатыИзФайла)
	
	Если ПустаяСтрока(ВидОплатыИзФайла) Тогда
		ВидОплаты = 1;
	Иначе
		Попытка
			ВидОплаты = Число(ВидОплатыИзФайла);
		Исключение
			ВидОплаты = 1;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

Функция ПолучитьСтатистикуПоКонтрагенту(ВариантПоиска, Контрагент, БанковскийСчетКонтрагента, БанковскийСчетОрганизации, Исходящий, ДоговорВЗаказеСчете)

	// Реализованный вариант (по шагам):
	// 1. Найдем договор, который встречается не менее чем в 50% случаев.
	// 2. Найдем для этого договора вид операции, который встречается не менее чем в 50% случаев.
	// 3. Найдем для этого вида операции статью ДДС, которая встречается не менее чем в 50% случаев.
	// 4. Найдем для этой статьи ДДС корреспондирующий счет учета, который встречается не менее чем в 50% случаев.
	// Альтернативный вариант, это найти комбинацию Договор + ВидОперации + СтатьяДДС + Корреспонденция, которая
	// встречается не менее чем в 50% случаев.
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Договор", Неопределено);
	СтруктураРеквизитов.Вставить("ВидОперации", Неопределено);
	СтруктураРеквизитов.Вставить("СтатьяДДС", Неопределено);
	СтруктураРеквизитов.Вставить("Корреспонденция", Неопределено);
	
	Если ВариантПоиска = 1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Документ КАК Документ,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор КАК Договор,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ВидОперации КАК ВидОперации,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СтатьяДДС КАК СтатьяДДС,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Корреспонденция КАК Корреспонденция,
			|	ИСТИНА КАК ДетальныеЗаписи,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ДатаЗагрузкиЧислом КАК ДатаЗагрузкиЧислом
			|ИЗ
			|	РегистрСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка КАК ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка
			|ГДЕ
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Контрагент = &Контрагент
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетОрганизации = &БанковскийСчетОрганизации
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Исходящий = &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор = &ДоговорВЗаказеСчете)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ УБЫВ,
			|	ДатаЗагрузкиЧислом УБЫВ
			|ИТОГИ
			|	КОЛИЧЕСТВО(Документ),
			|	МАКСИМУМ(ДатаЗагрузкиЧислом)
			|ПО
			|	ОБЩИЕ,
			|	Договор,
			|	ВидОперации,
			|	СтатьяДДС,
			|	Корреспонденция
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", БанковскийСчетКонтрагента);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", БанковскийСчетОрганизации);
		Запрос.УстановитьПараметр("Исходящий", Исходящий);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ВыборкаОбщийИтог.Следующий(); // Общий итог
			
			ВыборкаДоговор = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаДоговор.Следующий() Тогда
				
				ПриоритетВГруппе = ВыборкаДоговор.Документ / ВыборкаОбщийИтог.Документ * 100;
				Если ПриоритетВГруппе >= 50 Тогда
					
					СтруктураРеквизитов.Вставить("Договор", ВыборкаДоговор.Договор);
					
					ВыборкаВидОперации = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Если ВыборкаВидОперации.Следующий() Тогда
						
						ПриоритетВГруппе = ВыборкаВидОперации.Документ / ВыборкаДоговор.Документ * 100;
						Если ПриоритетВГруппе >= 50 Тогда
					
							СтруктураРеквизитов.Вставить("ВидОперации", ВыборкаВидОперации.ВидОперации);
							ВыборкаСтатьяДДС = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
							Если ВыборкаСтатьяДДС.Следующий() Тогда
								
								ПриоритетВГруппе = ВыборкаСтатьяДДС.Документ / ВыборкаВидОперации.Документ * 100;
								Если ПриоритетВГруппе >= 50 Тогда
					
									СтруктураРеквизитов.Вставить("СтатьяДДС", ВыборкаСтатьяДДС.СтатьяДДС);
									ВыборкаКорреспонденция = ВыборкаСтатьяДДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
									Если ВыборкаКорреспонденция.Следующий() Тогда
										
										ПриоритетВГруппе = ВыборкаКорреспонденция.Документ / ВыборкаСтатьяДДС.Документ * 100;
										Если ПриоритетВГруппе >= 50 Тогда
											СтруктураРеквизитов.Вставить("Корреспонденция", ВыборкаКорреспонденция.Корреспонденция);
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ВариантПоиска = 2 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор КАК Договор,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ВидОперации КАК ВидОперации,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СтатьяДДС КАК СтатьяДДС,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Корреспонденция КАК Корреспонденция,
			|	МАКСИМУМ(ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ДатаЗагрузкиЧислом) КАК ДатаЗагрузкиЧислом,
			|	СУММА(1) КАК КоличествоЗаписей
			|ИЗ
			|	РегистрСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка КАК ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка
			|ГДЕ
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Контрагент = &Контрагент
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетОрганизации = &БанковскийСчетОрганизации
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Исходящий = &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор = &ДоговорВЗаказеСчете)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ВидОперации,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СтатьяДДС,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Корреспонденция
			|
			|УПОРЯДОЧИТЬ ПО
			|	КоличествоЗаписей УБЫВ,
			|	ДатаЗагрузкиЧислом УБЫВ
			|ИТОГИ
			|	СУММА(КоличествоЗаписей)
			|ПО
			|	ОБЩИЕ
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", БанковскийСчетКонтрагента);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", БанковскийСчетОрганизации);
		Запрос.УстановитьПараметр("Исходящий", Исходящий);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ВыборкаОбщийИтог.Следующий();		// Общий итог
			
			// Вставить обработку выборки ВыборкаОбщийИтог
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ПриоритетВГруппе = ВыборкаДетальныеЗаписи.КоличествоЗаписей / ВыборкаОбщийИтог.КоличествоЗаписей * 100;
				Если ПриоритетВГруппе >= 50 Тогда
					ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ВыборкаДетальныеЗаписи);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции // ПолучитьСтатистикуПоКонтрагенту()

Функция ЕстьЗаписиВСправочникеСоответствий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.Ссылка
		|ИЗ
		|	Справочник.СоответствияНазначенийПлатежаИРеквизитовПлатежа КАК СоответствияНазначенийПлатежаИРеквизитовПлатежа
		|ГДЕ
		|	НЕ СоответствияНазначенийПлатежаИРеквизитовПлатежа.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

