
#Область ПрограммныйИнтерфейс

// Устарела. См. ОбщегоНазначенияКлиент.ДатаСеанса
// 
// Возвращаемое значение:
// 	Дата - дата сервера
Функция ДатаСеанса() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

// Функция формирует структуру с данными для печати на принтере этикеток.
Функция ПодготовитьСтруктуруДанныхЦенниковИЭтикетокДляПринтераЭтикеток(Знач Параметры, Знач МенеджерПечати, Размер) Экспорт
	
	МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МенеджерПечати);
	
	Данные = МенеджерПечати.ПолучитьДанныеДляПринтераЭтикеток(Параметры);
	
	Результат = Новый Массив;
	
	Для Каждого ТекШаблон Из Данные Цикл
		
		Если ТекШаблон.Шаблон.РазмерМакета = Размер Тогда
			
			Пакет = Новый Структура;
			Пакет.Вставить("XML", ТекШаблон.ТабличныйДокумент.XML);
			Пакет.Вставить("Этикетки", Новый Массив);
			
			Для Каждого ТекЭтикетка Из ТекШаблон.ТабличныйДокумент.Этикетки Цикл
				
				НоваяЭтикетка = Новый Структура;
				НоваяЭтикетка.Вставить("Количество", ТекЭтикетка.Количество);
				НоваяЭтикетка.Вставить("Поля", ТекЭтикетка.ЗначенияПолей);
				
				Пакет.Этикетки.Добавить(НоваяЭтикетка);
				
			КонецЦикла;
			
			Результат.Добавить(Пакет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение функциональной опции по имени. Для использования на клиенте.
Функция ПолучитьФункциональнуюОпциюСервер(Имя) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию(Имя);
	
КонецФункции

// Возвращает значение функциональной опции по имени. Для использования на клиенте.
Функция ПолучитьКонстантуСервер(Имя) Экспорт
	
	Возврат Константы[Имя].Получить();
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов, прочитанные из информационной базы по ссылке на объект.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//                       требований к свойствам структуры.
//                       Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                       псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                       значения (опционально) фактическое имя поля в таблице.
//                       Если ключ задан, а значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//                       к свойствам структуры.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя;
//                                если есть ограничение на уровне записей, то все реквизиты вернутся со 
//                                значением Неопределено; если нет прав для работы с таблицей, то возникнет исключение;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу 
//                                или любой из реквизитов.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//            - если в параметр Реквизиты передана пустая строка, то возвращается пустая структура.
//            - если в параметр Ссылка передана пустая ссылка, то возвращается структура, 
//              соответствующая именам реквизитов со значениями Неопределено.
//            - если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//              то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты, ВыбратьРазрешенные = Ложь) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты, ВыбратьРазрешенные);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Возвращает служебную информацию для письма о новых возможностях
//
Функция СлужебнаяИнформацияДляПисьма(Тег) Экспорт
	
	Возврат Обработки.НастройкаПрограммы.СлужебнаяИнформацияДляПисьма(Тег);
	
КонецФункции

// Выполняет копирование выделенных строк в буфер обмена.
// Параметры:
//  СоответствиеСтрок - структура - соответствие колонко;
//  СкопированныеСтрокиМассив - массив - данные отчета
//  КоличествоСкопированных - число - количество копированных строк
//
Процедура КопироватьСтрокиОтчета(СоответствиеСтрок, СкопированныеСтрокиМассив, КоличествоСкопированных) Экспорт

	Перем Значение;

	#Область ТекстЗапроса
	ТекстЗапросаВесовойТовар = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.Весовой КАК Весовой
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	#КонецОбласти
	
	ТипНоменклатура	  		 = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристика 		 = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипЕдИзмерения 		 	 = Новый ОписаниеТипов(
		"СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения");
	
	ТипЧисло				 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	СкопированныеСтроки 	 = Новый ТаблицаЗначений;
	СкопированныеСтроки.Колонки.Добавить("Номенклатура", 		ТипНоменклатура);
	СкопированныеСтроки.Колонки.Добавить("Характеристика",		ТипХарактеристика);
	СкопированныеСтроки.Колонки.Добавить("ЕдиницаИзмерения",	ТипЕдИзмерения);
	СкопированныеСтроки.Колонки.Добавить("Количество",			ТипЧисло);

	СкопированныеСтроки.Индексы.Добавить("Количество");
	СкопированныеСтроки.Индексы.Добавить("Номенклатура");
	
	Для Каждого СтруктураСтроки Из СкопированныеСтрокиМассив Цикл
		
		ДобавленныеПоля = Новый Структура;
		
		Для Каждого КлючЗначение Из СоответствиеСтрок Цикл
			
			Если СтруктураСтроки.Свойство(КлючЗначение.Значение, Значение) Тогда
				ДобавленныеПоля.Вставить(КлючЗначение.Ключ, Значение);
			КонецЕсли;
			
		КонецЦикла;

		ЗаполнитьЗначенияСвойств(СкопированныеСтроки.Добавить(), ДобавленныеПоля);
		
	КонецЦикла;

	// обработка связанных полей
	Запрос = Новый Запрос(ТекстЗапросаВесовойТовар);
	Запрос.УстановитьПараметр("Номенклатура", СкопированныеСтроки.ВыгрузитьКолонку("Номенклатура"));

	НоменклатураСВесом 	= Новый Массив;
	ВыборкаЗапроса		= Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		Если ВыборкаЗапроса.Весовой Тогда
			НоменклатураСВесом.Добавить(ВыборкаЗапроса.Ссылка);
		КонецЕсли;

		СтрокаТаблицы = СкопированныеСтроки.Найти(ВыборкаЗапроса.Ссылка, "Номенклатура");
		
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Новый Структура("ЕдиницаИзмерения", ВыборкаЗапроса.ЕдиницаИзмерения));
		КонецЕсли;
		
	КонецЦикла;
	
	НулевыеСтроки = СкопированныеСтроки.НайтиСтроки(Новый Структура("Количество", 0));
	Если НулевыеСтроки.Количество() > 0 Тогда
		
		НастройкаУстанавливатьКоличество = 
			УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("СбрасыватьКоличествоПриИзмененииНоменклатуры");
			
		Если НастройкаУстанавливатьКоличество = Перечисления.ВариантыСбросаКоличества.ДоЕдиницы Тогда	

			Для Каждого НулеваяСтрока Из НулевыеСтроки Цикл
				
				Если НоменклатураСВесом.Найти(НулеваяСтрока.Номенклатура) = Неопределено Тогда
					НулеваяСтрока.Количество = 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("БуферОбменаТабличныеЧасти", "Строки", СкопированныеСтроки);
	КоличествоСкопированных = СкопированныеСтроки.Количество();
	
КонецПроцедуры

// Возвращает структуру параметров и отборов расшифровки
// Параметры:
//   Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - значение, полученное из отчета при расшифровке.
//   АдресДанныхРасшифровки - Строка - адрес, указывающий на значение во временном хранилище.
//   СписокПараметров - Массив - содержит имена параметров и полей, используемых при расшифровке
//   ПоляРасшифровки - Строка - содержит имена полей, используемых при расшифровке.
//	 РасшифровкаПоВсейСтроке - Булево - собирает расшифровку с учетом родителей расшифровки ячейки
//
// Возвращаемое значение:
//   Структура - в качестве ключа возвращается имя параметра или отбора для отчета-приемника,
//   			а в качестве значения - значение параметра или отбора.
//
Функция ПараметрыФормыРасшифровки(Расшифровка, АдресДанныхРасшифровки, ПоляРасшифровки, ТекстыПолей, ТипыПолей, РасшифровкаПоВсейСтроке = Истина) Экспорт

	ПроверкаПолейРасшифровки  = Новый ТаблицаЗначений;
	ПроверкаПолейРасшифровки.Колонки.Добавить("Значение");
	ПроверкаПолейРасшифровки.Колонки.Добавить("ИмяПоля");
	ПроверкаПолейРасшифровки.Колонки.Добавить("Иерархия", Новый ОписаниеТипов("Булево"));
	
	ПараметрыФормыРасшифровки = Новый Структура;
	ДанныеРасшифровки 		  = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	Если ТипЗнч(Расшифровка)  = Тип("Массив") Тогда

		ИмяПоля = ПоляРасшифровки[0];
		
		ПараметрыФормыРасшифровки.Вставить(ИмяПоля, Новый Массив);
		
		Для Каждого РасшифровкаСтроки Из Расшифровка Цикл
			
			ПараметрыСтрокиРасшифровки = Новый Структура;
			ЗаполнитьЗначениеРасшифровки(
				ПараметрыСтрокиРасшифровки, 
				ДанныеРасшифровки, 
				РасшифровкаСтроки, 
				ПроверкаПолейРасшифровки, 
				ПоляРасшифровки,
				ТипыПолей,
				ТекстыПолей,
				РасшифровкаПоВсейСтроке);

			Если ПараметрыСтрокиРасшифровки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПоляРасшифровки.Количество() = 1 Тогда
				ПараметрыФормыРасшифровки[ИмяПоля].Добавить(ПараметрыСтрокиРасшифровки[ИмяПоля]);
			Иначе
				ПараметрыФормыРасшифровки[ИмяПоля].Добавить(ПараметрыСтрокиРасшифровки);
			КонецЕсли;
			
		КонецЦикла;

		Если ПараметрыФормыРасшифровки[ИмяПоля].Количество() = 0 Тогда
			ПараметрыФормыРасшифровки.Удалить(ИмяПоля);
		КонецЕсли;

	Иначе
		
		ЗаполнитьЗначениеРасшифровки(
			ПараметрыФормыРасшифровки, 
			ДанныеРасшифровки, 
			Расшифровка, 
			ПроверкаПолейРасшифровки, 
			ПоляРасшифровки,
			ТипыПолей,
			ТекстыПолей,
			РасшифровкаПоВсейСтроке);
		
	КонецЕсли;
	
	Возврат ПараметрыФормыРасшифровки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРодителей(ЭлементРасшифровки, ПроверкаПолейРасшифровки)
	
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл

		ДобавитьПоля(Родитель, ПроверкаПолейРасшифровки);
		ДобавитьРодителей(Родитель, ПроверкаПолейРасшифровки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоля(ЭлементРасшифровки, ПроверкаПолейРасшифровки, ТипыПолейЧисло = Неопределено, ТекстыПолей = Неопределено);
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			
			ДанныеСтроки 	= Новый Структура("Значение, ИмяПоля, Иерархия", Поле.Значение, Поле.Поле, Поле.Иерархия);
			
			Если ДанныеСтроки.Значение = null
				И ТипыПолейЧисло <> Неопределено
				И ТипыПолейЧисло.Получить(ДанныеСтроки.ИмяПоля) <> Неопределено Тогда
				
                ТипПоля				  = ТипыПолейЧисло.Получить(ДанныеСтроки.ИмяПоля);
				ДанныеСтроки.Значение = ТипПоля.ПривестиЗначение(ТекстыПолей.Получить(ЭлементРасшифровки.Идентификатор));
				
			КонецЕсли;
			
			НайденныеСтроки = ПроверкаПолейРасшифровки.НайтиСтроки(ДанныеСтроки);
			
			Если НайденныеСтроки.Количество() = 0 Тогда

				НовоеПоле = ПроверкаПолейРасшифровки.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеПоле, ДанныеСтроки);

			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеРасшифровки(ПараметрыФормыРасшифровки, ДанныеРасшифровки, Расшифровка, ПроверкаПолейРасшифровки, ПоляРасшифровки, ТипыПолейЧисло, ТекстыПолей, РасшифровкаПоВсейСтроке)
	
	ПроверкаПолейРасшифровки.Очистить();
	
	Если ТипЗнч(Расшифровка) = Тип("Массив") Тогда
		
		Для Каждого РасшифровкаКолонки Из Расшифровка Цикл

			ДобавитьПоля(
				ДанныеРасшифровки.Элементы[РасшифровкаКолонки], 
				ПроверкаПолейРасшифровки,
				ТипыПолейЧисло, 
				ТекстыПолей);

		КонецЦикла;

		Если РасшифровкаПоВсейСтроке Тогда
			ДобавитьРодителей(ДанныеРасшифровки.Элементы[РасшифровкаКолонки], ПроверкаПолейРасшифровки);
		КонецЕсли;
		
	ИначеЕсли Расшифровка <> Неопределено Тогда

		ДобавитьПоля(
			ДанныеРасшифровки.Элементы[Расшифровка], 
			ПроверкаПолейРасшифровки,
			ТипыПолейЧисло,
			ТекстыПолей);
			
		Если РасшифровкаПоВсейСтроке Тогда
			ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ПроверкаПолейРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ДанныеПоля Из ПроверкаПолейРасшифровки Цикл
		
		ИмяПоля = СтрЗаменить(ДанныеПоля.ИмяПоля, ".", "_");
		Если ПоляРасшифровки.Найти(ИмяПоля) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПараметрыФормыРасшифровки.Свойство(ИмяПоля) Тогда
			
			Если ДанныеПоля.Иерархия Тогда
				ЗначениеРасшифровки = Новый Структура;
				ЗначениеРасшифровки.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.ВИерархии);
				ЗначениеРасшифровки.Вставить("ПравоеЗначение", ДанныеПоля.Значение);
				ПараметрыФормыРасшифровки.Вставить(ИмяПоля, ЗначениеРасшифровки);
			Иначе
				ПараметрыФормыРасшифровки.Вставить(ИмяПоля, ДанныеПоля.Значение);
			КонецЕсли;
			
		ИначеЕсли НЕ ПараметрыФормыРасшифровки.Свойство(ИмяПоля + "_Родитель") Тогда
			
			Если ДанныеПоля.Значение = Null Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеРасшифровки = Новый Структура;
			ЗначениеРасшифровки.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.ВИерархии);
			ЗначениеРасшифровки.Вставить("ПравоеЗначение", ДанныеПоля.Значение);
			ПараметрыФормыРасшифровки.Вставить(ИмяПоля + "_Родитель", ЗначениеРасшифровки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти