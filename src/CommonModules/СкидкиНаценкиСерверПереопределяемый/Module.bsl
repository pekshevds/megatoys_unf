////////////////////////////////////////////////////////////////////////////////
// СкидкиНаценкиСерверПереопределяемый: содержит ряд функций и процедур,
// используемых для расчета скидок и обработки связанных со скидками объектов
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует список значений способов предоставления скидок
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений из ПеречислениеСсылка.СпособыПредоставленияСкидокНаценок
//
Функция ПолучитьСписокЗначенийСпособовПредоставленияСкидки(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Процент);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сумма);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦен);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Подарок);
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьПромокоды") Тогда 
		ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Промокод);
	КонецЕсли;
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Расширение);
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийСпособовПредоставленияСкидки()

// Формирует список значений способов начисления бонусов
//
// Параметры
// Список = Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений из ПеречислениеСсылка.СпособыПредоставленияСкидокНаценок
//
Функция ПолучитьСписокЗначенийСпособовНачисленияБонусов(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов, "Процент");
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов, "Количество");
	
	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийСпособовПредоставленияСкидки()

// Формирует список значений возможных условий скидок
//
// Параметры:
//   ЗаполняемыйСписок - СписокЗначений из ПеречислениеСсылка.УсловияПредоставленияСкидокНаценок - Заполняемый список
//
// Возвращаемое значение:
//   СписокЗначений из ПеречислениеСсылка.УсловияПредоставленияСкидокНаценок
//
Функция ПолучитьСписокЗначенийУсловийПредоставленияСкидки(ЗаполняемыйСписок = Неопределено) Экспорт

	Если ЗаполняемыйСписок = Неопределено Тогда
		ЗаполняемыйСписок = Новый СписокЗначений;
	КонецЕсли;
	
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДеньРождения);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаАктивациюВручную);
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьПромокоды") Тогда
		ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПромокод);
	КонецЕсли;
	Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеКонстанты("ФункциональнаяОпцияИспользоватьДисконтныеКарты") Тогда
		ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту,,, БиблиотекаКартинок.СчитатьДисконтнуюКарту);
		ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж,,, БиблиотекаКартинок.СчитатьДисконтнуюКарту);
	КонецЕсли;
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.Расширение);

	Возврат ЗаполняемыйСписок;

КонецФункции // ПолучитьСписокЗначенийУсловийПредоставленияСкидки()

// Функция возвращает таблицу действующих скидок (наценок)
//
// Параметры:
//   Объект - см. СкидкиНаценкиСерверПереопределяемый.Рассчитать - Заполняемый список
//   Назначения - ПеречислениеСсылка.НазначенияАвтоматическихСкидок - Канал продаж, для которого требуется подготовить
//                                                                    список скидок
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценок(Объект, Назначения = Неопределено) Экспорт
	
	ТекущаяДата = Объект.Дата;
	НазначенияДляФильтра = Новый Массив;
	// Назначение "Везде" добавляем в любом случае, такие скидки участвуют в расчете всегда.
	НазначенияДляФильтра.Добавить(ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Везде"));
	Если Назначения = Неопределено Тогда
		// Перечисляем все назначения
		НазначенияДляФильтра.Добавить(ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Розница"));
		НазначенияДляФильтра.Добавить(ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Опт"));
	Иначе
		// Добавляем только требуемое назначение (если не считать "Везде").
		НазначенияДляФильтра.Добавить(Назначения);
	КонецЕсли;
	
	// Нам нужно получить список всех автоматических скидок, которые нужно рассчитывать.
	// 1. Получим все скидки и бонусы, которые подходят по времени действия.
	// 2. Отфильтруем бонусы, которые не подходят под бонусную программу документа 
	// (если дисконтная карта не выбрана, то никакие бонусные программы не подходят)
	// 3. Подходящие скидки отфильтруем по равенству получателя скидки (структурные единицы) и структурной единицы,
	// которая выбрана в документе
	// 4. Подходящие скидки отфильтруем по равенству получателя скидки (контрагенты) и контрагента, 
	// который выбран в документе. 
	// 5. Отдельно обработаем скидки, в которых встречаются группы в качестве получателей скидки (контрагенты).
	// Поскольку глубина иерархии контрагентов не ограничена, выполним отдельными запросами для каждого фильтра
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка КАК Ссылка,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямКонтрагентам КАК ЕстьОграниченияПоПолучателямКонтрагентам,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямСегментам КАК ЕстьОграниченияПоПолучателямСегментам,
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьОграниченияПоПолучателямСкладам КАК ЕстьОграниченияПоПолучателямСкладам
	|ПОМЕСТИТЬ ВТ_СкидкиПоРавенствуДнейНедели
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ВремяПоДнямНедели КАК АвтоматическиеСкидкиВремяПоДнямНедели
	|ГДЕ
	|	АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ЕстьРасписание
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ДеньНедели = &ДеньНедели
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяНачала <= &ТекущееВремя
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.ВремяОкончания >= &ТекущееВремя
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Назначение В(&Назначения)
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ДатаОкончания, ДЕНЬ))
	|	И НЕ АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.ПометкаУдаления
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Выбран
	|	И АвтоматическиеСкидкиВремяПоДнямНедели.Ссылка.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямКонтрагентам,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямСегментам,
	|	АвтоматическиеСкидки.ЕстьОграниченияПоПолучателямСкладам
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	НЕ АвтоматическиеСкидки.ЕстьРасписание
	|	И АвтоматическиеСкидки.Действует
	|	И (АвтоматическиеСкидки.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента >= НАЧАЛОПЕРИОДА(АвтоматическиеСкидки.ДатаНачала, ДЕНЬ))
	|	И (АвтоматическиеСкидки.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &ДатаДокумента <= КОНЕЦПЕРИОДА(АвтоматическиеСкидки.ДатаОкончания, ДЕНЬ))
	|	И АвтоматическиеСкидки.Назначение В(&Назначения)
	|	И НЕ АвтоматическиеСкидки.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад,
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы
	|ПОМЕСТИТЬ ДанныеТорговогоОбъекта
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	НЕ СтруктурныеЕдиницы.ПометкаУдаления
	|	И СтруктурныеЕдиницы.Ссылка = &СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Склад
	|ПОМЕСТИТЬ ТаблицаСклады
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Родитель
	|ГДЕ
	|	ДанныеТорговогоОбъекта.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов)
	|	И СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы В (ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница), ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	ДанныеТорговогоОбъекта КАК ДанныеТорговогоОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО ДанныеТорговогоОбъекта.Склад = СтруктурныеЕдиницы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка КАК СкидкаНаценка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель КАК Склад,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямКонтрагентам КАК ЕстьОграниченияПоПолучателямКонтрагентам,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямСегментам КАК ЕстьОграниченияПоПолучателямСегментам
	|ПОМЕСТИТЬ ВТ_СкидкиПоРавенствуДнейНеделиИСкладаОтгрузки
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиСклады КАК АвтоматическиеСкидкиПолучателиСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиПоРавенствуДнейНедели КАК ВТ_Скидки
	|		ПО АвтоматическиеСкидкиПолучателиСкидки.Ссылка = ВТ_Скидки.Ссылка
	|ГДЕ
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямСкладам
	|	И АвтоматическиеСкидкиПолучателиСкидки.Получатель В
	|			(ВЫБРАТЬ
	|				ТаблицаСклады.Склад
	|			ИЗ
	|				ТаблицаСклады)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Скидки.Ссылка,
	|	NULL,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямКонтрагентам,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямСегментам
	|ИЗ
	|	ВТ_СкидкиПоРавенствуДнейНедели КАК ВТ_Скидки
	|ГДЕ
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямСкладам
	|	И &СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Скидки.Ссылка,
	|	NULL,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямКонтрагентам,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямСегментам
	|ИЗ
	|	ВТ_СкидкиПоРавенствуДнейНедели КАК ВТ_Скидки
	|ГДЕ
	|	НЕ ВТ_Скидки.ЕстьОграниченияПоПолучателямСкладам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Скидки.СкидкаНаценка КАК СкидкаНаценка,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямКонтрагентам КАК ЕстьОграниченияПоПолучателямКонтрагентам,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямСегментам КАК ЕстьОграниченияПоПолучателямСегментам
	|ПОМЕСТИТЬ ВТ_СкидкиБонусыПоРавенствуДнейНеделиИСкладаОтгрузки
	|ИЗ
	|	ВТ_СкидкиПоРавенствуДнейНеделиИСкладаОтгрузки КАК ВТ_Скидки
	|ГДЕ
	|	НЕ ВТ_Скидки.СкидкаНаценка.ЭтоПравилоНачисленияБонусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Скидки.СкидкаНаценка,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямКонтрагентам,
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямСегментам
	|ИЗ
	|	ВТ_СкидкиПоРавенствуДнейНеделиИСкладаОтгрузки КАК ВТ_Скидки
	|ГДЕ
	|	ВТ_Скидки.СкидкаНаценка.ЭтоПравилоНачисленияБонусов
	|	И ВТ_Скидки.СкидкаНаценка.БонуснаяПрограмма = &БонуснаяПрограмма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка КАК СкидкаНаценка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель КАК Покупатель
	|ПОМЕСТИТЬ ВТ_СкидкиБонусыПоРавенствуДнейНеделиИСкладаОтгрузкиИПокупателя
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиКонтрагенты КАК АвтоматическиеСкидкиПолучателиСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиБонусыПоРавенствуДнейНеделиИСкладаОтгрузки КАК ВТ_Скидки
	|		ПО АвтоматическиеСкидкиПолучателиСкидки.Ссылка = ВТ_Скидки.СкидкаНаценка
	|			И (АвтоматическиеСкидкиПолучателиСкидки.Получатель = &Покупатель)
	|ГДЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка.ЕстьОграниченияПоПолучателямКонтрагентам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвтоматическиеСкидкиПолучателиСегменты.Ссылка,
	|	СоставСегментаКонтрагентов.Контрагент
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиСегменты КАК АвтоматическиеСкидкиПолучателиСегменты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиБонусыПоРавенствуДнейНеделиИСкладаОтгрузки КАК ВТ_Скидки
	|		ПО АвтоматическиеСкидкиПолучателиСегменты.Ссылка = ВТ_Скидки.СкидкаНаценка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСегментаКонтрагентов КАК СоставСегментаКонтрагентов
	|		ПО АвтоматическиеСкидкиПолучателиСегменты.Получатель = СоставСегментаКонтрагентов.Сегмент
	|			И (СоставСегментаКонтрагентов.Контрагент = &Покупатель)
	|ГДЕ
	|	ВТ_Скидки.ЕстьОграниченияПоПолучателямСегментам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Скидки.СкидкаНаценка,
	|	NULL
	|ИЗ
	|	ВТ_СкидкиБонусыПоРавенствуДнейНеделиИСкладаОтгрузки КАК ВТ_Скидки
	|ГДЕ
	|	НЕ ВТ_Скидки.ЕстьОграниченияПоПолучателямКонтрагентам
	|	И НЕ ВТ_Скидки.ЕстьОграниченияПоПолучателямСегментам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СкидкиДоПроверкиПолучателя.СкидкаНаценка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СкидкиНеПрошедшиеОтборПоПокупателю
	|ИЗ
	|	ВТ_СкидкиБонусыПоРавенствуДнейНеделиИСкладаОтгрузки КАК ВТ_СкидкиДоПроверкиПолучателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СкидкиБонусыПоРавенствуДнейНеделиИСкладаОтгрузкиИПокупателя КАК ВТ_Скидки
	|		ПО ВТ_СкидкиДоПроверкиПолучателя.СкидкаНаценка = ВТ_Скидки.СкидкаНаценка
	|ГДЕ
	|	ВТ_СкидкиДоПроверкиПолучателя.ЕстьОграниченияПоПолучателямКонтрагентам
	|	И ВТ_Скидки.СкидкаНаценка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Скидки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	ВТ_СкидкиБонусыПоРавенствуДнейНеделиИСкладаОтгрузкиИПокупателя КАК ВТ_Скидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Ссылка КАК Ссылка,
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель КАК ГруппаКонтрагентов
	|ИЗ
	|	Справочник.АвтоматическиеСкидки.ПолучателиСкидкиКонтрагенты КАК АвтоматическиеСкидкиПолучателиСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиНеПрошедшиеОтборПоПокупателю КАК ВТ_СкидкиНеПрошедшиеОтборПоПокупателю
	|		ПО АвтоматическиеСкидкиПолучателиСкидки.Ссылка = ВТ_СкидкиНеПрошедшиеОтборПоПокупателю.Ссылка
	|ГДЕ
	|	АвтоматическиеСкидкиПолучателиСкидки.Получатель.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Назначения", НазначенияДляФильтра);
	// Для скидки "За время продажи".
	Запрос.УстановитьПараметр("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(ТекущаяДата) - 1));
	Запрос.УстановитьПараметр("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));	
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ПустаяСсылка");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СтруктурнаяЕдиница") Тогда
		СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиница;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СтруктурнаяЕдиницаРезерв") Тогда
		СтруктурнаяЕдиница = Объект.СтруктурнаяЕдиницаРезерв;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Подразделение") Тогда
		СтруктурнаяЕдиница = Объект.Подразделение;
    // Поддержка сервера лояльности в режиме поставщика данных
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Магазин") Тогда
		СтруктурнаяЕдиница = Объект.Магазин;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ТорговыйОбъект") Тогда
		СтруктурнаяЕдиница = Объект.ТорговыйОбъект;
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Покупатель = Объект.Контрагент;
	Запрос.УстановитьПараметр("Покупатель", Покупатель);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДисконтнаяКарта")
		И ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		РеквизитыБП = РаботаСБонусами.РеквизитыБонуснойПрограммы(Объект.ДисконтнаяКарта);
		Запрос.УстановитьПараметр("БонуснаяПрограмма", РеквизитыБП.БонуснаяПрограмма);
	Иначе
		Запрос.УстановитьПараметр("БонуснаяПрограмма", Справочники.БонусныеПрограммы.ПустаяСсылка());
	КонецЕсли;
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	ТЗСкидок = МРезультатов[МРезультатов.Количество() - 2].Выгрузить();
	
	СкидкиДляПроверкиИерархииКонтрагентов = МРезультатов[МРезультатов.Количество() - 1];
	Если Не СкидкиДляПроверкиИерархииКонтрагентов.Пустой() Тогда
		ШаблонТекстаЗапроса = 
		"
		|ВЫБРАТЬ
		|	&СсылкаАвтоСкидка КАК СкидкаНаценка
		|ГДЕ
		|	&Покупатель В ИЕРАРХИИ (&ФильтрПолучательСкидки)";
	
		СчЗапросов = 0;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Покупатель", Покупатель);
		ВыборкаСкидокДляДополнительнойОбработки = СкидкиДляПроверкиИерархииКонтрагентов.Выбрать();
		СчЗапросов = 1;
		ТекстЗапроса = "";
		Пока ВыборкаСкидокДляДополнительнойОбработки.Следующий() Цикл
			ТекСкидка = ВыборкаСкидокДляДополнительнойОбработки.Ссылка;
			ТекФильтр = ВыборкаСкидокДляДополнительнойОбработки.ГруппаКонтрагентов;
			
			ТекстЗапросаТекущий = СтрЗаменить(ШаблонТекстаЗапроса, "&СсылкаАвтоСкидка", "&СсылкаАвтоСкидка"+XMLСтрока(СчЗапросов));
			ТекстЗапросаТекущий = СтрЗаменить(ТекстЗапросаТекущий, "&ФильтрПолучательСкидки", "&ФильтрПолучательСкидки"+XMLСтрока(СчЗапросов));
			Если СчЗапросов > 1 Тогда
				ТекстЗапросаТекущий = 
				"
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + ТекстЗапросаТекущий;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаТекущий;
			Запрос.УстановитьПараметр("СсылкаАвтоСкидка"+XMLСтрока(СчЗапросов), ТекСкидка);
			Запрос.УстановитьПараметр("ФильтрПолучательСкидки"+XMLСтрока(СчЗапросов), ТекФильтр);
			СчЗапросов = СчЗапросов + 1;
		КонецЦикла;
		Запрос.Текст = ТекстЗапроса;
		
		УстановитьПривилегированныйРежим(Истина);
		СкидкиПоГруппеКонтрагентов = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Пока СкидкиПоГруппеКонтрагентов.Следующий() Цикл
			СтрСкидок = ТЗСкидок.Добавить();
			СтрСкидок.СкидкаНаценка = СкидкиПоГруппеКонтрагентов.СкидкаНаценка;
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТЗСкидок;
	
КонецФункции // ПолучитьТаблицуСкидокНаценок()
#КонецОбласти

#Область ПроцедурыИФункцииРасчетаСкидок

// Процедура выполняет расчет скидок по документу.
// Вызывается из форм документов.
//
// Параметры:
// Объект - ДокументОбъект.ЧекККМ, ДокументОбъект.ЧекККМВозврат, ДокументОбъект.РасходнаяНакладная,
//     ДокументОбъект.АктВыполненныхРабот, ДокументОбъект.ЗаказПокупателя, ДокументОбъект.ОтчетОПереработке -
//         Заполняемый список
// ВходныеПараметры - Структура - Параметры расчета скидок
//
// Возвращаемое значение:
//	- Структура - Описание примененных скидок
Функция Рассчитать(Объект, ВходныеПараметры) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") ИЛИ
		ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")
	Тогда
		
		ДеревоСкидок = РассчитатьПоЧекуККМ(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ДеревоСкидок = РассчитатьПоРеализацииТоваров(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		ДеревоСкидок = РассчитатьПоСчетуНаОплату(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ДеревоСкидок = РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ДеревоСкидок = РассчитатьПоЗаказНаряду(Объект, ВходныеПараметры);
		Иначе
			ДеревоСкидок = РассчитатьПоЗаказуПокупателя(Объект, ВходныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
		
		ДеревоСкидок = РассчитатьПоОтчетуОПереработке(Объект, ВходныеПараметры);
		
	КонецЕсли;
	Если ВходныеПараметры.Свойство("СведенияДокумента") Тогда
		ДеревоСкидок.Вставить("СведенияДокумента", ВходныеПараметры.СведенияДокумента);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РасчетАвтоматическихСкидок", ВремяНачала);
	
	Возврат ДеревоСкидок;
	
КонецФункции // Рассчитать()


// Процедура выполняет расчет скидок, не применяя их к документу.
// Для строк документа, связанных с заказом, скидки получаются из заказа.
//
// Возвращаемое значение:
//	Структура - Описание скидок для последующего применения к документу 
Функция ВыполнитьРасчетСкидокНаСервере(ОбъектДляРасчета, СтруктураПараметры) Экспорт
	
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	
	// Если в ТЧ "Товары" есть заказы, то нужно автоматическую скидку для таких строк рассчитывать по заказу.
	СтруктураПараметровЗаказа = ПолучитьСтруктуруПараметровРасчетаАвтоСкидокСервер(ОбъектДляРасчета); 
	// Структура скидок нам потребуется в любом случае, но для продажи по заказу, таблица скидок будет заменена
	РасчетныеСкидки = Рассчитать(ОбъектДляРасчета, СтруктураПараметры);
	Если СтруктураПараметровЗаказа.РеализацияПоЗаказам Тогда
		// Для строк, полученных из заказа - возьмем скидки заказа, для добавленных строк - из нового расчета
		СкидкиПоЗаказу = ПолучитьСкидкиНаценкиПоЗаказу(ОбъектДляРасчета);
		Если СтруктураПараметровЗаказа.РеализацияСверхЗаказа Тогда
			Для Каждого СтрокаЗапасов Из ОбъектДляРасчета.Запасы Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаЗапасов.Заказ) Тогда                    
					// Добавим скидки для строк сверх заказа
					ОтборСкидокСтроки = Новый Структура("КлючСвязи", СтрокаЗапасов.КлючСвязи);
					СкидкиНовогоРасчета = РасчетныеСкидки.ТаблицаСкидкиНаценки.НайтиСтроки(ОтборСкидокСтроки);
					Для Каждого Скидка Из СкидкиНовогоРасчета Цикл
						ЗаполнитьЗначенияСвойств(СкидкиПоЗаказу.ТаблицаСкидкиНаценки.Добавить(), Скидка);
					КонецЦикла;
					
					// Добавим начисление бонусов по строкам сверх заказа
					Если РасчетныеСкидки.Свойство("ТаблицаБонусыКНачислению") Тогда
						БонусыНовогоРасчета = РасчетныеСкидки.ТаблицаБонусыКНачислению.НайтиСтроки(ОтборСкидокСтроки);
						Если БонусыНовогоРасчета.Количество() > 0 Тогда
							Если НЕ СкидкиПоЗаказу.Свойство("ТаблицаБонусыКНачислению") Тогда
								СкидкиПоЗаказу.Вставить("ТаблицаБонусыКНачислению", СкидкиНаценкиСервер.ПустаяТаблицаБонусов());								
							КонецЕсли;
							Для Каждого Бонус Из БонусыНовогоРасчета Цикл
								ЗаполнитьЗначенияСвойств(СкидкиПоЗаказу.ТаблицаБонусыКНачислению.Добавить(), Бонус);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТаблицаПодарковЗаказа = Неопределено;
			ТаблицаПодарковРасчета = Неопределено;
			Если СкидкиПоЗаказу.Свойство("ТаблицаПодарков", ТаблицаПодарковЗаказа)
				И РасчетныеСкидки.Свойство("ТаблицаПодарков", ТаблицаПодарковРасчета) Тогда
				// Во избежание дублирования выдачи подарков, при продаже по заказу, расчет подарков работать не будет
				// Выдаются только подарки, которые были расчитанны при заказе
				// При необходимости доработки, подразумевается перенос нужных подарков в ТаблицаПодарковЗаказа
			КонецЕсли;
		КонецЕсли;
		РасчетныеСкидки.ТаблицаСкидкиНаценки = СкидкиПоЗаказу.ТаблицаСкидкиНаценки;
		// Подарки и начисленные бонусы самостоятельно не рассчитываются, если реализация по заказу
		Если РасчетныеСкидки.Свойство("ТаблицаПодарков") Тогда
			РасчетныеСкидки.Удалить("ТаблицаПодарков");
		КонецЕсли;
		Если РасчетныеСкидки.Свойство("ТаблицаПодарковНаВыбор") Тогда
			РасчетныеСкидки.Удалить("ТаблицаПодарковНаВыбор");
		КонецЕсли;
		Если РасчетныеСкидки.Свойство("ТаблицаБонусыКНачислению") Тогда
			РасчетныеСкидки.Удалить("ТаблицаБонусыКНачислению");
		КонецЕсли;

		// Перенесем подарки и бонусы из заказа
		ТаблицаПодарков = Неопределено;
		Если СкидкиПоЗаказу.Свойство("ТаблицаПодарков", ТаблицаПодарков) Тогда
			РасчетныеСкидки.Вставить("ТаблицаПодарков", ТаблицаПодарков);
		КонецЕсли;
		ТаблицаПодарковНаВыбор = Неопределено;
		Если СкидкиПоЗаказу.Свойство("ТаблицаПодарковНаВыбор", ТаблицаПодарковНаВыбор) Тогда
			РасчетныеСкидки.Вставить("ТаблицаПодарковНаВыбор", ТаблицаПодарковНаВыбор);
		КонецЕсли;
		ТаблицаБонусыКНачислению = Неопределено;
		Если СкидкиПоЗаказу.Свойство("ТаблицаБонусыКНачислению", ТаблицаБонусыКНачислению) Тогда
			РасчетныеСкидки.Вставить("ТаблицаБонусыКНачислению", ТаблицаБонусыКНачислению);
		КонецЕсли;
		СуммаОплатыБонусами = Неопределено;
		Если СкидкиПоЗаказу.Свойство("СуммаОплатыБонусами", СуммаОплатыБонусами) Тогда
			СуммаОплатыБонусамиРасчетная = 0;
			Если РасчетныеСкидки.Свойство("СуммаОплатыБонусами", СуммаОплатыБонусамиРасчетная) Тогда
				СуммаОплатыБонусами = СуммаОплатыБонусами + СуммаОплатыБонусамиРасчетная;
			КонецЕсли;
			РасчетныеСкидки.Вставить("СуммаОплатыБонусами", СуммаОплатыБонусами);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасчетныеСкидки;
	
КонецФункции 

Функция ПолучитьСкидкиНаценкиПоЗаказу(ОбъектДляРасчета) Экспорт
	
	МассивЗаказов = Новый Массив;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДляРасчета, "ПоложениеЗаказаПокупателя") Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектДляРасчета.ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
			Если Не ЗначениеЗаполнено(ОбъектДляРасчета.ПоложениеЗаказаПокупателя) Тогда
				ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			КонецЕсли;
		Иначе
			ПоложениеЗаказаПокупателя = ОбъектДляРасчета.ПоложениеЗаказаПокупателя;
		КонецЕсли;
	Иначе
		ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	ТЧЗапасы = Неопределено;
	ИмяКолонкиЗаказ = "Заказ";
	Если ТипЗнч(ОбъектДляРасчета.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ТЧЗапасы = ОбъектДляРасчета.РаботыИУслуги;
		ИмяКолонкиЗаказ = "ЗаказПокупателя";
	Иначе
		ТЧЗапасы = ОбъектДляРасчета.Запасы;
	КонецЕсли;
	
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДляРасчета, "Заказ") Тогда
			МассивЗаказов.Добавить(ОбъектДляРасчета.Заказ);
		Иначе
			МассивЗаказов.Добавить(ОбъектДляРасчета.ЗаказПокупателя);
		КонецЕсли;
	Иначе
		ТЗЗаказов = ТЧЗапасы.Выгрузить(, ИмяКолонкиЗаказ);
		ТЗЗаказов.Свернуть(ИмяКолонкиЗаказ);
		МассивЗаказов = ТЗЗаказов.ВыгрузитьКолонку(ИмяКолонкиЗаказ);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СУММА(СкидкиНаценки.Сумма) КАК СуммаАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЗаказПокупателяЗапасы.Количество) КАК Количество,
	|	СУММА(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Цена) КАК СуммаБезСкидки,
	|	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателяЗапасы.Ссылка.Курс КАК Курс,
	|	ЗаказПокупателяЗапасы.Ссылка.Кратность КАК Кратность,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления,
	|	ЗаказПокупателяЗапасы.ПродажаПодарка КАК ЭтоПодарок,
	|	&Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ПО СкидкиНаценки.Ссылка = ЗаказПокупателяЗапасы.Ссылка
	|			И СкидкиНаценки.КлючСвязи = ЗаказПокупателяЗапасы.КлючСвязи
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента,
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.СкидкаНаценка,
	|	ЗаказПокупателяЗапасы.Ссылка.Кратность,
	|	ЗаказПокупателяЗапасы.Ссылка.Курс,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления,
	|	ЗаказПокупателяЗапасы.ПродажаПодарка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.СкидкаНаценка,
	|	СУММА(СкидкиНаценки.Сумма),
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяПодарки.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяПодарки.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяПодарки.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ЗаказПокупателяПодарки.Номенклатура,
	|	ЗаказПокупателяПодарки.Характеристика,
	|	ЗаказПокупателяПодарки.ЕдиницаИзмерения,
	|	СУММА(ЗаказПокупателяПодарки.Количество),
	|	СУММА(ЗаказПокупателяПодарки.Количество * ЗаказПокупателяПодарки.Цена),
	|	ЗаказПокупателяПодарки.Ссылка.ВалютаДокумента,
	|	ЗаказПокупателяПодарки.Ссылка.Курс,
	|	ЗаказПокупателяПодарки.Ссылка.Кратность,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления,
	|	ИСТИНА,
	|	&Комментарий
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Подарки КАК ЗаказПокупателяПодарки
	|		ПО СкидкиНаценки.Ссылка = ЗаказПокупателяПодарки.Ссылка
	|			И СкидкиНаценки.СкидкаНаценка = ЗаказПокупателяПодарки.СкидкаНаценка
	|			И (СкидкиНаценки.КлючСвязи = 0)
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)
	|
	|СГРУППИРОВАТЬ ПО
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяПодарки.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяПодарки.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяПодарки.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ЗаказПокупателяПодарки.Номенклатура,
	|	ЗаказПокупателяПодарки.Характеристика,
	|	ЗаказПокупателяПодарки.ЕдиницаИзмерения,
	|	ЗаказПокупателяПодарки.Ссылка.ВалютаДокумента,
	|	ЗаказПокупателяПодарки.Ссылка.Курс,
	|	ЗаказПокупателяПодарки.Ссылка.Кратность,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подарки.Ссылка КАК Ссылка,
	|	Подарки.НомерСтроки КАК НомерСтроки,
	|	Подарки.СкидкаНаценка КАК СкидкаНаценка,
	|	Подарки.Номенклатура КАК Номенклатура,
	|	Подарки.Характеристика КАК Характеристика,
	|	Подарки.Количество КАК Количество,
	|	Подарки.Цена КАК Цена,
	|	Подарки.Сумма КАК Сумма,
	|	Подарки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Подарки.Ячейка КАК Ячейка,
	|	Подарки.КлючСвязи КАК КлючСвязи,
	|	Подарки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК ПодарокИзСписка
	|ИЗ
	|	Документ.ЗаказПокупателя.Подарки КАК Подарки
	|ГДЕ
	|	Подарки.Ссылка В(&МассивЗаказов)
	|	И Подарки.НомерВариантаКП = Подарки.Ссылка.ОсновнойВариантКП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПокупателяЗапасы.Ссылка,
	|	0,
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка,
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	ЗаказПокупателяЗапасы.Количество,
	|	ЗаказПокупателяЗапасы.Цена,
	|	ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Цена,
	|	ЗаказПокупателяЗапасы.СтруктурнаяЕдиницаРезерв,
	|	ЗаказПокупателяЗапасы.Ячейка,
	|	0,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЛОЖЬ
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.СкидкиНаценки КАК ЗаказПокупателяСкидкиНаценки
	|		ПО ЗаказПокупателяЗапасы.Ссылка = ЗаказПокупателяСкидкиНаценки.Ссылка
	|			И ЗаказПокупателяЗапасы.КлючСвязи = ЗаказПокупателяСкидкиНаценки.КлючСвязи
	|ГДЕ
	|	ЗаказПокупателяЗапасы.КлючСвязи = ЗаказПокупателяСкидкиНаценки.КлючСвязи
	|	И ЗаказПокупателяСкидкиНаценки.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Подарок)
	|	И ЗаказПокупателяЗапасы.ПродажаПодарка
	|;	
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.Ссылка КАК Заказ,
	|	БонусныеБаллы.Ссылка.ВалютаДокумента,
	|	БонусныеБаллы.Ссылка.Курс,
	|	БонусныеБаллы.Ссылка.Кратность,
	|	БонусныеБаллы.КлючСвязи КАК КлючСвязи,
	|	БонусныеБаллы.СкидкаНаценка КАК СкидкаНаценка,
	|	БонусныеБаллы.ДатаНачисления КАК ДатаНачисления,
	|	БонусныеБаллы.ДатаСписания КАК ДатаСписания,
	|	БонусныеБаллы.КоличествоБонусныхБаллов КАК КоличествоБонусныхБаллов,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Цена КАК СуммаБезСкидки
	|ИЗ
	|	Документ.ЗаказПокупателя.БонусныеБаллыКНачислению КАК БонусныеБаллы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|		ПО ЗаказПокупателяЗапасы.Ссылка = БонусныеБаллы.Ссылка
	|			И ЗаказПокупателяЗапасы.КлючСвязи = БонусныеБаллы.КлючСвязи
	|ГДЕ
	|	БонусныеБаллы.Ссылка В(&МассивЗаказов)
	|	И БонусныеБаллы.НомерВариантаКП = БонусныеБаллы.Ссылка.ОсновнойВариантКП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	Запасы.Ссылка КАК Заказ,
	|	Запасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Партия КАК Партия,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность,
	|	Запасы.Количество * Запасы.Цена КАК СуммаБезСкидки,
	|	Запасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом 
	|ИЗ 
	|	ВТЗаказПокупателяЗапасы КАК Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО Запасы.Ссылка.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	|ГДЕ 
	|	Запасы.НомерВариантаКП = Запасы.Ссылка.ОсновнойВариантКП";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(МассивЗаказов, Запрос.МенеджерВременныхТаблиц, Истина);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ОбъектДляРасчета.Дата);
	Запрос.УстановитьПараметр("Комментарий", НСтр("ru = 'Перенесена из заказа покупателя'"));
	
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СкидкиНаценкиЗаказа = МассивРезультатов[0].Выгрузить();
	ПодаркиЗаказа 		= МассивРезультатов[1].Выгрузить();	
	БонусыЗаказа 		= МассивРезультатов[2].Выгрузить();
	ЗапасыЗаказа 		= МассивРезультатов[3].Выгрузить();	
	
	РезультатРасчетаСкидокНаценок = СкидкиНаценкиСервер.ПустаяТаблицаСкидокНаценок();
	РезультатНачисленияБонусов = СкидкиНаценкиСервер.ПустаяТаблицаБонусов();
	
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			ОбъектДляРасчета.Дата,
			Новый Структура("Валюта", ОбъектДляРасчета.ВалютаДокумента));
	
	НеПодарки = ТЧЗапасы.НайтиСтроки(Новый Структура("ПродажаПодарка", Ложь));
	ОбъектЗапасы = ТЧЗапасы.Выгрузить(НеПодарки);
	ОбъектЗапасы.Колонки.Добавить("ОсталосьРаспределить");
	// Подарки выдаем только с последней отгрузкой по заказу, во избежание путаницы
	ЗаказыНеЗавершены = Документы.ЗаказПокупателя.ЗаказыБудутЕщеОткрыты(ОбъектЗапасы, МассивЗаказов);
	ПодаркиОтложить = Новый Массив;
	СкидкиПодаркиОтложить = Новый Массив;
	Для Каждого СтрокаПодарка Из ПодаркиЗаказа Цикл
		Если ЗаказыНеЗавершены.Найти(СтрокаПодарка.Ссылка) <> Неопределено Тогда
			ПодаркиОтложить.Добавить(СтрокаПодарка);
			СтруктураОтбораПодарка = Новый Структура("СкидкаНаценка, ЭтоПодарок", СтрокаПодарка.СкидкаНаценка, Истина);
			СтрокиСкидок = СкидкиНаценкиЗаказа.НайтиСтроки(СтруктураОтбораПодарка);
			Для Каждого СтрокаСкидки Из СтрокиСкидок Цикл
				СкидкиПодаркиОтложить.Добавить(СтрокаСкидки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПодарка Из ПодаркиОтложить Цикл
		ПодаркиЗаказа.Удалить(СтрокаПодарка);
	КонецЦикла;
	Для Каждого СкидкаОтложить Из СкидкиПодаркиОтложить Цикл
		СкидкиНаценкиЗаказа.Удалить(СкидкаОтложить);
	КонецЦикла;
	
	СкидкиПромокодыОтложить = Новый Массив;
	СкидкиВыдатьПромокод = СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("СпособПредоставления", Перечисления.СпособыПредоставленияСкидокНаценок.Промокод));	
	Для Каждого СтрокаВыдатьПромокод Из СкидкиВыдатьПромокод Цикл
		Если ЗаказыНеЗавершены.Найти(СтрокаВыдатьПромокод.Заказ) <> Неопределено Тогда
			СкидкиПромокодыОтложить.Добавить(СтрокаВыдатьПромокод);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаСкидкиОтложить Из СкидкиПромокодыОтложить Цикл
		СкидкиНаценкиЗаказа.Удалить(СтрокаСкидкиОтложить);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрокаДокумента Из ОбъектЗапасы Цикл
		ТекущаяСтрокаДокумента.ОсталосьРаспределить = 
			ТекущаяСтрокаДокумента.Количество * ?(ТипЗнч(ТекущаяСтрокаДокумента.ЕдиницаИзмерения) 
			= Тип("СправочникСсылка.ЕдиницыИзмерения"), ТекущаяСтрокаДокумента.ЕдиницаИзмерения.Коэффициент, 1);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрокаЗаказа Из СкидкиНаценкиЗаказа Цикл
		
		Если ТекущаяСтрокаЗаказа.ВалютаДокумента <> ОбъектДляРасчета.ВалютаДокумента Тогда
			ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки, 
																	ТекущаяСтрокаЗаказа.Курс,
																	?(ВалютаКурсКратность.Курс = 0, 1, ВалютаКурсКратность.Курс),
																	ТекущаяСтрокаЗаказа.Кратность,
																	?(ВалютаКурсКратность.Кратность = 0, 1, ВалютаКурсКратность.Кратность));
		КонецЕсли;
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить(ИмяКолонкиЗаказ, ТекущаяСтрокаЗаказа.Заказ);
		СтруктураДляПоиска.Вставить("Номенклатура", ТекущаяСтрокаЗаказа.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", ТекущаяСтрокаЗаказа.Характеристика);
		
		МассивСтрокДокумента = ОбъектЗапасы.НайтиСтроки(СтруктураДляПоиска);
		Если ТекущаяСтрокаЗаказа.ЭтоПодарок Тогда
			// Подарок сначала добавляется в отдельную табличную часть.
			// Вторым этапом происохдит перенос в Запасы, если необходимо, 
			// И тогда скидка будет связана с этой строкой по ключу связи
			СтрокаСкидки = РезультатРасчетаСкидокНаценок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, ТекущаяСтрокаЗаказа);
			СтрокаСкидки.КлючСвязи = 0;
			Продолжить;
		ИначеЕсли МассивСтрокДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрокаЗаказа.ВалютаДокумента <> ОбъектДляРасчета.ВалютаДокумента Тогда
			СуммаВЗаказе = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(ТекущаяСтрокаЗаказа.СуммаБезСкидки, 
																	ТекущаяСтрокаЗаказа.Курс,
																	?(ВалютаКурсКратность.Курс = 0, 1, ВалютаКурсКратность.Курс),
																	ТекущаяСтрокаЗаказа.Кратность,
																	?(ВалютаКурсКратность.Кратность = 0, 1, ВалютаКурсКратность.Кратность));
		Иначе
			СуммаВЗаказе = ТекущаяСтрокаЗаказа.СуммаБезСкидки;
		КонецЕсли; 
		
		Если СуммаВЗаказе = 0 Тогда
			Продолжить;
		КонецЕсли;
		ОстатокСкидкиКРаспределению = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки;
		ОстатокКоличестваКРаспределению = ТекущаяСтрокаЗаказа.Количество;

		Для Каждого ТекущаяСтрокаДокумента Из МассивСтрокДокумента Цикл
			
			СуммаКСписанию = ТекущаяСтрокаДокумента.Количество * ТекущаяСтрокаДокумента.Цена;
			
			ПересчитатьСуммы = ТекущаяСтрокаДокумента.Количество <> ТекущаяСтрокаЗаказа.Количество;
			
			КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, ТекущаяСтрокаДокумента.Количество / ТекущаяСтрокаЗаказа.Количество, 1);
			Если КоэффициентПересчетаСкидки = 1 Тогда
				ТекущаяСуммаАвтоматическойСкидки = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки;
			Иначе
				ТекущаяСуммаАвтоматическойСкидки = ОКР(ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки, 2);
			КонецЕсли;
		
			СтрокаСкидки = РезультатРасчетаСкидокНаценок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, ТекущаяСтрокаЗаказа);
			Если ТекущаяСуммаАвтоматическойСкидки > 0 Тогда
				СтрокаСкидки.Сумма = Мин(ТекущаяСуммаАвтоматическойСкидки, ОстатокСкидкиКРаспределению);
				ОстатокСкидкиКРаспределению = Макс(0, ОстатокСкидкиКРаспределению - ТекущаяСуммаАвтоматическойСкидки);
			Иначе
				СтрокаСкидки.Сумма = Макс(ТекущаяСуммаАвтоматическойСкидки, ОстатокСкидкиКРаспределению);
				ОстатокСкидкиКРаспределению = Мин(0, ОстатокСкидкиКРаспределению - ТекущаяСуммаАвтоматическойСкидки);
			КонецЕсли;
			СтрокаСкидки.КлючСвязи = ТекущаяСтрокаДокумента.КлючСвязи;
			ОстатокКоличестваКРаспределению = ОстатокКоличестваКРаспределению - ТекущаяСтрокаДокумента.Количество;
			Если ОстатокКоличестваКРаспределению = 0 Тогда
				СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + ОстатокСкидкиКРаспределению;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрокаНачисленияБонусовЗаказа Из БонусыЗаказа Цикл
			
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить(ИмяКолонкиЗаказ, ТекущаяСтрокаНачисленияБонусовЗаказа.Заказ);
		СтруктураДляПоиска.Вставить("Номенклатура", ТекущаяСтрокаНачисленияБонусовЗаказа.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", ТекущаяСтрокаНачисленияБонусовЗаказа.Характеристика);
		Если Не ОбъектЗапасы.Колонки.Найти("Партия") = Неопределено Тогда
			СтруктураДляПоиска.Вставить("Партия", ТекущаяСтрокаНачисленияБонусовЗаказа.Партия);
		КонецЕсли;
			
		МассивСтрокДокумента = ОбъектЗапасы.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрокаНачисленияБонусовЗаказа.ВалютаДокумента <> ОбъектДляРасчета.ВалютаДокумента Тогда
			СуммаВЗаказе = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(ТекущаяСтрокаНачисленияБонусовЗаказа.СуммаБезСкидки, 
																	ТекущаяСтрокаНачисленияБонусовЗаказа.Курс,
																	?(ВалютаКурсКратность.Курс = 0, 1, ВалютаКурсКратность.Курс),
																	ТекущаяСтрокаЗаказа.Кратность,
																	?(ВалютаКурсКратность.Кратность = 0, 1, ВалютаКурсКратность.Кратность));
		Иначе
			СуммаВЗаказе = ТекущаяСтрокаНачисленияБонусовЗаказа.СуммаБезСкидки;
		КонецЕсли; 
		
		Если СуммаВЗаказе = 0 Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого ТекущаяСтрокаДокумента Из МассивСтрокДокумента Цикл
			
			СуммаКСписанию = ТекущаяСтрокаДокумента.Количество * ТекущаяСтрокаДокумента.Цена;
			
			ПересчитатьСуммы = СуммаВЗаказе <> СуммаКСписанию;
			
			КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, СуммаКСписанию / СуммаВЗаказе, 1);
			Если КоэффициентПересчетаСкидки <> 1 Тогда
				ТекущееКоличествоБаллов = ОКР(ТекущаяСтрокаНачисленияБонусовЗаказа.КоличествоБонусныхБаллов * КоэффициентПересчетаСкидки, 2);
			Иначе
				ТекущееКоличествоБаллов = ТекущаяСтрокаНачисленияБонусовЗаказа.КоличествоБонусныхБаллов;
			КонецЕсли;
		
			НачислениеБаллов = РезультатНачисленияБонусов.Добавить();
			ЗаполнитьЗначенияСвойств(НачислениеБаллов, ТекущаяСтрокаНачисленияБонусовЗаказа);
			НачислениеБаллов.КоличествоБонусныхБаллов = ТекущееКоличествоБаллов;
			НачислениеБаллов.КлючСвязи = ТекущаяСтрокаДокумента.КлючСвязи;
			ТекущаяСтрокаНачисленияБонусовЗаказа.КоличествоБонусныхБаллов = Макс(0, ТекущаяСтрокаНачисленияБонусовЗаказа.КоличествоБонусныхБаллов - ТекущееКоличествоБаллов);
			
		КонецЦикла;
		
	КонецЦикла;
	СуммаОплатыБонусами = 0;
	Для Каждого ТекущаяСтрокаЗаказа Из ЗапасыЗаказа Цикл
		
		Если ТекущаяСтрокаЗаказа.СуммаСкидкиОплатыБонусом = 0 Тогда 
			Продолжить;
		КонецЕсли;
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить(ИмяКолонкиЗаказ, ТекущаяСтрокаЗаказа.Заказ);
		СтруктураДляПоиска.Вставить("Номенклатура", ТекущаяСтрокаЗаказа.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", ТекущаяСтрокаЗаказа.Характеристика);
		
		МассивСтрокДокумента = ОбъектЗапасы.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрокаЗаказа.ВалютаДокумента <> ОбъектДляРасчета.ВалютаДокумента Тогда
			СуммаВЗаказе = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(ТекущаяСтрокаЗаказа.СуммаБезСкидки, 
																	ТекущаяСтрокаЗаказа.Курс,
																	?(ВалютаКурсКратность.Курс = 0, 1, ВалютаКурсКратность.Курс),
																	ТекущаяСтрокаЗаказа.Кратность,
																	?(ВалютаКурсКратность.Кратность = 0, 1, ВалютаКурсКратность.Кратность));
		Иначе
			СуммаВЗаказе = ТекущаяСтрокаЗаказа.СуммаБезСкидки;
		КонецЕсли;
		
		Если СуммаВЗаказе = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяСтрокаДокумента Из МассивСтрокДокумента Цикл
			
			СуммаКСписанию = ТекущаяСтрокаДокумента.Количество * ТекущаяСтрокаДокумента.Цена;
			
			ПересчитатьСуммы = СуммаВЗаказе <> СуммаКСписанию;
			
			КоэффициентОплатыБонусами = ?(ПересчитатьСуммы, СуммаКСписанию / СуммаВЗаказе, 1);
			СуммаОплатыБонусамиСтроки = 0;
			Если КоэффициентОплатыБонусами <> 1 Тогда
				СуммаОплатыБонусамиСтроки = ОКР(ТекущаяСтрокаЗаказа.СуммаСкидкиОплатыБонусом * КоэффициентОплатыБонусами, 2);
			Иначе
				СуммаОплатыБонусамиСтроки = ТекущаяСтрокаЗаказа.СуммаСкидкиОплатыБонусом;
			КонецЕсли;
			СуммаОплатыБонусами = СуммаОплатыБонусами + СуммаОплатыБонусамиСтроки;
			ТекущаяСтрокаЗаказа.СуммаСкидкиОплатыБонусом = Макс(0, ТекущаяСтрокаЗаказа.СуммаСкидкиОплатыБонусом - СуммаОплатыБонусамиСтроки);
					
		КонецЦикла;
		
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСкидкиНаценки", РезультатРасчетаСкидокНаценок);
	Результат.Вставить("ТаблицаПодарков", ПодаркиЗаказа);
	Результат.Вставить("ТаблицаБонусыКНачислению", РезультатНачисленияБонусов);
	Результат.Вставить("СуммаОплатыБонусами", СуммаОплатыБонусами);
	
	Возврат Результат;
	
КонецФункции 

Функция ПолучитьСтруктуруПараметровРасчетаАвтоСкидокСервер(ОбъектДляРасчета, Знач ИмяТЧПродажиПоЗаказам = Неопределено)

	СтруктураПараметровЗаказа = Новый Структура("РеализацияПоЗаказам, РеализацияСверхЗаказа", Ложь, Ложь);
	
	Если ТипЗнч(ОбъектДляРасчета.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		// Заказ покупателя не формируется на основании других заказов покупателя
		Возврат СтруктураПараметровЗаказа;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДляРасчета, "ПоложениеЗаказаПокупателя") Тогда
		
		Возврат СтруктураПараметровЗаказа;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектДляРасчета.ПоложениеЗаказаПокупателя) Тогда
		ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
	Иначе
		ПоложениеЗаказаПокупателя = ОбъектДляРасчета.ПоложениеЗаказаПокупателя;
	КонецЕсли;
	
	Если ИмяТЧПродажиПоЗаказам = Неопределено Тогда
		Если ТипЗнч(ОбъектДляРасчета.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда 
			ИмяТЧПродажиПоЗаказам = "РаботыИУслуги";
		Иначе
			ИмяТЧПродажиПоЗаказам = "Запасы";
		КонецЕсли;
	КонецЕсли;
	
	ИмяРеквизитаЗаказ = "Заказ";
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДляРасчета, ИмяРеквизитаЗаказ) Тогда
			ИмяРеквизитаЗаказ = "ЗаказПокупателя";
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектДляРасчета[ИмяРеквизитаЗаказ]) Тогда
			СтруктураПараметровЗаказа.РеализацияПоЗаказам = Истина;
		Иначе
			СтруктураПараметровЗаказа.РеализацияПоЗаказам = Ложь;
		КонецЕсли;
		СтруктураПараметровЗаказа.РеализацияСверхЗаказа = Ложь;
	ИначеЕсли ОбъектДляРасчета[ИмяТЧПродажиПоЗаказам].Количество() > 0 Тогда
		ТЧЗапасы = ОбъектДляРасчета[ИмяТЧПродажиПоЗаказам].Выгрузить();
		Если ТЧЗапасы.Колонки.Найти(ИмяРеквизитаЗаказ) = Неопределено Тогда
			ИмяРеквизитаЗаказ = "ЗаказПокупателя";
		КонецЕсли; 
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДокументЗапасы.Заказ КАК Заказ
			|ПОМЕСТИТЬ ВТ_Запасы
			|ИЗ
			|	&Запасы КАК ДокументЗапасы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Запасы.Заказ КАК Заказ
			|ИЗ
			|	ВТ_Запасы КАК ВТ_Запасы";
		Запрос.Текст = стрЗаменить(ТекстЗапроса, "ДокументЗапасы.Заказ ","ДокументЗапасы." + ИмяРеквизитаЗаказ + " ");
		Запрос.УстановитьПараметр("Запасы", ТЧЗапасы);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Заказ) Тогда
				СтруктураПараметровЗаказа.РеализацияПоЗаказам = Истина;
			Иначе
				СтруктураПараметровЗаказа.РеализацияСверхЗаказа = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметровЗаказа;
	
КонецФункции // ПолучитьСтруктуруПараметровРасчетаАвтоСкидокСервер()

#КонецОбласти

#Область ПроцедурыРасчетаСкидокНаценокПоДокументам

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаКурсыВалют() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта    КАК Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ
	|	КурсыВалют
	|";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "КурсыВалют");
	
КонецФункции

#КонецОбласти

#Область ОтображениеСкидки

// Обновляет табличную Части скидки
//
// Параметры:
//  Объект - ДокументОбъект - Чек ККМ или Реализация Товаров
//  ИмяОсновнойТЧ - Строка - Имя табличной части
//  ИмяТЧ - Строка - Имя табличной части
//
Процедура ОбновитьОтображениеСкидки(Объект, ИмяОсновнойТЧ = "Товары", ИмяТЧ = "СкидкиНаценки") Экспорт

	ОсновнаяТаблица = Объект[ИмяОсновнойТЧ].Выгрузить();
	
	Для каждого СтрокаСкидкиНаценки Из Объект[ИмяТЧ] Цикл
		
		КлючСвязи = СтрокаСкидкиНаценки.КлючСвязи;
		
		СтрокаОсновнойТаблицы = ОсновнаяТаблица.Найти(КлючСвязи, "КлючСвязи");
		
		Если НЕ СтрокаОсновнойТаблицы = Неопределено Тогда
			
			СтрокаСкидкиНаценки.Номенклатура               = СтрокаОсновнойТаблицы.Номенклатура;
			СтрокаСкидкиНаценки.Характеристика             = СтрокаОсновнойТаблицы.Характеристика;
			СтрокаСкидкиНаценки.НомерСтрокиОсновойТаблицы  = СтрокаОсновнойТаблицы.НомерСтроки;
			СтрокаСкидкиНаценки.ХарактеристикиИспользуются = СтрокаОсновнойТаблицы.Номенклатура.ИспользоватьХарактеристики;
			
		КонецЕсли;
		
		СтрокаСкидкиНаценки.СкидкаЗапрещенаКПросмотру = НЕ ПроверитьДоступКРеквизиту(СтрокаСкидкиНаценки, "СкидкаНаценка", "Справочник.АвтоматическиеСкидки");
		
	КонецЦикла;
	

КонецПроцедуры // ОбновитьОтображениеСкидки()

// Проверка доступа к реквизиту объекта
//
Функция ПроверитьДоступКРеквизиту(Объект, ИмяРеквизита, ИмяТаблицыЗначений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступныеЗначенияРеквизита.Ссылка
	|ИЗ
	|	" + ИмяТаблицыЗначений + " КАК ДоступныеЗначенияРеквизита";
	
	Результат = Запрос.Выполнить();
	МассивРазрешенныхЗначенийРеквизита = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеРеквизита = Объект[ИмяРеквизита];
	
	Возврат МассивРазрешенныхЗначенийРеквизита.Найти(ЗначениеРеквизита) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуТовары(ТаблицаТоваров, пСоответствиеРеквизитов = Неопределено, пМассивУдаляемыхРеквизитов = Неопределено, ТаблицаРабот = Неопределено, ЕстьСкидкаБонусами = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.КлючСвязи КАК КлючСвязи,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабличнаяЧасть.ПродажаПодарка КАК ПродажаПодарка,
	|	ТабличнаяЧасть.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТабличнаяЧасть.Ответственный КАК Ответственный,
	|	ТабличнаяЧасть.Заказ КАК Заказ,	
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ТабличнаяЧасть.Цена КАК Цена,
	|	ТабличнаяЧасть.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ТабличнаяЧасть.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
	|	ТабличнаяЧасть.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&РасходнаяНакладнаяЗапасы КАК ТабличнаяЧасть";
	
	Запрос.Текст = Запрос.Текст + "
	|
	|;
	|";
	
	Если ТаблицаРабот <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.КлючСвязиДляСкидокНаценок КАК КлючСвязи,
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Заказ КАК Заказ,
		|	ТабличнаяЧасть.Количество КАК Количество,
		|	ТабличнаяЧасть.Коэффициент КАК Коэффициент,
		|	ТабличнаяЧасть.Кратность КАК Кратность,
		|	ТабличнаяЧасть.Цена КАК Цена,
		|	ТабличнаяЧасть.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	ТабличнаяЧасть.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,		
		|	ТабличнаяЧасть.СтавкаНДС КАК СтавкаНДС,
		|	ТабличнаяЧасть.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаРаботы
		|ИЗ
		|	&РасходнаяНакладнаяРаботы КАК ТабличнаяЧасть
		|ГДЕ
		|	&ЕстьРаботы";
		
		Запрос.Текст = Запрос.Текст + "
		|
		|;
		|";
	КонецЕсли;
	
	Если пСоответствиеРеквизитов <> Неопределено Тогда
		Для Каждого КлючЗначение Из пСоответствиеРеквизитов Цикл
			Запрос.Текст = СтрЗаменить(Запрос.Текст, КлючЗначение.Ключ + " КАК", КлючЗначение.Значение + " КАК");
		КонецЦикла;
	КонецЕсли;
	
	// Скидки-Подарки
	Если ТипЗнч(ТаблицаТоваров) = Тип("ТаблицаЗначений") 
		И ТаблицаТоваров.Колонки.Найти("ПродажаПодарка") = Неопределено Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "ТабличнаяЧасть.ПродажаПодарка", "Ложь");
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ВременнаяТаблица.КлючСвязи КАК КлючСвязи,
	|	ВременнаяТаблица.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблица.Характеристика КАК Характеристика,
	|	ВременнаяТаблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВременнаяТаблица.ПродажаПодарка КАК ПродажаПодарка,
	|	ВременнаяТаблица.Ответственный КАК Ответственный,
	|	ВременнаяТаблица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблица.Заказ КАК Заказ,
	|	ВременнаяТаблица.Количество КАК Количество,
	|	ВременнаяТаблица.Количество * ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблица.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ВременнаяТаблица.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоВБазовыхЕдиницах,
	|	ВременнаяТаблица.Цена КАК Цена,
	|	ВременнаяТаблица.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ВременнаяТаблица.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,	
	|	ВременнаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблица.Сумма КАК Сумма
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|ГДЕ
	|	ВременнаяТаблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ ВременнаяТаблица.ПродажаПодарка";
	
	Если ТаблицаРабот <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВременнаяТаблицаРаботы.КлючСвязи КАК КлючСвязи,
		|	ВременнаяТаблицаРаботы.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаРаботы.Характеристика КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|	ЛОЖЬ КАК ПродажаПодарка,
		// Для заказ-наряда ответственный должен быть передан в составе реквизитов к удалению, в ТЧ с работами его нет.
		//|	ВременнаяТаблицаРаботы.Ответственный КАК Ответственный,
		|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК СтруктурнаяЕдиница,
		|	ВременнаяТаблицаРаботы.Заказ КАК Заказ,
		|	ВременнаяТаблицаРаботы.Количество * ВременнаяТаблицаРаботы.Коэффициент * ВременнаяТаблицаРаботы.Кратность КАК Количество,
		|	ВременнаяТаблицаРаботы.Количество * ВременнаяТаблицаРаботы.Коэффициент * ВременнаяТаблицаРаботы.Кратность КАК КоличествоВБазовыхЕдиницах,
		|	ВременнаяТаблицаРаботы.Цена КАК Цена,
		|	ВременнаяТаблицаРаботы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	ВременнаяТаблицаРаботы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
		|	ВременнаяТаблицаРаботы.СтавкаНДС КАК СтавкаНДС,
		|	ВременнаяТаблицаРаботы.Сумма КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РасходнаяНакладнаяЗапасы", ТаблицаТоваров);
	Запрос.УстановитьПараметр("РасходнаяНакладнаяРаботы", ?(ТаблицаРабот = Неопределено, Новый ТаблицаЗначений, ТаблицаРабот));
	Запрос.УстановитьПараметр("ЕстьРаботы", ТаблицаРабот <> Неопределено);
	

	Если пМассивУдаляемыхРеквизитов <> Неопределено Тогда
		Для Каждого ТекущееЗначение Из пМассивУдаляемыхРеквизитов Цикл
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ТабличнаяЧасть."+ТекущееЗначение+" КАК "+ТекущееЗначение, "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ВременнаяТаблица."+ТекущееЗначение+" КАК "+ТекущееЗначение, "");
			
			// Для заказ-наряда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ВременнаяТаблицаРаботы."+ТекущееЗначение+" КАК "+ТекущееЗначение, "");
		КонецЦикла;
	КонецЕсли;

	Если Не ЕстьСкидкаБонусами Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабличнаяЧасть.СуммаСкидкиОплатыБонусом", "0");		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Функция выполняет расчет скидок по заказу покупателя.
//
Функция РассчитатьПоЗаказуПокупателя(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	// Обработка табличной части "Запасы".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Ответственный");
	
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("ТабличнаяЧасть.Заказ", "Значение(Документ.ЗаказПокупателя.ПустаяСсылка)");
	СоответствиеРеквизитов.Вставить("СтруктурнаяЕдиница", "СтруктурнаяЕдиницаРезерв");
	
	ОтборСтрок = Неопределено;
	Если Не ВходныеПараметры.Свойство("ОтборСтрок", ОтборСтрок)
		ИЛИ Не ТипЗнч(ОтборСтрок) = Тип("Структура") Тогда
		ОтборСтрок = Новый Структура;
	КонецЕсли;
	
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить(ОтборСтрок),СоответствиеРеквизитов, МассивУдаляемыхРеквизитов, , Истина);
	МассивСтрокУправляемыхСкидок = Новый Массив;
	Если ОтборСтрок.Свойство("НомерВариантаКП") Тогда
		МассивСтрокУправляемыхСкидок = Объект.ВыбранныеУправляемыеСкидки.НайтиСтроки(Новый Структура("НомерВариантаКП", ОтборСтрок.НомерВариантаКП));
	КонецЕсли;
	ВыбранныеУправляемыеСкидки = Объект.ВыбранныеУправляемыеСкидки.Выгрузить(МассивСтрокУправляемыхСкидок);
	
	СтруктураДополнительныхПараметров = Новый Структура("ПрименитьОбщийВидЦен, СкладТолькоВТЧ, СкладВШапке", НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"), Ложь, Неопределено);
	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы", СтруктураДополнительныхПараметров);

	РасчетПодарков = Неопределено;
	Если НЕ ВходныеПараметры.Свойство("РасчетПодарков", РасчетПодарков) Тогда
		РасчетПодарков = Истина;
	КонецЕсли;
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценок(Объект, ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Опт")));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиницаРезерв);
	
	ПараметрыРасчета.Вставить("СкладПродажи" , Объект.СтруктурнаяЕдиницаПродажи);
	ПараметрыРасчета.Вставить("ВидЦен",        Объект.ВидЦен);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",Объект.ДисконтнаяКарта.Владелец);
	ПараметрыРасчета.Вставить("РасчетПодарков",	   РасчетПодарков);
	ПараметрыРасчета.Вставить("РасчетСообщений",   Истина);
	ПараметрыРасчета.Вставить("ЕстьПодаркиВТЧ",    Истина);
	ПараметрыРасчета.Вставить("ПромокодыСкидок",   Объект.ПримененныеПромокоды.Выгрузить());
	ПараметрыРасчета.Вставить("ГраницаДокумента",  Новый Граница(Новый МоментВремени(ТекущаяДатаОбъекта, Объект.Ссылка), ВидГраницы.Исключая));
	ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", ВыбранныеУправляемыеСкидки);
	ПараметрыРасчета.Вставить("ДанныеДляПроизвольныхУсловий", Справочники.УсловияПредоставленияСкидокНаценок.ПодготовитьОписаниеОбъектаПроизвольныхУсловий(Объект, Товары));
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		ТаблицаПодарков = ПримененныеСкидкиНаценки.ТаблицаПодарков;
		ТаблицаПодарковНаВыбор = ТаблицаПодарков.СкопироватьКолонки();
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ТаблицаПодарков, ТаблицаПодарковНаВыбор);
		Если ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
			ПримененныеСкидкиНаценки.Вставить("ТаблицаПодарковНаВыбор", ТаблицаПодарковНаВыбор);
		КонецЕсли;
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки,,,, ПримененныеСкидкиНаценки.ДеревоСкидок);
		
		Если ВходныеПараметры.Свойство("БонуснаяПрограмма") И ПримененныеСкидкиНаценки.Свойство("ТаблицаБонусыКНачислению") Тогда
			РаботаСБонусами.ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, ПримененныеСкидкиНаценки.ТаблицаБонусыКНачислению);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЗаказуПокупателя()

// Функция выполняет расчет скидок по заказу покупателя.
//
Функция РассчитатьПоЗаказНаряду(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы", "Работы");
	
	// Обработка табличной части "Запасы".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Ответственный");
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("ТабличнаяЧасть.Заказ", "Значение(Документ.ЗаказПокупателя.ПустаяСсылка)");
	СоответствиеРеквизитов.Вставить("СтруктурнаяЕдиница", "СтруктурнаяЕдиницаРезерв");
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить(), СоответствиеРеквизитов, МассивУдаляемыхРеквизитов, Объект.Работы.Выгрузить(), Истина);

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы"); 
	СтруктураДополнительныхПараметров = Новый Структура("ПрименитьОбщийВидЦен, СкладТолькоВТЧ, СкладВШапке", Ложь, Ложь, Истина);
	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Работы", СтруктураДополнительныхПараметров);

	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьБонусы", Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценок(Объект, ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Опт")));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.СтруктурнаяЕдиницаРезерв);
	ПараметрыРасчета.Вставить("ВидЦен",        Объект.ВидЦен);
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.СтруктурнаяЕдиницаПродажи);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",Объект.ДисконтнаяКарта.Владелец);
	ПараметрыРасчета.Вставить("РасчетПодарков",    Ложь);
	ПараметрыРасчета.Вставить("РасчетСообщений",   Ложь);
	ПараметрыРасчета.Вставить("ПромокодыСкидок",   Объект.ПримененныеПромокоды.Выгрузить());
	ПараметрыРасчета.Вставить("ГраницаДокумента", 		Новый Граница(Новый МоментВремени(ТекущаяДатаОбъекта, Объект.Ссылка), ВидГраницы.Исключая));
	ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", Объект.ВыбранныеУправляемыеСкидки.Выгрузить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, , , "Работы", ПримененныеСкидкиНаценки.ДеревоСкидок);
		
		Если ВходныеПараметры.Свойство("БонуснаяПрограмма") И ПримененныеСкидкиНаценки.Свойство("ТаблицаБонусыКНачислению") Тогда
			РаботаСБонусами.ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, ПримененныеСкидкиНаценки.ТаблицаБонусыКНачислению);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЗаказуПокупателя()

// Функция получает текущее время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущееВремяОбъекта(Объект)
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	ТекущееВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
	
	Возврат ТекущееВремя;
	
КонецФункции // ПолучитьТекущееВремяОбъекта()

// Функция выполняет расчет скидок по чеку ККМ.
//
Функция РассчитатьПоЧекуККМ(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	// Обработка табличной части "Запасы".
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить(),,,, Истина);

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы");

	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	РасчетПодарков = Неопределено;
	Если НЕ ВходныеПараметры.Свойство("РасчетПодарков", РасчетПодарков) Тогда
		РасчетПодарков = Истина;
	КонецЕсли;
	ПредъявленныеПромокоды = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Промокоды = Неопределено;
	Если ТипЗнч(Объект.ПримененныеПромокоды) = Тип("ТаблицаЗначений") Тогда
		Промокоды = Объект.ПримененныеПромокоды.Скопировать(ПредъявленныеПромокоды);
	Иначе
		Промокоды = Объект.ПримененныеПромокоды.Выгрузить(ПредъявленныеПромокоды);
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки",			ПолучитьТаблицуСкидокНаценок(Объект, ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Розница")));
	ПараметрыРасчета.Вставить("Регистратор",			Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин",				Объект.СтруктурнаяЕдиница);
	ПараметрыРасчета.Вставить("ВидЦен",        			Объект.ВидЦен);
	ПараметрыРасчета.Вставить("СкладПродажи",			Объект.Подразделение);
	ПараметрыРасчета.Вставить("Товары",					Товары);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",			Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",			ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",				Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",			ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",		Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",		Объект.ДисконтнаяКарта.Владелец);
	ПараметрыРасчета.Вставить("РасчетПодарков", 		РасчетПодарков);
	ПараметрыРасчета.Вставить("РасчетСообщений", 		Истина);
	ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления", Ложь);
	ПараметрыРасчета.Вставить("ЕстьПодаркиВТЧ", 		Истина);
	СтрокиПредъявленныйПромокод = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	ПараметрыРасчета.Вставить("ПромокодыСкидок",   		Объект.ПримененныеПромокоды.Выгрузить(СтрокиПредъявленныйПромокод));
	ПараметрыРасчета.Вставить("ГраницаДокумента", 		Новый Граница(Новый МоментВремени(ТекущаяДатаОбъекта, Объект.Ссылка), ВидГраницы.Исключая));	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", Объект.ВыбранныеУправляемыеСкидки.Выгрузить());
	Иначе
		ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", СкидкиНаценкиСервер.ПустаяТаблицаУправляемыхСкидок());
	КонецЕсли;
	ПараметрыРасчета.Вставить("ДанныеДляПроизвольныхУсловий", Справочники.УсловияПредоставленияСкидокНаценок.ПодготовитьОписаниеОбъектаПроизвольныхУсловий(Объект, Товары));
		
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		Если ВходныеПараметры.Свойство("БонуснаяПрограмма") Тогда
			РаботаСБонусами.ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, ПримененныеСкидкиНаценки.ТаблицаБонусыКНачислению);
		Иначе
			
			ТаблицаПодарков = ПримененныеСкидкиНаценки.ТаблицаПодарков;
			ТаблицаПодарковНаВыбор = ТаблицаПодарков.СкопироватьКолонки();
			СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ТаблицаПодарков, ТаблицаПодарковНаВыбор);
			Если ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
				ПримененныеСкидкиНаценки.Вставить("ТаблицаПодарковНаВыбор", ТаблицаПодарковНаВыбор);
			КонецЕсли;
			
			СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, , , , ПримененныеСкидкиНаценки.ДеревоСкидок);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЧекуККМ()

// Функция выполняет расчет скидок по реализации товаров.
//
Функция РассчитатьПоРеализацииТоваров(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	Если ВходныеПараметры.Свойство("РеализацияСверхЗаказа") Тогда
		РеализацияСверхЗаказа = ВходныеПараметры.РеализацияСверхЗаказа;
	Иначе
		РеализацияСверхЗаказа = Ложь;
	КонецЕсли;
	
	// Обработка табличной части "Запасы".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Ответственный");
	СоответствиеРеквизитов = Новый Соответствие;
	//СоответствиеРеквизитов.Вставить("Заказ", "ЗаказПокупателя");	
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить(), СоответствиеРеквизитов, МассивУдаляемыхРеквизитов,, Истина);

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы");

	Если РеализацияСверхЗаказа Тогда
		ТоварыСверхЗаказа = Товары.СкопироватьКолонки();
		
		Для каждого ТекущаяСтрока Из Товары Цикл
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
				НоваяСтрока = ТоварыСверхЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТоварыСверхЗаказа = "";
	КонецЕсли;
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	РасчетПодарков = Неопределено;
	Если НЕ ВходныеПараметры.Свойство("РасчетПодарков", РасчетПодарков) Тогда
		РасчетПодарков = Истина;
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки",     ПолучитьТаблицуСкидокНаценок(Объект, ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Опт")));
	ПараметрыРасчета.Вставить("Регистратор",       Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин",           Объект.СтруктурнаяЕдиница);
	ПараметрыРасчета.Вставить("ВидЦен",            Объект.ВидЦен);
	
	ПараметрыРасчета.Вставить("СкладПродажи",      Объект.Подразделение);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",Объект.ДисконтнаяКарта.Владелец);
	ПараметрыРасчета.Вставить("РасчетПодарков",    РасчетПодарков);
	ПараметрыРасчета.Вставить("РасчетСообщений",   Истина);
	ПараметрыРасчета.Вставить("ЕстьПодаркиВТЧ",    Истина);	
	СтрокиПредъявленныйПромокод = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	ПараметрыРасчета.Вставить("ПромокодыСкидок",   Объект.ПримененныеПромокоды.Выгрузить(СтрокиПредъявленныйПромокод));
	ПараметрыРасчета.Вставить("ГраницаДокумента",  Новый Граница(Новый МоментВремени(ТекущаяДатаОбъекта, Объект.Ссылка), ВидГраницы.Исключая));
	ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", Объект.ВыбранныеУправляемыеСкидки.Выгрузить());
	ПараметрыРасчета.Вставить("ДанныеДляПроизвольныхУсловий", Справочники.УсловияПредоставленияСкидокНаценок.ПодготовитьОписаниеОбъектаПроизвольныхУсловий(Объект, Товары));
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ТаблицаПодарков = ПримененныеСкидкиНаценки.ТаблицаПодарков;
		ТаблицаПодарковНаВыбор = ТаблицаПодарков.СкопироватьКолонки();
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ТаблицаПодарков, ТаблицаПодарковНаВыбор);
		Если ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
			ПримененныеСкидкиНаценки.Вставить("ТаблицаПодарковНаВыбор", ТаблицаПодарковНаВыбор);
		КонецЕсли;
		
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, РеализацияСверхЗаказа, ТоварыСверхЗаказа, , ПримененныеСкидкиНаценки.ДеревоСкидок);
		
		Если ВходныеПараметры.Свойство("БонуснаяПрограмма") И ПримененныеСкидкиНаценки.Свойство("ТаблицаБонусыКНачислению") Тогда
			РаботаСБонусами.ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, ПримененныеСкидкиНаценки.ТаблицаБонусыКНачислению);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Функция выполняет расчет скидок по отчету о переработке.
//
Функция РассчитатьПоОтчетуОПереработке(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Продукция");
	
	Если ВходныеПараметры.Свойство("РеализацияСверхЗаказа") Тогда
		РеализацияСверхЗаказа = ВходныеПараметры.РеализацияСверхЗаказа;
	Иначе
		РеализацияСверхЗаказа = Ложь;
	КонецЕсли;
	
	// Обработка табличной части "Продукция".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Заказ");
	МассивУдаляемыхРеквизитов.Добавить("Ответственный");
	МассивУдаляемыхРеквизитов.Добавить("СтруктурнаяЕдиница");

	Товары = ПолучитьТаблицуТовары(Объект.Продукция.Выгрузить(),, МассивУдаляемыхРеквизитов);

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Продукция");

	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьБонусы", Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки", 		ПолучитьТаблицуСкидокНаценок(Объект, ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Опт")));
	ПараметрыРасчета.Вставить("Регистратор", 		Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин", 			Объект.СтруктурнаяЕдиница);
	ПараметрыРасчета.Вставить("ВидЦен",        		Объект.ВидЦен);
	ПараметрыРасчета.Вставить("СкладПродажи", 		Объект.Подразделение);
	
	ПараметрыРасчета.Вставить("Товары",            	Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   	Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  	Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      	Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       	ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("РасчетПодарков", 	Ложь);
	ПараметрыРасчета.Вставить("РасчетСообщений", 	Ложь);
	ПараметрыРасчета.Вставить("ДатаРождения",      	ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   	Неопределено);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",	Неопределено);
	ПараметрыРасчета.Вставить("ЕстьПодаркиВТЧ",    	Ложь);
	ПараметрыРасчета.Вставить("ГраницаДокумента",  	Новый Граница(Новый МоментВремени(ТекущаяДатаОбъекта, Объект.Ссылка), ВидГраницы.Исключая));
	ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", Объект.ВыбранныеУправляемыеСкидки.Выгрузить());
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Продукция", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, , , ,ПримененныеСкидкиНаценки.ДеревоСкидок);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Функция выполняет расчет скидок по СчетуНаОплату.
//
Функция РассчитатьПоСчетуНаОплату(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	// Обработка табличной части "Запасы".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Заказ");
	МассивУдаляемыхРеквизитов.Добавить("Ответственный");
	МассивУдаляемыхРеквизитов.Добавить("СтруктурнаяЕдиница");
	Товары = ПолучитьТаблицуТовары(Объект.Запасы.Выгрузить(),, МассивУдаляемыхРеквизитов);

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "Запасы");

	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	РасчетПодарков = Неопределено;
	Если НЕ ВходныеПараметры.Свойство("РасчетПодарков", РасчетПодарков) Тогда
		РасчетПодарков = Истина;
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РассчитыватьБонусы", Ложь);
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценок(Объект, ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Опт")));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("ВидЦен"		 , Объект.ВидЦен);
	ПараметрыРасчета.Вставить("Магазин"      , Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	
	ПараметрыРасчета.Вставить("Товары",            	Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   	Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  	Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      	Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       	ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        	Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      	ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   	Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",	Объект.ДисконтнаяКарта.Владелец);
	ПараметрыРасчета.Вставить("РасчетПодарков",    	РасчетПодарков);
	ПараметрыРасчета.Вставить("РасчетСообщений",   	Истина);
	ПараметрыРасчета.Вставить("ЕстьПодаркиВТЧ",    	Истина);
	ПараметрыРасчета.Вставить("ГраницаДокумента", 	Новый Граница(Новый МоментВремени(ТекущаяДатаОбъекта, Объект.Ссылка), ВидГраницы.Исключая));
	ПараметрыРасчета.Вставить("ДанныеДляПроизвольныхУсловий", Справочники.УсловияПредоставленияСкидокНаценок.ПодготовитьОписаниеОбъектаПроизвольныхУсловий(Объект, Товары));
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда

		ТаблицаПодарков = ПримененныеСкидкиНаценки.ТаблицаПодарков;
		ТаблицаПодарковНаВыбор = ТаблицаПодарков.СкопироватьКолонки();
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ТаблицаПодарков, ТаблицаПодарковНаВыбор);
		Если ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
			ПримененныеСкидкиНаценки.Вставить("ТаблицаПодарковНаВыбор", ТаблицаПодарковНаВыбор);
		КонецЕсли;
		
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, , , , ПримененныеСкидкиНаценки.ДеревоСкидок);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Функция выполняет расчет скидок по АктуВыполненныхРабот.
//
Функция РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры)
	Перем РабочееМесто;
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "РаботыИУслуги");
	
	Если ВходныеПараметры.Свойство("РеализацияСверхЗаказа") Тогда
		РеализацияСверхЗаказа = ВходныеПараметры.РеализацияСверхЗаказа;
	Иначе
		РеализацияСверхЗаказа = Ложь;
	КонецЕсли;
	
	// Обработка табличной части "РаботыИУслуги".
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Ответственный");
	МассивУдаляемыхРеквизитов.Добавить("СтруктурнаяЕдиница");
	СоответствиеРеквизитов = Новый Соответствие;
	СоответствиеРеквизитов.Вставить("Заказ", "ЗаказПокупателя");
	Товары = ПолучитьТаблицуТовары(Объект.РаботыИУслуги.Выгрузить(), СоответствиеРеквизитов, МассивУдаляемыхРеквизитов,, Истина);

	ЦенообразованиеСервер.ДополнитьТаблицуТоваровВидомМинимальныхЦен(Объект, Товары, "РаботыИУслуги");

	Если РеализацияСверхЗаказа Тогда
		ТоварыСверхЗаказа = Товары.СкопироватьКолонки();
		
		Для каждого ТекущаяСтрока Из Товары Цикл
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗаказПокупателя) Тогда
				НоваяСтрока = ТоварыСверхЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТоварыСверхЗаказа = "";
	КонецЕсли;
	
	ТекущаяДатаОбъекта = СкидкиНаценкиСервер.ПолучитьТекущуюДатуОбъекта(Объект);
	РасчетПодарков = Неопределено;
	Если НЕ ВходныеПараметры.Свойство("РасчетПодарков", РасчетПодарков) Тогда
		РасчетПодарков = Истина;
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценок(Объект, ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Опт")));
	ПараметрыРасчета.Вставить("Регистратор"  , Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин"      , Объект.Подразделение);
	ПараметрыРасчета.Вставить("ВидЦен",        Объект.ВидЦен);
	ПараметрыРасчета.Вставить("СкладПродажи"            , Объект.Подразделение);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",   Объект.ВалютаДокумента);
	ПараметрыРасчета.Вставить("СуммаВключаетНДС",  Объект.СуммаВключаетНДС);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета",   Константы.ВалютаУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Неопределено);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	ПараметрыРасчета.Вставить("Контрагент",        Объект.Контрагент);
	ПараметрыРасчета.Вставить("ДатаРождения",      ДатаВТекущемГоду(Объект.Контрагент.ДатаРождения, ТекущаяДатаОбъекта));
	ПараметрыРасчета.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
	ПараметрыРасчета.Вставить("ВидДисконтнойКарты",Объект.ДисконтнаяКарта.Владелец);
	ПараметрыРасчета.Вставить("РасчетПодарков",	   РасчетПодарков);
	ПараметрыРасчета.Вставить("РасчетСообщений",   Истина);
	ПараметрыРасчета.Вставить("ЕстьПодаркиВТЧ",    Истина);
	СтрокиПредъявленныйПромокод = Объект.ПримененныеПромокоды.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	ПараметрыРасчета.Вставить("ПромокодыСкидок",   Объект.ПримененныеПромокоды.Выгрузить(СтрокиПредъявленныйПромокод));
	ПараметрыРасчета.Вставить("ГраницаДокумента",  Новый Граница(Новый МоментВремени(ТекущаяДатаОбъекта, Объект.Ссылка), ВидГраницы.Исключая));
	ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", Объект.ВыбранныеУправляемыеСкидки.Выгрузить());
	ПараметрыРасчета.Вставить("ДанныеДляПроизвольныхУсловий", Справочники.УсловияПредоставленияСкидокНаценок.ПодготовитьОписаниеОбъектаПроизвольныхУсловий(Объект, Товары));
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		ТаблицаПодарков = ПримененныеСкидкиНаценки.ТаблицаПодарков;
		ТаблицаПодарковНаВыбор = ТаблицаПодарков.СкопироватьКолонки();
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ТаблицаПодарков, ТаблицаПодарковНаВыбор);
		Если ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
			ПримененныеСкидкиНаценки.Вставить("ТаблицаПодарковНаВыбор", ТаблицаПодарковНаВыбор);
		КонецЕсли;
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "РаботыИУслуги", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, РеализацияСверхЗаказа, ТоварыСверхЗаказа, , ПримененныеСкидкиНаценки.ДеревоСкидок);
		
		Если ВходныеПараметры.Свойство("БонуснаяПрограмма") И ПримененныеСкидкиНаценки.Свойство("ТаблицаБонусыКНачислению") Тогда
			РаботаСБонусами.ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, ПримененныеСкидкиНаценки.ТаблицаБонусыКНачислению);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоРеализацииТоваров()

// Возвращает переданную дату в текущем году
// 
// Возвращаемое значение:
//   Дата
//
Функция ДатаВТекущемГоду(ДатаРождения, ТекущаяДата)
	
	Возврат СкидкиНаценкиСервер.БлижайшаяДатаЕжегодногоСобытия(ДатаРождения, ТекущаяДата);
	
КонецФункции

#КонецОбласти
