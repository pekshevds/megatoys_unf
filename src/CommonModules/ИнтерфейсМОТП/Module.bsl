#Область ПрограммныйИнтерфейс

// Построить дерево упаковок на основании данных о кодах маркировки.
//
// Параметры:
// 	Значение - Массив, Строка - Коды маркировки для которых необходимо построить дерево упаковок
// 	Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС, Неопределено - Детализация хранения табачной продукции
// 	ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
// Возвращаемое значение:
// 	Структура - Описание:
//	 * ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	 * ТекстОшибки                    - Строка - Текст ошибки.
//	 * ДеревоУпаковок                 - ДеревоЗначений, Неопределено - Дерево упаковок, построенное по переданным кодам маркировки.
//	 * GTIN - ТаблицаЗначений - Список GTIN в разрезе МРЦ:
//	  ** GTIN - Строка - GTIN.
//	  ** МРЦ - Число - МРЦ.
//
Функция ДеревоУпаковок(Значение, Детализация = Неопределено, ПараметрыСканирования = Неопределено) Экспорт
	
	ПараметрыДерева = ПараметрыПостроенияДерева(ПараметрыСканирования);
	
	ДеревоУпаковок = Новый ДеревоЗначений;
	ДеревоУпаковок.Колонки.Добавить("Штрихкод",                  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	ДеревоУпаковок.Колонки.Добавить("GTIN",                      Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДеревоУпаковок.Колонки.Добавить("ТипШтрихкода",              Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДеревоУпаковок.Колонки.Добавить("ВидУпаковки",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДеревоУпаковок.Колонки.Добавить("ВидПродукции",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДеревоУпаковок.Колонки.Добавить("СоставКодаМаркировки");
	ДеревоУпаковок.Колонки.Добавить("НормализованныйШтрихкод",   Новый ОписаниеТипов("Строка"));
	ДеревоУпаковок.Колонки.Добавить("ХешСуммаНормализации",      Новый ОписаниеТипов("Строка"));
	ДеревоУпаковок.Колонки.Добавить("СодержимоеНедоступно",      Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("Статус",                    ШтрихкодированиеМОТП.ОписаниеТиповКолонкиСтатус());
	ДеревоУпаковок.Колонки.Добавить("ПредставлениеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	ДополнительныйВидУпаковки = Неопределено;
	ЭталоннаяСтруктураДерева  = Новый Структура;
	
	ДополнительныеКолонки                        = Новый Структура;
	ДополнительныеКолонкиДляВложенныхСтрокДерева = Новый Структура;
	
	ПоляВДанныхСтатуса                           = Новый Соответствие;
	ПоляВДанныхСтатусаДляВложенныхСтрокДерева    = Новый Соответствие;
	
	Если ПараметрыДерева.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ДополнительныйВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки(ДополнительныеКолонки);
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки(ДополнительныеКолонкиДляВложенныхСтрокДерева);
	КонецЕсли;
	
	СоответствиеСтрокДерева = Новый Соответствие;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДеревоУпаковок",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("GTIN",                           Неопределено);
	ВозвращаемоеЗначение.Вставить("СоответствиеСтрокДерева",        СоответствиеСтрокДерева);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Новый Соответствие());
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		ИсходныйМассивСтрок = Новый Массив();
		ИсходныйМассивСтрок.Добавить(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Или ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		ИсходныйМассивСтрок = Значение;
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	ЛогистическиеУпаковкиСоСкобками = Новый Соответствие;
	ЛогистическиеУпаковкиБезСкобок  = Новый Соответствие;
	
	ПараметрыНормализацииТабакЛогистическаяУпаковка = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	НастройкиРазбораКодаМаркировки = Новый Структура;
	НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь));
	НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	ПараметрыНабораПакетов           = НовыеПараметрыНабораПакетов();
	ПараметрыНабораПакетовБезЗапроса = НовыеПараметрыНабораПакетов();
	ИсходныеПакетыКодовМаркировки    = Новый Массив;
	
	ЕстьПолеПрисутствуетТабачнаяПродукция = Неопределено;
	ЕстьПолеЭтоКодВводаОстатков           = Неопределено;
	ЕстьПолеДанныеРазбора                 = Неопределено;
	
	ЗапрашиватьСтатусыКодовЕАЭС = ШтрихкодированиеИСМПКлиентСервер.РазрешеноЗапрашиватьСтатусыКодовЕАЭС(ПараметрыСканирования);
	
	Для Каждого СтрокаКодаМаркировки Из ИсходныйМассивСтрок Цикл
		
		Если ЕстьПолеПрисутствуетТабачнаяПродукция = Неопределено Тогда
			ЕстьПолеПрисутствуетТабачнаяПродукция = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				СтрокаКодаМаркировки, "ПрисутствуетТабачнаяПродукция");
			ЕстьПолеЭтоКодВводаОстатков = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				СтрокаКодаМаркировки, "ЭтоКодВводаОстатков");
			ЕстьПолеДанныеРазбора = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				СтрокаКодаМаркировки, "ДанныеРазбора");
		КонецЕсли;
		
		ПрисутствуетТабачнаяПродукция = Ложь;
		Если ЕстьПолеПрисутствуетТабачнаяПродукция Тогда
			ПрисутствуетТабачнаяПродукция = СтрокаКодаМаркировки.ПрисутствуетТабачнаяПродукция;
		КонецЕсли;
		
		ЭтоКодВводаОстатков = Ложь;
		Если ЕстьПолеЭтоКодВводаОстатков Тогда
			ЭтоКодВводаОстатков = СтрокаКодаМаркировки.ЭтоКодВводаОстатков;
		КонецЕсли;
		
		ПроблемныйКодМаркировки = Ложь;
		Если ЕстьПолеДанныеРазбора Тогда
			ПроблемныйКодМаркировки = (СтрокаКодаМаркировки.ДанныеРазбора = Неопределено);
		КонецЕсли;
		
		// Поиск со скобками и без скобок - только для табачной продукции
		Если (ПрисутствуетТабачнаяПродукция Или Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаКодаМаркировки.ВидПродукции))
			И СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			КодМаркировкиБезСкобок = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				СтрокаКодаМаркировки, СтрокаКодаМаркировки.ВидПродукции, ПараметрыНормализацииТабакЛогистическаяУпаковка);
			
			Если КодМаркировкиБезСкобок <> СтрокаКодаМаркировки.Штрихкод Тогда
				
				// Формирование копии элемента без скобок
				СтрокаКодаМаркировкиБезСкобок = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода();
				ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировкиБезСкобок, СтрокаКодаМаркировки);
				СтрокаКодаМаркировкиБезСкобок.Штрихкод = КодМаркировкиБезСкобок;
				ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(
					СтрокаКодаМаркировкиБезСкобок,
					СтрокаКодаМаркировкиБезСкобок.ДанныеРазбора);
				ЛогистическиеУпаковкиБезСкобок.Вставить(СтрокаКодаМаркировкиБезСкобок, СтрокаКодаМаркировки);
				ЛогистическиеУпаковкиСоСкобками.Вставить(СтрокаКодаМаркировки, СтрокаКодаМаркировкиБезСкобок);
				
				ДобавитьСтрокуВНаборПакетовЗапросов(СтрокаКодаМаркировкиБезСкобок, ПараметрыНабораПакетов, ПрисутствуетТабачнаяПродукция, ЭтоКодВводаОстатков, ПроблемныйКодМаркировки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			ДобавитьСтрокуВНаборПакетовЗапросов(СтрокаКодаМаркировки, ПараметрыНабораПакетовБезЗапроса);
		Иначе
			ДобавитьСтрокуВНаборПакетовЗапросов(СтрокаКодаМаркировки, ПараметрыНабораПакетов, ПрисутствуетТабачнаяПродукция, ЭтоКодВводаОстатков, ПроблемныйКодМаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
	СтатусыКодовМаркировки = ВозвращаемоеЗначение.СтатусыКодовМаркировки;
	
	ПараметрыЗапросаСтатусов = ИнициализироватьПараметрыЗапросаСтатусов();
	ПараметрыЗапросаСтатусов.Организация                 = ПараметрыДерева.Организация;
	ПараметрыЗапросаСтатусов.СтатусыКодовМаркировкиКеш   = СтатусыКодовМаркировки;
	ПараметрыЗапросаСтатусов.НастройкиРазбора            = НастройкиРазбораКодаМаркировки;
	ПараметрыЗапросаСтатусов.ЗапрашиватьСтатусыКодовЕАЭС = ЗапрашиватьСтатусыКодовЕАЭС;
	
	Для Каждого НаборПакета Из ПараметрыНабораПакетов.НаборыПакетов Цикл
		
		Для Каждого ПакетКодовМаркировки Из НаборПакета.ПакетыКодовМаркировки Цикл
			
			РезультатЗапросаСтатусовКодовМаркировок = ЗапроситьСтатусыКодовМаркировкиПакетно(
				ПакетКодовМаркировки, ПараметрыЗапросаСтатусов);
			
			Если Не НаборПакета.ПрисутствуетПродукцияИСМП Тогда
				
				Для Каждого СтрокаПакета Из ПакетКодовМаркировки Цикл
					Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаПакета.ВидПродукции) Тогда
						НаборПакета.ПрисутствуетПродукцияИСМП = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
				
				Возврат ВозвращаемоеЗначение;
				
			ИначеЕсли РезультатЗапросаСтатусовКодовМаркировок.СтатусыКодовМаркировки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
				
				Возврат ВозвращаемоеЗначение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаличиеВидаПродукции  = Новый Соответствие;
	
	ДополнитьКолонкамиМОТП = Ложь;
	ДополнитьКолонкамиИСМП = Ложь;
	
	Для Каждого ПараметрыНабора Из ПараметрыНабораПакетов.НаборыПакетов Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсходныеПакетыКодовМаркировки, ПараметрыНабора.ПакетыКодовМаркировки);
		
		Если ДополнитьКолонкамиМОТП И ДополнитьКолонкамиИСМП Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыНабора.ПрисутствуетТабачнаяПродукция
			Или ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ПараметрыНабора.ВидПродукцииПодсистемы) Тогда
			
			ДополнитьКолонкамиМОТП = Истина;
			
		ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ПараметрыНабора.ВидПродукцииПодсистемы)
			Или ПараметрыНабора.ЭтоКодВводаОстатков Тогда
			
			ДополнитьКолонкамиИСМП = Истина;
			
		ИначеЕсли ПараметрыНабора.ПроблемныйКодМаркировки Тогда
			
			УстановитьПризнакиНаличияВидовПродукции(ПараметрыНабора, НаличиеВидаПродукции, ДополнитьКолонкамиИСМП, ДополнитьКолонкамиМОТП);
			
		ИначеЕсли ПараметрыНабора.ПрисутствуетПродукцияИСМП Тогда
			
			ДополнитьКолонкамиИСМП = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПараметрыНабора Из ПараметрыНабораПакетовБезЗапроса.НаборыПакетов Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсходныеПакетыКодовМаркировки, ПараметрыНабора.ПакетыКодовМаркировки);
		
		Для Каждого ПакетКодовМаркировкиБезЗапроса Из ПараметрыНабора.ПакетыКодовМаркировки Цикл
			Для Каждого СтрокаКодаМаркировки Из ПакетКодовМаркировкиБезЗапроса Цикл
				
				ИнтерфейсИСМПСлужебный.ЗаполнитьСтатусБезВыполненияЗапроса(СтрокаКодаМаркировки, СтатусыКодовМаркировки);
				
				Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаКодаМаркировки.ВидПродукции) Тогда
					ДополнитьКолонкамиМОТП = Истина;
				Иначе
					ДополнитьКолонкамиИСМП = Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДополнитьКолонкамиИСМП Тогда
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокИСМП(
			ПараметрыДерева, ДополнительныеКолонки);
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокИСМП(
			ПараметрыДерева, ДополнительныеКолонкиДляВложенныхСтрокДерева, Истина);
	КонецЕсли;
	
	Если ДополнитьКолонкамиМОТП Тогда
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокМОТП(
			ПараметрыДерева, ДополнительныеКолонки);
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокМОТП(
			ПараметрыДерева, ДополнительныеКолонкиДляВложенныхСтрокДерева, Истина);
	КонецЕсли;
	
	ШтрихкодированиеМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ДеревоУпаковок, ДополнительныеКолонки);
	
	Для Каждого Колонка Из ДеревоУпаковок.Колонки Цикл
		ЭталоннаяСтруктураДерева.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	ПараметрыНабораПакетов.НаборыПакетов.Очистить();
	ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Очистить();
	
	ДанныеОбАгрегации = Новый Соответствие;
	
	ПараметрыНабораПакетовБезВидаУпаковки = НовыеПараметрыНабораПакетов();
	ПараметрыНабораПакетовВложенныхКодов  = НовыеПараметрыНабораПакетов();
	
	Для Каждого КлючИЗначение Из СтатусыКодовМаркировки Цикл
		
		ВложенныеУпаковки = КлючИЗначение.Значение.ВложенныеУпаковки;
		Если ВложенныеУпаковки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаВложенногоКодаМаркировки Из ВложенныеУпаковки Цикл
			
			СтрокаКодаМаркировки = СтрокаВложенногоКодаМаркировки.Ключ;
			
			ВидУпаковки = СтрокаКодаМаркировки.ВидУпаковки;
			
			ВозможнаАгрегация = (ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				Или ВидУпаковки = ДополнительныйВидУпаковки);
			
			Если ВозможнаАгрегация И Не ПараметрыДерева.ЭтоПроверкаКодовМаркировкиИСМП И Не ПараметрыДерева.ЭтоОтчетПроизводственнойЛинии Тогда
				
				ДобавитьСтрокуВНаборПакетовЗапросов(СтрокаКодаМаркировки, ПараметрыНабораПакетовВложенныхКодов);
				
			ИначеЕсли (ВозможнаАгрегация И (ПараметрыДерева.ЭтоПроверкаКодовМаркировкиИСМП Или ПараметрыДерева.ЭтоОтчетПроизводственнойЛинии))
				Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
					СтрокаКодаМаркировки.ВидУпаковки,
					СтрокаКодаМаркировки.ДанныеРазбора) Тогда
				
				ДобавитьСтрокуВНаборПакетовЗапросов(СтрокаКодаМаркировки, ПараметрыНабораПакетовБезВидаУпаковки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДетализироватьДоПачек = Истина;
	Если Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
		Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
		Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами Тогда
		ДетализироватьДоПачек = Ложь;
	КонецЕсли;
	
	Если ПараметрыСканирования = Неопределено Тогда
		СозданиеНаборов = Истина;
	Иначе
		СозданиеНаборов = ПараметрыСканирования.Свойство("СозданиеНаборов") И ПараметрыСканирования.СозданиеНаборов;
	КонецЕсли;
	
	Пока ПараметрыНабораПакетовБезВидаУпаковки.НаборыПакетов.Количество() > 0 Цикл
		
		СледующиеПараметрыНабораПакетовВложенныхКодов = НовыеПараметрыНабораПакетов();
		
		Для Каждого ПараметрНабораПакетовБезВидаУпаковки Из ПараметрыНабораПакетовБезВидаУпаковки.НаборыПакетов Цикл
			
			Для Каждого ПакетКодовМаркировкиБезВидаУпаковки Из ПараметрНабораПакетовБезВидаУпаковки.ПакетыКодовМаркировки Цикл
				
				РезультатЗапросаСтатусовКодовМаркировок = ЗапроситьСтатусыКодовМаркировкиПакетно(
					ПакетКодовМаркировкиБезВидаУпаковки, ПараметрыЗапросаСтатусов);
				
				Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
					
					Возврат ВозвращаемоеЗначение;
					
				ИначеЕсли РезультатЗапросаСтатусовКодовМаркировок.СтатусыКодовМаркировки = Неопределено Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
					
					Возврат ВозвращаемоеЗначение;
					
				КонецЕсли;
				
				Для Каждого СтрокаКодаМаркировки Из ПакетКодовМаркировкиБезВидаУпаковки Цикл
					
					ПараметрыКодаМаркировки = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
					
					Если Не ЗаполненВидУпаковкиПоДаннымСтатуса(СтрокаКодаМаркировки, ПараметрыКодаМаркировки) Тогда
						Продолжить;
					КонецЕсли;
					
					ВложенныеУпаковки = ПараметрыКодаМаркировки.ВложенныеУпаковки;
					Если ВложенныеУпаковки = Неопределено Тогда
						ВложенныеУпаковки = Новый Соответствие();
					КонецЕсли;
					
					Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
						ДетализироватьДоПачекРасширенно = ДетализироватьДоПачек;
					ИначеЕсли СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
						ДетализироватьДоПачекРасширенно = ДетализироватьДоПачек;
					ИначеЕсли СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
						ДетализироватьДоПачекРасширенно = Ложь;
					Иначе
						ДетализироватьДоПачекРасширенно = Истина;
					КонецЕсли;
					
					Если ДетализироватьДоПачекРасширенно Тогда
						
						Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
							Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
							Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
							
							Для Каждого КлючИЗначение Из ВложенныеУпаковки Цикл
								
								ВложеннаяСтрокаКодаМаркировки = КлючИЗначение.Ключ;
								
								Если Не ЗначениеЗаполнено(ВложеннаяСтрокаКодаМаркировки.ВидУпаковки)
									Или ВложеннаяСтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
									Или (ВложеннаяСтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая И ДетализироватьДоПачек)
									Или (ВложеннаяСтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор И ДетализироватьДоПачек)
									Или ВложеннаяСтрокаКодаМаркировки.ВидУпаковки = ДополнительныйВидУпаковки Тогда
									
									ДобавитьСтрокуВНаборПакетовЗапросов(
										ВложеннаяСтрокаКодаМаркировки,
										СледующиеПараметрыНабораПакетовВложенныхКодов);
									
								КонецЕсли;
								
							КонецЦикла;
							
							ДанныеОбАгрегации.Вставить(СтрокаКодаМаркировки, ВложенныеУпаковки);
							
						КонецЕсли;
						
					ИначеЕсли СтрокаКодаМаркировки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
						
						ДанныеОбАгрегации.Вставить(СтрокаКодаМаркировки, ВложенныеУпаковки.Количество());
						
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЦикла;
			
		КонецЦикла;
		
		ПараметрыНабораПакетовБезВидаУпаковки = СледующиеПараметрыНабораПакетовВложенныхКодов;
		
	КонецЦикла;
	
	Пока ПараметрыНабораПакетовВложенныхКодов.НаборыПакетов.Количество() > 0 Цикл
		
		СледующиеПараметрыНабораПакетовВложенныхКодов = НовыеПараметрыНабораПакетов();
		ПараметрыНабораПакетовСтатусаВложенныхКодов   = НовыеПараметрыНабораПакетов();
		
		Для Каждого ПараметрНабораПакетаВложенныхКодов Из ПараметрыНабораПакетовВложенныхКодов.НаборыПакетов Цикл
			
			Для Каждого ПакетКодовМаркировки Из ПараметрНабораПакетаВложенныхКодов.ПакетыКодовМаркировки Цикл
				
				Результат = ЗапроситьДанныеОбАгрегацииКодовМаркировкиПакетно(
					ПакетКодовМаркировки,
					ПараметрыДерева.Организация);
				
				Если Результат.ДанныеОбАгрегации <> Неопределено
					И Результат.ДанныеОбАгрегации.Количество() > 0 Тогда
					
					Для Каждого СтрокаКодаМаркировки Из ПакетКодовМаркировки Цикл
						
						СоответствиеВложенныхКодов = Результат.ДанныеОбАгрегации[СтрокаКодаМаркировки.ИсходныйШтрихкод];
						Если СоответствиеВложенныхКодов = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						ВидУпаковки   = СтрокаКодаМаркировки.ВидУпаковки;
						ВидПродукции  = СтрокаКодаМаркировки.ВидПродукции;
						ДанныеСтатуса = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
						
						Если ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
							ДетализироватьДоПачекРасширенно = ДетализироватьДоПачек;
						ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
							ДетализироватьДоПачекРасширенно = ДетализироватьДоПачек;
						ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
							ДетализироватьДоПачекРасширенно = Ложь;
						Иначе
							ДетализироватьДоПачекРасширенно = Истина;
						КонецЕсли;
						
						Если ДетализироватьДоПачекРасширенно Тогда
							
							ВложенныеУпаковки = Новый Соответствие();
							Для Каждого КлючИЗначение Из СоответствиеВложенныхКодов Цикл
								
								ВложенныйКодМаркировки = КлючИЗначение.Ключ;
								
								ВложеннаяСтрокаКодаМаркировки = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
									ВложенныйКодМаркировки, ВидПродукции, ПользовательскиеПараметрыРазбораКодаМаркировки);
								
								ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(
									ВложеннаяСтрокаКодаМаркировки,
									ВложеннаяСтрокаКодаМаркировки.ДанныеРазбора);
								
								Если ТребуетсяЗапросВложенныхСтатусов(
									СтрокаКодаМаркировки,
									ВложеннаяСтрокаКодаМаркировки,
									ПараметрыДерева,
									ДанныеСтатуса) Тогда
									
									ДобавитьСтрокуВНаборПакетовЗапросов(
										ВложеннаяСтрокаКодаМаркировки,
										ПараметрыНабораПакетовСтатусаВложенныхКодов);
									
								КонецЕсли;
								
								ВложенныеУпаковки.Вставить(ВложеннаяСтрокаКодаМаркировки);
								
								Если ВложеннаяСтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
									Или (ВложеннаяСтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая И ДетализироватьДоПачек)
									Или (ВложеннаяСтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор И ДетализироватьДоПачек) Тогда
									
									ДобавитьСтрокуВНаборПакетовЗапросов(
										ВложеннаяСтрокаКодаМаркировки,
										СледующиеПараметрыНабораПакетовВложенныхКодов);
									
								КонецЕсли;
								
							КонецЦикла;
							
							ДанныеОбАгрегации.Вставить(СтрокаКодаМаркировки, ВложенныеУпаковки);
							
						Иначе
							
							Если ТребуетсяЗапросВложенныхСтатусов(
								СтрокаКодаМаркировки,
								СтрокаКодаМаркировки,
								ПараметрыДерева,
								ДанныеСтатуса) Тогда
								
								ДобавитьСтрокуВНаборПакетовЗапросов(
									СтрокаКодаМаркировки,
									ПараметрыНабораПакетовСтатусаВложенныхКодов);
								
							КонецЕсли;
							
							ДанныеОбАгрегации.Вставить(СтрокаКодаМаркировки, СоответствиеВложенныхКодов.Количество());
							
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли Результат.ТребуетсяОбновлениеКлючаСессии Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки                    = Результат.ТекстОшибки;
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
				
					Возврат ВозвращаемоеЗначение;
					
				ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки = Результат.ТекстОшибки;
					
					Возврат ВозвращаемоеЗначение;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого НаборПакета Из ПараметрыНабораПакетовСтатусаВложенныхКодов.НаборыПакетов Цикл
			
			Для Каждого ПакетКодовМаркировки Из НаборПакета.ПакетыКодовМаркировки Цикл
				
				РезультатЗапросаСтатусовКодовМаркировок = ЗапроситьСтатусыКодовМаркировкиПакетно(
					ПакетКодовМаркировки, ПараметрыЗапросаСтатусов);
				
				Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
					
					Возврат ВозвращаемоеЗначение;
					
				ИначеЕсли РезультатЗапросаСтатусовКодовМаркировок.СтатусыКодовМаркировки = Неопределено Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
					
					Возврат ВозвращаемоеЗначение;
					
				КонецЕсли;
				
				Для Каждого СтрокаКодаМаркировки Из ПакетКодовМаркировки Цикл
					
					ПараметрыКодаМаркировки = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
					Если Не ЗаполненВидУпаковкиПоДаннымСтатуса(СтрокаКодаМаркировки, ПараметрыКодаМаркировки) Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
						Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
						Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
						ДанныеОбАгрегации.Вставить(СтрокаКодаМаркировки, ПараметрыКодаМаркировки.ВложенныеУпаковки);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПараметрыНабораПакетовВложенныхКодов = СледующиеПараметрыНабораПакетовВложенныхКодов;
		
	КонецЦикла;
	
	// Соответствие кодов маркировки и строк дерева
	КешGTIN = Новый ТаблицаЗначений;
	КешGTIN.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
	Если ПараметрыДерева.УчитыватьМРЦ Тогда
		КешGTIN.Колонки.Добавить("МРЦ",  Новый ОписаниеТипов("Число"));
		КолонкиИндексаКеша = "GTIN, МРЦ";
	Иначе
		КолонкиИндексаКеша = "GTIN";
	КонецЕсли;
	КешGTIN.Индексы.Добавить(КолонкиИндексаКеша);
	
	Кеш = Новый Структура;
	Кеш.Вставить("GTIN",                  КешGTIN);
	Кеш.Вставить("КодыМаркировки",        Новый Соответствие());
	Кеш.Вставить("ЗапросИУстановкаМРЦ",   Новый Массив);
	Кеш.Вставить("ВычислениеМРЦ",         Новый Массив);
	
	ОбщиеПараметрыЗаполнения                     = ПараметрыЗаполненияДереваУпаковок();
	ОбщиеПараметрыЗаполнения.ПараметрыДерева     = ПараметрыДерева;
	ОбщиеПараметрыЗаполнения.Кеш                 = Кеш;
	ОбщиеПараметрыЗаполнения.ВариантПолученияМРЦ = ПараметрыДерева.ВариантПолученияМРЦ;
	ОбщиеПараметрыЗаполнения.СозданиеНаборов     = СозданиеНаборов;
	
	Для Каждого ПакетКодовМаркировки Из ИсходныеПакетыКодовМаркировки Цикл
		
		Для Каждого СтрокаКодаМаркировки Из ПакетКодовМаркировки Цикл
			
			СтрокаДереваИзКеша = Кеш.КодыМаркировки[СтрокаКодаМаркировки.Штрихкод];
			Если СтрокаДереваИзКеша <> Неопределено
				И ПараметрыДерева.ПроверятьДублиКодовМаркировки <> "НеПроверять" Тогда
				// Код маркировки уже добавлен в упаковку
				Продолжить;
			КонецЕсли;
			
			Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				
				ДанныеСтатуса = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
				
				СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				
				ЗаполнитьСтрокуДанныхДереваПоСтрокеКодаМаркировки(
					СтрокаДерева,
					СтрокаКодаМаркировки);
				
				ЗаполнитьСтрокуДереваПоДополнительнымКолонкам(
					СтрокаДерева,
					ДанныеСтатуса,
					ДополнительныеКолонки,
					ПоляВДанныхСтатуса);
				
				ЗаполнитьСтрокуДереваСпецификойПоСоставуКода(
					СтрокаДерева,
					СтрокаКодаМаркировки,
					ОбщиеПараметрыЗаполнения);
				
				Кеш.КодыМаркировки.Вставить(СтрокаКодаМаркировки.Штрихкод, СтрокаДерева);
				ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN, ПараметрыДерева);
				СоответствиеСтрокДерева.Вставить(СтрокаКодаМаркировки, СтрокаДерева);
				
			Иначе
				
				Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
					Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
					
					ДанныеСтатуса = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
				
				Иначе
					
					СтрокаКодаМаркировкиБезСкобок  = ЛогистическиеУпаковкиСоСкобками.Получить(СтрокаКодаМаркировки);
					СтрокаКодаМаркировкиСоСкобками = ЛогистическиеУпаковкиБезСкобок.Получить(СтрокаКодаМаркировки);
					
					Если СтрокаКодаМаркировкиБезСкобок <> Неопределено
						Или СтрокаКодаМаркировкиСоСкобками <> Неопределено Тогда
						
						// Обрабатываем из пары только код со скобками
						Если СтрокаКодаМаркировкиБезСкобок = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						ДанныеСтатусаБезСкобок  = СтатусыКодовМаркировки[СтрокаКодаМаркировкиБезСкобок];
						ДанныеСтатусаСоСкобками = СтатусыКодовМаркировки[СтрокаКодаМаркировкиСоСкобками];
						
						Если ДанныеСтатусаСоСкобками <> Неопределено Тогда
							ДанныеСтатуса = ДанныеСтатусаСоСкобками;
						ИначеЕсли ДанныеСтатусаБезСкобок <> Неопределено Тогда
							ДанныеСтатуса = ДанныеСтатусаБезСкобок;
						Иначе
							ДанныеСтатуса        = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки();
							ДанныеСтатуса.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
						КонецЕсли;
						
					Иначе
						ДанныеСтатуса = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
					КонецЕсли;
					
				КонецЕсли;
				
				ДобавлятьУпаковкуНаВерхнийУровень =
					// Если детализация полная - любые упаковки добавляются в дерево упаковок.
					(Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
						Или Не ЗначениеЗаполнено(Детализация))
					
					// Если детализация - палеты с коробками, то все верхнеуровневые упаковки добавляются в дерево упаковок.
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
					
					// Если детализация - коробки с блоками, то все верхнеуровневые упаковки добавляются в дерево упаковок.
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
					
					// Если детализация - только блоки, то все верхнеуровневые упаковки добавляются в дерево упаковок.
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
					
					// Если детализация - блоки с пачками, то верхнеуровневые упаковки добавляются в дерево
					// упаковок только в случае если они являются блоками или пачками.
					Или (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими
						И СтрокаКодаМаркировки.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая);
					
				Если Не (ДанныеСтатуса = Неопределено
					Или ДанныеСтатуса.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
					Или ДанныеСтатуса.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен) Тогда
					
					ДанныеОбАгрегацииСтрокиДерева = ДанныеСтатуса.ВложенныеУпаковки;
					
					Если ДанныеОбАгрегацииСтрокиДерева <> Неопределено
						И ДанныеОбАгрегацииСтрокиДерева.Количество() > 0 Тогда
						
						ПараметрыЗаполнения = ПараметрыЗаполненияДереваУпаковок();
						ПараметрыЗаполнения.КодыМаркировкиУпаковок  = ДанныеОбАгрегацииСтрокиДерева;
						ПараметрыЗаполнения.Кеш                     = Кеш;
						ПараметрыЗаполнения.Детализация             = Детализация;
						ПараметрыЗаполнения.ВариантПолученияМРЦ     = ПараметрыДерева.ВариантПолученияМРЦ;
						ПараметрыЗаполнения.СоответствиеСтрокДерева = СоответствиеСтрокДерева;
						ПараметрыЗаполнения.ДанныеОбАгрегации       = ДанныеОбАгрегации;
						ПараметрыЗаполнения.СтатусыКодовМаркировки  = СтатусыКодовМаркировки;
						ПараметрыЗаполнения.ДополнительныеКолонки   = ДополнительныеКолонки;
						ПараметрыЗаполнения.ПоляВДанныхСтатуса      = ПоляВДанныхСтатуса;
						ПараметрыЗаполнения.ВидПродукции            = СтрокаКодаМаркировки.ВидПродукции;
						ПараметрыЗаполнения.ПараметрыДерева         = ПараметрыДерева;
						ПараметрыЗаполнения.ЭталонСтроки            = ЭталоннаяСтруктураДерева;
						ПараметрыЗаполнения.СозданиеНаборов         = СозданиеНаборов;
						
						ПараметрыЗаполнения.ДополнительныеКолонкиДляВложенныхСтрокДерева = ДополнительныеКолонкиДляВложенныхСтрокДерева;
						ПараметрыЗаполнения.ПоляВДанныхСтатусаДляВложенныхСтрокДерева    = ПоляВДанныхСтатусаДляВложенныхСтрокДерева;
						
						Если ДобавлятьУпаковкуНаВерхнийУровень Тогда
							
							СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
							
							ЗаполнитьСтрокуДанныхДереваПоСтрокеКодаМаркировки(
								СтрокаДерева,
								СтрокаКодаМаркировки);
							
							ЗаполнитьСтрокуДереваПоДополнительнымКолонкам(
								СтрокаДерева,
								ДанныеСтатуса,
								ДополнительныеКолонки,
								ПоляВДанныхСтатуса);
							
							ЗаполнитьСтрокуДереваСпецификойПоСоставуКода(
								СтрокаДерева,
								СтрокаКодаМаркировки,
								ОбщиеПараметрыЗаполнения);
							
							ПараметрыЗаполнения.ДеревоУпаковок       = СтрокаДерева;
							ПараметрыЗаполнения.ДанныеВерхнегоУровня = СтрокаДерева;
							
							ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполнения);
							
							ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN, ПараметрыДерева);
							СоответствиеСтрокДерева.Вставить(СтрокаКодаМаркировки, СтрокаДерева);
							
						Иначе
							
							ДанныеСтроки = ОбщегоНазначения.СкопироватьРекурсивно(ЭталоннаяСтруктураДерева);
							
							ЗаполнитьСтрокуДанныхДереваПоСтрокеКодаМаркировки(
								ДанныеСтроки,
								СтрокаКодаМаркировки);
							
							ЗаполнитьСтрокуДереваПоДополнительнымКолонкам(
								ДанныеСтроки,
								ДанныеСтатуса,
								ДополнительныеКолонки,
								ПоляВДанныхСтатуса);
							
							ЗаполнитьСтрокуДереваСпецификойПоСоставуКода(
								ДанныеСтроки,
								СтрокаКодаМаркировки,
								ОбщиеПараметрыЗаполнения,
								Истина);
							
							ПараметрыЗаполнения.ДеревоУпаковок       = ДеревоУпаковок;
							ПараметрыЗаполнения.ДанныеВерхнегоУровня = ДанныеСтроки;
							
							ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполнения);
							
							ОбновитьКешGTIN(ДанныеСтроки, Кеш.GTIN, ПараметрыДерева);
							
						КонецЕсли;
						
					ИначеЕсли ДобавлятьУпаковкуНаВерхнийУровень Тогда
						
						// Коробка без вложений или содержимое недоступно
						СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
						
						ЗаполнитьСтрокуДанныхДереваПоСтрокеКодаМаркировки(
							СтрокаДерева,
							СтрокаКодаМаркировки);
						
						ЗаполнитьСтрокуДереваПоДополнительнымКолонкам(
							СтрокаДерева,
							ДанныеСтатуса,
							ДополнительныеКолонки,
							ПоляВДанныхСтатуса);
						
						ЗаполнитьСтрокуДереваСпецификойПоСоставуКода(
							СтрокаДерева,
							СтрокаКодаМаркировки,
							ОбщиеПараметрыЗаполнения);
						
						СтрокаДерева.СодержимоеНедоступно = Ложь;
						
						Кеш.КодыМаркировки.Вставить(СтрокаКодаМаркировки.Штрихкод, СтрокаДерева);
						ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN, ПараметрыДерева);
						СоответствиеСтрокДерева.Вставить(СтрокаКодаМаркировки, СтрокаДерева);
						
					КонецЕсли;
					
				ИначеЕсли ДобавлятьУпаковкуНаВерхнийУровень Тогда
					
					// Статус неопределен => вложений не существует
					СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
					
					ЗаполнитьСтрокуДанныхДереваПоСтрокеКодаМаркировки(
						СтрокаДерева,
						СтрокаКодаМаркировки);
					
					ЗаполнитьСтрокуДереваПоДополнительнымКолонкам(
						СтрокаДерева,
						ДанныеСтатуса,
						ДополнительныеКолонки,
						ПоляВДанныхСтатуса);
					
					ЗаполнитьСтрокуДереваСпецификойПоСоставуКода(
						СтрокаДерева,
						СтрокаКодаМаркировки,
						ОбщиеПараметрыЗаполнения);
					
					Кеш.КодыМаркировки.Вставить(СтрокаКодаМаркировки.Штрихкод, СтрокаДерева);
					ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN, ПараметрыДерева);
					
					Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
						СоответствиеСтрокДерева.Вставить(СтрокаКодаМаркировки, СтрокаДерева);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.GTIN           = Кеш.GTIN;
	ВозвращаемоеЗначение.ДеревоУпаковок = ДеревоУпаковок;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область РеестрКодовМаркировки

// Запрос статусов кодов маркировки (включая владельца).
// В результате успешного выполнения запроса в ответе вернется список кодов маркировки,
// их статус и владелец на момент запроса. Статусы могут принимать следующие значение:
// 	EMITTED - Эмитирован,
// 	APPLIED - Нанесён,
// 	INTRODUCED - Введён в оборот,
// 	WRITTEN_OFF - Выведен из оборота, списан,
// 	WITHDRAWN - Выведен из оборота, продан,
// 	UNDEFINED - Неопределен.
// 
// Параметры:
// 	ДанныеДляЗапроса          - Массив из Структура,СтрокаТаблицыЗначений,СтрокаДереваЗначений
// 	                            Структура,СтрокаТаблицыЗначений           - Данные для запроса статусов.
// 	СтатусыКодовМаркировкиКеш - Соответствие, Неопределено                - Кеш статусов кодов маркировки.
// 	Организация               - ОпределяемыйТип.Организация               - Организация.
// 	ЗапрашиватьСтатусыКодовЕАЭС - Булево                                  - флаг использования запроса для проверки в сервисе.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* СтатусыКодовМаркировки - Соответствие - кодов маркировки и структур:
//		* Статус       - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
//		* ИННВладельца - Строка                                        - ИНН владельца кода маркировки.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусыКодовМаркировки(ДанныеДляЗапроса, Организация = Неопределено, ЗапрашиватьСтатусыКодовЕАЭС = Ложь) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ПараметрыНормализацииТабакЛогистическаяУпаковка = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ВключатьСрокГодности     = Ложь;
	
	ИсходныеСтрокиЗапросов = Новый Соответствие();
	ПакетыКодовМаркировки  = Новый Массив;
	ПакетКодовМаркировки   = Неопределено;
	СтатусыКодовМаркировки = Новый Соответствие;
	ЕстьДанныеДляЗапроса   = Ложь;
	
	Если ТипЗнч(ДанныеДляЗапроса) = Тип("Структура")
		Или ТипЗнч(ДанныеДляЗапроса) = Тип("СтрокаТаблицыЗначений") 
		Или ТипЗнч(ДанныеДляЗапроса) = Тип("СтрокаДереваЗначений") Тогда
		
		МассивИсходныхСтрок = Новый Массив();
		МассивИсходныхСтрок.Добавить(ДанныеДляЗапроса);
		
	Иначе
		
		МассивИсходныхСтрок = ДанныеДляЗапроса;
		
	КонецЕсли;
	
	КоличествоКодовВПакетеДляЗапросаСтатусов = ИнтеграцияИСМППовтИсп.КоличествоКодовВПакетеДляЗапросаСтатусов();
	
	Для Каждого СтрокаКодаМаркировки Из МассивИсходныхСтрок Цикл
		
		Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			ИнтерфейсИСМПСлужебный.ЗаполнитьСтатусБезВыполненияЗапроса(СтрокаКодаМаркировки, СтатусыКодовМаркировки);
			Продолжить;
		КонецЕсли;
		
		ЕстьДанныеДляЗапроса = Истина;
		
		Если ПакетКодовМаркировки = Неопределено
			Или ПакетКодовМаркировки.Количество() >= КоличествоКодовВПакетеДляЗапросаСтатусов Тогда
			ПакетКодовМаркировки = Новый Массив();
			ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
		КонецЕсли;
		
		Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			ЗапрашиваемыеКоды = Новый Соответствие();
			ВидыПродукции     = Новый Массив();
			ВсеСтрокиЗапросов = Новый Массив();
			ИсходныеСтрокиЗапросов.Вставить(СтрокаКодаМаркировки, ВсеСтрокиЗапросов);
			
			Если СтрокаКодаМаркировки.ТипШтрихкода <> Перечисления.ТипыШтрихкодов.SSCC Тогда
				ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировки);
				ВсеСтрокиЗапросов.Добавить(СтрокаКодаМаркировки);
				ЗапрашиваемыеКоды.Вставить(СтрокаКодаМаркировки.Штрихкод, СтрокаКодаМаркировки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаКодаМаркировки.ВидПродукции) Тогда
				ВидыПродукции.Добавить(СтрокаКодаМаркировки.ВидПродукции);
			Иначе
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					СтрокаКодаМаркировки, "ВидыПродукцииКодаМаркировки") Тогда
					Для Каждого ВидПродукции Из СтрокаКодаМаркировки.ВидыПродукцииКодаМаркировки Цикл
						ВидыПродукции.Добавить(ВидПродукции);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			// Формирование строк с нормализацией
			Для Каждого ВидПродукции Из ВидыПродукции Цикл
				
				НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаКодаМаркировки, ВидПродукции, ПараметрыНормализацииТабакЛогистическаяУпаковка);
				
				Если ЗапрашиваемыеКоды.Получить(НормализованныйКодМаркировки) <> Неопределено Тогда
					Продолжить
				КонецЕсли;
				
				НормализированнаяСтрока = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(, ВидПродукции);
				ЗаполнитьЗначенияСвойств(НормализированнаяСтрока, СтрокаКодаМаркировки);
				НормализированнаяСтрока.Штрихкод = НормализованныйКодМаркировки;
				ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(
					НормализированнаяСтрока,
					НормализированнаяСтрока.ДанныеРазбора);
				
				ПакетКодовМаркировки.Добавить(НормализированнаяСтрока);
				ВсеСтрокиЗапросов.Добавить(НормализированнаяСтрока);
				ЗапрашиваемыеКоды.Вставить(НормализованныйКодМаркировки, НормализированнаяСтрока);
				
			КонецЦикла;
			
		Иначе
			
			ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии
		И ЕстьДанныеДляЗапроса Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если ЕстьДанныеДляЗапроса Тогда
		
		ОбщиеНастройкиРазбора = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(
		ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина), Ложь);
		
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
		
		НастройкиРазбора = Новый Структура;
		НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
		НастройкиРазбора.Вставить("Общие",            ОбщиеНастройкиРазбора);
		НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
		
		ПараметрыЗапросаСтатусов = ИнициализироватьПараметрыЗапросаСтатусов();
		ПараметрыЗапросаСтатусов.Организация                 = Организация;
		ПараметрыЗапросаСтатусов.СтатусыКодовМаркировкиКеш   = СтатусыКодовМаркировки;
		ПараметрыЗапросаСтатусов.НастройкиРазбора            = НастройкиРазбора;
		ПараметрыЗапросаСтатусов.ЗапрашиватьСтатусыКодовЕАЭС = ЗапрашиватьСтатусыКодовЕАЭС;
		
		Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
			
			РезультатЗапросаСтатусовКодовМаркировок = ЗапроситьСтатусыКодовМаркировкиПакетно(
				ПакетКодовМаркировки, ПараметрыЗапросаСтатусов);
			
			ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатЗапросаСтатусовКодовМаркировок.РезультатОтправкиЗапроса;
			
			Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
				
				Возврат ВозвращаемоеЗначение;
				
			ИначеЕсли ЗначениеЗаполнено(РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки) Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
				
				Возврат ВозвращаемоеЗначение;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ИсходныеСтрокиЗапросов Цикл
		
		ИсходнаяСтрокаЗапроса = КлючИЗначение.Ключ;
		ЗапрашиваемыеСтроки   = КлючИЗначение.Значение;
		СтрокиДляУдаления     = Новый Массив();
		ДанныеСтатуса         = Неопределено;
		
		Для Каждого ЗапрошеннаяСтрока Из ЗапрашиваемыеСтроки Цикл
			
			Если ЗапрошеннаяСтрока <> ИсходнаяСтрокаЗапроса Тогда
				СтрокиДляУдаления.Добавить(ЗапрошеннаяСтрока);
			КонецЕсли;
			
			ТекущиеДанные = СтатусыКодовМаркировки[ЗапрошеннаяСтрока];
			
			Если ДанныеСтатуса = Неопределено
				И ТекущиеДанные <> Неопределено
				И Не (ТекущиеДанные.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
				   Или ТекущиеДанные.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен) Тогда
				ДанныеСтатуса = ТекущиеДанные;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеСтатуса <> Неопределено Тогда
			СтатусыКодовМаркировки[ИсходнаяСтрокаЗапроса] = ДанныеСтатуса;
		КонецЕсли;
		
		Для Каждого УдаляемаяСтрока Из СтрокиДляУдаления Цикл
			СтатусыКодовМаркировки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для списка кодов маркировки.
// В результате успешного выполнения запроса в ответе вернется список кодов маркировки,
// их статус и владелец на момент запроса. Статусы могут принимать следующие значение:
// 	EMITTED - Эмитирован,
// 	APPLIED - Нанесён,
// 	INTRODUCED - Введён в оборот,
// 	WRITTEN_OFF - Выведен из оборота, списан,
// 	WITHDRAWN - Выведен из оборота, продан,
// 	UNDEFINED - Неопределен.
// 
// Параметры:
// 	МассивИсходныхСтрок       - Массив из Структура,СтрокаТаблицыЗначений - Массив кодов маркировки.
// 
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* СтатусыКодовМаркировки - Соответствие - кодов маркировки и структур:
//		* Статус       - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
//		* ИННВладельца - Строка                                        - ИНН владельца кода маркировки.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусыКодовМаркировкиПакетно(МассивИсходныхСтрок, ПараметрыЗапросаСтатусов) Экспорт
	
	Организация                 = ПараметрыЗапросаСтатусов.Организация;
	ПолеИсточник                = ПараметрыЗапросаСтатусов.ПолеИсточник;
	СтатусыКодовМаркировкиКеш   = ПараметрыЗапросаСтатусов.СтатусыКодовМаркировкиКеш;
	НастройкиРазбора            = ПараметрыЗапросаСтатусов.НастройкиРазбора;
	ЗапрашиватьСтатусыКодовЕАЭС = ПараметрыЗапросаСтатусов.ЗапрашиватьСтатусыКодовЕАЭС;
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СоответствиеКодовМаркировки      = Новый Соответствие;
	ПараметрыЗапросаПоВидамПродукции = Новый Соответствие;
	
	ПараметрыНормализацииМОТП = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииМОТП.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииМОТП.ВключатьМРЦ              = Ложь;
	ПараметрыНормализацииМОТП.НачинаетсяСоСкобки       = Истина;
	
	ПараметрыНормализацииИСМП = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииИСМП.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииИСМП.НачинаетсяСоСкобки = Ложь;
	
	Для Каждого ЭлементМассива Из МассивИсходныхСтрок Цикл
		
		Если ПолеИсточник = Неопределено Тогда
			СтрокаТаблицы = ЭлементМассива;
		Иначе
			СтрокаТаблицы = ЭлементМассива[ПолеИсточник];
		КонецЕсли;
		
		ВидыПродукции = Новый Массив;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции) Тогда
			ВидыПродукции.Добавить(СтрокаТаблицы.ВидПродукции);
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				СтрокаТаблицы, "ВидыПродукцииКодаМаркировки") Тогда
				Для Каждого ВидПродукции Из СтрокаТаблицы.ВидыПродукцииКодаМаркировки Цикл
					ВидыПродукции.Добавить(ВидПродукции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗапроса = ПараметрыЗапросаПоВидамПродукции[СтрокаТаблицы.ВидПродукции];
		Если ПараметрыЗапроса = Неопределено Тогда
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ПараметрыURL",    Новый Массив);
			ПараметрыЗапроса.Вставить("КодыМаркировки",  Новый Массив);
			ПараметрыЗапроса.Вставить("ДобавленныеКоды", Новый Соответствие);
			ПараметрыЗапроса.Вставить("ПараметрыЗапросаПоКодамЕАЭС", Новый Соответствие);
			
			Если СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
				Или СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода
				Или СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
				Или СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
				Или СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво
				Или СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.СоковаяПродукция Тогда
				ПараметрыЗапроса.ПараметрыURL.Добавить(
					СтрШаблон(
						"pg=%1",
						ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(СтрокаТаблицы.ВидПродукции)));
			КонецЕсли;
			
			ПараметрыЗапросаПоВидамПродукции.Вставить(СтрокаТаблицы.ВидПродукции, ПараметрыЗапроса);
			
		КонецЕсли;
		
		Если ЗапрашиватьСтатусыКодовЕАЭС Тогда
			КодСтраныЕАЭС = КодСтраныЕАЭСПоСерийномуНомеру(СтрокаТаблицы);
			
			Если КодСтраныЕАЭС <> Неопределено Тогда
				ПараметрыЗапросаПоКодамЕАЭС(СтрокаТаблицы, КодСтраныЕАЭС, ПараметрыЗапроса.ПараметрыЗапросаПоКодамЕАЭС);
			КонецЕсли;
		КонецЕсли;
		
		Если ВидыПродукции.Количество() = 0 Тогда
			
			НормализованныйКодМаркировки = СтрокаТаблицы.Штрихкод;
			
			СтрокиПоКодуМаркировки = СоответствиеКодовМаркировки[НормализованныйКодМаркировки];
			Если СтрокиПоКодуМаркировки = Неопределено Тогда
				СтрокиПоКодуМаркировки = Новый Соответствие;
				СоответствиеКодовМаркировки[НормализованныйКодМаркировки] = СтрокиПоКодуМаркировки;
			КонецЕсли;
			
			СтрокиПоКодуМаркировки.Вставить(СтрокаТаблицы, Истина);
			
			Если ПараметрыЗапроса.ДобавленныеКоды[НормализованныйКодМаркировки] <> Неопределено Тогда
				Продолжить;
			Иначе
				ПараметрыЗапроса.ДобавленныеКоды.Вставить(НормализованныйКодМаркировки, Истина);
			КонецЕсли;
			
			ПараметрыЗапроса.КодыМаркировки.Добавить(НормализованныйКодМаркировки);
			
		Иначе
			
			Для Каждого ВидПродукции Из ВидыПродукции Цикл
				
				Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
					
					Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
						НормализованныйКодМаркировки = СтрокаТаблицы.Штрихкод;
					Иначе
						НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
							СтрокаТаблицы, ВидПродукции, ПараметрыНормализацииМОТП);
					КонецЕсли;
					
				Иначе
					
					Если СтрокаТаблицы.ДанныеРазбора = Неопределено Тогда
						НормализованныйКодМаркировки = СтрокаТаблицы.Штрихкод;
					Иначе
						НормализованныйКодМаркировки = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(СтрокаТаблицы, ПараметрыНормализацииИСМП);
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокиПоКодуМаркировки = СоответствиеКодовМаркировки[НормализованныйКодМаркировки];
				Если СтрокиПоКодуМаркировки = Неопределено Тогда
					СтрокиПоКодуМаркировки = Новый Соответствие;
					СоответствиеКодовМаркировки[НормализованныйКодМаркировки] = СтрокиПоКодуМаркировки;
				КонецЕсли;
				
				СтрокиПоКодуМаркировки.Вставить(СтрокаТаблицы, Истина);
				
				Если ПараметрыЗапроса.ДобавленныеКоды[НормализованныйКодМаркировки] <> Неопределено Тогда
					Продолжить;
				Иначе
					ПараметрыЗапроса.ДобавленныеКоды.Вставить(НормализованныйКодМаркировки, Истина);
				КонецЕсли;
				
				ПараметрыЗапроса.КодыМаркировки.Добавить(НормализованныйКодМаркировки);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастройкиРазбора = Неопределено Тогда
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
		
		НастройкиРазбораКодаМаркировки = Новый Структура;
		НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
		НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь));
		НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	Иначе
		НастройкиРазбораКодаМаркировки = НастройкиРазбора;
	КонецЕсли;
	
	Для Каждого КлючИЗначениеПараметровЗапроса Из ПараметрыЗапросаПоВидамПродукции Цикл
		
		ВидПродукции     = КлючИЗначениеПараметровЗапроса.Ключ;
		ПараметрыЗапроса = КлючИЗначениеПараметровЗапроса.Значение;
		
		ОтсортированныеКодыМаркировки = Новый СписокЗначений;
		ОтсортированныеКодыМаркировки.ЗагрузитьЗначения(ПараметрыЗапроса.КодыМаркировки);
		ОтсортированныеКодыМаркировки.СортироватьПоЗначению();
		
		URLЗапроса = СтрШаблон(
			"api/v3/true-api/cises/info%1",
			ИнтерфейсИСМП.ПараметрыЗапроса(ПараметрыЗапроса.ПараметрыURL));
		
		РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
			URLЗапроса, ОтсортированныеКодыМаркировки.ВыгрузитьЗначения(), КлючСессии,
			"POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
		
		РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
		
		ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
		
		Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
			
			Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
				
				ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
				
				Если ДанныеОбработки = Неопределено Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						URLЗапроса,
						РезультатОтправкиЗапроса);
					
				Иначе
					
					Если ТипЗнч(ДанныеОбработки) = Тип("Массив") Тогда
						
						Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
							ВозвращаемоеЗначение.СтатусыКодовМаркировки = Новый Соответствие;
						Иначе
							ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
						КонецЕсли;
						
						ДобавленныеСтрокиБез404 = Новый Соответствие();
						
						Для Каждого ЭлементДанных Из ДанныеОбработки Цикл
							
							ДанныеКодаМаркировки = ЭлементДанных["cisInfo"];
							
							КодОшибки = ЭлементДанных["errorCode"];
							Если КодОшибки = "404" Тогда
								
								ПараметрыКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки();
								Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
									ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
								Иначе
									ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
								КонецЕсли;
								
							ИначеЕсли КодОшибки = "503" Тогда
								
								ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
									URLЗапроса,
									РезультатОтправкиЗапроса);
								Возврат ВозвращаемоеЗначение;
								
							Иначе
								
								ПараметрыКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки(ДанныеКодаМаркировки, ВидПродукции, НастройкиРазбораКодаМаркировки);
								
							КонецЕсли;
							
							КодМаркировки = ДанныеКодаМаркировки["cis"];
							Если КодМаркировки = Неопределено
								И КодОшибки <> "404" Тогда
								КодМаркировки = ДанныеКодаМаркировки["requestedCis"]; // Разагрегированные короба не имеют поля cis
							КонецЕсли;
							РезультатПоиска = СоответствиеКодовМаркировки[КодМаркировки];
							Если РезультатПоиска <> Неопределено Тогда
								
								Для Каждого КлючИЗначение Из РезультатПоиска Цикл
									
									СтрокаТаблицы = КлючИЗначение.Ключ;
									
									Если ДобавленныеСтрокиБез404[СтрокаТаблицы] <> Неопределено Тогда
										Продолжить;
									КонецЕсли;
									
									Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции)
										И ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидПродукции) Тогда
										СтрокаТаблицы.ВидПродукции = ПараметрыКодаМаркировки.ВидПродукции;
									КонецЕсли;
									
									Если ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидУпаковки)
										И СтрокаТаблицы.ВидУпаковки <> ПараметрыКодаМаркировки.ВидУпаковки Тогда
										
										Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки)
											Или ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "НоменклатураСопоставленаПоУПД")
												И СтрокаТаблицы.НоменклатураСопоставленаПоУПД Тогда
											ЗаполненВидУпаковкиПоДаннымСтатуса(СтрокаТаблицы, ПараметрыКодаМаркировки);
											СтрокаТаблицы.ВидУпаковки = ПараметрыКодаМаркировки.ВидУпаковки;
										КонецЕсли;
										
									КонецЕсли;
									
									ВозвращаемоеЗначение.СтатусыКодовМаркировки.Вставить(
										СтрокаТаблицы, ПараметрыКодаМаркировки);
									
									Если КодОшибки <> "404" Тогда
										
										ДобавленныеСтрокиБез404.Вставить(СтрокаТаблицы, ПараметрыКодаМаркировки);
										Если ЗапрашиватьСтатусыКодовЕАЭС Тогда
											ПараметрыЗапроса.ПараметрыЗапросаПоКодамЕАЭС.Удалить(СтрокаТаблицы);
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если ЗапрашиватьСтатусыКодовЕАЭС И ПараметрыЗапроса.ПараметрыЗапросаПоКодамЕАЭС.Количество() Тогда
							
							РезультатЗапросаСтатусовКодовМаркировкиЕАЭС = ЗапроситьСтатусыКодовМаркировкиЕАЭС(
								ПараметрыЗапроса.ПараметрыЗапросаПоКодамЕАЭС, ВозвращаемоеЗначение.СтатусыКодовМаркировки, Организация);
							
							ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатЗапросаСтатусовКодовМаркировкиЕАЭС.ТребуетсяОбновлениеКлючаСессии;
							ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировкиЕАЭС.ТекстОшибки;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
				
				Возврат ВозвращаемоеЗначение;
				
			ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
				
				Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
					ВозвращаемоеЗначение.СтатусыКодовМаркировки = Новый Соответствие;
				Иначе
					ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
				КонецЕсли;
				
				Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл
					
					ПараметрыКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки();
					
					Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаТаблицы.ВидПродукции) Тогда
						ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
					Иначе
						ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
					КонецЕсли;
					
					ВозвращаемоеЗначение.СтатусыКодовМаркировки.Вставить(СтрокаТаблицы, ПараметрыКодаМаркировки);
					
				КонецЦикла;
				
				Если ЗапрашиватьСтатусыКодовЕАЭС И ПараметрыЗапроса.ПараметрыЗапросаПоКодамЕАЭС.Количество() Тогда
					
					РезультатЗапросаСтатусовКодовМаркировкиЕАЭС = ЗапроситьСтатусыКодовМаркировкиЕАЭС(
						ПараметрыЗапроса.ПараметрыЗапросаПоКодамЕАЭС, ВозвращаемоеЗначение.СтатусыКодовМаркировки, Организация);
					
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатЗапросаСтатусовКодовМаркировкиЕАЭС.ТребуетсяОбновлениеКлючаСессии;
					ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировкиЕАЭС.ТекстОшибки;
					
				КонецЕсли;
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			КонецЕсли;
			
		ИначеЕсли ВозвращаемоеЗначение.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
			Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
				ВозвращаемоеЗначение.СтатусыКодовМаркировки = Новый Соответствие;
			Иначе
				ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл
				
				ПараметрыКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки();
				
				Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаТаблицы.ВидПродукции) Тогда
					ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
				Иначе
					ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
				КонецЕсли;
				
				ВозвращаемоеЗначение.СтатусыКодовМаркировки.Вставить(СтрокаТаблицы, ПараметрыКодаМаркировки);
				
			КонецЦикла;
			
			Если ЗапрашиватьСтатусыКодовЕАЭС И ПараметрыЗапроса.ПараметрыЗапросаПоКодамЕАЭС.Количество() Тогда
				
				РезультатЗапросаСтатусовКодовМаркировкиЕАЭС = ЗапроситьСтатусыКодовМаркировкиЕАЭС(
					ПараметрыЗапроса.ПараметрыЗапросаПоКодамЕАЭС, ВозвращаемоеЗначение.СтатусыКодовМаркировки, Организация);
				
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатЗапросаСтатусовКодовМаркировкиЕАЭС.ТребуетсяОбновлениеКлючаСессии;
				ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировкиЕАЭС.ТекстОшибки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос статусов для кодов маркировки из ЕАЭС.
// В результате успешного выполнения запроса в ответе вернется список кодов маркировки,
// их статус и владелец на момент запроса. Статусы могут принимать следующие значение:
// 	cisStatusId:
// 	"00" - не определён;
// 	"1" - в обороте на территории государства-члена ЕАЭС;
// 	"2" - не в обороте на территории государства-члена ЕАЭС 
// 
// Параметры:
// 	МассивИсходныхСтрок       - Массив из Структура,СтрокаТаблицыЗначений - Массив кодов маркировки.
// 	СтатусыКодовМаркировкиКеш - Соответствие, Неопределено                - Кеш статусов кодов маркировки.
// 	Организация               - ОпределяемыйТип.Организация               - Организация.
// 	ПолеИсточник              - Строка - Поле источник данных.
// 	НастройкиРазбора - (см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки).
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* СтатусыКодовМаркировки - Соответствие - кодов маркировки и структур.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусыКодовМаркировкиЕАЭС(СоответствиеИсходныхСтрок, СтатусыКодовМаркировкиКеш = Неопределено, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.ВключатьМРЦ              = Ложь;
	
	Для Каждого КлючИЗначение Из СоответствиеИсходныхСтрок Цикл
		
		ПараметрыЗапроса = КлючИЗначение.Значение;
		ТелоЗапроса = Новый Структура("cis", ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ПараметрыЗапроса.КодыМаркировки));
		
		URLЗапроса = СтрШаблон(
			"api/v3/true-api/cises/eaes/info%1",
			ИнтерфейсИСМП.ПараметрыЗапроса(ПараметрыЗапроса.ПараметрыURL));
		
		РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
			URLЗапроса, ТелоЗапроса, КлючСессии,
			"POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
		
		РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
		
		ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
		
		СтрокаТаблицы = КлючИЗначение.Ключ;
		
		Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
			
			Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
				
				ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
				
				Если ДанныеОбработки = Неопределено Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						URLЗапроса,
						РезультатОтправкиЗапроса);
					
				Иначе
					
					Если ТипЗнч(ДанныеОбработки) = Тип("Соответствие") Тогда
						
						Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
							ВозвращаемоеЗначение.СтатусыКодовМаркировки = Новый Соответствие;
						Иначе
							ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
						КонецЕсли;
						
						ПараметрыКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировкиЕАЭС(ДанныеОбработки);
						
						Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции)
							И ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидПродукции) Тогда
							СтрокаТаблицы.ВидПродукции = ПараметрыКодаМаркировки.ВидПродукции;
						КонецЕсли;
						
						ВозвращаемоеЗначение.СтатусыКодовМаркировки.Вставить(СтрокаТаблицы, ПараметрыКодаМаркировки);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
				
				Возврат ВозвращаемоеЗначение;
				
			ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
				
				Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
					
					ПараметрыКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки();
					ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
					
					ВозвращаемоеЗначение.СтатусыКодовМаркировки = Новый Соответствие;
					ВозвращаемоеЗначение.СтатусыКодовМаркировки.Вставить(КлючИЗначение.Ключ, ПараметрыКодаМаркировки);
					
				Иначе
					ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
				КонецЕсли;
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			КонецЕсли;
			
		ИначеЕсли ВозвращаемоеЗначение.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
			Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
				
				ПараметрыКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыКодаМаркировки();
				ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
				
				ВозвращаемоеЗначение.СтатусыКодовМаркировки = Новый Соответствие;
				ВозвращаемоеЗначение.СтатусыКодовМаркировки.Вставить(КлючИЗначение.Ключ, ПараметрыКодаМаркировки);
				
			Иначе
				
				// СтатусыКодовМаркировки уже инициализированы при запросе api/v3/true-api/cises/info
				ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет коды пачек, блоков и логистических упаковок на принадлежность к серой зоне.
//
// Параметры:
// 	МассивИсходныхСтрок       - Массив из Структура, СтрокаТаблицыЗначений - Массив кодов маркировки.
// 	СтатусыКодовМаркировкиКеш - Соответствие, Неопределено                - Кеш статусов кодов маркировки.
// 	Организация               - ОпределяемыйТип.Организация               - Организация.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* СостояниеСеройЗоны - Соответствие Из КлючИЗначение:
//		* Ключ - Структура - Исходная строка
//		* Значение - Структура - Состояние серой зоны.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ПроверитьСеруюЗонуКодовМаркировки(ДанныеДляЗапроса, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СостояниеСеройЗоны",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЛогистическиеУпаковкиСоСкобками = Новый Соответствие;
	ЛогистическиеУпаковкиБезСкобок  = Новый Соответствие;
	
	ПараметрыНормализацииТабакЛогистическаяУпаковка = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
	
	ПакетыКодовМаркировки = Новый Массив;
	ПакетКодовМаркировки  = Неопределено;
	
	КоличествоКодовВПакетеДляЗапросаСтатусов = ИнтеграцияИСМППовтИсп.КоличествоКодовВПакетеДляЗапросаСтатусов();
	
	Если ТипЗнч(ДанныеДляЗапроса) = Тип("Структура")
		Или ТипЗнч(ДанныеДляЗапроса) = Тип("СтрокаТаблицыЗначений") 
		Или ТипЗнч(ДанныеДляЗапроса) = Тип("СтрокаДереваЗначений") Тогда
		
		МассивИсходныхСтрок = Новый Массив();
		МассивИсходныхСтрок.Добавить(ДанныеДляЗапроса);
		
	Иначе
		
		МассивИсходныхСтрок = ДанныеДляЗапроса;
		
	КонецЕсли;
	
	Для Каждого СтрокаКодаМаркировки Из МассивИсходныхСтрок Цикл
		
		Если ПакетКодовМаркировки = Неопределено
			Или ПакетКодовМаркировки.Количество() >= КоличествоКодовВПакетеДляЗапросаСтатусов Тогда
			ПакетКодовМаркировки = Новый Массив();
			ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
		КонецЕсли;
		
		Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			КодМаркировкиБезСкобок = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				СтрокаКодаМаркировки, СтрокаКодаМаркировки.ВидПродукции, ПараметрыНормализацииТабакЛогистическаяУпаковка);
			
			Если КодМаркировкиБезСкобок <> СтрокаКодаМаркировки.Штрихкод Тогда
				
				// Формирование копии элемента без скобок
				СтрокаКодаМаркировкиБезСкобок = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(, СтрокаКодаМаркировки.ВидПродукции);
				ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировкиБезСкобок, СтрокаКодаМаркировки);
				СтрокаКодаМаркировкиБезСкобок.Штрихкод = КодМаркировкиБезСкобок;
				ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(
					СтрокаКодаМаркировкиБезСкобок,
					СтрокаКодаМаркировкиБезСкобок.ДанныеРазбора);
				ЛогистическиеУпаковкиБезСкобок.Вставить(СтрокаКодаМаркировкиБезСкобок, СтрокаКодаМаркировки);
				ЛогистическиеУпаковкиСоСкобками.Вставить(СтрокаКодаМаркировки, СтрокаКодаМаркировкиБезСкобок);
				
				ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировкиБезСкобок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПакетКодовМаркировки.Добавить(СтрокаКодаМаркировки);
		
	КонецЦикла;
	
	СостояниеСеройЗоны = Новый Соответствие;
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		РезультатЗапросаСтатусовКодовМаркировок = ПроверитьСеруюЗонуКодовМаркировкиПакетно(
			ПакетКодовМаркировки, СостояниеСеройЗоны, Организация);
		
		ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатЗапросаСтатусовКодовМаркировок.РезультатОтправкиЗапроса;
		
		Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли ЗначениеЗаполнено(РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки) Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		Для Каждого СтрокаКодаМаркировки Из ПакетКодовМаркировки Цикл
			
			Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				
				СтрокаКодаМаркировкиБезСкобок  = ЛогистическиеУпаковкиСоСкобками.Получить(СтрокаКодаМаркировки);
				СтрокаКодаМаркировкиСоСкобками = ЛогистическиеУпаковкиБезСкобок.Получить(СтрокаКодаМаркировки);
				
				Если СтрокаКодаМаркировкиБезСкобок <> Неопределено
					Или СтрокаКодаМаркировкиСоСкобками <> Неопределено Тогда
					
					// Обрабатываем из пары только код со скобками
					Если СтрокаКодаМаркировкиБезСкобок = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаКодаМаркировкиСоСкобками = СтрокаКодаМаркировки;
					
					ДанныеСтатусаБезСкобок  = СостояниеСеройЗоны[СтрокаКодаМаркировкиБезСкобок];
					ДанныеСтатусаСоСкобками = СостояниеСеройЗоны[СтрокаКодаМаркировкиСоСкобками];
					
					Если ДанныеСтатусаСоСкобками <> Неопределено Тогда
						ДанныеСтатуса = ДанныеСтатусаСоСкобками;
					Иначе
						ДанныеСтатуса = ДанныеСтатусаБезСкобок;
					КонецЕсли;
					
					СостояниеСеройЗоны[СтрокаКодаМаркировки] = ДанныеСтатуса;
					СостояниеСеройЗоны.Удалить(СтрокаКодаМаркировкиБезСкобок);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.СостояниеСеройЗоны = СостояниеСеройЗоны;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет коды пачек, блоков и логистических упаковок на принадлежность к серой зоне.
//
// Параметры:
// 	МассивИсходныхСтрок       - Массив из Структура, СтрокаТаблицыЗначений - Массив кодов маркировки.
// 	СтатусыКодовМаркировкиКеш - Соответствие, Неопределено                - Кеш статусов кодов маркировки.
// 	Организация               - ОпределяемыйТип.Организация               - Организация.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* СостояниеСеройЗоны - Соответствие Из КлючИЗначение:
//		* Ключ - Структура - Исходная строка
//		* Значение - Структура - Состояние серой зоны.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ПроверитьСеруюЗонуКодовМаркировкиПакетно(МассивИсходныхСтрок, СостояниеСеройЗоныКеш = Неопределено, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СостояниеСеройЗоны",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	НормализованныеКодыМаркировки = Новый Массив;
	СоответствиеКодовМаркировки   = Новый Соответствие;
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.ВключатьМРЦ = Ложь;
	
	Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл
		
		Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НормализованныйКодМаркировки = СтрокаТаблицы.Штрихкод;
		Иначе
			НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				СтрокаТаблицы, СтрокаТаблицы.ВидПродукции, ПараметрыНормализации);
		КонецЕсли;
		
		Если НормализованныеКодыМаркировки.Найти(НормализованныйКодМаркировки) = Неопределено Тогда
			НормализованныеКодыМаркировки.Добавить(НормализованныйКодМаркировки);
			СоответствиеКодовМаркировки.Вставить(НормализованныйКодМаркировки, Новый Массив);
		КонецЕсли;
		
		СоответствиеКодовМаркировки[НормализованныйКодМаркировки].Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	ОтсортированныеКодыМаркировки = Новый СписокЗначений;
	ОтсортированныеКодыМаркировки.ЗагрузитьЗначения(НормализованныеКодыМаркировки);
	ОтсортированныеКодыМаркировки.СортироватьПоЗначению();
	
	URLЗапроса = "api/v3/true-api/cises/gz/info";
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса, ОтсортированныеКодыМаркировки.ВыгрузитьЗначения(), КлючСессии,
		"POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Если ТипЗнч(ДанныеОбработки) = Тип("Массив") Тогда
					
					Если СостояниеСеройЗоныКеш = Неопределено Тогда
						ВозвращаемоеЗначение.СостояниеСеройЗоны = Новый Соответствие;
					Иначе
						ВозвращаемоеЗначение.СостояниеСеройЗоны = СостояниеСеройЗоныКеш;
					КонецЕсли;
					
					Для Каждого ЭлементМассива Из ДанныеОбработки Цикл
						
						КодОшибки = ЭлементМассива["errorCode"];
						Если КодОшибки = "404" Тогда
							Продолжить;
						КонецЕсли;
						
						ЭлементДанных = ЭлементМассива["info"];
						
						Значение = ЭлементДанных["packageType"];
						Если Значение <> Неопределено Тогда
							ВидУпаковки = ИнтерфейсИСМПСлужебный.ВидУпаковки(Значение, Перечисления.ВидыПродукцииИС.Табак);
						Иначе
							ВидУпаковки = Неопределено;
						КонецЕсли;
						
						СостояниеСеройЗоны = Новый Структура;
						СостояниеСеройЗоны.Вставить("ВидУпаковки",       ВидУпаковки);
						СостояниеСеройЗоны.Вставить("ВСеройЗоне",        Ложь);
						СостояниеСеройЗоны.Вставить("СодержитСерыеКоды", Ложь);
						СостояниеСеройЗоны.Вставить("КоличествоПотребительскихУпаковок", 0);
						СостояниеСеройЗоны.Вставить("КоличествоГрупповыхУпаковок",       0);
						СостояниеСеройЗоны.Вставить("КоличествоВложенныхЕдиниц",         0);
						
						Значение = ЭлементДанных["inGrayZone"];
						Если Значение <> Неопределено Тогда
							СостояниеСеройЗоны.ВСеройЗоне = Значение;
						КонецЕсли;
						
						Значение = ЭлементДанных["containsGrayCodes"];
						Если Значение <> Неопределено Тогда
							СостояниеСеройЗоны.СодержитСерыеКоды = Значение;
						КонецЕсли;
						
						Значение = ЭлементДанных["gzPacks"];
						Если Значение <> Неопределено Тогда
							СостояниеСеройЗоны.КоличествоПотребительскихУпаковок = Значение;
						КонецЕсли;
						
						Значение = ЭлементДанных["gzBlocks"];
						Если Значение <> Неопределено Тогда
							СостояниеСеройЗоны.КоличествоГрупповыхУпаковок = Значение;
						КонецЕсли;
						
						Значение = ЭлементДанных["aggCount"];
						Если Значение <> Неопределено Тогда
							СостояниеСеройЗоны.КоличествоВложенныхЕдиниц = Значение;
						КонецЕсли;
						
						КодМаркировки = ЭлементДанных["code"];
						Для Каждого СтрокаТаблицы Из СоответствиеКодовМаркировки[КодМаркировки] Цикл
							
							ВозвращаемоеЗначение.СостояниеСеройЗоны.Вставить(
								СтрокаТаблицы, СостояниеСеройЗоны);
							
						КонецЦикла;
						
					КонецЦикла;
				
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
			Если СостояниеСеройЗоныКеш = Неопределено Тогда
				ВозвращаемоеЗначение.СостояниеСеройЗоны = Новый Соответствие;
			Иначе
				ВозвращаемоеЗначение.СостояниеСеройЗоны = СостояниеСеройЗоныКеш;
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл
				
				СостояниеСеройЗоны = Новый Структура;
				СостояниеСеройЗоны.Вставить("ВидУпаковки",       СтрокаТаблицы.ВидУпаковки);
				СостояниеСеройЗоны.Вставить("ВСеройЗоне",        Ложь);
				СостояниеСеройЗоны.Вставить("СодержитСерыеКоды", Ложь);
				СостояниеСеройЗоны.Вставить("КоличествоПотребительскихУпаковок",            0);
				СостояниеСеройЗоны.Вставить("КоличествоГрупповыхУпаковок",       0);
				СостояниеСеройЗоны.Вставить("КоличествоВложенныхЕдиниц",         0);
				
				ВозвращаемоеЗначение.СостояниеСеройЗоны.Вставить(СтрокаТаблицы, СостояниеСеройЗоны);
				
			КонецЦикла;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	ИначеЕсли ВозвращаемоеЗначение.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		
		Если СостояниеСеройЗоныКеш = Неопределено Тогда
			ВозвращаемоеЗначение.СостояниеСеройЗоны = Новый Соответствие;
		Иначе
			ВозвращаемоеЗначение.СостояниеСеройЗоны = СостояниеСеройЗоныКеш;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из МассивИсходныхСтрок Цикл
			
			СостояниеСеройЗоны = Новый Структура;
			СостояниеСеройЗоны.Вставить("ВидУпаковки",       СтрокаТаблицы.ВидУпаковки);
			СостояниеСеройЗоны.Вставить("ВСеройЗоне",        Ложь);
			СостояниеСеройЗоны.Вставить("СодержитСерыеКоды", Ложь);
			СостояниеСеройЗоны.Вставить("КоличествоПотребительскихУпаковок", 0);
			СостояниеСеройЗоны.Вставить("КоличествоГрупповыхУпаковок",       0);
			СостояниеСеройЗоны.Вставить("КоличествоВложенныхЕдиниц",         0);
			
			ВозвращаемоеЗначение.СостояниеСеройЗоны.Вставить(СтрокаТаблицы, СостояниеСеройЗоны);
			
		КонецЦикла;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос данных об агрегации кодов маркировки в ИС МОТП.
// В результате успешного выполнения запроса в ответе вернется информация о составе кода агрегата.
// В запросе следует указывать только один код маркировки.
// 
// Параметры:
// 	СтрокаКодаМаркировки - Структура, СтрокаТаблицыЗначений - Строка кода маркировки.
// Возвращаемое значение:
//	 Структура - Вложенные коды упаковок:
//		* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//		* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//		* ТекстОшибки - Строка - Текст ошибки
//		* ДанныеОбАгрегации - Массив из Структура:
//			* КодМаркировки - Строка                                        - Код маркировки.
//			* Статус        - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
//			* ИНН           - Строка                                        - ИНН владельца кода маркировки.
Функция ЗапроситьДанныеОбАгрегацииКодовМаркировки(СтрокаКодаМаркировки, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОбАгрегации",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.ВключатьМРЦ = Ложь;
	
	Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		НормализованныйКодМаркировки = СтрокаКодаМаркировки.Штрихкод;
	Иначе
		НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(СтрокаКодаМаркировки, СтрокаКодаМаркировки.ВидПродукции, ПараметрыНормализации);
	КонецЕсли;
	
	ТелоЗапроса = Новый Массив;
	ТелоЗапроса.Добавить(НормализованныйКодМаркировки);
	
	URLЗапроса = "api/v3/true-api/cises/aggregated/list?pg=tobacco";
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса, ТелоЗапроса, КлючСессии,
		"POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОбАгрегации = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос данных об агрегации кодов маркировки в ИС МОТП.
// В результате успешного выполнения запроса в ответе вернется информация о составе кода агрегата.
// В запросе следует указывать только один код маркировки.
// 
// Параметры:
// 	СтрокаКодаМаркировки - Структура - Строка кода маркировки.
// Возвращаемое значение:
//	 Структура - Вложенные коды упаковок:
//		* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//		* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//		* ТекстОшибки - Строка - Текст ошибки
//		* ДанныеОбАгрегации - Массив из Структура:
//			* КодМаркировки - Строка                                        - Код маркировки.
//			* Статус        - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
//			* ИНН           - Строка                                        - ИНН владельца кода маркировки.
Функция ЗапроситьДанныеОбАгрегацииКодовМаркировкиПакетно(ПакетКодовМаркировки, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОбАгрегации",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализации.ВключатьМРЦ = Ложь;
	
	ИсходныеСтроки = Новый Соответствие();
	ВидыПродукции  = Новый Соответствие();
	ТелоЗапроса    = Новый Массив;
	
	Для Каждого ЭлементПакета Из ПакетКодовМаркировки Цикл
		
		ТелоЗапроса.Добавить(ЭлементПакета.ИсходныйШтрихкод);
		ИсходныеСтроки.Вставить(ЭлементПакета.Штрихкод, ЭлементПакета);
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ЭлементПакета.ВидПродукции) Тогда
			ВидыПродукции.Вставить(Перечисления.ВидыПродукцииИС.Табак);
		ИначеЕсли ЭлементПакета.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода
			Или ЭлементПакета.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
			ВидыПродукции.Вставить(ЭлементПакета.ВидПродукции);
		ИначеЕсли ЭлементПакета.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
			Или ЭлементПакета.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
			ВидыПродукции.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначенияПараметровТоварнойГруппы = Новый Массив();
	Для Каждого КлючИЗначение Из ВидыПродукции Цикл
		ЗначенияПараметровТоварнойГруппы.Добавить(ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(КлючИЗначение.Ключ));
	КонецЦикла;
	ЗначениеПараметраТоварнаяГруппа = СтрСоединить(ЗначенияПараметровТоварнойГруппы, ",");
	
	ПараметрыЗапроса = Новый Массив();
	Если ЗначениеЗаполнено(ЗначениеПараметраТоварнаяГруппа) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ЗначениеПараметраТоварнаяГруппа));
	КонецЕсли;
	
	ОтсортированныеКодыМаркировки = Новый СписокЗначений;
	ОтсортированныеКодыМаркировки.ЗагрузитьЗначения(ТелоЗапроса);
	ОтсортированныеКодыМаркировки.СортироватьПоЗначению();
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/cises/aggregated/list%1",
		ИнтерфейсИСМП.ПараметрыЗапроса(ПараметрыЗапроса));
		
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса, ОтсортированныеКодыМаркировки.ВыгрузитьЗначения(), КлючСессии,
		"POST", ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОбАгрегации = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// В результате успешного выполнения запроса в ответе вернется информация о максимальной
// розничной цене табачной продукции, если она установлена.
// 
// Параметры:
// 	ДанныеДляЗапроса - Массив из Структура,СтрокаТаблицыЗначений,СтрокаДереваЗначений,
// 	Структура,СтрокаТаблицыЗначений,СтрокаДереваЗначений - Коллекция или элемент коллекции.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ДанныеПродукции - Соответствие - где:
//   * Ключ - Структура,СтрокаТаблицыЗначений,СтрокаДереваЗначений - Переданное значение в параметре ДанныеДляЗапроса,
//   * Значение - Структура - данные о статусе и МРЦ:
//		** Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода.
//		** МРЦ  - Число  - МРЦ для кода маркировки. Если указано -1, то МРЦ не ограничено.
//		** Наименование - Строка - Наименование продукции.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьМРЦДляКодаМаркировки(ДанныеДляЗапроса) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
		
	РезультатЗапросаСтатусов = ЗапроситьСтатусыКодовМаркировки(ДанныеДляЗапроса);
	
	Если РезультатЗапросаСтатусов.СтатусыКодовМаркировки <> Неопределено Тогда
		
		ВозвращаемоеЗначение.ДанныеПродукции = РезультатЗапросаСтатусов.СтатусыКодовМаркировки;
		
	ИначеЕсли РезультатЗапросаСтатусов.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусов.ТекстОшибки;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусов.ТекстОшибки;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрПродукции

// Выполнить запрос списка продукции.
// В результате успешного выполнения запроса в ответе вернется список продукции,
// содержащие id - идентификатор продукта, gtin - международный товарный идентификатор и producerINN - ИНН производителя.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево          - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
//	* ПродукцияОрганизации           - ТаблицаЗначений - Список продукции организации:
//		** GTIN                - Строка - GTIN товара.
//		** ИННПроизводителя    - Строка - ИНН производителя.
//		** ТипУпаковки         - Строка - Тип упаковки товара.
//		** КоличествоВложенных - Число  - Количество вложенных единиц.
//  * ТекстОшибки                    - Строка          - Текст сообщения об ошибке.
Функция ЗапроситьСписокПродукции(НомерСтраницы = 0) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ПродукцияОрганизации",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон("api/v4/true-api/product/gtin?pg=tobacco&limit=100&page=%1", НомерСтраницы);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ИнтерфейсМОТПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ПродукцияОрганизации = Новый ТаблицаЗначений;
				ПродукцияОрганизации.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
				
				Для Каждого ЭлементМассива Из ДанныеОбработки.gtins Цикл
					
					СтрокаТЧ      = ПродукцияОрганизации.Добавить();
					СтрокаТЧ.GTIN = ЭлементМассива;
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ПродукцияОрганизации = ПродукцияОрганизации;
				
			КонецЕсли;

		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;

			Возврат ВозвращаемоеЗначение;

		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыПостроенияДерева(ПараметрыСканирования, ДанныеПоШтрихкодам = Неопределено) Экспорт
	
	ПараметрыДерева = Новый Структура();
	ПараметрыДерева.Вставить("ВариантПолученияМРЦ",            "ВычислениеИЗапрос");
	ПараметрыДерева.Вставить("Организация",                    Неопределено);
	ПараметрыДерева.Вставить("ЭтоПроверкаКодовМаркировкиИСМП", Ложь);
	ПараметрыДерева.Вставить("ЭтоОтчетПроизводственнойЛинии",  Ложь);
	ПараметрыДерева.Вставить("УчитыватьМРЦ",                   ИнтеграцияИСМПКлиентСерверПовтИсп.УчитыватьМРЦ());
	ПараметрыДерева.Вставить("ИспользуетсяСераяЗона",          Ложь);
	ПараметрыДерева.Вставить("ПроверятьДублиКодовМаркировки",  Неопределено);
	ПараметрыДерева.Вставить("ЗаполнятьСрокГодности",          Ложь);
	ПараметрыДерева.Вставить("ТребуетсяЧастичноеВыбытие",      Ложь);
	ПараметрыДерева.Вставить("ЧастичноеВыбытиеПрименимо",      Ложь);
	
	Если ПараметрыСканирования <> Неопределено Тогда
		
		Если Не ПараметрыДерева.УчитыватьМРЦ
			И (ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
			Или ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии) Тогда
			ПараметрыДерева.УчитыватьМРЦ = Истина;
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ВариантПолученияМРЦ") Тогда
			ПараметрыДерева.ВариантПолученияМРЦ = ПараметрыСканирования.ВариантПолученияМРЦ;
		КонецЕсли;
		
		ПараметрыДерева.Организация                    = ПараметрыСканирования.Организация;
		ПараметрыДерева.ЭтоПроверкаКодовМаркировкиИСМП = ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП;
		ПараметрыДерева.ЭтоОтчетПроизводственнойЛинии  = ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии;
		
		Если ПараметрыСканирования.Свойство("ДопустимыПроверкиСеройЗоныМОТП") Тогда
			ПараметрыДерева.ИспользуетсяСераяЗона = ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП;
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ПроверятьДублиКодовМаркировки")
			И (ПараметрыДерева.ЭтоПроверкаКодовМаркировкиИСМП
				Или ПараметрыДерева.ЭтоОтчетПроизводственнойЛинии) Тогда
			ПараметрыДерева.ПроверятьДублиКодовМаркировки = ПараметрыСканирования.ПроверятьДублиКодовМаркировки;
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
				Или ПараметрыСканирования.Свойство("КонтролироватьОкончаниеСрокаГодности") Тогда
			ПараметрыДерева.ЗаполнятьСрокГодности = ПараметрыСканирования.ЗаполнятьСрокГодности
				Или ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности;
		КонецЕсли;
		
		ПараметрыДерева.ТребуетсяЧастичноеВыбытие = ШтрихкодированиеИС.ТребуетсяЧастичноеВыбытие(
			ПараметрыСканирования,
			ДанныеПоШтрихкодам);
		
		Если Не ПараметрыДерева.ТребуетсяЧастичноеВыбытие Тогда
			Для Каждого ВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
				Если ИнтеграцияИСМПКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции) Тогда
					ПараметрыДерева.ЧастичноеВыбытиеПрименимо = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыДерева;
	
КонецФункции

// Параметры заполнения дерева упаковок.
// Параметры:
// 	ИсходныеПараметры = Структура, Неопределено - Исходные параметры.
// Возвращаемое значение:
// 	Структура - Описание:
// * ВариантПолученияМРЦ    - Строка - Вариант получения МРЦ.
// * Детализация            - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Деталиция упаковок.
// * Кеш                    - Структура - 
// * КодыМаркировкиУпаковок - Соответствие -
// * ДанныеВерхнегоУровня   - СтрокаДереваЗначений, Структура - 
// * ДеревоУпаковок         - ДеревоЗначений, СтрокаДереваЗначений -
// * ПараметрыДерева        - см. ПараметрыПостроенияДерева
Функция ПараметрыЗаполненияДереваУпаковок(ИсходныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ДеревоУпаковок");
	Результат.Вставить("ДанныеВерхнегоУровня");
	Результат.Вставить("КодыМаркировкиУпаковок");
	Результат.Вставить("Кеш");
	Результат.Вставить("Детализация");
	Результат.Вставить("ВариантПолученияМРЦ");
	Результат.Вставить("СоответствиеСтрокДерева");
	Результат.Вставить("ДанныеОбАгрегации");
	Результат.Вставить("СтатусыКодовМаркировки");
	Результат.Вставить("ДополнительныеКолонки");
	Результат.Вставить("ДополнительныеКолонкиДляВложенныхСтрокДерева");
	Результат.Вставить("ПоляВДанныхСтатуса");
	Результат.Вставить("ПоляВДанныхСтатусаДляВложенныхСтрокДерева");
	Результат.Вставить("ВидПродукции");
	Результат.Вставить("ПараметрыДерева");
	Результат.Вставить("ЭталонСтроки");
	Результат.Вставить("СозданиеНаборов");
	
	Если ИсходныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ИсходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запрашивает МРЦ по строкам дерева.
// 
// Параметры:
// 	ЗапрашиваемыеСтроки - Массив из СтрокаДереваЗначений - Запрашиваемые данные.
Процедура ЗапросМРЦПоСтрокамДерева(ЗапрашиваемыеСтроки) Экспорт
	
	Если ЗапрашиваемыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаСтатусовДляМРЦ = ИнтерфейсМОТП.ЗапроситьМРЦДляКодаМаркировки(ЗапрашиваемыеСтроки);
	
	Если РезультатЗапросаСтатусовДляМРЦ.ДанныеПродукции <> Неопределено Тогда
		
		ДанныеПродукции = РезультатЗапросаСтатусовДляМРЦ.ДанныеПродукции;
		
		Для Каждого СтрокаЗапроса Из ЗапрашиваемыеСтроки Цикл
			
			ДанныеСтроки = ДанныеПродукции.Получить(СтрокаЗапроса);
			Если ДанныеСтроки <> Неопределено Тогда
				СтрокаЗапроса.МРЦ = ДанныеСтроки.МРЦ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует МРЦ стройкой с лидирующими нулями.
// 
// Параметры:
//  МРЦ   - Число - Максимальная розничная цена.
//  Длина - Число - Минимальная длинна итогового значения.
// Возвращаемое значение:
//  Строка - МРЦ блока.
Функция ЗначениеМРЦСтрокой(МРЦ, Длина = 6) Экспорт
	
	СтрокаМРЦ = Формат(МРЦ * 100, "ЧГ=0;"); // МРЦ в копейках
	Пока СтрДлина(СтрокаМРЦ) < Длина Цикл
		СтрокаМРЦ = "0" + СтрокаМРЦ;
	КонецЦикла;
	
	Возврат СтрокаМРЦ;
	
КонецФункции

Процедура ПараметрыЗапросаПоКодамЕАЭС(СтрокаТаблицы, КодСтраныЕАЭС, ПараметрыЗапроса) Экспорт
	
	ПараметрыЗапросаЕАЭС = ПараметрыЗапроса[СтрокаТаблицы];
	Если ПараметрыЗапросаЕАЭС = Неопределено Тогда
		
		ПараметрыЗапросаЕАЭС = Новый Структура;
		ПараметрыЗапросаЕАЭС.Вставить("ПараметрыURL",   Новый Массив);
		ПараметрыЗапросаЕАЭС.Вставить("КодыМаркировки", СтрокаТаблицы.ШтрихкодBase64);
		
		ПараметрыЗапросаЕАЭС.ПараметрыURL.Добавить(
			СтрШаблон(
				"country=%1",
				КодСтраныЕАЭС));
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции) Тогда
			ПараметрыЗапросаЕАЭС.ПараметрыURL.Добавить(
				СтрШаблон(
					"pg=%1",
					ИнтерфейсИСМПСлужебный.ТоварнаяГруппа(СтрокаТаблицы.ВидПродукции)));
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить(СтрокаТаблицы, ПараметрыЗапросаЕАЭС);
	
КонецПроцедуры

Функция КодСтраныЕАЭСПоСерийномуНомеру(СтрокаТаблицы) Экспорт
	
	Если ШтрихкодированиеИСМПСлужебный.ЭтоПолныйКодМаркировки(СтрокаТаблицы, ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки))
		И (Не ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции)
			Или ИнтеграцияИСКлиентСервер.ВидПродукцииПоддерживаетЗапросСтатусовЕАЭС(СтрокаТаблицы.ВидПродукции)) Тогда
		
		Возврат ИнтерфейсСУЗСлужебный.СтранаЭмиссииПоСерийномуНомеру(
			Лев(СтрокаТаблицы.СоставКодаМаркировки.СерийныйНомер, 1));
		
	КонецЕсли;
	
	ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Если СтрокаТаблицы.ДанныеРазбора = Неопределено
		И СтрокаТаблицы.ПримечаниеКРазборуШтрихкода <> Неопределено
		И СтрокаТаблицы.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиСоответствуетНесколькимШаблонам
		Тогда
		
		Для Каждого РезультатРазбора Из СтрокаТаблицы.ПримечаниеКРазборуШтрихкода.РезультатРазбора Цикл
			
			НайденыВидыПродукцииПоддерживающиеЗапросСтатусовЕАЭС = Ложь;
			Для Каждого ВидПродукции Из РезультатРазбора.ВидыПродукции Цикл
				Если ИнтеграцияИСКлиентСервер.ВидПродукцииПоддерживаетЗапросСтатусовЕАЭС(ВидПродукции) Тогда
					НайденыВидыПродукцииПоддерживающиеЗапросСтатусовЕАЭС = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденыВидыПродукцииПоддерживающиеЗапросСтатусовЕАЭС Тогда
				
				Если ШтрихкодированиеИСМПСлужебный.ЭтоПолныйКодМаркировки(РезультатРазбора, Истина) Тогда
					Возврат ИнтерфейсСУЗСлужебный.СтранаЭмиссииПоСерийномуНомеру(
						Лев(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер, 1));
				Иначе
					
					Для Каждого ВидПродукции Из РезультатРазбора.ВидыПродукции Цикл
						Если ИнтеграцияИСКлиентСервер.ВидПродукцииПоддерживаетЗапросСтатусовЕАЭС(ВидПродукции)
							И ШтрихкодированиеИСМПСлужебный.ЭтоПолныйКодМаркировки(РезультатРазбора, Ложь)
							И РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
								ВидПродукции,
								Перечисления.ВидыУпаковокИС.Потребительская,
								РезультатРазбора) Тогда
							Возврат ИнтерфейсСУЗСлужебный.СтранаЭмиссииПоСерийномуНомеру(
								Лев(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер, 1));
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Инициализирует структуру параметров запроса статусов.
// 
// Возвращаемое значение:
// 	Структура - параметры запроса статусов:
// 	 * Организация               - Неопределено, ОпределяемыйТип.Организация - Организация.
//	 * СтатусыКодовМаркировкиКеш - Неопределено, Соответствие                - Кеш статусов кодов маркировки.
// 	 * ПолеИсточник              - Неопределено, Строка - Поле источник данных.
// 	 * НастройкиРазбора          - См. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки.
// 	 * ЗапрашиватьСтатусыКодовЕАЭС - Булево - выполнять запрос статусов кодов из ЕАЭС, если статус кода в РФ неопределен.
Функция ИнициализироватьПараметрыЗапросаСтатусов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация",                 Неопределено);
	Результат.Вставить("СтатусыКодовМаркировкиКеш",   Неопределено);
	Результат.Вставить("ПолеИсточник",                Неопределено);
	Результат.Вставить("НастройкиРазбора",            Неопределено);
	Результат.Вставить("ЗапрашиватьСтатусыКодовЕАЭС", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыеПараметрыНабораПакетов()
	
	ПараметрыНабораПакетов = Новый Структура();
	ПараметрыНабораПакетов.Вставить("ПараметрыПоВидуПродукции", Новый Соответствие());
	ПараметрыНабораПакетов.Вставить("НаборыПакетов",            Новый Массив());
	
	Возврат ПараметрыНабораПакетов;
	
КонецФункции

Процедура УстановитьПризнакиНаличияВидовПродукции(ПараметрыНабора, НаличиеВидаПродукции, ПрисутствуетПродукцияИСМП, ПрисутствуетПродукцияМОТП)
	
	Если ПрисутствуетПродукцияИСМП И ПрисутствуетПродукцияМОТП Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукцииНабора  = Новый Массив;
	Для Каждого ПакетКодовМаркировки Из ПараметрыНабора.ПакетыКодовМаркировки Цикл
		Для Каждого СтрокаТаблицы Из ПакетКодовМаркировки Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции)
				И НаличиеВидаПродукции[СтрокаТаблицы.ВидПродукции] = Неопределено Тогда
				НаличиеВидаПродукции[СтрокаТаблицы.ВидПродукции] = Истина;
				ВидыПродукцииНабора.Добавить(СтрокаТаблицы.ВидПродукции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ВидыПродукцииНабора) Тогда
		ПрисутствуетПродукцияИСМП = Истина;
	КонецЕсли;
	Если ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ВидыПродукцииНабора) Тогда
		ПрисутствуетПродукцияМОТП = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавлятьУпаковкуВДерево(СтрокаКодаМаркировки, Детализация, ДанныеВерхнегоУровня)
	
	Добавлять = Истина;
	
	Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		Если Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами Тогда
			
			Если ДанныеВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ДанныеВерхнегоУровня.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			ИначеЕсли Не ПустаяСтрока(ДанныеВерхнегоУровня.GTIN) Тогда
				Добавлять = Ложь;
			КонецЕсли;
			
		ИначеЕсли Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
			
			Если ДанныеВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или ДанныеВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				Добавлять = Ложь;
			КонецЕсли;
			
		ИначеЕсли Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
			
			Если ДанныеВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или ДанныеВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				Добавлять = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
			// В детализации Пачки - пропускаются все упаковки
		Если (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки)
			// В детализации Блоки с пачками - пропускаются все упаковки кроме блоков
			Или (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
				И СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая)
			// В детализации Блоки с пачками - пропускаются все упаковки кроме блоков
			Или (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими
				И СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая)
			Или (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
				И Не ПустаяСтрока(ДанныеВерхнегоУровня.GTIN)) Тогда
			
			Добавлять = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Добавлять;
	
КонецФункции

Функция ЗаполненВидУпаковкиПоДаннымСтатуса(СтрокаКодаМаркировки, ПараметрыКодаМаркировки)
	
	Если ПараметрыКодаМаркировки = Неопределено
		Или Не ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидУпаковки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
		СтрокаКодаМаркировки.ВидПродукции, ПараметрыКодаМаркировки.ВидУпаковки, СтрокаКодаМаркировки.ДанныеРазбора) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаКодаМаркировки.ВидУпаковки               = ПараметрыКодаМаркировки.ВидУпаковки;
	СтрокаКодаМаркировки.ДанныеРазбора.ВидУпаковки = ПараметрыКодаМаркировки.ВидУпаковки;
	
	ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(
		СтрокаКодаМаркировки,
		СтрокаКодаМаркировки.ДанныеРазбора);
	
	Возврат Истина;
	
КонецФункции

Функция ТребуетсяЗапросВложенныхСтатусов(СтрокаКодаМаркировки, ВложеннаяСтрокаКодаМаркировки, ПараметрыДерева, ДанныеСтатуса)
	
	Если Не ЗначениеЗаполнено(ВложеннаяСтрокаКодаМаркировки.ВидПродукции) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВложеннаяСтрокаКодаМаркировки.ВидПродукции) Тогда
		Если ПараметрыДерева.УчитыватьМРЦ Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВложеннаяСтрокаКодаМаркировки.ВидУпаковки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеСтатуса <> Неопределено
		И (ДанныеСтатуса.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Разагрегирован
			Или ДанныеСтатуса.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Разагрегирован)
		И (СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьСтрокуВНаборПакетовЗапросов(СтрокаДанных, ПараметрыНабораПакетов, ПрисутствуетТабачнаяПродукция = Ложь, ЭтоКодВводаОстатков = Ложь, ПроблемныйКодМаркировки = Ложь)
	
	ПараметрыПакетов = ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Получить(СтрокаДанных.ВидПродукции);
	
	Если ПараметрыПакетов = Неопределено Тогда
		
		Для Каждого КлючИЗначение Из ПараметрыНабораПакетов.ПараметрыПоВидуПродукции Цикл
			
			Если (ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(КлючИЗначение.Ключ)
					И ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции))
				Или (ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(КлючИЗначение.Ключ)
					И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции)) Тогда
				
				ПараметрыПакетов = КлючИЗначение.Значение;
				ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Вставить(СтрокаДанных.ВидПродукции, ПараметрыПакетов);
				Прервать;
				
			ИначеЕсли КлючИЗначение.Ключ = "ПрисутствуетТабачнаяПродукция" И ПрисутствуетТабачнаяПродукция Тогда
				
				ПараметрыПакетов = КлючИЗначение.Значение;
				ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Вставить(КлючИЗначение.Ключ, ПараметрыПакетов);
				Прервать;
				
			ИначеЕсли КлючИЗначение.Ключ = "ЭтоКодВводаОстатков" И ЭтоКодВводаОстатков Тогда
				
				ПараметрыПакетов = КлючИЗначение.Значение;
				ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Вставить(КлючИЗначение.Ключ, ПараметрыПакетов);
				Прервать;
				
			ИначеЕсли КлючИЗначение.Ключ = "ПроблемныйКодМаркировки" И ПроблемныйКодМаркировки Тогда
				
				ПараметрыПакетов = КлючИЗначение.Значение;
				ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Вставить(КлючИЗначение.Ключ, ПараметрыПакетов);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыПакетов = Неопределено Тогда
		
		ПараметрыПакетов = Новый Структура();
		ПараметрыПакетов.Вставить("ВидПродукцииПодсистемы",        СтрокаДанных.ВидПродукции);
		ПараметрыПакетов.Вставить("ПрисутствуетТабачнаяПродукция", ПрисутствуетТабачнаяПродукция);
		ПараметрыПакетов.Вставить("ПрисутствуетПродукцияИСМП",     Ложь);
		ПараметрыПакетов.Вставить("ЭтоКодВводаОстатков",           ЭтоКодВводаОстатков);
		ПараметрыПакетов.Вставить("ПроблемныйКодМаркировки",       ПроблемныйКодМаркировки);
		ПараметрыПакетов.Вставить("ПакетКодовМаркировки",   Неопределено);
		ПараметрыПакетов.Вставить("ПакетыКодовМаркировки",  Новый Массив);
		
		КоличествоКодовВПакетеДляЗапросаСтатусов = ИнтеграцияИСМППовтИсп.КоличествоКодовВПакетеДляЗапросаСтатусов();
		
		ПараметрыПакетов.Вставить("КоличествоВПакете", КоличествоКодовВПакетеДляЗапросаСтатусов);
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
			ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Вставить(СтрокаДанных.ВидПродукции, ПараметрыПакетов);
		ИначеЕсли ПрисутствуетТабачнаяПродукция Тогда
			ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Вставить("ПрисутствуетТабачнаяПродукция", ПараметрыПакетов);
		ИначеЕсли ЭтоКодВводаОстатков Тогда
			ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Вставить("ЭтоКодВводаОстатков", ПараметрыПакетов);
		ИначеЕсли ПроблемныйКодМаркировки Тогда
			ПараметрыНабораПакетов.ПараметрыПоВидуПродукции.Вставить("ПроблемныйКодМаркировки", ПараметрыПакетов);
		КонецЕсли;
		
		ПараметрыНабораПакетов.НаборыПакетов.Добавить(ПараметрыПакетов);
		
	КонецЕсли;
	
	Если ПараметрыПакетов.ПакетКодовМаркировки = Неопределено
		Или ПараметрыПакетов.ПакетКодовМаркировки.Количество() >= ПараметрыПакетов.КоличествоВПакете Тогда
		
		ПараметрыПакетов.ПакетКодовМаркировки = Новый Массив;
		ПараметрыПакетов.ПакетыКодовМаркировки.Добавить(ПараметрыПакетов.ПакетКодовМаркировки);
		
	КонецЕсли;
	
	ПараметрыПакетов.ПакетКодовМаркировки.Добавить(СтрокаДанных);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДанныхДереваПоСтрокеКодаМаркировки(СтрокаДерева, СтрокаКодаМаркировки)
	
	СтрокаДерева.Штрихкод                = СтрокаКодаМаркировки.Штрихкод;
	СтрокаДерева.ТипШтрихкода            = СтрокаКодаМаркировки.ТипШтрихкода;
	СтрокаДерева.ВидУпаковки             = СтрокаКодаМаркировки.ВидУпаковки;
	СтрокаДерева.ВидПродукции            = СтрокаКодаМаркировки.ВидПродукции;
	СтрокаДерева.ХешСуммаНормализации    = СтрокаКодаМаркировки.ХешСуммаНормализации;
	СтрокаДерева.НормализованныйШтрихкод = СтрокаКодаМаркировки.НормализованныйШтрихкод;
	СтрокаДерева.СоставКодаМаркировки    = СтрокаКодаМаркировки.СоставКодаМаркировки;
	СтрокаДерева.GTIN                    = СтрокаКодаМаркировки.GTIN;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДереваПоДополнительнымКолонкам(СтрокаДерева, ДанныеСтатуса, ДополнительныеКолонки, ДополнительныеПоляВДанных);
	
	Если ДополнительныеКолонки = Неопределено
		Или ДополнительныеКолонки.Количество() = 0
		Или ДанныеСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = ДополнительныеПоляВДанных.Получить(СтрокаДерева.ВидПродукции);
	Если СписокПолей = Неопределено Тогда
		
		МассивПолей = Новый Массив();
		Для Каждого КлючИЗначение Из ДополнительныеКолонки Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтатуса, КлючИЗначение.Ключ)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, КлючИЗначение.Ключ) Тогда
				МассивПолей.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		СписокПолей = СтрСоединить(МассивПолей, ",");
		ДополнительныеПоляВДанных.Вставить(СтрокаДерева.ВидПродукции, СписокПолей);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеСтатуса, СписокПолей);
	
	Если СтрНайти(СписокПолей, "МРЦ") > 0
		И СтрокаДерева.ВидПродукции <> Перечисления.ВидыПродукцииИС.Табак Тогда
		СтрокаДерева.МРЦ = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДереваСпецификойПоСоставуКода(СтрокаДерева, СтрокаКодаМаркировки, ПараметрыЗаполнения, ЭтоФиктивнаяСтрока = Ложь);
	
	ПараметрыДерева     = ПараметрыЗаполнения.ПараметрыДерева;
	ВариантПолученияМРЦ = ПараметрыЗаполнения.ВариантПолученияМРЦ;
	Кеш                 = ПараметрыЗаполнения.Кеш;
	
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		
		СтрокаДерева.КоличествоГрупповыхУпаковок = 1;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		СтрокаДерева.КоличествоПотребительскихУпаковок = 1;
		
	КонецЕсли;
	
	// МРЦ
	Если СтрокаДерева.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
		И ПараметрыДерева.УчитыватьМРЦ
		И Не ЗначениеЗаполнено(СтрокаДерева.МРЦ)
		И (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская) Тогда
			
		Если СтрокаКодаМаркировки.СоставКодаМаркировки <> Неопределено Тогда
			СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("МРЦ", СтрокаДерева.МРЦ);
		КонецЕсли;
		
		Если Не ЭтоФиктивнаяСтрока
			И Не ЗначениеЗаполнено(СтрокаДерева.МРЦ) Тогда
			Если ВариантПолученияМРЦ = "ВычислениеИЗапрос" Тогда
				Кеш.ЗапросИУстановкаМРЦ.Добавить(СтрокаДерева);
			ИначеЕсли ВариантПолученияМРЦ = "ВычислениеОтРодителя" Тогда
				Кеш.ВычислениеМРЦ.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.GTIN)
		И СтрокаКодаМаркировки.СоставКодаМаркировки <> Неопределено Тогда
		СтрокаКодаМаркировки.СоставКодаМаркировки.Свойство("GTIN", СтрокаДерева.GTIN);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполнения)
	
	ДеревоУпаковок         = ПараметрыЗаполнения.ДеревоУпаковок;
	ДанныеВерхнегоУровня   = ПараметрыЗаполнения.ДанныеВерхнегоУровня;
	КодыМаркировкиУпаковок = ПараметрыЗаполнения.КодыМаркировкиУпаковок;
	Кеш                    = ПараметрыЗаполнения.Кеш;
	Детализация            = ПараметрыЗаполнения.Детализация;
	ДанныеОбАгрегации      = ПараметрыЗаполнения.ДанныеОбАгрегации;
	СтатусыКодовМаркировки = ПараметрыЗаполнения.СтатусыКодовМаркировки;
	ВидПродукции           = ПараметрыЗаполнения.ВидПродукции;
	ЭталонСтроки           = ПараметрыЗаполнения.ЭталонСтроки;
	ПараметрыДерева        = ПараметрыЗаполнения.ПараметрыДерева;
	
	ДополнительныеКолонкиОбщие = ПараметрыЗаполнения.ДополнительныеКолонки;
	ПоляВДанныхСтатусаОбщие    = ПараметрыЗаполнения.ПоляВДанныхСтатуса;
	
	ДополнительныеКолонкиДляВложенныхСтрокДерева = ПараметрыЗаполнения.ДополнительныеКолонкиДляВложенныхСтрокДерева;
	ПоляВДанныхСтатусаДляВложенныхСтрокДерева    = ПараметрыЗаполнения.ПоляВДанныхСтатусаДляВложенныхСтрокДерева;
	
	КоличествоПотребительскихУпаковок = 0;
	КоличествоГрупповыхУпаковок       = 0;
	
	ОбработатьМультитоварныйНаборКакТовар = Ложь;
	Если ТипЗнч(КодыМаркировкиУпаковок) <> Тип("Число")
		И ДанныеВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
		И Не ПараметрыЗаполнения.СозданиеНаборов Тогда
		GTIN = NULL;
		Для Каждого ЗначениеВложенногоКода Из КодыМаркировкиУпаковок Цикл
			СтрокаКодаМаркировки = ЗначениеВложенногоКода.Ключ;
			Если GTIN = NULL Тогда
				GTIN = СтрокаКодаМаркировки.GTIN;
			ИначеЕсли GTIN <> СтрокаКодаМаркировки.GTIN Тогда
				ОбработатьМультитоварныйНаборКакТовар = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ОбработатьМультитоварныйНаборКакТовар Тогда
			ОбработатьМультитоварныйНаборКакТовар = Не ИнтеграцияИСПовтИсп.GTINНабораИВложенийПринадлежатОднойНоменклатуре(ДанныеВерхнегоУровня.GTIN, GTIN);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбработатьМультитоварныйНаборКакТовар Тогда
		
		КоличествоПотребительскихУпаковок = 0;
		КоличествоГрупповыхУпаковок       = 0;
		
	ИначеЕсли ТипЗнч(КодыМаркировкиУпаковок) <> Тип("Число") Тогда
		
		Для Каждого ЗначениеВложенногоКода Из КодыМаркировкиУпаковок Цикл
			
			СтрокаКодаМаркировки = ЗначениеВложенногоКода.Ключ;
			ДанныеСтатуса        = СтатусыКодовМаркировки[СтрокаКодаМаркировки];
			КодМаркировки        = СтрокаКодаМаркировки.Штрихкод;
			
			Если ТипЗнч(ЗначениеВложенногоКода.Значение) = Тип("Структура") Тогда
				Если ДанныеСтатуса = Неопределено Тогда
					ДанныеСтатуса = ЗначениеВложенногоКода.Значение;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда // Не имеет вложенных кодов
				ВложенныеКодыМаркировки = Новый Соответствие;
			ИначеЕсли СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И ДанныеСтатуса.ВложенныеУпаковки.Количество() Тогда
				ВложенныеКодыМаркировки = ДанныеСтатуса.ВложенныеУпаковки;
			Иначе
				ВложенныеКодыМаркировки = ДанныеОбАгрегации[СтрокаКодаМаркировки];
			КонецЕсли;
			
			Если ДанныеСтатуса = Неопределено Тогда
				ИсходныеДанныеСтатуса = ДанныеВерхнегоУровня;
				ДополнительныеКолонки = ДополнительныеКолонкиДляВложенныхСтрокДерева;
				ПоляВДанныхСтатуса    = ПоляВДанныхСтатусаДляВложенныхСтрокДерева;
			Иначе
				ИсходныеДанныеСтатуса = ДанныеСтатуса;
				ДополнительныеКолонки = ДополнительныеКолонкиОбщие;
				ПоляВДанныхСтатуса    = ПоляВДанныхСтатусаОбщие;
			КонецЕсли;
			
			Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда // Логистическая упаковка или блок
				
				Если ДобавлятьУпаковкуВДерево(СтрокаКодаМаркировки, Детализация, ДанныеВерхнегоУровня) Тогда
					
					Если ПараметрыДерева.ПроверятьДублиКодовМаркировки <> "НеПроверять" Тогда
						ИнтерфейсИСМПСлужебный.ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, Кеш.КодыМаркировки);
					КонецЕсли;
					
					СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
					
					ЗаполнитьСтрокуДанныхДереваПоСтрокеКодаМаркировки(
						СтрокаДерева,
						СтрокаКодаМаркировки);
					
					ЗаполнитьСтрокуДереваПоДополнительнымКолонкам(
						СтрокаДерева,
						ИсходныеДанныеСтатуса,
						ДополнительныеКолонки,
						ПоляВДанныхСтатуса);
					
					ЗаполнитьСтрокуДереваСпецификойПоСоставуКода(
						СтрокаДерева,
						СтрокаКодаМаркировки,
						ПараметрыЗаполнения);
					
					ПараметрыЗаполненияВложенные = ПараметрыЗаполненияДереваУпаковок(ПараметрыЗаполнения);
					ПараметрыЗаполненияВложенные.ДеревоУпаковок         = СтрокаДерева;
					ПараметрыЗаполненияВложенные.ДанныеВерхнегоУровня   = СтрокаДерева;
					ПараметрыЗаполненияВложенные.КодыМаркировкиУпаковок = ВложенныеКодыМаркировки;
					
					Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
						И ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДерева.ВидПродукции) Тогда
						
						ПараметрыЗаполненияВложенные.ВариантПолученияМРЦ = "ВычислениеОтРодителя";
						
					КонецЕсли;
					
					ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполненияВложенные);
					
					Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаКодаМаркировки.ВидПродукции) Тогда
						КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок  + СтрокаДерева.КоличествоПотребительскихУпаковок;
						КоличествоГрупповыхУпаковок       = КоличествоГрупповыхУпаковок        + СтрокаДерева.КоличествоГрупповыхУпаковок;
					Иначе
						КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок  + СтрокаДерева.КоличествоПотребительскихУпаковок;
					КонецЕсли;
					
					Кеш.КодыМаркировки.Вставить(СтрокаКодаМаркировки.Штрихкод, СтрокаДерева);
					ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN, ПараметрыДерева);
					
				Иначе
					
					ДанныеСтрокиВместоДанныеВерхнегоУровня = ОбщегоНазначения.СкопироватьРекурсивно(ЭталонСтроки);
					
					ЗаполнитьСтрокуДанныхДереваПоСтрокеКодаМаркировки(
						ДанныеСтрокиВместоДанныеВерхнегоУровня,
						СтрокаКодаМаркировки);
					
					ЗаполнитьСтрокуДереваПоДополнительнымКолонкам(
						ДанныеСтрокиВместоДанныеВерхнегоУровня,
						ИсходныеДанныеСтатуса,
						ДополнительныеКолонки,
						ПоляВДанныхСтатуса);
					
					ЗаполнитьСтрокуДереваСпецификойПоСоставуКода(
						ДанныеСтрокиВместоДанныеВерхнегоУровня,
						СтрокаКодаМаркировки,
						ПараметрыЗаполнения,
						Истина);
					
					ПараметрыЗаполненияВложенные = ПараметрыЗаполненияДереваУпаковок(ПараметрыЗаполнения);
					ПараметрыЗаполненияВложенные.ДеревоУпаковок         = ДеревоУпаковок;
					ПараметрыЗаполненияВложенные.ДанныеВерхнегоУровня   = ДанныеСтрокиВместоДанныеВерхнегоУровня;
					ПараметрыЗаполненияВложенные.КодыМаркировкиУпаковок = ВложенныеКодыМаркировки;
					
					Если СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
						И ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеСтрокиВместоДанныеВерхнегоУровня.ВидПродукции) Тогда
						
						ПараметрыЗаполненияВложенные.ВариантПолученияМРЦ = "ВычислениеОтРодителя";
						
					КонецЕсли;
					
					ЗаполнитьДеревоУпаковокРекурсивно(ПараметрыЗаполненияВложенные);
					
					Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаКодаМаркировки.ВидПродукции) Тогда
						КоличествоПотребительскихУпаковок  = КоличествоПотребительскихУпаковок  + ДанныеСтрокиВместоДанныеВерхнегоУровня.КоличествоПотребительскихУпаковок;
						КоличествоГрупповыхУпаковок        = КоличествоГрупповыхУпаковок        + ДанныеСтрокиВместоДанныеВерхнегоУровня.КоличествоГрупповыхУпаковок;
					Иначе
						КоличествоПотребительскихУпаковок  = КоличествоПотребительскихУпаковок  + ДанныеСтрокиВместоДанныеВерхнегоУровня.КоличествоПотребительскихУпаковок;
					КонецЕсли;
					
					ОбновитьКешGTIN(ДанныеСтрокиВместоДанныеВерхнегоУровня, Кеш.GTIN, ПараметрыДерева);
					
				КонецЕсли;
				
			Иначе
				
				Если ПараметрыДерева.ПроверятьДублиКодовМаркировки <> "НеПроверять" Тогда
					ИнтерфейсИСМПСлужебный.ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, Кеш.КодыМаркировки);
				КонецЕсли;
				
				Если ДобавлятьУпаковкуВДерево(СтрокаКодаМаркировки, Детализация, ДанныеВерхнегоУровня) Тогда
					
					Если ДанныеСтатуса = Неопределено Тогда
						ИсходныеДанныеСтатуса = ДанныеВерхнегоУровня;
						ДополнительныеКолонки = ДополнительныеКолонкиДляВложенныхСтрокДерева;
						ПоляВДанныхСтатуса    = ПоляВДанныхСтатусаДляВложенныхСтрокДерева;
					Иначе
						ИсходныеДанныеСтатуса = ДанныеСтатуса;
						ДополнительныеКолонки = ДополнительныеКолонкиОбщие;
						ПоляВДанныхСтатуса    = ПоляВДанныхСтатусаОбщие;
					КонецЕсли;
					
					СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
					
					ЗаполнитьСтрокуДанныхДереваПоСтрокеКодаМаркировки(
						СтрокаДерева,
						СтрокаКодаМаркировки);
					
					ЗаполнитьСтрокуДереваПоДополнительнымКолонкам(
						СтрокаДерева,
						ИсходныеДанныеСтатуса,
						ДополнительныеКолонки,
						ПоляВДанныхСтатуса);
					
					ЗаполнитьСтрокуДереваСпецификойПоСоставуКода(
						СтрокаДерева,
						СтрокаКодаМаркировки,
						ПараметрыЗаполнения);
					
					Кеш.КодыМаркировки.Вставить(КодМаркировки, СтрокаДерева);
					ОбновитьКешGTIN(СтрокаДерева, Кеш.GTIN, ПараметрыДерева);
					
				Иначе
					
					ОбновитьКешGTIN(СтрокаКодаМаркировки, Кеш.GTIN, ПараметрыДерева, Истина);
					
				КонецЕсли;
				
				КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		КоличествоПотребительскихУпаковок = КодыМаркировкиУпаковок;
		КоличествоГрупповыхУпаковок       = 0;
		
	КонецЕсли;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		ДанныеВерхнегоУровня.КоличествоПотребительскихУпаковок  = ДанныеВерхнегоУровня.КоличествоПотребительскихУпаковок  + КоличествоПотребительскихУпаковок;
		ДанныеВерхнегоУровня.КоличествоГрупповыхУпаковок = ДанныеВерхнегоУровня.КоличествоГрупповыхУпаковок + КоличествоГрупповыхУпаковок;
	Иначе
		ДанныеВерхнегоУровня.КоличествоПотребительскихУпаковок = ДанныеВерхнегоУровня.КоличествоПотребительскихУпаковок + КоличествоПотребительскихУпаковок;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКешGTIN(СтрокаДерева, КешGTIN, ПараметрыДерева, ЭтоСтрокаКодаМаркировки = Ложь)
	
	Если ПустаяСтрока(СтрокаДерева.GTIN) Тогда
		Возврат;
	КонецЕсли;
	
	МРЦ = Неопределено;
	Если ПараметрыДерева.УчитыватьМРЦ
		И ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДерева.ВидПродукции) Тогда
		Если ЭтоСтрокаКодаМаркировки Тогда
			СоставКодаМаркировки = СтрокаДерева.СоставКодаМаркировки;
			Если СоставКодаМаркировки <> Неопределено
				И СоставКодаМаркировки.Свойство("МРЦ")
				И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
				МРЦ = СоставКодаМаркировки.МРЦ;
			КонецЕсли;
		Иначе
			МРЦ = СтрокаДерева.МРЦ;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("GTIN", СтрокаДерева.GTIN);
	Если МРЦ <> Неопределено Тогда
		ПараметрыОтбора.Вставить("МРЦ", МРЦ);
	КонецЕсли;
	
	НайденныеСтроки = КешGTIN.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаКешаGTIN = КешGTIN.Добавить();
		НоваяСтрокаКешаGTIN.GTIN = СтрокаДерева.GTIN;
		Если МРЦ <> Неопределено Тогда
			НоваяСтрокаКешаGTIN.МРЦ = МРЦ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
