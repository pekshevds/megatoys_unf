////////////////////////////////////////////////////////////////////////////////
// Менеджер обмена через универсальный формат (РУНФ3.0.5 от 07.09.2023 11:32:34)
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных..
//
// Параметры:
//  КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	КомпонентыОбмена.ПараметрыКонвертации.НастройкиИнтеграции = Неопределено;
	ПриОпределенииДополнительныхНастроекИнтеграции(КомпонентыОбмена, КомпонентыОбмена.ПараметрыКонвертации.НастройкиИнтеграции);
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		
		КомпонентыОбмена.ПараметрыКонвертации.НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		КомпонентыОбмена.ПараметрыКонвертации.ПроизводственныеСклады = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях = ПолучитьФункциональнуюОпцию("РазрешитьСкладыВТабличныхЧастях");	
		КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		КомпонентыОбмена.ПараметрыКонвертации.ПереноситьЗаказыКакСчетаНаОплату = Истина;
		КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры = Истина;
		КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы = Ложь;
		КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Ложь;
		КомпонентыОбмена.ПараметрыКонвертации.МассивОрганизаций = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "";
		КомпонентыОбмена.ПараметрыКонвертации.МассивВидовЦен = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьДополнительныеРеквизиты = Ложь;
		КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьКартинкиНоменклатуры = Истина;
		КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьОстаткиНоменклатуры = Ложь;
		КомпонентыОбмена.ПараметрыКонвертации.РежимВыгрузкиКартинокНоменклатуры = Перечисления.РежимВыгрузкиКартинокНоменклатуры.ТолькоОсновнаяКартинка;
		КомпонентыОбмена.ПараметрыКонвертации.СжиматьВыгружаемыеИзображения = Ложь;
		КомпонентыОбмена.ПараметрыКонвертации.МассивСкладов = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.МассивОрганизацийСкладскихОстатков = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.ПодарочныйСертификатПоУмолчанию = ПодарочныйСертификатПоУмолчанию();
		КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьЗаказыПокупателей = Истина;
		КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСчетаНаОплату = Истина;
		КомпонентыОбмена.ПараметрыКонвертации.НеВыгружатьПеремещенияЗапасов = Ложь;	 
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			
			Если КомпонентыОбмена.УзелКорреспондента.Метаданные().Реквизиты.Найти("УРМК") <> Неопределено Тогда
				
				ВидыЦен = Новый ТаблицаЗначений;
				ВидыЦен.Колонки.Добавить("ВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
				
				РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					КомпонентыОбмена.УзелКорреспондента, "ВариантНастройки, ИспользоватьОтборПоОрганизациям, Организации, ВидЦен, ВыгружатьОстаткиНоменклатуры, ТорговыйОбъект");
					
				РеквизитыУзлаОбмена.Вставить("ОбобщенныйСклад");	
				РеквизитыУзлаОбмена.Вставить("ПереноситьЗаказыКакСчетаНаОплату", 		Ложь);
				РеквизитыУзлаОбмена.Вставить("ПереноситьКатегорииКакВидыНоменклатуры", 	Истина);
				РеквизитыУзлаОбмена.Вставить("АвтоматическиЗачитыватьАвансы", 			Ложь);
				РеквизитыУзлаОбмена.Вставить("ВыгружатьДополнительныеРеквизиты", 		Ложь);
				РеквизитыУзлаОбмена.Вставить("ВыгружатьКартинкиНоменклатуры", 			Ложь);
				РеквизитыУзлаОбмена.Вставить("РежимВыгрузкиКартинокНоменклатуры");
				РеквизитыУзлаОбмена.Вставить("СжиматьВыгружаемыеИзображения",			Ложь);
				РеквизитыУзлаОбмена.Вставить("ИспользоватьОтборПоВидамЦен", 			Истина);
				РеквизитыУзлаОбмена.Вставить("НеВыгружатьПеремещенияЗапасов",			Ложь);
				РеквизитыУзлаОбмена.Вставить("ВыгружатьНаОбобщенныйСклад",				Ложь);
				
			ИначеЕсли КомпонентыОбмена.УзелКорреспондента.Метаданные().Реквизиты.Найти("ВыгружатьКартинкиНоменклатуры") <> Неопределено Тогда
				РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					КомпонентыОбмена.УзелКорреспондента, "ВариантНастройки, ОбобщенныйСклад, ПереноситьЗаказыКакСчетаНаОплату, ПереноситьКатегорииКакВидыНоменклатуры, АвтоматическиЗачитыватьАвансы, ИспользоватьОтборПоОрганизациям, Организации, ИспользоватьОтборПоВидамЦен, ВидыЦен, ВыгружатьДополнительныеРеквизиты, ВыгружатьКартинкиНоменклатуры, РежимВыгрузкиКартинокНоменклатуры, СжиматьВыгружаемыеИзображения, ВыгружатьОстаткиНоменклатуры, Склады, ОрганизацииСкладскихОстатков, НеВыгружатьПеремещенияЗапасов, ВыгружатьНаОбобщенныйСклад");
			Иначе
				РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					КомпонентыОбмена.УзелКорреспондента, "ВариантНастройки, ОбобщенныйСклад, ПереноситьЗаказыКакСчетаНаОплату, ПереноситьКатегорииКакВидыНоменклатуры, АвтоматическиЗачитыватьАвансы, ИспользоватьОтборПоОрганизациям, Организации, ИспользоватьОтборПоВидамЦен, ВидыЦен, НеВыгружатьПеремещенияЗапасов, ВыгружатьНаОбобщенныйСклад");
				
				РеквизитыУзлаОбмена.Вставить("ВыгружатьДополнительныеРеквизиты", Ложь);
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				СтруктураДанныхВебВитрина = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(КомпонентыОбмена.УзелКорреспондента, "Маг1СИнтеграцияСВебВитриной_НастройкиУзла");
				ЭтоИнтеграцияДанныхВебВитрина = ТипЗнч(СтруктураДанныхВебВитрина) = Тип("Структура");
			Исключение
				СтруктураДанныхВебВитрина = Неопределено;
				ЭтоИнтеграцияДанныхВебВитрина = Ложь;
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ЭтоИнтеграцияДанныхВебВитрина Тогда
				РеквизитыУзлаОбмена.Вставить("ВыгружатьКартинкиНоменклатуры", СтруктураДанныхВебВитрина.ВыгружатьКартинкиНоменклатуры);
				РеквизитыУзлаОбмена.Вставить("ВыгружатьОстаткиНоменклатуры", СтруктураДанныхВебВитрина.ВыгружатьОстаткиНоменклатуры);
				РеквизитыУзлаОбмена.Вставить("Склады", СтруктураДанныхВебВитрина.СкладыИнформОстатков);
			КонецЕсли;
			
			
			КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = РеквизитыУзлаОбмена.ВариантНастройки;
				
			КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад = РеквизитыУзлаОбмена.ОбобщенныйСклад;
			КомпонентыОбмена.ПараметрыКонвертации.НеВыгружатьПеремещенияЗапасов = РеквизитыУзлаОбмена.НеВыгружатьПеремещенияЗапасов;
			
			Если РеквизитыУзлаОбмена.ВыгружатьНаОбобщенныйСклад Тогда
				КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях = Истина;
			КонецЕсли;
			
			Если РеквизитыУзлаОбмена.ВариантНастройки = "ОбменБП30"
				ИЛИ РеквизитыУзлаОбмена.ВариантНастройки = "ОбменУНФ"
				ИЛИ РеквизитыУзлаОбмена.ВариантНастройки = "ОбменУНФ_БП3" Тогда
				КомпонентыОбмена.ПараметрыКонвертации.ПереноситьЗаказыКакСчетаНаОплату = РеквизитыУзлаОбмена.ПереноситьЗаказыКакСчетаНаОплату;
				КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры = РеквизитыУзлаОбмена.ПереноситьКатегорииКакВидыНоменклатуры;
				КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьЗаказыПокупателей = ВыгружатьВидДокумента(КомпонентыОбмена.УзелКорреспондента, "ЗаказПокупателя");
				КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСчетаНаОплату = ВыгружатьВидДокумента(КомпонентыОбмена.УзелКорреспондента, "СчетНаОплату");
			ИначеЕсли (КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
				ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса") Тогда
				КомпонентыОбмена.ПараметрыКонвертации.МассивТоваровОсобогоРежима = МассивТоваровОсобогоРежима();
			ИначеЕсли РеквизитыУзлаОбмена.ВариантНастройки = "ОбменУРМК" Тогда
				ЗарегистрироватьПродукциюИСМП(КомпонентыОбмена);
			КонецЕсли;
			КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы = РеквизитыУзлаОбмена.АвтоматическиЗачитыватьАвансы;
			
			КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = РеквизитыУзлаОбмена.ИспользоватьОтборПоОрганизациям;
			Если РеквизитыУзлаОбмена.ИспользоватьОтборПоОрганизациям Тогда
				КомпонентыОбмена.ПараметрыКонвертации.МассивОрганизаций = РеквизитыУзлаОбмена.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
			КонецЕсли;
			
			КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьДополнительныеРеквизиты = РеквизитыУзлаОбмена.ВыгружатьДополнительныеРеквизиты;
			
			КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоВидамЦен = РеквизитыУзлаОбмена.ИспользоватьОтборПоВидамЦен;
			Если РеквизитыУзлаОбмена.ИспользоватьОтборПоВидамЦен Тогда
				Если РеквизитыУзлаОбмена.ВариантНастройки = "ОбменУРМК" Тогда
					МассивВидовЦен = Новый Массив;
					МассивВидовЦен.Добавить(РеквизитыУзлаОбмена.ВидЦен);
				Иначе
					МассивВидовЦен = РеквизитыУзлаОбмена.ВидыЦен.Выгрузить().ВыгрузитьКолонку("ВидЦен");
				КонецЕсли;
				КомпонентыОбмена.ПараметрыКонвертации.МассивВидовЦен = МассивВидовЦен;
			КонецЕсли;
			
			КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьОстаткиНоменклатуры = РеквизитыУзлаОбмена.ВыгружатьОстаткиНоменклатуры;
			Если РеквизитыУзлаОбмена.ВыгружатьОстаткиНоменклатуры Тогда
				Если РеквизитыУзлаОбмена.ВариантНастройки = "ОбменУРМК" Тогда
					МассивСкладов = Новый Массив;
					МассивСкладов.Добавить(РеквизитыУзлаОбмена.ТорговыйОбъект);
					МассивОрганизацийСкладскихОстатков = РеквизитыУзлаОбмена.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
				Иначе
					МассивСкладов = РеквизитыУзлаОбмена.Склады.Выгрузить().ВыгрузитьКолонку("Склад");
					МассивОрганизацийСкладскихОстатков = РеквизитыУзлаОбмена.ОрганизацииСкладскихОстатков.Выгрузить().ВыгрузитьКолонку("Организация");
				КонецЕсли;
				КомпонентыОбмена.ПараметрыКонвертации.МассивОрганизацийСкладскихОстатков = МассивОрганизацийСкладскихОстатков;
				КомпонентыОбмена.ПараметрыКонвертации.МассивСкладов = МассивСкладов;
			КонецЕсли;
			
			КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьКартинкиНоменклатуры = РеквизитыУзлаОбмена.ВыгружатьКартинкиНоменклатуры;
			КомпонентыОбмена.ПараметрыКонвертации.РежимВыгрузкиКартинокНоменклатуры = РеквизитыУзлаОбмена.РежимВыгрузкиКартинокНоменклатуры;
			КомпонентыОбмена.ПараметрыКонвертации.СжиматьВыгружаемыеИзображения = РеквизитыУзлаОбмена.СжиматьВыгружаемыеИзображения;
			
		КонецЕсли;
		
	Иначе
			
		КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "";
		КомпонентыОбмена.ПараметрыКонвертации.ОбъектыДляПовторнойРегистрацииПослеПолучения = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.НовыеЗаказыПокупателей = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.ПодарочныйСертификатПоУмолчанию = ПодарочныйСертификатПоУмолчанию();
		КомпонентыОбмена.ПараметрыКонвертации.ПолитикаУчетаСерийПоУмолчанию = ПолитикаУчетаСерийПоУмолчанию();
			
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				КомпонентыОбмена.УзелКорреспондента, "ВариантНастройки");
			
			КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = РеквизитыУзлаОбмена.ВариантНастройки;
			
			Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменБП30" 
				ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ"
				ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ_БП3"
				ИЛИ НЕ ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки) Тогда
				
				ПОДКУдалению = Новый Массив;
				ПОДКУдалению.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
				ПОДКУдалению.Добавить("Документ_ЗаказПокупателя_Получение");
				ПОДКУдалению.Добавить("Документ_ПриходнаяНакладная_Получение");
				ПОДКУдалению.Добавить("Документ_РасходнаяНакладная_Получение");
				ПОДКУдалению.Добавить("Документ_СчетФактураВыданный_Получение");
				ПОДКУдалению.Добавить("Документ_СчетФактураПолученный_Получение");
				
				ПОДКУдалению.Добавить("Документ_ВнесениеНаличных_Получение");
				ПОДКУдалению.Добавить("Документ_ВыемкаНаличных_Получение");
				ПОДКУдалению.Добавить("Документ_ВозвратТовараПоставщику_Получение");
				ПОДКУдалению.Добавить("Документ_ВозвратТоваровОтПокупателя_Получение");
				ПОДКУдалению.Добавить("Документ_ЗаказНаПеремещение_Получение");
				ПОДКУдалению.Добавить("Документ_ЗаказПоставщику_Получение");
				ПОДКУдалению.Добавить("Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение");
				ПОДКУдалению.Добавить("Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение");
				ПОДКУдалению.Добавить("Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение");
				ПОДКУдалению.Добавить("Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение");
				
				ПОДКУдалению.Добавить("Документ_КомплектацияЗапасов_Получение");
				ПОДКУдалению.Добавить("Документ_КорректировкаПоступления_Получение");
				ПОДКУдалению.Добавить("Документ_КорректировкаРеализации_Получение");
				ПОДКУдалению.Добавить("Документ_ОприходованиеЗапасов_Получение");
				ПОДКУдалению.Добавить("Документ_ОстаткиБезналичныхДС_Получение");
				ПОДКУдалению.Добавить("Документ_ОстаткиНаличныхДенежныхСредств_Получение");
				ПОДКУдалению.Добавить("Документ_ОстаткиСобственныхТМЦ_Получение");
				ПОДКУдалению.Добавить("Документ_ОтчетКомитенту_Получение");
				ПОДКУдалению.Добавить("Документ_ПеремещениеЗапасов_Получение");
				ПОДКУдалению.Добавить("Документ_ПересчетТоваров_Получение");
				ПОДКУдалению.Добавить("Документ_СписаниеЗапасов_Получение");
				ПОДКУдалению.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
				ПОДКУдалению.Добавить("Документ_ЧекККМ_Получение");
				ПОДКУдалению.Добавить("Документ_ЧекККМВозврат_Получение");
				
				ПОДКУдалению.Добавить("Документ_ВнесениеДСВКассуККМ_Получение");
				ПОДКУдалению.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
				ПОДКУдалению.Добавить("Документ_ВыемкаДСИзКассыККМ_Получение");
				ПОДКУдалению.Добавить("Документ_КорректировкаПоступленияТоваров_Получение");
				ПОДКУдалению.Добавить("Документ_ОстаткиБезналичныхДенежныхСредств_Получение");
				ПОДКУдалению.Добавить("Документ_ОстаткиРасчетовСПокупателямиАвансы_Получение");
				ПОДКУдалению.Добавить("Документ_ОстаткиРасчетовСПокупателямиДолги_Получение");
				ПОДКУдалению.Добавить("Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получение");
				ПОДКУдалению.Добавить("Документ_ОстаткиРасчетовСПоставщикамиДолги_Получение");
				ПОДКУдалению.Добавить("Документ_ОстаткиТоваровПринятыхНаКомиссию_Получение");
				ПОДКУдалению.Добавить("Документ_ПеремещениеТоваров_Получение");
				ПОДКУдалению.Добавить("Документ_РасходДСПланНаРасчетыСКонтрагентами_Получение");
				ПОДКУдалению.Добавить("Документ_РасходДСПланПрочее_Получение");
				ПОДКУдалению.Добавить("Документ_СборкаТоваров_Получение");
				ПОДКУдалению.Добавить("Документ_КассоваяСменаОткрытие_Получение");
				ПОДКУдалению.Добавить("Документ_КассоваяСменаЗакрытие_Получение");
				ПОДКУдалению.Добавить("Документ_ОперацияПоПлатежнымКартам_Получение");
				ПОДКУдалению.Добавить("Документ_ОперацияПоПлатежнойКарте_Получение");
				
				Для каждого УдаляемоеПОД Из ПОДКУдалению Цикл
					НайденнаяСтрока = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(УдаляемоеПОД, "Имя");
					Если НайденнаяСтрока <> Неопределено Тогда
						КомпонентыОбмена.ПравилаОбработкиДанных.Удалить(НайденнаяСтрока);
					КонецЕсли;
				КонецЦикла; 
				
			КонецЕсли;
			
			Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменБП30"
				ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ"
				ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменРТ"
				ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ_БП3"
				ИЛИ НЕ ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки) Тогда 
				
				НайденнаяСтрока = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ЧекККМ_Получение", "Имя");
				Если НайденнаяСтрока <> Неопределено Тогда
					КомпонентыОбмена.ПравилаОбработкиДанных.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтключениеПКОНеДоступныхВРознице(КомпонентыОбмена);
	
	КонецЕсли;
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
			Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
				
				МассивСкладов = КомпонентыОбмена.ПараметрыКонвертации.ПроизводственныеСклады;
				Если ТипЗнч(МассивСкладов) = Тип("Массив") Тогда
					Для каждого Склад Из МассивСкладов Цикл
						СкладОбъект = Склад.ПолучитьОбъект();
						СкладОбъект.ДополнительныеСвойства.Вставить("ПроизводственныйСклад", Истина);
						ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СкладОбъект);
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли;
			
		Иначе
			УзелОбмена = КомпонентыОбмена.УзелКорреспондента;
			Если УзелОбмена <> Неопределено Тогда
				ОбъектыДляПовторнойРегистрации = КомпонентыОбмена.ПараметрыКонвертации.ОбъектыДляПовторнойРегистрацииПослеПолучения;
				Для каждого Ссылка Из ОбъектыДляПовторнойРегистрации Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Ссылка);
				КонецЦикла;
			КонецЕсли;
			
			Для каждого ЗаказСсылка Из КомпонентыОбмена.ПараметрыКонвертации.НовыеЗаказыПокупателей Цикл
				ОписаниеВходящего = КонтактЦентр.ОписаниеВходящего();
				ОписаниеВходящего.Ответственный = ЗаказСсылка.Ответственный;
				КонтактЦентр.ДобавитьВоВходящее(ЗаказСсылка, ОписаниеВходящего);
			КонецЦикла;
			
			АссистентУправленияРаботаСЗаказами.ПослеКонвертации(КомпонентыОбмена);
		КонецЕсли;
		
		ПроверитьИспНесколькихОрганизаций();
		ПроверитьИспНесколькихВалют();
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
//
// Возвращаемое значение:
//  Строка - номер версии.
//
Функция ВерсияФорматаМенеджераОбмена() Экспорт
	Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена      - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - см. ОбменДаннымиXDTOСервер.ТаблицаПравилОбработкиДанных
// 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АктВыполненныхРабот_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Взаимозачет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ДополнительныеРасходы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказНаПеремещение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказНаряд_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияЗапасов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КомплектацияЗапасов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_МаркировкаТоваровГИСМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачисленияПоКредитамИЗаймам_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионераОСписании_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОПереработке_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажахПатент_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетПереработчика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересортицаЗапасов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходнаяНакладная_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Производство_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПрочиеРасходы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РаспределениеЗатрат_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходнаяНакладная_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходыПриИмпорте_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМВозврат_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПланВидовХарактеристик_ДополнительныеРеквизитыИСведения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_ФактОплатыЗаказов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БонусныеПрограммы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДисконтныеКарты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЗначенияСвойствОбъектов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ИнформативныеОстатки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторТНВЭД_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторТНВЭД_ЭлементСправочника(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлко_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НаправленияДеятельностиНГ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Патенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПозицияПрайсЛиста_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрайсЛист_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПунктыВыдачиЗаказов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостояниеЗаказа_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СостоянияЭД_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФайлыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФайлыХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказНаПеремещение_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПокупателя_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступленияТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_НачислениеСписаниеБонусныхБаллов_Прием(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеЗапасов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетовСПокупателямиДолги_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСВзносНаличными_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПокупкаВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходнаяНакладная_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходДСПланНаРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходДСПланПрочее_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходнаяНакладная_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗарплатыСотруднику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДССнятиеНаличных_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеЗапасов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_АлкогольнаяПродукцияЕГАИС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ГруппаНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДисконтныеКарты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Кассы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КатегорииНоменклатурыВН_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КодТНВЭД_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлко_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НаправленияДеятельностиНГ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурныеГруппы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ОрганизацииЕГАИС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Патенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПодарочныеСертификаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрограммыЛояльности_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПунктыВыдачиЗаказов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкидкиНаценки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДСГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Упаковки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_УсловияПредоставленияСкидок_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Файлы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЦеновыеГруппы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
	МенеджерОбменаУРМКПереопределяемый.ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных);
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена  - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила.
// 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АктВыполненныхРабот_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Взаимозачет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ДополнительныеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНаПеремещение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Комплектация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КомплектацияЗапасов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_МаркировкаТоваровГИСМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионераОСписанииВозвр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионераОСписанииСпис_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОПереработке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОПереработкеДавальцу_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОПереработкеМатериалы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажахПатент_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетПереработчика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСВзносНаличными_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДССлужбаДоставки_Корректировка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПДС_НаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПДС_ПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаПереработчику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаТоваровПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаТоваровРеализация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаТоваровСФПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаСписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриходнаяНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_Производство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПроизводствоПеремещениеОтходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПроизводствоПеремещениеПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РаспределениеЗатрат_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходнаяНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходыПриИмпорте_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗарплСотруднику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДССнятиеНаличных_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_ИзЭксплуатации(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_54ФЗ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМВозврат_54ФЗ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМВозврат_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПодразделениеВПроизводственныйСклад_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_SKUКонтрагента_ИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БонусныеПрограммы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюта_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДисконтныеКарты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДополнительныеРеквизиты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЗначенияДопРеквизитов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ИнформативныеОстатки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КодыТоваровSKU_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЛицензииПоставщиковАлко_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НаправленияДеятельностиНГ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурныеГруппы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТД_ИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Патенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПозицияПрайсЛиста_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПрайсЛист_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостояниеЗаказа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостояниеОплатыЗаказа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостоянияЗаказовПокупателей_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СостоянияЭД_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ТипыЦен_ИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФайлыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФайлыХарактеристикиНоменклатур_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛицаИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ВнесениеНаличных_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТовараПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыемкаНаличных_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказНаПеремещение_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КомплектацияЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_НачислениеСписаниеБонусныхБаллов_Прием(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиБезналичныхДС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСВзносНаличными_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручение_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриходнаяНакладная_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РасходнаяНакладная_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДССнятиеНаличных_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМВозврат_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_АвтоматическиеСкидки_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БонусныеПрограммы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыДисконтныхКарт_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДисконтныеКарты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентовСтруктура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Кассы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторАлкогольнойПродукцииЕГАИС(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторОрганизацийЕГАИС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЛицензииПоставщиковАлко_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НаправленияДеятельностиНГ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурныеГруппы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТД_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТДИзСтроки_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Патенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПодарочныеСертификаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_УсловияПредоставленияСкидок_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КлассификаторТНВЭД_ЭлементСправочника(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатурныеГруппы_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ПунктыВыдачиЗаказов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЦеновыеГруппы(ПравилаКонвертации);
	МенеджерОбменаУРМКПереопределяемый.ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации);
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Cтрока - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.SkypeКонтактногоЛица, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента, "ПользовательскаяКИАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица, "ПользовательскаяКИАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СайтПользователя, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СоциальнаяСетьКонтактногоЛица, "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыЭД_Реализация_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыЭД_Реализация_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыДокументовЭДО;
		ПравилоКонвертации.ТипXDTO   = "ВидыЭД";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная, "ТОРГ12");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийВзаимозачет.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийВзаимозачет";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийВзаимозачет;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийКорректировкаДолга";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.Взаимозачет, "ПроведениеВзаимозачета");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя, "ПроведениеВзаимозачета");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПоставщику, "ПроведениеВзаимозачета");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя, "СписаниеЗадолженности");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику, "СписаниеЗадолженности");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПрочегоКонтрагента, "ПроведениеВзаимозачета");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя, "ПереносЗадолженности");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику, "ПереносЗадолженности");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВзаимозачет.ПрочийВзаимозачет, "ПроведениеВзаимозачета");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийЭквайринга.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийЭквайринга";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийЭквайринга;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоПлатежнойКарте";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю, "ВозвратОплатыКлиентуНаПлатежнуюКарту");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя, "ОплатаОтКлиентаПлатежнойКартой");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыПродукцииИС18.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыПродукцииИС18";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыПродукцииИС;
		ПравилоКонвертации.ТипXDTO   = "ВидыПродукцииИС";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Алкогольная, "Алкогольная");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Велосипеды, "Велосипеды");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Духи, "Духи");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.КреслаКоляски, "КреслаКоляски");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность, "ЛегкаяПромышленность");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС, "МолочнаяПродукция");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС, "МолочнаяПродукция");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Обувь, "Обувь");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Табак, "Табак");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Фотоаппараты, "Фотоаппараты");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Шины, "Шины");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СпособыРасчетаКомиссионногоВознагражд.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
		ПравилоКонвертации.ТипXDTO   = "СпособыРасчетаКомиссионногоВознаграждения";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления, "ПроцентОтРазницыСуммПродажиИПоступления");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ТипыНоменклатуры.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыНоменклатуры";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ВидРабот, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Запас, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Операция, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Работа, "Работа");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// СистемыНалогообложения.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "СистемыНалогообложения";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСистемНалогообложенияККТ;
		ПравилоКонвертации.ТипXDTO   = "СистемыНалогообложения";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД, "ЕНВД");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.ЕСН, "ЕдиныйСельскохозяйственныйНалог");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.ОСН, "Общая");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.Патент, "ПатентнаяСистема");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход, "УпрощеннаяДоход");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход, "УпрощеннаяДоходМинусРасход");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// СтатусОплаты.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "СтатусОплаты";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусОплаты;
		ПравилоКонвертации.ТипXDTO   = "СостоянияОплаты";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СтатусОплаты.НеУчитывается, "НеОплачен");
		ЗначенияДляОтправки.Вставить(Перечисления.СтатусОплаты.Отсутствует, "НеОплачен");
		ЗначенияДляОтправки.Вставить(Перечисления.СтатусОплаты.Полная, "Оплачен");
		ЗначенияДляОтправки.Вставить(Перечисления.СтатусОплаты.Частичная, "ОплаченЧастично");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// Перечисление_ВидыОперацийРасходнаяНакладная_Получ.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийРасходнаяНакладная_Получ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРасходнаяНакладная;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийРеализацияТоваровУслуг";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ПередачаНаКомиссию", Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
		ЗначенияДляПолучения.Вставить("РеализацияКлиенту", Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_СтатусыЗаявокНаРасходованиеДС.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтатусыЗаявокНаРасходованиеДС";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусыУтвержденияПлатежей;
		ПравилоКонвертации.ТипXDTO   = "СтатусыЗаявокНаРасходДС";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("НеСогласована", Перечисления.СтатусыУтвержденияПлатежей.НеУтвержден);
		ЗначенияДляПолучения.Вставить("Отклонена", Перечисления.СтатусыУтвержденияПлатежей.НеУтвержден);
		ЗначенияДляПолучения.Вставить("КОплате", Перечисления.СтатусыУтвержденияПлатежей.Утвержден);
		ЗначенияДляПолучения.Вставить("Согласована", Перечисления.СтатусыУтвержденияПлатежей.Утвержден);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ТипыНоменклатуры_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыНоменклатуры_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("МногооборотнаяТара", Перечисления.ТипыНоменклатуры.Запас);
		ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Запас);
		ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Работа);
		ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ТипыОплатыЗаявкиНаРасход.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыОплатыЗаявкиНаРасход";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыДенежныхСредств;
		ПравилоКонвертации.ТипXDTO   = "ФормыОплаты";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Безналичная", Перечисления.ТипыДенежныхСредств.Безналичные);
		ЗначенияДляПолучения.Вставить("ПлатежнаяКарта", Перечисления.ТипыДенежныхСредств.Безналичные);
		ЗначенияДляПолучения.Вставить("Наличная", Перечисления.ТипыДенежныхСредств.Наличные);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_УсловияПредоставленияСкидок_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Перечисление_УсловияПредоставленияСкидок_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.УсловияПредоставленияСкидокНаценок;
		ПравилоКонвертации.ТипXDTO   = "УсловияПредоставленияСкидокНаценок";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ЗаДеньРождения", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДеньРождения);
		ЗначенияДляПолучения.Вставить("ЗаДисконтнуюКарту", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту);
		ЗначенияДляПолучения.Вставить("ЗаНакопленныйОбъемПродаж", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
		ЗначенияДляПолучения.Вставить("ЗаРазовыйОбъемПродаж", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// СпособыРасчетаКомиссионногоВознаграждения.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "СпособыРасчетаКомиссионногоВознаграждения";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
		ПравилоКонвертации.ТипXDTO   = "СпособыРасчетаКомиссионногоВознаграждения";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("НеРассчитывается", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
		ЗначенияДляПолучения.Вставить("ПроцентОтРазницыСуммПродажиИПоступления", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления);
		ЗначенияДляПолучения.Вставить("ПроцентОтСуммыПродажи", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ТипыСкладов14.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ТипыСкладов14";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСтруктурныхЕдиниц;
		ПравилоКонвертации.ТипXDTO   = "ТипыСкладов";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Магазин", Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов);
		ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
		ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСтруктурныхЕдиниц.Склад);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ТипыШтрихкодов14.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ТипыШтрихкодов14";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыШтрихкодов;
		ПравилоКонвертации.ТипXDTO   = "ТипыШтрихкодов";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("Code128", Перечисления.ТипыШтрихкодов.Code128);
		ЗначенияДляПолучения.Вставить("Code39", Перечисления.ТипыШтрихкодов.Code39);
		ЗначенияДляПолучения.Вставить("DataMatrix", Перечисления.ТипыШтрихкодов.DataMatrix);
		ЗначенияДляПолучения.Вставить("EAN13", Перечисления.ТипыШтрихкодов.EAN13);
		ЗначенияДляПолучения.Вставить("EAN8", Перечисления.ТипыШтрихкодов.EAN8);
		ЗначенияДляПолучения.Вставить("GS1_128", Перечисления.ТипыШтрихкодов.GS1_128);
		ЗначенияДляПолучения.Вставить("GS1_DataBarExpandedStacked", Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
		ЗначенияДляПолучения.Вставить("GS1_DataMatrix", Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
		ЗначенияДляПолучения.Вставить("ITF14", Перечисления.ТипыШтрихкодов.ITF14);
		ЗначенияДляПолучения.Вставить("PDF417", Перечисления.ТипыШтрихкодов.PDF417);
		ЗначенияДляПолучения.Вставить("QR", Перечисления.ТипыШтрихкодов.QR);
		ЗначенияДляПолучения.Вставить("SSCC", Перечисления.ТипыШтрихкодов.SSCC);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// ВидыОперацийПБДС_РасчетыССотрудниками.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийПБДС_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеНаСчет;
	ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПКО_РасчетыССотрудниками.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийПКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеВКассу;
	ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКО_РасчетыССотрудниками.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийРКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРасходИзКассы;
	ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСБДС_РасчетыССотрудниками.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийСБДС_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРасходСоСчета;
	ПравилоКонвертации.ТипXDTO   = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыДоговоров.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыДоговоров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоров;
	ПравилоКонвертации.ТипXDTO   = "ВидыДоговоров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СКомиссионером, "СКомиссионером");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СКомитентом, "СКомитентом");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СПокупателем, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоров.СПоставщиком, "СПоставщиком");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоров.Прочее);
	ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоров.СКомиссионером);
	ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоров.СКомитентом);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоров.СПокупателем);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоров.СПоставщиком);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыКонтрагентов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыКонтрагентов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыКонтрагентов;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ГосударственныйОрган, "ЮридическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыКонтрагентов.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ВидыКонтрагентов.ГосударственныйОрган);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ВидыКонтрагентов.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыЛицензийАлкогольнойПродукции.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыЛицензийАлкогольнойПродукции";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЛицензийАлкогольнойПродукции;
	ПравилоКонвертации.ТипXDTO   = "ВидыЛицензийАлкогольнойПродукции";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АлкогольнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "Пиво");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "АлкогольнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "СпиртосодержащаяНеПищеваяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "СпиртосодержащаяПищеваяПродукция");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АлкогольнаяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ЗначенияДляПолучения.Вставить("Пиво", Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво);
	ЗначенияДляПолучения.Вставить("АлкогольнаяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяНеПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийКомплектацияЗапасов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийКомплектацияЗапасов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКомплектацияЗапасов;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийСборкаТоваров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияЗапасов.Разборка, "Разборка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияЗапасов.Сборка, "Сборка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Разборка", Перечисления.ВидыОперацийКомплектацияЗапасов.Разборка);
	ЗначенияДляПолучения.Вставить("Сборка", Перечисления.ВидыОперацийКомплектацияЗапасов.Сборка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийКорректировки.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийКорректировки";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийИсправленияПоступленияРеализации;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийИсправленияПоступленияРеализации";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, "ИсправлениеОшибки");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, "СогласованноеИзменение");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ИсправлениеОшибки", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	ЗначенияДляПолучения.Вставить("СогласованноеИзменение", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийСчетФактура.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийСчетФактура";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСчетФактура;
	ПравилоКонвертации.ТипXDTO   = "ВидыСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.Аванс, "НаАванс");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.Корректировка, "Корректировочный");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента, "НаАвансКомитента");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.Продажа, "НаРеализацию");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы, "СуммовыеРазницы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидыОперацийСчетФактура.Аванс);
	ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидыОперацийСчетФактура.Корректировка);
	ЗначенияДляПолучения.Вставить("НаАвансКомитента", Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента);
	ЗначенияДляПолучения.Вставить("НаРеализацию", Перечисления.ВидыОперацийСчетФактура.Продажа);
	ЗначенияДляПолучения.Вставить("СуммовыеРазницы", Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийСчетФактураПолученный.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыОперацийСчетФактураПолученный";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСчетФактураПолученный;
	ПравилоКонвертации.ТипXDTO   = "ВидыСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактураПолученный.Аванс, "НаАванс");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка, "Корректировочный");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактураПолученный.Поступление, "НаПоступление");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы, "СуммовыеРазницы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидыОперацийСчетФактураПолученный.Аванс);
	ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка);
	ЗначенияДляПолучения.Вставить("НаПоступление", Перечисления.ВидыОперацийСчетФактураПолученный.Поступление);
	ЗначенияДляПолучения.Вставить("СуммовыеРазницы", Перечисления.ВидыОперацийСчетФактураПолученный.СуммовыеРазницы);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыПродукцииИС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ВидыПродукцииИС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыПродукцииИС;
	ПравилоКонвертации.ТипXDTO   = "ВидыПродукцииИС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Алкогольная, "Алкогольная");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.АльтернативныйТабак, "АльтернативныйТабак");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Велосипеды, "Велосипеды");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Духи, "Духи");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.КреслаКоляски, "КреслаКоляски");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность, "ЛегкаяПромышленность");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС, "МолочнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС, "МолочнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Обувь, "Обувь");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Табак, "Табак");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.УпакованнаяВода, "УпакованнаяВода");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Фотоаппараты, "Фотоаппараты");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПродукцииИС.Шины, "Шины");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Алкогольная", Перечисления.ВидыПродукцииИС.Алкогольная);
	ЗначенияДляПолучения.Вставить("АльтернативныйТабак", Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
	ЗначенияДляПолучения.Вставить("Велосипеды", Перечисления.ВидыПродукцииИС.Велосипеды);
	ЗначенияДляПолучения.Вставить("Духи", Перечисления.ВидыПродукцииИС.Духи);
	ЗначенияДляПолучения.Вставить("КреслаКоляски", Перечисления.ВидыПродукцииИС.КреслаКоляски);
	ЗначенияДляПолучения.Вставить("ЛегкаяПромышленность", Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность);
	ЗначенияДляПолучения.Вставить("МолочнаяПродукция", Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС);
	ЗначенияДляПолучения.Вставить("МолочнаяПродукция", Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС);
	ЗначенияДляПолучения.Вставить("Обувь", Перечисления.ВидыПродукцииИС.Обувь);
	ЗначенияДляПолучения.Вставить("Табак", Перечисления.ВидыПродукцииИС.Табак);
	ЗначенияДляПолучения.Вставить("УпакованнаяВода", Перечисления.ВидыПродукцииИС.УпакованнаяВода);
	ЗначенияДляПолучения.Вставить("Фотоаппараты", Перечисления.ВидыПродукцииИС.Фотоаппараты);
	ЗначенияДляПолучения.Вставить("Шины", Перечисления.ВидыПродукцииИС.Шины);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_НалогообложениеНДСПродавца.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_НалогообложениеНДСПродавца";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНалогообложенияНДС;
	ПравилоКонвертации.ТипXDTO   = "НалогообложениеНДСПродавца";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.НаЭкспорт, "НДСИсчисляетсяПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС, "НеОблагаетсяНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС, "ОблагаетсяНДС");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НДСИсчисляетсяПокупателем", Перечисления.ТипыНалогообложенияНДС.НаЭкспорт);
	ЗначенияДляПолучения.Вставить("НеОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС);
	ЗначенияДляПолучения.Вставить("ОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ПризнакиПредметаРасчета.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ПризнакиПредметаРасчета";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПризнакиПредметаРасчета;
	ПравилоКонвертации.ТипXDTO   = "ПризнакиПредметаРасчета";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.АгентскоеВознаграждение, "АгентскоеВознаграждение");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход, "ВнереализационныйДоход");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры, "ВыигрышАзартнойИгры");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВыигрышЛотереи, "ВыигрышЛотереи");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ИмущественноеПраво, "ИмущественноеПраво");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета, "ИнойПредметРасчета");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.КурортныйСбор, "КурортныйСбор");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ЛотерейныйБилет, "ЛотерейныйБилет");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата, "ПлатежВыплата");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар, "ПодакцизныйТовар");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Работа, "Работа");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СоставнойПредметРасчета, "СоставнойПредметРасчета");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СтавкаАзартнойИгры, "СтавкаАзартнойИгры");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СтраховыеВзносы, "СтраховыеВзносы");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Товар, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТорговыйСбор, "ТорговыйСбор");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Услуга, "Услуга");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АгентскоеВознаграждение", Перечисления.ПризнакиПредметаРасчета.АгентскоеВознаграждение);
	ЗначенияДляПолучения.Вставить("ВнереализационныйДоход", Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход);
	ЗначенияДляПолучения.Вставить("ВыигрышАзартнойИгры", Перечисления.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры);
	ЗначенияДляПолучения.Вставить("ВыигрышЛотереи", Перечисления.ПризнакиПредметаРасчета.ВыигрышЛотереи);
	ЗначенияДляПолучения.Вставить("ИмущественноеПраво", Перечисления.ПризнакиПредметаРасчета.ИмущественноеПраво);
	ЗначенияДляПолучения.Вставить("ИнойПредметРасчета", Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета);
	ЗначенияДляПолучения.Вставить("КурортныйСбор", Перечисления.ПризнакиПредметаРасчета.КурортныйСбор);
	ЗначенияДляПолучения.Вставить("ЛотерейныйБилет", Перечисления.ПризнакиПредметаРасчета.ЛотерейныйБилет);
	ЗначенияДляПолучения.Вставить("ПлатежВыплата", Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата);
	ЗначенияДляПолучения.Вставить("ПодакцизныйТовар", Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар);
	ЗначенияДляПолучения.Вставить("Работа", Перечисления.ПризнакиПредметаРасчета.Работа);
	ЗначенияДляПолучения.Вставить("СоставнойПредметРасчета", Перечисления.ПризнакиПредметаРасчета.СоставнойПредметРасчета);
	ЗначенияДляПолучения.Вставить("СтавкаАзартнойИгры", Перечисления.ПризнакиПредметаРасчета.СтавкаАзартнойИгры);
	ЗначенияДляПолучения.Вставить("СтраховыеВзносы", Перечисления.ПризнакиПредметаРасчета.СтраховыеВзносы);
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ПризнакиПредметаРасчета.Товар);
	ЗначенияДляПолучения.Вставить("ТорговыйСбор", Перечисления.ПризнакиПредметаРасчета.ТорговыйСбор);
	ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ПризнакиПредметаРасчета.Услуга);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ПризнакиПредметаРасчета14.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ПризнакиПредметаРасчета14";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПризнакиПредметаРасчета;
	ПравилоКонвертации.ТипXDTO   = "ПризнакиПредметаРасчета";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.АгентскоеВознаграждение, "АгентскоеВознаграждение");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход, "ВнереализационныйДоход");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры, "ВыигрышАзартнойИгры");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ВыигрышЛотереи, "ВыигрышЛотереи");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ИмущественноеПраво, "ИмущественноеПраво");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета, "ИнойПредметРасчета");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.КурортныйСбор, "КурортныйСбор");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ЛотерейныйБилет, "ЛотерейныйБилет");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата, "ПлатежВыплата");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар, "ПодакцизныйТовар");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ, "ПодакцизныйТоварМаркируемыйСИИмеющийКМ");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ, "ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Работа, "Работа");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СоставнойПредметРасчета, "СоставнойПредметРасчета");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СтавкаАзартнойИгры, "СтавкаАзартнойИгры");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.СтраховыеВзносы, "СтраховыеВзносы");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Товар, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ, "ТоварМаркируемыйСИИмеющийКМ");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ, "ТоварМаркируемыйСИНеИмеющийКМ");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.ТорговыйСбор, "ТорговыйСбор");
	ЗначенияДляОтправки.Вставить(Перечисления.ПризнакиПредметаРасчета.Услуга, "Услуга");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АгентскоеВознаграждение", Перечисления.ПризнакиПредметаРасчета.АгентскоеВознаграждение);
	ЗначенияДляПолучения.Вставить("ВнереализационныйДоход", Перечисления.ПризнакиПредметаРасчета.ВнереализационныйДоход);
	ЗначенияДляПолучения.Вставить("ВыигрышАзартнойИгры", Перечисления.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры);
	ЗначенияДляПолучения.Вставить("ВыигрышЛотереи", Перечисления.ПризнакиПредметаРасчета.ВыигрышЛотереи);
	ЗначенияДляПолучения.Вставить("ИмущественноеПраво", Перечисления.ПризнакиПредметаРасчета.ИмущественноеПраво);
	ЗначенияДляПолучения.Вставить("ИнойПредметРасчета", Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета);
	ЗначенияДляПолучения.Вставить("КурортныйСбор", Перечисления.ПризнакиПредметаРасчета.КурортныйСбор);
	ЗначенияДляПолучения.Вставить("ЛотерейныйБилет", Перечисления.ПризнакиПредметаРасчета.ЛотерейныйБилет);
	ЗначенияДляПолучения.Вставить("ПлатежВыплата", Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата);
	ЗначенияДляПолучения.Вставить("ПодакцизныйТовар", Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар);
	ЗначенияДляПолучения.Вставить("ПодакцизныйТоварМаркируемыйСИИмеющийКМ", Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ);
	ЗначенияДляПолучения.Вставить("ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ", Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ);
	ЗначенияДляПолучения.Вставить("Работа", Перечисления.ПризнакиПредметаРасчета.Работа);
	ЗначенияДляПолучения.Вставить("СоставнойПредметРасчета", Перечисления.ПризнакиПредметаРасчета.СоставнойПредметРасчета);
	ЗначенияДляПолучения.Вставить("СтавкаАзартнойИгры", Перечисления.ПризнакиПредметаРасчета.СтавкаАзартнойИгры);
	ЗначенияДляПолучения.Вставить("СтраховыеВзносы", Перечисления.ПризнакиПредметаРасчета.СтраховыеВзносы);
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ПризнакиПредметаРасчета.Товар);
	ЗначенияДляПолучения.Вставить("ТоварМаркируемыйСИИмеющийКМ", Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ);
	ЗначенияДляПолучения.Вставить("ТоварМаркируемыйСИНеИмеющийКМ", Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ);
	ЗначенияДляПолучения.Вставить("ТорговыйСбор", Перечисления.ПризнакиПредметаРасчета.ТорговыйСбор);
	ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ПризнакиПредметаРасчета.Услуга);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ТипыОплатыККТ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ТипыОплатыККТ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыОплатыККТ;
	ПравилоКонвертации.ТипXDTO   = "ТипыТипыОплатЧековККМ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.ВстречноеПредоставление, "ВстречноеПредставление");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.Наличные, "Наличные");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.Постоплата, "Постоплата");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.Предоплата, "Предоплата");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыОплатыККТ.Электронно, "Электронно");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВстречноеПредставление", Перечисления.ТипыОплатыККТ.ВстречноеПредоставление);
	ЗначенияДляПолучения.Вставить("Наличные", Перечисления.ТипыОплатыККТ.Наличные);
	ЗначенияДляПолучения.Вставить("Постоплата", Перечисления.ТипыОплатыККТ.Постоплата);
	ЗначенияДляПолучения.Вставить("Предоплата", Перечисления.ТипыОплатыККТ.Предоплата);
	ЗначенияДляПолучения.Вставить("Электронно", Перечисления.ТипыОплатыККТ.Электронно);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ЮридическоеФизическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисления_ТипыНалогообложенияНДС_Отправка.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисления_ТипыНалогообложенияНДС_Отправка";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНалогообложенияНДС;
	ПравилоКонвертации.ТипXDTO   = "НалогообложениеНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.НаЭкспорт, "ПродажаНаЭкспорт");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС, "ПродажаНеОблагаетсяНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС, "ПродажаОблагаетсяНДС");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПродажаНаЭкспорт", Перечисления.ТипыНалогообложенияНДС.НаЭкспорт);
	ЗначенияДляПолучения.Вставить("ПродажаНеОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС);
	ЗначенияДляПолучения.Вставить("ПродажаОблагаетсяНДС", Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыДоставки.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СпособыДоставки";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыДоставки;
	ПравилоКонвертации.ТипXDTO   = "СпособыДоставки";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыДоставки.Курьер, "СиламиПеревозчикаПоАдресу");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыДоставки.Почта, "СиламиПеревозчика");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыДоставки.ПунктВыдачи, "СиламиПеревозчикаДоПунктаПередачи");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыДоставки.Самовывоз, "Самовывоз");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СиламиПеревозчикаПоАдресу", Перечисления.СпособыДоставки.Курьер);
	ЗначенияДляПолучения.Вставить("СиламиПеревозчика", Перечисления.СпособыДоставки.Почта);
	ЗначенияДляПолучения.Вставить("СиламиПеревозчикаДоПунктаПередачи", Перечисления.СпособыДоставки.ПунктВыдачи);
	ЗначенияДляПолучения.Вставить("Самовывоз", Перечисления.СпособыДоставки.Самовывоз);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыСкладов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыСкладов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСтруктурныхЕдиниц;
	ПравилоКонвертации.ТипXDTO   = "ТипыСкладов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение, "Оптовый");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСтруктурныхЕдиниц.Розница, "Розничный");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет, "НеавтоматизированнаяТорговаяТочка");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСтруктурныхЕдиниц.Склад, "Оптовый");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
	ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ТипыСтруктурныхЕдиниц.Розница);
	ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыУпаковок.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыУпаковок";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыУпаковок;
	ПравилоКонвертации.ТипXDTO   = "ТипыУпаковокНоменклатуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыУпаковок.МаркированныйТовар, "МаркированныйТовар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыУпаковок.МонотоварнаяУпаковка, "МонотоварнаяУпаковка");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыУпаковок.МультитоварнаяУпаковка, "МультитоварнаяУпаковка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("МаркированныйТовар", Перечисления.ТипыУпаковок.МаркированныйТовар);
	ЗначенияДляПолучения.Вставить("МонотоварнаяУпаковка", Перечисления.ТипыУпаковок.МонотоварнаяУпаковка);
	ЗначенияДляПолучения.Вставить("МультитоварнаяУпаковка", Перечисления.ТипыУпаковок.МультитоварнаяУпаковка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыШтрихкодов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыШтрихкодов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыШтрихкодов;
	ПравилоКонвертации.ТипXDTO   = "ТипыШтрихкодов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.Code128, "Code128");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.Code39, "Code39");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.EAN13, "EAN13");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.EAN8, "EAN8");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.GS1_128, "GS1_128");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked, "GS1_DataBarExpandedStacked");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.ITF14, "ITF14");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.PDF417, "PDF417");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.QR, "QR");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыШтрихкодов.SSCC, "SSCC");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Code128", Перечисления.ТипыШтрихкодов.Code128);
	ЗначенияДляПолучения.Вставить("Code39", Перечисления.ТипыШтрихкодов.Code39);
	ЗначенияДляПолучения.Вставить("EAN13", Перечисления.ТипыШтрихкодов.EAN13);
	ЗначенияДляПолучения.Вставить("EAN8", Перечисления.ТипыШтрихкодов.EAN8);
	ЗначенияДляПолучения.Вставить("GS1_128", Перечисления.ТипыШтрихкодов.GS1_128);
	ЗначенияДляПолучения.Вставить("GS1_DataBarExpandedStacked", Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
	ЗначенияДляПолучения.Вставить("ITF14", Перечисления.ТипыШтрихкодов.ITF14);
	ЗначенияДляПолучения.Вставить("PDF417", Перечисления.ТипыШтрихкодов.PDF417);
	ЗначенияДляПолучения.Вставить("QR", Перечисления.ТипыШтрихкодов.QR);
	ЗначенияДляПолучения.Вставить("SSCC", Перечисления.ТипыШтрихкодов.SSCC);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации:
//                         Ключ - имя параметра, значение - значение параметра, по умолчанию - Неопределено.
//
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("НациональнаяВалюта");
	ПараметрыКонвертации.Вставить("ПроизводственныеСклады");
	ПараметрыКонвертации.Вставить("ИспользуютсяСкладыВТабличныхЧастях");
	ПараметрыКонвертации.Вставить("ОбобщенныйСклад");
	ПараметрыКонвертации.Вставить("ПереноситьЗаказыКакСчетаНаОплату");
	ПараметрыКонвертации.Вставить("АвтоматическиЗачитыватьАвансы");
	ПараметрыКонвертации.Вставить("ПереноситьКатегорииКакВидыНоменклатуры");
	ПараметрыКонвертации.Вставить("ИспользоватьОтборПоОрганизациям");
	ПараметрыКонвертации.Вставить("МассивОрганизаций");
	ПараметрыКонвертации.Вставить("ВариантНастройки");
	ПараметрыКонвертации.Вставить("МассивВидовЦен");
	ПараметрыКонвертации.Вставить("ИспользоватьОтборПоВидамЦен");
	ПараметрыКонвертации.Вставить("ВыгружатьКартинкиНоменклатуры");
	ПараметрыКонвертации.Вставить("РежимВыгрузкиКартинокНоменклатуры");
	ПараметрыКонвертации.Вставить("СжиматьВыгружаемыеИзображения");
	ПараметрыКонвертации.Вставить("ВыгружатьОстаткиНоменклатуры");
	ПараметрыКонвертации.Вставить("МассивСкладов");
	ПараметрыКонвертации.Вставить("ВыгружатьДополнительныеРеквизиты");
	ПараметрыКонвертации.Вставить("ОбъектыДляПовторнойРегистрацииПослеПолучения");
	ПараметрыКонвертации.Вставить("НастройкиИнтеграции");
	ПараметрыКонвертации.Вставить("МассивОрганизацийСкладскихОстатков");
	ПараметрыКонвертации.Вставить("НовыеЗаказыПокупателей");
	ПараметрыКонвертации.Вставить("ПодарочныйСертификатПоУмолчанию");
	ПараметрыКонвертации.Вставить("ВыгружатьЗаказыПокупателей");
	ПараметрыКонвертации.Вставить("ВыгружатьСчетаНаОплату");
	ПараметрыКонвертации.Вставить("ПолитикаУчетаСерийПоУмолчанию");
	ПараметрыКонвертации.Вставить("МассивТоваровОсобогоРежима");
	ПараметрыКонвертации.Вставить("НеВыгружатьПеремещенияЗапасов");
	ПараметрыКонвертации.Вставить("ОРПТекущейКассовойСмены");
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура:
//    * ОбъектОбработки - Произвольный
//    * ИспользованиеПКО - Структура
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * ДанныеИБ - СправочникОбъект
//               - ДокументОбъект
//               - и т.п.
//    * ПолученныеДанные - СправочникОбъект
//                       - ДокументОбъект
//                       - и т.п.
//    * КонвертацияСвойств - ТаблицаЗначений
//    * ДанныеXDTO - см. ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * СтекВыгрузки - Массив из Произвольный
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажахПатент_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажахПатент_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_Взаимозачет_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Взаимозачет_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризацияЗапасов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризацияЗапасов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОПереработке_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОПереработке_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересортицаЗапасов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересортицаЗапасов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_Производство_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Производство_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РаспределениеЗатрат_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РаспределениеЗатрат_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходнаяНакладная_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РасходнаяНакладная_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетНаОплатуПокупателю_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетНаОплатуПокупателю_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЧекККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЧекККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЧекККМВозврат_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЧекККМВозврат_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПланВидовХарактеристик_ДополнительныеРеквизитыИСведения_Отправка_ПриОбработке" Тогда 
		ПОД_ПланВидовХарактеристик_ДополнительныеРеквизитыИСведения_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РегистрСведений_ФактОплатыЗаказов_Отправка_ПриОбработке" Тогда 
		ПОД_РегистрСведений_ФактОплатыЗаказов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ИнформативныеОстатки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ИнформативныеОстатки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КлассификаторТНВЭД_ЭлементСправочника_ПриОбработке" Тогда 
		ПОД_Справочник_КлассификаторТНВЭД_ЭлементСправочника_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЛицензииПоставщиковАлко_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЛицензииПоставщиковАлко_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НаправленияДеятельностиНГ_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НаправленияДеятельностиНГ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Организации_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Организации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Патенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Патенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ПозицияПрайсЛиста_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ПозицияПрайсЛиста_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ПунктыВыдачиЗаказов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ПунктыВыдачиЗаказов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Упаковки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФайлыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФайлыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФайлыХарактеристикиНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФайлыХарактеристикиНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ХарактеристикиНоменклатуры_ПриОбработке" Тогда 
		ПОД_Справочник_ХарактеристикиНоменклатуры_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВыемкаДСИзКассыККМ_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ВыемкаДСИзКассыККМ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПокупателя_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПокупателя_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажах_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажах_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходДСПланНаРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РасходДСПланНаРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЧекККМ_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЧекККМ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КатегорииНоменклатурыВН_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_КатегорииНоменклатурыВН_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НаправленияДеятельностиНГ_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_НаправленияДеятельностиНГ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатурныеГруппы_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатурныеГруппы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ПунктыВыдачиЗаказов_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ПунктыВыдачиЗаказов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Упаковки_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Упаковки_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Файлы_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Файлы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНаПеремещение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНаПеремещение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_54ФЗ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЧекККМ_54ФЗ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_54ФЗ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЧекККМВозврат_54ФЗ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ДополнительныеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ДополнительныеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Комплектация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Комплектация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КомплектацияЗапасов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КомплектацияЗапасов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МаркировкаТоваровГИСМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_МаркировкаТоваровГИСМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОСписанииВозвр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионераОСписанииВозвр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОСписанииСпис_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионераОСписанииСпис_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОПереработке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОПереработке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОПереработкеДавальцу_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОПереработкеДавальцу_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОПереработкеМатериалы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОПереработкеМатериалы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажахПатент_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажахПатент_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДССлужбаДоставки_Корректировка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДССлужбаДоставки_Корректировка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПДС_НаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПДС_НаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаТоваровПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаТоваровПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаТоваровРеализация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаТоваровРеализация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаТоваровСФПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаТоваровСФПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаСписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаСписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриходнаяНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПриходнаяНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Производство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Производство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПроизводствоПеремещениеОтходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПроизводствоПеремещениеОтходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПроизводствоПеремещениеПродукции_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПроизводствоПеремещениеПродукции_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РаспределениеЗатрат_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РаспределениеЗатрат_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходнаяНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РасходнаяНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходыПриИмпорте_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РасходыПриИмпорте_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_ИзЭксплуатации_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_ИзЭксплуатации_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЧекККМВозврат_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПодразделениеВПроизводственныйСклад_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПодразделениеВПроизводственныйСклад_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ИнформативныеОстатки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ИнформативныеОстатки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПозицияПрайсЛиста_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ПозицияПрайсЛиста_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПрайсЛист_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ПрайсЛист_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостояниеЗаказа_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостояниеЗаказа_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостоянияЗаказовПокупателей_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостоянияЗаказовПокупателей_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФайлыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФайлыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФайлыХарактеристикиНоменклатур_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФайлыХарактеристикиНоменклатур_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Банки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПунктыВыдачиЗаказов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ПунктыВыдачиЗаказов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СерииНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СерииНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнесениеНаличных_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВнесениеНаличных_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнесениеНаличных_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВнесениеНаличных_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТовараПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТовараПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТовараПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТовараПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыемкаНаличных_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыемкаНаличных_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыемкаНаличных_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВыемкаНаличных_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНаПеремещение_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказНаПеремещение_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказНаПеремещение_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказНаПеремещение_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КомплектацияЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КомплектацияЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КомплектацияЗапасов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КомплектацияЗапасов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаПоступления_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НачислениеСписаниеБонусныхБаллов_Прием_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_НачислениеСписаниеБонусныхБаллов_Прием_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеЗапасов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеЗапасов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПриходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПриходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РасходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РасходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РасходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_АвтоматическиеСкидки_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_АвтоматическиеСкидки_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентовСтруктура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентовСтруктура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Кассы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Кассы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КатегорииНоменклатурыВН_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КатегорииНоменклатурыВН_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторАлкогольнойПродукцииЕГАИС_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КлассификаторАлкогольнойПродукцииЕГАИС_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторОрганизацийЕГАИС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КлассификаторОрганизацийЕГАИС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НаправленияДеятельностиНГ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НаправленияДеятельностиНГ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатурныеГруппы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НоменклатурныеГруппы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомераГТД_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НомераГТД_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Патенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Патенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПодарочныеСертификаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ПодарочныеСертификаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПодарочныеСертификаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ПодарочныеСертификаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_УсловияПредоставленияСкидок_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_УсловияПредоставленияСкидок_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЗаказПокупателя" Тогда 
		ОтложеннаяОбработка_ЗаказПокупателя(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОРП" Тогда 
		ОтложеннаяОбработка_ОРП(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПБДС" Тогда 
		ОтложеннаяОбработка_ПБДС(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКО" Тогда 
		ОтложеннаяОбработка_ПКО(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РКО" Тогда 
		ОтложеннаяОбработка_РКО(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СБДС" Тогда 
		ОтложеннаяОбработка_СБДС(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ЧекККМ" Тогда 
		ОтложеннаяОбработка_ЧекККМ(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	КонецЕсли;
	МенеджерОбменаУРМКПереопределяемый.ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры);
	ПослеВыполненияПроцедурыМодуляМенеджера(Параметры)
КонецПроцедуры


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
Функция Подключаемый_ИдентификаторМодуля() Экспорт
	Возврат "7fa9b9e3-eb5a-471b-a1cc-a785b627c251";
КонецФункции
#Область Отправка
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_АктВыполненныхРабот_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_АктВыполненныхРабот_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АктВыполненныхРабот;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АктВыполненныхРабот_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_Взаимозачет_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Взаимозачет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Взаимозачет;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_Взаимозачет_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Взаимозачет_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ДополнительныеРасходы_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ДополнительныеРасходы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ДополнительныеРасходы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ДополнительныеРасходы_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказНаПеремещение_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказНаПеремещение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказНаПеремещение;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНаПеремещение_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказНаряд_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказНаряд_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядРасходнаяНакладная_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНарядТребованиеНакладная_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостоянияЗаказовПокупателей_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ИнвентаризацияЗапасов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризацияЗапасов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнвентаризацияЗапасов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияЗапасов_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КомплектацияЗапасов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КомплектацияЗапасов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КомплектацияЗапасов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КомплектацияЗапасов_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступления_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаПоступления;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаРеализации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаРеализации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_МаркировкаТоваровГИСМ_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_МаркировкаТоваровГИСМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_МаркировкаТоваровГИСМ_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_НачисленияПоКредитамИЗаймам_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_НачисленияПоКредитамИЗаймам_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.НачисленияПоКредитамИЗаймам;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачисленияПоКредитамИЗаймам_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОперацияПоПлатежнымКартам;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомиссионера;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионера_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетКомиссионераОСписании_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомиссионераОСписании_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомиссионераОСписании;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионераОСписанииВозвр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионераОСписанииСпис_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитенту;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетОПереработке_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОПереработке_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОПереработке;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОПереработке_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОПереработке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОПереработкеДавальцу_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОПереработкеМатериалы_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетПереработчика_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетПереработчика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетПереработчика;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетПереработчика_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВзносНаличными_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДССлужбаДоставки_Корректировка_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПДС_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеДС;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПДС_НаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПДС_ПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПДС_ПолучениеНаличныхВБанке_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПередачаТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПередачаТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаТоваровПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаТоваровРеализация_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеЗапасов_НаРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПереоценкаВРозницеСуммовойУчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПереоценкаВРозницеСуммовойУчет;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПереоценкаВРозницеСуммовойУчет_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПересортицаЗапасов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересортицаЗапасов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересортицаЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересортицаЗапасов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаОприходованиеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаСписаниеТоваров_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПКО_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПриходнаяНакладная_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходнаяНакладная_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяОтПереработчика_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеСырьяОтДавальца_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриходнаяНакладная_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_Производство_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Производство_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СборкаЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_Производство_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Комплектация_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Производство_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПроизводствоПеремещениеОтходов_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПроизводствоПеремещениеПродукции_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПрочиеРасходы_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПрочиеРасходы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПрочиеРасходы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПрочиеРасходы_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РаспределениеЗатрат_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РаспределениеЗатрат_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РаспределениеЗатрат;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РаспределениеЗатрат_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РаспределениеЗатрат_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РасходнаяНакладная_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходнаяНакладная_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходнаяНакладная;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РасходнаяНакладная_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяДавальцу_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаПереработчику_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходнаяНакладная_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РасходыПриИмпорте_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходыПриИмпорте_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходыПриИмпорте;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходыПриИмпорте_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходИзКассы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РКО_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДС_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходСоСчета;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗарплСотруднику_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДССнятиеНаличных_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеЗапасов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_ИзЭксплуатации");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваровПоИнвентаризации_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетНаОплатуПокупателю_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплату;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетНаОплатуПокупателю_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуПокупателю_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетНаОплатуПоставщика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетНаОплатуПоставщика_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаТоваровСФПолученный_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатурыРегистр_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатурыРегистр_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЧекККМ_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЧекККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЧекККМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЧекККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМ_54ФЗ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМ_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЧекККМВозврат_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЧекККМВозврат_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЧекККМВозврат;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЧекККМВозврат_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМВозврат_54ФЗ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМВозврат_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_ПланВидовХарактеристик_ДополнительныеРеквизитыИСведения_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПланВидовХарактеристик_ДополнительныеРеквизитыИСведения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПланВидовХарактеристик_ДополнительныеРеквизитыИСведения_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_РегистрСведений_ФактОплатыЗаказов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РегистрСведений_ФактОплатыЗаказов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ФактОплатыЗаказов;
	ПравилоОбработки.ПриОбработке            = "ПОД_РегистрСведений_ФактОплатыЗаказов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостояниеОплатыЗаказа_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БонусныеПрограммы_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БонусныеПрограммы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БонусныеПрограммы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БонусныеПрограммы_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыДокументовФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыДокументовФизическихЛиц");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДисконтныеКарты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДисконтныеКарты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДисконтныеКарты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДисконтныеКарты_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЗначенияСвойствОбъектов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЗначенияСвойствОбъектов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДопРеквизитов_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ИнформативныеОстатки_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ИнформативныеОстатки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ОстаткиТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ИнформативныеОстатки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ИнформативныеОстатки_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КассыККМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КлассификаторТНВЭД_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторТНВЭД_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторТНВЭД_ЭлементСправочника");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КлассификаторТНВЭД_ЭлементСправочника(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторТНВЭД_ЭлементСправочника";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КлассификаторТНВЭД_ЭлементСправочника_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторТНВЭД_ЭлементСправочника");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлко_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЛицензииПоставщиковАлко_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ЛицензииПоставщиковАлко_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЛицензииПоставщиковАлко_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НаправленияДеятельностиНГ_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НаправленияДеятельностиНГ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НаправленияДеятельности;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НаправленияДеятельностиНГ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НаправленияДеятельностиНГ_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппы_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурныеГруппы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КатегорииНоменклатурыВН_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы_Группа");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Организации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Патенты_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Патенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Патенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Патенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Патенты_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПозицияПрайсЛиста_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПозицияПрайсЛиста_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ПозицияПрайсЛиста_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПозицияПрайсЛиста_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПрайсЛист_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПрайсЛист_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПрайсЛист_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПунктыВыдачиЗаказов_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПунктыВыдачиЗаказов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПунктыВыдачиЗаказа;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ПунктыВыдачиЗаказов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПунктыВыдачиЗаказов");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СерииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СерииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерииНоменклатуры");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостояниеЗаказа_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостояниеЗаказа_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СостоянияЗаказовПокупателей;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостояниеЗаказа_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Спецификации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтруктурныеЕдиницы_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтруктурныеЕдиницы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПодразделениеВПроизводственныйСклад_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ТипыЦен_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыЦен;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Упаковки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Упаковки");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФайлыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФайлыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФайлыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФайлыНоменклатуры_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФайлыХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФайлыХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатурыПрисоединенныеФайлы;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФайлыХарактеристикиНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФайлыХарактеристикиНоменклатур_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ХарактеристикиНоменклатуры_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыУпаковокТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыУпаковокТоваров_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",      "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "КоличествоДокументов", "КоличествоДокументов");
	ДобавитьПКС(СвойстваШапки, "КоличествоЛистов",     "КоличествоЛистов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Кратность",            "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "Курс",                 "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "НазначениеАванса",     "НазначениеАванса");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",   "НалогообложениеНДСПродавца", 1, "Перечисление_НалогообложениеНДСПродавца");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "ПодотчетноеЛицо", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",     "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",       "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВыданныеАвансы");
	ДобавитьПКС(СвойстваТЧ, "", "Документ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаКонтрагентам");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПрочиеРасходы");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1, "Справочник_НоменклатурныеГруппы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Поставщик", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПредъявленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_АктВыполненныхРабот_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_АктВыполненныхРабот_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.АктВыполненныхРабот;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "ВидЦен",             "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "Заказ", 1, "Документ_ЗаказПокупателя_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",          "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",               "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_Взаимозачет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Взаимозачет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Взаимозачет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",            "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации", "ВидОперации", , "Перечисление_ВидыОперацийВзаимозачет");
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "",            "КонтрагентДебитор", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "КонтрагентКредитор", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",   "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "Курс",        "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СуммаДебиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СуммаКредиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СчетДт", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СчетКт", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратСырьяДавальцу_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратСырьяДавальцу";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",     "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",    "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",          "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",               "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратСырьяОтПереработчика_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратСырьяОтПереработчика";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ДокументРеализации", 1, "Документ_РасходнаяНакладная_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",          "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",               "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисление_НалогообложениеНДСПродавца");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ПокупателемВыставляетсяСчетФактураНаВозврат", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВозвратПодДеятельность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",   "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",    "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ДокументПоступления", 1, "Документ_ПриходнаяНакладная_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",          "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",               "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ДополнительныеРасходы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ДополнительныеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ДополнительныеРасходы;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ДополнительныеРасходы_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                 "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",               "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                    "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",      "Налогообложение", , "Перечисление_НалогообложениеНДСПродавца");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказНарядРасходнаяНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",            "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",           "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",                 "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                      "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",        "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПродажи", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв",  "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                          "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Финиш",                     "Дата");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказНарядТребованиеНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПродажи", "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв",  "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Финиш",                     "Дата");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Заказчик", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "AdditionalInfo");
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",            "АдресДоставки", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",                   "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",   "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                  "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",                "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                     "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",  "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПунктВыдачиЗаказа",        "ПунктВыдачи", , "Справочник_ПунктыВыдачиЗаказов");
	ДобавитьПКС(СвойстваШапки, "СпособДоставки",           "СпособДоставки", , "СпособыДоставки");
	ДобавитьПКС(СвойстваШапки, "СсылкаДляОплаты",          "ПлатежнаяСсылка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ИнвентаризацияЗапасов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризацияЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияЗапасов_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_Комплектация_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Комплектация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СборкаЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Комплектация_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "",                          "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "",                          "Количество", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "",                          "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаЗапасов", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КомплектацияЗапасов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КомплектацияЗапасов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КомплектацияЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КомплектацияЗапасов_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",        "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "",                   "Количество", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "",                   "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаПоступления_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                 "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                     "ВидОперации", , "Перечисление_ВидыОперацийКорректировки");
	ДобавитьПКС(СвойстваШапки, "",                                "ВосстановитьНДС", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",          "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",                 "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "Договор",                         "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",               "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйДокументПоступления", "ИсправляемыйДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",              "Налогообложение", , "Перечисление_НалогообложениеНДСПродавца");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",         "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОтражатьВУчете",                  "ОтражатьВУчете");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                   "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",              "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_КорректировкаРеализации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",                  "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                 "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                    "ВидОперации", , "Перечисление_ВидыОперацийКорректировки");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",               "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",                "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "Договор",                        "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",              "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйДокументРеализации", "ИсправляемыйДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                     "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",               "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОтражатьВУчете",                 "ОтражатьВУчете");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                  "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",             "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",               "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТДДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхожденияДоИзменения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕстьВДокументеПоступленияРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СодержаниеДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСДоКорректировки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоИзменения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаДоКорректировки", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_МаркировкаТоваровГИСМ_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_МаркировкаТоваровГИСМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_МаркировкаТоваровГИСМ_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Склад",       "Склад", , "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1, "Справочник_НоменклатурныеГруппы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СчетЗатрат", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_НачисленияПоКредитамИЗаймам_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.НачисленияПоКредитамИЗаймам;
	ПравилоКонвертации.ОбъектФормата     = "Документ.НачислениеКредитовДепозитов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Начисления");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Дата", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрочностьКредитаЗайма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипСуммыГрафика", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОперацияПоПлатежнымКартам;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",           "ВидОперации", , "Перечисление_ВидыОперацийЭквайринга");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежнойКарты",   "НомерКарты");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",          "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                      "Эквайрер", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦен",             "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "Инвентаризация", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомиссионера;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "",                                         "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",                                "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                                     "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                            "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "",                                         "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомиссионногоВознагражд");
	ДобавитьПКС(СвойстваШапки, "",                                         "СтавкаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                                         "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УдержатьКомиссионноеВознаграждение",       "УдержатьКомиссионноеВознаграждение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВозвратыПокупателей");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРеализации", 1, "Документ_ОтчетКомиссионера_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтрагентыВозврата");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактура", 1, "Документ_СчетФактураВыданный_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Покупатели");
	ДобавитьПКС(СвойстваТЧ, "", "ВыставленСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСФ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактура", 1, "Документ_СчетФактураВыданный_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "КлючСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПередачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПередачи", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомиссионераОСписанииВозвр_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомиссионераОСписанииВозвр_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомиссионераОСписании;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионераОСписанииВозвр_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ДокументРеализации", 1, "Документ_РасходнаяНакладная_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",       "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",            "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",   "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                "ПокупателемВыставляетсяСчетФактураНаВозврат", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВозвратПодДеятельность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомиссионераОСписанииСпис_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомиссионераОСписанииСпис_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомиссионераОСписании;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионераОСписанииСпис_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомитенту_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомитенту;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "",                                         "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",                                "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                                     "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",                            "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "Перечисление_СпособыРасчетаКомиссионногоВознагражд");
	ДобавитьПКС(СвойстваШапки, "",                                         "СтавкаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                                         "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УдержатьКомиссионноеВознаграждение",       "УдержатьКомиссионноеВознаграждение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОПереработке_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОПереработке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОПереработке;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетДавальцу";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОПереработке_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",            "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",          "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",               "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "МатериалыЗаказчика");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОПереработкеДавальцу_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОПереработкеДавальцу_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОПереработке;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаДавальцу";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОПереработкеДавальцу_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",   "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",    "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",            "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОПереработкеМатериалы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОПереработкеМатериалы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОПереработке;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОПереработкеМатериалы_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Заказчик", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",             "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "КассаККМ", 1, "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статья",             "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаБанковскимиКредитами");
	ДобавитьПКС(СвойстваТЧ, "", "Банк", 1, "Справочник_Банки");
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаБонуснымиБаллами");
	ДобавитьПКС(СвойстваТЧ, "", "ДисконтнаяКарта", 1, "Справочник_ДисконтныеКарты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБонусныхБаллов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыВозвратПродажи");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПродажи", 1, "Документ_ОтчетОРозничныхПродажах_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерЧекаККМПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорСПринципалом", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажахПатент_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОРозничныхПродажахПатент_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажахПатент_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",             "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "КассаККМ", 1, "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "ПодразделениеВПроизводственныйСклад_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статья",             "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "ПодразделениеВПроизводственныйСклад_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаБанковскимиКредитами");
	ДобавитьПКС(СвойстваТЧ, "", "Банк", 1, "Справочник_Банки");
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаБонуснымиБаллами");
	ДобавитьПКС(СвойстваТЧ, "", "ДисконтнаяКарта", 1, "Справочник_ДисконтныеКарты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаБонусныхБаллов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыВозвратПродажи");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПродажи", 1, "Документ_ОтчетОРозничныхПродажах_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерЧекаККМПродажи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорСПринципалом", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Принципал", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипУслуги", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетПереработчика_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетПереработчика_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетПереработчика;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетПереработчика";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                   "ГруппаАналитическогоУчетаНоменклатуры", 1, "Справочник_НоменклатурныеГруппы_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",          "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",               "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ПодразделениеЗатрат", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Сумма",              "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "СуммаВключаетНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Материалы");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Продукция");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСВзносНаличными_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСВзносНаличными_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСВзносНаличными";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статья",                  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаКонвертации", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсЦБНаДатуКонвертации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВал", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статья",                  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетОтправитель", , "Справочник_БанковскиеСчета_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПоПлатежнымКартам_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаКомиссииДокумента",  "СуммаКомиссияБанка");
	ДобавитьПКС(СвойстваШапки, "СуммаКомиссииДокумента",  "СуммаУслуг");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетДоходов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Сотрудник", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДССлужбаДоставки_Корректировка_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПБДССлужбаДоставки_Корректировка_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДССлужбаДоставки_Корректировка_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",            "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",            "ВидОперации", 1, "Перечисление_ВидыОперацийВзаимозачет");
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "",            "КонтрагентДебитор", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "КонтрагентКредитор", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",   "КратностьДокумента");
	ДобавитьПКС(СвойстваШапки, "Курс",        "КурсДокумента");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СуммаДебиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СуммаКредиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СчетДт", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СчетКт", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПДС_НаБанковскийСчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПДС_НаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеДС;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПДС_НаБанковскийСчет_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПолучатель", "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПДС_ПереводНаДругойСчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПДС_ПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеДС;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПереводНаДругойСчет";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПолучатель", "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "",                         "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПДС_ПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеДС;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПередачаПереработчику_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПередачаПереработчику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаПереработчику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",   "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",    "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПередачаТоваровПоступление_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПередачаТоваровПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаТоваровПоступление_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "",                      "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КонтрагентВладелец",    "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",             "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                  "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",    "Налогообложение", , "Перечисление_НалогообложениеНДСПродавца");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",    "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",      "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПередачаТоваровРеализация_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПередачаТоваровРеализация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаТоваровРеализация_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",            "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "ВидЭлектронногоДокумента", "ВидЭД", , "ВидыЭД_Реализация_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",       "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",         "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "",                         "ДоверенностьКомуВыдана", 1);
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",        "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "",                         "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КонтрагентПолучатель",     "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",                "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                     "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",       "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ОтпускПроизвел", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",            "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",       "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПередачаТоваровСФПолученный_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПередачаТоваровСФПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактура;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаТоваровСФПолученный_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "ВидСчетаФактуры", , "Перечисление_ВидыОперацийСчетФактура");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ДатаИсправления", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ДатаПолучения", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура", "ИсправляемыйСчетФактура", , "Документ_ПередачаТоваровСФПолученный_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",        "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                        "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Авансы");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "УчитыватьИсправлениеИсходногоДокумента", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                         "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                        "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",           "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "Подразделение", , "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеНазначенияИспользования", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеСпособаОтраженияРасходов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокЭксплуатации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеЗапасов_НаРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                         "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                        "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",           "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "ПодразделениеЗатрат", , "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1, "Справочник_НоменклатурныеГруппы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Заказчик", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                         "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                        "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПередачи", 1, "Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеСпособаОтраженияРасходов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                         "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                        "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",           "СкладОтправитель", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "СкладПолучатель", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПереоценкаВРозницеСуммовойУчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПереоценкаВРозницеСуммовойУчет;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПереоценкаТоваровВРознице";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПереоценки", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРозницеСтарая", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПересортицаОприходованиеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦен",             "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "Инвентаризация", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПересортицаСписаниеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаСписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаСписаниеТоваров_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",       "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетДоходов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "",                      "Сотрудник", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВыручкаНТТ", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",          "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",    "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПлатежноеПоручение";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",       "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",      "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",           "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа", "ИдентификаторПлатежа");
	ДобавитьПКС(СвойстваШапки, "ИННПлательщика",       "ИННПлательщика");
	ДобавитьПКС(СвойстваШапки, "ИННПолучателя",        "ИННПолучателя");
	ДобавитьПКС(СвойстваШапки, "КодБК",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодБК",                "ПоказательКБК");
	ДобавитьПКС(СвойстваШапки, "КодВидаДохода",        "КодВидаДохода");
	ДобавитьПКС(СвойстваШапки, "КодОКАТО",             "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",           "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "КПППлательщика",       "КПППлательщика");
	ДобавитьПКС(СвойстваШапки, "КПППолучателя",        "КПППолучателя");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",    "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "Оплачено",             "Оплачено");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",   "Очередность");
	ДобавитьПКС(СвойстваШапки, "",                     "ПеречислениеВБюджет", 1);
	ДобавитьПКС(СвойстваШапки, "ПоказательДаты",       "ПоказательДаты", 1);
	ДобавитьПКС(СвойстваШапки, "ПоказательНомера",     "ПоказательНомера");
	ДобавитьПКС(СвойстваШапки, "ПоказательОснования",  "ПоказательОснования");
	ДобавитьПКС(СвойстваШапки, "ПоказательПериода",    "ПоказательПериода");
	ДобавитьПКС(СвойстваШапки, "ПоказательТипа",       "ПоказательТипа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",            "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "СтатусСоставителя",    "СтатусСоставителя");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",       "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",             "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",      "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ТекстПлательщика",     "ТекстПлательщика");
	ДобавитьПКС(СвойстваШапки, "ТекстПолучателя",      "ТекстПолучателя");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеСырьяОтДавальца_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеСырьяОтДавальца";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                 "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",               "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                    "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПриходнаяНакладная_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПриходнаяНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПриходнаяНакладная_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                 "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "Заказ", 1, "Документ_СчетНаОплатуПоставщика_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",               "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                    "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",      "Налогообложение", , "Перечисление_НалогообложениеНДСПродавца");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаДопРасходов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтоимостьТоваров", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1, "Справочник_НоменклатурныеГруппы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПодразделениеЗатрат", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЭтоДопРасходы", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_Производство_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Производство_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СборкаЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Производство_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации", "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "ПодразделениеЗатрат", 1, "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "Склад", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВозвратныеОтходы");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1, "Справочник_НоменклатурныеГруппы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Материалы");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1, "Справочник_НоменклатурныеГруппы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Продукция", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Продукция");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1, "Справочник_НоменклатурныеГруппы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СпецификацияНоменклатуры", 1, "Справочник_СпецификацииНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПроизводствоПеремещениеОтходов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПроизводствоПеремещениеОтходов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СборкаЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПроизводствоПеремещениеОтходов_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СкладОтправитель", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СкладПолучатель", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПроизводствоПеремещениеПродукции_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПроизводствоПеремещениеПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СборкаЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПроизводствоПеремещениеПродукции_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "",            "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СкладОтправитель", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СкладПолучатель", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПрочиеРасходы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПрочиеРасходы;
	ПравилоКонвертации.ОбъектФормата     = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПрочиеРасходы_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",            "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",            "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "",            "КонтрагентДебитор", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "КонтрагентКредитор", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",            "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",            "СуммаДебиторскойЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СуммаКредиторскойЗадолженности", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДебиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КредиторскаяЗадолженность");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РаспределениеЗатрат_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РаспределениеЗатрат_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РаспределениеЗатрат;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РаспределениеЗатрат_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ГруппаАналитическогоУчетаНоменклатуры", 1, "Справочник_НоменклатурныеГруппы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РасходнаяНакладная_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РасходнаяНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РасходнаяНакладная_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",            "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",           "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                         "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "ВидЭлектронногоДокумента", "ВидЭД", , "ВидыЭД_Реализация_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ГлавныйБухгалтер", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузоотправитель",         "Грузоотправитель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Грузополучатель",          "Грузополучатель", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",       "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",         "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "",                         "ДоверенностьКомуВыдана", 1);
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",        "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "",                         "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Заказ", 1, "Документ_СчетНаОплатуПокупателю_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",                "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                     "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",       "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "ОтпускПроизвел", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",            "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "Руководитель", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                         "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",       "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПогашениеЗадолженности");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РасходыПриИмпорте_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РасходыПриИмпорте_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходыПриИмпорте;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РасходыПриИмпорте_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",         "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",       "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "",                "КратностьДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "Курс",            "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "",                "КурсДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "",                "НомерДекларации", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",   "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйСбор",  "ТаможенныйСбор");
	ДобавитьПКС(СвойстваШапки, "ТаможенныйШтраф", "ТаможенныйШтраф");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Разделы");
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1, "Документ_ПриходнаяНакладная_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерРаздела", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПошлины", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТаможеннаяСтоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Депонент", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",       "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетРасходов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1, "Справочник_ДоговорыКонтрагентов");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "",                      "Сотрудник", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статья",                  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗаработнойПлаты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сотрудник", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗарплСотруднику_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПеречислениеЗарплСотруднику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Сотрудник", 1, "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерВедомостиНаВыплатуЗарплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "",                        "ОКАТО", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательДаты", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательКБК", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательНомера", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательОснования", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательПериода", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "ПоказательТипа", 1);
	ДобавитьПКС(СвойстваШапки, "",                        "СтатусСоставителя", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетРасходов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВидРасчетовРасширенный", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашенияЗадолженности", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетУчетаРасчетовСКонтрагентом", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                        "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "ПлатежноеПоручение", 1, "Документ_ПлатежноеПоручение_Отправка");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "Сотрудник", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДССнятиеНаличных_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СБДССнятиеНаличных_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СБДССнятиеНаличных";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Статья",                  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеЗапасов_ИзЭксплуатации(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеЗапасов_ИзЭксплуатации";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеЗапасов_ИзЭксплуатации_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Подразделение", , "Справочник_Подразделения_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПередачи", 1, "Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваровПоИнвентаризации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеЗапасов;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",  "Инвентаризация", , "Документ_ИнвентаризацияЗапасов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмеренияПрослеживаемости", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоРНПТ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрослеживаемыйТовар", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетНаОплатуПокупателю_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетНаОплатуПокупателю_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетНаОплату;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",   "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",  "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",           "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",          "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",       "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",        "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",             "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",   "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетНаОплатуПоставщика_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетНаОплатуПоставщика_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                 "Договор", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Кратность",               "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                    "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактура;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                              "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                                  "ВидСчетаФактуры", , "Перечисление_ВидыОперацийСчетФактура");
	ДобавитьПКС(СвойстваШапки, "",                                             "Выставлен", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "Дата");
	ДобавитьПКС(СвойстваШапки, "",                                             "ДатаВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаИсправляемогоКорректировочногоДокумента",  "ДатаИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсходногоДокумента",                       "ДатаИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "",                                             "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Исправление",                                  "Исправление");
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",                      "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                             "КодВидаОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                   "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                                        "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                             "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсправляемогоКорректировочногоДокумента", "НомерИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсходногоДокумента",                      "НомерИсходногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СводныйКомиссионный",                          "СводныйКомиссионный");
	ДобавитьПКС(СвойстваШапки, "",                                             "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                               "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                                             "СуммаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                                             "УчитыватьИсправлениеИсходногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Авансы");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерИсправленияИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "УчитыватьИсправлениеИсходногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПлатежноРасчетныеДокументы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокумента", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "ВидСчетаФактуры", , "Перечисление_ВидыОперацийСчетФактураПолученный");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",         "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаПолучения",           "ДатаПолучения", 1);
	ДобавитьПКС(СвойстваШапки, "Договор",                 "Договор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "Исправление",             "Исправление");
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура", "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",        "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                        "СпособВыставления", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                        "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Авансы");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	ДобавитьПКС(СвойстваТЧ, "", "УчитыватьИсправлениеИсходногоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "СчетаФактурыВыданныеПокупателям");
	ДобавитьПКС(СвойстваТЧ, "", "Покупатель", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Субкомиссионер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СчетФактураВыданный", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата");
	ДобавитьПКС(СвойстваШапки, "", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "", "Номер");
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "", "ТипЦен", 1, "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УстановкаЦенНоменклатурыРегистр_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "ТипЦен", 1, "Справочник_ТипыЦен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМ_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЧекККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЧекККМ;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",        "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККМ",   "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаФР");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "Отменен");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМВозврат_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЧекККМВозврат_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЧекККМВозврат;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЧекККМВозврат_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",        "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККМ",   "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаФР");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "Отменен");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_ПодразделениеВПроизводственныйСклад_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПодразделениеВПроизводственныйСклад_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПодразделениеВПроизводственныйСклад_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "МОЛ",                   "МОЛ", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипСтруктурнойЕдиницы", "ТипСклада", , "ТипыСкладов");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкРасчетов",          "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидСчета", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",              "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "ВыводитьМесяцПрописью", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БонусныеПрограммы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БонусныеПрограммы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БонусныеПрограммы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПрограммыЛояльности";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                             "ВалютаКонвертацииБонусов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",                             "КурсКонвертацииБонусовВВалюту", 1);
	ДобавитьПКС(СвойстваШапки, "МаксимальныйПроцентОплаты",    "МаксимальныйПроцентОплатыБонусами");
	ДобавитьПКС(СвойстваШапки, "Наименование",                 "Наименование");
	ДобавитьПКС(СвойстваШапки, "НеНачислятьПриОплатеБонусами", "НеНачислятьБаллыПриОплатеБонусами");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюта_ИзСтруктуры(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Валюта_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Валюты";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДисконтныеКарты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДисконтныеКарты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДисконтныеКарты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДисконтныеКарты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",              "ВидДисконтнойКарты", 1);
	ДобавитьПКС(СвойстваШапки, "ВладелецКарты", "ВладелецКарты", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "НомерКарты", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ПрограммаЛояльности", 1, "Справочник_БонусныеПрограммы_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "ВидДоговора", 1, "Перечисление_ВидыДоговоров");
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "РасчетыВУсловныхЕдиницах", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаРасчетов",           "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",              "ВидДоговора", , "Перечисление_ВидыДоговоров");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",                   "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Владелец",                 "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаДоговора",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокОплатыПокупателя",     "СрокКонтроляОплатыВДнях");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокумента", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВыдачи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КемВыдан", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КодПодразделения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Представление", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СрокДействия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДополнительныеРеквизиты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДополнительныеРеквизиты";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений", , "Справочник_ДополнительныеРеквизиты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЗначенияДопРеквизитов_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЗначенияДопРеквизитов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЗначенияДополнительныхРеквизитов";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",          "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_ДополнительныеРеквизиты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ИнформативныеОстатки_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ИнформативныеОстатки_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ОстаткиТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ИнформативныеОстатки";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ИнформативныеОстатки_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_Склады_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоНаСкладе", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КассыККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.КассыККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "СерийныйНомер",      "РегистрационныйНомер");
	ДобавитьПКС(СвойстваШапки, "",                   "СистемаНалогообложения", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КатегорииНоменклатурыВН_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",               "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатурыПоУмолчанию", "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КодыТоваровSKU_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КодыТоваровSKU_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.КодыТоваровSKU;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "SKU",              "Штрихкод");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",     "", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПоУмолчанию",      "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента",                 "ЮридическоеФизическоеЛицо", , "Перечисление_ВидыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "ГоловнойКонтрагент",             "ГоловнойКонтрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДокументУдостоверяющийЛичность", "ДокументУдЛичность");
	ДобавитьПКС(СвойстваШапки, "ИНН",                            "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                      "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "КПП",                            "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                   "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",             "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "",                               "ОбособленноеПодразделение", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "ОсновнойДоговор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",           "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "Родитель",                       "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",              "СтранаРегистрации", , "Справочник_СтраныМира");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЛицензииПоставщиковАлко_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЛицензииПоставщиковАлко_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЛицензии",   "ВидЛицензии", , "Перечисление_ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "Владелец",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "КемВыдана",     "КемВыдана");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "Наименование");
	ДобавитьПКС(СвойстваШапки, "",              "Ссылка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НаправленияДеятельностиНГ_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НаправленияДеятельностиНГ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НаправленияДеятельности;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",                      "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                                   "Артикул");
	ДобавитьПКС(СвойстваШапки, "Весовой",                                   "Весовой");
	ДобавитьПКС(СвойстваШапки, "",                                          "ВидАлкогольнойПродукции", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВН_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВидПродукцииИС",                            "ВидПродукцииИС", 1, "Перечисление_ВидыПродукцииИС");
	ДобавитьПКС(СвойстваШапки, "",                                          "ГруппаАналитическогоУчета", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                          "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция",             "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Код",                                       "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "КодМедицинскогоИзделия",                    "КодВидаНоменклатурнойКлассификации");
	ДобавитьПКС(СвойстваШапки, "",                                          "КодТНВЭД", 1);
	ДобавитьПКС(СвойстваШапки, "КодТРУ",                                    "КодТРУ");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                               "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование",                              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                        "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "ОбъемДАЛ",                                  "ОбъемДАЛ");
	ДобавитьПКС(СвойстваШапки, "",                                          "ОсновнаяКартинка", 1, "Справочник_ФайлыНоменклатуры_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПризнакПредметаРасчета",                    "ПризнакПредметаРасчета", 1, "Перечисление_ПризнакиПредметаРасчета");
	ДобавитьПКС(СвойстваШапки, "ПроизводительИмпортерАлкогольнойПродукции", "ПроизводительИмпортер", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПрослеживаемыйТовар",                       "ПрослеживаемыйТовар");
	ДобавитьПКС(СвойстваШапки, "Родитель",                                  "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "",                                          "СистемаНалогообложения", 1);
	ДобавитьПКС(СвойстваШапки, "",                                          "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения",                       "СтранаПроисхождения", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                           "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1, "Справочник_ДополнительныеРеквизиты_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппы_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатурныеГруппы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатурныеГруппы_Группа");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НомераГТД_ИзСтруктуры_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НомераГТД_ИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НомерГТД";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтранаВвозаНеРФ", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтранаПроисхождения", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "", "ЯвляетсяРНПТ", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                                              "AdditionalInfo");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПоУмолчанию",                     "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИНН",                                           "ИНН");
	ДобавитьПКС(СвойстваШапки, "ИностраннаяОрганизация",                        "ЯвляетсяНерезидентом");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                                    "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                                     "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                           "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование",                                  "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПлательщикаПриПеречисленииНалогов", "НаименованиеПлательщикаПриПеречисленииНалогов");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                            "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                                          "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                                       "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",                       "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",                       "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо",                                "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",                     "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Патенты_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Патенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Патенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Патенты";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",                          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                        "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",                     "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "КБК",                               "КБК");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОрганаПолучателя",     "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодПоОКТМО",                        "КодПоОКТМО");
	ДобавитьПКС(СвойстваШапки, "Наименование",                      "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерПатента",                      "НомерПатента");
	ДобавитьПКС(СвойстваШапки, "ПотенциальноВозможныйГодовойДоход", "ПотенциальноВозможныйГодовойДоход");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Подразделения";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Организация",  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_Подразделения_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПозицияПрайсЛиста_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ПозицияПрайсЛиста_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПозицияПрайсЛиста";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ПозицияПрайсЛиста_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "SKU", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ПрайсЛист", 1, "Справочник_ПрайсЛист_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Серия", 1, "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "", "Упаковка", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "", "Цена", 1);
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПрайсЛист_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ПрайсЛист_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПрайсЛист";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ПрайсЛист_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "ТипЦены", 1, "Справочник_ТипыЦен_ИзСтруктуры_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "АдресСтрокой", 1);
	ДобавитьПКС(СвойстваШапки, "МОЛ",                   "МОЛ", , "Справочник_ФизическиеЛица_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "РозничныйВидЦен",       "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "ТипСтруктурнойЕдиницы", "ТипСклада", , "ТипыСкладов");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостояниеЗаказа_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостояниеЗаказа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СостоянияЗаказовПокупателей;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеЗаказа";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостояниеЗаказа_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "СостояниеЗаказаСтрокой");
	ДобавитьПКС(СвойстваШапки, "",             "Ссылка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостояниеОплатыЗаказа_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостояниеОплатыЗаказа_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ФактОплатыЗаказов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеОплатыЗаказа";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Заказ", 1, "Документ_ЗаказПокупателя_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОплаты", 1, "СтатусОплаты");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостоянияЗаказовПокупателей_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостоянияЗаказовПокупателей_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеЗаказа";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостоянияЗаказовПокупателей_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Заказ", 1, "Документ_ЗаказПокупателя_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеЗаказа", 1);
	ДобавитьПКС(СвойстваШапки, "", "СостояниеЗаказаСтрокой", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СостоянияЭД_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СостоянияЭД_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.СостоянияПоОбъектамУчетаЭДО;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СостояниеЭлектронногоДокумента";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ОснованиеЭлектронногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОбменаЭДНаНашейСтороне", 1);
	ДобавитьПКС(СвойстваШапки, "", "СостояниеОбменаЭДНаСторонеКонтрагента");
	ДобавитьПКС(СвойстваШапки, "", "СостояниеЭлектронногоДокумента", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Спецификации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",                "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Код",                     "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "",                        "Количество", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "ХарактеристикаПродукции", "Характеристика", , "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ТипыЦен_ИзСтруктуры_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ТипыЦен_ИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ТипыЦен";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаЦены", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФайлыНоменклатуры_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФайлыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Файлы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФайлыНоменклатуры_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецФайла", "ВладелецФайла", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "Имя");
	ДобавитьПКС(СвойстваШапки, "Описание",      "Описание");
	ДобавитьПКС(СвойстваШапки, "Расширение",    "Расширение");
	ДобавитьПКС(СвойстваШапки, "",              "ХранимыйФайл", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФайлыХарактеристикиНоменклатур_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФайлыХарактеристикиНоменклатур_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ХарактеристикиНоменклатурыПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Файлы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФайлыХарактеристикиНоменклатур_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецФайла", "ВладелецФайла", , "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "Имя");
	ДобавитьПКС(СвойстваШапки, "Описание",      "Описание");
	ДобавитьПКС(СвойстваШапки, "Расширение",    "Расширение");
	ДобавитьПКС(СвойстваШапки, "",              "ХранимыйФайл", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",      "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "",                  "Имя", 1);
	ДобавитьПКС(СвойстваШапки, "ИНН",               "ИНН");
	ДобавитьПКС(СвойстваШапки, "Код",               "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "УточнениеНаименования");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "ФИО");
	ДобавитьПКС(СвойстваШапки, "",                  "Отчество", 1);
	ДобавитьПКС(СвойстваШапки, "Пол",               "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",          "Группа", , "Справочник_ФизическиеЛицаГруппа");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР", "СтраховойНомерПФР");
	ДобавитьПКС(СвойстваШапки, "",                  "Фамилия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Гражданство");
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Страна", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДанныеФИО");
	ДобавитьПКС(СвойстваТЧ, "", "Имя", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Отчество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Фамилия", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛицаИзСтруктуры_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛицаИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "УточнениеНаименования", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФИО", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "SKUКонтрагента", 1, "Справочник_SKUКонтрагента_ИзСтруктуры_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыУпаковокТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.МаркировкаУпаковки";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаУпаковки",      "ДатаУпаковки");
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "Штрихкод");
	ДобавитьПКС(СвойстваШапки, "Количество",        "Количество");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Серия",             "Серия", 1);
	ДобавитьПКС(СвойстваШапки, "ТипУпаковки",       "ТипУпаковки", , "ТипыУпаковок");
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "ТипШтрихкода", , "ТипыШтрихкодов");
	ДобавитьПКС(СвойстваШапки, "Упаковка",          "Упаковка", 1);
	ДобавитьПКС(СвойстваШапки, "Характеристика",    "Характеристика", , "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ВложенныеТовары");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры


#КонецОбласти
#Область Получение
Процедура ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВнесениеДСВКассуККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВнесениеДСВКассуККМ";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнесениеНаличных_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровОтПокупателя";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТовараПоставщику_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыемкаДСИзКассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыемкаДСИзКассыККМ";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВыемкаДСИзКассыККМ_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыемкаНаличных_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказНаПеремещение_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказНаПеремещение_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказНаПеремещение";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказНаПеремещение_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказПокупателя_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПокупателя_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказКлиента";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаказПокупателя_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПокупателя_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаказПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаказПоставщику";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_КорректировкаПоступленияТоваров_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаПоступленияТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.КорректировкаПоступленияТоваров";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_НачислениеСписаниеБонусныхБаллов_Прием(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_НачислениеСписаниеБонусныхБаллов_Прием";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.НачислениеСписаниеБонусныхБаллов";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НачислениеСписаниеБонусныхБаллов_Прием");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОперацияПоПлатежнойКарте_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОперацияПоПлатежнойКарте";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОприходованиеЗапасов_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеЗапасов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОприходованиеТоваров";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеЗапасов_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиБезналичныхДенежныхСредств_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиБезналичныхДенежныхСредств";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиБезналичныхДС_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиНаличныхДенежныхСредств_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиНаличныхДенежныхСредств";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНаличныхДенежныхСредств_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетовСПокупателямиАвансы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиРасчетовСПокупателямиАвансы";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетовСПокупателямиДолги_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетовСПокупателямиДолги_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиРасчетовСПокупателямиДолги";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетовСПокупателямиДолги_Получ");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиРасчетовСПоставщикамиДолги_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиРасчетовСПоставщикамиДолги";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиСобственныхТМЦ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиСобственныхТМЦ";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиСобственныхТМЦ_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОстаткиТоваровПринятыхНаКомиссию_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОстаткиТоваровПринятыхНаКомиссию";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетКомитенту";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажах_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСВзносНаличными_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСВзносНаличными_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСВзносНаличными";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСВзносНаличными_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСКонвертацияВалюты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПереводНаДругойСчет";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПереводНаДругойСчет_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПоПлатежнымКартам";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочееПоступление";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСПрочиеДоходы";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыСКонтрагентами";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПБДСРасчетыССотрудниками";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПеремещениеТоваров";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеЗапасов_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПересчетТоваров_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПересчетТоваров";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПокупкаВалюты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПокупкаВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОКонвертацияВалюты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПолучениеНаличныхВБанке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочееПоступление";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочиеДоходы";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыСКонтрагентами";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРасчетыССотрудниками";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРозничнаяВыручка";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПлатежноеПоручение_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПлатежноеПоручение";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручение_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ПриходнаяНакладная_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходнаяНакладная_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриходнаяНакладная_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РасходДСПланНаРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходДСПланНаРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РасходДСПланНаРасчетыСКонтрагентами_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РасходДСПланПрочее_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходДСПланПрочее_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаявкаНаРасходДСПрочее";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РасходнаяНакладная_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходнаяНакладная_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияТоваровУслуг";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РасходнаяНакладная_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОВыплатаЗарплаты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОКонвертацияВалюты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОНаБанковскийСчет";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочаяВыдача";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочийРасход";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыСКонтрагентами";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОРасчетыССотрудниками";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПереводНаДругойСчет";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлаты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗарплатыСотруднику_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПеречислениеЗарплатыСотруднику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗарплСотруднику_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПлатежиВБюджет";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочееСписание";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСПрочиеРасходы";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыСКонтрагентами";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыССотрудниками";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СБДССнятиеНаличных_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДССнятиеНаличных_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДССнятиеНаличных";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДССнятиеНаличных_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СборкаТоваров";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КомплектацияЗапасов_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СписаниеЗапасов_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеЗапасов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеЗапасов";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетФактураВыданный";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетФактураПолученный";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УстановкаЦенНоменклатуры";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЧекККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЧекККМ";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЧекККМ_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМ_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМВозврат_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_АлкогольнаяПродукцияЕГАИС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_АлкогольнаяПродукцияЕГАИС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.АлкогольнаяПродукцияЕГАИС";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторАлкогольнойПродукцииЕГАИС");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыДокументовФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыДокументовФизическихЛиц";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыДокументовФизическихЛиц");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ГруппаНоменклатуры_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ГруппаНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДисконтныеКарты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДисконтныеКарты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДисконтныеКарты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДисконтныеКарты_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДокументыФизическихЛиц";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Кассы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Кассы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Кассы";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Кассы_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КассыККМ";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КатегорииНоменклатурыВН_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КатегорииНоменклатурыВН_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыНоменклатуры";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КатегорииНоменклатурыВН_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КатегорииНоменклатурыВН_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КлассификаторЕдиницИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_КодТНВЭД_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КодТНВЭД_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КодТНВЭД";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторТНВЭД_ЭлементСправочника");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлко_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЛицензииПоставщиковАлко_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЛицензииПоставщиковАлко_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НаправленияДеятельностиНГ_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НаправленияДеятельностиНГ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НаправленияДеятельностиНГ_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НаправленияДеятельностиНГ_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_НоменклатурныеГруппы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатурныеГруппы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_НоменклатурныеГруппы_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппы_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ОрганизацииЕГАИС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ОрганизацииЕГАИС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ОрганизацииЕГАИС";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторОрганизацийЕГАИС_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Патенты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Патенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Патенты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Патенты_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПодарочныеСертификаты_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПодарочныеСертификаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыПодарочныхСертификатов";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПодарочныеСертификаты_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Подразделения_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Подразделения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Подразделения";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПрограммыЛояльности_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПрограммыЛояльности_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПрограммыЛояльности";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БонусныеПрограммы_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ПунктыВыдачиЗаказов_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПунктыВыдачиЗаказов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПунктыВыдачиЗаказов";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ПунктыВыдачиЗаказов_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПунктыВыдачиЗаказов");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СерииНоменклатуры_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СерииНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СерииНоменклатуры";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерииНоменклатуры");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СкидкиНаценки_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкидкиНаценки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СкидкиНаценки";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_АвтоматическиеСкидки_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СпецификацииНоменклатуры";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтатьиДДСГруппа_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДСГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДСГруппа";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Упаковки_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Упаковки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Упаковки_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Упаковки");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_УсловияПредоставленияСкидок_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_УсловияПредоставленияСкидок_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.УсловияПредоставленияСкидокНаценок";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_УсловияПредоставленияСкидок_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Файлы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Файлы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Файлы";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Файлы_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураПрисоединенныеФайлы_Получ");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ХарактеристикиНоменклатуры";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЦеновыеГруппы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЦеновыеГруппы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЦеновыеГруппы";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЦеновыеГруппы");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ШтрихкодыНоменклатуры";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.МаркировкаУпаковки";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыУпаковокТоваров_Получение");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЭквайринговыеТерминалы";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы_Получение");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВнесениеНаличных_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВнесениеНаличных_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВнесениеНаличных;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВнесениеДСВКассуККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВнесениеНаличных_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВнесениеНаличных_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",              "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Организация",           "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТовараПоставщику_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТовараПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТовараПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТовараПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",           "ВидОперации");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",               "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Заказ",                 "Заказ", , "Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",    "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "НДСВключатьВСтоимость", "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",      "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "Товары");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",     "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",             "", , "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",  "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипНоменклатурыЗапас", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",       "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости", "");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПрослеживаемости", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                       "", 1, "Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",        "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",        "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровОтПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                 "Договор", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комм");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",               "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                    "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "Склад", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "");
	ДобавитьПКС(СвойстваТЧ, "Всего",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1, "Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости", "");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПрослеживаемости", "", 1);
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                       "", 1, "Справочник_НомераГТДИзСтроки_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",        "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВыемкаНаличных_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВыемкаНаличных_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыемкаНаличных;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыемкаДСИзКассыККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВыемкаНаличных_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВыемкаНаличных_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",              "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Организация",           "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказНаПеремещение_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказНаПеремещение_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказНаПеремещение;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказНаПеремещение";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказНаПеремещение_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказНаПеремещение_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                         "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПеремещения",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                        "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "СкладПолучатель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв",     "СкладОтправитель", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПокупателя_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПокупателя_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЗаказПокупателя";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                         "AdditionalInfo");
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",            "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",                   "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",                  "Договор", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",                "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                     "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПунктВыдачиЗаказа",        "ПунктВыдачи", , "Справочник_ПунктыВыдачиЗаказов");
	ДобавитьПКС(СвойстваШапки, "СпособДоставки",           "СпособДоставки", , "СпособыДоставки");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв", "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",           "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "Товары");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",     "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "Номенклатура", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",            "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",             "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипНоменклатурыЗапас", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",       "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                 "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры", "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаказПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",        "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                   "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаПоступления",        "ОжидаемаяДатаПоступления");
	ДобавитьПКС(СвойстваШапки, "Договор",                "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Контрагент",             "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                  "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",            "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",               "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",     "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",       "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",         "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходДСПлан;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаявкаНаРасходДСПрочее";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатусУтвержденияПлатежа",      "Статус", , "Перечисление_СтатусыЗаявокНаРасходованиеДС");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипДенежныхСредств",            "УтвержденнаяФормаОплаты", , "Перечисление_ТипыОплатыЗаявкиНаРасход");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходДСПлан;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатусУтвержденияПлатежа",      "Статус", , "Перечисление_СтатусыЗаявокНаРасходованиеДС");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма");
	ДобавитьПКС(СвойстваШапки, "ТипДенежныхСредств",            "УтвержденнаяФормаОплаты", , "Перечисление_ТипыОплатыЗаявкиНаРасход");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КомплектацияЗапасов_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КомплектацияЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КомплектацияЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КомплектацияЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КомплектацияЗапасов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",        "ВидОперации", , "Перечисление_ВидыОперацийКомплектацияЗапасов");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",   "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Количество",         "Количество");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",       "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",           "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Характеристика",     "Характеристика", , "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "");
	ДобавитьПКС(СвойстваТЧ, "ДоляСтоимости",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПрослеживаемости", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                       "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",        "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",        "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатурыЗапасы",  "");
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_КорректировкаПоступления_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата                = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_КорректировкаПоступления_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаПоступления_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                 "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                     "ВидОперации", , "Перечисление_ВидыОперацийКорректировки");
	ДобавитьПКС(СвойстваШапки, "Дата",                            "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",          "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",                 "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "Договор",                         "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",               "ДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйДокументПоступления", "ИсправляемыйДокументПоступления", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",              "Налогообложение", , "Перечисление_НалогообложениеНДСПродавца");
	ДобавитьПКС(СвойстваШапки, "Номер",                           "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",         "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",                     "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОтражатьВУчете",                  "ОтражатьВУчете");
	ДобавитьПКС(СвойстваШапки, "Проведен",                        "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",              "Склад", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                           "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",          "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "ЕстьВДокументеПоступления", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",              "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",                  "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТДДоИзменения",       "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСДоИзменения",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",            "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Расходы",                          "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоДоКорректировки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",              "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СодержаниеДоИзменения",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДСДоИзменения",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоИзменения",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДоКорректировки",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоИзменения",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСДоКорректировки",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоИзменения",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаДоКорректировки",       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости",         "");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",                "");
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатурыДоКорректировки", "");
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_НачислениеСписаниеБонусныхБаллов_Прием(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_НачислениеСписаниеБонусныхБаллов_Прием";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.НачислениеСписаниеБонусныхБаллов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.НачислениеСписаниеБонусныхБаллов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_НачислениеСписаниеБонусныхБаллов_Прием_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БонуснаяПрограмма", "ПрограммаЛояльности", , "Справочник_БонусныеПрограммы_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",              "Дата");
	ДобавитьПКС(СвойстваШапки, "Номер",             "Номер");
	ДобавитьПКС(СвойстваШапки, "Проведен",          "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "НачисленияБонусов", "НачисленияБонусов");
	ДобавитьПКС(СвойстваТЧ, "БонуснаяКарта",  "ДисконтнаяКарта", 1, "Справочник_ДисконтныеКарты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ДатаНачисления", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",     "СуммаБонусныхБаллов", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОперацияПоПлатежнойКарте_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОперацияПоПлатежнымКартам;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",    "", 1, "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежнойКарты",   "НомерКарты");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЭквайринговыйТерминал", "ЭквайринговыйТерминал", , "Справочник_ЭквайринговыеТерминалы_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Документ",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Кратность",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Курс",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",  "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОприходованиеЗапасов_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОприходованиеЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОприходованиеЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОприходованиеЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеЗапасов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЦен",             "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",  "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",      "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",    "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры", "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиБезналичныхДС_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиБезналичныхДС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводНачальныхОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДенежныеСредства", "");
	ДобавитьПКС(СвойстваТЧ, "БанковскийСчетКасса",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВалютаДенежныхСредств", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВал",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,РазделУчета");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиНаличныхДенежныхСредств_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводНачальныхОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДенежныеСредства", "");
	ДобавитьПКС(СвойстваТЧ, "БанковскийСчетКасса",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВалютаДенежныхСредств", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВал",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,РазделУчета");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводНачальныхОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автоформирование",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПокупателями", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",    "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПризнакАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВал",      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,РазделУчета");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиРасчетовСПокупателямиДолги_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводНачальныхОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автоформирование",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПокупателями", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",    "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент", "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВал",   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,РазделУчета");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводНачальныхОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автоформирование",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПоставщиками", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент",    "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПризнакАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВал",      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,РазделУчета");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводНачальныхОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автоформирование",      "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасчетыСПоставщиками", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",    "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Контрагент", "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВал",   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,РазделУчета");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиСобственныхТМЦ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводНачальныхОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",   "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтруктурнаяЕдиница", "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБезНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗапасыВРазрезеГТД",        "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости", "");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПрослеживаемости", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                       "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",        "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,РазделУчета");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводНачальныхОстатков;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",           "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗапасыПринятые", "");
	ДобавитьПКС(СвойстваТЧ, "ВидОперации",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Договор",            "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",   "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Контрагент",         "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Партия",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтруктурнаяЕдиница", "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Организация,РазделУчета");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетКомитенту_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетКомитенту;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",                                  "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",                                "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                                     "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "СпособыРасчетаКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",                         "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаДокументаСУчетомВознаграждения",      "", 1);
	ДобавитьПКС(СвойстваШапки, "УдержатьКомиссионноеВознаграждение",       "УдержатьКомиссионноеВознаграждение");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",                    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "ДатаРеализации",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",       "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",           "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",               "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "Партия",                 "", 1, "Справочник_ПартииНоменклатуры_ИзСтр_Получение");
	ДобавитьПКС(СвойстваТЧ, "Покупатель",             "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",    "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаВознаграждения",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДСВознаграждения", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПоступления",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",         "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                   "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаПоступления",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры", "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ОРП";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",             "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",           "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Патент",             "Патент", , "Справочник_Патенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",      "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",             "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",   "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "БезналичнаяОплата",        "");
	ДобавитьПКС(СвойстваТЧ, "БонуснаяКарта",         "", 1, "Справочник_ДисконтныеКарты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВидПлатежнойКарты",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерПлатежнойКарты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСертификата",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Патент",                "", 1, "Справочник_Патенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат",  "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБонусов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭквайринговыйТерминал", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "");
	ДобавитьПКС(СвойстваТЧ, "Всего",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1, "Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "Патент",              "", 1, "Справочник_Патенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости", "");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПрослеживаемости", "", 1);
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                       "", 1, "Справочник_НомераГТДИзСтроки_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",        "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСВзносНаличными_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСВзносНаличными_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСВзносНаличными";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Статья",                  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Статья",                  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетОтправитель", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаКомиссииДокумента",  "СуммаКомиссияБанка");
	ДобавитьПКС(СвойстваШапки, "СуммаКомиссииДокумента",  "СуммаУслуг");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчета_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Документ",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Кратность",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Курс",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Патент",        "", 1, "Справочник_Патенты_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипСуммы",      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеНаСчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "ВидРасчетов", , "ВидыОперацийПБДС_РасчетыССотрудниками");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подотчетник",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ПодразделениеЗатраты",    "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Кратность",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Курс",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипСуммы",      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПеремещениеЗапасов_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПеремещениеЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПеремещениеЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                         "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                        "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",           "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "Партия",              "", 1, "Справочник_ПартииНоменклатуры_ИзСтр_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПрослеживаемости", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                       "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",        "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",        "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПересчетТоваров_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПересчетТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ИнвентаризацияЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "Товары");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "КоличествоФакт");
	ДобавитьПКС(СвойстваТЧ, "КоличествоУчет",   "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "Характеристика");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",       "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Патент",                "", 1, "Справочник_Патенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Документ",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Кратность",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Курс",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПризнакАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипСуммы",      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",           "ВидРасчетов", 1, "ВидыОперацийПКО_РасчетыССотрудниками");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подотчетник",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеВКассу;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",          "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПлатежноеПоручение_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПлатежноеПоручение_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПлатежноеПоручение";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",       "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",      "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидПлатежа",           "ВидПлатежа");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПлатежа", "ИдентификаторПлатежа");
	ДобавитьПКС(СвойстваШапки, "ИННПлательщика",       "ИННПлательщика");
	ДобавитьПКС(СвойстваШапки, "ИННПолучателя",        "ИННПолучателя");
	ДобавитьПКС(СвойстваШапки, "КодБК",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодБК",                "ПоказательКБК");
	ДобавитьПКС(СвойстваШапки, "КодВидаДохода",        "КодВидаДохода");
	ДобавитьПКС(СвойстваШапки, "КодОКАТО",             "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",           "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КПППлательщика",       "КПППлательщика");
	ДобавитьПКС(СвойстваШапки, "КПППолучателя",        "КПППолучателя");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",    "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "Оплачено",             "Оплачено");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОчередностьПлатежа",   "Очередность");
	ДобавитьПКС(СвойстваШапки, "",                     "ПеречислениеВБюджет", 1);
	ДобавитьПКС(СвойстваШапки, "ПоказательДаты",       "ПоказательДаты");
	ДобавитьПКС(СвойстваШапки, "ПоказательНомера",     "ПоказательНомера");
	ДобавитьПКС(СвойстваШапки, "ПоказательОснования",  "ПоказательОснования");
	ДобавитьПКС(СвойстваШапки, "ПоказательПериода",    "ПоказательПериода");
	ДобавитьПКС(СвойстваШапки, "ПоказательТипа",       "ПоказательТипа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",            "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатусСоставителя",    "СтатусСоставителя");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",       "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДС",             "СуммаНДС");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",      "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ТекстПлательщика",     "ТекстПлательщика");
	ДобавитьПКС(СвойстваШапки, "ТекстПолучателя",      "ТекстПолучателя");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПриходнаяНакладная_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПриходнаяНакладная_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПриходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПриходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                 "Договор", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Кратность",               "КратностьВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Курс",                    "КурсВзаиморасчетов");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",      "Склад", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",        "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "");
	ДобавитьПКС(СвойстваТЧ, "Всего",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки", "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1, "Справочник_НомераГТДИзСтроки_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",               "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Расходы",                  "");
	ДобавитьПКС(СвойстваТЧ, "Всего",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Содержание",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости", "");
	ДобавитьПКС(СвойстваТЧ, "ИдентификаторСтроки",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПрослеживаемости", "", 1);
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                       "", 1, "Справочник_НомераГТДИзСтроки_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",        "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РасходнаяНакладная_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РасходнаяНакладная_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходнаяНакладная;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РасходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РасходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",       "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",           "ВидОперации", , "Перечисление_ВидыОперацийРасходнаяНакладная_Получ");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",               "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Заказ",                 "Заказ", , "Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС",    "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "НДСВключатьВСтоимость", "", 1);
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС",      "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",     "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",         "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",             "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",  "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипНоменклатурыЗапас", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",       "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",                 "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПрослеживаемости", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                       "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",        "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",        "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОНаБанковскийСчет_Инкассация_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетОрганизации",       "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочийРасход_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Документ",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Кратность",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Курс",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПризнакАванса", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипСуммы",      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходИзКассы;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",           "ВидРасчетов", , "ВидыОперацийРКО_РасчетыССотрудниками");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Подотчетник",           "", 1);
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",       "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Статья",                  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",       "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПеречислениеЗарплСотруднику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",       "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидНалога",               "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",       "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",       "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",       "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",       "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СчетКонтрагента",         "БанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "Договор",       "", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваТЧ, "Документ",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "Кратность",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "Курс",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаПлатежа",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаРасчетов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СчетНаОплату",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "ТипСуммы",      "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "ВидРасчетов", , "ВидыОперацийСБДС_РасчетыССотрудниками");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",       "ПлатежноеПоручение", , "Документ_ПлатежноеПоручение_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Подотчетник",             "", 1);
	ДобавитьПКС(СвойстваШапки, "Подразделение",           "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Статья",                  "", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СБДССнятиеНаличных_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДССнятиеНаличных_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходСоСчета;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДССнятиеНаличных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",          "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств",   "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВыписки");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НазначениеПлатежа",       "НазначениеПлатежа");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Статья",                  "СтатьяДДС", , "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СписаниеЗапасов_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеЗапасов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",           "", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница", "Склад", , "Справочник_Склады_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения",    "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",            "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "ПрослеживаемыйТовар", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СерииНоменклатуры",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",      "", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СведенияПрослеживаемости", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПрослеживаемости", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",               "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "РНПТ",                       "", 1, "Справочник_НомераГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтранаПроисхождения",        "", 1, "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СерииНоменклатуры",        "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Серия",      "", 1, "Справочник_СерииНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетФактураВыданный_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетФактура;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",                              "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",                                  "ВидСчетаФактуры");
	ДобавитьПКС(СвойстваШапки, "Дата",                                         "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",                              "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправляемогоКорректировочногоДокумента",  "ДатаИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                                      "Договор", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Исправление",                                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура",                      "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Получение");
	ДобавитьПКС(СвойстваШапки, "КодСпособаВыставления",                        "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                                   "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                                        "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",                             "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "НомерИсправляемогоКорректировочногоДокумента", "НомерИсправляемогоКорректировочногоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",                                  "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                                     "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                               "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",                            "СуммаНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДокументыОснования", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументОснование", "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетФактураПолученный_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",             "ВидСчетаФактуры", , "Перечисление_ВидыОперацийСчетФактураПолученный");
	ДобавитьПКС(СвойстваШапки, "Дата",                    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",         "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаПолучения",           "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "Договор",                 "Договор", 1, "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Исправление",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ИсправляемыйСчетФактура", "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Получение");
	ДобавитьПКС(СвойстваШапки, "КодСпособаВыставления",   "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",        "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",          "Сумма");
	ДобавитьПКС(СвойстваШапки, "СуммаНДСДокумента",       "СуммаНДС");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДокументыОснования", "");
	ДобавитьПКС(СвойстваТЧ, "ДатаИсходногоДокумента",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ДокументОснование",                      "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерИсходногоДокумента",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "УчитыватьИсправлениеИсходногоДокумента", "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                                   "Дата");
	ДобавитьПКС(СвойстваШапки, "ЗаписыватьНовыеЦеныПоверхУстановленных", "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                                  "Номер");
	ДобавитьПКС(СвойстваШапки, "ПоказыватьНовуюЦену",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                               "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы", "");
	ДобавитьПКС(СвойстваТЧ, "ВидЦены",          "", 1, "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЧекККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЧекККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЧекККМ";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Заказ",           "ЗаказКлиента", , "Документ_ЗаказПокупателя_Получение");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",        "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККМ",   "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаФР");
	ДобавитьПКС(СвойстваШапки, "Патент",          "Патент", , "Справочник_Патенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "Отменен");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АкцизныеМарки",            "");
	ДобавитьПКС(СвойстваТЧ, "АкцизнаяМарка",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "КодАкцизнойМарки", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "БезналичнаяОплата",        "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВидПлатежнойКарты",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерПлатежнойКарты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСертификата",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБонусов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭквайринговыйТерминал", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "БонусныеБаллыКНачислению", "");
	ДобавитьПКС(СвойстваТЧ, "ДатаНачисления",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоБонусныхБаллов", "", 1);
	ДобавитьПКС(СвойстваТЧ, "СкидкаНаценка",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",                   "");
	ДобавитьПКС(СвойстваТЧ, "Всего",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "СкидкиНаценки",            "");
	ДобавитьПКС(СвойстваТЧ, "КлючСвязи",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "СкидкаНаценка", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМВозврат_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЧекККМВозврат_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЧекККМВозврат;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ЧекККМ";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",        "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККМ",   "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаФР");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "Отменен");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЧекККМ",          "Основание", , "Документ_ЧекККМ_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АкцизныеМарки",     "");
	ДобавитьПКС(СвойстваТЧ, "АкцизнаяМарка",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "КодАкцизнойМарки", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "БезналичнаяОплата", "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "ВидПлатежнойКарты",     "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерПлатежнойКарты",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСертификата",      "", 1);
	ДобавитьПКС(СвойстваТЧ, "ПодарочныйСертификат",  "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаБонусов",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭквайринговыйТерминал", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Запасы",            "");
	ДобавитьПКС(СвойстваТЧ, "Всего",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЕдиницаИзмерения", "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "Количество",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",     "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",        "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",            "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "Характеристика",   "", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",             "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_АвтоматическиеСкидки_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_АвтоматическиеСкидки_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.АвтоматическиеСкидки;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СкидкиНаценки";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_АвтоматическиеСкидки_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БонуснаяПрограмма",     "ПрограммаЛояльности", , "Справочник_БонусныеПрограммы_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",                "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "ЗначениеСкидкиНаценки", "", 1);
	ДобавитьПКС(СвойстваШапки, "Код",                   "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОбластьПредоставления", "", 1);
	ДобавитьПКС(СвойстваШапки, "СпособПредоставления",  "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "УсловияПредоставления", "УсловияПредоставления");
	ДобавитьПКС(СвойстваТЧ, "УсловиеПредоставления", "УсловиеПредоставления", , "Справочник_УсловияПредоставленияСкидок_Получение");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                  "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкРасчетов",          "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВариантВыводаМесяца",   "", 1);
	ДобавитьПКС(СвойстваШапки, "ВидСчета",              "", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",              "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаЗакрытия",          "ДатаЗакрытия");
	ДобавитьПКС(СвойстваШапки, "ДатаОткрытия",          "ДатаОткрытия");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерИДатаРазрешения",  "НомерИДатаРазрешения");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",            "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "СуммаБезКопеек",        "ВыводитьСуммуБезКопеек");
	ДобавитьПКС(СвойстваШапки, "СчетУчета",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",   "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначения",       "ТекстНазначения");

	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета,Владелец");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БонусныеПрограммы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БонусныеПрограммы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БонусныеПрограммы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ПрограммыЛояльности";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "МаксимальныйПроцентОплаты",    "МаксимальныйПроцентОплатыБонусами");
	ДобавитьПКС(СвойстваШапки, "Наименование",                 "Наименование");
	ДобавитьПКС(СвойстваШапки, "НеНачислятьПриОплатеБонусами", "НеНачислятьБаллыПриОплатеБонусами");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыАлкогольнойПродукции_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЛицензии",  "", 1);
	ДобавитьПКС(СвойстваШапки, "Код",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Маркируемый",  "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидЛицензии,Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыДисконтныхКарт_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыДисконтныхКарт_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыДисконтныхКарт;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "ЭтоИменнаяКарта", "ЭтоИменнаяКарта", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДисконтныеКарты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДисконтныеКарты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДисконтныеКарты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДисконтныеКарты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ВладелецКарты",     "ВладелецКарты", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "КодКартыМагнитный", "НомерКарты");
	ДобавитьПКС(СвойстваШапки, "КодКартыШтрихкод",  "НомерКарты");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "НомерКарты");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаРасчетов",           "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",              "ВидДоговора", , "Перечисление_ВидыДоговоров");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",                   "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Владелец",                 "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаДоговора",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокОплатыПокупателя",     "СрокКонтроляОплатыВДнях");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,ВидДоговора,Владелец,Наименование,Организация");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,ВидДоговора,Владелец,ДатаДоговора,НомерДоговора,Организация");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентовСтруктура_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентовСтруктура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентовСтруктура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаРасчетов",           "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВидДоговора",              "ВидДоговора", , "Перечисление_ВидыДоговоров");
	ДобавитьПКС(СвойстваШапки, "ВидЦен",                   "ТипЦен", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "Владелец",                 "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаДоговора",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "РасчетыВУсловныхЕдиницах", "РасчетыВУсловныхЕдиницах");
	ДобавитьПКС(СвойстваШапки, "СрокОплатыПокупателя",     "СрокКонтроляОплатыВДнях");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,ВидДоговора,Владелец,ДатаДоговора,НомерДоговора,Организация");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,ВидДоговора,Владелец,Наименование,Организация");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1, "Справочник_ВидыДокументовФизическихЛиц");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ФизическоеЛицоОтбор", 1, "Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидДокумента,Физлицо");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Кассы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Кассы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Кассы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Кассы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Кассы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаПоУмолчанию", "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Код",               "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",      "Наименование");
	ДобавитьПКС(СвойстваШапки, "СчетУчета",         "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КассыККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КассыККМ";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДенежныхСредств", "", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Владелец",              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "", 1, "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "СерийныйНомер",         "РегистрационныйНомер");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиница",    "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетУчета",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипКассы",              "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,СтруктурнаяЕдиница");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КатегорииНоменклатурыВН_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КатегорииНоменклатурыВН_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КатегорииНоменклатурыВН_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСерииНоменклатуры", "ИспользоватьСерии");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСрокГодностиСерии", "ИспользоватьСрокГодностиСерии");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьХарактеристики",    "ИспользоватьХарактеристики");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатурыПоУмолчанию",    "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторАлкогольнойПродукцииЕГАИС(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторАлкогольнойПродукцииЕГАИС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторАлкогольнойПродукцииЕГАИС;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.АлкогольнаяПродукцияЕГАИС";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_КлассификаторАлкогольнойПродукцииЕГАИС_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидПродукции",       "ВидАлкогольнойПродукции", , "Справочник_ВидыАлкогольнойПродукции_Получение");
	ДобавитьПКС(СвойстваШапки, "Импортер",           "Импортер", , "Справочник_КлассификаторОрганизацийЕГАИС_Получение");
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Крепость",           "Крепость");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Объем",              "ОбъемДАЛ");
	ДобавитьПКС(СвойстваШапки, "Производитель",      "Производитель", , "Справочник_КлассификаторОрганизацийЕГАИС_Получение");
	ДобавитьПКС(СвойстваШапки, "ТипПродукции",       "ТипПродукции", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторОрганизацийЕГАИС_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторОрганизацийЕГАИС_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторОрганизацийЕГАИС;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ОрганизацииЕГАИС";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_КлассификаторОрганизацийЕГАИС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",                       "Адрес");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторОрганизацииТС",  "ИдентификаторОрганизацииТС");
	ДобавитьПКС(СвойстваШапки, "ИНН",                         "ИНН");
	ДобавитьПКС(СвойстваШапки, "Код",                         "Код");
	ДобавитьПКС(СвойстваШапки, "КодРегиона",                  "КодРегиона");
	ДобавитьПКС(СвойстваШапки, "КодСтраны",                   "КодСтраны");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                  "Контрагент", 1);
	ДобавитьПКС(СвойстваШапки, "КПП",                         "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",          "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаходитсяВСельскойМестности", "НаходитсяВСельскойМестности");
	ДобавитьПКС(СвойстваШапки, "ПочтовыйИндекс",              "ПочтовыйИндекс");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеАдреса",         "ПредставлениеАдреса");
	ДобавитьПКС(СвойстваШапки, "СоответствуетОрганизации",    "", 1);
	ДобавитьПКС(СвойстваШапки, "Сопоставлено",                "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипОрганизации",              "ТипОрганизации", 1);
	ДобавитьПКС(СвойстваШапки, "ТорговыйОбъект",              "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "ФорматОбмена",                "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторТНВЭД(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторТНВЭД";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПоУмолчанию",      "ОсновнойБанковскийСчет", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента",                 "ЮридическоеФизическоеЛицо", , "Перечисление_ВидыКонтрагентов");
	ДобавитьПКС(СвойстваШапки, "ГоловнойКонтрагент",             "ГоловнойКонтрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументУдостоверяющийЛичность", "ДокументУдЛичность");
	ДобавитьПКС(СвойстваШапки, "ИНН",                            "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                      "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "КПП",                            "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                   "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",             "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "",                               "ОсновнойДоговор", 1, "Справочник_ДоговорыКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер",           "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "Родитель",                       "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаРегистрации",              "СтранаРегистрации", , "Справочник_СтраныМира");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЛицензииПоставщиковАлко_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЛицензииПоставщиковАлко_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЛицензии",   "ВидЛицензии", , "Перечисление_ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "Владелец",      "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "КемВыдана",     "КемВыдана");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидЛицензии,Владелец");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НаправленияДеятельностиНГ_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НаправленияДеятельностиНГ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НаправленияДеятельности;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НаправленияДеятельностиНГ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",                      "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                                   "Артикул");
	ДобавитьПКС(СвойстваШапки, "Весовой",                                   "Весовой");
	ДобавитьПКС(СвойстваШапки, "ВидАлкогольнойПродукции",                   "ВидАлкогольнойПродукции", , "Справочник_ВидыАлкогольнойПродукции_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидПродукцииИС",                            "ВидПродукцииИС", , "Перечисление_ВидыПродукцииИС");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                          "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция",             "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьНаборыЕдиницИзмерения",         "", 1);
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСерииНоменклатуры",             "ИспользоватьСерии");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСрокГодностиСерии",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ИспользоватьХарактеристики",                "", 1);
	ДобавитьПКС(СвойстваШапки, "КатегорияНоменклатуры",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "Код",                                       "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "КодМедицинскогоИзделия",                    "КодВидаНоменклатурнойКлассификации");
	ДобавитьПКС(СвойстваШапки, "КодТРУ",                                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Комментарий",                               "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование",                              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбъемДАЛ",                                  "ОбъемДАЛ");
	ДобавитьПКС(СвойстваШапки, "ПризнакПредметаРасчета",                    "ПризнакПредметаРасчета", 1, "Перечисление_ПризнакиПредметаРасчета");
	ДобавитьПКС(СвойстваШапки, "ПроизводительИмпортерАлкогольнойПродукции", "ПроизводительИмпортер", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ПрослеживаемыйТовар",                       "ПрослеживаемыйТовар");
	ДобавитьПКС(СвойстваШапки, "Родитель",                                  "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения",                       "СтранаПроисхождения", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                           "ТипНоменклатуры", , "Перечисление_ТипыНоменклатуры_Получение");
	ДобавитьПКС(СвойстваШапки, "ТоварнаяНоменклатураВЭД",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "ФайлКартинки",                              "ОсновнаяКартинка", , "Справочник_НоменклатураПрисоединенныеФайлы_Получ");
	ДобавитьПКС(СвойстваШапки, "ЦеноваяГруппа",                             "ЦеноваяГруппа", , "Справочник_ЦеновыеГруппы");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураПрисоединенныеФайлы_Получ";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НоменклатураПрисоединенныеФайлы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Файлы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",            "", 1);
	ДобавитьПКС(СвойстваШапки, "ВладелецФайла",    "", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаСоздания",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Имя");
	ДобавитьПКС(СвойстваШапки, "Описание",         "Описание");
	ДобавитьПКС(СвойстваШапки, "ПутьКФайлу",       "", 1);
	ДобавитьПКС(СвойстваШапки, "Расширение",       "Расширение");
	ДобавитьПКС(СвойстваШапки, "ТипХраненияФайла", "", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатурныеГруппы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НоменклатурныеГруппы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатурныеГруппы_Группа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НомераГТД_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НомераГТД_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НомерГТД";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НомераГТД_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",      "НомерГТД");
	ДобавитьПКС(СвойстваШапки, "Описание", "Комментарий");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НомераГТДИзСтроки_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НомераГТДИзСтроки_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетПоУмолчанию",                     "ОсновнойБанковскийСчет");
	ДобавитьПКС(СвойстваШапки, "ИНН",                                           "ИНН");
	ДобавитьПКС(СвойстваШапки, "ИностраннаяОрганизация",                        "ЯвляетсяНерезидентом");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                                    "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                                     "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                           "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПлательщикаПриПеречисленииНалогов", "НаименованиеПлательщикаПриПеречисленииНалогов");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                            "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                                          "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                                       "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",                       "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",                       "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо",                                "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",                     "ЮридическоеФизическоеЛицо", , "Перечисление_ЮридическоеФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЮридическоеФизическоеЛицо");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ПартииНоменклатуры_ИзСтр_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПартииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "ВладелецПартии", "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",   "", 1);
	ДобавитьПКС(СвойстваШапки, "Статус",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,Статус");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Патенты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Патенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Патенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Патенты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Патенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",                          "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                        "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",                     "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "КБК",                               "КБК");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОрганаПолучателя",     "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодПоОКТМО",                        "КодПоОКТМО");
	ДобавитьПКС(СвойстваШапки, "Наименование",                      "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерПатента",                      "НомерПатента");
	ДобавитьПКС(СвойстваШапки, "ПотенциальноВозможныйГодовойДоход", "ПотенциальноВозможныйГодовойДоход");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерПатента");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПодарочныеСертификаты_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ПодарочныеСертификаты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыПодарочныхСертификатов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ПодарочныеСертификаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ПодарочныеСертификаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",              "", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьСерииНоменклатуры", "", 1);
	ДобавитьПКС(СвойстваШапки, "КатегорияНоменклатуры",         "", 1, "Справочник_НоменклатурныеГруппы_Получение");
	ДобавитьПКС(СвойстваШапки, "КоличествоПериодовДействия",    "КоличествоПериодовДействия");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",            "", 1);
	ДобавитьПКС(СвойстваШапки, "Номинал",                       "Номинал");
	ДобавитьПКС(СвойстваШапки, "Периодичность",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",               "", 1, "Перечисление_ТипыНоменклатуры_Получение");
	ДобавитьПКС(СвойстваШапки, "ЧастичноеПогашение",            "РазрешитьЧастичнуюОплату");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Подразделения";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Организация",  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "ВышестоящееПодразделение", , "Справочник_Подразделения_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтруктурныеЕдиницы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "МОЛ",                     "МОЛ", , "Справочник_ФизическиеЛица_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "РозничныйВидЦен",         "ТипЦенРозничнойТорговли", , "Справочник_ТипыЦен");
	ДобавитьПКС(СвойстваШапки, "СкладУправляющейСистемы", "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипСтруктурнойЕдиницы",   "ТипСклада", 1, "ТипыСкладов");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ТипСтруктурнойЕдиницы");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Спецификации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Состав", "");
	ДобавитьПКС(СвойстваТЧ, "ДоляСтоимости",       "", 1);
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоПродукции", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1, "Справочник_Номенклатура_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_УсловияПредоставленияСкидок_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_УсловияПредоставленияСкидок_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УсловияПредоставленияСкидокНаценок;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.УсловияПредоставленияСкидокНаценок";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_УсловияПредоставленияСкидок_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗначениеУсловияОграничения",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "Код",                                        "Код");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                                "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КритерийОграниченияПримененияЗаОбъемПродаж", "", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",                               "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОбластьОграничения",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "УсловиеПредоставления",                      "УсловиеПредоставления", , "Перечисление_УсловияПредоставленияСкидок_Получение");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",      "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",               "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "Наименование");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "НаименованиеСлужебное");
	ДобавитьПКС(СвойстваШапки, "Наименование",      "УточнениеНаименования");
	ДобавитьПКС(СвойстваШапки, "Пол",               "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",          "Группа", , "Справочник_ФизическиеЛицаГруппа");
	ДобавитьПКС(СвойстваШапки, "СтраховойНомерПФР", "СтраховойНомерПФР");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Штрихкод");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыУпаковокТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.МаркировкаУпаковки";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаУпаковки",      "ДатаУпаковки");
	ДобавитьПКС(СвойстваШапки, "ЗначениеШтрихкода", "Штрихкод");
	ДобавитьПКС(СвойстваШапки, "Количество",        "Количество");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",      "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Серия",             "", 1, "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "ТипУпаковки",       "ТипУпаковки", , "ТипыУпаковок");
	ДобавитьПКС(СвойстваШапки, "ТипШтрихкода",      "ТипШтрихкода", 1, "ТипыШтрихкодов");
	ДобавитьПКС(СвойстваШапки, "Упаковка",          "", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "Характеристика",    "", 1, "Справочник_ХарактеристикиНоменклатуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВложенныеТовары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1, "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Серия",              "", 1, "Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1, "Справочник_ХарактеристикиНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("ЗначениеШтрихкода,Номенклатура,ТипУпаковки,ТипШтрихкода");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СпособыОплаты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетЭквайринг",                "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "Договор",                                "", 1, "Справочник_ДоговорыКонтрагентовСтруктура_Получение");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьБезПодключенияОборудования", "", 1);
	ДобавитьПКС(СвойстваШапки, "Код",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаправлениеДеятельности",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                            "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "СчетЗатрат",                             "", 1);
	ДобавитьПКС(СвойстваШапки, "СчетУчета",                              "", 1);
	ДобавитьПКС(СвойстваШапки, "Тип",                                    "", 1);
	ДобавитьПКС(СвойстваШапки, "Эквайрер",                               "Эквайер", , "Справочник_Контрагенты_Получение");

	
КонецПроцедуры


#КонецОбласти
#Область ОтправкаИПолучение
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Банки_ПриОтправкеДанных";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "",             "ИностранныйБанк", 1);
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "СВИФТБИК",     "СВИФТБИК");
	ДобавитьПКС(СвойстваШапки, "Страна",       "Страна", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,КоррСчет,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("СВИФТБИК,ЭтоГруппа");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",   "ПараметрыПрописиНаРусском");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "КодМВД",       "КодМВД");
	ДобавитьПКС(СвойстваШапки, "КодПФР",       "КодПФР");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КлассификаторТНВЭД_ЭлементСправочника(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КлассификаторТНВЭД_ЭлементСправочника";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторТНВЭД;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КодТНВЭД";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",    "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Код",                 "КодТНВЭД");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
	ДобавитьПКС(СвойстваШапки, "СырьевойТовар",       "СырьевойТовар");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппы_Группа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатурныеГруппы_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КатегорииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатурныеГруппы_Группа");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ПунктыВыдачиЗаказов(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ПунктыВыдачиЗаказов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПунктыВыдачиЗаказа;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ПунктыВыдачиЗаказов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ПунктыВыдачиЗаказов_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодПунктаВыдачи");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СерииНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СерииНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СерииНоменклатуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",     "", 1);
	ДобавитьПКС(СвойстваШапки, "ГоденДо",      "ГоденДо");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "",             "СерийныйНомер", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтатьиДДСГруппа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДДСГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДСГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СтатьиДДСГруппа");

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаЦены",               "ВалютаЦены", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторФормул",      "Идентификатор");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОкруглятьВБольшуюСторону", "ОкруглятьВБольшуюСторону");
	ДобавитьПКС(СвойстваШапки, "Процент",                  "ТочностьОкругления");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "ЦенаВключаетНДС");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаЦены,Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Упаковки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Упаковки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Упаковки_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмеренияПоКлассификатору", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Коэффициент",                      "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "Наименование",                     "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                                 "Номенклатура", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,ЕдиницаИзмеренияПоКлассификатору,Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                      "ВидНоменклатуры", 1, "Справочник_КатегорииНоменклатурыВН_Отправка");
	ДобавитьПКС(СвойстваШапки, "Владелец",              "ВладелецХарактеристики", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеДляПечати", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "",                      "Номенклатура", 1, "Справочник_Номенклатура_Отправка");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЦеновыеГруппы(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЦеновыеГруппы";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЦеновыеГруппы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЦеновыеГруппы";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	
КонецПроцедуры


#КонецОбласти
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажахПатент_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажахПатент_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажахПатент_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажахПатент_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_СостоянияЭД_Отправка(ПравилаОбработкиДанных)
	
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СостоянияЭД_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СостоянияПоОбъектамУчетаЭДО;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СостоянияЭД_Отправка");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаказНаПеремещение_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЗаказНаПеремещение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЗаказНаПеремещение;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЗаказНаПеремещение";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказНаПеремещение_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                         "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПеремещения",              "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                  "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                        "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                  "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаПолучатель", "СкладПолучатель", 1);
	ДобавитьПКС(СвойстваШапки, "СтруктурнаяЕдиницаРезерв",     "СкладОтправитель", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходДСПлан;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                         "", 1, "СправочникСсылка.Пользователи");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", 1);
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "УтвержденнаяДатаПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатусУтвержденияПлатежа",      "Статус", 1, "Перечисление_СтатусыЗаявокНаРасходованиеДС");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "ТипДенежныхСредств",            "УтвержденнаяФормаОплаты", 1, "Перечисление_ТипыОплатыЗаявкиНаРасход");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1, "СправочникСсылка.ХозяйственныеОперации");

	ПравилоКонвертации.ПоляПоиска.Добавить("Организация,Контрагент,СтатьяДвиженияДенежныхСредств");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходДСПлан;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Автор",                         "", 1);
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",                "БанковскийСчет", 1, "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",               "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                          "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",        "УтвержденнаяДатаПлатежа", 1);
	ДобавитьПКС(СвойстваШапки, "ДокументОснование",             "ДокументОснование", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",                    "Контрагент", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                         "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",                   "Организация", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатусУтвержденияПлатежа",      "Статус", 1, "Перечисление_СтатусыЗаявокНаРасходованиеДС");
	ДобавитьПКС(СвойстваШапки, "СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств", 1, "Справочник_СтатьиДДС");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                "Сумма", 1);
	ДобавитьПКС(СвойстваШапки, "ТипДенежныхСредств",            "УтвержденнаяФормаОплаты", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Организация,Контрагент,СтатьяДвиженияДенежныхСредств,ДокументОснование");
	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМ_54ФЗ_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЧекККМ_54ФЗ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЧекККМ;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЧекККМ_54ФЗ_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "ЗаказКлиента", 1, "Документ_СчетНаОплатуПокупателю_Отправка");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",           "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККМ",      "НомерКассовойСмены", 1);
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",       "НомерЧекаФР");
	ДобавитьПКС(СвойстваШапки, "Патент",             "Патент", , "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатыККМ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипОплаты", 1, "Перечисление_ТипыОплатыККТ");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыВозвратПродажи");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ЧекККМВозврат_54ФЗ_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ЧекККМВозврат_54ФЗ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ЧекККМВозврат;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЧекККМВозврат_54ФЗ_Отправка_ПриОтправкеДанных";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "",                   "ЗаказКлиента", 1, "Документ_СчетНаОплатуПокупателю_Отправка");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",           "КассаККМ", , "Справочник_КассыККМ_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",         "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "НалогообложениеНДС", "Налогообложение", , "Перечисления_ТипыНалогообложенияНДС_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККМ",      "НомерКассовойСмены", 1);
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",       "НомерЧекаФР");
	ДобавитьПКС(СвойстваШапки, "Патент",             "Патент", , "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЧекККМ",             "Основание", , "Документ_ЧекККМ_54ФЗ_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Патент", 1, "Справочник_Патенты_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатыККМ");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипОплаты", 1, "Перечисление_ТипыОплатыККТ");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыВозвратПродажи");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1, "Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1, "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_SKUКонтрагента_ИзСтруктуры_Отправка(ПравилаКонвертации)
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_SKUКонтрагента_ИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.SKUКонтрагента";
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Артикул", 1);
	ДобавитьПКС(СвойстваШапки, "", "Владелец", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Идентификатор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИдентификаторНоменклатурыСервиса1СНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИдентификаторХарактеристикиСервиса1СНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "УпаковкаНоменклатуры", 1, "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "", "ШтрихКод", 1);

	
КонецПроцедуры



Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата, ПространствоИмен = "")
	
	Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
		ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
	КонецЕсли;
	
	КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
	КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
	КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
	КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
	КонвертацияТабличнойЧасти.ПространствоИмен = ПространствоИмен;
	Возврат КонвертацияТабличнойЧасти.Свойства;
	
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
		ПравилоКонвертацииСвойства = "", ПространствоИмен = "")
	
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
	НоваяСтрока.ПространствоИмен                = ПространствоИмен;
	
КонецПроцедуры

#Область ОбработчикиКонвертации
#Область Отправка
Процедура ПОД_Документ_Взаимозачет_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПрочегоКонтрагента Тогда
		ИспользованиеПКО.Документ_Взаимозачет_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ЗаказНаряд_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаказНарядРасходнаяНакладная_Отправка = Ложь;
	ИспользованиеПКО.Документ_ЗаказНарядТребованиеНакладная_Отправка = Ложь;
	ИспользованиеПКО.Документ_ЗаказПокупателя_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
	
		Если НЕ (ДанныеИБ.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен
			И ДанныеИБ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен) Тогда
				
			ИспользованиеПКО.Документ_ЗаказНарядРасходнаяНакладная_Отправка = ДанныеИБ.Работы.Количество() > 0 ИЛИ ДанныеИБ.Запасы.Количество() > 0;
			ИспользованиеПКО.Документ_ЗаказНарядТребованиеНакладная_Отправка = ДанныеИБ.Материалы.Количество() > 0
				ИЛИ ДанныеИБ.МатериалыЗаказчика.Количество() > 0;
				
		КонецЕсли;
			
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку Тогда
	
		ВариантЗаказаНеВыбран = ДанныеИБ.КоличествоВариантовКП > 0 И ДанныеИБ.ОсновнойВариантКП = 0;
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "КабинетКлиента" Тогда
			
			ИспользованиеПКО.Документ_ЗаказПокупателя_Отправка = Не ВариантЗаказаНеВыбран И ДанныеИБ.СозданИзКабинетаКлиента;
			
		ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ПереноситьЗаказыКакСчетаНаОплату Тогда
			
			ИспользованиеПКО.Документ_ЗаказПокупателя_Отправка = Не ВариантЗаказаНеВыбран;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.8") Тогда
		ИспользованиеПКО.Справочник_СостоянияЗаказовПокупателей_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ИнвентаризацияЗапасов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиница, КомпонентыОбмена);
	
	Если ДанныеИБ.Запасы.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_ИнвентаризацияЗапасов_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиница, КомпонентыОбмена);
КонецПроцедуры
Процедура ПОД_Документ_ОтчетОПереработке_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ОтчетОПереработкеДавальцу_Отправка = ДанныеИБ.Продукция.Количество() > 0;
	ИспользованиеПКО.Документ_ОтчетОПереработкеМатериалы_Отправка = Истина;
КонецПроцедуры
Процедура ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка = Ложь;
	
	ТаблицаПатенты = ПатентыДокумента(ДанныеИБ.Ссылка);
	
	МассивПатентов = Новый Массив;
	
	Сч = 1;
	Для каждого СтрокаТаблицы Из ТаблицаПатенты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Патент) Тогда
			ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка = Истина;
		Иначе
			
			Если МассивПатентов.Найти(СтрокаТаблицы.Патент) <> Неопределено Тогда
				Продолжить;
			Иначе
				МассивПатентов.Добавить(СтрокаТаблицы.Патент);
			КонецЕсли;
			
			ПравилоОРП = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОтчетОРозничныхПродажахПатент_Отправка", "Имя");
			Если ПравилоОРП <> Неопределено Тогда
				ДанныеИБ.ДополнительныеСвойства.Вставить("ВыгрузкаОРППоПатенту", СтрокаТаблицы.Патент);
				ДанныеИБ.ДополнительныеСвойства.Вставить("ПрефиксВыгружаемогоПатента", "П" + Формат(Сч, "ЧГ=0")); // 2 символа
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ, ПравилоОРП);
			КонецЕсли;
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПОД_Документ_ПБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСПереводНаДругойСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДСВзносНаличными_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПБДССлужбаДоставки_Корректировка_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации Тогда
		
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Истина;
		
		Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
			Договор = ДанныеИБ.РасшифровкаПлатежа[0].Договор;
			Если ЗначениеЗаполнено(Договор) И Договор.ПереноситьУдержанныеСуммыНаРасчетыСПоставщиком Тогда
				ИспользованиеПКО.Документ_ПБДССлужбаДоставки_Корректировка_Отправка = Истина;
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником Тогда
		
		ИспользованиеПКО.Документ_ПБДСРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
	
		ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОтПродажиВалюты Тогда
	
		ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Отправка = Истина;	
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
		
		Если ДанныеИБ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы
			ИЛИ СтрНайти(ДанныеИБ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
			ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
	
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
	
		ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета Тогда
	
		ИспользованиеПКО.Документ_ПБДСПереводНаДругойСчет_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными Тогда
	
		ИспользованиеПКО.Документ_ПБДСВзносНаличными_Отправка = Истина;
				
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПДС_ПолучениеНаличныхВБанке_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПДС_НаБанковскийСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПДС_ПереводНаДругойСчет_Отправка = Ложь;
	
	Если ДанныеИБ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные
		И ДанныеИБ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		 
		ИспользованиеПКО.Документ_ПДС_ПолучениеНаличныхВБанке_Отправка = Истина;
		 
	ИначеЕсли ДанныеИБ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные
		И ДанныеИБ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		 
		ИспользованиеПКО.Документ_ПДС_НаБанковскийСчет_Отправка = Истина;
		 	 
	ИначеЕсли ДанныеИБ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные
		И ДанныеИБ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		 
		ИспользованиеПКО.Документ_ПДС_ПереводНаДругойСчет_Отправка = Истина;
		 
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПередачаТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.МассивОрганизаций.Количество() > 0 Тогда
	
		Если КомпонентыОбмена.ПараметрыКонвертации.МассивОрганизаций.Найти(ДанныеИБ.Организация) = Неопределено Тогда
			ИспользованиеПКО.Документ_ПередачаТоваровРеализация_Отправка = Ложь;
		КонецЕсли;
	
		Если КомпонентыОбмена.ПараметрыКонвертации.МассивОрганизаций.Найти(ДанныеИБ.ОрганизацияПолучатель) = Неопределено Тогда
			ИспользованиеПКО.Документ_ПередачаТоваровПоступление_Отправка = Ложь;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ЕстьДавальческоеСырье = Ложь;
	Для каждого СтрокаТаблицы Из ДанныеИБ.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Партия)
			И СтрокаТаблицы.Партия.Статус = Перечисления.СтатусыПартий.ДавальческоеСырье Тогда
			ЕстьДавальческоеСырье = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьЗапасы = ДанныеИБ.Запасы.Количество() > 0 ИЛИ ДанныеИБ.Спецоснастка.Количество() > 0 ИЛИ ДанныеИБ.ИнвентарьИХозяйственныеПринадлежности.Количество() > 0;
	
	ИсключитьПеремещения = КомпонентыОбмена.ПараметрыКонвертации.НеВыгружатьПеремещенияЗапасов;
	
	ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = (ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение И НЕ ЕстьДавальческоеСырье) И ЕстьЗапасы И НЕ ИсключитьПеремещения;
	ИспользованиеПКО.Документ_ПеремещениеЗапасов_НаРасходы_Отправка = (ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы ИЛИ ЕстьДавальческоеСырье) И ЕстьЗапасы;
	ИспользованиеПКО.Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка = (ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию) И ЕстьЗапасы;
	ИспользованиеПКО.Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка = (ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации) И ЕстьЗапасы;
	
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиница, КомпонентыОбмена);
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиницаПолучатель, КомпонентыОбмена);
КонецПроцедуры
Процедура ПОД_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ДанныеПоТоварам = ДанныеДокументаПереоценкаВРозницеСуммовойУчет(ДанныеИБ);
	
	ИспользованиеПКО.Документ_ПереоценкаВРозницеСуммовойУчет_Отправка = ДанныеПоТоварам.Товары.Количество() > 0;
КонецПроцедуры
Процедура ПОД_Документ_ПересортицаЗапасов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	РасширенныеДанныеИБ = ДанныеДокументаПересортицаЗапасов(ДанныеИБ);
	
	ИспользованиеПКО.Документ_ПересортицаОприходованиеТоваров_Отправка = НЕ ДанныеИБ.ПриходоватьТоварыПоСебестоимостиСписания И РасширенныеДанныеИБ.ТоварыОприходование.Количество() > 0;
	ИспользованиеПКО.Документ_ПересортицаСписаниеТоваров_Отправка = НЕ ДанныеИБ.ПриходоватьТоварыПоСебестоимостиСписания И РасширенныеДанныеИБ.ТоварыСписание.Количество() > 0;
КонецПроцедуры
Процедура ПОД_Документ_ПКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
		
		Если ДанныеИБ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы
			ИЛИ СтрНайти(ДанныеИБ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
			ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты Тогда
	
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПоступлениеОтПродажиВалюты Тогда
	
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;	
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда 
		
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПолучениеНаличныхВБанке Тогда
	
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПлатежноеПоручение_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлатежноеПоручение_Отправка = Ложь;
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Прочее
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам Тогда
		
		ИспользованиеПКО.Документ_ПлатежноеПоручение_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ПриходнаяНакладная_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПриходнаяНакладная_Отправка = Ложь;
	ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Ложь;
	ИспользованиеПКО.Документ_ВозвратСырьяОтПереработчика_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПоступлениеСырьяОтДавальца_Отправка = Ложь;
	
	ЭтоПокупка = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию;
	
	ЭтоВозвратОтПокупателя = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера;
		
	ЭтоВозвратОтПереработчика = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика;
	ЭтоПриемВПереработку = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку;
	
	ИспользованиеПКО.Документ_ПриходнаяНакладная_Отправка = ЭтоПокупка;
	ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = ЭтоВозвратОтПокупателя;
	ИспользованиеПКО.Документ_ВозвратСырьяОтПереработчика_Отправка = ЭтоВозвратОтПереработчика;
	ИспользованиеПКО.Документ_ПоступлениеСырьяОтДавальца_Отправка = ЭтоПриемВПереработку;
КонецПроцедуры
Процедура ПОД_Документ_Производство_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_Комплектация_Отправка = Ложь;
	ИспользованиеПКО.Документ_Производство_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПроизводствоПеремещениеПродукции_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПроизводствоПеремещениеОтходов_Отправка = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница)
		И ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		ИспользованиеПКО.Документ_Комплектация_Отправка = ДанныеИБ.Запасы.Количество() > 0;
	Иначе
		ИспользованиеПКО.Документ_Производство_Отправка = Истина;
	КонецЕсли;
	
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
	
		ИспользованиеПКО.Документ_ПроизводствоПеремещениеПродукции_Отправка = ДанныеИБ.СтруктурнаяЕдиницаПродукции <> ДанныеИБ.СтруктурнаяЕдиницаЗапасов
			И ДанныеИБ.Продукция.Количество() > 0;
		ИспользованиеПКО.Документ_ПроизводствоПеремещениеОтходов_Отправка = ДанныеИБ.СтруктурнаяЕдиницаОтходов <> ДанныеИБ.СтруктурнаяЕдиницаЗапасов
			И ДанныеИБ.Отходы.Количество() > 0;
	КонецЕсли;
	
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиницаПродукции, КомпонентыОбмена);
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиницаЗапасов, КомпонентыОбмена);
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиницаОтходов, КомпонентыОбмена);
КонецПроцедуры
Процедура ПОД_Документ_РаспределениеЗатрат_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПроверитьНеобходимостьФормСкладаПроизводства(ДанныеИБ.СтруктурнаяЕдиница, КомпонентыОбмена);
КонецПроцедуры
Процедура ПОД_Документ_РасходнаяНакладная_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РасходнаяНакладная_Отправка = Ложь;
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	ИспользованиеПКО.Документ_ВозвратСырьяДавальцу_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПередачаПереработчику_Отправка = Ложь;
	
	ЭтоПродажа = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию;
	
	ЭтоВозвратПоставщику = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту;
		
	ЭтоВозвратИзПереработки = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки;
	ЭтоПередачаВПереработку = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку;
	
	ИспользованиеПКО.Документ_РасходнаяНакладная_Отправка = ЭтоПродажа;
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = ЭтоВозвратПоставщику;
	ИспользованиеПКО.Документ_ВозвратСырьяДавальцу_Отправка = ЭтоВозвратИзПереработки;
	ИспользованиеПКО.Документ_ПередачаПереработчику_Отправка = ЭтоПередачаВПереработку;
КонецПроцедуры
Процедура ПОД_Документ_РКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
		
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
		
		ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
		
		Если ДанныеИБ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
			ИЛИ СтрНайти(ДанныеИБ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
			ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
	
		ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
		
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
	
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк Тогда
	
		ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_СБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗарплСотруднику_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДССнятиеНаличных_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
	
		ИспользованиеПКО.Документ_СБДСПеречислениеЗаработнойПлаты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику Тогда
	
		ИспользованиеПКО.Документ_СБДСПеречислениеЗарплСотруднику_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
	
		ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
	
		Если ДанныеИБ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
			ИЛИ СтрНайти(ДанныеИБ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
			ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
	
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
	
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
	
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных Тогда
	
		ИспользованиеПКО.Документ_СБДССнятиеНаличных_Отправка = Истина;	
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
			
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Ложь;
	ИспользованиеПКО.Документ_СписаниеТоваровПоИнвентаризации_Отправка = Ложь;
	ИспользованиеПКО.Документ_СписаниеЗапасов_ИзЭксплуатации = Ложь;
	
	Если ДанныеИБ.СписатьЗапасыИзЭксплуатации
		И ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		ИспользованиеПКО.Документ_СписаниеЗапасов_ИзЭксплуатации = Истина;
		
	ИначеЕсли ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
	
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
			ИспользованиеПКО.Документ_СписаниеТоваровПоИнвентаризации_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_СчетНаОплатуПокупателю_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СчетНаОплатуПокупателю_Отправка = Истина;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьЗаказыКакСчетаНаОплату Тогда
	
		ИспользованиеПКО.Документ_СчетНаОплатуПокупателю_Отправка = Ложь;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПередачаТоваровСФПолученный_Отправка = Ложь;
	
		Для каждого СтрокаТаблицы Из ДанныеИБ.ДокументыОснования Цикл
			
			Если ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
				
				ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
				
			ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			
				ЭтоВозвратИзПереработки = СтрокаТаблицы.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки;
				ЭтоПередачаВПереработку = СтрокаТаблицы.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку;
			
				Если ЭтоВозвратИзПереработки ИЛИ ЭтоПередачаВПереработку Тогда
					ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
				
				ИспользованиеПКО.Документ_ПередачаТоваровСФПолученный_Отправка = Истина;
					
			КонецЕсли;
			
		КонецЦикла;
КонецПроцедуры
Процедура ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Для каждого СтрокаТаблицы Из ДанныеИБ.ДокументыОснования Цикл
			
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование)
			ИЛИ ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			ИспользованиеПКО.Документ_СчетФактураПолученный_Отправка = Ложь;
			
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
	
			ЭтоВозвратОтПереработчика = СтрокаТаблицы.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика;
			ЭтоПриемВПереработку = СтрокаТаблицы.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку;
	
			Если ЭтоВозвратОтПереработчика ИЛИ ЭтоПриемВПереработку Тогда
				ИспользованиеПКО.Документ_СчетФактураПолученный_Отправка = Ложь;
			КонецЕсли;
	
		КонецЕсли; 
			
	КонецЦикла;
КонецПроцедуры
Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоВидамЦен Тогда
		ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.ВидЦены КАК ТипЦен,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ЦеныНоменклатуры.Цена) КАК Цена
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Запасы КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Ссылка = &Ссылка
	|	И ЦеныНоменклатуры.Цена <> 0
	|	И ЦеныНоменклатуры.ВидЦены В(&ВидыЦенНоменклатуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатуры.ВидЦены,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЦеныНоменклатуры.ТипЦен КАК ТипЦен,
	|	ВТ_ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТ_ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ВТ_ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
	|ИТОГИ ПО
	|	ТипЦен";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВидыЦенНоменклатуры", КомпонентыОбмена.ПараметрыКонвертации.МассивВидовЦен);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	ШаблонТаблицаТоваров = Новый ТаблицаЗначений;
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		ШаблонТаблицаТоваров.Колонки.Добавить(КолонкаРезультата.Имя, КолонкаРезультата.ТипЗначения);
	КонецЦикла;
	
	ВыборкаВидЦены = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПравилоУстановкаЦенОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатуры_Отправка", "Имя");
	Если Не ПравилоУстановкаЦенОтправка = Неопределено Тогда
		
		СчетчикЦены = 0;
		Пока ВыборкаВидЦены.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаВидЦены.ТипЦен) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеИБСтруктура = Новый Структура("Дата, Номер, Комментарий");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			
			Если ВыборкаВидЦены.Количество() = 1 Тогда
				ДанныеИБСтруктура.Вставить("Ссылка", ДанныеИБ.Ссылка);
			Иначе
				НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ДанныеИБ.Номер, Истина, Истина);
				СтандартныеПрефиксы = СтрЗаменить(ДанныеИБ.Номер, НомерБезПрефиксов, "");
				
				ПрефиксНомера = СтандартныеПрефиксы + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СчетчикЦены), 2);
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Истина, Истина);
				Если СтрДлина(ПрефиксНомера + НомерНаПечать) <= 11 Тогда
					ДанныеИБСтруктура.Номер = ПрефиксНомера
						+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаПечать, 11 - СтрДлина(ПрефиксНомера));
				КонецЕсли;
			КонецЕсли;
			
			
			ВыборкаДетали = ВыборкаВидЦены.Выбрать();
			ТаблицаТоваров = ШаблонТаблицаТоваров.Скопировать();
			
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаТовары = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетали);
			КонецЦикла;
			
			ДанныеИБСтруктура.Вставить("ТипЦен", ВыборкаВидЦены.ТипЦен);
			ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
			
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
				ДанныеИБСтруктура, 
				ПравилоУстановкаЦенОтправка);
			
			СчетчикЦены = СчетчикЦены + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
КонецПроцедуры
Процедура ПОД_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_УстановкаЦенНоменклатурыРегистр_Отправка = Ложь;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ[0].ДокументУстановки) Тогда // выгружается документ установки цен
		Если (КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
			ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса")
			И КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоВидамЦен Тогда
				МассивВидовЦен = КомпонентыОбмена.ПараметрыКонвертации.МассивВидовЦен;
				ИспользованиеПКО.Документ_УстановкаЦенНоменклатурыРегистр_Отправка = МассивВидовЦен.Найти(ДанныеИБ[0].ВидЦен) <> Неопределено;
		Иначе
			ИспользованиеПКО.Документ_УстановкаЦенНоменклатурыРегистр_Отправка = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоВидамЦен Тогда
			ИспользованиеПКО.Документ_УстановкаЦенНоменклатурыРегистр_Отправка = Ложь;
		Иначе
			МассивВидовЦен = КомпонентыОбмена.ПараметрыКонвертации.МассивВидовЦен;
			ИспользованиеПКО.Документ_УстановкаЦенНоменклатурыРегистр_Отправка = МассивВидовЦен.Найти(ДанныеИБ[0].ВидЦен) <> Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ЧекККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЧекККМ_54ФЗ_Отправка = Ложь;
	ИспользованиеПКО.Документ_ЧекККМ_Отправка = Ложь;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменБП30"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ_БП3"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменРТ"
		ИЛИ НЕ ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки) Тогда 
	
		ИспользованиеПКО.Документ_ЧекККМ_54ФЗ_Отправка = ЭтоЧек54ФЗ(ДанныеИБ.Ссылка);
	
	ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
	
		ИспользованиеПКО.Документ_ЧекККМ_Отправка = Истина;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ЧекККМВозврат_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЧекККМВозврат_Отправка = Ложь;
	ИспользованиеПКО.Документ_ЧекККМВозврат_54ФЗ_Отправка = Ложь;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменБП30"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ_БП3"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменРТ"
		ИЛИ НЕ ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки) Тогда 
	
		ИспользованиеПКО.Документ_ЧекККМВозврат_54ФЗ_Отправка = ЭтоЧек54ФЗ(ДанныеИБ.Ссылка);
	
	ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
	
		ИспользованиеПКО.Документ_ЧекККМВозврат_Отправка = Истина;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_ПланВидовХарактеристик_ДополнительныеРеквизитыИСведения_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ДополнительныеРеквизиты_Отправка = КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьДополнительныеРеквизиты;
КонецПроцедуры
Процедура ПОД_РегистрСведений_ФактОплатыЗаказов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СостояниеОплатыЗаказа_Отправка = Ложь;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "КабинетКлиента" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеИБ.Отбор.СчетНаОплату.Значение) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_СостояниеОплатыЗаказа_Отправка = Истина;
КонецПроцедуры
Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ<>Неопределено И ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ОбъектСуществуетВБазе(ДанныеИБ.Владелец) Тогда
		ИспользованиеПКО.Справочник_БанковскиеСчета_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ДанныеИБ.ВидДоговора)
		ИЛИ Не (ЗначениеЗаполнено(ДанныеИБ.Организация) И ОбъектСуществуетВБазе(ДанныеИБ.Организация))
		ИЛИ ТипЗнч(ДанныеИБ.Владелец) <> Тип("СправочникСсылка.Контрагенты") Тогда
		
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ВидДокумента = ДанныеИБ.Отбор.ВидДокумента.Значение;
		ФизЛицо = ДанныеИБ.Отбор.Физлицо.Значение;
		Если Не (ОбщегоНазначения.СсылкаСуществует(ВидДокумента) 
			И ОбщегоНазначения.СсылкаСуществует(ФизЛицо)) Тогда
			ИспользованиеПКО.Справочник_ДокументыФизическихЛиц_Отправка = Ложь;
		КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ИнформативныеОстатки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ИнформативныеОстатки_Отправка = Ложь;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.8") Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьОстаткиНоменклатуры <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСклад = ДанныеИБ.Отбор.СтруктурнаяЕдиница.Значение;
	Если КомпонентыОбмена.ПараметрыКонвертации.МассивСкладов.Найти(ТекущийСклад) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяОрганизация = ДанныеИБ.Отбор.Организация.Значение;
	Если КомпонентыОбмена.ПараметрыКонвертации.МассивОрганизацийСкладскихОстатков.Найти(ТекущаяОрганизация) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_ИнформативныеОстатки_Отправка = Истина;
КонецПроцедуры
Процедура ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.КассыККМ") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_КлассификаторТНВЭД_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.10") Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_КлассификаторТНВЭД_ЭлементСправочника_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.10") Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа    = ДанныеИБ.ЭтоГруппа;
	
	Если Не ДанныеИБ.ЭтоГруппа
		И Не ЗначениеЗаполнено(ДанныеИБ.ВидКонтрагента) Тогда
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ЛицензииПоставщиковАлко_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВидЛицензии) Тогда
		ИспользованиеПКО.Справочник_ЛицензииПоставщиковАлко_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_НаправленияДеятельностиНГ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
	
		ИспользованиеПКО.Справочник_НаправленияДеятельностиНГ_Отправка = Истина;
	
	Иначе
	
		ИспользованиеПКО.Справочник_НаправленияДеятельностиНГ_Отправка = Ложь;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
	
	Если Не ДанныеИБ.ЭтоГруппа
		И ЗначениеЗаполнено(ДанныеИБ.Родитель)
		И Не ОбъектСуществуетВБазе(ДанныеИБ.Родитель) Тогда
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_НоменклатурныеГруппы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
	
		ИспользованиеПКО.Справочник_КатегорииНоменклатурыВН_Отправка = Не ДанныеИБ.ЭтоГруппа;
		ИспользованиеПКО.Справочник_НоменклатурныеГруппы_Отправка = Ложь;
		ИспользованиеПКО.Справочник_НоменклатурныеГруппы_Группа = Ложь;
	
	Иначе
	
		ИспользованиеПКО.Справочник_КатегорииНоменклатурыВН_Отправка = Ложь;
		ИспользованиеПКО.Справочник_НоменклатурныеГруппы_Отправка = Не ДанныеИБ.ЭтоГруппа;
		ИспользованиеПКО.Справочник_НоменклатурныеГруппы_Группа = ДанныеИБ.ЭтоГруппа;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Организации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЮридическоеФизическоеЛицо) Тогда
		ИспользованиеПКО.Справочник_Организации_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Патенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.10") Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ПозицияПрайсЛиста_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.Цена = 0 Тогда
			ОчиститьИспользованиеПКО(ИспользованиеПКО);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ПунктыВыдачиЗаказов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.8") Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СерииНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.6") Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.Состав.Количество() = 0 Тогда
		ИспользованиеПКО.Справочник_СпецификацииНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиДДС = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_СтатьиДДСГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПОД_Справочник_СтруктурныеЕдиницы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.ПодразделениеВПроизводственныйСклад_Отправка = Ложь;
		ИспользованиеПКО.Справочник_Подразделения_Отправка = Ложь;
		ИспользованиеПКО.Справочник_Склады_Отправка = Ложь;
	
		Если ДанныеИБ.ДополнительныеСвойства.Свойство("ПроизводственныйСклад")
			И ДанныеИБ.ДополнительныеСвойства.ПроизводственныйСклад = Истина Тогда
			ИспользованиеПКО.ПодразделениеВПроизводственныйСклад_Отправка = Истина;
		Иначе
		
			ЭтоСклад = ДанныеИБ.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
			ИспользованиеПКО.Справочник_Склады_Отправка = ЭтоСклад И НЕ (ДанныеИБ.ЭтоГруппа);
			ИспользованиеПКО.Справочник_Подразделения_Отправка = НЕ ЭтоСклад ИЛИ ДанныеИБ.ЭтоГруппа;
		КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Упаковки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6")
		И ЗначениеЗаполнено(ДанныеИБ.Владелец) И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ИспользованиеПКО.Справочник_Упаковки = Истина;	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ФайлыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФайлыНоменклатуры_Отправка = Ложь;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.8") Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьКартинкиНоменклатуры <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.РежимВыгрузкиКартинокНоменклатуры = Перечисления.РежимВыгрузкиКартинокНоменклатуры.ТолькоОсновнаяКартинка Тогда
		ОсновнаяКартинкаНоменклатурыВладельца =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ВладелецФайла, "ФайлКартинки");
		ЭтоОсновнаяКартинка = ДанныеИБ.Ссылка = ОсновнаяКартинкаНоменклатурыВладельца;
		Если НЕ ЭтоОсновнаяКартинка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоРасширениеФайлаКартинки(ДанныеИБ.Расширение) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_ФайлыНоменклатуры_Отправка = Истина;
КонецПроцедуры
Процедура ПОД_Справочник_ФайлыХарактеристикиНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФайлыХарактеристикиНоменклатур_Отправка = Ложь;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.8") Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьКартинкиНоменклатуры <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.РежимВыгрузкиКартинокНоменклатуры = Перечисления.РежимВыгрузкиКартинокНоменклатуры.ТолькоОсновнаяКартинка Тогда
		ОсновнаяКартинкаХарактеристикиВладельца =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ВладелецФайла, "ФайлКартинки");
		ЭтоОсновнаяКартинка = ДанныеИБ.Ссылка = ОсновнаяКартинкаХарактеристикиВладельца;
		Если НЕ ЭтоОсновнаяКартинка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоРасширениеФайлаКартинки(ДанныеИБ.Расширение) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_ФайлыХарактеристикиНоменклатур_Отправка = Истина;
КонецПроцедуры
Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
Процедура ПОД_Справочник_ХарактеристикиНоменклатуры_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.6")
		И НЕ (ЗначениеЗаполнено(ДанныеИБ.Владелец) И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура")) Тогда
		
		ИспользованиеПКО.Справочник_ХарактеристикиНоменклатуры = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Номенклатура) Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Сотрудник);
	ДанныеXDTO.Вставить("ПодотчетноеЛицо", СтруктураИнструкцияПКО);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		Если ДанныеИБ.Запасы.Количество() > 0 Тогда
			Склад = ДанныеИБ.Запасы[0].СтруктурнаяЕдиница;
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаАвансовыйОтчет(ДанныеИБ);
	
	ТаблицаАвансы = Новый ТаблицаЗначений;
	ТаблицаАвансы.Колонки.Добавить("Документ");
	ТаблицаАвансы.Колонки.Добавить("Сумма");
	
	ВыданныеАвансы = РасширенныеДанныеИБ.ВыданныеАвансы;
	Для Каждого Строка ИЗ ВыданныеАвансы Цикл
		ИмяПКО = "";
		ТипДокумента = ТипЗнч(Строка.ДокументАванса);
		Если ТипДокумента = Тип("ДокументСсылка.РасходИзКассы") Тогда
			ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходСоСчета") Тогда
	          ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	       Иначе
	        Продолжить;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаАвансы.Добавить();
		СтрокаТаблицы.Документ = Новый Структура("Значение, ИмяПКО", Строка.ДокументАванса, ИмяПКО);
		СтрокаТаблицы.Сумма = Строка.Сумма;
	КонецЦикла;
	ДанныеXDTO.Вставить("ВыданныеАвансы", ТаблицаАвансы);
	
	Если ТаблицаАвансы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВыданныеАвансы", ТаблицаАвансы);
	КонецЕсли;
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ПрочиеРасходы = РасширенныеДанныеИБ.ПрочиеРасходы;
	Если ПрочиеРасходы.Количество() > 0 Тогда
	
		ПрочиеРасходы.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
	
		Для Каждого Строка ИЗ ПрочиеРасходы Цикл
			Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			Иначе
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			КонецЕсли;
		КонецЦикла;
	
		ДанныеXDTO.Вставить("ПрочиеРасходы", ПрочиеРасходы);
	КонецЕсли;
	
	ОплатаПоставщикам = РасширенныеДанныеИБ.ОплатаПоставщикам;
	Если ОплатаПоставщикам.Количество() > 0 Тогда
		
		ОплатаПоставщикам.Колонки.Добавить("Договор");
		ОплатаПоставщикам.Колонки.Добавить("ДокументРасчетов");
		ОплатаПоставщикам.Колонки.Добавить("СпособПогашенияЗадолженности");
		
		Для каждого СтрокаОплаты Из ОплатаПоставщикам Цикл
		    СтрокаОплаты.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, СтрокаОплаты.ДоговорКонтрагента, СтрокаОплаты.Контрагент);
		
			Если ЗначениеЗаполнено(СтрокаОплаты.Документ) Тогда
				ИмяПКО = ИмяПКОДляДокумента(СтрокаОплаты.Документ);
				Если ИмяПКО <> "" Тогда
					СтрокаОплаты.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаОплаты.Документ, ИмяПКО);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаОплаты.СпособПогашенияЗадолженности = СпособПогашенияЗадолженности(КомпонентыОбмена, СтрокаОплаты);
			
		КонецЦикла;
		ДанныеXDTO.Вставить("ОплатаКонтрагентам", ОплатаПоставщикам);
		
	КонецЕсли;
	
	ИмяПКО = "Перечисление_НалогообложениеНДСПродавца";
	ДанныеXDTO.Вставить("НалогообложениеНДСПродавца", Новый Структура("Значение, ИмяПКО", ДанныеИБ.НалогообложениеНДС, ИмяПКО));
КонецПроцедуры
Процедура ПКО_Документ_АктВыполненныхРабот_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "АР" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор); 
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьЗаказыКакСчетаНаОплату
		И КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьЗаказыПокупателей Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.ЗаказПокупателя) Тогда
			Если ТипЗнч(ДанныеИБ.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ЗаказПокупателя, "Документ_ЗаказПокупателя_Отправка"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
			Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату")
				И КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСчетаНаОплату Тогда
				ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетНаОплатуПокупателю_Отправка"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаАктВыполненныхРабот(ДанныеИБ);
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	
	Если Услуги.Количество() > 0 Тогда
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_Взаимозачет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("КонтрагентДебитор");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику Тогда
		ДанныеXDTO.КонтрагентДебитор = ДанныеИБ.Контрагент;
	Иначе
		ДанныеXDTO.КонтрагентДебитор = ДанныеИБ.КонтрагентИсточник;
	КонецЕсли;
	
	Если Не (ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику) Тогда
		
		ДанныеXDTO.Вставить("КонтрагентКредитор", ДанныеИБ.Контрагент);
	Иначе
		ДанныеXDTO.Вставить("КонтрагентКредитор", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаВзаимозачет(ДанныеИБ);
	
	ДанныеXDTO.Вставить("Валюта", РасширенныеДанныеИБ.Валюта);
	
	ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", РасширенныеДанныеИБ.ДебиторскаяЗадолженность);
	ДанныеXDTO.Вставить("КредиторскаяЗадолженность", РасширенныеДанныеИБ.КредиторскаяЗадолженность);
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя Тогда
		ДанныеXDTO.Вставить("КредиторскаяЗадолженность", РасширенныеДанныеИБ.РеквизитыПолучателя);
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику Тогда
		ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", РасширенныеДанныеИБ.РеквизитыПолучателя);
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ЗачетАвансовПокупателя Тогда
		ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", РасширенныеДанныеИБ.КредиторскаяЗадолженность);
		ДанныеXDTO.Вставить("КредиторскаяЗадолженность", РасширенныеДанныеИБ.ДебиторскаяЗадолженность);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности", РасширенныеДанныеИБ.СуммаДебиторскойЗадолженности);
	ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", РасширенныеДанныеИБ.СуммаКредиторскойЗадолженности);
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПрочийВзаимозачет Тогда
		Если ДанныеИБ.ВидПрочегоВзаимозачета = Перечисления.ВидыПрочегоВзаимозачета.ДолгПрочегоКонтрагентаИДолгПередПоставщиком Тогда
			ДанныеXDTO.Вставить("СчетКт", РасширенныеДанныеИБ.КодСчета);
		Иначе
			ДанныеXDTO.Вставить("СчетДт", РасширенныеДанныеИБ.КодСчета);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратСырьяДавальцу_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	РасширенныеДанныеИБ = ДанныеДокументаРасходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		Товары.Колонки.Добавить("СчетУчета");
		Товары.Колонки.Добавить("ДокументПоступления");
		Товары.ЗаполнитьЗначения("003.01", "СчетУчета");
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
			И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			СтруктураДокументПоступления = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_ПоступлениеСырьяОтДавальца_Отправка");
			Товары.ЗаполнитьЗначения(СтруктураДокументПоступления, "ДокументПоступления");
		КонецЕсли;
		
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратСырьяОтПереработчика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
		ДанныеXDTO.ВидОперации = "ВозвратОтКомиссионера";
	Иначе
		ДанныеXDTO.ВидОперации = "ВозвратОтКлиента";
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ОснованиеВозврата = ДанныеИБ.ДокументОснование;
		ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ОснованиеВозврата, "Документ_РасходнаяНакладная_Отправка"));
		
	ИначеЕсли ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ОснованиеВозврата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "КассоваяСмена");
		ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ОснованиеВозврата, "Документ_ОтчетОРозничныхПродажах_Отправка"));
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеИБ.Ссылка);
	
	Результат = Запрос.Выполнить();
	ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Не Результат.Пустой());
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту Тогда
		ДанныеXDTO.ВидОперации = "ВозвратКомитенту";
	Иначе
		ДанныеXDTO.ВидОперации = "ВозвратПоставщику";
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		ДанныеXDTO.Вставить("ДокументПоступления", ДанныеИБ.ДокументОснование);
	Иначе
		ДанныеXDTO.Вставить("ДокументПоступления", Неопределено);
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаРасходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ДополнительныеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);                
	
	РасширенныеДанныеИБ = ДанныеДокументаДополнительныеРасходы(ДанныеИБ);
	
	// Услуги, РасшифровкаДопРасходов
	Услуги = РасширенныеДанныеИБ.Услуги;
	РасшифровкаДопРасходов = РасширенныеДанныеИБ.РасшифровкаДопРасходов.Скопировать();
	РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	// Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	// Не переносим как дополнительные расходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = Ложь;
	ТипСоставногоСвойства = Неопределено;
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		ИначеЕсли СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка = ДанныеИБ.Ссылка Тогда
			// Обходим защиту от зацикливания - записываем в качестве документа поступления уже преобразованное значение ссылки
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = ДанныеXDTO.КлючевыеСвойства;
			Если ТипСоставногоСвойства = Неопределено Тогда
				ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПриходнаяНакладная_Отправка");
				ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
			КонецЕсли;
			СтрокаРасшифровкаДопРасходов.ДокументПоступления.Вставить("ТипСоставногоСвойства", ТипСоставногоСвойства);
		Иначе
			Если ТипЗнч(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, "Документ_АвансовыйОтчет_Отправка");
			Иначе
				СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, "Документ_ПриходнаяНакладная_Отправка");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Если НетБазыДляРаспределения Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНДСУслуги = Услуги.Итог("СуммаНДС");
	СуммаНДСРасшифровка = РасшифровкаДопРасходов.Итог("СуммаНДС");
	
	Если СуммаНДСУслуги <> СуммаНДСРасшифровка Тогда
		
		ИсхСумма = 0;
		БазаРаспределенияСумма = РасшифровкаДопРасходов.Итог("Сумма");
		ВсегоНДС = СуммаНДСУслуги;
		
		Для каждого СтрокаУслуги Из РасшифровкаДопРасходов Цикл
			
			СтрокаУслуги.СуммаНДС = ?(БазаРаспределенияСумма <> 0, Окр((ВсегоНДС - ИсхСумма) * СтрокаУслуги.Сумма / БазаРаспределенияСумма, 2, 1), 0);
			БазаРаспределенияСумма = БазаРаспределенияСумма - СтрокаУслуги.Сумма;
			ИсхСумма = ИсхСумма + СтрокаУслуги.СуммаНДС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
		
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
		
	Если РасшифровкаДопРасходов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказНарядРасходнаяНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ЗР" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказНаряд(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДополнитьДаннымиГТД(ДанныеИБ, Товары, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	
	Если Услуги.Количество() > 0 Тогда
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	
	ДанныеXDTO.Вставить("Сумма", ДанныеИБ.Запасы.Итог("Всего"));
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказНарядТребованиеНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ЗТ" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказНаряд(ДанныеИБ);
	
	Материалы = РасширенныеДанныеИБ.Материалы;
	Если Материалы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Материалы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);  
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.БанковскийСчет) Тогда 
		
		Если ЗначениеЗаполнено(ДанныеИБ.Организация) 
			И ЗначениеЗаполнено(ДанныеИБ.Организация.БанковскийСчетПоУмолчанию)
			И ДанныеИБ.ВалютаДокумента = ДанныеИБ.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств Тогда
			
			ДанныеXDTO.Вставить("БанковскийСчетОрганизации", ДанныеИБ.Организация.БанковскийСчетПоУмолчанию);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказПокупателя(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	
	Если Услуги.Количество() > 0 Тогда
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли; 
	
	ДанныеXDTO.Вставить("АдресДоставки", ДанныеИБ.АдресДоставки);
	
	ДополнительнаяИнформация = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеИБ.СтоимостьДоставки) Тогда
		ДополнительнаяИнформация.Вставить("СуммаДоставки", ДанныеИБ.СтоимостьДоставки);
	КонецЕсли;
	  
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "КабинетКлиента" Тогда	
		Если ЗначениеЗаполнено(ДанныеИБ.СтоимостьДоставки) Тогда
			ДополнительнаяИнформация.Вставить("АдресДоставки", ДанныеИБ.АдресДоставки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИБ.СпособДоставки) Тогда
			ИдентификаторыСпособовДоставки = Новый Соответствие;
			ИдентификаторыСпособовДоставки.Вставить(Перечисления.СпособыДоставки.Самовывоз,   "Самовывоз");
			ИдентификаторыСпособовДоставки.Вставить(Перечисления.СпособыДоставки.ПунктВыдачи, "ПунктВыдачи");
			ИдентификаторыСпособовДоставки.Вставить(Перечисления.СпособыДоставки.Курьер,      "Курьер");
			ИдентификаторыСпособовДоставки.Вставить(Перечисления.СпособыДоставки.Почта,       "Почта");
				
			СпособДоставкиСтрокой = ИдентификаторыСпособовДоставки.Получить(ДанныеИБ.СпособДоставки);
			ДополнительнаяИнформация.Вставить("СпособДоставки", СпособДоставкиСтрокой);
		КонецЕсли;	
		Если ДанныеИБ.СостояниеЗаказа = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СостоянияЗаказовПокупателей.Завершен") Тогда
			ДополнительнаяИнформация.Вставить("СостояниеЗаказа", Новый Структура);
			ДополнительнаяИнформация.СостояниеЗаказа.Вставить("ЗавершенУспешно", ?(ДанныеИБ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно, Истина, Ложь));
		КонецЕсли;		
	КонецЕсли;
	 
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда 
		
			ТелефонКонтрагента = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
				ДанныеИБ.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ,ДанныеИБ.Дата);
			ЭлектроннаяПочтаКонтрагента = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
				ДанныеИБ.Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, ,ДанныеИБ.Дата);
	
			ДополнительнаяИнформация.Вставить("Телефон", ТелефонКонтрагента);
			ДополнительнаяИнформация.Вставить("АдресЭлектроннойПочты", ЭлектроннаяПочтаКонтрагента);  
			 
			Если ЗначениеЗаполнено(ДанныеИБ.АдресДоставкиЗначение) Тогда 
				СтруктураАдреса = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ДанныеИБ.АдресДоставкиЗначение, Перечисления.ТипыКонтактнойИнформации.Адрес);
				Если СтруктураАдреса.Свойство("ZIPcode") Тогда
					СтруктураАдреса.ZIPcode = Неопределено;    
				КонецЕсли;  
				Если СтруктураАдреса.Свойство("city") И ЗначениеЗаполнено(СтруктураАдреса.city) Тогда
					Если СтруктураАдреса.Свойство("area") Тогда
						СтруктураАдреса.area = Неопределено; 
					КонецЕсли;
				КонецЕсли;
				Если СтруктураАдреса.Свойство("munDistrict") Тогда
					СтруктураАдреса.munDistrict = Неопределено; 
				КонецЕсли;
				                     
				АдресДляВыгрузки = РаботаСАдресамиКлиентСервер.ПредставлениеАдреса(СтруктураАдреса, Ложь);
				ДанныеXDTO.Вставить("АдресДоставки", АдресДляВыгрузки);
			КонецЕсли;
			
			ДобавитьТаблицуДополнительныеРеквизиты(ДанныеXDTO);
		
			СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "АдресЭлектроннойПочты"); 
			СтрокаДопРеквизита.ЗначениеСвойства = ЭлектроннаяПочтаКонтрагента; 
	
			СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "Телефон"); 
			СтрокаДопРеквизита.ЗначениеСвойства = ТелефонКонтрагента; 
	
			СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "ДоставкаС"); 
			СтрокаДопРеквизита.ЗначениеСвойства = ДанныеИБ.ВремяДоставкиС; 
	
			СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "ДоставкаПо"); 
			СтрокаДопРеквизита.ЗначениеСвойства = ДанныеИБ.ВремяДоставкиПо; 
	
			СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "ЖелаемаяДатаПокупки"); 
			СтрокаДопРеквизита.ЗначениеСвойства = ДанныеИБ.ОжидаемаяДатаВручения; 
	
	КонецЕсли;
	 
	ДанныеXDTO.AdditionalInfo = СоздатьJSONИзСтруктуры(ДополнительнаяИнформация);
КонецПроцедуры
Процедура ПКО_Документ_ИнвентаризацияЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаИнвентаризацияЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_Комплектация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
			ВидОперации = "Сборка";	
		Иначе
			ВидОперации = "Разборка";	
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
			Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
		Иначе
			Склад = ДанныеИБ.СтруктурнаяЕдиницаЗапасов;
		КонецЕсли;
		ДанныеXDTO.Вставить("Склад", Склад);
		
		Комплект = Справочники.Номенклатура.ПустаяСсылка();
		КомплектКоличество = 0;
		
		Если ДанныеИБ.Продукция.Количество() > 0 Тогда
			ТекПродукция = ДанныеИБ.Продукция[0].Номенклатура;
			Комплект = ТекПродукция;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", ТекПродукция);
			НайденныеСтроки = ДанныеИБ.Продукция.НайтиСтроки(ПараметрыОтбора);
			
			КоличествоПродукции = 0;
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ТипЗнч(ТекСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					Коэффициент = ТекСтрока.ЕдиницаИзмерения.Коэффициент;	
					КоличествоПродукции = КоличествоПродукции + ТекСтрока.Количество * Коэффициент;
				Иначе
					КоличествоПродукции = КоличествоПродукции + ТекСтрока.Количество;
				КонецЕсли;		
			КонецЦикла;
			
			КомплектКоличество = КоличествоПродукции;
		КонецЕсли;
		
		ДанныеXDTO.Вставить("Номенклатура", Комплект);
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Комплект.ЕдиницаИзмерения);
		ДанныеXDTO.Вставить("Количество", КомплектКоличество);
		ДанныеXDTO.Вставить("ТипЗапасов", "СобственныеТовары");
		
		РасширенныеДанныеИБ = ДанныеДокументаПроизводствоКомплектация(ДанныеИБ);
		
		Товары = РасширенныеДанныеИБ.Товары;
		Если Товары.Количество() > 0 Тогда
			ДополнитьДаннымиГТД(ДанныеИБ, Товары, КомпонентыОбмена);
			ДанныеXDTO.Вставить("Товары", Товары);
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КомплектацияЗапасов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийКомплектацияЗапасов.Сборка Тогда
			ВидОперации = "Сборка";	
		Иначе
			ВидОперации = "Разборка";	
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
			Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
		Иначе
			Склад = ДанныеИБ.СтруктурнаяЕдиница;
		КонецЕсли;
		ДанныеXDTO.Вставить("Склад", Склад);
		
		Комплект = Справочники.Номенклатура.ПустаяСсылка();
		КомплектКоличество = 0;
		
		Комплект = ДанныеИБ.Номенклатура;
			
		Если ТипЗнч(ДанныеИБ.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Коэффициент = ДанныеИБ.ЕдиницаИзмерения.Коэффициент;	
			КоличествоПродукции = ДанныеИБ.Количество + ДанныеИБ.Количество * Коэффициент;
		Иначе
			КоличествоПродукции = ДанныеИБ.Количество;
		КонецЕсли;
		
		КомплектКоличество = КоличествоПродукции;
		
		ДанныеXDTO.Вставить("Номенклатура", Комплект);
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Комплект.ЕдиницаИзмерения);
		ДанныеXDTO.Вставить("Количество", КомплектКоличество);
		ДанныеXDTO.Вставить("ТипЗапасов", "СобственныеТовары");
		
		РасширенныеДанныеИБ = ДанныеДокументаКомплектацияЗапасов(ДанныеИБ);
		
		Товары = РасширенныеДанныеИБ.Товары;
		Если Товары.Количество() > 0 Тогда
			ДополнитьДаннымиГТД(ДанныеИБ, Товары, КомпонентыОбмена);
			ДанныеXDTO.Вставить("Товары", Товары);
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		ИЛИ ТипЗнч(ДанныеИБ.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ДанныеXDTO.Вставить("ВосстановитьНДС", Истина);
	Иначе
		ДанныеXDTO.Вставить("ВосстановитьНДС", Ложь);
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор); 
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ИмяПКОДляДокумента(ДанныеИБ.ДокументОснование);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ИсправляемыйДокументПоступления) Тогда
		ИмяПКО = ИмяПКОДляДокумента(ДанныеИБ.ИсправляемыйДокументПоступления);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ИсправляемыйДокументПоступления", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ИсправляемыйДокументПоступления, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаКорректировкаПоступления(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор); 
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ИмяПКОДляДокумента(ДанныеИБ.ДокументОснование);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ИсправляемыйДокументРеализации) Тогда
		ИмяПКО = ИмяПКОДляДокумента(ДанныеИБ.ИсправляемыйДокументРеализации);
		Если ИмяПКО <> "" Тогда
			ДанныеXDTO.Вставить("ИсправляемыйДокументРеализации", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ИсправляемыйДокументРеализации, ИмяПКО));
		КонецЕсли;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаКорректировкаРеализации(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_МаркировкаТоваровГИСМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = "МТ" + Сред(ДанныеИБ.Номер, 3);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаМаркировкаТоваровГИСМ(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
	
		Товары.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
	
		Для Каждого Строка ИЗ Товары Цикл
			Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			Иначе
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			КонецЕсли;
		КонецЦикла;
	
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_НачисленияПоКредитамИЗаймам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ЗаймыВыданныеСотрудникам");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийНачисленияПоКредитамИЗаймам.НачисленияПоЗаймамСотрудникам Тогда
		ДанныеXDTO.ВидОперации = "ЗаймыВыданныеСотрудникам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийНачисленияПоКредитамИЗаймам.НачисленияПоКредитам Тогда
		ДанныеXDTO.ВидОперации = "КредитыПолученные";
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаНачисленияПоКредитамИЗаймам(ДанныеИБ);
	
	Начисления = РасширенныеДанныеИБ.Начисления;
	Если Начисления.Количество() > 0 Тогда
	
		Начисления.Колонки.Добавить("Контрагент");	
		Начисления.Колонки.Добавить("Договор");
		Начисления.Колонки.Добавить("СрочностьКредитаЗайма");
		
		Для каждого СтрокаТаблицы Из Начисления Цикл
			Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийНачисленияПоКредитамИЗаймам.НачисленияПоЗаймамСотрудникам Тогда
		    	СтруктураИнструкцияФизЛицо = ФизЛицоПоСотруднику(СтрокаТаблицы.Сотрудник);
		    	СтрокаТаблицы.Контрагент = СтруктураИнструкцияФизЛицо;
		    Иначе
		    	СтрокаТаблицы.Контрагент = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Кредитор, "Справочник_Контрагенты_Отправка");
		        СтрокаТаблицы.Договор = СтруктураДоговораКредитаИЗайма(ДанныеИБ, СтрокаТаблицы.ДоговорКредитаЗайма);
		    КонецЕсли;
		    
		    Если СтрокаТаблицы.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства Тогда
		        СтрокаТаблицы.СрочностьКредитаЗайма = "Долгосрочный";
		    Иначе
		        СтрокаТаблицы.СрочностьКредитаЗайма = "Краткосрочный";
		    КонецЕсли;
		    
			    Если СтрокаТаблицы.ВалютаВзаиморасчетов <> КомпонентыОбмена.ПараметрыКонвертации.НациональнаяВалюта Тогда
					ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДанныеИБ.Дата, Новый Структура("Валюта", СтрокаТаблицы.ВалютаВзаиморасчетов));
					ВалютаРасчетовКурс = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
					ВалютаРасчетовКратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
					
					СтрокаТаблицы.СуммаВзаиморасчетов = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаТаблицы.Сумма, ВалютаРасчетовКурс, 1, ВалютаРасчетовКратность, 1);
				КонецЕсли;
		
		КонецЦикла;
		
		ДанныеXDTO.Вставить("Начисления", Начисления);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокумента = ?(ЗначениеЗаполнено(ДанныеИБ.ВалютаДенежныхСредств), ДанныеИБ.ВалютаДенежныхСредств, Константы.НациональнаяВалюта.Получить());
	ДанныеXDTO.Вставить("Валюта", ВалютаДокумента);
	
	// Эквайрер.
	ДанныеXDTO.Вставить("Эквайрер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ЭквайринговыйТерминал, "Эквайрер"));
	
	АлгоритмКонвертации = "ОплатаОтПокупателя";
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		ДанныеXDTO.Вставить("Инвентаризация", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_ИнвентаризацияЗапасов_Отправка"));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаОприходованиеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор); 
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетКомиссионера(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
	
	ТоварыВозвраты = РасширенныеДанныеИБ.ТоварыВозвраты;
	
	ТоварыВозвратыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, ТоварыВозвраты, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТоварыВозвратыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВозвратыПокупателей", ТоварыВозвратыГТД);
	КонецЕсли;
	
	
	Покупатели = РасширенныеДанныеИБ.Покупатели;
	ДанныеXDTO.Вставить("Покупатели", Покупатели);
	
	ПокупателиВозвраты = РасширенныеДанныеИБ.ПокупателиВозвраты;
	ДанныеXDTO.Вставить("КонтрагентыВозврата", ПокупателиВозвраты);
	
	Если Покупатели.Количество() = 0 Тогда
		Для каждого СтрокаВозвраты Из ПокупателиВозвраты Цикл
			НоваяСтрока = Покупатели.Добавить();
			НоваяСтрока.Покупатель = СтрокаВозвраты.Контрагент;
			НоваяСтрока.КлючСтроки = 1;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Покупатели", Покупатели); // в формате покупатели обязательное свойство
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаВознаграждения", ДанныеИБ.Запасы.Итог("СуммаВознаграждения"));
	ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", СтавкаНДССтрокой_Отправка(ДанныеИБ.СтавкаНДСВознаграждения));
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомиссионераОСписанииВозвр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ОК" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКомиссионера");
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		ДанныеXDTO.Вставить("ДокументРеализации", ДанныеИБ.ДокументОснование);
	Иначе
		ДанныеXDTO.Вставить("ДокументРеализации", Неопределено);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Ложь);
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетКомиссионераОСписании(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомиссионераОСписанииСпис_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ОК" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетКомиссионераОСписании(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетКомитента(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СуммаВознаграждения", ДанныеИБ.Запасы.Итог("СуммаВознаграждения"));
	ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", СтавкаНДССтрокой_Отправка(ДанныеИБ.СтавкаНДСВознаграждения));
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОПереработке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетОПереработке(ДанныеИБ);
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	МатериалыЗаказчика = РасширенныеДанныеИБ.МатериалыЗаказчика;
	Если МатериалыЗаказчика.Количество() > 0 Тогда
		МатериалыЗаказчика.Колонки.Добавить("СчетУчета");
		МатериалыЗаказчика.ЗаполнитьЗначения("003.02", "СчетУчета");
		ДанныеXDTO.Вставить("МатериалыЗаказчика", МатериалыЗаказчика);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
	
	Если ДанныеИБ.СуммаДокумента = 0 Тогда // обход ограничения формата
		ДанныеXDTO.Вставить("Сумма", -1);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОПереработкеДавальцу_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетОПереработке(ДанныеИБ);
	
	Продукция = РасширенныеДанныеИБ.Услуги;
	Если Продукция.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Продукция);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОПереработкеМатериалы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ДС" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаОтчетОПереработке(ДанныеИБ);
	
	Материалы = РасширенныеДанныеИБ.Материалы;
	Если Материалы.Количество() > 0 Тогда
		Материалы.Колонки.Добавить("СчетУчета");
		Материалы.ЗаполнитьЗначения("003.02", "СчетУчета");
		ДанныеXDTO.Вставить("Товары", Материалы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВалютаДокумента) Тогда
		ДанныеXDTO.Вставить("Валюта", ДанныеИБ.ВалютаДокумента);
	Иначе
		ДанныеXDTO.Вставить("Валюта", КомпонентыОбмена.ПараметрыКонвертации.НациональнаяВалюта);
	КонецЕсли;
	
	
	Патент = Справочники.Патенты.ПустаяСсылка();
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		ДанныеXDTO.Вставить("КассаККМ", ДанныеИБ.КассаККМ);
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ВерсияФорматаБольше1_10 = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10");
	 
	Если ВерсияФорматаБольше1_10 Тогда
		ДанныеXDTO.Вставить("Патент", Патент);
	КонецЕсли; 
	
	
	МассивЧеков = МассивЧековОРП(ДанныеИБ.Ссылка); 
		
	ОРПОбъект = ОтчетОРозничныхПродажахПоДаннымВЧеках(ДанныеИБ, МассивЧеков);
	
	Если ОРПОбъект.Запасы.Количество() = 0 Тогда
		ОРПОбъект = ДанныеИБ;
	КонецЕсли;
		
	РасширенныеДанныеИБ = ДанныеОтчетОРозничныхПродажах(ОРПОбъект);
	
	
	ТоварыПродажа = РасширенныеДанныеИБ.ТоварыПродажа;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		ТоварыПродажа.Колонки.Удалить("Патент");
	КонецЕсли;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, ТоварыПродажа, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ТоварыПродажа", ТаблицаТоварыГТД);
	КонецЕсли;
	
	ТоварыВозвратПродажи = РасширенныеДанныеИБ.ТоварыВозвратПродажи;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		ТоварыВозвратПродажи.Колонки.Удалить("Патент");
	КонецЕсли;
	
	ТаблицаТоварыГТДВозврат = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, ТоварыВозвратПродажи, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТаблицаТоварыГТДВозврат.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ТоварыВозвратПродажи", ТаблицаТоварыГТДВозврат);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		Услуги.Колонки.Удалить("Патент");
	КонецЕсли;
	
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	ПодарочныеСертификаты = РасширенныеДанныеИБ.ПодарочныеСертификаты;
	Если ПодарочныеСертификаты.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты);
	КонецЕсли;
	
	ОплатаПлатежнымиКартами = РасширенныеДанныеИБ.ОплатаПлатежнымиКартами;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		ОплатаПлатежнымиКартами.Колонки.Удалить("Патент");
	КонецЕсли;
	
	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ОплатаПлатежнымиКартами);
	КонецЕсли;
	
	ОплатаБанковскимиКредитами = РасширенныеДанныеИБ.ОплатаБанковскимиКредитами;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		ОплатаБанковскимиКредитами.Колонки.Удалить("Патент");
	КонецЕсли;
	
	Если ОплатаБанковскимиКредитами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаБанковскимиКредитами", ОплатаБанковскимиКредитами);
	КонецЕсли;
	
	ОплатаСертификатами = РасширенныеДанныеИБ.ОплатаСертификатами;
	Если ОплатаСертификатами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаСертификатами", ОплатаСертификатами);
	КонецЕсли;
	
	ОплатаБонуснымиБаллами = РасширенныеДанныеИБ.ОплатаБонуснымиБаллами;
	Если ОплатаБонуснымиБаллами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаБонуснымиБаллами", ОплатаБонуснымиБаллами);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажахПатент_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// удаляем ссылку для загрузки в БП отдельным документом
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Ссылка") Тогда
		ДанныеXDTO.КлючевыеСвойства.Удалить("Ссылка");
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВалютаДокумента) Тогда
		ДанныеXDTO.Вставить("Валюта", ДанныеИБ.ВалютаДокумента);
	Иначе
		ДанныеXDTO.Вставить("Валюта", КомпонентыОбмена.ПараметрыКонвертации.НациональнаяВалюта);
	КонецЕсли;
	
	Патент = ДанныеИБ.ДополнительныеСвойства.ВыгрузкаОРППоПатенту;
	ПрефиксВыгружаемогоПатента = Лев(ДанныеИБ.ДополнительныеСвойства.ПрефиксВыгружаемогоПатента, 2);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + ПрефиксВыгружаемогоПатента + Сред(ДанныеИБ.Номер, 8));
	
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		ДанныеXDTO.Вставить("КассаККМ", ДанныеИБ.КассаККМ);
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ВерсияФорматаБольше1_10 = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10");
	 
	Если ВерсияФорматаБольше1_10 Тогда
		ДанныеXDTO.Вставить("Патент", Патент);
	КонецЕсли;
	
	
	МассивЧеков = МассивЧековОРП(ДанныеИБ.Ссылка, Истина, Патент); // чеки на патенте
		
	ОРПОбъект = ОтчетОРозничныхПродажахПоДаннымВЧеках(ДанныеИБ, МассивЧеков);
		
	РасширенныеДанныеИБ = ДанныеОтчетОРозничныхПродажах(ОРПОбъект);
	
	
	ТоварыПродажа = РасширенныеДанныеИБ.ТоварыПродажа;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		ТоварыПродажа.Колонки.Удалить("Патент");
	КонецЕсли;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, ТоварыПродажа, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ТоварыПродажа", ТаблицаТоварыГТД);
	КонецЕсли;
	
	ТоварыВозвратПродажи = РасширенныеДанныеИБ.ТоварыВозвратПродажи;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		ТоварыВозвратПродажи.Колонки.Удалить("Патент");
	КонецЕсли;
	
	ТаблицаТоварыГТДВозврат = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, ТоварыВозвратПродажи, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТаблицаТоварыГТДВозврат.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ТоварыВозвратПродажи", ТаблицаТоварыГТДВозврат);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		Услуги.Колонки.Удалить("Патент");
	КонецЕсли;
	
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	ПодарочныеСертификаты = РасширенныеДанныеИБ.ПодарочныеСертификаты;
	Если ПодарочныеСертификаты.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты);
	КонецЕсли;
	
	ОплатаПлатежнымиКартами = РасширенныеДанныеИБ.ОплатаПлатежнымиКартами;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		ОплатаПлатежнымиКартами.Колонки.Удалить("Патент");
	КонецЕсли;
	
	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ОплатаПлатежнымиКартами);
	КонецЕсли;
	
	ОплатаБанковскимиКредитами = РасширенныеДанныеИБ.ОплатаБанковскимиКредитами;
	Если НЕ ВерсияФорматаБольше1_10 Тогда
		ОплатаБанковскимиКредитами.Колонки.Удалить("Патент");
	КонецЕсли;
	
	Если ОплатаБанковскимиКредитами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаБанковскимиКредитами", ОплатаБанковскимиКредитами);
	КонецЕсли;
	
	ОплатаСертификатами = РасширенныеДанныеИБ.ОплатаСертификатами;
	Если ОплатаСертификатами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаСертификатами", ОплатаСертификатами);
	КонецЕсли;
	
	ОплатаБонуснымиБаллами = РасширенныеДанныеИБ.ОплатаБонуснымиБаллами;
	Если ОплатаБонуснымиБаллами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаБонуснымиБаллами", ОплатаБонуснымиБаллами);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетПереработчика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	               
	РасширенныеДанныеИБ = ДанныеДокументаОтчетПереработчика(ДанныеИБ);
	
	Если ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", Справочники.СтруктурныеЕдиницы.ОсновнойСклад, "Справочник_Склады_Отправка"));
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиница, "Справочник_Подразделения_Отправка"));
	Иначе
		ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиница, "Справочник_Склады_Отправка"));
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", Новый Структура("Значение, ИмяПКО", Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение, "Справочник_Подразделения_Отправка"));
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
		ДанныеXDTO.Вставить("Склад", Склад);
	КонецЕсли;
			
	Продукция = РасширенныеДанныеИБ.Продукция;
	Если Продукция.Количество() > 0 Тогда
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
			ДанныеXDTO.Вставить("ГруппаАналитическогоУчетаНоменклатуры", Новый Структура("Значение, ИмяПКО", Продукция[0].Номенклатура.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена)));
		Иначе
			ДанныеXDTO.Вставить("ГруппаАналитическогоУчетаНоменклатуры", Новый Структура("Значение, ИмяПКО", Продукция[0].Номенклатура.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена)));
		КонецЕсли;
			
		ДанныеXDTO.Вставить("Продукция", Продукция);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	Материалы = РасширенныеДанныеИБ.Материалы;
	Если Материалы.Количество() > 0 Тогда
		ДополнитьДаннымиГТД(ДанныеИБ, Материалы, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Материалы", Материалы);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
	
	Если ДанныеИБ.Сумма = 0 Тогда // обход ограничения формата
		ДанныеXDTO.Вставить("Сумма", -1);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСВзносНаличными_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
КонецПроцедуры
Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
		
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
		
		// Если ВалютаДокумента <> ВалютаРегламентированногоУчета
		// И ВалютаКонвертации = ВалютаРегламентированногоУчета
	
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		СтрокаРП.ВалютаКонвертации = ВалютаРегламентированногоУчета;
		СтрокаРП.КурсКонвертации = ДанныеИБ.Курс;
		СтрокаРП.КратностьКонвертации = ДанныеИБ.Кратность;
	
		ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ВалютаДенежныхСредств, ДанныеИБ.Дата);
			
		СтрокаРП.СуммаВал = ДанныеИБ.СуммаУчета;
		СтрокаРП.КурсЦБНаДатуКонвертации = ?(ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс = 0, 1, ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс);
			
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	
	Иначе // ПоступлениеОтПродажиВалюты
	
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		СтрокаРП.ВалютаКонвертации = ДанныеИБ.ПродажаВалютыВалюта;
		СтрокаРП.КурсКонвертации = ДанныеИБ.ПродажаВалютыКурс;
		СтрокаРП.КратностьКонвертации = ДанныеИБ.ПродажаВалютыКратность;
		
		ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеИБ.ПродажаВалютыВалюта, ДанныеИБ.Дата);
		
		СтрокаРП.СуммаВал = ДанныеИБ.СуммаУчета;
		СтрокаРП.КурсЦБНаДатуКонвертации = ?(ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс = 0, 1, ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс);
			
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	
	КонецЕсли;
	
	// Договор
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		СтруктураДоговора = СтруктураДоговораКонтрагента(ДанныеИБ, ДанныеИБ.РасшифровкаПлатежа[0].Договор);
		СтрокаРП.Договор = СтруктураДоговора;
	КонецЕсли;
		    
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("РегВалюта", Константы.НациональнаяВалюта.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеНаСчет.ЭквайринговыйТерминал.Договор КАК Договор,
	|	ПоступлениеНаСчет.Статья КАК Статья,
	|	ПоступлениеНаСчет.СуммаДокумента КАК СуммаПлатежа,
	|	ПоступлениеНаСчет.СуммаКомиссииДокумента КАК СуммаУслуг,
	|	ПоступлениеНаСчет.СуммаДокумента * ВЫБОР
	|		КОГДА ПоступлениеНаСчет.ВалютаДенежныхСредств <> &РегВалюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыДокумента.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалютыДокумента.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|						ТОГДА КурсыВалютыДокумента.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыДокумента.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ПоступлениеНаСчет.Курс КАК КурсВзаиморасчетов,
	|	ПоступлениеНаСчет.Кратность КАК КратностьВзаиморасчетов,
	|	""57.03"" КАК СчетУчетаРасчетовСКонтрагентом
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыДокумента
	|		ПО ПоступлениеНаСчет.ВалютаДенежныхСредств = КурсыВалютыДокумента.Валюта
	|ГДЕ
	|	ПоступлениеНаСчет.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	
		// Однострочная расшифровка платежа
		СтрокаРП = ТабРП.Добавить();
		
		ДоговорЭквайринга = ЭквайринговыеОперацииСервер.ПолучитьДоговорЭквайринга(ДанныеИБ.Контрагент, ДанныеИБ.Организация);
		Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
			СтрокаРП.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, ДоговорЭквайринга);
		КонецЕсли;
		
		СтрокаРП.СтатьяДДС = Выборка.Статья;
		СтрокаРП.Сумма = Выборка.СуммаПлатежа;
		СтрокаРП.КурсВзаиморасчетов = Выборка.КурсВзаиморасчетов;
		СтрокаРП.КратностьВзаиморасчетов = Выборка.КратностьВзаиморасчетов;
		СтрокаРП.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодСчета) Тогда
		КодСчета = "91.01";
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетУчетаРасчетов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетДоходов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетДоходов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	АлгоритмКонвертации = АлгоритмВыгрузкиПБДСОтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
	ДанныеXDTO.Вставить("Сотрудник", СтруктураИнструкцияПКО);
			
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
		
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПБДССлужбаДоставки_Корректировка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДопПрефикс = "СД";
	НомерДок = Лев(ДанныеИБ.Номер, 5) + ДопПрефикс + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", Перечисления.ВидыОперацийВзаимозачет.ПрочийВзаимозачет);
	
	ДанныеXDTO.Вставить("КонтрагентДебитор", ДанныеИБ.Контрагент);
	ДанныеXDTO.Вставить("КонтрагентКредитор", ДанныеИБ.Контрагент);
	
	ДанныеXDTO.Вставить("Валюта", ДанныеИБ.ВалютаДенежныхСредств);
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	СуммаВзаиморасчетов = 0;
	
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Договор = ДанныеИБ.РасшифровкаПлатежа[0].Договор;
		СуммаВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа.Итог("УдержаноАгентом"); 
	КонецЕсли;
	
	ДебиторскаяЗадолженность = Новый ТаблицаЗначений;
	ДебиторскаяЗадолженность.Колонки.Добавить("Договор");
	ДебиторскаяЗадолженность.Колонки.Добавить("ДокументРасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("КратностьВзаиморасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("КурсВзаиморасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("Сумма");
	ДебиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	ДебиторскаяЗадолженность.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	
	НоваяСтрока = ДебиторскаяЗадолженность.Добавить();
	НоваяСтрока.Договор = Договор.ДоговорСоСлужбойДоставки;
	НоваяСтрока.КратностьВзаиморасчетов = ДанныеИБ.Кратность;
	НоваяСтрока.КурсВзаиморасчетов = ДанныеИБ.Курс;
	НоваяСтрока.Сумма = СуммаВзаиморасчетов;
	НоваяСтрока.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
	НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = "60.01";
	
	КредиторскаяЗадолженность = ДебиторскаяЗадолженность.Скопировать();
	КредиторскаяЗадолженность[0].Договор = Договор;
	КредиторскаяЗадолженность[0].СчетУчетаРасчетовСКонтрагентом = "76.02";
	
	ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ДебиторскаяЗадолженность);
	ДанныеXDTO.Вставить("КредиторскаяЗадолженность", КредиторскаяЗадолженность);
	
	ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности", СуммаВзаиморасчетов);
	ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", СуммаВзаиморасчетов);
	
	ДанныеXDTO.Вставить("СчетКт", "76.02");
	ДанныеXDTO.Вставить("СчетДт", "60.01");
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Комментарий) Тогда
		Комментарий = "#Перенос удержанных сумм на расчеты с поставщиком";
		ДанныеXDTO.Вставить("Комментарий", Комментарий);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПДС_НаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ВзносНаличными");
КонецПроцедуры
Процедура ПКО_Документ_ПДС_ПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
КонецПроцедуры
Процедура ПКО_Документ_ПередачаПереработчику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	РасширенныеДанныеИБ = ДанныеДокументаРасходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПередачаТоваровПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ПТ" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	
	СтруктураДоговора = Новый Структура;
			
	СтруктураДоговора.Вставить("ВидДоговора");
	СтруктураДоговора.Вставить("Наименование");
	СтруктураДоговора.Вставить("Организация");
	СтруктураДоговора.Вставить("РасчетыВУсловныхЕдиницах");
	СтруктураДоговора.Вставить("Контрагент");
	СтруктураДоговора.Вставить("Номер");
	СтруктураДоговора.Вставить("Дата");
	СтруктураДоговора.Вставить("ВалютаВзаиморасчетов");
	СтруктураДоговора.Вставить("ВидЦен");
			
	ЗаполнитьЗначенияСвойств(СтруктураДоговора, ДанныеИБ.Договор);
	
	СтруктураДоговора.ВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком;		
	СтруктураДоговора.Контрагент = ДанныеИБ.КонтрагентВладелец;
	СтруктураДоговора.ВалютаВзаиморасчетов = ДанныеИБ.Договор.ВалютаРасчетов;
	СтруктураДоговора.Дата = ДанныеИБ.Договор.ДатаДоговора;
	СтруктураДоговора.Номер = ДанныеИБ.Договор.НомерДоговора;
			
	СтруктураДоговора.Организация = ДанныеИБ.ОрганизацияПолучатель;
	
	СтруктураДоговора = Новый Структура("Значение, ИмяПКО", СтруктураДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
	ДанныеXDTO.Вставить("Договор", СтруктураДоговора);
	
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаПередачаТоваровПоступление(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДополнитьДаннымиГТД(ДанныеИБ, Товары, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	
	Если Услуги.Количество() > 0 Тогда
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПередачаТоваровРеализация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ПТ" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	СтруктураДоговора = Новый Структура;
			
	СтруктураДоговора.Вставить("ВидДоговора");
	СтруктураДоговора.Вставить("Наименование");
	СтруктураДоговора.Вставить("Организация");
	СтруктураДоговора.Вставить("РасчетыВУсловныхЕдиницах");
	СтруктураДоговора.Вставить("Контрагент");
	СтруктураДоговора.Вставить("Номер");
	СтруктураДоговора.Вставить("Дата");
	СтруктураДоговора.Вставить("ВалютаВзаиморасчетов");
	СтруктураДоговора.Вставить("ВидЦен");
			
	ЗаполнитьЗначенияСвойств(СтруктураДоговора, ДанныеИБ.Договор);
	
	СтруктураДоговора.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;		
	СтруктураДоговора.Контрагент = ДанныеИБ.КонтрагентПолучатель;
	СтруктураДоговора.ВалютаВзаиморасчетов = ДанныеИБ.Договор.ВалютаРасчетов;
	СтруктураДоговора.Дата = ДанныеИБ.Договор.ДатаДоговора;
	СтруктураДоговора.Номер = ДанныеИБ.Договор.НомерДоговора;
			
	СтруктураДоговора.Организация = ДанныеИБ.Организация;
	
	СтруктураДоговора = Новый Структура("Значение, ИмяПКО", СтруктураДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
	ДанныеXDTO.Вставить("Договор", СтруктураДоговора);
	
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ПодписьГлавногоБухгалтера.ФизическоеЛицо);
	ДанныеXDTO.Вставить("Руководитель", ДанныеИБ.ПодписьРуководителя.ФизическоеЛицо);
	ДанныеXDTO.Вставить("ОтпускПроизвел", ДанныеИБ.ПодписьКладовщика.ФизическоеЛицо);
	
	ДанныеXDTO.Вставить("ДоверенностьКомуВыдана", ДанныеИБ.ДоверенностьЛицо.Наименование);
	
	РасширенныеДанныеИБ = ДанныеДокументаПередачаТоваров(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДополнитьДаннымиГТД(ДанныеИБ, Товары, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	
	Если Услуги.Количество() > 0 Тогда
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПередачаТоваровСФПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеИБ.Дата);
		
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерВходящегоДокумента", ДанныеИБ.Номер);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаПолучения", ДанныеИБ.Дата);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ДокументыОснования.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	
	Для каждого СтрокаТаблицы Из ДанныеИБ.ДокументыОснования Цикл
		
		ДокументОснование = СтрокаТаблицы.ДокументОснование;
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПКО = "Документ_ПередачаТоваровПоступление_Отправка";
		
		СтрокаОснование = ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОснование, СтрокаТаблицы); 
		
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДокументОснование,ИмяПКО);
		
		СтрокаОснование.УчитыватьИсправлениеИсходногоДокумента = СтрокаТаблицы.УчитыватьИсправлениеИсходногоДокумента;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент", ДокументОснование.КонтрагентВладелец);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ДокументОснование.ОрганизацияПолучатель);
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	Авансы = Новый ТаблицаЗначений();
	Авансы.Колонки.Добавить("Сумма");
	Авансы.Колонки.Добавить("СтавкаНДС");
	Авансы.Колонки.Добавить("СуммаНДС");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс Тогда
		ИмяТЧ = "Авансы";
		Для каждого СтрокаТаблицы Из ДанныеИБ[ИмяТЧ] Цикл
			СтрокаАвансы = Авансы.Добавить();
			СтрокаАвансы.Сумма = СтрокаТаблицы.Сумма;
			СтрокаАвансы.СтавкаНДС = СтавкаНДССтрокой_Отправка(СтрокаТаблицы.СтавкаНДС);
			СтрокаАвансы.СуммаНДС = СтрокаТаблицы.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Авансы", Авансы);
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "Корректировочный");
		ДанныеXDTO.Вставить("ДатаИсходногоДокумента", Неопределено);
		ДанныеXDTO.Вставить("НомерИсходногоДокумента", Неопределено);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	ДанныеXDTO.Вставить("СуммаНДС", ДанныеИБ.СуммаНДСДокумента);
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаПеремещениеЗапасов_ВЭксплуатацию(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеЗапасов_НаРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаПеремещениеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
	
		Товары.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
		Если Товары.Колонки.Найти("СчетУчета") = Неопределено Тогда
		    Товары.Колонки.Добавить("СчетУчета");
		КонецЕсли;	
		
		КодСчета = "";
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы Тогда
			
			СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(ДанныеИБ.СчетЗатрат, ДанныеИБ);
			КодСчета = СтруктураСчета.КодСчета;
			
		КонецЕсли;	
	
		Для Каждого Строка ИЗ Товары Цикл
			Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			Иначе
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			КонецЕсли;
			
			Строка.СчетУчета = КодСчета;
			
		КонецЦикла;
		
		ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Количество", КомпонентыОбмена);
		Если ТаблицаТоварыГТД.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиницаПолучатель;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаПеремещениеЗапасов_ИзЭксплуатации(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
		ДанныеXDTO.Вставить("СкладОтправитель", Склад);
		ДанныеXDTO.Вставить("СкладПолучатель", Склад);
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница) Тогда
			ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиница);
			ДанныеXDTO.Вставить("СкладОтправитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиница, ИмяПКО));
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаПолучатель) Тогда
			ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаПолучатель);
			ДанныеXDTO.Вставить("СкладПолучатель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаПолучатель, ИмяПКО));
		КонецЕсли;
		
		Если ОбщегоНазначенияУНФ.ЭтоУНФ()
			И КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
			И ТипЗнч(КомпонентыОбмена.УзелКорреспондента) = Тип("ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
	
			РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				КомпонентыОбмена.УзелКорреспондента, "МагазиныРозницы");
			МассивМагазиныРозницы = РеквизитыУзлаОбмена.МагазиныРозницы.Выгрузить().ВыгрузитьКолонку("Склад");
			
			ДопДанныеПоСкладам = Новый Структура;
			ДопДанныеПоСкладам.Вставить("СкладУправляющейСистемыОтправитель", МассивМагазиныРозницы.Найти(ДанныеИБ.СтруктурнаяЕдиница) = Неопределено);
			ДопДанныеПоСкладам.Вставить("СкладУправляющейСистемыПолучатель", МассивМагазиныРозницы.Найти(ДанныеИБ.СтруктурнаяЕдиницаПолучатель) = Неопределено);
			
			ДанныеXDTO.Вставить("AdditionalInfo", ДопДанныеПоСкладам);
		КонецЕсли;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПеремещениеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПереоценкаВРозницеСуммовойУчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаПереоценкаВРозницеСуммовойУчет(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПересортицаОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ПТ" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование)
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		ДанныеXDTO.Вставить("Инвентаризация", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_ИнвентаризацияЗапасов_Отправка"));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПересортицаЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.ТоварыОприходование;
	Если Товары.Количество() > 0 Тогда
		ДополнитьДаннымиГТД(ДанныеИБ, Товары, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПересортицаСписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "ПТ" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаПересортицаЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.ТоварыСписание;
	Если Товары.Количество() > 0 Тогда
		ДополнитьДаннымиГТД(ДанныеИБ, Товары, КомпонентыОбмена);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетУчетаРасчетов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетДоходов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетДоходов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмКонвертации = АлгоритмВыгрузкиПКООтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
	ДанныеXDTO.Вставить("Сотрудник", СтруктураИнструкцияПКО);
			
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
		
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
		ВыручкаНТТ = Истина;
	Иначе
		ВыручкаНТТ = Ложь;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВыручкаНТТ", ВыручкаНТТ);
	
	ДанныеXDTO.Вставить("Склад", ДанныеИБ.КассаККМ.СтруктурнаяЕдиница);
КонецПроцедуры
Процедура ПКО_Документ_ПлатежноеПоручение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПеречислениеВБюджет = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
	ДанныеXDTO.Вставить("ПеречислениеВБюджет", ЭтоПеречислениеВБюджет);
	
	СтавкаНДССтрокой = СтавкаНДССтрокой_Отправка(ДанныеИБ.СтавкаНДС);
	ДанныеXDTO.Вставить("СтавкаНДС", СтавкаНДССтрокой);
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ПоказательДаты) Тогда
		ПоказательДаты = "0";
	Иначе
		ПоказательДаты = Формат(ДанныеИБ.ПоказательДаты, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	ДанныеXDTO.Вставить("ПоказательДаты", ПоказательДаты);
	
	ОбработатьНазначениеПлатежа(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПоступлениеСырьяОтДавальца_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		Товары.Колонки.Добавить("СчетУчета");
		Товары.ЗаполнитьЗначения("003.01", "СчетУчета");
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПриходнаяНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
		ДанныеXDTO.ВидОперации = "ПриемНаКомиссию";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку Тогда
		ДанныеXDTO.ВидОперации = "ПриемВПереработку";
	Иначе
		ДанныеXDTO.ВидОперации = "ПокупкаУПоставщика";
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		Заказ = ДанныеИБ.ДокументОснование;
	Иначе
		Заказ = Документы.СчетНаОплатуПоставщика.ПустаяСсылка();
	КонецЕсли;
	ДанныеXDTO.Вставить("Заказ", Заказ);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	РасширенныеДанныеИБ = ДанныеДокументаПриходнаяНакладная(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
	
	// Услуги, РасшифровкаДопРасходов
	Услуги = РасширенныеДанныеИБ.Услуги;
	РасшифровкаДопРасходов = РасширенныеДанныеИБ.РасшифровкаДопРасходов.Скопировать();
	РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	// Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура
	РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	// Не переносим как дополнительные расходы, если есть незаполненные документы поступления.
	НетБазыДляРаспределения = Ложь;
	ТипСоставногоСвойства = Неопределено;
	Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
	
		Если Не ДанныеИБ.СуммаВключаетНДС Тогда
			СтрокаРасшифровкаДопРасходов.Сумма = СтрокаРасшифровкаДопРасходов.Сумма - СтрокаРасшифровкаДопРасходов.СуммаНДС;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка) Тогда
			НетБазыДляРаспределения = Истина;
			Прервать;
		ИначеЕсли СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка = ДанныеИБ.Ссылка Тогда
			// Обходим защиту от зацикливания - записываем в качестве документа поступления уже преобразованное значение ссылки
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = ДанныеXDTO.КлючевыеСвойства;
			Если ТипСоставногоСвойства = Неопределено Тогда
				ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПриходнаяНакладная_Отправка");
				ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
			КонецЕсли;
			СтрокаРасшифровкаДопРасходов.ДокументПоступления.Вставить("ТипСоставногоСвойства", ТипСоставногоСвойства);
		Иначе
			СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, "Документ_ПриходнаяНакладная_Отправка");
		КонецЕсли;
	КонецЦикла;
		
	Если НетБазыДляРаспределения Тогда
		Услуги.ЗаполнитьЗначения(Ложь, "ЭтоДопРасходы");
		РасшифровкаДопРасходов.Очистить();
	КонецЕсли;
		
	Если Услуги.Количество() > 0 Тогда
		
		Услуги.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
	
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
			
			Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				СтрокаТаблицы.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			Иначе
				СтрокаТаблицы.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
		
	Если РасшифровкаДопРасходов.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	КонецЕсли;
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_Производство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ВыпускПродукцииНаСклад");
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница)
		И ДанныеИБ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", ДанныеИБ.СтруктурнаяЕдиница);
	Иначе
		ДанныеXDTO.Вставить("ПодразделениеЗатрат", Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаЗапасов) Тогда
			Склад = ДанныеИБ.СтруктурнаяЕдиницаЗапасов;
		Иначе
			Склад = ДанныеИБ.СтруктурнаяЕдиницаПродукции;
		КонецЕсли;
	КонецЕсли;
	
	ИмяПКО = ПКОДляСтруктурнойЕдиницы(Склад);
	ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", Склад, ИмяПКО));
	
	РасширенныеДанныеИБ = ДанныеДокументаПроизводство(ДанныеИБ);
	
	Продукция = РасширенныеДанныеИБ.Продукция;
	Если Продукция.Количество() > 0 Тогда
	
		Продукция.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
	
		Для Каждого Строка ИЗ Продукция Цикл
			Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			Иначе
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			КонецЕсли;
		КонецЦикла;
	
		ДанныеXDTO.Вставить("Продукция", Продукция);
	КонецЕсли;
	
	Материалы = РасширенныеДанныеИБ.Материалы;
	
	Материалы = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Материалы, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Количество", КомпонентыОбмена);
	
	Если Материалы.Количество() > 0 Тогда
	
		Материалы.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
		
		Для Каждого Строка ИЗ Материалы Цикл
			Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			Иначе
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			КонецЕсли;
		КонецЦикла;
	
		ДанныеXDTO.Вставить("Материалы", Материалы);
	КонецЕсли;
	
	ВозвратныеОтходы = РасширенныеДанныеИБ.ВозвратныеОтходы;
	
	Если ВозвратныеОтходы.Количество() > 0 Тогда
	
		ВозвратныеОтходы.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
		
		Для Каждого Строка ИЗ ВозвратныеОтходы Цикл
			Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			Иначе
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			КонецЕсли;
		КонецЦикла;
	
		ДанныеXDTO.Вставить("ВозвратныеОтходы", ВозвратныеОтходы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПроизводствоПеремещениеОтходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", ДанныеИБ.Дата);
	
	ДопПрефикс = "ПО";
	НомерДок = Лев(ДанныеИБ.Номер, 5) + ДопПрефикс + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	ДанныеXDTO.КлючевыеСвойства.Ссылка = Неопределено;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаЗапасов) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаЗапасов);
		ДанныеXDTO.Вставить("СкладОтправитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаПродукции, ИмяПКО));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаОтходов) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаОтходов);
		ДанныеXDTO.Вставить("СкладПолучатель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаОтходов, ИмяПКО));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПроизводствоВПеремещениеОтходов(ДанныеИБ);
	
	Отходы = РасширенныеДанныеИБ.Отходы;
	Если Отходы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Отходы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПроизводствоПеремещениеПродукции_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДопПрефикс = "ПП";
	НомерДок = Лев(ДанныеИБ.Номер, 5) + ДопПрефикс + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаЗапасов) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаЗапасов);
		ДанныеXDTO.Вставить("СкладОтправитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаЗапасов, ИмяПКО));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаПродукции) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаПродукции);
		ДанныеXDTO.Вставить("СкладПолучатель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаПродукции, ИмяПКО));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаПроизводствоВПеремещениеПродукции(ДанныеИБ);
	
	Продукция = РасширенныеДанныеИБ.Продукция;
	Если Продукция.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Продукция);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДопПрефикс = "ПР";
	НомерДок = Лев(ДанныеИБ.Номер, 5) + ДопПрефикс + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РаспределениеЗатрат_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерДок = Лев(ДанныеИБ.Номер, 5) + "РМ" + Сред(ДанныеИБ.Номер, 8);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерДок);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиница);
		ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиница, ИмяПКО));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаРаспределениеЗатрат(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Количество", КомпонентыОбмена);
	
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
	
		ТаблицаТоварыГТД.Колонки.Добавить("ГруппаАналитическогоУчетаНоменклатуры");
		
		Для Каждого Строка ИЗ ТаблицаТоварыГТД Цикл
			Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			Иначе
				Строка.ГруппаАналитическогоУчетаНоменклатуры = Новый Структура("Значение, ИмяПКО", Строка.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена));
			КонецЕсли;
		КонецЦикла;
	
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РасходнаяНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации
	ДанныеXDTO.Вставить("ВидОперации");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
		ДанныеXDTO.ВидОперации = "ПередачаНаКомиссию";
	Иначе
		ДанныеXDTO.ВидОперации = "РеализацияКлиенту";
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);               
	
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", ДанныеИБ.ПодписьГлавногоБухгалтера.ФизическоеЛицо);
	ДанныеXDTO.Вставить("Руководитель", ДанныеИБ.ПодписьРуководителя.ФизическоеЛицо);
	ДанныеXDTO.Вставить("ОтпускПроизвел", ДанныеИБ.ПодписьКладовщика.ФизическоеЛицо);
	
	ДанныеXDTO.Вставить("ДоверенностьКомуВыдана", ДанныеИБ.ДоверенностьЛицо.Наименование);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьЗаказыКакСчетаНаОплату 
		И КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьЗаказыПокупателей Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Заказ) Тогда
			Если ТипЗнч(ДанныеИБ.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Заказ, "Документ_ЗаказПокупателя_Отправка"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
			Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") 
				И КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСчетаНаОплату Тогда
				ДанныеXDTO.Вставить("Заказ", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, "Документ_СчетНаОплатуПокупателю_Отправка"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаРасходнаяНакладная(ДанныеИБ);
	   
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Сумма,СуммаНДС,Всего", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	
	Если Услуги.Количество() > 0 Тогда
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	
	ПогашениеЗадолженности = РасширенныеДанныеИБ.ПогашениеЗадолженности;
	Если ПогашениеЗадолженности.Количество() > 0 И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РасходыПриИмпорте_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НомерДекларации", ДанныеИБ.НомерГТД.Код);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалют.Валюта КАК Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсДокумента,
	|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьДокумента
	|ИЗ
	|	Документ.РасходыПриИмпорте КАК ТаможеннаяДекларация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалютыДокумента
	|		ПО ТаможеннаяДекларация.ВалютаДокумента = КурсВалютыДокумента.Валюта";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("КурсДокумента", Выборка.КурсДокумента);
	ДанныеXDTO.Вставить("КратностьДокумента", Выборка.КратностьДокумента);
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	РасширенныеДанныеИБ = ДанныеДокументаРасходыПриИмпорте(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Разделы = РасширенныеДанныеИБ.Разделы;
	Если Разделы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Разделы", Разделы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
		
		НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРП.Сотрудник = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
		НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		
		НомерВедомости = Лев(ДанныеИБ.Номер, 5) + "ЗС" + Сред(ДанныеИБ.Номер, 8);
		НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = НомерВедомости;
		НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеИБ.Дата;
		
	
	Иначе // выплата по ведомостям
		
		Для Каждого Строка Из ДанныеИБ.ВыплатаЗаработнойПлаты Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Ведомость) Тогда
				Продолжить;
			КонецЕсли;
				
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер, Сотрудники");
			ТаблицаЗарплатаВедомости = ДанныеВедомостиНаВыплатуЗП.Сотрудники.Выгрузить();
			
			Для Каждого СтрокаВедомости Из ТаблицаЗарплатаВедомости Цикл
				НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
				НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
				НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
				НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеВедомостиНаВыплатуЗП.Дата;
				НоваяСтрокаРП.Сотрудник = ФизЛицоПоСотруднику(СтрокаВедомости.Сотрудник);
				НоваяСтрокаРП.Сумма     = СтрокаВедомости.СуммаПлатежа;
		    КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ВзносНаличными");
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
		КодСчета = "50.02";
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетУчетаРасчетов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетРасходов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетРасходов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмКонвертации = АлгоритмВыгрузкиРКООтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомСписание(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
	ДанныеXDTO.Вставить("Сотрудник", СтруктураИнструкцияПКО);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) 
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение")
		И ДокументДоступенДляВыгрузки(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) 
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение")
		И ДокументДоступенДляВыгрузки(ДанныеИБ.ДокументОснование) Тогда
		 
		ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Для Каждого Строка Из ДанныеИБ.ВыплатаЗаработнойПлаты Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ведомость) Тогда
			Продолжить;
		КонецЕсли;
		
		// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
		ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер, Сотрудники");
		ТаблицаЗарплатаВедомости = ДанныеВедомостиНаВыплатуЗП.Сотрудники.Выгрузить();
		
		Для Каждого СтрокаВедомости Из ТаблицаЗарплатаВедомости Цикл
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеВедомостиНаВыплатуЗП.Дата;
			Если ЗначениеЗаполнено(СтрокаВедомости.Сотрудник) Тогда
				НоваяСтрокаРП.Сотрудник = ФизЛицоПоСотруднику(СтрокаВедомости.Сотрудник);
			КонецЕсли;
			НоваяСтрокаРП.Сумма     = СтрокаВедомости.СуммаПлатежа;
		КонецЦикла;
	КонецЦикла;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда // зарплата сотруднику
		
		НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		Если ЗначениеЗаполнено(ДанныеИБ.Подотчетник) Тогда
			НоваяСтрокаРП.Сотрудник = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
		КонецЕсли;
		НоваяСтрокаРП.Сумма     = ДанныеИБ.СуммаДокумента;
		
	КонецЕсли;
	
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	ОбработатьНазначениеПлатежа(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) 
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение")
		И ДокументДоступенДляВыгрузки(ДанныеИБ.ДокументОснование) Тогда
		  
		ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	Если ЗначениеЗаполнено(ДанныеИБ.Подотчетник) Тогда
		ДанныеXDTO.Вставить("Сотрудник", ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник));
	КонецЕсли;
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда // зарплата сотруднику
		
		НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		НоваяСтрокаРП.Сумма     = ДанныеИБ.СуммаДокумента;
		
	КонецЕсли;
	
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	ОбработатьНазначениеПлатежа(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) 
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение")
		И ДокументДоступенДляВыгрузки(ДанныеИБ.ДокументОснование) Тогда
		   
		ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, Истина);
	
	Если Не (ДанныеXDTO.Свойство("ПоказательКБК") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательКБК))
		И ЗначениеЗаполнено(ДанныеИБ.ВидНалога) Тогда
		КодБК = ДанныеИБ.ВидНалога.КодБК;
		Если ЗначениеЗаполнено(КодБК) Тогда
			Если СтрДлина(КодБК) < 20 Тогда
				КодБК = Прав("00000000000000000000" + КодБК, 20);
			КонецЕсли;
			ДанныеXDTO.Вставить("ПоказательКБК", КодБК);
		КонецЕсли;
	КонецЕсли;
	
	Если Не (ДанныеXDTO.Свойство("ПоказательПериода") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательПериода)) Тогда
		НалоговыйПериод = ДобавитьМесяц(ДанныеИБ.Дата, -1);
		ПоказательПериода = "МС." + Формат(НалоговыйПериод, "ДФ=MM") + "." + Формат(НалоговыйПериод, "ДФ=yyyy");
		ДанныеXDTO.Вставить("ПоказательПериода", ПоказательПериода);
	КонецЕсли;
	
	Если НЕ ДанныеXDTO.Свойство("ПоказательДаты") 
		И ЗначениеЗаполнено(ДанныеXDTO.ПоказательДаты) Тогда
		ДанныеXDTO.Вставить("ПоказательДаты", "0");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.Статья;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
	
	ОбработатьНазначениеПлатежа(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) 
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение")
		И ДокументДоступенДляВыгрузки(ДанныеИБ.ДокументОснование) Тогда
		
		ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");	
		
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		СчетУчета = ДанныеИБ.Корреспонденция;
		СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
		КодСчета = СтруктураСчета.КодСчета;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодСчета) Тогда
		КодСчета = "91.02";
	КонецЕсли;
	
	СуммаДокументаВсего = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("Сумма", СуммаДокументаВсего);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = СуммаДокументаВсего;
	НоваяСтрока.СчетУчетаРасчетов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	
	ОбработатьНазначениеПлатежа(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) 
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") 
		И ДокументДоступенДляВыгрузки(ДанныеИБ.ДокументОснование) Тогда
		
		ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
		КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
	Иначе
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
		    СчетУчета = "91.02";
		Иначе
			СчетУчета = ДанныеИБ.Корреспонденция;
			СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
			КодСчета = СтруктураСчета.КодСчета;
		КонецЕсли;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетРасходов");
	
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.Статья;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрока.СчетРасходов = КодСчета;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	
	ОбработатьНазначениеПлатежа(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) 
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") 
		И ДокументДоступенДляВыгрузки(ДанныеИБ.ДокументОснование) Тогда
		
		ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	АлгоритмКонвертации = АлгоритмВыгрузкиСБДСОтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомСписание(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
	
	ОбработатьНазначениеПлатежа(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) 
		И ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение")
		И ДокументДоступенДляВыгрузки(ДанныеИБ.ДокументОснование) Тогда
		   
		ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
		ДанныеXDTO.Вставить("ПлатежноеПоручение", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ДокументОснование, ИмяПКО));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
	
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	
	СтруктураИнструкцияПКО = ФизЛицоПоСотруднику(ДанныеИБ.Подотчетник);
	ДанныеXDTO.Вставить("Сотрудник", СтруктураИнструкцияПКО);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	ОбработатьНазначениеПлатежа(ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДССнятиеНаличных_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НазначениеПлатежа", Сред(ДанныеИБ.НазначениеПлатежа,1,210));
КонецПроцедуры
Процедура ПКО_Документ_СписаниеЗапасов_ИзЭксплуатации_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаСписаниеЗапасов_СписаниеИзЭкспл(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаСписаниеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Количество", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СписаниеТоваровПоИнвентаризации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	РасширенныеДанныеИБ = ДанныеДокументаСписаниеЗапасов(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	
	ТаблицаТоварыГТД = ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, Товары, РасширенныеДанныеИБ.СведенияПрослеживаемости, "Количество", КомпонентыОбмена);
	Если ТаблицаТоварыГТД.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТоварыГТД);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетНаОплатуПокупателю_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);  
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.БанковскийСчет) Тогда 
		
		Если ЗначениеЗаполнено(ДанныеИБ.Организация) 
			И ЗначениеЗаполнено(ДанныеИБ.Организация.БанковскийСчетПоУмолчанию)
			И ДанныеИБ.ВалютаДокумента = ДанныеИБ.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств Тогда
			
			ДанныеXDTO.Вставить("БанковскийСчетОрганизации", ДанныеИБ.Организация.БанковскийСчетПоУмолчанию);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаСчетНаОплату(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	
	Если Услуги.Количество() > 0 Тогда
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетНаОплатуПоставщика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);  
	
	РасширенныеДанныеИБ = ДанныеДокументаСчетНаОплатуПоставщика(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	
	Если Услуги.Количество() > 0 Тогда
		МассивСтрокКУдалению = Новый Массив; // в формате для услуг недоступны нулевые продажи
		
		Для каждого СтрокаТаблицы Из Услуги Цикл 
			Если СтрокаТаблицы.Цена = 0 ИЛИ СтрокаТаблицы.Сумма = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
			
		Для каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
			Услуги.Удалить(СтрокаТаблицы);
		КонецЦикла;
			
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);
	
	УчитыватьИсправлениеИсходногоДокумента = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	СчетФактураДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	СчетФактураДокументыОснования.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураДокументыОснования.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|ГДЕ
	|	СчетФактураДокументыОснования.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(ВТ_ДанныеДокумента.НомерИсходногоДокумента) КАК НомерИсходногоДокумента,
	|	МАКСИМУМ(ВТ_ДанныеДокумента.ДатаИсходногоДокумента) КАК ДатаИсходногоДокумента,
	|	МАКСИМУМ(ВТ_ДанныеДокумента.УчитыватьИсправлениеИсходногоДокумента) КАК УчитыватьИсправлениеИсходногоДокумента,
	|	МАКСИМУМ(ВТ_ДанныеДокумента.НомерИсправленияИсходногоДокумента) КАК НомерИсправленияИсходногоДокумента,
	|	МАКСИМУМ(ВТ_ДанныеДокумента.ДатаИсправленияИсходногоДокумента) КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеДокумента.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента,
	|	СчетФактураДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента
	|ИЗ
	|	Документ.СчетФактура.ДатаНомерДокументовОплаты КАК СчетФактураДатаНомерДокументовОплаты
	|ГДЕ
	|	СчетФактураДатаНомерДокументовОплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураЗапасы.Номенклатура КАК Номенклатура,
	|	СчетФактураЗапасы.Содержание КАК Содержание,
	|	СчетФактураЗапасы.Сумма КАК Сумма,
	|	СчетФактураЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СчетФактураЗапасы.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетФактура.Авансы КАК СчетФактураЗапасы
	|ГДЕ
	|	СчетФактураЗапасы.Ссылка = &Ссылка";
			
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	ВыборкаОснования = МассивРезультатов[1].Выбрать();
	ВыборкаПлатежноРасчетныеДокументы = МассивРезультатов[2].Выбрать();
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ДокументыОснования.Колонки.Добавить("НомерИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("ДатаИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
	ДокументыОснования.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");
	
	ДокументОснование = Неопределено;
	Пока ВыборкаОснования.Следующий() Цикл
		
		ДокументОснование = ВыборкаОснования.ДокументОснование;
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
	
		ИмяПКО = ИмяПКОДляДокумента(ДокументОснование);
			
		СтрокаОснование = ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОснование, ВыборкаОснования); 
		
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДокументОснование,ИмяПКО);
		
		УчитыватьИсправлениеИсходногоДокумента = ВыборкаОснования.УчитыватьИсправлениеИсходногоДокумента;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	ДанныеXDTO.Вставить("УчитыватьИсправлениеИсходногоДокумента", УчитыватьИсправлениеИсходногоДокумента);
	
	ПлатежноРасчетныеДокументы = Новый ТаблицаЗначений;
	ПлатежноРасчетныеДокументы.Колонки.Добавить("ДатаДокумента");
	ПлатежноРасчетныеДокументы.Колонки.Добавить("НомерДокумента");
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Корректировка Тогда
		Пока ВыборкаПлатежноРасчетныеДокументы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента)
				И ЗначениеЗаполнено(ВыборкаПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента) Тогда
				СтрокаПлатежноРасчетныйДокумент = ПлатежноРасчетныеДокументы.Добавить();
				СтрокаПлатежноРасчетныйДокумент.ДатаДокумента = ВыборкаПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента;
				СтрокаПлатежноРасчетныйДокумент.НомерДокумента = ВыборкаПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента;
		    КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатежноРасчетныеДокументы);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Выставлен", Истина);
	ДанныеXDTO.Вставить("ДатаВыставления", ?(ЗначениеЗаполнено(ДанныеИБ.ДатаВыставления), ДанныеИБ.ДатаВыставления, ДанныеИБ.Дата));
	ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	ДанныеXDTO.Вставить("СуммаНДС", ДанныеИБ.СуммаНДСДокумента);
	
	Авансы = Новый ТаблицаЗначений();
	Авансы.Колонки.Добавить("Номенклатура");
	Авансы.Колонки.Добавить("Содержание");
	Авансы.Колонки.Добавить("Сумма");
	Авансы.Колонки.Добавить("СтавкаНДС");
	Авансы.Колонки.Добавить("СуммаНДС");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс Тогда
		ВыборкаАвансы = МассивРезультатов[3].Выбрать();
	
		Пока ВыборкаАвансы.Следующий() Цикл
			СтрокаАвансы = Авансы.Добавить();
			СтрокаАвансы.Номенклатура = ВыборкаАвансы.Номенклатура;
			СтрокаАвансы.Содержание = ВыборкаАвансы.Содержание;
			СтрокаАвансы.Сумма = ВыборкаАвансы.Сумма;
			СтрокаАвансы.СтавкаНДС = СтавкаНДССтрокой_Отправка(ВыборкаАвансы.СтавкаНДС);
			СтрокаАвансы.СуммаНДС = ВыборкаАвансы.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Авансы", Авансы);
	
	
	// Заполнение кода вида операции
	КодВидаОперации = "01";
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс Тогда
		
		КодВидаОперации = "02";
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			КодВидаОперации = "26"; // авансы по подарочным сертификатам
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента Тогда
		
		КодВидаОперации = "02";
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы Тогда
		
		КодВидаОперации = "01";
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("КодВидаОперации", КодВидаОперации);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ДатаВходящегоДокумента) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеИБ.ДатаВходящегоДокумента);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ДатаВходящегоДокумента", ДанныеИБ.Дата);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеИБ.НомерВходящегоДокумента) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НомерВходящегоДокумента", ДанныеИБ.НомерВходящегоДокумента);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("НомерВходящегоДокумента", "0");
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДатаПолучения) Тогда
		ДанныеXDTO.Вставить("ДатаПолучения", ДанныеИБ.ДатаПолучения);
	Иначе
		ДанныеXDTO.Вставить("ДатаПолучения", ДанныеИБ.Дата);
	КонецЕсли;
	
	ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Договор);               
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ДокументыОснования.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	
	Для каждого СтрокаТаблицы Из ДанныеИБ.ДокументыОснования Цикл
		
		ДокументОснование = СтрокаТаблицы.ДокументОснование;
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПКО = ИмяПКОДляДокумента(ДокументОснование);
		
		СтрокаОснование = ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОснование, СтрокаТаблицы); 
		
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДокументОснование,ИмяПКО);
		
		СтрокаОснование.УчитыватьИсправлениеИсходногоДокумента = СтрокаТаблицы.УчитыватьИсправлениеИсходногоДокумента;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	Авансы = Новый ТаблицаЗначений();
	Авансы.Колонки.Добавить("Сумма");
	Авансы.Колонки.Добавить("СтавкаНДС");
	Авансы.Колонки.Добавить("СуммаНДС");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Аванс Тогда
		ИмяТЧ = "Авансы";
		Если ДанныеИБ.Авансы.Количество() = 0 Тогда
			Если ДанныеИБ.Метаданные().ТабличныеЧасти.Найти("УдалитьЗапасы") <> Неопределено
				И ДанныеИБ.УдалитьЗапасы.Количество() > 0 Тогда
				ИмяТЧ = "УдалитьЗапасы";
			КонецЕсли;
		КонецЕсли;
	
		Для каждого СтрокаТаблицы Из ДанныеИБ[ИмяТЧ] Цикл
			СтрокаАвансы = Авансы.Добавить();
			СтрокаАвансы.Сумма = СтрокаТаблицы.Сумма;
			СтрокаАвансы.СтавкаНДС = СтавкаНДССтрокой_Отправка(СтрокаТаблицы.СтавкаНДС);
			СтрокаАвансы.СуммаНДС = СтрокаТаблицы.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Авансы", Авансы);
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "Корректировочный");
		ДанныеXDTO.Вставить("ДатаИсходногоДокумента", Неопределено);
		ДанныеXDTO.Вставить("НомерИсходногоДокумента", Неопределено);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	ДанныеXDTO.Вставить("СуммаНДС", ДанныеИБ.СуммаНДСДокумента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.Покупатель,
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.Субкомиссионер,
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.Сумма,
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.НДС КАК СуммаНДС,
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.СчетФактура КАК СчетФактураВыданный
	|ИЗ
	|	Документ.СчетФактураПолученный.СчетаФактурыВыданныеПокупателям КАК СчетФактураПолученныйСчетаФактурыВыданныеПокупателям
	|ГДЕ
	|	СчетФактураПолученныйСчетаФактурыВыданныеПокупателям.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СчетаФактурыВыданныеПокупателям = Новый ТаблицаЗначений;
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("Покупатель");
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("Субкомиссионер");
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("Сумма");
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("СуммаНДС");
	СчетаФактурыВыданныеПокупателям.Колонки.Добавить("СчетФактураВыданный");
	
	Пока Выборка.Следующий() Цикл
	
		СтрокаСчетаФактураВыданныйПокупателю = СчетаФактурыВыданныеПокупателям.Добавить();
		ЗаполнитьЗначенияСвойств(СчетаФактурыВыданныеПокупателям, Выборка);
	
	КонецЦикла;
	
	Если СчетаФактурыВыданныеПокупателям.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("СчетаФактурыВыданныеПокупателям", СчетаФактурыВыданныеПокупателям);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	
	Если ДанныеИБ.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеИБ.Ссылка) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
	КонецЕсли;
	
	Если ДанныеИБ.Свойство("ТипЦен") Тогда
		ДанныеXDTO.Вставить("ТипЦен", ДанныеИБ.ТипЦен);
	Иначе
		ДанныеXDTO = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_УстановкаЦенНоменклатурыРегистр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДатаСтрокой = СтрЗаменить(ДанныеИБ.Отбор.Период.Значение, "/", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ".", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", "");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, " ", "");
		
		НомерСтрокой = Сред(ДатаСтрокой,1,6) + Прав(ДанныеИБ.Отбор.Номенклатура.Значение.Код, "3") + Прав(ДанныеИБ.Отбор.ВидЦен.Значение.Код, "2");
		
			// Свойство, соответствующее отбору, заполняется из отбора в наборе записей.
		ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", ДанныеИБ.Отбор.Период.Значение);
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", НомерСтрокой);
		
		ДанныеXDTO.Вставить("ТипЦен", ДанныеИБ.Отбор.ВидЦен.Значение);
		
		// Подготовка таблицы значений, содержащую данные из набора записей.
		Записи = Новый ТаблицаЗначений;
		Записи.Колонки.Добавить("Номенклатура");
		Записи.Колонки.Добавить("Характеристика");
		Записи.Колонки.Добавить("Цена");
		
		Для Каждого СтрокаНабора Из ДанныеИБ Цикл
			СтрокаЗаписи = Записи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
			
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.6")
				И НЕ (ЗначениеЗаполнено(СтрокаНабора.Характеристика.Владелец) И ТипЗнч(СтрокаНабора.Характеристика.Владелец) = Тип("СправочникСсылка.Номенклатура")) Тогда
				СтрокаЗаписи.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		Если Записи.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Товары", Записи);
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДобавитьТаблицуДополнительныеРеквизиты(ДанныеXDTO);
	
	СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
	СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "СообщениеОбОшибке"); 
	СтрокаДопРеквизита.ЗначениеСвойства = ""; 
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФискальныеОперации.Дата                    КАК Дата,
		|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
		|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|ГДЕ
		|	ФискальныеОперации.ДокументОснование = &ДокументСсылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
	
		СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "ФискальныйПризнак"); 
		СтрокаДопРеквизита.ЗначениеСвойства = Выборка.ФискальныйПризнак; 
		
		Если Выборка.ФискальныйПризнак = "Да" Тогда
			СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "Состояние"); 
			СтрокаДопРеквизита.ЗначениеСвойства = "ПробитИзОчередиФискализации"; 
		КонецЕсли;
	
		СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "ДатаЧекаККМ"); 
		СтрокаДопРеквизита.ЗначениеСвойства = Выборка.Дата; 
	
		СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "НомерФискальногоДокумента"); 
		СтрокаДопРеквизита.ЗначениеСвойства = Выборка.НомерЧекаККМ; 
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМВозврат_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДобавитьТаблицуДополнительныеРеквизиты(ДанныеXDTO);
	
	СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
	СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "СообщениеОбОшибке"); 
	СтрокаДопРеквизита.ЗначениеСвойства = ""; 
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФискальныеОперации.Дата                    КАК Дата,
		|	ФискальныеОперации.НомерЧекаККМ            КАК НомерЧекаККМ,
		|	ФискальныеОперации.ФискальныйПризнак       КАК ФискальныйПризнак
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|ГДЕ
		|	ФискальныеОперации.ДокументОснование = &ДокументСсылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
	
		СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "ФискальныйПризнак"); 
		СтрокаДопРеквизита.ЗначениеСвойства = Выборка.ФискальныйПризнак; 
		
		Если Выборка.ФискальныйПризнак = "Да" Тогда
			СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "Состояние"); 
			СтрокаДопРеквизита.ЗначениеСвойства = "ПробитИзОчередиФискализации"; 
		КонецЕсли;
	
		СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "ДатаЧекаККМ"); 
		СтрокаДопРеквизита.ЗначениеСвойства = Выборка.Дата; 
	
		СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизита.Свойство = Новый Структура("Наименование", "НомерФискальногоДокумента"); 
		СтрокаДопРеквизита.ЗначениеСвойства = Выборка.НомерЧекаККМ; 
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_ПодразделениеВПроизводственныйСклад_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУНФ.ЭтоУНФ()
		И КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И ТипЗнч(КомпонентыОбмена.УзелКорреспондента) = Тип("ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента, "МагазиныРозницы");
		МассивМагазиныРозницы = РеквизитыУзлаОбмена.МагазиныРозницы.Выгрузить().ВыгрузитьКолонку("Склад");
		ДанныеXDTO.Вставить("AdditionalInfo", Новый Структура("СкладУправляющейСистемы", МассивМагазиныРозницы.Найти(ДанныеИБ.Ссылка) = Неопределено));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Инструкция.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеИБ.ВидСчета) <> "Расчетный"
		И СокрЛП(ДанныеИБ.ВидСчета) <> "Депозитный"
		И СокрЛП(ДанныеИБ.ВидСчета) <> "Ссудный" Тогда
		
		ДанныеXDTO.Вставить("ВидСчета", "Иной");
	Иначе
		ДанныеXDTO.Вставить("ВидСчета", ДанныеИБ.ВидСчета);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВыводитьМесяцПрописью", (ДанныеИБ.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью));
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВалютаДенежныхСредств) Тогда
		ДанныеXDTO.Вставить("ВалютаДенежныхСредств", ДанныеИБ.ВалютаДенежныхСредств);
	Иначе
		ДанныеXDTO.Вставить("ВалютаДенежныхСредств", Константы.НациональнаяВалюта.Получить());
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_БонусныеПрограммы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Валюта = Константы.НациональнаяВалюта.Получить();
	
	ДанныеXDTO.Вставить("КурсКонвертацииБонусовВВалюту", 1);
	ДанныеXDTO.Вставить("ВалютаКонвертацииБонусов", Валюта);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаКонвертацииБонусов", Валюта);
КонецПроцедуры
Процедура ПКО_Справочник_ДисконтныеКарты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВладелецКарты)  Тогда
		ДанныеXDTO.Вставить("ОчиститьДанныеXDTO", Истина);
	Иначе
		
		СтруктураВладельца = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ВладелецКарты, "Справочник_Контрагенты_Отправка");
		БонуснаяПрограмма  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Владелец, "БонуснаяПрограмма");
		
		Если ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
			ДанныеXDTO.Вставить("ПрограммаЛояльности", БонуснаяПрограмма);
		КонецЕсли;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВладелецКарты", СтруктураВладельца);
		
		Если ЗначениеЗаполнено(ДанныеИБ.КодКартыШтрихкод) Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКарты", ДанныеИБ.КодКартыШтрихкод);
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКарты", ДанныеИБ.Наименование);
		КонецЕсли;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДисконтнойКарты", ДанныеИБ.Владелец.Наименование);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Свойство, соответствующее отбору, заполняется из отбора в наборе записей.
		ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
		ДанныеXDTO.Вставить("ВидДокументаОтбор", ДанныеИБ.Отбор.ВидДокумента.Значение);
		ДанныеXDTO.Вставить("ПериодОтбор", ДанныеИБ.Отбор.Период.Значение);
		
		// Подготовка таблицы значений, содержащую данные из набора записей.
		Записи = Новый ТаблицаЗначений;
		Записи.Колонки.Добавить("ФизическоеЛицо");
		Записи.Колонки.Добавить("ВидДокумента");
		Записи.Колонки.Добавить("Период");
		Записи.Колонки.Добавить("Серия");
		Записи.Колонки.Добавить("Номер");
		Записи.Колонки.Добавить("ДатаВыдачи");
		Записи.Колонки.Добавить("СрокДействия");
		Записи.Колонки.Добавить("КемВыдан");
		Записи.Колонки.Добавить("КодПодразделения");
		Записи.Колонки.Добавить("Представление");
		
		Для Каждого СтрокаНабора Из ДанныеИБ Цикл
			СтрокаЗаписи = Записи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
			
			СтрокаЗаписи.ФизическоеЛицо = СтрокаНабора.Физлицо;
	
		КонецЦикла;
		
		Если Записи.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Записи", Записи);
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ИнформативныеОстатки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", ТекущаяДатаСеанса());
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ДанныеИБ.Отбор.Организация.Значение);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Склад", ДанныеИБ.Отбор.СтруктурнаяЕдиница.Значение);
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("КоличествоНаСкладе");
	
	Для каждого СтрокаОстатков Из ДанныеИБ Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
		НоваяСтрока.КоличествоНаСкладе = СтрокаОстатков.Количество;
	КонецЦикла;
	
	Если (КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "КабинетКлиента"	
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУРМК")
		И ДанныеИБ.Количество() = 0 Тогда		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура = ДанныеИБ.Отбор.Номенклатура.Значение;
		НоваяСтрока.Характеристика = ДанныеИБ.Отбор.Характеристика.Значение;
		НоваяСтрока.КоличествоНаСкладе = 0;	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
Процедура ПКО_Справочник_КассыККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		
		ПараметрыПолитики = ПараметрыНалогообложения(ДанныеИБ.Владелец);
			
		Если ПараметрыПолитики <> Неопределено Тогда
			
			Если ПараметрыПолитики.ПлательщикЕНВД Тогда
				СистемаНалогообложения = "ЕНВД";
			ИначеЕсли ПараметрыПолитики.ПлательщикУСН Тогда
				Если ПараметрыПолитики.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
					СистемаНалогообложения = "УпрощеннаяДоход";
				Иначе
					СистемаНалогообложения = "УпрощеннаяДоходМинусРасход";
				КонецЕсли;
			Иначе
				СистемаНалогообложения = "Общая";
			КонецЕсли;
				 
			ДанныеXDTO.Вставить("СистемаНалогообложения", СистемаНалогообложения);
		
		КонецЕсли;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
КонецПроцедуры
Процедура ПКО_Справочник_КатегорииНоменклатурыВН_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Попытка
		Если НЕ ЗначениеЗаполнено(ДанныеИБ.ТипНоменклатурыПоУмолчанию) Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
			ДанныеXDTO.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойДоговор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(ДанныеИБ.Ссылка);
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
		Если ЗначениеЗаполнено(ОсновнойДоговор.Организация) И КомпонентыОбмена.ПараметрыКонвертации.МассивОрганизаций.Найти(ОсновнойДоговор.Организация) <> Неопределено Тогда
			ДанныеXDTO.Вставить("ОсновнойДоговор", ОсновнойДоговор);
		КонецЕсли;
	Иначе
		ДанныеXDTO.Вставить("ОсновнойДоговор", ОсновнойДоговор);
	КонецЕсли;
		
	ЭтоОбособленноеПодразделение = ЗначениеЗаполнено(ДанныеИБ.ГоловнойКонтрагент);
	ДанныеXDTO.Вставить("ОбособленноеПодразделение", ЭтоОбособленноеПодразделение);
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСНО = Новый Структура("Организация,Склад,СистемаНалогообложения");
		
	// Инициализируется в ОфлайнОборудование1СККМEDВызовСервера.
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ЭкземплярОборудования") Тогда
		ЭкземплярОборудования = КомпонентыОбмена.ПараметрыКонвертации.ЭкземплярОборудования;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилоОбмена.СтруктурнаяЕдиница КАК Склад,
		|	ПравилоОбмена.СтруктурнаяЕдиница.Организация КАК Организация
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилоОбмена
		|ГДЕ
		|	ПравилоОбмена.Ссылка = &ПравилоОбмена";
		
		Запрос.УстановитьПараметр("ПравилоОбмена",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭкземплярОборудования, "ПравилоОбмена"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыСНО,Выборка); 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСНО.Организация <> Неопределено Тогда
		ПараметрыСНО.Вставить("СистемаНалогообложения", РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьТипСистемыНалогообложенияККТОрганизации(
			ПараметрыСНО.Организация));
		
		ИнструкцияСНО = Новый Структура;
		ИнструкцияСНО.Вставить("ИмяПКО",   "СистемыНалогообложения");
		ИнструкцияСНО.Вставить("Значение", ПараметрыСНО.СистемаНалогообложения);
		ДанныеXDTO.Вставить("СистемаНалогообложения", ИнструкцияСНО);
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
		ДанныеXDTO.Вставить("ВидНоменклатуры", Новый Структура("Значение, ИмяПКО", ДанныеИБ.КатегорияНоменклатуры, "Справочник_КатегорииНоменклатурыВН_Отправка"));
		
		Если ТипЗнч(ДанныеИБ) <> Тип("Структура") Тогда
			ДанныеXDTO.Вставить("ГруппаАналитическогоУчета", Новый Структура("Значение, ИмяПКО", ДанныеИБ.НаправлениеДеятельности, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена)));
		КонецЕсли;
	Иначе
		ДанныеXDTO.Вставить("ГруппаАналитическогоУчета", Новый Структура("Значение, ИмяПКО", ДанныеИБ.КатегорияНоменклатуры, ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена)));
	КонецЕсли;
	
	СтавкаНДССсылка = Справочники.СтавкиНДС.СтавкаНДС(ДанныеИБ.ВидСтавкиНДС);
	Если СтавкаНДССсылка.НеОблагается Тогда
		СтавкаНДС = "БезНДС";
	ИначеЕсли СтавкаНДССсылка.Ставка = 18
		И НЕ СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС18";
	ИначеЕсли СтавкаНДССсылка.Ставка = 18
		И СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС18_118";
	ИначеЕсли СтавкаНДССсылка.Ставка = 10 
		И НЕ СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС10";
	ИначеЕсли СтавкаНДССсылка.Ставка = 10 
		И СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС10_110";
	ИначеЕсли СтавкаНДССсылка.Ставка = 20 
		И НЕ СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС20";
	ИначеЕсли СтавкаНДССсылка.Ставка = 20 
		И СтавкаНДССсылка.Расчетная Тогда
		СтавкаНДС = "НДС20_120";
	ИначеЕсли СтавкаНДССсылка.Ставка = 0 Тогда
		СтавкаНДС = "НДС0";
	Иначе
		СтавкаНДС = "БезНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("СтавкаНДС", СтавкаНДС);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукции) Тогда
		СтруктураВидАП = Новый Структура("Код, Наименование, ВидЛицензии");
		ЗаполнитьЗначенияСвойств(СтруктураВидАП, ДанныеИБ.ВидАлкогольнойПродукции);
		Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии) Тогда
			ВидЛицензии = "";
			Если ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво Тогда
				ВидЛицензии = "Пиво";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция Тогда
				ВидЛицензии = "АлкогольнаяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяПищеваяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукции.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяНеПищеваяПродукция";
			КонецЕсли;
			СтруктураВидАП.Вставить("ВидЛицензии", ВидЛицензии);
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", СтруктураВидАП);
	Иначе
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ТоварнаяНоменклатураВЭД)
		И ОбщегоНазначения.СсылкаСуществует(ДанныеИБ.ТоварнаяНоменклатураВЭД) Тогда
		
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
			ЗначениеКодаТНВЭД = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ТоварнаяНоменклатураВЭД, "Справочник_КлассификаторТНВЭД_ЭлементСправочника");
		Иначе
			ЗначениеКодаТНВЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ТоварнаяНоменклатураВЭД, "Код, Наименование");
		КонецЕсли;
	
		ДанныеXDTO.Вставить("КодТНВЭД", ЗначениеКодаТНВЭД);
		
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8")
		И КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьКартинкиНоменклатуры = Истина
		И ЗначениеЗаполнено(ДанныеИБ.ФайлКартинки) Тогда
		
		ДанныеXDTO.Вставить("ОсновнаяКартинка", ДанныеИБ.ФайлКартинки);
	КонецЕсли;
	
	Цена = Неопределено;
	
	ОтборЦен = Новый Структура;
	ОтборЦен.Вставить("ВидЦен", Справочники.ВидыЦен.Учетная);
	ОтборЦен.Вставить("Номенклатура", ДанныеИБ.Ссылка);
	ОтборЦен.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Цены = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(ТекущаяДатаСеанса(), ОтборЦен);
	Если Цены.Количество() <> 0 Тогда
		Цена = Цены[0].Цена;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.14") Тогда
		ДанныеXDTO.Вставить("ПризнакПредметаРасчета",
			Новый Структура("Значение, ИмяПКО", ДанныеИБ.ПризнакПредметаРасчета, "Перечисление_ПризнакиПредметаРасчета14"));
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.8") Тогда
		ДанныеXDTO.Вставить("ВидПродукцииИС",
			Новый Структура("Значение, ИмяПКО", ДанныеИБ.ВидПродукцииИС, "Перечисление_ВидыПродукцииИС18"));
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура;
	
	РеквизитыОбъектаВДопСвойствах = Новый Структура;
	РеквизитыОбъектаВДопСвойствах.Вставить("Вес");
	РеквизитыОбъектаВДопСвойствах.Вставить("Высота");
	РеквизитыОбъектаВДопСвойствах.Вставить("ГарантийныйСрок");
	РеквизитыОбъектаВДопСвойствах.Вставить("Весовой");
	РеквизитыОбъектаВДопСвойствах.Вставить("Длина");
	РеквизитыОбъектаВДопСвойствах.Вставить("Объем");
	РеквизитыОбъектаВДопСвойствах.Вставить("Ширина");
	РеквизитыОбъектаВДопСвойствах.Вставить("ЭтоНабор");
	РеквизитыОбъектаВДопСвойствах.Вставить("ЭтоНовинка");
	ЗаполнитьЗначенияСвойств(РеквизитыОбъектаВДопСвойствах, ДанныеИБ);
	
	ПризнакПредметаРасчета = РозничныеПродажиСервер.ПолучитьПризнакПредметаРасчета(ДанныеИБ);
	КодПризнакаПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодПризнакаПредметаРасчета(ПризнакПредметаРасчета);
	
	ДополнительнаяИнформация.Вставить("ДополнительныеРеквизитыОбъекта", РеквизитыОбъектаВДопСвойствах);
	ДополнительнаяИнформация.Вставить("Цена", Цена);
	ДополнительнаяИнформация.Вставить("КодПризнакаПредметаРасчета", КодПризнакаПредметаРасчета);
	ДополнительнаяИнформация.Вставить("ИспользоватьХарактеристики", ДанныеИБ.ИспользоватьХарактеристики);
	ДополнительнаяИнформация.Вставить("ЗаполнятьХарактеристикуОбязательно", ДанныеИБ.ПроверятьЗаполнениеХарактеристики);
	ДополнительнаяИнформация.Вставить("Недействителен", ДанныеИБ.Недействителен);
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("AdditionalInfo", СоздатьJSONизСтруктуры(ДополнительнаяИнформация));
	
	ДобавитьТаблицуДополнительныеРеквизиты(ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизиты(ДанныеИБ, ДанныеXDTO);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НоменклатураСсылка", ДанныеИБ.Ссылка);
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	КодыТоваровSKU.SKU КАК SKU
		               |ИЗ
		               |	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		               |ГДЕ
		               |	КодыТоваровSKU.Номенклатура = &НоменклатураСсылка";
	
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			МассивКодов = Новый Массив;
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивКодов.Добавить(Формат(Выборка.SKU, "ЧГ=0"));
			КонецЦикла;
			СтрокаSKU = СтрСоединить(МассивКодов, ";");
			
			СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();    
			СтруктураСвойства = Новый Структура("Наименование", "КодыSKU"); 
			СтрокаДопРеквизита.Свойство = Новый Структура("ИмяПКО,Значение", Неопределено, СтруктураСвойства);	
			СтрокаДопРеквизита.ЗначениеСвойства = СтрокаSKU; 
			
			Если (КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
				ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса")
				И ТипЗнч(КомпонентыОбмена.ПараметрыКонвертации.МассивТоваровОсобогоРежима) = Тип("Массив") Тогда
				СтрокаДопРеквизита = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();    
				СтруктураСвойства = Новый Структура("Наименование", "НеПопадаетПодОсобыйРежим"); 
				СтрокаДопРеквизита.Свойство = Новый Структура("ИмяПКО,Значение", Неопределено, СтруктураСвойства);	
				Если КомпонентыОбмена.ПараметрыКонвертации.МассивТоваровОсобогоРежима.Найти(ДанныеИБ.Ссылка) <> Неопределено Тогда
					СтрокаДопРеквизита.ЗначениеСвойства = Ложь; 
				Иначе
					СтрокаДопРеквизита.ЗначениеСвойства = Истина; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	
	УчетнаяПолитикаОрганизации = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(ДанныеИБ.Ссылка, ТекущаяДатаСеанса());
	Если УчетнаяПолитикаОрганизации.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Если УчетнаяПолитикаОрганизации.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы Тогда
			СистемаНалогообложенияСтрокой = "УСНДоходы";
		Иначе
			СистемаНалогообложенияСтрокой = "УСНДоходыМинусРасходы";
		КонецЕсли;
	ИначеЕсли УчетнаяПолитикаОрганизации.ПлательщикЕНВД Тогда
		СистемаНалогообложенияСтрокой = "ЕНВД";
	ИначеЕсли УчетнаяПолитикаОрганизации.ПрименяетсяПатент Тогда
		СистемаНалогообложенияСтрокой = "Патент";
	Иначе
		СистемаНалогообложенияСтрокой = "ОСН";
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура;
	ДополнительнаяИнформация.Вставить("СистемаНалогооблажения", СистемаНалогообложенияСтрокой); // АПК:1036 для обратной совместимости
	ДополнительнаяИнформация.Вставить("СистемаНалогообложения", СистемаНалогообложенияСтрокой);
	
	ДанныеXDTO.AdditionalInfo = СоздатьJSONИзСтруктуры(ДополнительнаяИнформация);
КонецПроцедуры
Процедура ПКО_Справочник_ПозицияПрайсЛиста_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Если ДанныеИБ.Свойство("SKU") Тогда
			ДанныеXDTO.Вставить("SKU", ДанныеИБ.SKU);
		КонецЕсли;
		Если ДанныеИБ.Свойство("Упаковка")
			И ТипЗнч(ДанныеИБ.Упаковка) <> Тип("Структура") Тогда
			ИнструкцияУпаковка = Новый Структура;
			ИнструкцияУпаковка.Вставить("ИмяПКО",   "Справочник_Упаковки");
			ИнструкцияУпаковка.Вставить("Значение", ДанныеИБ.Упаковка);
			ДанныеXDTO.Вставить("Упаковка", ИнструкцияУпаковка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ПрайсЛист_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	СтруктураТипЦены = Новый Структура;
	СтруктураТипЦены.Вставить("Наименование", Лев(ДанныеИБ.ТипЦены.Наименование,25));
	СтруктураТипЦены.Вставить("ВалютаЦены", СтруктураДанныеВалюты);
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураТипЦены, "Справочник_ТипыЦен_ИзСтруктуры_Отправка");
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ТипЦены", Инструкция);
КонецПроцедуры
Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	АдресСтрокой = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеИБ.Ссылка,
		Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы,, Истина);
	Если ЗначениеЗаполнено(АдресСтрокой) Тогда
		ДанныеXDTO.Вставить("АдресСтрокой", АдресСтрокой);
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	
	Если ОбщегоНазначенияУНФ.ЭтоУНФ()
		И КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И ТипЗнч(КомпонентыОбмена.УзелКорреспондента) = Тип("ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента, "МагазиныРозницы");
		МассивМагазиныРозницы = РеквизитыУзлаОбмена.МагазиныРозницы.Выгрузить().ВыгрузитьКолонку("Склад");
		ДанныеXDTO.Вставить("AdditionalInfo", Новый Структура("СкладУправляющейСистемы", МассивМагазиныРозницы.Найти(ДанныеИБ.Ссылка) = Неопределено));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СостояниеЗаказа_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
КонецПроцедуры
Процедура ПКО_Справочник_СостояниеОплатыЗаказа_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Документ = ДанныеИБ.Отбор.СчетНаОплату.Значение;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Заказ", Документ);
	
	СтатусОплаты = Перечисления.СтатусОплаты.Отсутствует;
	Если ДанныеИБ.Количество() > 0 Тогда
		СтрокаНабора = ДанныеИБ[0];
		
		СуммаДокумента = СтрокаНабора.Сумма;
		СуммаОплаты = СтрокаНабора.СуммаАванса + СтрокаНабора.СуммаОплаты;
		Если СуммаОплаты = 0 Тогда
			СтатусОплаты = Перечисления.СтатусОплаты.Отсутствует;
		ИначеЕсли СуммаДокумента > СуммаОплаты Тогда
			СтатусОплаты = Перечисления.СтатусОплаты.Частичная;
		Иначе
			СтатусОплаты = Перечисления.СтатусОплаты.Полная;
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("СостояниеОплаты", СтатусОплаты);
КонецПроцедуры
Процедура ПКО_Справочник_СостоянияЗаказовПокупателей_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СостояниеЗаказа = "Принят";
	СостояниеЗаказаСтрокой = СокрЛП(ДанныеИБ.СостояниеЗаказа.Наименование);
	
	Если ДанныеИБ.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен
		ИЛИ ДанныеИБ.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
		Если ДанныеИБ.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
			СостояниеЗаказа = "Отменен";
		Иначе
			СостояниеЗаказа = "Выполнен";
		КонецЕсли;
	ИначеЕсли СостояниеЗаказаСтрокой = "Заявка" Тогда
		СостояниеЗаказа = "Принят";
	ИначеЕсли СостояниеЗаказаСтрокой = "В работе" Тогда
		СостояниеЗаказа = "Подтвержден";
	ИначеЕсли СостояниеЗаказаСтрокой = "Выполнен" Тогда
		СостояниеЗаказа = "Выполнен";
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Заказ", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("СостояниеЗаказа", СостояниеЗаказа);
	ДанныеXDTO.Вставить("СостояниеЗаказаСтрокой", СостояниеЗаказаСтрокой);
КонецПроцедуры
Процедура ПКО_Справочник_СостоянияЭД_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ОснованиеЭлектронногоДокумента",
		ДанныеИБ.ДополнительныеСвойства.ОснованиеЭлектронногоДокумента);
		
	ДанныеXDTO.Вставить("СостояниеЭлектронногоДокумента",
		ДанныеИБ.ДополнительныеСвойства.СостояниеЭлектронногоДокумента);
	ДанныеXDTO.Вставить("СостояниеОбменаЭДНаНашейСтороне",
		ДанныеИБ.ДополнительныеСвойства.СостояниеОбменаЭДНаНашейСтороне);
	ДанныеXDTO.Вставить("СостояниеОбменаЭДНаСторонеКонтрагента",
		ДанныеИБ.ДополнительныеСвойства.СостояниеОбменаЭДНаСторонеКонтрагента);
КонецПроцедуры
Процедура ПКО_Справочник_СпецификацииНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.Состав.Количество() > 0 И ДанныеИБ.Состав[0].КоличествоПродукции > 0 Тогда
		ДанныеXDTO.Вставить("Количество", ДанныеИБ.Состав[0].КоличествоПродукции);
	Иначе
		ДанныеXDTO.Вставить("Количество", 1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииСостав.Номенклатура,
	|	ВЫБОР
	|		КОГДА СпецификацииСостав.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпецификацииСостав.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА СпецификацииСостав.ДоляСтоимости = 0
	|			ТОГДА 1
	|		ИНАЧЕ СпецификацииСостав.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаСостав = Запрос.Выполнить().Выгрузить();
	Если ТаблицаСостав.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаСостав);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ФайлыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДвоичныеДанныеФайла = ДвоичныеДанныеПрисоединенногоФайла(ДанныеИБ, КомпонентыОбмена);
	ДанныеФайла = Base64Строка(ДвоичныеДанныеФайла);
	ДанныеXDTO.Вставить("ХранимыйФайл", ДанныеФайла);
КонецПроцедуры
Процедура ПКО_Справочник_ФайлыХарактеристикиНоменклатур_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДвоичныеДанныеФайла = ДвоичныеДанныеПрисоединенногоФайла(ДанныеИБ, КомпонентыОбмена);
	ДанныеФайла = Base64Строка(ДвоичныеДанныеФайла);
	ДанныеXDTO.Вставить("ХранимыйФайл", ДанныеФайла);
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеИБ.Наименование);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Фамилия", СтруктураФИО.Фамилия);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Имя", СтруктураФИО.Имя);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Отчество", СтруктураФИО.Отчество);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Гражданство) Тогда
		ТаблицаГражданство = Новый ТаблицаЗначений;
		ТаблицаГражданство.Колонки.Добавить("Страна");
		ТаблицаГражданство.Колонки.Добавить("НачалоПериода");
		
		НоваяСтрока = ТаблицаГражданство.Добавить();
		НоваяСтрока.Страна = ДанныеИБ.Гражданство;
		НоваяСтрока.НачалоПериода = '00010101';
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Отбор.Штрихкод.Значение);
	Иначе
		ДанныеXDTO.Вставить("ШтрихкодОтбор", ДанныеИБ.Отбор.Штрихкод.Значение);
	КонецЕсли;
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	
	ТаблицаЗаписи.Колонки.ЕдиницаИзмерения.Имя = "Упаковка";
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
		ТаблицаЗаписи.Колонки.Добавить("SKUКонтрагента");
	КонецЕсли;
	
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаписи Цикл
	
		Если ЗначениеЗаполнено(СтрокаТаблицы.Упаковка) 
			И ТипЗнч(СтрокаТаблицы.Упаковка.Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
		    СтрокаТаблицы.Упаковка = Неопределено;
		КонецЕсли;
		
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
	   		СтрокаТаблицы.SKUКонтрагента = SKUКонтрагентаДляОтправки(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.Упаковка, КомпонентыОбмена);
		КонецЕсли;
	
	КонецЦикла; 
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.Серия) 
		И ТипЗнч(ДанныеИБ.Серия) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Серия", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Серия, "Справочник_СерииНоменклатуры"));
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("Серия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Упаковка) 
		И ТипЗнч(ДанныеИБ.Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Упаковка", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Упаковка, "Справочник_Упаковки"));
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("Упаковка", Неопределено);
	КонецЕсли;
	
	ВложенныеТовары = Новый ТаблицаЗначений;
	ВложенныеТовары.Колонки.Добавить("Номенклатура");
	ВложенныеТовары.Колонки.Добавить("Характеристика");
	ВложенныеТовары.Колонки.Добавить("Серия");
	ВложенныеТовары.Колонки.Добавить("Упаковка");
	ВложенныеТовары.Колонки.Добавить("Количество");
	ВложенныеТовары.Колонки.Добавить("КоличествоУпаковок");
	
	ВложенныеТоварыДанныеИБ = ДанныеИБ.ВложенныеТовары.Выгрузить();
	Если ВложенныеТоварыДанныеИБ.Количество() = 0 Тогда
		НоваяСтрока = ВложенныеТоварыДанныеИБ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеИБ);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ВложенныеТоварыДанныеИБ Цикл
		
		НоваяСтрока = ВложенныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Серия) 
			И ТипЗнч(СтрокаТаблицы.Серия) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
			НоваяСтрока.Серия = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Серия, "Справочник_СерииНоменклатуры");
		Иначе
			НоваяСтрока.Серия = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Упаковка) 
			И ТипЗнч(СтрокаТаблицы.Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			НоваяСтрока.Упаковка = Новый Структура("Значение, ИмяПКО", СтрокаТаблицы.Упаковка, "Справочник_Упаковки");
		Иначе
			НоваяСтрока.Упаковка = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВложенныеТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ВложенныеТовары", ВложенныеТовары);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Получение
Процедура ПОД_Документ_ВыемкаДСИзКассыККМ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		Если ДанныеXDTO.Свойство("КлючевыеСвойства") Тогда
			ДанныеXDTOКлючевыеСвойства = ДанныеXDTO.КлючевыеСвойства;
			Если ДанныеXDTOКлючевыеСвойства.Свойство("КассаККМ") Тогда
				КассаККМСтруктура = ДанныеXDTOКлючевыеСвойства.КассаККМ;
				Если КассаККМСтруктура.Свойство("Ссылка") Тогда
					КассаККМ = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(КассаККМСтруктура.Ссылка.Значение, Тип("СправочникСсылка.КассыККМ"), КомпонентыОбмена);
					Если ЗначениеЗаполнено(КассаККМ) Тогда
						РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(КассаККМ);
						Если РеквизитыКассыККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ
							ИЛИ РеквизитыКассыККМ.ТипКассы = Перечисления.ТипыКассККМ.ККМED Тогда
							ИспользованиеПКО.Документ_ВыемкаНаличных_Получение = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ЗаказПокупателя_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ДанныеXDTO.Свойство("AdditionalInfo") Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеXDTO.AdditionalInfo) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ДанныеXDTO.AdditionalInfo);
	ДополнительныеДанные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	AdditionalInfo = Новый Структура;
	
	Если ДополнительныеДанные.Свойство("СостояниеЗаказа") Тогда
		AdditionalInfo.Вставить("СостояниеЗаказа", Новый Структура);
		Если ДополнительныеДанные.СостояниеЗаказа.Свойство("Ссылка") Тогда
			AdditionalInfo.СостояниеЗаказа.Вставить("Ссылка", Справочники.СостоянияЗаказовПокупателей.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ДополнительныеДанные.СостояниеЗаказа.Ссылка)));
		КонецЕсли;
		Если ДополнительныеДанные.СостояниеЗаказа.Свойство("ЗавершенУспешно") Тогда
			AdditionalInfo.СостояниеЗаказа.Вставить("ЗавершенУспешно", ДополнительныеДанные.СостояниеЗаказа.ЗавершенУспешно);
		КонецЕсли;
		Если ДополнительныеДанные.СостояниеЗаказа.Свойство("ПричинаОтмены") Тогда
			AdditionalInfo.СостояниеЗаказа.Вставить("ПричинаОтмены", ДополнительныеДанные.СостояниеЗаказа.ПричинаОтмены);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеДанные.Свойство("ВидЗаказа") Тогда
		AdditionalInfo.Вставить("ВидЗаказа", Новый Структура);
		Если ДополнительныеДанные.ВидЗаказа.Свойство("Ссылка") Тогда
			AdditionalInfo.ВидЗаказа.Вставить("Ссылка", Справочники.ВидыЗаказовПокупателей.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ДополнительныеДанные.ВидЗаказа.Ссылка)));
		КонецЕсли;
	КонецЕсли;
	
	ДопустимыеСвойстваДополнительныхДанных = Новый Массив;
	ДопустимыеСвойстваДополнительныхДанных.Добавить("СформироватьСсылкуДляОплатыВПриложении");
	ДопустимыеСвойстваДополнительныхДанных.Добавить("СпособДоставки");
	ДопустимыеСвойстваДополнительныхДанных.Добавить("ПунктВыдачиЗаказаУникальныйИдентификатор");
	ДопустимыеСвойстваДополнительныхДанных.Добавить("СуммаДоставки");
	ДопустимыеСвойстваДополнительныхДанных.Добавить("ПараметрыПоискаКонтрагента");
	ДопустимыеСвойстваДополнительныхДанных.Добавить("ИдентификаторПлатежа");
	Для каждого ИмяСвойства Из ДопустимыеСвойстваДополнительныхДанных Цикл
		Если ДополнительныеДанные.Свойство(ИмяСвойства) Тогда
			AdditionalInfo.Вставить(ИмяСвойства, ДополнительныеДанные[ИмяСвойства]);
		КонецЕсли;
	КонецЦикла;
	
	Если AdditionalInfo.Количество() <> 0 Тогда
		ДанныеXDTO.Вставить("AdditionalInfo", AdditionalInfo);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_ОтчетОРозничныхПродажах_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Получение = Ложь;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменБП30"
		И КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОбменУНФ_БП3" Тогда
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Документ_РасходДСПланНаРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ЭтоРасходНаРасчетСКонтрагентом = ДанныеXDTO.Свойство("ВидРасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.ВидРасчетов)
		И ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком";
	ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение = ЭтоРасходНаРасчетСКонтрагентом;
КонецПроцедуры
Процедура ПОД_Документ_ЧекККМ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменБП30"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ_БП3"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменУНФ"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменРТ" Тогда
		
		ИспользованиеПКО.Документ_ЧекККМ_Получение = Ложь;
		ИспользованиеПКО.Документ_ЧекККМВозврат_Получение = Ложь;
		
	Иначе
		
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
			
			ИспользованиеПКО.Документ_ЧекККМ_Получение = 
				(ДанныеXDTO.Свойство("ТоварыПродажа") И ДанныеXDTO.ТоварыПродажа.Количество() > 0)
				ИЛИ (ДанныеXDTO.Свойство("Услуги") И ДанныеXDTO.Услуги.Количество() > 0);
				
			ИспользованиеПКО.Документ_ЧекККМВозврат_Получение = ДанныеXDTO.Свойство("ТоварыВозвратПродажи")
				И ДанныеXDTO.ТоварыВозвратПродажи.Количество() > 0;
			
		Иначе
			
			ИспользованиеПКО.Документ_ЧекККМ_Получение = ДанныеXDTO.Свойство("Товары") 
				И ДанныеXDTO.Товары.Количество() > 0;
				
			ИспользованиеПКО.Документ_ЧекККМВозврат_Получение = ДанныеXDTO.Свойство("ВозвратТоваров")
				И ДанныеXDTO.ВозвратТоваров.Количество() > 0;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Попытка
			Если ДанныеXDTO.КлючевыеСвойства.Владелец.ТипЗначения = "ФизическоеЛицо" Тогда
				ИспользованиеПКО.Справочник_БанковскиеСчета_Получение = Ложь;
			КонецЕсли;
		Исключение
		КонецПопытки;
КонецПроцедуры
Процедура ПОД_Справочник_КатегорииНоменклатурыВН_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Попытка
		Если НЕ КомпонентыОбмена.УзелКорреспондентаОбъект.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				
			ИспользованиеПКО.Справочник_КатегорииНоменклатурыВН_Получение = Ложь;
				
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры
Процедура ПОД_Справочник_НаправленияДеятельностиНГ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Попытка
		Если НЕ КомпонентыОбмена.УзелКорреспондентаОбъект.ПереноситьКатегорииКакВидыНоменклатуры Тогда
				
			ИспользованиеПКО.Справочник_КатегорииНоменклатурыВН_Получение = Ложь;
				
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры
Процедура ПОД_Справочник_НоменклатурныеГруппы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондентаОбъект.ПереноситьКатегорииКакВидыНоменклатуры Тогда
	
		ИспользованиеПКО.Справочник_НоменклатурныеГруппы_Получение = Ложь;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_ПунктыВыдачиЗаказов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.8") Тогда
		ИспользованиеПКО.Очистить();
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Упаковки_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.6")
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_Файлы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		
		ВладелецФайла = Неопределено;
		Если Не ДанныеXDTO.КлючевыеСвойства.Свойство("ВладелецФайла", ВладелецФайла) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВладелецФайла) Тогда
			
			Если Найти(ВладелецФайла.ТипЗначения, "Номенклатура") > 0 Тогда
				
				СпособХраненияФайлов = Константы.СпособХраненияФайлов.Получить();
				ИспользованиеПКО.Справочник_НоменклатураПрисоединенныеФайлы_Получ = (СпособХраненияФайлов = "ВИнформационнойБазе"
					ИЛИ СпособХраненияФайлов = "ВИнформационнойБазеИТомахНаДиске");
						
			КонецЕсли;
			
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВнесениеНаличных_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВнесениеНаличных_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(ПолученныеДанные.КассаККМ);
	ЗаполнитьЗначенияСвойств(ПолученныеДанные, РеквизитыКассыККМ);
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТовараПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	МассивСтрокСведенияПрослеживаемости = Новый Массив;
	
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("НомерГТД", "НомерГТД");
		
		ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
		ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");	
		
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			КлючСвязи = КлючСвязи + 1;	
		
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
				
			КонецЕсли;
			
			ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, Строка, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
	
	Если МассивСтрокСведенияПрослеживаемости.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СведенияПрослеживаемости", МассивСтрокСведенияПрослеживаемости);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТовараПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Заполнить(Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Договор) Тогда
		ПолученныеДанные.Договор = ДоговорПоУмолчанию(ПолученныеДанные.Ссылка, ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, ПолученныеДанные.ВидОперации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.НалогообложениеНДС) Тогда
		ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата);
	КонецЕсли;
	
	ПолученныеДанные.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	
	Для каждого Строка Из ПолученныеДанные.Запасы Цикл
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",          ПолученныеДанные.Организация);
		СтруктураДанные.Вставить("Номенклатура",         Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",       Строка.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС",   ПолученныеДанные.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки",        ПолученныеДанные.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатурыДляЗаполненияДокумента(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		КонецЕсли;
		Строка.СтруктурнаяЕдиница = ПолученныеДанные.СтруктурнаяЕдиница;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
				Строка.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		ПересчитатьСтрокуТабличнойЧасти(Строка, ПолученныеДанные);
	КонецЦикла;
	ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Запасы.Итог("Всего");
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	МассивСтрокСведенияПрослеживаемости = Новый Массив;
	
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС"); 
		
		ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
		ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			КлючСвязи = КлючСвязи + 1;
			
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			
			ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, Строка, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
			
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСведенияПрослеживаемости.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СведенияПрослеживаемости", МассивСтрокСведенияПрослеживаемости);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Заполнить(Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Договор) Тогда
		ПолученныеДанные.Договор = ДоговорПоУмолчанию(ПолученныеДанные.Ссылка, ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, ПолученныеДанные.ВидОперации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.НалогообложениеНДС) Тогда
		ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата);
	КонецЕсли;
	
	ПолученныеДанные.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	
	Для каждого Строка Из ПолученныеДанные.Запасы Цикл
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",          ПолученныеДанные.Организация);
		СтруктураДанные.Вставить("Номенклатура",         Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",       Строка.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС",   ПолученныеДанные.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки",        ПолученныеДанные.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатурыДляЗаполненияДокумента(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		КонецЕсли;
		Строка.СтруктурнаяЕдиница = ПолученныеДанные.СтруктурнаяЕдиница;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
				Строка.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		ПересчитатьСтрокуТабличнойЧасти(Строка, ПолученныеДанные);
	КонецЦикла;
	ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Запасы.Итог("Всего");
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВыемкаНаличных_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ВыемкаНаличных_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(ПолученныеДанные.КассаККМ);
	ЗаполнитьЗначенияСвойств(ПолученныеДанные, РеквизитыКассыККМ);
КонецПроцедуры
Процедура ПКО_Документ_ЗаказНаПеремещение_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказНаПеремещение_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			КлючСвязи = КлючСвязи + 1;
		
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
				
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		ДополнительныеДанные = ДанныеXDTO.AdditionalInfo;
		
		СформироватьСсылкуДляОплатыВПриложении = Неопределено;
		ДополнительныеДанные.Свойство("СформироватьСсылкуДляОплатыВПриложении", СформироватьСсылкуДляОплатыВПриложении);
		Если СформироватьСсылкуДляОплатыВПриложении = Истина Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СформироватьСсылкуДляОплатыВПриложении", Истина);
		КонецЕсли;
		
		Если ДополнительныеДанные.Свойство("СпособДоставки") Тогда
			СпособДоставкиСтрокой = ДополнительныеДанные.СпособДоставки;
			ИдентификаторыСпособовДоставки = Новый Соответствие;
			ИдентификаторыСпособовДоставки.Вставить("Самовывоз", Перечисления.СпособыДоставки.Самовывоз);
			ИдентификаторыСпособовДоставки.Вставить("ПунктВыдачи", Перечисления.СпособыДоставки.ПунктВыдачи);
			ИдентификаторыСпособовДоставки.Вставить("Курьер", Перечисления.СпособыДоставки.Курьер);
			ИдентификаторыСпособовДоставки.Вставить("Почта", Перечисления.СпособыДоставки.Почта);
			
			ПолученныеДанные.СпособДоставки = ИдентификаторыСпособовДоставки.Получить(СпособДоставкиСтрокой);
		КонецЕсли;
		Если ДополнительныеДанные.Свойство("ПунктВыдачиЗаказаУникальныйИдентификатор") Тогда
			ПунктВыдачиИдентификатор = Новый УникальныйИдентификатор(ДополнительныеДанные.ПунктВыдачиЗаказаУникальныйИдентификатор);
			ПолученныеДанные.ПунктВыдачиЗаказа = Справочники.ПунктыВыдачиЗаказа.ПолучитьСсылку(ПунктВыдачиИдентификатор);
		КонецЕсли;
		Если ДополнительныеДанные.Свойство("СуммаДоставки") Тогда
			ПолученныеДанные.СтоимостьДоставки = ДополнительныеДанные.СуммаДоставки;
		КонецЕсли;
		
		Если ДополнительныеДанные.Свойство("ПараметрыПоискаКонтрагента") Тогда
			
			НаименованиеКонтрагента = ДополнительныеДанные.ПараметрыПоискаКонтрагента.НаименованиеКонтрагента;
			Если ДополнительныеДанные.ПараметрыПоискаКонтрагента.Свойство("ТелефонКонтрагента") Тогда
				ТелефонКонтрагента = ДополнительныеДанные.ПараметрыПоискаКонтрагента.ТелефонКонтрагента;
			Иначе
				ТелефонКонтрагента = Неопределено;
			КонецЕсли;
			Если ДополнительныеДанные.ПараметрыПоискаКонтрагента.Свойство("ПочтаКонтрагента") Тогда
				ПочтаКонтрагента = ДополнительныеДанные.ПараметрыПоискаКонтрагента.ПочтаКонтрагента;
			Иначе
				ПочтаКонтрагента = Неопределено;
			КонецЕсли;
			    
			Если ДополнительныеДанные.ПараметрыПоискаКонтрагента.Свойство("ИдентификаторКонтрагента") Тогда
				ИдентификаторКонтрагента = ДополнительныеДанные.ПараметрыПоискаКонтрагента.ИдентификаторКонтрагента;
			Иначе
				ИдентификаторКонтрагента = Неопределено;
			КонецЕсли;    
			    
			Если ДанныеXDTO.Контрагент.Наименование = "ignore" Тогда
				ПолученныеДанные.Контрагент = НайтиСоздатьКонтрагентаПоПолямПоиска(КомпонентыОбмена, НаименованиеКонтрагента, ТелефонКонтрагента, ПочтаКонтрагента, ИдентификаторКонтрагента);
			КонецЕсли;
			
			ПолученныеДанные.КонтактноеЛицо = НаименованиеКонтрагента;
			ПолученныеДанные.КонтактныйТелефон = ТелефонКонтрагента;
			ПолученныеДанные.ПочтаПолучателя = ПочтаКонтрагента;
			
		КонецЕсли;
		
		Если ДополнительныеДанные.Свойство("ИдентификаторПлатежа") Тогда
			ПолученныеДанные.ИдентификаторПлатежа = ДополнительныеДанные.ИдентификаторПлатежа;
		КонецЕсли;
		
	КонецЕсли;
	
	СлужбаДоставкиПоУмолчанию = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
	Если ПолученныеДанные.СпособДоставки = Перечисления.СпособыДоставки.Курьер Тогда
		ПолученныеДанные.СлужбаДоставки = СлужбаДоставкиПоУмолчанию;
	ИначеЕсли ПолученныеДанные.СпособДоставки = Перечисления.СпособыДоставки.Почта Тогда
		ПолученныеДанные.СлужбаДоставки = СлужбаДоставкиПоУмолчанию;
	ИначеЕсли ПолученныеДанные.СпособДоставки = Перечисления.СпособыДоставки.ПунктВыдачи Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.ПунктВыдачиЗаказа) Тогда
			ПолученныеДанные.СлужбаДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.ПунктВыдачиЗаказа, "Владелец");
		КонецЕсли;
	КонецЕсли;
	
	КомментарийМаркерСпособОплаты = НСтр("ru='Способ оплаты'");
	Если Найти(ПолученныеДанные.Комментарий, КомментарийМаркерСпособОплаты) = 0 Тогда
		Если ДанныеXDTO.Свойство("ЭтапыОплаты") И ЗначениеЗаполнено(ДанныеXDTO.ЭтапыОплаты) Тогда
			Для каждого СтрокаТаблицы Из ДанныеXDTO.ЭтапыОплаты Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ФормаОплаты) И ЗначениеЗаполнено(СтрокаТаблицы.ФормаОплаты.Значение) Тогда
					КомментарийСпособОплаты = СтрШаблон(
						НСтр("ru='Способ оплаты - %1'"), 
						Строка(СтрокаТаблицы.ФормаОплаты.Значение));
					ПолученныеДанные.Комментарий = ПолученныеДанные.Комментарий + " | " + КомментарийСпособОплаты;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПокупателя_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Договор) Тогда
		ПолученныеДанные.Договор = ДоговорПоУмолчанию(ПолученныеДанные.Ссылка, ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, ПолученныеДанные.ВидОперации);
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		ЗаполнитьЗаказПокупателяНастройкамиИнтеграции(ПолученныеДанные, КомпонентыОбмена);
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено И НЕ ЗначениеЗаполнено(ПолученныеДанные.ИдентификаторПлатежа) Тогда
		ПолученныеДанные.ИдентификаторПлатежа = РасчетыСлужебный.ПолучитьУникальныйИдентификаторПлатежа(ПолученныеДанные);
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		СвойстваИсключения = Новый Массив;
		СвойстваИсключения.Добавить("Номер");
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, СвойстваИсключения);
		
		ЗаполняемыеСвойства = "СостояниеЗаказа,ВариантЗавершения,ПричинаОтмены";
		ЗаполнитьЗначенияНепустыхСвойств(ДанныеИБ, ПолученныеДанные, ЗаполняемыеСвойства);
		
		Для каждого КлючЗначение Из ПолученныеДанные.ДополнительныеСвойства Цикл
			ДанныеИБ.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ПолученныеДанные.ОсновнойВариантКП = ДанныеИБ.ОсновнойВариантКП;
		Для каждого Строка Из ПолученныеДанные.Запасы Цикл
			Строка.НомерВариантаКП = ПолученныеДанные.ОсновнойВариантКП;
		КонецЦикла;
		КлючевыеПоля = "НомерВариантаКП,Номенклатура,Характеристика,Количество,Сумма,Цена";
		КолонкиДляВключения = "";
		КолонкиДляИсключения = "";
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ПолученныеДанные.Запасы, ДанныеИБ.Запасы, КлючевыеПоля,
			КолонкиДляВключения, КолонкиДляИсключения);
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	ДанныеДляЗаписиВИБ.Заполнить(Неопределено);
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ДатаОтгрузки) Тогда
		ДанныеДляЗаписиВИБ.ДатаОтгрузки = ДанныеДляЗаписиВИБ.Дата;
	КонецЕсли;
	
	Для каждого Строка Из ДанныеДляЗаписиВИБ.Запасы Цикл
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",          ДанныеДляЗаписиВИБ.Организация);
		СтруктураДанные.Вставить("Номенклатура",         Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",       Строка.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС",   ДанныеДляЗаписиВИБ.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки",        ДанныеДляЗаписиВИБ.Дата);
		Если ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.ВидЦен) Тогда
			СтруктураДанные.Вставить("ДатаОбработки",    ДанныеДляЗаписиВИБ.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента",  ДанныеДляЗаписиВИБ.ВалютаДокумента);
			СтруктураДанные.Вставить("СуммаВключаетНДС", ДанныеДляЗаписиВИБ.СуммаВключаетНДС);
			СтруктураДанные.Вставить("ВидЦен",           ДанныеДляЗаписиВИБ.ВидЦен);
			СтруктураДанные.Вставить("Коэффициент", 1);
			СтруктураДанные.Вставить("ВидСкидкиНаценки", ДанныеДляЗаписиВИБ.ВидСкидкиНаценки);
		КонецЕсли;
		
		СтруктураДанные = ПолучитьДанныеНоменклатурыДляЗаполненияДокумента(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Цена) Тогда
			Строка.Цена = СтруктураДанные.Цена;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Спецификация) Тогда
			Строка.Спецификация = СтруктураДанные.Спецификация;
		КонецЕсли;
		Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
		Если Строка.ТипНоменклатурыЗапас Тогда
			Строка.СтруктурнаяЕдиницаРезерв = ДанныеДляЗаписиВИБ.СтруктурнаяЕдиницаРезерв;
		КонецЕсли; 
		Строка.Вес = СтруктураДанные.ВесЕдиницыТовара * Строка.Количество;
		Строка.Объем = СтруктураДанные.ОбъемЕдиницыТовара * Строка.Количество;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
				Строка.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Спецификация) Тогда
				Строка.Спецификация =  СтруктураДанные.Спецификация;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "КабинетКлиента"
			Или КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ВебВитрина" Тогда
			ПересчитатьСтрокуТабличнойЧасти(Строка, ДанныеДляЗаписиВИБ);
		КонецЕсли;
	КонецЦикла;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "КабинетКлиента"
		Или КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ВебВитрина" Тогда
		ПараметрыРасчетаСкидок = Новый Структура;
		ПараметрыРасчетаСкидок.Вставить("ПрименятьКОбъекту",           Истина);
		ПараметрыРасчетаСкидок.Вставить("ТолькоПредварительныйРасчет", Ложь);
		СкидкиНаценкиСерверПереопределяемый.Рассчитать(ДанныеДляЗаписиВИБ, ПараметрыРасчетаСкидок);
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Заполнить(Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ДатаПоступления) Тогда
		ПолученныеДанные.ДатаПоступления = ПолученныеДанные.Дата;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Договор) Тогда
		ПолученныеДанные.Договор = ДоговорПоУмолчанию(ПолученныеДанные.Ссылка, ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, ПолученныеДанные.ВидОперации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
		ПолученныеДанные.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.НалогообложениеНДС) Тогда
		ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата);
	КонецЕсли;
	
	Для каждого Строка Из ПолученныеДанные.Запасы Цикл
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",          ПолученныеДанные.Организация);
		СтруктураДанные.Вставить("Номенклатура",         Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",       Строка.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС",   ПолученныеДанные.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки",        ПолученныеДанные.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатурыДляЗаполненияДокумента(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		КонецЕсли;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
				Строка.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		ПересчитатьСтрокуТабличнойЧасти(Строка, ПолученныеДанные);
	КонецЦикла;
	ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Запасы.Итог("Всего");
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
		СтатусУтвержденияПлатежа = Неопределено;
					
		// В приемнике у документа нет табличной части, поэтому один документ выгружается в несколько
		
					Счетчик = 0;
					
					Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") 
						И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
						
							ЕстьСтатьяДДС = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СтатьяДДС") <> Неопределено;
							ИнструкцияСтатьиДДС = Неопределено;
							
							Если ЕстьСтатьяДДС Тогда
								ИнструкцияСтатьиДДС = Новый Структура("Значение, ИмяПКО", Неопределено, "Справочник_СтатьиДДС");
							КонецЕсли;
							
							Для Каждого ЭлементРасшифровки Из ДанныеXDTO.РасшифровкаПлатежа Цикл
								
	// Данные из первой строки табличной части - в текущий документ
								Если ЕстьСтатьяДДС Тогда
									ИнструкцияСтатьиДДС.Значение = ЭлементРасшифровки.СтатьяДДС;
								КонецЕсли;
									
								Если Счетчик = 0 Тогда
									
									Если ЕстьСтатьяДДС Тогда
										ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ИнструкцияСтатьиДДС);
									КонецЕсли;
									
									Если ДанныеXDTO.РасшифровкаПлатежа.Количество() > 1 Тогда
										ПолученныеДанные.СуммаДокумента = ЭлементРасшифровки.Сумма;
									КонецЕсли;
									
	// Данные из последующих строк табличной части - в новые документы
			
								Иначе
					
									ИсходныеДанные = Новый Структура("Сумма, Номер, Статус, Организация,
									|Контрагент, Валюта, БанковскийСчет, Дата, УтвержденнаяДатаПлатежа, УтвержденнаяФормаОплаты");
									
									ЗаполнитьЗначенияСвойств(ИсходныеДанные, ДанныеXDTO);
									ЗаполнитьЗначенияСвойств(ИсходныеДанные, ДанныеXDTO.КлючевыеСвойства);
									ИмяПКО = "Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение";
									ИсходныеДанные.Вставить("Сумма", ЭлементРасшифровки.Сумма);
									ИсходныеДанные.Вставить("Номер", "");
	
									Если ЕстьСтатьяДДС Тогда
										ИсходныеДанные.Вставить("СтатьяДвиженияДенежныхСредств", ИнструкцияСтатьиДДС);
									КонецЕсли;
									
									ПроизводнаяЗаявкаНаРасход = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ИсходныеДанные,
										ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО));
								
								КонецЕсли;
							
								Счетчик = Счетчик + 1;
						
						КонецЦикла;
					
					КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыПрочее_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.Прочее;
	
	Если ДанныеИБ = Неопределено Тогда
	
		ПолученныеДанные.СтатусУтвержденияПлатежа =  Перечисления.СтатусыУтвержденияПлатежей.НеУтвержден;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатьяДвиженияДенежныхСредств) Тогда
			ПолученныеДанные.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	 	КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
		СтатусУтвержденияПлатежа = Неопределено;
					
		// В приемнике у документа нет табличной части, поэтому один документ выгружается в несколько
		
		Счетчик = 0;
					
		Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") 
			И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
				ЕстьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
				
				ЕстьСтатьяДДС = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СтатьяДДС") <> Неопределено;
				
				ИнструкцияСтатьиДДС = Неопределено;
				Если ЕстьСтатьяДДС Тогда
					ИнструкцияСтатьиДДС = Новый Структура("Значение, ИмяПКО", Неопределено, "Справочник_СтатьиДДС");
				КонецЕсли;
				
				Для Каждого ЭлементРасшифровки Из ДанныеXDTO.РасшифровкаПлатежа Цикл
					
					ИмяПКОДокументаРасчета = "";
					ИнструкцияДокументаРасчета = Неопределено;
					
					Если ЕстьСтатьяДДС Тогда
						ИнструкцияСтатьиДДС.Значение = ЭлементРасшифровки.СтатьяДДС;
					КонецЕсли;
					
					Если ЕстьДокументРасчетов И ЗначениеЗаполнено(ЭлементРасшифровки.ДокументРасчетов) Тогда
						
						ДокументРасчетов = ЭлементРасшифровки.ДокументРасчетов;
						
						Если ДокументРасчетов.ТипЗначения = "ПоступлениеТоваровУслуг" Тогда
							ИмяПКОДокументаРасчета =  "Документ_ПриходнаяНакладная_Получение";
						ИначеЕсли ДокументРасчетов.ТипЗначения = "ЗаказКлиента" Тогда
							ИмяПКОДокументаРасчета = "Документ_ЗаказПоставщику_Получение";
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ИмяПКОДокументаРасчета) Тогда
							ИнструкцияДокументаРасчета = Новый Структура("Значение,ИмяПКО", ДокументРасчетов, ИмяПКОДокументаРасчета);
						КонецЕсли;
						
					КонецЕсли;
					
					
	// Данные из первой строки табличной части - в текущий документ
				
				Если Счетчик = 0 Тогда
					
					Если ЕстьСтатьяДДС Тогда
						ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ИнструкцияСтатьиДДС);
					КонецЕсли;
						
					Если ЗначениеЗаполнено(ИмяПКОДокументаРасчета) Тогда
						ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ИнструкцияДокументаРасчета);
					КонецЕсли;
					
					Если ДанныеXDTO.РасшифровкаПлатежа.Количество() > 1 Тогда
						ПолученныеДанные.СуммаДокумента = ЭлементРасшифровки.Сумма;
					КонецЕсли;
					
	// Данные из последующих строк табличной части - в новые документы
	
				Иначе
	
					ИсходныеДанные = Новый Структура("Сумма, Номер, Статус, Организация,
					|Контрагент, Валюта, БанковскийСчет, Дата, УтвержденнаяДатаПлатежа, ДокументОснование,
					|УтвержденнаяФормаОплаты");
					
					ЗаполнитьЗначенияСвойств(ИсходныеДанные, ДанныеXDTO);
					ЗаполнитьЗначенияСвойств(ИсходныеДанные, ДанныеXDTO.КлючевыеСвойства);
					ИмяПКО = "Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение";
					ИсходныеДанные.Вставить("Сумма", ЭлементРасшифровки.Сумма);
					ИсходныеДанные.Вставить("Номер", "");
					
	
					Если ЕстьСтатьяДДС Тогда
						ИсходныеДанные.Вставить("СтатьяДвиженияДенежныхСредств", ИнструкцияСтатьиДДС);
					КонецЕсли;
					
					
					Если ЗначениеЗаполнено(ИмяПКОДокументаРасчета) Тогда
						
						ИнструкцияДокументаРасчетов = Новый Структура("Значение, ИмяПКО",
							ЭлементРасшифровки.ДокументРасчетов, ИмяПКОДокументаРасчета);
						ИсходныеДанные.Вставить("ДокументОснование", ИнструкцияДокументаРасчетов);
						
					КонецЕсли;
					
					
					ПроизводнаяЗаявкаНаРасход = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ИсходныеДанные,
						ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО));
				
				КонецЕсли;
			
				Счетчик = Счетчик + 1;
			
			КонецЦикла;
		
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.Поставщику;
	
	Если ДанныеИБ = Неопределено Тогда
	
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатусУтвержденияПлатежа) Тогда
			ПолученныеДанные.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.НеУтвержден;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатьяДвиженияДенежныхСредств) Тогда
			ПолученныеДанные.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КомплектацияЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("ДоляСтоимости", "ДоляСтоимости");
		
		ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
		ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
	
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			КлючСвязи = КлючСвязи + 1;
		
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
				
			КонецЕсли;		
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСтрокПродукция = Новый Массив;
	СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(ДанныеXDTO, ПравилаЗаполнения);
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КомплектацияЗапасов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаПоступления_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ДокументПоступления") И ЗначениеЗаполнено(ДанныеXDTO.ДокументПоступления) Тогда
		ТипЗначенияСвойства = ДанныеXDTO.ДокументПоступления.Ссылка.ТипЗначенияXDTO;
	
		СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
		Для Каждого СтрокаПКО Из СтрокиПКО Цикл
			ДокОснование = Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ДокументПоступления, СтрокаПКО.ИмяПКО);
		КонецЦикла;
	
		Если ДокОснование <> Неопределено Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ДокОснование);
		КонецЕсли;	
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ИсправляемыйДокументПоступления") И ЗначениеЗаполнено(ДанныеXDTO.ИсправляемыйДокументПоступления) Тогда
		ТипЗначенияСвойства = ДанныеXDTO.ИсправляемыйДокументПоступления.Ссылка.ТипЗначенияXDTO;
	
		СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
		Для Каждого СтрокаПКО Из СтрокиПКО Цикл
			ИсправляемыйДокументПоступления = Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ИсправляемыйДокументПоступления, СтрокаПКО.ИмяПКО);
		КонецЦикла;
		
		Если ИсправляемыйДокументПоступления <> Неопределено Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИсправляемыйДокументПоступления", ИсправляемыйДокументПоступления);
		КонецЕсли;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("Содержание", "Содержание");
	ПравилаЗаполнения.Вставить("КоличествоДоИзменения", "КоличествоДоИзменения");
	ПравилаЗаполнения.Вставить("КоличествоДоКорректировки", "КоличествоДоКорректировки");
	ПравилаЗаполнения.Вставить("СтавкаНДСДоИзменения", "СтавкаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоИзменения", "СуммаДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоКорректировки", "СуммаДоКорректировки");
	ПравилаЗаполнения.Вставить("СуммаНДСДоИзменения", "СуммаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаНДСДоКорректировки", "СуммаНДСДоКорректировки");
	ПравилаЗаполнения.Вставить("ЦенаДоИзменения", "ЦенаДоИзменения");
	ПравилаЗаполнения.Вставить("ЦенаДоКорректировки", "ЦенаДоКорректировки");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС"); 
	ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
	ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
		
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСведенияПрослеживаемости = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			
			ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, Строка, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСведенияПрослеживаемости.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СведенияПрослеживаемости", МассивСтрокСведенияПрослеживаемости);
	КонецЕсли;
	
	Если МассивСтрокУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Расходы", МассивСтрокУслуги);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_КорректировкаПоступления_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_НачислениеСписаниеБонусныхБаллов_Прием_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокНачисленияБонусов = Новый Массив;
	Если ДанныеXDTO.Свойство("НачисленияБонусов") И ЗначениеЗаполнено(ДанныеXDTO.НачисленияБонусов) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ДисконтнаяКарта", "БонуснаяКарта");
		ПравилаЗаполнения.Вставить("СуммаБонусныхБаллов", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.НачисленияБонусов Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ДатаНачисления", ПолученныеДанные.Дата);
			МассивСтрокНачисленияБонусов.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокНачисленияБонусов.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НачисленияБонусов", МассивСтрокНачисленияБонусов);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
		
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
	
		// СтатьяДвиженияДенежныхСредств
		Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Статья", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
		КонецЕсли;
	
		МассивСтрокРасшифровка = Новый Массив;
		
		// Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","Договор");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаРасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "Курс");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "Кратность");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Заказ", "СчетНаОплату");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				
			Если ЗначениеЗаполнено(Строка.Договор) 
				И ТипЗнч(Строка.Договор) = Тип("Структура") 
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентовСтруктура_Получение"));
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			КонецЕсли;
			
			Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СчетНаОплату", Неопределено);
				
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("Договор");
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	
	КолонкиДляИсключения = "СпособЗачета, Документ, Заказ, СчетНаОплату, ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			КлючСвязи = КлючСвязи + 1;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОприходованиеЗапасов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеДоходы;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.РазделУчета = Перечисления.РазделыУчета.ДенежныеСредства;
	ПолученныеДанные.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ВводНачальныхОстатков");
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.ДенежныеСредства Цикл
	
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		Если СтруктураДанныхСтроки.Свойство("Сумма") И СтруктураДанныхСтроки.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить("СуммаВал", СтруктураДанныхСтроки.Сумма);
		СтруктураДанныхСтроки.Вставить("ВалютаДенежныхСредств", Новый Структура("Значение, ИмяПКО", Строка.Валюта, "Справочник_Валюты"));
		СтруктураДанныхСтроки.Вставить("БанковскийСчетКасса", Новый Структура("Значение, ИмяПКО", Строка.БанковскийСчет, "Справочник_БанковскиеСчета_Получение"));
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДенежныеСредства", МассивСтрокТЧ);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиБезналичныхДС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ПолученныеДанные.ДенежныеСредства.Количество() > 0 Тогда
			БанковскийСчетКасса = ПолученныеДанные.ДенежныеСредства[0].БанковскийСчетКасса;
		
			Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
				СтруктураПоиска = Новый Структура("БанковскийСчетКасса", БанковскийСчетКасса);
				УточнитьПоискДанныхИБ(ДанныеИБ, "ДенежныеСредства", СтруктураПоиска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.ДенежныеСредства.Количество() = 0 Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.РазделУчета = Перечисления.РазделыУчета.ДенежныеСредства;
	ПолученныеДанные.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ВводНачальныхОстатков");
	
	БанковскийСчетКасса = Неопределено;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		Если ДанныеXDTO.AdditionalInfo.Свойство("Касса")
			И ЗначениеЗаполнено(ДанныеXDTO.AdditionalInfo.Касса) Тогда
			
			Касса = ДанныеXDTO.AdditionalInfo.Касса;
		
			Если Касса.Свойство("Ссылка")
				И ЗначениеЗаполнено(Касса.Ссылка) Тогда
	
				Если ОбщегоНазначения.СсылкаСуществует(Касса.Ссылка) Тогда
					БанковскийСчетКасса = Касса.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.ДенежныеСредства Цикл
	
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		
		Если СтруктураДанныхСтроки.Свойство("Сумма") И СтруктураДанныхСтроки.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить("СуммаВал", СтруктураДанныхСтроки.Сумма);
		СтруктураДанныхСтроки.Вставить("ВалютаДенежныхСредств", Новый Структура("Значение, ИмяПКО", Строка.Валюта, "Справочник_Валюты"));
	
		Если БанковскийСчетКасса <> Неопределено Тогда
			СтруктураДанныхСтроки.Вставить("БанковскийСчетКасса", БанковскийСчетКасса);
		КонецЕсли;
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДенежныеСредства", МассивСтрокТЧ);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ПолученныеДанные.ДенежныеСредства.Количество() > 0 Тогда
			БанковскийСчетКасса = ПолученныеДанные.ДенежныеСредства[0].БанковскийСчетКасса;
	
			Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
				СтруктураПоиска = Новый Структура("БанковскийСчетКасса", БанковскийСчетКасса);
				УточнитьПоискДанныхИБ(ДанныеИБ, "ДенежныеСредства", СтруктураПоиска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.ДенежныеСредства.Количество() = 0 Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Автоформирование = Истина;
	ПолученныеДанные.РазделУчета = Перечисления.РазделыУчета.РасчетыСПоставщикамиИПокупателями;
	ПолученныеДанные.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ВводНачальныхОстатков");
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
	ПравилаЗаполнения.Вставить("Договор", "Договор");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		СтруктураДанныхСтроки.Вставить("СуммаВал", СтруктураДанныхСтроки.Сумма);
		СтруктураДанныхСтроки.Вставить("ПризнакАванса", Истина);
	
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПокупателями", МассивСтрокТЧ);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ПолученныеДанные.РасчетыСПокупателями.Количество() > 0 Тогда
			ПризнакАванса = ПолученныеДанные.РасчетыСПокупателями[0].ПризнакАванса;
			
			Если ЗначениеЗаполнено(ПризнакАванса) Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ПризнакАванса", ПризнакАванса);
				УточнитьПоискДанныхИБ(ДанныеИБ, "РасчетыСПокупателями", СтруктураПоиска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.РасчетыСПокупателями.Количество() = 0 Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Автоформирование = Истина;
	ПолученныеДанные.РазделУчета = Перечисления.РазделыУчета.РасчетыСПоставщикамиИПокупателями;
	ПолученныеДанные.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ВводНачальныхОстатков");
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
	ПравилаЗаполнения.Вставить("Договор", "Договор");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		СтруктураДанныхСтроки.Вставить("СуммаВал", СтруктураДанныхСтроки.Сумма);
		
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПокупателями", МассивСтрокТЧ);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ПолученныеДанные.РасчетыСПокупателями.Количество() > 0 Тогда
			ПризнакАванса = ПолученныеДанные.РасчетыСПокупателями[0].ПризнакАванса;
			
			Если ЗначениеЗаполнено(ПризнакАванса) Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ПризнакАванса", ПризнакАванса);
				УточнитьПоискДанныхИБ(ДанныеИБ, "РасчетыСПокупателями", СтруктураПоиска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.РасчетыСПокупателями.Количество() = 0 Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Автоформирование = Истина;
	ПолученныеДанные.РазделУчета = Перечисления.РазделыУчета.РасчетыСПоставщикамиИПокупателями;
	ПолученныеДанные.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ВводНачальныхОстатков");
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
	ПравилаЗаполнения.Вставить("Договор", "Договор");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		СтруктураДанныхСтроки.Вставить("СуммаВал", СтруктураДанныхСтроки.Сумма);
		СтруктураДанныхСтроки.Вставить("ПризнакАванса", Истина);
	
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПоставщиками", МассивСтрокТЧ);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ПолученныеДанные.РасчетыСПоставщиками.Количество() > 0 Тогда
			ПризнакАванса = ПолученныеДанные.РасчетыСПоставщиками[0].ПризнакАванса;
			
			Если ЗначениеЗаполнено(ПризнакАванса) Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ПризнакАванса", ПризнакАванса);
				УточнитьПоискДанныхИБ(ДанныеИБ, "РасчетыСПоставщиками", СтруктураПоиска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.РасчетыСПоставщиками.Количество() = 0 Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Автоформирование = Истина;
	ПолученныеДанные.РазделУчета = Перечисления.РазделыУчета.РасчетыСПоставщикамиИПокупателями;
	ПолученныеДанные.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ВводНачальныхОстатков");
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
	ПравилаЗаполнения.Вставить("Договор", "Договор");
	
	МассивСтрокТЧ = Новый Массив;
	
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		СтруктураДанныхСтроки.Вставить("СуммаВал", СтруктураДанныхСтроки.Сумма);
	
		МассивСтрокТЧ.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасчетыСПоставщиками", МассивСтрокТЧ);
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ПолученныеДанные.РасчетыСПоставщиками.Количество() > 0 Тогда
			ПризнакАванса = ПолученныеДанные.РасчетыСПоставщиками[0].ПризнакАванса;
			
			Если ЗначениеЗаполнено(ПризнакАванса) Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ПризнакАванса", ПризнакАванса);
				УточнитьПоискДанныхИБ(ДанныеИБ, "РасчетыСПоставщиками", СтруктураПоиска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.РасчетыСПоставщиками.Количество() = 0 Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.РазделУчета = Перечисления.РазделыУчета.Запасы;
	ПолученныеДанные.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ВводНачальныхОстатков");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСведенияПрослеживаемости = Новый Массив;
	МассивСтрокЗапасыВРазрезеГТД = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ТМЦ")
		И ЗначениеЗаполнено(ДанныеXDTO.ТМЦ) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("СуммаБезНДС", "СуммаБезНДС");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("НомерГТД", "НомерГТД");
		
		ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
		ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
		
		Для Каждого Строка Из ДанныеXDTO.ТМЦ Цикл
			
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			Если Строка.СуммаНДС = Неопределено Тогда
				Строка.СуммаНДС = 0;
			КонецЕсли;
			Если Строка.СуммаБезНДС = Неопределено Тогда
				Строка.СуммаБезНДС = 0;
			КонецЕсли;	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаБезНДС + Строка.СуммаНДС); 
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор)); 
			СтруктураДанныхСтроки.Вставить("СтруктурнаяЕдиница", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Склад, "Справочник_Склады_Получение"));
			
			ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, Строка, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена);
	
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				МассивСтрокЗапасыВРазрезеГТД.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокЗапасыВРазрезеГТД.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ЗапасыВРазрезеГТД", МассивСтрокЗапасыВРазрезеГТД);
	КонецЕсли;
	
	Если МассивСтрокСведенияПрослеживаемости.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СведенияПрослеживаемости", МассивСтрокСведенияПрослеживаемости);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		Если ДанныеXDTO.AdditionalInfo.Свойство("СоответствиеНоменклатурыЕГАИС")
			И ЗначениеЗаполнено(ДанныеXDTO.AdditionalInfo.СоответствиеНоменклатурыЕГАИС) Тогда
			
			ДанныеСоответствия = ДанныеXDTO.AdditionalInfo.СоответствиеНоменклатурыЕГАИС;
			
			Для каждого СтрокаТаблицы Из ДанныеСоответствия Цикл
	
				НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
	            НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицы.Характеристика);
				НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(СтрокаТаблицы.АлкогольнаяПродукция);
				
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
				НаборЗаписей.Записать();
	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ПолученныеДанные.Запасы.Количество() > 0 Тогда
			СтруктурнаяЕдиница = ПолученныеДанные.Запасы[0].СтруктурнаяЕдиница;
			
			Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				СтруктураПоиска = Новый Структура("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
				УточнитьПоискДанныхИБ(ДанныеИБ, "Запасы", СтруктураПоиска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.Запасы.Количество() = 0 Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	//Запасы
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("СтруктурнаяЕдиница");
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Характеристика");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Запасы,
		ДанныеИБ.Запасы,
		МассивКлючевыхПолей);
	
	ДанныеИБ.Запасы.Загрузить(ПолученныеДанные.Запасы.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.РазделУчета = Перечисления.РазделыУчета.Запасы;
	ПолученныеДанные.ХозяйственнаяОперация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ХозяйственныеОперации.ВводНачальныхОстатков");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("СуммаБезНДС", "СуммаРасчетов");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			СтруктураДанныхСтроки.Вставить("ВидОперации", Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию);
			СтруктураДанныхСтроки.Вставить("СтруктурнаяЕдиница", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Склад, "Справочник_Склады_Получение"));
			СтруктураДанныхСтроки.Вставить("Контрагент", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Контрагент, "Справочник_Контрагенты_Получение"));
			СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Договор, "Справочник_ДоговорыКонтрагентов_Получение"));
	
			СтруктураПартия = Новый Структура;
			СтруктураПартия.Вставить("Владелец", Строка.Номенклатура);
			СтруктураПартия.Вставить("ВладелецПартии", ДанныеXDTO.Контрагент);
			СтруктураПартия.Вставить("Наименование", "Товары на комиссии");
	
			ИнструкцияПартия = Новый Структура("Значение, ИмяПКО");
			ИнструкцияПартия.Значение = СтруктураПартия;
			ИнструкцияПартия.ИмяПКО = "Справочник_ПартииНоменклатуры_ИзСтр_Получение";
			
			СтруктураДанныхСтроки.Вставить("Партия", ИнструкцияПартия);
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ЗапасыПринятые", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ПолученныеДанные.ЗапасыПринятые.Количество() > 0 Тогда
			СтруктурнаяЕдиница = ПолученныеДанные.ЗапасыПринятые[0].СтруктурнаяЕдиница;
			Контрагент = ПолученныеДанные.ЗапасыПринятые[0].Контрагент;
			Договор = ПолученныеДанные.ЗапасыПринятые[0].Договор;
			
			Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
				СтруктураПоиска.Вставить("Контрагент", Контрагент);
				СтруктураПоиска.Вставить("Договор", Договор);
				УточнитьПоискДанныхИБ(ДанныеИБ, "ЗапасыПринятые", СтруктураПоиска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.ЗапасыПринятые.Количество() = 0 Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	//ЗапасыПринятые
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("СтруктурнаяЕдиница");
	МассивКлючевыхПолей.Добавить("Контрагент");
	МассивКлючевыхПолей.Добавить("Договор");
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Характеристика");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("СуммаРасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ЗапасыПринятые,
		ДанныеИБ.ЗапасыПринятые,
		МассивКлючевыхПолей, "ВидОперации");
	
	ДанныеИБ.ЗапасыПринятые.Загрузить(ПолученныеДанные.ЗапасыПринятые.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаПоступления", "СуммаПоступления");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ЦенаПоступления", "ЦенаПоступления");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			КлючСвязи = КлючСвязи + 1;
		
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
				
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК" Тогда
		Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ОРПТекущейКассовойСмены) Тогда 
			ЗаполнитьОРПТекущейКассовойСмены(КомпонентыОбмена, ПолученныеДанные.КассаККМ);
		КонецЕсли;
		Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ОРПТекущейКассовойСмены) Тогда 
			СтарыйОбъект = ПолученныеДанные;
			ПолученныеДанные = КомпонентыОбмена.ПараметрыКонвертации.ОРПТекущейКассовойСмены.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	#Область ТоварыИУслуги
	#Область Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	КлючСвязи = 0;
	КлючСвязиВозврат = 0;
	
	ИмяТабличнойЧастиТовары = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыПродажа", "Товары");
	
	ТабличнаяЧастьТовары = Неопределено;
	МассивСтрокСведенияПрослеживаемости = Новый Массив;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиТовары, ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
		ПравилаЗаполнения.Вставить("Патент", "Патент");
		
		ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
		ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
		
		ИспользоватьТипыЗапасов = ТабличнаяЧастьТовары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			КлючСвязи = КлючСвязи + 1;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор)); 
			
			Если Не ЗначениеЗаполнено(Строка.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
			
			ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, Строка, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	ИмяТабличнойЧастиВозвратТоваров = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыВозвратПродажи", "ВозвратТоваров");
	
	ТабличнаяЧастьВозвратТоваров = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиВозвратТоваров, ТабличнаяЧастьВозвратТоваров)
		И ЗначениеЗаполнено(ТабличнаяЧастьВозвратТоваров) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
			ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
			ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		КонецЕсли;
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
		ПравилаЗаполнения.Вставить("Патент", "Патент");
		
		ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
		ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
			
		ИспользоватьТипыЗапасов = ТабличнаяЧастьВозвратТоваров.Колонки.Найти("ТипЗапасов") <> Неопределено;
		
		ЕстьСведенияОГТД = ТабличнаяЧастьВозвратТоваров.Колонки.Найти("НомерГТД") <> Неопределено;
		
		Для Каждого Строка Из ТабличнаяЧастьВозвратТоваров Цикл
			КлючСвязиВозврат = КлючСвязиВозврат + 1;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения); 
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			
			Если ЕстьСведенияОГТД
				И ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			Если Строка.Количество > 0 Тогда
				СтруктураДанныхСтроки.Количество = -СтруктураДанныхСтроки.Количество;
				Если СтруктураДанныхСтроки.Свойство("Сумма") Тогда
					СтруктураДанныхСтроки.Сумма  = -СтруктураДанныхСтроки.Сумма;
				КонецЕсли;
				Если СтруктураДанныхСтроки.Свойство("СуммаНДС") Тогда
					СтруктураДанныхСтроки.СуммаНДС = -СтруктураДанныхСтроки.СуммаНДС;
				КонецЕсли;
				Если СтруктураДанныхСтроки.Свойство("Всего") Тогда
					СтруктураДанныхСтроки.Всего = -СтруктураДанныхСтроки.Всего;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, Строка, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязиВозврат);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	#Область Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
		ПравилаЗаполнения.Вставить("Патент", "Патент");
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	МассивСтрокРеализованныхСертификатов = Новый Массив;
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		ПодарочныйСертификатПоУмолчанию = КомпонентыОбмена.ПараметрыКонвертации.ПодарочныйСертификатПоУмолчанию;
		СтавкаНДССертификатаПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(); 
		Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл
		
			СтруктураДанныхСтроки = Новый Структура();
			СтруктураДанныхСтроки.Вставить("Номенклатура", ПодарочныйСертификатПоУмолчанию);
			СтруктураДанныхСтроки.Вставить("Количество", 1);
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.Сумма);
			СтруктураДанныхСтроки.Вставить("Цена", Строка.Сумма);
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДССертификатаПоУмолчанию);
			СтруктураДанныхСтроки.Вставить("СуммаНДС", 0);
			СтруктураДанныхСтроки.Вставить("Всего", Строка.Сумма);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;	
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокСведенияПрослеживаемости.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СведенияПрослеживаемости", МассивСтрокСведенияПрослеживаемости);
	КонецЕсли;
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
	
	#КонецОбласти
	#Область Оплата
	МассивСтрокОплата = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.СуммаОплаты, Перечисления.ВидыБезналичныхОплат.БанковскаяКарта);
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
			КонецЕсли;
			
			//Если Строка.Свойство("Патент") Тогда
			//	СтруктураДанныхСтроки.Вставить("Патент", Строка.Патент);
			//КонецЕсли;
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартамиПодарочныхСертификатов")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.СуммаОплаты, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
			КонецЕсли;
			
			//Если Строка.Свойство("Патент") Тогда
			//	СтруктураДанныхСтроки.Вставить("Патент", Строка.Патент);
			//КонецЕсли;
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаСертификатами Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.Сумма, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаБонуснымиБаллами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаБонуснымиБаллами) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ДисконтнаяКарта", "БонуснаяКарта");
		ПравилаЗаполнения.Вставить("СуммаБонусныхБаллов", "СуммаБонусов");
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаБонуснымиБаллами Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			СтруктураДанныхСтроки.Вставить("ВидОплаты", Перечисления.ВидыБезналичныхОплат.Бонусы);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокОплата);
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
		
	Если ДанныеИБ <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) Тогда
			ПолученныеДанные.КассаККМ = ДанныеИБ.КассаККМ;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Патент) Тогда
			ПолученныеДанные.Патент = ДанныеИБ.Патент;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
			ПолученныеДанные.КассаККМ = КассаККМПоСтруктурнойЕдинице(ПолученныеДанные.СтруктурнаяЕдиница);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЭквайринговыйТерминал(ПолученныеДанные);
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Организация) Тогда
		ПолученныеДанные.Организация = ПолученныеДанные.КассаККМ.Владелец;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
		ПолученныеДанные.СтруктурнаяЕдиница = ПолученныеДанные.КассаККМ.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		ПолученныеДанные.Подразделение = ПолученныеДанные.КассаККМ.Подразделение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.НалогообложениеНДС) Тогда
		ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Статья) Тогда
		ПолученныеДанные.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
		ПолученныеДанные.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидЦен)
		И ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
		ПолученныеДанные.ВидЦен = ПолученныеДанные.СтруктурнаяЕдиница.РозничныйВидЦен;
	КонецЕсли;
		
	ПолученныеДанные.НачалоКассовойСмены = ПолученныеДанные.Дата;
	
	ПолученныеДанные.ОкончаниеКассовойСмены = ПолученныеДанные.Дата;
	Если (КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса") Тогда
		ПолученныеДанные.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы;
	Иначе
		ПолученныеДанные.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	КонецЕсли;
	
	
	Для каждого СтрокаТаблицы Из ПолученныеДанные.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
			СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Всего) Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
		КонецЕсли;
		СтрокаТаблицы.СуммаСкидкиНаценки = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество - СтрокаТаблицы.Сумма;
		Если СтрокаТаблицы.СуммаСкидкиНаценки <> 0 Тогда
			СтрокаТаблицы.ПроцентСкидкиНаценки = Окр(100*СтрокаТаблицы.СуммаСкидкиНаценки / (СтрокаТаблицы.Количество * СтрокаТаблицы.Цена), 2);
		КонецЕсли; 
	КонецЦикла;
	
	ОпределитьУчетВУСН(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Статья) И ЗначениеЗаполнено(ДанныеИБ.Статья) Тогда
		ПолученныеДанные.Статья = ДанныеИБ.Статья;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) Тогда
		ДанныеИБ.КассаККМ = ПолученныеДанные.КассаККМ;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВидЦен) Тогда
		ДанныеИБ.ВидЦен = ПолученныеДанные.ВидЦен;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НачалоКассовойСмены) Тогда
		ДанныеИБ.НачалоКассовойСмены = ПолученныеДанные.НачалоКассовойСмены;
		ДанныеИБ.ОкончаниеКассовойСмены = ПолученныеДанные.ОкончаниеКассовойСмены;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.СтатусКассовойСмены) Тогда
		ДанныеИБ.СтатусКассовойСмены = ПолученныеДанные.СтатусКассовойСмены;
	КонецЕсли;
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("Всего");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Патент");
	МассивКлючевыхПолей.Добавить("ПрослеживаемыйТовар");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Запасы,
		ДанныеИБ.Запасы,
		МассивКлючевыхПолей,
		"Заказ,Контрагент",
		"УчитыватьВНУ");
	ДанныеИБ.Запасы.Загрузить(ПолученныеДанные.Запасы.Выгрузить());
	
	ДанныеИБ.СведенияПрослеживаемости.Загрузить(ПолученныеДанные.СведенияПрослеживаемости.Выгрузить());
	
	//Оплата
	ДанныеИБ.БезналичнаяОплата.Загрузить(ПолученныеДанные.БезналичнаяОплата.Выгрузить());
	
	ЗаполнитьЭквайринговыйТерминал(ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСВзносНаличными_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСВзносНаличными_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
		
		НоваяСтрока = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.Договор = ПерваяСтрокаРасшифровкиПлатежаXDTO.Договор;
		НоваяСтрока.СуммаРасчетов = ПерваяСтрокаРасшифровкиПлатежаXDTO.СуммаВал;
		НоваяСтрока.Курс = ПерваяСтрокаРасшифровкиПлатежаXDTO.КурсКонвертации;
		НоваяСтрока.Кратность = ПерваяСтрокаРасшифровкиПлатежаXDTO.КратностьКонвертации;
		НоваяСтрока.СуммаПлатежа = ПерваяСтрокаРасшифровкиПлатежаXDTO.СуммаВал;
		НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
		лДоговор = ПерваяСтрокаРасшифровкиПлатежаXDTO.Договор;
		Если ЗначениеЗаполнено(лДоговор) 
			И ТипЗнч(лДоговор) = Тип("Структура") Тогда 
			
			Если лДоговор.Свойство("Ссылка") = ЛОЖЬ Тогда
				ИмяПКОДоговор = "Справочник_ДоговорыКонтрагентовСтруктура_Получение";
			Иначе
				ИмяПКОДоговор = "Справочник_ДоговорыКонтрагентов_Получение";
			КонецЕсли;
		
			ПКОДоговора = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОДоговор);
			НоваяСтрока.Договор = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, лДоговор, ПКОДоговора,"ПолучитьСсылку").Ссылка;
		КонецЕсли;
		
		//Валюта конвертации
		ВалютаКонвертации = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВалютаКонвертации;
		ИмяПКОВалюта = "";
		Если ЗначениеЗаполнено(ВалютаКонвертации) Тогда
			Если ВалютаКонвертации.Свойство("Ссылка") Тогда
				ИмяПКОВалюта = "Справочник_Валюты";
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяПКОВалюта) Тогда
			ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюта);
			ВалютаКонвертации = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ВалютаКонвертации, ПКОВалюты,"ПолучитьСсылку").Ссылка;
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаКонвертации", ВалютаКонвертации);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	
	ВалютаКонвертации = Неопределено; 
	ПолученныеДанные.ДополнительныеСвойства.Свойство("ВалютаКонвертации", ВалютаКонвертации);
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
	Если ПолученныеДанные.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета
		И ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты;
		
		Если ПолученныеДанные.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПолученныеДанные.Курс = ПолученныеДанные.РасшифровкаПлатежа[0].Курс;
			ПолученныеДанные.Кратность = ПолученныеДанные.РасшифровкаПлатежа[0].Кратность;
			ПолученныеДанные.СуммаУчета = ПолученныеДанные.РасшифровкаПлатежа[0].СуммаПлатежа;
		КонецЕсли;
	Иначе
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОтПродажиВалюты;
		Если ПолученныеДанные.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПолученныеДанные.ПродажаВалютыКурс = ПолученныеДанные.РасшифровкаПлатежа[0].Курс;
			ПолученныеДанные.ПродажаВалютыКратность = ПолученныеДанные.РасшифровкаПлатежа[0].Кратность;
			ПолученныеДанные.СуммаУчета = ПолученныеДанные.РасшифровкаПлатежа[0].СуммаПлатежа;
		КонецЕсли;
		ПолученныеДанные.ПродажаВалютыВалюта = ВалютаКонвертации;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ДанныеИБ.ВидОперации = ПолученныеДанные.ВидОперации;
	ДанныеИБ.Курс = ПолученныеДанные.Курс;
	ДанныеИБ.Кратность = ПолученныеДанные.Кратность;
	ДанныеИБ.ПродажаВалютыКурс = ПолученныеДанные.ПродажаВалютыКурс;
	ДанныеИБ.ПродажаВалютыКратность = ПолученныеДанные.ПродажаВалютыКратность;
	ДанныеИБ.ПродажаВалютыВалюта = ПолученныеДанные.ПродажаВалютыВалюта;
	ДанныеИБ.СуммаУчета = ПолученныеДанные.СуммаУчета;
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
		
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
		
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты;
		Иначе
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее;
		КонецЕсли;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам;
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам;
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
	КонецЕсли;
	#КонецОбласти
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
	
		// СтатьяДвиженияДенежныхСредств
		Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Статья", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
		КонецЕсли;
	
		МассивСтрокРасшифровка = Новый Массив;
		
		// Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","Договор");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаРасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "Курс");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "Кратность");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Заказ", "СчетНаОплату");
		ПравилаЗаполнения.Вставить("Патент", "Патент");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				
			Если ЗначениеЗаполнено(Строка.Договор) 
				И ТипЗнч(Строка.Договор) = Тип("Структура") 
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентовСтруктура_Получение"));
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			КонецЕсли;
			
			Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
			КонецЕсли;
			
			// Заполнение счета на оплату.
			Если ВидРасчетовXDTO = "СПокупателем" Тогда
				СтруктураДанныхСтроки.Вставить("СчетНаОплату", Неопределено);
			КонецЕсли;
				
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("Договор");
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	
	КолонкиДляИсключения = "СпособЗачета, Документ, Заказ, СчетНаОплату, ДокументПланирования, Патент";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ФизЛицо = ФизЛицоПоДаннымXDTO(ДанныеXDTO);
	Сотрудник = СотрудникПоФизЛицу(ФизЛицо);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Подотчетник", Сотрудник);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником;
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","Статья");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	
	КолонкиДляИсключения = "ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПеремещениеЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСведенияПрослеживаемости = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		
		ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
		ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			КлючСвязи = КлючСвязи + 1;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			
			ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, Строка, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСведенияПрослеживаемости.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СведенияПрослеживаемости", МассивСтрокСведенияПрослеживаемости);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение;
	КонецЕсли;
	
	СтруктурнаяЕдиница = ДанныеXDTO.СкладОтправитель;
	СтруктурнаяЕдиницаПолучатель = ДанныеXDTO.СкладПолучатель;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		Если ДанныеXDTO.AdditionalInfo.Свойство("СкладУправляющейСистемыОтправитель") Тогда
			СтруктурнаяЕдиница.Вставить("СкладУправляющейСистемы", ДанныеXDTO.AdditionalInfo.СкладУправляющейСистемыОтправитель);
		КонецЕсли;
		
		Если ДанныеXDTO.AdditionalInfo.Свойство("СкладУправляющейСистемыПолучатель") Тогда
			СтруктурнаяЕдиницаПолучатель.Вставить("СкладУправляющейСистемы", ДанныеXDTO.AdditionalInfo.СкладУправляющейСистемыПолучатель);
		КонецЕсли;
	КонецЕсли;
	
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктурнаяЕдиница, "Справочник_Склады_Получение");
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтруктурнаяЕдиница", Инструкция);
	
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктурнаяЕдиницаПолучатель, "Справочник_Склады_Получение");
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтруктурнаяЕдиницаПолучатель", Инструкция);
КонецПроцедуры
Процедура ПКО_Документ_ПересчетТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура",   			"Номенклатура");
		ПравилаЗаполнения.Вставить("Количество",     			"Количество");
		ПравилаЗаполнения.Вставить("КоличествоФакт", 			"КоличествоФакт");
		ПравилаЗаполнения.Вставить("Характеристика",         	"Характеристика");
		ПравилаЗаполнения.Вставить("Упаковка",               	"Упаковка");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок",     	"КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("КоличествоУпаковокФакт", 	"КоличествоУпаковокФакт");
		
		
		//Товары
		МассивСтрокТовары = Новый Массив;
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") 
				И СтруктураДанныхСтроки.КоличествоУпаковок > 0 Тогда
					СтруктураДанныхСтроки.Вставить("Количество",
						СтруктураДанныхСтроки.Количество * СтруктураДанныхСтроки.КоличествоУпаковок);
			КонецЕсли;
			Если СтруктураДанныхСтроки.Свойство("КоличествоУпаковокФакт") 
				И СтруктураДанныхСтроки.КоличествоУпаковокФакт > 0 Тогда
					СтруктураДанныхСтроки.Вставить("КоличествоФакт", 
						СтруктураДанныхСтроки.КоличествоФакт * СтруктураДанныхСтроки.КоличествоУпаковокФакт);
			КонецЕсли;	
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПересчетТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ПолученныеДанные.Организация))
		И ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница)
		И ОбщегоНазначения.СсылкаСуществует(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
			ПолученныеДанные.Организация = ПолученныеДанные.СтруктурнаяЕдиница.Организация;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ПолученныеДанные.Запасы Цикл
		СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;
	КонецЦикла; 
	
	Если ДанныеИБ <> Неопределено Тогда
		
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Товары
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Характеристика");
		МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Запасы,
			ДанныеИБ.Запасы,
			МассивКлючевыхПолей,
			Неопределено);
			
		ДанныеИБ.Запасы.Загрузить(ПолученныеДанные.Запасы.Выгрузить());
		
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
		
		НоваяСтрока = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СуммаРасчетов = ПерваяСтрокаРасшифровкиПлатежаXDTO.СуммаВал;
		НоваяСтрока.Курс = ПерваяСтрокаРасшифровкиПлатежаXDTO.КурсКонвертации;
		НоваяСтрока.Кратность = ПерваяСтрокаРасшифровкиПлатежаXDTO.КратностьКонвертации;
		НоваяСтрока.СуммаПлатежа = ПерваяСтрокаРасшифровкиПлатежаXDTO.Сумма;
		НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПолучениеНаличныхВБанке;
КонецПроцедуры
Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты;
	Иначе
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
		
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
		
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты;
		Иначе
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее;
		КонецЕсли;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам;
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам;
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
	КонецЕсли;
	#КонецОбласти
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		// СтатьяДвиженияДенежныхСредств
		Если ВидРасчетовXDTO = "СПоставщиком" 
			ИЛИ ВидРасчетовXDTO = "СПокупателем" Тогда
			
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Статья", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			КонецЕсли;
		КонецЕсли;
	
		МассивСтрокРасшифровка = Новый Массив;
	
		// Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","Договор");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаРасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "Курс");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "Кратность");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Заказ", "СчетНаОплату");
		ПравилаЗаполнения.Вставить("Патент", "Патент");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				
			Если ЗначениеЗаполнено(Строка.Договор) 
				И ТипЗнч(Строка.Договор) = Тип("Структура") 
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентовСтруктура_Получение"));
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			КонецЕсли;
			
			Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
			КонецЕсли;
			
			// Заполнение счета на оплату.
			Если ВидРасчетовXDTO = "СПокупателем" Тогда
				СтруктураДанныхСтроки.Вставить("СчетНаОплату", Неопределено);
			КонецЕсли;
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокРасшифровка.Количество() > 0
			И МассивСтрокРасшифровка[0].Свойство("Патент")
			И ЗначениеЗаполнено(МассивСтрокРасшифровка[0].Свойство("Патент")) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Патент", МассивСтрокРасшифровка[0].Свойство("Патент"));
		КонецЕсли;
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Патент");
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений);
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.Патент) Тогда
		ДанныеИБ.Патент = ПолученныеДанные.Патент; 
	КонецЕсли; 
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("Договор");
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	
	КолонкиДляИсключения = "СпособЗачета, Документ, Заказ, СчетНаОплату, ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ФизЛицо = ФизЛицоПоДаннымXDTO(ДанныеXDTO);
	Сотрудник = СотрудникПоФизЛицу(ФизЛицо);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Подотчетник", Сотрудник);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка;
КонецПроцедуры
Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа[0];
	КонецЕсли;
	СтрокаРасшифровка.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаРасчетов = ПолученныеДанные.СуммаДокумента;
	СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДенежныхСредств, ПолученныеДанные.Дата);
	СтрокаРасшифровка.Курс = СтруктураКурсаВалюты.Курс;
	СтрокаРасшифровка.Кратность = СтруктураКурсаВалюты.Кратность;
	СтрокаРасшифровка.СтавкаНДС	= УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаРасчетов");
	МассивКлючевыхПолей.Добавить("Курс");
	МассивКлючевыхПолей.Добавить("Кратность");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_ПлатежноеПоручение_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ПеречислениеВБюджет") И ДанныеXDTO.ПеречислениеВБюджет = Истина Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога;
		ПолученныеДанные.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
	Иначе
		Если ДанныеXDTO.Свойство("СтавкаНДС") Тогда
			ПолученныеДанные.СтавкаНДС = СтавкаНДСПоСтроке(ДанныеXDTO.СтавкаНДС.Значение);
		КонецЕсли;
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.КодБК) Тогда
		ПолученныеДанные.Налог = Справочники.ВидыНалогов.НайтиПоРеквизиту("КодБК", ПолученныеДанные.КодБК);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПриходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	МассивСтрокСведенияПрослеживаемости = Новый Массив;
	
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС"); 
		Если (КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса") Тогда
			ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");   
		КонецЕсли;
		
		ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
		ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			КлючСвязи = КлючСвязи + 1;
			
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			
			ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, Строка, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСведенияПрослеживаемости.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СведенияПрослеживаемости", МассивСтрокСведенияПрослеживаемости);
	КонецЕсли;
	
	Если МассивСтрокУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Расходы", МассивСтрокУслуги);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ПриходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Заполнить(Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Договор) Тогда
		ПолученныеДанные.Договор = ДоговорПоУмолчанию(ПолученныеДанные.Ссылка, ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, ПолученныеДанные.ВидОперации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;
	
	Для каждого Строка Из ПолученныеДанные.Запасы Цикл
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",          ПолученныеДанные.Организация);
		СтруктураДанные.Вставить("Номенклатура",         Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",       Строка.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС",   ПолученныеДанные.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки",        ПолученныеДанные.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатурыДляЗаполненияДокумента(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		КонецЕсли;
		Строка.СтруктурнаяЕдиница = ПолученныеДанные.СтруктурнаяЕдиница;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
				Строка.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		ПересчитатьСтрокуТабличнойЧасти(Строка, ПолученныеДанные);
	КонецЦикла;
	
	
	Для каждого Строка Из ПолученныеДанные.Расходы Цикл
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",          ПолученныеДанные.Организация);
		СтруктураДанные.Вставить("Номенклатура",         Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС",   ПолученныеДанные.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки",        ПолученныеДанные.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатурыДляЗаполненияДокумента(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		КонецЕсли;
		
		ПересчитатьСтрокуТабличнойЧасти(Строка, ПолученныеДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.СтруктурнаяЕдиница) Тогда
			Строка.СтруктурнаяЕдиница = ПолученныеДанные.Подразделение;
		КонецЕсли;
	КонецЦикла;
	
	
	Если ДанныеИБ <> Неопределено Тогда
		СвойстваИсключения = Новый Массив;
		СвойстваИсключения.Добавить("Номер");
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, СвойстваИсключения);
		
		ДанныеИБ.Запасы.Очистить();
		Для каждого Строка Из ПолученныеДанные.Запасы Цикл
			НоваяСтрока = ДанныеИБ.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		ДанныеИБ.Расходы.Очистить();
		Для каждого Строка Из ПолученныеДанные.Расходы Цикл
			НоваяСтрока = ДанныеИБ.Расходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		
		ЗаполняемыеСвойства = "СуммаДокумента";
		ЗаполнитьЗначенияНепустыхСвойств(ДанныеИБ, ПолученныеДанные, ЗаполняемыеСвойства);
		
		Для каждого КлючЗначение Из ПолученныеДанные.ДополнительныеСвойства Цикл
			ДанныеИБ.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ДанныеИБ.СуммаДокумента = ДанныеИБ.Запасы.Итог("Всего") + ДанныеИБ.Расходы.Итог("Всего");
		
		ПолученныеДанные = Неопределено;
		ДанныеИБ.Заполнить(Неопределено);
	Иначе
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Запасы.Итог("Всего") + ПолученныеДанные.Расходы.Итог("Всего");
		
		ПолученныеДанные.Заполнить(Неопределено);
		
		ПолученныеДанные.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РасходнаяНакладная_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			КлючСвязи = КлючСвязи + 1;	
		
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
				
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			Если Строка.СтавкаНДС <> Неопределено Тогда
				Строка.СтавкаНДС = СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение);
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РасходнаяНакладная_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Заполнить(Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Договор) Тогда
		ПолученныеДанные.Договор = ДоговорПоУмолчанию(ПолученныеДанные.Ссылка, ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, ПолученныеДанные.ВидОперации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.НалогообложениеНДС) Тогда
		ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата);
	КонецЕсли;
	
	ПолученныеДанные.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Для каждого Строка Из ПолученныеДанные.Запасы Цикл
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",          ПолученныеДанные.Организация);
		СтруктураДанные.Вставить("Номенклатура",         Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",       Строка.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС",   ПолученныеДанные.НалогообложениеНДС);
		СтруктураДанные.Вставить("ДатаОбработки",        ПолученныеДанные.Дата);
		
		СтруктураДанные = ПолучитьДанныеНоменклатурыДляЗаполненияДокумента(СтруктураДанные);
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		КонецЕсли;
		Строка.СтруктурнаяЕдиница = ПолученныеДанные.СтруктурнаяЕдиница;
		
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
				Строка.Характеристика = СтруктураДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
		ПересчитатьСтрокуТабличнойЧасти(Строка, ПолученныеДанные);
	КонецЦикла;
	ПолученныеДанные.СуммаДокумента = ПолученныеДанные.Запасы.Итог("Всего");
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ <> Неопределено Тогда
		ТекущийВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "ВидОперации");
		Если ТекущийВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
			ИЛИ ТекущийВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
			ПолученныеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	ПолученныеДанные.Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	ПолученныеДанные.Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Инкассация_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации)
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк;
КонецПроцедуры
Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПеремещениеВКассуККМ = Ложь;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
			
		СчетУчетаРасчетовXDTO = ДанныеXDTO.РасшифровкаПлатежа[0].СчетУчетаРасчетов;
		Если Найти(СчетУчетаРасчетовXDTO, "50.02") Тогда
			ЭтоПеремещениеВКассуККМ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПеремещениеВКассуККМ Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ;
	ИначеЕсли ДанныеXDTO.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеXDTO.Контрагент) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты;
	Иначе
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ <> Неопределено
		И ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
		ПолученныеДанные.ВидОперации = ДанныеИБ.ВидОперации;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
		
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
	ИначеЕсли ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты;
		Иначе
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее;
		КонецЕсли;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымКредитам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымКредитам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам;
				
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымЗаймам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымЗаймам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты;
				
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
	КонецЕсли;
	
	#КонецОбласти
	
	МассивСтрокРасшифровка = Новый Массив;
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		// Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","Договор");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаРасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "Курс");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "Кратность");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Заказ", "СчетНаОплату");
	
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Договор) 
				И ТипЗнч(Строка.Договор) = Тип("Структура") 
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентовСтруктура_Получение"));
			КонецЕсли;
					
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			КонецЕсли;
			
			Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
			КонецЕсли;
			
			// ВидПлатежаПоКредитамЗаймам
			ВидРасчетовРасширенныйXDTO = Строка.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если Найти(ВидРасчетовРасширенныйXDTO, "Проценты") Тогда
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.Проценты;
			ИначеЕсли Найти(ВидРасчетовРасширенныйXDTO, "Комиссия") Тогда
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.Комиссия;
			Иначе
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
			КонецЕсли;
				
			СтруктураДанныхСтроки.Вставить("ТипСуммы", ВидПлатежаПоКредитамЗаймам);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("Договор");
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	
	КолонкиДляИсключения = "СпособЗачета, Документ, Заказ, СчетНаОплату, ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ФизЛицо = ФизЛицоПоДаннымXDTO(ДанныеXDTO);
	Сотрудник = СотрудникПоФизЛицу(ФизЛицо);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Подотчетник", Сотрудник);
КонецПроцедуры
Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
КонецПроцедуры
Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПеречислениеЗарплСотруднику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
	
	Если ДанныеXDTO.Свойство("ПоказательКБК") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательКБК) Тогда
		ПолученныеДанные.ВидНалога = Справочники.ВидыНалогов.НайтиПоРеквизиту("КодБК", ДанныеXDTO.ПоказательКБК); 
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидНалога) Тогда
		ПолученныеДанные.ВидНалога = ДанныеИБ.ВидНалога;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ <> Неопределено
		И ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
		ПолученныеДанные.ВидОперации = ДанныеИБ.ВидОперации;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0;
		
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
	ИначеЕсли ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.Контрагент) Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
		Иначе
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
		КонецЕсли;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымКредитам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымКредитам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам;
				
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымЗаймам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымЗаймам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
				
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
	КонецЕсли;
	
	#КонецОбласти
	
	МассивСтрокРасшифровка = Новый Массив;
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
		// СтатьяДвиженияДенежныхСредств
		Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Статья", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
		КонецЕсли;
	
		// Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","Договор");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаРасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "Курс");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "Кратность");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Заказ", "СчетНаОплату");
		
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Договор) 
				И ТипЗнч(Строка.Договор) = Тип("Структура") 
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентовСтруктура_Получение"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата);
			КонецЕсли;
			
			Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, Строка.ДокументРасчетов);
			КонецЕсли;
			
			// ВидПлатежаПоКредитамЗаймам
			ВидРасчетовРасширенныйXDTO = Строка.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если Найти(ВидРасчетовРасширенныйXDTO, "Проценты") Тогда
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.Проценты;
			ИначеЕсли Найти(ВидРасчетовРасширенныйXDTO, "Комиссия") Тогда
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.Комиссия;
			Иначе
			   ВидПлатежаПоКредитамЗаймам = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
			КонецЕсли;
				
			СтруктураДанныхСтроки.Вставить("ТипСуммы", ВидПлатежаПоКредитамЗаймам);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	КолонкиДляВключения = Новый Массив;
	КолонкиДляВключения.Добавить("Договор");
	КолонкиДляВключения.Добавить("СуммаПлатежа");
	КолонкиДляВключения.Добавить("СуммаРасчетов");
	КолонкиДляВключения.Добавить("Курс");
	КолонкиДляВключения.Добавить("Кратность");
	КолонкиДляВключения.Добавить("СтавкаНДС");
	КолонкиДляВключения.Добавить("СуммаНДС");
	
	КолонкиДляИсключения = "СпособЗачета, Документ, Заказ, СчетНаОплату, ДокументПланирования";
	
	ОбработатьРасшифровкуПлатежа(ПолученныеДанные);
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		КолонкиДляВключения,
		КолонкиДляИсключения);
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO);
	
	ФизЛицо = ФизЛицоПоДаннымXDTO(ДанныеXDTO);
	Сотрудник = СотрудникПоФизЛицу(ФизЛицо);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Подотчетник", Сотрудник);
КонецПроцедуры
Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_СБДССнятиеНаличных_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
КонецПроцедуры
Процедура ПКО_Документ_СБДССнятиеНаличных_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокСведенияПрослеживаемости = Новый Массив;
	МассивСтрокСерии = Новый Массив;
	
	КлючСвязи = 0;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		ПравилаЗаполнения.Вставить("КоличествоРНПТ", "КоличествоПрослеживаемости");
		ПравилаЗаполнения.Вставить("ПрослеживаемыйТовар", "ПрослеживаемыйТовар");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			КлючСвязи = КлючСвязи + 1;
	
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ИдентификаторСтроки", Строка(Новый УникальныйИдентификатор));
			
			ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, Строка, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена);
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				СтруктураДанныхСтроки.Вставить("СерииНоменклатуры", Строка.Серия.Наименование);
				МассивСтрокСерии.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокСведенияПрослеживаемости.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СведенияПрослеживаемости", МассивСтрокСведенияПрослеживаемости);
	КонецЕсли;
	
	Если МассивСтрокСерии.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СерииНоменклатуры", МассивСтрокСерии);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Договор) Тогда
		ПолученныеДанные.Договор = ДоговорПоУмолчанию(ПолученныеДанные.Ссылка, ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, ПолученныеДанные.ВидОперации);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ИсправляемыйСчетФактура")
		И ЗначениеЗаполнено(ДанныеXDTO.ИсправляемыйСчетФактура) Тогда
		ПолученныеДанные.Исправление = ДанныеXDTO.ВидСчетаФактуры.Значение <> "Корректировочный";
	КонецЕсли;   
	
	МассивСтрокДокументы = Новый Массив;
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		Для Каждого Строка Из ДанныеXDTO.ДокументыОснования Цикл
			СтруктураДанныхСтроки = Новый Структура;
		
			Если ЗначениеЗаполнено(Строка.ДокументОснование) И ТипЗнч(Строка.ДокументОснование) = Тип("Структура") Тогда
	
				ТипЗначенияСвойства = Строка.ДокументОснование.Ссылка.ТипЗначенияXDTO;
	
				СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
				Для Каждого СтрокаПКО Из СтрокиПКО Цикл
					ДокОснование = Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, СтрокаПКО.ИмяПКО);
				КонецЦикла;
				
				Если ДокОснование = Неопределено Тогда
					Продолжить;
				КонецЕсли;
	
				СтруктураДанныхСтроки.Вставить("ДокументОснование", ДокОснование);
			КонецЕсли;
			
			МассивСтрокДокументы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокДокументы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Договор) Тогда
		ПолученныеДанные.Договор = ДоговорПоУмолчанию(ПолученныеДанные.Ссылка, ПолученныеДанные.Контрагент, ПолученныеДанные.Организация, ПолученныеДанные.ВидОперации);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ИсправляемыйСчетФактура")
		И ЗначениеЗаполнено(ДанныеXDTO.ИсправляемыйСчетФактура) Тогда
		ПолученныеДанные.Исправление = ДанныеXDTO.ВидСчетаФактуры.Значение <> "Корректировочный";
	КонецЕсли;   
	
	МассивСтрокДокументы = Новый Массив;
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		Для Каждого Строка Из ДанныеXDTO.ДокументыОснования Цикл
			СтруктураДанныхСтроки = Новый Структура;
		
			Если ЗначениеЗаполнено(Строка.ДокументОснование) И ТипЗнч(Строка.ДокументОснование) = Тип("Структура") Тогда
	
				ТипЗначенияСвойства = Строка.ДокументОснование.Ссылка.ТипЗначенияXDTO;
	
				СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
				Для Каждого СтрокаПКО Из СтрокиПКО Цикл
					ДокОснование = Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, СтрокаПКО.ИмяПКО);
				КонецЦикла;
				
				Если ДокОснование = Неопределено Тогда
					Продолжить;
				КонецЕсли;
	
				СтруктураДанныхСтроки.Вставить("ДокументОснование", ДокОснование);
			КонецЕсли;
			
			МассивСтрокДокументы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокДокументы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументы);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ЗаписыватьНовыеЦеныПоверхУстановленных = Истина;
	ПолученныеДанные.ПоказыватьНовуюЦену = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.14") Тогда
		ПравилаЗаполнения.Вставить("SKU", "SKU");
	КонецЕсли;
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("ВидЦены", ДанныеXDTO.ТипЦен);
			СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
			
			Если СтруктураДанныхСтроки.Свойство("SKU")
				И ЗначениеЗаполнено(СтруктураДанныхСтроки.SKU) Тогда
				СтруктураДанныхСтроки.Вставить("SKU", Число(СтруктураДанныхСтроки.SKU));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.14") Тогда
	
		Если ДанныеИБ = Неопределено Тогда
			ПараметрыОтбора = Новый Структура("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			МассивСтрокБезХарактеристик = ПолученныеДанные.Запасы.НайтиСтроки(ПараметрыОтбора);
			ПолученныеДанные.ПоказыватьХарактеристики = ПолученныеДанные.Запасы.Количество() <> МассивСтрокБезХарактеристик.Количество();
		КонецЕсли;
	
		Если ДанныеИБ = Неопределено
			И ПолученныеДанные.ДополнительныеСвойства.Свойство("Запасы") Тогда
			
			МассивКодыSKU = ПолученныеДанные.ДополнительныеСвойства.Запасы;
			Запасы = ПолученныеДанные.Запасы;
			
			Для НомерСтроки = 1 По Запасы.Количество() Цикл
				
				SKU = Неопределено;
				Если МассивКодыSKU[НомерСтроки - 1].Свойство("SKU", SKU) Тогда
					
					Если РегистрыСведений.КодыТоваровSKU.SKUСвободен(SKU) Тогда
						РегистрыСведений.КодыТоваровSKU.ЗаписатьSKU(
							Запасы[НомерСтроки - 1].Номенклатура,
							Запасы[НомерСтроки - 1].Характеристика,
							Справочники.ПартииНоменклатуры.ПустаяСсылка(),
							Запасы[НомерСтроки - 1].ЕдиницаИзмерения,
							SKU);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	#Область ТоварыИУслуги
	#Область Товары
	МассивСтрокТовары = Новый Массив;
	
	КлючСвязи = 0;
	Скидки = Новый Соответствие;
	НачисленныеБонусы = Новый Соответствие;
	
	МассивСтрокСкидки 				= Новый Массив;
	МассивСтрокНачисленныеБонусы 	= Новый Массив;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		Если ДанныеXDTO.AdditionalInfo.Свойство("ПримененныеСкидки") Тогда
			Скидки = ДанныеXDTO.AdditionalInfo.ПримененныеСкидки;
		КонецЕсли;
		Если ДанныеXDTO.AdditionalInfo.Свойство("НачисленныеБонусы") Тогда
			НачисленныеБонусы = ДанныеXDTO.AdditionalInfo.НачисленныеБонусы;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТабличнойЧастиТовары = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыПродажа", "Товары");
	
	ТабличнаяЧастьТовары = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиТовары, ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
		
		ИспользоватьТипыЗапасов = ТабличнаяЧастьТовары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если Не ЗначениеЗаполнено(Строка.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			КлючСвязи = КлючСвязи + 1;
			СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
			
			ПодготовитьДанныеПоСкидкам(КлючСвязи, МассивСтрокСкидки, Скидки, Строка);
			ПодготовитьДанныеПоБонусам(КлючСвязи, МассивСтрокНачисленныеБонусы, НачисленныеБонусы, Строка);
			
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
		
	#КонецОбласти
	#Область Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			КлючСвязи = КлючСвязи + 1;
			СтруктураДанныхСтроки.Вставить("КлючСвязи", КлючСвязи);
				
			ПодготовитьДанныеПоСкидкам(КлючСвязи, МассивСтрокСкидки, Скидки, Строка);
			ПодготовитьДанныеПоБонусам(КлючСвязи, МассивСтрокНачисленныеБонусы, НачисленныеБонусы, Строка);
			
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти   
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		Возврат;
	КонецЕсли; 
	
	#Область АкцизныеМарки
	Если  КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		МассивСтрокАкцизныеМарки = Новый Массив;
		Если ДанныеXDTO.Свойство("АкцизныеМарки")
			И ЗначениеЗаполнено(ДанныеXDTO.АкцизныеМарки) Тогда
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
			ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");  
			
			Для Каждого Строка Из ДанныеXDTO.АкцизныеМарки Цикл
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если СтруктураДанныхСтроки.Свойство("Характеристика") Тогда 
					СтруктураДанныхСтроки.Вставить("АкцизнаяМарка", АкцизнаяМарка(КомпонентыОбмена, ПолученныеДанные, Строка.НомерАкцизнойМарки, СтруктураДанныхСтроки.Номенклатура, СтруктураДанныхСтроки.Характеристика));
				Иначе
					СтруктураДанныхСтроки.Вставить("АкцизнаяМарка", АкцизнаяМарка(КомпонентыОбмена, ПолученныеДанные, Строка.НомерАкцизнойМарки, СтруктураДанныхСтроки.Номенклатура));
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("КодАкцизнойМарки", Строка.НомерАкцизнойМарки);
				
				МассивСтрокАкцизныеМарки.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
		КонецЕсли;  
		
		Если МассивСтрокАкцизныеМарки.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("АкцизныеМарки", МассивСтрокАкцизныеМарки);
		КонецЕсли; 
	КонецЕсли; 
	#КонецОбласти
	
	
	#КонецОбласти
	#Область Оплата
	МассивСтрокОплата = Новый Массив;
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
			Если ДанныеXDTO.Свойство("ОплатыККМ") Тогда
				Для Каждого Строка Из ДанныеXDTO.ОплатыККМ Цикл
					Если Строка.ТипОплаты.Значение = "Электронно" Тогда 
						СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.Сумма, Перечисления.ВидыБезналичныхОплат.БанковскаяКарта);
						МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
	Иначе
		Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
			И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
			Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
				СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.СуммаОплаты, Перечисления.ВидыБезналичныхОплат.БанковскаяКарта);
				
				Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
					ИмяПКО = "Справочник_Контрагенты_Получение";
					ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
					Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
												ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
					СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
				КонецЕсли;
				
				МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартамиПодарочныхСертификатов")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.СуммаОплаты, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
			КонецЕсли;
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаСертификатами Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.Сумма, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСтрокРеализованныхСертификатов = Новый Массив;
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.Сумма, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
			
			МассивСтрокРеализованныхСертификатов.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокОплата);
	КонецЕсли;
	
	Если МассивСтрокРеализованныхСертификатов.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокРеализованныхСертификатов);
	КонецЕсли;
	
	ЭтоЧекУдаленнойФискализации = Ложь;
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") Тогда
		Для каждого Строка Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
			Если Строка.Свойство.Наименование = "ЭтоЧекУдаленнойФискализации" Тогда
				ЭтоЧекУдаленнойФискализации = Строка.ЗначениеСвойства;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ЭтоЧекУдаленнойФискализации", ЭтоЧекУдаленнойФискализации);
	
	#КонецОбласти
	
	Если МассивСтрокНачисленныеБонусы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БонусныеБаллыКНачислению", МассивСтрокНачисленныеБонусы);
	КонецЕсли;
	
	Если МассивСтрокСкидки.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СкидкиНаценки", МассивСтрокСкидки);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ЭтоЧекУдаленнойФискализации") Тогда
		ЭтоЧекУдаленнойФискализации = ПолученныеДанные.ДополнительныеСвойства.ЭтоЧекУдаленнойФискализации;
	Иначе
		ЭтоЧекУдаленнойФискализации = Ложь;
	КонецЕсли;
	
	Если  КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		Если НЕ ЭтоЧекУдаленнойФискализации Тогда
			УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
		КонецЕсли;
	Иначе
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли; 
	
	Если ДанныеИБ <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) Тогда
			ПолученныеДанные.КассаККМ = ДанныеИБ.КассаККМ;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
			ПолученныеДанные.КассаККМ = КассаККМпоСтруктурнойЕдинице(ПолученныеДанные.СтруктурнаяЕдиница);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЭквайринговыйТерминал(ПолученныеДанные);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		Если ПолученныеДанные .Запасы.Количество() = 0 Тогда
			ПолученныеДанные = Неопределено;
			Возврат;
		КонецЕсли;
		
		ПолученныеДанные.Организация = ПолученныеДанные.КассаККМ.Владелец;
		ПолученныеДанные.СтруктурнаяЕдиница = ПолученныеДанные.КассаККМ.СтруктурнаяЕдиница;
		ПолученныеДанные.Подразделение = ПолученныеДанные.КассаККМ.Подразделение;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
			ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;  
	
		Если ЭтоЧекУдаленнойФискализации Тогда
			ПолученныеДанные.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;
		Иначе
			ПолученныеДанные.Статус = Перечисления.СтатусыЧековККМ.Пробит;
		КонецЕсли;
	
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК" Тогда
			Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КассоваяСмена) Тогда
				Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ОРПТекущейКассовойСмены) Тогда 
					ЗаполнитьОРПТекущейКассовойСмены(КомпонентыОбмена, ПолученныеДанные.КассаККМ);
				КонецЕсли;
				ПолученныеДанные.КассоваяСмена = КомпонентыОбмена.ПараметрыКонвертации.ОРПТекущейКассовойСмены;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Организация) Тогда
		ПолученныеДанные.Организация = ПолученныеДанные.КассаККМ.Владелец;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
		ПолученныеДанные.СтруктурнаяЕдиница = ПолученныеДанные.КассаККМ.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		ПолученныеДанные.Подразделение = ПолученныеДанные.КассаККМ.Подразделение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.НалогообложениеНДС) Тогда
		ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата);
	КонецЕсли;
	
	//
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидЦен) Тогда
		ПолученныеДанные.ВидЦен = ПолученныеДанные.СтруктурнаяЕдиница.РозничныйВидЦен;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ПолученныеДанные.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
			СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Всего) Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаСкидкиНаценки)
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаАвтоматическойСкидки) Тогда
			СтрокаТаблицы.СуммаСкидкиНаценки = Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.Количество, 2) - СтрокаТаблицы.Сумма;
			Если СтрокаТаблицы.СуммаСкидкиНаценки <> 0 Тогда
				СтрокаТаблицы.ПроцентСкидкиНаценки = Окр(100*СтрокаТаблицы.СуммаСкидкиНаценки / (СтрокаТаблицы.Количество * СтрокаТаблицы.Цена), 2);
			КонецЕсли; 
		КонецЕсли;
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ПолученныеДанные.Запасы, СтрокаТаблицы, "КлючСвязи");
	КонецЦикла;
	
	// Акцизные марки
	Если  КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		Для Каждого СтрокаАкцизнойМарки Из ПолученныеДанные.АкцизныеМарки Цикл
			Если ЗначениеЗаполнено(СтрокаАкцизнойМарки.АкцизнаяМарка) Тогда
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаАкцизнойМарки.АкцизнаяМарка);
				
				СтрокиЗапасов = ПолученныеДанные.Запасы.НайтиСтроки(СтруктураПоиска); 
				Если СтрокиЗапасов.Количество() = 1 Тогда
					СтрокаЗапасов = СтрокиЗапасов[0];
					СтрокаАкцизнойМарки.КлючСвязи = СтрокаЗапасов.КлючСвязи;
					Если ТипЗнч(СтрокаЗапасов.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтарыйКоэффициент = СтрокаЗапасов.ЕдиницаИзмерения.Коэффициент; 
						Если СтарыйКоэффициент = 0 Тогда 
							СтарыйКоэффициент = 1;
						КонецЕсли;
					Иначе
						СтарыйКоэффициент = 1;
					КонецЕсли;
					СтрокаЗапасов.ЕдиницаИзмерения = СтрокаАкцизнойМарки.АкцизнаяМарка.Упаковка;
					Если ТипЗнч(СтрокаЗапасов.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						НовыйКоэффициент = СтрокаЗапасов.ЕдиницаИзмерения.Коэффициент; 
						Если НовыйКоэффициент = 0 Тогда 
							НовыйКоэффициент = 1;
						КонецЕсли;
					Иначе
						НовыйКоэффициент = 1;
					КонецЕсли;
					СтрокаЗапасов.Количество = СтрокаЗапасов.Количество * СтарыйКоэффициент / НовыйКоэффициент;
					СтрокаЗапасов.Цена = СтрокаЗапасов.Цена * НовыйКоэффициент / СтарыйКоэффициент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ПолученоНаличными = ПолученныеДанные.СуммаДокумента - ПолученныеДанные.БезналичнаяОплата.Итог("Сумма");
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) Тогда
		ДанныеИБ.КассаККМ = ПолученныеДанные.КассаККМ;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВидЦен) Тогда
		ДанныеИБ.ВидЦен = ПолученныеДанные.ВидЦен;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		ДанныеИБ.Организация = ПолученныеДанные.КассаККМ.Владелец;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВалютаДокумента) Тогда
		ПолученныеДанные.ВалютаДокумента = ПолученныеДанные.КассаККМ.ВалютаДенежныхСредств;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПолученныеДанные.Статус) Тогда
		ДанныеИБ.Статус = ПолученныеДанные.Статус;
	КонецЕсли;
	
	//Товары
	ДанныеИБ.Запасы.Загрузить(ПолученныеДанные.Запасы.Выгрузить());
	
	//Оплата
	ДанныеИБ.БезналичнаяОплата.Загрузить(ПолученныеДанные.БезналичнаяОплата.Выгрузить());
	
	// Акцизные марки
	ДанныеИБ.АкцизныеМарки.Загрузить(ПолученныеДанные.АкцизныеМарки.Выгрузить());
	
	ДанныеИБ.ПолученоНаличными = ПолученныеДанные.ПолученоНаличными;
	
	Для каждого КлючЗначение Из ПолученныеДанные.ДополнительныеСвойства Цикл
		ДанныеИБ.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	ЗаполнитьЭквайринговыйТерминал(ДанныеИБ);
		
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ОчиститьПолученныеДанные");
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМВозврат_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	#Область Товары
	МассивСтрокТовары = Новый Массив;
	
	ИмяТабличнойЧастиВозвратТоваров = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыВозвратПродажи", "ВозвратТоваров");
	
	ТабличнаяЧастьВозвратТоваров = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиВозвратТоваров, ТабличнаяЧастьВозвратТоваров)
		И ЗначениеЗаполнено(ТабличнаяЧастьВозвратТоваров) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
			ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
			ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		КонецЕсли;
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Всего", "Сумма");
			
		ИспользоватьТипыЗапасов = ТабличнаяЧастьВозвратТоваров.Колонки.Найти("ТипЗапасов") <> Неопределено;
		
		Для Каждого Строка Из ТабличнаяЧастьВозвратТоваров Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("СтавкаНДС", СтавкаНДСПоСтроке(Строка.СтавкаНДС.Значение));
			
			Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
				И НЕ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
				Если Строка.Количество > 0 Тогда
					СтруктураДанныхСтроки.Количество = -СтруктураДанныхСтроки.Количество;
					Если СтруктураДанныхСтроки.Свойство("Сумма") Тогда
						СтруктураДанныхСтроки.Сумма  = -СтруктураДанныхСтроки.Сумма;
					КонецЕсли;
					Если СтруктураДанныхСтроки.Свойство("СуммаНДС") Тогда
						СтруктураДанныхСтроки.СуммаНДС = -СтруктураДанныхСтроки.СуммаНДС;
					КонецЕсли;
					Если СтруктураДанныхСтроки.Свойство("Всего") Тогда
						СтруктураДанныхСтроки.Всего = -СтруктураДанныхСтроки.Всего;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Запасы", МассивСтрокТовары);
	ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		Возврат;
	КонецЕсли;
	#КонецОбласти 
	
	#Область АкцизныеМарки
	Если  КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		МассивСтрокАкцизныеМарки = Новый Массив;
		Если ДанныеXDTO.Свойство("АкцизныеМарки")
			И ЗначениеЗаполнено(ДанныеXDTO.АкцизныеМарки) Тогда
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
			ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");  
			
			Для Каждого Строка Из ДанныеXDTO.АкцизныеМарки Цикл
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если СтруктураДанныхСтроки.Свойство("Характеристика") Тогда 
					СтруктураДанныхСтроки.Вставить("АкцизнаяМарка", АкцизнаяМарка(КомпонентыОбмена, ПолученныеДанные, Строка.НомерАкцизнойМарки, СтруктураДанныхСтроки.Номенклатура, СтруктураДанныхСтроки.Характеристика));
				Иначе
					СтруктураДанныхСтроки.Вставить("АкцизнаяМарка", АкцизнаяМарка(КомпонентыОбмена, ПолученныеДанные, Строка.НомерАкцизнойМарки, СтруктураДанныхСтроки.Номенклатура));
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("КодАкцизнойМарки", Строка.НомерАкцизнойМарки);
					
				МассивСтрокАкцизныеМарки.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
		КонецЕсли;  
		
		Если МассивСтрокАкцизныеМарки.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("АкцизныеМарки", МассивСтрокАкцизныеМарки);
		КонецЕсли; 
	КонецЕсли; 
	#КонецОбласти
	
	
	#Область Оплата
	МассивСтрокОплата = Новый Массив;
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
			Если ДанныеXDTO.Свойство("ОплатыККМ") Тогда
				Для Каждого Строка Из ДанныеXDTO.ОплатыККМ Цикл
					Если Строка.ТипОплаты.Значение = "Электронно" Тогда 
						СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.Сумма, Перечисления.ВидыБезналичныхОплат.БанковскаяКарта);
						МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
	Иначе
		Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
			И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
			Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
				СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.СуммаОплаты, Перечисления.ВидыБезналичныхОплат.БанковскаяКарта);
				
				Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
					ИмяПКО = "Справочник_Контрагенты_Получение";
					ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
					Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
												ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
					СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
				КонецЕсли;
				
				МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартамиПодарочныхСертификатов")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.СуммаОплаты, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
			КонецЕсли;
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаСертификатами Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.Сумма, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСтрокРеализованныхСертификатов = Новый Массив;
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ПодарочныеСертификаты Цикл
			СтруктураДанныхСтроки = Новый Структура("Сумма, ВидОплаты", Строка.Сумма, Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат);
			
			МассивСтрокРеализованныхСертификатов.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокОплата);
	КонецЕсли;
	
	Если МассивСтрокРеализованныхСертификатов.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("БезналичнаяОплата", МассивСтрокРеализованныхСертификатов);
	КонецЕсли;
	
	ЭтоЧекУдаленнойФискализации = Ложь;
	Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") Тогда
		Для каждого Строка Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
			Если Строка.Свойство.Наименование = "ЭтоЧекУдаленнойФискализации" Тогда
				ЭтоЧекУдаленнойФискализации = Строка.ЗначениеСвойства;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ЭтоЧекУдаленнойФискализации", ЭтоЧекУдаленнойФискализации);
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМВозврат_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ЭтоЧекУдаленнойФискализации") Тогда
		ЭтоЧекУдаленнойФискализации = ПолученныеДанные.ДополнительныеСвойства.ЭтоЧекУдаленнойФискализации;
	Иначе
		ЭтоЧекУдаленнойФискализации = Ложь;
	КонецЕсли;
	
	Если  КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		Если НЕ ЭтоЧекУдаленнойФискализации Тогда
			УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
		КонецЕсли;
	Иначе
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли; 
	
	Если ДанныеИБ <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) Тогда
			ПолученныеДанные.КассаККМ = ДанныеИБ.КассаККМ;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
			ПолученныеДанные.КассаККМ = КассаККМпоСтруктурнойЕдинице(ПолученныеДанные.СтруктурнаяЕдиница);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЭквайринговыйТерминал(ПолученныеДанные);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
		
		Если ПолученныеДанные.Запасы.Количество() = 0 Тогда
			ПолученныеДанные = Неопределено;
			Возврат;
		КонецЕсли;
	
		ПолученныеДанные.Организация = ПолученныеДанные.КассаККМ.Владелец;
		ПолученныеДанные.СтруктурнаяЕдиница = ПолученныеДанные.КассаККМ.СтруктурнаяЕдиница;
		ПолученныеДанные.Подразделение = ПолученныеДанные.КассаККМ.Подразделение;
	
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
			ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК" Тогда
			Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КассоваяСмена) Тогда
				Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ОРПТекущейКассовойСмены) Тогда 
					ЗаполнитьОРПТекущейКассовойСмены(КомпонентыОбмена, ПолученныеДанные.КассаККМ);
				КонецЕсли;
				ПолученныеДанные.КассоваяСмена = КомпонентыОбмена.ПараметрыКонвертации.ОРПТекущейКассовойСмены;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Организация) Тогда
		ПолученныеДанные.Организация = ПолученныеДанные.КассаККМ.Владелец;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтруктурнаяЕдиница) Тогда
		ПолученныеДанные.СтруктурнаяЕдиница = ПолученныеДанные.КассаККМ.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Подразделение) Тогда
		ПолученныеДанные.Подразделение = ПолученныеДанные.КассаККМ.Подразделение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.НалогообложениеНДС) Тогда
		ПолученныеДанные.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ПолученныеДанные.Организация,, ПолученныеДанные.Дата);
	КонецЕсли;
		
	//
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидЦен) Тогда
		ПолученныеДанные.ВидЦен = ПолученныеДанные.СтруктурнаяЕдиница.РозничныйВидЦен;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ПолученныеДанные.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
			СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Всего) Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаСкидкиНаценки)
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаАвтоматическойСкидки) Тогда
			СтрокаТаблицы.СуммаСкидкиНаценки = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество - СтрокаТаблицы.Сумма;
			Если СтрокаТаблицы.СуммаСкидкиНаценки <> 0 Тогда
				СтрокаТаблицы.ПроцентСкидкиНаценки = Окр(100*СтрокаТаблицы.СуммаСкидкиНаценки / (СтрокаТаблицы.Количество * СтрокаТаблицы.Цена), 2);
			КонецЕсли; 
		КонецЕсли;
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ПолученныеДанные.Запасы, СтрокаТаблицы, "КлючСвязи");
	КонецЦикла;  
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда 
		
		// Акцизные марки
		Для Каждого СтрокаАкцизнойМарки Из ПолученныеДанные.АкцизныеМарки Цикл
			Если ЗначениеЗаполнено(СтрокаАкцизнойМарки.АкцизнаяМарка) Тогда
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаАкцизнойМарки.АкцизнаяМарка);
				
				СтрокиЗапасов = ПолученныеДанные.Запасы.НайтиСтроки(СтруктураПоиска); 
				Если СтрокиЗапасов.Количество() = 1 Тогда
					СтрокаЗапасов = СтрокиЗапасов[0];
					СтрокаАкцизнойМарки.КлючСвязи = СтрокаЗапасов.КлючСвязи;
					Если ТипЗнч(СтрокаЗапасов.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						СтарыйКоэффициент = СтрокаЗапасов.ЕдиницаИзмерения.Коэффициент; 
					Иначе
						СтарыйКоэффициент = 1;
					КонецЕсли;
					СтрокаЗапасов.ЕдиницаИзмерения = СтрокаАкцизнойМарки.АкцизнаяМарка.Упаковка;
					Если ТипЗнч(СтрокаЗапасов.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						НовыйКоэффициент = СтрокаЗапасов.ЕдиницаИзмерения.Коэффициент; 
					Иначе
						НовыйКоэффициент = 1;
					КонецЕсли;
					СтрокаЗапасов.Количество = СтрокаЗапасов.Количество * СтарыйКоэффициент / НовыйКоэффициент;
					СтрокаЗапасов.Цена = СтрокаЗапасов.Цена * НовыйКоэффициент / СтарыйКоэффициент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЭтоЧекУдаленнойФискализации = Неопределено;
		ПолученныеДанные.ДополнительныеСвойства.Свойство("ЭтоЧекУдаленнойФискализации", ЭтоЧекУдаленнойФискализации); 
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ЧекККМ) Тогда
			
			ЗапросЧековПродажи = Новый Запрос;
			ЗапросЧековПродажи.Текст = "ВЫБРАТЬ
			|	ЧекККМВозвратЗапасы.Номенклатура КАК Номенклатура,
			|	ЧекККМВозвратЗапасы.Характеристика КАК Характеристика,
			|	ЧекККМВозвратЗапасы.Цена КАК Цена,
			|	ЧекККМВозвратЗапасы.Количество КАК Количество
			|ПОМЕСТИТЬ ВТЗапасыВозврата
			|ИЗ
			|	&ЧекККМВозвратЗапасы КАК ЧекККМВозвратЗапасы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекККМ.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТЧекиПродажи
			|ИЗ
			|	Документ.ЧекККМ КАК ЧекККМ
			|ГДЕ
			|	ЧекККМ.Статус = &СтатусПробит
			|	И ЧекККМ.Проведен
			|	И ЧекККМ.КассаККМ = &КассаККМ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекККМЗапасы.Ссылка КАК Ссылка,
			|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
			|	ЧекККМЗапасы.Характеристика КАК Характеристика,
			|	ЧекККМЗапасы.Цена КАК цена,
			|	СУММА(ЧекККМЗапасы.Количество) КАК Количество
			|ПОМЕСТИТЬ ВТЗапасыПродажи
			|ИЗ
			|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЧекиПродажи КАК ВТЧекиПродажи
			|		ПО ЧекККМЗапасы.Ссылка = ВТЧекиПродажи.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ЧекККМЗапасы.Номенклатура,
			|	ЧекККМЗапасы.Характеристика,
			|	ЧекККМЗапасы.Цена,
			|	ЧекККМЗапасы.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Количество,
			|	цена
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПродажиОбороты.Номенклатура КАК Номенклатура,
			|	ПродажиОбороты.Характеристика КАК Характеристика,
			|	ПродажиОбороты.КоличествоОборот КАК КоличествоОборот,
			|	ВТЧекиПродажи.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТОстаткиПродаж
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(, , Период, ) КАК ПродажиОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЧекиПродажи КАК ВТЧекиПродажи
			|		ПО ПродажиОбороты.Документ = ВТЧекиПродажи.Ссылка
			|ГДЕ
			|	ПродажиОбороты.КоличествоОборот > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТЧекиПродажи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТЗапасыПродажи.Ссылка КАК Ссылка,
			|	ВТЗапасыПродажи.Номенклатура КАК Номенклатура,
			|	ВТЗапасыПродажи.Характеристика КАК Характеристика,
			|	ВЫБОР
			|		КОГДА ВТОстаткиПродаж.КоличествоОборот > ВТЗапасыПродажи.Количество
			|			ТОГДА ВТЗапасыПродажи.Количество
			|		ИНАЧЕ ВТОстаткиПродаж.КоличествоОборот
			|	КОНЕЦ КАК Количество,
			|	ВТЗапасыПродажи.цена КАК цена
			|ПОМЕСТИТЬ ВТЗапасыПродажиСОстатками
			|ИЗ
			|	ВТОстаткиПродаж КАК ВТОстаткиПродаж
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗапасыПродажи КАК ВТЗапасыПродажи
			|		ПО (ВТЗапасыПродажи.Ссылка = ВТОстаткиПродаж.Ссылка)
			|			И (ВТЗапасыПродажи.Номенклатура = ВТОстаткиПродаж.Номенклатура)
			|			И (ВТЗапасыПродажи.Характеристика = ВТОстаткиПродаж.Характеристика)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТОстаткиПродаж
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТЗапасыПродажи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТЗапасыПродажиСОстатками.Ссылка КАК Ссылка,
			|	ВТЗапасыВозврата.Номенклатура КАК Номенклатура,
			|	ВТЗапасыВозврата.Характеристика КАК Характеристика,
			|	ВТЗапасыВозврата.Цена КАК Цена,
			|	ВТЗапасыВозврата.Количество КАК КоличествоВозврата,
			|	ВТЗапасыПродажиСОстатками.Количество КАК КоличествоПродаж,
			|	ВЫБОР
			|		КОГДА ВТЗапасыПродажиСОстатками.Ссылка ЕСТЬ NULL
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК СтрокаПодходит
			|ПОМЕСТИТЬ ВТСравнениеТаблиц
			|ИЗ
			|	ВТЗапасыВозврата КАК ВТЗапасыВозврата
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапасыПродажиСОстатками КАК ВТЗапасыПродажиСОстатками
			|		ПО (ВТЗапасыПродажиСОстатками.Номенклатура = ВТЗапасыВозврата.Номенклатура)
			|			И (ВТЗапасыПродажиСОстатками.Характеристика = ВТЗапасыВозврата.Характеристика)
			|			И (ВТЗапасыПродажиСОстатками.цена = ВТЗапасыВозврата.Цена)
			|			И (ВТЗапасыПродажиСОстатками.Количество >= ВТЗапасыВозврата.Количество)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТЗапасыВозврата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТЗапасыПродажиСОстатками
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(ВТСравнениеТаблиц.СтрокаПодходит) КАК СтрокаПодходит,
			|	ВТСравнениеТаблиц.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТПодходящиеЧеки
			|ИЗ
			|	ВТСравнениеТаблиц КАК ВТСравнениеТаблиц
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТСравнениеТаблиц.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВТПодходящиеЧеки.Ссылка КАК Ссылка
			|ИЗ
			|	ВТПодходящиеЧеки КАК ВТПодходящиеЧеки
			|ГДЕ
			|	ВТПодходящиеЧеки.СтрокаПодходит >= &КоличествоСтрокВозврата
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВТПодходящиеЧеки.Ссылка.Дата УБЫВ";
			ЧекККМВозвратЗапасы = ПолученныеДанные.Запасы.Выгрузить();   
			ЧекККМВозвратЗапасы.Свернуть("Номенклатура, Характеристика,  Цена","Количество");
			ЗапросЧековПродажи.УстановитьПараметр("ЧекККМВозвратЗапасы", ЧекККМВозвратЗапасы);
			ЗапросЧековПродажи.УстановитьПараметр("СтатусПробит", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит"));
			ЗапросЧековПродажи.УстановитьПараметр("КассаККМ", ПолученныеДанные.КассаККМ);
			ЗапросЧековПродажи.УстановитьПараметр("КоличествоСтрокВозврата", ЧекККМВозвратЗапасы.Количество());
			РезультатЗапроса = ЗапросЧековПродажи.Выполнить(); 
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();   
				ПолученныеДанные.ЧекККМ = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ПолученоНаличными = ПолученныеДанные.СуммаДокумента - ПолученныеДанные.БезналичнаяОплата.Итог("Сумма");
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ЗначениеЗаполнено(ПолученныеДанные.КассаККМ) Тогда
		ДанныеИБ.КассаККМ = ПолученныеДанные.КассаККМ;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВидЦен) Тогда
		ДанныеИБ.ВидЦен = ПолученныеДанные.ВидЦен;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
		ДанныеИБ.Организация = ПолученныеДанные.КассаККМ.Владелец;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВалютаДокумента) Тогда
		ДанныеИБ.ВалютаДокумента = ПолученныеДанные.КассаККМ.ВалютаДенежныхСредств;
	КонецЕсли;
	
	//Товары
	ДанныеИБ.Запасы.Загрузить(ПолученныеДанные.Запасы.Выгрузить());
	
	//Оплата
	ДанныеИБ.БезналичнаяОплата.Загрузить(ПолученныеДанные.БезналичнаяОплата.Выгрузить());
	
	// Акцизные марки
	ДанныеИБ.АкцизныеМарки.Загрузить(ПолученныеДанные.АкцизныеМарки.Выгрузить());
	
	Для каждого КлючЗначение Из ПолученныеДанные.ДополнительныеСвойства Цикл
		ДанныеИБ.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;    
			
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ОчиститьПолученныеДанные");
КонецПроцедуры
Процедура ПКО_Справочник_АвтоматическиеСкидки_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("НаДокумент") Тогда
		Если ДанныеXDTO.НаДокумент Тогда
			ПолученныеДанные.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		Иначе
			ПолученныеДанные.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ПроцентСкидкиНаценки") И ЗначениеЗаполнено(ДанныеXDTO.ПроцентСкидкиНаценки) Тогда
		ПолученныеДанные.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент;
		ПолученныеДанные.ЗначениеСкидкиНаценки = ДанныеXDTO.ПроцентСкидкиНаценки;
	ИначеЕсли ДанныеXDTO.Свойство("СуммаСкидкиНаценки") И ЗначениеЗаполнено(ДанныеXDTO.СуммаСкидкиНаценки) Тогда
		ПолученныеДанные.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
		ПолученныеДанные.ЗначениеСкидкиНаценки = ДанныеXDTO.СуммаСкидкиНаценки;
	ИначеЕсли ДанныеXDTO.Свойство("ТипЦен") И ЗначениеЗаполнено(ДанныеXDTO.ТипЦен) Тогда
		ПолученныеДанные.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦен;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидСчета = "Расчетный";
	Если ДанныеXDTO.Свойство("ВидСчета")
		И ЗначениеЗаполнено(ДанныеXDTO.ВидСчета) Тогда
		ПолученныеДанные.ВидСчета = ДанныеXDTO.ВидСчета.Значение;
	КонецЕсли;
	
	// Владелец: выбираем ПКО в зависимости от типа владельца.
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "Справочник_Контрагенты_Получение";
		Если Найти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
		КонецЕсли;	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение,ИмяПКО", Владелец, ИмяПКО));
		
	КонецЕсли;
	
	ПолученныеДанные.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью;
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ПолученныеДанные.СчетУчета = ДанныеИБ.СчетУчета;
		ПолученныеДанные.ВидСчета = ДанныеИБ.ВидСчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетУчета) Тогда
		ПолученныеДанные.СчетУчета = ПланыСчетов.Управленческий.Банк;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидСчета) Тогда
		ПолученныеДанные.ВидСчета = "Расчетный";	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Код") Тогда
		ПолученныеДанные.Код = ДанныеXDTO.КлючевыеСвойства.Код;
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Наименование") Тогда
		ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.Наименование;
	Иначе
		ПолученныеДанные.Наименование = НСтр("ru='Вид алкогольной продукции по умолчанию'")
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидЛицензии") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидЛицензии",
			Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВидЛицензии, "Перечисление_ВидыЛицензийАлкогольнойПродукции"));
	КонецЕсли;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Маркируемый") Тогда
		ПолученныеДанные.Маркируемый = ДанныеXDTO.КлючевыеСвойства.Маркируемый;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДисконтныеКарты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ВидДисконтнойКарты = Неопределено;
	Если ДанныеXDTO.Свойство("КлючевыеСвойства")
		И СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ДисконтныеКарты.КлючевыеСвойства.ВидДисконтнойКарты") Тогда
		ДанныеXDTO.КлючевыеСвойства.Свойство("ВидДисконтнойКарты", ВидДисконтнойКарты);
	КонецЕсли;
	Если ВидДисконтнойКарты <> Неопределено Тогда
		ВидДКСтруктура = Новый Структура;
		ВидДКСтруктура.Вставить("Наименование", ВидДисконтнойКарты);
		ВидДКСтруктура.Вставить("ЭтоИменнаяКарта", Истина);
		
		Инструкция = Новый Структура("Значение, ИмяПКО", ВидДКСтруктура, "Справочник_ВидыДисконтныхКарт_Получение");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Инструкция);
	КонецЕсли;
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		Если ДанныеXDTO.AdditionalInfo.Свойство("ПродажиПоДК")
			И ЗначениеЗаполнено(ДанныеXDTO.AdditionalInfo.ПродажиПоДК) Тогда
			
			ПродажиПоДК = ДанныеXDTO.AdditionalInfo.ПродажиПоДК;
			
			Комментарий = СтрШаблон(НСтр("ru = '#%1# Загрузка остатков при переходе РТ (комментарий не изменять!)'"), ПолученныеДанные.Наименование);
			
			НайденнаяСсылка = Документы.КорректировкаРегистров.ПустаяСсылка();
			
			ТекстЗапроса = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	КорректировкаРегистров.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
			|ГДЕ
			|	(ВЫРАЗИТЬ(КорректировкаРегистров.Комментарий КАК СТРОКА(150))) = &Комментарий
			|";
	
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Комментарий", Комментарий);
	
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НайденнаяСсылка = Выборка.Ссылка;
			КонецЦикла;
	
			Если ОбщегоНазначения.СсылкаСуществует(НайденнаяСсылка) Тогда
				КорректировкаРегистров = НайденнаяСсылка.ПолучитьОбъект();
			Иначе
				КорректировкаРегистров = Документы.КорректировкаРегистров.СоздатьДокумент();
				КорректировкаРегистров.Автор = Пользователи.ТекущийПользователь();
				КорректировкаРегистров.Дата = ТекущаяДатаСеанса();
				КорректировкаРегистров.Комментарий = Комментарий;
				КорректировкаРегистров.УстановитьНовыйНомер();
				
				НоваяСтрокаТаблицыРегистров = КорректировкаРегистров.ТаблицаРегистров.Добавить();
				НоваяСтрокаТаблицыРегистров.Имя = "ПродажиПоДисконтнымКартам";
				
				КорректировкаРегистров.ОбменДанными.Загрузка = Истина;
				КорректировкаРегистров.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
				КорректировкаРегистров.Записать();
			КонецЕсли;
			
			НаборЗаписей = РегистрыНакопления.ПродажиПоДисконтнымКартам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(КорректировкаРегистров.Ссылка);
			
			Для каждого СтрокаТаблицы Из ПродажиПоДК Цикл
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Период = КорректировкаРегистров.Дата;
				НоваяСтрока.Регистратор = КорректировкаРегистров.Ссылка;
				НоваяСтрока.Активность = Истина;
				НоваяСтрока.ВладелецКарты = ПолученныеДанные.ВладелецКарты;
				НоваяСтрока.ДисконтнаяКарта = ПолученныеДанные.ПолучитьСсылкуНового();
				НоваяСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаТаблицы.Характеристика;
				НоваяСтрока.Количество = СтрокаТаблицы.Количество;
				НоваяСтрока.Сумма = СтрокаТаблицы.Сумма;
			КонецЦикла;
	
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные <> Неопределено Тогда
		Если ДанныеИБ <> Неопределено Тогда
			ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидДоговора) Тогда
			ПолученныеДанные.ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДоговорыКонтрагентовСтруктура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ПолученныеДанные <> Неопределено Тогда
		Если ДанныеИБ <> Неопределено Тогда
			ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидДоговора) Тогда
			ПолученныеДанные.ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидДокументаОтбор", ДанныеXDTO.ВидДокументаОтбор);
	
	Если ДанныеXDTO.Свойство("ПериодОтбор") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПериодОтбор", ДанныеXDTO.ПериодОтбор);
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПериодОтбор", Неопределено);
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицоОтбор", ДанныеXDTO.ФизическоеЛицоОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_ФизЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ФизическиеЛица_Получение");
	ПКО_ВидовДокументов = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ВидыДокументовФизическихЛиц");
	
	ФизЛицоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ФизическоеЛицоОтбор, 
				ПКО_ФизЛица, 
				"ПолучитьСсылку").Ссылка;
				
	ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ВидДокументаОтбор, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
		
	ПолученныеДанные.Отбор.Физлицо.Значение = ФизЛицоСсылка;
	ПолученныеДанные.Отбор.Физлицо.Использование = Истина;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ПолученныеДанные.Отбор.ВидДокумента.Значение = ВидДокумента;
		ПолученныеДанные.Отбор.ВидДокумента.Использование = Истина;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор) Тогда
		ПолученныеДанные.Отбор.Период.Значение = ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор;
		ПолученныеДанные.Отбор.Период.Использование = Истина;		
	КонецЕсли;
	
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Физлицо = ФизЛицоСсылка;
			СтрокаЗаписи.ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.ВидДокумента, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
				
			Если НЕ ЗначениеЗаполнено(Строка.Период) Тогда
				СтрокаЗаписи.Период = ТекущаяДата();
			Иначе
				СтрокаЗаписи.Период = Строка.Период;
			КонецЕсли;
			
			СтрокаЗаписи.Серия         = Строка.Серия;
			СтрокаЗаписи.Номер         = Строка.Номер;
			СтрокаЗаписи.Представление = Строка.Представление;
			СтрокаЗаписи.ДатаВыдачи    = Строка.ДатаВыдачи;
			СтрокаЗаписи.СрокДействия  = Строка.СрокДействия;
			СтрокаЗаписи.КемВыдан      = Строка.КемВыдан;
			СтрокаЗаписи.КодПодразделения = Строка.КодПодразделения;
			Если СтрокаЗаписи.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
				СтрокаЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Кассы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СчетУчета = ПланыСчетов.Управленческий.Касса;
КонецПроцедуры
Процедура ПКО_Справочник_КассыККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
	
		ПолученныеДанные.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
		ПолученныеДанные.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
		ПолученныеДанные.СчетУчета = ПланыСчетов.Управленческий.Касса;
	
		Если (КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
			ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса") Тогда
			ПолученныеДанные.ТипКассы = Перечисления.ТипыКассККМ.ККМED;
		Иначе
			ПолученныеДанные.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
		КонецЕсли;
		
	Иначе
		
		ПолученныеДанные.ВалютаДенежныхСредств = ДанныеИБ.ВалютаДенежныхСредств;
		ПолученныеДанные.Подразделение = ДанныеИБ.Подразделение;
		ПолученныеДанные.ТипКассы = ДанныеИБ.ТипКассы;
		ПолученныеДанные.СчетУчета = ДанныеИБ.СчетУчета;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетУчета) Тогда
		ПолученныеДанные.СчетУчета = ПланыСчетов.Управленческий.Касса;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_КатегорииНоменклатурыВН_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ДанныеИБ.ЭтоГруппа Тогда
			ПолученныеДанные = Неопределено;
		Иначе
			Если ЗначениеЗаполнено(ДанныеИБ.ТипНоменклатурыПоУмолчанию) Тогда
				ПолученныеДанные.ТипНоменклатурыПоУмолчанию = ДанныеИБ.ТипНоменклатурыПоУмолчанию;
			Иначе
				ПолученныеДанные.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеИБ.ПризнакПредметаРасчета) Тогда
			    ПолученныеДанные.ПризнакПредметаРасчета = ДанныеИБ.ПризнакПредметаРасчета;
			Иначе
				ПолученныеДанные.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПолученныеДанные.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас;
		Если ПолученныеДанные.ИспользоватьСерииНоменклатуры Тогда
			ПолученныеДанные.ПолитикаУчетаСерий = КомпонентыОбмена.ПараметрыКонвертации.ПолитикаУчетаСерийПоУмолчанию;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПолученныеДанные.ПризнакПредметаРасчета) Тогда
			ПолученныеДанные.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_КлассификаторАлкогольнойПродукцииЕГАИС_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипПродукции") 
		И ЗначениеЗаполнено(ДанныеXDTO.ТипПродукции) Тогда
		ТипПродукции = ДанныеXDTO.ТипПродукции;
		Если ТипПродукции = "Упакованная" Тогда
			ПолученныеДанные.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Упакованная;
		Иначе
			ПолученныеДанные.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Неупакованная;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_КлассификаторОрганизацийЕГАИС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4;
	
	ПолученныеДанные.Сопоставлено = Истина;
	
	Если ДанныеXDTO.Свойство("ТипОрганизации") 
		И ЗначениеЗаполнено(ДанныеXDTO.ТипОрганизации) Тогда
		ТипОрганизации = ДанныеXDTO.ТипОрганизации;
		Если ТипОрганизации = "ЮридическоеЛицоРФ" Тогда
			ПолученныеДанные.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
		ИначеЕсли ТипОрганизации = "ИндивидуальныйПредпринимательРФ" Тогда
			ПолученныеДанные.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
		ИначеЕсли ТипОрганизации = "КонтрагентТаможенногоСоюза" Тогда
			ПолученныеДанные.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		ИначеЕсли ТипОрганизации = "ИностранныйКонтрагент" Тогда
			ПолученныеДанные.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Контрагент") Тогда
		
		Контрагент = ДанныеXDTO.КлючевыеСвойства.Контрагент;
		
		ПолученныеДанные.СоответствуетОрганизации = Ложь;
		ИмяПКО = "Справочник_Контрагенты_Получение";
		
		Если СтрНайти(Контрагент.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
			ПолученныеДанные.СоответствуетОрганизации = Истина;	
		КонецЕсли;	
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Контрагент", Новый Структура("Значение,ИмяПКО", Контрагент, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	ПолученныеДанные.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	ПолученныеДанные.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	ПолученныеДанные.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	ПолученныеДанные.ВестиРасчетыПоДоговорам = Истина;
	ПолученныеДанные.ВестиРасчетыПоДокументам = Истина;
	ПолученныеДанные.ВестиРасчетыПоЗаказам = Истина;
	ПолученныеДанные.ВестиУчетОплатыПоСчетам = Истина;
	ПолученныеДанные.Покупатель = Истина;
	ПолученныеДанные.Поставщик = Истина;
	ПолученныеДанные.ПрочиеОтношения = Истина;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
			
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				Продолжить;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;		
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента;		
			Иначе
				Продолжить;
			КонецЕсли;
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("НалоговыйНомерНерезидента") Тогда
		ПолученныеДанные.ИНН = ДанныеXDTO.НалоговыйНомерНерезидента;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОсновнойДоговор") Тогда
		Если ТипЗнч(ДанныеXDTO.ОсновнойДоговор) = Тип("Структура") Тогда
			Справочник_ДоговорыКонтрагентов_Получение = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДоговорыКонтрагентов_Получение");
			ОсновнойДоговор = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена, 
				ДанныеXDTO.ОсновнойДоговор, 
				Справочник_ДоговорыКонтрагентов_Получение, 
				"ПолучитьСсылку").Ссылка;
			Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(ОсновнойДоговор);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		Если ДанныеXDTO.AdditionalInfo.Свойство("ДатаРождения")
			И ЗначениеЗаполнено(ДанныеXDTO.AdditionalInfo.ДатаРождения) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаРождения", ДанныеXDTO.AdditionalInfo.ДатаРождения);
		КонецЕсли;
			
		Если ДанныеXDTO.AdditionalInfo.Свойство("НоменклатураКонтрагентовБЭД")
			И ЗначениеЗаполнено(ДанныеXDTO.AdditionalInfo.НоменклатураКонтрагентовБЭД) Тогда
			
			НоменклатураКонтрагентовБЭД = ДанныеXDTO.AdditionalInfo.НоменклатураКонтрагентовБЭД;
			ПолученныеДанные.ДополнительныеСвойства.Вставить("НоменклатураКонтрагентовБЭД", НоменклатураКонтрагентовБЭД);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации) Тогда
		ПолученныеДанные.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.Родитель) Тогда
			ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации) Тогда
			ПолученныеДанные.СтранаРегистрации = ДанныеИБ.СтранаРегистрации;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИБ.Комментарий) Тогда
			ПолученныеДанные.Комментарий = ДанныеИБ.Комментарий;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеИБ.БанковскийСчетПоУмолчанию) Тогда
			ПолученныеДанные.БанковскийСчетПоУмолчанию = ДанныеИБ.БанковскийСчетПоУмолчанию;
		КонецЕсли;
		
		ПолученныеДанные.СчетУчетаАвансовПокупателя = ДанныеИБ.СчетУчетаАвансовПокупателя;
		ПолученныеДанные.СчетУчетаАвансовПоставщику = ДанныеИБ.СчетУчетаАвансовПокупателя;
		ПолученныеДанные.СчетУчетаРасчетовСПокупателем = ДанныеИБ.СчетУчетаАвансовПокупателя;
		ПолученныеДанные.СчетУчетаРасчетовСПоставщиком = ДанныеИБ.СчетУчетаАвансовПокупателя;
		ПолученныеДанные.ВестиРасчетыПоДоговорам = ДанныеИБ.ВестиРасчетыПоДоговорам;
		ПолученныеДанные.ВестиРасчетыПоДокументам = ДанныеИБ.ВестиРасчетыПоДокументам;
		ПолученныеДанные.ВестиРасчетыПоЗаказам = ДанныеИБ.ВестиРасчетыПоЗаказам;
		ПолученныеДанные.ВестиУчетОплатыПоСчетам = ДанныеИБ.ВестиУчетОплатыПоСчетам;
		ПолученныеДанные.Покупатель = ДанныеИБ.Покупатель;
		ПолученныеДанные.Поставщик = ДанныеИБ.Покупатель;
		ПолученныеДанные.ПрочиеОтношения = ДанныеИБ.Покупатель;
		
		ДополнитьТаблицуКИДаннымиИБ(ДанныеИБ, ПолученныеДанные);                         
	
		КонтрагентСсылка = ДанныеИБ.Ссылка;		
	Иначе
		КонтрагентСсылка = ПолученныеДанные.ПолучитьСсылкуНового();
	КонецЕсли;
	
	Если ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо
		И ЗначениеЗаполнено(ПолученныеДанные.РегистрационныйНомер) Тогда
		ПолученныеДанные.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;	
	КонецЕсли;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("НоменклатураКонтрагентовБЭД") Тогда 
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НоменклатураКонтрагентовБЭД");
			ЭлементБлокировкиДанных.УстановитьЗначение("Владелец", ПолученныеДанные.ПолучитьСсылкуНового());
			БлокировкаДанных.Заблокировать();
	
			НаборЗаписей = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьНаборЗаписей();
	
			НаборЗаписей.Отбор.Владелец.Установить(ПолученныеДанные.ПолучитьСсылкуНового());
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
		
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очистка некорректных записей регистра Номенклатура контрагентов (БЭД)'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение;
		КонецПопытки;
		
		НаборЗаписей.Отбор.Владелец.Установить(КонтрагентСсылка);
		Для Каждого СтрокаТаблицы Из ПолученныеДанные.ДополнительныеСвойства.НоменклатураКонтрагентовБЭД Цикл
			НаборЗаписей.Отбор.Идентификатор.Установить(СтрокаТаблицы.Идентификатор);
				
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Владелец = КонтрагентСсылка;
	
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.Записать();
			
			НаборЗаписей.Очистить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_НаправленияДеятельностиНГ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ВыручкаОтПродаж;
		ПолученныеДанные.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.СебестоимостьПродаж;
		ПолученныеДанные.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеИБ.СчетУчетаВыручкиОтПродаж) Тогда
		ДанныеИБ.СчетУчетаВыручкиОтПродаж = ПланыСчетов.Управленческий.ВыручкаОтПродаж;
		ДанныеИБ.СчетУчетаСебестоимостиПродаж = ПланыСчетов.Управленческий.СебестоимостьПродаж;
		ДанныеИБ.СчетУчетаПрибыли = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
	ПолученныеДанные.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
	ПолученныеДанные.СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
	ПолученныеДанные.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
	ПолученныеДанные.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	
	Если ДанныеXDTO.Свойство("СтавкаНДС") Тогда 
		СтавкаНДССсылка = СтавкаНДСПоСтроке(ДанныеXDTO.СтавкаНДС.Значение);
		ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДССсылка);
	Иначе
		ВидСтавкиНДС = Справочники.Организации.ОсновнаяОрганизация.ВидСтавкиНДСПоУмолчанию;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидСтавкиНДС) Тогда
		ПолученныеДанные.ВидСтавкиНДС = ВидСтавкиНДС;
	КонецЕсли;
	
	ИнструкцияВидНоменклатуры = Новый Структура;
	Если ДанныеXDTO.Свойство("ВидНоменклатуры") Тогда
		ИнструкцияВидНоменклатуры.Вставить("Значение", ДанныеXDTO.ВидНоменклатуры);
		ИнструкцияВидНоменклатуры.Вставить("ИмяПКО", "Справочник_КатегорииНоменклатурыВН_Получение");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнструкцияВидНоменклатуры) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КатегорияНоменклатуры", ИнструкцияВидНоменклатуры);
	КонецЕсли;
	
	Попытка
	
	Если КомпонентыОбмена.УзелКорреспондентаОбъект.ПереноситьКатегорииКакВидыНоменклатуры Тогда
		
		лКатегория = Неопределено;
		Если ДанныеXDTO.Свойство("ВидНоменклатуры") Тогда
			Если ДанныеXDTO.ВидНоменклатуры.Свойство("Ссылка") И ДанныеXDTO.ВидНоменклатуры.Ссылка.Свойство("Значение") Тогда
				Попытка
					лКатегория = Справочники.КатегорииНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеXDTO.ВидНоменклатуры.Ссылка.Значение));
				Исключение
				КонецПопытки;
			ИначеЕсли ЗначениеЗаполнено(ДанныеXDTO.ВидНоменклатуры.Наименование) Тогда
				лКатегория = Справочники.КатегорииНоменклатуры.НайтиПоНаименованию(ДанныеXDTO.ВидНоменклатуры.Наименование);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(лКатегория) И ОбщегоНазначения.СсылкаСуществует(лКатегория) Тогда
			ПолученныеДанные.КатегорияНоменклатуры = лКатегория;
		КонецЕсли;
		
		лНаправление = Неопределено;
		Если ДанныеXDTO.Свойство("ГруппаАналитическогоУчета") Тогда
			Если ДанныеXDTO.ГруппаАналитическогоУчета.Свойство("Ссылка") И ДанныеXDTO.ГруппаАналитическогоУчета.Ссылка.Свойство("Значение") Тогда
				Попытка
					лНаправление = Справочники.НаправленияДеятельности.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеXDTO.ГруппаАналитическогоУчета.Ссылка.Значение));
				Исключение
				КонецПопытки;
			ИначеЕсли ЗначениеЗаполнено(ДанныеXDTO.ГруппаАналитическогоУчета.Наименование) Тогда
				лНаправление = Справочники.НаправленияДеятельности.НайтиПоНаименованию(ДанныеXDTO.ГруппаАналитическогоУчета.Наименование);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(лНаправление) И ОбщегоНазначения.СсылкаСуществует(лНаправление) Тогда
			ПолученныеДанные.НаправлениеДеятельности = лНаправление;
		КонецЕсли;
		
	КонецЕсли;
	
	Исключение
	КонецПопытки;
	
	Если ДанныеXDTO.Свойство("ВидПродукцииИС") И ЗначениеЗаполнено(ДанныеXDTO.ВидПродукцииИС) Тогда
		
		 ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидПродукцииИС", ДанныеXDTO.ВидПродукцииИС.Значение);
	
	КонецЕсли;
	
	ДобавитьКодТНВЭДВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ТоварнаяНоменклатураВЭД", "КодТНВЭД", КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") И ДанныеXDTO.КлючевыеСвойства.Свойство("Группа") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Родитель", ДанныеXDTO.КлючевыеСвойства.Группа);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.14") Тогда
		Если ДанныеXDTO.Свойство("ПризнакПредметаРасчета") 
			И ЗначениеЗаполнено(ДанныеXDTO.ПризнакПредметаРасчета) Тогда
	
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ПризнакПредметаРасчета",
				Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ПризнакПредметаРасчета, "Перечисление_ПризнакиПредметаРасчета14"));
		КонецЕсли;
	КонецЕсли;
	
	Если (КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса") Тогда
		Если ДанныеXDTO.Свойство("ДополнительныеРеквизиты") Тогда
			Для каждого Строка Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
				Если Строка.Свойство.Наименование = "ЦенаПродажи" Тогда
					ПолученныеДанные.ДополнительныеСвойства.Вставить("ЦенаПродажи", Строка.ЗначениеСвойства);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
	
		Если ПолученныеДанные.КодМедицинскогоИзделия = "" Тогда
		    ПолученныеДанные.КодМедицинскогоИзделия = ДанныеИБ.КодМедицинскогоИзделия;
		КонецЕсли;
		
		ПолученныеДанные.СпособПополнения = ДанныеИБ.СпособПополнения;
		ПолученныеДанные.МетодОценки = ДанныеИБ.МетодОценки;
		ПолученныеДанные.СчетУчетаЗапасов = ДанныеИБ.СчетУчетаЗапасов;
		ПолученныеДанные.СчетУчетаЗатрат = ДанныеИБ.СчетУчетаЗатрат;
		ПолученныеДанные.НаправлениеДеятельности = ДанныеИБ.НаправлениеДеятельности;
		
		Если ЗначениеЗаполнено(ПолученныеДанные.ВидСтавкиНДС) Тогда
			ДанныеИБ.ВидСтавкиНДС = ПолученныеДанные.ВидСтавкиНДС;
		КонецЕсли;
		
		Если ДанныеИБ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			ПолученныеДанные.ТипНоменклатуры = ДанныеИБ.ТипНоменклатуры;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПолученныеДанные.ТипНоменклатуры) Тогда
			ПолученныеДанные.ТипНоменклатуры = ДанныеИБ.ТипНоменклатуры;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПолученныеДанные.ТоварнаяНоменклатураВЭД) Тогда
			ПолученныеДанные.ТоварнаяНоменклатураВЭД = ДанныеИБ.ТоварнаяНоменклатураВЭД;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КатегорияНоменклатуры) Тогда
			ПолученныеДанные.КатегорияНоменклатуры = ДанныеИБ.КатегорияНоменклатуры;
		КонецЕсли;
		
		Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("Родитель") Тогда
			ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
		КонецЕсли;
		
		Если ПолученныеДанные.ИспользоватьСерииНоменклатуры Тогда
			ПолученныеДанные.ПолитикаУчетаСерий = ДанныеИБ.ПолитикаУчетаСерий;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ТипНоменклатуры) Тогда
		ПолученныеДанные.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.КатегорияНоменклатуры) Тогда
		ПолученныеДанные.ИспользоватьХарактеристики = ПолученныеДанные.КатегорияНоменклатуры.ИспользоватьХарактеристики;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.КатегорияНоменклатуры) Тогда
		ПолученныеДанные.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено ИЛИ Не ЗначениеЗаполнено(ДанныеИБ.ВидПродукцииИС) Тогда 
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ВидПродукцииИС")
			И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ВидПродукцииИС) Тогда
			
			ЗаполнитьПризнакиВидаПродукцииИС(ПолученныеДанные, ПолученныеДанные.ДополнительныеСвойства.ВидПродукцииИС);
			
		КонецЕсли;
	КонецЕсли;
	Если ДанныеИБ = Неопределено
		И ПолученныеДанные.ИспользоватьСерииНоменклатуры Тогда
		ПолученныеДанные.ПолитикаУчетаСерий = КомпонентыОбмена.ПараметрыКонвертации.ПолитикаУчетаСерийПоУмолчанию;
	КонецЕсли;	
	
	Если (КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса")
		И ПолученныеДанные.ДополнительныеСвойства.Свойство("ЦенаПродажи")
		И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ЦенаПродажи) Тогда
			НоменклатураСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
			ЗаписатьРозничныеЦены(НоменклатураСсылка, ПолученныеДанные.ЕдиницаИзмерения, ПолученныеДанные.ДополнительныеСвойства.ЦенаПродажи);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ВладелецФайла = ДанныеXDTO.КлючевыеСвойства.ВладелецФайла;
	
	Если ЗначениеЗаполнено(ВладелецФайла) Тогда
		
		Если Найти(ВладелецФайла.ТипЗначения, "Номенклатура") > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВладелецФайла", Новый Структура("Значение, ИмяПКО",
			 ВладелецФайла, "Справочник_Номенклатура_Получение"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		Если ДанныеXDTO.AdditionalInfo.Свойство("ПутьКФайлу")
			И ЗначениеЗаполнено(ДанныеXDTO.AdditionalInfo.ПутьКФайлу) Тогда
			ПолученныеДанные.ПутьКФайлу = ДанныеXDTO.AdditionalInfo.ПутьКФайлу;
			ПолученныеДанные.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ТипХраненияФайла) Тогда
		ПолученныеДанные.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	КонецЕсли;
	
	Если ПолученныеДанные.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", ДанныеXDTO.ХранимыйФайл);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатураПрисоединенныеФайлы_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ДатаСоздания) Тогда
		ПолученныеДанные.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_НоменклатурныеГруппы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.ТипНоменклатурыПоУмолчанию) Тогда
		ПолученныеДанные.ТипНоменклатурыПоУмолчанию = ДанныеИБ.ТипНоменклатурыПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ТипНоменклатурыПоУмолчанию) Тогда
		ПолученныеДанные.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_НомераГТД_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ДопускаетсяЗаписьСОшибкой = Истина;
КонецПроцедуры
Процедура ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	НомерГТД = "";
	Если ДанныеXDTO.Свойство("Код") Тогда
		НомерГТД = ДанныеXDTO.Код;
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Код") Тогда
		НомерГТД = ДанныеXDTO.КлючевыеСвойства.Код;
	КонецЕсли;
	ПолученныеДанные.Код = НомерГТД;
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("НаименованиеСокращенное") Тогда
			ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.НаименованиеСокращенное;
		Иначе
			ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.НаименованиеСокращенное;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеXDTO.Свойство("КонтактнаяИнформация")
		Или Не ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
		ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
		Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
			Продолжить;
		ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		ИначеЕсли ВидКИСтрокой = "Факс" Тогда
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
		Иначе
			Продолжить;
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ);
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ВидСтавкиНДСПоУмолчанию = Перечисления.ВидыСтавокНДС.Общая;
	
	Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И ДанныеИБ = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Т.Ссылка) КАК Количество
		|ПОМЕСТИТЬ втКоличествоОрганизаций
		|ИЗ
		|	Справочник.Организации КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоОрганизаций КАК втКоличествоОрганизаций
		|		ПО (втКоличествоОрганизаций.Количество = 1)
		|ГДЕ
		|	Т.Предопределенный
		|	И (ВЫРАЗИТЬ(Т.НаименованиеПолное КАК СТРОКА(100))) = &ПредопределенноеНаименование
		|	И Т.ИНН = """"
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ПредопределенноеНаименование", НСтр("ru = 'ООО ""Наша фирма""'"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ДанныеИБ = Выборка.Ссылка.ПолучитьОбъект();
				Прервать;
			КонецЦикла;
		Иначе
			Организация = ПолученныеДанные.ПолучитьСсылкуНового();
			Если ОбщегоНазначения.СсылкаСуществует(Организация) Тогда
				ДанныеИБ = Организация.ПолучитьОбъект(); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ДанныеИБ <> Неопределено Тогда
			
		ДополнитьТаблицуКИДаннымиИБ(ДанныеИБ, ПолученныеДанные);
		
		Если ЗначениеЗаполнено(ДанныеИБ.БанковскийСчетПоУмолчанию) Тогда
			ПолученныеДанные.БанковскийСчетПоУмолчанию = ДанныеИБ.БанковскийСчетПоУмолчанию;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ДанныеИБ.ВидСтавкиНДСПоУмолчанию) Тогда
			ПолученныеДанные.ВидСтавкиНДСПоУмолчанию = ДанныеИБ.ВидСтавкиНДСПоУмолчанию;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.Наименование;
	
	// Владелец
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Номенклатура_Получение"));
	КонецЕсли;
	
	// ВладелецПартии
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВладелецПартии") Тогда
		ВладелецПартии = ДанныеXDTO.КлючевыеСвойства.ВладелецПартии;		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ВладелецПартии", Новый Структура("Значение, ИмяПКО", ВладелецПартии, "Справочник_Контрагенты_Получение"));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ПартииНоменклатуры_ИзСтр_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии;
КонецПроцедуры
Процедура ПКО_Справочник_Патенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда 
		ПолученныеДанные.Наименование = НСтр("ru = 'Патент'") + ?(ПустаяСтрока(ПолученныеДанные.НомерПатента),""," №"+ ПолученныеДанные.НомерПатента)+
			НСтр("ru = ', срок действия:'") + Формат(ПолученныеДанные.ДатаНачала,"ДЛФ=D") + " - " + Формат(ПолученныеДанные.ДатаОкончания,"ДЛФ=D"); 
	КонецЕсли;
		
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда 
	    	ПолученныеДанные.Наименование = ДанныеИБ.Наименование;
	    КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ПодарочныеСертификаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
	ПолученныеДанные.СчетУчетаЗатрат = ПланыСчетов.Управленческий.КоммерческиеРасходы;
	ПолученныеДанные.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	ПолученныеДанные.СчетУчетаДоходов = ПланыСчетов.Управленческий.ПрочиеДоходы;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ЕдиницаИзмерения) Тогда
		
		Справочник_ЕдиницыИзмерения = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,
				"Справочник_ЕдиницыИзмерения");
		ЕдиницаИзмерения = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена,
				ЕдиницаИзмеренияПоУмолчанию(), Справочник_ЕдиницыИзмерения, "ПолучитьСсылку").Ссылка;
		ПолученныеДанные.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("КоличествоПериодовДействия")
		И ПолученныеДанные.КоличествоПериодовДействия = 999 Тогда
			ПолученныеДанные.ТипСрокаДействия =
				ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.СрокДействияПодарочныхСертификатов.БезОграниченияСрока");
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ПодарочныеСертификаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ПризнакПредметаРасчета) Тогда
		ПолученныеДанные.ПризнакПредметаРасчета =
			ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ПризнакиПредметаРасчета.Платеж");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидСтавкиНДС) Тогда
		ПолученныеДанные.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.НаименованиеПолное) Тогда
		ПолученныеДанные.НаименованиеПолное = ПолученныеДанные.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ТипНоменклатуры) Тогда
		ПолученныеДанные.ТипНоменклатуры =
			ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.КатегорияНоменклатуры) Тогда
		ПолученныеДанные.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ДанныеИБ.СчетУчетаЗапасов) Тогда
			ДанныеИБ.СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеИБ.СчетУчетаЗатрат) Тогда
			ДанныеИБ.СчетУчетаЗатрат = ПланыСчетов.Управленческий.КоммерческиеРасходы;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеИБ.НаправлениеДеятельности) Тогда
			ДанныеИБ.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеИБ.СчетУчетаДоходов) Тогда
			ДанныеИБ.СчетУчетаДоходов = ПланыСчетов.Управленческий.ПрочиеДоходы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
КонецПроцедуры
Процедура ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
		И ДанныеXDTO.КлючевыеСвойства.Свойство("СкладУправляющейСистемы") Тогда
		ПолученныеДанные.СкладУправляющейСистемы = ДанныеXDTO.КлючевыеСвойства.СкладУправляющейСистемы;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		ДанныеXDTO.AdditionalInfo.Свойство("СкладУправляющейСистемы", ПолученныеДанные.СкладУправляющейСистемы);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.14") Тогда
	
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипСклада") 
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ТипСклада) Тогда
	
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипСтруктурнойЕдиницы",
				Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ТипСклада, "ТипыСкладов14"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ДанныеИБ.СчетУчетаВРознице) Тогда
		ПолученныеДанные.СчетУчетаВРознице = ПланыСчетов.Управленческий.ТоварыПродукция;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ДанныеИБ.СчетУчетаНаценки) Тогда
		ПолученныеДанные.СчетУчетаНаценки = ПланыСчетов.Управленческий.ТорговаяНаценка;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.РозничныйВидЦен) Тогда
			ПолученныеДанные.РозничныйВидЦен = ДанныеИБ.РозничныйВидЦен;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИБ.Организация) Тогда
			ПолученныеДанные.Организация = ДанныеИБ.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Организация) Тогда
		ПолученныеДанные.Организация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("ДоляСтоимости", "ДоляСтоимости");
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
			
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоПродукции", ДанныеXDTO.Количество);
				
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Состав", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СпецификацииНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Для каждого СтрокаСостав Из ПолученныеДанные.Состав Цикл
		СтрокаСостав.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Материал;
		СтрокаСостав.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСостав.Номенклатура, "ЕдиницаИзмерения");
	КонецЦикла;
КонецПроцедуры
Процедура ПКО_Справочник_УсловияПредоставленияСкидок_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ВДокументе") Тогда
		Если ДанныеXDTO.ВДокументе Тогда
			ПолученныеДанные.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		Иначе
			ПолученныеДанные.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ЗначениеУсловияОграниченияКоличество") И ЗначениеЗаполнено(ДанныеXDTO.ЗначениеУсловияОграниченияКоличество) Тогда
		ПолученныеДанные.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество;
		ПолученныеДанные.ЗначениеУсловияОграничения = ДанныеXDTO.ЗначениеУсловияОграниченияКоличество;
	ИначеЕсли ДанныеXDTO.Свойство("ЗначениеУсловияОграниченияСумма") И ЗначениеЗаполнено(ДанныеXDTO.ЗначениеУсловияОграниченияСумма) Тогда
		ПолученныеДанные.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма;
		ПолученныеДанные.ЗначениеУсловияОграничения = ДанныеXDTO.ЗначениеУсловияОграниченияСумма;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные);
		
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("2.0") Тогда
			
			ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.ФИО;
		
			Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("ДанныеФИО", ДанныеXDTO.ДанныеФИО);
			КонецЕсли;
			
		Иначе
		
			ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.ФИО;
			
		КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
		
		Если ДанныеИБ <> Неопределено Тогда
			ДанныеИБ.Наименование = ПолученныеДанные.Наименование;
			
			ДополнитьТаблицуКИДаннымиИБ(ДанныеИБ, ПолученныеДанные);                         
		КонецЕсли;
		
		ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка);
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Штрихкод", ДанныеXDTO.Штрихкод);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи",   Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Справочник_Номенклатура_Получение = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Номенклатура_Получение");
	Справочник_ХарактеристикиНоменклатуры = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ХарактеристикиНоменклатуры");
	Справочник_Упаковки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Упаковки");
	
	
	ПолученныеДанные.Отбор.Штрихкод.Значение = ПолученныеДанные.ДополнительныеСвойства.Штрихкод;
	ПолученныеДанные.Отбор.Штрихкод.Использование = Истина;
	
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Штрихкод = ПолученныеДанные.ДополнительныеСвойства.Штрихкод;
			
			НоменклатураИБ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.Номенклатура, 
				Справочник_Номенклатура_Получение, 
				"ПолучитьСсылку");
				
			Если НоменклатураИБ <> Неопределено Тогда
				СтрокаЗаписи.Номенклатура = НоменклатураИБ.Ссылка;
			КонецЕсли;
				
			ЕстьХарактеристика = ПолученныеДанные.ДополнительныеСвойства.Записи.Колонки.Найти("Характеристика") <> Неопределено;
			Если ЕстьХарактеристика И ЗначениеЗаполнено(Строка.Характеристика) Тогда
				
				ХарактеристикаИБ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					Строка.Характеристика, 
					Справочник_ХарактеристикиНоменклатуры, 
					"ПолучитьСсылку");
					
				Если ХарактеристикаИБ <> Неопределено Тогда
					СтрокаЗаписи.Характеристика = ХарактеристикаИБ.Ссылка;		
				КонецЕсли;
				
			КонецЕсли;
			
			ЕстьУпаковка = ПолученныеДанные.ДополнительныеСвойства.Записи.Колонки.Найти("Упаковка") <> Неопределено;
			Если ЕстьУпаковка И ЗначениеЗаполнено(Строка.Упаковка) Тогда
				
				ЕдиницаИзмеренияИБ = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					Строка.Упаковка, 
					Справочник_Упаковки, 
					"ПолучитьСсылку");
					
				Если ЕдиницаИзмеренияИБ <> Неопределено Тогда
					СтрокаЗаписи.ЕдиницаИзмерения = ЕдиницаИзмеренияИБ.Ссылка;		
				КонецЕсли;
					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ШтрихкодыУпаковокТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.14") Тогда
	
		Если ДанныеXDTO.КлючевыеСвойства.Свойство("ТипШтрихкода") 
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ТипШтрихкода) Тогда
	
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипШтрихкода",
				Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ТипШтрихкода, "ТипыШтрихкодов14"));
		КонецЕсли;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура",  "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",    "Количество");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
		Если ДанныеXDTO.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеXDTO.Характеристика) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Характеристика", ДанныеXDTO.Характеристика);
		КонецЕсли;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		ПравилаЗаполнения.Вставить("Упаковка", "Упаковка");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		Если ДанныеXDTO.Свойство("Упаковка") И ЗначениеЗаполнено(ДанныеXDTO.Упаковка) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Упаковка", ДанныеXDTO.Упаковка);
		КонецЕсли;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		ПравилаЗаполнения.Вставить("Серия", "Серия");
		Если ДанныеXDTO.Свойство("Серия") И ЗначениеЗаполнено(ДанныеXDTO.Серия) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Серия", ДанныеXDTO.Серия);
		КонецЕсли;
	КонецЕсли;
	
	#Область ВложенныеТовары
	
	// Вложенные товары. 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("ВложенныеТовары")
		И ЗначениеЗаполнено(ДанныеXDTO.ВложенныеТовары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.ВложенныеТовары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если НЕ СтруктураДанныхСтроки.Свойство("КоличествоУпаковок")
				И СтруктураДанныхСтроки.Свойство("Количество") Тогда
				СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			КонецЕсли;
		
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВложенныеТовары", МассивСтрокТовары);
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
Процедура ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.Тип = Перечисления.ТипыСпособовОплат.Эквайринг;
	ПолученныеДанные.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	
	ПолученныеДанные.СчетУчета = ПланыСчетов.Управленческий.ПереводыВПути;
	ПолученныеДанные.СчетЗатрат = ПланыСчетов.Управленческий.ПрочиеРасходы;
	
	ПолученныеДанные.ИспользоватьБезПодключенияОборудования = Истина;
	
	Если ДанныеXDTO.Свойство("БанковскийСчетОрганизации")
		И ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчетОрганизации) Тогда
	
		Организация = ДанныеXDTO.БанковскийСчетОрганизации.Владелец;
		ИмяПКО = "Справочник_Организации_Получение";
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Организация", Новый Структура("Значение, ИмяПКО", Организация, ИмяПКО));
	
		Договор = Новый Структура;
		Договор.Вставить("КлючевыеСвойства", Новый Структура);
		Договор.КлючевыеСвойства.Вставить("Организация", Организация);
		Договор.КлючевыеСвойства.Вставить("Наименование", "Договор эквайринга");
		Договор.КлючевыеСвойства.Вставить("ВидДоговора", "Прочее");
		Договор.КлючевыеСвойства.Вставить("Контрагент", ДанныеXDTO.Эквайер);
		Договор.КлючевыеСвойства.Вставить("ВалютаВзаиморасчетов", Константы.НациональнаяВалюта.Получить());
	
		ИмяПКО = "Справочник_ДоговорыКонтрагентовСтруктура_Получение";
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Договор", Новый Структура("Значение, ИмяПКО", Договор, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область ОтправкаИПолучение
Процедура ПКО_Справочник_Банки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
			СВИФТБИК = ДанныеИБ.Код;
		Иначе
			СВИФТБИК = Сред(ДанныеИБ.СВИФТБИК,1,9);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СВИФТБИК) Тогда
			СВИФТБИК = "000000000";
		КонецЕсли;
		
		ДанныеXDTO.Вставить("БИК", СВИФТБИК);
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("БИК", СВИФТБИК);
		
		ДанныеXDTO.Вставить("ИностранныйБанк", ДанныеИБ.Страна <> Справочники.СтраныМира.Россия);
КонецПроцедуры
Процедура ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ПолученныеДанные.СВИФТБИК) Тогда
		Попытка
			ПолученныеДанные.Страна = Справочники.Банки.СтранаПоSWIFT(ПолученныеДанные.СВИФТБИК);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Страна) Тогда
		ПолученныеДанные.Страна = Справочники.СтраныМира.Россия;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры
Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
			ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИБ.ПараметрыПрописи) Тогда
			ПолученныеДанные.ПараметрыПрописи = ДанныеИБ.ПараметрыПрописи;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
	
		Код = ДанныеИБ.МеждународноеСокращение;
		Если Не ЗначениеЗаполнено(Код) Тогда
			Код = ДанныеИБ.Наименование;
		КонецЕсли;
		
		Код = Лев(Код, 4);
		
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ПунктыВыдачиЗаказов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресПунктаВыдачиЗаказа");
	Если ВидКИ <> Неопределено Тогда
		АдресСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ДанныеИБ, ВидКИ);
		Если ЗначениеЗаполнено(АдресСтрокой) Тогда
			ДанныеXDTO.Вставить("АдресСтрокой", АдресСтрокой);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СерииНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	КлючевыеСвойства = ДанныеXDTO.КлючевыеСвойства;
	КлючевыеСвойства.Вставить("Номенклатура", 	ДанныеИБ.Владелец);
	КлючевыеСвойства.Вставить("СерийныйНомер", ДанныеИБ.Наименование);
КонецПроцедуры
Процедура ПКО_Справочник_СерииНоменклатуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Инструкция = Новый Структура();
	
	Если ДанныеXDTO.КлючевыеСвойства.ВладелецСерии.Свойство("Номенклатура") 
		И НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец) Тогда
		
		Инструкция.Вставить("Значение", ДанныеXDTO.КлючевыеСвойства.Номенклатура);
		Инструкция.Вставить("ИмяПКО","Справочник_Номенклатура_Получение");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Инструкция);
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("AdditionalInfo") 
		И ТипЗнч(ДанныеXDTO.AdditionalInfo) = Тип("Структура") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты")
			И ДанныеXDTO.AdditionalInfo.Свойство("ПодарочныеСертификатыОстатки")
			И ЗначениеЗаполнено(ДанныеXDTO.AdditionalInfo.ПодарочныеСертификатыОстатки) Тогда
			
			ПодарочныеСертификатыОстатки = ДанныеXDTO.AdditionalInfo.ПодарочныеСертификатыОстатки;
			
			Комментарий = СтрШаблон(НСтр("ru = '#%1# Загрузка остатков при переходе РТ (комментарий не изменять!)'"), ПолученныеДанные.Наименование);
			
			НайденнаяСсылка = Документы.КорректировкаРегистров.ПустаяСсылка();
			
			ТекстЗапроса = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	КорректировкаРегистров.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.КорректировкаРегистров КАК КорректировкаРегистров
			|ГДЕ
			|	(ВЫРАЗИТЬ(КорректировкаРегистров.Комментарий КАК СТРОКА(150))) = &Комментарий
			|";
	
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Комментарий", Комментарий);
	
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НайденнаяСсылка = Выборка.Ссылка;
			КонецЦикла;
	
			Если ОбщегоНазначения.СсылкаСуществует(НайденнаяСсылка) Тогда
				КорректировкаРегистров = НайденнаяСсылка.ПолучитьОбъект();
			Иначе
				КорректировкаРегистров = Документы.КорректировкаРегистров.СоздатьДокумент();
				КорректировкаРегистров.Автор = Пользователи.ТекущийПользователь();
				КорректировкаРегистров.Дата = ТекущаяДатаСеанса();
				КорректировкаРегистров.Комментарий = Комментарий;
				КорректировкаРегистров.УстановитьНовыйНомер();
				
				НоваяСтрокаТаблицыРегистров = КорректировкаРегистров.ТаблицаРегистров.Добавить();
				НоваяСтрокаТаблицыРегистров.Имя = "ПодарочныеСертификаты";
				
				НоваяСтрокаТаблицыРегистров = КорректировкаРегистров.ТаблицаРегистров.Добавить();
				НоваяСтрокаТаблицыРегистров.Имя = "РасчетыСПокупателями";
	
				КорректировкаРегистров.ОбменДанными.Загрузка = Истина;
				КорректировкаРегистров.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
				КорректировкаРегистров.Записать();
			КонецЕсли;
	
			НаборЗаписей = РегистрыНакопления.ПодарочныеСертификаты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(КорректировкаРегистров.Ссылка);
			
			Для каждого СтрокаТаблицы Из ПодарочныеСертификатыОстатки Цикл
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяСтрока.Период = КорректировкаРегистров.Дата;
				НоваяСтрока.Регистратор = КорректировкаРегистров.Ссылка;
				НоваяСтрока.Активность = Истина;
				НоваяСтрока.ПодарочныйСертификат = СтрокаТаблицы.ПодарочныйСертификат;
				НоваяСтрока.НомерСертификата = ПолученныеДанные.ПолучитьСсылкуНового();
				НоваяСтрока.Сумма = СтрокаТаблицы.Сумма;
			КонецЦикла;
	
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.Записать();
			
			КонтрагентДляПредоплаты = Константы.КонтрагентДляПодарочныхСертификатов.Получить();
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(КонтрагентДляПредоплаты);
			ОрганизацияДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорПоУмолчанию, "Организация");
			ХозОперация = ПредопределенноеЗначение("Справочник.ХозяйственныеОперации.ВводНачальныхОстатков");
			СуммаАванса = ПодарочныеСертификатыОстатки.Итог("Сумма");
	
			НаборЗаписей = РегистрыНакопления.РасчетыСПокупателями.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(КорректировкаРегистров.Ссылка);
	
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Период = КорректировкаРегистров.Дата;
			НоваяСтрока.Регистратор = КорректировкаРегистров.Ссылка;
			НоваяСтрока.Активность = Истина;
			НоваяСтрока.Организация = ОрганизацияДоговора;
			НоваяСтрока.ТипРасчетов = Перечисления.ТипыРасчетов.Аванс;
			НоваяСтрока.Контрагент = КонтрагентДляПредоплаты;
			НоваяСтрока.Договор = ДоговорПоУмолчанию;
			НоваяСтрока.ХозяйственнаяОперация = ХозОперация;
			НоваяСтрока.Сумма = СуммаАванса;
			НоваяСтрока.СуммаВал = СуммаАванса;
			НоваяСтрока.СуммаРег = СуммаАванса;
	
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.Записать();
	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_СтатьиДДС_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.Родитель = Справочники.СтатьиДвиженияДенежныхСредств.ОперационнаяДеятельность;
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
			ПолученныеДанные.Родитель = ДанныеИБ.Родитель;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ТипыЦен_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
		И ДанныеИБ = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Т.Ссылка) КАК Количество
		|ПОМЕСТИТЬ втКоличествоВидыЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоВидыЦен КАК втКоличествоВидыЦен
		|		ПО (втКоличествоВидыЦен.Количество = 2)
		|ГДЕ
		|	Т.Предопределенный
		|	И (ВЫРАЗИТЬ(Т.ИдентификаторФормул КАК СТРОКА(255))) = &ИдентификаторФормул
		|	И (ВЫРАЗИТЬ(Т.Комментарий КАК СТРОКА(150))) = """"
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Комментарий = СтрШаблон(НСтр("ru = '#%1# Загрузка данных при переходе РТ (комментарий не изменять!)'"), ПолученныеДанные.Наименование);
		
		Запрос.УстановитьПараметр("ИдентификаторФормул", НСтр("ru ='Розничнаяцена'"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ДанныеИБ = Выборка.Ссылка.ПолучитьОбъект();
				ПолученныеДанные.Комментарий = Комментарий;
				Прервать;
			КонецЦикла;
		Иначе
			ВидЦен = ПолученныеДанные.ПолучитьСсылкуНового();
			Если ОбщегоНазначения.СсылкаСуществует(ВидЦен) Тогда
				ДанныеИБ = ВидЦен.ПолучитьОбъект(); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
			Если НЕ ПолученныеДанные.ЭтоГруппа Тогда
				Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ТипВидаЦен) Тогда
					ПолученныеДанные.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ИдентификаторФормул) Тогда
					ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(ПолученныеДанные.ИдентификаторФормул, ПолученныеДанные.Наименование);
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
КонецПроцедуры
Процедура ПКО_Справочник_Упаковки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмеренияПоКлассификатору) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ЕдиницаИзмерения", ДанныеИБ.ЕдиницаИзмеренияПоКлассификатору);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
	КонецЕсли;
	
	Номенклатура = Неопределено;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6") Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Владелец) И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			Номенклатура = ДанныеИБ.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ДанныеXDTO.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Номенклатура, "Справочник_Номенклатура_Отправка"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Номенклатура, "Справочник_Номенклатура_Отправка"));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Номенклатура") Тогда
	
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.Номенклатура, "Справочник_Номенклатура_Получение"));
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_Упаковки_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец)
		ИЛИ (ДанныеИБ <> Неопределено И ТипЗнч(ДанныеИБ.Владелец) <> Тип("СправочникСсылка.Номенклатура")) Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеДляПечати) И ЗначениеЗаполнено(ДанныеИБ.Наименование) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6")
		И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Номенклатура_Отправка"));
	ИначеЕсли ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7")
		И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("ВидНоменклатуры", ДанныеИБ.Владелец);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИнструкцияВладелец = Новый Структура;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидНоменклатуры") Тогда
		ИнструкцияВладелец.Вставить("Значение", ДанныеXDTO.КлючевыеСвойства.ВидНоменклатуры);
		ИнструкцияВладелец.Вставить("ИмяПКО",   "Справочник_КатегорииНоменклатурыВН_Получение");
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Номенклатура") Тогда
		ИнструкцияВладелец.Вставить("Значение", ДанныеXDTO.КлючевыеСвойства.Номенклатура);
		ИнструкцияВладелец.Вставить("ИмяПКО",   "Справочник_Номенклатура_Получение");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнструкцияВладелец) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", ИнструкцияВладелец);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Владелец)
			ИЛИ (ДанныеИБ <> Неопределено И ТипЗнч(ДанныеИБ.Владелец) <> Тип("СправочникСсылка.Номенклатура")
			И ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7")) Тогда
			ПолученныеДанные = Неопределено;
		Иначе
			Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Наименование) Тогда
				ПолученныеДанные.Наименование = ПолученныеДанные.НаименованиеДляПечати;
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

#КонецОбласти
Процедура ПОД_Документ_ОтчетОРозничныхПродажахПатент_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ДополнительныеСвойства.Свойство("ВыгрузкаОРППоПатенту")
		И ЗначениеЗаполнено(ДанныеИБ.ДополнительныеСвойства.Свойство("ВыгрузкаОРППоПатенту")) Тогда
	
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажахПатент_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажахПатент_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
Процедура ПОД_Справочник_СостоянияЭД_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7")
		ИЛИ ДанныеИБ.Количество() = 0  Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;	
	КонецЕсли;
	
	СсылкаНаОбъект = ДанныеИБ.Отбор.СсылкаНаОбъект.Значение;
	ИмяПКООснованиеЭД = ИмяПКОДляДокумента(СсылкаНаОбъект);
	
	Если КомпонентыОбмена.УзелКорреспондента.ИспользоватьОтборПоОрганизациям Тогда
		Если НЕ (ЗначениеЗаполнено(СсылкаНаОбъект)
			И СсылкаНаОбъект.Метаданные().Реквизиты.Найти("Организация") <> Неопределено
			И КомпонентыОбмена.УзелКорреспондента.Организации.Найти(СсылкаНаОбъект.Организация) <> Неопределено) Тогда
		
			ОчиститьИспользованиеПКО(ИспользованиеПКО);
			Возврат;	
		КонецЕсли; 
	КонецЕсли;
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	СостояниеЭДО = ТаблицаЗаписи[0].СостояниеЭДО;
	СостояниеЭлектронногоДокумента = ОбменСКонтрагентами.ТипСостоянияЭлектронногоДокументаУниверсальногоФормата(
		КомпонентыОбмена.ВерсияФорматаОбмена, СостояниеЭДО);
	СводныеСостояния = ОбменСКонтрагентами.ТипыСводныхСостоянийЭДОУниверсальногоФормата(
		КомпонентыОбмена.ВерсияФорматаОбмена, СостояниеЭДО);
	СостояниеОбменаЭДНаНашейСтороне = СводныеСостояния.НаНашейСтороне;	
	СостояниеОбменаЭДНаСторонеКонтрагента = СводныеСостояния.НаСторонеКонтрагента;
	
	Если НЕ ЗначениеЗаполнено(ИмяПКООснованиеЭД) Или НЕ ЗначениеЗаполнено(СостояниеЭлектронногоДокумента)
		Или НЕ ЗначениеЗаполнено(СостояниеОбменаЭДНаНашейСтороне)
		Или НЕ ЗначениеЗаполнено(СостояниеОбменаЭДНаСторонеКонтрагента)
		Или СостояниеОбменаЭДНаНашейСтороне = "ПригласитьКОбмену"
		Или СостояниеОбменаЭДНаСторонеКонтрагента = "ПригласитьКОбмену" Тогда
		ИспользованиеПКО.Очистить();
	Иначе
		ДанныеИБ.ДополнительныеСвойства.Вставить("ОснованиеЭлектронногоДокумента",
					Новый Структура("Значение, ИмяПКО", СсылкаНаОбъект, ИмяПКООснованиеЭД));
		ДанныеИБ.ДополнительныеСвойства.Вставить("СостояниеЭлектронногоДокумента", СостояниеЭлектронногоДокумента);
		ДанныеИБ.ДополнительныеСвойства.Вставить("СостояниеОбменаЭДНаНашейСтороне", СостояниеОбменаЭДНаНашейСтороне);
		ДанныеИБ.ДополнительныеСвойства.Вставить("СостояниеОбменаЭДНаСторонеКонтрагента", СостояниеОбменаЭДНаСторонеКонтрагента);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаказНаПеремещение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаРезерв) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаРезерв);
		ДанныеXDTO.Вставить("СкладОтправитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаРезерв, ИмяПКО));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиницаПолучатель) Тогда
		ИмяПКО = ПКОДляСтруктурнойЕдиницы(ДанныеИБ.СтруктурнаяЕдиницаПолучатель);
		ДанныеXDTO.Вставить("СкладПолучатель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.СтруктурнаяЕдиницаПолучатель, ИмяПКО));
	КонецЕсли;
	
	РасширенныеДанныеИБ = ДанныеДокументаЗаказНаПеремещение(ДанныеИБ);
	
	Товары = РасширенныеДанныеИБ.Товары;
	Если Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеXDTO.СтатьяДвиженияДенежныхСредств);
КонецПроцедуры
Процедура ПКО_Документ_ЗаявкаНаРасходПрочееИзСтрук_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.Прочее;
	
	Если ДанныеИБ = Неопределено Тогда
	
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатусУтвержденияПлатежа) Тогда
			ПолученныеДанные.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.НеУтвержден;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатьяДвиженияДенежныхСредств) Тогда
			ПолученныеДанные.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ДанныеXDTO.ДокументОснование);
КонецПроцедуры
Процедура ПКО_Документ_ЗаявкаНаРасходРасчСКонтрИзСтрук_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Автор) Тогда
		ПолученныеДанные.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПолученныеДанные.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.Поставщику;
	
	Если ДанныеИБ = Неопределено Тогда
	
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатусУтвержденияПлатежа) Тогда
			ПолученныеДанные.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.НеУтвержден;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатьяДвиженияДенежныхСредств) Тогда
			ПолученныеДанные.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМ_54ФЗ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.НомерСменыККМ) Тогда
		НомерКассовойСмены = Формат(ДанныеИБ.НомерСменыККМ, "ЧГ=0");
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.КассоваяСмена) Тогда
		НомерКассовойСмены = ДанныеИБ.КассоваяСмена.Номер;
	Иначе
		НомерКассовойСмены = "1";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКассовойСмены", НомерКассовойСмены);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ЭтоВозврат = Ложь;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьЗаказыКакСчетаНаОплату 
		И КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьЗаказыПокупателей Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Заказ) Тогда
			Если ТипЗнч(ДанныеИБ.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ДанныеXDTO.Вставить("ЗаказКлиента", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Заказ, "Документ_ЗаказПокупателя_Отправка"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	 	
	РасширенныеДанныеИБ = ДанныеДокументаЧекККМ(ДанныеИБ);
	
	
	ТоварыПродажа = РасширенныеДанныеИБ.ТоварыПродажа;
	Если ТоварыПродажа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ТоварыПродажа", ТоварыПродажа);
	КонецЕсли;
	
	ТоварыВозвратПродажи = РасширенныеДанныеИБ.ТоварыВозвратПродажи;
	Если ТоварыВозвратПродажи.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ТоварыВозвратПродажи", ТоварыВозвратПродажи);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	ПодарочныеСертификаты = РасширенныеДанныеИБ.ПодарочныеСертификаты;
	Если ПодарочныеСертификаты.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты);
	КонецЕсли;
	
	ОплатаПлатежнымиКартами = РасширенныеДанныеИБ.ОплатаПлатежнымиКартами;
	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ОплатаПлатежнымиКартами);
	КонецЕсли;
	
	ОплатаСертификатами = РасширенныеДанныеИБ.ОплатаСертификатами;
	Если ОплатаСертификатами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаСертификатами", ОплатаСертификатами);
	КонецЕсли;
	
	
	//ОплатыККМ
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("ТипОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплатыККТ"));
	ТаблицаОплат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	
	ЕстьДвижениеНаличных = Ложь;
	ЕстьДвижениеБезналичных = Ложь;
	
	// Наличные
	лПолученоНаличными = ДанныеИБ.ПолученоНаличными;
	Если лПолученоНаличными > 0 Тогда
		СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
		СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		СтрокаТаблицаОплат.Сумма = лПолученоНаличными;
		ЕстьДвижениеНаличных = Истина;
	КонецЕсли;
	
	СуммаЭлектронно = 0; // БанковскаяКарта
	СуммаКредита = 0; // Кредит и ОплатаВРассрочку 
	ЗачетАванса = 0; // ПодарочныйСертификат и ЗачетАванса
	
	// Платежная карта
	Для каждого СтрокаТаблицы Из ДанныеИБ.БезналичнаяОплата Цикл
		Если СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
			СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
		ИначеЕсли СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Кредит Тогда
			СуммаКредита = СуммаКредита + СтрокаТаблицы.Сумма;
		ИначеЕсли СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку Тогда
			СуммаКредита = СуммаКредита + СтрокаТаблицы.Сумма;
		ИначеЕсли СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат Тогда
			ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
		ИначеЕсли СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.СертификатНСПК Тогда
			ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаЭлектронно > 0 Тогда
		СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
		СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
		СтрокаТаблицаОплат.Сумма = СуммаЭлектронно;
		ЕстьДвижениеБезналичных = Истина;
	КонецЕсли;
	
	Если СуммаКредита > 0 Тогда
		СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
		СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата;
		СтрокаТаблицаОплат.Сумма = СуммаКредита;
	КонецЕсли;
	
	Если ДанныеИБ.Предоплата.Количество() > 0 Тогда
		ЗачетАванса = ЗачетАванса + ДанныеИБ.Предоплата.Итог("СуммаПлатежа");
	КонецЕсли;
	
	Если ЗачетАванса > 0 Тогда
		СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
		СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
		СтрокаТаблицаОплат.Сумма = ЗачетАванса;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ОплатыККМ", ТаблицаОплат);
	
	
	
	//Описание дополнительной информации
	//ЕстьДвижениеНаличных (булево) – по чеку есть получение или выдача наличных денежных средств
	//ЕстьДвижениеБезналичных (булево) – по чеку есть получение или возврат безналичных денежных средств
	//ЕстьДвижениеТоваров (булево) – по чеку есть выдача или возврат товаров
	//Возврат (булево) – если Истина, то это чек на возврат
	//ВключенВОРП (булево) - если чек включен в ОРП
	
	ОперацияСДС = ДанныеИБ.ОперацияСДенежнымиСредствами;
	
	ЕстьДвижениеТоваров = ДанныеИБ.Запасы.Количество() > 0 И НЕ ОперацияСДС;
	ЕстьДвижениеПС = ПодарочныеСертификаты.Количество() > 0 И НЕ ОперацияСДС;
	
	Дополнение = Новый Структура;
	Дополнение.Вставить("ЕстьДвижениеНаличных", ЕстьДвижениеНаличных);
	Дополнение.Вставить("ЕстьДвижениеБезналичных", ЕстьДвижениеБезналичных);
	Дополнение.Вставить("ЕстьДвижениеТоваров", ЕстьДвижениеТоваров ИЛИ ЕстьДвижениеПС);
	Дополнение.Вставить("Возврат", ЭтоВозврат);
	Дополнение.Вставить("ВключенВОРП", Ложь);
	
	ДанныеXDTO.Вставить("AdditionalInfo", Дополнение);
КонецПроцедуры
Процедура ПКО_Документ_ЧекККМВозврат_54ФЗ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.НомерСменыККМ) Тогда
		НомерКассовойСмены = Формат(ДанныеИБ.НомерСменыККМ, "ЧГ=0");
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.КассоваяСмена) Тогда
		НомерКассовойСмены = ДанныеИБ.КассоваяСмена.Номер;
	Иначе
		НомерКассовойСмены = "1";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКассовойСмены", НомерКассовойСмены);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ИспользуютсяСкладыВТабличныхЧастях Тогда
		Склад = КомпонентыОбмена.ПараметрыКонвертации.ОбобщенныйСклад; 
	Иначе
		Склад = ДанныеИБ.СтруктурнаяЕдиница;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", Склад);
	
	ЭтоВозврат = Истина;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьЗаказыКакСчетаНаОплату 
		И КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьЗаказыПокупателей Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Заказ) Тогда
			Если ТипЗнч(ДанныеИБ.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ДанныеXDTO.Вставить("ЗаказКлиента", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Заказ, "Документ_ЗаказПокупателя_Отправка"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	 	
	РасширенныеДанныеИБ = ДанныеДокументаЧекККМ(ДанныеИБ);
	
	
	ТоварыПродажа = РасширенныеДанныеИБ.ТоварыПродажа;
	Если ТоварыПродажа.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ТоварыВозвратПродажи", ТоварыПродажа);
	КонецЕсли;
	
	Услуги = РасширенныеДанныеИБ.Услуги;
	Если Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", Услуги);
	КонецЕсли;
	
	ПодарочныеСертификаты = РасширенныеДанныеИБ.ПодарочныеСертификаты;
	Если ПодарочныеСертификаты.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты);
	КонецЕсли;
	
	ОплатаПлатежнымиКартами = РасширенныеДанныеИБ.ОплатаПлатежнымиКартами;
	
	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ОплатаПлатежнымиКартами);
	КонецЕсли;
	
	
	ОплатаСертификатами = РасширенныеДанныеИБ.ОплатаСертификатами;
	Если ОплатаСертификатами.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаСертификатами", ОплатаСертификатами);
	КонецЕсли;
	
	
	//ОплатыККМ
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("ТипОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплатыККТ"));
	ТаблицаОплат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	
	ЕстьДвижениеНаличных = Ложь;
	ЕстьДвижениеБезналичных = Ложь;
	
	// Наличные
	лПолученоНаличными = ДанныеИБ.СуммаДокумента - ДанныеИБ.БезналичнаяОплата.Итог("Сумма") - ДанныеИБ.Предоплата.Итог("СуммаПлатежа");
	Если лПолученоНаличными > 0 Тогда
		СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
		СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		СтрокаТаблицаОплат.Сумма = лПолученоНаличными;
		ЕстьДвижениеНаличных = Истина;
	КонецЕсли;
	
	СуммаЭлектронно = 0; // БанковскаяКарта
	СуммаКредита = 0; // Кредит и ОплатаВРассрочку 
	ЗачетАванса = 0; // ПодарочныйСертификат и ЗачетАванса
	
	// Платежная карта
	Для каждого СтрокаТаблицы Из ДанныеИБ.БезналичнаяОплата Цикл
		Если СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
			СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
		ИначеЕсли СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.Кредит Тогда
			СуммаКредита = СуммаКредита + СтрокаТаблицы.Сумма;
		ИначеЕсли СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку Тогда
			СуммаКредита = СуммаКредита + СтрокаТаблицы.Сумма;
		ИначеЕсли СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.ПодарочныйСертификат Тогда
			ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
		ИначеЕсли СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.СертификатНСПК Тогда
			ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаЭлектронно > 0 Тогда
		СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
		СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
		СтрокаТаблицаОплат.Сумма = СуммаЭлектронно;
		ЕстьДвижениеБезналичных = Истина;
	КонецЕсли;
	
	Если СуммаКредита > 0 Тогда
		СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
		СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата;
		СтрокаТаблицаОплат.Сумма = СуммаКредита;
	КонецЕсли;
	
	Если ДанныеИБ.Предоплата.Количество() > 0 Тогда
		ЗачетАванса = ЗачетАванса + ДанныеИБ.Предоплата.Итог("СуммаПлатежа");
	КонецЕсли;
	
	Если ЗачетАванса > 0 Тогда
		СтрокаТаблицаОплат = ТаблицаОплат.Добавить();
		СтрокаТаблицаОплат.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
		СтрокаТаблицаОплат.Сумма = ЗачетАванса;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ОплатыККМ", ТаблицаОплат);
	
	
	
	//Описание дополнительной информации
	//ЕстьДвижениеНаличных (булево) – по чеку есть получение или выдача наличных денежных средств
	//ЕстьДвижениеБезналичных (булево) – по чеку есть получение или возврат безналичных денежных средств
	//ЕстьДвижениеТоваров (булево) – по чеку есть выдача или возврат товаров
	//Возврат (булево) – если Истина, то это чек на возврат
	//ВключенВОРП (булево) - если чек включен в ОРП
	
	ОперацияСДС = ДанныеИБ.ОперацияСДенежнымиСредствами;
	
	ЕстьДвижениеТоваров = ДанныеИБ.Запасы.Количество() > 0 И НЕ ОперацияСДС;
	ЕстьДвижениеПС = ПодарочныеСертификаты.Количество() > 0 И НЕ ОперацияСДС;
	
	Дополнение = Новый Структура;
	Дополнение.Вставить("ЕстьДвижениеНаличных", ЕстьДвижениеНаличных);
	Дополнение.Вставить("ЕстьДвижениеБезналичных", ЕстьДвижениеБезналичных);
	Дополнение.Вставить("ЕстьДвижениеТоваров", ЕстьДвижениеТоваров ИЛИ ЕстьДвижениеПС);
	Дополнение.Вставить("Возврат", ЭтоВозврат);
	Дополнение.Вставить("ВключенВОРП", Ложь);
	
	ДанныеXDTO.Вставить("AdditionalInfo", Дополнение);
КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция SKUКонтрагентаДляОтправки(НоменклатураСсылка, ХарактеристикаСсылка, УпаковкаСсылка, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(НоменклатураСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.8") Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
			Запрос.УстановитьПараметр("ХарактеристикаСсылка", ХарактеристикаСсылка);
			Запрос.УстановитьПараметр("ЕдиницаИзмеренияСсылка", УпаковкаСсылка);
	
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТКонтрагент
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	НЕ Контрагенты.ЭтоГруппа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СпрНоменклатура.Наименование КАК Наименование,
			|	СпрНоменклатура.Артикул КАК Артикул,
			|	КодыТоваровSKU.SKU КАК ШтрихКод,
			|	ВТКонтрагент.Ссылка КАК Контрагент
			|ИЗ
			|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО КодыТоваровSKU.Номенклатура = СпрНоменклатура.Ссылка
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВТКонтрагент КАК ВТКонтрагент
			|		ПО (ИСТИНА)
			|ГДЕ
			|	КодыТоваровSKU.Номенклатура = &НоменклатураСсылка
			|	И КодыТоваровSKU.Характеристика = &ХарактеристикаСсылка
			|	И КодыТоваровSKU.ЕдиницаИзмерения = &ЕдиницаИзмеренияСсылка";
	
	
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат Неопределено;
			КонецЕсли;
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Значение = Новый Структура;
			Значение.Вставить("Ссылка", НоменклатураСсылка);
			Значение.Вставить("Наименование", Выборка.Наименование);
			Значение.Вставить("Артикул", Выборка.Артикул);
			Значение.Вставить("Идентификатор", Строка(НоменклатураСсылка.УникальныйИдентификатор()));
			Значение.Вставить("ШтрихКод", Выборка.ШтрихКод);
			Значение.Вставить("ИдентификаторНоменклатурыСервиса1СНоменклатура", "");
			Значение.Вставить("ИдентификаторХарактеристикиСервиса1СНоменклатура", "");
			Значение.Вставить("Владелец", Выборка.Контрагент);
			Значение.Вставить("УпаковкаНоменклатуры", УпаковкаСсылка);
			
			Возврат Новый Структура("ИмяПКО,Значение", "Справочник_SKUКонтрагента_ИзСтруктуры_Отправка", Значение);	
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
КонецФункции
Функция АкцизнаяМарка(КомпонентыОбмена, ПолученныеДанные, АкцизнаяМаркаТекст, СтруктураНоменклатуры, СтруктураХарактеристики = Неопределено)
	МассивТиповУпаковки = Новый Массив;
	МассивТиповУпаковки.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	МассивТиповУпаковки.Добавить(Перечисления.ТипыУпаковок.МонотоварнаяУпаковка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивТиповУпаковки", МассивТиповУпаковки);
	Запрос.УстановитьПараметр("ЗначениеШтрихкода", АкцизнаяМаркаТекст);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &ЗначениеШтрихкода
	|	И ШтрихкодыУпаковокТоваров.ТипУпаковки В(&МассивТиповУпаковки)";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать(); 
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
	
		ИсходныеДанные = Новый Структура("Штрихкод, Количество", АкцизнаяМаркаТекст, 1);
		ШтрихкодКоличество = ОбщегоНазначения.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ПолученныеДанные);
		
		ДанныеШтрихкодаСписок = Новый Массив;
		ДанныеШтрихкодаСписок.Добавить(ШтрихкодКоличество);
		ДанныеПоШтрихкодам    = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
		ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = Ложь;
		ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования);
		
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
		ДанныеШтрихкода = ДанныеКодовМаркировки[0];
	
		НоваяАкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
		НоваяАкцизнаяМарка.ТипУпаковки = ДанныеШтрихкода.ТипУпаковки;                      
		НоваяАкцизнаяМарка.ТипШтрихкода = ДанныеШтрихкода.ТипШтрихкода;         
		НоваяАкцизнаяМарка.ДатаУпаковки = ТекущаяДатаСеанса(); 
		НоваяАкцизнаяМарка.ЗначениеШтрихкода = АкцизнаяМаркаТекст;  
		НоваяАкцизнаяМарка.Упаковка = ДанныеШтрихкода.Упаковка;  
		Если ТипЗнч(НоваяАкцизнаяМарка.Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			НоваяАкцизнаяМарка.Количество = НоваяАкцизнаяМарка.Упаковка.Коэффициент;        
		Иначе
			НоваяАкцизнаяМарка.Количество = 1;
		КонецЕсли;
		  
		ИмяПКО = "Справочник_Номенклатура_Получение";
		ПКОНоменклатура = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
		Номенклатура = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтруктураНоменклатуры,
									ПКОНоменклатура, "ПолучитьСсылку").Ссылка;
		НоваяАкцизнаяМарка.Номенклатура = Номенклатура;
		
		Если СтруктураХарактеристики <> Неопределено Тогда
			ИмяПКО = "Справочник_ХарактеристикиНоменклатуры";
			ПКОХарактеристика = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			Характеристика = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтруктураХарактеристики,
									ПКОХарактеристика, "ПолучитьСсылку").Ссылка;
			НоваяАкцизнаяМарка.Характеристика = Характеристика;
		КонецЕсли;   
		
		НоваяАкцизнаяМарка.Записать(); 
		Возврат НоваяАкцизнаяМарка.Ссылка;      
	КонецЕсли;
КонецФункции
Функция АлгоритмВыгрузкиПБДСОтправка(ДанныеИБ)
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда 
		АлгоритмКонвертации = "ОплатаОтПокупателя";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
		АлгоритмКонвертации = "ВозвратОтПоставщика";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника Тогда
		АлгоритмКонвертации = "ВозвратОтПодотчетногоЛица";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
		АлгоритмКонвертации = "УплатаНалогов";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам Тогда
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником Тогда
		АлгоритмКонвертации = "ВозвратЗаймаРаботником";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
		АлгоритмКонвертации = "ПоступлениеОплатыПоКартам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
		АлгоритмКонвертации = ?(ДанныеИБ.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета,
			"ПоступленияОтПродажиИностраннойВалюты",
			"ПриобретениеИностраннойВалюты");
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации Тогда
		АлгоритмКонвертации = "ОплатаОтПокупателя";
	Иначе// Прочее, ПрочиеРасчеты 
		АлгоритмКонвертации = "ПрочийПриход";
	КонецЕсли;
		
	Возврат АлгоритмКонвертации;
КонецФункции
Функция АлгоритмВыгрузкиПКООтправка(ДанныеИБ)
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда 
		АлгоритмКонвертации = "ОплатаОтПокупателя";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
		АлгоритмКонвертации = "ВозвратОтПоставщика";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника Тогда
		АлгоритмКонвертации = "ВозвратОтПодотчетногоЛица";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка Тогда
		АлгоритмКонвертации = "РозничнаяВыручка";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
		АлгоритмКонвертации = "РозничнаяВыручка";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам Тогда
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
		АлгоритмКонвертации = "ВозвратЗаймаРаботником";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации Тогда
		АлгоритмКонвертации = "ОплатаОтПокупателя";
	Иначе // ПокупкаВалюты, Прочее, ПрочиеРасчеты
		АлгоритмКонвертации = "ПрочийПриход";
	КонецЕсли;
		
	Возврат АлгоритмКонвертации;
КонецФункции
Функция АлгоритмВыгрузкиРКООтправка(ДанныеИБ)
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда 
		АлгоритмКонвертации = "ВозвратОтПокупателя";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
		АлгоритмКонвертации = "ОплатаПоставщику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
		АлгоритмКонвертации = "Зарплата";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
		АлгоритмКонвертации = "УплатаНалогов";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику Тогда
		АлгоритмКонвертации = "ВыдачаПодотчетнику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
		АлгоритмКонвертации = "ВыдачаЗаймаРаботнику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
		АлгоритмКонвертации = "ОплатаПоставщику";
	Иначе // ПеремещениеВКассуККМ, НаРасходы 
		АлгоритмКонвертации = "ПрочийРасход";
	КонецЕсли;
		
	Возврат АлгоритмКонвертации;
КонецФункции
Функция АлгоритмВыгрузкиСБДСОтправка(ДанныеИБ)
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда 
		АлгоритмКонвертации = "ОплатаПоставщику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда 
		АлгоритмКонвертации = "ВозвратОтПокупателя";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда 
		АлгоритмКонвертации = "ВыдачаПодотчетнику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда 
		АлгоритмКонвертации = "Зарплата";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда 
		АлгоритмКонвертации = "УплатаНалогов";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда 
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда 
		АлгоритмКонвертации = "ВыдачаЗаймаРаботнику";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда 
		АлгоритмКонвертации = "ВозвратОплатыПоКартам";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации Тогда 
		АлгоритмКонвертации = "ОплатаПоставщику";
	Иначе // НаРасходы, Прочее, ПрочиеРасчеты 
		АлгоритмКонвертации = "ПрочийРасход";
	КонецЕсли;
		
	Возврат АлгоритмКонвертации;
КонецФункции
Функция БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУНФ, Документ, ТипСуммы = Неопределено, ЭтоЗайм = Ложь)
	СтруктураСчетаБП = Новый Структура;
			
			КодСчета = "";
			Субконто1Вид = Неопределено;
			Субконто2Вид = Неопределено;
			Субконто3Вид = Неопределено;
			
			СтруктураСчетаБП.Вставить("КодСчета", КодСчета);
			СтруктураСчетаБП.Вставить("Субконто1Вид", Субконто1Вид);
			СтруктураСчетаБП.Вставить("Субконто2Вид", Субконто2Вид);
			СтруктураСчетаБП.Вставить("Субконто3Вид", Субконто3Вид);
			
			Если Не ЗначениеЗаполнено(СчетУНФ) Тогда
				Возврат СтруктураСчетаБП;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СчетУНФ.КорреспондирующийСчет) Тогда
				
				КодСчета = СокрЛП(СчетУНФ.КорреспондирующийСчет);
				Если Прав(КодСчета, 1) = "." Тогда
					КодСчета = Лев(КодСчета, СтрДлина(КодСчета)-1);
				КонецЕсли;
				
				СтруктураСчетаБП.Вставить("КодСчета", КодСчета);
				Возврат СтруктураСчетаБП;
				
			КонецЕсли;
			
			
			ДокументВВалюте = Ложь;
			МетаданныеДокумента = Документ.Метаданные();
			Если (МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено
					И Документ.ВалютаДокумента <> Константы.НациональнаяВалюта.Получить())
				
				ИЛИ (МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено
					И Документ.ВалютаДенежныхСредств <> Константы.НациональнаяВалюта.Получить()) Тогда
				
				ДокументВВалюте = Истина;
			КонецЕсли;
			
			Если СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.ДенежныеСредства Тогда
				Если СчетУНФ = ПланыСчетов.Управленческий.ФинансовыеВложения Тогда
					КодСчета = "58.03";
				ИначеЕсли ДокументВВалюте = Истина Тогда
					КодСчета = "57.21";
				Иначе
					КодСчета = "57.01";
				КонецЕсли;
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы Тогда
				Если Не ЭтоЗайм Тогда 
					Если Не ЗначениеЗаполнено(ТипСуммы)
						ИЛИ ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
						Если Не ДокументВВалюте Тогда
							КодСчета = "66.01";
						Иначе
							КодСчета = "66.21";
						КонецЕсли;
					Иначе
						Если Не ДокументВВалюте Тогда
							КодСчета = "66.02";
						Иначе
							КодСчета = "66.22";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Не ЗначениеЗаполнено(ТипСуммы)
						ИЛИ ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
						Если Не ДокументВВалюте Тогда
							КодСчета = "66.03";
						Иначе
							КодСчета = "66.23";
						КонецЕсли;
					Иначе
						Если Не ДокументВВалюте Тогда
							КодСчета = "66.04";
						Иначе
							КодСчета = "66.24";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Субконто1Вид = "Контрагенты";
				Субконто2Вид = "Договоры";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства Тогда
				Если Не ЭтоЗайм Тогда 
					Если Не ЗначениеЗаполнено(ТипСуммы)
						ИЛИ ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
						Если Не ДокументВВалюте Тогда
							КодСчета = "67.01";
						Иначе
							КодСчета = "67.21";
						КонецЕсли;
					Иначе
						Если Не ДокументВВалюте Тогда
							КодСчета = "67.02";
						Иначе
							КодСчета = "67.22";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Не ЗначениеЗаполнено(ТипСуммы)
						ИЛИ ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
						Если Не ДокументВВалюте Тогда
							КодСчета = "67.03";
						Иначе
							КодСчета = "67.23";
						КонецЕсли;
					Иначе
						Если Не ДокументВВалюте Тогда
							КодСчета = "67.04";
						Иначе
							КодСчета = "67.24";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Субконто1Вид = "Контрагенты";
				Субконто2Вид = "Договоры";
				
			ИначеЕсли СчетУНФ = ПланыСчетов.Управленческий.ПроцентыПоКредитам Тогда
				КодСчета = "91.02";
				Субконто1Вид = "ПрочиеДоходыИРасходы";
				
			ИначеЕсли СчетУНФ.Родитель = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоПрочимОперациям Тогда
				Если СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы Тогда
					КодСчета = "73.01";
				Иначе
					КодСчета = СокрЛП(СчетУНФ.Код);
				КонецЕсли;
				Субконто1Вид = "РаботникиОрганизаций";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.Дебиторы
				ИЛИ СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.Кредиторы Тогда
				Если Не ДокументВВалюте Тогда
					КодСчета = "76.09";
				Иначе
					КодСчета = "76.29";
				КонецЕсли;
				Субконто1Вид = "Контрагенты";
				Субконто2Вид = "Договоры";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.Капитал Тогда
				БухгалтерскийСчет = "80.09";
				
			ИначеЕсли СчетУНФ.Родитель = ПланыСчетов.Управленческий.РасчетыСПодотчетнымиЛицами Тогда
				КодСчета = "71.01";
				Субконто1Вид = "РаботникиОрганизаций";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы Тогда
				КодСчета = "91.01";
				Субконто1Вид = "ПрочиеДоходыИРасходы";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы Тогда
				КодСчета = "91.02";
				Субконто1Вид = "ПрочиеДоходыИРасходы";
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
				Если СчетУНФ = ПланыСчетов.Управленческий.КоммерческиеРасходы Тогда
					Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") = Истина Тогда
						БухгалтерскийСчет = "44.02";
					Иначе
						БухгалтерскийСчет = "44.01";
					КонецЕсли;
				Иначе
					БухгалтерскийСчет = "26";
				КонецЕсли;
				
			ИначеЕсли СчетУНФ.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
				Если СокрЛП(СчетУНФ.Код) <> "25" Тогда
					КодСчета = "26";
				КонецЕсли;
				Субконто1Вид = "СтатьиЗатрат";
			Иначе
				КодСчета = СокрЛП(СчетУНФ.Код);
			КонецЕсли;
			
			Если Прав(КодСчета, 1) = "." Тогда
				КодСчета = Лев(КодСчета, СтрДлина(КодСчета)-1);
			КонецЕсли;		
			
			
			СтруктураСчетаБП.КодСчета = КодСчета;
			СтруктураСчетаБП.Субконто1Вид = Субконто1Вид;
			СтруктураСчетаБП.Субконто2Вид = Субконто2Вид;
			СтруктураСчетаБП.Субконто3Вид = Субконто3Вид;
			
			Возврат СтруктураСчетаБП;
КонецФункции
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидРасчетовРасширенный(АлгоритмКонвертации, Документ, СтрокаРП = Неопределено)
	ВидРасчетов = "";
		
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			ИЛИ АлгоритмКонвертации = "ОплатаПоставщику"
			
			ИЛИ АлгоритмКонвертации = "ВозвратОтПокупателя"
			ИЛИ АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			
			Если СтрокаРП <> Неопределено
				И СтрокаРП.ПризнакАванса Тогда
				ВидРасчетов = "Аванс";
			Иначе
				ВидРасчетов = "Долг";
			КонецЕсли;
			
		ИначеЕсли АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
			
			Если Не ЗначениеЗаполнено(Документ.ДоговорКредитаЗайма) Тогда
				Возврат ВидРасчетов;
			КонецЕсли;
			
			Если СтрокаРП = Неопределено Тогда
				СчетУчета = Документ.ДоговорКредитаЗайма.СчетУчета;
			Иначе
				Если ЗначениеЗаполнено(СтрокаРП.ТипСуммы)
					И СтрокаРП.ТипСуммы <> Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
					СчетУчета = Документ.ДоговорКредитаЗайма.СчетУчетаПроцентов;
				Иначе
					СчетУчета = Документ.ДоговорКредитаЗайма.СчетУчета;
				КонецЕсли;
			КонецЕсли;
			
			Если СчетУчета.ТипСчета = Перечисления.ТипыСчетов.КредитыИЗаймы Тогда
				Если СтрокаРП <> Неопределено
					И СтрокаРП.ТипСуммы <> Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
					ВидРасчетов = "ПроцентыПоКраткосрочнымКредитам";
				Иначе
					ВидРасчетов = "КраткосрочныеКредиты";
				КонецЕсли;
			ИначеЕсли СчетУчета.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства Тогда
				Если СтрокаРП <> Неопределено
					И СтрокаРП.ТипСуммы <> Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг Тогда
					ВидРасчетов = "ПроцентыПоДолгосрочнымКредитам";
				Иначе
					ВидРасчетов = "ДолгосрочныеКредиты";
				КонецЕсли;
			ИначеЕсли СчетУчета.ТипСчета = Перечисления.ТипыСчетов.ПроцентыПоКредитам Тогда
				СчетУчетаПроцентов = Документ.ДоговорКредитаЗайма.СчетУчета;
				Если СчетУчетаПроцентов.ТипСчета = Перечисления.ТипыСчетов.ДолгосрочныеОбязательства Тогда
					ВидРасчетов = "ПроцентыПоДолгосрочнымКредитам";
				Иначе
					ВидРасчетов = "ПроцентыПоКраткосрочнымКредитам";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
		Возврат ВидРасчетов;
КонецФункции
Функция ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации)
	Если АлгоритмКонвертации = "ОплатаОтПокупателя" Тогда
		Возврат "СПокупателем";
	ИначеЕсли АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда  
		Возврат "СПоставщиком";
	ИначеЕсли АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда  
		Возврат "КредитыИЗаймы";
	Иначе
		Возврат "Прочее";
	КонецЕсли;
КонецФункции
Функция ВидРасчетовСКонтрагентомСписание(АлгоритмКонвертации)
	Если АлгоритмКонвертации = "ОплатаПоставщику" Тогда
		Возврат "СПоставщиком";
	ИначеЕсли АлгоритмКонвертации = "ВозвратОтПокупателя" Тогда  
		Возврат "СПокупателем";
	ИначеЕсли АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда  
		Возврат "КредитыИЗаймы";
	Иначе
		Возврат "Прочее";
	КонецЕсли;
КонецФункции
Функция ВыгружатьВидДокумента(Узел, ИмяОбъектаМетаданных)
	ИспользоватьОтборПоВидамДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел,
			"ИспользоватьОтборПоВидамДокументов");
		Если Не ИспользоватьОтборПоВидамДокументов Тогда
			Возврат Истина;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиСинхронизацииВидыДокументов.Ссылка КАК Ссылка,
		|	НастройкиСинхронизацииВидыДокументов.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ВидыДокументов КАК НастройкиСинхронизацииВидыДокументов
		|ГДЕ
		|	НастройкиСинхронизацииВидыДокументов.Ссылка = &Ссылка
		|	И НастройкиСинхронизацииВидыДокументов.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных";
	
		Запрос.УстановитьПараметр("Ссылка", Узел);
		Запрос.УстановитьПараметр("ИмяОбъектаМетаданных", ИмяОбъектаМетаданных);
		Результат = Запрос.Выполнить();
		
		Возврат Не Результат.Пустой();
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизиты(ДанныеИБ, ДанныеXDTO)
	Для Каждого СтрокаТЧ Из ДанныеИБ.ДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Свойство) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		Если ТипЗначенияСвойства = Тип("Число") 
			ИЛИ ТипЗначенияСвойства = Тип("Строка")
			ИЛИ ТипЗначенияСвойства = Тип("Булево")
			ИЛИ ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = СтрокаТЧ.Значение;
			Продолжить;
		КонецЕсли;
		ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли; 	
		Если ИмяПКОГруппа <> "" И СтрокаТЧ.Значение.ЭтоГруппа Тогда
			ТекИмяПКО = ИмяПКОГруппа;
		Иначе
			ТекИмяПКО = ИмяПКО;
		КонецЕсли;
		НовСтрока = ДанныеXDTO.ДополнительныеРеквизиты.Добавить();
		НовСтрока.Свойство = СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.Значение, ТекИмяПКО);
	КонецЦикла;
КонецПроцедуры
Процедура ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	// Выгрузка данных о ФИО.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Период КАК НачалоПериода,
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ РегистрСведений.ФИОФизическихЛиц
	|ГДЕ ФизическоеЛицо = &ФизЛицо";
	Запрос.УстановитьПараметр("ФизЛицо", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации)
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
	
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Заказ");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	ТабРП.Колонки.Добавить("ВидРасчетовРасширенный");
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	ТабРП.Колонки.Добавить("ДокументРасчетов");
	ТабРП.Колонки.Добавить("СпособПогашенияЗадолженности");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовПоАвансам");
	ТабРП.Колонки.Добавить("Патент");
	
	РП_ИБ = ДанныеИБ.РасшифровкаПлатежа.Выгрузить();
	
	Если РП_ИБ.Колонки.Найти("Патент") = Неопределено Тогда
		РП_ИБ.Колонки.Добавить("Патент");
	КонецЕсли;
	
	ЕстьПатентВШапке = ДанныеИБ.Метаданные().Реквизиты.Найти("Патент") <> Неопределено; 
	
	Если АлгоритмКонвертации = "ОплатаОтПокупателя"
		Или АлгоритмКонвертации = "ВозвратОтПоставщика"
		Или АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам"
		Или АлгоритмКонвертации = "ВозвратЗаймаРаботником" Тогда
		
		// Многострочная расшифровка платежа.
	
		Для Каждого СтрокаРП_ИБ ИЗ РП_ИБ Цикл
			
			СтрокаРП = ТабРП.Добавить();
			СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
			СтрокаРП.Сумма = СтрокаРП_ИБ.СуммаПлатежа;
			СтрокаРП.СуммаВзаиморасчетов = СтрокаРП_ИБ.СуммаРасчетов;
			
			Если АлгоритмКонвертации = "ОплатаОтПокупателя"
				Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
				
				// Сумма НДС и СтавкаНДС
				СтрокаРП.СуммаНДС = СтрокаРП_ИБ.СуммаНДС;
				СтрокаРП.СтавкаНДС = СтавкаНДССтрокой_Отправка(СтрокаРП_ИБ.СтавкаНДС);
			КонецЕсли;
			
			Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам"
				ИЛИ АлгоритмКонвертации = "ВозвратЗаймаРаботником" Тогда
				СтрокаРП.Договор = СтруктураДоговораКредитаИЗайма(ДанныеИБ, ДанныеИБ.ДоговорКредитаЗайма);
			Иначе
				СтрокаРП.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, СтрокаРП_ИБ.Договор);
			КонецЕсли;
			
			СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаДенежныхСредств;
			Если Не ЗначениеЗаполнено(СтрокаРП.ВалютаВзаиморасчетов) Тогда
				СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Договор.ВалютаРасчетов;
			КонецЕсли;
			
			СтрокаРП.КурсВзаиморасчетов = СтрокаРП_ИБ.Курс;
			СтрокаРП.КратностьВзаиморасчетов = СтрокаРП_ИБ.Кратность;
			СтрокаРП.РасчетыВУсловныхЕдиницах = СтрокаРП_ИБ.Договор.РасчетыВУсловныхЕдиницах;
			
			// ДокументРасчетов
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.Документ) И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
				
				ИмяПКО = ИмяПКОДляДокумента(СтрокаРП_ИБ.Документ);
				Если ИмяПКО <> "" Тогда
					СтрокаРП.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.Документ, ИмяПКО);
				КонецЕсли;
				
			КонецЕсли;
			
			Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьЗаказыКакСчетаНаОплату Тогда
				Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ)
					И ТипЗнч(СтрокаРП_ИБ.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					СтрокаРП.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.Заказ, "Документ_ЗаказПокупателя_Отправка");
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаРП_ИБ.СчетНаОплату)
					И ТипЗнч(СтрокаРП_ИБ.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплату") Тогда
					СтрокаРП.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.СчетНаОплату, "Документ_СчетНаОплатуПокупателю_Отправка");
				КонецЕсли;
			КонецЕсли;
			
			СтрокаРП.СпособПогашенияЗадолженности = СпособПогашенияЗадолженности(КомпонентыОбмена, СтрокаРП_ИБ);
			
			КодСчета = "";
			Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
				
				Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
					КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
				Иначе
					Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
						СчетУчета = ДанныеИБ.ДоговорКредитаЗайма.СчетУчета;
					Иначе
						СчетУчета = ДанныеИБ.Корреспонденция;
					КонецЕсли;
					ЭтоЗайм = АлгоритмКонвертации = "ВозвратЗаймаРаботником";
					СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ, СтрокаРП_ИБ.ТипСуммы, ЭтоЗайм);
					КодСчета = СтруктураСчета.КодСчета;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаРП.СчетУчетаРасчетовСКонтрагентом = КодСчета;		
			СтрокаРП.ВидРасчетовРасширенный = ВидРасчетовРасширенный(АлгоритмКонвертации, ДанныеИБ, СтрокаРП_ИБ);
			
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.Патент) Тогда
				СтрокаРП.Патент = СтрокаРП_ИБ.Патент;
			ИначеЕсли ЕстьПатентВШапке И ЗначениеЗаполнено(ДанныеИБ.Патент) Тогда
				СтрокаРП.Патент = ДанныеИБ.Патент;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		// Однострочная расшифровка платежа
		
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
		
		Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		    СтруктураДоговора = СтруктураДоговораКонтрагента(ДанныеИБ, ДанныеИБ.РасшифровкаПлатежа[0].Договор);
		    СтрокаРП.Договор = СтруктураДоговора;
			СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаДенежныхСредств;
			Если Не ЗначениеЗаполнено(СтрокаРП.ВалютаВзаиморасчетов) Тогда
				СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Договор.ВалютаРасчетов;
			КонецЕсли;
			СтрокаРП.КурсВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Курс;
			СтрокаРП.КратностьВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Кратность;
			СтрокаРП.РасчетыВУсловныхЕдиницах = ДанныеИБ.РасшифровкаПлатежа[0].Договор.РасчетыВУсловныхЕдиницах;
			
			КодСчета = "";
				
			Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
				КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
			Иначе
				Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
					СчетУчета = ДанныеИБ.ДоговорКредитаЗайма.СчетУчета;
				Иначе
					СчетУчета = ДанныеИБ.Корреспонденция;
				КонецЕсли;
				СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
				КодСчета = СтруктураСчета.КодСчета;
			КонецЕсли;
			СтрокаРП.СчетУчетаРасчетовСКонтрагентом = КодСчета;		
			
		КонецЕсли;
		
		Если ЕстьПатентВШапке И ЗначениеЗаполнено(ДанныеИБ.Патент) Тогда
			СтрокаРП.Патент = ДанныеИБ.Патент;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.10") Тогда
		ТабРП.Колонки.Удалить("Патент");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации)
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
	
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Заказ");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	ТабРП.Колонки.Добавить("ВидРасчетовРасширенный");
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	ТабРП.Колонки.Добавить("ДокументРасчетов");
	ТабРП.Колонки.Добавить("СпособПогашенияЗадолженности");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовПоАвансам");
	
	РП_ИБ = ДанныеИБ.РасшифровкаПлатежа.Выгрузить();
	
	Если АлгоритмКонвертации = "ОплатаПоставщику"
		Или АлгоритмКонвертации = "ВозвратОтПокупателя"
		Или АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам"
		Или АлгоритмКонвертации = "ВыдачаЗаймаРаботнику" Тогда
		
		// Многострочная расшифровка платежа.
	
		Для Каждого СтрокаРП_ИБ ИЗ РП_ИБ Цикл
			
			СтрокаРП = ТабРП.Добавить();
			СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
			СтрокаРП.Сумма = СтрокаРП_ИБ.СуммаПлатежа;
			СтрокаРП.СуммаВзаиморасчетов = СтрокаРП_ИБ.СуммаРасчетов;
			
			Если АлгоритмКонвертации = "ОплатаПоставщику"
				Или АлгоритмКонвертации = "ВозвратОтПокупателя" Тогда
				
				// Сумма НДС и СтавкаНДС
				СтрокаРП.СуммаНДС = СтрокаРП_ИБ.СуммаНДС;
				СтрокаРП.СтавкаНДС = СтавкаНДССтрокой_Отправка(СтрокаРП_ИБ.СтавкаНДС);
			КонецЕсли;
			
			Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам"
				ИЛИ АлгоритмКонвертации = "ВыдачаЗаймаРаботнику" Тогда
				СтрокаРП.Договор = СтруктураДоговораКредитаИЗайма(ДанныеИБ, ДанныеИБ.ДоговорКредитаЗайма);
			Иначе
				СтрокаРП.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, СтрокаРП_ИБ.Договор);
			КонецЕсли;
			
			СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаДенежныхСредств;
			СтрокаРП.КурсВзаиморасчетов = СтрокаРП_ИБ.Курс;
			СтрокаРП.КратностьВзаиморасчетов = СтрокаРП_ИБ.Кратность;
			СтрокаРП.РасчетыВУсловныхЕдиницах = СтрокаРП_ИБ.Договор.РасчетыВУсловныхЕдиницах;
			
			// ДокументРасчетов
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.Документ) И НЕ КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы Тогда
				
				ИмяПКО = ИмяПКОДляДокумента(СтрокаРП_ИБ.Документ);
				Если ИмяПКО = "Документ_ПередачаТоваровРеализация_Отправка" Тогда
				    ИмяПКО = "Документ_ПередачаТоваровПоступление_Отправка";
				КонецЕсли;
				
				Если ИмяПКО <> "" Тогда
					СтрокаРП.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.Документ, ИмяПКО);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.СчетНаОплату)
				И ТипЗнч(СтрокаРП_ИБ.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
				СтрокаРП.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.СчетНаОплату, "Документ_СчетНаОплатуПоставщика_Отправка");
			КонецЕсли;
					
			СтрокаРП.СпособПогашенияЗадолженности = СпособПогашенияЗадолженности(КомпонентыОбмена, СтрокаРП_ИБ);
			
			КодСчета = "";
			Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
				
				Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
					КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
				Иначе
					Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
						СчетУчета = ДанныеИБ.ДоговорКредитаЗайма.СчетУчета;
					Иначе
						СчетУчета = ДанныеИБ.Корреспонденция;
					КонецЕсли;
					ЭтоЗайм = АлгоритмКонвертации = "ВыдачаЗаймаРаботнику";
					СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ, СтрокаРП_ИБ.ТипСуммы, ЭтоЗайм);
					КодСчета = СтруктураСчета.КодСчета;
				КонецЕсли;
			КонецЕсли;
			СтрокаРП.СчетУчетаРасчетовСКонтрагентом = КодСчета;		
			СтрокаРП.ВидРасчетовРасширенный = ВидРасчетовРасширенный(АлгоритмКонвертации, ДанныеИБ, СтрокаРП_ИБ);
		КонецЦикла;
		
		
	Иначе
	
		// Однострочная расшифровка платежа
		
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.СтатьяДДС = ДанныеИБ.Статья;
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СуммаВзаиморасчетов = ДанныеИБ.СуммаДокумента;
		
		Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		    СтруктураДоговора = СтруктураДоговораКонтрагента(ДанныеИБ, ДанныеИБ.РасшифровкаПлатежа[0].Договор);
		    СтрокаРП.Договор = СтруктураДоговора;
			СтрокаРП.ВалютаВзаиморасчетов = ДанныеИБ.ВалютаДенежныхСредств;
			СтрокаРП.КурсВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Курс;
			СтрокаРП.КратностьВзаиморасчетов = ДанныеИБ.РасшифровкаПлатежа[0].Кратность;
			СтрокаРП.РасчетыВУсловныхЕдиницах = ДанныеИБ.РасшифровкаПлатежа[0].Договор.РасчетыВУсловныхЕдиницах;
			
			КодСчета = "";
				
			Если ЗначениеЗаполнено(ДанныеИБ.Статья.КорреспондирующийСчет) Тогда
				КодСчета = ДанныеИБ.Статья.КорреспондирующийСчет;
			Иначе
				Если АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам" Тогда
					СчетУчета = ДанныеИБ.ДоговорКредитаЗайма.СчетУчета;
				Иначе
					СчетУчета = ДанныеИБ.Корреспонденция;
				КонецЕсли;
				СтруктураСчета = БухгалтерскийСчетСубконтоПоСчетуУНФ(СчетУчета, ДанныеИБ);
				КодСчета = СтруктураСчета.КодСчета;
			КонецЕсли;
			СтрокаРП.СчетУчетаРасчетовСКонтрагентом = КодСчета;		
			
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ИмяПКОГруппа)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура_Отправка";
		ИмяПКОГруппа = "Справочник_НоменклатураГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		ИмяПКО = "Справочник_ЗначенияДопРеквизитов_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ИмяПКО = "Справочник_Банки";
		ИмяПКОГруппа = "Справочник_БанкиГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ИмяПКО = "Справочник_Договоры";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Организации") Тогда
		ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		ИмяПКОГруппа = "Справочник_ФизическиеЛицаГруппа";
	КонецЕсли;
КонецПроцедуры
Функция ДанныеДокументаАвансовыйОтчет(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетФактураПолученныйДокументыОснования.Ссылка.Контрагент КАК Поставщик,
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК СчетФактура,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаСФ,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерСФ,
		|	ИСТИНА КАК ПредъявленСФ
		|ПОМЕСТИТЬ Вт_СФ
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетВыданныеАвансы.Документ КАК ДокументАванса,
		|	АвансовыйОтчетВыданныеАвансы.Сумма КАК Сумма
		|ИЗ
		|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
		|ГДЕ
		|	АвансовыйОтчетВыданныеАвансы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	АвансовыйОтчетЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АвансовыйОтчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА АвансовыйОтчетЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ АвансовыйОтчетЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АвансовыйОтчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(АвансовыйОтчетЗапасы.Количество * АвансовыйОтчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ АвансовыйОтчетЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АвансовыйОтчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И АвансовыйОтчетЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(АвансовыйОтчетЗапасы.Цена / АвансовыйОтчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ АвансовыйОтчетЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	АвансовыйОтчетЗапасы.Сумма КАК Сумма,
		|	АвансовыйОтчетЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	АвансовыйОтчетЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА АвансовыйОтчетЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И АвансовыйОтчетЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	АвансовыйОтчетЗапасы.Всего КАК Всего,
		|	АвансовыйОтчетЗапасы.Характеристика КАК Характеристика,
		|	АвансовыйОтчетЗапасы.Партия КАК Партия,
		|	Вт_СФ.Поставщик КАК Поставщик,
		|	Вт_СФ.ПредъявленСФ КАК ПредъявленСФ,
		|	Вт_СФ.ДатаСФ КАК ДатаСФ,
		|	Вт_СФ.НомерСФ КАК НомерСФ,
		|	Вт_СФ.СчетФактура КАК СчетФактура,
		|	АвансовыйОтчетЗапасы.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	АвансовыйОтчетЗапасы.НомерВходящегоДокумента КАК НомерВходящегоДокумента
		|ИЗ
		|	Документ.АвансовыйОтчет.Запасы КАК АвансовыйОтчетЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_СФ КАК Вт_СФ
		|		ПО (ИСТИНА)
		|ГДЕ
		|	АвансовыйОтчетЗапасы.Ссылка = &Ссылка
		|	И АвансовыйОтчетЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетРасходы.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	АвансовыйОтчетРасходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	АвансовыйОтчетРасходы.Номенклатура КАК Номенклатура,
		|	АвансовыйОтчетРасходы.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	АвансовыйОтчетРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(АвансовыйОтчетРасходы.Содержание, 1, 10) = """"
		|			ТОГДА АвансовыйОтчетРасходы.Номенклатура.Наименование
		|		ИНАЧЕ АвансовыйОтчетРасходы.Содержание
		|	КОНЕЦ КАК Содержание,
		|	АвансовыйОтчетРасходы.СтавкаНДС КАК СтавкаНДС,
		|	АвансовыйОтчетРасходы.Сумма КАК Сумма,
		|	АвансовыйОтчетРасходы.СуммаНДС КАК СуммаНДС,
		|	АвансовыйОтчетРасходы.СтруктурнаяЕдиница КАК ПодразделениеЗатрат,
		|	Вт_СФ.Поставщик КАК Поставщик,
		|	Вт_СФ.ПредъявленСФ КАК ПредъявленСФ,
		|	Вт_СФ.ДатаСФ КАК ДатаСФ,
		|	Вт_СФ.НомерСФ КАК НомерСФ,
		|	Вт_СФ.СчетФактура КАК СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Расходы КАК АвансовыйОтчетРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_СФ КАК Вт_СФ
		|		ПО (ИСТИНА)
		|ГДЕ
		|	АвансовыйОтчетРасходы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АвансовыйОтчетОплаты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	АвансовыйОтчетОплаты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	АвансовыйОтчетОплаты.Контрагент КАК Контрагент,
		|	АвансовыйОтчетОплаты.Договор КАК ДоговорКонтрагента,
		|	АвансовыйОтчетОплаты.Кратность КАК КратностьВзаиморасчетов,
		|	АвансовыйОтчетОплаты.Курс КАК КурсВзаиморасчетов,
		|	АвансовыйОтчетОплаты.СуммаПлатежа КАК Сумма,
		|	АвансовыйОтчетОплаты.СуммаРасчетов КАК СуммаВзаиморасчетов,
		|	АвансовыйОтчетОплаты.ПризнакАванса КАК ПризнакАванса,
		|	АвансовыйОтчетОплаты.Документ КАК Документ
		|ИЗ
		|	Документ.АвансовыйОтчет.Оплаты КАК АвансовыйОтчетОплаты
		|ГДЕ
		|	АвансовыйОтчетОплаты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаАвансы = РезультатыЗапроса[1].Выгрузить();
		Результат.Вставить("ВыданныеАвансы", ТаблицаАвансы);
		
		ТаблицаТовары = РезультатыЗапроса[2].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТовары);
		Результат.Вставить("Товары", ТаблицаТовары);
		
		ТаблицаРасходы = РезультатыЗапроса[3].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаРасходы);
		Результат.Вставить("ПрочиеРасходы", ТаблицаРасходы);
		
		ТаблицаОплаты = РезультатыЗапроса[4].Выгрузить();
		Результат.Вставить("ОплатаПоставщикам", ТаблицаОплаты);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаАктВыполненныхРабот(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктВыполненныхРаботРаботыИУслуги.НомерСтроки КАК НомерСтрокиДокумента,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Количество * АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Цена / АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Цена
		|	КОНЕЦ КАК Цена,
		|	АктВыполненныхРаботРаботыИУслуги.Сумма,
		|	АктВыполненныхРаботРаботыИУслуги.СтавкаНДС,
		|	АктВыполненныхРаботРаботыИУслуги.СуммаНДС,
		|	ВЫБОР
		|		КОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.СчетУчетаЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
		|				И (АктВыполненныхРаботРаботыИУслуги.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
		|					ИЛИ АктВыполненныхРаботРаботыИУслуги.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроизводственныйРасход,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(АктВыполненныхРаботРаботыИУслуги.Содержание, 1, 100) = """"
		|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Содержание
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
		|ГДЕ
		|	АктВыполненныхРаботРаботыИУслуги.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктВыполненныхРаботПредоплата.Документ КАК Документ,
		|	АктВыполненныхРаботПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.АктВыполненныхРабот.Предоплата КАК АктВыполненныхРаботПредоплата
		|ГДЕ
		|	АктВыполненныхРаботПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаУслуги = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ПогашениеЗадолженности = Новый ТаблицаЗначений;
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		ПогашениеЗадолженности.Колонки.Добавить("Сумма");
			
		ВыборкаРасчеты = РезультатыЗапроса[1].Выбрать();
		Пока ВыборкаРасчеты.Следующий() Цикл
			ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
			Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
				ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
			СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
			СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		КонецЦикла;
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаВзаимозачет(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаимозачетДебитор.Договор КАК ДоговорКонтрагента,
	|	ВзаимозачетДебитор.Документ КАК Документ,
	|	ВзаимозачетДебитор.Заказ КАК Заказ,
	|	ВзаимозачетДебитор.Курс КАК Курс,
	|	ВзаимозачетДебитор.Кратность КАК Кратность,
	|	ВзаимозачетДебитор.ПризнакАванса КАК ПризнакАванса,
	|	ВзаимозачетДебитор.СуммаРасчетов КАК СуммаВзаиморасчетов,
	|	ВзаимозачетДебитор.СуммаУчета КАК СуммаУчета,
	|	ВзаимозачетДебитор.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	Документ.Взаимозачет.Дебитор КАК ВзаимозачетДебитор
	|ГДЕ
	|	ВзаимозачетДебитор.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимозачетКредитор.Договор КАК ДоговорКонтрагента,
	|	ВзаимозачетКредитор.Документ КАК Документ,
	|	ВзаимозачетКредитор.Заказ КАК Заказ,
	|	ВзаимозачетКредитор.Курс КАК Курс,
	|	ВзаимозачетКредитор.Кратность КАК Кратность,
	|	ВзаимозачетКредитор.ПризнакАванса КАК ПризнакАванса,
	|	ВзаимозачетКредитор.СуммаРасчетов КАК СуммаВзаиморасчетов,
	|	ВзаимозачетКредитор.СуммаУчета КАК СуммаУчета,
	|	ВзаимозачетКредитор.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	Документ.Взаимозачет.Кредитор КАК ВзаимозачетКредитор
	|ГДЕ
	|	ВзаимозачетКредитор.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимозачетКредитор.Договор КАК ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|	ВзаимозачетКредитор.Курс КАК Курс,
	|	ВзаимозачетКредитор.Кратность КАК Кратность,
	|	ЛОЖЬ КАК ПризнакАванса,
	|	ВзаимозачетКредитор.СуммаРасчетов КАК СуммаВзаиморасчетов,
	|	ВзаимозачетКредитор.СуммаУчета КАК СуммаУчета,
	|	НЕОПРЕДЕЛЕНО КАК СчетНаОплату
	|ИЗ
	|	Документ.Взаимозачет.ПрочиеРасчеты КАК ВзаимозачетКредитор
	|ГДЕ
	|	ВзаимозачетКредитор.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимозачетКредитор.Договор КАК ДоговорКонтрагента,
	|	ВзаимозачетКредитор.ДокументРасчетов КАК Документ,
	|	ВзаимозачетКредитор.Заказ КАК Заказ,
	|	ВзаимозачетКредитор.Курс КАК Курс,
	|	ВзаимозачетКредитор.Кратность КАК Кратность,
	|	ВзаимозачетКредитор.ПризнакАванса КАК ПризнакАванса,
	|	ВзаимозачетКредитор.СуммаРасчетов КАК СуммаВзаиморасчетов,
	|	ВзаимозачетКредитор.СуммаУчета КАК СуммаУчета,
	|	ВзаимозачетКредитор.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	Документ.Взаимозачет КАК ВзаимозачетКредитор
	|ГДЕ
	|	ВзаимозачетКредитор.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаДебитор = РезультатыЗапроса[0].Выгрузить();
	ПодготовитьТаблицуВзаимозачет(ДанныеИБ, ТаблицаДебитор);
	Результат.Вставить("ДебиторскаяЗадолженность", ТаблицаДебитор);
	
	ТаблицаКредитор = РезультатыЗапроса[1].Выгрузить();
	ПодготовитьТаблицуВзаимозачет(ДанныеИБ, ТаблицаКредитор);
	Результат.Вставить("КредиторскаяЗадолженность", ТаблицаКредитор);
	
	ТаблицаПрочиеРасчеты = РезультатыЗапроса[2].Выгрузить();
	ПодготовитьТаблицуВзаимозачет(ДанныеИБ, ТаблицаПрочиеРасчеты);
	Результат.Вставить("ПрочиеРасчеты", ТаблицаПрочиеРасчеты);
	
	ТаблицаПолучатель = РезультатыЗапроса[3].Выгрузить();
	ПодготовитьТаблицуВзаимозачет(ДанныеИБ, ТаблицаПолучатель);
	Результат.Вставить("РеквизитыПолучателя", ТаблицаПолучатель);
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	Если ТаблицаДебитор.Количество() > 0 И ЗначениеЗаполнено(ТаблицаДебитор[0].ДоговорКонтрагента.ВалютаРасчетов) Тогда 
		ВалютаДокумента = ТаблицаДебитор[0].ДоговорКонтрагента.ВалютаРасчетов;
	ИначеЕсли ТаблицаКредитор.Количество() > 0 И ЗначениеЗаполнено(ТаблицаКредитор[0].ДоговорКонтрагента.ВалютаРасчетов) Тогда
		ВалютаДокумента = ТаблицаКредитор[0].ДоговорКонтрагента.ВалютаРасчетов;
	Иначе
		ВалютаДокумента = НациональнаяВалюта;
	КонецЕсли;
	
	Результат.Вставить("Валюта", ВалютаДокумента);
	
	Если ВалютаДокумента = НациональнаяВалюта Тогда
		СуммаДтЗадолженности = ТаблицаДебитор.Итог("Сумма");
		СуммаКтЗадолженности = ТаблицаКредитор.Итог("Сумма");
	Иначе
		СуммаДтЗадолженности = ТаблицаДебитор.Итог("СуммаВзаиморасчетов");
		СуммаКтЗадолженности = ТаблицаКредитор.Итог("СуммаВзаиморасчетов");
	КонецЕсли;
	
	Результат.Вставить("СуммаДебиторскойЗадолженности", СуммаДтЗадолженности);
	Результат.Вставить("СуммаКредиторскойЗадолженности", СуммаКтЗадолженности);
	
	Результат.Вставить("КодСчета", БухгалтерскийСчетСубконтоПоСчетуУНФ(ДанныеИБ.Корреспонденция, ДанныеИБ).КодСчета);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаДополнительныеРасходы(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРасходыРасходы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ДополнительныеРасходыРасходы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДополнительныеРасходыРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ДополнительныеРасходыРасходы.Количество * ДополнительныеРасходыРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ДополнительныеРасходыРасходы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДополнительныеРасходыРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ДополнительныеРасходыРасходы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ДополнительныеРасходыРасходы.Цена / ДополнительныеРасходыРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ДополнительныеРасходыРасходы.Цена
		|	КОНЕЦ КАК Цена,
		|	ДополнительныеРасходыРасходы.Сумма,
		|	ДополнительныеРасходыРасходы.СтавкаНДС,
		|	ДополнительныеРасходыРасходы.СуммаНДС,
		|	ДополнительныеРасходыРасходы.Номенклатура.НаименованиеПолное КАК Содержание,
		|	ИСТИНА КАК ЭтоДопРасходы
		|ИЗ
		|	Документ.ДополнительныеРасходы.Расходы КАК ДополнительныеРасходыРасходы
		|ГДЕ
		|	ДополнительныеРасходыРасходы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеРасходыЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДополнительныеРасходыЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ДополнительныеРасходыЗапасы.Количество * ДополнительныеРасходыЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ДополнительныеРасходыЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ДополнительныеРасходыЗапасы.Всего КАК СтоимостьТоваров,
		|	ДополнительныеРасходыЗапасы.ДокументПоступления КАК ДокументПоступления,
		|	ДополнительныеРасходыЗапасы.СуммаРасходов КАК Сумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ДополнительныеРасходыЗапасы.Ссылка.СуммаВключаетНДС
		|				ТОГДА ДополнительныеРасходыЗапасы.СуммаРасходов - ДополнительныеРасходыЗапасы.СуммаРасходов / ((ДополнительныеРасходыЗапасы.СтавкаНДС.Ставка + 100) / 100)
		|			ИНАЧЕ ДополнительныеРасходыЗапасы.СуммаРасходов * ДополнительныеРасходыЗапасы.СтавкаНДС.Ставка / 100
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС
		|ИЗ
		|	Документ.ДополнительныеРасходы.Запасы КАК ДополнительныеРасходыЗапасы
		|ГДЕ
		|	ДополнительныеРасходыЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеРасходыПредоплата.Документ КАК Документ,
		|	ДополнительныеРасходыПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ДополнительныеРасходы.Предоплата КАК ДополнительныеРасходыПредоплата
		|ГДЕ
		|	ДополнительныеРасходыПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаУслуги = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Результат.Вставить("РасшифровкаДопРасходов", РезультатыЗапроса[1].Выгрузить());
		
		ПогашениеЗадолженности = Новый ТаблицаЗначений;
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		ПогашениеЗадолженности.Колонки.Добавить("Сумма");
			
		ВыборкаРасчеты = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаРасчеты.Следующий() Цикл
			ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
			Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
				ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
			СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
			СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		КонецЦикла;
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаЗаказНаПеремещение(ДанныеИБ)
	Результат = Новый Структура;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПеремещениеЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказНаПеремещениеЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ЗаказНаПеремещениеЗапасы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ЗаказНаПеремещениеЗапасы.Количество * ЗаказНаПеремещениеЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ЗаказНаПеремещениеЗапасы.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Запасы КАК ЗаказНаПеремещениеЗапасы
	|ГДЕ
	|	ЗаказНаПеремещениеЗапасы.Ссылка = &Ссылка
	|	И ЗаказНаПеремещениеЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|";
	
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатыЗапроса = Запрос.Выполнить();
	
	ТаблицаТоваров = РезультатыЗапроса.Выгрузить();
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаЗаказНаряд(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяРаботы.НомерСтроки,
		|	ЗаказПокупателяРаботы.Номенклатура,
		|	ЗаказПокупателяРаботы.Спецификация,
		|	ЗаказПокупателяРаботы.Количество,
		|	ЗаказПокупателяРаботы.Цена,
		|	ЗаказПокупателяРаботы.Сумма,
		|	ЗаказПокупателяРаботы.СтавкаНДС,
		|	ЗаказПокупателяРаботы.СуммаНДС,
		|	ЗаказПокупателяРаботы.Номенклатура.КатегорияНоменклатуры КАК НоменклатурнаяГруппа,
		|	ЗаказПокупателяРаботы.Содержание
		|ПОМЕСТИТЬ Вт_Работы
		|ИЗ
		|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
		|ГДЕ
		|	ЗаказПокупателяРаботы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяМатериалы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗаказПокупателяМатериалы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЗаказПокупателяМатериалы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяМатериалы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяМатериалы.Количество * ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяМатериалы.Количество
		|	КОНЕЦ КАК Количество,
		|	ПОДСТРОКА(ЗаказПокупателяМатериалы.НомерГТД.Код,1,30) КАК НомерГТДСтрокой,
		|	ЗаказПокупателяМатериалы.НомерГТД КАК НомерГТДСсылка,
		|	ЗаказПокупателяМатериалы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяМатериалы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ЗаказПокупателяМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЗаказПокупателяМатериалы.Характеристика,
		|	ЗаказПокупателяМатериалы.Партия,
		|	НЕОПРЕДЕЛЕНО КАК Заказчик
		|ИЗ
		|	Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателяМатериалы
		|ГДЕ
		|	ЗаказПокупателяМатериалы.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателяМатериалыЗаказчика.НомерСтроки,
		|	ЗаказПокупателяМатериалыЗаказчика.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЗаказПокупателяМатериалыЗаказчика.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяМатериалыЗаказчика.Количество * ЗаказПокупателяМатериалыЗаказчика.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяМатериалыЗаказчика.Количество
		|	КОНЕЦ,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)),
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
		|	ВЫРАЗИТЬ(""ДавальческиеСырьеИМатериалы"" КАК СТРОКА(27)),
		|	ЗаказПокупателяМатериалыЗаказчика.Характеристика,
		|	ЗаказПокупателяМатериалыЗаказчика.ДатаПоступления,
		|	ЗаказПокупателяМатериалыЗаказчика.Ссылка.Контрагент
		|ИЗ
		|	Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалыЗаказчика
		|ГДЕ
		|	ЗаказПокупателяМатериалыЗаказчика.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗаказПокупателяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Цена / ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ЗаказПокупателяЗапасы.Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС,
		|	ПОДСТРОКА(ЗаказПокупателяЗапасы.НомерГТД.Код,1,30) КАК НомерГТДСтрокой,
		|	ЗаказПокупателяЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	ЗаказПокупателяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ЗаказПокупателяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЗаказПокупателяЗапасы.Всего,
		|	ЗаказПокупателяЗапасы.Характеристика,
		|	ЗаказПокупателяЗапасы.Партия
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
		|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт_Работы.НомерСтроки КАК НомерСтрокиДокумента,
		|	Вт_Работы.Номенклатура,
		|	Вт_Работы.Количество КАК Количество,
		|	Вт_Работы.Цена КАК Цена,
		|	Вт_Работы.Сумма,
		|	Вт_Работы.СтавкаНДС,
		|	Вт_Работы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Вт_Работы.Содержание, 1, 100) = """"
		|			ТОГДА Вт_Работы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ Вт_Работы.Содержание
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Вт_Работы КАК Вт_Работы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки,
		|	ЗаказПокупателяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Цена / ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Цена
		|	КОНЕЦ,
		|	ЗаказПокупателяЗапасы.Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЗаказПокупателяЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Содержание
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
		|	И НЕ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяПредоплата.Документ КАК Документ,
		|	ЗаказПокупателяПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ЗаказПокупателя.Предоплата КАК ЗаказПокупателяПредоплата
		|ГДЕ
		|	ЗаказПокупателяПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		МассивТиповТовары = Новый Массив;
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		
		Запрос.УстановитьПараметр("МассивТиповТовары", МассивТиповТовары);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаМатериалы = РезультатыЗапроса[1].Выгрузить();
		Результат.Вставить("Материалы", ТаблицаМатериалы);
		
		ТаблицаТовары = РезультатыЗапроса[2].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТовары);
		Результат.Вставить("Товары", ТаблицаТовары);
		
		ТаблицаУслуги = РезультатыЗапроса[3].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ПогашениеЗадолженности = Новый ТаблицаЗначений;
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		ПогашениеЗадолженности.Колонки.Добавить("Сумма");
			
		ВыборкаРасчеты = РезультатыЗапроса[4].Выбрать();
		Пока ВыборкаРасчеты.Следующий() Цикл
			ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
			Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
				ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
			СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
			СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		КонецЦикла;
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаЗаказПокупателя(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Цена / ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ЗаказПокупателяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЗаказПокупателяЗапасы.Всего КАК Всего,
		|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
		|	ЗаказПокупателяЗапасы.Партия КАК Партия,
		|	ЗаказПокупателяЗапасы.Содержание КАК Содержание
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
		|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И (НЕ &ЕстьКП
		|			ИЛИ ЗаказПокупателяЗапасы.НомерВариантаКП = &НомерВариантаКП)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Цена / ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ЗаказПокупателяЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
		|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И (НЕ &ЕстьКП
		|			ИЛИ ЗаказПокупателяЗапасы.НомерВариантаКП = &НомерВариантаКП)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ЗаказПокупателя.НоменклатураДоставки,
		|	1,
		|	ЗаказПокупателя.СтоимостьДоставки,
		|	ЗаказПокупателя.СтоимостьДоставки,
		|	ЗаказПокупателя.СтавкаНДСДоставки,
		|	ЗаказПокупателя.СуммаНДСДоставки,
		|	ЗаказПокупателя.НоменклатураДоставки.НаименованиеПолное
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Ссылка
		|	И ЗаказПокупателя.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ЗаказПокупателя.СтоимостьДоставки > 0";
			
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		ЕстьКП = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу 
			И ДанныеИБ.КоличествоВариантовКП > 0;
		
		Запрос.УстановитьПараметр("ЕстьКП", ЕстьКП);
		Запрос.УстановитьПараметр("НомерВариантаКП", ДанныеИБ.ОсновнойВариантКП);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаИнвентаризацияЗапасов(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("РегВалюта", Константы.НациональнаяВалюта.Получить());
		Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУчета.Получить());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияЗапасовЗапасы.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ИнвентаризацияЗапасовЗапасы.Количество * ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ИнвентаризацияЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ИнвентаризацияЗапасовЗапасы.КоличествоУчет * ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ИнвентаризацияЗапасовЗапасы.КоличествоУчет
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоУчет,
		|	ВЫРАЗИТЬ(ИнвентаризацияЗапасовЗапасы.Сумма * ВЫБОР
		|			КОГДА &РегВалюта <> &УпрВалюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ / ВЫБОР
		|			КОГДА ИнвентаризацияЗапасовЗапасы.Количество = 0
		|				ТОГДА 1
		|			КОГДА ТИПЗНАЧЕНИЯ(ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ИнвентаризацияЗапасовЗапасы.Количество * ИнвентаризацияЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ИнвентаризацияЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ(ИнвентаризацияЗапасовЗапасы.Сумма * ВЫБОР
		|			КОГДА &РегВалюта <> &УпрВалюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ВЫРАЗИТЬ(ИнвентаризацияЗапасовЗапасы.СуммаУчет * ВЫБОР
		|			КОГДА &РегВалюта <> &УпрВалюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУчет,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ИнвентаризацияЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ИЗ
		|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасовЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ИнвентаризацияЗапасовЗапасы.Ссылка = &Ссылка";
		
		РезультатыЗапроса = Запрос.Выполнить();
		
		ТаблицаТоваров = РезультатыЗапроса.Выгрузить();
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаКомплектацияЗапасов(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
		|	СборкаЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И СборкаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА СборкаЗапасовЗапасы.Количество * СборкаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ СборкаЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ПОДСТРОКА(СборкаЗапасовЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
		|	СборкаЗапасовЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	СборкаЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА СборкаЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	СборкаЗапасовЗапасы.ДоляСтоимости КАК ДоляСтоимости
		|ИЗ
		|	Документ.КомплектацияЗапасов.Запасы КАК СборкаЗапасовЗапасы
		|ГДЕ
		|	СборкаЗапасовЗапасы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаТовары = РезультатЗапроса.Выгрузить(); 
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		
		Результат.Вставить("Товары", ТаблицаТовары);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаКорректировкаПоступления(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаПоступленияЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	КорректировкаПоступленияЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА КорректировкаПоступленияЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияЗапасы.Количество * КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияЗапасы.Цена / КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	КорректировкаПоступленияЗапасы.Сумма,
		|	КорректировкаПоступленияЗапасы.СтавкаНДС,
		|	КорректировкаПоступленияЗапасы.СуммаНДС,
		|	ПОДСТРОКА(КорректировкаПоступленияЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
		|	КорректировкаПоступленияЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТДДоИзменения,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхожденияДоИзменения,
		|	ВЫБОР
		|		КОГДА КорректировкаПоступленияЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
		|				И КорректировкаПоступленияЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И КорректировкаПоступленияЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	КорректировкаПоступленияЗапасы.Всего,
		|	КорректировкаПоступленияЗапасы.Характеристика,
		|	КорректировкаПоступленияЗапасы.Партия,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияЗапасы.КоличествоДоКорректировки * КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.КоличествоДоКорректировки
		|	КОНЕЦ КАК КоличествоДоКорректировки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияЗапасы.КоличествоДоИзменения * КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.КоличествоДоИзменения
		|	КОНЕЦ КАК КоличествоДоИзменения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияЗапасы.ЦенаДоКорректировки / КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.ЦенаДоКорректировки
		|	КОНЕЦ КАК ЦенаДоКорректировки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияЗапасы.ЦенаДоИзменения / КорректировкаПоступленияЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаПоступленияЗапасы.ЦенаДоИзменения
		|	КОНЕЦ КАК ЦенаДоИзменения,
		|	КорректировкаПоступленияЗапасы.СуммаДоКорректировки,
		|	КорректировкаПоступленияЗапасы.СуммаДоИзменения,
		|	КорректировкаПоступленияЗапасы.СтавкаНДСДоИзменения,
		|	КорректировкаПоступленияЗапасы.СуммаНДСДоКорректировки,
		|	КорректировкаПоступленияЗапасы.СуммаНДСДоИзменения,
		|	КорректировкаПоступленияЗапасы.ВсегоДоКорректировки,
		|	КорректировкаПоступленияЗапасы.ВсегоДоИзменения,
		|	КорректировкаПоступленияЗапасы.ЕстьВДокументеПоступления,
		|	ЕСТЬNULL(КорректировкаПоступленияЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	КорректировкаПоступленияЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	КорректировкаПоступленияЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	КорректировкаПоступленияЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.КорректировкаПоступления.Запасы КАК КорректировкаПоступленияЗапасы
		|ГДЕ
		|	КорректировкаПоступленияЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаПоступленияРасходы.НомерСтроки КАК НомерСтрокиДокумента,
		|	КорректировкаПоступленияРасходы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияРасходы.Количество * КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаПоступленияРасходы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияРасходы.Цена / КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаПоступленияРасходы.Цена
		|	КОНЕЦ КАК Цена,
		|	КорректировкаПоступленияРасходы.Сумма,
		|	КорректировкаПоступленияРасходы.СтавкаНДС,
		|	КорректировкаПоступленияРасходы.СуммаНДС,
		|	КорректировкаПоступленияРасходы.СтруктурнаяЕдиница КАК ПодразделениеЗатрат,
		|	ВЫБОР
		|		КОГДА КорректировкаПоступленияРасходы.Номенклатура.СчетУчетаЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
		|				И (КорректировкаПоступленияРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
		|					ИЛИ КорректировкаПоступленияРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроизводственныйРасход,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(КорректировкаПоступленияРасходы.Содержание, 1, 100) = """"
		|			ТОГДА КорректировкаПоступленияРасходы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание,
		|	ВЫБОР
		|		КОГДА КорректировкаПоступленияРасходы.Ссылка.ВключатьРасходыВСебестоимость
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоДопРасходы,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияРасходы.КоличествоДоКорректировки * КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаПоступленияРасходы.КоличествоДоКорректировки
		|	КОНЕЦ КАК КоличествоДоКорректировки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияРасходы.КоличествоДоИзменения * КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаПоступленияРасходы.КоличествоДоИзменения
		|	КОНЕЦ КАК КоличествоДоИзменения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияРасходы.ЦенаДоКорректировки / КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаПоступленияРасходы.ЦенаДоКорректировки
		|	КОНЕЦ КАК ЦенаДоКорректировки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаПоступленияРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаПоступленияРасходы.ЦенаДоИзменения / КорректировкаПоступленияРасходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаПоступленияРасходы.ЦенаДоИзменения
		|	КОНЕЦ КАК ЦенаДоИзменения,
		|	КорректировкаПоступленияРасходы.СуммаДоКорректировки,
		|	КорректировкаПоступленияРасходы.СуммаДоИзменения,
		|	КорректировкаПоступленияРасходы.СтавкаНДСДоИзменения,
		|	КорректировкаПоступленияРасходы.СуммаНДСДоКорректировки,
		|	КорректировкаПоступленияРасходы.СуммаНДСДоИзменения,
		|	КорректировкаПоступленияРасходы.ВсегоДоКорректировки,
		|	КорректировкаПоступленияРасходы.ВсегоДоИзменения,
		|	КорректировкаПоступленияРасходы.СодержаниеДоИзменения,
		|	КорректировкаПоступленияРасходы.ЕстьВДокументеПоступления
		|ИЗ
		|	Документ.КорректировкаПоступления.Расходы КАК КорректировкаПоступленияРасходы
		|ГДЕ
		|	КорректировкаПоступленияРасходы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
		|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
		|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.КорректировкаПоступления.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
		|ГДЕ
		|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДСКорректировка_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДСКорректировка_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаКорректировкаРеализации(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРеализацииЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	КорректировкаРеализацииЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА КорректировкаРеализацииЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Количество * КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Цена / КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	КорректировкаРеализацииЗапасы.Сумма,
		|	КорректировкаРеализацииЗапасы.СтавкаНДС,
		|	КорректировкаРеализацииЗапасы.СуммаНДС,
		|	ПОДСТРОКА(КорректировкаРеализацииЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
		|	КорректировкаРеализацииЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТДДоИзменения,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхожденияДоИзменения,
		|	ВЫБОР
		|		КОГДА КорректировкаРеализацииЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И КорректировкаРеализацииЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	КорректировкаРеализацииЗапасы.Всего,
		|	КорректировкаРеализацииЗапасы.Характеристика,
		|	КорректировкаРеализацииЗапасы.Партия,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.КоличествоДоКорректировки * КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.КоличествоДоКорректировки
		|	КОНЕЦ КАК КоличествоДоКорректировки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.КоличествоДоИзменения * КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.КоличествоДоИзменения
		|	КОНЕЦ КАК КоличествоДоИзменения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.ЦенаДоКорректировки / КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.ЦенаДоКорректировки
		|	КОНЕЦ КАК ЦенаДоКорректировки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.ЦенаДоИзменения / КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.ЦенаДоИзменения
		|	КОНЕЦ КАК ЦенаДоИзменения,
		|	КорректировкаРеализацииЗапасы.СуммаДоКорректировки,
		|	КорректировкаРеализацииЗапасы.СуммаДоИзменения,
		|	КорректировкаРеализацииЗапасы.СтавкаНДСДоИзменения,
		|	КорректировкаРеализацииЗапасы.СуммаНДСДоКорректировки,
		|	КорректировкаРеализацииЗапасы.СуммаНДСДоИзменения,
		|	КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации,
		|	КорректировкаРеализацииЗапасы.ВсегоДоКорректировки,
		|	КорректировкаРеализацииЗапасы.ВсегоДоИзменения,
		|	ЕСТЬNULL(КорректировкаРеализацииЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	КорректировкаРеализацииЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	КорректировкаРеализацииЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	КорректировкаРеализацииЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
		|ГДЕ
		|	КорректировкаРеализацииЗапасы.Ссылка = &Ссылка
		|	И КорректировкаРеализацииЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаРеализацииЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	КорректировкаРеализацииЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Количество * КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Цена / КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	КорректировкаРеализацииЗапасы.Сумма,
		|	КорректировкаРеализацииЗапасы.СтавкаНДС,
		|	КорректировкаРеализацииЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(КорректировкаРеализацииЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА КорректировкаРеализацииЗапасы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.КоличествоДоКорректировки * КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.КоличествоДоКорректировки
		|	КОНЕЦ КАК КоличествоДоКорректировки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.КоличествоДоИзменения * КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.КоличествоДоИзменения
		|	КОНЕЦ КАК КоличествоДоИзменения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.ЦенаДоКорректировки / КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.ЦенаДоКорректировки
		|	КОНЕЦ КАК ЦенаДоКорректировки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.ЦенаДоИзменения / КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ КорректировкаРеализацииЗапасы.ЦенаДоИзменения
		|	КОНЕЦ КАК ЦенаДоИзменения,
		|	КорректировкаРеализацииЗапасы.СуммаДоКорректировки,
		|	КорректировкаРеализацииЗапасы.СуммаДоИзменения,
		|	КорректировкаРеализацииЗапасы.СтавкаНДСДоИзменения,
		|	КорректировкаРеализацииЗапасы.СуммаНДСДоКорректировки,
		|	КорректировкаРеализацииЗапасы.СуммаНДСДоИзменения,
		|	КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации,
		|	КорректировкаРеализацииЗапасы.ВсегоДоКорректировки,
		|	КорректировкаРеализацииЗапасы.ВсегоДоИзменения,
		|	КорректировкаРеализацииЗапасы.СодержаниеДоИзменения
		|ИЗ
		|	Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
		|ГДЕ
		|	КорректировкаРеализацииЗапасы.Ссылка = &Ссылка
		|	И КорректировкаРеализацииЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
		|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
		|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.КорректировкаРеализации.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
		|ГДЕ
		|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДСКорректировка_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДСКорректировка_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаМаркировкаТоваровГИСМ(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ КАК Номенклатура,
	|	МаркировкаТоваровГИСМТовары.НоменклатураКиЗ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(МаркировкаТоваровГИСМТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18)) КАК ТипЗапасов,
	|	МаркировкаТоваровГИСМТовары.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	МаркировкаТоваровГИСМТовары.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	""44.01"" КАК СчетЗатрат
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ.Товары КАК МаркировкаТоваровГИСМТовары
	|ГДЕ
	|	МаркировкаТоваровГИСМТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаНачисленияПоКредитамИЗаймам(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияПоКредитамИЗаймамНачисления.НомерСтроки,
		|	НачисленияПоКредитамИЗаймамНачисления.Дата,
		|	ВЫБОР
		|		КОГДА НачисленияПоКредитамИЗаймамНачисления.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИЗаймов.Проценты)
		|			ТОГДА ""Проценты""
		|		ИНАЧЕ ""Комиссия""
		|	КОНЕЦ КАК ТипСуммыГрафика,
		|	НачисленияПоКредитамИЗаймамНачисления.Сотрудник,
		|	НачисленияПоКредитамИЗаймамНачисления.Контрагент КАК Кредитор,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма,
		|	НачисленияПоКредитамИЗаймамНачисления.Сумма,
		|	НачисленияПоКредитамИЗаймамНачисления.Сумма КАК СуммаВзаиморасчетов,
		|	НачисленияПоКредитамИЗаймамНачисления.ВалютаРасчетов КАК ВалютаВзаиморасчетов,
		|	НачисленияПоКредитамИЗаймамНачисления.ТипСуммы КАК ТипСуммы,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетУчета.ТипСчета КАК ТипСчета,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетУчета КАК СчетУчета,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетУчетаПроцентов КАК СчетУчетаПроцентов,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетУчетаКомиссии КАК СчетУчетаКомиссии,
		|	НачисленияПоКредитамИЗаймамНачисления.ДоговорКредитаЗайма.СчетЗатрат КАК СчетЗатрат
		|ИЗ
		|	Документ.НачисленияПоКредитамИЗаймам.Начисления КАК НачисленияПоКредитамИЗаймамНачисления
		|ГДЕ
		|	НачисленияПоКредитамИЗаймамНачисления.Ссылка = &Ссылка
		|	И (НачисленияПоКредитамИЗаймамНачисления.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИЗаймов.Проценты)
		|			ИЛИ НачисленияПоКредитамИЗаймамНачисления.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИЗаймов.Комиссия))";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаНачисления = РезультатЗапроса.Выгрузить();
		Результат.Вставить("Начисления", ТаблицаНачисления);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаОприходованиеЗапасов(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОприходованиеЗапасовЗапасы.Номенклатура,
		|	ОприходованиеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ОприходованиеЗапасовЗапасы.Количество * ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ ОприходованиеЗапасовЗапасы.Количество
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ОприходованиеЗапасовЗапасы.Сумма * ВЫБОР
		|		КОГДА &РегВалюта <> &УпрВалюта
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ / ВЫБОР
		|		КОГДА ОприходованиеЗапасовЗапасы.Количество = 0
		|			ТОГДА 1
		|		КОГДА ТИПЗНАЧЕНИЯ(ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ОприходованиеЗапасовЗапасы.Количество * ОприходованиеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ ОприходованиеЗапасовЗапасы.Количество
		|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ(ОприходованиеЗапасовЗапасы.Сумма * ВЫБОР
		|		КОГДА &РегВалюта <> &УпрВалюта
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ПОДСТРОКА(ОприходованиеЗапасовЗапасы.НомерГТД.Код,1,30) КАК НомерГТДСтрокой,
		|	ОприходованиеЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОприходованиеЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОприходованиеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЕСТЬNULL(ОприходованиеЗапасовЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	ОприходованиеЗапасовЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	ОприходованиеЗапасовЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ОприходованиеЗапасовЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.ОприходованиеЗапасов.Запасы КАК ОприходованиеЗапасовЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ОприходованиеЗапасовЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
		|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
		|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.ОприходованиеЗапасов.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
		|ГДЕ
		|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("РегВалюта", Константы.НациональнаяВалюта.Получить());
		Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУчета.Получить());
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		Результат.Вставить("Товары", ТаблицаТовары);
		
		ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаОтчетКомиссионера(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ОтчетКомиссионераЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ОтчетКомиссионераЗапасы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ОтчетКомиссионераЗапасы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ОтчетКомиссионераЗапасы.Количество * ОтчетКомиссионераЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ОтчетКомиссионераЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ОтчетКомиссионераЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|			ТОГДА ВЫРАЗИТЬ(ОтчетКомиссионераЗапасы.Цена / ОтчетКомиссионераЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ОтчетКомиссионераЗапасы.Цена
	|	КОНЕЦ КАК Цена,
	|	ОтчетКомиссионераЗапасы.Сумма КАК Сумма,
	|	ОтчетКомиссионераЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ОтчетКомиссионераЗапасы.СуммаНДС КАК СуммаНДС,
	|	ПОДСТРОКА(ОтчетКомиссионераЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
	|	ОтчетКомиссионераЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И ОтчетКомиссионераЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	ОтчетКомиссионераЗапасы.Всего КАК Всего,
	|	ОтчетКомиссионераЗапасы.Характеристика КАК Характеристика,
	|	ОтчетКомиссионераЗапасы.Партия КАК Партия,
	|	ОтчетКомиссионераЗапасы.ЦенаПередачи КАК ЦенаПередачи,
	|	ОтчетКомиссионераЗапасы.СуммаПередачи КАК СуммаПередачи,
	|	ОтчетКомиссионераЗапасы.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ОтчетКомиссионераЗапасы.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	ОтчетКомиссионераЗапасы.КлючСвязи + 1 КАК КлючСтроки,
	|	ЕСТЬNULL(ОтчетКомиссионераЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
	|	ОтчетКомиссионераЗапасы.НомерГТД КАК НомерГТДСсылка,
	|	ОтчетКомиссионераЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ОтчетКомиссионераЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОтчетКомиссионераПокупатели.ОтчетКомиссионера КАК ДокументРеализации
	|ИЗ
	|	Документ.ОтчетКомиссионера.Запасы КАК ОтчетКомиссионераЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера.Покупатели КАК ОтчетКомиссионераПокупатели
	|		ПО ОтчетКомиссионераЗапасы.Ссылка = ОтчетКомиссионераПокупатели.Ссылка
	|			И ОтчетКомиссионераЗапасы.КлючСвязи = ОтчетКомиссионераПокупатели.КлючСвязи
	|ГДЕ
	|	ОтчетКомиссионераЗапасы.Ссылка = &Ссылка
	|	И ОтчетКомиссионераЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ОтчетКомиссионераЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ОтчетКомиссионераЗапасы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ОтчетКомиссионераЗапасы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ВЫРАЗИТЬ(ОтчетКомиссионераЗапасы.Количество * ОтчетКомиссионераЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ ОтчетКомиссионераЗапасы.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ОтчетКомиссионераЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|			ТОГДА ВЫРАЗИТЬ(ОтчетКомиссионераЗапасы.Цена / ОтчетКомиссионераЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ОтчетКомиссионераЗапасы.Цена
	|	КОНЕЦ КАК Цена,
	|	ОтчетКомиссионераЗапасы.Сумма КАК Сумма,
	|	ОтчетКомиссионераЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ОтчетКомиссионераЗапасы.СуммаНДС КАК СуммаНДС,
	|	ПОДСТРОКА(ОтчетКомиссионераЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
	|	ОтчетКомиссионераЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И ОтчетКомиссионераЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	ОтчетКомиссионераЗапасы.Всего КАК Всего,
	|	ОтчетКомиссионераЗапасы.Характеристика КАК Характеристика,
	|	ОтчетКомиссионераЗапасы.Партия КАК Партия,
	|	ОтчетКомиссионераЗапасы.ЦенаПередачи КАК ЦенаПередачи,
	|	ОтчетКомиссионераЗапасы.СуммаПередачи КАК СуммаПередачи,
	|	ОтчетКомиссионераЗапасы.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ОтчетКомиссионераЗапасы.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	ОтчетКомиссионераЗапасы.КлючСвязи + 1 КАК КлючСтроки,
	|	ЕСТЬNULL(ОтчетКомиссионераЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
	|	ОтчетКомиссионераЗапасы.НомерГТД КАК НомерГТДСсылка,
	|	ОтчетКомиссионераЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ОтчетКомиссионераЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОтчетКомиссионераЗапасы.Себестоимость КАК Себестоимость,
	|	ОтчетКомиссионераПокупатели.ОтчетКомиссионера КАК ДокументРеализации
	|ИЗ
	|	Документ.ОтчетКомиссионера.ЗапасыВозвраты КАК ОтчетКомиссионераЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера.ПокупателиВозвраты КАК ОтчетКомиссионераПокупатели
	|		ПО ОтчетКомиссионераЗапасы.Ссылка = ОтчетКомиссионераПокупатели.Ссылка
	|			И ОтчетКомиссионераЗапасы.КлючСвязи = ОтчетКомиссионераПокупатели.КлючСвязи
	|ГДЕ
	|	ОтчетКомиссионераЗапасы.Ссылка = &Ссылка
	|	И ОтчетКомиссионераЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераПокупатели.НомерСтроки КАК НомерСтроки,
	|	ОтчетКомиссионераПокупатели.Покупатель КАК Покупатель,
	|	ОтчетКомиссионераПокупатели.ВыставленСФ КАК ВыставленСФ,
	|	ОтчетКомиссионераПокупатели.ДатаСФ КАК ДатаСФ,
	|	ОтчетКомиссионераПокупатели.СчетФактура.Номер КАК НомерСФ,
	|	ОтчетКомиссионераПокупатели.СчетФактура КАК СчетФактура,
	|	ОтчетКомиссионераПокупатели.КлючСвязи + 1 КАК КлючСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионера.Покупатели КАК ОтчетКомиссионераПокупатели
	|ГДЕ
	|	ОтчетКомиссионераПокупатели.Ссылка = &Ссылка
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераПокупатели.НомерСтроки КАК НомерСтроки,
	|	ОтчетКомиссионераПокупатели.Покупатель КАК Контрагент,
	|	ОтчетКомиссионераПокупатели.ВыставленСФ КАК ВыставленСФ,
	|	ОтчетКомиссионераПокупатели.ДатаСФ КАК ДатаСФ,
	|	ОтчетКомиссионераПокупатели.СчетФактура.Номер КАК НомерСФ,
	|	ОтчетКомиссионераПокупатели.СчетФактура КАК СчетФактура,
	|	ОтчетКомиссионераПокупатели.КлючСвязи + 1 КАК КлючСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионера.ПокупателиВозвраты КАК ОтчетКомиссионераПокупатели
	|ГДЕ
	|	ОтчетКомиссионераПокупатели.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераПредоплата.Документ КАК Документ,
	|	ОтчетКомиссионераПредоплата.СуммаРасчетов КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомиссионера.Предоплата КАК ОтчетКомиссионераПредоплата
	|ГДЕ
	|	ОтчетКомиссионераПредоплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
	|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
	|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионера.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
	|ГДЕ
	|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
	ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
	ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	ТаблицаТоваровВозвраты = РезультатыЗапроса[1].Выгрузить();
	ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваровВозвраты, ДанныеИБ.Ссылка);
	ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваровВозвраты);
	Результат.Вставить("ТоварыВозвраты", ТаблицаТоваровВозвраты);
	
	ТаблицаПокупатели = РезультатыЗапроса[2].Выгрузить();
	НайденныйСчетФактура = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ДанныеИБ.Ссылка, Истина);
	Если ТипЗнч(НайденныйСчетФактура) = Тип("Структура")
		И НайденныйСчетФактура.Свойство("Дата")
		И НайденныйСчетФактура.Свойство("Номер") Тогда
		ДатаСФПолученной = НайденныйСчетФактура.Дата;
		НомерСФПолученной = НайденныйСчетФактура.Номер;
	Иначе
		ДатаСФПолученной = Дата(1,1,1);
		НомерСФПолученной = "";
	КонецЕсли;
	ТаблицаПокупатели.ЗаполнитьЗначения(ДатаСФПолученной, "ДатаСФ");
	ТаблицаПокупатели.ЗаполнитьЗначения(НомерСФПолученной, "НомерСФ");
	
	Результат.Вставить("Покупатели", ТаблицаПокупатели);
	
	ТаблицаПокупателиВозвраты = РезультатыЗапроса[3].Выгрузить();
	НайденныйСчетФактура = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ДанныеИБ.Ссылка, Истина);
	Если ТипЗнч(НайденныйСчетФактура) = Тип("Структура")
		И НайденныйСчетФактура.Свойство("Дата")
		И НайденныйСчетФактура.Свойство("Номер") Тогда
		ДатаСФПолученной = НайденныйСчетФактура.Дата;
		НомерСФПолученной = НайденныйСчетФактура.Номер;
	Иначе
		ДатаСФПолученной = Дата(1,1,1);
		НомерСФПолученной = "";
	КонецЕсли;
	ТаблицаПокупателиВозвраты.ЗаполнитьЗначения(ДатаСФПолученной, "ДатаСФ");
	ТаблицаПокупателиВозвраты.ЗаполнитьЗначения(НомерСФПолученной, "НомерСФ");
	
	Результат.Вставить("ПокупателиВозвраты", ТаблицаПокупателиВозвраты);
	
	ПогашениеЗадолженности = Новый ТаблицаЗначений;
	ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
	ПогашениеЗадолженности.Колонки.Добавить("Сумма");
		
	ВыборкаРасчеты = РезультатыЗапроса[4].Выбрать();
	Пока ВыборкаРасчеты.Следующий() Цикл
		ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
		Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
			ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
		СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
		СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
	КонецЦикла;
	Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	
	ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаОтчетКомиссионераОСписании(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОСписанииЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ОтчетКомиссионераОСписанииЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераОСписанииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|			ТОГДА ОтчетКомиссионераОСписанииЗапасы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ОтчетКомиссионераОСписанииЗапасы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераОСписанииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				ТОГДА ОтчетКомиссионераОСписанииЗапасы.Количество * ОтчетКомиссионераОСписанииЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ОтчетКомиссионераОСписанииЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомиссионераОСписанииЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ОтчетКомиссионераОСписанииЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ОтчетКомиссионераОСписанииЗапасы.Цена / ОтчетКомиссионераОСписанииЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ОтчетКомиссионераОСписанииЗапасы.Цена
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ОтчетКомиссионераОСписанииЗапасы.Сумма КАК Сумма,
	|	ПОДСТРОКА(ОтчетКомиссионераОСписанииЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
	|	ОтчетКомиссионераОСписанииЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОСписанииЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И ОтчетКомиссионераОСписанииЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	ОтчетКомиссионераОСписанииЗапасы.Характеристика КАК Характеристика,
	|	ОтчетКомиссионераОСписанииЗапасы.Партия КАК Партия,
	|	""ПоФактическомуИспользованию"" КАК ВозвратПодДеятельность,
	|	ЕСТЬNULL(ОтчетКомиссионераОСписанииЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
	|	ОтчетКомиссионераОСписанииЗапасы.НомерГТД КАК НомерГТДСсылка,
	|	ОтчетКомиссионераОСписанииЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ОтчетКомиссионераОСписанииЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Запасы КАК ОтчетКомиссионераОСписанииЗапасы
	|ГДЕ
	|	ОтчетКомиссионераОСписанииЗапасы.Ссылка = &Ссылка
	|	И ОтчетКомиссионераОСписанииЗапасы.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
	|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
	|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
	|ГДЕ
	|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
	ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
	
	Результат = Новый Структура();
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаОтчетКомитента(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетКомитентуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетКомитентуЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомитентуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетКомитентуЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетКомитентуЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомитентуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетКомитентуЗапасы.Количество * ОтчетКомитентуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетКомитентуЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетКомитентуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетКомитентуЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетКомитентуЗапасы.Цена / ОтчетКомитентуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетКомитентуЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетКомитентуЗапасы.Сумма,
		|	ОтчетКомитентуЗапасы.СтавкаНДС,
		|	ОтчетКомитентуЗапасы.СуммаНДС,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОтчетКомитентуЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетКомитентуЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ОтчетКомитентуЗапасы.Всего,
		|	ОтчетКомитентуЗапасы.Характеристика,
		|	ОтчетКомитентуЗапасы.Партия,
		|	ОтчетКомитентуЗапасы.ЦенаПоступления,
		|	ОтчетКомитентуЗапасы.СуммаПоступления,
		|	ОтчетКомитентуЗапасы.СуммаВознаграждения,
		|	ОтчетКомитентуЗапасы.СуммаНДСВознаграждения,
		|	ОтчетКомитентуЗапасы.Покупатель,
		|	ОтчетКомитентуЗапасы.ДатаРеализации
		|ИЗ
		|	Документ.ОтчетКомитенту.Запасы КАК ОтчетКомитентуЗапасы
		|ГДЕ
		|	ОтчетКомитентуЗапасы.Ссылка = &Ссылка
		|	И (ОтчетКомитентуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ИЛИ ОтчетКомитентуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаТоваров = РезультатЗапроса.Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаОтчетОПереработке(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОПереработкеПродукция.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОПереработкеПродукция.Номенклатура,
		|	ОтчетОПереработкеПродукция.Характеристика,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетОПереработкеПродукция.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетОПереработкеПродукция.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОПереработкеПродукция.Количество * ОтчетОПереработкеПродукция.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОПереработкеПродукция.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетОПереработкеПродукция.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОПереработкеПродукция.Цена / ОтчетОПереработкеПродукция.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетОПереработкеПродукция.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетОПереработкеПродукция.Сумма,
		|	ОтчетОПереработкеПродукция.СтавкаНДС,
		|	ОтчетОПереработкеПродукция.СуммаНДС,
		|	ОтчетОПереработкеПродукция.Номенклатура.НаименованиеПолное КАК Содержание,
		|	""СобственныеТовары"" КАК ТипЗапасов
		|ИЗ
		|	Документ.ОтчетОПереработке.Продукция КАК ОтчетОПереработкеПродукция
		|ГДЕ
		|	ОтчетОПереработкеПродукция.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОПереработкеЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОПереработкеЗапасы.Номенклатура,
		|	ОтчетОПереработкеЗапасы.Характеристика,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетОПереработкеЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетОПереработкеЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОПереработкеЗапасы.Количество * ОтчетОПереработкеЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОПереработкеЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОтчетОПереработкеЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетОПереработкеЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
		|			ТОГДА ""ДавальческиеСырьеИМатериалы""
		|		ИНАЧЕ ""СобственныеТовары""
		|	КОНЕЦ КАК ТипЗапасов,
		|	ОтчетОПереработкеЗапасы.Ссылка.Контрагент КАК Заказчик
		|ИЗ
		|	Документ.ОтчетОПереработке.Запасы КАК ОтчетОПереработкеЗапасы
		|ГДЕ
		|	ОтчетОПереработкеЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОПереработкеЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОПереработкеЗапасы.Номенклатура,
		|	ОтчетОПереработкеЗапасы.Характеристика,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетОПереработкеЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетОПереработкеЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОПереработкеЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОПереработкеЗапасы.Количество * ОтчетОПереработкеЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОПереработкеЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	""ДавальческиеСырьеИМатериалы"" КАК ТипЗапасов
		|ИЗ
		|	Документ.ОтчетОПереработке.Запасы КАК ОтчетОПереработкеЗапасы
		|ГДЕ
		|	ОтчетОПереработкеЗапасы.Ссылка = &Ссылка
		|	И ОтчетОПереработкеЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОПереработкеПредоплата.Документ КАК Документ,
		|	ОтчетОПереработкеПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ОтчетОПереработке.Предоплата КАК ОтчетОПереработкеПредоплата
		|ГДЕ
		|	ОтчетОПереработкеПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаУслуги = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ТаблицаМатериалы = РезультатыЗапроса[1].Выгрузить();
		Результат.Вставить("Материалы", ТаблицаМатериалы);
		
		ТаблицаМатериалыЗаказчика = РезультатыЗапроса[2].Выгрузить();
		Результат.Вставить("МатериалыЗаказчика", ТаблицаМатериалыЗаказчика);
		
		ПогашениеЗадолженности = Новый ТаблицаЗначений;
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		ПогашениеЗадолженности.Колонки.Добавить("Сумма");
			
		ВыборкаРасчеты = РезультатыЗапроса[3].Выбрать();
		Пока ВыборкаРасчеты.Следующий() Цикл
			ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
			Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
				ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
			СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
			СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		КонецЦикла;
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаОтчетПереработчика(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетПереработчикаПродукция.Номенклатура,
		|	ОтчетПереработчикаПродукция.Характеристика,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетПереработчикаПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетПереработчикаПродукция.Количество * ОтчетПереработчикаПродукция.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетПереработчикаПродукция.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетПереработчикаПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетПереработчикаПродукция.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетПереработчикаПродукция.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ОтчетПереработчикаПродукция.Спецификация
		|ИЗ
		|	Документ.ОтчетПереработчика.Продукция КАК ОтчетПереработчикаПродукция
		|ГДЕ
		|	ОтчетПереработчикаПродукция.Ссылка = &Ссылка
		|	И ОтчетПереработчикаПродукция.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ОтчетПереработчикаПродукция.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетПереработчика.Расход КАК Номенклатура,
		|	ОтчетПереработчика.Сумма КАК Сумма,
		|	ОтчетПереработчика.СтавкаНДС КАК СтавкаНДС,
		|	ОтчетПереработчика.СуммаНДС КАК СуммаНДС,
		|	1 КАК Количество,
		|	ОтчетПереработчика.Сумма КАК Цена,
		|	ОтчетПереработчика.Расход.НаименованиеПолное КАК Содержание
		|ИЗ
		|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
		|ГДЕ
		|	ОтчетПереработчика.Ссылка = &Ссылка
		|	И ОтчетПереработчика.Расход <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ОтчетПереработчика.Сумма > 0
		|	И НЕ &УслугиВТЧ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтчетПереработчика.Расход,
		|	ОтчетПереработчика.Сумма,
		|	ОтчетПереработчика.СтавкаНДС,
		|	ОтчетПереработчика.СуммаНДС,
		|	1,
		|	ОтчетПереработчика.Сумма,
		|	ОтчетПереработчика.Расход.НаименованиеПолное
		|ИЗ
		|	Документ.ОтчетПереработчика.Расходы КАК ОтчетПереработчика
		|ГДЕ
		|	ОтчетПереработчика.Ссылка = &Ссылка
		|	И ОтчетПереработчика.Расход <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ОтчетПереработчика.Сумма > 0
		|	И &УслугиВТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетПереработчикаЗапасы.Номенклатура,
		|	ОтчетПереработчикаЗапасы.Характеристика,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетПереработчикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетПереработчикаЗапасы.Количество * ОтчетПереработчикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетПереработчикаЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетПереработчикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетПереработчикаЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетПереработчикаЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ОтчетПереработчикаЗапасы.Спецификация,
		|	ВЫБОР
		|		КОГДА ОтчетПереработчикаЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетПереработчикаЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ОтчетПереработчикаЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	ПОДСТРОКА(ОтчетПереработчикаЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
		|	ОтчетПереработчикаЗапасы.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	Документ.ОтчетПереработчика.Запасы КАК ОтчетПереработчикаЗапасы
		|ГДЕ
		|	ОтчетПереработчикаЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетПереработчикаПредоплата.Документ КАК Документ,
		|	ОтчетПереработчикаПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ОтчетПереработчика.Предоплата КАК ОтчетПереработчикаПредоплата
		|ГДЕ
		|	ОтчетПереработчикаПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("УслугиВТЧ", ДанныеИБ.Расходы.Количество() > 0);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаПродукция = РезультатыЗапроса[0].Выгрузить();
		Результат.Вставить("Продукция", ТаблицаПродукция);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ТаблицаМатериалы = РезультатыЗапроса[2].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаМатериалы, ДанныеИБ.Ссылка);
		Результат.Вставить("Материалы", ТаблицаМатериалы);
		
		ПогашениеЗадолженности = Новый ТаблицаЗначений;
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		ПогашениеЗадолженности.Колонки.Добавить("Сумма");
			
		ВыборкаРасчеты = РезультатыЗапроса[3].Выбрать();
		Пока ВыборкаРасчеты.Следующий() Цикл
			ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
			Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
				ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
			СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
			СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		КонецЦикла;
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаПередачаТоваров(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Количество * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена / РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма,
		|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ПОДСТРОКА(РасходнаяНакладнаяЗапасы.НомерГТД.Код,1,30) КАК НомерГТДСтрокой,
		|	РасходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА РасходнаяНакладнаяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И РасходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	РасходнаяНакладнаяЗапасы.Всего КАК Всего,
		|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
		|	РасходнаяНакладнаяЗапасы.Партия КАК Партия
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Количество * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена / РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма,
		|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(РасходнаяНакладнаяЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Содержание
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И НЕ РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходнаяНакладнаяПредоплата.Документ КАК Документ,
		|	РасходнаяНакладнаяПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Предоплата КАК РасходнаяНакладнаяПредоплата
		|ГДЕ
		|	РасходнаяНакладнаяПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		МассивТиповТовары = Новый Массив;
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		
		Запрос.УстановитьПараметр("МассивТиповТовары", МассивТиповТовары);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ПогашениеЗадолженности = Новый ТаблицаЗначений;
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		ПогашениеЗадолженности.Колонки.Добавить("Сумма");
			
		ВыборкаРасчеты = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаРасчеты.Следующий() Цикл
			ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
			Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
				ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
			СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
			СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		КонецЦикла;
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаПередачаТоваровПоступление(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Количество * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена / РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма,
		|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ПОДСТРОКА(РасходнаяНакладнаяЗапасы.НомерГТД.Код,1,30) КАК НомерГТДСтрокой,
		|	РасходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА РасходнаяНакладнаяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И РасходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	РасходнаяНакладнаяЗапасы.Всего КАК Всего,
		|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
		|	РасходнаяНакладнаяЗапасы.Партия КАК Партия
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Количество * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена / РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма,
		|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(РасходнаяНакладнаяЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Содержание
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И НЕ РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходнаяНакладнаяПредоплата.Документ КАК Документ,
		|	РасходнаяНакладнаяПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями.Предоплата КАК РасходнаяНакладнаяПредоплата
		|ГДЕ
		|	РасходнаяНакладнаяПредоплата.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		МассивТиповТовары = Новый Массив;
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		
		Запрос.УстановитьПараметр("МассивТиповТовары", МассивТиповТовары);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ПогашениеЗадолженности = Новый ТаблицаЗначений;
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		ПогашениеЗадолженности.Колонки.Добавить("Сумма");
			
		ВыборкаРасчеты = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаРасчеты.Следующий() Цикл
			ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
			Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
				ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
			СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
			СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		КонецЦикла;
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
	
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаПеремещениеЗапасов(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовЗапасы.Количество * ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫБОР
	|		КОГДА ПеремещениеЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И ПеремещениеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|		КОГДА ПеремещениеЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И ПеремещениеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ВЫРАЗИТЬ(""ДавальческиеСырьеИМатериалы"" КАК СТРОКА(27))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	ПОДСТРОКА(ПеремещениеЗапасовЗапасы.НомерГТД.Код,1,30) КАК НомерГТДСтрокой,
	|	ПеремещениеЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПолучатель КАК ПодразделениеЗатрат,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ПеремещениеЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И ПеремещениеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ПеремещениеЗапасовЗапасы.Партия.ВладелецПартии
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Заказчик,
	|	ПеремещениеЗапасовЗапасы.Характеристика КАК Характеристика,
	|	ПеремещениеЗапасовЗапасы.Партия КАК Партия,
	|	ЕСТЬNULL(ПеремещениеЗапасовЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
	|	ПеремещениеЗапасовЗапасы.НомерГТД КАК НомерГТДСсылка,
	|	ПеремещениеЗапасовЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ПеремещениеЗапасовЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
	|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
	|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПеремещениеЗапасов.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
	|ГДЕ
	|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
	ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
	ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
	Результат.Вставить("Товары", ТаблицаТовары);
	
	ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПеремещениеЗапасов_ВЭксплуатацию(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовЗапасы.Количество * ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА) КАК ТипЗапасов,
	|	1 КАК СрокЭксплуатации,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПолучатель.МОЛ КАК ФизическоеЛицо,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СчетЗатрат.Наименование КАК НаименованиеНазначенияИспользования,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СчетЗатрат.Наименование КАК НаименованиеСпособаОтраженияРасходов,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеЗапасовСпецоснастка.Номенклатура,
	|	ПеремещениеЗапасовСпецоснастка.Номенклатура.ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовСпецоснастка.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовСпецоснастка.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовСпецоснастка.Количество * ПеремещениеЗапасовСпецоснастка.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовСпецоснастка.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)),
	|	ВЫРАЗИТЬ(""СпецоснасткаИСпецодеждаНаСкладе"" КАК СТРОКА),
	|	1,
	|	ПеремещениеЗапасовСпецоснастка.Ссылка.СтруктурнаяЕдиницаПолучатель.МОЛ,
	|	ПеремещениеЗапасовСпецоснастка.Ссылка.СчетЗатрат.Наименование,
	|	ПеремещениеЗапасовСпецоснастка.Ссылка.СчетЗатрат.Наименование,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА),
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Спецоснастка КАК ПеремещениеЗапасовСпецоснастка
	|ГДЕ
	|	ПеремещениеЗапасовСпецоснастка.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Номенклатура,
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Номенклатура.ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Количество * ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)),
	|	ВЫРАЗИТЬ(""ИнвентарьИХозяйственныеПринадлежности"" КАК СТРОКА),
	|	1,
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Ссылка.СтруктурнаяЕдиницаПолучатель.МОЛ,
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Ссылка.СчетЗатрат.Наименование,
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Ссылка.СчетЗатрат.Наименование,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА),
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|ИЗ
	|	Документ.ПеремещениеЗапасов.ИнвентарьИХозяйственныеПринадлежности КАК ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности
	|ГДЕ
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПеремещениеЗапасов_ИзЭксплуатации(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовЗапасы.Количество * ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.МОЛ КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА) КАК ТипЗапасов,
	|	ПеремещениеЗапасовЗапасы.Ссылка.Дата КАК Дата,
	|	ПеремещениеЗапасовЗапасы.НомерГТД КАК НомерГТД,
	|	ПеремещениеЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ Вт_Спецодежда
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеЗапасовСпецоснастка.Номенклатура,
	|	ПеремещениеЗапасовСпецоснастка.Номенклатура.ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовСпецоснастка.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовСпецоснастка.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовСпецоснастка.Количество * ПеремещениеЗапасовСпецоснастка.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовСпецоснастка.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)),
	|	ПеремещениеЗапасовСпецоснастка.Ссылка.СтруктурнаяЕдиница,
	|	ПеремещениеЗапасовСпецоснастка.Ссылка.СтруктурнаяЕдиница.МОЛ,
	|	ВЫРАЗИТЬ(""СпецоснасткаИСпецодеждаНаСкладе"" КАК СТРОКА),
	|	ПеремещениеЗапасовСпецоснастка.Ссылка.Дата,
	|	ПеремещениеЗапасовСпецоснастка.НомерГТД,
	|	ПеремещениеЗапасовСпецоснастка.СтранаПроисхождения
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Спецоснастка КАК ПеремещениеЗапасовСпецоснастка
	|ГДЕ
	|	ПеремещениеЗапасовСпецоснастка.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Номенклатура,
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Номенклатура.ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Количество * ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)),
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Ссылка.СтруктурнаяЕдиница,
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Ссылка.СтруктурнаяЕдиница.МОЛ,
	|	ВЫРАЗИТЬ(""ИнвентарьИХозяйственныеПринадлежности"" КАК СТРОКА),
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Ссылка.Дата,
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.НомерГТД,
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.СтранаПроисхождения
	|ИЗ
	|	Документ.ПеремещениеЗапасов.ИнвентарьИХозяйственныеПринадлежности КАК ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности
	|ГДЕ
	|	ПеремещениеЗапасовИнвентарьИХозяйственныеПринадлежности.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Спецодежда.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ПеремещениеЗапасовЗапасы.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ Вт_ДокументыПередачи
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_Спецодежда КАК Вт_Спецодежда
	|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = Вт_Спецодежда.Номенклатура
	|			И ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПолучатель = Вт_Спецодежда.СтруктурнаяЕдиница
	|			И (ПеремещениеЗапасовЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию))
	|			И ПеремещениеЗапасовЗапасы.Ссылка.Дата <= Вт_Спецодежда.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Спецодежда.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Спецодежда.Номенклатура КАК Номенклатура,
	|	Вт_Спецодежда.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Вт_Спецодежда.Количество КАК Количество,
	|	1 КАК СрокЭксплуатации,
	|	Вт_Спецодежда.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вт_ДокументыПередачи.Ссылка.СчетЗатрат.Наименование КАК НаименованиеНазначенияИспользования,
	|	Вт_ДокументыПередачи.Ссылка.СчетЗатрат.Наименование КАК НаименованиеСпособаОтраженияРасходов,
	|	Вт_Спецодежда.НомерГТД КАК НомерГТД,
	|	Вт_Спецодежда.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЕСТЬNULL(Вт_ДокументыПередачи.Ссылка, НЕОПРЕДЕЛЕНО) КАК ДокументПередачи,
	|	Вт_Спецодежда.ТипЗапасов КАК ТипЗапасов
	|ИЗ
	|	Вт_Спецодежда КАК Вт_Спецодежда
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ДокументыПередачи КАК Вт_ДокументыПередачи
	|		ПО Вт_Спецодежда.Номенклатура = Вт_ДокументыПередачи.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПереоценкаВРозницеСуммовойУчет(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ПереоценкаВРозницеСуммовойУчетЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ПереоценкаВРозницеСуммовойУчетЗапасы.Количество * ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ПереоценкаВРозницеСуммовойУчетЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ПереоценкаВРозницеСуммовойУчетЗапасы.Цена / ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ПереоценкаВРозницеСуммовойУчетЗапасы.Цена
		|	КОНЕЦ КАК ЦенаВРозницеСтарая,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Сумма,
		|	ВЫБОР
		|		КОГДА ПереоценкаВРозницеСуммовойУчетЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ПереоценкаВРозницеСуммовойУчетЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Характеристика,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Партия,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ПереоценкаВРозницеСуммовойУчетЗапасы.НоваяЦена / ПереоценкаВРозницеСуммовойУчетЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ПереоценкаВРозницеСуммовойУчетЗапасы.НоваяЦена
		|	КОНЕЦ КАК ЦенаВРознице,
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Сумма КАК СуммаПереоценки
		|ИЗ
		|	Документ.ПереоценкаВРозницеСуммовойУчет.Запасы КАК ПереоценкаВРозницеСуммовойУчетЗапасы
		|ГДЕ
		|	ПереоценкаВРозницеСуммовойУчетЗапасы.Ссылка = &Ссылка
		|	И ПереоценкаВРозницеСуммовойУчетЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаТоваров = РезультатЗапроса.Выгрузить();
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаПересортицаЗапасов(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПересортицаЗапасовЗапасы.НоменклатураОприходование КАК НоменклатураОприходование,
		|	ПересортицаЗапасовЗапасы.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
		|	ПересортицаЗапасовЗапасы.ЕдиницаИзмеренияОприходование КАК ЕдиницаИзмеренияОприходование,
		|	ПересортицаЗапасовЗапасы.СтранаПроисхожденияОприходование КАК СтранаПроисхожденияОприходование,
		|	ПересортицаЗапасовЗапасы.НомерГТДОприходование КАК НомерГТДОприходование,
		|	ПересортицаЗапасовЗапасы.ПартияОприходование КАК ПартияОприходование,
		|	ПересортицаЗапасовЗапасы.Количество КАК Количество,
		|	ПересортицаЗапасовЗапасы.Цена КАК Цена,
		|	ПересортицаЗапасовЗапасы.Сумма КАК Сумма,
		|	ПересортицаЗапасовЗапасы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Вт_ДанныеОприходования
		|ИЗ
		|	Документ.ПересортицаЗапасов.Запасы КАК ПересортицаЗапасовЗапасы
		|ГДЕ
		|	ПересортицаЗапасовЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересортицаЗапасовЗапасы.НоменклатураОприходование КАК Номенклатура,
		|	ПересортицаЗапасовЗапасы.НоменклатураОприходование.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПересортицаЗапасовЗапасы.ЕдиницаИзмеренияОприходование) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ПересортицаЗапасовЗапасы.ЕдиницаИзмеренияОприходование.Коэффициент > 0
		|				ТОГДА ПересортицаЗапасовЗапасы.Количество * ПересортицаЗапасовЗапасы.ЕдиницаИзмеренияОприходование.Коэффициент
		|			ИНАЧЕ ПересортицаЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ПересортицаЗапасовЗапасы.Сумма * ВЫБОР
		|			КОГДА &РегВалюта <> &УпрВалюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ / ВЫБОР
		|			КОГДА ПересортицаЗапасовЗапасы.Количество = 0
		|				ТОГДА 1
		|			КОГДА ТИПЗНАЧЕНИЯ(ПересортицаЗапасовЗапасы.ЕдиницаИзмеренияОприходование) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ПересортицаЗапасовЗапасы.ЕдиницаИзмеренияОприходование.Коэффициент > 0
		|				ТОГДА ПересортицаЗапасовЗапасы.Количество * ПересортицаЗапасовЗапасы.ЕдиницаИзмеренияОприходование.Коэффициент
		|			ИНАЧЕ ПересортицаЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ(ПересортицаЗапасовЗапасы.Сумма * ВЫБОР
		|			КОГДА &РегВалюта <> &УпрВалюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ПОДСТРОКА(ПересортицаЗапасовЗапасы.НомерГТДОприходование.Код, 1, 30) КАК НомерГТДСтрокой,
		|	ПересортицаЗапасовЗапасы.НомерГТДОприходование КАК НомерГТДСсылка,
		|	ПересортицаЗапасовЗапасы.СтранаПроисхожденияОприходование КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ПересортицаЗапасовЗапасы.ПартияОприходование <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ПересортицаЗапасовЗапасы.ПартияОприходование.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ИЗ
		|	Вт_ДанныеОприходования КАК ПересортицаЗапасовЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ПересортицаЗапасовЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересортицаЗапасовЗапасы.Номенклатура КАК Номенклатура,
		|	ПересортицаЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПересортицаЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ПересортицаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ПересортицаЗапасовЗапасы.Количество * ПересортицаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПересортицаЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ПОДСТРОКА(ПересортицаЗапасовЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
		|	ПересортицаЗапасовЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	ПересортицаЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ПересортицаЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ПересортицаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов
		|ИЗ
		|	Документ.ПересортицаЗапасов.Запасы КАК ПересортицаЗапасовЗапасы
		|ГДЕ
		|	ПересортицаЗапасовЗапасы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("РегВалюта", Константы.НациональнаяВалюта.Получить());
		Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУчета.Получить());
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаТоварыОприходование = МассивРезультатов[1].Выгрузить();
		ТаблицаТоварыСписание = МассивРезультатов[2].Выгрузить();
		
		Результат.Вставить("ТоварыОприходование", ТаблицаТоварыОприходование);
		Результат.Вставить("ТоварыСписание", ТаблицаТоварыСписание);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаПриходнаяНакладная(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ПриходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ПриходнаяНакладнаяЗапасы.Цена / ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Цена
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ПриходнаяНакладнаяЗапасы.Сумма,
		|	ПриходнаяНакладнаяЗапасы.СтавкаНДС,
		|	ПриходнаяНакладнаяЗапасы.СуммаНДС,
		|	ПОДСТРОКА(ПриходнаяНакладнаяЗапасы.НомерГТД.Код,1,30) КАК НомерГТДСтрокой,
		|	ПриходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
		|				И ПриходнаяНакладнаяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ПриходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ПриходнаяНакладнаяЗапасы.Всего,
		|	ПриходнаяНакладнаяЗапасы.Характеристика,
		|	ПриходнаяНакладнаяЗапасы.Партия,
		|	""ПоФактическомуИспользованию"" КАК ВозвратПодДеятельность,
		|	ПриходнаяНакладнаяЗапасы.Себестоимость КАК Себестоимость,
		|	ЕСТЬNULL(ПриходнаяНакладнаяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	ПриходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	ПриходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ПриходнаяНакладнаяЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И ПриходнаяНакладнаяЗапасы.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяРасходы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПриходнаяНакладнаяРасходы.Номенклатура,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ПриходнаяНакладнаяРасходы.Количество * ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА ПриходнаяНакладнаяРасходы.Цена / ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяРасходы.Цена
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ПриходнаяНакладнаяРасходы.Сумма,
		|	ПриходнаяНакладнаяРасходы.СтавкаНДС,
		|	ПриходнаяНакладнаяРасходы.СуммаНДС,
		|	ПриходнаяНакладнаяРасходы.СтруктурнаяЕдиница КАК ПодразделениеЗатрат,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
		|				И (ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.КосвенныеЗатраты)
		|					ИЛИ ПриходнаяНакладнаяРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.НезавершенноеПроизводство))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПроизводственныйРасход,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ПриходнаяНакладнаяРасходы.Содержание, 1, 100) = """"
		|			ТОГДА ПриходнаяНакладнаяРасходы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ ПриходнаяНакладнаяРасходы.Содержание
		|	КОНЕЦ КАК Содержание,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяРасходы.Ссылка.ВключатьРасходыВСебестоимость
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоДопРасходы,
		|	ПриходнаяНакладнаяРасходы.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	ВЫБОР
		|		КОГДА ПриходнаяНакладнаяРасходы.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|			ТОГДА ПриходнаяНакладнаяРасходы.Номенклатура.НаправлениеДеятельности
		|		ИНАЧЕ ПриходнаяНакладнаяРасходы.НаправлениеДеятельности
		|	КОНЕЦ КАК НаправлениеДеятельности	
		|ИЗ
		|	Документ.ПриходнаяНакладная.Расходы КАК ПриходнаяНакладнаяРасходы
		|ГДЕ
		|	ПриходнаяНакладнаяРасходы.Ссылка = &Ссылка
		|	И ПриходнаяНакладнаяРасходы.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ПриходнаяНакладнаяЗапасы.Количество * ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ ПриходнаяНакладнаяЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ПриходнаяНакладнаяЗапасы.Всего КАК СтоимостьТоваров,
		|	ПриходнаяНакладнаяЗапасы.Ссылка КАК ДокументПоступления,
		|	ПриходнаяНакладнаяЗапасы.Себестоимость КАК Себестоимость,
		|	ПриходнаяНакладнаяЗапасы.СуммаРасходов КАК Сумма,
		|	ВЫРАЗИТЬ(ПриходнаяНакладнаяЗапасы.СуммаРасходов - ПриходнаяНакладнаяЗапасы.СуммаРасходов / ((ПриходнаяНакладнаяЗапасы.СтавкаНДС.Ставка + 100) / 100) КАК ЧИСЛО(15, 2)) КАК СуммаНДС
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И ПриходнаяНакладнаяЗапасы.Ссылка.ВключатьРасходыВСебестоимость
		|	И ПриходнаяНакладнаяЗапасы.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходнаяНакладнаяПредоплата.Документ КАК Документ,
		|	ПриходнаяНакладнаяПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.ПриходнаяНакладная.Предоплата КАК ПриходнаяНакладнаяПредоплата
		|ГДЕ
		|	ПриходнаяНакладнаяПредоплата.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
		|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
		|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.ПриходнаяНакладная.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
		|ГДЕ
		|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Результат.Вставить("РасшифровкаДопРасходов", РезультатыЗапроса[2].Выгрузить());
			
		ПогашениеЗадолженности = Новый ТаблицаЗначений;
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		ПогашениеЗадолженности.Колонки.Добавить("Сумма");
			
		ВыборкаРасчеты = РезультатыЗапроса[3].Выбрать();
		Пока ВыборкаРасчеты.Следующий() Цикл
			ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
			Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
				ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
			СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
			СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		КонецЦикла;
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
			
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаПроизводство(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СборкаЗапасовПродукция.НомерСтроки) КАК НомерСтроки,
	|	СборкаЗапасовПродукция.Ссылка КАК Документ,
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.Характеристика,
	|	СборкаЗапасовПродукция.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	СборкаЗапасовПродукция.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СборкаЗапасовПродукция.Спецификация,
	|	СУММА(СборкаЗапасовПродукция.Количество) КАК КоличествоМест,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ВЫРАЗИТЬ(СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ СборкаЗапасовПродукция.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовПродукция.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаЗапасовПродукция.Спецификация,
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.Характеристика,
	|	СборкаЗапасовПродукция.Ссылка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовПродукция.ЕдиницаИзмерения
	|	КОНЕЦ,
	|	СборкаЗапасовПродукция.Номенклатура.КатегорияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Запасы.Регистратор,
	|	Запасы.КоррНоменклатура КАК Продукция,
	|	Запасы.КоррХарактеристика КАК Характеристика,
	|	Запасы.КоррСпецификация КАК СпецификацияПродукции,
	|	СУММА(Запасы.Сумма * ВЫБОР
	|			КОГДА &РегВалюта <> &УпрВалюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|							ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаЗатрат
	|ПОМЕСТИТЬ ВременнаяТаблицаЗатраты
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &УпрВалюта) КАК КурсыВалютыЦены
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &РегВалюта) КАК КурсыВалюты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Запасы.Регистратор = &Документ
	|	И Запасы.ЗатратыНаВыпуск
	|	И Запасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.КоррНоменклатура,
	|	Запасы.КоррХарактеристика,
	|	Запасы.КоррСпецификация,
	|	Запасы.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаПродукция.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаПродукция.Спецификация КАК СпецификацияНоменклатуры,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаПродукция.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВременнаяТаблицаЗатраты.СуммаЗатрат ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВременнаяТаблицаЗатраты.СуммаЗатрат / ВременнаяТаблицаПродукция.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаЗатраты.СуммаЗатрат КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВременнаяТаблицаПродукция.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ВременнаяТаблицаПродукция.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВременнаяТаблицаПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ВременнаяТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЗатраты КАК ВременнаяТаблицаЗатраты
	|		ПО ВременнаяТаблицаПродукция.Документ = ВременнаяТаблицаЗатраты.Регистратор
	|			И ВременнаяТаблицаПродукция.Номенклатура = ВременнаяТаблицаЗатраты.Продукция
	|			И ВременнаяТаблицаПродукция.Характеристика = ВременнаяТаблицаЗатраты.Характеристика
	|			И ВременнаяТаблицаПродукция.Спецификация = ВременнаяТаблицаЗатраты.СпецификацияПродукции
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаПродукция.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент > 0
	|			ТОГДА ВЫРАЗИТЬ(СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество
	|	КОНЕЦ КАК Количество,
	|	СборкаЗапасовОтходы.Всего КАК Сумма,
	|	СборкаЗапасовОтходы.ЕдиницаИзмерения,
	|	СборкаЗапасовОтходы.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	СборкаЗапасовОтходы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
	|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
	|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.СборкаЗапасов.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
	|ГДЕ
	|	ТаблицаСведенияПрослеживаемости.Ссылка = &Документ";
		
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СборкаЗапасов.Продукция", "Документ.СборкаЗапасов.Запасы");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("РегВалюта", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("УпрВалюта", Константы.ВалютаУчета.Получить());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаПродукция = РезультатыЗапроса[2].Выгрузить();
	Результат.Вставить("Продукция", ТаблицаПродукция);
	
	ТаблицаОтходы = РезультатыЗапроса[3].Выгрузить();
	Если ТаблицаПродукция.Количество() = 1 Тогда
		Для каждого СтрокаТаблицы Из ТаблицаОтходы Цикл
			СтрокаТаблицы.КатегорияНоменклатуры = ТаблицаПродукция[0].КатегорияНоменклатуры;
			СтрокаТаблицы.НаправлениеДеятельности = ТаблицаПродукция[0].НаправлениеДеятельности;
		КонецЦикла;
	КонецЕсли;
	Если ДанныеИБ.ВариантУчетаСтоимостиОтходов = Перечисления.ВариантУчетаСтоимостиОтходов.Нулевая Тогда
		Для каждого СтрокаТаблицы Из ТаблицаОтходы Цикл
			СтрокаТаблицы.Сумма = 0;
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("ВозвратныеОтходы", ТаблицаОтходы);
	
	ТаблицаМатериалы = ТаблицаРаспределенияМатериалов(ДанныеИБ);
	Результат.Вставить("Материалы", ТаблицаМатериалы);
	
	ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПроизводствоВПеремещениеОтходов(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СборкаЗапасовОтходы.НомерСтроки) КАК НомерСтроки,
	|	СборкаЗапасовОтходы.Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовОтходы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовОтходы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ВЫРАЗИТЬ(СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ СборкаЗапасовОтходы.Количество
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаОтходы
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаЗапасовОтходы.Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовОтходы.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовОтходы.ЕдиницаИзмерения
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОтходы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаОтходы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаОтходы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаОтходы.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	ВременнаяТаблицаОтходы КАК ВременнаяТаблицаОтходы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаОтходы.НомерСтроки";
	
	Запрос.УстановитьПараметр("Документ", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОтходы = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Отходы", ТаблицаОтходы);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПроизводствоВПеремещениеПродукции(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СборкаЗапасовПродукция.НомерСтроки) КАК НомерСтроки,
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.Характеристика,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовПродукция.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА ВЫРАЗИТЬ(СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ СборкаЗапасовПродукция.Количество
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.Характеристика,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаЗапасовПродукция.ЕдиницаИзмерения
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаПродукция.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаПродукция.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ВременнаяТаблицаПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаПродукция.НомерСтроки";
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СборкаЗапасов.Продукция", "Документ.СборкаЗапасов.Запасы");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПродукция = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Продукция", ТаблицаПродукция);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаПроизводствоКомплектация(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
		|	СборкаЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И СборкаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА СборкаЗапасовЗапасы.Количество * СборкаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ СборкаЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ПОДСТРОКА(СборкаЗапасовЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
		|	СборкаЗапасовЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	СборкаЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА СборкаЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	СборкаЗапасовЗапасы.ДоляСтоимости КАК ДоляСтоимости
		|ИЗ
		|	Документ.СборкаЗапасов.Запасы КАК СборкаЗапасовЗапасы
		|ГДЕ
		|	СборкаЗапасовЗапасы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаТовары = РезультатЗапроса.Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		
		Результат.Вставить("Товары", ТаблицаТовары);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаРаспределениеЗатрат(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеЗатратЗапасы.Номенклатура КАК Номенклатура,
	|	РаспределениеЗатратЗапасы.Характеристика КАК Характеристика,
	|	РаспределениеЗатратЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(РаспределениеЗатратЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|						И РаспределениеЗатратЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|					ТОГДА РаспределениеЗатратРаспределениеЗапасов.Количество * РаспределениеЗатратЗапасы.ЕдиницаИзмерения.Коэффициент
	|				ИНАЧЕ РаспределениеЗатратРаспределениеЗапасов.Количество
	|			КОНЕЦ КАК ЧИСЛО(15, 3))) КАК Количество,
	|	ВЫБОР
	|		КОГДА РаспределениеЗатратЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И РаспределениеЗатратЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ""КомиссионныеТовары""
	|		КОГДА РаспределениеЗатратЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И РаспределениеЗатратЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ""ДавальческиеСырьеИМатериалы""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	РаспределениеЗатратРаспределениеЗапасов.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	РаспределениеЗатратРаспределениеЗапасов.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	МАКСИМУМ(РаспределениеЗатратРаспределениеЗапасов.НомерСтроки) КАК НомерСтроки,
	|	ПОДСТРОКА(РаспределениеЗатратЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
	|	РаспределениеЗатратЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЕСТЬNULL(РаспределениеЗатратЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
	|	РаспределениеЗатратЗапасы.НомерГТД КАК НомерГТДСсылка,
	|	РаспределениеЗатратЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	РаспределениеЗатратЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.РаспределениеЗатрат.Запасы КАК РаспределениеЗатратЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РаспределениеЗатрат.РаспределениеЗапасов КАК РаспределениеЗатратРаспределениеЗапасов
	|		ПО РаспределениеЗатратЗапасы.КлючСвязи = РаспределениеЗатратРаспределениеЗапасов.КлючСвязи
	|			И РаспределениеЗатратЗапасы.Ссылка = РаспределениеЗатратРаспределениеЗапасов.Ссылка
	|ГДЕ
	|	РаспределениеЗатратЗапасы.Ссылка = &Ссылка
	|	И РаспределениеЗатратРаспределениеЗапасов.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗатратЗапасы.Номенклатура,
	|	РаспределениеЗатратЗапасы.Характеристика,
	|	РаспределениеЗатратЗапасы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА РаспределениеЗатратЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И РаспределениеЗатратЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ""КомиссионныеТовары""
	|		КОГДА РаспределениеЗатратЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				И РаспределениеЗатратЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ""ДавальческиеСырьеИМатериалы""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ,
	|	РаспределениеЗатратРаспределениеЗапасов.Номенклатура.КатегорияНоменклатуры,
	|	РаспределениеЗатратРаспределениеЗапасов.Номенклатура.НаправлениеДеятельности,
	|	РаспределениеЗатратЗапасы.Номенклатура.ЕдиницаИзмерения,
	|	РаспределениеЗатратЗапасы.НомерГТД,
	|	РаспределениеЗатратЗапасы.СтранаПроисхождения,
	|	РаспределениеЗатратЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД,
	|	РаспределениеЗатратЗапасы.ПрослеживаемыйТовар,
	|	РаспределениеЗатратЗапасы.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
	|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
	|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
	|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.РаспределениеЗатрат.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
	|ГДЕ
	|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
	Результат.Вставить("Товары", ТаблицаТовары); 
	
	ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаРасходнаяНакладная(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Количество * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена / РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма,
		|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ПОДСТРОКА(РасходнаяНакладнаяЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
		|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА РасходнаяНакладнаяЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И РасходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	РасходнаяНакладнаяЗапасы.Всего КАК Всего,
		|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
		|	РасходнаяНакладнаяЗапасы.Партия КАК Партия,
		|	ЕСТЬNULL(РасходнаяНакладнаяЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	РасходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	РасходнаяНакладнаяЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	РасходнаяНакладнаяЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Количество * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена / РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма,
		|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(РасходнаяНакладнаяЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Содержание
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И НЕ РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	РасходнаяНакладнаяДоставка.НоменклатураДоставки,
		|	1,
		|	РасходнаяНакладнаяДоставка.СтоимостьДоставки,
		|	РасходнаяНакладнаяДоставка.СтоимостьДоставки,
		|	РасходнаяНакладнаяДоставка.СтавкаНДСДоставки,
		|	РасходнаяНакладнаяДоставка.СуммаНДСДоставки,
		|	РасходнаяНакладнаяДоставка.НоменклатураДоставки.НаименованиеПолное
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладнаяДоставка
		|ГДЕ
		|	РасходнаяНакладнаяДоставка.Ссылка = &Ссылка
		|	И РасходнаяНакладнаяДоставка.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И РасходнаяНакладнаяДоставка.СтоимостьДоставки > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходнаяНакладнаяПредоплата.Документ КАК Документ,
		|	РасходнаяНакладнаяПредоплата.СуммаРасчетов КАК Сумма
		|ИЗ
		|	Документ.РасходнаяНакладная.Предоплата КАК РасходнаяНакладнаяПредоплата
		|ГДЕ
		|	РасходнаяНакладнаяПредоплата.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
		|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
		|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.РасходнаяНакладная.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
		|ГДЕ
		|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		МассивТиповТовары = Новый Массив;
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		
		Запрос.УстановитьПараметр("МассивТиповТовары", МассивТиповТовары);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ПогашениеЗадолженности = Новый ТаблицаЗначений;
		ПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
		ПогашениеЗадолженности.Колонки.Добавить("Сумма");
			
		ВыборкаРасчеты = РезультатыЗапроса[2].Выбрать();
		Пока ВыборкаРасчеты.Следующий() Цикл
			ДокументРасчетов = Новый Структура("Значение, ИмяПКО", ВыборкаРасчеты.Документ, ИмяПКОДляДокумента(ВыборкаРасчеты.Документ));
			Если Не ЗначениеЗаполнено(ДокументРасчетов.Значение) 
				ИЛИ Не ЗначениеЗаполнено(ДокументРасчетов.ИмяПКО) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРасчеты = ПогашениеЗадолженности.Добавить();
			СтрокаРасчеты.ДокументРасчетов = ДокументРасчетов;
			СтрокаРасчеты.Сумма = ВыборкаРасчеты.Сумма;
		КонецЦикла;
		Результат.Вставить("ПогашениеЗадолженности", ПогашениеЗадолженности);
		
		ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
	
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаРасходыПриИмпорте(ДанныеИБ)
	Результат = Новый Структура;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеТовары.НомерРаздела КАК НомерРаздела,
	|	ДанныеТовары.Номенклатура КАК Номенклатура,
	|	ДанныеТовары.Характеристика КАК Характеристика,
	|	ДанныеТовары.ДокументПартии КАК ДокументПоступления,
	|	ДанныеТовары.Количество КАК Количество,
	|	ДанныеТовары.ФактурнаяСтоимость КАК ТаможеннаяСтоимость,
	|	ДанныеТовары.СуммаНДС КАК СуммаНДС,
	|	ДанныеТовары.СуммаПошлины КАК СуммаПошлины,
	|	ДанныеТовары.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.РасходыПриИмпорте.Запасы КАК ДанныеТовары
	|ГДЕ
	|	ДанныеТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРазделы.НомерСтроки КАК НомерРаздела,
	|	ДанныеРазделы.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
	|	ДанныеРазделы.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеРазделы.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ДанныеРазделы.СтавкаПошлины КАК ЧИСЛО(10, 2)) КАК СтавкаПошлины,
	|	ДанныеРазделы.СуммаПошлины КАК СуммаПошлины
	|ИЗ
	|	Документ.РасходыПриИмпорте.Разделы КАК ДанныеРазделы
	|ГДЕ
	|	ДанныеРазделы.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = МассивРезультатов[0].Выгрузить();
	Результат.Вставить("Товары", ТаблицаТоваров);
		
	ТаблицаРазделы = МассивРезультатов[1].Выгрузить();
	ЗаполнитьСтавкиНДС_Отправка(ТаблицаРазделы);
	Результат.Вставить("Разделы", ТаблицаРазделы);
		
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаСписаниеЗапасов(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписаниеЗапасовЗапасы.Номенклатура,
		|	СписаниеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(СписаниеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|					И СписаниеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|				ТОГДА СписаниеЗапасовЗапасы.Количество * СписаниеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
		|			ИНАЧЕ СписаниеЗапасовЗапасы.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ПОДСТРОКА(СписаниеЗапасовЗапасы.НомерГТД.Код,1,30) КАК НомерГТДСтрокой,
		|	СписаниеЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА СписаниеЗапасовЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И СписаниеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЕСТЬNULL(СписаниеЗапасовЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	СписаниеЗапасовЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	СписаниеЗапасовЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	СписаниеЗапасовЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
		|ГДЕ
		|	СписаниеЗапасовЗапасы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСведенияПрослеживаемости.Ссылка КАК Ссылка,
		|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
		|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ИЗ
		|	Документ.СписаниеЗапасов.СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
		|ГДЕ
		|	ТаблицаСведенияПрослеживаемости.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТовары, ДанныеИБ.Ссылка);
		Результат.Вставить("Товары", ТаблицаТовары);
		
		ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаСписаниеЗапасов_СписаниеИзЭкспл(ДанныеИБ)
	Результат = Новый Структура;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеЗапасовЗапасы.Номенклатура,
	|	СписаниеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СписаниеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					И СписаниеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент > 0
	|				ТОГДА СписаниеЗапасовЗапасы.Количество * СписаниеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|			ИНАЧЕ СписаниеЗапасовЗапасы.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
	|	СписаниеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница,
	|	СписаниеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.МОЛ КАК ФизическоеЛицо,
	|	СписаниеЗапасовЗапасы.Ссылка.Дата,
	|	""СпецоснасткаИСпецодеждаНаСкладе"" КАК ТипЗапасов
	|ПОМЕСТИТЬ Вт_Спецодежда
	|ИЗ
	|	Документ.СписаниеЗапасов.Запасы КАК СписаниеЗапасовЗапасы
	|ГДЕ
	|	СписаниеЗапасовЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Спецодежда.Номенклатура,
	|	МАКСИМУМ(ПеремещениеЗапасовЗапасы.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ Вт_ДокументыПередачи
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_Спецодежда КАК Вт_Спецодежда
	|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = Вт_Спецодежда.Номенклатура
	|			И ПеремещениеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПолучатель = Вт_Спецодежда.СтруктурнаяЕдиница
	|			И (ПеремещениеЗапасовЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию))
	|			И ПеремещениеЗапасовЗапасы.Ссылка.Дата <= Вт_Спецодежда.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Спецодежда.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Спецодежда.Номенклатура,
	|	Вт_Спецодежда.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Вт_Спецодежда.Количество КАК Количество,
	|	Вт_Спецодежда.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вт_Спецодежда.ТипЗапасов КАК ТипЗапасов,
	|	ЕСТЬNULL(Вт_ДокументыПередачи.Ссылка, Неопределено) КАК ДокументПередачи
	|ИЗ
	|	Вт_Спецодежда КАК Вт_Спецодежда
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ДокументыПередачи КАК Вт_ДокументыПередачи
	|		ПО Вт_Спецодежда.Номенклатура = Вт_ДокументыПередачи.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Функция ДанныеДокументаСчетНаОплату(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	СчетНаОплатуЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА СчетНаОплатуЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ СчетНаОплатуЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Количество * СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ СчетНаОплатуЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Цена / СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ СчетНаОплатуЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	СчетНаОплатуЗапасы.Сумма КАК Сумма,
		|	СчетНаОплатуЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	СчетНаОплатуЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И СчетНаОплатуЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	СчетНаОплатуЗапасы.Всего КАК Всего,
		|	СчетНаОплатуЗапасы.Характеристика КАК Характеристика,
		|	СчетНаОплатуЗапасы.Партия КАК Партия,
		|	СчетНаОплатуЗапасы.Содержание КАК Содержание
		|ИЗ
		|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
		|ГДЕ
		|	СчетНаОплатуЗапасы.Ссылка = &Ссылка
		|	И СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетНаОплатуЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	СчетНаОплатуЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Количество * СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ СчетНаОплатуЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Цена / СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ СчетНаОплатуЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	СчетНаОплатуЗапасы.Сумма КАК Сумма,
		|	СчетНаОплатуЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	СчетНаОплатуЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СчетНаОплатуЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА СчетНаОплатуЗапасы.Номенклатура.НаименованиеПолное
		|		ИНАЧЕ СчетНаОплатуЗапасы.Содержание
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
		|ГДЕ
		|	СчетНаОплатуЗапасы.Ссылка = &Ссылка
		|	И НЕ СчетНаОплатуЗапасы.Номенклатура.ТипНоменклатуры В (&МассивТиповТовары)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	СчетНаОплату.НоменклатураДоставки,
		|	1,
		|	СчетНаОплату.СтоимостьДоставки,
		|	СчетНаОплату.СтоимостьДоставки,
		|	СчетНаОплату.СтавкаНДСДоставки,
		|	СчетНаОплату.СуммаНДСДоставки,
		|	СчетНаОплату.НоменклатураДоставки.НаименованиеПолное
		|ИЗ
		|	Документ.СчетНаОплату КАК СчетНаОплату
		|ГДЕ
		|	СчетНаОплату.Ссылка = &Ссылка
		|	И СчетНаОплату.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И СчетНаОплату.СтоимостьДоставки > 0";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		
		МассивТиповТовары = Новый Массив;
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		МассивТиповТовары.Добавить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		
		Запрос.УстановитьПараметр("МассивТиповТовары", МассивТиповТовары);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаСчетНаОплатуПоставщика(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПоставщикаЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	СчетНаОплатуПоставщикаЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА СчетНаОплатуПоставщикаЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуПоставщикаЗапасы.Количество * СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуПоставщикаЗапасы.Цена / СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	СчетНаОплатуПоставщикаЗапасы.Сумма,
		|	СчетНаОплатуПоставщикаЗапасы.СтавкаНДС,
		|	СчетНаОплатуПоставщикаЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПоставщикаЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И СчетНаОплатуПоставщикаЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	СчетНаОплатуПоставщикаЗапасы.Всего,
		|	СчетНаОплатуПоставщикаЗапасы.Характеристика,
		|	СчетНаОплатуПоставщикаЗапасы.Партия,
		|	СчетНаОплатуПоставщикаЗапасы.Содержание
		|ИЗ
		|	Документ.СчетНаОплатуПоставщика.Запасы КАК СчетНаОплатуПоставщикаЗапасы
		|ГДЕ
		|	СчетНаОплатуПоставщикаЗапасы.Ссылка = &Ссылка
		|	И СчетНаОплатуПоставщикаЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетНаОплатуПоставщикаЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	СчетНаОплатуПоставщикаЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуПоставщикаЗапасы.Количество * СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуПоставщикаЗапасы.Цена / СчетНаОплатуПоставщикаЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ СчетНаОплатуПоставщикаЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	СчетНаОплатуПоставщикаЗапасы.Сумма,
		|	СчетНаОплатуПоставщикаЗапасы.СтавкаНДС,
		|	СчетНаОплатуПоставщикаЗапасы.СуммаНДС,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(СчетНаОплатуПоставщикаЗапасы.Содержание, 1, 100) = """"
		|			ТОГДА СчетНаОплатуПоставщикаЗапасы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Содержание
		|ИЗ
		|	Документ.СчетНаОплатуПоставщика.Запасы КАК СчетНаОплатуПоставщикаЗапасы
		|ГДЕ
		|	СчетНаОплатуПоставщикаЗапасы.Ссылка = &Ссылка
		|	И СчетНаОплатуПоставщикаЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("Товары", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
КонецФункции
Функция ДанныеДокументаЧекККМ(ДанныеИБ)
	Результат = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЧекККМЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЧекККМЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЧекККМЗапасы.Количество * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЧекККМЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЧекККМЗапасы.Цена / ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЧекККМЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ЧекККМЗапасы.Сумма КАК Сумма,
		|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМЗапасы.СуммаНДС КАК СуммаНДС,
		|	ПОДСТРОКА("""", 1, 30) КАК НомерГТДСтрокой,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ЧекККМЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ЧекККМЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЧекККМЗапасы.Всего КАК Всего,
		|	ЧекККМЗапасы.Характеристика КАК Характеристика,
		|	ЧекККМЗапасы.Партия КАК Партия,
		|	ЕСТЬNULL(ЧекККМЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТДСсылка,
		|	ЛОЖЬ КАК ПрослеживаемыйТовар,
		|	"""" КАК ИдентификаторСтроки,
		|	ЧекККМЗапасы.Ссылка.Патент КАК Патент
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|ГДЕ
		|	ЧекККМЗапасы.Ссылка = &Ссылка
		|	И ЧекККМЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И ЧекККМЗапасы.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ЧекККМЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЧекККМЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЧекККМЗапасы.Количество * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЧекККМЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЧекККМЗапасы.Цена / ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЧекККМЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ЧекККМЗапасы.Сумма КАК Сумма,
		|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМЗапасы.СуммаНДС КАК СуммаНДС,
		|	ПОДСТРОКА("""", 1, 30) КАК НомерГТДСтрокой,
		|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ЧекККМЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ЧекККМЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ЧекККМЗапасы.Всего КАК Всего,
		|	ЧекККМЗапасы.Характеристика КАК Характеристика,
		|	ЧекККМЗапасы.Партия КАК Партия,
		|	ЧекККМЗапасы.Ссылка.Дата КАК ДатаПродажи,
		|	ЧекККМЗапасы.Ссылка.НомерЧекаККМ КАК НомерЧекаККМПродажи,
		|	ЧекККМЗапасы.Ссылка.КассоваяСмена КАК ДокументПродажи,
		|	ЕСТЬNULL(ЧекККМЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТДСсылка,
		|	ЛОЖЬ КАК ПрослеживаемыйТовар,
		|	"""" КАК ИдентификаторСтроки,
		|	ЧекККМЗапасы.Ссылка.Патент КАК Патент
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|ГДЕ
		|	ЧекККМЗапасы.Ссылка = &Ссылка
		|	И ЧекККМЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И ЧекККМЗапасы.Количество < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЧекККМЗапасы.Количество * ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ЧекККМЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ЧекККМЗапасы.Цена / ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ЧекККМЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ЧекККМЗапасы.Сумма КАК Сумма,
		|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ЧекККМЗапасы.Номенклатура.ЭтоАгентскаяУслуга
		|			ТОГДА ""Агентские""
		|		ИНАЧЕ ""Собственные""
		|	КОНЕЦ КАК ТипУслуги,
		|	ВЫБОР
		|		КОГДА ЧекККМЗапасы.Номенклатура.ЭтоАгентскаяУслуга
		|			ТОГДА ЧекККМЗапасы.Номенклатура.Поставщик
		|	КОНЕЦ КАК Принципал,
		|	ВЫБОР
		|		КОГДА ЧекККМЗапасы.Номенклатура.ЭтоАгентскаяУслуга
		|			ТОГДА ЧекККМЗапасы.Номенклатура.Договор
		|	КОНЕЦ КАК ДоговорСПринципалом,
		|	ЧекККМЗапасы.Ссылка.Патент КАК Патент
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|ГДЕ
		|	ЧекККМЗапасы.Ссылка = &Ссылка
		|	И ЧекККМЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И ЧекККМЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""0000000000000000"" КАК СерийныйНомер,
		|	ЧекККМЗапасы.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|ГДЕ
		|	ЧекККМЗапасы.Ссылка = &Ссылка
		|	И ЧекККМЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	И ЧекККМЗапасы.Сумма <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты = """"
		|			ТОГДА ""0000000000000000""
		|		ИНАЧЕ ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты
		|	КОНЕЦ КАК НомерКарты,
		|	ЧекККМОплатаПлатежнымиКартами.Сумма КАК СуммаОплаты,
		|	ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер,
		|	ЧекККМОплатаПлатежнымиКартами.Ссылка.Патент КАК Патент
		|ИЗ
		|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМОплатаПлатежнымиКартами
		|ГДЕ
		|	ЧекККМОплатаПлатежнымиКартами.Ссылка = &Ссылка
		|	И (ЧекККМОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
		|			ИЛИ ЧекККМОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал.БанковскийСчетЭквайринг.Банк КАК Банк,
		|	ЧекККМОплатаПлатежнымиКартами.Сумма КАК СуммаОплаты,
		|	ЧекККМОплатаПлатежнымиКартами.Ссылка.Патент КАК Патент
		|ИЗ
		|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМОплатаПлатежнымиКартами
		|ГДЕ
		|	ЧекККМОплатаПлатежнымиКартами.Ссылка = &Ссылка
		|	И ЧекККМОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит)
		|	И ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал.БанковскийСчетЭквайринг.Банк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""0000000000000000"" КАК СерийныйНомер,
		|	ЧекККМОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|	ЧекККМОплатаПлатежнымиКартами.Ссылка.Патент КАК Патент
		|ИЗ
		|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМОплатаПлатежнымиКартами
		|ГДЕ
		|	ЧекККМОплатаПлатежнымиКартами.Ссылка = &Ссылка
		|	И (ЧекККМОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат) 
		|		ИЛИ ЧекККМОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СертификатНСПК))";
		
		Если ТипЗнч(ДанныеИБ.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ЧекККМ", "Документ.ЧекККМВозврат");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("ТоварыПродажа", ТаблицаТоваров);
		
		ТаблицаТоваров = РезультатыЗапроса[1].Выгрузить();
		
		Для каждого СтрокаВозврат Из ТаблицаТоваров Цикл
			Если СтрокаВозврат.Количество < 0 Тогда
				СтрокаВозврат.Количество = -СтрокаВозврат.Количество;
			КонецЕсли;
			Если СтрокаВозврат.Сумма < 0 Тогда
				СтрокаВозврат.Сумма = -СтрокаВозврат.Сумма;
			КонецЕсли;
			Если СтрокаВозврат.СуммаНДС < 0 Тогда
				СтрокаВозврат.СуммаНДС = -СтрокаВозврат.СуммаНДС;
			КонецЕсли;
			Если СтрокаВозврат.Всего < 0 Тогда
				СтрокаВозврат.Всего = -СтрокаВозврат.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("ТоварыВозвратПродажи", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[2].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ТаблицаПодарочныеСертификаты = РезультатыЗапроса[3].Выгрузить();
		Результат.Вставить("ПодарочныеСертификаты", ТаблицаПодарочныеСертификаты);
		
		ТаблицаОплатаПлатежнымиКартами = РезультатыЗапроса[4].Выгрузить();
		Результат.Вставить("ОплатаПлатежнымиКартами", ТаблицаОплатаПлатежнымиКартами);
		
		ТаблицаОплатаБанковскимиКредитами = РезультатыЗапроса[5].Выгрузить();
		Результат.Вставить("ОплатаБанковскимиКредитами", ТаблицаОплатаБанковскимиКредитами);
		
		ТаблицаОплатаСертификатами = РезультатыЗапроса[6].Выгрузить();
		Результат.Вставить("ОплатаСертификатами", ТаблицаОплатаСертификатами);
		
		Возврат Результат;
КонецФункции
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Функция ДанныеОтчетОРозничныхПродажах(ДанныеИБ, Патент = Неопределено)
	Результат = Новый Структура;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтроки,
		|	ОтчетОРозничныхПродажахЗапасы.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
		|	ОтчетОРозничныхПродажахЗапасы.Возврат КАК Возврат,
		|	ОтчетОРозничныхПродажахЗапасы.Всего КАК Всего,
		|	ОтчетОРозничныхПродажахЗапасы.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ОтчетОРозничныхПродажахЗапасы.ДокументПродажи КАК ДокументПродажи,
		|	ОтчетОРозничныхПродажахЗапасы.ДоляСтоимости КАК ДоляСтоимости,
		|	ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОтчетОРозничныхПродажахЗапасы.Заказ КАК Заказ,
		|	ОтчетОРозничныхПродажахЗапасы.Исполнитель КАК Исполнитель,
		|	ОтчетОРозничныхПродажахЗапасы.КлючСвязи КАК КлючСвязи,
		|	ОтчетОРозничныхПродажахЗапасы.Количество КАК Количество,
		|	ОтчетОРозничныхПродажахЗапасы.Контрагент КАК Контрагент,
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура,
		|	ОтчетОРозничныхПродажахЗапасы.НоменклатураНабора КАК НоменклатураНабора,
		|	ОтчетОРозничныхПродажахЗапасы.НомерГТД КАК НомерГТД,
		|	ОтчетОРозничныхПродажахЗапасы.Ответственный КАК Ответственный,
		|	ОтчетОРозничныхПродажахЗапасы.Партия КАК Партия,
		|	ОтчетОРозничныхПродажахЗапасы.Патент КАК Патент,
		|	ОтчетОРозничныхПродажахЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ОтчетОРозничныхПродажахЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ОтчетОРозничныхПродажахЗапасы.Резерв КАК Резерв,
		|	ОтчетОРозничныхПродажахЗапасы.СерииНоменклатуры КАК СерииНоменклатуры,
		|	ОтчетОРозничныхПродажахЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ОтчетОРозничныхПродажахЗапасы.Сумма КАК Сумма,
		|	ОтчетОРозничныхПродажахЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ОтчетОРозничныхПродажахЗапасы.СуммаНДС КАК СуммаНДС,
		|	ОтчетОРозничныхПродажахЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	ОтчетОРозничныхПродажахЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
		|	ОтчетОРозничныхПродажахЗапасы.УчитыватьВНУ КАК УчитыватьВНУ,
		|	ОтчетОРозничныхПродажахЗапасы.Характеристика КАК Характеристика,
		|	ОтчетОРозничныхПродажахЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ОтчетОРозничныхПродажахЗапасы.Цена КАК Цена,
		|	ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ОтчетОРозничныхПродажахЗапасы.Ячейка КАК Ячейка,
		|	ОтчетОРозничныхПродажахЗапасы.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
		|	ОтчетОРозничныхПродажахЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ОтчетОРозничныхПродажахЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОтчетОРозничныхПродажахЗапасы.ПрослеживаемыйКомплект КАК ПрослеживаемыйКомплект,
		|	ОтчетОРозничныхПродажахЗапасы.ВозвратБезОснования КАК ВозвратБезОснования
		|ПОМЕСТИТЬ Вт_Запасы
		|ИЗ
		|	&ОтчетОРозничныхПродажахЗапасы КАК ОтчетОРозничныхПродажахЗапасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.НомерСтроки КАК НомерСтроки,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.ВидОплаты КАК ВидОплаты,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.НомерСертификата КАК НомерСертификата,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.БонуснаяКарта КАК БонуснаяКарта,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.Сумма КАК Сумма,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.СуммаБонусов КАК СуммаБонусов,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.ДатаПлатежа КАК ДатаПлатежа,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.УчитыватьВНУ КАК УчитыватьВНУ,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.Патент КАК Патент,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.ЭтоОтмена КАК ЭтоОтмена,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.СуммаКомиссии КАК СуммаКомиссии,
		|	ОтчетОРозничныхПродажахБезналичнаяОплата.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы
		|ПОМЕСТИТЬ Вт_БезналичнаяОплата
		|ИЗ
		|	&ОтчетОРозничныхПродажахБезналичнаяОплата КАК ОтчетОРозничныхПродажахБезналичнаяОплата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахСведенияПрослеживаемости.НомерСтроки КАК НомерСтроки,
		|	ОтчетОРозничныхПродажахСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ОтчетОРозничныхПродажахСведенияПрослеживаемости.Количество КАК Количество,
		|	ОтчетОРозничныхПродажахСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ОтчетОРозничныхПродажахСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОтчетОРозничныхПродажахСведенияПрослеживаемости.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ОтчетОРозничныхПродажахСведенияПрослеживаемости.Номенклатура КАК Номенклатура,
		|	ОтчетОРозничныхПродажахСведенияПрослеживаемости.Сумма КАК Сумма
		|ПОМЕСТИТЬ Вт_СведенияПрослеживаемости
		|ИЗ
		|	&ОтчетОРозничныхПродажахСведенияПрослеживаемости КАК ОтчетОРозничныхПродажахСведенияПрослеживаемости";
		
		Запрос.УстановитьПараметр("ОтчетОРозничныхПродажахЗапасы", ДанныеИБ.Запасы);
		Запрос.УстановитьПараметр("ОтчетОРозничныхПродажахБезналичнаяОплата", ДанныеИБ.БезналичнаяОплата);
		Запрос.УстановитьПараметр("ОтчетОРозничныхПродажахСведенияПрослеживаемости", ДанныеИБ.СведенияПрослеживаемости);
		
		Запрос.Выполнить();
		
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Количество * ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Цена / ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетОРозничныхПродажахЗапасы.Сумма КАК Сумма,
		|	ОтчетОРозничныхПродажахЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ОтчетОРозничныхПродажахЗапасы.СуммаНДС КАК СуммаНДС,
		|	ПОДСТРОКА(ОтчетОРозничныхПродажахЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
		|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетОРозничныхПродажахЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ОтчетОРозничныхПродажахЗапасы.Всего КАК Всего,
		|	ОтчетОРозничныхПродажахЗапасы.Характеристика КАК Характеристика,
		|	ОтчетОРозничныхПродажахЗапасы.Партия КАК Партия,
		|	ЕСТЬNULL(ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	ОтчетОРозничныхПродажахЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	ОтчетОРозничныхПродажахЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ОтчетОРозничныхПродажахЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОтчетОРозничныхПродажахЗапасы.Патент КАК Патент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДеятельностьНаПатенте
		|ИЗ
		|	Вт_Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И ОтчетОРозничныхПродажахЗапасы.Количество > 0
		|	И (&Патент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ОтчетОРозничныхПродажахЗапасы.Патент = &Патент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Количество * ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Цена / ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетОРозничныхПродажахЗапасы.Сумма КАК Сумма,
		|	ОтчетОРозничныхПродажахЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ОтчетОРозничныхПродажахЗапасы.СуммаНДС КАК СуммаНДС,
		|	ПОДСТРОКА(ОтчетОРозничныхПродажахЗапасы.НомерГТД.Код, 1, 30) КАК НомерГТДСтрокой,
		|	ОтчетОРозничныхПродажахЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
		|				И ОтчетОРозничныхПродажахЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
		|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
		|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
		|	КОНЕЦ КАК ТипЗапасов,
		|	ОтчетОРозничныхПродажахЗапасы.Всего КАК Всего,
		|	ОтчетОРозничныхПродажахЗапасы.Характеристика КАК Характеристика,
		|	ОтчетОРозничныхПродажахЗапасы.Партия КАК Партия,
		|	ОтчетОРозничныхПродажахЗапасы.ДокументПродажи.Дата КАК ДатаПродажи,
		|	ОтчетОРозничныхПродажахЗапасы.ДокументПродажи.НомерЧекаККМ КАК НомерЧекаККМПродажи,
		|	ОтчетОРозничныхПродажахЗапасы.ДокументПродажи.КассоваяСмена КАК ДокументПродажи,
		|	ЕСТЬNULL(ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТоварнаяНоменклатураВЭД.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияПрослеживаемости,
		|	ОтчетОРозничныхПродажахЗапасы.НомерГТД КАК НомерГТДСсылка,
		|	ОтчетОРозничныхПродажахЗапасы.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
		|	ОтчетОРозничныхПродажахЗапасы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОтчетОРозничныхПродажахЗапасы.Патент КАК Патент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДеятельностьНаПатенте
		|ИЗ
		|	Вт_Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И ОтчетОРозничныхПродажахЗапасы.Количество < 0
		|	И (&Патент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ОтчетОРозничныхПродажахЗапасы.Патент = &Патент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Количество * ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				И ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент > 0
		|			ТОГДА ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Цена / ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Цена
		|	КОНЕЦ КАК Цена,
		|	ОтчетОРозничныхПродажахЗапасы.Сумма КАК Сумма,
		|	ОтчетОРозничныхПродажахЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ОтчетОРозничныхПродажахЗапасы.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ЭтоАгентскаяУслуга
		|			ТОГДА ""Агентские""
		|		ИНАЧЕ ""Собственные""
		|	КОНЕЦ КАК ТипУслуги,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ЭтоАгентскаяУслуга
		|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.Поставщик
		|	КОНЕЦ КАК Принципал,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.ЭтоАгентскаяУслуга
		|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Номенклатура.Договор
		|	КОНЕЦ КАК ДоговорСПринципалом,
		|	ОтчетОРозничныхПродажахЗапасы.Патент КАК Патент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДеятельностьНаПатенте
		|ИЗ
		|	Вт_Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|	И ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	И (&Патент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ОтчетОРозничныхПродажахЗапасы.Патент = &Патент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""0000000000000000"" КАК СерийныйНомер,
		|	ОтчетОРозничныхПродажахЗапасы.Сумма КАК Сумма,
		|	ОтчетОРозничныхПродажахЗапасы.Патент КАК Патент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДеятельностьНаПатенте
		|ИЗ
		|	Вт_Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	И ОтчетОРозничныхПродажахЗапасы.Сумма <> 0
		|	И (&Патент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ОтчетОРозничныхПродажахЗапасы.Патент = &Патент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.НомерПлатежнойКарты = """"
		|			ТОГДА ""0000000000000000""
		|		ИНАЧЕ ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.НомерПлатежнойКарты
		|	КОНЕЦ КАК НомерКарты,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма КАК СуммаОплаты,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент КАК Патент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДеятельностьНаПатенте
		|ИЗ
		|	Вт_БезналичнаяОплата КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
		|ГДЕ
		|	(ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.БанковскаяКарта)
		|			ИЛИ ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП))
		|	И (&Патент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент = &Патент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ЭквайринговыйТерминал.БанковскийСчетЭквайринг.Банк КАК Банк,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма КАК СуммаОплаты,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент КАК Патент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДеятельностьНаПатенте
		|ИЗ
		|	Вт_БезналичнаяОплата КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
		|ГДЕ
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Кредит)
		|	И ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ЭквайринговыйТерминал.БанковскийСчетЭквайринг.Банк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
		|	И (&Патент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент = &Патент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""0000000000000000"" КАК СерийныйНомер,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент КАК Патент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДеятельностьНаПатенте
		|ИЗ
		|	Вт_БезналичнаяОплата КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
		|ГДЕ
		|	(ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат) 
		|		ИЛИ ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СертификатНСПК)) 
		|	И (&Патент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент = &Патент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.БонуснаяКарта КАК ДисконтнаяКарта,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.БонуснаяКарта.ВладелецКарты КАК Контрагент,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.СуммаБонусов КАК СуммаБонусныхБаллов,
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент КАК Патент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДеятельностьНаПатенте
		|ИЗ
		|	Вт_БезналичнаяОплата КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
		|ГДЕ
		|	(ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Бонусы))
		|	И (ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.БонуснаяКарта.Владелец.ЭтоИменнаяКарта)
		|	И (&Патент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Патент = &Патент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСведенияПрослеживаемости.РНПТ КАК РНПТ,
		|	ТаблицаСведенияПрослеживаемости.Количество КАК Количество,
		|	ТаблицаСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
		|	ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОтчетОРозничныхПродажахЗапасы.Патент КАК Патент,
		|	ВЫБОР
		|		КОГДА ОтчетОРозничныхПродажахЗапасы.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ДеятельностьНаПатенте
		|ИЗ
		|	Вт_Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_СведенияПрослеживаемости КАК ТаблицаСведенияПрослеживаемости
		|		ПО ОтчетОРозничныхПродажахЗапасы.ИдентификаторСтроки = ТаблицаСведенияПрослеживаемости.ИдентификаторСтроки
		|ГДЕ
		|	&Патент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ОтчетОРозничныхПродажахЗапасы.Патент = &Патент";
	
		Запрос.УстановитьПараметр("Патент", Патент);
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаТоваров = РезультатыЗапроса[0].Выгрузить();
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("ТоварыПродажа", ТаблицаТоваров);
		
		ТаблицаТоваров = РезультатыЗапроса[1].Выгрузить();
		
		Для каждого СтрокаВозврат Из ТаблицаТоваров Цикл
			Если СтрокаВозврат.Количество < 0 Тогда
				СтрокаВозврат.Количество = -СтрокаВозврат.Количество;
			КонецЕсли;
			Если СтрокаВозврат.Сумма < 0 Тогда
				СтрокаВозврат.Сумма = -СтрокаВозврат.Сумма;
			КонецЕсли;
			Если СтрокаВозврат.СуммаНДС < 0 Тогда
				СтрокаВозврат.СуммаНДС = -СтрокаВозврат.СуммаНДС;
			КонецЕсли;
			Если СтрокаВозврат.Всего < 0 Тогда
				СтрокаВозврат.Всего = -СтрокаВозврат.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		 
		ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, ДанныеИБ.Ссылка);
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаТоваров);
		Результат.Вставить("ТоварыВозвратПродажи", ТаблицаТоваров);
		
		ТаблицаУслуги = РезультатыЗапроса[2].Выгрузить();
		ЗаполнитьСтавкиНДС_Отправка(ТаблицаУслуги);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		ТаблицаПодарочныеСертификаты = РезультатыЗапроса[3].Выгрузить();
		Результат.Вставить("ПодарочныеСертификаты", ТаблицаПодарочныеСертификаты);
		
		ТаблицаОплатаПлатежнымиКартами = РезультатыЗапроса[4].Выгрузить();
		Результат.Вставить("ОплатаПлатежнымиКартами", ТаблицаОплатаПлатежнымиКартами);
		
		ТаблицаОплатаБанковскимиКредитами = РезультатыЗапроса[5].Выгрузить();
		Результат.Вставить("ОплатаБанковскимиКредитами", ТаблицаОплатаБанковскимиКредитами);
		
		ТаблицаОплатаСертификатами = РезультатыЗапроса[6].Выгрузить();
		Результат.Вставить("ОплатаСертификатами", ТаблицаОплатаСертификатами);
	
		ТаблицаОплатаБонуснымиБаллами = РезультатыЗапроса[7].Выгрузить();
		Результат.Вставить("ОплатаБонуснымиБаллами", ТаблицаОплатаБонуснымиБаллами);
		
		ТаблицаСведенияПрослеживаемости = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		Результат.Вставить("СведенияПрослеживаемости", ТаблицаСведенияПрослеживаемости);
		
		Возврат Результат;
КонецФункции
Функция ДвоичныеДанныеПрисоединенногоФайла(ПрисоединенныйФайл, КомпонентыОбмена)
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл.Ссылка, Ложь);
	
	ЭтоКартинка = ЭтоРасширениеФайлаКартинки(ПрисоединенныйФайл.Расширение);
	СжиматьКартинки = КомпонентыОбмена.ПараметрыКонвертации.СжиматьВыгружаемыеИзображения;
	ТребуетсяСжатьДвоичныеДанные = СжиматьКартинки И ЭтоКартинка;
	
	Если Не ТребуетсяСжатьДвоичныеДанные Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
	Возврат СжатьДвоичныеДанныеИзображения(ДвоичныеДанныеФайла);
КонецФункции
Процедура ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяДопСвойства = "ВалютаДенежныхСредств")
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта)
		И ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
		
		ИмяПКО = "Справочник_Валюты";
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяДопСвойства, Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Валюта, ИмяПКО));
	
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьКодТНВЭДВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяРеквизитаПолученныеДанные, ИмяРеквизитаXDTO, КомпонентыОбмена)
	Если Не ДанныеXDTO.Свойство(ИмяРеквизитаXDTO) Или Не ЗначениеЗаполнено(ДанныеXDTO[ИмяРеквизитаXDTO]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяРеквизитаПолученныеДанные,
			Новый Структура("Значение, ИмяПКО", ДанныеXDTO[ИмяРеквизитаXDTO], "Справочник_КлассификаторТНВЭД_ЭлементСправочника"));
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяРеквизитаПолученныеДанные,
			Новый Структура("Значение, ИмяПКО", ДанныеXDTO[ИмяРеквизитаXDTO], "Справочник_КлассификаторТНВЭД"));
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьСтрануПроисхожденияИзГТД(СтруктураДанныхСтроки, НомерГТД_XDTO, КомпонентыОбмена, ИмяРеквизитаСтранаПроисхождения = "СтранаПроисхождения")
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10")
		И ЗначениеЗаполнено(НомерГТД_XDTO)
		И НомерГТД_XDTO.Свойство("СтранаПроисхождения") Тогда
			
		СтруктураДанныхСтроки.Вставить(ИмяРеквизитаСтранаПроисхождения, НомерГТД_XDTO.СтранаПроисхождения); 
			
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьТаблицуДополнительныеРеквизиты(ДанныеXDTO)
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
КонецПроцедуры
Функция ДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации = Неопределено)
	Если Не ЗначениеЗаполнено(Контрагент)
		ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
		
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
		
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
		
	Возврат ДоговорПоУмолчанию;
КонецФункции
Функция ДокументДоступенДляВыгрузки(Документ)
	Выгружать = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
	
		Если Документ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Прочее
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам Тогда
			
			Выгружать = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Выгружать;
КонецФункции
Процедура ДокументыДДС_ПолучениеСтатьи(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Статья",ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	КонецЕсли;
КонецПроцедуры
Процедура ДополнитьДаннымиГТД(ДанныеИБ, ТаблицаТовары, КомпонентыОбмена)
	Если ТаблицаТовары.Колонки.Найти("НомерГТД") = Неопределено Тогда 
		ТаблицаТовары.Колонки.Добавить("НомерГТД");
	КонецЕсли;
	Если ТаблицаТовары.Колонки.Найти("СтранаПроисхождения") = Неопределено Тогда 
		ТаблицаТовары.Колонки.Добавить("СтранаПроисхождения");
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
		СтрокаТовара.НомерГТД = НомерГТДДляОтправки(СтрокаТовара.НомерГТДСсылка,
			СтрокаТовара.СтранаПроисхождения, СтрокаТовара.Номенклатура.ПрослеживаемыйТовар, КомпонентыОбмена);
	КонецЦикла;
КонецПроцедуры
Функция ДополнитьДаннымиПрослеживаемостиИГТД(ДанныеИБ, ТаблицаТовары, ТаблицаСведенияПрослеживаемости, РаспределяемыеПоля, КомпонентыОбмена)
	ТаблицаТоварыГТД = ТаблицаТовары.СкопироватьКолонки();
	Если ТаблицаТоварыГТД.Колонки.Найти("НомерГТД") = Неопределено Тогда 
		ТаблицаТоварыГТД.Колонки.Добавить("НомерГТД");
	КонецЕсли;
	Если ТаблицаТоварыГТД.Колонки.Найти("СтранаПроисхождения") = Неопределено Тогда 
		ТаблицаТоварыГТД.Колонки.Добавить("СтранаПроисхождения");
	КонецЕсли;
	ТаблицаТоварыГТД.Колонки.Добавить("КоличествоРНПТ");
	
	Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
		Если СтрокаТовара.ПрослеживаемыйТовар = Истина Тогда
			
			СтрокиПрослеживаемости = ТаблицаСведенияПрослеживаемости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТовара.ИдентификаторСтроки));
			КоличествоПрослеживаемыхТоваров = Новый Массив;
			Для Каждого СтрокаПрослеживаемости Из СтрокиПрослеживаемости Цикл
				КоличествоПрослеживаемыхТоваров.Добавить(СтрокаПрослеживаемости.Количество);
			КонецЦикла;
			
			ЗначенияРаспределяемыхПолей = Новый Структура();
			Для Каждого ИмяПоля Из СтрРазделить(РаспределяемыеПоля, ",") Цикл
				ЗначенияРаспределяемыхПолей.Вставить(ИмяПоля, УправлениеНебольшойФирмойСервер.РаспределитьПропорционально(СтрокаТовара[ИмяПоля], КоличествоПрослеживаемыхТоваров));
			КонецЦикла;
			
			Если СтрокиПрослеживаемости.Количество() = 0 Тогда
			
				СтрокаТовараГТД = ТаблицаТоварыГТД.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовараГТД, СтрокаТовара);
				СтрокаТовараГТД.НомерГТД = НомерГТДДляОтправки(СтрокаТовара.НомерГТДСсылка,
					СтрокаТовара.СтранаПроисхождения, СтрокаТовара.ПрослеживаемыйТовар, КомпонентыОбмена);
			
			Иначе
			
				Для ИндексСтроки = 0 По СтрокиПрослеживаемости.Количество() - 1 Цикл
					СтрокаТовараГТД = ТаблицаТоварыГТД.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТовараГТД, СтрокаТовара, , "Количество");
					
					Для Каждого КлючЗначение Из ЗначенияРаспределяемыхПолей Цикл
						Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
							СтрокаТовараГТД[КлючЗначение.Ключ] = КлючЗначение.Значение[ИндексСтроки];
						КонецЕсли;
					КонецЦикла;
					
					СтрокаТовараГТД.Количество = СтрокиПрослеживаемости[ИндексСтроки].Количество;
					СтрокаТовараГТД.КоличествоРНПТ = СтрокиПрослеживаемости[ИндексСтроки].КоличествоПрослеживаемости;
					СтрокаТовараГТД.НомерГТД = НомерГТДДляОтправки(СтрокиПрослеживаемости[ИндексСтроки].РНПТ,
						СтрокаТовара.СтранаПроисхождения, СтрокаТовара.ПрослеживаемыйТовар, КомпонентыОбмена);   		
				КонецЦикла;
			
			КонецЕсли;
			
		Иначе
			СтрокаТовараГТД = ТаблицаТоварыГТД.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовараГТД, СтрокаТовара);
			СтрокаТовараГТД.НомерГТД = НомерГТДДляОтправки(СтрокаТовара.НомерГТДСсылка,
				СтрокаТовара.СтранаПроисхождения, СтрокаТовара.ПрослеживаемыйТовар, КомпонентыОбмена);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаТоварыГТД;
КонецФункции
Процедура ДополнитьТаблицуКИДаннымиИБ(ДанныеИБ, ПолученныеДанные)
	МассивМножественныхВидов = Новый Массив;
	
		Для каждого СтрокаКИ Из ДанныеИБ.КонтактнаяИнформация Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаКИ.Вид) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтрок = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", СтрокаКИ.Вид));
			Если МассивСтрок.Количество() > 1 
				И МассивМножественныхВидов.Найти(СтрокаКИ.Вид) = Неопределено Тогда // если несколько строк, изменения не вносим
				
				Для каждого СтрокаМассива Из МассивСтрок Цикл
					НоваяСтрока = ПолученныеДанные.КонтактнаяИнформация.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
				КонецЦикла;
				МассивМножественныхВидов.Добавить(СтрокаКИ.Вид);
				Продолжить;
			КонецЕсли;
	
			
			НайденнаяСтрока = ПолученныеДанные.КонтактнаяИнформация.Найти(СтрокаКИ.Вид, "Вид");
			Если НайденнаяСтрока = Неопределено Тогда
				
				СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Предопределенный");
				
				ДополнитьКИ = Не СвойстваВидаКИ.Предопределенный = Истина 
					ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
					ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица
					ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица
					ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента
					ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента
					ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента
					ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента;
				
				Если ДополнитьКИ Тогда
					
					НоваяСтрока = ПолученныеДанные.КонтактнаяИнформация.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры
Функция ЕдиницаИзмеренияПоУмолчанию()
	Результат = Новый Структура();
		
		КлючевыеСвойства = Новый Структура();
		КлючевыеСвойства.Вставить("Код", НСтр("ru = '796'"));
		КлючевыеСвойства.Вставить("Наименование", НСтр("ru = 'шт'"));
		Результат.Вставить("КлючевыеСвойства",КлючевыеСвойства);
		Результат.Вставить("НаименованиеПолное", НСтр("ru = 'штука'"));
		
		Возврат Результат;
КонецФункции
Процедура ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
			Возврат;
		КонецЕсли;
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
		
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
			// Набор записей полностью заменяется на полученные данные
			Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ДанныеФИО Цикл
				МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписиФИО, СтрокаФИО);
		
				Если ЗначениеЗаполнено(СтрокаФИО.НачалоПериода) Тогда
				   МенеджерЗаписиФИО.Период = СтрокаФИО.НачалоПериода;
				Иначе
					Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
						МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
					Иначе
						МенеджерЗаписиФИО.Период = '18991231000000';
					КонецЕсли;
				КонецЕсли;
				
				МенеджерЗаписиФИО.ФизическоеЛицо = ФизЛицоСсылка;
			КонецЦикла;
		
		Иначе
			
			СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолученныеДанные.ФИО);
			МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
			МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
			МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
			МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
			Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
				МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
			Иначе
				МенеджерЗаписиФИО.Период = '18991231000000';
			КонецЕсли;
			МенеджерЗаписиФИО.ФизическоеЛицо = ФизЛицоСсылка;
				
		КонецЕсли;
			
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейФИО);
КонецПроцедуры
Процедура ЗаписатьРозничныеЦены(Номенклатура, ЕдиницаИзмерения, ЦенаПродажи)
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", Номенклатура);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЦенаПродажи", ЦенаПродажи);
		Параметр = Новый СписокЗначений;
		Параметр.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
		Параметр.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		Запрос.УстановитьПараметр("ТипСтруктурнойЕдиницы", Параметр);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
		Запрос.Текст = "ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ РозничныеСклады
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы В(&ТипСтруктурнойЕдиницы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РозничныеСклады.СтруктурнаяЕдиница.РозничныйВидЦен КАК ВидЦен,
		|	&Номенклатура КАК Номенклатура,
		|	&ЦенаПродажи КАК Цена,
		|	ИСТИНА КАК Актуальность
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
		|		ПРАВОЕ СОЕДИНЕНИЕ РозничныеСклады КАК РозничныеСклады
		|		ПО (ЦеныНоменклатурыСрезПоследних.ВидЦен = РозничныеСклады.СтруктурнаяЕдиница.РозничныйВидЦен)     
		|		ГДЕ ВидЦен IS NULL ";
	
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
	
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Прочитать();
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Период = НачалоДня(ТекущаяДатаСеанса());
			Запись.ЕдиницаИзмерения = ЕдиницаИзмерения;
		КонецЦикла;
		НаборЗаписей.Записать();
	
		ЗафиксироватьТранзакцию();
	Исключение
	
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись розничных цен'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры
Процедура ЗаполнитьГТДИПрослеживаемость(СтруктураДанныхСтроки, СтрокаXDTO, МассивСтрокСведенияПрослеживаемости, КомпонентыОбмена)
	ЕстьКолонкаНомерГТД = СтрокаXDTO.Владелец().Колонки.Найти("НомерГТД") <> Неопределено;
	
	Если ЕстьКолонкаНомерГТД И ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
		ДобавитьСтрануПроисхожденияИзГТД(СтруктураДанныхСтроки, СтрокаXDTO.НомерГТД, КомпонентыОбмена);
	КонецЕсли;
	
	Если СтруктураДанныхСтроки.Свойство("ПрослеживаемыйТовар") 
		И СтруктураДанныхСтроки.ПрослеживаемыйТовар
		И ТипЗнч(МассивСтрокСведенияПрослеживаемости) = Тип("Массив") Тогда
		
		СведенияОПрослеживаемости = Новый Структура;
		СведенияОПрослеживаемости.Вставить("ИдентификаторСтроки", СтруктураДанныхСтроки.ИдентификаторСтроки);
		СведенияОПрослеживаемости.Вставить("Количество", СтруктураДанныхСтроки.Количество);
		Если СтруктураДанныхСтроки.Свойство("КоличествоПрослеживаемости") Тогда
			СведенияОПрослеживаемости.Вставить("КоличествоПрослеживаемости", СтруктураДанныхСтроки.КоличествоПрослеживаемости);
		КонецЕсли;
		Если ЕстьКолонкаНомерГТД И ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
			СведенияОПрослеживаемости.Вставить("РНПТ", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД, КомпонентыОбмена));
		КонецЕсли;
		
		МассивСтрокСведенияПрослеживаемости.Добавить(СведенияОПрослеживаемости);
			
	ИначеЕсли ЕстьКолонкаНомерГТД И ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
		СтруктураДанныхСтроки.Вставить("НомерГТД", СтруктураДляЗагрузкиНомераГТД(СтрокаXDTO.НомерГТД, КомпонентыОбмена));
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДанныеРасшифровкиПлатежаДокументРасчетов(СтруктураДанныхСтроки, XDTOДокументаОснования)
	Документ = Неопределено;
		
		Попытка
			ТипДокументаОснования = XDTOДокументаОснования.ТипЗначения;
			ИДОбъектаXDTO = XDTOДокументаОснования.Ссылка.Значение;
		
			Если СтрНайти(ТипДокументаОснования, "ОтчетКомиссионера") > 0 Тогда
				Документ = Документы.ОтчетКомиссионера.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO)); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
				Документ = Документы.РасходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO)); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураПолученный") > 0 Тогда
				Документ = Документы.СчетФактураПолученный.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO)); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураВыданный") > 0 Тогда
				Документ = Документы.СчетФактура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO)); 
			ИначеЕсли СтрНайти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
				Документ = Документы.РасходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
				Если Не (ЗначениеЗаполнено(Документ) И ОбщегоНазначения.СсылкаСуществует(Документ)) Тогда
					Документ = Документы.АктВыполненныхРабот.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
					Если Не (ЗначениеЗаполнено(Документ) И ОбщегоНазначения.СсылкаСуществует(Документ)) Тогда
						Документ = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетКомитенту") > 0 Тогда
				Документ = Документы.ОтчетКомитенту.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "АктВыполненныхРабот") > 0 Тогда
				Документ = Документы.АктВыполненныхРабот.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
				Документ = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
				Документ = Документы.ПриходнаяНакладная.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
				Если Не (ЗначениеЗаполнено(Документ) И ОбщегоНазначения.СсылкаСуществует(Документ)) Тогда
					Документ = Документы.ДополнительныеРасходы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
				КонецЕсли;
			ИначеЕсли СтрНайти(ТипДокументаОснования, "АвансовыйОтчет") > 0 Тогда
				Документ = Документы.АвансовыйОтчет.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "РКОРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.РасходИзКассы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ПКОРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.ПоступлениеВКассу.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "СБДСРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.РасходСоСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ПБДСРасчетыСКонтрагентами") > 0 Тогда
				Документ = Документы.ПоступлениеНаСчет.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаДолга") > 0 Тогда
				Документ = Документы.Взаимозачет.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаПоступленияТоваров") > 0 Тогда
				Документ = Документы.КорректировкаПоступления.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаРеализацииТоваров") > 0 Тогда
				Документ = Документы.КорректировкаРеализации.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетПереработчика") > 0 Тогда
				Документ = Документы.ОтчетПереработчика.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетДавальцу") > 0 Тогда
				Документ = Документы.ОтчетОПереработке.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			ИначеЕсли СтрНайти(ТипДокументаОснования, "ОперацияПоПлатежнойКарте") > 0 Тогда
				Документ = Документы.ОперацияПоПлатежнымКартам.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДОбъектаXDTO));
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Документ) И ОбщегоНазначения.СсылкаСуществует(Документ) Тогда
			СтруктураДанныхСтроки.Вставить("Документ", Документ);
		КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДанныеРасшифровкиПлатежаНДСПоУмолчанию(СтруктураДанныхСтроки, Организация, ДатаДокумента)
	Если СтруктураДанныхСтроки.Свойство("СтавкаНДС") И ЗначениеЗаполнено(СтруктураДанныхСтроки.СтавкаНДС) Тогда
		ТекСтавкаНДС = СтавкаНДСПоСтроке(СтруктураДанныхСтроки.СтавкаНДС.Значение);
		СтруктураДанныхСтроки.Вставить("СтавкаНДС", ТекСтавкаНДС);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		
		НалогообложениеНДС = НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Организация, , ДатаДокумента);
		ПлательщикНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС; 
		ТекСтавкаНДС = ?(НЕ ПлательщикНДС, УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(), Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию));
	Иначе
		Если ТекущаяДатаСеанса() >= '20190101' Тогда
			ТекСтавкаНДС = СтавкаНДСПоСтроке("НДС20");
		Иначе
			ТекСтавкаНДС = СтавкаНДСПоСтроке("НДС18");
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекСтавкаНДС);
	ТекСуммаНДС = СтруктураДанныхСтроки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
	СтруктураДанныхСтроки.Вставить("СтавкаНДС", ТекСтавкаНДС);
	СтруктураДанныхСтроки.Вставить("СуммаНДС", ТекСуммаНДС);
КонецПроцедуры
Процедура ЗаполнитьДоговорКредитаИЗаймаПоУмолчанию(ДокументОбъект)
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКредитаЗайма) Тогда
			
			Организация = ДокументОбъект.Организация;
			
			Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником
				ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником
				ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику
				ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда
				Контрагент = ДокументОбъект.Подотчетник;
			Иначе
				Контрагент = ДокументОбъект.Контрагент;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				
				ДоговорКредитаЗайма = Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация);
				Если Не ЗначениеЗаполнено(ДоговорКредитаЗайма) Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ДоговорКредитаИЗайма.Ссылка КАК Ссылка
					|ИЗ
					|	Документ.ДоговорКредитаИЗайма КАК ДоговорКредитаИЗайма
					|ГДЕ
					|	ДоговорКредитаИЗайма.Контрагент = &Контрагент
					|	И ДоговорКредитаИЗайма.Организация = &Организация
					|	И НЕ ДоговорКредитаИЗайма.ПометкаУдаления";
					
					Запрос.УстановитьПараметр("Контрагент", Контрагент);
					Запрос.УстановитьПараметр("Организация", Организация);
					
					Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорКредитаИЗайма.Контрагент = &Контрагент", "ДоговорКредитаИЗайма.Сотрудник = &Контрагент");
					КонецЕсли;
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ДоговорКредитаЗайма = Выборка.Ссылка; 
					Иначе
						ДанныеЗаполнения = Новый Структура;
						ДанныеЗаполнения.Вставить("Организация", Организация);
						
						Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
							ДанныеЗаполнения.Вставить("Контрагент", Неопределено);
							ДанныеЗаполнения.Вставить("Сотрудник", Контрагент);
						Иначе
							ДанныеЗаполнения.Вставить("Контрагент", Контрагент);
							ДанныеЗаполнения.Вставить("Сотрудник", Неопределено);
						КонецЕсли;
						
						Попытка
							НовыйДоговор = Документы.ДоговорКредитаИЗайма.СоздатьДокумент();
							НовыйДоговор.Заполнить(ДанныеЗаполнения);
							НовыйДоговор.Дата = ДокументОбъект.Дата;
							НовыйДоговор.Организация = Организация;
							Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Сотрудники") Тогда
								НовыйДоговор.Сотрудник = Контрагент;
								НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику;
							Иначе
								НовыйДоговор.Контрагент = Контрагент;
								НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный;
							КонецЕсли;
							НовыйДоговор.ДатаПредоставления = ДокументОбъект.Дата;
							НовыйДоговор.ДатаОкончания = ДобавитьМесяц(НачалоДня(НовыйДоговор.ДатаПредоставления)-1, 1);
							НовыйДоговор.ДатаНачалаПогашения = ДобавитьМесяц(НовыйДоговор.ДатаПредоставления, 1);
							НовыйДоговор.СуммаДокумента = ДокументОбъект.СуммаДокумента;
							НовыйДоговор.Записать(РежимЗаписиДокумента.Проведение);
							
							ДоговорКредитаЗайма = НовыйДоговор.Ссылка;
						Исключение
							Возврат;
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
				
				ДокументОбъект.ДоговорКредитаЗайма = ДоговорКредитаЗайма;
				
			КонецЕсли;
			
		КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДокументВыдачиДенег(Объект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РасчетыСПодотчетникамиОстатки.Документ
	|ИЗ
	|	РегистрНакопления.РасчетыСПодотчетниками.Остатки(
	|			&ДатаДокументаВозврата,
	|			(Документ ССЫЛКА Документ.РасходИзКассы
	|				ИЛИ Документ ССЫЛКА Документ.РасходСоСчета)
	|				И Валюта = &Валюта
	|				И (&УчетПоКомпании
	|					ИЛИ Организация = &Организация)
	|				И Сотрудник = &Сотрудник) КАК РасчетыСПодотчетникамиОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПодотчетникамиОстатки.Документ.Дата";
	
	Запрос.УстановитьПараметр("ДатаДокументаВозврата", Объект.Дата);
	Запрос.УстановитьПараметр("Валюта", Объект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("УчетПоКомпании", Константы.УчетПоКомпании.Получить());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Подотчетник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Документ = Выборка.Документ;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьЗаказПокупателяНастройкамиИнтеграции(ПолученныеДанные, КомпонентыОбмена)
	Если ТипЗнч(ПолученныеДанные) <> Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИнтеграции = КомпонентыОбмена.ПараметрыКонвертации.НастройкиИнтеграции;
	Если ТипЗнч(НастройкиИнтеграции) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Неопределено;
	НастройкиИнтеграции.Свойство("НастройкиНачальногоЗаполненияЗаказПокупателя", ЗначенияЗаполнения);
	
	Если ЗначенияЗаполнения <> Неопределено Тогда
		ПолученныеДанные.ВидЗаказа = ЗначенияЗаполнения.ВидЗаказа;
		ПолученныеДанные.СостояниеЗаказа = ЗначенияЗаполнения.СостояниеЗаказа;
		ПолученныеДанные.СозданИзКабинетаКлиента = ЗначенияЗаполнения.СозданИзКабинетаКлиента;
		Если ЗначениеЗаполнено(ЗначенияЗаполнения.НоменклатураДоставки) Тогда
			ПолученныеДанные.НоменклатураДоставки = ЗначенияЗаполнения.НоменклатураДоставки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьЗначенияНепустыхСвойств(ДанныеИБ, ПолученныеДанные, ЗаполняемыеСвойства)
	МассивСвойств = СтрРазделить(ЗаполняемыеСвойства, ",");
	Для каждого Свойство Из МассивСвойств Цикл
		Если ЗначениеЗаполнено(ПолученныеДанные[Свойство]) Тогда
			ДанныеИБ[Свойство] = ПолученныеДанные[Свойство];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьКассуККМПоУмолчанию(Объект)
	Если ЗначениеЗаполнено(Объект.Организация)
		И ОбщегоНазначения.СсылкаСуществует(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств)
		И ОбщегоНазначения.СсылкаСуществует(Объект.ВалютаДенежныхСредств) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	КассыККМ.Ссылка
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
		|	И КассыККМ.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.ВалютаДенежныхСредств);
		Запрос.УстановитьПараметр("Владелец", Объект.Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1
			И Выборка.Следующий() Тогда
			КассаККМПоУмолчанию = Выборка.Ссылка;
		Иначе
			КассаККМПоУмолчанию = Справочники.КассыККМ.ПустаяСсылка();
		КонецЕсли;
		
		Объект.КассаККМ = КассаККМПоУмолчанию;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКассуПоУмолчанию(Объект, ЭтоПеремещениеВКассу = Ложь)
	КассаПоУмолчанию = Неопределено;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		КассаПоУмолчанию = Объект.Организация.КассаПоУмолчанию;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КассаПоУмолчанию) Тогда 
		НаименованиеКассыПоУмолчанию = НСтр("ru='Основная касса'");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Кассы.Ссылка
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	Кассы.Наименование = &НаименованиеКассыПоУмолчанию";
		
		Запрос.УстановитьПараметр("НаименованиеКассыПоУмолчанию", НаименованиеКассыПоУмолчанию);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КассаПоУмолчанию = Выборка.Ссылка;
		Иначе
			
			НоваяКасса = Справочники.Кассы.СоздатьЭлемент();
			НоваяКасса.Наименование = НаименованиеКассыПоУмолчанию;
			НоваяКасса.ВалютаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
			НоваяКасса.СчетУчета = ПланыСчетов.Управленческий.Касса;
			
			Попытка
				НоваяКасса.Записать();
				КассаПоУмолчанию = НоваяКасса.Ссылка;
			Исключение
				КассаПоУмолчанию = Справочники.Кассы.ПустаяСсылка();
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПеремещениеВКассу Тогда
		Объект.КассаПолучатель = КассаПоУмолчанию;
	Иначе
		Объект.Касса = КассаПоУмолчанию;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьНомераГТДСтраныПроисхождения_Отправка(ТаблицаТоваров, Документ)
	Попытка
	
		Если ТаблицаТоваров.Колонки.Найти("НомерГТД") = Неопределено Тогда 
			ТаблицаТоваров.Колонки.Добавить("НомерГТД");
		КонецЕсли;
		Если ТаблицаТоваров.Колонки.Найти("СтранаПроисхождения") = Неопределено Тогда 
			ТаблицаТоваров.Колонки.Добавить("СтранаПроисхождения");
		КонецЕсли;
		
	Исключение
	КонецПопытки;
КонецПроцедуры
Процедура ЗаполнитьОРПТекущейКассовойСмены(КомпонентыОбмена, КассаККМ)
	КассоваяСмена = Неопределено;
	РезультатОткрытия = РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, , , КассоваяСмена);
	Если РезультатОткрытия Тогда 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
		|	И ОтчетОРозничныхПродажах.КассоваяСмена = &КассоваяСмена";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			КомпонентыОбмена.ПараметрыКонвертации.ОРПТекущейКассовойСмены = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьПризнакиВидаПродукцииИС(НоменклатураОбъект, ВидПродукцииИС)
	Если Не ЗначениеЗаполнено(ВидПродукцииИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(ВидПродукцииИС) = ВРег("Алкогольная") Тогда
		НоменклатураОбъект.АлкогольнаяПродукция = Истина; 
		Возврат;
	КонецЕсли;
	
	Попытка
		НоменклатураОбъект.ВидПродукцииИС = Перечисления.ВидыПродукцииИС[ВидПродукцииИС];
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(НоменклатураОбъект.ВидПродукцииИС) Тогда
		// Для молочной продукции нужно еще взвести флаг "Подконтрольная продукция Ветис", т.к. молочная продукция обязательно проходит через Ветис.
		НоменклатураОбъект.ПодконтрольнаяПродукцияВЕТИС = НоменклатураОбъект.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСпособПогашенияЗадолженности(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	АвтоЗачетАвансов = КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы;
		
		Если АвтоЗачетАвансов Тогда
			СпособПогашенияЗадолженности = "Автоматически";
		ИначеЕсли ДанныеИБ.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено
			И (ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку
			
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию) Тогда
			
			СпособПогашенияЗадолженности = "НеПогашать";
			
		Иначе
			
			Если ДанныеИБ.Метаданные().Реквизиты.Найти("СпособЗачетаПредоплаты") <> Неопределено Тогда
				
				Если ДанныеИБ.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
					СпособПогашенияЗадолженности = "Автоматически";
				ИначеЕсли ДанныеИБ.Предоплата.Количество() > 0 Тогда
					СпособПогашенияЗадолженности = "ПоДокументу";
				Иначе
					СпособПогашенияЗадолженности = "НеПогашать";
				КонецЕсли;
			
			Иначе
			
				Если ДанныеИБ.Предоплата.Количество() > 0 Тогда
					СпособПогашенияЗадолженности = "ПоДокументу";
				Иначе
					ВедутсяРасчетыПоДокументам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Контрагент, "ВестиРасчетыПоДокументам");
					Если ВедутсяРасчетыПоДокументам = Истина Тогда
						СпособПогашенияЗадолженности = "НеПогашать";
					Иначе
						СпособПогашенияЗадолженности = "Автоматически";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли;	
			
		ДанныеXDTO.Вставить("СпособПогашенияЗадолженности", СпособПогашенияЗадолженности);
КонецПроцедуры
Процедура ЗаполнитьСтавкиНДС_Отправка(ТабличнаяЧасть)
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");
		Для Каждого Строка Из ТабличнаяЧасть Цикл
		
			Если Строка.СтавкаНДС.НеОблагается Тогда	
				Строка.СтавкаНДССтрокой = "БезНДС";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 18
				И НЕ Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС18";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 18
				И Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС18_118";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 10 
				И НЕ Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС10";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 10 
				И Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС10_110";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 20 
				И НЕ Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС20";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 20 
				И Строка.СтавкаНДС.Расчетная Тогда
				Строка.СтавкаНДССтрокой = "НДС20_120";
			ИначеЕсли Строка.СтавкаНДС.Ставка = 0 Тогда
				Строка.СтавкаНДССтрокой = "НДС0"; 
			Иначе
				Строка.СтавкаНДССтрокой = "БезНДС";
			КонецЕсли;
			
		КонецЦикла;
		ТабличнаяЧасть.Колонки.Удалить("СтавкаНДС");
		ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = "СтавкаНДС";
КонецПроцедуры
Процедура ЗаполнитьСтавкиНДСКорректировка_Отправка(ТабличнаяЧасть)
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");
		ТабличнаяЧасть.Колонки.Добавить("СтавкаНДСДоИзмененияСтрокой");
		
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Строка.СтавкаНДССтрокой = СтавкаНДССтрокой_Отправка(Строка.СтавкаНДС);
			Строка.СтавкаНДСДоИзмененияСтрокой = СтавкаНДССтрокой_Отправка(Строка.СтавкаНДСДоИзменения);
			
		КонецЦикла;
		
		ТабличнаяЧасть.Колонки.Удалить("СтавкаНДС");
		ТабличнаяЧасть.Колонки.Удалить("СтавкаНДСДоИзменения");
		ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = "СтавкаНДС";
		ТабличнаяЧасть.Колонки.СтавкаНДСДоИзмененияСтрокой.Имя = "СтавкаНДСДоИзменения";
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КлючевыеПоля = "", КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки,
		КлючевыеПоля, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Процедура ЗаполнитьЭквайринговыйТерминал(ДанныеИБ)
	ЭквайринговыйТерминал = Неопределено;
		Если ЗначениеЗаполнено(ДанныеИБ.КассаККМ) Тогда
			ЭквайринговыйТерминал = Справочники.СпособыОплаты.ПолучитьЭквайринговыйТерминалПоУмолчанию(ДанныеИБ.КассаККМ);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Для каждого СтрокаТаблицы Из ДанныеИБ.БезналичнаяОплата Цикл
				Если СтрокаТаблицы.ВидОплаты = Перечисления.ВидыБезналичныхОплат.БанковскаяКарта Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЭквайринговыйТерминал) Тогда
						СтрокаТаблицы.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
						
						Если ЭквайринговыйТерминал.ВидыПлатежныхКарт.Количество() > 0
							И ЗначениеЗаполнено(ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ВидПлатежнойКарты) Тогда
							СтрокаТаблицы.ВидПлатежнойКарты = ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ВидПлатежнойКарты;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
КонецПроцедуры
Процедура ЗарегистрироватьПродукциюИСМП(КомпонентыОбмена)
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Настройки.ВидПродукции КАК ВидПродукции
		|ПОМЕСТИТЬ втВидыПродукцииИС
		|ИЗ
		|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК Настройки
		|ГДЕ
		|	Настройки.ВестиУчетПродукции
		|	И Настройки.ДатаОбязательнойМаркировки = НАЧАЛОПЕРИОДА(&ДатаСеансаОбмена, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидыПродукцииИС КАК ВидыПродукцииИС
		|		ПО (ВидыПродукцииИС.ВидПродукции = Номенклатура.ВидПродукцииИС)
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаСеансаОбмена", ТекущаяДатаСеанса());
	
	МассивОбъектыДляРегистрации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если МассивОбъектыДляРегистрации.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(КомпонентыОбмена.УзелКорреспондента, МассивОбъектыДляРегистрации);
	КонецЕсли;
КонецПроцедуры
Функция ИмяПКОДляГруппыАналитическогоУчета(КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ПереноситьКатегорииКакВидыНоменклатуры Тогда
		ИмяПКО = "Справочник_НаправленияДеятельностиНГ_Отправка";
	Иначе
		ИмяПКО = "Справочник_НоменклатурныеГруппы_Отправка";
	КонецЕсли;
		
	Возврат ИмяПКО;
КонецФункции
Функция ИмяПКОДляДокумента(Документ)
	ТипСсылки = ТипЗнч(Документ);
		ИмяПКО = "";
		
		Если ТипСсылки = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
				ИмяПКО = "Документ_ЗаказНарядРасходнаяНакладная_Отправка";
			Иначе
				ИмяПКО = "Документ_ЗаказПокупателя_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
				ИмяПКО = "Документ_РасходнаяНакладная_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку Тогда
				ИмяПКО = "Документ_ПередачаПереработчику_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки Тогда
				ИмяПКО = "Документ_ВозвратСырьяДавальцу_Отправка";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_РасходнаяНакладная_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
				ИмяПКО = "Документ_ПриходнаяНакладная_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
				ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку Тогда
				ИмяПКО = "Документ_ПоступлениеСырьяОтДавальца_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика Тогда
				ИмяПКО = "Документ_ВозвратСырьяОтПереработчика_Отправка";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_ПриходнаяНакладная_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			
			ИмяПКО = "Документ_АктВыполненныхРабот_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
			
			ИмяПКО = "Документ_ДополнительныеРасходы_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПереоценкаВРозницеСуммовойУчет") Тогда
			
			ИмяПКО = "Документ_ПереоценкаВРозницеСуммовойУчет_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			
			ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			
			ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			
			ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
			
			ИмяПКО = "Документ_ОтчетОПереработке_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
			
			ИмяПКО = "Документ_ОтчетПереработчика_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			
			ИмяПКО = "Документ_ПлатежноеПоручение_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам Тогда
				
				ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника
				Или Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником Тогда
				
				ИмяПКО = "Документ_ПБДСРасчетыССотрудниками_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
				
				ИмяПКО = "Документ_ПБДСКонвертацияВалюты_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
				
				Если Документ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы
					ИЛИ СтрНайти(Документ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
					ИмяПКО = "Документ_ПБДСПрочиеДоходы_Отправка";
				Иначе
					ИмяПКО = "Документ_ПБДСПрочееПоступление_Отправка";
				КонецЕсли;
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги Тогда
				
				ИмяПКО = "Документ_ПБДСПрочееПоступление_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
				
				ИмяПКО = "Документ_ПБДСПоПлатежнымКартам_Отправка";
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РасходСоСчета") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
				
				ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику
				Или Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику Тогда
				
				ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
				
				ИмяПКО = "Документ_СБДСПеречислениеЗаработнойПлаты_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
				
				ИмяПКО = "Документ_СБДСПлатежиВБюджет_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
				
				Если Документ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
					ИЛИ СтрНайти(Документ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
					ИмяПКО = "Документ_СБДСПрочиеРасходы_Отправка";
				Иначе
					ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
				КонецЕсли;
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты Тогда
				
				ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
				
				ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам Тогда
				
				ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
				
				Если Документ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеДоходы
					ИЛИ СтрНайти(Документ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
					ИмяПКО = "Документ_ПКОПрочиеДоходы_Отправка";
				Иначе
					ИмяПКО = "Документ_ПКОПрочееПоступление_Отправка";
				КонецЕсли;
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника
				Или Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
				
				ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты Тогда
				
				ИмяПКО = "Документ_ПКОПрочееПоступление_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда 
				
				ИмяПКО = "Документ_ПКОРозничнаяВыручка_Отправка";
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РасходИзКассы") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
				
				ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
				
				ИмяПКО = "Документ_РКОВыплатаЗарплаты_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
				
				Если Документ.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.ПрочиеРасходы
					ИЛИ СтрНайти(Документ.Статья.КорреспондирующийСчет, "91") > 0 Тогда
					ИмяПКО = "Документ_РКОПрочийРасход_Отправка";
				Иначе
					ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
				КонецЕсли;
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
				ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
				
				ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику
				Или Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
				
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
				
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
				
				ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
				ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			
			ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПеремещениеДС") Тогда
			
			Если Документ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные
				И Документ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Наличные Тогда
				
				ИмяПКО = "Документ_ПДС_ПолучениеНаличныхВБанке_Отправка";
				
			ИначеЕсли Документ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные
				И Документ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
				
				ИмяПКО = "Документ_ПДС_НаБанковскийСчет_Отправка";
				
			ИначеЕсли Документ.ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные
				И Документ.ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
				
				ИмяПКО = "Документ_ПДС_ПереводНаДругойСчет_Отправка";
				
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетНаОплату") Тогда
			
			ИмяПКО = "Документ_СчетНаОплатуПокупателю_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
			ИмяПКО = "Документ_СчетНаОплатуПоставщика_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетФактура") Тогда
			
			ИмяПКО = "Документ_СчетФактураВыданный_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			ИмяПКО = "Документ_СчетФактураПолученный_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Взаимозачет") Тогда
			
			ИмяПКО = "Документ_Взаимозачет_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПрочиеРасходы") Тогда
			
			ИмяПКО = "Документ_ПрочиеРасходы_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
			
			ИмяПКО = "Документ_ИнвентаризацияЗапасов_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОприходованиеЗапасов") Тогда
			
			ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение Тогда
				ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы Тогда
				ИмяПКО = "Документ_ПеремещениеЗапасов_НаРасходы_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию Тогда
				ИмяПКО = "Документ_ПеремещениеЗапасов_ВЭксплуатацию_Отправка";
			ИначеЕсли Документ.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ВозвратИзЭксплуатации Тогда
				ИмяПКО = "Документ_ПеремещениеЗапасовИзЭксплуатации_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СписаниеЗапасов") Тогда
			
			Если Документ.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение
				И Документ.СписатьЗапасыИзЭксплуатации Тогда
				ИмяПКО = "Документ_СписаниеЗапасов_ИзЭксплуатации";
			Иначе
				ИмяПКО = "Документ_СписаниеТоваров_Отправка";
			КонецЕсли;
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СборкаЗапасов") Тогда
			
			ИмяПКО = "Документ_Производство_Отправка";
				
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РаспределениеЗатрат") Тогда
			
			ИмяПКО = "Документ_РаспределениеЗатрат_Отправка";
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		
			ИмяПКО = "Документ_ПередачаТоваровРеализация_Отправка";
			
		КонецЕсли;
		
		Возврат ИмяПКО;
КонецФункции
Функция КассаККМПоСтруктурнойЕдинице(СтруктурнаяЕдиница)
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
		
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
КонецФункции
Функция МассивТоваровОсобогоРежима()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СпециальныйНалоговыйРежимПСН", Перечисления.СпециальныеНалоговыеРежимы.ПСН);
	Запрос.УстановитьПараметр("ПустаяКатегорияНоменклатуры", Справочники.КатегорииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяГруппаНоменклатуры", Справочники.Номенклатура.ПустаяСсылка());
	
	Запрос.Текст = "  ВЫБРАТЬ
	|	НастройкиРМКРаспределениеНоменклатуры.ГруппаНоменклатуры КАК ГруппаНоменклатуры,
	|	НастройкиРМКРаспределениеНоменклатуры.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	НастройкиРМКРаспределениеНоменклатуры.Ссылка.РабочееМесто КАК РабочееМесто
	|ПОМЕСТИТЬ КатегорииГруппыПСН
	|ИЗ
	|	Справочник.НастройкиРМК.РаспределениеНоменклатуры КАК НастройкиРМКРаспределениеНоменклатуры
	|ГДЕ
	|	НастройкиРМКРаспределениеНоменклатуры.СпециальныйНалоговыйРежим = &СпециальныйНалоговыйРежимПСН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КатегорииГруппыПСН.ГруппаНоменклатуры КАК ГруппаНоменклатуры
	|ПОМЕСТИТЬ ГруппыПСН
	|ИЗ
	|	КатегорииГруппыПСН КАК КатегорииГруппыПСН
	|ГДЕ
	|	КатегорииГруппыПСН.ГруппаНоменклатуры <> &ПустаяГруппаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	КатегорииГруппыПСН КАК КатегорииГруппыПСН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (ВЫБОР
	|				КОГДА КатегорииГруппыПСН.КатегорияНоменклатуры <> &ПустаяКатегорияНоменклатуры
	|					ТОГДА КатегорииГруппыПСН.КатегорияНоменклатуры = Номенклатура.КатегорияНоменклатуры
	|				КОГДА КатегорииГруппыПСН.ГруппаНоменклатуры <> &ПустаяГруппаНоменклатуры
	|					ТОГДА Номенклатура.Ссылка В ИЕРАРХИИ
	|							(ВЫБРАТЬ
	|								ГруппыПСН.ГруппаНоменклатуры КАК ГруппаНоменклатуры
	|							ИЗ
	|								ГруппыПСН КАК ГруппыПСН)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТаблицаРезультата = Результат.Выгрузить();
		Возврат ТаблицаРезультата.ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
КонецФункции
Функция МассивЧековОРП(ОРП, КромеЧеков54ФЗ = Истина, Патент = Неопределено)
	МассивЧеков = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.КассоваяСмена = &КассоваяСмена
		|	И ВЫБОР
		|			КОГДА &ЕстьПатент = ИСТИНА
		|				ТОГДА ЧекККМ.Патент = &Патент
		|			КОГДА &ЕстьПатент = ЛОЖЬ
		|				ТОГДА ЧекККМ.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозврат.Ссылка
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
		|	И ВЫБОР
		|			КОГДА &ЕстьПатент = ИСТИНА
		|				ТОГДА ЧекККМВозврат.Патент = &Патент
		|			КОГДА &ЕстьПатент = ЛОЖЬ
		|				ТОГДА ЧекККМВозврат.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("КассоваяСмена", ОРП);
		Запрос.УстановитьПараметр("ЕстьПатент", ЗначениеЗаполнено(Патент));
		Запрос.УстановитьПараметр("Патент", Патент);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если КромеЧеков54ФЗ = Истина Тогда
				Если НЕ ЭтоЧек54ФЗ(Выборка.Ссылка) Тогда
					МассивЧеков.Добавить(Выборка.Ссылка);
				КонецЕсли;
			Иначе
				МассивЧеков.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Возврат МассивЧеков;
КонецФункции
Функция НайтиСоздатьКонтрагентаПоПолямПоиска(КомпонентыОбмена, Наименование, Телефон, Почта, ИдентификаторКонтрагента)
	Если ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
		НайденныйКонтрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКонтрагента));
		Если НайденныйКонтрагент <> Неопределено Тогда
			Возврат НайденныйКонтрагент
		КонецЕсли;
	КонецЕсли;
			
	НайденныйКонтакт = Неопределено;
	Если ЗначениеЗаполнено(Телефон) Тогда
		НайденныйКонтакт = ТелефонияСервер.ПолучитьАбонентаПоНомеруТелефона(Телефон, Истина, Истина, Ложь);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НайденныйКонтакт) Тогда
		НайденныйКонтакт = КонтактнаяИнформацияУНФ.КонтрагентПоАдресуЭП(Почта, Истина, Истина);
	КонецЕсли;
	
	Контрагент = Неопределено;
	Если ТипЗнч(НайденныйКонтакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		СвязанныеКонтрагенты = Справочники.КонтактныеЛица.СвязанныеКонтрагенты(НайденныйКонтакт);
		Если СвязанныеКонтрагенты.Количество() <> 0 Тогда
			Контрагент = СвязанныеКонтрагенты[0];
		КонецЕсли;
	ИначеЕсли ТипЗнч(НайденныйКонтакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		Контрагент = НайденныйКонтакт;
	КонецЕсли;
	
	Если Контрагент <> Неопределено Тогда
		Возврат Контрагент;
	КонецЕсли;
	
	КонтактОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
	КонтактОбъект.Наименование = Наименование;
	Если ЗначениеЗаполнено(Телефон) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтактОбъект, Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	КонецЕсли;
	Если ЗначениеЗаполнено(Почта) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтактОбъект, Почта, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
	КонецЕсли;
	КонтактОбъект.Заполнить(Неопределено);
	КонтактОбъект.Записать();
	
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	КонтрагентОбъект.Покупатель = Истина;
	КонтрагентОбъект.Наименование = Наименование;
	КонтрагентОбъект.Заполнить(Неопределено);
	КонтрагентОбъект.Записать();
	
	РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(КонтрагентОбъект.Ссылка, КонтактОбъект.Ссылка);
	
	КомпонентыОбмена.ПараметрыКонвертации.ОбъектыДляПовторнойРегистрацииПослеПолучения.Добавить(КонтрагентОбъект.Ссылка);
	
	Возврат КонтрагентОбъект.Ссылка;
КонецФункции
Функция НомерГТДДляОтправки(НомерГТДСсылка, СтранаПроисхождения, ПрослеживаемыйТовар, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(НомерГТДСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		
		РеквизитыГТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НомерГТДСсылка, "Код,Описание");
		
		лСтранаВвозаНеРФ = ЗначениеЗаполнено(СтранаПроисхождения)
			И СтранаПроисхождения <> Справочники.СтраныМира.Россия;
		
		Значение = Новый Структура;
		Значение.Вставить("Ссылка", НомерГТДСсылка);
		Значение.Вставить("НомерГТД", Сред(РеквизитыГТД.Код,1,30));
		Значение.Вставить("Комментарий", РеквизитыГТД.Описание);
		Значение.Вставить("СтранаВвозаНеРФ", лСтранаВвозаНеРФ);
		Значение.Вставить("СтранаПроисхождения", СтранаПроисхождения);
		Значение.Вставить("ЯвляетсяРНПТ", ПрослеживаемыйТовар);
		
		Возврат Новый Структура("ИмяПКО,Значение", "Справочник_НомераГТД_ИзСтруктуры_Отправка", Значение);	
		
	Иначе
		
		лНомерГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НомерГТДСсылка, "Код");
			
		Возврат Сред(лНомерГТД, 1, 30);
		
	КонецЕсли;
КонецФункции
Процедура ОбработатьНазначениеПлатежа(ДанныеXDTO)
	Попытка
		Если ЗначениеЗаполнено(ДанныеXDTO.НазначениеПлатежа) Тогда
			ДанныеXDTO.НазначениеПлатежа = Лев(ДанныеXDTO.НазначениеПлатежа,250)
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры
Процедура ОбработатьРасшифровкуПлатежа(Объект)
	Если ЗначениеЗаполнено(Объект.Контрагент)
			И ОбщегоНазначения.СсылкаСуществует(Объект.Контрагент) Тогда
	
			ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
			ВестиРасчетыПоДоговорам = Объект.Контрагент.ВестиРасчетыПоДоговорам;
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Объект.Контрагент);
		Иначе
			ВестиРасчетыПоДокументам = Ложь;
			ВестиРасчетыПоДоговорам = Ложь;
			ДоговорПоУмолчанию = Неопределено;
		КонецЕсли;
		
		// Заполнение обязательных реквизитов.
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
				Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
				Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
				Строка.Кратность = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.СуммаНДС)
				И ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				РассчитатьСуммуНДСВСтрокеДДС(Строка);	
			КонецЕсли;
			
			Если ВестиРасчетыПоДокументам
				И (Не ЗначениеЗаполнено(Строка.Документ) 
					ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.Документ = Неопределено;
			КонецЕсли;
			
			Если Не ВестиРасчетыПоДоговорам Тогда
				Строка.Договор = ДоговорПоУмолчанию;
			КонецЕсли;	
			
		КонецЦикла;
КонецПроцедуры
Функция ОбъектСуществуетВБазе(Ссылка)
	Попытка
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|ИСТИНА
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
		
	Возврат Не Запрос.Выполнить().Пустой();
	
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции
Процедура ОпределитьУчетВУСН(Объект)
	Если Не ЗначениеЗаполнено(Объект.КассаККМ) Тогда
			Объект.УчитыватьВНУ = Истина;
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Склад", Объект.КассаККМ.СтруктурнаяЕдиница);
		
		Если ЗначениеЗаполнено(Объект.Дата) Тогда
			Запрос.УстановитьПараметр("Дата",Объект.Дата);
		Иначе
			Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД КАК ЕНВД
		|ИЗ
		|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И СтруктурнаяЕдиница = &Склад) КАК ПримененияЕНВД
		|ГДЕ
		|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД";
		
		Выборка = Запрос.Выполнить();
		
		Если Выборка.Пустой() Тогда
			Объект.УчитыватьВНУ = Истина;
		Иначе
			Объект.УчитыватьВНУ = Ложь;
		КонецЕсли;
КонецПроцедуры
Процедура ОтключениеПКОНеДоступныхВРознице(КомпонентыОбмена)
	Если ОбщегоНазначенияУНФ.ЭтоРозница()
		И КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		
		ДоступностьОбъектов = Новый Соответствие;
		МассивКонстант = ВозможностиПриложения.КонстантыНедоступныеДляВключенияВРознице();
		
		Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
			
			Если МассивКонстант.Найти(ФункциональнаяОпция.Хранение.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = -1;
			Для Каждого Элемент Из ФункциональнаяОпция.Состав Цикл
				Если Элемент.Объект = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Значение = -1 Тогда
					Значение = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя);
				КонецЕсли;
				ПолноеИмя = Элемент.Объект.ПолноеИмя();
				Если Значение = Истина Тогда
					ДоступностьОбъектов.Вставить(ПолноеИмя, Истина);
				Иначе
					Если ДоступностьОбъектов[ПолноеИмя] = Неопределено Тогда
						ДоступностьОбъектов.Вставить(ПолноеИмя, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
		Для каждого СтрокаПКО Из КомпонентыОбмена.ПравилаКонвертацииОбъектов Цикл
			
			Если ДоступностьОбъектов.Получить(СтрокаПКО.ПолноеИмя) = Ложь Тогда
	
				СтрокаПОД = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(СтрокаПКО.ОбъектФормата, "ОбъектВыборкиФормат");
				
				Если СтрокаПОД <> Неопределено Тогда
					ИндексПКО = СтрокаПОД.ИспользуемыеПКО.Найти(СтрокаПКО.ИмяПКО);
					Если ИндексПКО <> Неопределено Тогда
						СтрокаПОД.ИспользуемыеПКО.Удалить(ИндексПКО);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЗаказПокупателя(Объект, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = ДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	КонецЕсли;
	
	СформироватьСсылкуДляОплатыВПриложении = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("СформироватьСсылкуДляОплатыВПриложении", СформироватьСсылкуДляОплатыВПриложении);
	Если СформироватьСсылкуДляОплатыВПриложении = Истина Тогда
		Объект.СформироватьПлатежнуюСсылку();
		КомпонентыОбмена.ПараметрыКонвертации.ОбъектыДляПовторнойРегистрацииПослеПолучения.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	КомпонентыОбмена.ПараметрыКонвертации.НовыеЗаказыПокупателей.Добавить(Объект.Ссылка);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОРП(Объект, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
		ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
			|	ЧекККМ.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЧекККМ КАК ЧекККМ
			|ГДЕ
			|	(ЧекККМ.Статус = &Статус
			|			ИЛИ ЧекККМ.НомерЧекаККМ > 0)
			|	И ЧекККМ.КассаККМ = &КассаККМ
			|	И ЧекККМ.КассоваяСмена = &ПустойОРП
			|	И НЕ ЧекККМ.Архивный
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЧекККМВозврат.Ссылка
			|ИЗ
			|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
			|ГДЕ
			|	ЧекККМВозврат.КассаККМ = &КассаККМ
			|	И ЧекККМВозврат.КассоваяСмена = &ПустойОРП
			|	И НЕ ЧекККМВозврат.Архивный
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЧекККМ.Ссылка
			|ИЗ
			|	Документ.ЧекККМ КАК ЧекККМ
			|ГДЕ
			|	(ЧекККМ.Статус = &Статус
			|			ИЛИ ЧекККМ.НомерЧекаККМ > 0)
			|	И ЧекККМ.КассаККМ = &КассаККМ
			|	И ЧекККМ.КассоваяСмена = &ОРП
			|	И НЕ ЧекККМ.Архивный
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЧекККМВозврат.Ссылка
			|ИЗ
			|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
			|ГДЕ
			|	ЧекККМВозврат.КассаККМ = &КассаККМ
			|	И ЧекККМВозврат.КассоваяСмена = &ОРП
			|	И НЕ ЧекККМВозврат.Архивный";
	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЧековККМ.Пробит);
		Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
		Запрос.УстановитьПараметр("ОРП", Объект.Ссылка);
		Запрос.УстановитьПараметр("ПустойОРП", Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			ЧекОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЧекОбъект.КассоваяСмена = Объект.Ссылка;
			ЧекОбъект.Архивный = Истина;
			ЧекОбъект.Записать(РежимЗаписиДокумента.Запись); 
		
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Объект.КассоваяСмена) И Объект.КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда 
			КассоваяСменаОбъект = Объект.КассоваяСмена.ПолучитьОбъект();
			КассоваяСменаОбъект.Статус = Перечисления.СтатусыКассовойСмены.Закрыта;
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПБДС(Объект)
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Курс) Тогда
			ВалютаУчетаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
		    Объект.Курс = ВалютаУчетаКурсКратность.Курс;
		    Объект.Кратность = ВалютаУчетаКурсКратность.Кратность;
		КонецЕсли;
		
		Объект.Курс = ?(Объект.Курс = 0, 1, Объект.Курс);
		Объект.Кратность = ?(Объект.Кратность = 0, 1, Объект.Кратность);
		
		// Очистка реквизитов не используемых для видов операций.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника Тогда
			Объект.Корреспонденция = Неопределено;
			Объект.Контрагент = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам Тогда
			
			Объект.Документ = Неопределено;
			
			ЗаполнитьДоговорКредитаИЗаймаПоУмолчанию(Объект);
			
			Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТаблицы.Договор = Неопределено;
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТипСуммы) Тогда
					СтрокаТаблицы.ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
				КонецЕсли;
				Если СтрокаТаблицы.СуммаРасчетов = 0 Тогда
					СтрокаТаблицы.СуммаРасчетов = СтрокаТаблицы.СуммаПлатежа;
					СтрокаТаблицы.Курс = 1;
					СтрокаТаблицы.Кратность = 1;
				КонецЕсли;
			КонецЦикла;
				
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
			
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			
			Если Объект.РасшифровкаПлатежа.Количество() <> 1 Тогда
				Объект.РасшифровкаПлатежа.Очистить();
				
				НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
				НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
				НоваяСтрока.Курс = 1;
				НоваяСтрока.Кратность = 1;
				НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			КонецЕсли;
			
			ВалютаУчетаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.ВалютаУчета.Получить()));
			
			КурсВалютыУчета = ?(ВалютаУчетаКурсКратность.Курс = 0, 1, ВалютаУчетаКурсКратность.Курс);
			КратностьВалютыУчета = ?(ВалютаУчетаКурсКратность.Курс = 0, 1, ВалютаУчетаКурсКратность.Кратность);
			
			Объект.СуммаУчета = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				Объект.СуммаДокумента,
				Объект.Курс,
				КурсВалютыУчета,
				Объект.Кратность,
				КратностьВалютыУчета);
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
			
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.Корреспонденция = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			
			Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Объект.ЭквайринговыйТерминал = Справочники.СпособыОплаты.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(Объект.БанковскийСчет, Объект.Организация, Объект.Контрагент);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
			
		// Заполнение значений по умолчанию.
		Если Не ЗначениеЗаполнено(Объект.Статья) Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
			Иначе
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеДоходы;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция)
				ИЛИ Объект.Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Дебиторы Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОтПродажиВалюты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение режима налогообложения.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
		Иначе
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		
		// Обработка строк ТЧ.
		ВедутсяРасчетыПоДокументам = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ВестиРасчетыПоДокументам;
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
			    Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
			    Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
			    Строка.Кратность = 1;
			КонецЕсли;
			
			Если ВедутсяРасчетыПоДокументам
				И Не (ЗначениеЗаполнено(Строка.Документ) И ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.ПризнакАванса = Истина;
				Строка.Документ = Неопределено;
			КонецЕсли;
		КонецЦикла;
			
		УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКО(Объект)
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Объект.Курс) Тогда
			ВалютаУчетаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
		    Объект.Курс = ВалютаУчетаКурсКратность.Курс;
		    Объект.Кратность = ВалютаУчетаКурсКратность.Кратность;
		КонецЕсли;
		
		Объект.Курс = ?(Объект.Курс = 0, 1, Объект.Курс);
		Объект.Кратность = ?(Объект.Кратность = 0, 1, Объект.Кратность);
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника Тогда
			Объект.Корреспонденция = Неопределено;
			Объект.Контрагент = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			
			Если Не ЗначениеЗаполнено(Объект.Документ)
				И ЗначениеЗаполнено(Объект.Подотчетник) Тогда
				ЗаполнитьДокументВыдачиДенег(Объект);
			КонецЕсли;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам Тогда
			
			Объект.Документ = Неопределено;
			
			ЗаполнитьДоговорКредитаИЗаймаПоУмолчанию(Объект);
			
			Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТаблицы.Договор = Неопределено;
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТипСуммы) Тогда
					СтрокаТаблицы.ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
				КонецЕсли;
				Если СтрокаТаблицы.СуммаРасчетов = 0 Тогда
					СтрокаТаблицы.СуммаРасчетов = СтрокаТаблицы.СуммаПлатежа;
					СтрокаТаблицы.Курс = 1;
					СтрокаТаблицы.Кратность = 1;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты Тогда
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			Договор = Неопределено;
			Если Не ЗначениеЗаполнено(Договор)
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Договор = ДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
			КонецЕсли;
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Договор = Договор;
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
				И Не ЗначениеЗаполнено(Объект.КассаККМ) Тогда
				ЗаполнитьКассуККМПоУмолчанию(Объект);
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты Тогда
			
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			
			Если Объект.РасшифровкаПлатежа.Количество() <> 1 Тогда
				Объект.РасшифровкаПлатежа.Очистить();
				
				НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
				НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
				НоваяСтрока.Курс = 1;
				НоваяСтрока.Кратность = 1;
				НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			КонецЕсли;
			
			ВалютаУчетаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.ВалютаУчета.Получить()));
			
			КурсВалютыУчета = ?(ВалютаУчетаКурсКратность.Курс = 0, 1, ВалютаУчетаКурсКратность.Курс);
			КратностьВалютыУчета = ?(ВалютаУчетаКурсКратность.Курс = 0, 1, ВалютаУчетаКурсКратность.Кратность);
			
			Объект.СуммаУчета = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(
				Объект.СуммаДокумента,
				Объект.Курс,
				КурсВалютыУчета,
				Объект.Кратность,
				КратностьВалютыУчета);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
			
		// Заполнение значений по умолчанию.
		Если Не ЗначениеЗаполнено(Объект.Статья) Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
			Иначе
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
			ЗаполнитьКассуПоУмолчанию(Объект);
		КонецЕсли;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеДоходы;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция)
				ИЛИ Объект.Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Дебиторы Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПереводыВПути;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение режима налогообложения.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда
			Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка Тогда
			Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.КассаККМ.СтруктурнаяЕдиница, Объект.Дата);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
			Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		Иначе
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		
		// Обработка строк ТЧ.
		ВедутсяРасчетыПоДокументам = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ВестиРасчетыПоДокументам;
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
			    Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
			    Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
			    Строка.Кратность = 1;
			КонецЕсли;
			
			Если ВедутсяРасчетыПоДокументам
				И Не (ЗначениеЗаполнено(Строка.Документ) И ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.ПризнакАванса = Истина;
				Строка.Документ = Неопределено;
			КонецЕсли;
		КонецЦикла;
			
		УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_РКО(Объект)
	Если Объект.РасшифровкаПлатежа.Количество() = 0
			И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику Тогда
			Объект.Корреспонденция = Неопределено;
			Объект.Контрагент = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			Объект.ВидНалога = Неопределено;
			Объект.ВыплатаЗаработнойПлаты.Очистить();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
			
			Объект.Документ = Неопределено;
			Объект.ВидНалога = Неопределено;
			
			ЗаполнитьДоговорКредитаИЗаймаПоУмолчанию(Объект);
			
			Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТаблицы.Договор = Неопределено;
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТипСуммы) Тогда
					СтрокаТаблицы.ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
				КонецЕсли;
				Если СтрокаТаблицы.СуммаРасчетов = 0 Тогда
					СтрокаТаблицы.СуммаРасчетов = СтрокаТаблицы.СуммаПлатежа;
					СтрокаТаблицы.Курс = 1;
					СтрокаТаблицы.Кратность = 1;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			Договор = Неопределено;
			Если Не ЗначениеЗаполнено(Договор)
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Договор = ДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
			КонецЕсли;
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Договор = Договор;
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.ВидНалога = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			Объект.ВыплатаЗаработнойПлаты.Очистить();
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.Корреспонденция = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
		
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
			
			Если Не ЗначениеЗаполнено(Объект.КассаККМ) Тогда
				ЗаполнитьКассуККМПоУмолчанию(Объект);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
		
		// Заполнение значений по умолчанию.
		Если Не ЗначениеЗаполнено(Объект.Статья) Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
			Иначе
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
			ЗаполнитьКассуПоУмолчанию(Объект);
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция)
				ИЛИ Объект.Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Кредиторы Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.РасчетыСРазнымиКредиторами;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение режима налогообложения.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
			Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
		Иначе
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		
		// Обработка строк ТЧ.
		ВедутсяРасчетыПоДокументам = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ВестиРасчетыПоДокументам;
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
			    Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
			    Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
			    Строка.Кратность = 1;
			КонецЕсли;
			
			Если ВедутсяРасчетыПоДокументам
				И Не (ЗначениеЗаполнено(Строка.Документ) И ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.ПризнакАванса = Истина;
				Строка.Документ = Неопределено;
			КонецЕсли;
		КонецЦикла;
			
		УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СБДС(Объект)
	Если Объект.РасшифровкаПлатежа.Количество() = 0
			И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		// Очистка реквизитов не используемых для видов операций.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда
			Объект.Корреспонденция = Неопределено;
			Объект.Контрагент = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			Объект.ВидНалога = Неопределено;
			Объект.ВыплатаЗаработнойПлаты.Очистить();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
			
			Объект.Документ = Неопределено;
			Объект.ВидНалога = Неопределено;
			
			ЗаполнитьДоговорКредитаИЗаймаПоУмолчанию(Объект);
			
			Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТаблицы.Договор = Неопределено;
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТипСуммы) Тогда
					СтрокаТаблицы.ТипСуммы = Перечисления.ТипыСуммГрафикаКредитовИЗаймов.ОсновнойДолг;
				КонецЕсли;
				Если СтрокаТаблицы.СуммаРасчетов = 0 Тогда
					СтрокаТаблицы.СуммаРасчетов = СтрокаТаблицы.СуммаПлатежа;
					СтрокаТаблицы.Курс = 1;
					СтрокаТаблицы.Кратность = 1;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
			
			Объект.РасшифровкаПлатежа.Очистить();
			
			Договор = Неопределено;
			Если Не ЗначениеЗаполнено(Договор)
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Договор = ДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
			КонецЕсли;
			
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Договор = Договор;
			НоваяСтрока.СуммаРасчетов = Объект.СуммаДокумента;
			НоваяСтрока.Курс = 1;
			НоваяСтрока.Кратность = 1;
			НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
			Объект.Контрагент = Неопределено;
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.ВидНалога = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.Корреспонденция = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
			
			Объект.Подотчетник = Неопределено;
			Объект.Документ = Неопределено;
			Объект.Корреспонденция = Неопределено;
			Объект.РасшифровкаПлатежа.Очистить();
			
			Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Объект.ЭквайринговыйТерминал = Справочники.СпособыОплаты.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(Объект.БанковскийСчет, Объект.Организация, Объект.Контрагент);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
			
		// Заполнение значений по умолчанию.
		Если Не ЗначениеЗаполнено(Объект.Статья) Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
			Иначе
				Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция) Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты Тогда
			Если Не ЗначениеЗаполнено(Объект.Корреспонденция)
				ИЛИ Объект.Корреспонденция.ТипСчета <> Перечисления.ТипыСчетов.Кредиторы Тогда
				Объект.Корреспонденция = ПланыСчетов.Управленческий.РасчетыСРазнымиКредиторами;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение режима налогообложения.
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
		Иначе
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		
		// Обработка строк ТЧ.
		ВедутсяРасчетыПоДокументам = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент.ВестиРасчетыПоДокументам;
		Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				
			Если Не ЗначениеЗаполнено(Строка.СуммаРасчетов) Тогда
			    Строка.СуммаРасчетов = Строка.СуммаПлатежа;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Курс) Тогда
			    Строка.Курс = 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.Кратность) Тогда
			    Строка.Кратность = 1;
			КонецЕсли;
			
			Если ВедутсяРасчетыПоДокументам
				И Не (ЗначениеЗаполнено(Строка.Документ) И ОбщегоНазначения.СсылкаСуществует(Строка.Документ)) Тогда
				Строка.ПризнакАванса = Истина;
				Строка.Документ = Неопределено;
			КонецЕсли;
		КонецЦикла;
	
			
		УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ЧекККМ(Объект, КомпонентыОбмена)
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
		Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменМК"
			ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки = "ОбменКасса" Тогда 
			Если НЕ ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
				
				ЗапросЧековПродажи = Новый Запрос;
				ЗапросЧековПродажи.Текст = "ВЫБРАТЬ
				|	ЧекККМВозвратЗапасы.Номенклатура КАК Номенклатура,
				|	ЧекККМВозвратЗапасы.Характеристика КАК Характеристика,
				|	ЧекККМВозвратЗапасы.Цена КАК Цена,
				|	ЧекККМВозвратЗапасы.Количество КАК Количество
				|ПОМЕСТИТЬ ВТЗапасыВозврата
				|ИЗ
				|	&ЧекККМВозвратЗапасы КАК ЧекККМВозвратЗапасы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЧекККМ.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ВТЧекиПродажи
				|ИЗ
				|	Документ.ЧекККМ КАК ЧекККМ
				|ГДЕ
				|	ЧекККМ.Статус = &СтатусПробит
				|	И ЧекККМ.Проведен
				|	И ЧекККМ.КассаККМ = &КассаККМ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЧекККМЗапасы.Ссылка КАК Ссылка,
				|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
				|	ЧекККМЗапасы.Характеристика КАК Характеристика,
				|	ЧекККМЗапасы.Цена КАК цена,
				|	СУММА(ЧекККМЗапасы.Количество) КАК Количество
				|ПОМЕСТИТЬ ВТЗапасыПродажи
				|ИЗ
				|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЧекиПродажи КАК ВТЧекиПродажи
				|		ПО ЧекККМЗапасы.Ссылка = ВТЧекиПродажи.Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ЧекККМЗапасы.Номенклатура,
				|	ЧекККМЗапасы.Характеристика,
				|	ЧекККМЗапасы.Цена,
				|	ЧекККМЗапасы.Ссылка
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Количество,
				|	цена
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПродажиОбороты.Номенклатура КАК Номенклатура,
				|	ПродажиОбороты.Характеристика КАК Характеристика,
				|	ПродажиОбороты.КоличествоОборот КАК КоличествоОборот,
				|	ВТЧекиПродажи.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ВТОстаткиПродаж
				|ИЗ
				|	РегистрНакопления.Продажи.Обороты(, , Период, ) КАК ПродажиОбороты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЧекиПродажи КАК ВТЧекиПродажи
				|		ПО ПродажиОбороты.Документ = ВТЧекиПродажи.Ссылка
				|ГДЕ
				|	ПродажиОбороты.КоличествоОборот > 0
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТЧекиПродажи
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТЗапасыПродажи.Ссылка КАК Ссылка,
				|	ВТЗапасыПродажи.Номенклатура КАК Номенклатура,
				|	ВТЗапасыПродажи.Характеристика КАК Характеристика,
				|	ВЫБОР
				|		КОГДА ВТОстаткиПродаж.КоличествоОборот > ВТЗапасыПродажи.Количество
				|			ТОГДА ВТЗапасыПродажи.Количество
				|		ИНАЧЕ ВТОстаткиПродаж.КоличествоОборот
				|	КОНЕЦ КАК Количество,
				|	ВТЗапасыПродажи.цена КАК цена
				|ПОМЕСТИТЬ ВТЗапасыПродажиСОстатками
				|ИЗ
				|	ВТОстаткиПродаж КАК ВТОстаткиПродаж
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗапасыПродажи КАК ВТЗапасыПродажи
				|		ПО (ВТЗапасыПродажи.Ссылка = ВТОстаткиПродаж.Ссылка)
				|			И (ВТЗапасыПродажи.Номенклатура = ВТОстаткиПродаж.Номенклатура)
				|			И (ВТЗапасыПродажи.Характеристика = ВТОстаткиПродаж.Характеристика)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТОстаткиПродаж
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТЗапасыПродажи
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТЗапасыПродажиСОстатками.Ссылка КАК Ссылка,
				|	ВТЗапасыВозврата.Номенклатура КАК Номенклатура,
				|	ВТЗапасыВозврата.Характеристика КАК Характеристика,
				|	ВТЗапасыВозврата.Цена КАК Цена,
				|	ВТЗапасыВозврата.Количество КАК КоличествоВозврата,
				|	ВТЗапасыПродажиСОстатками.Количество КАК КоличествоПродаж,
				|	ВЫБОР
				|		КОГДА ВТЗапасыПродажиСОстатками.Ссылка ЕСТЬ NULL
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК СтрокаПодходит
				|ПОМЕСТИТЬ ВТСравнениеТаблиц
				|ИЗ
				|	ВТЗапасыВозврата КАК ВТЗапасыВозврата
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапасыПродажиСОстатками КАК ВТЗапасыПродажиСОстатками
				|		ПО (ВТЗапасыПродажиСОстатками.Номенклатура = ВТЗапасыВозврата.Номенклатура)
				|			И (ВТЗапасыПродажиСОстатками.Характеристика = ВТЗапасыВозврата.Характеристика)
				|			И (ВТЗапасыПродажиСОстатками.цена = ВТЗапасыВозврата.Цена)
				|			И (ВТЗапасыПродажиСОстатками.Количество >= ВТЗапасыВозврата.Количество)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТЗапасыВозврата
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТЗапасыПродажиСОстатками
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СУММА(ВТСравнениеТаблиц.СтрокаПодходит) КАК СтрокаПодходит,
				|	ВТСравнениеТаблиц.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ВТПодходящиеЧеки
				|ИЗ
				|	ВТСравнениеТаблиц КАК ВТСравнениеТаблиц
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТСравнениеТаблиц.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	ВТПодходящиеЧеки.Ссылка КАК Ссылка
				|ИЗ
				|	ВТПодходящиеЧеки КАК ВТПодходящиеЧеки
				|ГДЕ
				|	ВТПодходящиеЧеки.СтрокаПодходит >= &КоличествоСтрокВозврата
				|
				|УПОРЯДОЧИТЬ ПО
				|	ВТПодходящиеЧеки.Ссылка.Дата УБЫВ";
				ЧекККМВозвратЗапасы = Объект.Запасы.Выгрузить();   
				ЧекККМВозвратЗапасы.Свернуть("Номенклатура, Характеристика,  Цена","Количество");
				ЗапросЧековПродажи.УстановитьПараметр("ЧекККМВозвратЗапасы", ЧекККМВозвратЗапасы);
				ЗапросЧековПродажи.УстановитьПараметр("СтатусПробит", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит"));
				ЗапросЧековПродажи.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
				ЗапросЧековПродажи.УстановитьПараметр("КоличествоСтрокВозврата", ЧекККМВозвратЗапасы.Количество());
				РезультатЗапроса = ЗапросЧековПродажи.Выполнить(); 
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();   
					Объект.ЧекККМ = Выборка.Ссылка;
					Объект.Записать(РежимЗаписиДокумента.Запись); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	ЭтоЧекУдаленнойФискализации = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ЭтоЧекУдаленнойФискализации", ЭтоЧекУдаленнойФискализации);
	Если ЭтоЧекУдаленнойФискализации = Истина Тогда
		Если ПодключаемоеОборудованиеУНФ.ЕстьККТСАвтоматическойФискализацией(Объект.Организация) Тогда
			ТекстОшибки = "";
			ПодключаемоеОборудованиеУНФ.ДобавитьВОчередьФискализации(Объект.Ссылка, ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ПредупреждениеПриСинхронизации(КомпонентыОбмена, Объект.Ссылка, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ОтчетОРозничныхПродажахПоДаннымВЧеках(ДанныеИБ, МассивЧеков)
	ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	
	
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Подготовка данных.
		// Продажи и возвраты сворачиваем отдельно.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СистемыНалогообложенияОрганизаций.ПлательщикУСН КАК ПлательщикУСН,
		|	СистемыНалогообложенияОрганизаций.Организация КАК Организация
		|ПОМЕСТИТЬ ВТСистемыНалогообложения
		|ИЗ
		|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ТекущаяДата, ) КАК СистемыНалогообложенияОрганизаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЧекиККМИЧекиККМНаВозврат.УчитыватьВНУ) КАК УчитыватьВНУ,
		|	СУММА(ЧекиККМИЧекиККМНаВозврат.ПолученаПредоплата) КАК ПолученаПредоплата
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ЕСТЬNULL(ВТСистемыНалогообложения.ПлательщикУСН, ЛОЖЬ)
		|						И ЧекККМ.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) КАК УчитыватьВНУ,
		|		СУММА(ЧекККМ.СуммаДокумента) КАК ПолученаПредоплата
		|	ИЗ
		|		Документ.ЧекККМ КАК ЧекККМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ВТСистемыНалогообложения
		|			ПО (ВТСистемыНалогообложения.Организация = ЧекККМ.Организация)
		|	ГДЕ
		|		ЧекККМ.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМ.Проведен
		//|		И ЧекККМ.НомерЧекаККМ > 0
		|		И ЧекККМ.ОперацияСДенежнымиСредствами
		|		И ЧекККМ.Ссылка В (&МассивЧеков)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ЕСТЬNULL(ВТСистемыНалогообложения.ПлательщикУСН, ЛОЖЬ)
		|						И ЧекККМВозврат.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ),
		|		СУММА(-ЧекККМВозврат.СуммаДокумента)
		|	ИЗ
		|		Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ВТСистемыНалогообложения
		|			ПО (ВТСистемыНалогообложения.Организация = ЧекККМВозврат.Организация)
		|	ГДЕ
		|		ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМВозврат.Проведен
		//|		И ЧекККМВозврат.НомерЧекаККМ > 0
		|		И ЧекККМВозврат.ОперацияСДенежнымиСредствами
		|		И ЧекККМВозврат.Ссылка В (&МассивЧеков)) КАК ЧекиККМИЧекиККМНаВозврат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЧекККМПредоплата.СуммаРасчетов) КАК СуммаРасчетов
		|ИЗ
		|	Документ.ЧекККМ.Предоплата КАК ЧекККМПредоплата
		|ГДЕ
		|	ЧекККМПредоплата.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И ЧекККМПредоплата.Ссылка.Проведен
		//|	И ЧекККМПредоплата.Ссылка.НомерЧекаККМ > 0
		|	И НЕ ЧекККМПредоплата.Ссылка.ОперацияСДенежнымиСредствами
		|	И ЧекККМПредоплата.Ссылка В (&МассивЧеков)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
		|	ЧекККМЗапасы.Характеристика КАК Характеристика,
		|	ЧекККМЗапасы.Партия КАК Партия,
		|	ЧекККМЗапасы.Количество КАК Количество,
		|	ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЧекККМЗапасы.Цена КАК Цена,
		|	ЧекККМЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМЗапасы.Сумма КАК Сумма,
		|	ЧекККМЗапасы.СуммаНДС КАК СуммаНДС,
		|	ЧекККМЗапасы.Всего КАК Всего,
		|	ЧекККМЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ЧекККМЗапасы.Ячейка КАК Ячейка,
		|	ЧекККМЗапасы.ВалютаДокумента КАК ВалютаДокумента,
		|	ЧекККМЗапасы.ВидЦен КАК ВидЦен,
		|	ЧекККМЗапасы.КассаККМ КАК КассаККМ,
		|	ЧекККМЗапасы.Подразделение КАК Подразделение,
		|	ЧекККМЗапасы.Ответственный КАК Ответственный,
		|	ЧекККМЗапасы.Организация КАК Организация,
		|	ЧекККМЗапасы.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ЧекККМЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ЧекККМЗапасы.Заказ КАК Заказ,
		|	ЧекККМЗапасы.Резерв КАК Резерв,
		|	ЧекККМЗапасы.Возврат КАК Возврат,
		|	ЧекККМЗапасы.НоменклатураНабора КАК НоменклатураНабора,
		|	ЧекККМЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ЧекККМЗапасы.ДоляСтоимости КАК ДоляСтоимости,
		|	ЧекККМЗапасы.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
		|	ЧекККМЗапасы.ДокументПродажи КАК ДокументПродажи,
		|	ЧекККМЗапасы.Контрагент КАК Контрагент,
		|	ЧекККМЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТСистемыНалогообложения.ПлательщикУСН, ЛОЖЬ)
		|				И ЧекККМЗапасы.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьВНУ,
		|	ЧекККМЗапасы.Патент КАК Патент,
		|	ЧекККМЗапасы.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
		|	ВЫБОР
		|		КОГДА &ВестиУчетПрослеживаемыхТоваров
		|			ТОГДА ЧекККМЗапасы.Номенклатура.ПрослеживаемыйТовар
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПрослеживаемыйТовар,
		|	ВЫБОР
		|		КОГДА &ВестиУчетПрослеживаемыхТоваров
		|				И ЧекККМЗапасы.Номенклатура.ПрослеживаемыйТовар
		|			ТОГДА ЧекККМЗапасы.Номенклатура.СтранаПроисхождения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтранаПроисхождения,
		|	ВЫБОР
		|		КОГДА &ВестиУчетПрослеживаемыхТоваров
		|			ТОГДА ЧекККМЗапасы.Номенклатура.ПрослеживаемыйКомплект
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПрослеживаемыйКомплект,
		|	ЧекККМЗапасы.ВозвратБезОснования КАК ВозвратБезОснования
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМЗапасы.Номенклатура КАК Номенклатура,
		|		ЧекККМЗапасы.Характеристика КАК Характеристика,
		|		ЧекККМЗапасы.Партия КАК Партия,
		|		СУММА(ЧекККМЗапасы.Количество) КАК Количество,
		|		ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ЧекККМЗапасы.Цена КАК Цена,
		|		СУММА(ЧекККМЗапасы.СуммаСкидкиНаценки) КАК СуммаСкидкиНаценки,
		|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
		|		ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
		|		СУММА(ЧекККМЗапасы.Сумма) КАК Сумма,
		|		СУММА(ЧекККМЗапасы.СуммаНДС) КАК СуммаНДС,
		|		СУММА(ЧекККМЗапасы.Всего) КАК Всего,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
		|				ТОГДА ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница
		|			ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
		|		КОНЕЦ КАК СтруктурнаяЕдиница,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ячейка
		|			ИНАЧЕ ЧекККМЗапасы.Ячейка
		|		КОНЕЦ КАК Ячейка,
		|		ЧекККМЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|		ЧекККМЗапасы.Ссылка.ВидЦен КАК ВидЦен,
		|		ЧекККМЗапасы.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМЗапасы.Ссылка.Подразделение КАК Подразделение,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеОтветственный В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ответственный
		|			ИНАЧЕ ЧекККМЗапасы.Ответственный
		|		КОНЕЦ КАК Ответственный,
		|		ЧекККМЗапасы.Ссылка.Организация КАК Организация,
		|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|		СУММА(ЧекККМЗапасы.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
		|		ЧекККМЗапасы.Заказ КАК Заказ,
		|		СУММА(ВЫБОР
		|				КОГДА &ЕстьЗаказыИРезерв
		|						И ЧекККМЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|					ТОГДА ЧекККМЗапасы.Резерв
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК Резерв,
		|		0 КАК Возврат,
		|		ЧекККМЗапасы.НоменклатураНабора КАК НоменклатураНабора,
		|		ЧекККМЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|		СУММА(ЧекККМЗапасы.ДоляСтоимости) КАК ДоляСтоимости,
		|		ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка) КАК ДокументПродажи,
		|		ЧекККМЗапасы.Ссылка.Контрагент КАК Контрагент,
		|		СУММА(ЧекККМЗапасы.СуммаСкидкиОплатыБонусом) КАК СуммаСкидкиОплатыБонусом,
		|		ЧекККМЗапасы.Ссылка.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
		|		ЧекККМЗапасы.Ссылка.Патент КАК Патент,
		|		ЧекККМЗапасы.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
		|		ЛОЖЬ КАК ВозвратБезОснования
		|	ИЗ
		|		Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|	ГДЕ
		|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМЗапасы.Ссылка.Проведен
		//|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
		|		И НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
		|		И ЧекККМЗапасы.Ссылка В (&МассивЧеков)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЧекККМЗапасы.Номенклатура,
		|		ЧекККМЗапасы.Характеристика,
		|		ЧекККМЗапасы.Партия,
		|		ЧекККМЗапасы.ЕдиницаИзмерения,
		|		ЧекККМЗапасы.Цена,
		|		ЧекККМЗапасы.Ссылка.ВалютаДокумента,
		|		ЧекККМЗапасы.Ссылка.ВидЦен,
		|		ЧекККМЗапасы.Ссылка.КассаККМ,
		|		ЧекККМЗапасы.Ссылка.Организация,
		|		ЧекККМЗапасы.Ссылка.Подразделение,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеОтветственный В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ответственный
		|			ИНАЧЕ ЧекККМЗапасы.Ответственный
		|		КОНЕЦ,
		|		ЧекККМЗапасы.СтавкаНДС,
		|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта,
		|		ЧекККМЗапасы.Заказ,
		|		ЧекККМЗапасы.НоменклатураНабора,
		|		ЧекККМЗапасы.ХарактеристикаНабора,
		|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки,
		|		ЧекККМЗапасы.Ссылка.Контрагент,
		|		ЧекККМЗапасы.Ссылка.СпециальныйНалоговыйРежим,
		|		ЧекККМЗапасы.Ссылка.Патент,
		|		ЧекККМЗапасы.ДоговорПлатежногоАгента,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
		|				ТОГДА ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница
		|			ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ячейка
		|			ИНАЧЕ ЧекККМЗапасы.Ячейка
		|		КОНЕЦ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМЗапасы.Номенклатура,
		|		ЧекККМЗапасы.Характеристика,
		|		ЧекККМЗапасы.Партия,
		|		СУММА(-ЧекККМЗапасы.Количество),
		|		ЧекККМЗапасы.ЕдиницаИзмерения,
		|		ЧекККМЗапасы.Цена,
		|		СУММА(-ЧекККМЗапасы.СуммаСкидкиНаценки),
		|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки,
		|		ЧекККМЗапасы.СтавкаНДС,
		|		СУММА(-ЧекККМЗапасы.Сумма),
		|		СУММА(-ЧекККМЗапасы.СуммаНДС),
		|		СУММА(-ЧекККМЗапасы.Всего),
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
		|				ТОГДА ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница
		|			ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ячейка
		|			ИНАЧЕ ЧекККМЗапасы.Ячейка
		|		КОНЕЦ,
		|		ЧекККМЗапасы.Ссылка.ВалютаДокумента,
		|		ЧекККМЗапасы.Ссылка.ВидЦен,
		|		ЧекККМЗапасы.Ссылка.КассаККМ,
		|		ЧекККМЗапасы.Ссылка.Подразделение,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеОтветственный В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ответственный
		|			ИНАЧЕ ЧекККМЗапасы.Ответственный
		|		КОНЕЦ,
		|		ЧекККМЗапасы.Ссылка.Организация,
		|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта,
		|		СУММА(-ЧекККМЗапасы.СуммаАвтоматическойСкидки),
		|		ЧекККМЗапасы.Заказ,
		|		0,
		|		СУММА(ЧекККМЗапасы.Количество),
		|		ЧекККМЗапасы.НоменклатураНабора,
		|		ЧекККМЗапасы.ХарактеристикаНабора,
		|		СУММА(ЧекККМЗапасы.ДоляСтоимости),
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ЧекККМ.КассоваяСмена = &КассоваяСмена
		|				ТОГДА ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ИНАЧЕ ЧекККМЗапасы.Ссылка.ЧекККМ
		|		КОНЕЦ,
		|		ЧекККМЗапасы.Ссылка.Контрагент,
		|		СУММА(-ЧекККМЗапасы.СуммаСкидкиОплатыБонусом),
		|		ЧекККМЗапасы.Ссылка.СпециальныйНалоговыйРежим,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|				ТОГДА ЧекККМЗапасы.Ссылка.ЧекККМ.Патент
		|			ИНАЧЕ ЧекККМЗапасы.Ссылка.Патент
		|		КОНЕЦ,
		|		ЧекККМЗапасы.ДоговорПлатежногоАгента,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	ИЗ
		|		Документ.ЧекККМВозврат.Запасы КАК ЧекККМЗапасы
		|	ГДЕ
		|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМЗапасы.Ссылка.Проведен
		//|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
		|		И НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
		|		И ЧекККМЗапасы.Ссылка В (&МассивЧеков)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|				ТОГДА ЧекККМЗапасы.Ссылка.ЧекККМ.Патент
		|			ИНАЧЕ ЧекККМЗапасы.Ссылка.Патент
		|		КОНЕЦ,
		|		ЧекККМЗапасы.Номенклатура,
		|		ЧекККМЗапасы.Характеристика,
		|		ЧекККМЗапасы.Партия,
		|		ЧекККМЗапасы.ЕдиницаИзмерения,
		|		ЧекККМЗапасы.Цена,
		|		ЧекККМЗапасы.Ссылка.ВалютаДокумента,
		|		ЧекККМЗапасы.Ссылка.ВидЦен,
		|		ЧекККМЗапасы.Ссылка.КассаККМ,
		|		ЧекККМЗапасы.Ссылка.Организация,
		|		ЧекККМЗапасы.Ссылка.Подразделение,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеОтветственный В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ответственный
		|			ИНАЧЕ ЧекККМЗапасы.Ответственный
		|		КОНЕЦ,
		|		ЧекККМЗапасы.СтавкаНДС,
		|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта,
		|		ЧекККМЗапасы.Заказ,
		|		ЧекККМЗапасы.НоменклатураНабора,
		|		ЧекККМЗапасы.ХарактеристикаНабора,
		|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки,
		|		ЧекККМЗапасы.ДоговорПлатежногоАгента,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ЧекККМ.КассоваяСмена = &КассоваяСмена
		|				ТОГДА ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ИНАЧЕ ЧекККМЗапасы.Ссылка.ЧекККМ
		|		КОНЕЦ,
		|		ЧекККМЗапасы.Ссылка.Контрагент,
		|		ЧекККМЗапасы.Ссылка.СпециальныйНалоговыйРежим,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
		|				ТОГДА ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница
		|			ИНАЧЕ ЧекККМЗапасы.СтруктурнаяЕдиница
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ячейка
		|			ИНАЧЕ ЧекККМЗапасы.Ячейка
		|		КОНЕЦ) КАК ЧекККМЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ВТСистемыНалогообложения
		|		ПО (ВТСистемыНалогообложения.Организация = ЧекККМЗапасы.Организация)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|	ОплатаПлатежнымиКартами.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ОплатаПлатежнымиКартами.НомерСертификата КАК НомерСертификата,
		|	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК Сумма,
		|	СУММА(ОплатаПлатежнымиКартами.СуммаКомиссии) КАК СуммаКомиссии,
		|	ОплатаПлатежнымиКартами.Дата КАК ДатаПлатежа,
		|	СУММА(ОплатаПлатежнымиКартами.СуммаБонусов) КАК СуммаБонусов,
		|	ОплатаПлатежнымиКартами.БонуснаяКарта КАК БонуснаяКарта,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТСистемыНалогообложения.ПлательщикУСН, ЛОЖЬ)
		|				И ОплатаПлатежнымиКартами.СпециальныйНалоговыйРежим = ЗНАЧЕНИЕ(Перечисление.СпециальныеНалоговыеРежимы.НеПрименяется)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьВНУ,
		|	ОплатаПлатежнымиКартами.Патент КАК Патент,
		|	ОплатаПлатежнымиКартами.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
		|	ОплатаПлатежнымиКартами.ЭтоОтмена КАК ЭтоОтмена
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
		|		ВЫБОР
		|			КОГДА ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ЗНАЧЕНИЕ(Справочник.СпособыОплаты.ПустаяСсылка)
		|				ТОГДА ЧекККМОплатаПлатежнымиКартами.Ссылка.ЭквайринговыйТерминал
		|			ИНАЧЕ ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал
		|		КОНЕЦ КАК ЭквайринговыйТерминал,
		|		ЧекККМОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
		|		ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|		ЧекККМОплатаПлатежнымиКартами.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|		ЧекККМОплатаПлатежнымиКартами.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|		ЧекККМОплатаПлатежнымиКартами.НомерСертификата КАК НомерСертификата,
		|		ЧекККМОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|		ЧекККМОплатаПлатежнымиКартами.СуммаКомиссии КАК СуммаКомиссии,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Организация КАК Организация,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.СтруктурнаяЕдиница КАК Склад,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ВалютаДокумента КАК Валюта,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ВидЦен КАК ВидЦен,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Дата КАК Дата,
		|		ЧекККМОплатаПлатежнымиКартами.СуммаБонусов КАК СуммаБонусов,
		|		ЧекККМОплатаПлатежнымиКартами.БонуснаяКарта КАК БонуснаяКарта,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Патент КАК Патент,
		|		ЧекККМОплатаПлатежнымиКартами.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
		|		ЛОЖЬ КАК ЭтоОтмена
		|	ИЗ
		|		Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМОплатаПлатежнымиКартами
		|	ГДЕ
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМОплатаПлатежнымиКартами.Ссылка.Проведен
		|		И ЧекККМОплатаПлатежнымиКартами.Ссылка В (&МассивЧеков)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ВидОплаты,
		|		ВЫБОР
		|			КОГДА ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ЗНАЧЕНИЕ(Справочник.СпособыОплаты.ПустаяСсылка)
		|				ТОГДА ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ЭквайринговыйТерминал
		|			ИНАЧЕ ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал
		|		КОНЕЦ,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ВидПлатежнойКарты,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ИдентификаторПлатежнойСистемы,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ПодарочныйСертификат,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерСертификата,
		|		-ЧекККМВозвратОплатаПлатежнымиКартами.Сумма,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.СуммаКомиссии,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассаККМ,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Организация,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.СтруктурнаяЕдиница,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВалютаДокумента,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВидЦен,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Дата,
		|		-ЧекККМВозвратОплатаПлатежнымиКартами.СуммаБонусов,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.БонуснаяКарта,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.СпециальныйНалоговыйРежим,
		|		ВЫБОР
		|			КОГДА ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Патент = ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)
		|				ТОГДА ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ЧекККМ.Патент
		|			ИНАЧЕ ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Патент
		|		КОНЕЦ,
		|		НЕОПРЕДЕЛЕНО,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ЧекККМ.КассоваяСмена = ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассоваяСмена
		|	ИЗ
		|		Документ.ЧекККМВозврат.БезналичнаяОплата КАК ЧекККМВозвратОплатаПлатежнымиКартами
		|	ГДЕ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Проведен
		|		И ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка В (&МассивЧеков)) КАК ОплатаПлатежнымиКартами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ВТСистемыНалогообложения
		|		ПО (ВТСистемыНалогообложения.Организация = ОплатаПлатежнымиКартами.Организация)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.ИдентификаторПлатежнойСистемы,
		|	ОплатаПлатежнымиКартами.Дата,
		|	ОплатаПлатежнымиКартами.ПодарочныйСертификат,
		|	ОплатаПлатежнымиКартами.НомерСертификата,
		|	ОплатаПлатежнымиКартами.ВидОплаты,
		|	ОплатаПлатежнымиКартами.БонуснаяКарта,
		|	ВТСистемыНалогообложения.ПлательщикУСН,
		|	ОплатаПлатежнымиКартами.СпециальныйНалоговыйРежим,
		|	ОплатаПлатежнымиКартами.Патент,
		|	ОплатаПлатежнымиКартами.ДоговорПлатежногоАгента,
		|	ОплатаПлатежнымиКартами.ЭтоОтмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЧекККМЗапасы.Ответственный) КАК КоличествоОтветственный
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеОтветственный В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ответственный
		|			ИНАЧЕ ЧекККМЗапасы.Ответственный
		|		КОНЕЦ КАК Ответственный
		|	ИЗ
		|		Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|	ГДЕ
		|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМЗапасы.Ссылка.Проведен
		//|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
		|		И ЧекККМЗапасы.Ссылка В (&МассивЧеков)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ЧекККМЗапасы.Ссылка.ПоложениеОтветственный В (ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке), ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ПустаяСсылка))
		|				ТОГДА ЧекККМЗапасы.Ссылка.Ответственный
		|			ИНАЧЕ ЧекККМЗапасы.Ответственный
		|		КОНЕЦ
		|	ИЗ
		|		Документ.ЧекККМВозврат.Запасы КАК ЧекККМЗапасы
		|	ГДЕ
		|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМЗапасы.Ссылка.Проведен
		//|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
		|		И ЧекККМЗапасы.Ссылка В (&МассивЧеков)) КАК ЧекККМЗапасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
		|	ЧекККМЗапасы.Характеристика КАК Характеристика,
		|	ЧекККМСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
		|	ЧекККМСкидкиНаценки.Сумма КАК Сумма,
		|	ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный
		|ПОМЕСТИТЬ ВТ_АвтоСкидкиНаценкиОбъединение
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СкидкиНаценки КАК ЧекККМСкидкиНаценки
		|		ПО ЧекККМЗапасы.КлючСвязи = ЧекККМСкидкиНаценки.КлючСвязи
		|			И (ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
		|			И (ЧекККМЗапасы.Ссылка.Проведен)
		//|			И (ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0)
		|			И ЧекККМЗапасы.Ссылка = ЧекККМСкидкиНаценки.Ссылка
		|ГДЕ
		|	НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
		|	И НЕ ЧекККМСкидкиНаценки.Ссылка.ОперацияСДенежнымиСредствами
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозвратЗапасы.Номенклатура,
		|	ЧекККМВозвратЗапасы.Характеристика,
		|	ЧекККМВозвратСкидкиНаценки.СкидкаНаценка,
		|	-ЧекККМВозвратСкидкиНаценки.Сумма,
		|	ЧекККМВозвратЗапасы.Ссылка.Ответственный
		|ИЗ
		|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.СкидкиНаценки КАК ЧекККМВозвратСкидкиНаценки
		|		ПО ЧекККМВозвратЗапасы.КлючСвязи = ЧекККМВозвратСкидкиНаценки.КлючСвязи
		|			И (ЧекККМВозвратЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
		|			И (ЧекККМВозвратЗапасы.Ссылка.Проведен)
		//|			И (ЧекККМВозвратЗапасы.Ссылка.НомерЧекаККМ > 0)
		|			И ЧекККМВозвратЗапасы.Ссылка = ЧекККМВозвратСкидкиНаценки.Ссылка
		|ГДЕ
		|	НЕ ЧекККМВозвратЗапасы.Ссылка.ОперацияСДенежнымиСредствами
		|	И НЕ ЧекККМВозвратСкидкиНаценки.Ссылка.ОперацияСДенежнымиСредствами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_АвтоСкидкиНаценкиОбъединение.Номенклатура КАК Номенклатура,
		|	ВТ_АвтоСкидкиНаценкиОбъединение.Характеристика КАК Характеристика,
		|	ВТ_АвтоСкидкиНаценкиОбъединение.СкидкаНаценка КАК СкидкаНаценка,
		|	СУММА(ВТ_АвтоСкидкиНаценкиОбъединение.Сумма) КАК Сумма,
		|	ВТ_АвтоСкидкиНаценкиОбъединение.Ответственный КАК Ответственный
		|ИЗ
		|	ВТ_АвтоСкидкиНаценкиОбъединение КАК ВТ_АвтоСкидкиНаценкиОбъединение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_АвтоСкидкиНаценкиОбъединение.Номенклатура,
		|	ВТ_АвтоСкидкиНаценкиОбъединение.Характеристика,
		|	ВТ_АвтоСкидкиНаценкиОбъединение.СкидкаНаценка,
		|	ВТ_АвтоСкидкиНаценкиОбъединение.Ответственный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМПродажиВозвраты.Номенклатура КАК Номенклатура,
		|	ЧекККМПродажиВозвраты.Характеристика КАК Характеристика,
		|	ЧекККМПродажиВозвраты.Партия КАК Партия,
		|	ЧекККМПродажиВозвраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЧекККМПродажиВозвраты.Цена КАК Цена,
		|	ЧекККМПродажиВозвраты.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ЧекККМПродажиВозвраты.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|	ЧекККМПродажиВозвраты.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
		|	ЧекККМПродажиВозвраты.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМПродажиВозвраты.Заказ КАК Заказ,
		|	ЧекККМПродажиВозвраты.Серия КАК Серия,
		|	ЧекККМПродажиВозвраты.Ответственный КАК Ответственный,
		|	ЧекККМПродажиВозвраты.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ЧекККМПродажиВозвраты.ПризнакПродаж КАК ПризнакПродаж,
		|	ЧекККМПродажиВозвраты.ДокументПродажи КАК ДокументПродажи,
		|	ЧекККМПродажиВозвраты.Количество КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМЗапасы.Номенклатура КАК Номенклатура,
		|		ЧекККМЗапасы.Характеристика КАК Характеристика,
		|		ЧекККМЗапасы.Партия КАК Партия,
		|		ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ЧекККМЗапасы.Цена КАК Цена,
		|		ЧекККМЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|		ЧекККМЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
		|		ЧекККМЗапасы.Ссылка.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
		|		ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
		|		ЧекККМЗапасы.Заказ КАК Заказ,
		|		ЧекККМСерииНоменклатуры.Серия КАК Серия,
		|		ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный,
		|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|		1 КАК ПризнакПродаж,
		|		ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка) КАК ДокументПродажи,
		|		ЧекККМСерииНоменклатуры.Количество КАК Количество
		|	ИЗ
		|		Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерииНоменклатуры КАК ЧекККМСерииНоменклатуры
		|			ПО ЧекККМЗапасы.КлючСвязи = ЧекККМСерииНоменклатуры.КлючСвязи
		|				И ЧекККМЗапасы.Ссылка = ЧекККМСерииНоменклатуры.Ссылка
		|	ГДЕ
		|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМЗапасы.Ссылка.Проведен
		//|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
		|		И ЧекККМСерииНоменклатуры.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
		|		И ЧекККМЗапасы.Ссылка В (&МассивЧеков)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМВозвратЗапасы.Номенклатура,
		|		ЧекККМВозвратЗапасы.Характеристика,
		|		ЧекККМВозвратЗапасы.Партия,
		|		ЧекККМВозвратЗапасы.ЕдиницаИзмерения,
		|		ЧекККМВозвратЗапасы.Цена,
		|		ЧекККМВозвратЗапасы.ПроцентСкидкиНаценки,
		|		ЧекККМВозвратЗапасы.СуммаСкидкиНаценки,
		|		ЧекККМВозвратЗапасы.Ссылка.ВидСкидкиНаценки,
		|		ЧекККМВозвратЗапасы.СтавкаНДС,
		|		ЧекККМВозвратЗапасы.Заказ,
		|		ЧекККМВозвратСерииНоменклатуры.Серия,
		|		ЧекККМВозвратЗапасы.Ссылка.Ответственный,
		|		ЧекККМВозвратЗапасы.Ссылка.ДисконтнаяКарта,
		|		-1,
		|		ВЫБОР
		|			КОГДА ЧекККМВозвратЗапасы.Ссылка.ЧекККМ.КассоваяСмена = &КассоваяСмена
		|				ТОГДА ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ИНАЧЕ ЧекККМВозвратЗапасы.Ссылка.ЧекККМ
		|		КОНЕЦ,
		|		ЧекККМВозвратСерииНоменклатуры.Количество
		|	ИЗ
		|		Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.СерииНоменклатуры КАК ЧекККМВозвратСерииНоменклатуры
		|			ПО ЧекККМВозвратЗапасы.КлючСвязи = ЧекККМВозвратСерииНоменклатуры.КлючСвязи
		|				И ЧекККМВозвратЗапасы.Ссылка = ЧекККМВозвратСерииНоменклатуры.Ссылка
		|	ГДЕ
		|		ЧекККМВозвратЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМВозвратЗапасы.Ссылка.Проведен
		//|		И ЧекККМВозвратЗапасы.Ссылка.НомерЧекаККМ > 0
		|		И ЧекККМВозвратСерииНоменклатуры.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМВозвратЗапасы.Ссылка В (&МассивЧеков)) КАК ЧекККМПродажиВозвраты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
		|	ЧекККМДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	СУММА(ЧекККМДобавленныеНаборы.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
		|		ЧекККМДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|		ЧекККМДобавленныеНаборы.Количество КАК Количество
		|	ИЗ
		|		Документ.ЧекККМ.ДобавленныеНаборы КАК ЧекККМДобавленныеНаборы
		|	ГДЕ
		|		ЧекККМДобавленныеНаборы.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМДобавленныеНаборы.Ссылка.Проведен
		//|		И ЧекККМДобавленныеНаборы.Ссылка.НомерЧекаККМ > 0
		|		И НЕ ЧекККМДобавленныеНаборы.Ссылка.ОперацияСДенежнымиСредствами
		|		И ЧекККМДобавленныеНаборы.Ссылка В (&МассивЧеков)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМДобавленныеНаборы.НоменклатураНабора,
		|		ЧекККМДобавленныеНаборы.ХарактеристикаНабора,
		|		-ЧекККМДобавленныеНаборы.Количество
		|	ИЗ
		|		Документ.ЧекККМВозврат.ДобавленныеНаборы КАК ЧекККМДобавленныеНаборы
		|	ГДЕ
		|		ЧекККМДобавленныеНаборы.Ссылка.КассоваяСмена = &КассоваяСмена
		|		И ЧекККМДобавленныеНаборы.Ссылка.Проведен
		//|		И ЧекККМДобавленныеНаборы.Ссылка.НомерЧекаККМ > 0
		|		И НЕ ЧекККМДобавленныеНаборы.Ссылка.ОперацияСДенежнымиСредствами
		|		И ЧекККМДобавленныеНаборы.Ссылка В (&МассивЧеков)) КАК ЧекККМДобавленныеНаборы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМДобавленныеНаборы.НоменклатураНабора,
		|	ЧекККМДобавленныеНаборы.ХарактеристикаНабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
		|	ЧекККМЗапасы.Характеристика КАК Характеристика,
		|	ЧекККМБонусныеБаллыКНачислению.СкидкаНаценка КАК СкидкаНаценка,
		|	ЧекККМБонусныеБаллыКНачислению.ДатаНачисления КАК ДатаНачисления,
		|	ЧекККМБонусныеБаллыКНачислению.ДатаСписания КАК ДатаСписания,
		|	ЧекККМБонусныеБаллыКНачислению.Ссылка.ДисконтнаяКарта КАК БонуснаяКарта,
		|	ЧекККМБонусныеБаллыКНачислению.КоличествоБонусныхБаллов КАК КоличествоБонусныхБаллов
		|ПОМЕСТИТЬ ВТ_НачисленияБонусныхБалловОбъединение
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.БонусныеБаллыКНачислению КАК ЧекККМБонусныеБаллыКНачислению
		|		ПО (ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
		|			И (ЧекККМЗапасы.Ссылка.Проведен)
		|			И ЧекККМЗапасы.Ссылка = ЧекККМБонусныеБаллыКНачислению.Ссылка
		|			И ЧекККМЗапасы.КлючСвязи = ЧекККМБонусныеБаллыКНачислению.КлючСвязи
		//|			И (ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0)
		|ГДЕ
		|	НЕ ЧекККМЗапасы.Ссылка.ОперацияСДенежнымиСредствами
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозвратЗапасы.Номенклатура,
		|	ЧекККМВозвратЗапасы.Характеристика,
		|	ЧекККМВозвратБонусныеБаллыКНачислению.СкидкаНаценка,
		|	ЧекККМВозвратБонусныеБаллыКНачислению.ДатаНачисления,
		|	ЧекККМВозвратБонусныеБаллыКНачислению.ДатаСписания,
		|	ЧекККМВозвратБонусныеБаллыКНачислению.Ссылка.ДисконтнаяКарта,
		|	-ЧекККМВозвратБонусныеБаллыКНачислению.КоличествоБонусныхБаллов
		|ИЗ
		|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.БонусныеБаллыКНачислению КАК ЧекККМВозвратБонусныеБаллыКНачислению
		|		ПО (ЧекККМВозвратЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
		|			И (ЧекККМВозвратЗапасы.Ссылка.Проведен)
		|			И ЧекККМВозвратЗапасы.Ссылка = ЧекККМВозвратБонусныеБаллыКНачислению.Ссылка
		|			И ЧекККМВозвратЗапасы.КлючСвязи = ЧекККМВозвратБонусныеБаллыКНачислению.КлючСвязи
		//|			И (ЧекККМВозвратЗапасы.Ссылка.НомерЧекаККМ > 0)
		|ГДЕ
		|	НЕ ЧекККМВозвратЗапасы.Ссылка.ОперацияСДенежнымиСредствами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НачисленияБонусныхБалловОбъединение.Номенклатура КАК Номенклатура,
		|	ВТ_НачисленияБонусныхБалловОбъединение.Характеристика КАК Характеристика,
		|	ВТ_НачисленияБонусныхБалловОбъединение.СкидкаНаценка КАК СкидкаНаценка,
		|	ВТ_НачисленияБонусныхБалловОбъединение.ДатаНачисления КАК ДатаНачисления,
		|	ВТ_НачисленияБонусныхБалловОбъединение.ДатаСписания КАК ДатаСписания,
		|	ВТ_НачисленияБонусныхБалловОбъединение.БонуснаяКарта КАК БонуснаяКарта,
		|	СУММА(ВТ_НачисленияБонусныхБалловОбъединение.КоличествоБонусныхБаллов) КАК КоличествоБонусныхБаллов
		|ИЗ
		|	ВТ_НачисленияБонусныхБалловОбъединение КАК ВТ_НачисленияБонусныхБалловОбъединение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НачисленияБонусныхБалловОбъединение.Номенклатура,
		|	ВТ_НачисленияБонусныхБалловОбъединение.Характеристика,
		|	ВТ_НачисленияБонусныхБалловОбъединение.СкидкаНаценка,
		|	ВТ_НачисленияБонусныхБалловОбъединение.ДатаНачисления,
		|	ВТ_НачисленияБонусныхБалловОбъединение.ДатаСписания,
		|	ВТ_НачисленияБонусныхБалловОбъединение.БонуснаяКарта";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("КассоваяСмена", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		// Прослеживаемость
		Запрос.УстановитьПараметр("ВестиУчетПрослеживаемыхТоваров", ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(ТекущаяДатаСеанса()));
		
		// АвтоматическиеСкидки
		Запрос.УстановитьПараметр("ИспользоватьАвтоматическиеСкидки", ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"));
		// Конец АвтоматическиеСкидки
		// Заказы покупателей в розничной торговле
		Запрос.УстановитьПараметр("ЕстьЗаказыИРезерв", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле") И
		ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
		// Конец Заказы покупателей в розничной торговле
		
		Запрос.УстановитьПараметр("МассивЧеков", МассивЧеков);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Запасы = Результат[Результат.Количество()-9].Выгрузить();
		Запасы.Колонки.Добавить("ПроцентАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
		Запасы.Колонки.Добавить("ПроцентСкидкиНаценки", Новый ОписаниеТипов("Число"));
		ОплатаПлатежнымиКартами = Результат[Результат.Количество()-8].Выгрузить();
		ПолученаПредоплатаВыборка = Результат[Результат.Количество()-11].Выбрать();
		ПолученаПредоплатаВыборка.Следующий();
		
		ОтчетОРозничныхПродажахОбъект.Запасы.Очистить();
		ОтчетОРозничныхПродажахОбъект.БезналичнаяОплата.Очистить();
		// Прослеживаемость
		ОтчетОРозничныхПродажахОбъект.СведенияПрослеживаемости.Очистить();
		
		ПатентПоУмолчанию = Справочники.Патенты.ПустаяСсылка();
		УчитыватьВНУ = Ложь;
		
		Если Запасы.Количество() > 0 Тогда
			ОтчетОРозничныхПродажахОбъект.ПоложениеОтветственный = ?(
				Результат[Результат.Количество()-7].Выгрузить()[0].КоличествоОтветственный > 1,
				Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти,
				Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
			ПатентПоУмолчанию = Запасы[0].Патент;
			УчитыватьВНУ = Запасы[0].УчитыватьВНУ;
		Иначе
			УчитыватьВНУ = ПолученаПредоплатаВыборка.УчитыватьВНУ;
		КонецЕсли;
		
		НастройкиНалоговогоУчетаВШапке = Истина;
		ОтчетОРозничныхПродажахОбъект.Патент = ПатентПоУмолчанию;
		ОтчетОРозничныхПродажахОбъект.УчитыватьВНУ = УчитыватьВНУ;
		
		Для каждого СтрокаТЧ Из Запасы Цикл
			Если ПатентПоУмолчанию <> СтрокаТЧ.Патент
				Или УчитыватьВНУ <> СтрокаТЧ.УчитыватьВНУ Тогда
				НастройкиНалоговогоУчетаВШапке = Ложь;
			КонецЕсли;
			
			СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
			
			// Заполним процент автоматической скидки
			Если СтрокаТЧ.СуммаАвтоматическойСкидки <> 0 Тогда
				// Применение автоматической скидки.
				СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / СуммаБезСкидки);
			КонецЕсли;
			// Заполним процент ручной скидки
			Если СтрокаТЧ.СуммаСкидкиНаценки <> 0 Тогда
				// Применение автоматической скидки.
				СтрокаТЧ.ПроцентСкидкиНаценки = ?(СуммаБезСкидки = 0, 0 , 100 * СтрокаТЧ.СуммаСкидкиНаценки / СуммаБезСкидки);
			КонецЕсли;
			
			// Рассчитаем процент оплаты бонусами
			Если СтрокаТЧ.СуммаСкидкиОплатыБонусом <> 0 Тогда
				ПроцентОплатыБонусом = ?(СуммаБезСкидки = 0, 0 , 100 * СтрокаТЧ.СуммаСкидкиОплатыБонусом / СуммаБезСкидки);
			Иначе
				ПроцентОплатыБонусом = 0;
			КонецЕсли;
			
			Если СтрокаТЧ.Всего <> 0 Или (СтрокаТЧ.ПроцентСкидкиНаценки + СтрокаТЧ.ПроцентАвтоматическойСкидки + ПроцентОплатыБонусом) >= 100 
				Или (Окр(СтрокаТЧ.Количество * СтрокаТЧ.Цена, 2) = 0 И СтрокаТЧ.Количество > 0 И СтрокаТЧ.Цена > 0) // Обработка сценария 0.001 * 0.01 = 0.00.
				// Заказы в Рознице.
				Или СтрокаТЧ.Резерв > 0
				Тогда
				СтрокаТабличнойЧастиЗапасы = ОтчетОРозничныхПродажахОбъект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиЗапасы, СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НастройкиНалоговогоУчетаВШапке Тогда
			ОтчетОРозничныхПродажахОбъект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Иначе
			ОтчетОРозничныхПродажахОбъект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		КонецЕсли;
		
		Документы.ОтчетОРозничныхПродажах.ДобавитьЗапасыВРазрезеГТД(ОтчетОРозничныхПродажахОбъект);
		
		Для каждого СтрокаТЧ Из ОплатаПлатежнымиКартами Цикл
			
			Если СтрокаТЧ.Сумма <> 0
				ИЛИ СтрокаТЧ.СуммаБонусов <> 0
				ИЛИ СтрокаТЧ.СуммаКомиссии <> 0 Тогда
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.БезналичнаяОплата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
		
		// АвтоматическиеСкидки
		ОтчетОРозничныхПродажахОбъект.СкидкиНаценки.Очистить();
		Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
			
			АвтоматическиеСкидки = Результат[Результат.Количество()-5].Выгрузить();
			Для каждого СтрокаТЧ Из АвтоматическиеСкидки Цикл
				
				Если СтрокаТЧ.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.СкидкиНаценки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		// Конец АвтоматическиеСкидки
		
		// Серии номенклатуры
		ОтчетОРозничныхПродажахОбъект.СерииНоменклатуры.Очистить();
		СерииНоменклатурыУНФКлиентСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ОтчетОРозничныхПродажахОбъект, "Запасы");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			
			СерииНоменклатуры = Результат[Результат.Количество()-4].Выгрузить();
			Для каждого СтрокаТЧ Из ОтчетОРозничныхПродажахОбъект.Запасы Цикл
				
				СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, Цена, СтавкаНДС, Заказ
				|, Ответственный, ДисконтнаяКарта, ДокументПродажи");
				
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
				КоличествоСерийНужноЗаполнить = СтрокаТЧ.Количество;
				ЭтоСтрокаВозврата = (КоличествоСерийНужноЗаполнить < 0);
				ВыбранныеСерииНоменклатуры = Новый Массив;
				
				СерииНоменклатурыПоОтбору = СерииНоменклатуры.НайтиСтроки(СтруктураОтбора);
				Если СерииНоменклатурыПоОтбору.Количество()>0 Тогда
					КлючСвязи = СтрокаТЧ.КлючСвязи;
					
					Для каждого СтрокаСерий Из СерииНоменклатурыПоОтбору Цикл
						// Если все Серии номенклатуры добавили, то выходим из цикла.
						Если КоличествоСерийНужноЗаполнить = 0 Тогда
							Прервать;
						КонецЕсли;
						// Для продажи обрабатываем Серии номенклатуры продажи.
						// Для возврата обрабатываем Серии номенклатуры возврата.
						ЭтоСерияВозврата = (СтрокаСерий.ПризнакПродаж < 0);
						Если ЭтоСтрокаВозврата
							И Не ЭтоСерияВозврата Тогда
							Продолжить;
						КонецЕсли;
						Если Не ЭтоСтрокаВозврата
							И ЭтоСерияВозврата Тогда
							Продолжить;
						КонецЕсли;
						
						// Добавим информацию о серии номенклатуры в табличную часть серий.
						НоваяСтрока = ОтчетОРозничныхПродажахОбъект.СерииНоменклатуры.Добавить();
						НоваяСтрока.КлючСвязи = КлючСвязи;
						НоваяСтрока.Серия = СтрокаСерий.Серия;
						НоваяСтрока.Количество = СтрокаСерий.Количество;
						
						Если ЭтоСтрокаВозврата Тогда
							КоличествоСерийНужноЗаполнить = КоличествоСерийНужноЗаполнить + НоваяСтрока.Количество;
						Иначе
							КоличествоСерийНужноЗаполнить = КоличествоСерийНужноЗаполнить - НоваяСтрока.Количество;
						КонецЕсли;
						ВыбранныеСерииНоменклатуры.Добавить(СтрокаСерий);
					КонецЦикла;
					
					// Удалить из таблицы Серии номенклатуры, которые уже были заполнены в строке документа
					Для каждого строкаСН Из ВыбранныеСерииНоменклатуры Цикл
						СерииНоменклатуры.Удалить(строкаСН);
					КонецЦикла; 
					
				КонецЕсли;
				
				СерииНоменклатурыУНФКлиентСервер.ОбновитьСтроковоеПредставлениеСерийНоменклатурыСтроки(СтрокаТЧ, ОтчетОРозничныхПродажахОбъект, "КлючСвязи");
				
			КонецЦикла;
			
		КонецЕсли;
		// Серии номенклатуры
		
		// Наборы
		ОтчетОРозничныхПродажахОбъект.ДобавленныеНаборы.Очистить();
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
			
			ДобавленныеНаборы = Результат[Результат.Количество()-3].Выгрузить();
			Для каждого СтрокаТЧ Из ДобавленныеНаборы Цикл
				Если СтрокаТЧ.Количество<>0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ДобавленныеНаборы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли; 
			КонецЦикла;
			
		КонецЕсли; 
		// Конец Наборы
		
		// НачисленияБонусов
		Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммы") Тогда
			НачисленияБонусов = Результат[Результат.Количество()-1].Выгрузить();
			ОтчетОРозничныхПродажахОбъект.БонусныеБаллыКНачислению.Очистить();
			Для Каждого СтрокаТЧ Из НачисленияБонусов Цикл
				НоваяСтрока = ОтчетОРозничныхПродажахОбъект.БонусныеБаллыКНачислению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		// Конец НачисленияБонусов
		
		ОтчетОРозничныхПродажахОбъект.СуммаПредоплаты = Результат[Результат.Количество()-10].Выгрузить().Итог("СуммаРасчетов");
		ОтчетОРозничныхПродажахОбъект.ПолученаПредоплата = ПолученаПредоплатаВыборка.ПолученаПредоплата;
		ОтчетОРозничныхПродажахОбъект.СуммаДокумента         = ОтчетОРозничныхПродажахОбъект.Запасы.Итог("Всего");
		
		Если Запасы.Количество() > 0 Тогда
			ОтчетОРозничныхПродажахОбъект.Ответственный = Запасы[0].Ответственный;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
			ОтчетОРозничныхПродажахОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
		КонецЕсли;
		
		Возврат ОтчетОРозничныхПродажахОбъект;
КонецФункции
Процедура ОчиститьИспользованиеПКО(ИспользованиеПКО)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО.Удалить(Правило.Ключ);
	КонецЦикла;
КонецПроцедуры
Функция ПараметрыНалогообложения(Организация)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
КонецФункции
Функция ПатентыДокумента(Документ)
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтчетОРозничныхПродажахЗапасы.Патент КАК Патент
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	ОтчетОРозничныхПродажахЗапасы.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Патент";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		Результат = Запрос.Выполнить().Выгрузить();
	
		Возврат Результат;
КонецФункции
Процедура ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, ПолучатьДанныеПлатежаВБюджет = Ложь)
	// Заполняем реквизиты платежа пустыми значениями
	ДанныеXDTO.Вставить("ВидПлатежа");
	ДанныеXDTO.Вставить("Очередность");
	ДанныеXDTO.Вставить("Код");
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДанныеXDTO.Вставить("СтатусСоставителя");
		ДанныеXDTO.Вставить("ПоказательКБК");
		ДанныеXDTO.Вставить("ОКАТО");
		ДанныеXDTO.Вставить("ПоказательОснования");
		ДанныеXDTO.Вставить("ПоказательПериода");
		ДанныеXDTO.Вставить("ПоказательНомера");
		ДанныеXDTO.Вставить("ПоказательДаты");
		ДанныеXDTO.Вставить("ПоказательТипа");
	КонецЕсли;
	// Банковский счет получателя берем из реквизита документа
	ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
	
	
	Запрос = Новый Запрос;
	
	ДополнениеЗапросаПлатежВБюджет = "";
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДополнениеЗапросаПлатежВБюджет = ", ПлатежныеПоручения.Ссылка.СтатусСоставителя КАК СтатусСоставителя,
			|ПлатежныеПоручения.Ссылка.КодБК КАК ПоказательКБК, 
			|ПлатежныеПоручения.Ссылка.ПоказательОснования КАК ПоказательОснования, 
			|ПлатежныеПоручения.Ссылка.ПоказательПериода КАК ПоказательПериода, 
			|ПлатежныеПоручения.Ссылка.ПоказательНомера КАК ПоказательНомера, 
			|ПлатежныеПоручения.Ссылка.ПоказательДаты КАК ПоказательДаты, 
			|ПлатежныеПоручения.Ссылка.ПоказательТипа КАК ПоказательТипа, 
			|ПлатежныеПоручения.Ссылка.КодОКАТО КАК ОКАТО";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.ДокументОснование КАК Ссылка
	|ПОМЕСТИТЬ ПлатежныеПоручения
	|ИЗ
	|	Документ.РасходСоСчета КАК Док
	|ГДЕ
	|	Док.ДокументОснование ССЫЛКА Документ.ПлатежноеПоручение
	|	И Док.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование = &Ссылка
	|	И ПлатежноеПоручение.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежныеПоручения.Ссылка.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежныеПоручения.Ссылка.ОчередностьПлатежа КАК Очередность,
	|	ПлатежныеПоручения.Ссылка.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежныеПоручения.Ссылка.ИдентификаторПлатежа КАК Код
	|" + ДополнениеЗапросаПлатежВБюджет + "
	|ИЗ
	|	ПлатежныеПоручения КАК ПлатежныеПоручения";
	
	 
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РеквизитыПлатежа = Запрос.Выполнить().Выбрать();
	Если РеквизитыПлатежа.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, РеквизитыПлатежа);
		// Если счет указан в платежке но не указан в документе - подставим счет получателя из платежки
		Если ЗначениеЗаполнено(РеквизитыПлатежа.СчетКонтрагента) 
			И НЕ ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчет) Тогда
			ДанныеXDTO.Вставить("БанковскийСчет", РеквизитыПлатежа.СчетКонтрагента);
		КонецЕсли;
		Если ПолучатьДанныеПлатежаВБюджет И СтрДлина(ДанныеXDTO.ПоказательКБК) < 20 Тогда
			ДанныеXDTO.ПоказательКБК = Прав("00000000000000000000" + ДанныеXDTO.ПоказательКБК, 20);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РеквизитыПлатежа.ПоказательДаты) Тогда
			ПоказательДаты = "0";
		Иначе
			ПоказательДаты = Формат(РеквизитыПлатежа.ПоказательДаты, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		ДанныеXDTO.Вставить("ПоказательДаты", ПоказательДаты);
	КонецЕсли;
КонецПроцедуры
Процедура ПересчитатьСтрокуТабличнойЧасти(Строка, ПараметрыРасчета)
	Строка.Сумма = Строка.Количество * Строка.Цена;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Строка.СтавкаНДС);
		Строка.СуммаНДС = ?(ПараметрыРасчета.СуммаВключаетНДС, 
										  Строка.Сумма - (Строка.Сумма) / ((СтавкаНДС + 100) / 100),
										  Строка.Сумма * СтавкаНДС / 100);
		Строка.Всего = Строка.Сумма + ?(ПараметрыРасчета.СуммаВключаетНДС, 0, Строка.СуммаНДС);
КонецПроцедуры
Функция ПКОДляСтруктурнойЕдиницы(СтруктурнаяЕдиница)
	Если СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		ИмяПКО = "Справочник_Склады_Отправка";
	Иначе
		ИмяПКО = "ПодразделениеВПроизводственныйСклад_Отправка";
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция ПодарочныйСертификатПоУмолчанию()
	ПодарочныйСертификат = Справочники.Номенклатура.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
		|ГДЕ
		|	НЕ ОтчетОРозничныхПродажахЗапасы.Ссылка.ПометкаУдаления
		|	И ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|	И ОтчетОРозничныхПродажахЗапасы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Дата УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ПодарочныйСертификат = МассивРезультатов[0].Выгрузить()[0].Номенклатура;
		ИначеЕсли НЕ МассивРезультатов[1].Пустой() Тогда
			ПодарочныйСертификат = МассивРезультатов[1].Выгрузить()[0].Номенклатура;
		КонецЕсли;
		
		Возврат ПодарочныйСертификат;
КонецФункции
Процедура ПодготовитьДанныеДоговорКонтрагента(ДанныеИБ, ДанныеXDTO, Договор)
	СтруктураДоговора = СтруктураДоговораКонтрагента(ДанныеИБ, Договор);	
		
	ДанныеXDTO.Вставить("Договор", СтруктураДоговора);
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ ИЗ ДанныеИБ.КонтактнаяИнформация цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование,Предопределенный");
		
		ВыгружатьКИ = СвойстваВидаКИ.Предопределенный = Истина 
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ВебСайтКонтрагента
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.СайтОрганизации;
			
		Если Не ВыгружатьКИ Тогда
			Продолжить;
		КонецЕсли;  
	
		СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
		Если СвойстваВидаКИ.Предопределенный = Истина И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента Тогда
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
	
		Иначе
	
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Процедура ПодготовитьДанныеПоБонусам(КлючСвязи, МассивСтрокНачисленныеБонусы, НачисленныеБонусы, Строка)
	#Область БонусныеБаллыКНачислению
	ДанныеНачисленныхБонусов = НачисленныеБонусы.Получить(Строка.ИдентификаторСтроки);
	Если ДанныеНачисленныхБонусов <> Неопределено Тогда
		НачисленныеБонусыСтруктура = Новый Структура;
		
		ИдентификаторСкидки = Новый УникальныйИдентификатор(ДанныеНачисленныхБонусов.СкидкаНаценка);
		СкидкаСсылка = Справочники.АвтоматическиеСкидки.ПолучитьСсылку(ИдентификаторСкидки);
		
		Если ОбщегоНазначения.СсылкаСуществует(СкидкаСсылка) Тогда
			НачисленныеБонусыСтруктура.Вставить("КлючСвязи", КлючСвязи);
			НачисленныеБонусыСтруктура.Вставить("СкидкаНаценка", СкидкаСсылка);
			НачисленныеБонусыСтруктура.Вставить("ДатаНачисления", ДанныеНачисленныхБонусов.ДатаНачисления);
			НачисленныеБонусыСтруктура.Вставить("КоличествоБонусныхБаллов", ДанныеНачисленныхБонусов.КоличествоБонусныхБаллов);
			
			МассивСтрокНачисленныеБонусы.Добавить(НачисленныеБонусыСтруктура);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
Процедура ПодготовитьДанныеПоСкидкам(КлючСвязи, МассивСтрокСкидки, Скидки, Строка)
	#Область СкидкиНаценки
	ДанныеСкидки = Скидки.Получить(Строка.ИдентификаторСтроки);
	Если ДанныеСкидки <> Неопределено Тогда
		СкидкаСтруктура = Новый Структура;
		
		ИдентификаторСкидки = Новый УникальныйИдентификатор(ДанныеСкидки.СкидкаНаценка);
		СкидкаСсылка = Справочники.АвтоматическиеСкидки.ПолучитьСсылку(ИдентификаторСкидки);
		
		Если ОбщегоНазначения.СсылкаСуществует(СкидкаСсылка) Тогда
			СкидкаСтруктура.Вставить("КлючСвязи", КлючСвязи);
			СкидкаСтруктура.Вставить("СкидкаНаценка", СкидкаСсылка);
			СкидкаСтруктура.Вставить("Сумма", ДанныеСкидки.Сумма);
			
			МассивСтрокСкидки.Добавить(СкидкаСтруктура);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
Процедура ПодготовитьТаблицуВзаимозачет(ДанныеИБ, ТаблицаВзаимозачет, ИмяТабличнойЧасти = "Дебитор")
	ТаблицаВзаимозачет.Колонки.Добавить("Договор");
		ТаблицаВзаимозачет.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаВзаимозачет.Колонки.Добавить("КратностьВзаиморасчетов");
		ТаблицаВзаимозачет.Колонки.Добавить("Сумма");
		ТаблицаВзаимозачет.Колонки.Добавить("ДокументРасчетов");
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		
		Для каждого СтрокаДебитор Из ТаблицаВзаимозачет Цикл
			
			Контрагент = ?(ИмяТабличнойЧасти = "Дебитор", ДанныеИБ.КонтрагентИсточник, ДанныеИБ.Контрагент); 
		    СтрокаДебитор.Договор = СтруктураДоговораКонтрагента(ДанныеИБ, СтрокаДебитор.ДоговорКонтрагента, Контрагент);
		
			ВалютаДоговора = СтрокаДебитор.ДоговорКонтрагента.ВалютаРасчетов;
			Если ВалютаДоговора = НациональнаяВалюта Тогда
				СтрокаДебитор.КурсВзаиморасчетов	   = 1;
				СтрокаДебитор.КратностьВзаиморасчетов  = 1;
				СтрокаДебитор.Сумма = СтрокаДебитор.СуммаВзаиморасчетов;
			Иначе
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, ДанныеИБ.Дата);
				СтрокаДебитор.КурсВзаиморасчетов	   = СтруктураКурса.Курс;
				СтрокаДебитор.КратностьВзаиморасчетов  = СтруктураКурса.Кратность;
				
				Если СтрокаДебитор.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
					СтрокаДебитор.Сумма = ЦенообразованиеСервер.ПересчитатьИзВалютыВВалюту(СтрокаДебитор.СуммаВзаиморасчетов,
						СтрокаДебитор.КурсВзаиморасчетов, 1,
						СтрокаДебитор.КратностьВзаиморасчетов, 1);
				Иначе
					СтрокаДебитор.Сумма = СтрокаДебитор.СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			// ДокументРасчетов
			Если ЗначениеЗаполнено(СтрокаДебитор.Документ) Тогда
				
				ИмяПКО = ИмяПКОДляДокумента(СтрокаДебитор.Документ);
				Если ИмяПКО <> "" Тогда
					СтрокаДебитор.ДокументРасчетов = Новый Структура("Значение, ИмяПКО", СтрокаДебитор.Документ, ИмяПКО);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
КонецПроцедуры
Функция ПолитикаУчетаСерийПоУмолчанию()
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПолитикаУчетаСерий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
		|ГДЕ
		|	ПолитикаУчетаСерий.ТипПолитики = &ТипПолитики
		|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ТипПолитики = Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий; // Справочное указание серий
	Запрос.УстановитьПараметр("ТипПолитики", ТипПолитики);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.ПолитикаУчетаСерий.ПустаяСсылка();
КонецФункции
Функция ПолучитьДанныеНоменклатурыДляЗаполненияДокумента(СтруктураДанные)
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
		СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
										ИЛИ СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
		
		Если СтруктураДанные.Свойство("НалогообложениеНДС") 
			И НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
			
			Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
				СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
			Иначе
				СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
			СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(СтруктураДанные.ДатаОбработки), СтруктураДанные.ДатаОбработки, ТекущаяДатаСеанса())));
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
		Иначе
			СтруктураДанные.Вставить("Спецификация", Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура));
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
		Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
			СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) и СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
			ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
			Если Не ЗначенияПоУмолчанию = Неопределено Тогда
				ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
			КонецЕсли;
			Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
				СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
			Иначе
				СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
			КонецЕсли;
			Если Не СтруктураДанные.Свойство("Спецификация") Тогда
				СтруктураДанные.Вставить("Спецификация",Неопределено);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДанные.Характеристика) Тогда
				СтруктураДанные.Спецификация = Справочники.Спецификации.СпецификацияПоУмолчанию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика);
			КонецЕсли;
		КонецЕсли; 
		
		Если СтруктураДанные.Свойство("ВидЦен") Тогда
			
			Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
				СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			КонецЕсли;
			
			Если СтруктураДанные.Свойство("ВидРабот") Тогда
			
				Если СтруктураДанные.Номенклатура.ФиксированнаяСтоимость Тогда
					
					Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
					СтруктураДанные.Вставить("Цена", Цена);
				
				Иначе
				
					СтруктураДанные.Номенклатура = СтруктураДанные.ВидРабот;
					СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
					СтруктураДанные.Вставить("Цена", Цена);
					
				КонецЕсли;
			
			Иначе
			
				Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
			
			КонецЕсли;
			
		Иначе
			
			СтруктураДанные.Вставить("Цена", 0);
			
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
			И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
			СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
		Иначе
			СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
			И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
			ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
			СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
		КонецЕсли;
		СтруктураДанные.Вставить("ВесЕдиницыТовара", СтруктураДанные.Номенклатура.Вес);
		СтруктураДанные.Вставить("ОбъемЕдиницыТовара", СтруктураДанные.Номенклатура.Объем);
		
		Возврат СтруктураДанные;
КонецФункции
Процедура ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			ТекВидКИ = Неопределено;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				Продолжить;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email",,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Мобильный телефон",,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;	
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;		
			Иначе
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				Продолжить;
			КонецЕсли;
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПослеВыполненияПроцедурыМодуляМенеджера(Параметры)
	Перем ПолученныеДанные, ДанныеИБ, ДанныеXDTO;
		
		Если Параметры.Свойство("ПолученныеДанные", ПолученныеДанные)
			И ПолученныеДанные <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПолученныеДанные, "ДополнительныеСвойства")
			И ПолученныеДанные.ДополнительныеСвойства.Свойство("ОчиститьПолученныеДанные") Тогда
			
			Параметры.ПолученныеДанные = Неопределено;
			
		КонецЕсли;
		
		Если Параметры.Свойство("ДанныеXDTO", ДанныеXDTO)
			И ДанныеXDTO <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеXDTO, "ОчиститьДанныеXDTO") Тогда
			
			Параметры.ДанныеXDTO = Неопределено;
			
		КонецЕсли;
		
		Если Параметры.Свойство("ДанныеИБ", ДанныеИБ)
			И ДанныеИБ <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеИБ, "ДополнительныеСвойства")
			И ДанныеИБ.ДополнительныеСвойства.Свойство("ОчиститьДанныеИБ") Тогда
			
			Параметры.ДанныеИБ = Неопределено;
			
		КонецЕсли;
КонецПроцедуры
Процедура ПредупреждениеПриСинхронизации(КомпонентыОбмена, ОбрабатываемыйОбъект, ТекстПредупреждения)
	УзелКорреспондента = Неопределено;
		ОбъектМетаданных   = Неопределено;
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
		КонецЕсли;
		
		Если УзелКорреспондента <> Неопределено
			И Не УзелКорреспондента.Пустая() Тогда
			ОбъектМетаданных = УзелКорреспондента.Метаданные();
		КонецЕсли;
			
		КлючСообщенияЖурналаРегистрации = КомпонентыОбмена.КлючСообщенияЖурналаРегистрации;
		
		ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,
			ОбъектМетаданных,
			ОбрабатываемыйОбъект,
			ТекстПредупреждения);
КонецПроцедуры
Процедура ПриОпределенииДополнительныхНастроекИнтеграции(КомпонентыОбмена, НастройкиИнтеграции)
	Если НЕ КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		КомпонентыОбмена.УзелКорреспондента, "ВариантНастройки,Код");
	
	Если ДанныеУзла.ВариантНастройки = "КабинетКлиента" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиИнтеграцииКабинетКлиента.НастройкаПубликации КАК НастройкаПубликации
		|ИЗ
		|	РегистрСведений.НастройкиИнтеграцииКабинетКлиента КАК НастройкиИнтеграцииКабинетКлиента
		|ГДЕ
		|	НастройкиИнтеграцииКабинетКлиента.КодУзлаОбмена = &КодУзлаОбмена";
		Запрос.УстановитьПараметр("КодУзлаОбмена", ДанныеУзла.Код);
		Результат = Запрос.Выполнить().Выбрать();
		Если НЕ Результат.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		НастройкаПубликацииМЛК = Результат.НастройкаПубликации;
		ДанныеНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НастройкаПубликацииМЛК, "ВидЗаказаПокупателя,СостояниеЗаказаПокупателя, НоменклатураДоставки");
		
		НастройкиНачальногоЗаполненияЗаказПокупателя = Новый Структура;
		НастройкиНачальногоЗаполненияЗаказПокупателя.Вставить("ВидЗаказа", ДанныеНастройки.ВидЗаказаПокупателя);
		НастройкиНачальногоЗаполненияЗаказПокупателя.Вставить("СостояниеЗаказа", ДанныеНастройки.СостояниеЗаказаПокупателя);
		НастройкиНачальногоЗаполненияЗаказПокупателя.Вставить("СозданИзКабинетаКлиента", Истина);
		НастройкиНачальногоЗаполненияЗаказПокупателя.Вставить("НоменклатураДоставки", ДанныеНастройки.НоменклатураДоставки);
		
		НастройкиИнтеграции = Новый Структура;
		НастройкиИнтеграции.Вставить("НастройкаПубликацииМЛК", НастройкаПубликацииМЛК);
		НастройкиИнтеграции.Вставить("НастройкиНачальногоЗаполненияЗаказПокупателя", НастройкиНачальногоЗаполненияЗаказПокупателя);
		
	КонецЕсли;
КонецПроцедуры
Функция ПричинаОтменыЗаказа(ПричинаОтменыТекст) Экспорт
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказа.НайтиПоНаименованию(ПричинаОтменыТекст);
	
	Если ЗначениеЗаполнено(ПричинаОтменыЗаказа) Тогда
		Возврат ПричинаОтменыЗаказа;
	КонецЕсли;
	
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказа.СоздатьЭлемент();
	ПричинаОтменыЗаказа.Наименование = ПричинаОтменыТекст;
	ПричинаОтменыЗаказа.Записать();
	
	Возврат ПричинаОтменыЗаказа;
КонецФункции
Процедура ПроверитьИспНесколькихВалют()
	Если ОбщегоНазначенияУНФ.ЭтоУНФ() И Не ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	КОЛИЧЕСТВО(Валюты.Ссылка) КАК Ссылка
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(Валюты.Ссылка) > 1";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Константы.ФункциональнаяУчетВалютныхОпераций.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПроверитьИспНесколькихОрганизаций()
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	КОЛИЧЕСТВО(Организации.Ссылка) КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(Организации.Ссылка) > 1";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПроверитьНеобходимостьФормСкладаПроизводства(СтруктурнаяЕдиница, КомпонентыОбмена)
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница)
			И СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
			
			МассивСкладов = КомпонентыОбмена.ПараметрыКонвертации.ПроизводственныеСклады;
			Если МассивСкладов = Неопределено Тогда
				МассивСкладов = Новый Массив;
			КонецЕсли;
			
			Если МассивСкладов.Найти(СтруктурнаяЕдиница) = Неопределено Тогда
				МассивСкладов.Добавить(СтруктурнаяЕдиница);
			КонецЕсли;
			КомпонентыОбмена.ПараметрыКонвертации.ПроизводственныеСклады = МассивСкладов;
		КонецЕсли;
КонецПроцедуры
Процедура РассчитатьСуммуНДСВСтрокеДДС(СтрокаТаблицы)
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТаблицы.СтавкаНДС);
		
	СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.СуммаПлатежа - (СтрокаТаблицы.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
КонецПроцедуры
Процедура РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ) Экспорт
	Если Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
			СтрокаТабличнойЧасти.СуммаНДС = ?(Документ.СуммаВключаетНДС,
											  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
											  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		Иначе
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
КонецПроцедуры
Функция СвойствоФорматаОбмена(КомпонентыОбмена, ИмяСвойства)
	Результат = Ложь;
	
	ПространствоИмен = КомпонентыОбмена.XMLСхема;
	
	Если ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяСвойства, ПространствоИмен)) <> Неопределено Тогда
		Результат = Истина;
	Иначе
		МассивСтрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяСвойства);
		
		Если МассивСтрок.Количество() > 1 Тогда
			ИмяОбъекта = МассивСтрок[0] + "." + МассивСтрок[1];
			ТипФабрики = ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяОбъекта, ПространствоИмен));
			Если ТипФабрики <> Неопределено Тогда
				Для Сч = 2 По МассивСтрок.Количество() - 1 Цикл
					ИмяТекОбъекта = МассивСтрок[Сч];
					Если ТипЗнч(ТипФабрики) = Тип("СвойствоXDTO") Тогда
						ТипФабрики = ТипФабрики.Тип.Свойства.Получить(ИмяТекОбъекта);
					Иначе
						ТипФабрики = ТипФабрики.Свойства.Получить(ИмяТекОбъекта);
					КонецЕсли;
					Если ТипФабрики = Неопределено Тогда
						Возврат Ложь;
					КонецЕсли
				КонецЦикла;
				Результат = ТипФабрики <> Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция СжатьДвоичныеДанныеИзображения(ДвоичныеДанныеФайла)
	ИсходнаяКартинка = Новый Картинка(ДвоичныеДанныеФайла);
		
		Попытка
			
			ФорматИсходнойКартинки = ИсходнаяКартинка.Формат();
			
			Если ФорматИсходнойКартинки = Неопределено
				Или ФорматИсходнойКартинки = ФорматКартинки.НеизвестныйФормат Тогда
				
				ДвоичныеДанныеДляПередачи = ДвоичныеДанныеФайла;
				
				Возврат ДвоичныеДанныеДляПередачи;
				
			КонецЕсли;
			
			КартинкаДляОбработки  = Новый ОбрабатываемаяКартинка(ИсходнаяКартинка);
			КартинкаПреобразована = Ложь;
			
			Если ФорматИсходнойКартинки <> ФорматКартинки.JPEG
				И ФорматИсходнойКартинки <> ФорматКартинки.SVG 
				И ФорматИсходнойКартинки <> ФорматКартинки.PNG Тогда
				КартинкаДляОбработки.УстановитьФормат(ФорматКартинки.JPEG);
				КартинкаПреобразована = Истина;
			КонецЕсли;
			
			МаксимальнаяВысота = 480;
			МаксимальнаяШирина = 854;
			Плотность = 72;
			
			Если ФорматИсходнойКартинки <> ФорматКартинки.SVG Тогда 
				
				Если ИсходнаяКартинка.ПлотностьПоВертикали() <> Плотность
					Или ИсходнаяКартинка.ПлотностьПоГоризонтали() > Плотность Тогда
					
					КартинкаДляОбработки.УстановитьПлотность(Плотность, Плотность);	
					КартинкаПреобразована = Истина;
					
				КонецЕсли;
				
				Если ИсходнаяКартинка.Высота() > МаксимальнаяВысота
					Или ИсходнаяКартинка.Ширина() > МаксимальнаяШирина Тогда
					
					Если ИсходнаяКартинка.Высота() / МаксимальнаяВысота < ИсходнаяКартинка.Ширина() / МаксимальнаяШирина Тогда
						КартинкаДляОбработки.УстановитьРазмер(МаксимальнаяШирина,);
					Иначе
						КартинкаДляОбработки.УстановитьРазмер(,МаксимальнаяВысота);
					КонецЕсли;
					
					КартинкаПреобразована = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если КартинкаПреобразована Тогда
				ДвоичныеДанныеДляПередачи = КартинкаДляОбработки.ПолучитьКартинку().ПолучитьДвоичныеДанные();
			Иначе
				ДвоичныеДанныеДляПередачи = ДвоичныеДанныеФайла;
			КонецЕсли;
			
		Исключение
			
			ДвоичныеДанныеДляПередачи = ДвоичныеДанныеФайла;
			
		КонецПопытки;
		
		Возврат ДвоичныеДанныеДляПередачи;
КонецФункции
Функция СоздатьJSONИзСтруктуры(Параметры)
	Если Параметры.Количество() = 0 Тогда
			Возврат "";
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, Параметры);
		
		Возврат ЗаписьJSON.Закрыть();
КонецФункции
Функция СотрудникПоФизЛицу(ФизЛицо)
	Сотрудник = Неопределено;
		
		Если Не ЗначениеЗаполнено(ФизЛицо)
			ИЛИ Не ОбщегоНазначения.СсылкаСуществует(ФизЛицо) Тогда
			Возврат Сотрудник;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Физлицо = &ФизЛицо";
		
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Сотрудник;
		Иначе
			Попытка
				ДанныеНовогоСотрудника = Новый Структура;
				ДанныеНовогоСотрудника.Вставить("Наименование", ФизЛицо.Наименование);
				ДанныеНовогоСотрудника.Вставить("Физлицо", ФизЛицо);
				ДанныеНовогоСотрудника.Вставить("ТипЗанятости", Перечисления.ТипыЗанятости.ОсновноеМестоРаботы);
				ДанныеНовогоСотрудника.Вставить("СчетРасчетовСПерсоналом", ПланыСчетов.Управленческий.РасчетыСПерсоналомПоОплатеТруда);
				ДанныеНовогоСотрудника.Вставить("СчетРасчетовСПодотчетниками", ПланыСчетов.Управленческий.РасчетыСПодотчетниками);
				ДанныеНовогоСотрудника.Вставить("СчетРасчетовПоПерерасходу", ПланыСчетов.Управленческий.ПерерасходПодотчетников);
				
				Сотрудник = Справочники.Сотрудники.СоздатьНовогоСотрудника(ДанныеНовогоСотрудника);
			Исключение
			КонецПопытки;
			
			Возврат Сотрудник;
		КонецЕсли;
КонецФункции
Функция СпособПогашенияЗадолженности(КомпонентыОбмена, СтрокаРП)
	АвтоЗачетАвансов = КомпонентыОбмена.ПараметрыКонвертации.АвтоматическиЗачитыватьАвансы;
	
	Если АвтоЗачетАвансов Тогда
		СпособПогашенияЗадолженности = "Автоматически";
	Иначе
	
		Попытка
		
			Если СтрокаРП.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
				СпособПогашенияЗадолженности = "Автоматически";
			ИначеЕсли ЗначениеЗаполнено(СтрокаРП.Документ) Тогда
				СпособПогашенияЗадолженности = "ПоДокументу";
			ИначеЕсли СтрокаРП.ПризнакАванса Тогда
				СпособПогашенияЗадолженности = "НеПогашать";
			Иначе
				СпособПогашенияЗадолженности = "Автоматически";
			КонецЕсли;
		
		Исключение
		
			Если СтрокаРП.ПризнакАванса Тогда
				СпособПогашенияЗадолженности = "НеПогашать";
			ИначеЕсли ЗначениеЗаполнено(СтрокаРП.Документ) Тогда
				СпособПогашенияЗадолженности = "ПоДокументу";
			Иначе
				СпособПогашенияЗадолженности = "Автоматически";
			КонецЕсли;
		
		КонецПопытки;
	
	КонецЕсли;
	
	Возврат СпособПогашенияЗадолженности;
КонецФункции
Функция СтавкаНДСПоСтроке(СтавкаСтрокой)
	Если СтавкаСтрокой = "НДС18" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС18_118" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 18
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС10_110" Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 10
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС0" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 0
		|	И НЕ СтавкиНДС.НеОблагается";
	ИначеЕсли СтавкаСтрокой = "НДС20" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И НЕ СтавкиНДС.Расчетная";
	ИначеЕсли СтавкаСтрокой = "НДС20_120" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = 20
		|	И НЕ СтавкиНДС.НеОблагается
		|	И СтавкиНДС.Расчетная";	
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.НеОблагается";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	Иначе
		Возврат Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
КонецФункции
Функция СтавкаНДССтрокой_Отправка(СтавкаНДС)
	Если СтавкаНДС.НеОблагается Тогда	
			СтавкаНДССтрокой = "БезНДС";
		ИначеЕсли СтавкаНДС.Ставка = 18
			И НЕ СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС18";
		ИначеЕсли СтавкаНДС.Ставка = 18
			И СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС18_118";
		ИначеЕсли СтавкаНДС.Ставка = 10 
			И НЕ СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС10";
		ИначеЕсли СтавкаНДС.Ставка = 10 
			И СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС10_110";
		ИначеЕсли СтавкаНДС.Ставка = 20 
			И НЕ СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС20";
		ИначеЕсли СтавкаНДС.Ставка = 20 
			И СтавкаНДС.Расчетная Тогда
			СтавкаНДССтрокой = "НДС20_120";
		ИначеЕсли СтавкаНДС.Ставка = 0 Тогда
			СтавкаНДССтрокой = "НДС0"; 
		Иначе
			СтавкаНДССтрокой = "БезНДС";
		КонецЕсли;
			
		Возврат СтавкаНДССтрокой;
КонецФункции
Функция СтруктураДляЗагрузкиНомераГТД(НомерГТД, КомпонентыОбмена)
	// В версиях формата до 1.10 номер ГТД указывался строкой.
	// В версии формата 1.10 и выше - это справочник.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.10") Тогда
		СтруктураПКО = Новый Структура;
		СтруктураПКО.Вставить("ИмяПКО", "Справочник_НомераГТД_Получение");
		СтруктураПКО.Вставить("Значение", НомерГТД);
		Возврат СтруктураПКО;
	
	Иначе
		СтруктураПКО = Новый Структура;
		СтруктураПКО.Вставить("ИмяПКО", "Справочник_НомераГТДИзСтроки_Получение");
		СтруктураПКО.Вставить("Значение", Новый Структура("Код", НомерГТД));
		Возврат СтруктураПКО;
	КонецЕсли;
КонецФункции
Функция СтруктураДоговораКонтрагента(ДанныеИБ, Договор, Контрагент = Неопределено)
	Если ЗначениеЗаполнено(Контрагент) Тогда
			ВестиРасчетыПоДоговорам = Контрагент.ВестиРасчетыПоДоговорам = Истина;
		Иначе
			ВестиРасчетыПоДоговорам = ДанныеИБ.Контрагент.ВестиРасчетыПоДоговорам = Истина;
		КонецЕсли;
		
		Если (Не ВестиРасчетыПоДоговорам ИЛИ ТипЗнч(Договор.Владелец) <> Тип("СправочникСсылка.Контрагенты")) 
			И ЗначениеЗаполнено(Договор) Тогда
				
			Если ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.СчетФактура") 
				ИЛИ ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
				
				Если ДанныеИБ.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
					Документ = ДанныеИБ.ДокументОснование;
				Иначе
					Если ДанныеИБ.ДокументыОснования.Количество() > 0 Тогда
						Документ = ДанныеИБ.ДокументыОснования[0].ДокументОснование;
					Иначе
						Документ = Документы.РасходнаяНакладная.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
			Иначе
				Документ = ДанныеИБ.Ссылка;
			КонецЕсли;
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктВыполненныхРабот")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.АвансовыйОтчет")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ДополнительныеРасходы")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомиссионера") 
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомитенту")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетОПереработке")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетПереработчика")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплату")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
				ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РасходыПриИмпорте") Тогда
				
				СписокВидовДоговора = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
			Иначе
				СписокВидовДоговора = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, Документ.ВидОперации);
			КонецЕсли;
			
			СтруктураДоговора = Новый Структура;
			
			СтруктураДоговора.Вставить("ВидДоговора");
			СтруктураДоговора.Вставить("Наименование");
			СтруктураДоговора.Вставить("Организация");
			СтруктураДоговора.Вставить("РасчетыВУсловныхЕдиницах");
			СтруктураДоговора.Вставить("Контрагент");
			СтруктураДоговора.Вставить("Номер");
			СтруктураДоговора.Вставить("Дата");
			СтруктураДоговора.Вставить("ВалютаВзаиморасчетов");
			СтруктураДоговора.Вставить("ВидЦен");
			
			ЗаполнитьЗначенияСвойств(СтруктураДоговора, Договор);
			
			СтруктураДоговора.Контрагент = Договор.Владелец;
			СтруктураДоговора.ВалютаВзаиморасчетов = Договор.ВалютаРасчетов;
			СтруктураДоговора.Дата = Договор.ДатаДоговора;
			СтруктураДоговора.Номер = Договор.НомерДоговора;
			
			СтруктураДоговора.Организация = ДанныеИБ.Организация;
			
			Если ТипЗнч(Договор.Владелец) <> Тип("СправочникСсылка.Контрагенты") Тогда
			    Если ЗначениеЗаполнено(Контрагент) Тогда
			    	СтруктураДоговора.Контрагент = Контрагент;
			    ИначеЕсли ДанныеИБ.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			    	СтруктураДоговора.Контрагент = ДанныеИБ.Контрагент;
			    КонецЕсли;
			КонецЕсли;
			
			Если СписокВидовДоговора.Количество() > 0
				И СписокВидовДоговора.НайтиПоЗначению(СтруктураДоговора.ВидДоговора) = Неопределено Тогда
				СтруктураДоговора.ВидДоговора = СписокВидовДоговора[0].Значение;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеИБ) = Тип("ДокументОбъект.ДополнительныеРасходы") Тогда
				
				Для каждого СтрокаТабличнойЧасти Из ДанныеИБ.Запасы Цикл
					Если ТипЗнч(СтрокаТабличнойЧасти.ДокументПоступления) = Тип("ДокументСсылка.ПриходнаяНакладная")
						И СтрокаТабличнойЧасти.ДокументПоступления.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
						
						СтруктураДоговора.ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураДоговора = Новый Структура("Значение, ИмяПКО", СтруктураДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		Иначе
			СтруктураДоговора = Новый Структура("Значение, ИмяПКО", Договор, "Справочник_ДоговорыКонтрагентов_Отправка");
		КонецЕсли;
		
		Возврат СтруктураДоговора;
КонецФункции
Функция СтруктураДоговораКредитаИЗайма(ДанныеИБ, Договор)
	СтруктураДоговора = Новый Структура;
			
	СтруктураДоговора.Вставить("ВидДоговора");
	СтруктураДоговора.Вставить("Наименование");
	СтруктураДоговора.Вставить("Организация");
	СтруктураДоговора.Вставить("РасчетыВУсловныхЕдиницах");
	СтруктураДоговора.Вставить("Контрагент");
	СтруктураДоговора.Вставить("Номер");
	СтруктураДоговора.Вставить("Дата");
	СтруктураДоговора.Вставить("ВалютаВзаиморасчетов");
	СтруктураДоговора.Вставить("ВидЦен");
			
	ЗаполнитьЗначенияСвойств(СтруктураДоговора, Договор);
	
	Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СтруктураДоговора.Контрагент = Договор.Владелец;
	КонецЕсли;
			
	СтруктураДоговора.ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
	СтруктураДоговора.ВалютаВзаиморасчетов = Договор.ВалютаРасчетов;
	
	СтруктураДоговора.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Договор кредита (займа) номер %1 от %2'"),
		ДанныеИБ.Номер,
		ДанныеИБ.Дата);
		
	СтруктураДоговора = Новый Структура("Значение, ИмяПКО", СтруктураДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
	Возврат СтруктураДоговора;
КонецФункции
Функция ТаблицаРаспределенияМатериалов(ДанныеИБ)
	ТаблицаРаспределенияМатериалов = Новый ТаблицаЗначений;
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("Номенклатура");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("Количество");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("КоличествоМест");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("Коэффициент");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("КатегорияНоменклатуры");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("НаправлениеДеятельности");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("Продукция");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("НомерГТД");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("СтранаПроисхождения");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("ПрослеживаемыйТовар");
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("ИдентификаторСтроки");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
		
		Если ДанныеИБ.Продукция.Количество() = 1 Тогда
			
			Для каждого СтрокаТаблицы Из ДанныеИБ.Запасы Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.Партия)
					И СтрокаТаблицы.Партия.Статус = Перечисления.СтатусыПартий.ДавальческоеСырье Тогда
					Продолжить;
				КонецЕсли;
				
				ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "ТипНоменклатуры");
				Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
					НоваяСтрока = ТаблицаРаспределенияМатериалов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.КоличествоМест = СтрокаТаблицы.Количество;
					НоваяСтрока.КатегорияНоменклатуры = ДанныеИБ.Продукция[0].Номенклатура.КатегорияНоменклатуры;
					НоваяСтрока.НаправлениеДеятельности = ДанныеИБ.Продукция[0].Номенклатура.НаправлениеДеятельности;
					Если ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения")
						И НоваяСтрока.ЕдиницаИзмерения.Коэффициент > 0 Тогда
						НоваяСтрока.Количество = Число(Формат(НоваяСтрока.Количество * НоваяСтрока.ЕдиницаИзмерения.Коэффициент, "ЧДЦ=3"));
						НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
					КонецЕсли;
					НоваяСтрока.Продукция = ДанныеИБ.Продукция[0].Номенклатура;
					
					НоваяСтрока.НомерГТД = ДанныеИБ.Продукция[0].НомерГТД;
					НоваяСтрока.СтранаПроисхождения = ДанныеИБ.Продукция[0].СтранаПроисхождения;
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеИБ.Продукция[0].ПрослеживаемыйТовар;
					НоваяСтрока.ИдентификаторСтроки = ДанныеИБ.Продукция[0].ИдентификаторСтроки;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Если ДанныеИБ.РаспределениеЗапасов.Количество() = 0 Тогда
				УстановитьПривилегированныйРежим(Истина);
				ПроизводствоСервер.РаспределитьМатериалы(ДанныеИБ.Продукция, ДанныеИБ.Запасы, ДанныеИБ.РаспределениеЗапасов);
				ДанныеИБ.ОбменДанными.Загрузка = Истина;
				ДанныеИБ.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
				ДанныеИБ.Записать();
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СборкаЗапасовРаспределениеЗапасов.Номенклатура КАК Номенклатура,
			|	СборкаЗапасовПродукция.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
			|	СборкаЗапасовПродукция.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	СборкаЗапасовПродукция.Номенклатура КАК Продукция,
			|	СборкаЗапасовРаспределениеЗапасов.Партия КАК Партия,
			|	СУММА(ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовРаспределениеЗапасов.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
			|					И СборкаЗапасовРаспределениеЗапасов.ЕдиницаИзмерения.Коэффициент > 0
			|				ТОГДА ВЫРАЗИТЬ(СборкаЗапасовРаспределениеЗапасов.Количество * СборкаЗапасовРаспределениеЗапасов.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3))
			|			ИНАЧЕ СборкаЗапасовРаспределениеЗапасов.Количество
			|		КОНЕЦ) КАК Количество,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовРаспределениеЗапасов.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
			|			ТОГДА СборкаЗапасовРаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ СборкаЗапасовРаспределениеЗапасов.ЕдиницаИзмерения
			|	КОНЕЦ КАК ЕдиницаИзмерения,
			|	СборкаЗапасовРаспределениеЗапасов.Спецификация КАК Спецификация,
			|	СборкаЗапасовПродукция.НомерГТД КАК НомерГТД,
			|	СборкаЗапасовПродукция.СтранаПроисхождения КАК СтранаПроисхождения,
			|	СборкаЗапасовПродукция.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
			|	СборкаЗапасовПродукция.ИдентификаторСтроки КАК ИдентификаторСтроки
			|ИЗ
			|	Документ.СборкаЗапасов.РаспределениеЗапасов КАК СборкаЗапасовРаспределениеЗапасов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
			|		ПО СборкаЗапасовРаспределениеЗапасов.Ссылка = СборкаЗапасовПродукция.Ссылка
			|			И СборкаЗапасовРаспределениеЗапасов.КлючСвязиПродукция = СборкаЗапасовПродукция.КлючСвязи
			|ГДЕ
			|	СборкаЗапасовРаспределениеЗапасов.Ссылка = &Ссылка
			|	И СборкаЗапасовПродукция.Ссылка = &Ссылка
			|	И СборкаЗапасовРаспределениеЗапасов.Количество <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	СборкаЗапасовРаспределениеЗапасов.Спецификация,
			|	СборкаЗапасовРаспределениеЗапасов.ЕдиницаИзмерения,
			|	СборкаЗапасовРаспределениеЗапасов.Партия,
			|	СборкаЗапасовРаспределениеЗапасов.Номенклатура,
			|	СборкаЗапасовПродукция.Номенклатура.КатегорияНоменклатуры,
			|	СборкаЗапасовПродукция.Номенклатура.НаправлениеДеятельности,
			|	СборкаЗапасовПродукция.Номенклатура,
			|	СборкаЗапасовПродукция.НомерГТД,
			|	СборкаЗапасовПродукция.СтранаПроисхождения,
			|	СборкаЗапасовПродукция.ПрослеживаемыйТовар,
			|	СборкаЗапасовПродукция.ИдентификаторСтроки,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовРаспределениеЗапасов.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
			|			ТОГДА СборкаЗапасовРаспределениеЗапасов.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ СборкаЗапасовРаспределениеЗапасов.ЕдиницаИзмерения
			|	КОНЕЦ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Партия)
					И Выборка.Партия.Статус = Перечисления.СтатусыПартий.ДавальческоеСырье Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаРаспределенияМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеИБ.Запасы.Количество() = 1 Тогда
			
			Для каждого СтрокаТаблицы Из ДанныеИБ.Продукция Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.Партия)
					И СтрокаТаблицы.Партия.Статус = Перечисления.СтатусыПартий.ДавальческоеСырье Тогда
					Продолжить;
				КонецЕсли;
				
				ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "ТипНоменклатуры");
				Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
					НоваяСтрока = ТаблицаРаспределенияМатериалов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.КоличествоМест = СтрокаТаблицы.Количество;
					НоваяСтрока.КатегорияНоменклатуры = ДанныеИБ.Запасы[0].Номенклатура.КатегорияНоменклатуры; 
					НоваяСтрока.НаправлениеДеятельности = ДанныеИБ.Запасы[0].Номенклатура.НаправлениеДеятельности;
					Если ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения")
						И НоваяСтрока.ЕдиницаИзмерения.Коэффициент > 0 Тогда
						НоваяСтрока.Количество = Число(Формат(НоваяСтрока.Количество * НоваяСтрока.ЕдиницаИзмерения.Коэффициент, "ЧДЦ=3"));
						НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
					КонецЕсли;
					НоваяСтрока.Продукция = ДанныеИБ.Запасы[0].Номенклатура;
					
					НоваяСтрока.НомерГТД = ДанныеИБ.Запасы[0].НомерГТД;
					НоваяСтрока.СтранаПроисхождения = ДанныеИБ.Запасы[0].СтранаПроисхождения;
					НоваяСтрока.ПрослеживаемыйТовар = ДанныеИБ.Запасы[0].ПрослеживаемыйТовар;
					НоваяСтрока.ИдентификаторСтроки = ДанныеИБ.Запасы[0].ИдентификаторСтроки;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Запасы.Номенклатура КАК Номенклатура,
			|	Запасы.КоррНоменклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
			|	Запасы.КоррНоменклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	Запасы.КоррНоменклатура КАК Продукция,
			|	Запасы.Партия КАК Партия,
			|	СУММА(Запасы.Количество) КАК Количество,
			|	Запасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	Запасы.Спецификация КАК Спецификация,
			|	Запасы.Регистратор КАК Регистратор,
			|	Запасы.Номенклатура.ПрослеживаемыйТовар КАК ПрослеживаемыйТовар
			|ИЗ
			|	РегистрНакопления.Запасы КАК Запасы
			|ГДЕ
			|	Запасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И Запасы.ЗатратыНаВыпуск
			|	И Запасы.Регистратор = &Ссылка
			|	И Запасы.Количество <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	Запасы.Спецификация,
			|	Запасы.Номенклатура,
			|	Запасы.Регистратор,
			|	Запасы.Партия,
			|	Запасы.КоррНоменклатура.КатегорияНоменклатуры,
			|	Запасы.КоррНоменклатура.НаправлениеДеятельности,
			|	Запасы.КоррНоменклатура,
			|	Запасы.Номенклатура.ЕдиницаИзмерения,
			|	Запасы.Номенклатура.ПрослеживаемыйТовар";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Партия)
					И Выборка.Партия.Статус = Перечисления.СтатусыПартий.ДавальческоеСырье Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаРаспределенияМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаРаспределенияМатериалов.Колонки.Добавить("НомерГТДСсылка");
	Для каждого СтрокаТаблицы Из ТаблицаРаспределенияМатериалов Цикл
		СтрокаТаблицы.НомерГТДСсылка = СтрокаТаблицы.НомерГТД;
	КонецЦикла; 
	
	Возврат ТаблицаРаспределенияМатериалов;
КонецФункции
Процедура УстановитьВариантЗаполненияРасшифровкиПлатежа(Объект)
	Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СпособЗачета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			СтрокаТаблицы.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		Иначе
			СтрокаТаблицы.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ВариантЗаполненияРасшифровки = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную;
КонецПроцедуры
Процедура УстановитьИспользованиеПКО(ИспользованиеПКО, Режим)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО[Правило.Ключ] = Режим;
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации)
	ПризнакПроведенПолученный = Неопределено;
	// Устанавливается в особых случаях, когда проведение документа зависит от других данных.
	ПолученныеДанные.ДополнительныеСвойства.Свойство("Проведен", ПризнакПроведенПолученный);
		
	// Если признак проведения не был задан явно, считается что он взведен.
	Если ПризнакПроведенПолученный = Неопределено Тогда
		ПризнакПроведенПолученный = Истина;
	КонецЕсли;
	ПолученныеДанные.Проведен = ПризнакПроведенПолученный;
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.Проведен = ПолученныеДанные.Проведен;
	КонецЕсли;
КонецПроцедуры
Процедура УточнитьПоискДанныхИБ(ДанныеИБ, ИмяТаблицы, СтруктураПоиска)
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втДокументыПоПолямПоиска
	|ИЗ
	|	Документ.ВводНачальныхОстатков.%ИмяТаблицы% КАК Т
	|ГДЕ
	|	%ТекстОтборов%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатков.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыПоПолямПоиска КАК втДокументыПоПолямПоиска
	|		ПО (ВводНачальныхОстатков.Ссылка = втДокументыПоПолямПоиска.Ссылка)
	|ГДЕ
	|	ВводНачальныхОстатков.Дата = &Дата
	|	И ВводНачальныхОстатков.Организация = &Организация
	|	И ВводНачальныхОстатков.РазделУчета = &РазделУчета
	|";
	
	ТекстОтборов = "";
	Для Каждого Строка Из СтруктураПоиска Цикл
		Если ЗначениеЗаполнено(ТекстОтборов) Тогда
			ТекстОтборов = ТекстОтборов + " И ";
		КонецЕсли;
	
		ТекстОтборов = ТекстОтборов + "Т.%1 = &%1";
		ТекстОтборов = СтрШаблон(ТекстОтборов, Строка.Ключ);
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстОтборов%", ТекстОтборов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("Организация", ДанныеИБ.Организация);
	Запрос.УстановитьПараметр("РазделУчета", ДанныеИБ.РазделУчета);
	
	Для Каждого Строка Из СтруктураПоиска Цикл
		Запрос.УстановитьПараметр(Строка.Ключ, Строка.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеИБ = Выборка.Ссылка.ПолучитьОбъект();
		Возврат;
	КонецЦикла;
	
	ДанныеИБ = Неопределено;
КонецПроцедуры
Функция ФизЛицоПоДаннымXDTO(ДанныеXDTO)
	ФизЛицо = Неопределено;	
	Попытка
		ФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеXDTO.Сотрудник.Ссылка.Значение));
		Если Не ЗначениеЗаполнено(ФизЛицо) ИЛИ Не ЗначениеЗаполнено(ФизЛицо.Наименование) Тогда
			ФизЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(ДанныеXDTO.Сотрудник.ФИО);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ФизЛицо;
КонецФункции
Функция ФизЛицоПоСотруднику(Сотрудник)
	Если ЗначениеЗаполнено(Сотрудник.Физлицо) Тогда
		СтруктураФизЛица = Новый Структура("Значение, ИмяПКО", Сотрудник.Физлицо, "Справочник_ФизическиеЛица_Отправка");
	Иначе
		
		НаименованиеФизЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Наименование");
		
		СтруктураФизЛица = Новый Структура;
		СтруктураФизЛица.Вставить("ФИО", НаименованиеФизЛица);
		СтруктураФизЛица.Вставить("УточнениеНаименования", НаименованиеФизЛица);
		
		СтруктураФизЛица = Новый Структура("Значение, ИмяПКО", СтруктураФизЛица, "Справочник_ФизическиеЛицаИзСтруктуры_Отправка");
	
	КонецЕсли;
	
	Возврат СтруктураФизЛица;
КонецФункции
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции
Функция ЭтоРасширениеФайлаКартинки(Знач Расширение)
	Если СтрНачинаетсяС(Расширение, ".") Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;
	ОжидаемыеРасширения = Новый Массив;
	ОжидаемыеРасширения.Добавить("bmp");
	ОжидаемыеРасширения.Добавить("gif");
	ОжидаемыеРасширения.Добавить("png");
	ОжидаемыеРасширения.Добавить("jpeg");
	ОжидаемыеРасширения.Добавить("jpg");
	ОжидаемыеРасширения.Добавить("dib");
	ОжидаемыеРасширения.Добавить("rle");
	ОжидаемыеРасширения.Добавить("tif");
	ОжидаемыеРасширения.Добавить("ico");
	ОжидаемыеРасширения.Добавить("wmf");
	ОжидаемыеРасширения.Добавить("emf");
	Возврат ОжидаемыеРасширения.Найти(Расширение) <> Неопределено;
КонецФункции
Функция ЭтоЧек54ФЗ(ЧекККМ)
	//ЧекККМ классической продажи (продали товар с оплатой на кассе):
		//
		//1. флаг ОперацияСДенежнымиСредствами = Ложь 
		//2. не заполнена ТЧ Предоплата
		//3. в ТЧ БезналичнаяОплата нет рассрочки оплаты или кредита
		//
		//Чеки, которые не соответствуют этим условиям, выгружаются отдельно от ОРП.
		
		Результат = Ложь;
		
		ДанныеЧека = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЧекККМ, "ОперацияСДенежнымиСредствами,БезналичнаяОплата,Предоплата");
		
		ТЧБезналичнаяОплата = ДанныеЧека.БезналичнаяОплата.Выгрузить();
		ЕстьОплатаВРассрочку = ТЧБезналичнаяОплата.Найти(Перечисления.ВидыБезналичныхОплат.ОплатаВРассрочку) <> Неопределено;
		ЕстьОплатаВКредит = ТЧБезналичнаяОплата.Найти(Перечисления.ВидыБезналичныхОплат.Кредит) <> Неопределено;
		
		Если ДанныеЧека.ОперацияСДенежнымиСредствами = Истина
			ИЛИ НЕ ДанныеЧека.Предоплата.Пустой()
			ИЛИ ЕстьОплатаВРассрочку
			ИЛИ ЕстьОплатаВКредит Тогда
			
			Результат = Истина;
			
		КонецЕсли;
		
		Возврат Результат;
КонецФункции

#КонецОбласти
#КонецОбласти
