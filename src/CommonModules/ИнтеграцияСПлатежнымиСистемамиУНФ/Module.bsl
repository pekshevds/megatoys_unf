
#Область ПрограммныйИнтерфейс

#Область НастройкиОплатыСБП

// Определяет прикладные настройки интеграции с платежными системами.
//
// Параметры:
//  Настройки - Структура - настройки интеграции:
//    *ОбъектМетаданных - Метаданные.РегистрыСведений - объект метаданных регистр сведений,
//                        в котором хранятся настройки выполнения оплат. Регистр определяет
//                        связь торговой точки платежной системы и аналитики ведения учета
//                        в программах 1С. На основании данных регистра должен выполняется
//                        поиск торговой точки (настройки интеграции) при выполнении оплат и возвратов;
//    *ИсключаемыеПоля - Массив Из Строка - наименования измерений, ресурсов или реквизитов, которые
//                        необходимо скрыть на форме настройки интеграции. 
//
Процедура ПриОпределенииНастроекИнтеграции(Настройки) Экспорт
	
	ОбъектМетаданных	= Метаданные.РегистрыСведений.СоответствиеНастроекИнтеграцииРМК;
	ИсключаемыеПоля 	= Новый Массив;
	ИсключаемыеПоля.Добавить("ПлатежнаяСистемаККТ");
	ИсключаемыеПоля.Добавить("ИдентификаторПлатежнойСистемы");
	
	Если Не ИспользоватьНесколькоОрганизаций() Тогда
		ИсключаемыеПоля.Добавить("Организация");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоВидовОплаты() Тогда
		ИсключаемыеПоля.Добавить("СпособОплаты");
	КонецЕсли;
	
	Настройки.c2b.Вставить("ОбъектМетаданных", ОбъектМетаданных);
	Настройки.c2b.Вставить("ИсключаемыеПоля",  ИсключаемыеПоля);
	
КонецПроцедуры

// Определяет алгоритм записи настроек оплат в регистр сведений указанный в методе
// ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииНастроекИнтеграции.
//
// Параметры:
//  ПараметрыОплаты - Структура - содержит данные для записи настроек в регистр сведений.
//                    Структура параметра соответствует структуре регистра, которая определена
//                    в метаданных за исключением полей указанных в настройках в свойстве ИсключаемыеПоля
//                    процедуры ПриОпределенииНастроекИнтеграции;
//  Отказ - Булево - следует устанавливать значение Истина, если в процессе записи возникли ошибки;
//  СообщениеОбОшибке - Строка - сообщение для пользователя. Отображается в случае, если в параметр
//                      Отказ установлено значение Истина.
//
Процедура ПриЗаписиНастроекИнтеграции(ПараметрыОплаты, Отказ, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		ПустаяНастройка		= Новый Структура("Идентификатор", "");
		
		Организация			= ПараметрыОплаты.c2b.Получить("Организация");
		СпособОплаты		= ПараметрыОплаты.c2b.Получить("СпособОплаты");
		ТорговыйОбъект		= ПараметрыОплаты.c2b.Получить("ТорговыйОбъект");
		Интеграция			= ПараметрыОплаты.c2b.Получить("Интеграция");
		
		НастройкиИнтеграции = ?(ЗначениеЗаполнено(Интеграция), 
									НастройкиТорговойТочки(Интеграция), 
									ПустаяНастройка);
									
		ИдентификаторПС		= НастройкиИнтеграции.Идентификатор;
		
		Если Не ИспользоватьНесколькоОрганизаций() Тогда
			Организация = ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		Если Не ИспользоватьНесколькоВидовОплаты() Тогда
			СпособОплаты = ВидОплатыПоУмолчанию(Организация);
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоответствиеНастроекИнтеграцииРМК");
		ЭлементБлокировки.УстановитьЗначение("Организация",  					Организация);
		ЭлементБлокировки.УстановитьЗначение("СпособОплаты",  					СпособОплаты);
		ЭлементБлокировки.УстановитьЗначение("ТорговыйОбъект",  				ТорговыйОбъект);
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Если ЗначениеЗаполнено(Интеграция) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоответствиеНастроекИнтеграции.Организация КАК Организация,
			|	СоответствиеНастроекИнтеграции.СпособОплаты КАК СпособОплаты,
			|	СоответствиеНастроекИнтеграции.ТорговыйОбъект КАК ТорговыйОбъект
			|ИЗ
			|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК СоответствиеНастроекИнтеграции
			|ГДЕ
			|	СоответствиеНастроекИнтеграции.Интеграция = &Интеграция";
			
			Запрос.УстановитьПараметр("Интеграция", 		Интеграция);
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Набор = РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
				Набор.Отбор.СпособОплаты.Установить(ВыборкаДетальныеЗаписи.СпособОплаты);
				Набор.Отбор.ТорговыйОбъект.Установить(ВыборкаДетальныеЗаписи.ТорговыйОбъект);
				Набор.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК СоответствиеНастроекИнтеграции
		|ГДЕ
		|	СоответствиеНастроекИнтеграции.Организация = &Организация
		|	И СоответствиеНастроекИнтеграции.СпособОплаты = &СпособОплаты
		|	И СоответствиеНастроекИнтеграции.ТорговыйОбъект = &ТорговыйОбъект
		|	И СоответствиеНастроекИнтеграции.Интеграция <> &Интеграция
		|	И СоответствиеНастроекИнтеграции.Интеграция.Используется";
		
		Запрос.УстановитьПараметр("ТорговыйОбъект", 				ТорговыйОбъект);
		Запрос.УстановитьПараметр("Организация",   					Организация);
		Запрос.УстановитьПараметр("СпособОплаты",   				СпособОплаты);
		Запрос.УстановитьПараметр("Интеграция", 					Интеграция);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Если ИспользоватьНесколькоВидовОплаты() Тогда
				СообщениеОбОшибке = НСтр("ru = 'Для организации, торгового объекта и способа оплаты уже задана торговая точка.'");
			Иначе
				СообщениеОбОшибке = НСтр("ru = 'Для организации и торгового объекта уже задана торговая точка.'");
			КонецЕсли;
			
			ВызватьИсключение СообщениеОбОшибке;     
			
		КонецЕсли;

		Запись = РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.СоздатьМенеджерЗаписи();
		
		Запись.Интеграция 	 					= Интеграция;
		Запись.Организация   					= Организация;
		Запись.СпособОплаты   					= СпособОплаты;
		Запись.ТорговыйОбъект       			= ТорговыйОбъект;
		Запись.ИдентификаторПлатежнойСистемы	= ИдентификаторПС;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ИнтеграцияСПлатежнымиСистемамиУНФ.ПриЗаписиНастроекИнтеграции'"
				, ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Отказ = Истина;
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;

	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Позволяет настроить элементы настройки приема оплат на формах подключения
// к Системе быстрых платежей.
//
// Параметры:
//  НастройкиФормы - Структура - содержит элементы формы и текущие значения реквизитов:
//    * ОбщиеЭлементы - Структура - общие настройки формы подключения к Системой быстрых платежей:
//      ** Наименование - Элемент - элемент формы, в котором заполняется наименование;
//    * ЭлементыНастроекОплаты - Структура - элементы формы настройки оплаты. Структура параметра
//        соответствует структуре регистра, который определяется в методе
//        ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииНастроекИнтеграции, за исключением
//        полей указанных в настройках в свойстве ИсключаемыеПоля.
//    * ЗначенияНастроекОплаты - Структура - текущее значение реквизитов настроек. Структура параметра
//        соответствует структуре регистра, который определяется в методе
//        ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииНастроекИнтеграции, за исключением
//        полей указанных в настройках в свойстве ИсключаемыеПоля:
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры настройки интеграции с
//    Системой быстрых платежей.
//
Процедура ПриНастройкеЭлементовФормыИнтеграции(НастройкиФормы, ДополнительныеПараметры) Экспорт

	Если ИспользоватьНесколькоВидовОплаты() Тогда
	
		ЭлементФормы 		  = НастройкиФормы.c2b.ЭлементыНастроекОплаты.СпособОплаты;
	
		СвязиПараметровВыбора = Новый Массив;
		ПараметрыВыбора		  = Новый Массив;
	
		Если ИспользоватьНесколькоОрганизаций() Тогда

			Связь = Новый СвязьПараметраВыбора("Отбор.Организация", "Организация");
			СвязиПараметровВыбора.Добавить(Связь);          
		
		Иначе
		
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", ОрганизацияПоУмолчанию());
			ПараметрыВыбора.Добавить(НовыйПараметр);	
		
		КонецЕсли;
	
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Тип", Перечисления.ТипыСпособовОплат.СБП);
		ПараметрыВыбора.Добавить(НовыйПараметр);	

		НовыйПараметр = Новый ПараметрВыбора("РежимПлатежнойСистемы", Истина);
		ПараметрыВыбора.Добавить(НовыйПараметр);	

		ЭлементФормы.СвязиПараметровВыбора 	= Новый ФиксированныйМассив(СвязиПараметровВыбора);
		ЭлементФормы.ПараметрыВыбора 		= Новый ФиксированныйМассив(ПараметрыВыбора);

	КонецЕсли;
	
КонецПроцедуры

// Позволяет предзаполнить настройки приема платежей на формах подключения
// к Системе быстрых платежей.
//
// Параметры:
//  Настройки - Структура - содержит элементы формы и текущие значения реквизитов:
//    * ОбщиеНастройки - Структура - общие настройки формы подключения к Системой быстрых платежей:
//      ** Наименование - Строка - значение заполнения поля наименование;
//    * НастройкиОплаты - Структура - значение заполнения реквизитов настройки приема оплат. Структура параметра
//        соответствует структуре регистра, который определяется в методе
//        ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииНастроекИнтеграции, за исключением
//        полей указанных в настройках в свойстве ИсключаемыеПоля:
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры настройки интеграции с
//    Системой быстрых платежей.
//
Процедура ПриЗаполненииФормыИнтеграции(Настройки, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда

		Автонаименование = СтрШаблон(НСтр("ru = '%1'"), ДополнительныеПараметры.ТорговыйОбъект);
			
		ЗаполнитьЗначенияСвойств(Настройки.НастройкиОплаты.c2b, ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(Настройки.ОбщиеНастройки,  	Новый Структура("Наименование", Автонаименование));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрикладныеОперацииСБП

// Определяются данные для формирования запроса на оплату в платежную систему СБП.
// Все поля переменной ЗаказНаОплату обязательны для заполнения.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                   продажу в информационной базе;
//  ЗаказНаОплату - Структура - содержит описание заказа на оплату в платежной системе СБП:
//    *СуммаОплаты - Число - сумма оплаты в платежной системе. Сумма, которую необходимо
//                   списать со счета или карты покупателя;
//    *ДатаОплаты - Дата - дата операции оплаты;
//    *СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//                       Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//                       (90 дней в минутах). В случае передачи значения не входящего в выше
//                       описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//                       Если значение не предано используется стандартный срок использования СБП.
//    *НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//                         в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//                         делать строку не длинной и включать информацию об организации, которая
//                         является получателем денежных средств, например: Оплата СБП 524,00 RUB ООО Ромашка
//                         Если строка не заполнена, будет передано стандартное представление
//                         назначения: Оплата СБП {ЗаказНаОплату.СуммаОплаты} RUB.
//                         Длина строки не должна превышать 140 символов, в противном случае будет
//                         обрезана принудительно. Система быстрых платежей имеет дополнительные требования
//                         к символам и их кодировке. Возможна передача следующих значений:
//                           - символы латинского алфавит (A-Z и a-z) с десятичными кодами из диапазона
//                             [065-090] и [091-122] в кодировке UTF-8;
//                           - символы русского алфавит (А-Я и а-я) с десятичными кодами из диапазона
//                             [065-090] и [091-122] в кодировке UTF-8;
//                           - цифры (0-9) с десятичными кодами из диапазона [048-057] в кодировке UTF-8;
//                           - специальные символы с десятичными кодами из диапазонов [032-047], [058-064],
//                             [091-096],[123-126] в кодировке UTF-8;
//                           - символ № под номером 8470 в кодировке UTF-8;
//  ТорговаяТочка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой.
//  ДокументОплатыСтруктура - Структура - дополнительные параметры заказа.
//
Процедура ПриФормированииЗаказаНаОплатуСБП(ДокументОплаты, 
												ЗаказНаОплату, 
												ТорговаяТочка, 
												ДокументОплатыСтруктура) Экспорт

	Если ДокументОплатыСтруктура <> Неопределено Тогда
													
		ЗаполнитьЗначенияСвойств(ЗаказНаОплату, ДокументОплатыСтруктура);
	
		ЗаказНаОплату.СуммаОплаты     = ДокументОплатыСтруктура.ИтогПоЧеку;
		ЗаказНаОплату.ДатаОплаты      = ДокументОплатыСтруктура.Дата;

	Иначе

		РеквизитыЗапроса	= Новый Структура("СуммаОплаты, ДатаОплаты", "СуммаДокумента", "Дата");
		РеквизитыДокумента 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОплаты, РеквизитыЗапроса);
		
		ЗаполнитьЗначенияСвойств(ЗаказНаОплату, РеквизитыДокумента);
		ЗаполнитьЗначенияСвойств(ЗаказНаОплату, Новый Структура("ОтложенноеПолучениеСтатуса", Истина));
		ЗаполнитьЗначенияСвойств(ЗаказНаОплату, Новый Структура("СрокЖизниQRКода", 			  24*60*10)); // 10 дней
		
	КонецЕсли;
	
КонецПроцедуры

// Определяются данные для формирования запроса на возврат в платежную систему СБП.
// Все поля переменной ЗаказНаВозврат обязательны для заполнения.
//
// Параметры:
//  ДокументВозврата - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                     возврат в информационной базе;
//  ЗаказНаВозврат - Структура - содержит описание заказа на возврат в платежной системе СБП:
//    *СуммаВозврата - Число - сумма возврата в платежной системе. Сумма, которую необходимо
//                     списать со счета или карты покупателя;
//    *ДатаВозврата - Дата - дата операции возврата;
//  ТорговаяТочка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой.
//  ДокументВозвратаСтруктура - Структура - дополнительные параметры заказа.
//
Процедура ПриФормированииЗаказаНаВозвратСБП(ДокументВозврата, 
												ЗаказНаВозврат, 
												ТорговаяТочка, 
												ДокументВозвратаСтруктура) Экспорт

	Если ДокументВозвратаСтруктура <> Неопределено Тогда											

		ЗаказНаВозврат.ДатаВозврата  	= ДокументВозвратаСтруктура.Дата;
		ЗаказНаВозврат.СуммаВозврата 	= ДокументВозвратаСтруктура.ИтогПоЧеку;
		
		// условие идемпотентности
		Если ОбщегоНазначения.СсылкаСуществует(ДокументВозврата) Тогда
			ЗаказНаВозврат.ДатаВозврата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВозврата, "Дата");
		КонецЕсли;
		
	Иначе

		РеквизитыЗапроса	= Новый Структура("СуммаВозврата, ДатаВозврата", "СуммаДокумента", "Дата");
		РеквизитыДокумента 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументВозврата, РеквизитыЗапроса);
		
		ЗаполнитьЗначенияСвойств(ЗаказНаВозврат, РеквизитыДокумента);
		
	КонецЕсли;	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриЗагрузкеСтатусаОперации
Процедура ПриЗагрузкеСтатусаОперации(
		ДокументОперации,
		НастройкаПодключения,
		РезультатОбработки,
		Обработан) Экспорт

	УстановитьПривилегированныйРежим(Истина);
		
	#Область ТекстЗапроса
	ТекстЗапросаПоискДокументаОплаты = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОперацияПоПлатежнымКартам.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.ПометкаУдаления = ЛОЖЬ
	|	И ОперацияПоПлатежнымКартам.СсылочныйНомер = &ИдентификаторПлатежа
	|	И ОперацияПоПлатежнымКартам.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыЭквайринг.ОплатаСБП)";
	#КонецОбласти
		
	Если РезультатОбработки.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда

		НачатьТранзакцию();
	
		Попытка
			
			ИдентификаторПлатежа    = ПереводыСБПc2b.ИдентификаторыОперацииОплаты(ДокументОперации);
		
			ИдентификаторыСервисов  = Новый ТаблицаЗначений;
			ИдентификаторыСервисов.Колонки.Добавить("ИдентификаторПлатежа", ОбщегоНазначения.ОписаниеТипаСтрока(100));

			ЗаполнитьЗначенияСвойств(ИдентификаторыСервисов.Добавить(),
				Новый Структура("ИдентификаторПлатежа", ИдентификаторПлатежа));
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ОперацияПоПлатежнымКартам");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ИдентификаторыСервисов;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СсылочныйНомер", "ИдентификаторПлатежа");
			Блокировка.Заблокировать();

			Запрос = Новый Запрос(ТекстЗапросаПоискДокументаОплаты);
			Запрос.УстановитьПараметр("ИдентификаторПлатежа", ИдентификаторПлатежа);

			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				
				ДокументОплаты = СоздатьДокументОперацияПоПлатежнойСистеме(
					НастройкаПодключения, 
					ДокументОперации, 
					ИдентификаторПлатежа, 
					РезультатОбработки.ПараметрыОперации.СуммаОперации);
					
			Иначе
				ДокументОплаты = Неопределено;
			КонецЕсли;
			
			Обработан   = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Обработан   = Ложь;
			
			ОтменитьТранзакцию();

			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(НСтр("ru='ИнтеграцияСПлатежнымиСистемамиУНФ.ПриЗагрузкеСтатусаОперации'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ИнтеграцияСПлатежнымиСистемамиУНФ,
				,
				ТекстОшибки);
						
		КонецПопытки;
		
		// попытка проведения документа и пробития фискального чека
		Попытка
			
			Если ДокументОплаты <> Неопределено Тогда
			
				ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение);
				
				ЕстьАвтоФискализация = ПодключаемоеОборудованиеУНФ.ЕстьККТСАвтоматическойФискализацией();
	
				Если ЕстьАвтоФискализация Тогда
					ПодключаемоеОборудованиеУНФ.ДобавитьВОчередьФискализации(ДокументОплаты.Ссылка);
				КонецЕсли; 
				
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(НСтр("ru='ИнтеграцияСПлатежнымиСистемамиУНФ.ПриЗагрузкеСтатусаОперации'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ИнтеграцияСПлатежнымиСистемамиУНФ,
				,
				ТекстОшибки);
				
		КонецПопытки;	
		
	ИначеЕсли РезультатОбработки.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка() Тогда
		
		Обработан   = Истина;
		ТекстОшибки = РезультатОбработки.СообщениеОбОшибке;
			
		ЗаписьЖурналаРегистрации(НСтр("ru='ИнтеграцияСПлатежнымиСистемамиУНФ.ПриЗагрузкеСтатусаОперации'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ИнтеграцияСПлатежнымиСистемамиУНФ,
			,
			ТекстОшибки);
		
		
	ИначеЕсли РезультатОбработки.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена() Тогда
		
		Обработан   = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru='Операция СБП по документу %1 была отменена.'"), ДокументОперации);
			
		ЗаписьЖурналаРегистрации(НСтр("ru='ИнтеграцияСПлатежнымиСистемамиУНФ.ПриЗагрузкеСтатусаОперации'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ИнтеграцияСПлатежнымиСистемамиУНФ,
			,
			ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РМК

// Процедура заполняет доступные права для текущего пользователя.
// Параметры:
//  Форма - форма нового РМК
//
Процедура ЗаполнитьТаблицуРолейПользователя(Форма) Экспорт
	
	ТекущийПользователь 									 = Форма.Объект.ПользовательБД;
	РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы = Пользователи.РолиДоступны(
																"РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы", 
																Форма.Объект.ПользовательБД);
			
	Если РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы Тогда
		Форма.СписокРолейПользователя.Добавить("РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы");
	КонецЕсли;
			
КонецПроцедуры

// Определяет доступность операций для торговой точки. В сценариях оплаты
// различных платежных систем существуют отличия, поэтому ряд операций могут
// быть запрещены для выполнения. Метод следует использовать для настройки
// элементов форм оплаты и возвратов и получение общих настроек интеграции.
//
// Параметры:
//  НастройкиИнтеграции - Структура - информация о доступных операциях:
//    *ОтменаЗаказа - Булево - признак доступности отмены не оплаченного
//                    заказа в платежной системе. 
//    *ОтменаОплаты - Булево - признак доступности отмены оплаченного
//                    заказа (отмена транзакции) в платежной системе. 
//    *СрокЖизниQRКода - Булево - признак доступности установки максимального
//                       срока действия QR-кода;
//    *ПлатежнаяСсылка - Булево - признак доступности использования платежной ссылки
//                       для выполнения оплаты;
//    *ВыборПлатежнойСистемыВозврата - Булево - признак доступности возврата оплаты
//                                     в платежную систему отличную от исходной. 
//    *Идентификатор - Строка - строковый идентификатор платежной системы или участника СБП;
//    *СинонимСистемы - Строка - синоним платежной системы для печати.
//    
//  Интеграция - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка выполнения операции платежной системы.
//
// Возвращаемое значение:
//  Структура - информация о доступных операциях:
//    *ОтменаЗаказа - Булево - признак доступности отмены не оплаченного
//                    заказа в платежной системе. 
//    *ОтменаОплаты - Булево - признак доступности отмены оплаченного
//                    заказа (отмена транзакции) в платежной системе. 
//    *СрокЖизниQRКода - Булево - признак доступности установки максимального
//                       срока действия QR-кода;
//    *ПлатежнаяСсылка - Булево - признак доступности использования платежной ссылки
//                       для выполнения оплаты;
//    *ВыборПлатежнойСистемыВозврата - Булево - признак доступности возврата оплаты
//                                     в платежную систему отличную от исходной. 
//    *Идентификатор - Строка - строковый идентификатор платежной системы или участника СБП;
//    *СинонимСистемы - Строка - синоним платежной системы для печати.
//
Процедура ЗаполнитьНастройкиТорговойТочки(НастройкиИнтеграции, Интеграция) Экспорт

	Если ТипЗнч(Интеграция) = Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда
		
		ЗаполнитьЗначенияСвойств(
			НастройкиИнтеграции,
			НастройкиТорговойТочки(Интеграция));

		Если НастройкиИнтеграции.ВыборПлатежнойСистемыВозврата Тогда
			НастройкиИнтеграции.Вставить("ПлатежныеСистемыВозврата", ПереводыСБПc2b.УчастникиСБПДляВозврата());
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Формирование изображения идентификатора оплаты (QR-кода).
//
// Параметры: 
//  ТорговаяТочка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой;
//  QRКод - Строка - идентификатор оплаты;
//  УникальныйИдентификатор - УникальныйИдентификатор - идентификатор для установки поля данные qr-кода;
//  Размер - Число - размер QR-кода в пикселях;
//
// Возвращаемое значение:
//  Структура - информация о QR-коде:
//    *ИдентификаторQRКода - Строка - строковый идентификатор QRКода;
//    *КартинкаQRКода - Base64 - картинка QR-кода
//    *ДанныеQRКода - Строка - адрес хранилища данных QR-кода.
//
Функция СформироватьДанныеQRКода(ТорговаяТочка, QRКод, УникальныйИдентификатор, Размер = 280) Экспорт 
	
	ДвоичныеДанныеQRКода	= СистемаБыстрыхПлатежей.ИзображениеQRКодаСБП(QRКод, Размер);
	
	СтруктураКода = Новый Структура;
	СтруктураКода.Вставить("ИдентификаторQRКода", 	QRКод);
	СтруктураКода.Вставить("КартинкаQRКода",		Base64Строка(ДвоичныеДанныеQRКода));
	СтруктураКода.Вставить("ДанныеQRКода",			ПоместитьВоВременноеХранилище(ДвоичныеДанныеQRКода, УникальныйИдентификатор));
	
	Возврат СтруктураКода;

КонецФункции

// Формирование строку, в которое добавляются все необходимые идентификаторы
// платежных систем для выполнения возврата оплаты.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой;
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                   оплату в информационной базе.
//
// Возвращаемое значение: 
//  Строка - набор идентификаторов операции оплаты, которые должны быть переданы при возврате.
//
Функция ИдентификаторыОперацииОплаты(ТорговаяТочка, ДокументОплаты) Экспорт
	
	ИдентификаторОплаты = "";
	
	Попытка
		
		Если ЗначениеЗаполнено(ДокументОплаты) Тогда
			ИдентификаторОплаты = ПереводыСБПc2b.ИдентификаторыОперацииОплаты(ДокументОплаты);
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ИнтеграцияСПлатежнымиСистемамиУНФ.ИдентификаторыОперацииОплаты'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.СоответствиеНастроекИнтеграцииРМК,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
	Возврат ИдентификаторОплаты;
	
КонецФункции

// Формирование QR-кода для оплаты в платежной системе.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения длительной операции;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура ИдентификаторОплатыВПлатежнойСистеме(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Перем Интеграция, КассоваяСсылка;	
	
	ОтсутствуетДоступ = Ложь;
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("QRКод", "");
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");

	ПередВыполнениемОперацииВПлатежнойСистеме(
		ПараметрыПроцедуры.ДокументОплаты);
	
	Если ПараметрыПроцедуры.Свойство("Интеграция", Интеграция)
		И ТипЗнч(Интеграция) = Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда

		Если ПараметрыПроцедуры.Свойство("КассоваяСсылка", КассоваяСсылка)
			И ЗначениеЗаполнено(КассоваяСсылка) Тогда

			ИдентификаторыЗаказа    = Новый Структура("КассоваяСсылка, ИдентификаторОплаты");
			ЗаполнитьЗначенияСвойств(ИдентификаторыЗаказа, ПараметрыПроцедуры);
			
			РезультатОперации 		= ПереводыСБПc2b.АктивироватьКассовуюСсылку(
				ПараметрыПроцедуры.ДокументОплаты,
				ПараметрыПроцедуры,
				ПараметрыПроцедуры.Интеграция,
				ПараметрыПроцедуры);

			РезультатОперации.Вставить("QRКод", 		 КассоваяСсылка);      
			РезультатОперации.Вставить("КассоваяСсылка", ИдентификаторыЗаказа);      
			РезультатОперации.Вставить("ОтменаЗаказа",   ИдентификаторыЗаказа);      
				
		Иначе
			
			РезультатОперации = ПереводыСБПc2b.ДинамическаяСсылка(
				ПараметрыПроцедуры.ДокументОплаты,
				ПараметрыПроцедуры.Интеграция,
				ПараметрыПроцедуры);

			РезультатОперации.Вставить("QRКод", РезультатОперации.ПлатежнаяСсылка);
				
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("ДокументОплаты", ПараметрыПроцедуры.ДокументОплаты);      
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Определяет статус оплаты в платежной системе.
//
// Параметры:
//	ПараметрыПроцедуры - Структура - параметры документа для получения статуса оплаты
//  	* ДокументОплаты - ОпределяемыйТип.ДокументОплатыБИП - документ, который отражает
//                    продажу в информационной базе;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура СтатусОплатыВПлатежнойСистеме(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(
		ПараметрыПроцедуры.ДокументОплаты);
	
 	РезультатОперации =  ПереводыСБПc2b.СтатусОплаты(ПараметрыПроцедуры.ДокументОплаты, ПараметрыПроцедуры.Интеграция);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("СуммаОперации", РезультатОперации.ПараметрыОперации.СуммаОперации);
	КонецЕсли;		
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Формирование возврата оплаты в платежной системе.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения длительной операции;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура ВозвратОплаты(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(
		ПараметрыПроцедуры.ДокументВозврата);
	
	ДокументОплаты	  = ?(ЗначениеЗаполнено(ПараметрыПроцедуры.ИдентификаторОплаты),
			ПараметрыПроцедуры.ИдентификаторОплаты,
			ПараметрыПроцедуры.ДокументОплаты);
	
	РезультатОперации = ПереводыСБПc2b.ВозвратОплаты(
		ПараметрыПроцедуры.ДокументВозврата,
		ДокументОплаты,
		ПараметрыПроцедуры.Интеграция,
		ПараметрыПроцедуры.ПлатежнаяСистема,
		ПараметрыПроцедуры);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("ДокументВозврата", ПараметрыПроцедуры.ДокументВозврата);
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Производит получение статуса возврата по документу.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения длительной операции;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура СтатусВозвратОплаты(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(
		ПараметрыПроцедуры.ДокументВозврата);
	
	РезультатОперации = ПереводыСБПc2b.СтатусВозврата(ПараметрыПроцедуры.ДокументВозврата, ПараметрыПроцедуры.Интеграция);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("СуммаОперации", РезультатОперации.ПараметрыОперации.СуммаОперации);
	КонецЕсли;		
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Отменяет заказ на оплату, если оплата не была ранее подтверждена продавцом.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП, структура - документ, который отражает
//    оплату в информационной базе;
//  ТорговаяТочка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Структура - результат отмены заказа на оплату в платежной системе:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - отмена заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный заказа на оплату
//          или настройка интеграции с платежными системами;
//        - "ОтменаНеДоступна" - отмена оплаты невозможна, необходимо выполнить возврат;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//        подключения к платежной системе;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису
//        интеграции с платежными системами;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование интеграции отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОтменитьЗаказНаОплату(ДокументОплаты, ТорговаяТочка) Экспорт
	
	Если ТипЗнч(ТорговаяТочка) = Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда
		
		РезультатОперации = ПереводыСБПc2b.ДеактивироватьКассовуюСсылку(ДокументОплаты, ТорговаяТочка);
		
	КонецЕсли;

	Возврат РезультатОперации;
	
КонецФункции

// Отменяет все выполняемые действия с операций платежной системой на форме
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОплатыБИП - документ, который отражает
//                    продажу в информационной базе;
//  Интеграция - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой;
//  НастройкиИнтеграции - Структура - информация о доступных операциях:
//  ИдентификаторЗаданияФормированияQRКода - УникальныйИдентификатор - идентификатор 
//  																   длительной операции по формированию qr-кода
//  ИдентификаторЗаданияПроверкиСтатуса - УникальныйИдентификатор    - идентификатор 
//  															       длительной операции по проверки статуса оплаты
//  ИдентификаторЗаданияВозврата - УникальныйИдентификатор           - идентификатор 
//  														           длительной операции по проверке статуса возврата
//
// Возвращаемое значение:
//  Структура - см. ПереводыСБПc2b.ДеактивироватьКассовуюСсылку.
//
Функция ОтменитьОперацию(ДокументОплаты, 
							Интеграция, 
							НастройкиИнтеграции,
							ИдентификаторЗаданияФормированияQRКода = Неопределено, 
							ИдентификаторЗаданияПроверкиСтатуса = Неопределено, 
							ИдентификаторЗаданияВозврата = Неопределено) Экспорт
	
	// Перед отменой нужно определить статус оплаты.
	РезультатОперации = ПереводыСБПc2b.СтатусОплаты(ДокументОплаты, Интеграция, Ложь);
	
	// В зависимости от статуса оплаты выполняется соответствующая операция.
	Если РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		Если НастройкиИнтеграции.ОтменаЗаказа Тогда
		
			Результат = ОтменитьЗаказНаОплату(НастройкиИнтеграции.ОтменаЗаказаДанные, Интеграция);
				
		Иначе
			ПереводыСБПc2b.УдалитьИдентификаторыОперации(ДокументОплаты);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Отменяет все выполняемые действия с операций платежной системой на форме
//
// Параметры:
//  ПараметрыОтмены - Структура - параметры выполнения длительной операции;
//  	*ДокументОплаты - ОпределяемыйТип.ДокументОплатыБИП - документ, который отражает
//                    продажу в информационной базе;
//  	*Интеграция - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка интеграции с платежной системой;
//  	*НастройкиТорговойТочки - Структура - информация о доступных операциях:
//    
//  	*ИдентификаторЗаданияФормированияQRКода - УникальныйИдентификатор - идентификатор 
//  																   длительной операции по формированию qr-кода
//  	*ИдентификаторЗаданияПроверкиСтатуса - УникальныйИдентификатор    - идентификатор 
//  															       длительной операции по проверки статуса оплаты
//  	*ИдентификаторЗаданияВозврата - УникальныйИдентификатор           - идентификатор 
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура ОтменитьОперациюВФоне(ПараметрыОтмены, АдресРезультата) Экспорт
	
	РезультатОперации = ОтменитьОперацию(
		ПараметрыОтмены.ДокументОплаты,
		ПараметрыОтмены.Интеграция, 
		ПараметрыОтмены.НастройкиИнтеграции); 

	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Подтверждает возврат в платежной системе.
//
// Параметры:
//  ДокументВозврата - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                   оплату в информационной базе;
//  Интеграция - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка выполнения операции платежной системы.
//
// Возвращаемое значение:
//  Структура - см. ПереводыСБПc2b.ПодтвердитьВозврат.
//
Функция ПодтвердитьВозврат(ДокументВозврата, Интеграция) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(
		ДокументВозврата);
	
	Возврат ПереводыСБПc2b.ПодтвердитьВозврат(ДокументВозврата, Интеграция);
	
КонецФункции

// Возвращает структуру пустой ссылки на документ оплаты
//
// Параметры:
//  СсылкаНаВозврат - булево - признак, что нужно вернуть ссылку на документ возврата
//
// Возвращаемое значение:
//  Структура - информация о QR-коде:
//    *ЧекККМВОбработке - ДокументСсылка - пустая ссылка на документ чекККМ.
//    *НовыйЧек - Булево - признак, что это новая ссылка
//
Функция ПолучитьСсылкуНовогоЧекаККМ(СсылкаНаВозврат = Ложь) Экспорт
	
	НовыйУникальныйИдентификаторДокументаЧек = Новый УникальныйИдентификатор();
	
	Если СсылкаНаВозврат Тогда
		ЧекСсылка = Документы.ЧекККМВозврат.ПолучитьСсылку(НовыйУникальныйИдентификаторДокументаЧек);
	Иначе
		ЧекСсылка = Документы.ЧекККМ.ПолучитьСсылку(НовыйУникальныйИдентификаторДокументаЧек);
	КонецЕсли;
	
	СтруктураДанныхДокумента = Новый Структура();
	СтруктураДанныхДокумента.Вставить("ЧекККМВОбработке", ЧекСсылка);
	СтруктураДанныхДокумента.Вставить("НовыйЧек", 		  Истина);
	
	Возврат СтруктураДанныхДокумента;
	
КонецФункции

// Получает идентификатор оплаты из данных чека ккм
//
// Параметры:
//  ЧекККМ - пустая ссылка на документ чекККМ.
//  
// Возвращаемое значение:
//  СсылочныйНомер - строка - идентификатор оплаты СБП
//
Функция ПолучитьСсылочныйНомерЧека(ЧекККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.СсылочныйНомер КАК СсылочныйНомер
	|ИЗ
	|	Документ.ЧекККМ.БезналичнаяОплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМ
	|	И ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП)";
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылочныйНомер = Выборка.СсылочныйНомер;
	Иначе
		СсылочныйНомер = "";
	КонецЕсли;
	
	Возврат СсылочныйНомер;
	
КонецФункции

// Возвращает структуру чека оплаты для автоматического выполнения возврата
//
// Параметры:
//  ДокументОплаты - пустая ссылка на документ чекККМ.
//  
// Возвращаемое значение:
//  Структура - информация о QR-коде:
//    *ИдентификаторОплаты - строка - идентификатор оплаты
//    *ВидОплатыВозврата - ОпределяемыйТип.ВидОплатыРМК - на вид оплаты возврата
//    *Организация - ОпределяемыйТип.ОрганизацияРМК - организация возврата
//    *ИдентификаторПС - строка - идентификатор платежной системы
//
Функция ПолучитьПараметрыДокументаОплаты(ДокументОплаты) Экспорт
	
	#Область ТекстЗапросаКБазеДанных
	Если ТипЗнч(ДокументОплаты) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.ВидОплаты КАК ВидОплаты,
		|	Т.СсылочныйНомер КАК СсылочныйНомер,
		|	Т.Ссылка.Организация КАК Организация,
		|	Т.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|	Т.Ссылка КАК ОснованиеПродажи,
		|	999 КАК Порядок,
		|	Т.Сумма КАК СуммаПлатежа
		|ИЗ
		|	Документ.ЧекККМ.БезналичнаяОплата КАК Т
		|ГДЕ
		|	Т.Ссылка = &ДокументОплаты
		|	И Т.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.ВидОплаты,
		|	Т.СсылочныйНомер,
		|	Т.Ссылка.Организация,
		|	Т.ИдентификаторПлатежнойСистемы,
		|	Т.Ссылка,
		|	ЧекККМПредоплата.НомерСтроки КАК Порядок,
		|	ЧекККМПредоплата.СуммаПлатежа
		|ИЗ
		|	Документ.ЧекККМ.БезналичнаяОплата КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Предоплата КАК ЧекККМПредоплата
		|		ПО Т.Ссылка = ЧекККМПредоплата.Документ
		|ГДЕ
		|	ЧекККМПредоплата.Ссылка = &ДокументОплаты
		|	И Т.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП) КАК ВидОплаты,
		|	Т.СсылочныйНомер КАК СсылочныйНомер,
		|	Т.Ссылка.Организация КАК Организация,
		|	Т.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,
		|	Т.Ссылка КАК ОснованиеПродажи,
		|	Т.СуммаДокумента КАК СуммаПлатежа
		|ИЗ
		|	Документ.ОперацияПоПлатежнымКартам КАК Т
		|ГДЕ
		|	Т.ДокументОснование = &ДокументОплаты
		|	И Т.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыЭквайринг.ОплатаСБП)";
		
	КонецЕсли;
	#КонецОбласти
	
	ПараметрыВозврата = Новый Структура();
	ПараметрыВозврата.Вставить("ИдентификаторОплаты");
	ПараметрыВозврата.Вставить("ВидОплатыВозврата");
	ПараметрыВозврата.Вставить("Организация");
	ПараметрыВозврата.Вставить("ИдентификаторПС");
	ПараметрыВозврата.Вставить("ОснованиеПродажи");
	ПараметрыВозврата.Вставить("СуммаКВозврату");
	
	Если ЗначениеЗаполнено(ДокументОплаты)
		И ОбщегоНазначения.СсылкаСуществует(ДокументОплаты) Тогда
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДокументОплаты", ДокументОплаты);
			
		Выборка = Запрос.Выполнить().Выбрать();
			
		Если Выборка.Следующий() Тогда
				
			ПараметрыВозврата.ВидОплатыВозврата 	= Выборка.ВидОплаты;
			ПараметрыВозврата.ИдентификаторОплаты	= Выборка.СсылочныйНомер;
			ПараметрыВозврата.Организация			= Выборка.Организация;
			ПараметрыВозврата.ИдентификаторПС		= Выборка.ИдентификаторПлатежнойСистемы;
			ПараметрыВозврата.ОснованиеПродажи 		= Выборка.ОснованиеПродажи;
			ПараметрыВозврата.СуммаКВозврату 		= Выборка.СуммаПлатежа;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыВозврата;
	
КонецФункции

// Определяет является ли выбранный вид оплаты оплатой платежной системой
//
// Параметры:
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты документа
//  
// Возвращаемое значение:
//  булево - признак, что переданный вид оплаты является видом оплаты платежной системы
//
Функция ВидОплатыПлатежнойСистемы(ВидОплаты) Экспорт
	
	ЯвляетсяОплатойПлатежнойСистемой = ВидОплаты = Перечисления.ВидыБезналичныхОплат.СБП;
	
	Возврат ЯвляетсяОплатойПлатежнойСистемой;
	
КонецФункции

// Возвращает текст запроса для получения подключенных настроек интеграция в регистре "Соответствие настроек интеграции"
//
// Параметры:
//  ИдентификаторПлатежнойСистемы - строка - отбор по идентификатору платежной системы
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаНастройкиИнтеграции(ИдентификаторПлатежнойСистемы = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СоответствиеНастроекИнтеграции.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.СБП) КАК ВидОплаты,
	|	СоответствиеНастроекИнтеграции.СпособОплаты КАК СпособОплаты,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СоответствиеНастроекИнтеграции.Интеграция.Родитель) КАК Представление,
	|	СоответствиеНастроекИнтеграции.Интеграция КАК Интеграция,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей) КАК ПлатежнаяСистема,
	|	СоответствиеНастроекИнтеграции.ИдентификаторПлатежнойСистемы КАК ИдентификаторПС,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссии КАК ПроцентКомиссии,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссииПриВозврате КАК ПроцентКомиссииПриВозврате
	|ИЗ
	|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК СоответствиеНастроекИнтеграции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОплаты.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|		ПО СоответствиеНастроекИнтеграции.СпособОплаты = ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка
	|			И (ЭквайринговыеТерминалыВидыПлатежныхКарт.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО СоответствиеНастроекИнтеграции.ТорговыйОбъект = СтруктурныеЕдиницы.Родитель
	|			И (СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект)
	|ГДЕ
	|	(&ТорговыйОбъект = НЕОПРЕДЕЛЕНО
	|			ИЛИ СоответствиеНастроекИнтеграции.ТорговыйОбъект = &ТорговыйОбъект
	|			ИЛИ СтруктурныеЕдиницы.Ссылка = &ТорговыйОбъект)
	|	И (&Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ СоответствиеНастроекИнтеграции.Организация В (&Организация))
	|	И &ИдентификаторПлатежнойСистемы
	|	И СоответствиеНастроекИнтеграции.СпособОплаты <> &ПустойСпособОплаты
	|	И ЕСТЬNULL(СоответствиеНастроекИнтеграции.Интеграция.Используется, ЛОЖЬ) = ИСТИНА
	|	И СоответствиеНастроекИнтеграции.Интеграция.Используется = ИСТИНА";
	
	Если ИдентификаторПлатежнойСистемы = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&ИдентификаторПлатежнойСистемы", 
			"ИСТИНА");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&ИдентификаторПлатежнойСистемы", 
			"ДоступныеИнтеграции.ВидОплаты = &ИдентификаторПлатежнойСистемы");
		
	КонецЕсли;

    ТипСпособаОплаты 	  		= Метаданные.ОпределяемыеТипы.СпособОплатыПлатежныхСистемРМК.Тип.Типы().Получить(0);
	МетаданныеСпособаОплаты 	= Метаданные.НайтиПоТипу(ТипСпособаОплаты);

	Если МетаданныеСпособаОплаты = Неопределено Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&ПустойСпособОплаты",
			"Неопределено");

	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"&ПустойСпособОплаты",
			"ЗНАЧЕНИЕ(" + МетаданныеСпособаОплаты.ПолноеИмя() + ".ПустаяСсылка)");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет представление интеграции с платежными системами
//
// Параметры:
//  ИдентификаторПС - строка - идентификатор платежной системы БИП
//
// Возвращаемое значение:
//  Представление - строка - представление для пользователя платежной системы
//
Функция ПредставлениеПлатежнойСистемы(ИдентификаторПС) Экспорт   

	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СоответствиеНастроекИнтеграцииРМК.Интеграция.Родитель) КАК Наименование,
	|	1 КАК Порядок
	|ИЗ
	|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК СоответствиеНастроекИнтеграцииРМК
	|ГДЕ
	|	СоответствиеНастроекИнтеграцииРМК.ИдентификаторПлатежнойСистемы = &ИдентификаторПС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиУчастниковСБП.Наименование,
	|	2
	|ИЗ
	|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
	|ГДЕ
	|	НастройкиУчастниковСБП.Идентификатор = &ИдентификаторПС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторПС", ИдентификаторПС);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Наименование;
	КонецЕсли;
	
КонецФункции

// Определяет настройку интеграции с платежными системами на основании
// данных продажи / возврата
//
// Параметры:
//  Организация - СправочникСсылка.Организация - организация из документа продажи;
//  СтруктурнаяЕдиница - СправочникСсылка.СтруктураПредприятия - касса из документа продажи;
//
// Возвращаемое значение:
//  ТаблицаЗначений - настройки интеграции с платежной системой.
//
Функция НастройкиИнтеграции(Организация, СтруктурнаяЕдиница = Неопределено) Экспорт

	Интеграции  = РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.НастройкиИнтеграции(Организация, СтруктурнаяЕдиница);
	
	Возврат Интеграции;
	
КонецФункции

#КонецОбласти

#Область СчетаСБП

// Позволяет расширить состав параметра Настройки процедуры ПриОпределенииНастроек в модулях менеджеров отчетов и 
// обработок, включенных в состав подсистемы ПодключаемыеОтчетыИОбработки, с помощью чего отчеты и обработки могут 
// сообщить о себе, что они предоставляют определенные виды команд и взаимодействуют с подсистемами через их 
// программный интерфейс.
//
// Параметры:
//  НастройкиПрограммногоИнтерфейса - ТаблицаЗначений:
//   * Ключ              - Строка        - имя настройки, например "ДобавитьМотиваторы".
//   * ОписаниеТипов     - ОписаниеТипов - тип настройки, например: Новый ОписаниеТипов("Булево").
//   * ВидыПодключаемыхОбъектов - Строка - имена видов объектов метаданных, для которых будет доступна эта настройка,
//                                             перечисленные через запятую. Например: "Отчет" или "Отчет, Обработка".
//
// Пример:
//  Для того чтобы в ПриОпределенииНастроек модуля обработки предусмотреть собственный признак ДобавитьМотиваторы:
//  Процедура ПриОпределенииНастроек(Настройки) Экспорт
//    Настройки.ДобавитьМотиваторы = Истина;  // вызывается процедура ДобавитьМотиваторы
//    Настройки.Размещение.Добавить(Метаданные.Документы.Анкеты);
//  КонецПроцедуры
//
//  следует реализовать следующий код:
//  Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
//  Настройка.Ключ          = "ДобавитьМотиваторы";
//  Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
//  Настройка.ВидыПодключаемыхОбъектов = "Обработка";
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ = "ДобавитьКомандыПлатежныеСистемы";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Настройка.ВидыПодключаемыхОбъектов = "Отчет, Обработка";
	
КонецПроцедуры

// С помощью ПриОпределенииВидовПодключаемыхКоманд можно определить собственные виды подключаемых команд,
// помимо уже предусмотренных в стандартной поставке (печатные формы, отчеты и команды заполнения).
//
// Параметры:
//   ВидыПодключаемыхКоманд - ТаблицаЗначений - поддерживаемые виды команд:
//       * Имя         - Строка            - имя вида команд. Должно удовлетворять требованиям именования переменных и
//                                           быть уникальным (не совпадать с именами других видов).
//                                           Может соответствовать имени подсистемы, отвечающей за вывод этих команд.
//                                           Следующие имена зарезервированы: "Печать", "Отчеты", "ЗаполнениеОбъектов".
//       * ИмяПодменю  - Строка            - имя подменю для размещения команд этого вида на формах объектов.
//       * Заголовок   - Строка            - наименование подменю, выводимое пользователю.
//       * Картинка    - Картинка          - картинка подменю.
//       * Отображение - ОтображениеКнопки - режим отображения подменю.
//       * Порядок     - Число             - порядок подменю в командной панели формы объекта по отношению 
//                                           к другим подменю. Используется при автоматическом создании подменю 
//                                           в форме объекта.
//
// Пример:
//
//	Вид = ВидыПодключаемыхКоманд.Добавить();
//	Вид.Имя         = "Мотиваторы";
//	Вид.ИмяПодменю  = "ПодменюМотиваторов";
//	Вид.Заголовок   = НСтр("ru = 'Мотиваторы'");
//	Вид.Картинка    = БиблиотекаКартинок.Информация;
//	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
//	
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "ПлатежныеСистемы";
	Вид.ИмяПодменю = "ПлатежныеСистемы";
	Вид.Заголовок = НСтр("ru = 'СБП'");
	Вид.Картинка = БиблиотекаКартинок.ЛоготипСБП64;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
	
КонецПроцедуры

// Вызывается однократно при первом формировании списка команд, выводимых в форме конкретного объекта конфигурации.
// Список добавленных команд следует вернуть в параметре Команды.
// Результат кэшируется с помощью модуля с повторными использованием возвращаемых значений (в разрезе имен форм).
//
// Параметры:
//   НастройкиФормы - Структура - сведения о форме, в которой выводятся команды. Для чтения:
//         * ИмяФормы - Строка - полное имя формы, в которой выводятся подключаемые команды. 
//                               Например, "Документ.Анкета.ФормаСписка".
//   
//   Источники - ДеревоЗначений - сведения о поставщиках команд этой формы. 
//         На втором уровне дерева могут располагаться источники, регистрируемые автоматически при регистрации владельца.
//         Например, документы-регистраторы журналов:
//         * Метаданные - ОбъектМетаданных - метаданные объекта.
//         * ПолноеИмя  - Строка           - полное имя объекта. Например: "Документ.ИмяДокумента".
//         * Вид        - Строка           - вид объекта в верхнем регистре. Например: "СПРАВОЧНИК".
//         * Менеджер   - Произвольный     - модуль менеджера объекта, или Неопределено, если у объекта 
//                                           нет модуля менеджера или если его не удалось получить.
//         * Ссылка     - СправочникСсылка.ИдентификаторыОбъектовМетаданных - ссылка объекта метаданных.
//         * ЭтоЖурналДокументов - Булево - Истина если объект является журналом документов.
//         * ТипСсылкиДанных     - Тип
//                               - ОписаниеТипов - тип ссылки элемента.
//   
//   ПодключенныеОтчетыИОбработки - ТаблицаЗначений - отчеты и обработки, предоставляющие свои команды 
//         для объектов Источники:
//         * ПолноеИмя - Строка       - Полное имя объекта метаданных.
//         * Менеджер  - Произвольный - Модуль менеджера объекта метаданных.
//         Состав колонок см. в ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
//   
//   Команды - ТаблицаЗначений - записать в этот параметр сформированные команды для вывода в подменю: 
//       * Вид - Строка - вид команды.
//           Подробнее см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
//       * Идентификатор - Строка - идентификатор команды.
//       
//       1) Настройки внешнего вида.
//       * Представление - Строка   - представление команды в форме.
//       * Важность      - Строка   - суффикс подгруппы в меню, в которой следует вывести эту команду.
//                                    Допустимо использовать: "Важное", "Обычное" и "СмТакже".
//       * Порядок       - Число    - порядок размещения команды в группе. Используется для настройки под конкретное
//                                    рабочее место. Допустимо задавать в диапазоне от 1 до 100. По умолчанию порядок 50.
//       * Картинка      - Картинка - картинка команды. Необязательный.
//       * СочетаниеКлавиш - СочетаниеКлавиш - сочетание клавиш для быстрого вызова команды. Необязательный.
//       * ТолькоВоВсехДействиях - Булево - отображать команду только в меню Еще.
//       * ЗначениеПометки - Строка - путь к реквизиту, где содержится значение пометки команды. Если источником команд является 
//                                    Таблица формы, то возможно использовать параметр %Источник%.
//                                    Например:
//                                    "ЗначениеПометок.%Источник%", где ЗначениеПометок - реквизит формы произвольного типа, 
//                                                                                        в котором содержится структура.
//                                    "Объект.ПометкаУдаления", где Объект - реквизит формы с типом СправочникОбъект.
//     
//       2) Настройки видимости и доступности.
//       * ТипПараметра - ОписаниеТипов - типы объектов, для которых предназначена эта команда.
//       * ВидимостьВФормах    - Строка - имена форм через запятую, в которых должна отображаться команда.
//                                        Используется когда состав команд отличается для различных форм.
//       * Назначение          - Строка - определяет вид форм, для которых предназначена команда. 
//                                        Принимаемые значения:
//                                         "ДляСписка" - показывать команду только в форме списка,
//                                         "ДляОбъекта" - показывать команду только в форме объекта.
//                                        Если параметр не указан, то команда предназначена для любых видов форм.
//       * ФункциональныеОпции - Строка - имена функциональных опций через запятую, определяющих видимость команды.
//       * УсловияВидимости    - Массив - определяет видимость команды в зависимости от контекста.
//                                        Для регистрации условий следует использовать процедуру
//                                        ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды().
//                                        Условия объединяются по "И".
//       * ИзменяетВыбранныеОбъекты - Булево - определяет доступность команды в ситуации,
//                                        когда у пользователя нет прав на изменение объекта.
//                                        Если Истина, то в описанной выше ситуации кнопка будет недоступна.
//                                        Необязательный. Значение по умолчанию: Ложь.
//     
//       3) Настройки процесса выполнения.
//       * МножественныйВыбор - Булево - если Истина, то команда поддерживает множественный выбор.
//             В этом случае в параметре выполнения будет передан список ссылок.
//             Необязательный. Значение по умолчанию - Истина.
//       * РежимЗаписи - Строка - действия, связанные с записью объекта, которые выполняются перед обработчиком команды:
//             "НеЗаписывать"          - объект не записывается, а в параметрах обработчика вместо ссылок передается
//                                          вся форма. В этом режиме рекомендуется работать напрямую с формой,
//                                          которая передается в структуре 2-го параметра обработчика команды.
//             "ЗаписыватьТолькоНовые" - записывать новые объекты.
//             "Записывать"            - записывать новые и модифицированные объекты.
//             "Проводить"             - проводить документы.
//             Перед записью и проведением у пользователя запрашивается подтверждение.
//             Необязательный. Значение по умолчанию: "Записывать".
//       * ТребуетсяРаботаСФайлами - Булево - если Истина, то в веб-клиенте предлагается
//             установить расширение для работы с 1С:Предприятием. Необязательный. Значение по умолчанию - Ложь.
//     
//       4) Настройки обработчика.
//       * Менеджер - Строка - объект, отвечающий за выполнение команды.
//       * ИмяФормы - Строка - имя формы, которую требуется получить для выполнения команды.
//           Если Обработчик не указан, то у формы вызывается метод "Открыть".
//       * ИмяПараметраФормы - Строка - имя параметра формы, в который следует передать ссылку или массив ссылок.
//       * ПараметрыФормы - Неопределено
//                        - Структура - параметры формы, указанной в ИмяФормы. Необязательный.
//       * Обработчик - Строка - описание процедуры, обрабатывающей основное действие команды, в виде:
//           "<ИмяОбщегоМодуля>.<ИмяПроцедуры>", если процедура размещена в общем модуле;
//           либо "<ИмяПроцедуры>" - в следующих случаях:
//             если ИмяФормы заполнено, то в модуле указанной формы ожидается клиентская процедура;
//             если ИмяФормы не заполнено, то в модуле менеджера этого объекта ожидается серверная процедура.
//       * ДополнительныеПараметры - Структура - параметры обработчика, указанного в Обработчик. Необязательный.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Не ИнтеграцияСПлатежнымиСистемамиУНФПовтИсп.ИнтеграцияДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаОснованийПлатежа = ИнтеграцияСПлатежнымиСистемамиУНФПовтИсп.ПолучитьСписокТиповДокументов();

	ТипыОбъектов = Новый Массив;
	Для каждого ПолноеИмя Из ИменаОснованийПлатежа Цикл
		
		Если СтрЗаканчиваетсяНа(ПолноеИмя, ".ЧекККМ")
			ИЛИ СтрЗаканчиваетсяНа(ПолноеИмя, ".ЧекККМВозврат") 
			ИЛИ СтрЗаканчиваетсяНа(ПолноеИмя, ".ОперацияПоПлатежнымКартам")
			ИЛИ Не СтрНачинаетсяС(НастройкиФормы.ИмяФормы, ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;		
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		ТипыОбъектов.Добавить(ТипЗнч(Менеджер.ПустаяСсылка()));
		
	КонецЦикла;

	Если ТипыОбъектов.Количество() Тогда
	
		Команда = Команды.Добавить();
		Команда.Вид 						= "ПлатежныеСистемы";
		Команда.Идентификатор 				= "ПолучитьОплатыСБП";
		Команда.Представление 				= НСтр("ru = 'Загрузить оплаты СБП'");
		Команда.Важность 					= "Обычное";
		Команда.Порядок 					= 50;
		Команда.ОтображениеКнопки 			= ОтображениеКнопки.Картинка;
		Команда.Картинка 					= БиблиотекаКартинок.ЛоготипСБП64;
		Команда.ТипПараметра 				= Новый ОписаниеТипов(ТипыОбъектов);
		Команда.Назначение 					= "ДляСписка";
		Команда.ИзменяетВыбранныеОбъекты 	= Ложь;
		Команда.МножественныйВыбор 			= Истина;
		Команда.Обработчик 					= "ИнтеграцияСПлатежнымиСистемамиУНФКлиент.Подключаемый_ЗагрузитьСтатусыОплаты";

	КонецЕсли;
	
КонецПроцедуры

// Загружает статусы оплаты СБП.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры выполнения длительной операции;
//  АдресРезультата - Строка - адрес результата операции во временном хранилище.
//
Процедура ПолучитьСтатусыОперацияC2B(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПереводыСБПc2b.СтатусыОпераций();
	
КонецПроцедуры

#КонецОбласти

#Область СверкаВзаиморасчетов

// Определят настройки использования подсистемы.
//
// Параметры:
//  Настройки - Структура - настройки выполнения сверки взаиморасчетов:
//    * ИспользоватьДокументСверки - Булево - определяет доступность использования документа "СверкаВзаиморасчетовСБП";
//    * ИспользоватьСписаниеРасходов - Булево - определяет порядок списания комиссии при загрузки сверки оборотов.
//
Процедура ПриНастройкеСверкиВзаиморасчетов(Настройки) Экспорт
	
	Настройки.ИспользоватьДокументСверки = ИнтеграцияДоступна();
	
КонецПроцедуры

// Определяет обороты оплат и возвратов по списку документов для проведения
// сверки взаиморасчетов с платежными системами.
//
// Параметры:
//  ДокументыОплаты - Массив из ОпределяемыйТип.ДокументОперацииСБП - данные документов
//    для которых необходимо проводить сверку;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка интеграции с платежной системой;
//  Обороты - Структура - данные оборотов продаж и оплат:
//    *СуммаОплат - Число - общая сумма оплат по документам в торговой точке;
//    *СуммаВозвратов - Число - общая сумма возвратов по документам в торговой точке.
//
Процедура ПриОпределенииОборотов(ДокументыОплаты, НастройкаПодключения, Обороты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыОплат", ДокументыОплаты);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	СоздатьВТДокументовОплаты(Запрос);
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СУММА(ДокументыОплаты.Сумма) КАК Сумма,
	|	ДокументыОплаты.ВидОперации КАК ВидОперации
	|ИЗ
	|	ВТДокументыОплаты КАК ДокументыОплаты
	|ГДЕ
	|	ДокументыОплаты.Выполнена
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплаты.ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДокументыОплаты";

	ОперацияВозврата = СверкаВзаиморасчетовСБПc2b.ИдентификаторТипаОперацииВозврат();
	ОперацияОплаты	 = СверкаВзаиморасчетовСБПc2b.ИдентификаторТипаОперацииОплата();

	ВыборкаЗапроса 	 = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
	
		Если ВыборкаЗапроса.ВидОперации = ОперацияОплаты Тогда     
			Обороты.СуммаОплат 		= ВыборкаЗапроса.Сумма;      
		ИначеЕсли ВыборкаЗапроса.ВидОперации = ОперацияВозврата Тогда     
			Обороты.СуммаВозвратов 	= ВыборкаЗапроса.Сумма;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Определяет суммы оплат и возвратов по списку документов для проведения
// сверки взаиморасчетов с платежными системами.
//
// Параметры:
//  ДокументыОплат - Массив из ОпределяемыйТип.ДокументОперацииСБП - данные документов
//    для которых необходимо проводить сверку;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка интеграции с платежной системой;
//  ДанныеОпераций - Соответствие - информация об операциях оплат для вывода в отчет:
//    *Ключ - ОпределяемыйТип.ДокументОперацииСБП - документ оплаты или возврата;
//    *Значение - Структура - параметры выполнения сверки взаиморасчетов.
//
Процедура ПриОпределенииДанныхОпераций(ДокументыОплат, НастройкаПодключения, ДанныеОпераций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыОплат", ДокументыОплат);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	СоздатьВТДокументовОплаты(Запрос);
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ДокументыОплаты.Сумма КАК Сумма,
	|	ДокументыОплаты.Ссылка КАК Ссылка,
	|	ДокументыОплаты.ВидОперации КАК ВидОперации,
	|	ДокументыОплаты.Выполнена КАК Выполнена
	|ИЗ
	|	ВТДокументыОплаты КАК ДокументыОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДокументыОплаты";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
	
		Значение = СверкаВзаиморасчетовСБПc2b.НовыйДанныеОперацийОплат( // АПК:216 слово содержит и русские и английские символы
				ВыборкаЗапроса.Сумма,
				ВыборкаЗапроса.ВидОперации,
				ВыборкаЗапроса.Выполнена);
				
		ДанныеОпераций.Вставить(ВыборкаЗапроса.Ссылка, Значение);

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПодготовкиПлатежнойСсылки

// Определяет объекты, которые могут выступать в качестве оснований платежа через СБП.
//
// Параметры:
//  ИменаДокументовОперации - Массив Из Строка - имена объектов метаданных оснований платежа через СБП.
//
Процедура ПриОпределенииОбъектовСКомандамиСБП(ИменаДокументовОперации) Экспорт

	Если Не ИнтеграцияСПлатежнымиСистемамиУНФПовтИсп.ИнтеграцияДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаОснованийПлатежа = ИнтеграцияСПлатежнымиСистемамиУНФПовтИсп.ПолучитьСписокТиповДокументов();
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИменаОснованийПлатежа, "Документ.ЧекККМ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИменаОснованийПлатежа, "Документ.ЧекККМВозврат");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИменаОснованийПлатежа, "Документ.ОперацияПоПлатежнымКартам");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ИменаДокументовОперации, 
		ИменаОснованийПлатежа, 
		Истина);
	
КонецПроцедуры

// Определяет возможность формирования платежной ссылки на основании данных документа операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    операцию в информационной базе.
//  Результат - Структура - результат создания заказа на оплату в платежной системе:
//    * ИнтеграцияДоступна - Булево - признак доступности интеграции с платежной системой по данным документа операции.
//    * СообщениеОбОшибке - Строка - сообщение для пользователя. Отображается в случае, если в параметр
//    ИнтеграцияДоступна установлено значение Ложь.
//
Процедура ПриОпределенииДоступностиИнтеграцииПоДокументуОперации(ДокументОперации, Результат) Экспорт
	
	Перем ТекстОшибки;
	
	НастройкаСБП = НастройкиСБПОснованияПлатежа(ДокументОперации);
	
	Если НастройкаСБП = Неопределено Тогда

		ТекстОшибки = НСтр("ru = 'Вид документа не подходит для оплаты по системе быстрых платежей'");
		
	ИначеЕсли НастройкаСБП.ИтогПоЧеку = 0 Тогда

		ТекстОшибки = НСтр("ru = 'Невозможно сформировать платежную ссылку, поскольку сумма документа равна нулю.'");
		
	ИначеЕсли Не НастройкаСБП.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		
		ТекстОшибки = НСтр("ru = 'Выставление платежных ссылок для юридических лиц не поддерживается.'");
		
	ИначеЕсли НастройкаСБП.Валюта <> Константы.ВалютаУчета.Получить() Тогда

		ТекстОшибки = НСтр("ru = 'Валютные счета не оплачиваются через систему быстрых платежей.'");

	КонецЕсли;

	Результат.ИнтеграцияДоступна = Не ЗначениеЗаполнено(ТекстОшибки);
	Результат.СообщениеОбОшибке  = ТекстОшибки;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииПараметровПодключенияДокументаОперации
Процедура ПриОпределенииПараметровИнтеграцииДокументаОперации(ДокументОперации, ПереченьТорговыхТочек, НастройкиПодключения, ПараметрыВопроса) Экспорт
	
	НастройкаСБП = НастройкиСБПОснованияПлатежа(ДокументОперации);
	
	Если НастройкаСБП <> Неопределено Тогда

		НастройкиИнтеграции = ?(ЗначениеЗаполнено(НастройкаСБП.БИКРасчетногоСчета),
			СистемаБыстрыхПлатежей.ПараметрыПодключенияПоБИК(НастройкаСБП.БИКРасчетногоСчета),
			НастройкиИнтеграции = Новый Структура("ИнтеграцияДоступнаСБПc2b", Ложь));

		Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
			НастроенныеПодключения = НастройкиИнтеграции(НастройкаСБП.Организация, НастройкаСБП.ТорговыйОбъект);
		Иначе
			НастроенныеПодключения = НастройкиИнтеграции(НастройкаСБП.Организация);
		КонецЕсли;

		Если НастроенныеПодключения <> Неопределено Тогда

			Для Каждого Настройка Из НастроенныеПодключения Цикл
				
				Если Не НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b Тогда  
					
					ПереченьТорговыхТочек.Добавить(Настройка.Интеграция);
					
				ИначеЕсли НастройкиИнтеграции.ПараметрыУчастникаСБП.НастройкаПодключения.Найти(
						Настройка.Интеграция) <> Неопределено Тогда
					
					ПереченьТорговыхТочек.Очистить(); 
					ПереченьТорговыхТочек.Добавить(Настройка.Интеграция);

					Прервать; // если есть нужная настройка, другие не нужно предлагать
					
				ИначеЕсли Настройка.ПлатежнаяСистема = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей 
					И НастройкиТорговойТочки(Настройка.Интеграция).ПлатежныйАгрегатор Тогда
					
					ПереченьТорговыхТочек.Добавить(Настройка.Интеграция);
					
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;

		Если ПереченьТорговыхТочек.Количество() = 0 Тогда
				
			НастройкиПодключения.ДополнительныеПараметры = Новый Структура;
			НастройкиПодключения.ДополнительныеПараметры.Вставить("Организация", 	НастройкаСБП.Организация);
			НастройкиПодключения.ДополнительныеПараметры.Вставить("ТорговыйОбъект", НастройкаСБП.ТорговыйОбъект);
				
			Если НастройкиИнтеграции.ИнтеграцияДоступнаСБПc2b Тогда
				НастройкиПодключения.БИК 			 = НастройкаСБП.БИКРасчетногоСчета;
			Иначе
				НастройкиПодключения.ОтборУчастников = "ПлатежныеАгрегаторы";
			КонецЕсли;
				
			Если НастроенныеПодключения <> Неопределено Тогда
				
				ТекстВопроса = НСтр("ru = 'Обнаружены настройки подключения, но они не подходят для банковского счета документа. Продолжить?'");

				Для Каждого Настройка Из НастроенныеПодключения Цикл
					
					Если Настройка.ПлатежнаяСистема = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей Тогда
						ПереченьТорговыхТочек.Добавить(Настройка.Интеграция);
					КонецЕсли;					
					
				КонецЦикла;

			КонецЕсли;
				
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриСозданииНаСервереФормыQRКода.
Процедура ПриСозданииНаСервереФормыQRКода(Форма, НастройкиФормы) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("ИспользоватьПодключаемоеОборудование", Новый ОписаниеТипов("Булево"))); 
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("ПоддерживаемыеТипыПодключаемогоОборудования", Новый ОписаниеТипов("Строка"))); 
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	Форма.ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	КомандаВывестиНаДисплей = Форма.Команды.Добавить("ПечатьПречека");
	КомандаВывестиНаДисплей.Заголовок = НСтр("ru = 'Печать пречека'");
	КомандаВывестиНаДисплей.Действие = "ПриОбработкеНажатияКоманды";
	
	КнопкаВывестиНаДисплей = Форма.Элементы.Добавить("КнопкаПечатьПречека", Тип("КнопкаФормы"), НастройкиФормы.Группа);
	КнопкаВывестиНаДисплей.Заголовок = НСтр("ru = 'Печать пречека'");
	КнопкаВывестиНаДисплей.ИмяКоманды = "ПечатьПречека";
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам.
//
Процедура ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(Шаблоны) Экспорт
	
	// подготовка макета шаблона
	ШаблонСБП			  = ШаблонСообщенияОплатаСБП();
	Наименование		  = НСтр("ru = 'Счет на оплату через СБП (%1)'");
	ИменаОснованийПлатежа = ИнтеграцияСПлатежнымиСистемамиУНФПовтИсп.ПолучитьСписокТиповДокументов();

	Для каждого ПолноеИмя Из ИменаОснованийПлатежа Цикл
		
		Если СтрЗаканчиваетсяНа(ПолноеИмя, ".ЧекККМ")
			ИЛИ СтрЗаканчиваетсяНа(ПолноеИмя, ".ЧекККМВозврат") 
			ИЛИ СтрЗаканчиваетсяНа(ПолноеИмя, ".ОперацияПоПлатежнымКартам") Тогда
			Продолжить;
		КонецЕсли;

		МетаданныеОбъекта   = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		ИмяОбъекта 			= МетаданныеОбъекта.Имя;
		Представление   	= МетаданныеОбъекта.Синоним;

		ТелоШаблона			= ШаблонСБП.Тело;
		ТемаШаблона			= ШаблонСБП.Тема;
		
		Для Каждого ПараметрШаблона Из ШаблонСБП.ЗначенияРеквизитов Цикл
		
        	ТелоШаблона = СтрЗаменить(ТелоШаблона, 
				"[ТипОснования." + ПараметрШаблона.Ключ + "]", 
				"[" + ИмяОбъекта + "." + ПараметрШаблона.Значение + "]");
			
        	ТемаШаблона = СтрЗаменить(ТемаШаблона, 
				"[ТипОснования." + ПараметрШаблона.Ключ + "]", 
				"[" + ИмяОбъекта + "." + ПараметрШаблона.Значение + "]");
		
		КонецЦикла;

		Если ИмяОбъекта = "АктВыполненныхРабот" Тогда //Для акта недоступно поле "Покупатель"
			ТелоШаблона = СтрЗаменить(ТелоШаблона, ИмяОбъекта + ".Покупатель", ИмяОбъекта + ".Контрагент"); 
		КонецЕсли; 
		
		Шаблон 			= Новый Структура();
		Шаблон.Вставить("ТипШаблона", 				"Письмо");
		Шаблон.Вставить("ПолноеИмяТипаНазначения", 	ПолноеИмя);
		Шаблон.Вставить("Наименование", 			СтрШаблон(Наименование, Представление));
		Шаблон.Вставить("Тема", 					ТемаШаблона);
		Шаблон.Вставить("Текст", 					ТелоШаблона);

		Шаблоны.Добавить(Шаблон);
		
	КонецЦикла;	
	
КонецПроцедуры

// Определяет шаблон письма отправки оплаты по СБП.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ДокументОперацииСБП, Неопределено - документ, который отражает
//    операцию в информационной базе.
//  ПлатежнаяСсылка - строка - идентификатор оплаты СБП
//    
// Возвращаемое значение:
//
//  Шаблон - Структура - результат создания заказа на оплату в платежной системе:
//    * Тема - Строка - шаблон темы сообщения.
//    * Тело - Строка - шаблон теля сообщения.
//    * ЗначенияРеквизитов - структура - значения реквизитов для замены параметров
//    ИнтеграцияДоступна установлено значение Ложь.
//
Функция ШаблонСообщенияОплатаСБП(Предмет = Неопределено, ПлатежнаяСсылка = "") Экспорт

	Шаблон				  = Новый Структура("Тело, Тема, ЗначенияРеквизитов");
	
	МакетШаблона 		  = ПолучитьОбщийМакет("ШаблонСообщенияОплатаСБП");
	Тело 		 		  = МакетШаблона.ПолучитьТекст();
	Тема	 	 		  = НСтр("ru = 'Счет на оплату номер [ТипОснования.Номер] на сумму [ТипОснования.СуммаДокумента] руб.'");

	Тело 		 		  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Тело,
		НСтр("ru='Благодарим за заказ и просим оплатить счет'"),
		НСтр("ru='Номер заказа:'"),
		НСтр("ru='Идентификатор плательщика:'"),
		НСтр("ru='Сумма:'"),
		НСтр("ru='Для оплаты счета перейдите по ссылке'"));
		
	Если ЗначениеЗаполнено(Предмет) Тогда
			
		РеквизитыШаблона 	  = Новый Структура;
		РеквизитыШаблона.Вставить("Номер", 					"Номер");
		РеквизитыШаблона.Вставить("СуммаДокумента", 		"СуммаДокумента");
		РеквизитыШаблона.Вставить("Покупатель", 			"Контрагент");          

		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, РеквизитыШаблона);

		КнопкаОплатитьЧерезСБП 	= "Оплатить счет: <a href=""%1"">%1</a>";
        Номер					= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ЗначенияРеквизитов.Номер, Истина, Истина);
		
		ЗначенияРеквизитов.Вставить("КнопкаОплатитьЧерезСБП", СтрШаблон(КнопкаОплатитьЧерезСБП, ПлатежнаяСсылка));          
		ЗначенияРеквизитов.Вставить("Номер", 				  Номер);
		
		Для Каждого ЗначениеРеквизита Из ЗначенияРеквизитов Цикл

			ЗначениеПараметра = Строка(ЗначениеРеквизита.Значение);
			
        	Тело = СтрЗаменить(Тело, "[ТипОснования." + ЗначениеРеквизита.Ключ + "]", ЗначениеПараметра);
        	Тема = СтрЗаменить(Тема, "[ТипОснования." + ЗначениеРеквизита.Ключ + "]", ЗначениеПараметра);
		
		КонецЦикла;

	Иначе
		
		ЗначенияРеквизитов 	  = Новый Структура;
		ЗначенияРеквизитов.Вставить("Номер", 					"Номер");
		ЗначенияРеквизитов.Вставить("СуммаДокумента", 			"СуммаДокумента");
		ЗначенияРеквизитов.Вставить("Покупатель", 				"Покупатель");          
		ЗначенияРеквизитов.Вставить("КнопкаОплатитьЧерезСБП", 	"ПредставлениеСсылкиСБП");          
		
	КонецЕсли;

	Шаблон.Тело				  = Тело;
	Шаблон.Тема				  = Тема;
	Шаблон.ЗначенияРеквизитов = ЗначенияРеквизитов;
	
    Возврат Шаблон;
	
КонецФункции

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийCБП.
//
Процедура ПриОпределенииПараметровОтправкиСообщенийCБП(ПараметрыОтправкиСообщений) Экспорт
	
	ПараметрыОтправкиСообщений.ПараметрыОтправкиПисем.ОтправлятьПисьмаВФорматеHTML = Истина;
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриПроверкеИспользованияШаблоновСообщенийСБП
//
Процедура ПриПроверкеИспользованияШаблоновСообщенийСБП(Используется) Экспорт
	
	Используется = ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений");
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриФормированииСпискаПолучателейСообщения
Процедура ПриФормированииСпискаПолучателейСообщенияСБП(Знач ОснованиеПлатежа, Знач ВариантОтправки, Получатели) Экспорт
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "Контрагент");
	Телефон = ПечатьДокументовУНФ.КонтактнаяИнформация(Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	АдресЭП = ПечатьДокументовУНФ.КонтактнаяИнформация(Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		
		// Для корректной обработки контактной информации в форме отправки письма, 
		// необходимо подменить список значений Получатели на массив структур
		СписокПолучателей = Новый Массив; 
		
		СтруктураПолучателя = Новый Структура;
		СтруктураПолучателя.Вставить("Адрес", АдресЭП);
		СтруктураПолучателя.Вставить("Представление", Контрагент.НаименованиеПолное);
		СтруктураПолучателя.Вставить("ИсточникКонтактнойИнформации", Контрагент);
		СписокПолучателей.Добавить(СтруктураПолучателя);
		
		Получатели = СписокПолучателей;
		
	ИначеЕсли ВариантОтправки = "Телефон" Тогда
		Получатели.Добавить(Телефон);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Функция возвращает ссылку на эквайринговый терминал для Яндекс.Кассы
// Если эквайринговый терминал не найден, создается новый и возвращается его ссылка
//
// Параметры:
//  Организация - СправочникСсылка.Организации - владелец терминала;
//  КассаККМ - Справочник.КассыККМ, Справочник.Кассы - касса терминала;
// Возвращаемое значение:
//  ЭквайринговыйТерминал  - Справочник.ЭквайринговыеТерминалы - созданный терминал
//
Функция НайтиИлиСоздатьЭквайринговыйТерминалСБП(Организация, КассаККМ = Неопределено) Экспорт

	#Область ТекстЗапроса
	ТекстЗапросаПоискТерминала = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал
	|ИЗ
	|	Справочник.СпособыОплаты.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОплаты КАК ЭквайринговыеТерминалы
	|		ПО ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка = ЭквайринговыеТерминалы.Ссылка
	|ГДЕ
	|	ЭквайринговыеТерминалы.Организация = &Организация
	|	И ЭквайринговыеТерминалы.Касса = &КассаККМ
	|	И ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты = &ВидПлатежнойКарты";

	#КонецОбласти

	Касса = ?(ЗначениеЗаполнено(КассаККМ), КассаККМ, Организация.КассаПоУмолчанию);
	
	Запрос = Новый Запрос(ТекстЗапросаПоискТерминала);
	
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("КассаККМ", 			Касса);
	Запрос.УстановитьПараметр("ВидПлатежнойКарты", 	ИнтеграцияСПлатежнымиСистемамиУНФКлиентСервер.ВидПлатежнойКартыСБП());
	
	ВыборкаТерминалы = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаТерминалы.Следующий() Тогда
		Возврат ВыборкаТерминалы.ЭквайринговыйТерминал;
	КонецЕсли;
	
	// создание эквайера
	СлужебноеИмяЭквайера    = НСтр("ru = 'Банк сервиса быстрых платежей'");
	Эквайрер 				= Справочники.Контрагенты.НайтиПоНаименованию(СлужебноеИмяЭквайера);

	Если НЕ ЗначениеЗаполнено(Эквайрер) Тогда

		ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			Пользователи.ТекущийПользователь(),
			"ОсновнойОтветственный");
			
		ОбЭквайрер = Справочники.Контрагенты.СоздатьЭлемент();
		ОбЭквайрер.Наименование 					= СлужебноеИмяЭквайера;
		ОбЭквайрер.НаименованиеПолное 				= СлужебноеИмяЭквайера;
		ОбЭквайрер.ВидКонтрагента 					= Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		ОбЭквайрер.ПрочиеОтношения 					= Истина;
			
		ОбЭквайрер.ВестиРасчетыПоДоговорам 			= Истина;
		ОбЭквайрер.ВестиРасчетыПоДокументам 		= Истина;
		ОбЭквайрер.ВестиРасчетыПоЗаказам 			= Истина;
		ОбЭквайрер.ВестиУчетОплатыПоСчетам 			= Истина;
			
		ОбЭквайрер.СчетУчетаРасчетовСПокупателем 	= ПланыСчетов.Управленческий.РасчетыСПокупателями;
		ОбЭквайрер.СчетУчетаАвансовПокупателя 		= ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		ОбЭквайрер.СчетУчетаРасчетовСПоставщиком 	= ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		ОбЭквайрер.СчетУчетаАвансовПоставщику 		= ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
			
		ОбЭквайрер.Ответственный 					= ОсновнойОтветственный;
		ОбЭквайрер.СтранаРегистрации 				= Справочники.СтраныМира.Россия;
			
		ОбЭквайрер.Записать();
		Эквайрер = ОбЭквайрер.Ссылка;
			
		СписокВидовДоговора = Новый СписокЗначений;
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоКонтрагентуПоОрганизации(
			Эквайрер, 
			Организация, 
			СписокВидовДоговора);
			
		Если ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
			
			ЭтоДоговорЭквайринга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорПоУмолчанию, "ЭтоДоговорЭквайринга");
			
			Если Не ЭтоДоговорЭквайринга Тогда
				
				ПространствоБлокировки = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДоговорПоУмолчанию);
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДоговорПоУмолчанию);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();

				ДоговорОбъект = ДоговорПоУмолчанию.ПолучитьОбъект();
				ДоговорОбъект.ЭтоДоговорЭквайринга = Истина;
                ДоговорОбъект.КонтрольВзаиморасчетовЭквайринг = Истина;
				
				ДоговорОбъект.Записать();
				
			КонецЕсли;
			
			Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(ДоговорПоУмолчанию);
			
		КонецЕсли;
		
		ОбЭквайрер.Записать();
		
	КонецЕсли;
	
	НовыйТерминал = Справочники.СпособыОплаты.СоздатьЭлемент();
	НовыйТерминал.Наименование 				= ИнтеграцияСПлатежнымиСистемамиУНФКлиентСервер.ВидПлатежнойКартыСБП();
	НовыйТерминал.Тип 						= Перечисления.ТипыСпособовОплат.СБП;
	НовыйТерминал.Организация  				= Организация;
	НовыйТерминал.СчетУчета 				= ПланыСчетов.Управленческий.ПереводыВПути;
	НовыйТерминал.СчетЗатрат 				= ПланыСчетов.Управленческий.ПрочиеРасходы;
		
	НовыйТерминал.БанковскийСчетЭквайринг 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Организация, 
		"БанковскийСчетПоУмолчанию");
	
	НовыйТерминал.Подразделение 			= Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	НовыйТерминал.НаправлениеДеятельности 	= Справочники.НаправленияДеятельности.ОсновноеНаправление;
	НовыйТерминал.Касса 					= Касса;
	
	НовыйТерминал.Эквайрер 					= Эквайрер;
	НовыйТерминал.Договор 					= Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Эквайрер);
		
	СтрокаНовыйВидПлатежнойКарты = НовыйТерминал.ВидыПлатежныхКарт.Добавить();
	СтрокаНовыйВидПлатежнойКарты.ВидПлатежнойКарты = ИнтеграцияСПлатежнымиСистемамиУНФКлиентСервер.ВидПлатежнойКартыСБП();
		
	НовыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;    
	НовыйТерминал.Записать();
	
	Возврат НовыйТерминал.Ссылка;
	
КонецФункции // НайтиИлиСоздатьЭквайринговыйТерминалПоУмолчанию()

// Определяет доступность использования функциональности выполнения операций
// в платежной системе на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, оплата в платежной системе доступна.
//
Функция ИнтеграцияДоступна() Экспорт

	НастройкиИнтеграции = НастройкиИнтеграции(Неопределено, Неопределено);				
	ИнтеграцияДоступна  = НастройкиИнтеграции <> Неопределено;
	
	Возврат ИнтеграцияДоступна;
	
КонецФункции

// Устанавливает необходимые опции для корректно работы функциональности 
//
Процедура УстановитьОпцииДляРаботыПодсистемы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Получить() Тогда
		Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура настраивает форму помощника кассового места
// Параметры:
//  Форма - форма нового РМК
//  КассаККМ - СправочникСсылка.КассаККМ - настраиваемая касса
//  Организация - СправочникСсылка.Организации - организация кассы
//  СтруктурнаяЕдиница - СправочникСсылка.СтруктурныеЕдиницы - торговая точка касса
//
Процедура НастроитьФормуПомощникаПодключенияСБП(Форма, КассаККМ, Организация = Неопределено, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	РеквизитыКассы = Новый Структура();
		
	РеквизитыКассы.Вставить("КассаККМ", 		КассаККМ);
	РеквизитыКассы.Вставить("ТорговыйОбъект", 	СтруктурнаяЕдиница);
	РеквизитыКассы.Вставить("Организация", 		Организация);
		
	Если ЗначениеЗаполнено(КассаККМ) Тогда

		СтруктураРеквизитов = Новый Структура();
		
		СтруктураРеквизитов.Вставить("ТорговыйОбъект", 	"СтруктурнаяЕдиница");
		СтруктураРеквизитов.Вставить("Организация", 	"Владелец");

		ДанныеКассы	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, СтруктураРеквизитов);
		
		Если Организация = Неопределено 
			ИЛИ СтруктурнаяЕдиница = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РеквизитыКассы, ДанныеКассы, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиКассовыхСсылокСБП = ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ИнициализироватьНастройкиКассовыхСсылок(
			РеквизитыКассы.ТорговыйОбъект, 
			РеквизитыКассы.Организация, 
			РеквизитыКассы.КассаККМ);

	Если НастройкиКассовыхСсылокСБП.НастройкиПодключения <> Неопределено Тогда

		Для Каждого НастройкаПодключения Из НастройкиКассовыхСсылокСБП.НастройкиПодключения Цикл
			
			НастройкиТорговойТочки = НастройкиТорговойТочки(НастройкаПодключения.Интеграция);

			НастройкаПодключения.Вставить("НастройкиТорговойТочки", НастройкиТорговойТочки);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Форма.НастройкиКассовыхСсылокСБП  	= НастройкиКассовыхСсылокСБП;

	СписокСпособовОплаты				= Форма.Элементы.СпособОплатыКассовойСсылкиСБП.СписокВыбора;

	СпособыОплатыВНастройках			= НастройкиКассовыхСсылокСБП.СписокСпособовОплаты.ВыгрузитьЗначения();
	Форма.Элементы.СпособОплатыКассовойСсылкиСБП.СписокВыбора.ЗагрузитьЗначения(СпособыОплатыВНастройках);
	
	Форма.ИспользоватьКассовыйQRКодСБП 	= НастройкиКассовыхСсылокСБП.КассовыеСсылки.ИспользоватьКассовыйQRКодСБП;
	Форма.СпособОплатыКассовойСсылкиСБП	= Форма.НастройкиКассовыхСсылокСБП.КассовыеСсылки.СпособОплатыДляПечати;
	
	Если СписокСпособовОплаты.НайтиПоЗначению(Форма.СпособОплатыКассовойСсылкиСБП) = Неопределено 
		И СписокСпособовОплаты.Количество() Тогда
		Форма.СпособОплатыКассовойСсылкиСБП	= СписокСпособовОплаты[0].Значение;
	КонецЕсли;

	СписокМакетов = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
		Форма.Элементы, 
		"МакетQRКодаСБП", 
		"СписокВыбора");
	
	Если СписокМакетов <> Неопределено
		И СписокМакетов.НайтиПоЗначению(Форма.МакетQRКодаСБП) = Неопределено Тогда
		Форма.МакетQRКодаСБП = СписокМакетов[0].Значение;	
	КонецЕсли;
	
	Форма.Элементы.ДекорацияИспользоватьКассовыйQRКодСБП.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru = 'Использовать <a href = ""ПерейтиНаИнструкциюКассовыйQRКод"">кассовый QR-код СБП</a>'"));
	
	Форма.Элементы.ДекорацияNFCСсылка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru = 'Ссылку необходимо использовать для'") 
		+ НСтр("ru = ' <a href =""ПерейтиНаИнструкциюNFC"">программирования NFC метки</a>, которая размещается на кассе.'")); // АПК:1299
			
	ИнтеграцияСПлатежнымиСистемамиУНФКлиентСервер.НастроитьПояснениеКФормеПомощника(Форма);
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриСозданииНаСервереФормыПодключенияСсылки.
Процедура ПриСозданииНаСервереФормыПодключенияСсылки(Форма, Отказ) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("ИспользоватьПодключаемоеОборудование", Новый ОписаниеТипов("Булево"))); 
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("ПоддерживаемыеТипыПодключаемогоОборудования", Новый ОписаниеТипов("Строка"))); 
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	Форма.ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Определяет доступность операций для торговой точки. В сценариях оплаты
// различных платежных систем существуют отличия, поэтому ряд операций могут
// быть запрещены для выполнения. Метод следует использовать для настройки
// элементов форм оплаты и возвратов и получение общих настроек интеграции.
//
// Параметры:
//  ТорговаяТочка - СправочникСсылка.НастройкиИнтеграцииСПлатежнымиСистемами -
//                  настройка выполнения операции платежной системы.
//
// Возвращаемое значение:
//  Структура - информация о доступных операциях:
//    * ОтменаЗаказа - Булево - признак доступности отмены не оплаченного
//      заказа в платежной системе. ;
//    * ОтменаОплаты - Булево - Устарел. Признак доступности отмены оплаченного
//      заказа (отмена транзакции) в платежной системе. ;
//    * СрокЖизниQRКода - Булево - признак доступности установки максимального
//      срока действия QR-кода;
//    * ПлатежнаяСсылка - Булево - признак доступности использования платежной ссылки
//      для выполнения оплаты;
//    * ВыборПлатежнойСистемыВозврата - Булево - признак доступности возврата оплаты
//      в платежную систему отличную от исходной. ;
//    * Идентификатор - Строка - строковый идентификатор платежной системы или участника СБП;
//    * СинонимСистемы - Строка - синоним платежной системы для печати;
//    * Используется - Булево - признак активности настройки;
//    * КассовыеСсылки - Булево - признак поддержки кассовых ссылок;
//    * ПлатежныйАгрегатор - Булево - настроена интеграция с платежным агрегатором;
//    * ПодключениеКассовойСсылки - Булево - определяет доступность подключения кассовой ссылки.
//
Функция НастройкиТорговойТочки(ТорговаяТочка) Экспорт
	
	Настройки = СистемаБыстрыхПлатежей.НастройкиПодключения(ТорговаяТочка);
	
	Результат = Новый Структура;
	Результат.Вставить("ОтменаЗаказа",                  Ложь);
	Результат.Вставить("ОтменаОплаты",                  Ложь);
	Результат.Вставить("СрокЖизниQRКода",               Истина);
	Результат.Вставить("ПлатежнаяСсылка",               Истина);
	Результат.Вставить("ВыборПлатежнойСистемыВозврата", Настройки.НастройкиСБПc2b.УчастникСБПВозврата);
	Результат.Вставить("Идентификатор",                 Настройки.Идентификатор);
	Результат.Вставить("СинонимСистемы",                Настройки.СинонимСистемы);
	Результат.Вставить("Используется",                  Настройки.Используется);
	Результат.Вставить("КассовыеСсылки",                Настройки.НастройкиСБПc2b.КассовыеСсылки);
	Результат.Вставить("ПлатежныйАгрегатор",            Настройки.НастройкиСБПc2b.ПлатежныйАгрегатор);
	Результат.Вставить("ПодключениеКассовойСсылки",     Настройки.НастройкиСБПc2b.ПодключениеКассовойСсылки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет документ операции, в случае ошибки вызывает исключение.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//                   оплату в информационной базе;
//
Процедура ПередВыполнениемОперацииВПлатежнойСистеме(ДокументОперации)
	
	Если Не ЗначениеЗаполнено(ДокументОперации)
		Или Не Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип.СодержитТип(ТипЗнч(ДокументОперации)) Тогда
			
		ВызватьИсключение НСтр("ru = 'Операция в платежной системе для документа не поддерживается.'");
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьДокументОперацияПоПлатежнойСистеме(Интеграция, ОснованиеПлатежа, ИдентификаторПлатежа, СуммаОплаты)

	НастройкиИнтеграции		= НастройкиТорговойТочки(Интеграция);
	
	ДатаОплаты 				= ТекущаяДатаСеанса();
	БанковскийСчет			= ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", ОснованиеПлатежа.Метаданные()), 
		ОснованиеПлатежа.БанковскийСчет,
		ОснованиеПлатежа.Организация.БанковскийСчетПоУмолчанию);
		
	Касса					= ОснованиеПлатежа.Организация.КассаПоУмолчанию;
	Организация				= ОснованиеПлатежа.Организация;
	
	ВалютаДенежныхСредств	= Константы.ВалютаУчета.Получить();
	ВидПлатежнойКарты		= ИнтеграцияСПлатежнымиСистемамиУНФКлиентСервер.ВидПлатежнойКартыСБП();
	ЭквайринговыйТерминал	= ПолучитьСпособОплатыИнтеграции(Интеграция);
	ВидОперации				= Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя;

	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) 
		И ЭквайринговыйТерминал.ВидыПлатежныхКарт.Количество() Тогда
		
		ПроцентКомиссии 	= ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ПроцентКомиссии;
		
	Иначе
		ПроцентКомиссии 	= 0;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата", 		 					ДатаОплаты);
	ДанныеЗаполнения.Вставить("ВидОперации", 					ВидОперации);
	ДанныеЗаполнения.Вставить("СуммаДокумента", 				СуммаОплаты);      
	ДанныеЗаполнения.Вставить("ПроцентКомиссии",				ПроцентКомиссии);
	ДанныеЗаполнения.Вставить("СуммаКомиссииПоДоговору",		ПроцентКомиссии * СуммаОплаты / 100);
	ДанныеЗаполнения.Вставить("СсылочныйНомер", 				ИдентификаторПлатежа);
	ДанныеЗаполнения.Вставить("БанковскийСчет", 				БанковскийСчет);
	ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал",  		ЭквайринговыйТерминал);
	ДанныеЗаполнения.Вставить("ВалютаДенежныхСредств",  		ВалютаДенежныхСредств);
	ДанныеЗаполнения.Вставить("СпособОплаты", 					Перечисления.СпособыОплатыЭквайринг.ОплатаСБП);
	ДанныеЗаполнения.Вставить("Касса", 	  						Касса);
	ДанныеЗаполнения.Вставить("Кратность", 						1);
	ДанныеЗаполнения.Вставить("ВидПлатежнойКарты", 				ВидПлатежнойКарты);
	ДанныеЗаполнения.Вставить("ИдентификаторПлатежнойСистемы", 	НастройкиИнтеграции.Идентификатор);
			
	ДокументОплаты = Документы.ОперацияПоПлатежнымКартам.СоздатьДокумент();
	
	ДокументОплаты.Заполнить(ОснованиеПлатежа);
	ЗаполнитьЗначенияСвойств(ДокументОплаты, ДанныеЗаполнения);
			
	СуммаОснованияПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "СуммаДокумента");
	Если СуммаОснованияПлатежа <> ДокументОплаты.СуммаДокумента Тогда
				
		МассивКоэффициентов = ДокументОплаты.РасшифровкаПлатежа.ВыгрузитьКолонку("СуммаПлатежа");
		МассивСумм = РаспределитьПропорционально(ДокументОплаты.СуммаДокумента, МассивКоэффициентов);
		Если МассивСумм <> Неопределено Тогда
			ДокументОплаты.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаПлатежа");
		КонецЕсли;
				
		Если МассивСумм <> Неопределено Тогда
			ДокументОплаты.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаРасчетов");
		КонецЕсли;
				
		МассивСуммКомиссии = РаспределитьПропорционально(ДокументОплаты.СуммаКомиссииПоДоговору, МассивКоэффициентов);
		Если МассивСуммКомиссии <> Неопределено Тогда
			ДокументОплаты.РасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаКомиссии");
		КонецЕсли;
				
		Для каждого СтрокаПлатеж Из ДокументОплаты.РасшифровкаПлатежа Цикл
			ЗначениеСтавкиНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаПлатеж.СтавкаНДС);
			СтрокаПлатеж.СуммаНДС = РассчитатьСуммуНДС(СтрокаПлатеж.СуммаПлатежа, Истина, ЗначениеСтавкиНДС);
		КонецЦикла;
				
	КонецЕсли;
			
	ТекстСообщения = "";
	Если ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОплаты,, ТекстСообщения) Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
			
	ДокументОплаты.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокументОплаты;
	
КонецФункции

Функция ИспользоватьНесколькоВидовОплаты()
	
	УстановитьОпцииДляРаботыПодсистемы();
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКартами");
	
КонецФункции

Функция ИспользоватьНесколькоОрганизаций()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецФункции

Функция ОрганизацияПоУмолчанию()
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();

	Возврат Организация;

КонецФункции

Функция ВидОплатыПоУмолчанию(Организация)
	
	ВидОплаты = НайтиИлиСоздатьЭквайринговыйТерминалСБП(Организация);
	
	Возврат ВидОплаты;
	
КонецФункции

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число - сумма, которую надо распределить;
//  Коэффициенты - Массив - коэффициенты распределения;
//  Точность - Число - точность округления при распределении. Необязателен.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
//           или суммарный вес коэффициентов = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьПропорционально(Знач РаспределяемаяСумма, Знач Коэффициенты, Знач Точность = 2)

	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = 0;
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Коэффициент = Коэффициенты[Индекс];
		
		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(Коэффициенты.Количество());
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Результат[Индекс] = Окр(РаспределяемаяСумма * Коэффициенты[Индекс] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
	КонецЦикла;
	
	Дельта = РаспределяемаяСумма - РаспределеннаяСумма;
	
	Если Дельта > 0 Тогда 
		
		// Погрешности округления отнесем на коэффициент с максимальным весом.
		Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
			Результат[ИндексМаксимальногоКоэффициента] = Результат[ИндексМаксимальногоКоэффициента] + Дельта;
		КонецЕсли;
		
	ИначеЕсли Дельта < 0 Тогда 
		
		// Если распределили больше чем положено, размазываем погрешность по ближайшим максимальным весам.
		ЗначениеПогрешности = 1 / Pow(10, Точность);
		КоличествоЭлементовПогрешности = -Дельта / ЗначениеПогрешности;
		
		КоэффициентыРешето = Новый Массив(Новый ФиксированныйМассив(Коэффициенты));
		
		Для Сч = 1 По КоличествоЭлементовПогрешности Цикл 
			МаксимальныйКоэффициент = МаксимальноеЗначениеВМассиве(КоэффициентыРешето);
			Индекс = КоэффициентыРешето.Найти(МаксимальныйКоэффициент);
			Результат[Индекс] = Результат[Индекс] - ЗначениеПогрешности;
			КоэффициентыРешето[Индекс] = 0;
		КонецЦикла;
		
	Иначе 
		// Если Дельта = 0, то все идеально.
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Служебная функция для распределения сумм оплат
//
Функция МаксимальноеЗначениеВМассиве(Массив)
	
	// Рассчитываем, что на вход будет получен массив, в котором все элементы либо все положительные, либо отрицательные.
	// Поэтому для определения максимального значения сравниваем абсолютное значение элемента.
	//
	// В случае, если на вход получен массив, в котором элементы с разными знаками, то максимальное значение будет
	// определено не правильно. Но этот случай оставлен для совместимости с предыдущими версиями.
	
	МаксимальноеЗначение = 0;
	Множитель            = 1;
	Для Индекс = 0 По Массив.Количество() - 1 Цикл
		Значение = Массив[Индекс];
		АбсолютноеЗначение = ?(Значение> 0, Значение, -Значение);
		Если МаксимальноеЗначение < АбсолютноеЗначение Тогда
			МаксимальноеЗначение = АбсолютноеЗначение;
			Множитель = ?(Значение > 0, 1, -1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальноеЗначение * Множитель;
	
КонецФункции

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма            - Число - сумма от которой надо рассчитывать налоги;
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму ("внутри" или "сверху");
//  СтавкаНДС        - Число - процентная ставка НДС.
//
// Возвращаемое значение:
//  Число - полученная сумма НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, СтавкаНДС)
	
	Если СуммаВключаетНДС Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если НЕ СуммаВключаетНДС Тогда
		СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
	КонецЕсли;
	
	Возврат СуммаНДС;

КонецФункции

Функция ПолучитьСпособОплатыИнтеграции(Интеграция)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеНастроекИнтеграции.СпособОплаты КАК СпособОплаты
	|ИЗ
	|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК СоответствиеНастроекИнтеграции
	|ГДЕ
	|	СоответствиеНастроекИнтеграции.Интеграция = &Интеграция";

	Запрос.УстановитьПараметр("Интеграция", Интеграция);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.СпособОплаты;
	
КонецФункции

Процедура СоздатьВТДокументовОплаты(Запрос)
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ДокументЧекККМ.СуммаДокумента КАК Сумма,
	|	ДокументЧекККМ.Ссылка КАК Ссылка,
	|	&ВидОперацииПродажа КАК ВидОперации,
	|	ДокументЧекККМ.Проведен
	|		И ДокументЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит) КАК Выполнена
	|ПОМЕСТИТЬ ВТДокументыОплаты
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументЧекККМ
	|ГДЕ
	|	ДокументЧекККМ.Ссылка В(&ДокументыОплат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.СуммаДокумента,
	|	ЧекККМВозврат.Ссылка,
	|	&ВидОперацииВозврат,
	|	ЧекККМВозврат.Проведен
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.Ссылка В(&ДокументыОплат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартам.СуммаДокумента,
	|	ОперацияПоПлатежнымКартам.Ссылка,
	|	ВЫБОР
	|		КОГДА ОперацияПоПлатежнымКартам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя)
	|			ТОГДА &ВидОперацииПродажа
	|		ИНАЧЕ &ВидОперацииВозврат
	|	КОНЕЦ,
	|	ОперацияПоПлатежнымКартам.Проведен
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.ДокументОснование В(&ДокументыОплат)
	|   
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартам.СуммаДокумента,
	|	ОперацияПоПлатежнымКартам.Ссылка,
	|	ВЫБОР
	|		КОГДА ОперацияПоПлатежнымКартам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя)
	|			ТОГДА &ВидОперацииПродажа
	|		ИНАЧЕ &ВидОперацииВозврат
	|	КОНЕЦ,
	|	ОперацияПоПлатежнымКартам.Проведен
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам КАК ОперацияПоПлатежнымКартам
	|ГДЕ
	|	ОперацияПоПлатежнымКартам.Ссылка В(&ДокументыОплат)";

	Запрос.УстановитьПараметр("ВидОперацииПродажа", СверкаВзаиморасчетовСБПc2b.ИдентификаторТипаОперацииОплата());
	Запрос.УстановитьПараметр("ВидОперацииВозврат", СверкаВзаиморасчетовСБПc2b.ИдентификаторТипаОперацииВозврат());
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция НастройкиСБПОснованияПлатежа(ОснованиеПлатежа)
	
	МетаданныеОснования 	 = ОснованиеПлатежа.Метаданные();
	БанковскийСчетВДокументе = Ложь;	
	
	РеквизитыПлатежа 		 = Новый Структура();
	РеквизитыПлатежа.Вставить("ВидКонтрагента", 	"Контрагент.ВидКонтрагента");
	РеквизитыПлатежа.Вставить("ДокументОплаты", 	"Ссылка");
	РеквизитыПлатежа.Вставить("ИтогПоЧеку", 		"СуммаДокумента");
	РеквизитыПлатежа.Вставить("Дата", 				"Дата");
	РеквизитыПлатежа.Вставить("Организация", 		"Организация");
	РеквизитыПлатежа.Вставить("Валюта",				"ВалютаДокумента");

	Если МетаданныеОснования.Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда

		БанковскийСчетВДокументе = Истина;	
		
		РеквизитыПлатежа.Вставить("БанковскийСчет",		"БанковскийСчет");
		РеквизитыПлатежа.Вставить("Банк",				"БанковскийСчет.Банк");
		РеквизитыПлатежа.Вставить("БИКРасчетногоСчета",	"БанковскийСчет.Банк.Код");        
		
	Иначе

		РеквизитыПлатежа.Вставить("БанковскийСчет",		"Организация.БанковскийСчетПоУмолчанию");
		РеквизитыПлатежа.Вставить("Банк",				"Организация.БанковскийСчетПоУмолчанию.Банк");
		РеквизитыПлатежа.Вставить("БИКРасчетногоСчета",	"Организация.БанковскийСчетПоУмолчанию.Банк.Код");
		
	КонецЕсли;

	НастройкиОпределены = Истина;
	
	Если МетаданныеОснования.Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		РеквизитыПлатежа.Вставить("ТорговыйОбъект",	"Подразделение");
	ИначеЕсли МетаданныеОснования.Реквизиты.Найти("СтруктурнаяЕдиницаПродажи") <> Неопределено Тогда
		РеквизитыПлатежа.Вставить("ТорговыйОбъект",	"СтруктурнаяЕдиницаПродажи");
	ИначеЕсли МетаданныеОснования.Реквизиты.Найти("СтруктурнаяЕдиница") <> Неопределено Тогда
		РеквизитыПлатежа.Вставить("ТорговыйОбъект",	"СтруктурнаяЕдиница");
	Иначе
		НастройкиОпределены = Ложь;
	КонецЕсли;

	Если НастройкиОпределены Тогда
	
		НастройкаСБП 	  	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеПлатежа, РеквизитыПлатежа);   
		НастройкаСБП.Вставить("БанковскийСчетВДокументе", БанковскийСчетВДокументе);
		
	КонецЕсли;
	
	Возврат НастройкаСБП;
	
КонецФункции

#КонецОбласти

