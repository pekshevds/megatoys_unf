#Область ПрограммныйИнтерфейс

//Дополнительные действия прикладной конфигурации при изменении статуса документа ЗЕРНО.
//
//Параметры:
//   ДокументСсылка   - ДокументСсылка     - ссылка на документ с изменением статуса.
//   ПредыдущийСтатус - ПеречислениеСсылка - предыдущий статус обработки.
//   НовыйСтатус      - ПеречислениеСсылка - новый статус обработки.
//   ПараметрыОбновленияСтатуса - Структура, Неопределено - (См. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса).
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса = Неопределено) Экспорт

	Возврат;

КонецПроцедуры

// Процедура определяет использование транспортных средств
//
// Параметры:
//  Указывается - Булево - Признак использования транспортных средств.
Процедура УказываетсяТранспортноеСредство(Указывается) Экспорт
	
	Указывается = Истина;
	
КонецПроцедуры

// Заполняет данные транспортного средства
//
// Параметры:
//  Реквизиты - Структура из КлючИЗначение - возможные реквизиты транспортного средства:
//  Ключи: НомерТранспортногоСредства, НомерАвтомобильногоКонтейнера
//  ТранспортноеСредство - ОпределяемыйТип.ТранспортныеСредстваИС - транспортное средство
Процедура ПриОпределенииРеквизитовТранспортногоСредства(Реквизиты, ТранспортноеСредство) Экспорт
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортноеСредство, "Код");
		Реквизиты.НомерТранспортногоСредства = ЗначенияРеквизитов.Код;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПересчетКоличества

// Заполняет количество номенклатуры по количеству ЗЕРНО:
//   * Имя колонки с количеством ЗЕРНО откуда идет пересчет: <Количество[суффикс]ЗЕРНО>,
//   * Имя колонки с прикладным количеством: <Количество[суффикс]>.
//
// Параметры:
//  ОбъектыПересчета - ДанныеФормыЭлементКоллекции, Массив Из СтрокаТабличнойЧасти - объекты для пересчета.
//  Суффикс - Строка - Окончание наименования колонки, содержащей количество.
Процедура ЗаполнитьКоличествоПоКоличествуЗЕРНО(ОбъектыПересчета, Суффикс = "") Экспорт
	
	СтрокиВМассиве = ОбъектыПересчета;
	Если ТипЗнч(ОбъектыПересчета) <> Тип("Массив") Тогда
		СтрокиВМассиве = Новый Массив;
		СтрокиВМассиве.Добавить(ОбъектыПересчета);
	КонецЕсли;
	Коэффициенты = ИнтеграцияЗерноУНФ.КоэффициентыЕдиницИзмеренияЗЕРНО(СтрокиВМассиве);
	
	Для Каждого ЭлементМассива Из СтрокиВМассиве Цикл
		ДанныеЕдиницыИзмерения = Коэффициенты.Получить(ЭлементМассива.Номенклатура);
		Если ЗначениеЗаполнено(ДанныеЕдиницыИзмерения.КодОшибки) Тогда
			ЭлементМассива["Количество" + Суффикс] = 0;
		ИначеЕсли ЗначениеЗаполнено(ДанныеЕдиницыИзмерения.Коэффициент) Тогда
			ЭлементМассива["Количество" + Суффикс] = ЭлементМассива["Количество" + Суффикс + "ЗЕРНО"] * ДанныеЕдиницыИзмерения.Коэффициент;
		ИначеЕсли ЗначениеЗаполнено(ДанныеЕдиницыИзмерения.Вес) Тогда
			ЭлементМассива["Количество" + Суффикс] = ЭлементМассива["Количество" + Суффикс + "ЗЕРНО"] / ДанныеЕдиницыИзмерения.Вес;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументов

//Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
//Параметры:
//   ДокументОбъект - ДокументОбъект - заполняемый документ,
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//   ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ИнтеграцияЗЕРНОУНФ.ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// В процедуре необходимо реализовать запись сопоставления ключей адресов и ключей реквизитов организаций ЗЕРНО 
//   с прикладными справочниками конфигурации
//
// Параметры:
//  ДокументОснование - ДокументСсылка, ДокументОбъект - прикладной документ конфигурации,
//  ДокументОбъект    - ДокументСсылка, ДокументОбъект - связанный с ним документ библиотеки.
//
Процедура ЗаполнитьСоответствиеШапкиОбъектов(ДокументОснование, ДокументОбъект) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// В процедуре реализуется заполнение обособленных подразделений для коллекции организаций. В переданной таблице
// необходимо заполнить колонки ОрганизацияКонтрагент, Подразделение.
//
// Параметры:
//  КоллекцияОрганизаций - ТаблицаЗначений - массив ссылок, по которым нужно получить реквизиты
//  ТаблицаПодразделенйОрганизации - см. ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение
Процедура ПриОпределенииОбособленныхПодразделенийОрганизации(КоллекцияОрганизаций, ТаблицаПодразделенйОрганизации) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// В процедуре требуется дополнить в переданной таблице по Организации/контрагенту и подразделению
// данные ИНН/КПП/ОГРН/Наименование/ТипОрганизации/КодАльфа3/ЮридическийАдрес/Фамилия/Имя/Отчество из информационной базы.
// КоллекцияОрганизацийПодразделений индексирован по "ОрганизацияКонтрагент, Подразделение".
//
// Параметры:
//  КоллекцияОрганизацийПодразделений - см. ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение
Процедура ПриОпределенииРеквизитовОрганизацийКонтрагентов(КоллекцияОрганизацийПодразделений) Экспорт
	
	Если КоллекцияОрганизацийПодразделений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОтбора", КоллекцияОрганизацийПодразделений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОтбора.ОрганизацияКонтрагент КАК ОрганизацияКонтрагент,
	|	ТаблицаОтбора.Подразделение         КАК Подразделение
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.ИНН                  КАК ИНН,
	|	Контрагенты.КПП                  КАК КПП,
	|	Контрагенты.РегистрационныйНомер КАК ОГРН,
	|	Контрагенты.НаименованиеПолное   КАК Наименование,
	|	ВЫБОР
	|		КОГДА Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИндивидульныйПредприниматель)
	|		КОГДА НЕ Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|				И НЕ Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизация)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ЮридическоеЛицо)
	|	КОНЕЦ КАК ТипОрганизации,
	|	ЕСТЬNULL(Контрагенты.СтранаРегистрации.КодАльфа3, """") КАК КодАльфа3,
	|	Контрагенты.Ссылка          КАК Ссылка,
	|	ТаблицаОтбора.Подразделение КАК Подразделение,
	|	Контрагенты.ФИО КАК ИндивидуальныйПредприниматель
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Контрагенты.Ссылка = ТаблицаОтбора.ОрганизацияКонтрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	Организации.ИНН,
	|	Организации.КПП КАК КПП,
	|	Организации.ОГРН,
	|	Организации.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Организации.ИностраннаяОрганизация
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизация)
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИндивидульныйПредприниматель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ЮридическоеЛицо)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Организации.ИностраннаяОрганизация
	|			ТОГДА """"
	|		ИНАЧЕ ""RUS""
	|	КОНЕЦ,
	|	Организации.Ссылка,
	|	ТаблицаОтбора.Подразделение,
	|	ЕСТЬNULL(Организации.ИндивидуальныйПредприниматель.ФИО, """")
	|
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Организации.Ссылка = ТаблицаОтбора.ОрганизацияКонтрагент";
	
	КоллекцияКонтактнаяИнформация = Новый Массив();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("ОрганизацияКонтрагент, Подразделение");
	Пока Выборка.Следующий() Цикл
		
		Отбор.ОрганизацияКонтрагент = Выборка.Ссылка;
		Отбор.Подразделение         = Выборка.Подразделение;
		
		НайденныеСтроки = КоллекцияОрганизацийПодразделений.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка);
			Если Выборка.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ИндивидульныйПредприниматель Тогда
				
				Если ЗначениеЗаполнено(Выборка.ИндивидуальныйПредприниматель) Тогда
					ПолноеНаименование = Выборка.ИндивидуальныйПредприниматель;
				Иначе
					ПолноеНаименование = Выборка.Наименование;
				КонецЕсли;
				
				ПоисковаяСтрока = НСтр("ru = 'Индивидуальный предприниматель'");
				Если ВРег(Лев(ПолноеНаименование, 3))  = "ИП " Тогда
					ПолноеНаименование = Сред(ПолноеНаименование, 4);
				ИначеЕсли ВРег(Прав(ПолноеНаименование, 3))  = " ИП" Тогда
					ПолноеНаименование = Лев(ПолноеНаименование, СтрДлина(ПолноеНаименование) - 3);
				ИначеЕсли ВРег(Лев(ПолноеНаименование, СтрДлина(ПоисковаяСтрока))) = ВРег(ПоисковаяСтрока) Тогда
					ПолноеНаименование = Прав(ПолноеНаименование, СтрДлина(ПолноеНаименование) - СтрДлина(ПоисковаяСтрока));
				КонецЕсли;
				
				ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолноеНаименование);
				НайденнаяСтрока.Фамилия  = ЧастиИмени.Фамилия;
				НайденнаяСтрока.Имя      = ЧастиИмени.Имя;
				НайденнаяСтрока.Отчество = ЧастиИмени.Отчество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		КоллекцияКонтактнаяИнформация.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	ВидыКонтактнойИнформации = Новый Массив();
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		КоллекцияКонтактнаяИнформация,, ВидыКонтактнойИнформации, ТекущаяДатаСеанса());
	
	Отбор = Новый Структура("ОрганизацияКонтрагент");
	Для Каждого СтрокаТаблицы Из ТаблицаКИ Цикл
		
		Отбор.ОрганизацияКонтрагент = СтрокаТаблицы.Объект;
		НайденныеСтроки = КоллекцияОрганизацийПодразделений.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЮридическийАдрес = СтрокаТаблицы.Представление;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Определение ссылок на организации и контрагенты по реквизитам. Переданной таблице реквизитов необходимо заполнить
// колонки:
//  - Организация - Ссылка на организацию, найденную по переданным реквизитам
//  - Контрагент  - Ссылка на контрагент, найденного по переданным реквизитам,
//  - Подразделение - Ссылка на обособленное подразделение, найденного по переданным реквизитам.
// Параметры:
//  ТаблицаРеквизитов - см. Справочники.КлючиРеквизитовОрганизацийЗЕРНО.НоваяТаблицаРеквизитовКлючейРеквизитовОрганизаций
Процедура ПриОпределенииКонтрагентовОрганизацийПоРеквизитам(ТаблицаРеквизитов) Экспорт
	
	Если ТаблицаРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРеквизитов.Колонки.Найти("ИндексИсходнойСтроки") = Неопределено Тогда
		ТаблицаРеквизитов.Колонки.Добавить("ИндексИсходнойСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		СтрокаТаблицы.ИндексИсходнойСтроки = ТаблицаРеквизитов.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаРеквизитов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОтбора.ИНН  КАК ИНН,
	|	ТаблицаОтбора.КПП  КАК КПП,
	|	ТаблицаОтбора.ОГРН КАК ОГРН,
	|	ТаблицаОтбора.Наименование КАК Наименование,
	|	ТаблицаОтбора.ТипОрганизации КАК ТипОрганизации,
	|	ТаблицаОтбора.ИндексИсходнойСтроки
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка                  КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО                        КАК Организация,
	|	НЕОПРЕДЕЛЕНО                        КАК Подразделение,
	|	ТаблицаОтбора.ИндексИсходнойСтроки  КАК ИндексИсходнойСтроки
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Контрагенты.ИНН = ТаблицаОтбора.ИНН
	|			И Контрагенты.КПП = ТаблицаОтбора.КПП
	|			И ТаблицаОтбора.ТипОрганизации В (ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ЮридическоеЛицо),
	|			                                  ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизация))
	|	И НЕ Контрагенты.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаОтбора.ИндексИсходнойСтроки
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Контрагенты.ИНН = ТаблицаОтбора.ИНН
	|			И Контрагенты.РегистрационныйНомер = ТаблицаОтбора.ОГРН
	|			И ТаблицаОтбора.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИндивидульныйПредприниматель)
	|	И НЕ Контрагенты.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаОтбора.ИндексИсходнойСтроки
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Контрагенты.Наименование = ТаблицаОтбора.Наименование
	|			И ТаблицаОтбора.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизацияБезРегистрацииВРФ)
	|	И НЕ Контрагенты.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	Организации.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаОтбора.ИндексИсходнойСтроки
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Организации.ИНН = ТаблицаОтбора.ИНН
	|			И Организации.КПП = ТаблицаОтбора.КПП
	|			И ТаблицаОтбора.ТипОрганизации В (ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ЮридическоеЛицо),
	|			                                  ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизация))
	|	И НЕ Организации.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	Организации.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаОтбора.ИндексИсходнойСтроки
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Организации.ИНН = ТаблицаОтбора.ИНН
	|			И Организации.ОГРН = ТаблицаОтбора.ОГРН
	|			И ТаблицаОтбора.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИндивидульныйПредприниматель)
	|	И НЕ Организации.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	Организации.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаОтбора.ИндексИсходнойСтроки
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Организации.Наименование = ТаблицаОтбора.Наименование
	|			И ТаблицаОтбора.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизацияБезРегистрацииВРФ)
	|	И НЕ Организации.ПометкаУдаления";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		СтрокаИсходнойТаблицы = ТаблицаРеквизитов.Получить(СтрокаДанных.ИндексИсходнойСтроки);
		Если ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
			СтрокаИсходнойТаблицы.Контрагент = СтрокаДанных.Контрагент;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.Организация) Тогда
			СтрокаИсходнойТаблицы.Организация = СтрокаДанных.Организация;
			Если ЗначениеЗаполнено(СтрокаДанных.Подразделение) Тогда
				СтрокаИсходнойТаблицы.Подразделение = СтрокаДанных.Подразделение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОКПД2

// В данной процедуре требуется переопределить текст запроса, помещающий выборку из прикладного классификатора ОКПД2
// во временную таблицу ВременнаяТаблица.
//   Требования к тексту запроса:
//     Если классификатор ОКПД2 не используется, переопределение также не заполнять.
//     Результат запроса обязательно должен содержать следующие поля:
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//     Ссылка             - ОпределяемыйТип.ОКПД2ИС - ссылка на элемент классификатора ОКПД2.
//     Код                - Строка - код.
//     НаименованиеПолное - Строка - наименование.
// Параметры:
//  ТекстЗапроса - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаКлассификатораОКПД2(ТекстЗапроса) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Предназначена для поиска по коду элемента в Классификаторе ОКПД2.
// Если элемент не найден, то, при использовании классификатора, создать элемент справочника в соответствии с классификатором ОКПД2.
// 
// Параметры:
//  ОКПД2 - Строка - Строка с кодом классификатора ОКПД2.
//  ЭлементСправочника - Произвольный - Переопределяемый параметр, ссылка на элемент классификатора.
Процедура ПриОпределенииСопоставленногоКлассификатораОКПД2(ОКПД2, ЭлементСправочника) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ТНВЭД

// В данной процедуре требуется переопределить текст запроса, помещающий выборку из прикладного классификатора ТН ВЭД
// во временную таблицу ВременнаяТаблица.
//   Требования к тексту запроса:
//     Если классификатор ТН ВЭД не используется, переопределение также не заполнять.
//     Результат запроса обязательно должен содержать следующие поля:
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//     Ссылка             - Произвольный - ссылка на элемент классификатора ТН ВЭД.
//     Код                - Строка - код.
//     НаименованиеПолное - Строка - наименование.
// Параметры:
//  ТекстЗапроса - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаКлассификатораТНВЭД(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КлассификаторТНВЭД.Ссылка КАК Ссылка,
	|	КлассификаторТНВЭД.Код КАК Код,
	|	КлассификаторТНВЭД.НаименованиеПолное КАК НаименованиеПолное
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|";
	
КонецПроцедуры

// Предназначена для поиска по коду элемента в Классификаторе ТН ВЭД.
// Если элемент не найден, то, при использовании классификатора, создать элемент справочника в соответствии с классификатором ТН ВЭД ЕАЭС.
// 
// Параметры:
//  ТНВЭД - Строка - Строка с кодом классификатора ТН ВЭД.
//  Наименование - Строка - наименование элемента классификатора ТН ВЭД.
//  ЭлементСправочника - Произвольный - Переопределяемый параметр, ссылка на элемент классификатора.
Процедура ПриОпределенииСопоставленногоКлассификатораТНВЭД(ТНВЭД, Наименование, ЭлементСправочника) Экспорт
	
	ЭлементСправочника = Справочники.КлассификаторТНВЭД.НайтиСоздатьЭлементКлассификатораТНВЭД(ТНВЭД);
	
КонецПроцедуры

#КонецОбласти

// Процедура заполняет признак использования договоров контрагентов.
//
// Параметры:
//  Используется - Булево - Признак использования договоров контрагентов.
Процедура ПриОпределенииИспользованияДоговоровКонтрагентов(Используется) Экспорт
	
	Используется = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКонтрагентов");
	
КонецПроцедуры

// Процедура заполняет признак использования договоров между организациями.
//
// Параметры:
//  Используется - Булево - Признак использования договоров между организациями.
Процедура ПриОпределенииИспользованияДоговоровОрганизаций(Используется) Экспорт
	
	Используется = Ложь;
	
КонецПроцедуры

// Заполняет соответствие договору дату и номер договора.
//
// Параметры:
//  МассивСсылок - Массив Из ОпределяемыйТип.ДоговорКонтрагентаИС - массив ссылок договоры.
//  
//  ВозвращаемоеСоответствие - Соответствие из ОпределяемыйТип.ДоговорКонтрагентаИС:
//                             * Ключ - ОпределяемыйТип.ДоговорКонтрагентаИС - ссылка на выгружаемый учетный документ.
//                             * Значение - Структура:
//                               ** НомерДоговора - Строка.
//                               ** ДатаДоговора - Дата.
//
Процедура ПриОпределенииНомераДатыДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В (&МассивСсылок)");
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВозвращаемоеСоответствие.Вставить(
			Выборка.Ссылка, Новый Структура("НомерДоговора, ДатаДоговора", Выборка.НомерДоговора, Выборка.ДатаДоговора));
	КонецЦикла;
	
КонецПроцедуры

// Заполняет соответствие госконтракту  дату, номер и номер закупки ЕИС.
//
// Параметры:
//  МассивСсылок - Массив Из ОпределяемыйТип.ГосударственныеКонтрактыИС - массив ссылок государственные контракты.
//  
//  ВозвращаемоеСоответствие - Соответствие из ОпределяемыйТип.ГосударственныеКонтрактыИС:
//                             * Ключ - ОпределяемыйТип.ГосударственныеКонтрактыИС - ссылка на ссылка на гос.контракт.
//                             * Значение - Структура:
//                               ** НомерГосКонтракта - Строка.
//                               ** ДатаГосКонтракта  - Дата.
//                               ** НомерЗакупкиЕИС   - Строка.
//
Процедура ПриОпределенииРеквизитовГосКонтракта(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Предназначена для получения площади земельного участка если в качестве определяемого типа ЗемльныйУчастокИС
// используется тип, отличный от СправочникСсылка.ЗемельныеУчасткиИС.
//
// Параметры:
//  ЗемельныйУчасток - ОпределяемыйТип.ЗемельныйУчастокИС - Ссылка на земельный участок.
//  ПлощадьЗемельногоУчастка - Число - Площадь земельного участка в гектарах.
//
Процедура ПриОпределенииПлощадиЗемельногоУчастка(ЗемельныйУчасток, ПлощадьЗемельногоУчастка) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив из Строка- массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив из Строка - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
Процедура ПриОпределенииОбработкиПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ФормированиеПартийЗЕРНО")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеПартийЗЕРНО")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВнесениеСведенийОСобранномУрожаеЗЕРНО")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОформлениеСДИЗЗЕРНО")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПогашениеСДИЗЗЕРНО") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
		ИнтеграцияИСУНФ.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, "Товары", Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ФормированиеПартийИзДругихПартийЗЕРНО")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ФормированиеПартийПриПроизводствеЗЕРНО") Тогда
		
		ИнтеграцияИСУНФ.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, "", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

