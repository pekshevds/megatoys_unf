///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру для передачи исходных данных при обращении к API
//
// Возвращаемое значение:
//  Структура:
//		*ТипЗапроса - Строка - по умолчанию "POST"
//		*ТелоЗапроса - Строка
//		*АдресСервера - Строка
//		*Логин - Строка
//		*Пароль - Строка
//		*Ресурс - Строка
//		*ПараметрыМетода - Структура
//
Функция ПараметрыЗапросаКСерверу() Экспорт

	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ТипЗапроса", "POST");
	РезультатВыполнения.Вставить("ТелоЗапроса", "");
	РезультатВыполнения.Вставить("АдресСервера", "");
	РезультатВыполнения.Вставить("Логин", "");
	РезультатВыполнения.Вставить("Пароль", "");
	РезультатВыполнения.Вставить("Ресурс", "");
	РезультатВыполнения.Вставить("ПараметрыМетода", Новый Структура());
	
	Возврат РезультатВыполнения;

КонецФункции

// Возвращает параметры подключения к http-сервису
//
// Параметры:
//  СтрокаПодключения - Строка - Строка подключения к http-сервису
//
// Возвращаемое значение:
//  Структура:
//		*https - Булево
//		*ПортПодключения - Число
//		*АдресСервера - Строка
//		*ИмяСервиса - Строка
//		*ОшибкаСтроки - Булево
//		*Используется1СЛинк - Булево
//
Функция ПолучитьПараметрыПодключенияИзСтроки(СтрокаПодключения) Экспорт
	
	СтруктураПараметровПодключения = СтруктураПараметровПодключения();
	ПротоколПодключения = СтрНайти(СтрокаПодключения, "://");
	
	Если ВРЕГ(Лев(СтрокаПодключения, ПротоколПодключения - 1)) = "HTTPS" Тогда
		СтруктураПараметровПодключения.ЭтоЗащищенноеСоединение = Истина;
	Иначе
		СтруктураПараметровПодключения.ЭтоЗащищенноеСоединение = Ложь;
	КонецЕсли;
	
	// Удаляем протокол подключения, если он указан в строке подключения
	Если ПротоколПодключения <> 0 Тогда
		АдресСервера = Прав(СтрокаПодключения, СтрДлина(СтрокаПодключения) - (ПротоколПодключения + 2));
	Иначе
		АдресСервера = СтрокаПодключения;
	КонецЕсли;
	
	СтруктураПараметровПодключения.АдресСервера = АдресСервера;
	
	// Удаляем путь
	ПозицияРазделителя = СтрНайти(АдресСервера, "/");
	АдресСервера = ?(ПозицияРазделителя = 0, АдресСервера, Лев(АдресСервера, ПозицияРазделителя - 1));
	
	Если НЕ СтрНайти(ВРЕГ(АдресСервера), "LINK.1C.RU") = 0 Тогда
		АдресСервера = СтрЗаменить(АдресСервера, ".link.1c.ru", "");
		СтруктураПараметровПодключения.ЭтоЗащищенноеСоединение = Истина;
		СтруктураПараметровПодключения.Используется1СЛинк = Истина;
	Иначе
		СтруктураПараметровПодключения.Используется1СЛинк = Ложь;
	КонецЕсли;
	
	// Пытаемся найти порт подключения
	ПозицияРазделителяПорта = Найти(АдресСервера, ":");
	АдресСервераСПортом = АдресСервера;
	
	Если НЕ ПозицияРазделителяПорта = 0 Тогда
		ПортПодключения = Сред(АдресСервераСПортом, ПозицияРазделителяПорта + 1);
		Попытка
			СтруктураПараметровПодключения.ПортПодключения = Число(ПортПодключения);
		Исключение
			СтруктураПараметровПодключения.ОшибкаСтроки = Истина;
			Возврат СтруктураПараметровПодключения;
		КонецПопытки;
	Иначе
		СтруктураПараметровПодключения.ПортПодключения = ?(СтруктураПараметровПодключения.ЭтоЗащищенноеСоединение, 443, 80);
	КонецЕсли;
	
	// Найдем имя каталога.
	// Обязательно должен быть "/hs/".
	// Все, что после адреса сервера и до /hs/ - это имя каталога.
	ПозицияHS = Найти(ВРЕГ(СтрокаПодключения), "/HS/");
	Если ПозицияHS = 0 Тогда
		СтруктураПараметровПодключения.ОшибкаСтроки = Истина;
		Возврат СтруктураПараметровПодключения;
	КонецЕсли;
	
	Возврат СтруктураПараметровПодключения;
	
КонецФункции

// Проверяет наличие и заполненность параметров запроса. Допускается передавать пустой Пароль и ПараметрыМетода
//
// Параметры:
//  ПараметрыВыполненияЗапроса - Структура - исходные данные для передачи в запрос к серверу
//
// Возвращаемое значение:
//  Булево - результат проверки 
//
Функция ПараметрыВыполненияЗапросаКорректны(ПараметрыВыполненияЗапроса) Экспорт
	
	ДанныеЗапросаКорректны = Истина;
	
	Если ЗначениеЗаполнено(ПараметрыВыполненияЗапроса)
		И ТипЗнч(ПараметрыВыполненияЗапроса) = Тип("Структура") Тогда
		
		Для каждого Параметр Из ПараметрыВыполненияЗапроса Цикл
			
			Ключ = Параметр.Ключ;
			
			КлючИЗначениеЗаполнены = ПараметрыВыполненияЗапроса.Свойство(Ключ)
				И ЗначениеЗаполнено(Параметр.Значение);
				
// Ключ и значение должны быть заполнены, но пароль, параметры метода, тело запроса
// или порт подключения могут быть пустыми
				
				Если НЕ КлючИЗначениеЗаполнены Тогда
					
					Если (Ключ = "Пароль" Или Ключ = "ПараметрыМетода" Или Ключ = "ТелоЗапроса" Или Ключ = "ПортПодключения") Тогда
						Продолжить;
					Иначе
						
						ДанныеЗапросаКорректны = Ложь;
						Прервать;
						
					КонецЕсли;
						
				КонецЕсли;
				
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДанныеЗапросаКорректны;
	
КонецФункции

// Формирует структуру данных для хранения ответа от сервера
//
// Возвращаемое значение:
//  Структура:
//		*ДанныеОтвета - Строка
//		*ЕстьОшибки - Булево
//		*ТекстОшибки - Строка
//
Функция РезультатВыполненияЗапросаПоУмолчанию() Экспорт
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ДанныеОтвета", НСтр("ru = ''"));
	РезультатВыполнения.Вставить("ЕстьОшибки", Истина);
	РезультатВыполнения.Вставить("ТекстОшибки", НСтр("ru = ''"));

	Возврат РезультатВыполнения;

КонецФункции

// Выполняет обращение к ресурсу сервера лояльности 
//
// Параметры:
//  ПараметрыВыполненияЗапроса - Структура:
//		*ТипЗапроса - Строка - по умолчанию "POST"
//		*АдресСервера - Строка
//		*Логин - Строка
//		*Пароль - Строка
//		*Ресурс - Строка
//		*ПараметрыМетода - Структура
//
// Возвращаемое значение:
//  Структура:
//		*ДанныеОтвета - Строка,
//		*ЕстьОшибки - Булево,
//		*ТекстОшибки - Строка
//
Функция ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса) Экспорт

	РезультатВыполнения = РезультатВыполненияЗапросаПоУмолчанию();
	
	Если ПараметрыВыполненияЗапросаКорректны(ПараметрыВыполненияЗапроса) Тогда 
		
		ПараметрыПодключения = ПолучитьПараметрыПодключенияИзСтроки(ПараметрыВыполненияЗапроса.АдресСервера);
		
		ТипЗапроса				= ПараметрыВыполненияЗапроса.ТипЗапроса;
		АдресСервера			= ПараметрыПодключения.АдресСервера;
		Логин					= ПараметрыВыполненияЗапроса.Логин;
		Пароль 					= ПараметрыВыполненияЗапроса.Пароль;
		Ресурс					= ПараметрыВыполненияЗапроса.Ресурс;
		Порт					= ПараметрыПодключения.ПортПодключения;
		
		ЗащищенноеСоединение	= ?(ПараметрыПодключения.ЭтоЗащищенноеСоединение, ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(), Неопределено);
		
		ПараметрыМетода = ПараметрыВыполненияЗапроса.ПараметрыМетода;
		
		ДобавитьПараметрыВРесурс(Ресурс, ПараметрыМетода);
		
		#Если НЕ ВебКлиент Тогда
			
			ТаймаутСоединенияВСекундах = 60;
			HTTPСоединение = Новый HTTPСоединение(АдресСервера,, Логин, Пароль, , ТаймаутСоединенияВСекундах, ЗащищенноеСоединение);
			НTTPЗапрос = Новый HTTPЗапрос(Ресурс);
			
			Если ПараметрыВыполненияЗапроса.Свойство("ТелоЗапроса") И Не ПустаяСтрока(ПараметрыВыполненияЗапроса.ТелоЗапроса) Тогда 
				
				НTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыВыполненияЗапроса.ТелоЗапроса);
				
			КонецЕсли;
			
			Попытка
				
				Ответ = HTTPСоединение.ВызватьHTTPМетод(ТипЗапроса, НTTPЗапрос);
				
				КодСостояния = Ответ.КодСостояния;
				
				РезультатВыполнения.ЕстьОшибки = (КодСостояния > 200);
				
				Если КодСостояния >= 500 Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'При выполнении запроса к серверу лояльности возникла ошибка на стороне сервера. Код ошибки: %1'"),
						КодСостояния);
						
				ИначеЕсли КодСостояния >= 400 Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Некорректно указаны параметры выполнения запроса к серверу лояльности. Код ошибки: %1'"),
						КодСостояния);
					
				КонецЕсли;
				
				РезультатВыполнения.ТекстОшибки = ТекстОшибки;
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				РезультатВыполнения.ЕстьОшибки = Истина;
				РезультатВыполнения.ТекстОшибки =
				СтрШаблон(
					НСтр("ru = 'Не удалось установить соединение с сервером лояльности.
						|Тип запроса: %1
						|Адрес сервера: %2
						|Логин: %3
						|Пароль: %4
						|Ресурс: %5
						|Описание ошибки: %6'"),
					Строка(ТипЗапроса),
					Строка(АдресСервера),
					Строка(Логин),
					Строка(Пароль),
					Строка(Ресурс),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
				
		Если РезультатВыполнения.ЕстьОшибки Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
	
		ДанныеОтвета = Ответ.ПолучитьТелоКакСтроку();
		РезультатВыполнения.ДанныеОтвета = ДанныеОтвета;
	
	#Иначе
		
		РезультатВыполнения = СерверЛояльностиПолучательДанныхВызовСервера.
			ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
	#КонецЕсли
		
	Иначе
		РезультатВыполнения.ЕстьОшибки = Истина;
		РезультатВыполнения.ТекстОшибки =
			НСтр("ru = 'Проверьте указанные параметры соединения с сервером лояльности в настройках РМК.'");
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает структуру обязательных параметров для запроса остатков сервера лояльности
//
// Возвращаемое значение:
//  Структура:
//		*Item - см. ПолучитьСтруктуруСсылк
//		*Variant - см. ПолучитьСтруктуруСсылки
//		*Package - см. ПолучитьСтруктуруСсылки
//
Функция СтруктураПараметровПолученияОстатков() Экспорт

	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("Item");
	РезультатВыполнения.Вставить("Variant");
	РезультатВыполнения.Вставить("Package");
	
	Возврат РезультатВыполнения;

КонецФункции

// Возвращает структуру обязательных параметров для запроса поиска карт клиента
//
// Возвращаемое значение:
//  Структура:
//		*ClientCardID - Строка
//		*Phone - Строка
//		*Email - Строка
//		*BlockBonuses - Строка
//		*ClientGUID - Строка
//		*CardGUID - Строка
//
Функция СтруктураПараметровНайтиКартуКлиента() Экспорт

	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ClientCardID");
	РезультатВыполнения.Вставить("Phone");
	РезультатВыполнения.Вставить("Email");
	РезультатВыполнения.Вставить("BlockBonuses");
	РезультатВыполнения.Вставить("ClientGUID");
	РезультатВыполнения.Вставить("CardGUID");
	
	Возврат РезультатВыполнения;

КонецФункции

// Возвращает структуру обязательных параметров для запроса к бонусной подсистеме сервера лояльности
//
// Возвращаемое значение:
//  Структура:
//		*ClientCardID - Строка
//		*Phone - Строка
//		*Email - Строка
//		*Client - Строка
//		*Store - Строка
//		*GiftCardNumber - Строка
//		*GiftCardUID - Строка
//		*BonusesCount - Строка
//		*GiftCardWriteOffAmount - Строка
//		*Promocode - Строка
//		*DateOfBirth - Строка
//		*ClientCardTypeUID - Строка
//
Функция ПараметрыМетодовБонуснойПодсистемы() Экспорт

	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ClientCardID");
	РезультатВыполнения.Вставить("Phone");
	РезультатВыполнения.Вставить("Email");
	РезультатВыполнения.Вставить("Client");
	РезультатВыполнения.Вставить("Store");
	РезультатВыполнения.Вставить("GiftCardNumber");
	РезультатВыполнения.Вставить("GiftCardUID");
	РезультатВыполнения.Вставить("BonusesCount");
	РезультатВыполнения.Вставить("GiftCardWriteOffAmount");
	РезультатВыполнения.Вставить("Promocode");
	РезультатВыполнения.Вставить("DateOfBirth");
	РезультатВыполнения.Вставить("ClientCardTypeUID");
	
	Возврат РезультатВыполнения;

КонецФункции

// Возвращает структуру обязательных параметров для запроса расчета скидок к серверу лояльности
//
// Возвращаемое значение:
//  Структура:
//		*RecoverManagedDiscounts - Булево
//		*ObjectTime - Дата
//		*CurrentDate - Дата
//		*LoyaltyCardPresented - Булево
//		*HasGifts - Булево
//		*UseApplicationPrices - Булево
//		*ControlBalanceOfGoods - Булево
//		*LoyaltyCardsList - Массив из Строка - Массив кодов карт
//		*RetailStore - см. ПолучитьСтруктуруСсылки
//		*ApplyObject - Булево
//		*WorkPlace - см. ПолучитьСтруктуруСсылки
//		*Goods - см. СтруктураТоваровДляРасчетаСкидок
//		*GetLoyaltyCardData - Булево
//		*BlockBonuses - Строка - "0" или "1"
//
Функция СтруктураПараметровРасчетаСкидок() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("RecoverManagedDiscounts");
	СтруктураПараметров.Вставить("ObjectTime");
	СтруктураПараметров.Вставить("CurrentDate");
	СтруктураПараметров.Вставить("LoyaltyCardPresented");
	СтруктураПараметров.Вставить("HasGifts");
	СтруктураПараметров.Вставить("UseApplicationPrices");
	СтруктураПараметров.Вставить("ControlBalanceOfGoods");
	СтруктураПараметров.Вставить("LoyaltyCardsList");
	СтруктураПараметров.Вставить("PromocodesList");
	СтруктураПараметров.Вставить("ControlledDiscountsList");
	СтруктураПараметров.Вставить("RetailStore");
	СтруктураПараметров.Вставить("ApplyObject");
	СтруктураПараметров.Вставить("WorkPlace");
	СтруктураПараметров.Вставить("Goods");
	СтруктураПараметров.Вставить("GetLoyaltyCardData");
	СтруктураПараметров.Вставить("BlockBonuses");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает структуру товаров для заполнения параметров расчета скидок сервером лояльности
//
// Возвращаемое значение:
//  Структура:
//		*LineUID - Строка
//		*Count - Число
//		*PackagesCount - Число
//		*Item - см. ПолучитьСтруктуруСсылки
//		*Price - Число
//		*GiftSale - Булево
//		*PercentOfAutomaticDiscount - Число
//		*PercentOfManualDiscount - Число
//		*VATRate - Строка
//		*Amount - Число
//		*AmountOfAutomaticDiscount - Число
//		*TotalAmount - Число
//		*VATAmount - Число
//		*AmountOfManualDiscount - Число
//		*Package - см. ПолучитьСтруктуруСсылки
//		*Variant - см. ПолучитьСтруктуруСсылки
//
Функция СтруктураТоваровДляРасчетаСкидок() Экспорт
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("LineUID");
	СтруктураСтроки.Вставить("Count");
	СтруктураСтроки.Вставить("PackagesCount");
	СтруктураСтроки.Вставить("Item");
	СтруктураСтроки.Вставить("Price");
	СтруктураСтроки.Вставить("GiftSale");
	СтруктураСтроки.Вставить("PercentOfAutomaticDiscount");
	СтруктураСтроки.Вставить("PercentOfManualDiscount");
	СтруктураСтроки.Вставить("VATRate");
	СтруктураСтроки.Вставить("Amount");
	СтруктураСтроки.Вставить("AmountOfAutomaticDiscount");
	СтруктураСтроки.Вставить("TotalAmount");
	СтруктураСтроки.Вставить("VATAmount");
	СтруктураСтроки.Вставить("AmountOfManualDiscount");
	СтруктураСтроки.Вставить("Package");
	СтруктураСтроки.Вставить("Variant");
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру промокодов для заполнения параметров расчета скидок сервером лояльности
//
// Возвращаемое значение:
//  Структура:
//		*Promocode - Строка
//		*PromocodeDiscountUID - Строка
//		*PromocodeUID - Строка
//
Функция СтруктураПромокодовДляРасчетаСкидок() Экспорт
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Promocode");
	СтруктураСтроки.Вставить("PromocodeDiscountUID");
	СтруктураСтроки.Вставить("PromocodeUID");
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру выбранной управляемой скидки для заполнения параметров расчета скидок сервером лояльности
//
// Возвращаемое значение:
//  Структура:
//		*ControlledDiscount - Строка
//		*ControlledDiscountUID - Строка
//		*LineUID - Строка
//		*KeyRelation - Число
//
Функция СтруктураВыбраннойУправляемойСкидки() Экспорт
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ControlledDiscount");
	СтруктураСтроки.Вставить("ControlledDiscountUID");
	СтруктураСтроки.Вставить("LineUID");
	СтруктураСтроки.Вставить("KeyRelation");
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру ссылки для передаче серверу лояльности
//
// Параметры:
//  Ссылка - Любая ссылка
//
// Возвращаемое значение:
//  Структура:
//		*Ref - Строковое представление уникального идентификатора ссылки,
//		*Name - Строковое представление ссылки
//
Функция ПолучитьСтруктуруСсылки(Ссылка) Экспорт
	
	СтруктураСсылки = Новый Структура;
	СтруктураСсылки.Вставить("Ref");	//Строковое представление уникального идентификатора ссылки
	СтруктураСсылки.Вставить("Name");	//Строковое представление ссылки
	
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьСтруктуруСсылки(СтруктураСсылки, Ссылка);
	
	Возврат СтруктураСсылки;
	
КонецФункции

// Возвращает результат обработки данных из ответа по умолчанию 
//
// Возвращаемое значение:
//  Структура:
//		*ВыполнениеУспешно - Булево
//		*Комментарий - Строка - дополнительная информация о состоянии выполнения
//
Функция РезультатОбработкиДанныхПоУмолчанию() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ВыполнениеУспешно", Ложь);
	Результат.Вставить("Комментарий", НСтр("ru = ''"));
	
	Возврат Результат;
	
КонецФункции

// Метод для обработки JSON
//
// Параметры:
//  СтрокаJSON - Строка - исходные данные в формате JSON
//  ДанныеОтвета - Структура, Неопределено - результат разбора ответа
//
Процедура ОбработатьJSON(СтрокаJSON, ДанныеОтвета) Экспорт
	
	Попытка
		
		#Если ВебКлиент Тогда
			СерверЛояльностиПолучательДанныхВызовСервера.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		#Иначе
			ЧтениеОтвета = Новый ЧтениеJSON;
			ЧтениеОтвета.УстановитьСтроку(СтрокаJSON);
			ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета);
		#КонецЕсли
		
	Исключение
		
		КодОсновногоЯзыка = Неопределено;
		СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьКодОсновногоЯзыка(КодОсновногоЯзыка);
		ИмяСобытия = НСтр("ru = 'Попытка разбора ответа от сервера лояльности'", КодОсновногоЯзыка);
		
		ЛокализованноеСообщение = НСтр("ru = 'Ошибка разбора JSON, возможно, получено служебное сообщение о недоступности сервера лояльности.'");
		СерверЛояльностиПолучательДанныхВызовСервера.ЗаписатьСобытияВЖурналРегистрации(ИмяСобытия, ЛокализованноеСообщение);
		
	КонецПопытки;
		
КонецПроцедуры

// Заполняет список управляемых скидок
//
// Параметры:
//  ИспользоватьСерверЛояльностиПолучательДанных - Булево - признак использования сервера лояльности
//  ТаблицаУправляемыхСкидок - ТаблицаЗначений - возвращаемое значение
//
Процедура ЗаполнитьТаблицуУправляемыхСкидок(ИспользоватьСерверЛояльностиПолучательДанных, ТаблицаУправляемыхСкидок) Экспорт
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		Возврат;
	Иначе
		СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьТаблицуУправляемыхСкидок(ТаблицаУправляемыхСкидок);
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыЗапросовСервераЛояльности

// Возвращает структуру запроса ping для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаПроверитьПодключениеКСерверуЛояльности(ЗначенияПараметровЗапроса) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "ping";
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ПолучитьБонусыКлиента для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаПолучитьБонусыКлиента(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "getclientbonuses";
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаПолучитьБонусыКлиента(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса РазблокироватьБонусыКлиента для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаРазблокироватьБонусыКлиента(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "POST";
	ПараметрыЗапроса.Ресурс = "unlockclientbonuses";
	
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаРазблокироватьБонусыКлиента(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса СписатьБонусыКлиента для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаСписатьБонусыКлиента(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "POST";
	ПараметрыЗапроса.Ресурс = "writeoffclientbonuses";
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаСписатьБонусыКлиента(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ПолучитьОборотыПродаж для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаПолучитьОборотыПродаж(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "salesturnover";
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаПолучитьБонусыКлиента(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ВыдатьКартуКлиенту для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаВыдатьКартуКлиенту(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "POST";
	ПараметрыЗапроса.Ресурс = "issueclientcard";
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	ПараметрыМетода.Вставить("Client");
	
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаВыдатьКартуКлиенту(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ИнформацияОЗапретахПродаж для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаДанныеЗапретовРедактирования(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "salesrestrictionsinfo";
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаДанныеЗапретовРедактирования(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ПолучитьДанныеПодарочногоСертификата для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаПолучитьДанныеПодарочногоСертификата(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "getgiftcardinfo";
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаПолучитьДанныеПодарочногоСертификата(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса РазблокироватьПодарочныйСертификат для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаРазблокироватьПодарочныйСертификат(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "POST";
	ПараметрыЗапроса.Ресурс = "unlockgiftcard";
	
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаРазблокироватьПодарочныйСертификат(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции 


// Возвращает структуру запроса ПолучитьДанныеПромокода для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаПолучитьДанныеПромокода(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "promocodeinfo";
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаПолучитьДанныеПромокода(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса РазблокироватьПромокод для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаРазблокироватьПромокод(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "POST";
	ПараметрыЗапроса.Ресурс = "unlockpromocode";
	
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаРазблокироватьПромокод(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ПогаситьПромокод для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаПогаситьПромокод(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "POST";
	ПараметрыЗапроса.Ресурс = "redeempromocode";
	
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаПогаситьПромокод(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса АктивироватьПромокод для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаАктивироватьПромокод(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "POST";
	ПараметрыЗапроса.Ресурс = "activatepromocode";
	
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаАктивироватьПромокод(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса СписатьПодарочныйСертификат для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаСписатьПодарочныйСертификат(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "POST";
	ПараметрыЗапроса.Ресурс = "writeoffgiftcard";
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	ПараметрыМетода.Вставить("GiftCardWriteOffAmount");
	
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаСписатьПодарочныйСертификат(ПараметрыМетода, ЗначенияПараметровМетода);
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ИспользоватьАвтоматическиеСкидки для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаИспользоватьАвтоматическиеСкидки(ЗначенияПараметровЗапроса) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "useautomaticdiscounts";
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса РассчитатьАвтоматическиеСкидки для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. СтруктураПараметровРасчетаСкидок()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаРассчитатьАвтоматическиеСкидки(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "calculatediscounts";
	
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	СтруктураПараметровРасчетаСкидок = СтруктураПараметровРасчетаСкидок();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьСтруктуруПараметровРасчетаСкидок(СтруктураПараметровРасчетаСкидок, ЗначенияПараметровМетода);

	#Если ВебКлиент Тогда
		СериализованнаяСтруктураПараметров = СерверЛояльностиПолучательДанныхВызовСервера.СериализоватьСтруктуруПараметров(СтруктураПараметровРасчетаСкидок);
	#Иначе
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураПараметровРасчетаСкидок);
		СериализованнаяСтруктураПараметров = СтруктураОтветаJSON.Закрыть();
	#КонецЕсли
	
	ПараметрыЗапроса.ТелоЗапроса = СериализованнаяСтруктураПараметров;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ПолучитьТаблицуУправляемыхСкидок для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаПолучитьТаблицуУправляемыхСкидок(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "getcontrolleddiscountslist";
	ПараметрыМетода = ПараметрыМетодовБонуснойПодсистемы();
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ПолучитьОстатки для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. СтруктураПараметровПолученияОстатков()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаПолучитьОстатки(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "getleftovers";
	
	СтруктураПараметровПолученияОстатков = СтруктураПараметровПолученияОстатков();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыЗапросаПолучитьОстатки(СтруктураПараметровПолученияОстатков, ЗначенияПараметровМетода);
	
	#Если ВебКлиент Тогда
		СериализованнаяСтруктураПараметров = СерверЛояльностиПолучательДанныхВызовСервера.СериализоватьСтруктуруПараметров(СтруктураПараметровПолученияОстатков);
	#Иначе
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураПараметровПолученияОстатков);
		СериализованнаяСтруктураПараметров = СтруктураОтветаJSON.Закрыть();
	#КонецЕсли
	
	ПараметрыЗапроса.ТелоЗапроса = СериализованнаяСтруктураПараметров;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса НайтиКартуКлиента для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаНайтиКартуКлиента(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "findclientcard";
	ПараметрыЗапроса.ПараметрыМетода = ЗначенияПараметровМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает структуру запроса ПолучитьВидыКарт для сервера лояльности
//
// Параметры:
//  ЗначенияПараметровЗапроса - Структура - Структура для заполнения параметров запроса к серверу см. ПараметрыЗапросаКСерверу()
//  ЗначенияПараметровМетода - Структура - Структура для заполнения параметров метода запроса к серверу см. ПараметрыМетодовБонуснойПодсистемы()
//
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСерверу
//
Функция ПараметрыЗапросаПолучитьВидыКарт(ЗначенияПараметровЗапроса, ЗначенияПараметровМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСерверу();
	СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьПараметрыСервераЛояльности(ПараметрыЗапроса, ЗначенияПараметровЗапроса);
	
	ПараметрыЗапроса.ТипЗапроса = "GET";
	ПараметрыЗапроса.Ресурс = "getcardtypes";
	ПараметрыМетода = ЗначенияПараметровМетода;
	ПараметрыЗапроса.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет параметры метода в ресурс метода 
//
// Параметры:
//  Ресурс - Строка - ресурс метода, имя конечной точки для обращения
//  ПараметрыВыполненияМетода - Структура - исходные данные параметров метода
//
Процедура ДобавитьПараметрыВРесурс(Ресурс, ПараметрыВыполненияМетода)
	
	Если ЗначениеЗаполнено(Ресурс)	И ЗначениеЗаполнено(ПараметрыВыполненияМетода)
		И ТипЗнч(ПараметрыВыполненияМетода) = Тип("Структура") Тогда
	
		ПараметрыМетодаСтрокой = "?";
		
		Для каждого Параметр Из ПараметрыВыполненияМетода Цикл
		
			ОбъединяющийСимвол = ?(СтрЗаканчиваетсяНа(ПараметрыМетодаСтрокой, "?"),
				"", "&");
			ПараметрыМетодаСтрокой = СтрШаблон("%1%2%3=%4",
				ПараметрыМетодаСтрокой, ОбъединяющийСимвол, Параметр.Ключ, Параметр.Значение);
		
		КонецЦикла;
		
		Ресурс = СтрШаблон("/%1/%2", Ресурс, ПараметрыМетодаСтрокой);

	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров подключения к http-сервису
//
// Возвращаемое значение:
//  Структура:
//		*ЭтоЗащищенноеСоединение - Булево
//		*ПортПодключения - Число
//		*АдресСервера - Строка
//		*ИмяСервиса - Строка
//		*ОшибкаСтроки - Булево
//		*Используется1СЛинк - Булево
//
Функция СтруктураПараметровПодключения()
	
	СтруктураПараметровПодключения = Новый Структура;
	СтруктураПараметровПодключения.Вставить("ЭтоЗащищенноеСоединение", Ложь);
	СтруктураПараметровПодключения.Вставить("ПортПодключения", 80);
	СтруктураПараметровПодключения.Вставить("АдресСервера", "");
	СтруктураПараметровПодключения.Вставить("ИмяСервиса", "");
	СтруктураПараметровПодключения.Вставить("ОшибкаСтроки", Ложь);
	СтруктураПараметровПодключения.Вставить("Используется1СЛинк", Ложь);
	
	Возврат СтруктураПараметровПодключения;
	
КонецФункции

#КонецОбласти
