
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура НастроитьИнтерфейсРежимаКассыСамообслуживания(Форма) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаДанныеДляТекущейСтроки, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.СкидкаНаЧек, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ОтложитьЧек, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.КоманднаяПанельРежим, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.КоманднаяПанельЕще, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.Каталог, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.НайтиВЧеке, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.НайтиПоШтрихкодуКСО, Истина);
	
	УстановитьДоступностьЭлементаФормы(ЭлементыФормы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(ЭлементыФормы.ОтложитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(ЭлементыФормы.КоманднаяПанельРежим, Ложь);
	УстановитьДоступностьЭлементаФормы(ЭлементыФормы.КоманднаяПанельЕще, Ложь);
	УстановитьДоступностьЭлементаФормы(ЭлементыФормы.ГруппаДанныеДляТекущейСтроки, Ложь);
	
	УстановитьДоступностьЭлементаФормы(ЭлементыФормы.ТекущийТоварЦенаИзКарточки, Ложь);
	УстановитьДоступностьЭлементаФормы(ЭлементыФормы.ТекущийТоварКоличество, Ложь);
	УстановитьДоступностьЭлементаФормы(ЭлементыФормы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаВидОплатыПредоплата, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаРазделВыдачиНаличных, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаВидОплатыЗачетАванса, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаВидОплатыНСПК, Ложь);
	
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ОтменаРасчетаСкидок, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаВидОплатыВРассрочку, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаРазделДенежныйЯщик, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаВидОплатыКредитом, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаВидОплатыБезнал, Ложь);
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ГруппаЗаменаТоваров, Ложь);
	
	ПараметрыПлиточногоИнтерфейса = ПараметрыПлиточногоИнтерфейса();
	УстановитьДоступностьЭлементаФормы(ЭлементыФормы.УдалитьЧек, Истина);
	Если Форма.Объект.Товары.Количество() = 0 Тогда
		ЭлементыФормы.УдалитьЧек.Картинка = БиблиотекаКартинок.ЗавершитьРаботу;
		ЭлементыФормы.УдалитьЧекРасширеннаяПодсказка.Заголовок = НСтр("ru='Завершить работу'");
		ЭлементыФормы.УдалитьЧек.Отображение = ОтображениеКнопки.Картинка;
		УстановитьВидимостьЭлементаФормы(ЭлементыФормы.УдалитьЧек, Ложь);
		ЭлементыФормы.УдалитьЧек.Ширина = ПараметрыПлиточногоИнтерфейса.ШиринаКоманды;
	Иначе
		ЭлементыФормы.УдалитьЧек.Картинка = БиблиотекаКартинок.РМКНоваяПродажа24;
		ЭлементыФормы.УдалитьЧекРасширеннаяПодсказка.Заголовок = НСтр("ru='Начать новую продажу'");
		ЭлементыФормы.УдалитьЧек.Отображение = ОтображениеКнопки.КартинкаИТекст;
		УстановитьВидимостьЭлементаФормы(ЭлементыФормы.УдалитьЧек, Истина);
		ЭлементыФормы.УдалитьЧек.Ширина = ПараметрыПлиточногоИнтерфейса.ШиринаКомандыСНадписью;
	КонецЕсли;
	
	ЭлементыФормы.ЗакрытьФормуДанныеПокупателя.Заголовок = НСтр("ru = 'Вернуться к покупке'");
	
	Форма.Элементы.РежимПанелиДанныеПокупателя.СписокВыбора.Очистить();
	Форма.Элементы.РежимПанелиДанныеПокупателя.СписокВыбора.Добавить(0, НСтр("ru='Поиск карты'"));
	Форма.Элементы.РежимПанелиДанныеПокупателя.СписокВыбора.Добавить(2, НСтр("ru='Отправка чека'"));
	
	УстановитьВидимостьЭлементаФормы(ЭлементыФормы.ВыбратьКонтрагента, Ложь);
	
	УстановитьПараметрыЭлементовКСО(ЭлементыФормы.ГруппаПанельДействий);   
	УстановитьПараметрыЭлементовКСО(ЭлементыФормы.ГруппаПлатежнаяСистемаКоманднаяПанель);
	УстановитьПараметрыЭлементовКСО(ЭлементыФормы.ГруппаЗаголовокПлатежнаяСистема);
	
	ЭлементыФормы.ПодтвердитьВозраст.Картинка = БиблиотекаКартинок.ПодтверждениеДействияРМК;
	ЭлементыФормы.ОпровергнутьВозраст.Картинка = БиблиотекаКартинок.ОтказОтДействияРМК;
	
	ЭлементыФормы.ПродолжитьРаботуСЧеком.Картинка = БиблиотекаКартинок.ПодтверждениеДействияРМК;
	ЭлементыФормы.УдалитьЧекИзФормыЗапретаПродажи.Картинка = БиблиотекаКартинок.ОтказОтДействияРМК;
	
КонецПроцедуры

Процедура УстановитьВидимостьГруппыОперации(Элементы) Экспорт
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	Элементы.ГруппаУправления.ТекущаяСтраница = Элементы.ГруппаСтраницаОперации;
	
КонецПроцедуры

Функция ПараметрыРазмеровКомандУправленияЧекомДляКСО() Экспорт
	
	ПараметрыИнтерфейсаКСО = ПараметрыИнтерфейсаКСО();
	ПараметрыПлиточногоИнтерфейса = ПараметрыПлиточногоИнтерфейса();
	ПараметрыРазмеров = Новый Структура;
	ПараметрыРазмеров.Вставить("ВысотаКоманды", ПараметрыИнтерфейсаКСО.ВысотаКоманды);
	ПараметрыРазмеров.Вставить("ШиринаКоманды", ПараметрыИнтерфейсаКСО.ШиринаКоманды);
	ПараметрыРазмеров.Вставить("ВысотаКомандыОперации", ПараметрыПлиточногоИнтерфейса.ВысотаКоманды);
	ПараметрыРазмеров.Вставить("ШиринаКомандыОперации", ПараметрыПлиточногоИнтерфейса.ШиринаКоманды);
	
	Возврат ПараметрыРазмеров;
	
КонецФункции

// Настраивает размеры команд управления составом чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ПараметрыРазмеровКоманд - структура:
//		* ВысотаКоманды - Число,
//		* ШиринаКоманды - Число,
//		* ВысотаКомандыОперации - Число,
//		* ШиринаКомандыОперации - Число.
//  Инициализация - Булево, устанавливать размеры команд, только при инициализации формы.
//
Процедура НастроитьРазмерКомандУправленияСоставомЧека(Форма, ПараметрыРазмеровКоманд, Инициализация = Ложь) Экспорт
	
	ЭлементыФормы = Форма.Элементы;

	ВысотаКомандыОперации = ПараметрыРазмеровКоманд.ВысотаКомандыОперации;
	ШиринаКомандыОперации = ПараметрыРазмеровКоманд.ШиринаКомандыОперации;
	
	ЭлементыФормы.УдалитьТовар.Высота = ПараметрыРазмеровКоманд.ВысотаКоманды;
	ЭлементыФормы.УдалитьТовар.Ширина = ПараметрыРазмеровКоманд.ШиринаКоманды;
	Если Инициализация Тогда
		ЭлементыФормы.ПоказатьОстатки.Высота = ПараметрыРазмеровКоманд.ВысотаКоманды;
		ЭлементыФормы.ПоказатьОстатки.Ширина = ПараметрыРазмеровКоманд.ШиринаКоманды;
	КонецЕсли;
	ЭлементыФормы.ТекущийТоварУменьшитьКоличество.Высота = ПараметрыРазмеровКоманд.ВысотаКоманды;
	ЭлементыФормы.ТекущийТоварУменьшитьКоличество.Ширина = ПараметрыРазмеровКоманд.ШиринаКоманды;
	ЭлементыФормы.ТекущийТоварУвеличитьКоличество.Высота = ПараметрыРазмеровКоманд.ВысотаКоманды;
	ЭлементыФормы.ТекущийТоварУвеличитьКоличество.Ширина = ПараметрыРазмеровКоманд.ШиринаКоманды;
	ЭлементыФормы.ПолучитьВес.Высота = ПараметрыРазмеровКоманд.ВысотаКоманды;
	ЭлементыФормы.ПолучитьВес.Ширина = ПараметрыРазмеровКоманд.ШиринаКоманды;
	ЭлементыФормы.УдалитьЧек.Высота = ВысотаКомандыОперации;
	ЭлементыФормы.УдалитьЧек.Ширина = ?(Форма.РежимКассыСамообслуживания,
		ПараметрыРазмеровКоманд.ШиринаКомандыСНадписью, ШиринаКомандыОперации);
	ЭлементыФормы.ОткрытьПанельИзбранныхТоваров.Высота = ВысотаКомандыОперации;
	ЭлементыФормы.ОткрытьПанельИзбранныхТоваров.Ширина = ШиринаКомандыОперации;
	
КонецПроцедуры

Процедура НастроитьРазмерыКомандВРежимеКассыСамообслуживания(Форма) Экспорт
	
	ПараметрыИнтерфейсаКСО = ПараметрыИнтерфейсаКСО();
	ПараметрыПлиточногоИнтерфейса = ПараметрыПлиточногоИнтерфейса();
	ВысотаКоманд = ПараметрыИнтерфейсаКСО.ВысотаКоманды;
	ШиринаКоманд = ПараметрыИнтерфейсаКСО.ШиринаКоманды;
	ВысотаКомандГруппыОперации = ПараметрыПлиточногоИнтерфейса.ВысотаКоманды;
	ШиринаКомандГруппыОперации = ПараметрыПлиточногоИнтерфейса.ШиринаКомандыСНадписью;
	ЭлементыФормы = Форма.Элементы;
	
	УстановитьРазмерыЭлемента(ЭлементыФормы.ОткрытьПлиточныйИнтерфейсКаталога, ВысотаКомандГруппыОперации,
		ШиринаКомандГруппыОперации);
	УстановитьРазмерыЭлемента(ЭлементыФормы.НайтиПоШтрихкодуКСО, ВысотаКомандГруппыОперации, ШиринаКомандГруппыОперации);
	УстановитьРазмерыЭлемента(ЭлементыФормы.ДобавитьПакет, ВысотаКомандГруппыОперации, ШиринаКомандГруппыОперации);
	
	ЭлементыФормы.ОплатаКартой.Высота = ВысотаКоманд;
	ЭлементыФормы.ОплатаСБП.Высота = ВысотаКоманд;
	ЭлементыФормы.ОплатаСертификатом.Высота = ВысотаКоманд;
	ЭлементыФормы.ОплатаБонусами.Высота = ВысотаКоманд;
	ЭлементыФормы.ОтменитьВводКарты.Высота = ВысотаКоманд;
	
КонецПроцедуры

Процедура ВывестиОшибкуОткрытияРабочегоМеста(Элементы, ТекстЗаголовка, ТекстСообщения) Экспорт

	ПараметрыИнтерфейса = ПараметрыИнтерфейсаКСО();
	ВысотаКоманд = ПараметрыИнтерфейса.ВысотаКоманды;
	ШиринаКоманд = ПараметрыИнтерфейса.ШиринаКоманды;
	
	УстановитьВидимостьГруппыОперации(Элементы);
	Элементы.УдалитьЧек.Картинка = БиблиотекаКартинок.ЗавершитьРаботу;
	Элементы.УдалитьЧек.Высота = ВысотаКоманд;
	Элементы.УдалитьЧек.Ширина = ШиринаКоманд;
	Элементы.УдалитьЧек.Отображение = ОтображениеКнопки.Картинка;
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	Для Каждого ЭлементГруппы Из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
		Если Не (ЭлементГруппы = Элементы.УдалитьЧек Или ЭлементГруппы = Элементы.Декорация1) Тогда
			УстановитьВидимостьЭлементаФормы(ЭлементГруппы, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЗавершение);
	Элементы.ЗаголовокОшибкиВхода.Заголовок = ТекстЗаголовка;
	Элементы.ТекстОшибкиВхода.Заголовок = ТекстСообщения;
	
КонецПроцедуры

Процедура УстановитьРежимРаботыПустойЧек(Форма) Экспорт
	
	Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.ЧекПустой;
	НастроитьПанельУправленияЧекомВРежимеВводаТоваров(Форма, Форма.Элементы);
	
КонецПроцедуры

Функция ЭтоЭтапРаботыСОплатой(Форма) Экспорт
	
	РезультатФункции = (Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.Оплата
		Или Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.ПереходКОплате);
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтоЭтапРаботыДоОплаты(Форма) Экспорт
	
	РезультатФункции = (Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.ЧекПустой
		Или Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.ВводТоваров);
	Возврат РезультатФункции;
	
КонецФункции

Процедура НастроитьДоступностьМаркетинговыхКомандПоЭтапуРаботыСЧеком(Форма, ЭтоОперацияПродажи) Экспорт
	
	Элементы = Форма.Элементы;
	ДоступностьЭлементов = (Не Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.Оплата);
	УстановитьДоступностьЭлементаФормы(Элементы.РассчитатьСкидки, ДоступностьЭлементов И ЭтоОперацияПродажи);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок,
		ДоступностьЭлементов И Форма.СкидкиРассчитаны И ЭтоОперацияПродажи);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаПромокоды, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.ВвестиДанныеПокупателя, Не Форма.ЭтоЧекКоррекции);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, ДоступностьЭлементов Или Форма.БонусыДоступноКОплате > 0);
	
КонецПроцедуры

Процедура НастроитьДоступностьГруппДанныхПокупателя(Форма) Экспорт
	
	ДоступностьДанных = (Не Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.Оплата);
	ДанныеКартыЗаполнены = ДанныеДисконтнойКартыЗаполнены(Форма);
	Элементы = Форма.Элементы;
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть, ДоступностьДанных);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаПоискКарты, ДоступностьДанных);
	УстановитьДоступностьЭлементаФормы(Элементы.ОсновнаяГруппаСозданиеКарты, ДоступностьДанных И Не ДанныеКартыЗаполнены);
	УстановитьДоступностьЭлементаФормы(Элементы.ОсновнаяГруппаКартаНайдена, ДоступностьДанных);
	
КонецПроцедуры

Процедура НастроитьДоступностьЭлементовФормыПриПереключенииРежима(Форма,
	ЭтоОперацияПродажи,
	НастроитьМаркетинговыеКоманды = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	ДоступностьЭлементов = (Не ЭтоЭтапРаботыСОплатой(Форма));
	НастроитьДоступностьЭлементовГруппыОперацииКромеОтложитьУдалить(Элементы, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, ДоступностьЭлементов);
	Если НастроитьМаркетинговыеКоманды Тогда
		НастроитьДоступностьМаркетинговыхКомандПоЭтапуРаботыСЧеком(Форма, ЭтоОперацияПродажи);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьДоступностьЭлементовГруппыОперацииКромеОтложитьУдалить(Элементы, ДоступностьЭлементов) Экспорт
	
	Для Каждого ЭлементГруппы Из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
		Если Не (ЭлементГруппы = Элементы.УдалитьЧек Или ЭлементГруппы = Элементы.ОтложитьЧек
				Или  ЭлементГруппы = Элементы.ВвестиКомментарийКЧеку) Тогда
			УстановитьДоступностьЭлементаФормы(ЭлементГруппы, ДоступностьЭлементов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьКнопкиВидовОплат(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Для Каждого ГруппаВидаОплат Из Элементы.ГруппаВидовОплат.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ГруппаВидаОплат) = Тип("ГруппаФормы") Тогда
			Для Каждого ЭлементПодгруппы Из ГруппаВидаОплат.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(ЭлементПодгруппы) = Тип("КнопкаФормы") И (Не ЭлементПодгруппы.Видимость) Тогда
					УстановитьВидимостьЭлементаФормы(ЭлементПодгруппы, Истина);
				КонецЕсли;
				Если ЭлементПодгруппы.Вид = ВидГруппыФормы.Страницы Тогда
					ВосстановитьПодсказки(ЭлементПодгруппы);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСБП, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЮКасса, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияУдалитьСБП, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияУдалитьЮКасса, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.Промокод, Истина);
	ДельтаШирины = ?(Форма.ВидОтображения = ПредопределенноеЗначение("Перечисление.ВидыОтображения.Увеличенный"), 1, 2);
	Элементы.СуммаОплаченоСБП.Ширина = Элементы.СуммаОплаченоНал.Ширина - ДельтаШирины;
	Элементы.СуммаОплаченоЮКасса.Ширина = Элементы.СуммаОплаченоНал.Ширина - ДельтаШирины;
	
КонецПроцедуры

Процедура СкрытьКнопкиНулевыхВидовОплат(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ОплатаНаличными,
		Элементы.ГруппаОплатаНал, Элементы.ГруппаПодсказкаОплатаНаличными, Форма.СуммаОплаченоНал);
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ОплатаКартой,
		Элементы.ГруппаОплатаКартой, Элементы.ГруппаПодсказкаОплатаКартой, Форма.СуммаОплаченоБН);
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ОплатаСБП, Элементы.ГруппаОплатаСБП, Элементы.ГруппаПодсказкаОплатаСБП, Форма.СуммаОплаченоСБП);
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ОплатаЮКасса,
		Элементы.ГруппаОплатаЮКасса, Неопределено, Форма.СуммаОплаченоЮКасса);
	
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ОплатаСертификатомНСПК,
		Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Элементы.ГруппаПодсказкаОплатаСертификатомНСПК, Форма.СуммаОплаченоСертификатамиНСПК);
	
	Если Форма.СуммаОплаченоВРассрочку = 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаПредоплата, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПодсказкаПредоплата, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.Предоплата, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПодсказкаОплатаВРассрочку, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
	ИначеЕсли Не Элементы.ГруппаОплатаПредоплата.Видимость Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.Предоплата, Ложь);
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
	КонецЕсли;
	
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ЗачетАванса,
		Элементы.ГруппаОплатаЗачетАванса, Неопределено, Форма.СуммаОплаченоЗачетАванса);
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.Безнал, Элементы.ГруппаОплатаБезнал, Неопределено, Форма.СуммаОплаченоБезнал);
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ОплатаКредитом,
		Элементы.ГруппаОплатаКредитом, Элементы.ГруппаПодсказкаОплатаКредитом, Форма.СуммаОплаченоКредитом);
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ОплатаСертификатом,
		Элементы.ГруппаОплатаСертификатом, Элементы.ГруппаПодсказкаОплатаСертификатом, Форма.СуммаОплаченоСертификатами);
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ОплатаБонусами,
		Элементы.ГруппаОплатаБонусами, Элементы.ГруппаПодсказкаОплатаБонусами, Форма.СуммаОплаченоБонусами);
	СкрытьРазделОплатыПриНеобходимости(Элементы, Элементы.ПодготовитьДанныеВыдачиНаличных,
		Элементы.ГруппаВыдачиНаличных, Неопределено, Форма.СуммаНаличныхКВыдаче);
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьДенежныйЯщикПриВыдачеНаличных, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат, Ложь);
	
	Если Форма.ТаблицаПримененныхПромокодов.Количество() = 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.Промокод, Ложь);
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияУдалитьСБП, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияУдалитьЮКасса, Ложь);
	Элементы.СуммаОплаченоСБП.Ширина = Элементы.СуммаОплаченоНал.Ширина;
	Элементы.СуммаОплаченоЮКасса.Ширина = Элементы.СуммаОплаченоНал.Ширина;
	
КонецПроцедуры

// Возвращает текущую активную группу родительской группы.
//
// Параметры:
//  ЭлементГруппа - ГруппаФормы.
//
// Возвращаемое значение:
//  АктивнаяГруппа - ГруппаФормы.
//
Функция ПолучитьТекущийСлойГруппы(ЭлементГруппа) Экспорт
	
	АктивнаяГруппа = Неопределено;
	КоличествоПотомков = ЭлементГруппа.ПодчиненныеЭлементы.Количество();
	ИндексПотомка = 0;
	Пока ИндексПотомка < КоличествоПотомков И АктивнаяГруппа = Неопределено Цикл
		ТекущийПотомок = ЭлементГруппа.ПодчиненныеЭлементы.Получить(ИндексПотомка);
		Если ТекущийПотомок.Видимость Тогда
			АктивнаяГруппа = ТекущийПотомок;
		КонецЕсли;
		ИндексПотомка = ИндексПотомка + 1;
	КонецЦикла;
	
	Возврат АктивнаяГруппа;
	
КонецФункции

// Возвращает признак, использует ли форма вместо страниц слои групп.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
// Возвращаемое значение:
//  Булево - Истина - используются слои.
//
Функция ИспользоватьСлои(Форма) Экспорт
	
	РезультатФункции = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользоватьСлои") Тогда
		РезультатФункции = (Форма.ИспользоватьСлои = Истина);
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

// Устанавливает переданную группу активной у родительской группы формы РМК
//
// Параметры:
//  ЭлементГруппа - ГруппаФормы.
//
Процедура УстановитьТекущийСлойГруппы(ЭлементГруппа) Экспорт
	
	ГруппаРодитель = ЭлементГруппа.Родитель;
	ПереключитьНаСлойГруппы(ГруппаРодитель, ЭлементГруппа);
	
КонецПроцедуры

Процедура АктивизироватьСлойГруппы(Форма, ЭлементГруппа) Экспорт
	Элементы = Форма.Элементы;
	УстановитьТекущийСлойГруппы(ЭлементГруппа);
	
	ВозвратНазадДоступен = (ЭтоЭтапРаботыСОплатой(Форма)
		Или Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.ВозвратКоррекция)
		И ((Форма.ВертикальнаяОриентация И НЕ Форма.РежимЦифровойПанели = Форма.РежимыЦифровойПанели.ДанныеПокупателя) 
			Или Форма.РежимЦифровойПанели = Форма.РежимыЦифровойПанели.Пустой)
		И ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком
		И Не ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель) = Элементы.ГруппаПроверкаНСПК;
		
	УстановитьВидимостьВозвратаВПодбор(Форма, ВозвратНазадДоступен);
	Если Не Форма.ВертикальнаяОриентация Тогда
		Если ВозвратНазадДоступен Тогда
			УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандВозвратИзПробитияЧека);
		ИначеЕсли Элементы.ГруппаКомандВозвратИзПробитияЧека.Видимость Тогда
			УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяКоманднаяПанельПустая);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьВозвратаВПодбор(Форма, ВозвратНазадДоступен) Экспорт
	Элементы = Форма.Элементы;
	Если Форма.ВертикальнаяОриентация Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВозвратВПодборИзУправления, ВозвратНазадДоступен);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВозвратВПодборИзСертификатов, ВозвратНазадДоступен);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВозвратВПодборИзПанелиНаличных, ВозвратНазадДоступен);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьВидимостьДоступныхБонусов(Элементы, ПоказыватьДоступныеБонусы) Экспорт
	УстановитьВидимостьЭлементаФормы(Элементы.ДополнительнаяГруппаКартаНайденаКонтейнер, ПоказыватьДоступныеБонусы);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнформацияБонусы, ПоказыватьДоступныеБонусы);
КонецПроцедуры

Процедура ВключитьДополнительнуюКоманднуюПанельУправленияЧеком(ЭлементГруппа) Экспорт
	
	ГруппаРодитель = ЭлементГруппа.Родитель;
	УстановитьВидимостьЭлементаФормы(ГруппаРодитель, Истина);
	ПереключитьНаСлойГруппы(ГруппаРодитель, ЭлементГруппа);
	
КонецПроцедуры

Функция РазделительДробнойЧасти() Экспорт
	Возврат Сред("" + 1.1 , 2, 1);
КонецФункции

Функция ТелефонныйКодСтраны() Экспорт
	Возврат НСтр("ru = '+7'");
КонецФункции

Функция МаскаВводаТелефона() Экспорт
	Возврат НСтр("ru = '+7 999 999 99 99'");
КонецФункции

Функция ТолькоЦифры(ИсходнаяСтрока) Экспорт
	
	РезультатФункции = "";
	ИндексСимвола = 0;
	Пока ИндексСимвола < СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, ИндексСимвола + 1, 1);
		Если СтрНайти("0123456789", ТекущийСимвол) > 0 Тогда
			РезультатФункции = РезультатФункции + ТекущийСимвол;
		КонецЕсли;
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

Функция ТелефонБезКодаСтраны(ИсходнаяСтрока) Экспорт
	
	ДлинаНомерБезКодаСтраны = 10;
	СтрокаТолькоЦифры = ТолькоЦифры(ИсходнаяСтрока);
	Если СтрДлина(СтрокаТолькоЦифры) > ДлинаНомерБезКодаСтраны Тогда
		СтрокаТолькоЦифры = Прав(СтрокаТолькоЦифры, ДлинаНомерБезКодаСтраны);
	КонецЕсли;
	Возврат СтрокаТолькоЦифры;
	
КонецФункции

Функция ПривестиЗначениеКМаскеТелефона(ИсходноеЗначение, МаскаТелефона) Экспорт
	
	РезультатФункции = ТелефонныйКодСтраны();
	ЧастьБезКодаСтраны = ОставитьЦифрыТелефонаБезКодаСтраны(ИсходноеЗначение);
	НомерСимволаМаски = СтрДлина(ТелефонныйКодСтраны()) + 1;
	ДлинаМаски = СтрДлина(МаскаТелефона);
	ДлинаЧасти = СтрДлина(ЧастьБезКодаСтраны);
	НомерСимволаЧасти = 1;
	Пока НомерСимволаМаски <= ДлинаМаски И НомерСимволаЧасти <= ДлинаЧасти Цикл
		СимволМаски = Сред(МаскаТелефона, НомерСимволаМаски, 1);
		Если СимволМаски = "9" Тогда
			СимволЦифрыТелефона = Сред(ЧастьБезКодаСтраны, НомерСимволаЧасти, 1);
			РезультатФункции = СтрШаблон("%1%2", РезультатФункции, СимволЦифрыТелефона);
			НомерСимволаЧасти = НомерСимволаЧасти + 1;
		Иначе
			РезультатФункции = СтрШаблон("%1%2", РезультатФункции, СимволМаски);
		КонецЕсли;
		НомерСимволаМаски = НомерСимволаМаски + 1;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

// Преобразует строку даты формата "dd.MM.yyyy" в массив из 8 цифр в порядке от дней до года
//
// Параметры:
//  СтрокаФорматаДаты - Строка, 10.
//
// Возвращаемое значение:
//  Массив - массив цифр даты.
//
Функция СформироватьМассивЦифрДаты(СтрокаФорматаДаты) Экспорт
	
	МассивЦифр = Новый Массив;
	ПозицияПервойТочки = 2;
	ПозицияВторойТочки = 4;
	КоличествоЦифрДаты = 8;
	Для ИндексЦифры = 1 По КоличествоЦифрДаты Цикл
		СмещениеИндекса = ?(ИндексЦифры > ПозицияВторойТочки, 2, ?(ИндексЦифры > ПозицияПервойТочки, 1, 0));
		ИндексСимвола = ИндексЦифры + СмещениеИндекса;
		ТекущийЭлементМассива = Неопределено;
		Если ИндексСимвола <= СтрДлина(СтрокаФорматаДаты) Тогда
			СимволСтроки = Сред(СтрокаФорматаДаты, ИндексСимвола, 1);
			Если СтрНайти("0123456789", СимволСтроки) > 0 Тогда
				ТекущийЭлементМассива = Число(СимволСтроки);
			КонецЕсли;
		КонецЕсли;
		МассивЦифр.Добавить(ТекущийЭлементМассива);
	КонецЦикла;
	Возврат МассивЦифр;
	
КонецФункции

Функция СформироватьКаноническуюСтрокуДатыИзМассиваЦифр(МассивЦифр) Экспорт
	
	СтрокаДатыКаноническая = "";
	Если МассивЦифрЗаполненПолностью(МассивЦифр) Тогда
		Для ИндексЭлемента = 4 По 7 Цикл
			СтрокаДатыКаноническая = СтрокаДатыКаноническая + Строка(МассивЦифр[ИндексЭлемента]);
		КонецЦикла;
		СтрокаДатыКаноническая = СтрокаДатыКаноническая + Строка(МассивЦифр[2]) + Строка(МассивЦифр[3]);
		СтрокаДатыКаноническая = СтрокаДатыКаноническая + Строка(МассивЦифр[0]) + Строка(МассивЦифр[1]);
	КонецЕсли;
	Возврат СтрокаДатыКаноническая;
	
КонецФункции

Функция МассивЦифрЗаполненПолностью(МассивЦифр) Экспорт
	
	РезультатФункции = (МассивЦифр.Количество() = 8);
	ИндексЭлемента = 0;
	Пока ИндексЭлемента < 8 И РезультатФункции Цикл
		Если МассивЦифр[ИндексЭлемента] = Неопределено Тогда
			РезультатФункции = Ложь;
		КонецЕсли;
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

Функция МассивЦифрПустой(МассивЦифр) Экспорт
	
	РезультатФункции = Истина;
	ИндексЭлемента = 0;
	Пока РезультатФункции И ИндексЭлемента < МассивЦифр.Количество() Цикл
		Если ТипЗнч(МассивЦифр[ИндексЭлемента]) = Тип("Число") Тогда
			РезультатФункции = Ложь;
		КонецЕсли;
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

// Добавляет к строковому представлению даты цифру в первую свободную позицию, если такая есть.
// Например, "27.02.19  " + "5" = "27.02.195 "
//
// Параметры:
//  ТекстВвода - Строка, 10. Строка из поля ввода даты с маской "99.99.9999",
//  Цифра - Строка, 1. Символ цифры.
//
// Возвращаемое значение:
//  Строка, 10 - Строка с представлением даты с маской "99.99.9999".
//
Функция ДобавитьЦифруКТекстуДаты(ТекстВвода, Цифра) Экспорт
	
	РезультатФункции = ТекстВвода;
	ДлинаПредставленияДаты = 10;
	ПозицияДляВставки = ПозицияПоследнейЦифрыВСтроке(ТекстВвода) + 1;
	Если ПозицияДляВставки <= ДлинаПредставленияДаты Тогда
		Если ПозицияДляВставки = 3 Или ПозицияДляВставки = 6 Тогда
			ПозицияДляВставки = ПозицияДляВставки + 1;
		КонецЕсли;
		ЛеваяЧасть = ?(ПозицияДляВставки = 1, "", Лев(ТекстВвода, ПозицияДляВставки - 1));
		ПраваяЧасть = ?(ПозицияДляВставки < ДлинаПредставленияДаты, Сред(ТекстВвода, ПозицияДляВставки + 1), "");
		РезультатФункции = ЛеваяЧасть + Цифра + ПраваяЧасть;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтоПолеДатыСМаской(ЭлементПоля) Экспорт
	
	РезультатФункции = Ложь;
	Если Не ЭлементПоля = Неопределено Тогда
		Если ЭлементПоля.Маска = МаскаВводаДаты() Тогда
			РезультатФункции = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтоПолеТелефонаСМаской(ЭлементПоля) Экспорт
	
	РезультатФункции = Ложь;
	ДлинаТелефонаБезКодаСтраны = 10;
	Если Не ЭлементПоля = Неопределено Тогда
		КодСтраны = ТелефонныйКодСтраны();
		Если СтрДлина(ЭлементПоля.Маска) > ДлинаТелефонаБезКодаСтраны И Лев(ЭлементПоля.Маска, СтрДлина(КодСтраны)) = КодСтраны Тогда
			РезультатФункции = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция ПараметрыКартыЛояльности() Экспорт
	
	ПараметрыКарты = Новый Структура();
	ПараметрыКарты.Вставить("ИдентификаторКарты", "");
	ПараметрыКарты.Вставить("КодКарты", "");
	ПараметрыКарты.Вставить("ФИО", "");
	ПараметрыКарты.Вставить("НомерТелефонаВладельцаКарты", "");
	ПараметрыКарты.Вставить("СуммаПродаж", "");
	ПараметрыКарты.Вставить("АдресЭПВладельцаКарты", "");
	ПараметрыКарты.Вставить("ДатаРождения", Дата(1, 1, 1));
	ПараметрыКарты.Вставить("ЭтоКомпания", Ложь);
	
	Возврат ПараметрыКарты;
	
КонецФункции

Функция ДанныеЛояльностиЗаполнены(Форма) Экспорт
	
	РезультатФункции = ЗначениеЗаполнено(Форма.Объект.ДисконтнаяКарта)
		Или ЗначениеЗаполнено(Форма.Объект.Контрагент)
		Или ПараметрыКартыЗаполнены(Форма.ПараметрыКартыЛояльности);
		
	Возврат РезультатФункции;
	
КонецФункции

Функция ДанныеДисконтнойКартыЗаполнены(Форма) Экспорт
	
	РезультатФункции = ЗначениеЗаполнено(Форма.Объект.ДисконтнаяКарта)
		Или ПараметрыКартыЗаполнены(Форма.ПараметрыКартыЛояльности);
		
	Возврат РезультатФункции;
	
КонецФункции

Функция СохраненТолькоНомерКартыЛояльности(ПараметрыКартыЛояльности) Экспорт
	
	РезультатФункции = Ложь;

	Если ТипЗнч(ПараметрыКартыЛояльности) = Тип("Структура") И ЗначениеЗаполнено(ПараметрыКартыЛояльности.КодКарты)
			И Не ЗначениеЗаполнено(ПараметрыКартыЛояльности.ИдентификаторКарты) Тогда
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолученИдентификаторКартыЛояльности(ПараметрыКартыЛояльности) Экспорт
	
	РезультатФункции = Ложь;
	Если ТипЗнч(ПараметрыКартыЛояльности) = Тип("Структура")
			И ЗначениеЗаполнено(ПараметрыКартыЛояльности.ИдентификаторКарты) Тогда
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция ПараметрыКартыЗаполнены(ПараметрыКартыЛояльности) Экспорт
	
	РезультатФункции = Ложь;
	
	Если ТипЗнч(ПараметрыКартыЛояльности) = Тип("Структура")
		И (ЗначениеЗаполнено(ПараметрыКартыЛояльности.ИдентификаторКарты)
		Или ЗначениеЗаполнено(ПараметрыКартыЛояльности.КодКарты)) Тогда
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОтобразитьИнформациюОБонусныхБаллах(Форма, ДанныеБонусов) Экспорт
	
	Элементы = Форма.Элементы;
	УстановитьВидимостьДоступныхБонусов(Элементы, Истина);
		
	Форма.КоличествоБонусов = ДанныеБонусов.BonusCount;
	Форма.БонусыДоступноКОплате = Форма.КоличествоБонусов * ?(ДанныеБонусов.BonusRate = 0, 1, ДанныеБонусов.BonusRate);
	Форма.ПроцентОплатыБонусами = ДанныеБонусов.PaymentPercent;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьБонусами,
		Форма.КоличествоБонусов > 0 И Элементы.ГруппаОплатаБонусами.Доступность);
		
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Бонусами можно оплатить до %1%% от суммы чека'"), Форма.ПроцентОплатыБонусами);
	Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = ТекстСообщения;
	Элементы.ИнформацияМожноОплатитьБонусами.Заголовок = ТекстСообщения;
		
КонецПроцедуры


Процедура НастроитьДоступностьСозданияКарты(Форма, ДоступенВводКарты, ДоступенВводКонтрагента) Экспорт

	Элементы = Форма.Элементы;
	Если ДоступенВводКарты Тогда
		Элементы.ОсновнаяГруппаСозданиеКарты.Доступность = Истина;
		Элементы.ГруппаНоваяКартаТелефон.Доступность = ДоступенВводКонтрагента;
		Элементы.ГруппаНоваяКартаФИО.Доступность = ДоступенВводКонтрагента;
		Элементы.ГруппаНоваяКартаПочта.Доступность = ДоступенВводКонтрагента;
		Элементы.ГруппаНоваяКартаДатаРождения.Доступность = ДоступенВводКонтрагента;
	Иначе
		Элементы.ОсновнаяГруппаСозданиеКарты.Доступность = Ложь;
	КонецЕсли;
	УстановитьМаскуВводаДатыРожденияНовойКарты(Форма);
	
КонецПроцедуры

Процедура УстановитьМаскуВводаДатыРожденияНовойКарты(Форма) Экспорт

	МаскаДата = "";
	Элементы = Форма.Элементы;
	Если Элементы.ОсновнаяГруппаСозданиеКарты.Доступность И Элементы.ГруппаНоваяКартаДатаРождения.Доступность
		И Элементы.ГруппаРеквизитовКарты.Доступность Тогда
		
		МаскаДаты = МаскаВводаДаты();
		
	КонецЕсли;
	Элементы.НоваяКартаДатаРождения.Маска = МаскаДаты;
	
КонецПроцедуры

Функция ПреобразоватьДатуИзСтроковогоПредставления(ТекстДаты) Экспорт
	
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата");
	ДатаРожденияКлиента = Дата(1, 1, 1);
	МассивЦифрДаты = СформироватьМассивЦифрДаты(ТекстДаты);
	Если МассивЦифрЗаполненПолностью(МассивЦифрДаты) Тогда
		ДатаКаноническаяСтрока = СформироватьКаноническуюСтрокуДатыИзМассиваЦифр(МассивЦифрДаты);
		ДатаРожденияКлиента = ОписаниеТипаДата.ПривестиЗначение(ДатаКаноническаяСтрока);
	КонецЕсли;
	Возврат ДатаРожденияКлиента;
	
КонецФункции

Процедура ОтобразитьИнформациюОПродажах(Форма, ДанныеПродаж) Экспорт
	
	Элементы = Форма.Элементы;

	Форма.НайденнаяКартаСуммаПродаж = Формат(ДанныеПродаж.SellCount,"ЧДЦ=2");
		
КонецПроцедуры

Функция ЭтоЭтапРаботыСОплатойИлиКоррекцией(Форма) Экспорт
	
	РезультатФункции = (Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.Оплата
		Или Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.ПереходКОплате
		Или Форма.РежимРаботыСЧеком = Форма.РежимыРаботыСЧеком.ВозвратКоррекция);
	Возврат РезультатФункции;
	
КонецФункции

Процедура ВосстановитьПодсказки(ЭлементПодгруппы) Экспорт
	Для Каждого ЭлементСтраницы Из ЭлементПодгруппы.ПодчиненныеЭлементы Цикл
		Если Найти(ЭлементСтраницы.Имя, "Подсказка") > 0 Тогда
			УстановитьВидимостьЭлементаФормы(ЭлементСтраницы, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПредставлениеПустойКлавиши() Экспорт
	
	Возврат НСтр("ru = 'Нет'");
	
КонецФункции

Функция ИсточникиДанныхДляПлитки() Экспорт
	
	ИсточникиДанныхПлитки = Новый Структура;
	ИсточникиДанныхПлитки.Вставить("Остальное", 0);
	ИсточникиДанныхПлитки.Вставить("Палитра", 1);
	ИсточникиДанныхПлитки.Вставить("Избранное", 2);
	
	Возврат ИсточникиДанныхПлитки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МаскаВводаДаты()
	Возврат НСтр("ru = '99.99.9999'");
КонецФункции

Функция ОставитьЦифрыТелефонаБезКодаСтраны(ИсходноеЗначение)
	
	ДлинаНомераТелефона = 10;
	РезультатФункции = ИсходноеЗначение;
	Если СтрНайти(РезультатФункции, ТелефонныйКодСтраны()) = 1 Тогда
		РезультатФункции = Сред(РезультатФункции, СтрДлина(ТелефонныйКодСтраны()) + 1);
		РезультатФункции = ТолькоЦифры(РезультатФункции);
	Иначе
		РезультатФункции = ТолькоЦифры(РезультатФункции);
		Если СтрДлина(РезультатФункции) > ДлинаНомераТелефона Тогда
			РезультатФункции = Прав(РезультатФункции, ДлинаНомераТелефона);
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция ПозицияПоследнейЦифрыВСтроке(ПроверяемаяСтрока)
	
	РезультатФункции = 0;
	
	КоличествоСимволов = СтрДлина(ПроверяемаяСтрока);
	ИндексСимвола = КоличествоСимволов;
	Пока ИндексСимвола > 0 И РезультатФункции = 0 Цикл
		ПроверяемыйСимвол = Сред(ПроверяемаяСтрока, ИндексСимвола, 1);
		Если СтрНайти("0123456789", ПроверяемыйСимвол) > 0 Тогда
			РезультатФункции = ИндексСимвола;
		КонецЕсли;
		ИндексСимвола = ИндексСимвола - 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПараметрыИнтерфейсаКСО()
	
	ПараметрыИнтерфейса = Новый Структура;
	ПараметрыИнтерфейса.Вставить("ВысотаКоманды", 2);
	ПараметрыИнтерфейса.Вставить("ШиринаКоманды", 5);
	ПараметрыИнтерфейса.Вставить("ШиринаКомандыСНадписью", 13);
	
	Возврат ПараметрыИнтерфейса;
	
КонецФункции

Функция ПараметрыПлиточногоИнтерфейса() Экспорт
	
	ПараметрыИнтерфейса = Новый Структура;
	ПараметрыИнтерфейса.Вставить("ВысотаКоманды", 3);
	ПараметрыИнтерфейса.Вставить("ШиринаКоманды", 6);
	ПараметрыИнтерфейса.Вставить("ШиринаКомандыСНадписью", 13);
	
	Возврат ПараметрыИнтерфейса;
	
КонецФункции

Процедура НастроитьПанельУправленияЧекомВРежимеВводаТоваров(Форма, Элементы)
	
	УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельВидовОплат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСлоевПраваяНижняяВспомогательнаяПанель, Истина);
	УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяИнформацияПоЧеку);
	АктивизироватьСлойГруппы(Форма, Элементы.ГруппаКомандПереходаКОплате);
	
КонецПроцедуры

Процедура СкрытьРазделОплатыПриНеобходимости(Элементы, КнопкаРаздела, ГруппаОплатыРаздела, ГруппаПодсказкаРаздела, РеквизитРаздела)
	Если РеквизитРаздела = 0 Тогда
		УстановитьВидимостьЭлементаФормы(ГруппаОплатыРаздела, Ложь);
		УстановитьВидимостьЭлементаФормы(КнопкаРаздела, Ложь);
		Если ГруппаПодсказкаРаздела <> Неопределено Тогда
			УстановитьВидимостьЭлементаФормы(ГруппаПодсказкаРаздела, Ложь);
		КонецЕсли;
	Иначе
		Если (Элементы.ГруппаОплатаСБП = ГруппаОплатыРаздела Или Элементы.ГруппаОплатаЮКасса = ГруппаОплатыРаздела)
			И (Не ГруппаОплатыРаздела.Видимость) Тогда
			
			УстановитьВидимостьЭлементаФормы(ГруппаОплатыРаздела, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПереключитьНаСлойГруппы(ГруппаРодитель, ЭлементГруппа)
	Для Каждого СлойГруппы Из ГруппаРодитель.ПодчиненныеЭлементы Цикл
		УстановитьВидимостьЭлементаФормы(СлойГруппы, (ЭлементГруппа = СлойГруппы));
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьВидимостьЭлементаФормы(Элемент, Видимость)
	Элемент.Видимость = Видимость;
КонецПроцедуры

Процедура УстановитьДоступностьЭлементаФормы(Элемент, Доступность)
	Элемент.Доступность = Доступность;
КонецПроцедуры

Процедура УстановитьРазмерыЭлемента(ЭлементФормы, Высота, Ширина)
	
	ЭлементФормы.Высота = Высота;
	ЭлементФормы.Ширина = Ширина;
	
КонецПроцедуры

Процедура УстановитьПараметрыЭлементовКСО(ГруппаПанельДействий)
	
	Для Каждого ПодчиненнаяГруппа Из ГруппаПанельДействий.ПодчиненныеЭлементы Цикл
		
		Если СтрНачинаетсяС(ПодчиненнаяГруппа.Имя, "НЕКСО") Тогда
			ПодчиненнаяГруппа.Видимость = Ложь;
		ИначеЕсли СтрНачинаетсяС(ПодчиненнаяГруппа.Имя, "КСО") Тогда
			ПодчиненнаяГруппа.Видимость = Истина;
		ИначеЕсли СтрНачинаетсяС(ПодчиненнаяГруппа.Имя, "Группа") Тогда
			УстановитьПараметрыЭлементовКСО(ПодчиненнаяГруппа);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
