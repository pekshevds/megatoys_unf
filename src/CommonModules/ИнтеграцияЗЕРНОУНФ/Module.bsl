#Область ИнтеграцияЗЕРНОПереопределяемый

// См. ИнтеграцияЗЕРНОПереопределяемый.ОбработкаЗаполненияДокумента
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокументаИС = ДокументОбъект.Ссылка.Метаданные();
	
	Основание = Неопределено;
	ФильтрВидПродукции = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДанныеЗаполнения.Свойство("Основание", Основание);
		ДанныеЗаполнения.Свойство("Организация", ДокументОбъект.Организация);
		Если ДанныеЗаполнения.Свойство("ИмяФильтра") И ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
		КонецЕсли;
	Иначе
		Основание = ДанныеЗаполнения;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидПродукции", МетаданныеДокументаИС)
			И ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
			ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Основание) Или Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Основание)) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокументаОснования = Основание.Метаданные();
	
	ПараметрыФормированияЗапроса = ИнтеграцияИСУНФ.ПараметрыФормированияЗапросаЗаполнения(МетаданныеДокументаОснования, МетаданныеДокументаИС);
	ПараметрыФормированияЗапроса.ВключатьОпциональныеПоля = Истина;
	Если ЗначениеЗаполнено(ФильтрВидПродукции) Тогда
		ПараметрыФормированияЗапроса.ОтборНоменклатуры = ИнтеграцияИСУНФ.ОпределениеВидаПродукцииТекстаЗапроса("СправочникНоменклатура", ФильтрВидПродукции);
	КонецЕсли;
	
	ЗаполнитьПараметрыФормированияЗапроса(ПараметрыФормированияЗапроса);
	
	ПараметрыАдресногоПоля = Новый Структура;
	ПараметрыАдресногоПоля.Вставить("ИмяАдресногоПоля", "");
	ПараметрыАдресногоПоля.Вставить("ИмяЭлемента", "");
	ПараметрыАдресногоПоля.Вставить("ИмяЭлементаСтрокой", "");
	
	ТипОбъекта = ТипЗнч(ДокументОбъект);
	ТипОснования = ТипЗнч(Основание);
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВнесениеСведенийОСобранномУрожаеЗЕРНО") Тогда
		
		ПараметрыАдресногоПоля.ИмяАдресногоПоля   = "СкладКонтрагент";
		ПараметрыАдресногоПоля.ИмяЭлемента        = "МестоХранения";
		ПараметрыАдресногоПоля.ИмяЭлементаСтрокой = "МестоХраненияСтрокой";
		
		Если ТипОснования = Тип("ДокументСсылка.ОприходованиеЗапасов") Тогда
			ЗаполнитьВнесениеСведенийОСобранномУрожаеЗЕРНОНаОснованииОприходованияЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СборкаЗапасов") Тогда
			ЗаполнитьВнесениеСведенийОСобранномУрожаеЗЕРНОНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОформлениеСДИЗЗЕРНО") Тогда
		
		ПараметрыАдресногоПоля.ИмяАдресногоПоля   = "ПунктНазначенияСопоставленныйОбъект";
		ПараметрыАдресногоПоля.ИмяЭлемента        = "ПунктНазначения";
		ПараметрыАдресногоПоля.ИмяЭлементаСтрокой = "ПунктНазначенияСтрокой";
		
		Если ТипОснования = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			ЗаполнитьОформлениеСДИЗЗЕРНОНаОснованииРасходнойНакладной(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
			ЗаполнитьОформлениеСДИЗЗЕРНОНаОснованииПеремещенияЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			ЗаполнитьОформлениеСДИЗЗЕРНОНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПогашениеСДИЗЗЕРНО") Тогда
		Если ТипОснования = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			ЗаполнитьПогашениеСДИЗЗЕРНОНаОснованииПриходнойНакладная(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеПартийЗЕРНО") Тогда
		Если ТипОснования = Тип("ДокументСсылка.КомплектацияЗапасов") Тогда
			ЗаполнитьСписаниеПартийЗЕРНОНаОснованииКомплектацииЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеЗапасов") Тогда
			ЗаполнитьСписаниеПартийЗЕРНОНаОснованииСписанияЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СборкаЗапасов") Тогда
			ЗаполнитьСписаниеПартийЗЕРНОНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ФормированиеПартийЗЕРНО") Тогда
		Если ТипОснования = Тип("ДокументСсылка.ОприходованиеЗапасов") Тогда
			ЗаполнитьФормированиеПартийЗЕРНОНаОснованииОприходованияЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ФормированиеПартийПриПроизводствеЗЕРНО") Тогда
		Если ТипОснования = Тип("ДокументСсылка.СборкаЗапасов") Тогда
			ЗаполнитьФормированиеПартийПриПроизводствеЗЕРНОНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним Вид продукции.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидПродукции", МетаданныеДокументаИС) Тогда
		Если ФильтрВидПродукции = Неопределено Тогда
			ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
		Иначе
			ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним адресные поля.
	Если ЗначениеЗаполнено(ПараметрыАдресногоПоля.ИмяАдресногоПоля) Тогда
		ДанныеАдреса = Новый Структура;
		ДанныеАдреса.Вставить("ВладелецАдреса",      ДокументОбъект[ПараметрыАдресногоПоля.ИмяАдресногоПоля]);
		ДанныеАдреса.Вставить("Адрес",               "");
		ДанныеАдреса.Вставить("ПредставлениеАдреса", "");
		СобытияФормЗЕРНОПереопределяемый.ДанныеАдресаОбъекта(ДанныеАдреса);
		
		Если ЗначениеЗаполнено(ПараметрыАдресногоПоля.ИмяЭлемента) Тогда
			ДокументОбъект[ПараметрыАдресногоПоля.ИмяЭлемента] = ДанныеАдреса.Адрес;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыАдресногоПоля.ИмяЭлементаСтрокой) Тогда
			ДокументОбъект[ПараметрыАдресногоПоля.ИмяЭлементаСтрокой] = ДанныеАдреса.ПредставлениеАдреса;
		КонецЕсли;
	КонецЕсли;
	
	// Пересчитаем реквизиты.
	ТабличнаяЧастьИС = ДокументОбъект[ПараметрыФормированияЗапроса.ИмяТабличнойЧастиТоварыИС];
	ДанныеДляПересчета = КоэффициентыЕдиницИзмеренияЗЕРНО(ТабличнаяЧастьИС);
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьИС Цикл
		
		ДанныеЕдиницыИзмерения = ДанныеДляПересчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если НЕ ДанныеЕдиницыИзмерения.КодОшибки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЕдиницыИзмерения.Коэффициент) Тогда
			СтрокаТабличнойЧасти.КоличествоЗЕРНО = СтрокаТабличнойЧасти.Количество / ДанныеЕдиницыИзмерения.Коэффициент;
		Иначе
			СтрокаТабличнойЧасти.КоличествоЗЕРНО = СтрокаТабличнойЧасти.Количество * ДанныеЕдиницыИзмерения.Вес;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСтатусовОформленияЗЕРНОПереопределяемый

// См. РасчетСтатусовОформленияИСМППереопределяемый.ПриОпределенииИменРеквизитовДляРасчетаСтатусаОформления
//
Процедура ПриОпределенииИменРеквизитовДляРасчетаСтатусаОформления(
			Знач МетаданныеДокументаОснования, Знач МетаданныеДокументаЗЕРНО, Реквизиты) Экспорт
	
	// Определим имя реквизита "Ответственный".
	Если МетаданныеДокументаОснования.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
		Реквизиты.Ответственный = "Ответственный";
	ИначеЕсли МетаданныеДокументаОснования.Реквизиты.Найти("Автор") <> Неопределено Тогда
		Реквизиты.Ответственный = "Автор";
	Иначе
		Реквизиты.Ответственный = "";
	КонецЕсли;
	
КонецПроцедуры

// См. РасчетСтатусовОформленияИСМППереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления
//
Процедура ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформления(
			Знач МетаданныеДокументаОснования, Знач МетаданныеДокументаЗЕРНО, ТекстЗапроса, ДополнительныеПараметрыЗапроса) Экспорт
	
	ПараметрыФормированияЗапроса = ИнтеграцияИСУНФ.ПараметрыФормированияЗапросаЗаполнения(МетаданныеДокументаОснования, МетаданныеДокументаЗЕРНО);
	ЗаполнитьПараметрыФормированияЗапроса(ПараметрыФормированияЗапроса);
	Если ПараметрыФормированияЗапроса.ТабличныеЧасти.Количество() Тогда
		ТекстЗапроса = ИнтеграцияИСУНФ.ТекстЗапросаТоварыДокументаОснования(ПараметрыФормированияЗапроса, ДополнительныеПараметрыЗапроса);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает сведения для пересчета единиц измерения ЗЕРНО.
//
// Параметры:
//   ДанныеСтрокЗЕРНО - Массив Из Структура - элементы массива должны содержать свойства Номенклатура.
//
// Возвращаемое значение:
//  Соответствие Из Справочникссылка.Номенклатура - ключ ссылка на номенклатуру, значение структура:
//   * КодОшибки - Число  - Код ошибки получения коэффициента:
//        0 - Нет ошибок;
//        1 - Не заполнена единица измерения в справочнике 'ЕдиницыИзмеренияВЕТИС';
//        2 - В справочнике 'Номенклатура' выключена возможность пересчета количества в соответствующую мерную единицу измерения;
//        3 - Не удалось сопоставить единицу хранения справочника 'Номенклатура' с единицей измерения  "Килограмм".
//   * Коэффициент - Число  - Коэффициент пересчета единицы измерения из "Килограмм".
Функция КоэффициентыЕдиницИзмеренияЗЕРНО(ДанныеСтрокЗЕРНО) Экспорт
	
	Если ДанныеСтрокЗЕРНО.Количество() = 0 Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	ШаблонРезультата = Новый Структура;
	ШаблонРезультата.Вставить("КодОшибки",   0);
	ШаблонРезультата.Вставить("Коэффициент", 1);
	ШаблонРезультата.Вставить("Вес",         0);
	
	Номенклатура = Новый Массив;
	Для каждого СтрокаИсточника Из ДанныеСтрокЗЕРНО Цикл
		Номенклатура.Добавить(СтрокаИсточника.Номенклатура);
	КонецЦикла;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЕдиницаИзмеренияКилограммИС.Значение КАК Упаковка,
	|	Номенклатура.НаборЕдиницИзмерения КАК НаборЕдиницИзмерения,
	|	Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	Номенклатура.ИспользоватьНаборыЕдиницИзмерения КАК ИспользоватьНаборыЕдиницИзмерения,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.Вес КАК Вес
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура,
	|	Константа.ЕдиницаИзмеренияКилограммИС КАК ЕдиницаИзмеренияКилограммИС
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеУпаковок.Номенклатура КАК Номенклатура,
	|	ДанныеУпаковок.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ДанныеУпаковок.Упаковка = ДанныеУпаковок.ЕдиницаИзмерения
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0)
	|	КОНЕЦ КАК Коэффициент,
	|	ДанныеУпаковок.Вес КАК Вес
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ДанныеУпаковок.Упаковка = ЕдиницыИзмерения.ЕдиницаИзмеренияПоКлассификатору
	|			И (ЕдиницыИзмерения.Владелец = ДанныеУпаковок.Номенклатура
	|				ИЛИ ЕдиницыИзмерения.Владелец = ДанныеУпаковок.НаборЕдиницИзмерения
	|					И ДанныеУпаковок.ИспользоватьНаборыЕдиницИзмерения
	|				ИЛИ ЕдиницыИзмерения.Владелец = ДанныеУпаковок.КатегорияНоменклатуры)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоэффициентыУпаковокНоменклатуры = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Результат = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонРезультата);
		
		Если Выборка.Коэффициент = 0 И Выборка.Вес = 0 Тогда
			Результат.КодОшибки   = 3;
		Иначе
			Результат.Коэффициент = Выборка.Коэффициент;
			Результат.Вес         = Выборка.Вес;
		КонецЕсли;
		
		КоэффициентыУпаковокНоменклатуры.Вставить(Выборка.Номенклатура, Результат);
		
	КонецЦикла;
	
	Возврат КоэффициентыУпаковокНоменклатуры;
	
КонецФункции

#Область Серии

Процедура ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыФормированияЗапроса)
	
	ИмяТабличнойЧасти = ПараметрыФормированияЗапроса.ИмяТабличнойЧастиТоварыИС;
	
	ТЧТовары = ПараметрыФормированияЗапроса.МетаданныеДокументаИСМП.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	Если ТЧТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТЧТовары.Реквизиты.Найти("Серия") = Неопределено
		ИЛИ ТЧТовары.Реквизиты.Найти("СтатусУказанияСерий") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
		ИмяФормы = "Документ." + ПараметрыФормированияЗапроса.МетаданныеДокументаИСМП.Имя + ".Форма.ФормаДокумента";
		ИнтеграцияИСМПУНФВызовСервера.ПроверитьСериюРассчитатьСтатус(СтрокаТЧ, ИмяФормы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеНаОсновании

#Область ВнесениеСведенийОСобранномУрожаеЗЕРНО

Процедура ЗаполнитьВнесениеСведенийОСобранномУрожаеЗЕРНОНаОснованииОприходованияЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Дата КАК ДатаСбораУрожая,
	|	Шапка.Организация КАК Организация,
	|	Шапка.СтруктурнаяЕдиница КАК СкладКонтрагент,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

Процедура ЗаполнитьВнесениеСведенийОСобранномУрожаеЗЕРНОНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Дата КАК ДатаСбораУрожая,
	|	Шапка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)
	|			ТОГДА Шапка.СтруктурнаяЕдиницаПродукции
	|		ИНАЧЕ Шапка.СтруктурнаяЕдиницаЗапасов
	|	КОНЕЦ КАК СкладКонтрагент,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.СборкаЗапасов КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеСДИЗЗЕРНО

Процедура ЗаполнитьОформлениеСДИЗЗЕРНОНаОснованииРасходнойНакладной(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Организация КАК Организация,
	|	Шапка.СтруктурнаяЕдиница КАК ПунктОтправления,
	|	Шапка.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				И НЕ Шапка.Контрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|				И НЕ Шапка.Контрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ)
	|	КОНЕЦ КАК Операция,
	|	Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю) КАК Реализация,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.РасходнаяНакладная КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

Процедура ЗаполнитьОформлениеСДИЗЗЕРНОНаОснованииПеремещенияЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Организация КАК Организация,
	|	Шапка.СтруктурнаяЕдиница КАК СкладКонтрагент,
	|	Шапка.СтруктурнаяЕдиница КАК ПунктОтправления,
	|	Шапка.СтруктурнаяЕдиницаПолучатель КАК ПунктНазначенияСопоставленныйОбъект,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ) КАК Операция,
	|	ИСТИНА КАК Перевозка,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

Процедура ЗаполнитьОформлениеСДИЗЗЕРНОНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Организация КАК Организация,
	|	Шапка.ОрганизацияПолучатель КАК Покупатель,
	|	Шапка.СтруктурнаяЕдиница КАК ПунктОтправления,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ) КАК Операция,
	|	ИСТИНА КАК Реализация,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область ПогашениеСДИЗЗЕРНО

Процедура ЗаполнитьПогашениеСДИЗЗЕРНОНаОснованииПриходнойНакладная(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Организация КАК Организация,
	|	Шапка.СтруктурнаяЕдиница КАК СкладКонтрагент,
	|	КлючиРеквизитовОрганизацийЗЕРНО.Ссылка КАК Продавец,
	|	ВЫБОР
	|		КОГДА Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				И НЕ Шапка.Контрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|				И НЕ Шапка.Контрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ)
	|	КОНЕЦ КАК Операция,
	|	Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю) КАК Реализация,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиРеквизитовОрганизацийЗЕРНО КАК КлючиРеквизитовОрганизацийЗЕРНО
	|		ПО Шапка.Контрагент = КлючиРеквизитовОрганизацийЗЕРНО.ОрганизацияКонтрагент
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область СписаниеПартийЗЕРНО

Процедура ЗаполнитьСписаниеПартийЗЕРНОНаОснованииКомплектацииЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Организация КАК Организация,
	|	Шапка.СтруктурнаяЕдиница КАК Склад,
	|	Шапка.Организация КАК ВладелецПартии,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.КомплектацияЗапасов КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

Процедура ЗаполнитьСписаниеПартийЗЕРНОНаОснованииСписанияЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Организация КАК Организация,
	|	Шапка.СтруктурнаяЕдиница КАК Склад,
	|	Шапка.Организация КАК ВладелецПартии,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.СписаниеЗапасов КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

Процедура ЗаполнитьСписаниеПартийЗЕРНОНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)
	|			ТОГДА Шапка.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ Шапка.СтруктурнаяЕдиницаПродукции
	|	КОНЕЦ КАК Склад,
	|	Шапка.Организация КАК ВладелецПартии,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.СборкаЗапасов КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПартийЗЕРНО

Процедура ЗаполнитьФормированиеПартийЗЕРНОНаОснованииОприходованияЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Организация КАК ВладелецПартии,
	|	Шапка.СтруктурнаяЕдиница КАК СкладКонтрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков) КАК Операция,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ОприходованиеЗапасов КАК Шапка
	|	
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПартийПриПроизводствеЗЕРНО

Процедура ЗаполнитьФормированиеПартийПриПроизводствеЗЕРНОНаОснованииСборкиЗапасов(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК ДокументОснование,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Организация КАК Товаропроизводитель,
	|	ВЫБОР
	|		КОГДА Шапка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)
	|			ТОГДА Шапка.СтруктурнаяЕдиницаЗапасов
	|		ИНАЧЕ Шапка.СтруктурнаяЕдиницаПродукции
	|	КОНЕЦ КАК СкладКонтрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков) КАК Операция,
	|	НЕ Шапка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.СборкаЗапасов КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &ДокументОснование");
	
	ИнтеграцияИСУНФ.ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	// Заполним продукцию в шапке.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения));
	Запрос.Текст = ИнтеграцияИСУНФ.ТекстЗапросаТоварыДокументаОснования(ПараметрыФормированияЗапроса, Новый Структура);
	Запрос.Выполнить();
	Запрос.Текст = "Выбрать * ИЗ " + ПараметрыФормированияЗапроса.ИмяВременнойТаблицыВыборкиДанных;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
	КонецЕсли;
	
	// Заполним Сырье.
	ПараметрыФормированияЗапросаСырье = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияЗапроса);
	ПараметрыФормированияЗапросаСырье.ОтборНоменклатуры = ИнтеграцияИСУНФ.ОпределениеВидаПродукцииТекстаЗапроса("СправочникНоменклатура",
		ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции());
		
	ТабличнаяЧастьЗапасы = ИнтеграцияИСУНФ.ШаблонОписанияТабличнойЧастиДокумента();
	Если ПараметрыФормированияЗапросаСырье.МетаданныеДокументаОснования.ТабличныеЧасти.Найти("СерииНоменклатуры") <> Неопределено Тогда
		ТабличнаяЧастьЗапасы.ИмяТабличнойЧастиСерии = "СерииНоменклатуры";
	КонецЕсли;
	
	ПараметрыФормированияЗапросаСырье.ТабличныеЧасти.Очистить();
	ТабличнаяЧастьПродукция = ИнтеграцияИСУНФ.ШаблонОписанияТабличнойЧастиДокумента(
		Истина, "Продукция", "СерииНоменклатурыПродукция");
	ТабличнаяЧастьПродукция.ДопОтборы_Товары =
		"Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийСборкаЗапасов.Разборка)";
	ПараметрыФормированияЗапросаСырье.ТабличныеЧасти.Добавить(ТабличнаяЧастьПродукция);
	
	ТабличнаяЧастьЗапасы.ДопОтборы_Товары =
		"Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)";
	ПараметрыФормированияЗапросаСырье.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
	
	ИнтеграцияИСУНФ.ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапросаСырье);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьПараметрыФормированияЗапроса(ПараметрыФормированияЗапроса)
	
	МетаданныеДокументаОснования = ПараметрыФормированияЗапроса.МетаданныеДокументаОснования;
	МетаданныеДокументаИС        = ПараметрыФормированияЗапроса.МетаданныеДокументаИСМП;
	
	ТабличнаяЧастьЗапасы = ИнтеграцияИСУНФ.ШаблонОписанияТабличнойЧастиДокумента();
	Если МетаданныеДокументаОснования.ТабличныеЧасти.Найти("СерииНоменклатуры") <> Неопределено Тогда
		ТабличнаяЧастьЗапасы.ИмяТабличнойЧастиСерии = "СерииНоменклатуры";
	КонецЕсли;
	
	ВидыПродукцииЗЕРНО = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции();
	ОтборНоменклатуры = ИнтеграцияИСУНФ.ОпределениеВидаПродукцииТекстаЗапроса("СправочникНоменклатура", ВидыПродукцииЗЕРНО);
	
	ОтборНоменклатурыТолькоЗерно            = ИнтеграцияИСУНФ.ОпределениеВидаПродукцииТекстаЗапроса("СправочникНоменклатура",
		Перечисления.ВидыПродукцииИС.Зерно);
	ОтборНоменклатурыТолькоЗернопереработка = ИнтеграцияИСУНФ.ОпределениеВидаПродукцииТекстаЗапроса("СправочникНоменклатура",
		Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна);
	
	ОтборНоменклатурыДокумента = "";
	
	Если МетаданныеДокументаОснования = Метаданные.Документы.КомплектацияЗапасов Тогда
		
		Если МетаданныеДокументаИС = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
			
			ТабличнаяЧастьПродукция = ИнтеграцияИСУНФ.ШаблонОписанияТабличнойЧастиДокумента(
				Истина, "Ссылка");
			ТабличнаяЧастьПродукция.ДопОтборы_Товары =
			"Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийКомплектацияЗапасов.Разборка)";
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьПродукция);
			
			ТабличнаяЧастьЗапасы.ДопОтборы_Товары =
			"Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийКомплектацияЗапасов.Сборка)";
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			
			ОтборНоменклатурыДокумента = ОтборНоменклатуры;
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ОприходованиеЗапасов Тогда
		
		Если МетаданныеДокументаИС = Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО Тогда
			
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			
			ОтборНоменклатурыДокумента = ОтборНоменклатурыТолькоЗерно;
			
		ИначеЕсли МетаданныеДокументаИС = Метаданные.Документы.ФормированиеПартийЗЕРНО Тогда
			
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			
			ОтборНоменклатурыДокумента = ОтборНоменклатуры;
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями Тогда
		
		Если МетаданныеДокументаИС = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			
			ОтборНоменклатурыДокумента = ОтборНоменклатуры;
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПеремещениеЗапасов Тогда
		
		Если МетаданныеДокументаИС = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			ПараметрыФормированияЗапроса.ДопОтборы_Общие =
			"Товары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение)";
			
			ОтборНоменклатурыДокумента = ОтборНоменклатуры;
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.ПриходнаяНакладная Тогда
		
		Если МетаданныеДокументаИС = Метаданные.Документы.ПогашениеСДИЗЗЕРНО Тогда
			
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			ПараметрыФормированияЗапроса.ДопОтборы_Общие =
			"НЕ Товары.Ссылка.Контрагент.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)";
			
			ОтборНоменклатурыДокумента = ОтборНоменклатуры;
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.РасходнаяНакладная Тогда
		
		Если МетаданныеДокументаИС = Метаданные.Документы.ОформлениеСДИЗЗЕРНО Тогда
			
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			ПараметрыФормированияЗапроса.ДопОтборы_Общие =
			"НЕ Товары.Ссылка.Контрагент.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо)";
			
			ОтборНоменклатурыДокумента = ОтборНоменклатуры;
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СборкаЗапасов Тогда
		
		Если МетаданныеДокументаИС = Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО Тогда
			
			ТабличнаяЧастьПродукция = ИнтеграцияИСУНФ.ШаблонОписанияТабличнойЧастиДокумента(
				Истина, "Продукция", "СерииНоменклатурыПродукция");
			ТабличнаяЧастьПродукция.ДопОтборы_Товары =
				"Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)";
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьПродукция);
			
			ТабличнаяЧастьЗапасы.ДопОтборы_Товары = "Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийСборкаЗапасов.Разборка)";
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			
			ОтборНоменклатурыДокумента = ОтборНоменклатурыТолькоЗерно;
			
		ИначеЕсли МетаданныеДокументаИС = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
			
			ТабличнаяЧастьПродукция = ИнтеграцияИСУНФ.ШаблонОписанияТабличнойЧастиДокумента(
				Истина, "Продукция", "СерииНоменклатурыПродукция");
			ТабличнаяЧастьПродукция.ДопОтборы_Товары =
				"Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийСборкаЗапасов.Разборка)";
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьПродукция);
			
			ТабличнаяЧастьЗапасы.ДопОтборы_Товары =
				"Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)";
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			
			ОтборНоменклатурыДокумента = ОтборНоменклатуры;
			
		ИначеЕсли МетаданныеДокументаИС = Метаданные.Документы.ФормированиеПартийПриПроизводствеЗЕРНО Тогда
			
			ПараметрыФормированияЗапроса.ИмяТабличнойЧастиТоварыИС = "Сырье";
			
			ТабличнаяЧастьПродукция = ИнтеграцияИСУНФ.ШаблонОписанияТабличнойЧастиДокумента(
				Истина, "Продукция", "СерииНоменклатурыПродукция");
			ТабличнаяЧастьПродукция.ДопОтборы_Товары =
				"Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийСборкаЗапасов.Сборка)";
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьПродукция);
			
			ТабличнаяЧастьЗапасы.ДопОтборы_Товары =
				"Товары.Ссылка.ВидОперации = Значение(Перечисление.ВидыОперацийСборкаЗапасов.Разборка)";
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			
			ОтборНоменклатурыДокумента = ОтборНоменклатурыТолькоЗернопереработка;
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокументаОснования = Метаданные.Документы.СписаниеЗапасов Тогда
		
		Если МетаданныеДокументаИС = Метаданные.Документы.СписаниеПартийЗЕРНО Тогда
			
			ПараметрыФормированияЗапроса.ТабличныеЧасти.Добавить(ТабличнаяЧастьЗапасы);
			
			ОтборНоменклатурыДокумента = ОтборНоменклатуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыФормированияЗапроса.ОтборНоменклатуры = "ИСТИНА" Тогда
		ПараметрыФормированияЗапроса.ОтборНоменклатуры = ОтборНоменклатурыДокумента;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти