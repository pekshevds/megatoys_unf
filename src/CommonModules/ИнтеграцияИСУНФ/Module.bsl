#Область ИнтеграцияИСПереопределяемый

// ++( 00-00012169 
// Заполняет текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса заполнения статусов указания серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Структура        - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	Если ТипОбъекта = Метаданные.Документы.МаркировкаТоваровИСМП
		ИЛИ ТипОбъекта = Метаданные.Документы.ВыводИзОборотаИСМП
		ИЛИ ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП
		ИЛИ ТипОбъекта = Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП Тогда
		
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийМаркировкаТоваровИСМП(ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры
// )++ 00-00012169

// См. ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть, Реквизиты = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты = Неопределено Тогда
		Реквизиты = Новый Структура;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	&ПолеКоличество КАК Количество,
	|	&ПолеЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Номенклатура.АлкогольнаяПродукция
	|					И ТаблицаТоваров.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
	|					И НЕ ТаблицаТоваров.Номенклатура.ПродаетсяВРозлив
	|				ИЛИ &УсловиеПродукцияИСМП
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МаркируемаяПродукция,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТоваров.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваров.Номенклатура.ВидПродукцииИС
	|		КОГДА ТаблицаТоваров.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|	КОНЕЦ КАК ВидПродукцииИС,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1) = 0
	|		ИЛИ СправочникНоменклатура.Весовой КАК ТребуетВзвешивания,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1) <> 1
	|		ИЛИ ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 1) > 1
	|		ИЛИ ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|			И СправочникНоменклатура.ВидПродукцииИС В (ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво), ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво))
	|			И СправочникНоменклатура.Весовой КАК ПроизвольнаяЕдиницаУчета,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользоватьСерииНоменклатуры
	|				И СправочникНоменклатура.ИспользоватьСрокГодностиСерии
	|			ТОГДА СправочникНоменклатура.ТочностьУказанияСрокаГодностиСерии = ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СкоропортящаясяПродукция,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Номенклатура.ИспользоватьХарактеристики КАК ХарактеристикиИспользуются,
	|	СправочникНоменклатура.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики,
	|	СправочникНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СправочникНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК КоэффициентЕдиницыИзмеренияГосИС,
	|	ТаблицаТоваров.Количество * ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК КоличествоВБазовыхЕдиницахГосИС
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ТаблицаТоваров.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ТаблицаТоваров.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка";
	
	ВидыПродукцииИСМП = "";
	Если НЕ Форма = Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДатаДокумента")
		И ЗначениеЗаполнено(Форма.ДатаДокумента) Тогда
		ДатаПроверки = Форма.ДатаДокумента;
	Иначе
		ДатаПроверки = ТекущаяДатаСеанса();
	КонецЕсли;
	Для Каждого ВидПродукции Из ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
		
		Если НЕ ИнтеграцияИСМПКлиентСерверПовтИсп.ОбязательнаяРегистрацияОборотаМаркируемойПродукции(ВидПродукции, ДатаПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыПродукцииИСМП = ВидыПродукцииИСМП
			+ ?(ВидыПродукцииИСМП = "", "", ", ")
			+ "ЗНАЧЕНИЕ(" + ПолучитьПолноеИмяПредопределенногоЗначения(ВидПродукции) + ")";
		
	КонецЦикла;
	
	Если НЕ ВидыПродукцииИСМП = "" Тогда
		УсловиеПродукцияИСМП = СтрШаблон("СправочникНоменклатура.ВидПродукцииИС В (%1)",
			ВидыПродукцииИСМП);
	Иначе
		УсловиеПродукцияИСМП = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПродукцияИСМП", УсловиеПродукцияИСМП);
	
	Колонки = "НомерСтроки, Номенклатура";
	Если Реквизиты.Свойство("КоличествоВБазовыхЕдиницахГосИС") Тогда
		Колонки = Колонки + ", ЕдиницаИзмерения, Количество";
		ПолеКоличество = "ТаблицаТоваров.Количество";
		ПолеЕдиницаИзмерения = "ТаблицаТоваров.ЕдиницаИзмерения";
	Иначе
		ПолеКоличество = "0";
		ПолеЕдиницаИзмерения = "Значение(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКоличество", ПолеКоличество);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеЕдиницаИзмерения", ПолеЕдиницаИзмерения);
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаТоваров = ТабличнаяЧасть.Выгрузить(, Колонки);
	ИначеЕсли ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = ТабличнаяЧасть.Скопировать(, Колонки);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерСтроки");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("МаркируемаяПродукция",              Выборка.МаркируемаяПродукция);
		ДанныеНоменклатуры.Вставить("ВидПродукцииИС",                    Выборка.ВидПродукцииИС);
		ДанныеНоменклатуры.Вставить("ТребуетВзвешивания",                Выборка.ТребуетВзвешивания);
		ДанныеНоменклатуры.Вставить("ПроизвольнаяЕдиницаУчета",          Выборка.ПроизвольнаяЕдиницаУчета);
		Если НЕ Выборка.СкоропортящаясяПродукция = Неопределено Тогда
			ДанныеНоменклатуры.Вставить("СкоропортящаясяПродукция",      Выборка.СкоропортящаясяПродукция);
		КонецЕсли;
		ДанныеНоменклатуры.Вставить("ХарактеристикиИспользуются",        Выборка.ХарактеристикиИспользуются);
		ДанныеНоменклатуры.Вставить("ПроверятьЗаполнениеХарактеристики", Выборка.ПроверятьЗаполнениеХарактеристики);
		ДанныеНоменклатуры.Вставить("ИспользоватьПартии",                Выборка.ИспользоватьПартии);
		ДанныеНоменклатуры.Вставить("ПроверятьЗаполнениеПартий",         Выборка.ПроверятьЗаполнениеПартий);
		Если Реквизиты.Свойство("ЕдиницаИзмерения") Тогда
			ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		КонецЕсли;
		Если Реквизиты.Свойство("КоличествоВБазовыхЕдиницахГосИС") Тогда
			ДанныеНоменклатуры.Вставить("КоличествоВБазовыхЕдиницахГосИС", Выборка.КоличествоВБазовыхЕдиницахГосИС);
		КонецЕсли;
		Если Реквизиты.Свойство("КоэффициентЕдиницыИзмеренияГосИС") Тогда
			ДанныеНоменклатуры.Вставить("КоэффициентЕдиницыИзмеренияГосИС", Выборка.КоэффициентЕдиницыИзмеренияГосИС);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		
		СтрокаТЧ = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора)[0];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеНоменклатуры);
		
	КонецЦикла;
	
	Если Реквизиты.Свойство("АвтоматическийОСУИС") И ТабличнаяЧасть.Количество()
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "АвтоматическийОСУИС") Тогда
		ПроверкаИПодборПродукцииИСМП.ЗаполнитьПризнакАвтоматическийОСУИСВТаблице(ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
//
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользоватьХарактеристики
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользоватьХарактеристики";

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Использование = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	Иначе
		Использование = Номенклатура.ИспользоватьХарактеристики;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования серий (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		ФОСерии = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
		ФОПартии = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
		Использование = ФОСерии ИЛИ ФОПартии;
	ИначеЕсли Номенклатура.ПодконтрольнаяПродукцияВЕТИС
		ИЛИ Номенклатура.ТабачнаяПродукция
		ИЛИ Номенклатура.ОбувнаяПродукция Тогда
		Использование = Номенклатура.ИспользоватьПартии;
	ИначеЕсли Номенклатура.ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция Тогда
		Использование = Номенклатура.ИспользоватьСерииНоменклатуры;
	// ++( 00-00012169
	ИначеЕсли Номенклатура.АлкогольнаяПродукция Тогда
		Использование = Номенклатура.ИспользоватьСерииНоменклатуры;
	// )++ 00-00012169
	Иначе
		Использование = Номенклатура.ИспользоватьСерииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	Использование = ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения");
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ПолноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ПолноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	
	Если Сведения.Свойство("НалоговыйНомерВСтранеРегистрации") Тогда
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если Организация.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
				Сведения.НалоговыйНомерВСтранеРегистрации = Организация.РегистрационныйНомер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//   Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//   Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//     собственную организацию или контрагента
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
//
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
	Сведения.Вставить("ИНН", Реквизиты.ИНН);
	Сведения.Вставить("КПП", Реквизиты.КПП);
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации) - заполняемая структура представления
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	Если ТипЗнч(Организация) =  Тип("СправочникСсылка.Организации") Тогда
		
		ДанныеРуководителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ПодписьРуководителя");
		ПредставлениеРуководителя.Вставить("Руководитель", Строка(ДанныеРуководителя.ФизическоеЛицо));
		ПредставлениеРуководителя.Вставить("Должность", Строка(ДанныеРуководителя.Должность));
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация,
//  Неопределено - организация не найдена.
//
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, Организация);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент,
//  Неопределено - контрагент не найден.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	ИмяСправочника = "Контрагенты";
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(ИмяСправочника, ИНН, КПП, Контрагент);
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить
//                                    видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы) Экспорт
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Форма.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование;
	
	Если Форма.ИмяФормы <> "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "ОбщаяФорма.ФормаУточненияДанныхИС" Тогда
			
		Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				Префикс + "ВыгрузитьДанныеВТСД",
				"Видимость",
				Ложь);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// см ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	Если ЕстьОшибкиПроведен Тогда
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление объекта.
// 
// Параметры:
// 	Представление - Строка - Исходящий параметр со значением представления.
// 	ПараметрОбъект - Строка, Объект - Наименование типа объекта либо сам объект.
//
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	СтруктураПредставления = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(СтруктураПредставления, МетаданныеОбъекта);
	Если Не ПустаяСтрока(СтруктураПредставления.ПредставлениеОбъекта) Тогда
		Представление = СтруктураПредставления.ПредставлениеОбъекта;
	Иначе
		Представление = МетаданныеОбъекта.Представление();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//   Представление  - Строка                                     - представление для заполнения,
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//   Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
//
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	Представление = ПечатьДокументовУНФ.ПредставлениеНоменклатурыДляПечати(Номенклатура, Характеристика,, Серия);
	
КонецПроцедуры

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Процедура ПравоСозданияКонтрагента(ДоступРазрешен) Экспорт
	
	ДоступРазрешен = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	
КонецПроцедуры

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если НастройкиФормы.ИмяФормы = "Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма" Тогда
		Обработки.ГенерацияШтрихкодовУпаковок.ПриОпределенииКомандПодключенныхКОбъекту(Команды);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//   Параметры  - Структура        - выходной, параметры указания серий, состав полей определен в функции
//                                 НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//   Объект     - Структура        - Структура значений реквизитов объекта, необходимых для заполнения параметров
//                                   указания серий.
//
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	Если ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект)
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП  Тогда
		
		ИнтеграцияМОТПУНФ.ДополнитьПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Объект, Параметры);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерийМаркировкаТоваровИСМП(Объект);
	
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерийВыводИзОборотаИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратВОборотИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерийВозвратВОборотИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерийВиртуальнаяАгрегацияУпаковокИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП Тогда
		
		ИнтеграцияМОТПУНФ.ДополнитьПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Параметры, Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.СписаниеКодовМаркировкиИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерийСписаниеКодовМаркировки(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерийПриемкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ПараметрыУказанияСерийУточнениеСведенийОКодахМаркировкиИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.ОбщиеФормы.ФормаУточненияДанныхИС Тогда
		
		ИнтеграцияМОТПУНФ.ДополнитьПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Объект, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//   Параметры       - Структура - выходной, особенности указания серий в объекте, состав полей определен в функции
//                                 НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   Объект          - Объект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                 указания серий.
//   МенеджерОбъекта - Менеджер  - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
//
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		
		ТипСсылки = ТипЗнч(Объект.Ссылка);
		
		Если ТипСсылки = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект)
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ИнвентаризацияПродукцииВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
			
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ЗапросСкладскогоЖурналаВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
			
		Иначе
			
			ЗаполнитьПараметрыУказанияСерий(Параметры, Объект.Ссылка.Метаданные(), Объект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН. Ключ - ИНН, значение - Контрагент.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответствие вида:
//   * ИНН
//   * Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В(&КоллекцияИНН)");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	
КонецПроцедуры

// См. ИнтеграцияИСПереопределяемый.ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам
Процедура ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, Соответствие) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.РегистрационныйНомер КАК НалоговыйНомер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В(&КоллекцияИНН)");
	Запрос.УстановитьПараметр("КоллекцияНалоговыхНомеров", КоллекцияНалоговыхНомеров);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.НалоговыйНомер, Выборка.Контрагент);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре требуется определить признак использования видов номенклатуры.
//
// Параметры:
//  Использование - Булево - Признак использования видов номенклатуры в программе.
//
Процедура ИспользованиеВидовНоменклатуры(Использование) Экспорт
	
	Использование = Истина;
	
КонецПроцедуры

// Обрабатывает строку табличной части в соответствии с переданной структурой действий.
//
// Параметры:
//  СтрокаТабличнойЧасти - Структура, СтрокаТабличнойЧасти, ДокументСтрокаТабличнойЧасти - обрабатываемая строка.
//  СтруктураДействий - структура - структура выполняемых действий.
Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий) Экспорт
	
	ТипСтрокиТабличнойЧасти = ТипЗнч(СтрокаТабличнойЧасти);
	
	Если ТипСтрокиТабличнойЧасти = Тип("Структура") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаТабличнойЧасти, Ложь);
	ИначеЕсли ТипСтрокиТабличнойЧасти = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	ИначеЕсли Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти) <> Неопределено Тогда
		СтрокаТабличнойЧастиСтруктурой = Новый Структура();
		ПодстрокиИмени = СтрРазделить(Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти).ПолноеИмя(), ".");
		
		Если ПодстрокиИмени.Количество() = 4 Тогда
			РеквизитыСтроки = Метаданные.Документы[ПодстрокиИмени[1]].ТабличныеЧасти[ПодстрокиИмени[3]].Реквизиты;
			Для Каждого РеквизитСтроки Из РеквизитыСтроки Цикл
				СтрокаТабличнойЧастиСтруктурой.Вставить(РеквизитСтроки.Имя, СтрокаТабличнойЧасти[РеквизитСтроки.Имя]);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		Если СтрокаТабличнойЧастиСтруктурой.Количество = 0 Тогда
			СтрокаТабличнойЧастиСтруктурой.КоличествоУпаковок = 0;
		Иначе
			Коэффициент = ?(ТипЗнч(СтрокаТабличнойЧастиСтруктурой.Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения"), СтрокаТабличнойЧастиСтруктурой.Упаковка.Коэффициент, 1);
			Если Коэффициент <> 0 Тогда
				СтрокаТабличнойЧастиСтруктурой.КоличествоУпаковок = СтрокаТабличнойЧастиСтруктурой.Количество / Коэффициент;
			Иначе
				ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", СтрокаТабличнойЧастиСтруктурой.Упаковка);
				
				СтрокаТабличнойЧастиСтруктурой.Количество = 0;
				СтрокаТабличнойЧастиСтруктурой.КоличествоУпаковок = 0;
				СтрокаТабличнойЧастиСтруктурой.Упаковка = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		
		Если СтрокаТабличнойЧастиСтруктурой.Свойство("Номенклатура") 
			И ТипЗнч(СтрокаТабличнойЧастиСтруктурой.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			СтрокаТабличнойЧастиСтруктурой.КодТНВЭД = СтрокаТабличнойЧастиСтруктурой.Номенклатура.ТоварнаяНоменклатураВЭД.Код;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ++( 00-00012169
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
		ИнтеграцияИСМПУНФВызовСервера.ПроверитьСериюРассчитатьСтатус(СтрокаТабличнойЧастиСтруктурой, Неопределено);
	КонецЕсли;
	// )++ 00-00012169
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);
	
КонецПроцедуры

// В функции требуется определить право на регистрацию нового штрихкода для текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право на регистрацию штрихкода. Ложь - в противном случае.
//
Процедура ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен) Экспорт
	
	ДоступРазрешен = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
КонецПроцедуры

Процедура ПриОпределенииМенеджераОбъектаПоПолномуИмени(МенеджерОбъекта, ПолноеИмя) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
КонецПроцедуры

Процедура ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Ссылка.Метаданные().ПолноеИмя());
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации в прикладном объекте.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - найденная организация
//  Объект      - Произвольный                - объект в котором производится поиск
//
Процедура ПриОпределенииОрганизацииИзПрикладногоОбъекта(Организация, Объект) Экспорт
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Организация");
	
КонецПроцедуры

Процедура ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура) Экспорт
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Товары.%1 КАК Номенклатура,
		|	%3 КАК Маркируемый
		|ИЗ %2 КАК Товары",
		ИмяПоляНоменклатура,
		ИмяТаблицыНоменклатура,
		ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(
			СтрШаблон("Товары.%1",ИмяПоляНоменклатура)));
	Возврат;
	
КонецПроцедуры

Процедура ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления";
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Организация);
	КонецЦикла;
	
КонецПроцедуры

#Область Номенклатура

// В процедуре требуется определить наличие товаров по виду продукции для которых используется механизм частичного выбытия
//
// Параметры:
//  Использование - Булево - Признак использования частичного выбытия (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеЧастичноеВыбытие(Использование, ВидПродукцииИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПродукцииИС", ВидПродукцииИС);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|		И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)
		|ГДЕ
		|	Номенклатура.ВидПродукцииИС = &ВидПродукцииИС";
	
	Использование = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры

// В процедуре требуется определить наличие товаров по виду продукции для которых единица учета не совпадает с 
//   количеством в потребительском коде маркировки
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеПроизвольныхЕдиницУчета(Использование, ВидПродукцииИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПродукцииИС", ВидПродукцииИС);
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО (ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	СправочникНоменклатура.ВидПродукцииИС = &ВидПродукцииИС
	|	И (ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1) <> 1
	|			ИЛИ ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 1) > 1
	|			ИЛИ ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|				И СправочникНоменклатура.Весовой)";
	
	Использование = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СобытияФормИСПереопределяемый

// Вызывается после записи объекта на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - источник вызова
Процедура ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		
		МодифицироватьИнициализироватьФормуРМК(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Серверные обработчики БГосИС элементов прикладных форм
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		
		Если Элемент = Форма.КэшданныхГОСИС.ИмяТабличнойЧасти Тогда
			
			ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека(), Истина);
			ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при открытии формы конфигурации.
//   Выполняется определение необходимости встраивания подсистем (с учетом их наличия) в форму.
//
// Параметры:
//   Форма            - УправляемаяФорма - форма конфигурации
//   МодулиИнтеграции - Массив           - используемые модули интеграции
//
Процедура ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиИнтеграции) Экспорт
	
	Модули = Новый Соответствие;
	
	ИмяФормы = Форма.ИмяФормы;
	Если ИмяФормы = "Документ.РасходнаяНакладная.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.СборкаЗапасов.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.СписаниеЗапасов.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПересортицаЗапасов.Форма.ФормаДокумента"
		Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
			И Не ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			Модули.Вставить("СобытияФормГИСМ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяФормы = "Документ.РасходнаяНакладная.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		ИЛИ ИмяФормы = "Документ.ОтчетОРозничныхПродажах.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПередачаТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ОтчетОПереработке.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ОтчетПереработчика.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда"
		Или ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
			Модули.Вставить("СобытияФормИСМП");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ПомощникНового"
		Или ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаРедактированияШаблонаЭтикетокИЦенников" Тогда
			Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
				Модули.Вставить("СобытияФормЕГАИС");
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
					Модули.Вставить("СобытияФормИСМП");
			КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если ИнтеграцияЕГАИС.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормЕГАИС");
		КонецЕсли;
		
		Если ИнтеграцияВЕТИС.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормВЕТИС");
		КонецЕсли;
		
		Если ИнтеграцияИСМП.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормИСМП");
		КонецЕсли;
		
		Если ИнтеграцияЗЕРНО.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормЗЕРНО");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Модули Цикл
		МодулиИнтеграции.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода по владельцу
//
// Параметры:
//	Форма						- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода				- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымХарактеристики	- Строка			- Путь к данным текущего значения в форме.
//
Процедура УстановитьСвязиПараметровВыбораПоВладельцу(Форма, ИмяПоляВвода, ПутьКДаннымХарактеристики) Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ПутьКДаннымХарактеристики));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к данным текущей номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода, ПутьКДаннымНоменклатуры) Экспорт
	
	Если ИмяПоляВвода = "ТоварыХарактеристика"
		Или ИмяПоляВвода = "Характеристика" Тогда
		
		СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(
			Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ПутьКДаннымНоменклатуры));
		
		Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииЧтенииНаСервере(Форма) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	Если ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		
		ИнтеграцияИСУНФ.МодифицироватьИнициализироватьФормуРМК(Форма);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.РасходнаяНакладная.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ПередачаТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда" Тогда
		
		Если НЕ ИнициализацияФормыВыполнена(Форма) Тогда
			
			ИмяТабличнойЧасти = "Запасы";
			Форма.КэшДанныхГОСИС.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
			
			ИнициализироватьКешТекущейСтроки(Форма);
			
			// Добавим реквизиты.
			ДобавляемыеРеквизиты = Новый Массив;
			Реквизит = Новый РеквизитФормы("КоличествоВБазовыхЕдиницахГосИС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)),
				"Объект." + ИмяТабличнойЧасти, НСтр("ru = 'Количество в базовых единицах ГосИС'"));
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			Реквизит = Новый РеквизитФормы("КоэффициентЕдиницыИзмеренияГосИС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)),
				"Объект." + ИмяТабличнойЧасти, НСтр("ru = 'Коэффициент единицы измерения ГосИС'"));
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтчетОПереработке.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ОтчетПереработчика.Форма.ФормаДокумента" Тогда
		
		Если НЕ ИнициализацияФормыВыполнена(Форма) Тогда
			
			ИмяТабличнойЧасти = "Продукция";
			Форма.КэшДанныхГОСИС.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
			
			ИнициализироватьКешТекущейСтроки(Форма);
			
			// Добавим реквизиты.
			ДобавляемыеРеквизиты = Новый Массив;
			Реквизит = Новый РеквизитФормы("КоличествоВБазовыхЕдиницахГосИС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)),
				"Объект." + ИмяТабличнойЧасти, НСтр("ru = 'Количество в базовых единицах ГосИС'"));
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			Реквизит = Новый РеквизитФормы("КоэффициентЕдиницыИзмеренияГосИС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)),
				"Объект." + ИмяТабличнойЧасти, НСтр("ru = 'Коэффициент единицы измерения ГосИС'"));
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступомИСПереопределяемый

// Одноименная процедура для заполнения текста ограничения подсистемы БСП Управление доступом
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
//  
// Параметры:
// 	МетаданныеОбъекта - Метаданные - метаданные вызывающего объекта.
// 	Ограничение - Структура - Структура ограничения:
// 	 * Текст - Строка - Текст ограничения.
//
Процедура ПриЗаполненииОграниченияДоступа(МетаданныеОбъекта, Ограничение) Экспорт
	
	Если Метаданные.Документы.МаркировкаТоваровИСМП = МетаданныеОбъекта
		Или Метаданные.Документы.ВыводИзОборотаИСМП = МетаданныеОбъекта
		Или Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ = МетаданныеОбъекта
		Или Метаданные.Документы.ПеремаркировкаТоваровИСМП = МетаданныеОбъекта
		Или Метаданные.Документы.СписаниеКодовМаркировкиИСМП = МетаданныеОбъекта
		Или Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
		
	ИначеЕсли Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ = МетаданныеОбъекта
		Или Метаданные.РегистрыСведений.НастройкиОбменаСУЗ = МетаданныеОбъекта
		Или Метаданные.РегистрыСведений.ОчередьСообщенийИСМП = МетаданныеОбъекта Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеИСПереопределяемый

// В данной процедуре требуется переопределить текст запроса, определяющий свойства маркируемой продукции.
// Номенклатура для запроса лежит во временной таблице "ДанныеШтрихкодовУпаковок". (ДанныеШтрихкодовУпаковок.Номенклатура).
// "ВидПродукции". Поле "Номенклатура" желательно индексировать.
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//    * Номенклатура   - ОпределяемыйТип.Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры
//    * Серия          - ОпределяемыйТип.СерияНоменклатуры
//   Ожидаемые действия:
//   * Создание временной таблицы "СвойстваМаркируемойПродукции" с колонками:
//     ** Номенклатура         - ОпределяемыйТип.Номенклатура
//     ** МаркируемаяПродукция - Булево
//     ** ВидПродукции         - ПеречислениеСсылка.ВидыПродукцииИС.
// Параметры:
//  ТекстЗапросаСвойстваМаркируемойПродукции - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапросаСвойстваМаркируемойПродукции) Экспорт
	
	ТекстЗапросаСвойстваМаркируемойПродукции =
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ДанныеШтрихкодовУпаковок.Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|				И НЕ ДанныеШтрихкодовУпаковок.Номенклатура.ПродаетсяВРозлив
	|			ИЛИ &УсловиеПродукцияИСМП) КАК МаркируемаяПродукция,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА НЕ ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА НЕ ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	ВидыПродукцииИСМП = "";
	Для Каждого ВидПродукции Из ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
		
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыПродукцииИСМП = ВидыПродукцииИСМП
			+ ?(ВидыПродукцииИСМП = "", "", ", ")
			+ "ЗНАЧЕНИЕ(" + ПолучитьПолноеИмяПредопределенногоЗначения(ВидПродукции) + ")";
		
	КонецЦикла;
	
	Если НЕ ВидыПродукцииИСМП = "" Тогда
		УсловиеПродукцияИСМП = СтрШаблон("ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС В (%1)",
			ВидыПродукцииИСМП);
	Иначе
		УсловиеПродукцияИСМП = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапросаСвойстваМаркируемойПродукции = СтрЗаменить(ТекстЗапросаСвойстваМаркируемойПродукции,
		"&УсловиеПродукцияИСМП", УсловиеПродукцияИСМП);
	
КонецПроцедуры

// В случае учета серий в данной процедуре необходимо реализовать заполнение таблицы значений "ДанныеТаблицыТовары",
// содержащей колонки: "Номенклатура", "Характеристика", "Серия", "Количество". Таблицу необходимо положить во временное
// хранилище, адрес хранилища - в ПараметрыСканирования.ДанныеТаблицыТовары. Если учет серий не ведется - заполнение не требуется.
// 
// Параметры:
//  Форма - УправляемаяФорма - Форма, для которой происходит обработка штрихкодов.
//  ДанныеТаблицыТовары - См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхДокумента.
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//  СтандартнаяОбработка - Булево, Ложь - если требуется заполнение таблицы в данной процедуре, Истина - заполнение произойдет
//      по стандартному алгоритму.
Процедура ПриФормированииДанныхТабличнойЧастиТовары(Форма, ДанныеТаблицыТовары, ПараметрыСканирования, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В этой процедуре при необходимости следует реализовать дополнительные проверки на ошибки данных по штрихкодам.
// 
// Параметры:
//  Форма - УправляемаяФорма - Форма, для которой выполняется обработка штрихкодов.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам). 
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	Если ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.Колонки.Найти("Серия") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаEAN Из ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN Цикл
		Если ЗначениеЗаполнено(СтрокаEAN.Серия) Тогда
			
			Для Каждого КлючИЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
				Если СтрНайти(КлючИЗначение.Ключ, СтрокаEAN.ШтрихкодEAN) = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(КлючИЗначение.Значение.Серия) Тогда
					Продолжить;
				КонецЕсли;
				
				КлючИЗначение.Значение.Серия = СтрокаEAN.Серия;
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из ДанныеПоШтрихкодам.НеобработанныеШтрихкоды Цикл
				Если СтрНайти(КлючИЗначение.Ключ, СтрокаEAN.ШтрихкодEAN) = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(КлючИЗначение.Значение.Серия) Тогда
					Продолжить;
				КонецЕсли;
				
				КлючИЗначение.Значение.Серия = СтрокаEAN.Серия;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура) Экспорт
	
	ОпределениеШаблон = "	ВЫБОР
						|		КОГДА %1.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
						|			ТОГДА ЕСТЬNULL(%1.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ) И НЕ %1.ПродаетсяВРозлив
						|		КОГДА %1.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ";
	
	Возврат СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура);
	
КонецФункции

// Добавляет на форму РМК (чека ККМ, чека на возврат) реквизиты ГосИС
//
// Параметры:
//   Форма - УправляемаяФорма - ФормаДокументаРМК
//
Процедура МодифицироватьИнициализироватьФормуРМК(Форма) Экспорт
	
	Если ИнициализацияФормыВыполнена(Форма, Ложь) Тогда
		ИнициализироватьФормуРМК(Форма);
		Возврат;
	КонецЕсли;
	
	ЕстьЕГАИС = Форма.КэшДанныхГОСИС.Свойство("ИнтеграцияЕГАИС");
	ЕстьИСМП  = Форма.КэшДанныхГОСИС.Свойство("ИнтеграцияИСМП");
	
	ИмяТабличнойЧасти = "Запасы";
	Форма.КэшДанныхГОСИС.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
	ИнициализироватьКешТекущейСтроки(Форма);
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("АдресСоответствияАкцизныхМарок", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КодМаркировкиДляУточнения", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМарки", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ТребуетсяПересчетМарокПослеУдаленияСтрок", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ДанныеВыбораПоМаркируемойПродукции", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СохраненВыборПоМаркируемойПродукции", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КоличествоВБазовыхЕдиницахГосИС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)),
		"Объект." + ИмяТабличнойЧасти, НСтр("ru = 'Количество в базовых единицах ГосИС'"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КоэффициентЕдиницыИзмеренияГосИС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)),
		"Объект." + ИмяТабличнойЧасти, НСтр("ru = 'Коэффициент единицы измерения ГосИС'"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Если ЕстьЕГАИС Или ЕстьИСМП Тогда
		ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
		ПроверкаИПодборПродукцииИС.ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииГосИС, ДобавляемыеРеквизиты);
		ПроверкаИПодборПродукцииИС.ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграцииГосИС, "Объект.Запасы", ДобавляемыеРеквизиты);
		
		Если ЕстьЕГАИС Тогда
			ПараметрыИнтеграцииГосИС.Вставить(
				Перечисления.ВидыПродукцииИС.Алкогольная,
				ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, Перечисления.ВидыПродукцииИС.Алкогольная));
		КонецЕсли;
		
		Если ЕстьИСМП Тогда
			Для Каждого ВидПродукцииИС Из ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
				ПараметрыИнтеграцииГосИС.Вставить(
					ВидПродукцииИС,
					ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, ВидПродукцииИС));
			КонецЦикла;
		КонецЕсли;
		
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	КонецЕсли;
	
	Если ЕстьЕГАИС Тогда
		
		Колонка = Новый РеквизитФормы("СопоставлениеАлкогольнаяПродукция", Новый ОписаниеТипов("Строка"), "Объект.Запасы");
		ДобавляемыеРеквизиты.Добавить(Колонка);
		
	КонецЕсли;
	
	Если ЕстьИСМП Тогда
		Реквизит = Новый РеквизитФормы("КонтролироватьСтатусыКодовМаркировкиВРознице", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды

	ИмяКомандыАкцизныеМарки = "ПроверитьАкцизныеМарки";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыАкцизныеМарки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Акцизные марки'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;

	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК" Тогда
		Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.БоковаяПанельКоманд);
		Кнопка.ИмяКоманды				= ИмяКомандыАкцизныеМарки;
		Кнопка.Ширина					= 10;
		Кнопка.Высота					= 4;
		Кнопка.ВысотаЗаголовка			= 2;
		Кнопка.РастягиватьПоВертикали	= Ложь;
		Кнопка.ТолькоВоВсехДействиях	= Ложь;
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.Запасы.КоманднаяПанель);
		Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
		Кнопка.ТолькоВоВсехДействиях = Ложь;
	Иначе
		Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.ЗапасыКоманднаяПанельКоманды);
		Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
		Кнопка.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
#КонецОбласти
	
#Область Элементы
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК" Тогда
		РодительКартинкиНабора = ЭлементыФормы.ГруппаРеквизитов;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДекорацияРазделитель",
			"Видимость",
			ЕстьИСМП);
	Иначе
		РодительКартинкиНабора = ЭлементыФормы.Запасы;
	КонецЕсли;
	
	ПутьКРеквизиту = "Объект.Запасы.СтатусПроверкиГосИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"ЗапасыСтатусПроверкиГосИС",
		Тип("ПолеФормы"),
		РодительКартинкиНабора,
		ЭлементыФормы.ЗапасыКартинкаНабора);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяПродукцияТЧ;
	КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
	
#КонецОбласти
	
#Область Инициализация
	
	ИнициализироватьФормуРМК(Форма);
	
#КонецОбласти
	
#Область Интерфейс
	
	ЭлементыФормы.ЗапасыСтатусПроверкиГосИС.Видимость = Форма.ИспользоватьАкцизныеМарки;
	ЭлементыФормы.ПроверитьАкцизныеМарки.Видимость    = Форма.ИспользоватьАкцизныеМарки И ЕстьИСМП;
	
	#КонецОбласти

КонецПроцедуры

// Проверяет соответствие количества маркируемой продукции из ТЧ Товары к количеству акцизных марок ТЧ АкцизныеМарки
//
// Параметры:
//   Объект - ДокументОбъект - форма документа для проверки.
//   Отказ  - Булево - Отказ из вызывающего метода.
//   НаДату - Дата - дата для определения обязательности маркировки.
//          - Неопределено - на текущую дату сеанса.
//
Процедура ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ, НаДату = Неопределено) Экспорт
	
	Ошибки = Неопределено;
	
	ИмяТаблицыАкцизныеМарки = "ШтрихкодыУпаковок";
	ПолеТаблицыАкцизныеМарки = "ШтрихкодУпаковки";
	Если НЕ ИнтеграцияИС.ЕстьРеквизитТабЧастиОбъекта(ПолеТаблицыАкцизныеМарки, Объект.Ссылка.Метаданные(), ИмяТаблицыАкцизныеМарки) Тогда
		ИмяТаблицыАкцизныеМарки = "АкцизныеМарки";
		ПолеТаблицыАкцизныеМарки = "АкцизнаяМарка";
	КонецЕсли;
	
	ВидыПродукцииИС = Новый Массив;
	Если НаДату = Неопределено Тогда
		Для Каждого ВидПродукцииИС Из ИнтеграцияИСМП.ВидыПродукцииОбязательнойМаркировки() Цикл
			ВидыПродукцииИС.Добавить(ВидПродукцииИС);
		КонецЦикла;
	Иначе
		Для Каждого ВидПродукцииИС Из ИнтеграцияИСМПВызовСервера.УчитываемыеВидыМаркируемойПродукции(НаДату, Ложь) Цикл
			ВидыПродукцииИС.Добавить(ВидПродукцииИС);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ВидыПродукцииИС.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИС.ЕстьРеквизитТабЧастиОбъекта("ЧастичноеВыбытиеКоличество", Объект.Ссылка.Метаданные(), ИмяТаблицыАкцизныеМарки) Тогда
		
		ШтрихкодыУпаковок = Новый Массив();
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицыАкцизныеМарки] Цикл
			НовыйЭлемент = ШтрихкодированиеИСМП.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаТаблицы);
			НовыйЭлемент.ШтрихкодУпаковки = СтрокаТаблицы[ПолеТаблицыАкцизныеМарки];
			ШтрихкодыУпаковок.Добавить(НовыйЭлемент);
		КонецЦикла;
		
	Иначе
		ШтрихкодыУпаковок = Объект[ИмяТаблицыАкцизныеМарки].Выгрузить().ВыгрузитьКолонку(ПолеТаблицыАкцизныеМарки);
	КонецЕсли;
	
	МаркированныеТовары = ЭлектронноеВзаимодействиеИСМП.Содержимое(ШтрихкодыУпаковок);
	
	// обработка ранее заведенных штрихкодов, содержащих в поле Серия ссылку на справочник ПартииНоменклатуры
	Для Каждого Элемент Из МаркированныеТовары Цикл
		Если ТипЗнч(Элемент.Серия) = Тип("СправочникСсылка.ПартииНоменклатуры")
			Или Элемент.Серия = Неопределено Тогда
				Элемент.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	МаркированныеТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МаркированныеТовары.Номенклатура КАК Номенклатура,
		|	МаркированныеТовары.Серия КАК Серия,
		|	МаркированныеТовары.Характеристика КАК Характеристика,
		|	МаркированныеТовары.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_МаркированныеТовары
		|ИЗ
		|	&МаркированныеТовары КАК МаркированныеТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Количество КАК Количество,
		|	Товары.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Серия КАК Серия,
		|	Серии.Количество КАК Количество,
		|	Серии.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_Серии
		|ИЗ
		|	&Серии КАК Серии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Характеристика КАК Характеристика,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Серии.Серия ЕСТЬ NULL
		|				ТОГДА ВТ_Товары.Количество * ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1)
		|			ИНАЧЕ ВТ_Серии.Количество
		|		КОНЕЦ) КАК Количество,
		|	ВЫБОР
		|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Серии.Серия
		|	КОНЕЦ КАК Серия
		|ПОМЕСТИТЬ ВТ_ТоварыСерии
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Серии КАК ВТ_Серии
		|		ПО ВТ_Товары.КлючСвязи = ВТ_Серии.КлючСвязи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ВТ_Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ВТ_Товары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
		|ГДЕ
		|	СправочникНоменклатура.ВидПродукцииИС В(&ВидыПродукцииИС)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.Характеристика,
		|	ВЫБОР
		|		КОГДА ВТ_Серии.Серия ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Серии.Серия
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТоварыСерии.Номенклатура КАК Номенклатура,
		|	ВТ_ТоварыСерии.Серия КАК Серия,
		|	ВТ_ТоварыСерии.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ВТ_ТоварыСерии.Количество, 0) КАК КоличествоТоваров,
		|	ЕСТЬNULL(ВТ_МаркированныеТовары.Количество, 0) КАК КоличествоМарок,
		|	ЕСТЬNULL(ВТ_МаркированныеТовары.Количество, 0) - ЕСТЬNULL(ВТ_ТоварыСерии.Количество, 0) КАК Разность
		|ПОМЕСТИТЬ ВТ_Разность
		|ИЗ
		|	ВТ_ТоварыСерии КАК ВТ_ТоварыСерии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркированныеТовары КАК ВТ_МаркированныеТовары
		|		ПО ВТ_ТоварыСерии.Номенклатура = ВТ_МаркированныеТовары.Номенклатура
		|			И ВТ_ТоварыСерии.Характеристика = ВТ_МаркированныеТовары.Характеристика
		|			И ВТ_ТоварыСерии.Серия = ВТ_МаркированныеТовары.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Разность.Номенклатура КАК Номенклатура,
		|	ВТ_Разность.Характеристика КАК Характеристика,
		|	ВТ_Разность.Серия КАК Серия,
		|	ВТ_Разность.КоличествоТоваров КАК КоличествоТоваров,
		|	ВТ_Разность.КоличествоМарок КАК КоличествоМарок,
		|	ВТ_Разность.Разность КАК Разность
		|ИЗ
		|	ВТ_Разность КАК ВТ_Разность
		|ГДЕ
		|	НЕ ВТ_Разность.Разность = 0";
	
	Запрос.УстановитьПараметр("Товары", Объект.Запасы.Выгрузить());
	Запрос.УстановитьПараметр("Серии", Объект.СерииНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("МаркированныеТовары", МаркированныеТовары);
	Запрос.УстановитьПараметр("ВидыПродукцииИС", ВидыПродукцииИС);
	
	ТекстОшибки = "";
	Шаблон = НСтр("ru = 'Для %1 должно быть указано марок - %2, а указано - %3.';
						|en = '%2 labels must be specified for %1. The number specified is %3.'");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					Выборка.Номенклатура,
					Выборка.КоличествоТоваров,
					Выборка.КоличествоМарок);
					
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Товары", ТекстОшибки);
					
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Функция ВидыПродукцииВЗапасах(Запасы) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА НЕ Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА Номенклатура.ВидПродукцииИС
	|		КОГДА Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПродукцииИС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И (НЕ Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ИЛИ Номенклатура.АлкогольнаяПродукция)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", Запасы.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Результат.НайтиПоЗначению(Выборка.ВидПродукцииИС) = Неопределено Тогда
			Результат.Добавить(Выборка.ВидПродукцииИС,
					СинонимПеречисления(Выборка.ВидПродукцииИС));
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыПродукцииИС Цикл
			Результат.Добавить(ЗначениеПеречисления, СинонимПеречисления(ЗначениеПеречисления))
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// ВЕТИС
	СписокОбъектов.Добавить(Документы.ВходящаяТранспортнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Документы.ЗапросСкладскогоЖурналаВЕТИС);
	СписокОбъектов.Добавить(Документы.ИнвентаризацияПродукцииВЕТИС);
	СписокОбъектов.Добавить(Документы.ИсходящаяТранспортнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Документы.ПроизводственнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Справочники.ВетеринарноСопроводительныйДокументВЕТИС);
	// Конец ВЕТИС
	
	// ГИСМ
	СписокОбъектов.Добавить(Документы.МаркировкаТоваровГИСМ);
	СписокОбъектов.Добавить(Документы.ПеремаркировкаТоваровГИСМ);
	// Конец ГИСМ
	
	// ЕГАИС
	СписокОбъектов.Добавить(Документы.АктПостановкиНаБалансЕГАИС);
	СписокОбъектов.Добавить(Документы.АктСписанияЕГАИС);
	СписокОбъектов.Добавить(Документы.ВозвратИзРегистра2ЕГАИС);
	СписокОбъектов.Добавить(Документы.ЗапросАкцизныхМарокЕГАИС);
	СписокОбъектов.Добавить(Документы.ОстаткиЕГАИС);
	СписокОбъектов.Добавить(Документы.ОтчетЕГАИС);
	СписокОбъектов.Добавить(Документы.ПередачаВРегистр2ЕГАИС);
	СписокОбъектов.Добавить(Документы.ТранспортнаяНакладнаяЕГАИС);
	СписокОбъектов.Добавить(Документы.ТТНВходящаяЕГАИС);
	СписокОбъектов.Добавить(Документы.ТТНИсходящаяЕГАИС);
	СписокОбъектов.Добавить(Документы.ЧекЕГАИС);
	СписокОбъектов.Добавить(Документы.ЧекЕГАИСВозврат);
	СписокОбъектов.Добавить(Документы.УведомлениеОПланируемомИмпортеЕГАИС);
	СписокОбъектов.Добавить(Документы.ОтчетОбИмпортеЕГАИС);
	СписокОбъектов.Добавить(Документы.ОтчетОПроизводствеЕГАИС);
	// Конец ЕГАИС
	
	// ИСМП
	СписокОбъектов.Добавить(Документы.ВыводИзОборотаИСМП);
	СписокОбъектов.Добавить(Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ);
	СписокОбъектов.Добавить(Документы.МаркировкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.ПеремаркировкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.СписаниеКодовМаркировкиИСМП);
	СписокОбъектов.Добавить(Документы.ОтгрузкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.ВозвратВОборотИСМП);
	СписокОбъектов.Добавить(Документы.ПриемкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.УточнениеСведенийОКодахМаркировкиИСМП);
	// Конец ИСМП
	
	// ИнтеграцияЗерно
	СписокОбъектов.Добавить(Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО);
	СписокОбъектов.Добавить(Документы.ЗапросОстатковПартийЗЕРНО);
	СписокОбъектов.Добавить(Документы.ОформлениеСДИЗЗЕРНО);
	СписокОбъектов.Добавить(Документы.ПогашениеСДИЗЗЕРНО);
	СписокОбъектов.Добавить(Документы.СписаниеПартийЗЕРНО);
	СписокОбъектов.Добавить(Документы.ФормированиеПартийЗЕРНО);
	СписокОбъектов.Добавить(Документы.ФормированиеПартийИзДругихПартийЗЕРНО);
	СписокОбъектов.Добавить(Документы.ФормированиеПартийПриПроизводствеЗЕРНО);
	СписокОбъектов.Добавить(Справочники.ДоговорыХраненияПартийЗЕРНО);
	СписокОбъектов.Добавить(Справочники.СДИЗЗЕРНО);
	СписокОбъектов.Добавить(Справочники.РезультатыИсследованийЗЕРНО);
	СписокОбъектов.Добавить(Справочники.РеестрПартийЗЕРНО);
	СписокОбъектов.Добавить(Справочники.РеестрМестФормированияПартийЗЕРНО);
	// Конец ИнтеграцияЗерно
	
КонецПроцедуры

Функция ОпределениеВидаПродукцииТекстаЗапроса(ПутьКПолюНоменклатура = "Номенклатура", ЗНАЧ ВидыПродукцииИС) Экспорт
	
	Если ТипЗнч(ВидыПродукцииИС) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ВидыПродукцииИС = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыПродукцииИС);
	КонецЕсли;
	
	ТекстУсловия = "";
	Для Каждого ВидПродукцииИС Из ВидыПродукцииИС Цикл
		Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			Продолжить;
		КонецЕсли;
		ТекстУсловия = ТекстУсловия
			+ ?(ТекстУсловия = "", "", ", ")
			+ "ЗНАЧЕНИЕ(" + ПолучитьПолноеИмяПредопределенногоЗначения(ВидПродукцииИС) + ")";
	КонецЦикла;
	
	Если ТекстУсловия = "" Тогда
		ОпределениеВидаПродукцииТекстаЗапроса = "ЛОЖЬ";
	Иначе
		ОпределениеВидаПродукцииТекстаЗапроса = СтрШаблон("%1.ВидПродукцииИС В (%2)", ПутьКПолюНоменклатура, ТекстУсловия);
	КонецЕсли;
	
	Возврат ОпределениеВидаПродукцииТекстаЗапроса;
	
КонецФункции

// Возвращает количество продукции по данным штрихкода.
//
// ДанныеШтрихкода - СтрокаДерева, Структура - Произвольные данные.
//
Функция КоличествоПродукцииПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	ШаблонДанных = Новый Структура;
	ШаблонДанных.Вставить("ПроизвольнаяЕдиницаУчета", Ложь);
	ШаблонДанных.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ШаблонДанных.Вставить("Количество",                        0);
	ШаблонДанных.Вставить("КоличествоПотребительскихУпаковок", 0);
	ШаблонДанных.Вставить("КоличествоПотребительскихУпаковокПоДаннымИБ", 0);
	
	ЗаполнитьЗначенияСвойств(ШаблонДанных, ДанныеШтрихкода);
	
	Если ЗначениеЗаполнено(ШаблонДанных.ВидПродукции) И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ШаблонДанных.ВидПродукции) Тогда
		ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
			ДанныеШтрихкода,
			ПараметрыСканирования,,
			Истина);
	Иначе
		ЭтоСтрокаДанныхЧастичногоВыбытия = Ложь;
	КонецЕсли;
	
	Если (ШаблонДанных.ПроизвольнаяЕдиницаУчета
		Или ЭтоСтрокаДанныхЧастичногоВыбытия) И ЗначениеЗаполнено(ШаблонДанных.Количество) Тогда
		КоличествоПродукции = ШаблонДанных.Количество;
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ШаблонДанных.ВидПродукции, Истина)
		И ЗначениеЗаполнено(ШаблонДанных.КоличествоПотребительскихУпаковок) Тогда
		КоличествоПродукции = ШаблонДанных.КоличествоПотребительскихУпаковок;
	ИначеЕсли ЗначениеЗаполнено(ШаблонДанных.КоличествоПотребительскихУпаковокПоДаннымИБ) Тогда
		КоличествоПродукции = ШаблонДанных.КоличествоПотребительскихУпаковокПоДаннымИБ;
	Иначе
		КоличествоПродукции = 1;
	КонецЕсли;
	
	Возврат КоличествоПродукции;
	
КонецФункции

// Возвращает массив строк табличной части с соответствующим видом продукции.
//
// Возвращаемое значение - Массив
//
// Параметры:
//  ТаблицаТовары - ДанныеФормыКоллекция, ТабличнаяЧасть;
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС.
//
Функция СтрокиТоваровПоВидуПродукции(ТабличнаяЧасть, ВидПродукции, ТолькоМаркируемая = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", ТабличнаяЧасть.Выгрузить());
	Запрос.УстановитьПараметр("ВидПродукции", ВидПродукции);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|			И (СправочникНоменклатура.ВидПродукцииИС = &ВидПродукции)
	|ГДЕ
	|	&УсловиеМаркируемаяПродукция";
	
	Если ТолькоМаркируемая Тогда
		УсловиеМаркируемаяПродукция = ИнтеграцияИСУНФ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("СправочникНоменклатура");
	Иначе
		УсловиеМаркируемаяПродукция = "Истина";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеМаркируемаяПродукция", УсловиеМаркируемаяПродукция);
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокиПродукции = Новый Массив;
	ПараметрыПоиска = Новый Структура("Номенклатура");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Выборка);
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиПродукции, НайденныеСтроки, Истина);
	КонецЦикла;
	
	Возврат СтрокиПродукции;
	
КонецФункции

// Возвращает коллекцию данных для регистрация ШтрихкодаУпаковки
// продукции из натурального меха.
//
Функция ДанныеШтрихкодаПродукцииИзНатуральногоМеха() Экспорт
	
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("Номенклатура");
	ДанныеШтрихкода.Вставить("Характеристика");
	ДанныеШтрихкода.Вставить("Серия");
	ДанныеШтрихкода.Вставить("Штрихкод");
	ДанныеШтрихкода.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха);
	ДанныеШтрихкода.Вставить("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
	ДанныеШтрихкода.Вставить("Количество", 1);
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Регистрирует серию как КодМаркировки (ШтрихкодУпаковки).
//
// Параметры:
//  Серия - СправочникСсылка.СерииНоменклатуры;
//
// Возвращаемое значение:
//  Булево - результат регистрации.
//
Функция ЗарегистрироватьШтрихкодУпаковкиПоСерии(Серия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлементЗарегистрирован = Ложь;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
		И НЕ ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) Тогда
		Возврат ЭлементЗарегистрирован;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	СерииНоменклатуры.НомерКиЗГИСМ КАК Штрихкод,
	|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
	|	СерииНоменклатуры.RFIDUser КАК RFIDUser,
	|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
	|	СерииНоменклатуры.EPCGTIN КАК EPCGTIN
	|ПОМЕСТИТЬ втДанныеСерии
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО Номенклатура.Ссылка = СерииНоменклатуры.Владелец
	|ГДЕ
	|	СерииНоменклатуры.Ссылка = &Серия
	|	И СерииНоменклатуры.НомерКиЗГИСМ <> """"
	|	И Номенклатура.ИспользоватьСерииНоменклатуры
	|	И Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|	И НЕ Номенклатура.ИспользоватьХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втДанныеСерии.Номенклатура КАК Номенклатура,
	|	втДанныеСерии.Серия КАК Серия,
	|	втДанныеСерии.Штрихкод КАК Штрихкод
	|ИЗ
	|	втДанныеСерии КАК втДанныеСерии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО втДанныеСерии.Штрихкод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втДанныеСерии.Штрихкод КАК ЗначениеШтрихкода,
	|	втДанныеСерии.RFIDTID КАК RFIDTID,
	|	втДанныеСерии.RFIDUser КАК RFIDUser,
	|	втДанныеСерии.RFIDEPC КАК RFIDEPC,
	|	втДанныеСерии.EPCGTIN КАК EPCGTIN
	|ИЗ
	|	втДанныеСерии КАК втДанныеСерии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеRFIDИСМП КАК ДанныеRFIDИСМП
	|		ПО втДанныеСерии.RFIDTID = ДанныеRFIDИСМП.RFIDTID
	|ГДЕ
	|	НЕ втДанныеСерии.RFIDTID = """"
	|	И ДанныеRFIDИСМП.RFIDTID ЕСТЬ NULL";
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	// Создание ШтрихкодаУпаковки.
	ВыборкаШтрихкоды = РезультатПакета[РезультатПакета.Количество() - 2].Выбрать();
	Если ВыборкаШтрихкоды.Следующий() Тогда
		ДанныеШтрихкода = ИнтеграцияИСУНФ.ДанныеШтрихкодаПродукцииИзНатуральногоМеха();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, ВыборкаШтрихкоды);
		ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеШтрихкода);
		Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
			ЭлементЗарегистрирован = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Регистрация данных RFID.
	ВыборкаRFID = РезультатПакета[РезультатПакета.Количество() - 1].Выбрать();
	Если ВыборкаRFID.Следующий() Тогда
		ДанныеRFID = РегистрыСведений.ДанныеRFIDИСМП.НовыйЭлементЗаписиДанных();
		ЗаполнитьЗначенияСвойств(ДанныеRFID, ВыборкаRFID);
		
		Попытка
			РегистрыСведений.ДанныеRFIDИСМП.ЗаписатьДанные(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеRFID));
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать данные RFID в регистр ""Данные RFID ИС МП"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементЗарегистрирован;
	
КонецФункции

// Возвращает признак выполненной инициализации формы.
// 
// Параметры:
//   Форма - УправляемаяФорма.
//   СтандартнаяОбработка - признак инициализации формы стандартными средствами ГОСИС.
//
// Возвращаемое значение:
//   Булево   - Истина - инициализация формы выполнена ранее.
//              Ложь - форма не инициализирована.
//
Функция ИнициализацияФормыВыполнена(Форма, СтандартнаяОбработка = Истина) Экспорт
	
	Если Форма.КэшДанныхГОСИС = Неопределено Тогда
		Форма.КэшДанныхГОСИС = Новый Структура;
	КонецЕсли;
	
	ИнициализацияВыполнена = Форма.КэшДанныхГОСИС.Свойство("Инициализация");
	
	Если НЕ ИнициализацияВыполнена Тогда
		Форма.КэшДанныхГОСИС.Вставить("Инициализация");
		Если СтандартнаяОбработка Тогда
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияЕГАИС");
			КонецЕсли;
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияИСМП");
			КонецЕсли;
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияВЕТИС");
			КонецЕсли;
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияГИСМ");
			КонецЕсли;
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияЗЕРНО");
			КонецЕсли;
		Иначе
			Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияЕГАИС");
			КонецЕсли;
			Если ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции() Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияИСМП");
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияВЕТИС");
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
				И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияГИСМ");
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО") Тогда
				Форма.КэшДанныхГОСИС.Вставить("ИнтеграцияЗЕРНО");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИнициализацияВыполнена;
	
КонецФункции

// Возвращает вид продукции ИС, соответствующий виду алкогольной продукции.
// 
// Параметры:
//   ВидАлкогольнойПродукции - СправочникСсылка.ВидыАлкогольнойПродукции.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыПродукцииИС.
//
Функция ВидПродукцииИСПоВидуАлкогольнойПродукции(ВидАлкогольнойПродукции) Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	
КонецФункции

// Возвращает ИНН, КПП, GLN по организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация.
//  Подразделение - ОпределяемыйТип.Подразделение - Подразделение организации.
//
// Возвращаемое значение:
//   Структура:
//     ИНН  - Строка - ИНН Организация.
//     КПП  - Строка - КПП Организация.
//     GLN  - Строка - GLN Организация.
//
Функция ИННКППGLNОрганизации(Организация, Подразделение) Экспорт
	
	Результат = Новый Структура;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	ОрганизацииДляОбменаГИСМ.GLN КАК GLN
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииДляОбменаГИСМ КАК ОрганизацииДляОбменаГИСМ
	|		ПО Организации.Ссылка = ОрганизацииДляОбменаГИСМ.Организация
	|			И (&УсловиеПодразделение)
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПодразделение", "ОрганизацииДляОбменаГИСМ.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПодразделение", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ИНН", Выборка.ИНН);
		Результат.Вставить("КПП", Выборка.КПП);
		Результат.Вставить("GLN", Выборка.GLN);
	Иначе
		Результат.Вставить("ИНН", "");
		Результат.Вставить("КПП", "");
		Результат.Вставить("GLN", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет указания характеристик в табличной части документа.
//
// Параметры:
//  Объект                         - ДокументОбъект - документ, в котором выполняется проверка.
//  МассивНепроверяемыхРеквизитов  - Массив - содержит реквизиты, для которых в метаданных установлен признак проверки,
//                                            но они исключаются из платформенной проверки.
//  ИмяТаблицы                     - Строка - имя табличной части, которая содержит заказываемые КиЗ.
//  Отказ                          - Булево - устанавливается в Ложь, если проверка завершилась неудачей.
//
Процедура ПроверитьЗаполнениеХарактеристик(Объект, МассивНепроверяемыхРеквизитов, ИмяТаблицы, Отказ) Экспорт
	
	Если ИмяТаблицы = "" Тогда
		ШаблонСообщения = НСтр("ru = 'Не заполнено поле ""Характеристика""'");
		ТаблицаДляПроверки = Новый ТаблицаЗначений();
		ТаблицаДляПроверки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаДляПроверки.Колонки.Добавить("Номенклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ТаблицаДляПроверки.Колонки.Добавить("Характеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		
		СтрокаПроверки = ТаблицаДляПроверки.Добавить();
		СтрокаПроверки.НомерСтроки = 1;
		ЗаполнитьЗначенияСвойств(СтрокаПроверки, Объект);
		
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Характеристика"" в строке %1 списка ""%2""'");
		ТаблицаДляПроверки = Объект[ИмяТаблицы].Выгрузить(, "НомерСтроки, Номенклатура, Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТаблицы+".Характеристика");
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТаблицы] Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		ПроверятьЗаполнениеХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ПроверятьЗаполнениеХарактеристики");
		Если ПроверятьЗаполнениеХарактеристики И Не ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
			
			Если ИмяТаблицы = "" Тогда
				ТекстСообщения = ШаблонСообщения;
				Поле = "Характеристика";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТЧ.НомерСтроки, ИмяТаблицы);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, СтрокаТЧ.НомерСтроки, "Характеристика");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Создает фиксированную структуру, содержащую свойства одноименные колонкам таблицы формы.
//
//  Параметры:
//   - Форма - УправляемаяФорма - форма, содержащая таблицу и служебный реквизит,
//                                имя которого образовано именем таблицы с префиксом "Кеш".
//    ИмяТабличнойЧасти - Строка - имя таблицы формы, текущие данные которой необходимо скопировать в служебный реквизит
//                                 формы.
//		Имя служебного реквизита должно состоять из префикса Кеш и имени табличной части.
//
Процедура ИнициализироватьКешТекущейСтроки(Форма, ПутьКТабличнойЧасти = "Объект") Экспорт
	
	ИмяТабличнойЧасти = Форма.КэшДанныхГОСИС.ИмяТабличнойЧасти;
	
	Если ЗначениеЗаполнено(ПутьКТабличнойЧасти) Тогда
		МассивРеквизитовФормы = Форма.ПолучитьРеквизиты(ПутьКТабличнойЧасти + "." + ИмяТабличнойЧасти);
	Иначе
		МассивРеквизитовФормы = Форма.ПолучитьРеквизиты(ИмяТабличнойЧасти);
	КонецЕсли;
	
	РезультатСтруктура = Новый Структура;
	Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
		РезультатСтруктура.Вставить(РеквизитФормы.Имя, Истина);
	КонецЦикла;
	
	Если НЕ РезультатСтруктура.Свойство("МаркируемаяПродукция") Тогда
		РезультатСтруктура.Вставить("МаркируемаяПродукция", Ложь);
	КонецЕсли;
	
	Форма.КэшДанныхГОСИС.Вставить("ТекущаяСтрока", Новый ФиксированнаяСтруктура(РезультатСтруктура));
	
КонецПроцедуры

Функция НастройкиИсточникаКешаЧека() Экспорт
	
	Результат = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
	
	Результат.Штрихкоды =        "АкцизныеМарки";
	Результат.ШтрихкодУпаковки = "АкцизнаяМарка";
	Результат.Товары           = "Запасы";
	Результат.Количество       = "КоличествоВБазовыхЕдиницахГосИС";
	Результат.ЧастичноеВыбытие = Истина;
	Результат.ИспользоватьОСУ  = Ложь;
	
	Возврат Результат;
	
КонецФункции

Процедура ПрименитьКешШтрихкодовУпаковок(Форма, ОбновлениеТаблицыТоваров = Ложь) Экспорт

	ПараметрыИнтеграцииФормыПроверки = Неопределено;
	Для Каждого ВидПродукции Из ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
		ПараметрыИнтеграцииФормыПроверки = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если ПараметрыИнтеграцииФормыПроверки<>Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыИнтеграцииФормыПроверки = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
	Настройки.Объект           = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
	Настройки.Штрихкоды        = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок;
	Настройки.ШтрихкодУпаковки = ПараметрыИнтеграцииФормыПроверки.ИмяКолонкиШтрихкодУпаковки;
	Настройки.Товары           = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары;
	Настройки.Серии            = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиСерии;
	Настройки.ЧастичноеВыбытие = ПараметрыИнтеграцииФормыПроверки.ДоступноЧастичноеВыбытие;
	Настройки.ИспользоватьОСУ  = ПараметрыИнтеграцииФормыПроверки.ДоступныОбъемноСортовыеКоды;
	Настройки.Количество       = "КоличествоВБазовыхЕдиницахГосИС";
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, Настройки, ОбновлениеТаблицыТоваров);
	
КонецПроцедуры

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых (на любом уровне вложенности, 
//   в т.ч. частично) находится продукция требуемого вида
// 
// Параметры:
//   ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
// Возвращаемое значение:
//   Массив - Массив - подходящие элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
Функция ШтрихкодыСодержащиеВидыПродукции(Знач ШтрихкодыДляПроверки, Знач ВидыПродукции = Неопределено) Экспорт
	
	Если НЕ ШтрихкодыДляПроверки.Количество() Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	ПодходящиеВидыПродукции = Новый Массив();
	Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		ПодходящиеВидыПродукции = ВидыПродукции;
	ИначеЕсли ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ПодходящиеВидыПродукции.Добавить(ВидыПродукции);
	КонецЕсли;

	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодходящиеВидыПродукции", ПодходящиеВидыПродукции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|		ЕСТЬNULL(ШтрихкодыУпаковок.Номенклатура.ВидПродукцииИС В (&ПодходящиеВидыПродукции), ЛОЖЬ) КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура УдалитьСтрокиАкцизныхМарокПоВидуПродукции(АкцизныеМарки, ВидПродукции, ИмяКолонкиАкцизнаяМарка = "АкцизнаяМарка") Экспорт
	
	СписокАкцизныхМарокНаУдаление = ШтрихкодыСодержащиеВидыПродукции(АкцизныеМарки.Выгрузить().ВыгрузитьКолонку(ИмяКолонкиАкцизнаяМарка), ВидПродукции);
	
	Для Каждого АкцизнаяМарка Из СписокАкцизныхМарокНаУдаление Цикл
		
		УдаляемыеСтроки = АкцизныеМарки.НайтиСтроки(Новый Структура(ИмяКолонкиАкцизнаяМарка, АкцизнаяМарка));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			АкцизныеМарки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиЗапасовПоВидуПродукции(Запасы, ВидПродукции) Экспорт
	
	ИмяПоляОтбора = XMLСтрока(ВидПродукции) + "Продукция";
	
	ОтборПоВидуПродукции = Новый Структура(ИмяПоляОтбора, 1);
	УдаляемыеСтроки = Запасы.НайтиСтроки(ОтборПоВидуПродукции);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Запасы.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, Знач СтрокаДерева, СтрокиРезультат = Неопределено)
	
	Если СтрокиРезультат <> Неопределено Тогда
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Найденные = ТЧАкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", СтрокаДерева.ШтрихкодУпаковки));
	
	Если Найденные.Количество() > 0 Тогда
		СтрокиРезультат = Найденные;
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, СтрокаДерева.Родитель, СтрокиРезультат);
	
КонецФункции

// Получает GTIN для таблицы переданных товаров
//
// Параметры:
//  Товары - ТаблицаЗначений - таблица товаров с колонками
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура (маркируемый товар).
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры (маркируемого товара).
//
// Возвращаемое значение:
//   Соответствие - данные возможных GTIN:
//    * Ключ     - Строка    - GTIN всех товаров входящей таблицы
//    * Значение - Структура - пара (номенклатура,характеристика) к которой относится GTIN
//
Функция GTINМаркированныхТоваров(Товары, ИспользоватьХарактеристику = Истина) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Товары.Колонки.Найти("Характеристика") = Неопределено Тогда
		Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Штрихкоды.ЕдиницаИзмерения КАК Упаковка,
	|	ЕСТЬNULL(Штрихкоды.ЕдиницаИзмерения.Коэффициент, 1) КАК Коэффициент
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|			И (ВЫБОР
	|				КОГДА &ИспользоватьХарактеристику
	|					ТОГДА Товары.Характеристика = Штрихкоды.Характеристика
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристику", ИспользоватьХарактеристику);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Выборка.Штрихкод) Тогда
			ДанныеШтрихкода = Новый Структура;
			ДанныеШтрихкода.Вставить("Номенклатура",   Выборка.Номенклатура);
			ДанныеШтрихкода.Вставить("Характеристика", Выборка.Характеристика);
			ДанныеШтрихкода.Вставить("Упаковка",       Выборка.Упаковка);
			ДанныеШтрихкода.Вставить("Коэффициент",    Выборка.Коэффициент);
			
			Результат.Вставить(Выборка.Штрихкод, ДанныеШтрихкода);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьРезультатПроверкиИПодбора(ДеревоУпаковок, ПараметрыШтрихкодаДляОбработки, Форма = Неопределено) Экспорт
	
	Объект              = ПараметрыШтрихкодаДляОбработки.Объект;
	РезультатОбработки  = ПараметрыШтрихкодаДляОбработки.РезультатОбработки;
	ПараметрыЗаполнения = ПараметрыШтрихкодаДляОбработки.ПараметрыЗаполнения;
	НастройкиКэша       = ПараметрыШтрихкодаДляОбработки.НастройкиКэша;
	ВидПродукцииИС      = ПараметрыШтрихкодаДляОбработки.ВидПродукцииИС;
	
	// Очистим акцизные марки.
	ИнтеграцияИСУНФ.УдалитьСтрокиАкцизныхМарокПоВидуПродукции(Объект[НастройкиКэша.Штрихкоды], ВидПродукцииИС, НастройкиКэша.ШтрихкодУпаковки);
	
	// Заполним кэш упаковок.
	КэшУпаковок = Объект[НастройкиКэша.Товары].Выгрузить();
	Если Форма = Неопределено Тогда
		КэшУпаковок.Колонки.Добавить("КоличествоВБазовыхЕдиницахГосИС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
		КэшУпаковок.Колонки.Добавить("КоэффициентЕдиницыИзмеренияГосИС", ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
		ИнтеграцияИСУНФ.ЗаполнитьСлужебныеРеквизитыВКоллекции(Неопределено, КэшУпаковок,
			Новый Структура("КоэффициентЕдиницыИзмеренияГосИС, КоличествоВБазовыхЕдиницахГосИС"));
	КонецЕсли;
	ПараметрыШтрихкодаДляОбработки.Вставить("КэшУпаковок", КэшУпаковок);
	
	// Обнулим количество в товарах.
	Если Форма = Неопределено Тогда
		СтрокиПоВидуПродукции = СтрокиТоваровПоВидуПродукции(Объект[НастройкиКэша.Товары], ВидПродукцииИС, Истина);
	Иначе
		ОтборПоВидуПродукции  = Новый Структура;
		ОтборПоВидуПродукции.Вставить("ВидПродукцииИС", ВидПродукцииИС);
		ОтборПоВидуПродукции.Вставить("МаркируемаяПродукция", Истина);
		СтрокиПоВидуПродукции = Объект[НастройкиКэша.Товары].НайтиСтроки(ОтборПоВидуПродукции);
	КонецЕсли;
	
	Для Каждого СтрокаПоВидуПродукции Из СтрокиПоВидуПродукции Цикл
		СтрокаПоВидуПродукции.Количество = 0;
		Если НЕ Форма = Неопределено Тогда
			СтрокаПоВидуПродукции.КоличествоВБазовыхЕдиницахГосИС = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Форма = Неопределено Тогда
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
	КонецЕсли;
	
	// Обработаем дерево упаковок.
	ИнтеграцияИСУНФ.ОбработатьДанныеШтрихкодовДереваУпаковок(ДеревоУпаковок, ПараметрыШтрихкодаДляОбработки, Форма);
	
	// Удалим строки, не соответствующие строкам подбора.
	Для Каждого СтрокаПоВидуПродукции Из СтрокиПоВидуПродукции Цикл
		ИндексИзмененнойСтроки = РезультатОбработки.ИзмененныеСтроки.Найти(СтрокаПоВидуПродукции);
		СтрокаКэша = КэшУпаковок.Найти(СтрокаПоВидуПродукции.НомерСтроки, "НомерСтроки");
		Если ИндексИзмененнойСтроки = Неопределено Тогда
			Объект[НастройкиКэша.Товары].Удалить(СтрокаПоВидуПродукции);
		ИначеЕсли СтрокаПоВидуПродукции.Количество = СтрокаКэша.Количество Тогда
			// Если количество не изменилось, не будем вызывать обработку для строки.
			РезультатОбработки.ИзмененныеСтроки.Удалить(ИндексИзмененнойСтроки);
		КонецЕсли;
	КонецЦикла;
	
	// Обработаем строки.
	СтрокиДляОбработки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, РезультатОбработки.ДобавленныеСтроки, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, РезультатОбработки.ИзмененныеСтроки, Истина);
	
	СлужебныеРеквизиты = Новый Структура("МаркируемаяПродукция, ВидПродукцииИС, КоэффициентЕдиницыИзмеренияГосИС, КоличествоВБазовыхЕдиницахГосИС");
	Для Каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
		НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(Объект, НастройкиКэша.Товары, СтрокаДляОбработки,
			НЕ РезультатОбработки.ИзмененныеСтроки.Найти(СтрокаДляОбработки) = Неопределено);
		ИнтеграцияИСУНФКлиентСервер.ЗаполнитьСлужебныеРеквизитыСтроки(Форма, СтрокаДляОбработки, СлужебныеРеквизиты);
	КонецЦикла;
	
	Если Форма = Неопределено Тогда
		
		// Запишем документ.
		Если Не ПараметрыШтрихкодаДляОбработки.Свойство("НеПерезаписыватьДокумент") Тогда 
			Если Объект.Проведен Тогда
				
				Если Объект.ПроверитьЗаполнение() Тогда
					РежимЗаписи = РежимЗаписиДокумента.Проведение;
				Иначе
					РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
				КонецЕсли;
				
				Попытка
					Объект.Записать(РежимЗаписи);
				Исключение
					ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Попытка
						Объект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						ВызватьИсключение ОписаниеОшибки;
					КонецПопытки;
				КонецПопытки;
				
			Иначе
				Объект.Записать(РежимЗаписиДокумента.Запись)
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если СтрокиДляОбработки.Количество() > 0 Тогда
			Форма.КэшДанныхГОСИС.Вставить("ТребуетсяПересчет", Истина);
		КонецЕсли;
		
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
		
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
		ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьФормуРМК(Форма)
	
	Если Форма.КэшДанныхГОСИС.Свойство("ИнтеграцияИСМП") Тогда
		Форма.КонтролироватьСтатусыКодовМаркировкиВРознице = ИнтеграцияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице();
		Форма.ИспользоватьАкцизныеМарки = Истина;
	КонецЕсли;
	
	Если Форма.КэшДанныхГОСИС.Свойство("ИнтеграцияЕГАИС") Тогда
		Форма.ИспользоватьАкцизныеМарки = Истина;
	КонецЕсли;
	
	СлужебныеРеквизиты = Новый Структура("МаркируемаяПродукция, ВидПродукцииИС, КоэффициентЕдиницыИзмеренияГосИС, КоличествоВБазовыхЕдиницахГосИС");
	ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, Форма.Объект.Запасы, СлужебныеРеквизиты);
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека(), Истина);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека());
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	
КонецПроцедуры

Функция СинонимПеречисления(ЗначениеПеречисления)
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Синоним;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийМаркировкаТоваровИСМП(ПараметрыУказанияСерий)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА НЕ СпрНоменклатура.ИспользоватьСерииНоменклатуры
	|				ИЛИ СпрНоменклатура.ИспользоватьСерииНоменклатуры ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 21
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область Обмен_Кладовщик

// Регистрирует документ поступления маркируемой алкогольной продукции на обмен
// с приложением 1С:Кладовщик
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - накладная поступления алкогольной продукции.
//
Процедура ЗарегистрироватьПоступлениеАлкогольнойПродукции(ТТНВходящаяЕГАИС)
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	НачатьТранзакцию();
	Если Не ЗначениеЗаполнено(ТТНВходящаяЕГАИС.ДокументОснование) Тогда
		ПоступлениеТоваров = СоздатьПоступлениеТоваровПоТТН(ТТНВходящаяЕГАИС);
		Если ПоступлениеТоваров = Неопределено Тогда
			Отказ = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Не удалось создать поступление по накладной для отправки в 1С:Кладовщик'");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТТНВходящаяЕГАИС.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		ПоступлениеТоваров = ТТНВходящаяЕГАИС.ДокументОснование;
	Иначе
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось подобрать поступление по накладной для отправки в 1С:Кладовщик'");
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	РегистрацияПрошлаУспешно = Ложь;
	ЗарегистрироватьПоступлениеМаркируемойПродукции(ПоступлениеТоваров, РегистрацияПрошлаУспешно);
	
	Если РегистрацияПрошлаУспешно Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует документ поступления маркируемой продукции на обмен
// с приложением 1С:Кладовщик
//
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПриходнаяНакладная - документ поступления маркируемой продукции.
//  РегистрацияПрошлаУспешно - Булево - признак успешно выполненной регистрации.
//
Процедура ЗарегистрироватьПоступлениеМаркируемойПродукции(ПоступлениеТоваров, РегистрацияПрошлаУспешно = Ложь)
	
	Если ПоступлениеТоваров.Запасы.Количество() = 0 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось зарегистрировать поступление к отправке в 1С:Кладовщик.
			|Причина: табличная часть ""Запасы"" не заполнена.'");
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	МассивУзлов = Новый Массив;
	ИмяПланаОбмена = УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена();
	МобильноеПриложение = Справочники.МобильныеПриложения.НайтиПоРеквизиту("ВариантНастройки", "Кладовщик");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильноеПриложение", МобильноеПриложение);
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбменСМобильнымиПриложениями.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена + " КАК ОбменСМобильнымиПриложениями
	|ГДЕ
	|	ОбменСМобильнымиПриложениями.МобильноеПриложение = &МобильноеПриложение
	|	И НЕ ОбменСМобильнымиПриложениями.ЭтотУзел
	|	И НЕ ОбменСМобильнымиПриложениями.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Склад = ПоступлениеТоваров.СтруктурнаяЕдиница;
	Магазин = ПоступлениеТоваров.СтруктурнаяЕдиница;
	Организация = ПоступлениеТоваров.Организация;
	
	Пока Выборка.Следующий() Цикл
		ФильтрПройден = УправлениеМобильнымиПриложениямиУНФ.ПроверитьФильтрПоСкладу(
			Выборка.Ссылка, Склад, Магазин, Организация);
		Если ФильтрПройден Тогда
			МассивУзлов.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзлов.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ПоступлениеТоваров);
		ТекстСообщения = НСтр("ru = 'Документ успешно зарегистрирован к отправке в 1С:Кладовщик'");
		РегистрацияПрошлаУспешно = Истина;
	Иначе
		ТекстСообщения = НСтр("ru = 'Документ не был зарегистрирован к отправке в 1С:Кладовщик.
		|Убедитесь, что существуют настройки обмена, удовлетворяющие параметрам текущего документа.'");
	КонецЕсли;
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Функция СоздатьПоступлениеТоваровПоТТН(ТТНВходящаяЕГАИС)
	
	ПоступлениеТоваров = Документы.ПриходнаяНакладная.СоздатьДокумент();
	ПоступлениеТоваров.Дата = ТекущаяДатаСеанса();
	ПоступлениеТоваров.ДокументОснование = ТТНВходящаяЕГАИС;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.НомерТТН КАК НомерВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.ДатаТТН КАК ДатаВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.Ссылка КАК ТТНВходящаяЕГАИС,
	|	ТТНВходящаяЕГАИС.Грузополучатель.ТорговыйОбъект КАК Магазин,
	|	ТТНВходящаяЕГАИС.Грузополучатель.Контрагент КАК Организация,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = &ПустаяСсылкаПоставщика
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК Поставщик
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.НомерВходящегоДокумента,
	|	ТаблицаВЗапросе.ДатаВходящегоДокумента,
	|	ТаблицаВЗапросе.ТТНВходящаяЕГАИС,
	|	ТаблицаВЗапросе.Магазин,
	|	ТаблицаВЗапросе.Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Сопоставлено, ЛОЖЬ)
	|				И НЕ КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации
	|			ТОГДА КлассификаторОрганизацийЕГАИС.Контрагент
	|		ИНАЧЕ &КонтрагентЗаказа
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ТаблицаВЗапросе.Поставщик = КлассификаторОрганизацийЕГАИС.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("КонтрагентЗаказа", Справочники.Контрагенты.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПоступлениеТоваров, Выборка);
	КонецЕсли;
	
	ПоступлениеТоваров.Ответственный = Пользователи.ТекущийПользователь();
	ПоступлениеТоваров.СтруктурнаяЕдиница = Выборка.Магазин;

	ГрузоотПравительКонтрагент = ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент;
	Если ТипЗнч(ГрузоотПравительКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПоступлениеТоваров.Контрагент = ГрузоотПравительКонтрагент;
	ИначеЕсли ТипЗнч(ГрузоотПравительКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
		ПоступлениеТоваров.Контрагент =
			Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент.ИНН);
	КонецЕсли;
	
	УчитыватьНДС = Истина;
	ЦенаВключаетНДС = Истина;
	
	Товары = ПоступлениеТоваров.Запасы;
	Серии = ПоступлениеТоваров.СерииНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Количество КАК Количество,
	|	ТТНВходящаяЕГАИСТовары.Количество КАК КоличествоУпаковок,
	|	ТТНВходящаяЕГАИСТовары.Сумма КАК Сумма,
	|	ТТНВходящаяЕГАИСТовары.Серия КАК Серия,
	|	ТТНВходящаяЕГАИСТовары.Цена КАК Цена,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК Порядок,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка
	|	И НЕ ТТНВходящаяЕГАИСТовары.Количество = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(СправочникНоменклатура.ОбъемДАЛ, 0) КАК ОбъемДАЛ
	|ПОМЕСТИТЬ ТаблицаСоответствиеЕГАИС
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЕГАИС КАК ТаблицаЕГАИС
	|		ПО СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ТаблицаЕГАИС.АлкогольнаяПродукция
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция,
	|	ЕСТЬNULL(СправочникНоменклатура.ОбъемДАЛ, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
	|	ТаблицаЕГАИС.Количество / ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ТаблицаЕГАИС.КоличествоУпаковок / ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ТаблицаЕГАИС.Серия КАК Серия,
	|	ТаблицаЕГАИС.Сумма КАК Сумма,
	|	ТаблицаЕГАИС.Цена * ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ТаблицаЕГАИС.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТаблицаЕГАИС.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Номенклатура
	|		ИНАЧЕ ТаблицаСоответствиеЕГАИС.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Характеристика
	|		ИНАЧЕ ТаблицаСоответствиеЕГАИС.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ТаблицаЕГАИС.Порядок КАК Порядок
	|ИЗ
	|	ТаблицаЕГАИС КАК ТаблицаЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствиеЕГАИС КАК ТаблицаСоответствиеЕГАИС
	|		ПО ТаблицаЕГАИС.АлкогольнаяПродукция = ТаблицаСоответствиеЕГАИС.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЕГАИС.Серия,
	|	ТаблицаЕГАИС.Сумма,
	|	ТаблицаЕГАИС.ИдентификаторУпаковки,
	|	ТаблицаЕГАИС.ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Номенклатура
	|		ИНАЧЕ ТаблицаСоответствиеЕГАИС.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Характеристика
	|		ИНАЧЕ ТаблицаСоответствиеЕГАИС.Характеристика
	|	КОНЕЦ,
	|	ТаблицаЕГАИС.Порядок,
	|	ТаблицаЕГАИС.Количество / ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаЕГАИС.КоличествоУпаковок / ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаЕГАИС.Цена * ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСоответствиеЕГАИС";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		Если ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(Выборка.Серия) Тогда
			НоваяСтрокаСерии = Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ПоступлениеТоваров.Записать();
		Возврат ПоступлениеТоваров.Ссылка;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Регистрирует документ поступления маркируемой продукции на обмен
// с приложением 1С:Кладовщик
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма проверки и подбора маркируемой продукции.
//
Процедура ОтправитьРаспоряжениеНаПриемкуКладовщику(Форма) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор" Тогда
		ТекстОшибки = "";
		ПостфиксСохранения = Форма.ПостфиксСохранения;
		Если ПроверкаИПодборПродукцииЕГАИС.РезультатыПроверкиУспешноСохранены(Форма, ПостфиксСохранения, ТекстОшибки) Тогда
			Форма.Модифицированность = Ложь;
			ТТНВходящаяЕГАИС = Форма.ПроверяемыйДокумент;
			ЗарегистрироватьПоступлениеАлкогольнойПродукции(ТТНВходящаяЕГАИС);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Иначе
		Если Форма.ИмяФормы = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор" Тогда
			ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
		ИначеЕсли Форма.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор" Тогда
			ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
		Иначе
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = "";
		Если ПроверкаИПодборПродукцииИСМП.РезультатыПроверкиУспешноСохранены(Форма, ВидПродукцииИС, ТекстОшибки) Тогда
			Форма.Модифицированность = Ложь;
			ПоступлениеТоваров = Форма.ПроверяемыйДокумент;
			ЗарегистрироватьПоступлениеМаркируемойПродукции(ПоступлениеТоваров.ДокументОснование);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РасчетСтатусов

Функция ШаблонОписанияТабличнойЧастиДокумента(ЭтоДвижениеПриход = ИСТИНА, ИмяТабличнойЧастиТовары  = "Запасы", ИмяТабличнойЧастиСерии = "") Экспорт
	
	ОписаниеТабличнойЧасти = Новый Структура;
	ОписаниеТабличнойЧасти.Вставить("ЭтоДвижениеПриход",       ЭтоДвижениеПриход);
	ОписаниеТабличнойЧасти.Вставить("ИмяТабличнойЧастиТовары", ИмяТабличнойЧастиТовары);
	ОписаниеТабличнойЧасти.Вставить("ИмяТабличнойЧастиСерии",  ИмяТабличнойЧастиСерии);
	ОписаниеТабличнойЧасти.Вставить("ТаблицаТовары",           Неопределено);
	ОписаниеТабличнойЧасти.Вставить("ДопОтборы_Товары",        "ИСТИНА");
	ОписаниеТабличнойЧасти.Вставить("ДопОтборы_Серии",         "ИСТИНА");
	ОписаниеТабличнойЧасти.Вставить("ДопСоединения",           "");
	
	Возврат ОписаниеТабличнойЧасти;
	
КонецФункции

Функция ПараметрыФормированияЗапросаЗаполнения(МетаданныеДокументаОснования, МетаданныеДокументаИСМП) Экспорт
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ТабличныеЧасти", Новый Массив);
	
	ПараметрыФормирования.Вставить("ИмяТаблицыШтрихкодыУпаковок",      "");
	ПараметрыФормирования.Вставить("ИмяКолонкиШтрихкодУпаковки",       "");
	ПараметрыФормирования.Вставить("ИмяВременнойТаблицыВыборкиДанных", РасчетСтатусовОформленияИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента());
	ПараметрыФормирования.Вставить("ИмяТабличнойЧастиТоварыИС",        "Товары");
	ПараметрыФормирования.Вставить("ОтборНоменклатуры",                "ИСТИНА");
	ПараметрыФормирования.Вставить("ДопОтборы_Общие",                  "ИСТИНА");
	
	ПараметрыФормирования.Вставить("ВключатьОпциональныеПоля",         Ложь);
	ПараметрыФормирования.Вставить("МетаданныеДокументаОснования",     МетаданныеДокументаОснования);
	ПараметрыФормирования.Вставить("МетаданныеДокументаИСМП",          МетаданныеДокументаИСМП);
	
	Возврат ПараметрыФормирования;
	
КонецФункции

Функция ТекстЗапросаТоварыДокументаОснования(
	ПараметрыФормированияЗапроса,
	ДополнительныеПараметрыЗапроса) Экспорт
	
	МетаданныеДокументаОснования = ПараметрыФормированияЗапроса.МетаданныеДокументаОснования;
	
	ТекстыЗапроса = Новый Массив;
	
	#Область ШаблоныЗапросов
	
	ШаблонЗапросаТовары =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК Упаковка,
	|	ТаблицаТовары.КодМаркировки КАК КодМаркировки,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.Всего КАК Всего
	|ПОМЕСТИТЬ ИмяВтТовары
	|ИЗ
	|	&Запасы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивДокументов)";
	
	ШаблонЗапросаСерии =
	"ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка КАК Ссылка,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.КлючСвязи КАК КлючСвязи,
	|	ТаблицаСерии.Количество КАК Количество
	|ПОМЕСТИТЬ ИмяВтСерии
	|ИЗ
	|	&СерииНоменклатуры КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка В(&МассивДокументов)";
	
	ШаблонЗапросаОбъединения =
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Серии.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Товары.Упаковка
	|		ИНАЧЕ Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК Упаковка,
	|	Товары.КодМаркировки КАК КодМаркировки,
	|	СУММА(ВЫБОР
	|			КОГДА Серии.Серия ЕСТЬ NULL
	|				ТОГДА Товары.Количество
	|			ИНАЧЕ Серии.Количество
	|		КОНЕЦ) КАК КоличествоУпаковок,
	|	СУММА(ВЫБОР
	|			КОГДА Серии.Серия ЕСТЬ NULL
	|				ТОГДА Товары.Количество *
	|				ВЫБОР
	|					КОГДА СправочникЕдиницыИзмерения.Ссылка ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
	|					ИНАЧЕ СправочникЕдиницыИзмерения.Коэффициент
	|				КОНЕЦ
	|			ИНАЧЕ Серии.Количество
	|		КОНЕЦ) КАК Количество,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.Сумма * ВЫБОР
	|			КОГДА Серии.Серия ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ Серии.Количество / Товары.Количество
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(Товары.СуммаНДС * ВЫБОР
	|			КОГДА Серии.Серия ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ Серии.Количество / Товары.Количество
	|		КОНЕЦ) КАК СуммаНДС,
	|	СУММА(Товары.Всего * ВЫБОР
	|			КОГДА Серии.Серия ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ Серии.Количество / Товары.Количество
	|		КОНЕЦ) КАК СуммаСНДС,
	|	&ЭтоДвижениеПриход КАК ЭтоДвижениеПриход
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	ИмяВтТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяВтСерии КАК Серии
	|		ПО Товары.КлючСвязи = Серии.КлючСвязи
	|			И Товары.Ссылка = Серии.Ссылка
	|			И &ДопОтборы_Серии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СправочникЕдиницыИзмерения
	|		ПО Товары.Упаковка = СправочникЕдиницыИзмерения.Ссылка
	|%ДопСоединения%
	|
	|ГДЕ
	|	&ОтборНоменклатуры
	|	И &ДопОтборы_Общие
	|	И &ДопОтборы_Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Серии.Серия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Товары.Упаковка
	|		ИНАЧЕ Товары.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ,
	|	Товары.КодМаркировки,
	|	Товары.СтавкаНДС";
	
	ШаблонОбъединение = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	#КонецОбласти
	
	ОпциональныеПоля = Новый Соответствие;
	ОпциональныеПоля.Вставить("Сумма",     "0");
	ОпциональныеПоля.Вставить("СуммаНДС",  "0");
	ОпциональныеПоля.Вставить("Всего",     "0");
	ОпциональныеПоля.Вставить("КлючСвязи", "0");
	ОпциональныеПоля.Вставить("СтавкаНДС",     "Значение(Справочник.СтавкиНДС.ПустаяСсылка)");
	ОпциональныеПоля.Вставить("КодМаркировки", "Значение(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)");
	
	ТекстЗапроса = "";
	Для Каждого ТабличнаяЧасть Из ПараметрыФормированияЗапроса.ТабличныеЧасти Цикл
		
		#Область Товары
		
		ТекстЗапросаТовары = ШаблонЗапросаТовары;
		
		ШаблонКАК = "%1 КАК %2";
		Если ТабличнаяЧасть.ТаблицаТовары = Неопределено Тогда
			Если ТабличнаяЧасть.ИмяТабличнойЧастиТовары = "Ссылка" Тогда
				СвойстваТаблицы = МетаданныеДокументаОснования.Реквизиты;
				ИмяПараметраЗапасы = "Документ." + МетаданныеДокументаОснования.Имя;
			Иначе
				СвойстваТаблицы = МетаданныеДокументаОснования.ТабличныеЧасти[ТабличнаяЧасть.ИмяТабличнойЧастиТовары].Реквизиты;
				ИмяПараметраЗапасы = "Документ." + МетаданныеДокументаОснования.Имя + "." + ТабличнаяЧасть.ИмяТабличнойЧастиТовары;
			КонецЕсли;
		Иначе
			СвойстваТаблицы = ТабличнаяЧасть.ТаблицаТовары.Колонки;
			ИмяПараметраЗапасы = "&ТаблицаТовары";
			ДополнительныеПараметрыЗапроса.Вставить("ТаблицаТовары", ТабличнаяЧасть.ТаблицаТовары);
		КонецЕсли;
		
		Для Каждого ДополнительноеПоле Из ОпциональныеПоля Цикл
			ИмяПоля = ТабличнаяЧасть.ИмяТабличнойЧастиТовары + "." + ДополнительноеПоле.Ключ;
			Если НЕ ПараметрыФормированияЗапроса.ВключатьОпциональныеПоля
				ИЛИ НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СвойстваТаблицы, ДополнительноеПоле.Ключ) Тогда
				ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
					СтрШаблон(ШаблонКАК, "ТаблицаТовары." + ДополнительноеПоле.Ключ, ДополнительноеПоле.Ключ),
					СтрШаблон(ШаблонКАК, ДополнительноеПоле.Значение, ДополнительноеПоле.Ключ));
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&Запасы",
			ИмяПараметраЗапасы);
		
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"ИмяВтТовары",
			"вт" + ТабличнаяЧасть.ИмяТабличнойЧастиТовары);
		
		ТекстыЗапроса.Добавить(ТекстЗапросаТовары);
		
		#КонецОбласти
		
		#Область Серии
		
		ТекстЗапросаСерии = "";
		Если ЗначениеЗаполнено(ТабличнаяЧасть.ИмяТабличнойЧастиСерии) Тогда
			ТекстЗапросаСерии = ШаблонЗапросаСерии;
			ТекстЗапросаСерии = СтрЗаменить(ТекстЗапросаСерии,
				"&СерииНоменклатуры",
				"Документ." + МетаданныеДокументаОснования.Имя + "." + ТабличнаяЧасть.ИмяТабличнойЧастиСерии);
			ИмяВтСерии = "вт" + ТабличнаяЧасть.ИмяТабличнойЧастиСерии;
		Иначе
			
			ИмяВтСерии = "втСерии";
			
			Если НЕ ДополнительныеПараметрыЗапроса.Свойство("СерииНоменклатуры") Тогда
				ТекстЗапросаСерии = ШаблонЗапросаСерии;
				
				ТаблицаСерии = Новый ТаблицаЗначений;
				ТаблицаСерии.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка." + МетаданныеДокументаОснования.Имя));
				ТаблицаСерии.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
				ТаблицаСерии.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число"));
				ТаблицаСерии.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
				
				ДополнительныеПараметрыЗапроса.Вставить("СерииНоменклатуры", ТаблицаСерии);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапросаСерии) Тогда
			ТекстЗапросаСерии = СтрЗаменить(ТекстЗапросаСерии,
				"ИмяВтСерии",
				ИмяВтСерии);
			
			ТекстыЗапроса.Добавить(ТекстЗапросаСерии);
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ИтоговаяТаблица
		
		ТекстЗапросаОбъединения = ?(ЗначениеЗаполнено(ТекстЗапроса),
			СтрЗаменить(ШаблонЗапросаОбъединения, "ПОМЕСТИТЬ ИмяВременнойТаблицы", ""),
			СтрЗаменить(ШаблонЗапросаОбъединения, "ИмяВременнойТаблицы", ПараметрыФормированияЗапроса.ИмяВременнойТаблицыВыборкиДанных));
		
		ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
			"ИмяВтТовары",
			"вт" + ТабличнаяЧасть.ИмяТабличнойЧастиТовары);
		
		ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
			"ИмяВтСерии",
			ИмяВтСерии);
		
		ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
			"&ЭтоДвижениеПриход",
			Формат(ТабличнаяЧасть.ЭтоДвижениеПриход, "БЛ=Ложь; БИ=Истина"));
			
		ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
			"&ОтборНоменклатуры",
			ПараметрыФормированияЗапроса.ОтборНоменклатуры);
		
		ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
			"&ДопОтборы_Общие",
			ПараметрыФормированияЗапроса.ДопОтборы_Общие);
			
		ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
			"&ДопОтборы_Товары",
			ТабличнаяЧасть.ДопОтборы_Товары);
		
		ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
			"&ДопОтборы_Серии",
			ТабличнаяЧасть.ДопОтборы_Серии);
			
		ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
			"%ДопСоединения%",
			ТабличнаяЧасть.ДопСоединения);
			
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(ТекстЗапроса), ШаблонОбъединение, "") + ТекстЗапросаОбъединения;
		
		#КонецОбласти
		
	КонецЦикла;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьТабличныеЧастиДокументаИС(ДокументОбъект, ДанныеЗаполнения, ПараметрыФормированияЗапроса) Экспорт
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧТовары = ПараметрыФормированияЗапроса.ИмяТабличнойЧастиТоварыИС;
	ИмяТЧШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) ИЛИ НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый Массив;
	
	МетаданныеДокументаОснования = ПараметрыФормированияЗапроса.МетаданныеДокументаОснования;
	МетаданныеДокументаИСМП = ПараметрыФормированияЗапроса.МетаданныеДокументаИСМП;
	
	#Область Товары
	
	ТекстЗапросаТоварыДокументаОснования = ИнтеграцияИСУНФ.ТекстЗапросаТоварыДокументаОснования(ПараметрыФормированияЗапроса,
		Запрос.Параметры);
	ТекстыЗапроса.Добавить(ТекстЗапросаТоварыДокументаОснования);
	
	ТекстЗапросаТоварыДокументаИС =
	"ВЫБРАТЬ
	|	ТоварыИС.Номенклатура КАК Номенклатура,
	|	ТоварыИС.Характеристика КАК Характеристика,
	|	ТоварыИС.Серия КАК Серия,
	|	ТоварыИС.Упаковка КАК Упаковка,
	|	ТоварыИС.КодМаркировки КАК КодМаркировки,
	|	ТоварыИС.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыИС.Количество КАК Количество,
	|	ТоварыИС.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТоварыИС.Сумма КАК Сумма,
	|	ТоварыИС.СуммаНДС КАК СуммаНДС,
	|	ТоварыИС.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ТоварыОформленные
	|ИЗ
	|	ТаблицаТоварыИС КАК ТоварыИС
	|ГДЕ
	|	ТоварыИС.Ссылка.ДокументОснование В(&МассивДокументов)
	|	И ТоварыИС.Ссылка.Проведен
	|	И НЕ ТоварыИС.Ссылка.Ссылка = &ЭтаСсылка";
	
	ТекстЗапросаТоварыДокументаИС = СтрЗаменить(ТекстЗапросаТоварыДокументаИС, "ТаблицаТоварыИС", "Документ." + МетаданныеДокументаИСМП.Имя + "." + ИмяТЧТовары);
	
	ТекстЗапросаОбъединения =
	"ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Серия КАК Серия,
	|	ТоварыКОформлению.Упаковка КАК Упаковка,
	|	ТоварыКОформлению.КодМаркировки КАК КодМаркировки,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТоварыКОформлению.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.Сумма) КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА СУММА(ТоварыКОформлению.Количество) > 0
	|				И СУММА(ТоварыКОформлению.Сумма) > 0
	|			ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	СУММА(ТоварыКОформлению.СуммаСНДС) КАК СуммаСНДС,
	|	СправочникНоменклатура.ТоварнаяНоменклатураВЭД.Код КАК КодТНВЭД,
	|	СправочникНоменклатура.КодОКПД2 КАК ОКПД2
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Номенклатура КАК Номенклатура,
	|		Товары.Характеристика КАК Характеристика,
	|		Товары.Серия КАК Серия,
	|		Товары.Упаковка КАК Упаковка,
	|		Товары.КодМаркировки КАК КодМаркировки,
	|		Товары.Количество * ВЫБОР
	|			КОГДА Товары.Количество < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК Количество,
	|		Товары.КоличествоУпаковок * ВЫБОР
	|			КОГДА Товары.КоличествоУпаковок < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК КоличествоУпаковок,
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		Товары.Сумма КАК Сумма,
	|		Товары.СуммаНДС КАК СуммаНДС,
	|		Товары.СуммаСНДС КАК СуммаСНДС
	|	ИЗ
	|		ИмяВременнойТаблицы КАК Товары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыОформленные.Номенклатура,
	|		ТоварыОформленные.Характеристика,
	|		ТоварыОформленные.Серия,
	|		ТоварыОформленные.Упаковка,
	|		ТоварыОформленные.КодМаркировки,
	|		-ТоварыОформленные.Количество,
	|		-ТоварыОформленные.КоличествоУпаковок,
	|		ТоварыОформленные.СтавкаНДС,
	|		-ТоварыОформленные.Сумма,
	|		-ТоварыОформленные.СуммаНДС,
	|		-ТоварыОформленные.СуммаСНДС
	|	ИЗ
	|		ТоварыОформленные КАК ТоварыОформленные) КАК ТоварыКОформлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТоварыКОформлению.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Упаковка,
	|	ТоварыКОформлению.КодМаркировки,
	|	ТоварыКОформлению.СтавкаНДС,
	|	СправочникНоменклатура.ТоварнаяНоменклатураВЭД.Код,
	|	СправочникНоменклатура.КодОКПД2
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0";
	
	ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
		"ИмяВременнойТаблицы",
		РасчетСтатусовОформленияИС.ИмяВременнойТаблицыДляВыборкиДанныхДокумента());
	
	// Исключим рекизиты, отсутствующие в документе ИС.
	ОпциональныеПоля = Новый Соответствие;
	ОпциональныеПоля.Вставить("Упаковка",  "&ПустаяУпаковка");
	ОпциональныеПоля.Вставить("СтавкаНДС", "&ПустаяСтавкаНДС");
	ОпциональныеПоля.Вставить("Серия",     "&ПустаяСерия");
	ОпциональныеПоля.Вставить("Количество",         "-1");
	ОпциональныеПоля.Вставить("КоличествоУпаковок", "-1");
	ОпциональныеПоля.Вставить("Сумма",              "0");
	ОпциональныеПоля.Вставить("СуммаНДС",           "0");
	ОпциональныеПоля.Вставить("СуммаСНДС",          "0");
	ОпциональныеПоля.Вставить("КодМаркировки", "Значение(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)");
	
	ШаблонЗапроса = "%1 КАК %2";
	МетаданныеТЧ = МетаданныеДокументаИСМП.ТабличныеЧасти[ИмяТЧТовары];
	Для Каждого ДополнительноеПоле Из ОпциональныеПоля Цикл
		Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта(ДополнительноеПоле.Ключ, МетаданныеТЧ) Тогда
			ТекстЗапросаТоварыДокументаИС = СтрЗаменить(ТекстЗапросаТоварыДокументаИС,
				СтрШаблон(ШаблонЗапроса, "ТоварыИС." + ДополнительноеПоле.Ключ, ДополнительноеПоле.Ключ),
				СтрШаблон(ШаблонЗапроса,ДополнительноеПоле.Значение, ДополнительноеПоле.Ключ));
			Если НЕ ДополнительноеПоле.Ключ = "Количество" Тогда
				ТекстЗапросаОбъединения = СтрЗаменить(ТекстЗапросаОбъединения,
					СтрШаблон(ШаблонЗапроса, "Товары." + ДополнительноеПоле.Ключ, ДополнительноеПоле.Ключ),
					СтрШаблон(ШаблонЗапроса, ДополнительноеПоле.Значение, ДополнительноеПоле.Ключ));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстыЗапроса.Добавить(ТекстЗапросаТоварыДокументаИС);
	ТекстыЗапроса.Добавить(ТекстЗапросаОбъединения);
	
	#КонецОбласти
	
	#Область ШтрихкодыУпаковок
	
	Смещение = 0;
	Если ЗначениеЗаполнено(ПараметрыФормированияЗапроса.ИмяТаблицыШтрихкодыУпаковок) Тогда
		ТекстЗапросаШтрихкоды =
		"ВЫБРАТЬ
		|	Штрихкоды.%2 КАК ШтрихкодУпаковки
		|ИЗ
		|	%1 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%2.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ %3 КАК ОформленныеШтрихкоды
		|		ПО (ОформленныеШтрихкоды.Ссылка.ДокументОснование В (&МассивДокументов))
		|			И (ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка)
		|			И (ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%2)
		|			И (ОформленныеШтрихкоды.Ссылка.Проведен)
		|ГДЕ
		|	Штрихкоды.Ссылка В(&МассивДокументов)
		|	И &ОтборНоменклатуры
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL";
		
		ТекстЗапросаШтрихкоды = СтрШаблон(ТекстЗапросаШтрихкоды,
			"Документ." + МетаданныеДокументаОснования.Имя + "." + ПараметрыФормированияЗапроса.ИмяТаблицыШтрихкодыУпаковок,
			ПараметрыФормированияЗапроса.ИмяКолонкиШтрихкодУпаковки,
			"Документ." + МетаданныеДокументаИСМП.Имя + "." + ИмяТЧШтрихкодыУпаковок);
		
		ТекстЗапросаШтрихкоды = СтрЗаменить(ТекстЗапросаШтрихкоды,
			"&ОтборНоменклатуры",
			ПараметрыФормированияЗапроса.ОтборНоменклатуры);
			
		ТекстыЗапроса.Добавить(ТекстЗапросаШтрихкоды);
		Смещение = 1;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("МассивДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Основание));
	Запрос.УстановитьПараметр("ЭтаСсылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустаяУпаковка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.Упаковка));
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СтавкаНДС));
	Запрос.УстановитьПараметр("ПустаяСерия", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатуры));
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДокументОбъект[ИмяТЧТовары].Очистить();
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект[ИмяТЧТовары], РезультатЗапроса[РезультатЗапроса.Количество() - 1 - Смещение], ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(ПараметрыФормированияЗапроса.ИмяТаблицыШтрихкодыУпаковок) Тогда
		ДокументОбъект[ИмяТЧШтрихкодыУпаковок].Очистить();
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект[ИмяТЧШтрихкодыУпаковок], РезультатЗапроса[РезультатЗапроса.Количество() - 1], ДанныеЗаполнения, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос) Экспорт
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьШапку") Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	ИнтеграцияИСПереопределяемый.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыДокумента.ДокументОснование,
		,
		РеквизитыДокумента.ЕстьОшибкиПроведен,,);
		
	ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);

	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличнаяЧасть, РезультатЗапроса, ДанныеЗаполнения, ЗаполнениеНеобязательно = Ложь)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 И Не ЗаполнениеНеобязательно Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Основание = ДанныеЗаполнения.Основание;
		Иначе
			Основание = ДанныеЗаполнения;
		КонецЕсли;
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'В %1 отсутствует продукция для заполнения.';
				|en = 'No products for filling in %1.'"),
			Основание);
		
	КонецЕсли;
	
	КолонкиТабличнойЧасти   = ТабличнаяЧасть.Выгрузить(Новый Структура("НомерСтроки",Ложь));
	ЕстьИдентификаторСтроки = КолонкиТабличнойЧасти.Колонки.Найти("Идентификатор") <> Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ЕстьИдентификаторСтроки Тогда
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаШтрихкода

Функция ДанныеШтрихкодаДляОбработки() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура",             Справочники.Номенклатура.ПустаяСсылка());
	СтруктураПараметров.Вставить("Характеристика",           Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураПараметров.Вставить("Серия",                    Справочники.СерииНоменклатуры.ПустаяСсылка());
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",         Неопределено);
	СтруктураПараметров.Вставить("Штрихкод",                 "");
	СтруктураПараметров.Вставить("EAN",                      "");
	СтруктураПараметров.Вставить("ШтрихкодУпаковки",         Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
	СтруктураПараметров.Вставить("ТипУпаковки",              Перечисления.ТипыУпаковок.ПустаяСсылка());
	СтруктураПараметров.Вставить("ВидУпаковки",              Перечисления.ВидыУпаковокИС.ПустаяСсылка());
	СтруктураПараметров.Вставить("ВидПродукции",             Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	СтруктураПараметров.Вставить("ТипШтрихкода",             Перечисления.ТипыШтрихкодов.ПустаяСсылка());
	СтруктураПараметров.Вставить("ОбработатьБезМаркировки",  Ложь);
	СтруктураПараметров.Вставить("МаркируемаяПродукция",     Истина);
	СтруктураПараметров.Вставить("ПроизвольнаяЕдиницаУчета", Ложь);
	СтруктураПараметров.Вставить("Количество",               0);
	// МОТП.
	СтруктураПараметров.Вставить("МРЦ",                      0);
	// ЕГАИС.
	СтруктураПараметров.Вставить("АлкогольнаяПродукция",     Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
	СтруктураПараметров.Вставить("Справка2",                 Справочники.Справки2ЕГАИС.ПустаяСсылка());
	// Частичное выбытие.
	СтруктураПараметров.Вставить("ЧастичноеВыбытие",         Ложь);
	СтруктураПараметров.Вставить("ЧастичноеВыбытиеВариантУчета");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПараметрыШтрихкодаДляОбработки(Источник, ПараметрыСканирования, ДанныеШтрихкода = Неопределено) Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Объект");
	ПараметрыОбработки.Вставить("РезультатОбработки");
	ПараметрыОбработки.Вставить("ПараметрыЗаполнения");
	ПараметрыОбработки.Вставить("НастройкиКэша");
	ПараметрыОбработки.Вставить("ВидПродукцииИС");
	ПараметрыОбработки.Вставить("УчитыватьМРЦ", ИнтеграцияИСМПКлиентСерверПовтИсп.УчитыватьМРЦ());
	ПараметрыОбработки.Вставить("УчетВРазличныхЕдиницахИзмерения", ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	ПараметрыОбработки.Вставить("ПараметрыСканирования", ПараметрыСканирования);
	
	Форма = Неопределено;
	Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
		Форма = Источник;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
			Объект = Форма.Объект;
		Иначе
			Объект = Форма;
		КонецЕсли;
	Иначе
		Объект = Источник;
	КонецЕсли;
	ПараметрыОбработки.Объект = Объект;
	
	РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	Если НЕ ДанныеШтрихкода = Неопределено
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки") И ДанныеШтрихкода.ОбработатьБезМаркировки Тогда
		РезультатОбработки.ОбработкаШтрихкодаБезМарки = Истина;
	КонецЕсли;
	ПараметрыОбработки.РезультатОбработки = РезультатОбработки;
	
	Если НЕ ДанныеШтрихкода = Неопределено И НЕ ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ПараметрыОбработки.ВидПродукцииИС = ДанныеШтрихкода.ВидПродукции;
	КонецЕсли;
	
	Если НЕ Форма = Неопределено
		И (ПараметрыОбработки.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбработки.ВидПродукцииИС)) Тогда
		ДобавлятьКоличество = НЕ ДанныеШтрихкода = Неопределено;
		ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, ДобавлятьКоличество, ПараметрыСканирования);
		ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
		ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
		ПараметрыЗаполнения.ЕстьКоличествоАкцизныхМарок    = Ложь;
		
		ПараметрыОбработки.ПараметрыЗаполнения = ПараметрыЗаполнения;
	КонецЕсли;
	
	// Заполнение параметров кэша.
	НастройкиКэша = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
	НастройкиКэша.Штрихкоды        = ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок;
	НастройкиКэша.ШтрихкодУпаковки = ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки;
	НастройкиКэша.Количество       = "КоличествоВБазовыхЕдиницахГосИС";
	Если ПараметрыСканирования.Свойство("ИмяКолонкиЧастичноеВыбытиеКоличество")
		И ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество) Тогда
		НастройкиКэша.ЧастичноеВыбытие = Истина;
	КонецЕсли;
	Если НЕ Форма = Неопределено Тогда
		ИмяТЧЗапасы = Форма.КэшДанныхГОСИС.ИмяТабличнойЧасти;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка")
		И НЕ Объект.Ссылка.Метаданные().ТабличныеЧасти.Найти("Продукция") = Неопределено Тогда
		ИмяТЧЗапасы = "Продукция";
	Иначе
		ИмяТЧЗапасы = "Запасы";
	КонецЕсли;
	НастройкиКэша.Товары = ИмяТЧЗапасы;
	НастройкиКэша.ИспользоватьОСУ = Ложь;
	ПараметрыОбработки.НастройкиКэша = НастройкиКэша;
	
	Возврат ПараметрыОбработки;
	
КонецФункции

// Обрабабатывает штрихкод маркируемой продукции и помещает обработанные строки в результат обработки.
//
// Параметры:
//  ДанныеШтрихкодаДляОбработки - См. ИнтеграцияИСУНФ..ДанныеШтрихкодаДляОбработки;
//  ПараметрыШтрихкодаДляОбработки - Выходной параметры - См. ИнтеграцияИСУНФ.ПараметрыШтрихкодаДляОбработки;
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//
Процедура ОбработатьДанныеШтрихкодаПотребительскойУпаковки(ДанныеШтрихкодаДляОбработки, ПараметрыШтрихкодаДляОбработки, Форма = Неопределено) Экспорт
	
	Объект                = ПараметрыШтрихкодаДляОбработки.Объект;
	РезультатОбработки    = ПараметрыШтрихкодаДляОбработки.РезультатОбработки;
	ПараметрыЗаполнения   = ПараметрыШтрихкодаДляОбработки.ПараметрыЗаполнения;
	НастройкиКэша         = ПараметрыШтрихкодаДляОбработки.НастройкиКэша;
	ПараметрыСканирования = ПараметрыШтрихкодаДляОбработки.ПараметрыСканирования;
	
	ИмяТЧ = НастройкиКэша.Товары;
	
	Если НЕ ДанныеШтрихкодаДляОбработки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеШтрихкодаДляОбработки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
		РезультатОбработки.ТекстОшибки = НСтр("ru = 'Обработка кодов DataMatrix не поддерживается. Считайте код акцизной марки.'");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.Количество) Тогда
		ДанныеШтрихкодаДляОбработки.Количество = 1;
	КонецЕсли;
	
	Если НЕ Форма = Неопределено Тогда
		ДанныеШтрихкодаДляОбработки.Вставить("КоличествоВБазовыхЕдиницахГосИС", ДанныеШтрихкодаДляОбработки.Количество);
	КонецЕсли;
	
	Если ДанныеШтрихкодаДляОбработки.Количество > 1
		И ПараметрыШтрихкодаДляОбработки.УчетВРазличныхЕдиницахИзмерения
		И НЕ ДанныеШтрихкодаДляОбработки.ПроизвольнаяЕдиницаУчета Тогда
		ДанныеШтрихкодаДляОбработки.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ЕдиницаИзмеренияНоменклатуры(
			ДанныеШтрихкодаДляОбработки.Номенклатура, ДанныеШтрихкодаДляОбработки.Количество);
		Если ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.ЕдиницаИзмерения) Тогда
			ДанныеШтрихкодаДляОбработки.Количество = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыШтрихкодаДляОбработки.УчитыватьМРЦ
		И ДанныеШтрихкодаДляОбработки.Количество > 1
		И НЕ ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.ЕдиницаИзмерения) Тогда
		ДанныеШтрихкодаДляОбработки.МРЦ = ДанныеШтрихкодаДляОбработки.МРЦ / ДанныеШтрихкодаДляОбработки.Количество;
	КонецЕсли;
	
	ВсегоПоПараметрамПоиска = 0;
	СтрокаДляОбработки = Неопределено;
	КонтролироватьМРЦ  = Неопределено;
	
	РазрешеноЗапрашиватьКодМаркировки = Истина;
	Если ЗначениеЗаполнено(ПараметрыСканирования)
		И ПараметрыСканирования.Свойство("РазрешеноЗапрашиватьКодМаркировки") Тогда
		РазрешеноЗапрашиватьКодМаркировки = ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкодаДляОбработки);
	НайденныеСтрокиТовары = Объект[ИмяТЧ].НайтиСтроки(ПараметрыПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтрокиТовары Цикл
		Если НЕ Форма = Неопределено Тогда
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + НайденнаяСтрока.КоличествоВБазовыхЕдиницахГосИС;
		КонецЕсли;
		
		// Проверка соответствия МРЦ.
		Если КонтролироватьМРЦ = Неопределено Тогда
			КонтролироватьМРЦ = ПараметрыШтрихкодаДляОбработки.УчитыватьМРЦ
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденнаяСтрока, "МРЦ");
		КонецЕсли;
		Если КонтролироватьМРЦ И НЕ НайденнаяСтрока.МРЦ = ДанныеШтрихкодаДляОбработки.МРЦ  Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка соответствия Упаковки.
		Если НайденнаяСтрока.ЕдиницаИзмерения <> ДанныеШтрихкодаДляОбработки.ЕдиницаИзмерения
			И (ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.ЕдиницаИзмерения)
			ИЛИ ТипЗнч(НайденнаяСтрока.ЕдиницаИзмерения) <> Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДляОбработки = Неопределено Тогда
			// Первую найденную строку считаем подходящей.
			СтрокаДляОбработки = НайденнаяСтрока;
		ИначеЕсли ПараметрыШтрихкодаДляОбработки.Свойство("КэшУпаковок") Тогда
			СтрокаКэша = ПараметрыШтрихкодаДляОбработки.КэшУпаковок.Найти(СтрокаДляОбработки.НомерСтроки, "НомерСтроки");
			Если НЕ СтрокаКэша = Неопределено И СтрокаДляОбработки.Количество >= СтрокаКэша.Количество Тогда
				// Переключаем фокус на текущую строку.
				СтрокаДляОбработки = НайденнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СтрокаДляОбработки = Неопределено Тогда
		
		Если Форма = Неопределено Или Не ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.ВидПродукции) Тогда
			КоличествоМаркируемойПродукции = ДанныеШтрихкодаДляОбработки.Количество;
		Иначе
			КоличествоМаркируемойПродукции = ДанныеШтрихкодаДляОбработки.КоличествоВБазовыхЕдиницахГосИС;
			
			// Сопоставим количество продукции по данным кэша и товаров.
			Если РазрешеноЗапрашиватьКодМаркировки Тогда
				ВсегоВКеше = 0;
				СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(ПараметрыПоиска);
				Для Каждого СтрокаКеша Из СтрокиКеша Цикл
					ВсегоВКеше = ВсегоВКеше + СтрокаКеша.Количество;
				КонецЦикла;
				
				Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
					КоличествоМаркируемойПродукции = Макс(0, ДанныеШтрихкодаДляОбработки.КоличествоВБазовыхЕдиницахГосИС + ВсегоВКеше - ВсегоПоПараметрамПоиска);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоМаркируемойПродукции > 0 Тогда
			СтрокаДляОбработки.Количество = СтрокаДляОбработки.Количество + ДанныеШтрихкодаДляОбработки.Количество;
			Если НЕ Форма = Неопределено Тогда
				СтрокаДляОбработки.КоличествоВБазовыхЕдиницахГосИС = СтрокаДляОбработки.КоличествоВБазовыхЕдиницахГосИС + КоличествоМаркируемойПродукции;
			КонецЕсли;
			Если РезультатОбработки.ИзмененныеСтроки.Найти(СтрокаДляОбработки) = Неопределено Тогда
				РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаДляОбработки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавим строку при необходимости.
	Если СтрокаДляОбработки = Неопределено Тогда
		СтрокаДляОбработки = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДляОбработки, ДанныеШтрихкодаДляОбработки);
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаДляОбработки);
	КонецЕсли;
	
	// Обновим данные строки.
	ОбновляемыеДанные = Новый Структура;
	ОбновляемыеДанные.Вставить("КодМаркировки", ДанныеШтрихкодаДляОбработки.Штрихкод);
	ОбновляемыеДанные.Вставить("Штрихкод",      ДанныеШтрихкодаДляОбработки.Штрихкод);
	Если ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		ОбновляемыеДанные.Вставить("НеобходимостьВводаАкцизнойМарки", Истина);
		ОбновляемыеДанные.Вставить("НоменклатураЕГАИС", ДанныеШтрихкодаДляОбработки.АлкогольнаяПродукция);
		Если ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.EAN) Тогда
			ОбновляемыеДанные.Вставить("Штрихкод", ДанныеШтрихкодаДляОбработки.EAN);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаДляОбработки, ОбновляемыеДанные);
	
	Если Не ЗначениеЗаполнено(СтрокаДляОбработки.КлючСвязи) Тогда
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТЧ], СтрокаДляОбработки, "КлючСвязи");
	КонецЕсли;
	
	// Добавим серию в документ.
	Если ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.Серия)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СерииНоменклатуры") Тогда
		
		ПараметрыПоиска = Новый Структура("Серия");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкодаДляОбработки);
		НайденныеСтрокиСерии = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтрокиСерии.Количество() = 0 Тогда
			СтрокаСерии = Объект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСерии, ДанныеШтрихкодаДляОбработки);
			СтрокаСерии.КлючСвязи = СтрокаДляОбработки.КлючСвязи;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеШтрихкодаДляОбработки.ОбработатьБезМаркировки Тогда
		СтрокаДляОбработки.МаркируемаяПродукция = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
		И НастройкиКэша.Штрихкоды = "ШтрихкодыУпаковок" Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим марку.
	Если ИнтеграцияИСУНФКлиентСервер.ЭтоМарка(ДанныеШтрихкодаДляОбработки.Штрихкод) Тогда
		НоваяСтрокаУпаковки = Объект[НастройкиКэша.Штрихкоды].Добавить();
		НоваяСтрокаУпаковки[НастройкиКэша.ШтрихкодУпаковки] = ДанныеШтрихкодаДляОбработки.ШтрихкодУпаковки;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрокаУпаковки, "КодАкцизнойМарки") Тогда
			НоваяСтрокаУпаковки.КодАкцизнойМарки = ДанныеШтрихкодаДляОбработки.Штрихкод;
		КонецЕсли;
		
		// Особенности учета алкогольной продукции.
		Если ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			НоваяСтрокаУпаковки.Справка2 = ДанныеШтрихкодаДляОбработки.Справка2;
			Если ДанныеШтрихкодаДляОбработки.Свойство("УпаковкаВерхнегоУровня") Тогда
				НоваяСтрокаУпаковки.ШтрихкодУпаковки = ДанныеШтрихкодаДляОбработки.УпаковкаВерхнегоУровня;
			КонецЕсли;
		КонецЕсли;
		
		ШтрихкодированиеИСМП.ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковки(
			НоваяСтрокаУпаковки,
			ДанныеШтрихкодаДляОбработки,
			ПараметрыСканирования);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрокаУпаковки, "КлючСвязи") Тогда
			НоваяСтрокаУпаковки.КлючСвязи = СтрокаДляОбработки.КлючСвязи;
		КонецЕсли;
		
		// Обновим кэш штрихкодов упаковок.
		Если НЕ Форма = Неопределено Тогда
			ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабабатывает штрихкод маркируемой продукции и помещает обработанные строки в результат обработки.
//
// Параметры:
//  ДеревоУпаковок - Дерево значений, полученное в результате завершения работы формы проверки и подбора
//                   или результат метода "ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок";
//  ПараметрыШтрихкодаДляОбработки - Выходной параметры - См. ИнтеграцияИСУНФ.ПараметрыШтрихкодаДляОбработки;
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//
Процедура ОбработатьДанныеШтрихкодовДереваУпаковок(ДеревоУпаковок, ПараметрыШтрихкодаДляОбработки, Форма = Неопределено, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Объект                = ПараметрыШтрихкодаДляОбработки.Объект;
	РезультатОбработки    = ПараметрыШтрихкодаДляОбработки.РезультатОбработки;
	ПараметрыЗаполнения   = ПараметрыШтрихкодаДляОбработки.ПараметрыЗаполнения;
	НастройкиКэша         = ПараметрыШтрихкодаДляОбработки.НастройкиКэша;
	ПараметрыСканирования = ПараметрыШтрихкодаДляОбработки.ПараметрыСканирования;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ДанныеШтрихкодаДляОбработки = ИнтеграцияИСУНФ.ДанныеШтрихкодаДляОбработки();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкодаДляОбработки, СтрокаДерева);
		Если НЕ ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.ВидПродукции) Тогда
			ДанныеШтрихкодаДляОбработки.ВидПродукции = ПараметрыШтрихкодаДляОбработки.ВидПродукцииИС;
		КонецЕсли;
		
		Если ДанныеШтрихкодаДляОбработки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			ИЛИ ДанныеШтрихкодаДляОбработки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			ИЛИ ДанныеШтрихкодаДляОбработки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			ИЛИ ДанныеШтрихкодаДляОбработки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И ДанныеШтрихкодаДляОбработки.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				
			// Разберем данные.
			ДанныеШтрихкодаДляОбработки.Количество = ИнтеграцияИСУНФ.КоличествоПродукцииПоДаннымШтрихкода(СтрокаДерева,
				ПараметрыШтрихкодаДляОбработки.ПараметрыСканирования);
			
			Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкодаДляОбработки.ВидПродукции) И СтрокаДерева.СоставКодаМаркировки.Свойство("МРЦ") Тогда
				ДанныеШтрихкодаДляОбработки.МРЦ = СтрокаДерева.СоставКодаМаркировки.МРЦ;
			КонецЕсли;
			
			ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
				ДанныеШтрихкодаДляОбработки,
				ПараметрыСканирования,,
				Истина);
			
			Если ЭтоСтрокаДанныхЧастичногоВыбытия
				И ДанныеШтрихкодаДляОбработки.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
				ДанныеШтрихкодаДляОбработки.Номенклатура   = СтрокаДерева.ЧастичноеВыбытиеНоменклатура;
				ДанныеШтрихкодаДляОбработки.Характеристика = СтрокаДерева.ЧастичноеВыбытиеХарактеристика;
			КонецЕсли;
			
			Если НЕ УпаковкаВерхнегоУровня = Неопределено Тогда
				ДанныеШтрихкодаДляОбработки.Вставить("УпаковкаВерхнегоУровня", УпаковкаВерхнегоУровня);
			КонецЕсли;
			
			Если ДанныеШтрихкодаДляОбработки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				ОбработатьДанныеШтрихкодаУпаковкиОСУ(ДанныеШтрихкодаДляОбработки, ПараметрыШтрихкодаДляОбработки, Форма);
			Иначе
				ОбработатьДанныеШтрихкодаПотребительскойУпаковки(ДанныеШтрихкодаДляОбработки, ПараметрыШтрихкодаДляОбработки, Форма);
			КонецЕсли;
		
		Иначе
			
			// Продолжим разворачивать.
			ОбработатьДанныеШтрихкодовДереваУпаковок(СтрокаДерева, ПараметрыШтрихкодаДляОбработки, Форма, УпаковкаВерхнегоУровняСтрокиДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеШтрихкодаУпаковкиОСУ(ДанныеШтрихкодаДляОбработки, ПараметрыШтрихкодаДляОбработки, Форма = Неопределено)
	
	Объект                = ПараметрыШтрихкодаДляОбработки.Объект;
	РезультатОбработки    = ПараметрыШтрихкодаДляОбработки.РезультатОбработки;
	ПараметрыЗаполнения   = ПараметрыШтрихкодаДляОбработки.ПараметрыЗаполнения;
	НастройкиКэша         = ПараметрыШтрихкодаДляОбработки.НастройкиКэша;
	ПараметрыСканирования = ПараметрыШтрихкодаДляОбработки.ПараметрыСканирования;
	
	ИмяТЧ = НастройкиКэша.Товары;
	
	Если НЕ ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.Количество) Тогда
		ДанныеШтрихкодаДляОбработки.Количество = 1;
	КонецЕсли;
	
	СтрокаДляОбработки = Неопределено;
	
	// Распределение количества по строкам.
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкодаДляОбработки);
	НайденныеСтрокиТовары = Объект[ИмяТЧ].НайтиСтроки(ПараметрыПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтрокиТовары Цикл
		
		КоэффициентУпаковки = 1;
		СтрокаКэша = Неопределено;
		Если ПараметрыШтрихкодаДляОбработки.Свойство("КэшУпаковок") Тогда
			СтрокаКэша = ПараметрыШтрихкодаДляОбработки.КэшУпаковок.Найти(НайденнаяСтрока.НомерСтроки, "НомерСтроки");
			КоэффициентУпаковки = СтрокаКэша.КоэффициентЕдиницыИзмеренияГосИС;
		ИначеЕсли НЕ Форма = Неопределено Тогда
			КоэффициентУпаковки = НайденнаяСтрока.КоэффициентЕдиницыИзмеренияГосИС;
		ИначеЕсли ТипЗнч(НайденнаяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			КоэффициентУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НайденнаяСтрока.ЕдиницаИзмерения, "Коэффициент");
		КонецЕсли;
		
		КоличествоУпаковок = ДанныеШтрихкодаДляОбработки.Количество / КоэффициентУпаковки;
		Если Цел(КоличествоУпаковок) = КоличествоУпаковок ИЛИ ДанныеШтрихкодаДляОбработки.ПроизвольнаяЕдиницаУчета Тогда
			СтрокаДляОбработки = НайденнаяСтрока;
		КонецЕсли;
		
		Если СтрокаКэша = Неопределено Тогда
			КоличествоКЗаполнению = Цел(КоличествоУпаковок);
		Иначе
			ОстатокВКэше = Макс(СтрокаКэша.Количество - НайденнаяСтрока.Количество, 0);
			КоличествоКЗаполнению = Мин(ОстатокВКэше, Цел(КоличествоУпаковок));
		КонецЕсли;
		
		Если КоличествоКЗаполнению = 0 ИЛИ СтрокаДляОбработки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДляОбработки.Количество = СтрокаДляОбработки.Количество + КоличествоКЗаполнению;
		Если РезультатОбработки.ИзмененныеСтроки.Найти(СтрокаДляОбработки) = Неопределено Тогда
			РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаДляОбработки);
		КонецЕсли;
		
		ДанныеШтрихкодаДляОбработки.Количество = ДанныеШтрихкодаДляОбработки.Количество - КоличествоКЗаполнению * КоэффициентУпаковки;
		
	КонецЦикла;
	
	// Добавим строку при необходимости.
	Если СтрокаДляОбработки = Неопределено Тогда
		СтрокаДляОбработки = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДляОбработки, ДанныеШтрихкодаДляОбработки);
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаДляОбработки);
	ИначеЕсли ДанныеШтрихкодаДляОбработки.Количество > 0 Тогда
		СтрокаДляОбработки.Количество = СтрокаДляОбработки.Количество + ДанныеШтрихкодаДляОбработки.Количество;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДляОбработки.КлючСвязи) Тогда
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТЧ], СтрокаДляОбработки, "КлючСвязи");
	КонецЕсли;
	
	// Добавим серию в документ.
	Если ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.Серия)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СерииНоменклатуры") Тогда
		
		ПараметрыПоиска = Новый Структура("Серия");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкодаДляОбработки);
		НайденныеСтрокиСерии = Объект.СерииНоменклатуры.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтрокиСерии.Количество() = 0 Тогда
			СтрокаСерии = Объект.СерииНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСерии, ДанныеШтрихкодаДляОбработки);
			СтрокаСерии.КлючСвязи = СтрокаДляОбработки.КлючСвязи;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеШтрихкодаДляОбработки.ОбработатьБезМаркировки Тогда
		СтрокаДляОбработки.МаркируемаяПродукция = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
		И НастройкиКэша.Штрихкоды = "ШтрихкодыУпаковок" Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим марку.
	Если ИнтеграцияИСУНФКлиентСервер.ЭтоМарка(ДанныеШтрихкодаДляОбработки.Штрихкод) Тогда
		НоваяСтрокаУпаковки = Объект[НастройкиКэша.Штрихкоды].Добавить();
		НоваяСтрокаУпаковки[НастройкиКэша.ШтрихкодУпаковки] = ДанныеШтрихкодаДляОбработки.ШтрихкодУпаковки;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрокаУпаковки, "КодАкцизнойМарки") Тогда
			НоваяСтрокаУпаковки.КодАкцизнойМарки = ДанныеШтрихкодаДляОбработки.Штрихкод;
		КонецЕсли;
		
		// Особенности учета алкогольной продукции.
		Если ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			НоваяСтрокаУпаковки.Справка2 = ДанныеШтрихкодаДляОбработки.Справка2;
			Если ДанныеШтрихкодаДляОбработки.Свойство("УпаковкаВерхнегоУровня") Тогда
				НоваяСтрокаУпаковки.ШтрихкодУпаковки = ДанныеШтрихкодаДляОбработки.УпаковкаВерхнегоУровня;
			КонецЕсли;
		КонецЕсли;
		
		ШтрихкодированиеИСМП.ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковки(
			НоваяСтрокаУпаковки,
			ДанныеШтрихкодаДляОбработки,
			ПараметрыСканирования);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрокаУпаковки, "КлючСвязи") Тогда
			НоваяСтрокаУпаковки.КлючСвязи = СтрокаДляОбработки.КлючСвязи;
		КонецЕсли;
		
		// Обновим кэш штрихкодов упаковок.
		Если НЕ Форма = Неопределено Тогда
			ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти