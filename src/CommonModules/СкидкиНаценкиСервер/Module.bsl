#Область СлужебныеПроцедурыИФункции

// Функция возвращает индекс картинки 
// в зависимости от значения поля "ВариантСовместногоПрименения" 
// анализируемой группы
Функция ПолучитьИндексКартинкиДляГруппы(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		Индекс = 8
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		Индекс = 16
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
		Индекс = 0
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		Индекс = 4
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		Индекс = 12
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Функция возвращает индекс картинки 
// в зависимости от значения полей "СпособПредоставления" и "ПометкаУдаления"
// анализируемой скидки
Функция ПолучитьИндексКартинкиДляСкидки(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент
		Или СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов
	Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 32;
		Иначе
			Индекс = 28;
		КонецЕсли;
		Если Не СтрокаДерева.СкидкаНаценка.ЕстьУсловияПоДК Тогда
			Индекс = Индекс + 40;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма
		Или СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов
	Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
		Если Не СтрокаДерева.СкидкаНаценка.ЕстьУсловияПоДК Тогда
			Индекс = Индекс + 36;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦен Тогда
		Индекс = 48;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		Индекс = 36;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда
		Индекс = 52;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Промокод Тогда		
		Индекс = 84;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Расширение Тогда		
		Индекс = 88;
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Функция создает таблицу значений.
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры) Экспорт
	
	Если Параметры.ПустаяТаблицаСкидокСРасшифровкой = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("КлючСвязи",   			Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Расшифровка", 			Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица.Колонки.Добавить("ТаблицаПодарков",			Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица.Колонки.Добавить("ТаблицаСообщений",		Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица.Колонки.Добавить("Сумма",       			Новый ОписаниеТипов("Число"));            
		Таблица.Колонки.Добавить("ОбщаяСуммаСкидок", 	   	Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Действует",   			Новый ОписаниеТипов("Булево"));
		Таблица.Колонки.Добавить("ЗначениеСкидкиНаценки", 	Новый ОписаниеТипов("Число"));
		Параметры.ПустаяТаблицаСкидокСРасшифровкой = Таблица;
	Иначе
		Возврат Параметры.ПустаяТаблицаСкидокСРасшифровкой.СкопироватьКолонки();
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьПустуюТаблицуСкидокСРасшифровкой()

// Функция выполняет объединение подчиненных таблиц данных.
//
// Возвращаемое значение:
//	ТаблицаДанных - объединенная таблица данных.
//
Функция ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева, ТолькоБонусы = Ложь)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КлючСвязи",                 Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Сумма",                     Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Расшифровка",               Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаДанных.Колонки.Добавить("ТаблицаСообщений",          Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаДанных.Колонки.Добавить("ТаблицаПодарков",           Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаДанных.Колонки.Добавить("СуммироватьБезусловно", 	Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если НЕ ПодчиненнаяСтрока.ЭтоГруппа Тогда // Это скидка а не группа
			
			Если НЕ ПодчиненнаяСтрока.ПараметрыУсловий.УсловияВыполнены Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		Если ТолькоБонусы И НЕ ПодчиненнаяСтрока.ЭтоПравилоНачисленияБонусов Тогда
			Продолжить;			
		КонецЕсли;
		
		РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;
		
		Для Каждого СтрокаТаблицы Из ПодчиненнаяСтрока.ТаблицаДанных Цикл
			Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
				НоваяСтрока.ТаблицаСообщений = СтрокаТаблицы.ТаблицаСообщений.Скопировать();
				НоваяСтрока.ТаблицаПодарков = СтрокаТаблицы.ТаблицаПодарков.Скопировать();
			Иначе
				Если СтрокаТаблицы.Действует Тогда
					НоваяСтрока = ТаблицаДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
					НоваяСтрока.ТаблицаСообщений = СтрокаТаблицы.ТаблицаСообщений.Скопировать();
					НоваяСтрока.ТаблицаПодарков = СтрокаТаблицы.ТаблицаПодарков.Скопировать();
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ПодчиненнаяСтрока.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение") 
				ИЛИ (ПодчиненнаяСтрока.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Подарок")
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодчиненнаяСтрока.СкидкаНаценка, "ПодарокИзКорзиныПокупателя")) Тогда
				// Скидка в размере стоимости подарка не может быть вытеснена какой-то другой
				// Даже если стоимость подарка распределяется в виде скидки на другие строки чека
				НоваяСтрока.СуммироватьБезусловно = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ОбъединитьТаблицыДанныхПодчиненныхСтрок()

// Функция создает таблицу значений с расшифровками скидок и добавляет в нее переданные значения.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьРасшифровкуСкидки(СтрокаДерева, Сумма, Параметры, Комментарий = "", ЗначениеСкидкиНаценки = Неопределено) Экспорт
	
	Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
	
	СтрокаРасшифровки = Расшифровка.Добавить();
	СтрокаРасшифровки.СкидкаНаценка = СтрокаДерева.СкидкаНаценка;
	СтрокаРасшифровки.Сумма         = Сумма;
	Если ЗначениеСкидкиНаценки = Неопределено Тогда
		СтрокаРасшифровки.ЗначениеСкидкиНаценки = СтрокаДерева.ЗначениеСкидкиНаценки;
	Иначе
		СтрокаРасшифровки.ЗначениеСкидкиНаценки = ЗначениеСкидкиНаценки;
	КонецЕсли;
	СтрокаРасшифровки.Комментарий = Комментарий;
	
	Возврат Расшифровка;
	
КонецФункции // ПолучитьРасшифровкуСкидки()

// Функция заполняет ключи связи в табличной части "Товары" документа.
//
Процедура ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, ИмяТЧ, ИмяТЧ2 = Неопределено, пПерезаполнять = Ложь) Экспорт
	
	Индекс = 0;
	
	// определяем требуется ли перезаполнять таблицу АкцизныеМарки
	ЕстьРеквизитАкцизныеМарки 							= Ложь;
	АкцизныеМаркиЭтоТипДанныеФормыКоллекция 			= Ложь;
	КоллекцияАкцизныеМаркиНеПустая 						= Ложь;
	ЕстьРеквизитАкцизныеМарки 							= ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "АкцизныеМарки");
	Если ЕстьРеквизитАкцизныеМарки Тогда
		АкцизныеМаркиЭтоТипДанныеФормыКоллекция = ТипЗнч(Объект.АкцизныеМарки) = Тип("ДанныеФормыКоллекция");
		Если АкцизныеМаркиЭтоТипДанныеФормыКоллекция Тогда
			КоллекцияАкцизныеМаркиНеПустая 				= Объект.АкцизныеМарки.Количество() > 0;
		КонецЕсли;
	КонецЕсли;
	НадоПерезаполнятьАкцизныеМарки 						= ЕстьРеквизитАкцизныеМарки И АкцизныеМаркиЭтоТипДанныеФормыКоллекция И КоллекцияАкцизныеМаркиНеПустая;

	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СтароеЗначение = ?(ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи), СтрокаТЧ.КлючСвязи, Неопределено);
		
		Если пПерезаполнять Тогда
			Индекс = Индекс + 1;
			СтрокаТЧ.КлючСвязи = Индекс;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
				ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТЧ], СтрокаТЧ, "КлючСвязи");
			КонецЕсли;
			Если Индекс < СтрокаТЧ.КлючСвязи Тогда
				Индекс = СтрокаТЧ.КлючСвязи;
			КонецЕсли;
		КонецЕсли;
		
		НовоеЗначение = СтрокаТЧ.КлючСвязи;
		
		Если НадоПерезаполнятьАкцизныеМарки И ЗначениеЗаполнено(СтароеЗначение) Тогда
			
			ПараметрыОтбора = Новый Структура("КлючСвязи", СтароеЗначение);
			НайденныеСтроки = Объект.АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
			Для Каждого Элемент Из НайденныеСтроки Цикл
				Элемент.КлючСвязи = НовоеЗначение;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ИмяТЧ2 = Неопределено Тогда
		Для Каждого СтрокаТЧ Из Объект[ИмяТЧ2] Цикл
			Индекс = Индекс + 1;
			СтрокаТЧ.КлючСвязиДляСкидокНаценок = Индекс;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКлючиСвязиВТабличнойЧастиТовары()

// Функция получает текущее время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущееВремяОбъекта(Объект) Экспорт
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	ТекущееВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
	
	Возврат ТекущееВремя;
	
КонецФункции // ПолучитьТекущееВремяОбъекта()

// Функция получает текущую дату время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущуюДатуОбъекта(Объект) Экспорт
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	
	Возврат ТекущаяДата;
	
КонецФункции // ПолучитьТекущуюДатуОбъекта()

// Функция проверяет необходимость пересчета автоматических скидок в зависимости от действия, которое привело к вызову функии.
//
Функция ПроверитьНеобходимостьПересчетаАвтоматическихСкидок(Действие, КолонкаТЧ) Экспорт
	
	Если НЕ Константы.ЕстьАвтоматическиеСкидки.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяПересчетАвтоматическихСкидок = Истина;
	
	// Если изменилась сумма или цена и нет скидки, которые зависят от цены, то пересчитывать
	// автоматические скидки не требуется.
	Если СтрНайти(Действие, "Дата") > 0 Тогда
		ТребуетсяПересчетАвтоматическихСкидок = Ложь;
		НаборЗаписей = РегистрыСведений.СлужебныйАвтоматическиеСкидки.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.ЕстьСкидкиСРасписанием ИЛИ ЗаписьНабора.ЕстьСкидкиСПроизвольнымУсловием Тогда
				ТребуетсяПересчетАвтоматическихСкидок = Истина;
			КонецЕсли;
		КонецЦикла;
	// Если изменился контрагент и нет скидок, которые зависят от получателя-контрагента, то пересчитывать
	// автоматические скидки не требуется.
	ИначеЕсли СтрНайти(Действие, "Контрагент") > 0 Тогда
		ТребуетсяПересчетАвтоматическихСкидок = Ложь;
		НаборЗаписей = РегистрыСведений.СлужебныйАвтоматическиеСкидки.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.ЕстьСкидкиСПолучателямиКонтрагенты 
				ИЛИ ЗаписьНабора.ЕстьСкидкиСПолучателямиСегменты 
				ИЛИ ЗаписьНабора.ЕстьСкидкиСПроизвольнымУсловием Тогда
				ТребуетсяПересчетАвтоматическихСкидок = Истина;
			КонецЕсли;
		КонецЦикла;
	// Если изменился склад и нет скидок, которые зависят от получателя-склада, то пересчитывать
	// автоматические скидки не требуется.
	ИначеЕсли СтрНайти(Действие, "Склад") > 0 Тогда
		ТребуетсяПересчетАвтоматическихСкидок = Ложь;
		НаборЗаписей = РегистрыСведений.СлужебныйАвтоматическиеСкидки.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.ЕстьСкидкиСПолучателямиСклады ИЛИ ЗаписьНабора.ЕстьСкидкиСПроизвольнымУсловием Тогда
				ТребуетсяПересчетАвтоматическихСкидок = Истина;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Действие = "ИзменениеВторостепенногоРеквизита" Тогда
		ТребуетсяПересчетАвтоматическихСкидок = Ложь;
		НаборЗаписей = РегистрыСведений.СлужебныйАвтоматическиеСкидки.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.ЕстьСкидкиСПроизвольнымУсловием Тогда
				ТребуетсяПересчетАвтоматическихСкидок = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТребуетсяПересчетАвтоматическихСкидок = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяПересчетАвтоматическихСкидок;
	
КонецФункции

// Функция сбрасывает флаг "СкидкиРассчитаны", если это необходимо, и возвращает Истина, если требуется пересчет скидок.
//
Функция СброситьФлагСкидкиРассчитаны(Форма, Действие, КолонкаТЧ, ТЧ = "Запасы", ТЧ2 = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТребуетсяПересчетАвтоматическихСкидок = Истина;
	
	Если Объект[ТЧ].Количество() = 0 И (ТЧ2 = Неопределено ИЛИ Объект[ТЧ2].Количество() = 0) Тогда
		ТребуетсяПересчетАвтоматическихСкидок = Ложь;
	Иначе
		ТребуетсяПересчетАвтоматическихСкидок = ПроверитьНеобходимостьПересчетаАвтоматическихСкидок(Действие, КолонкаТЧ);
	КонецЕсли;
	
	Если ТребуетсяПересчетАвтоматическихСкидок И Объект.СкидкиРассчитаны Тогда
		Объект.СкидкиРассчитаны = Ложь;
	КонецЕсли;
	Возврат ТребуетсяПересчетАвтоматическихСкидок;
	
КонецФункции

Функция ПрименитьРассчитанныеСкидкиКОбъекту(Объект, РасчетныеСкидки, НаименованиеТЧ = "Запасы") Экспорт
	
	ТаблицаПодарков = Неопределено;
	Если РасчетныеСкидки.Свойство("ТаблицаПодарков", ТаблицаПодарков) Тогда
		ТаблицаПодарковНаВыбор = ТаблицаПодарков.СкопироватьКолонки();
		ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ТаблицаПодарков, ТаблицаПодарковНаВыбор);
		Если ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
			Для Каждого строкаПодаркаНаВыбор Из ТаблицаПодарковНаВыбор Цикл 
				ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ТаблицаПодарковНаВыбор, строкаПодаркаНаВыбор, "КлючСвязи");
			КонецЦикла;
			РасчетныеСкидки.Вставить("ТаблицаПодарковНаВыбор", ТаблицаПодарковНаВыбор);
		КонецЕсли;
	КонецЕсли;
	ДеревоСкидок = Неопределено;
	РасчетныеСкидки.Свойство("ДеревоСкидок", ДеревоСкидок);
	ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, НаименованиеТЧ, РасчетныеСкидки.ТаблицаСкидкиНаценки, , , , ДеревоСкидок);
	//Бонусы
	ТаблицаБонусыКНачислению = Неопределено;
	Если РасчетныеСкидки.Свойство("ТаблицаБонусыКНачислению", ТаблицаБонусыКНачислению)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "БонусныеБаллыКНачислению") Тогда
		РаботаСБонусами.ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, РасчетныеСкидки.ТаблицаБонусыКНачислению);
	КонецЕсли;
	СуммаОплатыБонусами = Неопределено;
	Если РасчетныеСкидки.Свойство("СуммаОплатыБонусами", СуммаОплатыБонусами) И РасчетныеСкидки.СуммаОплатыБонусами > 0 Тогда
		ТаблицаОплатыБонусами = Новый ТаблицаЗначений;
		ТаблицаОплатыБонусами.Колонки.Добавить("СуммаБонусов", Новый ОписаниеТипов("Число"));
		ТаблицаОплатыБонусами.Колонки.Добавить("ВидОплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБезналичныхОплат"));
		СтрокаОплаты = ТаблицаОплатыБонусами.Добавить();
		СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы");
		СтрокаОплаты.СуммаБонусов = СуммаОплатыБонусами;		
				
		РаботаСБонусами.РаспределитьОплатуБонусамиКакСкидку(Объект, ТаблицаОплатыБонусами);
	КонецЕсли;
	
	// Промокоды, которые нужно выдать при продаже
	СработавшиеСкидки = Неопределено;
	Если ТипЗнч(Объект.СкидкиНаценки) = Тип("ТаблицаЗначений") Тогда
		СработавшиеСкидки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Объект.СкидкиНаценки.ВыгрузитьКолонку("СкидкаНаценка"));
	Иначе
		СработавшиеСкидки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Объект.СкидкиНаценки.Выгрузить(,"СкидкаНаценка").ВыгрузитьКолонку("СкидкаНаценка"));
	КонецЕсли;
	ПромокодыПереопределяемый.ОтметитьСработавшиеПромокоды(Объект.ПримененныеПромокоды, СработавшиеСкидки);
    ПромокодыПереопределяемый.ДобавитьПромокодыКВыдаче(Объект.ПримененныеПромокоды, Объект.СкидкиНаценки);

	Результат = ПеренестиПодаркиВЗапасы(Объект, РасчетныеСкидки, , НаименованиеТЧ);
	Возврат Результат; 
	
КонецФункции 

// Возвращает значение, которое следует использовать при построении иерархии номенклатуры
// Значение предположительное, механизм построение иерархии должен предусматривать возможность наличия более глубокой иерархии
//
Функция МаксимальныйУровеньИерархииНоменклатуры()
	// При необходимости, реализовать логику хранения и актуализации значения, 
	// Характеризующего максимальный уровень иерархии номенклатуры в данной области данных
	// Может потребоваться, если глубина иерархии очень высока, и тратится много времени для достраивание
	Возврат 6;
КонецФункции

// Возвращает ближайшую дату ежигодного события. Если событие прошло недавно - возвращает дату в прошлом.
// 
// Возвращаемое значение:
//   Дата
//
Функция БлижайшаяДатаЕжегодногоСобытия(ДатаСобытия, ТекущаяДата) Экспорт
		
	Результат = ДатаСобытия;
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(БлижайшиеДаты.Сегодня, БлижайшиеДаты.БудущаяДатаСобытия, ДЕНЬ) > РАЗНОСТЬДАТ(БлижайшиеДаты.ПрошлаяДатаСобытия, БлижайшиеДаты.Сегодня, ДЕНЬ)
	|			ТОГДА БлижайшиеДаты.ПрошлаяДатаСобытия
	|		ИНАЧЕ БлижайшиеДаты.БудущаяДатаСобытия
	|	КОНЕЦ КАК БлижайшаяДатаСобытия
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДатыСобытия.ДатаВЭтомГоду > ДатыСобытия.ТекущаяДата
	|				ТОГДА ДатыСобытия.ДатаВЭтомГоду
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ДатыСобытия.ДатаВЭтомГоду, ГОД, 1)
	|		КОНЕЦ КАК БудущаяДатаСобытия,
	|		ВЫБОР
	|			КОГДА ДатыСобытия.ДатаВЭтомГоду <= ДатыСобытия.ТекущаяДата
	|				ТОГДА ДатыСобытия.ДатаВЭтомГоду
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ДатыСобытия.ДатаВЭтомГоду, ГОД, -1)
	|		КОНЕЦ КАК ПрошлаяДатаСобытия,
	|		ДатыСобытия.ТекущаяДата КАК Сегодня
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) КАК ТекущаяДата,
	|			ДОБАВИТЬКДАТЕ(&ДатаСобытия, ГОД, РАЗНОСТЬДАТ(&ДатаСобытия, &ТекущаяДата, ГОД)) КАК ДатаВЭтомГоду) КАК ДатыСобытия) КАК БлижайшиеДаты";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Результат = Выб.БлижайшаяДатаСобытия;
	Иначе
		ВызватьИсключение("Не удалось определить ближайшую дату события!");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Функция проверяет управляемую скидку, и возвращает Истину, она назначается на строку документа.
//
// Параметры:
//	Скидка - СправочникСсылка.АвтоматическиеСкидки - Проверяемая управляемая скидка
//
// Возвращаемое значение:
//	Булево - Признак назначения скидки на строку документа
Функция ЭтоУправляемаяСкидкаНаСтроку(Скидка) Экспорт
	Результат = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкаНаценка.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК СкидкаНаценка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК УсловияСкидок
	|		ПО СкидкаНаценка.Ссылка = УсловияСкидок.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловий
	|		ПО (УсловияСкидок.УсловиеПредоставления = ПараметрыУсловий.Ссылка)
	|ГДЕ
	|	СкидкаНаценка.Ссылка В (&Скидки)
	|	И СкидкаНаценка.ЕстьУсловияАктивацииВручную
	|	И ПараметрыУсловий.ОбластьОграничения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)
	|	И ПараметрыУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаАктивациюВручную)";
	Запрос.УстановитьПараметр("Скидки", Скидка);
	РезультатЗапроса = Запрос.Выполнить();
	Результат = Не РезультатЗапроса.Пустой();
    Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеЗапросы

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаКурсыВалют() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "КурсыВалют");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценки(ТолькоПредварительныйРасчет)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.СкидкаНаценка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&СкидкиНаценки КАК СкидкиНаценки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.Ссылка КАК Ссылка,
	|	СкидкиНаценки.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.УдалитьРеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	СкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	СкидкиНаценки.ОбластьПредоставления КАК ОбластьПредоставления,
	|	СкидкиНаценки.ВидЦен КАК ВидЦен,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА СкидкиНаценки.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ СкидкиНаценки.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦен)
	|			ТОГДА СкидкиНаценки.ВидЦен.ВалютаЦены
	|		ИНАЧЕ СкидкиНаценки.ВалютаПредоставления
	|	КОНЕЦ КАК ВалютаПредоставления,
	|	СкидкиНаценки.ПорядокОкругления КАК ПорядокОкругления,
	|	СкидкиНаценки.ВариантОкругления КАК ВариантОкругления
	|ПОМЕСТИТЬ ВременнаяТаблицаСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблицаСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки КАК СкидкиНаценки
	|		ПО ВременнаяТаблицаСкидки.Ссылка = СкидкиНаценки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаСкидкиНаценки.Ссылка КАК СкидкаНаценка,
	|	ВременнаяТаблицаСкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	ВременнаяТаблицаСкидкиНаценки.ОбластьПредоставления КАК ОбластьПредоставления,
	|	ВременнаяТаблицаСкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	ВременнаяТаблицаСкидкиНаценки.ПорядокОкругления КАК ПорядокОкругления,
	|	ВременнаяТаблицаСкидкиНаценки.ВариантОкругления КАК ВариантОкругления
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК ВременнаяТаблицаСкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки КАК СкидкиНаценки
	|		ПО ВременнаяТаблицаСкидкиНаценки.Ссылка = СкидкиНаценки.Ссылка";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 3, 3, "СкидкиНаценки");
	
КонецФункции // ТекстЗапросаТаблицаСкидкиНаценки
// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаУсловияПредоставления()
	
	// В запросе выбираются все РАЗЛИЧНЫЕ, т.к. возможна ситуация, когда в разных скидках будут одинаковые условия.
	// В дальнейшем эта таблица используется для определения выполненных условий с помощью внутреннего соединения.
	// Дублей в этой таблице быть не должно!
	//
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Условия.УсловиеПредоставления КАК Ссылка,
	|	Условия.УсловиеПредоставления.УсловиеПредоставления КАК УсловиеПредоставления,
	|	Условия.УсловиеПредоставления.ТипСравнения КАК ТипСравнения,
	|	Условия.УсловиеПредоставления.ВалютаОграничения КАК ВалютаОграничения,
	|	Условия.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	Условия.УсловиеПредоставления.ОбластьОграничения КАК ОбластьОграничения,
	|	Условия.УсловиеПредоставления.УчитыватьПродажуТолькоОпределенногоСпискаНоменклатуры КАК ЕстьОтборПоНоменклатуре,
	|	Условия.УсловиеПредоставления.ВидДисконтнойКарты КАК ВидДисконтнойКарты,
	|	Условия.УсловиеПредоставления.ВключатьТекущуюПродажуВНакопленныйОбъемПродаж КАК ВключатьТекущуюПродажуВНакопленныйОбъемПродаж,
	|	Условия.УсловиеПредоставления.ВидПериода КАК ВидПериода,
	|	Условия.УсловиеПредоставления.Периодичность КАК Периодичность,
	|	ВЫБОР
	|		КОГДА Условия.УсловиеПредоставления.УсловиеПредоставления В (ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж), ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))
	|				И Условия.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА Условия.УсловиеПредоставления.ЗначениеУсловияОграничения * ЕСТЬNULL(КурсыВалютОграничения.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютОграничения.Кратность, 1))
	|		ИНАЧЕ Условия.УсловиеПредоставления.ЗначениеУсловияОграничения
	|	КОНЕЦ КАК ЗначениеУсловияОграничения,
	|	Условия.УсловиеПредоставления.ВалютаОграничения.Код КАК ЦифровойКодВалютыОграничения,
	|	Условия.УсловиеПредоставления.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	Условия.УсловиеПредоставления.ДнейПослеДняРождения КАК ДнейПослеДняРождения
	|ПОМЕСТИТЬ УсловияПредоставления
	|ИЗ
	|	ВременнаяТаблица КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК Условия
	|		ПО СкидкиНаценки.Ссылка = Условия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютОграничения
	|		ПО (КурсыВалютОграничения.Валюта = Условия.УсловиеПредоставления.ВалютаОграничения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	УсловияПредоставления.УсловиеПредоставления КАК УсловиеПредоставления,
	|	УсловияПредоставления.ВалютаОграничения КАК ВалютаОграничения,
	|	УсловияПредоставления.ТипСравнения КАК ТипСравнения,
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.ОбластьОграничения КАК ОбластьОграничения,
	|	УсловияПредоставления.ЕстьОтборПоНоменклатуре КАК ЕстьОтборПоНоменклатуре,
	|	УсловияПредоставления.ВключатьТекущуюПродажуВНакопленныйОбъемПродаж КАК ВключатьТекущуюПродажуВНакопленныйОбъемПродаж,
	|	УсловияПредоставления.ВидДисконтнойКарты КАК ВидДисконтнойКарты,
	|	УсловияПредоставления.ВидПериода КАК ВидПериода,
	|	УсловияПредоставления.Периодичность КАК Периодичность,
	|	УсловияПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	УсловияПредоставления.ЦифровойКодВалютыОграничения КАК ЦифровойКодВалютыОграничения,
	|	УсловияПредоставления.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	УсловияПредоставления.ДнейПослеДняРождения КАК ДнейПослеДняРождения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "УсловияПредоставления");
	
КонецФункции

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиПоЦеновымГруппам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеновыеГруппы.Ссылка КАК СкидкаНаценка,
	|	ЦеновыеГруппы.ЗначениеУточнения КАК ЗначениеУточнения,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА ЦеновыеГруппы.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ ЦеновыеГруппы.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.НоменклатураГруппыЦеновыеГруппы КАК ЦеновыеГруппы
	|		ПО СкидкиНаценки.Ссылка = ЦеновыеГруппы.Ссылка
	|			И (ЦеновыеГруппы.Ссылка.ЕстьУточненияПоЦеновымГруппам)
	|ГДЕ
	|	ЦеновыеГруппы.Ссылка.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоЦеновымГруппам)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоЦеновымГруппам");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы значений скидок (наценок) по категориям номенклатуры.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиПоКатегориямНоменклатуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатурныеГруппы.Ссылка КАК СкидкаНаценка,
	|	НоменклатурныеГруппы.ЗначениеУточнения КАК ЗначениеУточнения,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА НоменклатурныеГруппы.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ НоменклатурныеГруппы.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки,
	|	НоменклатурныеГруппы.ЗначениеУточнения.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.НоменклатураГруппыЦеновыеГруппы КАК НоменклатурныеГруппы
	|		ПО СкидкиНаценки.Ссылка = НоменклатурныеГруппы.Ссылка
	|			И (НоменклатурныеГруппы.Ссылка.ЕстьУточненияПоКатегориям)
	|ГДЕ
	|	НоменклатурныеГруппы.Ссылка.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоКатегориям)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоКатегориямНоменклатуры");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы значений скидок (наценок) по номенклатуре.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиПоНоменклатуре()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК СкидкаНаценка,
	|	Номенклатура.ЗначениеУточнения КАК ЗначениеУточнения,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА Номенклатура.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ Номенклатура.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки,
	|	Номенклатура.ЗначениеУточнения.ЭтоГруппа КАК ЭтоГруппа,
	|	Номенклатура.Характеристика
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.НоменклатураГруппыЦеновыеГруппы КАК Номенклатура
	|		ПО СкидкиНаценки.Ссылка = Номенклатура.Ссылка
	|			И (Номенклатура.Ссылка.ЕстьУточненияПоНоменклатуре)
	|ГДЕ
	|	Номенклатура.Ссылка.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоНоменклатуре");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

Функция ТекстЗапросаТаблицаСкидкиНаценкиПоВидуЦен()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	СкидкиНаценки.ВидЦен КАК ВидЦен,
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦен)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоВидуЦен");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы значений скидок (наценок) по номенклатуре.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиПоСегментамНоменклатуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураГруппыЦеновыеГруппы.Ссылка КАК СкидкаНаценка,
	|	СоставСегментаНоменклатуры.Номенклатура КАК ЗначениеУточнения,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|			ТОГДА НоменклатураГруппыЦеновыеГруппы.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ НоменклатураГруппыЦеновыеГруппы.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки,
	|	НоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения.ЭтоГруппа КАК ЭтоГруппа,
	|	СоставСегментаНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.НоменклатураГруппыЦеновыеГруппы КАК НоменклатураГруппыЦеновыеГруппы
	|		ПО СкидкиНаценки.Ссылка = НоменклатураГруппыЦеновыеГруппы.Ссылка
	|			И (НоменклатураГруппыЦеновыеГруппы.Ссылка.ЕстьУточненияПоСегментамНоменклатуры)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
	|		ПО (СоставСегментаНоменклатуры.Сегмент = НоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения)
	|ГДЕ
	|	НоменклатураГруппыЦеновыеГруппы.Ссылка.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоСегменту)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоСегментамНоменклатуры");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоСегментам()

// Формирует текст запроса для создания временной таблицы товаров с развернутой иерархией примерно такого вида:
//	Выбрать Различные
//		Товар.Ссылка КАК Товар,
//		Родитель1.Ссылка КАК Родитель1,
//		...
//		Родитель2.Ссылка КАК РодительN
//	ПОМЕСТИТЬ вт_ТоварыСИерархией
//	ИЗ
//		Справочник.Номенклатура КАК Товар
//	   	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Родитель1
//			...
//				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК РодительN 
//				ПО РодительN-1.Родитель = РодительN.Ссылка 
//			...
//		ПО Товар.Родитель = Родитель1.Ссылка
//
// Возвращаемое значение:
//	Строка
Функция ТекстЗапросаРазвернутойИерархииПодгруппДоГлубины(ГлубинаИерархии, ИмяТаблицыФильтра = Неопределено, НачинаяСГлубины = 0, ИмяТаблицыРодителей = "Справочник.Номенклатура")
	ТекстСоединения = "";
	ТекстВыборки = "";
	Для сч = НачинаяСГлубины По ГлубинаИерархии Цикл
		Отступ = "	";
		ТекстВыборки = ТекстВыборки + СтрШаблон(",
		|	Подгруппа%1.Ссылка КАК Подгруппа%1", XMLСтрока(сч)); 
		ПредыдущаяТаблица = ?(сч > НачинаяСГлубины, СтрШаблон("Подгруппа%1.Ссылка", XMLСтрока(сч - 1)), "спрНоменклатура.Ссылка");
		ТекстСоединения = ТекстСоединения +СтрШаблон("
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Подгруппа%1
		|			ПО %2 = Подгруппа%1.Родитель
		|				И Подгруппа%1.ЭтоГруппа", XMLСтрока(сч), ПредыдущаяТаблица);
	КонецЦикла;
	
	ТекстЗапроса = СтрШаблон("
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Номенклатура,
	|	Товары.Ссылка КАК Ссылка%1
	|ПОМЕСТИТЬ вт_ТоварыСИерархией
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура	  		
	|			По Товары.Ссылка = спрНоменклатура.Ссылка
	|				И спрНоменклатура.ЭтоГруппа%2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|", ТекстВыборки, ТекстСоединения); 
	Если ЗначениеЗаполнено(ИмяТаблицыФильтра) Тогда
		ТекстЗапроса = стрЗаменить(ТекстЗапроса, "ВременнаяТаблицаТовары", ИмяТаблицыФильтра);
	КонецЕсли;
	ТекстЗапроса = стрЗаменить(ТекстЗапроса, "Справочник.Номенклатура", ИмяТаблицыРодителей);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция КоличествоУровнейПодготовленнойТаблицыИЕрархии(МенеджерВременныхТаблиц, ИмяТаблицыРезультата = "вт_ТоварыСИерархией")
	
	Результат = 1;
	
	ШагГлубиныИерархии = МаксимальныйУровеньИерархииНоменклатуры() - 1;
	НачальнаяГлубина = 0;
	КонечнаяГлубина = НачальнаяГлубина + ШагГлубиныИерархии;
	
	ТекстУничтоженияВременныхТаблиц = "";
	ИмяТаблицыСсылок = "втГруппыНоменклатурыДляОтбора";
	
	ОписаниеТаблицИерархии = Новый Структура;	
	
	СчетчикЦикла = 1;
	ДостигнутКонецИерархии = Ложь;
	ИмяПоляМаксимальнойИерархии = "Номенклатура";
	Результат = КонечнаяГлубина;			
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Родитель КАК Родитель,
	|	Истина КАК ЭтоГруппа
	|ПОМЕСТИТЬ втГруппыНоменклатурыДляОтбора
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И НЕ 0 В
	|				(ВЫБРАТЬ
	|					ЕСТЬNULL(МАКСИМУМ(УсловияПредоставления.Ссылка), 0) КАК Условие
	|				ИЗ
	|					Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставления
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК ТЧУсловий
	|						ПО
	|							ТЧУсловий.Ссылка = УсловияПредоставления.Ссылка
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ГруппаОтбора
	|						ПО
	|							ГруппаОтбора.Ссылка = ТЧУсловий.Номенклатура
	|								И ГруппаОтбора.ЭтоГруппа = ИСТИНА
	|								И ГруппаОтбора.ПометкаУдаления = ЛОЖЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, ЭтоГруппа
	|;
	|";
	Пока НЕ ДостигнутКонецИерархии Цикл
			
		ТекстЗапросаФильтра = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	&Ссылка КАК Ссылка
		|ПОМЕСТИТЬ вт_СсылкиДляИерархии
		|ИЗ
		|	&ИмяТаблицыСсылок КАК ТаблицаНоменклатуры
		|ГДЕ
		|	НЕ &Ссылка ЕСТЬ NULL
		|	И НЕ &Ссылка = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|
		|Выбрать 
		|	СсылкиДляИерархии.Номенклатура
		|Из вт_СсылкиДляИерархии Как СсылкиДляИерархии";
		ТекстЗапросаФильтра = СтрЗаменить(ТекстЗапросаФильтра, "&Ссылка", "ТаблицаНоменклатуры."+ИмяПоляМаксимальнойИерархии);
		ТекстЗапросаФильтра = СтрЗаменить(ТекстЗапросаФильтра, "&ИмяТаблицыСсылок", ИмяТаблицыСсылок);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаФильтра;
		// BSLLS:CreateQueryInCycle-off
		РезультатФильтр = Запрос.Выполнить();
		Если РезультатФильтр.Пустой() Тогда
			// Либо достигли конца иерархии, либо иерархия не нужна 
			// Если условий на группу номенклатуры в БД нет, то нет смысла разворачивать иерархию, результат не будет востребован)
			ДостигнутКонецИерархии = Истина;
			Запрос.Текст = "Уничтожить вт_СсылкиДляИерархии";
			Запрос.Выполнить();
			Прервать;
		Иначе
			Результат = КонечнаяГлубина;
		КонецЕсли;
		// BSLLS:CreateQueryInCycle-on
		
		ИмяТаблицыСсылок = "вт_ТоварыСИерархией" + XMLСтрока(СчетчикЦикла);
		ТекстЗапросаИерархии = ТекстЗапросаРазвернутойИерархииПодгруппДоГлубины(КонечнаяГлубина, "вт_СсылкиДляИерархии", НачальнаяГлубина, "втГруппыНоменклатурыДляОтбора");
		ТекстЗапросаИерархии = стрЗаменить(ТекстЗапросаИерархии, "вт_ТоварыСИерархией", ИмяТаблицыСсылок);
		ТекстЗапросаИерархии = ТекстЗапросаИерархии  +  "
		|
		|Уничтожить вт_СсылкиДляИерархии
		|
		|;
		|
		|";

		Запрос.Текст = ТекстЗапросаИерархии;
		Запрос.Выполнить();
		
		ОписаниеТекущейТаблицы = Новый Структура;
		Для СчетчикПолей = 0 По НачальнаяГлубина - 1 Цикл 
			ОписаниеТекущейТаблицы.Вставить("Подгруппа" + XMLСтрока(СчетчикПолей), "Null");
		КонецЦикла;
		Для СчетчикПолей = НачальнаяГлубина По КонечнаяГлубина Цикл
			Для Каждого ОписаниеПредыдущейТаблицы Из ОписаниеТаблицИерархии Цикл
				ОписаниеПредыдущейТаблицы.Значение.Вставить("Подгруппа" + XMLСтрока(СчетчикПолей), "Null");
			КонецЦикла;
			ОписаниеТекущейТаблицы.Вставить("Подгруппа" + XMLСтрока(СчетчикПолей), "Подгруппа" + XMLСтрока(СчетчикПолей));
		КонецЦикла;
		ОписаниеТаблицИерархии.Вставить(ИмяТаблицыСсылок, ОписаниеТекущейТаблицы);
		
		СчетчикЦикла = СчетчикЦикла + 1;
		ИмяПоляМаксимальнойИерархии = "Подгруппа" + XMLСтрока(КонечнаяГлубина);
		НачальнаяГлубина = КонечнаяГлубина + 1;
		КонечнаяГлубина = НачальнаяГлубина + ШагГлубиныИерархии - 1;			
		Запрос.Текст = "";
	КонецЦикла; 
	
	ТекстЗапросаГруппировки = 
	"ВЫБРАТЬ
	|	Объединение.Номенклатура КАК Группа
	|	&ПоляГруппировки
	|ПОМЕСТИТЬ &вт_ТоварыСИерархией
	|ИЗ
	|	(&ОбъединениеТаблиц) КАК Объединение
	|
	|СГРУППИРОВАТЬ ПО
	|	Объединение.Номенклатура
	|
	|;
	|
	|";
	ТекстПолейГруппировки = "";
	ТекстОбъединенияТаблиц = "";
	
	ПерваяТаблицаДобавлена = ложь;
	Для Каждого ОписаниеТаблицы Из ОписаниеТаблицИерархии Цикл
		ТекстТаблицыОбъединения = 
		"ВЫБРАТЬ
		|	ТаблицаИерархии.Номенклатура КАК Номенклатура
		|	&Поля
		|ИЗ
		|	&ИмяТаблицы КАК ТаблицаИерархии";
		ТекстВыбратьОбъединения = "";		
		ИмяТаблицы = ОписаниеТаблицы.Ключ;
		ПоляТаблицы = ОписаниеТаблицы.Значение;
		Запятая = ",
		|	";	
		Для Каждого ОписаниеПоля Из ПоляТаблицы Цикл
			ИмяПоля = ОписаниеПоля.Ключ;
			ЗначениеПоля = ОписаниеПоля.Значение;
			ПрефиксТаблицы = "ТаблицаИерархии.";
			Если НРег(СокрЛП(ЗначениеПоля)) = "null" Тогда
				ПрефиксТаблицы = "";
			КонецЕсли;
			ТекстПоля = СтрШаблон("%1%2%3 КАК %4", Запятая, ПрефиксТаблицы, ЗначениеПоля, ИмяПоля); 
			ТекстВыбратьОбъединения = ТекстВыбратьОбъединения + ТекстПоля;
			Если Не ПерваяТаблицаДобавлена Тогда
				ТекстПоляГруппировки = СтрШаблон("%1Максимум(%2) КАК %2", Запятая, ИмяПоля);
				ТекстПолейГруппировки = ТекстПолейГруппировки + ТекстПоляГруппировки;
			КонецЕсли;
		КонецЦикла;
		ТекстТаблицыОбъединения = СтрЗаменить(ТекстТаблицыОбъединения, "&Поля", ТекстВыбратьОбъединения);
		ТекстТаблицыОбъединения = СтрЗаменить(ТекстТаблицыОбъединения, "&ИмяТаблицы", ИмяТаблицы);
		Если ПерваяТаблицаДобавлена Тогда
			ТекстТаблицыОбъединения = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстТаблицыОбъединения;
		КонецЕсли;
		ПерваяТаблицаДобавлена = Истина;
		ТекстОбъединенияТаблиц = ТекстОбъединенияТаблиц + ТекстТаблицыОбъединения;
		
		ТекстУничтоженияВременныхТаблиц = ТекстУничтоженияВременныхТаблиц + "
		| УНИЧТОЖИТЬ " + ИмяТаблицы + "
		|
		|;
		|
		|";
	КонецЦикла;
	
	Если ОписаниеТаблицИерархии.Количество() = 0 Тогда
		Результат = 0;
		ТекстОбъединенияТаблиц = 
		"ВЫБРАТЬ
		|	NULL КАК Номенклатура
		|ГДЕ
		|	ЛОЖЬ";
	Иначе;
		ТекстОбъединенияТаблиц  = ТекстОбъединенияТаблиц;
	КонецЕсли;
	
	ТекстЗапросаГруппировки = СтрЗаменить(ТекстЗапросаГруппировки, "&ПоляГруппировки", ТекстПолейГруппировки);
	ТекстЗапросаГруппировки = СтрЗаменить(ТекстЗапросаГруппировки, "&ОбъединениеТаблиц", ТекстОбъединенияТаблиц);
	ТекстЗапросаГруппировки = СтрЗаменить(ТекстЗапросаГруппировки, "&вт_ТоварыСИерархией", ИмяТаблицыРезультата);
	
	ТекстЗапросаГруппировки = ТекстЗапросаГруппировки + ТекстУничтоженияВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаГруппировки;
	Запрос.Выполнить();
	
	Возврат Результат;
КонецФункции
// Функция формирует текст запроса для таблицы выполненных условий скидок (наценок)
Функция ТекстЗапросаВыполненныхУсловий(КоличествоУровнейИерархииНоменклатуры)
	
 	КоличествоТаблиц = 49;
	НомерТаблицыРезультата = 37;
	
	РодителиВсехУровней = "ТаблицаИерархии.Группа";
	Если КоличествоУровнейИерархииНоменклатуры > 0 Тогда
		Для сч = 0 По КоличествоУровнейИерархииНоменклатуры Цикл
			ОчереднаяЧастьУсловия = СтрШаблон(", ТаблицаИерархии.Подгруппа%1",XMLСтрока(сч));
			РодителиВсехУровней = РодителиВсехУровней + ОчереднаяЧастьУсловия;
		КонецЦикла;
	КонецЕсли;

	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	УсловиеПоНоменклатуре.Ссылка КАК Ссылка,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ОтборТоваровПоГруппеНоменклатуры
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловиеПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК Товары
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО (Товары.Номенклатура = спрНоменклатура.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ГруппыСИерархией КАК ТаблицаИерархии
	|		ПО (ТаблицаИерархии.Группа = УсловиеПоНоменклатуре.Номенклатура)
	|			И (спрНоменклатура.Родитель В (&ПереченьРодителей))
	|ГДЕ
	|	УсловиеПоНоменклатуре.Ссылка В
	|			(ВЫБРАТЬ
	|				УсловияПредоставления.Ссылка
	|			ИЗ
	|				УсловияПредоставления КАК УсловияПредоставления
	|			ГДЕ
	|				НЕ УсловияПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоСегменту.Ссылка КАК Ссылка,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоСегменту.СегментНоменклатуры КАК СегментНоменклатуры
	|ПОМЕСТИТЬ ОтборСегментовНоменклатуры
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоСегменту КАК УсловияПредоставленияСкидокНаценокОтборПродажПоСегменту
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК СписокУсловий
	|		ПО (СписокУсловий.Ссылка = УсловияПредоставленияСкидокНаценокОтборПродажПоСегменту.Ссылка)
	|ГДЕ
	|	НЕ СписокУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборСегментовНоменклатуры.Ссылка КАК Ссылка,
	|	СоставСегментаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СоставСегментаНоменклатуры.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОтборТоваровПоСегментуНоменклатуры
	|ИЗ
	|	РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборСегментовНоменклатуры КАК ОтборСегментовНоменклатуры
	|		ПО (ОтборСегментовНоменклатуры.СегментНоменклатуры = СоставСегментаНоменклатуры.Сегмент)
	|ГДЕ
	|	(СоставСегментаНоменклатуры.Номенклатура, СоставСегментаНоменклатуры.Характеристика) В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура,
	|				Товары.Характеристика
	|			ИЗ
	|				ВременнаяТаблицаТовары КАК Товары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборСегментовНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка КАК Ссылка,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ОтборТоваровПоНоменклатуре
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК СписокУсловий
	|		ПО (СписокУсловий.Ссылка = УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка)
	|ГДЕ
	|	НЕ УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура
	|			ИЗ
	|				ВременнаяТаблицаТовары КАК Товары)
	|	И НЕ СписокУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокУсловий.Ссылка КАК ссылка,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОтборТоваровПоНоменклатуреСХарактеристиками
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК СписокУсловий
	|		ПО (СписокУсловий.Ссылка = УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка)
	|ГДЕ
	|	НЕ УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И (УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура, УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика) В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура,
	|				Товары.Характеристика
	|			ИЗ
	|				ВременнаяТаблицаТовары КАК Товары)
	|	И НЕ СписокУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.ЗначениеУсловияОграничения = 0
	|			ТОГДА 0
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|						ТОГДА ВЫРАЗИТЬ(Товары.Сумма / УсловияПредоставления.ЗначениеУсловияОграничения - 0.5 КАК ЧИСЛО(7, 0))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|						ТОГДА ВЫРАЗИТЬ(Товары.КоличествоВБазовыхЕдиницах / УсловияПредоставления.ЗначениеУсловияОграничения - 0.5 КАК ЧИСЛО(7, 0))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоКомплектов,
	|	УсловияПредоставления.ЕстьОтборПоНоменклатуре КАК ЕстьОтборПоНоменклатуре,
	|	НЕ ОтборТоваровПоГруппеНоменклатуры.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоГруппеНоменклатуры,
	|	НЕ ОтборТоваровПоНоменклатуре.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоНоменклатуре,
	|	НЕ ОтборТоваровПоНоменклатуреСХарактеристиками.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоНоменклатуреСХарактеристиками,
	|	НЕ ОтборТоваровПоСегментуНоменклатуры.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоСегментуНоменклатуры
	|ПОМЕСТИТЬ вт_ЗаРазовыйОбъемПродаж_ВСтроке_ДоОтборов
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК Товары
	|		ПО (УсловияПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж))
	|			И (УсловияПредоставления.ОбластьОграничения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборТоваровПоГруппеНоменклатуры КАК ОтборТоваровПоГруппеНоменклатуры
	|		ПО (Товары.Номенклатура = ОтборТоваровПоГруппеНоменклатуры.Номенклатура)
	|			И УсловияПредоставления.Ссылка = ОтборТоваровПоГруппеНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборТоваровПоНоменклатуре КАК ОтборТоваровПоНоменклатуре
	|		ПО (Товары.Номенклатура = ОтборТоваровПоНоменклатуре.Номенклатура)
	|			И УсловияПредоставления.Ссылка = ОтборТоваровПоНоменклатуре.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборТоваровПоНоменклатуреСХарактеристиками КАК ОтборТоваровПоНоменклатуреСХарактеристиками
	|		ПО (Товары.Номенклатура = ОтборТоваровПоНоменклатуреСХарактеристиками.Номенклатура)
	|			И (Товары.Характеристика = ОтборТоваровПоНоменклатуреСХарактеристиками.Характеристика)
	|			И УсловияПредоставления.Ссылка = ОтборТоваровПоНоменклатуреСХарактеристиками.ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборТоваровПоСегментуНоменклатуры КАК ОтборТоваровПоСегментуНоменклатуры
	|		ПО (Товары.Номенклатура = ОтборТоваровПоСегментуНоменклатуры.Номенклатура)
	|			И (Товары.Характеристика = ОтборТоваровПоСегментуНоменклатуры.Характеристика)
	|			И УсловияПредоставления.Ссылка = ОтборТоваровПоСегментуНоменклатуры.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА Товары.Сумма >= УсловияПредоставления.ЗначениеУсловияОграничения
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА Товары.Сумма > УсловияПредоставления.ЗначениеУсловияОграничения
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА Товары.Сумма <= УсловияПредоставления.ЗначениеУсловияОграничения
	|						ИНАЧЕ Товары.Сумма < УсловияПредоставления.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА Товары.КоличествоВБазовыхЕдиницах >= УсловияПредоставления.ЗначениеУсловияОграничения
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА Товары.КоличествоВБазовыхЕдиницах > УсловияПредоставления.ЗначениеУсловияОграничения
	|						КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА Товары.КоличествоВБазовыхЕдиницах <= УсловияПредоставления.ЗначениеУсловияОграничения
	|						ИНАЧЕ Товары.КоличествоВБазовыхЕдиницах < УсловияПредоставления.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаРазовыйОбъемПродаж_ВСтроке.Ссылка КАК Ссылка,
	|	ЗаРазовыйОбъемПродаж_ВСтроке.КлючСвязи КАК КлючСвязи,
	|	ЗаРазовыйОбъемПродаж_ВСтроке.КоличествоКомплектов КАК КоличествоКомплектов
	|ПОМЕСТИТЬ вт_ЗаРазовыйОбъемПродаж_ВСтроке
	|ИЗ
	|	вт_ЗаРазовыйОбъемПродаж_ВСтроке_ДоОтборов КАК ЗаРазовыйОбъемПродаж_ВСтроке
	|ГДЕ
	|	НЕ ЗаРазовыйОбъемПродаж_ВСтроке.ЕстьОтборПоНоменклатуре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаРазовыйОбъемПродаж_ВСтроке.Ссылка,
	|	ЗаРазовыйОбъемПродаж_ВСтроке.КлючСвязи,
	|	ЗаРазовыйОбъемПродаж_ВСтроке.КоличествоКомплектов
	|ИЗ
	|	вт_ЗаРазовыйОбъемПродаж_ВСтроке_ДоОтборов КАК ЗаРазовыйОбъемПродаж_ВСтроке
	|ГДЕ
	|	ЗаРазовыйОбъемПродаж_ВСтроке.ЕстьОтборПоНоменклатуре
	|	И (ЗаРазовыйОбъемПродаж_ВСтроке.ПройденОтборПоНоменклатуре
	|			ИЛИ ЗаРазовыйОбъемПродаж_ВСтроке.ПройденОтборПоГруппеНоменклатуры
	|			ИЛИ ЗаРазовыйОбъемПродаж_ВСтроке.ПройденОтборПоНоменклатуреСХарактеристиками
	|			ИЛИ ЗаРазовыйОбъемПродаж_ВСтроке.ПройденОтборПоСегментуНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.ТипСравнения КАК ТипСравнения,
	|	УсловияПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	СУММА(Товары.Количество) КАК Количество,
	|	СУММА(Товары.КоличествоВБазовыхЕдиницах) КАК КоличествоВБазовыхЕдиницах,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	УсловияПредоставления.ЕстьОтборПоНоменклатуре КАК ЕстьОтборПоНоменклатуре,
	|	НЕ ОтборТоваровПоГруппеНоменклатуры.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоГруппеНоменклатуры,
	|	НЕ ОтборТоваровПоНоменклатуре.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоНоменклатуре,
	|	НЕ ОтборТоваровПоНоменклатуреСХарактеристиками.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоНоменклатуреСХарактеристиками,
	|	НЕ ОтборТоваровПоСегментуНоменклатуры.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоСегментуНоменклатуры
	|ПОМЕСТИТЬ вт_ЗаРазовыйОбъемПродаж_ВДокументе_ИтогиПоДокументу
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК Товары
	|		ПО (УсловияПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж))
	|			И (УсловияПредоставления.ОбластьОграничения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборТоваровПоГруппеНоменклатуры КАК ОтборТоваровПоГруппеНоменклатуры
	|		ПО (Товары.Номенклатура = ОтборТоваровПоГруппеНоменклатуры.Номенклатура)
	|			И УсловияПредоставления.Ссылка = ОтборТоваровПоГруппеНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборТоваровПоНоменклатуре КАК ОтборТоваровПоНоменклатуре
	|		ПО (Товары.Номенклатура = ОтборТоваровПоНоменклатуре.Номенклатура)
	|			И УсловияПредоставления.Ссылка = ОтборТоваровПоНоменклатуре.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборТоваровПоНоменклатуреСХарактеристиками КАК ОтборТоваровПоНоменклатуреСХарактеристиками
	|		ПО (Товары.Номенклатура = ОтборТоваровПоНоменклатуреСХарактеристиками.Номенклатура)
	|			И (Товары.Характеристика = ОтборТоваровПоНоменклатуреСХарактеристиками.Характеристика)
	|			И УсловияПредоставления.Ссылка = ОтборТоваровПоНоменклатуреСХарактеристиками.ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборТоваровПоСегментуНоменклатуры КАК ОтборТоваровПоСегментуНоменклатуры
	|		ПО (Товары.Номенклатура = ОтборТоваровПоСегментуНоменклатуры.Номенклатура)
	|			И (Товары.Характеристика = ОтборТоваровПоСегментуНоменклатуры.Характеристика)
	|			И УсловияПредоставления.Ссылка = ОтборТоваровПоСегментуНоменклатуры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.Ссылка,
	|	УсловияПредоставления.ЗначениеУсловияОграничения,
	|	УсловияПредоставления.ТипСравнения,
	|	УсловияПредоставления.ЕстьОтборПоНоменклатуре,
	|	НЕ ОтборТоваровПоГруппеНоменклатуры.Номенклатура ЕСТЬ NULL,
	|	НЕ ОтборТоваровПоНоменклатуре.Номенклатура ЕСТЬ NULL,
	|	НЕ ОтборТоваровПоНоменклатуреСХарактеристиками.Номенклатура ЕСТЬ NULL,
	|	НЕ ОтборТоваровПоСегментуНоменклатуры.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаРазовыйОбъемПродаж_ВДокументе.Ссылка КАК Ссылка,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения КАК ТипСравнения,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.Количество КАК Количество,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.КоличествоВБазовыхЕдиницах КАК КоличествоВБазовыхЕдиницах,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.Сумма КАК Сумма
	|ПОМЕСТИТЬ вт_ЗаРазовыйОбъемПродаж_ВДокументе_ДоРасчета
	|ИЗ
	|	вт_ЗаРазовыйОбъемПродаж_ВДокументе_ИтогиПоДокументу КАК ЗаРазовыйОбъемПродаж_ВДокументе
	|ГДЕ
	|	НЕ ЗаРазовыйОбъемПродаж_ВДокументе.ЕстьОтборПоНоменклатуре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаРазовыйОбъемПродаж_ВДокументе.Ссылка,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.КритерийОграниченияПримененияЗаОбъемПродаж,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.Количество,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.КоличествоВБазовыхЕдиницах,
	|	ЗаРазовыйОбъемПродаж_ВДокументе.Сумма
	|ИЗ
	|	вт_ЗаРазовыйОбъемПродаж_ВДокументе_ИтогиПоДокументу КАК ЗаРазовыйОбъемПродаж_ВДокументе
	|ГДЕ
	|	ЗаРазовыйОбъемПродаж_ВДокументе.ЕстьОтборПоНоменклатуре
	|	И (ЗаРазовыйОбъемПродаж_ВДокументе.ПройденОтборПоГруппеНоменклатуры
	|			ИЛИ ЗаРазовыйОбъемПродаж_ВДокументе.ПройденОтборПоНоменклатуре
	|			ИЛИ ЗаРазовыйОбъемПродаж_ВДокументе.ПройденОтборПоНоменклатуреСХарактеристиками
	|			ИЛИ ЗаРазовыйОбъемПродаж_ВДокументе.ПройденОтборПоСегментуНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаРазовыйОбъемПродаж_ВДокументе.Ссылка КАК Ссылка,
	|	-1 КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения = 0
	|			ТОГДА 0
	|		КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|						ТОГДА ВЫРАЗИТЬ(ЗаРазовыйОбъемПродаж_ВДокументе.Сумма / ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения - 0.5 КАК ЧИСЛО(7, 0))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|						ТОГДА ВЫРАЗИТЬ(ЗаРазовыйОбъемПродаж_ВДокументе.КоличествоВБазовыхЕдиницах / ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения - 0.5 КАК ЧИСЛО(7, 0))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоКомплектов
	|ПОМЕСТИТЬ вт_ЗаРазовыйОбъемПродаж_ВДокументе
	|ИЗ
	|	вт_ЗаРазовыйОбъемПродаж_ВДокументе_ДоРасчета КАК ЗаРазовыйОбъемПродаж_ВДокументе
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА ЗаРазовыйОбъемПродаж_ВДокументе.Сумма >= ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения
	|						КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА ЗаРазовыйОбъемПродаж_ВДокументе.Сумма > ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения
	|						КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА ЗаРазовыйОбъемПродаж_ВДокументе.Сумма <= ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения
	|						ИНАЧЕ ЗаРазовыйОбъемПродаж_ВДокументе.Сумма < ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|				ТОГДА ВЫБОР
	|						КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА ЗаРазовыйОбъемПродаж_ВДокументе.КоличествоВБазовыхЕдиницах >= ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения
	|						КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА ЗаРазовыйОбъемПродаж_ВДокументе.КоличествоВБазовыхЕдиницах > ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения
	|						КОГДА ЗаРазовыйОбъемПродаж_ВДокументе.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА ЗаРазовыйОбъемПродаж_ВДокументе.КоличествоВБазовыхЕдиницах <= ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения
	|						ИНАЧЕ ЗаРазовыйОбъемПродаж_ВДокументе.КоличествоВБазовыхЕдиницах < ЗаРазовыйОбъемПродаж_ВДокументе.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.ВесьПериод) КАК ВидПериода,
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.ПустаяСсылка) КАК Периодичность,
	|	НЕОПРЕДЕЛЕНО КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, СЕКУНДА, -1) КАК ДатаОкончания
	|ПОМЕСТИТЬ вт_ОбщиеИнтервалы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.Текущий),
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.Год),
	|	НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД),
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, СЕКУНДА, -1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.Текущий),
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.Квартал),
	|	НАЧАЛОПЕРИОДА(&ТекущаяДата, КВАРТАЛ),
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, СЕКУНДА, -1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.Текущий),
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.Месяц),
	|	НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, СЕКУНДА, -1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.Прошлый),
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.Год),
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1), ГОД),
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1), ГОД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.Прошлый),
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.Квартал),
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, КВАРТАЛ, -1), КВАРТАЛ),
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, КВАРТАЛ, -1), КВАРТАЛ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.Прошлый),
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.Месяц),
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ),
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.Последний),
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.Год),
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1), ДЕНЬ),
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, СЕКУНДА, -1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.Последний),
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.Квартал),
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, КВАРТАЛ, -1), ДЕНЬ),
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, СЕКУНДА, -1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПериодовДляНакопительныхСкидок.Последний),
	|	ЗНАЧЕНИЕ(перечисление.Периодичность.Месяц),
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), ДЕНЬ),
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, СЕКУНДА, -1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	УсловияПредоставления.Ссылка.ВключатьТекущуюПродажуВНакопленныйОбъемПродаж КАК ВключатьТекущуюПродажу,
	|	Интервалы.ДатаНачала КАК ДатаНачала,
	|	Интервалы.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ вт_ИнтервалыУсловий
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ОбщиеИнтервалы КАК Интервалы
	|		ПО УсловияПредоставления.Ссылка.ВидПериода = Интервалы.ВидПериода
	|			И УсловияПредоставления.Ссылка.Периодичность = Интервалы.Периодичность
	|ГДЕ
	|	УсловияПредоставления.Ссылка.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|	И НЕ УсловияПредоставления.Ссылка.ВидПериода = ЗНАЧЕНИЕ(перечисление.ВидыПериодовДляНакопительныхСкидок.ВесьПериод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияПредоставления.Ссылка,
	|	УсловияПредоставления.Ссылка.ВключатьТекущуюПродажуВНакопленныйОбъемПродаж,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ОбщиеИнтервалы КАК Интервалы
	|		ПО УсловияПредоставления.Ссылка.ВидПериода = Интервалы.ВидПериода
	|ГДЕ
	|	УсловияПредоставления.Ссылка.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|	И УсловияПредоставления.Ссылка.ВидПериода = ЗНАЧЕНИЕ(перечисление.ВидыПериодовДляНакопительныхСкидок.ВесьПериод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнтервалыУсловий.Ссылка КАК Условие,
	|	ПродажиПоДисконтнымКартам.Номенклатура КАК Номенклатура,
	|	ПродажиПоДисконтнымКартам.Характеристика КАК Характеристика,
	|	СУММА(ПродажиПоДисконтнымКартам.Количество) КАК Количество,
	|	СУММА(ПродажиПоДисконтнымКартам.Количество) КАК КоличествоВБазовыхЕдиницах,
	|	СУММА(ПродажиПоДисконтнымКартам.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ПродажиПоДисконтнойКарте
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ИнтервалыУсловий КАК ИнтервалыУсловий
	|		ПО (ИнтервалыУсловий.ДатаНачала <= ПродажиПоДисконтнымКартам.Период)
	|			И (ИнтервалыУсловий.ДатаОкончания >= ПродажиПоДисконтнымКартам.Период)
	|ГДЕ
	|	ПродажиПоДисконтнымКартам.ДисконтнаяКарта В(&ДисконтнаяКарта)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнтервалыУсловий.Ссылка,
	|	ПродажиПоДисконтнымКартам.Номенклатура,
	|	ПродажиПоДисконтнымКартам.Характеристика
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловиеПоНоменклатуре.Ссылка КАК Ссылка,
	|	ПродажиПоДисконтнойКарте.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ОтборНакопленныхПродажПоГруппеНоменклатуры
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловиеПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПродажиПоДисконтнойКарте КАК ПродажиПоДисконтнойКарте
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО (ПродажиПоДисконтнойКарте.Номенклатура = спрНоменклатура.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ГруппыСИерархией КАК ТаблицаИерархии
	|		ПО УсловиеПоНоменклатуре.Номенклатура = ТаблицаИерархии.Группа
	|			И (спрНоменклатура.Родитель В (&ПереченьРодителей))
	|ГДЕ
	|	УсловиеПоНоменклатуре.Ссылка В
	|			(ВЫБРАТЬ
	|				УсловияПредоставления.Ссылка
	|			ИЗ
	|				УсловияПредоставления КАК УсловияПредоставления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоСегменту.Ссылка КАК Ссылка,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоСегменту.СегментНоменклатуры КАК СегментНоменклатуры
	|ПОМЕСТИТЬ ОтборСегментовНоменклатуры
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоСегменту КАК УсловияПредоставленияСкидокНаценокОтборПродажПоСегменту
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК СписокУсловий
	|		ПО (СписокУсловий.Ссылка = УсловияПредоставленияСкидокНаценокОтборПродажПоСегменту.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборСегментовНоменклатуры.Ссылка КАК Ссылка,
	|	СоставСегментаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СоставСегментаНоменклатуры.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОтборНакопленныхПродажПоСегментуНоменклатуры
	|ИЗ
	|	РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборСегментовНоменклатуры КАК ОтборСегментовНоменклатуры
	|		ПО (ОтборСегментовНоменклатуры.СегментНоменклатуры = СоставСегментаНоменклатуры.Сегмент)
	|ГДЕ
	|	(СоставСегментаНоменклатуры.Номенклатура, СоставСегментаНоменклатуры.Характеристика) В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура,
	|				Товары.Характеристика
	|			ИЗ
	|				ПродажиПоДисконтнойКарте КАК Товары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборСегментовНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка КАК Ссылка,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ОтборНакопленныхПродажПоНоменклатуре
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК СписокУсловий
	|		ПО (СписокУсловий.Ссылка = УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка)
	|ГДЕ
	|	НЕ УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура
	|			ИЗ
	|				ПродажиПоДисконтнойКарте КАК Товары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокУсловий.Ссылка КАК ссылка,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура КАК Номенклатура,
	|	УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ОтборПродажПоНоменклатуре КАК УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК СписокУсловий
	|		ПО (СписокУсловий.Ссылка = УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Ссылка)
	|ГДЕ
	|	НЕ УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура.ЭтоГруппа
	|	И УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И (УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Номенклатура, УсловияПредоставленияСкидокНаценокОтборПродажПоНоменклатуре.Характеристика) В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура,
	|				Товары.Характеристика
	|			ИЗ
	|				ПродажиПоДисконтнойКарте КАК Товары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиСУчетомТекущей.Условие КАК Условие,
	|	ПродажиСУчетомТекущей.Номенклатура КАК Номенклатура,
	|	ПродажиСУчетомТекущей.Характеристика КАК Характеристика,
	|	ПродажиСУчетомТекущей.ПройденОтборПоГруппеНоменклатуры КАК ПройденОтборПоГруппеНоменклатуры,
	|	ПродажиСУчетомТекущей.ПройденОтборПоНоменклатуре КАК ПройденОтборПоНоменклатуре,
	|	ПродажиСУчетомТекущей.ПройденОтборПоНоменклатуреСХарактеристиками КАК ПройденОтборПоНоменклатуреСХарактеристиками,
	|	ПродажиСУчетомТекущей.ПройденОтборПоСегментуНоменклатуры КАК ПройденОтборПоСегментуНоменклатуры,
	|	СУММА(ПродажиСУчетомТекущей.Количество) КАК Количество,
	|	СУММА(ПродажиСУчетомТекущей.КоличествоВБазовыхЕдиницах) КАК КоличествоВБазовыхЕдиницах,
	|	СУММА(ПродажиСУчетомТекущей.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПродажиПоДисконтнымКартам.Условие КАК Условие,
	|		ПродажиПоДисконтнымКартам.Номенклатура КАК Номенклатура,
	|		ПродажиПоДисконтнымКартам.Характеристика КАК Характеристика,
	|		ПродажиПоДисконтнымКартам.Количество КАК Количество,
	|		ПродажиПоДисконтнымКартам.Количество КАК КоличествоВБазовыхЕдиницах,
	|		ПродажиПоДисконтнымКартам.Сумма КАК Сумма,
	|		НЕ ОтборНакопленныхПродажПоГруппеНоменклатуры.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоГруппеНоменклатуры,
	|		НЕ ОтборНакопленныхПродажПоНоменклатуре.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоНоменклатуре,
	|		НЕ ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоНоменклатуреСХарактеристиками,
	|		НЕ ОтборНакопленныхПродажПоСегментуНоменклатуры.Номенклатура ЕСТЬ NULL КАК ПройденОтборПоСегментуНоменклатуры
	|	ИЗ
	|		ПродажиПоДисконтнойКарте КАК ПродажиПоДисконтнымКартам
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОтборНакопленныхПродажПоГруппеНоменклатуры КАК ОтборНакопленныхПродажПоГруппеНоменклатуры
	|			ПО ПродажиПоДисконтнымКартам.Номенклатура = ОтборНакопленныхПродажПоГруппеНоменклатуры.Номенклатура
	|				И ПродажиПоДисконтнымКартам.Условие = ОтборНакопленныхПродажПоГруппеНоменклатуры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОтборНакопленныхПродажПоНоменклатуре КАК ОтборНакопленныхПродажПоНоменклатуре
	|			ПО ПродажиПоДисконтнымКартам.Номенклатура = ОтборНакопленныхПродажПоНоменклатуре.Номенклатура
	|				И ПродажиПоДисконтнымКартам.Условие = ОтборНакопленныхПродажПоНоменклатуре.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками КАК ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками
	|			ПО ПродажиПоДисконтнымКартам.Номенклатура = ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками.Номенклатура
	|				И ПродажиПоДисконтнымКартам.Характеристика = ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками.Характеристика
	|				И ПродажиПоДисконтнымКартам.Условие = ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками.ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОтборНакопленныхПродажПоСегментуНоменклатуры КАК ОтборНакопленныхПродажПоСегментуНоменклатуры
	|			ПО ПродажиПоДисконтнымКартам.Номенклатура = ОтборНакопленныхПродажПоСегментуНоменклатуры.Номенклатура
	|				И ПродажиПоДисконтнымКартам.Характеристика = ОтборНакопленныхПродажПоСегментуНоменклатуры.Характеристика
	|				И ПродажиПоДисконтнымКартам.Условие = ОтборНакопленныхПродажПоСегментуНоменклатуры.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИнтервалыУсловий.Ссылка,
	|		Товары.Номенклатура,
	|		Товары.Характеристика,
	|		Товары.Количество,
	|		Товары.КоличествоВБазовыхЕдиницах,
	|		Товары.Сумма,
	|		НЕ ОтборНакопленныхПродажПоГруппеНоменклатуры.Номенклатура ЕСТЬ NULL,
	|		НЕ ОтборНакопленныхПродажПоНоменклатуре.Номенклатура ЕСТЬ NULL,
	|		НЕ ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками.Номенклатура ЕСТЬ NULL,
	|		НЕ ОтборНакопленныхПродажПоСегментуНоменклатуры.Номенклатура ЕСТЬ NULL
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДисконтныеКарты КАК ДисконтнаяКарта
	|			ПО (ДисконтнаяКарта.Ссылка = &ДисконтнаяКарта)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ИнтервалыУсловий КАК ИнтервалыУсловий
	|			ПО (ИнтервалыУсловий.ВключатьТекущуюПродажу = ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОтборНакопленныхПродажПоГруппеНоменклатуры КАК ОтборНакопленныхПродажПоГруппеНоменклатуры
	|			ПО Товары.Номенклатура = ОтборНакопленныхПродажПоГруппеНоменклатуры.Номенклатура
	|				И (ИнтервалыУсловий.Ссылка = ОтборНакопленныхПродажПоГруппеНоменклатуры.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОтборНакопленныхПродажПоНоменклатуре КАК ОтборНакопленныхПродажПоНоменклатуре
	|			ПО Товары.Номенклатура = ОтборНакопленныхПродажПоНоменклатуре.Номенклатура
	|				И (ИнтервалыУсловий.Ссылка = ОтборНакопленныхПродажПоНоменклатуре.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками КАК ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками
	|			ПО Товары.Номенклатура = ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками.Номенклатура
	|				И Товары.Характеристика = ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками.Характеристика
	|				И (ИнтервалыУсловий.Ссылка = ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками.ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОтборНакопленныхПродажПоСегментуНоменклатуры КАК ОтборНакопленныхПродажПоСегментуНоменклатуры
	|			ПО Товары.Номенклатура = ОтборНакопленныхПродажПоСегментуНоменклатуры.Номенклатура
	|				И Товары.Характеристика = ОтборНакопленныхПродажПоСегментуНоменклатуры.Характеристика
	|				И (ИнтервалыУсловий.Ссылка = ОтборНакопленныхПродажПоСегментуНоменклатуры.Ссылка)) КАК ПродажиСУчетомТекущей
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиСУчетомТекущей.Условие,
	|	ПродажиСУчетомТекущей.Номенклатура,
	|	ПродажиСУчетомТекущей.Характеристика,
	|	ПродажиСУчетомТекущей.ПройденОтборПоГруппеНоменклатуры,
	|	ПродажиСУчетомТекущей.ПройденОтборПоНоменклатуре,
	|	ПродажиСУчетомТекущей.ПройденОтборПоНоменклатуреСХарактеристиками,
	|	ПродажиСУчетомТекущей.ПройденОтборПоСегментуНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.ТипСравнения КАК ТипСравнения,
	|	УсловияПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	ЕСТЬNULL(СУММА(ИсходныеДанные.Количество), 0) КАК Количество,
	|	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоВБазовыхЕдиницах), 0) КАК КоличествоВБазовыхЕдиницах,
	|	ЕСТЬNULL(СУММА(ИсходныеДанные.Сумма), 0) КАК Сумма
	|ПОМЕСТИТЬ ИтогиПоПериоду
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсходныеДанные КАК ИсходныеДанные
	|		ПО УсловияПредоставления.Ссылка = ИсходныеДанные.Условие
	|ГДЕ
	|	НЕ УсловияПредоставления.ЕстьОтборПоНоменклатуре
	|	И УсловияПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.Ссылка,
	|	УсловияПредоставления.ЗначениеУсловияОграничения,
	|	УсловияПредоставления.ТипСравнения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияПредоставления.Ссылка,
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.ТипСравнения,
	|	УсловияПредоставления.ЗначениеУсловияОграничения,
	|	ЕСТЬNULL(СУММА(ИсходныеДанные.Количество), 0),
	|	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоВБазовыхЕдиницах), 0),
	|	ЕСТЬNULL(СУММА(ИсходныеДанные.Сумма), 0)
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсходныеДанные КАК ИсходныеДанные
	|		ПО УсловияПредоставления.Ссылка = ИсходныеДанные.Условие
	|			И (ИсходныеДанные.ПройденОтборПоГруппеНоменклатуры
	|				ИЛИ ИсходныеДанные.ПройденОтборПоНоменклатуре
	|				ИЛИ ИсходныеДанные.ПройденОтборПоНоменклатуреСХарактеристиками
	|				ИЛИ ИсходныеДанные.ПройденОтборПоСегментуНоменклатуры)
	|ГДЕ
	|	УсловияПредоставления.ЕстьОтборПоНоменклатуре
	|	И УсловияПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.Ссылка,
	|	УсловияПредоставления.ЗначениеУсловияОграничения,
	|	УсловияПредоставления.ТипСравнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИтогиПоПериоду.Ссылка КАК Ссылка,
	|	-1 КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА ИтогиПоПериоду.ЗначениеУсловияОграничения = 0
	|			ТОГДА 0
	|		КОГДА ИтогиПоПериоду.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР
	|					КОГДА ИтогиПоПериоду.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|						ТОГДА ВЫРАЗИТЬ(ИтогиПоПериоду.Сумма / ИтогиПоПериоду.ЗначениеУсловияОграничения - 0.5 КАК ЧИСЛО(7, 0))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ИтогиПоПериоду.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА ВЫБОР
	|					КОГДА ИтогиПоПериоду.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|						ТОГДА ВЫРАЗИТЬ(ИтогиПоПериоду.КоличествоВБазовыхЕдиницах / ИтогиПоПериоду.ЗначениеУсловияОграничения - 0.5 КАК ЧИСЛО(7, 0))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоКомплектов
	|ПОМЕСТИТЬ вт_ЗаНакопленныйОбъемПродаж
	|ИЗ
	|	ИтогиПоПериоду КАК ИтогиПоПериоду
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ИтогиПоПериоду.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|				ТОГДА ВЫБОР
	|						КОГДА ИтогиПоПериоду.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА ИтогиПоПериоду.Сумма >= ИтогиПоПериоду.ЗначениеУсловияОграничения
	|						КОГДА ИтогиПоПериоду.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА ИтогиПоПериоду.Сумма > ИтогиПоПериоду.ЗначениеУсловияОграничения
	|						КОГДА ИтогиПоПериоду.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА ИтогиПоПериоду.Сумма <= ИтогиПоПериоду.ЗначениеУсловияОграничения
	|						ИНАЧЕ ИтогиПоПериоду.Сумма < ИтогиПоПериоду.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			КОГДА ИтогиПоПериоду.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|				ТОГДА ВЫБОР
	|						КОГДА ИтогиПоПериоду.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.БольшеИлиРавно)
	|							ТОГДА ИтогиПоПериоду.КоличествоВБазовыхЕдиницах >= ИтогиПоПериоду.ЗначениеУсловияОграничения
	|						КОГДА ИтогиПоПериоду.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.Больше)
	|							ТОГДА ИтогиПоПериоду.КоличествоВБазовыхЕдиницах > ИтогиПоПериоду.ЗначениеУсловияОграничения
	|						КОГДА ИтогиПоПериоду.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.МеньшеИлиРавно)
	|							ТОГДА ИтогиПоПериоду.КоличествоВБазовыхЕдиницах <= ИтогиПоПериоду.ЗначениеУсловияОграничения
	|						ИНАЧЕ ИтогиПоПериоду.КоличествоВБазовыхЕдиницах < ИтогиПоПериоду.ЗначениеУсловияОграничения
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыКоличество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Ссылка КАК Ссылка,
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Номенклатура КАК Номенклатура,
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Характеристика КАК Характеристика,
	|	СУММА(УсловияПредоставленияСкидокНаценокКомплектПокупки.Количество) КАК Количество
	|ПОМЕСТИТЬ КомплектПокупки
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.КомплектПокупки КАК УсловияПредоставленияСкидокНаценокКомплектПокупки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК УсловияПредоставления
	|		ПО (УсловияПредоставления.Ссылка = УсловияПредоставленияСкидокНаценокКомплектПокупки.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Ссылка,
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Номенклатура,
	|	УсловияПредоставленияСкидокНаценокКомплектПокупки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектПокупки.Ссылка КАК Ссылка,
	|	КомплектПокупки.Номенклатура КАК Номенклатура,
	|	КомплектПокупки.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыКоличество.Количество, 0) = 0
	|				ИЛИ ЕСТЬNULL(КомплектПокупки.Количество, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))) = (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 3)))
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))
	|				ИНАЧЕ ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))) * КомплектПокупки.Количество - ТоварыКоличество.Количество >= 0
	|							ТОГДА (ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))) - 1
	|						ИНАЧЕ ВЫРАЗИТЬ(ТоварыКоличество.Количество / КомплектПокупки.Количество КАК ЧИСЛО(15, 0))
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоКомплектов
	|ПОМЕСТИТЬ ТаблицаКомплектов
	|ИЗ
	|	КомплектПокупки КАК КомплектПокупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКоличество КАК ТоварыКоличество
	|		ПО КомплектПокупки.Номенклатура = ТоварыКоличество.Номенклатура
	|			И КомплектПокупки.Характеристика = ТоварыКоличество.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКомплектов.Ссылка КАК Ссылка,
	|	-1 КАК КлючСвязи,
	|	МИНИМУМ(ТаблицаКомплектов.КоличествоКомплектов) КАК КоличествоКомплектов
	|ПОМЕСТИТЬ вт_ЗаКомплектПокупки
	|ИЗ
	|	ТаблицаКомплектов КАК ТаблицаКомплектов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКомплектов.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ТаблицаКомплектов.КоличествоКомплектов) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1 КАК КлючСвязи,
	|	1 КАК КоличествоКомплектов
	|ПОМЕСТИТЬ вт_ЗаДисконтнуюКарту
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДисконтныеКарты КАК ДисконтнаяКарта
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВидДисконтнойКарты
	|			ПО ДисконтнаяКарта.Владелец = ВидДисконтнойКарты.Ссылка
	|				И (НЕ ВидДисконтнойКарты.СтарыйМеханизмСкидок)
	|		ПО (ДисконтнаяКарта.Ссылка = &ДисконтнаяКарта)
	|			И (УсловияПредоставления.ВидДисконтнойКарты В (ЗНАЧЕНИЕ(Справочник.ВидыДисконтныхКарт.ПустаяСсылка), &ВидДисконтнойКарты))
	|ГДЕ
	|	УсловияПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1 КАК КлючСвязи,
	|	1 КАК КоличествоКомплектов
	|ПОМЕСТИТЬ вт_ЗаДеньРождения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|ГДЕ
	|	УсловияПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДеньРождения)
	|	И &ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(&ДатаРождения, &ТекущаяДата, ДЕНЬ) = 0
	|				ТОГДА ИСТИНА
	|			КОГДА РАЗНОСТЬДАТ(&ДатаРождения, &ТекущаяДата, ДЕНЬ) МЕЖДУ -УсловияПредоставления.ДнейПередДнемРождения И УсловияПредоставления.ДнейПослеДняРождения
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступностьПромокодов.Промокод КАК Промокод,
	|	ДоступностьПромокодов.ДоступноОстаток КАК Доступно
	|ПОМЕСТИТЬ втДоступностьПромокодов
	|ИЗ
	|	РегистрНакопления.ДоступностьПромокодов.Остатки(
	|			&ГраницаДокумента,
	|			Промокод В
	|				(ВЫБРАТЬ
	|					вт.Промокод
	|				ИЗ
	|					вт_ПримененныеПромокоды КАК вт)) КАК ДоступностьПромокодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ПримененныеПромокоды.Промокод КАК Промокод,
	|	СостояниеПромокода.УсловиеПредоставленияСкидки КАК УсловиеПредоставленияСкидки
	|ПОМЕСТИТЬ вт_СкидкиПромокодом
	|ИЗ
	|	вт_ПримененныеПромокоды КАК вт_ПримененныеПромокоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Промокоды КАК СостояниеПромокода
	|		ПО (СостояниеПромокода.Промокод = вт_ПримененныеПромокоды.Промокод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоступностьПромокодов КАК ДоступностьПромокодов
	|		ПО (СостояниеПромокода.Промокод = ДоступностьПромокодов.Промокод)
	|			И (СостояниеПромокода.Конечный)
	|ГДЕ
	|	(СостояниеПромокода.ДействуетДо >= &ТекущаяДата
	|			ИЛИ СостояниеПромокода.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	|	И ЕСТЬNULL(ДоступностьПромокодов.Доступно, 0) > 0
	|	И СостояниеПромокода.Конечный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ПримененныеПромокоды.Промокод,
	|	СостояниеПромокода.УсловиеПредоставленияСкидки
	|ИЗ
	|	вт_ПримененныеПромокоды КАК вт_ПримененныеПромокоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Промокоды КАК СостояниеПромокода
	|		ПО (СостояниеПромокода.Промокод = вт_ПримененныеПромокоды.Промокод)
	|ГДЕ
	|	(СостояниеПромокода.ДействуетДо >= &ТекущаяДата
	|			ИЛИ СостояниеПромокода.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	|	И НЕ СостояниеПромокода.Конечный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1 КАК КлючСвязи,
	|	1 КАК КоличествоКомплектов
	|ПОМЕСТИТЬ вт_ЗаПромокод
	|ИЗ
	|	вт_СкидкиПромокодом КАК вт_СкидкиПромокодом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК УсловияПредоставления
	|		ПО вт_СкидкиПромокодом.УсловиеПредоставленияСкидки = УсловияПредоставления.Ссылка
	|ГДЕ
	|	УсловияПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ПримененныеПромокоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_СкидкиПромокодом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеУсловияПредоставления.Ссылка КАК Ссылка,
	|	ВыбранныеУправляемыеСкидки.КлючСвязи КАК КлючСвязи,
	|	1 КАК КоличествоКомплектов
	|ПОМЕСТИТЬ вт_ЗаАктивациюВручную
	|ИЗ
	|	УсловияПредоставления КАК ПроверяемыеУсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК УсловияВыбранныхСкидок
	|		ПО ПроверяемыеУсловияПредоставления.Ссылка = УсловияВыбранныхСкидок.УсловиеПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВыбранныеУправляемыеСкидки КАК ВыбранныеУправляемыеСкидки
	|		ПО (УсловияВыбранныхСкидок.Ссылка = ВыбранныеУправляемыеСкидки.СкидкаНаценка)
	|ГДЕ
	|	ПроверяемыеУсловияПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаАктивациюВручную)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ЗаРазовыйОбъемПродаж_ВДокументе.Ссылка КАК Ссылка,
	|	вт_ЗаРазовыйОбъемПродаж_ВДокументе.КлючСвязи КАК КлючСвязи,
	|	вт_ЗаРазовыйОбъемПродаж_ВДокументе.КоличествоКомплектов КАК КоличествоКомплектов
	|ПОМЕСТИТЬ вт_Результат
	|ИЗ
	|	вт_ЗаРазовыйОбъемПродаж_ВДокументе КАК вт_ЗаРазовыйОбъемПродаж_ВДокументе
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ЗаРазовыйОбъемПродаж_ВСтроке.Ссылка,
	|	вт_ЗаРазовыйОбъемПродаж_ВСтроке.КлючСвязи,
	|	вт_ЗаРазовыйОбъемПродаж_ВСтроке.КоличествоКомплектов
	|ИЗ
	|	вт_ЗаРазовыйОбъемПродаж_ВСтроке КАК вт_ЗаРазовыйОбъемПродаж_ВСтроке
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ЗаНакопленныйОбъемПродаж.Ссылка,
	|	вт_ЗаНакопленныйОбъемПродаж.КлючСвязи,
	|	вт_ЗаНакопленныйОбъемПродаж.КоличествоКомплектов
	|ИЗ
	|	вт_ЗаНакопленныйОбъемПродаж КАК вт_ЗаНакопленныйОбъемПродаж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ЗаКомплектПокупки.Ссылка,
	|	вт_ЗаКомплектПокупки.КлючСвязи,
	|	вт_ЗаКомплектПокупки.КоличествоКомплектов
	|ИЗ
	|	вт_ЗаКомплектПокупки КАК вт_ЗаКомплектПокупки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ЗаДисконтнуюКарту.Ссылка,
	|	вт_ЗаДисконтнуюКарту.КлючСвязи,
	|	вт_ЗаДисконтнуюКарту.КоличествоКомплектов
	|ИЗ
	|	вт_ЗаДисконтнуюКарту КАК вт_ЗаДисконтнуюКарту
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ЗаДеньРождения.Ссылка,
	|	вт_ЗаДеньРождения.КлючСвязи,
	|	вт_ЗаДеньРождения.КоличествоКомплектов
	|ИЗ
	|	вт_ЗаДеньРождения КАК вт_ЗаДеньРождения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ЗаПромокод.Ссылка,
	|	вт_ЗаПромокод.КлючСвязи,
	|	вт_ЗаПромокод.КоличествоКомплектов
	|ИЗ
	|	вт_ЗаПромокод КАК вт_ЗаПромокод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивацияВручную.Ссылка,
	|	АктивацияВручную.КлючСвязи,
	|	АктивацияВручную.КоличествоКомплектов
	|ИЗ
	|	вт_ЗаАктивациюВручную КАК АктивацияВручную
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Результат.Ссылка КАК Ссылка,
	|	вт_Результат.КлючСвязи КАК КлючСвязи,
	|	вт_Результат.КоличествоКомплектов КАК КоличествоКомплектов
	|ИЗ
	|	вт_Результат КАК вт_Результат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗаРазовыйОбъемПродаж_ВДокументе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗаРазовыйОбъемПродаж_ВСтроке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗаНакопленныйОбъемПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗаКомплектПокупки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗаДисконтнуюКарту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗаДеньРождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ЗаПромокод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ИнтервалыУсловий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборНакопленныхПродажПоГруппеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборНакопленныхПродажПоСегментуНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборНакопленныхПродажПоНоменклатуре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборНакопленныхПродажПоНоменклатуреСХарактеристиками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборТоваровПоГруппеНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборТоваровПоСегментуНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборТоваровПоНоменклатуре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборТоваровПоНоменклатуреСХарактеристиками";
	

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПереченьРодителей", РодителиВсехУровней);
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, "ВыполненныеУсловияСкидокНаценок");

КонецФункции

// Функция формирует текст запроса для таблицы произвольных условий скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаПроизвольныхУсловий()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПараметрыУсловий.Ссылка КАК Ссылка,
	|	ПараметрыУсловий.ИмяСхемыКомпоновкиДанных КАК ИмяСхемыКомпоновкиДанных,
	|	ПараметрыУсловий.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	ПараметрыУсловий.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
	|	ПараметрыУсловий.ХранилищеСкомпанованногоМакета КАК ХранилищеСкомпанованногоМакета
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловий
	|		ПО УсловияПредоставления.Ссылка = ПараметрыУсловий.Ссылка
	|ГДЕ
	|	УсловияПредоставления.УсловиеПредоставления В (ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос),
	|		ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.Расширение))";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "ПроизвольныеУсловия");
	
КонецФункции

#КонецОбласти

#Область ЧастиЗапросаПоУсловиямПредоставленияСкидок

// Функция формирует текст запроса для таблицы товаров по сегментам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаТовары() 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоВБазовыхЕдиницах КАК КоличествоВБазовыхЕдиницах,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Количество * Товары.Цена КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.КлючСвязи,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика,
	|	ВременнаяТаблицаТовары.ЕдиницаИзмерения,
	|	ВременнаяТаблицаТовары.Количество,
	|	ВременнаяТаблицаТовары.ЦенаЗаУпаковку,
	|	ВременнаяТаблицаТовары.СуммаСкидкиНаценки,
	|	ВременнаяТаблицаТовары.СуммаСкидкиОплатыБонусом,
	|	ВременнаяТаблицаТовары.Сумма,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВременнаяТаблицаТовары.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "Товары");
	
КонецФункции // ТекстЗапросаТаблицаТовары()

// Функция формирует текст запроса для таблицы выбранных управляемых скидок
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаУсловияВыбранныхУправляемыхСкидок() 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыбранныеУправляемыеСкидки.КлючСвязи КАК КлючСвязи,
	|	ВыбранныеУправляемыеСкидки.СкидкаНаценка КАК СкидкаНаценка
	|ПОМЕСТИТЬ ВременнаяТаблицаВыбранныеУправляемыеСкидки
	|ИЗ
	|	&ВыбранныеУправляемыеСкидки КАК ВыбранныеУправляемыеСкидки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныеУправляемыеСкидки.КлючСвязи КАК КлючСвязи,
	|	ВыбранныеУправляемыеСкидки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	ВременнаяТаблицаВыбранныеУправляемыеСкидки КАК ВыбранныеУправляемыеСкидки";
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "ВыбранныеУправляемыеСкидки");
	
КонецФункции // ТекстЗапросаТаблицаУсловияВыбранныхУправляемыхСкидок()

// Функция формирует текст запроса для таблицы примененных промокодов
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаПримененныхПромокодов() 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	тз.Промокод КАК Промокод,
	|	тз.УсловиеПредоставленияСкидки КАК УсловиеПредоставленияСкидки
	|ПОМЕСТИТЬ вт_ПримененныеПромокоды
	|ИЗ
	|	&ПромокодыСкидок КАК тз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПромокодыСкидок.Промокод КАК Промокод,
	|	ПромокодыСкидок.УсловиеПредоставленияСкидки КАК УсловиеПредоставленияСкидки
	|ИЗ
	|	вт_ПримененныеПромокоды КАК ПромокодыСкидок";
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "ПримененныеПромокоды");
	
КонецФункции // ТекстЗапросаТаблицаПримененныхПромокодов()

#КонецОбласти

#Область ФункцииПакетаЗапросов

// Функция создает пакет запросов.
//
// Возвращаемое значение:
//	Структура - пакет запросов.
//
Функция ПакетЗапросовСоздать()
	
	ПакетЗапросов = Новый Структура;
	ПакетЗапросов.Вставить("ОбщееКоличествоТаблиц", 0);
	ПакетЗапросов.Вставить("СтруктураИмяЗапросаИНомерТаблицыРезультата", Новый Структура);
	ПакетЗапросов.Вставить("Запрос", Новый Запрос);
	ПакетЗапросов.Вставить("Параметры", Новый Соответствие);
	ПакетЗапросов.Вставить("РезультатЗапроса", Неопределено);
	ПакетЗапросов.Вставить("МассивИменЗапросов", Новый Массив);
	
	Возврат ПакетЗапросов;
	
КонецФункции // ПакетЗапросовСоздать()

// ОбъединитьТаблицыДанныхПодчиненныхСтрок добавляет запрос в пакет запросов.
//
// Возвращаемое значение:
//	Нет
//
Процедура ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ПакетЗапросов, Добавлять = Ложь)
	
	// Проверка на дубли запросов.
	Если ПакетЗапросов.МассивИменЗапросов.Найти(ПараметрыЗапроса.ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов.ОбщееКоличествоТаблиц = ПакетЗапросов.ОбщееКоличествоТаблиц + ПараметрыЗапроса.КоличествоТаблиц;
	НомерТаблицы = ПакетЗапросов.ОбщееКоличествоТаблиц - ПараметрыЗапроса.КоличествоТаблиц + ПараметрыЗапроса.НомерТаблицыРезультата;
	ПакетЗапросов.Запрос.Текст = ПакетЗапросов.Запрос.Текст +
	"// Номер таблицы результата: "+НомерТаблицы + "
	|";
	ПакетЗапросов.Запрос.Текст = ПакетЗапросов.Запрос.Текст + ПараметрыЗапроса.ТекстЗапроса;
	
	Если Добавлять Тогда
		
		ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата.Вставить(ПараметрыЗапроса.ИмяТаблицы, НомерТаблицы);
		
	КонецЕсли;
	
	ПакетЗапросов.МассивИменЗапросов.Добавить(ПараметрыЗапроса.ИмяТаблицы);
	
КонецПроцедуры // ПакетЗапросовВставитьЗапросВПакет()

// Функция выполняет пакет запросов.
//
// Возвращаемое значение:
//	Булево - Истина, если запрос выполнен успешно.
//
Функция ПакетЗапросовВыполнить(ПакетЗапросов)
	
	Если ЗначениеЗаполнено(ПакетЗапросов.Запрос.Текст) Тогда
		ПакетЗапросов.РезультатЗапроса = ПакетЗапросов.Запрос.ВыполнитьПакет();
		Возврат Истина;               //ПакетЗапросов.РезультатЗапроса[3].Выгрузить()
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПакетЗапросовВыполнить()

// Функция получает результат запроса из пакета запросов по имени запроса.
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса входящего в пакет.
//
Функция ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы(ИмяЗапроса, ПакетЗапросов)
	
	Возврат ПакетЗапросов.РезультатЗапроса[ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата[ИмяЗапроса] - 1];
	
КонецФункции // ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы()

#КонецОбласти

#Область ФункцииРасчетаСкидокНаценокПоДеревуСкидокНаценок

Процедура ОбработатьДеревоСкидок(ДеревоСкидок)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ОбработатьДеревоСкидок(СтрокаДерева);
			
		Иначе
			
			КоличествоСтрок = СтрокаДерева.Строки.Количество();
			Если КоличествоСтрок > 1 Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка генерации дерева скидок'");
			КонецЕсли;
			Если КоличествоСтрок > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДерева.Строки[0]);
				//
				СтрокаДерева.Строки.Удалить(СтрокаДерева.Строки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция получает дерево применяемых скидок.
//
// Возвращаемое значение:
//	ДеревоЗначений - дерево применяемых скидок.
//
Функция ПолучитьДеревоСкидок(МассивСкидок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка                       КАК СкидкаНаценка,
	|	СкидкиНаценки.УдалитьРеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	СкидкиНаценки.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.ПорядокОкругления КАК ПорядокОкругления,
	|	СкидкиНаценки.ВариантОграниченияПоНоменклатуре КАК ВариантОграниченияПоНоменклатуре,
	|	СкидкиНаценки.ЕстьУточненияПоНоменклатуре КАК ЕстьУточненияПоНоменклатуре,
	|	СкидкиНаценки.ЕстьУточненияПоКатегориям КАК ЕстьУточненияПоКатегориям,
	|	СкидкиНаценки.ЕстьУточненияПоЦеновымГруппам КАК ЕстьУточненияПоЦеновымГруппам,
	|	СкидкиНаценки.ЕстьУточненияПоСегментамНоменклатуры КАК ЕстьУточненияПоСегментамНоменклатуры,
	|	СкидкиНаценки.ЕстьГруппыВУточненииПоНоменклатуре КАК ЕстьГруппыВУточненииПоНоменклатуре,
	|	СкидкиНаценки.ВидЦен КАК ВидЦен,
	|	СкидкиНаценки.ВалютаПредоставления КАК ВалютаПредоставления,
	
	// Необходимо для отображения иконок
	|	СкидкиНаценки.ПометкаУдаления              КАК ПометкаУдаления,
	|	СкидкиНаценки.СпособПредоставления         КАК СпособПредоставления,
	|	СкидкиНаценки.ОбластьПредоставления        КАК ОбластьПредоставления,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки        КАК ЗначениеСкидкиНаценки,
	|	
	|	СкидкиНаценки.ЭтоГруппа                    КАК ЭтоГруппа,
	|	СкидкиНаценки.ЭтоПравилоНачисленияБонусов  КАК ЭтоПравилоНачисленияБонусов,
	|	
	|	СкидкиНаценки.УсловияПредоставления.(
	|		УсловиеПредоставления                    КАК УсловиеПредоставления,
	|		УсловиеПредоставления.ОбластьОграничения КАК ОбластьОграничения
	|	) КАК УсловияПредоставления,
	|	СкидкиНаценки.НаборПодарков.(
	|		Номенклатура 		КАК Номенклатура,
	|		Характеристика 		КАК Характеристика,
	|		ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
	|		Количество 			КАК Количество
	|	) КАК Подарки
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивСкидок)
	|	И СкидкиНаценки.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиНаценки.УдалитьРеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	СкидкаНаценка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	Запрос.УстановитьПараметр("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
	
	ДеревоСкидок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ОбработатьДеревоСкидок(ДеревоСкидок);
	
	Возврат ДеревоСкидок;
	
КонецФункции // ПолучитьДеревоСкидок()

// Процедура выполняет расчет скидки по группе совместного применения.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры, ВерхнийУровень = Ложь, ИтоговаяТаблицаДанных = Неопределено, ТолькоБонусы = Ложь)
	
 	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева, ТолькоБонусы);
	
	Сложение = Ложь;
	Если ВерхнийУровень Тогда
		ВариантСовместногоПрименения = Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить();
	Иначе 
		// Такой вариант оставлен для случая, если при внедрении потребуется доработать механизм так, чтобы
		// вариант совместного применения можно было указывать в группах.
		ВариантСовместногоПрименения = СтрокаДерева.ВариантСовместногоПрименения;
	КонецЕсли;
	
	Если ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, СуммироватьБезусловно Убыв, РеквизитДопУпорядочивания");
	ИначеЕсли ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, СуммироватьБезусловно Убыв, Сумма Убыв, РеквизитДопУпорядочивания");
	ИначеЕсли ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, СуммироватьБезусловно Убыв, Сумма Возр, РеквизитДопУпорядочивания");
	ИначеЕсли ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение
		ИЛИ ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, СуммироватьБезусловно Убыв");
		Сложение = Истина;
	Иначе
		ТаблицаДанных.Сортировать("КлючСвязи, СуммироватьБезусловно Убыв");
		Сложение = Истина;
	КонецЕсли;

	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = -1;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Или СтрокаТаблицы.КлючСвязи = 0 Тогда // Ключ 0 - подарки, не участвуют в конкуренции строк
			
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.КлючСвязи = СтрокаТаблицы.КлючСвязи;
			НоваяСтрокаТЗ.Сумма = СтрокаТаблицы.Сумма;
			НоваяСтрокаТЗ.Действует = Истина;
			
			// Расшифровка скидки.
			НоваяСтрокаТЗ.Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;
			
			Если НЕ СтрокаТаблицы.СуммироватьБезусловно Тогда
				КлючСвязи = СтрокаТаблицы.КлючСвязи;
			КонецЕсли;
			
			НоваяСтрокаТЗ.ТаблицаПодарков = ПустаяТаблицаПодарков();
			НоваяСтрокаТЗ.ТаблицаСообщений = ПустаяТаблицаСообщений();
			
		Иначе
			
			Если Сложение ИЛИ СтрокаТаблицы.СуммироватьБезусловно Тогда
				НоваяСтрокаТЗ.Сумма = НоваяСтрокаТЗ.Сумма + СтрокаТаблицы.Сумма;
				Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		// Сообщения.
		Для Каждого СтрокаСообщение Из СтрокаТаблицы.ТаблицаСообщений Цикл
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.ТаблицаСообщений.Добавить(), СтрокаСообщение);
		КонецЦикла; 
		
		// Подарки.
		Для Каждого СтрокаПодарка Из СтрокаТаблицы.ТаблицаПодарков Цикл
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.ТаблицаПодарков.Добавить(), СтрокаПодарка);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВерхнийУровень Тогда
		ИтоговаяТаблицаДанных = ТЗ;
	Иначе
		СтрокаДерева.ТаблицаДанных = ТЗ;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПрименения()

// Процедура выполняет расчет скидки дерева скидок.
//
Процедура РассчитатьСкидку(СтрокаДерева, Параметры)
	
	Если НЕ СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСкидки = Параметры.СкидкиНаценки.Найти(СтрокаДерева.СкидкаНаценка, "СкидкаНаценка");
	
	Товары = СтрокаДерева.ТаблицаТоваров;
	
	СкидкиНаценкиПоЦеновымГруппам = Параметры.СкидкиНаценкиПоЦеновымГруппам.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	СкидкиНаценкиПоКатегориямНоменклатуры = Параметры.СкидкиНаценкиПоКатегориямНоменклатуры.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	СкидкиНаценкиПоНоменклатуре = Параметры.СкидкиНаценкиПоНоменклатуре.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	СкидкиНаценкиПоВидуЦен = Параметры.СкидкиНаценкиПоВидуЦен.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	СкидкиНаценкиПоСегментамНоменклатуры = Параметры.СкидкиНаценкиПоСегментамНоменклатуры.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));

	Если СтрокаДерева.Родитель = Неопределено Тогда
		ЭтоУмножение = Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить() = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;
	Иначе
		ЭтоУмножение = СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;
	КонецЕсли;
	
	ТаблицаДанных 		= ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	ТаблицаСообщений 	= ПустаяТаблицаСообщений();
	ТаблицаПодарков 	= ПустаяТаблицаПодарков();
	
	ДействуетБезусловно = СтрокаДерева.ПараметрыУсловий.УсловияВыполнены И СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Количество() = 0;
	
	Если ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		
		Для Каждого Товар Из Товары Цикл
			
			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
			НоваяСтрока.Действует = Истина;
			
			// Если скидка на данную строку не действует - пропускаем.
			Если НЕ ДействуетБезусловно Тогда
				Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0 Тогда
					Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) = Неопределено Тогда
						НоваяСтрока.Действует = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Сумма = Товар.Сумма;

			ЗначениеСкидкиНаценки = ПараметрыСкидки.ЗначениеСкидкиНаценки;
			
			// Поиск значения скидки (наценки) для ценовой группы
			Если СтрокаДерева.ЕстьУточненияПоЦеновымГруппам Тогда
				Для Каждого СтрокаТЧ Из СкидкиНаценкиПоЦеновымГруппам Цикл
					Если СтрокаТЧ.ЗначениеУточнения = Товар.ЦеноваяГруппа Тогда
						ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			// Поиск значения скидки (наценки) для категории номенклатуры
			ИначеЕсли СтрокаДерева.ЕстьУточненияПоКатегориям Тогда
				Если Не СтрокаДерева.ЕстьГруппыВУточненииПоНоменклатуре Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоКатегориямНоменклатуры Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.КатегорияНоменклатуры Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Поиск с учетом иерархии.
					ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархииКатегорий(СкидкиНаценкиПоКатегориямНоменклатуры, Товар.Номенклатура, Товар.КатегорияНоменклатуры);
					Если ТекЗначениеУточнения <> Неопределено Тогда
						ЗначениеСкидкиНаценки = ТекЗначениеУточнения;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаДерева.ЕстьУточненияПоСегментамНоменклатуры Тогда
				Для Каждого СтрокаТЧ Из СкидкиНаценкиПоСегментамНоменклатуры Цикл
					Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
						ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			// Поиск значения скидки (наценки) для номенклатуры
			ИначеЕсли СтрокаДерева.ЕстьУточненияПоНоменклатуре Тогда
				Если Не СтрокаДерева.ЕстьГруппыВУточненииПоНоменклатуре Тогда
					Если Товар.Характеристика.Пустая() Тогда
						Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
							Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
								ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ЕстьЗначениеДляХарактеристики = Ложь;
						ЗначениеДляХарактеристики = 0;
						Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
							Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
								ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
								ЕстьЗначениеДляХарактеристики = Истина;
								ЗначениеДляХарактеристики = ЗначениеСкидкиНаценки;
								Прервать;
							ИначеЕсли СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
								ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							КонецЕсли;
						КонецЦикла;
						
						Если ЕстьЗначениеДляХарактеристики Тогда
							ЗначениеСкидкиНаценки = ЗначениеДляХарактеристики;
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Поиск с учетом иерархии.
					ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархии(СтрокаДерева.СкидкаНаценка, Параметры.СкидкиНаценкиПоНоменклатуре, Товар.Номенклатура, Товар.Характеристика);
					Если ТекЗначениеУточнения <> Неопределено Тогда
						ЗначениеСкидкиНаценки = ТекЗначениеУточнения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		    
			СуммаСкидки = Окр((ЗначениеСкидкиНаценки / 100) * Сумма, 2);
			НоваяСтрока.Сумма = СуммаСкидки;
			
			Комментарий = "Сумма " + Сумма + " * " + ЗначениеСкидкиНаценки + "%";
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, Комментарий, ЗначениеСкидкиНаценки);
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Округление Тогда
		
		Если ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
			
			СуммаДокумента = 0;
			ВсегоПоДокументу = 0;
			СуммаСкидкиКРаспределению = 0;
			Для Каждого Товар Из Товары Цикл
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Товар.СтавкаНДС);
				СуммаДоРасчетаНДС = Товар.ЦенаЗаУпаковку*Товар.Количество - Товар.СуммаСкидкиНаценки - Товар.СуммаСкидки;
				
				СуммаДокумента = СуммаДокумента + СуммаДоРасчетаНДС;
				ВсегоПоДокументу = ВсегоПоДокументу + СуммаДоРасчетаНДС * ?(Параметры.СуммаВключаетНДС, 1, 1+СтавкаНДС/100);
			КонецЦикла;
			
			СуммаСкидкиКРаспределению = ВсегоПоДокументу - ОкруглитьЧисло(ВсегоПоДокументу, ПараметрыСкидки.ПорядокОкругления, ПараметрыСкидки.ВариантОкругления);
				
			Если СуммаСкидкиКРаспределению<>0 Тогда
			
				СтрокаСкидкиДляРаспределения = Неопределено;
				МаксимальнаяСуммаВРаспределении = 0;
				ПроцентСкидкиНаценкиОкругления = СуммаСкидкиКРаспределению / СуммаДокумента;
				// Распределение скидки на товары
				Для Каждого Товар Из Товары Цикл
					
					НоваяСтрока           = ТаблицаДанных.Добавить();
					НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
					НоваяСтрока.Действует = Истина;
					
					// Запоминаем строку с максимальной суммой для разнесения остатка корректировки
					Если Товар.Сумма > МаксимальнаяСуммаВРаспределении Тогда
						МаксимальнаяСуммаВРаспределении = Товар.Сумма;
						СтрокаСкидкиДляРаспределения = НоваяСтрока;
					КонецЕсли;
					
					Если Параметры.СуммаВключаетНДС Тогда
						НоваяСтрока.Сумма = Окр(ПроцентСкидкиНаценкиОкругления * Товар.Сумма, 2);
						СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - НоваяСтрока.Сумма;
					Иначе
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Товар.СтавкаНДС);
						НоваяСтрока.Сумма = Окр(ПроцентСкидкиНаценкиОкругления * Товар.Сумма / (1+СтавкаНДС/100), 2);
						СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - НоваяСтрока.Сумма * (1+СтавкаНДС/100);
					КонецЕсли;
					
					Товар.АвтоСкидкаТочность2 = НоваяСтрока.Сумма;
					Товар.СуммаТочность2 = Товар.ЦенаЗаУпаковку*Товар.Количество - Товар.СуммаСкидкиНаценки - Товар.СуммаСкидки - Товар.АвтоСкидкаТочность2;
					Товар.ВсегоТочность2 = Товар.СуммаТочность2 * ?(Параметры.СуммаВключаетНДС, 1, 1+СтавкаНДС/100);
					
					НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);					
				КонецЦикла;
				
				Если СуммаСкидкиКРаспределению <> 0 И СтрокаСкидкиДляРаспределения <> Неопределено Тогда
					Если Параметры.СуммаВключаетНДС Тогда
						СтрокаСкидкиДляРаспределения.Сумма = СтрокаСкидкиДляРаспределения.Сумма + СуммаСкидкиКРаспределению;
					Иначе
						СтрокаСкидкиДляРаспределения.Сумма = СтрокаСкидкиДляРаспределения.Сумма + СуммаСкидкиКРаспределению / (1+СтавкаНДС/100);
					КонецЕсли;
					
					СтрРаспределения = Товары.Найти(СтрокаСкидкиДляРаспределения.КлючСвязи, "КлючСвязи");
					
					СтрРаспределения.АвтоСкидкаТочность2 = СтрокаСкидкиДляРаспределения.Сумма;
					СтрРаспределения.СуммаТочность2 = СтрРаспределения.ЦенаЗаУпаковку*СтрРаспределения.Количество 
						- СтрРаспределения.СуммаСкидкиНаценки - СтрРаспределения.СуммаСкидки - СтрРаспределения.АвтоСкидкаТочность2;
					СтрРаспределения.ВсегоТочность2 = СтрРаспределения.СуммаТочность2 * ?(Параметры.СуммаВключаетНДС, 1, 1+СтавкаНДС/100);
					
					// корректируем скидку до 0.01 копейки = точность поля в документе
					СтрРаспределения.АвтоСкидкаТочность2 = СтрРаспределения.АвтоСкидкаТочность2 
						+ Товары.Итог("ВсегоТочность2") - ОкруглитьЧисло(Товары.Итог("ВсегоТочность2"), ПараметрыСкидки.ПорядокОкругления, ПараметрыСкидки.ВариантОкругления);
					
					СтрокаСкидкиДляРаспределения.Сумма = СтрРаспределения.АвтоСкидкаТочность2;
					
					СтрокаСкидкиДляРаспределения.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, СтрокаСкидкиДляРаспределения.Сумма, Параметры);
				КонецЕсли;			
			КонецЕсли; 
			
		ИначеЕсли ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
			
			ЕстьУсловияПоСтроке = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0;
			Для Каждого Товар Из Товары Цикл
				
				Если Параметры.СуммаВключаетНДС Тогда
					Всего = Товар.ЦенаЗаУпаковку * Товар.Количество - Товар.СуммаСкидкиНаценки - Товар.СуммаСкидки;
					ЗначениеСкидкиНаценки = Всего - ОкруглитьЧисло(Всего, ПараметрыСкидки.ПорядокОкругления, ПараметрыСкидки.ВариантОкругления);
				Иначе
					СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Товар.СтавкаНДС);
					ЗначениеСкидкиНаценки = 0;
					Всего = (Товар.ЦенаЗаУпаковку * Товар.Количество - Товар.СуммаСкидкиНаценки - Товар.СуммаСкидки - ЗначениеСкидкиНаценки)*(1 + СтавкаНДС/100);
					ВсегоОкругленное = ОкруглитьЧисло(Всего, ПараметрыСкидки.ПорядокОкругления, ПараметрыСкидки.ВариантОкругления);
					
					ЗначениеСкидкиНаценки = (Товар.ЦенаЗаУпаковку * Товар.Количество - Товар.СуммаСкидкиНаценки - Товар.СуммаСкидки) - ВсегоОкругленное / (1 + СтавкаНДС/100);
				КонецЕсли;
				
				Если ЗначениеСкидкиНаценки=0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Поиск значения скидки (наценки) для ценовой группы
				Если СтрокаДерева.ЕстьУточненияПоЦеновымГруппам Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоЦеновымГруппам Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.ЦеноваяГруппа Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				// Поиск значения скидки (наценки) для номенклатурной группы
				ИначеЕсли СтрокаДерева.ЕстьУточненияПоКатегориям Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоКатегориямНоменклатуры Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.КатегорияНоменклатуры Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаДерева.ЕстьУточненияПоСегментамНоменклатуры Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоСегментамНоменклатуры Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				// Поиск значения скидки (наценки) для номенклатуры
				ИначеЕсли СтрокаДерева.ЕстьУточненияПоНоменклатуре Тогда
					Если Не СтрокаДерева.ЕстьГруппыВУточненииПоНоменклатуре Тогда
						Если Товар.Характеристика.Пустая() Тогда
							Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
								Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
									ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							ЕстьЗначениеДляХарактеристики = Ложь;
							ЗначениеДляХарактеристики = 0;
							Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
								Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
									ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
									ЕстьЗначениеДляХарактеристики = Истина;
									ЗначениеДляХарактеристики = ЗначениеСкидкиНаценки;
									Прервать;
								ИначеЕсли СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
									ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
								КонецЕсли;
							КонецЦикла;
							
							Если ЕстьЗначениеДляХарактеристики Тогда
								ЗначениеСкидкиНаценки = ЗначениеДляХарактеристики;
							КонецЕсли;
						КонецЕсли;
					Иначе
						// Поиск с учетом иерархии.
						ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархии(СтрокаДерева.СкидкаНаценка, Параметры.СкидкиНаценкиПоНоменклатуре, Товар.Номенклатура, Товар.Характеристика);
						Если ТекЗначениеУточнения <> Неопределено Тогда
							ЗначениеСкидкиНаценки = ТекЗначениеУточнения;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			    				
				НоваяСтрока = ТаблицаДанных.Добавить();
				
				Если НЕ ЕстьУсловияПоСтроке ИЛИ ДействуетБезусловно ИЛИ СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) <> Неопределено Тогда
					НоваяСтрока.Действует = Истина;
				КонецЕсли;
				
				НоваяСтрока.КлючСвязи   = Товар.КлючСвязи;
				
				Товар.АвтоСкидкаТочность2 = Окр(ЗначениеСкидкиНаценки, 2, РежимОкругления.Окр15как10);
				Товар.СуммаТочность2 = Товар.ЦенаЗаУпаковку*Товар.Количество 
					- Товар.СуммаСкидкиНаценки - Товар.СуммаСкидки - Товар.АвтоСкидкаТочность2;
				Товар.ВсегоТочность2 = Товар.СуммаТочность2 * ?(Параметры.СуммаВключаетНДС, 1, 1+СтавкаНДС/100);
				
				// корректируем скидку до 0.01 копейки = точность поля в документе
				Товар.АвтоСкидкаТочность2 = Товар.АвтоСкидкаТочность2 
					+ Товар.ВсегоТочность2 - ОкруглитьЧисло(Товар.ВсегоТочность2, ПараметрыСкидки.ПорядокОкругления, ПараметрыСкидки.ВариантОкругления);
				
				НоваяСтрока.Сумма = Товар.АвтоСкидкаТочность2;
				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		
		СуммаСкидкиКРаспределению = ПараметрыСкидки.ЗначениеСкидкиНаценки;
		
		Если ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
			
			// Расчет общей суммы товаров сегмента.
			ОбщаяСуммаТоваровСегмента = 0;
			Для Каждого Товар Из Товары Цикл
				ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента + Товар.Сумма;
			КонецЦикла;
			
			СтрокаСкидки = Неопределено;
			МаксимальнаяСуммаВРаспределении = 0;
			// Распределение скидки на товары сегмента.
			Для Каждого Товар Из Товары Цикл
				
				НоваяСтрока           = ТаблицаДанных.Добавить();
				НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
				НоваяСтрока.Действует = Истина;
				
				Сумма = Товар.Сумма;
				
				Если Сумма > МаксимальнаяСуммаВРаспределении Тогда
					МаксимальнаяСуммаВРаспределении = Сумма;
					СтрокаСкидки = НоваяСтрока;
				КонецЕсли;
				
				Если ОбщаяСуммаТоваровСегмента <> 0 Тогда
					НоваяСтрока.Сумма = Окр(Сумма * (СуммаСкидкиКРаспределению / ОбщаяСуммаТоваровСегмента), 2);
				Иначе
					НоваяСтрока.Сумма = 0;
				КонецЕсли;
				
				СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - НоваяСтрока.Сумма;
				ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента - Сумма;
				
				Комментарий = "Сумма строки " + Сумма + " * " + "(Сумма скидки на документ " + ПараметрыСкидки.ЗначениеСкидкиНаценки + " / Сумма документа " + ОбщаяСуммаТоваровСегмента + ")";
				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, Комментарий);
				
			КонецЦикла;
			
			Если СуммаСкидкиКРаспределению <> 0 И СтрокаСкидки <> Неопределено Тогда
				СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаСкидкиКРаспределению;
			КонецЕсли;
			
		ИначеЕсли ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
			
			ЕстьУсловияПоСтроке = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0;
			
			Для Каждого Товар Из Товары Цикл
				
				ЗначениеСкидкиНаценки = ПараметрыСкидки.ЗначениеСкидкиНаценки;
				
				// Поиск значения скидки (наценки) для ценовой группы
				Если СтрокаДерева.ЕстьУточненияПоЦеновымГруппам Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоЦеновымГруппам Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.ЦеноваяГруппа Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				// Поиск значения скидки (наценки) для номенклатурной группы
				ИначеЕсли СтрокаДерева.ЕстьУточненияПоКатегориям Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоКатегориямНоменклатуры Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.КатегорияНоменклатуры Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаДерева.ЕстьУточненияПоСегментамНоменклатуры Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоСегментамНоменклатуры Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				// Поиск значения скидки (наценки) для номенклатуры
				ИначеЕсли СтрокаДерева.ЕстьУточненияПоНоменклатуре Тогда
					Если Не СтрокаДерева.ЕстьГруппыВУточненииПоНоменклатуре Тогда
						Если Товар.Характеристика.Пустая() Тогда
							Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
								Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
									ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							ЕстьЗначениеДляХарактеристики = Ложь;
							ЗначениеДляХарактеристики = 0;
							Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
								Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
									ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
									ЕстьЗначениеДляХарактеристики = Истина;
									ЗначениеДляХарактеристики = ЗначениеСкидкиНаценки;
									Прервать;
								ИначеЕсли СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
									ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
								КонецЕсли;
							КонецЦикла;
							
							Если ЕстьЗначениеДляХарактеристики Тогда
								ЗначениеСкидкиНаценки = ЗначениеДляХарактеристики;
							КонецЕсли;
						КонецЕсли;
					Иначе
						// Поиск с учетом иерархии.
						ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархии(СтрокаДерева.СкидкаНаценка, Параметры.СкидкиНаценкиПоНоменклатуре, Товар.Номенклатура, Товар.Характеристика);
						Если ТекЗначениеУточнения <> Неопределено Тогда
							ЗначениеСкидкиНаценки = ТекЗначениеУточнения;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			    				
				НоваяСтрока = ТаблицаДанных.Добавить();
				
				Если НЕ ЕстьУсловияПоСтроке ИЛИ ДействуетБезусловно ИЛИ СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) <> Неопределено Тогда
					НоваяСтрока.Действует = Истина;
				КонецЕсли;
				
				НоваяСтрока.КлючСвязи   = Товар.КлючСвязи;
				НоваяСтрока.Сумма       = ЗначениеСкидкиНаценки;
				НоваяСтрока.ЗначениеСкидкиНаценки = ЗначениеСкидкиНаценки;			
				Комментарий = "Сумма скидки на строку " + ЗначениеСкидкиНаценки;
				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, Комментарий);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов Тогда
		
		Для Каждого Товар Из Товары Цикл
			
			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
			НоваяСтрока.Действует = Истина;
			
			// Если скидка на данную строку не действует - пропускаем.
			Если НЕ ДействуетБезусловно Тогда
				Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0 Тогда
					Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) = Неопределено Тогда
						НоваяСтрока.Действует = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Сумма = Товар.Сумма;

			ЗначениеСкидкиНаценки = ПараметрыСкидки.ЗначениеСкидкиНаценки;
			
			// Поиск значения скидки (наценки) для ценовой группы
			Если СтрокаДерева.ЕстьУточненияПоЦеновымГруппам Тогда
				Для Каждого СтрокаТЧ Из СкидкиНаценкиПоЦеновымГруппам Цикл
					Если СтрокаТЧ.ЗначениеУточнения = Товар.ЦеноваяГруппа Тогда
						ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			// Поиск значения скидки (наценки) для категории номенклатуры
			ИначеЕсли СтрокаДерева.ЕстьУточненияПоКатегориям Тогда
				Если Не СтрокаДерева.ЕстьГруппыВУточненииПоНоменклатуре Тогда
					Для Каждого СтрокаТЧ Из СкидкиНаценкиПоКатегориямНоменклатуры Цикл
						Если СтрокаТЧ.ЗначениеУточнения = Товар.КатегорияНоменклатуры Тогда
							ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Поиск с учетом иерархии.
					ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархииКатегорий(СкидкиНаценкиПоКатегориямНоменклатуры, Товар.Номенклатура, Товар.КатегорияНоменклатуры);
					Если ТекЗначениеУточнения <> Неопределено Тогда
						ЗначениеСкидкиНаценки = ТекЗначениеУточнения;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаДерева.ЕстьУточненияПоСегментамНоменклатуры Тогда
				Для Каждого СтрокаТЧ Из СкидкиНаценкиПоСегментамНоменклатуры Цикл
					Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
						ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			// Поиск значения скидки (наценки) для номенклатуры
			ИначеЕсли СтрокаДерева.ЕстьУточненияПоНоменклатуре Тогда
				Если Не СтрокаДерева.ЕстьГруппыВУточненииПоНоменклатуре Тогда
					Если Товар.Характеристика.Пустая() Тогда
						Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
							Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
								ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ЕстьЗначениеДляХарактеристики = Ложь;
						ЗначениеДляХарактеристики = 0;
						Для Каждого СтрокаТЧ Из СкидкиНаценкиПоНоменклатуре Цикл
							Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
								ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
								ЕстьЗначениеДляХарактеристики = Истина;
								ЗначениеДляХарактеристики = ЗначениеСкидкиНаценки;
								Прервать;
							ИначеЕсли СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
								ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
							КонецЕсли;
						КонецЦикла;
						
						Если ЕстьЗначениеДляХарактеристики Тогда
							ЗначениеСкидкиНаценки = ЗначениеДляХарактеристики;
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Поиск с учетом иерархии.
					ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархии(СтрокаДерева.СкидкаНаценка, Параметры.СкидкиНаценкиПоНоменклатуре, Товар.Номенклатура, Товар.Характеристика);
					Если ТекЗначениеУточнения <> Неопределено Тогда
						ЗначениеСкидкиНаценки = ТекЗначениеУточнения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		    
			СуммаСкидки = Окр((ЗначениеСкидкиНаценки / 100) * Сумма, 2);
			
			НоваяСтрока.Сумма = СуммаСкидки;
			
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, ЗначениеСкидкиНаценки);
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов Тогда
		
		СуммаСкидкиКРаспределению = ПараметрыСкидки.ЗначениеСкидкиНаценки;
			
		// Расчет общей суммы товаров сегмента.
		ОбщаяСуммаТоваровСегмента = 0;
		Для Каждого Товар Из Товары Цикл
			ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента + Товар.Сумма;
		КонецЦикла;
		
		СтрокаСкидкиДляРаспределения = Неопределено;
		МаксимальнаяСуммаВРаспределении = 0;
		// Распределение скидки на товары сегмента.
		Для Каждого Товар Из Товары Цикл
			
			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
			НоваяСтрока.Действует = Истина;
			
			Сумма = Товар.Сумма;
			
			Если Сумма > МаксимальнаяСуммаВРаспределении Тогда
				МаксимальнаяСуммаВРаспределении = Сумма;
				СтрокаСкидкиДляРаспределения = НоваяСтрока;
			КонецЕсли;
			
			Если ОбщаяСуммаТоваровСегмента <> 0 Тогда
				НоваяСтрока.Сумма = Окр(Сумма * (СуммаСкидкиКРаспределению / ОбщаяСуммаТоваровСегмента), 2);
			Иначе
				НоваяСтрока.Сумма = 0;
			КонецЕсли;
			
			СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - НоваяСтрока.Сумма;
			ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента - Сумма;

			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
			
		КонецЦикла;
		
		Если СуммаСкидкиКРаспределению <> 0 И СтрокаСкидкиДляРаспределения <> Неопределено Тогда
			СтрокаСкидкиДляРаспределения.Сумма = СтрокаСкидкиДляРаспределения.Сумма + СуммаСкидкиКРаспределению;
		КонецЕсли;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦен Тогда
		
		// получим цены товаров
		Если НЕ Параметры.Свойство("ТаблицаЦен") Тогда
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	втТовары.Номенклатура КАК Номенклатура,
			|	втТовары.Характеристика КАК Характеристика,
			|	втТовары.ЦенаЗаУпаковку КАК ЦенаВДокументе,
			|	втТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	втТовары.Количество КАК Количество,
			|	втТовары.КлючСвязи КАК КлючСвязи
			|ПОМЕСТИТЬ втТовары
			|ИЗ
			|	&Товары КАК втТовары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КурсыВалютСкидки.Курс КАК Курс,
			|	КурсыВалютСкидки.Кратность КАК Кратность,
			|	КурсыВалютСкидки.Валюта КАК Валюта
			|ПОМЕСТИТЬ КурсыВалютСкидки
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСкидки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КурсыВалютСкидки.Валюта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
			|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ЕдиницаИзмеренияЦены.Коэффициент, 1) КАК КоэффициентЕдиницыИзмерения,
			|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
			|	ВЫБОР
			|		КОГДА ЦеныНоменклатурыСрезПоследних.ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
			|			ТОГДА ЦеныНоменклатурыСрезПоследних.ВалютаЦены
			|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены
			|	КОНЕЦ КАК ВалютаЦены
			|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, ВидЦен В (&спВидовЦен)) КАК ЦеныНоменклатурыСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницаИзмеренияЦены
			|		ПО ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ЕдиницаИзмеренияЦены.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Характеристика,
			|	ВалютаЦены
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеДокумента.КлючСвязи КАК КлючСвязи,
			|	ДанныеДокумента.ВидЦен КАК ВидЦен,
			|	ДанныеДокумента.Номенклатура КАК Номенклатура,
			|	ДанныеДокумента.Характеристика КАК Характеристика,
			|	ДанныеДокумента.ЕдиницаИзмеренияСкидки КАК ЕдиницаИзмерения,
			|	ДанныеДокумента.Цена КАК ЦенаВДокументе,
			|	ДанныеДокумента.ЦенаСкидки КАК Цена,
			|	ДанныеДокумента.ЦенаСкидкиУказана КАК ЦенаСкидкиУказана,
			|	ДанныеДокумента.КоэффициентПриведенияКЕдиницеЦеныСкидки КАК КоэффициентПриведенияКЕдиницеЦеныСкидки,
			|	ДанныеДокумента.Количество * ДанныеДокумента.КоэффициентПриведенияКЕдиницеЦеныСкидки 
			|		* (ДанныеДокумента.Цена / ДанныеДокумента.КоэффициентПриведенияКЕдиницеЦеныСкидки  
			|			-ЕСТЬNULL(ДанныеДокумента.ЦенаСкидки, 0) 
			|				/ ЕСТЬNULL(КурсыВалютДокумента.Курс, 0) 
			|				/ ЕСТЬNULL(КурсыВалютДокумента.Кратность, 0) 
			|				* ЕСТЬNULL(КурсыВалютСкидки.Курс, 0) 
			|				* ЕСТЬNULL(КурсыВалютСкидки.Кратность, 0)) КАК РазмерСкидки,
			|	ЕСТЬNULL(ДанныеДокумента.ЦенаСкидки, 0) 
			|		* ДанныеДокумента.КоэффициентПриведенияКЕдиницеЦеныСкидки
			|		/ ЕСТЬNULL(КурсыВалютДокумента.Курс, 0) 
			|		/ ЕСТЬNULL(КурсыВалютДокумента.Кратность, 0) 
			|		* ЕСТЬNULL(КурсыВалютСкидки.Курс, 0) 
			|		* ЕСТЬNULL(КурсыВалютСкидки.Кратность, 0) КАК ЦенаВВалютеДокумента
			|ИЗ
			|	(ВЫБРАТЬ
			|		втТовары.КлючСвязи КАК КлючСвязи,
			|		ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
			|		втТовары.Номенклатура КАК Номенклатура,
			|		втТовары.Характеристика КАК Характеристика,
			|		втТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияСкидки,
			|		ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаСкидки,
			|		ЕСТЬNULL(ЕдиницаИзмеренияТовара.Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.КоэффициентЕдиницыИзмерения, 1) КАК КоэффициентПриведенияКЕдиницеЦеныСкидки,
			|		втТовары.ЦенаВДокументе КАК Цена,
			|		втТовары.Количество КАК Количество,
			|		ВЫБОР
			|			КОГДА ЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ЦенаСкидкиУказана,
			|		ЦеныНоменклатурыСрезПоследних.ВалютаЦены КАК ВалютаЦеныСкидки
			|	ИЗ
			|		втТовары КАК втТовары
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницаИзмеренияТовара
			|			ПО втТовары.ЕдиницаИзмерения = ЕдиницаИзмеренияТовара.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
			|			ПО втТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|				И втТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика) КАК ДанныеДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютСкидки КАК КурсыВалютСкидки
			|		ПО ДанныеДокумента.ВалютаЦеныСкидки = КурсыВалютСкидки.Валюта,
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыВалютДокумента";
			
			Запрос.УстановитьПараметр("Товары", Товары);
			Запрос.УстановитьПараметр("ДатаДокумента", Параметры.ТекущаяДата);
			Запрос.УстановитьПараметр("ВалютаДокумента", Параметры.ВалютаДокумента);
			Запрос.УстановитьПараметр("ВалютаСкидки", СтрокаДерева.ВалютаПредоставления);
			Запрос.УстановитьПараметр("спВидовЦен", Параметры.СкидкиНаценкиПоВидуЦен.ВыгрузитьКолонку("ВидЦен"));
			
			Параметры.Вставить("ТаблицаЦен", Запрос.Выполнить().Выгрузить());			
		КонецЕсли;
		
		Для Каждого Товар Из Товары Цикл
			
			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
			НоваяСтрока.Действует = Истина;
			
			// Если скидка на данную строку не действует - пропускаем.
			Если НЕ ДействуетБезусловно Тогда
				Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0 Тогда
					Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) = Неопределено Тогда
						НоваяСтрока.Действует = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Комментарий = "";
			СтрокаСкидки = Параметры.ТаблицаЦен.НайтиСтроки(Новый Структура("КлючСвязи, ВидЦен", Товар.КлючСвязи, СтрокаДерева.ВидЦен));
			Если СтрокаСкидки.Количество() > 0 И СтрокаСкидки[0].ЦенаСкидкиУказана Тогда
				НоваяСтрока.Сумма = СтрокаСкидки[0].РазмерСкидки;
				Если Параметры.ВалютаДокумента = СтрокаДерева.ВалютаПредоставления Тогда
					Комментарий = "(" + Параметры.ТекущийВидЦен + " " + СтрокаСкидки[0].ЦенаВДокументе + " - " + СтрокаДерева.ВидЦен + " " + СтрокаСкидки[0].Цена
						+ ") * Количество " + Товар.Количество;
				Иначе
					Комментарий = "(" + Параметры.ТекущийВидЦен + " " + СтрокаСкидки[0].ЦенаВДокументе + " " + Параметры.ВалютаДокумента 
						+ " - " + СтрокаДерева.ВидЦен + " " + СтрокаСкидки[0].Цена + " " + СтрокаДерева.ВалютаПредоставления
						+ ") * Количество " + Товар.Количество;
				КонецЕсли; 
			КонецЕсли;

			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, Комментарий);
		КонецЦикла;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда
		
		Комментарий = НСтр("ru = 'Вывести сообщение'");
		ПараметрыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСкидки.СкидкаНаценка,"МоментВыдачиСообщения, ТекстСообщения");
		ПриРасчете = ПредопределенноеЗначение("Перечисление.ТочкиВыдачиСообщенияКассиру.ВМоментРасчетаСкидок");
		
		Если ПараметрыСкидки.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
			Если Не Товары.Количество() = 0 Тогда
				
				Товар = Товары[0];
				
				НоваяСтрока           = ТаблицаДанных.Добавить();
				НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
				НоваяСтрока.Действует = Истина;
				
				Сумма = 0;
								
				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, Комментарий);
				
				Если ПараметрыСообщения.МоментВыдачиСообщения = ПриРасчете Тогда
					СтрокаСообщения = ТаблицаСообщений.Добавить();
					СтрокаСообщения.КлючСвязи = Товар.КлючСвязи;
					СтрокаСообщения.МоментСообщения = ПриРасчете;
					СтрокаСообщения.СкидкаНаценка = ПараметрыСкидки.СкидкаНаценка;
					СтрокаСообщения.ТекстСообщения = ПараметрыСообщения.ТекстСообщения;
				КонецЕсли;
				НоваяСтрока.ТаблицаСообщений = ТаблицаСообщений;
				ТаблицаСообщений = ПустаяТаблицаСообщений();
				
			КонецЕсли;
		Иначе
			Для Каждого Товар Из Товары Цикл
				
				НоваяСтрока           = ТаблицаДанных.Добавить();
				НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
				НоваяСтрока.Действует = Истина;
				// Если скидка на данную строку не действует - пропускаем.
				Если НЕ ДействуетБезусловно Тогда
					Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0 Тогда
						Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) = Неопределено Тогда
							НоваяСтрока.Действует = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Сумма = 0;
								
				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, Комментарий);
				
				Если ПараметрыСообщения.МоментВыдачиСообщения = ПриРасчете 
					И НоваяСтрока.Действует Тогда
					СтрокаСообщения = ТаблицаСообщений.Добавить();
					СтрокаСообщения.КлючСвязи = Товар.КлючСвязи;
					СтрокаСообщения.МоментСообщения = ПриРасчете;
					СтрокаСообщения.СкидкаНаценка = ПараметрыСкидки.СкидкаНаценка;
					СтрокаСообщения.ТекстСообщения = ПараметрыСообщения.ТекстСообщения;
				КонецЕсли;
				НоваяСтрока.ТаблицаСообщений = ТаблицаСообщений;
				ТаблицаСообщений = ПустаяТаблицаСообщений();
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		
		ПараметрыПодарка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСкидки.СкидкаНаценка,"ПодарокИзКорзиныПокупателя, КратноКоличествуУсловий, ЛюбойПодарокИзСписка, НаборПодарков, ДаритьТолькоПолныйКомплект");
		ВозможныеПодарки = ПараметрыПодарка.НаборПодарков.Выгрузить(); 
		ВозможныеПодарки.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число"));
		ВозможныеПодарки.Колонки.Добавить("КоличествоВыдать", Новый ОписаниеТипов("Число"));
		Товары.Колонки.Добавить("ПродажаПодарка", Новый ОписаниеТипов("Булево"));
		Комментарий = НСтр("ru = 'Подарок '");
		
		СтрокиУсловий = Новый Массив;
		КоличествоВыполненийУсловия = Неопределено;
		ПроцентСкидкиНаПодарок = 100;
		
		Если НЕ ДействуетБезусловно Тогда
			Для Каждого СтрокаУсловия Из СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий Цикл
				Если ПараметрыПодарка.КратноКоличествуУсловий И НЕ СтрокаУсловия.КратностьВыполнения = 0 Тогда							
					Если СтрокаУсловия.КратностьВыполнения > 0 И КоличествоВыполненийУсловия = Неопределено Тогда
						КоличествоВыполненийУсловия = СтрокаУсловия.КратностьВыполнения;
					ИначеЕсли СтрокаУсловия.КратностьВыполнения > 0 Тогда
						КоличествоВыполненийУсловия = Мин(КоличествоВыполненийУсловия, СтрокаУсловия.КратностьВыполнения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		Если КоличествоВыполненийУсловия = Неопределено Тогда
			КоличествоВыполненийУсловия = 1;
		КонецЕсли;
		Если ПараметрыПодарка.КратноКоличествуУсловий Тогда
			Комментарий = Комментарий +" "+ НСтр("ru = '(условия выполнены "+КоличествоВыполненийУсловия+" раз): ('");									
		Иначе
			КоличествоВыполненийУсловия = 1;
		КонецЕсли;
		
		Если ПараметрыПодарка.ПодарокИзКорзиныПокупателя Тогда
			// Подарок уже находится в корзине, нужно предоставить скидку на стоимость нужного количества единиц
			// Учитываются только те товары, которые действительно есть в корзине, по порядку следования в списке подарков
			ОсталосьЗачестьРазВыполнения = КоличествоВыполненийУсловия;
			Если Не ПараметрыПодарка.ЛюбойПодарокИзСписка И ПараметрыПодарка.ДаритьТолькоПолныйКомплект Тогда
				МинимальноеКоличествоСоставляющихКомплекта = КоличествоВыполненийУсловия;
				Для Каждого СтрокаВозможногоПодарка Из ВозможныеПодарки Цикл
					Отбор = Новый Структура;
					Отбор.Вставить("Номенклатура", СтрокаВозможногоПодарка.Номенклатура);
					Если ЗначениеЗаполнено(СтрокаВозможногоПодарка.Характеристика) Тогда
						Отбор.Вставить("Характеристика", СтрокаВозможногоПодарка.Характеристика);
					КонецЕсли;
					СтрокиТоваров = Товары.НайтиСтроки(Отбор);
					Если СтрокиТоваров.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					КоэффициентПодарка = 1;
					Если ТипЗнч(СтрокаВозможногоПодарка.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						КоэффициентПодарка = СтрокаВозможногоПодарка.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					КоэффициентПодарка = ?(КоэффициентПодарка = 0, 1, КоэффициентПодарка);
					КоличествоВыполненийЗачесть = 0;
					Для Каждого СтрокаТовара Из СтрокиТоваров Цикл  
						// Найден товар в корзине, на который необходимо предоставить скидку, подарив таким образом его покупателю
						КоэффициентТовара = 1;
						Если ТипЗнч(СтрокаТовара.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
							КоэффициентТовара = СтрокаТовара.ЕдиницаИзмерения.Коэффициент;
						КонецЕсли;
						КоэффициентТовара = ?(КоэффициентТовара = 0, 1, КоэффициентТовара);

						КоличествоТовараВБазовых = СтрокаТовара.Количество * КоэффициентПодарка;
						КоличествоПодароквВБазовых = СтрокаВозможногоПодарка.Количество * КоэффициентТовара;
						Если КоличествоТовараВБазовых < КоличествоПодароквВБазовых Тогда 
							Продолжить;
						Иначе
							КоличествоВыполненийЗачесть = КоличествоВыполненийЗачесть + 
								Мин(КоличествоТовараВБазовых / КоличествоПодароквВБазовых, КоличествоВыполненийУсловия);
						КонецЕсли; 
						
					КонецЦикла;				
					МинимальноеКоличествоСоставляющихКомплекта = Мин(КоличествоВыполненийЗачесть, МинимальноеКоличествоСоставляющихКомплекта);
				КонецЦикла;	
				ОсталосьЗачестьРазВыполнения = МинимальноеКоличествоСоставляющихКомплекта;
			КонецЕсли;		
			
			Для Каждого СтрокаВозможногоПодарка Из ВозможныеПодарки Цикл
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура", СтрокаВозможногоПодарка.Номенклатура);
				Если ЗначениеЗаполнено(СтрокаВозможногоПодарка.Характеристика) Тогда
					Отбор.Вставить("Характеристика", СтрокаВозможногоПодарка.Характеристика);
				КонецЕсли;
				СтрокиТоваров = Товары.НайтиСтроки(Отбор);
				Если СтрокиТоваров.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				КоэффициентПодарка = 1;
				Если ТипЗнч(СтрокаВозможногоПодарка.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					КоэффициентПодарка = СтрокаВозможногоПодарка.ЕдиницаИзмерения.Коэффициент;
				КонецЕсли;
				КоэффициентПодарка = ?(КоэффициентПодарка = 0, 1, КоэффициентПодарка);
				ВыполненийЗачтено = 0;
				Для Каждого СтрокаТовара Из СтрокиТоваров Цикл  
					// Найден товар в корзине, на который необходимо предоставить скидку, подарив таким образом его покупателю
					КоэффициентТовара = 1;
					Если ТипЗнч(СтрокаТовара.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						КоэффициентТовара = СтрокаТовара.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					КоэффициентТовара = ?(КоэффициентТовара = 0, 1, КоэффициентТовара);

					КоличествоТовараВБазовых = СтрокаТовара.Количество * КоэффициентПодарка;
					КоличествоПодароквВБазовых = СтрокаВозможногоПодарка.Количество * КоэффициентТовара;
					Если КоличествоТовараВБазовых < КоличествоПодароквВБазовых Тогда 
						Продолжить;
					Иначе
						КоличествоВыполненийЗачесть = Мин(КоличествоТовараВБазовых / КоличествоПодароквВБазовых, ОсталосьЗачестьРазВыполнения - ВыполненийЗачтено);
					КонецЕсли; 
					Если КоличествоВыполненийЗачесть <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Если скидка на данную строку не действует - пропускаем.
					Если НЕ ДействуетБезусловно Тогда
						Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0 Тогда
							Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(СтрокаТовара.КлючСвязи) = Неопределено Тогда
								// Перебираем строки товаров пока не найдем строку с выполненными условиями
								// По этому нет смысла фиксировать не сработавшую скидку-подарок 
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

					ПодарокКВыдаче = ТаблицаПодарков.Добавить();
					ЗаполнитьЗначенияСвойств(ПодарокКВыдаче, СтрокаВозможногоПодарка); 
					ПодарокКВыдаче.СкидкаНаценка = ПараметрыСкидки.СкидкаНаценка; 
					ПодарокКВыдаче.КлючСвязи = СтрокаТовара.КлючСвязи;
					КоличествоБазовыхВыдать = КоличествоПодароквВБазовых * КоличествоВыполненийЗачесть;
					ПодарокКВыдаче.Количество = КоличествоБазовыхВыдать / КоэффициентПодарка;
					ПодарокКВыдаче.Цена = СтрокаТовара.ЦенаЗаУпаковку;
					СуммаПодарка = СтрокаТовара.Сумма * (ПодарокКВыдаче.Количество * КоэффициентПодарка) / (СтрокаТовара.Количество * КоэффициентТовара);
					ПодарокКВыдаче.Сумма = Окр(СуммаПодарка * ПроцентСкидкиНаПодарок / 100, 2); 
					ПодарокКВыдаче.СтруктурнаяЕдиница = Параметры.ТекущаяСтруктурнаяЕдиница;

					ДанныеСкидок = РаспределитьСкидкуПодарок(ПодарокКВыдаче, СтрокаТовара, Товары, Параметры); 

					Для Каждого СтрокаНовойСкидки Из ДанныеСкидок Цикл
						НоваяСтрока = ТаблицаДанных.Добавить();
						НоваяСтрока.КлючСвязи 				= СтрокаНовойСкидки.КлючСвязи;
						НоваяСтрока.Действует 				= Истина;
						НоваяСтрока.Сумма 					= СтрокаНовойСкидки.Сумма;
						НоваяСтрока.ОбщаяСуммаСкидок		= СуммаПодарка;
						НоваяСтрока.ЗначениеСкидкиНаценки	= СтрокаНовойСкидки.ПроцентСкидки;
						Комментарий = НСтр("ru = 'Подарок %1: %2р. (доля %3%)'");
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, СтрокаТовара.Номенклатура, СуммаПодарка, Окр(100 * НоваяСтрока.Сумма / СуммаПодарка));
						НоваяСтрока.Расшифровка 			= ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, Комментарий);
					КонецЦикла;
					ВыполненийЗачтено = ВыполненийЗачтено + КоличествоВыполненийЗачесть;
					Если ОсталосьЗачестьРазВыполнения - ВыполненийЗачтено <= 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПараметрыПодарка.ЛюбойПодарокИзСписка Тогда
					ОсталосьЗачестьРазВыполнения = ОсталосьЗачестьРазВыполнения - ВыполненийЗачтено;
					Если ОсталосьЗачестьРазВыполнения <= 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// Подарки уже предоставлены в виде скидки на товар в корзине
			ТаблицаПодарков = ПустаяТаблицаПодарков();
		Иначе
			СуммаПодарков = 0;	
			Для Каждого СтрокаВозможногоПодарка Из ВозможныеПодарки Цикл
				Если СтрокаВозможногоПодарка.Количество = Null Тогда
					Продолжить;
				КонецЕсли;				
				Если СтрокаВозможногоПодарка.Количество <= 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыПодарков = ТаблицаПодарков.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПодарков, СтрокаДерева);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПодарков, СтрокаВозможногоПодарка);
				КоэффициентПодарка = 1;
				Если ТипЗнч(СтрокаВозможногоПодарка.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					КоэффициентПодарка = СтрокаВозможногоПодарка.ЕдиницаИзмерения.Коэффициент;
				КонецЕсли;
				КоэффициентПодарка = ?(КоэффициентПодарка = 0, 1, КоэффициентПодарка);
				КоличествоВыдать = Макс(1, СтрокаВозможногоПодарка.Количество * КоличествоВыполненийУсловия);
				СтрокаТаблицыПодарков.Количество = КоличествоВыдать; 
				СтрокаТаблицыПодарков.ПодарокИзСписка = ПараметрыПодарка.ЛюбойПодарокИзСписка;				

				ПриводитьКМинимальной = ложь;  
				ПараметрыПолученияЦены = Новый Структура;
				ПараметрыПолученияЦены.Вставить("ВидЦен", 				Параметры.ТекущийВидЦен);
				ПараметрыПолученияЦены.Вставить("СтруктурнаяЕдиница",	Параметры.ТекущаяСтруктурнаяЕдиница);
				ПараметрыПолученияЦены.Вставить("СуммаВключаетНДС",		Параметры.СуммаВключаетНДС);
				ПараметрыПолученияЦены.Вставить("ДатаОбработки", 		Параметры.ТекущаяДата);
				ПараметрыПолученияЦены.Вставить("Номенклатура", 		СтрокаТаблицыПодарков.Номенклатура);
				ПараметрыПолученияЦены.Вставить("Характеристика",       СтрокаТаблицыПодарков.Характеристика);
				ПараметрыПолученияЦены.Вставить("Коэффициент", 			КоэффициентПодарка);
				ПараметрыПолученияЦены.Вставить("ВалютаДокумента",		Параметры.ВалютаДокумента);
				
				ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаВозможногоПодарка.Номенклатура,"ВидСтавкиНДС");
				Если НЕ ЗначениеЗаполнено(ВидСтавкиНДС) Тогда     
					ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
				КонецЕсли;
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				Если ПараметрыПолученияЦены.Свойство("НалогообложениеНДС") 
					И НЕ ПараметрыПолученияЦены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если ПараметрыПолученияЦены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
					КонецЕсли;
				Иначе
					СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, ?(ЗначениеЗаполнено(ПараметрыПолученияЦены.ДатаОбработки), ПараметрыПолученияЦены.ДатаОбработки, ТекущаяДатаСеанса()));
				КонецЕсли;
				ПараметрыПолученияЦены.Вставить("СтавкаНДС", СтавкаНДС);
				
				Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(ПараметрыПолученияЦены);
				Цена = ?(Цена > 0, Цена, 1);
				СтрокаТаблицыПодарков.Цена = Цена;
				СтрокаТаблицыПодарков.Сумма = СтрокаТаблицыПодарков.Цена * СтрокаТаблицыПодарков.Количество;
				СуммаПодарков = СуммаПодарков + СтрокаТаблицыПодарков.Сумма;
				Комментарий = Комментарий + ?(СуммаПодарков = 0, "", Символы.ПС) + СтрокаТаблицыПодарков.Номенклатура;
				
				СтрокаТаблицыПодарков.СтруктурнаяЕдиница = Параметры.ТекущаяСтруктурнаяЕдиница;
 			КонецЦикла;
			Если ТаблицаПодарков.Количество() > 0 Тогда  
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.КлючСвязи = 0;
				НоваяСтрока.ОбщаяСуммаСкидок = СуммаПодарков;
				НоваяСтрока.Сумма = НоваяСтрока.ОбщаяСуммаСкидок;
				НоваяСтрока.Действует = Истина;
				НоваяСтрока.ТаблицаПодарков = ТаблицаПодарков;
				НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, Комментарий);				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Промокод Тогда
		
		Комментарий = НСтр("ru = 'Выдать промокод'");
			
		// Фиксируем необходимость применения скидки, а сам промокод будет сгенерирован и выдан покупателю при пробитии чека
		
		Для Каждого Товар Из Товары Цикл
			
			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
			НоваяСтрока.Действует = Истина;
			
			// Если скидка на данную строку не действует - пропускаем.
			Если НЕ ДействуетБезусловно Тогда
				Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0 Тогда
					Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) = Неопределено Тогда
						НоваяСтрока.Действует = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
			Сумма = 0;
							
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры, Комментарий);
		КонецЦикла;					
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Расширение Тогда

		ПараметрыПодключаемойПроцедуры = Новый Массив;
		ПараметрыПодключаемойПроцедуры.Добавить(СтрокаДерева);
		ПараметрыПодключаемойПроцедуры.Добавить(Параметры);
		// Возвращаемый параметр ТаблицаДанных
		ПараметрыПодключаемойПроцедуры.Добавить(ТаблицаДанных);		
		
		ИмяПроцедуры = СтрШаблон("ЗаполнитьТаблицуСкидок_%1", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДерева.СкидкаНаценка, "ИдентификаторДляРасчетаВРасширении"));
		ПолноИмяПроцедуры = "ПодключаемыеПроцедуры." + ИмяПроцедуры;
		Попытка
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(ПолноИмяПроцедуры, ПараметрыПодключаемойПроцедуры);
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Описание = СтрШаблон("Метод объекта не обнаружен (%1)", ИмяПроцедуры) Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Процедура расчета скидки %1 не найдена. Проверьте подключено ли расширение.'"), ПолноИмяПроцедуры);
			Иначе
				ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			ЗаписьЖурналаРегистрации(НСтр("ru='РассчитатьСкидку'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ПодключаемыеПроцедуры,,
				ТекстОшибки);
							
		КонецПопытки;
	КонецЕсли;
	
	СтрокаДерева.ТаблицаДанных   = ТаблицаДанных;
	
КонецПроцедуры // РассчитатьСкидку()

Функция ОкруглитьЧисло(Знач Число, ОкруглениеПорядок, ВариантОкругления)
	
	// Преобразуем порядок округления числа. Если передали пустое значение порядка, то округлим до копеек. 
	ПорядокОкругления	= ?(ЗначениеЗаполнено(ОкруглениеПорядок), ОкруглениеПорядок, Перечисления.ПорядкиОкругления.Окр0_01);
	Порядок 			= Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		
	Иначе
		
		Если ВариантОкругления = Перечисления.ВариантыОкругления.ВсегдаВПользуНашейФирмы Тогда //всегда в большую сторону
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Число = Порядок * (КоличествоЦелыхИнтервалов + 1);
			
		ИначеЕсли ВариантОкругления = Перечисления.ВариантыОкругления.ВсегдаВПользуКлиента Тогда //всегда в меньшую сторону
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35
			// и 0.376 до 0.35
			Число = Порядок * (КоличествоЦелыхИнтервалов);
			
		Иначе //по арифметическим правилам
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Число = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Число;
	
КонецФункции

// Функция возвращает значение (уточнение) автоматической скидки (наценки) для указанной позиции номенклатуры с учетом характеристики и иерархии
//
Функция ПолучитьЗначениеУточненияСУчетомИерархии(СкидкаНаценка, СкидкиНаценкиПоНоменклатуре, Номенклатура, Характеристика)
	
	// Пример. В ТЧ выбран Товар0, в уточнении выбраны Товар1 (10%), Товар2 (20%) и Группа1 (15%).
	// Товар0 может быть равен Товар1 или Товар2 или быть в иерархии Группы1.
	
	ТекРодитель = Номенклатура.Родитель;
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(Номенклатура);
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		МассивРодителей.Добавить(ТекРодитель);
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценки.Характеристика КАК Характеристика,
	|	СкидкиНаценки.ЗначениеУточнения КАК ЗначениеУточнения,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	&СкидкиНаценкиПоНоменклатуре КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.СкидкаНаценка = &СкидкаНаценка
	|	И СкидкиНаценки.ЗначениеУточнения В(&МассивРодителей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.ЗначениеУточнения КАК ЗначениеУточнения,
	|	втГруппы.СкидкаНаценка КАК СкидкаНаценка,
	|	втГруппы.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	втГруппы КАК втГруппы
	|ГДЕ
	|	(втГруппы.Характеристика = &Характеристика
	|			ИЛИ втГруппы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ ВЫРАЗИТЬ(втГруппы.ЗначениеУточнения КАК Справочник.Номенклатура).ЭтоГруппа)";
	
	Запрос.УстановитьПараметр("МассивРодителей", МассивРодителей);
	Запрос.УстановитьПараметр("СкидкиНаценкиПоНоменклатуре", СкидкиНаценкиПоНоменклатуре);
	Запрос.УстановитьПараметр("СкидкаНаценка", СкидкаНаценка);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.ЗначениеСкидкиНаценки;
	
	КонецЦикла;
	
КонецФункции

// Функция возвращает значение (уточнение) автоматической скидки (наценки) для указанной позиции номенклатуры с учетом характеристики и иерархии
//
Функция ПолучитьЗначениеУточненияСУчетомИерархииКатегорий(СкидкиНаценкиПоКатегориямНоменклатуры, Номенклатура, Категория)
	
	// Пример. В ТЧ выбран Товар0, в уточнении выбраны Категория1 (10%), Категория2 (20%) и ГруппаКатегорий1 (15%).
	// Товар0 может быть в Категории1 или Категории2 или Категории3, которая находится в иерархии категорий ГруппыКатегорий1.
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	&ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка
	|	И Номенклатура.КатегорияНоменклатуры В ИЕРАРХИИ(&ЗначениеУточнения)";

	СчЗапросов = 0;
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	ЗначениеБезХарактеристики = 0;
	Для Каждого ТекУточнение Из СкидкиНаценкиПоКатегориямНоменклатуры Цикл
		Если Не ТекУточнение.ЭтоГруппа Тогда
			Если ТекУточнение.ЗначениеУточнения = Категория Тогда
				Возврат ТекУточнение.ЗначениеСкидкиНаценки;
			КонецЕсли;
		Иначе
			СчЗапросов = СчЗапросов + 1;
			
			ОбработанныйТекстШаблона = СтрЗаменить(ШаблонТекстаЗапроса, "&ЗначениеУточнения", "&ЗначениеУточнения"+СчЗапросов);
			ОбработанныйТекстШаблона = СтрЗаменить(ОбработанныйТекстШаблона, "&ЗначениеСкидкиНаценки", "&ЗначениеСкидкиНаценки"+СчЗапросов);
			
			Запрос.УстановитьПараметр("ЗначениеУточнения"+СчЗапросов, ТекУточнение.ЗначениеУточнения);
			Запрос.УстановитьПараметр("ЗначениеСкидкиНаценки"+СчЗапросов, ТекУточнение.ЗначениеСкидкиНаценки);
			
			Запрос.Текст = Запрос.Текст + ОбработанныйТекстШаблона+Символы.ПС+"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
		КонецЕсли;
	КонецЦикла;
	
	Если СчЗапросов > 0 Тогда
	
		МРезультатовУточнений = Запрос.ВыполнитьПакет();
		
		СчЗапросов = 0;
		Пока СчЗапросов < МРезультатовУточнений.Количество() Цикл
			Если НЕ МРезультатовУточнений[СчЗапросов].Пустой() Тогда
				Возврат МРезультатовУточнений[СчЗапросов].Выгрузить()[0].ЗначениеСкидкиНаценки;
			КонецЕсли;
			СчЗапросов = СчЗапросов + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура рекурсивно обходит дерево и производит расчет
// скидок снизу-вверх: от подчиненного элемента дерева к родителю.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры, РассчетБонусов = Ложь)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			// это самый верхний уровень
			КЧ = Новый КвалификаторыЧисла(15,2);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповЧисло = Новый ОписаниеТипов(Массив, , ,КЧ);
			СтрокаДерева.ТаблицаТоваров = Параметры.Товары.Скопировать();
		Иначе
			СтрокаДерева.ТаблицаТоваров = СтрокаДерева.Родитель.ТаблицаТоваров.Скопировать();
		КонецЕсли;
	
		Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Округление Тогда
			// Округления будут рассчитаны отдельно, после всех скидок
			Продолжить;
		ИначеЕсли РассчетБонусов И НЕ СтрокаДерева.ЭтоПравилоНачисленияБонусов Тогда
			// Считаем бонусы, пропустим все скидки
			Продолжить;
		ИначеЕсли НЕ РассчетБонусов И СтрокаДерева.ЭтоПравилоНачисленияБонусов Тогда
			// Считаем скидки, пропустим все бонусы
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РассчитатьСкидкиРекурсивно(СтрокаДерева, Параметры, РассчетБонусов);
			
			// Скидки по подчиненным элементам рассчитаны.
			// Рассчитываем скидки по группе совместного применения (родителю).
			РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры, , , РассчетБонусов);
			
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
				// Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
				// т.к. последовательное применение групп также предполагает, что все последующие скидки
				// будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из СтрокаДерева.Родитель.ТаблицаТоваров Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);
					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл
						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;
					КонецЦикла;
				КонецЦикла;
			ИначеЕсли СтрокаДерева.Родитель = Неопределено
				И Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить() = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
				// Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
				// т.к. последовательное применение предполагает, что все последующие скидки
				// будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из Параметры.Товары Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);
					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл
						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			РассчитатьСкидку(СтрокаДерева, Параметры);
			
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение
				И СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
				// Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
				// т.к. последовательное применение предполагает, что все последующие скидки
				// будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из СтрокаДерева.Родитель.ТаблицаТоваров Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);
					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл
						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;
					КонецЦикла;
				КонецЦикла;
			ИначеЕсли СтрокаДерева.Родитель = Неопределено
				И Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить() = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение
				И СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
				// Нужно уменьшить суммы в таблице товаров в строке родителя на сумму текущей скидки
				// т.к. последовательное применение предполагает, что все последующие скидки
				// будут рассчитываться от суммы с учетом уже предоставленных скидок данной группы
				Для Каждого СтрокаТовараРодителя Из Параметры.Товары Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовараРодителя.КлючСвязи);
					СтруктураПоиска.Вставить("Действует", Истина);
					СтрокиРассчитанныхСкидок = СтрокаДерева.ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
					Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл
						СтрокаТовараРодителя.Сумма = СтрокаТовараРодителя.Сумма - НайденнаяСтрока.Сумма;
						СтрокаТовараРодителя.СуммаСкидки = СтрокаТовараРодителя.СуммаСкидки + НайденнаяСтрока.Сумма;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСкидкиРекурсивно()

Процедура РассчитатьОкругления(ДеревоСкидок, Параметры, ТаблицаДанных)
	
	ДеревоСкидок.Строки.Сортировать("ОбластьПредоставления Убыв, ПорядокОкругления Убыв");
	ПорядокОкругления = 0;
	ЕстьПоДокументу = Ложь;
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.СпособПредоставления <> Перечисления.СпособыПредоставленияСкидокНаценок.Округление Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Истина Тогда
			Продолжить;
		КонецЕсли;
		ТекущийПорядокОкругления = Число(Строка(СтрокаДерева.ПорядокОкругления));
		
		Если СтрокаДерева.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
			ЕстьПоДокументу = Истина;
			Если ТекущийПорядокОкругления > ПорядокОкругления Тогда
				ПорядокОкругления = ТекущийПорядокОкругления;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли СтрокаДерева.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке
			И ЕстьПоДокументу Тогда
			Продолжить;
		КонецЕсли;
		
		ВариантСовместногоПрименения = Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить();
		Если ВариантСовместногоПрименения <> Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		
			Для Каждого СтрокаТовара Из СтрокаДерева.ТаблицаТоваров Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовара.КлючСвязи);
				СтруктураПоиска.Вставить("Действует", Истина);
				СтрокиРассчитанныхСкидок = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрока Из СтрокиРассчитанныхСкидок Цикл
					СтрокаТовара.СуммаСкидки = СтрокаТовара.СуммаСкидки + НайденнаяСтрока.Сумма;
				КонецЦикла;
				СтрокаТовара.Сумма = СтрокаТовара.ЦенаЗаУпаковку*СтрокаТовара.Количество - СтрокаТовара.СуммаСкидки - СтрокаТовара.СуммаСкидкиНаценки;
			КонецЦикла;
		
		КонецЕсли; 
		
		РассчитатьСкидку(СтрокаДерева, Параметры);
		
		// Добавим скидки/наценки по округлениям в общую таблицу скидок
		Для Каждого СтрокаТаблицы Из СтрокаДерева.ТаблицаДанных Цикл
			НоваяСтрокаТЗ = ТаблицаДанных.Добавить();
			НоваяСтрокаТЗ.КлючСвязи = СтрокаТаблицы.КлючСвязи;
			НоваяСтрокаТЗ.Сумма = СтрокаТаблицы.Сумма;
			НоваяСтрокаТЗ.Действует = Истина;
			
			НоваяСтрокаТЗ.Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСкидкиРекурсивно()

// Функция готовит пустую таблицу сработавших скидок, которая будет наполняться в процессе расчета
// 
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* КлючСвязи - Число - Ключ связи скидки со строкой товаров. 
//							Принимает значение -1 для скидки, предоставляемой целиком на документ, например, подарок, представленный в отдельной табличной части.
//		* СкидкаНаценка - СправочникСсылка.АвтоматическиеСкидки - Сработавшая скидка/наценка
//		* Сумма - Число - Сумма предоставленной скидки/наценки
//		* СуммаРучнойСкидки - Число - Сумма ручной скидки, предоставленной продавцом, или по дисконтной карте (старый механизм, сохраненный для совместимости)
//		* ОграниченаМинимальнойЦеной - Булево - Признак сработавшего ограничения размера скидки минимальной ценой продажи
//		* ИзменитьРучнуюСкидку - Булево - Признак необходимости изменить ручную скидку по результатам расчета
//		* ЗначениеСкидкиНаценки - Число - Процент скидки, которая была предоставлена
//		* Комментарий - Строка - Текстовое пояснение алгоритма расчета скидки, для последующего анализа
Функция ПустаяТаблицаСкидокНаценок() Экспорт
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КлючСвязи",					Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СкидкаНаценка",				Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	ТЗ.Колонки.Добавить("Сумма",						Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СуммаРучнойСкидки",			Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ОграниченаМинимальнойЦеной",	Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("ИзменитьРучнуюСкидку",			Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("ЗначениеСкидкиНаценки",		Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Комментарий",					Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ТаблицаСообщений",				Новый ОписаниеТипов("ТаблицаЗначений"));
	ТЗ.Колонки.Добавить("ТаблицаПодарков",				Новый ОписаниеТипов("ТаблицаЗначений"));
	Возврат ТЗ;
КонецФункции
	
// Функция производит полный расчет скидок в дереве.
//	Параметры:
//	
//	Возвращаемое значение:
//	Структура:
//		* ДеревоСкидок - см. ПолучитьДеревоСкидок - Иерархия действующих скидок, с учетом групп совместного применения скидок 
//		* ТаблицаСкидкиНаценки - см. ПустаяТаблицаСкидокНаценок - Таблица расчитанных скидок, которые необходимо применить к документу
//		* ТаблицаСообщений - см. ПустаяТаблицаСообщений - Таблица сообщений, которые необходимо показать пользователю после выполнения расчета скидок
//		* ТаблицаПодарков - см. СкидкиНаценкиСервер.ПустаяТаблицаПодарокв - Список подарков, которые следует выдать покупателю. Возможно наличие в списке подарков, которые предварительно нужно выбрать.
//		* ТаблицаБонусыКНачислению - см. ПустаяТаблицаБонусов - Бонусы, которые следует начислить на карту покупателя.
Функция СтруктураРассчитанныхСкидок(ДеревоСкидок, Параметры)
	
	ВозвращаемыеДанные = Новый Структура;
	
	КЧ = Новый КвалификаторыЧисла(15,2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧисло = Новый ОписаниеТипов(Массив, , ,КЧ);
	Параметры.Товары.Колонки.Добавить("СуммаСкидки", ОписаниеТиповЧисло);
	РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры);
	
	// На верхнем уровне...
	ТаблицаДанных = Неопределено;
	ТаблицаПодарков = ПустаяТаблицаПодарков();
	ТаблицаСообщений = ПустаяТаблицаСообщений();
	ТочкаВыдачиРасчет = Перечисления.ТочкиВыдачиСообщенияКассиру.ВМоментРасчетаСкидок;
	РассчитатьСкидкиПоГруппеСовместногоПрименения(ДеревоСкидок, Параметры, Истина, ТаблицаДанных);
	
	// Начисления бонусов после всех скидок
	                                   
	ЦенообразованиеСервер.ИзменитьСкидкиЦеныПоМинимальномуВидуЦен(ДеревоСкидок, Параметры, ТаблицаДанных);
	
	// Округления после расчета скидок и совместного применения
	РассчитатьОкругления(ДеревоСкидок, Параметры, ТаблицаДанных);
	ТЗ = ПустаяТаблицаСкидокНаценок();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Для Каждого СтрокаСкидкиНаценки Из СтрокаТаблицы.Расшифровка Цикл
			НоваяСтрока								= ТЗ.Добавить();
			НоваяСтрока.КлючСвязи					= СтрокаТаблицы.КлючСвязи;
			НоваяСтрока.СкидкаНаценка				= СтрокаСкидкиНаценки.СкидкаНаценка;
			НоваяСтрока.Сумма						= СтрокаСкидкиНаценки.Сумма;
			НоваяСтрока.СуммаРучнойСкидки 			= СтрокаСкидкиНаценки.СуммаРучнойСкидки;
			НоваяСтрока.ОграниченаМинимальнойЦеной	= СтрокаСкидкиНаценки.ОграниченаМинимальнойЦеной;
			НоваяСтрока.ЗначениеСкидкиНаценки		= СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки;
			НоваяСтрока.Комментарий					= СтрокаСкидкиНаценки.Комментарий;
		КонецЦикла;
		Для Каждого СтрокаПодарка Из СтрокаТаблицы.ТаблицаПодарков Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПодарков.Добавить(), СтрокаПодарка);
		КонецЦикла;
		Для Каждого СтрокаСообщения Из СтрокаТаблицы.ТаблицаСообщений Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСообщений.Добавить(), СтрокаСообщения);
		КонецЦикла;
	КонецЦикла;
	
	ТЗ.Свернуть("КлючСвязи, СкидкаНаценка, ОграниченаМинимальнойЦеной, ЗначениеСкидкиНаценки, Комментарий", "Сумма");
	ТаблицаСообщений.Сортировать("СкидкаНаценка, КлючСвязи Возр");
	
	ДеревоРезультатТолькоСкидки = ДеревоСкидок.Скопировать();
	УдалитьВетвиБонусовРекурсивно(ДеревоРезультатТолькоСкидки);
	ВозвращаемыеДанные.Вставить("ДеревоСкидок", 		ДеревоРезультатТолькоСкидки);
	ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
	ВозвращаемыеДанные.Вставить("ТаблицаСообщений", 	ТаблицаСообщений);
	ВозвращаемыеДанные.Вставить("ТаблицаПодарков", 		ТаблицаПодарков);
	
	
		
	Если Параметры.РассчитыватьБонусы Тогда
		
		// Для расчета бонусов в этом же прогоне необходимо разнести сумму скидки по таблице товаров
		// Для этого применим скидку к виртуальному объекту, распределив таким образом скидку по документу
		// Тогда можно корректно рассчитать бонусы
		ИмяТЧЗапасы = "Запасы";
		Если ТипЗнч(Параметры.Регистратор) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ИмяТЧЗапасы = "РаботыИУслуги";
		ИначеЕсли ТипЗнч(Параметры.Регистратор) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Если Ложь Тогда
				ИмяТЧЗапасы = "Работы";
			КонецЕсли;
		КонецЕсли;
		ВиртуальныйОбъект = Новый Структура();
		ВиртуальныйОбъект.Вставить("Подарки", ТаблицаПодарков.Скопировать());
		ВиртуальныйОбъект.Вставить("СкидкиНаценки", ТЗ.Скопировать()); 
		ВиртуальныйОбъект.Вставить("Ссылка", Параметры.Регистратор);
		ВиртуальныйОбъект.Вставить("СкидкиРассчитаны", Ложь);
		ВиртуальныйОбъект.Вставить("СуммаВключаетНДС" , Параметры.СуммаВключаетНДС);
		ВиртуальныйОбъект.Вставить("ПроцентСкидкиПоДисконтнойКарте" , ДисконтныеКартыУНФВызовСервера.ВычислитьПроцентСкидкиПоДисконтнойКарте(Параметры.ТекущаяДата, Параметры.ДисконтнаяКарта));
		ВиртуальныйОбъект.Вставить("ПримененныеПромокоды", Параметры.ПримененныеПромокоды);
		
		// Сумма бонуса считается до переноса подарка в продажи. 
		// Даже если скидка, соответствующая стоимости подарка будет распределена на все товары чека
		// Таким образом, при пробитии двух идентичных чеков, когда в одном чеке мы выдаем подарок с распределением суммы
		// скидки по строкам чека А в другом чеке подарка не выдается, сумма бонусов должна быть идентичной, не зависимо от
		// выдачи или не выдачи подарков
		ВиртуальныйОбъект.Вставить("ОтменаПереносаПодарковВПродажи", Истина);
		
		// Для заказ-наряда таблица содержит строки и с товарами и с работами, отдельную ТЧ вставлять не требуется
		ВиртуальныйОбъект.Вставить(ИмяТЧЗапасы, Параметры.Товары.Скопировать());
		// Добавим стандартные поля ТЧ, необходимые для применения скидки к объекту 
		ВиртуальныйОбъект[ИмяТЧЗапасы].Колонки.Добавить("ПродажаПодарка", Новый ОписаниеТипов("Булево"));		
		ВиртуальныйОбъект[ИмяТЧЗапасы].Колонки.Добавить("ПроцентСкидкиНаценки", Новый ОписаниеТипов("Число"));
		ВиртуальныйОбъект[ИмяТЧЗапасы].Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
		ВиртуальныйОбъект[ИмяТЧЗапасы].Колонки.Добавить("ПроцентАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
		ВиртуальныйОбъект[ИмяТЧЗапасы].Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
		ВиртуальныйОбъект[ИмяТЧЗапасы].Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
		ВиртуальныйОбъект[ИмяТЧЗапасы].Колонки.Добавить("Всего", Новый ОписаниеТипов("Число"));
		ВиртуальныйОбъект[ИмяТЧЗапасы].ЗагрузитьКолонку(ВиртуальныйОбъект[ИмяТЧЗапасы].ВыгрузитьКолонку("ЦенаЗаУпаковку"), "Цена");

		// Если бонусы считаются до всех скидок, то не будем применять скидки к виртуальному объекту
		Если НЕ (Параметры.Свойство("НачислятьБонусыДоСкидок") И Параметры.НачислятьБонусыДоСкидок) Тогда
			Для Каждого СтрокаЗапаса Из ВиртуальныйОбъект[ИмяТЧЗапасы] Цикл
				// В таблице сумма - до применения всех скидок, включая ручные и оплату бонусами.
				НоваяСумма = СтрокаЗапаса.Цена * СтрокаЗапаса.Количество - СтрокаЗапаса.СуммаСкидкиНаценки;
				// При расчете начисления бонусных баллов, когда учитываются суммы скидки, оплата бонусными баллами тоже считается скидкой 
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗапаса,"СуммаСкидкиОплатыБонусом") Тогда
					НоваяСумма = НоваяСумма - СтрокаЗапаса.СуммаСкидкиОплатыБонусом;
				КонецЕсли;
				СтрокаЗапаса.Сумма = НоваяСумма;
			КонецЦикла;
			ПрименитьРассчитанныеСкидкиКОбъекту(ВиртуальныйОбъект, ВозвращаемыеДанные, ИмяТЧЗапасы);
		КонецЕсли;
		// Дерево скидок уже скопировано, используем для расчета копию, но само дерево уже не нужно, модифицированное дерево
		// будет уничтожено.
		ПрименитьТаблицуТоваровКДеревуСкидокРекурсивно(ДеревоСкидок, ВиртуальныйОбъект[ИмяТЧЗапасы]);
		Параметры.Товары = ВиртуальныйОбъект[ИмяТЧЗапасы];

		РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры, Истина);
		ТаблицаДанныхРасчетаБонусов = Неопределено;
		РассчитатьСкидкиПоГруппеСовместногоПрименения(ДеревоСкидок, Параметры, Истина, ТаблицаДанныхРасчетаБонусов, Истина);
				
		ТаблицаБонусов = ПустаяТаблицаБонусов();
		Для Каждого СтрокаРассчитанногоБонуса Из ТаблицаДанныхРасчетаБонусов Цикл
			Для Каждого СтрокаНачисления Из СтрокаРассчитанногоБонуса.Расшифровка Цикл
				ПравилоНачисления = СтрокаНачисления.СкидкаНаценка;
				
				НоваяСтрокаТЗ = ТаблицаБонусов.Добавить();
				НоваяСтрокаТЗ.КлючСвязи = СтрокаРассчитанногоБонуса.КлючСвязи;
				НоваяСтрокаТЗ.КоличествоБонусныхБаллов = СтрокаНачисления.Сумма;
				НоваяСтрокаТЗ.СкидкаНаценка = ПравилоНачисления;
				НоваяСтрокаТЗ.РеквизитДопУпорядочивания = ПравилоНачисления.УдалитьРеквизитДопУпорядочивания;
				
				БонуснаяПрограмма = ПравилоНачисления.БонуснаяПрограмма;
				Если Не БонуснаяПрограмма.ОтсрочкаНачисления ИЛИ БонуснаяПрограмма.КоличествоПериодовОтсрочки = 0 Тогда
					НоваяСтрокаТЗ.ДатаНачисления = Параметры.ТекущаяДата;
				Иначе
					НоваяСтрокаТЗ.ДатаНачисления = РаботаСБонусами.ПрибавитьКДатеПериод(
																	Параметры.ТекущаяДата,
																	БонуснаяПрограмма.КоличествоПериодовОтсрочки,
																	БонуснаяПрограмма.ПериодичностьОтсрочки);
				КонецЕсли;
				Если Не БонуснаяПрограмма.СписаниеНеиспользованных ИЛИ БонуснаяПрограмма.КоличествоПериодовСписания = 0 Тогда
					
				Иначе
					НоваяСтрокаТЗ.ДатаСписания = РаботаСБонусами.ПрибавитьКДатеПериод(
																	НоваяСтрокаТЗ.ДатаНачисления,
																	БонуснаяПрограмма.КоличествоПериодовСписания,
																	БонуснаяПрограмма.ПериодичностьСписания);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ВозвращаемыеДанные.Вставить("ТаблицаБонусыКНачислению", ТаблицаБонусов);
		
	КонецЕсли;  

	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

// Функция производит анализ примененных скидок, выбирает из них скидки со способом предоставления - сообщение, и
// составляет таблицу сообщений для вывода кассиру
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. ПустаяТаблицаСообщений
//
Функция ПолучитьТаблицуСообщений(ТаблицаСкидок, Знач ТочкаВыводаСообщений = Неопределено)Экспорт
	Если ТочкаВыводаСообщений = неопределено Тогда 
		ТочкаВыводаСообщений = Перечисления.ТочкиВыдачиСообщенияКассиру.ВМоментРасчетаСкидок;
	КонецЕсли;
	
	ИтоговаяТаблицаСообщений = ПустаяТаблицаСообщений(); 
	
	Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
		ПараметрыСкидки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(строкаСкидки.СкидкаНаценка, "СпособПредоставления, МоментВыдачиСообщения, ТекстСообщения");
		Если ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение 
		И ПараметрыСкидки.МоментВыдачиСообщения = ТочкаВыводаСообщений Тогда
			строкаСообщения = ИтоговаяТаблицаСообщений.Добавить();
			ЗаполнитьЗначенияСвойств(строкаСообщения, строкаСкидки);
			строкаСообщения.ТекстСообщения = ПараметрыСкидки.ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговаяТаблицаСообщений;
КонецФункции

// Функция возвращает единую таблицу подарков, которые требуется выдать, согласно расчету. 
// Данные о подарках извлекаются из каждой строки сработавшей скидки общей таблицы скидок
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. ПустаяТаблицаПодарков
//
Функция ПолучитьТаблицуПодарков(ТаблицаСкидок)Экспорт
	
	ИтоговаяТаблицаПодарков = ПустаяТаблицаПодарков(); 
	
	Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
		Для Каждого строкаПодарка Из СтрокаСкидки.ТаблицаПодарков Цикл
			НоваяСтрокаПодарка = ИтоговаяТаблицаПодарков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПодарка, строкаПодарка);
			//строкаСообщения.ТекстСообщения = ПараметрыСкидки.ТекстСообщения;
		КонецЦикла;
	КонецЦикла;
	Возврат ИтоговаяТаблицаПодарков;
КонецФункции

// Возвращает пустую таблицу подарков.
//
// Возвращаемое значение:
//  ТаблицаЗначений :
//  	* КлючСвязи - Число
//  	* СкидкаНаценка - СправочникСсылка.АвтоматическиеСкидки
//  	* Номенклатура - СправочникСсылка.Номенклатура
//  	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//  	* Количество - Число
//  	* Цена - Число
//  	* Сумма - Число
//  	* СтруктурнаяЕдиница - СправочникСсылка.СтруктурныеЕдиницы	
//  	* ЕдиницаИзмерения 	- СправочникСсылка.ЕдиницыИзмерения
//  						- СправочникСсылка.КлассификаторЕдиницИзмерения
//  						- Неопределено
//  	* ПодарокИзСписка - Булево
Функция ПустаяТаблицаПодарков() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КлючСвязи"         , ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	Таблица.Колонки.Добавить("СкидкаНаценка"     , Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	Таблица.Колонки.Добавить("Номенклатура"      , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика"    , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Количество"        , ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Таблица.Колонки.Добавить("Цена"              , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Таблица.Колонки.Добавить("Сумма"             , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Таблица.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТипыЕдиницыИзмерения = Новый Массив;
	ТипыЕдиницыИзмерения.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	ТипыЕдиницыИзмерения.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмерения"  , Новый ОписаниеТипов(ТипыЕдиницыИзмерения));
	Таблица.Колонки.Добавить("ПодарокИзСписка"	 , Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

// Возвращает пустую таблицу сообщений.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//  	* КлючСвязи - Число
//		* СкидкаНаценка - СправочникСсылка.АвтоматическиеСкидки
//		* МоментСообщения - ПеречислениеСсылка.ТочкиВыдачиСообщенияКассиру
//		* ТекстСообщения - Строка
// 
Функция ПустаяТаблицаСообщений() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КлючСвязи"     , ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	Таблица.Колонки.Добавить("СкидкаНаценка" , Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	Таблица.Колонки.Добавить("МоментСообщения" , Новый ОписаниеТипов("ПеречислениеСсылка.ТочкиВыдачиСообщенияКассиру"));
	Таблица.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ПрименитьТаблицуТоваровКДеревуСкидокРекурсивно(ДеревоСкидок, ТаблицаТоваров)
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		СтрокаДерева.ТаблицаТоваров = ТаблицаТоваров;
		ПрименитьТаблицуТоваровКДеревуСкидокРекурсивно(СтрокаДерева, ТаблицаТоваров);
	КонецЦикла;
КонецПроцедуры

// Возвращает пустую таблицу сообщений.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//	* КлючСвязи - Число
//	* СкидкаНаценка - СправочникСсылка.АвтоматическиеСкидки
//	* КоличествоБонусныхБаллов - Число
//	* ДатаНачисления - Дата
//	* ДатаСписания - Дата
//	* РеквизитДопУпорядочивания - Число  
// 
Функция ПустаяТаблицаБонусов() Экспорт		
	ТаблицаБонусов = Новый ТаблицаЗначений;
	ТаблицаБонусов.Колонки.Добавить("КлючСвязи",					Новый ОписаниеТипов("Число"));
	ТаблицаБонусов.Колонки.Добавить("СкидкаНаценка",				Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	ТаблицаБонусов.Колонки.Добавить("КоличествоБонусныхБаллов",		Новый ОписаниеТипов("Число"));
	ТаблицаБонусов.Колонки.Добавить("ДатаНачисления",				Новый ОписаниеТипов("Дата"));
	ТаблицаБонусов.Колонки.Добавить("ДатаСписания",					Новый ОписаниеТипов("Дата"));
	ТаблицаБонусов.Колонки.Добавить("РеквизитДопУпорядочивания",	Новый ОписаниеТипов("Число"));
	Возврат ТаблицаБонусов;
КонецФункции

Процедура УдалитьВетвиБонусовРекурсивно(ДеревоСкидок)
	
	МассивСтрокУдалить = Новый Массив;
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		Если СтрокаДерева.ЭтоПравилоНачисленияБонусов Тогда
			МассивСтрокУдалить.Добавить(СтрокаДерева);
		Иначе
			УдалитьВетвиБонусовРекурсивно(СтрокаДерева);
		КонецЕсли;		
	КонецЦикла;
	Для Каждого СтрокаУдалить Из МассивСтрокУдалить Цикл
		ДеревоСкидок.Строки.Удалить(СтрокаУдалить);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустую таблицу промокодов.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//	* Промокод - ОпределяемыйТип.Промокод
//	* УсловиеПредоставленияСкидки - СправочникСсылка.УсловияПредоставленияСкидокНаценок
//	* СкидкаПредоставлена - Число
//	* ЭтоАктивацияПромокода - Булево
// 
Функция ПустаяТаблицаПромокодов() Экспорт
	ТаблицаБонусов = Новый ТаблицаЗначений;
	ТаблицаБонусов.Колонки.Добавить("Промокод",						Метаданные.ОпределяемыеТипы.Промокод.Тип);
	ТаблицаБонусов.Колонки.Добавить("УсловиеПредоставленияСкидки",	Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	ТаблицаБонусов.Колонки.Добавить("СкидкаПредоставлена",			Новый ОписаниеТипов("Число"));
	ТаблицаБонусов.Колонки.Добавить("ЭтоАктивацияПромокода",		Новый ОписаниеТипов("Булево"));
	Возврат ТаблицаБонусов;
КонецФункции

// Возвращает пустую таблицу выбранных управляемых скидок.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//	* КлючСвязи - Число
//	* СкидкаНаценка - СправочникСсылка.АвтоматическиеСкидки
Функция ПустаяТаблицаУправляемыхСкидок() Экспорт
	ТаблицаБонусов = Новый ТаблицаЗначений;
	ТаблицаБонусов.Колонки.Добавить("СкидкаНаценка",	Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	ТаблицаБонусов.Колонки.Добавить("КлючСвязи",		ОбщегоНазначения.ОписаниеТипаСтрока(5));
	Возврат ТаблицаБонусов;
КонецФункции

// Возвращает структуру параметров для расчета значения скидки. 
// Вызывается из расширения, подключенного для реализации произвольного алгоритма расчета скидки
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Содержит необходимые для рассчета значения скидки данные, а так же значения дополнительных реквизитов текушей скидки:
//  	* Товары - ТаблицаЗначений
//		* ЭтоУмножение - Булево
//		* ТаблицаСообщений - см. ПустаяТаблицаСообщений
//		* ТаблицаПодарков - см. ПустаяТаблицаПодарков	
//		* СтрокиСНевыполненнымиУсловиями - Массив Из Число 
//		* ЗначениеСкидкиНаценки - Число
//		* ОбластьПредоставления - ПеречислениеСсылка.ВариантыОбластейОграниченияСкидокНаценок
Функция ПолучитьПараметрырасчетаПроизвольнойСкидки(СтрокаДерева, ПараметрыРасчета) Экспорт 
	
	// Получение дополнительных реквизитов скидки, которые могут потребоваться при расчете
	Результат = Новый Структура;
	ПараметрыСкидки = ПараметрыРасчета.СкидкиНаценки.Найти(СтрокаДерева.СкидкаНаценка, "СкидкаНаценка");
	Если УправлениеСвойствами.ИспользоватьДопРеквизиты(СтрокаДерева.СкидкаНаценка) Тогда
		ДополнительныеРеквизиты = УправлениеСвойствами.СвойстваОбъекта(СтрокаДерева.СкидкаНаценка, Истина, Ложь);
		ТаблицаЗначенийРеквизитов = УправлениеСвойствами.ЗначенияСвойств(СтрокаДерева.СкидкаНаценка, Истина, Ложь, ДополнительныеРеквизиты);
		Для Каждого Реквизит Из ДополнительныеРеквизиты Цикл
			НайденныеЗначения = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("Свойство", Реквизит));
			Если НайденныеЗначения.Количество() Тогда
				Результат.Вставить(НайденныеЗначения[0].ИмяСвойства, НайденныеЗначения[0].Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Исходные данные для расчета
	Товары = СтрокаДерева.ТаблицаТоваров;
	Если СтрокаДерева.Родитель = Неопределено Тогда
		ЭтоУмножение = Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить() = ПредопределенноеЗначение("Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Умножение");
	Иначе
		ЭтоУмножение = СтрокаДерева.Родитель.ВариантСовместногоПрименения = ПредопределенноеЗначение("Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Умножение");
	КонецЕсли;
	ТаблицаСообщений 	= СкидкиНаценкиСервер.ПустаяТаблицаСообщений();
	ТаблицаПодарков 	= СкидкиНаценкиСервер.ПустаяТаблицаПодарков();

	ДействуетБезусловно = СтрокаДерева.ПараметрыУсловий.УсловияВыполнены И СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Количество() = 0;
	СтрокиСНевыполненнымиУсловиями = Новый Массив;
	Для Каждого Товар Из Товары Цикл
		Если НЕ ДействуетБезусловно Тогда
			ОтборУсловийВСтроке = Новый Структура("ОбластьОграничения", ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке"));
			Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(ОтборУсловийВСтроке).Количество() > 0 Тогда
				Если СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) = Неопределено Тогда
					СтрокиСНевыполненнымиУсловиями.Добавить(Товар.КлючСвязи);;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
    Результат.Вставить("Товары", Товары);
	Результат.Вставить("ЭтоУмножение", ЭтоУмножение);
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаПодарков", ТаблицаПодарков);	
	Результат.Вставить("СтрокиСНевыполненнымиУсловиями", СтрокиСНевыполненнымиУсловиями);
	Результат.Вставить("ЗначениеСкидкиНаценки", ПараметрыСкидки.ЗначениеСкидкиНаценки);
	Результат.Вставить("ОбластьПредоставления", ПараметрыСкидки.ОбластьПредоставления);

	Возврат Результат;
	
Конецфункции

#КонецОбласти

#Область ПроцедурыПроверкиУсловийСкидокНаценок

// Функция выполняет проверку выполнения условий скидок.
//
Функция ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия, ПараметрыРасчета)
	
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияВыполнены", Истина);
	СтрокаДерева.ПараметрыУсловий.Вставить("КодыСтрок",        Новый Массив);
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияПоСтроке",  Новый Структура);
	СтрокаДерева.ПараметрыУсловий.Вставить("ТаблицаУсловий",   Новый ТаблицаЗначений);
	
	// Служебная таблица для временного хранения результатов проверки условий предоставления
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("УсловиеПредоставления", Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ОбластьОграничения",    Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбластейОграниченияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("Выполнено");
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("КратностьВыполнения", Новый ОписаниеТипов("Число"));
	
	// Таблица применяется для проверки выполнения условий по строке.
	// Если у скидки существуют условия по строке то для этих условий в таблице будет создана колонка
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("ТаблицаПроверкиУсловий", Новый ТаблицаЗначений);
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить("КлючСвязи");
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Индексы.Добавить("КлючСвязи");
	
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("СоответствиеУсловийКолонкамТаблицыПроверкиУсловий", Новый Соответствие);
	
	// Служебные параметры
	ИспользуетсяТаблицаПроверкиУсловий      = Ложь;
	//ЭтоПервоеУсловиеТаблицыПроверкиУсловий  = Истина;
	КоличествоКолонокТаблицыПроверкиУсловий = 0;
	КоличествоВыполненийУсловияВсего = неопределено;
	
	УсловиеАктивацииВручную = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаАктивациюВручную");
	
	// Обходим все условия одной скидки.
	Для Каждого Условие Из СтрокаДерева.УсловияПредоставления Цикл
		
		КоличествоВыполненийУсловия = неопределено;
		
		СтрокаТаблицаУсловий = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Добавить();
		СтрокаТаблицаУсловий.УсловиеПредоставления = Условие.УсловиеПредоставления;
		СтрокаТаблицаУсловий.ОбластьОграничения    = Условие.ОбластьОграничения;
		
		УсловиеВыполненоДляДругойСкидки = Ложь;
		Если Условие.УсловиеПредоставления.УсловиеПредоставления = УсловиеАктивацииВручную 
			И ПараметрыРасчета.Свойство("ВыбранныеУправляемыеСкидки")Тогда						
			ВыбранныеСкидки = ПараметрыРасчета.ВыбранныеУправляемыеСкидки.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
			Если ВыбранныеСкидки.Количество() = 0 Тогда				
				// Возможно, несколько управляемых скидок используют одно и то же условие "за активацию вручную".
				// В этом случае, сработают все скидки, связанные с этим условием.
				// Однако, пользователь выбрал конкретную скидку - проверим, ее ли активировали вручную на самом деле.
				УсловиеВыполненоДляДругойСкидки = Истина;
			КонецЕсли;
		КонецЕсли;

		НайденныеСтроки = ВыполненныеУсловия.НайтиСтроки(Новый Структура("Ссылка", Условие.УсловиеПредоставления));
		
		Если НайденныеСтроки.Количество() = 0 ИЛИ УсловиеВыполненоДляДругойСкидки Тогда
			
			// Условие не выполнено.
			СтрокаТаблицаУсловий.Выполнено = Ложь;
			
			СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;
			
		ИначеЕсли НайденныеСтроки.Количество() = 1 И НайденныеСтроки[0].КлючСвязи = -1 Тогда
			
			СтрокаТаблицаУсловий.Выполнено = Истина;
			// Условие выполнено. Условие не зависит от конкретных строк.
			Если Не НайденныеСтроки[0].КоличествоКомплектов = 0 Тогда
				Если КоличествоВыполненийУсловия = Неопределено Тогда
					КоличествоВыполненийУсловия = НайденныеСтроки[0].КоличествоКомплектов;
				Иначе
					КоличествоВыполненийУсловия = Мин(КоличествоВыполненийУсловия, НайденныеСтроки[0].КоличествоКомплектов);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицаУсловий.Выполнено = Истина;
			// Условие выполнено. Найдено несколько строк, прошедших проверку условий.
			
			КоличествоКолонокТаблицыПроверкиУсловий = КоличествоКолонокТаблицыПроверкиУсловий + 1;
			ЗаголовокКолонки = "Условие" + Формат(КоличествоКолонокТаблицыПроверкиУсловий,"ЧГ=");
			ЗаголовокКолонкиКратность = ЗаголовокКолонки + "Кратность";
			
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Вставить(Условие.УсловиеПредоставления, ЗаголовокКолонки);
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить(ЗаголовокКолонки, Новый ОписаниеТипов("Булево"));
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить(ЗаголовокКолонкиКратность, Новый ОписаниеТипов("Число"));
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ИспользуетсяТаблицаПроверкиУсловий = Истина;
				
				НайденныеСтрокиТаблицыПроверкиУсловий = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Найти(НайденнаяСтрока.КлючСвязи, "КлючСвязи");
				Если НайденныеСтрокиТаблицыПроверкиУсловий <> Неопределено Тогда
					НайденныеСтрокиТаблицыПроверкиУсловий[ЗаголовокКолонки] = Истина;
					НайденныеСтрокиТаблицыПроверкиУсловий[ЗаголовокКолонкиКратность] = НайденнаяСтрока.КоличествоКомплектов;					
				Иначе
					НоваяСтрока1 = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Добавить();
					НоваяСтрока1.КлючСвязи = НайденнаяСтрока.КлючСвязи;
					НоваяСтрока1[ЗаголовокКолонки] = Истина;
					НоваяСтрока1[ЗаголовокКолонкиКратность] = НайденнаяСтрока.КоличествоКомплектов;
				КонецЕсли;
				
				Если НЕ НайденнаяСтрока.КоличествоКомплектов = 0 Тогда
					Если КоличествоВыполненийУсловия = Неопределено Тогда
						КоличествоВыполненийУсловия = НайденнаяСтрока.КоличествоКомплектов;
					Иначе
						КоличествоВыполненийУсловия = Мин(КоличествоВыполненийУсловия, НайденнаяСтрока.КоличествоКомплектов);
					КонецЕсли;
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаТаблицаУсловий.КратностьВыполнения = КоличествоВыполненийУсловия;
		Если КоличествоВыполненийУсловияВсего = Неопределено И НЕ КоличествоВыполненийУсловия = Неопределено Тогда
			КоличествоВыполненийУсловияВсего = КоличествоВыполненийУсловия;
		ИначеЕсли НЕ КоличествоВыполненийУсловия = Неопределено Тогда
			КоличествоВыполненийУсловияВсего = Мин(КоличествоВыполненийУсловияВсего, КоличествоВыполненийУсловия);
		КонецЕсли;
		
		
	КонецЦикла;
	
	// Заполним коды строк...
	Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
		
		Если СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Количество() > 0 Тогда
			
			Отбор = Новый Структура;
			Для Каждого КлючИЗначение Из СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий Цикл
				Отбор.Вставить(КлючИЗначение.Значение, Истина);
			КонецЦикла;
			
			НайденныеСтроки = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.НайтиСтроки(Отбор);
			Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
				СтрокаДерева.ПараметрыУсловий.КодыСтрок.Добавить(СтрокаТЗ.КлючСвязи);
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаДерева.КоличествоВыполненийУсловия = КоличествоВыполненийУсловияВсего;
		
	КонецЕсли;

КонецФункции // ПроверитьУсловия()

// Функция выполняет заполнение служебных реквизитов у строк дерева скидок.
//
Процедура ПроверитьУсловияРекурсивно(ДеревоСкидок, ВыполненныеУсловия, ПараметрыРасчета)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПроверитьУсловияРекурсивно(СтрокаДерева, ВыполненныеУсловия, ПараметрыРасчета);
			
		Иначе
			
			ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия, ПараметрыРасчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьУсловияРекурсивно()

#КонецОбласти

#Область ПроцедурыРасчетаСкидокНаценокПоДокументам

// Функция выполняет расчет скидок (наценок) по переданным параметрам.
//	Параметры:
// 		ПараметрыРасчета - Структура - Структура, представляющая данные документа для расчета
//		ВходныеПараметры - Структура - Параметры, как именно следует выполнить расчет
// 
//	Возвращаемое значение: 
//		- см. СтруктураРассчитанныхСкидок
Функция РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры) Экспорт
	
	ПервыйПакетЗапросов = ПакетЗапросовСоздать();
	
	// Инициализация необходимых параметров, которые могут быть не переданы вызывающей процедурой
	ПервыйПакетЗапросов.Запрос.УстановитьПараметр("ГраницаДокумента", ПараметрыРасчета.ТекущаяДата);
	ПервыйПакетЗапросов.Запрос.УстановитьПараметр("ПромокодыСкидок", ПустаяТаблицаПромокодов());
	ПервыйПакетЗапросов.Запрос.УстановитьПараметр("ВыбранныеУправляемыеСкидки", ПустаяТаблицаУправляемыхСкидок());
	Для Каждого ПараметрПакета Из ПараметрыРасчета Цикл
		ПервыйПакетЗапросов.Запрос.УстановитьПараметр(ПараметрПакета.Ключ, ПараметрПакета.Значение);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПервыйПакетЗапросов.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КоличествоУровнейИерархииНоменклатуры = КоличествоУровнейПодготовленнойТаблицыИЕрархии(МенеджерВременныхТаблиц, "вт_ГруппыСИерархией");
	
	// Подготовка и выполнение первого пакета.
	ПакетЗапросовВставитьЗапросВПакет(СкидкиНаценкиСерверПереопределяемый.ТекстЗапросаТаблицаКурсыВалют(),				ПервыйПакетЗапросов);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценки(ВходныеПараметры.ТолькоПредварительныйРасчет), 	ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаУсловияПредоставления(),         								ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаПроизвольныхУсловий(),        									ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоЦеновымГруппам(), 								ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоКатегориямНоменклатуры(), 						ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоНоменклатуре(), 								ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоСегментамНоменклатуры(),						ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаПримененныхПромокодов(),										ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаУсловияВыбранныхУправляемыхСкидок(),							ПервыйПакетЗапросов, Истина);
	                              
	// Скидки после расчета нужно применить к таблице товаров, после чего запустить расчет бонусов
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаТовары(),														ПервыйПакетЗапросов, Истина);

	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоВидуЦен(),		 								ПервыйПакетЗапросов, Истина);
	
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаВыполненныхУсловий(КоличествоУровнейИерархииНоменклатуры),			ПервыйПакетЗапросов, Истина);
	
	ПакетЗапросовВыполнить(ПервыйПакетЗапросов);
	
	ТаблицаВыполненныеУсловия = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("ВыполненныеУсловияСкидокНаценок", ПервыйПакетЗапросов).Выгрузить();
	ТаблицаПроизвольныхУсловий = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("ПроизвольныеУсловия", ПервыйПакетЗапросов).Выгрузить();
	ДобавитьВыполненныеПроизвольныеУсловияВТаблицу(ТаблицаПроизвольныхУсловий, ТаблицаВыполненныеУсловия, ПараметрыРасчета);
	
		
	ОбъединенныеПараметры = ПодготовитьПараметрыРасчетаСкидок(ПервыйПакетЗапросов, ПараметрыРасчета, ВходныеПараметры);

	ДеревоСкидок = ПолучитьДеревоСкидок(ОбъединенныеПараметры.СкидкиНаценки.ВыгрузитьКолонку("СкидкаНаценка"));
	ДеревоСкидок.Колонки.Добавить("ТаблицаДанных"    , Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоСкидок.Колонки.Добавить("ТаблицаТоваров"	 , Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоСкидок.Колонки.Добавить("ТаблицаПодарков"	 , Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоСкидок.Колонки.Добавить("ТаблицаСообщений" , Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоСкидок.Колонки.Добавить("ПараметрыУсловий" , Новый ОписаниеТипов("Структура"));
	ДеревоСкидок.Колонки.Добавить("КоличествоВыполненийУсловия" , Новый ОписаниеТипов("Число"));
	
	ПроверитьУсловияРекурсивно(ДеревоСкидок, ТаблицаВыполненныеУсловия, ПараметрыРасчета);
	ДеревоСкидок.Колонки.Удалить(ДеревоСкидок.Колонки.УсловияПредоставления);
	
	Если ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("КлючСвязи",     Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
		ТЗ.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
		
		ВозвращаемыеДанные = Новый Структура;
		ВозвращаемыеДанные.Вставить("ДеревоСкидок", ДеревоСкидок);
		ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
		ВозвращаемыеДанные.Вставить("ТаблицаСообщений", ПустаяТаблицаСообщений());
		ВозвращаемыеДанные.Вставить("ТаблицаПодарков", ПустаяТаблицаПодарков());
		ВозвращаемыеДанные.Вставить("ТаблицаБонусыКНачислению", ПустаяТаблицаБонусов());
		
		Возврат ВозвращаемыеДанные;
		
	КонецЕсли;
	СтруктураСкидок = СтруктураРассчитанныхСкидок(ДеревоСкидок, ОбъединенныеПараметры);
	
	Если ОбъединенныеПараметры.Свойство("СообщениеПользователю") Тогда
		ВходныеПараметры.Вставить("СообщениеПользователю", ОбъединенныеПараметры.СообщениеПользователю);
	КонецЕсли;
	
	Возврат СтруктураСкидок;
	
КонецФункции

// Подготавливает структуру параметров, необходимых для выполнения расчета скидок.
// 
// Параметры:
//  ПакетЗапросов		- см. СкидкиНаценкиСервер.ПолучитьДеревоСкидок
//  ПараметрыРасчета	- Структура - Данные документа, исходя из которых следует выполнить расчет скидок
//  ВходныеПараметры	- Структура - Уточняющие параметры, описывающие, как именно следует выполнить расчет скидок:
//		* БонуснаяПрограмма - СправочникСсылка.БонусныеПрограммы - Бонусная программа предъявленной дисконтной карты.
// 		* РассчитыватьБонусы - Булево - Следует ли выполнять расчет начисления бонусных баллов
//
// Возвращаемое значение:
// 	Структура - Параметры, необходимые для расчета скидок и бонусов:
//		* СкидкиНаценкиПоЦеновымГруппам - ТаблицаЗначений - Таблица уточнения размера скидки по ценовым группам. Одновременно может действовать только одна таблица уточнений.
//		* СкидкиНаценкиПоКатегориямНоменклатуры - ТаблицаЗначений - Таблица уточнения размера скидки по категориям номенклатуры. Одновременно может действовать только одна таблица уточнений.
//		* СкидкиНаценкиПоНоменклатуре - ТаблицаЗначений - Таблица уточнения размера скидки по номенклатуре, с учетом иерархии. Одновременно может действовать только одна таблица уточнений.
//		* СкидкиНаценкиПоВидуЦен - ТаблицаЗначений - Таблица уточнения размера скидки по виду цен. Одновременно может действовать только одна таблица уточнений.
//		* СкидкиНаценкиПоСегментамНоменклатуры - ТаблицаЗначений - Таблица уточнения размера скидки по сегментам номенклатуры. Одновременно может действовать только одна таблица уточнений.
//		* Товары - ТаблицаЗначений - Представление табличной части документа, содержащей продаваемые товары. Предварительно очищена от скидок и подарков.
//		* СкидкиНаценки - ТаблицаЗначений - Таблица скидок/наценок, которые могут быть применены к текущему документу (до проерки условий скидок, но после фильтров по поставщикам/складам и канала продаж)
//		* ПустаяТаблицаСкидокСРасшифровкой - ТаблицаЗначений - Таблица, в которой будет размещена расшифровка расчета скидок.
//		* ПустаяТаблицаРасшифровка - см. ПолучитьПустуюТаблицуРасшифровки - Таблица, в которой будет размещена расшифровка расчета скидок.
//		* Регистратор - ДокументСсылка - Ссылка на документ, для которого выполняется расчет скидок. Может быть пустой ссылкой. Служит для определения типа документа и момента времени уже  существующих движений в БД (чтобы их не учитывать).
//		* ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа для пересчета курсов.
//		* СуммаВключаетНДС - Булево - Вариант учета НДС, выбранный в документе.
//		* ТекущаяДата - Дата - Дата документа.
//		* ТекущийВидЦен - СправочникСсылка.ВидыЦен - Вид цен, выбранный в документе.
//		* ТекущаяСтруктурнаяЕдиница - СправочникСсылка.СтруктурныеЕдиницы - Магазин, склад, или иное подразделение, осуществляющее продажу товара. В некоторых документах магазин может быть указан в табличной части.
//		* ПримененныеПромокоды - см. ПустаяТаблицаПромокодов - Список промокодов, которые были предъявлены покупателем.
//		* ВыбранныеУправляемыеСкидки - см. ПустаяТаблицаУправляемыхСкидок - Список условий управляемых скидок, активированных кассиром вручную.
//		* ДисконтнаяКарта - СправочникСсылка.ДисконтныеКарты - Предъявленная покупателем дисконтная карта
//		* РассчитыватьБонусы - Булево - Следует ли выполнять расчет начисленных бонусов при расчете скидок
//		* НачислятьБонусыДоСкидок - Булево - Если установлен, то сумма документа для расчета начисления бонусов будет определяться до применения ручных и автоматических скидок.
Функция ПодготовитьПараметрыРасчетаСкидок(ПакетЗапросов, ПараметрыРасчета, ВходныеПараметры)	
	// Подготовка параметров для расчета скидок.
	Параметры = Новый Структура;
	// Уточнения размера скидки по ценовой группе, номенклатурной группе или номенклатуре. По номенклатуре - с учетом иерархии.
	Параметры.Вставить("СкидкиНаценкиПоЦеновымГруппам", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоЦеновымГруппам", ПакетЗапросов).Выгрузить());
	Параметры.Вставить("СкидкиНаценкиПоКатегориямНоменклатуры", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоКатегориямНоменклатуры", ПакетЗапросов).Выгрузить());
	Параметры.Вставить("СкидкиНаценкиПоНоменклатуре", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоНоменклатуре", ПакетЗапросов).Выгрузить());	
	Параметры.Вставить("СкидкиНаценкиПоВидуЦен", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоВидуЦен", ПакетЗапросов).Выгрузить());	
	Параметры.Вставить("СкидкиНаценкиПоСегментамНоменклатуры", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоСегментамНоменклатуры", ПакетЗапросов).Выгрузить());
	
	ТаблицаСкидкиНаценки      = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценки", ПакетЗапросов).Выгрузить();

	ТЗТовары = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("Товары"            , ПакетЗапросов).Выгрузить();
	ТЗТовары.Колонки.Добавить("СуммаТочность2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ТЗТовары.Колонки.Добавить("АвтоСкидкаТочность2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗТовары.Колонки.Добавить("ВсегоТочность2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	
	Если ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются()
		И ПараметрыРасчета.Товары.Колонки.Найти("ВидМинимальныхЦен") <> Неопределено Тогда
		ТЗТовары.Колонки.Добавить("ВидМинимальныхЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		Для Каждого СтрокаТовары Из ТЗТовары Цикл 			
			НайденаСтрока = ПараметрыРасчета.Товары.Найти(СтрокаТовары.КлючСвязи, "КлючСвязи");
			Если НайденаСтрока <> Неопределено Тогда
				СтрокаТовары.ВидМинимальныхЦен = НайденаСтрока.ВидМинимальныхЦен;
			КонецЕсли;		                      		
		КонецЦикла;
		Если ТЗТовары.Колонки.Найти("МинимальнаяЦена") = Неопределено Тогда
			ИмяКолонкиПоиска = "КлючСвязиМинимальныеЦены";
			ТЗТовары.Колонки.Добавить("МинимальнаяЦена", Новый ОписаниеТипов("Число"));
			ТЗТовары.Колонки.Добавить(ИмяКолонкиПоиска, Новый ОписаниеТипов("Число"));
			ИндексКлючСвязи = 0;
			Для Каждого Товар Из ТЗТовары Цикл			
				ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(ТЗТовары, Товар, "КлючСвязиМинимальныеЦены", ИндексКлючСвязи);				
				ИндексКлючСвязи = ИндексКлючСвязи + 1;				
			КонецЦикла;
			
			ТаблицаМинимальныхЦен = ЦенообразованиеСервер.ПолучитьТаблицуТоваровСМинимальнымиЦенами(ТЗТовары, ПараметрыРасчета.ТекущаяДата, ИмяКолонкиПоиска);
			Для Каждого ЗаписьМинимальныхЦен Из ТаблицаМинимальныхЦен Цикл				
				Отбор = Новый Структура(ИмяКолонкиПоиска, ЗаписьМинимальныхЦен.КлючСвязи);
				СтрокиТоваров = ТЗТовары.НайтиСтроки(Отбор);				
				Для Каждого СтрокаТовара Из СтрокиТоваров Цикл
					СтрокаТовара.МинимальнаяЦена = ЗаписьМинимальныхЦен.МинимальнаяЦена;				
				КонецЦикла;				
			КонецЦикла;  			
		КонецЕсли;
	КонецЕсли;	
	
	Параметры.Вставить("Товары", ТЗТовары);
	Параметры.Вставить("СкидкиНаценки"                , ТаблицаСкидкиНаценки);
	
	
	// Пустые таблицы.
	Параметры.Вставить("ПустаяТаблицаСкидокСРасшифровкой", Неопределено);
	Параметры.Вставить("ПустаяТаблицаРасшифровка",	ПолучитьПустуюТаблицуРасшифровки());
	Параметры.Вставить("ТекущаяДата", 				ПараметрыРасчета.ТекущаяДата);
	Параметры.Вставить("Регистратор", 				ПараметрыРасчета.Регистратор);
	Параметры.Вставить("ВалютаДокумента", 			ПараметрыРасчета.ВалютаДокумента);
	Параметры.Вставить("ТекущийВидЦен", 			ПараметрыРасчета.ВидЦен);
	Параметры.Вставить("ДисконтнаяКарта", 			ПараметрыРасчета.ДисконтнаяКарта);
	Параметры.Вставить("ТекущаяСтруктурнаяЕдиница", Неопределено);
	Параметры.Вставить("ПримененныеПромокоды", 		?(ПараметрыРасчета.Свойство("ПромокодыСкидок"), ПараметрыРасчета.ПромокодыСкидок, ПустаяТаблицаПромокодов()));
	Параметры.Вставить("ВыбранныеУправляемыеСкидки",  ?(ПараметрыРасчета.Свойство("ВыбранныеУправляемыеСкидки"), ПараметрыРасчета.ВыбранныеУправляемыеСкидки, ПустаяТаблицаУправляемыхСкидок()));
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.Магазин) Тогда
		Параметры.ТекущаяСтруктурнаяЕдиница = ПараметрыРасчета.Магазин;
	Иначе
		СкладОптовойПродажи = Неопределено;
		Если ПараметрыРасчета.Свойство("СкладПродажи", СкладОптовойПродажи) Тогда
			Параметры.ТекущаяСтруктурнаяЕдиница = СкладОптовойПродажи;
		КонецЕсли;
	КонецЕсли;
	Параметры.Вставить("СуммаВключаетНДС", 			ПараметрыРасчета.СуммаВключаетНДС);
	
	Параметры.Вставить("НачислятьБонусыДоСкидок", 	Ложь);
	Если ВходныеПараметры.Свойство("БонуснаяПрограмма") 
		И НЕ (ВходныеПараметры.Свойство("РассчитыватьБонусы") И ВходныеПараметры.РассчитыватьБонусы = Ложь) Тогда
		Параметры.Вставить("РассчитыватьБонусы", Истина);
		Параметры.Вставить("НачислятьБонусыДоСкидок", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВходныеПараметры.БонуснаяПрограмма, "НачислятьБонусыДоСкидок"));
	Иначе
		Параметры.Вставить("РассчитыватьБонусы", Ложь);
	КонецЕсли;
	
	// Индексирование таблиц
	Параметры.СкидкиНаценки.Индексы.Добавить("СкидкаНаценка");
	Возврат Параметры;
КонецФункции

Функция ПолучитьПустуюТаблицуРасшифровки() Экспорт
	Расшифровка = Новый ТаблицаЗначений;
	Расшифровка.Колонки.Добавить("СкидкаНаценка",				Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	Расшифровка.Колонки.Добавить("Сумма",				        Новый ОписаниеТипов("Число"));
	Расшифровка.Колонки.Добавить("СуммаРучнойСкидки",			Новый ОписаниеТипов("Число"));
	Расшифровка.Колонки.Добавить("ОграниченаМинимальнойЦеной",	Новый ОписаниеТипов("Булево"));
	Расшифровка.Колонки.Добавить("ИзменитьРучнуюСкидку",		Новый ОписаниеТипов("Булево"));
	Расшифровка.Колонки.Добавить("ЗначениеСкидкиНаценки",		Новый ОписаниеТипов("Число"));
	Расшифровка.Колонки.Добавить("Комментарий",					Новый ОписаниеТипов("Строка"));
	Возврат Расшифровка
КонецФункции

// Процедура применяет результат расчета скидок (наценок) к объекту.
// Вызывается из форм документов.
//
Процедура ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, ИмяТЧ, РезультатРасчетаСкидокНаценок, РеализацияСверхЗаказа = Ложь, ТоварыСверхЗаказа = Неопределено, ИмяТЧ2 = Неопределено, ДеревоСкидок = Неопределено) Экспорт
	
	Объект.СкидкиНаценки.Очистить();
	Если РеализацияСверхЗаказа И ЗначениеЗаполнено(ТоварыСверхЗаказа) Тогда
		Для Каждого ТекущаяСкидкаНаценка Из РезультатРасчетаСкидокНаценок Цикл
			Если ТоварыСверхЗаказа.Найти(ТекущаяСкидкаНаценка.КлючСвязи) <> Неопределено Тогда
				НоваяСтрокаСкидкиНаценки = Объект.СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСкидкиНаценки, ТекущаяСкидкаНаценка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(Объект.СкидкиНаценки) = Тип("ТаблицаЗначений") Тогда
			Объект.СкидкиНаценки = РезультатРасчетаСкидокНаценок.Скопировать();
		Иначе
			Объект.СкидкиНаценки.Загрузить(РезультатРасчетаСкидокНаценок);
		КонецЕсли;
	КонецЕсли;
	
	АвтоматическиеСкидкиНаценки = РезультатРасчетаСкидокНаценок.Скопировать();
	
	// Заполнение скидок в табличной части "Товары"
	АвтоматическиеСкидкиНаценки.Свернуть("КлючСвязи", "Сумма");
	АвтоматическиеСкидкиНаценки.Индексы.Добавить("КлючСвязи");
	
	ЗаполнятьСуммуСкидки = Ложь;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнятьСуммуСкидки = Истина;
	КонецЕсли;
	РеквизитТЧЗаказ = "Заказ";
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		РеквизитТЧЗаказ = "ЗаказПокупателя";
	КонецЕсли;
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ИмяТЧ, "КлючСвязи");
	Если НЕ ИмяТЧ2 = Неопределено Тогда // Для заказ-наряда, в котором есть 2 ТЧ: "Работы" и "Запасы".
		СоответствиеТЧ.Вставить(ИмяТЧ2, "КлючСвязиДляСкидокНаценок");
	КонецЕсли;
	ЕстьРеквизитПроцентСкидкиПоДисконтнойКарте = НЕ (Объект.Ссылка.Метаданные().Реквизиты.Найти("ПроцентСкидкиПоДисконтнойКарте") = Неопределено);
	
	Для Каждого ТекЭлементСоответствия Из СоответствиеТЧ Цикл
		РеквизитКлючСвязи = ТекЭлементСоответствия.Значение;
		Для Каждого СтрокаТЧ Из Объект[ТекЭлементСоответствия.Ключ] Цикл
			
			Если РеализацияСверхЗаказа И ЗначениеЗаполнено(СтрокаТЧ[РеквизитТЧЗаказ]) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = АвтоматическиеСкидкиНаценки.Найти(СтрокаТЧ[РеквизитКлючСвязи], "КлючСвязи");
			Если СтрокаТаблицы = Неопределено Тогда
				Если СтрокаТЧ.СуммаАвтоматическойСкидки = 0 И СтрокаТЧ.ПроцентАвтоматическойСкидки = 0 Тогда
					// Не будем пересчитывать строки, в которых значение автоматической скидки не поменялось.
					// Это нужно в тех случаях, когда сумму документа изменили вручную, а цена при этом не поменялась.
					// Это возможно, когда количество очень большое, а цена маленькая.
					// В этом случае при изменении суммы цена будет рассчитана как сумма / количество с округлением до 2-х знаков.
					Продолжить;
				КонецЕсли;
				СтрокаТЧ.СуммаАвтоматическойСкидки = 0;
				СуммаАвтоматическойСкидки          = 0; // Для точного расчета процента автоматической скидки
			Иначе
				Если СтрокаТаблицы.Сумма = 0 И СтрокаТЧ.СуммаАвтоматическойСкидки = 0 И СтрокаТЧ.ПроцентАвтоматическойСкидки = 0 Тогда
					// Не будем пересчитывать строки, в которых значение автоматической скидки не поменялось.
					// Это нужно в тех случаях, когда сумму документа изменили вручную, а цена при этом не поменялась.
					// Это возможно, когда количество очень большое, а цена маленькая.
					// В этом случае при изменении суммы цена будет рассчитана как сумма / количество с округлением до 2-х знаков.
					Продолжить;
				КонецЕсли;
				СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТаблицы.Сумма;
				СуммаАвтоматическойСкидки          = СтрокаТаблицы.Сумма; // Для точного расчета процента автоматической скидки
			КонецЕсли;

			ЦенообразованиеСервер.УстановитьЗначенияРучнойСкидкиПоМинимальнойЦене(СтрокаТЧ, ДеревоСкидок, Объект.СуммаВключаетНДС, РеквизитКлючСвязи);

			// Применение автоматической скидки.
			Если ТекЭлементСоответствия.Ключ = "Работы" Тогда
				СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Кратность * СтрокаТЧ.Коэффициент * СтрокаТЧ.Цена;
			Иначе
				СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
			КонецЕсли;
			
			// Скидки.
			Если СуммаБезСкидки <> 0 Тогда
				Если СтрокаТЧ.ПроцентСкидкиНаценки = 100 Тогда
					СуммаПослеПримененияРучныхСкидокНаценок = 0;
				ИначеЕсли (СтрокаТЧ.ПроцентСкидкиНаценки <> 0 ИЛИ СтрокаТЧ.СуммаСкидкиНаценки <> 0 
					ИЛИ (ЕстьРеквизитПроцентСкидкиПоДисконтнойКарте И Объект.ПроцентСкидкиПоДисконтнойКарте) <> 0) 
					И СтрокаТЧ.Количество <> 0 Тогда
					
					СуммаПослеПримененияРучныхСкидокНаценок = СуммаБезСкидки - СтрокаТЧ.СуммаСкидкиНаценки; //считаем скидку из СуммаСкидкиНаценки 
				Иначе
					СуммаПослеПримененияРучныхСкидокНаценок = СуммаБезСкидки;
				КонецЕсли;
			Иначе
				СуммаПослеПримененияРучныхСкидокНаценок = СуммаБезСкидки;
			КонецЕсли;
			
			Если ЗаполнятьСуммуСкидки Тогда
				СуммаРучнойСкидки = СтрокаТЧ.СуммаСкидкиНаценки;
			Иначе
				СуммаРучнойСкидки = СуммаБезСкидки - СуммаПослеПримененияРучныхСкидокНаценок;
			КонецЕсли;
			
			СуммаСкидки = СуммаАвтоматическойСкидки + СуммаРучнойСкидки;
			
			СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "СуммаСкидкиОплатыБонусом") Тогда
				СтрокаТЧ.Сумма = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаСкидкиОплатыБонусом;
			КонецЕсли;
			
			// Сумма НДС.
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТЧ.СтавкаНДС);
		
			СтрокаТЧ.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
											  СтрокаТЧ.Сумма - (СтрокаТЧ.Сумма) / ((СтавкаНДС + 100) / 100),
											  СтрокаТЧ.Сумма * СтавкаНДС / 100);

			// Всего.
			СтрокаТЧ.Всего = СтрокаТЧ.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			
		КонецЦикла;
	КонецЦикла;
	
	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры // РассчитатьПоОбъекту()

Процедура ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ТаблицаПодарков, ТаблицаПодарковНаВыбор) Экспорт
	
	// Очистить ТЧ от уже перенесенных ранее подарков
	ОчиститьЗапасыОтПодарков(Объект);
	Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
		Если СтрокаПодарка.ПодарокИзСписка Тогда
		    НоваяСтрока = ТаблицаПодарковНаВыбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
		Иначе
		    НоваяСтрока = Объект.Подарки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
			ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Объект.Подарки, НоваяСтрока, "КлючСвязи");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

// Выполняет удаление строк из табличной части объекта "Запасы",
// в которых значение поля ПродажаПодарка установлено равным Истина.
//
// Параметры:
//  Объект - ДокументОбъект - документ из строк которого требуется исключить подарки.
//  ИмяТЧЗапасы - Строка - Не обязательный. Имя табличной части, содержащей строки с признаком "ПродажаПодарка", которые
//                         требуется удалить.
//
Процедура ОчиститьЗапасыОтПодарков(Объект, Знач ИмяТЧЗапасы = Неопределено)
	
	Если ИмяТЧЗапасы = Неопределено Тогда
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ИмяТЧЗапасы = "РаботыИУслуги";
		Иначе
			ИмяТЧЗапасы = "Запасы";
		КонецЕсли;
	КонецЕсли;
	СтруктураПоиска = Новый Структура("ПродажаПодарка", Истина);
	СтрокиЗапасов = Объект[ИмяТЧЗапасы].НайтиСтроки(СтруктураПоиска);
	
	УдалятьАкцизныеМарки = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "АкцизныеМарки") Тогда
		УдалятьАкцизныеМарки = Истина;
	КонецЕсли;
	ИспользоватьСерииНоменклатурыОстатки = Ложь;
	УдалятьСерииНоменклатуры = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СерииНоменклатуры") Тогда
		УдалятьСерииНоменклатуры  = Истина;
		ИспользоватьСерииНоменклатурыОстатки = СерииНоменклатурыУНФ.ИспользоватьСерииНоменклатурыОстатки();
	КонецЕсли;
	УдалятьСерииПодарков = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СерииПодарков") Тогда
		УдалятьСерииПодарков  = Истина;
	КонецЕсли;
	УдалятьБонусныеБаллыКНачислению = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "БонусныеБаллыКНачислению") Тогда
		УдалятьБонусныеБаллыКНачислению = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаЗапасов Из СтрокиЗапасов Цикл
		Если УдалятьАкцизныеМарки Тогда
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, СтрокаЗапасов);
		КонецЕсли;
		Если УдалятьБонусныеБаллыКНачислению Тогда
			ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.БонусныеБаллыКНачислению, СтрокаЗапасов);
		КонецЕсли;
		Если УдалятьСерииНоменклатуры Тогда
			СерииНоменклатурыУНФКлиентСервер.УдалитьСерииНоменклатурыПоКлючуСвязи(Объект.СерииНоменклатуры, СтрокаЗапасов,
				ИспользоватьСерииНоменклатурыОстатки);
		КонецЕсли;
		ТабличныеЧастиУНФКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СкидкиНаценки, СтрокаЗапасов);
		Объект[ИмяТЧЗапасы].Удалить(СтрокаЗапасов);
	КонецЦикла;
	
	Если УдалятьСерииПодарков Тогда
		Объект.СерииПодарков.Очистить();
	КонецЕсли;
	Объект.Подарки.Очистить();		
	
КонецПроцедуры

// Процедура проверяет табличную часть Подарки документа на наличие таких подарков, которые должны быть оформлены как продажа.
// Такие подарки исключаются из табличной части Подарки, и переносятся в состав документа. На стоимость подарка
// предоставляется скидка. Вызывается из форм документов.
//
Функция ПеренестиПодаркиВЗапасы(Объект, ПримененныеСкидкиНаценки = Неопределено, АдресПримененныхСкидокВоВременномХранилище = "", ИмяТЧ = "Запасы") Экспорт
	
	Запасы = Объект[ИмяТЧ];
	Результат = Новый Структура(); 
	Результат.Вставить("Успех", Истина); 
	Результат.Вставить("ПримененныеСкидкиНаценки", ПримененныеСкидкиНаценки);
	Если ПримененныеСкидкиНаценки = Неопределено Тогда
		Результат.Вставить("ПримененныеСкидкиНаценки", Новый Структура());
	КонецЕсли;
	Результат.Вставить("ДобавленныеСтрокиЗапасов", Новый Соответствие());
	Результат.Вставить("АдресПримененныхСкидокВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
	Если Запасы.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Объект.Подарки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	КэшированныеЗначения = Новый Структура;
	ТаблицаСтрокПереносимыхПодарков = Неопределено;
	Если ТипЗнч(Объект.Подарки) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСтрокПереносимыхПодарков = Объект.Подарки.Скопировать();
	Иначе
		ТаблицаСтрокПереносимыхПодарков = Объект.Подарки.Выгрузить();
	КонецЕсли;
	
	МассивУдаляемыхСтрок = Новый Массив;
	КоличествоПеренесенных = 0;
	ОбновитьПримененныеСкидкиВХранилище = Ложь;
	Если ПримененныеСкидкиНаценки = Неопределено 
		И ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		ПримененныеСкидкиНаценки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		ОбновитьПримененныеСкидкиВХранилище = Истина;
		Результат.Вставить("ПримененныеСкидкиНаценки", ПримененныеСкидкиНаценки);
	КонецЕсли;
	ЕстьКолонкаЗначениеСкидкиНаценки = Неопределено;
	РазрешитьТолькоРаботы = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот");
	ТипыНоменклатурыРаботы = Новый Массив();
	ТипыНоменклатурыРаботы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	ТипыНоменклатурыРаботы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
	Для Каждого СтрокаПодарка Из ТаблицаСтрокПереносимыхПодарков Цикл
		ПараметрыПодарка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу, ПодарокИзКорзиныПокупателя");
		Учитывать = ПараметрыПодарка.УчитыватьПодарокКакПродажу ИЛИ ПараметрыПодарка.ПодарокИзКорзиныПокупателя;
		УдалятьСтроку = Истина;
		СтрокаСообщения = "";
		ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(СтрокаПодарка.Номенклатура);
		ИсключитьУслугу = Ложь;
		Если Учитывать = Истина Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаПодарка.СкидкаНаценка) Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок в строке %1 нельзя учесть как продажу: не заполнена скидка'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.НомерСтроки);
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПодарка.Номенклатура) Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не заполнена номенклатура'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.СкидкаНаценка);
			ИначеЕсли СтрокаПодарка.Количество <= 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не корректно заполнено количество'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			ИначеЕсли СтрокаПодарка.Сумма <= 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не корректно заполнена сумма'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ОтменаПереносаПодарковВПродажи")
				И Объект.ОтменаПереносаПодарковВПродажи Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: в документе отменен учет подарков как продажи'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			ИначеЕсли РазрешитьТолькоРаботы 
				И ТипыНоменклатурыРаботы.Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.Номенклатура, "ТипНоменклатуры")) = Неопределено Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: в документе можно отразить только работы или услуги'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			Иначе
				УдалятьСтроку = Ложь;
			КонецЕсли; 
		Иначе
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
				Объект.Подарки.Очистить();
				СтрокаСообщения = НСтр("ru = 'Табачную продукцию ""%1"" можно дарить, учитывая только как продажу.'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			КонецЕсли;
		КонецЕсли;
		Если УдалятьСтроку Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаПодарка);
			Если ЗначениеЗаполнено(СтрокаСообщения) 
				// Расчет суммы виртуального объекта для корректного расчета бонусов, сообщения выводить не требуется
				И НЕ ТипЗнч(Объект) = Тип("Структура") Тогда 
				ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		ТаблицаСтрокПереносимыхПодарков.Удалить(ЭлементМассива);
	КонецЦикла;
	
	Если ТаблицаСтрокПереносимыхПодарков.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
		
	//ГосИС
	ВидыПродукции = ИнтеграцияИСУНФ.ВидыПродукцииВЗапасах(Объект.Подарки);
	ДополнительноеОписание = "";
	
	СоответствиеПереносимыхСтрокПодарков = Новый Соответствие;
	ПеренесенМаркируемыйТовар = Ложь;
	Для Каждого СтрокаПодарка Из ТаблицаСтрокПереносимыхПодарков Цикл
							
		СтрокаПеренесенногоПодарка = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПеренесенногоПодарка, СтрокаПодарка, , "КлючСвязи");
		ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(Запасы, СтрокаПеренесенногоПодарка, "КлючСвязи");
		СтрокаПеренесенногоПодарка.ПродажаПодарка = Истина; 
		
		КодАкцизнойМарки = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПодарка, "ШтрихкодУпаковки")
			И ЗначениеЗаполнено(СтрокаПодарка.ШтрихкодУпаковки) Тогда
			
			КодАкцизнойМарки = СтрокаПодарка.ШтрихкодУпаковки;
			ПеренесенМаркируемыйТовар = Истина;

		КонецЕсли;
		КоличествоПеренесенных = КоличествоПеренесенных + 1;
        Результат.ДобавленныеСтрокиЗапасов.Вставить(СтрокаПеренесенногоПодарка, КодАкцизнойМарки); 
		
		ТоварыДляРаспределенияСкидки = Запасы;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПеренесенногоПодарка, "НомерВариантаКП") Тогда
			ОтборСтрокКП = Новый Структура("НомерВариантаКП", СтрокаПеренесенногоПодарка.НомерВариантаКП);
			СтрокиТоваровДляРаспределенияСкидки = Запасы.НайтиСтроки(ОтборСтрокКП);
			ТоварыДляРаспределенияСкидки = Запасы.Выгрузить(СтрокиТоваровДляРаспределенияСкидки);
		КонецЕсли;
		
		Параметры = Новый Структура;
		СтруктурнаяЕдиница = Неопределено;
		СкладВШапке = ЦенообразованиеКлиентСервер.ОпределитьПоложениеСкладаВОбъекте(Объект);
		ИмяРеквизитаСЕ = ЦенообразованиеКлиентСервер.ОпределитьИмяРеквизитаСкладаВОбъекте(Объект);
		Если СкладВШапке И ЗначениеЗаполнено(ИмяРеквизитаСЕ) Тогда
			СтруктурнаяЕдиница = Объект[ИмяРеквизитаСЕ];
		ИначеЕсли ЗначениеЗаполнено(ИмяРеквизитаСЕ) Тогда
			СтруктурнаяЕдиница = СтрокаПеренесенногоПодарка[ИмяРеквизитаСЕ];
		Иначе
			СтруктурнаяЕдиница = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ВидМинимальныхЦен = ЦенообразованиеСерверПовтИсп.ПолучитьВидМинимальныхЦен(СтруктурнаяЕдиница);		
			Параметры.Вставить("ВидЦен", ВидМинимальныхЦен);
			Параметры.Вставить("ДатаОбработки", Объект.Дата);
			Параметры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
			Параметры.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		Иначе
			Параметры = Неопределено;
		КонецЕсли;
		СкидкиПрименить = РаспределитьСкидкуПодарок(СтрокаПодарка,СтрокаПеренесенногоПодарка, ТоварыДляРаспределенияСкидки, Параметры); 
		// Отразим скидки в документе, согласно правилам распределения
		Для Каждого СкидкаПрименить Из СкидкиПрименить Цикл 
			НоваяСкидка = Объект.СкидкиНаценки.Добавить();
			НоваяСкидка.КлючСвязи 				= СкидкаПрименить.КлючСвязи;
			НоваяСкидка.СкидкаНаценка 			= СтрокаПодарка.СкидкаНаценка;
			НоваяСкидка.Сумма 					= СкидкаПрименить.Сумма;
			Если ЕстьКолонкаЗначениеСкидкиНаценки = Неопределено Тогда
				ЕстьКолонкаЗначениеСкидкиНаценки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСкидка, "ЗначениеСкидкиНаценки");
			КонецЕсли;
			Если ЕстьКолонкаЗначениеСкидкиНаценки Тогда
				НоваяСкидка.ЗначениеСкидкиНаценки	= СкидкаПрименить.ПроцентСкидки;
			КонецЕсли;
			
			ОтборСтрокЗапасов = Новый Структура;
			ОтборСтрокЗапасов.Вставить("КлючСвязи", НоваяСкидка.КлючСвязи); 
			СтрокиТоваров = Запасы.НайтиСтроки(ОтборСтрокЗапасов);
			
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл 
				
				СуммаБезСкидки = СтрокаТоваров.Количество * СтрокаТоваров.Цена;                                    
				ПроцентТекущейСкидки = ?(СуммаБезСкидки = 0, 0, Окр(100 * СкидкаПрименить.Сумма / СуммаБезСкидки, 2));
				Если ЕстьКолонкаЗначениеСкидкиНаценки Тогда
					НоваяСкидка.ЗначениеСкидкиНаценки	= ПроцентТекущейСкидки;
				КонецЕсли;
				
            КонецЦикла;
		КонецЦикла;
		Если НЕ ПримененныеСкидкиНаценки = Неопределено Тогда			
			СтрокиСкидкиПереносимогоПодарка = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокиСкидкиПереносимогоПодарка, НоваяСкидка);
		КонецЕсли;
		// Исключим скидки, фиксировавшие подарки, не отнесенные в состав документа
		ОтборСкидки = Новый Структура;
		ОтборСкидки.Вставить("СкидкаНаценка", СтрокаПодарка.СкидкаНаценка);
		ОтборСкидки.Вставить("КлючСвязи", 0);
		СтрокиСкидкиПереносимогоПодарка = Объект.СкидкиНаценки.НайтиСтроки(ОтборСкидки);
		Если СтрокиСкидкиПереносимогоПодарка.Количество() > 0 Тогда
			// Скидка распределена по строкам документа
			Для Каждого СтрокаСкидкиПодарка Из СтрокиСкидкиПереносимогоПодарка Цикл
				Объект.СкидкиНаценки.Удалить(СтрокаСкидкиПодарка);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ПримененныеСкидкиНаценки = Неопределено Тогда
			
			СтрокиСкидкиПереносимогоПодарка = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.НайтиСтроки(ОтборСкидки);
			Если СтрокиСкидкиПереносимогоПодарка.Количество() > 0 Тогда
				// Скидка распределена по строкам документа
				Для Каждого СтрокаСкидкиПодарка Из СтрокиСкидкиПереносимогоПодарка Цикл
					ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Удалить(СтрокаСкидкиПодарка);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ПоложениеОтветственный") Тогда 
			ЗаполнениеОбъектовУНФ.ЗаполнитьСтрокуПоШапке(СтрокаПеренесенногоПодарка, Объект, "Ответственный", "ПоложениеОтветственный");
		КонецЕсли;
		СоответствиеПереносимыхСтрокПодарков.Вставить(Объект.Подарки[СтрокаПодарка.НомерСтроки - 1], СтрокаПеренесенногоПодарка);
		
	КонецЦикла;
	
	ЕстьСерииПодарков = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СерииПодарков")
		И Объект.СерииПодарков.Количество() > 0;
	Для Каждого СоответствиеСтрок Из СоответствиеПереносимыхСтрокПодарков Цикл
		
		СтрокаПодарка = СоответствиеСтрок.Ключ;
		СтрокаЗапаса = СоответствиеСтрок.Значение;
		Если ЕстьСерииПодарков Тогда 
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", СтрокаПодарка.КлючСвязи);
			СтрокиСерий = Объект.СерииПодарков.НайтиСтроки(СтруктураПоиска);
			МассивУдаляемыхСерий = Новый Массив;
			Если СтрокиСерий.Количество() = 0 Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", СтрокаПодарка.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", СтрокаПодарка.Характеристика);
				СтрокиСерий = Объект.СерииПодарков.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			Для Каждого СтрокаСерии Из СтрокиСерий Цикл
				МассивУдаляемыхСерий.Добавить(СтрокаСерии);
				НоваяСтрока = Объект.Серии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
				НоваяСтрока.КлючСвязи = СтрокаЗапаса.КлючСвязи;
			КонецЦикла;
			Для Каждого УдаляемаяСерия Из МассивУдаляемыхСерий Цикл
				Объект.СерииПодарков.Удалить(УдаляемаяСерия);
			КонецЦикла;
		КонецЕсли;
		Объект.Подарки.Удалить(СтрокаПодарка);
		
	КонецЦикла;  
	
	СтруктураПересчетаВсего = Новый Структура;
	СтруктураПересчетаВсего.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	Для Каждого СтрокаЗапаса Из Запасы Цикл
		ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(СтрокаЗапаса, СтруктураПересчетаВсего);
	КонецЦикла;
	
	ДеревоСкидок = Неопределено;
	Если НЕ ПримененныеСкидкиНаценки = Неопределено Тогда
		ПримененныеСкидкиНаценки.Свойство("ДеревоСкидок", ДеревоСкидок);
	КонецЕсли;
	ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, ИмяТЧ, Объект.СкидкиНаценки.Выгрузить(), , , , ДеревоСкидок);

	Если ОбновитьПримененныеСкидкиВХранилище Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидкиНаценки, АдресПримененныхСкидокВоВременномХранилище);
        Результат.АдресПримененныхСкидокВоВременномХранилище = АдресПримененныхСкидокВоВременномХранилище;
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

Функция РаспределитьСкидкуПодарок(СтрокаПодарка, СтрокаЗапаса, ТЧЗапасы, Параметры = Неопределено)
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КлючСвязи",Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ПроцентСкидки",Новый ОписаниеТипов("Число"));
	
	ТоварыИтогСумма = ТЧЗапасы.Итог("Сумма");
	СуммаТоваровНеУчаствующихВРаспределении = 0;
	ОбластьПредоставления_ВДокументе = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе");
	
	Для Каждого СтрокаТоваров Из ТЧЗапасы Цикл
		
		Если СтрокаТоваров.ПродажаПодарка
			ИЛИ СтрокаТоваров.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			СуммаТоваровНеУчаствующихВРаспределении = СуммаТоваровНеУчаствующихВРаспределении + СтрокаТоваров.Сумма;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТоваров, "ДоговорПлатежногоАгента")
			И ЗначениеЗаполнено(СтрокаТоваров.ДоговорПлатежногоАгента) Тогда
			СуммаТоваровНеУчаствующихВРаспределении = СуммаТоваровНеУчаствующихВРаспределении + СтрокаТоваров.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщаяСумма = ТоварыИтогСумма - СуммаТоваровНеУчаствующихВРаспределении; 
	
	СуммаСкидкиКРаспределению = СтрокаПодарка.Сумма;
	ОбщаяСумма = ТоварыИтогСумма - СуммаТоваровНеУчаствующихВРаспределении;
	
	ПараметрыСкидки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПодарка.СкидкаНаценка, "ОбластьПредоставления, ПодарокИзКорзиныПокупателя");		
	Если ПараметрыСкидки.ОбластьПредоставления = ОбластьПредоставления_ВДокументе Тогда 
		// Скидка распределяется равномерно, в том числе на саму строку подарка.
		Если НЕ ПараметрыСкидки.ПодарокИзКорзиныПокупателя Тогда
			// Если ключ связи заполнен, то это подарок уже находящийся в табличной части, т.е. из корзины покупателя
			// Такой подарок не добавляется в ТЧ, потому его стоимость уже входит в общую сумму документа 
			ОбщаяСумма = ОбщаяСумма + СуммаСкидкиКРаспределению;
		КонецЕсли;
		Для Каждого СтрокаТоваров Из ТЧЗапасы Цикл
			
			Если СтрокаТоваров.ПродажаПодарка 
				ИЛИ СтрокаТоваров.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
				Продолжить;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТоваров, "ДоговорПлатежногоАгента")
				И ЗначениеЗаполнено(СтрокаТоваров.ДоговорПлатежногоАгента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщаяСумма <> 0 Тогда
				СуммаСкидки = Окр(СтрокаТоваров.Сумма * (СуммаСкидкиКРаспределению / ОбщаяСумма), 2); 
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;
		
			Если ЦенообразованиеСерверПовтИсп.МинимальныеЦеныИспользуются() Тогда 
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТоваров, "МинимальнаяЦена") Тогда				
					МинимальнаяСумма = СтрокаТоваров.Количество * СтрокаТоваров.МинимальнаяЦена;
				ИначеЕсли Не Параметры = Неопределено Тогда
					ПараметрыЦены = Новый Структура;
					ПараметрыЦены.Вставить("ВидЦен", СтрокаТоваров.ВидМинимальныхЦен);
					ПараметрыЦены.Вставить("ДатаОбработки", Параметры.ТекущаяДата);
					ПараметрыЦены.Вставить("Номенклатура", СтрокаТоваров.Номенклатура);
					ПараметрыЦены.Вставить("Характеристика", СтрокаТоваров.Характеристика);
					ПараметрыЦены.Вставить("ВалютаДокумента", Параметры.ВалютаДокумента);
					ПараметрыЦены.Вставить("СуммаВключаетНДС", Параметры.СуммаВключаетНДС);  
					Если ТипЗнч(СтрокаТоваров.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
						ПараметрыЦены.Вставить("Коэффициент", СтрокаТоваров.ЕдиницаИзмерения.Коэффициент);
					Иначе
						ПараметрыЦены.Вставить("Коэффициент", 1);
					КонецЕсли; 
					
					МинимальнаяЦена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(ПараметрыЦены);
					МинимальнаяСумма = СтрокаТоваров.Количество * МинимальнаяЦена;
				Иначе
					// Не удалось определить минимальную цену в строке. Скидка будет предоставлена только на сам подарок, без
					// распределения по документу.
					МинимальнаяСумма = СтрокаТоваров.Сумма;
				КонецЕсли;
				
				МаксимальнаяСкидка = СтрокаТоваров.Сумма - МинимальнаяСумма; 
				СуммаСкидки = Мин(МаксимальнаяСкидка, СуммаСкидки);
				СуммаСкидки = Макс(0, СуммаСкидки);
			КонецЕсли;
					
			СтрокаСкидки = Результат.Добавить();
			СтрокаСкидки.КлючСвязи = СтрокаТоваров.КлючСвязи;
			СтрокаСкидки.Сумма = СуммаСкидки;
			СтрокаСкидки.ПроцентСкидки = ПолучитьПроцентСкидкиПоСтроке(СуммаСкидки, СтрокаТоваров);
			
			СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СуммаСкидки;
			ОбщаяСумма = ОбщаяСумма - СтрокаТоваров.Сумма;
			//СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СуммаСкидки;
			
		КонецЦикла;
	КонецЕсли;		
	
	Если СуммаСкидкиКРаспределению <> 0 Тогда
		СтрокаСкидки = Результат.Добавить();
		СтрокаСкидки.КлючСвязи = СтрокаЗапаса.КлючСвязи;
		СтрокаСкидки.Сумма = СуммаСкидкиКРаспределению;
		СтрокаСкидки.ПроцентСкидки = ПолучитьПроцентСкидкиПоСтроке(СуммаСкидкиКРаспределению, СтрокаЗапаса);
	КонецЕсли;
	
	Возврат Результат;
				
КонецФункции 

Функция ПолучитьПроцентСкидкиПоСтроке(СуммаСкидки, СтрокаЗапаса)
	ПроцентСкидки = 0;
	СуммаБезСкидки = СтрокаЗапаса.Сумма;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗапаса, "Цена") Тогда  
		СуммаБезСкидки =  СтрокаЗапаса.Цена * СтрокаЗапаса.Количество;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗапаса, "ЦенаЗаУпаковку") Тогда
		СуммаБезСкидки =  СтрокаЗапаса.ЦенаЗаУпаковку * СтрокаЗапаса.Количество;  
	КонецЕсли;
	Если НЕ СуммаБезСкидки = 0 Тогда
		ПроцентСкидки = Окр( 100 * СуммаСкидки / СуммаБезСкидки, 2);
	КонецЕсли;
    Возврат ПроцентСкидки;
КонецФункции

Процедура ДобавитьВыполненныеПроизвольныеУсловияВТаблицу(ТаблицаПроизвольныхУсловий, ТаблицаВыполненныеУсловия, ПараметрыРасчета)
	СобытиеЖурналаРегистрации = "СкидкиНаценкиСервер.ДобавитьВыполненныеПроизвольныеУсловияВТаблицу";
	ПредставлениеУровняОшибка = "Ошибка";
	ОбъектМетаданных = Метаданные.Справочники.УсловияПредоставленияСкидокНаценок;
	БылиОшибки = Ложь;
	Для Каждого ОписаниеУсловия Из ТаблицаПроизвольныхУсловий Цикл
		// Получение скомпанованного макета СКД из хранилища
		
		// Все таблицы значений из параметров произвольных условий, размещенных в ПараметрыРасчета будут помещены во временные таблицы 
		МВТ = Новый МенеджерВременныхТаблиц;

		МакетКомпоновки = ОписаниеУсловия.ХранилищеСкомпанованногоМакета.Получить();
		Справочники.УсловияПредоставленияСкидокНаценок.ЗаполнитьПараметровУсловия(ОписаниеУсловия.ИмяСхемыКомпоновкиДанных, МакетКомпоновки.ЗначенияПараметров, ПараметрыРасчета, МВТ);
		
		// Выполнение СКД.
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,,Ложь,Ложь,МВТ);

		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТЗ = Новый ТаблицаЗначений;	
		ПроцессорВывода.УстановитьОбъект(ТЗ);
		ПривилегированныйРежимБылВключен = ПривилегированныйРежим();
		Попытка
			Если НЕ ПривилегированныйРежимБылВключен Тогда
				УстановитьПривилегированныйРежим(Истина);
			КонецЕсли;
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			Если НЕ ПривилегированныйРежимБылВключен Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			// Если на выходе из СКД есть строки, прошедшие все фильтры - то условие выполнено.
			Для Каждого СтрокаВыполненногоПроизвольногоУсловия Из ТЗ Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаВыполненныеУсловия.Добавить(), СтрокаВыполненногоПроизвольногоУсловия);			
			КонецЦикла;
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ОписаниеОшибки);
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации, 
				ПредставлениеУровняОшибка, ОбъектМетаданных, ОписаниеУсловия.Ссылка, ТекстОшибки);			
			БылиОшибки = Истина;
		КонецПопытки;
        МВТ.Закрыть();
	КонецЦикла;
	Если БылиОшибки Тогда
		ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации();	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти