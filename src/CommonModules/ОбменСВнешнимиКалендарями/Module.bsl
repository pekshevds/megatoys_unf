////////////////////////////////////////////////////////////////////////////////
// Общие серверные процедуры для выполнения синхронизации между календарями сотрудника и соответствующими календарями внешних сервисов
// - запуск синхронизации для всех активных учетных записей внешних сервисов;
// - выполнение необходимых операций (создание,изменение, удаление) для синхронизации каждого календаря сотрудника с внешним календарем;
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Синхронизация календарей сотрудника с календарями внешних сервисов через протокол calDAV и GoogleAPI
// 
// Параметры:
//  СеансовыеДанные	 - Структура - поля соответствуют ресурсам регистра сведений СеансовыеДанныеGoogle
//  АдресХранилища	 - Строка - используется для совместимости с подсистемой ДлительныеОперации
//  Пользователь	 - СправочникСсылка.Пользователь - Пользователь для которого выполняется синхронизация,
//                     если Пользователь не указан, то используется Пользователи.ТекущийПользователь();
//
Процедура СинхронизироватьВсеКалендари(Знач СеансовыеДанные, Знач АдресХранилища = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		ОбменСGoogle.СинхронизироватьGoogleCalendar(СеансовыеДанные);
	КонецЕсли;
	
	ТаблицаАктивныхУчетныхЗаписей = Справочники.УчетныеЗаписиВнешнихКалендарей.УчетныеЗаписиПользователя(Пользователь);
	Для каждого УчетнаяЗапись Из ТаблицаАктивныхУчетныхЗаписей Цикл
		СинхронизироватьDAVКалендариДляУчетнойЗаписи(УчетнаяЗапись.Ссылка);
	КонецЦикла
	
КонецПроцедуры

// Синхронизация календарей сотрудника с календарями внешних сервисов для всех учетных записей через протокол calDAV
//
Процедура СинхронизироватьDAVКалендари() Экспорт
	
	ТаблицаАктивныхУчетныхЗаписей = Справочники.УчетныеЗаписиВнешнихКалендарей.УчетныеЗаписиПользователей();
	Для каждого УчетнаяЗапись Из ТаблицаАктивныхУчетныхЗаписей Цикл
		СинхронизироватьDAVКалендариДляУчетнойЗаписи(УчетнаяЗапись.Ссылка);
	КонецЦикла
	
КонецПроцедуры

// Инициализация узла обмена используемого для выполнения механизма синхронизации между календарями сотрудника и календарями внешних сервисов
//
Процедура ИнициализироватьУзелПланаОбменаДляВнешнихКалендарей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтотУзел = ПланыОбмена.ОбменСКалендарямиDAV.ЭтотУзел();
	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код")) Тогда
		Возврат;
	КонецЕсли;
	
	УзелОбъект = ЭтотУзел.ПолучитьОбъект();
	УзелОбъект.ОбменДанными.Загрузка = Истина;
	УзелОбъект.УстановитьНовыйКод();
	УзелОбъект.Наименование = НСтр("ru = 'Этот узел'");
	УзелОбъект.Записать();
	
КонецПроцедуры

// Создание нового календаря на стороне внешнего сервиса
// 
// Параметры:
//  УчетнаяЗаписьВнешнегоКалендаря - СправочникСсылка.УчетныеЗаписиВнешнихКалендарей - Ссылка на запись справочника УчетныеЗаписиВнешнихКалендарей
//  Календарь - СправочникСсылка.КалендариСотрудников - Ссылка на запись справочника КалендариСотрудника
//
Процедура СоздатьНовыйКалендарьDAV(УчетнаяЗаписьВнешнегоКалендаря, Календарь) Экспорт
	
	ДанныеАвторизации = ОбменСВнешнимиКалендарями.ЗагрузитьДанныеАвторизации(УчетнаяЗаписьВнешнегоКалендаря);
	
	СписокКалендарей = СинхронизацияDAV.СписокКалендарейНаСервереDAV(ДанныеАвторизации);
	
	Если ДанныеАвторизации.Сервер = "calendar.mail.ru" Тогда
		СинхронизацияDAV.СоздатьКалендарь(ДанныеАвторизации, Календарь.Наименование, , Новый УникальныйИдентификатор());
	Иначе
		СинхронизацияDAV.СоздатьКалендарь(ДанныеАвторизации, Календарь.Наименование);
	КонецЕсли;
	
	ОбновленныйСписокКалендарей = СинхронизацияDAV.СписокКалендарейНаСервереDAV(ДанныеАвторизации);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СписокКалендарей.Идентификатор КАК Идентификатор,
	|	СписокКалендарей.Наименование КАК Наименование
	|	ПОМЕСТИТЬ ТекущийСписокКалендарей
	|ИЗ
	|	&СписокКалендарей КАК СписокКалендарей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыйСписокКалендарей.Идентификатор КАК Идентификатор,
	|	НовыйСписокКалендарей.Наименование КАК Наименование
	|	ПОМЕСТИТЬ ОбновленныйСписокКалендарей
	|ИЗ
	|	&НовыйСписокКалендарей КАК НовыйСписокКалендарей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбновленныйСписокКалендарей.Идентификатор КАК Идентификатор,
	|	ОбновленныйСписокКалендарей.Наименование КАК Наименование
	|ИЗ
	|	ОбновленныйСписокКалендарей КАК ОбновленныйСписокКалендарей
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТекущийСписокКалендарей КАК ТекущийСписокКалендарей
	|	ПО ОбновленныйСписокКалендарей.Идентификатор = ТекущийСписокКалендарей.Идентификатор
	|ГДЕ
	|	ТекущийСписокКалендарей.Идентификатор ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("СписокКалендарей", СписокКалендарей);
	Запрос.УстановитьПараметр("НовыйСписокКалендарей", ОбновленныйСписокКалендарей);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		// Регистрация синхронизации между календарями
		МенеджерЗаписи = РегистрыСведений.НастройкиСинхронизацииСВнешнимиКалендарями.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.КодВнешнегоКалендаря = Выборка.Идентификатор;
		МенеджерЗаписи.КалендарьDAVНаименование = Выборка.Наименование;
		МенеджерЗаписи.КалендарьСотрудника = Календарь.Ссылка;
		МенеджерЗаписи.УчетнаяЗаписьВнешнегоКалендаря = УчетнаяЗаписьВнешнегоКалендаря;
		МенеджерЗаписи.Статус = Истина;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Синхронизация всех календарей для одной учетной записи внешнего сервиса
//  Выгрузка изменений из календаря сотрудника (1С:УНФ) во внешний календарь
//  Загрузка изменений из внешнего календаря в календарь сотрудника (1С:УНФ)
//  Удаление событий в календарях сотрудника, которые не были найдены на стороне календарей внешнего сервиса
//  Переименование календаря
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиВнешнихКалендарей - Ссылка на запись справочника УчетныеЗаписиВнешнихКалендарей
//
Процедура СинхронизироватьDAVКалендариДляУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеАвторизации = Справочники.УчетныеЗаписиВнешнихКалендарей.ДанныеАвторизации(УчетнаяЗапись);
	Если Не ЗначениеЗаполнено(ДанныеАвторизации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедурыСинхронизации = НовыеПараметрыПроцедурыСинхронизации();
	
	СписокКалендарейDAV = СинхронизацияDAV.СписокКалендарейНаСервереDAV(ДанныеАвторизации);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СписокКалендарейDAV.Идентификатор, """") КАК Идентификатор,
	|	ЕСТЬNULL(СписокКалендарейDAV.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(СписокКалендарейDAV.ТипКалендаря, """") КАК ТипКалендаря
	|	ПОМЕСТИТЬ СписокВнешнихКалендарей
	|ИЗ
	|	&СписокКалендарейDAV КАК СписокКалендарейDAV
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря КАК ЗарегистрированныйКалендарьИдентификатор,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьDAVНаименование КАК ЗарегистрированныйКалендарьНаименование,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьСотрудника КАК КалендарьСотрудника,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.Статус КАК Статус,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.ТокенСинхронизации КАК ТокенСинхронизации,
	|	СписокВнешнихКалендарей.Идентификатор КАК ЗагруженныйКалендарьИдентификатор,
	|	СписокВнешнихКалендарей.Наименование КАК ЗагруженныйКалендарьНаименование,
	|	СписокВнешнихКалендарей.ТипКалендаря КАК ТипКалендаря
	|	ПОМЕСТИТЬ ДанныеПоЗарегистрированнымКалендарям
	|ИЗ
	|	РегистрСведений.НастройкиСинхронизацииСВнешнимиКалендарями КАК НастройкиСинхронизацииСВнешнимиКалендарями
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокВнешнихКалендарей КАК СписокВнешнихКалендарей
	|		ПО НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря = СписокВнешнихКалендарей.Идентификатор
	|ГДЕ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря = &УчетнаяЗаписьВнешнегоКалендаря
	|	И НастройкиСинхронизацииСВнешнимиКалендарями.Статус = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря КАК ЗарегистрированныйКалендарьИдентификатор,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьDAVНаименование КАК ЗарегистрированныйКалендарьНаименование,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьСотрудника КАК КалендарьСотрудника,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.Статус КАК Статус,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.ТокенСинхронизации КАК ТокенСинхронизации,
	|	СписокВнешнихКалендарей.Идентификатор КАК ЗагруженныйКалендарьИдентификатор,
	|	СписокВнешнихКалендарей.Наименование КАК ЗагруженныйКалендарьНаименование,
	|	СписокВнешнихКалендарей.ТипКалендаря КАК ТипКалендаря	
	|	ПОМЕСТИТЬ ДанныеПоНовымКалендарям
	|ИЗ
	|	РегистрСведений.НастройкиСинхронизацииСВнешнимиКалендарями КАК НастройкиСинхронизацииСВнешнимиКалендарями
	|		ПРАВОЕ СОЕДИНЕНИЕ СписокВнешнихКалендарей КАК СписокВнешнихКалендарей
	|		ПО НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря = СписокВнешнихКалендарей.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоЗарегистрированнымКалендарям.ЗарегистрированныйКалендарьИдентификатор КАК КодВнешнегоКалендаря,
	|	ДанныеПоЗарегистрированнымКалендарям.ЗарегистрированныйКалендарьНаименование КАК КалендарьDAVНаименование,
	|	ДанныеПоЗарегистрированнымКалендарям.ТипКалендаря КАК ТипКалендаря,
	|	ЕСТЬNULL(ДанныеПоЗарегистрированнымКалендарям.ЗагруженныйКалендарьИдентификатор, """") КАК Идентификатор,
	|	ЕСТЬNULL(ДанныеПоЗарегистрированнымКалендарям.ЗагруженныйКалендарьНаименование, """") КАК Наименование,
	|	ДанныеПоЗарегистрированнымКалендарям.КалендарьСотрудника КАК КалендарьСотрудника,
	|	ДанныеПоЗарегистрированнымКалендарям.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	ДанныеПоЗарегистрированнымКалендарям.Статус КАК Статус,
	|	ДанныеПоЗарегистрированнымКалендарям.ТокенСинхронизации КАК ТокенСинхронизации
	|ИЗ
	|	ДанныеПоЗарегистрированнымКалендарям КАК ДанныеПоЗарегистрированнымКалендарям
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеПоНовымКалендарям.ЗарегистрированныйКалендарьИдентификатор,
	|	ДанныеПоНовымКалендарям.ЗарегистрированныйКалендарьНаименование,
	|	ДанныеПоНовымКалендарям.ТипКалендаря,
	|	ЕСТЬNULL(ДанныеПоНовымКалендарям.ЗагруженныйКалендарьИдентификатор, """"),
	|	ЕСТЬNULL(ДанныеПоНовымКалендарям.ЗагруженныйКалендарьНаименование, """"),
	|	ДанныеПоНовымКалендарям.КалендарьСотрудника,
	|	ДанныеПоНовымКалендарям.УчетнаяЗаписьВнешнегоКалендаря,
	|	ДанныеПоНовымКалендарям.Статус,
	|	ДанныеПоНовымКалендарям.ТокенСинхронизации
	|ИЗ
	|	ДанныеПоНовымКалендарям КАК ДанныеПоНовымКалендарям
	|ГДЕ
	|	ДанныеПоНовымКалендарям.Статус = ИСТИНА
	|	ИЛИ ДанныеПоНовымКалендарям.Статус ЕСТЬ NULL");
	Запрос.УстановитьПараметр("СписокКалендарейDAV", СписокКалендарейDAV);
	Запрос.УстановитьПараметр("УчетнаяЗаписьВнешнегоКалендаря", УчетнаяЗапись);
	РезультатЗапроса = Запрос.Выполнить();
	КартаСинхронизации = РезультатЗапроса.Выгрузить();
	
	СписокВсехИзменений = ПолучитьСписокВсехИзменений(УчетнаяЗапись);
	
	Для каждого Синхронизация Из КартаСинхронизации Цикл
		
		// Проверка на наличие ранее зарегистрированной синхронизации в регистре НастройкиСинхронизацииСВнешнимиКалендарями
		// Если регистрация найдена, выполняется процедура синхронизации между календарями (обмен событиями, переименование календаря если требуется)
		// Синхронизация между календарями осуществляется в следующем порядке:
		// - Выгрузка изменений из календаря сотрудника (1С:УНФ) во внешний календарь
		// - Загрузка изменений из внешнего календаря календарь сотрудника (1С:УНФ)
		// - Удаление событий в Календарях сотрудника, которые не были найдены на стороне Календарей внешнего сервиса
		// - Переименование Календаря, если требуется
		Если Синхронизация.КодВнешнегоКалендаря = Синхронизация.Идентификатор Тогда
			
			ОписаниеКалендаря = НовоеОписаниеКалендаря();
			ОписаниеКалендаря.Идентификатор = Синхронизация.КодВнешнегоКалендаря;
			ОписаниеКалендаря.Наименование = Синхронизация.КалендарьDAVНаименование;
			ОписаниеКалендаря.ТокенСинхронизации = Синхронизация.ТокенСинхронизации;
			ОписаниеКалендаря.КалендарьСотрудника = Синхронизация.КалендарьСотрудника;
			ОписаниеКалендаря.УчетнаяЗаписьВнешнегоКалендаря = Синхронизация.УчетнаяЗаписьВнешнегоКалендаря;
			ОписаниеКалендаря.ТипКалендаря = Синхронизация.ТипКалендаря;
			
			ВсеИзмененияКалендаря = ВыгрузитьВсеИзмененияКалендаря(СписокВсехИзменений, Синхронизация.КодВнешнегоКалендаря, Синхронизация.КалендарьСотрудника);
			ВыгрузитьВсеСобытия(ОписаниеКалендаря, ВсеИзмененияКалендаря); // Выгрузить события из 1С:УНФ во Внешний календарь
			ЗагрузитьВсеСобытия(ОписаниеКалендаря, ПараметрыПроцедурыСинхронизации); // Загрузить события из Внешнего календаря в 1С:УНФ
			УдалитьСобытияКалендаря(ДанныеАвторизации, ОписаниеКалендаря, ПараметрыПроцедурыСинхронизации);
			ПроверкаНаименованияКалендаря(ДанныеАвторизации, ОписаниеКалендаря);
			СохранитьНастройкиСинхронизации(ДанныеАвторизации, ОписаниеКалендаря);
			
		КонецЕсли;
		
		// Проверка на наличие удаленных Календарей Сотрудника ранее зарегистрированных в регистре НастройкиСинхронизацииСВнешнимиКалендарями.
		// Удаление данных о синхронизации в регистре НастройкиСинхронизацииСВнешнимиКалендарями в случае если Календарь сотрудника не найден.
		Если Синхронизация.КодВнешнегоКалендаря <> "" И Синхронизация.Идентификатор = "" Тогда
			
			МенеджерЗаписи = РегистрыСведений.НастройкиСинхронизацииСВнешнимиКалендарями.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.КодВнешнегоКалендаря = Синхронизация.КодВнешнегоКалендаря;
			МенеджерЗаписи.УчетнаяЗаписьВнешнегоКалендаря = ДанныеАвторизации.УчетнаяЗаписьВнешнегоКалендаря;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Удалить();
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если Не УчетнаяЗапись.Пустая() Тогда
		УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
		УчетнаяЗаписьОбъект.Заблокировать();
		УчетнаяЗаписьОбъект.ДатаСинхронизации = ТекущаяДатаСеанса();
		УчетнаяЗаписьОбъект.Записать();
		УчетнаяЗаписьОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Сохранение информации о данных синхронизации в дополнительном свойстве "ВнешнийКалендарь" передаваемого объекта
// 
// Параметры:
//  Объект - ДокументСсылка.ЗадачаСотрудника или СправочникСсылка.ЗаписиКалендаряСотрудника
//
Процедура ПередЗаписьюИсточникаЗаписиКалендаря(Объект) Экспорт
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Объект.ОбменДанными.Получатели.Очистить();
	
	// Задачи с пустой датой начала не регистрируются для синхронизации с внешними календарями
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗадачаСотрудника") И Объект.ДатаНачала = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаСинхронизации = РегистрыСведений.НастройкиСинхронизацииСВнешнимиКалендарями.НайтиПоКалендарюСотрудника(Объект.Календарь);
	Если НастройкаСинхронизации <> Неопределено Тогда
		Объект.ДополнительныеСвойства.Вставить("ВнешнийКалендарь", НастройкаСинхронизации);
	КонецЕсли;
	
КонецПроцедуры

// Сохранение данных синхронизации о событии Календаря сотрудника в регистре ДанныеСобытийВнешнихКалендарей
// Регистрация о новом событии в плане обмена
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗадачаСотрудника или СправочникСсылка.ЗаписиКалендаряСотрудника
//  ИдентификаторВнешнегоКалендаря - Идентификатор календаря внешнего сервиса сохраняемый в регистре НастройкиСинхронизацииСВнешнимиКалендарями
//
Процедура ЗарегистрироватьСобытиеВНовыйПланОбмена(Ссылка, ИдентификаторВнешнегоКалендаря) Экспорт
	
	УзелДляКалендаряDAV = ПланыОбмена.ОбменСКалендарямиDAV.УзелДляВнешнегоКалендаря(Ссылка.Календарь);
	ПланыОбмена.ЗарегистрироватьИзменения(УзелДляКалендаряDAV, Ссылка);
	
КонецПроцедуры

// Обновление данных о событии календаря сотрудника в регистре сведений
// Регистрация изменений в плане обмена
//
// Параметры:
//  Объект - ДокументСсылка.ЗадачаСотрудника или СправочникСсылка.ЗаписиКалендаряСотрудника
//
Процедура ПриЗаписиИсточникаЗаписиКалендаря(Объект) Экспорт
	
	// Задачи с пустой датой начала не регистрируются для синхронизации с внешними календарями
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗадачаСотрудника") И Объект.ДатаНачала = Дата('00010101') Тогда
		Возврат;
	КонецЕсли;
	
	// Задачи и события для календарей, которые не синхронизируются с внешними календарями, не регистрируются
	Если Не Объект.ДополнительныеСвойства.Свойство("ВнешнийКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбмена = ДанныеЗаписейКалендарейDAV(Объект);
	ЗаполнитьПараметрыОбменаDAVВЗаписи(Объект, ДанныеОбмена);
	ЗаполнитьКлючевыеПоляЗаписиВнешнегоКалендаря(Объект, ДанныеОбмена);
	ЗарегистрироватьИзменениеВПланеОбмена(Объект, ДанныеОбмена);
	ДанныеОбмена.Записать();
	
КонецПроцедуры

// Функция возвращает данные авторизации для доступа к данным календарей внешнего сервиса
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиВнешнихКалендарей
// 
// Возвращаемое значение:
//  Структура - с данными авторизации включая адрес к каталогу календарей внешнего сервиса
//
Функция ЗагрузитьДанныеАвторизации(УчетнаяЗапись) Экспорт
	
	Попытка
		ЗаписьАвторизации = Справочники.УчетныеЗаписиВнешнихКалендарей.НайтиПоКоду(УчетнаяЗапись.Код);
		
		УстановитьПривилегированныйРежим(Истина);
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ЗаписьАвторизации, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		
		ДанныеАвторизации = Новый Структура;
		ДанныеАвторизации.Вставить("Сервер", ЗаписьАвторизации.Сервер);
		ДанныеАвторизации.Вставить("Логин", ЗаписьАвторизации.Наименование);
		ДанныеАвторизации.Вставить("Пароль", Пароль);
		ДанныеАвторизации.Вставить("КаталогКалендарей",	ЗаписьАвторизации.КаталогКалендарей);
		ДанныеАвторизации.Вставить("УчетнаяЗаписьВнешнегоКалендаря", ЗаписьАвторизации.Ссылка);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДанныеАвторизации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конструкторы

Функция НовыеПараметрыПроцедурыСинхронизации()
	
	Результат = Новый Структура;
	Результат.Вставить("Узлы",				Новый Массив);
	Результат.Вставить("ДатаНачала",		НачалоДня(ТекущаяДатаСеанса()) - 2592000);
	Результат.Вставить("ДатаОкончания",		НачалоДня(ТекущаяДатаСеанса()) + 2592000);
	Возврат Результат;
	
КонецФункции

Функция НовоеОписаниеКалендаря()
	
	ОписаниеКалендаря = Новый Структура;
	ОписаниеКалендаря.Вставить("ТипСинхронизации",					Перечисления.ТипыСинхронизацииКалендарей.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("Узел",								ПланыОбмена.ОбменСКалендарямиDAV.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("ВремяУведомленийЭкспорт",			0);
	ОписаниеКалендаря.Вставить("ВремяУведомленийИмпорт",			0);
	ОписаниеКалендаря.Вставить("Наименование",						"");
	ОписаниеКалендаря.Вставить("Идентификатор",						"");
	ОписаниеКалендаря.Вставить("ТокенСинхронизации",				"");
	ОписаниеКалендаря.Вставить("КалендарьСотрудника",				Справочники.КалендариСотрудников.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("УчетнаяЗаписьВнешнегоКалендаря",	Справочники.УчетныеЗаписиВнешнихКалендарей.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("БезОписания",						Ложь);
	ОписаниеКалендаря.Вставить("ТипКалендаря",						Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(6)));
	ОписаниеКалендаря.Вставить("ДатаПервоначальнойСинхронизации", 	Дата(1,1,1));
	ОписаниеКалендаря.Вставить("ОбновлениеНастроек",			 	Ложь);
	ОписаниеКалендаря.Вставить("События",							НовоеОписаниеСобытийКалендаря());
	Возврат ОписаниеКалендаря;
	
КонецФункции

Функция НовоеОписаниеСобытийКалендаря()
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("СправочникСсылка.ЗаписиКалендаряСотрудника"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ЗадачаСотрудника"));
	СписокТипов.Добавить(Тип("СправочникСсылка.КалендариСотрудников"));
	
	ОписаниеНапоминания = Новый Структура;
	ОписаниеНапоминания.Вставить("СрокНапоминания", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеНапоминания.Вставить("ИнтервалВремениНапоминания", Новый ОписаниеТипов("Число"));
	ОписаниеНапоминания.Вставить("ИмяРеквизитаИсточника", Новый ОписаниеТипов("Строка"));
	ОписаниеНапоминания.Вставить("СпособУстановкиВремениНапоминания", Перечисления.СпособыУстановкиВремениНапоминания.ПустаяСсылка());
	
	ОписаниеСобытий = Новый ТаблицаЗначений;
	ОписаниеСобытий.Колонки.Добавить("ТипОбъекта",				Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("Наименование",			Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("Описание",				Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеСобытий.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеСобытий.Колонки.Добавить("Идентификатор",			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ОписаниеСобытий.Колонки.Добавить("ОтпечатокОбъекта",		Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ПометкаУдаления",			Новый ОписаниеТипов("Булево"));
	ОписаниеСобытий.Колонки.Добавить("Ссылка",					Новый ОписаниеТипов(СписокТипов));
	ОписаниеСобытий.Колонки.Добавить("ИдентификаторПовторения",	Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ДатаИсключения",			Новый ОписаниеТипов("Дата"));
	ОписаниеСобытий.Колонки.Добавить("ВремяНапоминания",		Новый ОписаниеТипов("Число"));
	ОписаниеСобытий.Колонки.Добавить("Напоминания",				Неопределено);
	ОписаниеСобытий.Колонки.Добавить("Выполнена",				Неопределено);
	Возврат ОписаниеСобытий;
	
КонецФункции

#КонецОбласти

Функция ДанныеЗаписейКалендарейDAV(Источник)
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда
		Ссылка = Источник;
	Иначе
		Ссылка = Источник.Ссылка;
	КонецЕсли;
	
	Запись = РегистрыСведений.ДанныеСобытийВнешнихКалендарей.СоздатьМенеджерЗаписи();
	Запись.Источник = Ссылка;
	Запись.Прочитать();
		
	Возврат Запись;
	
КонецФункции

Процедура ЗаполнитьПараметрыОбменаDAVВЗаписи(Объект, ДанныеОбмена)
	
	// Наличие свойства ОбменDAV определяет передачу данных из Внешнего календаря в Календарь Сотрудника
	Если Не Объект.ДополнительныеСвойства.Свойство("ОбменDAV") Тогда
		Возврат;
	КонецЕсли;
	ДанныеОбмена.Идентификатор = Объект.ДополнительныеСвойства.ОбменDAV.Идентификатор;
	ДанныеОбмена.ИдентификаторКалендаря = Объект.ДополнительныеСвойства.ОбменDAV.ИдентификаторКалендаря;
	ДанныеОбмена.ОтпечатокОбъекта = Объект.ДополнительныеСвойства.ОбменDAV.ОтпечатокОбъекта;
	
КонецПроцедуры

Процедура ЗаполнитьКлючевыеПоляЗаписиВнешнегоКалендаря(Объект, ДанныеОбмена)
	
	ДанныеОбмена.Источник = Объект.Ссылка;
	ДанныеОбмена.Календарь = Объект.Календарь;
	
	// Наличие свойства ВнешнийКалендарь определяет передачу данных из Календаря Сотрудника во Внешний Календарь
	Если Объект.ДополнительныеСвойства.Свойство("ВнешнийКалендарь") Тогда
		
		Если ЗначениеЗаполнено(ДанныеОбмена.ИдентификаторКалендаря) // Объект ранее синхронизирован с другим внешним календарем
			И ДанныеОбмена.ИдентификаторКалендаря <> Объект.ДополнительныеСвойства.ВнешнийКалендарь.КодВнешнегоКалендаря Тогда // Смена внешнего календаря
			ДанныеОбмена.ОтпечатокОбъекта = "";
			ДанныеОбмена.Идентификатор = "";
		КонецЕсли;
		
		ДанныеОбмена.ИдентификаторКалендаря = Объект.ДополнительныеСвойства.ВнешнийКалендарь.КодВнешнегоКалендаря;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеОбмена.Идентификатор) Тогда
		ДанныеОбмена.Идентификатор = СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеВПланеОбмена(Объект, ДанныеОбмена)
	
	Если Не ЗначениеЗаполнено(Объект.Календарь) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ОбменDAV") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ВнешнийКалендарь") Тогда
		НастройкаСинхронизации = Объект.ДополнительныеСвойства.ВнешнийКалендарь;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не НастройкаСинхронизации.Статус Тогда
		ДанныеОбмена.ОтпечатокОбъекта = "";
		Возврат;
	КонецЕсли;
	
	УзелДляКалендаряDAV = ПланыОбмена.ОбменСКалендарямиDAV.УзелДляВнешнегоКалендаря(Объект.Календарь);
	
	Объект.ОбменДанными.Получатели.Добавить(УзелДляКалендаряDAV);
	
	Если ДанныеОбмена <> Неопределено И Не ЗначениеЗаполнено(ДанныеОбмена.ОтпечатокОбъекта) Тогда
		УдалитьДублированиеРегистрацииИзменений(Объект.Ссылка, УзелДляКалендаряDAV);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет регистрацию изменений в случае, когда у объекта был изменен календарь перед выгрузкой
Процедура УдалитьДублированиеРегистрацииИзменений(Ссылка, УзелДляКалендаря)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаписиКалендаряСотрудникаИзменения.Узел КАК Узел
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника.Изменения КАК ЗаписиКалендаряСотрудникаИзменения
	|ГДЕ
	|	ЗаписиКалендаряСотрудникаИзменения.Ссылка = &Ссылка
	|	И ЗаписиКалендаряСотрудникаИзменения.Узел <> &Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачаСотрудникаИзменения.Узел
	|ИЗ
	|	Документ.ЗадачаСотрудника.Изменения КАК ЗадачаСотрудникаИзменения
	|ГДЕ
	|	ЗадачаСотрудникаИзменения.Ссылка = &Ссылка
	|	И ЗадачаСотрудникаИзменения.Узел <> &Узел");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Узел", УзелДляКалендаря);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0), Ссылка);
	
КонецПроцедуры

Процедура СохранитьНастройкиСинхронизации(ДанныеАвторизации, ОписаниеКалендаря)
	
	МенеджерЗаписи = РегистрыСведений.НастройкиСинхронизацииСВнешнимиКалендарями.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗаписьВнешнегоКалендаря = ДанныеАвторизации.УчетнаяЗаписьВнешнегоКалендаря;
	МенеджерЗаписи.КодВнешнегоКалендаря = ОписаниеКалендаря.Идентификатор;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.КалендарьDAVНаименование = ОписаниеКалендаря.КалендарьСотрудника.Наименование;
	МенеджерЗаписи.ТокенСинхронизации = ОписаниеКалендаря.ТокенСинхронизации;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ВыгрузитьВсеСобытия(ОписаниеКалендаря, ВсеИзмененияКалендаря)
	
	Если ОписаниеКалендаря.События.Количество() > 0 Тогда
		ОписаниеКалендаря.События = НовоеОписаниеСобытийКалендаря();
	КонецЕсли;
	
	Если ВсеИзмененияКалендаря.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ИзменениеКалендаря Из ВсеИзмененияКалендаря Цикл
		ОписаниеКалендаря.Узел = ИзменениеКалендаря.Узел;
		ПодготовкаСобытияКалендаря(ИзменениеКалендаря, ОписаниеКалендаря);
	КонецЦикла;
	
	СинхронизацияDAV.ВыгрузитьДанныеКалендаря(ОписаниеКалендаря);
	
КонецПроцедуры

Процедура ПодготовкаСобытияКалендаря(ИзменениеКалендаря, ОписаниеКалендаря)
	
	// Пустая ссылка на объект (событие или задача полностью удалена из 1С:УНФ)
	Если Не ЗначениеЗаполнено(ИзменениеКалендаря.Источник) ИЛИ Не ЗначениеЗаполнено(ИзменениеКалендаря.Источник.Календарь) Тогда
		Если ТипЗнч(ИзменениеКалендаря.Ссылка) = Тип("СправочникСсылка.КалендариСотрудников")
			И ОписаниеКалендаря.УчетнаяЗаписьВнешнегоКалендаря.Сервер <> "caldav.icloud.com" Тогда
			ОписаниеКалендаря.Наименование = ИзменениеКалендаря.Ссылка.Наименование;
			Событие = ОписаниеКалендаря.События.Добавить();
			Событие.Ссылка = ИзменениеКалендаря.Ссылка;
			Событие.ТипОбъекта = "Календарь";
		Иначе
			ПланыОбмена.УдалитьРегистрациюИзменений(ОписаниеКалендаря.Узел, ИзменениеКалендаря.Ссылка);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Заполняем атрибуты события календаря
	Источник = ИзменениеКалендаря.Источник;
	СекундВСутках = 86400;
	Событие = ОписаниеКалендаря.События.Добавить();
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда
		Событие.Идентификатор = ИзменениеКалендаря.ИдентификаторСобытия;
		Если ЗначениеЗаполнено(ИзменениеКалендаря.ОтпечатокОбъекта) Тогда
			Событие.ОтпечатокОбъекта = ИзменениеКалендаря.ОтпечатокОбъекта;
		КонецЕсли;
		Событие.Ссылка = Источник;
		Событие.ТипОбъекта = "Событие";
		Событие.Наименование = Источник.Наименование;
		Событие.Описание = Источник.Описание;
		Событие.ДатаНачала = Источник.Начало;
		Событие.ДатаОкончания = Источник.Окончание;
		Событие.ВремяНапоминания = НапоминанияПользователя.НайтиНапоминания(Источник, "АвтоматическоеНапоминание");
		Событие.Напоминания = НапоминанияПользователя.НайтиНапоминания(Источник);
		Событие.ПометкаУдаления = Источник.ПометкаУдаления;
		Если ОписаниеКалендаря.ТипКалендаря = "VTODO" Тогда
			Событие.Выполнена = Источник.Завершено; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Событие.Идентификатор = ИзменениеКалендаря.ИдентификаторСобытия;
		Если ЗначениеЗаполнено(ИзменениеКалендаря.ОтпечатокОбъекта) Тогда
			Событие.ОтпечатокОбъекта = ИзменениеКалендаря.ОтпечатокОбъекта;
		КонецЕсли;
		Событие.Ссылка = Источник;
		Событие.ТипОбъекта = "Задача";
		Событие.Наименование = Источник.Наименование;
		Событие.Описание = Источник.Описание;
		Событие.ДатаНачала = Источник.ДатаНачала;
		Событие.ДатаОкончания = Источник.ДатаОкончания;
		Событие.Напоминания = НапоминанияПользователя.НайтиНапоминания(Источник);
		Событие.ПометкаУдаления = Источник.ПометкаУдаления;
		Если Не ЗначениеЗаполнено(Событие.ДатаОкончания) Тогда
			Событие.ДатаОкончания = Событие.ДатаНачала + СекундВСутках;
		КонецЕсли;
		Событие.ВремяНапоминания = НапоминанияПользователя.НайтиНапоминания(Источник, "АвтоматическоеНапоминание");
		Если ОписаниеКалендаря.ТипКалендаря = "VTODO" Тогда
			Событие.Выполнена = Источник.Выполнена; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.КалендариСотрудников") Тогда
		Событие.Идентификатор = ИзменениеКалендаря.ИдентификаторСобытия;
		Если ЗначениеЗаполнено(ИзменениеКалендаря.ОтпечатокОбъекта) Тогда
			Событие.ОтпечатокОбъекта = ИзменениеКалендаря.ОтпечатокОбъекта;
		КонецЕсли;
		Событие.Ссылка = Источник;
		Событие.ТипОбъекта = "Календарь";
		Событие.Наименование = Источник.Наименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьВсеСобытия(ОписаниеКалендаря, ПараметрыПроцедурыСинхронизации)
	
	ДатаНачала = ПараметрыПроцедурыСинхронизации.ДатаНачала;
	ДатаОкончания = ПараметрыПроцедурыСинхронизации.ДатаОкончания;
	
	Если ОписаниеКалендаря.События.Количество() > 0 Тогда
		ОписаниеКалендаря.События = НовоеОписаниеСобытийКалендаря();
	КонецЕсли;
	
	СинхронизацияDAV.ЗаполнитьСобытияКалендаря(ОписаниеКалендаря, ДатаНачала, ДатаОкончания);
	
	Для каждого СобытиеDAV Из ОписаниеКалендаря.События Цикл
		ОбновитьЗаписьКалендаря(СобытиеDAV, ОписаниеКалендаря);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСобытияКалендаря(ДанныеАвторизации, ОписаниеКалендаря, ПараметрыПроцедурыСинхронизации)

	ДатаНачала = ПараметрыПроцедурыСинхронизации.ДатаНачала;
	ДатаОкончания = ПараметрыПроцедурыСинхронизации.ДатаОкончания;
	
	// Получение списка событий из Календаря DAV за период ДатаНачала - ДатаОкончания
	СинхронизацияDAV.ЗагрузитьВсеСобытияКалендаряЗаПериод(ДанныеАвторизации, ОписаниеКалендаря, ДатаНачала, ДатаОкончания);
	
	// Получение списка всех событий Календаря сотрудника за период ДатаНачала - ДатаОкончания
	ТаблицаСписокСобытий = ВыборкаСобытийЗаПериод(ОписаниеКалендаря, ДатаНачала, ДатаОкончания);
	Если ТаблицаСписокСобытий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка данных по событиям
	СписокСобытийНаПроверку = Новый Массив;
	Для каждого Событие Из ТаблицаСписокСобытий Цикл
		СписокСобытийНаПроверку.Добавить(СтрШаблон("/%1%2/%3.ics", ДанныеАвторизации.КаталогКалендарей, Событие.ИдентификаторКалендаря, Событие.Идентификатор));
	КонецЦикла;
	
	СинхронизацияDAV.ПолучитьДанныеПоСобытиям(СписокСобытийНаПроверку, ОписаниеКалендаря, ДанныеАвторизации);
	
	// Обновление данные событий календаря найденных во внешнем календаре после проверки (шаг 4)
	// Удаление событий в календаре и в регистре, которые не были найдены во внешнем календаре
	Для каждого Событие Из ОписаниеКалендаря.События  Цикл
		Если Событие.ОтпечатокОбъекта = "" Тогда
			МенеджерЗаписиДанныеПоСобытию = РегистрыСведений.ДанныеСобытийВнешнихКалендарей.НайтиПоИдентификаторуСобытия(Событие.Идентификатор);
			СобытиеКалендаря = МенеджерЗаписиДанныеПоСобытию.Источник.ПолучитьОбъект();
			СобытиеКалендаря.ПометкаУдаления = Истина;
			СобытиеКалендаря.ОбменДанными.Загрузка = Истина;
			ПередЗаписьюИсточникаЗаписиКалендаря(СобытиеКалендаря);
			СобытиеКалендаря.Записать();
		Иначе
			ОбновитьЗаписьКалендаря(Событие, ОписаниеКалендаря);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Переименование календаря сотрудника в случае если соответствующий внешний календарь был переименован
Процедура ПроверкаНаименованияКалендаря(ДанныеАвторизации, ОписаниеКалендаря)
	
	НаименованиеКалендаряDAV = СинхронизацияDAV.ПолучитьИмяКалендаряDAV(ДанныеАвторизации, ОписаниеКалендаря);
	
	Если ОписаниеКалендаря.КалендарьСотрудника.Наименование = НаименованиеКалендаряDAV Тогда
		Возврат;
	КонецЕсли;
	
	КалендарьСотрудника = ОписаниеКалендаря.КалендарьСотрудника.ПолучитьОбъект();
	КалендарьСотрудника.Наименование = НаименованиеКалендаряDAV;
	КалендарьСотрудника.ДополнительныеСвойства.Вставить("ИзмененоНаименованиеВнешнегоКалендаря", Истина);
	КалендарьСотрудника.ОбменДанными.Загрузка = Истина;
	КалендарьСотрудника.Записать();
	
КонецПроцедуры

Процедура ОбновитьЗаписьКалендаря(ЗаписьКалендаря, ОписаниеКалендаря)
	
	ЗаписьРегистра = ЗаписьКалендаряПоИдентификатору(ЗаписьКалендаря.Идентификатор, ОписаниеКалендаря.КалендарьСотрудника);
	ЗаписьОбъект = ЗаписьРегистра.Источник;
	ЗаписьОбъект.ПометкаУдаления = "cancelled";
	
	Если Не ЗаписьОбъект.ПометкаУдаления И ЗаписьРегистра.ОтпечатокОбъекта = ЗаписьКалендаря.ОтпечатокОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаписьОбъект.ПометкаУдаления И Не ЗначениеЗаполнено(ЗаписьОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Если ТипЗнч(ЗаписьОбъект) = Тип("СправочникОбъект.ЗаписиКалендаряСотрудника") Тогда
		ДанныеЗаполнения.Вставить("Наименование", ЗаписьКалендаря["Наименование"]);
		ДанныеЗаполнения.Вставить("Описание", ЗаписьКалендаря["Описание"]);
		ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "Начало", ЗаписьКалендаря, "ДатаНачала");
		ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "Окончание", ЗаписьКалендаря, "ДатаОкончания");
	ИначеЕсли ТипЗнч(ЗаписьОбъект) = Тип("ДокументОбъект.ЗадачаСотрудника") Тогда
		Если Не ЗначениеЗаполнено(ЗаписьОбъект.Ответственный) Тогда
			ДанныеЗаполнения.Вставить("Ответственный", ОписаниеКалендаря.КалендарьСотрудника.ВладелецКалендаря);
			ДанныеЗаполнения.Вставить("Автор", ОписаниеКалендаря.КалендарьСотрудника.Пользователь);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Наименование", ЗаписьКалендаря["Наименование"]);
		ДанныеЗаполнения.Вставить("Описание", ЗаписьКалендаря["Наименование"] + Символы.ПС + ЗаписьКалендаря["Описание"]);
		Если ОписаниеКалендаря.ТипКалендаря = "VEVENT" Тогда
			ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "ДатаНачала", ЗаписьКалендаря, "ДатаНачала");
			ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "ДатаОкончания", ЗаписьКалендаря, "ДатаОкончания");
		ИначеЕсли ОписаниеКалендаря.ТипКалендаря = "VTODO" Тогда
			Если ЗаписьОбъект.ДатаОкончания = Дата('00010101') Тогда
				ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "ДатаНачала", ЗаписьКалендаря, "ДатаНачала");
			Иначе
				Позиция = СтрНайти(Строка(ЗаписьОбъект.ДатаНачала), " ");
				Время = Прав(ЗаписьОбъект.ДатаНачала, СтрДлина(ЗаписьОбъект.ДатаНачала) - Позиция);
				ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "ДатаНачала", ЗаписьКалендаря, "ДатаНачала", Время);
			КонецЕсли;
			Если Не ЗаписьКалендаря["ДатаНачала"] = ЗаписьКалендаря["ДатаОкончания"] Тогда
				ЗаполнитьПолеДатаВремя(ДанныеЗаполнения, "ДатаОкончания", ЗаписьКалендаря, "ДатаОкончания");
			КонецЕсли;
			ДанныеЗаполнения.Вставить("Выполнена", ЗаписьКалендаря.Выполнена);
		КонецЕсли;
		СместитьДатыНачалаОкончанияЗадачиЕслиНеобходимо(ДанныеЗаполнения);
	КонецЕсли;
	ДанныеЗаполнения.Вставить("Календарь", ОписаниеКалендаря.КалендарьСотрудника);
	ЗаписьОбъект.Заполнить(ДанныеЗаполнения);
	
	ДополнительныеСвойстваОбменDAV = Новый Структура;
	ДополнительныеСвойстваОбменDAV.Вставить("Идентификатор", ЗаписьКалендаря["Идентификатор"]);
	ДополнительныеСвойстваОбменDAV.Вставить("ИдентификаторКалендаря", ОписаниеКалендаря.Идентификатор);
	ДополнительныеСвойстваОбменDAV.Вставить("ОтпечатокОбъекта", ЗаписьКалендаря["ОтпечатокОбъекта"]);
	ЗаписьОбъект.ДополнительныеСвойства.Вставить("ОбменDAV", ДополнительныеСвойстваОбменDAV);
	Попытка
		ЗаписьОбъект.ОбменДанными.Загрузка = Истина;
		ПередЗаписьюИсточникаЗаписиКалендаря(ЗаписьОбъект);
		ЗаписьОбъект.Записать();
		ПриЗаписиИсточникаЗаписиКалендаря(ЗаписьОбъект);
		СохранитьНапоминания(ЗаписьКалендаря, ЗаписьОбъект);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура СохранитьНапоминания(Событие, ЗаписьОбъект)
	
	Если Событие.Напоминания <> Неопределено И Событие.Напоминания.Количество() > 0 Тогда
		
		НапоминанияСобытия = НапоминанияПользователя.НайтиНапоминания(ЗаписьОбъект.Ссылка);
		Для каждого Напоминание Из НапоминанияСобытия Цикл
			НапоминанияПользователя.УдалитьНапоминание(Напоминание);
		КонецЦикла;
		
		Для каждого Напоминание Из Событие.Напоминания Цикл
			Если ТипЗнч(ЗаписьОбъект) = Тип("СправочникОбъект.ЗаписиКалендаряСотрудника") Тогда
				НапоминанияПользователя.УстановитьНапоминание(ЗаписьОбъект.Наименование, ЗаписьОбъект.Начало, Напоминание.ВремяНапоминания, ЗаписьОбъект.Ссылка);
			ИначеЕсли ТипЗнч(ЗаписьОбъект) = Тип("ДокументОбъект.ЗадачаСотрудника")Тогда
				НапоминанияПользователя.УстановитьНапоминание(ЗаписьОбъект.Наименование, ЗаписьОбъект.ДатаНачала, Напоминание.ВремяНапоминания, ЗаписьОбъект.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПолеДатаВремя(Приемник, ИмяПоляПриемник, Источник, ИмяПоляИсточник, Время = Неопределено)
	
	Если Не ЗначениеЗаполнено(Источник[ИмяПоляИсточник]) Тогда
		Возврат;
	КонецЕсли;
	Если Время <> Неопределено Тогда
		ДатаВремя = Строка(Источник[ИмяПоляИсточник]);
		Позиция = СтрНайти(ДатаВремя, " ");
		ДатаВремя = Лев(ДатаВремя, Позиция - 1);
		ДатаВремя = СтрШаблон("%1 %2", ДатаВремя, Время);
		ЗначениеПоляДатаВремя = ДатаВремя;
	Иначе
		ЗначениеПоляДатаВремя = Источник[ИмяПоляИсточник];
	КонецЕсли;
	ЗначениеПриведенноеКЧасовомуПоясуИБ = МестноеВремя(УниверсальноеВремя(ЗначениеПоляДатаВремя), ПолучитьЧасовойПоясИнформационнойБазы());
	Приемник.Вставить(ИмяПоляПриемник, ЗначениеПриведенноеКЧасовомуПоясуИБ);
	
КонецПроцедуры

Процедура СместитьДатыНачалаОкончанияЗадачиЕслиНеобходимо(ДанныеЗаполнения)
	
	Если Не ДанныеЗаполнения.Свойство("ДатаНачала")
		Или Не ДанныеЗаполнения.Свойство("ДатаОкончания") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ДатаНачала)
		Или Не ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	СекундВСутках = 86400;
	ДлительностьЗадачи = ДанныеЗаполнения.ДатаОкончания - ДанныеЗаполнения.ДатаНачала;
	
	ЭтоЗадачаВесьДень = ДанныеЗаполнения.ДатаНачала = НачалоДня(ДанныеЗаполнения.ДатаНачала)
	И ДлительностьЗадачи = СекундВСутках;
	
	Если Не ЭтоЗадачаВесьДень Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения.ДатаОкончания = Дата(1, 1, 1);
	
КонецПроцедуры

Функция ЗаписьКалендаряПоИдентификатору(Идентификатор, Календарь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеСобытийВнешнихКалендарей.Источник КАК Источник,
	|	ДанныеСобытийВнешнихКалендарей.Календарь КАК Календарь,
	|	ДанныеСобытийВнешнихКалендарей.Идентификатор КАК Идентификатор,
	|	ДанныеСобытийВнешнихКалендарей.ИдентификаторКалендаря КАК ИдентификаторКалендаря,
	|	ДанныеСобытийВнешнихКалендарей.ОтпечатокОбъекта КАК ОтпечатокОбъекта
	|ИЗ
	|	РегистрСведений.ДанныеСобытийВнешнихКалендарей КАК ДанныеСобытийВнешнихКалендарей
	|ГДЕ
	|	ДанныеСобытийВнешнихКалендарей.Календарь = &Календарь
	|	И ДанныеСобытийВнешнихКалендарей.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Результат = Новый Структура();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НовыйДокумент = Документы.ЗадачаСотрудника.СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДатаСеанса();
		Результат.Вставить("Источник", НовыйДокумент);
		Результат.Вставить("Идентификатор",	"");
		Результат.Вставить("ИдентификаторКалендаря", "");
		Результат.Вставить("ОтпечатокОбъекта", "");
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Результат.Вставить("Источник", Выборка.Источник.ПолучитьОбъект());
	Результат.Вставить("Идентификатор",	Выборка.Идентификатор);
	Результат.Вставить("ИдентификаторКалендаря", Выборка.ИдентификаторКалендаря);
	Результат.Вставить("ОтпечатокОбъекта", Выборка.ОтпечатокОбъекта);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокВсехИзменений(УчетнаяЗаписьВнешнегоКалендаря)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьDAVНаименование КАК КалендарьDAVНаименование,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьСотрудника КАК КалендарьСотрудника,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.Статус КАК Статус,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.ТокенСинхронизации КАК ТокенСинхронизации
	|ПОМЕСТИТЬ ВсеНастройкиСинхронизацииУчетнойЗаписи
	|ИЗ
	|	РегистрСведений.НастройкиСинхронизацииСВнешнимиКалендарями КАК НастройкиСинхронизацииСВнешнимиКалендарями
	|ГДЕ
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря = &УчетнаяЗаписьВнешнегоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиКалендаряСотрудникаИзменения.Узел КАК Узел,
	|	ЗаписиКалендаряСотрудникаИзменения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВсеСобытия
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника.Изменения КАК ЗаписиКалендаряСотрудникаИзменения
	|ГДЕ
	|	ЗаписиКалендаряСотрудникаИзменения.Узел <> &ЭтотУзел
	|	И ЗаписиКалендаряСотрудникаИзменения.Узел ССЫЛКА ПланОбмена.ОбменСКалендарямиDAV
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачаСотрудникаИзменения.Узел,
	|	ЗадачаСотрудникаИзменения.Ссылка
	|ИЗ
	|	Документ.ЗадачаСотрудника.Изменения КАК ЗадачаСотрудникаИзменения
	|ГДЕ
	|	ЗадачаСотрудникаИзменения.Узел <> &ЭтотУзел
	|	И ЗадачаСотрудникаИзменения.Узел ССЫЛКА ПланОбмена.ОбменСКалендарямиDAV
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КалендариСотрудниковИзменения.Узел,
	|	КалендариСотрудниковИзменения.Ссылка
	|ИЗ
	|	Справочник.КалендариСотрудников.Изменения КАК КалендариСотрудниковИзменения
	|ГДЕ
	|	КалендариСотрудниковИзменения.Узел <> &ЭтотУзел
	|	И КалендариСотрудниковИзменения.Узел ССЫЛКА ПланОбмена.ОбменСКалендарямиDAV
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСобытия.Узел КАК Узел,
	|	ВсеСобытия.Ссылка КАК Ссылка,
	|	ДанныеСобытийВнешнихКалендарей.Источник КАК Источник,
	|	ДанныеСобытийВнешнихКалендарей.Календарь КАК Календарь,
	|	ДанныеСобытийВнешнихКалендарей.Идентификатор КАК Идентификатор,
	|	ДанныеСобытийВнешнихКалендарей.ИдентификаторКалендаря КАК ИдентификаторКалендаря,
	|	ДанныеСобытийВнешнихКалендарей.ОтпечатокОбъекта КАК ОтпечатокОбъекта
	|ПОМЕСТИТЬ ДанныеСобытий
	|ИЗ
	|	ВсеСобытия КАК ВсеСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСобытийВнешнихКалендарей КАК ДанныеСобытийВнешнихКалендарей
	|		ПО ВсеСобытия.Ссылка = ДанныеСобытийВнешнихКалендарей.Источник
	|ГДЕ
	|	ВсеСобытия.Узел.УчетнаяЗаписьВнешнегоКалендаря = &УчетнаяЗаписьВнешнегоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСобытий.Узел КАК Узел,
	|	ДанныеСобытий.Ссылка КАК Ссылка,
	|	ДанныеСобытий.Источник КАК Источник,	
	|	ДанныеСобытий.Идентификатор КАК ИдентификаторСобытия,
	|	ДанныеСобытий.ОтпечатокОбъекта КАК ОтпечатокОбъекта,
	|	ВсеНастройкиСинхронизацииУчетнойЗаписи.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	ВсеНастройкиСинхронизацииУчетнойЗаписи.КалендарьСотрудника КАК КалендарьСотрудника
	|ИЗ
	|	ДанныеСобытий КАК ДанныеСобытий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеНастройкиСинхронизацииУчетнойЗаписи КАК ВсеНастройкиСинхронизацииУчетнойЗаписи
	|		ПО ДанныеСобытий.Календарь = ВсеНастройкиСинхронизацииУчетнойЗаписи.КалендарьСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСобытий.Узел");
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменСКалендарямиDAV.ЭтотУзел());
	Запрос.УстановитьПараметр("УчетнаяЗаписьВнешнегоКалендаря", УчетнаяЗаписьВнешнегоКалендаря);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ВыгрузитьВсеИзмененияКалендаря(ВсеСобытия, КодВнешнегоКалендаря, КалендарьСотрудника);
	
	Если ВсеСобытия.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВсеСобытия.Узел,
	|	ВсеСобытия.Ссылка,
	|	ВсеСобытия.Источник,
	|	ВсеСобытия.ИдентификаторСобытия КАК ИдентификаторСобытия,
	|	ВсеСобытия.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	ВсеСобытия.КалендарьСотрудника КАК КалендарьСотрудника,
	|	ВсеСобытия.ОтпечатокОбъекта КАК ОтпечатокОбъекта
	|	ПОМЕСТИТЬ ВсеСобытия
	|ИЗ
	|	&ВсеСобытия КАК ВсеСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСобытия.Узел,
	|	ВсеСобытия.Ссылка,
	|	ВсеСобытия.Источник,
	|	ВсеСобытия.ИдентификаторСобытия КАК ИдентификаторСобытия,
	|	ВсеСобытия.КодВнешнегоКалендаря КАК КодВнешнегоКалендаря,
	|	ВсеСобытия.КалендарьСотрудника КАК КалендарьСотрудника,
	|	ВсеСобытия.ОтпечатокОбъекта КАК ОтпечатокОбъекта
	|ИЗ
	|	ВсеСобытия КАК ВсеСобытия
	|ГДЕ
	|	ВсеСобытия.КодВнешнегоКалендаря = &КодВнешнегоКалендаря
	|	ИЛИ ВсеСобытия.КодВнешнегоКалендаря ЕСТЬ NULL
	|		И ВсеСобытия.КалендарьСотрудника ЕСТЬ NULL
	|		И ВсеСобытия.Ссылка = &КалендарьСотрудникаСсылка
	|		И ВсеСобытия.Ссылка ССЫЛКА Справочник.КалендариСотрудников");
	Запрос.УстановитьПараметр("ВсеСобытия", ВсеСобытия);
	Запрос.УстановитьПараметр("КодВнешнегоКалендаря", КодВнешнегоКалендаря);
	Запрос.УстановитьПараметр("КалендарьСотрудникаСсылка", КалендарьСотрудника.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ВыборкаСобытийЗаПериод(ОписаниеКалендаря, ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗадачаСотрудника.Наименование КАК Наименование,
	|	ЗадачаСотрудника.Ссылка КАК Ссылка,
	|	ЗадачаСотрудника.ДатаНачала КАК ДатаНачала,
	|	ЗадачаСотрудника.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СобытияЗаПериод_ОсновныеДанные
	|ИЗ
	|	Документ.ЗадачаСотрудника КАК ЗадачаСотрудника
	|ГДЕ
	|	НЕ ЗадачаСотрудника.ДатаНачала < &ДатаНачала
	|	И НЕ ЗадачаСотрудника.ДатаОкончания > &ДатаОкончания
	|	И ЗадачаСотрудника.Календарь = &Календарь
	|	И ЗадачаСотрудника.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
	|	ЗаписиКалендаряСотрудника.Ссылка КАК Ссылка,
	|	ЗаписиКалендаряСотрудника.Начало КАК ДатаНачала,
	|	ЗаписиКалендаряСотрудника.Окончание КАК ДатаОкончания
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	|ГДЕ
	|	НЕ ЗаписиКалендаряСотрудника.Начало < &ДатаНачала
	|	И НЕ ЗаписиКалендаряСотрудника.Окончание > &ДатаОкончания
	|	И ЗаписиКалендаряСотрудника.Календарь = &Календарь
	|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияЗаПериод_ОсновныеДанные.Наименование КАК Наименование,
	|	СобытияЗаПериод_ОсновныеДанные.Ссылка КАК Ссылка,
	|	СобытияЗаПериод_ОсновныеДанные.ДатаНачала КАК ДатаНачала,
	|	СобытияЗаПериод_ОсновныеДанные.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеСобытийВнешнихКалендарей.Источник КАК Источник,
	|	ДанныеСобытийВнешнихКалендарей.Идентификатор КАК Идентификатор,
	|	ДанныеСобытийВнешнихКалендарей.ИдентификаторКалендаря КАК ИдентификаторКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря КАК УчетнаяЗаписьВнешнегоКалендаря,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря.Провайдер КАК Провайдер,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря.Сервер КАК Сервер,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря.КаталогКалендарей КАК КаталогКалендарей
	|	ПОМЕСТИТЬ СобытияЗаПериод_ВсеДанные
	|ИЗ
	|	СобытияЗаПериод_ОсновныеДанные КАК СобытияЗаПериод_ОсновныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСобытийВнешнихКалендарей КАК ДанныеСобытийВнешнихКалендарей
	|		ПО (ДанныеСобытийВнешнихКалендарей.Источник.Ссылка = СобытияЗаПериод_ОсновныеДанные.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСинхронизацииСВнешнимиКалендарями КАК НастройкиСинхронизацииСВнешнимиКалендарями
	|		ПО (НастройкиСинхронизацииСВнешнимиКалендарями.КодВнешнегоКалендаря = ДанныеСобытийВнешнихКалендарей.ИдентификаторКалендаря)	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияВнешнегоКалендаря.Наименование КАК Наименование,
	|	СобытияВнешнегоКалендаря.Идентификатор КАК Идентификатор
	|	ПОМЕСТИТЬ СобытияВнешнегоКалендаряЗаПериод
	|ИЗ
	|	&СобытияВнешнегоКалендаря КАК СобытияВнешнегоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияВнешнегоКалендаряЗаПериод.Наименование КАК Наименование,
	|	СобытияВнешнегоКалендаряЗаПериод.Идентификатор КАК ИдентификаторDAV,
	|	СобытияЗаПериод_ВсеДанные.Идентификатор КАК Идентификатор,
	|	СобытияЗаПериод_ВсеДанные.Ссылка КАК Ссылка,
	|	СобытияЗаПериод_ВсеДанные.Источник КАК Источник,
	|	СобытияЗаПериод_ВсеДанные.ИдентификаторКалендаря КАК ИдентификаторКалендаря
	|	ПОМЕСТИТЬ СобытияИтог
	|ИЗ
	|	СобытияВнешнегоКалендаряЗаПериод КАК СобытияВнешнегоКалендаряЗаПериод
	|		ПРАВОЕ СОЕДИНЕНИЕ СобытияЗаПериод_ВсеДанные КАК СобытияЗаПериод_ВсеДанные
	|		ПО СобытияВнешнегоКалендаряЗаПериод.Идентификатор = СобытияЗаПериод_ВсеДанные.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияИтог.Идентификатор КАК Идентификатор,
	|	СобытияИтог.Ссылка КАК Ссылка,
	|	СобытияИтог.Источник КАК Источник,
	|	СобытияИтог.ИдентификаторКалендаря КАК ИдентификаторКалендаря
	|ИЗ
	|	СобытияИтог КАК СобытияИтог
	|ГДЕ
	|	СобытияИтог.Наименование ЕСТЬ NULL");
	Запрос.УстановитьПараметр("Календарь", ОписаниеКалендаря.КалендарьСотрудника);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("СобытияВнешнегоКалендаря", ОписаниеКалендаря.События);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти