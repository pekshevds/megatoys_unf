#Область ПрограммныйИнтерфейс

Функция ИмяПодсистемы() Экспорт
	
	Возврат "ИСМП";
	
КонецФункции

Функция ПредставлениеПодсистемы() Экспорт
	
	Возврат "ИС МП";
	
КонецФункции

Функция ИмяКомандыПулКодовМаркировки(ИмяПодсистемы) Экспорт
	
	Возврат
		ИнтеграцияИСКлиентСервер.ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ "ПерейтиВПулКодовМаркировки";
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиПулКодовМаркировки(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = "ПерейтиВПулКодовМаркировки";
	
КонецФункции

Функция ИмяКомандыОткрытьФормуСверкиКодовМаркировки(ИмяПодсистемы) Экспорт
	
	Возврат
		ИнтеграцияИСКлиентСервер.ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ "ОткрытьФормуСверкиКодовМаркировки";
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиОткрытьФормуСверкиКодовМаркировки(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = "ОткрытьФормуСверкиКодовМаркировки";
	
КонецФункции

Процедура ЗаполнитьСоответствиеПолейДокументовОснований(Форма, СоответствиеПолей) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
		
		СоответствиеПолей.Вставить("ПеремаркировкаТоваровИСМП", Новый Соответствие);
		СоответствиеПолей["ПеремаркировкаТоваровИСМП"].Вставить("Организация", "Организация");
		
		СоответствиеПолей.Вставить("МаркировкаТоваровИСМП", Новый Соответствие);
		СоответствиеПолей["МаркировкаТоваровИСМП"].Вставить("Организация",   "Организация");
		
	ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы, "Документ.УточнениеСведенийОКодахМаркировкиИСМП") Тогда
		
		СоответствиеПолей.Вставить("МаркировкаТоваровИСМП", Новый Соответствие);
		СоответствиеПолей["МаркировкаТоваровИСМП"].Вставить("Организация", "Организация");
		
	КонецЕсли;
	
	ИнтеграцияИСМПКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснований(Форма, СоответствиеПолей);
	
КонецПроцедуры

Функция ШаблонКодаМаркировкиПоВидуПродукции(ВидПродукции, РежимВключенияУпаковокИНаборов = 0) Экспорт
	
	СписокШаблонов = ШаблоныКодовПоВидуПродукции(ВидПродукции, РежимВключенияУпаковокИНаборов);
	
	Если СписокШаблонов.Количество() > 0 Тогда
		Возврат СписокШаблонов.Получить(0).Значение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает все шаблоны групповых упаковок
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ - шаблоны групповых упаковок
//
Функция ШаблоныГрупповыхУпаковок() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакБлок"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияБлок"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковкаСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковкаСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПивоГрупповаяУпаковка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВодаГрупповаяУпаковка"));
	Возврат Результат;
	
КонецФункции

// Возвращает шаблоны кодов маркировки, которые могут находиться в составе групповой упаковки
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ - шаблоны индивидуальных упаковок, входящих в состав групповых.
//
Функция ШаблоныИндивидуальныхУпаковокВСоставеГрупповых() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Бады"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовБезВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода"));
	Возврат Результат;
	
КонецФункции

// Возвращает шаблоны кодов маркировки, являющихся наборами
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ - шаблоны наборов
//
Функция ШаблоныНаборов() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ДухиНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ФотоаппаратыНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНаборСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНаборСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСНабор"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияНабор"));
	Возврат Результат;
	
КонецФункции

// Возвращает шаблоны кодов маркировки, которые могут находиться в составе набора
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ - шаблоны комплектующих набора
//
Функция ШаблоныКомплектующихНаборов() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДы"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовБезВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка"));
	Возврат Результат;
	
КонецФункции

// Возвращает доступные шаблоны по виду продукции с представлением.
// 
// Параметры:
// 	ВидПродукции                   - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	РежимВключенияУпаковокИНаборов - Число - Режим включения шаблонов для групповых упаковок и наборов:
// 	 0 - включать только потребительские упаковки
// 	 1 - включать групповые упаковки и потребительские упаковки
// 	 2 - включать наборы и потребительские упаковки
// 	 3 - включать групповые упаковки, наборы и потребительские упаковки
// 	 4 - включать только групповые упаковки
// 	 5 - включать только наборы.
// Возвращаемое значение:
// 	СписокЗначений - Список значений с представлениями.
Функция ШаблоныКодовПоВидуПродукции(ВидПродукции, РежимВключенияУпаковокИНаборов = 1) Экспорт
	
	ВключатьИндивидуальныеУпаковки =
			РежимВключенияУпаковокИНаборов = 0
		Или РежимВключенияУпаковокИНаборов = 1
		Или РежимВключенияУпаковокИНаборов = 2
		Или РежимВключенияУпаковокИНаборов = 3;
		
	ВключатьГрупповыеУпаковки =
			РежимВключенияУпаковокИНаборов = 1
		Или РежимВключенияУпаковокИНаборов = 3
		Или РежимВключенияУпаковокИНаборов = 4;
	
	ВключатьНаборы =
			РежимВключенияУпаковокИНаборов = 2
		Или РежимВключенияУпаковокИНаборов = 3
		Или РежимВключенияУпаковокИНаборов = 5;
	
	СписокВыбора = Новый СписокЗначений();
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовБезВЕТИС"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
			ПредопределенноеЗначение(
				"Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьКомплект"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
					ПредопределенноеЗначение(
						"Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Шины"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
					ПредопределенноеЗначение(
						"Перечисление.ШаблоныКодовМаркировкиСУЗ.ФотоаппаратыНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Велосипеды"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
					ПредопределенноеЗначение(
						"Перечисление.ШаблоныКодовМаркировкиСУЗ.ДухиНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакБлок"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияБлок"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(
					ПредопределенноеЗначение(
						"Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВодаГрупповаяУпаковка"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковкаСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНаборСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДы"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковкаСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковка"));
		КонецЕсли;
		Если ВключатьНаборы Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНаборСтандартныйКМ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНабор"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво"));
		КонецЕсли;
		Если ВключатьГрупповыеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПивоГрупповаяУпаковка"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПродукцияИзНатуральногоМеха"));
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция"));
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		Если ВключатьИндивидуальныеУпаковки Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БезалкогольноеПиво"));
		КонецЕсли;
	КонецЕсли;
	
	ПредставленияШаблонов = ПредставленияШаблоновКодаМаркировки();
	Для Каждого ЭлементСпискаЗначений Из СписокВыбора Цикл
		ЭлементПредставления = ПредставленияШаблонов.НайтиПоЗначению(ЭлементСпискаЗначений.Значение);
		Если ЭлементПредставления <> Неопределено Тогда
			ЭлементСпискаЗначений.Представление = ЭлементПредставления.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция ШаблоныКодовПоНоменклатуре(Номенклатура, РежимВключенияУпаковокИНаборов = 1) Экспорт
	
	ВидПродукции = ИнтеграцияИСМПВызовСервера.ВидПродукцииПоНоменклатуре(Номенклатура);
	
	Возврат ШаблоныКодовПоВидуПродукции(ВидПродукции, РежимВключенияУпаковокИНаборов);
	
КонецФункции

Функция ПредставлениеGTINОстаткиПоВидуПродукции(Представление, ВидПродукции) Экспорт
	
	Если ЗначениеЗаполнено(Представление) Тогда
		Возврат Представление;
	КонецЕсли;
	
	МассивПредставления = Новый Массив();
	МассивПредставления.Добавить(НСтр("ru = 'Остатки'"));
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		МассивПредставления.Добавить(ВидПродукции);
	КонецЕсли;
	
	ПредставлениеНовое = СтрСоединить(МассивПредставления, ". ");
	
	Возврат ПредставлениеНовое;
	
КонецФункции

Функция ПредставлениеПустойНоменклатурыПоВидуПродукции(ВходныеДанные, ВидПродукции, Префикс = Неопределено) Экспорт

	Представление = "";

	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда

		Поля = Новый Массив();
		Поля.Добавить("СпособВводаВОборот");
		Поля.Добавить("ВидКИЗ");
		Поля.Добавить("РазмерКИЗ");

		ИсходныеДанные = Новый Структура(СтрСоединить(Поля, ","));
		ЗаполнитьЗначенияСвойств(ИсходныеДанные, ВходныеДанные);

		ИтоговоеЗначение = Новый Массив();
		Если ЗначениеЗаполнено(Префикс) Тогда
			ИтоговоеЗначение.Добавить(Префикс);
		Иначе
			ИтоговоеЗначение.Добавить(НСтр("ru = 'КИЗ без индивидуализации'"));
		КонецЕсли;

		Для Каждого ИмяПоля Из Поля Цикл
			Если ЗначениеЗаполнено(ИсходныеДанные[ИмяПоля]) Тогда
				ИтоговоеЗначение.Добавить(ИсходныеДанные[ИмяПоля]);
			КонецЕсли;
		КонецЦикла;

		Представление = СтрСоединить(ИтоговоеЗначение, ", ");

	КонецЕсли;

	Возврат Представление;

КонецФункции

Функция ПредставлениеКИЗ() Экспорт

	Представление = НСтр("ru = 'КИЗ (без детальной информации)'");

	Возврат Представление;

КонецФункции

Функция КодТНВЭДПрочиеПредметыОдеждыИСМП() Экспорт

	Возврат "4303109080";

КонецФункции

Функция ПредставлениеВидаОперацииИСМП(Операция) Экспорт
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Агрегация") Тогда
		Возврат НСтр("ru = 'Агрегация'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС") Тогда
		Возврат НСтр("ru = 'Импорт'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС") Тогда
		Возврат НСтр("ru = 'Импорт с ФТС'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех") Тогда
		Возврат НСтр("ru = 'Импорт с ФТС'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ") Тогда
		Возврат НСтр("ru = 'Производство'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотКонтрактноеПроизводствоЕАЭС") Тогда
		Возврат НСтр("ru = 'Контрактное производство ЕАЭС'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору") Тогда
		Возврат НСтр("ru = 'Контрактное производство (от лица исполнителя)'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
		Возврат НСтр("ru = 'Контрактное производство (от лица заказчика)'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц") Тогда
		Возврат НСтр("ru = 'Получение продукции от физических лиц'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		Возврат НСтр("ru = 'Ввоз из ЕАЭС'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
		Возврат НСтр("ru = 'Маркировка остатков'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ") Тогда
		Возврат НСтр("ru = 'Индивидуализация КИЗ'");
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ") Тогда
		Возврат НСтр("ru = 'Подтверждение поступления КИЗ'");
	Иначе
		Возврат Строка(Операция);
	КонецЕсли;
	
КонецФункции

// Возвращает список операций нанесения.
// 
// Параметры:
//  ПолныйСписок - Булево - Истина, если нужен полный список операций, включая неиспользуемые.
//  ЭтоПродукцияИзНатуральногоМеха - Булево - доступные операции для вид продукции из натурального меха.
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыОперацийИСМП.
//
Функция ОперацииНанесенияКодовМаркировки(ПолныйСписок = Истина, ЭтоПродукцияИзНатуральногоМеха = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	Если ПолныйСписок Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ"));
	ИначеЕсли ЭтоПродукцияИзНатуральногоМеха Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ"));
	Иначе
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Вид продукции ИС МП требует указание срока годности в операциях нанесения КМ
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//  УчитыватьМолочнуюПродукцию - Булево - Флаг учета молочной продукции
// 
// Возвращаемое значение:
//  Булево - вид продукции требует указания срока годности
Функция ЭтоВидПродукцииСоСрокамиГодности(ВидПродукции, УчитыватьМолочнуюПродукцию = Истина) Экспорт
	
	Возврат УчитыватьМолочнуюПродукцию И ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция");
	
КонецФункции

// Вид продукции ИС МП с возможным, но необязательным указанием срока годности в операциях нанесения КМ
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// 
// Возвращаемое значение:
//  Булево - вид продукции не требует обязательного указания срока годности
Функция ЭтоВидПродукцииСоСрокамиГодностиБезОбязательногоЗаполнения(ВидПродукции) Экспорт
	
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски");
	
КонецФункции

// Возвращает список операций ввода в оборот.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыОперацийИСМП.
Функция ОперацииВводаВОборотКодовМаркировки() Экспорт

	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ"));

	Возврат Результат;
	
КонецФункции

// Возвращает список операций для уточнения сведений о кодах маркировки:
// сведения о разрешительной документации или отчет о перевзвешивании.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыОперацийИСМП.
Функция ОперацииУточненияСведенийОКодахМаркировки() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтчетОПеревзвешивании"));
	Возврат Результат;
	
Конецфункции

// Реализовать получение значения Признать определяемого типа ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
Функция ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать() Экспорт
	
	ВариантДействия = Неопределено;
	ИнтеграцияИСМПКлиентСерверПереопределяемый.ПриОпределенииВариантаДействийПоРасхождениямКодовМаркировкиИСМППризнать(ВариантДействия);
	Возврат ВариантДействия;
	
КонецФункции

// Реализовать получение значения Признать определяемого типа ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
Функция ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать() Экспорт
	
	ВариантДействия = Неопределено;
	ИнтеграцияИСМПКлиентСерверПереопределяемый.ПриОпределенииВариантаДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать(ВариантДействия);
	Возврат ВариантДействия;
	
КонецФункции

// Параметры формирования данных представления настройки номенклатуры.
// 
// Возвращаемое значение:
//  Структура                          - Параметры формирования данных представления настройки номенклатуры:
// * СсылкаНаОбъект                    - ОпределяемыйТип.Номенклатура       - Ссылка на номенклатуру, для которой выполняется настройка.
// * ВидПродукции                      - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции. Если не заполнено, то вид продукции получается по СсылкаНаОбъект.
// * ЕстьПравоРедактирования           - Булево  - Определяет наличие прав на редактирование, например, если есть права на справочник Номенклатура.
// * РазрешеноРедактированиеРеквизитов - Булево  - Истина (По-умолчанию), если пользователь принудительно включил редактирование реквизитов, например, через подсистему запрета редактирования реквизитов.
//                                                 Ложь - Библиотека определяет использование номенклатуры и разрешает редактирование, если в штрихкодах упаковок номенклатура не использовалась.
// * ТребуетВзвешивания                - Булево, Неопределено - Признак взвешивания потребительской упаковки.
//                                       Неопределено - Означает что в карточке товара нет информации о весовом товаре, необходимость взвешивания настривается в отдельной форме.
//                                       Истина       - Потребительская упаковка требует взвешивания.
//                                       Ложь         - Не требует взвешивания, настраиваются остальные параметры.
// * ДопустимаНастройкаЛогистическойЕдиницы - Булево - Включает возможность настройки потребительской упаковки как части единицы измерения номенклатуры.
// * ПредставлениеВНесколькоСтрок           - Булево - Переносит представление упаковки частичного выбытия на следующую строку. Используется, если место вывода гиперссылки в карточке номенклатуре менее ширины выводимого текста.
// * ВыводитьГиперссылкуНастройкиВидовУпаковокПоGTIN - Булево - Определяет необходимость вывода гиперссылки настройки видов упаковок.
// * ОтступПриВыводеНастройкиВидаУпаковки            - Булево - Добавляет перенос строк при формировании гиперссылки настройки вида упаковки по GTIN.
// * РазделительНастройкиВидовУпаковокПоGTIN         - Неопределено, Строка, ФорматированнаяСтрока - Позволяет задать префикс или дополнительный перенос строк при выводе гиперссылки настройки видов упаковок.
Функция ПараметрыФормированияДанныхПредставленияНастройкиНоменклатуры() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("СсылкаНаОбъект",                                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",                                    Неопределено);
	ВозвращаемоеЗначение.Вставить("ЕстьПравоРедактирования",                         Истина);
	ВозвращаемоеЗначение.Вставить("РазрешеноРедактированиеРеквизитов",               Истина);
	ВозвращаемоеЗначение.Вставить("ТребуетВзвешивания",                              Неопределено);
	ВозвращаемоеЗначение.Вставить("ДопустимаНастройкаЛогистическойЕдиницы",          Истина);
	ВозвращаемоеЗначение.Вставить("ПредставлениеВНесколькоСтрок",                    Истина);
	ВозвращаемоеЗначение.Вставить("ВыводитьГиперссылкуНастройкиВидовУпаковокПоGTIN", Истина);
	ВозвращаемоеЗначение.Вставить("ОтступПриВыводеНастройкиВидаУпаковки",            Истина);
	ВозвращаемоеЗначение.Вставить("РазделительНастройкиВидовУпаковокПоGTIN",         Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область Сертификация

Функция ИнициализироватьДанныеЗаполненияСертификации() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ВидСертификации",           Неопределено);
	Результат.Вставить("НомерСертификации",         Неопределено);
	Результат.Вставить("ДатаСертификации",          Неопределено);
	Результат.Вставить("НомерСкважины",             "");
	Результат.Вставить("ИспользоватьНомерСкважины", Ложь);

	Возврат Результат;

КонецФункции

Функция ИнициализироватьДанныеЗаполненияЛицензииНаНедра() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("НомерЛицензииНаПользованиеНедрами", "");
	Результат.Вставить("ДатаЛицензииНаПользованиеНедрами",  Неопределено);

	Возврат Результат;

КонецФункции

Функция ИнициализироватьДанныеЗаполненияСведенийОбИмпорте() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Импортер",                       Неопределено);
	Результат.Вставить("РегистрационныйНомерДекларации", "");
	Результат.Вставить("ДатаДекларации",                 Неопределено);

	Возврат Результат;

КонецФункции

Функция ПредставлениеСертификации(ДанныеСертификации) Экспорт

	Если ДанныеСертификации.ИспользоватьНомерСкважины Тогда

		Шаблон = "%1 №%2 от %3, номер скважины: %4";
		Если ЗначениеЗаполнено(ДанныеСертификации.ВидСертификации)
			И ЗначениеЗаполнено(ДанныеСертификации.НомерСертификации)
			И ЗначениеЗаполнено(ДанныеСертификации.ДатаСертификации) Тогда

			ПредставлениеСертификата = СтрШаблон(Шаблон,
				ДанныеСертификации.ВидСертификации,
				ДанныеСертификации.НомерСертификации,
				Формат(ДанныеСертификации.ДатаСертификации, "ДФ=dd.MM.yyyy"),
				?(ЗначениеЗаполнено(ДанныеСертификации.НомерСкважины), ДанныеСертификации.НомерСкважины, НСтр("ru = 'не указан'")));

		КонецЕсли;

	Иначе

		Шаблон = "%1 №%2 от %3";
		Если ЗначениеЗаполнено(ДанныеСертификации.ВидСертификации)
			И ЗначениеЗаполнено(ДанныеСертификации.НомерСертификации)
			И ЗначениеЗаполнено(ДанныеСертификации.ДатаСертификации) Тогда

			ПредставлениеСертификата = СтрШаблон(Шаблон,
				ДанныеСертификации.ВидСертификации,
				ДанныеСертификации.НомерСертификации,
				Формат(ДанныеСертификации.ДатаСертификации, "ДФ=dd.MM.yyyy"));

		КонецЕсли;

	КонецЕсли;

	Возврат ПредставлениеСертификата;

КонецФункции

Функция ПредставлениеЛицензииНаНедра(ДанныеЛицензии) Экспорт

	ПредставлениеЛицензии = "";
	Шаблон = "№%1 от %2";
	Если ЗначениеЗаполнено(ДанныеЛицензии.НомерЛицензииНаПользованиеНедрами)
		И ЗначениеЗаполнено(ДанныеЛицензии.ДатаЛицензииНаПользованиеНедрами) Тогда

		ПредставлениеЛицензии = СтрШаблон(Шаблон,
			ДанныеЛицензии.НомерЛицензииНаПользованиеНедрами,
			Формат(ДанныеЛицензии.ДатаЛицензииНаПользованиеНедрами, "ДФ=dd.MM.yyyy"));

	КонецЕсли;

	Возврат ПредставлениеЛицензии;

КонецФункции

Функция ПредставлениеДанныхИмпорта(ДанныеИмпорта) Экспорт

	ПредставлениеДанныхИмпорта = "";
	Шаблон = "%1, декларация №%2 от %3";

	Если ЗначениеЗаполнено(ДанныеИмпорта.Импортер)
		И ЗначениеЗаполнено(ДанныеИмпорта.РегистрационныйНомерДекларации)
		И ЗначениеЗаполнено(ДанныеИмпорта.ДатаДекларации) Тогда

		ПредставлениеДанныхИмпорта = СтрШаблон(Шаблон,
			ДанныеИмпорта.Импортер,
			ДанныеИмпорта.РегистрационныйНомерДекларации,
			Формат(ДанныеИмпорта.ДатаДекларации, "ДФ=dd.MM.yyyy"));

	КонецЕсли;

	Возврат ПредставлениеДанныхИмпорта;

КонецФункции

Функция ИспользоватьНомерСкважины(Форма) Экспорт

	Операция = Форма.Объект.Операция;

	ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Операция);
	ВидПродукции = Форма.Объект.ВидПродукции;

	Если (ОперацииМаркировки.ЭтоПроизводствоРФ
		Или ОперацииМаркировки.ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика
		Или ОперацииМаркировки.ЭтоПроизводствоПоДоговору)
		И ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьСертификациюЛицензииНоменклатурыПоСтроке(Форма, ДанныеДляЗаполнения) Экспорт

	Если ДанныеДляЗаполнения = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ДанныеДляЗаполнения) = Тип("Массив") Тогда
		МассивДанныхЗаполнения = ДанныеДляЗаполнения;
	Иначе
		МассивДанныхЗаполнения = Новый Массив();
		МассивДанныхЗаполнения.Добавить(ДанныеДляЗаполнения);
	КонецЕсли;

	ДоступноУказаниеНомераСкважины  = ДоступноУказаниеНомераСкважиныВДанныхСертификации(Форма.Объект.Операция);
	ДоступноЗаполнениеДанныхИмпорта = ДоступноЗаполнениеДанныхИмпорта(Форма.Объект.Операция);
	Для Каждого СтрокаДанныхЗаполнения Из МассивДанныхЗаполнения Цикл

		Если ТипЗнч(СтрокаДанныхЗаполнения) = Тип("Число") Тогда
			ДанныеСтроки = Форма.Объект.Товары.НайтиПоИдентификатору(СтрокаДанныхЗаполнения);
		Иначе
			ДанныеСтроки = СтрокаДанныхЗаполнения;
		КонецЕсли;

		ЗаполнитьСертификациюПоСтроке(Форма, ДанныеСтроки, ДоступноУказаниеНомераСкважины);

		Если ДоступноУказаниеНомераСкважины И ИнтеграцияИСМПКлиентСервер.ИспользоватьНомерСкважины(Форма) Тогда
			ЗаполнитьЛицензииНаНедраПоСтроке(Форма, ДанныеСтроки);
		КонецЕсли;

		Если ДоступноЗаполнениеДанныхИмпорта Тогда
			ЗаполнитьДанныеИмпортаПоСтроке(Форма, ДанныеСтроки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСертификациюПоСтроке(Форма, ДанныеСтроки, ДоступноУказаниеНомераСкважины)

	Если ЗначениеЗаполнено(ДанныеСтроки.ВидДокументаСертификации) Тогда

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВидСертификации",   ДанныеСтроки.ВидДокументаСертификации);
		ПараметрыПоиска.Вставить("НомерСертификации", ДанныеСтроки.НомерДокументаСертификации);
		ПараметрыПоиска.Вставить("ДатаСертификации",  ДанныеСтроки.ДатаДокументаСертификации);
		Если ДоступноУказаниеНомераСкважины Тогда
			ПараметрыПоиска.Вставить("НомерСкважины", ДанныеСтроки.НомерСкважины);
		КонецЕсли;
		ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);

		НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);

		Если НайденныеСтроки.Количество() > 0 Тогда

			СтрокаКеша = НайденныеСтроки.Получить(0);

			Если ДанныеСтроки.Сертификация <> СтрокаКеша.Представление Тогда
				ДанныеСтроки.Сертификация = СтрокаКеша.Представление;
			КонецЕсли;

			Возврат;

		Иначе

			ДанныеСтроки.ВидДокументаСертификации   = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка");
			ДанныеСтроки.НомерДокументаСертификации = "";
			ДанныеСтроки.ДатаДокументаСертификации  = Дата('00010101');
			ДанныеСтроки.НомерСкважины = "";
			ДанныеСтроки.Сертификация = "";

		КонецЕсли;

	Иначе

		ДанныеСтроки.Сертификация = "";

	КонецЕсли;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);

	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКеша = НайденныеСтроки.Получить(0);

		ДанныеСтроки.ВидДокументаСертификации   = СтрокаКеша.ВидСертификации;
		ДанныеСтроки.НомерДокументаСертификации = СтрокаКеша.НомерСертификации;
		ДанныеСтроки.ДатаДокументаСертификации  = СтрокаКеша.ДатаСертификации;

		Если ДоступноУказаниеНомераСкважины Тогда
			ДанныеСтроки.НомерСкважины = СтрокаКеша.НомерСкважины;
		КонецЕсли;

		ДанныеСтроки.Сертификация = СтрокаКеша.Представление;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЛицензииНаНедраПоСтроке(Форма, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.НомерЛицензииНаПользованиеНедрами) Тогда

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("НомерЛицензииНаПользованиеНедрами", ДанныеСтроки.НомерЛицензииНаПользованиеНедрами);
		ПараметрыПоиска.Вставить("ДатаЛицензииНаПользованиеНедрами",  ДанныеСтроки.ДатаЛицензииНаПользованиеНедрами);
		ПараметрыПоиска.Вставить("Номенклатура",                      ДанныеСтроки.Номенклатура);

		НайденныеСтроки = Форма.КэшЛицензийНаПользованиеНедрами.НайтиСтроки(ПараметрыПоиска);

		Если НайденныеСтроки.Количество() > 0 Тогда

			СтрокаКеша = НайденныеСтроки.Получить(0);

			Если ДанныеСтроки.ЛицензияНаПользованиеНедрами <> СтрокаКеша.Представление Тогда
				ДанныеСтроки.ЛицензияНаПользованиеНедрами = СтрокаКеша.Представление;
			КонецЕсли;

			Возврат;

		Иначе

			ДанныеСтроки.НомерЛицензииНаПользованиеНедрами = "";
			ДанныеСтроки.ДатаЛицензииНаПользованиеНедрами  = Дата('00010101');
			ДанныеСтроки.ЛицензияНаПользованиеНедрами      = "";

		КонецЕсли;

	Иначе

		ДанныеСтроки.ЛицензияНаПользованиеНедрами = "";

	КонецЕсли;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);

	НайденныеСтроки = Форма.КэшЛицензийНаПользованиеНедрами.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКеша = НайденныеСтроки.Получить(0);

		ДанныеСтроки.НомерЛицензииНаПользованиеНедрами   = СтрокаКеша.НомерЛицензииНаПользованиеНедрами;
		ДанныеСтроки.ДатаЛицензииНаПользованиеНедрами    = СтрокаКеша.ДатаЛицензииНаПользованиеНедрами;
		ДанныеСтроки.ЛицензияНаПользованиеНедрами        = СтрокаКеша.Представление;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеИмпортаПоСтроке(Форма, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.РегистрационныйНомерДекларации) Тогда

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("РегистрационныйНомерДекларации", ДанныеСтроки.РегистрационныйНомерДекларации);
		ПараметрыПоиска.Вставить("ДатаДекларации",                 ДанныеСтроки.ДатаДекларации);
		ПараметрыПоиска.Вставить("Импортер",                       ДанныеСтроки.Импортер);
		ПараметрыПоиска.Вставить("Номенклатура",                   ДанныеСтроки.Номенклатура);

		НайденныеСтроки = Форма.КэшДанныхИмпорта.НайтиСтроки(ПараметрыПоиска);

		Если НайденныеСтроки.Количество() > 0 Тогда

			СтрокаКеша = НайденныеСтроки.Получить(0);

			Если ДанныеСтроки.ДанныеИмпорта <> СтрокаКеша.Представление Тогда
				ДанныеСтроки.ДанныеИмпорта = СтрокаКеша.Представление;
			КонецЕсли;

			Возврат;

		Иначе

			ДанныеСтроки.РегистрационныйНомерДекларации = "";
			ДанныеСтроки.ДатаДекларации                 = Дата('00010101');
			ДанныеСтроки.Импортер                       = Неопределено;
			ДанныеСтроки.ДанныеИмпорта                  = "";

		КонецЕсли;

	Иначе

		ДанныеСтроки.ДанныеИмпорта = "";

	КонецЕсли;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);

	НайденныеСтроки = Форма.КэшДанныхИмпорта.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКеша = НайденныеСтроки.Получить(0);

		ДанныеСтроки.РегистрационныйНомерДекларации   = СтрокаКеша.РегистрационныйНомерДекларации;
		ДанныеСтроки.ДатаДекларации                   = СтрокаКеша.ДатаДекларации;
		ДанныеСтроки.Импортер                         = СтрокаКеша.Импортер;
		ДанныеСтроки.ДанныеИмпорта                    = СтрокаКеша.Представление;

	КонецЕсли;

КонецПроцедуры

Функция ДоступноУказаниеНомераСкважиныВДанныхСертификации(Операция) Экспорт

	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ДоступноЗаполнениеДанныхИмпорта(Операция) Экспорт

	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ОбновитьКэшСертификации(Форма, ДанныеЗаполненияСертификации, Номенклатура = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ДанныеЗаполненияСертификации.ВидСертификации)
		И Не ЗначениеЗаполнено(ДанныеЗаполненияСертификации.НомерСертификации)
		И Не ЗначениеЗаполнено(ДанныеЗаполненияСертификации.ДатаСертификации) Тогда
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполненияСертификации, "ИспользоватьНомерСкважины") Тогда
		ДанныеЗаполненияСертификации.Вставить("ИспользоватьНомерСкважины", Ложь);
		ДанныеЗаполненияСертификации.Вставить("НомерСкважины", "");
	КонецЕсли;

	ПараметрыПоиска = Новый Структура("ВидСертификации, НомерСертификации, ДатаСертификации");
	Если ДанныеЗаполненияСертификации.ИспользоватьНомерСкважины Тогда
		ПараметрыПоиска.Вставить("НомерСкважины");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеЗаполненияСертификации);

	Если Номенклатура <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда

		НоваяСтрока = Форма.КэшСертификации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполненияСертификации);
		НоваяСтрока.Номенклатура      = Номенклатура;
		НоваяСтрока.Представление     = ПредставлениеСертификации(ДанныеЗаполненияСертификации);

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьКэшЛицензииНаПользованиеНедрами(Форма, ДанныеЗаполнения, Номенклатура = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.НомерЛицензииНаПользованиеНедрами)
		И Не ЗначениеЗаполнено(ДанныеЗаполнения.ДатаЛицензииНаПользованиеНедрами) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПоиска = Новый Структура("НомерЛицензииНаПользованиеНедрами, ДатаЛицензииНаПользованиеНедрами");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеЗаполнения);

	Если Номенклатура <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	НайденныеСтроки = Форма.КэшЛицензийНаПользованиеНедрами.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда

		НоваяСтрока = Форма.КэшЛицензийНаПользованиеНедрами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
		НоваяСтрока.Номенклатура      = Номенклатура;
		НоваяСтрока.Представление     = ПредставлениеЛицензииНаНедра(ДанныеЗаполнения);

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьКэшДанныхИмпорта(Форма, ДанныеЗаполнения, Номенклатура) Экспорт

	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.РегистрационныйНомерДекларации) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПоиска = Новый Структура("Импортер, РегистрационныйНомерДекларации, ДатаДекларации, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеЗаполнения);
	ПараметрыПоиска.Номенклатура = Номенклатура;

	НайденныеСтроки = Форма.КэшДанныхИмпорта.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда

		НоваяСтрока = Форма.КэшДанныхИмпорта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
		НоваяСтрока.Номенклатура      = Номенклатура;
		НоваяСтрока.Представление     = ПредставлениеДанныхИмпорта(ДанныеЗаполнения);

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСертификатыНоменклатурыВКэш(Форма, СписокНоменклатуры) Экспорт

	СертификатыНоменклатуры = ИнтеграцияИСМПВызовСервера.ИнформацияСертификатовНоменклатуры(СписокНоменклатуры);

	Для Каждого КлючЗначение Из СертификатыНоменклатуры Цикл

		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Сертификат Из КлючЗначение.Значение Цикл

			ОбновитьКэшСертификации(
				Форма, Сертификат, Номенклатура);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьКешСертификацииПоСтатистике(Форма, ДанныеЗаполнения) Экспорт

	ДоступноУказаниеНомераСкважины = ДоступноУказаниеНомераСкважиныВДанныхСертификации(Форма.Объект.Операция);
	ДоступноУказаниеДанныхИмпорта  = ДоступноЗаполнениеДанныхИмпорта(Форма.Объект.Операция);
	ИспользоватьНомерСкважины = Ложь;
	Если ДоступноУказаниеНомераСкважины Тогда
		ИспользоватьНомерСкважины = ИспользоватьНомерСкважины(Форма);
	КонецЕсли;

	Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл

		СтруктураЗаполнения = ИнициализироватьДанныеЗаполненияСертификации();

		СтруктураЗаполнения.ВидСертификации           = СтрокаДанных.ВидДокументаСертификации;
		СтруктураЗаполнения.НомерСертификации         = СтрокаДанных.НомерДокументаСертификации;
		СтруктураЗаполнения.ДатаСертификации          = СтрокаДанных.ДатаДокументаСертификации;
		СтруктураЗаполнения.ИспользоватьНомерСкважины = ИспользоватьНомерСкважины;
		Если ДоступноУказаниеНомераСкважины Тогда
			СтруктураЗаполнения.НомерСкважины = СтрокаДанных.НомерСкважины;
		КонецЕсли;

		ОбновитьКэшСертификации(Форма, СтруктураЗаполнения, СтрокаДанных.Номенклатура);

		Если ИспользоватьНомерСкважины Тогда

			СтруктураЗаполнения = ИнициализироватьДанныеЗаполненияЛицензииНаНедра();
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтрокаДанных);
			ОбновитьКэшЛицензииНаПользованиеНедрами(Форма, СтруктураЗаполнения, СтрокаДанных.Номенклатура);

		КонецЕсли;

		Если ДоступноУказаниеДанныхИмпорта Тогда

			СтруктураЗаполнения = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСведенийОбИмпорте();
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтрокаДанных);
			ОбновитьКэшДанныхИмпорта(Форма, СтруктураЗаполнения, СтрокаДанных.Номенклатура);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьКартинкуСканированияКодаПоВидуПродукции(ЭлементФормыКартинка, ВидМаркируемойПродукции) Экспорт
	
	Если ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиТабакаИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиМолочнойПродукцииИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиМолочнойПродукцииИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиШинИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиФотоаппаратовИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиВелосипедовИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиМедицинскихИзделийИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиДуховИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиАльтернативногоТабакаИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиУпакованнойВодыИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиАнтисептиковИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиНикотиносодержащейПродукцииИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиПиваИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиБАДовИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиПродукцииИзНатуральногоМехаИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиСоковойПродукцииИСМП;
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиБезалкогольногоПиваИСМП;
	Иначе
		КартинкаСканированияКода = БиблиотекаКартинок.СканированиеКодаМаркировкиИСМП;
	КонецЕсли;
	
	ЭлементФормыКартинка.Картинка = КартинкаСканированияКода; 
	
КонецПроцедуры

Функция ПредставленияШаблоновКодаМаркировки() Экспорт
	
	СписокВидовПродукции = Новый СписокЗначений();
	
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка"),
		НСтр("ru = 'Пачка'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек"),
		НСтр("ru = 'Блок'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезУказанияСроковГодностиВЕТИС"),
		НСтр("ru = 'Без срока годности'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС"),
		НСтр("ru = 'Со сроком годности (до дней)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС"),
		НСтр("ru = 'Со сроком годности (до часов)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИС"),
		НСтр("ru = 'Единица товара'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовБезВЕТИС"),
		НСтр("ru = 'Единица товара'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС"),
		НСтр("ru = 'Единица товара'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакБлок"),
		НСтр("ru = 'Блок (GS1)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка"),
		НСтр("ru = 'Пачка (Классический табак)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1"),
		НСтр("ru = 'Пачка (GS1)'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка"),
		НСтр("ru = 'Пачка'"));
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияБлок"),
		НСтр("ru = 'Блок'"));
	
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики"),
		НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ"),
		НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДы"),
		НСтр("ru = 'Единица товара (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ"),
		НСтр("ru = 'Единица товара (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво"),
		НСтр("ru = 'Единица товара'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода"),
		НСтр("ru = 'Единица товара'"));

	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция"),
		НСтр("ru = 'Единица товара'"));

	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БезалкогольноеПиво"),
		НСтр("ru = 'Единица товара'"));

	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ДухиКомплект"),
		НСтр("ru = 'Комплект'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьКомплект"),
		НСтр("ru = 'Комплект'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ФотоаппаратыКомплект"),
		НСтр("ru = 'Комплект'"));

	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПродукцияИзНатуральногоМеха"),
		НСтр("ru = 'Единица товара'"));

	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ДухиНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленностьНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ФотоаппаратыНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНабор"),
		НСтр("ru = 'Набор (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиНаборСтандартныйКМ"),
		НСтр("ru = 'Набор (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНабор"),
		НСтр("ru = 'Набор (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыНаборСтандартныйКМ"),
		НСтр("ru = 'Набор (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияНабор"),
		НСтр("ru = 'Набор'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковкаСтандартныйКМ"),
		НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка (Укороченный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковкаСтандартныйКМ"),
		НСтр("ru = 'Групповая упаковка (Стандартный КМ)'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПивоГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
		
	СписокВидовПродукции.Добавить(
		ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВодаГрупповаяУпаковка"),
		НСтр("ru = 'Групповая упаковка'"));
		
	Возврат СписокВидовПродукции;
	
КонецФункции

Функция ИспользуетсяТипОплатыКодовМаркировки(ВидПродукции, Организация = Неопределено) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Результат = Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Если Организация = Неопределено Тогда
			Результат = Истина;
		Иначе
			Результат = Не ИнтеграцияИСМПВызовСервера.ОрганизацияЯвляетсяФермером(Организация);
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво") Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ЗаполнениеСтруктур

Функция РеквизитыСозданияКонтрагента() Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("Наименование");
	ДанныеКонтрагента.Вставить("НаименованиеПолное");
	ДанныеКонтрагента.Вставить("ИНН");
	ДанныеКонтрагента.Вставить("КПП");
	ДанныеКонтрагента.Вставить("ЮридическийАдрес");
	ДанныеКонтрагента.Вставить("РегистрационныйНомер");
	Возврат ДанныеКонтрагента;
	
КонецФункции

Функция ИнициализироватьСтруктуруПодбораКодаТНВЭД() Экспорт
	
	ДанныеКодТНВЭД = Новый Структура;
	ДанныеКодТНВЭД.Вставить("Организация", Неопределено);
	ДанныеКодТНВЭД.Вставить("ВидПродукции", Неопределено);
	ДанныеКодТНВЭД.Вставить("КодТНВЭД", Неопределено);
	ДанныеКодТНВЭД.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
	Возврат ДанныеКодТНВЭД;
	
КонецФункции

#КонецОбласти

#Область ПервичныйДокумент

//Возвращает представление первичного документа собранное из составных частей
//
//Параметры:
//   Реквизиты - Структура - информация о первичном документе:
//   * Оплачен - Булево - оплачен
//   * ВидПервичногоДокумента - ПеречислениеСсылка.ВидыПервичныхДокументовИСМП - вид документа
//   * НаименованиеПервичногоДокумента - Строка - наименование документа
//   * НомерПервичногоДокумента - Строка - номер документа
//   * ДатаПервичногоДокумента - Дата - дата документа
//
//Возвращаемое значение:
//   Строка - представление первичного документа
//
Функция ПредставлениеПервичногоДокумента(Реквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(Реквизиты.ВидПервичногоДокумента) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиИмени = Новый Массив;
	
	Если Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.АктУничтожения") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'Акт уничтожения'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'Чек'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТаможеннаяДекларация") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'ГТД'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТоварнаяНакладная") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'Товарная накладная'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТоварныйЧек") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'Товарный чек'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.УПД") Тогда
		ЧастиИмени.Добавить(НСтр("ru = 'УПД'"));
	ИначеЕсли Реквизиты.ВидПервичногоДокумента = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.Прочее") Тогда
		ЧастиИмени.Добавить(Реквизиты.НаименованиеПервичногоДокумента);
	КонецЕсли;
	ЧастиИмени.Добавить(СтрШаблон(НСтр("ru = '№ %1'"), Реквизиты.НомерПервичногоДокумента));
	ЧастиИмени.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), Формат(Реквизиты.ДатаПервичногоДокумента,"ДЛФ=D;")));
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реквизиты, "Оплачен")
		И Реквизиты.Оплачен Тогда
		ЧастиИмени.Добавить(НСтр("ru = '(оплачен)'"));
	КонецЕсли;
	Возврат СтрСоединить(ЧастиИмени, " ");
	
КонецФункции

Функция СоответствиеПричинПеремаркировкиПервичногоДокумента(Причина1, Причина2) Экспорт
	
	Возврат Причина1 = Причина2
	Или (Причина1 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя")
		И Причина2 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи"))
	Или (Причина2 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя")
		И Причина1 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи"))
	Или (Причина1 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица")
		И Причина2 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС"))
	Или (Причина2 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица")
		И Причина1 = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС"));
	
КонецФункции

Функция ПолучитьНеДоступныеПричиныПеремаркировкиДляПервичногоДокумента() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ПустаяСсылка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтрачено"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.РеализацияТоваровПриобретенныхНеДляПродажи"));
	
	Возврат Результат;
	
КонецФункции

Функция ПричинаПеремаркировкиДоступнаДляПервичногоДокумента(ПричинаПеремаркировки) Экспорт
	
	Возврат ПолучитьНеДоступныеПричиныПеремаркировкиДляПервичногоДокумента().Найти(ПричинаПеремаркировки) = Неопределено;
	
КонецФункции

Функция ПолучитьДоступныеВидыПервичныхДокументовДляПричиныПеремаркировки(ПричинаПеремаркировки) Экспорт
	
	ДоступныеВидыПервичныхДокументов = Новый СписокЗначений;
	Если ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя")
		Или ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи")
		Тогда
		
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек"));
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТоварныйЧек"));
		
	ИначеЕсли ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица")
		Или ПричинаПеремаркировки = ПредопределенноеЗначение("Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС")
		Тогда
		
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТоварнаяНакладная"));
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.УПД"));
		
	Иначе
		Возврат ДоступныеВидыПервичныхДокументов;
	КонецЕсли;
	
	ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.Прочее"));
	
	Возврат ДоступныеВидыПервичныхДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти