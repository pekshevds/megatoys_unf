#Область СлужебныйПрограммныйИнтерфейс

// Заполняет поля данных штрихкода, используемые подсистемой МОТП, после уточнения данных:
//  * Выбор вида и типа упаковки (пачка/блок), если ранее он не распознан, по коэффициенту вложенности (количеству пачек)
//  * По виду упаковки и коэффициенту указание количества пачек и блоков.
//
// Параметры:
//  ДанныеШтрихкода - Структура - текущие данные штрихкода
//  ДанныеВыбора    - Структура - данные уточнения номенклатуры
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  РезультатОбработки    - Структура - Результат обработки штрихкода.
Процедура ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки) Экспорт
	
	Описание = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(ДанныеШтрихкода.Номенклатура).Получить(ДанныеШтрихкода.Номенклатура);
	Если Описание = Неопределено Тогда
		КоличествоВПотребительскойУпаковке = 0;
	Иначе
		КоличествоВПотребительскойУпаковке = Описание.КоличествоВПотребительскойУпаковке;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.КоличествоПотребительскихУпаковок) Тогда
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			ДанныеШтрихкода.КоличествоПотребительскихУпаковок = 1;
			ДанныеШтрихкода.Коэффициент = КоличествоВПотребительскойУпаковке;
		КонецЕсли;
	КонецЕсли;
	
	ШтрихкодированиеИСМПСлужебный.ОбработатьУточнениеДанныхЧастичноеВыбытие(ДанныеВыбора, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецПроцедуры

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Детализация, с которой
//                           требуется сформировать вложенные штрихкоды.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  СортироватьДанные - Булево - Необходимость сортировки данных дерева.
// Возвращаемое значение:
//  (См. ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ПараметрыСканирования, СортироватьДанные = Ложь) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШапки);
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодыУпаковокИзДокумента(ДокументСсылка, ПараметрыСканирования);
	
	Возврат ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковок, ПараметрыСканирования, СортироватьДанные);
	
КонецФункции

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ШтрихкодыУпаковок - Массив из Структура - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
// * Штрихкод - Строка - Код маркировки.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Детализация, с которой
//                           требуется сформировать вложенные штрихкоды.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  СортироватьДанные - Булево - Необходимость сортировки данных дерева.
// Возвращаемое значение:
//  (См. ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковок, ПараметрыСканирования, СортироватьДанные = Ложь) Экспорт
	
	ИзвестныеУпаковки   = Новый Массив;
	НеизвестныеУпаковки = Новый Массив;
	ПараметрыДополнения = Неопределено;
	Результат           = Неопределено;
	
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		
		Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
			ИзвестныеУпаковки.Добавить(Строка.ШтрихкодУпаковки);
		Иначе
			НеизвестныеУпаковки.Добавить(Новый Структура("Штрихкод, Количество", Строка.Штрихкод, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьПараметрыДополненияВложенныхШтрихкодов(
		ПараметрыДополнения,
		ШтрихкодыУпаковок,
		ПараметрыСканирования);
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам();
	
	ДопустимаТабачнаяПродукция = ШтрихкодированиеИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования);
	ДопустимаПродукцияИСМП     = ШтрихкодированиеИС.ДопустимаПродукцияИСМП(ПараметрыСканирования);
	
	Если ДопустимаТабачнаяПродукция Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ИзвестныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкодыИзвестныхУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(
			ИзвестныеУпаковки, ПараметрыСканирования);
		
		ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования);
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		
		ПараметрыДополненияТаблицыДанныеКодовМаркировки = ШтрихкодированиеИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок);
		ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;
		
		ДобавленныеСтроки = Новый Массив;
		ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок, ДобавленныеСтроки, ПараметрыСканирования);
		
		ШтрихкодированиеИС.ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДобавленныеСтроки);
		
		ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыДополнения);
		
		НормализоватьДанныеДереваУпаковок(
			ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымМОТП();
		
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Результат.ЕстьОшибки  = Истина;
			Результат.ТекстОшибки = ДанныеПоШтрихкодам.ТекстОшибки;
			Результат.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
		Иначе
			Результат.ВложенныеШтрихкоды    = ВложенныеШтрихкодыИзвестныхУпаковок;
			Результат.ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
		КонецЕсли;
		
	ИначеЕсли НеизвестныеУпаковки.Количество() > 0 Тогда
		
		Результат = ВложенныеШтрихкодыПоДаннымМОТП(НеизвестныеУпаковки, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ПустаяКоллекция = ИнициализацияВложенныхШтрихкодов();
		Результат       = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымМОТП();
		Результат.ВложенныеШтрихкоды = ПустаяКоллекция;
	КонецЕсли;
	
	Если СортироватьДанные
		И Результат.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.ВложенныеШтрихкоды, "ДеревоУпаковок") Тогда
			Результат.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Сортировать("Штрихкод", Истина);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.ВложенныеШтрихкоды, "МаркированныеТовары") Тогда
			Результат.ВложенныеШтрихкоды.МаркированныеТовары.Сортировать("Штрихкод");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ШтрихкодыУпаковокИзДокумента(Знач ДокументСсылка, Знач ПараметрыСканирования) Экспорт
	
	Возврат ШтрихкодированиеИСМПСлужебный.ШтрихкодыУпаковокИзДокумента(ДокументСсылка, ПараметрыСканирования);

КонецФункции

// Формирует данные по неизвестным кодам табачных пачек и заполняет данные по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ПараметрыСканирования);

	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП
		И Не ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции Тогда
		ЗаполнитьДанныеНеизвестныхТабачныхПачекСЗапросомСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ЗаполнитьДанныеНеизвестныхТабачныхПачекБезЗапросаСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет базовую таблицу "ДанныеКодовМаркировки" необходимыми колонками для табачной продукции.
// 
// Параметры:
//  ДанныеПоШтрихкодам    - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
//  ДанныеКодовМаркировки - Неопределено, Массив, ТаблицаЗначений - 
Процедура ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования = Неопределено, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	ОбязательныеКолонки = Новый Структура;
	ОбязательныеКолонки.Вставить("Владелец",                  Неопределено);
	ОбязательныеКолонки.Вставить("ПредставлениеСтатуса",      Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("GTIN",                      Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("ТребуетсяВыборСерии",       Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ЕстьВПулеКодовМаркировки",  Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ПолныйКодМаркировки",       Новый ОписаниеТипов("Строка"));
	
	ОбязательныеКолонки.Вставить("ТребуетсяУточнениеЧастичногоВыбытия", Новый ОписаниеТипов("Булево"));
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
		
	Если ПараметрыСканирования <> Неопределено Тогда
		
		ПараметрыДерева = ИнтерфейсМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования, ДанныеПоШтрихкодам);
		КоллекцияДополнительныхКолонокДереваУпаковокМОТП(ПараметрыДерева, ОбязательныеКолонки);
		Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
			КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки(ОбязательныеКолонки);
		КонецЕсли;
		
	КонецЕсли;
	
	НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ДанныеКодовМаркировки, ОбязательныеКолонки);
	
КонецПроцедуры

// Выполняет обработку выбора пользователем уточняющей информации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой требуется обработка штрихкодов.
//  ИмяЭлементаВыбора - Строка - Идентификатор операции.
//  РезультатВыбора - Структура - Результат выбора данных пользователем.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - закэшированные данные формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыбор(Форма, ИмяЭлементаВыбора, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	Если ИмяЭлементаВыбора = "Номенклатура" Тогда
		РезультатДобавления = ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	КонецЕсли;

	Возврат РезультатДобавления;

КонецФункции

// Выполняет поиск ошибок в данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	ПравилаПроверкиНаОшибки = ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам);
	ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
КонецПроцедуры

// Приводит дерево упаковок и таблицу маркированные товары к детализации, которая указана в параметрах сканирования.
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//  ДанныеКодовМаркировки - Неопределено, ТаблицаЗначений - связанные данные кодов маркировки.
Процедура ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	Детализация = ПараметрыСканирования.ДетализацияСтруктурыХранения;
	
	СозданиеНаборов = ПараметрыСканирования.СозданиеНаборов;
	
	ДопустимыНаборы = Ложь;
	Для Каждого ВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
		Если ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетНаборы(ВидПродукции) Тогда
			ДопустимыНаборы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Полная детализация требуется для того, что бы в ДанныхКодовМаркировки можно
	// было найти информацию о вложенных единицах. В противном случае разрывается связь
	// между кодами из сервиса и считанными штрихкодами.
	Если Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки
		Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
		Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
	КонецЕсли;
	
	Если (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
		Или Не ЗначениеЗаполнено(Детализация))
		И (Не ДопустимыНаборы Или (ДопустимыНаборы И СозданиеНаборов)) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	КонецЕсли;
	
	МассивУдаляемыхСтрок = Новый Массив;

	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если Не (ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции, Истина) // Все виды продукции ИС МП и МОТП
			Или СтрокаДерева.ВидПродукции = Перечисления.ВидыПродукцииИС.ПустаяСсылка()) Тогда
			Продолжить;
		КонецЕсли;
		
		Если
			// Если детализация полная - любые упаковки добавляются в дерево упаковок.
			(Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
				Или Не ЗначениеЗаполнено(Детализация))
			
			// Если детализация - палеты с коробками, то все верхнеуровневые упаковки добавляются в дерево упаковок.
			Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
			
			// Если детализация - коробки с блоками, то все верхнеуровневые упаковки добавляются в дерево упаковок.
			Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
			
			// Если детализация - блоки с пачками или блоки, то верхнеуровневые упаковки добавляются в дерево
			// упаковок только в случае если они являются блоками или пачками.
			Или ((Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки)
				И СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая) Тогда
				
				Если ((СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
					И (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
						Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
						Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки))
					Или (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор И Не СозданиеНаборов) Тогда
					
					Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
						УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(ВложеннаяСтрокаДерева, МаркированныеТовары);
						УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(ВложеннаяСтрокаДерева, ДанныеКодовМаркировки);
					КонецЦикла;
					
					СтрокаДерева.Строки.Очистить();
					Продолжить;
					
				КонецЕсли;
				
				Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					И Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами Тогда
					
					GTIN = СтрокаДерева.GTIN;
					
					Если ЗначениеЗаполнено(GTIN) Тогда
						
						Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
							УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(ВложеннаяСтрокаДерева, МаркированныеТовары);
							УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(ВложеннаяСтрокаДерева, ДанныеКодовМаркировки);
						КонецЦикла;
						
						СтрокаДерева.Строки.Очистить();
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
		ИначеЕсли СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
		ОпределитьУдаляемыеСтрокиДереваПоДетализации(
			СтрокаДерева.Строки, ПараметрыСканирования, МассивУдаляемыхСтрок, МаркированныеТовары, ДанныеКодовМаркировки);
		
	КонецЦикла;
	
	Если МассивУдаляемыхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСтрокиДереваУпаковокПоДетализации(
		ДеревоУпаковок,
		МассивУдаляемыхСтрок,
		МаркированныеТовары,
		ДанныеКодовМаркировки);
	
	ВложенныеШтрихкоды.МаркированныеТовары = МаркированныеТовары;
	ВложенныеШтрихкоды.ДеревоУпаковок      = ДеревоУпаковок;
	
КонецПроцедуры

// Дополнение полученных данных штрихкодов данными, которые актуальны для табачной продукции.
// 
// Параметры:
//  ДанныеПоШтрихкодам    - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ПараметрыДополнения   - Неопределено - Поддержка обратной совместимости.
//                        - см. ШтрихкодированиеИС.ПараметрыДополненияВложенныхШтрихкодовУпаковок.
Процедура ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыДополнения = Неопределено) Экспорт
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП
		И Не ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции Тогда
		ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ДанныеПоШтрихкодам, "ТекстОшибки, ЕстьОшибки, ТребуетсяОбновлениеКлючаСессии");
		КонецЕсли;
	Иначе
		ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);

	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		НормализоватьДанныеВложенныхШтрихкодов(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды,
			ПараметрыСканирования,
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
	КонецЕсли;
	
	ШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(
		ДанныеПоШтрихкодам,
		ПараметрыСканирования);
	
	ШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамПараметрамиДополнения(
		ДанныеПоШтрихкодам,
		ПараметрыСканирования,
		ПараметрыДополнения);
	
	// Заполнение количества пачек по коэффициентам упаковок и коэффициентам из таблицы Описание GTIN
	СтрокиДляЗаполнения = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
			СтрокиДляЗаполнения.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		// Заполнить только коэффициенты упаковок, если не заполнены ранее
		ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиДляЗаполнения, ПараметрыСканирования, Ложь);
	Иначе
		// Заполнить коэффициенты упаковок и количество вложенных пачек
		ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиДляЗаполнения, ПараметрыСканирования);
	КонецЕсли;
	
	ДополнитьДанныеПоШтрихкодамСпецификойЧастичногоВыбытия(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

// Заполняет представления статусов, владельцев и прочую дополнительную информацию
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	МассивИНН = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.ВыгрузитьКолонку("ИННВладельца");
	МассивИНН = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИНН);
	Если МассивИНН.Количество() > 0 Тогда
		
		КонтрагентыПоИНН = ИнтеграцияИСМП.КонтрагентыПоСпискуИНН(МассивИНН);
		ОрганизацииПоИНН = ИнтеграцияИСМП.ОрганизацииПоСпискуИНН(МассивИНН);
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец)
				И ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				СтрокаДанных.Владелец = КонтрагентыПоИНН.Получить(СтрокаДанных.ИННВладельца);
				Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
					СтрокаДанных.Владелец = ОрганизацииПоИНН.Получить(СтрокаДанных.ИННВладельца);
				КонецЕсли;
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Владелец = СтрокаДанных.Владелец;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки перед формированием данных по штрихкодам. 
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования.
// Возвращаемое значение:
//  Соответствие - В случае удачного прохождения проверок - возвращает пустое соответствие,
//    В случае выявления ошибок или необходимого уточнения информации - возвращает заполненное соответствие с указанием причины.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	РезультатыПроверок = Новый Соответствие;
	
	Если Не ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции Тогда
		
		ТребуетсяАвторизацияИСМП = ШтрихкодированиеИСМПСлужебный.ТребуетсяАвторизацияПользователя(ПараметрыСканирования);
		
		Если Не ТребуетсяАвторизацияИСМП Тогда
			Возврат РезультатыПроверок;
		КонецЕсли;
		
	Иначе
		Возврат РезультатыПроверок;		
	КонецЕсли;
	
	ВидПродукцииТабак               = Перечисления.ВидыПродукцииИС.Табак;
	ВидПродукцииАльтернативныйТабак = Перечисления.ВидыПродукцииИС.АльтернативныйТабак;
	ВидПродукцииНСП                 = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		// Например, в заказе на Эмиссию можно сканировать EAN и сканирование КМ не требуется
		Если Не ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки
			И СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И Не ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 1 // Проверка на упаковку с 1 видом продукции.
			Или СтрокаДанных.ПрисутствуетТабачнаяПродукция // Неопределено: АТП или классический табак
			Тогда
			
			ВидыПродукцииПоКоду = Новый Массив;
			Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(ВидПродукцииТабак) <> Неопределено Тогда
				ВидыПродукцииПоКоду.Добавить(ВидПродукцииТабак);
			КонецЕсли;
			Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(ВидПродукцииАльтернативныйТабак) <> Неопределено Тогда
				ВидыПродукцииПоКоду.Добавить(ВидПродукцииАльтернативныйТабак);
			КонецЕсли;
			Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(ВидПродукцииНСП) <> Неопределено Тогда
				ВидыПродукцииПоКоду.Добавить(ВидПродукцииНСП);
			КонецЕсли;
			Если ВидыПродукцииПоКоду.Количество() > 0 Тогда
				РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
				РезультатОбработкиШтрихкода.ВидыПродукции.Очистить();
				Для Каждого ВидПродукции Из ВидыПродукцииПоКоду Цикл
					РезультатОбработкиШтрихкода.ВидыПродукции.Добавить(ВидПродукции);
				КонецЦикла;
				РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМП = Истина;
				ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Истина;
				СтрокаДанных.ОбработанСОшибками = Истина;
				РезультатыПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатОбработкиШтрихкода);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Формирует структуру, описывающую результат обработки кода маркировки.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода)
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой
//  надо поместить данные.
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка штрихкода.
// Возвращаемое значение:
//  Структура - содержит в себе информацию по результату обработки штрихкодов табачной продукции.
Функция РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, Форма = Неопределено) Экспорт
	
	РезультатОбработки = ШтрихкодированиеИСМПСлужебный.ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Если ДанныеШтрихкода.ТребуетсяВыборСерии Тогда
		
		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		
	КонецЕсли;
	
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьРезультатОбработкиШтрихкодаЧастичноеВыбытие(
		ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования);
	
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьРезультатОбработкиШтрихкодаПроверкаСредствамиККТ(
		ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования);
	
 	Если Не РезультатОбработки.ТребуетсяУточнениеДанных
		И Не (РезультатОбработки.ТребуетсяПроверкаСредствамиККТ
			  И Не РезультатОбработки.ПроверкаСредствамиККТЗавершена)
		И Форма <> Неопределено Тогда
		
		РезультатОбработки = ШтрихкодированиеИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	Иначе
		
		ШтрихкодированиеИСМПСлужебный.СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращает результат обработки штрихкода с описанием ошибки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = ШтрихкодированиеИСМПСлужебный.ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатДобавления.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		РезультатДобавления.ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	Иначе
		Для Каждого ВидПродукции Из ДанныеШтрихкода.ВидыПродукцииКодаМаркировки Цикл
			РезультатДобавления.ВидыПродукции.Добавить(ВидПродукции);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

// Реализует обработку действий пользователя. Возвращает результат обработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Действие - Строка - Идентификатор действия.
//  Параметры - (См. ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт

	Если Действие = "ОбработатьВыборСерии" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ШтрихкодированиеИСМПСлужебный.ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру "ВложенныеШтрихкоды" по коллекции кодов марок. Для марок табачных пачек так же формируется дерево
// упаковок. Неизвестные марки будут созданы в базе.
// 
// Параметры:
//  ДанныеШтрихкодовСписок - Массив из Структура:
//   * Штрихкод - Строка - Штрихкод
//   * Количество - Число - Количество
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//  ДляУпаковокТребоватьПодключениеМОТП - Булево - Требовать подключение МОТП для упаковок, если ранее не было проверено
//                                                 наличие данных для построения структуры без обращения к сервису.
//  СортироватьДанные - Булево - Необходимость сортировки данных дерева
// Возвращаемое значение:
//  См. ИнициализацияРезультатаФормированияВложенныхШтрихкодов
Функция ВложенныеШтрихкоды(ДанныеШтрихкодовСписок, ПараметрыСканирования, ДляУпаковокТребоватьПодключениеМОТП = Истина, СортироватьДанные = Ложь) Экспорт
	
	Результат = Неопределено;
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП Тогда
		
		Результат = ВложенныеШтрихкодыПоДаннымМОТП(ДанныеШтрихкодовСписок, ПараметрыСканирования);
		
	Иначе
		
		Результат = ИнициализацияРезультатаФормированияВложенныхШтрихкодов();
		
		Если ДляУпаковокТребоватьПодключениеМОТП Тогда
			
			Для Каждого СтрокаШтрихкода Из ДанныеШтрихкодовСписок Цикл
				
				ПримечаниеКРезультатуРазбора = Неопределено;
				ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
					СтрокаШтрихкода.Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции, ПримечаниеКРезультатуРазбора);
				
				Если ДанныеРазбора = Неопределено
					Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(ДанныеРазбора.ВидУпаковки, ДанныеРазбора) Тогда
					
					ТекстОшибки = НСтр(
					"ru = 'Обработка логистических упаковок, групповых упаковок и наборов
					      |невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки"".'");
					
					Если ДанныеРазбора = Неопределено Тогда
						
						ТекстОшибки = СтрШаблон(
							НСтр("ru ='%1
							          |
							          |Не удалось разобрать код маркировки: %2
							          |%3'"),
							ТекстОшибки,
							СтрЗаменить(СтрокаШтрихкода.Штрихкод, Символ(29), "<GS>"),
							ПримечаниеКРезультатуРазбора.ТекстОшибки);
							
					КонецЕсли;
					
					Результат.ЕстьОшибки  = Истина;
					Результат.ТекстОшибки = ТекстОшибки;
					
					Возврат Результат;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
		ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
			ДанныеПоШтрихкодам, ДанныеШтрихкодовСписок, ПараметрыСканирования);
		ШтрихкодированиеИС.ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ЗаполнитьДанныеНеизвестныхТабачныхПачекБезЗапросаСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары, ПараметрыСканирования);
		
		ШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			НоваяСтрокаДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДанных);
			
			НоваяСтрокаТаблицы = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаДанных);
			НоваяСтрокаТаблицы.СтрокаДерева = НоваяСтрокаДерева;
			
		КонецЦикла;
		
		Результат.ВложенныеШтрихкоды    = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		Результат.ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
		
	КонецЕсли;
	
	Если СортироватьДанные
		И Результат.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.ВложенныеШтрихкоды, "ДеревоУпаковок") Тогда
			Результат.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Сортировать("Штрихкод", Истина);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.ВложенныеШтрихкоды, "МаркированныеТовары") Тогда
			Результат.ВложенныеШтрихкоды.МаркированныеТовары.Сортировать("Штрихкод");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запрос в МОТП, на основании которого формирует "ВложенныеШтрихкоды".
//
// Параметры:
//  МассивСтрокТаблицы - Массив - Список строк таблицы "ДанныеКодовМаркировки" См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ТребуемаяДетализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Требуемая детализация
// Возвращаемое значение:
//  Структура - Описание:
// * ТекстОшибки - Строка - Текст ошибки получения данных из МОТП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка при попытке получения данных из МОТП.
// * ВложенныеШтрихкоды - Неопределено, Структура - Включает в себя дерево упаковок и маркированные товары.
Функция ДеревоУпаковокПоДаннымМОТП(МассивСтрокТаблицы, ПараметрыСканирования, ТребуемаяДетализация = Неопределено) Экспорт
	
	Если ТребуемаяДетализация = Неопределено Тогда
		Детализация = ПараметрыСканирования.ДетализацияСтруктурыХранения;
		
		ПравилаДетализацииДереваУпаковок = ПравилаДетализацииДереваУпаковок();
		ПравилоДетализации = ПравилаДетализацииДереваУпаковок[Детализация];
		
		// Полная детализация требуется для того, что бы в ДанныхКодовМаркировки можно
		// было найти информацию о вложенных единицах. В противном случае разрывается связь
		// между кодами из сервиса и считанными штрихкодами.
		Если ЗначениеЗаполнено(ПравилоДетализации) И ПравилоДетализации.РазрешеныПачки Тогда
			Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
		КонецЕсли;
	Иначе
		Детализация = ТребуемаяДетализация;
	КонецЕсли;
	
	РезультатПолученияДерева = ИнтерфейсМОТП.ДеревоУпаковок(
		МассивСтрокТаблицы, Детализация, ПараметрыСканирования);
	
	Если РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии Тогда
		РезультатПолученияДерева.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МОТП.
		                                                  |По причине: Требуется обновление ключа сессии.'");
	КонецЕсли;
	
	Возврат РезультатПолученияДерева;
	
КонецФункции

// Получает данные из государтсвенных информационных систем и заполняет данные для упаковок, о которых нет никакой 
// информации в справочнике Штрихкоды упаковок.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	МассивСтрокТаблицы = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И Не ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.Идентифицирован Тогда
			Если Не ШтрихкодированиеИСМПСлужебный.СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаДанных, ПараметрыСканирования) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПрисутствуетТабачнаяПродукция = ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки);
		ЭтоЛогистическаяИлиГрупповаяУпаковка = ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки,, Ложь)
			Или (Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
				И СтрокаДанных.ДанныеРазбора <> Неопределено
				И ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
					СтрокаДанных.ДанныеРазбора.ВидУпаковки, СтрокаДанных.ДанныеРазбора));
		
		// В каких случаях требуется выдавать сообщение об ошибке, если ЗапрашиватьДанныеНеизвестныхУпаковок = Ложь
		// - если в упаковке нет GTIN
		// - В зависимости от детализации:
		//     * Полная                                          - сканируем короб или блок
		//     * Индивидуальные потребительские упаковки (пачки) - сканируем короб или блок
		//     * Блоки с пачками                                 - сканируем короб или блок
		//     * Короба с блоками                                - сканируем короб
		//     * Потребительские упаковки                        - сканируем короб
		Если ПрисутствуетТабачнаяПродукция
			И Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП
			И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
			
			ТекстОшибки = Неопределено;
			
			Если ЭтоЛогистическаяИлиГрупповаяУпаковка
				И Не ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В коде упаковки не содержится GTIN, невозможно определить
					      |количество вложенных пачек.
					      |Включите опцию ""Запрашивать данные сервиса ГИС МТ""
					      |в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте содержимое упаковки.'");
				
			КонецЕсли;
			
			Если ЭтоЛогистическаяИлиГрупповаяУпаковка
				И (ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
				Или Не ЗначениеЗаполнено(ПараметрыСканирования.ДетализацияСтруктурыХранения))
				И ПараметрыСканирования.ВидОперацииИСМП <> Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В режиме детализации: ""Полная"" обработка логистических упаковок и блоков
					      |невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте вложенные пачки
					      |или измените режим детализации на ""Коробки с блоками"".'");
				
			КонецЕсли;
			
			Если ЭтоЛогистическаяИлиГрупповаяУпаковка
				И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В режиме детализации: ""Пачки"" обработка логистических упаковок и блоков
					      |невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте вложенные пачки
					      |или измените режим детализации на ""Коробки с блоками"".'");
				
			КонецЕсли;
			
			Если ЭтоЛогистическаяИлиГрупповаяУпаковка
				И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В режиме детализации: ""Блоки с пачками"" обработка логистических упаковок
					      |и блоков невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте вложенные пачки
					      |или измените режим детализации на ""Коробки с блоками"".'");
				
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В режиме детализации: ""Коробки с блоками"" обработка логистических упаковок
					      |невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте вложенные блоки
					      |или измените режим детализации на ""Палеты с коробками"".'");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстОшибки) ТОгда
				Если ПустаяСтрока(СтрокаДанных.ТекстОшибки) Тогда
					СтрокаДанных.ТекстОшибки = ТекстОшибки;
				Иначе
					СтрокаДанных.ТекстОшибки = СтрШаблон(
						"%1
						|%2", СтрокаДанных.ТекстОшибки, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоЛогистическаяИлиГрупповаяУпаковка
			И Не СтрокаДанных.Идентифицирован
			И ПрисутствуетТабачнаяПродукция
			И Не ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			МассивСтрокТаблицы.Добавить(СтрокаДанных);
			СтрокаДанных.Идентифицирован = ЗначениеЗаполнено(СтрокаДанных.GTIN);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В маркировке товаров разрешено добавлять пустые упаковки при выключенном запросе статусов
	Если ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП Тогда
		
		Результат = ДеревоУпаковокПоДаннымМОТП(МассивСтрокТаблицы, ПараметрыСканирования);
		
		Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат;
			
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
			И ПараметрыСканирования.ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП Тогда
			
			РезультатПроверкиСеройЗоны = ПроверитьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодов(
				Результат, ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
			
			Если Не ПустаяСтрока(РезультатПроверкиСеройЗоны.ТекстОшибки) Тогда
				
				ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
				ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатПроверкиСеройЗоны.ТекстОшибки;
				ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатПроверкиСеройЗоны.ТребуетсяОбновлениеКлючаСессии;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ОтключитьОтборПоВидуПродукции",                                  Ложь);
		ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойПотребительскихУпаковок",                 Ложь);
		ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок", Истина);
		ПараметрыОбработки.Вставить("ЭтоЗаполнениеВложенныхШтрихкодов",                               Ложь);
		ПараметрыОбработки.Вставить("СвязыватьСтрокиДереваСДаннымиКодовМаркировки",                   Ложь);
		
		ОбработатьДеревоПолученноеИзМОТП(
			Результат.ДеревоУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования,
			ПараметрыОбработки);
		
	Иначе
		
		// Заполнить коэффициенты упаковок и количество вложенных пачек
		ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(МассивСтрокТаблицы, ПараметрыСканирования);
		
	КонецЕсли;
	
	ШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

Функция ПроверитьПотребительскиеУпаковкиНаВхождениеВСеруюЗону(ЭлементыДанных, ПараметрыСканирования)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	КандидатыВСеруюЗону = Новый Массив;
	Для Каждого ЭлементДанных Из ЭлементыДанных Цикл
		
		Если ЭлементДанных.ВидПродукции <> Перечисления.ВидыПродукцииИС.Табак Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП;
		ИначеЕсли ЭлементДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			И ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП <> Неопределено Тогда
			ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП;
		Иначе
			ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыМОТП;
		КонецЕсли;
		
		Если ДопустимыеСтатусыМОТП.Найти(ЭлементДанных.Статус) = Неопределено Тогда
			КандидатыВСеруюЗону.Добавить(ЭлементДанных);
		КонецЕсли;
	
	КонецЦикла;
	
	Если КандидатыВСеруюЗону.Количество() = 0 Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатПроверки = ИнтерфейсМОТП.ПроверитьСеруюЗонуКодовМаркировки(КандидатыВСеруюЗону);
	Если РезультатПроверки.СостояниеСеройЗоны <> Неопределено Тогда
		
		Для Каждого ЭлементДанных Из КандидатыВСеруюЗону Цикл
			
			СостояниеСеройЗоны = РезультатПроверки.СостояниеСеройЗоны[ЭлементДанных];
			
			Если СостояниеСеройЗоны = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДанных.ВСеройЗоне = СостояниеСеройЗоны.ВСеройЗоне;
			
		КонецЦикла;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки                    = РезультатПроверки.ТекстОшибки;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатПроверки.ТребуетсяОбновлениеКлючаСессии;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПроверитьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодов(Результат, ДанныеКодовМаркировки, ПараметрыСканирования)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ШтрихкодыEAN = Новый Массив;
	Для Каждого СтрокаТЧ Из Результат.GTIN Цикл
		ШтрихкодыEAN.Добавить(ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТЧ.GTIN));
	КонецЦикла;
	
	ИнформацияПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	СтандартнаяВложенностьУпаковок = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ИнформацияПоШтрихкодамEAN Цикл
		СтандартнаяВложенностьУпаковок.Вставить(
			ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаТЧ.ШтрихкодEAN),
			СтрокаТЧ.ПлановоеКоличествоПотребительскихУпаковок);
	КонецЦикла;
	
	КПолучениюОписанияGTIN = Новый Массив;
	Для Каждого СтрокаТЧ Из Результат.GTIN Цикл
		Если Не ЗначениеЗаполнено(СтандартнаяВложенностьУпаковок[СтрокаТЧ.GTIN]) Тогда
			КПолучениюОписанияGTIN.Добавить(СтрокаТЧ.GTIN);
		КонецЕсли;
	КонецЦикла;
	
	Если КПолучениюОписанияGTIN.Количество() > 0 Тогда
		КоэффициентыОписанияGTIN = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(КПолучениюОписанияGTIN);
		Для Каждого КлючИЗначение Из КоэффициентыОписанияGTIN Цикл
			СтандартнаяВложенностьУпаковок.Вставить(
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение.КоличествоПотребительскихУпаковок);
		КонецЦикла;
	КонецЕсли;
	
	КандидатыВСеруюЗону = Новый ТаблицаЗначений;
	КандидатыВСеруюЗону.Колонки.Добавить("СтрокаДерева");
	КандидатыВСеруюЗону.Колонки.Добавить("ОбработаноСерыхКодов", Новый ОписаниеТипов("Число"));
	КандидатыВСеруюЗону.Индексы.Добавить("СтрокаДерева");
	
	Для Каждого СтрокаДерева Из Результат.ДеревоУпаковок.Строки Цикл
		
		НайтиУпаковкиДляПроверкиНаВхождениеВСеруюЗону(
			СтрокаДерева, КандидатыВСеруюЗону, СтандартнаяВложенностьУпаковок, ПараметрыСканирования);
		
	КонецЦикла;
	
	Если КандидатыВСеруюЗону.Количество() = 0 Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатПроверки = ИнтерфейсМОТП.ПроверитьСеруюЗонуКодовМаркировки(КандидатыВСеруюЗону.ВыгрузитьКолонку("СтрокаДерева"));
	Если РезультатПроверки.СостояниеСеройЗоны <> Неопределено Тогда
		
		Для Каждого ЭлементДанных Из КандидатыВСеруюЗону Цикл
			
			СтрокаДерева = ЭлементДанных.СтрокаДерева;
			
			СостояниеСеройЗоны = РезультатПроверки.СостояниеСеройЗоны[СтрокаДерева];
			
			Если СостояниеСеройЗоны = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.ВСеройЗоне        = СостояниеСеройЗоны.ВСеройЗоне;
			СтрокаДерева.СодержитСерыеКоды = СостояниеСеройЗоны.СодержитСерыеКоды;
			
			ИзменениеКоличествоПотребительскихУпаковок = 0;
			ОчиститьГрупповыеУпаковки = Истина;
			
			Если СостояниеСеройЗоны.СодержитСерыеКоды
				И Не ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
				И Не ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
				
				// Очистить вложенные упаковки, привести количество пачек к количеству, заданному произодителем
				ИзменениеКоличествоПотребительскихУпаковок = СостояниеСеройЗоны.КоличествоПотребительскихУпаковок - ЭлементДанных.ОбработаноСерыхКодов;
				Если ИзменениеКоличествоПотребительскихУпаковок <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементДанных.ОбработаноСерыхКодов = ЭлементДанных.ОбработаноСерыхКодов + ИзменениеКоличествоПотребительскихУпаковок;
				
				СтрокаДерева.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковок + ИзменениеКоличествоПотребительскихУпаковок;
				Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Групповая Тогда
					ОчиститьГрупповыеУпаковки = Истина;
					СтрокаДерева.КоличествоГрупповыхУпаковок = 0;
				КонецЕсли;
				
				СтрокаДерева.Строки.Очистить();
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ДатаПроизводства)
				И СтрокаДерева.ДатаПроизводства < ПараметрыСканирования.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП
				И Не ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
				И Не ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
				
				// До первого июля не действует контроль...
				ИзменениеКоличествоПотребительскихУпаковок = СтандартнаяВложенностьУпаковок[СтрокаДерева.GTIN] - СтрокаДерева.КоличествоПотребительскихУпаковок;
				СтрокаДерева.КоличествоПотребительскихУпаковок = СтандартнаяВложенностьУпаковок[СтрокаДерева.GTIN];
				Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Групповая Тогда
					ОчиститьГрупповыеУпаковки = Истина;
					СтрокаДерева.КоличествоГрупповыхУпаковок = 0;
				КонецЕсли;
				
				СтрокаДерева.Строки.Очистить();
				
			КонецЕсли;
			
			Если СтрокаДерева.Родитель <> Неопределено Тогда
				ПрименитьИзменениеКСтрокамВышестоящегоУровня(СтрокаДерева.Родитель, ИзменениеКоличествоПотребительскихУпаковок, ОчиститьГрупповыеУпаковки, КандидатыВСеруюЗону);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки                    = РезультатПроверки.ТекстОшибки;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатПроверки.ТребуетсяОбновлениеКлючаСессии;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПрименитьИзменениеКСтрокамВышестоящегоУровня(СтрокаДерева, ИзменениеКоличествоПотребительскихУпаковок, ОчиститьГрупповыеУпаковки, КандидатыВСеруюЗону)
	
	ЭлементДанных = КандидатыВСеруюЗону.Найти(СтрокаДерева, "СтрокаДерева");
	Если ЭлементДанных <> Неопределено Тогда
		ЭлементДанных.ОбработаноСерыхКодов = ЭлементДанных.ОбработаноСерыхКодов + ИзменениеКоличествоПотребительскихУпаковок;
	КонецЕсли;
	
	СтрокаДерева.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковок + ИзменениеКоличествоПотребительскихУпаковок;
	Если ОчиститьГрупповыеУпаковки Тогда
		СтрокаДерева.КоличествоГрупповыхУпаковок = 0;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		ПрименитьИзменениеКСтрокамВышестоящегоУровня(СтрокаДерева.Родитель, ИзменениеКоличествоПотребительскихУпаковок, ОчиститьГрупповыеУпаковки, КандидатыВСеруюЗону);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(СтрокаДерева, ДанныеКодовМаркировки) Экспорт
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеКодовМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаДанных = ДанныеКодовМаркировки.Найти(СтрокаДерева, "СтрокаДерева");
	Если СтрокаДанных <> Неопределено Тогда
		ДанныеКодовМаркировки.Удалить(СтрокаДанных);
	КонецЕсли;
	
	Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(ВложеннаяСтрокаДерева, ДанныеКодовМаркировки);
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиУпаковкиДляПроверкиНаВхождениеВСеруюЗону(СтрокаДерева, КандидатыВСеруюЗону, СтандартнаяВложенностьУпаковок, ПараметрыСканирования)
	
	ДобавитьВКандидаты = Ложь;
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		ФактическоеКоличествоВложенныхУпаковок = 0;
		КоэффициентВложенныхЕдиниц             = Неопределено;
		Для Каждого СтрокаДереваВложенная Из СтрокаДерева.Строки Цикл
			
			Если СтрокаДереваВложенная.ВидПродукции <> Перечисления.ВидыПродукцииИС.Табак Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДереваВложенная.GTIN) Тогда
				
				КоэффициентТекущейУпаковки = КоэффициентУпаковки(СтрокаДереваВложенная, СтандартнаяВложенностьУпаковок);
				Если Не ЗначениеЗаполнено(КоэффициентТекущейУпаковки)
					И СтрокаДереваВложенная.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					КоэффициентТекущейУпаковки = 1;
				КонецЕсли;
				
				Если КоэффициентВложенныхЕдиниц = Неопределено Тогда
					КоэффициентВложенныхЕдиниц = КоэффициентТекущейУпаковки;
					Если Не ЗначениеЗаполнено(КоэффициентВложенныхЕдиниц)
						И СтрокаДереваВложенная.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
						КоэффициентВложенныхЕдиниц = 1;
					КонецЕсли;
				ИначеЕсли КоэффициентВложенныхЕдиниц <> КоэффициентТекущейУпаковки Тогда
					// В упаковке содержится разная продукция
					КоэффициентВложенныхЕдиниц = 0;
				КонецЕсли;
				
				ФактическоеКоличествоВложенныхУпаковок = ФактическоеКоличествоВложенныхУпаковок + 1;
				
			КонецЕсли;
			
			НайтиУпаковкиДляПроверкиНаВхождениеВСеруюЗону(
				СтрокаДереваВложенная, КандидатыВСеруюЗону, СтандартнаяВложенностьУпаковок, ПараметрыСканирования);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
			КоэффициентУпаковки = КоэффициентУпаковки(СтрокаДерева, СтандартнаяВложенностьУпаковок);
		Иначе
			КоэффициентУпаковки = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(КоэффициентВложенныхЕдиниц)
			И ЗначениеЗаполнено(КоэффициентУпаковки) Тогда
			
			ЕмкостьУпаковки = КоэффициентУпаковки / КоэффициентВложенныхЕдиниц;
			
			Если ЕмкостьУпаковки <> ФактическоеКоличествоВложенныхУпаковок
				И ЕмкостьУпаковки <> 1 Тогда
				ДобавитьВКандидаты = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая)
		И СтрокаДерева.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		Если ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
			КоэффициентУпаковки = КоэффициентУпаковки(СтрокаДерева, СтандартнаяВложенностьУпаковок);
		Иначе
			КоэффициентУпаковки = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КоэффициентУпаковки)
			И КоэффициентУпаковки <> СтрокаДерева.КоличествоПотребительскихУпаковок Тогда
			ДобавитьВКандидаты = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДобавитьВКандидаты Тогда
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП;
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			И ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП <> Неопределено Тогда
			ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП;
		Иначе
			ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыМОТП;
		КонецЕсли;
		
		Если ДопустимыеСтатусыМОТП.Найти(СтрокаДерева.Статус) = Неопределено Тогда
			ДобавитьВКандидаты = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДобавитьВКандидаты
		И СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
		КандидатВСеруюЗону = КандидатыВСеруюЗону.Добавить();
		КандидатВСеруюЗону.СтрокаДерева = СтрокаДерева;
	КонецЕсли;
	
КонецПроцедуры

Функция КоэффициентУпаковки(СтрокаДерева, СтандартнаяВложенностьУпаковок)
	
	КоличествоВложенныхЕдиницGTIN02 = Неопределено;
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И СтрокаДерева.СоставКодаМаркировки <> Неопределено Тогда
		СтрокаДерева.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц", КоличествоВложенныхЕдиницGTIN02);
	КонецЕсли;
	
	Если КоличествоВложенныхЕдиницGTIN02 <> Неопределено Тогда
		
		КоэффициентGTIN02 = СтандартнаяВложенностьУпаковок[СтрокаДерева.GTIN];
		
		Если ТипЗнч(КоэффициентGTIN02) = Тип("Число") И КоэффициентGTIN02 > 0 Тогда
			КоэффициентУпаковки = КоличествоВложенныхЕдиницGTIN02 * КоэффициентGTIN02;
		Иначе
			КоэффициентУпаковки = КоличествоВложенныхЕдиницGTIN02;
		КонецЕсли;
		
	Иначе
		КоэффициентУпаковки = СтандартнаяВложенностьУпаковок[СтрокаДерева.GTIN];
	КонецЕсли;
	
	Возврат КоэффициентУпаковки;
	
КонецФункции

Функция GTINВложеннойГрупповойУпаковки(СтрокаДерева)
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
			Если ВложеннаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				Возврат ВложеннаяСтрокаДерева.GTIN;
			ИначеЕсли ВложеннаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				Возврат GTINВложеннойГрупповойУпаковки(ВложеннаяСтрокаДерева);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Формирует вложенные штрихкоды по данным, полученным в системе МОТП.
// 
// Параметры:
//  ДанныеШтрихкодовСписок - Массив из Структура - Описание:
// * Штрихкод - Строка - Код маркировки.
// * Количество - Число - Количество.
//  ПараметрыСканирования - Структура - Описание:
// Возвращаемое значение:
//  Структура - (См. ИнициализацияФормированияПолученияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыПоДаннымМОТП(ДанныеШтрихкодовСписок, ПараметрыСканирования)
	
	РезультатФормированияВложенныхШтрихкодов = ИнициализацияРезультатаФормированияВложенныхШтрихкодов();
	
	РезультатФормированияВложенныхШтрихкодов.Вставить("ВложенныеШтрихкоды",             Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ЕстьОшибки",                     Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТекстОшибки",                    "");
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
	ШтрихкодированиеИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
		ДанныеПоШтрихкодам, ДанныеШтрихкодовСписок, ПараметрыСканирования);
	
	Если ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции)
		Или ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		ШтрихкодированиеИСМПСлужебный.ОпределениеВидаПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Истина);
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки                     = ДанныеПоШтрихкодам.ЕстьОшибки;
			РезультатФормированияВложенныхШтрихкодов.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
			РезультатФормированияВложенныхШтрихкодов.ТекстОшибки                    = ДанныеПоШтрихкодам.ТекстОшибки;
			Если РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки Тогда
				Возврат РезультатФормированияВложенныхШтрихкодов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ШтрихкодированиеИС.ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	// При получении вложенных штрихкодов в сценариях загрузки дерева документа поступления
	// требуется в точности обеспечить требуемую детализацию.
	// Однако, при сканировании кодов логистических упаковок в случае детализации
	// Пачки или Блоки с пачками требуется детализация более высокого порядка.
	ТребуемаяДетализация = ПараметрыСканирования.ДетализацияСтруктурыХранения;
	РезультатПолученияДерева = ДеревоУпаковокПоДаннымМОТП(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования, ТребуемаяДетализация);
	
	РезультатФормированияВложенныхШтрихкодов.ТекстОшибки                    = РезультатПолученияДерева.ТекстОшибки;
	РезультатФормированияВложенныхШтрихкодов.ТребуетсяОбновлениеКлючаСессии = РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии;
	РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки                     = Не ПустаяСтрока(РезультатПолученияДерева.ТекстОшибки);
	
	Если РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки Тогда
		Возврат РезультатФормированияВложенныхШтрихкодов;
	КонецЕсли;
	
	Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
		И ПараметрыСканирования.ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП Тогда
		
		РезультатПроверкиСеройЗоны = ПроверитьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодов(
			РезультатПолученияДерева, ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
		
		Если Не ПустаяСтрока(РезультатПроверкиСеройЗоны.ТекстОшибки) Тогда
			
			РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки                     = Истина;
			РезультатФормированияВложенныхШтрихкодов.ТекстОшибки                    = РезультатПроверкиСеройЗоны.ТекстОшибки;
			РезультатФормированияВложенныхШтрихкодов.ТребуетсяОбновлениеКлючаСессии = РезультатПроверкиСеройЗоны.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат РезультатФормированияВложенныхШтрихкодов;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОтключитьОтборПоВидуПродукции",                                  Не (ПараметрыСканирования.ОтборПоВидуПродукции И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП));
	ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойПотребительскихУпаковок",                 Ложь);
	ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок", Ложь);
	ПараметрыОбработки.Вставить("ЭтоЗаполнениеВложенныхШтрихкодов",                               Истина);
	ПараметрыОбработки.Вставить("СвязыватьСтрокиДереваСДаннымиКодовМаркировки",                   Ложь);
	
	ОбработатьДеревоПолученноеИзМОТП(РезультатПолученияДерева.ДеревоУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыОбработки);
	
	ШтрихкодированиеИС.ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(
		ДанныеПоШтрихкодам, ПараметрыСканирования);
	// Заполнить только коэффициенты упаковок, если не заполнены ранее
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования, Ложь);
	
	РезультатФормированияВложенныхШтрихкодов.ВложенныеШтрихкоды    = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	РезультатФормированияВложенныхШтрихкодов.ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

// Инициализирует результат формирования вложенных штрихкодов по кодам маркировки МОТП.
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ВложенныеШтрихкоды - Структура - Описание:
// * ЕстьОшибки - Булево - Истина, если есть ошибки.
// * ТекстОшибки - Строка - Описание ошибки.
// * ТребуетсяОбновлениеКлючаСессии - Булево - Истина, если требуется авторизация.
Функция ИнициализацияРезультатаФормированияВложенныхШтрихкодов()
	
	РезультатФормированияВложенныхШтрихкодов = Новый Структура;
	
	РезультатФормированияВложенныхШтрихкодов.Вставить("ДанныеКодовМаркировки",          Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ВложенныеШтрихкоды",             Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ЕстьОшибки",                     Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТекстОшибки",                    "");
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

// Инициализирует структуру правил для проверки на ошибки данных по кодам маркировки.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Структура - Описание:
// * КонтрольВладельца - Массив - коллекция, куда требуется поместить строки с ошибками при контроле владельца.
// * КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП - Массив - коллекция, куда требуется поместить строки с ошибками при контроле состава упаковок.
// * КонтрольСпособаВводаВОборот - Массив - коллекция, куда требуется поместить строки с ошибками при контроле способа ввода в оборот.
// * КонтрольСерий - Массив - коллекция, куда требуется поместить строки с ошибками при контроле серий.
// * КонтрольСтатусов - Массив - коллекция, куда требуется поместить строки с ошибками при контроле допустимых статусов.
Функция ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам, ПроверенныеШтрихкоды = Неопределено)
	
	ПравилаПроверкиНаОшибки = Новый Структура;
	ПравилаПроверкиНаОшибки.Вставить("ПроверенныеШтрихкоды", Новый Соответствие);
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат ПравилаПроверкиНаОшибки;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.Свойство("ДопустимыеСтатусыМОТП") Тогда
		Возврат ПравилаПроверкиНаОшибки;
	КонецЕсли;
	
	Если ПараметрыСканирования.ДопустимыеСтатусыМОТП.Количество() > 0
		И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП
		И Не ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции Тогда
		
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("СтрокиСОшибками",  Новый Массив);
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольПустыхУпаковок
		И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП
		И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПустыхУпаковок", Новый Массив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
		Если ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП
			И Не ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции Тогда
			ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборот",        Новый Массив);
		Иначе
			ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборотОффлайн", Новый Массив);
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП
		И ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса <> Неопределено Тогда
		
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП", Новый Массив);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец)
		И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП
		И Не ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПолногоКодаМаркировки", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтролироватьСоставАгрегатов Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьСоставЛогистическихУпаковок",             Новый Массив);
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьСоставГрупповыхУпаковок",                 Новый Массив);
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок", Новый Массив);
	КонецЕсли;
	
	ПравилаПроверкиНаОшибки.Вставить("ПолноеВыбытиеНевозможноРанееВыбывалЧастично",    Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("КодМаркировкиВыбывалЧастичноОперацияНевозможна", Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("ОшибкаНастройкиПараметровЧастичногоВыбытия",     Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("КонтрольУжеДобавленоВДокумент",                  Новый Массив);
	
	Возврат ПравилаПроверкиНаОшибки;
	
КонецФункции

// Дополняет данные по штрихкодам информацией по табачным пачкам без запроса сведений из МОТП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхТабачныхПачекБезЗапросаСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	КодыДляАнализа = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВозможнаПродукцияМОТП(СтрокаТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			СтрокаТаблицы.КоличествоПотребительскихУпаковок  = 1;
			СтрокаТаблицы.ШтрихкодУпаковки = ШтрихкодированиеИС.СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаТаблицы, ПараметрыСканирования);
			СтрокаТаблицы.Идентифицирован  = Истина;
			
		Иначе
			
			КодыДляАнализа.Добавить(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнить только коэффициенты упаковок, если не заполнены ранее
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(КодыДляАнализа, ПараметрыСканирования, Ложь);
	
	Для Каждого СтрокаТаблицы Из КодыДляАнализа Цикл
		
		Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			СтрокаТаблицы.КоличествоПотребительскихУпаковок  = 1;
			СтрокаТаблицы.ШтрихкодУпаковки = ШтрихкодированиеИС.СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаТаблицы, ПараметрыСканирования);
			СтрокаТаблицы.Идентифицирован  = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Запрашивает сведения из МОТП по кодам марировки табачных пачек. Дополняет данные по штрихкодам полученными сведениями.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхТабачныхПачекСЗапросомСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	МассивСтрокТаблицы = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.ОбработанСОшибками
			Или ЗначениеЗаполнено(СтрокаТаблицы.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.Идентифицирован
			И ВозможнаПродукцияМОТП(СтрокаТаблицы)
			И (СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.ПустаяСсылка()) Тогда
			МассивСтрокТаблицы.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ДеревоУпаковокПоДаннымМОТП(МассивСтрокТаблицы, ПараметрыСканирования);
	
	Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
		
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
		И ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
		
		РезультатПроверкиСеройЗоны = ПроверитьПотребительскиеУпаковкиНаВхождениеВСеруюЗону(Результат.ДеревоУпаковок.Строки, ПараметрыСканирования);
		
		Если Не ПустаяСтрока(РезультатПроверкиСеройЗоны.ТекстОшибки) Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатПроверкиСеройЗоны.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатПроверкиСеройЗоны.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОтключитьОтборПоВидуПродукции",                                  Ложь);
	ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойПотребительскихУпаковок",                 Истина);
	ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок", Ложь);
	ПараметрыОбработки.Вставить("ЭтоЗаполнениеВложенныхШтрихкодов",                               Ложь);
	ПараметрыОбработки.Вставить("СвязыватьСтрокиДереваСДаннымиКодовМаркировки",                   Ложь);
	
	ОбработатьДеревоПолученноеИзМОТП(Результат.ДеревоУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыОбработки);
	
КонецПроцедуры

// Расчитывает МРЦ по строкам дерева по групповой упаковке в родительской строке.
// 
// Параметры:
// 	ВычисляемыеСтроки - Массив из СтрокаДереваЗначений - данные для расчета МРЦ по строкам.
Процедура РасчетМРЦПоСтрокамДерева(ВычисляемыеСтроки) Экспорт
	
	Если ВычисляемыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ВычисляемыеСтроки Цикл
		
		РодительСтроки = СтрокаДерева.Родитель;
		Если РодительСтроки = Неопределено
			Или ЗначениеЗаполнено(СтрокаДерева.МРЦ)
			Или Не ЗначениеЗаполнено(РодительСтроки.МРЦ)
			Или Не ЗначениеЗаполнено(РодительСтроки.КоличествоПотребительскихУпаковок) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РодительСтроки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДерева.МРЦ = РодительСтроки.МРЦ / РодительСтроки.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает инвариантный хэш: из кода исключается МРЦ, убираются скобки
// 
// Параметры:
//  СтрокаДанных  - Массив из СтрокаТаблицыЗначений: См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодама
//                - Структура - Строка данных для расчета.
//  ДанныеРазбора - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки.
Процедура РассчитатьХэшСуммуНормализации(СтрокаДанных, ДанныеРазбора) Экспорт
	
	Если ДанныеРазбора = Неопределено
		Или СтрокаДанных.СоставКодаМаркировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ХешСуммаНормализации)
		И ЗначениеЗаполнено(СтрокаДанных.НормализованныйШтрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ВключаяТабачнуюПродукцию = Истина;
	Если ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ДанныеРазбора.ВидыПродукции, ВключаяТабачнуюПродукцию) Тогда
		
		Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
				ДанныеРазбора.ВидУпаковки, ДанныеРазбора) Тогда
			
			ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации(
				СтрокаДанных.ВидПродукции);
			НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				ДанныеРазбора, СтрокаДанных.ВидПродукции, ПараметрыНормализацииКМ);
			
			СтрокаДанных.НормализованныйШтрихкод = НормализованныйШтрихкод;
			СтрокаДанных.ХешСуммаНормализации = ИнтеграцияИС.ХэшСуммаСтроки(СтрокаДанных.НормализованныйШтрихкод);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
			ВидПродукции = СтрокаДанных.ВидПродукции;
		ИначеЕсли ДанныеРазбора.ВидыПродукции.Количество() Тогда
			ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
		КонецЕсли;
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации();
		ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "КодМаркировки";
		
		СтрокаДанных.НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);
		СтрокаДанных.ХешСуммаНормализации = ИнтеграцияИС.ХэшСуммаСтроки(СтрокаДанных.НормализованныйШтрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НормализованныйШтрихкод(Штрихкод, ВидПродукции, КэшДанныхРазбора = Неопределено, ПользовательскиеПараметрыРазбора = Неопределено) Экспорт
	
	НормализованныйШтрихкод = "";
	
	Если КэшДанныхРазбора = Неопределено Тогда
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(Штрихкод, ВидПродукции, ПримечаниеКРезультатуРазбора,, ПользовательскиеПараметрыРазбора);
	Иначе
		ДанныеРазбораИРезультат = КэшДанныхРазбора[Штрихкод];
		Если ДанныеРазбораИРезультат <> Неопределено Тогда
			ПримечаниеКРезультатуРазбора = ДанныеРазбораИРезультат.ПримечаниеКРазборуШтрихкода;
			ДанныеРазбора                = ДанныеРазбораИРезультат.ДанныеРазбора;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеРазбора = Неопределено Тогда
		Возврат Штрихкод;
	КонецЕсли;
	
	ВключатьТабачнуюПродукцию = Истина;
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, ВключатьТабачнуюПродукцию)
		И (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(ДанныеРазбора.ВидУпаковки, ДанныеРазбора)) Тогда
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации(
			ВидПродукции);
		НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);
		
	ИначеЕсли ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		И ДанныеРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
		
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			ВидПродукции = ВидПродукции;
		ИначеЕсли ДанныеРазбора.ВидыПродукции.Количество() Тогда
			ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
		КонецЕсли;
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации();
		ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "КодМаркировки";
		
		НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);
		
	ИначеЕсли ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		НормализованныйШтрихкод = Штрихкод;
		
	Иначе
		
		НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
		
	КонецЕсли;
	
	Возврат НормализованныйШтрихкод;
	
КонецФункции

Процедура РасчетКоэффициентовПоСтатистике(ДеревоУпаковок, УточнениеКоэффициентовУпаковок, ПараметрыСканирования) Экспорт
	
	ДоляКоличестваОтклонений = 10; // допускается <= 10% упаковок с отклонением по количеству
	СодержитСерыеКоды        = Новый Соответствие();
	
	ДанныеДляОбработки = Новый ТаблицаЗначений();
	ДанныеДляОбработки.Колонки.Добавить("GTIN",           Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеДляОбработки.Колонки.Добавить("ВидУпаковки",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеДляОбработки.Колонки.Добавить("ВидПродукции",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеДляОбработки.Колонки.Добавить("ИсходныеДанные", Неопределено);
	ДанныеДляОбработки.Колонки.Добавить("СтрокиДерева",   Неопределено);
	
	ДанныеДляОбработки.Индексы.Добавить("GTIN,ВидУпаковки");
	
	Для Каждого СтрокаУточнения Из УточнениеКоэффициентовУпаковок Цикл
		
		НоваяСтрока = ДанныеДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУточнения);
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("GTIN",        СтрокаУточнения.GTIN);
		СтруктураПоиска.Вставить("ВидУпаковки", СтрокаУточнения.ВидУпаковки);
		
		НоваяСтрока.ИсходныеДанные = СтрокаУточнения;
		НоваяСтрока.СтрокиДерева   = ДеревоУпаковок.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		
	КонецЦикла;
	
	ДопустимыПроверкиСеройЗоныМОТП = ПараметрыСканирования.Свойство(
		"ДопустимыПроверкиСеройЗоныМОТП") И ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП;
	
	Если ДопустимыПроверкиСеройЗоныМОТП
		И Не ПараметрыСканирования.ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП Тогда
		
		МассивСтрокДляПроверкиСеройЗоны = Новый Массив;
		
		Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
			
			Если СтрокаДанных.ВидПродукции <> Перечисления.ВидыПродукцииИС.Табак Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаДерева Из СтрокаДанных.СтрокиДерева Цикл
				МассивСтрокДляПроверкиСеройЗоны.Добавить(СтрокаДерева);
			КонецЦикла;
			
		КонецЦикла;
		
		Если МассивСтрокДляПроверкиСеройЗоны.Количество() Тогда
			
			РезультатПроверки = ИнтерфейсМОТП.ПроверитьСеруюЗонуКодовМаркировки(МассивСтрокДляПроверкиСеройЗоны);
			Если РезультатПроверки.СостояниеСеройЗоны <> Неопределено Тогда
				
				Для Каждого СтрокаДерева Из МассивСтрокДляПроверкиСеройЗоны Цикл
					
					СостояниеСеройЗоны = РезультатПроверки.СостояниеСеройЗоны[СтрокаДерева];
					
					Если СостояниеСеройЗоны = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если СостояниеСеройЗоны.СодержитСерыеКоды Тогда
						СодержитСерыеКоды.Вставить(СтрокаДерева, СостояниеСеройЗоны);
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
		
		ТаблицаРасчетаКоличестваПотребительскихУпаковок = Новый ТаблицаЗначений;
		ТаблицаРасчетаКоличестваПотребительскихУпаковок.Колонки.Добавить("Количество",         ОбщегоНазначения.ОписаниеТипаЧисло(10));
		ТаблицаРасчетаКоличестваПотребительскихУпаковок.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
		Для Каждого СтрокаДерева Из СтрокаДанных.СтрокиДерева Цикл
			
			Если ДопустимыПроверкиСеройЗоныМОТП
				И (СтрокаДерева.СодержитСерыеКоды
					Или СодержитСерыеКоды.Получить(СтрокаДерева) <> Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				
				Если СтрокаДерева.Строки.Количество() = 0 Тогда
					НоваяСтрока = ТаблицаРасчетаКоличестваПотребительскихУпаковок.Добавить();
					НоваяСтрока.Количество         = 0;
					НоваяСтрока.КоличествоУпаковок = 1;
				Иначе
					GTIN = NULL;
					Для Каждого СтрокаДерева Из СтрокаДерева.Строки Цикл
						Если GTIN = NULL Тогда
							GTIN = СтрокаДерева.GTIN;
						ИначеЕсли СтрокаДерева.GTIN <> GTIN Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если GTIN = Неопределено Тогда
						НоваяСтрока = ТаблицаРасчетаКоличестваПотребительскихУпаковок.Добавить();
						НоваяСтрока.Количество         = 0;
						НоваяСтрока.КоличествоУпаковок = 1;
					Иначе
						НоваяСтрока = ТаблицаРасчетаКоличестваПотребительскихУпаковок.Добавить();
						НоваяСтрока.Количество         = СтрокаДерева.Строки.Количество();
						НоваяСтрока.КоличествоУпаковок = 1;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = ТаблицаРасчетаКоличестваПотребительскихУпаковок.Добавить();
				НоваяСтрока.Количество         = СтрокаДерева.КоличествоПотребительскихУпаковок;
				НоваяСтрока.КоличествоУпаковок = 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаРасчетаКоличестваПотребительскихУпаковок.Свернуть("Количество", "КоличествоУпаковок");
		ВсегоУпаковок = ТаблицаРасчетаКоличестваПотребительскихУпаковок.Итог("КоличествоУпаковок");
		
		Для Каждого СтрокаТаблицы Из ТаблицаРасчетаКоличестваПотребительскихУпаковок Цикл
			Если (СтрокаТаблицы.КоличествоУпаковок / ВсегоУпаковок * 100) >= (100 - ДоляКоличестваОтклонений) Тогда
				СтрокаДанных.ИсходныеДанные.КоличествоПотребительскихУпаковок = СтрокаТаблицы.Количество;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеТиповКолонкиСтатус() Экспорт
	
	ТипыЗначенийКолонкиСтатус = Новый Массив();
	ТипыЗначенийКолонкиСтатус.Добавить(Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП"));
	ТипыЗначенийКолонкиСтатус.Добавить(Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));
	
	Возврат Новый ОписаниеТипов(ТипыЗначенийКолонкиСтатус);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает текст ошибки о запрещении запрашивать данные по неизвестным кодам в МОТП.
// 
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиЗапрещеноЗапрашиватьДанныеВМОТП() Экспорт
	
	Возврат НСтр("ru = 'Запрещено запрашивать данные по неизвестным штрихкодам в ГИС МТ.'");
	
КонецФункции

// Дополняет данные по штрихкодам спецификой, исключая информацию МОТП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок = Новый Соответствие;
	СтрокиТаблицыДанных = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки,
		СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок,
		ПараметрыСканирования);
	
	ДеревоУпаковок = Неопределено;
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ВложенныеШтрихкоды) Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	КонецЕсли;
	
	ПараметрыДерева = ИнтерфейсМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования, ДанныеПоШтрихкодам);
	
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		
		Если ДеревоУпаковок <> Неопределено Тогда
			ДанныеСтроки = ДеревоУпаковок.Строки.Найти(СтрокаДанных.НормализованныйШтрихкод, "НормализованныйШтрихкод");
		Иначе
			ДанныеСтроки = Неопределено;
		КонецЕсли;
		
		Если ДанныеСтроки = Неопределено Тогда
			Если ПараметрыДерева.УчитыватьМРЦ
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено Тогда
				СтрокаДанных.СоставКодаМаркировки.Свойство("МРЦ", СтрокаДанных.МРЦ);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных.СоставКодаМаркировки, "GTIN") Тогда
			СтрокаДанных.СоставКодаМаркировки.Свойство("GTIN", СтрокаДанных.GTIN);
		КонецЕсли;
		
		Если ШтрихкодированиеИСМПСлужебный.СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаДанных, ПараметрыСканирования) Тогда
			СтрокаДанных.Идентифицирован = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиТаблицыДанных, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ВложенныеШтрихкоды) Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		НормализоватьДанныеДереваУпаковок(
			ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
		Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
			МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
			НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары, ПараметрыСканирования);
			ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение специфичных данных, используемых только для табачной продукции
// 
// Параметры:
//  ШтрихкодыДляПолученияСпецифики - Массив - Коды маркировок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
//   * СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из МОТП.
//   * ЕстьОшибки - Булево - Истина, если при попытке получения данных из МОТП возникла ошибка.
//   * ТекстОшибки - Строка - Описание ошибки.
Функция СпецификаДляДополненияДанныхПоШтрихкодам(СтрокиТаблицыДанныхДляПолученияСпецифики, ПараметрыСканирования)
	
	Результат = Новый Структура;
	Результат.Вставить("СпецификаШтрихкодов",            Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ДанныеПоШтрихкодамМОТП = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
		СтрокиТаблицыДанныхДляПолученияСпецифики,
		ПараметрыСканирования.Организация,
		ШтрихкодированиеИСМПКлиентСервер.РазрешеноЗапрашиватьСтатусыКодовЕАЭС(ПараметрыСканирования));
	
	Если ДанныеПоШтрихкодамМОТП.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МП.
		                                   |По причине: Требуется обновление ключа сессии.'");
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат Результат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоШтрихкодамМОТП.ТекстОшибки) Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить данные из ИС МОТП.
			           |По причине: %1'"), ДанныеПоШтрихкодамМОТП.ТекстОшибки);
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.СпецификаШтрихкодов = ДанныеПоШтрихкодамМОТП.СтатусыКодовМаркировки;
	
	Возврат Результат;
	
КонецФункции

// Удаляет строки дерева упаковок по массиву удаляемых строк. Удаление происходит путем копирования структуры дерева и
// его заполнения, исключая удаляемые строки.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок. Будет заменено.
//  МассивУдаляемыхСтрок - Массив - Строки, дерева упаковок, которые нужно удалить.
//  МаркированныеТовары - ТаблицаЗначений - Таблица связанных с деревом вложенных упаковок. Будет заменена.
//  ДанныеКодовМаркировки - ТаблицаЗначений - Таблица связанных с деревом внешних упаковок. Будет обновлена.
Процедура УдалитьСтрокиДереваУпаковокПоДетализации(ДеревоУпаковок, МассивУдаляемыхСтрок, МаркированныеТовары, ДанныеКодовМаркировки) Экспорт
	
	ДеревоУпаковокПриемник = Новый ДеревоЗначений;
	Для Каждого Колонка Из ДеревоУпаковок.Колонки Цикл
		ДеревоУпаковокПриемник.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;

	СоответствиеСтрокИсточникаПриемника = Новый Соответствие;
	СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
		ДеревоУпаковокПриемник.Строки, ДеревоУпаковок.Строки, МассивУдаляемыхСтрок,
		СоответствиеСтрокИсточникаПриемника, Неопределено);
	
	Если МаркированныеТовары <> Неопределено Тогда
		
		МаркированныеТоварыПриемник = МаркированныеТовары.СкопироватьКолонки();
		Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл

			СсылкаНаСтрокуДерева = СоответствиеСтрокИсточникаПриемника.Получить(СтрокаТЧ.СтрокаДерева);
			Если СсылкаНаСтрокуДерева <> Неопределено Тогда
				НоваяСтрокаПриемник = МаркированныеТоварыПриемник.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, СтрокаТЧ);
				НоваяСтрокаПриемник.СтрокаДерева = СсылкаНаСтрокуДерева;
				НоваяСтрокаПриемник.УпаковкаВерхнегоУровня = Неопределено;
			КонецЕсли;

		КонецЦикла;

		МаркированныеТовары = МаркированныеТоварыПриемник;

	КонецЕсли;
	
	Если ДанныеКодовМаркировки <> Неопределено Тогда

		Для Каждого СтрокаТЧ Из ДанныеКодовМаркировки Цикл
			СсылкаНаСтрокуДерева = СоответствиеСтрокИсточникаПриемника.Получить(СтрокаТЧ.СтрокаДерева);
			СтрокаТЧ.СтрокаДерева = СсылкаНаСтрокуДерева;
		КонецЦикла;

		// Определение вида продукции для удаляемых строк.
		// Вид продукции в дереве рассчитан по иерархии, если строка дерева удаляется,
		// то в некоторых сценариях становится невозможным определить вид продукции в данных штрихкодов.
		ПараметрыОтбора = Новый Структура("НормализованныйШтрихкод");
		Для Каждого СтрокаДерева Из МассивУдаляемыхСтрок Цикл
			ПараметрыОтбора.НормализованныйШтрихкод = СтрокаДерева.НормализованныйШтрихкод;
			НайденныеСтроки = ДанныеКодовМаркировки.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.ВидПродукции) Тогда
					НайденнаяСтрока.ВидПродукции = СтрокаДерева.ВидПродукции;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;
	
	ДеревоУпаковок = ДеревоУпаковокПриемник;
	
КонецПроцедуры

// Производит копирование значений строк дерева источника в строки дерева приемника, исключая строки, входящие в
// массив удаляемых строк.
//
// Параметры:
//  СтрокиПриемника - КоллекцияСтрокДереваЗначений - Строки дерева значений приемника.
//  СтрокиИсточника - КоллекцияСтрокДереваЗначений - Строки дерева значений источника.
//  МассивУдаляемыхСтрок - Массив из СтрокаДереваЗначений - Строки дерева, которые должны быть удалены.
//  СоответствиеСтрокИсточникаПриемника - Соответствие - Строки дерева значений источника.
//  ВерхнийУровень - СтрокаДереваЗначений - Верхняя строка иерархии.
Процедура СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(СтрокиПриемника, СтрокиИсточника, МассивУдаляемыхСтрок,
														СоответствиеСтрокИсточникаПриемника, ВерхнийУровень)
	
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		Если МассивУдаляемыхСтрок.Найти(СтрокаИсточника) = Неопределено Тогда
			СтрокаПриемника = СтрокиПриемника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
			СоответствиеСтрокИсточникаПриемника.Вставить(СтрокаИсточника, СтрокаПриемника);
			
			Если Не ЗначениеЗаполнено(ВерхнийУровень) Тогда
				ВерхнийУровень = СтрокаИсточника;
			КонецЕсли;
			
			СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
				СтрокаПриемника.Строки, СтрокаИсточника.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, ВерхнийУровень);
				
		Иначе
			
			СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
				СтрокиПриемника, СтрокаИсточника.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, ВерхнийУровень);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет строки дерева, которые необходимо удалить с соответствие с детализацией.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//  МассивУдаляемыхСтрок - Массив из СтрокаДереваЗначений- Коллекция строк дерева, которые должны быть удалены из маркированных товаров.
//  МаркированныеТовары   - ТаблицаЗначений - таблица с кодами маркировок из дерева
//  ДанныеКодовМаркировки - ТаблицаЗначений - таблица с кодами маркировок из дерева
Процедура ОпределитьУдаляемыеСтрокиДереваПоДетализации(СтрокиДерева, ПараметрыСканирования, МассивУдаляемыхСтрок, МаркированныеТовары, ДанныеКодовМаркировки) Экспорт
	
	Детализация = ПараметрыСканирования.ДетализацияСтруктурыХранения;
	
	СозданиеНаборов = ПараметрыСканирования.СозданиеНаборов;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			Если ((СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
				И (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки))
				Или (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор И Не СозданиеНаборов) Тогда
				
				Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
					УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(ВложеннаяСтрокаДерева, МаркированныеТовары);
					УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(ВложеннаяСтрокаДерева, ДанныеКодовМаркировки);
				КонецЦикла;
				
				СтрокаДерева.Строки.Очистить();
				Продолжить;
				
			КонецЕсли;
			
			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами Тогда
				
				GTIN = СтрокаДерева.GTIN;
				
				Если ЗначениеЗаполнено(GTIN) Тогда
					
					Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
						УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(ВложеннаяСтрокаДерева, МаркированныеТовары);
						УдалитьСтрокиПоСсылкамНаСтрокиДереваРекурсивно(ВложеннаяСтрокаДерева, ДанныеКодовМаркировки);
					КонецЦикла;
					
					СтрокаДерева.Строки.Очистить();
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			GTINКоробаВерхнегоУровня = "";
			Если СтрокаДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				GTINКоробаВерхнегоУровня = СтрокаДерева.Родитель.GTIN;
			КонецЕсли;
			
			ПропуститьУпаковку =
				// В детализации Пачки - пропускаются все упаковки
				(Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки)
				// В детализации Блоки с пачками - пропускаются все упаковки кроме блоков
				Или (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими
					И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая)
				// В детализации Групповые упаковки - пропускаются все упаковки кроме блоков
				Или (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
					И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая)
				Или (Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
					И Не ПустаяСтрока(GTINКоробаВерхнегоУровня));
			
			Если ПропуститьУпаковку Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
			
			ОпределитьУдаляемыеСтрокиДереваПоДетализации(
				СтрокаДерева.Строки, ПараметрыСканирования, МассивУдаляемыхСтрок,
				МаркированныеТовары, ДанныеКодовМаркировки);
			
		Иначе
			
			ДобавлятьПачку = Ложь;
			Если Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
				
				GTINКоробаВерхнегоУровня = "";
				Если СтрокаДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
					GTINКоробаВерхнегоУровня = СтрокаДерева.Родитель.GTIN;
				КонецЕсли;
				
				Если СтрокиДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					И ПустаяСтрока(GTINКоробаВерхнегоУровня) Тогда
					ДобавлятьПачку = Истина;
				КонецЕсли;
				
			Иначе
				// Детализация: Полная, Пачки, Блоки с пачками
				ДобавлятьПачку = Истина;
			КонецЕсли;
			
			Если Не ДобавлятьПачку Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует правила детализации.
//
// Параметры:
// Возвращаемое значение:
//  Соответствие - Ключ - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС, значение - свойство
//      правила. (См. ШтрихкодированиеМОТП.СвойствоПравилаДетализации).
Функция ПравилаДетализацииДереваУпаковок() Экспорт
	
	ПравилаДетализации = Новый Соответствие;
	
	ДетализацияБлокиСПачками = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими;
	ДетализацияКоробки       = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами;
	ДетализацияКоробкиИБлоки = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
	ДетализацияПолная        = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
	ДетализацияПачки         = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки;
	
	ПравилаДетализации.Вставить(ДетализацияПолная,        СвойствоПравилаДетализации(Истина, Истина, Истина));
	ПравилаДетализации.Вставить(ДетализацияКоробки,       СвойствоПравилаДетализации(Истина, Ложь,   Ложь));
	ПравилаДетализации.Вставить(ДетализацияКоробкиИБлоки, СвойствоПравилаДетализации(Истина, Истина, Ложь));
	ПравилаДетализации.Вставить(ДетализацияБлокиСПачками, СвойствоПравилаДетализации(Ложь,   Истина, Истина));
	ПравилаДетализации.Вставить(ДетализацияПачки,         СвойствоПравилаДетализации(Ложь,   Ложь,   Истина));
	
	Возврат ПравилаДетализации;
	
КонецФункции

// Формирует свойство правила детализации.
//
// Параметры:
//  РазрешеныКоробки - Булево - Истина, в дереве разрешено показывать упаковки.
//  РазрешеныБлоки - Булево - Истина, в дереве разрешено показывать табачные блоки.
//  РазрешеныПачки - Булево - Истина, в дереве разрешено показывать пачки.
// Возвращаемое значение:
//  Структура - Описание:
// * РазрешеныКоробки - Булево - Истина, в дереве разрешено показывать упаковки.
// * РазрешеныБлоки - Булево - Истина, в дереве разрешено показывать табачные блоки.
// * РазрешеныПачки - Булево - Истина, в дереве разрешено показывать пачки.
Функция СвойствоПравилаДетализации(РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки)
	
	Возврат Новый Структура("РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки",
							РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки);
	
КонецФункции

Процедура ОбработатьДеревоПолученноеИзМОТП(ДеревоУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыОбработки) Экспорт
	
	ОтключитьОтборПоВидуПродукции = ПараметрыОбработки.ОтключитьОтборПоВидуПродукции;
	
	ОтборПоВидуПродукции = Неопределено;
	Если ПараметрыСканирования <> Неопределено
		И (ПараметрыСканирования.ОтборПоВидуПродукции И Не ОтключитьОтборПоВидуПродукции)
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		
		ДопустимыйВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
		Если ДопустимыйВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			ШтрихкодированиеИС.ОтобратьСтрокиДереваИСМППоВидуПродукции(
				ДеревоУпаковок,
				ДопустимыйВидПродукции);
		Иначе
			ОтборПоВидуПродукции = ДопустимыйВидПродукции; 
		КонецЕсли;
		
	КонецЕсли;
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	ИнициализироватьМаркированныеТовары = Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева;
	
	Если ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов(
			ДеревоУпаковок, ИнициализироватьМаркированныеТовары, ПараметрыСканирования);
		НормализоватьДанныеДереваУпаковок(
			ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	Иначе
		ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(
			ДеревоУпаковок, ИнициализироватьМаркированныеТовары);
	КонецЕсли;
	
	ДополнительныеКолонки = Новый Структура;
	ПараметрыДерева = ИнтерфейсМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования, ДанныеПоШтрихкодам);
	ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокМОТП(ПараметрыДерева, ДополнительныеКолонки);
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки(ДополнительныеКолонки);
	КонецЕсли;
	ДополнительныеКолонки.Вставить("ВидПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДополнительныеКолонки.Вставить("ВидУпаковки",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ИменаКолонокДляКопированияСвойств = Новый Массив;
	Для Каждого КлючИЗначение Из ДополнительныеКолонки Цикл
		ИменаКолонокДляКопированияСвойств.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ПараметрыДополненияТаблицыДанныеКодовМаркировки = ШтрихкодированиеИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ВложенныеШтрихкоды.ДеревоУпаковок, ИменаКолонокДляКопированияСвойств);
	
	Изменения = Новый Структура(
		"ДобавленныеСтроки, ИзмененныеСтроки, СодержитСерыеКоды",
		Новый Массив, Новый Массив, Ложь);
	ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам, ВложенныеШтрихкоды.ДеревоУпаковок,
		Изменения, ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);
	
	Если ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов
		Или Изменения.ДобавленныеСтроки.Количество() Тогда
		
		ШтрихкодированиеИС.ЗаполнитьСведенияПоШтрихкодамEAN(
			ДанныеПоШтрихкодам, ПараметрыСканирования, Изменения.ДобавленныеСтроки);
		ШтрихкодированиеИС.ЗаполнитьВидыПродукцииДанныхКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, Изменения.ДобавленныеСтроки);
		
		Если Не ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
			И Не ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
			// Если форма проверки и подбора загружается по данным сервиса из
			// документа приемки или поступления товаров - то нужно поискать сопоставленные товары в штрихкодах упаковок
			
			Если ПараметрыОбработки.ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок
				Или ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов
				Или ВложенныеШтрихкоды.ДеревоУпаковок.Колонки.Найти("ТипУпаковки") = Неопределено Тогда
				НормализоватьДанныеДереваУпаковок(
					ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки,
					Истина, ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов);
			КонецЕсли;
			
			ПараметрыСозданияШтрихкодов = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции(
				ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
			ПараметрыСозданияШтрихкодов.ИмяКолонкиКоличествоПотребительскихУпаковок = "КоличествоПотребительскихУпаковок";
			
			СтрокиДереваСНайденнымиШтрихкодамиУпаковок = Новый Массив;
			Справочники.ШтрихкодыУпаковокТоваров.ЗаполнитьШтрихкодыУпаковокИКоличествоПоДеревуМаркируемойПродукции(
				ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСозданияШтрихкодов, СтрокиДереваСНайденнымиШтрихкодамиУпаковок);
			
			ШтрихкодированиеИС.ЗаполнитьДанныеИзвестнойМаркируемойПродукции(
				ДанныеПоШтрихкодам, СтрокиДереваСНайденнымиШтрихкодамиУпаковок, ПараметрыСканирования, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнить только коэффициенты упаковок и количество, если они не заполнены ранее
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(Изменения.ИзмененныеСтроки, ПараметрыСканирования, Ложь);
	
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(
		Изменения.ИзмененныеСтроки, ПараметрыСканирования);
	
	Если Изменения.ДобавленныеСтроки.Количество() Тогда
		
		ТребуетсяСопоставление                 = Ложь;
		МассивНеизвестныхEAN                   = Новый Массив;
		СтрокиДанныхДляЗаполненияПредставления = Новый Массив;
		Для Каждого СтрокаДанных Из Изменения.ДобавленныеСтроки Цикл
			
			Если СтрокаДанных.ТребуетсяСопоставление Тогда
				ТребуетсяСопоставление = Истина;
			КонецЕсли;
			
			Если СтрокаДанных.ТребуетсяСопоставление
				И Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
				МассивНеизвестныхEAN.Добавить(СтрокаДанных.EAN);
				СтрокиДанныхДляЗаполненияПредставления.Добавить(СтрокаДанных);
			КонецЕсли;
			
		КонецЦикла;
		МассивНеизвестныхEAN = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНеизвестныхEAN);
		
		Если ТребуетсяСопоставление И ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
			
			НормализоватьДанныеВложенныхШтрихкодов(
				ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
			
			ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
				ДанныеПоШтрихкодам, ВложенныеШтрихкоды, ПараметрыСканирования, ОтборПоВидуПродукции);
			
			Возврат;
			
		ИначеЕсли ТребуетсяСопоставление Тогда
			
			ШтрихкодированиеИСМПСлужебный.ЗаполнитьДобавленныеСтрокиПоНоменклатуреСопоставленнойПоУПД(
				ДанныеПоШтрихкодам.ДанныеКодовМаркировки, Изменения.ДобавленныеСтроки, ПараметрыСканирования);
			
		КонецЕсли;
		
		Если СтрокиДанныхДляЗаполненияПредставления.Количество() > 0 Тогда
			ЗаполнитьПредставлениеНоменклатурыПоДаннымМОТП(
				ДанныеПоШтрихкодам, СтрокиДанныхДляЗаполненияПредставления, МассивНеизвестныхEAN);
		КонецЕсли;
		
		ТребуетсяПриведение = Ложь;
		ГрупповыеУпаковки = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки;
		КоробаСГрупповымиУпаковками = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
		Для Каждого СтрокаДерева Из ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
			
			Если ПараметрыСканирования.ДетализацияСтруктурыХранения = ГрупповыеУпаковки
				И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ТребуетсяПриведение = Истина;
				Прервать;
			КонецЕсли;
			Если ПараметрыСканирования.ДетализацияСтруктурыХранения = КоробаСГрупповымиУпаковками
				И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И Не ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
				ТребуетсяПриведение = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТребуетсяПриведение Тогда
			ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(
				ВложенныеШтрихкоды, ПараметрыСканирования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии
		Или ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов
		Или (ПараметрыОбработки.ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок
			И Изменения.ДобавленныеСтроки.Количество()
			Или Изменения.СодержитСерыеКоды) Тогда
		
		ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
			ДанныеПоШтрихкодам, ВложенныеШтрихкоды, ПараметрыСканирования, ОтборПоВидуПродукции,
			"Номенклатура,Характеристика,Серия,ПроизвольнаяЕдиницаУчета,ТребуетВзвешивания");
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		НормализоватьДанныеДереваУпаковок(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки, Истина, Истина);
	КонецЕсли;
	
	Если ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов
		Или (ПараметрыОбработки.ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок
			И Изменения.ДобавленныеСтроки.Количество()) Тогда
		
		СоздатьЭлементыШтрихкодовУпаковокПоДереву(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
		
		Для Каждого ДанныеКодаМаркировки Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			Если ДанныеКодаМаркировки.СтрокаДерева <> Неопределено Тогда
				ДанныеКодаМаркировки.ШтрихкодУпаковки = ДанныеКодаМаркировки.СтрокаДерева.ШтрихкодУпаковки;
			КонецЕсли;
		КонецЦикла;
		
		// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
		Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
			НормализоватьДанныеТаблицыМаркированныеТовары(
				ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары, ПараметрыСканирования);
		КонецЕсли;
		
		ВидыПродукцииНоменклатуры = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.ВыгрузитьКолонку("ВидПродукции");
		ДанныеПоШтрихкодам.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение представления номенклатуры по данным, полученным из сервиса МОТП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  СтрокиДанныхДляСопоставления - ТаблицаЗначений, Массив из СтрокаТаблицыЗначений - Описание
//  СписокEAN - Массив из Строка - Список штрихкодов формата EAN.
Процедура ЗаполнитьПредставлениеНоменклатурыПоДаннымМОТП(ДанныеПоШтрихкодам, СтрокиДанныхДляСопоставления, СписокEAN)
	
	РезультатЗапроса = ИнтерфейсИСМП.ДанныеПродукцииПоШтрихкодуEAN(СписокEAN);
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии;
		ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатЗапроса.ТекстОшибки;
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
		
		Для Каждого СтрокаДанных Из СтрокиДанныхДляСопоставления Цикл
			СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаДанных Из СтрокиДанныхДляСопоставления Цикл
			
			СведенияПоEAN = РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN.Получить(СтрокаДанных.EAN);
			Если СведенияПоEAN = Неопределено Тогда
				СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
			Иначе
				СтрокаДанных.ПредставлениеНоменклатуры = СведенияПоEAN.Наименование;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево упаковок на основании данных полученных из МОТП.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СоздатьЭлементыШтрихкодовУпаковокПоДереву(ДеревоУпаковок, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И СтрокаДерева.Строки.Количество() = 0
			И СтрокаДерева.Количество = 0 Тогда // Проверка на пустую упаковку.
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(
			ДеревоУпаковок, ПараметрыСканирования);
		ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет во всех строках дерева упаковку верхнего уровня.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - верхний уровень дерева.
Процедура ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьУпаковкуВерхнегоУровняДерева(СтрокаДерева, УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление для перечисления СтатусыКодовМаркировкиМОТП.
//
// Параметры:
// Возвращаемое значение:
//  Соответствие - Ключ - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, значение - представление статуса.
Функция ПредставленияСтатусов()
	
	ПредставленияСтатусов = Новый Соответствие();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыКодовМаркировкиМОТП.Ссылка                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировкиМОТП.Ссылка) КАК ПредставлениеСтатуса
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиМОТП КАК СтатусыКодовМаркировкиМОТП");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставленияСтатусов.Вставить(Выборка.Статус, Выборка.ПредставлениеСтатуса);
	КонецЦикла;
	
	Возврат ПредставленияСтатусов;
	
КонецФункции

#Область ПроверкаНаОшибки

// Выполняет проверку на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив - Массив из Структура:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	ПредставленияСтатусов = Неопределено;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		
		ПроверитьНаОшибкиСтрокиДерева(
			ДеревоУпаковок.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
		
		// Приоритет 1.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки")
			И ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Количество() > 0 Тогда
			
			Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки Цикл
				
				Если ЭлементДанных.СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементДанных.СтрокаДерева.ТекстОшибки = ЭлементДанных.ТекстОшибки;
				ЭлементДанных.СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Очистить();
			
		КонецЕсли;
		
		// Приоритет 2.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
			
			Если ПредставленияСтатусов = Неопределено Тогда
				ПредставленияСтатусов = ПредставленияСтатусов();
			КонецЕсли;
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДерева.Статус);
				Если ПредставлениеСтатуса = Неопределено Тогда
					ПредставлениеСтатуса = НСтр("ru='<Неопределен>'");
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставлениеСтатуса);
				СтрокаДерева.ЕстьОшибки  = Истина;
				
				ВидДополнения = ШтрихкодированиеИСМПСлужебный.ВидДополненияПредставленияОшибки();
				ВидДополнения.Статус          = СтрокаДерева.Статус;
				ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
				ШтрихкодированиеИСМПСлужебный.ДополнитьПредставлениеОшибки(СтрокаДерева, ВидДополнения);
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Очистить();
			
		КонецЕсли;
		
		// Приоритет 3.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхУпаковок")
			И ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДерева.Коэффициент = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Пустая упаковка'");
				СтрокаДерева.ЕстьОшибки = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Очистить();
			
		КонецЕсли;
		
		// Приоритет 4.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДерева.ИННВладельца) Тогда
					ИННВладельцаПредставление = НСтр("ru = 'Отсутствует'");
				Иначе
					ИННВладельцаПредставление = СтрокаДерева.ИННВладельца;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.Владелец) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Владелец: %1 (%2)'"),
						СтрокаДерева.Владелец,
						ИННВладельцаПредставление);
				ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ИННВладельца) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'ИНН владельца: %1'"),
						ИННВладельцаПредставление);
				Иначе
					ТекстОшибки = НСтр("ru = 'Владелец неопределен'");
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				
				ВидДополнения = ШтрихкодированиеИСМПСлужебный.ВидДополненияПредставленияОшибки();
				ВидДополнения.Владелец        = Истина;
				ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
				ШтрихкодированиеИСМПСлужебный.ДополнитьПредставлениеОшибки(СтрокаДерева, ВидДополнения);
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольВладельца.Очистить();
			
		КонецЕсли;
		
		// Приоритет 5.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП") Тогда
			
			ЕстьРасхождения = Ложь;
			ШтрихкодированиеИС.ВыявитьРасхожденияВСоставахДеревьев(
				ДеревоУпаковок, ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса,
				ЕстьРасхождения, ПараметрыСканирования);
			
			Если ЕстьРасхождения Тогда
				// Правило является исключением, проверка выполняется после завершения всех остальных проверок.
				// Установка флага обязательна.
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ШтрихкодированиеИСМПСлужебный.ОписаниеОшибокКонтроляЧастичногоВыбытия(ПравилаПроверкиНаОшибки, ПараметрыСканирования);
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставЛогистическихУпаковок")
			И ПравилаПроверкиНаОшибки.КонтролироватьСоставЛогистическихУпаковок.Количество() Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтролироватьСоставЛогистическихУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Логистическая упаковка может содержать только один вид упаковок (логистические, групповые или потребительские)'");
				
				Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
					
					Если ВложеннаяСтрокаДерева.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					ВложеннаяСтрокаДерева.ЕстьОшибки  = Истина;
					ВложеннаяСтрокаДерева.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Вид упаковки %1 отличается от вложенных упаковок'"),
						ВложеннаяСтрокаДерева.ВидУпаковки);
					
				КонецЦикла;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтролироватьСоставЛогистическихУпаковок.Очистить();
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставГрупповыхУпаковок")
			И ПравилаПроверкиНаОшибки.КонтролироватьСоставГрупповыхУпаковок.Количество() Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтролироватьСоставГрупповыхУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Групповая упаковка не может содержать разные наименования продукции'");
				
				Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
					
					Если ВложеннаяСтрокаДерева.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					ВложеннаяСтрокаДерева.ЕстьОшибки  = Истина;
					ВложеннаяСтрокаДерева.ТекстОшибки = НСтр("ru = 'Номенклатура отличается от номенклатуры вложенных упаковок'");
					
				КонецЦикла;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтролироватьСоставГрупповыхУпаковок.Очистить();
				
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок")
			И ПравилаПроверкиНаОшибки.КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок.Количество() Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Групповая упаковка не может содержать разные шаблоны кодов маркировки.'");
				
				Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
					
					Если ВложеннаяСтрокаДерева.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					ВложеннаяСтрокаДерева.ЕстьОшибки  = Истина;
					ВложеннаяСтрокаДерева.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Тип штрихкода %1 отличается от типа штрихкода вложенных упаковок'"),
						ВложеннаяСтрокаДерева.ТипШтрихкода);
					
				КонецЦикла;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки,
		ПараметрыСканирования, ЕстьОшибки);
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки")
		И ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Количество() > 0 Тогда
		
		Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки Цикл
			
			Если ЗначениеЗаполнено(ЭлементДанных.СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДанных.СтрокаДанных.ТекстОшибки = ЭлементДанных.ТекстОшибки;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
		И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
		
		Если ПредставленияСтатусов = Неопределено Тогда
			ПредставленияСтатусов = ПредставленияСтатусов();
		КонецЕсли;
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДанных.Статус);
			Если ПредставлениеСтатуса = Неопределено Тогда
				ПредставлениеСтатуса = НСтр("ru='<Неопределен>'");
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставлениеСтатуса);
			
			ВидДополнения = ШтрихкодированиеИСМПСлужебный.ВидДополненияПредставленияОшибки();
			ВидДополнения.Статус          = СтрокаДанных.Статус;
			ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
			ШтрихкодированиеИСМПСлужебный.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда
		
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл
			
			Если ЗначениеЗаполнено(СтрокаДерева.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Способ ввода в оборот: %1'"),
				СтрокаДерева.СпособВводаВОборот);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Количество() > 0 Тогда
		
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн Цикл
			
			Если ЗначениеЗаполнено(СтрокаДерева.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.ТекстОшибки = НСтр("ru = 'Способ ввода в оборот: маркировка остатков'");
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
		И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				ИННВладельцаПредставление = НСтр("ru = 'Отсутствует'");
			Иначе
				ИННВладельцаПредставление = СтрокаДанных.ИННВладельца;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Владелец: %1 (%2)'"),
					СтрокаДанных.Владелец,
					ИННВладельцаПредставление);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'ИНН владельца: %1'"),
					ИННВладельцаПредставление);
			Иначе
				ТекстОшибки = НСтр("ru = 'Владелец неопределен'");
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			
			ВидДополнения = ШтрихкодированиеИСМПСлужебный.ВидДополненияПредставленияОшибки();
			ВидДополнения.Владелец        = Истина;
			ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
			ШтрихкодированиеИСМПСлужебный.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольВладельца.Очистить();
		
	КонецЕсли;
	
	ШтрихкодированиеИСМПСлужебный.ОписаниеОшибокКонтроляЧастичногоВыбытия(ПравилаПроверкиНаОшибки, ПараметрыСканирования, Истина);
	
	ШтрихкодированиеИС.ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(
		ПравилаПроверкиНаОшибки, ПараметрыСканирования);
	
КонецПроцедуры

// Выполняет проверку на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив - Массив структур:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Коллекция строк, где были выявлены
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		ВладелецМожетБытьПустым = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
	КонецЕсли;
	
	КэшМаркируемойПродукции           = Неопределено;
	ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции)
			И Не СтрокаДанных.ПрисутствуетТабачнаяПродукция Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.СтрокаДерева = Неопределено И Не СтрокаДанных.Входящий Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий") Тогда
			Если ШтрихкодированиеИСМПСлужебный.ТребуетсяВыборСерии(СтрокаДанных, ПараметрыСканирования) Тогда
				ПравилаПроверкиНаОшибки.КонтрольСерий.Добавить(СтрокаДанных);
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Получить(СтрокаДанных.Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			КонтролироватьВладельцевКодовМаркировки = ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП;
		Иначе
			КонтролироватьВладельцевКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
				СтрокаДанных.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И КонтролироватьВладельцевКодовМаркировки Тогда
			
			СведенияОбОрганизации = Неопределено;
			Если ДанныеПоШтрихкодам.СведенияОбОрганизациях = Неопределено Тогда
				ДанныеПоШтрихкодам.СведенияОбОрганизациях = Новый Соответствие;
			Иначе
				СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[ПараметрыСканирования.Владелец];
			КонецЕсли;
			Если СведенияОбОрганизации = Неопределено Тогда
				СведенияОбОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыСканирования.Владелец);
				ДанныеПоШтрихкодам.СведенияОбОрганизациях.Вставить(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
			КонецЕсли;
			
			ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
			
			Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
				И ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
				ВыполнятьКонтрольСУчетомСеройЗоны = Не СтрокаДанных.ВСеройЗоне;
			Иначе
				ВыполнятьКонтрольСУчетомСеройЗоны = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДатаПроизводства)
				И ВыполнятьКонтрольСУчетомСеройЗоны Тогда
				ДатаПроизводстваДопускаетКонтроль = СтрокаДанных.ДатаПроизводства >= ПараметрыСканирования.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
			Иначе
				ДатаПроизводстваДопускаетКонтроль = Истина;
			КонецЕсли;
			
			Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
			ИначеЕсли СтрокаДанных.ИННВладельца <> ОжидаемыйИННВладельца
				И ДатаПроизводстваДопускаетКонтроль
				И СтрокаДанных.Статус <> Неопределено
				И СтрокаДанных.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			КонтролироватьСтатусыКодовМаркировки = ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП;
		Иначе
			КонтролироватьСтатусыКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
				СтрокаДанных.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И КонтролироватьСтатусыКодовМаркировки
			И ЗначениеЗаполнено(СтрокаДанных.Статус) Тогда
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП;
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП <> Неопределено Тогда
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП;
			Иначе
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыМОТП;
			КонецЕсли;
			
			Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
				И ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
				ВыполнятьКонтрольСУчетомСеройЗоны = Не СтрокаДанных.ВСеройЗоне;
			Иначе
				ВыполнятьКонтрольСУчетомСеройЗоны = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДатаПроизводства)
				И ВыполнятьКонтрольСУчетомСеройЗоны Тогда
				ДатаПроизводстваДопускаетКонтроль = СтрокаДанных.ДатаПроизводства >= ПараметрыСканирования.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
			Иначе
				ДатаПроизводстваДопускаетКонтроль = Истина;
			КонецЕсли;
			
			Если ДопустимыеСтатусыМОТП.Найти(СтрокаДанных.Статус) = Неопределено
				И ДатаПроизводстваДопускаетКонтроль
				И Не ШтрихкодированиеИСМПСлужебный.ЭтоПродажаВыбывшегоЧастично(
					СтрокаДанных,
					ПараметрыСканирования,
					ДопустимыеСтатусыМОТП) Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ШтрихкодированиеИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
			И ШтрихкодированиеИСМПСлужебный.СтрокаСодержитОшибкиЧастичногоВыбытия(
				СтрокаДанных,
				ПараметрыСканирования,
				ПравилаПроверкиНаОшибки,
				КэшМаркируемойПродукции) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) // Агрегация, новые упаковки.
				И СтрокаДанных.СпособВводаВОборот <> ПараметрыСканирования.ДопустимыйСпособВводаВОборот Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн") Тогда
		
			Если СтрокаДанных.ЭтоКодВводаОстатков
				И ПараметрыСканирования.ДопустимыйСпособВводаВОборот <> Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки") Тогда
			
			ВыполнятьКонтроль = (ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов
				И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
					Или Не ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов;
			
			ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
			Если ВыполнятьКонтроль
				И (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
						ДанныеРазбора.ВидУпаковки, ДанныеРазбора)) Тогда
				
				СоставКодаМаркировки   = ДанныеРазбора.СоставКодаМаркировки;
				КодВключаетКриптоХвост = Ложь;
				
				Если СоставКодаМаркировки <> Неопределено Тогда
					Если СоставКодаМаркировки.Свойство("ВключаетКриптоХвост") Тогда
						КодВключаетКриптоХвост = СоставКодаМаркировки.ВключаетКриптоХвост;
					КонецЕсли;
				КонецЕсли;
				
				Если Не КодВключаетКриптоХвост
					И Не СтрокаДанных.ЕстьВПулеКодовМаркировки Тогда
					
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
						Новый Структура(
							"СтрокаДанных, ТекстОшибки",
							СтрокаДанных,
							НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
							|Отсканируйте полный код маркировки.'")));
					
				ИначеЕсли Не КодВключаетКриптоХвост
					И ПроверятьСтруктуруКодовМаркировки Тогда
					
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
						Новый Структура(
							"СтрокаДанных, ТекстОшибки",
							СтрокаДанных,
							НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
							|Отсканируйте полный код маркировки или в настройках сканирования отключите опцию ""Проверять структуру кодов маркировки"".'")));
					
				ИначеЕсли ПроверятьСтруктуруКодовМаркировки
					И КодВключаетКриптоХвост
					И ДанныеРазбора.Детализация.ВключаетИдентификаторыПрименения
					И Не ДанныеРазбора.Детализация.СодержитРазделительGS Тогда
					
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
						Новый Структура(
							"СтрокаДанных, ТекстОшибки",
							СтрокаДанных, НСтр("ru = 'В структуре кода маркировки отстутствуют разделители GS'")));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку строк дерева на ошибки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПравилаПроверкиНаОшибки - Структура - правила, по которым выполняется проверка:
//   * КонтрольВладельца - Массив - Коллекция строк дерева, в которых ИНН владельца не соответствует ожидаемому,
//   * КонтрольПустыхУпаковок - Массив - Коллекция пустых упаковок дерева,
//   * КонтрольСерий - Массив - для дерева заполнение серий не контролируется.
//   * КонтрольСтатусов - Массив - Коллекция строк дерева, в которых статус не соответствует ожидаемому.
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования.
//  ЕстьОшибки - Булево - Истина, если при проверке выявлены ошибки.
Процедура ПроверитьНаОшибкиСтрокиДерева(СтрокиДерева, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
		И ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
			
			СведенияОбОрганизации = Неопределено;
			Если ДанныеПоШтрихкодам.СведенияОбОрганизациях = Неопределено Тогда
				ДанныеПоШтрихкодам.СведенияОбОрганизациях = Новый Соответствие;
			Иначе
				СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[ПараметрыСканирования.Владелец];
			КонецЕсли;
			Если СведенияОбОрганизации = Неопределено Тогда
				СведенияОбОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыСканирования.Владелец);
				ДанныеПоШтрихкодам.СведенияОбОрганизациях.Вставить(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
			КонецЕсли;
			
			ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
			
		Иначе
			
			ОжидаемыйИННВладельца = "";
			
		КонецЕсли;
		
		ВладелецМожетБытьПустым = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
		
	КонецЕсли;
	
	КэшМаркируемойПродукции           = Неопределено;
	ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	
	ЭтоФормаДокументаМаркировкаТоваров = Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
		И ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) = Тип("ДокументСсылка.МаркировкаТоваровИСМП");
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных = Неопределено;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхУпаковок") Тогда
			
			Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
				И СтрокаДерева.Строки.Количество() = 0
				И СтрокаДерева.КоличествоПотребительскихУпаковок = 0 Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			КонтролироватьСтатусыКодовМаркировки = ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП;
		Иначе
			КонтролироватьСтатусыКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
				СтрокаДерева.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И КонтролироватьСтатусыКодовМаркировки Тогда
			
			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП;
			ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП <> Неопределено Тогда
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП;
			Иначе
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыМОТП;
			КонецЕсли;
			
			Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
				И ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
				ВыполнятьКонтрольСУчетомСеройЗоны = Не СтрокаДерева.ВСеройЗоне;
			Иначе
				ВыполнятьКонтрольСУчетомСеройЗоны = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДерева.ДатаПроизводства)
				И ВыполнятьКонтрольСУчетомСеройЗоны Тогда
				ДатаПроизводстваДопускаетКонтроль = СтрокаДерева.ДатаПроизводства >= ПараметрыСканирования.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
			Иначе
				ДатаПроизводстваДопускаетКонтроль = Истина;
			КонецЕсли;
			
			ОтсутствуетДопустимыйСтатус = (ДопустимыеСтатусыМОТП.Найти(СтрокаДерева.Статус) = Неопределено);
			
			// В форме документа Маркировка товаров можно обрабатывать коды логистических упаковок только
			// если агрегация была выполнена ранее (созданы элементы справочника штрихкодов упаковок),
			// например с помощью виртуальной агрегации.
			Если ОтсутствуетДопустимыйСтатус
				И ЭтоФормаДокументаМаркировкаТоваров
				И СтрокаДерева.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
				И СтрокаДерева.Строки.Количество() > 0 Тогда
				ОтсутствуетДопустимыйСтатус = Ложь;
			КонецЕсли;
			
			Если ОтсутствуетДопустимыйСтатус
				И ДатаПроизводстваДопускаетКонтроль
				И Не ШтрихкодированиеИСМПСлужебный.ЭтоПродажаВыбывшегоЧастично(
					СтрокаДерева,
					ПараметрыСканирования,
					ДопустимыеСтатусыМОТП) Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ШтрихкодированиеИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
			И ШтрихкодированиеИСМПСлужебный.СтрокаСодержитОшибкиЧастичногоВыбытия(
				СтрокаДерева,
				ПараметрыСканирования,
				ПравилаПроверкиНаОшибки,
				КэшМаркируемойПродукции) Тогда
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			КонтролироватьВладельцевКодовМаркировки = ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП;
		Иначе
			КонтролироватьВладельцевКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
				СтрокаДерева.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И КонтролироватьВладельцевКодовМаркировки Тогда
			
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
				И СтрокаДерева.Статус <> Неопределено
				И СтрокаДерева.ИННВладельца <> ОжидаемыйИННВладельца Тогда
				
				Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
					И ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
					ВыполнятьКонтрольСУчетомСеройЗоны = Не СтрокаДерева.ВСеройЗоне;
				Иначе
					ВыполнятьКонтрольСУчетомСеройЗоны = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.ДатаПроизводства)
					И ВыполнятьКонтрольСУчетомСеройЗоны Тогда
					ДатаПроизводстваДопускаетКонтроль = СтрокаДерева.ДатаПроизводства >= ПараметрыСканирования.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
				Иначе
					ДатаПроизводстваДопускаетКонтроль = Истина;
				КонецЕсли;
				
				Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДерева.ИННВладельца) Тогда
				ИначеЕсли ДатаПроизводстваДопускаетКонтроль Тогда
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДерева);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда

			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И СтрокаДерева.СпособВводаВОборот <> ПараметрыСканирования.ДопустимыйСпособВводаВОборот Тогда

				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(СтрокаДерева);

			КонецЕсли;

		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн") Тогда

			Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДерева.Штрихкод, Истина)
				И ПараметрыСканирования.ДопустимыйСпособВводаВОборот <> Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда

				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Добавить(СтрокаДерева);

			КонецЕсли;

		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки") Тогда
			
			Если СтрокаДанных = Неопределено Тогда
				СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(
					СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено Тогда
				
				ВыполнятьКонтроль = (ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов
					И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
					Или Не ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов;
				
				ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
				Если ВыполнятьКонтроль
					И (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
						Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
							СтрокаДанных.ВидУпаковки, ДанныеРазбора)) Тогда
					
					СоставКодаМаркировки   = ДанныеРазбора.СоставКодаМаркировки;
					КодВключаетКриптоХвост = Ложь;
					
					Если СоставКодаМаркировки <> Неопределено Тогда
						Если СоставКодаМаркировки.Свойство("ВключаетКриптоХвост") Тогда
							КодВключаетКриптоХвост = СоставКодаМаркировки.ВключаетКриптоХвост;
						КонецЕсли;
					КонецЕсли;
					
					Если Не КодВключаетКриптоХвост
						И Не СтрокаДерева.ЕстьВПулеКодовМаркировки Тогда
						
						ЕстьОшибки = Истина;
						ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
							Новый Структура(
								"СтрокаДерева, ТекстОшибки",
								СтрокаДерева,
								НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
								|Отсканируйте полный код маркировки.'")));
						
					ИначеЕсли Не КодВключаетКриптоХвост
						И ПроверятьСтруктуруКодовМаркировки Тогда
						
						ЕстьОшибки = Истина;
						ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
							Новый Структура(
								"СтрокаДерева, ТекстОшибки",
								СтрокаДерева,
								НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
								|Отсканируйте полный код маркировки или в настройках сканирования отключите опцию ""Проверять структуру кодов маркировки"".'")));
						
					ИначеЕсли ПроверятьСтруктуруКодовМаркировки
						И КодВключаетКриптоХвост
						И ДанныеРазбора.Детализация.ВключаетИдентификаторыПрименения
						И Не ДанныеРазбора.Детализация.СодержитРазделительGS Тогда
						
						ЕстьОшибки = Истина;
						ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
							Новый Структура(
								"СтрокаДерева, ТекстОшибки",
								СтрокаДерева, НСтр("ru = 'В структуре кода маркировки отстутствуют разделители GS'")));
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставГрупповыхУпаковок") Тогда
			
			Если СтрокаДанных = Неопределено Тогда
				СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(
					СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено
				И ШтрихкодированиеИСМПСлужебный.ПроверитьНаОшибкиГрупповуюУпаковку(СтрокаДанных, СтрокаДерева, ПравилаПроверкиНаОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставЛогистическихУпаковок") Тогда
			
			Если СтрокаДанных = Неопределено Тогда
				СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(
					СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено
				И ШтрихкодированиеИСМПСлужебный.ПроверитьНаОшибкиЛогистическуюУпаковку(СтрокаДанных, СтрокаДерева, ПравилаПроверкиНаОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Вставить(СтрокаДерева.Штрихкод, Истина);
		ПроверитьНаОшибкиСтрокиДерева(СтрокаДерева.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнениеДанныхШтрихкодовСпецификой

// Дополняет свойства таблицы значений - "МаркированныеТовары" или дерево значение - "ДеревоУпаковок" колонками,
// специфичными для табачной продукции.
//
// Возвращаемое значение:
//  Массив Из Строка - Добавленные колонки
//
// Параметры:
//  Коллекция - ТаблицаЗначений, ДеревоЗначений - "МаркированныеТовары" или "ДеревоУпаковок"
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
Функция НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(Коллекция, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиДереваУпаковок();
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда 
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары();
	КонецЕсли;
	
	ПараметрыДерева = ИнтерфейсМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования);
	
	ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокМОТП(ПараметрыДерева, КоллекцияОбязательныхКолонок);
	Если ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		Если КоллекцияОбязательныхКолонок.Свойство("МРЦ") Тогда
			КоллекцияОбязательныхКолонок.Удалить("МРЦ");
		КонецЕсли;
		Если КоллекцияОбязательныхКолонок.Свойство("КоличествоГрупповыхУпаковок") Тогда
			КоллекцияОбязательныхКолонок.Удалить("КоличествоГрупповыхУпаковок");
		КонецЕсли;
	КонецЕсли;
	
	КоллекцияОбязательныхКолонок.Вставить("Владелец",                  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("GTIN",                      Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("EAN",                       Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеСтатуса",      Новый ОписаниеТипов("Строка"));
	
	КоллекцияОбязательныхКолонок.Вставить("НоменклатураСопоставленаПоУПД", Новый ОписаниеТипов("Булево"));
	
	КоллекцияОбязательныхКолонок.Вставить("ЕстьВПулеКодовМаркировки",      Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ПолныйКодМаркировки",           Новый ОписаниеТипов("Строка"));
	
	ДобавленныеКолонки = ШтрихкодированиеМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(Коллекция, КоллекцияОбязательныхКолонок);
	
	Возврат ДобавленныеКолонки;
	
КонецФункции

#Область НормализацияДанныхВложенныхШтрихкодов

// Дополняет входящие в состав "Вложенных штрихкодов" коллекции - "Дерево упаковок" и "Маркированные товары" свойствами
// специфичными для табачной продукции и заполняет на основании данных - "Специфика штрихкодов".
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
Процедура НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки);
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
		НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет таблицу значений "Маркированные товары" свойствами специфичными для табачной продукции и заполняет
// на основании данных - "Дерева упаковок".
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары, ПараметрыСканирования)
	
	МаркированныеТовары.Очистить();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары, ПараметрыСканирования);
	ШтрихкодированиеИС.ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, МаркированныеТовары);
	
КонецПроцедуры

#Область НормализацияДанныхДереваУпаковок

Функция КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки(КоллекцияДополнительныхКолонок = Неопределено) Экспорт
	
	Если КоллекцияДополнительныхКолонок = Неопределено Тогда
		КоллекцияДополнительныхКолонок = Новый Структура;
	КонецЕсли;
	
	КоллекцияДополнительныхКолонок.Вставить("ДатаЭмиссии",               Новый ОписаниеТипов("Дата"));
	КоллекцияДополнительныхКолонок.Вставить("ДатаВводаВОборот",          Новый ОписаниеТипов("Дата"));
	КоллекцияДополнительныхКолонок.Вставить("ДатаСписания",              Новый ОписаниеТипов("Дата"));
	КоллекцияДополнительныхКолонок.Вставить("ИННПроизводителя",          Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("НаименованиеПроизводителя", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ИННАгента",                 Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("НаименованиеАгента",        Новый ОписаниеТипов("Строка"));
	
	Возврат КоллекцияДополнительныхКолонок;
	
КонецФункции

Функция КоллекцияДополнительныхКолонокДереваУпаковокИСМП(ПараметрыДерева, КоллекцияДополнительныхКолонок = Неопределено, ДляВложенныхСтрокДерева = Ложь) Экспорт
	
	Если КоллекцияДополнительныхКолонок = Неопределено Тогда
		КоллекцияДополнительныхКолонок = Новый Структура;
	КонецЕсли;
	
	КоллекцияДополнительныхКолонок.Вставить("ИННВладельца",         Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ИННАгента",            Новый ОписаниеТипов("Строка"));
	
	КоллекцияДополнительныхКолонок.Вставить("СпособВводаВОборот",   Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	КоллекцияДополнительныхКолонок.Вставить("РодительскаяУпаковка", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ДатаПроизводства",     Новый ОписаниеТипов("Дата"));
	
	Если Не ДляВложенныхСтрокДерева Тогда
		КоллекцияДополнительныхКолонок.Вставить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
		КоллекцияДополнительныхКолонок.Вставить("КоличествоГрупповыхУпаковок",       Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если Не ДляВложенныхСтрокДерева И ПараметрыДерева.ЗаполнятьСрокГодности Тогда
		КоллекцияДополнительныхКолонок.Вставить("ГоденДо", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	КоллекцияДополнительныхКолонок.Вставить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("Статус",                    ОписаниеТиповКолонкиСтатус());
	КоллекцияДополнительныхКолонок.Вставить("ОсобоеСостояние",           ОписаниеТиповКолонкиСтатус());
	
	// В изделиях из натурального меха номер КИЗ не содержит GTIN
	КоллекцияДополнительныхКолонок.Вставить("GTIN", Новый ОписаниеТипов("Строка"));
	
	Если ПараметрыДерева.ТребуетсяЧастичноеВыбытие Тогда
		
		ТипыЧислоИБулево = Новый Массив();
		ТипыЧислоИБулево.Добавить("Булево");
		ТипыЧислоИБулево.Добавить("Число");
		
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытие",                    Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВариантУчета",        Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИСМП"));
		КоллекцияДополнительныхКолонок.Вставить("ЕмкостьПотребительскойУпаковки",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВыведено",            ОбщегоНазначения.ОписаниеТипаЧисло(10));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеОстаток",             Новый ОписаниеТипов(ТипыЧислоИБулево));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеНеКорректныйОстаток", Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеНоменклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеХарактеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	ИначеЕсли ПараметрыДерева.ЧастичноеВыбытиеПрименимо Тогда
		
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВыведено", ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	КонецЕсли;
	
	Возврат КоллекцияДополнительныхКолонок;
	
КонецФункции

Функция КоллекцияДополнительныхКолонокДереваУпаковокМОТП(ПараметрыДерева, КоллекцияДополнительныхКолонок = Неопределено, ДляВложенныхСтрокДерева = Ложь) Экспорт
	
	Если КоллекцияДополнительныхКолонок = Неопределено Тогда
		КоллекцияДополнительныхКолонок = Новый Структура;
	КонецЕсли;
	
	КоллекцияДополнительныхКолонок.Вставить("ИННВладельца",         Новый ОписаниеТипов("Строка"));
	
	КоллекцияДополнительныхКолонок.Вставить("СпособВводаВОборот",   Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	КоллекцияДополнительныхКолонок.Вставить("РодительскаяУпаковка", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ДатаПроизводства",     Новый ОписаниеТипов("Дата"));
	
	Если Не ДляВложенныхСтрокДерева Тогда
		КоллекцияДополнительныхКолонок.Вставить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
		КоллекцияДополнительныхКолонок.Вставить("КоличествоГрупповыхУпаковок",       Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если ПараметрыДерева.УчитыватьМРЦ И Не ДляВложенныхСтрокДерева Тогда
		КоллекцияДополнительныхКолонок.Вставить("МРЦ", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если ПараметрыДерева.ИспользуетсяСераяЗона И Не ДляВложенныхСтрокДерева Тогда
		КоллекцияДополнительныхКолонок.Вставить("ВСеройЗоне",        Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("СодержитСерыеКоды", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	КоллекцияДополнительныхКолонок.Вставить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("Статус",                    ОписаниеТиповКолонкиСтатус());
	
	Если ПараметрыДерева.ТребуетсяЧастичноеВыбытие Тогда
		
		ТипыЧислоИБулево = Новый Массив();
		ТипыЧислоИБулево.Добавить("Булево");
		ТипыЧислоИБулево.Добавить("Число");
		
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытие",                    Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВариантУчета",        Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИСМП"));
		КоллекцияДополнительныхКолонок.Вставить("ЕмкостьПотребительскойУпаковки",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВыведено",            ОбщегоНазначения.ОписаниеТипаЧисло(10));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеОстаток",             Новый ОписаниеТипов(ТипыЧислоИБулево));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеНеКорректныйОстаток", Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеНоменклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеХарактеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		
	ИначеЕсли ПараметрыДерева.ЧастичноеВыбытиеПрименимо Тогда
		
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВыведено", ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	КонецЕсли;
	
	Возврат КоллекцияДополнительныхКолонок;
	
КонецФункции

Функция НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(Коллекция, КоллекцияДополнительныхКолонок, ДобавленныеКолонки = Неопределено) Экспорт
	
	Если ДобавленныеКолонки = Неопределено Тогда
		ДобавленныеКолонки = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из КоллекцияДополнительныхКолонок Цикл
		
		ИмяКолонки    = КлючЗначение.Ключ;
		ОписаниеТипов = КлючЗначение.Значение;
		
		Если Коллекция.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			Коллекция.Колонки.Добавить(ИмяКолонки, ОписаниеТипов);
			ДобавленныеКолонки.Вставить(ИмяКолонки, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДобавленныеКолонки;
	
КонецФункции

// Дополняет дерево упаковок колонками, специфичными для табачной продукции. Заполняет значения специфичных колонок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ТолькоПересчетНоменклатурыИКоличества - Булево - 
//  ЗаполнятьСтрокиДерева                 - Булево - 
Процедура НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено, ТолькоПересчетНоменклатурыИКоличества = Ложь, ЗаполнятьСтрокиДерева = Ложь) Экспорт
	
	ДобавленныеКолонки = НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок, ПараметрыСканирования);
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		КоллекцияДополнительныхКолонок = КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки();
		НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ДеревоУпаковок, КоллекцияДополнительныхКолонок, ДобавленныеКолонки);
	КонецЕсли;
	
	ПараметрыДерева = ИнтерфейсМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДанныеКодовМаркировки",  ДанныеКодовМаркировки);
	ПараметрыЗаполнения.Вставить("Кэш",                    Новый Структура);
	ПараметрыЗаполнения.Вставить("ПараметрыСканирования",  ПараметрыСканирования);
	ПараметрыЗаполнения.Вставить("ПараметрыДерева",        ПараметрыДерева);
	
	ПараметрыЗаполнения.Кэш.Вставить("КэшНоменклатуры",                 Новый Соответствие);
	ПараметрыЗаполнения.Кэш.Вставить("ЗапросИУстановкаМРЦ",             Новый Массив);
	ПараметрыЗаполнения.Кэш.Вставить("ВычислениеМРЦ",                   Новый Массив);
	ПараметрыЗаполнения.Кэш.Вставить("ЗаполняемыеКолонки",                    Неопределено);

	ПараметрыЗаполнения.Кэш.Вставить("КолонкиДляПересчетаНоменклатурыИКоличества", Новый Соответствие);
	ПараметрыЗаполнения.Кэш.Вставить("ТолькоПересчетНоменклатурыИКоличества", ТолькоПересчетНоменклатурыИКоличества);
	ПараметрыЗаполнения.Кэш.Вставить("ДобавленныеКолонки",                    ДобавленныеКолонки);
	ПараметрыЗаполнения.Кэш.Вставить("ЗаполнятьСтрокиДерева",                 ЗаполнятьСтрокиДерева);
	
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Номенклатура", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Характеристика", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Серия", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Номенклатура", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Количество", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("КоличествоПотребительскихУпаковок", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("КоличествоГрупповыхУпаковок", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("МаркированнаяПродукция", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("ПроизвольнаяЕдиницаУчета", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("ТребуетВзвешивания", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("ТипУпаковки", Истина);
	
	ЗаполнитьСтрокиДереваПриНормализацииРекурсивно(
		ДеревоУпаковок,
		ПараметрыСканирования.ВариантПолученияМРЦ,
		Неопределено,
		ПараметрыЗаполнения);
	
	ЗапросИРасчетМРЦПоСтрокамДерева(
		ПараметрыЗаполнения.Кэш.ЗапросИУстановкаМРЦ,
		ПараметрыЗаполнения.Кэш.ВычислениеМРЦ, 
		ПараметрыСканирования);
	
КонецПроцедуры

// Заполняет строки дерева упаковок данными специфичными для табачной продукции.
//
// Параметры:
// ПараметрыЗаполнения - Структура:
//  *СтрокаВерхнегоУровня   - СтрокаДереваЗначений - Строка дерева упаковок.
//  *ДанныеКодовМаркировки  - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  *ПараметрыСканирования  - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  *УчитыватьМРЦ           - Булево - ведение учета МРЦ в системе.
//  *Кэш - Структура:
//   ** КэшНоменклатуры     - Соответствие -
//   ** ЗапросИУстановкаМРЦ - Массив -
//   ** ВычислениеМРЦ       - Массив -
//  *ВариантПолученияМРЦ    - Строка - Вариант получения МРЦ. 
//  *УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка иерархии дерева упаковок.
Процедура ЗаполнитьСтрокиДереваПриНормализацииРекурсивно(СтрокаВерхнегоУровня, ВариантПолученияМРЦ, УпаковкаВерхнегоУровня, ПараметрыЗаполнения)
	
	ОчиститьКоличествоГрупповыхУпаковокИПачек = Истина;
	ПараметрыДерева                           = ПараметрыЗаполнения.ПараметрыДерева;
	
	Для Каждого СтрокаДерева Из СтрокаВерхнегоУровня.Строки Цикл
		
		Если ОчиститьКоличествоГрупповыхУпаковокИПачек Тогда
			Если ТипЗнч(СтрокаВерхнегоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаВерхнегоУровня.КоличествоПотребительскихУпаковок = 0;
				СтрокаВерхнегоУровня.КоличествоГрупповыхУпаковок       = 0;
				СтрокаВерхнегоУровня.Количество                        = 0;
				ОчиститьКоличествоГрупповыхУпаковокИПачек = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции)
			И Не ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		
		СтрокаДанных = Неопределено;
		Если ПараметрыЗаполнения.ДанныеКодовМаркировки <> Неопределено
			И ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
			
			СтрокаДанных = ПараметрыЗаполнения.ДанныеКодовМаркировки.Найти(СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			
			Если СтрокаДанных <> Неопределено Тогда
				
				Если ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = Неопределено Тогда
					ШтрихкодированиеИСМПСлужебный.ПараметрыСлиянияДанных(ПараметрыЗаполнения, СтрокаДерева.Владелец(), ПараметрыЗаполнения.ДанныеКодовМаркировки);
				КонецЕсли;
				
				Если СтрокаДанных.СтрокаДерева = Неопределено
					И ПараметрыЗаполнения.Кэш.ЗаполнятьСтрокиДерева Тогда
					СтрокаДанных.СтрокаДерева = СтрокаДерева;
				КонецЕсли;
				
				ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(
			СтрокаДерева, СтрокаДанных,
			ПараметрыЗаполнения.ПараметрыСканирования);
		
		ЭтоКодМаркировкиБлока = (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая);
		
		Если ПараметрыДерева.УчитыватьМРЦ
			И Не ЗначениеЗаполнено(СтрокаДерева.МРЦ)
			И (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или ЭтоКодМаркировкиБлока) Тогда
			
			СоставКодаМаркировки = СтрокаДерева.СоставКодаМаркировки;
			
			Если СоставКодаМаркировки <> Неопределено
				И СоставКодаМаркировки.Свойство("МРЦ")
				И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
				СтрокаДерева.МРЦ = СоставКодаМаркировки.МРЦ;
			КонецЕсли;
			
		КонецЕсли;
		
		ВложенныйВариантПолученияМРЦ = ВариантПолученияМРЦ;
		
		Если ПараметрыДерева.УчитыватьМРЦ Тогда
			Если ЭтоКодМаркировкиБлока Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.МРЦ) Тогда
					ВложенныйВариантПолученияМРЦ = "ВычислениеОтРодителя";
				ИначеЕсли ВариантПолученияМРЦ = "ВычислениеИЗапрос" Тогда
					ПараметрыЗаполнения.Кэш.ЗапросИУстановкаМРЦ.Добавить(СтрокаДерева);
					ВложенныйВариантПолученияМРЦ = "ВычислениеОтРодителя";
				КонецЕсли;
			ИначеЕсли ВариантПолученияМРЦ = "ВычислениеОтРодителя" Тогда
				ПараметрыЗаполнения.Кэш.ВычислениеМРЦ.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСтрокиДереваПриНормализацииРекурсивно(
			СтрокаДерева,
			ВложенныйВариантПолученияМРЦ,
			УпаковкаВерхнегоУровня,
			ПараметрыЗаполнения);
		
		ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных);
		
		РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет вид упаковки строки дерева, вычисляет принадлежность упаковки к монотоварной и мультитоварной.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  СтрокаДанных - СтрокаТаблицыЗначений - Строка данных.
Процедура ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных)
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		Иначе
			// Набор или Логистическая упаковка
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = Неопределено Тогда
			СтрокаДерева.Номенклатура = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
		КонецЕсли;
		
		Если СтрокаДерева.Характеристика = Неопределено Тогда
			СтрокаДерева.Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		КонецЕсли;
		
		Если СтрокаДерева.Серия = Неопределено Тогда
			СтрокаДерева.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		КонецЕсли;
		
	Иначе
		
		ПроверятьНоменклатуру   = Истина;
		ПроверятьХарактеристику = Истина;
		ПроверятьСерию          = Истина;
		
		Номенклатура   = Неопределено;
		Характеристика = Неопределено;
		Серия          = Неопределено;
		
		ТребуетВзвешивания       = Неопределено;
		ПроизвольнаяЕдиницаУчета = Неопределено;
		МаркируемаяПродукция     = Неопределено;
		
		Для Каждого Строка Из СтрокаДерева.Строки Цикл
			
			Если ПроверятьНоменклатуру Тогда
				Если Номенклатура = Неопределено Тогда
					Номенклатура = Строка.Номенклатура;
				ИначеЕсли Номенклатура <> Строка.Номенклатура Тогда
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
					Серия          = Неопределено;
					ПроверятьНоменклатуру   = Ложь;
					ПроверятьХарактеристику = Ложь;
					ПроверятьСерию          = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьХарактеристику Тогда
				Если Характеристика = Неопределено Тогда
					Характеристика = Строка.Характеристика;
				ИначеЕсли Характеристика <> Строка.Характеристика Тогда
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
					Серия          = Неопределено;
					ПроверятьНоменклатуру   = Ложь;
					ПроверятьХарактеристику = Ложь;
					ПроверятьСерию          = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьСерию Тогда
				Если Серия = Неопределено Тогда
					Серия = Строка.Серия;
				ИначеЕсли Серия <> Строка.Серия Тогда
					Серия = Неопределено;
					ПроверятьСерию = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ТребуетВзвешивания       = Строка.ТребуетВзвешивания;
			ПроизвольнаяЕдиницаУчета = Строка.ПроизвольнаяЕдиницаУчета;
			МаркируемаяПродукция     = Строка.МаркируемаяПродукция;
			
			Если Не ПроверятьНоменклатуру И Не ПроверятьХарактеристику И Не ПроверятьСерию Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПроверятьНоменклатуру Или Не ПроверятьХарактеристику Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		Иначе
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор Тогда
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				
				СтрокаДерева.Номенклатура   = Номенклатура;
				СтрокаДерева.Характеристика = Характеристика;
				СтрокаДерева.Серия          = Серия;
				
				СтрокаДерева.ТребуетВзвешивания       = ТребуетВзвешивания;
				СтрокаДерева.ПроизвольнаяЕдиницаУчета = ПроизвольнаяЕдиницаУчета;
				СтрокаДерева.МаркируемаяПродукция     = МаркируемаяПродукция;
				
			Иначе
				
				СтрокаДерева.Номенклатура   = Неопределено;
				СтрокаДерева.Характеристика = Неопределено;
				СтрокаДерева.Серия          = Неопределено;
				
				СтрокаДерева.ТребуетВзвешивания       = Ложь;
				СтрокаДерева.ПроизвольнаяЕдиницаУчета = Ложь;
				СтрокаДерева.МаркируемаяПродукция     = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДанных <> Неопределено Тогда
		
		СтрокаДанных.ТипУпаковки = СтрокаДерева.ТипУпаковки;
		
		СтрокаДанных.Номенклатура   = СтрокаДерева.Номенклатура;
		СтрокаДанных.Характеристика = СтрокаДерева.Характеристика;
		СтрокаДанных.Серия          = СтрокаДерева.Серия;
		
		СтрокаДанных.ТребуетВзвешивания       = СтрокаДерева.ТребуетВзвешивания;
		СтрокаДанных.ПроизвольнаяЕдиницаУчета = СтрокаДерева.ПроизвольнаяЕдиницаУчета;
		СтрокаДанных.МаркируемаяПродукция     = СтрокаДерева.МаркируемаяПродукция;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строка дерева упаковок данными таблицы кодов маркировки.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка Дерева упаковок.
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки).
Процедура ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения)
	
	ЗаполняемыеКолонки   = ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки;
	ЕстьРодитель         = СтрокаДерева.Родитель <> Неопределено;
	НетДочернихЭлементов = СтрокаДерева.Строки.Количество() = 0;
	
	Если ЗаполняемыеКолонки.ЗаполнятьНоменклатуру И Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Если ЕстьРодитель И ЗначениеЗаполнено(СтрокаДерева.Родитель.Номенклатура)
			И СтрокаДерева.Родитель.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДерева.Родитель, ЗаполняемыеКолонки.КолонкиНоменклатуры);
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаДерева.Родитель, ЗаполняемыеКолонки.КолонкиНоменклатуры);
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных, ЗаполняемыеКолонки.КолонкиНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеКолонки.ЗаполнятьКоличество И НетДочернихЭлементов Тогда
		Если ЗначениеЗаполнено(СтрокаДанных.КоличествоПотребительскихУпаковок)
			Или ЗначениеЗаполнено(СтрокаДанных.Количество) Тогда
			СтрокаДерева.Количество                                = СтрокаДанных.Количество;
			СтрокаДерева.КоличествоПотребительскихУпаковок         = СтрокаДанных.КоличествоПотребительскихУпаковок;
			СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			СтрокаДерева.Коэффициент                               = СтрокаДанных.Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ИмяКолонки Из ЗаполняемыеКолонки.Прочие Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных[ИмяКолонки]) Тогда
			СтрокаДерева[ИмяКолонки] = СтрокаДанных[ИмяКолонки];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаполняемыеКолонки.КолонкиДанныеСервиса) Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанных.Статус)
			И Не ЗначениеЗаполнено(СтрокаДерева.Статус) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных, ЗаполняемыеКолонки.КолонкиДанныеСервиса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет количественных показателей строки дерева, таких как: КоличествоПотребительскихУпаковок, КоличествоГрупповыхУпаковок.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок
//  ПараметрыЗаполнения - Структура:
//   *ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
Процедура РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения)
	
	ИспользуетсяСераяЗона = ПараметрыЗаполнения.ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП;
	
	НоменклатураНабораИКомплектующихОтличается = СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
		И СтрокаДерева.Строки.Количество()
		И Не ПроверкаИПодборПродукцииИСМПКлиентСервер.НоменклатурыСтрокСовпадают(СтрокаДерева, СтрокаДерева.Строки[0]);
	
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		// Мультитоварный набор ведет себя как потребительская упаковка
		Или (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка)
		// Монотоварный набор (с отдельной номенклатурой для набора) ведет себя как потребительская упаковка
		Или (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
			И НоменклатураНабораИКомплектующихОтличается) Тогда
		
		СтрокаДерева.КоличествоПотребительскихУпаковок = 1;
		Если ЗначениеЗаполнено(СтрокаДерева.КоличествоПоДаннымИБ) Тогда
			СтрокаДерева.Количество = СтрокаДерева.КоличествоПоДаннымИБ;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		// Монотоварный набор ведет себя как групповая упаковка
		Или (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
			И Не НоменклатураНабораИКомплектующихОтличается) Тогда
		
		СтрокаДерева.КоличествоГрупповыхУпаковок = 1;
		// Количество пачек загружено из справочника. Актуально для детализации: Короба с блоками
		Если СтрокаДерева.Строки.Количество() = 0
			И ЗначениеЗаполнено(СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ) Тогда
			СтрокаДерева.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ;
			СтрокаДерева.Количество                        = СтрокаДерева.КоличествоПоДаннымИБ;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		// Количество загружено из справочника. Актуально для детализации: Короба с групповыми упаковками
		Если СтрокаДерева.Строки.Количество() = 0
			И ЗначениеЗаполнено(СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ) Тогда
			// Количество блоков можно расчитать по данным GTIN
			СтрокаДерева.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ;
			СтрокаДерева.Количество                        = СтрокаДерева.КоличествоПоДаннымИБ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		РодительНаборКакПотребительскаяУпаковка = Ложь;
		Если СтрокаДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			Если СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
				РодительНаборКакПотребительскаяУпаковка = Истина;
			ИначеЕсли СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
				И СтрокаДерева.Родитель.Строки.Количество()
				И Не ПроверкаИПодборПродукцииИСМПКлиентСервер.НоменклатурыСтрокСовпадают(СтрокаДерева.Родитель, СтрокаДерева) Тогда
				РодительНаборКакПотребительскаяУпаковка = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не РодительНаборКакПотребительскаяУпаковка Тогда
			
			СтрокаДерева.Родитель.КоличествоПотребительскихУпаковок = СтрокаДерева.Родитель.КоличествоПотребительскихУпаковок
				+ СтрокаДерева.КоличествоПотребительскихУпаковок;
			
			Если ИспользуетсяСераяЗона Тогда
				Если СтрокаДерева.СодержитСерыеКоды Тогда
					СтрокаДерева.Родитель.СодержитСерыеКоды = Истина;
					СтрокаДерева.Родитель.КоличествоГрупповыхУпаковок = 0;
				ИначеЕсли Не СтрокаДерева.Родитель.СодержитСерыеКоды Тогда
					СтрокаДерева.Родитель.КоличествоГрупповыхУпаковок = СтрокаДерева.Родитель.КоличествоГрупповыхУпаковок
						+ СтрокаДерева.КоличествоГрупповыхУпаковок;
				Иначе
					СтрокаДерева.Родитель.КоличествоГрупповыхУпаковок = 0;
				КонецЕсли;
			Иначе
				СтрокаДерева.Родитель.КоличествоГрупповыхУпаковок = СтрокаДерева.Родитель.КоличествоГрупповыхУпаковок
				                                                  + СтрокаДерева.КоличествоГрупповыхУпаковок;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
			И Не РодительНаборКакПотребительскаяУпаковка Тогда
			СтрокаДерева.Родитель.Количество = СтрокаДерева.Родитель.Количество
			                                 + СтрокаДерева.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДанных <> Неопределено Тогда
		
		СтрокаДанных.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковок;
		СтрокаДанных.КоличествоГрупповыхУпаковок       = СтрокаДерева.КоличествоГрупповыхУпаковок;
		СтрокаДанных.Количество                        = СтрокаДерева.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет замену значений строки дерева со значениями Неопределено на пустые ссылки.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Описание
Процедура ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева) Экспорт
	
	ПустаяНоменклатура   = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ПустаяХарактеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	ПустаяСерия          = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	
	Если СтрокаДерева.Номенклатура = Неопределено Тогда
		СтрокаДерева.Номенклатура = ПустаяНоменклатура;
	КонецЕсли;
	
	Если СтрокаДерева.Характеристика = Неопределено Тогда
		СтрокаДерева.Характеристика = ПустаяХарактеристика;
	КонецЕсли;
	
	Если СтрокаДерева.Серия = Неопределено Тогда
		СтрокаДерева.Серия = ПустаяСерия;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Выполняет обработку выбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  РезультатВыбора - Структура - результат выбора номенклатуры пользователем.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - закэшированные данные формы.
// Возвращаемое значение:
//  Неопределено, Структура - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

Процедура ЗапросИРасчетМРЦПоСтрокамДерева(ЗапрашиваемыеСтроки, ВычисляемыеСтроки, ПараметрыСканирования) Экспорт
	
	СтрокиЗапроса    = Новый Массив();
	СтрокиВычисления = Новый Массив();
	КэшРезультат     = Новый Соответствие();
	
	Если Не ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.УчитыватьМРЦ()
		И Не ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		И Не ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ЗапрашиваемыеСтроки Цикл
		
		Если УчитыватьМРЦПоСтрокеКоллекции(СтрокаДерева, КэшРезультат) Тогда
			СтрокиЗапроса.Добавить(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из ВычисляемыеСтроки Цикл
		
		Если УчитыватьМРЦПоСтрокеКоллекции(СтрокаДерева, КэшРезультат) Тогда
			СтрокиВычисления.Добавить(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущиеСтрокиЗапроса = СтрокиЗапроса;
	Пока ТекущиеСтрокиЗапроса.Количество() > 0
		Или СтрокиВычисления.Количество() > 0 Цикл
		
		ИнтерфейсМОТП.ЗапросМРЦПоСтрокамДерева(ТекущиеСтрокиЗапроса);
		РасчетМРЦПоСтрокамДерева(СтрокиВычисления);
		
		ТекущиеСтрокиЗапроса = Новый Массив();
		Для Каждого СтрокаРасчета Из СтрокиВычисления Цикл
			Если Не ЗначениеЗаполнено(СтрокаРасчета.МРЦ) Тогда
				ТекущиеСтрокиЗапроса.Добавить(СтрокаРасчета);
			КонецЕсли;
		КонецЦикла;
		
		СтрокиВычисления.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует вложенные штрихкоды путем получения базовых коллекций "ДеревоУпаковок" и "МаркированныеТовары" и дополнения
// их колонками специфичными для табачной продукции.
//
// Параметры:
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
//  ИнициализироватьМаркированныеТовары - Булево - Признак инициализации таблицы МаркированныеТовары
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
//
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок = Неопределено, ИнициализироватьМаркированныеТовары = Истина, ПараметрыСканирования = Неопределено)
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(
		ДеревоУпаковок, ИнициализироватьМаркированныеТовары);
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	
	Если ИнициализироватьМаркированныеТовары Тогда
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.МаркированныеТовары, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Инициализирует структуру, описывающую результат получения вложенных штрихкодов по данным МОТП.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Ошибка, возникшая в результате запроса данных из МОТП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка.
// * ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
Функция ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымМОТП()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеКодовМаркировки",          Неопределено);
	Результат.Вставить("ВложенныеШтрихкоды",             Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	Результат.Вставить("GTIN",                           Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Инициализирует дерево упаковок для табачной продукции.
//
// Возвращаемое значение:
//  ДеревоЗначений - Иерархия упаковок.
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Дополняет таблицу "Маркированные товары" табачными блоками, которые присутствуют в "Дереве упаковок".
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки "Дерева упаковок".
//  МаркированныеТовары - ТаблицаЗначений - таблица с маркированными товарами.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка в иерархии.
Процедура ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл

		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;

		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;

		ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(СтрокаДерева.Строки, МаркированныеТовары, УпаковкаВерхнегоУровня);

	КонецЦикла;

КонецПроцедуры

// Дополняет данные по штрихкодам спецификой табачной продукции, полученной из МОТП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок = СформироватьДеревоУпаковокПоДаннымСервиса(
		ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
		Неопределено,
		СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок,
		ДанныеПоШтрихкодам,
		ПараметрыСканирования);
	
	ПотребительскиеУпаковки = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ПараметрыСканирования);
	
	Если ПотребительскиеУпаковки.Количество() > 0 Тогда
		
		Результат = СпецификаДляДополненияДанныхПоШтрихкодам(
			ПотребительскиеУпаковки,
			ПараметрыСканирования);
		Если Результат.ЕстьОшибки Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат;
			
		Иначе
			СпецификаШтрихкодовПотребительскихУпаковок = Результат.СпецификаШтрихкодов;
		КонецЕсли;
		
		ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
			СпецификаШтрихкодовПотребительскихУпаковок,
			Неопределено,
			ДанныеПоШтрихкодам,
			ПараметрыСканирования);
		
	КонецЕсли;
	
	СтрокиДанныхДляЗаполненияПредставления = Новый Массив;
	МассивНеизвестныхEAN                   = Новый Массив;
	Для Каждого СтрокаДанных Из ПотребительскиеУпаковки Цикл
		Если СтрокаДанных.ТребуетсяСопоставление
			И Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
			МассивНеизвестныхEAN.Добавить(СтрокаДанных.EAN);
			СтрокиДанныхДляЗаполненияПредставления.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	МассивНеизвестныхEAN = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНеизвестныхEAN);
	
	Если СтрокиДанныхДляЗаполненияПредставления.Количество() > 0 Тогда
		ЗаполнитьПредставлениеНоменклатурыПоДаннымМОТП(
			ДанныеПоШтрихкодам, СтрокиДанныхДляЗаполненияПредставления, МассивНеизвестныхEAN);
	КонецЕсли;
	
	Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
		И ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
		
		// Логистические упаковки проверяются отдельно
		РезультатПроверкиСеройЗоны = ПроверитьПотребительскиеУпаковкиНаВхождениеВСеруюЗону(ПотребительскиеУпаковки, ПараметрыСканирования);
		
		Если Не ПустаяСтрока(РезультатПроверкиСеройЗоны.ТекстОшибки) Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатПроверкиСеройЗоны.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатПроверкиСеройЗоны.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строки таблицы Данные кодов маркировки спецификой, полученной из МОТП.
// 
// Параметры:
//  СпецификаШтрихкодов - Соответствие - Ключ - строка таблицы Данные кодов маркировки, значение - специфика, полученная
//                                       из сервиса МОТП.
//  ДеревоПоДаннымСервиса - ДеревоЗначений - Дерево кодов маркировки по данным сервиса.
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
Процедура ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
	СпецификаШтрихкодовПотребительскихУпаковок,
	СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ПредставленияСтатусов = ПредставленияСтатусов();
	
	Если СпецификаШтрихкодовПотребительскихУпаковок <> Неопределено Тогда
		НаличиеКолонокВДанных = Новый Соответствие;
		Для Каждого КлючЗначение Из СпецификаШтрихкодовПотребительскихУпаковок Цикл
			
			СтрокаТаблицыДанных = КлючЗначение.Ключ;
			СпецификаСтроки     = КлючЗначение.Значение;
			
			Если ЗначениеЗаполнено(СпецификаСтроки) Тогда
				
				ПоляДляЗаполнения = Новый Массив;
				Для Каждого КлючИЗначение Из СпецификаСтроки Цикл
					
					ИмяСвойства  = КлючИЗначение.Ключ;
					ЕстьСвойство = НаличиеКолонокВДанных.Получить(ИмяСвойства);
					Если ЕстьСвойство = Неопределено Тогда
						ЕстьСвойство = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыДанных, ИмяСвойства);
						НаличиеКолонокВДанных.Вставить(ИмяСвойства, ЕстьСвойство);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(КлючИЗначение.Значение)
						И ЕстьСвойство Тогда
						ПоляДляЗаполнения.Добавить(КлючИЗначение.Ключ);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПоляДляЗаполнения.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанных, СпецификаСтроки, СтрСоединить(ПоляДляЗаполнения, ","));
				КонецЕсли;
				
				Если СтрокаТаблицыДанных.СтрокаДерева = Неопределено Тогда
					Если СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
						КоличествоПотребительскихУпаковок = 0;
						Если СпецификаСтроки <> Неопределено Тогда
							КоличествоПотребительскихУпаковок = СпецификаСтроки.ВложенныеУпаковки.Количество();
						КонецЕсли;
						СтрокаТаблицыДанных.КоличествоГрупповыхУпаковок       = 1;
						СтрокаТаблицыДанных.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок;
					ИначеЕсли СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
						СтрокаТаблицыДанных.КоличествоГрупповыхУпаковок       = 0;
						СтрокаТаблицыДанных.КоличествоПотребительскихУпаковок = 1;
					Иначе
						СтрокаТаблицыДанных.КоличествоГрупповыхУпаковок       = 0;
						СтрокаТаблицыДанных.КоличествоПотребительскихУпаковок = СтрокаТаблицыДанных.ПлановоеКоличествоПотребительскихУпаковок;
					КонецЕсли;
				Иначе
					СтрокаТаблицыДанных.КоличествоГрупповыхУпаковок       = СтрокаТаблицыДанных.СтрокаДерева.КоличествоГрупповыхУпаковок;
					СтрокаТаблицыДанных.КоличествоПотребительскихУпаковок = СтрокаТаблицыДанных.СтрокаДерева.КоличествоПотребительскихУпаковок;
				КонецЕсли;
				
				СтрокаТаблицыДанных.ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус);
				
				ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(
					СтрокаТаблицыДанных, Неопределено,
					ПараметрыСканирования);
				
				Если ШтрихкодированиеИСМПСлужебный.ТребуетсяЗагрузкаВложенныхКодовМаркировки(
					СпецификаСтроки, СтрокаТаблицыДанных, ПараметрыСканирования) Тогда
					СтрокаТаблицыДанных.Идентифицирован = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок <> Неопределено
		И СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок.Количество() Тогда
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ОтключитьОтборПоВидуПродукции",                                  Истина);
		ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойПотребительскихУпаковок",                 Ложь);
		ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок", Истина);
		ПараметрыОбработки.Вставить("ЭтоЗаполнениеВложенныхШтрихкодов",                               Ложь);
		ПараметрыОбработки.Вставить("СвязыватьСтрокиДереваСДаннымиКодовМаркировки",                   Истина);
		
		ОбработатьДеревоПолученноеИзМОТП(
			ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса, ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыОбработки);
		
		Для Каждого КлючЗначение Из СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок Цикл
			
			СтрокаТаблицыДанных = КлючЗначение.Ключ;
			СпецификаСтроки     = КлючЗначение.Значение;
			
			Если ЗначениеЗаполнено(СпецификаСтроки) Тогда
				
				Если ШтрихкодированиеИСМПСлужебный.ТребуетсяЗагрузкаВложенныхКодовМаркировки(
					СпецификаСтроки, СтрокаТаблицыДанных, ПараметрыСканирования) Тогда
					СтрокаТаблицыДанных.Идентифицирован = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает все коды маркировки, находящиеся в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам                                 - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок - Соответствие
//  ПараметрыСканирования                              - См. ШтрихкодированиеИС.ПараметрыСканирования
// Возвращаемое значение:
//  Массив из Строка - Коды маркировки.
Функция СтрокиТаблицыДанныхДляПолученияСпецифики(ДанныеКодовМаркировки, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ПараметрыСканирования)
	
	СтрокиТаблицыДанных = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВозможнаПродукцияМОТП(СтрокаДанных)
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И (СтрокаДанных.Входящий Или Не ЗначениеЗаполнено(СтрокаДанных.Статус))
			И СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок[СтрокаДанных] = Неопределено Тогда
				СтрокиТаблицыДанных.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокиТаблицыДанных;
	
КонецФункции

// Возвращает признак, что обрабатываемый код маркировки относится либо может относиться к МОТП
//
// Параметры:
//   СтрокаДанных - Произвольный - элемент коллекции "ШтрихкодированиеИС.ИнициализацияТаблицыДанныхКодовМаркировки"
//     либо совместимый по полям (строка дерева значений, структура).
// Возвращаемое значение:
//   Булево - в текущей строке продукция МОТП явно присутствует либо возможна
Функция ВозможнаПродукцияМОТП(СтрокаДанных)

	Если СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
		Возврат Ложь;
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции) Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаДанных.ПрисутствуетТабачнаяПродукция Тогда // Флаг заполняется если неизвестно АТП это или классический табак
		Возврат Истина;
	ИначеЕсли Не СтрокаДанных.ЭтоКодВводаОстатков Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого ВидПродукции Из СтрокаДанных.ВидыПродукцииКодаМаркировки Цикл
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Получает дерево упаковок из системы МОТП для контроля расхождений состава с данными ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ     - См. ИнициализацияТаблицыДанныхКодовМаркировки
//   * Значение - СтрокаДереваЗначений
Функция СформироватьДеревоУпаковокПоДаннымСервиса(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ТребуютсяПроверки = (ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
		И ПараметрыСканирования.ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП)
		Или ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП;
	
	Если Не ТребуютсяПроверки Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	СтрокиТаблицыДляЗапроса = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки,, Ложь)
			И ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки)
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И СтрокаДанных.Входящий Тогда
			
			СтрокиТаблицыДляЗапроса.Добавить(СтрокаДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиТаблицыДляЗапроса.Количество() = 0 Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	РезультатПолученияДанных = ДеревоУпаковокПоДаннымМОТП(СтрокиТаблицыДляЗапроса, ПараметрыСканирования); 
	Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатПолученияДанных.ТекстОшибки;
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатПолученияДанных.ТребуетсяОбновлениеКлючаСессии;
		
	Иначе
		
		Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
			И ПараметрыСканирования.ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП Тогда
			
			РезультатПроверкиСеройЗоны = ПроверитьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодов(
				РезультатПолученияДанных, ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
			
			Если Не ПустаяСтрока(РезультатПроверкиСеройЗоны.ТекстОшибки) Тогда
				
				ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
				ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатПроверкиСеройЗоны.ТекстОшибки;
				ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатПроверкиСеройЗоны.ТребуетсяОбновлениеКлючаСессии;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса = РезультатПолученияДанных.ДеревоУпаковок;
		
	КонецЕсли;
	
	Возврат РезультатПолученияДанных.СоответствиеСтрокДерева;
	
КонецФункции

Процедура ДополнитьДанныеПоШтрихкодамСпецификойЧастичногоВыбытия(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если Не ШтрихкодированиеИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Неопределено;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции) Тогда
			ШтрихкодированиеИСМПСлужебный.ДобавитьСтрокуДляЗаполненияДаннымиЧастичногоВыбытия(
				СтрокаДанных,
				ПараметрыСканирования,
				ДанныеЗаполнения);
		КонецЕсли;
	КонецЦикла;
	
	ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхДаннымиЧастичногоВыбытия(
		ДанныеПоШтрихкодам,
		ДанныеЗаполнения,
		ПараметрыСканирования);
	
	Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено
				И ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции)
				И ИнтеграцияИСМПКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
					СтрокаДанных.ВидПродукции,
					ПараметрыСканирования.ВидОперацииИСМП) Тогда
				
				СтрокаДанных.ЧастичноеВыбытие               = СтрокаДанных.СтрокаДерева.ЧастичноеВыбытие;
				СтрокаДанных.ЧастичноеВыбытиеВариантУчета   = СтрокаДанных.СтрокаДерева.ЧастичноеВыбытиеВариантУчета;
				СтрокаДанных.Количество                     = СтрокаДанных.СтрокаДерева.Количество;
				СтрокаДанных.ЕмкостьПотребительскойУпаковки = СтрокаДанных.СтрокаДерева.ЕмкостьПотребительскойУпаковки;
				СтрокаДанных.ЧастичноеВыбытиеНоменклатура   = СтрокаДанных.СтрокаДерева.ЧастичноеВыбытиеНоменклатура;
				СтрокаДанных.ЧастичноеВыбытиеХарактеристика = СтрокаДанных.СтрокаДерева.ЧастичноеВыбытиеХарактеристика;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет связанные строки таблицы Маркированные товары данными строк дерева упаковок.
// 
// Параметры:
//  МаркированныеТовары - ТаблицаЗначений - Таблица маркируемой продукции.
Процедура ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары)
	
	Для Каждого СтрокаТовары Из МаркированныеТовары Цикл
		Если СтрокаТовары.СтрокаДерева <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТовары.СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область УчетМРЦ

Функция УчитыватьМРЦПоСтрокеКоллекции(СтрокаКоллекции, Кэш, УчетМРЦВключен = Истина)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если УчетМРЦВключен
		И СтрокаКоллекции.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаКоллекции, "Номенклатура") Тогда
			
			ТребуетсяЗапрос = Кэш.Получить(СтрокаКоллекции.Номенклатура);
			Если ТребуетсяЗапрос = Неопределено Тогда
				
				ТребуетсяЗапрос = Истина;
				ШтрихкодированиеМОТППереопределяемый.ПриОпределенииНеобходимостиЗапросаМРЦ(
					СтрокаКоллекции.Номенклатура,
					ТребуетсяЗапрос);
				Кэш.Вставить(СтрокаКоллекции.Номенклатура, ТребуетсяЗапрос);
				
			КонецЕсли;
			
		Иначе
			
			ТребуетсяЗапрос = УчетМРЦВключен;
			
		КонецЕсли;
		
		Если ТребуетсяЗапрос Тогда
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти
