
#Область ПрограммныйИнтерфейс

// Функция - Получить имя кассира
// 
// Возвращаемое значение:
//  Строка - Имя кассира
//
Функция ПолучитьИмяКассира() Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураФИО = РегистрыСведений.ФИОФизическихЛиц.ПолучитьПоследнее(, Новый Структура("ФизическоеЛицо", ФизЛицо)); 
	
	СтрокаФИО = "";
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "", "", " ") + СтруктураФИО.Фамилия;
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "" ИЛИ СтруктураФИО.Имя = "", "", " ") + СтруктураФИО.Имя;
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "" ИЛИ СтруктураФИО.Отчество = "", "", " ") + СтруктураФИО.Отчество;
	
	ИмяКассира = СтрокаФИО;

	Возврат ИмяКассира;
	
КонецФункции

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
Функция ПолучитьСостояниеКассовойСмены(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСменаДокумент.Номер КАК НомерКассовойСмены,
	|	КассоваяСменаДокумент.Ссылка КАК КассоваяСмена,
	|	КассоваяСменаДокумент.Статус КАК СтатусКассовойСмены,
	|	КассоваяСменаДокумент.КассаККМ КАК КассаККМ,
	|	КассоваяСменаДокумент.КассаККМ.ВалютаДенежныхСредств КАК ВалютаДокумента,
	|	КассоваяСменаДокумент.КассаККМ.ВалютаДенежныхСредств.Представление КАК ВалютаДокументаПредставление,
	|	КассоваяСменаДокумент.Организация КАК Организация,
	|	КассоваяСменаДокумент.КассаККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	Представление(КассоваяСменаДокумент.КассаККМ.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
	|	ВЫБОР
	|		КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	ВЫБОР
	|		КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСменаДокумент.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСменаДокумент.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаВалОстаток, 0) КАК НаличностьВКассе,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, НЕОПРЕДЕЛЕНО) КАК ОтчетОРозничныхПродажах,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.ВидЦен, НЕОПРЕДЕЛЕНО)  КАК ВидЦен,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.НалогообложениеНДС, НЕОПРЕДЕЛЕНО)  КАК НалогообложениеНДС,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ответственный, НЕОПРЕДЕЛЕНО)  КАК Ответственный,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Подразделение, НЕОПРЕДЕЛЕНО)  КАК Подразделение,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.СуммаВключаетНДС, НЕОПРЕДЕЛЕНО)  КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.НДСВключатьВСтоимость, НЕОПРЕДЕЛЕНО)  КАК НДСВключатьВСтоимость
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСменаДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
	|		ПО КассоваяСменаДокумент.КассаККМ = ДенежныеСредстваККМОстатки.КассаККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО КассоваяСменаДокумент.Ссылка = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	КассоваяСменаДокумент.Проведен
	|	И КассоваяСменаДокумент.КассаККМ = &КассаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСменаДокумент.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		Если НЕ ЗначениеЗаполнено(ОписаниеКассовойСмены.НалогообложениеНДС) Тогда
			ОписаниеКассовойСмены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОписаниеКассовойСмены.Ответственный) Тогда
			ОписаниеКассовойСмены.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.ТекущийПользователь(),
				"ОсновнойОтветственный");
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаВалОстаток, 0) КАК НаличностьВКассе
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
		|				,
		|				КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
		|		ПО (ДенежныеСредстваККМОстатки.КассаККМ = КассыККМ.Ссылка)
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОписаниеКассовойСмены.КассаККМ = КассаККМ;
		ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция возвращает текущую сумму положительного остатка денежных средств (ДС) по кассе ККМ.
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ
// Возвращаемое значение:
//  Число
//
Функция СуммаОстаткаДСПоКассеККМ(КассаККМ, ДоговорПлатежногоАгента = Неопределено) Экспорт

	ЗапросОстатокДСвКассе= Новый Запрос();
	ЗапросОстатокДСвКассе.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваККМОстатки.СуммаОстаток КАК СуммаОстатка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
	|			,
	|			КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
	|ГДЕ
	|	ДенежныеСредстваККМОстатки.СуммаОстаток > 0";
	ЗапросОстатокДСвКассе.УстановитьПараметр("КассаККМ", КассаККМ);
		
	ВыборкаОстатокДСвКассе = ЗапросОстатокДСвКассе.Выполнить().Выбрать();
	Если ВыборкаОстатокДСвКассе.Следующий() Тогда
		СуммаОстатка = ВыборкаОстатокДСвКассе.СуммаОстатка;
	Иначе
		СуммаОстатка = 0;
	КонецЕсли;
	
	Возврат СуммаОстатка;
	
КонецФункции // СуммаОстаткаДСПоКассеККМ()

// Функция выполняет открытие кассовой смены.
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "", ТекстПереходящегоОстатка = "", КассоваяСмена = Неопределено) Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
	
	ТекстПереходящегоОстатка = "";
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена; 
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если ДатаОткрытияКассовойСмены - СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса < 86400 Тогда
			
			// Все в порядке
			
		Иначе
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов.'");
			
		КонецЕсли;
		
	Иначе
		
		// Смена закрыта. Откроем новую кассовую смену.
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(КассаККМ);
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, РеквизитыКассыККМ);
		
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус                 = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
			
			СуммаОстатка = СуммаОстаткаДСПоКассеККМ(КассаККМ);
			Если СуммаОстатка <> 0 Тогда
				ТекстПереходящегоОстатка = НСтр("ru = 'Сумма остатка в кассе: %1 руб.'");
				ТекстПереходящегоОстатка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПереходящегоОстатка, 
																						 Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"));
			КонецЕсли;
			КассоваяСмена = НоваяКассоваяСмена.Ссылка;
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = НСтр("ru = 'Проверьте настройки кассы ККМ.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьОтчетОРозничныхПродажах(КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	НовыйОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	НовыйОтчетОРозничныхПродажах.Автор = Пользователи.ТекущийПользователь();
	НовыйОтчетОРозничныхПродажах.Заполнить(Новый Структура("КассаККМ", КассоваяСмена.КассаККМ));
	
	НовыйОтчетОРозничныхПродажах.Дата = КассоваяСмена.Дата;
	НовыйОтчетОРозничныхПродажах.КассоваяСмена = КассоваяСмена.Ссылка;
	Если КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
		НовыйОтчетОРозничныхПродажах.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	Иначе
		НовыйОтчетОРозничныхПродажах.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", НовыйОтчетОРозничныхПродажах.Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", НовыйОтчетОРозничныхПродажах.КассаККМ.СтруктурнаяЕдиница);
	
	Запрос.УстановитьПараметр("Дата", НовыйОтчетОРозничныхПродажах.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД КАК ЕНВД
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД";
	
	Выборка = Запрос.Выполнить();
	НовыйОтчетОРозничныхПродажах.УчитыватьВНУ = Выборка.Пустой();
	
	Если НовыйОтчетОРозничныхПродажах.ПроверитьЗаполнение() Тогда
		НовыйОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		Возврат НовыйОтчетОРозничныхПродажах;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Проверьте настройки розничного склада и кассы ККМ.'");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет закрытие кассовой смены.
//
Функция ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "", СсылкаНаОтчет = Неопределено) Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		КассоваяСменаОбъект = СтруктураСостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
		КассоваяСменаОбъект.Дата                   = ТекущаяДатаСеанса();
		КассоваяСменаОбъект.Статус    = Перечисления.СтатусыКассовойСмены.Закрыта;
		КассоваяСменаОбъект.ОкончаниеКассовойСмены = КассоваяСменаОбъект.Дата;
		
		Попытка
			
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Если СсылкаНаОтчет <> Неопределено Тогда
				ОбъектОтчет = СсылкаНаОтчет.ПолучитьОбъект();
				ОбъектОтчет.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
				ОбъектОтчет.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		Исключение
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
		КонецПопытки;
		
	Иначе
		
		// Смена не открыта.
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращается описание ошибки.
//
Функция СменаОткрыта(ОтчетОРозничныхПродажах, Дата, ОписаниеОшибки = "") Экспорт
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.КассоваяСмена КАК Смена
	|ПОМЕСТИТЬ Смены
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассоваяСмена.Статус КАК Статус,
	|	КассоваяСмена.НачалоКассовойСмены КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Смены КАК Смены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
	|		ПО Смены.Смена = КассоваяСмена.Ссылка
	|			И (КассоваяСмена.Проведен)";
	
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если Дата - Выборка.НачалоКассовойСмены < 86400 Тогда
				СменаОткрыта = Истина;
			Иначе
				ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены'");
				СменаОткрыта = Ложь;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.Статус) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				СменаОткрыта = Истина;
			Иначе
				ОписаниеОшибки = НСтр("ru = 'Смена не открыта'");
				СменаОткрыта = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = НСтр("ru = 'Смена не открыта'");
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции // СменаОткрыта()

// Функция возвращает структуру, характеризующую состояние кассовой смены на дату.
//
Функция ПолучитьСостояниеКассовойСменыНаДату(КассаККМ, ДатаВремя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСменаДокумент.Номер КАК НомерКассовойСмены,
	|	КассоваяСменаДокумент.Ссылка КАК КассоваяСмена,
	|	КассоваяСменаДокумент.Статус КАК СтатусКассовойСмены,
	|	КассоваяСменаДокумент.КассаККМ КАК КассаККМ,
	|	КассоваяСменаДокумент.КассаККМ.ВалютаДенежныхСредств КАК ВалютаДокумента,
	|	КассоваяСменаДокумент.КассаККМ.ВалютаДенежныхСредств.Представление КАК ВалютаДокументаПредставление,
	|	КассоваяСменаДокумент.Организация КАК Организация,
	|	КассоваяСменаДокумент.КассаККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	ВЫБОР
	|		КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСменаДокумент.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСменаДокумент.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаВалОстаток, 0) КАК НаличностьВКассе,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, НЕОПРЕДЕЛЕНО) КАК ОтчетОРозничныхПродажах,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.ВидЦен, НЕОПРЕДЕЛЕНО) КАК ВидЦен,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ответственный, НЕОПРЕДЕЛЕНО) КАК Ответственный,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.СуммаВключаетНДС, НЕОПРЕДЕЛЕНО) КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.НДСВключатьВСтоимость, НЕОПРЕДЕЛЕНО) КАК НДСВключатьВСтоимость
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСменаДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&ДатаВремя, КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМОстатки
	|		ПО КассоваяСменаДокумент.КассаККМ = ДенежныеСредстваККМОстатки.КассаККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО КассоваяСменаДокумент.Ссылка = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	КассоваяСменаДокумент.Проведен
	|	И КассоваяСменаДокумент.КассаККМ = &КассаККМ
	|	И ВЫБОР
	|			КОГДА КассоваяСменаДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|				ТОГДА КассоваяСменаДокумент.НачалоКассовойСмены
	|			ИНАЧЕ КассоваяСменаДокумент.ОкончаниеКассовойСмены
	|		КОНЕЦ <= &ДатаВремя
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСменаДокумент.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ДатаВремя", ДатаВремя + 100);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		Если НЕ ЗначениеЗаполнено(ОписаниеКассовойСмены.НалогообложениеНДС) Тогда
			ОписаниеКассовойСмены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОписаниеКассовойСмены.Ответственный) Тогда
			ОписаниеКассовойСмены.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.ТекущийПользователь(),
				"ОсновнойОтветственный");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции // ПолучитьСостояниеКассовойСменыНаДату()

// Функция возвращает остатков денежных средств в кассе в валюте кассы.
//
Функция ПолучитьОстатокДенежныхСредствВКассеККМ(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДенежныеСредстваВКассахККМОстатки.СуммаВалОстаток КАК НаличностьВКассе
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НаличностьВКассе;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьОстатокДенежныхСредствВКассе()

Процедура ПриЗаписиКассовойСменыПереопределяемый(КассоваяСмена) Экспорт
	
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена);
		
	Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
		ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
		НужноЗаписатьОтчет = Ложь;
		Если КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Закрыта
			И ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта
			И ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы Тогда
			ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
			НужноЗаписатьОтчет = Истина;
		ИначеЕсли КассоваяСмена.Статус = Перечисления.СтатусыКассовойСмены.Открыта
			И ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта Тогда
			ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
			НужноЗаписатьОтчет = Истина;	
		КонецЕсли;
		Если НужноЗаписатьОтчет Тогда
			Попытка
				РежимЗаписи = ?(ОтчетОРозничныхПродажахОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписи);
			Исключение
				ЗаписьЖурналаРегистрации("СинхронизацияСтатусовКассовойСмены", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			СоздатьОтчетОРозничныхПродажах(КассоваяСмена);
		Исключение
			ЗаписьЖурналаРегистрации("СозданиеОтчетаОРозничныхПродажах", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Переим. ПолучитьКодСистемыНалогообложения
Функция ПолучитьТипСистемыНалогообложенияККТ(Организация, СтруктурнаяЕдиница = Неопределено, ДатаДокумента = Неопределено, СпециальныйНалоговыйРежим) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпециальныйНалоговыйРежим) Тогда
		Если СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕНВД Тогда
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
		ИначеЕсли СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ЕСХН Тогда
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.ЕСН;
		ИначеЕсли СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН Тогда
			Возврат Перечисления.ТипыСистемНалогообложенияККТ.Патент;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктурнаяЕдиница)
		И РегистрыСведений.ПримененияЕНВД.ПрименяетсяЕНВД(Организация, СтруктурнаяЕдиница, ДатаДокумента) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	ИначеЕсли ЗначениеЗаполнено(СтруктурнаяЕдиница)
		И РегистрыСведений.ПримененияПатенты.ПрименяетсяПатент(Организация, СтруктурнаяЕдиница, ДатаДокумента) Тогда
		Возврат Перечисления.ТипыСистемНалогообложенияККТ.Патент;
	КонецЕсли;
	
	Возврат РегистрыСведений.СистемыНалогообложенияОрганизаций.ПолучитьТипСистемыНалогообложенияККТОрганизации(Организация, ДатаДокумента);
	
КонецФункции

Процедура КассоваяСменаПриЗаписиДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Источник.ДополнительныеСвойства.Свойство("НеСоздаватьОтчетОРозничныхПродажах") Тогда
		ПриЗаписиКассовойСменыПереопределяемый(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КассоваяСменаПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.КассаККМ)
		И ЗначениеЗаполнено(Источник.ФискальноеУстройство) Тогда
		Источник.КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(Источник.ФискальноеУстройство);
	КонецЕсли;

КонецПроцедуры

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомереТелефона(Знач НомерТелефона) Экспорт
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+7", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	
	Если СтрНайти(НомерТелефона, "8") = 1 И СтрДлина(НомерТелефона) = 11 Тогда
		НомерТелефона = Прав(НомерТелефона, 10);
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

Функция ПолучитьРеквизитыКассира(ИсточникФИОКассира, ПодписьКассира = Неопределено) Экспорт
	
	ПоПодписиКассира = ЗначениеЗаполнено(ПодписьКассира);
	
	Результат = Новый Структура;
	Результат.Вставить("Кассир", "");
	Результат.Вставить("ИмяКассира", "");
	Результат.Вставить("КассирИНН", "");
	Результат.Вставить("Должность", "");
	Результат.Вставить("ИмяКассираИДолжность", "");
	Результат.Вставить("ФизЛицо", Неопределено);
	
	Если ПоПодписиКассира Тогда
		Результат.Кассир = ПодписьКассира.ФизическоеЛицо;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подписи.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Подписи.Должность КАК ТекущаяДолжность
		|ИЗ
		|	Справочник.Подписи КАК Подписи
		|ГДЕ
		|	Подписи.Ссылка = &ПодписьКассира");
		
		Запрос.УстановитьПараметр("ПодписьКассира", ПодписьКассира);
	ИначеЕсли ТипЗнч(ИсточникФИОКассира) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Результат.Кассир = ИсточникФИОКассира;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник КАК Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудниковУНФ.ТекущаяДолжность КАК ТекущаяДолжность,
		|	Сотрудники.Физлицо КАК Физлицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудниковУНФ КАК ТекущиеКадровыеДанныеСотрудниковУНФ
		|		ПО ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	Сотрудники.Ссылка = &Кассир");
		
		Запрос.УстановитьПараметр("Кассир", ИсточникФИОКассира);
	Иначе
		СотрудникиПользователя = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя(ИсточникФИОКассира);
		Если Не ЗначениеЗаполнено(СотрудникиПользователя) Тогда 
			Возврат Результат;
		КонецЕсли;
		
		Результат.Кассир = СотрудникиПользователя[0];
		
	    Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудниковУНФ.ТекущаяДолжность
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудниковУНФ КАК ТекущиеКадровыеДанныеСотрудниковУНФ
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник = &Кассир");
		
		Запрос.УстановитьПараметр("Кассир", Результат.Кассир);
	КонецЕсли;
	
	ФизЛицо = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ТекущаяДолжность) Тогда
			Результат.Должность = Выборка.ТекущаяДолжность;
		КонецЕсли;
		Если ПоПодписиКассира Тогда
			Физлицо = Выборка.ФизическоеЛицо;
		КонецЕсли;
	Иначе
		Результат.Должность = "";
	КонецЕсли;
	
	Если НЕ ПоПодписиКассира Тогда
		Если ТипЗнч(ИсточникФИОКассира) = Тип("СправочникСсылка.Пользователи") Тогда
			Физлицо = СотрудникиПользователя[0].Физлицо;
		Иначе
			Физлицо = Выборка.Физлицо;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Физлицо) Тогда
		Результат.ИмяКассира = Строка(Физлицо.Наименование);
		Результат.КассирИНН = Физлицо.ИНН;
		Если ЗначениеЗаполнено(Результат.Должность)
			И ВРег(Результат.Должность) <> "КАССИР" Тогда
			Результат.ИмяКассираИДолжность = СтрШаблон("%1 (%2)", Результат.ИмяКассира, Результат.Должность);
		Иначе
			Результат.ИмяКассираИДолжность = Результат.ИмяКассира;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ФизЛицо", ФизЛицо);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРеквизитыМестаРасчета(КассаККМ, ВариантЗаполненияМестаРасчетов) Экспорт
	
	АдресРасчетов = ПечатьДокументовУНФ.КонтактнаяИнформация(КассаККМ.СтруктурнаяЕдиница, 
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
	НаименованиеМагазина = Строка(КассаККМ.СтруктурнаяЕдиница);
	
	Если ВариантЗаполненияМестаРасчетов = 1 Тогда
		МестоРасчетов = СтрШаблон("%1", НаименованиеМагазина);
	Иначе
		МестоРасчетов = СтрШаблон("%1 %2", НаименованиеМагазина, АдресРасчетов);
	КонецЕсли; 
	
	РеквизитыКассы = Новый Структура;
	РеквизитыКассы.Вставить("АдресРасчетов", АдресРасчетов);
	РеквизитыКассы.Вставить("МестоРасчетов", МестоРасчетов);
	
	Возврат РеквизитыКассы;
	
КонецФункции

// Возвращает признак предмета расчета для номенклатуры.
//
// Параметры:
//    Номенклатура - СправочникСсылка.Номенклатура, Структура - объект, представляющий номенклатуру и содержащий
//        реквизиты: ТипНоменклатуры, ВидПродукцииИС, ВидМаркировки, ПризнакПредметаРасчета.
//
// Возвращаемое значение:
//     ПеречислениеСсылка.ПризнакиПредметаРасчета - признак предмета расчета для данной номенклатуры.
//
Функция ПолучитьПризнакПредметаРасчета(Номенклатура) Экспорт
	СсылкаНоменклатуры = Неопределено;
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		СсылкаНоменклатуры = Номенклатура;
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ВидПродукцииИС, ВидМаркировки, ПодакцизныйТовар, ПризнакПредметаРасчета");
	Иначе
		ДанныеНоменклатуры = Номенклатура;
	КонецЕсли;
	Результат = ДанныеНоменклатуры.ПризнакПредметаРасчета;
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьОжидаемыйПризнакПредметаРасчета(ДанныеНоменклатуры.ТипНоменклатуры, ДанныеНоменклатуры.ВидПродукцииИС, ДанныеНоменклатуры.ВидМаркировки, ДанныеНоменклатуры.ПодакцизныйТовар);
		// Если ППР в номенклатуре не указан - это ошибка данных. При обнаружении такой проблемы, зафиксируем ее в ЖР
		ИмяСобытия = НСтр("ru = 'Определение признака предмета расчета для номенклатуры'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Признак предмета расчет для номенклатуры не заполен. Использован признак %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()), Результат);
		Если СсылкаНоменклатуры = Неопределено 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Номенклатура, "Ссылка") Тогда
			СсылкаНоменклатуры = Номенклатура.Ссылка;
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , СсылкаНоменклатуры, ТекстПредупреждения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак предмета расчета для комбинации реквизитов номенклатуры.
//
// Параметры:
//    ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - Тип номенклатуры, для которой нужно получить признак
//                                                            предмета расчета
//    ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - Значение реквизита ВидПродукцииИС Номенклатуры, для которой
//                                                          нужно получить признак предмета расчета
//    ВидМаркировки - ПеречислениеСсылка.ВидыМаркировки - Значение реквизита ВидМаркировки Номенклатуры, для которой
//                                                        нужно получить признак предмета расчета
//
// Возвращаемое значение:
//     ПеречислениеСсылка.ПризнакиПредметаРасчета - признак предмета расчета для данной комбинации реквизитов номенклатуры.
//
Функция ПолучитьОжидаемыйПризнакПредметаРасчета(ТипНоменклатуры, ВидПродукцииИС, ВидМаркировки, ПодакцизныйТовар = Ложь) Экспорт
	
	ПризнакПредметаРасчета = Неопределено;
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		
		Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ;
		ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукцииИС)
			Или ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Пиво Тогда
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ;
		ИначеЕсли ПодакцизныйТовар Тогда
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ;
		ИначеЕсли ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция
			ИЛИ ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			// ГИСМ.
			ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ;
		Иначе
			
			МаркируемаяНеподакцизнаяПродукция = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Ложь, Истина);
			
			Если МаркируемаяНеподакцизнаяПродукция.Найти(ВидПродукцииИС) = Неопределено Тогда
				ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
			Иначе
				ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Работа;
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
	КонецЕсли;
	
	Возврат ПризнакПредметаРасчета;
	
КонецФункции

// Возвращает признак предмета расчета по-умолчанию номенклатуры, основываясь на категории номенклатуры, или значениям
// реквизитов номенклатуры.
//
// Параметры:
//    Категория - СправочникСсылка.КатегорияНоменклатуры - Категория номенклатуры, для которой нужно получить признак
//                                                         предмета расчета
//    ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - Тип номенклатуры, для которой нужно получить признак
//                                                            предмета расчета
//    ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - Значение реквизита ВидПродукцииИС Номенклатуры, для которой
//                                                          нужно получить признак предмета расчета
//    ВидМаркировки - ПеречислениеСсылка.ВидыМаркировки - Значение реквизита ВидМаркировки Номенклатуры, для которой
//                                                        нужно получить признак предмета расчета
//
// Возвращаемое значение:
//     ПеречислениеСсылка.ПризнакиПредметаРасчета - признак предмета расчета для данной комбинации реквизитов номенклатуры.
//
Функция ПолучитьПризнакПредметаРасчетаКатегории(Категория, ТипНоменклатуры, ВидПродукцииИС, ВидМаркировки, ПодакцизныйТовар = Ложь) Экспорт

	ПризнакПредметаРасчета = Неопределено;
	ПризнакПредметаРасчетаКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Категория, "ПризнакПредметаРасчета");
	Если ЗначениеЗаполнено(ПризнакПредметаРасчетаКатегории) Тогда
		ПризнакПредметаРасчета = ПризнакПредметаРасчетаКатегории;
	Иначе
		ПризнакПредметаРасчета = ПолучитьОжидаемыйПризнакПредметаРасчета(ТипНоменклатуры, ВидПродукцииИС, ВидМаркировки, ПодакцизныйТовар);
	КонецЕсли;
	Возврат ПризнакПредметаРасчета;

КонецФункции

Функция ТребуетсяПризнакПредметаРасчета(ТипНоменклатуры) Экспорт
	
	Результат = Ложь;
	// Эти типы номенклатуры в розничной продаже не используются, и в чеках фигурировать не могут
	// Для остальных требуется заполнение признака предмета расчета номенклатуры
	ТипНоменклатурыПодразумеваетППР = НЕ ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ВидРабот")
		И НЕ ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция");

	Если ТипНоменклатурыПодразумеваетППР
		И ОбменДаннымиУНФПовтИсп.ЕстьУзлыРИБ()
		И НЕ ОбменДаннымиУНФПовтИсп.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
		// Это центральный узел, возможно в подчиненных узлах есть подключаемое оборудование
		Результат = Истина;
	ИначеЕсли ТипНоменклатурыПодразумеваетППР Тогда
		// Есть подключаемое оборудование, значит мы можем печатать чеки
		// В этом случае, может потребоваться управлять значением реквизита
		Результат = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	КонецЕсли; 
	Возврат Результат;

КонецФункции

// Добавляет в чек позиции из связанного документа расчетов
//
// Параметры:
//  ДокументРасчетов - ДокументСсылка - объект для заполнения признака;
//  ОбщиеПараметры - Структура - Параметры чека, должна содержать ключ "ПозицииЧека";
//  ТекСтрока - СтрокаТабличнойЧасти - Строка расшифровки платежа для последующей обработки;
//  СуммаПлатежа - Число(15, 3) - сумма платежа для определения полгоно или частичного расчета по документу;
//  НомерСтрокиТовара - Число - Строки товаров добавляются начиная с этого номера;
//  ПризнакСпособаРасчета - ПеречислениеСсылка.ПризнакиСпособаРасчета - признак способа расчета, который необходимо
//      установить, не выполняя стандартную логику выбора ПСР;
//
Процедура ДобавитьПозицииЧекаПоДокументуРасчетов(ДокументРасчетов, ОбщиеПараметры, ТекСтрока, СуммаПлатежа, НомерСтрокиТовара = 0, ПризнакСпособаРасчета = неопределено) Экспорт
	
	Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетов, "ВалютаДокумента,СуммаДокумента,ВидОперации");
	Иначе
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетов, "ВалютаДокумента,СуммаДокумента");
	КонецЕсли;
	
	Если РеквизитыДокумента.ВалютаДокумента <> Неопределено 
		И РеквизитыДокумента.ВалютаДокумента <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ВызватьИсключение НСтр("ru='Чек не напечатан. В документе расчетов обнаружена валюта, отличная от национальной.'");
	КонецЕсли;
	
	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиДокументаРасчетов(ДокументРасчетов, РеквизитыДокумента);
		
	Если Не ЗначениеЗаполнено(ПризнакСпособаРасчета) Тогда
		Если ТекСтрока.ПризнакАванса Тогда
			
			// Полная предоплата, если валюты и суммы совпадают. Иначе это частичная.
			Если СуммаПлатежа = РеквизитыДокумента.СуммаДокумента Тогда
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
			Иначе
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
			КонецЕсли;
			
		Иначе
			
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
			
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьТоварамиПоДокументу(ДокументРасчетов, ОбщиеПараметры, ПризнакСпособаРасчета, ИмяТабличнойЧасти, НомерСтрокиТовара);
	
КонецПроцедуры

Процедура ДополнитьТоварамиПоДокументу(ДокументОбъект, ОбщиеПараметры, ПризнакСпособаРасчета, ИмяТабличнойЧасти = "Запасы", НомерСтрокиТовара = 0) Экспорт
	
	Если ТипЗнч(ИмяТабличнойЧасти) = Тип("Строка") Тогда
		МассивТабличныхЧастей = Новый Массив();
		МассивТабличныхЧастей.Добавить(ИмяТабличнойЧасти);
	ИначеЕсли ТипЗнч(ИмяТабличнойЧасти) = Тип("Массив") Тогда
		МассивТабличныхЧастей = ИмяТабличнойЧасти;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Ремонт" Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект, "ОписаниеРемонта, СуммаДокумента, СтавкаНДС, СуммаНДС");
		Если СтруктураРеквизитов.СуммаДокумента > 0 Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтруктураРеквизитов.СтавкаНДС);
			СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			ОписаниеРемонта = Строка(СтруктураРеквизитов.ОписаниеРемонта);
			СтрокаПозицииЧека.Наименование = ?(ПустаяСтрока(ОписаниеРемонта), НСтр("ru ='Ремонт'"), ОписаниеРемонта);
			СтрокаПозицииЧека.Количество = 1;
			СтрокаПозицииЧека.Цена = СтруктураРеквизитов.СуммаДокумента + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтруктураРеквизитов.СуммаНДС);
			СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
			СтрокаПозицииЧека.Сумма        = СтрокаПозицииЧека.Цена;
			СтрокаПозицииЧека.НомерСекции  = 1;
			СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
			СтрокаПозицииЧека.СуммаНДС     = СтруктураРеквизитов.СуммаНДС;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
			СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
			СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтрокиТовара;
			НомерСтрокиТовара = НомерСтрокиТовара + 1;
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЕсли;
	Иначе
		Для каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			
			ТаблицаДанных = ДокументОбъект[ТабличнаяЧасть].Выгрузить();
			Если ТаблицаДанных.Колонки.Найти("НоменклатураНабора")<>Неопределено Тогда
				НаборыСервер.ПодготовитьНаборыДляПробитияЧекаККМ(ТаблицаДанных, ДокументОбъект);
			КонецЕсли;
			
			Если ТабличнаяЧасть = "Запасы" И Не ОбщиеПараметры.Свойство("ИсключитьКодыМаркировкиИзФД") Тогда
				ДанныеДляИСМП = ДанныеДляИСМП(ДокументОбъект, ОбщиеПараметры);
			Иначе
				ДанныеДляИСМП = Новый ТаблицаЗначений;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из ТаблицаДанных Цикл
				
				Если ТаблицаДанных.Колонки.Найти("НомерВариантаКП") <> Неопределено И ДокументОбъект.ОсновнойВариантКП <> СтрокаТЧ.НомерВариантаКП Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСтрокДляДобавленияВЧек = Новый Массив;
				МассивСтрокДляДобавленияВЧек.Добавить(СтрокаТЧ);
				
				Если ДанныеДляИСМП.Количество() > 0 Тогда
					СтрокиИСМП = ДанныеДляИСМП.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки));
					Если СтрокиИСМП.Количество() > 0 Тогда
						МассивСтрокДляДобавленияВЧек = СтрокиИСМП;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтрокаДляДобавленияВЧек Из МассивСтрокДляДобавленияВЧек Цикл
				
					СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(СтрокаДляДобавленияВЧек.СтавкаНДС);
					
					СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
					СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
					СтрокаПозицииЧека.Вставить("РезультатРаспределенияШтрихкодов");
					
					Если ТабличнаяЧасть = "ВнеоборотныеАктивы" Тогда
						СтрокаПозицииЧека.Наименование = Строка(СтрокаДляДобавленияВЧек.ВнеоборотныйАктив);
						СтрокаПозицииЧека.Количество = 1;
						СтрокаПозицииЧека.Цена = СтрокаДляДобавленияВЧек.Всего;
						СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаДляДобавленияВЧек.Всего;
						СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
					ИначеЕсли ТабличнаяЧасть = "Расходы" Тогда
						РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.Номенклатура, "НаименованиеПолное,ТипНоменклатуры,
							|ЭтоНабор,ВидМаркировки,АлкогольнаяПродукция,ПодакцизныйТовар,ВидПродукцииИС,ПризнакПредметаРасчета");
						Если ТаблицаДанных.Колонки.Найти("Содержание") <> Неопределено
							И НЕ ПустаяСтрока(СтрокаДляДобавленияВЧек.Содержание) Тогда
							СтрокаПозицииЧека.Наименование = СокрЛП(СтрокаДляДобавленияВЧек.Содержание);
						Иначе
							СтрокаПозицииЧека.Наименование = РеквизитыНоменклатуры.НаименованиеПолное;
						КонецЕсли;
						СтрокаПозицииЧека.Количество = СтрокаДляДобавленияВЧек.Количество;
						СтрокаПозицииЧека.Цена = СтрокаДляДобавленияВЧек.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС / ?(СтрокаДляДобавленияВЧек.Количество = 0, 1, СтрокаДляДобавленияВЧек.Количество)); 
						СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
						СтрокаПозицииЧека.ПризнакПредметаРасчета = ПолучитьПризнакПредметаРасчета(РеквизитыНоменклатуры);
					Иначе
						РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.Номенклатура, "НаименованиеПолное,ТипНоменклатуры,
							|ЭтоНабор,ВидМаркировки,АлкогольнаяПродукция,ПодакцизныйТовар,ВидПродукцииИС, КодМедицинскогоИзделия,ПризнакПредметаРасчета");
						Если ТаблицаДанных.Колонки.Найти("Содержание") <> Неопределено
							И НЕ ПустаяСтрока(СтрокаДляДобавленияВЧек.Содержание) Тогда
							СтрокаПозицииЧека.Наименование = СокрЛП(СтрокаДляДобавленияВЧек.Содержание);
						Иначе
							СтрокаПозицииЧека.Наименование = СтрокаПозицииЧекаНаименование(РеквизитыНоменклатуры, СтрокаДляДобавленияВЧек);
						КонецЕсли;
						Если РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
							СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
						КонецЕсли;
						Если ТабличнаяЧасть = "Работы" Тогда
							СтрокаПозицииЧека.Количество = СтрокаДляДобавленияВЧек.Количество * СтрокаДляДобавленияВЧек.Кратность * СтрокаДляДобавленияВЧек.Коэффициент;
						Иначе
							СтрокаПозицииЧека.Количество = СтрокаДляДобавленияВЧек.Количество;
						КонецЕсли;
						ЦенаСтроки = СтрокаДляДобавленияВЧек.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС / ?(СтрокаПозицииЧека.Количество = 0, 1, СтрокаПозицииЧека.Количество));
						СтрокаПозицииЧека.Цена = Окр(ЦенаСтроки, 2);
						СуммаСкидки = СтрокаПозицииЧека.Цена * СтрокаПозицииЧека.Количество - (СтрокаДляДобавленияВЧек.Сумма + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаДляДобавленияВЧек.СуммаНДС));
						ЦенаСоСкидкамиСтроки = СтрокаПозицииЧека.Цена - СуммаСкидки / ?(СтрокаПозицииЧека.Количество = 0, 1, СтрокаПозицииЧека.Количество);
						СтрокаПозицииЧека.ЦенаСоСкидками = Окр(ЦенаСоСкидкамиСтроки, 2);
						СтрокаПозицииЧека.СуммаСкидок = СуммаСкидки;
						СтрокаПозицииЧека.ПризнакПредметаРасчета = ПолучитьПризнакПредметаРасчета(РеквизитыНоменклатуры);
						СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации = РеквизитыНоменклатуры.КодМедицинскогоИзделия;
						Если ТабличнаяЧасть = "Запасы"
							И ДокументОбъект.Метаданные().ТабличныеЧасти[ТабличнаяЧасть].Реквизиты.Найти("Партия") <> Неопределено
							И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.Партия)
							И СтрокаДляДобавленияВЧек.Партия.Статус <> Перечисления.СтатусыПартий.СобственныеЗапасы Тогда
							СтруктураРеквизитов = Новый Структура();
							СтруктураРеквизитов.Вставить("НаименованиеПолное", "ВладелецПартии.НаименованиеПолное");
							СтруктураРеквизитов.Вставить("ИНН", "ВладелецПартии.ИНН");
							СтруктураРеквизитов.Вставить("ВладелецПартии", "ВладелецПартии");
							РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.Партия, СтруктураРеквизитов);
							СтрокаПозицииЧека.ДанныеПоставщика.Наименование = РеквизитыВладельца.НаименованиеПолное;
							СтрокаПозицииЧека.ДанныеПоставщика.ИНН = РеквизитыВладельца.ИНН;
							Если СтрокаДляДобавленияВЧек.Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии Тогда
								СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
							КонецЕсли;
							Телефон = Справочники.Контрагенты.ПолучитьТелефонКонтрагента(РеквизитыВладельца.ВладелецПартии);
							Телефон = УбратьРазделителиВНомереТелефона(Телефон);
							СтрокаПозицииЧека.ДанныеПоставщика.Телефон = Телефон;
						КонецЕсли;
						
						Если ТабличнаяЧасть = "Запасы"
							И ДокументОбъект.Метаданные().ТабличныеЧасти[ТабличнаяЧасть].Реквизиты.Найти("СтранаПроисхождения") <> Неопределено
							И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.СтранаПроисхождения) Тогда
							РеквизитыСтраныПроисхождения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.СтранаПроисхождения, "Код");
							СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = РеквизитыСтраныПроисхождения.Код;
						КонецЕсли;
						
						Если ТабличнаяЧасть = "Запасы"
							И ДокументОбъект.Метаданные().ТабличныеЧасти[ТабличнаяЧасть].Реквизиты.Найти("НомерГТД") <> Неопределено
							И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.НомерГТД) Тогда
							РеквизитыНомераГТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДляДобавленияВЧек.НомерГТД, "Код");
							СтрокаПозицииЧека.НомерТаможеннойДекларации = РеквизитыНомераГТД.Код;
						КонецЕсли;
						
						Если РеквизитыНоменклатуры.ПодакцизныйТовар
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "Контрагент")
							И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
							ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "ВидКонтрагента");
							
							Если ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо
								ИЛИ ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
								СтрокаПозицииЧека.СуммаАкциза = 0;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(РеквизитыНоменклатуры.ВидПродукцииИС)
							И ДанныеДляИСМП.Количество() > 0 Тогда
							
							СтрокаПозицииЧека.Штрихкод = СтрокаДляДобавленияВЧек.Штрихкод;
							
							ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаДляДобавленияВЧек);
							
							Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДляДобавленияВЧек, "РезультатРаспределенияШтрихкодов")
								И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.РезультатРаспределенияШтрихкодов) Тогда
								
								РезультатРаспределенияШтрихкодов = СтрокаДляДобавленияВЧек.РезультатРаспределенияШтрихкодов;
								
								СтрокаПозицииЧека.РезультатРаспределенияШтрихкодов = СтрокаДляДобавленияВЧек.РезультатРаспределенияШтрихкодов;
								
								ПолныйКодМаркировки = РезультатРаспределенияШтрихкодов.ПолныйКодМаркировки;
								Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
									СтрокаПозицииЧека.ШтрихкодBase64 = ПолныйКодМаркировки;
									СтрокаПозицииЧека.КонтрольнаяМарка = ПолныйКодМаркировки;
								КонецЕсли;
								
								Если РезультатРаспределенияШтрихкодов.ЧастичноеВыбытие Тогда
									Если РеквизитыНоменклатуры.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Пиво Тогда
										СтрокаПозицииЧека.Штрихкод = "";
										СтрокаПозицииЧека.ШтрихкодBase64 = "";
									Иначе
										СтрокаПозицииЧека.ДробноеКоличество.Числитель   = РезультатРаспределенияШтрихкодов.Количество;
										СтрокаПозицииЧека.ДробноеКоличество.Знаменатель = РезультатРаспределенияШтрихкодов.ЕмкостьПотребительскойУпаковки;
										
										Если РезультатРаспределенияШтрихкодов.Количество > 1 Тогда
											
											Упаковка = СтрокаДляДобавленияВЧек.ЕдиницаИзмерения;
											Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
												Упаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДляДобавленияВЧек.Номенклатура, "ЕдиницаИзмерения");
											КонецЕсли;
											
											УпаковкаНаименование = "ед";
											Если ЗначениеЗаполнено(Упаковка) Тогда
												УпаковкаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Наименование");
											КонецЕсли;
											УпаковкаНаименование = УпаковкаНаименование + ".";
											
											Валюта = ДокументОбъект.ВалютаДокумента;
											ЦенаЕдиницы = Окр(СтрокаДляДобавленияВЧек.Цена / РезультатРаспределенияШтрихкодов.Количество, 2);
											
											ОписаниеЧастичногоВыбытия = СтрШаблон(
												НСтр("ru = ' (%1 %2, цена: %3 %4/%5)'"),
												РезультатРаспределенияШтрихкодов.Количество,
												УпаковкаНаименование,
												ЦенаЕдиницы,
												Валюта,
												УпаковкаНаименование);
											
											СтрокаПозицииЧека.Наименование = СтрокаПозицииЧека.Наименование
												+ ОписаниеЧастичногоВыбытия;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					СтрокаПозицииЧека.Сумма        = СтрокаДляДобавленияВЧек.Всего;
					СтрокаПозицииЧека.НомерСекции  = 1;
					СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
					СтрокаПозицииЧека.СуммаНДС     = СтрокаДляДобавленияВЧек.СуммаНДС;
					СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтрокиТовара;
					НомерСтрокиТовара = НомерСтрокиТовара + 1;
					ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// Доставка
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("НоменклатураДоставки") <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.НоменклатураДоставки) И ДокументОбъект.СтоимостьДоставки > 0 Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(ДокументОбъект.СтавкаНДСДоставки);
			СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.Наименование = Строка(ДокументОбъект.НоменклатураДоставки);
			СтрокаПозицииЧека.Количество = 1;
			СтрокаПозицииЧека.Цена = ДокументОбъект.СтоимостьДоставки + ?(ДокументОбъект.СуммаВключаетНДС, 0, ДокументОбъект.СуммаНДСДоставки);
			СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
			СтрокаПозицииЧека.Сумма        = СтрокаПозицииЧека.Цена;
			СтрокаПозицииЧека.НомерСекции  = 1;
			СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
			СтрокаПозицииЧека.СуммаНДС     = ДокументОбъект.СуммаНДСДоставки;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга;
			СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
			СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтрокиТовара;
			НомерСтрокиТовара = НомерСтрокиТовара + 1;
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаДляДобавленияВЧек) Экспорт
	
	ВидПродукцииИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДляДобавленияВЧек.Номенклатура, "ВидПродукцииИС");
	
	Если НЕ (ЗначениеЗаполнено(ВидПродукцииИС) И ЗначениеЗаполнено(СтрокаПозицииЧека.Штрихкод)) Тогда
		Возврат;
	КонецЕсли;
	
	ТипМаркировкиККТ = ИнтеграцияИСКлиентСервер.ТипМаркировкиККТПоВидуПродукции(ВидПродукцииИС);
	Если Не ЗначениеЗаполнено(ТипМаркировкиККТ) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаПозицииЧека.Штрихкод, ВидПродукцииИС);
	Если ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = ТипМаркировкиККТ;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = ДанныеРазбора.СоставКодаМаркировки.СерийныйНомер;
	
КонецПроцедуры

Функция ДанныеДляИСМП(ДокументОбъект, ОбщиеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщиеПараметры = Неопределено Тогда
		ОбщиеПараметры = Новый Структура;
	КонецЕсли;
	
	ПустойРезультат = Новый ТаблицаЗначений;
	ПустойРезультат.Колонки.Добавить("НомерСтроки");
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")
		Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ИмяТЧШтрихкодыУпаковок     = "АкцизныеМарки";
		ИмяКолонкиШтрихкодУпаковки = "АкцизнаяМарка";
	Иначе
		ИмяТЧШтрихкодыУпаковок     = "ШтрихкодыУпаковок";
		ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	КонецЕсли;
	
	ОперацияСДенежнымиСредствами = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ОперацияСДенежнымиСредствами") Тогда
		ОперацияСДенежнымиСредствами = ДокументОбъект.ОперацияСДенежнымиСредствами;
	КонецЕсли;
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции()
		ИЛИ ДокументОбъект.Ссылка.Метаданные().ТабличныеЧасти.Найти(ИмяТЧШтрихкодыУпаковок) = Неопределено
		ИЛИ ОперацияСДенежнымиСредствами
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя")
			И ДокументОбъект[ИмяТЧШтрихкодыУпаковок].Количество() = 0 Тогда
		
		Возврат ПустойРезультат;
		
	КонецЕсли;
	
	ЭтоВозвратПродукцииИСМПБезМарки = Ложь;
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")
		И НЕ ОбщиеПараметры.Свойство("НеПроверятьЗаполнениеАкцизныхМарок")
		Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриходнаяНакладная")
		И ДокументОбъект.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ВозвратОтПокупателя Тогда
		ИнтеграцияИСУНФ.ПроверитьЗаполнениеАкцизныхМарок(ДокументОбъект, ЭтоВозвратПродукцииИСМПБезМарки);
	КонецЕсли;
	
	Если ЭтоВозвратПродукцииИСМПБезМарки Тогда
		ОбщиеПараметры.Вставить("ЭтоВозвратПродукцииИСМПБезМарки");
		Возврат ПустойРезультат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Содержание КАК Содержание,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаЗапасы.НомерГТД КАК НомерГТД,
	|	ТаблицаЗапасы.Количество КАК Количество,
	|	ТаблицаЗапасы.Цена КАК Цена,
	|	ТаблицаЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ТаблицаЗапасы.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ТаблицаЗапасы.Сумма КАК Сумма,
	|	ТаблицаЗапасы.Всего КАК Всего,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаЗапасы.СуммаНДС КАК СуммаНДС,
	|	ТаблицаЗапасы.Штрихкод КАК Штрихкод,
	|	ТаблицаЗапасы.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.КлючСвязи КАК КлючСвязи,
	|	ТаблицаСерии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&ТаблицаСерии КАК ТаблицаСерии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения, 
	|	Запасы.ЕдиницаИзмерения КАК Упаковка,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Содержание КАК Содержание,
	|	Запасы.Партия КАК Партия,
	|	Запасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Запасы.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Серии.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.Количество
	|		ИНАЧЕ Серии.Количество
	|	КОНЕЦ * ВЫБОР
	|		КОГДА СпрЕдиницыИзмерения.Ссылка ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ СпрЕдиницыИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.Количество
	|		ИНАЧЕ Серии.Количество
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	Запасы.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.СуммаАвтоматическойСкидки + Запасы.СуммаСкидкиНаценки + Запасы.СуммаСкидкиОплатыБонусом
	|		ИНАЧЕ (Запасы.СуммаАвтоматическойСкидки + Запасы.СуммаСкидкиНаценки + Запасы.СуммаСкидкиОплатыБонусом) / Запасы.Количество * Серии.Количество
	|	КОНЕЦ КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.Сумма
	|		ИНАЧЕ Запасы.Сумма / Запасы.Количество * Серии.Количество
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.Всего
	|		ИНАЧЕ Запасы.Всего / Запасы.Количество * Серии.Количество
	|	КОНЕЦ КАК Всего,
	|	Запасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Серии.Серия ЕСТЬ NULL
	|			ТОГДА Запасы.СуммаНДС
	|		ИНАЧЕ Запасы.СуммаНДС / Запасы.Количество * Серии.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	Запасы.Штрихкод КАК Штрихкод
	|ИЗ
	|	Запасы КАК Запасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО Запасы.КлючСвязи = Серии.КлючСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Запасы.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СпрЕдиницыИзмерения
	|		ПО Запасы.ЕдиницаИзмерения = СпрЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	СпрНоменклатура.ВидПродукцииИС В (&ВидыПродукцииИСМП)";
	
	ТаблицаЗапасы = ДокументОбъект.Запасы.Выгрузить();
	
	ОпциональныеПоля = Новый Соответствие;
	ОпциональныеПоля.Вставить("Партия", """""");
	ОпциональныеПоля.Вставить("Содержание", """""");
	ОпциональныеПоля.Вставить("СтранаПроисхождения", """""");
	ОпциональныеПоля.Вставить("НомерГТД", """""");
	ОпциональныеПоля.Вставить("СуммаАвтоматическойСкидки", "0");
	ОпциональныеПоля.Вставить("СуммаСкидкиНаценки", "0");
	ОпциональныеПоля.Вставить("СуммаСкидкиОплатыБонусом", "0");
	ОпциональныеПоля.Вставить("Всего", "0");
	ОпциональныеПоля.Вставить("Штрихкод", "ВЫРАЗИТЬ("""" КАК СТРОКА(200))");
	
	ШаблонЗапроса = "%1 КАК %2";
	Для Каждого ОпциональноеПоле Из ОпциональныеПоля Цикл
		Если ТаблицаЗапасы.Колонки.Найти(ОпциональноеПоле.Ключ) = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				СтрШаблон(ШаблонЗапроса, "ТаблицаЗапасы." + ОпциональноеПоле.Ключ, ОпциональноеПоле.Ключ),
				СтрШаблон(ШаблонЗапроса, ОпциональноеПоле.Значение, ОпциональноеПоле.Ключ));
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
	Запрос.УстановитьПараметр("ТаблицаСерии", ДокументОбъект.СерииНоменклатуры.Выгрузить());
	
	ВидыПродукцииИСМП = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина, Истина, Истина);
	Запрос.УстановитьПараметр("ВидыПродукцииИСМП", ВидыПродукцииИСМП);
	
	
	Запасы = Запрос.Выполнить().Выгрузить();
	Запасы.Колонки.Добавить("РезультатРаспределенияШтрихкодов");
	
	ПараметрыУказанияСерий = Документы.ЧекККМ.ПараметрыУказанияСерий(ДокументОбъект);
	//МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	//ПараметрыУказанияСерий = МенеджерОбъекта.ПараметрыУказанияСерий(ДокументОбъект);
	
	ПараметрыРаспределения                        = ШтрихкодированиеИСМП.НовыеПараметрыРаспределенияШтрихкодовУпаковок();
	ПараметрыРаспределения.ДокументСсылка         = ДокументОбъект.Ссылка;
	ПараметрыРаспределения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	ШтрихкодыУпаковок = Новый Массив;
	Для Каждого СтрокаАкцизнойМарки Из ДокументОбъект[ИмяТЧШтрихкодыУпаковок] Цикл
		НовыйЭлемент = ШтрихкодированиеИСМП.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаАкцизнойМарки);
		НовыйЭлемент.ШтрихкодУпаковки = СтрокаАкцизнойМарки[ИмяКолонкиШтрихкодУпаковки];
		
		ШтрихкодыУпаковок.Добавить(НовыйЭлемент);
	КонецЦикла;
	
	ДанныеРаспределения = ШтрихкодированиеИСМП.РаспределениеШтрихкодовУпаковокПоТоварам(
		ПараметрыРаспределения,
		Запасы,
		ШтрихкодыУпаковок);
	
	Если ДанныеРаспределения.ЕстьОшибки Тогда
		ВызватьИсключение СтрСоединить(ДанныеРаспределения.Ошибки, Символы.ПС);
	КонецЕсли;
	
	ТоварыРазобранные = Запасы.СкопироватьКолонки();
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТоварыРазобранные.Колонки, "ШтрихкодУпаковки") Тогда
		ТоварыРазобранные.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	КонецЕсли;
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТоварыРазобранные.Колонки, "КоэффициентПересчетаУпаковки") Тогда
		ТоварыРазобранные.Колонки.Добавить("КоэффициентПересчетаУпаковки");
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Запасы Цикл
		
		РаспределениеПоСтроке = ДанныеРаспределения.РаспределенныеСтроки.Получить(СтрокаТовары);
		
		Если РаспределениеПоСтроке = Неопределено Тогда
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаРаспределения Из РаспределениеПоСтроке Цикл
			
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			
			Если ЗначениеЗаполнено(СтрокаРаспределения.Штрихкод) Тогда
				Если СтрокаРаспределения.ЧастичноеВыбытие
					И СтрокаРаспределения.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
					СтрокаТоварыРазобранные.Количество = СтрокаРаспределения.Количество;
				Иначе
					СтрокаТоварыРазобранные.Количество = 1;
				КонецЕсли;
				Коэффициент = СтрокаРаспределения.Количество;
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			
			Если СтрокаТовары.Количество = СтрокаРаспределения.Количество Тогда
				СуммаСкидки = СтрокаТовары.СуммаСкидки;
				СуммаНДС    = СтрокаТовары.СуммаНДС;
				Сумма       = СтрокаТовары.Сумма;
				Всего       = СтрокаТовары.Всего;
				Цена        = Сумма + СуммаСкидки;
			Иначе
				СуммаСкидки = Окр(СтрокаТовары.СуммаСкидки / СтрокаТовары.Количество * Коэффициент, 2);
				СуммаНДС    = Окр(СтрокаТовары.СуммаНДС / СтрокаТовары.Количество * Коэффициент, 2);
				Сумма       = Окр(СтрокаТовары.Сумма / СтрокаТовары.Количество * Коэффициент, 2);
				Всего       = Окр(СтрокаТовары.Всего / СтрокаТовары.Количество * Коэффициент, 2);
				Цена        = Сумма + СуммаСкидки;
			КонецЕсли;
			
			СтрокаТоварыРазобранные.СуммаСкидки      = СуммаСкидки;
			СтрокаТоварыРазобранные.СуммаНДС         = СуммаНДС;
			СтрокаТоварыРазобранные.Сумма            = Сумма;
			СтрокаТоварыРазобранные.Всего            = Всего;
			СтрокаТоварыРазобранные.Цена             = Цена;
			СтрокаТоварыРазобранные.Штрихкод         = СтрокаРаспределения.Штрихкод;
			СтрокаТоварыРазобранные.ШтрихкодУпаковки = СтрокаРаспределения.ШтрихкодУпаковки;
			СтрокаТоварыРазобранные.РезультатРаспределенияШтрихкодов = СтрокаРаспределения;
			
			СтрокаТовары.Количество  = СтрокаТовары.Количество - СтрокаРаспределения.Количество;
			СтрокаТовары.СуммаСкидки = СтрокаТовары.СуммаСкидки - СтрокаТоварыРазобранные.СуммаСкидки;
			СтрокаТовары.СуммаНДС    = СтрокаТовары.СуммаНДС - СтрокаТоварыРазобранные.СуммаНДС;
			СтрокаТовары.Сумма       = СтрокаТовары.Сумма - СтрокаТоварыРазобранные.Сумма;
			СтрокаТовары.Всего       = СтрокаТовары.Всего - СтрокаТоварыРазобранные.Всего;
			
		КонецЦикла;
		
	КонецЦикла;

	Возврат ТоварыРазобранные;
	
КонецФункции

Функция СуммаСтрокЧека(ОбщиеПараметры) Экспорт
	
	// Подсчет суммы строк чека.
	СуммаСтрокЧека = 0;
	Для каждого ТекСтрока Из ОбщиеПараметры.ПозицииЧека Цикл
		СуммаСтрокЧека = СуммаСтрокЧека + ТекСтрока.Сумма;
	КонецЦикла;
	
	Возврат СуммаСтрокЧека;
	
КонецФункции

Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры) Экспорт
	
	// Возможно автоматическое распределение оплаты.
	// Результат распределения хранится в движениях.
	НужноАнализироватьДвижения = Ложь;
	
	ЭтоЧекККМ = Ложь;
	ЭтоПлатежныйДокумент = Ложь;
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") 
		ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат")Тогда
		ЭтоЧекККМ = Истина;
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходИзКассы")
		Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПоступлениеВКассу")
		Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходСоСчета")
		Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		ЭтоПлатежныйДокумент = Истина;
	КонецЕсли;
	
	Если Не ЭтоЧекККМ И ДокументОбъект.Ссылка.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СпособЗачета") <> Неопределено Тогда
		Для Каждого ТекущаяСтрока Из ДокументОбъект.РасшифровкаПлатежа Цикл
			Если ТекущаяСтрока.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто Тогда
				НужноАнализироватьДвижения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПризнакСпособаРасчетаУстановленВручную = ложь; 
	
	Если НужноАнализироватьДвижения Тогда
		ТаблицаДокумента = ПолучитьТаблицаДокументаПоДвижениям(ДокументОбъект.Ссылка);
	Иначе
		
		Если ЭтоЧекККМ Тогда
			ТаблицаДокумента = ДокументОбъект.Предоплата.Выгрузить(,"Документ, СуммаПлатежа");
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			
			ТаблицаДокумента.Колонки.Добавить("ПризнакАванса", ОписаниеТипов);
			ТаблицаДокумента.Колонки.Добавить("Заказ");
			ТаблицаДокумента.Колонки.Добавить("СчетНаОплату");
			ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
			ТаблицаДокумента.Колонки.Добавить("СуммаНДС");
		Иначе
			Если ЭтоПлатежныйДокумент Тогда
				// Для формирования чека возврата, ПСР может быть установлен в расшифровке платежа
				ПризнакСпособаРасчетаУстановленВручную = Истина;
			КонецЕсли;
			КолонкиТаблицыДокумента = "ПризнакАванса,Документ,Заказ,СчетНаОплату,СуммаПлатежа,СтавкаНДС,СуммаНДС";
			КолонкиТаблицыДокумента = ?(ПризнакСпособаРасчетаУстановленВручную, "ПризнакСпособаРасчета,","") + КолонкиТаблицыДокумента;
			ТаблицаДокумента = ДокументОбъект.РасшифровкаПлатежа.Выгрузить(,КолонкиТаблицыДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТаблицаДокумента Цикл // Все незаполненные документы преобразуются в Неопределено, для того, чтобы можно было свернуть.
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			ТекСтрока.Документ = Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
			ТекСтрока.Заказ = Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СчетНаОплату) Тогда
			ТекСтрока.СчетНаОплату = Неопределено;
		КонецЕсли;
	КонецЦикла;

	// Авансы.
	КолонкиТаблицыДокументаАвансов = "ПризнакАванса,Документ,Заказ,СчетНаОплату,СтавкаНДС";
	КолонкиТаблицыДокументаАвансов = ?(ПризнакСпособаРасчетаУстановленВручную, "ПризнакСпособаРасчета,","") + КолонкиТаблицыДокументаАвансов;
	ТаблицаДокумента.Свернуть(КолонкиТаблицыДокументаАвансов, "СуммаПлатежа,СуммаНДС");
	НомерСтрокиТовара = 0;
	Для каждого ТекСтрока Из ТаблицаДокумента Цикл
		
		Если (ЗначениеЗаполнено(ТекСтрока.Документ)
			И (ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")))
			ИЛИ ЗначениеЗаполнено(ТекСтрока.Заказ)
			ИЛИ ЗначениеЗаполнено(ТекСтрока.СчетНаОплату) Тогда
			ЕстьДокументРасчетов = Истина;
		Иначе
			ЕстьДокументРасчетов = Ложь;
		КонецЕсли;
		
		Если ЕстьДокументРасчетов Тогда
			Продолжить;
		КонецЕсли;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДСДляККТ(ТекСтрока.СтавкаНДС); 
		
		ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		Если ПризнакСпособаРасчетаУстановленВручную И ЗначениеЗаполнено(ТекСтрока.ПризнакСпособаРасчета) Тогда
			ПризнакСпособаРасчета = ТекСтрока.ПризнакСпособаРасчета;
		Иначе
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
		КонецЕсли;
		
		// Заполнение строки позиции чека.
		СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")
			ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Аванс от: '")
				+ ДокументОбъект.Контрагент.НаименованиеПолное;
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Аванс от: '")
				+ ДокументОбъект.ПринятоОт;
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходИзКассы") Тогда
			Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
				ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
				СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выдать аванс: '")
					+ ДокументОбъект.Выдать;
				ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Платеж;
			ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее Тогда
				Если ПустаяСтрока(ДокументОбъект.Основание) Тогда
					СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выплата'");
				Иначе
					СтрокаПозицииЧека.Наименование = ДокументОбъект.Основание;
				КонецЕсли;
				ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Выплата;
			ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
				Если ПустаяСтрока(ДокументОбъект.Основание) Тогда
					СтрокаПозицииЧека.Наименование = НСтр("ru = 'Расход'");
				Иначе
					СтрокаПозицииЧека.Наименование = ДокументОбъект.Основание;
				КонецЕсли;
				ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Расход;
			ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
				СтрокаПозицииЧека.Наименование = ДокументОбъект.ВидНалога.Наименование;
				Если ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховая
					ИЛИ ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительная Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеПенсионноеСтрахованиеИП;
				ИначеЕсли ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ПФРСтраховаяСотрудники
					ИЛИ ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ПФРНакопительнаяСотрудники Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеПенсионноеСтрахование;
				ИначеЕсли ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ТФОМС
					ИЛИ ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ФФОМС Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеМедицинскоеСтрахованиеИП;
				ИначеЕсли ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ФОМССотрудники Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеМедицинскоеСтрахование;
				ИначеЕсли ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ФСССотрудники 
					ИЛИ ДокументОбъект.ВидНалога = Справочники.ВидыНалогов.ФССТравматизмСотрудники Тогда
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ОбязательноеСоциальноеСтрахование;
				Иначе
					ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ИнойПредметРасчета;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
					ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходСоСчета") Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Выдать аванс: '")
				+ ДокументОбъект.Контрагент.НаименованиеПолное;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
			СтрокаПозицииЧека.Наименование = СтрокаПозицииЧека.Наименование 
				+ НСтр("ru = ', Основание: '")
				+ ДокументОбъект.ДокументОснование;
		КонецЕсли;
			
		СтрокаПозицииЧека.Количество   = 1;
		СтрокаПозицииЧека.Цена         = ТекСтрока.СуммаПлатежа;
		СтрокаПозицииЧека.ЦенаСоСкидками = ТекСтрока.СуммаПлатежа;
		СтрокаПозицииЧека.Сумма        = ТекСтрока.СуммаПлатежа;
		СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
		СтрокаПозицииЧека.СуммаНДС     = ТекСтрока.СуммаНДС;
		СтрокаПозицииЧека.НомерСекции  = 1;
		СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = ПризнакПредметаРасчета;
		СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтрокиТовара;
		НомерСтрокиТовара = НомерСтрокиТовара + 1;
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
	МассивОбработанныхДокументов = Новый Массив;
	
	// Долги.
	КолонкиТаблицыДокументаДолгов = "ПризнакАванса,Документ,Заказ,СчетНаОплату";
	КолонкиТаблицыДокументаДолгов = ?(ПризнакСпособаРасчетаУстановленВручную, "ПризнакСпособаРасчета,","") + КолонкиТаблицыДокументаДолгов;
	ТаблицаДокумента.Свернуть(КолонкиТаблицыДокументаДолгов, "СуммаПлатежа");
	Для каждого ТекСтрока Из ТаблицаДокумента Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.Документ)
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(ТекСтрока.Документ) <> Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")Тогда
			ИмяКолонки = "Документ";
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
			ИмяКолонки = "Заказ";
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.СчетНаОплату) Тогда
			ИмяКолонки = "СчетНаОплату";
		Иначе
			ИмяКолонки = "";
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяКолонки) Тогда
			Продолжить;
		Иначе
			ДокументРасчетов = ТекСтрока[ИмяКолонки];
		КонецЕсли;
		
		Если НЕ ЭтоЧекККМ И ЗначениеЗаполнено(ДокументОбъект.ДокументОснование)
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.ПоступлениеНаСчет")
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")
			И ТипЗнч(ДокументОбъект.ДокументОснование) <> Тип("ДокументСсылка.ПлатежноеПоручение")
			И (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю) Тогда
			ДокументРасчетов = ДокументОбъект.ДокументОснование;
		КонецЕсли;
		
		СуммаПлатежа = 0;
		
		Если ЗначениеЗаполнено(ДокументРасчетов) Тогда
			
			Если МассивОбработанныхДокументов.Найти(ДокументРасчетов) = Неопределено Тогда
				МассивОбработанныхДокументов.Добавить(ДокументРасчетов);
			Иначе
				Продолжить;
			КонецЕсли;
			
			// Подсчет общей суммы платежа по документу расчетов, т.к. он может быть расположен в разных строчках табличной части.
			МассивСтрок = ТаблицаДокумента.НайтиСтроки(Новый Структура(ИмяКолонки, ДокументРасчетов));
			Для каждого ТекЭлемент Из МассивСтрок Цикл
				СуммаПлатежа = СуммаПлатежа + ТекЭлемент.СуммаПлатежа;
			КонецЦикла;
			
			// Признак способа расчета хранится в ТЧ Расшифровки
			ПризнакСпособаРасчета = Неопределено;
			Если ПризнакСпособаРасчетаУстановленВручную Тогда
				ПризнакСпособаРасчета = ТекСтрока.ПризнакСпособаРасчета;
				Если Не ЗначениеЗаполнено(ПризнакСпособаРасчета) Тогда
					ПризнакСпособаРасчета = Неопределено;//ПСР будет определен при добавлении строки с товаром
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоПлатежныйДокумент
				И (ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РасходнаяНакладная")
				Или ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриходнаяНакладная")) Тогда
				СтатусДокументооборота = ОбменСКонтрагентами.СтатусДокументооборота(ДокументРасчетов);
				Если Не СтатусДокументооборота.ЭлектронныйДокумент = Неопределено Тогда
					// Коды маркировки передаются посредством ЭДО.
					ОбщиеПараметры.Вставить("ИсключитьКодыМаркировкиИзФД");
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьПозицииЧекаПоДокументуРасчетов(ДокументРасчетов, ОбщиеПараметры, ТекСтрока, СуммаПлатежа, НомерСтрокиТовара, ПризнакСпособаРасчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТоварамиПриОтгрузкеПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры, СуммаПлатежей) Экспорт
	
	НужноАнализироватьДвижения = Ложь;
	Если ДокументОбъект.Ссылка.Метаданные().Реквизиты.Найти("СпособЗачетаПредоплаты") <> Неопределено Тогда
		НужноАнализироватьДвижения = (ДокументОбъект.СпособЗачетаПредоплаты = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто);
	КонецЕсли;
	
	Если НужноАнализироватьДвижения Тогда
		ТаблицаПредоплата = ПолучитьТаблицаДокументаПоДвижениямПриОтгрузке(ДокументОбъект);
	Иначе
		ТаблицаПредоплата = ДокументОбъект.Предоплата.Выгрузить();
	КонецЕсли;
	
	// Добавим колонку оплаты сертификатом, если ее нет в документе
	Если ТаблицаПредоплата.Колонки.Найти("ОплатаСертификатом") = Неопределено Тогда
		ТаблицаПредоплата.Колонки.Добавить("ОплатаСертификатом");
		ТаблицаПредоплата.ЗаполнитьЗначения(Ложь, "ОплатаСертификатом");
	КонецЕсли;
	
	СуммаПлатежей = 0;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		Контрагент = ДокументОбъект.КонтрагентПолучатель;
	Иначе
		Контрагент = ДокументОбъект.Контрагент;
	КонецЕсли;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ВестиРасчетыПоДокументам");
	
	Для каждого ТекСтрока Из ТаблицаПредоплата Цикл
		Если ТекСтрока.ОплатаСертификатом Тогда
			СуммаПлатежей = СуммаПлатежей + ТекСтрока.СуммаПлатежа;
		Иначе
			Если РеквизитыКонтрагента.ВестиРасчетыПоДокументам Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока.Документ, "ВалютаДенежныхСредств") Тогда
					Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Документ, "ВалютаДенежныхСредств");
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока.Документ, "ВалютаДокумента") Тогда
					Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Документ, "ВалютаДокумента");
				КонецЕсли;
				Если Валюта <> Неопределено
					И Валюта <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
					ВызватьИсключение НСтр("ru='Чек не напечатан. В документе расчетов обнаружена валюта, отличная от национальной.'");
				КонецЕсли;
			КонецЕсли;
			СуммаПлатежей = СуммаПлатежей + ТекСтрока.СуммаПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаПлатежей = 0 Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
	ИначеЕсли СуммаПлатежей >= ДокументОбъект.СуммаДокумента Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Иначе
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
	КонецЕсли;
	
	ИмяТабличнойЧасти = ПолучитьИмяТабличнойЧастиДокументаРасчетов(ДокументОбъект, ДокументОбъект); 
	
	ДополнитьТоварамиПоДокументу(ДокументОбъект, ОбщиеПараметры, ПризнакСпособаРасчета, ИмяТабличнойЧасти);
	
КонецПроцедуры

Функция ЗаполнитьОписаниеОплаты(СтрокаОплаты) Экспорт
	
	// Если оплата сертификатом
	Если СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ПодарочныйСертификат") Тогда
		СтрокаОплаты.ОписаниеОплаты = СтрокаОплаты.ПодарочныйСертификат;
		// Если учитываются серии сертификата
		Если ЗначениеЗаполнено(СтрокаОплаты.НомерСертификата) Тогда
			СтрокаОплаты.ОписаниеОплаты = СтрокаОплаты.ОписаниеОплаты + ": " + СтрокаОплаты.НомерСертификата;
		КонецЕсли;
		
	// Если оплата картой
	ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.БанковскаяКарта") 
		ИЛИ СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ВыдачаНаличных") Тогда
		СтрокаШаблона = НСтр("ru = '%1: %2'");
		Параметр1 = СтрокаОплаты.ВидПлатежнойКарты;
		Параметр2 = ?(ЗначениеЗаполнено(СтрокаОплаты.НомерПлатежнойКарты), СтрокаОплаты.НомерПлатежнойКарты, НСтр("ru = '<номер не указан>'"));
		СтрокаОплаты.ОписаниеОплаты = СтрШаблон(СтрокаШаблона, Параметр1, Параметр2);
		
	// Если оплата бонусами
	ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Бонусы") Тогда
		СтрокаОплаты.ОписаниеОплаты = СтрокаОплаты.БонуснаяКарта.Наименование;
		
	// Если оплата СБП
	ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.СБП") Тогда
		
		СтрокаОплаты.ОписаниеОплаты = ИнтеграцияСПлатежнымиСистемамиУНФ.ПредставлениеПлатежнойСистемы(СтрокаОплаты.ИдентификаторПлатежнойСистемы);
		
	// Если оплата кредитом
	ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.Кредит") Тогда
		СтрокаОплаты.ОписаниеОплаты = СтрШаблон(НСтр("ru = '%1 (%2%3)'"),
			СтрокаОплаты.ЭквайринговыйТерминал.Эквайрер,
			СтрокаОплаты.ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ПроцентКомиссии,
			"%");
			
	// Если рассрочка платежа
	ИначеЕсли СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Перечисление.ВидыБезналичныхОплат.ОплатаВРассрочку") Тогда 
		СтрокаОплаты.ОписаниеОплаты = НСтр("ru = 'Рассрочка платежа'");
	КонецЕсли;
	
КонецФункции

// Процедура рассчитывает скидки по документу.
//
Процедура РассчитатьСкидкиНаценкиНаСервере(пФорма, СтруктураПараметры) Экспорт
	

	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(пФорма.Объект, СтруктураПараметры);
	
	ВыводитьСообщенияКассиру = неопределено;
	Если СтруктураПараметры.Свойство("ВыводитьСообщенияКассиру",ВыводитьСообщенияКассиру) И ВыводитьСообщенияКассиру = Истина Тогда
		пФорма.ВывестиСообщения = Ложь;
		Если ПримененныеСкидки.ТаблицаСообщений.Количество() > 0 Тогда
			пФорма.ВывестиСообщения = Истина;
		КонецЕсли;							
	КонецЕсли;
	
	РасчетПодарков = неопределено;
	Если СтруктураПараметры.Свойство("РасчетПодарков",РасчетПодарков) И РасчетПодарков = Истина Тогда
		пФорма.ВыдатьПодаркиНаВыбор = Ложь;
		Если ПримененныеСкидки.Свойство("ТаблицаПодарковНаВыбор") Тогда
			пФорма.ВыдатьПодаркиНаВыбор = Истина;
			пФорма.АдресПодарковНаВыбор = ПоместитьВоВременноеХранилище(ПримененныеСкидки.ТаблицаПодарковНаВыбор, пФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	
	пФорма.АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, пФорма.УникальныйИдентификатор);
	
	пФорма.Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(пФорма.Объект, "Запасы");
	
	Если НЕ пФорма.Объект.СкидкиРассчитаны Тогда
	
		пФорма.Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКартинкуДисконтнойКарты(пФорма) Экспорт
	
	Если ЗначениеЗаполнено(пФорма.Объект.ДисконтнаяКарта) Тогда
		пФорма.Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитанаДисконтнаяКарта;
	Иначе
		пФорма.Команды.СчитатьДисконтнуюКарту.Картинка = БиблиотекаКартинок.СчитатьДисконтнуюКарту;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Получить ИНН кассира
// 
// Возвращаемое значение:
//  Строка - ИНН кассира
//
Функция ПолучитьИННКассира() Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат "";
	КонецЕсли;
	
	ИННКассира = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "ИНН");
	
	Возврат ИННКассира;
	
КонецФункции

// Выполняет поиск чеков с движениями по регистру Запасы по заданной смене
//
// Параметры:
//  ОтчетОРозничныхПродажах	 - Документ.ОтчетОРозничныхПродажах	 - Отчет о розничных продажах по заданной смене
// 
// Возвращаемое значение:
//  Массив - Чеки с движениями 
//
Функция ПроверитьЧекиПослеЗакрытияСмены(ОтчетОРозничныхПродажах) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КассоваяСмена", ОтчетОРозничныхПродажах);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Статус КАК Статус,
	|	ЧекККМ.Дата КАК Дата
	|ПОМЕСТИТЬ ЧекиСДвижениями
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы КАК РегистрЗапасы
	|		ПО (РегистрЗапасы.Регистратор = ЧекККМ.Ссылка)
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = &КассоваяСмена
	|	И НЕ РегистрЗапасы.Регистратор ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМ.Ссылка,
	|	ЧекККМ.Статус,
	|	ЧекККМ.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит),
	|	ЧекККМВозврат.Дата
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы КАК РегистрЗапасы
	|		ПО (РегистрЗапасы.Регистратор = ЧекККМВозврат.Ссылка)
	|ГДЕ
	|	ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
	|	И НЕ РегистрЗапасы.Регистратор ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМВозврат.Ссылка,
	|	ЧекККМВозврат.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Статус КАК Статус,
	|	ЧекККМ.Дата КАК Дата
	|ПОМЕСТИТЬ НезакрытыеЧеки
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = &КассоваяСмена
	|	И ЧекККМ.Проведен
	|	И НЕ ЧекККМ.Архивный
	|	И НЕ ЧекККМ.ДвиженияПоЗапасамУдалять
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ЧекНеПробит),
	|	ЧекККМВозврат.Дата
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
	|	И ЧекККМВозврат.Проведен
	|	И НЕ ЧекККМВозврат.Архивный
	|	И НЕ ЧекККМВозврат.ДвиженияПоЗапасамУдалять
	|	И НЕ ЧекККМВозврат.ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекиСДвижениями.Ссылка,
	|	ЧекиСДвижениями.Статус,
	|	ЧекиСДвижениями.Дата
	|ИЗ
	|	ЧекиСДвижениями КАК ЧекиСДвижениями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НезакрытыеЧеки.Ссылка КАК Ссылка,
	|	НезакрытыеЧеки.Статус КАК Статус,
	|	НезакрытыеЧеки.Дата КАК Дата
	|ИЗ
	|	НезакрытыеЧеки КАК НезакрытыеЧеки
	|
	|СГРУППИРОВАТЬ ПО
	|	НезакрытыеЧеки.Ссылка,
	|	НезакрытыеЧеки.Статус,
	|	НезакрытыеЧеки.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ЧекиСДвижениями = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеЧека = Новый Структура;
		ОписаниеЧека.Вставить("Чек", Выборка.Ссылка);
		ОписаниеЧека.Вставить("Статус", Выборка.Статус);
		ЧекиСДвижениями.Добавить(ОписаниеЧека);
	КонецЦикла;
	
	Возврат ЧекиСДвижениями;
	
КонецФункции

// Заполняет в Чеке ККМ таблицу Предоплата долгами по рассрочке
//
// Параметры:
//    ТабличнаяЧасть - табличная часть для заполнения
//    СуммаДокумента - итоговая сумма документа.
//    СтруктураПараметров - структура передаваемых параметров документа.
//
Процедура ЗаполнитьДолгиПоРассрочке(ТабличнаяЧасть, СуммаДокумента, СтруктураПараметров) Экспорт
	
	Дата = ?(Не ЗначениеЗаполнено(СтруктураПараметров.Дата), КонецДня(ТекущаяДатаСеанса()), КонецДня(СтруктураПараметров.Дата));
	Контрагент = СтруктураПараметров.Контрагент;
	Договор = СтруктураПараметров.Договор;
	Организация = СтруктураПараметров.Организация;
	Заказ = СтруктураПараметров.Заказ;
	
	ТабличнаяЧасть.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаРасчетов,
	|	РасчетыСПокупателямиОстатки.СуммаВалОстаток КАК СуммаПлатежа
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			&ДатаОстатков,
	|			ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ЧекККМ)
	|				И Контрагент = &Контрагент
	|				И Договор = &Договор
	|				И Организация = &Организация
	|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|				И Заказ = &Заказ) КАК РасчетыСПокупателямиОстатки";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	СуммаДокумента = ТабличнаяЧасть.Итог("СуммаРасчетов");
	
КонецПроцедуры

// Проверяет отключена ли печать бумажных чеков на устройстве
// 
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - ссылка на фискальный регистратор
// 
// Возвращаемое значение 
//   Булево - Истина, если печать бумажного чека отключена
// 
Функция НеПечататьБумажныйЧек(ИдентификаторУстройства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассыККМ.НеПечататьБумажныйЧек КАК НеПечататьБумажныйЧек
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ПодключаемоеОборудование = &ИдентификаторУстройства");
	Запрос.УстановитьПараметр("ИдентификаторУстройства", ИдентификаторУстройства);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НеПечататьБумажныйЧек;
	
КонецФункции

// Проверяет, заполнено ли какое-то из полей контактной информации
// для отправки электронного чека
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - проверяемый документ
// 
// Возвращаемое значение - Булево - Истина, если заполнено хотя бы одно из полей
// 
Функция КИДляОтправкиЧекаЗаполнена(Объект) Экспорт
	
	Возврат ЗначениеЗаполнено(Объект.Телефон) Или ЗначениеЗаполнено(Объект.АдресЭП);
	
КонецФункции

// Формирует списание подарков для документа продажи, где рассчитана выдача подарков, не включаемых в состав документа.
// Если передан отчет о розничных продажах, анализируются чеки, входящие в него
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОРозничныхПродажах, ДокументСсылка.РасходнаяНакладная - проверяемый документ
//  СчетЗатратПодарка - ПланСчетовСсылка.Управленческий - счет затрат на случай когда скидка подарка не заполнена
//                                                        (вариант загрузки)
// 
// Возвращаемое значение:
//  Массив - Список сформированных документов СписаниеЗапасов.
//
Функция СписаниеПодарков(ДокументСсылка, СчетЗатратПодарка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПоПодаркам = Новый Запрос;
	ЗапросПоПодаркам.Текст = ТекстЗапросаПоПодаркам();
	ЗапросПоПодаркам.УстановитьПараметр("ДокументСсылка" , 		ДокументСсылка);
	ЗапросПоПодаркам.УстановитьПараметр("СчетЗатратПодарка" , 	СчетЗатратПодарка);
	
	ЗапросПоСериямПодарков = Новый Запрос;
	ЗапросПоСериямПодарков.Текст = ТекстЗапросаПоСериямПодарков();
	ЗапросПоСериямПодарков.УстановитьПараметр("ДокументСсылка" , ДокументСсылка);
	
	РезультатЗапросаПоПодаркам        = ЗапросПоПодаркам.Выполнить();
	
	Если РезультатЗапросаПоПодаркам.Пустой() Тогда
		РезультатЗапросаПоСериямПодарков = Неопределено;
	Иначе
		РезультатЗапросаПоСериямПодарков = ЗапросПоСериямПодарков.Выполнить();
	КонецЕсли;
	
	МассивСписанийЗапасов = Новый Массив;
	ВыборкаПоПодаркамСклад = РезультатЗапросаПоПодаркам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЕстьСерииПодарков = Ложь;
	Если РезультатЗапросаПоСериямПодарков <> Неопределено Тогда
		ТаблицаСерийПодарков = РезультатЗапросаПоСериямПодарков.Выгрузить();
		Если ТаблицаСерийПодарков.Количество() > 0 Тогда
			ЕстьСерииПодарков = Истина;
			СтруктураПоискаСерий = Новый Структура;
			СтруктураПоискаСерий.Вставить("Документ", Неопределено);
			СтруктураПоискаСерий.Вставить("КлючСвязи", 0);
			ТаблицаСерийПодарков.Индексы.Добавить("Документ, КлючСвязи");
		КонецЕсли;
	КонецЕсли;
	
	Пока ВыборкаПоПодаркамСклад.Следующий() Цикл
		ВыборкаПоПодаркамСчетЗатрат = ВыборкаПоПодаркамСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПодаркамСчетЗатрат.Следующий() Цикл
			ВыборкаПоПодаркамЯчейка = ВыборкаПоПодаркамСчетЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоПодаркамЯчейка.Следующий() Цикл
			
				СписаниеЗапасов = СоздатьСписаниеЗапасов(ДокументСсылка, ВыборкаПоПодаркамЯчейка.СтруктурнаяЕдиница, ВыборкаПоПодаркамЯчейка.Ячейка, ВыборкаПоПодаркамЯчейка.СчетЗатратПодарка);
				
				ВыборкаПоПодаркамНоменклатура = ВыборкаПоПодаркамЯчейка.Выбрать();
				Пока ВыборкаПоПодаркамНоменклатура.Следующий() Цикл
					Если ВыборкаПоПодаркамНоменклатура.Количество()>0 Тогда
						СтрокаСписанияЗапасов = СписаниеЗапасов.Запасы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСписанияЗапасов, ВыборкаПоПодаркамНоменклатура);
						ТабличныеЧастиУНФКлиентСервер.ЗаполнитьКлючСвязи(СписаниеЗапасов.Запасы, СтрокаСписанияЗапасов, "КлючСвязи");
					
						
						ПараметрыПодбораСерий = Новый Структура;
						
						ПараметрыПодбораСерий.Вставить("Номенклатура", ВыборкаПоПодаркамНоменклатура.Номенклатура);
						ПараметрыПодбораСерий.Вставить("Организация", СписаниеЗапасов.Организация);
						ПараметрыПодбораСерий.Вставить("СтруктурнаяЕдиница", СписаниеЗапасов.СтруктурнаяЕдиница);
						ПараметрыПодбораСерий.Вставить("ВидОперации", Неопределено);
						ПараметрыПодбораСерий.Вставить("ТипДокумента", ТипЗнч(СписаниеЗапасов.Ссылка));
						
						СтруктураДанных = Новый Структура("ПараметрыПодбораСтатуса", ПараметрыПодбораСерий);
						СтатусУказанияСерий = СерииНоменклатурыУНФ.СтатусСерийНоменклатурыПриИзменении(СтруктураДанных);
						
						Если СтатусУказанияСерий > 0
							И СтрокаСписанияЗапасов.Количество > 0
							И ЕстьСерииПодарков Тогда
							СтруктураПоискаСерий.Документ = ВыборкаПоПодаркамНоменклатура.ИсходныйДокумент;
							СтруктураПоискаСерий.КлючСвязи = ВыборкаПоПодаркамНоменклатура.ИсходныйКлючСвязи;
							СтрокиСерий = ТаблицаСерийПодарков.НайтиСтроки(СтруктураПоискаСерий);
							ОсталосьСерий = СтрокаСписанияЗапасов.Количество;
							Разделитель = "";
							Для Каждого СтрокаСерии Из СтрокиСерий Цикл
								Если СтрокаСерии.Количество > 0 Тогда
									НоваяСтрокаСерии = СписаниеЗапасов.СерииНоменклатуры.Добавить();
									НоваяСтрокаСерии.Серия = СтрокаСерии.Серия;
									Если ОсталосьСерий > СтрокаСерии.Количество Тогда
										НоваяСтрокаСерии.Количество = СтрокаСерии.Количество;
										ОсталосьСерий = ОсталосьСерий - СтрокаСерии.Количество;
										СтрокаСерии.Количество = 0;
									ИначеЕсли ОсталосьСерий = СтрокаСерии.Количество Тогда
										НоваяСтрокаСерии.Количество = СтрокаСерии.Количество;
										ОсталосьСерий = 0;
										СтрокаСерии.Количество = 0;
									Иначе
										НоваяСтрокаСерии.Количество = ОсталосьСерий;
										СтрокаСерии.Количество = СтрокаСерии.Количество - ОсталосьСерий;
										ОсталосьСерий = 0;
									КонецЕсли;
									НоваяСтрокаСерии.КлючСвязи = СтрокаСписанияЗапасов.КлючСвязи;
									СтрокаСписанияЗапасов.СерииНоменклатуры = СтрокаСписанияЗапасов.СерииНоменклатуры + Разделитель + НоваяСтрокаСерии.Серия;
									Разделитель = "; ";
								КонецЕсли;
								Если ОсталосьСерий <= 0 Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Если ЗначениеЗаполнено(ВыборкаПоПодаркамНоменклатура.ШтрихкодУпаковки) Тогда 
							СтрокаМарки = СписаниеЗапасов.АкцизныеМарки.Добавить();
							СтрокаМарки.КлючСвязи = СтрокаСписанияЗапасов.КлючСвязи;
							СтрокаМарки.АкцизнаяМарка = ВыборкаПоПодаркамНоменклатура.ШтрихкодУпаковки;
							СтрокаМарки.Справка2 = ВыборкаПоПодаркамНоменклатура.Справка2;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
				Если СписаниеЗапасов.Запасы.Количество() > 0 Тогда
					Попытка
						СписаниеЗапасов.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						СписаниеЗапасов.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;
					
					МассивСписанийЗапасов.Добавить(СписаниеЗапасов.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивСписанийЗапасов;			
	
КонецФункции

Функция ТекстЗапросаПоПодаркам()	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧПодарки.Номенклатура КАК Номенклатура,
	|	ТЧПодарки.Характеристика КАК Характеристика,
	|	СУММА(ТЧПодарки.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА ЧекККМ.СтруктурнаяЕдиница
	|		ИНАЧЕ ТЧПодарки.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА ЧекККМ.Ячейка
	|		ИНАЧЕ ТЧПодарки.Ячейка
	|	КОНЕЦ КАК Ячейка,
	|	ТЧПодарки.Цена КАК Цена,
	|	СУММА(ТЧПодарки.Сумма) КАК Сумма,
	|	ТЧПодарки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТЧПодарки.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТЧПодарки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ТЧПодарки.Справка2 КАК Справка2,
	|	ЕСТЬNULL(ТЧПодарки.СкидкаНаценка.СчетЗатратПодарка, &СчетЗатратПодарка) КАК СчетЗатратПодарка,
	|	ТЧПодарки.Ссылка КАК ИсходныйДокумент,
	|	ТЧПодарки.КлючСвязи КАК ИсходныйКлючСвязи
	|ИЗ
	|	Документ.ЧекККМ.Подарки КАК ТЧПодарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
	|		ПО (ЧекККМ.Ссылка = ТЧПодарки.Ссылка)
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = &ДокументСсылка
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.НомерЧекаККМ > 0
	|	И НЕ ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ЧекНеПробит)
	|	И НЕ ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ТоварЗарезервирован)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧПодарки.Номенклатура,
	|	ТЧПодарки.Характеристика,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА ЧекККМ.СтруктурнаяЕдиница
	|		ИНАЧЕ ТЧПодарки.СтруктурнаяЕдиница
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА ЧекККМ.Ячейка
	|		ИНАЧЕ ТЧПодарки.Ячейка
	|	КОНЕЦ,
	|	ТЧПодарки.Цена,
	|	ТЧПодарки.ЕдиницаИзмерения,
	|	ТЧПодарки.СтатусУказанияСерий,
	|	ТЧПодарки.ШтрихкодУпаковки,
	|	ТЧПодарки.Справка2,
	|	ЕСТЬNULL(ТЧПодарки.СкидкаНаценка.СчетЗатратПодарка, &СчетЗатратПодарка),
	|	ТЧПодарки.Ссылка,
	|	ТЧПодарки.КлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТЧПодарки.Номенклатура,
	|	ТЧПодарки.Характеристика,
	|	СУММА(ТЧПодарки.Количество),
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА РасходнаяНакладная.СтруктурнаяЕдиница
	|		ИНАЧЕ ТЧПодарки.СтруктурнаяЕдиница
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА РасходнаяНакладная.Ячейка
	|		ИНАЧЕ ТЧПодарки.Ячейка
	|	КОНЕЦ,
	|	ТЧПодарки.Цена,
	|	СУММА(ТЧПодарки.Сумма),
	|	ТЧПодарки.ЕдиницаИзмерения,
	|	ТЧПодарки.СтатусУказанияСерий,
	|	ТЧПодарки.ШтрихкодУпаковки,
	|	ТЧПодарки.Справка2,
	|	ТЧПодарки.СкидкаНаценка.СчетЗатратПодарка,
	|	ТЧПодарки.Ссылка,
	|	ТЧПодарки.КлючСвязи
	|ИЗ
	|	Документ.РасходнаяНакладная.Подарки КАК ТЧПодарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ПО (РасходнаяНакладная.Ссылка = ТЧПодарки.Ссылка)
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ДокументСсылка
	|	И РасходнаяНакладная.Проведен
	|	И НЕ РасходнаяНакладная.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧПодарки.Номенклатура,
	|	ТЧПодарки.Характеристика,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА РасходнаяНакладная.СтруктурнаяЕдиница
	|		ИНАЧЕ ТЧПодарки.СтруктурнаяЕдиница
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ПоложениеСклада = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА РасходнаяНакладная.Ячейка
	|		ИНАЧЕ ТЧПодарки.Ячейка
	|	КОНЕЦ,
	|	ТЧПодарки.Цена,
	|	ТЧПодарки.ЕдиницаИзмерения,
	|	ТЧПодарки.СтатусУказанияСерий,
	|	ТЧПодарки.ШтрихкодУпаковки,
	|	ТЧПодарки.Справка2,
	|	ТЧПодарки.СкидкаНаценка.СчетЗатратПодарка,
	|	ТЧПодарки.Ссылка,
	|	ТЧПодарки.КлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТЧПодарки.Номенклатура,
	|	ТЧПодарки.Характеристика,
	|	СУММА(ТЧПодарки.Количество),
	|	ТЧПодарки.СтруктурнаяЕдиница,
	|	ТЧПодарки.Ячейка,
	|	ТЧПодарки.Цена,
	|	СУММА(ТЧПодарки.Сумма),
	|	ТЧПодарки.ЕдиницаИзмерения,
	|	ТЧПодарки.СтатусУказанияСерий,
	|	ТЧПодарки.ШтрихкодУпаковки,
	|	ТЧПодарки.Справка2,
	|	ТЧПодарки.СкидкаНаценка.СчетЗатратПодарка,
	|	ТЧПодарки.Ссылка,
	|	ТЧПодарки.КлючСвязи
	|ИЗ
	|	Документ.АктВыполненныхРабот.Подарки КАК ТЧПодарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот КАК Документ
	|		ПО (Документ.Ссылка = ТЧПодарки.Ссылка)
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧПодарки.Номенклатура,
	|	ТЧПодарки.Характеристика,
	|	ТЧПодарки.СтруктурнаяЕдиница,
	|	ТЧПодарки.Ячейка,
	|	ТЧПодарки.Цена,
	|	ТЧПодарки.ЕдиницаИзмерения,
	|	ТЧПодарки.СтатусУказанияСерий,
	|	ТЧПодарки.ШтрихкодУпаковки,
	|	ТЧПодарки.Справка2,
	|	ТЧПодарки.СкидкаНаценка.СчетЗатратПодарка,
	|	ТЧПодарки.Ссылка,
	|	ТЧПодарки.КлючСвязи
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТЧПодарки.Количество) <> 0
	|ИТОГИ ПО
	|	СчетЗатратПодарка,
	|	СтруктурнаяЕдиница,
	|	Ячейка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоСериямПодарков()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаПродаж
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = &ДокументСсылка
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.Ссылка.НомерЧекаККМ > 0
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|	И НЕ ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ЧекНеПробит)
	|	И НЕ ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ТоварЗарезервирован)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ДокументСсылка
	|	И РасходнаяНакладная.Проведен
	|	И НЕ РасходнаяНакладная.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.Ссылка КАК Документ,
	|	ТаблицаСерий.КлючСвязи КАК КлючСвязи,
	|	ТаблицаСерий.Серия КАК Серия,
	|	СУММА(ТаблицаСерий.Количество) КАК Количество
	|ИЗ
	|	Документ.ЧекККМ.СерииПодарков КАК ТаблицаСерий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПродаж КАК ТаблицаПродаж
	|		ПО ТаблицаСерий.Ссылка = ТаблицаПродаж.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерий.Ссылка,
	|	ТаблицаСерий.КлючСвязи,
	|	ТаблицаСерий.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСерий.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерий.Ссылка,
	|	ТаблицаСерий.КлючСвязи,
	|	ТаблицаСерий.Серия,
	|	СУММА(ТаблицаСерий.Количество)
	|ИЗ
	|	Документ.РасходнаяНакладная.СерииПодарков КАК ТаблицаСерий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПродаж КАК ТаблицаПродаж
	|		ПО ТаблицаСерий.Ссылка = ТаблицаПродаж.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерий.Ссылка,
	|	ТаблицаСерий.КлючСвязи,
	|	ТаблицаСерий.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСерий.Количество) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПродаж";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СоздатьСписаниеЗапасов(ДокументСсылка, Знач СтруктурнаяЕдиница, Знач Ячейка = Неопределено, Знач Корреспонденция = Неопределено)

	Если Ячейка = Неопределено Тогда
		Ячейка = Справочники.Ячейки.ПустаяСсылка();
	КонецЕсли;

	ТекущаяДата   = ТекущаяДатаСеанса();
	ДатаДокумента = КонецДня(ТекущаяДата);
	
	СписаниеТоваров = Документы.СписаниеЗапасов.СоздатьДокумент();
	СписаниеТоваров.Дата                  = ДатаДокумента;
	СписаниеТоваров.Ячейка                = Ячейка;
	СписаниеТоваров.СтруктурнаяЕдиница    = СтруктурнаяЕдиница;
	СписаниеТоваров.Автор         		  = Пользователи.ТекущийПользователь();
	СписаниеТоваров.Организация           = ДокументСсылка.Организация;
	СписаниеТоваров.ДокументОснование     = ДокументСсылка;
	СписаниеТоваров.Корреспонденция 	  = Корреспонденция;
	
	Возврат СписаниеТоваров;

КонецФункции

// Выполняет поиск пробитых чеков без фискального номера
//
// Параметры:
//  ОтчетОРозничныхПродажах	 - Документ.ОтчетОРозничныхПродажах	 - Отчет о розничных продажах по заданной смене
// 
// Возвращаемое значение:
//  Массив - Чеки без фискального номера
//
Функция ЧекиБезФискальногоНомераПередЗакрытиемСмены(ОтчетОРозничныхПродажах) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КассоваяСмена", ОтчетОРозничныхПродажах);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Статус КАК Статус,
	|	ЧекККМ.Дата КАК Дата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = &КассоваяСмена
	|	И ЧекККМ.Проведен
	|	И НЕ ЧекККМ.Архивный
	|	И НЕ ЧекККМ.ДвиженияПоЗапасамУдалять
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМ.НомерЧекаККМ = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ЧекиБезФискальногоНомера = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеЧека = Новый Структура;
		ОписаниеЧека.Вставить("Чек", Выборка.Ссылка);
		ОписаниеЧека.Вставить("Статус", Выборка.Статус);
		ЧекиБезФискальногоНомера.Добавить(ОписаниеЧека);
	КонецЦикла;
	
	Возврат ЧекиБезФискальногоНомера;
	
КонецФункции
// Выполняет поиск непробитых чеков по заданной смене
//
// Параметры:
//  ОтчетОРозничныхПродажах	 - Документ.ОтчетОРозничныхПродажах	 - Отчет о розничных продажах по заданной смене
// 
// Возвращаемое значение:
//  Массив - Непробитые чеки
//
Функция НепробитыеЧекиПередЗакрытиемСмены(ОтчетОРозничныхПродажах) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КассоваяСмена", ОтчетОРозничныхПродажах);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Статус КАК Статус,
	|	ЧекККМ.Дата КАК Дата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = &КассоваяСмена
	|	И ЧекККМ.Проведен
	|	И НЕ ЧекККМ.Архивный
	|	И НЕ ЧекККМ.ДвиженияПоЗапасамУдалять
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|	И ЧекККМ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ЧекНеПробит),
	|	ЧекККМВозврат.Дата
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
	|	И ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.НомерЧекаККМ = 0
	|	И НЕ ЧекККМВозврат.Архивный
	|	И НЕ ЧекККМВозврат.ДвиженияПоЗапасамУдалять
	|	И НЕ ЧекККМВозврат.ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Статус КАК Статус,
	|	ЧекККМ.Дата КАК Дата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассоваяСмена = &КассоваяСмена
	|	И НЕ ЧекККМ.Проведен
	|	И НЕ ЧекККМ.ПометкаУдаления
	|	И НЕ ЧекККМ.Архивный
	|	И НЕ ЧекККМ.ДвиженияПоЗапасамУдалять
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	НепробитыеЧеки = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеЧека = Новый Структура;
		ОписаниеЧека.Вставить("Чек", Выборка.Ссылка);
		ОписаниеЧека.Вставить("Статус", Выборка.Статус);
		НепробитыеЧеки.Добавить(ОписаниеЧека);
	КонецЦикла;
	
	Возврат НепробитыеЧеки;
	
КонецФункции

// Формирует структуру данных для передачи в БПО и последующей печати чека
// Параметры:
//  Ссылка - ДокументСсылка.РасходнаяНакладная -  ссылка на документ, который необходимо распечатать
//  ИдентификаторУстройстваФР = СправочникСсылка.ПодключаемоеОборудовани - ККТ, на которой будет напечатан чек
// 
// Возвращаемое значение:
//  Структура - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека()
// 
Функция ПолучитьДанныеДляФискализации(Ссылка, ИдентификаторУстройстваФР = Неопределено) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	
	ЕстьОшибкиГОСИС = Ложь;
	ПроверитьЗаполнениеАкцизныхМарок(Объект, ЕстьОшибкиГОСИС);
	Если ЕстьОшибкиГОСИС Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	СуммаСтрок = 0;
	ДополнитьТоварами(Объект, ОбщиеПараметры, СуммаСтрок);
	
	// Общие параметры чека
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Тогда
		КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ИдентификаторУстройстваФР);
		Если Не ЗначениеЗаполнено(КассаККМ) Тогда
			ТекстСообщения = НСтр("ru = 'Не найдена касса ККМ соответствующая устройству %устройство%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%устройство%", ИдентификаторУстройстваФР);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		Если Не КассаККМ.Владелец = Объект.Организация Тогда
			ТекстСообщения = НСтр("ru = 'Печать чека невозможна: %устройство% принадлежит организации ""%организациякассы%"". 
										|Ожидается ККТ, принадлежащая организации документа: ""%организациядокумента%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%устройство%", ИдентификаторУстройстваФР);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%организациякассы%", КассаККМ.Владелец);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%организациядокумента%", Объект.Организация);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		ЭлектронныйЧек = КассаККМ.НеПечататьБумажныйЧек;
		Если ЭлектронныйЧек И Не РозничныеПродажиСервер.КИДляОтправкиЧекаЗаполнена(Объект) Тогда
			ТекстСообщения = НСтр("ru = 'Для выбранного устройства отключена печать бумажного чека.
										|Необходимо указать телефон, либо адрес электронной почты на странице ""Дополнительно""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		ОбщиеПараметры.Электронно = ЭлектронныйЧек;
	КонецЕсли;
	
	ОписаниеРеквизитов = Новый Структура;
	ОписаниеРеквизитов.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	ОписаниеРеквизитов.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С");
	ОписаниеРеквизитов.Вставить("СерийныйНомер");
	ОписаниеРеквизитов.Вставить("Код");
	ОписаниеРеквизитов.Вставить("ПодключаемоеОборудование");
	ОписаниеРеквизитов.Вставить("СтруктурнаяЕдиница");
	ОписаниеРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля",
		"ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	ОписаниеРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля",
		"ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	ОписаниеРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, ОписаниеРеквизитов);
	Иначе
		РеквизитыКассыККМ = ОписаниеРеквизитов;
	КонецЕсли;
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор, Объект.ПодписьКассира);
	
	Если ЭтоОбъектСОпределениемТипаРасчета(Объект) Тогда
		ОбщиеПараметры.ТипРасчета = Объект.ТипРасчетаДляФискализации();
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось определить тип расчета документа'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если ЗначениеЗаполнено(КассаККМ) И РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = "+7" + РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Объект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		Если ЗначениеЗаполнено(КассаККМ) И РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = Объект.АдресЭП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СведенияОКонтрагенте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "НаименованиеПолное,ИНН,ВидКонтрагента");
		Если СведенияОКонтрагенте.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо 
			ИЛИ ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН) Тогда
			ОбщиеПараметры.Получатель    = СведенияОКонтрагенте.НаименованиеПолное;
			ОбщиеПараметры.ПолучательИНН = СведенияОКонтрагенте.ИНН;
		КонецЕсли;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = Ссылка;
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыКассыККМ.СтруктурнаяЕдиница;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.КассаККМ = КассаККМ;
	ОбщиеПараметры.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.Организация = Объект.Организация;
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = 1;
	
	АдресМагазина = ПечатьДокументовУНФ.КонтактнаяИнформация(Объект.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(Объект.Организация);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		Объект.Организация,
		,
		Объект.Дата,
		Объект.СпециальныйНалоговыйРежим);
		
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОплату(Объект, ОбщиеПараметры, СуммаСтрок);
	
	ДобавитьВнереализационнуюПрибыльПоСертификатам(Объект, ОбщиеПараметры);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицаДокументаПоДвижениям(пДокументОбъектСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПризнакАванса,
		|	РасчетыСПокупателями.Документ КАК Документ,
		|	РасчетыСПокупателями.Заказ КАК Заказ,
		|	ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка) КАК СчетНаОплату,
		|	РасчетыСПокупателями.СуммаПлатежа КАК СуммаПлатежа,
		|	РасчетыСПокупателями.СтавкаНДС КАК СтавкаНДС,
		|	РасчетыСПокупателями.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	РасчетыСПоставщиками.Документ,
		|	РасчетыСПоставщиками.Заказ,
		|	ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка),
		|	РасчетыСПоставщиками.СуммаПлатежа,
		|	РасчетыСПоставщиками.СтавкаНДС,
		|	РасчетыСПоставщиками.СуммаНДС
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", пДокументОбъектСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицаДокументаПоДвижениямПриОтгрузке(пДокументОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателями.Документ КАК Документ,
		|	РасчетыСПокупателями.СуммаПлатежа КАК СуммаПлатежа,
		|	РасчетыСПокупателями.ОплатаСертификатом КАК ОплатаСертификатом
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Регистратор = &Регистратор
		|	И РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.Документ,
		|	РасчетыСПоставщиками.СуммаПлатежа,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Регистратор = &Регистратор
		|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)";
	
	Запрос.УстановитьПараметр("Регистратор", пДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция СтрокаПозицииЧекаНаименование(Знач РеквизитыНоменклатуры, Знач СтрокаТЧ)
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
		Возврат СтрШаблон("%1", РеквизитыНоменклатуры.НаименованиеПолное);
	КонецЕсли;
	
	НаименованиеХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Характеристика, "НаименованиеДляПечати");
	Если ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда
		Возврат СтрШаблон("%1 (%2)", РеквизитыНоменклатуры.НаименованиеПолное, НаименованиеХарактеристики);
	КонецЕсли;
	
	Возврат СтрШаблон("%1 (%2)", РеквизитыНоменклатуры.НаименованиеПолное, СтрокаТЧ.Характеристика);
	
КонецФункции

Функция ПолучитьИмяТабличнойЧастиДокументаРасчетов(ДокументРасчетов, РеквизитыДокумента)
	
	Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		ИмяТабличнойЧасти = "РаботыИУслуги";
	ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПередачаВА")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.ПередачаВА") Тогда
		ИмяТабличнойЧасти = "ВнеоборотныеАктивы";
	ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриходнаяНакладная")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		ИмяТабличнойЧасти = Новый Массив();
		ИмяТабличнойЧасти.Добавить("Запасы");
		ИмяТабличнойЧасти.Добавить("Расходы");
	ИначеЕсли (ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.ЗаказПокупателя"))
		И РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ИмяТабличнойЧасти = Новый Массив();
		ИмяТабличнойЧасти.Добавить("Запасы");
		ИмяТабличнойЧасти.Добавить("Работы");
	ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриемИПередачаВРемонт")
		ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументОбъект.ПриемИПередачаВРемонт") Тогда
		ИмяТабличнойЧасти = "Ремонт";
	Иначе
		ИмяТабличнойЧасти = "Запасы";
	КонецЕсли;
	
	Возврат ИмяТабличнойЧасти;
	
КонецФункции

// Функция возвращает пустую структуру состояния кассовой смены.
//
Функция ПолучитьСтруктуруОписанияКассовойСмены()
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	
	// Описание реквизитов кассовой смены.
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("СтруктурнаяЕдиница");
	СостояниеКассовойСмены.Вставить("СтруктурнаяЕдиницаПредставление");
	СостояниеКассовойСмены.Вставить("ВалютаДокумента");
	СостояниеКассовойСмены.Вставить("ВалютаДокументаПредставление");
	СостояниеКассовойСмены.Вставить("ОтчетОРозничныхПродажах");
	СостояниеКассовойСмены.Вставить("ВидЦен");
	СостояниеКассовойСмены.Вставить("Подразделение");
	СостояниеКассовойСмены.Вставить("СуммаВключаетНДС");
	СостояниеКассовойСмены.Вставить("НДСВключатьВСтоимость");
	СостояниеКассовойСмены.Вставить("НалогообложениеНДС");
	СостояниеКассовойСмены.Вставить("Ответственный");
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции

Функция ЭтоОбъектСОпределениемТипаРасчета(Объект)
	
	Результат = Ложь;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Тип("ДокументОбъект.АктВыполненныхРабот"));
	МассивОбъектов.Добавить(Тип("ДокументОбъект.ЗаказПокупателя"));
	МассивОбъектов.Добавить(Тип("ДокументОбъект.ПередачаВА"));
	МассивОбъектов.Добавить(Тип("ДокументОбъект.РасходнаяНакладная"));
	МассивОбъектов.Добавить(Тип("ДокументОбъект.ПриходнаяНакладная"));
	МассивОбъектов.Добавить(Тип("ДокументОбъект.ОперацияПоПлатежнымКартам"));
	МассивОбъектов.Добавить(Тип("ДокументОбъект.ПоступлениеНаСчет"));
	МассивОбъектов.Добавить(Тип("ДокументОбъект.РасходСоСчета"));
	МассивОбъектов.Добавить(Тип("ДокументОбъект.ПоступлениеВКассу"));
	МассивОбъектов.Добавить(Тип("ДокументОбъект.РасходИзКассы"));
	
	Если МассивОбъектов.Найти(ТипЗнч(Объект)) <> Неопределено Тогда
		Результат =  Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьТоварами(Объект, ОбщиеПараметры, СуммаСтрок)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РасходнаяНакладная")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.АктВыполненныхРабот")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПередачаВА")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		
		ДополнитьТоварамиПриОтгрузкеПараметрыПриПробитииЧека(Объект, ОбщиеПараметры, СуммаСтрок);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОперацияПоПлатежнымКартам")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеВКассу")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РасходИзКассы")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РасходСоСчета") Тогда
		
		ДополнитьТоварамиПараметрыПриПробитииЧека(Объект, ОбщиеПараметры);
		СуммаСтрок = СуммаСтрокЧека(ОбщиеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОплату(Объект, ОбщиеПараметры, СуммаСтрок)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РасходнаяНакладная")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.АктВыполненныхРабот")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПередачаВА")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		
		Если СуммаСтрок = 0 Тогда
			СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), Объект.СуммаДокумента);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		ИначеЕсли СуммаСтрок >= Объект.СуммаДокумента Тогда
			СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Предоплата, НСтр("ru = 'Зачет аванса'"), Объект.СуммаДокумента);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		Иначе
			СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Предоплата, НСтр("ru = 'Зачет аванса'"), СуммаСтрок);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			РазницаСумм = Объект.СуммаДокумента - СуммаСтрок;
			Если РазницаСумм > 0 Тогда
				СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), РазницаСумм);
				ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОперацияПоПлатежнымКартам")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеВКассу")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РасходИзКассы")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РасходСоСчета") Тогда
		
		ОписаниеОплаты = НаименованиеИТипОплатыПоДокументу(Объект);
		
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", ОписаниеОплаты.Тип, ОписаниеОплаты.Наименование, Объект.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
		РазницаСумм = СуммаСтрок - Объект.СуммаДокумента;
		Если РазницаСумм > 0 Тогда
			СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), РазницаСумм);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с типом и наименованием оплаты для подготовки фискалных данных
// в зависимости от типа переданного документа
// 
// Параметры:
//  Объект - ДокументОбъект - Фискализируемый документ
// 
// Возвращаемое значение:
//  Структура:
//   * Тип - Перечисления.ТипыОплатыККТ
//   * Наименование - Строка
// 
Функция НаименованиеИТипОплатыПоДокументу(Объект)
	
	ОписанияОплаты = Новый Соответствие;
	ОписанияОплаты.Вставить(Тип("ДокументОбъект.ОперацияПоПлатежнымКартам"),
		СтруктураОплаты(Перечисления.ТипыОплатыККТ.Электронно, НСтр("ru = 'Оплата по карте'")));
	ОписанияОплаты.Вставить(Тип("ДокументОбъект.ПоступлениеВКассу"),
		СтруктураОплаты(Перечисления.ТипыОплатыККТ.Наличные, НСтр("ru = 'Наличные'")));
	ОписанияОплаты.Вставить(Тип("ДокументОбъект.РасходИзКассы"),
		СтруктураОплаты(Перечисления.ТипыОплатыККТ.Наличные, НСтр("ru = 'Наличные'")));
	ОписанияОплаты.Вставить(Тип("ДокументОбъект.ПоступлениеНаСчет"),
		СтруктураОплаты(Перечисления.ТипыОплатыККТ.Электронно, НСтр("ru = 'Электронно'")));
	ОписанияОплаты.Вставить(Тип("ДокументОбъект.РасходСоСчета"),
		СтруктураОплаты(Перечисления.ТипыОплатыККТ.Электронно, НСтр("ru = 'Электронно'")));
	
	Оплата = ОписанияОплаты.Получить(ТипЗнч(Объект));
	
	Возврат Оплата;
	
КонецФункции

Функция СтруктураОплаты(Тип, Наименование)
	
	Возврат Новый Структура("Тип,Наименование", Тип, Наименование);
	
КонецФункции

Процедура ДобавитьВнереализационнуюПрибыльПоСертификатам(Объект, ОбщиеПараметры)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РасходнаяНакладная")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.АктВыполненныхРабот")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		
		РаботаСПодарочнымиСертификатами.ДобавитьВнереализационнуюПрибыль(Объект, ОбщиеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеАкцизныхМарок(Объект, ЕстьОшибкиГОСИС)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РасходнаяНакладная")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		
		ИнтеграцияИСУНФ.ПроверитьЗаполнениеАкцизныхМарок(Объект, ЕстьОшибкиГОСИС);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

