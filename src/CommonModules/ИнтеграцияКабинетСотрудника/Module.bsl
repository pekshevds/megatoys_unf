
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.82";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "ИнтеграцияКабинетСотрудника.ПеренестиДанныеВНовыеРегистры";
	
КонецПроцедуры

#КонецОбласти

// Возвращает таблицу с данными публикуемых физических лиц.
//
// 	Возвращаемое значение:
// 		ТаблицаЗначений
// 			* ФизическоеЛицо
// 			* Организация
//
Функция ДанныеДляФормированияСогласийНаПрисоединениеККЭДО() Экспорт
	
	ФизическиеЛицаОрганизация = Новый ТаблицаЗначений;
	ФизическиеЛицаОрганизация.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФизическиеЛицаОрганизация.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.Ссылка КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	НЕ ПубликуемыеОбъекты.УсловноВыгружается
	|	И ПубликуемыеОбъекты.Ссылка ССЫЛКА Справочник.Сотрудники";
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат ФизическиеЛицаОрганизация;
	КонецЕсли;
	
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ДатаАктуальности = ТекущаяДатаСеанса();
	
	Если ИспользоватьКадровыйУчет Тогда
		ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,ВидСобытия";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, ВыбираемыеПоля, ДатаАктуальности);
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда
				ЗаполнитьЗначенияСвойств(ФизическиеЛицаОрганизация.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,ДатаПриема,ДатаУвольнения";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, ВыбираемыеПоля, ДатаАктуальности);
		ТаблицаДанных.Колонки.Добавить("ВидСобытия");
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) И СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) И СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
				ЗаполнитьЗначенияСвойств(ФизическиеЛицаОрганизация.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ФизическиеЛицаОрганизация.Свернуть("ФизическоеЛицо,Организация");
	
	Возврат ФизическиеЛицаОрганизация;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обмен

// Обработчик фонового задания обмена с приложением.
Процедура ВыполнитьОбменФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки,ДатаНачала,ДатаОкончания", Ложь);
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	Результат.ДатаНачала = ТекущаяДатаСеанса();
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал обмен.
	УстановитьПривилегированныйРежим(Истина);
	
	Результат.БылиОшибки = КабинетСотрудникаМенеджерОбмена.РезультатВыполненияОбмена(Параметры.ПодготовитьДанныеДляТехПоддержки);
	
	Результат.ДатаОкончания = ТекущаяДатаСеанса();
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

// Выполняет проверку наличия активных фоновых заданий:
// - регламентное задание ОбменССервисомКабинетСотрудника
// - обмен, запущенный пользователем интерактивно
//
Функция ЕстьАктивныеФоновыеЗаданияОбмен() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомОбмен.ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияОбмен())
		Или ИнтеграцияУправлениеПерсоналомОбмен.ЕстьАктивныеФоновыеЗадания(КлючРегламентногоЗаданияОбмен());
	
КонецФункции

Функция КлючФоновогоЗаданияОбмен() Экспорт

	Возврат "ФоновоеЗаданиеОбменКабинетСотрудника";

КонецФункции

Функция КлючРегламентногоЗаданияОбмен() Экспорт

	Возврат Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.Ключ;

КонецФункции 

#КонецОбласти

#Область ПравилаВыгрузки

Процедура ЗаписатьОбъектыПриСохраненииПравилВыгрузки(ОбъектыДляРегистрации) Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БудущиеСобытияУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ИнтеграцияКабинетСотрудникаВнутренний.ДобавитьЭлементыБлокировкиПриСохраненииПравилВыгрузки(Блокировка);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПравилаВыгрузкиУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(ОбъектыДляРегистрации.НовыеПравила);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ОбъектыДляРегистрации.ВыгружаемыеОбъекты Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ОбъектыДляРегистрации.ИзмененияДляОбмена Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		Если ЗначениеЗаполнено(ОбъектыДляРегистрации.БудущиеСобытия) Тогда
			НаборЗаписей = РегистрыСведений.БудущиеСобытияУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Приложение.Установить(Приложение);
			Для каждого СтрокаТЗ Из ОбъектыДляРегистрации.БудущиеСобытия Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ИнтеграцияКабинетСотрудникаВнутренний.ЗаписатьОбъектыДляОбменаПриСохраненииПравилВыгрузки(ОбъектыДляРегистрации);
		Если ЗначениеЗаполнено(ОбъектыДляРегистрации.ФизическиеЛицаОрганизации) Тогда
			КадровыйЭДО.СформироватьСогласияНаПрисоединениеККЭДО(ОбъектыДляРегистрации.ФизическиеЛицаОрганизации);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка записи правил.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение).ПрочиеСобытия;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		// Исключение обрабатывает вызывающий метод.
		ВызватьИсключение
	КонецПопытки;
	
	ИнтеграцияУправлениеПерсоналом.ПроверитьЗаполнениеОбъектов(Приложение);

КонецПроцедуры

// Формирует таблицы с данными для регистрации в регистрах, обслуживающих
// обмен с приложением. 
// Вызывается при обработке изменений кадровых событий.
//
// Параметры:
// 		ДанныеДляРегистрации - Структура
// 			* ФизическиеЛица - ТаблицаЗначений
// 					* ФизическоеЛицо
// 					* Выгружается - Булево
// 					* ОкончаниеВыгрузки - Дата
// 			* Сотрудники - ТаблицаЗначений
// 					* Сотрудник
// 					* УсловноВыгружается
// 					* Удалить - Булево
// 			* ПрочиеОбъекты - ТаблицаЗначений
// 					* Ссылка
// 					* ТипОбъекта
//
// Возвращаемое значение:
// 		Структура
// 			* ВыгружаемыеОбъекты  - ТаблицаЗначений
// 					* Выгружается - Булево
// 					* колонки соответсвующие структуре регистра ВыгружаемыеОбъекты1СПерсонал
// 			* ИзмененияДляОбмена  - ТаблицаЗначений
// 					* колонки соответсвующие структуре регистра ИзмененияДляОбмена1СПерсонал
//
Функция ОбъектыДляРегистрацииОбмена(ДанныеДляРегистрации) Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	ФизическиеЛица 	= ДанныеДляРегистрации.ФизическиеЛица;
	Сотрудники 		= ДанныеДляРегистрации.Сотрудники;
	ПрочиеОбъекты 	= ДанныеДляРегистрации.ПрочиеОбъекты;
	
	ВыгружаемыеОбъекты = НоваяТаблицаВыгружаемыеОбъекты();
	ИзмененияДляОбмена = НоваяТаблицаИзмененияДляОбмена();
	
	// Обработка Физических лиц.
	// Вычисляем ссылки, которые еще не зарегистрированы в ВыгружаемыеОбъектыКабинетСотрудника
	// и если Выгружается = Ложь, ссылки, которые зарегистрированы в ВыгружаемыеОбъектыКабинетСотрудника.
	// Вычиляем ссылки, не зарегистрированные в ИзмененияДляОбменаКабинетСотрудника.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВыгружаемыеФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.Удалить КАК Удалить
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ВыгружаемыеФизическиеЛица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК Ссылка,
	|	Таблица.Удалить КАК Удалить,
	|	ЛОЖЬ КАК УсловноВыгружается
	|ИЗ
	|	ВТФизическиеЛица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Таблица.ФизическоеЛицо = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	НЕ Таблица.Удалить
	|	И ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо,
	|	Таблица.Удалить,
	|	ЛОЖЬ
	|ИЗ
	|	ВТФизическиеЛица КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Таблица.ФизическоеЛицо = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	Таблица.Удалить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК Ссылка,
	|	&ТипОбъекта КАК ТипОбъекта,
	|	ЛОЖЬ КАК ВыгружатьУдаление
	|ИЗ
	|	ВТФизическиеЛица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО Таблица.ФизическоеЛицо = Изменения.Ссылка
	|			И (Изменения.ТипОбъекта = &ТипОбъекта)
	|ГДЕ
	|	НЕ Таблица.Удалить
	|	И Изменения.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[1].Выгрузить(), ВыгружаемыеОбъекты);
	ДополнитьТаблицуИзмененияДляОбмена(РезультатЗапроса[2].Выгрузить(), ИзмененияДляОбмена);
	
	// Регистрация зависимых данных новых физических лиц,
	// - ДоступныеФункцииФизическогоЛица
	// - ПрименяемыеВычетыНДФЛ 
	Отбор = Новый Структура("Удалить", Ложь);
	МассивФизическихЛиц = ФизическиеЛица.Скопировать(Отбор).ВыгрузитьКолонку("ФизическоеЛицо");
	ТекущиеВыгружаемыеФизическиеЛица = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаютсяВПриложение(МассивФизическихЛиц, Приложение);
	НовыеФизическиеЛица = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивФизическихЛиц, ТекущиеВыгружаемыеФизическиеЛица);
	ВедетсяУчетСогласий = ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО");
	Для каждого ФизическоеЛицо Из НовыеФизическиеЛица Цикл
		Если ВедетсяУчетСогласий Тогда
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 			= ФизическоеЛицо;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДоступныеФункцииФизическогоЛица; 
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 			= ФизическоеЛицо;
		НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ПрименяемыеВычетыНДФЛ;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	// Обработка Сотрудников.
	// Вычисляем ссылки, которые еще не зарегистрированы в ВыгружаемыеОбъектыКабинетСотрудника.
	// Вычиляем ссылки, не зарегистрированные в ИзмененияДляОбменаКабинетСотрудника.
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Сотрудник);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Сотрудник КАК Ссылка,
	|	Таблица.УсловноВыгружается КАК УсловноВыгружается,
	|	Таблица.Удалить КАК Удалить
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&Сотрудники КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.УсловноВыгружается КАК УсловноВыгружается
	|ИЗ
	|	ВТСотрудники КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Таблица.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|	И НЕ Таблица.Удалить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	&ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Удалить КАК ВыгружатьУдаление
	|ИЗ
	|	ВТСотрудники КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО Таблица.Ссылка = Изменения.Ссылка
	|			И (&ТипОбъекта = Изменения.ТипОбъекта)
	|ГДЕ
	|	Изменения.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[1].Выгрузить(), ВыгружаемыеОбъекты);
	ДополнитьТаблицуИзмененияДляОбмена(РезультатЗапроса[2].Выгрузить(), ИзмененияДляОбмена);
	
	ДоступенРасширенныйФункционал = ИнтеграцияУправлениеПерсоналом.ДоступенРасширенныйФункционал();
	Если ДоступенРасширенныйФункционал Тогда
		// Регистрация зависимых данных новых сотрудников,
		// - ЗаработанныеПраваНаОтпуск
		// - ГрафикОтпусков
		Отбор = Новый Структура("Удалить", Ложь);
		МассивСотрудников = Сотрудники.Скопировать(Отбор).ВыгрузитьКолонку("Сотрудник");
		ТекущиеВыгружаемыеСотрудники = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгружаютсяВПриложение(МассивСотрудников, Приложение);
		НовыеСотрудники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСотрудников, ТекущиеВыгружаемыеСотрудники);
		Для каждого Сотрудник Из НовыеСотрудники Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 			= Сотрудник;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗаработанныеПраваНаОтпуск;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 			= Сотрудник;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ГрафикОтпусков;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	// Обработка прочих объектов.
	// Вычисляем ссылки, которые еще не зарегистрированы в ВыгружаемыеОбъектыКабинетСотрудника.
	// Вычиляем ссылки, не зарегистрированные в ИзмененияДляОбменаКабинетСотрудника.
	Запрос.УстановитьПараметр("ПрочиеОбъекты", ПрочиеОбъекты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ТипОбъекта КАК ТипОбъекта
	|ПОМЕСТИТЬ ВТПрочиеОбъекты
	|ИЗ
	|	&ПрочиеОбъекты КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК УсловноВыгружается
	|ИЗ
	|	ВТПрочиеОбъекты КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|		ПО Таблица.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	ЛОЖЬ КАК ВыгружатьУдаление
	|ИЗ
	|	ВТПрочиеОбъекты КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|		ПО Таблица.Ссылка = Изменения.Ссылка
	|			И Таблица.ТипОбъекта = Изменения.ТипОбъекта
	|ГДЕ
	|	Изменения.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[1].Выгрузить(), ВыгружаемыеОбъекты);
	ДополнитьТаблицуИзмененияДляОбмена(РезультатЗапроса[2].Выгрузить(), ИзмененияДляОбмена);
	
	ИзмененияДанныхГрафика = Неопределено;
	Если ДоступенРасширенныйФункционал Тогда
		// Регистрация зависимых данных новых графиков работы,
		// - ИзмененияДанныхГрафикаКабинетСотрудника.
		Отбор = Новый Структура("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ГрафикРаботы);
		ГрафикиРаботыСотрудников = ПрочиеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
		ИзмененияДанныхГрафика = ИнтеграцияКабинетСотрудникаВнутренний.РассчитатьИзмененияДанныхГрафика(ГрафикиРаботыСотрудников);
	КонецЕсли;

	ФизическиеЛицаОрганизации = Сотрудники.Скопировать(,"Организация,ФизическоеЛицо");
	ФизическиеЛицаОрганизации.Свернуть("Организация,ФизическоеЛицо");
	
	ОбъектыДляРегистрации = Новый Структура;
	ОбъектыДляРегистрации.Вставить("ВыгружаемыеОбъекты", 		ВыгружаемыеОбъекты);
	ОбъектыДляРегистрации.Вставить("ИзмененияДляОбмена", 		ИзмененияДляОбмена);
	ОбъектыДляРегистрации.Вставить("ИзмененияДанныхГрафика", 	ИзмененияДанныхГрафика);
	ОбъектыДляРегистрации.Вставить("ФизическиеЛицаОрганизации", ФизическиеЛицаОрганизации);
	
	Возврат ОбъектыДляРегистрации;

КонецФункции

Функция ОбъектВыгружается(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка = &Ссылка";
	
	Возврат Не Запрос.Выполнить().Пустой(); 
	
КонецФункции

Процедура ПроверитьОбновитьИсключенияИзПравил() Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенияИзПравил.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсключенияИзПравил.Публикуется КАК Публикуется,
	|	ИсключенияИзПравил.ЭтоОтветственный КАК ЭтоОтветственный
	|ИЗ
	|	РегистрСведений.ИсключенияИзПравилПубликацииКабинетСотрудника КАК ИсключенияИзПравил
	|ГДЕ
	|	ИсключенияИзПравил.ЭтоОтветственный";
	Выборка = Запрос.Выполнить().Выбрать();
	ОбновитьОтветственного = Истина;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФизическоеЛицо <> Настройки.Ответственный Тогда
			Запись = РегистрыСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			Запись.Публикуется 		= Выборка.Публикуется;
			Запись.ЭтоОтветственный = Ложь;
			Запись.Записать();
		ИначеЕсли Не Выборка.Публикуется Тогда
			Запись = РегистрыСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			Запись.Публикуется 		= Истина;
			Запись.ЭтоОтветственный = Истина;
			Запись.Записать();
		Иначе
			ОбновитьОтветственного = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновитьОтветственного И ЗначениеЗаполнено(Настройки.Ответственный) Тогда
		Запись = РегистрыСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ФизическоеЛицо 	= Настройки.Ответственный;
		Запись.Публикуется 		= Истина;
		Запись.ЭтоОтветственный = Истина;
		Запись.Записать();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДополнительныеДанныеФизическихЛиц

Процедура ВыгрузитьДополнительныеДанныеФизическихЛиц(МенеджерОбмена, РезультатВыгрузки) Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ОбновитьУровеньДоступаКИ = Настройки.ОбновитьУровеньДоступаКИ;
	
	АктивироватьФизическихЛицПоРезультатуВыгрузки(МенеджерОбмена, РезультатВыгрузки);
	Если Не ОбновитьУровеньДоступаКИ Тогда
		ОбновитьУровниДоступаФизическихЛиц(МенеджерОбмена, РезультатВыгрузки);
	КонецЕсли;

КонецПроцедуры 

Процедура АктивироватьФизическихЛицПоРезультатуВыгрузки(МенеджерОбмена, РезультатВыгрузки)

	Если Не КабинетСотрудника.ИспользоватьФормат503() Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыгрузки.Выгружено.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо;
	СсылкаПубличныйИдентификатор = ИнтеграцияУправлениеПерсоналомОбмен.СсылкаПубличныйИдентификатор(РезультатВыгрузки.Выгружено, ТипОбъекта);
	Данные = Новый Массив;
	Для каждого Ссылка Из РезультатВыгрузки.Выгружено Цикл
		Данные.Добавить(СсылкаПубличныйИдентификатор[Ссылка]);
	КонецЦикла;
	
	Результат = МенеджерОбмена.РезультатАктивацииФизическихЛиц(Данные);
	
	ИдентификаторСсылка = ИнтеграцияУправлениеПерсоналомОбмен.ПубличныйИдентификаторСсылка(Результат.Выгружено, ТипОбъекта);
	ФизическиеЛица = Новый Массив;
	Для каждого ЭлементКоллекции Из ИдентификаторСсылка Цикл
		ФизическиеЛица.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	РезультатВыгрузки.Выгружено = ФизическиеЛица;
	
КонецПроцедуры

Процедура ОбновитьУровниДоступаФизическихЛиц(МенеджерОбмена, РезультатВыгрузки)

	Если Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыгрузки.Выгружено) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиФункциональности = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	ПоляОбъекта = "ФизическоеЛицо,УровеньДоступа";
	Данные = Новый Массив;
	Для каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
		Объект = Новый Структура(ПоляОбъекта);
		Объект.ФизическоеЛицо = ФизическоеЛицо;
		Объект.УровеньДоступа = НастройкиФункциональности.УровеньДоступаКИ;
		Данные.Добавить(Объект);
	КонецЦикла;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ОграничениеДоступаКРабочимКонтактам;
	Результат = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные, ТипОбъекта);
	
	ТипОбъектаФизическоеЛицо = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо;
	ИдентификаторСсылка = ИнтеграцияУправлениеПерсоналомОбмен.ПубличныйИдентификаторСсылка(Результат.Выгружено, ТипОбъектаФизическоеЛицо);
	ФизическиеЛица = Новый Массив;
	Для каждого ЭлементКоллекции Из ИдентификаторСсылка Цикл
		ФизическиеЛица.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	РезультатВыгрузки.Выгружено = ФизическиеЛица;

КонецПроцедуры

#КонецОбласти

#Область Версионирование

Процедура ЗаполнитьВерсииDTO(Версии) Экспорт

	Версии.Добавить("2.0");

КонецПроцедуры

Процедура ЗаполнитьВерсииAPI(Версии) Экспорт

	Версии.Добавить("2.0");

КонецПроцедуры

Процедура УстановитьНовуюВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO) Экспорт

//	РегистрыСведений.НастройкиИнтеграции1СПерсонал.УстановитьВерсиюDTO(НоваяВерсияDTO);
//	ВыполнитьДействияПриПереходеНаВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO);

КонецПроцедуры

Процедура УстановитьНовуюВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI) Экспорт

	//РегистрыСведений.НастройкиИнтеграции1СПерсонал.УстановитьВерсиюAPI(НоваяВерсияAPI);
	//ВыполнитьДействияПриПереходеНаВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI);

КонецПроцедуры

Функция ИспользуетсяВерсияФормата(ВерсияДляСравнения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияФормата) Тогда
		Возврат Ложь;
	Иначе
		Возврат ИнтеграцияУправлениеПерсоналом.СравнитьВерсии(Настройки.ВерсияФормата, ВерсияДляСравнения) >= 0;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область РучнаяРегистрацияИзмененийДляОбмена

Процедура ТипыОбъектовДляРучнойРегистрацииИзменений(ТипыОбъектов) Экспорт
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ПрименяемыеВычетыНДФЛ;
	НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		НоваяСтрока = ТипыОбъектов.Добавить();
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.МашиночитаемаяДоверенностьКЭДО;
		НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.МашиночитаемыеДоверенностиКЭДО.ПустаяСсылка());
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО") Тогда
		НоваяСтрока = ТипыОбъектов.Добавить();
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДоступныеФункцииФизическогоЛица;
		НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ФизическиеЛица.ПустаяСсылка());
	КонецЕсли;
	
	ИнтеграцияКабинетСотрудникаВнутренний.ТипыОбъектовДляРучнойРегистрацииИзменений(ТипыОбъектов);
	
КонецПроцедуры

#КонецОбласти

#Область ОтключениеПриложения 

Процедура ОчиститьДанныеПриОтключенииПриложения() Экспорт

	РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	
	Константы.ИспользуетсяСервисКабинетСотрудника.Установить(Ложь);
	Константы.ИспользуютсяОбсужденияКабинетСотрудника.Установить(Ложь);
	Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Ложь);
	Константы.СервисКабинетСотрудникаВЛокальнойСети.Установить(Ложь);
	
	РегистрыСведений.ИсключенияИзПравилПубликацииКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	
	Справочники.ПравилаСогласованияЗаявокКабинетСотрудника.УдалитьВсеПравила();
	
	ИнтеграцияКабинетСотрудникаВнутренний.ОчиститьДанныеПриОтключенииПриложения(); 

КонецПроцедуры

#КонецОбласти

#Область ИзменениеНастроекПодключения 

Процедура СохранитьНовыеНастройкиПодключения(АдресПриложения) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиСервисаКабинетСотрудника");
	Блокировка.Заблокировать();
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.АдресПриложения = АдресПриложения;
	Настройки.АдресПриложенияПоИмени = "";
	Настройки.Идентификатор = "local";
	
	Запись = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, Настройки);
	Запись.Записать();
	
	Если Не Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить() Тогда
		МенеджерЗначенияКонстанты = Константы.СервисКабинетСотрудникаВЛокальнойСети.СоздатьМенеджерЗначения();
		МенеджерЗначенияКонстанты.ДополнительныеСвойства.Вставить("ИзменениеРазрешено");
		МенеджерЗначенияКонстанты.Значение = Истина;
		МенеджерЗначенияКонстанты.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторыОбъектов

Функция НоваяТаблицаВыгружаемыеОбъекты() Экспорт

	Таблица = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ВыгружаемыеОбъектыКабинетСотрудника");
	Таблица.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаИзмененияДляОбмена() Экспорт

	Таблица = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ИзмененияДляОбменаКабинетСотрудника");
	Таблица.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИБ

#Область ПереносДанных

Процедура Перенос_ИзмененияДляОбменаКабинетСотрудника()
	
	ИзмененияДляОбмена = НоваяТаблицаИзмененияДляОбмена();
	
	ТипОбъектаПоТипуОбъектаКС = ТипОбъектаПоТипуОбъектаКС();
	ТипЗначенияТипОбъекта = ТипЗначенияТипОбъекта();
	
	Запрос = Новый Запрос;
	
	// ДокументыКУдалениюКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	ИдентификаторыДокументов.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьДокументыКУдалениюКабинетСотрудника КАК ИдентификаторыДокументов
	|		ПО Таблица.ИдентификаторДокумента = ИдентификаторыДокументов.ИдентификаторДокумента
	|			И (ИдентификаторыДокументов.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовКабинетСотрудника.ДокументНаПодпись))";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= ТипОбъектаПоТипуОбъектаКС[СтрокаТЗ.ТипОбъекта];
		НоваяСтрока.ВыгружатьУдаление 	= Истина;
	КонецЦикла;
	
	ТипСборГрафиков = ИнтеграцияУправлениеПерсоналом.ТипСборГрафиковОтпусковСсылка();
	Если ЗначениеЗаполнено(ТипСборГрафиков) Тогда
		
		ДокументМенеджер = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипСборГрафиков);
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументМенеджер.ПустаяСсылка());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	Таблица.КорневойСборГрафиков КАК КорневойСборГрафиков
		|ИЗ
		|	#ИмяТаблицы КАК Таблица
		|ГДЕ
		|	Таблица.ИдентификаторДокумента = """"";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
		РезультатЗапрос = Запрос.Выполнить();
		Если Не РезультатЗапрос.Пустой() Тогда
			Выборка = РезультатЗапрос.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.КорневойСборГрафиков) Тогда
					Продолжить;
				КонецЕсли;
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ИдентификаторДокумента = Строка(Выборка.Ссылка.УникальныйИдентификатор());
				ДокументОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьВыгрузку");
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	ИдентификаторыДокументов.ТипОбъекта
		|ИЗ
		|	#ИмяТаблицы КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьДокументыКУдалениюКабинетСотрудника КАК ИдентификаторыДокументов
		|		ПО Таблица.ИдентификаторДокумента = ИдентификаторыДокументов.ИдентификаторДокумента
		|			И (ИдентификаторыДокументов.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовКабинетСотрудника.СборГрафиковОтпусков))";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
		Таблица = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из Таблица Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
			НоваяСтрока.ТипОбъекта 			= ТипОбъектаПоТипуОбъектаКС[СтрокаТЗ.ТипОбъекта];
			НоваяСтрока.ВыгружатьУдаление 	= Истина;
		КонецЦикла;
		
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	РегистрСведений.УдалитьДокументыКУдалениюКабинетСотрудника КАК Документы
	|ГДЕ
	|	Документы.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовКабинетСотрудника.СогласиеНаПрисоединениеККЭДО)";
	Идентификаторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторДокумента");
	Согласия = Новый Массив;
	Для каждого Идентификатор Из Идентификаторы Цикл
		Согласия.Добавить(Документы.СогласиеНаПрисоединениеККЭДО.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	КонецЦикла;
	Запрос.УстановитьПараметр("Ссылки", Согласия);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласиеНаПрисоединениеККЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СогласиеНаПрисоединениеККЭДО КАК СогласиеНаПрисоединениеККЭДО
	|ГДЕ
	|	СогласиеНаПрисоединениеККЭДО.Ссылка В(&Ссылки)";
	Согласия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для каждого Согласие Из Согласия Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= Согласие;
		НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.СогласиеНаПрисоединениеККЭДО;
		НоваяСтрока.ВыгружатьУдаление 	= Истина;
	КонецЦикла;
	
	// ИзмененияДляСервисаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ПредметПубликации КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(Изменения.ПредметПубликации) КАК ТипЗначения
	|ИЗ
	|	РегистрСведений.УдалитьИзмененияДляСервисаКабинетСотрудника КАК Изменения
	|ГДЕ
	|	НЕ Изменения.ПредметПубликации ССЫЛКА БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= ТипЗначенияТипОбъекта[СтрокаТЗ.ТипЗначения];
		НоваяСтрока.ВыгружатьУдаление 	= Ложь;
	КонецЦикла;
	
	// ИзмененияДокументовДляСервисаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ПубликуемыйДокумент КАК Ссылка
	|ИЗ
	|	РегистрСведений.УдалитьИзмененияДокументовДляСервисаКабинетСотрудника КАК Изменения";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДокументНаПодпись;
		НоваяСтрока.ВыгружатьУдаление 	= Ложь;
	КонецЦикла;
	
	// ИзмененияЗаявокДляСервисаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ПредметПубликации КАК Ссылка,
	|	Изменения.ПредметПубликации.ТипЗаявкиКабинетСотрудника КАК ТипЗаявки
	|ИЗ
	|	РегистрСведений.УдалитьИзмененияЗаявокДляСервисаКабинетСотрудника КАК Изменения";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ТипЗаявкиТипОбъекта = ТипЗаявкиТипОбъекта();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= ТипЗаявкиТипОбъекта[СтрокаТЗ.ТипЗаявки];
		НоваяСтрока.ВыгружатьУдаление 	= Ложь;
	КонецЦикла;
	
	// ОбъектыДляУдаленияИзСервисаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ОбъектДляУдаления КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(Таблица.ОбъектДляУдаления) КАК ТипЗначения
	|ИЗ
	|	РегистрСведений.УдалитьОбъектыДляУдаленияИзСервисаКабинетСотрудника КАК Таблица";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= ТипЗначенияТипОбъекта[СтрокаТЗ.ТипЗначения];
		НоваяСтрока.ВыгружатьУдаление 	= Истина;
	КонецЦикла;
		
	// ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК Ссылка
	|ИЗ
	|	РегистрСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК Таблица";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ПрименяемыеВычетыНДФЛ;
		НоваяСтрока.ВыгружатьУдаление 	= Ложь;
	КонецЦикла;
	
	Отбор = Новый Структура("ВыгружатьУдаление", Истина);
	ИзмененияКУдалению = ИзмененияДляОбмена.Скопировать(Отбор);
	
	ИзмененияДляОбмена.Свернуть("Ссылка,ТипОбъекта");
	ИзмененияДляОбмена.Колонки.Добавить("ВыгружатьУдаление", Новый ОписаниеТипов("Булево"));
	ИзмененияДляОбмена.Колонки.Добавить("ВерсияДанных");
	
	Отбор = Новый Структура("Ссылка,ТипОбъекта");
	Для каждого СтрокаТЗ Из ИзмененияКУдалению Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		НайденныеСтроки = ИзмененияДляОбмена.НайтиСтроки(Отбор);
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			СтрокаТаблицы.ВыгружатьУдаление = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ИзмененияДляОбмена Цикл
		СтрокаТЗ.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИзмененияДляОбмена) Тогда
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ИзмененияДляОбмена);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьДокументыКУдалениюКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура Перенос_ВыгружаемыеОбъектыКабинетСотрудника()
	
	ВыгружаемыеОбъекты = НоваяТаблицаВыгружаемыеОбъекты();
	
	Запрос = Новый Запрос;
	
	//ПубликуемыеОбъектыКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ОбъектПубликации КАК Ссылка,
	|	Таблица.УсловноПубликуется КАК УсловноВыгружается
	|ИЗ
	|	РегистрСведений.УдалитьПубликуемыеОбъектыКабинетСотрудника КАК Таблица";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ВыгружаемыеОбъекты.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	//ФизическиеЛицаКабинетСотрудника
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК Ссылка,
	|	Таблица.ОкончаниеПубликации КАК ОкончаниеВыгрузки
	|ИЗ
	|	РегистрСведений.УдалитьФизическиеЛицаКабинетСотрудника КАК Таблица";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ВыгружаемыеОбъекты.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ВыгружаемыеОбъекты);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	НаборЗаписей = РегистрыСведений.УдалитьФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура Перенос_ИдентификаторыНезагруженныхОбъектовКабинетСотрудника()
	
	НезагруженныеОбъекты = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("НезагруженныеОбъектыУпралениеПерсоналом");
	ТипОбъектаПоТипуОбъектаКС = ТипОбъектаПоТипуОбъектаКС();
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Идентификаторы.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	|	Идентификаторы.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.УдалитьИдентификаторыНезагруженныхОбъектовКабинетСотрудника КАК Идентификаторы";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл 
		ТипОбъекта = ТипОбъектаПоТипуОбъектаКС[СтрокаТЗ.ТипОбъекта];
		Если Не ЗначениеЗаполнено(ТипОбъекта) Или Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НезагруженныеОбъекты.Добавить();
		НоваяСтрока.Идентификатор 	= СтрокаТЗ.ИдентификаторОбъекта;
		НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
		НоваяСтрока.Приложение 		= Приложение;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НезагруженныеОбъекты) Тогда
		НаборЗаписей = РегистрыСведений.НезагруженныеОбъектыУпралениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(НезагруженныеОбъекты);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьИдентификаторыНезагруженныхОбъектовКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_ОбъектыСОшибкамиЗаполненияКабинетСотрудника()
	
	ОшибкиЗаполнения = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
	ТипЗначенияТипОбъекта = ТипЗначенияТипОбъекта();
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыСОшибками.ОбъектПубликации КАК Ссылка,
	|	ОбъектыСОшибками.БлокирующаяОшибка КАК БлокирующаяОшибка,
	|	ОбъектыСОшибками.Позиция КАК ПозицияШР,
	|	ОбъектыСОшибками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОбъектыСОшибками.ОписаниеБлокирующейОшибки КАК ПредставлениеБлокирующейОшибки,
	|	ОбъектыСОшибками.ОписаниеОшибки КАК ПредставлениеОшибки,
	|	ТИПЗНАЧЕНИЯ(ОбъектыСОшибками.ОбъектПубликации) КАК ТипЗначения
	|ИЗ
	|	РегистрСведений.УдалитьОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОбъектыСОшибками";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		ТипОбъекта = ТипЗначенияТипОбъекта[СтрокаТЗ.ТипЗначения];
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Или Не ЗначениеЗаполнено(ТипОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ОшибкиЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.ТипОбъекта = ТипОбъекта;
		НоваяСтрока.Приложение = Приложение;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		НаборЗаписей = РегистрыСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(ОшибкиЗаполнения);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_ПравилаПубликацииКабинетСотрудника()
	
	Правила = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ПравилаВыгрузкиУправлениеПерсоналом");
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Правила.ОбъектПравила КАК Ссылка
	|ИЗ
	|	РегистрСведений.УдалитьПравилаПубликацииКабинетСотрудника КАК Правила";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Правила.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Приложение = Приложение;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Правила) Тогда
		НаборЗаписей = РегистрыСведений.ПравилаВыгрузкиУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(Правила);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьПравилаПубликацииКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_РезультатОбменаКабинетСотрудника()

	СобытияОбмена = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("СобытияОбменаУпралениеПерсоналом");
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатОбмена.ИндексСобытия КАК ИндексСобытия,
	|	РезультатОбмена.ДатаНачала КАК ДатаНачала,
	|	РезультатОбмена.ДатаОкончания КАК ДатаОкончания,
	|	РезультатОбмена.БылиОшибки КАК БылиОшибки
	|ИЗ
	|	РегистрСведений.УдалитьРезультатОбменаКабинетСотрудника КАК РезультатОбмена";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		НоваяСтрока = СобытияОбмена.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Приложение = Приложение;
		Если СтрокаТЗ.ИндексСобытия = 0 Тогда
			НоваяСтрока.ВидСобытия = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.Обмен;
		Иначе
			НоваяСтрока.ВидСобытия = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.ОбработкаОбсуждений;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СобытияОбмена) Тогда
		НаборЗаписей = РегистрыСведений.СобытияОбменаУпралениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(СобытияОбмена);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьРезультатОбменаКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_СотрудникиДляОбновленияПубликуемыхОбъектов()

	БудущиеСобытия = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("БудущиеСобытияУправлениеПерсоналом");
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиДляОбновления.Сотрудник КАК Сотрудник,
	|	СотрудникиДляОбновления.ДатаСобытия КАК ДатаСобытия,
	|	СотрудникиДляОбновления.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Сотрудник) Или Не ЗначениеЗаполнено(СтрокаТЗ.Событие) Или Не ЗначениеЗаполнено(СтрокаТЗ.ДатаСобытия) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = БудущиеСобытия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Приложение = Приложение;
		Если СтрокаТЗ.Событие = Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.ГрафикРаботы Тогда
			НоваяСтрока.Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.ГрафикРаботы;
		Иначе
			НоваяСтрока.Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.КадровыеДанные;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(БудущиеСобытия) Тогда
		НаборЗаписей = РегистрыСведений.БудущиеСобытияУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(БудущиеСобытия);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_НеобработанныеРезультатыСогласованияКабинетСотрудника()

	НеобработанныеОбъекты = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("НеобработанныеОбъектыУправлениеПерсоналом");
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НеобработанныеРезультаты.РезультатСогласования КАК Объект
	|ИЗ
	|	РегистрСведений.УдалитьНеобработанныеРезультатыСогласованияКабинетСотрудника КАК НеобработанныеРезультаты";
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(Таблица) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		ИдентификаторОбъекта = Неопределено;
		Попытка
			Объект = СтрокаТЗ.Объект.Получить();
			ИдентификаторОбъекта = Объект.ИдентификаторОбъекта;
		Исключение
			// Не обрабатываем этот объект.
		КонецПопытки;
		Если Не ЗначениеЗаполнено(ИдентификаторОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НеобработанныеОбъекты.Добавить();
		НоваяСтрока.Приложение 		= Приложение;
		НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.РезультатСогласования;
		НоваяСтрока.Идентификатор 	= ИдентификаторОбъекта;
		НоваяСтрока.Объект 			= Новый ХранилищеЗначения(Объект);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НеобработанныеОбъекты) Тогда 
		НаборЗаписей = РегистрыСведений.НеобработанныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(НеобработанныеОбъекты);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УдалитьНеобработанныеРезультатыСогласованияКабинетСотрудника.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_ВерсияИзмененийКабинетСотрудника()
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ВерсияИзменений = Константы.УдалитьВерсияИзмененийКабинетСотрудника.Получить();
	
	Если ВерсияИзменений = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВерсииИзмененийУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Приложение.Установить(Приложение);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаписьНабора.Приложение 		= Приложение;
	ЗаписьНабора.ВерсияИзменений 	= ВерсияИзменений;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
	Константы.УдалитьВерсияИзмененийКабинетСотрудника.Установить(0);

КонецПроцедуры

Процедура Перенос_НастройкиИнтеграцииУправлениеПерсоналом()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИнтеграции.ВидКИМобильныйТелефон КАК ВидКИМобильныйТелефон
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииУправлениеПерсоналом КАК НастройкиИнтеграции";
	НастройкиИнтеграции = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(НастройкиИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИнтеграции.УдалитьВидКонтактнойИнформацииМобильныйТелефон КАК ВидКИМобильныйТелефон,
	|	НастройкиИнтеграции.УдалитьВидКонтактнойИнформацииАдресЭлектроннойПочты КАК ВидКИАдресЭлектроннойПочты,
	|	НастройкиИнтеграции.УдалитьПубликоватьСтруктуруЮридическихЛиц КАК ПубликоватьСтруктуруЮридическихЛиц
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииКабинетСотрудника КАК НастройкиИнтеграции";
	НастройкиИнтеграции = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(НастройкиИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(НастройкиИнтеграции);
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура Перенос_ВыгруженныеОбъекты()
	
	ТипЗначенияТипОбъекта = ТипЗначенияТипОбъекта();
	
	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Организация);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Должность);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДолжностьПоШтатномуРасписанию);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Сотрудник);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ГрафикРаботы);
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыгруженныеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|ГДЕ
	|	ВыгруженныеОбъекты.Приложение = &Приложение";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ИзмененияДляОбмена
	|		ПО ВыгружаемыеОбъекты.Ссылка = ИзмененияДляОбмена.Ссылка
	|			И (ИзмененияДляОбмена.ТипОбъекта В (&ТипыОбъектов))
	|ГДЕ
	|	ИзмененияДляОбмена.ВерсияДанных ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВыгруженныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Приложение.Установить(Приложение);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ТипОбъекта = ТипЗначенияТипОбъекта[ТипЗнч(Выборка.Ссылка)];
		Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Ссылка 		= Выборка.Ссылка;
		НоваяЗапись.Приложение 	= Приложение;
		НоваяЗапись.ТипОбъекта 	= ТипОбъекта;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборЗаписей) Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПубличныеИдентификаторы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПубличныеИдентификаторы.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК ПубличныеИдентификаторы";
	ЕстьПубличныеИдентификаторы = Не Запрос.Выполнить().Пустой();
	
	ОбрабатываемыеТипы = Новый Соответствие;
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо, Истина);
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Организация, Истина);
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение, Истина);
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Сотрудник, Истина);
	ОбрабатываемыеТипы.Вставить(Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ВидПредоставляемойСотрудникамСправки, Истина);
	
	ТипЗначенияТипОбъекта = ТипЗначенияТипОбъекта();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОбъектов = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ПубличныеИдентификаторыОбъектовУправлениеПерсоналом");
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		ТипОбъекта = ТипЗначенияТипОбъекта[СтрокаТЗ.ТипДанных];
		Если ОбрабатываемыеТипы[ТипОбъекта] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Ссылка 		= СтрокаТЗ.Ссылка;
		НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	ВТТаблицаОбъектов КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК ПубличныеИдентификаторы
	|		ПО Таблица.ТипОбъекта = ПубличныеИдентификаторы.ТипОбъекта
	|			И Таблица.Ссылка = ПубличныеИдентификаторы.Ссылка
	|ГДЕ
	|	ПубличныеИдентификаторы.Идентификатор ЕСТЬ NULL";
	ОбъектыБезИдентификатора = Запрос.Выполнить().Выгрузить();
	
	Если Не ЗначениеЗаполнено(ОбъектыБезИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	ОрганизацииКакПодразделение = Новый Массив;
	ОбъектыБезИдентификатора.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Для каждого СтрокаТЗ Из ОбъектыБезИдентификатора Цикл
		Если ПубликоватьСтруктуруЮридическихЛиц И СтрокаТЗ.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Организация Тогда
			ОрганизацииКакПодразделение.Добавить(СтрокаТЗ.Ссылка);
		КонецЕсли;
		СтрокаТЗ.Идентификатор = Строка(СтрокаТЗ.Ссылка.УникальныйИдентификатор());
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОрганизацииКакПодразделение) Тогда
		Запрос.УстановитьПараметр("Ссылки", ОрганизацииКакПодразделение);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ИдентификаторыОрганизаций.Идентификатор, """") КАК Идентификатор
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыОрганизацийКабинетСотрудника КАК ИдентификаторыОрганизаций
		|		ПО Организации.Ссылка = ИдентификаторыОрганизаций.Организация
		|ГДЕ
		|	Организации.Ссылка В(&Ссылки)";
		Идентификаторы = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из Идентификаторы Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЗ.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОбъектыБезИдентификатора.Добавить();
			НоваяСтрока.Ссылка 			= СтрокаТЗ.Ссылка;
			НоваяСтрока.Идентификатор 	= СтрокаТЗ.Идентификатор;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Подразделение;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПубличныеИдентификаторы Тогда
		Для каждого СтрокаТЗ Из ОбъектыБезИдентификатора Цикл
			НаборЗаписей = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(СтрокаТЗ.Ссылка);
			НаборЗаписей.Отбор.ТипОбъекта.Установить(СтрокаТЗ.ТипОбъекта);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	Иначе
		НаборЗаписей = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ОбъектыБезИдентификатора);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;

КонецПроцедуры

Функция ТипОбъектаПоТипуОбъектаКС()

	ТипОбъектаПоТипуОбъектаКС = Новый Соответствие;
	
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.ДокументНаПодпись,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ДокументНаПодпись);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.РезультатСогласования,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.РезультатСогласования);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.СогласиеНаПрисоединениеККЭДО,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.СогласиеНаПрисоединениеККЭДО);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.СборГрафиковОтпусков,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ГрафикОтпусковПодразделения);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.ПравилоСогласования,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ПравилоСогласования);
		
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗапросСправки2НДФЛ);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗаявкаНаКомпенсациюОтпуска);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗаявкаИзменениеЛичныхДанных);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗаявкаДСВ);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗапросСправкиСМестаРаботы);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗаявкаНаОтпуск);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗаявкаОстаткиОтпусков);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ЗаявкаНалоговыйВычет);
	ТипОбъектаПоТипуОбъектаКС.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия,
		Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.Отсутствие);
		
	Возврат ТипОбъектаПоТипуОбъектаКС;

КонецФункции

Функция ТипЗначенияТипОбъекта()
	
	ПеречислениеМенеджер = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	ТипЗначенияТипОбъекта = Новый Соответствие;
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.ФизическиеЛица"), 					ПеречислениеМенеджер.ФизическоеЛицо);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.Организации"), 					ПеречислениеМенеджер.Организация);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.ПодразделенияОрганизаций"), 		ПеречислениеМенеджер.Подразделение);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.СтруктураПредприятия"), 			ПеречислениеМенеджер.Подразделение);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.Должности"), 						ПеречислениеМенеджер.Должность);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.ШтатноеРасписание"), 				ПеречислениеМенеджер.ДолжностьПоШтатномуРасписанию);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.Сотрудники"), 						ПеречислениеМенеджер.Сотрудник);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.МашиночитаемыеДоверенностиКЭДО"), 	ПеречислениеМенеджер.МашиночитаемаяДоверенностьКЭДО);
	
	ТипЗначения = ИнтеграцияУправлениеПерсоналом.ТипВидПредоставляемойСотрудникамСправкиСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипЗначенияТипОбъекта.Вставить(ТипЗначения, ПеречислениеМенеджер.ВидПредоставляемойСотрудникамСправки);
	КонецЕсли;
	ТипЗначения = ИнтеграцияУправлениеПерсоналом.ТипГрафикРаботыСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипЗначенияТипОбъекта.Вставить(ТипЗначения, ПеречислениеМенеджер.ГрафикРаботы);
	КонецЕсли;
	ТипЗначения = ИнтеграцияУправлениеПерсоналом.ТипСборГрафиковОтпусковСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипЗначенияТипОбъекта.Вставить(ТипЗначения, ПеречислениеМенеджер.ГрафикОтпусковПредприятия);
	КонецЕсли;
	
	Возврат ТипЗначенияТипОбъекта;

КонецФункции

#КонецОбласти

Процедура ПеренестиДанныеВНовыеРегистры() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Перенос_ИзмененияДляОбменаКабинетСотрудника();
	Перенос_ВыгружаемыеОбъектыКабинетСотрудника();
	Перенос_ИдентификаторыНезагруженныхОбъектовКабинетСотрудника();
	Перенос_ОбъектыСОшибкамиЗаполненияКабинетСотрудника();
	Перенос_ПравилаПубликацииКабинетСотрудника();
	Перенос_РезультатОбменаКабинетСотрудника();
	Перенос_СотрудникиДляОбновленияПубликуемыхОбъектов();
	Перенос_НеобработанныеРезультатыСогласованияКабинетСотрудника();
	Перенос_ВерсияИзмененийКабинетСотрудника();
	Перенос_ВыгруженныеОбъекты();
	ЗаполнитьПубличныеИдентификаторы();
	Перенос_НастройкиИнтеграцииУправлениеПерсоналом();
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция ЗаполнитьНастройкиПодключения(НастройкиПодключения) Экспорт
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	АдресПриложения = Настройки.АдресПриложения;
	Если ЗначениеЗаполнено(Настройки.АдресПриложенияПоИмени) И Настройки.АдресПриложенияПоИмениДоступен Тогда
		АдресПриложения = Настройки.АдресПриложенияПоИмени;
	КонецЕсли;
	НастройкиПодключения.ВерсияDTO 			= СокрЛП(Настройки.ВерсияФормата);
	НастройкиПодключения.ВерсияAPI 			= СокрЛП(Настройки.ВерсияAPI); 
	НастройкиПодключения.АдресПриложения 	= СокрЛП(АдресПриложения);
	
КонецФункции

Процедура ДополнитьТаблицуИзмененияДляОбмена(ТаблицаИсточник, ИзмененияДляОбмена)
	
	Для Каждого СтрокаТЗ Из ТаблицаИсточник Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

Функция ТипЗаявкиТипОбъекта() Экспорт
	
	ПеречислениеТипыОбъектов = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	ПеречислениеТипыЗаявок = Перечисления.ТипыЗаявокКабинетСотрудника;
	ТипЗаявкиТипОбъекта = Новый Соответствие;
	
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.СправкаНДФЛ, 					ПеречислениеТипыОбъектов.ЗапросСправки2НДФЛ);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ЗаявлениеНаКомпенсациюОтпуска, 	ПеречислениеТипыОбъектов.ЗаявкаНаКомпенсациюОтпуска);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ИзменениеЛичныхДанных, 			ПеречислениеТипыОбъектов.ЗаявкаИзменениеЛичныхДанных);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ЗаявлениеНаУдержаниеДСВ, 		ПеречислениеТипыОбъектов.ЗаявкаДСВ);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.СправкаСМестаРаботы, 			ПеречислениеТипыОбъектов.ЗапросСправкиСМестаРаботы); 
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ЗаявлениеНаОтпуск, 				ПеречислениеТипыОбъектов.ЗаявкаНаОтпуск);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.СправкаОбОстаткеОтпуска, 		ПеречислениеТипыОбъектов.ЗаявкаОстаткиОтпусков);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.ЗаявлениеНаНалоговыеВычеты, 	ПеречислениеТипыОбъектов.ЗаявкаНалоговыйВычет);
	ТипЗаявкиТипОбъекта.Вставить(ПеречислениеТипыЗаявок.СогласованиеОтсутствия, 		ПеречислениеТипыОбъектов.Отсутствие);
	
	Возврат ТипЗаявкиТипОбъекта;

КонецФункции

Процедура ДобавитьБлокировкуРегистрацияОбъектовДляОбмена(Блокировка, ОбъектыДляРегистрации) Экспорт
	
	ВыгружаемыеОбъекты = Неопределено;
	ОбъектыДляРегистрации.Свойство("ВыгружаемыеОбъекты", ВыгружаемыеОбъекты);
	Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ВыгружаемыеОбъекты;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	ИзмененияДляОбмена = Неопределено;
	ОбъектыДляРегистрации.Свойство("ИзмененияДляОбмена", ИзмененияДляОбмена);
	Если ЗначениеЗаполнено(ИзмененияДляОбмена) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДляОбмена;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
	КонецЕсли;
	
	ИнтеграцияКабинетСотрудникаВнутренний.ДобавитьБлокировкуРегистрацияОбъектовДляОбмена(Блокировка, ОбъектыДляРегистрации);

КонецПроцедуры

Процедура ЗаписатьОбъектыДляОбмена(ОбъектыДляРегистрации) Экспорт

	ВыгружаемыеОбъекты = Неопределено;
	ОбъектыДляРегистрации.Свойство("ВыгружаемыеОбъекты", ВыгружаемыеОбъекты);
	Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
		Для каждого СтрокаТЗ Из ВыгружаемыеОбъекты Цикл 
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			Если СтрокаТЗ.Удалить Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИзмененияДляОбмена = Неопределено;
	ОбъектыДляРегистрации.Свойство("ИзмененияДляОбмена", ИзмененияДляОбмена);
	Если ЗначениеЗаполнено(ИзмененияДляОбмена) Тогда
		Для каждого СтрокаТЗ Из ИзмененияДляОбмена Цикл 
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли; 
	
	ИнтеграцияКабинетСотрудникаВнутренний.ЗаписатьОбъектыДляОбмена(ОбъектыДляРегистрации);
	
КонецПроцедуры

Функция ФизическиеЛицаИсключения() Экспорт

	ФизическиеЛицаИсключения = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенияИзПравил.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсключенияИзПравил.Публикуется КАК Публикуется
	|ИЗ
	|	РегистрСведений.ИсключенияИзПравилПубликацииКабинетСотрудника КАК ИсключенияИзПравил";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаИсключения.Вставить(Выборка.ФизическоеЛицо, Выборка.Публикуется);
	КонецЦикла;
	
	Возврат ФизическиеЛицаИсключения;

КонецФункции

#КонецОбласти

#КонецОбласти


