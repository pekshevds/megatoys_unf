
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обработка заявлений абонента 
//             на подключение электронной подписи в модели сервиса".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регламентное задание.
Процедура ОбработкаЗаявленийАбонентов(ДокументЗаявление) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если ЗначениеЗаполнено(ДокументЗаявление) Тогда
		
		Если ДокументЗаявление.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено
			И НЕ ДокументЗаявление.ПометкаУдаления
			И ДокументЗаявление.Дата + 2 * 30 * 24 * 60 * 60 > ТекущаяДатаСеанса() Тогда
			
			МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.ОпределитьМестоХраненияКлюча(ДокументЗаявление.МодельХраненияЗакрытогоКлюча, 
									ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "УчетнаяЗапись"));
			Если КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(МестоХраненияКлюча) Тогда
				ЗаявлениеОбработано = ОбработкаЗаявленийАбонентаВызовСервера.ОбработатьИзменениеСтатусаЗаявленияАбонентаВМоделиСервиса(ДокументЗаявление);
			Иначе
				РезультатОтветаСервера 	= ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьИРазобратьОтветНаЗаявление(ДокументЗаявление,,Истина);
				ЗаявлениеОбработано 	= РезультатОтветаСервера.Выполнено И РезультатОтветаСервера.СтатусИзменился;
			КонецЕсли;
			
			Если ЗаявлениеОбработано Тогда
				ОбработкаЗаявленийАбонентаВызовСервера.ОтключитьОтслеживаниеИзменениеСтатусаЗаявления(ДокументЗаявление);
			КонецЕсли;
			
		Иначе
			
			ОбработкаЗаявленийАбонентаВызовСервера.ОтключитьОтслеживаниеИзменениеСтатусаЗаявления(ДокументЗаявление);
			
		КонецЕсли;
		
	Иначе
		
		ОбработкаЗаявленийАбонентаВызовСервера.ОтключитьОтслеживаниеИзменениеСтатусаЗаявления(ДокументЗаявление);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьЗаявлениеАбонентаВМоделиСервиса(Знач ЗаявлениеАбонента, Знач Алгоритм) Экспорт
	
	ДанныеЗаявления = ПодготовитьЗаявление(ЗаявлениеАбонента, Алгоритм);
	
	Если ЗаявлениеАбонента.ПодписатьЭП Тогда
		Результат = МенеджерСервисаКриптографии.СформироватьЗаявлениеДляПодписания(ДанныеЗаявления);
	Иначе
		Результат = МенеджерСервисаКриптографии.ОтправитьЗаявлениеНаПодключение(ДанныеЗаявления);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЗаявлениеСформироватьЗаявлениеНаРегистрацию(
		Знач ДокументЗаявление, 
		ТекстЗапросаНаСертификат, 
		Знач ИдентификаторАбонента = "",
		АлгоритмКонтейнераКлючей = Неопределено) Экспорт
	//необходимо
	//1. сформировать XML файл
	//2. вставить в него запрос
	//3. заархивировать
	//4. отдать на сторону клиента
	
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);
	
	ВременныйКаталогНаСервере = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
	
	ИмяВременногоФайлаЗаявления = ВременныйКаталогНаСервере + "file";
	ИмяВременногоФайлаАрхива = ВременныйКаталогНаСервере + "архив.zip";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайлаЗаявления,"windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Заявление");
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм","2.10");
		
	ЗаписьXML.ЗаписатьАтрибут("ДатаВремяФормирования", XMLСтрока(ТекущаяДатаСеанса()));
	ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	УказатьУчетку = 
		(ДокументЗаявление.ЭтоМультиРежим 
		ИЛИ ДокументЗаявление.ЭтоМультиРежимИсходный)
		И ЗначениеЗаполнено(ИдентификаторАбонента)
		И НЕ МультирежимКлиентСервер.ЭтоПодключениеМультирежима(ДокументЗаявление);
	
	Если УказатьУчетку Тогда
		ЗаписатьУзелXML(ЗаписьXML,"ТипЗаявления", "2");
	Иначе
		ЗаписатьУзелXML(ЗаписьXML,"ТипЗаявления", "1");
	КонецЕсли;
	
	ДописатьВЗаявлениеПоляДляСтатистики(ЗаписьXML);	
	
	ДописатьВЗаявлениеИдентификаторПартнера(ЗаписьXML, ДокументЗаявление);
	
	Если УказатьУчетку Тогда
		ЗаписатьУзелXML(ЗаписьXML,"УчетнаяЗапись", ИдентификаторАбонента, Истина);
	КонецЕсли;
	
	ЗаписатьУзелXML(ЗаписьXML,"ПризнакЮридическогоЛица", XMLСтрока(СтрДлина(ДокументЗаявление.ИНН)=10));
	ЗаписатьУзелXML(ЗаписьXML,"ПризнакОбособленногоПодразделения",XMLСтрока(ДокументЗаявление.ПризнакОбособленногоПодразделения));
	
	ЗаписатьУзелXML(ЗаписьXML,"ИНН", ДокументЗаявление.ИНН);
	ЗаписатьУзелXML(ЗаписьXML,"КПП", ДокументЗаявление.КПП, Истина);
	ЗаписатьУзелXML(ЗаписьXML,"ОГРН", ДокументЗаявление.ОГРН, Истина);
	
	Если НЕ ЗначениеЗаполнено(ДокументЗаявление.ОГРН) И ДокументЗаявление.ЭтоНотариусАдвокатИлиГКФХ Тогда
		ЗаписатьУзелXML(ЗаписьXML,"ПризнакФизическогоЛица", XMLСтрока(Истина));
	КонецЕсли;
	
	// Если  рег. номер пустой, значит он не будет записан в заявление, а в метод отправки заявления будет передан тикет
	ЗаписатьУзелXML(ЗаписьXML,"НомерОсновнойПоставки1с", ДокументЗаявление.НомерОсновнойПоставки1с, Истина);
	
	ЗаписатьУзелXML(ЗаписьXML,"КраткоеНаименование", ДокументЗаявление.КраткоеНаименование);

	// Оба телефона на ВР относятся к организаци
	ЗаписатьУзелXML(ЗаписьXML,"ТелефонОсновной", ДокументЗаявление.ТелефонОсновной);
	
	ЗаписатьУзелXML(ЗаписьXML,"ЭлектроннаяПочта", ДокументЗаявление.ЭлектроннаяПочтаОрганизации);
	
	ЗаписатьУзелXML(ЗаписьXML,"РегНомерПФР", ДокументЗаявление.РегНомерПФР, Истина);
	
	ЗаписатьУзелXML(ЗаписьXML,"Комментарий", ДокументЗаявление.Комментарий, Истина);
	
	ЗаписатьАдресXML(ЗаписьXML,"АдресЮридический", ДокументЗаявление);
	ЗаписатьАдресXML(ЗаписьXML,"АдресФактический", ДокументЗаявление);
	
	ТаблицаПользователей = Мультирежим.ТаблицаПользователейСДопПолями(ДокументЗаявление);
	
	ДописатьВЗаявлениеСведенияОВладельцеЭП(
		ДокументЗаявление,
		ТаблицаПользователей,
		ЗаписьXML,
		ТекстЗапросаНаСертификат,,,
		АлгоритмКонтейнераКлючей);
		
	ДописатьВЗаявлениеСведенияОПотенциальныхВладельцахЭП(
		ДокументЗаявление,
		ТаблицаПользователей,
		ЗаписьXML);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Получатели");
	
	ТаблицаПолучателей = ДокументЗаявление.Получатели.Выгрузить();
	ТаблицаПолучателей.Сортировать("ТипПолучателя, КодПолучателя, КПП");
	
	Для Счетчик = 0 По ТаблицаПолучателей.Количество() - 1 Цикл
		Получатель = ТаблицаПолучателей[Счетчик];
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
		ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", XMLСтрока(Получатель.ТипПолучателя));
		
		// если получатель - ФСС, ЦБ, пишем только тип получателя, а код получателя не записываем, его у нас и нет
		Если Получатель.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС
		ИЛИ Получатель.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ЦБ Тогда
			ЗаписатьУзелXML(ЗаписьXML, "КодПолучателя", Получатель.КодПолучателя, Истина);
		Иначе 
			ЗаписатьУзелXML(ЗаписьXML, "КодПолучателя", Получатель.КодПолучателя);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Получатель.КПП) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("ПереченьКПП");
			ЗаписатьУзелXML(ЗаписьXML, "КПП", Получатель.КПП);
			
			Для Счетчик1 = Счетчик + 1 По ТаблицаПолучателей.Количество() - 1 Цикл
				Получатель1 = ТаблицаПолучателей[Счетчик1];
				
				Если Получатель1.ТипПолучателя = Получатель.ТипПолучателя И
					Получатель1.КодПолучателя = Получатель.КодПолучателя И
					Не ПустаяСтрока(Получатель1.КПП) Тогда
					
					ЗаписатьУзелXML(ЗаписьXML, "КПП", Получатель1.КПП);
					Счетчик = Счетчик1;
					
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // конец элемента Получатель
		
	КонецЦикла;
	
	Если ДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
		ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", "ФСРАР");
		ЗаписатьУзелXML(ЗаписьXML, "КодПолучателя", XMLСтрока(ДокументЗаявление.КодРегионаФСРАР));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Если ДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
		ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", "РПН");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Если ДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
		ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", "ФТС");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписатьУзелXML(ЗаписьXML,"Тариф", Строка(ДокументЗаявление.ТарифОператораЭДО), Истина);
	ДописатьВЗаявлениеМультиРежим(ДокументЗаявление, ЗаписьXML);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	АдресТекстаОтправленногоЗаявления = ПоместитьВоВременноеХранилище(
		Новый ДвоичныеДанные(ИмяВременногоФайлаЗаявления), 
		Новый УникальныйИдентификатор);
		
	УдалитьФайлы(ВременныйКаталогНаСервере);
	
	Возврат АдресТекстаОтправленногоЗаявления;
	
КонецФункции

Функция ЗаявлениеСформироватьЗаявлениеНаИзменение(
		Знач ДокументЗаявление, 
		ТекстЗапросаНаСертификат,
		Знач ИдентификаторАбонента = "",
		АлгоритмКонтейнераКлючей = Неопределено) Экспорт
	//необходимо 
	//1. сформировать XML файл
	//2. вставить в него запрос
	//3. заархивировать
	//4. отдать на сторону клиента
	
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.СвойстваМестаХраненияКлюча(ДокументЗаявление.МодельХраненияЗакрытогоКлюча,
							ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "УчетнаяЗапись"));
							
	ИзмененияОблачнойПодписи = Ложь;
	Если ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
		ТелефонПользователя = ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "Телефон");
		ПочтаПользователя = ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "ЭлектроннаяПочта");
		ИзмененияОблачнойПодписи = ЗначениеЗаполнено(ТелефонПользователя) ИЛИ ЗначениеЗаполнено(ПочтаПользователя);
		ИзмененияОблачнойПодписи = ИзмененияОблачнойПодписи ИЛИ ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "СоздатьНовуюУчетнуюЗапись");
		ИзмененияОблачнойПодписи = ИзмененияОблачнойПодписи ИЛИ ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "ПовторнаяОтправкаКодаАвторизации");
		ИзмененияОблачнойПодписи = ИзмененияОблачнойПодписи ИЛИ ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "ПовторнаяОтправкаКлючаМобильногоПриложения");
		ИзмененияОблачнойПодписи = ИзмененияОблачнойПодписи 
									ИЛИ ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "СменитьКлючМобильногоПриложения")
									ИЛИ ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "СменитьКлючМобильногоПриложенияАвтоматически");
		ИзмененияОблачнойПодписи = ИзмененияОблачнойПодписи ИЛИ ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "СменитьПароль");
	КонецЕсли;
	
	ТЧ = ДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления;
	
	ВременныйКаталогНаСервере = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();

	ИмяВременногоФайлаЗаявления = ВременныйКаталогНаСервере + "file";
	ИмяВременногоФайлаАрхива = ВременныйКаталогНаСервере + "архив.zip";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайлаЗаявления,"windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Заявление");
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм","2.10");
	ЗаписьXML.ЗаписатьАтрибут("ДатаВремяФормирования", XMLСтрока(ТекущаяДатаСеанса()));
	ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ЗаписатьУзелXML(ЗаписьXML,"ТипЗаявления", "2");
	
	ДописатьВЗаявлениеПоляДляСтатистики(ЗаписьXML);
	
	ЗаписатьУзелXML(ЗаписьXML,"УчетнаяЗапись", ИдентификаторАбонента);
	
	Перечисление = Перечисления.ПараметрыПодключенияК1СОтчетности;
	
	// Продление лицензии
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.ПродлениеЛицензии) Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ПродлениеЛицензии", XMLСтрока(Истина));
	КонецЕсли;
	
	ЗаписатьУзелXML(ЗаписьXML,"ИНН", ДокументЗаявление.ИНН);
	
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.КПП) Тогда
		ЗаписатьУзелXML(ЗаписьXML,"КПП", ДокументЗаявление.КПП, Истина);
	КонецЕсли;
	
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.ОГРН) Тогда
		ЗаписатьУзелXML(ЗаписьXML,"ОГРН", ДокументЗаявление.ОГРН, Истина);
	КонецЕсли;
	
	Если ДокументЗаявление.ЭтоНотариусАдвокатИлиГКФХ Тогда
		ЗаписатьУзелXML(ЗаписьXML,"ПризнакФизическогоЛица", XMLСтрока(Истина));
	КонецЕсли;
	
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.НомерОсновнойПоставки1С) Тогда
		ЗаписатьУзелXML(ЗаписьXML,"НомерОсновнойПоставки1с", ДокументЗаявление.НомерОсновнойПоставки1с);
	КонецЕсли;
	
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.КраткоеНаименование) Тогда
		ЗаписатьУзелXML(ЗаписьXML,"КраткоеНаименование", ДокументЗаявление.КраткоеНаименование);
	КонецЕсли;
	
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.ТелефонОсновной) Тогда
		ЗаписатьУзелXML(ЗаписьXML,"ТелефонОсновной", ДокументЗаявление.ТелефонОсновной);
	КонецЕсли;
	
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.ЭлектроннаяПочтаОрганизации) Тогда
		ЗаписатьУзелXML(ЗаписьXML,"ЭлектроннаяПочта", ДокументЗаявление.ЭлектроннаяПочтаОрганизации);
	КонецЕсли;
	
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.РегНомерПФР) Тогда
		ЗаписатьУзелXML(ЗаписьXML,"РегНомерПФР", ДокументЗаявление.РегНомерПФР);
	КонецЕсли;
	
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.Область)
		ИЛИ ЭтотПараметрИзменился(ТЧ, Перечисление.Город)
		ИЛИ ЭтотПараметрИзменился(ТЧ, Перечисление.Улица) Тогда
		ЗаписатьАдресXML(ЗаписьXML,"АдресЮридический", ДокументЗаявление);
	КонецЕсли;
	
	// Узел ВладельцыЭЦП
	ТребуетсяПереизданиеСертификата = Ложь;
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.ПереизданиеСертификата) Тогда
		 ТребуетсяПереизданиеСертификата = Истина;
	 КонецЕсли;
	 
	ИзменилисьРеквизитыУзлаВладельцыЭЦП = Ложь;
	Если ЭтотПараметрИзменился(ТЧ, Перечисление.ВладелецЭЦП)
		ИЛИ ЭтотПараметрИзменился(ТЧ, Перечисление.ВладелецЭЦПДолжность)
		ИЛИ ЭтотПараметрИзменился(ТЧ, Перечисление.ВладелецЭЦППодразделение)
		ИЛИ ЭтотПараметрИзменился(ТЧ, Перечисление.ВладелецЭЦПИНН)
		ИЛИ ЭтотПараметрИзменился(ТЧ, Перечисление.ВладелецЭЦПФИО) Тогда
		 ИзменилисьРеквизитыУзлаВладельцыЭЦП = Истина;
	КонецЕсли;
	
	// Если это переход в облако, заявление будет отправлено не этой функцией, а из базы заявок.
	// Если это переход в коробку, то данное изменение корректно
	ИзменилсяКриптопровайдер = ЭтотПараметрИзменился(ТЧ, Перечисление.ИзменениеКриптопровайдера);
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);
	
	ИзменилисьНастройкиПользователей = ЭтотПараметрИзменился(ТЧ, Перечисление.НастройкиПользователей);
	ИзменилсяМультиРежим = ЭтотПараметрИзменился(ТЧ, Перечисление.МультиРежим);
	
	ИзменилисьКонтактыОтправителя = 
		ЭтотПараметрИзменился(ТЧ, Перечисление.ЭлектроннаяПочта)
		ИЛИ ЭтотПараметрИзменился(ТЧ, Перечисление.ТелефонМобильный)
		ИЛИ ЭтотПараметрИзменился(ТЧ, Перечисление.ПолучатьСМСУведомления);
	
	ТаблицаПользователей = Мультирежим.ТаблицаПользователейСДопПолями(ДокументЗаявление);

	Если ИзменилисьРеквизитыУзлаВладельцыЭЦП 
		ИЛИ ТребуетсяПереизданиеСертификата 
		ИЛИ ИзменилсяКриптопровайдер
		ИЛИ ИспользоватьСуществующий 
		ИЛИ ИзмененияОблачнойПодписи
		ИЛИ ИзменилисьНастройкиПользователей
		ИЛИ ИзменилисьКонтактыОтправителя
		ИЛИ ИзменилсяМультиРежим
		ИЛИ ДокументЗаявление.ЭтоМультиРежим Тогда

		ДописатьВЗаявлениеСведенияОВладельцеЭП(
			ДокументЗаявление,
			ТаблицаПользователей,
			ЗаписьXML,
			ТекстЗапросаНаСертификат,
			Ложь, 
			ТребуетсяПереизданиеСертификата,
			АлгоритмКонтейнераКлючей);

	КонецЕсли;
	
	Если ИзменилисьНастройкиПользователей 
		ИЛИ МультирежимКлиентСервер.ЭтоПодключениеМультирежима(ДокументЗаявление) Тогда
		
		ДописатьВЗаявлениеСведенияОПотенциальныхВладельцахЭП(
			ДокументЗаявление,
			ТаблицаПользователей,
			ЗаписьXML);
			
	КонецЕсли;
	
	// Узел Получатели
	КодРегионаФСРАРИзменился = ЭтотПараметрИзменился(ТЧ, Перечисление.КодРегионаФСРАР);
	
	ИзменитьСоставКонтролирующихОрганов = 
		ИзменилсяСоставКонтролирующихОрганов(ТЧ)
		ИЛИ КодРегионаФСРАРИзменился;
	
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Получатели");
		
		ТаблицаПолучателей = ДокументЗаявление.Получатели.Выгрузить();
		ТаблицаПолучателей.Сортировать("ТипПолучателя, КодПолучателя, КПП");
		
		Для Счетчик = 0 По ТаблицаПолучателей.Количество()-1 Цикл
			Получатель = ТаблицаПолучателей[Счетчик];
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
			ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", XMLСтрока(Получатель.ТипПолучателя));
			Если Получатель.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ЦБ Тогда
				ЗаписатьУзелXML(ЗаписьXML, "КодПолучателя", Получатель.КодПолучателя, Истина);
			Иначе
				ЗаписатьУзелXML(ЗаписьXML, "КодПолучателя", Получатель.КодПолучателя);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Получатель.КПП) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("ПереченьКПП");
				ЗаписатьУзелXML(ЗаписьXML, "КПП", Получатель.КПП);
				
				Для Счетчик1 = Счетчик + 1 По ТаблицаПолучателей.Количество() - 1 Цикл
					Получатель1 = ТаблицаПолучателей[Счетчик1];
					
					Если Получатель1.ТипПолучателя = Получатель.ТипПолучателя И
						Получатель1.КодПолучателя = Получатель.КодПолучателя И
						Не ПустаяСтрока(Получатель1.КПП) Тогда
						
						ЗаписатьУзелXML(ЗаписьXML, "КПП", Получатель1.КПП);
						Счетчик = Счетчик1;
						
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // конец элемента Получатель
			
		КонецЦикла;
		
		Если ДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
			ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", "ФСРАР");
			ЗаписатьУзелXML(ЗаписьXML, "КодПолучателя", XMLСтрока(ДокументЗаявление.КодРегионаФСРАР));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
		Если ДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
			ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", "РПН");
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
		Если ДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
			ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", "ФТС");
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ДописатьВЗаявлениеМультиРежим(ДокументЗаявление, ЗаписьXML);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ЗаписьXML.Закрыть();
	
	АдресТекстаОтправленногоЗаявления = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлаЗаявления), Новый УникальныйИдентификатор);
	
	Возврат АдресТекстаОтправленногоЗаявления;
	
КонецФункции

Функция СоздатьЗаявлениеНаИзменениеВСкрытомРежиме(Организация) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ОбработкаЗаявленийАбонентаВызовСервера.ПоддерживаетсяВторичноеЗаявление(УчетнаяЗапись) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДопРеквизиты = КонтекстЭДОСервер.ДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись);
	
	Если НЕ ЗначениеЗаполнено(ДопРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем реквизиты организации
	ДанныеЗаполнения 	= СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ДанныеЗаполнения(Организация);
	ДанныеОрганизации 	= ДанныеЗаполнения.СтруктураДанныхОрганизации;
	
	// Создаем заявление на изменение настроек подключения
	НовыйДокументЗаявление = Документы.ЗаявлениеАбонентаСпецоператораСвязи.СоздатьДокумент();
	
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСведенияОрганизации(
		НовыйДокументЗаявление,
		ДопРеквизиты,
		ДанныеЗаполнения,
		ДанныеОрганизации,
		Организация,
		УчетнаяЗапись);
	
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСлужебныеСведения(
		НовыйДокументЗаявление);
	
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьТелефоны(
		НовыйДокументЗаявление,
		ДопРеквизиты);
		
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСведенияВладельцаЭП(
		НовыйДокументЗаявление,
		ДанныеОрганизации,
		ДопРеквизиты);
	
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьНаправленияСдачиОтчетности(
		НовыйДокументЗаявление,
		ДопРеквизиты);
		
	НовыйДокументЗаявление.ЭтоМультиРежим = Мультирежим.ЭтоМультиРежим(УчетнаяЗапись);
	НовыйДокументЗаявление.ПоддерживаетсяМультирежим = Мультирежим.ПоддерживаетсяМультирежим();
	
	СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ТаблицаПользователей(НовыйДокументЗаявление);
		
	Данные = КонтекстЭДОСервер.ДанныеУЦИзВебСервиса(НовыйДокументЗаявление.СпецоператорСвязи);
	Если Данные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НовыйДокументЗаявление, Данные);
	КонецЕсли;
	
	Возврат НовыйДокументЗаявление;
	
КонецФункции

Функция СоздатьНовоеЗаявлениеНаПереход(ВходящийКонтекст) Экспорт
	
	Организация 		= ВходящийКонтекст.Организация;
	ЭтоПереходВКоробку 	= ВходящийКонтекст.ЭтоПереходВКоробку;
	
	НовыйДокументЗаявление = СоздатьЗаявлениеНаИзменениеВСкрытомРежиме(Организация);
	
	Если ЭтоПереходВКоробку Тогда
		НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса = Ложь;
		НовыйДокументЗаявление.МодельХраненияЗакрытогоКлюча = Перечисления.МодельХраненияЗакрытогоКлюча.ЛокальныйКлюч;
		НовыйДокументЗаявление.ТипКриптопровайдера = ВходящийКонтекст.ТипКриптопровайдера;
	Иначе
		ЗаполнитьЗначенияСвойств(НовыйДокументЗаявление, ВходящийКонтекст);
		НовыйДокументЗаявление.СпособПодтвержденияКриптоопераций = Перечисления.СпособыПодтвержденияКриптоопераций.СессионныйТокен;
		НовыйДокументЗаявление.МодельХраненияЗакрытогоКлюча = Перечисления.МодельХраненияЗакрытогоКлюча.ВМоделиСервиса;
		НовыйДокументЗаявление.ТипКриптопровайдера = Перечисления.ТипыКриптоПровайдеров.CryptoPro;
	КонецЕсли;
	
	ЗаполнитьИзменившиесяРеквизитыЗаявленияНаПеренос(НовыйДокументЗаявление, ЭтоПереходВКоробку);
	
	Попытка
		НовыйДокументЗаявление.Записать();
	Исключение
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ИнформацияОбОшибке().Описание);
		ТекстСообщения = НСтр("ru = 'Отправка заявления прервана.'");
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НовыйДокументЗаявление.Ссылка;
	
КонецФункции

Функция ПолучитьДанныеСотрудника(ВидВладельцаЭЦП, ДанныеОрганизации, Сотрудник) Экспорт
	
	ИНН              = "";
	ФИО              = "";
	ВидДокумента     = "";
	Серия            = "";
	Номер            = "";
	ДатаВыдачи       = "";
	КемВыдан         = "";
	ВидДокумента     = "";
	Подразделение    = "";
	Должность        = "";
	СНИЛС            = "";
	ДатаРождения     = Неопределено;
	МестоРождения    = "";
	КодПодразделения = "";
	Пол              = Неопределено;
	Гражданство      = Неопределено;
	Телефон          = "";
	ЭлектроннаяПочта = "";
	
	Попытка
		
		ЭтоЮрЛицо = Ложь;
		Если ДанныеОрганизации.Свойство("ТипОрганизации") Тогда
			ЭтоЮрЛицо = ДанныеОрганизации.ТипОрганизации;
		Иначе
			ЭтоЮрЛицо = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(ДанныеОрганизации.Организация);
		КонецЕсли;
		
		Если ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.Руководитель И ЭтоЮрЛицо Тогда //заполняем директора
			
			ДанныеОрганизации.Свойство("СтруктураФИОРук", 		ФИО);
			ДанныеОрганизации.Свойство("ВидУдЛичнРук", 			ВидДокумента);
			ДанныеОрганизации.Свойство("СерияУдЛичнРук", 		Серия);
			ДанныеОрганизации.Свойство("НомерУдЛичнРук", 		Номер);
			ДанныеОрганизации.Свойство("ДатаУдЛичнРук", 		ДатаВыдачи);
			ДанныеОрганизации.Свойство("ОрганВыданУдЛичнРук", 	КемВыдан);
			ДанныеОрганизации.Свойство("ДолжностьРук", 			Должность);
			ДанныеОрганизации.Свойство("СНИЛСРук", 				СНИЛС);
			ДанныеОрганизации.Свойство("ДатаРождРук", 			ДатаРождения);
			ДанныеОрганизации.Свойство("МестоРождРук", 			МестоРождения);
			ДанныеОрганизации.Свойство("КодПодрУдЛичнРук", 		КодПодразделения);
			ДанныеОрганизации.Свойство("ПолРук", 				Пол);
			ДанныеОрганизации.Свойство("ГраждРук", 				Гражданство);
			ДанныеОрганизации.Свойство("ТелРук", 				Телефон);
			
			// Процедура ПолучитьСведенияОбОрганизации возвращает пол числом,
			// а нужно перечислением.
			Пол = ПолИзЧислаВПеречисление(Пол);
			
			// Процедура ПолучитьСведенияОбОрганизации возвращает код страны,
			// а нужен элемент справочника.
			Если ЗначениеЗаполнено(Гражданство) Тогда
				Гражданство = Справочники.СтраныМира.НайтиПоКоду(Гражданство);
			КонецЕсли;
			
			ДанныеИсполнителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя(Сотрудник, ДанныеОрганизации.Организация);
			ДанныеИсполнителя.Свойство("Подразделение", Подразделение);
				
		ИначеЕсли ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер И ЭтоЮрЛицо Тогда //заполняем бухгалтера
			
			ДанныеОрганизации.Свойство("СтруктураФИОБух", 		ФИО);
			ДанныеОрганизации.Свойство("ВидУдЛичнБух", 			ВидДокумента);
			ДанныеОрганизации.Свойство("СерияУдЛичнБух", 		Серия);
			ДанныеОрганизации.Свойство("НомерУдЛичнБух", 		Номер);
			ДанныеОрганизации.Свойство("ДатаУдЛичнБух", 		ДатаВыдачи);
			ДанныеОрганизации.Свойство("ОрганВыданУдЛичнБух", 	КемВыдан);
			ДанныеОрганизации.Свойство("ДолжностьБух", 			Должность);
			ДанныеОрганизации.Свойство("СНИЛСБух", 				СНИЛС);
			ДанныеОрганизации.Свойство("ДатаРождБух", 			ДатаРождения);
			ДанныеОрганизации.Свойство("МестоРождБух", 			МестоРождения);
			ДанныеОрганизации.Свойство("КодПодрУдЛичнБух", 		КодПодразделения);
			ДанныеОрганизации.Свойство("ПолБух", 				Пол);
			ДанныеОрганизации.Свойство("ГраждБух", 				Гражданство);
			ДанныеОрганизации.Свойство("ТелБух", 				Телефон);
			
			// Процедура ПолучитьСведенияОбОрганизации возвращает пол числом,
			// а нужно перечислением.
			Пол = ПолИзЧислаВПеречисление(Пол);
			
			// Процедура ПолучитьСведенияОбОрганизации возвращает код страны,
			// а нужен элемент справочника.
			Если ЗначениеЗаполнено(Гражданство) Тогда
				Гражданство = Справочники.СтраныМира.НайтиПоКоду(Гражданство);
			КонецЕсли;
			
			ДанныеИсполнителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя(Сотрудник, ДанныеОрганизации.Организация);
			ДанныеИсполнителя.Свойство("Подразделение", Подразделение);
			
		ИначеЕсли ВидВладельцаЭЦП = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник ИЛИ ЗначениеЗаполнено(Сотрудник) Тогда //заполняем сотрудника
			
			ДанныеИсполнителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя(Сотрудник, ДанныеОрганизации.Организация);
			
			Если ДанныеИсполнителя <> Неопределено Тогда
				ДанныеИсполнителя.Свойство("ФИО", 				ФИО);
				ДанныеИсполнителя.Свойство("ВидДокумента", 		ВидДокумента);
				ДанныеИсполнителя.Свойство("Серия", 			Серия);
				ДанныеИсполнителя.Свойство("Номер", 			Номер);
				ДанныеИсполнителя.Свойство("ДатаВыдачи", 		ДатаВыдачи);
				ДанныеИсполнителя.Свойство("КемВыдан", 			КемВыдан);
				ДанныеИсполнителя.Свойство("Должность", 		Должность);
				ДанныеИсполнителя.Свойство("СНИЛС", 			СНИЛС);
				ДанныеИсполнителя.Свойство("Подразделение", 	Подразделение);
				ДанныеИсполнителя.Свойство("ДатаРождения", 		ДатаРождения);
				ДанныеИсполнителя.Свойство("МестоРождения", 	МестоРождения);
				ДанныеИсполнителя.Свойство("КодПодразделения", 	КодПодразделения);
				ДанныеИсполнителя.Свойство("Пол", 				Пол);
				ДанныеИсполнителя.Свойство("Гражданство", 		Гражданство);
				ДанныеИсполнителя.Свойство("ТелефонРабочий", 	Телефон);
				
				// Процедура ПолучитьДанныеИсполнителя возвращает пол строкой,
				// а нужно перечислением.
				Пол = ПолИзСтрокиВПеречисление(Пол);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Электронный документооборот с контролирующими органами. Не удалось получить сведения о сотруднике'");
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДокументооборотСКОКлиентСервер.ЗаписьСобытияВЖурналРегистрации(ТекстСообщения, ОписаниеОшибки);
				
	КонецПопытки;
	
	// Дополнительная попытка определить ФИО
	Если ПустаяСтрока(ФИО) Тогда
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			ФИО = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Сотрудник);
		Иначе
			ФИО = Новый Структура("Фамилия, Имя, Отчество");
		КонецЕсли;
	КонецЕсли;
	
	// Гражданство.
	Если НЕ ЗначениеЗаполнено(Гражданство) Тогда
		Гражданство = Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;
	
	//Место рождения.
	МестоРождения = ПредставлениеМестаРождения(МестоРождения);

	// ИНН, ЭлектроннаяПочта
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ИНН = ИННФизЛица(Сотрудник);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		ЭлектроннаяПочта = EMailФизическиеЛица(Сотрудник);
			
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ФИО",           ФИО);
	Результат.Вставить("ВидДокумента",  ВидДокумента);
	Результат.Вставить("Серия",         Серия);
	Результат.Вставить("Номер",         Номер);
	Результат.Вставить("ДатаВыдачи",    ДатаВыдачи);
	Результат.Вставить("КемВыдан",      КемВыдан);
	Результат.Вставить("Должность",     Должность);
	Результат.Вставить("Подразделение", Подразделение);
	Результат.Вставить("СНИЛС",         СНИЛС);
	Результат.Вставить("ДатаРождения",  ДатаРождения);
	Результат.Вставить("МестоРождения", МестоРождения);
	Результат.Вставить("КодПодразделения", КодПодразделения);
	Результат.Вставить("Пол",           Пол);
	Результат.Вставить("Гражданство",   Гражданство);
	Результат.Вставить("ТелефонРабочий",Телефон);
	Результат.Вставить("ИНН",           ИНН);
	Результат.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	
	Возврат Результат;
	
КонецФункции

#Область ДляБП3

Функция ПользовательНачалИспользоватьОтчетность(Организация) Экспорт
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат);
	Состояния.Добавить(Перечисления.СостояниеСдачиОтчетности.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Состояния", Состояния);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|    ЖурналОтчетовСтатусы.Ссылка КАК Ссылка
	|ИЗ
	|    РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|ГДЕ
	|    НЕ ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности В (&Состояния)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|    ЖурналОтправокВКонтролирующиеОрганы.Ссылка
	|ИЗ
	|    РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
	|ГДЕ
	|    НЕ ЖурналОтправокВКонтролирующиеОрганы.СостояниеСдачиОтчетности В (&Состояния)";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДобавитьОтборПоОрганизации(Запрос, Организация);
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СостояниеЗаявленияНаПодключениеОтчетности(Организация) Экспорт
	
	// Состояние подключения отчетности определяем по наличию заявления.
	// Если есть хотя бы одно заявление со статусом Одобрено, то возвращаем состояние "Одобрено".
	// Если нет ни одного одобренного, но есть хотя бы одно со статусом Отправлено, то возвращаем состояние "Отправлено"
	// Если нет ни одного отправленного, но есть хотя бы одно "Отклонено", то возвращаем состояние "Отклонено".
	// Если ни одна ситуация выше не подходит, возвращаем состояние "НеСоздано".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|    ЗаявлениеАбонентаСпецоператораСвязи.Статус КАК Статус,
	|    МАКСИМУМ(ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления) КАК ДатаОтправкиЗаявления
	|ПОМЕСТИТЬ СтатусыЗаявлений
	|ИЗ
	|    Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|ГДЕ
	|    НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|    ЗаявлениеАбонентаСпецоператораСвязи.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|    СтатусыЗаявлений.Статус КАК Статус,
	|    ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Заявление
	|ИЗ
	|    СтатусыЗаявлений КАК СтатусыЗаявлений
	|        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|        ПО СтатусыЗаявлений.ДатаОтправкиЗаявления = ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления
	|            И СтатусыЗаявлений.Статус = ЗаявлениеАбонентаСпецоператораСвязи.Статус
	|            И (НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления)";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДобавитьОтборПоОрганизации(Запрос, Организация);
	КонецЕсли;
	
	СостояниеЗаявления = Новый Структура;
	СостояниеЗаявления.Вставить("Состояние", "НеСоздано");
	СостояниеЗаявления.Вставить("Заявление", Неопределено);
	
	СтатусыЗаявлений = Запрос.Выполнить().Выгрузить();
	
	СтатусЗаявленияОдобрено = СтатусыЗаявлений.Найти(Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
	Если СтатусЗаявленияОдобрено <> Неопределено Тогда
		СостояниеЗаявления.Состояние = "Одобрено";
		СостояниеЗаявления.Заявление = СтатусЗаявленияОдобрено.Заявление;
		Возврат СостояниеЗаявления;
	КонецЕсли;
	
	СтатусЗаявленияОдобрено = СтатусыЗаявлений.Найти(Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
	Если СтатусЗаявленияОдобрено <> Неопределено Тогда
		СостояниеЗаявления.Состояние = "Отправлено";
		СостояниеЗаявления.Заявление = СтатусЗаявленияОдобрено.Заявление;
		Возврат СостояниеЗаявления;
	КонецЕсли;
	
	СтатусЗаявленияОдобрено = СтатусыЗаявлений.Найти(Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
	Если СтатусЗаявленияОдобрено <> Неопределено Тогда
		СостояниеЗаявления.Состояние = "Отклонено";
		СостояниеЗаявления.Заявление = СтатусЗаявленияОдобрено.Заявление;
		Возврат СостояниеЗаявления;
	КонецЕсли;
	
	Возврат СостояниеЗаявления;
	
КонецФункции

Процедура ДобавитьОтборПоОрганизации(Запрос, Организация)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	// Добавляем отбор по организации
	Для Каждого Оператор Из СхемаЗапроса.ПакетЗапросов[0].Операторы Цикл
		
		Условия = Оператор.Отбор;
		
		Для Каждого Источник Из Оператор.Источники Цикл
			Условия.Добавить(СтрШаблон("%1.Организация = &Организация", Источник.Источник.Псевдоним));
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьАдресаОрганизации_ВСтаромФормате(СтруктураРеквизитов, ДанныеОрганизации) Экспорт
	
	Если НЕ СтруктураРеквизитов.Свойство("ПолучитьАдрес") тогда
			
		Если СтруктураРеквизитов.ПриОткрытии И 
			НЕ ПустаяСтрока(СтруктураРеквизитов.АдресЮридический) 
			И НЕ ПустаяСтрока(СтруктураРеквизитов.АдресФактический) Тогда
			
			АдресЮридический = СтруктураРеквизитов.АдресЮридический;
			АдресФактический = СтруктураРеквизитов.АдресФактический;
			
		Иначе
			Если ДанныеОрганизации.ТипОрганизации Тогда
				АдресЮридический = ДанныеОрганизации.АдрЮР;
				АдресФактический = ДанныеОрганизации.АдрФакт;
			Иначе
				АдресЮридический = ДанныеОрганизации.АдрМЖ;
				АдресФактический = ДанныеОрганизации.АдрПрописки;
				
				// БЗ 10194146 ЗУП
				// В ЗУП 3.1.6.6 при отправке заявления на изменение для индивидуального предпринимателя возникает ошибка:
				// "Юридический адрес: не указан регион",
				// если в свойствах организации не выбрано физическое лицо или у физического лица не задан адрес места проживания,
				// при этом в свойствах организации юридический адрес указан.
				
				Если АдресЮридический = ",,,,,,,,," Тогда
					АдресЮридический = ДанныеОрганизации.АдрЮР;
				КонецЕсли;
				
				Если АдресФактический = ",,,,,,,,," Тогда
					АдресФактический = ДанныеОрганизации.АдрПрописки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитов.ПриОткрытии 
			ИЛИ ПустаяСтрока(СтруктураРеквизитов.АдресЮридический) И ПустаяСтрока(СтруктураРеквизитов.АдресФактический) Тогда
			
			СтруктураРеквизитов.Вставить("АдресЮридический",РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдресЮридический));
			СтруктураРеквизитов.Вставить("АдресФактический",РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдресФактический));
			
		КонецЕсли;
		
		ЮрАдресВФормате9Запятых = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(
			АдресЮридический,
			Истина);
			
		СтруктураРеквизитов.Вставить("ЮрАдрес", ЮрАдресВФормате9Запятых);
		
		ФактическийАдресВФормате9Запятых = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(
			АдресФактический,
			Истина);
			
		СтруктураРеквизитов.Вставить("ФактАдрес", ФактическийАдресВФормате9Запятых);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьАдресаОрганизации_ВНовомФормате(СтруктураРеквизитов, ДанныеОрганизации) Экспорт
	
	ЭтоЮрЛицо = ДанныеОрганизации.ТипОрганизации;
	Если ЭтоЮрЛицо Тогда
		
		АдресЮридический = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрЮР");
		АдресФактический = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрФакт");
		
	Иначе
		
		АдресЮридический = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрМЖ");
		АдресФактический = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрПрописки");
		
		// БЗ 10194146 ЗУП
		// В ЗУП 3.1.6.6 при отправке заявления на изменение для индивидуального предпринимателя возникает ошибка:
		// "Юридический адрес: не указан регион",
		// если в свойствах организации не выбрано физическое лицо или у физического лица не задан адрес места проживания,
		// при этом в свойствах организации юридический адрес указан.
		
		Если АдресЮридический.XML = "" Тогда
			АдресЮридический = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрЮР");
		КонецЕсли;
		
		Если АдресФактический.XML = "" Тогда
			АдресФактический = АдресИзДанныхОрганизации(ДанныеОрганизации, "АдрФакт");
		КонецЕсли;
		
	КонецЕсли;
	
	ПреобразоватьАдресВФорматXML(АдресЮридический, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		
	СтруктураРеквизитов.Вставить("АдресЮридическийЗначение", 		АдресЮридический.Значение);
	СтруктураРеквизитов.Вставить("АдресЮридическийПредставление",	АдресЮридический.Представление);
	
	ПреобразоватьАдресВФорматXML(АдресФактический, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		
	СтруктураРеквизитов.Вставить("АдресФактическийЗначение", 		АдресФактический.Значение);
	СтруктураРеквизитов.Вставить("АдресФактическийПредставление", 	АдресФактический.Представление);
	
КонецПроцедуры

Функция АдресИзСкопированногоЗаявления(Реквизит) Экспорт

	// Заполнение юр. адреса
	ПараметрыАдреса = ПараметыАдресаМастера();
	ПараметрыАдреса.Строка   = Реквизит.АдресЮридический;
	ПараметрыАдреса.XML      = Реквизит.АдресЮридический;
	
	ПреобразоватьАдресВФорматXML(ПараметрыАдреса, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	АдресЮридическийЗначение      = ПараметрыАдреса.Значение;
	АдресЮридическийПредставление = ПараметрыАдреса.Представление;
	
	// Заполнение факт. адреса
	ПараметрыАдреса = ПараметыАдресаМастера();
	ПараметрыАдреса.Строка   = Реквизит.АдресФактический;
	ПараметрыАдреса.XML      = Реквизит.АдресФактический;
	
	ПреобразоватьАдресВФорматXML(ПараметрыАдреса, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	
	АдресФактическийЗначение      = ПараметрыАдреса.Значение;
	АдресФактическийПредставление = ПараметрыАдреса.Представление;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("АдресЮридическийЗначение", АдресЮридическийЗначение);
	ДополнительныеПараметры.Вставить("АдресЮридическийПредставление", АдресЮридическийПредставление);
	ДополнительныеПараметры.Вставить("АдресФактическийЗначение", АдресФактическийЗначение);
	ДополнительныеПараметры.Вставить("АдресФактическийПредставление", АдресФактическийПредставление);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция АдресXML_ДобавитьЭлемент(МойДокументDOM, ИмяЭлемента, НовоеЗначение, ИмяРодительскогоЭлемента = "")
	
	УзелСоставНижний = АдресXML_УзелСоставНижний(МойДокументDOM);
	
	Если ЗначениеЗаполнено(ИмяРодительскогоЭлемента) Тогда
		Элементы = УзелСоставНижний.ПолучитьЭлементыПоИмени(ИмяРодительскогоЭлемента);
		Если Элементы.Количество() = 0 Тогда 
			РодительскийЭлемент = АдресXML_НовыйЭлемент(МойДокументDOM, ИмяРодительскогоЭлемента);
			УзелСоставНижний.ДобавитьДочерний(РодительскийЭлемент);
		Иначе
			РодительскийЭлемент = Элементы[0];
		КонецЕсли;
	Иначе
		РодительскийЭлемент = УзелСоставНижний;
	КонецЕсли;
	
	НовыйЭлемент = АдресXML_НовыйЭлемент(МойДокументDOM, ИмяЭлемента, НовоеЗначение);
	РодительскийЭлемент.ДобавитьДочерний(НовыйЭлемент);

КонецФункции

Функция ЗамененаЧастьАдреса(МойДокументDOM, ИмяЭлемента, НовоеЗначение, ИмяРодительскогоЭлемента = "")
	
	БылоИзменение = Ложь;
	
	Если ЗначениеЗаполнено(НовоеЗначение) Тогда
		
		Элементы  = МойДокументDOM.ПолучитьЭлементыПоИмени(ИмяЭлемента);
		
		Если Элементы.Количество() > 0 Тогда
			БылоИзменение = АдресXML_УстановитьНовоеЗначение(Элементы, НовоеЗначение);
		Иначе
			БылоИзменение = Истина;
			АдресXML_ДобавитьЭлемент(МойДокументDOM, ИмяЭлемента, НовоеЗначение, ИмяРодительскогоЭлемента);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат БылоИзменение;
	
КонецФункции

Функция АдресXML_УстановитьНовоеЗначение(Элементы, НовоеЗначение)
	
	БылоИзменение = Ложь;
	
	Для каждого Элемент Из Элементы Цикл
		Если Элемент.ТекстовоеСодержимое <> НовоеЗначение И НЕ ЗначениеЗаполнено(Элемент.ТекстовоеСодержимое) Тогда
			Элемент.ТекстовоеСодержимое = НовоеЗначение;
			БылоИзменение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат БылоИзменение;
	
КонецФункции

Функция АдресXML_НовыйЭлемент(МойДокументDOM, Имя, Значение = "")
	
	Элемент = МойДокументDOM.СоздатьЭлемент(Имя);
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Элемент.ТекстовоеСодержимое = Значение;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция АдресXML_УзелСоставНижний(МойДокументDOM)
	
	// Узлы "Состав" вложены один в другой. Новый узел добавляем в самый внутренний
	
	//<?xml version="1.0" encoding="UTF-8"?>
	//<КонтактнаяИнформация xmlns="http://www.v8.1c.ru/ssl/contactinfo" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Представление="142651, Московская обл, Городской округ Орехово-Зуевский, 123, Абрамовка д, 1805 г, дом 1Б, корпус 2">
	//	<Состав xsi:type="Адрес" Страна="РОССИЯ">
	//		<Состав xsi:type="АдресРФ">
	//			<СубъектРФ>Московская обл</СубъектРФ>
	//			<СвРайМО>Городской округ Орехово-Зуевский</СвРайМО>
	//			....
	//		</Состав>
	//	</Состав>
	//</КонтактнаяИнформация>
	
	УзлыСоставВерхний = МойДокументDOM.ПолучитьЭлементыПоИмени("Состав");
	Для каждого УзелСоставВерхний Из УзлыСоставВерхний Цикл
		Узел = УзелСоставВерхний.ПолучитьЭлементыПоИмени("Состав")[0];
		Возврат Узел; 
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция DOMИзXML(XML) Экспорт

	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	ЗаписьТекста.Записать(XML);
	ЗаписьТекста.Закрыть();
	
	ДокументDOM = DOMИзXMLФайла(ИмяФайла);
	
	Возврат ДокументDOM; 
	
КонецФункции

Функция DOMИзXMLФайла(ИмяФайла) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM    = ПостроительDOM.Прочитать(ОбъектXML);
	ОбъектXML.Закрыть();
	
	Возврат ДокументDOM; 
	
КонецФункции

Функция JSONИзСтроки(Строка) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Данные; 
	
КонецФункции

Процедура УбратьПробелыИзАдреса(ДанныеАдреса)
	
	Для каждого Запись Из ДанныеАдреса Цикл
		
		Значение = Запись.Значение;
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			
			ДанныеАдреса[Запись.Ключ] = СокрЛП(Запись.Значение);
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Помещения = Запись.Значение;
			Для каждого Помещение Из Помещения Цикл
				Для каждого СвойстваПомещения Из Помещение Цикл
					Помещение[СвойстваПомещения.Ключ] = СокрЛП(СвойстваПомещения.Значение);
				КонецЦикла;
			КонецЦикла; 
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция УбратьПробелыИзАдресов(АдресXML, АдресJSON) Экспорт
	
	Попытка
	
		// Преобразуем XML
		ДанныеАдреса = РаботаСАдресами.СведенияОбАдресе(АдресXML);
		УбратьПробелыИзАдреса(ДанныеАдреса);
		ДанныеАдреса.МуниципальноеПредставление = ДанныеАдреса.Представление; // Иначе сбрасывается
		Адрес = РаботаСАдресами.ПоляАдресаВJSON(ДанныеАдреса);
		АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Адрес);
		
		// Преобразуем JSON
		Если ЗначениеЗаполнено(АдресJSON) Тогда
			ДанныеАдреса = РаботаСАдресами.СведенияОбАдресе(АдресJSON);
			ДанныеАдреса.Представление = ДанныеАдреса.МуниципальноеПредставление; // Иначе сбрасывается
			УбратьПробелыИзАдреса(ДанныеАдреса);
			АдресJSON = РаботаСАдресами.ПоляАдресаВJSON(ДанныеАдреса);
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	КонецПопытки;
	
КонецФункции

Функция СкорректироватьАдресПоМуниципальному(АдресXML, АдресJSON) Экспорт
	
	УбратьПробелыИзАдресов(АдресXML, АдресJSON);

	// Исправление ошибки
	// "Не удалось определить город или населенный пункт"
	ПолеСертификата_2_5_4_7 = ПолеСертификата_2_5_4_7(АдресXML);
	Если ЗначениеЗаполнено(ПолеСертификата_2_5_4_7) Тогда
		Возврат АдресXML;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресJSON) Тогда
		Возврат АдресXML;
	КонецЕсли;
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(АдресJSON);

	НовыйРайон = СведенияОбАдресе.МуниципальныйРайон;
	НовыйГород = СведенияОбАдресе.Поселение;
	
	Если НЕ ЗначениеЗаполнено(НовыйРайон) И НЕ ЗначениеЗаполнено(НовыйГород) Тогда
		// Это адрес в административно территориальном делении или пустой
		Возврат АдресXML;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	ЗаписьТекста.Записать(АдресXML);
	ЗаписьТекста.Закрыть();
	
	ДокументDOM = DOMИзXMLФайла(ИмяФайла);
	
	БылоИзменение1 = ЗамененаЧастьАдреса(ДокументDOM, "Район", НовыйРайон, "СвРайМО");
	БылоИзменение2 = ЗамененаЧастьАдреса(ДокументDOM, "Город", НовыйГород);
	
	Если НЕ БылоИзменение1 И НЕ БылоИзменение2 Тогда
		Возврат АдресXML;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	АдресXML = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Шапка = НСтр("ru = '<?xml version=""1.0"" encoding=""UTF-8""?>'");
	АдресXML = СокрЛП(СтрЗаменить(АдресXML, Шапка, ""));
	
	Возврат АдресXML;
		
КонецФункции

Функция ПараметыАдресаМастера() Экспорт
	
	Адрес = Новый Структура();
	Адрес.Вставить("Строка", "");
	Адрес.Вставить("XML", "");
	Адрес.Вставить("JSON", "");
	Адрес.Вставить("Значение", "");
	Адрес.Вставить("Представление", "");
	
	Возврат Адрес;
	
КонецФункции

Функция АдресИзДанныхОрганизации(ДанныеОрганизации, ИмяПоля)

	Адрес = ПараметыАдресаМастера();
	
	ИмяПоляСXML = ИмяПоля + "_XML";
	
	Если ЗначениеЗаполнено(ДанныеОрганизации[ИмяПоляСXML]) Тогда
		
		ИмяПоляСJSON = ИмяПоля + "_JSON";
		
	 	АдресXML   = ДанныеОрганизации[ИмяПоляСXML];
		АдресJSON  = ДанныеОрганизации[ИмяПоляСJSON];
		
		РезультатЗначение = СкорректироватьАдресПоМуниципальному(АдресXML, АдресJSON);
		
		Адрес.Вставить("Значение", РезультатЗначение);
		Адрес.Вставить("XML", АдресXML);
		Адрес.Вставить("JSON", АдресJSON);

	ИначеЕсли ДанныеОрганизации[ИмяПоля] = ",,,,,,,,," Тогда
		
		АдресСтрокой = "";
		Адрес.Вставить("Строка", АдресСтрокой);
		
	Иначе
		
		АдресСтрокой = ДанныеОрганизации[ИмяПоля];
		АдресСтрокой = РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдресСтрокой);
		
		Адрес.Вставить("Строка", АдресСтрокой);
		
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции

Функция ПредставлениеАдресаИзДанныхОрганизации(ЗначениеАдреса) Экспорт
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначениеАдреса); 
	
	Если НЕ ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		ПредставлениеАдреса = "";
	ИначеЕсли ЭтоАдресПоФИАСу Тогда
		ПредставлениеАдреса = ПредставлениеКонтактнойИнформации(ЗначениеАдреса);
	Иначе
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ЗначениеАдреса, Истина);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

Функция ПредставлениеКонтактнойИнформации(ЗначениеАдреса) Экспорт
	
	Попытка
		ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеАдреса);
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ПредставлениеАдреса = "";

	КонецПопытки;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

Функция АдресФИАСДляТелаЗаявления(ДокументЗаявление, ИмяРеквизита) Экспорт
	
	// Пример адреса:
	// В нем может быть два тэга <Состав; тэга <СубъектРФ> может не быть
	//
	//<КонтактнаяИнформация xmlns="http://www.v8.1c.ru/ssl/contactinfo" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Представление="368302, Дагестан Респ, Каспийск г, Кирова ул, дом № 55">
	//	<Состав xsi:type="Адрес" Страна="РОССИЯ">
	//		<Состав xsi:type="АдресРФ">
	//			<СубъектРФ>Дагестан Респ</СубъектРФ>
	//			<Город>Каспийск г</Город>
	//			<Улица>Кирова ул</Улица>
	//			<ДопАдрЭл ТипАдрЭл="10100000" Значение="368302"/>
	//			<ДопАдрЭл>
	//				<Номер Тип="1010" Значение="55"/>
	//			</ДопАдрЭл>
	//		</Состав>
	//	</Состав>
	//</КонтактнаяИнформация>

	Адрес = ДокументЗаявление[ИмяРеквизита];
	
	РаботаСАдресами.ПередЗаписьюXDTOКонтактнаяИнформация(Адрес);
	
	// Ищем вхождение второго тэга <Состав
	ПозицияНачала 	 = СтрНайти(Адрес, "<Состав", НаправлениеПоиска.СКонца);
	// Ищем начала любого следующего тэга, который и будем началом адреса
	ПозицияНачала 	 = СтрНайти(Адрес, "<",,ПозицияНачала + 1);
	ПозицияОкончания = Найти(Адрес, "</Состав>");
	АдресДляЗаявления = Сред(Адрес, ПозицияНачала, ПозицияОкончания - ПозицияНачала);
	АдресДляЗаявления = ИсправитьОКТМО(АдресДляЗаявления);
	 
	ИдентификаторАдреса = ДокументЗаявление[ИмяРеквизита + "ИдентификаторПоФИАС"];
	Если ЗначениеЗаполнено(ИдентификаторАдреса) Тогда
		АдресДляЗаявления = АдресДляЗаявления 
			+ "<ИдФиас>"
			+ ИдентификаторАдреса
			+ "</ИдФиас>";
	КонецЕсли;
			
	Возврат АдресДляЗаявления;
		
КонецФункции

Функция ИсправитьОКТМО(Адрес)
	
	ОКТМОНачало = "<ОКТМО>";
	ОКТМОКонец = "</ОКТМО>";
	
	НачалоТэгаОКТМО = СтрНайти(Адрес, ОКТМОНачало);
	КонецТэгаОКТМО = СтрНайти(Адрес, ОКТМОКонец);
	
	Если НачалоТэгаОКТМО <> 0 И КонецТэгаОКТМО <> 0 Тогда
		
		НачалоОКТМО = НачалоТэгаОКТМО + СтрДлина(ОКТМОНачало);
		КонецОКТМО = КонецТэгаОКТМО;
		
		Длина = КонецОКТМО - НачалоОКТМО;
		ОКТМОИсходный = Сред(Адрес, НачалоОКТМО, Длина);
		
		Если Длина < 8 Тогда
			
			ОКТМО = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ОКТМОИсходный, 8);
			
		ИначеЕсли Длина > 8 Тогда
			
			ОКТМО = Лев(ОКТМОИсходный, 8);
			
		КонецЕсли;
		
		Если Длина <> 8 Тогда
			
			 ЧтоЗаменять   = ОКТМОНачало + ОКТМОИсходный + ОКТМОКонец;
			 НаЧтоЗаменять = ОКТМОНачало + ОКТМО + ОКТМОКонец;
			 
			 Адрес = СтрЗаменить(Адрес, ЧтоЗаменять, НаЧтоЗаменять);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

Процедура ПреобразоватьАдресВФорматXML(Адрес, ВидКонтактнойИнформации) Экспорт
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес.XML);
	
	Если ЭтоАдресПоФИАСу Тогда
		
		Попытка
			
			Если ЗначениеЗаполнено(Адрес.JSON) Тогда
				Адрес.Представление = РаботаСАдресами.СведенияОбАдресе(Адрес.JSON).Представление;
			Иначе
				Адрес.Представление = РаботаСАдресами.СведенияОбАдресе(Адрес.XML).Представление;
			КонецЕсли;
			Адрес.Значение = Адрес.XML;
			
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Электронный документооборот с контролирующими органами. Мастер по 1С-Отчетности. Получение представления адреса'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(
				ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
			
	ИначеЕсли ЗначениеЗаполнено(Адрес.Строка) И Адрес.Строка <> ",,,,,,,,," Тогда
		
		// Сначала получаем представление, его преобразуем в xml.
		Адрес.Представление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адрес.Строка, Истина);
		
		Попытка
			Адрес.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Адрес.Представление, ВидКонтактнойИнформации);
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Электронный документооборот с контролирующими органами. Мастер по 1С-Отчетности. Получение XML по представлению адреса'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(
				ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолеСертификата_2_5_4_8(АдресЮридический) Экспорт
	
	// Наименование субъекта Российской Федерации
	// Приказ ФСБ России от 27.12.2011 № 795
	// 5) stateOrProvinceName (наименование штата или области).
	// В качестве значения данного атрибута имени следует использовать текстовую строку, 
	// содержащую наименование соответствующего субъекта Российской Федерации.
	
	// Для городов федерального значение Москва и Санкт Петербург, город должен писаться в 2.5.4.8
	// Мы записываем вот так -  77 г. Москва, 78 г. Санкт-Петербург,  92 г. Севастополь, 99 г. Байконур
	
	stateOrProvinceName = "";
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЮридический);
	
	Если ЭтоАдресПоФИАСу Тогда	
		
		СведенияОбАдресе 	= СведенияОбАдресе(АдресЮридический);
		КодРегиона 			= СведенияОбАдресе.КодРегиона;
		
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			
			Если ЭтоГородФедеральногоЗначения(СведенияОбАдресе.Регион) Тогда
				
				// Мы записываем вот так -  77 г. Москва, 78 г. Санкт-Петербург,  92 г. Севастополь, 99 г. Байконур
				Регион = ГородФедеральногоЗначенияБезСокращенияРегиона(СведенияОбАдресе);
				stateOrProvinceName = КодРегиона + " г. " + Регион;
				
			Иначе
				stateOrProvinceName = КодИНазваниеРегионаДляСертификата(КодРегиона);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВРег(АдресЮридический), ВРег("Луганск")) > 0 Тогда 
			stateOrProvinceName = НСтр("ru = '94 Луганская народная республика'");
		ИначеЕсли СтрНайти(ВРег(АдресЮридический), ВРег("Донецк")) > 0 Тогда 
			stateOrProvinceName = НСтр("ru = '93 Донецкая народная республика'");
		ИначеЕсли СтрНайти(ВРег(АдресЮридический), ВРег("Херсон")) > 0 Тогда 
			stateOrProvinceName = НСтр("ru = '95 Херсонская область'");
		ИначеЕсли СтрНайти(ВРег(АдресЮридический), ВРег("Запорож")) > 0 Тогда 
			stateOrProvinceName = НСтр("ru = '90 Запорожская область'");
		КонецЕсли;
		
	Иначе
		
		КодРегиона = РазобратьСтрокуАдреса(АдресЮридический, ",");
		
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			stateOrProvinceName = КодИНазваниеРегионаДляСертификата(КодРегиона);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат stateOrProvinceName;
	
КонецФункции

Процедура ДобавитьОбразование(ЧастиL, Часть) Экспорт
	
	Если ЗначениеЗаполнено(Часть) Тогда
		ЧастиL.Добавить(Часть);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолеСертификата_2_5_4_7(АдресЮридический) Экспорт
	
	// Наименование населенного пункта
	// Приказ ФСБ России от 27.12.2011 № 795
	// 6) localityName (наименование населенного пункта).
	// В качестве значения данного атрибута имени следует использовать текстовую строку, 
	// содержащую наименование соответствующего населенного пункта.
	
	// Пишем в L город (как в ЕГРЮЛ)
	// 2.5.4.7 - Москва г.
	
	localityName = "";
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЮридический);
	
	Если ЭтоАдресПоФИАСу Тогда
		
		СведенияОбАдресе     = СведенияОбАдресе(АдресЮридический);
		Регион               = СведенияОбАдресе.Регион;
		Район                = СведенияОбАдресе.Район;
		Город                = СведенияОбАдресе.Город;
		ВнутригородскойРайон = СведенияОбАдресе.ВнутригородскойРайон;
		НаселенныйПункт      = СведенияОбАдресе.НаселенныйПункт;
		Территория           = СведенияОбАдресе.Территория;

		
		ЧастиL = Новый Массив;
		ДобавитьОбразование(ЧастиL, Район);
		ДобавитьОбразование(ЧастиL, Город);
		ДобавитьОбразование(ЧастиL, ВнутригородскойРайон);
		ДобавитьОбразование(ЧастиL, НаселенныйПункт);
		ДобавитьОбразование(ЧастиL, Территория);
		
		Пока ЧастиL.Количество() >= 1 Цикл
			Адрес = СтрСоединить(ЧастиL, ", ");
			Если СтрДлина(Адрес) > 128 И ЧастиL.Количество() > 1 Тогда
				ЧастиL.Удалить(0);
			ИначеЕсли СтрДлина(Адрес) > 128 И ЧастиL.Количество() = 1 Тогда
				Адрес = Лев(Адрес, 128);
				Прервать;
			Иначе
				Прервать;
			КонецЕсли;
				
		КонецЦикла;
		
		localityName = Адрес;
		Если НЕ ЗначениеЗаполнено(localityName) 
			И ЭтоГородФедеральногоЗначения(Регион) Тогда
			localityName = Регион;
		КонецЕсли;
			
	Иначе
		
		
		ДокументМассив       = РазобратьСтрокуАдреса(АдресЮридический, ",");
		Город  			     = ДокументМассив[4];
		НаселенныйПункт      = ДокументМассив[5];
		
		Если ЗначениеЗаполнено(Город) Тогда
			localityName = Город;
		ИначеЕсли ЗначениеЗаполнено(НаселенныйПункт) Тогда
			localityName = НаселенныйПункт;
		КонецЕсли;
		
	КонецЕсли;

	Возврат localityName;
	
КонецФункции

Функция ГородФедеральногоЗначенияБезСокращенияРегиона(СведенияОбАдресе)
	
	Регион 			 = СведенияОбАдресе.Регион;
	РегионСокращение = СведенияОбАдресе.РегионСокращение;
	
	ДлинаСокращенияРегиона = СтрДлина(РегионСокращение);
	
	Город = СокрЛП(Сред(Регион, 1, СтрДлина(Регион) - ДлинаСокращенияРегиона));
	
	Возврат Город;
	
КонецФункции

Функция ПолеСертификата_2_5_4_9(АдресЮридический) Экспорт
	
	// Адрес места нахождения
	// Приказ ФСБ России от 27.12.2011 № 795
	// 7) streetAddress (название улицы, номер дома).
	// В качестве значения данного атрибута имени следует использовать текстовую строку, 
	// содержащую часть адреса места нахождения соответствующего лица, включающую 
	// - наименование улицы, 
	// - номер дома, 
	// - а также корпуса,
	// - строения,
	// - квартиры,
	// - помещения. 
	// Объектный идентификатор типа атрибута streetAddress имеет вид 2.5.4.9;
	
	streetAddress = "";
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЮридический);
	
	Если ЭтоАдресПоФИАСу Тогда
		
		СведенияОбАдресе = СведенияОбАдресе(АдресЮридический);
		
		ЧастиАдреса = Новый Массив;
		
		// Улица
		Улица = СокрЛП(СведенияОбАдресе.Улица);
		ЧастиАдреса.Добавить(Улица);
		
		// Дом
		Здание = СведенияОбАдресе.Здание;
		Если Здание.Свойство("Номер") И ЗначениеЗаполнено(Здание.Номер) Тогда
			ТипЗдания = СокращеноеНазваниОбъектаАдресации(Здание.ТипЗдания);
			Дом = СокрЛП(ТипЗдания + " " + Здание.Номер);
			ЧастиАдреса.Добавить(Дом);
		КонецЕсли;
		
		Корпуса = СведенияОбАдресе.Корпуса;
		
		// Корпуса
		Для каждого Корпус Из Корпуса Цикл
			Если ЗначениеЗаполнено(Корпус.Номер) Тогда
				ТипКорпуса = СокращеноеНазваниОбъектаАдресации(Корпус.ТипКорпуса);
				Корпус = СокрЛП(ТипКорпуса + " " + Корпус.Номер);
				ЧастиАдреса.Добавить(Корпус);
			КонецЕсли;
		КонецЦикла;
		
		Помещения = СведенияОбАдресе.Помещения;
		
		// Помещения
		Для каждого Помещение Из Помещения Цикл
			Если ЗначениеЗаполнено(Помещение.Номер) Тогда
				ТипПомещения = СокращеноеНазваниОбъектаАдресации(Помещение.ТипПомещения);
				Помещение = СокрЛП(ТипПомещения + " " + Помещение.Номер);
				ЧастиАдреса.Добавить(Помещение);
			КонецЕсли;
		КонецЦикла;
		
		Разделитель = ", ";
		
	Иначе
	
		ЧастиАдреса = РазобратьСтрокуАдреса(АдресЮридический, ",");
		
		Улица 	 = СокрЛП(ЧастиАдреса[6]);
		Дом 	 = СокрЛП(ЧастиАдреса[7]);
		Корпус 	 = СокрЛП(ЧастиАдреса[8]);
		Квартира = ?(ЧастиАдреса.Количество() = 10, СокрЛП(ЧастиАдреса[9]), "");
		
		ЧастиАдреса = Новый Массив;
		ЧастиАдреса.Добавить(Улица);
		ЧастиАдреса.Добавить(Дом);
		ЧастиАдреса.Добавить(Корпус);
		
		Если ЗначениеЗаполнено(Квартира) Тогда
			ЧастиАдреса.Добавить(Квартира);
		КонецЕсли;
		
		Разделитель = " ";
		
	КонецЕсли;

	streetAddress = СтрСоединить(ЧастиАдреса, Разделитель);
	
	Возврат streetAddress;

КонецФункции

Функция КодИНазваниеРегионаДляСертификата(КодРегиона) Экспорт
	
	Если ПустаяСтрока(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	МакетРегионы = КонтекстЭДОСервер.ПолучитьМакетОбработки("КодыРегионов353приказ");
	
	Для Инд = 1 По МакетРегионы.ВысотаТаблицы Цикл
		ТекРегион = МакетРегионы.Область(Инд, 1, Инд, 1).Текст;
		
		Если ТекРегион = КодРегиона Тогда
			Возврат КодРегиона + " " + СокрЛП(МакетРегионы.Область(Инд, 2, Инд, 2).Текст);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция СведенияОбАдресе(Адрес) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("НаименованиеВключаетСокращение", Истина);
	
	Возврат РаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
	
КонецФункции

Функция РазобратьСтрокуАдреса(Строка, СтрокаРазделитель) экспорт
	
	Количество = СтрЧислоВхождений(Строка, СтрокаРазделитель);
	Дельта = 11 - Количество;
	
	МассивСтрок = СтрРазделить(Строка, СтрокаРазделитель);
	
	// Чтобы не было выхода за пределы массива адреса
	Для й = 0 По Дельта Цикл
		МассивСтрок.Добавить("");
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

Функция ЭтоГородФедеральногоЗначения(Город)
	
	Города = Новый Массив;
	Города.Добавить("МОСКВА Г");
	Города.Добавить("САНКТ-ПЕТЕРБУРГ Г");
	Города.Добавить("СЕВАСТОПОЛЬ Г");
	Города.Добавить("БАЙКОНУР Г");
	
	Результат = Города.Найти(ВРег(Город)) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Взята из ОМ УправлениеКонтактнойИнформациейКлиентСервер, процедура СокращенияОбъектовАдресацииАдресаРФ,
// поскольку не является программным интерфейсом.
Функция СокращеноеНазваниОбъектаАдресации(ПолноеНазвание)
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(НСтр("ru = 'Дом'"), НСтр("ru = 'Д.'"));
	Результат.Вставить(НСтр("ru = 'Владение'"), НСтр("ru = 'Вл.'"));
	Результат.Вставить(НСтр("ru = 'Домовладение'"), НСтр("ru = 'Домовл.'"));
	
	Результат.Вставить(НСтр("ru = 'Корпус'"), НСтр("ru = 'Корп.'"));
	Результат.Вставить(НСтр("ru = 'Строение'"), НСтр("ru = 'Стр.'"));
	Результат.Вставить(НСтр("ru = 'Литера'"), НСтр("ru = 'Лит.'"));
	Результат.Вставить(НСтр("ru = 'Сооружение'"), НСтр("ru = 'Сооруж.'"));
	Результат.Вставить(НСтр("ru = 'Участок'"), НСтр("ru = 'Уч.'"));
	
	Результат.Вставить(НСтр("ru = 'Квартира'"), НСтр("ru = 'Кв.'"));
	Результат.Вставить(НСтр("ru = 'Офис'"), НСтр("ru = 'Оф.'"));
	Результат.Вставить(НСтр("ru = 'Бокс'"), НСтр("ru = 'Бокс'"));
	Результат.Вставить(НСтр("ru = 'Помещение'"), НСтр("ru = 'Пом.'"));
	Результат.Вставить(НСтр("ru = 'Комната'"), НСтр("ru = 'Ком.'"));
	Результат.Вставить(НСтр("ru = 'Этаж'"), НСтр("ru = 'Этаж'"));
	
	Возврат НРег(Результат[ПолноеНазвание]);
	
КонецФункции

Функция ИННФизЛица(ФизЛицо) Экспорт
	
	МассивПоказателей = Новый Массив;
		
	МассивПоказателей.Добавить("ИНН");
	ДатаЗначения = ТекущаяДатаСеанса();
	
	Сведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(ФизЛицо, МассивПоказателей, ДатаЗначения);
	
	ИНН = "";
	Сведения.Свойство("ИНН", ИНН);
	
	Возврат ИНН;
	
КонецФункции

Функция EMailФизическиеЛица(ФизЛицо) Экспорт
	
	МассивПоказателей = Новый Массив;
		
	МассивПоказателей.Добавить("АдресЭлектроннойПочты");
	ДатаЗначения = ТекущаяДатаСеанса();
	
	Сведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(ФизЛицо, МассивПоказателей, ДатаЗначения);
	
	Почта = "";
	Сведения.Свойство("АдресЭлектроннойПочты", Почта);
	
	Возврат Почта;
	
КонецФункции

Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина)
	
	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";
	
	МассивМестоРождения	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве > 0 Тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" Тогда
			Особое = 1;
		КонецЕсли;
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		НаселенныйПункт = СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Район = СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Область = СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Страна = СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолИзСтрокиВПеречисление(ПолСтрокой)
	
	Если ТипЗнч(ПолСтрокой) <> Тип("Строка") Тогда
		Возврат ПолСтрокой;
	Конецесли;
	
	ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
	Если ПолСтрокой = "Мужской" Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	ИначеЕсли ПолСтрокой = "Женский" Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	КонецЕсли;

	Возврат ПолПеречислением;
	
КонецФункции

// Возвращает строковое представление места рождения.
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт
	
	Если Лев(СтрокаМестоРождения, 2) = "0,"
		ИЛИ Лев(СтрокаМестоРождения, 2) = "1," Тогда
	
		СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
		
		Если СтруктураМестоРождения.Особое = 1 Тогда
			
			Представление	=	"особое" +
			?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
			
		Иначе
			
			Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", " + СокрЛП(СтруктураМестоРождения.Район))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Область))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Страна));
			
			Если Лев(Представление, 1) = ","  Тогда
				Представление = Сред(Представление, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Представление;
		
	Иначе
		
		Возврат СтрокаМестоРождения;
		
	КонецЕсли;
	
КонецФункции

Функция ПолИзЧислаВПеречисление(ПолЧислом)
	
	Если ТипЗнч(ПолЧислом) <> Тип("Число") Тогда
		Возврат ПолЧислом;
	Конецесли;

	ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
	Если ПолЧислом = 0 Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
	ИначеЕсли ПолЧислом = 1 Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	ИначеЕсли ПолЧислом = 2 Тогда
		ПолПеречислением = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	КонецЕсли;

	Возврат ПолПеречислением;
	
КонецФункции

Функция ЭтоИнтеграцияСБанком() Экспорт

	// Это УСН 6% для ПСБ
	ФлагиУчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьФлагиИнтеграцииПоУмолчанию();
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета);
	
	ЭтоИнтеграцияСБанком = ФлагиУчета.ИнтеграцияСБанком;
	
	Возврат ЭтоИнтеграцияСБанком;
	
КонецФункции

Процедура СкопироватьРеквизитыВладельцаИзИсходногоЗаявления(Форма, Реквизит) Экспорт
	
	Форма.ТелефонМобильный = Реквизит.ТелефонМобильный;
	Форма.ЭлектроннаяПочта = Реквизит.ЭлектроннаяПочта;
	Форма.ПолучатьСМСУведомления = Реквизит.ПолучатьСМСУведомления;
	
	// Копируем все реквизиты, содержащие подстроку ВладелецЭЦП
	Реквизиты = Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи.Реквизиты;
	Для каждого ТекущийРеквизит Из Реквизиты Цикл
		
		Имя = ТекущийРеквизит.Имя;
		
		ЭтоРеквизитВладельца = 
			СтрНайти(Врег(Имя), Врег("ВладелецЭЦП"))
			И НЕ СтрНайти(Врег(Имя), Врег("Удалить"));
		
		Если ЭтоРеквизитВладельца Тогда
			Форма[Имя] = Реквизит[Имя];
		КонецЕсли;
	
	КонецЦикла;
	
	Форма.СертификатДолженБытьПолученОтГосУЦ = СертификатДолженБытьПолученОтГосУЦ(Форма);
	
КонецПроцедуры

Процедура УдалитьПробелы(НовыйДокументЗаявление) Экспорт
	
	Для каждого РеквизитЗаявления Из НовыйДокументЗаявление.Метаданные().Реквизиты Цикл
		
		Если НЕ РеквизитЗаявления.Тип.СодержитТип(Тип("Строка")) Тогда
			Продолжить;
		КонецЕсли;
			
		Значение = НовыйДокументЗаявление[РеквизитЗаявления.Имя];
		Если ТипЗнч(Значение) <> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйДокументЗаявление[РеквизитЗаявления.Имя] = СокрЛП(НовыйДокументЗаявление[РеквизитЗаявления.Имя]);
		
	КонецЦикла;
	
КонецПроцедуры

Функция КлючЗаявленийТребующихНапоминанияПозже() Экспорт

	Возврат "ДокументооборотСКонтролирующимиОрганами_ЗаявленияТребующиеНапоминанияПозже";

КонецФункции

Функция ПодготовитьЗаявление(ДокументЗаявление, Алгоритм) Экспорт
	
	Заявление = Новый Структура;
	Заявление.Вставить("type", XMLСтрока(ДокументЗаявление.ТипЗаявления));
	
	Если ДокументЗаявление.ЭтоУпрощенноеЗаявление И ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
		Заявление.Вставить("test", Истина);
	КонецЕсли;
	
	Заявление.Вставить("version", "1.10");
	Заявление.Вставить("application", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	Заявление.Вставить("abonent_id", ПолучитьИдентификаторАбонента(ДокументЗаявление));
	Заявление.Вставить("id", ДокументЗаявление.ИдентификаторДокументооборота);
	Заявление.Вставить("date", ТекущаяУниверсальнаяДата());
	Заявление.Вставить("organization", ПодготовитьОрганизацию(ДокументЗаявление));
	Заявление.Вставить("signature_owner", ПодготовитьВладельцаЭП(ДокументЗаявление));
	Заявление.Вставить("recipients", ПодготовитьПолучателей(ДокументЗаявление));
	Заявление.Вставить("files", ПодготовитьФайлы(ДокументЗаявление));
	Заявление.Вставить("changed_attributes", ПодготовитьИзменившиесяРеквизиты(ДокументЗаявление));
	Заявление.Вставить("auth", ПолучитьПараметрыАутентификации(ДокументЗаявление));
	Если Алгоритм = "GOST R 34.10-2012-256" Тогда
		Заявление.Вставить("ПриоритетГОСТ", "2012-256");
	ИначеЕсли Алгоритм = "GOST R 34.10-2012-512" Тогда
		Заявление.Вставить("ПриоритетГОСТ", "2012-512");
	КонецЕсли;
	
	IdentKind = ОбработкаЗаявленийАбонентаКлиентСервер.IdentKind(ДокументЗаявление);
	Заявление.Вставить("IdentKind", IdentKind);
	
	НаименованиеУЦ = УЦВЗаявлении(ДокументЗаявление);
	Заявление.Вставить("CertifyingCenter", НаименованиеУЦ);
	
	// Обязательные новые поля ИмяПрограммы, НомерВерсииПрограммы, ВерсияПлатформы
	КонтекстЭДОСервер   = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ИмяПрограммыБИП     = КонтекстЭДОСервер.ИмяПрограммыБИП();
	
	Если ИмяПрограммыБИП <> "" Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Заявление.Вставить("app_name", 			ИмяПрограммыБИП);
		Заявление.Вставить("app_version", 		РегламентированнаяОтчетность.ВерсияПрограммы());
		Заявление.Вставить("platform_version", 	СистемнаяИнформация.ВерсияПриложения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументЗаявление.НомерОсновнойПоставки1с) Тогда
		Заявление.Вставить("code_product_1c", ДокументЗаявление.НомерОсновнойПоставки1с);
	Иначе
		Заявление.Вставить("UserID", 	ИдентификаторПользователя());
		Заявление.Вставить("Splitter", 	РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
		Заявление.Вставить("AreaKey", 	КлючОбластиДанных());
	КонецЕсли;
	
	Если ДокументЗаявление.ЭтоМультиРежим ИЛИ ДокументЗаявление.ЭтоМультиРежимИсходный Тогда
		
		Текст = ТекстЗаявленияДляМоделиСервиса(ДокументЗаявление);
		Заявление.Вставить("MultiUsersModeText", XMLСтрока(Текст));
		
	КонецЕсли;
	
	Возврат Заявление;
	
КонецФункции

Функция ИдентификаторПользователя()

	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ИдентификаторПользователя =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийПользователь,
			"ИдентификаторПользователяСервиса");	

КонецФункции
		
Функция КлючОбластиДанных()
	
	ЗначениеРазделителя = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		// В разделенном режиме не кэшируется, т.к.
		// нет необходимости входить в область данных.
		УстановитьПривилегированныйРежим(Истина);
		
		Если Метаданные.Константы.Найти("КлючОбластиДанных") = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат Константы["КлючОбластиДанных"].Получить();
		КонецЕсли;
	Иначе
		// Результат кэшируется, т.к. необходимо выполнить вход в область данных.
		Возврат ИнтернетПоддержкаПользователейВМоделиСервисаПовтИсп.КлючОбластиДанных(ЗначениеРазделителя);
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьОрганизацию(ДокументЗаявление)
	
	Организация = Новый Структура;
	Организация.Вставить("short_name", ДокументЗаявление.КраткоеНаименование);
	Организация.Вставить("inn", ДокументЗаявление.ИНН);
	Организация.Вставить("kpp", ДокументЗаявление.КПП);
	Организация.Вставить("ogrn", ДокументЗаявление.ОГРН);
	
	Если НЕ ЗначениеЗаполнено(ДокументЗаявление.ОГРН) И ДокументЗаявление.ЭтоНотариусАдвокатИлиГКФХ Тогда
		Организация.Вставить("is_individual", Истина);
	КонецЕсли;
	
	Организация.Вставить("reg_number_pfr", ДокументЗаявление.РегНомерПФР);
	Организация.Вставить("reg_number_fss", ДокументЗаявление.РегНомерФСС);
	Организация.Вставить("reg_number_fss_optional", ДокументЗаявление.ДополнительныйКодФСС);
	Организация.Вставить("separate_subdivision", ДокументЗаявление.ПризнакОбособленногоПодразделения);
	Организация.Вставить("legal_address", ПодготовитьАдрес(ДокументЗаявление, "АдресЮридический"));
	Организация.Вставить("actual_address", ПодготовитьАдрес(ДокументЗаявление, "АдресФактический"));
	Организация.Вставить("phone", ДокументЗаявление.ТелефонОсновной);
	Организация.Вставить("mobile_phone", ДокументЗаявление.ТелефонМобильный);
	Организация.Вставить("email", ДокументЗаявление.ЭлектроннаяПочта);
	Организация.Вставить("tariff", ДокументЗаявление.Тариф);
	
	Возврат Организация;
	
КонецФункции

Функция ПодготовитьАдрес(ДокументЗаявление, ИмяРеквизита)
	
	АдресСтрокой = ДокументЗаявление[ИмяРеквизита];
	
	Если ЗначениеЗаполнено(АдресСтрокой) Тогда
		
		ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресСтрокой);

		Если ЭтоАдресПоФИАСу Тогда
			
			Адрес = Новый Структура;
			Адрес.Вставить("country", "643");
			Адрес.Вставить("region_code", "");
			Адрес.Вставить("region", "");
			Адрес.Вставить("district", "");
			Адрес.Вставить("city", "");
			Адрес.Вставить("locality", "");
			Адрес.Вставить("street", "");
			Адрес.Вставить("house", "");
			Адрес.Вставить("building", "");
			Адрес.Вставить("apartment", "");
			
			// Представление
			ПредставлениеАдреса = ПредставлениеАдресаИзДанныхОрганизации(АдресСтрокой);
			Адрес.Вставить("presentation", ПредставлениеАдреса);
			
			// Адрес в том виде, как он передается в заявлении на подключение.
			АдресВВидеXML = АдресФИАСДляТелаЗаявления(ДокументЗаявление, ИмяРеквизита);
			Адрес.Вставить("fias", АдресВВидеXML);
			
			localityName 		= ПолеСертификата_2_5_4_7(АдресСтрокой);
			stateOrProvinceName = ПолеСертификата_2_5_4_8(АдресСтрокой);
			streetAddress 		= ПолеСертификата_2_5_4_9(АдресСтрокой);
				
			Адрес.street 		= streetAddress; 
			Адрес.region_code	= Лев(stateOrProvinceName, 2);
			Адрес.region 		= Сред(stateOrProvinceName, 4);
			Адрес.city 			= localityName;
			
		Иначе
			
			ЧастиАдреса = СтрРазделить(АдресСтрокой, ",");
			Если ЧастиАдреса.Количество() <> 10 И ЧастиАдреса.Количество() <> 13 Тогда
				ВызватьИсключение(НСтр("ru = 'Неверный формат адреса.'"));
			КонецЕсли;
			
			Адрес = Новый Структура;
			Адрес.Вставить("country", ЧастиАдреса[0]);
			Адрес.Вставить("postcode", ЧастиАдреса[1]);
			Адрес.Вставить("region_code", ЧастиАдреса[2]);
			Адрес.Вставить("region", НазваниеРегионаПоКоду(ЧастиАдреса[2]));
			Адрес.Вставить("district", ЧастиАдреса[3]);
			Адрес.Вставить("city", ЧастиАдреса[4]);
			Адрес.Вставить("locality", ЧастиАдреса[5]);
			Адрес.Вставить("street", ЧастиАдреса[6]);
			Адрес.Вставить("house", ЧастиАдреса[7]);
			Адрес.Вставить("building", ЧастиАдреса[8]);
			Адрес.Вставить("apartment", ЧастиАдреса[9]);
			
		КонецЕсли;

	Иначе
		
		Если ИмяРеквизита = "АдресЮридический" Тогда
		
			РеквизитыСертификата = ДокументЗаявление.РеквизитыСертификата.Получить();
			Если ЗначениеЗаполнено(РеквизитыСертификата) Тогда
				
				Адрес = Новый Структура;
				Адрес.Вставить("country", "643");
				Адрес.Вставить("region_code", "");
				Адрес.Вставить("region", "");
				Адрес.Вставить("district", "");
				Адрес.Вставить("city", "");
				Адрес.Вставить("locality", "");
				Адрес.Вставить("street", "");
				Адрес.Вставить("house", "");
				Адрес.Вставить("building", "");
				Адрес.Вставить("apartment", "");
				
				Если РеквизитыСертификата.Свойство("OID2_5_4_9") Тогда
					Адрес.street = РеквизитыСертификата["OID2_5_4_9"]; 
				КонецЕсли;
				Адрес.region_code = Лев(РеквизитыСертификата["OID2_5_4_8"], 2);
				Адрес.region = Сред(РеквизитыСертификата["OID2_5_4_8"], 4);
				
				Адрес.city = РеквизитыСертификата["OID2_5_4_7"];
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

Функция НазваниеРегионаПоКоду(КодРегиона) Экспорт
	
	Возврат ОбработкаЗаявленийАбонентаПовтИсп.НазваниеРегионаПоКоду(КодРегиона);
	
КонецФункции

Функция ПодготовитьВладельцаЭП(ДокументЗаявление)
	
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);
	
	ВладелецЭП = Новый Структура;
	
	Если ИспользоватьСуществующий Тогда
		
		Сертификат = ОбработкаЗаявленийАбонентаВызовСервера.СертификатИзЗаявления(ДокументЗаявление);
		
		Если ТипЗнч(Сертификат.Отпечаток) = Тип("ДвоичныеДанные") Тогда
			Тело = Нрег(ПолучитьHexСтрокуИзДвоичныхДанных(Сертификат.Отпечаток));
		Иначе
			Тело = Base64Строка(Сертификат.Сертификат);
		КонецЕсли;
		
		ВладелецЭП.Вставить("certificate", Тело);
		
	КонецЕсли;
	
	ВладелецЭП.Вставить("first_name", ДокументЗаявление.ВладелецЭЦПИмя);
	ВладелецЭП.Вставить("middle_name", ДокументЗаявление.ВладелецЭЦПОтчество);
	ВладелецЭП.Вставить("last_name", ДокументЗаявление.ВладелецЭЦПФамилия);
	ВладелецЭП.Вставить("snils", ДокументЗаявление.ВладелецЭЦПСНИЛС);
	ВладелецЭП.Вставить("post", ДокументЗаявление.ВладелецЭЦПДолжность);
	ВладелецЭП.Вставить("subdivision", ДокументЗаявление.ВладелецЭЦППодразделение);
	ВладелецЭП.Вставить("is_person", ДокументЗаявление.ВладелецЭЦПЭтоФизЛицо);
	
	Если ДокументЗаявление.ВладелецЭЦППол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		Пол = "1";
	ИначеЕсли ДокументЗаявление.ВладелецЭЦППол = Перечисления.ПолФизическогоЛица.Женский Тогда
		Пол = "2";
	Иначе
		Пол = "0";
	КонецЕсли;
	
	Гражданство = ДокументЗаявление.ВладелецЭЦПГражданство;
	КодАльфа2 = "RU";
	Если ЗначениеЗаполнено(Гражданство) И ЗначениеЗаполнено(Гражданство.КодАльфа2) Тогда
		КодАльфа2 = Гражданство.КодАльфа2;
	КонецЕсли;
	
	ВладелецЭП.Вставить("sex", Пол);
	ВладелецЭП.Вставить("date_birth", 	ДокументЗаявление.ВладелецЭЦПДатаРождения);
	ВладелецЭП.Вставить("place_birth",  ДокументЗаявление.ВладелецЭЦПМестоРождения);
	ВладелецЭП.Вставить("inn", ДокументЗаявление.ВладелецЭЦПИНН);

	ВладелецЭП.Вставить("nationality", КодАльфа2);
	
	ВладелецЭП.Вставить("identity_document", ПодготовитьДокументУдостоверяющийЛичность(ДокументЗаявление));
	
	Возврат ВладелецЭП;
	
КонецФункции

Функция ПолучитьПараметрыАутентификации(ДокументЗаявление)
	
	ПараметрыАутентификации = Новый Структура;
	ПараметрыАутентификации.Вставить("phone", ДокументЗаявление.ИдентификаторПроверкиТелефонаДляПаролей);
	ПараметрыАутентификации.Вставить("email", ДокументЗаявление.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей);
	
	Возврат ПараметрыАутентификации;
	
КонецФункции

Функция ПодготовитьДокументУдостоверяющийЛичность(ДокументЗаявление)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КодВидаДокумента  = КонтекстЭДОСервер.ПолучитьКодВидаДокументаФизическогоЛица(ДокументЗаявление.ВладелецЭЦПВидДокумента);
	
	ДокументУдостоверяющийЛичность = Новый Структура;
	ДокументУдостоверяющийЛичность.Вставить("type", КодВидаДокумента);
	ДокументУдостоверяющийЛичность.Вставить("serial", ДокументЗаявление.ВладелецЭЦПСерияДокумента);
	ДокументУдостоверяющийЛичность.Вставить("number", ДокументЗаявление.ВладелецЭЦПНомерДокумента);
	ДокументУдостоверяющийЛичность.Вставить("issuer", ДокументЗаявление.ВладелецЭЦПКемВыданДокумент);
	ДокументУдостоверяющийЛичность.Вставить("issue_date", ДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента);
	ДокументУдостоверяющийЛичность.Вставить("issuer_code", ДокументЗаявление.ВладелецЭЦПКодПодразделения);
		
	Возврат ДокументУдостоверяющийЛичность;
	
КонецФункции

Функция ТекстЗаявленияДляМоделиСервиса(ДокументЗаявление)
	
	ИдентификаторАбонента = ОбработкаЗаявленийАбонентаВызовСервера.ИдентификаторАбонентаПоОрганизации(
		ДокументЗаявление.Организация);
	
	Результат = ОбработкаЗаявленийАбонентаВызовСервера.АдресЗаявленияПо1СОтчетности(
		ДокументЗаявление, 
		"_ТекстЗапросаНаСертификат_",
		ИдентификаторАбонента);
		
	ДвДанные = ПолучитьИзВременногоХранилища(Результат.АдресЗаявления);
	Текст = ПолучитьСтрокуИзДвоичныхДанных(ДвДанные, "windows-1251");
	
	Возврат Текст;
		
КонецФункции

Функция ПодготовитьПолучателей(ДокументЗаявление)
	
	Получатели = Новый Массив;
	
	Если ДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		Получатель = Новый Структура;
		Получатель.Вставить("type", XMLСтрока(Перечисления.ТипыКонтролирующихОрганов.ФСРАР));
		Получатель.Вставить("code", XMLСтрока(ДокументЗаявление.КодРегионаФСРАР));
		Получатели.Добавить(Получатель);
	КонецЕсли;
	
	Если ДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН Тогда
		Получатель = Новый Структура;
		Получатель.Вставить("type", XMLСтрока(Перечисления.ТипыКонтролирующихОрганов.РПН));
		Получатели.Добавить(Получатель);
	КонецЕсли;
	
	Если ДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС Тогда
		Получатель = Новый Структура;
		Получатель.Вставить("type", XMLСтрока(Перечисления.ТипыКонтролирующихОрганов.ФТС));
		Получатели.Добавить(Получатель);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДокументЗаявление.Получатели Цикл
		Получатель = Новый Структура;			
		Если СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			Получатель.Вставить("type", XMLСтрока(СтрокаТаблицы.ТипПолучателя));
			Получатель.Вставить("code", СтрокаТаблицы.КодПолучателя);
			Получатель.Вставить("kpp",  СтрокаТаблицы.КПП);
		ИначеЕсли СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			Получатель.Вставить("type", XMLСтрока(СтрокаТаблицы.ТипПолучателя));			
		Иначе
			Получатель = Новый Структура;
			Получатель.Вставить("type", XMLСтрока(СтрокаТаблицы.ТипПолучателя));
			Получатель.Вставить("code", СтрокаТаблицы.КодПолучателя);
		КонецЕсли;
		
		Получатели.Добавить(Получатель);
	КонецЦикла;
	
	Возврат Получатели;
	
КонецФункции

Функция ПодготовитьИзменившиесяРеквизиты(ДокументЗаявление)
	
	ИзменившиесяРеквизиты = Новый Массив;
	Для Каждого ИзменившийсяРеквизит Из ДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления Цикл
		ИзменившиесяРеквизиты.Добавить(XMLСтрока(ИзменившийсяРеквизит.ИзмененныйРеквизит));		
	КонецЦикла;
	
	Возврат ИзменившиесяРеквизиты;
	
КонецФункции

Функция ПолучитьИдентификаторАбонента(ДокументЗаявление)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторАбонента = "";
	Если ДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение Тогда
		ИдентификаторАбонента = ДокументЗаявление.УчетнаяЗапись.ИдентификаторАбонента;		
	КонецЕсли;
	
	Возврат ИдентификаторАбонента;
	
КонецФункции

Функция ПодготовитьФайлы(ДокументЗаявление)
	
	Файлы = Новый Массив;
	ИдентификаторыМЧД = ОбработкаЗаявленийАбонентаКлиентСервер.СоответствиеИДиМЧД(ДокументЗаявление);
	
	Для Каждого ЭлектронныйДокумент Из ДокументЗаявление.ЭлектронныеДокументы Цикл

		ПрисоединенныйФайл = ЭлектронныйДокумент.Файл;
		
		document = ОбработкаЗаявленийАбонентаКлиентСервер.ВидДокументаЗаявленияСкорректированный(ЭлектронныйДокумент);
		
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы 				= Новый УникальныйИдентификатор;
		ДополнительныеПараметры.ПолучатьСсылкуНаДвоичныеДанные 	= Истина;
		Результат = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ДополнительныеПараметры);
		
		Файл = Новый Структура;
		Файл.Вставить("document", 	document);
		Файл.Вставить("data", 		ПолучитьИзВременногоХранилища(Результат.СсылкаНаДвоичныеДанныеФайла));
		Файл.Вставить("type", 		Результат.Расширение);
		
		Если Результат.ПодписанЭП Тогда
			
			ДвоичныеДанныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл)[0].Подпись;
			Если ТипЗнч(ДвоичныеДанныеПодписи) = Тип("ХранилищеЗначения") Тогда
				ДвоичныеДанныеПодписи = ДвоичныеДанныеПодписи.Получить();
			КонецЕсли;
			Файл.Вставить("signature", ДвоичныеДанныеПодписи);
			
		КонецЕсли;
		
		ЗаполнитьIDФайлов(Файл, ЭлектронныйДокумент, ИдентификаторыМЧД);
		
		Файлы.Добавить(Файл);
			
	КонецЦикла;
	
	Возврат Файлы;
	
КонецФункции

Процедура ЗаполнитьIDФайлов(Файл, ЭлектронныйДокумент, ИдентификаторыМЧД)
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.МЧД) Тогда
		
		ИД_МЧД = ИдентификаторыМЧД.Получить(ЭлектронныйДокумент.МЧД);
		
		Если ЭлектронныйДокумент.ЭтоПодписьКМЧД Тогда
			Файл.Вставить("ParentID", ИД_МЧД);
			Файл.Вставить("ID", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор());
		КонецЕсли;
		
		Если ЭлектронныйДокумент.ЭтоМЧД Тогда
			Файл.Вставить("ID", ИД_МЧД);
		КонецЕсли;
		
	Иначе
		Файл.Вставить("ID", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаШум(ДокументЗаявление, МастерДалее) Экспорт
	
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);
	Если ИспользоватьСуществующий Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Реквизиты = Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи.Реквизиты;
	Для каждого ЗначениеРеквизита Из Реквизиты Цикл
		
		Если НЕ ЗначениеРеквизита.Тип.СодержитТип(Тип("Строка")) Тогда
			Продолжить;
		КонецЕсли;
			
		Значение = ДокументЗаявление[ЗначениеРеквизита.Имя];
		Если ТипЗнч(Значение) <> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
			
		ЗаполненоШумом = КонтекстЭДОСервер.ЗначениеЗаполненоШумом(Значение);
	
		Если ЗаполненоШумом Тогда
			
			МастерДалее = Ложь;
			
			ТекстОшибки = НСтр("ru = 'Значение ""%2"" в поле ""%1"" не несет в себе полезной информации'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ЗначениеРеквизита.Синоним, Значение);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция СертификатДолженБытьПолученОтГосУЦ(Форма) Экспорт
	
	СертификатДолженБытьПолученОтГосУЦ = Форма.ЭтоБюджетополучатель;
		
	Возврат СертификатДолженБытьПолученОтГосУЦ;
	
КонецФункции

Функция ВозможноБесшовноеПолучениеСертификатаВДУЦ(Форма) Экспорт
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	Возможно =
		ЭтоРуководитель
		И НЕ Форма.ЭтоБюджетополучатель;
		
	Возврат Возможно;
	
КонецФункции

Функция УдалитьДобавленныйФлаг(Форма, ИмяРеквизита)
	
	Элементы = Форма.Элементы;
	
	ИмяЭлемента = ИмяЭлементаДобавляемогоФлага(ИмяРеквизита);
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент <> Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли;;
	
КонецФункции

Функция СоздатьДобавляемыйФлаг(Форма, ИмяРеквизита, Подсказка)
	
	Элементы = Форма.Элементы;
	
	ИмяЭлемента = ИмяЭлементаДобавляемогоФлага(ИмяРеквизита);
	ИмяСобытия  = ИмяСобытияДобавляемогоФлага(ИмяРеквизита);
	
	НужнаяГруппа = Форма.РодительФлага();
	
	Если НужнаяГруппа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Элемент     = Элементы.Найти(ИмяЭлемента);
	Создать     = Элемент = Неопределено;
	Переместить = Элемент <> Неопределено И Элемент.Родитель <> НужнаяГруппа;
	
	Если НЕ Создать И НЕ Переместить Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Переместить Тогда
		Элементы.Переместить(Элемент, НужнаяГруппа);
		Возврат Элемент;
	Иначе

		Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), НужнаяГруппа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.УстановитьДействие("ПриИзменении", ИмяСобытия);
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		
		Если Подсказка <> "" Тогда
			
			Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
			Элемент.Подсказка = Подсказка;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ИмяЭлементаДобавляемогоФлага(ИмяРеквизита)
	
	Возврат ИмяРеквизита + "Доп";
	
КонецФункции

Функция ИмяСобытияДобавляемогоФлага(ИмяРеквизита)
	
	Возврат ИмяРеквизита + "ПриИзменении";
	
КонецФункции

Процедура ИзменитьОформлениеДобавляемогоФлага(Форма, ИмяРеквизита, ДляЮЛ, Подсказка = "")
	
	Удалить = 
		ДляЮЛ И НЕ Форма.ЭтоЮридическоеЛицо
		ИЛИ НЕ ДляЮЛ И Форма.ЭтоЮридическоеЛицо
		ИЛИ НЕ ЗначениеЗаполнено(Форма.Организация)
		ИЛИ Форма.ЭтоИнтеграцияСБанком;
	
	Если Удалить Тогда
		УдалитьДобавленныйФлаг(Форма, ИмяРеквизита);
	Иначе
		СоздатьДобавляемыйФлаг(Форма, ИмяРеквизита, Подсказка);
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлементаДобавляемогоФлага(ИмяРеквизита);
	Элемент     = Форма.Элементы.Найти(ИмяЭлемента);
	
	Если Форма.ЗапретитьИзменение И Элемент <> Неопределено Тогда
		Элемент.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеДобавляемыхФлагов(Форма) Экспорт
	
	ИзменитьОформлениеДобавляемогоФлага(Форма, "ЭтоНотариусАдвокатИлиГКФХ", Ложь);
	
КонецПроцедуры

Функция РодительДобавляемогоФлага(Группы) Экспорт
	
	НужнаяГруппа = Неопределено;
	Для каждого Группа Из Группы Цикл
		Если ГруппаВидима(Группа) Тогда
			НужнаяГруппа = Группа;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НужнаяГруппа;
	
КонецФункции

Функция ГруппаВидима(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Истина;
	ИначеЕсли НЕ Элемент.Видимость Тогда
		Возврат Ложь;
	Иначе
		Возврат ГруппаВидима(Элемент.Родитель);
	КонецЕсли;
	
КонецФункции

Функция ДоступнаЭлектроннаяПодписьВМоделиСервиса(Форма) Экспорт
	
	ОблакоВозможноДляДУЦ = ОбработкаЗаявленийАбонентаКлиентСервер.ЭПВМоделиСервисаДоступнаЧерезДУЦ();
	
	Доступна = 
		ЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно() 
		И НЕ Форма.СертификатДолженБытьПолученОтГосУЦ
		И (НЕ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ
		ИЛИ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ И ОблакоВозможноДляДУЦ);
		
	Возврат Доступна;
		
КонецФункции

Процедура ПриУстановкеРежимаТолькоСУЦНаСервере(Форма) Экспорт
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(Форма);
	
	Форма.СертификатДолженБытьПолученОтГосУЦ        = СертификатДолженБытьПолученОтГосУЦ(Форма);
	Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ = ВозможноБесшовноеПолучениеСертификатаВДУЦ(Форма);
	ОблакоВозможноДляДУЦ = ОбработкаЗаявленийАбонентаКлиентСервер.ЭПВМоделиСервисаДоступнаЧерезДУЦ();
	
	Форма.ИнициализацияДляЭПВМоделиСервиса();
	
КонецПроцедуры

Функция УЦВЗаявлении(ДокументЗаявление) Экспорт
	
	УЦ = ДокументЗаявление.УдостоверяющийЦентр;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КА = КонтекстЭДОСервер.ДанныеУЦ(ДокументЗаявление).НаименованиеУЦ;

	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоПолучениеСертификатВКА(ДокументЗаявление) Тогда
		УЦСтрокой = КА;
	ИначеЕсли УЦ = Перечисления.УдостоверяющиеЦентрыБРО.УЦФНС Тогда
		УЦСтрокой = НСтр("ru = 'Федеральная налоговая служба'");
	ИначеЕсли УЦ = Перечисления.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр
		ИЛИ ДокументЗаявление.ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.Руководитель Тогда
		УЦСтрокой = НСтр("ru = 'АО ""Аналитический Центр""'");
	Иначе
		УЦСтрокой = КА;
	КонецЕсли;
	
	Возврат УЦСтрокой;
	
КонецФункции

Процедура ИзменитьОформлениеВключаемогоСертификата(Форма) Экспорт
	
	ИзменитьГруппировкуСУЦ(Форма);
	ИзменитьОформлениеСУЦ(Форма);
	ИзменитьОформлениеКнопкиОчисткиСУЦ(Форма);
	ИзменитьОформлениеСпособаПолученияСертификата(Форма);
	ИзменитьОформлениеПодсказкиСУЦ(Форма);
	
КонецПроцедуры

Процедура ИзменитьГруппировкуСУЦ(Форма)
	
	Элементы = Форма.Элементы;
	
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Форма);
	
	ВывестиВОднойСтроке = 
		ИспользоватьСуществующий И Форма.ВключаемыйСертификат = Неопределено
		ИЛИ НЕ ИспользоватьСуществующий;
	
	Если ВывестиВОднойСтроке Тогда
		Элементы.ГруппаСпособПолученияСертификата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	Иначе
		Элементы.ГруппаСпособПолученияСертификата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеСУЦ(Форма)
	
	Элементы = Форма.Элементы;
	
	ПоказыватьСуществующий = 
		ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Форма)
		ИЛИ Форма.СертификатДолженБытьПолученОтГосУЦ;
		
	Элемент = Элементы.ПредставлениеВключаемогоСертификата;
		
	Если ПоказыватьСуществующий Тогда
		
		Если Форма.ВключаемыйСертификат = Неопределено Тогда
			Элемент.Заголовок  = НСтр("ru = 'Выбрать'");
			Элемент.ЦветТекста = Форма.КрасныйЦвет;
		Иначе
			Представление = ДокументооборотСКОКлиентСервер.ПредставлениеСертификата(Форма.ВключаемыйСертификат);
			Элемент.Заголовок  = Представление;
			Элемент.ЦветТекста = Форма.СинийЦвет;
		КонецЕсли;
		Элемент.Видимость = Истина;
	Иначе
		Элемент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеКнопкиОчисткиСУЦ(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ОчиститьВключаемыйСертификат.Видимость = 
		ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Форма) 
		И НЕ Форма.ЗапретитьИзменение 
		И Форма.ВключаемыйСертификат <> Неопределено
		И НЕ Форма.СертификатДолженБытьПолученОтГосУЦ;
	
КонецПроцедуры
	
Процедура ИзменитьОформлениеСпособаПолученияСертификата(Форма)
	
	Элементы = Форма.Элементы;
	ЭтоПервичноеЗаявление = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма);
	ЭтоРуководитель       = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	Если ЭтоПервичноеЗаявление Тогда
		
		Видимость = 
			Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса 
			ИЛИ Форма.СертификатыОрганизацииПоИНН.Количество() > 0 
			ИЛИ Форма.СертификатДолженБытьПолученОтГосУЦ
			ИЛИ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ И ЭтоРуководитель
			ИЛИ НЕ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ И НЕ ЭтоРуководитель;
		
		Элементы.ГруппаПолученияСертификата.Видимость = Видимость;

		Если Видимость И Форма.ЗапретитьИзменение Тогда
			Элементы.ГруппаПолученияСертификата.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если Форма.ЭтоИнтеграцияСБанком Тогда
			Элементы.ГруппаПолученияСертификата.Ширина = 60;
		Иначе
			Элементы.ГруппаПолученияСертификата.ЦветФона = Новый Цвет();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПереключатателейСертификата.Видимость = 
		НЕ Форма.СертификатДолженБытьПолученОтГосУЦ
		И НЕ Форма.ЭтоИнтеграцияСБанком;
	
КонецПроцедуры

Процедура ИзменитьОформлениеПодсказкиСУЦ(Форма)
	
	Если Форма.ЭтоИнтеграцияСБанком Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	СсылкаСертификата = Элементы.ПредставлениеВключаемогоСертификата;
	Вопросик = Элементы.ПодсказкаПоВключаемомуСертификату;
	
	Если Форма.ЭтоБюджетополучатель Тогда
		
		Подсказка = ОбработкаЗаявленийАбонентаКлиентСервер.ПодсказкаПриВыбореСертификатаКазначейства();
		СсылкаСертификата.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		СсылкаСертификата.РасширеннаяПодсказка.Заголовок = Подсказка;
		Вопросик.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
	ИначеЕсли ЭтоРуководитель И НЕ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ Тогда
		
		Подсказка = ОбработкаЗаявленийАбонентаКлиентСервер.ПодсказкаПриВыбореСертификатаФНС(Форма.ЭтоЮридическоеЛицо);
		СсылкаСертификата.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		СсылкаСертификата.РасширеннаяПодсказка.Заголовок = Подсказка;
		Вопросик.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
	Иначе
		
		Подсказка = НСтр("ru = 'Можно использовать сертификаты, выданные удостоверяющими центрами, аккредитованными 
                          |Минкомсвязи России, а также сертификаты, изданные для целей 1С-Отчетности в другой программе.'");
		СсылкаСертификата.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Вопросик.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Вопросик.РасширеннаяПодсказка.Заголовок = Подсказка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьЗаявление_ДанныеУЦ(Форма, НовыйДокументЗаявление) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.РазобратьДанныеУЦ(Форма);
	
	НовыйДокументЗаявление.СпецоператорСвязи = Форма.Спецоператор;
	
	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоПолучениеСертификатВКА(Форма) Тогда
		НовыйДокументЗаявление.НаименованиеУЦ			= Форма.НаименованиеУЦ;
		НовыйДокументЗаявление.РегламентУЦ				= Форма.РегламентУЦ;
		НовыйДокументЗаявление.ПолучательЗаявленияВУЦ	= Форма.ПолучательЗаявленияВУЦ;
		НовыйДокументЗаявление.АдресУЦ					= Форма.АдресУЦ;
	ИначеЕсли НЕ ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Форма) Тогда
		НовыйДокументЗаявление.УдостоверяющийЦентр		= Форма.УЦ;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьЗаявление_СлужебныеРеквизиты(Форма, НовыйДокументЗаявление, GUID = "") Экспорт
	
	НовыйДокументЗаявление.Дата							= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Ответственный				= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи	= '00010101';
	НовыйДокументЗаявление.Статус						= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
	
	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма) Тогда
	
		НовыйДокументЗаявление.ТипЗаявления	= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
		НовыйДокументЗаявление.ИдентификаторДокументооборота = GUID;
		
	Иначе
		НовыйДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение;
		НовыйДокументЗаявление.ИдентификаторДокументооборота	= ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор();
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьЗаявление_Очистка(Форма, НовыйДокументЗаявление) Экспорт
	
	Для каждого РеквизитЗаявления Из НовыйДокументЗаявление.Метаданные().Реквизиты Цикл
		Если РеквизитЗаявления.Имя = "Номер" И Форма.ЭтоОткрытиеЗаявления Тогда
			НовыйДокументЗаявление.УстановитьНовыйНомер();
		ИначеЕсли РеквизитЗаявления.Имя <> "ПодписатьЭП" Тогда
			НовыйДокументЗаявление[РеквизитЗаявления.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Для каждого ТаблицаЗаявления Из НовыйДокументЗаявление.Метаданные().ТабличныеЧасти Цикл
		НовыйДокументЗаявление[ТаблицаЗаявления.Имя].Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДанныеВладельца(Форма) Экспорт
	
	Если Форма.ЭтоМультиРежим И Форма.ВладелецЭЦПРасширилСебеПрава Тогда
		Мультирежим.ОчиститьПраваПользователя(Форма, Форма.ВладелецЭЦП);
	КонецЕсли;
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Имя = РеквизитФормы.Имя;
		
		ОчиститьРеквзит = 
			СтрНайти(Имя, "Владелец") <> 0
			И СтрНайти(Имя, "Исходн") = 0;
		
		Если ОчиститьРеквзит Тогда
			Форма[Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Чистим, т.к. они были отобраны по ИНН Владельца
	Форма.СертификатыОрганизацииПоИНН.Очистить();
	
	Форма.ТелефонМобильный = "";
	Форма.ЭлектроннаяПочта = "";
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ОчиститьФайлыПриУстановкеНовогоВладельцаЭЦП(Форма);
		
КонецПроцедуры

Процедура ЗаполнитьДанныеСотрудника(Форма) Экспорт
	
	ДанныеОрганизации = Форма.ДанныеОрганизации;
	
	ДанныеОрганизации.Вставить("Организация", Форма.Организация);
 
	ДанныеСотрудника = ОбработкаЗаявленийАбонента.ПолучитьДанныеСотрудника(
		Форма.ВладелецЭЦПТип, 
		ДанныеОрганизации, 
		Форма.ВладелецЭЦП);
		
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	Форма.ВладелецЭЦПИмя		= ДанныеСотрудника.ФИО.Имя;
	Форма.ВладелецЭЦПФамилия	= ДанныеСотрудника.ФИО.Фамилия;
	Форма.ВладелецЭЦПОтчество	= ДанныеСотрудника.ФИО.Отчество;
	Форма.ВладелецЭЦПСНИЛС		= ДанныеСотрудника.СНИЛС;
	Форма.ВладелецЭЦПИНН		= ДанныеСотрудника.ИНН;
	Форма.ВладелецЭЦПЭтоФизЛицо = НЕ ЭтоРуководитель; // Потом переключат, если понадобится
	
	Если Форма.ЭтоЮридическоеЛицо Тогда
		Форма.ВладелецЭЦПДолжность = ДанныеСотрудника.Должность;
		Форма.ВладелецЭЦППодразделение = ДанныеСотрудника.Подразделение;
	КонецЕсли;
	
	ПередставлениеТелефона = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(ДанныеСотрудника.ТелефонРабочий); 
	Если ПередставлениеТелефона = "" Тогда
		Форма.ТелефонМобильный  = ДанныеСотрудника.ТелефонРабочий;
	Иначе
		Форма.ТелефонМобильный  = ПередставлениеТелефона;
	КонецЕсли;
	Представление = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Форма.ТелефонМобильный);
	Форма.ТелефонМобильныйДляПаролей = Представление;
	
	Если ЗначениеЗаполнено(ДанныеСотрудника.ЭлектроннаяПочта) Тогда
		Форма.ЭлектроннаяПочта = ДанныеСотрудника.ЭлектроннаяПочта;
		Форма.ЭлектроннаяПочтаДляПаролей = СокрЛП(Форма.ЭлектроннаяПочта);
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ОчиститьИСкопироватьНастройкиПаролейВОблакеИзКоробки(Форма);
	
	Форма.ВладелецЭЦПВидДокумента = ДанныеСотрудника.ВидДокумента;
	ЭтоПервичноеЗаявление = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма);
	Если ЭтоПервичноеЗаявление Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Форма.ВладелецЭЦПВидДокумента = КонтекстЭДОСервер.СкорректироватьВидУдостоверения(Форма.ВладелецЭЦПВидДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ВладелецЭЦПВидДокумента) Тогда
		
		Форма.ВладелецЭЦПСерияДокумента      = ДанныеСотрудника.Серия;
		Форма.ВладелецЭЦПНомерДокумента      = ДанныеСотрудника.Номер;
		Форма.ВладелецЭЦПДатаВыдачиДокумента = ДанныеСотрудника.ДатаВыдачи;
		Форма.ВладелецЭЦПКемВыданДокумент    = ДанныеСотрудника.КемВыдан;
		Форма.ВладелецЭЦПДатаРождения        = ДанныеСотрудника.ДатаРождения;
		Форма.ВладелецЭЦПМестоРождения       = ДанныеСотрудника.МестоРождения;
		Форма.ВладелецЭЦППол                 = ДанныеСотрудника.Пол;
		
		ЭтоПаспортРФ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(Форма.ВладелецЭЦПВидДокумента);
		
		Если ЭтоПаспортРФ Тогда
			Форма.ВладелецЭЦПКодПодразделения = ДанныеСотрудника.КодПодразделения;
		Иначе
			Форма.ВладелецЭЦПКодПодразделения = "";
		КонецЕсли;
		
		// Гражданство заполняем только для Российского паспорта
		Форма.ВладелецЭЦПГражданство = ДанныеСотрудника.Гражданство;
		Если ЭтоПаспортРФ И НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦПГражданство) Тогда
			Форма.ВладелецЭЦПГражданство = Справочники.СтраныМира.Россия;
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦПВидДокумента) Тогда
		Форма.ВладелецЭЦПВидДокумента = ОбщегоНазначения.ПредопределенныйЭлемент(
			"Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	КонецЕсли;
	
	Мультирежим.ИнициализироватьПользователяМультиРежима(Форма, Форма.ВладелецЭЦП);
	Мультирежим.ЗаполнитьДанныеВладельцаДляМультирежима(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьМЧДВЗаявлении(Форма) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда
		ОбработкаЗаявленийАбонентаКлиентСервер.УдалитьМЧДИзФайлов(Форма);
		Возврат;
	КонецЕсли;
	
	Обязательно = ОбработкаЗаявленийАбонентаКлиентСервер.ОбязательноПриложитьМЧД(Форма);
	ЕстьВыбор   = ОбработкаЗаявленийАбонентаКлиентСервер.ЕстьВыборМеждуМЧДиСканом(Форма);
	
	Заполнить = Обязательно ИЛИ ЕстьВыбор И Форма.ВладелецЭЦПЭтоФизЛицо;
	
	Если НЕ Заполнить Тогда
		ОбработкаЗаявленийАбонентаКлиентСервер.УдалитьМЧДИзФайлов(Форма);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УдалитьТекущийВидДокументов(Форма, "Доверенность");
	
	Доверенности = Новый Массив;
	ДобавитьМЧДВЗаявление(Форма, Доверенности, "ФНС");
	ДобавитьМЧДВЗаявление(Форма, Доверенности, "РаспределенныйРеестр");
	ДобавитьМЧДФССВЗаявление(Форма, Доверенности);
	
	МЧДДляДобавления = Новый Массив;
	Для каждого МЧД Из Доверенности Цикл
		
		Результат = ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьФайлыМЧД(МЧД, Форма.ВладелецЭЦПИНН, Форма.ВладелецЭЦПСНИЛС);
	
		Если НЕ Результат.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		
		МЧДДляДобавления.Добавить(Результат.Доверенность);
		
	КонецЦикла;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ДобавитьМЧДВФайлыЗаявления(Форма, МЧДДляДобавления);
		
КонецПроцедуры

Функция ДобавитьМЧДВЗаявление(Форма, Доверенности, Вид) Экспорт
	
	Выборка = ВыборкаМЧДДляЗаявления(Форма, Вид);
	
	Пока Выборка.Следующий() Цикл
		
		МЧД = Выборка.МЧД;
		
		Отправлена = МЧДОтправлена(МЧД);
		Отозвана   = МЧДОтозвана(МЧД);
		Загружена  = ОбработкаЗаявленийАбонентаВызовСервера.МЧДЗагружена(МЧД);
		
		Если (Отправлена ИЛИ Загружена) И НЕ Отозвана Тогда
			Доверенности.Добавить(МЧД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция МЧДОтправлена(МЧД) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС") Тогда 
		ТекущееСостояние = ДлительнаяОтправкаВызовСервера.ТекущийЭтапОтправки(МЧД, "ФНС");
		
	ИначеЕсли ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
		ТекущееСостояние = ДлительнаяОтправкаВызовСервера.ТекущийЭтапОтправки(МЧД, "ПФР");
		
	ИначеЕсли ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		ТекущееСостояние = ДлительнаяОтправкаВызовСервера.ТекущийЭтапОтправки(МЧД, Неопределено);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(МЧД) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ТекущееСостояние = ДлительнаяОтправкаВызовСервера.ТекущийЭтапОтправки(МЧД, Неопределено);
	КонецЕсли;

	Если ТекущееСостояние = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Состояние = ТекущееСостояние.СостояниеСдачиОтчетности;
	Состояния = Перечисления.СостояниеСдачиОтчетности;
	
	Отправлено = 
		Состояние = Состояния.ДокументооборотНачат
		ИЛИ Состояние = Состояния.ПоложительныйРезультатДокументооборота;
	
	Возврат Отправлено;
	
КонецФункции

Функция МЧДОтозвана(МЧД) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС") Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Отозвана = КонтекстЭДОСервер.ПроверитьМЧДФНСНаОтзыв(МЧД);
		
	ИначеЕсли ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		Отозвана = МЧД.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отозвано;
		
	ИначеЕсли ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Отозвана = КонтекстЭДОСервер.ПроверитьУПУПНаОтзыв(МЧД);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(МЧД) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ИмяТипаПеречисленияТехническиеСтатусыМЧД = "ТехническиеСтатусыМЧД";
		Отозвана = (ДокументооборотСКОВызовСервера.СвойстваМЧДЕдиногоФормата(МЧД).ТехническийСтатус =
			Перечисления[ИмяТипаПеречисленияТехническиеСтатусыМЧД].Отменена);
		
	Иначе
		Отозвана = Ложь;
	КонецЕсли;
		
	Возврат Отозвана;
	
КонецФункции

Функция ДобавитьМЧДФССВЗаявление(Форма, Доверенности) Экспорт
	
	Выборка = ВыборкаМЧДДляЗаявления(Форма, "ФСС");
	
	Пока Выборка.Следующий() Цикл
		
		МЧД = Выборка.МЧД;
		Зарегистрирована = МЧДФССЗарегистрирована(МЧД);
		Если Зарегистрирована Тогда
			Доверенности.Добавить(МЧД);
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

Функция ВыборкаМЧДДляЗаявления(Форма, Вид) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МЧД.Ссылка КАК МЧД
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФСС КАК МЧД
		|ГДЕ
		|	МЧД.ПометкаУдаления = ЛОЖЬ
		|	И МЧД.Доверитель = &Доверитель
		|	И МЧД.ДатаОкончания > &ТекущаяДата
		|	И ТИПЗНАЧЕНИЯ(МЧД.Представитель) = ТИП(Справочник.ФизическиеЛица)
		|	И МЧД.ПредставительФЛ_ИНН = &ПредставительФЛ_ИНН";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФСС", Вид);
	
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Доверитель", 	Форма.Организация);
	Запрос.УстановитьПараметр("ПредставительФЛ_ИНН", Форма.ВладелецЭЦПИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция МЧДФССЗарегистрирована(МЧД) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ОтправкаСсылка = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСС(МЧД);
	Зарегистрирована = 
		ОтправкаСсылка <> Неопределено 
		И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
	Возврат Зарегистрирована;
	
КонецФункции

Функция ИспользованиеОблачнойПодписиВЗаявленииВозможно(Форма) Экспорт
	
	Возможно = 
		НЕ Форма.ЭтоМультиРежим
		И КриптографияЭДКО.ИспользованиеОблачнойПодписиВозможно();
	
	Возврат Возможно;
	
КонецФункции

Функция ТаблицаИзменилась(Форма, ИмяТаблицыНовой, ИмяТаблицыИсходной) Экспорт
	
	Хэш         = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Форма.РеквизитФормыВЗначение(ИмяТаблицыНовой));
	ХэшИсходный = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Форма.РеквизитФормыВЗначение(ИмяТаблицыИсходной));
	
	Изменилась = Хэш <> ХэшИсходный;
	
	Возврат Изменилась;
	
КонецФункции

Процедура СохранитьПользователей(Форма, НовыйДокументЗаявление) Экспорт
	
	НовыйДокументЗаявление.ПоддерживаетсяМультиРежим = Форма.ПоддерживаетсяМультирежим;
	НовыйДокументЗаявление.ПользователиУчетнойЗаписи.Очистить();

	Для каждого Строка Из Форма.ТаблицаПользователей Цикл
		
		НоваяСтрока = НовыйДокументЗаявление.ПользователиУчетнойЗаписи.Добавить();
		
		Если Форма.ПоддерживаетсяМультирежим Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка)
		ИначеЕсли Строка.Пометка Тогда
			НоваяСтрока.Пользователь = Строка.Пользователь;
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйДокументЗаявление.ЭтоМультиРежим = Форма.ЭтоМультиРежим;
	НовыйДокументЗаявление.ЭтоМультиРежимИсходный = Форма.ЭтоМультиРежимИсходный;
	НовыйДокументЗаявление.ВладелецЭЦПЭтоАдмин = Форма.ВладелецЭЦПЭтоАдмин;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПользователейИзКопии(Форма) Экспорт
	
	КопируемоеЗаявление = Форма.Реквизит;
	
	Форма.ЭтоМультиРежим = КопируемоеЗаявление.ЭтоМультиРежим;
	КопируемаяТаблица = КопируемоеЗаявление.ПользователиУчетнойЗаписи.Выгрузить();
	
	Если ТипЗнч(КопируемаяТаблица) = Тип("ТаблицаЗначений") Тогда
	
		Мультирежим.СкопироватьТаблицуПользователей(Форма, КопируемаяТаблица, Форма.ТаблицаПользователей, Ложь);

	ИначеЕсли Форма.ЭтоМультиРежим Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Форма.Организация);
	
		Мультирежим.ИнициализироватьПользователей(Форма, Форма.ТаблицаЗначений, УчетнаяЗапись);
		
	Иначе
		
		МассивПользователей = КопируемоеЗаявление.ПользователиУчетнойЗаписи.ВыгрузитьКолонку("Пользователь");
		
		Если МассивПользователей.Количество() = 0 Тогда
			Мультирежим.ИнициализироватьПользователей(Форма, Форма.ТаблицаПользователей, Форма.УчетнаяЗапись);
		Иначе
			
			Спиcок = Мультирежим.ПользователиУчетнойЗаписи();
			Для каждого Строка Из Спиcок Цикл
				
				НоваяСтрока = Форма.ТаблицаПользователей.Добавить();
				НоваяСтрока.Пользователь = Строка.Значение;
				НоваяСтрока.Пометка = МассивПользователей.Найти(Строка.Значение) <> Неопределено;
				
				Мультирежим.ЗаполнитьИсходныеЗначенияТаблицыПользователей(Форма, НоваяСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Мультирежим.ДобавитьНовыхПользователей(Форма);
	Мультирежим.СкорректироватьПраваПользователейМультиРежима(Форма);
	
	Форма.ВладелецЭЦПЭтоАдмин = МультирежимКлиентСервер.ВладелецЭЦПЭтоАдмин(Форма);
		
КонецПроцедуры

Функция ИнициализироватьИсходныеГосОрганыУчетнойЗаписи(Форма, ПолучателиФНС, ПолучателиФСГС) Экспорт
	
	Результат = ОбщиеПараметрыНаправленийПоУмолчанию();

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Форма.Организация);
	
	Если Мультирежим.ЭтоМультиРежим(УчетнаяЗапись) Тогда
		Направления = Мультирежим.НаправленияУчетнойЗаписиИзРегистра(Форма);
	Иначе
		Направления = КонтекстЭДОСервер.ДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись);
	КонецЕсли;
	
	Направления.Свойство("РегНомерПФР", Результат.РегНомерПФР);
	Направления.Свойство("КодРегионаФСРАР", Результат.КодРегионаФСРАР);
	
	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаЗаявления(Форма) Тогда
		СхемаСдачиОтчетности = КонтекстЭДОСервер.СхемаСдачиОтчетностиФСРАРпоКодуРегиона(Результат.КодРегионаФСРАР);
		Если СхемаСдачиОтчетности = Перечисления.СхемыСдачиОтчетностиФСРАР.СдачаВручную Тогда
			Результат.КодРегионаФСРАР = КонтекстЭДОСервер.КодРегионаФСРАР(Форма.АдресЮридическийЗначение);
		КонецЕсли;
	КонецЕсли;
	
	ПолучателиФНС.Очистить();
	ПолучателиФСГС.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись";

	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНаправлений Из Выгрузка Цикл
		
		Если СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР
			ИЛИ СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			
			Результат.СдаватьВПФР = Истина;
			Результат.СдаватьВФСС = Истина;
			
			Если ЗначениеЗаполнено(СтрокаНаправлений.КодПолучателя)
				И СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
				Результат.КодПФР = Форматировать(СтрокаНаправлений.КодПолучателя);
			КонецЕсли;
			
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			
			Результат.СдаватьВФНС = Истина;
			
			НоваяСтрока = ПолучателиФНС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений);
			
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			
			Результат.СдаватьВРосстат = Истина;
			
			НоваяСтрока = ПолучателиФСГС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений);
			
			НоваяСтрока.Наименование = КонтекстЭДОСервер.НаименованиеТОГСаПоКоду(
				СтрокаНаправлений.КодПолучателя, 
				УчетнаяЗапись.СпецоператорСвязи);
			
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			Результат.ПодатьЗаявкуНаСертификатДляФСРАР = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			Результат.ПодатьЗаявкуНаПодключениеРПН = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
			Результат.ПодатьЗаявкуНаПодключениеФТС = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ЦБ Тогда
			Результат.СдаватьВЦБ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НужноПредложитьСоздатьВторичноеВместоПервичного(Форма) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Форма.Организация);
	
	ЭтоПотенциальныйПользователь = 
		Мультирежим.ЭтоМультиРежим(УчетнаяЗапись)
		И Мультирежим.ЭтоПодключениеПотенциальногоПользователя(Форма, Форма.ТекущийПользователь);
	
	Возврат 
		ЗначениеЗаполнено(Форма.Организация) 
		И ЗначениеЗаполнено(УчетнаяЗапись) 
		И НЕ ЭтоПотенциальныйПользователь;

КонецФункции
	
Процедура СохранитьВладельцаВЗаявление(
		Форма,
		НовыйДокументЗаявление,
		ВладелецЭЦП,
		ВладелецЭЦПСНИЛС,
		ВладелецЭЦПИНН,
		ВладелецЭЦПДолжность) Экспорт
		
	Свойства = 
		"ВладелецЭЦПТип,
		|ВладелецЭЦПВидДокумента,
		|ВладелецЭЦПНомерДокумента,
		|ВладелецЭЦПСерияДокумента,
		|ВладелецЭЦПДатаВыдачиДокумента,
		|ВладелецЭЦПКемВыданДокумент,
		|ВладелецЭЦПДатаРождения,
		|ВладелецЭЦПМестоРождения,
		|ВладелецЭЦПКодПодразделения,
		|ВладелецЭЦППол,
		|ВладелецЭЦПГражданство,
		|ВладелецЭЦПЭтоФизЛицо,
		|ВладелецЭЦПЭтоАдмин,
		|ВладелецЭЦПРасширилСебеПрава";

	ЗаполнитьЗначенияСвойств(НовыйДокументЗаявление, Форма, Свойства);
	
	НовыйДокументЗаявление.ВладелецЭЦПФамилия	= СокрЛП(Форма.ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя		= СокрЛП(Форма.ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество	= СокрЛП(Форма.ВладелецЭЦПОтчество);
	
	НовыйДокументЗаявление.ВладелецЭЦП      = ВладелецЭЦП;
	НовыйДокументЗаявление.ВладелецЭЦПИНН   = ВладелецЭЦПИНН;
	НовыйДокументЗаявление.ВладелецЭЦПСНИЛС = ВладелецЭЦПСНИЛС;
	
	Если Форма.ЭтоЮридическоеЛицо Тогда
		НовыйДокументЗаявление.ВладелецЭЦПДолжность 	= ВладелецЭЦПДолжность;
		НовыйДокументЗаявление.ВладелецЭЦППодразделение = Форма.ВладелецЭЦППодразделение;
	КонецЕсли;
	
КонецПроцедуры

Функция Форматировать(Значение)
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(Значение);
	
КонецФункции

Функция ОбщиеПараметрыНаправленийПоУмолчанию() Экспорт
	
	Структура = Новый Структура(Мультирежим.РезультатВыбораНаправлений());

	Для каждого Элемент Из Структура Цикл
		Если СтрНайти(Элемент.Ключ, "Сдавать") ИЛИ СтрНайти(Элемент.Ключ, "Подать") Тогда
			Структура[Элемент.Ключ] = Ложь;
		Иначе
			Структура[Элемент.Ключ] = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура СохранитьЗаявление_ГосОрганы(Форма, НовыйДокументЗаявление) Экспорт
	
	// Cуммарное направление для всей учетки
	ЭтоЗаявлениеНаИзменение = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма);
	
	// Контролирующие органы
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР = Форма.ПодатьЗаявкуНаСертификатДляФСРАР;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН 	= Форма.ПодатьЗаявкуНаПодключениеРПН;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС 	= Форма.ПодатьЗаявкуНаПодключениеФТС;
	
	Если Форма.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		Если ЭтоЗаявлениеНаИзменение Тогда
			НовыйДокументЗаявление.КодРегионаФСРАР = Форма.ИтоговыеДанныеОрганизации_КодРегионаФСРАР();
		Иначе
			НовыйДокументЗаявление.КодРегионаФСРАР = Форма.КодРегионаФСРАР;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДокументЗаявление.Получатели.Очистить();
	
	Если Форма.СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из Форма.ПолучателиФНС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя 	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
			НоваяСтрокаНаправления.КодПолучателя 	= СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП 				= СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.СдаватьВПФР ИЛИ Форма.СдаватьВФСС Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		НоваяСтрокаНаправления.КодПолучателя = Форма.КодПФР;
		НоваяСтрокаНаправления.КПП = "";
		
		Если ЭтоЗаявлениеНаИзменение Тогда
			НовыйДокументЗаявление.РегНомерПФР = Форма.ИтоговыеДанныеОрганизации_РегНомерПФР();
		Иначе
			НовыйДокументЗаявление.РегНомерПФР = Форма.РегНомерПФР;
		КонецЕсли;

		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС;
		НоваяСтрокаНаправления.КПП = "";
		
	КонецЕсли;
	
	Если Форма.СдаватьВРосстат Тогда
		Для Каждого СтрокаНаправлений Из Форма.ПолучателиФСГС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя 	= СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя 	= СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП 				= СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.СдаватьВЦБ Тогда
		ОбработкаЗаявленийАбонента.ДобавитьЦБВДокумент(НовыйДокументЗаявление);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЦБВДокумент(ДокументЗаявление) Экспорт
	
	НоваяСтрокаНаправления = ДокументЗаявление.Получатели.Добавить();
	НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ЦБ;
	НоваяСтрокаНаправления.КПП = "";
	
	Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
		НоваяСтрокаНаправления.КодПолучателя = "99";
	Иначе
		НоваяСтрокаНаправления.КодПолучателя = "00";
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьПользователей1ПРежимаВУчетнуюЗаписьИзЗаявления(
		ДокументЗаявление, 
		СсылкаУчетнаяЗапись, 
		ВыводитьСообщения = Ложь) Экспорт
		
	НаборЗаписей = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(СсылкаУчетнаяЗапись.Ссылка);
	
	Для Каждого СтрокаТаблицы Из ДокументЗаявление.ПользователиУчетнойЗаписи Цикл
		
		ДобавитьВРегистр = 
			ДокументЗаявление.ПоддерживаетсяМультиРежим И СтрокаТаблицы.Пометка
			ИЛИ НЕ ДокументЗаявление.ПоддерживаетсяМультиРежим;
		
		Если ДобавитьВРегистр Тогда
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.УчетнаяЗапись = СсылкаУчетнаяЗапись.Ссылка;
			НоваяСтрока.Пользователь  = СтрокаТаблицы.Пользователь;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		
		НаборЗаписей.Записать();
		Возврат Истина;
		
	Исключение
		
		РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке(
			ОписаниеОшибки(), 
			Ложь,
			"Не удалось обновить список пользователей учетной записи налогоплательщика """ + СокрЛП(СсылкаУчетнаяЗапись.Ссылка) + """.",
			,
			ВыводитьСообщения);
			
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ДописатьВЗаявлениеСведенияОВладельцеЭП(
		ДокументЗаявление,
		ТаблицаПользователей,
		ЗаписьXML,
		ТекстЗапросаНаСертификат = Неопределено,
		ЭтоПервичноеЗаявление = Истина, 
		ТребуетсяПереизданиеСертификата = Ложь,
		АлгоритмКонтейнераКлючей = Неопределено)
		
	ОтправительБылАдмином = МультирежимКлиентСервер.БылАдминомСталПользователем(
		ДокументЗаявление.Ссылка, 
		ДокументЗаявление.ВладелецЭЦП);
		
	ДобавлятьОстальныхПользователей = 
		ДокументЗаявление.ВладелецЭЦПЭтоАдмин 
		ИЛИ ОтправительБылАдмином;
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВладельцыЭЦП");
	
	Если ДокументЗаявление.ЭтоМультиРежим Тогда

		Для каждого Строка Из ТаблицаПользователей Цикл
			
			Если (Строка.Пометка ИЛИ Строка.ЭтоРазрегистрация) И НЕ Строка.ЭтоПотенциальныйПользователь Тогда
				
				Если Строка.ЭтоОтправитель Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ВладелецЭЦП");
					
					ДописатьВЗаявлениеВладельцаОтправителя(
						ДокументЗаявление,
						ЗаписьXML,
						Строка,
						ТекстЗапросаНаСертификат, 
						ТребуетсяПереизданиеСертификата,
						АлгоритмКонтейнераКлючей);
						
					ЗаписьXML.ЗаписатьКонецЭлемента(); // ВладелецЭЦП
					
				ИначеЕсли ДобавлятьОстальныхПользователей
					И Строка.Изменился Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ВладелецЭЦП");
					
					ДописатьВЗаявлениеДанныеВладельцаДляМультирежима(
						ДокументЗаявление, 
						Строка, 
						ЗаписьXML);
						
					ЗаписьXML.ЗаписатьКонецЭлемента(); // ВладелецЭЦП
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ВладелецЭЦП");
					
		ДописатьВЗаявлениеВладельцаОтправителя(
			ДокументЗаявление,
			ЗаписьXML,
			Неопределено,
			ТекстЗапросаНаСертификат, 
			ТребуетсяПереизданиеСертификата,
			АлгоритмКонтейнераКлючей);
			
		Если ЭтоОтключениеМультиРежима(ДокументЗаявление) Тогда
			ЗаписатьУзелXML(ЗаписьXML, "ЭтоАдмин", XMLСтрока(Истина));
			ЗаписатьУзелXML(ЗаписьXML, "ЭтоОтправительЗаявления", XMLСтрока(Истина), Истина);
		КонецЕсли;
			
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ВладелецЭЦП
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // ВладельцыЭЦП
	
КонецПроцедуры

Процедура ДописатьВЗаявлениеВладельцаОтправителя(
		ДокументЗаявление,
		ЗаписьXML,
		Строка = Неопределено,
		ТекстЗапросаНаСертификат = Неопределено, 
		ТребуетсяПереизданиеСертификата = Ложь,
		АлгоритмКонтейнераКлючей = Неопределено)
		
	ЭтоПервичноеЗаявление    = ДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);	
	МестоХраненияКлюча       = КриптографияЭДКОКлиентСервер.СвойстваМестаХраненияКлюча(ДокументЗаявление.МодельХраненияЗакрытогоКлюча, 
								ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "УчетнаяЗапись"));
	ЭтоЮридическоеЛицо       = ДокументЗаявление.ТипОрганизации;
		
	Если ИспользоватьСуществующий Тогда
		
		Если ЭтоПервичноеЗаявление Тогда
			Сертификат = ЗначенияРеквизитовОбъекта(ДокументЗаявление.Ссылка, "РеквизитыСертификата").РеквизитыСертификата.Получить();
		Иначе
			Сертификат = ЗначенияРеквизитовОбъекта(ДокументЗаявление.Ссылка, "Сертификат").Сертификат.Получить();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
			Тело = "";
		ИначеЕсли ТипЗнч(Сертификат.Отпечаток) = Тип("ДвоичныеДанные") Тогда
			Тело = Нрег(ПолучитьHexСтрокуИзДвоичныхДанных(Сертификат.Отпечаток));
		Иначе
			Тело = Base64Строка(Сертификат.Сертификат);
		КонецЕсли;
		
		ЗаписатьКриптопровайдер(ДокументЗаявление, Строка, ЗаписьXML, АлгоритмКонтейнераКлючей);
		
		Если ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
			ЗаписьДанныеУчетнойЗаписиОблачнойПодписи(ДокументЗаявление, ЗаписьXML, ЭтоПервичноеЗаявление, ТребуетсяПереизданиеСертификата);
		КонецЕсли;
		
		Если ДокументЗаявление.ЭтоСертификатДругогоУЦ Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СертификатСУЦ");
			ЗаписьXML.ЗаписатьТекст(Тело);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // СертификатСУЦ
			
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Сертификат");
			ЗаписьXML.ЗаписатьТекст(Тело);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // Сертификат
			
		КонецЕсли;
		
	Иначе
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
		ЭтоЗаявлениеТолькоНаПереход = КонтекстЭДОСервер.ЭтоЗаявлениеТолькоНаПереход(ДокументЗаявление);
		
		ДобавитьСведенияОВладельце = 
			ДокументЗаявление.ЭтоМультиРежим 
			ИЛИ НЕ ЭтоЗаявлениеТолькоНаПереход;
			
		Если ДобавитьСведенияОВладельце Тогда
			
			ЗаписьXML.ЗаписатьАтрибут("СНИЛС", ДокументЗаявление.ВладелецЭЦПСНИЛС);
			
			ЗаписатьФИОВладельцаЭП(ДокументЗаявление, ЗаписьXML);
			ЗаписатьУзелXML(ЗаписьXML,"ИНН", ДокументЗаявление.ВладелецЭЦПИНН, Истина);
			ЗаписатьПол(ДокументЗаявление, ЗаписьXML);
			ЗаписатьГражданство(ДокументЗаявление, ЗаписьXML);
			ЗаписатьУдЛичнВладельцаЭП(ДокументЗаявление, ЗаписьXML);
			
			Если ЭтоЮридическоеЛицо Тогда
				ЗаписатьУзелXML(ЗаписьXML,"Должность",ДокументЗаявление.ВладелецЭЦПДолжность, Истина);
			КонецЕсли;
				
			ЗаписатьУзелXML(ЗаписьXML,"Подразделение",ДокументЗаявление.ВладелецЭЦППодразделение, Истина);
			
		КонецЕсли;
		
		ЗаписатьКриптопровайдер(ДокументЗаявление, Строка, ЗаписьXML, АлгоритмКонтейнераКлючей);

		Если ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
			
			ЗаписьДанныеУчетнойЗаписиОблачнойПодписи(
				ДокументЗаявление, 
				ЗаписьXML, 
				ЭтоПервичноеЗаявление, 
				ТребуетсяПереизданиеСертификата);
				
		КонецЕсли;
		
		ЗаписатьЗапросНаСертификат(
			ДокументЗаявление,
			ЗаписьXML,
			ЭтоПервичноеЗаявление, 
			ТребуетсяПереизданиеСертификата,
			ТекстЗапросаНаСертификат);
			
	КонецЕсли;
		
	Если ДокументЗаявление.ВладелецЭЦПЭтоФизЛицо Тогда
		ЗаписатьУзелXML(ЗаписьXML,"ЭтоДоверенноеЛицо", XMLСтрока(Истина), Истина);
	КонецЕсли;
	
	ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ДокументЗаявление.ТелефонМобильный);
	ЗаписатьУзелXML(ЗаписьXML,"ТелефонМобильный", ТелефонМобильныйБезРазделителей, Истина);
	ЗаписатьУзелXML(ЗаписьXML,"ПолучатьСМСУведомления", XMLСтрока(ДокументЗаявление.ПолучатьСМСУведомления));
	ЗаписатьУзелXML(ЗаписьXML,"ЭлектроннаяПочта", ДокументЗаявление.ЭлектроннаяПочта, Истина);
	
	Если Строка <> Неопределено Тогда
		ДописатьВЗаявлениеДанныеВладельцаДляМультирежима(ДокументЗаявление, Строка, ЗаписьXML);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДописатьВЗаявлениеДанныеВладельцаДляМультирежима(
		ДокументЗаявление,
		Строка,
		ЗаписьXML)
		
	Если НЕ ДокументЗаявление.ЭтоМультиРежим И НЕ ЭтоОтключениеМультиРежима(ДокументЗаявление) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Строка.ЭтоОтправитель Тогда
		Если Строка.ЭтоПотенциальныйПользователь Тогда
			ЗаписатьУзелXML(ЗаписьXML, "СНИЛС", XMLСтрока(Строка.СНИЛС));
		Иначе
			ЗаписьXML.ЗаписатьАтрибут("СНИЛС", XMLСтрока(Строка.СНИЛС));
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьУзелXML(ЗаписьXML, "ЭтоАдмин", XMLСтрока(Строка.ЭтоАдмин));
	
	Если НЕ Строка.ЭтоОтправитель И Строка.ПолучатьУведомленияОбИзмененииПрав Тогда
		ЗаписатьУзелXML(ЗаписьXML,"ЭлектроннаяПочта", Строка.ЭлектроннаяПочта, Истина);
	КонецЕсли;
	
	Если Строка.ЭтоРазрегистрация Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ЭтоРазрегистрация", XMLСтрока(Истина));
	Иначе
		ДописатьВЗаявлениеДоступныеНаправления(ДокументЗаявление, Строка, ЗаписьXML);
	КонецЕсли;
	
	Если Строка.ЭтоОтправитель Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ЭтоОтправительЗаявления", XMLСтрока(Строка.ЭтоОтправитель), Истина);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДописатьВЗаявлениеСведенияОПотенциальныхВладельцахЭП(
		ДокументЗаявление,
		ТаблицаПользователей,
		ЗаписьXML)
		
	ОтправительБылАдмином = МультирежимКлиентСервер.БылАдминомСталПользователем(
		ДокументЗаявление.Ссылка, 
		ДокументЗаявление.ВладелецЭЦП);
		
	Добавлять = 
		ДокументЗаявление.ЭтоМультиРежим
		И (ДокументЗаявление.ВладелецЭЦПЭтоАдмин ИЛИ ОтправительБылАдмином);
		
	Если НЕ Добавлять Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаПользователей) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Добавлять = 
		МультирежимКлиентСервер.ЭтоПодключениеМультирежима(ДокументЗаявление)
		ИЛИ Мультирежим.ИзменилисьПотенциальныеПользователи(ДокументЗаявление, ТаблицаПользователей);
	
	Если НЕ Добавлять Тогда
		Возврат;
	КонецЕсли;

	Количество = 0;
	Для каждого Строка Из ТаблицаПользователей Цикл
		
		Если НЕ Строка.ЭтоПотенциальныйПользователь Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Строка.Пометка И НЕ Строка.ПометкаИсходная
			ИЛИ НЕ Строка.Изменился Тогда
			Продолжить;
		КонецЕсли;
		
		Если Количество = 0 Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("ПотенциальныеПользователи");
		КонецЕсли;
		Количество = Количество + 1;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ПотенциальныйПользователь");
		
		ДописатьВЗаявлениеДанныеВладельцаДляМультирежима(
			ДокументЗаявление,
			Строка,
			ЗаписьXML);
			
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ПотенциальныйПользователь
	
	КонецЦикла;
	
	Если Количество > 0 Тогда
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ПотенциальныеПользователи
	КонецЕсли;
	
КонецПроцедуры

Процедура ДописатьВЗаявлениеДоступныеНаправления(ДокументЗаявление, Строка, ЗаписьXML)
	
	Если НЕ ДокументЗаявление.ЭтоМультиРежим И НЕ ЭтоОтключениеМультиРежима(ДокументЗаявление) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДоступныеНаправления");
	
	Если Строка.СдаватьВФНС Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Направление");
		
		ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", "ФНС");
		Если Строка.ЭтоШифровальщик Тогда 
			ЗаписатьУзелXML(ЗаписьXML, "ЭтоШифровальщик", XMLСтрока(Строка.ЭтоШифровальщик));
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Направление
	КонецЕсли;
	
	Если Строка.СдаватьВПФР Тогда
		ДописатьНаправление(ЗаписьXML, "ПФР");
	КонецЕсли;
	
	Если Строка.СдаватьВРосстат Тогда
		ДописатьНаправление(ЗаписьXML, "ФСГС");
	КонецЕсли;
	
	Если Строка.СдаватьВФСС Тогда
		ДописатьНаправление(ЗаписьXML, "ФСС");
	КонецЕсли;
	
	Если Строка.СдаватьВЦБ Тогда
		ДописатьНаправление(ЗаписьXML, "ЦБ");
	КонецЕсли;
	
	Если Строка.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		ДописатьНаправление(ЗаписьXML, "ФСРАР");
	КонецЕсли;
	
	Если Строка.ПодатьЗаявкуНаПодключениеРПН Тогда
		ДописатьНаправление(ЗаписьXML, "РПН");
	КонецЕсли;
	
	Если Строка.ПодатьЗаявкуНаПодключениеФТС Тогда
		ДописатьНаправление(ЗаписьXML, "ФТС");
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента(); // ДоступныеНаправления
	
КонецПроцедуры

Процедура ДописатьНаправление(ЗаписьXML, ТипПолучателя)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Направление");
	ЗаписатьУзелXML(ЗаписьXML, "ТипПолучателя", ТипПолучателя);
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Направление
	
КонецПроцедуры

Процедура ЗаписатьФИОВладельцаЭП(ДокументЗаявление, ЗаписьXML)
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	ЗаписьXML.ЗаписатьАтрибут("Фамилия", ДокументЗаявление.ВладелецЭЦПФамилия);
	ЗаписьXML.ЗаписатьАтрибут("Имя", ДокументЗаявление.ВладелецЭЦПИмя);
	
	Если Не ПустаяСтрока(ДокументЗаявление.ВладелецЭЦПОтчество)Тогда
		ЗаписьXML.ЗаписатьАтрибут("Отчество", ДокументЗаявление.ВладелецЭЦПОтчество);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьУдЛичнВладельцаЭП(ДокументЗаявление, ЗаписьXML)
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("УдЛичн");
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КодВидДок = КонтекстЭДОСервер.ПолучитьКодВидаДокументаФизическогоЛица(ДокументЗаявление.ВладелецЭЦПВидДокумента);
	ЗаписьXML.ЗаписатьАтрибут("КодВидДок", КодВидДок);
	
	СерНомДок = СокрЛП(Строка(ДокументЗаявление.ВладелецЭЦПСерияДокумента) + " "
		+ Строка(ДокументЗаявление.ВладелецЭЦПНомерДокумента));
	ЗаписьXML.ЗаписатьАтрибут("СерНомДок", СерНомДок);
	
	ДатаВыдачиДокумента = Формат(ДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента, "ДФ=dd.MM.yyyy");
	ЗаписьXML.ЗаписатьАтрибут("ДатаДок",   XMLСтрока(ДатаВыдачиДокумента));
	
	ЗаписьXML.ЗаписатьАтрибут("ВыдДок",    ДокументЗаявление.ВладелецЭЦПКемВыданДокумент);
	
	// Код подразделения заполняется только для Паспорта РФ.
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ДокументЗаявление.ВладелецЭЦПВидДокумента) Тогда
		ЗаписьXML.ЗаписатьАтрибут("КодВыдДок", ДокументЗаявление.ВладелецЭЦПКодПодразделения);
	КонецЕсли;
	
	ДатаРождения = Формат(ДокументЗаявление.ВладелецЭЦПДатаРождения, "ДФ=dd.MM.yyyy");
	ЗаписьXML.ЗаписатьАтрибут("ДатаРожд", XMLСтрока(ДатаРождения));
	
	ЗаписьXML.ЗаписатьАтрибут("МестоРожд", ДокументЗаявление.ВладелецЭЦПМестоРождения);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ЗаписатьПустышку(ДокументЗаявление, Строка) 
	
	Результат = 
		ДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса
		И ДокументЗаявление.ЭтоМультиРежим
		И Строка.ЭтоОтправитель;
		
	Возврат Результат;
		
КОнецФункции

Процедура ЗаписатьКриптопровайдер(ДокументЗаявление, Строка, ЗаписьXML, АлгоритмКонтейнераКлючей = Неопределено)
	
	ЗаписатьПустышку = ЗаписатьПустышку(ДокументЗаявление, Строка); 

	ЗаписьXML.ЗаписатьНачалоЭлемента("Криптопровайдер");
	
	Если ЗаписатьПустышку Тогда
		
		ЗаписатьУзелXML(ЗаписьXML,"ТипКриптопровайдера", "_ТипКриптопровайдера_");
		ЗаписатьУзелXML(ЗаписьXML,"ИмяКриптопровайдера", "_ИмяКриптопровайдера_");
		
	Иначе
		
		КриптоПровайдер = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(
			ДокументЗаявление.ТипКриптопровайдера,
			АлгоритмКонтейнераКлючей);
			
		ЗаписатьУзелXML(ЗаписьXML,"ТипКриптопровайдера", КриптоПровайдер.Тип);
		ЗаписатьУзелXML(ЗаписьXML,"ИмяКриптопровайдера", КриптоПровайдер.Имя);
		
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
КонецПроцедуры

Процедура ЗаписатьЗапросНаСертификат(
		ДокументЗаявление,
		ЗаписьXML,
		ЭтоПервичноеЗаявление, 
		ТребуетсяПереизданиеСертификата,
		ТекстЗапросаНаСертификат)
	
	// Если требуется переиздание сертификата, включаем узел ЗапросНаСертификат
	Если ЭтоПервичноеЗаявление
		ИЛИ НЕ ЭтоПервичноеЗаявление И ТребуетсяПереизданиеСертификата Тогда
		
		УдостоверяющийЦентр = ОбработкаЗаявленийАбонента.УЦВЗаявлении(ДокументЗаявление);
		
		Если ЗначениеЗаполнено(ТекстЗапросаНаСертификат) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЗапросНаСертификат");
			
			ЗаписьXML.ЗаписатьАтрибут("УдостоверяющийЦентр", УдостоверяющийЦентр);
			
			ЗаписьXML.ЗаписатьТекст(Строка(ТекстЗапросаНаСертификат));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьПол(ДокументЗаявление, ЗаписьXML)
	
	Пол = ДокументЗаявление.ВладелецЭЦППол;
	
	Если Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		Пол = "2";
	ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		Пол = "1";
	Иначе
		Пол = "0";
	КонецЕсли;
	
	ЗаписатьУзелXML(ЗаписьXML,"Пол",Пол, Истина);
		
КонецПроцедуры

Процедура ЗаписатьГражданство(ДокументЗаявление, ЗаписьXML)
	
	Гражданство = ДокументЗаявление.ВладелецЭЦПГражданство;
	
	Если ЗначениеЗаполнено(Гражданство) Тогда
		Если ЗначениеЗаполнено(Гражданство.КодАльфа2) Тогда
			ЗаписатьУзелXML(ЗаписьXML,"Гражданство", Гражданство.КодАльфа2, Истина);
		Иначе
			ЗаписатьУзелXML(ЗаписьXML,"Гражданство", "RU", Истина);
		КонецЕсли;
	Иначе
		ЗаписатьУзелXML(ЗаписьXML,"Гражданство", "RU", Истина);
	КонецЕсли;
		
КонецПроцедуры

Функция ДописатьВЗаявлениеПоляДляСтатистики(ЗаписьXML)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ИмяПрограммыБИП   = КонтекстЭДОСервер.ИмяПрограммыБИП();
	
	Если ИмяПрограммыБИП <> "" Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЗаписатьУзелXML(ЗаписьXML, "ИмяПрограммы", 			ИмяПрограммыБИП);
		ЗаписатьУзелXML(ЗаписьXML, "НомерВерсииПрограммы", 	РегламентированнаяОтчетность.ВерсияПрограммы());
		ЗаписатьУзелXML(ЗаписьXML, "ВерсияПлатформы", 		СистемнаяИнформация.ВерсияПриложения);
	КонецЕсли;
	
КонецФункции

Процедура ДописатьВЗаявлениеИдентификаторПартнера(ЗаписьXML, ДокументЗаявление)

	ЭтоИнтеграцияСБанком = ОбработкаЗаявленийАбонента.ЭтоИнтеграцияСБанком();
	
	// Временно
	Если Ложь Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВнешнийПрограммныйИнтерфейс") Тогда
			
			Попытка
				МодульПрограммныйИнтерфейсСервиса = ОбщегоНазначения.ОбщийМодуль("ПрограммныйИнтерфейсСервиса");
				ОбслуживающиеОрганизации = МодульПрограммныйИнтерфейсСервиса.ОбслуживающиеОрганизацииАбонента();
				Если ОбслуживающиеОрганизации.Количество() > 0 Тогда
					Идентификатор = ОбслуживающиеОрганизации[0].Идентификатор;
					ЗаписатьУзелXML(ЗаписьXML, "ИдентификаторПартнера", Идентификатор, Истина);
				КонецЕсли;
			Исключение
				ДокументооборотСКО.ОбработатьИсключение(
					ИнформацияОбОшибке(), 
					НСтр("ru = 'Получение идентификатора партнера'"));
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры 

Функция ДописатьВЗаявлениеМультиРежим(ДокументЗаявление, ЗаписьXML)
	
	ЗаписатьУзелXML(
		ЗаписьXML,
		"ПоддерживаетсяМногопользовательскийРежим", 
		XMLСтрока(ДокументЗаявление.ПоддерживаетсяМультиРежим),
		Истина);
	
	//- для многопользовательского режима "ЭтоМногопользовательскийРежим"=true
	//- для однопользовательского этого элемента нет
	//- при отключении многопользовательского режима "ЭтоМногопользовательскийРежим"=false

	Если ЭтоОтключениеМультиРежима(ДокументЗаявление) Тогда
		
		ЗаписатьУзелXML(ЗаписьXML, "ЭтоМногопользовательскийРежим", XMLСтрока(Ложь));
		
	ИначеЕсли ДокументЗаявление.ЭтоМультиРежим Тогда
		
		ЗаписатьУзелXML(ЗаписьXML, "ЭтоМногопользовательскийРежим", XMLСтрока(Истина));
		
	КонецЕсли;

КонецФункции

Функция ЭтоОтключениеМультиРежима(ДокументЗаявление) Экспорт
	
	Возврат ЗначениеЗаполнено(ДокументЗаявление.УчетнаяЗапись) 
		И Мультирежим.ЭтоМультиРежим(ДокументЗаявление.УчетнаяЗапись)
		И НЕ ДокументЗаявление.ЭтоМультиРежим;

КонецФункции
	
Процедура ЗаписатьУзелXML(данныеXML, ИмяУзла, ЗначениеУзла, НеВыгружатьПустые = Ложь) Экспорт
	
	Если НеВыгружатьПустые И ПустаяСтрока(ЗначениеУзла) Тогда 
		
	Иначе
		данныеXML.ЗаписатьНачалоЭлемента(ИмяУзла);
		данныеXML.ЗаписатьТекст(Строка(ЗначениеУзла));
		данныеXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьАдресXML(данныеXML, ИмяУзла, ДокументЗаявление)
	
	Адрес = ДокументЗаявление[ИмяУзла];
	
	данныеXML.ЗаписатьНачалоЭлемента(ИмяУзла);  
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес);

	Если ЭтоАдресПоФИАСу Тогда
		
		АдресДляЗаявления = АдресФИАСДляТелаЗаявления(ДокументЗаявление, ИмяУзла);
		
		данныеXML.ЗаписатьБезОбработки(АдресДляЗаявления);
	
	Иначе

		АдресВСтруктуре = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес);
		
		Если СтрДлина(АдресВСтруктуре.Индекс) = 6 Тогда 
			данныеXML.ЗаписатьАтрибут("Индекс",АдресВСтруктуре.Индекс);
		КонецЕсли;
				
		Если СтрДлина(АдресВСтруктуре.Регион) = 2 Тогда 
			данныеXML.ЗаписатьАтрибут("КодРегион",АдресВСтруктуре.Регион);
		КонецЕсли;
		
		Если СтрДлина(АдресВСтруктуре.Район) > 0  И  СтрДлина(АдресВСтруктуре.Район) < 51 Тогда 
			данныеXML.ЗаписатьАтрибут("Район",АдресВСтруктуре.Район);
		КонецЕсли;
		
		Если СтрДлина(АдресВСтруктуре.Город) > 0  И  СтрДлина(АдресВСтруктуре.Город) < 51 Тогда
			данныеXML.ЗаписатьАтрибут("Город",АдресВСтруктуре.Город);
		КонецЕсли;
		
		Если СтрДлина(АдресВСтруктуре.НаселенныйПункт) > 0  И  СтрДлина(АдресВСтруктуре.НаселенныйПункт) < 51 Тогда 
			данныеXML.ЗаписатьАтрибут("НаселПункт",АдресВСтруктуре.НаселенныйПункт);
		КонецЕсли;
		
		Если СтрДлина(АдресВСтруктуре.Улица) > 0  И  СтрДлина(АдресВСтруктуре.Район) < 51  Тогда 
			данныеXML.ЗаписатьАтрибут("Улица",АдресВСтруктуре.Улица);
		КонецЕсли;
		
		Если СтрДлина(АдресВСтруктуре.Дом) > 0  И  СтрДлина(АдресВСтруктуре.Дом) < 9  Тогда 
			данныеXML.ЗаписатьАтрибут("Дом",АдресВСтруктуре.Дом);
		КонецЕсли;
		
		Если СтрДлина(АдресВСтруктуре.Корпус) > 0  И  СтрДлина(АдресВСтруктуре.Корпус) < 9  Тогда 
			данныеXML.ЗаписатьАтрибут("Корпус",АдресВСтруктуре.Корпус);
		КонецЕсли;
		
		Если СтрДлина(АдресВСтруктуре.Квартира) > 0  И  СтрДлина(АдресВСтруктуре.Квартира) < 9  Тогда 
			данныеXML.ЗаписатьАтрибут("Кварт",АдресВСтруктуре.Квартира);
		КонецЕсли;
		
	КонецЕсли;
	
	данныеXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ЭтотПараметрИзменился(ТабличнаяЧасть, НазваниеРеквизита) Экспорт
	
	СтруктураПоиска = Новый Структура("ИзмененныйРеквизит", НазваниеРеквизита);
	Возврат ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска).Количество() > 0 ;
	
КонецФункции

Функция ИзменилсяСоставКонтролирующихОрганов(СписокИзмененныхРеквизитов) Экспорт

	СдаватьВФНСИзменился 		= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС);
	КодыФНСИзменились 			= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС);
	СдаватьВПФРИзменился 		= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР);
	КодПФРИзменился 			= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР); 
	СдаватьВФССИзменился 		= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС);
	СдаватьВРосстатИзменился 	= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат);
	КодРосстатаИзменился		= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата); 
	СдаватьВФСРАРИзменился 		= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР);
	СдаватьВРПНИзменился 		= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН);
	СдаватьВФТСИзменился 		= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС);
	СдаватьВЦБИзменился 		= ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВЦБ)
									И ДокументооборотСКОКлиентСервер.ПодсистемаЦБСуществует();
	
	Возврат СдаватьВФНСИзменился ИЛИ КодыФНСИзменились ИЛИ СдаватьВПФРИзменился ИЛИ КодПФРИзменился
		ИЛИ СдаватьВФССИзменился ИЛИ СдаватьВРосстатИзменился ИЛИ КодРосстатаИзменился ИЛИ СдаватьВФСРАРИзменился
		ИЛИ СдаватьВРПНИзменился ИЛИ СдаватьВФТСИзменился ИЛИ СдаватьВЦБИзменился;
	
КонецФункции
	
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

Процедура ЗаписьДанныеУчетнойЗаписиОблачнойПодписи(ДокументЗаявление, ЗаписьXML, ЭтоПервичноеЗаявление, ТребуетсяПереизданиеСертификата)
	
	ТелефонПользователя 			= "";
	ПочтаПользователя	 			= "";
	УчетнаяЗаписьОблачнойПодписи 	= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "УчетнаяЗапись");
	ЛогинУчетнойЗаписи 				= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "Логин");
	ВнутреннийИдентификатор			= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "ИдентификаторСервера");

	СоздатьНовуюУчетнуюЗапись		= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "СоздатьНовуюУчетнуюЗапись");

	Если ЭтоПервичноеЗаявление И СоздатьНовуюУчетнуюЗапись Тогда
		ТелефонПользователя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ДокументЗаявление.ТелефонМобильный);
		ПочтаПользователя = ДокументЗаявление.ЭлектроннаяПочта;
	ИначеЕсли НЕ ЭтоПервичноеЗаявление Тогда
		ТелефонПользователя	= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "Телефон");
		ПочтаПользователя = ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "ЭлектроннаяПочта");
	КонецЕсли;	
	
	ОтправитьКодКлюча				= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "ПовторнаяОтправкаКодаАвторизации");
	ОтправитьКлючМобПриложения		= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "ПовторнаяОтправкаКлючаМобильногоПриложения");
	СменитьКлючМобПриложения		= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "СменитьКлючМобильногоПриложения")
										ИЛИ ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "СменитьКлючМобильногоПриложенияАвтоматически");
	СменитьПароль					= ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "СменитьПароль");
	СменитьКонтакты					= ЗначениеЗаполнено(ТелефонПользователя) ИЛИ ЗначениеЗаполнено(ПочтаПользователя);
 	ИздатьНовыйСертификат			= ТребуетсяПереизданиеСертификата ИЛИ ЭтоПервичноеЗаявление;	
	
	// общий блок
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПараметрыГенерацииСертификатаВDSS");
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УдостоверяющийЦентр = КонтекстЭДОСервер.ДанныеУЦ(ДокументЗаявление).НаименованиеУЦ;
	ЗаписьXML.ЗаписатьАтрибут("УдостоверяющийЦентр", УдостоверяющийЦентр);
		
	// блок операции
	СписокОпераций = Новый Массив;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОперацииУчетнойЗаписиDSS");
	Если СоздатьНовуюУчетнуюЗапись Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ОперацияУчетнойЗаписиDSS", "Создать");
	Иначе
		ЗаписатьУзелXML(ЗаписьXML, "ОперацияУчетнойЗаписиDSS", "Использовать");
	КонецЕсли;
	
	Если СменитьПароль Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ОперацияУчетнойЗаписиDSS", "СменитьПароль");
	КонецЕсли;
	
	Если СменитьКлючМобПриложения Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ОперацияУчетнойЗаписиDSS", "СменитьКлючmyDSS");
	КонецЕсли;
	
	Если ОтправитьКодКлюча Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ОперацияУчетнойЗаписиDSS", "ОтправитьКодАктивации");
	КонецЕсли;
	
	Если ОтправитьКлючМобПриложения Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ОперацияУчетнойЗаписиDSS", "ОтправитьКлючmyDSS");
	КонецЕсли;
	
	Если СменитьКонтакты Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ОперацияУчетнойЗаписиDSS", "СменитьКонтакты");
	КонецЕсли;
	
	Если ИздатьНовыйСертификат Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ОперацияУчетнойЗаписиDSS", "СменитьСертификат");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// блок информации об учетной записи
	Если СоздатьНовуюУчетнуюЗапись Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("НоваяУчетнаяЗаписьDSS");
		ЗаписатьУзелXML(ЗаписьXML, "ИдентификаторСервиса", ВнутреннийИдентификатор);
		ЗаписатьУзелXML(ЗаписьXML, "ИмяПользователя", ЛогинУчетнойЗаписи);
		
	ИначеЕсли ЗначениеЗаполнено(УчетнаяЗаписьОблачнойПодписи) Тогда
		МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
		ВсеСервера = МодульСервисКриптографииDSS.ПолучитьВсеСерверы(Новый Структура("Ссылка", УчетнаяЗаписьОблачнойПодписи.Владелец));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("УчетнаяЗаписьDSS");
		Если ВсеСервера.Количество() = 1 Тогда
			ЗаписатьУзелXML(ЗаписьXML, "ИдентификаторСервиса", ВсеСервера[0].ВнутреннийИдентификатор);
		КонецЕсли;	
		ЗаписатьУзелXML(ЗаписьXML, "ИмяПользователя", УчетнаяЗаписьОблачнойПодписи.Логин);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТелефонПользователя) Тогда
		ЗаписатьУзелXML(ЗаписьXML, "МобильныйТелефон", ТелефонПользователя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПочтаПользователя) Тогда
		ЗаписатьУзелXML(ЗаписьXML, "ЭлектроннаяПочта", ПочтаПользователя);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ЭтоОблачнаяПодпись(МестоХраненияКлюча) Экспорт
	
	Возврат КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(МестоХраненияКлюча);
	
КонецФункции

Функция ИнициализироватьСпособыДоставкиПаролей(Идентификатор) Экспорт
	
	Попытка
		Возврат СервисКриптографии.ПолучитьНастройкиПолученияВременныхПаролей(Идентификатор);
	Исключение
		Возврат Новый Структура("Телефон, ЭлектроннаяПочта", "", "");
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьИспользованиеДолговременногоТокена(Форма) Экспорт
	
	НовоеЗначение = Форма.СпособПодтвержденияКриптоопераций;
	
	Если Форма.ЭтоУчетнаяЗаписьВМоделиСервиса И Форма.ПереиздатьСертификат <> 1 И Не Форма.ЭтоПереходВКоробку Тогда
		
		Сертификат = Мультирежим.СертификатПользователя(Форма.УчетнаяЗапись);
		Если Сертификат.Найден Тогда
			СвойствоСертификата	= ЭлектроннаяПодписьВМоделиСервиса.СвойстваРасшифрованияПодписанияСертификата(Сертификат);
			НовоеЗначение = СвойствоСертификата.СпособПодтвержденияКриптоопераций;
		КонецЕсли;
		
	ИначеЕсли Форма.ЭтоПереходВОблако Тогда
		НовоеЗначение = Перечисления.СпособыПодтвержденияКриптоопераций.СессионныйТокен;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовоеЗначение) Тогда
		НовоеЗначение = Перечисления.СпособыПодтвержденияКриптоопераций.СессионныйТокен;
	КонецЕсли;
	
	Форма.СпособПодтвержденияКриптоопераций 	= НовоеЗначение;
	Форма.ПроверенДоступДляТокена				= Ложь;
	
КонецПроцедуры

Процедура СохранитьФлаг(НовыйДокументЗаявление, ИмяФлага) Экспорт
	
	НоваяСтрока = НовыйДокументЗаявление.ФлагиЗаявленияНаИзменение.Добавить();
	НоваяСтрока.Флаг = Перечисления.ФлагиЗаявленияНаИзменение[ИмяФлага];
	
КонецПроцедуры

Процедура СохранитьИзмененныйРеквизит(НовыйДокументЗаявление, ИмяРеквизита) Экспорт
	
	НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
	НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности[ИмяРеквизита];
	
КонецПроцедуры

Функция СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ДанныеЗаполнения(Организация) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	СтруктураРеквизитов = Новый Структура("Организация, ПриОткрытии", Организация, Истина);
	СтруктураРеквизитов.Вставить("АдресЮридический",);
	СтруктураРеквизитов.Вставить("АдресФактический",);
	КонтекстЭДОСервер.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеЗаполнения = КонтекстЭДОСервер.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСведенияОрганизации(
		НовыйДокументЗаявление,
		ДопРеквизиты,
		ДанныеЗаполнения,
		ДанныеОрганизации,
		Организация,
		УчетнаяЗапись)
		
	НомерОсновнойПоставки1с 	= ДопРеквизиты.НомерОсновнойПоставки1с;
	КраткоеНаименование 		= ДопРеквизиты.КраткоеНаименование;
	ПолноеНаименование 			= ДопРеквизиты.ПолноеНаименование;
	ИНН 						= ДопРеквизиты.ИНН;
	КПП 						= ДопРеквизиты.КПП;
	ОГРН 						= ДопРеквизиты.ОГРН;
	РегНомерПФР 				= ДопРеквизиты.РегНомерПФР;
	ЭлектроннаяПочта 			= ДопРеквизиты.ЭлектроннаяПочта;
	
	ЭтоЮридическоеЛицо  = ДанныеОрганизации.ТипОрганизации;
	Если ЭтоЮридическоеЛицо Тогда
		ПризнакОбособленногоПодразделения = ДанныеОрганизации.ПризнакОбособленногоПодразделения;
	КонецЕсли;
	
	НовыйДокументЗаявление.Организация							= Организация;
	НовыйДокументЗаявление.УчетнаяЗапись 						= УчетнаяЗапись;
	НовыйДокументЗаявление.ТипОрганизации						= ЭтоЮридическоеЛицо;
	НовыйДокументЗаявление.ИНН									= ИНН;
	НовыйДокументЗаявление.КПП									= КПП;
	НовыйДокументЗаявление.ПолноеНаименование					= ПолноеНаименование;
	НовыйДокументЗаявление.КраткоеНаименование					= КраткоеНаименование;
	НовыйДокументЗаявление.ПризнакОбособленногоПодразделения	= ПризнакОбособленногоПодразделения;
	НовыйДокументЗаявление.НомерОсновнойПоставки1с				= НомерОсновнойПоставки1с;
	НовыйДокументЗаявление.ОГРН									= ОГРН;
	НовыйДокументЗаявление.АдресЮридический 					= ДанныеЗаполнения.АдресЮридическийЗначение;
	НовыйДокументЗаявление.РегНомерПФР							= РегНомерПФР;
	НовыйДокументЗаявление.ЭлектроннаяПочта						= ЭлектроннаяПочта;
	НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса		= ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса(УчетнаяЗапись);
	НовыйДокументЗаявление.СпецоператорСвязи 					= УчетнаяЗапись.СпецоператорСвязи;
		
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(УчетнаяЗапись);
	НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса		= КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(МестоХраненияКлюча);
	НовыйДокументЗаявление.МодельХраненияЗакрытогоКлюча			= КриптографияЭДКОКлиентСервер.МодельХраненияЗакрытогоКлюча(МестоХраненияКлюча);
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьПараметрПодключения(НовыйДокументЗаявление, "УчетнаяЗапись", КриптографияЭДКОКлиентСервер.ПолучитьУчетнуюЗаписьПодписи(МестоХраненияКлюча));
	
КонецПроцедуры

Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСлужебныеСведения(
		НовыйДокументЗаявление)
		
	НовыйДокументЗаявление.УстановитьНовыйНомер();
	
	НовыйДокументЗаявление.Дата								= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Ответственный					= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи		= '00010101';
	НовыйДокументЗаявление.ТипКриптопровайдера				= Перечисления.ТипыКриптоПровайдеров.ПустаяСсылка();
	НовыйДокументЗаявление.ТипЗаявления						= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение;
	НовыйДокументЗаявление.ИдентификаторДокументооборота	= нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	НовыйДокументЗаявление.Статус							= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
	НовыйДокументЗаявление.СпособПолученияСертификата		= Перечисления.СпособПолученияСертификата.ИздатьНовый;

КонецПроцедуры
	
Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьТелефоны(
		НовыйДокументЗаявление,
		ДопРеквизиты)
		
	ТелефонМобильный		= ДопРеквизиты.ТелефонМобильный;
	ТелефонОсновной 		= ДопРеквизиты.ТелефонОсновной;
	ТелефонДополнительный 	= ДопРеквизиты.ТелефонДополнительный;
	
	НовыйДокументЗаявление.ТелефонОсновной			= ТелефонОсновной;
	НовыйДокументЗаявление.ТелефонДополнительный	= ТелефонДополнительный;
	НовыйДокументЗаявление.ПолучатьСМСУведомления 	= ДопРеквизиты.ПолучатьСМСУведомления;
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный) = "" Тогда
		НовыйДокументЗаявление.ТелефонМобильный = "";
	Иначе
		// Приведение номера телефона 89851234567 к маске +7 (999) 999-99-99
		КодВСкобках =  Сред(ТелефонМобильный, 2, 3);
		ПервыйБлокЧисел = Сред(ТелефонМобильный, 5, 3);
		ВторойБлокЧисел = Сред(ТелефонМобильный, 8, 2);
		ТретийБлокЧисел = Сред(ТелефонМобильный, 10, 2);
		НовыйДокументЗаявление.ТелефонМобильный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"+7 (%1) %2-%3-%4", КодВСкобках, ПервыйБлокЧисел, ВторойБлокЧисел, ТретийБлокЧисел);
	КонецЕсли;
		
КонецПроцедуры
		
Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьНаправленияСдачиОтчетности(
		НовыйДокументЗаявление,
		ДопРеквизиты)
		
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
	УчетнаяЗапись 		= НовыйДокументЗаявление.УчетнаяЗапись;
	КодРегионаФСРАР 	= ДопРеквизиты.КодРегионаФСРАР;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Получатели = Запрос.Выполнить().Выгрузить();
	
	// Копируем структуру таблицы
	ТаблицаКодовФНС = Получатели.Скопировать();
	ТаблицаКодовФНС.Очистить();
	
	ТаблицаКодовФСГС = Получатели.Скопировать();
	ТаблицаКодовФСГС.Очистить();
	
	СдаватьВФНС 	= Ложь;
	СдаватьВПФР 	= Ложь;
	КодПФР 			= "";
	СдаватьВРосстат = Ложь;
	КодРосстата 	= "";
	СдаватьВФСС 	= Ложь;
	СдаватьВФСРАР 	= Ложь;
	СдаватьВРПН 	= Ложь;
	СдаватьВФТС 	= Ложь;
	СдаватьВЦБ 		= Ложь;
	
	Для каждого СтрокаНаправлений Из Получатели Цикл
		Если СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			СдаватьВПФР = Истина;
			КодПФР 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаНаправлений.КодПолучателя);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			СдаватьВФСС = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			СдаватьВФНС = Истина;
			НоваяСтрока = ТаблицаКодовФНС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			СдаватьВРосстат = Истина;
			НоваяСтрока = ТаблицаКодовФСГС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			СдаватьВФСРАР = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			СдаватьВРПН = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
			СдаватьВФТС = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ЦБ Тогда
			СдаватьВЦБ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	НовыйДокументЗаявление.Получатели.Очистить();
	
	// ФНС
	Если СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из ТаблицаКодовФНС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС;
			НоваяСтрокаНаправления.КодПолучателя = СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП = СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
	// ПФР
	Если СдаватьВПФР ИЛИ СдаватьВФСС Тогда
		
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		НоваяСтрокаНаправления.КодПолучателя = КодПФР;
		НоваяСтрокаНаправления.КПП = "";

		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС;
		НоваяСтрокаНаправления.КПП = "";
		
	КонецЕсли;
	
	// Росстат
	Если СдаватьВРосстат Тогда
		Для Каждого СтрокаНаправлений Из ТаблицаКодовФСГС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
			НоваяСтрокаНаправления.КодПолучателя = СтрокаНаправлений.КодПолучателя;
		КонецЦикла;
	КонецЕсли;
	
	// ЦБ
	Если СдаватьВЦБ Тогда
		ОбработкаЗаявленийАбонента.ДобавитьЦБВДокумент(НовыйДокументЗаявление);
	КонецЕсли;
	
	// ФСРАР
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР 	= СдаватьВФСРАР;
	НовыйДокументЗаявление.КодРегионаФСРАР 						= КодРегионаФСРАР;
	
	// РПН
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН = СдаватьВРПН;
	
	// ФТС
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС = СдаватьВФТС;
	
КонецПроцедуры

Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ТаблицаПользователей(НовыйДокументЗаявление)
		
	УчетнаяЗапись = НовыйДокументЗаявление.УчетнаяЗапись;
	
	Таблица = Мультирежим.ПраваПользователейУчетнойЗаписи(УчетнаяЗапись);
	Для каждого Строка Из Таблица Цикл
		
		НоваяСтрока = НовыйДокументЗаявление.ПользователиУчетнойЗаписи.Добавить();
		
		Если НовыйДокументЗаявление.ЭтоМультиРежим Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Мультирежим.ЗаполнитьИсходныеЗначенияТаблицыПользователей(Новый Структура, Строка);
		Иначе
			НоваяСтрока.Пользователь = Строка.Пользователь;
		КонецЕсли;
		
		НоваяСтрока.Пометка = Истина;
		
	КонецЦикла;
	
	Если НовыйДокументЗаявление.ЭтоМультиРежим Тогда
		НовыйДокументЗаявление.ВладелецЭЦПЭтоАдмин = МультирежимКлиентСервер.ВладелецЭЦПЭтоАдмин(НовыйДокументЗаявление.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаявлениеНаИзменениеВСкрытомРежиме_ОпределитьСведенияВладельцаЭП(
		НовыйДокументЗаявление, 
		ДанныеОрганизации,
		ДопРеквизиты)
	
	Организация = НовыйДокументЗаявление.Организация;
	
	ВладелецЭЦПФамилия 			= ДопРеквизиты.ВладелецЭЦПФамилия;
	ВладелецЭЦПИмя 				= ДопРеквизиты.ВладелецЭЦПИмя;
	ВладелецЭЦПОтчество			= ДопРеквизиты.ВладелецЭЦПОтчество;
	ВладелецЭЦППодразделение 	= ДопРеквизиты.ВладелецЭЦППодразделение;
	ВладелецЭЦПСНИЛС 			= ДопРеквизиты.ВладелецЭЦПСНИЛС;
	ВладелецЭЦПДолжность 		= ДопРеквизиты.ВладелецЭЦПДолжность;
	
	ИсходныйВладелец  = ИсходныйВладелецСертификатаПоФИОиСНИЛС(
		Организация, 
		ДанныеОрганизации, 
		ВладелецЭЦПФамилия, 
		ВладелецЭЦПИмя, 
		ВладелецЭЦПОтчество, 
		ВладелецЭЦПСНИЛС);
		
	ВидВладельцаЭЦП = ИсходныйВладелец.ВладелецЭЦПТипИсходный;
	ВладелецЭЦП     = ИсходныйВладелец.ВладелецЭЦПИсходный;
	
	ДанныеОрганизации.Вставить("Организация", Организация);
	
	ВладелецЭЦПВидДокумента        	= Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	ВладелецЭЦПСерияДокумента      	= "";
	ВладелецЭЦПНомерДокумента      	= "";
	ВладелецЭЦПДатаВыдачиДокумента 	= "";
	ВладелецЭЦПКемВыданДокумент    	= "";
	ВладелецЭЦПДатаРождения			= Неопределено;
	ВладелецЭЦПМестоРождения		= Неопределено;
	ВладелецЭЦППол					= Неопределено;
	ВладелецЭЦПГражданство			= Неопределено;
	ВладелецЭЦПКодПодразделения		= Неопределено;
	ВладелецЭЦПИНН					= "";
	
	Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда

		ДанныеСотрудника = ОбработкаЗаявленийАбонента.ПолучитьДанныеСотрудника(
			ВидВладельцаЭЦП, 
			ДанныеОрганизации, 
			ВладелецЭЦП);
		
		ВладелецЭЦПВидДокумента			= ДанныеСотрудника.ВидДокумента;
		ВладелецЭЦПСерияДокумента		= ДанныеСотрудника.Серия;
		ВладелецЭЦПНомерДокумента		= ДанныеСотрудника.Номер;
		ВладелецЭЦПДатаВыдачиДокумента	= ДанныеСотрудника.ДатаВыдачи;
		ВладелецЭЦПКемВыданДокумент		= ДанныеСотрудника.КемВыдан;
		ВладелецЭЦПДатаРождения			= ДанныеСотрудника.ДатаРождения;
		ВладелецЭЦПМестоРождения		= ДанныеСотрудника.МестоРождения;
		ВладелецЭЦППол					= ДанныеСотрудника.Пол;
		ВладелецЭЦПГражданство			= ДанныеСотрудника.Гражданство;
		ВладелецЭЦПКодПодразделения		= ДанныеСотрудника.КодПодразделения;
		ВладелецЭЦПИНН       			= ДанныеСотрудника.ИНН;
		
	КонецЕсли;
	
	НовыйДокументЗаявление.ВладелецЭЦПТип					= ВидВладельцаЭЦП;
	НовыйДокументЗаявление.ВладелецЭЦП						= ВладелецЭЦП;
	
	НовыйДокументЗаявление.ВладелецЭЦПФамилия				= СокрЛП(ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя					= СокрЛП(ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество				= СокрЛП(ВладелецЭЦПОтчество);
	НовыйДокументЗаявление.ВладелецЭЦПДолжность				= ВладелецЭЦПДолжность;
	НовыйДокументЗаявление.ВладелецЭЦППодразделение			= ВладелецЭЦППодразделение;
	
	НовыйДокументЗаявление.ВладелецЭЦПВидДокумента			= ВладелецЭЦПВидДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПНомерДокумента		= ВладелецЭЦПНомерДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПСерияДокумента		= ВладелецЭЦПСерияДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента	= ВладелецЭЦПДатаВыдачиДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПКемВыданДокумент		= ВладелецЭЦПКемВыданДокумент;
	НовыйДокументЗаявление.ВладелецЭЦПДатаРождения        	= ВладелецЭЦПДатаРождения;
	НовыйДокументЗаявление.ВладелецЭЦПМестоРождения       	= ВладелецЭЦПМестоРождения;
	НовыйДокументЗаявление.ВладелецЭЦППол                 	= ВладелецЭЦППол;
	НовыйДокументЗаявление.ВладелецЭЦПГражданство         	= ВладелецЭЦПГражданство;
	НовыйДокументЗаявление.ВладелецЭЦПКодПодразделения    	= ВладелецЭЦПКодПодразделения;
	НовыйДокументЗаявление.ВладелецЭЦПСНИЛС                 = ВладелецЭЦПСНИЛС;
	НовыйДокументЗаявление.ВладелецЭЦПИНН                   = ВладелецЭЦПИНН;
	
КонецПроцедуры

Процедура СкорректироватьНаправленияСдачиОтчетностиСУчетомПредыдущихЗаявлений(
		НовыйДокументЗаявление,
		ТипКонтролирующегоОргана,
		КоличествоДней = 31) Экспорт
	
	Организация = НовыйДокументЗаявление.Организация;
	
	ДатаАвтоматическогоОтказа = ТекущаяДатаСеанса() - КоличествоДней * 24 * 60 * 60;
	ДатаАвтоматическогоОтказа = НачалоДня(ДатаАвтоматическогоОтказа);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка,
		|	ЗаявлениеАбонентаСпецоператораСвязи.Статус КАК Статус,
		|	ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена КАК НастройкаЗавершена,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления КАК ТипЗаявления,
		|	ЗаявлениеАбонентаСпецоператораСвязи.РегНомерПФР КАК РегНомерПФР,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ПодатьЗаявкуНаСертификатДляФСРАР КАК ПодатьЗаявкуНаСертификатДляФСРАР,
		|	ЗаявлениеАбонентаСпецоператораСвязи.КодРегионаФСРАР КАК КодРегионаФСРАР,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ПодатьЗаявкуНаПодключениеРПН КАК ПодатьЗаявкуНаПодключениеРПН,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ПодатьЗаявкуНаПодключениеФТС КАК ПодатьЗаявкуНаПодключениеФТС,
		|	ЗаявлениеАбонентаСпецоператораСвязи.ИзменившиесяРеквизитыВторичногоЗаявления КАК ИзменившиесяРеквизитыВторичногоЗаявления,
		|	ЗаявлениеАбонентаСпецоператораСвязи.Получатели КАК Получатели
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация
		|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено)
		|		ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено))
		|	И ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления >= &ДатаАвтоматическогоОтказа
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления = ЗНАЧЕНИЕ(Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное)
		|		ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления = ЗНАЧЕНИЕ(Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение)
		|		И ЗаявлениеАбонентаСпецоператораСвязи.ИзменившиесяРеквизитыВторичногоЗаявления.ИзмененныйРеквизит В (ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВЦБ),
		|			ЗНАЧЕНИЕ(Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС)))
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления УБЫВ");
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("ДатаАвтоматическогоОтказа", 	ДатаАвтоматическогоОтказа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И (Выборка.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено
		ИЛИ НЕ Выборка.НастройкаЗавершена) Тогда
		
		// чтение направлений последнего заявления, если оно не было одобрено с завершением настройки
		
		СдачаВФНС 					= Ложь;
		КодыФНС 					= Новый Массив;
		СдачаВПФР 					= Ложь;
		ЕстьПолучательПФР 			= Ложь;
		КодПФР 						= "";
		ЗаданРегНомерПФР 			= Ложь;
		СдачаВФСГС 					= Ложь;
		КодыФСГС 					= Новый Массив;
		СдачаВФСС 					= Ложь;
		ЕстьПолучательФСС 			= Ложь;
		СдачаВФСРАР 				= Ложь;
		СдачаВРПН 					= Ложь;
		СдачаВФТС 					= Ложь;
		СдачаВЦБ 					= Ложь;
		
		Если Выборка.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное Тогда
			СдачаВФНС 				= Истина;
			СдачаВПФР 				= Истина;
			СдачаВФСГС 				= Истина;
			СдачаВФСС 				= Истина;
			СдачаВФСРАР 			= Истина;
			СдачаВРПН 				= Истина;
			СдачаВФТС 				= Истина;
			Если ДокументооборотСКОКлиентСервер.ПодсистемаЦБСуществует() Тогда
				СдачаВЦБ = Истина;
			КонецЕсли;
			
		Иначе
			ТаблицаИзменившихсяРеквизитов = Выборка.ИзменившиесяРеквизитыВторичногоЗаявления.Выгрузить();
			Для каждого СтрокаТаблицы Из ТаблицаИзменившихсяРеквизитов Цикл
				Если СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС Тогда
					СдачаВФНС = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР Тогда
					СдачаВПФР = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР Тогда
					ЗаданРегНомерПФР = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат Тогда
					СдачаВФСГС = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС Тогда
					СдачаВФСС = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР Тогда
					СдачаВФСРАР = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН Тогда
					СдачаВРПН = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС Тогда
					СдачаВФТС = Истина;
				ИначеЕсли СтрокаТаблицы.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВЦБ Тогда
					СдачаВЦБ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СдачаВФНС ИЛИ СдачаВПФР ИЛИ СдачаВФСГС ИЛИ СдачаВФСС Тогда
			ТаблицаПолучателей = Выборка.Получатели.Выгрузить();
			
			Для каждого СтрокаТаблицы Из ТаблицаПолучателей Цикл
				Если СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС И СдачаВФНС Тогда
					КодФНС = Новый Структура("КодПолучателя, КПП", СтрокаТаблицы.КодПолучателя, СтрокаТаблицы.КПП);
					КодыФНС.Добавить(КодФНС);
					
				ИначеЕсли СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР И СдачаВПФР Тогда
					ЕстьПолучательПФР = Истина;
					КодПФР = СтрокаТаблицы.КодПолучателя;
					Если НЕ ЗаданРегНомерПФР Тогда
						ЗаданРегНомерПФР = ЗначениеЗаполнено(Выборка.РегНомерПФР);
					КонецЕсли;
					
				ИначеЕсли СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС И СдачаВФСГС Тогда
					КодыФСГС.Добавить(СтрокаТаблицы.КодПолучателя);
					
				ИначеЕсли СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС И СдачаВФСС Тогда
					ЕстьПолучательФСС = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// задание направлений в новом заявлении
		
		Если СдачаВФНС И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС;
			
			УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, Перечисления.ТипыКонтролирующихОрганов.ФНС);
			
			Для каждого КодФНС Из КодыФНС Цикл
				НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
				НоваяСтрокаНаправления.ТипПолучателя 	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
				НоваяСтрокаНаправления.КодПолучателя 	= КодФНС.КодПолучателя;
				НоваяСтрокаНаправления.КПП 				= КодФНС.КПП;
			КонецЦикла;
		КонецЕсли;
		
		Если СдачаВПФР И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			Если ЗаданРегНомерПФР Тогда
				НовыйДокументЗаявление.РегНомерПФР = Выборка.РегНомерПФР;
			КонецЕсли;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР;
			
			УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, Перечисления.ТипыКонтролирующихОрганов.ПФР);
			
			Если ЕстьПолучательПФР Тогда
				НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
				НоваяСтрокаНаправления.ТипПолучателя 	= Перечисления.ТипыКонтролирующихОрганов.ПФР;
				НоваяСтрокаНаправления.КодПолучателя 	= КодПФР;
				НоваяСтрокаНаправления.КПП 			 	= "";
			КонецЕсли;
		КонецЕсли;
		
		Если СдачаВФСГС И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат;
			
			УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, Перечисления.ТипыКонтролирующихОрганов.ФСГС);
			
			Для каждого КодФСГС Из КодыФСГС Цикл
				НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
				НоваяСтрокаНаправления.ТипПолучателя 	= Перечисления.ТипыКонтролирующихОрганов.ФСГС;
				НоваяСтрокаНаправления.КодПолучателя 	= КодФСГС;
				НоваяСтрокаНаправления.КПП 			 	= "";
			КонецЦикла;
		КонецЕсли;
		
		Если СдачаВФСС И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС;
			
			УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, Перечисления.ТипыКонтролирующихОрганов.ФСС);
			
			Если ЕстьПолучательФСС Тогда
				НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
				НоваяСтрокаНаправления.ТипПолучателя 	= Перечисления.ТипыКонтролирующихОрганов.ФСС;
				НоваяСтрокаНаправления.КодПолучателя 	= "";
				НоваяСтрокаНаправления.КПП 			 	= "";
			КонецЕсли;
		КонецЕсли;
		
		Если СдачаВФСРАР И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР = Выборка.ПодатьЗаявкуНаСертификатДляФСРАР;
			
			НовыйДокументЗаявление.КодРегионаФСРАР = Выборка.КодРегионаФСРАР;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР;
		КонецЕсли;
		
		Если СдачаВРПН И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН = Выборка.ПодатьЗаявкуНаПодключениеРПН;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН;
		КонецЕсли;
		
		Если СдачаВФТС И ТипКонтролирующегоОргана <> Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
			НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС = Выборка.ПодатьЗаявкуНаПодключениеФТС;
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПолучателейКонтролирующегоОргана(НовыйДокументЗаявление, ТипКонтролирующегоОргана) Экспорт
	
	ИндексПолучателя = НовыйДокументЗаявление.Получатели.Количество() - 1;
	Пока ИндексПолучателя >= 0 Цикл
		СтрокаНаправления = НовыйДокументЗаявление.Получатели[ИндексПолучателя];
		Если СтрокаНаправления.ТипПолучателя = ТипКонтролирующегоОргана Тогда
			НовыйДокументЗаявление.Получатели.Удалить(ИндексПолучателя);
		КонецЕсли;
		ИндексПолучателя = ИндексПолучателя - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаявлениеСодержитМинимальноНеобходимыхПолучателей(НовыйДокументЗаявление) Экспорт
	
	Для каждого ПолучательЗаявления Из НовыйДокументЗаявление.Получатели Цикл
		Если ПолучательЗаявления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			Возврат Истина;
		ИначеЕсли ПолучательЗаявления.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьИзменившиесяРеквизитыЗаявленияНаПеренос(НовыйДокументЗаявление, ЭтоПереходВКоробку)
	
	// Записываем перечень изменившихся реквизитов
	НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Очистить();
	
	// При переходе переиздание сертификата добавляем всегда
	ОбработкаЗаявленийАбонента.СохранитьИзмененныйРеквизит(НовыйДокументЗаявление, "ПереизданиеСертификата");
	ОбработкаЗаявленийАбонента.СохранитьФлаг(НовыйДокументЗаявление, "ПереиздатьСертификат");
	
	// При переходе изменение криптопровайдера добавляем всегда
	ОбработкаЗаявленийАбонента.СохранитьИзмененныйРеквизит(НовыйДокументЗаявление, "ИзменениеКриптопровайдера");
		
	Если ЭтоПереходВКоробку Тогда
		
		ОбработкаЗаявленийАбонента.СохранитьИзмененныйРеквизит(НовыйДокументЗаявление, "ПереходВКоробку");
		
	Иначе
		
		ОбработкаЗаявленийАбонента.СохранитьИзмененныйРеквизит(НовыйДокументЗаявление, "ПереходВОблако");
		ОбработкаЗаявленийАбонента.СохранитьФлаг(НовыйДокументЗаявление, "ИзменитьМестоХранения");
		
		ОбработкаЗаявленийАбонента.СохранитьИзмененныйРеквизит(НовыйДокументЗаявление, "ТелефонМобильный");
		ОбработкаЗаявленийАбонента.СохранитьИзмененныйРеквизит(НовыйДокументЗаявление, "ТелефонМобильныйДляПаролей");
		ОбработкаЗаявленийАбонента.СохранитьИзмененныйРеквизит(НовыйДокументЗаявление, "ЭлектроннаяПочтаДляПаролей");
		ОбработкаЗаявленийАбонента.СохранитьФлаг(НовыйДокументЗаявление, "ИзменитьНастройкиУведомлений");
		
	КонецЕсли;
	
	Если НовыйДокументЗаявление.ЭтоМультиРежим Тогда
		НовыйДокументЗаявление.ТребуетсяВстречаСПартнером = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ИсходныйВладелецСертификатаПоФИОиСНИЛС(Организация, ТекущиеДанныеОрганизации = Неопределено, Фамилия, Имя, Отчество, СНИЛС) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если ТекущиеДанныеОрганизации = Неопределено Тогда
		
		СтруктураРеквизитов = Новый Структура("Организация, ПриОткрытии");
		СтруктураРеквизитов.Организация = Организация;
		СтруктураРеквизитов.ПриОткрытии = Ложь;
		
		КонтекстЭДОСервер.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
		ДанныеЗаполнения = КонтекстЭДОСервер.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
		ТекущиеДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
		
	КонецЕсли;
	
	ТипРуководитель	= Перечисления.ТипыВладельцевЭЦП.Руководитель;
	ТипГлБухгалтер	= Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер;
	
	Руководитель	  = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	СНИЛСРуководителя = СНИЛССотрудника(Руководитель, ТипРуководитель, ТекущиеДанныеОрганизации);
	ФИОРуководителя   = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Руководитель);
	
	ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	СНИЛСБухгалтера = СНИЛССотрудника(ГлБухгалтер, ТипГлБухгалтер, ТекущиеДанныеОрганизации);
	ФИОБухгалтера   = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(ГлБухгалтер);
	
	// Сравниваем с ФИО руководителя
	Если ФИОСовпадаетСФИОВладельца(ФИОРуководителя, Фамилия, Имя, Отчество)
		ИЛИ СНИЛСРуководителя = СНИЛС Тогда
		
		ВладелецЭЦПТипИсходный = ТипРуководитель;
		ВладелецЭЦПИсходный    = Руководитель;
		
	// Сравниваем с ФИО бухгалтера
	ИначеЕсли ФИОСовпадаетСФИОВладельца(ФИОБухгалтера, Фамилия, Имя, Отчество)
		ИЛИ СНИЛСБухгалтера = СНИЛС Тогда
		
		ВладелецЭЦПТипИсходный = ТипГлБухгалтер;
		ВладелецЭЦПИсходный    = ГлБухгалтер;
		
	Иначе
		
		// Если владелец ЭЦП не руководитель и не бухгалтер, то мы можем найти его только по ФИО 
		ВладелецЭЦПТипИсходный = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник;
		ВладелецЭЦПИсходный = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ФизЛицоПоФИО(
			Фамилия, 
			Имя, 
			Отчество, 
			СНИЛС, 
			Организация);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦПИсходный) Тогда
		ВладелецЭЦПТипИсходный = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник;
		ВладелецЭЦПИсходный = Мультирежим.ФизЛицоПоСНИЛС(СНИЛС);
	КонецЕсли;
		
	Результат = Новый Структура();
	Результат.Вставить("ВладелецЭЦПТипИсходный", ВладелецЭЦПТипИсходный);
	Результат.Вставить("ВладелецЭЦПИсходный", ВладелецЭЦПИсходный);

	Возврат Результат;
		
КонецФункции

Функция СНИЛССотрудника(Сотрудник, ВидСотрудника, ТекущиеДанныеОрганизации) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат "";
	КонецЕсли;
	
	// пытаемся определить тип владельца ЭП исходя из ФИО
	СтруктураФИО = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Сотрудник);
	Данные       = ОбработкаЗаявленийАбонента.ПолучитьДанныеСотрудника(
		ВидСотрудника,
		ТекущиеДанныеОрганизации, 
		Сотрудник);
		
	Возврат Данные.СНИЛС;
	
КонецФункции

Функция ФИОСовпадаетСФИОВладельца(СтруктураФИО, Фамилия, Имя, Отчество) Экспорт
	
	Совпадает = 
		СокрЛП_Врег(СтруктураФИО.Имя) = СокрЛП_Врег(Фамилия) 
		И СокрЛП_Врег(СтруктураФИО.Отчество) = СокрЛП_Врег(Имя)
		И СокрЛП_Врег(СтруктураФИО.Фамилия) = СокрЛП_Врег(Отчество);
		
	Возврат Совпадает;
	
КонецФункции

Функция СокрЛП_Врег(Строка) Экспорт
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(Строка);

КонецФункции

Процедура ОчиститьРеквизитыБИПИз1СКонтрагента(Форма) Экспорт
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Имя = РеквизитФормы.Имя;
		
		ЭтоРеквизитБИП = СтрЗаканчиваетсяНа(Имя,"_БИП");
		
		Если ЭтоРеквизитБИП Тогда
			Форма[Имя] = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеРуководителяЮЛИз1СКонтрагента(Форма, РеквизитыКонтрагента) Экспорт
	
	Если Форма.ЭтоЮридическоеЛицо Тогда
		
		Если РеквизитыКонтрагента.Свойство("Руководители") Тогда
			
			// В БРО
			Руководители = РеквизитыКонтрагента.Руководители;
			
		ИначеЕсли РеквизитыКонтрагента.Свойство("ДанныеРуководителей") Тогда
			
			// В БП3
			Если РеквизитыКонтрагента.ДанныеРуководителей.СкрытыеДанные Тогда
				Возврат Неопределено;
			КонецЕсли;
			Руководители = РеквизитыКонтрагента.ДанныеРуководителей.Руководители;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
			
		Если Руководители.Количество() = 0 Тогда 
			Возврат Неопределено;
		Иначе
			Данные = РеквизитыКонтрагента.Руководители[0];
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Данные;
		
КонецФункции	

Процедура ЗаполнитьРуководителяИз1СКонтрагента(Форма, РеквизитыКонтрагента) Экспорт
	
	// ФИО владельца
	Если Форма.ЭтоЮридическоеЛицо Тогда
		
		Источник = ДанныеРуководителяЮЛИз1СКонтрагента(
			Форма, 
			РеквизитыКонтрагента);
	Иначе
		Источник = РеквизитыКонтрагента;
	КонецЕсли;
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.РуководительФамилия_БИП  = СокрЛП(Источник.Фамилия);
	Форма.РуководительИмя_БИП      = СокрЛП(Источник.Имя);
	Форма.РуководительОтчество_БИП = СокрЛП(Источник.Отчество);
	Форма.РуководительИНН_БИП      = СокрЛП(Источник.ИНН);	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЕГРЮЛДляСравнения(Форма) Экспорт
	
	ОчиститьРеквизитыБИПИз1СКонтрагента(Форма);
	
	Если Форма.ПризнакОбособленногоПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыКонтрагента = ОбработкаЗаявленийАбонентаПовтИсп.РеквизитыКонтрагента(Форма.ИНН);
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРуководителяИз1СКонтрагента(Форма, РеквизитыКонтрагента);
	
	Форма.КраткоеНаименование_БИП = СокрЛП(РеквизитыКонтрагента.НаименованиеСокращенное);
	
	Форма.ОГРН_БИП = СокрЛП(РеквизитыКонтрагента.РегистрационныйНомер);
	
	// Юр адрес
	Если Форма.ЭтоЮридическоеЛицо И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
		
		// В ЕГРЮЛ не содержатся сведения об адресе ИП, так как это персональная информация.
		Адрес = ПривестиАдресКФИАСу(РеквизитыКонтрагента.ЮридическийАдрес);
		Форма.КодРегиона_БИП = КодРегионаПоАдресу(Адрес.КонтактнаяИнформация);
		
	КонецЕсли;
	
	// Код ФНС
	Если РеквизитыКонтрагента.РегистрацияВНалоговомОргане <> Неопределено Тогда
		
		Форма.ИФНС_БИП = СокрЛП(РеквизитыКонтрагента.РегистрацияВНалоговомОргане.Код);
		
	КонецЕсли;
	
	Если РеквизитыКонтрагента.РегистрацияВПенсионномФонде <> Неопределено Тогда
		Форма.КодПФР_БИП = СокрЛП(РеквизитыКонтрагента.РегистрацияВПенсионномФонде.КодОрганаПФР);
		Форма.РегНомерПФР_БИП = СокрЛП(РеквизитыКонтрагента.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР);
	КонецЕсли;
	
	Форма.ЕстьДанные_БИП = Истина;
	
КонецПроцедуры

Функция ПривестиАдресКФИАСу(ЮридическийАдрес) Экспорт
	
	АдресЗначение = ЮридическийАдрес.КонтактнаяИнформация;
	АдресПредставление = ЮридическийАдрес.Представление;

	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЗначение);
	
	Если НЕ ЭтоАдресПоФИАСу Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		АдресЗначение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(АдресПредставление, ВидАдреса);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("КонтактнаяИнформация", АдресЗначение);
	Результат.Вставить("Представление", АдресПредставление);
	
	Возврат Результат;

КонецФункции

Функция КодРегионаПоАдресу(Адрес) Экспорт

	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес);
	Если ЭтоАдресПоФИАСу Тогда
		НазваниеРегиона = РаботаСАдресами.РегионАдресаКонтактнойИнформации(Адрес);
		Возврат РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(НазваниеРегиона); 
	Иначе
		Возврат РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес).Регион; 
	КонецЕсли;
	
КонецФункции

Функция НаименованиеПустое(Форма) Экспорт
	
	ОрганизацияИмеетПустоеНаименование = Форма.КраткоеНаименование = "";
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПроверитьОрганизациюНаПустоеНаименование(
		Форма.Организация, 
		ОрганизацияИмеетПустоеНаименование);
		
	Возврат ОрганизацияИмеетПустоеНаименование ИЛИ Форма.КраткоеНаименование = "";
		
КонецФункции

Процедура ИсправитьОшибкиЕГРЮЛ(Форма) Экспорт
	
	Для каждого Строка Из Форма.ТаблицаСравненияПоЕГРЮЛ Цикл
		
		Если НЕ Строка.Различается Тогда
			Продолжить;
		КонецЕсли;
		
		ИсправитьОшибкиЕГРЮЛвОгранизации(Форма, Строка);
		ИсправитьОшибкиЕГРЮЛвГосОрганах(Форма, Строка);
		
	КонецЦикла;

	Форма.УправлениеФормой();
	
КонецПроцедуры

Процедура ИсправитьОшибкиЕГРЮЛвОгранизации(Форма, Строка)
	
	Если Строка.Реквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование Тогда
		
		Форма.КраткоеНаименование = ОбработкаЗаявленийАбонентаКлиентСервер.НормализоватьКраткоеНаименование(Форма.КраткоеНаименование_БИП);
		
		Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма) Тогда
			Форма.СравнитьРеквизитыОрганизацииСИсходными();
			Форма.ПроверитьНеобходимостьУстановкиГалки_ИзменитьРеквизитыОрганизации();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.Реквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.ОГРН Тогда
		
		Форма.ОГРН = СокрЛП(Форма.ОГРН_БИП);
		
		Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма) Тогда
			Форма.СравнитьРеквизитыОрганизацииСИсходными();
			Форма.ПроверитьНеобходимостьУстановкиГалки_ИзменитьРеквизитыОрганизации();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьОшибкиЕГРЮЛвГосОрганах(Форма, Строка)
	
	Если Строка.Реквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР Тогда
		
		Форма.РегНомерПФР = СокрЛП(Форма.РегНомерПФР_БИП);
		
		Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма) Тогда
			Форма.СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
			Форма.ПроверитьНеобходимостьУстановкиГалки_ИзменитьСоставКонтролирующихОрганов();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.Реквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР Тогда
		
		Форма.КодПФР = СокрЛП(Форма.КодПФР_БИП);
		
		Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма) Тогда
			Форма.СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
			Форма.ПроверитьНеобходимостьУстановкиГалки_ИзменитьСоставКонтролирующихОрганов();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.Реквизит = Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС Тогда
		
		НоваяСтрока = Форма.ПолучателиФНС.Добавить();
		НоваяСтрока.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС;
		НоваяСтрока.КодПолучателя = Форма.ИФНС_БИП;
		
		Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма) Тогда
			Форма.СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
			Форма.ПроверитьНеобходимостьУстановкиГалки_ИзменитьСоставКонтролирующихОрганов();
		КонецЕсли;
		
	КонецЕсли;
		
	
КонецПроцедуры

#КонецОбласти