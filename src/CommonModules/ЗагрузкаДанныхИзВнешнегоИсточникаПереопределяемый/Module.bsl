
#Область ПрограммныйИнтерфейс

Функция МаксимумПолезныхКолонокТабличногоДокумента() ЭКспорт
	
	// Самый большой справочник по количеству реквизитов: Контрагенты (43 полезных) + 10 на КИ + Дополнительные реквизиты.
	// Остальное регулируем в ЗагрузкаДанныхИзВнешнегоИсточника.ОптимизироватьТабличныйДокумент()
	
	Возврат 43 + 10 + МаксимумДополнительныхРеквизитовТабличногоДокумента();
	
КонецФункции

Функция МаксимумДополнительныхРеквизитовТабличногоДокумента() ЭКспорт
	
	Возврат 10;
	
КонецФункции

Функция МаксимумЗаписейВОднойТранзакции() Экспорт
	
	Возврат 137;
	
КонецФункции

Функция СтандартныеПодсистемыСервер_ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Строка) Экспорт
	
	НедопустимыеСимволы = "<>:;!@#$%^&-~`'.,?{}[]+=*/|\ ()_""«»";
	Результат = "";
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Символ =  Сред(Строка, Индекс, 1);
		Если СтрНайти(НедопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + "_" + КодСимвола(Символ) + "_";
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ДобавитьУсловноеОформлениеДополнительныхРеквизитов(ЭтотОбъект, ПутьРеквизита, НастройкиЗагрузкиДанных)
	
	
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеТаблицыСопоставлений(ЭтотОбъект, ПутьРеквизита, НастройкиЗагрузкиДанных) Экспорт
	
	ТекстНовыйЭлемент	= НСтр("ru ='<Будет создан новый элемент>'");
	ТекстПропущены		= НСтр("ru ='<Данные будут пропущены>'");
		
	Если НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника 
		ИЛИ НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиЗагрузкиДанных, "ОписаниеДополнительныхРеквизитов")
			И НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда
			
			ДобавитьУсловноеОформлениеДополнительныхРеквизитов(ЭтотОбъект, ПутьРеквизита, НастройкиЗагрузкиДанных);
			
		КонецЕсли;
		
		Если НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура"
			ИЛИ НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
			
			ИмяПоля = "Номенклатура";
			
		ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Контрагенты" Тогда
			
			ИмяПоля = "Контрагент";
			
		КонецЕсли;
		


		ТекстУсловногоОформления = ?(НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено, ТекстНовыйЭлемент, ТекстПропущены);
		
	ИначеЕсли НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда
		
		Если НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "РегистрСведений.ЦеныНоменклатуры" Тогда
			
			ИмяПоля = "Номенклатура";
			
		КонецЕсли;
		
		ТекстУсловногоОформления = НСтр("ru ='<Строка будет пропущена...>'");
		
	КонецЕсли;
	
	Если НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		ЭтоЗагрузкаТабличнойЧастиУслуги = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиЗагрузкиДанных, "ЗагрузкаТабличнойЧастиУслуги") Тогда
			ЭтоЗагрузкаТабличнойЧастиУслуги = НастройкиЗагрузкиДанных.ЗагрузкаТабличнойЧастиУслуги;
		КонецЕсли;   		
		
		// пропущенные элементы
		Если СтрНайти(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "ПриходнаяНакладная")<>0
			ИЛИ СтрНайти(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "ВводНачальныхОстатков")<>0
			ИЛИ СтрНайти(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "ПеремещениеЗапасов")<>0 
			ИЛИ СтрНайти(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "ЗаказНаПроизводство")<>0
			ИЛИ СтрНайти(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "Сборка")<>0
			ИЛИ СтрНайти(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "ОтчетКомиссионера")<>0
			ИЛИ СтрНайти(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "ОтчетКомиссионераОСписании")<>0
			ИЛИ СтрНайти(НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "ПереоценкаТоваровНаКомиссии")<>0
			
			Тогда
			
			ЭлементУсловногоОформленияКД = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформленияКД.Использование = Истина;
			
			ГруппаЭлементаОтбора = ЭлементУсловногоОформленияКД.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ЭлементОтбораКД = ГруппаЭлементаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьРеквизита + "." + ИмяПоля);
			ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЭлементОтбораКД = ГруппаЭлементаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьРеквизита + "." + "ЭтоУслуга");
			ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораКД.ПравоеЗначение = НЕ ЭтоЗагрузкаТабличнойЧастиУслуги;
			
			ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"), ТекстПропущены);
			ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"), ЦветаСтиля.ЦветНедоступногоТекста);
			
			ОформляемоеПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
			ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
			// новые элементы
			ЭлементУсловногоОформленияКД = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформленияКД.Использование = Истина;
			
			ГруппаЭлементаОтбора = ЭлементУсловногоОформленияКД.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ЭлементОтбораКД = ГруппаЭлементаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьРеквизита + "." + ИмяПоля);
			ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЭлементОтбораКД = ГруппаЭлементаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьРеквизита + "." + "ЭтоУслуга");
			ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораКД.ПравоеЗначение = ЭтоЗагрузкаТабличнойЧастиУслуги;
			
			ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"), ТекстНовыйЭлемент);
			ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"), ЦветаСтиля.ЦветНедоступногоТекста);
			
			ОформляемоеПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
			ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);  	
			
		Иначе
			
			// новые элементы
			ЭлементУсловногоОформленияКД = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформленияКД.Использование = Истина;
			
			ЭлементОтбораКД = ЭлементУсловногоОформленияКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьРеквизита + "." + ИмяПоля);
			ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"), ТекстНовыйЭлемент);
			ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"), ЦветаСтиля.ЦветНедоступногоТекста);
			
			ОформляемоеПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
			ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);  
			
			
		КонецЕсли;		
		
	Иначе
		
		ЭлементУсловногоОформленияКД = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформленияКД.Использование = Истина;
		
		ЭлементОтбораКД = ЭлементУсловногоОформленияКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьРеквизита + "." + ИмяПоля);
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"), ТекстУсловногоОформления);
		ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"), Новый Цвет(175, 175, 175));
		
		ОформляемоеПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
		ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
	КонецЕсли;	
	
	Если НастройкиЗагрузкиДанных.ИспользоватьХарактеристики 
		И ИмяПоля = "Номенклатура" Тогда
		
		ЭлементУсловногоОформленияКД = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформленияКД.Использование = Истина;
		
		ГруппаЭлементаОтбора = ЭлементУсловногоОформленияКД.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбораКД = ГруппаЭлементаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьРеквизита + "." + "Характеристика");
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ЭлементОтбораКД = ГруппаЭлементаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьРеквизита + "." + "ХарактеристикаНаименование");
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"), ТекстУсловногоОформления);
		ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"), ЦветаСтиля.ЦветНедоступногоТекста);
		
		ОформляемоеПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
		ОформляемоеПолеКД.Поле = Новый ПолеКомпоновкиДанных("Характеристика");
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьТекстУсловногоОформления(УсловноеОформление, НастройкиЗагрузкиДанных) Экспорт
	
	Если НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		Возврат;
		
	ИначеЕсли НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда
		
		Возврат;
		
	ИначеЕсли НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника Тогда
		
		Если НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура" Тогда
			
			ИмяПоля = "Номенклатура";
			
		ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Контрагенты" Тогда
			
			ИмяПоля = "Контрагент";
			
		КонецЕсли;
		
		ТекстНовыйЭлемент	= НСтр("ru ='<Будет создан новый элемент>'");
		ТекстПропущены		= НСтр("ru ='<Данные будут пропущены>'");
		ТекстУсловногоОформления = ?(НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено, ТекстНовыйЭлемент, ТекстПропущены);
		
	КонецЕсли;
	
	ИскомыйЭлемент = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		
		ЭтоИскомоеОформление = Ложь;
		Для каждого ОформляемоеПоле Из ЭлементУсловногоОформления.Поля.Элементы Цикл
			
			Если ОформляемоеПоле.Поле = ИскомыйЭлемент Тогда
				
				ЭтоИскомоеОформление = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтоИскомоеОформление Тогда
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"), ТекстУсловногоОформления);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОпределенииФормыЗагрузкиДанных(ИмяФормыЗагрузкиДанныхИзВнешнихИсточников, ПолноеИмяОбъектаЗаполнения, ОбъектЗаполнения) Экспорт
	
	
	
КонецПроцедуры

Процедура ПереопределитьОбразцыЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	
	
КонецПроцедуры

Процедура ПереопределитьЗаполнениеПолейЗагрузкиДанных(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриДобавленииСлужебныхПолей(ГруппаСлужебныхПолей, ПолноеИмяОбъектаЗаполнения) Экспорт
	
	
	
КонецПроцедуры

Процедура ПослеДобавленияЭлементовТаблицыСопоставлений(ЭтотОбъект, НастройкиЗагрузкиДанных) Экспорт
	
	Если НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура" Тогда
		
		ЭтотОбъект.Элементы["РодительКод"].ФормаВыбора = "Справочник.Номенклатура.Форма.ФормаВыбораГруппы";
		ЭтотОбъект.Элементы["РодительНаименование"].ФормаВыбора = "Справочник.Номенклатура.Форма.ФормаВыбораГруппы";
		
	ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Контрагенты"  Тогда
		
		ЭтотОбъект.Элементы["Родитель"].ФормаВыбора = "Справочник.Контрагенты.Форма.ФормаВыбораГруппы.";
		
	ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Запасы" Тогда
		
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивТиповНоменклатуры);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(НовыйПараметр);
		
		ЭтотОбъект.Элементы["Номенклатура"].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы" Тогда
		
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивТиповНоменклатуры);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(НовыйПараметр);
		
		ЭтотОбъект.Элементы["Номенклатура"].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииРежимаИспользования(ИспользоватьСовместно) Экспорт
	
	ИспользоватьСовместно = Ложь;
	
КонецПроцедуры

Функция СтандартныеИменаПолейНеподлежащихОбновлению(НастройкиЗагрузкиДанных) Экспорт
	
	// При более сложной настройке допускается индивидуальная настройка исключаемых полей
	// Описание таких полей можно разместить непосредственно в менеджерах объектов (Справочники.Номенклатура.<ИмяПроцедурыИлиФункции>)
	
	СтандартныеИсключаемыеСвойства = "";
	Если НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Контрагенты" Тогда
		
		СтандартныеИсключаемыеСвойства = "Родитель";
		
	ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура" Тогда
		
		СтандартныеИсключаемыеСвойства = "Код";
		
	ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.КонтактныеЛица" Тогда
		
		СтандартныеИсключаемыеСвойства = "Код";
		
	ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Лиды" Тогда
		
		СтандартныеИсключаемыеСвойства = "Код";
		
	ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.ДисконтныеКарты" Тогда
		
		СтандартныеИсключаемыеСвойства = "Код, КодКартыШтрихкод, КодКартыМагнитный";
		
	КонецЕсли;
	
	Возврат СтандартныеИсключаемыеСвойства;
	
КонецФункции

Функция ИменаИспользуемыхТабличныхЧастей() Экспорт
	
	ИспользуемыеИменаТабличныхЧастей = Новый Соответствие;
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.Состав",						"Состав");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.Расходы",					"Расходы");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.Калькуляция",				"Калькуляция");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.Получатели",					"Получатели");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.ВнеоборотныеАктивы",			"ВнеоборотныеАктивы");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.РасчетыСПоставщиками",		"РасчетыСПоставщиками");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.РасчетыСПокупателями",		"РасчетыСПокупателями");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.РасчетыСПерсоналом",			"РасчетыСПерсоналом");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.ЗапасыПринятые",				"ЗапасыПринятые");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.ЗапасыПереданные",			"ЗапасыПереданные");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.ЗапасыВРазрезеГТД",			"ЗапасыВРазрезеГТД");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.Запасы", 					"Запасы");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.ЗакупкиДляКУДИР",			"ЗакупкиДляКУДИР");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.РасшифровкаПлатежаОтАгента",	"РасшифровкаПлатежаОтАгента");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.ЗапасыВозвраты",				"ЗапасыВозвраты");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.Работы",						"Работы");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.Материалы",					"Материалы");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.МатериалыЗаказчика",			"МатериалыЗаказчика");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.БонусныеБаллы",				"БонусныеБаллы");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.ПодарочныеСертификаты",		"ПодарочныеСертификаты");
	ИспользуемыеИменаТабличныхЧастей.Вставить(".ТабличнаяЧасть.НакопленныеПродажиПоДисконтнымКартам", "НакопленныеПродажиПоДисконтнымКартам");
	
	Возврат ИспользуемыеИменаТабличныхЧастей;
	
КонецФункции

Функция ИменаПолейНеУчаствующиеВЗаполненииСвойств() Экспорт
	
	Возврат
	"АдресФакт
	|АдресЮр
	|АдресЭП
	|ИНН_КПП
	|КонтрагентНаименование
	|НоменклатураНаименование
	|НоменклатураНаименованиеПолное
	|РасчетныйСчет
	|РодительКод
	|РодительНаименование
	|Телефон
	|СерийныйНомер
	|Серия
	|Штрихкод
	|ИНН_КПП1
	|Контрагент1Наименование
	|РасчетныйСчет1
	|Должность1
	|ИНН_КПП2
	|Контрагент2Наименование
	|РасчетныйСчет2
	|Должность2
	|ИНН_КПП3
	|Контрагент3Наименование
	|РасчетныйСчет3
	|Должность3
	|Контакт1
	|Телефон1
	|АдресЭП1
	|Контакт2
	|Телефон2
	|АдресЭП2
	|Контакт3
	|Телефон3
	|АдресЭП3
	|Цена
	|Количество
	|Картинка,
	|УИД";
	
КонецФункции

Функция ОсновнойВидЦен() Экспорт
	
	Возврат Справочники.Контрагенты.ПолучитьОсновнойВидЦенПродажи();
	
КонецФункции

#Область МетодыСопоставлений

// Общее

Процедура СправочникПоНаименованию(ИмяСправочника, СправочникЗначение, СправочникНаименование, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если НЕ ПустаяСтрока(СправочникНаименование) Тогда
		
		СправочникСсылка = Справочники[ИмяСправочника].НайтиПоНаименованию(СправочникНаименование, Ложь);
		Если ЗначениеЗаполнено(СправочникСсылка)
			И НЕ СправочникСсылка.ЭтоГруппа Тогда
			
			СправочникЗначение = СправочникСсылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СправочникЗначение) Тогда
		
		СправочникЗначение = ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьПеречисление(ИмяПеречисления, ЗначениеПеречисления, ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	Если ЗначениеЗаполнено(ВходящиеДанные) Тогда
		
		Для каждого ЭлементПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
			
			Синоним = ЭлементПеречисления.Синоним;
			Если СтрНайти(ВРег(Синоним), ВРег(ВходящиеДанные)) > 0 Тогда
				
				ЗначениеПеречисления = Перечисления[ИмяПеречисления][ЭлементПеречисления.Имя];
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
		
		ЗначениеПеречисления = ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьСчетУчета(СчетУчета, СчетУчета_ВходящиеДанные, ЗначениеПоУмолчанию)
	
	Если НЕ ПустаяСтрока(СчетУчета_ВходящиеДанные) Тогда
		
		НайденныйСчетУчета = ПланыСчетов.Управленческий.НайтиПоКоду(СчетУчета_ВходящиеДанные);
		Если НайденныйСчетУчета = Неопределено
			ИЛИ НайденныйСчетУчета = ПланыСчетов.Управленческий.ПустаяСсылка() Тогда
			
			НайденныйСчетУчета = ПланыСчетов.Управленческий.НайтиПоНаименованию(СчетУчета_ВходящиеДанные);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйСчетУчета) Тогда
			
			СчетУчета = НайденныйСчетУчета
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		
		СчетУчета = ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьСтрокуВБулево(ЗначениеБулево, ВходящиеДанные) Экспорт
	
	ВходящиеДанные = ВРЕГ(СокрЛП(ВходящиеДанные));
	
	МассивИстина = Новый Массив;
	МассивИстина.Добавить("+");
	МассивИстина.Добавить("1");
	МассивИстина.Добавить("ИСТИНА");
	МассивИстина.Добавить("ДА");
	МассивИстина.Добавить("TRUE");
	МассивИстина.Добавить("YES");
	
	МассивЛожь = Новый Массив;
	МассивЛожь.Добавить("-");
	МассивЛожь.Добавить("0");
	МассивЛожь.Добавить("ЛОЖЬ");
	МассивЛожь.Добавить("НЕТ");
	МассивЛожь.Добавить("FALSE");
	МассивЛожь.Добавить("NO");
	
	Если МассивИстина.Найти(ВходящиеДанные) <> Неопределено Тогда
		
		ЗначениеБулево = Истина;
		
	ИначеЕсли МассивЛожь.Найти(ВходящиеДанные) <> Неопределено Тогда
		
		ЗначениеБулево = Ложь;
		
	Иначе
		
		ЗначениеБулево = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьСтрокуВЧисло(ЧислоРезультат, ЧислоСтрокой, ЗначениеПоУмолчанию = 0) Экспорт
	
	Если ПустаяСтрока(ЧислоСтрокой) Тогда
		
		ЧислоРезультат = ЗначениеПоУмолчанию;
		Возврат;
		
	КонецЕсли;
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	// ВРег используется для возможности преобразования чисел в экспоненциальной форме
	// Например 6,022140857e23 или 3,14e+00
	ЧислоРезультат = ОписаниеТиповЧисло.ПривестиЗначение(ВРег(СтрЗаменить(ЧислоСтрокой, " ", "")));
	
КонецПроцедуры

Процедура ПреобразоватьСтрокуВДату(ДатаРезультат, ДатаСтрокой) Экспорт
	
	Если ПустаяСтрока(ДатаСтрокой) Тогда
		
		ДатаРезультат = Дата(0001, 01, 01);
		
	Иначе
		
		КопияДатаСтрокой = Лев(ДатаСтрокой, 10); // отсекаем время
		
		МассивРазделителей = Новый Массив;
		МассивРазделителей.Добавить(".");
		МассивРазделителей.Добавить("/");
		
		Для каждого Разделитель Из МассивРазделителей Цикл
			
			ЧислоСтрокой = "";
			МесяцСтрокой = "";
			ГодСтрокой = "";
			
			ПозицияРазделителя = СтрНайти(КопияДатаСтрокой, Разделитель);
			Если ПозицияРазделителя > 0 Тогда
				
				ЧислоСтрокой = Лев(КопияДатаСтрокой, ПозицияРазделителя - 1);
				КопияДатаСтрокой = Сред(КопияДатаСтрокой, ПозицияРазделителя + 1);
				
			КонецЕсли;
			
			ПозицияРазделителя = СтрНайти(КопияДатаСтрокой, Разделитель);
			Если ПозицияРазделителя > 0 Тогда
				
				МесяцСтрокой = Лев(КопияДатаСтрокой, ПозицияРазделителя - 1);
				КопияДатаСтрокой = Сред(КопияДатаСтрокой, ПозицияРазделителя + 1);
				
			КонецЕсли;
			
			ГодСтрокой = КопияДатаСтрокой;
			
			Если НЕ ПустаяСтрока(ЧислоСтрокой) 
				И НЕ ПустаяСтрока(МесяцСтрокой) 
				И НЕ ПустаяСтрока(ГодСтрокой) Тогда
				
				Попытка
					
					ДатаРезультат = Дата(Число(ГодСтрокой), Число(МесяцСтрокой), Число(ЧислоСтрокой));
					
				Исключение
					
					ДатаРезультат = Дата(0001, 01, 01);
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьСтрокуВЗначениеСтроковогоТипа(ЗначениеСтроковогоТипа, Строка) Экспорт
	
	ЗначениеСтроковогоТипа = СокрЛП(Строка);
	
КонецПроцедуры

Функция ЗаполнитьПоУИД(СтрокаТаблицыФормы, ИмяСправочника, ИмяПоляУИД = "УИД_ВходящиеДанные") Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, ИмяПоляУИД) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыФормы[ИмяПоляУИД]) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		УИД = Новый УникальныйИдентификатор(СтрокаТаблицыФормы[ИмяПоляУИД]);
		ЭлементПоУИД = Справочники[ИмяСправочника].ПолучитьСсылку(УИД);
	Исключение
		Возврат Неопределено; // реквизит есть, это НЕ УИД
	КонецПопытки; 
	
	Если ОбщегоНазначения.СсылкаСуществует(ЭлементПоУИД) Тогда
		Возврат ЭлементПоУИД; // реквизит есть, это УИД, объект по нему найден (передать ссылку)
	КонецЕсли;
	
	Возврат Справочники[ИмяСправочника].ПустаяСсылка(); // реквизит есть, это УИД, но объект по нему не найден (будет создан далее)
	
КонецФункции

// Заполняет поле Номенклатура в СтрокаТаблицыФормы
//
// Параметры:
//  СтрокаТаблицыФормы - строка таблицы значений, которая содержит поля Номенклатуры, которые загружаются:
//  Наименование, Артикул, Штрихкод и т.д.
//
//  НастройкиПоиска - Структура настроек
//
Процедура СопоставитьНоменклатуруГруппу(СтрокаТаблицыФормы, НастройкиПоиска) Экспорт
	
	Если НастройкиПоиска.Свойство("ТаблицаДублирующихСтрок") Тогда
		
		ТаблицаДублирующихСтрок = НастройкиПоиска.ТаблицаДублирующихСтрок;
		СтруктураДублирующихСтрок = ПолучитьСтруктуруДублирующихСтрок(СтрокаТаблицыФормы, ТаблицаДублирующихСтрок, НастройкиПоиска);
		ЗаписьДубликат = ТаблицаДублирующихСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьДубликат, СтрокаТаблицыФормы, "НоменклатураНаименование, Код");
		ЗаписьДубликат.КлючСвязи = СтруктураДублирующихСтрок.ИндексПервойСтроки;
		
	КонецЕсли;
	
	элементПоУИД = ЗаполнитьПоУИД(СтрокаТаблицыФормы, "Номенклатура");
	Если элементПоУИД <> Неопределено Тогда
		// Если указан валидный УИД, дальше не ищем, либо находим, либо создадим элемент с этим УИДом
		СтрокаТаблицыФормы.Номенклатура = элементПоУИД;		
		Возврат;
	КонецЕсли;
	
	Номенклатура = СтрокаТаблицыФормы.Номенклатура;
	Код = ПроверитьРеквизит(СтрокаТаблицыФормы, "Код");
	НоменклатураНаименование = ПроверитьРеквизит(СтрокаТаблицыФормы, "НоменклатураНаименование");
	
	ЗначениеБылоСопоставлено = Ложь;
	Если ЗначениеЗаполнено(Код) И НастройкиПоиска.ИскатьПоКоду Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа
		|	И Номенклатура.Код = &Код");
		Запрос.УстановитьПараметр("Код", Код);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеБылоСопоставлено = Истина;
			Номенклатура = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеБылоСопоставлено 
		И ЗначениеЗаполнено(НоменклатураНаименование)
		И НастройкиПоиска.ИскатьПоНаименованию Тогда
		
		НоменклатураНаименованиеЭкранировано = СтрЗаменить(НоменклатураНаименование, "[", "\[");
		НоменклатураНаименованиеЭкранировано = СтрЗаменить(НоменклатураНаименованиеЭкранировано, "]", "\]");
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа
		|	И Номенклатура.Наименование = &Наименование");
		Запрос.УстановитьПараметр("Наименование", НоменклатураНаименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеБылоСопоставлено = Истина;
			Номенклатура = Выборка.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеБылоСопоставлено 
		И ЗначениеЗаполнено(НоменклатураНаименование)
		И НастройкиПоиска.ИскатьПоНаименованиюЛевойЧасти Тогда
		
		НоменклатураНаименованиеЭкранировано = СтрЗаменить(НоменклатураНаименование, "[", "\[");
		НоменклатураНаименованиеЭкранировано = СтрЗаменить(НоменклатураНаименованиеЭкранировано, "]", "\]");
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа
		|	И Номенклатура.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""\""");
		Запрос.УстановитьПараметр("Наименование", НоменклатураНаименованиеЭкранировано + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеБылоСопоставлено = Истина;
			Номенклатура = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТаблицыФормы.Номенклатура = Номенклатура;
		
КонецПроцедуры

// Заполняет поле Номенклатура в СтрокаТаблицыФормы
//
// Параметры:
//  СтрокаТаблицыФормы - строка таблицы значений, которая содержит поля Номенклатуры, которые загружаются:
//  Наименование, Артикул, Штрихкод и т.д.
//
//  НастройкиПоиска - Структура настроек
//
Процедура СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска, ИмяПоля = "Номенклатура") Экспорт
	
	Если НастройкиПоиска.Свойство("ТаблицаДублирующихСтрок") Тогда
		
		ТаблицаДублирующихСтрок = НастройкиПоиска.ТаблицаДублирующихСтрок;
		СтруктураДублирующихСтрок = ПолучитьСтруктуруДублирующихСтрок(СтрокаТаблицыФормы, ТаблицаДублирующихСтрок, НастройкиПоиска);
		ЗаписьДубликат = ТаблицаДублирующихСтрок.Добавить();
		ОписаниеПолей = "Код, Артикул, Штрихкод, НоменклатураНаименование, НоменклатураНаименованиеПолное, Номенклатура";
		Если Не ИмяПоля = "Номенклатура" Тогда
			ОписаниеПолей = СтрЗаменить(ОписаниеПолей, "Номенклатура", ИмяПоля);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗаписьДубликат, СтрокаТаблицыФормы, ОписаниеПолей);
		ЗаписьДубликат.КлючСвязи = СтруктураДублирующихСтрок.ИндексПервойСтроки;
		
	КонецЕсли;
	
	элементПоУИД = ЗаполнитьПоУИД(СтрокаТаблицыФормы, ИмяПоля);
	Если элементПоУИД <> Неопределено Тогда
		// Если указан валидный УИД, дальше не ищем, либо находим, либо создадим элемент с этим УИДом
		СтрокаТаблицыФормы[ИмяПоля] = элементПоУИД;
		Возврат;
	КонецЕсли;
	
	Если НастройкиПоиска.ВариантПоиска = 0 Тогда
		
		СтрокаТаблицыФормы[ИмяПоля] = СопоставитьНоменклатуруДоПервогоСовпадения(СтрокаТаблицыФормы, НастройкиПоиска, ИмяПоля);
		
	Иначе
		
		СтрокаТаблицыФормы[ИмяПоля] = СопоставитьНоменклатуруВсеСовпадения(СтрокаТаблицыФормы, НастройкиПоиска, ИмяПоля);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поле Характеристика в СтрокаТаблицыФормы
//
// Параметры:
//  СтрокаТаблицыФормы - строка таблицы значений, которая содержит поля Номенклатуры, которые загружаются:
//  Наименование, Полное наименование, Артикул и т.д.
//
//  НастройкиПоиска - Структура настроек
//
Процедура СопоставитьХарактеристику(СтрокаТаблицыФормы) Экспорт
	
	Номенклатура	= СтрокаТаблицыФормы.Номенклатура;
	Штрихкод		= СтрокаТаблицыФормы.Штрихкод;
	ХарактеристикаНаименование	= СтрокаТаблицыФормы.ХарактеристикаНаименование;
	ХарактеристикаАртикул 		= СтрокаТаблицыФормы.ХарактеристикаАртикул;
	ХарактеристикаКод 		= СтрокаТаблицыФормы.ХарактеристикаКод;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ЗначениеБылоСопоставлено = Ложь;
		
		Если ЗначениеЗаполнено(ХарактеристикаКод) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Код", ХарактеристикаКод);
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СпрХарактеристики.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
			|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО (СпрХарактеристики.Владелец = Номенклатура.Ссылка
			|				ИЛИ СпрХарактеристики.Владелец = Номенклатура.КатегорияНоменклатуры)
			|ГДЕ
			|	(СпрХарактеристики.Владелец = &Номенклатура
			|			ИЛИ СпрХарактеристики.Владелец = Номенклатура.КатегорияНоменклатуры)
			|	И СпрХарактеристики.Код = &Код
			|	И Номенклатура.Ссылка = &Номенклатура";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыФормы.Характеристика = Выборка.Ссылка;
				ЗначениеБылоСопоставлено = Истина;
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;

		
		Если НЕ ЗначениеБылоСопоставлено И ЗначениеЗаполнено(Штрихкод) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ШК.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШК
			|ГДЕ
			|	ШК.Штрихкод = &Штрихкод
			|	И ШК.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(Выборка.Характеристика) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыФормы.Характеристика = Выборка.Характеристика;
				ЗначениеБылоСопоставлено = Истина;
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеБылоСопоставлено И ЗначениеЗаполнено(ХарактеристикаАртикул) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Артикул", ХарактеристикаАртикул);
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СпрХарактеристики.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
			|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО (СпрХарактеристики.Владелец = Номенклатура.Ссылка
			|				ИЛИ СпрХарактеристики.Владелец = Номенклатура.КатегорияНоменклатуры)
			|ГДЕ
			|	(СпрХарактеристики.Владелец = &Номенклатура
			|			ИЛИ СпрХарактеристики.Владелец = Номенклатура.КатегорияНоменклатуры)
			|	И СпрХарактеристики.Артикул = &Артикул
			|	И Номенклатура.Ссылка = &Номенклатура";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыФормы.Характеристика = Выборка.Ссылка;
				ЗначениеБылоСопоставлено = Истина;
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеБылоСопоставлено
			И ЗначениеЗаполнено(ХарактеристикаНаименование) Тогда
			
			// Владельцем характеристики может быть номенклатура или категория номенклатуры.
			//
			
			СправочникСсылка = Неопределено;
			СправочникСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ХарактеристикаНаименование, Истина, , Номенклатура);
									
			Если НЕ ЗначениеЗаполнено(СправочникСсылка)
				И ЗначениеЗаполнено(Номенклатура.КатегорияНоменклатуры) Тогда
				
				СправочникСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ХарактеристикаНаименование, Истина, , Номенклатура.КатегорияНоменклатуры);  						
				
			КонецЕсли;  			
			
			Если НЕ ЗначениеЗаполнено(СправочникСсылка) Тогда
				
				СправочникСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ХарактеристикаНаименование, Ложь, , Номенклатура);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СправочникСсылка)
				И ЗначениеЗаполнено(Номенклатура.КатегорияНоменклатуры) Тогда
								
				СправочникСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ХарактеристикаНаименование, Ложь, , Номенклатура.КатегорияНоменклатуры);				
				
			КонецЕсли;  			
			
			Если ЗначениеЗаполнено(СправочникСсылка) Тогда
				
				СтрокаТаблицыФормы.Характеристика = СправочникСсылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьПартию(Партия, Номенклатура, Штрихкод, Партия_ВходящиеДанные) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ЗначениеБылоСопоставлено = Ложь;
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ ШК.Партия ИЗ РегистрСведений.ШтрихкодыНоменклатуры КАК ШК ГДЕ ШК.Штрихкод = &Штрихкод И ШК.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				ЗначениеБылоСопоставлено = Истина;
				Партия = Выборка.Партия;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеБылоСопоставлено
			И ЗначениеЗаполнено(Партия_ВходящиеДанные) Тогда
			
			СправочникСсылка = Справочники.ПартииНоменклатуры.НайтиПоНаименованию(Партия_ВходящиеДанные, Ложь, , Номенклатура);
			Если ЗначениеЗаполнено(СправочникСсылка) Тогда
				
				Партия = СправочникСсылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЕдиницыИзмерения(Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	Если НЕ ПустаяСтрока(ЕдиницаИзмерения_ВходящиеДанные) Тогда
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			НаименованиеТекущейЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения.Наименование");
			Если ВРег(СокрЛП(НаименованиеТекущейЕдиницыИзмерения)) = ВРег(СокрЛП(ЕдиницаИзмерения_ВходящиеДанные)) Тогда
				
				ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			
			СправочникСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдиницаИзмерения_ВходящиеДанные, Ложь);
			Если ЗначениеЗаполнено(СправочникСсылка) Тогда
				
				ЕдиницаИзмерения = СправочникСсылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				
				СправочникСсылка = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ЕдиницаИзмерения_ВходящиеДанные, Ложь, , Номенклатура);
				Если ЗначениеЗаполнено(СправочникСсылка) Тогда
					
					ЕдиницаИзмерения = СправочникСсылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения)  Тогда
				
				КатегорияНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "КатегорияНоменклатуры");
				Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
					
					СправочникСсылка = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ЕдиницаИзмерения_ВходящиеДанные, Ложь, , КатегорияНоменклатуры);
					Если ЗначениеЗаполнено(СправочникСсылка) Тогда
						
						ЕдиницаИзмерения = СправочникСсылка;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		
		ЕдиницаИзмерения = ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьРодителяНоменклатуры(Родитель, РодительКод, РодительНаименование, ЗначениеПоУмолчанию) Экспорт
	
	Если НЕ ПустаяСтрока(РодительКод) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Код", РодительКод);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа
		|	И Номенклатура.Код = &Код";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Родитель = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Родитель) И НЕ ПустаяСтрока(РодительНаименование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", РодительНаименование);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа
		|	И Номенклатура.Наименование = &Наименование";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Родитель = Выборка.Ссылка;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			
			Запрос.УстановитьПараметр("Наименование", РодительНаименование + "%");
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ЭтоГруппа
			|	И Номенклатура.Наименование ПОДОБНО &Наименование";
			
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				Родитель = Выборка.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Родитель) Тогда
		
		Родитель = ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьРодителя(ИмяСправочника, Родитель, Родитель_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	Если НЕ ПустаяСтрока(Родитель_ВходящиеДанные) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", Родитель_ВходящиеДанные);
		Запрос.Текст = "ВЫБРАТЬ Справочник." + ИмяСправочника + ".Ссылка ГДЕ Справочник." + ИмяСправочника + ".ЭтоГруппа И Справочник." + ИмяСправочника + ".Наименование = &Наименование";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Родитель = Выборка.Ссылка;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			
			Запрос.УстановитьПараметр("Наименование", Родитель_ВходящиеДанные + "%");
			Запрос.Текст = "ВЫБРАТЬ Справочник." + ИмяСправочника + ".Ссылка ГДЕ Справочник." + ИмяСправочника + ".ЭтоГруппа И Справочник." + ИмяСправочника + ".Наименование ПОДОБНО &Наименование";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				Родитель = Выборка.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Родитель) Тогда
		
		Родитель = ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьВалюту(ЗначениеДопРеквизита, СтроковоеЗначение) Экспорт
	
	Если ПустаяСтрока(СтроковоеЗначение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ СпрВалюты.Ссылка КАК Ссылка ИЗ Справочник.Валюты КАК СпрВалюты 
	|ГДЕ СпрВалюты.Код = &КодВалюты 
	|	ИЛИ СпрВалюты.Наименование ПОДОБНО &НаименованиеВалюты
	|	ИЛИ СпрВалюты.НаименованиеПолное ПОДОБНО &НаименованиеПолное
	|	ИЛИ СпрВалюты.СимвольноеПредставление = &СимвольноеПредставление");
	
	Запрос.УстановитьПараметр("КодВалюты", СокрЛП(СтроковоеЗначение));
	Запрос.УстановитьПараметр("НаименованиеВалюты", СокрЛП(СтроковоеЗначение));
	Запрос.УстановитьПараметр("НаименованиеПолное", СокрЛП(СтроковоеЗначение));
	Запрос.УстановитьПараметр("СимвольноеПредставление", СокрЛП(СтроковоеЗначение));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеДопРеквизита = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьДополнительноеСвойство(ЗначениеДопРеквизита, Свойство, ИспользоватьИерархию, СтроковоеЗначение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ Справочник.ЗначенияСвойствОбъектов.Ссылка КАК ЗначениеСвойства ГДЕ Наименование ПОДОБНО &Наименование И Справочник.ЗначенияСвойствОбъектов.Ссылка В(&МассивЗначений)");
	
	Если ИспользоватьИерархию Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ЗначенияСвойствОбъектов", "Справочник.ЗначенияСвойствОбъектовИерархия");
		
	КонецЕсли;
	
	МассивЗначений = УправлениеСвойствами.ПолучитьСписокЗначенийСвойств(Свойство);
	
	Запрос.УстановитьПараметр("Наименование", СокрЛП(СтроковоеЗначение));
	Запрос.УстановитьПараметр("МассивЗначений", МассивЗначений);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеДопРеквизита = Выборка.ЗначениеСвойства;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьПользователя(ЗначениеДопРеквизита, СтроковоеЗначение) Экспорт
	
	НайденныйПользователь = Пользователи.НайтиПоИмени(СокрЛП(СтроковоеЗначение));
	Если НЕ ЗначениеЗаполнено(НайденныйПользователь) Тогда
		
		НайденныйПользователь = Справочники.Пользователи.НайтиПоНаименованию(СокрЛП(СтроковоеЗначение), Ложь);
		
	КонецЕсли;
	
	ЗначениеДопРеквизита = ?(ЗначениеЗаполнено(НайденныйПользователь), НайденныйПользователь, Неопределено);
	
КонецПроцедуры

Процедура СопоставитьПроект(ЗначениеДопРеквизита, СтроковоеЗначение) Экспорт
	
	Если ПустаяСтрока(СтроковоеЗначение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Справочник.Проекты.Ссылка КАК Проект ГДЕ Наименование ПОДОБНО &Наименование");
	
	Запрос.УстановитьПараметр("Наименование", СокрЛП(СтроковоеЗначение));
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеДопРеквизита = Выборка.Проект;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьСотрудника(ЗначениеДопРеквизита, СтроковоеЗначение) Экспорт
	
	Если ПустаяСтрока(СтроковоеЗначение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Справочник.Сотрудники.Ссылка КАК Сотрудник ГДЕ Код = &ТабельныйНомер ИЛИ Наименование ПОДОБНО &ПредставлениеСотрудника");
	
	Запрос.УстановитьПараметр("ТабельныйНомер", СокрЛП(СтроковоеЗначение));
	Запрос.УстановитьПараметр("ПредставлениеСотрудника", СокрЛП(СтроковоеЗначение));
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеДопРеквизита = Выборка.Сотрудник;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьДополнительноеСвойство(ЗначениеДопРеквизита, Свойство, ИспользоватьИерархию, СтроковоеЗначение) Экспорт
	Перем СвойствоВладелец;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
		
		ИмяСправочника = ?(ИспользоватьИерархию, "ЗначенияСвойствОбъектовИерархия", "ЗначенияСвойствОбъектов");
		
		Если ЗначениеЗаполнено(Свойство.ВладелецДополнительныхЗначений) Тогда
			СвойствоВладелец = Свойство.ВладелецДополнительныхЗначений;
		Иначе
			СвойствоВладелец = Свойство;
		КонецЕсли;
		
		ЗначениеДопРеквизита = Справочники[ИмяСправочника].НайтиПоНаименованию(СокрЛП(СтроковоеЗначение), Истина, , СвойствоВладелец);
		Если НЕ ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
			
			СпрОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
			СпрОбъект.Владелец = СвойствоВладелец;
			СпрОбъект.Наименование = СокрЛП(СтроковоеЗначение);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект, Истина, Истина);
			
			ЗначениеДопРеквизита = СпрОбъект.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаполнитьТаблицуВозможныхТиповЗначенийДопРеквизита(Свойство, ТаблицаТипов) Экспорт
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("Тип");
	ТаблицаТипов.Колонки.Добавить("Приоритет");
	
	МассивТиповЗначений = Свойство.ТипЗначения.Типы();
	Для каждого ЭлементМассива Из МассивТиповЗначений Цикл
		
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.Тип = ЭлементМассива;
		Если ЭлементМассива = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") 
			ИЛИ ЭлементМассива = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда
			
			НоваяСтрока.Приоритет = 1;
			
		ИначеЕсли ЭлементМассива = Тип("Булево")
			ИЛИ ЭлементМассива = Тип("Дата")
			ИЛИ ЭлементМассива = Тип("Число") Тогда
			
			НоваяСтрока.Приоритет = 3;
			
		ИначеЕсли ЭлементМассива = Тип("Строка") Тогда
			
			НоваяСтрока.Приоритет = 4;
			
		Иначе
			
			НоваяСтрока.Приоритет = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТипов.Сортировать("Приоритет");
	
КонецПроцедуры

Процедура СопоставитьДополнительныеРеквизиты(СтрокаТаблицыФормы, ВыбранныеДополнительныеРеквизиты) Экспорт
	Перем ТаблицаТипов;
	
	ПостФикс = "_ВходящиеДанные";
	Для каждого ЭлементСоответствия Из ВыбранныеДополнительныеРеквизиты Цикл
		
		СтроковоеЗначение = СтрокаТаблицыФормы[ЭлементСоответствия.Значение + ПостФикс];
		Если ПустаяСтрока(СтроковоеЗначение) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Свойство = ЭлементСоответствия.Ключ;
		
		СоздатьЗаполнитьТаблицуВозможныхТиповЗначенийДопРеквизита(Свойство, ТаблицаТипов);
		
		ЗначениеДопРеквизита = Неопределено;
		Для каждого СтрокаТаблицы Из ТаблицаТипов Цикл
			
			Если СтрокаТаблицы.Тип = Тип("СправочникСсылка.Валюты") Тогда
				
				СопоставитьВалюту(ЗначениеДопРеквизита, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
				
				СопоставитьДополнительноеСвойство(ЗначениеДопРеквизита, Свойство, Ложь, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда
				
				СопоставитьДополнительноеСвойство(ЗначениеДопРеквизита, Свойство, Истина, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("СправочникСсылка.Контрагенты") Тогда
				
				СопоставитьКонтрагента(ЗначениеДопРеквизита, СтроковоеЗначение, СтроковоеЗначение, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("СправочникСсылка.Пользователи") Тогда
				
				СопоставитьПользователя(ЗначениеДопРеквизита, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("СправочникСсылка.Проекты") Тогда
				
				СопоставитьПроект(ЗначениеДопРеквизита, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("СправочникСсылка.Сотрудники") Тогда
				
				СопоставитьСотрудника(ЗначениеДопРеквизита, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				
				СопоставитьФизическоеЛицо(ЗначениеДопРеквизита, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("Булево") Тогда
				
				ПреобразоватьСтрокуВБулево(ЗначениеДопРеквизита, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("Строка") Тогда
				
				СкопироватьСтрокуВЗначениеСтроковогоТипа(ЗначениеДопРеквизита, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("Дата") Тогда
				
				ПреобразоватьСтрокуВДату(ЗначениеДопРеквизита, СтроковоеЗначение);
				
			ИначеЕсли СтрокаТаблицы.Тип = Тип("Число") Тогда
				
				ПреобразоватьСтрокуВЧисло(ЗначениеДопРеквизита, СтроковоеЗначение);
				Если ЗначениеДопРеквизита = 0 Тогда // 0 игнорируем
					
					ЗначениеДопРеквизита = Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеДопРеквизита <> Неопределено Тогда
				
				СтрокаТаблицыФормы[ЭлементСоответствия.Значение] = ЗначениеДопРеквизита;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиКонтрагентаПоИНН_КПП(ИНН, КПП) Экспорт
	Перем Контрагент;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Справочник.Контрагенты.Ссылка ГДЕ НЕ ЭтоГруппа И ИНН = &ИНН");
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Если НЕ ПустаяСтрока(КПП) Тогда
		
		Запрос.Текст = Запрос.Текст + " И КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Контрагент = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Процедура СопоставитьСтрануПроисхождения(СтранаПроисхождения, СтранаПроисхождения_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	Перем СправочникСсылка;
	
	// Справочник страны мира
	Если НЕ ПустаяСтрока(СтранаПроисхождения_ВходящиеДанные) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СправочникСсылка = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(СтранаПроисхождения_ВходящиеДанные);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	СтранаПроисхождения = ?(ЗначениеЗаполнено(СправочникСсылка), СправочникСсылка, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьНомерГТД(НомерГТД, НомерГТД_ВходящиеДанные) Экспорт
	
	Если НЕ ПустаяСтрока(НомерГТД_ВходящиеДанные) Тогда
		
		НомерГТД = Справочники.НомераГТД.НайтиПоКоду(НомерГТД_ВходящиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

// Спецификация

Процедура СопоставитьТипСтроки(ТипСтроки, ТипСтроки_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьПеречисление("ТипыСтрокСоставаСпецификации", ТипСтроки, ТипСтроки_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьСпецификацию(Спецификация, Спецификация_ВходящиеДанные, Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) 
		И НЕ ПустаяСтрока(Спецификация_ВходящиеДанные) Тогда
		
		СправочникСсылка = Справочники.Спецификации.НайтиПоНаименованию(Спецификация_ВходящиеДанные, Ложь, , Номенклатура);
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			Спецификация = СправочникСсылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Номенклатура

Процедура СопоставитьТипНоменклатуры(ТипНоменклатуры, ТипНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьПеречисление("ТипыНоменклатуры", ТипНоменклатуры, ТипНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьМетодОценки(МетодОценки, МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьПеречисление("МетодОценкиЗапасов", МетодОценки, МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьНаправлениеДеятельности(НаправлениеДеятельности, НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	ИспользованиеВключено = ПолучитьФункциональнуюОпцию("УчетПоНесколькимНаправлениямДеятельности");
	Если НЕ ИспользованиеВключено Тогда
		
		// Нельзя заполнять значением по умолчанию, например, потому, что оно может прийти из пользовательских настроек.
		//
		НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		
	Иначе
		
		СправочникПоНаименованию("НаправленияДеятельности", НаправлениеДеятельности, НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьКатегориюНоменклатуры(КатегорияНоменклатуры, КатегорияНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	Если НЕ ПустаяСтрока(КатегорияНоменклатуры_ВходящиеДанные) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НаименованиеТочное", КатегорияНоменклатуры_ВходящиеДанные);
		Запрос.УстановитьПараметр("НаименованиеПодобное", КатегорияНоменклатуры_ВходящиеДанные + "%");
		
		Запрос.Текст =
		"ВЫБРАТЬ Ссылка ИЗ Справочник.КатегорииНоменклатуры ГДЕ Наименование = &НаименованиеТочное И НЕ ЭтоГруппа
		|;Выбрать Ссылка ИЗ Справочник.КатегорииНоменклатуры ГДЕ Наименование ПОДОБНО &НаименованиеПодобное И НЕ ЭтоГруппа";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если НЕ РезультатЗапроса[0].Пустой() Тогда
			
			Выборка = РезультатЗапроса[0].Выбрать();
			КатегорияНоменклатуры = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КатегорияНоменклатуры)
			И НЕ РезультатЗапроса[1].Пустой() Тогда
			
			Выборка = РезультатЗапроса[1].Выбрать();
			КатегорияНоменклатуры = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		
		КатегорияНоменклатуры = ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьПродукциюПоЕГАИС(КодПродукцииЕГАИС, КодПродукцииЕГАИС_ВходящиеДанные) Экспорт
	
	Если ПустаяСтрока(КодПродукцииЕГАИС_ВходящиеДанные) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка КАК ПродукцияЕГАИС ГДЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Код = &КодПродукцииЕГАИС");
	Запрос.УстановитьПараметр("КодПродукцииЕГАИС", КодПродукцииЕГАИС_ВходящиеДанные);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			КодПродукцииЕГАИС = Выборка.ПродукцияЕГАИС;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьТоварнуюНоменклатуруВЭД(ТоварнаяНоменклатураВЭД, ТоварнаяНоменклатураВЭД_ВходящиеДанные) Экспорт
	
	Если ПустаяСтрока(ТоварнаяНоменклатураВЭД_ВходящиеДанные) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ СправочникТНВЭД.Ссылка ИЗ Справочник.КлассификаторТНВЭД КАК СправочникТНВЭД ГДЕ СправочникТНВЭД.Код = &КодТНВЭД");
	Запрос.УстановитьПараметр("КодТНВЭД", ТоварнаяНоменклатураВЭД_ВходящиеДанные);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			ТоварнаяНоменклатураВЭД = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьПоставщика(Поставщик, Поставщик_ВходящиеДанные) Экспорт
	
	Если ПустаяСтрока(Поставщик_ВходящиеДанные) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// :::Поиск ИНН и КПП
	Разделители = Новый Массив;
	Разделители.Добавить("/");
	Разделители.Добавить("\");
	Разделители.Добавить("-");
	Разделители.Добавить("|");
	
	ИНН = "";
	КПП = "";
	
	Для каждого ЗначениеРазделителя Из Разделители Цикл
		
		ПозицияРазделителя = СтрНайти(Поставщик_ВходящиеДанные, ЗначениеРазделителя);
		Если ПозицияРазделителя = 0 Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		ИНН = Лев(Поставщик_ВходящиеДанные, ПозицияРазделителя - 1);
		КПП = Сред(Поставщик_ВходящиеДанные, ПозицияРазделителя + 1);
		
		Запрос = Новый Запрос("ВЫБРАТЬ Справочник.Контрагенты.Ссылка ГДЕ НЕ ЭтоГруппа И ИНН = &ИНН И КПП = &КПП");
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Поставщик = Выборка.Ссылка;
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// :::Поиск ИНН
	Запрос = Новый Запрос("ВЫБРАТЬ Справочник.Контрагенты.Ссылка ГДЕ НЕ ЭтоГруппа И ИНН = &ИНН");
	Запрос.УстановитьПараметр("ИНН", Поставщик_ВходящиеДанные);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Поставщик = Выборка.Ссылка;
		Возврат;
		
	КонецЕсли;
	
	СправочникСсылка = Справочники.Контрагенты.НайтиПоНаименованию(Поставщик_ВходящиеДанные, Ложь);
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		Поставщик = СправочникСсылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьСтруктурнуюЕдиницу(Склад, Склад_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СправочникПоНаименованию("СтруктурныеЕдиницы", Склад, Склад_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьСпособПополнения(СпособПополнения, СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьПеречисление("СпособыПополненияЗапасов", СпособПополнения, СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьСтавкуНДС(СтавкаНДС, СтавкаНДС_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СправочникПоНаименованию("СтавкиНДС", СтавкаНДС, СтавкаНДС_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьСчетУчетаЗапасов(СчетУчетаЗапасов, СчетУчетаЗапасов_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьСчетУчета(СчетУчетаЗапасов, СчетУчетаЗапасов_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьСчетУчетаЗатрат(СчетУчетаЗатрат, СчетУчетаЗатрат_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьСчетУчета(СчетУчетаЗатрат, СчетУчетаЗатрат_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьСчетУчетаДоходов(СчетУчетаДоходов, СчетУчетаДоходов_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьСчетУчета(СчетУчетаДоходов, СчетУчетаДоходов_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьЯчейку(Ячейка, Ячейка_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СправочникПоНаименованию("Ячейки", Ячейка, Ячейка_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьЦеновуюГруппу(ЦеноваяГруппа, ЦеноваяГруппа_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СправочникПоНаименованию("ЦеновыеГруппы", ЦеноваяГруппа, ЦеноваяГруппа_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура ДобавитьЗаписьСопоставленияПоИНН_КПП(ОрганизацияЕГАИС, Контрагент)
	
	// Пробуем сами сопоставить
	Контрагент = НайтиКонтрагентаПоИНН_КПП(ОрганизацияЕГАИС.ИНН, ОрганизацияЕГАИС.КПП);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		СпрОбъект = ОрганизацияЕГАИС.ПолучитьОбъект();
		СпрОбъект.Контрагент = Контрагент;
		СпрОбъект.Сопоставлено = Истина;
		СпрОбъект.СоответствуетОрганизации = Ложь;
		СпрОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонтрагентовПоСоответствиюЕГАИС(Производитель, Импортер) Экспорт
	
	СопоставленныеДанные = Новый Структура("Производитель, Импортер");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Запрос.УстановитьПараметр("Импортер", Импортер);
	
	Запрос.Текст = 
	"ВЫБРАТЬ Справочник.КлассификаторОрганизацийЕГАИС.* ГДЕ Ссылка = &Производитель;
	|ВЫБРАТЬ Справочник.КлассификаторОрганизацийЕГАИС.* ГДЕ Ссылка = &Импортер";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// :::Производитель
	ВыборкаПроизводитель = РезультатЗапроса[0].Выбрать();
	Если ВыборкаПроизводитель.Следующий() Тогда
		
		СопоставленныеДанные.Производитель = ВыборкаПроизводитель.Контрагент;
		
	ИначеЕсли ЗначениеЗаполнено(Производитель) Тогда
		
		ДобавитьЗаписьСопоставленияПоИНН_КПП(Производитель, СопоставленныеДанные.Производитель);
		
	КонецЕсли;
	
	ВыборкаИмпортер = РезультатЗапроса[1].Выбрать();
	Если ВыборкаИмпортер.Следующий() Тогда
		
		СопоставленныеДанные.Импортер = ВыборкаПроизводитель.Контрагент;
		
	ИначеЕсли ЗначениеЗаполнено(Импортер) Тогда
		
		ДобавитьЗаписьСопоставленияПоИНН_КПП(Импортер, СопоставленныеДанные.Импортер);
		
	КонецЕсли;
		
	Возврат СопоставленныеДанные;
	
КонецФункции

Процедура СопоставитьСерия(НоменклатураСсылка, Серия, Серия_ВходящиеДанные) Экспорт
	
	Если ЗначениеЗаполнено(НоменклатураСсылка) И ЗначениеЗаполнено(Серия_ВходящиеДанные) Тогда
		
		СправочникСсылка = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Серия_ВходящиеДанные, Ложь, , НоменклатураСсылка);
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			Серия = СправочникСсылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЯчейка(СкладВладелец, Ячейка, Ячейка_ВходящиеДанные) Экспорт
	
	Если ЗначениеЗаполнено(СкладВладелец) И ЗначениеЗаполнено(Ячейка_ВходящиеДанные) Тогда
		
		СправочникСсылка = Справочники.Ячейки.НайтиПоНаименованию(Ячейка_ВходящиеДанные, Ложь, , СкладВладелец);
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			Ячейка = СправочникСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Характеристики номенклатуры

Процедура СопоставитьХарактеристикуПоНаименованиюАртикулу(СтрокаТаблицыФормы, ВладелецХарактеристики) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВладелецХарактеристики) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ХарактеристикаАртикул") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ХарактеристикаНаименование") Тогда
		Возврат;
	КонецЕсли;
	
	элементПоУИД = ЗаполнитьПоУИД(СтрокаТаблицыФормы, "ХарактеристикиНоменклатуры");
	Если элементПоУИД <> Неопределено Тогда
		// Если указан валидный УИД, дальше не ищем, либо находим, либо создадим элемент с этим УИДом
		СтрокаТаблицыФормы.Характеристика = элементПоУИД;
		Возврат;
	КонецЕсли;
	
	СправочникСсылка = Неопределено;
	
	Если НЕ ПустаяСтрока(СтрокаТаблицыФормы.ХарактеристикаАртикул) Тогда
		
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Артикул", СтрокаТаблицыФормы.ХарактеристикаАртикул);
			Запрос.УстановитьПараметр("Номенклатура", ВладелецХарактеристики);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СпрХарактеристики.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
			|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО (СпрХарактеристики.Владелец = Номенклатура.Ссылка
			|				ИЛИ СпрХарактеристики.Владелец = Номенклатура.КатегорияНоменклатуры)
			|ГДЕ
			|	(СпрХарактеристики.Владелец = &Номенклатура
			|			ИЛИ СпрХарактеристики.Владелец = Номенклатура.КатегорияНоменклатуры)
			|	И СпрХарактеристики.Артикул = &Артикул
			|	И Номенклатура.Ссылка = &Номенклатура";
		
		ВыборкаРезультата = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультата.Следующий() Тогда
			
			СправочникСсылка = ВыборкаРезультата.Ссылка;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СтрокаТаблицыФормы.Характеристика = СправочникСсылка;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СправочникСсылка) И НЕ ПустаяСтрока(СтрокаТаблицыФормы.ХарактеристикаНаименование) Тогда
		
		СправочникСсылка = Неопределено;
		СправочникСсылка = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(СтрокаТаблицыФормы.ХарактеристикаНаименование, Ложь, , ВладелецХарактеристики);
		Если НЕ ЗначениеЗаполнено(СправочникСсылка)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "ХарактеристикаНаименованиеДляПечати")
			И НЕ ПустаяСтрока(СтрокаТаблицыФормы.ХарактеристикаНаименованиеДляПечати) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НаименованиеДляПечати", СтрокаТаблицыФормы.ХарактеристикаНаименованиеДляПечати);
			Запрос.УстановитьПараметр("ВладелецХарактеристики", ВладелецХарактеристики);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СпрХарактеристики.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
			|ГДЕ
			|	СпрХарактеристики.Владелец = &ВладелецХарактеристики
			|	И СпрХарактеристики.НаименованиеДляПечати ПОДОБНО &НаименованиеДляПечати";
			
			ВыборкаРезультата = Запрос.Выполнить().Выбрать();
			Если ВыборкаРезультата.Следующий() Тогда
				
				СправочникСсылка = ВыборкаРезультата.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СтрокаТаблицыФормы.Характеристика = СправочникСсылка;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Заказы

Процедура СопоставитьЗаказ(Заказ, Заказ_ВходящиеДанные, Организация = Неопределено) Экспорт
	
	Если ПустаяСтрока(Заказ_ВходящиеДанные) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивТеговПоставщиков = Новый Массив;
	МассивТеговПоставщиков.Добавить("Заказ поставщику");
	МассивТеговПоставщиков.Добавить("ЗаказПоставщику");
	МассивТеговПоставщиков.Добавить("Поставщику");
	МассивТеговПоставщиков.Добавить("Поставщик");
	МассивТеговПоставщиков.Добавить("Пост");
	
	НомерДляПоиска	= Заказ_ВходящиеДанные;
	ВидДокумента	= "ЗаказПокупателя";
	Для каждого ТегИзМассива Из МассивТеговПоставщиков Цикл
		
		Если СтрНайти(Заказ_ВходящиеДанные, ТегИзМассива) > 0 Тогда
			
			ВидДокумента = "ЗаказПоставщику";
			НомерДляПоиска = СокрЛП(СтрЗаменить(НомерДляПоиска, "", ТегИзМассива));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", "%" + НомерДляПоиска);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Номер КАК Номер
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Номер ПОДОБНО &Номер
	|	И (ТаблицаДокумента.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата УБЫВ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя", ВидДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТочноеСовпадение = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Номер = НомерДляПоиска Тогда
			ТочноеСовпадение = Выборка.Ссылка;
			Прервать;
		КонецЕсли; 
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		Если НомерНаПечать = НомерДляПоиска Тогда
			ТочноеСовпадение = Выборка.Ссылка;
			Прервать;
		КонецЕсли; 
		НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.УдалитьПользовательскиеПрефиксыИзНомераОбъекта(Выборка.Номер);
		НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(НомерБезПрефиксов, Истина, Истина);
		Если НомерБезПрефиксов = НомерДляПоиска Тогда
			ТочноеСовпадение = Выборка.Ссылка;
			Прервать;
		КонецЕсли; 
			
	КонецЦикла;
	Если ЗначениеЗаполнено(ТочноеСовпадение) Тогда
		Заказ = ТочноеСовпадение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СопоставитьЗаказПоставщику(Заказ, Заказ_ВходящиеДанные, Организация = Неопределено) Экспорт
	
	Если ПустаяСтрока(Заказ_ВходящиеДанные) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НомерДляПоиска	= Заказ_ВходящиеДанные;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер", "%" + НомерДляПоиска);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Номер КАК Номер
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Номер ПОДОБНО &Номер
	|	И (ТаблицаДокумента.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТочноеСовпадение = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Номер = НомерДляПоиска Тогда
			ТочноеСовпадение = Выборка.Ссылка;
			Прервать;
		КонецЕсли; 
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		Если НомерНаПечать = НомерДляПоиска Тогда
			ТочноеСовпадение = Выборка.Ссылка;
			Прервать;
		КонецЕсли; 
		НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.УдалитьПользовательскиеПрефиксыИзНомераОбъекта(Выборка.Номер);
		НомерБезПрефиксов = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(НомерБезПрефиксов, Истина, Истина);
		Если НомерБезПрефиксов = НомерДляПоиска Тогда
			ТочноеСовпадение = Выборка.Ссылка;
			Прервать;
		КонецЕсли; 
			
	КонецЦикла;
	Если ЗначениеЗаполнено(ТочноеСовпадение) Тогда
		Заказ = ТочноеСовпадение;
	КонецЕсли; 
	
КонецПроцедуры

// Контрагент

Процедура СопоставитьКонтрагентаПоУИД(СтрокаТаблицыФормы) Экспорт

	элементПоУИД = ЗаполнитьПоУИД(СтрокаТаблицыФормы, "Контрагенты");
	Если элементПоУИД <> Неопределено Тогда
		// Если указан валидный УИД, дальше не ищем, либо находим, либо создадим элемент с этим УИДом
		СтрокаТаблицыФормы.Контрагент = элементПоУИД;		
		Возврат;
	КонецЕсли;
	
	СопоставитьКонтрагента(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.ИНН_КПП, СтрокаТаблицыФормы.КонтрагентНаименование, СтрокаТаблицыФормы.РасчетныйСчет);
	
КонецПроцедуры	

Процедура СопоставитьКонтрагента(Контрагент, ИНН_КПП, КонтрагентНаименование, РасчетныйСчет) Экспорт
	
	// :::Поиск ИНН и КПП
	Если НЕ ПустаяСтрока(ИНН_КПП) Тогда
		
		Разделители = Новый Массив;
		Разделители.Добавить("/");
		Разделители.Добавить("\");
		Разделители.Добавить("-");
		Разделители.Добавить("|");
		
		ИНН = "";
		КПП = "";
		
		Для каждого ЗначениеРазделителя Из Разделители Цикл
			
			ПозицияРазделителя = СтрНайти(ИНН_КПП, ЗначениеРазделителя);
			Если ПозицияРазделителя = 0 Тогда 
				
				Продолжить;
				
			КонецЕсли;
			
			ИНН = Лев(ИНН_КПП, ПозицияРазделителя - 1);
			КПП = Сред(ИНН_КПП, ПозицияРазделителя + 1);
			
		КонецЦикла;
	
		// Если не было разделителя, то предполагаю, что это все ИНН
		Если ИНН = "" И КПП = "" Тогда
			
			ИНН = ИНН_КПП;
			
		КонецЕсли;
		
		Контрагент = НайтиКонтрагентаПоИНН_КПП(ИНН, КПП);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КонтрагентНаименование) Тогда
		
		СправочникСсылка = Справочники.Контрагенты.НайтиПоНаименованию(КонтрагентНаименование, Ложь);
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			Контрагент = СправочникСсылка;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// :::Номер расчетного счета
	Если НЕ ПустаяСтрока(РасчетныйСчет) Тогда
		
		СправочникСсылка = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", РасчетныйСчет);
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			Контрагент = СправочникСсылка.Владелец;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьФизическоеЛицо(ФизическоеЛицо, ФизическоеЛицо_ВходящиеДанные) Экспорт
	
	СправочникПоНаименованию("ФизическиеЛица", ФизическоеЛицо, ФизическоеЛицо_ВходящиеДанные, Неопределено);
	
КонецПроцедуры

Процедура СопоставитьГруппуДоступа(ГруппаДоступа, ГруппаДоступа_ВходящиеДанные) Экспорт
	
	СправочникПоНаименованию("ГруппыДоступаКонтрагентов", ГруппаДоступа, ГруппаДоступа_ВходящиеДанные);
	
КонецПроцедуры

Процедура СопоставитьСчетУчетаРасчетовСПокупателем(СчетУчетаРасчетовСПокупателем, СчетУчетаРасчетовСПокупателем_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьСчетУчета(СчетУчетаРасчетовСПокупателем, СчетУчетаРасчетовСПокупателем_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьСчетУчетаАвансовПокупателя(СчетУчетаАвансовПокупателя, СчетУчетаАвансовПокупателя_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьСчетУчета(СчетУчетаАвансовПокупателя, СчетУчетаАвансовПокупателя_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьСчетУчетаРасчетовСПоставщиком(СчетУчетаРасчетовСПоставщиком, СчетУчетаРасчетовСПоставщиком_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьСчетУчета(СчетУчетаРасчетовСПоставщиком, СчетУчетаРасчетовСПоставщиком_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьСчетУчетаАвансовПоставщику(СчетУчетаАвансовПоставщику, СчетУчетаАвансовПоставщику_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СопоставитьСчетУчета(СчетУчетаАвансовПоставщику, СчетУчетаАвансовПоставщику_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьВидыКонтрагентов(ВидыКонтрагентов, ВидыКонтрагентов_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	Если ПустаяСтрока(ВидыКонтрагентов_ВходящиеДанные) Тогда
		
		ВидыКонтрагентов = ЗначениеПоУмолчанию;
		
	Иначе
		
		Если ВРЕГ(ВидыКонтрагентов_ВходящиеДанные) = ВРЕГ("Юр. лицо")
			ИЛИ ВидыКонтрагентов_ВходящиеДанные = "1" Тогда
			
			ВидыКонтрагентов = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
			
		ИначеЕсли ВРЕГ(ВидыКонтрагентов_ВходящиеДанные) = ВРЕГ("ИП")
			ИЛИ ВидыКонтрагентов_ВходящиеДанные = "2" Тогда
			
			ВидыКонтрагентов = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
			
		ИначеЕсли ВРЕГ(ВидыКонтрагентов_ВходящиеДанные) = ВРЕГ("Физ. лицо")
			ИЛИ ВидыКонтрагентов_ВходящиеДанные = "3" Тогда
			
			ВидыКонтрагентов = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
			
		Иначе
			
			ВидыКонтрагентов = ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьПолФизическогоЛица(Пол, Пол_ВходящиеДанные) Экспорт
	
	Если ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("М")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("М.")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("Муж")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("Муж.")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("Мужской")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("+") Тогда
		
		Пол = Перечисления.ПолФизическогоЛица.Мужской;
		
	ИначеЕсли ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("Ж")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("Ж.")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("Жен")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("Жен.")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("Женский")
		ИЛИ ВРЕГ(Пол_ВходящиеДанные) = ВРЕГ("-") Тогда
		
		Пол = Перечисления.ПолФизическогоЛица.Женский;
		
	КонецЕсли;
	
КонецПроцедуры

// Контактные лица

Процедура СопоставитьКонтактноеЛицо(КонтактноеЛицо, КонтактноеЛицоНаименование, КонтактноеЛицоКод) Экспорт
	
	Если НЕ ПустаяСтрока(КонтактноеЛицоНаименование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонтактноеЛицоКод", КонтактноеЛицоКод);
		Запрос.УстановитьПараметр("НаименованиеТочное", КонтактноеЛицоНаименование);
		Запрос.УстановитьПараметр("НаименованиеПодобное", КонтактноеЛицоНаименование + "%");
		
		Запрос.Текст =
		"ВЫБРАТЬ Ссылка, Код, Наименование ПОМЕСТИТЬ СпрКонтактныеЛица ИЗ Справочник.КонтактныеЛица ГДЕ НЕ ЭтоГруппа Индексировать ПО Код, Наименование
		|;Выбрать СпрКонтактныеЛица.Ссылка ИЗ СпрКонтактныеЛица КАК СпрКонтактныеЛица ГДЕ СпрКонтактныеЛица.Код = &КонтактноеЛицоКод
		|;Выбрать СпрКонтактныеЛица.Ссылка ИЗ СпрКонтактныеЛица КАК СпрКонтактныеЛица ГДЕ СпрКонтактныеЛица.Наименование = &НаименованиеТочное
		|;Выбрать СпрКонтактныеЛица.Ссылка ИЗ СпрКонтактныеЛица КАК СпрКонтактныеЛица ГДЕ СпрКонтактныеЛица.Наименование ПОДОБНО &НаименованиеПодобное";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если НЕ РезультатЗапроса[1].Пустой() Тогда
			
			Выборка = РезультатЗапроса[1].Выбрать();
			КонтактноеЛицо = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо)
			И НЕ РезультатЗапроса[2].Пустой() Тогда
			
			Выборка = РезультатЗапроса[2].Выбрать();
			КонтактноеЛицо = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо)
			И НЕ РезультатЗапроса[3].Пустой() Тогда
			
			Выборка = РезультатЗапроса[3].Выбрать();
			КонтактноеЛицо = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьИсточникиПривлеченияПокупателей(ИсточникПривлечения, ИсточникПривлечения_ВходящиеДанные) Экспорт
	
	СправочникПоНаименованию("ИсточникиПривлеченияПокупателей", ИсточникПривлечения, ИсточникПривлечения_ВходящиеДанные);
	
КонецПроцедуры

// Лиды

Процедура СопоставитьЛид(Лид, ЛидНаименование, ЛидКод) Экспорт
	
	Если НЕ ПустаяСтрока(ЛидНаименование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЛидКод", ЛидКод);
		Запрос.УстановитьПараметр("НаименованиеТочное", ЛидНаименование);
		Запрос.УстановитьПараметр("НаименованиеПодобное", ЛидНаименование + "%");
		
		Запрос.Текст =
		"ВЫБРАТЬ Ссылка, Код, Наименование ПОМЕСТИТЬ СпрЛиды ИЗ Справочник.Лиды ГДЕ НЕ ЭтоГруппа Индексировать ПО Код, Наименование
		|;Выбрать СпрЛиды.Ссылка ИЗ СпрЛиды КАК СпрЛиды ГДЕ СпрЛиды.Код = &ЛидКод
		|;Выбрать СпрЛиды.Ссылка ИЗ СпрЛиды КАК СпрЛиды ГДЕ СпрЛиды.Наименование = &НаименованиеТочное
		|;Выбрать СпрЛиды.Ссылка ИЗ СпрЛиды КАК СпрЛиды ГДЕ СпрЛиды.Наименование ПОДОБНО &НаименованиеПодобное";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если НЕ РезультатЗапроса[1].Пустой() Тогда
			
			Выборка = РезультатЗапроса[1].Выбрать();
			Лид = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лид)
			И НЕ РезультатЗапроса[2].Пустой() Тогда
			
			Выборка = РезультатЗапроса[2].Выбрать();
			Лид = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Лид)
			И НЕ РезультатЗапроса[3].Пустой() Тогда
			
			Выборка = РезультатЗапроса[3].Выбрать();
			Лид = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьСостояниеЛида(СостояниеЛида, СостояниеЛида_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СправочникПоНаименованию("СостоянияЛидов", СостояниеЛида, СостояниеЛида_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

Процедура СопоставитьГруппуДоступаЛида(ГруппаДоступа, ГруппаДоступа_ВходящиеДанные) Экспорт
	
	СправочникПоНаименованию("ГруппыДоступаЛидов", ГруппаДоступа, ГруппаДоступа_ВходящиеДанные);
	
КонецПроцедуры

// Цены номенклатуры

Процедура СопоставитьВидЦен(ВидЦен, ВидЦен_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	Если НЕ ПустаяСтрока(ВидЦен_ВходящиеДанные) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидЦен_ВходящиеДанные", СокрЛП(ВидЦен_ВходящиеДанные));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрВидыЦен.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК СпрВидыЦен
		|ГДЕ
		|	СпрВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
		|	И СпрВидыЦен.Наименование ПОДОБНО &ВидЦен_ВходящиеДанные
		|	И НЕ СпрВидыЦен.Недействителен";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ВидЦен = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		
		ВидЦен = ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьВидДисконтнойКарты(ВидДисконтнойКарты, ВидДисконтнойКарты_ВходящиеДанные, ЗначениеПоУмолчанию) Экспорт
	
	СправочникПоНаименованию("ВидыДисконтныхКарт", ВидДисконтнойКарты, ВидДисконтнойКарты_ВходящиеДанные, ЗначениеПоУмолчанию);
	
КонецПроцедуры

// Ввод начальных остатков

// Процедура - Сопоставить договор
//
// Параметры:
//  Контрагент				 - СправочникСсылка.Контрагенты - ссылка на контрагента
//  Договор					 - СправочникСсылка.ДоговорыКонтрагентов - ссылка на договор, будет заполнена
//  Договор_ВходящиеДанные	 - Строка - значение входящих данных для поиска
//  ВидДоговора				 - ПеречислениеСсылка.ВидыДоговоров - вид договора
//
Процедура СопоставитьДоговор(Контрагент, Договор, Договор_ВходящиеДанные, ВидДоговора = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) 
		И ЗначениеЗаполнено(Договор_ВходящиеДанные) Тогда
		
		СправочникСсылка = Неопределено;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |ГДЕ
		               |	ДоговорыКонтрагентов.Наименование ПОДОБНО &ИмяДоговора
		               |	И &ВидДоговора
		               |	И ДоговорыКонтрагентов.Владелец = &Владелец";
		Запрос.УстановитьПараметр("ИмяДоговора", Договор_ВходящиеДанные);
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		
		Если ЗначениеЗаполнено(ВидДоговора) Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидДоговора", "ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора");
			Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
			
		Иначе
			
			Запрос.УстановитьПараметр("ВидДоговора", Истина);
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СправочникСсылка = Выборка.Ссылка;
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			               |ГДЕ
			               |	ДоговорыКонтрагентов.НомерДоговора = &ИмяДоговора
			               |	И &ВидДоговора
			               |	И ДоговорыКонтрагентов.Владелец = &Владелец";
			Запрос.УстановитьПараметр("ИмяДоговора", Договор_ВходящиеДанные);
			
			Если ЗначениеЗаполнено(ВидДоговора) Тогда
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидДоговора", "ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора");
				Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
				
			Иначе
				
				Запрос.УстановитьПараметр("ВидДоговора", Истина);
				
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				СправочникСсылка = Выборка.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			Договор = СправочникСсылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗаказПоНомеруДате(Заказ, НазваниеТипаДокумента, Контрагент, Номер_ВходящиеДанные, Дата_ВходящиеДанные) Экспорт
	
	Если ПустаяСтрока(Номер_ВходящиеДанные) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НазваниеТипаДокумента <> "ЗаказПоставщику" Тогда
		
		НазваниеТипаДокумента = "ЗаказПокупателя"
		
	КонецЕсли;
	
	ИмяТаблицы = "Документ." + НазваниеТипаДокумента;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Заказ.Ссылка ИЗ &ИмяТаблицы КАК Заказ ГДЕ Заказ.Контрагент = &Контрагент И Заказ.Номер ПОДОБНО &Номер");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Номер", "%" + Номер_ВходящиеДанные + "%");
	
	Если НЕ ПустаяСтрока(Дата_ВходящиеДанные) Тогда
		
		ДатаИзСтроки = Дата('00010101');
		ПреобразоватьСтрокуВДату(ДатаИзСтроки, Дата_ВходящиеДанные);
		
		Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
			
			Запрос.Текст = Запрос.Текст + " И Заказ.Дата Между &ДатаНачала И &ДатаОкончания";
			Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаИзСтроки));
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаИзСтроки));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Заказ.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Заказ = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьРасчетныйДокументПоНомеруДате(Документ, НазваниеТипаДокумента, Контрагент, Номер_ВходящиеДанные, Дата_ВходящиеДанные) Экспорт
	
	Если ПустаяСтрока(НазваниеТипаДокумента) 
		ИЛИ ПустаяСтрока(Номер_ВходящиеДанные) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СоответствиеИменДокументов = Новый Соответствие;
	
	СоответствиеИменДокументов.Вставить("ЗаказПокупателя", 		"ЗаказПокупателя");
	СоответствиеИменДокументов.Вставить("Заказы покупателей",	"ЗаказПокупателя");
	СоответствиеИменДокументов.Вставить("Заказ покупателя",		"ЗаказПокупателя");
	
	СоответствиеИменДокументов.Вставить("Взаимозачет",			"Взаимозачет");
	СоответствиеИменДокументов.Вставить("Корректировка долга",	"Взаимозачет");
	СоответствиеИменДокументов.Вставить("Корректировки долга",	"Взаимозачет");
	
	СоответствиеИменДокументов.Вставить("ОтчетКомиссионера",	"ОтчетКомиссионера");
	СоответствиеИменДокументов.Вставить("Отчет комиссионера",	"ОтчетКомиссионера");
	СоответствиеИменДокументов.Вставить("Отчеты комиссионеров",	"ОтчетКомиссионера");
	
	СоответствиеИменДокументов.Вставить("ОтчетОПереработке",	"ОтчетОПереработке");
	СоответствиеИменДокументов.Вставить("Отчет о переработке",	"ОтчетОПереработке");
	СоответствиеИменДокументов.Вставить("Отчеты о переработке",	"ОтчетОПереработке");
	
	СоответствиеИменДокументов.Вставить("ПоступлениеВКассу",	"ПоступлениеВКассу");
	СоответствиеИменДокументов.Вставить("Поступление в кассу",	"ПоступлениеВКассу");
	СоответствиеИменДокументов.Вставить("Поступления в кассу",	"ПоступлениеВКассу");
	СоответствиеИменДокументов.Вставить("ПКО",	"ПоступлениеВКассу");
	
	СоответствиеИменДокументов.Вставить("ПоступлениеНаСчет",	"ПоступлениеНаСчет");
	СоответствиеИменДокументов.Вставить("Поступление на счет",	"ПоступлениеНаСчет");
	СоответствиеИменДокументов.Вставить("Поступления на счет",	"ПоступлениеНаСчет");
	
	СоответствиеИменДокументов.Вставить("ПередачаВА",			"ПередачаВА");
	СоответствиеИменДокументов.Вставить("Продажа имущества",	"ПередачаВА");
	СоответствиеИменДокументов.Вставить("Продажи имущества",	"ПередачаВА");
	
	СоответствиеИменДокументов.Вставить("РасходнаяНакладная",	"РасходнаяНакладная");
	СоответствиеИменДокументов.Вставить("РН",					"РасходнаяНакладная");
	СоответствиеИменДокументов.Вставить("Расходная накладная",	"РасходнаяНакладная");
	СоответствиеИменДокументов.Вставить("Расходные накладные",	"РасходнаяНакладная");
	
	СоответствиеИменДокументов.Вставить("АвансовыйОтчет", "АвансовыйОтчет");
	СоответствиеИменДокументов.Вставить("Авансовый отчет", "АвансовыйОтчет");
	СоответствиеИменДокументов.Вставить("Авансовые отчеты", "АвансовыйОтчет");
	
	СоответствиеИменДокументов.Вставить("ДополнительныеРасходы", "ДополнительныеРасходы");
	СоответствиеИменДокументов.Вставить("Дополнительные расходы", "ДополнительныеРасходы");
	
	СоответствиеИменДокументов.Вставить("ОтчетКомитенту", "ОтчетКомитенту");
	СоответствиеИменДокументов.Вставить("Отчет комитенту", "ОтчетКомитенту");
	СоответствиеИменДокументов.Вставить("Отчеты комитентам", "ОтчетКомитенту");
	
	СоответствиеИменДокументов.Вставить("ОтчетПереработчика", "ОтчетПереработчика");
	СоответствиеИменДокументов.Вставить("Отчет переработчика", "ОтчетПереработчика");
	СоответствиеИменДокументов.Вставить("Отчеты переработчиков", "ОтчетПереработчика");
	
	СоответствиеИменДокументов.Вставить("ПриходнаяНакладная", "ПриходнаяНакладная");
	СоответствиеИменДокументов.Вставить("Приходная накладная", "ПриходнаяНакладная");
	СоответствиеИменДокументов.Вставить("Приходные накладные", "ПриходнаяНакладная");
	СоответствиеИменДокументов.Вставить("ПН", "ПриходнаяНакладная");
	
	СоответствиеИменДокументов.Вставить("РасходИзКассы", "РасходИзКассы");
	СоответствиеИменДокументов.Вставить("Расход из кассы", "РасходИзКассы");
	СоответствиеИменДокументов.Вставить("РКО", "РасходИзКассы");
	
	СоответствиеИменДокументов.Вставить("РасходСоСчета", "РасходСоСчета");
	СоответствиеИменДокументов.Вставить("Расход со счета", "РасходСоСчета");
	
	ТипДокумента = СоответствиеИменДокументов.Получить(НазваниеТипаДокумента);
	Если ТипДокумента = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяТаблицы = "Документ." + ТипДокумента;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ДокументРасчетов.Ссылка ИЗ &ИмяТаблицы КАК ДокументРасчетов ГДЕ ДокументРасчетов.Контрагент = &Контрагент И ДокументРасчетов.Номер ПОДОБНО &Номер");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Номер", "%" + Номер_ВходящиеДанные + "%");
	
	Если НЕ ПустаяСтрока(Дата_ВходящиеДанные) Тогда
		
		ДатаИзСтроки = Дата('00010101');
		ПреобразоватьСтрокуВДату(ДатаИзСтроки, Дата_ВходящиеДанные);
		
		Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
			
			Запрос.Текст = Запрос.Текст + " И ДокументРасчетов.Дата Между &ДатаНачала И &ДатаОкончания";
			Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаИзСтроки));
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаИзСтроки));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ДокументРасчетов.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Документ = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьСчетПоНомеруДате(Счет, Контрагент, Номер_ВходящиеДанные, Дата_ВходящиеДанные) Экспорт
	
	Если ПустаяСтрока(Номер_ВходящиеДанные) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Счет.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.СчетНаОплату КАК Счет
	               |ГДЕ
	               |	Счет.Контрагент = &Контрагент
	               |	И Счет.Номер ПОДОБНО &Номер";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Номер", "%" + Номер_ВходящиеДанные + "%");
	
	Если НЕ ПустаяСтрока(Дата_ВходящиеДанные) Тогда
		
		ДатаИзСтроки = Дата('00010101');
		ПреобразоватьСтрокуВДату(ДатаИзСтроки, Дата_ВходящиеДанные);
		
		Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
			
			Запрос.Текст = Запрос.Текст + " И Счет.Дата Между &ДатаНачала И &ДатаОкончания";
			Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаИзСтроки));
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаИзСтроки));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Счет.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Счет = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьВнеоборотныйАктив(ВнеоборотныйАктив, ВнеоборотныйАктив_ВходящиеДанные) Экспорт
	
	Если НЕ ПустаяСтрока(ВнеоборотныйАктив_ВходящиеДанные) Тогда
		
		СправочникСсылка = Справочники.ВнеоборотныеАктивы.НайтиПоНаименованию(ВнеоборотныйАктив_ВходящиеДанные, Истина);
		
		Если НЕ ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникСсылка = Справочники.ВнеоборотныеАктивы.НайтиПоКоду(ВнеоборотныйАктив_ВходящиеДанные);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		ВнеоборотныйАктив = СправочникСсылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьНоменклатуруПоставщиков(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных) Экспорт
	
	КонтрагентПоставщик = НастройкиЗагрузкиДанных.КонтрагентПоставщик;
	НастройкиПоиска = НастройкиЗагрузкиДанных.НастройкиПоиска;
	АртикулПоставщика = ПроверитьРеквизит(СтрокаТаблицыФормы, "АртикулПоставщика");
	Идентификатор = ПроверитьРеквизит(СтрокаТаблицыФормы, "Идентификатор");
	НоменклатураПоставщиковНаименование = ПроверитьРеквизит(СтрокаТаблицыФормы, "НоменклатураПоставщиковНаименование");
	
	ЗначениеБылоСопоставлено = Ложь;
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураПоставщиковСправочник.Ссылка КАК НоменклатураПоставщиков,
		|	НоменклатураПоставщиковСправочник.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиковСправочник.Характеристика КАК Характеристика
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиковСправочник
		|ГДЕ
		|	НоменклатураПоставщиковСправочник.Владелец = &КонтрагентВладелец
		|	И НоменклатураПоставщиковСправочник.Идентификатор = &Идентификатор
		|	И НЕ НоменклатураПоставщиковСправочник.ЭтоГруппа");
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		Запрос.УстановитьПараметр("КонтрагентВладелец", КонтрагентПоставщик);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеБылоСопоставлено = Истина;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, Выборка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеБылоСопоставлено И НастройкиПоиска.ИскатьПоАртикулу И ЗначениеЗаполнено(АртикулПоставщика) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщиков,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &КонтрагентВладелец
		|	И НоменклатураПоставщиков.Артикул = &Артикул
		|	И НЕ НоменклатураПоставщиков.ЭтоГруппа");
		Запрос.УстановитьПараметр("Артикул", АртикулПоставщика);
		Запрос.УстановитьПараметр("КонтрагентВладелец", КонтрагентПоставщик);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеБылоСопоставлено = Истина;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, Выборка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеБылоСопоставлено 
		И ЗначениеЗаполнено(НоменклатураПоставщиковНаименование)
		И НастройкиПоиска.ИскатьПоНаименованию Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщиков,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &КонтрагентВладелец
		|	И НоменклатураПоставщиков.Наименование = &НоменклатураПоставщиковНаименование
		|	И НЕ НоменклатураПоставщиков.ЭтоГруппа");
		Запрос.УстановитьПараметр("КонтрагентВладелец", КонтрагентПоставщик);
		Запрос.УстановитьПараметр("НоменклатураПоставщиковНаименование", НоменклатураПоставщиковНаименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ЗначениеБылоСопоставлено = Истина;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, Выборка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
		И НастройкиПоиска.Свойство("ТаблицаДублирующихСтрок") Тогда
		
		ТаблицаДублирующихСтрок = НастройкиПоиска.ТаблицаДублирующихСтрок;		
		СтруктураДублирующихСтрок = ПолучитьСтруктуруДублирующихСтрок(СтрокаТаблицыФормы, ТаблицаДублирующихСтрок, НастройкиПоиска);
		ЗаписьДубликат = ТаблицаДублирующихСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьДубликат, СтрокаТаблицыФормы, "Код, Артикул, Штрихкод, НоменклатураНаименование, НоменклатураНаименованиеПолное, Номенклатура");
		ЗаписьДубликат.КлючСвязи = СтруктураДублирующихСтрок.ИндексПервойСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поле ДисконтнаяКарта в СтрокаТаблицыФормы
//
// Параметры:
//  СтрокаТаблицыФормы - строка таблицы значений, которая содержит поля ДисконтнойКарты, которые загружаются:
//  КодКартыШтрихкод, КодКартыМагнитный, Наименование и т.д.
//
//  НастройкиПоиска - Структура настроек
//
Процедура СопоставитьДисконтнуюКарту(СтрокаТаблицыФормы, НастройкиПоиска) Экспорт
	
	Если НастройкиПоиска.Свойство("ТаблицаДублирующихСтрок") Тогда
		
		ТаблицаДублирующихСтрок = НастройкиПоиска.ТаблицаДублирующихСтрок;
		СтруктураДублирующихСтрок = ПолучитьСтруктуруДублирующихСтрок(СтрокаТаблицыФормы, ТаблицаДублирующихСтрок, НастройкиПоиска);
		ЗаписьДубликат = ТаблицаДублирующихСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьДубликат, СтрокаТаблицыФормы, "КодКартыШтрихкод, КодКартыМагнитный");
		ЗаписьДубликат.КлючСвязи = СтруктураДублирующихСтрок.ИндексПервойСтроки;
		
	КонецЕсли;
	
	ЭлементПоУИД = ЗаполнитьПоУИД(СтрокаТаблицыФормы, "ДисконтнаяКарта");
	Если ЭлементПоУИД <> Неопределено Тогда
		// Если указан валидный УИД, дальше не ищем, либо находим, либо создадим элемент с этим УИДом
		СтрокаТаблицыФормы.Номенклатура = элементПоУИД;		
		Возврат;
	КонецЕсли;
	
	ДисконтнаяКарта = СтрокаТаблицыФормы.ДисконтнаяКарта;
	Штрихкод = ПроверитьРеквизит(СтрокаТаблицыФормы, "КодКартыШтрихкод");
	МагнитныйКод = ПроверитьРеквизит(СтрокаТаблицыФормы, "КодКартыМагнитный");
	ВидКарты = Неопределено;
	ВидКартыНаименование = ПроверитьРеквизит(СтрокаТаблицыФормы, "Владелец");
	СопоставитьВидДисконтнойКарты(ВидКарты, ВидКартыНаименование, Неопределено);
	СтрокаТаблицыФормы.Владелец = ВидКарты;
	
	ВладелецНаименованиеИлиИННКПП = ПроверитьРеквизит(СтрокаТаблицыФормы, "ВладелецКарты");
	ВладелецаКарты = Неопределено;
	СопоставитьКонтрагента(ВладелецаКарты, ВладелецНаименованиеИлиИННКПП, ВладелецНаименованиеИлиИННКПП, "");
	СтрокаТаблицыФормы.ВладелецКарты = ВладелецаКарты;

	ЗначениеБылоСопоставлено = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДисконтныеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.КодКартыШтрихкод = &Штрихкод
	|	И ДисконтныеКарты.КодКартыМагнитный = """"
	|	И (ДисконтныеКарты.ВладелецКарты = &Владелец
	|			ИЛИ &Владелец = Неопределено)
	|	И (ДисконтныеКарты.Владелец = &ВидКарты
	|			ИЛИ &ВидКарты = Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДисконтныеКарты.Ссылка
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.КодКартыШтрихкод = """"
	|	И ДисконтныеКарты.КодКартыМагнитный = &МагнитныйКод
	|	И (ДисконтныеКарты.ВладелецКарты = &Владелец
	|			ИЛИ &Владелец = Неопределено)
	|	И (ДисконтныеКарты.Владелец = &ВидКарты
	|			ИЛИ &ВидКарты = Неопределено)
	|";
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.УстановитьПараметр("МагнитныйКод", МагнитныйКод);
	Запрос.УстановитьПараметр("Владелец", ВладелецаКарты);
	Запрос.УстановитьПараметр("ВидКарты", ВидКарты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗначениеБылоСопоставлено = Истина;
		ДисконтнаяКарта = Выборка.Ссылка;
		
	КонецЕсли;
	
	СтрокаТаблицыФормы.ДисконтнаяКарта = ДисконтнаяКарта;
		
КонецПроцедуры

Процедура СопоставитьСправочникПоКоду(Элемент, ПолноеИмяСправочника, Код_ВходящиеДанные) Экспорт
	
	СправочникМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяСправочника);
	Если СправочникМенеджер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Код_ВходящиеДанные) Тогда
		
		СправочникСсылка = СправочникМенеджер.НайтиПоКоду(Код_ВходящиеДанные, Истина);
		
		Если НЕ ЗначениеЗаполнено(Элемент) Тогда
			
			СправочникСсылка = СправочникМенеджер.НайтиПоКоду(Код_ВходящиеДанные);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		Элемент = СправочникСсылка;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьРеквизит(СтрокаТаблицыФормы, ИмяРеквизита)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, ИмяРеквизита) Тогда
	
		Возврат СтрокаТаблицыФормы[ИмяРеквизита];
		
	Иначе
		
		Возврат "";
		
	КонецЕсли; 
	
КонецФункции

Функция СопоставитьНоменклатуруДоПервогоСовпадения(СтрокаТаблицыФормы, НастройкиПоиска, ИмяПоля = "Номенклатура")

	Номенклатура = СтрокаТаблицыФормы[ИмяПоля];

	Код 							= ПроверитьРеквизит(СтрокаТаблицыФормы, "Код");
	Штрихкод 						= ПроверитьРеквизит(СтрокаТаблицыФормы, "Штрихкод");
	Артикул 						= ПроверитьРеквизит(СтрокаТаблицыФормы, "Артикул");
	ХарактеристикаАртикул 			= ПроверитьРеквизит(СтрокаТаблицыФормы, "ХарактеристикаАртикул");
	НоменклатураНаименование 		= ПроверитьРеквизит(СтрокаТаблицыФормы, ИмяПоля + "Наименование");
	НоменклатураНаименованиеПолное 	= ПроверитьРеквизит(СтрокаТаблицыФормы, ИмяПоля + "НаименованиеПолное");

	Если ЗначениеЗаполнено(НастройкиПоиска.ДополнительныйРеквизитПоиска) Тогда

		ПолеРеквизита = ЗагрузкаДанныхИзВнешнегоИсточника.ПрефиксДополнительногоРеквизитаПоиска()
			+ НастройкиПоиска.ДополнительныйРеквизитПоиска.ИдентификаторДляФормул;
		ДополнительныйРеквизит 			= ПроверитьРеквизит(СтрокаТаблицыФормы, ПолеРеквизита);

	Иначе

		ДополнительныйРеквизит = Неопределено;

	КонецЕсли;

	ЗначениеБылоСопоставлено = Ложь;
	Если ЗначениеЗаполнено(Код) И НастройкиПоиска.ИскатьПоКоду Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	Номенклатура.Ссылка,
					   |	ВЫБОР
					   |		КОГДА Номенклатура.Недействителен
					   |			ТОГДА 1
					   |		ИНАЧЕ 0
					   |	КОНЕЦ КАК ПолеСортировки
					   |ИЗ
					   |	Справочник.Номенклатура КАК Номенклатура
					   |ГДЕ
					   |	Номенклатура.Код = &Код
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	ПолеСортировки";
		Запрос.УстановитьПараметр("Код", Код);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СправочникСсылка = Выборка.Ссылка;
			ЗначениеБылоСопоставлено = Истина;
			Если СправочникСсылка.ЭтоГруппа Тогда
				ЗначениеБылоСопоставлено = Ложь;
				Номенклатура = Неопределено;
			Иначе
				Номенклатура = СправочникСсылка;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если Не ЗначениеБылоСопоставлено И ЗначениеЗаполнено(Штрихкод) И НастройкиПоиска.ИскатьПоШтрихкоду Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	ШК.Номенклатура КАК Номенклатура,
					   |	ВЫБОР
					   |		КОГДА ШК.Номенклатура.Недействителен
					   |			ТОГДА 1
					   |		ИНАЧЕ 0
					   |	КОНЕЦ КАК ПолеСортировки
					   |ИЗ
					   |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШК
					   |ГДЕ
					   |	ШК.Штрихкод = &Штрихкод
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	ПолеСортировки";
		Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда

			ЗначениеБылоСопоставлено = Истина;
			Номенклатура = Выборка.Номенклатура;

		КонецЕсли;

	КонецЕсли;

	Если Не ЗначениеБылоСопоставлено И НастройкиПоиска.ИскатьПоАртикулу И (ЗначениеЗаполнено(Артикул)
		Или ЗначениеЗаполнено(ХарактеристикаАртикул)) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	НоменклатураСправочник.Ссылка КАК Ссылка,
					   |	ВЫБОР
					   |		КОГДА НоменклатураСправочник.Ссылка.Недействителен
					   |			ТОГДА 1
					   |		ИНАЧЕ 0
					   |	КОНЕЦ КАК ПолеСортировки
					   |ИЗ
					   |	Справочник.Номенклатура КАК НоменклатураСправочник
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					   |		ПО (&ИскатьПоАртикулуХарактеристик)
					   |			И (НоменклатураСправочник.ИспользоватьХарактеристики)
					   |			И НоменклатураСправочник.Ссылка = ХарактеристикиНоменклатуры.Владелец
					   |ГДЕ
					   |	НЕ НоменклатураСправочник.ЭтоГруппа";
		Если ЗначениеЗаполнено(Артикул) И ЗначениеЗаполнено(ХарактеристикаАртикул) Тогда
			Запрос.Текст = Запрос.Текст + "
										  |	И (НоменклатураСправочник.Артикул = &Артикул
										  |	ИЛИ ХарактеристикиНоменклатуры.Артикул = &ХарактеристикаАртикул)";
		ИначеЕсли ЗначениеЗаполнено(Артикул) Тогда
			Запрос.Текст = Запрос.Текст + "
										  |	И НоменклатураСправочник.Артикул = &Артикул";
		ИначеЕсли ЗначениеЗаполнено(ХарактеристикаАртикул) Тогда
			Запрос.Текст = Запрос.Текст + "
										  |	И ХарактеристикиНоменклатуры.Артикул = &ХарактеристикаАртикул";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + "
									  |УПОРЯДОЧИТЬ ПО
									  |	ПолеСортировки";

		Запрос.УстановитьПараметр("ИскатьПоАртикулуХарактеристик", ЗначениеЗаполнено(ХарактеристикаАртикул));
		Запрос.УстановитьПараметр("Артикул", Артикул);
		Запрос.УстановитьПараметр("ХарактеристикаАртикул", ХарактеристикаАртикул);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда

			ЗначениеБылоСопоставлено = Истина;
			Номенклатура = Выборка.Ссылка;

		КонецЕсли;

	КонецЕсли;

	Если Не ЗначениеБылоСопоставлено И НастройкиПоиска.ИскатьПоДополнительномуРеквизиту И (ЗначениеЗаполнено(
		ДополнительныйРеквизит)) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
					   |	ВЫБОР
					   |		КОГДА НоменклатураДополнительныеРеквизиты.Ссылка.Недействителен
					   |			ТОГДА 1
					   |		ИНАЧЕ 0
					   |	КОНЕЦ КАК ПолеСортировки
					   |ИЗ
					   |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
					   |ГДЕ
					   |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
					   |	И НоменклатураДополнительныеРеквизиты.Значение = &Значение
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	ПолеСортировки";
		Запрос.УстановитьПараметр("Свойство", НастройкиПоиска.ДополнительныйРеквизитПоиска);
		Запрос.УстановитьПараметр("Значение", ДополнительныйРеквизит);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда

			ЗначениеБылоСопоставлено = Истина;
			Номенклатура = Выборка.Ссылка;

		КонецЕсли;

	КонецЕсли;

	Если Не ЗначениеБылоСопоставлено И ЗначениеЗаполнено(НоменклатураНаименование)
		И (НастройкиПоиска.ИскатьПоНаименованию Или НастройкиПоиска.ИскатьПоНаименованиюЛевойЧасти) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	Номенклатура.Ссылка,
					   |	ВЫБОР
					   |		КОГДА Номенклатура.Недействителен
					   |			ТОГДА 1
					   |		ИНАЧЕ 0
					   |	КОНЕЦ КАК ПолеСортировки
					   |ИЗ
					   |	Справочник.Номенклатура КАК Номенклатура
					   |ГДЕ
					   |	Номенклатура.Наименование = &Наименование
					   |	И НЕ Номенклатура.ЭтоГруппа
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	ПолеСортировки";
		Запрос.УстановитьПараметр("Наименование", НоменклатураНаименование);
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			СправочникСсылка = Выборка.Ссылка;
		КонецЕсли;

		Если ЗначениеЗаполнено(СправочникСсылка) И Не СправочникСсылка.ЭтоГруппа Тогда

			ЗначениеБылоСопоставлено = Истина;
			Номенклатура = СправочникСсылка;

		ИначеЕсли НастройкиПоиска.ИскатьПоНаименованиюЛевойЧасти Тогда

			НоменклатураНаименованиеЭкранировано = СтрЗаменить(НоменклатураНаименование, "[", "\[");
			НоменклатураНаименованиеЭкранировано = СтрЗаменить(НоменклатураНаименованиеЭкранировано, "]", "\]");

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
						   |	Номенклатура.Ссылка КАК Ссылка,
						   |	ВЫБОР
						   |		КОГДА Номенклатура.Недействителен
						   |			ТОГДА 1
						   |		ИНАЧЕ 0
						   |	КОНЕЦ КАК ПолеСортировки
						   |ИЗ
						   |	Справочник.Номенклатура КАК Номенклатура
						   |ГДЕ
						   |	НЕ Номенклатура.ЭтоГруппа
						   |	И Номенклатура.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""\""
						   |
						   |УПОРЯДОЧИТЬ ПО
						   |	ПолеСортировки";
			Запрос.УстановитьПараметр("Наименование", НоменклатураНаименованиеЭкранировано + "%");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда

				ЗначениеБылоСопоставлено = Истина;
				Номенклатура = Выборка.Ссылка;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Не ЗначениеБылоСопоставлено И ЗначениеЗаполнено(НоменклатураНаименованиеПолное)
		И (НастройкиПоиска.ИскатьПоНаименованиюПолному Или НастройкиПоиска.ИскатьПоНаименованиюПолномуЛевойЧасти) Тогда

		НоменклатураНаименованиеПолноеЭкранировано = СтрЗаменить(НоменклатураНаименованиеПолное, "[", "\[");
		НоменклатураНаименованиеПолноеЭкранировано = СтрЗаменить(НоменклатураНаименованиеПолноеЭкранировано, "]", "\]");

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	Номенклатура.Ссылка КАК Ссылка,
					   |	ВЫБОР
					   |		КОГДА Номенклатура.Недействителен
					   |			ТОГДА 1
					   |		ИНАЧЕ 0
					   |	КОНЕЦ КАК ПолеСортировки
					   |ИЗ
					   |	Справочник.Номенклатура КАК Номенклатура
					   |ГДЕ
					   |	НЕ Номенклатура.ЭтоГруппа
					   |	И %УсловиеСравнения%
					   |УПОРЯДОЧИТЬ ПО
					   |	ПолеСортировки";

		Если НастройкиПоиска.ИскатьПоНаименованиюПолномуЛевойЧасти Тогда
			УсловиеСравнения = "ПОДСТРОКА(Номенклатура.НаименованиеПолное, 1, 1000) ПОДОБНО &НаименованиеПолное";
			Запрос.УстановитьПараметр("НаименованиеПолное", НоменклатураНаименованиеПолноеЭкранировано + "%");
		ИначеЕсли НастройкиПоиска.ИскатьПоНаименованиюПолному Тогда
			УсловиеСравнения = "ПОДСТРОКА(Номенклатура.НаименованиеПолное, 1, 1000) = &НаименованиеПолное";
			Запрос.УстановитьПараметр("НаименованиеПолное", НоменклатураНаименованиеПолноеЭкранировано);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеСравнения%", УсловиеСравнения);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда

			ЗначениеБылоСопоставлено = Истина;
			Номенклатура = Выборка.Ссылка;

		КонецЕсли;

	КонецЕсли;
	
	// Группы для справочника номенклатуры на текущий момент не используется.
	Если ЗначениеЗаполнено(Номенклатура) И Номенклатура.ЭтоГруппа Тогда

		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();

	КонецЕсли;

	Возврат Номенклатура;

КонецФункции

Функция СопоставитьНоменклатуруВсеСовпадения(СтрокаТаблицыФормы, НастройкиПоиска, ИмяПоля = "Номенклатура")

	Номенклатура = СтрокаТаблицыФормы[ИмяПоля];
	Код = ПроверитьРеквизит(СтрокаТаблицыФормы, "Код");
	Штрихкод = ПроверитьРеквизит(СтрокаТаблицыФормы, "Штрихкод");
	Артикул = ПроверитьРеквизит(СтрокаТаблицыФормы, "Артикул");
	ХарактеристикаАртикул = ПроверитьРеквизит(СтрокаТаблицыФормы, "ХарактеристикаАртикул");
	НоменклатураНаименование = ПроверитьРеквизит(СтрокаТаблицыФормы, ИмяПоля + "Наименование");
	НоменклатураНаименованиеПолное = ПроверитьРеквизит(СтрокаТаблицыФормы, ИмяПоля + "НаименованиеПолное");

	Если ЗначениеЗаполнено(НастройкиПоиска.ДополнительныйРеквизитПоиска) Тогда

		ПолеРеквизита = ЗагрузкаДанныхИзВнешнегоИсточника.ПрефиксДополнительногоРеквизитаПоиска()
			+ НастройкиПоиска.ДополнительныйРеквизитПоиска.ИдентификаторДляФормул;
		ДополнительныйРеквизит 			= ПроверитьРеквизит(СтрокаТаблицыФормы, ПолеРеквизита);

	Иначе

		ДополнительныйРеквизит = Неопределено;

	КонецЕсли;

	ЕстьЗаполненныеПоляПоиска = (ЗначениеЗаполнено(Код) И НастройкиПоиска.ИскатьПоКоду) Или (ЗначениеЗаполнено(
		Штрихкод) И НастройкиПоиска.ИскатьПоШтрихкоду) Или (ЗначениеЗаполнено(Артикул)
		И НастройкиПоиска.ИскатьПоАртикулу) Или (ЗначениеЗаполнено(НоменклатураНаименование)
		И (НастройкиПоиска.ИскатьПоНаименованию Или НастройкиПоиска.ИскатьПоНаименованиюЛевойЧасти))
		Или (ЗначениеЗаполнено(НоменклатураНаименованиеПолное) И (НастройкиПоиска.ИскатьПоНаименованиюПолному
		Или НастройкиПоиска.ИскатьПоНаименованиюПолномуЛевойЧасти)) Или (ЗначениеЗаполнено(ДополнительныйРеквизит)
		И НастройкиПоиска.ИскатьПоДополнительномуРеквизиту);

	Если Не ЕстьЗаполненныеПоляПоиска Тогда

		Возврат Справочники.Номенклатура.ПустаяСсылка();

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	НоменклатураСправочник.Ссылка КАК Ссылка,
				   |	ВЫБОР
				   |		КОГДА НоменклатураСправочник.Недействителен
				   |			ТОГДА 1
				   |		ИНАЧЕ 0
				   |	КОНЕЦ КАК ПолеСортировки
				   |ИЗ
				   |	Справочник.Номенклатура КАК НоменклатураСправочник
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
				   |		ПО (&ИскатьПоШтрихкоду)
				   |		И (ШтрихкодыНоменклатуры.Номенклатура = НоменклатураСправочник.Ссылка)
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				   |		ПО (&ИскатьПоАртикулуХарактеристик)
				   |		И (НоменклатураСправочник.ИспользоватьХарактеристики)
				   |		И НоменклатураСправочник.Ссылка = ХарактеристикиНоменклатуры.Владелец
				   |ГДЕ
				   |	НЕ НоменклатураСправочник.ЭтоГруппа";
	Запрос.УстановитьПараметр("ИскатьПоШтрихкоду", НастройкиПоиска.ИскатьПоШтрихкоду);
	Запрос.УстановитьПараметр("ИскатьПоАртикулуХарактеристик", НастройкиПоиска.ИскатьПоАртикулу И ЗначениеЗаполнено(
		ХарактеристикаАртикул));

	Если ЗначениеЗаполнено(Код) И НастройкиПоиска.ИскатьПоКоду Тогда
		Запрос.Текст = Запрос.Текст + "
									  |	И НоменклатураСправочник.Код = &Код";

		Запрос.УстановитьПараметр("Код", Код);
	КонецЕсли;
	Если ЗначениеЗаполнено(Штрихкод) И НастройкиПоиска.ИскатьПоШтрихкоду Тогда
		Запрос.Текст = Запрос.Текст + "
									  |	И ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";

		Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	КонецЕсли;

	Если НастройкиПоиска.ИскатьПоАртикулу Тогда

		Если ЗначениеЗаполнено(Артикул) И ЗначениеЗаполнено(ХарактеристикаАртикул) Тогда
			Запрос.Текст = Запрос.Текст + "
										  |	И (НоменклатураСправочник.Артикул = &Артикул
										  |	ИЛИ ХарактеристикиНоменклатуры.Артикул = &ХарактеристикаАртикул)";
		ИначеЕсли ЗначениеЗаполнено(Артикул) Тогда
			Запрос.Текст = Запрос.Текст + "
										  |	И НоменклатураСправочник.Артикул = &Артикул";
		ИначеЕсли ЗначениеЗаполнено(ХарактеристикаАртикул) Тогда
			Запрос.Текст = Запрос.Текст + "
										  |	И ХарактеристикиНоменклатуры.Артикул = &ХарактеристикаАртикул";
		КонецЕсли;

		Запрос.УстановитьПараметр("Артикул", Артикул);
		Запрос.УстановитьПараметр("ХарактеристикаАртикул", ХарактеристикаАртикул);
	КонецЕсли;

	Если ЗначениеЗаполнено(НоменклатураНаименование) И НастройкиПоиска.ИскатьПоНаименованию Тогда

		Запрос.Текст = Запрос.Текст + "
									  |	И НоменклатураСправочник.Наименование = &Наименование";

		Запрос.УстановитьПараметр("Наименование", НоменклатураНаименование);

	КонецЕсли;

	Если ЗначениеЗаполнено(НоменклатураНаименованиеПолное) И НастройкиПоиска.ИскатьПоНаименованиюПолному Тогда

		Запрос.Текст = Запрос.Текст + "
									  |	И ПОДСТРОКА(НоменклатураСправочник.НаименованиеПолное, 1, 1000) = &НаименованиеПолное";

		Запрос.УстановитьПараметр("НаименованиеПолное", НоменклатураНаименованиеПолное);

	КонецЕсли;

	Если ЗначениеЗаполнено(ДополнительныйРеквизит) И НастройкиПоиска.ИскатьПоДополнительномуРеквизиту Тогда

		Запрос.Текст = Запрос.Текст + "	И НоменклатураСправочник.Ссылка В (ВЫБРАТЬ
									  |		НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка
									  |	ИЗ
									  |		Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
									  |	ГДЕ
									  |		НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
									  |		И НоменклатураДополнительныеРеквизиты.Значение = &Значение)";
		Запрос.УстановитьПараметр("Свойство", НастройкиПоиска.ДополнительныйРеквизитПоиска);
		Запрос.УстановитьПараметр("Значение", ДополнительныйРеквизит);

	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
								  |УПОРЯДОЧИТЬ ПО
								  |	ПолеСортировки";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		Возврат Выборка.Ссылка;

	КонецЕсли;

	Возврат Справочники.Номенклатура.ПустаяСсылка();

КонецФункции

Функция ПолучитьСтруктуруДублирующихСтрок(СтрокаТаблицыФормы, ТаблицаДублирующихСтрок, НастройкиПоиска)
	
	Если НастройкиПоиска.ВариантПоиска = 0 Тогда
		Результат = ПолучитьСтруктуруДублирующихСтрокДоПервогоСовпадения(СтрокаТаблицыФормы, ТаблицаДублирующихСтрок, НастройкиПоиска);
	ИначеЕсли НастройкиПоиска.ВариантПоиска = 1 Тогда
		Результат = ПолучитьСтруктуруДублирующихСтрокВсеСовпадения(СтрокаТаблицыФормы, ТаблицаДублирующихСтрок, НастройкиПоиска);
	КонецЕсли;
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьСтруктуруДублирующихСтрокВсеСовпадения(СтрокаТаблицыФормы, ТаблицаДублирующихСтрок, НастройкиПоиска)
	
	Результат = Новый Структура("ДублирующаяСтрокаНайдена, ИндексПервойСтроки");
	ИндексПервойСтроки = -1;
	
	ПоляПоиска = Новый Структура;
	
	Если НастройкиПоиска.ИскатьПоКоду
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.Код) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы.Код, "Код");
		ПоляПоиска.Вставить("Код", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			ПоляПоиска.Код = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиПоиска.ИскатьПоШтрихкоду
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.Штрихкод) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы.Штрихкод, "Штрихкод");
		ПоляПоиска.Вставить("Штрихкод", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			ПоляПоиска.Штрихкод = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиПоиска.ИскатьПоАртикулу
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.Артикул) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы.Артикул, "Артикул");
		ПоляПоиска.Вставить("Артикул", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			ПоляПоиска.Артикул = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиПоиска.ИскатьПоНаименованию
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименование) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы.НоменклатураНаименование, "НоменклатураНаименование");
		ПоляПоиска.Вставить("НоменклатураНаименование", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			ПоляПоиска.НоменклатураНаименование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиПоиска.ИскатьПоНаименованиюПолному
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное, "НоменклатураНаименованиеПолное");
		ПоляПоиска.Вставить("НоменклатураНаименованиеПолное", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			ПоляПоиска.НоменклатураНаименованиеПолное = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаНайдена = Ложь;
	СтруктураПоиска = Новый Структура;
	Для каждого ПолеПоиска Из ПоляПоиска Цикл
		СтруктураПоиска.Вставить(ПолеПоиска.Ключ, СтрокаТаблицыФормы[ПолеПоиска.Ключ]);
	КонецЦикла;
	Если СтруктураПоиска.Количество() > 0 Тогда
		НайденныеСтроки = ТаблицаДублирующихСтрок.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			ИндексПервойСтроки = ТаблицаДублирующихСтрок.Индекс(НайденнаяСтрока); 
			СтрокаНайдена = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	Результат.ДублирующаяСтрокаНайдена = СтрокаНайдена;
	Результат.ИндексПервойСтроки = ИндексПервойСтроки;
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруДублирующихСтрокДоПервогоСовпадения(СтрокаТаблицыФормы, ТаблицаДублирующихСтрок, НастройкиПоиска)
	
	Результат = Новый Структура("ДублирующаяСтрокаНайдена, ИндексПервойСтроки");
	СтрокаНайдена = Ложь;
	ИндексПервойСтроки = -1;
	ИмяПоляНаименование = "НоменклатураНаименование";
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, ИмяПоляНаименование) Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "Наименование") Тогда
			ИмяПоляНаименование = "Наименование";
		КонецЕсли;
	КонецЕсли;
	ИмяПоляНаименованиеПолное = "НоменклатураНаименованиеПолное";
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, ИмяПоляНаименованиеПолное) Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "НаименованиеПолное") Тогда
			ИмяПоляНаименованиеПолное = "НаименованиеПолное";
		КонецЕсли;
	КонецЕсли;
	ИмяПоляКод = "Код";
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, ИмяПоляКод) Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КодКартыМагнитный") Тогда
			ИмяПоляКод = "КодКартыМагнитный";
		КонецЕсли;
	КонецЕсли;
	ИмяПоляШтрихКод = "Штрихкод";
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, ИмяПоляШтрихКод) Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыФормы, "КодКартыШтрихкод") Тогда
			ИмяПоляШтрихКод = "КодКартыШтрихкод";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаНайдена 
		И НастройкиПоиска.ИскатьПоКоду
		И ЗначениеЗаполнено(СтрокаТаблицыФормы[ИмяПоляКод]) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы[ИмяПоляКод], ИмяПоляКод);
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаНайдена = Истина;
			ИндексПервойСтроки = ТаблицаДублирующихСтрок.Индекс(НайденнаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СтрокаНайдена 
		И НастройкиПоиска.ИскатьПоШтрихкоду
		И ЗначениеЗаполнено(СтрокаТаблицыФормы[ИмяПоляШтрихКод]) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы[ИмяПоляШтрихКод], ИмяПоляШтрихКод);
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаНайдена = Истина;
			ИндексПервойСтроки = ТаблицаДублирующихСтрок.Индекс(НайденнаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СтрокаНайдена 
		И НастройкиПоиска.ИскатьПоАртикулу
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.Артикул) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы.Артикул, "Артикул");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаНайдена = Истина;
			ИндексПервойСтроки = ТаблицаДублирующихСтрок.Индекс(НайденнаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаНайдена 
		И НастройкиПоиска.ИскатьПоНаименованию
		И ЗначениеЗаполнено(СтрокаТаблицыФормы[ИмяПоляНаименование]) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы[ИмяПоляНаименование], ИмяПоляНаименование);
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаНайдена = Истина;
			ИндексПервойСтроки = ТаблицаДублирующихСтрок.Индекс(НайденнаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаНайдена 
		И НастройкиПоиска.ИскатьПоНаименованиюПолному
		И ЗначениеЗаполнено(СтрокаТаблицыФормы[ИмяПоляНаименованиеПолное]) Тогда
		НайденнаяСтрока = ТаблицаДублирующихСтрок.Найти(СтрокаТаблицыФормы[ИмяПоляНаименованиеПолное], ИмяПоляНаименованиеПолное);
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаНайдена = Истина;
			ИндексПервойСтроки = ТаблицаДублирующихСтрок.Индекс(НайденнаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Результат.ДублирующаяСтрокаНайдена = СтрокаНайдена;
	Результат.ИндексПервойСтроки = ИндексПервойСтроки;
	Возврат Результат;
	
КонецФункции

#КонецОбласти 
