
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет полную синхронизацию учетной записи по указанным почтовым ящикам:
//  - загрузка новых сообщений в почтовых ящиках
//  - получение состава сообщений почтового ящика
//  - обмен флагами сообщений между почтовым сервером и почтовым клиентом
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//
Функция СинхронизироватьСодержимоеПочтовыхЯщиков(УчетнаяЗапись, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Профиль = НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль, ПротоколИнтернетПочтыIMAP(УчетнаяЗапись));
	
	ЗагруженныеСообщения = Новый ТаблицаЗначений;
	ЗагруженныеСообщения.Колонки.Добавить("ИнтернетПочтовоеСообщение");
	ЗагруженныеСообщения.Колонки.Добавить("ПочтовыйЯщик");
	ЗагруженныеСообщения.Колонки.Добавить("ФлагиСообщения");
	ЗагруженныеСообщения.Колонки.Добавить("СодержаниеПолучено");
	
	Результат = Новый Структура;
	Результат.Вставить("ЗагруженныеСообщения", ЗагруженныеСообщения);
	Результат.Вставить("ФлагиСообщений", Новый Соответствие);
	
	Попытка
		ПочтовыеЯщики = Соединение.ПолучитьПочтовыеЯщики();
		ОписаниеПочтовыхЯщиков = НовыйОписаниеПочтовыхЯщиков(УчетнаяЗапись, ПочтовыеЯщики);
		РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПриПолученииНастроекПочтовыхЯщиков(УчетнаяЗапись, ОписаниеПочтовыхЯщиков, ДополнительныеПараметры);
		
		Для каждого ОписаниеПочтовогоЯщика Из ОписаниеПочтовыхЯщиков Цикл
			Если Не ОписаниеПочтовогоЯщика.Синхронизировать Тогда
				Продолжить;
			КонецЕсли;
			
			Соединение.ТекущийПочтовыйЯщик = ОписаниеПочтовогоЯщика.ПочтовыйЯщик;
			
			// 1. Переместить в почтовый ящик на почтовом сервере письма, перемещенные из ящика в ящик на стороне 1С.
			МассивыИдентификаторов = Новый Соответствие;
			РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПриПеремещенииПисемВПочтовыйЯщик(УчетнаяЗапись, ОписаниеПочтовогоЯщика, МассивыИдентификаторов, ДополнительныеПараметры);
			Для каждого КлючЗначение Из МассивыИдентификаторов Цикл
				Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив") И КлючЗначение.Значение.Количество() <> 0 Тогда
					Соединение.ПереместитьВПочтовыйЯщик(КлючЗначение.Значение, КлючЗначение.Ключ);
				КонецЕсли;
			КонецЦикла;
			РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПослеПеремещенияПисемВПочтовыйЯщик(УчетнаяЗапись, ОписаниеПочтовогоЯщика, МассивыИдентификаторов, ДополнительныеПараметры);
			
			// 2.1. Выгрузить изменения флагов сообщений на стороне 1С.
			ФлагиСообщений = Новый Соответствие;
			РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПриУстановкеФлаговСообщенийПочтовогоЯщика(УчетнаяЗапись,
				ОписаниеПочтовогоЯщика, ФлагиСообщений, ДополнительныеПараметры);
			Если ТипЗнч(ФлагиСообщений) = Тип("Соответствие") И ФлагиСообщений.Количество() <> 0 Тогда
				Соединение.УстановитьФлагиСообщений(ФлагиСообщений);
				РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПослеУстановкиФлаговСообщенийПочтовогоЯщика(УчетнаяЗапись,
					ОписаниеПочтовогоЯщика, ФлагиСообщений, ДополнительныеПараметры);
			КонецЕсли;
			
			// 2.2 Выгрузить изменения флага Прочитанное на стороне 1С методом Выбрать (устаревший, для совместимости).
			ФлагиСообщений = Новый Соответствие;
			РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПриУстановкеФлаговСообщенийПочтовогоЯщикаМетодомВыбрать(УчетнаяЗапись,
				ОписаниеПочтовогоЯщика, ФлагиСообщений, ДополнительныеПараметры);
			Если ТипЗнч(ФлагиСообщений) = Тип("Соответствие") И ФлагиСообщений.Количество() <> 0 Тогда
				МассивИдентификаторов = Новый Массив;
				Для каждого ФлагСообщения Из ФлагиСообщений Цикл
					Если ФлагСообщения.Значение.Прочитанное Тогда
						МассивИдентификаторов.Добавить(ФлагСообщения.Ключ);
					КонецЕсли;
				КонецЦикла;
				Если МассивИдентификаторов.Количество() <> 0 Тогда
					Соединение.Выбрать(Ложь, МассивИдентификаторов, Истина);
				КонецЕсли;
			КонецЕсли;
			
			// 3. Загрузить изменения флагов сообщений на стороне почтового сервера.
			МассивИдентификаторовСообщений = Новый Массив;
			РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПриПолученииФлаговСообщенийНаПочтовомСервере(УчетнаяЗапись,
				ОписаниеПочтовогоЯщика, МассивИдентификаторовСообщений, ДополнительныеПараметры);
			Если ТипЗнч(МассивИдентификаторовСообщений) = Тип("Массив") И МассивИдентификаторовСообщений.Количество() <> 0 Тогда
				ФлагиСообщений = Соединение.ПолучитьФлагиСообщений(МассивИдентификаторовСообщений);
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.ФлагиСообщений, ФлагиСообщений);
				РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПослеПолученияФлаговСообщенийНаПочтовомСервере(УчетнаяЗапись,
					ОписаниеПочтовогоЯщика, МассивИдентификаторовСообщений, ДополнительныеПараметры);
			КонецЕсли;
			
			// 4. Определить идентификаторы новых писем в почтовом ящике.
			ИспользоватьРанееПолученныеИдентификаторы = ТипЗнч(ОписаниеПочтовогоЯщика.РанееПолученныеИдентификаторы) = Тип("Массив")
				И ОписаниеПочтовогоЯщика.РанееПолученныеИдентификаторы.Количество() <> 0;
			ИспользоватьПараметрыОтбораIMAP = ТипЗнч(ОписаниеПочтовогоЯщика.ПараметрыОтбораIMAP) = Тип("Структура")
				И ОписаниеПочтовогоЯщика.ПараметрыОтбораIMAP.Количество() <> 0;
			Если ИспользоватьРанееПолученныеИдентификаторы И ИспользоватьПараметрыОтбораIMAP Тогда
				ИдентификаторыПисемДляЗагрузки = Соединение.ПолучитьИдентификаторы(ОписаниеПочтовогоЯщика.РанееПолученныеИдентификаторы, ОписаниеПочтовогоЯщика.ПараметрыОтбораIMAP);
			ИначеЕсли ИспользоватьРанееПолученныеИдентификаторы И Не ИспользоватьПараметрыОтбораIMAP Тогда
				ИдентификаторыПисемДляЗагрузки = Соединение.ПолучитьИдентификаторы(ОписаниеПочтовогоЯщика.РанееПолученныеИдентификаторы);
			ИначеЕсли Не ИспользоватьРанееПолученныеИдентификаторы И ИспользоватьПараметрыОтбораIMAP Тогда
				ИдентификаторыПисемДляЗагрузки = Соединение.ПолучитьИдентификаторы(, ОписаниеПочтовогоЯщика.ПараметрыОтбораIMAP);
			Иначе
				ИдентификаторыПисемДляЗагрузки = Соединение.ПолучитьИдентификаторы();
			КонецЕсли;
			
			Если ИдентификаторыПисемДляЗагрузки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Если загружаемых сообщений много, то загружать только заголовки.
			Если ИдентификаторыПисемДляЗагрузки.Количество() > 200 Тогда
				
				Если ИспользоватьПараметрыОтбораIMAP Тогда
					НовыеСообщения = Соединение.ПолучитьЗаголовки(ОписаниеПочтовогоЯщика.ПараметрыОтбораIMAP);
				Иначе
					НовыеСообщения = Соединение.ПолучитьЗаголовки();
				КонецЕсли;
				
				СодержаниеПолучено = Ложь;
				
			Иначе
				
				ПараметрыЗагрузки = Новый Структура;
				ПараметрыЗагрузки.Вставить("ЗаголовкиИдентификаторы", ИдентификаторыПисемДляЗагрузки);
				ПараметрыЗагрузки.Вставить("ПриводитьСообщенияКТипу", Ложь);
				ПараметрыЗагрузки.Вставить("ОтмечатьКакПрочтенные", Ложь);
				НовыеСообщения = ЗагрузитьСообщения(УчетнаяЗапись, Соединение, ПараметрыЗагрузки);
				
				СодержаниеПолучено = Истина;
				
			КонецЕсли;
			
			ИдентификаторыНовыхСообщений = ИдентификаторыСообщений(НовыеСообщения);
			
			// 5. Загрузить флаги новых загружаемых сообщений.
			ФлагиСообщений = ПолучитьФлагиСообщенийПорционно(Соединение, ИдентификаторыНовыхСообщений);
			Для каждого Сообщение Из НовыеСообщения Цикл
				ФлагиСообщения = Неопределено;
				Для каждого Идентификатор Из Сообщение.Идентификатор Цикл
					ФлагиСообщения = ФлагиСообщений.Получить(Идентификатор);
					Если ФлагиСообщения <> Неопределено Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				НоваяСтрока = Результат.ЗагруженныеСообщения.Добавить();
				НоваяСтрока.ИнтернетПочтовоеСообщение = Сообщение;
				НоваяСтрока.ПочтовыйЯщик = ОписаниеПочтовогоЯщика.ПочтовыйЯщик;
				НоваяСтрока.ФлагиСообщения = ФлагиСообщения;
				НоваяСтрока.СодержаниеПолучено = СодержаниеПолучено;
			КонецЦикла;
			
		КонецЦикла;
		
		РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПослеУстановкиФлаговСообщенийНаПочтовомСервере(УчетнаяЗапись, ОписаниеПочтовогоЯщика, МассивыИдентификаторов, ДополнительныеПараметры);
		
		Соединение.Отключиться();
	Исключение
		Попытка
			Соединение.Отключиться();
		Исключение // АПК:280
			// Обработка и журналирование исключения не требуется, т.к. 
			// в вызывающий код передается исходное исключение, которое будет там обработано.
		КонецПопытки;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьПеремещениеПисемВПочтовыхЯщиках(УчетнаяЗапись, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Профиль = НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль, ПротоколИнтернетПочтыIMAP(УчетнаяЗапись));
	
	Попытка
		ПочтовыеЯщики = Соединение.ПолучитьПочтовыеЯщики();
		ОписаниеПочтовыхЯщиков = НовыйОписаниеПочтовыхЯщиков(УчетнаяЗапись, ПочтовыеЯщики);
		РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПриПолученииНастроекПочтовыхЯщиков(УчетнаяЗапись, ОписаниеПочтовыхЯщиков, ДополнительныеПараметры);
		
		Для каждого ОписаниеПочтовогоЯщика Из ОписаниеПочтовыхЯщиков Цикл
			Если Не ОписаниеПочтовогоЯщика.Синхронизировать Тогда
				Продолжить;
			КонецЕсли;
			
			Соединение.ТекущийПочтовыйЯщик = ОписаниеПочтовогоЯщика.ПочтовыйЯщик;
			
			// 0. Переместить в почтовый ящик на почтовом сервере письма, перемещенные из ящика в ящик на стороне 1С.
			МассивыИдентификаторов = Новый Соответствие;
			РаботаСПочтовымиСообщениямиУНФПереопределяемый.ПриПеремещенииПисемВПочтовыйЯщик(УчетнаяЗапись, ОписаниеПочтовогоЯщика, МассивыИдентификаторов, ДополнительныеПараметры);
			Для каждого КлючЗначение Из МассивыИдентификаторов Цикл
				Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив") И КлючЗначение.Значение.Количество() <> 0 Тогда
					Соединение.ПереместитьВПочтовыйЯщик(КлючЗначение.Значение, КлючЗначение.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
			
		Соединение.Отключиться();
	Исключение
		Попытка
			Соединение.Отключиться();
		Исключение // АПК:280
			// Обработка и журналирование исключения не требуется, т.к. 
			// в вызывающий код передается исходное исключение, которое будет там обработано.
		КонецПопытки;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ОтправитьПочтовоеСообщение(Знач ПараметрыПисьма, Знач УчетнаяЗапись) Экспорт
	
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")
		Или НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр("ru = 'Учетная запись не заполнена или заполнена неправильно.'");
	КонецЕсли;
	
	ОбработатьПараметрыПисьма(ПараметрыПисьма, УчетнаяЗапись);
	
	Результат = Новый Структура("Идентификатор, ИдентификаторыСообщений", "", Новый Массив);
	
	Если ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(УчетнаяЗапись) Тогда
		
		ВызватьИсключение ТекстТребуетсяАвторизация();
		
	Иначе
		
		ИнтернетПочтовоеСообщение = НовоеИнтернетПочтовоеСообщение(ПараметрыПисьма);
		Профиль = НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись, Ложь);
		
		Соединение = Новый ИнтернетПочта;
		
		ПомещатьОтправляемоеСообщениеНаСерверIMAP = РегистрыСведений.УчетныеЗаписиПользователя.ПомещатьОтправляемоеСообщениеНаСерверIMAP(
		УчетнаяЗапись);
		
		Если ПомещатьОтправляемоеСообщениеНаСерверIMAP Тогда
			Соединение.Подключиться(Профиль, ПротоколИнтернетПочтыIMAP(УчетнаяЗапись));
		Иначе
			Соединение.Подключиться(Профиль);
		КонецЕсли;
		
		ОбрабатыватьТекстСообщения = ОбрабатыватьТекстСообщения(ПараметрыПисьма);
		
		Попытка
			Соединение.Послать(ИнтернетПочтовоеСообщение, ОбрабатыватьТекстСообщения);
		Исключение
			
			// Временный обход ошибки платформы 10234239
			
			ЗаписьЖурналаРегистрации("ОтправитьПочтовоеСообщение", УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Соединение.Послать(ИнтернетПочтовоеСообщение, ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать);
		КонецПопытки;
		
		
		Результат.ИдентификаторыСообщений.Добавить(ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
		
		Если ПомещатьОтправляемоеСообщениеНаСерверIMAP Тогда
			ПеренестиИдентификаторСообщенияВПолеReferences(ИнтернетПочтовоеСообщение);
			ПоместитьПочтовоеСообщениеВОтправленныеIMAP(ИнтернетПочтовоеСообщение, ОбрабатыватьТекстСообщения, Соединение, Результат, УчетнаяЗапись);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.Идентификатор) Тогда
			Результат.Идентификатор = ИнтернетПочтовоеСообщение.ИдентификаторСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(Результат);
	
КонецФункции

// Метод для создания нового объекта ИнтернетПочтовоеСообщение
// в соответствии с переданными параметрами письма.
//
// Параметры:
//  ПараметрыПисьма	 - Структура - см. описание РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение().
// 
// Возвращаемое значение:
//  ИнтернетПочтовоеСообщение - созданный объект.
//
Функция НовоеИнтернетПочтовоеСообщение(Знач ПараметрыПисьма) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство структуры ПараметрыПисьма.
	// Переменные содержат значения переданных в функцию параметров.
	Перем Кому, Тема, Тело, Вложения, ИмяОтправителя, АдресОтправителя, АдресОтвета, ТипТекста, Копии, СлепыеКопии;
	
	Если Не ПараметрыПисьма.Свойство("Тема", Тема) Тогда
		Тема = "";
	КонецЕсли;
	
	Если Не ПараметрыПисьма.Свойство("Тело", Тело) Тогда
		Тело = "";
	КонецЕсли;
	
	Кому = ПараметрыПисьма.Кому;
	
	Если ТипЗнч(Кому) = Тип("Строка") Тогда
		Кому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Кому);
	КонецЕсли;
	
	ПараметрыПисьма.Свойство("Вложения", Вложения);
	
	Результат = Новый ИнтернетПочтовоеСообщение;
	Результат.Тема = Тема;
	
	// Формируем адрес получателя.
	Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
		Получатель = Результат.Получатели.Добавить(ПочтовыйАдресПолучателя.Адрес);
		Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателя.Представление;
	КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		// Формируем адрес получателя поля Копии.
		Для Каждого ПочтовыйАдресПолучателяКопии Из Копии Цикл
			Получатель = Результат.Копии.Добавить(ПочтовыйАдресПолучателяКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		// Формируем адрес получателя поля СлепыеКопии.
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Результат.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СкрытыеКопии", СлепыеКопии) Тогда
		// Формируем адрес получателя поля СлепыеКопии.
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Результат.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем адрес ответа, если необходимо.
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		Для Каждого ПочтовыйАдресОтвета Из АдресОтвета Цикл
			ПочтовыйАдресОбратный = Результат.ОбратныйАдрес.Добавить(ПочтовыйАдресОтвета.Адрес);
			ПочтовыйАдресОбратный.ОтображаемоеИмя = ПочтовыйАдресОтвета.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("ИмяОтправителя", ИмяОтправителя) Тогда
		Результат.ИмяОтправителя = ИмяОтправителя;
		Результат.Отправитель.ОтображаемоеИмя = ИмяОтправителя;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("АдресОтправителя", АдресОтправителя) Тогда
		Результат.Отправитель.Адрес = АдресОтправителя;
	КонецЕсли;
	
	// Добавляем вложения к письму.
	Если Вложения <> Неопределено Тогда
		Для Каждого Вложение Из Вложения Цикл
			Если ТипЗнч(Вложение) = Тип("Структура") Тогда
				НовоеВложение = Результат.Вложения.Добавить(
					ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище),
					Вложение.Представление);
				Если Вложение.Свойство("Кодировка") И Не ПустаяСтрока(Вложение.Кодировка) Тогда
					НовоеВложение.Кодировка = Вложение.Кодировка;
				КонецЕсли;
				Если Вложение.Свойство("Идентификатор") Тогда
					НовоеВложение.Идентификатор = Вложение.Идентификатор;
				КонецЕсли;
			Иначе // Поддержка обратной совместимости с 2.2.1.
				Если ТипЗнч(Вложение.Значение) = Тип("Структура") Тогда
					Попытка
						НовоеВложение = Результат.Вложения.Добавить(Вложение.Значение.ДвоичныеДанные, Вложение.Ключ);
						НовоеВложение.Идентификатор = Вложение.Значение.Идентификатор;
						Если Вложение.Значение.Свойство("Кодировка") Тогда
							НовоеВложение.Кодировка = Вложение.Значение.Кодировка;
						КонецЕсли;
						Если ТипЗнч(Вложение.Значение.ДвоичныеДанные) = Тип("ИнтернетПочтовоеСообщение")
							Или СтрНайти(Вложение.Ключ, ".eml") > 0 Тогда
							НовоеВложение.ТипСодержимого = "message/rfc822";
						КонецЕсли
					Исключение
						// Поддержка обратной совместимости
					КонецПопытки;
				Иначе
					Результат.Вложения.Добавить(Вложение.Значение, Вложение.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("ИдентификаторОснования") Тогда
		Результат.УстановитьПолеЗаголовка(
		"In-Reply-To",
		ПараметрыПисьма.ИдентификаторОснования,
		СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
	КонецЕсли;
	
	// Установим строку с идентификаторами оснований.
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований") Тогда
		Результат.УстановитьПолеЗаголовка(
		"References",
		ПараметрыПисьма.ИдентификаторыОснований,
		СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("Заголовки") 
		И ТипЗнч(ПараметрыПисьма.Заголовки) = Тип("Соответствие") Тогда
		Для Каждого ТекЗаголовок Из ПараметрыПисьма.Заголовки Цикл
			Результат.УстановитьПолеЗаголовка(
			ТекЗаголовок.Ключ,
			ТекЗаголовок.Значение,
			СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
		КонецЦикла;
	КонецЕсли;
	
	// добавляем текст
	Текст = Результат.Тексты.Добавить(Тело);
	Если ПараметрыПисьма.Свойство("ТипТекста", ТипТекста) Тогда
		Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
			Если      ТипТекста = "HTML" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = "RichText" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
			Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
				  ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		Иначе
			Текст.ТипТекста = ТипТекста;
		КонецЕсли;
	Иначе
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;

	// Зададим важность
	Важность = Неопределено;
	Если ПараметрыПисьма.Свойство("Важность", Важность) Тогда
		Результат.Важность = Важность;
	КонецЕсли;
	
	// Зададим кодировку
	Кодировка = Неопределено;
	Если ПараметрыПисьма.Свойство("Кодировка", Кодировка) Тогда
		Результат.Кодировка = Кодировка;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("УведомитьОДоставке")
		И ЗначениеЗаполнено(АдресОтправителя) Тогда
		Результат.УведомитьОДоставке = ПараметрыПисьма.УведомитьОДоставке;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("УведомитьОПрочтении")
		И ЗначениеЗаполнено(АдресОтправителя) Тогда
		Результат.УведомитьОПрочтении = ПараметрыПисьма.УведомитьОПрочтении;
		Результат.АдресаУведомленияОПрочтении.Добавить(АдресОтправителя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает профиль переданной учетной записи для подключения к почтовому серверу.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
// Возвращаемое значение:
//  ИнтернетПочтовыйПрофиль - профиль учетной записи;
//  Неопределено - не удалось получить учетную запись по ссылке.
//
Функция НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПрофильИсходящейПочты = Неопределено;
	ПрофильВходящейПочты = Неопределено;

	УстановитьОтключениеБезопасногоРежима(Истина);
	ПрофильВходящейПочты = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения);
	УстановитьОтключениеБезопасногоРежима(Ложь);

	Возврат ПрофильВходящейПочты;
	
КонецФункции

Процедура ЗагрузитьСодержаниеСообщенияИнтернетПочты(Идентификатор, ВходящееИсходящееСобытие, УчетнаяЗапись, АдресХранилища) Экспорт
	
	Профиль = НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль, ПротоколИнтернетПочтыIMAP(УчетнаяЗапись));
	
	Для Каждого ТекНастройка Из НастройкиЗагрузкиПисем(УчетнаяЗапись, Соединение) Цикл
		Если Не ЗначениеЗаполнено(ТекНастройка.ВариантЗагрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекНастройка.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.НеЗагружать Тогда
			Продолжить;
		КонецЕсли;
		
		Соединение.ТекущийПочтовыйЯщик = ТекНастройка.ПочтоваяПапка;
		
		ИнтернетПочтовыеСообщения = Соединение.Выбрать(Ложь, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор), Ложь);
		Если ЗначениеЗаполнено(ИнтернетПочтовыеСообщения) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСобытия = Документы.Событие.НовыеДанныеСобытия();
	
	Для Каждого ТекИнтернетПочтовоеСообщение Из ИнтернетПочтовыеСообщения Цикл
		Для Каждого ТекИдентификатор Из ТекИнтернетПочтовоеСообщение.Идентификатор Цикл
			Документы.Событие.ЗаполнитьТекстыИзПочтовогоСообщения(ДанныеСобытия, ТекИнтернетПочтовоеСообщение);
			Документы.Событие.ЗаполнитьВложенияИзПочтовогоСообщения(ДанныеСобытия, ТекИнтернетПочтовоеСообщение);
		КонецЦикла;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеСобытия, АдресХранилища);
	
КонецПроцедуры

Функция ПочтовыеЯщикиСервера(УчетнаяЗапись) Экспорт
	
	ПочтовыеПапкиСервера = Новый Структура;
	ПочтовыеПапкиСервера.Вставить("СимволРазделитель", "/");
	ПочтовыеПапкиСервера.Вставить("ПочтовыеЯщики", Новый Массив);
	
	Профиль = НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль, ПротоколИнтернетПочтыIMAP(УчетнаяЗапись));
	
	ПочтовыеПапкиСервера.ПочтовыеЯщики = Соединение.ПолучитьПочтовыеЯщики();
	Попытка
		ПочтовыеПапкиСервера.СимволРазделитель = Соединение.СимволРазделитель;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ЭлектроннаяПочтаУНФ.ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,, УчетнаяЗапись, ТекстОшибки);
		ПочтовыеПапкиСервера.СимволРазделитель = "/";
	КонецПопытки;
	
	Возврат ПочтовыеПапкиСервера;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НаследованиеБСП

// См. РаботаСПочтовымиСообщениямиСлужебный.ЗагрузитьСообщения
// Параметры:
//  УчетнаяЗапись - см. РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения.УчетнаяЗапись
//  ПараметрыЗагрузки - см. РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения.ПараметрыЗагрузки
//
// Возвращаемое значение:
//   см. РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения
//
Функция ЗагрузитьСообщения(Знач УчетнаяЗапись, Соединение, Знач ПараметрыЗагрузки = Неопределено)
	
	// Используется для проверки возможности входа на почтовый ящик.
	Перем РежимТестирования;
	
	// Получать только заголовки писем.
	Перем ПолучениеЗаголовков;
	
	// Приводить почтовые сообщения к простому типу;
	Перем ПриводитьСообщенияКТипу;
	
	// Заголовки или идентификаторы писем, полные сообщения по которым требуется получить.
	Перем ЗаголовкиИдентификаторы;
	
	Если ПараметрыЗагрузки.Свойство("РежимТестирования") Тогда
		РежимТестирования = ПараметрыЗагрузки.РежимТестирования;
	Иначе
		РежимТестирования = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ПолучениеЗаголовков") Тогда
		ПолучениеЗаголовков = ПараметрыЗагрузки.ПолучениеЗаголовков;
	Иначе
		ПолучениеЗаголовков = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ОтмечатьКакПрочтенные") Тогда
		ОтмечатьКакПрочтенные = ПараметрыЗагрузки.ОтмечатьКакПрочтенные;
	Иначе
		ОтмечатьКакПрочтенные = Истина;
	КонецЕсли;
	
	//УстановитьОтключениеБезопасногоРежима(Истина);
	//Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
	//УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Если ПараметрыЗагрузки.Свойство("ЗаголовкиИдентификаторы") Тогда
		ЗаголовкиИдентификаторы = ПараметрыЗагрузки.ЗаголовкиИдентификаторы;
	Иначе
		ЗаголовкиИдентификаторы = Новый Массив;
	КонецЕсли;
	
	НаборСообщенийДляУдаления = Новый Массив;
	
	//Протокол = ПротоколИнтернетПочты.POP3;
	//Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ПротоколВходящейПочты") = "IMAP" Тогда
	//	Протокол = ПротоколИнтернетПочты.IMAP;
	//КонецЕсли;
	//
	УстановитьОтключениеБезопасногоРежима(Истина);
	//Соединение = Новый ИнтернетПочта;
	//Соединение.Подключиться(Профиль, Протокол);
	Попытка
		Если ПолучениеЗаголовков Тогда
			НаборПисем = Соединение.ПолучитьЗаголовки();
		ИначеЕсли Не РежимТестирования Тогда
			НастройкиТранспорта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ПротоколВходящейПочты,ОставлятьКопииСообщенийНаСервере,ПериодХраненияСообщенийНаСервере");
			Если НастройкиТранспорта.ПротоколВходящейПочты = "IMAP" Тогда
				НастройкиТранспорта.ОставлятьКопииСообщенийНаСервере = Истина;
				НастройкиТранспорта.ПериодХраненияСообщенийНаСервере = 0;
			КонецЕсли;
			
			Если НастройкиТранспорта.ОставлятьКопииСообщенийНаСервере Тогда
				Если ЗаголовкиИдентификаторы.Количество() = 0 И НастройкиТранспорта.ПериодХраненияСообщенийНаСервере > 0 Тогда
					Заголовки = Соединение.ПолучитьЗаголовки();
					НаборСообщенийДляУдаления = Новый Массив;
					Для Каждого ЭлементЗаголовок Из Заголовки Цикл
						ТекущаяДата = ТекущаяДатаСеанса();
						РазницаДат = (ТекущаяДата - ЭлементЗаголовок.ДатаОтправления) / (3600*24);
						Если РазницаДат >= НастройкиТранспорта.ПериодХраненияСообщенийНаСервере Тогда
							НаборСообщенийДляУдаления.Добавить(ЭлементЗаголовок);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				АвтоматическиУдалятьСообщенияПриВыбореССервера = Ложь;
			Иначе
				АвтоматическиУдалятьСообщенияПриВыбореССервера = Истина;
			КонецЕсли;
			
			НаборПисем = Соединение.Выбрать(АвтоматическиУдалятьСообщенияПриВыбореССервера, ЗаголовкиИдентификаторы, ОтмечатьКакПрочтенные);
			
			Если НаборСообщенийДляУдаления.Количество() > 0 Тогда
				Соединение.УдалитьСообщения(НаборСообщенийДляУдаления);
			КонецЕсли;
		КонецЕсли;
	
		//Соединение.Отключиться();
	Исключение
		//Попытка
		//	Соединение.Отключиться();
		//Исключение // АПК:280
		//	// Обработка и журналирование исключения не требуется, т.к. 
		//	// в вызывающий код передается исходное исключение, которое будет там обработано.
		//КонецПопытки;
		ВызватьИсключение;
	КонецПопытки;
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Если РежимТестирования Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ПриводитьСообщенияКТипу") Тогда
		ПриводитьСообщенияКТипу = ПараметрыЗагрузки.ПриводитьСообщенияКТипу;
	Иначе
		ПриводитьСообщенияКТипу = Истина;
	КонецЕсли;
	
	НаборСообщений = НаборПисем;
	Если ПриводитьСообщенияКТипу Тогда
		Если ПараметрыЗагрузки.Свойство("Колонки") Тогда
			НаборСообщений = АдаптированныйНаборПисем(НаборПисем, ПараметрыЗагрузки.Колонки);
		Иначе
			НаборСообщений = АдаптированныйНаборПисем(НаборПисем);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаборСообщений;
	
КонецФункции

// См. РаботаСПочтовымиСообщениямиСлужебный.АдаптированныйНаборПисем
// Преобразует набор почтовых сообщений в таблицу значений с колонками простых типов.
// Значения колонок, типы которых не поддерживаются на клиенте, преобразуются к строковому виду.
//
Функция АдаптированныйНаборПисем(Знач НаборПисем, Знач Колонки = Неопределено)
	
	Результат = СоздатьАдаптированноеОписаниеПисьма(Колонки);
	
	Для Каждого ПочтовоеСообщение Из НаборПисем Цикл
		НоваяСтрока = Результат.Добавить();
		Для Каждого НаименованиеКолонки Из Колонки Цикл
			ПолеПисьма = ПочтовоеСообщение[НаименованиеКолонки];
			
			Если ТипЗнч(ПолеПисьма) = Тип("Строка") Тогда
				ПолеПисьма = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ПолеПисьма);
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетПочтовыеАдреса") Тогда
				ПолеПисьма = ПредставлениеАдресов(ПолеПисьма);
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетПочтовыйАдрес") Тогда
				ПолеПисьма = ПредставлениеАдреса(ПолеПисьма);
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетПочтовыеВложения") Тогда
				Вложения = Новый Соответствие;
				Для Каждого Вложение Из ПолеПисьма Цикл
					Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
						Вложения.Вставить(Вложение.Имя, Вложение.Данные);
					Иначе
						ЗаполнитьВложенияПоПисьму(Вложения, Вложение.Данные);
					КонецЕсли;
				КонецЦикла;
				ПолеПисьма = Вложения;
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетТекстыПочтовогоСообщения") Тогда
				Тексты = Новый Массив;
				Для Каждого ОчереднойТекст Из ПолеПисьма Цикл
					ОписаниеТекста = Новый Соответствие;
					ОписаниеТекста.Вставить("Данные", ОчереднойТекст.Данные);
					ОписаниеТекста.Вставить("Кодировка", ОчереднойТекст.Кодировка);
					ОписаниеТекста.Вставить("Текст", ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ОчереднойТекст.Текст));
					ОписаниеТекста.Вставить("ТипТекста", Строка(ОчереднойТекст.ТипТекста));
					Тексты.Добавить(ОписаниеТекста);
				КонецЦикла;
				ПолеПисьма = Тексты;
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ВажностьИнтернетПочтовогоСообщения")
				Или ТипЗнч(ПолеПисьма) = Тип("СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения") Тогда
				ПолеПисьма = Строка(ПолеПисьма);
			КонецЕсли;
			
			НоваяСтрока[НаименованиеКолонки] = ПолеПисьма;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// См. РаботаСПочтовымиСообщениямиСлужебный.ПредставлениеАдреса
Функция ПредставлениеАдреса(ИнтернетПочтовыйАдрес)
	Результат = Новый Структура;
	Результат.Вставить("Адрес", ИнтернетПочтовыйАдрес.Адрес);
	Результат.Вставить("Кодировка", ИнтернетПочтовыйАдрес.Кодировка);
	Результат.Вставить("ОтображаемоеИмя", ИнтернетПочтовыйАдрес.ОтображаемоеИмя);
	Результат.Вставить("Сервер", ИнтернетПочтовыйАдрес.Сервер);
	Возврат Результат;
КонецФункции

// См. РаботаСПочтовымиСообщениямиСлужебный.ПредставлениеАдресов
Функция ПредставлениеАдресов(ИнтернетПочтовыеАдреса)
	Результат = Новый Массив;
	Для каждого ИнтернетПочтовыйАдрес Из ИнтернетПочтовыеАдреса Цикл
		Результат.Добавить(ПредставлениеАдреса(ИнтернетПочтовыйАдрес));
	КонецЦикла;
	Возврат Результат;
КонецФункции

// См. РаботаСПочтовымиСообщениямиСлужебный.ЗаполнитьВложенияПоПисьму
Процедура ЗаполнитьВложенияПоПисьму(Вложения, Письмо)
	
	Для Каждого Вложение Из Письмо.Вложения Цикл
		Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
			Вложения.Вставить(Вложение.Имя, Вложение.Данные);
		Иначе
			ЗаполнитьВложенияПоПисьму(Вложения, Вложение.Данные);
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеПисьма = ПредставлениеПисьма(Письмо.Тема, Письмо.ДатаОтправления);
	
	Индекс = 0;
	Для Каждого Текст Из Письмо.Тексты Цикл
		Если Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			Расширение = "html";
		ИначеЕсли Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			Расширение = "txt";
		Иначе
			Расширение = "rtf";
		КонецЕсли;
		ИмяТекстаВложения = "";
		Пока ИмяТекстаВложения = "" Или Вложения.Получить(ИмяТекстаВложения) <> Неопределено Цикл
			Индекс = Индекс + 1;
			ИмяТекстаВложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 - (%2).%3", ПредставлениеПисьма, Индекс, Расширение);
		КонецЦикла;
		Вложения.Вставить(ИмяТекстаВложения, Текст.Данные);
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСПочтовымиСообщениямиСлужебный.ПредставлениеПисьма
//
Функция ПредставлениеПисьма(ТемаПисьма, ДатаПисьма)
	
	ШаблонПредставления = НСтр("ru = '%1 от %2'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		?(ПустаяСтрока(ТемаПисьма), НСтр("ru = '<Без темы>'"), ТемаПисьма),
		Формат(ДатаПисьма, "ДЛФ=D"));
	
КонецФункции

// См. РаботаСПочтовымиСообщениямиСлужебный.СоздатьАдаптированноеОписаниеПисьма
// Функция подготавливает таблицу, в которой впоследствии будут
// храниться сообщения с почтового сервера.
// 
// Параметры:
//   Колонки - Строка - список полей письма, через запятую, которые должны
//                    быть записаны в таблицу. Параметр меняет тип на массив.
// Возвращаемое значение
//   ТаблицаЗначений - пустая таблица значений с колонками.
//
Функция СоздатьАдаптированноеОписаниеПисьма(Колонки = Неопределено)
	
	Если Колонки <> Неопределено
	   И ТипЗнч(Колонки) = Тип("Строка") Тогда
		Колонки = СтрРазделить(Колонки, ",");
		Для Индекс = 0 По Колонки.Количество()-1 Цикл
			Колонки[Индекс] = СокрЛП(Колонки[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	МассивКолонокПоУмолчанию = Новый Массив;
	МассивКолонокПоУмолчанию.Добавить("Важность");
	МассивКолонокПоУмолчанию.Добавить("Вложения");
	МассивКолонокПоУмолчанию.Добавить("ДатаОтправления");
	МассивКолонокПоУмолчанию.Добавить("ДатаПолучения");
	МассивКолонокПоУмолчанию.Добавить("Заголовок");
	МассивКолонокПоУмолчанию.Добавить("ИмяОтправителя");
	МассивКолонокПоУмолчанию.Добавить("Идентификатор");
	МассивКолонокПоУмолчанию.Добавить("ИдентификаторСообщения");
	МассивКолонокПоУмолчанию.Добавить("Копии");
	МассивКолонокПоУмолчанию.Добавить("СлепыеКопии");
	МассивКолонокПоУмолчанию.Добавить("ОбратныйАдрес");
	МассивКолонокПоУмолчанию.Добавить("Отправитель");
	МассивКолонокПоУмолчанию.Добавить("Получатели");
	МассивКолонокПоУмолчанию.Добавить("Размер");
	МассивКолонокПоУмолчанию.Добавить("Тема");
	МассивКолонокПоУмолчанию.Добавить("Тексты");
	МассивКолонокПоУмолчанию.Добавить("Кодировка");
	МассивКолонокПоУмолчанию.Добавить("СпособКодированияНеASCIIСимволов");
	МассивКолонокПоУмолчанию.Добавить("Частичное");
	МассивКолонокПоУмолчанию.Добавить("СмещениеДатыОтправления");
	
	Если Колонки = Неопределено Тогда
		Колонки = МассивКолонокПоУмолчанию;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого НаименованиеКолонки Из Колонки Цикл
		Результат.Колонки.Добавить(НаименованиеКолонки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция НовыйОписаниеПочтовыхЯщиков(УчетнаяЗапись, ПочтовыеЯщики)
	
	ОписаниеПочтовыхЯщиков = Новый Массив;
	Для каждого ПочтовыйЯщик Из ПочтовыеЯщики Цикл
		ОписаниеПочтовыхЯщиков.Добавить(НовыйОписаниеПочтовогоЯщика(УчетнаяЗапись, ПочтовыйЯщик));
	КонецЦикла;
	
	ПочтовыеЯщикиСсылки = Справочники.ПочтовыеЯщикиУчетныхЗаписей.ПочтовыеЯщикиПоИменам(УчетнаяЗапись, ПочтовыеЯщики);
	Для каждого ОписаниеПочтовогоЯщика Из ОписаниеПочтовыхЯщиков Цикл
		ОписаниеПочтовогоЯщика.ПочтовыйЯщикСсылка = ПочтовыеЯщикиСсылки.Получить(ОписаниеПочтовогоЯщика.ПочтовыйЯщик);
	КонецЦикла;
	
	Возврат ОписаниеПочтовыхЯщиков;
	
КонецФункции

Функция НовыйОписаниеПочтовогоЯщика(УчетнаяЗапись = Неопределено, ПочтовыйЯщик = "")
	
	Если УчетнаяЗапись = Неопределено Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Результат.Вставить("ПочтовыйЯщик", ПочтовыйЯщик);
	Результат.Вставить("ПочтовыйЯщикСсылка", ПочтовыйЯщик);
	Результат.Вставить("Синхронизировать", Истина);
	Результат.Вставить("РанееПолученныеИдентификаторы", Неопределено);
	Результат.Вставить("ПараметрыОтбораIMAP", Новый Структура);
	Результат.Вставить("ПолучатьЗаголовки", Ложь);
	Результат.Вставить("ПолучатьФлагиЗагруженныхСообщений", Неопределено);
	Результат.Вставить("ПолучатьФлагиВсехСообщений", Неопределено);
	Результат.Вставить("ИзмененныеФлагиСообщений", Новый Соответствие);
	Результат.Вставить("ДополнительныеПараметры", Новый Структура);
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторыСообщений(ИнтернетПочтовыеСообщения)
	
	Результат = Новый Массив;
	Для каждого ИнтернетПочтовоеСообщение Из ИнтернетПочтовыеСообщения Цикл
		Для каждого Идентификатор Из ИнтернетПочтовоеСообщение.Идентификатор Цикл
			Результат.Добавить(Идентификатор);
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция НастройкиЗагрузкиПисем(Знач УчетнаяЗапись, Знач Соединение)
	
	ПочтовыеЯщикиНаСервереIMAP = Соединение.ПолучитьПочтовыеЯщики();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиЗагрузкиПисем.ПочтоваяПапка КАК ПочтоваяПапка,
	|	НастройкиЗагрузкиПисем.ВариантЗагрузки КАК ВариантЗагрузки,
	|	НастройкиЗагрузкиПисем.ВариантСинхронизации КАК ВариантСинхронизации,
	|	НастройкиЗагрузкиПисем.ВариантСостояния КАК ВариантСостояния,
	|	НастройкиЗагрузкиПисем.ОтветственныйДляНовыхПисем КАК ОтветственныйДляНовыхПисем
	|ИЗ
	|	РегистрСведений.НастройкиЗагрузкиПисем КАК НастройкиЗагрузкиПисем
	|ГДЕ
	|	НастройкиЗагрузкиПисем.УчетнаяЗапись = &УчетнаяЗапись
	|	И НастройкиЗагрузкиПисем.ПочтоваяПапка В(&ПочтовыеЯщикиНаСервереIMAP)
	|	И НастройкиЗагрузкиПисем.ВариантЗагрузки <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиПисем.НеЗагружать)");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ПочтовыеЯщикиНаСервереIMAP", ПочтовыеЯщикиНаСервереIMAP);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НастройкиЗагрузкиПисемПоУмолчанию(ПочтовыеЯщикиНаСервереIMAP);
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция НастройкиЗагрузкиПисемПоУмолчанию(Знач ПочтовыеЯщикиНаСервереIMAP)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПочтоваяПапка", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВариантЗагрузки", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЗагрузкиПисем"));
	Результат.Колонки.Добавить("ВариантСинхронизации", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыСинхронизацииПисем"));
	Результат.Колонки.Добавить("ВариантСостояния", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыСостоянияНовыхПисем"));
	Результат.Колонки.Добавить("ОтветственныйДляНовыхПисем", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	ДобавляемаяНастройка = Результат.Добавить();
	ДобавляемаяНастройка.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.ТолькоЗаголовки;
	ДобавляемаяНастройка.ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать;
	
	Для Каждого ТекПочтовыйЯщик Из ПочтовыеЯщикиНаСервереIMAP Цикл
		Если ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикОтправленные(ТекПочтовыйЯщик) Тогда
			ДобавляемаяНастройка = Результат.Добавить();
			ДобавляемаяНастройка.ПочтоваяПапка = ТекПочтовыйЯщик;
			ДобавляемаяНастройка.ВариантЗагрузки = ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиПисем.ТолькоЗаголовки");
			ДобавляемаяНастройка.ВариантСинхронизации = ПредопределенноеЗначение("Перечисление.ВариантыСинхронизацииПисем.НеСинхронизировать");
			ДобавляемаяНастройка.ВариантСостояния = ПредопределенноеЗначение("Перечисление.ВариантыСостоянияНовыхПисем.ЗапланированоИЗавершено");
			ДобавляемаяНастройка.ОтветственныйДляНовыхПисем = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПротоколИнтернетПочтыIMAP(УчетнаяЗапись)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ПротоколВходящейПочты") = "IMAP" Тогда
		Возврат ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Подключение к серверу входящей почты может быть выполнено только по протоколу IMAP.'");
	
КонецФункции

Функция ТекстТребуетсяАвторизация()
	Возврат НСтр("ru='Требуется настройка авторизации на почтовом сервере.'");
КонецФункции

Процедура ПеренестиИдентификаторСообщенияВПолеReferences(ИнтернетПочтовоеСообщение)
	
	ИдентификаторСообщения = ЭлектроннаяПочтаУНФКлиентСервер.СократитьУгловыеСкобки(ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
	
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентыПоляЗаголовка = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрШаблон("<%1>", ИдентификаторСообщения));
	ИдентификаторыОснований = ИнтернетПочтовоеСообщение.ПолучитьПолеЗаголовка("References", "");
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		КомпонентыПоляЗаголовка.Добавить(ИдентификаторыОснований);
	КонецЕсли;
	
	ИнтернетПочтовоеСообщение.УстановитьПолеЗаголовка(
	"References",
	СтрСоединить(КомпонентыПоляЗаголовка, " "),
	СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
	
КонецПроцедуры

Процедура ПоместитьПочтовоеСообщениеВОтправленныеIMAP(ИнтернетПочтовоеСообщение, ОбрабатыватьТекстСообщения, Соединение, Идентификаторы, УчетнаяЗапись)
	
	ЧислоПопытокУзнатьИдентификаторОтправленногоПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ЧислоПопытокУзнатьИдентификаторОтправленногоПисьма");
	
	Для Каждого ТекЯщик Из Соединение.ПолучитьПочтовыеЯщики() Цикл
		
		Если Не ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикОтправленные(ТекЯщик) Тогда
			Продолжить;
		КонецЕсли;
		
		Соединение.ТекущийПочтовыйЯщик = ТекЯщик;
		
		Для Индекс = 1 По ЧислоПопытокУзнатьИдентификаторОтправленногоПисьма Цикл
			ОтправленноеСообщение = ОтправленноеСообщение(Соединение, ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
			Если ТипЗнч(ОтправленноеСообщение) = Тип("ИнтернетПочтовоеСообщение") Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗнч(ОтправленноеСообщение) = Тип("ИнтернетПочтовоеСообщение") Тогда
			Если ЗначениеЗаполнено(ОтправленноеСообщение.Идентификатор) Тогда
				Идентификаторы.Идентификатор = ОтправленноеСообщение.Идентификатор[0];
			КонецЕсли;
			Идентификаторы.ИдентификаторыСообщений.Добавить(ОтправленноеСообщение.ИдентификаторСообщения);
			Прервать;
		КонецЕсли;
		
		Соединение.Послать(
		ИнтернетПочтовоеСообщение,
		ОбрабатыватьТекстСообщения,
		ПротоколИнтернетПочты.IMAP);
		
		Идентификаторы.Идентификатор = ИнтернетПочтовоеСообщение.ИдентификаторСообщения;
		Идентификаторы.ИдентификаторыСообщений.Добавить(ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправленноеСообщение(Соединение, ИдентификаторСообщения)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Недавние", Истина);
	ИдентификаторыСообщений = Соединение.ПолучитьИдентификаторы(, ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(ИдентификаторыСообщений) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИнтернетПочтовыеСообщения = Соединение.Выбрать(Ложь, ИдентификаторыСообщений, Ложь);
	Для Каждого ТекСообщение Из ИнтернетПочтовыеСообщения Цикл
		Если СтрНайти(ТекСообщение.Заголовок, ИдентификаторСообщения) <> 0 Тогда
			Возврат ТекСообщение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОбработатьПараметрыПисьма(ПараметрыПисьма, УчетнаяЗапись)
	
	Если ПараметрыПисьма = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не заданы параметры отправки.'");
	КонецЕсли;
	
	ТипЗнчКому = ?(ПараметрыПисьма.Свойство("Кому"), ТипЗнч(ПараметрыПисьма.Кому), Неопределено);
	ТипЗнчКопии = ?(ПараметрыПисьма.Свойство("Копии"), ТипЗнч(ПараметрыПисьма.Копии), Неопределено);
	ТипЗнчСлепыеКопии = ?(ПараметрыПисьма.Свойство("СлепыеКопии"), ТипЗнч(ПараметрыПисьма.СлепыеКопии), Неопределено);
	ТипЗнчСкрытыеКопии = ?(ПараметрыПисьма.Свойство("СкрытыеКопии"), ТипЗнч(ПараметрыПисьма.СкрытыеКопии), Неопределено);
	
	Если ТипЗнчКому = Неопределено
		И ТипЗнчКопии = Неопределено
		И ТипЗнчСлепыеКопии = Неопределено
		И ТипЗнчСкрытыеКопии = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указано ни одного получателя.'");
	КонецЕсли;
	
	Если ТипЗнчКому = Тип("Строка") Тогда
		ПараметрыПисьма.Кому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.Кому);
	ИначеЕсли ТипЗнчКому <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("Кому", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчКопии = Тип("Строка") Тогда
		ПараметрыПисьма.Копии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.Копии);
	ИначеЕсли ТипЗнчКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("Копии", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчСлепыеКопии = Тип("Строка") Тогда
		ПараметрыПисьма.СлепыеКопии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.СлепыеКопии);
	ИначеЕсли ТипЗнчСлепыеКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчСкрытыеКопии = Тип("Строка") Тогда
		ПараметрыПисьма.СкрытыеКопии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.СкрытыеКопии);
	ИначеЕсли ТипЗнчСкрытыеКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("СкрытыеКопии", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("АдресОтвета") И ТипЗнч(ПараметрыПисьма.АдресОтвета) = Тип("Строка") Тогда
		ПараметрыПисьма.АдресОтвета = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.АдресОтвета);
	КонецЕсли;
	
	РеквизитыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя,АдресЭлектроннойПочты");
	
	Если ЗначениеЗаполнено(РеквизитыОтправителя.ИмяПользователя)
		И Не ПараметрыПисьма.Свойство("ИмяОтправителя") Тогда
		ПараметрыПисьма.Вставить("ИмяОтправителя", РеквизитыОтправителя.ИмяПользователя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОтправителя.АдресЭлектроннойПочты)
		И Не ПараметрыПисьма.Свойство("АдресОтправителя") Тогда
		ПараметрыПисьма.Вставить("АдресОтправителя", РеквизитыОтправителя.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("Вложения") Тогда
		Если ТипЗнч(ПараметрыПисьма.Вложения) = Тип("Соответствие") Тогда
			Для Каждого Вложение Из ПараметрыПисьма.Вложения Цикл
				Если ТипЗнч(Вложение.Значение) = Тип("Структура") 
					И Вложение.Значение.Свойство("ЭтоПисьмоВложение") Тогда
					ПараметрыПисьма.Вложения.Вставить(Вложение.Ключ, ПривестиВложениеДляВставкиВПисьмо(Вложение.Значение, Вложение.Значение.ЭтоПисьмоВложение));
				Иначе
					ПараметрыПисьма.Вложения.Вставить(Вложение.Ключ, ПривестиВложениеДляВставкиВПисьмо(Вложение.Значение));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбрабатыватьТекстСообщения(ПараметрыПисьма)
	
	Если ПараметрыПисьма.Свойство("ОбрабатыватьТексты") И НЕ ПараметрыПисьма.ОбрабатыватьТексты Тогда
		Возврат ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать;
	Иначе
		Возврат ОбработкаТекстаИнтернетПочтовогоСообщения.Обрабатывать;
	КонецЕсли;
	
КонецФункции

Функция ПривестиВложениеДляВставкиВПисьмо(Вложение, ЭтоПисьмоВложение = Ложь)
	Если ТипЗнч(Вложение) = Тип("Строка") И ЭтоАдресВременногоХранилища(Вложение) Тогда
		Возврат ПривестиВложениеДляВставкиВПисьмо(ПолучитьИзВременногоХранилища(Вложение));
		
	ИначеЕсли ТипЗнч(Вложение) = Тип("Картинка") Тогда
		Возврат Вложение.ПолучитьДвоичныеДанные();
		
	ИначеЕсли ТипЗнч(Вложение) = Тип("Файл") И Вложение.Существует() И Вложение.ЭтоФайл() Тогда
		Возврат Новый ДвоичныеДанные(Вложение.ПолноеИмя);
		
	Иначе
		Если ЭтоПисьмоВложение Тогда
			ИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
			ИнтернетПочтовоеСообщение.УстановитьИсходныеДанные(Вложение.ДвоичныеДанные);
			Если ИнтернетПочтовоеСообщение.Тексты[0].ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
				ИнтернетПочтовоеСообщение.Тексты.Удалить(0);
			КонецЕсли;
			Если ИнтернетПочтовоеСообщение.Тексты[0].ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
				ИнтернетПочтовоеСообщение.Тексты[0].Текст = "<!DOCTYPE html>" + ИнтернетПочтовоеСообщение.Тексты[0].Текст;
			КонецЕсли;
			Вложение.ДвоичныеДанные = ИнтернетПочтовоеСообщение;
		КонецЕсли;
		Возврат Вложение;
	КонецЕсли;
КонецФункции

Функция ПолучитьФлагиСообщенийПорционно(Соединение, МассивИдентификаторовСообщений)
	
	ФлагиСообщений = Новый Соответствие;
	
	ВсегоИдентификаторов = МассивИдентификаторовСообщений.Количество();
	ПорцияИдентификаторов = Новый Массив;
	КоличествоВПорции = 500;
	
	Для Итератор = 0 По ВсегоИдентификаторов - 1 Цикл
		ПорцияИдентификаторов.Добавить(МассивИдентификаторовСообщений[Итератор]);
		Если ПорцияИдентификаторов.Количество() = КоличествоВПорции
			Или Итератор = ВсегоИдентификаторов - 1 Тогда
			ФлагиСообщенийПорции = Соединение.ПолучитьФлагиСообщений(ПорцияИдентификаторов);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ФлагиСообщений, ФлагиСообщенийПорции);
			ПорцияИдентификаторов.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФлагиСообщений;
	
КонецФункции

#КонецОбласти
