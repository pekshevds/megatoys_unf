#Область ПрограммныйИнтерфейс

// Устанавливает надпись гиперссылки на Счет-фактуру.
//
// Параметры:
// 	ФормаДокумента - ФормаКлиентскогоПриложения - форма, из которой открывается счет-фактура,
// 	Полученный - Булево - открыть полученный счет-фактуру.
Процедура ОткрытьСчетФактуру(ФормаДокумента, Полученный = Ложь) Экспорт
	
	СсылкаНаОбъект = ФормаДокумента.Объект.Ссылка;
	ДатаОбъекта = ФормаДокумента.Объект.Дата;
	
	МассивТиповСУПД = МассивТиповДокументовСУПД();
	
	Если МассивТиповСУПД.Найти(ТипЗнч(СсылкаНаОбъект)) = Неопределено Тогда
		ЭтоУниверсальныйДокумент = Ложь;
	Иначе
		ЭтоУниверсальныйДокумент = ФормаДокумента.Объект.ЭтоУниверсальныйДокумент;
	КонецЕсли;
	
	Корректировочный = Ложь;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Корректировочный = ФормаДокумента.Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура;
	КонецЕсли;
	
	Если Корректировочный Тогда
		ДокументОснование = ФормаДокумента.Объект.ДокументОснование;
		Если Не ЗначениеЗаполнено(ДокументОснование)
			Или Не ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Для ввода или открытия корректировочной счет-фактуры необходимо выбрать документ основание ""Расходная накладная"".'"));
			Возврат;
		КонецЕсли;
		
		НайденныйСчетФактура = СчетаФактурыУНФВызовСервера.ПолучитьПодчиненныйСчетФактуру(ДокументОснование);
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") И Не ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Для ввода корректировочной счет-фактуры у документа основания должна быть введена счет-фактура.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НайденныйСчетФактура = СчетаФактурыУНФВызовСервера.ПолучитьПодчиненныйСчетФактуру(СсылкаНаОбъект, Полученный);

	Если ФормаДокумента.Объект.ПометкаУдаления И Не ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Счет-фактуру нельзя вводить на основании документа, помеченного на удаление.'"));
		Возврат;
	КонецЕсли;

	Если ФормаДокумента.Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Документ был изменен. Сначала следует записать документ.'"));
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Документ не записан. Сначала следует записать документ.'"));
		Возврат;
	КонецЕсли;

	Если Полученный И Не Корректировочный Тогда
		ИмяФормы = "Документ.СчетФактураПолученный.ФормаОбъекта";
	Иначе
		ИмяФормы = "Документ.СчетФактура.ФормаОбъекта";
	КонецЕсли;
	
	// Откроем или введем новый документ
	СтруктураПараметровСчетФактуры = Новый Структура;
	Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда

		СтруктураПараметровСчетФактуры.Вставить("Ключ", НайденныйСчетФактура.Ссылка);
		ОткрытьФорму(ИмяФормы, СтруктураПараметровСчетФактуры, ФормаДокумента);

	Иначе
		
		Если Полученный И Не Корректировочный Тогда
			
			Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				СчетФактураДата = ФормаДокумента.Объект.СчетФактураДатаВыставления;
			Иначе
				СчетФактураДата = ФормаДокумента.СчетФактураДата;
			КонецЕсли;
				
			ПараметрыСчетФактуры = СчетаФактурыУНФВызовСервера.СоздатьСчетФактуру(СсылкаНаОбъект, СчетФактураДата, ФормаДокумента.СчетФактураНомер);
			ДатаВПредставление = ?(ЗначениеЗаполнено(ПараметрыСчетФактуры.ДатаВходящегоДокумента), ПараметрыСчетФактуры.ДатаВходящегоДокумента, ПараметрыСчетФактуры.Дата);
			ПредставлениеСчетФактуры = ПредставлениеСчетаФактуры(ДатаВПредставление, ПараметрыСчетФактуры.НомерВходящегоДокумента);
		Иначе
			ПараметрыСчетФактуры = СчетаФактурыУНФВызовСервера.СоздатьСчетФактуру(СсылкаНаОбъект, ДатаОбъекта);
			ПредставлениеСчетФактуры = ПредставлениеСчетаФактуры(ПараметрыСчетФактуры.Дата, ПараметрыСчетФактуры.Номер);
		КонецЕсли;
		
		ДокументыОснования = Новый Массив;
		ДокументыОснования.Добавить(СсылкаНаОбъект);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ПредставлениеСчетФактуры", ПредставлениеСчетФактуры);
		ПараметрыОповещения.Вставить("ДокументыОснования", ДокументыОснования);
		ПараметрыОповещения.Вставить("ЭтоУниверсальныйДокумент", ЭтоУниверсальныйДокумент);
		ПараметрыОповещения.Вставить("Корректировочный", Корректировочный);
		
		Если Полученный Тогда
			Оповестить("ОбновлениеТекстаПроСчетФактуруПолученный", ПараметрыОповещения, ПараметрыСчетФактуры.Ссылка);
		Иначе
			Оповестить("ОбновлениеТекстаПроСчетФактуру", ПараметрыОповещения, ПараметрыСчетФактуры.Ссылка);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры 

// Формирует надпись навигационной ссылки на Счет-фактуру.
// 
// Параметры:
// 	Дата - Дата - дата счета фактуры,
// 	Номер - Строка - номер счета фактуры.
// Возвращаемое значение:
// 	Строка - представление навигационной ссылки счета-фактуры.
Функция ПредставлениеСчетаФактуры(Дата, Номер) Экспорт

	ТекстПроСчетФактуру = НСтр("ru = '№ %Номер% от %Дата% г.'");
	КороткийНомер = РаботаСФормойДокументаКлиентСервер.ПолучитьКороткийНомерДокумента(Номер);
	ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Номер%", КороткийНомер);
	ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Дата%", Формат(Дата, "ДЛФ=D"));
	Возврат ТекстПроСчетФактуру;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура оповещает открытые формы с целью обновления надписи-гиперссылки о счет фактуре
// 
// Используется при печати УПД (Универсального передаточного документа)
// ОписаниеСчетовФактур. Тип Массив (многомерный).
// 
// Каждая строка массива содержит описание созданной счет фактуры.
// Расшифровка описания:
//  [0] - ссылка на документ основание
//  [1] - дата счет фактуры
//  [2] - номер счет фактуры
//
Процедура ОбновитьНадписиОСчетахФактурахОткрытыхФормах(ОписаниеСчетовФактур) Экспорт

	Если ТипЗнч(ОписаниеСчетовФактур) = Тип("Массив") Тогда

		Для Каждого СчетФактураСозданная Из ОписаниеСчетовФактур Цикл

			Структура = Новый Структура;
			Структура.Вставить("ДокументОснование", СчетФактураСозданная[0]);
			Структура.Вставить("Представление", ПредставлениеСчетаФактуры(СчетФактураСозданная[2],
				СчетФактураСозданная[1]));
			Оповестить("ОбновлениеТекстаПроСчетФактуру", Структура);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МассивТиповДокументовСУПД()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти