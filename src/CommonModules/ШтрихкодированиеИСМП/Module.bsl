#Область ПрограммныйИнтерфейс

// Приводит код маркировки к виду, необходимому для системы ИС МП.
// 
// Параметры:
//  СтрокаКодаМаркировки - Структура - Строка кода маркировки.
//  ПараметрыНормализации - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки
// Возвращаемое значение:
//  Неопределено, Строка - Код маркировки после нормализации.
Функция КодМаркировкиДляПередачиИСМП(СтрокаКодаМаркировки, ПараметрыНормализации) Экспорт
	
	ЗначениеДляПоиска = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
		СтрокаКодаМаркировки, СтрокаКодаМаркировки.ВидПродукции, ПараметрыНормализации);
	
	Возврат ЗначениеДляПоиска;
	
КонецФункции

// Получает вид продукции по GTIN на остатки.
// 
// Параметры:
// 	КодМаркировки - Строка                                    - Код маркировки.
// 	Организация   - Неопределено, ОпределяемыйТип.Организация - Организация, владелец GTIN на остатки.
// Возвращаемое значение:
// 	Неопределено, Массив из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции кода маркировки остатков.
Функция ВидыПродукцииПоКодуМаркировкиОстатков(КодМаркировки, Организация = Неопределено) Экспорт

	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировки);
	Если ДанныеРазбора = Неопределено Или Не ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивДанныхЗаполнения = Новый Массив;

	СтрокаДанных = Новый Структура(
		"GTIN, ВидПродукции, Номенклатура, Представление");
	СтрокаДанных.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;

	МассивДанныхЗаполнения.Добавить(СтрокаДанных);

	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		МассивДанныхЗаполнения, Организация, , "Представление");

	МассивРезультат = Новый Массив;
	ВидПродукции    = МассивДанныхЗаполнения[0].ВидПродукции;

	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		
		МассивРезультат.Добавить(ВидПродукции);
		
	Иначе
		
		Для Каждого ВидПродукции Из ДанныеРазбора.ВидыПродукции Цикл
			Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции) Тогда
				МассивРезультат.Добавить(ВидПродукции);
			КонецЕсли;
		КонецЦикла
		
	КонецЕсли;

	Возврат МассивРезультат;

КонецФункции

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  СортироватьДанные - Булево - Необходимость сортировки данных дерева.
// Возвращаемое значение:
//  см. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ПараметрыСканирования, СортироватьДанные = Ложь) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШапки);
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодированиеИСМПСлужебный.ШтрихкодыУпаковокИзДокумента(ДокументСсылка, ПараметрыСканирования);
	
	Возврат ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковок, ПараметрыСканирования, СортироватьДанные);
	
КонецФункции

#Область Статусы

// Заполняет массив допустимых начальных статусов кодов при отправке отчета о нанесении.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Массив допустимых начальных статусов кодов.
//
Функция ДопустимыеНачальныеСтатусыОтчетОНанесении(ВидПродукции) Экспорт
	
	Статусы = Новый Массив;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		ШтрихкодированиеМОТПКлиентСервер.ЗаполнитьДопустимыеНачальныеСтатусыОтчетОНанесении(Статусы);
		
	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьДопустимыеНачальныеСтатусыОтчетОНанесении(Статусы);
		
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Заполняет массив ожидаемых статусов кодов после отправки отчета о нанесении.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Массив ожидаемых статусов кодов.
//
Функция ОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(ВидПродукции) Экспорт
	
	Статусы = Новый Массив;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		ШтрихкодированиеМОТПКлиентСервер.ЗаполнитьОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(Статусы);
		
	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(Статусы);
		
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область РаспределениеТоваровПоШтрихкодамУпаковок

// Подготавливает новую структуру параметров распределение для передачи в (См. РаспределениеШтрихкодовУпаковокПоТоварам)
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПараметрыУказанияСерий  - Структура, Неопределено - Параметры указания серий.
// * ДокументСсылка          - ДокументСсылка, ДанныеФормыСтруктура, ДокументОбъект - Ссылка на документ,
//                             объект документа или данные формы, связанные с объектом документа.
// * ДопустимыТоварыБезМарок - Булево                  - Возможнен режим, когда марок не достаточно на все товары.
Функция НовыеПараметрыРаспределенияШтрихкодовУпаковок() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДокументСсылка",          Неопределено);
	Параметры.Вставить("ПараметрыУказанияСерий",  Неопределено);
	Параметры.Вставить("ДопустимыТоварыБезМарок", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Создает и возвращает новый элемент коллекции упаковок для распределения по товарам.
// 
// Возвращаемое значение:
//  Структура - Новый элемент коллекции упаковок для распределения по товарам:
// * ШтрихкодУпаковки               - СправочникСсылка.ШтрихкодыУпаковокТоваров                           - Штрихкод упаковки товара.
// * ЧастичноеВыбытиеКоличество     - Число, Неопределено                                                 - Часть упаковки, с которой производится операция (числитель).
// * ЧастичноеВыбытиеВариантУчета   - ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИСМП, Неопределено - Вариант учета частичного выбытия.
// * ЧастичноеВыбытиеНоменклатура   - ОпределяемыйТип.Номенклатура, Неопределено                          - Номенклатура частичного выбытия, если отличается от основной.
// * ЧастичноеВыбытиеХарактеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры, Неопределено            - Характеристика частичного выбытия, если отличается от основной.
Функция НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ШтрихкодУпаковки",               Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеКоличество",     Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеВариантУчета",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеНоменклатура",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеХарактеристика", Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Распределяет штрихкоды упаковок по таблице товаров с учетом групповых упаковок.
// 
// Параметры:
// 	ПараметрыРаспределения - См. НовыеПараметрыРаспределенияШтрихкодовУпаковок.
// 	Товары                 - ТаблицаЗначений:
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура               - Номенклатура таблицы товаров.
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика таблицы товаров (опционально).
// 	 * Упаковка           - ОпределяемыйТип.Упаковка                   - Устарел. Упаковки прикладной конфигурации не используются.
// 	 * Серия              - ОпределяемыйТип.СерияНоменклатуры          - Серия таблицы товаров (опционально).
// 	 * Количество         - Число                                      - Количество единиц товаров.
// 	 * КоличествоУпаковок - Число                                      - Количество упаковок товаров (опционально).
// 	МассивУпаковок         - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров -
// 	                          Штрикходы упаковок документа.
// 	                       - Массив из см. НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам -
// 	                          Штрикходы упаковок документа, с дополнительным данными частичного выбытия.
// Возвращаемое значение:
// 	Структура - Описание:
// * ЕстьОшибки - Булево           - Признак наличия ошибок распределения.
// * Ошибки     - Массив из Строка - Тексты ошибок распредления.
// * РаспределенныеСтроки          - Соответствие:
// 	* Ключ     - СтрокаТабличнойЧасти                                         - Исходная строка таблицы товаров.
// 	* Значение - Массив из См. НовыйРезультатРаспределенияШтрихкодовПоТоварам - Результат распределения.
// * СтрокиБезШтрихкодов - Соответствие - Устарел. Товар распределяется всегда.
//                                        Текст ошибки для отображаения в форме заполняется в результате респределения.
Функция РаспределениеШтрихкодовУпаковокПоТоварам(ПараметрыРаспределения, Товары, МассивУпаковок) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("РаспределенныеСтроки", Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("СтрокиБезШтрихкодов",  Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("Ошибки",               Новый Массив());
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",           Ложь);
	
	ДанныеШапки               = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ПараметрыРаспределения.ДокументСсылка);
	ПараметрыСканирования     = ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШапки);
	ТребуетсяЧастичноеВыбытие = ШтрихкодированиеИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования);
	
	ПараметрыСканирования.ОтборПоВидуПродукции = Ложь;
	Если ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции)
		Или ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
	КонецЕсли;
	Если ПараметрыСканирования.ПараметрыУказанияСерий = Неопределено
		И ПараметрыРаспределения.ПараметрыУказанияСерий <> Неопределено Тогда
		ПараметрыСканирования.ПараметрыУказанияСерий = ПараметрыРаспределения.ПараметрыУказанияСерий;
	КонецЕсли;
	
	#Область ФормированиеИсходныхДанных
	
	// Подготовка таблицы Товаров
	
	ТаблицаТовары = Новый ТаблицаЗначений();
	ТаблицаТовары.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Упаковка",             Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаТовары.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Количество",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("КоличествоУпаковок",   ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("Приоритет",            ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ТаблицаТовары.Колонки.Добавить("ИндексИсходнойСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		НоваяСтрока.ИндексИсходнойСтроки = Товары.Индекс(СтрокаТовары);
		
		Если ЗначениеЗаполнено(НоваяСтрока.КоличествоУпаковок)
			И НоваяСтрока.КоличествоУпаковок <> НоваяСтрока.Количество Тогда
			НоваяСтрока.Приоритет = 5;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика");
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	ТаблицаТовары.Сортировать("Приоритет Убыв, Количество Убыв");
	
	// Подготовка таблицы Штрихкодов
	
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		МассивУпаковок,
		ПараметрыСканирования,,
		Истина);
	
	ТаблицаШтрихкоды = ШтрихкодыУпаковок.МаркированныеТовары.СкопироватьКолонки();
	
	ДобавляемыеКолонки = Новый Структура();
	ДобавляемыеКолонки.Вставить("Количество",        ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДобавляемыеКолонки.Вставить("ГрупповаяУпаковка", Новый ОписаниеТипов("Булево"));
	ДобавляемыеКолонки.Вставить("Приоритет",         ОбщегоНазначения.ОписаниеТипаЧисло(2));
	ДобавляемыеКолонки.Вставить("ИспользоватьСерии", Новый ОписаниеТипов("Булево"));
	ДобавляемыеКолонки.Вставить("Склад",             Метаданные.ОпределяемыеТипы.Склад.Тип);
	
	ШтрихкодированиеМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ТаблицаШтрихкоды, ДобавляемыеКолонки);
	
	ПараметрыЗаполнения = ПараметрыЗаполненияТаблицыИзДереваУпаковок();
	ПараметрыЗаполнения.ТребуетсяЧастичноеВыбытие = ТребуетсяЧастичноеВыбытие;
	
	ЗаполнитьТаблицуШтрихкодовИзДереваУпаковокРекурсивно(
		ТаблицаШтрихкоды,
		ШтрихкодыУпаковок.ДеревоУпаковок,
		ПараметрыЗаполнения);
	
	// Заполнение служебных полей таблицы Штрихкодов
	
	Для Каждого СтрокаТаблицы Из ТаблицаШтрихкоды Цикл
		
		Если ТребуетсяЧастичноеВыбытие
			И СтрокаТаблицы.ЧастичноеВыбытие
			И СтрокаТаблицы.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
			СтрокаТаблицы.ИспользоватьСерии = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Склад)
			И ПараметрыРаспределения.ПараметрыУказанияСерий <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				ПараметрыРаспределения.ПараметрыУказанияСерий, "Склад") Тогда
			СтрокаТаблицы.Склад = ПараметрыРаспределения.ПараметрыУказанияСерий.Склад;
		КонецЕсли;
		
		СтрокаТаблицы.ИспользоватьСерии = ИнтеграцияИС.ТребуетсяВыборСерии(СтрокаТаблицы, ПараметрыСканирования);
		
	КонецЦикла;
	
	ТаблицаШтрихкоды.Сортировать("Приоритет, Количество Убыв");
	
	#КонецОбласти
	
	#Область Распределение
	
	СвойстваЗаполнения = "Штрихкод,ВидПродукции,ВидУпаковки,ПолныйКодМаркировки,СоставКодаМаркировки,
			             |ШтрихкодУпаковки,ТипШтрихкода";
	Если ТребуетсяЧастичноеВыбытие Тогда
		СвойстваЗаполнения = СтрШаблон(
			"%1,%2",
			СвойстваЗаполнения,
			"ЧастичноеВыбытие,ЕмкостьПотребительскойУпаковки");
	КонецЕсли;
	
	ДанныеЗаполненияСвойствПриПроверкеККТ = Новый Массив();
	ЗаполнитьКоличествоЧастичноеВыбытие   = Новый Массив();
	
	Для Каждого СтрокаШтрихкод Из ТаблицаШтрихкоды Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   СтрокаШтрихкод.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаШтрихкод.Характеристика);
		
		Если СтрокаШтрихкод.ИспользоватьСерии Тогда
			СтруктураПоиска.Вставить("Серия", СтрокаШтрихкод.Серия);
		КонецЕсли;
		
		НайденныеСтрокиТовары   = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииКМ.ВключатьМРЦ = Истина;
		
		Для Каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			
			Если СтрокаТовары.Количество = 0 Тогда
				Продолжить
			ИначеЕсли СтрокаШтрихкод.ГрупповаяУпаковка
				И СтрокаШтрихкод.Количество > СтрокаТовары.Количество Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатСписания  = НовыйРезультатРаспределенияШтрихкодовПоТоварам();
			ЗаполнитьЗначенияСвойств(РезультатСписания, СтрокаШтрихкод, СвойстваЗаполнения);
			
			Если РезультатСписания.ЧастичноеВыбытие Тогда
				ИсходнаяСтрока = Товары[СтрокаТовары.ИндексИсходнойСтроки];
				ЭлементОбработки = ШтрихкодированиеИСМПКлиентСервер.НоваяСтруктураУстановкиДополнительныхСвойствПриПроверкеККТ();
				ЭлементОбработки.СтрокаТовары        = ИсходнаяСтрока;
				ЭлементОбработки.СтрокаНазначения    = РезультатСписания;
				ЭлементОбработки.ЭтоЧастичноеВыбытие = РезультатСписания.ЧастичноеВыбытие;
				Если СтрокаШтрихкод.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
					ЭлементОбработки.ИсходнаяНоменклатура = СтрокаШтрихкод.ЧастичноеВыбытиеНоменклатура;
				КонецЕсли;
				ДанныеЗаполненияСвойствПриПроверкеККТ.Добавить(ЭлементОбработки);
				ЗаполнитьКоличествоЧастичноеВыбытие.Добавить(ЭлементОбработки);
			КонецЕсли;
			
			РезультатСписания.Количество    = СтрокаШтрихкод.Количество;
			РезультатСписания.КодМаркировки = СтрокаШтрихкод.Штрихкод;
			ОбработкаИтоговойСтрокиРаспределения(РезультатСписания, СтрокаШтрихкод, ПараметрыНормализацииКМ);
			
			СписатьКоличествоТоваров = СтрокаШтрихкод.Количество;
			Если СписатьКоличествоТоваров > СтрокаТовары.Количество Тогда
				СписатьКоличествоТоваров = СтрокаТовары.Количество;
			КонецЕсли;
			СтрокаТовары.Количество     = СтрокаТовары.Количество - СписатьКоличествоТоваров;
			ЭтоОшибкаТребуетВзвешивания = (СтрокаШтрихкод.ТребуетВзвешивания И СтрокаШтрихкод.Количество = 0);
			СтрокаШтрихкод.Количество   = СтрокаШтрихкод.Количество - СписатьКоличествоТоваров;
			
			Если СтрокаШтрихкод.ГрупповаяУпаковка Тогда
				РезультатСписания.КоличествоУпаковок = РезультатСписания.КоличествоУпаковок + 1;
			КонецЕсли;
			
			ДобавитьСтрокуРаспределнияВРезультат(ВозвращаемоеЗначение, Товары, СтрокаТовары, РезультатСписания);
			
			Если ЭтоОшибкаТребуетВзвешивания Тогда
				РезультатСписания.ТекстОшибки = НСтр("ru = 'Требуется указание веса товара'");
				Прервать;
			КонецЕсли;
			
			Если Не ПараметрыСканирования.ПоддерживаетсяОбъемноСортовойУчет
				И СтрокаШтрихкод.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				РезультатСписания.ТекстОшибки = НСтр("ru = 'Пробитие чеков при объемно-сортовом учете не поддерживается.'");
			КонецЕсли;
			
			Если СтрокаШтрихкод.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	ЗаполнитьКоличествоЧастичноеВыбытие(ЗаполнитьКоличествоЧастичноеВыбытие, ВозвращаемоеЗначение);
	
	ШтрихкодированиеИСМПКлиентСервер.ПриУстановкеДополнительныхСвойствЭлеметовПроверкиСредствамиККТ(
		ДанныеЗаполненияСвойствПриПроверкеККТ);
	
	#Область КонтрольРезультатовРаспределения
	
	// Проверка штрихкодов, для которых не удалось найти товары
	
	Для Каждого СтрокаШтрихкод Из ТаблицаШтрихкоды Цикл
		
		Если СтрокаШтрихкод.Количество > 0 Тогда
		
			Представление = ИнтеграцияИС.ПредставлениеНоменклатуры(
				СтрокаШтрихкод.Номенклатура,
				СтрокаШтрихкод.Характеристика,,
				СтрокаШтрихкод.Серия);
				
			ВозвращаемоеЗначение.Ошибки.Добавить(
				СтрШаблон(
					НСтр("ru ='Не удалось распределить код маркировки по товарам:
						      |%1 (%2)'"),
					СтрокаШтрихкод.Штрихкод,
					Представление));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка товаров, для которых не удалось найти штрихкод
	
	ВидПродукцииПоНоменклатуре    = Новый Соответствие();
	УчитываемыеВидыПродукции      = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ВидыПродукцииТестовогоПериода = ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииТестовогоПериода(
		ДанныеШапки.Дата);
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидПродукции = ВидПродукцииПоНоменклатуре.Получить(СтрокаТовары.Номенклатура);
		Если ВидПродукции = Неопределено Тогда
			ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(СтрокаТовары.Номенклатура);
			ВидПродукцииПоНоменклатуре.Вставить(СтрокаТовары.Номенклатура, ВидПродукции);
		КонецЕсли;
		
		Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидыПродукцииТестовогоПериода.Найти(ВидПродукции) = Неопределено
			И УчитываемыеВидыПродукции.Найти(ВидПродукции) <> Неопределено
			И Не ПараметрыРаспределения.ДопустимыТоварыБезМарок Тогда
			
			РезультатСписания = НовыйРезультатРаспределенияШтрихкодовПоТоварам();
			РезультатСписания.Количество   = СтрокаТовары.Количество;
			РезультатСписания.ВидПродукции = ВидПродукции;
			
			ДобавитьСтрокуРаспределнияВРезультат(ВозвращаемоеЗначение, Товары, СтрокаТовары, РезультатСписания);
		
			Представление = ИнтеграцияИС.ПредставлениеНоменклатуры(
				СтрокаТовары.Номенклатура,
				СтрокаТовары.Характеристика,,
				СтрокаТовары.Серия);
			
			РезультатСписания.ТекстОшибки = СтрШаблон(
				НСтр("ru ='Требуется код маркировки для товара: %1'"),
				Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.ЕстьОшибки = (ВозвращаемоеЗначение.Ошибки.Количество() > 0);
	
	#КонецОбласти
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполнение сохраняемой строки штрихкодов упаковки для обработки данных частичного выбытия.
// 
// Параметры:
//  СтрокаШтрихкод        - СтрокаТаблицыЗначений из см. ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаШтрихкодовВерхнегоУровня
//  ДанныеШтрихкода       - см. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода
//  ПараметрыСканирования - см. ШтрихкодированиеИС.ПараметрыСканирования
Процедура ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковки(СтрокаШтрихкод, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
		ДанныеШтрихкода,
		ПараметрыСканирования);
	
	Если Не ЭтоСтрокаДанныхЧастичногоВыбытия Тогда
		Возврат;
	КонецЕсли;
	
	ВариантУчета   = Неопределено;
	Количество     = 0;
	Номенклатура   = Неопределено;
	Характеристика = Неопределено;
	
	Если ДанныеШтрихкода.ЧастичноеВыбытие Тогда
		ВариантУчета = ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета;
		Количество   = ДанныеШтрихкода.Количество;
		Если ВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
			Номенклатура   = ДанныеШтрихкода.Номенклатура;
			Характеристика = ДанныеШтрихкода.Характеристика;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета] = ВариантУчета;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество] = Количество;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура] = Номенклатура;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика] = Характеристика;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует новую таблицу значений для поиска в пуле кодов маркировки.
// 
// Параметры:
//   КолонкиВЕТИС   - Булево - добавлять колонки специфики маркировки ВетИС.
// Возвращаемое значение:
//   ТаблицаЗначений - Описание:
// * КодМаркировки - Строка - Код маркировки.
// * ХешСуммаКодаМаркировки - Строка - Хэш-сумма кода маркировки.
Функция НоваяТаблицаПоискаКодаМаркировкиВПуле(КолонкиВЕТИС = Ложь) Экспорт
	
	КодыМаркировки = Новый ТаблицаЗначений;
	КодыМаркировки.Колонки.Добавить(
		"КодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип);
	КодыМаркировки.Колонки.Добавить(
		"ХешСуммаКодаМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.ХешСуммаКодаМаркировки.Тип);
	КодыМаркировки.Колонки.Добавить(
		"ИсходныйКодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип);
	
	Если КолонкиВЕТИС Тогда
		КодыМаркировки.Колонки.Добавить(
			"ИдентификаторПроисхожденияВЕТИС",
			Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
		КодыМаркировки.Колонки.Добавить(
			"СкоропортящаясяПродукция",
			Новый ОписаниеТипов("Булево"));
		КодыМаркировки.Колонки.Добавить(
			"ГоденДо",
			Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	КодыМаркировки.Колонки.Добавить(
		"Количество",
		Новый ОписаниеТипов("Число"));
	
	Возврат КодыМаркировки;
	
КонецФункции

// Добавляет код маркировки в коллекцию для поиска в пуле.
// 
// Параметры:
// 	ДанныеСтроки   - Строка, СтрокаТаблицыЗначений - Значение кода маркировки или строка данных.
// 	КодыМаркировки - См. НоваяТаблицаПоискаКодаМаркировкивПуле.
// 	ЗаполнитьКолонкиВЕТИС - Булево - необходимость заполнения колонок с данными для маркировки ветис
//
Процедура ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(ДанныеСтроки, КодыМаркировки, ЗаполнитьКолонкиВЕТИС = Ложь) Экспорт
	
	Если ТипЗнч(ДанныеСтроки) = Тип("Строка") Тогда
		
		НоваяСтрока                        = КодыМаркировки.Добавить();
		НоваяСтрока.КодМаркировки          = ДанныеСтроки;
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
		НоваяСтрока.ИсходныйКодМаркировки  = НоваяСтрока.КодМаркировки;
		
	Иначе
		
		НоваяСтрока                        = КодыМаркировки.Добавить();
		НоваяСтрока.КодМаркировки          = ДанныеСтроки.Штрихкод;
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
		НоваяСтрока.ИсходныйКодМаркировки  = НоваяСтрока.КодМаркировки;
		
		Если ЗаполнитьКолонкиВЕТИС Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки, "ИдентификаторПроисхожденияВЕТИС, ГоденДо, СкоропортящаясяПродукция");
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетВзвешивания
			И ЗначениеЗаполнено(ДанныеСтроки.Количество) Тогда
			НоваяСтрока.Количество = ДанныеСтроки.Количество;
		КонецЕсли;
		
		Если (ДанныеСтроки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ДанныеСтроки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или ДанныеСтроки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
			И ДанныеСтроки.ДанныеРазбора <> Неопределено
			И ДанныеСтроки.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И ДанныеСтроки.СоставКодаМаркировки.ВключаетМРЦ Тогда
			
			НастройкиСохраненияВПул = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
		
			НоваяСтрока = КодыМаркировки.Добавить();
			НоваяСтрока.КодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				ДанныеСтроки,
				ДанныеСтроки.ВидПродукции,
				НастройкиСохраненияВПул);
			НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
			НоваяСтрока.ИсходныйКодМаркировки  = ДанныеСтроки.Штрихкод;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск кодов маркировки в пуле, получая дополнительные поля.
// 
// Параметры:
// 	КодыМаркировки - См. НоваяТаблицаПоискаКодаМаркировкиВПуле.
// 	Поля           - Строка - Поля пула кодов через запятую, которые необходимо включить в рузультирующие данные.
// 	РазбиватьПоСрокамГодности - Булево - признак наличия дополнительных полей (идентификатор происхождения ВетИС, срок 
// 	   годности) в таблице-источнике, которые требуется сохранить
// Возвращаемое значение:
// ТаблицаЗначений - Описание:
// * КодМаркировки - Строка - Код маркировки.
// - а так же дополнительные запрашиваемые поля.
Функция РезультатПоискаВПулеКодовМаркировки(КодыМаркировки, Поля = "", РазбиватьПоСрокамГодности = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.КодМаркировки          КАК КодМаркировки,
	|	Т.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	Т.ИсходныйКодМаркировки  КАК ИсходныйКодМаркировки,
	|	Т.Количество             КАК Количество,
	|	&ДополнительныеПоляИсточника
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	&КодыМаркировки КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	КодМаркировки,
	|	ХешСуммаКодаМаркировки
	|;
	|
	|///////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИсходныйКодМаркировки КАК КодМаркировки,
	|	Т.Количество            КАК Количество,
	|	&ДополнительныеПоляИсточника,
	|	&ДополнительныеПоляПула
	|ИЗ
	|	КодыМаркировки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ПулКодовМаркировкиСУЗ.КодМаркировки         = Т.КодМаркировки
	|		И ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки = Т.ХешСуммаКодаМаркировки
	|");
	Запрос.Параметры.Вставить("КодыМаркировки", КодыМаркировки);
	
	Запрос.УстановитьПараметр("ДополнительныеПоляИсточника", Истина);
	Запрос.УстановитьПараметр("ДополнительныеПоляПула", Истина);
	
	Если ЗначениеЗаполнено(Поля) Тогда
		МассивПолей = СтрРазделить(Поля, ",");
		ПоляЗапроса = Новый Массив;
		Для Каждого СтрокаПоле Из МассивПолей Цикл
			ПоляЗапроса.Добавить(СтрШаблон("ПулКодовМаркировкиСУЗ.%1 КАК %1", СокрЛП(СтрокаПоле)));
		КонецЦикла;
		ТекстПолей = СтрСоединить(ПоляЗапроса, "," + Символы.ПС);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляПула", ТекстПолей);
	КонецЕсли;
	
	Если РазбиватьПоСрокамГодности Тогда
		ТекстПолей = 
		"Т.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
		|Т.ГоденДо КАК ГоденДо,
		|Т.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляИсточника", ТекстПолей);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция МассивGTINНаОстаткиДляВыбора(ТекущиеДанные, Объект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура",   ТекущиеДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ТекущиеДанные.Характеристика);
	
	КодТНВЭД = ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(ТекущиеДанные.КодТНВЭД, Объект.ВидПродукции);
	
	Запрос.УстановитьПараметр("ДатаНачалаПоиска", ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -3));
	Запрос.УстановитьПараметр("Организация",      Объект.Организация);
	Запрос.УстановитьПараметр("НачалоGTIN",       ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков());
	Запрос.УстановитьПараметр("КодТНВЭД",         КодТНВЭД);
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
		Запрос.УстановитьПараметр("ДлинаТНВЭД", 4);
	Иначе
		Запрос.УстановитьПараметр("ДлинаТНВЭД", 2);
	КонецЕсли;
	
	ПараметрыОписанияОстатков = ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(
		Объект.ВидПродукции, КодТНВЭД);
	
	Запрос.УстановитьПараметр("ИспользоватьВозрастнуюКатегорию", ПараметрыОписанияОстатков.ИспользоватьВозрастнуюКатегорию);
	Запрос.УстановитьПараметр("ИспользоватьМодель",              ПараметрыОписанияОстатков.ИспользоватьМодель);
	Запрос.УстановитьПараметр("ИспользоватьНаименование",        ПараметрыОписанияОстатков.ИспользоватьНаименование);
	Запрос.УстановитьПараметр("ИспользоватьСпособВводаВОборот",  ПараметрыОписанияОстатков.ИспользоватьСпособВводаВОборот);
	Запрос.УстановитьПараметр("ИспользоватьЦелевойПол",          ПараметрыОписанияОстатков.ИспользоватьЦелевойПол);
	Запрос.УстановитьПараметр("ИспользоватьТоварныйЗнак",        ПараметрыОписанияОстатков.ИспользоватьТоварныйЗнак);
	
	Запрос.УстановитьПараметр("Номенклатура",        ТекущиеДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",      ТекущиеДанные.Характеристика);
	Запрос.УстановитьПараметр("ЦелевойПол",          ТекущиеДанные.ЦелевойПол);
	Запрос.УстановитьПараметр("Модель",              ТекущиеДанные.Модель);
	Запрос.УстановитьПараметр("ВозрастнаяКатегория", ТекущиеДанные.ВозрастнаяКатегория);
	Запрос.УстановитьПараметр("СпособВводаВОборот",  ТекущиеДанные.СпособВводаВОборот);
	Запрос.УстановитьПараметр("ТоварныйЗнак",        ТекущиеДанные.ТоварныйЗнак);
	Запрос.УстановитьПараметр("Наименование",        ТекущиеДанные.Наименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN КАК GTIN
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка
	|	ПО ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Ссылка = ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Дата >= &ДатаНачалаПоиска
	|ГДЕ
	|	ПОДСТРОКА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN, 1, 3) = &НачалоGTIN
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Организация        = &Организация
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Проведен
	|	И ПОДСТРОКА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.КодТНВЭД, 1, &ДлинаТНВЭД) = &КодТНВЭД
	|	И ВЫБОР КОГДА &ИспользоватьНаименование
	|		ТОГДА 
	|		ВЫБОР КОГДА &Наименование = """"
	|			ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура      = &Номенклатура
	|				  И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика  = &Характеристика
	|			ИНАЧЕ ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Наименование      = &Наименование
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьЦелевойПол
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ЦелевойПол = &ЦелевойПол
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьМодель
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Модель = &Модель
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьВозрастнуюКатегорию
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ВозрастнаяКатегория = &ВозрастнаяКатегория
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьСпособВводаВОборот
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособВводаВОборот = &СпособВводаВОборот
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьТоварныйЗнак
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ТоварныйЗнак = &ТоварныйЗнак
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КэшОписанияОстатковИСМП.GTIN
	|ИЗ
	|	РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатковИСМП
	|ГДЕ
	|	КэшОписанияОстатковИСМП.Организация = &Организация
	|	И ВЫБОР КОГДА &ИспользоватьЦелевойПол
	|		ТОГДА КэшОписанияОстатковИСМП.ЦелевойПол = &ЦелевойПол
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьМодель
	|		ТОГДА КэшОписанияОстатковИСМП.Модель = &Модель
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьВозрастнуюКатегорию
	|		ТОГДА КэшОписанияОстатковИСМП.ВозрастнаяКатегория = &ВозрастнаяКатегория
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьТоварныйЗнак
	|		ТОГДА КэшОписанияОстатковИСМП.ТоварныйЗнак = &ТоварныйЗнак
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьНаименование И &Наименование <> """"
	|		ТОГДА КэшОписанияОстатковИСМП.Представление = &Наименование
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И КэшОписанияОстатковИСМП.СпособВводаВОборот = &СпособВводаВОборот
	|	И (ПОДСТРОКА(КэшОписанияОстатковИСМП.КодТНВЭД, 1, &ДлинаТНВЭД) = &КодТНВЭД
	|	ИЛИ КэшОписанияОстатковИСМП.КодТНВЭД = """")
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивGTIN = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		GTIN = Выборка.GTIN;
		
		Если Не МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШтрихкодированиеИСКлиентСервер.ЭтоВнутреннийШтрихкод(GTIN)
			И Не ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивGTIN.Добавить(GTIN);
		
	КонецЦикла;
	
	Возврат МассивGTIN;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыЗаполненияТаблицыИзДереваУпаковок()
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяЧастичноеВыбытие", Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьТаблицуШтрихкодовИзДереваУпаковокРекурсивно(ТаблицаПриемник, ДеревоУпаковок, ПараметрыЗаполнения)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ЗаполнитьТаблицуШтрихкодовИзДереваУпаковокРекурсивно(ТаблицаПриемник, СтрокаДерева, ПараметрыЗаполнения);
			Продолжить;
		ИначеЕсли Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции, Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если ПараметрыЗаполнения.ТребуетсяЧастичноеВыбытие
			И СтрокаДерева.ЧастичноеВыбытие
			И СтрокаДерева.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
			
			НоваяСтрока.ЧастичноеВыбытиеНоменклатура   = НоваяСтрока.Номенклатура;
			НоваяСтрока.ЧастичноеВыбытиеХарактеристика = НоваяСтрока.Характеристика;
			
			НоваяСтрока.Номенклатура   = СтрокаДерева.ЧастичноеВыбытиеНоменклатура;
			НоваяСтрока.Характеристика = СтрокаДерева.ЧастичноеВыбытиеХарактеристика;
			
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			
			НоваяСтрока.Приоритет         = 5;
			НоваяСтрока.ГрупповаяУпаковка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуРаспределнияВРезультат(ВозвращаемоеЗначение, Товары, СтрокаТовары, РезультатСписания)
	
	ИсходнаяСтрокаТовары = Товары.Получить(СтрокаТовары.ИндексИсходнойСтроки);
	
	РаспределенныеСтроки = ВозвращаемоеЗначение.РаспределенныеСтроки.Получить(ИсходнаяСтрокаТовары);
	Если РаспределенныеСтроки = Неопределено Тогда
		РаспределенныеСтроки = Новый Массив;
		ВозвращаемоеЗначение.РаспределенныеСтроки.Вставить(ИсходнаяСтрокаТовары, РаспределенныеСтроки);
	КонецЕсли;
	
	РаспределенныеСтроки.Добавить(РезультатСписания);
	
КонецПроцедуры

Процедура ОбработкаИтоговойСтрокиРаспределения(РезультатСписания, СтрокаШтрихкод, ПараметрыНормализацииКМ)
	
	ВСоставеКодаЕстьМРЦ = (РезультатСписания.СоставКодаМаркировки <> Неопределено
		И РезультатСписания.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
		И РезультатСписания.СоставКодаМаркировки.ВключаетМРЦ);
	
	Если (РезультатСписания.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
		Или РезультатСписания.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция)
		И РезультатСписания.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix
		И Не ВСоставеКодаЕстьМРЦ Тогда
		
		РезультатСписания.Штрихкод = СтрШаблон("%1AAAA", РезультатСписания.КодМаркировки);
	
	ИначеЕсли ЗначениеЗаполнено(СтрокаШтрихкод.ПолныйКодМаркировки)
		И РезультатСписания.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
		И РезультатСписания.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		И (РезультатСписания.СоставКодаМаркировки = Неопределено
		Или (РезультатСписания.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И Не РезультатСписания.СоставКодаМаркировки.ВключаетМРЦ)) Тогда
	
		ПолныйКодМаркировки = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(РезультатСписания.ПолныйКодМаркировки);
		ДанныеРазбора       = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			ПолныйКодМаркировки,
			РезультатСписания.ВидПродукции);
			
		Если ДанныеРазбора <> Неопределено Тогда
			Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
				РезультатСписания.Штрихкод = ПолныйКодМаркировки;
			Иначе
				РезультатСписания.Штрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					ДанныеРазбора, РезультатСписания.ВидПродукции, ПараметрыНормализацииКМ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Новый результат распределения штрихкодов по товарам.
// 
// Возвращаемое значение:
//  Структура - Данные о коде маркировки:
// * Количество                        - Число  - Количество базовых единиц.
// * КоличествоУпаковок                - Число  - Устарел. Количество упаковок.
// * КоличествоПотребительскихУпаковок - Число  - Количество потребительских упаковок.
// * Штрихкод                          - Строка - Строковое представление кода маркиаровки.
// * ВидПродукции                      - ПеречислениеСсылка.ВидыПродукцииИС         - Вид продукции.
// * ВидУпаковки                       - ПеречислениеСсылка.ВидыУпаковокИС          - Вид упаковки.
// * ШтрихкодУпаковки                  - СправочникСсылка.ШтрихкодыУпаковокТоваров  - Штрихкод упаковки.
// * КодМаркировки                     - Строка               - Нормализованный код маркировки.
// * ПолныйКодМаркировки               - Строка, Неопределено - Полный код маркировки (base64).
// * СоставКодаМаркировки              - Структура            - Состав кода маркировки.
// * ЧастичноеВыбытие                  - Булево               - Признак частичного выбытия части упаковки.
// * ЕмкостьПотребительскойУпаковки    - Число                - Знаменатель значения частичного выбытия.
// * ТекстОшибки                       - Строка, Неопределено - Текст ошибки распределения.
// * КодЕдиницыИзмерения               - Строка, Неопределено - Код единицы измерения частично выбытия.
// * ЧастичноеВыбытиеКоличество        - Число - Количество частичного выбытия.
Функция НовыйРезультатРаспределенияШтрихкодовПоТоварам()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Количество",                        0);
	ВозвращаемоеЗначение.Вставить("КоличествоПотребительскихУпаковок", 0);
	ВозвращаемоеЗначение.Вставить("КоличествоУпаковок",                0);
	ВозвращаемоеЗначение.Вставить("Штрихкод",                          "");
	ВозвращаемоеЗначение.Вставить("ВидПродукции",                      Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидУпаковки",                       Неопределено);
	ВозвращаемоеЗначение.Вставить("КодМаркировки",                     Неопределено);
	ВозвращаемоеЗначение.Вставить("ПолныйКодМаркировки",               Неопределено);
	ВозвращаемоеЗначение.Вставить("СоставКодаМаркировки",              Неопределено);
	ВозвращаемоеЗначение.Вставить("ШтрихкодУпаковки",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТипШтрихкода",                      Неопределено);
	ВозвращаемоеЗначение.Вставить("ЕмкостьПотребительскойУпаковки",    0);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытие",                  Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                       Неопределено);
	ВозвращаемоеЗначение.Вставить("КодЕдиницыИзмерения",               Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеКоличество",        0);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполнить количество частичное выбытие.
// 
// Параметры:
//  ИсходныеСтроки - Массив из см. ШтрихкодированиеИСМПКлиентСервер.НоваяСтруктураУстановкиДополнительныхСвойствПриПроверкеККТ -
//  ВозвращаемоеЗначениеРаспределения - Структура - см. РаспределениеШтрихкодовУпаковокПоТоварам
Процедура ЗаполнитьКоличествоЧастичноеВыбытие(ИсходныеСтроки, ВозвращаемоеЗначениеРаспределения)
	
	Если ИсходныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникОписания = Новый Массив();
	Для Каждого ЭлементОписания Из ИсходныеСтроки Цикл
		Если ЗначениеЗаполнено(ЭлементОписания.ИсходнаяНоменклатура) Тогда
			ИсточникОписания.Добавить(ЭлементОписания.ИсходнаяНоменклатура);
		Иначе
			ИсточникОписания.Добавить(ЭлементОписания.СтрокаТовары.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОписания = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(ИсточникОписания);
	
	Для Каждого ЭлементОписания Из ИсходныеСтроки Цикл
		
		Если ЗначениеЗаполнено(ЭлементОписания.ИсходнаяНоменклатура) Тогда
			ОписаниеНоменклатуры = ДанныеОписания[ЭлементОписания.ИсходнаяНоменклатура];
		Иначе
			ОписаниеНоменклатуры = ДанныеОписания[ЭлементОписания.СтрокаТовары.Номенклатура];
		КонецЕсли;
		
		Если ОписаниеНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаРаспределения Из ВозвращаемоеЗначениеРаспределения.РаспределенныеСтроки[ЭлементОписания.СтрокаТовары] Цикл
			Если ОписаниеНоменклатуры.ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
				СтрокаРаспределения.ЧастичноеВыбытиеКоличество = СтрокаРаспределения.Количество;
			ИначеЕсли ЗначениеЗаполнено(ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке) Тогда
				Коэффициент = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке / ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
				Если СтрокаРаспределения.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
					ТочностьКоличестваЧастичноговыбытия = 3;
				Иначе
					ТочностьКоличестваЧастичноговыбытия = 0;
				КонецЕсли;
				СтрокаРаспределения.ЧастичноеВыбытиеКоличество = Окр(СтрокаРаспределения.Количество / Коэффициент, ТочностьКоличестваЧастичноговыбытия);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

