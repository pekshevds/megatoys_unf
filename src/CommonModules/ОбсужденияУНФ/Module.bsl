
////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры работы с обсуждениями
//
// Для новых объектов и при изменении из списка, изменения в СистемаВзаимодействия записываются регламентным заданием (отложенно)
// Для изменений в форме объектов, изменения в СистемаВзаимодействия записываются фоновым заданием (сразу)
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает ответственного сотрудника соответствующего пользователю обсуждений.
//
// Параметры:
//  Пользователь - ИдентификаторПользователяСистемыВзаимодействия - Пользователь системы взаимодействия.
// 
// Возвращаемое значение:
//   СправочникСсылка.Сотрудники
//
Функция СотрудникПользователя(ПользовательСВ) Экспорт
	
	ПользовательСправочника = ПользовательИнформационнойБазы(ПользовательСВ);
	Если Не ЗначениеЗаполнено(ПользовательСправочника) Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	СотрудникиПользователя = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя(ПользовательСправочника);
	
	Если СотрудникиПользователя.Количество() <> 0 Тогда
		Возврат СотрудникиПользователя[0];
	Иначе
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьОписаниеИзменений(ОписаниеИзменений, ТекстИзменений, Синоним = "") Экспорт
	
	ОбсужденияУНФИсторияДействийПользователя.ДобавитьОписаниеИзменений(ОписаниеИзменений, ТекстИзменений, Синоним);
	
КонецПроцедуры

Функция ДобавитьСообщениеОбИзмененииРеквизита(СтароеЗначение = Неопределено, НовоеЗначение = Неопределено, Формат = "") Экспорт
	
	Возврат ОбсужденияУНФИсторияДействийПользователя.ДобавитьСообщениеОбИзмененииРеквизита(СтароеЗначение, НовоеЗначение, Формат);
	
КонецФункции

Процедура ДобавитьСистемноеСообщение(ТекстСообщения, Ссылка) Экспорт
	
	ОбсужденияУНФИсторияДействийПользователя.ДобавитьСистемноеСообщение(ТекстСообщения, Ссылка);
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриСозданииФайла
//
Процедура ПриСозданииФайла(Файл) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
	Если ЗначениеЗаполнено(ВладелецФайла) Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Присоединен файл %1'"), ПолучитьНавигационнуюСсылку(Файл));
		ОбсужденияУНФ.ДобавитьСистемноеСообщение(ТекстСообщения, ВладелецФайла);
	КонецЕсли;
	
КонецПроцедуры

#Область СобытияФорм

Процедура ПослеЗаписиНаСервере(ТекущийОбъект) Экспорт
	
	Если Не ЛогироватьИзмененияОбъектовВОбсуждении() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущийОбъект.ДополнительныеСвойства.Свойство("ДляОбсуждений") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Неопределено;
	ТекущийОбъект.ДополнительныеСвойства.ДляОбсуждений.Свойство("ЭтоНовый", ЭтоНовый);
	Если ЭтоНовый = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Справочники.НеотправленныеСообщенияСистемыВзаимодействия.ЕстьНеотправленныеСообщенияПоОбъекту(ТекущийОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "ОбсужденияУНФ.ЗаписатьОтложенныеСообщенияВСистемуВзаимодействия", ТекущийОбъект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область Устаревшие

// Устарела. Будет удалена в следующей версии программы.
// Формирует Массив структур, содержащий имена и описания пользователей для использования в тексте обсуждений.
// 
// Возвращаемое значение:
//  Массив           - по числу пользователей: 
//   * Пользователь  - эл. справочника Пользователи
//   * Представление - Строка - Наименование пользователя,
//   * Имя 			 - Строка - Наименование пользователя сплошной строкой с нижним подчеркиванием, по типу "Фамилия_Имя";
//   * ДляПоиска 	 - Строка - Наименование пользователя сплошной строкой с нижним подчеркиванием, по типу "Фамилия_Имя",
//	 				   в нижнем регистре
Функция МассивОписанийПользователей() Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОписания = Новый Структура;
		СтруктураОписания.Вставить("Пользователь", Выборка.Пользователь);
		СтруктураОписания.Вставить("Представление", Выборка.Представление);
		СтруктураОписания.Вставить("Имя", СтрЗаменить(Выборка.Представление, " ", "_"));
		СтруктураОписания.Вставить("ДляПоиска", НРег(СтруктураОписания.Имя));
		Результат.Добавить(СтруктураОписания);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Добавляет запись обсуждения в регистр сведений Обсуждения для Ссылки, а также для упомянутых (по навигационным
// ссылкам) в тексте комментария объектов, формирует напоминания пользователям, упомянутым в тексте комментария
// Параметры:
//  Комментарий			   Строка 		- текст сообщения
//  Ссылка				   Любая ссылка - ссылка на объект обсуждения
//  МоментВремени          Дата и время - время сохранения сообщения
//  Системный			   Булево 		- Истина для сохранения изменений объекта, Ложь для сохранения комментариев к объекту
//  Пользователь		   Справочник Пользователи - Пользователь, сохраняющий комментарий
//
Процедура ДобавитьСообщение(
	ТекстСообщения,
	Ссылка,
	Дата = Неопределено,
	Системный = Ложь,
	Автор = Неопределено,
	Действия = Неопределено) Экспорт
	
	Если НЕ УправлениеНебольшойФирмойПовтИсп.ЛогироватьИзмененияОбъектов()
		ИЛИ ПустаяСтрока(ТекстСообщения)
		ИЛИ НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Автор) Тогда
		ПользовательАвторСообщения = Автор;
	Иначе
		ПользовательАвторСообщения = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	ДанныеСообщения = НовыйДанныеСообщения();
	ДанныеСообщения.Объект = Ссылка;
	ДанныеСообщения.Текст = ТекстСообщения;
	ДанныеСообщения.Дата = Дата;
	ДанныеСообщения.Автор = ПользовательАвторСообщения;
	ДанныеСообщения.Системный = Системный;
	Если ТипЗнч(Действия) = Тип("СписокЗначений") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Действия, ДанныеСообщения.Действия);
	КонецЕсли;
	
	ЗаписатьВОчередьСистемыВзаимодействия(ДанныеСообщения);
	
КонецПроцедуры

// Устарела. Будет удалена в следующей версии программы.
//
Функция ПолучитьСсылкуИзНавигационной(НС) Экспорт
	
	Если СтрНайти(НС, "e1cib/list/") > 0 Тогда
		Возврат ПредопределенноеЗначение(Сред(НС, 12) + ".ПустаяСсылка").Метаданные().ПредставлениеСписка;
	КонецЕсли;
	
	ПерваяТочка = СтрНайти(НС, "e1cib/data/");
	ВтораяТочка = СтрНайти(НС, "?ref=");
	ТретьяТочка = СтрНайти(НС, "'>");
	
	ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
	Если ТретьяТочка> 0 Тогда
		КонецНС = Прав(НС, СтрДлина(НС) - ТретьяТочка+1);
		ЗначениеСсылки = СтрЗаменить(ЗначениеСсылки, КонецНС, "");
	КонецЕсли;
	Попытка
		Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	Исключение
		Возврат НСтр("ru = 'Ошибка преобразования: '")+НС;
	КонецПопытки; 
	
КонецФункции

#КонецОбласти

// Значения заполнения для сообщения обсуждений.
// 
// Возвращаемое значение:
//  Структура
//   * Объект    - ЛюбаяСсылка - Объект-владелец контекстного обсуждения.
//              - ИдентификаторОбсужденияСистемыВзаимодействия - Идентификатор обсуждения.
//   * Текст     - Строка - Текст сообщения.
//   * Дата      - Дата - Дата сообщения.
//   * Автор     - СправочникСсылка.Пользователи - Автор сообщения.
//   * Данные    - Произвольный - Данные, содержащиеся в сообщении.
//   * Действия  - СписокЗначений - 
//   * Системный - Булево - Определяет, надо ли оформить текст в виде системного.
//                          Например, "#Изменено: сумма документа".
// 
Функция НовыйДанныеСообщения() Экспорт
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("Объект", Неопределено);
	ДанныеСообщения.Вставить("Текст", "");
	ДанныеСообщения.Вставить("Дата", Дата(1, 1, 1, 0, 0, 0));
	ДанныеСообщения.Вставить("Автор", Справочники.Пользователи.ПустаяСсылка());
	ДанныеСообщения.Вставить("Данные", Неопределено);
	ДанныеСообщения.Вставить("Действия", Новый СписокЗначений);
	ДанныеСообщения.Вставить("Получатель", Неопределено); // для совместимости.
	ДанныеСообщения.Вставить("Получатели", Новый Массив);
	ДанныеСообщения.Вставить("Системный", Ложь);
	
	Возврат ДанныеСообщения;
	
КонецФункции

// Производит попытку создать произвольное сообщение обсуждения. Если не удается - добавляет сообщение в очередь сообщений.
//
// Параметры:
//  ДанныеСообщения - Структура - См. функцию ОбсужденияУНФ.НовыйДанныеСообщения()
//
Процедура СоздатьСообщение(ДанныеСообщения) Экспорт
	
	Если ТипЗнч(ДанныеСообщения) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru='Передан некорректный параметр ""ДанныеСообщения"" (ожидаемый тип - Структура).'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСообщения, НовыйДанныеСообщения(), Ложь);
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Текст) Тогда
		ВызватьИсключение НСтр("ru='Сообщение с пустым текстом не может быть записано.'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Автор) Тогда
		ДанныеСообщения.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Дата) Тогда
		ДанныеСообщения.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПопытатьсяСоздатьСообщениеСистемыВзаимодействия(ДанныеСообщения);
	
КонецПроцедуры

// Добавляет сообщение в очередь сообщений.
//
// Параметры:
//  ДанныеСообщения - Структура - См. функцию ОбсужденияУНФ.НовыйДанныеСообщения()
//
Процедура СоздатьСообщениеОтложенно(ДанныеСообщения) Экспорт
	
	Если ТипЗнч(ДанныеСообщения) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru='Передан некорректный параметр ""ДанныеСообщения"" (ожидаемый тип - Структура).'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСообщения, НовыйДанныеСообщения(), Ложь);
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Текст) Тогда
		ВызватьИсключение НСтр("ru='Сообщение с пустым текстом не может быть записано.'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Автор) Тогда
		ДанныеСообщения.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Дата) Тогда
		ДанныеСообщения.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСообщения.Получатель) = Тип("СправочникСсылка.Сотрудники") И ЗначениеЗаполнено(ДанныеСообщения.Получатель) Тогда
		ДанныеСообщения.Получатель = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(ДанныеСообщения.Получатель);
	КонецЕсли;
	
	ДобавитьСообщениеВОчередьОтправки(ДанныеСообщения);
	
КонецПроцедуры

// Запускает запись отложенных сообщений из очереди непосредственно в систему взаимодействия.
//
Процедура ЗаписатьОтложенныеСообщенияВСистемуВзаимодействияСейчас() Экспорт
	
	ЗаписатьОтложенныеСообщенияВСистемуВзаимодействия();
	
КонецПроцедуры

// Получает объект-владелец обсуждения системы взаимодействия по контексту обсуждения.
//
// Параметры:
//  ИдентификаторОбсуждения	 - ИдентификаторОбсужденияСистемыВзаимодействия
// 
// Возвращаемое значение:
//   - ЛюбаяСсылка
//
Функция РазыменоватьКонтекстОбсуждения(ИдентификаторОбсуждения) Экспорт
	
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(ИдентификаторОбсуждения);
	
	Если Обсуждение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Обсуждение.КонтекстОбсуждения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьСсылкуИзНавигационной(Обсуждение.КонтекстОбсуждения.НавигационнаяСсылка)
	
КонецФункции

Функция ПолучитьСообщение(ОбсуждениеИдентификатор, СообщениеИдентификатор) Экспорт
	
	Возврат ПолучитьСообщениеРекурсивно(ОбсуждениеИдентификатор, СообщениеИдентификатор, Неопределено);
	
КонецФункции

Функция ПолучитьОбсуждение(ОбсуждениеИдентификатор) Экспорт
	
	Если ТипЗнч(ОбсуждениеИдентификатор) = Тип("ИдентификаторОбсужденияСистемыВзаимодействия")
		ИЛИ СтрНайти(ОбсуждениеИдентификатор, "-") = 0 Тогда
		Возврат СистемаВзаимодействия.ПолучитьОбсуждение(ОбсуждениеИдентификатор);
	Иначе
		Возврат СистемаВзаимодействия.ПолучитьОбсуждение(
			Новый ИдентификаторОбсужденияСистемыВзаимодействия(ОбсуждениеИдентификатор));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбсуждениеСПользователем(Пользователь1, Пользователь2) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ОбсужденияУНФ.ПолучитьОбсуждениеСПользователем", "Пользователь1", Пользователь1, Тип("СправочникСсылка.Пользователи"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ОбсужденияУНФ.ПолучитьОбсуждениеСПользователем", "Пользователь2", Пользователь2, Тип("СправочникСсылка.Пользователи"));
	
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия;
	ОтборОбсуждений.Групповое = Ложь;
	ОтборОбсуждений.Отображаемое = Истина;
	
	НайденноеОбсуждение = Неопределено;
	НайденныеОбсуждения = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	
	ИдентификаторПользователь1 = ИдентификаторПользователя(Пользователь1);
	ИдентификаторПользователь2 = ИдентификаторПользователя(Пользователь2);
	
	Для каждого Обсуждение Из НайденныеОбсуждения Цикл
		Если ЗначениеЗаполнено(Обсуждение.Заголовок)
			ИЛИ Обсуждение.Участники.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обсуждение.Участники.Содержит(ИдентификаторПользователь1)
			И Обсуждение.Участники.Содержит(ИдентификаторПользователь2) Тогда
			НайденноеОбсуждение = Обсуждение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденноеОбсуждение <> Неопределено Тогда
		Возврат НайденноеОбсуждение;
	КонецЕсли;
	
	НовоеЛичноеОбсуждение = СоздатьЛичноеОбсуждениеПользователей(ИдентификаторПользователь1, ИдентификаторПользователь2);
	
	Возврат НовоеЛичноеОбсуждение;
	
КонецФункции

// Получает контекстное обсуждение системы взаимодействия по навигационной ссылке.
//  В случае если такое обсуждение еще не создано - создает его.
//
// Параметры:
//  НавигационнаяСсылка - Строка - Навигационная ссылка на объект информационной базы.
//  Заголовок           - Строка - Заголовок обсуждения.
// 
// Возвращаемое значение:
//   - ОбсуждениеСистемыВзаимодействия
//
Функция ПолучитьКонтекстноеОбсуждениеПоНавигационнойСсылке(НавигационнаяСсылка, Заголовок = "") Экспорт
	
	Если Заголовок = "" Тогда
		Заголовок = НСтр("ru='История'");
	КонецЕсли;
	
	Обсуждение = Неопределено;
	
	#Если НЕ ВнешнееСоединение Тогда
	КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(НавигационнаяСсылка);
	
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия();
	ОтборОбсуждений.КонтекстноеОбсуждение = Истина;
	ОтборОбсуждений.КонтекстОбсуждения = КонтекстОбсуждения;
	
	ОбсужденияПоОбъекту = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	
	Если ОбсужденияПоОбъекту.Количество() <> 0 Тогда
		Возврат ОбсужденияПоОбъекту[0];
	КонецЕсли;
	
	Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
	Обсуждение.Заголовок = Заголовок;
	Обсуждение.КонтекстОбсуждения = КонтекстОбсуждения;
	
	Обсуждение.Записать();
	#КонецЕсли
	
	Возврат Обсуждение;
	
КонецФункции

// Получает идентификатор пользователя системы взаимодействия.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//   - ИдентификаторПользователяСистемыВзаимодействия, Неопределено
//
Функция ИдентификаторПользователя(Пользователь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ОбсужденияУНФ.ИдентификаторПользователя", "Пользователь", Пользователь, Тип("СправочникСсылка.Пользователи"));
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		ВызватьИсключение НСтр("ru='Не заполнено значение параметра ""Пользователь""'");
	КонецЕсли;
	
	Попытка
		ПредставлениеПользоватедя = Строка(Пользователь);
		ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
		ИдентификаторПользователяСВ = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторПользователяИБ);
	Исключение
		Комментарий = НСтр("ru='Ошибка получения идентификатора пользователя СВ для пользователя ""%1"", идентификатор ИБ ""%2"".'");
		Комментарий = СтрШаблон(Комментарий, ПредставлениеПользоватедя, ИдентификаторПользователяИБ);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ИдентификаторПользователяСВ;
	
КонецФункции

// Получает контекстное обсуждение системы взаимодействия по указанному объекту.
// В случае если такое обсуждение еще не создано - создает его.
//
// Параметры:
//  ОбъектСсылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//   - ОбсуждениеСистемыВзаимодействия
//
Функция ПолучитьКонтекстноеОбсуждение(ОбъектСсылка) Экспорт
	
	Обсуждение = Неопределено;
	
	#Если НЕ ВнешнееСоединение Тогда
	КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(ПолучитьНавигационнуюСсылку(ОбъектСсылка));
	
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия();
	ОтборОбсуждений.КонтекстноеОбсуждение = Истина;
	ОтборОбсуждений.КонтекстОбсуждения = КонтекстОбсуждения;
	
	ОбсужденияПоОбъекту = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	
	Если ОбсужденияПоОбъекту.Количество() <> 0 Тогда
		Возврат ОбсужденияПоОбъекту[0];
	КонецЕсли;
	
	Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
	Обсуждение.Заголовок = СтрШаблон(НСтр("ru = 'История %1'"), ОбъектСсылка);
	Обсуждение.КонтекстОбсуждения = КонтекстОбсуждения;
	
	Обсуждение.Записать();
	#КонецЕсли
	
	Возврат Обсуждение;
	
КонецФункции

// Находит последнее сообщение конкретного пользователя в указанном обсуждении.
//
// Параметры:
//  ОбсуждениеИдентификатор	 - ОбсуждениеСистемыВзаимодействия
//  Пользователь			 - ИдентификаторПользователяСистемыВзаимодействия, ПользовательСистемыВзаимодействия, СправочникСсылка.Пользователи
//  После					 - ИдентификаторСообщенияСистемыВзаимодействия - Если параметр передан, возвращаются сообщения после указанного.
// 
// Возвращаемое значение:
//   - СообщениеСистемыВзаимодействия, Неопределено
//
Функция ПолучитьПоследнееСообщение(ОбсуждениеИдентификатор, Пользователь = Неопределено, После = Неопределено) Экспорт
	#Если НЕ ВнешнееСоединение Тогда
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ТипыПользователя = Новый Массив;
		ТипыПользователя.Добавить(Тип("ИдентификаторПользователяСистемыВзаимодействия"));
		ТипыПользователя.Добавить(Тип("ПользовательСистемыВзаимодействия"));
		ТипыПользователя.Добавить(Тип("СправочникСсылка.Пользователи"));
		
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ПолучитьПоследнееСообщение", "Пользователь", Пользователь, ТипыПользователя);
	КонецЕсли;
	
	Отбор = Новый ОтборСообщенийСистемыВзаимодействия;
	Отбор.Обсуждение = ОбсуждениеИдентификатор;
	Отбор.Количество = 1;
	Если После <> Неопределено Тогда
		Отбор.После = После;
	КонецЕсли;
	Отбор.НаправлениеСортировки = НаправлениеСортировки.Убыв;
	
	Сообщения = СистемаВзаимодействия.ПолучитьСообщения(Отбор);
	Если Сообщения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Возврат Сообщения[0];
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Автор = ИдентификаторПользователя(Пользователь);
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ИдентификаторПользователяСистемыВзаимодействия") Тогда
		Автор = Пользователь;
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательСистемыВзаимодействия") Тогда
		Автор = Пользователь.Идентификатор;
	КонецЕсли;
	
	Если Сообщения[0].Автор = Автор Тогда
		Возврат Сообщения[0];
	КонецЕсли;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьПользователяВОбсуждение(Обсуждение, Пользователь) Экспорт
	
	Если ТипЗнч(Обсуждение) = Тип("ОбсуждениеСистемыВзаимодействия") Тогда
		РедактируемоеОбсуждение = Обсуждение;
	Иначе
		РедактируемоеОбсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Обсуждение);
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		НовыйУчастникОбсуждения = Обсуждения.ПользовательСистемыВзаимодействия(Пользователь).Идентификатор;
	Иначе
		НовыйУчастникОбсуждения = Пользователь;
	КонецЕсли;
	
	Если РедактируемоеОбсуждение.Участники.Содержит(НовыйУчастникОбсуждения) Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемоеОбсуждение.Участники.Добавить(НовыйУчастникОбсуждения);
	РедактируемоеОбсуждение.Записать();
	
КонецПроцедуры

Процедура УдалитьПользователяИзОбсуждения(Обсуждение, Пользователь) Экспорт
	
	Если ТипЗнч(Обсуждение) = Тип("ОбсуждениеСистемыВзаимодействия") Тогда
		РедактируемоеОбсуждение = Обсуждение;
	Иначе
		РедактируемоеОбсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Обсуждение);
	КонецЕсли;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		УдаляемыйУчастникОбсуждения = Обсуждения.ПользовательСистемыВзаимодействия(Пользователь).Идентификатор;
	Иначе
		УдаляемыйУчастникОбсуждения = Пользователь;
	КонецЕсли;
	
	Если НЕ РедактируемоеОбсуждение.Участники.Содержит(УдаляемыйУчастникОбсуждения) Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемоеОбсуждение.Участники.Удалить(УдаляемыйУчастникОбсуждения);
	РедактируемоеОбсуждение.Записать();
	
КонецПроцедуры

// Получает обсуждение по его идентификатору, исключение при неудачной попытке не вызывается.
// Обертка для платформенного метода СистемаВзаимодействия.ПолучитьОбсуждение.
//
// Параметры:
//  ОбсуждениеИдентификатор - ИдентификаторОбсужденияСистемыВзаимодействия, Строка - Идентификатор обсуждения или ключ обсуждения.
// 
// Возвращаемое значение:
//  ОбсуждениеСистемыВзаимодействия, Неопределено
//
Функция ПолучитьОбсуждениеБезопасно(Идентификатор, ВызыватьИсключение = Ложь) Экспорт
	
	Если Не СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОжидаемыеТипы = Новый Массив;
	ОжидаемыеТипы.Добавить(Тип("Строка"));
	ОжидаемыеТипы.Добавить(Тип("ИдентификаторОбсужденияСистемыВзаимодействия"));
	ТипПараметраИдентификатор = Новый ОписаниеТипов(ОжидаемыеТипы);
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ПолучитьОбсуждениеБезопасно", "Идентификатор", Идентификатор, ТипПараметраИдентификатор);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Обсуждение = Неопределено;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ИдентификаторОбсужденияСистемыВзаимодействия") Тогда
		Попытка
			ПредставлениеИдентификатора = Строка(Идентификатор);
			Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Идентификатор);
		Исключение
			Обсуждение = Неопределено;
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = НСтр("ru='Ошибка получения обсуждения СВ по идентификатору ""%1"" по причине:
			|%2'");
			Комментарий = СтрШаблон(Комментарий, ПредставлениеИдентификатора, ТекстОшибки);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
			
			Если ВызыватьИсключение Тогда
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Обсуждение;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПопытатьсяСоздатьСообщениеСистемыВзаимодействия(ДанныеСообщения)
	
	#Если НЕ ВнешнееСоединение Тогда
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщениеОтправлено = СоздатьИОтправитьСообщениеСистемыВзаимодействия(ДанныеСообщения);
	Если СообщениеОтправлено <> Истина Тогда
		ДобавитьСообщениеВОчередьОтправки(ДанныеСообщения);
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры

Процедура ЗаписатьОтложенныеСообщенияВСистемуВзаимодействия(ОбсуждениеКонтекст = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	Если ИнформационнаяБазаЗарегистрирована = Ложь
		Или ИнформационнаяБазаЗарегистрирована = Неопределено Тогда
		ИспользованиеРеглЗаданияЗаписьСообщенийВСистемуВзаимодействия(Ложь);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НеотправленныеСообщенияСистемыВзаимодействия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НеотправленныеСообщенияСистемыВзаимодействия КАК НеотправленныеСообщенияСистемыВзаимодействия
	|ГДЕ
	|	(&НеВыполнятьОтборПоОбъекту
	|			ИЛИ НеотправленныеСообщенияСистемыВзаимодействия.ОбсуждениеКонтекст = &ОбсуждениеКонтекст)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеотправленныеСообщенияСистемыВзаимодействия.Дата";
	
	Запрос.УстановитьПараметр("НеВыполнятьОтборПоОбъекту", ОбсуждениеКонтекст = Неопределено);
	Запрос.УстановитьПараметр("ОбсуждениеКонтекст", ОбсуждениеКонтекст);
	
	НеотправленныеСообщения = Запрос.Выполнить().Выбрать();
	Пока НеотправленныеСообщения.Следующий() Цикл
		НеотправленноеСообщениеПолучено = Ложь;
		// АПК:280-выкл обработка исключения не требуется
		Попытка
			НеотправленноеСообщение = НеотправленныеСообщения.Ссылка.ПолучитьОбъект();
			НеотправленноеСообщение.Заблокировать();
			НеотправленноеСообщениеПолучено = Истина;
		Исключение
			// Обработка исключения не требуется.
			// Сообщение очереди уже было отправлено другим сеансом.
		КонецПопытки;
		// АПК:280-вкл
		
		Если Не НеотправленноеСообщениеПолучено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДанныеСообщения = ДанныеНеотправленногоСообщения(НеотправленноеСообщение);
			СообщениеОтправлено = СоздатьИОтправитьСообщениеСистемыВзаимодействия(ДанныеСообщения);
			Если СообщениеОтправлено = Неопределено
				Или СообщениеОтправлено = Истина Тогда
				НеотправленноеСообщение.Удалить();
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ЛогироватьИзмененияОбъектовВОбсуждении() Экспорт
	
	ЗаписьИзмененийОбъектовВОбсуждения = ЗаписьИзмененийОбъектовВОбсуждения();
	
	Если ЗаписьИзмененийОбъектовВОбсуждения = Перечисления.ЗаписьИзмененийОбъектовВОбсуждения.Записывать Тогда
		Возврат Истина;
	ИначеЕсли ЗаписьИзмененийОбъектовВОбсуждения = Перечисления.ЗаписьИзмененийОбъектовВОбсуждения.НеЗаписывать Тогда
		Возврат Ложь;
	Иначе
		ИнформационнаяБазаЗарегистрирована = Неопределено;
		#Если НЕ ВнешнееСоединение Тогда
			ИнформационнаяБазаЗарегистрирована = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
		#КонецЕсли
		Возврат ИнформационнаяБазаЗарегистрирована = Истина;
	КонецЕсли;
	
КонецФункции

Функция ЗаписьИзмененийОбъектовВОбсуждения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаписьИзмененийОбъектовВОбсуждения.Значение КАК Значение
	|ИЗ
	|	Константа.ЗаписьИзмененийОбъектовВОбсуждения КАК ЗаписьИзмененийОбъектовВОбсуждения";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Перечисления.ЗаписьИзмененийОбъектовВОбсуждения.Авто;
	КонецЕсли;
	
	ЗаписьИзменений = Результат.Выбрать();
	ЗаписьИзменений.Следующий();
	
	Если ЗначениеЗаполнено(ЗаписьИзменений.Значение) Тогда
		Возврат ЗаписьИзменений.Значение;
	Иначе
		Возврат Перечисления.ЗаписьИзмененийОбъектовВОбсуждения.Авто;
	КонецЕсли;
	
КонецФункции

// Обработчик регламентного задания ЗаписьСообщенийВСистемуВзаимодействия.
//
Процедура ЗаписьСообщенийВСистемуВзаимодействия() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗаписьСообщенийВСистемуВзаимодействия);
	
	Если Не ЭтоСеансАвторизованногоПользователя() Тогда
		ИспользованиеРеглЗаданияЗаписьСообщенийВСистемуВзаимодействия(Ложь);
		
		Комментарий = НСтр("ru='Задание запущено не от авторизованного пользователя, пропустить выполнение.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);
		Возврат;
	КонецЕсли;
	
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	Если Не ПользовательПодходитДляОтправкиПриемаСообщения(АвторизованныйПользователь) Тогда
		ИспользованиеРеглЗаданияЗаписьСообщенийВСистемуВзаимодействия(Ложь);
		
		Комментарий = НСтр("ru='Пользователь не подходит для регламентной отправки сообщений обсуждений.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);
		Возврат;
	КонецЕсли;
	
	ЗаписатьОтложенныеСообщенияВСистемуВзаимодействия();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПользовательИнформационнойБазы(ПользовательСистемыВзаимодействия)
	
	ПользовательСВ = СистемаВзаимодействия.ПолучитьПользователя(ПользовательСистемыВзаимодействия);
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательСВ.ИдентификаторПользователяИнформационнойБазы);
	Возврат Пользователь;
	
КонецФункции

Процедура ОформитьСистемныйТекст(Текст)
	
	СтандартныйНаклонныйШрифт = Новый Шрифт(,,,Истина);
	Текст = СтрШаблон(НСтр("ru='#%1'"), Текст);
	Текст = Новый ФорматированнаяСтрока(Текст, СтандартныйНаклонныйШрифт, ЦветаСтиля.ЦветСистемногоСообщения);
	
КонецПроцедуры

Процедура ДобавитьСообщениеВОчередьОтправки(ДанныеСообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСообщения, НовыйДанныеСообщения(), Ложь);
	
	НеотправленноеСообщение = Справочники.НеотправленныеСообщенияСистемыВзаимодействия.СоздатьЭлемент();
	Если ТипЗнч(ДанныеСообщения.Объект) = Тип("Строка") Тогда
		НеотправленноеСообщение.ОбсуждениеИдентификатор = ДанныеСообщения.Объект;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеСообщения.Объект)) Тогда
		НеотправленноеСообщение.ОбсуждениеКонтекст = ДанныеСообщения.Объект;
	ИначеЕсли ТипЗнч(ДанныеСообщения.Объект) = Тип("ИдентификаторОбсужденияСистемыВзаимодействия") Тогда
		НеотправленноеСообщение.ОбсуждениеИдентификатор = ДанныеСообщения.Объект;
	КонецЕсли;
	НеотправленноеСообщение.Автор = ДанныеСообщения.Автор;
	НеотправленноеСообщение.Текст = ДанныеСообщения.Текст;
	НеотправленноеСообщение.Дата = ?(ЗначениеЗаполнено(ДанныеСообщения.Дата), ДанныеСообщения.Дата, ТекущаяДатаСеанса());
	Если ТипЗнч(ДанныеСообщения.Данные) <> Неопределено Тогда
		НеотправленноеСообщение.Данные = Новый ХранилищеЗначения(ДанныеСообщения.Данные);
	КонецЕсли;
	Если ТипЗнч(ДанныеСообщения.Действия) = Тип("СписокЗначений") И ДанныеСообщения.Действия.Количество() > 0 Тогда
		НеотправленноеСообщение.Действия = Новый ХранилищеЗначения(ДанныеСообщения.Действия);
	КонецЕсли;
	
	Если ДанныеСообщения.Системный Тогда
		НеотправленноеСообщение.Системный = Истина;
	КонецЕсли;
	
	Для каждого Получатель Из ДанныеСообщения.Получатели Цикл
		Если ЗначениеЗаполнено(Получатель) Тогда
			ПолучательСообщения = НеотправленноеСообщение.Получатели.Добавить();
			ПолучательСообщения.Получатель = Получатель;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ДанныеСообщения.Получатель) Тогда
		ПолучательСообщения = НеотправленноеСообщение.Получатели.Добавить();
		ПолучательСообщения.Получатель = ДанныеСообщения.Получатель;
	КонецЕсли;
	
	НеотправленноеСообщение.Записать();
	ИспользованиеРеглЗаданияЗаписьСообщенийВСистемуВзаимодействия(Истина);
	
КонецПроцедуры

Процедура ЗаписатьВОчередьСистемыВзаимодействия(ДанныеСообщения)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСообщения.Автор) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСообщения.Автор) = Тип("СправочникСсылка.Пользователи")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Автор, "Служебный") Тогда
		// Нельзя записать сообщение от имени служебного пользователя
		Возврат;
	КонецЕсли;
	
	ДобавитьСообщениеВОчередьОтправки(ДанныеСообщения);
	
КонецПроцедуры

Процедура ИспользованиеРеглЗаданияЗаписьСообщенийВСистемуВзаимодействия(Использование)
	
	Если Использование И Не ЭтоСеансАвторизованногоПользователя() Тогда
		// Задание может быть запланировано только от имени авторизованного пользователя.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаданиеИспользуется = Ложь;
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЗаписьСообщенийВСистемуВзаимодействия));
	Для каждого Задание Из МассивЗаданий Цикл
		Если Задание.Использование Тогда
			ЗаданиеИспользуется = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Использование И ЗаданиеИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Использование И Не ЗаданиеИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПользователя = "";
	Если Использование Тогда
		АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
		ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АвторизованныйПользователь, "ИдентификаторПользователяИБ");
		СвойстваПользователя = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
		
		Если СвойстваПользователя = Неопределено Тогда
			Комментарий = НСтр("ru='Не удалось получить свойства пользователя ""%1"" с Идентификатором ИБ ""%2""'");
			Комментарий = СтрШаблон(Комментарий, АвторизованныйПользователь, ИдентификаторПользователяИБ);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);
			Возврат;
		КонецЕсли;
		
		ИмяПользователя = СвойстваПользователя.Имя;
	КонецЕсли;
	
	Если МассивЗаданий.Количество()=0 Тогда
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ЗаписьСообщенийВСистемуВзаимодействия);
		Задание.Использование = Использование;
		Задание.ИмяПользователя = ИмяПользователя;
		Задание.Ключ = "ЗаписьСообщенийВСистемуВзаимодействия";
		Задание.Наименование = "Запись сообщений в систему взаимодействия";
		Задание.Расписание = РасписаниеРегламентногоЗаданияПоУмолчанию();
		Задание.Записать();
	Иначе
		Задание = МассивЗаданий[0];
		Если Задание.Использование <> Использование ИЛИ НЕ Задание.ИмяПользователя = Строка(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
			Задание.Использование = Использование;
			Задание.ИмяПользователя = ИмяПользователя;
			Задание.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РасписаниеРегламентногоЗаданияПоУмолчанию()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание							= Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели				= ДниНедели;
	Расписание.ПериодПовтораВТечениеДня	= 300; // 5 минут
	Расписание.ПериодПовтораДней		= 1; // каждый день
	Расписание.Месяцы					= Месяцы;
	
	Возврат Расписание;
	
КонецФункции

Функция СоздатьЛичноеОбсуждениеПользователей(ИдентификаторПользователь1, ИдентификаторПользователь2)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовоеОбсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
	НовоеОбсуждение.Групповое = Ложь;
	НовоеОбсуждение.Участники.Добавить(ИдентификаторПользователь1);
	НовоеОбсуждение.Участники.Добавить(ИдентификаторПользователь2);
	НовоеОбсуждение.Записать();
	Возврат НовоеОбсуждение;
	
КонецФункции

Функция ПолучитьСообщениеРекурсивно(ОбсуждениеИдентификатор, СообщениеИдентификатор, СообщениеИдентификаторПосле = Неопределено)
	
	#Если НЕ ВнешнееСоединение Тогда
	Отбор = Новый ОтборСообщенийСистемыВзаимодействия;
	Отбор.Обсуждение = ОбсуждениеИдентификатор;
	Если ЗначениеЗаполнено(СообщениеИдентификаторПосле) Тогда
		Отбор.После = СообщениеИдентификатор;
	КонецЕсли;
	
	Сообщения = СистемаВзаимодействия.ПолучитьСообщения(Отбор);
	
	Если Сообщения.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Сообщение не найдено.'");
	КонецЕсли;
	
	Для каждого Сообщение Из Сообщения Цикл
		Если Сообщение.Идентификатор = СообщениеИдентификатор Тогда
			Возврат Сообщение;
		КонецЕсли;
	КонецЦикла;
	
	ПолучитьСообщениеРекурсивно(ОбсуждениеИдентификатор, СообщениеИдентификатор, Сообщения[Сообщения.ВГраница()]);
	#КонецЕсли
	
КонецФункции

Функция ДанныеНеотправленногоСообщения(НеотправленноеСообщениеОбъект)
	
	ДанныеСообщения = НовыйДанныеСообщения();
	Если ЗначениеЗаполнено(НеотправленноеСообщениеОбъект.ОбсуждениеИдентификатор) Тогда
		ДанныеСообщения.Объект = НеотправленноеСообщениеОбъект.ОбсуждениеИдентификатор;
	Иначе
		ДанныеСообщения.Объект = НеотправленноеСообщениеОбъект.ОбсуждениеКонтекст;
	КонецЕсли;
	ДанныеСообщения.Текст = НеотправленноеСообщениеОбъект.Текст;
	ДанныеСообщения.Дата = НеотправленноеСообщениеОбъект.Дата;
	ДанныеСообщения.Автор = НеотправленноеСообщениеОбъект.Автор;
	ДанныеСообщения.Данные = НеотправленноеСообщениеОбъект.Данные;
	ДанныеСообщения.Действия = НеотправленноеСообщениеОбъект.Действия;
	Для каждого Получатель Из НеотправленноеСообщениеОбъект.Получатели Цикл
		ДанныеСообщения.Получатели.Добавить(Получатель.Получатель);
	КонецЦикла;
	ДанныеСообщения.Системный = НеотправленноеСообщениеОбъект.Системный;
	
	Возврат ДанныеСообщения;
	
КонецФункции

Функция НовыйСообщениеСистемыВзаимодействия(ДанныеСообщения)
	
	Если ТипЗнч(ДанныеСообщения.Объект) = Тип("Строка") Тогда
		Обсуждение = ПолучитьОбсуждение(ДанныеСообщения.Объект);
		Если Обсуждение = Неопределено Тогда
			// Общее Обсуждение (по ключу) может отсутствовать:
			//  - либо еще не создано прикладной логикой,
			//  - либо ранее было выполнено отключение/подключение обсуждений (происходит отправка старых сообщений).
			// В таком случае сообщение некуда отправить, т.к. обсуждение должна создать ответственная за него прикладная логика.
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеСообщения.Объект) = Тип("ИдентификаторОбсужденияСистемыВзаимодействия") Тогда
		Обсуждение = ПолучитьОбсуждение(ДанныеСообщения.Объект);
	ИначеЕсли ТипЗнч(ДанныеСообщения.Объект) = Тип("СправочникСсылка.Пользователи") Тогда
		Обсуждение = ПолучитьОбсуждениеСПользователем(ДанныеСообщения.Объект, ДанныеСообщения.Автор);
	Иначе
		Обсуждение = ПолучитьКонтекстноеОбсуждение(ДанныеСообщения.Объект);
	КонецЕсли;
	
	НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
	НовоеСообщение.Текст = ДанныеСообщения.Текст;
	Если ДанныеСообщения.Системный Тогда
		ОформитьСистемныйТекст(НовоеСообщение.Текст);
	КонецЕсли;
	НовоеСообщение.Дата = ДанныеСообщения.Дата;
	
	Если ПользовательПодходитДляОтправкиПриемаСообщения(ДанныеСообщения.Автор) Тогда
		НовоеСообщение.Автор = ИдентификаторПользователя(ДанныеСообщения.Автор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСообщения.Получатель) И ДанныеСообщения.Получатели.Количество() = 0 Тогда
		ДанныеСообщения.Получатели.Добавить(ДанныеСообщения.Получатель); // Для совместимости.
	КонецЕсли;
	
	Для каждого ПользовательСправочника Из ДанныеСообщения.Получатели Цикл
		Если Не ПользовательПодходитДляОтправкиПриемаСообщения(ПользовательСправочника) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторПользователяСВ = ИдентификаторПользователя(ПользовательСправочника);
		НовоеСообщение.Получатели.Добавить(ИдентификаторПользователяСВ);
	КонецЦикла;
	
	Если ДанныеСообщения.Данные <> Неопределено Тогда
		НовоеСообщение.Данные = ДанныеСообщения.Данные;
	КонецЕсли;
	
	Если ДанныеСообщения.Действия <> Неопределено И ТипЗнч(ДанныеСообщения.Действия) = Тип("СписокЗначений") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСообщения.Действия, НовоеСообщение.Действия);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Сообщение", НовоеСообщение);
	Результат.Вставить("Обсуждение", Обсуждение);
	Возврат Результат;
	
КонецФункции

Функция СоздатьИОтправитьСообщениеСистемыВзаимодействия(ДанныеСообщения)
	
	СообщениеОтправлено = Ложь;
	СообщениеСистемыВзаимодействия = Неопределено;
	
	Попытка
		Результат = НовыйСообщениеСистемыВзаимодействия(ДанныеСообщения);
		Если Результат <> Неопределено Тогда
			СообщениеСистемыВзаимодействия = Результат.Сообщение;
			ОбсуждениеСистемыВзаимодействия = Результат.Обсуждение;
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,, ДанныеСообщения.Объект, ТекстОшибки);
	КонецПопытки;
	
	Если СообщениеСистемыВзаимодействия = Неопределено Тогда
		Возврат СообщениеОтправлено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СообщениеСистемыВзаимодействия.Автор) Тогда
		ТекстСообщения = НСтр("ru='Не удалось заполнить Автора сообщения СВ по данным пользователя справочника: ""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(ДанныеСообщения.Автор));
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,, ДанныеСообщения.Объект, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Если ОбсуждениеСистемыВзаимодействия.КонтекстОбсуждения <> Неопределено Тогда
			// Снять режим наблюдения, чтобы пользователь не получал уведомление сам себе.
			БылРежимНаблюдения = СистемаВзаимодействия.ПолучитьРежимНаблюдения(ОбсуждениеСистемыВзаимодействия.Идентификатор);
			Если БылРежимНаблюдения Тогда
				СистемаВзаимодействия.УстановитьРежимНаблюдения(ОбсуждениеСистемыВзаимодействия.Идентификатор, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СообщениеСистемыВзаимодействия.Записать();
		СообщениеОтправлено = Истина;
		
		Если ОбсуждениеСистемыВзаимодействия.КонтекстОбсуждения <> Неопределено Тогда
			// Вернуть снятый режим наблюдения.
			Если БылРежимНаблюдения Тогда
				СистемаВзаимодействия.УстановитьРежимНаблюдения(ОбсуждениеСистемыВзаимодействия.Идентификатор, Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,, ДанныеСообщения.Объект, ТекстОшибки);
	КонецПопытки;
	
	Возврат СообщениеОтправлено;
	
КонецФункции

Функция ПользовательПодходитДляОтправкиПриемаСообщения(ПользовательСправочника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеАвтора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПользовательСправочника, "Недействителен,ПометкаУдаления,ИдентификаторПользователяИБ");
	Если ДанныеАвтора.Недействителен
		Или ДанныеАвтора.ПометкаУдаления
		Или Не ЗначениеЗаполнено(ДанныеАвтора.ИдентификаторПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИмяСобытияЖР()
	
	Возврат НСтр("ru='ОбсужденияУНФ'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ЭтоСеансАвторизованногоПользователя()
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Возврат ЗначениеЗаполнено(ТекущийПользователь.Имя);
	
КонецФункции

#КонецОбласти
