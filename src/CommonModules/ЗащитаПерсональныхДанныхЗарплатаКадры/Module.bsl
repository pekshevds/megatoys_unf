//// @strict-types


#Область ПрограммныйИнтерфейс

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьОбластиПерсональныхДанных.
Процедура ЗаполнитьОбластиПерсональныхДанных(КатегорииПерсональныхДанных) Экспорт
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ЗаполнитьОбластиПерсональныхДанных(КатегорииПерсональныхДанных);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ДополнитьДанныеСубъектовПерсональныхДанных.
Процедура ДополнитьДанныеСубъектовПерсональныхДанных(СубъектыПерсональныхДанных, ДатаАктуальности) Экспорт 
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ДополнитьДанныеСубъектовПерсональныхДанных(
		СубъектыПерсональныхДанных, ДатаАктуальности);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ДополнитьДанныеОрганизацииОператораПерсональныхДанных.
Процедура ДополнитьДанныеОрганизацииОператораПерсональныхДанных(Организация, ДанныеОрганизации, ДатаАктуальности) Экспорт

	//@skip-check property-return-type
	ДанныеОрганизации.АдресОрганизации = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		,
		ДатаАктуальности);
	
	ДанныеОрганизации.Вставить("НаименованиеОрганизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,
		"НаименованиеПолное"));
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьФИОФизическогоЛица.
Процедура ЗаполнитьФИОФизическогоЛица(ФизическоеЛицо, ФИО) Экспорт
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, "ФИО");
	
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФИО = КадровыеДанные[0]["ФИО"];
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных.
Процедура ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений) Экспорт
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(
		ТаблицаСведений);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередСкрытиемПерсональныхДанныхСубъектов.
Процедура ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, ОтказОтСкрытия) Экспорт

	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты,
		ТаблицаИсключений, ОтказОтСкрытия);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередУничтожениемПерсональныхДанных.
Процедура ПередУничтожениемПерсональныхДанных(Объект, Субъекты, ВыполнитьЗаписьОбъекта) Экспорт

	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ПередУничтожениемПерсональныхДанных(Объект, Субъекты,
		ВыполнитьЗаписьОбъекта);
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриРасчетеСроковХраненияПерсональныхДанных
Процедура ПриРасчетеСроковХраненияПерсональныхДанных(ДанныеСубъектов, СрокиХранения) Экспорт
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(СрокиХранения, "Субъект");
	
	ЗащитаПерсональныхДанныхЗарплатаКадрыВнутренний.ПриРасчетеСроковХраненияПерсональныхДанных(ДанныеСубъектов,
		СрокиХранения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ДобавитьРеквизитыЗащитыПерсональныхДанныхНаФормеНастройкиПользователейИПрав(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	НоваяГруппа = Элементы.Добавить("ЛетДоУничтоженияПерсональныхДанныхСотрудниковГруппа", Тип("ГруппаФормы"),
		Элементы.ГруппаУничтожениеПерсональныхДанныхИспользование);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппа.Видимость = Форма.НаборКонстант.ИспользоватьСкрытиеПерсональныхДанныхСубъектов;
	
	ЛетДоУничтожения = Константы.ЛетДоУничтоженияПерсональныхДанныхСотрудников.Получить();
	
	ИмяРеквизита = "ЛетДоУничтоженияПерсональныхДанныхСотрудников";
	НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Число"), , , Ложь);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Форма[ИмяРеквизита] = ЛетДоУничтожения;
	
	НоваяДекорация = Элементы.Добавить("ЛетДоУничтоженияПерсональныхДанныхСотрудников", Тип("ДекорацияФормы"),
		НоваяГруппа);
	НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
	НоваяДекорация.Заголовок = НСтр("ru = 'Уничтожать данные уволенных сотрудников через'");
		
	НовоеПоле = Элементы.Добавить("ПолеЛетДоУничтоженияПерсональныхДанныхСотрудников", Тип("ПолеФормы"), НоваяГруппа);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Заголовок = СтрРазделить(ЗарплатаКадрыКлиентСервер.ПредставлениеЛет(ЛетДоУничтожения), " ")[1];
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	НовоеПоле.ПутьКДанным = ИмяРеквизита;
	НовоеПоле.МаксимальнаяШирина = 3;
	НовоеПоле.АвтоМаксимальнаяШирина = Ложь;
	НовоеПоле.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	НовоеПоле.РасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Через сколько лет после увольнения могут быть уничтожены персональные данные сотрудника.'");
	НовоеПоле.УстановитьДействие("ПриИзменении",
		"Подключаемый_ЛетДоУничтоженияПерсональныхДанныхСотрудниковПриИзменении");
			
КонецПроцедуры

// Возвращает срок хранения, прибавляя к дате события количество лет до уничтожения персональных данных.
// 
// Параметры:
//  ДатаСобытия - Дата
// 
// Возвращаемое значение:
//  Дата
Функция СрокХраненияПоДатеСобытия(ДатаСобытия) Экспорт
	
	Результат = КонецГода(
		ДобавитьМесяц(ДатаСобытия, 12 * Константы.ЛетДоУничтоженияПерсональныхДанныхСотрудников.Получить()));

	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//   * Организация - СправочникСсылка.Организации
//   * Дата - Дата
Функция НоваяТаблицаДатПолученияДоходов() Экспорт
	
	ДанныеОДоходах = Новый ТаблицаЗначений;
	ДанныеОДоходах.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеОДоходах.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеОДоходах.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Возврат ДанныеОДоходах;
	
КонецФункции

// Параметры:
//  ДанныеСубъектов - см. ЗащитаПерсональныхДанныхПереопределяемый.ПриРасчетеСроковХраненияПерсональныхДанных.ДанныеСубъектов
//  СрокиХранения - см. ЗащитаПерсональныхДанныхПереопределяемый.ПриРасчетеСроковХраненияПерсональныхДанных.СрокиХранения
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ФизическиеЛица
Функция ФизическиеЛицаИзДанныхСубъектов(ДанныеСубъектов, СрокиХранения) Экспорт
	
	ФизическиеЛица = ДанныеСубъектов.ВыгрузитьКолонку("Субъект");
	ОбщегоНазначенияБЗККлиентСервер.УдалитьВсеВхожденияКромеТипаИзМассива(ФизическиеЛица,
		Тип("СправочникСсылка.ФизическиеЛица"));

	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ИсключаемыеФизическиеЛица = Новый Массив;
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		НайденныеСтроки = СрокиХранения.НайтиСтроки(Новый Структура("Субъект,СрокХранения", ФизическоеЛицо,
			ДатаНеУничтожать()));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИсключаемыеФизическиеЛица.Добавить(ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизическиеЛица, ИсключаемыеФизическиеЛица);
	
	Возврат ФизическиеЛица;

КонецФункции

// Возвращаемое значение:
//  Дата
Функция ДатаНеУничтожать() Экспорт
	
	Возврат Дата(3999, 12, 31);
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.27.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ЗащитаПерсональныхДанныхЗарплатаКадры.УстановитьЛетДоУничтоженияПерсональныхДанныхСотрудников";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6707d587-0648-4ba9-ae9d-96c8848b052b");
	Обработчик.Комментарий = НСтр("ru = 'Установка константы ""Лет до уничтожения персональных данных сотрудников"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.27.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ЗащитаПерсональныхДанныхЗарплатаКадры.ЗаполнитьРегистрыДляУничтоженияПерсональныхДанных";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("161da63b-7ab9-4479-8c37-11b6308f2935");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистров для уничтожения персональных данных.'");
	
КонецПроцедуры

// Устанавливает значение по умолчанию для константы ЛетДоУничтоженияПерсональныхДанныхСотрудников при обновлении базы.
// 
// Параметры:
//  ПараметрыОбновления - Структура
Процедура УстановитьЛетДоУничтоженияПерсональныхДанныхСотрудников(ПараметрыОбновления) Экспорт
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Константы.ЛетДоУничтоженияПерсональныхДанныхСотрудников.Установить(5);
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Заполняет регистры при обновлении информационной базы.
// 
// Параметры:
//  ПараметрыОбновления - Структура
Процедура ЗаполнитьРегистрыДляУничтоженияПерсональныхДанных(ПараметрыОбновления) Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ЗащитаПерсональныхДанных.ЗаполнитьРегистрыДляУничтоженияПерсональныхДанных(ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	// RLS на объекты подсистемы ЗащитаПерсональныхДанных поставляется в ролях подсистемы КадровыйУчет:
	//   ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры
	//   ЧтениеДанныхФизическихЛицЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Списки.Вставить(Метаданные.Документы["ОтзывСогласияНаОбработкуПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.Документы["СогласиеНаОбработкуПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.Документы["АктОбУничтоженииПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СогласияНаОбработкуПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СубъектыДляСкрытияПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СрокиХраненияПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СубъектыДляРасчетаСроковХранения"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["УничтоженныеПерсональныеДанные"], Ложь);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	// RLS на объекты подсистемы ЗащитаПерсональныхДанных поставляется в ролях подсистемы КадровыйУчет:
	//   ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры
	//   ЧтениеДанныхФизическихЛицЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Если Список = Метаданные.Документы["ОтзывСогласияНаОбработкуПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.Документы["СогласиеНаОбработкуПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.Документы["АктОбУничтоженииПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СогласияНаОбработкуПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СубъектыДляСкрытияПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СрокиХраненияПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СубъектыДляРасчетаСроковХранения"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["УничтоженныеПерсональныеДанные"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Субъект)";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// RLS на объекты подсистемы ЗащитаПерсональныхДанных поставляется в ролях подсистемы КадровыйУчет:
	//   ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры
	//   ЧтениеДанныхФизическихЛицЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Описание = Описание + "
		|Документ.ОтзывСогласияНаОбработкуПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|Документ.ОтзывСогласияНаОбработкуПерсональныхДанных.Чтение.Организации
		|Документ.ОтзывСогласияНаОбработкуПерсональныхДанных.Изменение.ГруппыФизическихЛиц
		|Документ.ОтзывСогласияНаОбработкуПерсональныхДанных.Изменение.Организации
		|Документ.СогласиеНаОбработкуПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|Документ.СогласиеНаОбработкуПерсональныхДанных.Чтение.Организации
		|Документ.СогласиеНаОбработкуПерсональныхДанных.Изменение.ГруппыФизическихЛиц
		|Документ.СогласиеНаОбработкуПерсональныхДанных.Изменение.Организации
		|Документ.АктОбУничтоженииПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|Документ.АктОбУничтоженииПерсональныхДанных.Чтение.Организации
		|Документ.АктОбУничтоженииПерсональныхДанных.Изменение.ГруппыФизическихЛиц
		|Документ.АктОбУничтоженииПерсональныхДанных.Изменение.Организации
		|РегистрСведений.СогласияНаОбработкуПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СогласияНаОбработкуПерсональныхДанных.Чтение.Организации
		|РегистрСведений.СубъектыДляСкрытияПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СрокиХраненияПерсональныхДанных.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СубъектыДляРасчетаСроковХранения.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.УничтоженныеПерсональныеДанные.Чтение.ГруппыФизическихЛиц";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
