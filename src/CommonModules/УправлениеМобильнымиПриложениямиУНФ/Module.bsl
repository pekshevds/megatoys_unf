#Область СлужебныйПрограммныйИнтерфейс

// Заполняет информацию о поставляемых мобильных приложениях,
// с которыми текущая конфигурация поддерживает обмен данными.
//
// Параметры:
//  ПараметрыПоставляемыхПриложений - Структура - структура с ключами:
//    * ПоставляемыеВариантыНастроек - Массив - содержит перечисленные варианты настроек 
//                                              мобильных приложений, с которыми поддерживает обмен
//                                              текущая конфигурация.
//    * ОписаниеПриложений - Массив из см. УправлениеМобильнымиПриложениями.ПараметрыПриложения
//
Процедура ПараметрыПоставляемыхПриложений(ПараметрыПоставляемыхПриложений) Экспорт
	
	ВариантыНастроек = ПараметрыПоставляемыхПриложений.ПоставляемыеВариантыНастроек;
	ОписаниеПриложений = ПараметрыПоставляемыхПриложений.ОписаниеПриложений;
	
	ВариантыНастроек.Добавить("Кладовщик");
	ОписаниеПриложения = УправлениеМобильнымиПриложениями.ПараметрыПриложения();
	ОписаниеПриложения.Наименование = НСтр("ru = '1С:Кладовщик'");
	ОписаниеПриложения.ВариантНастройки = "Кладовщик";
	ОписаниеПриложения.ВерсияПриложения = "1.0";
	ОписаниеПриложения.КраткаяИнформация = НСтр("ru = 'Приложение для выполнения складских операций со смартфона.'");
	ОписаниеПриложения.СайтПриложения = "https://v8.1c.ru/retail/storekeeper/";
	ОписаниеПриложения.Разработчик = НСтр("ru = '1С'");
	ОписаниеПриложения.СайтРазработчика = "https://mobile.1c.ru/";
	ОписаниеПриложения.ИдентификаторПриложенияGoogle = "com.e1c.storekeeper.market";
	ОписаниеПриложений.Добавить(ОписаниеПриложения);

	ВариантыНастроек.Добавить("МобильнаяКасса");
	ОписаниеПриложения = УправлениеМобильнымиПриложениями.ПараметрыПриложения();
	ОписаниеПриложения.Наименование = НСтр("ru = '1С:Мобильная касса'");
	ОписаниеПриложения.ВариантНастройки = "МобильнаяКасса";
	ОписаниеПриложения.ВерсияПриложения = "3.0";
	ОписаниеПриложения.КраткаяИнформация = НСтр("ru = 'Приложение для ведения торговли со смартфона или планшета. '") +
		НСтр("ru = 'Подходит для небольших торговых точек, курьеров, торговых агентов, мобильной торговли.'");
	ОписаниеПриложения.СайтПриложения = "https://torg.1c.ru/programs/1s-mobilnaya-kassa/";
	ОписаниеПриложения.Разработчик = НСтр("ru = '1С'");
	ОписаниеПриложения.СайтРазработчика = "https://mobile.1c.ru/";
	ОписаниеПриложения.ИдентификаторПриложенияGoogle = "com.e1c.mobilecashboxmarket";
	ОписаниеПриложений.Добавить(ОписаниеПриложения);
	
	ВариантыНастроек.Добавить("ПроверкаЦенников");
	ОписаниеПриложения = УправлениеМобильнымиПриложениями.ПараметрыПриложения();
	ОписаниеПриложения.Наименование = НСтр("ru = '1С:Проверка ценников'");
	ОписаниеПриложения.ВариантНастройки = "ПроверкаЦенников";
	ОписаниеПриложения.ВерсияПриложения = "1.2";
	ОписаниеПриложения.КраткаяИнформация = НСтр("ru = 'Приложение для проверки актуальности ценников в торговом зале.'");
	ОписаниеПриложения.СайтПриложения = "https://v8.1c.ru/retail/checkpricetag/";
	ОписаниеПриложения.Разработчик = НСтр("ru = '1С'");
	ОписаниеПриложения.СайтРазработчика = "https://mobile.1c.ru/";
	ОписаниеПриложения.ИдентификаторПриложенияGoogle = "com.e1c.CheckPriceTag";
	ОписаниеПриложений.Добавить(ОписаниеПриложения);
	
	ВариантыНастроек.Добавить("Заказы");
	ОписаниеПриложения = УправлениеМобильнымиПриложениями.ПараметрыПриложения();
	ОписаниеПриложения.Наименование = НСтр("ru = '1С:Заказы'");
	ОписаниеПриложения.ВариантНастройки = "Заказы";
	ОписаниеПриложения.ВерсияПриложения = "3.0";
	ОписаниеПриложения.КраткаяИнформация = НСтр("ru = 'Приложение для оперативного учета заказов клиентов.'");
	ОписаниеПриложения.СайтПриложения = "https://mobile-orders.1c.ru/";
	ОписаниеПриложения.Разработчик = НСтр("ru = '1С'");
	ОписаниеПриложения.СайтРазработчика = "https://mobile.1c.ru/";
	ОписаниеПриложения.ИдентификаторПриложенияGoogle = "com.e1c.mobile.orders";
	ОписаниеПриложений.Добавить(ОписаниеПриложения);
	
КонецПроцедуры

// Выполняет необходимые действия после записи узла обмена.
// Например, регистрацию настроек к обмену.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//   СтандартнаяОбработка - Булево - признак используется для переопределения действий после записи узла
//
Процедура ПослеЗаписиНастройки(УзелОбмена, СтандартнаяОбработка) Экспорт
	
	ВариантНастройки = УзелОбмена.МобильноеПриложение.ВариантНастройки;
	Если ВариантНастройки = "Кладовщик" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НастройкиОбмена = УзелОбмена.НастройкиОбмена.Получить();
		Если НастройкиОбмена = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Магазин = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			НастройкиОбмена.Отбор, "Магазин");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					Магазин = ЭлементОтбора.ПравоеЗначение;
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Магазин);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Организации = Новый Массив;
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			НастройкиОбмена.Отбор, "Организация");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					Организации.Добавить(ЭлементОтбора.ПравоеЗначение);
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Организации = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
				КонецЕсли;
				Для Каждого Организация Из Организации Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Организация);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если Организации.Количество() = 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Организации);
		КонецЕсли;
	
		Склады = Новый Массив;
		ИспользуетсяОтборПоСкладу = Ложь;
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			НастройкиОбмена.Отбор, "Склад");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				ИспользуетсяОтборПоСкладу = Истина;
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					Склады.Добавить(ЭлементОтбора.ПравоеЗначение);
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Склады = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
				КонецЕсли;
				Для Каждого Склад Из Склады Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Склад);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;  
		
		ВыгружатьВсеТовары = ЗначениеНастройки(УзелОбмена, "ВыгружатьВсеТовары");     
		Если ВыгружатьВсеТовары = Истина Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Номенклатура);
		КонецЕсли;   
		
	ИначеЕсли ВариантНастройки = "Заказы" Тогда    
		
		НастройкиОбмена = УзелОбмена.НастройкиОбмена.Получить();
		Если НастройкиОбмена = Неопределено Тогда  
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Контрагенты);
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.ДоговорыКонтрагентов);
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Номенклатура); 
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Организации); 
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.СтруктурныеЕдиницы); 
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.РегистрыСведений.ОстаткиТоваров);
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.РегистрыСведений.ЦеныНоменклатуры); 
		Иначе
			
			// Данные об организации
			Организации = Новый Массив;
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
				НастройкиОбмена.Отбор, "Организация");
			Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				Если ЭлементОтбора.Использование Тогда
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						Организации.Добавить(ЭлементОтбора.ПравоеЗначение);
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						Организации = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;  
			Если Организации.Количество() > 0 Тогда 
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Организации);     
			Иначе
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Организации); 
			КонецЕсли;
			
			Склады = Новый Массив;
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
				НастройкиОбмена.Отбор, "Склад");
			Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				Если ЭлементОтбора.Использование Тогда
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						Склады.Добавить(ЭлементОтбора.ПравоеЗначение);
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						Склады = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;    
			Если Склады.Количество() > 0 Тогда 
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Склады);     
			Иначе
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.СтруктурныеЕдиницы); 
			КонецЕсли;
			
			// Данные о клиентах
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
				НастройкиОбмена.Отбор, "СегментКонтрагентов");      
			Если ЭлементыОтбора.Количество() > 0 Тогда
				СегментКонтрагентов = ЭлементыОтбора[0].ПравоеЗначение;	
				ИспользованиеСегмента = ЭлементыОтбора[0].Использование;  
			Иначе
				СегментКонтрагентов = Справочники.СегментыКонтрагентов.ПустаяСсылка();	
				ИспользованиеСегмента = Ложь;  
			КонецЕсли;
			ЗапросОтбора = Новый Запрос;
			ЗапросОтбора.УстановитьПараметр("СегментКонтрагентов", СегментКонтрагентов);
			ЗапросОтбора.УстановитьПараметр("ЕстьОтборПоСегменту", ЗначениеЗаполнено(СегментКонтрагентов) И ИспользованиеСегмента);
			ЗапросОтбора.УстановитьПараметр("Организации", Организации);
			ЗапросОтбора.УстановитьПараметр("ЕстьОтборПоОрганизации", Организации.Количество() >0);
			ЗапросОтбора.Текст = "ВЫБРАТЬ
			                     |	Контрагенты.Ссылка КАК Контрагент
			                     |ПОМЕСТИТЬ ВыгружаемыеКонтрагенты
			                     |ИЗ
			                     |	Справочник.Контрагенты КАК Контрагенты
			                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставСегментаКонтрагентов КАК СоставСегментаКонтрагентов
			                     |		ПО (СоставСегментаКонтрагентов.Контрагент = Контрагенты.Ссылка)
			                     |ГДЕ
			                     |	НЕ Контрагенты.ЭтоГруппа
			                     |	И ВЫБОР
			                     |			КОГДА &ЕстьОтборПоСегменту
			                     |				ТОГДА СоставСегментаКонтрагентов.Сегмент = &СегментКонтрагентов
			                     |			ИНАЧЕ ИСТИНА
			                     |		КОНЕЦ
			                     |;
			                     |
			                     |////////////////////////////////////////////////////////////////////////////////
			                     |ВЫБРАТЬ
			                     |	ВыгружаемыеКонтрагенты.Контрагент КАК Контрагент
			                     |ИЗ
			                     |	ВыгружаемыеКонтрагенты КАК ВыгружаемыеКонтрагенты
			                     |;
			                     |
			                     |////////////////////////////////////////////////////////////////////////////////
			                     |ВЫБРАТЬ
			                     |	ДоговорыКонтрагентов.Ссылка КАК Договор
			                     |ИЗ
			                     |	ВыгружаемыеКонтрагенты КАК ВыгружаемыеКонтрагенты
			                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			                     |		ПО ВыгружаемыеКонтрагенты.Контрагент = ДоговорыКонтрагентов.Владелец
			                     |ГДЕ
			                     |	ВЫБОР
			                     |			КОГДА &ЕстьОтборПоОрганизации
			                     |				ТОГДА ДоговорыКонтрагентов.Организация В (&Организации)
			                     |			ИНАЧЕ ИСТИНА
			                     |		КОНЕЦ";   
			
			РезультатыЗапроса = ЗапросОтбора.ВыполнитьПакет();
			Если Не РезультатыЗапроса[1].Пустой() Тогда
				Выборка = РезультатыЗапроса[1].Выбрать();
				Пока Выборка.Следующий() Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Контрагент);     
				КонецЦикла;
			КонецЕсли;
			Если Не РезультатыЗапроса[2].Пустой() Тогда
				Выборка = РезультатыЗапроса[2].Выбрать();
				Пока Выборка.Следующий() Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Договор);     
				КонецЦикла;
			КонецЕсли;
			
			// Данные о товарах
			ВидыЦен = Новый Массив;
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
				НастройкиОбмена.Отбор, "ВидЦен");
			Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				Если ЭлементОтбора.Использование Тогда
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ВидыЦен.Добавить(ЭлементОтбора.ПравоеЗначение);
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ВидыЦен = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;    
			
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
				НастройкиОбмена.Отбор, "СегментНоменклатуры");      
			Если ЭлементыОтбора.Количество() > 0 Тогда
				СегментНоменклатуры = ЭлементыОтбора[0].ПравоеЗначение;	
				ИспользованиеСегмента = ЭлементыОтбора[0].Использование;
			Иначе
				СегментНоменклатуры = Справочники.СегментыНоменклатуры.ПустаяСсылка();	
				ИспользованиеСегмента = Ложь;  
			КонецЕсли;
			ЗапросОтбора = Новый Запрос;
			ЗапросОтбора.УстановитьПараметр("СегментНоменклатуры", СегментНоменклатуры);
			ЗапросОтбора.УстановитьПараметр("ЕстьОтборПоСегменту", ЗначениеЗаполнено(СегментНоменклатуры) И ИспользованиеСегмента);
			ЗапросОтбора.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());   
			
			ЗапросОтбора.УстановитьПараметр("Период", ТекущаяДатаСеанса());
			ЗапросОтбора.УстановитьПараметр("ВидыЦен", ВидыЦен); 
			ЗапросОтбора.УстановитьПараметр("ЕстьОтборПоВидамЦен", ВидыЦен.Количество() > 0); 
			
			ЗапросОтбора.УстановитьПараметр("ДокументУстановкиПустаяСсылка", Документы.УстановкаЦенНоменклатуры.ПустаяСсылка());
			ЗапросОтбора.Текст = "ВЫБРАТЬ
			                     |	Номенклатура.Ссылка КАК Номенклатура,
			                     |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
			                     |	1 КАК Связь
			                     |ПОМЕСТИТЬ ОбъединенныеТовары
			                     |ИЗ
			                     |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			                     |		ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
			                     |ГДЕ
			                     |	НЕ Номенклатура.ЭтоГруппа
			                     |
			                     |ОБЪЕДИНИТЬ ВСЕ
			                     |
			                     |ВЫБРАТЬ
			                     |	Номенклатура.Ссылка,
			                     |	ХарактеристикиНоменклатуры.Ссылка,
			                     |	2
			                     |ИЗ
			                     |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			                     |		ПО ХарактеристикиНоменклатуры.Владелец = Номенклатура.КатегорияНоменклатуры
			                     |ГДЕ
			                     |	НЕ Номенклатура.ЭтоГруппа
			                     |
			                     |ОБЪЕДИНИТЬ ВСЕ
			                     |
			                     |ВЫБРАТЬ
			                     |	Номенклатура.Ссылка,
			                     |	&ПустаяХарактеристика,
			                     |	3
			                     |ИЗ
			                     |	Справочник.Номенклатура КАК Номенклатура
			                     |ГДЕ
			                     |	НЕ Номенклатура.ЭтоГруппа
			                     |;
			                     |
			                     |////////////////////////////////////////////////////////////////////////////////
			                     |ВЫБРАТЬ
			                     |	ОбъединенныеТовары.Номенклатура КАК Номенклатура,
			                     |	ОбъединенныеТовары.Характеристика КАК Характеристика,
			                     |	МАКСИМУМ(ОбъединенныеТовары.Связь) КАК Связь
			                     |ПОМЕСТИТЬ СгруппированныеТовары
			                     |ИЗ
			                     |	ОбъединенныеТовары КАК ОбъединенныеТовары
			                     |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
			                     |		ПО ОбъединенныеТовары.Номенклатура = СоставСегментаНоменклатуры.Номенклатура
			                     |			И ОбъединенныеТовары.Характеристика = СоставСегментаНоменклатуры.Характеристика
			                     |ГДЕ
			                     |	ВЫБОР
			                     |			КОГДА &ЕстьОтборПоСегменту
			                     |				ТОГДА СоставСегментаНоменклатуры.Сегмент = &СегментНоменклатуры
			                     |			ИНАЧЕ ИСТИНА
			                     |		КОНЕЦ
			                     |
			                     |СГРУППИРОВАТЬ ПО
			                     |	ОбъединенныеТовары.Номенклатура,
			                     |	ОбъединенныеТовары.Характеристика
			                     |;
			                     |
			                     |////////////////////////////////////////////////////////////////////////////////
			                     |ВЫБРАТЬ
			                     |	СгруппированныеТовары.Номенклатура КАК Номенклатура,
			                     |	СгруппированныеТовары.Характеристика КАК Характеристика
			                     |ИЗ
			                     |	СгруппированныеТовары КАК СгруппированныеТовары
			                     |;
			                     |
			                     |////////////////////////////////////////////////////////////////////////////////
			                     |ВЫБРАТЬ
			                     |	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
			                     |	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
			                     |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			                     |	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
			                     |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			                     |ИЗ
			                     |	СгруппированныеТовары КАК СгруппированныеТовары
			                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			                     |				&Период,
			                     |				НЕ &ЕстьОтборПоВидамЦен
			                     |					ИЛИ ВидЦен В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
			                     |		ПО СгруппированныеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			                     |			И СгруппированныеТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
			                     |;
			                     |
			                     |////////////////////////////////////////////////////////////////////////////////
			                     |ВЫБРАТЬ
			                     |	ОстаткиТоваров.Организация КАК Организация,
			                     |	ОстаткиТоваров.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
			                     |	ОстаткиТоваров.Номенклатура КАК Номенклатура,
			                     |	ОстаткиТоваров.Характеристика КАК Характеристика,
			                     |	ОстаткиТоваров.Партия КАК Партия,
			                     |	ОстаткиТоваров.Количество КАК Количество
			                     |ИЗ
			                     |	СгруппированныеТовары КАК СгруппированныеТовары
			                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
			                     |		ПО СгруппированныеТовары.Номенклатура = ОстаткиТоваров.Номенклатура
			                     |			И СгруппированныеТовары.Характеристика = ОстаткиТоваров.Характеристика";
			
			РезультатыЗапроса = ЗапросОтбора.ВыполнитьПакет();
			Если Не РезультатыЗапроса[2].Пустой() Тогда
				Выборка = РезультатыЗапроса[2].Выбрать();
				Пока Выборка.Следующий() Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Номенклатура);     
				КонецЦикла;
			КонецЕсли;
			Если Не РезультатыЗапроса[3].Пустой() Тогда
				Выборка = РезультатыЗапроса[3].Выбрать();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
					НаборЗаписей.Отбор.ВидЦен.Установить(Выборка.ВидЦен);
					НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
					НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, НаборЗаписей);
				КонецЦикла;
			КонецЕсли;
			Если Не РезультатыЗапроса[4].Пустой() Тогда
				Выборка = РезультатыЗапроса[4].Выбрать();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = РегистрыСведений.ОстаткиТоваров.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
					НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Выборка.СтруктурнаяЕдиница);
					НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
					НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
					НаборЗаписей.Отбор.Партия.Установить(Выборка.Партия);
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, НаборЗаписей);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Выполняет необходимые действия перед записью узла обмена.
// Например, регистрацию настроек к обмену.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//   СтандартнаяОбработка - Булево - признак используется для переопределения действий после записи узла
//
Процедура ПередЗаписьюНастройки(ВариантНастройки, СтруктураПараметровОтбора, СтандартнаяОбработка) Экспорт
	
	Если ВариантНастройки = "ПроверкаЦенников" Тогда     
		
		СтруктураКлючевыхПараметров = Новый Структура;
		СтруктураКлючевыхПараметров.Вставить("ТипОфлайнОборудования", ПредопределенноеЗначение("Перечисление.ТипыОфлайнОборудования.ПрайсЧекер"));				
		СтруктураКлючевыхПараметров.Вставить("ТипПодключенияОборудования", ПредопределенноеЗначение("Перечисление.ТипыПодключенияОборудования.ЛокальноеПодключение"));				
		СтруктураКлючевыхПараметров.Вставить("ОбработчикОфлайнОборудования", ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.Обработчик1СККМОфлайн"));				
		СтруктураКлючевыхПараметров.Вставить("РабочееМесто", СтруктураПараметровОтбора.РабочееМесто);				
		СтруктураКлючевыхПараметров.Вставить("ИдентификаторWebСервисОборудования", СтруктураПараметровОтбора.ИдентификаторWebСервисОборудования);			
		
		НачатьТранзакцию();
		Попытка
		
			ЗапросПодключаемогоОборудования = Новый Запрос;
			Для Каждого КлючЗначение Из СтруктураКлючевыхПараметров Цикл
				ЗапросПодключаемогоОборудования.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			ЗапросПодключаемогоОборудования.Текст = "ВЫБРАТЬ
			                                        |	ОфлайнОборудование.Ссылка КАК ПодключаемоеОборудование
			                                        |ИЗ
			                                        |	Справочник.ОфлайнОборудование КАК ОфлайнОборудование
			                                        |ГДЕ
			                                        |	ОфлайнОборудование.ТипОфлайнОборудования = &ТипОфлайнОборудования
			                                        |	И ОфлайнОборудование.ОбработчикОфлайнОборудования = &ОбработчикОфлайнОборудования
			                                        |	И ОфлайнОборудование.ИдентификаторWebСервисОборудования = &ИдентификаторWebСервисОборудования
			                                        |	И ОфлайнОборудование.РабочееМесто = &РабочееМесто
			                                        |	И ОфлайнОборудование.ТипПодключенияОборудования = &ТипПодключенияОборудования";
			
			Результат = ЗапросПодключаемогоОборудования.Выполнить();
			Если Результат.Пустой() Тогда
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ОфлайнОборудование");
				ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
				БлокировкаДанных.Заблокировать();
				ОфлайнОборудованиеОбъект = Справочники.ОфлайнОборудование.СоздатьЭлемент();
				
			Иначе  
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ОфлайнОборудование");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ПодключаемоеОборудование);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();    
				ОфлайнОборудованиеОбъект = Выборка.ПодключаемоеОборудование.ПолучитьОбъект();      
				
			КонецЕсли; 
		
			ЗаполнитьЗначенияСвойств(ОфлайнОборудованиеОбъект, СтруктураКлючевыхПараметров);
			ОфлайнОборудованиеОбъект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметровОтбора.ПравилоОбмена, "Организация");
			Наименование = НСтр("ru='1С:Проверка ценников (%1)'");
			ОфлайнОборудованиеОбъект.Наименование = СтрШаблон(Наименование, СтруктураКлючевыхПараметров.ИдентификаторWebСервисОборудования);
			ОфлайнОборудованиеОбъект.ПравилоОбмена = СтруктураПараметровОтбора.ПравилоОбмена;
			ОфлайнОборудованиеОбъект.Записать();     
			
			ПараметрыОборудования = Новый Структура;
			ПараметрыОборудования.Вставить("ВерсияФорматаОбмена", 1007);
			ПараметрыОборудования.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.WS);
			ПараметрыОборудования.Вставить("УдалитьИдентификаторWebСервисОборудования", СтруктураКлючевыхПараметров.ИдентификаторWebСервисОборудования);
			ПараметрыОборудования.Вставить("КоличествоЭлементовВПакете", СтруктураПараметровОтбора.КоличествоЭлементовВПакете);
			
			МодульМенеджерОфлайнОборудованияВызовСервера = ОбщегоНазначения.ОбщийМодуль("МенеджерОфлайнОборудованияВызовСервера");
			РезультатЗаписиНастроек = МодульМенеджерОфлайнОборудованияВызовСервера.СохранитьПараметрыУстройства(ОфлайнОборудованиеОбъект.Ссылка, ПараметрыОборудования);
			
			Если НЕ РезультатЗаписиНастроек Тогда 
				СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;          
			
			СтруктураПараметровОтбора.Вставить("УзелИнформационнойБазы", ОфлайнОборудованиеОбъект.УзелИнформационнойБазы);
			
			ЗафиксироватьТранзакцию();
		Исключение   
			ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));    
			Отказ = Истина;
			Возврат;
		КонецПопытки;

	КонецЕсли;
	
КонецПроцедуры

// Изменяет компоновщик настроек при изменении обязательной настройки.
//
// Параметры:
//  ИмяНастройки - Строка - имя элемента формы, который был изменен и является обязательным
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных с настройками приложения
//
Процедура ПриИзмененииОбязательнойНастройки(ИмяНастройки, КомпоновщикНастроек) Экспорт
	
	Если ИмяНастройки <> "Магазин" Тогда
		Возврат;
	КонецЕсли;

	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		КомпоновщикНастроек.Настройки.Отбор, "Склад");
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		ЭлементОтбораСклад = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементОтбораСклад <> Неопределено Тогда
			ЭлементОтбораСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораСклад.ПравоеЗначение = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			ЭлементОтбораСклад.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Используется для проверки изменений компоновщика настроек.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма узла обмена
//   КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных с настройками приложения
//
Процедура ПриИзмененииТаблицыНастроек(Форма, КомпоновщикНастроек) Экспорт
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		КомпоновщикНастроек.Настройки.Отбор, "Склад");
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		ЭлементОтбораСклад = 
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементОтбораСклад = Неопределено
			Или (ЭлементОтбораСклад <> Неопределено И Не ЭлементОтбораСклад.Использование) Тогда
			Возврат;
		ИначеЕсли ЭлементОтбораСклад <> Неопределено Тогда
			Если ЭлементОтбораСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Если ЭлементОтбораСклад.ПравоеЗначение.Количество() = 0 Тогда
					ЭлементОтбораСклад.Использование = Ложь;
					Возврат;
				КонецЕсли;
			ИначеЕсли Не ЗначениеЗаполнено(ЭлементОтбораСклад.ПравоеЗначение) Тогда
				ЭлементОтбораСклад.Использование = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементМагазин = Форма.Элементы.Найти("Магазин");
	Если ЭлементМагазин <> Неопределено Тогда
		Магазин = Форма[ЭлементМагазин.ПутьКДанным];
		Если Не ЗначениеЗаполнено(Магазин) Тогда
			Магазин = Неопределено;
		КонецЕсли;
	Иначе
		Магазин = Неопределено;
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор,
		"Организация");
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		ЭлементОтбораОрганизация = 
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементОтбораОрганизация <> Неопределено 
			И ЭлементОтбораОрганизация.Использование Тогда
			Если ЭлементОтбораОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Для Каждого Организация Из ЭлементОтбораОрганизация.ПравоеЗначение Цикл
					Если ЗначениеЗаполнено(Организация.Значение) Тогда
						МассивОрганизаций.Добавить(Организация.Значение);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(ЭлементОтбораОрганизация.ПравоеЗначение) Тогда
				МассивОрганизаций.Добавить(ЭлементОтбораОрганизация.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Магазин = Неопределено И МассивОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементОтбораСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		МассивСкладов = Новый Массив;
		
		Для Каждого ЭлементСклад Из ЭлементОтбораСклад.ПравоеЗначение Цикл
			Склад = ЭлементСклад.Значение;
			
			ОтказМагазин = Ложь;
			Если Магазин <> Неопределено И Склад.Магазин <> Магазин Тогда
				ОтказМагазин = Истина;
			КонецЕсли;
			
			ОтказОрганизация = Ложь;
			Если МассивОрганизаций.Количество() > 0
				И МассивОрганизаций.Найти(Склад.Организация) = Неопределено Тогда
				ОтказОрганизация = Истина;
			КонецЕсли;
			
			Если ОтказМагазин Или ОтказОрганизация Тогда
				Если ОтказМагазин И ОтказОрганизация Тогда
					ПредставлениеОтбора = "по магазину и организации";
				ИначеЕсли ОтказМагазин Тогда
					ПредставлениеОтбора = "по магазину";
				Иначе
					ПредставлениеОтбора = "по организации";
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Склад ""%1"" не входит в отбор %2'"), Склад, ПредставлениеОтбора);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				МассивСкладов.Добавить(Склад);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСкладов.Количество() = 0 Тогда
			ЭлементОтбораСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораСклад.ПравоеЗначение = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			ЭлементОтбораСклад.Использование = Ложь;
		Иначе
			ЭлементОтбораСклад.ПравоеЗначение.ЗагрузитьЗначения(МассивСкладов);
		КонецЕсли;
	Иначе
		Склад = ЭлементОтбораСклад.ПравоеЗначение;
		
		ОтказМагазин = Ложь;
		Если Магазин <> Неопределено И Склад.Магазин <> Магазин Тогда
			ОтказМагазин = Истина;
		КонецЕсли;
		
		ОтказОрганизация = Ложь;
		Если МассивОрганизаций.Количество() > 0
			И МассивОрганизаций.Найти(Склад.Организация) = Неопределено Тогда
			ОтказОрганизация = Истина;
		КонецЕсли;
		
		Если ОтказМагазин Или ОтказОрганизация Тогда
			Если ОтказМагазин И ОтказОрганизация Тогда
				ПредставлениеОтбора = "по магазину и организации";
			ИначеЕсли ОтказМагазин Тогда
				ПредставлениеОтбора = "по магазину";
			Иначе
				ПредставлениеОтбора = "по организации";
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Склад ""%1"" не входит в отбор %2'"), Склад, ПредставлениеОтбора);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ЭлементОтбораСклад.ПравоеЗначение = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
			ЭлементОтбораСклад.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список настроек мобильного приложения.
//
// Параметры:
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения
//  НастройкиПриложения - Соответствие - см. УправлениеМобильнымиПриложениями.НастройкаПриложения
//
Процедура ПриОпределенииНастроекПриложения(МобильноеПриложение, НастройкиПриложения) Экспорт
	
	Если МобильноеПриложение.ВариантНастройки = "Кладовщик" Тогда

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ПорядокВГруппе = 11;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Склад, по которому будут отбираться документы к выгрузке в мобильное приложение'");
		НастройкиПриложения.Вставить("Магазин", НастройкаПриложения);
		
		
		// Состояния
		ГруппаДляСборки = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаДляСборки.Имя = "ГруппаНастроекДляСборки";  
		ГруппаДляСборки.Заголовок = НСтр("ru = 'Заказ покупателя: Для сборки'"); 
		ГруппаДляСборки.Горизонтально = Истина;
 		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаДляСборки;
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ПорядокВГруппе = 22;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Заказы покупателя с этим состоянием попадут в выгрузку в мобильное приложение'");
		НастройкаПриложения.ОбрабатыватьПоведениеАвтоПодбор = Истина;
		НастройкиПриложения.Вставить("СостояниеЗаказаДляСборки", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.Вставить("ГруппаФормы", ГруппаДляСборки);
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьВидыЗаказовПокупателей";
		НастройкаПриложения.ПорядокВГруппе = 21;
		НастройкаПриложения.ОбрабатыватьПоведениеАвтоПодбор = Истина;
		НастройкаПриложения.ОбрабатыватьПоведениеПриИзменении = Истина;
		НастройкиПриложения.Вставить("ВидЗаказаПокупателяДляСборки", НастройкаПриложения);
		
		ГруппаСобран = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаСобран.Имя = "ГруппаНастроекСобран";
		ГруппаСобран.Заголовок = НСтр("ru = 'Заказ покупателя: Собран'"); 
		ГруппаСобран.Горизонтально = Истина;
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаСобран;
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ПорядокВГруппе = 24;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Это состояние будет установлено в заказ покупателя, когда он вернется из приложения'");
		НастройкаПриложения.ОбрабатыватьПоведениеАвтоПодбор = Истина;
		НастройкиПриложения.Вставить("СостояниеЗаказаСобран", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаСобран;
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьВидыЗаказовПокупателей";
		НастройкаПриложения.ПорядокВГруппе = 23;
		НастройкаПриложения.ОбрабатыватьПоведениеАвтоПодбор = Истина;
		НастройкаПриложения.ОбрабатыватьПоведениеПриИзменении = Истина;
		НастройкиПриложения.Вставить("ВидЗаказаПокупателяСобран", НастройкаПриложения);

		ГруппаДляПриемки = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаДляПриемки.Имя = "ГруппаНастроекДляПриемки";
		ГруппаДляПриемки.Заголовок = НСтр("ru = 'Заказ поставщику: Для приемки'"); 
		ГруппаДляПриемки.Горизонтально = Истина;

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаДляПриемки;
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ПорядокВГруппе = 25;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Заказы поставщику с этим состоянием попадут в выгрузку в мобильное приложение'");
		НастройкиПриложения.Вставить("СостояниеЗаказаПоставщикуДляПриемки", НастройкаПриложения);


		ГруппаПринят = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаПринят.Имя = "ГруппаНастроекПринят";
		ГруппаПринят.Заголовок = НСтр("ru = 'Заказ поставщику: Принят'"); 
		ГруппаПринят.Горизонтально = Истина;

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаПринят;
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ПорядокВГруппе = 26;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Это состояние будет установлено в заказ поставщику, когда он вернется из приложения'");
		НастройкиПриложения.Вставить("СостояниеЗаказаПоставщикуПринят", НастройкаПриложения);

		
		// Диспетчеризация
		ГруппаДиспетчеризация = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаДиспетчеризация.Имя = "ГруппаНастроекДиспетчеризация";
		ГруппаДиспетчеризация.Заголовок = НСтр("ru = 'Диспетчеризация'"); 
		ГруппаДиспетчеризация.Горизонтально = Истина;

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаДиспетчеризация;
		НастройкаПриложения.ПорядокВГруппе = 43;
		НастройкаПриложения.ОбрабатыватьПоведениеПриИзменении = Истина;
		НастройкиПриложения.Вставить("ИспользоватьДиспетчеризациюЗаданий", НастройкаПриложения);     
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаДиспетчеризация;
		НастройкаПриложения.ПорядокВГруппе = 44;
		НастройкаПриложения.Подсказка = НСтр("ru = 'При включенной диспетчеризации документы будут выгружаться только по указанному кладовщику-ответственному'");
		НастройкиПриложения.Вставить("Кладовщик", НастройкаПриложения);

		
		// Флажки
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 52;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает выгрузку в приложении всего номенклатурного справочника'");
		НастройкиПриложения.Вставить("ВыгружатьВсеТовары", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 52;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает в приложении возможность ввода поступления без предварительной выгрузки документов'");
		НастройкиПриложения.Вставить("ИспользоватьСвободныйВводПоступлений", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 53;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает в приложении возможность ввода сборок без предварительной выгрузки документов'");
		НастройкиПриложения.Вставить("ИспользоватьСвободныйВводСборок", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьСерииНоменклатуры";
		НастройкаПриложения.ПорядокВГруппе = 54;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает использование серий номенклатуры в приложении'");
		НастройкиПриложения.Вставить("ИспользоватьСерии", НастройкаПриложения);
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ИмяФункциональнойОпции = "УчетВРазличныхЕдиницахИзмерения";
		НастройкаПриложения.ПорядокВГруппе = 55;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает использование упаковок в приложении'");
		НастройкиПриложения.Вставить("ИспользоватьЕдиницыИзмерений", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 56;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Разрешает выгрузку в документах сведений о весе товаров'");
		НастройкиПриложения.Вставить("ИспользоватьВес", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 57;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Разрешает свободное редактирование цен в документах поступления в приложении'");
		НастройкиПриложения.Вставить("РедактироватьЦеныТоваров", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьОрдерныйСклад";
		НастройкаПриложения.ПорядокВГруппе = 58;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает создание расходного ордера после загрузки выполненного заказа покупателя'");
		НастройкиПриложения.Вставить("СоздаватьОрдерПоЗаказуПокупателя", НастройкаПриложения);
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьОрдерныйСклад";
		НастройкаПриложения.ПорядокВГруппе = 59;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает создание приходного ордера после загрузки выполненного заказа поставщику'");
		НастройкиПриложения.Вставить("СоздаватьОрдерПоЗаказуПоставщику", НастройкаПриложения);
		
		
		// Варианты загрузки
		ГруппаВариантыЗагрузки = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаВариантыЗагрузки.Имя = "ГруппаВариантыЗагрузки";
		ГруппаВариантыЗагрузки.Заголовок = НСтр("ru = 'Варианты загрузки'"); 

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаВариантыЗагрузки;
		НастройкаПриложения.ПорядокВГруппе = 61;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Загружать ли заказ покупателя в исходный документ, затирая/не изменяя изначальное количество или же создавать подчиненную расходную накладную'");
		НастройкиПриложения.Вставить("ВариантЗагрузкиЗаказаПокупателя", НастройкаПриложения);     

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаВариантыЗагрузки;
		НастройкаПриложения.ПорядокВГруппе = 62;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Загружать ли заказ поставщику в исходный документ или создавать подчиненную приходную накладную'");
		НастройкиПриложения.Вставить("ВариантЗагрузкиЗаказаПоставщику", НастройкаПриложения);     

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаВариантыЗагрузки;
		НастройкаПриложения.ПорядокВГруппе = 63;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Загружать ли ранее выгруженную и обработанную в приложении приходную накладную с заменой исходного количества, или же регистрировать в накладной расхождения'");
		НастройкиПриложения.Вставить("ВариантЗагрузкиПриходнойНакладной", НастройкаПриложения);     
		
		
		// Запреты
 		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 71;
		НастройкаПриложения.ИдентификаторСтроки = "Приемка";
		НастройкаПриложения.ИдентификаторКолонки = "СкрыватьЦену";
		НастройкаПриложения.ЗаголовокКолонки =  НСтр("ru = 'Скрывать цену'");
		НастройкаПриложения.Подсказка = НСтр("ru = 'Скрывать ли колонку цены в приложении у этого вида документа'");
		НастройкиПриложения.Вставить("Приемка_СкрыватьЦену", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 72;
		НастройкаПриложения.ИдентификаторСтроки = "Приемка";
		НастройкаПриложения.ИдентификаторКолонки = "СкрыватьПлан";
		НастройкаПриложения.ЗаголовокКолонки =  НСтр("ru = 'Скрывать план'");
		НастройкаПриложения.Подсказка = НСтр("ru = 'Скрывать ли колонки планового количества в приложении у этого вида документа'");
		НастройкиПриложения.Вставить("Приемка_СкрыватьПлан", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 73;
		НастройкаПриложения.ИдентификаторСтроки = "Приемка";
		НастройкаПриложения.ИдентификаторКолонки = "ЗапретДобавленияТовара";
		НастройкаПриложения.ЗаголовокКолонки =  НСтр("ru = 'Запрет добавления товара'");
		НастройкаПриложения.Подсказка = НСтр("ru = 'Запрещать ли свободное добавление товара из справочника в этот вид документа приложения'");
		НастройкиПриложения.Вставить("Приемка_ЗапретДобавленияТовара", НастройкаПриложения);
		
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 74;
		НастройкаПриложения.ИдентификаторСтроки = "Сборка";
		НастройкаПриложения.ИдентификаторКолонки = "СкрыватьЦену";
		НастройкаПриложения.ЗаголовокКолонки =  НСтр("ru = 'Скрывать цену'");
		НастройкаПриложения.Подсказка = НСтр("ru = 'Скрывать ли колонку цены в приложении у этого вида документа'");
		НастройкиПриложения.Вставить("Сборка_СкрыватьЦену", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 75;
		НастройкаПриложения.ИдентификаторСтроки = "Сборка";
		НастройкаПриложения.ИдентификаторКолонки = "СкрыватьПлан";
		НастройкаПриложения.ЗаголовокКолонки =  НСтр("ru = 'Скрывать план'");
		НастройкаПриложения.Подсказка = НСтр("ru = 'Скрывать ли колонки планового количества в приложении у этого вида документа'");
		НастройкиПриложения.Вставить("Сборка_СкрыватьПлан", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 76;
		НастройкаПриложения.ИдентификаторСтроки = "Сборка";
		НастройкаПриложения.ИдентификаторКолонки = "ЗапретДобавленияТовара";
		НастройкаПриложения.ЗаголовокКолонки =  НСтр("ru = 'Запрет добавления товара'");
		НастройкаПриложения.Подсказка = НСтр("ru = 'Запрещать ли свободное добавление товара из справочника в этот вид документа приложения'");
		НастройкиПриложения.Вставить("Сборка_ЗапретДобавленияТовара", НастройкаПриложения);   

		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 77;
		НастройкаПриложения.ИдентификаторСтроки = "Пересчет";
		НастройкаПриложения.ИдентификаторКолонки = "СкрыватьЦену";
		НастройкаПриложения.ЗаголовокКолонки =  НСтр("ru = 'Скрывать цену'");
		НастройкаПриложения.Подсказка = НСтр("ru = 'Скрывать ли колонку цены в приложении у этого вида документа'");
		НастройкиПриложения.Вставить("Пересчет_СкрыватьЦену", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 78;
		НастройкаПриложения.ИдентификаторСтроки = "Пересчет";
		НастройкаПриложения.ИдентификаторКолонки = "СкрыватьПлан";
		НастройкаПриложения.ЗаголовокКолонки =  НСтр("ru = 'Скрывать план'");
		НастройкаПриложения.Подсказка = НСтр("ru = 'Скрывать ли колонки планового количества в приложении у этого вида документа'");
		НастройкиПриложения.Вставить("Пересчет_СкрыватьПлан", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ПорядокВГруппе = 79;
		НастройкаПриложения.ИдентификаторСтроки = "Пересчет";
		НастройкаПриложения.ИдентификаторКолонки = "ЗапретДобавленияТовара";
		НастройкаПриложения.ЗаголовокКолонки =  НСтр("ru = 'Запрет добавления товара'");
		НастройкаПриложения.Подсказка = НСтр("ru = 'Запрещать ли свободное добавление товара из справочника в этот вид документа приложения'");
		НастройкиПриложения.Вставить("Пересчет_ЗапретДобавленияТовара", НастройкаПриложения);     
		
		// Виды цен
		ГруппаВидыЦен = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаВидыЦен.Имя = "ГруппаВидыЦен";
		ГруппаВидыЦен.Заголовок = НСтр("ru = 'Виды цен'"); 
		ГруппаВидыЦен.Горизонтально = Истина;

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаВидыЦен;
		НастройкаПриложения.ПорядокВГруппе = 81;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Цена по выбранному виду цен будет выгружена в товар как Цена закупки'");
		НастройкиПриложения.Вставить("ВидЦенЗакупки", НастройкаПриложения);     

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаВидыЦен;
		НастройкаПриложения.ПорядокВГруппе = 82;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Цена по выбранному виду цен будет выгружена в товар как Цена продажи'");
		НастройкиПриложения.Вставить("ВидЦенПродажи", НастройкаПриложения);     
		
		// Создание номенклатуры
		ГруппаСозданиеНоменклатуры = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаСозданиеНоменклатуры.Имя = "ГруппаСозданиеНоменклатуры";
		ГруппаСозданиеНоменклатуры.Заголовок = НСтр("ru = 'Создаваемая в приложении номенклатура'"); 

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаСозданиеНоменклатуры;
		НастройкаПриложения.ПорядокВГруппе = 91;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Номенклатура, которую создали в приложении, будут загружена в эту папку'");     
		НастройкаПриложения.ВыбиратьГруппу = Истина;
		НастройкиПриложения.Вставить("ПапкаНовойНоменклатуры", НастройкаПриложения);     

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаСозданиеНоменклатуры;
		НастройкаПриложения.ПорядокВГруппе = 92;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Номенклатура, которую создали в приложении, будут загружена с этой категорией'");
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкиПриложения.Вставить("КатегорияНовойНоменклатуры", НастройкаПриложения);     

		
		// Отборы
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ЭтоОтбор = Истина;
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьНесколькоОрганизаций";
		НастройкиПриложения.Вставить("Организация", НастройкаПриложения);
		
			
	ИначеЕсли МобильноеПриложение.ВариантНастройки = "Заказы" Тогда
		
		// Оплата наличными
		ГруппаОплатаНаличными = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаОплатаНаличными.Имя = "ГруппаНастроекОплатаНаличными";
		ГруппаОплатаНаличными.Заголовок = НСтр("ru = 'Оплата наличными'");  

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаОплатаНаличными;
		НастройкаПриложения.ПорядокВГруппе = 11;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Разрешает использовать в приложении вид оплаты ""Наличная""'");
		НастройкаПриложения.ОбрабатыватьПоведениеПриИзменении = Истина;
		НастройкиПриложения.Вставить("РегистрироватьОплатыПКО", НастройкаПриложения);
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаОплатаНаличными;
		НастройкаПриложения.ПорядокВГруппе = 12;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Приходные кассовые ордера будут создаваться с этой кассой'");
		НастройкиПриложения.Вставить("Касса",  НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ГруппаФормы = ГруппаОплатаНаличными;
		НастройкаПриложения.ПорядокВГруппе = 13;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Приходные кассовые ордера будут создаваться с этой статьей'");
		НастройкиПриложения.Вставить("СтатьяДДСНаличные", НастройкаПриложения);  
		
		
		// Оплата картами
		ГруппаОплатаКартами = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаОплатаКартами.Имя = "ГруппаНастроекОплатаКартами";
		ГруппаОплатаКартами.Заголовок = НСтр("ru = 'Оплата по платежным картам'");  
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьОплатуКартами";
  		НастройкаПриложения.ПорядокВГруппе = 21;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Разрешает использовать в приложении вид оплаты ""Платежной картой""'");
		НастройкаПриложения.ГруппаФормы = ГруппаОплатаКартами;
		НастройкаПриложения.ОбрабатыватьПоведениеПриИзменении = Истина;
		НастройкиПриложения.Вставить("РегистрироватьОплатыПоПлатежнымКартам", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьОплатуКартами";
		НастройкаПриложения.ПорядокВГруппе =22;
  		НастройкаПриложения.Подсказка = НСтр("ru = 'Операции по платежной карте будут создаваться с этим терминалом'");
		НастройкаПриложения.ГруппаФормы = ГруппаОплатаКартами;
		НастройкиПриложения.Вставить("ЭквайринговыйТерминал", НастройкаПриложения);
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
  		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьОплатуКартами";
		НастройкаПриложения.ПорядокВГруппе = 23;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Операции по платежной карте будут создаваться с этой статьей'");
		НастройкаПриложения.ГруппаФормы = ГруппаОплатаКартами;
		НастройкиПриложения.Вставить("СтатьяДДСЭквайринг", НастройкаПриложения);


		// Прочие настройки
		ГруппаЗаданиеТорговомуПредставителю = УправлениеМобильнымиПриложениями.ГруппаФормы();     
		ГруппаЗаданиеТорговомуПредставителю.Имя = "ГруппаНастроекДляСборки";  
		ГруппаЗаданиеТорговомуПредставителю.Заголовок = НСтр("ru = 'Задание торговому представителю'"); 
		ГруппаЗаданиеТорговомуПредставителю.Горизонтально = Истина;

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
  		НастройкаПриложения.ГруппаФормы = ГруппаЗаданиеТорговомуПредставителю;
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьВидыЗаказовПокупателей";
		НастройкаПриложения.ПорядокВГруппе = 31;
		НастройкаПриложения.ОбрабатыватьПоведениеАвтоПодбор = Истина;
		НастройкаПриложения.ОбрабатыватьПоведениеПриИзменении = Истина;
		НастройкиПриложения.Вставить("ВидЗаказаПокупателяЗаданиеТорговомуПредставителю", НастройкаПриложения);       
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
    		НастройкаПриложения.ГруппаФормы = ГруппаЗаданиеТорговомуПредставителю;
		НастройкаПриложения.ПорядокВГруппе = 32;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Заказы покупателя с этим состоянием будут выгружаться как ""Задания""'");
		НастройкаПриложения.ОбрабатыватьПоведениеАвтоПодбор = Истина;
		НастройкиПриложения.Вставить("СостояниеЗаданиеТорговомуПредставителю", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
  		НастройкаПриложения.ПорядокВГруппе = 51;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает выгрузку в приложение присоединенных изображений'");
		НастройкиПриложения.Вставить("ПередаватьИзображенияТоваров", НастройкаПриложения);
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
  		НастройкаПриложения.ПорядокВГруппе = 52;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает выгрузку индивидуальных цен по договорам контрагентов'");
		НастройкиПриложения.Вставить("ПередаватьЦеныКонтрагентов", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
  		НастройкаПриложения.ПорядокВГруппе = 53;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Включает в приложении отображение числового остатка товаров на выбранном складе'");
		НастройкиПриложения.Вставить("ОстатокКоличество", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
  		НастройкаПриложения.ПорядокВГруппе = 54;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Проводить ли заказ после его загрузки из приложения'");
		НастройкиПриложения.Вставить("ПроводитьЗаказ", НастройкаПриложения);


		//Отборы
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ЭтоОтбор = Истина;
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьНесколькоОрганизаций";
		НастройкиПриложения.Вставить("Организация", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ЭтоОтбор = Истина;
		НастройкиПриложения.Вставить("Склад", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ЭтоОтбор = Истина;
		НастройкиПриложения.Вставить("ВидЦен", НастройкаПриложения);              
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ЭтоОтбор = Истина;
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьСегментыНоменклатуры";
		НастройкиПриложения.Вставить("СегментНоменклатуры", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ЭтоОтбор = Истина;
		НастройкиПриложения.Вставить("СегментКонтрагентов", НастройкаПриложения);
		
	ИначеЕсли МобильноеПриложение.ВариантНастройки = "ПроверкаЦенников" Тогда

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ПорядокВГруппе = 11;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Настройки склада и номенклатурного отбора'");
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьОбменСПодключаемымОборудованиемOffline";
		НастройкиПриложения.Вставить("ПравилоОбмена", НастройкаПриложения);

		// Дополнительные настройки
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ПорядокВГруппе = 12;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Рабочее место'");
		НастройкиПриложения.Вставить("РабочееМесто", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкаПриложения.ПорядокВГруппе = 13;
		НастройкаПриложения.Подсказка = НСтр("ru = 'Количество элементов в пакете'");
		НастройкиПриложения.Вставить("КоличествоЭлементовВПакете", НастройкаПриложения);

	КонецЕсли;
	
КонецПроцедуры

// Определяет версию формата обмена мобильного приложения.
//
Процедура ПриОпределенииВерсииФорматаОбмена(ВерсияФорматаОбмена, МобильноеПриложение) Экспорт
	
	Если МобильноеПриложение.ВариантНастройки = "Кладовщик" Тогда
		ВерсияФорматаОбмена = "1.7.Storekeeper";
	ИначеЕсли МобильноеПриложение.ВариантНастройки = "Заказы" Тогда
		ВерсияФорматаОбмена = "1.7.Orders";
	КонецЕсли;
	
КонецПроцедуры

// Определяет список выбора поля "Наименование" формы узла обмена с мобильными приложениями.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма узла обмена
//   Наименование - ПолеФормы - поле для данных узла Объект.Наименование
//   МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение узла обмена
//   НастройкиПриложения - Соответствие - см. УправлениеМобильнымиПриложениями.НастройкиПриложения
//
Процедура ПриОпределенииСпискаВыбораНаименования(Форма, Наименование, МобильноеПриложение, НастройкиПриложения) Экспорт

	Если МобильноеПриложение.ВариантНастройки = "Кладовщик" Тогда
			
		НастройкаДляШаблона = "Магазин";
		НастройкаНайдена = Ложь;
		Для Каждого Настройка Из НастройкиПриложения Цикл
			Если Настройка.Ключ = НастройкаДляШаблона Тогда
				НастройкаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, %2'"),
			МобильноеПриложение,
			?(ЗначениеЗаполнено(Форма[НастройкаДляШаблона]), Форма[НастройкаДляШаблона], НСтр("ru = '<Склад не указан>'")));
			
		Наименование.СписокВыбора.Добавить(ШаблонНаименования);
		
	ИначеЕсли МобильноеПриложение.ВариантНастройки = "Заказы" Тогда
			
		ШаблонНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			Форма.Объект.Пользователь, МобильноеПриложение);
			
		Наименование.СписокВыбора.Добавить(ШаблонНаименования);
			
	КонецЕсли;
		

КонецПроцедуры

// Определяет список мобильных приложений для плана обмена с мобильными приложениями,
// См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена.
//
// Параметры:
//   СписокПриложений - Массив - массив ссылок на мобильные приложения
//   СтандартнаяОбработка - Булево - используется переопределяемая обработка, если ЛОЖЬ
//
Процедура ПриОпределенииСпискаМобильныхПриложений(СписокПриложений, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Массив;
	Отбор.Добавить("Кладовщик");
	Отбор.Добавить("Заказы");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отбор", Отбор);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МобильныеПриложения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.МобильныеПриложения КАК МобильныеПриложения
	               |ГДЕ
	               |	МобильныеПриложения.ВариантНастройки В(&Отбор)
	               |	И НЕ МобильныеПриложения.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
			
	ВыборкаМобильныеПриложения = Результат.Выбрать(,);
	Пока ВыборкаМобильныеПриложения.Следующий() Цикл
		СписокПриложений.Добавить(ВыборкаМобильныеПриложения.Ссылка);
	КонецЦикла;	

КонецПроцедуры

// Определяет двоичные данные иконки мобильного приложения.
//
// Параметры:
//   МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение
//   ДвоичныеДанныеИконки - Неопределено, ДвоичныеДанные - данные иконки мобильного приложения
//
Процедура ПриПолученииИконкиПриложения(МобильноеПриложение, ДвоичныеДанныеИконки) Экспорт
	
	ВариантНастройки = МобильноеПриложение.ВариантНастройки;
	ДвоичныеДанныеИконки = Справочники.МобильныеПриложения.ПолучитьМакет(ВариантНастройки + "Иконка");
	
КонецПроцедуры

// Определяет адрес QR-кода для скачивания приложения.
//
// Параметры:
//   МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение
//   УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы, в которой требуется отобразить QR-код
//   АдресСсылкиGooglePlay - Строка - адрес QR-кода во временном хранилище
//
Процедура ПриПолученииСсылкиНаСкачивание(МобильноеПриложение, УникальныйИдентификатор, АдресСсылкиGooglePlay) Экспорт
	
	ВариантНастройки = МобильноеПриложение.ВариантНастройки;
	Если ВариантНастройки = "Кладовщик" Тогда
		ДвоичныеДанные = БиблиотекаКартинок.КладовщикQRКод.ПолучитьДвоичныеДанные();
		АдресСсылкиGooglePlay = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ИначеЕсли ВариантНастройки = "МобильнаяКасса" Тогда
		ДвоичныеДанные = БиблиотекаКартинок.МобильнаяКассаQRКод.ПолучитьДвоичныеДанные();
		АдресСсылкиGooglePlay = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ИначеЕсли ВариантНастройки = "ПроверкаЦенников" Тогда
		ДвоичныеДанные = БиблиотекаКартинок.ПроверкаЦенниковQRКод.ПолучитьДвоичныеДанные();
		АдресСсылкиGooglePlay = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Определяет схему компоновки настроек для мобильного приложения.
//
// Параметры:
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения
//  СхемаКомпоновки - Неопределено, СхемаКомпоновкиДанных
//
// Пример:
//   СхемаКомпоновки = Справочники.МобильныеПриложения.ПолучитьМакет("КладовщикСхемаКомпоновкиНастроек");
//
Процедура ПриПолученииСхемыКомпоновкиНастроек(МобильноеПриложение, СхемаКомпоновки) Экспорт
	
	Если МобильноеПриложение.ВариантНастройки = "Кладовщик" Тогда
		СхемаКомпоновки = Справочники.МобильныеПриложения.ПолучитьМакет("КладовщикСхемаКомпоновкиНастроек");
	ИначеЕсли МобильноеПриложение.ВариантНастройки = "Заказы" Тогда
		СхемаКомпоновки = Справочники.МобильныеПриложения.ПолучитьМакет("ЗаказыСхемаКомпоновкиНастроек");
	ИначеЕсли МобильноеПриложение.ВариантНастройки = "ПроверкаЦенников" Тогда
		СхемаКомпоновки = Справочники.МобильныеПриложения.ПолучитьМакет("ПроверкаЦенниковСхемаКомпоновкиНастроек");
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеНастройки(УзелОбмена, ИмяНастройки) Экспорт
	
	Настройки = УзелОбмена.НастройкиОбмена.Получить();
	
	Если Настройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Настройки.Отбор, ИмяНастройки);
		
	Если ЭлементыОтбора.Количество() > 0 Тогда
		Возврат ЭлементыОтбора[0].ПравоеЗначение;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегистрацияДокументов

// Проверяет проходит ли склад по фильтру узла обмена.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//   Склад - СправочникСсылка.Склады - проверяемый склад
//   Магазин - Неопределено, СправочникСсылка.Магазины - проверяемый магазин
//   Организация - Неопределено, СправочникСсылка.Организации - проверяемая организация
//
Функция ПроверитьФильтрПоСкладу(УзелОбмена, Склад, Магазин = Неопределено, Организация = Неопределено, ИгнорироватьФункциональнуюОпцию = Ложь) Экспорт
	
	Настройки = УзелОбмена.НастройкиОбмена.Получить();
	
	Если Настройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СхемаКомпоновки = Неопределено;                                   
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриПолученииСхемыКомпоновкиНастроек(
		УзелОбмена.МобильноеПриложение, СхемаКомпоновки);
	Если СхемаКомпоновки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;   
	
	УправлениеМобильнымиПриложениями.АктуализироватьЭлементыОтбора(Настройки, СхемаКомпоновки.НастройкиПоУмолчанию);
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Настройки.Отбор, "Склад");
		
	ДанныеПроходятПоФильтру = Ложь;
	ОтборПоСкладуИспользуется = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") 
		ИЛИ ИгнорироватьФункциональнуюОпцию Тогда 
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				ОтборПоСкладуИспользуется = Истина;
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					Если Склад = ЭлементОтбора.ПравоеЗначение Тогда
						ДанныеПроходятПоФильтру = Истина;
					КонецЕсли;
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Если ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(Склад) <> Неопределено Тогда
						ДанныеПроходятПоФильтру = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
	Иначе
		ДанныеПроходятПоФильтру = Истина;
	КонецЕсли;
	
	Если ОтборПоСкладуИспользуется И Не ДанныеПроходятПоФильтру Тогда
		Возврат Ложь;
	Иначе
		Если Магазин = Неопределено Тогда
			Магазин = Склад.Владелец;
		КонецЕсли;
		Если Организация = Неопределено Тогда
			Организация = Склад.Организация;
		КонецЕсли;
		ДанныеПроходятПоФильтру = ПроверитьФильтрПоМагазинуИОрганизации(УзелОбмена, Магазин, Организация, ИгнорироватьФункциональнуюОпцию);
	КонецЕсли;
	
	Возврат ДанныеПроходятПоФильтру;

КонецФункции

// Проверяет проходит ли магазин и организация по фильтру узла обмена.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//   Магазин - СправочникСсылка.Магазины - проверяемый магазин
//   Организация - СправочникСсылка.Организации - проверяемая организация
//
Функция ПроверитьФильтрПоМагазинуИОрганизации(УзелОбмена, Магазин, Организация, ИгнорироватьФункциональнуюОпцию)
	
	Настройки = УзелОбмена.НастройкиОбмена.Получить();
	
	Если Настройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	СхемаКомпоновки = Неопределено;
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриПолученииСхемыКомпоновкиНастроек(
		УзелОбмена.МобильноеПриложение, СхемаКомпоновки);
	Если СхемаКомпоновки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;   
	
	УправлениеМобильнымиПриложениями.АктуализироватьЭлементыОтбора(Настройки, СхемаКомпоновки.НастройкиПоУмолчанию);
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Настройки.Отбор, "Магазин");
		
	ДанныеПроходятПоФильтру = Ложь;
	ОтборПоМагазинуИспользуется = Ложь;  
	
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") 
		ИЛИ ИгнорироватьФункциональнуюОпцию Тогда 
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				ОтборПоМагазинуИспользуется = Истина;  
				Если ЗначениеЗаполнено(Магазин) Тогда
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						Если Магазин = ЭлементОтбора.ПравоеЗначение
							ИЛИ Магазин.ПринадлежитЭлементу(ЭлементОтбора.ПравоеЗначение) Тогда
							ДанныеПроходятПоФильтру = Истина;
						КонецЕсли;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						Если ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(Магазин) <> Неопределено Тогда
							ДанныеПроходятПоФильтру = Истина;
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДанныеПроходятПоФильтру = Истина;
	КонецЕсли;
	
	Если ОтборПоМагазинуИспользуется И Не ДанныеПроходятПоФильтру Тогда
		Возврат Ложь;
	Иначе
		ДанныеПроходятПоФильтру = Истина;
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Настройки.Отбор, "Организация");
		
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				Если Организация <> ЭлементОтбора.ПравоеЗначение Тогда
					ДанныеПроходятПоФильтру = Ложь;
				КонецЕсли;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Если ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(Организация) = Неопределено Тогда
					ДанныеПроходятПоФильтру = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПроходятПоФильтру;
	
КонецФункции

// АПК:299-выкл вызывается программно из правил регистрации объекта

// Проверяет проходит ли тип документа по фильтру для мобильного приложения.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//   Склад - СправочникСсылка.Склады - проверяемый склад
//   Магазин - Неопределено, СправочникСсылка.Магазины - проверяемый магазин
//   Организация - Неопределено, СправочникСсылка.Организации - проверяемая организация
//
Функция ПроверитьФильтрПоМобильномуПриложению(УзелОбмена, ОбъектВыгрузки) Экспорт
	
	ВариантНастройки = УзелОбмена.МобильноеПриложение.ВариантНастройки;
	
	Если ПустаяСтрока(ВариантНастройки ) ИЛИ ОбъектВыгрузки = Неопределено  Тогда
		Возврат Ложь;
	КонецЕсли;   
	
	ТипОбъекта = ТипЗнч(ОбъектВыгрузки);
		
	ТаблицаФильтра = УправлениеМобильнымиПриложениямиУНФПовтИсп.ТаблицаТиповОбъектовДоступныеДляМобильногоПриложения();
	СтруктураОтбора = Новый Структура("ВариантНастройки, ТипОбъекта", ВариантНастройки, ТипОбъекта); 
	СтрокиТаблицы = ТаблицаФильтра.НайтиСтроки(СтруктураОтбора);  
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;   
	
	Если ТипОбъекта = Тип("ДокументСсылка.ЗаказПокупателя") И ЗначениеЗаполнено(ВариантНастройки) Тогда 
		Если ВариантНастройки = "Кладовщик" Тогда
			Если НЕ ОбъектВыгрузки.Проведен ИЛИ ОбъектВыгрузки.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ВариантНастройки = "Заказы" Тогда
			Если ОбъектВыгрузки.ПометкаУдаления Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции  
// АПК:299-вкл

#КонецОбласти

#КонецОбласти




