
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Поиск кассира по считанному коду.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - форма, в которой переопределяются значения.
//  Штрихкод - Строка - код, по которому выполняется поиск.
//
Процедура ВыполнитьПоискКассира(Объект, Штрихкод) Экспорт
	ШтрихкодированиеРМКПереопределяемый.ВыполнитьПоискКассира(Объект, Штрихкод);
КонецПроцедуры

// Разбор марки и заполнение параметров строки с товарами, которые содержатся в марке.
//
// Параметры:
//  СтрокаТовары - ДанныеФормыЭлементКоллекции - строка с заполненными данными по товару.
//  КодМарки - Строка - код марки.
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета товара.
//  ПараметрыШтрихкодирования - Структура - параметры для обработки результата.
//
Процедура РазобратьМаркуИЗаполнитьДанные(СтрокаТовары, КодМарки, ОсобенностьУчета, ПараметрыШтрихкодирования) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ШтрихкодированиеРМКПереопределяемый.РазобратьМаркуИЗаполнитьДанные(
		СтандартнаяОбработка, СтрокаТовары, КодМарки, ОсобенностьУчета, ПараметрыШтрихкодирования);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияРМК.ЭтоТабачнаяПродукция(ОсобенностьУчета)
		И Не ОбщегоНазначенияРМК.ЭтоМолочнаяПродукция(ОсобенностьУчета) Тогда
		Возврат;
	КонецЕсли;
		
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыШтрихкодирования, "ПараметрыШтрихкода") Тогда
		ДанныеРазбора = ПараметрыШтрихкодирования.ПараметрыШтрихкода.ДанныеРазбораКода;
	Иначе
		СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
		Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
		КодМаркировкиОригинал = СтрЗаменить(КодМарки, Разделитель, СимволGS1);
		Если ОбщегоНазначенияРМК.ЭтоТабачнаяПродукция(ОсобенностьУчета) Тогда
			ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
				КодМаркировкиОригинал, Перечисления.ВидыПродукцииИС.Табак);
		Иначе
			ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировкиОригинал);
		КонецЕсли;
	КонецЕсли;
	
	// Для табака проверяем МРЦ.
	Если ОбщегоНазначенияРМК.ЭтоТабачнаяПродукция(ОсобенностьУчета) Тогда
		
		Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеРазбора, "СоставКодаМаркировки") Тогда
			
			СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
			
			Если ПараметрыШтрихкодирования.КонтролироватьЕМРЦ Тогда
				
				ЦенаПродажи    = СтрокаТовары.Цена;
				ЕМРЦ           = 0;
				Коэффициент    = 1;
				УпаковкаТовара = СтрокаТовары.Упаковка;
				
				Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(СоставКодаМаркировки, "МРЦСтрокой")
					И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦСтрокой)
					И ПараметрыШтрихкодирования.УчитыватьМРЦ 
					И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
					
					СтрокаТовары.МРЦ = СоставКодаМаркировки.МРЦ;
					
					Если НЕ СоставКодаМаркировки.МРЦ = 0 Тогда
						ЦенаПродажи = СоставКодаМаркировки.МРЦ;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(УпаковкаТовара) Тогда
					Коэффициент = УпаковкаТовара.Коэффициент;
				КонецЕсли;
				ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Табак;
				ОбщегоНазначенияРМКПереопределяемый.ПолучитьЦенуЕМРЦ(ВидМаркированнойПродукции,, ЕМРЦ);
				СтрокаТовары.ЕМРЦ = Коэффициент*ЕМРЦ;
				
				Если ЦенаПродажи < ЕМРЦ*Коэффициент И НЕ ЕМРЦ = 0 Тогда
					ЦенаПродажи = ЕМРЦ*Коэффициент;
				КонецЕсли;
				
				СтрокаТовары.Цена = ЦенаПродажи;
				
			КонецЕсли;
			
			Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеРазбора, "ВидУпаковки")
				И ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
					
					НайтиУпаковкуДляТовара(СтрокаТовары);
					Если ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
						ЗаполнитьПредставлениеЕдиницыИзмерения(СтрокаТовары);
					Иначе
						ПараметрыШтрихкодирования.Вставить("УпаковкаНеНайдена");
						ПараметрыШтрихкодирования.Вставить("НоменклатураБезУпаковки", СтрокаТовары.Номенклатура);
						УдалитьТекущуюСтроку(ПараметрыШтрихкодирования.Объект, СтрокаТовары);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначенияРМК.ЭтоМолочнаяПродукция(ОсобенностьУчета) Тогда
		
		Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеРазбора, "СоставКодаМаркировки") Тогда
				
			СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
			Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(СоставКодаМаркировки, "МассаНеттоВКг")
				И НЕ СоставКодаМаркировки.МассаНеттоВКг = Неопределено Тогда
				
				СтрокаТовары.Количество = СоставКодаМаркировки.МассаНеттоВКг;
				СтрокаТовары.КоличествоУпаковок = СоставКодаМаркировки.МассаНеттоВКг;
				СтрокаТовары.Весовой = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТовары.ИзменятьКоличествоМаркируемойПродукции = СтрокаТовары.Весовой;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение представления единицы измерения, в соответствии с заполненностью упаковки.
//
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка с заполненными данными по товару.
//
Процедура ЗаполнитьПредставлениеЕдиницыИзмерения(ТекущаяСтрока) Экспорт
	
	ПредставлениеЕИ = "";
	
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьПредставлениеЕдиницыИзмерения(ТекущаяСтрока, ПредставлениеЕИ);
	
	ТекущаяСтрока.ПредставлениеЕдиницыИзмерения = ПредставлениеЕИ;
	
КонецПроцедуры

// Возвращает структуру дисконтной карты
//
// Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск.
//
// Возвращаемое значение:
//  Результат - Структура,Неопределено - Параметры дисконтной карты, или Неопределено если карта не найдена
//
Функция ПолучитьДисконтнуюКарту(МагнитныйКод) Экспорт
	
	НомерТелефона = НомерТелефонаБезДопСимволов(МагнитныйКод);
	ДанныеКарты = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеКартыЛояльностиПоМагнитномуКоду(МагнитныйКод,
		НомерТелефона, ДанныеКарты);
	Если ДанныеКарты = Неопределено Тогда
		ДанныеКарты = ДанныеКартыЛояльности();
	КонецЕсли;
	Возврат ДанныеКарты;
	
КонецФункции

// Возвращает номер телефона без дополнительных символов: ()- и без пробелов
//
// Параметры:
//  НомерТелефонаИсходный - Строка - Номер телефона в исходном виде.
//  БезЗнакаПлюс - Булево - Возможность удалять знак +
//
// Возвращаемое значение:
//  Строка - Номер телефона без скобок, без знаков +- и без пробелов
//
Функция НомерТелефонаБезДопСимволов(НомерТелефонаИсходный, БезЗнакаПлюс = Ложь) Экспорт
	
	НомерТелефона = СокрЛП(НомерТелефонаИсходный);
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	
	Если БезЗнакаПлюс Тогда
		НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

// Заполнение формы значениями дисконтной карты.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой переопределяются значения.
//  Параметры - Структура - параметры дисконтной карты.
//
Процедура ЗаполнитьФормуПоДисконтнойКарте(Форма, Параметры) Экспорт
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(Форма, "Объект")
			И Параметры.Свойство("КартаЛояльности") Тогда
		
		Форма.Объект.ДисконтнаяКарта = Параметры.КартаЛояльности;
		Форма.Объект.Контрагент = Параметры.Контрагент;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КодКарты) Тогда
		Форма.НайденнаяКартаНомер = Параметры.КодКарты;
		Форма.НоваяКартаНомер = Параметры.КодКарты;
	Иначе
		Форма.НоваяКартаНомер = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.АдресЭПВладельцаКарты) Тогда
		Форма.НайденнаяКартаПочта = Параметры.АдресЭПВладельцаКарты;
		Форма.ОтправкаЧекаПочта = Параметры.АдресЭПВладельцаКарты;
		Форма.НоваяКартаПочта = Параметры.АдресЭПВладельцаКарты;
	Иначе
		Форма.НоваяКартаПочта = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.НомерТелефонаВладельцаКарты) Тогда
		
		МаскаТелефона = ИнтерфейсРМКСлужебныйКлиентСервер.МаскаВводаТелефона();
		ИсходныйНомер = Параметры.НомерТелефонаВладельцаКарты;
		Форма.НайденнаяКартаТелефон = ИсходныйНомер;
		Форма.ОтправкаЧекаТелефон
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ИсходныйНомер, МаскаТелефона);
		Форма.НоваяКартаТелефон
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ИсходныйНомер, МаскаТелефона);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ДатаРождения) Тогда
		ДатаРожденияСтрокой = ?(ЗначениеЗаполнено(Параметры.ДатаРождения), Формат(Параметры.ДатаРождения, "ДЛФ=D"), "");
		Форма.НайденнаяКартаДатаРождения = ДатаРожденияСтрокой;
		Форма.НоваяКартаДатаРождения = ДатаРожденияСтрокой;
	Иначе
		Форма.НоваяКартаДатаРождения = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(Параметры.ФИО)) Тогда
		Форма.НайденнаяКартаФИО = Параметры.ФИО;
		Форма.НоваяКартаФИО = Параметры.ФИО;
	Иначе
		Форма.НоваяКартаФИО = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.СуммаПродаж) Тогда
		Форма.НайденнаяКартаСуммаПродаж = Параметры.СуммаПродаж;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЭтоКомпания) И Параметры.ЭтоКомпания Тогда
		Форма.Элементы.ГруппаНайденнаяКартаДатаРождения.Видимость = Ложь;
		Форма.Элементы.ДекорацияНайденнаяКартаФИО.Картинка = БиблиотекаКартинок.РМККомпания;
	Иначе
		Форма.Элементы.ГруппаНайденнаяКартаДатаРождения.Видимость = Не Форма.РежимКассыСамообслуживания;
		Форма.Элементы.ДекорацияНайденнаяКартаФИО.Картинка = БиблиотекаКартинок.РМКФизическоеЛицо;
	КонецЕсли;
	
	КартаЗаполнена = ЗначениеЗаполнено(Форма.Объект.ДисконтнаяКарта) Или (Параметры.Свойство("ИдентификаторКарты")
		И ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЗаполнены(Параметры));
	КлиентЗаполнен = ЗначениеЗаполнено(Форма.Объект.Контрагент);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(Форма, Не КартаЗаполнена, Не КлиентЗаполнен);
	
КонецПроцедуры

// Функция осуществляет формирование штрихкода EAN13 для
// Сотрудников
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьШтрихкодEAN13Кассира() Экспорт 

	ПрефиксСотрудника= "1";
	ПрефиксВнутреннегоШтрихкода = "0";
	
	Код = Мин(ПоследнийКодСотрудника(ПрефиксСотрудника, ПрефиксВнутреннегоШтрихкода) + 1,
		МаксимальныйКодШтучногоТовара(13));

	Возврат ПолучитьШтрихкодПоКоду(Код, ПрефиксСотрудника, ПрефиксВнутреннегоШтрихкода, 13);

КонецФункции

// Возвращает параметры для заполнения данными карты лояльности.
//
// Возвращаемое значение:
//  Структура - структура параметров для заполнения данных карты лояльности.
//
Функция ДанныеКартыЛояльности() Экспорт
	
	ПараметрыКартыЛояльности = Новый Структура;
	ПараметрыКартыЛояльности.Вставить("КартаЛояльности");
	ПараметрыКартыЛояльности.Вставить("Контрагент");
	ПараметрыКартыЛояльности.Вставить("КодКарты");
	ПараметрыКартыЛояльности.Вставить("АдресЭПВладельцаКарты");
	ПараметрыКартыЛояльности.Вставить("НомерТелефонаВладельцаКарты");
	ПараметрыКартыЛояльности.Вставить("ДатаРождения");
	ПараметрыКартыЛояльности.Вставить("ФИО");
	ПараметрыКартыЛояльности.Вставить("ЭтоКомпания");
	ПараметрыКартыЛояльности.Вставить("СуммаПродаж");
	
	Возврат ПараметрыКартыЛояльности;
	
КонецФункции

// Формирует параметры неизвестного штрихкода
//
// Параметры:
//  ПараметрыДляОбработкиШтрихкода - Структура - данные для обработки штрихкода.
//
Процедура СформироватьПараметрыНеизвестногоШтрихкода(ПараметрыДляОбработкиШтрихкода) Экспорт
	
	ДанныеМаркировки = ПараметрыДляОбработкиШтрихкода.ПараметрыШтрихкода.ДанныеМаркировки;
	ЭтоКодМарки = ПараметрыДляОбработкиШтрихкода.ПараметрыШтрихкода.ЭтоКодМаркировки;
	Штрихкод = ПараметрыДляОбработкиШтрихкода.Штрихкод;
	
	ШтрихкодРазобран = Ложь;
	Если ТипЗнч(ДанныеМаркировки) = Тип("Структура") Тогда
		Если ДанныеМаркировки.Свойство("Разобран") Тогда
			ШтрихкодРазобран = ДанныеМаркировки.Разобран;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоКодМарки И ШтрихкодРазобран Тогда
		
		Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "ТипИдентификатораТовара")
			И (ДанныеМаркировки.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС3
				Или ДанныеМаркировки.ТипИдентификатораТовара = Перечисления.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС2) Тогда
			ПараметрыДляОбработкиШтрихкода.Вставить("ПодтвердитьВыборАлкоголя");
		Иначе
			ПараметрыДляОбработкиШтрихкода.Вставить("ТоварНеНайденПоМарке");
		КонецЕсли;
		
		ПараметрыДляОбработкиШтрихкода.Вставить("КодМарки", Штрихкод);
		ПараметрыДляОбработкиШтрихкода.Вставить("EAN", ДанныеМаркировки.EAN);
		
	Иначе
		
		ПараметрыДляОбработкиШтрихкода.Вставить("ТоварНеНайденПоШтрихкоду");
		ПараметрыДляОбработкиШтрихкода.Вставить("EAN", Штрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоследнийКодСотрудника(ПрефиксВнутреннегоШтрихкода, ПрефиксШтрихкодаИБ)
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросПоследнийШтрихкод(Запрос,
		ПрефиксВнутреннегоШтрихкода,
		ПрефиксШтрихкодаИБ);
	
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ТекстСообщения = НСтр("ru = 'Не сформирован запрос для определения последнего штрихкода.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
		Результат = ОписаниеТипаЧисла.ПривестиЗначение(Выборка.Код);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает максимальный код штучного товара.
//
// Возвращаемое значение:
//  Число - Максимальный код штучного товара.
//
Функция МаксимальныйКодШтучногоТовара(EAN)
	
	Если EAN = 13 Тогда
		Возврат 99999999;
	КонецЕсли;
	
	Если EAN = 8 Тогда
		Возврат 999999;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Недопустимая длина EAN. Ожидается 8 или 13.'");
	
КонецФункции

Функция ПолучитьШтрихкодПоКоду(Код, ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода, EAN) Экспорт
	
	Если EAN = 8 Тогда
		Штрихкод = СтрШаблон("2%1", Формат(Код, "ЧЦ=6; ЧВН=; ЧГ="));
	ИначеЕсли EAN = 13 Тогда
		
		КоличествоВедущихНулей = 10 - СтрДлина(Код);
		Штрихкод = СтрШаблон("2%1%2%3", ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода,
			Формат(Код, СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=", КоличествоВедущихНулей)));
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Недопустимая длина EAN. Ожидается 8 или 13.'")
	КонецЕсли;
	Результат = СтрШаблон("%1%2", Штрихкод, КонтрольныйСимволEAN(ШтрихКод, EAN));
	
	Возврат Результат;

КонецФункции

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  ШтрихКод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
Функция КонтрольныйСимволEAN(Знач ШтрихКод, Знач Тип)
	
	Четное = 0;
	Нечетное = 0;
	
	КоличествоИтераций = ?(Тип = 13, 6, 4);
	
	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) И (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четное = Четное + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетное = Нечетное + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;
	
	Если Тип = 13 Тогда
		Четное = Четное * 3;
	Иначе
		Нечетное = Нечетное * 3;
	КонецЕсли;
	
	КонтЦифра = 10 - (Четное + Нечетное) % 10;
	
	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
	
КонецФункции

Процедура НайтиУпаковкуДляТовара(ТекущаяСтрока)
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		ДанныеУпаковки = Неопределено;
		ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеУпаковкиДляТовара(Номенклатура, ДанныеУпаковки);
		Если НЕ ДанныеУпаковки = Неопределено Тогда
			ТекущаяСтрока.Упаковка = ДанныеУпаковки.Упаковка;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьТекущуюСтроку(Объект, ТекущаяСтрока)
	Объект.Товары.Удалить(ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти