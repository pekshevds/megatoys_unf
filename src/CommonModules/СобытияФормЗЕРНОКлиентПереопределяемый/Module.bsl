#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора номенклатуры.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Метод формы, который обрабатывает событие выбора.
//  ВыбранноеЗначение       - ОпределяемыйТип.Номенклатура - Результат выбора.
//  ИсточникВыбора          - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = "ЕдиницаИзмерения, ТоварнаяНоменклатураВЭД, КодОКПД2";
	
	СтруктураРеквизитов = УправлениеНебольшойФирмойВызовСервера.ЗначенияРеквизитовОбъекта(
		ТекущаяСтрока.Номенклатура,
		СписокРеквизитов,
		Истина);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураРеквизитов);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		ТекущаяСтрока.КодТНВЭД = СтруктураРеквизитов.ТоварнаяНоменклатураВЭД;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ОКПД2") Тогда
		ТекущаяСтрока.ОКПД2 = СтруктураРеквизитов.КодОКПД2;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Серия") Тогда
		ДанныеСтроки = ИнтеграцияИСУНФКлиентСервер.ДанныеСтроки(ТекущаяСтрока, "ПроверитьСериюРассчитатьСтатус");
		ИмяФормы = Форма.ИмяФормы;
		ИнтеграцияИСМПУНФВызовСервера.ПроверитьСериюРассчитатьСтатус(ДанныеСтроки, ИмяФормы);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСтроки);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоЗЕРНО")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Количество")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕдиницаИзмеренияКилограмм") Тогда
		ПриИзмененииКоличестваВКилограммах(Форма, ТекущаяСтрока, Форма.ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки подбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭтоМаркировка", Истина);
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(Форма,, ПараметрыФормы, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Обрабатывает результат выбора в форму документа ЗЕРНО (например из формы подбора номенклатуры,
//   при использовании множественного выбора вместо закрытия формы подбора с общим результатом).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки сопоставления,
//  ВыбранноеЗначение - Произвольный - результат выбора.
//  ИсточникВыбора    - ФормаКлиентскогоПриложения - форма, в которой произведен выбор.
Процедура ОбработкаВыбора(Форма, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ХарактеристикиНоменклатуры

// Выполняется при начале выбора характеристики. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - ФормаКлиентскогоПриложения            - форма, в которой вызывается команда выбора характеристики.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится выбор.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ИмяКолонкиНоменклатура - Строка - имя колонки с данными номенклатуры.
//  Описание - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораХарактеристики(
	Владелец, ДанныеСтроки, СтандартнаяОбработка, ИмяКолонкиНоменклатура="Номенклатура", Описание=Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура("Владелец", ДанныеСтроки[ИмяКолонкиНоменклатура]));
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора, Владелец,,,, Описание);
	
КонецПроцедуры

// Выполняет действия при изменении характеристики номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Выполняет действия при изменении серии номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииСерии(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора серии.
// 
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - Форма для которой требуется обработать событие выбора.
//  ВыбранноеЗначение      - ОпределяемыйТип.СерияНоменклатуры - результат выбора.
//  ИсточникВыбора         - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы.
//  ТекущиеДанные          - Произвольный - Контекст выбора серии
Процедура ОбработкаВыбораСерии(Форма, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий, ТекущиеДанные = Неопределено) Экспорт
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СерииНоменклатуры.Форма.ФормаВыбора" Тогда
		
		ИмяТЧТовары = "Товары";
		Если ТипЗнч(ПараметрыУказанияСерий) = Тип("Структура") Тогда
			ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ИмяТЧТовары) Тогда
			
			ТекущиеДанные = Форма.Элементы[ИмяТЧТовары].ТекущиеДанные;
			ТекущиеДанные.Серия = ВыбранноеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Количество

// Выполняет действия при изменении подобранного количества (поле Количество) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  ЕдиницаИзмеренияКилограмм - ОпределяемыйТип.Упаковка - единица измерения по классификатору "Килограмм",
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения) Экспорт
	
	ДанныеСтроки = Новый Структура("Номенклатура");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрока);
	
	ДанныеДляПересчета = ИнтеграцияЗЕРНОУНФВызовСервера.КоэффициентыЕдиницИзмеренияЗЕРНО(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки));
	ДанныеЕдиницыИзмерения = ДанныеДляПересчета.Получить(ТекущаяСтрока.Номенклатура);
	Если ЗначениеЗаполнено(ДанныеЕдиницыИзмерения.КодОшибки) Тогда
		ТекущаяСтрока["КоличествоЗЕРНО"] = 0;
	ИначеЕсли ЗначениеЗаполнено(ДанныеЕдиницыИзмерения.Коэффициент) Тогда
		ТекущаяСтрока["КоличествоЗЕРНО"] = ТекущаяСтрока["Количество"] / ДанныеЕдиницыИзмерения.Коэффициент;
	Иначе
		ТекущаяСтрока["КоличествоЗЕРНО"] = ТекущаяСтрока["Количество"] * ДанныеЕдиницыИзмерения.Вес;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении количества в килограммах (поле КоличествоЗЕРНО) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  ЕдиницаИзмеренияКилограмм - ОпределяемыйТип.Упаковка - единица измерения по классификатору "Килограмм",
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
Процедура ПриИзмененииКоличестваВКилограммах(Форма, ТекущаяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения) Экспорт
	
	ДанныеСтроки = Новый Структура("Номенклатура");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрока);
	
	ДанныеДляПересчета = ИнтеграцияЗЕРНОУНФВызовСервера.КоэффициентыЕдиницИзмеренияЗЕРНО(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки));
	ДанныеЕдиницыИзмерения = ДанныеДляПересчета.Получить(ТекущаяСтрока.Номенклатура);
	Если ЗначениеЗаполнено(ДанныеЕдиницыИзмерения.КодОшибки) Тогда
		ТекущаяСтрока["Количество"] = 0;
	ИначеЕсли ЗначениеЗаполнено(ДанныеЕдиницыИзмерения.Коэффициент) Тогда
		ТекущаяСтрока["Количество"] = ТекущаяСтрока["КоличествоЗЕРНО"] * ДанныеЕдиницыИзмерения.Коэффициент;
	ИначеЕсли ЗначениеЗаполнено(ДанныеЕдиницыИзмерения.Вес) Тогда
		ТекущаяСтрока["Количество"] = ТекущаяСтрока["КоличествоЗЕРНО"] / ДанныеЕдиницыИзмерения.Вес;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Выполняется при начале выбора договора ИС. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - ФормаКлиентскогоПриложения  - форма, в которой вызывается команда выбора договора.
//  ДанныеДоговора - Структура - данные договора хранения ЗЕРНО, для которого выбирается прикладной договор:
//  	Договор - ОпределеяемыйТип.ДоговорКонтрагентаИС - текущий договор.
//  	Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - организацияя/контрагент с которым заключен договор.
//  	Организация - ОпределеяемыйТип.Организация - организация владелец договора.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ОповещениеПриЗавершении - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораДоговораОрганизацииКонтрагента(Владелец, ДанныеДоговора, СтандартнаяОбработка, ОповещениеПриЗавершении) Экспорт
	
	
КонецПроцедуры

#КонецОбласти
