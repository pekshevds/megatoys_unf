#Область СлужебныйПрограммныйИнтерфейс

#Область РазборКодаМаркировки

// Выполняет разбор кода маркировки.
//
// Параметры:
//   ДанныеДляРазбора - Строка, см. МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1 - код маркировки, либо данные разбора.
//   ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - фильтр по виду продукции.
//   ПримечаниеКРезультатуРазбора - Структура - содержит:
//      * ИдентификаторОшибки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки
//      * ТекстОшибки - Строка
//      * РезультатРазбора - Массив из см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//   Настройки - см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки.
//   ПользовательскиеПараметры - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки.
// Возвращаемое значение:
//    см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки - результат разбора.
//    Неопределено - если код маркировки разобрать не удалось.
//
Функция РазобратьКодМаркировки(Знач ДанныеДляРазбора, ВидыПродукции = Неопределено, ПримечаниеКРезультатуРазбора = Неопределено, Знач Настройки = Неопределено, Знач ПользовательскиеПараметры = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();
	КонецЕсли;
	
	Если ПользовательскиеПараметры = Неопределено Тогда
		ПользовательскиеПараметры = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	КонецЕсли;
	
	Возврат РазборКодаМаркировкиИССлужебныйКлиентСервер.РазобратьКодМаркировки(
		ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, РазборКодаМаркировкиИССлужебный, ПользовательскиеПараметры);
	
КонецФункции

// Выполняет разбор кода маркировки используя результаты предыдущих разборов.
//
// Параметры:
//   ДанныеДляРазбора - Строка, см. МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1 - код маркировки, либо данные разбора.
//   КешНастроекРазбораКодаМаркировки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов.
//   ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - фильтр по виду продукции.
//   ПримечаниеКРезультатуРазбора - Структура - содержит:
//      * ИдентификаторОшибки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки
//      * ТекстОшибки - Строка
//      * РезультатРазбора - Массив из см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//   Настройки - см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки.
//   ПользовательскиеПараметры - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки.
// Возвращаемое значение:
//    - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки.
//    - Неопределено - если код маркировки разобрать не удалось.
//
Функция РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(Знач ДанныеДляРазбора, КешНастроекРазбораКодаМаркировки, ВидыПродукции = Неопределено, ПримечаниеКРезультатуРазбора = Неопределено, Знач Настройки = Неопределено, Знач ПользовательскиеПараметры = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();
	КонецЕсли;
	
	Возврат РазборКодаМаркировкиИССлужебныйКлиентСервер.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
		ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, РазборКодаМаркировкиИССлужебный, ПользовательскиеПараметры, КешНастроекРазбораКодаМаркировки);
	
КонецФункции

#КонецОбласти

#Область НастройкиРазбораКодаМаркировки

// Формирует настройки разбора кода маркировки по учитываемым видам продукции
//
// Возвращаемое значение:
//    См. ОбщиеНастройкиРазбораКодаМаркировки
//
Функция НастройкиРазбораКодаМаркировки(ВидыПродукции = Неопределено, ТолькоУчитываемыеВидыПродукции = Истина) Экспорт
	Возврат ОбщиеНастройкиРазбораКодаМаркировки(Истина, ВидыПродукции, ТолькоУчитываемыеВидыПродукции);
КонецФункции

// Формирует настройки разбора кода маркировки по учитываемым видам продукции
//
// Параметры:
//   ТолькоСервер - Булево - Служебный параметр. Определяет контекст возможного использования настроек. Если передать Истина, то на клиент нельзя будет перенести настройки.
//   ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - Служебный параметр. Фильтр по виду продукции.
//   ТолькоУчитываемыеВидыПродукции - Булево - Служебный параметр. Настройки формируются исходя из видов продукции по которым ведется учет в системе.
// Возвращаемое значение:
//    См. ИнициализацияНастроекРазбораКодаМаркировки
//
Функция ОбщиеНастройкиРазбораКодаМаркировки(ТолькоСервер = Ложь, ВидыПродукции = Неопределено, ТолькоУчитываемыеВидыПродукции = Истина) Экспорт
	
	НастройкиРазбораКодаМаркировки = ИнициализацияНастроекРазбораКодаМаркировки();
	НастройкиРазбораКодаМаркировки.ТолькоУчитываемыеВидыПродукции          = ТолькоУчитываемыеВидыПродукции;
	НастройкиРазбораКодаМаркировки.Алфавит                                 = РазборКодаМаркировкиИССлужебныйКлиентСервер.ДопустимыеСимволыВКодеМаркировки();
	НастройкиРазбораКодаМаркировки.ТолькоСервер                            = ТолькоСервер;
	НастройкиРазбораКодаМаркировки.ИдентификаторыПримененияСРазделителемGS = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыПримененияСРазделителемGS();
	
	Если ТолькоУчитываемыеВидыПродукции Тогда
		УчитываемыеВидыМаркируемойПродукции = ИнтеграцияИС.УчитываемыеВидыМаркируемойПродукции();
	Иначе
		УчитываемыеВидыМаркируемойПродукции = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
		УчитываемыеВидыМаркируемойПродукции.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
	КонецЕсли;
	
	Если УчитываемыеВидыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат НастройкиРазбораКодаМаркировки;
	КонецЕсли;
	
	Если ВидыПродукции = Неопределено Тогда
		
		ДоступныеВидыПродукции = УчитываемыеВидыМаркируемойПродукции;
		
	Иначе
		
		ДоступныеВидыПродукции = Новый Массив;
		
		ВидыПродукцииДляФильтра = Новый Массив;
		Если ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
			ВидыПродукцииДляФильтра.Добавить(ВидыПродукции);
		ИначеЕсли ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
			Для Каждого Значение Из ВидыПродукции Цикл
				Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
					ВидыПродукцииДляФильтра.Добавить(Значение);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("Структура") Тогда
			Для Каждого КлючЗначение Из ВидыПродукции Цикл
				Значение = КлючЗначение.Значение;
				Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
					ВидыПродукцииДляФильтра.Добавить(Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ВидыПродукцииДляФильтра.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Фильтр по виду продукции в настройках разбора кода маркировки задан не верно.'");
		КонецЕсли;
		
		ВидыПродукцииДляФильтра = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииДляФильтра);
		
		Для Каждого ВидПродукции Из ВидыПродукцииДляФильтра Цикл
			Если УчитываемыеВидыМаркируемойПродукции.Найти(ВидПродукции) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДоступныеВидыПродукции.Добавить(ВидПродукции);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДоступныеВидыПродукции.Количество() = 0 Тогда
		Если Не НастройкиРазбораКодаМаркировки.ТолькоСервер Тогда
			ПодготовитьНастройкиРазбораКодаМаркировкиДляПередачиНаКлиент(НастройкиРазбораКодаМаркировки);
		КонецЕсли;
		Возврат НастройкиРазбораКодаМаркировки;
	КонецЕсли;
	
	НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции = ДоступныеВидыПродукции;
	
	ДанныеОбщихМодулей                = Новый Соответствие;
	ДанныеОбщихМодулейПоВидуПродукции = Новый Соответствие;
	
	МодулиПодсистемыЕГАИС = Неопределено;
	МодулиПодсистемыИСМП  = Неопределено;
	
	ДанныеОписанийКодаМаркировки = Новый Структура;
	ДанныеОписанийКодаМаркировки.Вставить("ОписанияКодовМаркировки", Новый Массив);
	ДанныеОписанийКодаМаркировки.Вставить("Алфавит",                 НастройкиРазбораКодаМаркировки.Алфавит);
	
	Для Каждого ВидПродукции Из НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции Цикл
		
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			
			Если МодулиПодсистемыЕГАИС = Неопределено Тогда
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
					МодульНастройки = "РазборКодаМаркировкиЕГАИССлужебный";
					МодульРазбораКМ = "РазборКодаМаркировкиЕГАИССлужебныйКлиентСервер";
					
					ДанныеМодуляНастройки = Новый Структура("Имя, ОбщийМодуль", МодульНастройки, ОбщегоНазначения.ОбщийМодуль(МодульНастройки));
					ДанныеМодуляРазбора   = Новый Структура("Имя, ОбщийМодуль", МодульРазбораКМ, ОбщегоНазначения.ОбщийМодуль(МодульРазбораКМ));
					
					МодулиПодсистемыЕГАИС = Новый Структура("Подсистема, Настройка, Разбор", "ЕГАИС", ДанныеМодуляНастройки, ДанныеМодуляРазбора);
				КонецЕсли;
				
			КонецЕсли;
			МодулиВыбраннойПодсистемы = МодулиПодсистемыЕГАИС;
			
		Иначе
			
			Если МодулиПодсистемыИСМП = Неопределено Тогда
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
					МодульНастройки = "РазборКодаМаркировкиИСМПСлужебный";
					МодульРазбораКМ = "РазборКодаМаркировкиИСМПСлужебныйКлиентСервер";
					
					ДанныеМодуляНастройки = Новый Структура("Имя, ОбщийМодуль", МодульНастройки, ОбщегоНазначения.ОбщийМодуль(МодульНастройки));
					ДанныеМодуляРазбора   = Новый Структура("Имя, ОбщийМодуль", МодульРазбораКМ, ОбщегоНазначения.ОбщийМодуль(МодульРазбораКМ));
					
					МодулиПодсистемыИСМП = Новый Структура("Подсистема, Настройка, Разбор", "ИСМП", ДанныеМодуляНастройки, ДанныеМодуляРазбора);
				КонецЕсли;
				
			КонецЕсли;
			МодулиВыбраннойПодсистемы = МодулиПодсистемыИСМП;
			
		КонецЕсли;
		
		Если МодулиВыбраннойПодсистемы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеОбщихМодулей[МодулиВыбраннойПодсистемы.Подсистема] = Неопределено Тогда
			ДанныеОбщихМодулей[МодулиВыбраннойПодсистемы.Подсистема] = МодулиВыбраннойПодсистемы;
			НастройкиРазбораКодаМаркировки.ОбщиеМодули[МодулиВыбраннойПодсистемы.Разбор.Имя] = МодулиВыбраннойПодсистемы.Разбор.ОбщийМодуль;
		КонецЕсли;
		
		МодулиВыбраннойПодсистемы.Настройка.ОбщийМодуль.ДополнитьОписанияКодовМаркировки(ДанныеОписанийКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы.Разбор);
		
		ДанныеОбщихМодулейПоВидуПродукции[ВидПродукции] = МодулиВыбраннойПодсистемы;
		
	КонецЦикла;
	
	// Определяем порядок вызываемых проверок при разборе кода маркировки
	Если МодулиПодсистемыИСМП <> Неопределено Тогда
		НастройкиРазбораКодаМаркировки.ИменаОбщихМодулей.Добавить(МодулиПодсистемыИСМП.Разбор.Имя);
	КонецЕсли;
	Если МодулиПодсистемыЕГАИС <> Неопределено Тогда
		НастройкиРазбораКодаМаркировки.ИменаОбщихМодулей.Добавить(МодулиПодсистемыЕГАИС.Разбор.Имя);
	КонецЕсли;
	
	ЗаполнитьШаблоныКодовМаркировкиПоНачальнымНастройкам(НастройкиРазбораКодаМаркировки, ДанныеОписанийКодаМаркировки);
	
	ОпределитьОбщиеМодулиВШаблонахИОписанияхВидовПродукции(НастройкиРазбораКодаМаркировки, ДанныеОбщихМодулейПоВидуПродукции);
	
	Для Каждого ВидПродукции Из НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции Цикл
		МодулиВыбраннойПодсистемы = ДанныеОбщихМодулейПоВидуПродукции[ВидПродукции];
		
		Если Не НастройкиРазбораКодаМаркировки.ДополнительныеПараметры.Свойство(МодулиВыбраннойПодсистемы.Подсистема) Тогда
			НастройкиРазбораКодаМаркировки.ДополнительныеПараметры.Вставить(МодулиВыбраннойПодсистемы.Подсистема, Новый Структура);
		КонецЕсли;
		
		МодулиВыбраннойПодсистемы.Настройка.ОбщийМодуль.ДополнитьВспомогательнымиНастройкиРазбораКодаМаркировки(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы);
		
	КонецЦикла;
	
	Если Не НастройкиРазбораКодаМаркировки.ТолькоСервер Тогда
		ПодготовитьНастройкиРазбораКодаМаркировкиДляПередачиНаКлиент(НастройкиРазбораКодаМаркировки);
	КонецЕсли;
	
	Для Каждого ШаблонКМ Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки Цикл
		ДанныеШаблона = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ШаблонКМ.Шаблон];
		ДанныеШаблона.СтрокаТаблицыШаблоныКодовМаркировки = ШаблонКМ;
	КонецЦикла;
	
	НастройкиРазбораКодаМаркировки.Хеш = РазборКодаМаркировкиИССлужебныйКлиентСервер.ХешВидовПродукции(НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции);
	
	Возврат НастройкиРазбораКодаМаркировки;
	
КонецФункции

Функция ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой) Экспорт
	
	СписокОписанийШаблонов = Новый Массив;
	
	Для Каждого ШаблонСтрокой Из ШаблоныСтрокой Цикл
		
		ОписаниеШаблонаКМ = Новый Массив;
		
		СписокЭлементовКМ = СтрРазделить(ШаблонСтрокой, "+", Ложь);
		Для Каждого ИмяЭлементаКМ Из СписокЭлементовКМ Цикл
			
			ОписаниеЭлементаКМ = ОписаниеЭлементовКМ[СокрЛП(ИмяЭлементаКМ)];
			
			ОписаниеШаблонаКМ.Добавить(ОписаниеЭлементаКМ);
			
		КонецЦикла;
		
		СписокОписанийШаблонов.Добавить(ОписаниеШаблонаКМ);
		
	КонецЦикла;
	
	Возврат СписокОписанийШаблонов;
	
КонецФункции

// Формирует описание элемента для кода маркировки
// 
// Параметры:
// 	Код - Строка - Код элемента.
// 	Имя - Строка - Имя элемента.
// 	КоличествоЗнаков - Число - Число знаков.
// 	АлфавитДопустимыхСимволов - Строка - Если заполнено, то определяет какими символами может быть заполнено значение элемента.
// Возвращаемое значение:
// 	Структура - описание элемента для кода маркировки:
// * Код - Строка - Код элемента.
// * Имя - Строка - Имя элемента.
// * Длина - Число - Число знаков.
// * Алфавит - Строка - Если заполнено, то определяет какими символами может быть заполнено значение элемента.
Функция ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов = "") Экспорт
	ОписаниеКода = Новый Структура;
	ОписаниеКода.Вставить("Код",     Код);
	ОписаниеКода.Вставить("Имя",     Имя);
	ОписаниеКода.Вставить("Длина",   КоличествоЗнаков);
	ОписаниеКода.Вставить("Алфавит", АлфавитДопустимыхСимволов);
	Возврат ОписаниеКода;
КонецФункции

Функция НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции() Экспорт
	Возврат Новый Структура(
		"ВидПродукции, ТипШтрихкодаИВидУпаковки, СоставКодаМаркировки, СписокШаблонов, ДанныеОбщегоМодуля");
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиРазбораКодаМаркировки

Процедура ОпределитьОбщиеМодулиВШаблонахИОписанияхВидовПродукции(НастройкиРазбораКодаМаркировки, ДанныеОбщихМодулейПоВидуПродукции)
	
	Для Каждого СтрокаПоискаШаблона Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки Цикл
		
		ДанныеШаблона      = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[СтрокаПоискаШаблона.Шаблон];
		ДанныеОбщихМодулей = Новый Соответствие;
		
		Для Каждого ВидПродукции Из ДанныеШаблона.ВидыПродукции Цикл
			
			МодулиВыбраннойПодсистемы = ДанныеОбщихМодулейПоВидуПродукции[ВидПродукции];
			
			Если ДанныеОбщихМодулей[МодулиВыбраннойПодсистемы.Подсистема] = Неопределено Тогда
				
				ДанныеОбщихМодулей[МодулиВыбраннойПодсистемы.Подсистема] = МодулиВыбраннойПодсистемы;
				
				ДанныеШаблона.ИменаОбщихМодулей.Добавить(МодулиВыбраннойПодсистемы.Разбор.Имя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Контсруктор настроек разбора кода маркировки.
//
// Возвращаемое значение:
//    Структура:
//     * ДоступныеВидыПродукции - Массив.
//     * Алфавит - Структура.
//     * ИменаОбщихМодулей - Массив.
//     * ШаблоныКодовМаркировкиПоВидамПродукции - ТаблицаЗначений.
//     * ШаблоныКодовМаркировки - ТаблицаЗначений.
//     * ШаблоныИОписанияВидовПродукции - Соответствие.
//     * ДополнительныеПараметры - Структура.
//     * ТолькоСервер - Булево.
//     * ТолькоУчитываемыеВидыПродукции - Булево.
//     * ИдентификаторыПримененияСРазделителемGS - Соответствие.
//     * Хеш - Строка.
//
Функция ИнициализацияНастроекРазбораКодаМаркировки()
	
	ШаблоныКодовМаркировки = Новый ТаблицаЗначений;
	ШаблоныКодовМаркировки.Колонки.Добавить("Шаблон",                           Новый ОписаниеТипов("Строка"));
	ШаблоныКодовМаркировки.Колонки.Добавить("ТипШтрихкода",                     Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ШаблоныКодовМаркировки.Колонки.Добавить("ВидУпаковки",                      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ШаблоныКодовМаркировки.Колонки.Добавить("КоличествоЭлементов",              Новый ОписаниеТипов("Число"));
	ШаблоныКодовМаркировки.Колонки.Добавить("ВключаетИдентификаторыПрименения", Новый ОписаниеТипов("Булево"));
	ШаблоныКодовМаркировки.Колонки.Добавить("Длина",                            Новый ОписаниеТипов("Число"));
	ШаблоныКодовМаркировки.Колонки.Добавить("ДлинаСоСкобкой",                   Новый ОписаниеТипов("Число"));
	ШаблоныКодовМаркировки.Колонки.Добавить("ДлинаСРазделителемGS",             Новый ОписаниеТипов("Число"));
	ШаблоныКодовМаркировки.Колонки.Добавить("КодПервогоЭлемента",               Новый ОписаниеТипов("Строка"));
	
	ШаблоныКодовМаркировкиПоВидамПродукции = ШаблоныКодовМаркировки.СкопироватьКолонки();
	ШаблоныКодовМаркировкиПоВидамПродукции.Колонки.Добавить("ВидПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Настройки = Новый Структура;
	Настройки.Вставить("ДоступныеВидыПродукции",                  Новый Массив);
	Настройки.Вставить("Алфавит",                                 Новый Структура);
	Настройки.Вставить("ИменаОбщихМодулей",                       Новый Массив);
	Настройки.Вставить("ОбщиеМодули",                             Новый Соответствие); // Когда ТолькоСервер = Ложь, тогда очищается.
	Настройки.Вставить("ШаблоныКодовМаркировкиПоВидамПродукции",  ШаблоныКодовМаркировкиПоВидамПродукции); // Когда ТолькоСервер = Ложь, тогда конвертируется в массив структур
	Настройки.Вставить("ШаблоныКодовМаркировки",                  ШаблоныКодовМаркировки); // Когда ТолькоСервер = Ложь, тогда конвертируется в массив структур
	Настройки.Вставить("ШаблоныИОписанияВидовПродукции",          Новый Соответствие);
	Настройки.Вставить("ДополнительныеПараметры",                 Новый Структура);
	Настройки.Вставить("ТолькоСервер",                            Ложь);
	Настройки.Вставить("ТолькоУчитываемыеВидыПродукции",          Ложь);
	Настройки.Вставить("ИдентификаторыПримененияСРазделителемGS", Новый Соответствие);
	Настройки.Вставить("Хеш",                                     "");
	
	Возврат Настройки;
	
КонецФункции

Процедура ЗаполнитьШаблоныКодовМаркировкиПоНачальнымНастройкам(НастройкиРазбораКодаМаркировки, ДанныеОписанийКодаМаркировки)
	
	Для Каждого НастройкаОписанияКодаМаркировки Из ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки Цикл
		
		ВидПродукции = НастройкаОписанияКодаМаркировки.ВидПродукции;
		ТипШтрихкода = НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки.ТипШтрихкода;
		ВидУпаковки  = НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки.ВидУпаковки;
		
		СоставКодаМаркировки = НастройкаОписанияКодаМаркировки.СоставКодаМаркировки;
		
		Для Каждого ОписаниеЭлементовШаблонаКодаМаркировки Из НастройкаОписанияКодаМаркировки.СписокШаблонов Цикл
			
			ДанныеШаблонаКМ = ОписаниеЭлементовШаблонаКодаМаркировкиВСтруктуру(НастройкиРазбораКодаМаркировки, ОписаниеЭлементовШаблонаКодаМаркировки);
			
			// Заполнение поисковой таблицы
			ШаблонКМ = НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Добавить();
			ШаблонКМ.ВидПродукции                     = ВидПродукции;
			ШаблонКМ.ТипШтрихкода                     = ТипШтрихкода;
			ШаблонКМ.ВидУпаковки                      = ВидУпаковки;
			ШаблонКМ.Шаблон                           = ДанныеШаблонаКМ.Шаблон;
			ШаблонКМ.КоличествоЭлементов              = ДанныеШаблонаКМ.КоличествоЭлементов;
			ШаблонКМ.ВключаетИдентификаторыПрименения = ДанныеШаблонаКМ.ВключаетИдентификаторыПрименения;
			ШаблонКМ.Длина                            = ДанныеШаблонаКМ.ДлинаКодаМаркировки;
			ШаблонКМ.ДлинаСоСкобкой                   = ДанныеШаблонаКМ.ДлинаКодаМаркировкиСоСкобкой;
			ШаблонКМ.ДлинаСРазделителемGS             = ДанныеШаблонаКМ.ДлинаКодаМаркировкиСРазделителемGS;
			ШаблонКМ.КодПервогоЭлемента               = ДанныеШаблонаКМ.КодПервогоЭлемента;
			
			// Заполнение правил разбора
			ОписаниеТекущегоШаблона = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ДанныеШаблонаКМ.Шаблон];
			Если ОписаниеТекущегоШаблона = Неопределено Тогда
				
				ПозицииЭлементовКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПозицииЭлементовВШаблонеКодаМаркировки(
					НастройкиРазбораКодаМаркировки, ОписаниеЭлементовШаблонаКодаМаркировки);
				
				ОписаниеТекущегоШаблона = Новый Структура;
				ОписаниеТекущегоШаблона.Вставить("ВидыПродукции",                        Новый Массив);
				ОписаниеТекущегоШаблона.Вставить("ВидыУпаковок",                         Новый Массив);
				ОписаниеТекущегоШаблона.Вставить("ВидыУпаковокПоВидамПродукции",         Новый Соответствие);
				ОписаниеТекущегоШаблона.Вставить("ОписаниеЭлементовКодаМаркировки",      ОписаниеЭлементовШаблонаКодаМаркировки);
				ОписаниеТекущегоШаблона.Вставить("ПозицииЭлементовКодаМаркировки",       ПозицииЭлементовКодаМаркировки);
				ОписаниеТекущегоШаблона.Вставить("ВключаетИдентификаторыПрименения",     ДанныеШаблонаКМ.ВключаетИдентификаторыПрименения);
				ОписаниеТекущегоШаблона.Вставить("СоставКодаМаркировки",                 Неопределено); // Состав определим после формирования всех шаблонов
				ОписаниеТекущегоШаблона.Вставить("ВозможныеСоставыКодаМаркировки",       Новый Массив);
				ОписаниеТекущегоШаблона.Вставить("ИменаОбщихМодулей",                    Новый Массив); // Состав определим после формирования всех шаблонов
				ОписаниеТекущегоШаблона.Вставить("СтрокаТаблицыШаблоныКодовМаркировки",  Неопределено); // Заполним после формирования всех настроек
				
				НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ДанныеШаблонаКМ.Шаблон] = ОписаниеТекущегоШаблона;
				
			КонецЕсли;
			
			ДобавитьСоставКМ = Ложь;
			
			ВидыУпаковокПоВидамПродукции = ОписаниеТекущегоШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
			Если ВидыУпаковокПоВидамПродукции = Неопределено Тогда
				
				ОписаниеТекущегоШаблона.ВидыПродукции.Добавить(ВидПродукции);
				
				ВидыУпаковокПоВидамПродукции = Новый Массив;
				ВидыУпаковокПоВидамПродукции.Добавить(ВидУпаковки);
				ОписаниеТекущегоШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ВидыУпаковокПоВидамПродукции;
				
				ДобавитьСоставКМ = Истина;
				
			ИначеЕсли ВидыУпаковокПоВидамПродукции.Найти(ВидУпаковки) = Неопределено Тогда
				
				ВидыУпаковокПоВидамПродукции.Добавить(ВидУпаковки);
				ДобавитьСоставКМ = Истина;
				
			КонецЕсли;
			
			Если ОписаниеТекущегоШаблона.ВидыУпаковок.Найти(ВидУпаковки) = Неопределено Тогда
				ОписаниеТекущегоШаблона.ВидыУпаковок.Добавить(ВидУпаковки);
				ДобавитьСоставКМ = Истина;
			КонецЕсли;
			
			Если ДобавитьСоставКМ Тогда
				ОписаниеТекущегоШаблона.ВозможныеСоставыКодаМаркировки.Добавить(
					Новый Структура("ВидПродукции, ВидУпаковки, СоставКодаМаркировки",
						ВидПродукции, ВидУпаковки, СоставКодаМаркировки));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИменаКолонок                             = Новый Массив;
	ИменаКолонокБезВидаПродукцииВидаУпаковки = Новый Массив;
	Для Каждого КолонкаТаблици Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Колонки Цикл
		ИменаКолонок.Добавить(КолонкаТаблици.Имя);
		Если Не (КолонкаТаблици.Имя = "ВидПродукции" Или КолонкаТаблици.Имя = "ВидУпаковки") Тогда
			ИменаКолонокБезВидаПродукцииВидаУпаковки.Добавить(КолонкаТаблици.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сворачиваем строки что бы исключить дубли
	ИменаКолонокСтрокой = СтрСоединить(ИменаКолонок, ",");
	НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Свернуть(ИменаКолонокСтрокой);
	
	// Сворачиваем строки без учета Вида продукции и Вида Упаковки
	ИменаКолонокСтрокой = СтрСоединить(ИменаКолонокБезВидаПродукцииВидаУпаковки, ",");
	ШаблоныКодовМаркировки = НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Скопировать(, ИменаКолонокСтрокой);
	ШаблоныКодовМаркировки.Свернуть(ИменаКолонокСтрокой);
	
	ШаблоныКодовМаркировки.Сортировать("ДлинаСоСкобкой, ДлинаСРазделителемGS, Длина");
	
	// Восстановим колонки ВидПродукции и ВидУпаковки
	Для Каждого ИмяКолонки Из СтрРазделить("ВидПродукции,ВидУпаковки", ",") Цикл
		КолонкаТаблици = НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции.Колонки[ИмяКолонки];
		ШаблоныКодовМаркировки.Колонки.Добавить(КолонкаТаблици.Имя, КолонкаТаблици.ТипЗначения);
	КонецЦикла;
	Для Каждого ШаблонКМ Из ШаблоныКодовМаркировки Цикл
		ДанныеШаблона = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ШаблонКМ.Шаблон];
		Если ДанныеШаблона.ВидыПродукции.Количество() = 1 Тогда
			ШаблонКМ.ВидПродукции = ДанныеШаблона.ВидыПродукции[0];
		КонецЕсли;
		Если ДанныеШаблона.ВидыУпаковок.Количество() = 1 Тогда
			ШаблонКМ.ВидУпаковки = ДанныеШаблона.ВидыУпаковок[0];
		КонецЕсли;
	КонецЦикла;
	
	НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки = ШаблоныКодовМаркировки;
	
	// Заполнение СоставКодаМаркировки в данных шаблона
	Для Каждого ШаблонКМ Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки Цикл
		
		СоставКодаМаркировки = Неопределено;
		
		ДанныеШаблона = НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ШаблонКМ.Шаблон];
		
		СоставКодаМаркировки = ДанныеШаблона.ВозможныеСоставыКодаМаркировки[0].СоставКодаМаркировки;
		
		Если ДанныеШаблона.ВидыПродукции.Количество() > 1 Тогда
			
			СвойстваСоставаКМ = Новый Массив;
			Для Каждого ДанныеСоставаКМ Из ДанныеШаблона.ВозможныеСоставыКодаМаркировки[0].СоставКодаМаркировки Цикл
				СвойстваСоставаКМ.Добавить(
					Новый Структура("Имя, Состояние", ДанныеСоставаКМ.Ключ, Истина));
			КонецЦикла;
			
			ПереформироватьСостав = Ложь;
			Для Каждого ДанныеПоСоставуКМ Из ДанныеШаблона.ВозможныеСоставыКодаМаркировки Цикл
				Для Каждого ЭлементСоставаКМ Из СвойстваСоставаКМ Цикл
					Если ЭлементСоставаКМ.Состояние И Не ДанныеПоСоставуКМ.СоставКодаМаркировки.Свойство(ЭлементСоставаКМ.Имя) Тогда
						ЭлементСоставаКМ.Состояние = Ложь;
						ПереформироватьСостав = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если ПереформироватьСостав Тогда
				СоставКМ = Новый Структура;
				Для Каждого ЭлементСоставаКМ Из СвойстваСоставаКМ Цикл
					Если ЭлементСоставаКМ.Состояние Тогда
						СоставКМ.Вставить(ЭлементСоставаКМ.Имя, СоставКодаМаркировки[ЭлементСоставаКМ.Имя]);
					КонецЕсли;
				КонецЦикла;
				СоставКодаМаркировки = СоставКМ;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеШаблона.СоставКодаМаркировки = СоставКодаМаркировки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеЭлементовШаблонаКодаМаркировкиВСтруктуру(НастройкиРазбораКодаМаркировки, ОписаниеЭлементовШаблонаКодаМаркировки)
	
	Шаблон                             = "";
	КоличествоЭлементов                = 0;
	ВключаетИдентификаторыПрименения   = Ложь;
	ДлинаКодаМаркировки                = 0;
	ДлинаКодаМаркировкиСоСкобкой       = 0;
	ДлинаКодаМаркировкиСРазделителемGS = 0;
	КодПервогоЭлемента                 = "";
	КоличествоРазделителейGS           = 0;
	
	СтрокиШаблона = Новый Массив;
	
	КоличествоЭлементов = ОписаниеЭлементовШаблонаКодаМаркировки.Количество();
	Для ТекущийИндекс = 0 По КоличествоЭлементов - 1 Цикл
		
		ОписаниеЭлементаКМ = ОписаниеЭлементовШаблонаКодаМаркировки[ТекущийИндекс];
		
		Если ТекущийИндекс = 0 Тогда
			ВключаетИдентификаторыПрименения = ЗначениеЗаполнено(ОписаниеЭлементаКМ.Код);
			КодПервогоЭлемента               = ОписаниеЭлементаКМ.Код;
		КонецЕсли;
		
		ДлинаКодаМаркировки = ДлинаКодаМаркировки + ОписаниеЭлементаКМ.Длина;
		
		Если ВключаетИдентификаторыПрименения Тогда
			
			ДлинаКодаМаркировки = ДлинаКодаМаркировки + СтрДлина(ОписаниеЭлементаКМ.Код);
			
			Если Не (НастройкиРазбораКодаМаркировки.ИдентификаторыПримененияСРазделителемGS[ОписаниеЭлементаКМ.Код] = Неопределено
				Или (ТекущийИндекс + 1) = КоличествоЭлементов) Тогда
				КоличествоРазделителейGS = КоличествоРазделителейGS + 1;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ТекущийИндекс > 0 Тогда
			СтрокиШаблона.Добавить("+");
		КонецЕсли;
		
		Если ВключаетИдентификаторыПрименения Тогда
			СтрокиШаблона.Добавить(СтрШаблон("%1 + %2 (%3 chars)",
				ОписаниеЭлементаКМ.Код, ОписаниеЭлементаКМ.Имя, ОписаниеЭлементаКМ.Длина));
		Иначе
			СтрокиШаблона.Добавить(СтрШаблон("%1 (%2 chars)",
				ОписаниеЭлементаКМ.Имя, ОписаниеЭлементаКМ.Длина));
		КонецЕсли;
		
	КонецЦикла;
	
	Шаблон = СтрСоединить(СтрокиШаблона, " ");
	
	Если ВключаетИдентификаторыПрименения Тогда
		ДлинаКодаМаркировкиСоСкобкой       = ДлинаКодаМаркировки + КоличествоЭлементов * 2;
		ДлинаКодаМаркировкиСРазделителемGS = ДлинаКодаМаркировки + КоличествоРазделителейGS;
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("Шаблон",                             Шаблон);
	Данные.Вставить("КоличествоЭлементов",                КоличествоЭлементов);
	Данные.Вставить("ВключаетИдентификаторыПрименения",   ВключаетИдентификаторыПрименения);
	Данные.Вставить("ДлинаКодаМаркировки",                ДлинаКодаМаркировки);
	Данные.Вставить("ДлинаКодаМаркировкиСоСкобкой",       ДлинаКодаМаркировкиСоСкобкой);
	Данные.Вставить("ДлинаКодаМаркировкиСРазделителемGS", ДлинаКодаМаркировкиСРазделителемGS);
	Данные.Вставить("КодПервогоЭлемента",                 КодПервогоЭлемента);
	
	Возврат Данные;
	
КонецФункции

Функция МодульОбщегоНазначения() Экспорт
	Возврат ОбщегоНазначения;
КонецФункции

Функция ОбщийМодуль(Имя) Экспорт
	Возврат МодульОбщегоНазначения().ОбщийМодуль(Имя);
КонецФункции

Функция ЭтоСервер() Экспорт
	Возврат Истина;
КонецФункции

Процедура ПодготовитьНастройкиРазбораКодаМаркировкиДляПередачиНаКлиент(НастройкиРазбораКодаМаркировки)
	
	// Конвертируем таблицы значений в массивы структур
	ШаблоныКодовМаркировкиПоВидамПродукции = Новый Массив;
	Для Каждого ШаблонКМ Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции Цикл
		ШаблоныКодовМаркировкиПоВидамПродукции.Добавить(
			ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ШаблонКМ));
	КонецЦикла;
	
	ШаблоныКодовМаркировки = Новый Массив;
	Для Каждого ШаблонКМ Из НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки Цикл
		ШаблоныКодовМаркировки.Добавить(
			ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ШаблонКМ));
	КонецЦикла;
	
	НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировкиПоВидамПродукции = ШаблоныКодовМаркировкиПоВидамПродукции;
	НастройкиРазбораКодаМаркировки.ШаблоныКодовМаркировки                 = ШаблоныКодовМаркировки;
	
	НастройкиРазбораКодаМаркировки.ОбщиеМодули = Новый Соответствие;
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетПроизводственнойЛинии

// Выполняет нормализацию значений штрихкодов
// Параметры:
//  ДанныеОтчетаПроизводственнойЛинии - ТаблицаЗначений - Таблица значений штрихкодов упаковок:
//   * ЗначениеШтрихкода - Строка - значение штрихкода
//   * ЗначениеШтрихкодаУпаковки - Строка - значение штрихкода
//   * ФорматBase64 - Булево - Штрихкод закодирован по алгоритму BASE64.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - фильтр по виду продукции.
//  ПараметрыОбработки - Структура - настройки обработки кодов маркировки:
//   * ПроверятьАлфавитКодовМаркировки - Булево
//   * ВосстанавливатьСтруктуруКодаМаркировки - Булево
//   
// Возвращаемое значение:
//  Структура:
//   * ОбработанныеДанныеОтчета - См. ИнициализацияСостоянияОбработкиКодовМаркировки
//   * ЕстьОшибки - Булево - Признак наличия ошибки в ОбработанныеДанныеОтчета
//   * ИменаГруппКолонок - Массив из Строка - Имена групп колонок (ЗначениеШтрихкода, ЗначениеШтрихкодаУпаковки)
//   * ГруппыКолонок - Массив из Структура - Содержит строковое представление колонок для ИменаГруппКолонок:
//     ** КодМаркировки - Строка
//     ** НормализованныйКодМаркировки - Строка
//     ** ПолныйКодМаркировки - Строка
//     ** ТипШтрихкода - Строка
//     ** ВидУпаковки - Строка
//     ** EAN - Строка
//     ** GTIN - Строка
//     ** КоличествоПотребительскихУпаковок - Строка
//     ** ТекстОшибки - Строка
Функция НормализоватьДанныеОтчетаПроизводственнойЛинии(ДанныеОтчетаПроизводственнойЛинии, ВидПродукции, ПараметрыОбработки) Экспорт
	
	ПараметрыНормализации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбработки, "ПараметрыНормализации");
	Если ПараметрыНормализации = Неопределено Тогда
		ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	КонецЕсли;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = ПараметрыОбработки.ПроверятьАлфавитКодовМаркировки;
	ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация    = Истина;
	ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = Ложь;
	
	НастройкиРазбора = Новый Структура;
	НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбора.Вставить("Общие",            НастройкиРазбораКодаМаркировки(ВидПродукции));
	НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	ПараметрыРазбора = Новый Структура;
	ПараметрыРазбора.Вставить("ВидПродукции", ВидПродукции);
	ПараметрыРазбора.Вставить("НастройкиРазбора", НастройкиРазбора);
	ПараметрыРазбора.Вставить("КешДанныхРазбора", Новый Соответствие);
	ПараметрыРазбора.Вставить("ПараметрыНормализации", ПараметрыНормализации);
	ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", ПараметрыОбработки.ВосстанавливатьСтруктуруКодаМаркировки);
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки = Ложь;
	ПараметрыРазбора.Вставить("ПараметрыНормализацииПрочее", ПараметрыНормализацииПрочее);

	ОбработанныеДанныеОтчетаПроизводственнойЛинии = ИнициализацияСостоянияОбработкиКодовМаркировки();
	
	ИменаГруппКолонок = Новый Массив;
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбработки, "ОбрабатыватьЗначенияШтрихкодУпаковок", Истина) Тогда
		ИменаГруппКолонок.Добавить("ЗначениеШтрихкодаУпаковки");
	КонецЕсли;
	ИменаГруппКолонок.Добавить("ЗначениеШтрихкода");
	
	ГруппыКолонок = Новый Массив;
	Для Каждого ИмяГруппыКолонок Из ИменаГруппКолонок Цикл
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбработки, "КодыМаркировкиНормализованы", Ложь) Тогда
			ИмяКолонкиКодМаркировки = "Нормализованное" + ИмяГруппыКолонок;
		Иначе
			ИмяКолонкиКодМаркировки = ИмяГруппыКолонок;
		КонецЕсли;
		
		ИменаКолонок = Новый Структура;
		ИменаКолонок.Вставить("КодМаркировки",                ИмяКолонкиКодМаркировки);
		ИменаКолонок.Вставить("НормализованныйКодМаркировки", "Нормализованное" + ИмяГруппыКолонок);
		ИменаКолонок.Вставить("ПолныйКодМаркировки",          "Полное"          + ИмяГруппыКолонок);
		ИменаКолонок.Вставить("ТипШтрихкода",                 ИмяГруппыКолонок  + "ТипШтрихкода");
		ИменаКолонок.Вставить("ВидУпаковки",                  ИмяГруппыКолонок  + "ВидУпаковки");
		ИменаКолонок.Вставить("EAN",                          ИмяГруппыКолонок  + "EAN");
		ИменаКолонок.Вставить("GTIN",                         ИмяГруппыКолонок  + "GTIN");
		ИменаКолонок.Вставить("КоличествоВложенныхЕдиниц",    ИмяГруппыКолонок  + "КоличествоВложенныхЕдиниц");
		ИменаКолонок.Вставить("ТекстОшибки",                  "ТекстОшибки"     + ИмяГруппыКолонок);
		ИменаКолонок.Вставить("ДанныеРазбора",                "ДанныеРазбора"   + ИмяГруппыКолонок);
		ИменаКолонок.Вставить("ЭтоКолонкаУпаковки",           ?(ИмяГруппыКолонок = "ЗначениеШтрихкодаУпаковки", Истина, Ложь));
		ИменаКолонок.Вставить("КодДляПередачиИСМП",           ИмяГруппыКолонок + "КодДляПередачиИСМП");
		
		ГруппыКолонок.Добавить(ИменаКолонок);
		
	КонецЦикла;
	
	ЕстьОшибки = Ложь;
	
	Для Каждого ИсходнаяСтрока Из ДанныеОтчетаПроизводственнойЛинии Цикл
		
		Строка = ОбработанныеДанныеОтчетаПроизводственнойЛинии.Добавить();
		Строка.ИсходнаяСтрока = ИсходнаяСтрока;
		
		ВозможнаГрупповаяУпаковкаИлиНабор = Ложь;
		
		Для Каждого ИменаКолонок Из ГруппыКолонок Цикл
			
			ИсходныйКодМаркировки = ИсходнаяСтрока[ИменаКолонок.КодМаркировки];
			
			Если Не ЗначениеЗаполнено(ИсходныйКодМаркировки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИсходнаяСтрока.ФорматBase64 Тогда
				КодМаркировки = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ИсходныйКодМаркировки);
			Иначе
				КодМаркировки = ИсходныйКодМаркировки;
			КонецЕсли;
			
			Результат = ОбработатьКодМаркировкиДляОтчетаОНанесении(КодМаркировки, ПараметрыРазбора);
			Если Результат.Разобран Тогда
				
				Строка.ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки] = Результат.НормализованныйКодМаркировки;
				Строка[ИменаКолонок.ТипШтрихкода]                                = Результат.ТипШтрихкода;
				Строка[ИменаКолонок.ВидУпаковки]                                 = Результат.ВидУпаковки;
				Строка[ИменаКолонок.EAN]                                         = Результат.EAN;
				Строка[ИменаКолонок.GTIN]                                        = Результат.GTIN;
				Строка[ИменаКолонок.ДанныеРазбора]                               = Результат.ДанныеРазбора;

				Если Результат.Свойство("КодДляПередачиИСМП") Тогда
					Строка[ИменаКолонок.КодДляПередачиИСМП] = Результат.КодДляПередачиИСМП;
				КонецЕсли;
				
				Если ИменаКолонок.ЭтоКолонкаУпаковки Тогда
					ВозможнаГрупповаяУпаковкаИлиНабор = Не ЗначениеЗаполнено(Результат.ВидУпаковки);
				ИначеЕсли ВозможнаГрупповаяУпаковкаИлиНабор
					И Не ЗначениеЗаполнено(Результат.ВидУпаковки) Тогда
					Строка[ИменаКолонок.ВидУпаковки] = Перечисления.ВидыУпаковокИС.Потребительская;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Результат.ЕстьОшибки Тогда
				
				Строка.ЕстьОшибки = Истина;
				Строка.ИсходнаяСтрока[ИменаКолонок.ТекстОшибки] = Результат.ТекстОшибки;
				
				ЕстьОшибки = Истина;
				
				Продолжить;
			КонецЕсли;
			
			Если Результат.МаркируемаяУпаковка Тогда
				Строка[ИменаКолонок.ПолныйКодМаркировки] = Результат.ПолныйКодМаркировки;
			ИначеЕсли Результат.КоличествоВложенныхЕдиниц <> Неопределено Тогда
				Строка[ИменаКолонок.КоличествоВложенныхЕдиниц] = Результат.КоличествоВложенныхЕдиниц;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УникальныеGTIN = Новый Соответствие;
	СписокGTIN     = Новый Массив;
	
	Для Каждого СтрокаДанных Из ОбработанныеДанныеОтчетаПроизводственнойЛинии Цикл
		
		ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
		
		Для Каждого ИменаКолонок Из ГруппыКолонок Цикл
			
			GTIN = СтрокаДанных[ИменаКолонок.GTIN];
			
			Если УникальныеGTIN[GTIN] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВидУпаковки = СтрокаДанных[ИменаКолонок.ВидУпаковки];
			
			Если Не ЗначениеЗаполнено(ВидУпаковки) Тогда
				СписокGTIN.Добавить(GTIN);
				УникальныеGTIN.Вставить(GTIN, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если СписокGTIN.Количество() > 0 Тогда
		
		ОписанияGTIN = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(СписокGTIN);
		
		Для Каждого СтрокаДанных Из ОбработанныеДанныеОтчетаПроизводственнойЛинии Цикл
			
			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
			
			Для Каждого ИменаКолонок Из ГруппыКолонок Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаДанных[ИменаКолонок.ВидУпаковки]) Тогда

					GTIN = СтрокаДанных[ИменаКолонок.GTIN];

					Если УникальныеGTIN[GTIN] = Неопределено Тогда
						Продолжить;
					КонецЕсли;

					ОписаниеGTIN = ОписанияGTIN[GTIN];

					Если ОписаниеGTIN <> Неопределено Тогда
						СтрокаДанных[ИменаКолонок.ВидУпаковки] = ОписаниеGTIN.ВидУпаковки;
					КонецЕсли;

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатОбработкиДанныхОтчета = Новый Структура;
	РезультатОбработкиДанныхОтчета.Вставить("ИменаГруппКолонок",        ИменаГруппКолонок);
	РезультатОбработкиДанныхОтчета.Вставить("ГруппыКолонок",            ГруппыКолонок);
	РезультатОбработкиДанныхОтчета.Вставить("ЕстьОшибки",               ЕстьОшибки);
	РезультатОбработкиДанныхОтчета.Вставить("ОбработанныеДанныеОтчета", ОбработанныеДанныеОтчетаПроизводственнойЛинии);
	
	Возврат РезультатОбработкиДанныхОтчета;
	
КонецФункции

Функция ОбработатьКодМаркировкиДляОтчетаОНанесении(КодМаркировки, ПараметрыРазбора)
	
	Результат = ПараметрыРазбора.КешДанныхРазбора[КодМаркировки];
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДлинаКодаМаркировки    = СтрДлина(КодМаркировки);
	СодержитРазделительGS  = НайтиНедопустимыеСимволыXML(КодМаркировки) > 0;
	
	ПримечаниеКРезультатуРазбора = Неопределено;
	ДанныеРазбора = РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
		КодМаркировки,
		ПараметрыРазбора.НастройкиРазбора.Кеш,
		ПараметрыРазбора.ВидПродукции,
		ПримечаниеКРезультатуРазбора,
		ПараметрыРазбора.НастройкиРазбора.Общие,
		ПараметрыРазбора.НастройкиРазбора.Пользовательские);
	
	Если ДанныеРазбора = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru ='Не удалось разобрать код маркировки:
			|%1'"),
			ПримечаниеКРезультатуРазбора.ТекстОшибки);
		
		Результат = Новый Структура;
		Результат.Вставить("ЕстьОшибки",  Истина);
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
		Результат.Вставить("Разобран",    Ложь);
		
		ПараметрыРазбора.КешДанныхРазбора[КодМаркировки] = Результат;
		
		Возврат Результат;
		
	КонецЕсли;
	
	КодДляПередачиИСМП = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
		ДанныеРазбора, ПараметрыРазбора.ВидПродукции, ПараметрыРазбора.ПараметрыНормализацииПрочее);

	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки",                   Ложь);
	Результат.Вставить("ТекстОшибки",                  "");
	Результат.Вставить("Разобран",                     Истина);
	Результат.Вставить("ВидУпаковки",                  ДанныеРазбора.ВидУпаковки);
	Результат.Вставить("ТипШтрихкода",                 ДанныеРазбора.ТипШтрихкода);
	Результат.Вставить("НормализованныйКодМаркировки", ДанныеРазбора.НормализованныйКодМаркировки);
	Результат.Вставить("МаркируемаяУпаковка",          Ложь);
	Результат.Вставить("ПолныйКодМаркировки",          "");
	Результат.Вставить("EAN",                          "");
	Результат.Вставить("GTIN",                         "");
	Результат.Вставить("КоличествоВложенныхЕдиниц",    Неопределено);
	Результат.Вставить("ДанныеРазбора",                ДанныеРазбора);
	Результат.Вставить("КодДляПередачиИСМП",           КодДляПередачиИСМП);

	ПараметрыРазбора.КешДанныхРазбора[КодМаркировки] = Результат;
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
			И ДанныеРазбора.Детализация.ЭтоНеФормализованныйКодМаркировки Тогда
			
			Результат.EAN                       = ДанныеРазбора.СоставКодаМаркировки.EAN;
			Результат.GTIN                      = ДанныеРазбора.СоставКодаМаркировки.GTIN;
			Результат.КоличествоВложенныхЕдиниц = ДанныеРазбора.СоставКодаМаркировки.КоличествоВложенныхЕдиниц;
			
		КонецЕсли;
		
		Возврат Результат
		
	КонецЕсли;
	
	Если Не (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
			ДанныеРазбора.ВидУпаковки, ДанныеРазбора)) Тогда
		
		// Логистическая упаковка
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.МаркируемаяУпаковка = Истина;
	Результат.EAN                 = ДанныеРазбора.СоставКодаМаркировки.EAN;
	Результат.GTIN                = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	
	ДетализацияРазбора = ДанныеРазбора.Детализация;
	
	Если Не ЗначениеЗаполнено(ДанныеРазбора.Детализация.ШаблонРазбораКодаМаркировки) Тогда
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru ='Не удалось определить шаблон кода маркировки'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	ДанныеШаблонаКМ  = ПараметрыРазбора.НастройкиРазбора.Общие.ШаблоныКодовМаркировки.Найти(ДетализацияРазбора.ШаблонРазбораКодаМаркировки, "Шаблон");
	ЭталоннаяДлинаКМ = ДанныеШаблонаКМ["Длина" + ДетализацияРазбора.ИмяСвойстваПозиции];
	
	Если ЭталоннаяДлинаКМ <> ДлинаКодаМаркировки
		И Не (ПараметрыРазбора.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
			И ЭталоннаяДлинаКМ < ДлинаКодаМаркировки) Тогда
		
		// Код маркировки был модифицирован в методе разбора,
		// для дальнейшей обработки этот код не подходит
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru ='Длина кода маркировки не соответствует длине шаблона'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЕстьОшибки        = Ложь;
	СообщенияОбОшибке = Новый Массив;
	
	ВключаетКриптоХвост = ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост;
	
	ВосстановитьСтруктуруКодаМаркировки  = Ложь;
	ПолныйКодМаркировки                  = Неопределено;
	ШаблонКодаМаркировкиНеПоддерживается = Ложь;
	Если ВключаетКриптоХвост Тогда
		Если ДетализацияРазбора.ВключаетИдентификаторыПрименения Тогда
			Если СодержитРазделительGS Тогда
				ПолныйКодМаркировки = КодМаркировки;
			Иначе
				ВосстановитьСтруктуруКодаМаркировки  = ПараметрыРазбора.ВосстанавливатьСтруктуруКодаМаркировки;
				ШаблонКодаМаркировкиНеПоддерживается = Не ПараметрыРазбора.ВосстанавливатьСтруктуруКодаМаркировки;
			КонецЕсли;
		Иначе
			ПолныйКодМаркировки = КодМаркировки;
		КонецЕсли;
	КонецЕсли;
	
	Если ШаблонКодаМаркировкиНеПоддерживается Тогда
		// Нельзя восстанавливать GS в коде маркировки
		ЕстьОшибки = Истина;
		СообщенияОбОшибке.Добавить(
			НСтр("ru ='Формат кода маркировки некорректный:
			          |В структуре кода маркировки отсутствуют разделители GS'"));
	КонецЕсли;
	
	Если ВосстановитьСтруктуруКодаМаркировки Тогда
		
		ПолныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПолныйКодМаркировкиИзЗначенийЭлементов(
			ДетализацияРазбора.ЗначенияЭлементовКодаМаркировки,
			ДетализацияРазбора.ОписаниеЭлементовКодаМаркировки,
			ПараметрыРазбора.НастройкиРазбора.Общие.ИдентификаторыПримененияСРазделителемGS);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
		Результат.ПолныйКодМаркировки = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ПолныйКодМаркировки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = СтрСоединить(СообщенияОбОшибке, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализацияСостоянияОбработкиКодовМаркировки()
	
	ДанныеШтрихкодов = Новый ТаблицаЗначений;
	ДанныеШтрихкодов.Колонки.Добавить("ИсходнаяСтрока");
	ДанныеШтрихкодов.Колонки.Добавить("ЕстьОшибки", Новый ОписаниеТипов("Булево"));
	
	ДанныеШтрихкодов.Колонки.Добавить("ПолноеЗначениеШтрихкода",       Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаТипШтрихкода", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаВидУпаковки",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаEAN",          Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаGTIN",         Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаКоличествоВложенныхЕдиниц", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	
	ДанныеШтрихкодов.Колонки.Добавить("ПолноеЗначениеШтрихкодаУпаковки",       Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиТипШтрихкода", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиВидУпаковки",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиEAN",          Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиGTIN",         Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиКоличествоВложенныхЕдиниц", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	
	ДанныеШтрихкодов.Колонки.Добавить("ДанныеРазбораЗначениеШтрихкода", Новый ОписаниеТипов("Структура"));
	ДанныеШтрихкодов.Колонки.Добавить("ДанныеРазбораЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Структура"));

	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаКодДляПередачиИСМП", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ДанныеШтрихкодов.Колонки.Добавить("ЗначениеШтрихкодаУпаковкиКодДляПередачиИСМП", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));

	Возврат ДанныеШтрихкодов;
	
КонецФункции

#КонецОбласти

#КонецОбласти