// @strict-types

#Область ПрограммныйИнтерфейс

// Вызывается при получении сообщения о передаче файла из другой области данных.
//
// Параметры:
//	ИмяФайла - Строка - полное имя к передаваемому файлу.
//	ИдентификаторВызова - УникальныйИдентификатор - для идентификации конкретного вызова
//	КодОтправителя - Число - код области данных, откуда был передан файл.
//	ПараметрыВызова - Структура - дополнительные параметры вызова,
//						*Код (Число), *Тело (Строка).
//	Обработан - Булево - признак успешной обработки сообщения.
//
Процедура ОбработатьЗапросНаПередачуФайла(ИмяФайла, ИдентификаторВызова, КодОтправителя, ПараметрыВызова, Обработан) Экспорт
	
	ЗаголовокСообщенияОбмена = ОбменДаннымиУНФ.ПрочитатьЗаголовокСообщенияОбмена(ИмяФайла);
	ФорматОбмена = ОбменДаннымиУНФ.РазложитьФорматОбмена(ЗаголовокСообщенияОбмена.Format);
	ЗагрузкаДанныхПерехода = ОбменДаннымиУНФ.ВерсияФорматаЧислом(ФорматОбмена.Версия) = ОбменДаннымиУНФ.ВерсияФорматаЧислом("1.14");
	
	Если ЗагрузкаДанныхПерехода Тогда
		
		Попытка
			Обработан = ОбменДаннымиУНФ.ЗагрузитьДанныеПерехода(ИмяФайла);
		Исключение
			ЗаписьЖурналаРегистрации(
				"ОбменEnterpriseData.ЗагрузкаДанныхПерехода",
				УровеньЖурналаРегистрации.Ошибка,,, 
				ОписаниеОшибки());
				
			Обработан = Ложь;
		КонецПопытки;
		
		РаспределенноеВыполнениеКоманд.ВыслатьКвитанциюПередачиФайла(ИдентификаторВызова, КодОтправителя, Ложь, ПараметрыВызова);

    Иначе
		
		Попытка
			Результат = ИнтеграцияОбменШтрихМ.ЗагрузитьДанныеОбменаИз1СКасса(ИмяФайла);
			ИнтеграцияОбменШтрихМ.ВключитьРозничныеПродажи();
			Константы.ИспользоватьОбменСКассойMinikassir.Установить(Истина);
			Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			
			ЗаписьЖурналаРегистрации(
				"Загрузка1СКасса.Загрузка1СКасса",
				УровеньЖурналаРегистрации.Ошибка,,, 
				ОписаниеОшибки);
				
			РаспределенноеВыполнениеКоманд.ВыслатьКвитанциюПередачиФайла(ИдентификаторВызова, КодОтправителя, Ложь, ПараметрыВызова);
			Обработан = Ложь;
		КонецПопытки;
		
		ИнтеграцияОбменШтрихМ.ОтправитьПисьмоОНовомАбонентеИз1СКасса();

		РаспределенноеВыполнениеКоманд.ВыслатьКвитанциюПередачиФайла(ИдентификаторВызова, КодОтправителя, Ложь, ПараметрыВызова);
		
		Обработан = Истина;
	КонецЕсли;	
	
КонецПроцедуры

// Вызывается при получении квитанции "Успех" на передачу файла из другой области данных.
//
// Параметры:
//	ИдентификаторВызова - УникальныйИдентификатор - для идентификации конкретного вызова
//	КодОтправителя - Число - код области данных, откуда был передан файл.
//	ПараметрыВызова - Структура - дополнительные параметры вызова,
//						*Код (Число), *Тело (Строка).
//	Обработан - Булево - признак успешной обработки сообщения.
//
Процедура ОбработатьОтветНаПередачуФайла(ИдентификаторВызова, КодОтправителя, ПараметрыВызова, Обработан) Экспорт
	
	Обработан = Истина;
	
КонецПроцедуры

// Вызывается при получении квитанции "Ошибка" на передачу файла из другой области данных.
//
// Параметры:
//	ИдентификаторВызова - УникальныйИдентификатор - для идентификации конкретного вызова
//	КодОтправителя - Число - код области данных, откуда был передан файл.
//	ТекстОшибки - Строка - описание возникшей ошибки 
//	Обработан - Булево - признак успешной обработки сообщения.
//
Процедура ОбработатьОшибкуПередачиФайла(ИдентификаторВызова, КодОтправителя, ТекстОшибки, Обработан) Экспорт
	
	Обработан = Истина;
	
КонецПроцедуры

#КонецОбласти  

