#Область ПрограммныйИнтерфейс

// Обновляет подключаемые команды формы, меня пиктограммы у команд печати с присоединенным файлом.
//
// Параметры:
//  УправляемаяФорма               - УправляемаяФорма
//  ОбъектФормы                    - ДанныеФормыСтруктура, основной объект формы
//                                 - ДинамическийСписок, формы списка
//  ВыполнитьСтандартныйОбработчик - Булево
//
Процедура ОбновитьКоманды(УправляемаяФорма, ОбъектФормы, ВыполнитьСтандартныйОбработчик) Экспорт
	
	Если ВыполнитьСтандартныйОбработчик Тогда
		ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(УправляемаяФорма, ОбъектФормы);
	КонецЕсли;
	
	Структура = Новый Структура("ПараметрыПодключаемыхКоманд,ИдентификаторыФайловСЭЦП", Null, Null);
	ЗаполнитьЗначенияСвойств(Структура, УправляемаяФорма);
	ПараметрыПодключаемыхКоманд = Структура.ПараметрыПодключаемыхКоманд;
	Если ТипЗнч(ПараметрыПодключаемыхКоманд) <> Тип("Структура")
		Или Структура.ИдентификаторыФайловСЭЦП = Null Тогда
		
		Возврат;
	КонецЕсли;
	
	ИдентификаторыФайловСЭЦП = Структура.ИдентификаторыФайловСЭЦП;
	Для Каждого Подменю Из ПараметрыПодключаемыхКоманд.ПодменюСУсловиямиВидимости Цикл
		
		Для Каждого ОписаниеКоманды Из Подменю.КомандыСУсловиямиВидимости Цикл
			
			ЭлементФормы = УправляемаяФорма.Элементы.Найти(ОписаниеКоманды.ИмяВФорме);
			Если ЭлементФормы <> Неопределено И ЭлементФормы.Видимость Тогда
				
				Для Каждого Условие Из ОписаниеКоманды.УсловияВидимости Цикл
					
					Если Не СтрНачинаетсяС(Условие.Реквизит, "БЗК_") Тогда
						Продолжить;
					КонецЕсли;
					
					Если ОбъектФормы.Свойство(Условие.Реквизит) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИдентификаторыФайловСЭЦП <> Неопределено Тогда
						ЗначениеКлюча = ИдентификаторыФайловСЭЦП.Получить(Условие.Реквизит) = Истина;
					Иначе
						ЗначениеКлюча = Ложь;
					КонецЕсли;
					
					Если ЗначениеКлюча <> Условие.Значение Тогда
						
						ЭлементФормы.Видимость = Ложь;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ТолькоИдентификаторПечатнойФормы(ИдентификаторПечатнойФормы) Экспорт
	
	ПозицияТочки = СтрНайти(ИдентификаторПечатнойФормы, ".", НаправлениеПоиска.СКонца);
	Если ПозицияТочки > 0 Тогда
		Возврат Сред(ИдентификаторПечатнойФормы, ПозицияТочки + 1);
	КонецЕсли;
	
	Возврат ИдентификаторПечатнойФормы;
	
КонецФункции

Функция ЭтоИдентификаторыЭлектронногоДокумента(Знач ИдентификаторПечатнойФормы) Экспорт
	
	Возврат КадровыйЭДОВызовСервера.НастройкиПечатныхФорм().Получить(
		ТолькоИдентификаторПечатнойФормы(ИдентификаторПечатнойФормы)) <> Неопределено;
	
КонецФункции

Функция ИмяДействияУведомленияОзнакомитьсяИПодписать() Экспорт
	Возврат "ДействиеУведомленияОзнакомитьсяИПодписать";
КонецФункции

Процедура ОбновитьИнформационнуюНадписьОВозможностиРедактированияПечатнойФормы(УправляемаяФорма) Экспорт
	
	Защита = Ложь;
	Для Каждого НастройкаПечатнойФормы Из УправляемаяФорма.НастройкиПечатныхФорм Цикл
		Если УправляемаяФорма[НастройкаПечатнойФормы.ИмяРеквизита].Защита Тогда
			Защита = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		ПрефиксЭлементовОВозможностиРедактирования() + "Группа",
		"Видимость",
		Защита);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		ПрефиксЭлементовОВозможностиРедактирования() + "КомандаРедактирования",
		"Видимость",
		Не Защита);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"КнопкаРедактирование",
		"Видимость",
		Ложь);
	
КонецПроцедуры

Функция ПрефиксЭлементовОВозможностиРедактирования() Экспорт
	Возврат "ИнформацияОДоступностиРедактирования";
КонецФункции

Функция ЭтоРасширениеФайлаЭлектронногоДокумента(Расширение) Экспорт
	
	Возврат СтрНайти(ВРег(РасширенияФайловЭлектронныхДокументов()), "*." + ВРег(Расширение)) > 0;
	
КонецФункции

Функция ЭтоРасширениеФайлаСПредставлением(Расширение) Экспорт
	
	Если ЭтоРасширениеPDFДокумента(Расширение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоРасширениеMXLДокумента(Расширение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СтрНайти(ВРег(РасширенияФайловЭлектронныхДокументов()), "*." + ВРег(Расширение)) > 0;
	
КонецФункции

Функция ЭтоРасширениеPDFДокумента(Расширение) Экспорт
	
	Возврат СтрНайти(ВРег(РасширениеPDFДокумента()), "*." + ВРег(Расширение)) > 0;
	
КонецФункции

Функция ЭтоРасширениеHTMLДокумента(Расширение) Экспорт
	
	Возврат СтрНайти(ВРег(РасширениеHTMLДокумента()), "*." + ВРег(Расширение)) > 0;
	
КонецФункции

Функция ЭтоРасширениеTXTДокумента(Расширение) Экспорт
	
	Возврат СтрНайти(ВРег(РасширениеTXTДокумента()), "*." + ВРег(Расширение)) > 0;
	
КонецФункции

Функция ЭтоРасширениеИзображения(Расширение) Экспорт
	
	Возврат СтрНайти(ВРег(РасширенияИзображений()), "*." + ВРег(Расширение)) > 0;
	
КонецФункции

Функция ЭтоРасширениеMXLДокумента(Расширение) Экспорт
	
	Возврат СтрНайти(ВРег(РасширениеMXLДокумента()), "*." + ВРег(Расширение)) > 0;
	
КонецФункции

Функция ЭтоРасширениеJSONДокумента(Расширение) Экспорт
	
	Возврат СтрНайти(ВРег(РасширениеJSONДокумента()), "*." + ВРег(Расширение)) > 0;
	
КонецФункции

Функция РасширенияФайловЭлектронныхДокументов() Экспорт
	
	РасширенияФайлов = Новый Массив;
	РасширенияФайлов.Добавить(РасширениеPDFДокумента());
	РасширенияФайлов.Добавить(РасширениеHTMLДокумента());
	РасширенияФайлов.Добавить(РасширениеTXTДокумента());
	РасширенияФайлов.Добавить(РасширенияИзображений());
	
	Возврат СтрСоединить(РасширенияФайлов, ";");
	
КонецФункции

Функция РасширениеPDFДокумента() Экспорт
	Возврат "*.pdf";
КонецФункции

Функция РасширениеHTMLДокумента() Экспорт
	Возврат "*.html";
КонецФункции

Функция РасширениеTXTДокумента()
	Возврат "*.txt";
КонецФункции

Функция РасширенияИзображений()
	Возврат "*.jpg;*.jpeg;*.png;*.tiff";
КонецФункции

Функция РасширениеMXLДокумента()
	Возврат "*.mxl";
КонецФункции

Функция РасширениеJSONДокумента()
	Возврат "*.json";
КонецФункции

Функция ОписанияФайловПечатныхФормИзПараметровФормы(ПараметрыФормы) Экспорт
	
	Если Не ПараметрыФормы.Свойство("ПараметрыПечати") Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписанияФайловПечатныхФормИзПараметровПечати(ПараметрыФормы.ПараметрыПечати);
	
КонецФункции

Функция ОписанияФайловПечатныхФормИзПараметровПечати(ПараметрыПечати) Экспорт
	
	ОписанияФайловПечатныхФорм = Неопределено;
	Если ПараметрыПечати.Свойство("ДополнительныеПараметры")
		И ТипЗнч(ПараметрыПечати.ДополнительныеПараметры) = Тип("Структура") Тогда
		
		ПараметрыПечати.ДополнительныеПараметры.Свойство("ОписанияФайловПечатныхФорм", ОписанияФайловПечатныхФорм);
	Иначе
		ПараметрыПечати.Свойство("ОписанияФайловПечатныхФорм", ОписанияФайловПечатныхФорм);
	КонецЕсли;
	
	Возврат ОписанияФайловПечатныхФорм;
	
КонецФункции

Процедура ДобавитьВПараметрыПечатиОписанияФайловПечатныхФорм(ПараметрыПечати, ОписанияФайлов) Экспорт
	
	Если ПараметрыПечати.Свойство("ДополнительныеПараметры")
		И ТипЗнч(ПараметрыПечати.ДополнительныеПараметры) = Тип("Структура") Тогда
		
		ПараметрыПечати.ДополнительныеПараметры.Вставить("ОписанияФайловПечатныхФорм", ОписанияФайлов);
		Возврат;
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ОписанияФайловПечатныхФорм", ОписанияФайлов);
	
КонецПроцедуры

Функция ТолькоРасширение(Знач Расширение) Экспорт
	
	Расширение = СтрЗаменить(Расширение, "*", "");
	Расширение = СтрЗаменить(Расширение, ".", "");
	
	Возврат Расширение;
	
КонецФункции

#КонецОбласти