#Область ПрограммныйИнтерфейс

// Функция - Рассчитать сумму премии по личным продажам
//
// Параметры:
//  СтруктураПараметров	 - Структура:
//		* НачалоПериода - Дата - дата начала
//		* КонецПериода - Дата - дата окончания
//		* ДатаПолученияПравил - Дата - дата получения правил из регистра действующих правил
//		* Организация - СправочникСсылка.Организации - организация для отбора продаж и правил
//		* Сотрудник - СправочникСсылка.Сотрудники - сотрудник для отбора продаж
// 
// Возвращаемое значение:
//  Число - результат расчета суммы премий
//
Функция РассчитатьСуммуПремииПоЛичнымПродажам(Знач СтруктураПараметров) Экспорт
	
	ТаблицаПремийРезультат = РассчитатьТаблицуПремийПоЛичнымПродажам(СтруктураПараметров);
	ТаблицаПремийСвернутая = ПолучитьТаблицуПремииСУчетомГруппировок(ТаблицаПремийРезультат);
	
	Возврат ТаблицаПремийСвернутая.Итог("СуммаПремииДетально");

КонецФункции

// Проверить формулу вида начисления удержания.
// 
// Параметры:
//  ТекстФормулы - Строка - Текст формулы
// 
// Возвращаемое значение:
//  Структура:
// 		* ЕстьОшибки - Булево -
// 		* Ошибки - см. ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю
Функция ПроверитьФормулуВидаНачисленияУдержания(ТекстФормулы) Экспорт
	
	Перем Ошибки;
	
	ЕстьОшибки = Ложь;

	ТекстФормулы = СокрЛП(ТекстФормулы);
	Если СтрЧислоВхождений(ТекстФормулы, СтрокаНачалаОперанда()) <> СтрЧислоВхождений(ТекстФормулы, СтрокаКонцаОперанда()) Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых операндов не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если СтрЧислоВхождений(ТекстФормулы, "(") <> СтрЧислоВхождений(ТекстФормулы, ")") Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых скобок не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	ЗарплатаУНФВызовСервера.ДобавитьПараметрыВСтруктуру(ТекстФормулы, СтруктураПараметров);
	
	Если СтруктураПараметров.Количество() > 3 Тогда
		
		ТекстОшибки = НСтр("ru ='Начисление зарплаты не поддерживает больше 3 показателей в формуле.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	РезультатЗамены = ТекстФормулы;
	
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		
		Найден = Справочники.ПоказателиРасчетов.НайтиПоРеквизиту("Идентификатор", ЭлементСтруктуры.Ключ);
		Если Не ЗначениеЗаполнено(Найден) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru ='Не найден показатель расчета с идентификатором - %1'"),
				ЭлементСтруктуры.Ключ);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		РезультатЗамены = СтрЗаменить(РезультатЗамены, "[" +  ЭлементСтруктуры.Ключ + "]", 10);
		
	КонецЦикла;
	
	Попытка
		
		ОбщегоНазначения.ВычислитьВБезопасномРежиме(РезультатЗамены);
		
	Исключение
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось вычислить выражение - ""%1"". Проверьте формулу'"), ТекстФормулы);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		ЕстьОшибки = Истина;
			
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ТекстФормулы) Тогда
		ЕстьОшибки = Ложь;
	КонецЕсли;
	
	Возврат Новый Структура("ЕстьОшибки, Ошибки", ЕстьОшибки, Ошибки);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция - Рассчитать таблицу премий по личным продажам
//
// Параметры:
//  СтруктураПараметров	 - Структура:
//		* НачалоПериода - Дата - дата начала
//		* КонецПериода - Дата - дата окончания
//		* ДатаПолученияПравил - Дата - дата получения правил из регистра действующих правил
//		* Организация - СправочникСсылка.Организации - организация для отбора продаж и правил
//		* Сотрудник - СправочникСсылка.Сотрудники - сотрудник для отбора продаж
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//		Продавец - СправочникСсылка.Сотрудники - сотрудник
//		Магазин - СправочникСсылка.СтруктурныеЕдиницы - магазин
//		Регистратор - ДокументСсылка - документ регистратор продаж
//		Количество - Число - количество проданных товаров
//		Сумма - Число - сумма проданных товаров
//		ПравилоРасчетаПремий - СправочникСсылка.ПравилаРасчетаПремийПоЛичнымПродажам - правило
//		СуммаПремии - Число - сумма премии
//
Функция РассчитатьТаблицуПремийПоЛичнымПродажам(Знач СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц =  МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода",				СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",				СтруктураПараметров.КонецПериода);
	Запрос.УстановитьПараметр("ДатаДокументаНачисления",	СтруктураПараметров.ДатаПолученияПравил);
	
	Запрос.Текст = ПолучитьТекстЗапросаРасчетаПремийПоЛичнымПродажам(СтруктураПараметров);
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Сотрудник", СтруктураПараметров.Сотрудник);
	
	ТаблицаДвижений  = Запрос.Выполнить().Выгрузить();
	
	ЗапросПремии = Новый Запрос;
	ЗапросПремии.МенеджерВременныхТаблиц =  МенеджерВременныхТаблиц;
	ЗапросПремии.Текст = ("ВЫБРАТЬ * ИЗ Премии");
	РассчитанныеПремии = ЗапросПремии.Выполнить().Выгрузить();
	
	МассивПравилРасчетаПремий = РассчитанныеПремии.ВыгрузитьКолонку("ПравилоРасчетаПремий");
	
	ДеревоПравилРасчетаПремий = ПолучитьДеревоПравилРасчетаПремий(МассивПравилРасчетаПремий);
	
	ОбходВариантовСовместногоРасчетаПремий(ДеревоПравилРасчетаПремий, РассчитанныеПремии);
	
	ИтоговаяТаблицаПремий = ОбъединитьТаблицыДанныхСтрокДерева(ДеревоПравилРасчетаПремий);
	
	ЗапросДвижения = Новый Запрос;
	ЗапросДвижения.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	ЗапросДвижения.УстановитьПараметр("ТаблицаПремий", ИтоговаяТаблицаПремий);	
	ЗапросДвижения.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТаблицаДвижений
	|ИЗ
	|	&ТаблицаДвижений КАК ТаблицаДвижений
	|;
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТаблицаПремий
	|ИЗ
	|	&ТаблицаПремий КАК ТаблицаПремий
	|;
	|ВЫБРАТЬ 
	|	ТаблицаДвижений.Продавец КАК Продавец,
	|	ТаблицаДвижений.Регистратор КАК Регистратор,
	|	ТаблицаДвижений.Магазин КАК Магазин,
	|	СУММА(ТаблицаДвижений.Количество) КАК Количество,
	|	СУММА(ТаблицаДвижений.Сумма) КАК Сумма,
	|	ТаблицаДвижений.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	|	СУММА(ТаблицаДвижений.СуммаПремии) КАК СуммаПремииДетально
	|ИЗ
	|	ТаблицаПремий КАК ТаблицаПремий
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДвижений КАК ТаблицаДвижений
	|		ПО ТаблицаПремий.Сотрудник = ТаблицаДвижений.Продавец
	|			И ТаблицаПремий.ПравилоРасчетаПремий = ТаблицаДвижений.ПравилоРасчетаПремий 
	|СГРУППИРОВАТЬ ПО
	| ТаблицаДвижений.Продавец,
	| ТаблицаДвижений.Магазин,
	| ТаблицаДвижений.ПравилоРасчетаПремий,
	| ТаблицаДвижений.Регистратор
	|";
	
	ТаблицаПремийРезультат = ЗапросДвижения.Выполнить().Выгрузить();
	ЗаполнитьКолонкуПремийПоСотрудникам(ТаблицаПремийРезультат);
	Возврат ТаблицаПремийРезультат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрокаКонцаОперанда() Экспорт
	
	Возврат "]";
	
КонецФункции

Функция СтрокаНачалаОперанда() Экспорт
	
	Возврат "[";
	
КонецФункции

// Функция - Получить текст запроса расчета премий по личным продажам
//
// Параметры:
//  СтруктураПараметров	 - Структура:
//		* НачалоПериода - Дата - дата начала
//		* КонецПериода - Дата - дата окончания
//		* ДатаПолученияПравил - Дата - дата получения правил из регистра действующих правил
//		* Организация - СправочникСсылка.Организации - организация для отбора продаж и правил
//		* Сотрудник - СправочникСсылка.Сотрудники - сотрудник для отбора продаж
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ПолучитьТекстЗапросаРасчетаПремийПоЛичнымПродажам(Знач СтруктураПараметров)
	
	// Отбор по организации
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		
		ОтборОрганизацияПродажи = "Продажи.Организация = &Организация";
		ОтборОрганизацияПравила = "Организация = &Организация";
		
	Иначе
		
		ОтборОрганизацияПродажи = "ИСТИНА";
		ОтборОрганизацияПравила = "ИСТИНА";
		
	КонецЕсли;
	
	// Отбор по продавцу
	Если ЗначениеЗаполнено(СтруктураПараметров.Сотрудник) Тогда
		
		ОтборСотрудник = "Продажи.Ответственный = &Сотрудник";
		
	Иначе
		
		ОтборСотрудник = "ИСТИНА";
		
	КонецЕсли;
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Продажи.Период КАК Период,
	|	Продажи.Регистратор КАК Регистратор,
	|	Продажи.Подразделение КАК Магазин,
	|	Продажи.Ответственный КАК Продавец,
	|	Продажи.Номенклатура КАК Номенклатура,
	|	Продажи.Характеристика КАК Характеристика,
	|	Продажи.Количество КАК Количество,
	|	Продажи.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаРегистрПродаж
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ОтборОрганизацияПродажи
	|	И &ОтборСотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазинов
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|		ПО Магазины.Ссылка = ТаблицаРегистрПродаж.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДействующиеПравилаРасчетаПремийСрезПоследних.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	|	ДействующиеПравилаРасчетаПремийСрезПоследних.Магазин КАК Магазин,
	|	ДействующиеПравилаРасчетаПремийСрезПоследних.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ТаблицаПравил
	|ИЗ
	|	ТаблицаМагазинов КАК ТаблицаМагазинов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеПравилаРасчетаПремий.СрезПоследних(&ДатаДокументаНачисления, &ОтборОрганизацияПравила) КАК ДействующиеПравилаРасчетаПремийСрезПоследних
	|		ПО (ТаблицаМагазинов.Магазин = ДействующиеПравилаРасчетаПремийСрезПоследних.Магазин
	|				ИЛИ ДействующиеПравилаРасчетаПремийСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	(ДействующиеПравилаРасчетаПремийСрезПоследних.ДатаОкончания >= &ДатаДокументаНачисления
	|			ИЛИ ДействующиеПравилаРасчетаПремийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаПравил.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	|	ВТ_ТаблицаПравил.Магазин КАК Магазин,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.УсловиеНачисленияПремий КАК УсловиеНачисленияПремий,
	|	МИНИМУМ(ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления) КАК МинимальноеУсловиеВПравиле
	|ПОМЕСТИТЬ ТаблицаПравил
	|ИЗ
	|	ВТ_ТаблицаПравил КАК ВТ_ТаблицаПравил
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРасчетаПремийПоЛичнымПродажам.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|		ПО ВТ_ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаПравил.ПравилоРасчетаПремий,
	|	ВТ_ТаблицаПравил.Магазин,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.УсловиеНачисленияПремий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаРегистрПродаж.Продавец КАК Продавец,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Сумма, 0)) КАК Сумма,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления КАК УсловиеНачисления,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления КАК УсловиеНачисленияЗначениеУсловияНачисления,
	|	ТаблицаПравил.ПравилоРасчетаПремий.ЗначениеРасчетаПремий КАК ЗначениеРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий.СпособРасчетаПремий КАК СпособРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
	|ПОМЕСТИТЬ ТаблицаПродаж
	|ИЗ
	|	РегистрСведений.СоставСегментаНоменклатуры КАК НоменклатураСегмента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравил КАК ТаблицаПравил
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРасчетаПремийПоЛичнымПродажам.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|			ПО ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка
	|				И ТаблицаПравил.МинимальноеУсловиеВПравиле = ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|			ПО (ТаблицаПравил.Магазин = ТаблицаРегистрПродаж.Магазин
	|					ИЛИ ТаблицаПравил.Магазин = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|		ПО (ТаблицаПравил.ПравилоРасчетаПремий.СегментНоменклатуры = НоменклатураСегмента.Сегмент)
	|ГДЕ
	|	ТаблицаРегистрПродаж.Номенклатура В (НоменклатураСегмента.Номенклатура)
	|	И ТаблицаРегистрПродаж.Характеристика В (НоменклатураСегмента.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистрПродаж.Продавец,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления,
	|	ТаблицаПравил.ПравилоРасчетаПремий.ЗначениеРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий.СпособРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистрПродаж.Продавец,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Количество, 0)),
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Сумма, 0)),
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления,
	|	ТаблицаПравил.ПравилоРасчетаПремий.ЗначениеРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий.СпособРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий
	|ИЗ
	|	ТаблицаПравил КАК ТаблицаПравил
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРасчетаПремийПоЛичнымПродажам.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|		ПО ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка
	|			И ТаблицаПравил.МинимальноеУсловиеВПравиле = ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|		ПО (ТаблицаПравил.Магазин = ТаблицаРегистрПродаж.Магазин
	|				ИЛИ ТаблицаПравил.Магазин = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	ТаблицаПравил.ПравилоРасчетаПремий.СегментНоменклатуры = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистрПродаж.Продавец,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления,
	|	ТаблицаПравил.ПравилоРасчетаПремий.ЗначениеРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий.СпособРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродаж.Продавец КАК Продавец,
	|	ВЫБОР ТаблицаПродаж.ПравилоРасчетаПремий.ПорядокОкругления
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_01)
	|			ТОГДА 0.01
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_05)
	|			ТОГДА 0.05
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_1)
	|			ТОГДА 0.1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_5)
	|			ТОГДА 0.5
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр1)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр5)
	|			ТОГДА 5
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр10)
	|			ТОГДА 10
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр50)
	|			ТОГДА 50
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр100)
	|			ТОГДА 100
	|		ИНАЧЕ 0.01
	|	КОНЕЦ КАК ПорядокОкругления,
	|	ВЫБОР
	|		КОГДА ТаблицаПродаж.УсловиеНачисления.УсловиеНачисленияПремий = ЗНАЧЕНИЕ(Перечисление.УсловияНачисленияПремийПоЛичнымПродажам.ЗаОбъемПродажСумма)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаПродаж.Сумма >= ТаблицаПродаж.УсловиеНачисленияЗначениеУсловияНачисления
	|						ТОГДА ТаблицаПродаж.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаПродаж.УсловиеНачисления.УсловиеНачисленияПремий = ЗНАЧЕНИЕ(Перечисление.УсловияНачисленияПремийПоЛичнымПродажам.ЗаОбъемПродажКоличество)
	|					ТОГДА ВЫБОР
	|							КОГДА ТаблицаПродаж.Количество >= ТаблицаПродаж.УсловиеНачисленияЗначениеУсловияНачисления
	|								ТОГДА ТаблицаПродаж.Количество
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТаблицаПродаж.УсловиеНачисления.УсловиеНачисленияПремий ЕСТЬ NULL
	|							ТОГДА ТаблицаПродаж.Сумма
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК БазаДляНачисления,
	|	ТаблицаПродаж.Сумма КАК ВсегоОбъем,
	|	ТаблицаПродаж.ЗначениеРасчетаПремий КАК ЗначениеРасчетаПремий,
	|	ТаблицаПродаж.СпособРасчетаПремий КАК СпособРасчетаПремий,
	|	ТаблицаПродаж.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
	|ПОМЕСТИТЬ ТаблицаОбъемовПродаж
	|ИЗ
	|	ТаблицаПродаж КАК ТаблицаПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъемовПродаж.Продавец КАК Продавец,
	|	ТаблицаОбъемовПродаж.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ТаблицаОбъемовПродаж.БазаДляНачисления) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УсловиеВыполнено
	|ПОМЕСТИТЬ ТаблицаВыполненныхУсловий
	|ИЗ
	|	ТаблицаОбъемовПродаж КАК ТаблицаОбъемовПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбъемовПродаж.Продавец,
	|	ТаблицаОбъемовПродаж.ПравилоРасчетаПремий
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ТаблицаОбъемовПродаж.БазаДляНачисления) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаРегистрПродаж.Регистратор КАК Регистратор,
	|	ТаблицаРегистрПродаж.Продавец КАК Продавец,
	|	ТаблицаРегистрПродаж.Магазин КАК Магазин,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Сумма, 0)) КАК Сумма,
	|	ТаблицаПравил.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
	|ПОМЕСТИТЬ ТаблицаДвиженийПоРегистру
	|ИЗ
	|	РегистрСведений.СоставСегментаНоменклатуры КАК НоменклатураСегмента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравил КАК ТаблицаПравил
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРасчетаПремийПоЛичнымПродажам.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|			ПО ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка
	|				И ТаблицаПравил.МинимальноеУсловиеВПравиле = ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|			ПО (ТаблицаПравил.Магазин = ТаблицаРегистрПродаж.Магазин
	|					ИЛИ ТаблицаПравил.Магазин = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|		ПО (ТаблицаПравил.ПравилоРасчетаПремий.СегментНоменклатуры = НоменклатураСегмента.Сегмент)
	|ГДЕ
	|	ТаблицаРегистрПродаж.Номенклатура В (НоменклатураСегмента.Номенклатура)
	|	И ТаблицаРегистрПродаж.Характеристика В (НоменклатураСегмента.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистрПродаж.Регистратор,
	|	ТаблицаРегистрПродаж.Продавец,
	|	ТаблицаПравил.ПравилоРасчетаПремий,
	|	ТаблицаРегистрПродаж.Магазин,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистрПродаж.Регистратор,
	|	ТаблицаРегистрПродаж.Продавец,
	|	ТаблицаРегистрПродаж.Магазин,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Количество, 0)),
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Сумма, 0)),
	|	ТаблицаПравил.ПравилоРасчетаПремий
	|ИЗ
	|	ТаблицаПравил КАК ТаблицаПравил
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРасчетаПремийПоЛичнымПродажам.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|		ПО ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка
	|			И ТаблицаПравил.МинимальноеУсловиеВПравиле = ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|		ПО (ТаблицаПравил.Магазин = ТаблицаРегистрПродаж.Магазин
	|				ИЛИ ТаблицаПравил.Магазин = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	ТаблицаПравил.ПравилоРасчетаПремий.СегментНоменклатуры = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистрПродаж.Регистратор,
	|	ТаблицаРегистрПродаж.Продавец,
	|	ТаблицаПравил.ПравилоРасчетаПремий,
	|	ТаблицаРегистрПродаж.Магазин,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРезультатовНачислений.Продавец КАК Сотрудник,
	|	(ЕСТЬNULL(ВЫБОР
	|				КОГДА ТаблицаРезультатовНачислений.СпособРасчетаПремий = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПремийПоЛичнымПродажам.Сумма)
	|					ТОГДА ТаблицаРезультатовНачислений.ЗначениеРасчетаПремий
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТаблицаРезультатовНачислений.СпособРасчетаПремий = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПремийПоЛичнымПродажам.Процент)
	|							ТОГДА (ВЫРАЗИТЬ(ТаблицаРезультатовНачислений.ВсегоОбъем * ТаблицаРезультатовНачислений.ЗначениеРасчетаПремий / 100 / ТаблицаРезультатовНачислений.ПорядокОкругления КАК ЧИСЛО(15, 0))) * ТаблицаРезультатовНачислений.ПорядокОкругления
	|					КОНЕЦ
	|			КОНЕЦ, 0)) КАК СуммаПремии,
	|	ТаблицаРезультатовНачислений.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
	|ПОМЕСТИТЬ Премии
	|ИЗ
	|	ТаблицаОбъемовПродаж КАК ТаблицаРезультатовНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВыполненныхУсловий КАК ТаблицаВыполненныхУсловий
	|		ПО ТаблицаРезультатовНачислений.Продавец = ТаблицаВыполненныхУсловий.Продавец
	|			И ТаблицаРезультатовНачислений.ПравилоРасчетаПремий = ТаблицаВыполненныхУсловий.ПравилоРасчетаПремий
	|ГДЕ
	|	ТаблицаВыполненныхУсловий.УсловиеВыполнено = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДвиженийПоРегистру.Продавец КАК Продавец,
	|	ТаблицаДвиженийПоРегистру.Регистратор КАК Регистратор,
	|	ТаблицаДвиженийПоРегистру.Магазин КАК Магазин,
	|	ТаблицаДвиженийПоРегистру.Количество КАК Количество,
	|	ТаблицаДвиженийПоРегистру.Сумма КАК Сумма,
	|	Премии.СуммаПремии * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) * ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК СуммаПремии,
	|	Премии.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
	|ИЗ
	|	ТаблицаДвиженийПоРегистру КАК ТаблицаДвиженийПоРегистру
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Премии КАК Премии
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокументаНачисления, ) КАК КурсыВалютСрезПоследних
	|			ПО Премии.ПравилоРасчетаПремий.ВалютаРасчета = КурсыВалютСрезПоследних.Валюта
	|		ПО ТаблицаДвиженийПоРегистру.ПравилоРасчетаПремий = Премии.ПравилоРасчетаПремий
	|			И ТаблицаДвиженийПоРегистру.Продавец = Премии.Сотрудник";
	
	Текст = СтрЗаменить(Текст, "&ОтборОрганизацияПродажи", ОтборОрганизацияПродажи);
	Текст = СтрЗаменить(Текст, "&ОтборОрганизацияПравила", ОтборОрганизацияПравила);
	Текст = СтрЗаменить(Текст, "&ОтборСотрудник", ОтборСотрудник); 
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьДеревоПравилРасчетаПремий(МассивПравилРасчетаПремий)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПравилРасчетаПремий", 	МассивПравилРасчетаПремий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаРасчетаПремий.Ссылка КАК ПравилоРасчетаПремий,
	|	ПравилаРасчетаПремий.ВариантСовместногоРасчетаПремий КАК ВариантСовместногоРасчетаПремий,
	|	ПравилаРасчетаПремий.ПометкаУдаления КАК ПометкаУдаления,
	|	ПравилаРасчетаПремий.ЭтоГруппа КАК ЭтоГруппа,
	|	ПравилаРасчетаПремий.СпособРасчетаПремий КАК СпособРасчетаПремий,
	|	ПравилаРасчетаПремий.ЗначениеРасчетаПремий КАК ЗначениеРасчетаПремий
	|ИЗ
	|	Справочник.ПравилаРасчетаПремийПоЛичнымПродажам КАК ПравилаРасчетаПремий
	|ГДЕ
	|	ПравилаРасчетаПремий.Ссылка В(&МассивПравилРасчетаПремий)
	|ИТОГИ ПО
	|	ПравилоРасчетаПремий ТОЛЬКО ИЕРАРХИЯ";
	
	ДеревоПравилРасчетаПремий = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоПравилРасчетаПремий.Колонки.Добавить("ТаблицаПремий", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат ДеревоПравилРасчетаПремий;
	
КонецФункции

Процедура ОбходВариантовСовместногоРасчетаПремий(ДеревоПравилРасчетаПремий, РассчитанныеПремии)
	
	Для каждого СтрокаДереваПравилРасчетаПремий Из ДеревоПравилРасчетаПремий.Строки Цикл
		
		Если СтрокаДереваПравилРасчетаПремий.ЭтоГруппа = Истина Тогда
			
			ОбходВариантовСовместногоРасчетаПремий(СтрокаДереваПравилРасчетаПремий, РассчитанныеПремии);
			СовместныйРасчетПремий(СтрокаДереваПравилРасчетаПремий);
			
		Иначе
			Если СтрокаДереваПравилРасчетаПремий.Родитель = Неопределено Тогда
				
				ОбходВариантовСовместногоРасчетаПремий(СтрокаДереваПравилРасчетаПремий, РассчитанныеПремии);
				СовместныйРасчетПремий(СтрокаДереваПравилРасчетаПремий);
				
			Иначе
				
				ПараметрыОтбора = Новый Структура("ПравилоРасчетаПремий", СтрокаДереваПравилРасчетаПремий.ПравилоРасчетаПремий);
				СтрокаДереваПравилРасчетаПремий.ТаблицаПремий = РассчитанныеПремии.Скопировать(ПараметрыОтбора);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СовместныйРасчетПремий(СтрокаДереваПравилРасчетаПремий)
	
	ТаблицаПремий = ОбъединитьТаблицыДанныхСтрокДерева(СтрокаДереваПравилРасчетаПремий);
	
	ТЗ = ПолучитьПустуюТаблицуПремий();
	
	ГруппаПустая = СтрокаДереваПравилРасчетаПремий.ЭтоГруппа = NULL
					И СтрокаДереваПравилРасчетаПремий.ВариантСовместногоРасчетаПремий = NULL;
	
	Сложение = Ложь;
	
	Если СтрокаДереваПравилРасчетаПремий.ВариантСовместногоРасчетаПремий = Перечисления.ВариантыСовместногоРасчетаПремий.Максимум Тогда
		
		ТаблицаПремий.Сортировать("Сотрудник, СуммаПремии Убыв");
		
	ИначеЕсли СтрокаДереваПравилРасчетаПремий.ВариантСовместногоРасчетаПремий = Перечисления.ВариантыСовместногоРасчетаПремий.Минимум Тогда
		
		ТаблицаПремий.Сортировать("Сотрудник, СуммаПремии Возр");
		
	ИначеЕсли СтрокаДереваПравилРасчетаПремий.ВариантСовместногоРасчетаПремий = Перечисления.ВариантыСовместногоРасчетаПремий.Сложение 
		ИЛИ ГруппаПустая Тогда
		
		ТаблицаПремий.Сортировать("Сотрудник");
		Сложение = Истина;
		
	КонецЕсли;
	
	Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	Для Каждого СтрокаТаблицы Из ТаблицаПремий Цикл		
		
		Если СтрокаТаблицы.Сотрудник <> Сотрудник Тогда
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.Сотрудник = СтрокаТаблицы.Сотрудник;
			НоваяСтрокаТЗ.СуммаПремии = СтрокаТаблицы.СуммаПремии;
			НоваяСтрокаТЗ.ПравилоРасчетаПремий = СтрокаТаблицы.ПравилоРасчетаПремий;
			Сотрудник = СтрокаТаблицы.Сотрудник;
		Иначе
			Если Сложение Тогда
				НоваяСтрокаТЗ = ТЗ.Добавить();
				НоваяСтрокаТЗ.Сотрудник = СтрокаТаблицы.Сотрудник;
				НоваяСтрокаТЗ.СуммаПремии = СтрокаТаблицы.СуммаПремии;
				НоваяСтрокаТЗ.ПравилоРасчетаПремий = СтрокаТаблицы.ПравилоРасчетаПремий;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДереваПравилРасчетаПремий.ТаблицаПремий = ТЗ.Скопировать();
		
КонецПроцедуры

Функция ПолучитьПустуюТаблицуПремий()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник", 				Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("СуммаПремии",       		ОбщегоНазначения.ОписаниеТипаЧисло(12, 2));
	Таблица.Колонки.Добавить("ПравилоРасчетаПремий",	Новый ОписаниеТипов("СправочникСсылка.ПравилаРасчетаПремийПоЛичнымПродажам"));
	
	Возврат Таблица;
	
КонецФункции

Функция ОбъединитьТаблицыДанныхСтрокДерева(ДеревоПравилРасчетаПремий)
	
	Таблица = ПолучитьПустуюТаблицуПремий();
	
	Для Каждого СтрокаДерева Из ДеревоПравилРасчетаПремий.Строки Цикл
		
		Для Каждого СтрокаТаблицы Из СтрокаДерева.ТаблицаПремий Цикл
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьТаблицуПремииСУчетомГруппировок(Знач ТаблицаПремийРезультат)
	
	Перем Колонка;
	
	ИндексКолонки = ТаблицаПремийРезультат.Колонки.Количество() - 1;
	Пока ИндексКолонки >= 0 Цикл
		
		Колонка = ТаблицаПремийРезультат.Колонки[ИндексКолонки];
		
		Если Колонка.Имя = "СуммаПремииДетально"
			ИЛИ Колонка.Имя = "Продавец" Тогда
			
			ИндексКолонки = ИндексКолонки - 1;
			Продолжить;
			
		КонецЕсли;
		
		ТаблицаПремийРезультат.Колонки.Удалить(ИндексКолонки);
		
		ИндексКолонки = ИндексКолонки - 1;
		
	КонецЦикла;
	
	ТаблицаПремийРезультат.Свернуть("Продавец, СуммаПремииДетально");
	
	Возврат ТаблицаПремийРезультат;

КонецФункции

Процедура ЗаполнитьКолонкуПремийПоСотрудникам(ТаблицаПремийРезультат)
	
	ТаблицаПремийРезультат.Колонки.Добавить("СуммаПремии", ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	КопияТаблицыПремий = ТаблицаПремийРезультат.Скопировать();
	КопияТаблицыПремий.Колонки.Удалить("Регистратор");
	КопияТаблицыПремий.Свернуть("Продавец, Магазин, ПравилоРасчетаПремий, СуммаПремииДетально", "Количество, Сумма");
	Продавцы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КопияТаблицыПремий.ВыгрузитьКолонку("Продавец"));
	Для каждого Продавец Из Продавцы Цикл
		
		Отбор = Новый Структура("Продавец", Продавец);
		СуммаПремии =  КопияТаблицыПремий.Скопировать(КопияТаблицыПремий.НайтиСтроки(Отбор)).Итог("СуммаПремииДетально");
		Строки = ТаблицаПремийРезультат.НайтиСтроки(Отбор);
		Для каждого Строка Из Строки Цикл
		
			Строка.СуммаПремии = СуммаПремии;
		
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти