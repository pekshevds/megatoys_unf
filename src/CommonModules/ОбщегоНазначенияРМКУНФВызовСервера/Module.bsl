
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура заполняет параметры для закрытия смены на ККТ.
//
// Параметры:
//  ПараметрыВыемки - Структура - см. РозничныеПродажиКлиентСервер.ПараметрыВыемкиИзКассы().
//
Процедура ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки) Экспорт
	
	//РозничныеПродажиСервер.ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
	
КонецПроцедуры

// Проверяет является ли вид оплаты безналичной формой оплаты.
//
// Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// Возвращаемое значение:
//  Булево - Истина, если переданный вид оплаты является безналичной формой оплаты.
//
Функция ЭтоОплатаПлатежнойКартой(ВидОплаты) Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.ЭтоОплатаПлатежнойКартой(ВидОплаты);
	
КонецФункции

// Возвращает вид оплаты платежной картой при продаже
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - чек ККМ продажи.
//
// Возвращаемое значение:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты платежной карты, который был учтен при продаже.
//
Функция ВидОплатыПриПродаже(ЧекПродажи) Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.ВидОплатыПриПродаже(ЧекПродажи);
	
КонецФункции

// Определяет возможность внесения денег.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ.
//  Организация - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//  Булево - Ложь, если документы для внесения отсутствуют.
//
Функция ВозможностьВнесенияДенег(КассаККМ, Организация) Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.ВозможностьВнесенияДенег(КассаККМ, Организация);
	
КонецФункции

// Проверяет возможность выемки из КассыККМ на требуемую сумму.
//
// Параметры:
//  ПараметрыВыполнения - Структура.
//  ПараметрыИнформации - Структура.
//  ИспользоватьАгентскиеПлатежиИРазделениеВыручки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если есть возможность произвести выемку ДС.
//
Функция ВозможностьВыемкиДС(ПараметрыВыполнения, ПараметрыИнформации, ИспользоватьАгентскиеПлатежиИРазделениеВыручки = Ложь) Экспорт
	
	//Возврат РозничныеПродажиСервер.ВозможностьОперацииВыемкиДенежныхСредств(
	//	ПараметрыВыполнения,
	//	ПараметрыИнформации,
	//	ИспользоватьАгентскиеПлатежиИРазделениеВыручки);
	
КонецФункции

// Получает цену на товар.
//
// Параметры:
//  Магазин - СправочникСсылка.Магазины - Магазин, для которого нужно получить цену.
//  ДанныеТовара - Структура - структура с параметрами товара, для которых нужно получить цену.
//
// Возвращаемое значение:
//  Цена - Число - актцальное значения цены.
//
Функция ЦенаПродажи(Магазин, ДанныеТовара) Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.ЦенаПродажи(Магазин, ДанныеТовара);
	
КонецФункции

// Возвращает значение ФО ИспользоватьНовыйРМК.
// Значение по умолчанию Истина.
//
// Возвращаемое значение:
//  ИспользоватьНовыйРМК - булево - признак использования нового РМК.
//
Функция ВключеноИспользованиеНовогоРМК() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНовоеРМК");
	
КонецФункции

// Запускает длительную операцию для формирования ОРП.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - касса ККМ для формирования ОРП.
//  УникальныйИдентификатор - Строка - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция НачатьФормированиеОтчетаОРозничныхПродажах(КассаККМ, УникальныйИдентификатор) Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.НачатьФормированиеОтчетаОРозничныхПродажах(КассаККМ, УникальныйИдентификатор);
	
КонецФункции

// Процедура создает документ Поступление в кассу.
//
// Параметры:
//  ДокументОснование - ДокументСсылка.ВыемкаНаличных - документ выемки из кассы ККМ.
//  ПараметрыСозданияПоступления - Структура - параметры для создания документа.
//    * Касса - СправочникСсылка.Кассы - Касса организации, для которой оформляется поступление.
//    * КассаККМ - ОпределяемыйТип.КассаККМРМК - Касса ККМ, с которой оформляется прием розничной выручки.
//
Процедура СоздатьПоступлениеВКассу(ДокументОснование, ПараметрыСозданияПоступления) Экспорт
	
	ОбщегоНазначенияРМКУНФ.СоздатьПоступлениеВКассу(ДокументОснование, ПараметрыСозданияПоступления);
	
КонецПроцедуры

// Создает документ Выемка наличных.
//
// Параметры:
//  Результат - Число, Неопределено - результат обработки оповещения.
//  ПараметрыВыемки - Структура - параметры для создания документа.
//    * ИзымаемаяСумма - Число - изымаемая сумма.
//    * КассаККМ - ОпределяемыйТип.КассаККМРМК - Касса ККМ, из которой оформляется прием розничной выручки.
//    * ОРП - ДокументСсылка.ОтчетОРозничныхПродажах - ОРП, в рамках которого оформляется выемка.
//
// Возвращаемое значение:
//  Неопределено, ДокументСсылка.ВыемкаНаличных.
//
Функция СформироватьДокументВыемки(Результат, ПараметрыВыемки) Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.СформироватьДокументВыемки(Результат, ПараметрыВыемки);
	
КонецФункции

// Определяет необходимость ввода характеристики по переданной номенклатуре.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо проверить характеристики.
//
// Возвращаемое значение:
//  Булево - Истина, если необходим ввод характеристик.
//
Функция ТребуетсяВводХарактеристики(Номенклатура) Экспорт
	
	Возврат ОбщегоНазначенияРМК.ТребуетсяВводХарактеристикиДляНоменклатуры(Номенклатура);
	
КонецФункции

// Создает временное хранилище с пустой таблицей значений.
//
// Параметры:
//  УникальныйИдентификатор - Строка - уникальный идентификатор формы.
//
// Возвращаемое значение:
//  Строка - Адрес временного хранилища
//
Функция СоздатьХранилище(УникальныйИдентификатор) Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.СоздатьХранилище(УникальныйИдентификатор);
	
КонецФункции

// Возвращает массив структур таблицы авансов из временного хранилища.
//
// Параметры:
//  АдресПредоплатаВХранилище - Строка - Адрес временного хранилища таблицы авансов.
//
// Возвращаемое значение:
//  Массив - структур - соответствует возвращаемой таблице из общей формы ФормаПодбораАвансовПокупателей
//
Функция ЗаполнитьАвансы(АдресПредоплатаВХранилище) Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.ЗаполнитьАвансы(АдресПредоплатаВХранилище);
	
КонецФункции


// Разблокирует объект сервера лояльности (например - подарочный сертификат)
// 
// Параметры:
//  ТипОбъекта - Строка - описание, какой именно объект требуется разблокировать
//                        (например: clientbonuses- разблокировать бонусы, giftcard - разблокировать подарочный сертификат)
//  ПараметрыВыемки - Структура - параметры для разблокировки объекта сервиса лояльности.
//    * НомерСертификата - Строка - номер подарочного сертификата.
//    * ДисконтнаяКарта - ОпределяемыйТип.ДисконтнаяКартаРМК - дисконтная карта, бонусы которой будут разблокированы.
//
Процедура РазблокироватьОбъектСервераЛояльности(ТипОбъекта, ПараметрыОбъекта) Экспорт
	
	Если ТипОбъекта = "clientbonuses" Тогда
		СерверЛояльностиПоставщикДанных.РазблокироватьБонусы(ПараметрыОбъекта.ДисконтнаяКарта);
	КонецЕсли;
	
	Если ТипОбъекта = "giftcard" Тогда
		ДанныеСертификата = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиПодарочныйСертификат(ПараметрыОбъекта, ДанныеСертификата);
		СерверЛояльностиПоставщикДанных.РазблокироватьПодарочныйСертификат(ДанныеСертификата);
	КонецЕсли;
	
КонецПроцедуры

Функция ПредварительнаяПроверкаЧеков(КассаККМ) Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.ПредварительнаяПроверкаЧеков(КассаККМ);
	
КонецФункции

// Возвращает признак использования автоматических скидок.
//
// Возвращаемое значение:
//  Булево - Истина, если используются автоматические скидки.
//
Функция ИспользуютсяАвтоматическиеСкидки() Экспорт
	
	Возврат ОбщегоНазначенияРМКУНФ.ИспользуютсяАвтоматическиеСкидки();
	
КонецФункции

// Дополняет данные выбора товара. Актуально для вызова формы подбора прикладной конфигурации в новом РМК.
//
// Параметры:
//  ДанныеВыбора - Структура - См. ОбщегоНазначенияРМКРТКлиент.ОсновныеПоляФормыВыбораТоваровРМК
//  Магазин - СправочникСсылка.Магазины - текущий магазин
//
Процедура ДозаполнитьДанныеРучногоВыбора(ДанныеВыбора, МассивДанных, РозничныйВидЦены) Экспорт
	ОбщегоНазначенияРМКУНФ.ДозаполнитьДанныеРучногоВыбора(ДанныеВыбора, МассивДанных, РозничныйВидЦены);
КонецПроцедуры

// Проверяет наличие роли на совершение операций внесения и выемки.
//
// Возвращаемое значение:
//  Булево - Истина, если есть роль на совершение операций.
//
Функция ЕстьРольНаВнесениеИВыемкуДС() Экспорт
	
	ЕстьРоль = УправлениеДоступом.ЕстьРоль("ДобавлениеИзменениеВнесенияИВыемкиНаличных");
	Возврат ЕстьРоль;
	
КонецФункции

// Функция выполняет получение параметров кассы ККМ.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаККМРМК.
//
// Возвращаемое значение:
//  Структура - структура данных кассы:
//	* ЭтоФискальныйРегистратор - Булево,
//	* Организация - СправочникСсылка.Организация,
//	* СтруктурнаяЕдиница - СправочникСсылка.СтруктурныеЕдиницы,
//	* ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование,
//	* ИспользоватьБезПодключенияОборудования - Булево,
//	* ЭлектронныйЧекSMSПередаютсяПрограммой1С - Булево,
//	* ЭлектронныйЧекEmailПередаютсяПрограммой1С - Булево,
//	* СоздаватьВыемку - Булево,
//	* СоздаватьПоступлениеВКассу - Булево,
//	* КассаДляРозничнойВыручки - СправочникСсылка.Кассы,
//	* МинимальныйОстатокВКассеККМ - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная
//
Функция ПолучитьПараметрыКассыККМ(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФискальныйРегистратор,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	КассыККМ.ПодключаемоеОборудование КАК ИдентификаторУстройства,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	КассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С КАК ЭлектронныйЧекSMSПередаютсяПрограммой1С,
	|	КассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С КАК ЭлектронныйЧекEmailПередаютсяПрограммой1С,
	|	КассыККМ.СоздаватьВыемку КАК СоздаватьВыемку,
	|	КассыККМ.СоздаватьПоступлениеВКассу КАК СоздаватьПоступлениеВКассу,
	|	КассыККМ.КассаДляРозничнойВыручки КАК КассаДляРозничнойВыручки,
	|	КассыККМ.МинимальныйОстатокВКассеККМ КАК МинимальныйОстатокВКассеККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура(
			"ИдентификаторУстройства,
			|ИспользоватьБезПодключенияОборудования,
			|ЭтоФискальныйРегистратор,
			|Организация,
			|СтруктурнаяЕдиница,
			|ЭлектронныйЧекSMSПередаютсяПрограммой1С,
			|ЭлектронныйЧекEmailПередаютсяПрограммой1С,
			|СоздаватьВыемку,
			|СоздаватьПоступлениеВКассу,
			|КассаДляРозничнойВыручки,
			|МинимальныйОстатокВКассеККМ",
			Выборка.ИдентификаторУстройства,
			Выборка.ИспользоватьБезПодключенияОборудования,
			Выборка.ЭтоФискальныйРегистратор,
			Выборка.Организация,
			Выборка.СтруктурнаяЕдиница,
			Выборка.ЭлектронныйЧекSMSПередаютсяПрограммой1С,
			Выборка.ЭлектронныйЧекEmailПередаютсяПрограммой1С,
			Выборка.СоздаватьВыемку,
			Выборка.СоздаватьПоступлениеВКассу,
			Выборка.КассаДляРозничнойВыручки,
			Выборка.МинимальныйОстатокВКассеККМ);
		
	Иначе
		
		Возврат Новый Структура(
			"ИдентификаторУстройства,
			|ИспользоватьБезПодключенияОборудования,
			|ЭтоФискальныйРегистратор,
			|Организация,
			|СтруктурнаяЕдиница,
			|ЭлектронныйЧекSMSПередаютсяПрограммой1С,
			|ЭлектронныйЧекEmailПередаютсяПрограммой1С,
			|СоздаватьВыемку,
			|СоздаватьПоступлениеВКассу,
			|КассаДляРозничнойВыручки,
			|МинимальныйОстатокВКассеККМ",
			Справочники.ПодключаемоеОборудование.ПустаяСсылка(),
			Ложь,
			Ложь,
			Справочники.Организации.ПустаяСсылка(),
			Справочники.СтруктурныеЕдиницы.ПустаяСсылка(),
			Ложь,
			Ложь,
			Ложь,
			Ложь,
			Справочники.Кассы.ПустаяСсылка(),
			0);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти