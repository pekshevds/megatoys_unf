#Область ПрограммныйИнтерфейс

// Параметры:
//  Логин - Строка 
//  Пароль - Строка
//
Процедура ПриВыполненииАвторизации(ПараметрыАвторизации) Экспорт
	
КонецПроцедуры

// Перед записью распознанного документа.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.РаспознанныйДокумент
//  РезультатОбратнойСвязи - Неопределено - Результат обратной связи
Процедура ПередЗаписьюРаспознанногоДокумента(
		ДокументОбъект,
		РезультатОбратнойСвязи = Неопределено
	) Экспорт
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		
		ПараметрНомер = "";
		ПараметрДата = "";
		ПараметрСумма = "";
		
		ОсновныеРеквизиты = Новый Структура;
		Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
			
			Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
				ОсновныеРеквизиты.Вставить("Покупатель", "Контрагент");
				ОсновныеРеквизиты.Вставить("ПродавецОрганизация", "Организация");
			Иначе
				ОсновныеРеквизиты.Вставить("Продавец", "Контрагент");
				ОсновныеРеквизиты.Вставить("ПокупательОрганизация", "Организация");
			КонецЕсли;
		ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
			
			Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
				ОсновныеРеквизиты.Вставить("Покупатель", "Контрагент");
				ОсновныеРеквизиты.Вставить("Исполнитель", "Организация");
			Иначе
				ОсновныеРеквизиты.Вставить("Продавец", "Контрагент");
				ОсновныеРеквизиты.Вставить("ПокупательОрганизация", "Организация");
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ДокументОбъект.РеквизитыДокумента Цикл
			Если СтрокаТаблицы.ИмяРеквизита = "НомерДокумента" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
					ПараметрНомер = СтрокаТаблицы.Значение;
				Иначе
					ПараметрНомер = СтрокаТаблицы.РаспознанныйТекст;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы.ИмяРеквизита = "ДатаДокумента" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
					ПараметрДата = Формат(СтрокаТаблицы.Значение, "ДЛФ=D");
				Иначе
					ПараметрДата = СтрокаТаблицы.РаспознанныйТекст;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы.ИмяРеквизита = "ИтогоВсего" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
					ПараметрСумма = СтрокаТаблицы.Значение;
				Иначе
					ПараметрСумма = СтрокаТаблицы.РаспознанныйТекст;
				КонецЕсли;
			ИначеЕсли ОсновныеРеквизиты.Свойство(СтрокаТаблицы.ИмяРеквизита) Тогда
				ДокументОбъект[ОсновныеРеквизиты[СтрокаТаблицы.ИмяРеквизита]] = СтрокаТаблицы.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатОбратнойСвязи <> Неопределено Тогда
			РезультатОбратнойСвязи.НомерРаспознанногоДокумента = ДокументОбъект.Номер;
			РезультатОбратнойСвязи.ЭтоВходящийДокумент = (ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
			РезультатОбратнойСвязи.НомерДокумента = ПараметрНомер;
			РезультатОбратнойСвязи.ДатаДокумента = ПараметрДата;
			РезультатОбратнойСвязи.СуммаДокумента = ПараметрСумма;
			РезультатОбратнойСвязи.Контрагент = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ДокументОбъект.Контрагент);
			РезультатОбратнойСвязи.Организация = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ДокументОбъект.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// При сопоставлении типов документов.
// 
// Параметры:
//  СоответствиеТиповДокументов - Соответствие Из Строка, ПеречислениеСсылка.ТипыДокументовРаспознаваниеДокументов
Процедура ПриСопоставленииТиповДокументов(СоответствиеТиповДокументов) Экспорт
	
КонецПроцедуры

// При сопоставлении реквизитов документа.
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовРаспознаваниеДокументов 
//  СопоставленныеРеквизиты - ТаблицаЗначений:
// * Адрес - Строка 
// * ИмяРеквизита - Строка 
// * ОписаниеТипа - ОписаниеТипов
// * НеОтображать - Булево 
// * НетНаПечатнойФорме - Булево
//
Процедура ПриСопоставленииРеквизитовДокумента(ТипДокумента, СопоставленныеРеквизиты) Экспорт
	
КонецПроцедуры

// При приведении типа реквизита в объекте.
// 
// Параметры:
//  МетаданныеОбъекта - ОбъектМетаданных
//  ПереданноеЗначение - Произвольный
//  ТипЭтогоЗначения - Тип
//  ТипРеквизитаВОбъекте - Тип
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыСтавокНДС - При приведении типа реквизита в объекте
Функция ПриПриведенииТипаРеквизитаВОбъекте(
		МетаданныеОбъекта,
		ПереданноеЗначение,
		ТипЭтогоЗначения,
		ТипРеквизитаВОбъекте
	) Экспорт
	
	Если ТипРеквизитаВОбъекте = Тип("ПеречислениеСсылка.ВидыСтавокНДС")
		И ТипЭтогоЗначения = Тип("СправочникСсылка.СтавкиНДС") Тогда
		
		Результат = Перечисления.ВидыСтавокНДС.ВидСтавки(ПереданноеЗначение);
	Иначе
		Результат = ПереданноеЗначение;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// При определении юр физ лица по организационной форме.
// 
// Параметры:
//  Результат - Структура Из ПеречислениеСсылка.ЮридическоеФизическоеЛицо
//
Процедура ПриОпределенииЮрФизЛицаПоОрганизационнойФорме(Результат) Экспорт
	
	Значение = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Результат.Вставить("публичное акционерное общество", Значение);
	Результат.Вставить("открытое акционерное общество", Значение);
	Результат.Вставить("закрытое акционерное общество", Значение);
	Результат.Вставить("общество с ограниченной ответственностью", Значение);
	Результат.Вставить("акционерное общество", Значение);
	Результат.Вставить("федеральное государственное унитарное предприятие", Значение);
	Результат.Вставить("пао", Значение);
	Результат.Вставить("оао", Значение);
	Результат.Вставить("зао", Значение);
	Результат.Вставить("ооо", Значение);
	Результат.Вставить("ао", Значение);
	Результат.Вставить("фгуп", Значение);
	
	Значение = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Результат.Вставить("индивидуальный предприниматель", Значение);
	Результат.Вставить("ип", Значение);
	
КонецПроцедуры

// В параметре Параметры.ТекстЗапросаКандидаты требуется выбрать:
// - Ссылка
// - ДополнительнаяСсылка
// - Все поля, добавленные в параметр ВесаРеквизитовПредварительнойОценки
// или оставить параметр пустым, тогда будет составлен запрос по-умолчанию к объекту метаданного.
//
Процедура ПриОпределенииПараметровНечеткогоПоиска(Параметры, МетаданныеОбъекта) Экспорт
	
	// УНФ
	Если МетаданныеОбъекта = Метаданные.Справочники.Номенклатура Тогда 
		
		Параметры.СоответствиеРеквизитов.Вставить("НаименованиеПолное", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Артикул", "Артикул");
		
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.ВесаРеквизитов.Вставить("Артикул", 0.1);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("НаименованиеПолное");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Артикул");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("НаименованиеПолное", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Артикул", 1);
		
		Параметры.ТекстЗапросаКандидаты = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	ХарактеристикиНоменклатуры.Ссылка КАК ДополнительнаяСсылка,
			|	Номенклатура.Артикул КАК Артикул,
			|	Номенклатура.Наименование + "" "" + ХарактеристикиНоменклатуры.Наименование КАК Наименование,
			|	(ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(200))) + "" "" + ХарактеристикиНоменклатуры.Наименование КАК НаименованиеПолное,
			|	ЛОЖЬ КАК ПометкаУдаления,
			|	ЛОЖЬ КАК ЭтоГруппа
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
			|				ИЛИ Номенклатура.КатегорияНоменклатуры = ХарактеристикиНоменклатуры.Владелец)
			|ГДЕ
			|	Номенклатура.ИспользоватьХарактеристики
			|	И НЕ Номенклатура.ПометкаУдаления
			|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура.Ссылка,
			|	НЕОПРЕДЕЛЕНО,
			|	Номенклатура.Артикул,
			|	Номенклатура.Наименование,
			|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(200)),
			|	ЛОЖЬ,
			|	ЛОЖЬ
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	НЕ Номенклатура.ПроверятьЗаполнениеХарактеристики
			|	И НЕ Номенклатура.ЭтоНабор
			|	И НЕ Номенклатура.ПометкаУдаления";
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.Контрагенты
		Или МетаданныеОбъекта = Метаданные.Справочники.Организации Тогда 
		
		Параметры.СоответствиеРеквизитов.Вставить("НаименованиеПолное", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("ИНН", "ИНН");
		Параметры.СоответствиеРеквизитов.Вставить("КПП", "КПП");
		
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.ВесаРеквизитов.Вставить("ИНН", 1);
		Параметры.ВесаРеквизитов.Вставить("КПП", 0.5);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("НаименованиеПолное");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("ИНН");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("НаименованиеПолное", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("ИНН", 1);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("КПП", 0);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.Банки Тогда 
		
		Параметры.СоответствиеРеквизитов.Вставить("Код", "Код");
		Параметры.ВесаРеквизитов.Вставить("Код", 1);
		Параметры.РеквизитыПолногоСоответствия.Добавить("Код");
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Код", 1);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.ДоговорыКонтрагентов Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("НомерДоговора", "НомерДоговора");
		Параметры.СоответствиеРеквизитов.Вставить("ДатаДоговора", "ДатаДоговора");
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Владелец", "Владелец");
		
		Параметры.ВесаРеквизитов.Вставить("НомерДоговора", 1);
		Параметры.ВесаРеквизитов.Вставить("ДатаДоговора", 0.75);
		Параметры.ВесаРеквизитов.Вставить("Наименование", 0.75);
		Параметры.ВесаРеквизитов.Вставить("Владелец", 1);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("НомерДоговора");
		Параметры.РеквизитыПолногоСоответствия.Добавить("ДатаДоговора");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Владелец");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("НомерДоговора", 1);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("ДатаДоговора", 0.75);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.75);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Владелец", 1);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.ЕдиницыИзмерения Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("Владелец", "Владелец");
		Параметры.ВесаРеквизитов.Вставить("Владелец", 1);
		Параметры.РеквизитыПолногоСоответствия.Добавить("Владелец");
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Владелец", 1);		
		
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 1);
		
	Иначе
		
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 1);
		
	КонецЕсли;
	// Конец УНФ
	
КонецПроцедуры

// При заполнении распознанного документа.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.РаспознанныйДокумент
//  ДокументСсылка - ДокументСсылка.РаспознанныйДокумент
//
Процедура ПриЗаполненииРаспознанногоДокумента(ДокументОбъект, ДокументСсылка) Экспорт
	
	ПроверяемыеРеквизиты = Новый Структура;
	ПроверяемыеРеквизиты.Вставить("Исполнитель", Неопределено);
	ПроверяемыеРеквизиты.Вставить("ПродавецОрганизация", Неопределено);
	ПроверяемыеРеквизиты.Вставить("ПокупательОрганизация", Неопределено);
	ПроверяемыеРеквизиты.Вставить("СуммаВключаетНДС", Ложь);
	ПроверяемыеРеквизиты.Вставить("ТекстНДС", "");
	ПроверяемыеРеквизиты.Вставить("ИтогоСумма", 0);
	ПроверяемыеРеквизиты.Вставить("ИтогоСуммаНДС", 0);
	ПроверяемыеРеквизиты.Вставить("ИтогоВсего", 0);
	
	Для Каждого РеквизитШапки Из ДокументОбъект.РеквизитыДокумента Цикл
		// Если Грузоотправитель совпадает с полем Продавец или Грузополучатель - с полем Покупатель, 
		// тогда Значение нужно оставить пустым
		Если РеквизитШапки.ИмяРеквизита = "Грузоотправитель" Тогда
			НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Продавец", "ИмяРеквизита");
			Если НайденнаяСтрока <> Неопределено И РеквизитШапки.Значение = НайденнаяСтрока.Значение Тогда
				РеквизитШапки.Значение = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли РеквизитШапки.ИмяРеквизита = "Грузополучатель" Тогда
			НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Покупатель", "ИмяРеквизита");
			Если НайденнаяСтрока <> Неопределено И РеквизитШапки.Значение = НайденнаяСтрока.Значение Тогда
				РеквизитШапки.Значение = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли РеквизитШапки.ИмяРеквизита = "СуммаВключаетНДС" Тогда
			СтароеЗначение = РеквизитШапки.Значение;
			
			Если СтрНачинаетсяС(РеквизитШапки.РаспознанныйТекст, "В том числе НДС") Тогда
				РеквизитШапки.Значение = Истина;
			Иначе
				// "Без налога (НДС)"
				// "Сумма НДС"
				РеквизитШапки.Значение = Ложь;
			КонецЕсли;
			
			ПроверяемыеРеквизиты.Вставить("СуммаВключаетНДС", РеквизитШапки.Значение);
			ПроверяемыеРеквизиты.Вставить("ТекстНДС", РеквизитШапки.РаспознанныйТекст);
			ПроверяемыеРеквизиты.Вставить("ИзмениласьСуммаВключаетНДС", СтароеЗначение <> РеквизитШапки.Значение);
		ИначеЕсли ПроверяемыеРеквизиты.Свойство(РеквизитШапки.ИмяРеквизита) Тогда
			ПроверяемыеРеквизиты.Вставить(РеквизитШапки.ИмяРеквизита, РеквизитШапки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		
		Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПродавецОрганизация) И НЕ ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПокупательОрганизация) Тогда
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		Иначе
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
		КонецЕсли;
	ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.Исполнитель) И НЕ ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПокупательОрганизация) Тогда
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		Иначе
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
		КонецЕсли;
	КонецЕсли;
	
	// На основании направления можно определить Контрагента и Организацию, а по ним заполнить Договор
	// 
	ПараметрыВыбораДоговора = РаспознаваниеДокументовСлужебный.ПараметрыВыбораДоговора(ДокументОбъект);
	ЕстьНезаполненныйПараметр = Ложь;
	Для Каждого ПараметрВыбора Из ПараметрыВыбораДоговора Цикл
		Если Не ЗначениеЗаполнено(ПараметрВыбора.Значение) Тогда
			// Для массива тоже подходит. т.е. при условии ТипЗнч(ПараметрВыбора.Значение) = Тип("Массив")
			ЕстьНезаполненныйПараметр = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНезаполненныйПараметр Тогда
		// Используем заполнение без нечеткого поиска
		РаспознаваниеДокументовСлужебный.ЗаполнитьДоговорКонтрагента(ДокументОбъект);
	Иначе
		
		ОтборМетаданных = Новый Массив;
		ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
			"Владелец", "=", ПараметрыВыбораДоговора.Контрагент));
		ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
			"Организация", "=", ПараметрыВыбораДоговора.Организация));
		ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
			"ВидДоговора", "В", ПараметрыВыбораДоговора.ВидыДоговоров));
		
		ДанныеПоиска = Новый Структура;
		РеквизитыПоиска = Новый Структура; // Ключ - имя реквизита из РаспознанныйДокумент.РеквизитыДокумента, Значение - имя реквизита объекта метаданных
		РеквизитыПоиска.Вставить("НомерДоговора", "Номер");
		РеквизитыПоиска.Вставить("ДатаДоговора", "Дата");
		РеквизитыПоиска.Вставить("Договор", "Наименование");
		
		Для Каждого ИмяРеквизита Из РеквизитыПоиска Цикл
			Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита.Ключ);
			СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
			Если СтрокиПоиска.Количество() <> 0 Тогда
				ЗначениеПоиска = СтрокиПоиска[0].РаспознанныйТекст;
			Иначе
				ЗначениеПоиска = Неопределено;
			КонецЕсли;
			
			ДанныеПоиска.Вставить(ИмяРеквизита.Значение, ЗначениеПоиска);
		КонецЦикла;
		
		Тип = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			ДанныеПоиска,
			Тип,
			,
			ОтборМетаданных,
			ДокументОбъект.ИдентификаторРезультата
		);
		РаспознаваниеДокументовСлужебный.ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Договор", Кандидаты);
		
		Отбор = Новый Структура("ИмяРеквизита", "Договор");
		СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Реквизит = СтрокиПоиска[0];
			Если Реквизит.УверенностьНайденногоЗначения >= РаспознаваниеДокументовСлужебныйКлиентСервер.ГраницаПроблемныхЗначений()
				И НЕ РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Реквизит.Значение))
				И НЕ РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(Реквизит.ИмяРеквизита, Реквизит.РаспознанныйТекст) Тогда
				
				Реквизит.Значение = Реквизит.НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// На основании Контрагента, Организации, Валюты из Договора, данных о Банке и Счете можно найти банковский счет
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		РаспознаваниеДокументовСлужебный.ЗаполнитьБанковскийСчет(ДокументОбъект);
	КонецЕсли;
	
	ТаблицаДокумента = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(ДокументОбъект);
	
	Если ПроверяемыеРеквизиты.Свойство("ИзмениласьСуммаВключаетНДС") Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииСтавкаНДС(СтрокаТаблицы, ПроверяемыеРеквизиты.СуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		
		ИтогоСуммаСкидкиРаспознано = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСуммаСкидки", 0);
		ИтогоСуммаСкидкиПоТаблице = ТаблицаДокумента.Итог("СуммаСкидки");
		
		ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена;
		Если ИтогоСуммаСкидкиПоТаблице <> 0 Тогда
			ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции;
		ИначеЕсли ИтогоСуммаСкидкиПоТаблице = 0 И ИтогоСуммаСкидкиРаспознано <> 0 Тогда
			ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().ПоДокументуВЦелом;
		КонецЕсли;
		
		РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(ДокументОбъект, "ВидСкидки", ВидСкидки);
		
		Если ИтогоСуммаСкидкиРаспознано = 0 И ИтогоСуммаСкидкиПоТаблице <> 0 Тогда
			РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСуммаСкидки", ИтогоСуммаСкидкиПоТаблице);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если СтрокаТаблицы.Количество = 0
			И СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПроверяемыеРеквизиты.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) Тогда
			СтрокаТаблицы.Количество = 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		
		// Определение ставки НДС
		Если ПроверяемыеРеквизиты.ТекстНДС = "Без налога (НДС)" Тогда
			СтавкаНДС = Новый Структура("Числом, Ссылкой", 0, УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе 
			СтавкаНДС = РаспознаваниеДокументовУНФ.ОпределитьСтавкуНДС(ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС);
		КонецЕсли;
		
		Если СтавкаНДС = Неопределено Тогда
			// Ставку НДС не удалось определить по полям итогов. Будем брать из номенклатуры
			ВсяНоменклатура = ТаблицаДокумента.ВыгрузитьКолонку("Номенклатура");
			НДСПоНоменклатуре = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсяНоменклатура, "ВидСтавкиНДС");
			
			// ДанныеНДС содержит ВидСтавкиНДС, преобразуем ее в ставку НДС по дате документа
			НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ДатаДокумента", "ИмяРеквизита");
			Если НайденнаяСтрока = Неопределено Тогда
				НДСПоНоменклатуре = Неопределено;
			Иначе
				ДатаДокумента = НайденнаяСтрока.Значение;
				Для Каждого ЭлементНДС Из НДСПоНоменклатуре Цикл
					НДСПоНоменклатуре.Вставить(ЭлементНДС.Ключ, Справочники.СтавкиНДС.СтавкаНДС(ЭлементНДС.Значение, ДатаДокумента));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ПоляПроверки = Новый Массив;
		ПоляПроверки.Добавить("Цена");
		ПоляПроверки.Добавить("Количество");
		ПоляПроверки.Добавить("Сумма");
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			// Восстановление нулей и потерянных запятых
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьЕдинственныйНоль(СтрокаТаблицы, ПоляПроверки, ДокументОбъект, ПроверяемыеРеквизиты.СуммаВключаетНДС);
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьПотеряннуюЗапятую(СтрокаТаблицы, ПоляПроверки, ДокументОбъект);
			
			// Пытаемся восстановить ставку НДС
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				Если СтавкаНДС <> Неопределено Тогда
					СтрокаТаблицы.СтавкаНДС = СтавкаНДС.Ссылкой;
					СтавкаНДСЧислом = СтавкаНДС.Числом;
				ИначеЕсли НДСПоНоменклатуре <> Неопределено Тогда
					СтрокаТаблицы.СтавкаНДС = НДСПоНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
					СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
					СтрокаТаблицы.СуммаНДС = РаспознаваниеДокументовСлужебныйКлиентСервер.РассчитатьСуммуНДС(
						СтрокаТаблицы.Сумма, ПроверяемыеРеквизиты.СуммаВключаетНДС, СтавкаНДСЧислом);
					СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПроверяемыеРеквизиты.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
		
		// Этот расчет происходит до того, как пользователь что-то увидит + в УПД, Торг12 и Счетах-фактурах
		// введены 4 колонки, которые можно легко сверить для каждой строки по формулам:
		// 1) Если (Сумма без НДС) + (Сумма НДС) = (Сумма с НДС), то проверить и при необходимости восстановить Ставку НДС.
		// 2) Если (Сумма без НДС) * (100 + Ставка НДС)/100 = (Сумма с НДС), то проверить и при необходимости восстановить Сумму НДС.
		
		// Если СуммаВключаетНДС = Истина, то такая проверка не пройдет и ее нужно исключить. Но для этих трех документов
		// при печати на бумаге Сумма без НДС не должна совпадать с колонкой Всего даже на нетиповых документах.
		Если Не ПроверяемыеРеквизиты.СуммаВключаетНДС Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
				СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
				СложениемСовпало = (СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.Всего);
				УмножениемСовпало = (Окр(СтрокаТаблицы.Сумма * (100 + СтавкаНДСЧислом)/100, 2) = СтрокаТаблицы.Всего);
				Если СложениемСовпало Или УмножениемСовпало Тогда
					Если Не СложениемСовпало Тогда
						СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.Всего - СтрокаТаблицы.Сумма;
					ИначеЕсли Не УмножениемСовпало Тогда
						СтруктураСтавкиНДС = РаспознаваниеДокументовУНФ.ОпределитьСтавкуНДС(СтрокаТаблицы.Всего, СтрокаТаблицы.СуммаНДС);
						Если СтруктураСтавкиНДС <> Неопределено Тогда
							СтрокаТаблицы.СтавкаНДС = СтруктураСтавкиНДС.Ссылкой;
						КонецЕсли;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) И СтавкаНДСЧислом = 0 Тогда
						СтрокаТаблицы.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПоляПроверки = Новый Массив;
		ПоляПроверки.Добавить("Всего");
		ПоляПроверки.Добавить("СуммаНДС");
		ПоляПроверки.Добавить("Сумма");
		
		Счетчик = 0;
		РаспознаваниеДокументовСлужебный.ВосстановлениеПо2Формулам(ПроверяемыеРеквизиты.СуммаВключаетНДС, ТаблицаДокумента, ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС, ПоляПроверки);
		НеобходимоПроверять = Истина;
		Пока НеобходимоПроверять И Счетчик < 5 Цикл
			Счетчик = Счетчик + 1;
			НеобходимоПроверять = РаспознаваниеДокументовСлужебный.ВосстановлениеПо1ФормулеСУверенностью(ДокументОбъект, ПроверяемыеРеквизиты.СуммаВключаетНДС, ТаблицаДокумента, ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС, ПроверяемыеРеквизиты.ИтогоСумма);
			НеобходимоПроверять = НеобходимоПроверять Или РаспознаваниеДокументовСлужебный.ВосстановлениеПо2Формулам(ПроверяемыеРеквизиты.СуммаВключаетНДС, ТаблицаДокумента, ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС, ПоляПроверки);
		КонецЦикла;
		
		ПоляПроверки = Новый Массив;
		ПоляПроверки.Добавить("Цена");
		ПоляПроверки.Добавить("Количество");
		СтрокаСДатой = ДокументОбъект.РеквизитыДокумента.Найти("ДатаДокумента", "ИмяРеквизита");
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Если СтрокаСДатой <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "ВидСтавкиНДС");
				СтрокаТаблицы.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, СтрокаСДатой.Значение);
			КонецЕсли;
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьЕдинственныйНоль(СтрокаТаблицы, ПоляПроверки, ДокументОбъект, ПроверяемыеРеквизиты.СуммаВключаетНДС);
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьПотеряннуюЗапятую(СтрокаТаблицы, ПоляПроверки, ДокументОбъект);
		КонецЦикла;
	КонецЕсли;
	
	РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(ДокументОбъект, ТаблицаДокумента);
	
КонецПроцедуры

// При заполнении параметров выбора договора.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.РаспознанныйДокумент
//  ПараметрыВыбораДоговора - см. РаспознаваниеДокументовСлужебный.ПараметрыВыбораДоговора
//
Процедура ПриЗаполненииПараметровВыбораДоговора(ДокументОбъект, ПараметрыВыбораДоговора) Экспорт
	
	ВидыДоговоров = Новый Массив;
	Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
	Иначе
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
	КонецЕсли;
	
	ПараметрыВыбораДоговора.Вставить("ВидыДоговоров", ВидыДоговоров);
	
КонецПроцедуры

// При заполнении договора контрагента.
// 
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//  ДокументОбъект - ДокументОбъект.РаспознанныйДокумент
//  ПараметрыДоговора - см. РаспознаваниеДокументовСлужебный.ПараметрыВыбораДоговора
//
Процедура ПриЗаполненииДоговораКонтрагента(ДоговорКонтрагента, ДокументОбъект, ПараметрыДоговора) Экспорт
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ПараметрыДоговора.Организация) Или Не ЗначениеЗаполнено(ПараметрыДоговора.Контрагент) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыПоиска = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыДоговора.НомерДоговора) Тогда
		ДополнительныеПараметрыПоиска.Вставить("Номер", Новый Структура("ЗначениеОтбора", ПараметрыДоговора.НомерДоговора));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыДоговора.ДатаДоговора) Тогда
		ДополнительныеПараметрыПоиска.Вставить("Дата", Новый Структура("ЗначениеОтбора", ПараметрыДоговора.ДатаДоговора));
	КонецЕсли;
		
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПоКонтрагентуПоОрганизации(ПараметрыДоговора.Контрагент, ПараметрыДоговора.Организация);
	
КонецПроцедуры

// При заполнении банковского счета.
// 
// Параметры:
//  Счет - СправочникСсылка.БанковскиеСчета
//  ДокументОбъект - ДокументОбъект.РаспознанныйДокумент
//  ПараметрыСчета - Структура:
//	*Банк - СправочникСсылка.Банки
//	*БанкНаименование - Строка
//	*БанкСчет - СправочникСсылка.БанковскиеСчета
//	*Договор - СправочникСсылка.ДоговорыКонтрагентов
//
Процедура ПриЗаполненииБанковскогоСчета(Счет, ДокументОбъект, ПараметрыСчета) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		// Проверим соответствие счета и владельца, т.к. нечеткий поиск этого пока не делает
		Если ПараметрыСчета.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Владелец") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// При заполнении валюты оплаты.
// 
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//  ВалютаОплаты - СправочникСсылка.Валюты
//
Процедура ПриЗаполненииВалютыОплаты(ДоговорКонтрагента, ВалютаОплаты) Экспорт
	
	ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
		Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
			ВалютаОплаты = ВалютаУчета;
		Иначе
			ВалютаОплаты = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
	Иначе
		ВалютаОплаты = ВалютаУчета;
	КонецЕсли;
	
КонецПроцедуры

// При определении ставки НДС.
// 
// Параметры:
//  СтавкаНДСЧислом - Число
//  СтавкаНДС - ОпределяемыйТип.СтавкаНДСБРД
//  ПрименяютсяСтавки4и2 - Булево
//
Процедура ПриОпределенииСтавкиНДС(СтавкаНДСЧислом, СтавкаНДС, ПрименяютсяСтавки4и2 = Ложь) Экспорт
	
	СтавкаНДСЧислом = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС);
	
КонецПроцедуры

// При определении проверяемых реквизитов.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.РаспознанныйДокумент
//  ПроверяемыеРеквизиты - Произвольный
//
Процедура ПриОпределенииПроверяемыхРеквизитов(ДокументОбъект, ПроверяемыеРеквизиты) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам")
		Или ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("Склад");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
		
	КонецЕсли;
	
	ИндексЗначения = ПроверяемыеРеквизиты.Найти("Грузоотправитель");
	Если ИндексЗначения <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
	КонецЕсли;
		
	ИндексЗначения = ПроверяемыеРеквизиты.Найти("Грузополучатель");
	Если ИндексЗначения <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
	КонецЕсли;
	
КонецПроцедуры

// При обработке проверки заполнения реквизитов.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.РаспознанныйДокумент
//  ТаблицаПроблем - ТаблицаЗначений 
//
Процедура ПриОбработкеПроверкиЗаполненияРеквизитов(ДокументОбъект, ТаблицаПроблем) Экспорт
	
КонецПроцедуры

Процедура ПриЗаполненииНовогоЭлементаСправочника(СправочникОбъект, ДанныеДляЗаполнения) Экспорт
	
	СправочникОбъект.Заполнить(ДанныеДляЗаполнения);
	
	Если ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.БанковскиеСчета") Тогда
		СправочникОбъект.СформироватьНаименование();
	КонецЕсли;

КонецПроцедуры

// При создании документа на основании распознанного.
// 
// Параметры:
//  ДокументОбъект - ОпределяемыйТип.ДокументыСоздаваемыеИзРаспознанногоДокументаБРДОбъект
//  РаспознанныйДокумент - ДокументСсылка.РаспознанныйДокумент
//  ПараметрыЗаполнения - см. РаспознаваниеДокументовСлужебныйВызовСервера.ПараметрыЗаполненияТиповойНаОсновеСчетНаОплату
//	
Процедура ПриСозданииДокументаНаОснованииРаспознанного(ДокументОбъект, РаспознанныйДокумент, ПараметрыЗаполнения) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.СчетФактураВыданныйБРД.Тип.СодержитТип(ТипЗнч(ДокументОбъект.Ссылка))
		Или Метаданные.ОпределяемыеТипы.СчетФактураПолученныйБРД.Тип.СодержитТип(ТипЗнч(ДокументОбъект.Ссылка)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("Товары")
		И ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ДокументОбъект.Запасы.Очистить();
		Для Каждого ДанныеСтроки Из ПараметрыЗаполнения.Товары Цикл
			
			СписокСвойств = "Номенклатура, Характеристика, Цена, Количество, ЕдиницаИзмерения, Сумма, СтавкаНДС, СуммаНДС, Всего";		
			
			Если ДанныеСтроки.Свойство("СуммаСкидкиНаценки") Тогда
				СписокСвойств = "Номенклатура, Характеристика, Цена, Количество, ЕдиницаИзмерения, Сумма, СтавкаНДС, СуммаНДС, Всего, СуммаСкидкиНаценки, ПроцентСкидкиНаценки";		
			КонецЕсли;
			
			НоваяСтрокаТЧ = ДокументОбъект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, ДанныеСтроки, СписокСвойств);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("Услуги") 
		И ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновноеПодразделение");
		ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
		ДокументОбъект.Расходы.Очистить();
		Для Каждого ДанныеСтроки Из ПараметрыЗаполнения.Услуги Цикл
			
			СписокСвойств = "Номенклатура, Цена, Количество, ЕдиницаИзмерения, Сумма, СтавкаНДС, СуммаНДС, Всего";
			
			СтрокаТабличнойЧасти = ДокументОбъект.Расходы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки, СписокСвойств);
			
			СвойстваПоСчетам = РаспознаваниеДокументовУНФ.ПолучитьСвойстваПоСчетамУчетаНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
			Если СвойстваПоСчетам.ОчиститьЗаказИПодразделение Тогда
				
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Неопределено;
				СтрокаТабличнойЧасти.Заказ = Неопределено;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
				
				СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
				
			КонецЕсли;
			
			Если СвойстваПоСчетам.ОчиститьНаправлениеДеятельности Тогда
				
				СтрокаТабличнойЧасти.НаправлениеДеятельности = Неопределено;
				
			Иначе
				
				СтрокаТабличнойЧасти.НаправлениеДеятельности = СвойстваПоСчетам.НаправлениеДеятельности;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;  
	
	Если ПараметрыЗаполнения.Свойство("Услуги") 
		И ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		
		Для Каждого ДанныеСтроки Из ПараметрыЗаполнения.Услуги Цикл
			
			СписокСвойств = "Номенклатура, Цена, Количество, ЕдиницаИзмерения, Сумма, СтавкаНДС, СуммаНДС, Всего";
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
				
				СписокСвойств = "Номенклатура, Характеристика, Цена, Количество, ЕдиницаИзмерения, Сумма, СтавкаНДС, СуммаНДС, Всего";
				
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ДокументОбъект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки, СписокСвойств);
			
		КонецЦикла;
		
	КонецЕсли;	     
	
	Если ПараметрыЗаполнения.Свойство("Услуги") 
		И ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ДокументОбъект.РаботыИУслуги.Очистить();
		Для Каждого ДанныеСтроки Из ПараметрыЗаполнения.Услуги Цикл
			
			СписокСвойств = "Номенклатура, Цена, Количество, ЕдиницаИзмерения, Сумма, СтавкаНДС, СуммаНДС, Всего";
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
				
				СписокСвойств = "Номенклатура, Характеристика, Цена, Количество, ЕдиницаИзмерения, Сумма, СтавкаНДС, СуммаНДС, Всего";
				
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ДокументОбъект.РаботыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки, СписокСвойств);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// При проведении документа на основании распознанного.
// 
// Параметры:
//  ДокументОбъект - ОпределяемыйТип.ДокументыСоздаваемыеИзРаспознанногоДокументаБРДОбъект
//
Процедура ПриПроведенииДокументаНаОснованииРаспознанного(ДокументОбъект) Экспорт

КонецПроцедуры

// После создания документа на основании распознанного.
// 
// Параметры:
//  ДокументОбъект - ОпределяемыйТип.ДокументыСоздаваемыеИзРаспознанногоДокументаБРДОбъект
//
Процедура ПослеСозданияДокументаНаОснованииРаспознанного(ДокументОбъект) Экспорт
		
КонецПроцедуры

// При создании счет фактуры.
// 
// Параметры:
//  ПараметрыСоздания - Структура:
//		*ТипДокументаСтрокой - Строка,
//		*Основание - ОпределяемыйТип.ПоступлениеТоваровУслугБРД, ОпределяемыйТип.РеализацияТоваровУслугБРД - Документ-основание
//		*ПараметрыЗаполнения - Структура:
//  		**Контрагент - СправочникСсылка.Контрагенты
//  		**Организация - СправочникСсылка.Организации
//  		**ИмяРеквизитаНомерДокумента - Строка
//  		**ИмяРеквизитаДатаДокумента  - Строка 
//
//  СчетФактураСсылка - ОпределяемыйТип.СчетФактураВыданныйБРД, ОпределяемыйТип.СчетФактураПолученныйБРД - Счет фактура ссылка
//
Процедура ПриСозданииСчетФактуры(ПараметрыСоздания, СчетФактураСсылка = Неопределено) Экспорт
		
	ТипДокументаСтрокой = ПараметрыСоздания.ТипДокументаСтрокой;
	ПараметрыЗаполнения = ПараметрыСоздания.ПараметрыЗаполнения;
	
	СчетФактураОбъект = Неопределено;
	Если ТипДокументаСтрокой = "СчетФактураПолученный" Или ТипДокументаСтрокой = "ПриходнаяНакладная" Тогда
		
		СчетФактураОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		СчетФактураОбъект.Заполнить(ПараметрыСоздания.Основание);
		СчетФактураОбъект.Дата = ПараметрыСоздания.Основание.Дата;
		ПараметрыЗаполнения.Свойство("ДатаВходящегоДокумента", СчетФактураОбъект.ДатаВходящегоДокумента);
		ПараметрыЗаполнения.Свойство("НомерВходящегоДокумента", СчетФактураОбъект.НомерВходящегоДокумента);
		СчетФактураОбъект.УдалитьОбновлениеЗавершено = Истина;
		СчетФактураОбъект.ЭтоВозврат = Перечисления.ДаНет.Нет;
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	ИначеЕсли ТипДокументаСтрокой = "АктВыполненныхРабот" Тогда
		
		СчетФактураОбъект = Документы.СчетФактура.СоздатьДокумент();
		СчетФактураОбъект.Заполнить(ПараметрыСоздания.Основание);
		СчетФактураОбъект.Дата = ПараметрыСоздания.Основание.Дата;
		СчетФактураОбъект.ЭтоВозврат = Перечисления.ДаНет.Нет;
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Иначе
		
		СчетФактураОбъект = Документы.СчетФактура.СоздатьДокумент();
		СчетФактураОбъект.Заполнить(ПараметрыСоздания.Основание);
		СчетФактураОбъект.Дата = ПараметрыСоздания.Основание.Дата;
		СчетФактураОбъект.Номер = ПараметрыЗаполнения.НомерВходящегоДокумента;
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
	Если СчетФактураОбъект <> Неопределено Тогда 
		
		СчетФактураСсылка = СчетФактураОбъект.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

// При определении параметров создания номенклатуры.
// 
// Параметры:
//  Параметры - ТаблицаЗначений
//
Процедура ПриОпределенииПараметровСозданияНоменклатуры(Параметры) Экспорт
	
	// УНФ
	МетаданныеНоменклатура = Метаданные.Справочники.Номенклатура;
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(МетаданныеНоменклатура.СтандартныеРеквизиты.Наименование);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(МетаданныеНоменклатура.Реквизиты.Артикул);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(МетаданныеНоменклатура.СтандартныеРеквизиты.Родитель);
	
	Параметр.ОписаниеЭлемента = РаспознаваниеДокументов.ОписаниеЭлемента();
	Параметр.ОписаниеЭлемента.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	// Ставка НДС (хранение - перечисление "ВидыСтавокНДС", выбор - перечисление "СтавкиНДС")
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита();
	Параметр.ОписаниеРеквизита.Имя = "СтавкаНДС";
	Параметр.ОписаниеРеквизита.Синоним = "Ставка НДС";
	Параметр.ОписаниеРеквизита.Тип = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	Параметр.ОписаниеРеквизита.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять;
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(МетаданныеНоменклатура.Реквизиты.ТипНоменклатуры);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(МетаданныеНоменклатура.Реквизиты.ЕдиницаИзмерения);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(МетаданныеНоменклатура.Реквизиты.КатегорияНоменклатуры);
	// Конец УНФ
	
КонецПроцедуры

// Обработка создания номенклатуры.
// 
// Параметры:
//  РезультатСсылка - СправочникСсылка.Номенклатура
//  ДанныеЗаполнения - см. РаспознаваниеДокументовСлужебный.ПараметрыСозданияНовогоЭлемента
//
Процедура ОбработкаСозданияНоменклатуры(РезультатСсылка, ДанныеЗаполнения) Экспорт
	
	// УНФ
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяНоменклатура, ДанныеЗаполнения);
	
	НоваяНоменклатура.НаименованиеПолное = НоваяНоменклатура.Наименование;
	НоваяНоменклатура.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	НоваяНоменклатура.МетодОценки = Перечисления.МетодОценкиЗапасов.FIFO;
	НоваяНоменклатура.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
	НоваяНоменклатура.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
	НоваяНоменклатура.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(ДанныеЗаполнения.СтавкаНДС); 
	
	Если ДанныеЗаполнения.Свойство("ВидНоменклатуры") Тогда
		НоваяНоменклатура.КатегорияНоменклатуры = ДанныеЗаполнения.ВидНоменклатуры;	
	КонецЕсли;
	
	ИспользоватьПодсистемуПроизводство = Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить();
	Если ИспользоватьПодсистемуПроизводство = Истина Тогда
		
		НоваяНоменклатура.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.НезавершенноеПроизводство");
		
	Иначе
		
		НоваяНоменклатура.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
		
	КонецЕсли;
	
	Если НоваяНоменклатура.ПроверитьЗаполнение() Тогда
		
		НоваяНоменклатура.Записать();
		РезультатСсылка = НоваяНоменклатура.Ссылка;
		
	КонецЕсли;
	// Конец УНФ
	
КонецПроцедуры

// При заполнении параметров создания нового элемента.
// 
// Параметры:
//  СвязанныеКолонки - см. РаспознаваниеДокументовСлужебный.ПараметрыСозданияНовогоЭлемента
//  ИмяЭлемента - Строка
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовРаспознаваниеДокументов
//  Направление - ПеречислениеСсылка.НаправленияРаспознанногоДокумента
//
Процедура ПриЗаполненииПараметровСозданияНовогоЭлемента(СвязанныеКолонки, ИмяЭлемента, ТипДокумента, Направление) Экспорт
	
	РаспознаваниеДокументовУНФ.ПриЗаполненииПараметровСозданияНовогоЭлемента(СвязанныеКолонки, ИмяЭлемента, ТипДокумента, Направление);
	
КонецПроцедуры

// При создании формы распознавания на сервере.
// 
// Параметры:
//  ЭтотОбъект - Форма
//  Отказ - Булево
//  СтандартнаяОбработка - Булево
//
Процедура ПриСозданииФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Экспорт	
	
	
	Если ЭтотОбъект.ИмяФормы = "Обработка.ТОРГ12РаспознаваниеДокументов.Форма.Форма" Тогда
		
		Если ЭтотОбъект.Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
			ЭтотОбъект.Элементы.ФормаСоздатьПоступлениеТовары.Видимость = Истина;
			ЭтотОбъект.Элементы.СоздатьРеализацияТовары.Видимость = Истина;
		КонецЕсли;
		
		ЭтотОбъект.Элементы.СоздатьСчетФактуру.Видимость = Истина;
		ЭтотОбъект.Элементы.ФормаСоздатьПоступлениеУслуги.Видимость = Ложь;
		ЭтотОбъект.Элементы.ФормаСоздатьПоступлениеПокупкаКомиссия.Видимость = Ложь;
		ЭтотОбъект.Элементы.СоздатьРеализацияУслуги.Видимость = Ложь;  
		ЭтотОбъект.Элементы.СоздатьРеализацияПродажаКомиссия.Видимость = Ложь;  
		ЭтотОбъект.Элементы.Характеристика.Видимость = Истина;
		ЭтотОбъект.Элементы.ЕдиницаИзмерения.Видимость = Истина;   
		
		УчетГТД = ПолучитьФункциональнуюОпцию("УчетГТД");
		
		ЭтотОбъект.Элементы.СтранаПроисхождения.Видимость = УчетГТД;
		ЭтотОбъект.Элементы.НомерГТД.Видимость = УчетГТД;
		
	ИначеЕсли ЭтотОбъект.ИмяФормы = "Обработка.СчетНаОплатуРаспознаваниеДокументов.Форма.Форма" Тогда
		
		ЭтотОбъект.Элементы.Характеристика.Видимость = Истина;
		ЭтотОбъект.Элементы.ЕдиницаИзмерения.Видимость = Истина;   
		
	КонецЕсли;
	
	ЭтотОбъект.Элементы.СписокНераспознаннойНоменклатурыСоздатьНоменклатуру.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
	
КонецПроцедуры

// Перед записью формы распознавания на сервере.
// 
// Параметры:
//  ЭтотОбъект - Форма
//  Отказ - Булево
//  ТекущийОбъект - ДокументОбъект.РаспознанныйДокумент
//  ПараметрыЗаписи - Структура
//
Процедура ПередЗаписьюФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	
	
КонецПроцедуры

// После записи формы распознавания на сервере.
// 
// Параметры:
//  ЭтотОбъект - Форма
//  ТекущийОбъект - ДокументОбъект.РаспознанныйДокумент
//  ПараметрыЗаписи - Структура
//
Процедура ПослеЗаписиФормыРаспознаванияНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// Заполнить добавленные колонки таблиц.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура
//  Строки - ТаблицаЗначений
//  Очистить - Булево
//
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Строки, Очистить = Ложь) Экспорт
		
КонецПроцедуры

// Создание контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН контрагента.
//    * КПП - Строка - КПП контрагента.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - СправочникСсылка - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, Контрагент, Отказ);
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	
    ЗаполнитьЗначенияСвойств(КонтрагентОбъект, РеквизитыКонтрагента,, "ИНН, КПП, Наименование");
	
	КонтрагентОбъект.Записать();
	
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

Процедура ПриИзмененииКолонкиНаСервере(Объект, СтрокаТаблицы, ИмяРеквизита, НомерСтрокиТаблицы, ВыбранноеЗначение) Экспорт
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииКолонки(Объект, СтрокаТаблицы, ИмяРеквизита, ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДополнительныеРеквизиты(ЭтотОбъект) Экспорт
	
КонецПроцедуры

Процедура УстановитьВидимостьСчетовУчета(ЭтотОбъект) Экспорт
	
КонецПроцедуры      

Процедура ОпределитьПрименяетсяМалоценка(ЭтотОбъект) Экспорт
		
КонецПроцедуры       

Процедура ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта) Экспорт

КонецПроцедуры

Процедура ОпределитьНеобходимостьРасчетаСуммыВРознице(ЭтотОбъект) Экспорт
		
КонецПроцедуры

Функция ПолучитьСкладПоУмолчанию() Экспорт
	
	СкладПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновнойСклад();
	Если ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
		Возврат СкладПоУмолчанию;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|	И НЕ Склады.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиРаспознавания = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Если ЗначениеЗаполнено(НастройкиРаспознавания.СкладПоУмолчанию) Тогда
		Возврат НастройкиРаспознавания.СкладПоУмолчанию;
	КонецЕсли;
	
	Возврат Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	
КонецФункции

Процедура НайтиПодчиненныйСчетФактуруПолученный(ДокументОснование, СчетФактура) Экспорт

	СтруктураСчетФактура = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ДокументОснование, Истина);	
	
	Если СтруктураСчетФактура <> Неопределено Тогда
		СчетФактура = СтруктураСчетФактура.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОснование, СчетФактура) Экспорт
	
	СтруктураСчетФактура = СчетаФактурыУНФ.ПолучитьПодчиненныйСчетФактуру(ДокументОснование, Ложь);	
	
	Если СтруктураСчетФактура <> Неопределено Тогда
		СчетФактура = СтруктураСчетФактура.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура СтавкиНДСПустаяСсылка(Тип) Экспорт
	
	Тип = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	
КонецПроцедуры

Процедура ПолучитьСоответствиеСтавокНДС(Соответствие) Экспорт 

	Соответствие = Справочники.СтавкиНДС.СоответствиеСтавокНДС(ТекущаяДатаСеанса());			
	
КонецПроцедуры

Процедура ПолучитьФункциональнуюОпциюУчетДоговоров(УчетДоговоров) Экспорт
	
	УчетДоговоров = Истина;
	
КонецПроцедуры

Процедура ПолучитьФункциональнуюОпциюУчетПоНесколькимСкладам(УчетПоНесколькимСкладам) Экспорт
	
	УчетПоНесколькимСкладам = ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам");
	
КонецПроцедуры

Процедура ПолучитьФункциональнуюОпциюИспользоватьХарактеристики(ИспользоватьХарактеристики) Экспорт    
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");	
	
КонецПроцедуры

Процедура ЭтоНоменклатураУслуга(Ссылка, Результат) Экспорт
	
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипНоменклатуры") = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга");
	
КонецПроцедуры

Процедура ЗаполнитьСписокУслугиПоНоменклатурам(СписокНоменклатур, СписокУслугиПоНоменклатурам) Экспорт
	
	ТипыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокНоменклатур, "ТипНоменклатуры");
	
	Для Каждого Строка Из ТипыНоменклатуры Цикл
		
		ЭтоУслуга = Строка.Значение = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга");
		
		СписокУслугиПоНоменклатурам.Вставить(Строка.Ключ, ЭтоУслуга);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИзмененииНоменклатуры(СтрокаТаблицы, НомерСтрокиТаблицы, ВыбранноеЗначение, Объект) Экспорт	
	
	// УНФ
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики", Ложь);
	СтруктураДанные.Вставить("Номенклатура", ВыбранноеЗначение);
	
	ЗначенияВыбораДляЯчеекТаблицыДокумента = РаспознаваниеДокументовСлужебный.ЗначенияВыбораЗначенийТаблицыДокумента(Объект.Ссылка);	
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		
		// Номенклатура
		ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ТипНоменклатуры");
		СтрокаТаблицы.Услуга = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
		
		Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", "Номенклатура", НомерСтрокиТаблицы);
		ПодходящиеЗначения = ЗначенияВыбораДляЯчеекТаблицыДокумента.НайтиСтроки(Отбор);
			
		Для каждого элементВыбора Из ПодходящиеЗначения Цикл
			
				Если элементВыбора.Значение <> ВыбранноеЗначение Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеХарактеристики = элементВыбора.ДополнительноеЗначение;
				СтруктураДанные.Вставить("Характеристика", ЗначениеХарактеристики);
				
				Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", "Характеристика", НомерСтрокиТаблицы);
				НайденныеСтроки = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() <> 0 Тогда
					Если НЕ НайденныеСтроки[0].ЗаполненоВручную И ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
						НайденныеСтроки[0].Значение = ЗначениеХарактеристики;
						НайденныеСтроки[0].ЗаполненоВручную = Истина;
					КонецЕсли;
				КонецЕсли;
				
		КонецЦикла; 
		
		// Единица измерения
		Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", "ЕдиницаИзмерения", НомерСтрокиТаблицы);
		ПодходящиеЗначения = ЗначенияВыбораДляЯчеекТаблицыДокумента.НайтиСтроки(Отбор);
			
		Для каждого элементВыбора Из ПодходящиеЗначения Цикл
			
				Если ТипЗнч(элементВыбора.Значение) = Тип("СправочникСсылка.ЕдиницыИзмерения") 
					И элементВыбора.Значение.Владелец <> ВыбранноеЗначение Тогда
					
					Продолжить;
				КонецЕсли;
				
				ЗначениеЕдиницаИзмерения = элементВыбора.Значение;
				СтруктураДанные.Вставить("ЕдиницаИзмерения", ЗначениеЕдиницаИзмерения);
				
				Если ЗначениеЗаполнено(ЗначениеЕдиницаИзмерения) Тогда
					Если ТипЗнч(ЗначениеЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения")
						И ЗначениеЕдиницаИзмерения.Владелец <> ВыбранноеЗначение Тогда
					
						Продолжить;
					КонецЕсли; 
					
					СтрокаТаблицы.ЕдиницаИзмерения = ЗначениеЕдиницаИзмерения;
				КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
	// Характеристики
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) и СтруктураДанные.Номенклатура.ИспользоватьХарактеристики Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика =
				?(ЗначениеЗаполнено(СтруктураДанные.Характеристика),
					СтруктураДанные.Характеристика,
					ХарактеристикаПоУмолчанию
				);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики", СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли;
	
	СтрокаТаблицы.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТаблицы.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И СтруктураДанные.ИспользоватьХарактеристики Тогда
		СтрокаТаблицы.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	
	// Конец Характеристики
	
	// Конец УНФ
	
КонецПроцедуры

Процедура СоздатьДокументыКомплектаВызовСервера(ПараметрыСоздания, Результат) Экспорт

	РаспознаваниеДокументовУНФ.СоздатьДокументыКомплектаВызовСервера(ПараметрыСоздания, Результат);
	
КонецПроцедуры

Процедура НужноПрикрепитьДополнительныйСкан(ТипКомплекта, ТипРаспознанного, ТипСозданного, Результат) Экспорт

	Результат = РаспознаваниеДокументовУНФ.НужноПрикрепитьДополнительныйСкан(ТипКомплекта, ТипРаспознанного, ТипСозданного);
	
КонецПроцедуры	

Процедура ЗаполнитьРеквизитыПоискаДоговора(РеквизитыПоиска, ДанныеДоговора) Экспорт

	РеквизитыПоиска.Вставить("НомерДоговора", ДанныеДоговора.НомерДоговора);
	РеквизитыПоиска.Вставить("ДатаДоговора", ДанныеДоговора.ДатаДоговора);
	РеквизитыПоиска.Вставить("Наименование", ДанныеДоговора.Наименование);
	
КонецПроцедуры

Процедура ЗаполнитьСкидкиВТаблицеТовары(ДокументОбъект, ТаблицаТовары, ПараметрыЗаполнения, ТипДокументаСтрокой) Экспорт
	
	ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(
	ДокументОбъект, "ВидСкидки", РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена);
	
	Если ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТовары.Колонки.Добавить("СуммаСкидкиНаценки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТовары.Колонки.Добавить("ПроцентСкидкиНаценки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2)));
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		Строка.СуммаСкидкиНаценки = Строка.СуммаСкидки;
		Строка.ПроцентСкидкиНаценки = Строка.ПроцентСкидки;
	КонецЦикла;
	
	СкидкиВыключены = (ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий И Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиЗакупки"))
		Или (ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий И Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи"));
	
	Если ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции Тогда
		
		ПараметрыРасчета = Новый Структура("РассчитатьПроцентСкидки, СброситьФлагСкидкиРассчитаны, СуммаВключаетНДС", Истина, Истина, 
		ДокументОбъект.РеквизитыДокумента[26].Значение);
		
		Для Каждого Строка Из ТаблицаТовары Цикл
			
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммыВСтрокеТЧ(Строка, ПараметрыРасчета);  
			
			Если СкидкиВыключены Тогда
				Строка.СуммаСкидкиНаценки = 0;
				Строка.ПроцентСкидкиНаценки = 0;
				Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().ПоДокументуВЦелом Тогда
		
		ИтогоСуммаСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСуммаСкидки", 0);
		
		РаспознаваниеДокументовУНФ.РаспределитьСуммуНаСкидки(ТаблицаТовары, "Сумма", ИтогоСуммаСкидки);
		
		Для Каждого Строка Из ТаблицаТовары Цикл
			
			ТабличныеЧастиУНФКлиентСервер.РассчитатьСуммуНДСИВсего(Строка, Новый Структура("СуммаВключаетНДС", ДокументОбъект.РеквизитыДокумента[26].Значение));			
			
			Если СкидкиВыключены Тогда
				Строка.СуммаСкидкиНаценки = 0;
				Строка.ПроцентСкидкиНаценки = 0;
				Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаАвтоПодбораБанка(Текст, ДанныеВыбора, СтандартнаяОбработка, Параметры) Экспорт 

	Если ПустаяСтрока(Текст) Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) И СтрДлина(Текст)<=2 Тогда
		ДанныеВыбора = Новый СписокЗначений;
	Иначе
		ДанныеВыбора = РаспознаваниеДокументовУНФ.ДанныеВыбораБанка(Параметры);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьВыборБанка(ВыбранноеЗначение) Экспорт 

	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторБанков")
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ВыбранноеЗначение = БанкиУНФ.БанкИзКлассификатора(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНомерСчетаБИК(Банк, БанкРаспознанныйТекст, НомерСчета) Экспорт

	НадписьПоясненияНекорректногоБИК = "";
	
	ТекстОшибки = "";
	ЯвляетсяБанкомРФ = Истина;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		БИКБанк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	Иначе 
		БИКБанк = РаспознаваниеДокументовСлужебный.ИзвлечьЦифрыИзСтроки(БанкРаспознанныйТекст);
	КонецЕсли;
	
	Если БанковскиеПравилаКлиентСервер.НомерСчетаКорректен(НомерСчета, БИКБанк, ЯвляетсяБанкомРФ, ТекстОшибки) Тогда
		Если Не ЗначениеЗаполнено(Банк) Тогда
			
			Параметры = Новый Структура("СтрокаПоиска", БИКБанк);
			
			СписокБанков = РаспознаваниеДокументовУНФ.ДанныеВыбораБанка(Параметры); 
			
			Если СписокБанков.Количество() Тогда
				Банк = СписокБанков[0].Значение;
			КонецЕсли;
			
			Если ТипЗнч(Банк) = Тип("СправочникСсылка.КлассификаторБанков")
				И ЗначениеЗаполнено(Банк) Тогда
				
				Банк = БанкиУНФ.БанкИзКлассификатора(Банк);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяРеквизитаОбъекта(ИмяРеквизита, ТипОбъекта = Неопределено) Экспорт
	
	Если ТипОбъекта = Тип("ДокументСсылка.ПриходнаяНакладная") 
		Или ТипОбъекта = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		Если ИмяРеквизита = "Склад" Тогда
			ИмяРеквизита = "СтруктурнаяЕдиница"; 
		ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда
			ИмяРеквизита = "Договор";
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда	
		
		Если ИмяРеквизита = "Номер" Тогда
			ИмяРеквизита = "НомерДоговора";
		ИначеЕсли ИмяРеквизита = "Дата" Тогда
			ИмяРеквизита = "ДатаДоговора";
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если ИмяРеквизита = "ЮридическоеФизическоеЛицо" Тогда
			ИмяРеквизита = "ВидКонтрагента";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидыОперацийПоступлениеТоваровУслуг(Результат) Экспорт
	
	Результат.Вставить("ПриемНаКомиссию", Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию);
	
КонецПроцедуры    

Процедура ВидыОперацийРеализацияТоваров(Результат) Экспорт
	
	Результат.Вставить("ПередачаНаКомиссию", Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
	
КонецПроцедуры    

Процедура ТекстЗапросаПоПервичнымДокументам(ИмяТипа, ТекстЗапроса) Экспорт
	
	// УНФ
	ТекстЗапроса = "";
	Если ИмяТипа = "ПоступлениеТоваровУслугБРД" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеПервичныхДокументов.Ссылка КАК Документ
		|	,NULL КАК ДокументОснование
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ДанныеПервичныхДокументов
		|ГДЕ
		|	НЕ ДанныеПервичныхДокументов.ПометкаУдаления
		|	И ДанныеПервичныхДокументов.Организация = &Организация
		|	И ДанныеПервичныхДокументов.Контрагент = &Контрагент
		|	И ДанныеПервичныхДокументов.Номер = &Номер
		|	И ДанныеПервичныхДокументов.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|";
		
	ИначеЕсли ИмяТипа = "РеализацияТоваровУслугБРД" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеПервичныхДокументов.Ссылка КАК Документ
		|	,NULL КАК ДокументОснование
		|ИЗ
		|	Документ.РасходнаяНакладная КАК ДанныеПервичныхДокументов
		|ГДЕ
		|	НЕ ДанныеПервичныхДокументов.ПометкаУдаления
		|	И ДанныеПервичныхДокументов.Организация = &Организация
		|	И ДанныеПервичныхДокументов.Контрагент = &Контрагент
		|	И ДанныеПервичныхДокументов.Номер = &Номер
		|	И ДанныеПервичныхДокументов.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|";
		
	ИначеЕсли ИмяТипа = "СчетФактураПолученныйБРД" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеПервичныхДокументов.Ссылка КАК Документ
		|	,ДанныеПервичныхДокументов.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК ДанныеПервичныхДокументов
		|ГДЕ
		|	НЕ ДанныеПервичныхДокументов.Ссылка.ПометкаУдаления
		|	И ДанныеПервичныхДокументов.Ссылка.Организация = &Организация
		|	И ДанныеПервичныхДокументов.Ссылка.Контрагент = &Контрагент
		|	И ДанныеПервичныхДокументов.Ссылка.Номер = &Номер
		|	И ДанныеПервичныхДокументов.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|";
		
	ИначеЕсли ИмяТипа = "СчетФактураВыданныйБРД" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеПервичныхДокументов.Ссылка КАК Документ
		|	,ДанныеПервичныхДокументов.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.СчетФактура.ДокументыОснования КАК ДанныеПервичныхДокументов
		|ГДЕ
		|	НЕ ДанныеПервичныхДокументов.Ссылка.ПометкаУдаления
		|	И ДанныеПервичныхДокументов.Ссылка.Организация = &Организация
		|	И ДанныеПервичныхДокументов.Ссылка.Контрагент = &Контрагент
		|	И ДанныеПервичныхДокументов.Ссылка.Номер = &Номер
		|	И ДанныеПервичныхДокументов.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|";
		
	ИначеЕсли ИмяТипа = "СчетНаОплатуПоставщикаБРД" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеПервичныхДокументов.Ссылка КАК Документ
		|	,NULL КАК ДокументОснование
		|ИЗ
		|	Документ.СчетНаОплатуПоставщика КАК ДанныеПервичныхДокументов
		|ГДЕ
		|	НЕ ДанныеПервичныхДокументов.ПометкаУдаления
		|	И ДанныеПервичныхДокументов.Организация = &Организация
		|	И ДанныеПервичныхДокументов.Контрагент = &Контрагент
		|	И ДанныеПервичныхДокументов.НомерВходящегоДокумента = &Номер
		|	И ДанныеПервичныхДокументов.ДатаВходящегоДокумента МЕЖДУ &ДатаНачала И &ДатаКонца
		|";
		
	ИначеЕсли ИмяТипа = "СчетНаОплатуПокупателюБРД" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеПервичныхДокументов.Ссылка КАК Документ
		|	,NULL КАК ДокументОснование
		|ИЗ
		|	Документ.СчетНаОплату КАК ДанныеПервичныхДокументов
		|ГДЕ
		|	НЕ ДанныеПервичныхДокументов.ПометкаУдаления
		|	И ДанныеПервичныхДокументов.Организация = &Организация
		|	И ДанныеПервичныхДокументов.Контрагент = &Контрагент
		|	И ДанныеПервичныхДокументов.Номер = &Номер
		|	И ДанныеПервичныхДокументов.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|";
		
	КонецЕсли;
	// Конец УНФ
		
КонецПроцедуры

Процедура ПроверитьСоответствиеТребованиямИНН(ИНН, ЭтоЮрЛицо, РезультатПроверки) Экспорт
	
	РезультатПроверки = РаспознаваниеДокументовУНФ.ПроверитьСоответствиеТребованиямИНН(ИНН, ЭтоЮрЛицо);  
	
КонецПроцедуры 

Процедура ПроверитьСоответствиеТребованиямКПП(КПП, ЭтоЮрЛицо, РезультатПроверки) Экспорт
	
	РезультатПроверки = РаспознаваниеДокументовУНФ.ПроверитьСоответствиеТребованиямКПП(КПП, ЭтоЮрЛицо, Ложь);  
	
КонецПроцедуры 

Процедура ОтобразитьРезультатПроверкиКонтрагентовВФорме(Форма, РезультатПроверкиСуществования = "") Экспорт
	
	// ИНН
	Форма.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(Форма.РезультатПроверкиИНН);
	
	// КПП
	Форма.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(Форма.РезультатПроверкиКПП);
	
	// Дубли и ФНС
	МассивПодстрокДублиФНС = Новый Массив;
	Если НЕ ПустаяСтрока(Форма.РезультатПроверкиНаДубли) Тогда
		МассивПодстрокДублиФНС.Добавить(Форма.РезультатПроверкиНаДубли);
	КонецЕсли;
	Если НЕ ПустаяСтрока(РезультатПроверкиСуществования) Тогда
		Если МассивПодстрокДублиФНС.Количество() > 0 Тогда
			МассивПодстрокДублиФНС.Добавить("    ");
		КонецЕсли;
		МассивПодстрокДублиФНС.Добавить(РезультатПроверкиСуществования);
	КонецЕсли;
	Форма.НадписьПояснениеПроверкиДублейФНС = Новый ФорматированнаяСтрока(МассивПодстрокДублиФНС);
	
КонецПроцедуры

Процедура ТребуетсяВключениеФункциональныхОпцийПоСкидкам(ВидСкидки, Направление, Результат) Экспорт
	
	Если ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		Результат = Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиЗакупки");
	Иначе
		Результат = Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредупрежденияПоСкидкам(РеквизитыШапки, Форма) Экспорт
	
	СкидкиПоЗакупкамВыключены = Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиЗакупки");
	СкидкиПоПродажамВыключены = Не ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	
	Для Каждого Строка Из РеквизитыШапки Цикл
		
		Если Не Строка.ЕстьСкидка Тогда
			Продолжить;
		КонецЕсли;
		
		Если (СкидкиПоЗакупкамВыключены И Строка.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий)
			Или (СкидкиПоПродажамВыключены И Строка.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий) Тогда
			Строка.Ошибка = "Скидки не поддерживаются";
			Строка.ДанныеЗаполнены = Ложь;
		Иначе
			Строка.Ошибка = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСправочникиБезПравНаСоздание(СправочникиБезПравНаСоздание) Экспорт
	
	СправочникиБезПравНаСоздание.Добавить("ЕдиницаИзмерения");
	
КонецПроцедуры

Процедура СозданиеЭлементаСОтображениемКартинкиПриСозданииНаСервере(Форма) Экспорт
	
	Форма.Элементы.ГруппаВидНоменклатуры.Видимость = Ложь;
	
КонецПроцедуры

Процедура ГрупповаяОбработкаПриСозданииНаСервере(Форма) Экспорт
	
	ЕстьПравоСозданияНоменклатуры = Форма.СправочникиБезПравНаСоздание.НайтиПоЗначению("Номенклатура") = Неопределено;
	
	Форма.Элементы.ТаблицаНоменклатурыСоздатьВыделеннуюНоменклатуру.Видимость = ЕстьПравоСозданияНоменклатуры;
	Форма.Элементы.ТаблицаНоменклатурыКонтекстноеМенюСоздатьВыделеннуюНоменклатуру.Видимость = ЕстьПравоСозданияНоменклатуры;
	
	Форма.Элементы.НоменклатураВидНоменклатуры.Заголовок = "Категория";
	Форма.Элементы.ТаблицаНоменклатурыГруппаВидНоменклатуры.Заголовок = "Категория";
	
КонецПроцедуры

#КонецОбласти
