
////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПоказатьИнформациюоСроках() Экспорт
	
	ОткрытьФорму(
		"Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов.Форма.ФормаСрокиПредставления"
		,
		,
		,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
Процедура ИзменитьСрокТребования(ТребованиеСсылка, ОповещениеЗавершения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура("Требование", ТребованиеСсылка);
	ОткрытьФорму(
		"Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов.Форма.ИзменениеСрокаТребования", 
		ПараметрыФормы, 
		, 
		Истина,
		,
		,
		ОповещениеЗавершения);
		
	
КонецПроцедуры

Процедура ОткрытьКалендарь(СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Календарь = ТребованияФНСВызовСервера.ПроизводственныйКалендарь();
	ПоказатьЗначение(, Календарь);
	
КонецПроцедуры

Процедура ПодтвердитьПриемНескольких(Сейчас, КонтекстЭДОКлиент, Организация = Неопределено ) Экспорт
	
	Есть = ТребованияФНСВызовСервера.ЕстьТребующиеПодтверждения(Организация);
	
	Если Есть Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Сейчас", Сейчас);
		
		ОткрытьФорму(
			КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ГрупповоеПодтверждениеПриема",
			ПараметрыФормы,,,,,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Текст = НСтр("ru = 'По организаци %1 отсутствуют требования, прием которых нужно подтвердить'");
			Текст = СтрШаблон(Текст, Организация);
		Иначе
			Текст = НСтр("ru = 'Отсутствуют требования, прием которых нужно подтвердить'");
		КонецЕсли;
		ПоказатьПредупреждение(, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьСканыВОтветНаТребование(КонтекстЭДОКлиент, УникальныйИдентификатор, ОповещениеЗавершения, МножественныйВыбор = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьСканыВОтветНаТребование_ПослеВыбора", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПараметрыДобавления = ТребованияФНСКлиентСервер.ПараметрыВыбораФайловВОтветНаТребованиеДокументов(МножественныйВыбор);
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(
		ОписаниеОповещения, 
		УникальныйИдентификатор,
		,
		ПараметрыДобавления);
	
КонецПроцедуры

Процедура ДобавитьСканыВОтветНаТребованиеПоОписаниюФайлов(
		КонтекстЭДОКлиент, 
		УникальныйИдентификатор, 
		ОписаниеФайлов, 
		ОповещениеЗавершения) Экспорт
		
	Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		ОписаниеФайла.Имя = ПроверитьИмяФайлаНаСимволы(КонтекстЭДОКлиент, ОписаниеФайла.Имя);
	КонецЦикла;
	
	ОбработкаФайловPDFВызовСервера.ОпределитьСвойстваPDFФайлов(ОписаниеФайлов);
	
	ОчиститьСообщения();
	ФайлыКОбработке = Новый Массив;
	Для каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		
		Если ОписаниеФайла.ЭтоPDFa3 
			И ТребованияФНСКлиентСервер.ЭтоФормат_ON_DOCNPNO_1_886_00_05_02() Тогда
			СообщитьОНедопустимостиЗагрузкиPDFA3ВСканы(ОписаниеФайла.Имя);
		Иначе
			ФайлыКОбработке.Добавить(ОписаниеФайла);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ФайлыКОбработке.Количество() = 0 Тогда
		НеВыполнено = ДокументооборотСКОКлиентСервер.НеВыполнено();
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, НеВыполнено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ДополнительныеПараметры.Вставить("ФайлыДоОбработки", ФайлыКОбработке);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьСканыВОтветНаТребование_ПослеОбработкиКартинок", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Требования = ТребованияФНСКлиентСервер.ТребованияКИзображениямОтветаНаТребованиеДокументов();
	
	ОперацииСФайламиЭДКОСлужебныйКлиент.ОбработатьКартинки(
		ОписаниеОповещения, 
		ФайлыКОбработке, 
		Требования, 
		УникальныйИдентификатор);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыбратьСканыВОтветНаТребование_ПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		НеВыполнено = ДокументооборотСКОКлиентСервер.НеВыполнено();
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеЗавершения, НеВыполнено);
		Возврат;
	КонецЕсли;
	
	ОписаниеФайлов = Результат.ОписанияФайлов;
	
	ДобавитьСканыВОтветНаТребованиеПоОписаниюФайлов(
		ВходящийКонтекст.КонтекстЭДОКлиент, 
		ВходящийКонтекст.УникальныйИдентификатор, 
		ОписаниеФайлов, 
		ВходящийКонтекст.ОповещениеЗавершения);
	
КонецПроцедуры
	
Функция ПроверитьИмяФайлаНаСимволы(КонтекстЭДОКлиент, ТекущееИмяФайла) Экспорт
	
	ИзмененоИмя = Ложь;
	НовоеИмя = ТекущееИмяФайла;
	
	РезультатПроверки = КонтекстЭДОКлиент.ПроверитьНеДопустимыеСимволыИмениФайла(ТекущееИмяФайла, "windows-1251");
	Если НЕ РезультатПроверки.Пройдена Тогда
		НовоеИмя = РезультатПроверки.НовоеИмя;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'В имени файла недопустимые символы.'"), , 
			НСтр("ru = 'Произведена замена недопустимых символов.'"), , 
			СтатусОповещенияПользователя.Информация);
	КонецЕсли;
	
Возврат НовоеИмя;
	
КонецФункции

Процедура ВыбратьСканыВОтветНаТребование_ПослеОбработкиКартинок(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		НеВыполнено = ДокументооборотСКОКлиентСервер.НеВыполнено();
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеЗавершения, НеВыполнено);
		Возврат;
	КонецЕсли;
	
	ТребованияФНСВызовСервера.ВосстановитьСвойстваФайлов(Результат.ОписанияФайлов, ВходящийКонтекст.ФайлыДоОбработки);
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеЗавершения, Результат);
	
КонецПроцедуры

Процедура СообщитьОНедопустимостиЗагрузкиPDFA3ВСканы(Имя) Экспорт
	
	Ошибка = НСтр("ru = 'Файл ""%1"" имеет формат PDF/A-3 и, в соответствии с Приказом ФНС от 19 апреля 2023 г. N ЕД-7-26/263@,  не может быть загружен и отправлен как сканированный документ.
                   |Для загрузки файла как сканированного документа нужно сохранить его в другом формате. Разрешенные форматы: TIF, JPG, PNG, PDF (но не PDF/A-3).'");
	
	Ошибка = СтрШаблон(Ошибка, Имя);
	ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Ошибка);
	
КонецПроцедуры


#КонецОбласти
