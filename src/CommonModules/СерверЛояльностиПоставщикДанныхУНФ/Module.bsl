///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет использование библиотеки сервера лояльности
//
// Параметры:
//  Ответ - HTTPСервисОтвет - ответ сервера лояльности
//  Результат - Булево - Истина, если Сервер лояльности используется, Ложь - если не используется.
//
Процедура ИспользоватьСерверЛояльности(Ответ, Результат) Экспорт
	
	ИспользоватьСерверЛояльности = Константы.ИспользоватьСерверЛояльностиПоставщикДанных.Получить();
	Если Не ИспользоватьСерверЛояльности Тогда
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Использование сервера лояльности отключено в настройках программы'"));
	КонецЕсли;
	
	Результат = ИспользоватьСерверЛояльности;
	
КонецПроцедуры

// Заполняет бонусную программу по дисконтной карте покупателя
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - 
//                    карта лояльности, по которой будут заполнены данные о бонусах
//  БонуснаяПрограмма - ОпределяемыйТип.БонуснаяПрограммаСерверЛояльности - Бонусная программа лояльности
//
Процедура ЗаполнитьБонуснуюПрограммуПоДисконтнойКарте(ДисконтнаяКарта, БонуснаяПрограммаЛояльности) Экспорт
	
	БонуснаяПрограммаЛояльности = ДисконтнаяКарта.Владелец.БонуснаяПрограмма;
	
КонецПроцедуры

// Производит поиск карты клиента по параметрам, полученным через http-сервис
//
// Праметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры клиента:
//    * ИдентификаторКартыКлиента - Строка - код карты лояльности
//    * Клиент - Строка - ФИО владельца карты
//    * АдресЭП - Строка - адрес электронной почты владельца карты
//    * НомерТелефона - Строка - номер телефона владельца карты
//  Результат - ОпределяемыйТип.КартаЛояльностиСерверЛояльности, Неопределено - дисконтная карта клиента
//
Процедура НайтиКартуКлиента(ПараметрыМетода, Результат = Неопределено) Экспорт

	ОбратныйНомерТелефона = Справочники.Контрагенты.ПолучитьОбратныйНомерТелефонаБезКодаСтраны(ПараметрыМетода.НомерТелефона);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Приоритет КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДисконтныеКарты.Ссылка КАК Ссылка,
		|		1 КАК Приоритет
		|	ИЗ
		|		Справочник.ДисконтныеКарты КАК ДисконтныеКарты
		|	ГДЕ
		|		НЕ ДисконтныеКарты.ПометкаУдаления
		|		И &ИдентификаторКартыКлиента <> """"
		|		И &ИдентификаторКартыКлиента В (ДисконтныеКарты.КодКартыШтрихкод, ДисконтныеКарты.КодКартыМагнитный)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДисконтныеКарты.Ссылка,
		|		2
		|	ИЗ
		|		Справочник.ДисконтныеКарты КАК ДисконтныеКарты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|			ПО ДисконтныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформация.Ссылка
		|				И (КонтрагентыКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомерТелефона)
		|				И (&ОбратныйНомерТелефона <> """")
		|				И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|				И (НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДисконтныеКарты.Ссылка,
		|		3
		|	ИЗ
		|		Справочник.ДисконтныеКарты КАК ДисконтныеКарты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|			ПО ДисконтныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформация.Ссылка
		|				И (КонтрагентыКонтактнаяИнформация.АдресЭП = &АдресЭП)
		|				И (&АдресЭП <> """")
		|				И (НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|				И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("ИдентификаторКартыКлиента", ПараметрыМетода.ИдентификаторКартыКлиента);
	Запрос.УстановитьПараметр("ОбратныйНомерТелефона", ОбратныйНомерТелефона);
	Запрос.УстановитьПараметр("АдресЭП", ПараметрыМетода.АдресЭП);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Создает карты клиента
//
// Параметры:
//  ДанныеКарты - Структура - структура, содержащая данные карты лояльности
//    * ИдентификаторКартыКлиента - Строка - код карты лояльности
//    * Клиент - Строка - ФИО владельца карты
//    * АдресЭП - Строка - адрес электронной почты владельца карты
//    * НомерТелефона - Строка - номер телефона владельца карты 
//    * ГУИДВидаКарты - Строка - идентификатор вида карты
//  Результат - ОпределяемыйТип.КартаЛояльностиСерверЛояльности, Неопределено - содержит значение,
//				в котором будет храниться ссылка на созданную карту лояльности.
//
Процедура СоздатьКартуКлиента(ДанныеКарты, Результат = Неопределено, ДругойКлиент = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДисконтнаяКарта = Справочники.ДисконтныеКарты.ПустаяСсылка();
	
	ВидДисконтнойКарты = ПолучитьВидДисконтнойКарты(ДанныеКарты.ГУИДВидаКарты);
	
	Если ВидДисконтнойКарты <> Неопределено Тогда
		ВладелецКарты = Справочники.Контрагенты.ПустаяСсылка();
		Если ВидДисконтнойКарты.ЭтоИменнаяКарта Тогда
			РезультатПолучения = ПолучитьВладельцаКарты(ДанныеКарты);
			Если ЗначениеЗаполнено(РезультатПолучения.ВладелецКарты) Тогда
				Если РезультатПолучения.СтатусПолучения = "занят" Тогда
					ДругойКлиент = РезультатПолучения.ВладелецКарты;
				Иначе
					ВладелецКарты = РезультатПолучения.ВладелецКарты;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВладелецКарты) ИЛИ НЕ ВидДисконтнойКарты.ЭтоИменнаяКарта Тогда
			НачатьТранзакцию();
			
			Попытка
				
					СтруктураДанныхКарты = Новый Структура;
					СтруктураДанныхКарты.Вставить("Штрихкод", ДанныеКарты.ИдентификаторКартыКлиента);
					СтруктураДанныхКарты.Вставить("МагнитныйКод", ДанныеКарты.ИдентификаторКартыКлиента);
					СтруктураДанныхКарты.Вставить("Контрагент", ВладелецКарты);
					СтруктураДанныхКарты.Вставить("ВидКарты", ВидДисконтнойКарты);
					
					ДисконтнаяКарта = ДисконтныеКартыУНФСервер.ЗарегистрироватьДисконтнуюКарту(СтруктураДанныхКарты);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Описание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("СерверЛояльности.ВыдатьКартуКлиенту", , , , Описание);
				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = ДисконтнаяКарта;
	
КонецПроцедуры

// Создает физическое лицо - владельца карты лояльности
//
// Параметры:
//  ДанныеКарты - Структура - структура, содержащая данные карты лояльности
//    * ИдентификаторКартыКлиента - Строка - код карты лояльности
//    * Клиент - Строка - ФИО владельца карты
//    * АдресЭП - Строка - адрес электронной почты владельца карты
//    * НомерТелефона - Строка - номер телефона владельца карты
//
// Возвращаемое значение:
//  ОпределяемыйТип.КонтрагентСерверЛояльности - вновь созданный владелец карты лояльности
//
Функция СоздатьВладельцаКарты(ДанныеКарты) Экспорт
	
	ВладелецКарты = Справочники.Контрагенты.СоздатьЭлемент();
	ВладелецКарты.Заполнить(Неопределено);
	ВладелецКарты.Наименование = ДанныеКарты.Клиент;
	ВладелецКарты.ДатаСоздания = ТекущаяДатаСеанса();
	ВладелецКарты.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	ВладелецКарты.ФИО = ДанныеКарты.Клиент;
	ДатаРождения = ДанныеКарты.ДатаРождения;
	Если ТипЗнч(ДатаРождения) = Тип("Строка") И 
		СтрДлина(ДатаРождения) = 10 Тогда
		ДатаРождения = ДатаРождения + " 00:00:00";
	КонецЕсли;
	ВладелецКарты.ДатаРождения = ДатаРождения;
	ВладелецКарты.Покупатель = Истина;
	
	Если ЗначениеЗаполнено(ДанныеКарты.АдресЭП) Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ВладелецКарты, ДанныеКарты.АдресЭП,
			Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		
		ВладелецКарты.ОсновныеСведения = ВладелецКарты.ОсновныеСведения + ДанныеКарты.АдресЭП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКарты.НомерТелефона) Тогда
		НомерТелефонаБезПлюса = СтрЗаменить(ДанныеКарты.НомерТелефона, "+", "");
		НомерТелефонаБезПлюса = СтрЗаменить(НомерТелефонаБезПлюса, " ", "");
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ВладелецКарты, ДанныеКарты.НомерТелефона,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		
		ВладелецКарты.ОсновныеСведения = ВладелецКарты.ОсновныеСведения 
										+ ?(ПустаяСтрока(ВладелецКарты.ОсновныеСведения), "", Символы.ПС)
										+ НомерТелефонаБезПлюса;
	КонецЕсли;
	
	ВладелецКарты.Записать();
	
	Возврат ВладелецКарты.Ссылка;
	
КонецФункции

// Заполняет структуру ответа http-сервиса данными дисконтной карты
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьСтруктуруОтветаДаннымиКарты(ДисконтнаяКарта, СтруктураОтвета, КартаСуществует = Ложь) Экспорт
	
	СтруктураОтвета.CardID 		 = ПолучитьНомерКарты(ДисконтнаяКарта);
	СтруктураОтвета.CardRef 	 = XMLСтрока(ДисконтнаяКарта);
	СтруктураОтвета.Client 		 = Строка(ДисконтнаяКарта.ВладелецКарты);
	СтруктураОтвета.PhoneNumber  = ПолучитьНомерТелефонаВладельца(ДисконтнаяКарта.ВладелецКарты);
	СтруктураОтвета.Email 		 = ПолучитьАдресЭПВладельца(ДисконтнаяКарта.ВладелецКарты);
	СтруктураОтвета.ExistingCard = КартаСуществует;
	СтруктураОтвета.DateOfBirth  = ПолучитьДатуРожденияВладельца(ДисконтнаяКарта.ВладелецКарты);
	
	БонуснаяПрограммаЛояльности  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта.Владелец, "БонуснаяПрограмма");
	
	Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда 
		СтруктураОтвета.PaymentPercent  = БонуснаяПрограммаЛояльности.МаксимальныйПроцентОплаты;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными дисконтной карты
//
// Параметры:
//  Клиент - СправочникСсылка.Контрагенты
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьСтруктуруОтветаДаннымиКлиента(Клиент, СтруктураОтвета) Экспорт
	
	СтруктураОтвета.Client 		 = Строка(Клиент);
	СтруктураОтвета.PhoneNumber  = ПолучитьНомерТелефонаВладельца(Клиент);
	СтруктураОтвета.Email 		 = ПолучитьАдресЭПВладельца(Клиент);
	СтруктураОтвета.ExistingCard = Истина;
	СтруктураОтвета.DateOfBirth  = ПолучитьДатуРожденияВладельца(Клиент);
	СтруктураОтвета.ElseClient   = Истина;
	
КонецПроцедуры

// Заполняет структуру ответа Сервера лояльности данными об остатках бонусных баллов
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - 
//                    карта лояльности, по которой будут заполнены данные о бонусах
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьДанныеОБонусах(ДисконтнаяКарта, СтруктураОтвета) Экспорт
	
	ОстаткиБонусныхБаллов = ПолучитьБонусыКлиента(ДисконтнаяКарта);
	БонусныеБаллыРезерв = СерверЛояльностиПоставщикДанных.ПолучитьБонусныеБаллыРезерв(ДисконтнаяКарта);
	
	РеквизитыБонуснойПрограммы = РаботаСБонусами.РеквизитыБонуснойПрограммы(ДисконтнаяКарта);

	Если ЗначениеЗаполнено(РеквизитыБонуснойПрограммы.МаксимальныйПроцентОплаты) Тогда
		СтруктураОтвета.PaymentPercent = РеквизитыБонуснойПрограммы.МаксимальныйПроцентОплаты;
	КонецЕсли;
	
	// Проверяем ситуацию когда бонусных баллов в резерве может быть больше чем на остатке,
	// в этом случае возвращаем 0
	Если БонусныеБаллыРезерв > ОстаткиБонусныхБаллов Тогда
		СтруктураОтвета.BonusCount = 0;
	Иначе
		СтруктураОтвета.BonusCount = ОстаткиБонусныхБаллов - БонусныеБаллыРезерв;
	КонецЕсли
	
КонецПроцедуры

// Возвращает остатки бонусных баллов клиента
//
// Параметры: 
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//
// Возвращаемое значение:
//  Остаток - Число - остаток бонусов клиента
//
Функция ПолучитьБонусыКлиента(ДисконтнаяКарта)
	
	ДанныеБонуснойКарты = РаботаСБонусами.ПолучитьДанныеБонуснойКарты(ДисконтнаяКарта, ТекущаяДатаСеанса());
	Возврат ДанныеБонуснойКарты.Остаток;
	
КонецФункции


// Производит поиск подарочного сертификата по параметрам, полученным через http-сервис
//
// Параметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры подарочного сертификата
//                                см. СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса
//  Результат - Структура - данные найденного подарочный сертификат
//    * СерийныйНомер		 - ОпределяемыйТип.СерийныйНомерСерверЛояльности
//    * ПодарочныйСертификат - ОпределяемыйТип.ПодарочныйСертификатСерверЛояльности
//
Процедура НайтиПодарочныйСертификат(ПараметрыМетода, Результат) Экспорт
	
	ДанныеСертификата = Новый Структура;
	ДанныеСертификата.Вставить("СерийныйНомер"			, Неопределено);
	ДанныеСертификата.Вставить("ПодарочныйСертификат"	, Неопределено);
	
	Попытка
		Если Не ЗначениеЗаполнено(ПараметрыМетода.НомерСертификата) И ПараметрыМетода.Свойство("ГУИДСертификата") Тогда
			ГУИДСертификата = Новый УникальныйИдентификатор(ПараметрыМетода.ГУИДСертификата);
			ДанныеСертификата.СерийныйНомер = Справочники.СерииНоменклатуры.ПустаяСсылка();
			ДанныеСертификата.ПодарочныйСертификат = Справочники.Номенклатура.ПолучитьСсылку(ГУИДСертификата);
		Иначе
			ДанныеСертификата.СерийныйНомер = Справочники.СерииНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыМетода.НомерСертификата));
			ДанныеСертификата.ПодарочныйСертификат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСертификата.СерийныйНомер, "Владелец");
		КонецЕсли;
	Исключение
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СерийныеНомера.Ссылка КАК СерийныйНомер,
		|	СерийныеНомера.Владелец КАК ПодарочныйСертификат,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерийныеНомера
		|ГДЕ
		|	СерийныеНомера.Наименование = &НомерСертификата
		|	И НЕ СерийныеНомера.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|	Номенклатура.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	(Номенклатура.Код = &НомерСертификата
		|			ИЛИ Номенклатура.Наименование = &НомерСертификата)
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("НомерСертификата", ПараметрыМетода.НомерСертификата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(ДанныеСертификата, Выборка);
		КонецЕсли;
	
	КонецПопытки;
	
	Результат = ДанныеСертификата;
	
КонецПроцедуры

// Производит поиск промокода по параметрам, полученным через http-сервис
//
// Параметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе промокод
//                                см. СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса
//  Результат - Структура - данные найденного подарочный сертификат
//    * Промокод		 - ОпределяемыйТип.Промокод, Неопределено - Значение переданного промокода. Неопределено, если промокод не зарегистрирован.
//    * ДоступноПрименений - Число, Неопределено - количество доступных применений. 0 когда промокод более недоступен. 
//    * ОписаниеОшибки - Строка - Не обязательный. Когда промокод не доступен, возвращается пояснение, по какой причине
//                                он не доступен
//
Процедура НайтиПромокод(ПараметрыМетода, Результат) Экспорт
	
	ДанныеПромокода = Новый Структура;
	ДанныеПромокода.Вставить("Промокод"			, Неопределено);
	ДанныеПромокода.Вставить("ДоступноПрименений"	, Неопределено);
	ДанныеПромокода.Вставить("ОписаниеОшибки"		, Неопределено);
	
	ТекстОшибки = "";
	ДоступноПрименений = 0;
	Если Не ЗначениеЗаполнено(ПараметрыМетода.Промокод) Тогда
		ТекстОшибки = НРег("ru = 'Промокод не указан'");
	Иначе		
    	ДоступноПрименений = РегистрыНакопления.ДоступностьПромокодов.ДоступноПримененийПромокода(ПараметрыМетода.Промокод,,ТекстОшибки);
	КонецЕсли;
	
	ДанныеПромокода.Вставить("ДоступноПрименений", ?(ДоступноПрименений = Неопределено, 0, ДоступноПрименений));
	ДанныеПромокода.Вставить("Промокод", ?(ДоступноПрименений = Неопределено, Неопределено, ПараметрыМетода.Промокод));
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ДанныеПромокода.Вставить("ОписаниеОшибки", ТекстОшибки);
	КонецЕсли;
	
	Результат = ДанныеПромокода;
	
КонецПроцедуры


// Проверяет использование функции оплаты подарочными сертификатами
//
// Параметры:
//  Результат - Булево - переменная, в которую будет записан результат проверки использования
//						 функции оплаты подарочными сертификатами
//
Процедура ПроверитьИспользованиеПодарочныхСертификатов(Результат) Экспорт

	Результат = Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить();

КонецПроцедуры

// Возвращает данные о подарочном сертификате
//
// Параметры:
//  ДанныеСертификата - Структура - содержит данные подарочного сертификата.
//  СтруктураОтвета - Структура - содержит данные о балансе сертификата,
//                                см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ПолучитьБалансПодарочногоСертификата(ДанныеСертификата, СтруктураОтвета) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеСертификата.ПодарочныйСертификат) И Не ДанныеСертификата.ПодарочныйСертификат.ИспользоватьСерииНоменклатуры Тогда
		Если Не ДанныеСертификата.ПодарочныйСертификат.ПометкаУдаления Тогда
			СтруктураОтвета.GiftCard.GiftCardName = Строка(ДанныеСертификата.ПодарочныйСертификат);
			СтруктураОтвета.GiftCard.GiftCardRef  = XMLСтрока(ДанныеСертификата.ПодарочныйСертификат);
			СтруктураОтвета.GiftCardNumber 		  = "";
			СтруктураОтвета.GiftCardValue 		  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСертификата.ПодарочныйСертификат, "Номинал");
			СтруктураОтвета.GiftCardBalance 	  = СтруктураОтвета.GiftCardValue;  
		КонецЕсли;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ПодарочныеСертификатыКСписаниюСерверЛояльности.КСписанию) КАК КСписанию,
			|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат КАК ПодарочныйСертификат,
			|	ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер КАК СерийныйНомер
			|ПОМЕСТИТЬ ВТ_ПодарочныеСертификатыРезерв
			|ИЗ
			|	РегистрСведений.ПодарочныеСертификатыКСписаниюСерверЛояльности КАК ПодарочныеСертификатыКСписаниюСерверЛояльности
			|ГДЕ
			|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат = &ПодарочныйСертификат
			|	И ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер = &СерийныйНомер
			|
			|СГРУППИРОВАТЬ ПО
			|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат,
			|	ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПодарочныйСертификат,
			|	СерийныйНомер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПодарочныеСертификатыОстатки.ПодарочныйСертификат КАК ПодарочныйСертификат,
			|	ПодарочныеСертификатыОстатки.НомерСертификата КАК НомерСертификата,
			|	ПодарочныеСертификатыОстатки.ПодарочныйСертификат.Номинал КАК Номинал,
			|	ВЫБОР
			|		КОГДА СостояниеПодарочныхСертификатов.ПодарочныйСертификат ЕСТЬ NULL
			|			ТОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(ВТ_ПодарочныеСертификатыРезерв.КСписанию, 0) > ПодарочныеСертификатыОстатки.СуммаОстаток
			|						ТОГДА 0
			|					ИНАЧЕ ПодарочныеСертификатыОстатки.СуммаОстаток - ЕСТЬNULL(ВТ_ПодарочныеСертификатыРезерв.КСписанию, 0)
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток,
			|	ВЫБОР
			|		КОГДА СостояниеПодарочныхСертификатов.ПодарочныйСертификат ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Заблокирован
			|ИЗ
			|	РегистрНакопления.ПодарочныеСертификаты.Остатки(
			|			&ДатаЗапроса,
			|			НомерСертификата = &СерийныйНомер
			|				И ПодарочныйСертификат = &ПодарочныйСертификат) КАК ПодарочныеСертификатыОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодарочныхСертификатовСерверЛояльности КАК СостояниеПодарочныхСертификатов
			|		ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = СостояниеПодарочныхСертификатов.ПодарочныйСертификат
			|			И ПодарочныеСертификатыОстатки.НомерСертификата = СостояниеПодарочныхСертификатов.СерийныйНомер
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодарочныеСертификатыРезерв КАК ВТ_ПодарочныеСертификатыРезерв
			|		ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ВТ_ПодарочныеСертификатыРезерв.ПодарочныйСертификат
			|			И ПодарочныеСертификатыОстатки.НомерСертификата = ВТ_ПодарочныеСертификатыРезерв.СерийныйНомер";
		
		Запрос.УстановитьПараметр("ДатаЗапроса"				, ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ПодарочныйСертификат"	, ДанныеСертификата.ПодарочныйСертификат);
		Запрос.УстановитьПараметр("СерийныйНомер"			, ДанныеСертификата.СерийныйНомер);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтруктураОтвета.GiftCard.GiftCardName = Строка(Выборка.ПодарочныйСертификат);
			СтруктураОтвета.GiftCard.GiftCardRef  = XMLСтрока(Выборка.ПодарочныйСертификат);
			СтруктураОтвета.GiftCardNumber 		  = Строка(Выборка.НомерСертификата);
			СтруктураОтвета.GiftCardValue 		  = Выборка.Номинал;
			СтруктураОтвета.GiftCardBalance 	  = Выборка.Остаток;
			СтруктураОтвета.Blocked				  = Выборка.Заблокирован;
			
			ЗаблокироватьПодарочныйСертификат(ДанныеСертификата, ТекущаяДатаСеанса()); 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные о состоянии промокода
//
// Параметры:
//  ДанныеПромокода - Структура - содержит данные подарочного сертификата.
//  СтруктураОтвета - Структура - содержит данные о балансе сертификата,
//                                см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//  РезервироватьПромокод - Булево - резервировать применение промокода.
//
Процедура ПолучитьСостояниеПромокода(ДанныеПромокода, СтруктураОтвета, РезервироватьПромокод) Экспорт
	
	Промокод = ДанныеПромокода.Промокод;
	
	ТекстОшибки = "";
	ДоступноПрименений = РегистрыНакопления.ДоступностьПромокодов.ДоступноПримененийПромокода(Промокод,, ТекстОшибки);
	Если ДоступноПрименений = Неопределено Тогда
		ПромокодДоступен = Ложь;
	Иначе
		ПромокодДоступен = ДоступноПрименений > 0;
	КонецЕсли;
	ТекстОписаниеСостояния = ?(ПромокодДоступен, "", ТекстОшибки);
	
	СтруктураОтвета.PromocodeIsAvalible   = ПромокодДоступен;
	СтруктураОтвета.PromocodeStatus   	  = Строка(ТекстОписаниеСостояния);
	СкидкиНаценкиПромокодов = ПромокодыУНФ.СкидкиПромокодов(Промокод);
	СкидкаПоПромокоду = СкидкиНаценкиПромокодов[Промокод];
	Если ЗначениеЗаполнено(СкидкаПоПромокоду) Тогда
		СтруктураСсылкиСкидкаНаценка = ПолучитьСтруктуруСсылки(СкидкаПоПромокоду);
		СтруктураОтвета.PromocodeDiscountDescription = СтруктураСсылкиСкидкаНаценка.Name;
		СтруктураОтвета.PromocodeDiscount = СтруктураСсылкиСкидкаНаценка;
	КонецЕсли;
	
	Если РезервироватьПромокод Тогда
		СведенияОПромокоде = ПромокодыУНФ.СостояниеПромокодов(Промокод);
		Если СведенияОПромокоде.Количество() > 0 Тогда
			Если СведенияОПромокоде.Получить(Промокод).Конечный Тогда
				
				СерверЛояльностиПоставщикДанных.ЗарезервироватьПрименениеПромокода(Промокод);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Получает код валюты
//
// Параметры:
//  КодВалюты - Строка - код валюты.
//
Процедура ПолучитьКодВалюты(КодВалюты = "") Экспорт
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	КодВалюты = ВалютаУчета.Код;
	
КонецПроцедуры

// Блокирует подарочный сертификат после ответа сервера лояльности с целью предотвращения двойного списания баланса
//
// Параметры:
//  ДанныеСертификата - Структура - содержит ссылки на подарочный сертификат и его серийный номер.
//  ДатаБлокировки    - Дата - дата и время в момент блокировки сертификата.
//
Процедура ЗаблокироватьПодарочныйСертификат(ДанныеСертификата, ДатаБлокировки) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеПодарочныхСертификатовСерверЛояльности");
	ЭлементБлокировки.УстановитьЗначение("СерийныйНомер", ДанныеСертификата.СерийныйНомер);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СостояниеПодарочныхСертификатовСерверЛояльности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПодарочныйСертификат.Установить(ДанныеСертификата.ПодарочныйСертификат);
		НаборЗаписей.Отбор.СерийныйНомер.Установить(ДанныеСертификата.СерийныйНомер);
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ДанныеСертификата);
		ЗаписьРегистра.ДатаБлокировки = ДатаБлокировки;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Десериализует параметры расчета автоматических скидок, полученными в формате JSON
//
// Параметры:
//  ВходящиеДанные - Строка - содержит строковое значение тела запроса в формате JSON.
//  Результат - Структура - структура данных с десереализованными параметрами расчета автоматических скидок.
//    * ВходныеПараметры				 - Структура
//       * ТолькоПредварительныйРасчет - Булево
//    * Товары							 - ТаблицаЗначений
//    * ВалютаУправленческогоУчета		 - Константы.ВалютаУчета
//    * ВариантСовместногоПрименения	 - Константы.ВариантыСовместногоПримененияСкидокНаценок
//    * Пользователь					 - Неопределено
//    * ТекущаяДата						 - Дата
//    * Дата							 - Дата
//    * ТолькоСообщенияПослеОформления	 - Булево
//    * Регистратор						 - ДокументСсылка.ЧекККМ
//    * Ссылка							 - ДокументСсылка.ЧекККМ
//    * СуммаВключаетНДС				 - Булево
//    * СкидкиРассчитаны				 - Булево
//    * ДисконтнаяКарта					 - ОпределяемыйТип.ДисконтнаяКартаРМК
//    * ВидДисконтнойКарты				 - Неопределено
//    * Контрагент						 - Неопределено
//    * ПроцентСкидкиПоДисконтнойКарте	 - Число
//    * Магазин							 - Неопределено
//    * ВалютаДокумента					 - Неопределено
//    * СкидкиНаценки					 - ТаблицаЗначенией - 
//											см. СкидкиНаценкиСерверПереопределяемый.ПолучитьТаблицуСкидокНаценок
//    * ВидЦен							 - СправочникСсылка.ВидыЦен
//    * ВалютаДокумента					 - СправочникСсылка.Валюта
//
Процедура ДесериализоватьПараметрыРасчета(ВходящиеДанные, Результат) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь);
	ПараметрыРасчета.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ВходящиеДанные);
		ВходящиеДанныеВJSON = ПрочитатьJSON(ЧтениеJSON, , "CurrentDate", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		Если ПроверитьКорректностьВходящихДанных(ВходящиеДанныеВJSON, ПараметрыРасчета) Тогда
			
			Регистратор = Документы.ЧекККМ.ПустаяСсылка();
			ДисконтнаяКарта = Неопределено;
			ПолучитьДисконтнуюКарту(ВходящиеДанныеВJSON, "LoyaltyCardsList", ДисконтнаяКарта);
			
			ВходныеПараметры = Новый Структура;
			ВходныеПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
			
			// Бонусная программа
			Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
				РеквизитыБП = РаботаСБонусами.РеквизитыБонуснойПрограммы(ДисконтнаяКарта);
				Если ЗначениеЗаполнено(РеквизитыБП.БонуснаяПрограмма) Тогда
					ВходныеПараметры.Вставить("БонуснаяПрограмма", РеквизитыБП.БонуснаяПрограмма);
					ВходныеПараметры.Вставить("ПрименятьКОбъекту", Истина);
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыРасчета.Вставить("Товары", ПолучитьДесериализованнуюТаблицуТоваров(ВходящиеДанныеВJSON, "Goods"));
			ПараметрыРасчета.Вставить("ПромокодыСкидок", ПолучитьДесериализованнуюТаблицуПромокодов(ВходящиеДанныеВJSON, "PromocodesList"));
			ПараметрыРасчета.Вставить("ВыбранныеУправляемыеСкидки", ПолучитьДесериализованнуюТаблицуВыбранныхУправляемыхСкидок(ВходящиеДанныеВJSON, "ControlledDiscountsList"));
			ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУчета.Получить());
			ПараметрыРасчета.Вставить("ВариантСовместногоПрименения", Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить());
			ПараметрыРасчета.Вставить("Пользователь", Неопределено);
			ПараметрыРасчета.Вставить("ТекущаяДата", ВходящиеДанныеВJSON.CurrentDate);
			ПараметрыРасчета.Вставить("Дата", ВходящиеДанныеВJSON.CurrentDate);
			ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления", Ложь);
			ПараметрыРасчета.Вставить("Регистратор", Регистратор);
			ПараметрыРасчета.Вставить("Ссылка", Регистратор);
			ПараметрыРасчета.Вставить("СуммаВключаетНДС", Истина);
			ПараметрыРасчета.Вставить("СкидкиРассчитаны", Ложь);
			ПараметрыРасчета.Вставить("ДисконтнаяКарта", ДисконтнаяКарта);
			ПараметрыРасчета.Вставить("ГраницаДокумента", Новый Граница(ВходящиеДанныеВJSON.CurrentDate, ВидГраницы.Исключая));
			
			Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
				ПараметрыРасчета.Вставить("ВидДисконтнойКарты", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "Владелец"));
				ПараметрыРасчета.Вставить("Контрагент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВладелецКарты"));
				ПараметрыРасчета.Вставить("ДатаРождения", СкидкиНаценкиСервер.БлижайшаяДатаЕжегодногоСобытия(ПараметрыРасчета.Контрагент.ДатаРождения, ВходящиеДанныеВJSON.CurrentDate));
				ПараметрыРасчета.Вставить("ПроцентСкидкиПоДисконтнойКарте", ПараметрыРасчета.ВидДисконтнойКарты.Скидка);
			Иначе
				ПараметрыРасчета.Вставить("ВидДисконтнойКарты", Справочники.ВидыДисконтныхКарт.ПустаяСсылка());
				ПараметрыРасчета.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
				ПараметрыРасчета.Вставить("ДатаРождения", Дата(1,1,1));
				ПараметрыРасчета.Вставить("ПроцентСкидкиПоДисконтнойКарте", 0);
			КонецЕсли;
			
			ПараметрыРасчета.Вставить("Магазин", СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "RetailStore", "Справочники.СтруктурныеЕдиницы"));
			
			Если ЗначениеЗаполнено(ПараметрыРасчета.Магазин	) Тогда 
				ПараметрыРасчета.Вставить("ВидЦен", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыРасчета.Магазин, "РозничныйВидЦен"));
				ПараметрыРасчета.Вставить("ВалютаДокумента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыРасчета.ВидЦен, "ВалютаЦены"));
				
			Иначе
				ПараметрыРасчета.Вставить("ВидЦен", Справочники.ВидыЦен.ПустаяСсылка());
				ПараметрыРасчета.Вставить("ВалютаДокумента", ПараметрыРасчета.ВалютаУправленческогоУчета);
			КонецЕсли;
			
			ПараметрыРасчета.Вставить("СкидкиНаценки", СкидкиНаценкиСерверПереопределяемый.ПолучитьТаблицуСкидокНаценок(ПараметрыРасчета, ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Розница")));
			ПараметрыРасчета.Вставить("ВходныеПараметры", ВходныеПараметры);
			
			ПараметрыРасчета.Вставить("ВернутьДанныеКарты", Ложь);
			Если ВходящиеДанныеВJSON.Свойство("GetLoyaltyCardData") Тогда
				ПараметрыРасчета.ВернутьДанныеКарты = ВходящиеДанныеВJSON.GetLoyaltyCardData;
			КонецЕсли;
			ПараметрыРасчета.Вставить("БлокироватьКарту", "0");
			Если ВходящиеДанныеВJSON.Свойство("BlockBonuses") Тогда
				ПараметрыРасчета.БлокироватьКарту = ВходящиеДанныеВJSON.BlockBonuses;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка преобразования тела запроса по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыРасчета.ЕстьОшибки = Истина;
		ПараметрыРасчета.ОписаниеОшибки = ОписаниеОшибки;
		
		ЗаписьЖурналаРегистрации("СерверЛояльности.АвтоматическийРасчетСкидок", , , , ОписаниеОшибки);
		
	КонецПопытки;
	
	Результат = ПараметрыРасчета;
	
КонецПроцедуры

// Проверяет подарочный сертификат на факт продажи/списания.
//
// Параметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры подарочного сертификата:
//   * НомерСертификата - Строка - номер подарочного сертификата.
//  СтруктураОтвета - Структура - структура, содержащая в себе параметры ответа:
//   * GiftCardUsed - Булево - признак того, что подарочный сертификат был уже использован ранее.
//
Процедура ПроверитьПодарочныйСертификат(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	Если ТипЗнч(ПараметрыМетода) = Тип("Структура") И Не ПараметрыМетода.Свойство("НомерСертификата") Тогда
		Возврат;
	КонецЕсли;
	
	СерийныйНомер = ПолучитьСерийныйНомерСертификата(ПараметрыМетода.НомерСертификата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодарочныеСертификатыОбороты.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ПодарочныеСертификатыОбороты.НомерСертификата КАК НомерСертификата,
		|	ПодарочныеСертификатыОбороты.СуммаОборот КАК СуммаОборот,
		|	ПодарочныеСертификатыОбороты.СуммаПриход КАК СуммаПриход,
		|	ПодарочныеСертификатыОбороты.СуммаРасход КАК СуммаРасход
		|ИЗ
		|	РегистрНакопления.ПодарочныеСертификаты.Обороты(
		|			,
		|			,
		|			,
		|			НомерСертификата = &СерийныйНомер) КАК ПодарочныеСертификатыОбороты";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураОтвета.GiftCardUsed = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные об использовании автоматических скидок
//
// Параметры:
//  Результат - Булево - Истина, автоматические скидки используются,
//						 Ложь, автоматические скидки не используются.
//
Процедура ИспользоватьАвтоматическиеСкидки(Результат) Экспорт
	
	Результат = Константы.ЕстьАвтоматическиеСкидки.Получить();
	
КонецПроцедуры

// Рассчитывает автоматические скидки
//
// Параметры:
//  ПараметрыРасчета - Структура - см. ДесериализоватьПараметрыРасчета().
//  Результат - Структура - структура данных с рассчитанными автоматическими скидками.
//
Процедура РассчитатьАвтоматическиеСкидки(ПараметрыРасчета, Результат) Экспорт
	
	СтруктураСкидок = СкидкиНаценкиСервер.РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ПараметрыРасчета.ВходныеПараметры);
	
	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ПараметрыРасчета, "Товары", СтруктураСкидок.ТаблицаСкидкиНаценки);
	СериализованнаяСтруктураСкидок = СериализоватьРезультатРасчета(ПараметрыРасчета, "Товары");
	ТаблицаПодарков = СтруктураСкидок.ТаблицаПодарков;
	ТаблицаСообщений = СтруктураСкидок.ТаблицаСообщений;
	ТаблицаСообщенийПослеОформления = СкидкиНаценкиСервер.ПолучитьТаблицуСообщений(СтруктураСкидок.ТаблицаСкидкиНаценки, Перечисления.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека);
	
	Если СтруктураСкидок.Свойство("ТаблицаСкидкиНаценки") Тогда
		ТаблицаСкидкиНаценки = СтруктураСкидок.ТаблицаСкидкиНаценки;
		
		// Заполним связь скидки со строкой таблицы товаров
		ТаблицаСкидкиНаценки.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(36)));
		Для Каждого СтрокаСкидки Из ТаблицаСкидкиНаценки Цикл
			Если ЗначениеЗаполнено(СтрокаСкидки.КлючСвязи) Тогда // Иначе, идентификатор строки не требуется
				СтрокиТоваровСкидки = ПараметрыРасчета.Товары.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаСкидки.КлючСвязи));
				Если СтрокиТоваровСкидки.Количество() Тогда
					СтрокаСкидки.ИдентификаторСтроки = СтрокиТоваровСкидки[0].ИдентификаторСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДополнитьСтруктуруСкидокТаблицейСкидокНаценок(СериализованнаяСтруктураСкидок, ТаблицаСкидкиНаценки);
		
		СработавшиеСкидки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаСкидкиНаценки.ВыгрузитьКолонку("СкидкаНаценка"));
		ПромокодыПереопределяемый.ОтметитьСработавшиеПромокоды(ПараметрыРасчета.ПромокодыСкидок, СработавшиеСкидки);
		ПромокодыПереопределяемый.ДобавитьПромокодыКВыдаче(ПараметрыРасчета.ПромокодыСкидок, ТаблицаСкидкиНаценки);
		ДополнитьСтруктуруСкидокТаблицейПромокодов(СериализованнаяСтруктураСкидок, ПараметрыРасчета.ПромокодыСкидок);
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ТаблицаБонусыКНачислению") Тогда
		ДополнитьСтруктуруСкидокТаблицейБонусов(СериализованнаяСтруктураСкидок, СтруктураСкидок.ТаблицаБонусыКНачислению);
	КонецЕсли;
	
	Если ТаблицаПодарков.Количество() <> 0 Тогда
		ДополнитьСтруктуруСкидокПодарками(СериализованнаяСтруктураСкидок, ТаблицаПодарков);
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ДеревоСкидок") Тогда
		ТаблицаСкидок = Новый ТаблицаЗначений;
		ТаблицаСкидок = ДеревоЗначенийВТаблицуЗначений(СтруктураСкидок.ДеревоСкидок);
		ДополнитьСтруктуруСкидокДействующимиСкидками(СериализованнаяСтруктураСкидок, ТаблицаСкидок);
	КонецЕсли;
	
	Если ТаблицаСообщений.Количество() > 0 Или ТаблицаСообщенийПослеОформления.Количество() > 0 Тогда
		Для каждого СтрокаТаблицы Из ТаблицаСообщенийПослеОформления Цикл
			НоваяСтрока = ТаблицаСообщений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		ДополнитьСтруктуруСкидокСообщениями(СериализованнаяСтруктураСкидок, ТаблицаСообщений);
	КонецЕсли;
	
	Если ПараметрыРасчета.ВернутьДанныеКарты Тогда
		ДополнитьСтруктуруСкидокДаннымиКарты(СериализованнаяСтруктураСкидок, ПараметрыРасчета.ДисконтнаяКарта);
	КонецЕсли;
	
	Результат = СериализованнаяСтруктураСкидок;
	
КонецПроцедуры

// Заполняет организацию по умолчанию
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК
//
Процедура ЗаполнитьОрганизациюПоУмолчанию(Организация) Экспорт
	
	Организация = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	
КонецПроцедуры

// Возвращает структуру данных о текущих запретах продаж
//
// Параметры:
//  ПараметрыМетода - Структура - набор параметров для получения данных о запретах продаж
//  Результат - Структура, Неопределено - седоржит данные о запретах продаж
//										  см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруЗапретаПродаж
//
Процедура ДанныеОЗапретахПродаж(ПараметрыМетода, Результат) Экспорт
	
	// Формируем структуру ответа
	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("AllowControl", Истина);
	МассивЗапретов = Новый Массив;
	
	Организация = Неопределено;
	ЗаполнитьОрганизациюПоУмолчанию(Организация);
	СтруктураЗапретаПродаж = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруЗапретаПродаж(Организация, Неопределено);
	СтруктураОтвета.Вставить("RestrictionsList", МассивЗапретов);
	
	Результат = СтруктураОтвета;
	
КонецПроцедуры

// Заполняет полученную структуру реквизитов именами реквизитов документа продажи (ЧекККМ)
//
// Параметры:
//  ИменаРеквизитов - Неопределено, Структура:
//    * ИмяРеквизитаДисконтнаяКарта - Строка
//    * ИмяРеквизитаТаблицаОплата - Строка
//    * ИмяРеквизитаПодарочныйСертификат - Строка
//    * ИмяРеквизитаСерийныйНомер - Строка
//    * ИмяРеквизитаСуммаБонусов - Строка
//    * ИмяРеквизитаТаблицаПогашенияСертификатов - Строка
//    * ИмяРеквизитаСуммаПогашенияСертификата - Строка
//
Процедура ЗаполнитьИменаРеквизитовПоставщикаДанных(ИменаРеквизитов) Экспорт
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("ИмяРеквизитаДисконтнаяКарта", "ДисконтнаяКарта");
	ИменаРеквизитов.Вставить("ИмяРеквизитаТаблицаОплата", "БезналичнаяОплата");
	ИменаРеквизитов.Вставить("ИмяРеквизитаПодарочныйСертификат", "ПодарочныйСертификат");
	ИменаРеквизитов.Вставить("ИмяРеквизитаСерийныйНомер", "НомерСертификата");
	
	ИменаРеквизитов.Вставить("ИмяРеквизитаСуммаБонусов", "СуммаБонусов");
	
	ИменаРеквизитов.Вставить("ИмяРеквизитаТаблицаПогашенияСертификатов", "БезналичнаяОплата");
	ИменаРеквизитов.Вставить("ИмяРеквизитаСуммаПогашенияСертификата", "СуммаПогашенияСертификата");
	
КонецПроцедуры

// Заполняет список управляемых скидок
//
// Параметры:
//  Результат - Неопределено, ТаблицаЗначений - возвращаемое значение
//
Процедура ЗаполнитьТаблицуУправляемыхСкидок(Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыСкидокНаценок.Ссылка КАК СкидкаНаценка,
	|	ВидыСкидокНаценок.Процент КАК ЗначениеСкидки,
	|	ВидыСкидокНаценок.Представление КАК Представление,
	|	""Ручная"" КАК ТипСкидки,
	|	""На документ"" КАК ОбластьДействия
	|ИЗ
	|	Справочник.ВидыСкидокНаценок КАК ВидыСкидокНаценок
	|ГДЕ
	|	НЕ ВидыСкидокНаценок.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыСкидокНаценок.Ссылка,
	|	ВидыСкидокНаценок.Процент,
	|	ВидыСкидокНаценок.Представление,
	|	""Ручная"",
	|	""На строку""
	|ИЗ
	|	Справочник.ВидыСкидокНаценок КАК ВидыСкидокНаценок
	|ГДЕ
	|	НЕ ВидыСкидокНаценок.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкаНаценка.Ссылка,
	|	ВЫБОР
	|		КОГДА СкидкаНаценка.СпособПредоставления В (ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов))
	|			ТОГДА СкидкаНаценка.ЗначениеСкидкиНаценки
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(СкидкаНаценка.СпособПредоставления)
	|	КОНЕЦ,
	|	СкидкаНаценка.Представление,
	|	""Автоматическая"",
	|	ВЫБОР
	|		КОГДА
	|			ПараметрыУсловий.ОбластьОграничения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе)
	|			ТОГДА ""На документ""
	|		ИНАЧЕ ""На строку""
	|	КОНЕЦ
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК СкидкаНаценка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки.УсловияПредоставления КАК УсловияСкидок
	|		ПО СкидкаНаценка.Ссылка = УсловияСкидок.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК ПараметрыУсловий
	|		ПО (УсловияСкидок.УсловиеПредоставления = ПараметрыУсловий.Ссылка)
	|ГДЕ
	|	СкидкаНаценка.Действует
	|	И НЕ СкидкаНаценка.ПометкаУдаления
	|	И СкидкаНаценка.ЕстьУсловияАктивацииВручную
	|	И ПараметрыУсловий.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаАктивациюВручную)";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "ИдентификаторСкидки") Тогда
			НоваяСтрока.ИдентификаторСкидки = Строка(Выборка.СкидкаНаценка.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными найденных карт
//
// Параметры:
//  ПараметрыМетода - Структура - структура, содержащая в себе параметры поиска карт:
//    * ИдентификаторКартыКлиента - Строка - код карты лояльности
//    * НомерТелефона - Строка - номер телефона или последняя часть номера телефона для поиска
//    * АдресЭП - Строка - адрес электронной почты владельца карты для поиска
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура НайтиКартыЛояльности(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	КартаКлиента = ПолучитьКартуПоУникальномуИдентификатору(ПараметрыМетода.УникальныйИдентификаторКарты);
	ВладелецКарты
		= ПолучитьВладельцаКартыПоУникальномуИдентификатору(ПараметрыМетода.УникальныйИдентификаторВладельцаКарты);
	Если ЗначениеЗаполнено(КартаКлиента) Тогда
		НайтиКартуЛояльностиПоСсылке(КартаКлиента, СтруктураОтвета);
	КонецЕсли;
	Если СтруктураОтвета.LoyaltyCardsList.Количество() = 0 И ЗначениеЗаполнено(ВладелецКарты) Тогда
		НайтиКартуЛояльностиПоВладельцу(ВладелецКарты, СтруктураОтвета);
	КонецЕсли;
	Если СтруктураОтвета.LoyaltyCardsList.Количество() = 0
			И ЗначениеЗаполнено(ПараметрыМетода.ИдентификаторКартыКлиента) Тогда
		НайтиКартуЛояльностиПоНомеруКарты(ПараметрыМетода.ИдентификаторКартыКлиента, СтруктураОтвета);
	КонецЕсли;
	Если СтруктураОтвета.LoyaltyCardsList.Количество() = 0 Тогда
		СтрокаПоискаТелефона = ПодготовитьСтрокуПоискаПоНомеруТелефона(ПараметрыМетода.НомерТелефона);
		Если СтрокаПоискаТелефона <> "" Или ПараметрыМетода.АдресЭП <> "" Тогда
			НайтиКартыЛояльностиПоКонтактнойинформации(СтрокаПоискаТелефона, ПараметрыМетода.АдресЭП, СтруктураОтвета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет карту лояльности клиента
//
// Параметры:
//  СтрокаУникальногоИдентификатора - Строка - уникальный идентификатор карты,
//  КартаКлиента - СправочникСсылка.ДисконтныеКарты - карта клиента
//
Процедура ПолучитьКартуКлиентаПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора, КартаКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	КартаКлиента
		= Справочники.ДисконтныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора));
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса номерами и уникальным идентификатором дисконтной карты
//
// Параметры:
//  КартаКлиента - СправочникСсылка.ДисконтныеКарты - карта клиента
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьСтруктуруОтветаНомерамиКарты(КартаКлиента, СтруктураОтвета) Экспорт

	НомераКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КартаКлиента, "КодКартыШтрихкод,КодКартыМагнитный");
	
	СтруктураОтвета.CardRef = XMLСтрока(КартаКлиента);
	СтруктураОтвета.Barcode = НомераКарты.КодКартыШтрихкод;
	СтруктураОтвета.MagneticCode = НомераКарты.КодКартыМагнитный;
	
КонецПроцедуры

// Заполняет список видов карт
//
// Параметры:
//  Результат - Неопределено, ТаблицаЗначений - возвращаемое значение
//
Процедура ЗаполнитьТаблицуВидовКарт(Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидКарты = Константы.ВидКартыСерверЛояльности.Получить();
	
	Если ЗначениеЗаполнено(ВидКарты) Тогда 
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Идентификатор	= Строка(ВидКарты.Ссылка.УникальныйИдентификатор());
		НоваяСтрока.Наименование	= ВидКарты.Наименование;
		НоваяСтрока.ЭтоИменнаяКарта	= ВидКарты.ЭтоИменнаяКарта;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДисконтныхКарт.Ссылка КАК Ссылка,
		|	ВидыДисконтныхКарт.Наименование КАК Наименование,
		|	ВидыДисконтныхКарт.ЭтоИменнаяКарта КАК ЭтоИменнаяКарта
		|ИЗ
		|	Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
		|ГДЕ
		|	НЕ ВидыДисконтныхКарт.ПометкаУдаления";

		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет структуру ответа Сервера лояльности данными об оборотах продаж
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - 
//                    карта лояльности, по которой будут заполнены данные о бонусах
//  СтруктураОтвета - Структура - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ЗаполнитьДанныеОбОборотахПродаж(ДисконтнаяКарта, СтруктураОтвета) Экспорт
	
	ОборотыПродаж = ПолучитьОборотыПродажКлиента(ДисконтнаяКарта);
	СтруктураОтвета.SellCount = ОборотыПродаж;
	
КонецПроцедуры

// Возвращает обороты продаж клиента
//
// Параметры: 
//  ДисконтнаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//
// Возвращаемое значение:
//  Оборот - Число - Оборот продаж клиента
//
Функция ПолучитьОборотыПродажКлиента(ДисконтнаяКарта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПродажиПоДисконтнымКартамОбороты.СуммаОборот КАК СуммаОборот
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(, , , ДисконтнаяКарта = &ДисконтнаяКарта) КАК ПродажиПоДисконтнымКартамОбороты";
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СуммаОборот;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает номер дисконтной карты
//
// Параметры:
//  ДисконтнаяКарта - ОпределяемыйТип.ДисконтнаяКартаРМК
//
// Возвращаемое значение:
//  Число
//
Функция ПолучитьНомерКарты(ДисконтнаяКарта)
	
	Если ДисконтнаяКарта.Владелец.ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
		НомерКарты = ДисконтнаяКарта.КодКартыШтрихкод;
	Иначе
		НомерКарты = ДисконтнаяКарта.КодКартыМагнитный;
	КонецЕсли;
	
	Возврат НомерКарты;
	
КонецФункции

// Возвращает аресЭП владельца карты
//
// Параметры:
//  ВладелецКарты - ОпределяемыйТип.КонтрагентСерверЛояльности
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьАдресЭПВладельца(ВладелецКарты)
	
	АдресЭП = "";
	
	Если ВладелецКарты = Неопределено Тогда 
		Возврат АдресЭП
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецКарты.АдресЭПДляПоиска) Тогда 
		АдресЭП = ВладелецКарты.АдресЭПДляПоиска;
	Иначе 
		Для Каждого СтрокаКИ Из ВладелецКарты.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда 
				АдресЭП = СтрокаКИ.Представление;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресЭП;
	
КонецФункции

// Возвращает номер телефона владельца карты
//
// Параметры:
//  ВладелецКарты - ОпределяемыйТип.КонтрагентСерверЛояльности - владелец карты лояльности.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьНомерТелефонаВладельца(ВладелецКарты)
	
	НомерТелефона = "";
	
	Если ВладелецКарты = Неопределено Тогда
		Возврат НомерТелефона
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецКарты.НомерТелефонаДляПоиска) Тогда 
		НомерТелефона = ВладелецКарты.НомерТелефонаДляПоиска;
	Иначе 
		Для Каждого СтрокаКИ Из ВладелецКарты.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда 
				НомерТелефона = СтрокаКИ.Представление;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

// Возвращает дату рождения владельца карты
//
// Параметры:
//  ВладелецКарты - ОпределяемыйТип.КонтрагентСерверЛояльности - владелец карты лояльности.
//
// Возвращаемое значение:
//  Дата
//
Функция ПолучитьДатуРожденияВладельца(ВладелецКарты)
	
	ДатаРождения = Дата(1,1,1);
	
	Если ВладелецКарты = Неопределено Тогда
		Возврат ДатаРождения
	КонецЕсли;
	
	ДатаРождения = ВладелецКарты.ДатаРождения;
	
	Возврат ДатаРождения;
	
КонецФункции

// Получает дисконтную карту
//
// Параметры:
//  ВходящиеДанные - Структура - структура, содержащая в себе параметры http-запроса.
//  ИмяПараметра - Строка - имя параметра, в котором содержится искомая дисконтная карта.
//  Результат - Неопределено, ОпределяемыйТип.ДисконтнаяКартаРМК - найденная дисконтная карта.
//
Процедура ПолучитьДисконтнуюКарту(ВходящиеДанные, ИмяПараметра, Результат)
	
	ДисконтнаяКарта = Справочники.ДисконтныеКарты.ПустаяСсылка();
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Структура") И ВходящиеДанные.Свойство(ИмяПараметра) Тогда
		
		МассивНомеровКарт = ВходящиеДанные[ИмяПараметра];
		
		Если ЗначениеЗаполнено(МассивНомеровКарт) Тогда
			
			ПараметрыПоискаКарты = Новый Структура;
			ПараметрыПоискаКарты.Вставить("ИдентификаторКартыКлиента", МассивНомеровКарт[0]);
			ПараметрыПоискаКарты.Вставить("Клиент", "");
			ПараметрыПоискаКарты.Вставить("НомерТелефона", "");
			ПараметрыПоискаКарты.Вставить("АдресЭП", "");
			
			НайденнаяКарта = Неопределено;
			НайтиКартуКлиента(ПараметрыПоискаКарты, НайденнаяКарта);
			Если НайденнаяКарта <> Неопределено Тогда
				ДисконтнаяКарта = НайденнаяКарта;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ДисконтнаяКарта;
	
КонецПроцедуры 

// Ищет клиента по наименованию
// 
// Параметры:
//  ДанныеКарты - Структура - структура, содержащая данные карты лояльности
//    * ИдентификаторКартыКлиента	 - Строка - код карты лояльности
//    * Клиент						 - Строка - ФИО владельца карты
//    * АдресЭП						 - Строка - адрес электронной почты владельца карты
//    * НомерТелефона				 - Строка - номер телефона владельца карты
//
// Возвращаемое значение:
//  Структура - результат поиска/ создания владельца карты
//    * ВладелецКарты - ОпределяемыйТип.КонтрагентСерверЛояльности - владелец карты лояльности
//    * СтатусПолучения - Строка - возможные значения: "создан", "найден", "занят"-(найден похожий, но другой клиент)
//
Функция ПолучитьВладельцаКарты(ДанныеКарты) Экспорт
	
	РезультатФункции = Новый Структура("ВладелецКарты,СтатусПолучения", Неопределено, "");
	
	ОбратныйНомер = Справочники.Контрагенты.ПолучитьОбратныйНомерТелефонаБезКодаСтраны(ДанныеКарты.НомерТелефона);
	Запрос = Новый Запрос;
	Если ДанныеКарты.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеКарты.Контрагент) Тогда
		РезультатФункции.Вставить("ВладелецКарты", ДанныеКарты.Контрагент);
		РезультатФункции.Вставить("СтатусПолучения", "найден");
	ИначеЕсли ЗначениеЗаполнено(ОбратныйНомер) Тогда
		Запрос.Текст = ТекстЗапросаКлиентаПоОбратномуНомеруТелефона();
		Запрос.УстановитьПараметр("ОбратныйНомер", ОбратныйНомер);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РезультатФункции.Вставить("ВладелецКарты", Выборка.Клиент);
			РезультатФункции.Вставить("СтатусПолучения", "найден");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДанныеКарты.АдресЭП) Тогда
		Запрос.Текст = ТекстЗапросаКлиентаСТелефономПоАдресуЭП();
		Запрос.УстановитьПараметр("АдресЭП", ДанныеКарты.АдресЭП);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РезультатФункции.Вставить("ВладелецКарты", Выборка.Клиент);
			Если Выборка.ОбратныйНомерТелефона = "" Тогда
				РезультатФункции.Вставить("СтатусПолучения", "найден");
			Иначе
				РезультатФункции.Вставить("СтатусПолучения", "занят");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатФункции.ВладелецКарты = Неопределено Тогда
		ВладелецКарты = СоздатьВладельцаКарты(ДанныеКарты);
		РезультатФункции.Вставить("ВладелецКарты", ВладелецКарты);
		РезультатФункции.Вставить("СтатусПолучения", "создан");
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПроверитьКорректностьВходящихДанных(ВходящиеДанные, ПараметрыРасчета)
	
	МассивПроверяемыхПараметров = МассивОбязательныхПараметровРасчетаСкидок();
	
	Для каждого ПроверяемыйПараметр Из МассивПроверяемыхПараметров Цикл
		Если Не ВходящиеДанные.Свойство(ПроверяемыйПараметр) Тогда 
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Во входящих параметрах не обнаружен параметр %1'"), ПроверяемыйПараметр);
			ПараметрыРасчета.ОписаниеОшибки = ПараметрыРасчета.ОписаниеОшибки + ОписаниеОшибки + ?(ПустаяСтрока(ПараметрыРасчета.ОписаниеОшибки), "", Символы.ПС);
			ПараметрыРасчета.ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не ПараметрыРасчета.ЕстьОшибки;
	
КонецФункции

Функция МассивОбязательныхПараметровРасчетаСкидок()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("ObjectTime");
	МассивПараметров.Добавить("LoyaltyCardsList");
	МассивПараметров.Добавить("Goods");
	МассивПараметров.Добавить("RetailStore");
	
	Возврат МассивПараметров;
	
КонецФункции

Функция ПолучитьДесериализованнуюТаблицуТоваров(ВходящиеДанные, ИмяПараметра)
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧислоДляКоличества = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,3));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТаблицаТоваров.Колонки.Добавить("ВидМинимальныхЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповЧислоДляКоличества);
	ТаблицаТоваров.Колонки.Добавить("КоличествоВБазовыхЕдиницах", ОписаниеТиповЧислоДляКоличества);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидкиНаценки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидкиНаценки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидкиОплатыБонусом", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Всего", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	
	МассивСтрокТаблицы = ВходящиеДанные[ИмяПараметра];
	
	НомерСтроки = 1;
	
	Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Item", "Справочники.Номенклатура");
		НоваяСтрока.ЕдиницаИзмерения = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Package", "Справочники.ЕдиницыИзмерения");
		НоваяСтрока.Характеристика = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Variant", "Справочники.ХарактеристикиНоменклатуры");
		НоваяСтрока.Цена = СтрокаТаблицы.Price;
		НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
		НоваяСтрока.Количество = СтрокаТаблицы.Count;
		НоваяСтрока.КоличествоВБазовыхЕдиницах = СтрокаТаблицы.PackagesCount;
		НоваяСтрока.СтавкаНДС = СтавкаНДСПоНаименованию(СтрокаТаблицы.VATRate);
		НоваяСтрока.ПроцентАвтоматическойСкидки = СтрокаТаблицы.PercentOfAutomaticDiscount;
		НоваяСтрока.ПроцентСкидкиНаценки = СтрокаТаблицы.PercentOfManualDiscount;
		НоваяСтрока.СуммаАвтоматическойСкидки = СтрокаТаблицы.AmountOfAutomaticDiscount;
		НоваяСтрока.СуммаСкидкиНаценки = СтрокаТаблицы.AmountOfManualDiscount;
		НоваяСтрока.Всего = СтрокаТаблицы.TotalAmount;
		НоваяСтрока.СуммаНДС = СтрокаТаблицы.VATAmount;
		НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.LineUID;
		
		НоваяСтрока.КлючСвязи = НомерСтроки;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПолучитьДесериализованнуюТаблицуПромокодов(ВходящиеДанные, ИмяПараметра)
	
	ТаблицаПромокодов = Новый ТаблицаЗначений;
	ТаблицаПромокодов.Колонки.Добавить("Промокод", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ПромокодРМК.Тип));
	ТаблицаПромокодов.Колонки.Добавить("ОписаниеОшибкиПрименения", Новый ОписаниеТипов("Строка"));
	ТаблицаПромокодов.Колонки.Добавить("СкидкаПредоставлена", Новый ОписаниеТипов("Булево"));
	ТаблицаПромокодов.Колонки.Добавить("ЭтоАктивацияПромокода", Новый ОписаниеТипов("Булево"));
	ТаблицаПромокодов.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	ТаблицаПромокодов.Колонки.Добавить("УсловиеПредоставленияСкидки", Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	ТаблицаПромокодов.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	
	МассивСтрокТаблицы = ВходящиеДанные[ИмяПараметра];
	
	Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		
		НоваяСтрока = ТаблицаПромокодов.Добавить();
		НоваяСтрока.Промокод = СтрокаТаблицы.Promocode;
		НоваяСтрока.СкидкаНаценка = Справочники.АвтоматическиеСкидки.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.PromocodeDiscountUID));
		НоваяСтрока.УсловиеПредоставленияСкидки = ПромокодыУНФ.УсловияПримененияПромокодов(СтрокаТаблицы.Promocode).Получить(СтрокаТаблицы.Promocode);
		НоваяСтрока.УникальныйИдентификатор = СтрокаТаблицы.PromocodeUID;
		
	КонецЦикла;
	
	Возврат ТаблицаПромокодов;
	
КонецФункции

Функция ПолучитьДесериализованнуюТаблицуВыбранныхУправляемыхСкидок(ВходящиеДанные, ИмяПараметра)
	
	ТаблицаВыбранныхУправляемыхСкидок = Новый ТаблицаЗначений;
	ТаблицаВыбранныхУправляемыхСкидок.Колонки.Добавить("ИдентификаторСкидки", Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныхУправляемыхСкидок.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.АвтоматическиеСкидки"));
	ТаблицаВыбранныхУправляемыхСкидок.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныхУправляемыхСкидок.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10,0)));
	
	МассивСтрокТаблицы = ВходящиеДанные[ИмяПараметра];
	
	Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		
		НоваяСтрока = ТаблицаВыбранныхУправляемыхСкидок.Добавить();
		НоваяСтрока.ИдентификаторСкидки = СтрокаТаблицы.ControlledDiscountUID;
		НоваяСтрока.СкидкаНаценка = Справочники.АвтоматическиеСкидки.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.ControlledDiscountUID));
		НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.LineUID;
		НоваяСтрока.КлючСвязи = СтрокаТаблицы.KeyRelation;
		
	КонецЦикла;
	
	Возврат ТаблицаВыбранныхУправляемыхСкидок;
	
КонецФункции

Функция СтавкаНДСПоНаименованию(НаименованиеСтавкиНДС)

	Результат = Справочники.СтавкиНДС.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(НаименованиеСтавкиНДС) Тогда
		
		Разделитель = "/";
		ЛитералБезНДС = "без ндс";
		
		Запрос = Новый Запрос();
		
		Если СтрНайти(НРег(НаименованиеСтавкиНДС), ЛитералБезНДС) > 0 Тогда
			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтавкиНДС.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	НЕ СтавкиНДС.ПометкаУдаления
			|	И СтавкиНДС.ВидСтавкиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли СтрНайти(НаименованиеСтавкиНДС, Разделитель) > 0 Тогда
			
			Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НаименованиеСтавкиНДС, Разделитель);
			
			Если Подстроки.Количество() > 0 Тогда
				
				ЗначениеСтавки = СтавкаСтрокойВЧисло(Подстроки[0]);
				
				Запрос.УстановитьПараметр("Ставка", ЗначениеСтавки);
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	СтавкиНДС.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СтавкиНДС КАК СтавкиНДС
				|ГДЕ
				|	НЕ СтавкиНДС.ПометкаУдаления
				|	И СтавкиНДС.Расчетная
				|	И СтавкиНДС.Ставка = &Ставка";
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					Результат = Выборка.Ссылка;
				Иначе
					
					Запрос.Текст = СтрЗаменить(Запрос.Текст,"И СтавкиНДС.Расчетная", "И НЕ СтавкиНДС.Расчетная");
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						Результат = Выборка.Ссылка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ЗначениеСтавки = СтавкаСтрокойВЧисло(НаименованиеСтавкиНДС);
			Запрос.УстановитьПараметр("Ставка", ЗначениеСтавки);
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтавкиНДС.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СтавкиНДС КАК СтавкиНДС
			|ГДЕ
			|	НЕ СтавкиНДС.ПометкаУдаления
			|	И НЕ СтавкиНДС.Расчетная
			|	И СтавкиНДС.Ставка = &Ставка";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтавкаСтрокойВЧисло(СтавкаСтрокой)

	СтавкаСтрокой = СтрЗаменить(СтавкаСтрокой,"%", "");
	СтавкаСтрокой = СокрЛП(СтавкаСтрокой);
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	Возврат ОписаниеТипа.ПривестиЗначение(СтавкаСтрокой);
	
КонецФункции

// Получает действующий вид дисконтной карты по идентификатору
//
// Возвращаемое значение:
//  ВидКарты - СправочникСсылка.ВидыДисконтныхКарт
//
Функция ПолучитьВидДисконтнойКарты(ГУИДВидаКарты = Неопределено) Экспорт
	ВидКарты = Неопределено;
	Если ГУИДВидаКарты = Неопределено Тогда
		ВидКарты = Константы.ВидКартыСерверЛояльности.Получить();
		
		Если Не ЗначениеЗаполнено(ВидКарты) Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ВидыДисконтныхКарт.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
			|ГДЕ
			|	НЕ ВидыДисконтныхКарт.ПометкаУдаления
			|	И ВидыДисконтныхКарт.ЭтоИменнаяКарта";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				ВидКарты = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ГУИДВидаКарты)
				И Не ГУИДВидаКарты = ПустойУникальныйИдентификатор() Тогда
			ВидКарты = Справочники.ВидыДисконтныхКарт.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДВидаКарты));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидКарты;
	
КонецФункции

Функция ПолучитьСерийныйНомерСертификата(НомерСертификата)
	
	Попытка
		
		ГУИД = Новый УникальныйИдентификатор(НомерСертификата);
		СерийныйНомер = Справочники.СерииНоменклатуры.ПолучитьСсылку(ГУИД);
		
	Исключение
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СерииНоменклатуры.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		               |ГДЕ
		               |	СерииНоменклатуры.Наименование = &НомерСертификата
		               |	И НЕ СерииНоменклатуры.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("НомерСертификата", НомерСертификата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СерийныйНомер = Выборка.Ссылка;
		Иначе
			СерийныйНомер = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат СерийныйНомер;
	
КонецФункции

// Сериализует параметры расчета в структуру
//
// Параметры:
// Возвращаемое значение:
//  Структура:
//    *  Item						- Структура - см. ПолучитьСтруктуруСсылки()
//    *  Variant					- Структура - см. ПолучитьСтруктуруСсылки()
//    *  Package					- Структура - см. ПолучитьСтруктуруСсылки()
//    *  Count						- Число
//    *  PackagesCount				- Число
//    *  Price						- Число
//    *  Amount						- Число
//    *  TotalAmount				- Число
//    *  LineUID					- Строка
//    *  VATRate					- Строка
//    *  VATAmount					- Число
//    *  AmountOfAutomaticDiscount	- Число
//    *  AmountOfManualDiscount		- Число
//    *  PercentOfAutomaticDiscount	- Число
//    *  PercentOfManualDiscount	- Число
//
Функция СериализоватьРезультатРасчета(Объект, ИмяТЧ)
	
	ТаблицаТовары = Объект[ИмяТЧ];
	
	СериализованнаяСтруктураСкидок = Новый Структура;
	
	МассивТоваров = Новый Массив;
	
	Для каждого СтрокаТовар Из ТаблицаТовары Цикл
	
		СтруктураСтроки = Новый Структура;
		
		СтруктураСтроки.Вставить("Item", ПолучитьСтруктуруСсылки(СтрокаТовар.Номенклатура));
		СтруктураСтроки.Вставить("Variant", ПолучитьСтруктуруСсылки(СтрокаТовар.Характеристика));
		СтруктураСтроки.Вставить("Package", ПолучитьСтруктуруСсылки(СтрокаТовар.ЕдиницаИзмерения));
		СтруктураСтроки.Вставить("Count", СтрокаТовар.Количество);
		СтруктураСтроки.Вставить("PackagesCount", СтрокаТовар.КоличествоВБазовыхЕдиницах);
		СтруктураСтроки.Вставить("Price", СтрокаТовар.Цена);
		СтруктураСтроки.Вставить("Amount", СтрокаТовар.Сумма);
		СтруктураСтроки.Вставить("TotalAmount", СтрокаТовар.Всего);
		СтруктураСтроки.Вставить("LineUID", СтрокаТовар.ИдентификаторСтроки);
		СтруктураСтроки.Вставить("VATRate", Строка(СтрокаТовар.СтавкаНДС));
		СтруктураСтроки.Вставить("VATAmount", СтрокаТовар.СуммаНДС);
		СтруктураСтроки.Вставить("AmountOfAutomaticDiscount", СтрокаТовар.СуммаАвтоматическойСкидки);
		СтруктураСтроки.Вставить("AmountOfManualDiscount",  СтрокаТовар.СуммаСкидкиНаценки);
		СтруктураСтроки.Вставить("PercentOfAutomaticDiscount",  СтрокаТовар.ПроцентАвтоматическойСкидки);
		СтруктураСтроки.Вставить("PercentOfManualDiscount", СтрокаТовар.ПроцентСкидкиНаценки);
		
		МассивТоваров.Добавить(СтруктураСтроки);
		
	КонецЦикла;
		
	СериализованнаяСтруктураСкидок.Вставить("Goods", МассивТоваров);
	
	Возврат СериализованнаяСтруктураСкидок;
	
КонецФункции

// Возвращает структуру ссылки для последующего ее преобразования в JSON
//
// Параметры:
//  Ссылка - ЛюбаяСсылка
//
// ВозвращаемоеЗначение:
//  Структура:
//    * Ref  - Строка - строковое значение ГУИД переданной ссылки.
//    * Name - Строка - наименование переданной ссылки.
//
Функция ПолучитьСтруктуруСсылки(Ссылка)
	
	СтруктураСсылки = Новый Структура;
	СтруктураСсылки.Вставить("Ref", XMLСтрока(Ссылка));
	СтруктураСсылки.Вставить("Name", Ссылка.Наименование);
	
	Возврат СтруктураСсылки;
	
КонецФункции

// Дополняет сериализованную структуру данными о подарках
//
// Параметры:
//  СериализованнаяСтруктураСкидок - Структура - см. СериализоватьРезультатРасчета()
//  ТаблицаПодарков - ТаблицаЗначений - 
//
// Возвращаемое значение:
//  Структура - содержит в себе данные передаваемого параметра СериализованнаяСтруктураСкидок,
//				дополненного структурой Gifts
//
Процедура ДополнитьСтруктуруСкидокПодарками(СериализованнаяСтруктураСкидок, ТаблицаПодарков)
	
	МассивПодарков = Новый Массив;
	
	Для каждого СтрокаПодарок Из ТаблицаПодарков Цикл
	
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Item", ПолучитьСтруктуруСсылки(СтрокаПодарок.Номенклатура));
		СтруктураСтроки.Вставить("Storage", ПолучитьСтруктуруСсылки(СтрокаПодарок.СтруктурнаяЕдиница));
		СтруктураСтроки.Вставить("Variant", ПолучитьСтруктуруСсылки(СтрокаПодарок.Характеристика));
		СтруктураСтроки.Вставить("Package", ПолучитьСтруктуруСсылки(СтрокаПодарок.ЕдиницаИзмерения));
		СтруктураСтроки.Вставить("Count", СтрокаПодарок.Количество);
		СтруктураСтроки.Вставить("PackagesCount", СтрокаПодарок.Количество);
		СтруктураСтроки.Вставить("Price", СтрокаПодарок.Цена);
		СтруктураСтроки.Вставить("Amount", СтрокаПодарок.Сумма);
		СтруктураСтроки.Вставить("GiftFromTheList", СтрокаПодарок.ПодарокИзСписка);
		СтруктураСтроки.Вставить("ShoppingCart", СтрокаПодарок.СкидкаНаценка.УчитыватьПодарокКакПродажу);
		СтруктураСтроки.Вставить("GiftOwner", XMLСтрока(СтрокаПодарок.СкидкаНаценка));
		СтруктураСтроки.Вставить("GiftName", Строка(СтрокаПодарок.СкидкаНаценка));
		
		МассивПодарков.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("Gifts", МассивПодарков);
	
КонецПроцедуры


// Дополняет сериализованную структуру данными о подарках
//
// Параметры:
//  СериализованнаяСтруктураСкидок - Структура - см. СериализоватьРезультатРасчета()
//  ТаблицаПодарков - ТаблицаЗначений - 
//
// Возвращаемое значение:
//  Структура - содержит в себе данные передаваемого параметра СериализованнаяСтруктураСкидок,
//				дополненного структурой Messages
//
Процедура ДополнитьСтруктуруСкидокСообщениями(СериализованнаяСтруктураСкидок, ТаблицаСообщений)
	
	МассивСообщений = Новый Массив;
	
	Для каждого СтрокаСообщения Из ТаблицаСообщений Цикл
	
		СтруктураСтроки = Новый Структура;
		
		ПослеОформленияЧека = (СтрокаСообщения.СкидкаНаценка.МоментВыдачиСообщения =
								Перечисления.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека);
		СтруктураСтроки.Вставить("AfterSale", ПослеОформленияЧека);
		СтруктураСтроки.Вставить("MessageText", СтрокаСообщения.ТекстСообщения);
		
		МассивСообщений.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("Messages", МассивСообщений);
	
КонецПроцедуры

// Дополняет сериализованную структуру данными о скидках
//
// Параметры:
//  СериализованнаяСтруктураСкидок - Структура - см. СериализоватьРезультатРасчета()
//  ТаблицаСкидокНаценок - ТаблицаЗначений - 
//
// Возвращаемое значение:
//  Структура - содержит в себе данные передаваемого параметра СериализованнаяСтруктураСкидок,
//				дополненного структурой DiscountsList
//
Процедура ДополнитьСтруктуруСкидокТаблицейСкидокНаценок(СериализованнаяСтруктураСкидок, ТаблицаСкидокНаценок)
	
	МассивСкидокНаценок = Новый Массив;
	
	Для каждого СтрокаСкидкиНаценки Из ТаблицаСкидокНаценок Цикл
	
		СтруктураСтроки = Новый Структура; 
		СтруктураСсылки = ПолучитьСтруктуруСсылки(СтрокаСкидкиНаценки.СкидкаНаценка);
		
		СтруктураСтроки.Вставить("KeyRelation", СтрокаСкидкиНаценки.КлючСвязи);
		СтруктураСтроки.Вставить("Discount", СтруктураСсылки);
		СтруктураСтроки.Вставить("DiscountValue", СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки);
		СтруктураСтроки.Вставить("Amount", СтрокаСкидкиНаценки.Сумма);
		СтруктураСтроки.Вставить("MinimalPriceRestriction", СтрокаСкидкиНаценки.ОграниченаМинимальнойЦеной);
		СтруктураСтроки.Вставить("Comment", СтрокаСкидкиНаценки.Комментарий);
		СтруктураСтроки.Вставить("LineUID", СтрокаСкидкиНаценки.ИдентификаторСтроки);
		
		МассивСкидокНаценок.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("DiscountsList", МассивСкидокНаценок);
	
КонецПроцедуры

// Дополняет сериализованную структуру данными о бонусах
//
// Параметры:
//  СериализованнаяСтруктураСкидок - Структура - см. СериализоватьРезультатРасчета()
//  ТаблицаБонусов - ТаблицаЗначений - 
//
// Возвращаемое значение:
//  Структура - содержит в себе данные передаваемого параметра СериализованнаяСтруктураСкидок,
//				дополненного структурой Messages
//
Процедура ДополнитьСтруктуруСкидокТаблицейБонусов(СериализованнаяСтруктураСкидок, ТаблицаБонусов)
	
	МассивБонусов = Новый Массив;
	
	Для каждого СтрокаБонусов Из ТаблицаБонусов Цикл
	
		СтруктураСтроки = Новый Структура;
		СтруктураСсылки = ПолучитьСтруктуруСсылки(СтрокаБонусов.СкидкаНаценка);
		
		СтруктураСтроки.Вставить("KeyRelation", СтрокаБонусов.КлючСвязи);
		СтруктураСтроки.Вставить("Discount", СтруктураСсылки);
		СтруктураСтроки.Вставить("BonusProgramm", Новый Структура("Ref, Name"));
		СтруктураСтроки.Вставить("BonusCount", СтрокаБонусов.КоличествоБонусныхБаллов);
		СтруктураСтроки.Вставить("AccuralDate", СтрокаБонусов.ДатаНачисления);
		СтруктураСтроки.Вставить("WriteOffDate", СтрокаБонусов.ДатаСписания);
		
		МассивБонусов.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("BonusesToAccrue", МассивБонусов);
	
КонецПроцедуры

// Дополняет сериализованную структуру данными о промокодах
//
// Параметры:
//  СериализованнаяСтруктураСкидок - Структура - см. СериализоватьРезультатРасчета()
//  ТаблицаПромокодов - ТаблицаЗначений - 
//
// Возвращаемое значение:
//  Структура - содержит в себе данные передаваемого параметра СериализованнаяСтруктураСкидок,
//				дополненного структурой Messages
//
Процедура ДополнитьСтруктуруСкидокТаблицейПромокодов(СериализованнаяСтруктураСкидок, ТаблицаПромокодов)
	
	МассивПромокодов = Новый Массив;
	
	Для каждого СтрокаПромокодов Из ТаблицаПромокодов Цикл
	
		СтруктураСтроки = Новый Структура;
		СтруктураСсылкиСкидкаНаценка = ПолучитьСтруктуруСсылки(СтрокаПромокодов.СкидкаНаценка);
		СтруктураСсылкиУсловиеПредоставленияСкидки = ПолучитьСтруктуруСсылки(СтрокаПромокодов.УсловиеПредоставленияСкидки);
		
		УникальныйИдентификатор = СтрокаПромокодов.УникальныйИдентификатор;
		Если Не ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
			УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
		КонецЕсли;
		
		СтруктураСтроки.Вставить("Promocode", СтрокаПромокодов.Промокод);
		СтруктураСтроки.Вставить("DiscountActive", СтрокаПромокодов.СкидкаПредоставлена);
		СтруктураСтроки.Вставить("PromocodeActivation", СтрокаПромокодов.ЭтоАктивацияПромокода);
		СтруктураСтроки.Вставить("PromocodeDiscount", СтруктураСсылкиСкидкаНаценка);
		СтруктураСтроки.Вставить("ErrorDescription", СтрокаПромокодов.ОписаниеОшибкиПрименения);
		СтруктураСтроки.Вставить("PromocodeUID", УникальныйИдентификатор);
		СтруктураСтроки.Вставить("DiscountCondition", СтруктураСсылкиУсловиеПредоставленияСкидки);
		
		МассивПромокодов.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("PromocodesList", МассивПромокодов);
	
КонецПроцедуры

// Возвращает структуру параметраов из http запроса
//
// Параметры:
//  ВходящиеДанные - Строка - содержит строковое значение тела запроса в формате JSON.
//  Результат - Структура - содержит в себе набор параметров, которые могут быть переданы через hhtp-запрос
//    * Номенклатура 	- Строка
//    * Характеристика 				- Строка
//    * Упаковка 						- Строка
//
Процедура ПараметрыИзЗапросаПолучитьОстатки(ВходящиеДанные, Результат) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь);
	ПараметрыРасчета.Вставить("ОписаниеОшибки", "");
	
	Попытка
	
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ВходящиеДанные);
		ВходящиеДанныеВJSON = ПрочитатьJSON(ЧтениеJSON, , "CurrentDate", ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		Номенклатура = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "Item", "Справочники.Номенклатура");
		Характеристика = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "Variant", "Справочники.ХарактеристикиНоменклатуры");
		Упаковка = СерверЛояльностиПоставщикДанных.ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанныеВJSON, "Package", "Справочники.ЕдиницыИзмерения");
		
		ПараметрыПолученияОстатков = Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, Упаковка);
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка преобразования тела запроса по причине: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПараметрыРасчета.ЕстьОшибки = Истина;
		ПараметрыРасчета.ОписаниеОшибки = ОписаниеОшибки;
		
		ЗаписьЖурналаРегистрации("СерверЛояльности.АвтоматическийРасчетСкидок", , , , ОписаниеОшибки);
		
	КонецПопытки;
	
	Результат = ПараметрыПолученияОстатков;
	
КонецПроцедуры

// Возвращает данные об остатках товара
//
// Параметры:
//  ПараметрыМетода - Структура - содержит параметры получения остатков,
//                                см. СерверЛояльностиПоставщикДанных.ПараметрыИзЗапросаПолучитьОстатки
//  СтруктураОтвета - Структура - содержит данные о балансе сертификата,
//                                см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета
//
Процедура ПолучитьОстатки(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	МассивОстатков = Новый Массив;
	
	ТаблицаОстатков = ПолучитьТаблицуОстатков(ПараметрыМетода);
	
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		СтруктураОстатков = СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОстатков();
		СтруктураОстатков.LeftoverLocation = СтрокаОстатков.МестоХранения;
		СтруктураОстатков.Variant = СтрокаОстатков.Характеристика;
		СтруктураОстатков.Leftover = СтрокаОстатков.Остаток;
		СтруктураОстатков.Reserved = СтрокаОстатков.ВРезерве;
		СтруктураОстатков.FreeLeftover = СтрокаОстатков.Свободно;
		
		МассивОстатков.Добавить(СтруктураОстатков);
	КонецЦикла;
	
	СтруктураОтвета.Вставить("LeftoversList", МассивОстатков);
	
КонецПроцедуры

// Возвращает таблицу остатков
//
// Параметры:
//  ПараметрыПолученияОстатков - Структура - содержит параметры получения остатков.
//
Функция ПолучитьТаблицуОстатков(ПараметрыПолученияОстатков) Экспорт
	
	ТаблицаОстатков = Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиТоваров.СтруктурнаяЕдиница) КАК МестоХранения,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОстаткиТоваров.Характеристика) КАК Характеристика,
	|	ОстаткиТоваров.Количество + ОстаткиТоваров.Резерв КАК Остаток,
	|	ОстаткиТоваров.Резерв КАК ВРезерве,
	|	ОстаткиТоваров.Количество КАК Свободно
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|ГДЕ
	|	ОстаткиТоваров.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстатки.МестоХранения КАК МестоХранения,
	|	ВТОстатки.Характеристика КАК Характеристика,
	|	ВТОстатки.Остаток / ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК Остаток,
	|	ВТОстатки.ВРезерве / ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК ВРезерве,
	|	ВТОстатки.Свободно / ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 1) КАК Свободно
	|ИЗ
	|	ВТОстатки КАК ВТОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (ЕдиницыИзмерения.Ссылка = &Упаковка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Характеристика,
	|	МестоХранения";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыПолученияОстатков.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ПараметрыПолученияОстатков.Характеристика);
	Запрос.УстановитьПараметр("Упаковка", ПараметрыПолученияОстатков.Упаковка);
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОстатков;
	
КонецФункции

// Заполняет массив использованных промокодов из документа
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ с применением промокодов.
//  МассивПромокодов - Массив - Массив примененных промокодов
//
Процедура ПолучитьТаблицуИспользованныхПромокодов(Документ, МассивПромокодов) Экспорт
	
	МассивПромокодов = Новый Массив;
	ОтборПромокодов = Новый Структура("ЭтоАктивацияПромокода", Ложь);
	СтрокиПримененныхПромокодов = Документ.ПримененныеПромокоды.НайтиСтроки(ОтборПромокодов);
	Для Каждого СтрокаПримененногоПромокода Из СтрокиПримененныхПромокодов Цикл
		МассивПромокодов.Добавить(СтрокаПримененногоПромокода.Промокод);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаКартЛояльностиПоВладельцуКарты()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДисконтныеКарты.Ссылка КАК Карта,
	|	""Клиент"" КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.ВладелецКарты = &ВладелецКарты
	|	И НЕ ДисконтныеКарты.ПометкаУдаления"
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартыЛояльностиПоСсылке()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДисконтныеКарты.Ссылка КАК Карта,
	|	"""" КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.Ссылка = &ДисконтнаяКарта"
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартЛояльностиПоНомеру()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДисконтныеКарты.Ссылка КАК Карта,
	|	""КодКарты"" КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	НЕ ДисконтныеКарты.ПометкаУдаления
	|	И &ИдентификаторКартыКлиента В (ДисконтныеКарты.КодКартыШтрихкод, ДисконтныеКарты.КодКартыМагнитный)"
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКартЛояльностиПоКонтактнойИнформации(СтрокаПоискаТелефона)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДисконтныеКарты.Ссылка КАК Карта,
	|	""Телефон"" КАК ТипПоиска
	|ПОМЕСТИТЬ КартыЛояльности
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО ДисконтныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформация.Ссылка
	|			И (НЕ ДисконтныеКарты.ПометкаУдаления)
	|			И (&ОбратныйНомер <> """")
	|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|			И (КонтрагентыКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомер)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДисконтныеКарты.Ссылка,
	|	""АдресЭП""
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО ДисконтныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформация.Ссылка
	|			И (НЕ ДисконтныеКарты.ПометкаУдаления)
	|			И (&АдресЭП <> """")
	|			И (КонтрагентыКонтактнаяИнформация.АдресЭП = &АдресЭП)
	|			И (НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))"
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ОбщаяЧастьЗапросаКартЛояльности();
	
	Если ЗначениеЗаполнено(СтрокаПоискаТелефона) И Прав(СтрокаПоискаТелефона, 1) = "%" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОбратныйНомерТелефона = &ОбратныйНомер",
			"ОбратныйНомерТелефона ПОДОБНО &ОбратныйНомер");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОбщаяЧастьЗапросаКартЛояльности()
	
	КусокЗапроса =
	"ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	СУММА(ЕСТЬNULL(БонусныеБаллыКСписанию.КСписанию, 0)) КАК КСписанию
	|ПОМЕСТИТЬ КартыЛояльностиРезерв
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БонусныеБаллыКСписанию КАК БонусныеБаллыКСписанию
	|		ПО КартыЛояльности.Карта = БонусныеБаллыКСписанию.ДисконтнаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	КартыЛояльности.Карта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БонусныеБаллыОстатки.НачисленоОстаток, 0) - ЕСТЬNULL(БонусныеБаллыОстатки.КСписаниюОстаток, 0) < 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(БонусныеБаллыОстатки.НачисленоОстаток, 0) - ЕСТЬNULL(БонусныеБаллыОстатки.КСписаниюОстаток, 0)
	|	КОНЕЦ КАК Остаток
	|ПОМЕСТИТЬ КартыЛояльностиОстаток
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы.Остатки(
	|				&ПериодЗапроса,
	|				БонуснаяКарта В
	|					(ВЫБРАТЬ
	|						КартыЛояльности.Карта КАК Карта
	|					ИЗ
	|						КартыЛояльности КАК КартыЛояльности)) КАК БонусныеБаллыОстатки
	|		ПО КартыЛояльности.Карта = БонусныеБаллыОстатки.БонуснаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыЛояльности.Карта КАК Карта,
	|	ЕСТЬNULL(ПродажиПоДисконтнымКартамОбороты.СуммаОборот, 0) КАК ПродажиОборот
	|ПОМЕСТИТЬ КартыЛояльностиПродажи
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(
	|				,
	|				&ПериодЗапроса,
	|				,
	|				ДисконтнаяКарта В
	|					(ВЫБРАТЬ
	|						КартыЛояльности.Карта КАК Карта
	|					ИЗ
	|						КартыЛояльности КАК КартыЛояльности)) КАК ПродажиПоДисконтнымКартамОбороты
	|		ПО КартыЛояльности.Карта = ПродажиПоДисконтнымКартамОбороты.ДисконтнаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрДисконтныеКарты.Ссылка КАК КартаСсылка,
	|	КартыЛояльности.ТипПоиска КАК ТипПоиска,
	|	ЕСТЬNULL(СпрКонтрагенты.Ссылка, ЗНАЧЕНИЕ(справочник.Контрагенты.пустаяссылка)) КАК КлиентСсылка,
	|	ЕСТЬNULL(СпрКонтрагенты.Наименование, """") КАК НаименованиеКлиента,
	|	ЕСТЬNULL(СпрКонтрагенты.ВидКонтрагента, ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.Пустаяссылка)) КАК ВидКонтрагента,
	|	ЕСТЬNULL(СпрКонтрагенты.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения,
	|	ЕСТЬNULL(СпрКонтрагенты.НомерТелефонаДляПоиска, """") КАК НомерТелефонаДляПоиска,
	|	ЕСТЬNULL(СпрКонтрагенты.АдресЭПДляПоиска, """") КАК АдресЭПДляПоиска,
	|	СпрДисконтныеКарты.КодКартыШтрихкод КАК КодКартыШтрихкод,
	|	СпрДисконтныеКарты.КодКартыМагнитный КАК КодКартыМагнитный,
	|	ВЫБОР
	|		КОГДА СостояниеБонусовСерверЛояльности.ДисконтнаяКарта ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БонусыЗаблокированы,
	|	ЕСТЬNULL(СпрБонусныеПрограммы.МаксимальныйПроцентОплаты, 0) КАК МаксимальныйПроцентОплаты,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КартыЛояльностиОстаток.Остаток, 0) < ЕСТЬNULL(КартыЛояльностиРезерв.КСписанию, 0)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(КартыЛояльностиОстаток.Остаток, 0) - ЕСТЬNULL(КартыЛояльностиРезерв.КСписанию, 0)
	|	КОНЕЦ КАК ОстатокБонусов,
	|	ЕСТЬNULL(КартыЛояльностиПродажи.ПродажиОборот, 0) КАК ПродажиОборот
	|ИЗ
	|	КартыЛояльности КАК КартыЛояльности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДисконтныеКарты КАК СпрДисконтныеКарты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
	|			ПО СпрДисконтныеКарты.ВладелецКарты = СпрКонтрагенты.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК СпрВидыДисконтныхКарт
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы КАК СпрБонусныеПрограммы
	|				ПО СпрВидыДисконтныхКарт.БонуснаяПрограмма = СпрБонусныеПрограммы.Ссылка
	|			ПО СпрДисконтныеКарты.Владелец = СпрВидыДисконтныхКарт.Ссылка
	|		ПО КартыЛояльности.Карта = СпрДисконтныеКарты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеБонусовСерверЛояльности КАК СостояниеБонусовСерверЛояльности
	|		ПО КартыЛояльности.Карта = СостояниеБонусовСерверЛояльности.ДисконтнаяКарта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КартыЛояльностиОстаток КАК КартыЛояльностиОстаток
	|		ПО КартыЛояльности.Карта = КартыЛояльностиОстаток.Карта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КартыЛояльностиРезерв КАК КартыЛояльностиРезерв
	|		ПО КартыЛояльности.Карта = КартыЛояльностиРезерв.Карта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КартыЛояльностиПродажи КАК КартыЛояльностиПродажи
	|		ПО КартыЛояльности.Карта = КартыЛояльностиПродажи.Карта";
	
	Возврат КусокЗапроса;
	
КонецФункции

Функция ПодготовитьСтрокуПоискаПоНомеруТелефона(СтрокаПоискаТелефона)
	
	РезультатФункции = "";
	ДлинаНомераБезКодаСтраны = 10;
	МинимальнаяДлинаЧастиТелефона = 4;
	КодыСтраны = НСтр("ru = '78'");
	ОбратныйНомер = ПолучитьСтрокуЦифрВОбратномПорядке(СтрокаПоискаТелефона);
	ДлинаОбратногоНомера = СтрДлина(ОбратныйНомер);
	Если СтрНайти(СтрокаПоискаТелефона, "*") = 1 Тогда
		Если ДлинаОбратногоНомера = ДлинаНомераБезКодаСтраны Тогда
			
			РезультатФункции = ОбратныйНомер;
			
		ИначеЕсли ДлинаОбратногоНомера >= МинимальнаяДлинаЧастиТелефона
				И ДлинаОбратногоНомера < ДлинаНомераБезКодаСтраны Тогда
				
			РезультатФункции = СтрШаблон("%1%2", ОбратныйНомер, "%");
			
		КонецЕсли;
	ИначеЕсли ДлинаОбратногоНомера = ДлинаНомераБезКодаСтраны Тогда
		РезультатФункции = ОбратныйНомер;
	ИначеЕсли ДлинаОбратногоНомера = ДлинаНомераБезКодаСтраны + 1
			И СтрНайти(КодыСтраны, Прав(ОбратныйНомер, 1)) > 0 Тогда
		РезультатФункции = Лев(ОбратныйНомер, ДлинаНомераБезКодаСтраны);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура НайтиКартуЛояльностиПоСсылке(КартаКлиента, СтруктураОтвета)
	
	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартыЛояльностиПоСсылке();
	ЗапросКарт.УстановитьПараметр("ДисконтнаяКарта", КартаКлиента);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура НайтиКартуЛояльностиПоВладельцу(ВладелецКарты, СтруктураОтвета)
	
	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартЛояльностиПоВладельцуКарты();
	ЗапросКарт.УстановитьПараметр("ВладелецКарты", ВладелецКарты);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура НайтиКартуЛояльностиПоНомеруКарты(ИдентификаторКартыКлиента, СтруктураОтвета)

	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартЛояльностиПоНомеру();
	ЗапросКарт.УстановитьПараметр("ИдентификаторКартыКлиента", ИдентификаторКартыКлиента);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура НайтиКартыЛояльностиПоКонтактнойинформации(СтрокаПоискаТелефона, АдресЭП, СтруктураОтвета)
	
	ЗапросКарт = Новый Запрос;
	ЗапросКарт.Текст = ТекстЗапросаКартЛояльностиПоКонтактнойИнформации(СтрокаПоискаТелефона);
	ЗапросКарт.УстановитьПараметр("ОбратныйНомер", СтрокаПоискаТелефона);
	ЗапросКарт.УстановитьПараметр("АдресЭП", АдресЭП);
	ЗапросКарт.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
	ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета);
	
КонецПроцедуры

Процедура ЗаполнитьОписанияКартПоРезультатуЗапроса(ЗапросКарт, СтруктураОтвета)
	
	РезультатЗапроса = ЗапросКарт.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаКарт = РезультатЗапроса.Выбрать();
		Пока ВыборкаКарт.Следующий() Цикл
			
			ОписаниеКарты = СерверЛояльностиПоставщикДанных.СтруктураКартыЛояльности();
			ЗаполнитьОписаниеКарты(ОписаниеКарты, ВыборкаКарт);
			
			СтруктураОтвета.LoyaltyCardsList.Добавить(ОписаниеКарты);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеКарты(ОписаниеКарты, ЭлементВыборки)
	
	ОписаниеКарты.ClientName = ЭлементВыборки.НаименованиеКлиента;
	ОписаниеКарты.IsPerson = ЭтоФизическоеЛицо(ЭлементВыборки.ВидКонтрагента);
	ОписаниеКарты.DateOfBirth = ЭлементВыборки.ДатаРождения;
	ОписаниеКарты.Phone = ЭлементВыборки.НомерТелефонаДляПоиска;
	ОписаниеКарты.Email = ЭлементВыборки.АдресЭПДляПоиска;
	ОписаниеКарты.Barcode = ЭлементВыборки.КодКартыШтрихкод;
	ОписаниеКарты.MagneticCode = ЭлементВыборки.КодКартыМагнитный;
	ОписаниеКарты.CardGUID = СокрЛП(ЭлементВыборки.КартаСсылка.УникальныйИдентификатор());
	ОписаниеКарты.ClientGUID = СокрЛП(ЭлементВыборки.КлиентСсылка.УникальныйИдентификатор());
	ОписаниеКарты.IsBlocked = ЭлементВыборки.БонусыЗаблокированы;
	ОписаниеКарты.BonusData.PaymentPercent = ЭлементВыборки.МаксимальныйПроцентОплаты;
	ОписаниеКарты.BonusData.BonusCount = ?(ОписаниеКарты.IsBlocked, 0, ЭлементВыборки.ОстатокБонусов);
	ОписаниеКарты.SellCount = ЭлементВыборки.ПродажиОборот;
	ОписаниеКарты.SearchType = ЭлементВыборки.ТипПоиска;
	
КонецПроцедуры

Функция ЭтоФизическоеЛицо(ВидКонтрагента)
	
	РезультатФункции = Истина;
	Если ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо
			Или ВидКонтрагента = Перечисления.ВидыКонтрагентов.ГосударственныйОрган Тогда
		
		РезультатФункции = Ложь;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДополнитьСтруктуруСкидокДаннымиКарты(СериализованнаяСтруктураСкидок, КартаКлиента)
	
	ДанныеКарты = Новый Структура("CardNotFound,LoyaltyCard", Истина, Неопределено);
	Если ЗначениеЗаполнено(КартаКлиента) Тогда
		ЗапросКарты = Новый Запрос;
		ЗапросКарты.Текст = ТекстЗапросаКартыЛояльностиПоСсылке();
		ЗапросКарты.УстановитьПараметр("ДисконтнаяКарта", КартаКлиента);
		ЗапросКарты.УстановитьПараметр("ПериодЗапроса", КонецДня(ТекущаяДатаСеанса()));
		РезультатЗапроса = ЗапросКарты.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаКарты = РезультатЗапроса.Выбрать();
			ВыборкаКарты.Следующий();
			
			ОписаниеКарты = СерверЛояльностиПоставщикДанных.СтруктураКартыЛояльности();
			ЗаполнитьОписаниеКарты(ОписаниеКарты, ВыборкаКарты);
			ДанныеКарты.CardNotFound = Ложь;
			ДанныеКарты.LoyaltyCard = ОписаниеКарты;
		КонецЕсли;
	КонецЕсли;
	СериализованнаяСтруктураСкидок.Вставить("LoyaltyCardDescription", ДанныеКарты);
	
КонецПроцедуры

Функция ПолучитьКартуПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = Неопределено;
	Если ЗначениеЗаполнено(СтрокаУникальногоИдентификатора)
			И Не СтрокаУникальногоИдентификатора = ПустойУникальныйИдентификатор() Тогда
			
		РезультатФункции
			= Справочники.ДисконтныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора));
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьВладельцаКартыПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = Неопределено;
	Если ЗначениеЗаполнено(СтрокаУникальногоИдентификатора)
			И Не СтрокаУникальногоИдентификатора = ПустойУникальныйИдентификатор() Тогда
			
		РезультатФункции
			= Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаУникальногоИдентификатора));
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПустойУникальныйИдентификатор()
	Возврат "00000000-0000-0000-0000-000000000000" // АПК:1297 Не локализуется
КонецФункции

Функция ПолучитьСтрокуЦифрВОбратномПорядке(ИсходнаяСтрока)
	
	РезультатФункции = "";
	
	ДлинаИсходнойСтроки = СтрДлина(ИсходнаяСтрока);
	ИндексСимвола = 0;
	Пока ИндексСимвола < ДлинаИсходнойСтроки Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, ДлинаИсходнойСтроки - ИндексСимвола, 1);
		Если СтрНайти("0123456789", ТекущийСимвол) > 0 Тогда
			РезультатФункции = РезультатФункции + ТекущийСимвол;
		КонецЕсли;
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТекстЗапросаКлиентаПоОбратномуНомеруТелефона()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Клиент
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.ОбратныйНомерТелефона = &ОбратныйНомер
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКлиентаСТелефономПоАдресуЭП()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтрагентыКонтактнаяИнформацияАдресЭП.Ссылка КАК Клиент,
	|	ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияТелефон.ОбратныйНомерТелефона, """") КАК ОбратныйНомерТелефона
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияАдресЭП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО КонтрагентыКонтактнаяИнформацияАдресЭП.Ссылка = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ КонтрагентыКонтактнаяИнформацияТелефон.ОбратныйНомерТелефона = """")
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформацияАдресЭП.АдресЭП = &АдресЭП
	|	И НЕ КонтрагентыКонтактнаяИнформацияАдресЭП.Ссылка.ПометкаУдаления
	|	И КонтрагентыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Дополняет сериализованную структуру данными о действующих автоматических скидках
//
// Параметры:
//  СериализованнаяСтруктураСкидок - Структура - см. СериализоватьРезультатРасчета()
//  ТаблицаСкидок - ТаблицаЗначений - 
//
// Возвращаемое значение:
//  Структура - содержит в себе данные передаваемого параметра СериализованнаяСтруктураСкидок,
//				дополненного структурой CurrentDiscounts
Процедура ДополнитьСтруктуруСкидокДействующимиСкидками(СериализованнаяСтруктураСкидок, ТаблицаСкидок)
	
	МассивСкидок = Новый Массив;
	
	Для каждого СтрокаСкидкиНаценки Из ТаблицаСкидок Цикл
	
		СтруктураСтроки = Новый Структура;
		СтруктураСсылки = ПолучитьСтруктуруСсылки(СтрокаСкидкиНаценки.СкидкаНаценка);
		СтруктураСтроки.Вставить("Discounts", СтруктураСсылки);
		СтруктураСтроки.Вставить("DiscountValue", ?(СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки = null, 0, СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки));
		СтруктураСтроки.Вставить("Group", СтрокаСкидкиНаценки.ЭтоГруппа);
		СтруктураСтроки.Вставить("Completed", СтрокаСкидкиНаценки.КоличествоВыполненийУсловия);
		СтруктураСтроки.Вставить("Parent", XMLСтрока(СтрокаСкидкиНаценки.СкидкаНаценка.Родитель));
		
		УсловияПредоставления = "";
		Если СтрокаСкидкиНаценки.ПараметрыУсловий.Свойство("ТаблицаУсловий") Тогда
			Для Каждого СтрокаУсловий Из СтрокаСкидкиНаценки.ПараметрыУсловий.ТаблицаУсловий Цикл
				УсловияПредоставления = УсловияПредоставления + ?(УсловияПредоставления = "","",Символы.ПС) + Строка(СтрокаУсловий.УсловиеПредоставления);
			КонецЦикла;
		КонецЕсли;
		
		СтруктураСтроки.Вставить("TermsDiscounts", УсловияПредоставления);
		
		МассивСкидок.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	СериализованнаяСтруктураСкидок.Вставить("CurrentDiscounts", МассивСкидок);
	
КонецПроцедуры

// Функция преобразует дерево значений в таблицу значений.
//
Функция ДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт
	
	Если Таблица = Неопределено Тогда
		
		Таблица = Новый ТаблицаЗначений;
		
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл

		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
		КонецЕсли;

	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

#КонецОбласти