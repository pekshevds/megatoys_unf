
#Область ПрограммныйИнтерфейс

// Заполняет представление единицы измерения номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить представление единицы измерения.
//  ПредставлениеЕИ - Строка - представление единицы измерения номенклатуры.
//
Процедура ЗаполнитьПредставлениеЕдиницыИзмерения(ТекущаяСтрока, ПредставлениеЕИ) Экспорт
	
	Результат = НСтр("ru = ''");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		ПредставлениеЕИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Упаковка, "Наименование");
	Иначе
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
		|		ПО Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ТекущаяСтрока.Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Наименование;
		КонецЕсли;
		
		ПредставлениеЕИ = Результат;
		
	КонецЕсли;
	
КонецПроцедуры

// Поиск кассира по считанному коду.
//
// Параметры
//  Объект - ДанныеФормыСткруктура - форма, в которой переопредляются значения.
//  Штрихкод - Строка - код, по которому выполняется поиск.
//
Процедура ВыполнитьПоискКассира(Объект, Штрихкод) Экспорт
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка КАК Кассир
	|ПОМЕСТИТЬ ТаблицаСотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ЭтоГруппа
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.Недействителен
	|	И Сотрудники.ШтрихКод = &Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудники.Кассир КАК Кассир,
	|	ЕСТЬNULL(СотрудникиПользователя.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Пользователь
	|ИЗ
	|	ТаблицаСотрудники КАК ТаблицаСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	|		ПО ТаблицаСотрудники.Кассир = СотрудникиПользователя.Сотрудник");
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Кассир = Выборка.Кассир;
		Объект.ПользовательБД = Выборка.Пользователь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПользовательБД) Тогда
		Объект.ПользовательБД = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру кассира если владельцем является пользователь или физическое лицо.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  НайденныйКассир - Структура - содержащая данные кассира
//
Процедура ЗаполнитьДанныеНайденногоКассира(ВладелецШтрихкода, Форма, НайденныйКассир) Экспорт
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		СтруктураКассира = Новый Структура;
		СтруктураКассира.Вставить("Кассир");
		СтруктураКассира.Вставить("ПользовательБД");
		
		Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.Пользователи") Тогда
			
			СтруктураКассира.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецШтрихкода, "ФизическоеЛицо");
			СтруктураКассира.ПользовательБД = ВладелецШтрихкода;
			
		Иначе
			
			СтруктураКассира.Кассир = ВладелецШтрихкода;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СотрудникиПользователя.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
			|ГДЕ
			|	СотрудникиПользователя.Сотрудник = &Сотрудник");
			
			Запрос.УстановитьПараметр("Сотрудник", ВладелецШтрихкода);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураКассира.ПользовательБД = Выборка.Пользователь;
			Иначе
				СтруктураКассира.ПользовательБД = Пользователи.ТекущийПользователь();
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныйКассир = СтруктураКассира;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру дисконтной карты если владельцем является карта лояльности.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//  НайденнаяКартаЛояльности - Структура - содержащая данные карты лояльности
//
Процедура ЗаполнитьДанныеНайденнойКартыЛояльности(ВладелецШтрихкода, НайденнаяКартаЛояльности) Экспорт
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ДисконтныеКарты")
		ИЛИ ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		СтруктураДисконтнойКарты = Новый Структура;
		СтруктураДисконтнойКарты.Вставить("КартаЛояльности");
		СтруктураДисконтнойКарты.Вставить("Контрагент");
		СтруктураДисконтнойКарты.Вставить("КодКарты");
		СтруктураДисконтнойКарты.Вставить("АдресЭПВладельцаКарты");
		СтруктураДисконтнойКарты.Вставить("НомерТелефонаВладельцаКарты");
		СтруктураДисконтнойКарты.Вставить("ДатаРождения");
		СтруктураДисконтнойКарты.Вставить("ФИО");
		СтруктураДисконтнойКарты.Вставить("ЭтоКомпания", Ложь);
		СтруктураДисконтнойКарты.Вставить("СуммаПродаж");
		
		Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ДисконтныеКарты") Тогда
		
			ВледелецКарты = ВладелецШтрихкода.ВладелецКарты;
			ЗаполнитьЗначенияСвойств(СтруктураДисконтнойКарты, ВладелецШтрихкода);
			СтруктураДисконтнойКарты.КартаЛояльности = ВладелецШтрихкода;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДисконтныеКарты.КодКартыМагнитный КАК КодКарты,
			|	ДисконтныеКарты.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ПоискКартыДисконтная
			|ИЗ
			|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
			|ГДЕ
			|	ДисконтныеКарты.Ссылка = &КартаЛояльности
			|	И НЕ ДисконтныеКарты.КодКартыМагнитный = """"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДисконтныеКарты.КодКартыШтрихкод,
			|	ДисконтныеКарты.Ссылка
			|ИЗ
			|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
			|ГДЕ
			|	ДисконтныеКарты.Ссылка = &КартаЛояльности
			|	И НЕ ДисконтныеКарты.КодКартыШтрихкод = """"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПоискКартыДисконтная.КодКарты КАК КодКарты,
			|	СУММА(ЕСТЬNULL(ПродажиПоДисконтнымКартамОбороты.СуммаОборот, 0)) КАК СуммаПродаж
			|ИЗ
			|	ПоискКартыДисконтная КАК ПоискКартыДисконтная
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты КАК ПродажиПоДисконтнымКартамОбороты
			|		ПО ПоискКартыДисконтная.Ссылка = ПродажиПоДисконтнымКартамОбороты.ДисконтнаяКарта
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоискКартыДисконтная.КодКарты";
			
			Запрос.УстановитьПараметр("КартаЛояльности", ВладелецШтрихкода);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураДисконтнойКарты.КодКарты = Выборка.КодКарты;
				СтруктураДисконтнойКарты.СуммаПродаж = Выборка.СуммаПродаж;
			КонецЕсли;
			
		Иначе
			ВледелецКарты = ВладелецШтрихкода;
		КонецЕсли;
		
		СтруктураДисконтнойКарты.Контрагент = ВледелецКарты;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.Наименование КАК ФИО,
		|	Контрагенты.ДатаРождения КАК ДатаРождения,
		|	КонтрагентыАдресаЭП.АдресЭП КАК АдресЭПВладельцаКарты,
		|	КонтрагентыТелефоны.НомерТелефона КАК НомерТелефонаВладельцаКарты,
		|	ВЫБОР
		|		КОГДА Контрагенты.ВидКонтрагента В (&ВидыКонтрагентовКомпании)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКомпания
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыАдресаЭП
		|		ПО (КонтрагентыАдресаЭП.Ссылка = Контрагенты.Ссылка)
		|			И (КонтрагентыАдресаЭП.Тип = &ТипКИАдресЭП)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыТелефоны
		|		ПО (КонтрагентыТелефоны.Ссылка = Контрагенты.Ссылка)
		|			И (КонтрагентыТелефоны.Тип = &ТипКИТелефон)
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Ссылка = &ВледелецКарты";
		
		ВидыКонтрагентовКомпании = Новый Массив;
		ВидыКонтрагентовКомпании.Добавить(Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
		ВидыКонтрагентовКомпании.Добавить(Перечисления.ВидыКонтрагентов.ГосударственныйОрган);
		
		Запрос.УстановитьПараметр("ТипКИТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("ТипКИАдресЭП", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("ВледелецКарты", СтруктураДисконтнойКарты.Контрагент);
		Запрос.УстановитьПараметр("ВидыКонтрагентовКомпании", ВидыКонтрагентовКомпании);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДисконтнойКарты, Выборка);
		КонецЕсли;
		
		НайденнаяКартаЛояльности = СтруктураДисконтнойКарты;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру дисконтной карты
//
// Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск;
//  НомерТелефона - Строка - (необязательный) номер телефона владельца карты
//  ДанныеКарты - Структура,Неопределено - Параметры дисконтной карты, или Неопределено если карта не найдена
//
Процедура ЗаполнитьДанныеКартыЛояльностиПоМагнитномуКоду(МагнитныйКод, НомерТелефона, ДанныеКарты) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет сведения о существующей для номенклатуры упаковки
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для запроса информации об упаковке
//  ДанныеУпаковки - Структура
//     *Коэффициент - Число - коэффициент кратности упаковки
//     *Упаковка - СправочникСсылка.Упаковки - найденная упаковка для номенклатуры
//
Процедура ЗаполнитьДанныеУпаковкиДляТовара(Номенклатура, ДанныеУпаковки) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Коэффициент", 1);
	Результат.Вставить("Упаковка",
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Упаковки.Ссылка КАК Упаковка,
		|	Упаковки.Коэффициент КАК Коэффициент
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК Упаковки
		|ГДЕ
		|	НЕ Упаковки.ПометкаУдаления
		|	И Упаковки.Владелец = &Номенклатура");
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		
		МаксимальныйКоэффициент = 0;
		УпаковкаМаксКоэффициент = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Коэффициент > МаксимальныйКоэффициент Тогда
				
				МаксимальныйКоэффициент = Выборка.Коэффициент;
				УпаковкаМаксКоэффициент = Выборка.Упаковка;
				ЗаполнитьЗначенияСвойств(Результат, Выборка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеУпаковки = Результат;
	
КонецПроцедуры

// Заполняет структуру позиции номенклатуры если владельцем является номенклатура.
//
// Параметры:
//  СтрокаРезультата - Структура - параметры для проверки и заполнения.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ПараметрыДляОбработкиШтрихкода - Структура - данные для обработки штрихкода.
//  НайденнаяНоменклатура - Структура - содержащая данные номенклатуры
//     * Весовой - Булево
//     * Количество - Число
//     * КоличествоУпаковок - Число
//     * Маркируемый - Булево
//     * НеобходимостьВводаСерии - Булево
//     * Номенклатура - ОпределяемыйТип.НоменклатураРМК
//     * ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК
//     * ПредставлениеНоменклатураХарактеристика - Строка
//     * Серия - ОпределяемыйТип.СерияРМК
//     * СистемаНалогообложения - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК
//     * СтавкаНДС - ОпределяемыйТип.СтавкаНДСРМК
//     * ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК
//     * Упаковка - ОпределяемыйТип.УпаковкаРМК
//     * Фасованный - Булево
//     * Характеристика - ОпределяемыйТип.ХарактеристикаРМК
//     * Цена - Число
//     * Штрихкод - Строка
//     * Организация - ОпределяемыйТип.ОрганизацияРМК
//     * Партия - ОпределяемыйТип.ПартияРМК
//     * ИспользоватьПартии - Булево
//     * ПроверятьЗаполнениеПартий - Булево
//     * ПроверятьЗаполнениеСерий - Булево
//     * УникальностьСерии - Булево
//     * ЭтоНабор - Булево
//
Процедура ЗаполнитьДанныеНайденнойНоменклатуры(СтрокаРезультата, Форма, ПараметрыДляОбработкиШтрихкода,
		НайденнаяНоменклатура) Экспорт
	
	ВладелецШтрихкода = СтрокаРезультата.Владелец;
	ШтрихкодУпаковки = Неопределено;
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		ВладелецШтрихкода = ВладелецШтрихкода.Номенклатура;
		ШтрихкодУпаковки = СтрокаРезультата.Владелец;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтруктураВыбора = Новый Структура;
		ЗаполнитьСтруктуруВыбора(СтруктураВыбора);
		
		СтруктураВыбора.Штрихкод = СтрокаРезультата.ДанныеПО;
		СтруктураВыбора.Номенклатура = ВладелецШтрихкода;
		СтруктураВыбора.Характеристика = СтрокаРезультата.Характеристика;
		
		ЗаполнитьДанныеНоменклатуры(СтруктураВыбора, Форма.ИспользоватьВыборСкладаПриПродаже);
		Если СтруктураВыбора.Маркируемый Тогда
			ЗаполнитьПризнакиПоштучногоВыбытия(СтруктураВыбора.Номенклатура, СтруктураВыбора.Характеристика, СтруктураВыбора, Форма);
		КонецЕсли;
		
		Количество = СтрокаРезультата.Количество;
		Если НЕ СтрокаРезультата.Свойство("ВесИзШтрихкода") И ВладелецШтрихкода.Весовой Тогда
			Количество = 0;
		КонецЕсли;
		
		СтруктураВыбора.Количество = Количество;
		СтруктураВыбора.КоличествоУпаковок = Количество;
		
		СтруктураВыбора.Партия = СтрокаРезультата.Партия;
		Если НЕ ЗначениеЗаполнено(СтруктураВыбора.Партия)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураВыбора.Номенклатура, "ИспользоватьПартии") Тогда
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			
			ПартияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(
				СтруктураВыбора.Номенклатура,
				СтатусПартии);
			Если ЗначениеЗаполнено(ПартияПоУмолчанию) Тогда
				СтруктураВыбора.Партия = ПартияПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураВыбора.Партия)
			И СтруктураВыбора.Партия.Статус = Перечисления.СтатусыПартий.ТоварыНаКомиссии
			И Не ЗначениеЗаполнено(СтруктураВыбора.Партия.ВладелецПартии) Тогда
			СтруктураВыбора.Партия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		Если СтрокаРезультата.Свойство("СерияНоменклатуры") Тогда
			
			Если СтрокаРезультата.СерияНоменклатуры = Null Тогда
				СтрокаРезультата.СерияНоменклатуры = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СерииНоменклатуры.ПустаяСсылка");
			КонецЕсли;
			СтруктураВыбора.Серия = СтрокаРезультата.СерияНоменклатуры;
			
		КонецЕсли;
		
		Если СтрокаРезультата.Свойство("Упаковка") Тогда
			СтруктураВыбора.Упаковка = СтрокаРезультата.Упаковка;
		КонецЕсли;
		
		Если Не ШтрихкодУпаковки = Неопределено Тогда
			ПроверитьЗаполненностьСерии(СтруктураВыбора, ШтрихкодУпаковки);
		КонецЕсли;
		
		СтруктураВыбора.Фасованный = Ложь;
		
		СтруктураВыбора.ОплатаНедоступна = Ложь;
		ОбщегоНазначенияРМКУНФ.ЗаполнитьОрганизациюПродажи(СтруктураВыбора, Форма);
		Если Не ЗначениеЗаполнено(СтруктураВыбора.Организация) Тогда
			СтруктураВыбора.Организация = Форма.ОсновнаяОрганизация;
		Иначе
			
			ОтборПоОрганизации = Новый Структура("Организация", СтруктураВыбора.Организация);
			КассыККМПоОрганизации = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
			Если КассыККМПоОрганизации.Количество() = 0 Тогда
				СтруктураВыбора.ОплатаНедоступна = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураВыбора.СистемаНалогообложения) Тогда
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСНОККТДляОрганизации(СтруктураВыбора.СистемаНалогообложения, Форма);
		КонецЕсли;
		
		СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Форма.Объект, СтруктураВыбора, СтруктураВыбора.СистемаНалогообложения);
		СтруктураВыбора.СтавкаНДС = СтавкаНДС;
		
		КодТРУ = ВладелецШтрихкода.КодТРУ;
		СтруктураВыбора.КодТРУ = КодТРУ;
		СтруктураВыбора.ВозможнаОплатаЭС = ЗначениеЗаполнено(КодТРУ);
		
		Характеристика = СтрокаРезультата.Характеристика;
		
		ПредставлениеХарактеристики = "";
		Если ЗначениеЗаполнено(СтруктураВыбора.Характеристика) Тогда
			ПредставлениеХарактеристики = " (" + СтруктураВыбора.Характеристика.Наименование + ")";
		КонецЕсли;
		
		ПредставлениеТовара = СтруктураВыбора.Наименование + ПредставлениеХарактеристики;
		СтруктураВыбора.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
		
		Если ЗначениеЗаполнено(СтруктураВыбора.Упаковка) Тогда
			Коэффициент = СтруктураВыбора.Упаковка.Коэффициент;
		Иначе
			Коэффициент = 1;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
		СтруктураДанных.Вставить("Номенклатура", СтруктураВыбора.Номенклатура);
		СтруктураДанных.Вставить("Характеристика", СтруктураВыбора.Характеристика);
		СтруктураДанных.Вставить("Коэффициент", Коэффициент);
		СтруктураДанных.Вставить("ВалютаДокумента", Форма.РозничныйВидЦены.ВалютаЦены);
		СтруктураДанных.Вставить("ВидЦен", Форма.РозничныйВидЦены);
		СтруктураДанных.Вставить("СуммаВключаетНДС", Истина);
		СтруктураДанных.Вставить("СтавкаНДС", СтавкаНДС);
		
		Цена = ЦенообразованиеСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
		СтруктураВыбора.Цена = Цена;
		
		ОбщегоНазначенияРМКПереопределяемый.СкорректироватьЦенуПодарочногоСертификата(Форма, СтруктураВыбора);
		
		НайденнаяНоменклатура = СтруктураВыбора;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет серию номенклатуры если ею является.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//  НайденнаяСерияНоменклатуры - ОпределяемыйТип.СерияНоменклатурыШтрихкода
//
Процедура ЗаполнитьДанныеНайденнойСерииНоменклатуры(ВладелецШтрихкода, НайденнаяСерияНоменклатуры) Экспорт
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
		НайденнаяСерияНоменклатуры = ВладелецШтрихкода;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет партию номенклатуры если ею является.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//  НайденнаяПартияНоменклатуры - ОпределяемыйТип.ПартияНоменклатурыШтрихкода
//
Процедура ЗаполнитьДанныеНайденнойПартииНоменклатуры(ВладелецШтрихкода, НайденнаяПартияНоменклатуры) Экспорт
		
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ПартииНоменклатуры") Тогда
		НайденнаяПартияНоменклатуры = ВладелецШтрихкода;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак того, нужно ли проверять статус акцизной марки.
//
// НужнаПроверкаСтатусаМарки - Булево - Истина, если нужна проверка статуса марки.
//
Процедура ЗаполнитьПризнакНеобходимостиПроверкиСтатусаМарки(НужнаПроверкаСтатусаМарки) Экспорт
	
	НужнаПроверкаСтатусаМарки = Истина;
	
КонецПроцедуры

// Проверка статуса марки.
//
// Параметры
//  ПараметрыПроверки - Структура - параметры для проверки марки.
//
Процедура ПроверитьСтатусМарки(ПараметрыПроверки) Экспорт
	
	ТекстОшибки = "";
	
	Объект = ПараметрыПроверки.Объект;
	СтрокаТовары = ПараметрыПроверки.СтрокаТовары;
	Организация = СтрокаТовары.Организация;
	
	Операция = "Возврат";
	Если ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации) Тогда
		Операция = "Продажа";
	КонецЕсли;
	
	МассивШтрихкодов = Новый массив;
	МассивШтрихкодов.Добавить(ПараметрыПроверки.Штрихкод);
	
	ТипыУпаковок = Новый Массив;
	ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(МассивШтрихкодов, ТипыУпаковок);
	
	ШтрихкодУпаковки = Неопределено;
	Если ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;
	Иначе
		ШтрихкодУпаковки = ШтрихкодыУпаковок[0].Ссылка;
	КонецЕсли;
	
	ОстаткиМаркируемойПродукции = ИнициализацияТаблицыПроверкиОстатков();
	ОстаткиПоУмолчанию = Новый Структура("Продажа, Возврат", 1, -1);
	
	СтрокаОстатки = ОстаткиМаркируемойПродукции.Добавить();
	СтрокаОстатки.ШтрихкодУпаковки = ШтрихкодУпаковки;
	СтрокаОстатки.Доступно = ОстаткиПоУмолчанию[Операция];
	
	ПараметрыСканирования = Новый Структура("Организация", Организация);
	
	ШтрихкодированиеИСПереопределяемый.ПриОпределенииОстатковМаркируемойПродукции(
		ОстаткиМаркируемойПродукции, ПараметрыСканирования);
	
	НайденнаяСтрока = ОстаткиМаркируемойПродукции.Найти(ШтрихкодУпаковки, "ШтрихкодУпаковки");
	
	УсловиеВыполнено = НайденнаяСтрока.Доступно >= 1;
	Если Операция = "Возврат" Тогда
		УсловиеВыполнено = Не УсловиеВыполнено;
	КонецЕсли;
	
	Если Не УсловиеВыполнено Тогда
		
		Если Операция = "Продажа" Тогда
			ТекстОшибки = НСтр("ru='Продана ранее по данным информационной базы'");
		Иначе
			ТекстОшибки = НСтр("ru='Уже в наличии по данным информационной базы'");
		КонецЕсли;
		
		ПараметрыПроверки.Вставить("ОшибкаЕГАИС", ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует таблицу значений для контроля остатков маркируемой продукции.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Код маркировки.
//   * Доступно - Число - Остаток маркируемой продукции.
//
Функция ИнициализацияТаблицыПроверкиОстатков()
	
	КвалификаторыЧисла  = Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Любой);
	
	ОстаткиМаркируемойПродукции = Новый ТаблицаЗначений;
	ОстаткиМаркируемойПродукции.Колонки.Добавить("ШтрихкодУпаковки",
		Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ОстаткиМаркируемойПродукции.Колонки.Добавить("Доступно",
		Новый ОписаниеТипов("Число", КвалификаторыЧисла));
	
	Возврат ОстаткиМаркируемойПродукции;
	
КонецФункции

Процедура ЗаполнитьСтруктуруВыбора(СтруктураВыбора)
	
	СтруктураВыбора.Вставить("Весовой");
	СтруктураВыбора.Вставить("Количество");
	СтруктураВыбора.Вставить("КоличествоУпаковок");
	СтруктураВыбора.Вставить("Маркируемый");
	СтруктураВыбора.Вставить("НеобходимостьВводаСерии");
	СтруктураВыбора.Вставить("Номенклатура");
	СтруктураВыбора.Вставить("ОсобенностьУчета");
	СтруктураВыбора.Вставить("ПредставлениеНоменклатураХарактеристика");
	СтруктураВыбора.Вставить("Серия");
	СтруктураВыбора.Вставить("СистемаНалогообложения");
	СтруктураВыбора.Вставить("СтавкаНДС");
	СтруктураВыбора.Вставить("ТипНоменклатуры");
	СтруктураВыбора.Вставить("Упаковка");
	СтруктураВыбора.Вставить("Фасованный");
	СтруктураВыбора.Вставить("Характеристика");
	СтруктураВыбора.Вставить("Цена");
	СтруктураВыбора.Вставить("Штрихкод");
	СтруктураВыбора.Вставить("Организация");
	СтруктураВыбора.Вставить("Партия");
	СтруктураВыбора.Вставить("ИспользоватьПартии");
	СтруктураВыбора.Вставить("ПроверятьЗаполнениеПартий");
	СтруктураВыбора.Вставить("ПроверятьЗаполнениеСерий");
	СтруктураВыбора.Вставить("УникальностьСерии");
	СтруктураВыбора.Вставить("ЭтоНабор");
	СтруктураВыбора.Вставить("ПоштучноеВыбытие");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеНоменклатура");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеХарактеристика");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеВариантУчета");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеКоличество");
	СтруктураВыбора.Вставить("КоличествоВПотребительскойУпаковке");
	СтруктураВыбора.Вставить("Наименование");
	СтруктураВыбора.Вставить("ТорговыйОбъект");
	СтруктураВыбора.Вставить("Ячейка");
	СтруктураВыбора.Вставить("КодТРУ");
	СтруктураВыбора.Вставить("ВозможнаОплатаЭС");
	СтруктураВыбора.Вставить("ОплатаНедоступна");
	СтруктураВыбора.Вставить("ЗапретитьВводДробногоКоличества");
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиПоштучногоВыбытия(Номенклатура, Характеристика, СтруктураВыбора, Форма)
	
	Если Форма.Объект.Товары.Количество() > 0 Тогда
		
		ТекущаяСтрока = Форма.Объект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		Если Не ТекущаяСтрока.ПоштучноеВыбытие Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура КАК Номенклатура,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Характеристика КАК Характеристика,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия КАК НоменклатураЧастичногоВыбытия,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.ХарактеристикаЧастичногоВыбытия КАК ХарактеристикаЧастичногоВыбытия
	|ПОМЕСТИТЬ ТаблицаЧастичногоВыбытияПодменыНоменклатуры
	|ИЗ
	|	РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|ГДЕ
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура = &Номенклатура
	|	И НастройкиЧастичногоВыбытияТоваровИСМП.Характеристика = &Характеристика
	|	И НЕ НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ПоштучноеВыбытие,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.НоменклатураЧастичногоВыбытия КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.ХарактеристикаЧастичногоВыбытия КАК ЧастичноеВыбытиеХарактеристика,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	1 КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.НоменклатураЧастичногоВыбытия КАК Номенклатура,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.ХарактеристикаЧастичногоВыбытия КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаДанныеПодменыНоменклатуры
	|ИЗ
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры КАК ТаблицаЧастичногоВыбытияПодменыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ТаблицаЧастичногоВыбытияПодменыНоменклатуры.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|ГДЕ
	|	НЕ ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|	И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Номенклатура КАК Номенклатура,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.Характеристика КАК Характеристика,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия КАК НоменклатураЧастичногоВыбытия,
	|	НастройкиЧастичногоВыбытияТоваровИСМП.ХарактеристикаЧастичногоВыбытия КАК ХарактеристикаЧастичногоВыбытия
	|ПОМЕСТИТЬ ТаблицаЧастичногоВыбытия
	|ИЗ
	|	РегистрСведений.НастройкиЧастичногоВыбытияТоваровИСМП КАК НастройкиЧастичногоВыбытияТоваровИСМП
	|ГДЕ
	|	НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия = &Номенклатура
	|	И НастройкиЧастичногоВыбытияТоваровИСМП.ХарактеристикаЧастичногоВыбытия = &Характеристика
	|	И НЕ НастройкиЧастичногоВыбытияТоваровИСМП.НоменклатураЧастичногоВыбытия ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ПоштучноеВыбытие,
	|	ТаблицаЧастичногоВыбытия.НоменклатураЧастичногоВыбытия КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаЧастичногоВыбытия.ХарактеристикаЧастичногоВыбытия КАК ЧастичноеВыбытиеХарактеристика,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	1 КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаЧастичногоВыбытия.НоменклатураЧастичногоВыбытия КАК Номенклатура,
	|	ТаблицаЧастичногоВыбытия.ХарактеристикаЧастичногоВыбытия КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаДанныеПоштучногоВыбытия
	|ИЗ
	|	ТаблицаЧастичногоВыбытия КАК ТаблицаЧастичногоВыбытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ТаблицаЧастичногоВыбытия.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|ГДЕ
	|	НЕ ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|	И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныеПодменыНоменклатуры.ПоштучноеВыбытие КАК ПоштучноеВыбытие,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеНоменклатура КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеВариантУчета КАК ЧастичноеВыбытиеВариантУчета,
	|	ТаблицаДанныеПодменыНоменклатуры.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеКоличество КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаДанныеПодменыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаДанныеПодменыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаДанныеПодменыНоменклатуры КАК ТаблицаДанныеПодменыНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДанныеПоштучногоВыбытия.ПоштучноеВыбытие,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеХарактеристика,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеВариантУчета,
	|	ТаблицаДанныеПоштучногоВыбытия.КоличествоВПотребительскойУпаковке,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеКоличество,
	|	ТаблицаДанныеПоштучногоВыбытия.Номенклатура,
	|	ТаблицаДанныеПоштучногоВыбытия.Характеристика
	|ИЗ
	|	ТаблицаДанныеПоштучногоВыбытия КАК ТаблицаДанныеПоштучногоВыбытия";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Выборка);
		ЗаполнитьДанныеНоменклатуры(СтруктураВыбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНоменклатуры(СтруктураВыбора, ИспользоватьВыборСклада = Ложь)
	
	Дата = ТекущаяДатаСеанса();
	ВидыПродукцииОбязательнойМаркировки = ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииОбязательнойМаркировки(Дата);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|		ИЛИ СпрНоменклатура.ВидПродукцииИС В (ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха), &ВидыПродукцииОбязательнойМаркировки) КАК Маркируемый,
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	СпрНоменклатура.ЭтоНабор
	|		ИЛИ СпрНоменклатура.ЭтоАгентскаяУслуга КАК ЭтоНабор,
	|	СпрНоменклатура.ИспользоватьСерииНоменклатуры КАК НеобходимостьВводаСерии,
	|	СпрНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СпрНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрПолитикаУчетаСерий.ТипПолитики, ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьЗаполнениеСерий,
	|	СпрНоменклатура.ИспользоватьУникальныеСерии КАК УникальностьСерии,
	|	СпрНоменклатура.ВидПродукцииИС КАК ОсобенностьУчета,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	СпрНоменклатура.Склад КАК ТорговыйОбъект,
	|	СпрНоменклатура.Ячейка КАК Ячейка,
	|	СпрНоменклатура.ЗапретитьВводДробногоКоличества КАК ЗапретитьВводДробногоКоличества
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО СпрНоменклатура.ВидАлкогольнойПродукции = ВидыАлкогольнойПродукции.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолитикаУчетаСерий КАК СпрПолитикаУчетаСерий
	|		ПО СпрНоменклатура.ПолитикаУчетаСерий = СпрПолитикаУчетаСерий.Ссылка
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", СтруктураВыбора.Номенклатура);
	Запрос.УстановитьПараметр("ВидыПродукцииОбязательнойМаркировки", ВидыПродукцииОбязательнойМаркировки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ИсключаяСвойства = "";
		ИсключаяСвойства = ?(Не ИспользоватьВыборСклада, "ТорговыйОбъект, Ячейка", ИсключаяСвойства);
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Выборка,, ИсключаяСвойства);
		ОбщегоНазначенияРМКУНФ.ПроверитьСкладДляРучногоВыбора(СтруктураВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьСерии(СтруктураВыбора, ШтрихкодУпаковки)
	
	Если Не СтруктураВыбора.ОсобенностьУчета = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		Возврат;
	КонецЕсли;
	
	Серия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШтрихкодУпаковки, "Серия");
	Если ЗначениеЗаполнено(Серия) Тогда
		СтруктураВыбора.Серия = Серия;
	Иначе
		
		Серия = ОбщегоНазначенияРМКУНФ.НайтиСоздатьСериюПоДаннымШтрихкода(СтруктураВыбора.Номенклатура,
			СтруктураВыбора.Штрихкод);
		
		ШтрихкодУпаковкиОбъект = ШтрихкодУпаковки.ПолучитьОбъект();
		ШтрихкодУпаковкиОбъект.Серия = Серия;
		ШтрихкодУпаковкиОбъект.Записать();
		СтруктураВыбора.Серия = Серия;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
