
#Область ПрограммныйИнтерфейс

// Процедура выполняет общие алгоритмы события При создании на сервере для денежных документов
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Форма.Параметры.Свойство("СозданПоКомандеИзФормыСписка") Тогда
		Форма.СозданПоКомандеИзФормыСписка = Форма.Параметры.СозданПоКомандеИзФормыСписка;
	Иначе
		Форма.СозданПоКомандеИзФормыСписка = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ФормаСоздана") Тогда
		Форма.ФормаСоздана = Истина;
	КонецЕсли;
	
	Форма.ДатаДокумента = Объект.Дата;
	Если Не ЗначениеЗаполнено(Форма.ДатаДокумента) Тогда
		Форма.ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Форма.УчетПоКомпании = Константы.УчетПоКомпании.Получить();
	Форма.Компания = Константы.УчетПоКомпании.Компания(Объект.Организация);
	Форма.ВидОперации = Объект.ВидОперации;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "УчетВалютныхОпераций") Тогда
		Форма.УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВалютаДенежныхСредств") Тогда
		Форма.ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Контрагент") Тогда
		Форма.Контрагент = Объект.Контрагент;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВалютаУчета") Тогда
		Форма.ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Корреспонденция") Тогда
		Форма.Корреспонденция = Объект.Корреспонденция;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов") Тогда
		Форма.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов = ПолучитьФункциональнуюОпцию("КассовыйМетодУчетаДоходовИРасходов");
	КонецЕсли;
	
	ЗаполнитьРеквизитыВидовОпераций(Форма);
	ЗаполнитьСписокВидовОпераций(Форма);
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоДокументПоБанку(Форма)
		ИЛИ ФормыДокументовДеньгиКлиентСервер.ЭтоДокументПоКассе(Форма) Тогда
		
		Форма.ВариантЗаполненияРасшифровкиВручную = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Вручную;
		Форма.ВариантЗаполненияРасшифровкиПросмотр = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр;
		Форма.ВариантЗаполненияРасшифровкиАвтоматически = Перечисления.ВариантыЗаполненияРасшифровкиПлатежа.Автоматически;
		
		Форма.СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
		Форма.СпособЗачетаАвтоматически = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		
		ВзаиморасчетыПриСозданииНаСервере(Форма);
		УстановитьВидимостьКурсаВалюты(Форма);
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС(Форма, Ложь);
		ПроверитьСообщитьОЗаполненномСчетеПриАвтоЗачете(Форма);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КурсВалютыУчета") Тогда
		ПараметрВалюты = Новый Структура("Валюта", УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, ПараметрВалюты);
		Форма.КурсВалютыУчета = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Курс);
		Форма.КратностьВалютыУчета = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Кратность);
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыКурсИКратность(Форма);
	
	// Заполнение нового объекта
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
		ДобавитьПервуюСтрокуРасшифровкиПлатежа(Форма);
		ЗаполнитьДоговорПоУмолчанию(Форма);
		ЗаполнитьКорреспонденцию(Форма);
		ЗаполнитьСтатью(Форма);
		ЛичныеСредстваПредпринимателяОчиститьОрганизацию(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СпециальныйНалоговыйРежим") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
			Объект.СпециальныйНалоговыйРежим = НалогиУНФ.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьСвязьПараметровВыбораПоОрганизации(Форма);
	
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование, Форма.ТолькоПросмотр);
	
	// БКЗБ
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПоказыватьЭлементыБЗКБ") Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
			Или Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
			Или Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата Тогда
			Форма.ПоказыватьЭлементыБЗКБ = Справочники.Организации.НужноПоказыватьЭлементыБЗКБДляОрганизации(Объект.Организация);
		Иначе
			Форма.ПоказыватьЭлементыБЗКБ = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Конец БЗКБ;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоДокументПоБанку(Форма)
		ИЛИ ФормыДокументовДеньгиКлиентСервер.ЭтоДокументПоКассе(Форма)
		ИЛИ ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
		
		УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(Форма, Истина);
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Форма);
		УстановитьВидимостьРеквизитовКассовыйМетодУчетаДоходовИРасходов(Объект, Форма);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ПрочиеРасчетыДоговор") Тогда
			Форма.Элементы.Переместить(Форма.Элементы.ПрочиеРасчетыДоговор, Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость элементов в зависимости от вида операции
//
// Параметры:
//  Форма				 - Форма	 - Форма денежного документа
//  ПриСозданииНаСервере - Булево	 - Признак вызова из процедуры создания на сервере
//
Процедура УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(Форма, ПриСозданииНаСервере = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	ВидОперации = Объект.ВидОперации;
	
	СброситьВидимостьЭлементовФормы(Форма);
	УстановитьВидимостьВводаНаОсновании(Форма);
	
	Если ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		ТекстЗаголовкаРасчеты = НСтр("ru='Сумма расчетов / Курс'");
	Иначе
		ТекстЗаголовкаРасчеты = НСтр("ru='Сумма'");
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаПлатежаСуммаИКурсРасчетов", "Заголовок", ТекстЗаголовкаРасчеты);
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеНаСчет(Форма) 
		ИЛИ ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеВКассу(Форма) Тогда
		УстановитьВидимостьЭлементовВЗависимостиОтВидаОперацииПСПК(Форма, ПриСозданииНаСервере);
		ДвижениеДенежныхСредствСервер.ОбработатьВидОперации(Форма);
		УстановитьВидимостьДокументыПланирования(Форма);
		НастроитьЭлементыРаспределенияДолговНаСервере(Форма);
		ОпределитьВидимостьНастроекУчетаВНалогообложении(Форма);
		УстановитьВидимостьОтПользовательскихНастроек(Форма);
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоставщикуНашейОрганизации(Форма, ВидОперации);
	НастроитьФормуПокупателю(Форма, ВидОперации);
	НастроитьФормуПрочиеРасчеты(Форма, ВидОперации);
	НастроитьФормуПрочее(Форма, ВидОперации);
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Подотчетнику Тогда
		
		Элементы.Документ.Видимость = Истина;
		Элементы.Подотчетник.Видимость = Истина;
		Элементы.Подотчетник.Заголовок = НСтр("ru='Подотчетник'");
		
		УстановитьВидимостьИтогов(Форма);
		
		Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
			Элементы.КПППолучателя.Видимость = Ложь;
			ПараметрыВыбораСчетКонтрагента = Новый Массив;
			ПараметрыВыбораСчетКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Физлицо"));
			ПараметрыВыбораСчетКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаДокумента"));
			Элементы.СчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСчетКонтрагента);
		КонецЕсли;
	
	КонецЕсли;
	
	Если 	ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику Тогда
		
		Элементы.ПериодРегистрации.Видимость = Истина;
		Элементы.Подотчетник.Видимость = Истина;
		Элементы.Подотчетник.Заголовок = НСтр("ru='Сотрудник'");
		
		Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
			Элементы.КПППолучателя.Видимость = Ложь;
			ПараметрыВыбораСчетКонтрагента = Новый Массив;
			ПараметрыВыбораСчетКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Физлицо"));
			ПараметрыВыбораСчетКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаДокумента"));
			Элементы.СчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСчетКонтрагента);
		КонецЕсли;
		
		УстановитьВидимостьИтогов(Форма);
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата Тогда
		
		Элементы.ВыплатыЗаработнойПлаты.Видимость = Истина;
		// БЗКБ
		Элементы.ВыплатыРегламентированнойЗаработнойПлаты.Видимость = Форма.ПоказыватьЭлементыБЗКБ;
		// Конец БЗКБ
		
		Элементы.СуммаПлатежа.Видимость = Ложь;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Истина;
		Элементы.ВыплатаРегЗаработнойПлатыИтогСуммаПлатежа.Видимость = Форма.ПоказыватьЭлементыБЗКБ;
		
		Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
			Элементы.ГруппаКонтрагент.Видимость = Истина;
			Элементы.Договор.Видимость = Ложь;
			Элементы.Контрагент.Заголовок =  НСтр("ru='Получатель'");
		КонецЕсли;
		
	КонецЕсли;
		
	Если 	ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога Тогда
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Получатель'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВидНалогаИСрокУплаты", "Видимость", Истина);
		
		УстановитьВидимостьИтогов(Форма);
		
		Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
			Элементы.РеквизитыДляПеречисленияНалога.Видимость = Истина;
			Элементы.Налог.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если 	ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы Тогда
		
		Элементы.Корреспонденция.Заголовок = НСтр("ru='Статья расходов'");
		Элементы.Корреспонденция.Видимость = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорПлатежногоАгента", "Видимость", Истина);
		
		Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
			Элементы.ГруппаКонтрагент.Видимость = Истина;
		КонецЕсли;
		
		УстановитьВидимостьИтогов(Форма);
		
	КонецЕсли;
	
	
	Если 	ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
		
		Элементы.ГруппаИнформацияПоДоговоруКредитаЗайма.Видимость = Истина;
		Элементы.Сотрудник.Видимость = Истина;
		Элементы.РасчетыПоКредитам.Заголовок = НСтр("ru='Расчеты по займам'");
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Ложь;
		
		Элементы.ДоговорЗаймаСотруднику.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруЗайма.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(Форма);
		
		УстановитьВидимостьИтогов(Форма);
		
	КонецЕсли;
	
	Если 	ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам Тогда
		
		Элементы.ГруппаИнформацияПоДоговоруКредитаЗайма.Видимость = Истина;
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Банк'");
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Истина;
		
		Элементы.ДоговорКредита.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(Форма);
		
		Элементы.СуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаРасчетов.Видимость = Истина;
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Сумма расчетов'");
		Элементы.СуммаНДС.Видимость = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетКонтрагента", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДС", "Видимость", Истина);
		
	КонецЕсли;
		
	// РК
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ Тогда
		
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.КассаККМ.Видимость = Истина;
		
		УстановитьВидимостьИтогов(Форма);
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк Тогда
		
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.СчетОрганизации.Видимость = Истина;
		УстановитьВидимостьИтогов(Форма);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОписьСдаваемыхДенег") Тогда
			Элементы.ГруппаОписьСдаваемыхНаличныхДенег.Видимость = Истина;
			Элементы.НомерСумки.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// РС
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Банк-эквайер'");
		Элементы.СчетКонтрагента.Видимость = Истина;
		
		Элементы.ЭквайринговыйТерминал.Видимость = Истина;
		Элементы.ДоговорЭквайрингаНадпись.Видимость = Истина;
		
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		Элементы.РасчетыПоЭквайрингу.Видимость = Истина;
		
		Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
			Терминал = Объект.ЭквайринговыеОперации[0].ЭквайринговыйТерминал;
		Иначе
			Терминал = Объект.ЭквайринговыйТерминал;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Терминал) Тогда
			Форма.ДоговорЭквайринга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Терминал, "Договор");
		ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
			Форма.ДоговорЭквайринга = ЭквайринговыеОперацииСервер.ПолучитьДоговорЭквайринга(Объект.Контрагент, Объект.Организация);
		КонецЕсли;
		
		Если Форма.ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
			Элементы.СуммаПлатежа.Видимость = Ложь;
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Истина;
			
			Элементы.ЭквайринговыеОперации.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Истина;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма'");
			Элементы.СуммаКомиссииДокумента.Видимость = Ложь;
		Иначе
			Элементы.СуммаПлатежа.Видимость = Истина;
			Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Всего'"));
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Ложь;
			
			Элементы.ЭквайринговыеОперации.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Ложь;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма/комиссия'");
			Элементы.СуммаКомиссииДокумента.Видимость = Истина;
		КонецЕсли;
		
		Если Форма.ДоговорЭквайринга.РасчетКомиссииВОтчетеЭквайера Тогда
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Ложь;
		Иначе
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма / Комиссия)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма / Комиссия)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Истина;
		КонецЕсли;
		
		Если Форма.ТипСчетаЗатратШапка = Перечисления.ТипыСчетов.Расходы Тогда
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Истина;
		Иначе
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Кредит
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Банк'");
		Элементы.СчетКонтрагента.Видимость = Истина;
		
		Элементы.ЭквайринговыйТерминал.Видимость = Истина;
		Элементы.ДоговорЭквайринга.Видимость = Истина;
		
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		Элементы.РасчетыПоЭквайрингу.Видимость = Истина;
		
		Если ЗначениеЗаполнено(Форма.ДоговорЭквайринга) Тогда
			МассивТерминалов = ЭквайринговыеОперацииСервер.ПолучитьТерминалыПоДоговору(Форма.ДоговорЭквайринга);
			Если МассивТерминалов.Количество() > 0 Тогда
				ЭквайринговыйТерминал = МассивТерминалов[0];
				Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
					Для Каждого ЭквайринговаяОперация Из Объект.ЭквайринговыеОперации Цикл
						ЭквайринговаяОперация.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
					КонецЦикла;
				Иначе
					Объект.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
				Форма.ДоговорЭквайринга = Объект.ЭквайринговыеОперации[0].ЭквайринговыйТерминал.Договор;
			Иначе
				Форма.ДоговорЭквайринга = Объект.ЭквайринговыйТерминал.Договор;
			КонецЕсли; 
		КонецЕсли;
		
		Если Форма.ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
			Элементы.СуммаПлатежа.Видимость = Ложь;
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Истина;
			
			Элементы.ЭквайринговыеОперации.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Истина;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма'");
			Элементы.СуммаКомиссииДокумента.Видимость = Ложь;
		Иначе
			Элементы.СуммаПлатежа.Видимость = Истина;
			Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Всего'"));
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Ложь;
			
			Элементы.ЭквайринговыеОперации.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Ложь;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма/комиссия'");
			Элементы.СуммаКомиссииДокумента.Видимость = Истина;
		КонецЕсли;
		
		Если Форма.ДоговорЭквайринга.РасчетКомиссииВОтчетеЭквайера Тогда
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Ложь;
		Иначе
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма / Комиссия)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма / Комиссия)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Истина;
		КонецЕсли;
		
		Если Форма.ТипСчетаЗатратШапка = Перечисления.ТипыСчетов.Расходы Тогда
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Истина;
		Иначе
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Банк'");
		
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Ложь;
		УстановитьВидимостьИтогов(Форма);
		Элементы.Корреспонденция.Видимость = Истина;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных Тогда
		
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.Касса.Видимость = Истина;
		УстановитьВидимостьИтогов(Форма);
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ЛичныеСредстваПредпринимателя Тогда
		
		УстановитьВидимостьИтогов(Форма);
		
		Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
			Элементы.СчетКонтрагента.Видимость = Истина;
			ПараметрыВыбораСчетКонтрагента = Новый Массив;
			ПараметрыВыбораСчетКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
			ПараметрыВыбораСчетКонтрагента.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаДокумента"));
			Элементы.СчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСчетКонтрагента);
		Иначе
			Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
			Элементы.СчетПолучателя.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДвижениеДенежныхСредствСервер.ОбработатьВидОперации(Форма);
	УстановитьВидимостьДокументыПланирования(Форма);
	УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Форма, Ложь);
	УстановитьВидимостьРеквизитовКассовыйМетодУчетаДоходовИРасходов(Объект, Форма);
	НастроитьЭлементыРаспределенияДолговНаСервере(Форма);
	ОпределитьВидимостьНастроекУчетаВНалогообложении(Форма);
	УстановитьВидимостьОтПользовательскихНастроек(Форма);
	
КонецПроцедуры

// Процедура обновляет отображение элементов покупка валюты
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура ОбновитьОтображениеЭлементовПокупкаВалюты(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ДекорацияКурсЦБ.Видимость = Объект.РасчетКурсовойРазницыПокупкаПродажаВалюты;
	Элементы.ДекорацияКурсоваяРазница.Видимость = Объект.РасчетКурсовойРазницыПокупкаПродажаВалюты;
	
	Если Объект.РасчетКурсовойРазницыПокупкаПродажаВалюты Тогда
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДенежныхСредств, Объект.Дата);
	
		Если СтруктураКурса.Курс = 0 Тогда
			СтруктураКурса.Курс = 1;
		КонецЕсли;
		
		Если СтруктураКурса.Кратность = 0 Тогда
			СтруктураКурса.Кратность = 1;
		КонецЕсли;
		
		Форма.КурсЦБ 		= СтруктураКурса.Курс;
		Форма.КратностьЦБ = СтруктураКурса.Кратность;
		
		Элементы.ДекорацияКурсЦБ.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Курс ЦБ на дату операции: %1'"), Форма.КурсЦБ);
		
		ОбновитьПредставлениеКурсовойРазницыПокупкаВалюты(Форма);
		
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьСписокВыбораВалютЭлементаФормы(Элементы.ПокупкаВалютыКурс, Объект.ВалютаДенежныхСредств, Объект.Дата);
	
КонецПроцедуры

// Процедура обновляет отображение элементов продажа валюты
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура ОбновитьОтображениеЭлементовПродажаВалюты(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ДекорацияПродажаВалютыКурсЦБ.Видимость = Объект.РасчетКурсовойРазницыПокупкаПродажаВалюты;
	Элементы.ДекорацияПродажаВалютыКурсоваяРазница.Видимость = Объект.РасчетКурсовойРазницыПокупкаПродажаВалюты;
	
	Если Объект.РасчетКурсовойРазницыПокупкаПродажаВалюты Тогда
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ПродажаВалютыВалюта, Объект.Дата);
	
		Если СтруктураКурса.Курс = 0 Тогда
			СтруктураКурса.Курс = 1;
		КонецЕсли;
		
		Если СтруктураКурса.Кратность = 0 Тогда
			СтруктураКурса.Кратность = 1;
		КонецЕсли;
		
		Форма.КурсЦБ = СтруктураКурса.Курс;
		Форма.КратностьЦБ = СтруктураКурса.Кратность;

		ТекстКурсЦБ = НСтр("ru = 'Курс ЦБ на дату операции: %1'");
		Элементы.ДекорацияПродажаВалютыКурсЦБ.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКурсЦБ, Форма.КурсЦБ);
		
		ОбновитьПредставлениеКурсовойРазницыПродажаВалюты(Форма);
		
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьСписокВыбораВалютЭлементаФормы(Элементы.ПродажаВалютыКурс,
		Объект.ПродажаВалютыВалюта, Объект.Дата);
	
КонецПроцедуры

// Процедура устанавливает видимость реквизитов расчетов
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура УстановитьВидимостьРеквизитовРасчетов(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтруктураРеквизитыРасчетов = РасчетыРаботаСФормамиВызовСервера.УстановитьВидимостьРеквизитовРасчетовФрагмент(Форма);
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеВКассу(Форма) Тогда
		
		// МобильноеПриложение
		Если НЕ МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
			Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		КонецЕсли;
		
	Иначе
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = СтруктураРеквизитыРасчетов.ВестиУчетОплатыПоСчетам;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты Тогда
		Элементы.ДоговорСАгентом.Видимость = СтруктураРеквизитыРасчетов.ВестиРасчетыПоДоговорам;
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ВидОперацииПрочиеРасчеты(Объект.ВидОперации) Тогда
		Элементы.ПрочиеРасчетыДоговор.Видимость = СтруктураРеквизитыРасчетов.ВестиРасчетыПоДоговорам;
	КонецЕсли;
	
КонецПроцедуры

// Процедура настраивает элементы распределения долгов на сервере
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура НастроитьЭлементыРаспределенияДолговНаСервере(Форма) Экспорт
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = Неопределено;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходСоСчета(Форма) Тогда
		ВидОперации = ?(Форма.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации, Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации, Перечисления.ВидыОперацийРасходСоСчета.Поставщику);
	КонецЕсли;
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходИзКассы(Форма) Тогда
		ВидОперации = ?(Форма.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации, Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации, Перечисления.ВидыОперацийРасходИзКассы.Поставщику);
	КонецЕсли;
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеНаСчет(Форма) Тогда
		ВидОперации = ?(Форма.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации, Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации, Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя);
	КонецЕсли;
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеВКассу(Форма) Тогда
		ВидОперации = ?(Форма.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации, Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации, Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя);
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.НастроитьЭлементыРаспределенияСуммыНаСервере(Форма, ВидОперации);
	
КонецПроцедуры

// Процедура устанавливает видимость реквизитов в зависимости от корреспонденции
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//  ОчиститьАналитику	 - Булево	 - Признак очистки аналитики документа
//
Процедура УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Форма, ОчиститьАналитику = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Ложь;
	
	Если Объект.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
		Элементы.НаправлениеДеятельности.Видимость = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заказ", "Видимость", Истина);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Подразделение")
			И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновноеПодразделение");
			Объект.Подразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		КонецЕсли;
	Иначе
		
		Если ОчиститьАналитику Тогда
			
			Если  Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Налоги // для ввода на основании
				И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Налоги // для ввода на основании
				И Объект.ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога
				И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику 
				И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
				И Объект.ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику Тогда
				Объект.НаправлениеДеятельности = Неопределено;
			КонецЕсли;
			
			Если НЕ Форма.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов
				И  (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
				ИЛИ Объект.ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога
				ИЛИ Объект.ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику) Тогда
				Объект.НаправлениеДеятельности = Неопределено;
			КонецЕсли;
		
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
				Объект.Подразделение = Неопределено;
			КонецЕсли;
		
		КонецЕсли;
		
		Элементы.НаправлениеДеятельности.Видимость = Ложь;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Заказ") Тогда
			Если ОчиститьАналитику Тогда
				Объект.Заказ = Неопределено;
			КонецЕсли;
			Элементы.Заказ.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Прочие расчеты
	Если 	Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Прочее 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее Тогда
		
		АналитикаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Корреспонденция, "АналитикаДоходовИРасходов");
		
		Если ОчиститьАналитику И ЗначениеЗаполнено(АналитикаСчета) Тогда
			Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа = Новый ОписаниеТипов(АналитикаСчета);
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = Строка(Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа);
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "";
			Объект.АналитикаПрочихДоходовИРасходов = Новый(АналитикаСчета);
		ИначеЕсли ЗначениеЗаполнено(АналитикаСчета) Тогда
			Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа = Новый ОписаниеТипов(АналитикаСчета);
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = Строка(Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа);
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "";
		Иначе // Очистить и не заполнена аналитика.
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = НСтр("ru = 'Аналитика расходов'");
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = НСтр("ru = '<Не настроена у этого счета>'");
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Ложь;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		КонецЕсли;
		
	Иначе
		Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Ложь;
	КонецЕсли;
	// Конец Прочие расчеты
	
	УстановитьВидимостьДокументыПланирования(Форма);
	
КонецПроцедуры

// Процедура устанавливает видимость документов планирования
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура УстановитьВидимостьДокументыПланирования(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ВидОперации = Объект.ВидОперации;
	
	Если    ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
			
			Элементы.ГруппаРасшифровкаПлатежаОбщая.Видимость = Ложь;
			
	ИначеЕсли   ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам Тогда
			
		Если Форма.ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг И НЕ ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			Элементы.ГруппаРасшифровкаПлатежаОбщая.Видимость = Ложь;
		Иначе
			Элементы.ГруппаРасшифровкаПлатежаОбщая.Видимость = Истина;
		КонецЕсли;
			
	ИначеЕсли   ВидОперации = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю Тогда
			
		Элементы.ГруппаРасшифровкаПлатежа.Видимость = Истина;
			
	ИначеЕсли ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь")
			ИЛИ Объект.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
			ИЛИ Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
			ИЛИ Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			
		Элементы.ГруппаРасшифровкаПлатежаОбщая.Видимость = Истина;
			
	Иначе
		Элементы.ГруппаРасшифровкаПлатежаОбщая.Видимость = Ложь;
	КонецЕсли;
	
	ИзменитьВидГруппыДополнительно(Форма);
	
КонецПроцедуры

// Процедура определяет видимость настроек учета в налогообложении
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении(Форма) Экспорт
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		ОпределитьВидимостьНастроекУчетаВНалогообложенииДляОтчетаЭквайера(Форма);
		Возврат;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	ПлательщикУСН =  СистемаНалогообложенияСтруктура.ПлательщикУСН;
	ПрименяетсяПатент = СистемаНалогообложенияСтруктура.ПрименяетсяПатент;
	
	Если НЕ ПлательщикУСН И НЕ ПрименяетсяПатент Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
	Иначе
		
		Если ФормыДокументовДеньгиКлиентСервер.ВидОперацииУчитываетсяВНУ(Объект.ВидОперации) Тогда
			Элементы.УчитыватьВНУ.Видимость = Истина;
		Иначе
			Элементы.УчитыватьВНУ.Видимость = Ложь;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "Патент") Тогда
			Элементы.ГруппаУчетВНУ.Видимость = Элементы.УчитыватьВНУ.Видимость;
		Иначе
			
			Если НЕ ПрименяетсяПатент Тогда
				Элементы.Патент.Видимость = Ложь;
			Иначе
				Элементы.Патент.Доступность = НЕ Объект.УчитыватьВНУ ИЛИ НЕ Элементы.УчитыватьВНУ.Видимость;
				Если ФормыДокументовДеньгиКлиентСервер.ВидОперацииПатент(Объект.ВидОперации) Тогда
					Элементы.Патент.Видимость = Истина;
				Иначе
					Элементы.Патент.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		
			// Если только патент или в документе-основании указано ПСП и патент только один, подставим его
			ВДокументеОснованииВыбранПСН = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДокументОснование")
				И ЗначениеЗаполнено(Объект.ДокументОснование)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект.ДокументОснование,
					"СпециальныйНалоговыйРежим") Тогда
				СпециальныйНалоговыйРежим = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование,
					"СпециальныйНалоговыйРежим");
				
				ВДокументеОснованииВыбранПСН = (СпециальныйНалоговыйРежим = Перечисления.СпециальныеНалоговыеРежимы.ПСН);
			КонецЕсли;
			
			ПатентОснования = Справочники.Патенты.ПустаяСсылка();
			Если ВДокументеОснованииВыбранПСН Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект.ДокументОснование, "Патент") Тогда
					ПатентОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование,
						"Патент");
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнятьПатент =
				(СистемаНалогообложенияСтруктура.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок
				Или ВДокументеОснованииВыбранПСН)
				И ПрименяетсяПатент 
				И Элементы.Патент.Видимость 
				И НЕ ЗначениеЗаполнено(Объект.Ссылка);
			
			Если ЗаполнятьПатент Тогда
				Если ЗначениеЗаполнено(ПатентОснования) Тогда
					ПатентДокумента = ПатентОснования;
				Иначе
					ПатентДокумента = Справочники.Патенты.ПолучитьПатентПоУмолчанию(Объект.Организация, Объект.Дата);
				КонецЕсли; 
				Объект.Патент = ПатентДокумента;
			КонецЕсли;
			
			Если Элементы.Патент.Видимость ИЛИ Элементы.УчитыватьВНУ.Видимость Тогда
				Элементы.ГруппаУчетВНУ.Видимость = Истина;
			Иначе
				Элементы.ГруппаУчетВНУ.Видимость = Ложь;
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьВидимостьНастроекУчетаВНалогообложенииДляОтчетаЭквайера(Форма);
	
КонецПроцедуры

// Функция возвращает список для выбора документа основания
//
// Параметры:
//  ИмяФормы				 - Строка	 - Имя формы документа
//  ВидОперации				 - ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет - Вид операции документа
//  ДополнительныеПараметры	 - Структура	 -  Структура с дополнительными параметрами
// 
// Возвращаемое значение:
//  СписокЗначений - Список возможных документов оснований
//
Функция ПолучитьСписокДляВыбораДокументаОснования(ИмяФормы, ВидОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	СписокОснований = Новый СписокЗначений;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходСоСчета(ИмяФормы) Тогда
	
		СписокОснований.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", НСтр("ru = 'Приходная накладная'"));
		СписокОснований.Добавить("Документ.НачислениеНалогов.ФормаВыбора", НСтр("ru = 'Начисление налогов'"));
		СписокОснований.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", НСтр("ru = 'Заказ поставщику'"));
		СписокОснований.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", НСтр("ru = 'Счет на оплату (полученный)'"));
		СписокОснований.Добавить("Документ.ДополнительныеРасходы.ФормаВыбора", НСтр("ru = 'Дополнительные расходы'"));
		СписокОснований.Добавить("Документ.ПлатежнаяВедомость.ФормаВыбора", НСтр("ru = 'Платежная ведомость'"));
		Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
			СписокОснований.Добавить("Документ.ОтчетКомиссионера.ФормаВыбора", НСтр("ru = 'Отчет комиссионера'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
			СписокОснований.Добавить("Документ.ОтчетКомитенту.ФормаВыбора", НСтр("ru = 'Отчет комитенту'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			СписокОснований.Добавить("Документ.ПеремещениеДСПлан.ФормаВыбора", НСтр("ru = 'Перемещение денег (план)'"));
			СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", НСтр("ru = 'Заявка на расход денег'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
			СписокОснований.Добавить("Документ.НачисленияПоКредитамИЗаймам.ФормаВыбора", НСтр("ru = 'Начисления по кредитам и займам'"));
			СписокОснований.Добавить("Документ.ДоговорКредитаИЗайма.ФормаВыбора", НСтр("ru = 'Договор кредита (займа)'"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			СписокОснований.Добавить("Документ.ПередачаТоваровМеждуОрганизациями.ФормаВыбора", НСтр("ru = 'Передача товаров между организациями'"));
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
			СписокОснований.Очистить();
			Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
				СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", НСтр("ru = 'Заявка на расход денег'"));
			КонецЕсли;
		КонецЕсли;
		
		СписокОснований.Добавить("Документ.ПлатежноеПоручение.ФормаВыбора", НСтр("ru = 'Платежное поручение'"));
		
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходИзКассы(ИмяФормы) Тогда
	
		СписокОснований.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", НСтр("ru = 'Приходная накладная'"));
	
		// МобильноеПриложение
		Если НЕ МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
			СписокОснований.Добавить("Документ.НачислениеНалогов.ФормаВыбора", НСтр("ru = 'Начисление налогов'"));
			СписокОснований.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", НСтр("ru = 'Заказ поставщику'"));
			СписокОснований.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", НСтр("ru = 'Счет на оплату (полученный)'"));
			СписокОснований.Добавить("Документ.ДополнительныеРасходы.ФормаВыбора", НСтр("ru = 'Дополнительные расходы'"));
			СписокОснований.Добавить("Документ.ПлатежнаяВедомость.ФормаВыбора", НСтр("ru = 'Платежная ведомость'"));
			Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
				СписокОснований.Добавить("Документ.ОтчетКомиссионера.ФормаВыбора", НСтр("ru = 'Отчет комиссионера'"));
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
				СписокОснований.Добавить("Документ.ОтчетКомитенту.ФормаВыбора", НСтр("ru = 'Отчет комитенту'"));
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
				СписокОснований.Добавить("Документ.ПеремещениеДСПлан.ФормаВыбора", НСтр("ru = 'Перемещение денег (план)'"));
				СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", НСтр("ru = 'Заявка на расход денег'"));
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
				СписокОснований.Добавить("Документ.НачисленияПоКредитамИЗаймам.ФормаВыбора", НСтр("ru = 'Начисления по кредитам и займам'"));
				СписокОснований.Добавить("Документ.ДоговорКредитаИЗайма.ФормаВыбора", НСтр("ru = 'Договор кредита (займа)'"));
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
				СписокОснований.Добавить("Документ.ПередачаТоваровМеждуОрганизациями.ФормаВыбора", НСтр("ru = 'Передача товаров между организациями'"));
			КонецЕсли;
			
		КонецЕсли;
		// Конец МобильноеПриложение
	
		Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя Тогда
			СписокОснований.Очистить();
			Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
				СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", НСтр("ru = 'Заявка на расход денег'"));
			КонецЕсли;
		КонецЕсли; 
	
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеНаСчет(ИмяФормы) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРабот") Тогда
			СписокОснований.Добавить("Документ.АктВыполненныхРабот.ФормаВыбора", НСтр("ru = 'Акт выполненных работ'"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("УчетВнеоборотныхАктивов") Тогда
			СписокОснований.Добавить("Документ.ПередачаВА.ФормаВыбора", НСтр("ru = 'Продажа имущества'"));
		КонецЕсли;
		СписокОснований.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", НСтр("ru = 'Расходная накладная'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
			СписокОснований.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора", НСтр("ru = 'Прием и передача в ремонт'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
			СписокОснований.Добавить("Документ.НачисленияПоКредитамИЗаймам.ФормаВыбора", НСтр("ru = 'Начисления по кредитам и займам'"));
			СписокОснований.Добавить("Документ.ДоговорКредитаИЗайма.ФормаВыбора", НСтр("ru = 'Договор кредита (займа)'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			СписокОснований.Добавить("Документ.ПеремещениеДСПлан.ФормаВыбора", НСтр("ru = 'Перемещение денег (план)'"));
			СписокОснований.Добавить("Документ.ПоступлениеДСПлан.ФормаВыбора", НСтр("ru = 'Поступление денег (план)'"));
		КонецЕсли;
		СписокОснований.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", НСтр("ru = 'Заказ покупателя'"));
		СписокОснований.Добавить("Документ.СчетНаОплату.ФормаВыбора", НСтр("ru = 'Счет на оплату'"));
		
		СписокОснований.Добавить("Документ.НачислениеНалогов.ФормаВыбора", НСтр("ru = 'Начисление налогов'"));
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			СписокОснований.Добавить("Документ.ПередачаТоваровМеждуОрганизациями.ФормаВыбора", НСтр("ru = 'Передача товаров между организациями'"));
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ЛичныеСредстваПредпринимателя Тогда
			СписокОснований.Очистить();
			Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
				СписокОснований.Добавить("Документ.ПоступлениеДСПлан.ФормаВыбора", НСтр("ru = 'Поступление денег (план)'"));
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеВКассу(ИмяФормы) Тогда
		
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("НовыйМеханизмИнкассации") Тогда
			НовыйМеханизмИнкассации = ДополнительныеПараметры.НовыйМеханизмИнкассации;
		Иначе
			НовыйМеханизмИнкассации = Ложь;
		КонецЕсли;
		
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КассаККМ") Тогда
			ТипКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.КассаККМ, "ТипКассы");
		Иначе
			ТипКассы = Перечисления.ТипыКассККМ.ПустаяСсылка();
		КонецЕсли;
		
		СписокОснований.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", НСтр("ru = 'Заказ покупателя'"));
		СписокОснований.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", НСтр("ru = 'Расходная накладная'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
			СписокОснований.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора", НСтр("ru = 'Прием и передача в ремонт'"));
		КонецЕсли;
		
		// МобильноеПриложение
		Если НЕ МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРабот") Тогда
				СписокОснований.Добавить("Документ.АктВыполненныхРабот.ФормаВыбора", НСтр("ru = 'Акт выполненных работ'"));
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("УчетВнеоборотныхАктивов") Тогда
				СписокОснований.Добавить("Документ.ПередачаВА.ФормаВыбора", НСтр("ru = 'Продажа имущества'"));
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
				СписокОснований.Добавить("Документ.НачисленияПоКредитамИЗаймам.ФормаВыбора", НСтр("ru = 'Начисления по кредитам и займам'"));
				СписокОснований.Добавить("Документ.ДоговорКредитаИЗайма.ФормаВыбора", НСтр("ru = 'Договор кредита (займа)'"));
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
				СписокОснований.Добавить("Документ.ПеремещениеДСПлан.ФормаВыбора", НСтр("ru = 'Перемещение денег (план)'"));
				СписокОснований.Добавить("Документ.ПоступлениеДСПлан.ФормаВыбора", НСтр("ru = 'Поступление денег (план)'"));
			КонецЕсли;
			СписокОснований.Добавить("Документ.СчетНаОплату.ФормаВыбора", НСтр("ru = 'Счет на оплату'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") Тогда
			СписокОснований.Добавить("Документ.ВыемкаНаличных.ФормаВыбора", НСтр("ru = 'Выемка денег'"));
			Если ТипКассы <> Перечисления.ТипыКассККМ.ФискальныйРегистратор ИЛИ НЕ НовыйМеханизмИнкассации Тогда
				СписокОснований.Добавить("Документ.ОтчетОРозничныхПродажах.ФормаВыбора", НСтр("ru = 'Отчет о розничных продажах'"));
			КонецЕсли;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			СписокОснований.Добавить("Документ.ПередачаТоваровМеждуОрганизациями.ФормаВыбора", НСтр("ru = 'Передача товаров между организациями'"));
		КонецЕсли;
		// Конец МобильноеПриложение
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ЛичныеСредстваПредпринимателя Тогда
			СписокОснований.Очистить();
			Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
				СписокОснований.Добавить("Документ.ПоступлениеДСПлан.ФормаВыбора", НСтр("ru = 'Поступление денег (план)'"));
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоОперацияПоПлатежнымКартам(ИмяФормы) Тогда
		
		Если ПолучитьФункциональнуюОпцию("УчетВнеоборотныхАктивов") Тогда
			СписокОснований.Добавить("Документ.ПередачаВА.ФормаВыбора", НСтр("ru = 'Продажа имущества'"));
		КонецЕсли;
		
		СписокОснований.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", НСтр("ru = 'Расходная накладная'"));
		СписокОснований.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", НСтр("ru = 'Приходная накладная'"));
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРабот") Тогда
			СписокОснований.Добавить("Документ.АктВыполненныхРабот.ФормаВыбора", НСтр("ru = 'Акт выполненных работ'"));
		КонецЕсли;
	
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
			СписокОснований.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора", НСтр("ru = 'Прием и передача в ремонт'"));
		КонецЕсли;
		СписокОснований.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", НСтр("ru = 'Заказ покупателя'"));
		Если ВидОперации = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю Тогда
			СписокОснований.Добавить("Документ.ОперацияПоПлатежнымКартам.ФормаВыбора", НСтр("ru = 'Операция по платежным картам'"));
		КонецЕсли;
		СписокОснований.Добавить("Документ.СчетНаОплату.ФормаВыбора", НСтр("ru = 'Счет на оплату'"));
		СписокОснований.Добавить("Документ.ПоступлениеДСПлан.ФормаВыбора", НСтр("ru = 'Поступление денег (план)'"));
		
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(ИмяФормы) Тогда
		
		СписокОснований.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", НСтр("ru = 'Заказ поставщику'"));
		СписокОснований.Добавить("Документ.НачислениеНалогов.ФормаВыбора", НСтр("ru = 'Начисление налогов'"));
		СписокОснований.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", НСтр("ru = 'Счет на оплату (полученный)'"));
		СписокОснований.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", НСтр("ru = 'Приходная накладная'"));
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", НСтр("ru = 'Заявка на расход денег'"));
		КонецЕсли;
	
	КонецЕсли;
	
	СписокОснований.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат СписокОснований;
	
КонецФункции

// Процедура обновляет содержимое поля "НалоговыйУчет" табличной части "ЭквайринговыеОперации"
//
// Параметры:
//  Форма				 - Форма	 - Форма денежного документа
//
Процедура ОбновитьОтображениеНалоговогоУчетаВТабличнойЧасти(Форма) Экспорт
	
	Для каждого СтрокаЭквайринг Из Форма.Объект.ЭквайринговыеОперации Цикл
		СтрокаЭквайринг.НалоговыйУчет = РаботаСФормойДокументаКлиентСервер.ПредставлениеНалоговогоУчетаСтроки(
			СтрокаЭквайринг, Форма.ВидимостьУчитыватьВНУ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет информацию по кредиту займу на сервере
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//  ПолучитьДанныеСотрудника - Булево	 - Признак необходимости получения данных сотрудника
//
Процедура ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(Форма, ПолучитьДанныеСотрудника = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ПолучитьДанныеСотрудника Тогда
		СтруктураДанные = ПолучитьДанныеСотрудникПриИзменении(Объект.Подотчетник, Объект.Дата, Объект.Организация);
		Объект.ДоговорКредитаЗайма = СтруктураДанные.ДоговорКредитаЗайма;
	КонецЕсли;
	
	НастроитьЭлементДоговораЗайма(Форма);
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		
		Элементы.НадписьИнформацияПоКредиту.Заголовок = НСтр("ru = '<Выберите договор кредита (займа)>'");
		Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = "";
		
		Элементы.НадписьИнформацияПоКредиту.ЦветТекста = ЦветаСтиля.ЦветРамки;
		Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = ЦветаСтиля.ЦветРамки;
		
		Возврат;
		
	КонецЕсли;
	
	Если 	Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику Тогда
		ЗаполнитьИнформациюПоВыдачеЗайма(Форма);
	КонецЕсли;
	
	Если 	Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником Тогда
		ЗаполнитьИнформациюПоВозвратуЗайма(Форма);
	КонецЕсли;
	
	Если 	Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам Тогда
		ЗаполнитьИнформациюПоОплатеКредита(Форма);
	КонецЕсли;
	
	Если 	Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам Тогда
		ЗаполнитьИнформациюПоПоступлениюКредита(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает статью в расшифровке платежа
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура УстановитьСтатьиДДСВРасшифровкеПлатежа(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.РасчетыПоКредитам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		ТекущаяСтрока.СтатьяДДС = ДвиженияДенежныхСредствВызовСервера.ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(ТекущаяСтрока.Договор,
				ТекущаяСтрока.ДокументПланирования,
				ТекущаяСтрока.СтатьяДДС);
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтатьяДДС) И ЗначениеЗаполнено(Объект.Статья) Тогда
			ТекущаяСтрока.СтатьяДДС = Объект.Статья;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает статью в форме документа
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура УстановитьСтатьюДДС(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	СтруктураДанных = ПолучитьДанныеСтатьиДДС(Форма);
	
	Объект.Статья = СтруктураДанных.Статья;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "УчитыватьВНУ") Тогда
		Объект.УчитыватьВНУ = СтруктураДанных.УчитыватьВНУ;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает данные статьи
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
// 
// Возвращаемое значение:
//  Структура - Данные статьи
//
Функция ПолучитьДанныеСтатьиДДС(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	СтруктураДляВозврата = Новый Структура;
	
	Если НЕ Объект.Контрагент.Пустая() И НЕ Объект.Контрагент.СтатьяДДСПоУмолчанию.Пустая() Тогда
		СтруктураДляВозврата.Вставить("Статья", Объект.Контрагент.СтатьяДДСПоУмолчанию);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ЛичныеСредстваПредпринимателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ЛичныеСредстваПредпринимателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ЛичныеСредстваПредпринимателя);
	Иначе
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.Прочее);
	КонецЕсли;
	
	СтруктураДляВозврата.Вставить("УчитыватьВНУ",
		РегламентированнаяОтчетностьУСН.НужноУчитыватьВНУ(СтруктураДляВозврата.Статья, Объект.ВидОперации, Объект.Организация, Объект.Дата));
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

// Процедура выполняет общие действия при изменении вида операции в денежных документах
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура ВидОперацииПриИзмененииНаСервере(Форма) Экспорт
	
	ЗаполнитьКорреспонденцию(Форма);
	
КонецПроцедуры

#Область СтавкиНДС

// Процедура заполняет ставку НДС по организации
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//
Процедура ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка Тогда
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.КассаККМ.СтруктурнаяЕдиница, Объект.Дата);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника Тогда
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
	Иначе
		Объект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	КонецЕсли;
	
	Если НалогообложениеПередИзменением <> Объект.НалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС(Форма);
	Иначе
		РасчетыРаботаСФормамиВызовСервера.ЗаполнитьСтавкуНДСПоУмолчанию(Форма.СтавкаНДСПоУмолчанию, Форма.СтавкаНДСПоУмолчаниюЧисло, Объект.НалогообложениеНДС, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет ставку НДС по налогообложению НДС
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//  ВосстанавливатьСтавкиНДС - Булево	 - Признак необходимости восстанавливать ставки НДС
//
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(Форма, ВосстанавливатьСтавкиНДС = Истина) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьСтавкуНДСПоУмолчанию(Форма.СтавкаНДСПоУмолчанию, Форма.СтавкаНДСПоУмолчаниюЧисло, Объект.НалогообложениеНДС, Объект.Организация);
	
	Если ФормыДокументовДеньгиКлиентСервер.ВидОперацииНДС(Объект.ВидОперации) Тогда
		
		ОблагаетсяНДС = (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
		
		Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = ОблагаетсяНДС;
		Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = ОблагаетсяНДС;
		Элементы.СуммаНДС.Видимость = ОблагаетсяНДС;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументыПланированияРасшифровкаПлатежаСтавкаНДС", "Видимость", ОблагаетсяНДС);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументыПланированияРасшифровкаПлатежаСуммаНДС", "Видимость", ОблагаетсяНДС);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетФактураНадпись", "Видимость", ОблагаетсяНДС);
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Форма.СтавкаНДСПоУмолчанию);
		
		Если ВосстанавливатьСтавкиНДС Тогда
			
			Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
				
				Если ОблагаетсяНДС Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию);
					СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = Форма.СтавкаНДСПоУмолчанию;
					СтрокаТабличнойЧасти.СуммаНДС = 0;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДокументыПланирования(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ШапкаТабличнаяЧасть

// Процедура заполняет параметры диалога шапка табличная часть
//
// Параметры:
//  ПараметрыФормы	 - Структура	 - Параметры формы документа
//  ПараметрыДиалога - Структура	 - Параметры диалога
//
Процедура ЗаполнитьПараметрыДиалогаШапкаТабличнаяЧасть(ПараметрыФормы, ПараметрыДиалога) Экспорт
	
	Если ПараметрыФормы.Свойство("ПоложениеЭквайринговогоТерминала") Тогда

		Доступность = Новый Структура("ПоложениеЭквайринговогоТерминалаВБанковскихДокументах", Ложь);
		ПараметрыДиалога.Вставить("Доступность", Доступность);
		ПараметрыДиалога.Вставить("ПоложениеЭквайринговогоТерминалаВБанковскихДокументах",
			ПараметрыФормы.ПоложениеЭквайринговогоТерминала);
		
		РасчетКомиссииВОтчетеЭквайера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыФормы.ДоговорЭквайринга,
			"РасчетКомиссииВОтчетеЭквайера");
		Если РасчетКомиссииВОтчетеЭквайера <> Неопределено И НЕ РасчетКомиссииВОтчетеЭквайера Тогда
			Доступность.Вставить("ПоложениеЭквайринговогоТерминалаВБанковскихДокументах", Истина);
		Иначе
			Если ЗначениеЗаполнено(ПараметрыФормы.ДоговорЭквайринга) Тогда
				
				СсылкаНаДоговор = ПолучитьНавигационнуюСсылку(ПараметрыФормы.ДоговорЭквайринга, "РасчетКомиссииВОтчетеЭквайера");
					
				ШаблонСтроки =
					НСтр("ru = 'Опция доступна, если в настройке <a href = ""%1"">договора</a> эквайринга в разделе Эквайринг
					| в поле Комиссия выбрано значение ""Рассчитывается в операции по платежной карте""'");
				ШаблонСтроки = СтрЗаменить(ШаблонСтроки, Символы.ПС, "");
				ТекстПодсказки = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки, СсылкаНаДоговор);
		
				РасширенныеПодсказки = Новый Структура("ГруппаПоложениеЭквайринговогоТерминалаВБанковскихДокументах",
					ТекстПодсказки);
				ПараметрыДиалога.Вставить("РасширенныеПодсказки", РасширенныеПодсказки);
			КонецЕсли;
			ПараметрыДиалога.ПоложениеЭквайринговогоТерминалаВБанковскихДокументах =
				Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		
		ПараметрыДиалога.Вставить("ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах", ПараметрыФормы.ПоложениеНастроекНалоговогоУчета);
		
	КонецЕсли;
	
	Если ПараметрыФормы.Свойство("ПоложениеСтатьи") Тогда
		ПараметрыДиалога.Вставить("ПоложениеСтатьи", ПараметрыФормы.ПоложениеСтатьи);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ПараметрыФормы.Свойство("ПоложениеПроекта") Тогда
		ПараметрыДиалога.Вставить("ПоложениеПроекта", ПараметрыФормы.ПоложениеПроекта);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") И ПараметрыФормы.Свойство("ПоложениеПодразделения") Тогда
		ПараметрыДиалога.Вставить("ПоложениеПодразделенияВДенежныхДокументах", ПараметрыФормы.ПоложениеПодразделения);
	КонецЕсли;
	
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	
КонецПроцедуры

// Процедура выполняет общие действия команды шапка табличная часть завершение
//
// Параметры:
//  Форма	 - Форма	 - Форма денежного документа
//  Результат	 - Структура	 - Результат выполнения команды
//
Процедура ШапкаТабличнаяЧастьЗавершение(Форма, Результат) Экспорт
	
	Объект = Форма.Объект;
	
	Если Результат.Свойство("ПоложениеЭквайринговогоТерминалаВБанковскихДокументах") Тогда
		Объект.ПоложениеЭквайринговогоТерминала = Результат.ПоложениеЭквайринговогоТерминалаВБанковскихДокументах;
		Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
			Если Объект.ЭквайринговыеОперации.Количество() = 0 Тогда
				Объект.ЭквайринговыеОперации.Добавить();
			КонецЕсли; 
			Для каждого ОперацияЭквайринга Из Объект.ЭквайринговыеОперации Цикл
				 ОперацияЭквайринга.ЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах") Тогда
		Объект.ПоложениеНастроекНалоговогоУчета = Результат.ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах;
		Если Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			ЗаполнитьСтавкуНДСПоОрганизацииНалогообложениеНДС(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("ПоложениеСтатьи") Тогда
		Объект.ПоложениеСтатьи = Результат.ПоложениеСтатьи;
	КонецЕсли;
	
	Если Результат.Свойство("ПоложениеПроекта") Тогда
		Объект.ПоложениеПроекта = Результат.ПоложениеПроекта;
	КонецЕсли;
	
	Если Результат.Свойство("ПоложениеПодразделенияВДенежныхДокументах") Тогда
		Объект.ПоложениеПодразделения = Результат.ПоложениеПодразделенияВДенежныхДокументах;
	КонецЕсли;
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении(Форма);
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(Форма);
	УстановитьВидимостьОтПользовательскихНастроек(Форма);
	УстановитьВидимостьДокументыПланирования(Форма);
	
КонецПроцедуры

// Процедура устанавливает видимость элементов формы, в зависимости от выбранного положения реквизитов: "ВШапке" или "ВТабличнойЧасти"
//
// Параметры:
//  Форма				 - Форма	 - Форма денежного документа
//
Процедура УстановитьВидимостьОтПользовательскихНастроек(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
		
		Если НЕ Форма.ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг ИЛИ Форма.ДоговорЭквайринга.РасчетКомиссииВОтчетеЭквайера Тогда
			ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Иначе
			ПоложениеЭквайринговогоТерминала = Объект.ПоложениеЭквайринговогоТерминала;
		КонецЕсли;
		
		Если ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайрингаНадпись", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайринга", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыйТерминал", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыеОперацииЭквайринговыйТерминал", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТерминалДокумент", "Заголовок", НСтр("ru = 'Терминал / Документ'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайрингаНадпись", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайринга", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыйТерминал", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыеОперацииЭквайринговыйТерминал", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТерминалДокумент", "Заголовок", НСтр("ru = 'Документ'"));
		КонецЕсли;
		
		Если Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНалоги",  "Заголовок", НСтр("ru = 'Заказ / Налоговый учет'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНалоги",  "Заголовок", НСтр("ru = 'Заказ'"));
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
		
		Если НЕ Форма.ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг ИЛИ Форма.ДоговорЭквайринга.РасчетКомиссииВОтчетеЭквайера Тогда
			ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Иначе
			ПоложениеЭквайринговогоТерминала = Объект.ПоложениеЭквайринговогоТерминала;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайрингаНадпись", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайринга", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыйТерминал", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыеОперацииЭквайринговыйТерминал", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТерминалДокумент", "Заголовок", НСтр("ru = 'Документ'"));
		
		Если Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНалоги",  "Заголовок", НСтр("ru = 'Заказ / Налоговый учет'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНалоги",  "Заголовок", НСтр("ru = 'Заказ'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") Тогда
		ПроектВТабличнойЧасти = Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		Элементы.Проект.Видимость = НЕ ПроектВТабличнойЧасти;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументыПланированияРасшифровкаПлатежаПроект", "Видимость", ПроектВТабличнойЧасти);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаПлатежаПрочиеРасчетыПроект", 		"Видимость", ПроектВТабличнойЧасти);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыплатаЗаработнойПлатыПроект", 					"Видимость", ПроектВТабличнойЧасти);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаПлатежаПроект", 						"Видимость", ПроектВТабличнойЧасти);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасчетыСПодотчетникомРасшифровкаПлатежаПроект", "Видимость", ПроектВТабличнойЧасти);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		ПодразделениеВТабличнойЧасти = Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		Элементы.Подразделение.Видимость = НЕ ПодразделениеВТабличнойЧасти;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументыПланированияРасшифровкаПлатежаПодразделение", "Видимость", ПодразделениеВТабличнойЧасти);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаПлатежаПрочиеРасчетыПодразделение", 		   "Видимость", ПодразделениеВТабличнойЧасти);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыплатаЗаработнойПлатыПодразделение", 				   "Видимость", ПодразделениеВТабличнойЧасти);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаПлатежаПодразделение", 					   "Видимость", ПодразделениеВТабличнойЧасти);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасчетыСПодотчетникомРасшифровкаПлатежаПодразделение", "Видимость", ПодразделениеВТабличнойЧасти);
	КонецЕсли;
	
	СтатьяВТабличнойЧасти = Объект.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	
	Элементы.Статья.Видимость = НЕ СтатьяВТабличнойЧасти;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументыПланированияРасшифровкаПлатежаСтатьяДДС", "Видимость", СтатьяВТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаПлатежаПрочиеРасчетыСтатьяДДС", "Видимость", СтатьяВТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаПлатежаРасчетыПоКредитамСтатьяДДС", "Видимость", СтатьяВТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасшифровкаПлатежаСтатьяДДС", "Видимость", СтатьяВТабличнойЧасти);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасчетыСПодотчетникомРасшифровкаПлатежаСтатьяДДС", "Видимость", СтатьяВТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти

// Функция возвращает доступности изменения статуса оплаты
// 
// Возвращаемое значение:
//  Булево - Признак доступности изменения статуса оплаты
//
Функция РазрешеноМенятьСтатусОплаты() Экспорт
	
	Возврат Пользователи.РолиДоступны("УтверждениеЗаявокНаРасходДенег");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьВидимостьРеквизитовКассовыйМетодУчетаДоходовИРасходов(Объект, Форма)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
		
		Если 	Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги 
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ЗарплатаСотруднику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Зарплата Тогда
			
			Форма.Элементы.НаправлениеДеятельности.Видимость = Форма.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовВЗависимостиОтВидаОперацииПСПК(Форма, ПриСозданииНаСервере = Ложь)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	ВидОперации = Объект.ВидОперации;
	
	Если    ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Истина;
		Элементы.РасшифровкаПлатежаПодбор.Видимость = Истина;
		Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Истина;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Покупатель'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетКонтрагента", "Видимость", Истина);
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			УстановитьВидимостьНадписиСчетФактура(Форма, Ложь);
		Иначе
			УстановитьВидимостьНадписиСчетФактура(Форма, Истина);
		КонецЕсли;
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		
		Если НЕ Константы.УчетПоКомпании.Получить() Тогда
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
			НовыйМассив.Добавить(НоваяСвязь);
		КонецЕсли;
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.РасшифровкаПлатежаДоговор.СвязиПараметровВыбора = НовыеСвязи;
		
		Элементы.СуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
		Элементы.СуммаРасчетов.Видимость = НЕ Форма.УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Всего'");
		
		Элементы.СуммаНДС.Видимость = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
		Элементы.ГруппаПомощникИВариантЗаполнения.Видимость = Истина;
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
		
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.РасчетыСКонтрагентом.Видимость = Истина;
		Элементы.РасшифровкаПлатежаПодбор.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Поставщик'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетКонтрагента", "Видимость", Истина);
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			УстановитьВидимостьНадписиСчетФактура(Форма, Ложь);
		Иначе
			УстановитьВидимостьНадписиСчетФактура(Форма, Истина);
		КонецЕсли;
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		Элементы.СуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
		Элементы.СуммаРасчетов.Видимость = НЕ Форма.УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Всего'");
		
		Элементы.СуммаНДС.Видимость = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
		Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаРучноеЗаполнение;
		Элементы.РасчетыСКонтрагентом.Заголовок = НСтр("ru = 'Зачет долгов'");
		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПодотчетника
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника Тогда
		
		Элементы.РасчетыСПодотчетником.Видимость = Истина;
		Элементы.Подотчетник.Видимость = Истина;
		Элементы.Документ.Видимость = Истина;
		Элементы.СуммаПлатежа.Видимость = Истина;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.НалогообложениеНДС.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПокупкаВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты Тогда
		
		Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеНаСчет(Форма) Тогда
			Если УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов() Тогда
				Элементы.ГруппаКонтрагент.Видимость = Истина;
				Элементы.Контрагент.Заголовок = НСтр("ru = 'Контрагент'");
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПокупкаВалютыДоговор", "Видимость", Истина);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ПокупкаВалюты.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Истина;
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок =  НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		
		ОбновитьОтображениеЭлементовПокупкаВалюты(Форма);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОтПродажиВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПоступлениеОтПродажиВалюты Тогда
		
		Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеНаСчет(Форма) Тогда
			Если УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов() Тогда
				Элементы.ГруппаКонтрагент.Видимость = Истина;
				Элементы.Контрагент.Заголовок = НСтр("ru = 'Контрагент'");
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродажаВалютыДоговор", "Видимость", Истина);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ПродажаВалюты.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Истина;
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок =  НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		
		ОбновитьОтображениеЭлементовПродажаВалюты(Форма);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.Налоги") Тогда
		
		Элементы.ВидНалога.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок =  НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		
	// Эквайринг
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам") Тогда
		
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Банк-эквайер'");
		Элементы.СчетКонтрагента.Видимость = Истина;
		
		Элементы.ЭквайринговыйТерминал.Видимость = Истина;
		Элементы.ДоговорЭквайрингаНадпись.Видимость = Истина;
		
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		Элементы.РасчетыПоЭквайрингу.Видимость = Истина;
		Элементы.СуммаКомиссииЭквайринг.Видимость = Истина;
		
		
		Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
			Терминал = Объект.ЭквайринговыеОперации[0].ЭквайринговыйТерминал;
		Иначе
			Терминал = Объект.ЭквайринговыйТерминал;
		КонецЕсли;
		
		ЗаполнитьДоговорЭквайринга(Объект, Терминал, Форма);
		
		Если Форма.ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
			Элементы.СуммаПлатежа.Видимость = Ложь;
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Истина;
			Элементы.СуммаКомиссииЭквайринг.Видимость = Истина;
			
			Элементы.ЭквайринговыеОперации.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Истина;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru = 'Сумма/комиссия'");
			Элементы.СуммаКомиссииДокумента.Видимость = Истина;
			
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Истина;
			
			Элементы.СтраницыВидовОпераций.ТекущаяСтраница = Элементы.РасчетыПоЭквайрингу;
		Иначе
			Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
			Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Ложь;
			Элементы.СуммаКомиссииЭквайринг.Видимость = Ложь;
			
			Элементы.ЭквайринговыеОперации.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Ложь;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru = 'Сумма/комиссия'");
			Элементы.СуммаКомиссииДокумента.Видимость = Истина;
		КонецЕсли;
		
		Если Форма.ДоговорЭквайринга.РасчетКомиссииВОтчетеЭквайера Тогда
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Ложь;
		Иначе
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма / Комиссия)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма / Комиссия)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Истина;
		КонецЕсли;
		
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		
		Если Форма.ТипСчетаЗатратШапка = Перечисления.ТипыСчетов.Расходы Тогда
			Элементы.ПодразделениеЗатраты.Видимость = Истина;
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Истина;
		Иначе
			Элементы.ПодразделениеЗатраты.Видимость = Ложь;
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Ложь;
		КонецЕсли;
		
	// Конец Эквайринг
	
	// Кредиты
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам") Тогда
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Банк'");
		Элементы.СчетКонтрагента.Видимость = Истина;
		
		Элементы.ЭквайринговыйТерминал.Видимость = Истина;//Ложь;
		Элементы.ДоговорЭквайринга.Видимость = Истина;
		
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		Элементы.РасчетыПоЭквайрингу.Видимость = Истина;
		Элементы.СуммаКомиссииЭквайринг.Видимость = Истина;
		
		// Заполнение реквизита формы для отборов
		Если ЗначениеЗаполнено(Форма.ДоговорЭквайринга) Тогда
			МассивТерминалов = ЭквайринговыеОперацииСервер.ПолучитьТерминалыПоДоговору(Форма.ДоговорЭквайринга);
			Если МассивТерминалов.Количество() > 0 Тогда
				ЭквайринговыйТерминал = МассивТерминалов[0];
				Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
					Для Каждого ЭквайринговаяОперация Из Объект.ЭквайринговыеОперации Цикл
						ЭквайринговаяОперация.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
					КонецЦикла;
				Иначе
					Объект.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
				Форма.ДоговорЭквайринга = Объект.ЭквайринговыеОперации[0].ЭквайринговыйТерминал.Договор;
			Иначе
				Форма.ДоговорЭквайринга = Объект.ЭквайринговыйТерминал.Договор;
			КонецЕсли; 
		КонецЕсли;
		
		Если Форма.ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
			Элементы.СуммаПлатежа.Видимость = Ложь;
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Истина;
			Элементы.СуммаКомиссииЭквайринг.Видимость = Истина;
			
			Элементы.ЭквайринговыеОперации.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Истина;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru = 'Сумма/комиссия'");
			Элементы.СуммаКомиссииДокумента.Видимость = Истина;
			
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Истина;
		Иначе
			Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
			Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Ложь;
			Элементы.СуммаКомиссииЭквайринг.Видимость = Ложь;
			
			Элементы.ЭквайринговыеОперации.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Ложь;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru = 'Сумма/комиссия'");
			Элементы.СуммаКомиссииДокумента.Видимость = Истина;
		КонецЕсли;
		
		Если Форма.ДоговорЭквайринга.РасчетКомиссииВОтчетеЭквайера Тогда
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Ложь;
		Иначе
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма / Комиссия)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма / Комиссия)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Истина;
		КонецЕсли;
		
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		
		Если Форма.ТипСчетаЗатратШапка = Перечисления.ТипыСчетов.Расходы Тогда
			Элементы.ПодразделениеЗатраты.Видимость = Истина;
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Истина;
		Иначе
			Элементы.ПодразделениеЗатраты.Видимость = Ложь;
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Ложь;
		КонецЕсли;
	// Конец Кредиты
	
	// Прочие расчеты
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
		
		Элементы.Корреспонденция.Видимость = Истина;
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Форма, Ложь);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты Тогда
		
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.РасчетыПрочие.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Истина;
		Элементы.СуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
		Элементы.СуммаРасчетов.Видимость = НЕ Форма.УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Всего'");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Контрагент'");
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Истина;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Форма, Ложь);
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Идентификатор = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам") Тогда
		
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Банк'");
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Ложь;
		
		
		Элементы.ДоговорКредита.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Истина;
		Элементы.ВалютаДенежныхСредств.Доступность = Ложь;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(Форма);
		
		Элементы.ГруппаИнформацияПоДоговоруКредитаЗайма.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником") Тогда
		
		Элементы.Сотрудник.Видимость = Истина;
		Элементы.РасчетыПоКредитам.Заголовок = НСтр("ru = 'Расчеты по займам'");
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.НалогообложениеНДС.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Истина;
		
		Элементы.ДоговорЗаймаСотруднику.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруЗайма.Видимость = Истина;
		Элементы.ВалютаДенежныхСредств.Доступность = Ложь;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(Форма);
		
		Элементы.ГруппаИнформацияПоДоговоруКредитаЗайма.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаРасчетов.Видимость = Истина;
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Сумма расчетов'");
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
	// Конец Прочие расчеты
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ВзносНаличными") Тогда
		
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.Касса.Видимость = Истина;
		
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета") Тогда
		
		Элементы.СчетПлательщика.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты") Тогда
		
		Элементы.ДоговорСАгентом.Видимость = Истина;
		
		Элементы.РасчетыСАгентом.Видимость = Истина;
		
		// Итоговые суммы
		Элементы.СуммаПлатежа.Видимость = Ложь;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаПлатежаАгент.Видимость = Истина;
		Элементы.СуммаУдержаноАгентом.Видимость = Истина;
		Элементы.СуммаНДС.Видимость = Ложь;
		
		Элементы.ДобавитьДополнительныйРеквизитОбработкаМенеджерПодсказок_РасчетыСКурьерскойКомпанией.Видимость = Истина;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Контрагент'");
		
		Элементы.ДоговорСАгентом.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.ДоговорСАгентом.Заголовок = ?(Форма.УчетВалютныхОпераций, НСтр("ru = 'Договор (руб.)'"), НСтр("ru = 'Договор'"));
		
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Форма, Ложь);
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Идентификатор = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Элементы.СуммаДокумента.КнопкаВыпадающегоСписка = Истина;
		
		// НДС
		Элементы.СтавкаНДСРасчетыСАгентом.Видимость = Истина;
		Элементы.СуммаНДСРасчетыСАгентом.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка") Тогда
		
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.КассаККМ.Видимость = Истина;
		Элементы.НалогообложениеНДС.Видимость = Истина;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСтавкаНДС.Видимость = Объект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаНДС.Видимость = Объект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			Элементы.ГруппаРасшифровкаПлатежаОбщая.Заголовок = НСтр("ru = 'Планирование, НДС'");
		Иначе
			Элементы.ГруппаРасшифровкаПлатежаОбщая.Заголовок = НСтр("ru = 'НДС'");
		КонецЕсли;
		
		Элементы.СуммаПлатежа.Видимость = Истина;
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет") Тогда
		
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.НаправлениеДеятельности.Видимость = Истина;
		Элементы.РозничнаяВыручкаСуммовойУчетСтруктурнаяЕдиница.Видимость = Истина;
		Элементы.НалогообложениеНДС.Видимость = Истина;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСтавкаНДС.Видимость = Объект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаНДС.Видимость = Объект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			Элементы.ГруппаРасшифровкаПлатежаОбщая.Заголовок = НСтр("ru = 'Планирование, НДС'");
		Иначе
			Элементы.ГруппаРасшифровкаПлатежаОбщая.Заголовок = НСтр("ru = 'НДС'");
		КонецЕсли;
		
		Элементы.СуммаПлатежа.Видимость = Истина;
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеВКассу.ПолучениеНаличныхВБанке") Тогда
		
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.СчетОрганизации.Видимость = Истина;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаНДС.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам") Тогда
		
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Банк'");
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Ложь;
		
		Элементы.ДоговорКредита.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(Форма);
		
		Элементы.ГруппаИнформацияПоДоговоруКредитаЗайма.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником") Тогда
		
		Элементы.Сотрудник.Видимость = Истина;
		Элементы.РасчетыПоКредитам.Заголовок = НСтр("ru = 'Расчеты по займам'");
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.НалогообложениеНДС.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Истина;
		
		Элементы.ДоговорЗаймаСотруднику.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруЗайма.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(Форма);
		
		Элементы.ГруппаИнформацияПоДоговоруКредитаЗайма.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаРасчетов.Видимость = Истина;
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Сумма расчетов'");
		Элементы.СуммаНДС.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
		
	Иначе
		Элементы.ДоговорПлатежногоАгента.Видимость = Истина;
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		
	КонецЕсли;
	
	ДвижениеДенежныхСредствСервер.ОбработатьВидОперации(Форма);
	
	УстановитьВидимостьДокументыПланирования(Форма);
	НастроитьЭлементыРаспределенияДолговНаСервере(Форма);
	ОпределитьВидимостьНастроекУчетаВНалогообложении(Форма);
	УстановитьВидимостьОтПользовательскихНастроек(Форма);
	
КонецПроцедуры // УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации()

Процедура ЗаполнитьДоговорЭквайринга(Объект, Терминал, Форма)
	
	Если ЗначениеЗаполнено(Терминал) Тогда
		Форма.ДоговорЭквайринга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Терминал, "Договор");
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация)
		И Не ЗначениеЗаполнено(Форма.ДоговорЭквайринга) Тогда
		Форма.ДоговорЭквайринга =
			ЭквайринговыеОперацииСервер.ПолучитьДоговорЭквайринга(Объект.Контрагент, Объект.Организация);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДоговорЭквайринга()

Процедура УстановитьВидимостьНадписиСчетФактура(Форма, НоваяВидимость)
	
	Форма.Элементы.СчетФактураНадпись.Видимость = НоваяВидимость;
	
КонецПроцедуры

Процедура СброситьВидимостьЭлементовФормы(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.РасшифровкаПлатежаСуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
	Элементы.РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
	Элементы.РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
	
	Элементы.Корреспонденция.Видимость = Ложь;
	Элементы.Корреспонденция.Заголовок = НСтр("ru='Корреспонденция'");
	
	Элементы.ПрочиеРасчетыДоговор.Видимость = Ложь;
	
	Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
	
	Элементы.ГруппаИнформацияПоДоговоруКредитаЗайма.Видимость = Ложь;
	Элементы.РасчетыПоКредитам.Видимость = Ложь;
	Элементы.РасчетыПоКредитам.Заголовок = НСтр("ru='Расчеты по кредитам'");
	
	Элементы.ДоговорКредита.Видимость = Ложь;
	Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Ложь;
	
	Элементы.Документ.Видимость = Ложь;
	
	Элементы.РасчетыПрочие.Видимость = Ложь;
	
	Элементы.Подотчетник.Видимость = Ложь;
	Элементы.ГруппаКонтрагент.Видимость = Ложь;
	
	Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма'");
	Элементы.СуммаДокумента.КнопкаВыпадающегоСписка = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЗаймаСотруднику", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПоДоговоруЗайма", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сотрудник", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДС", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорПлатежногоАгента", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПомощникИВариантЗаполнения", "Видимость", Ложь);
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
		Элементы.РеквизитыДляПеречисленияНалога.Видимость = Ложь;
		Элементы.КПППолучателя.Видимость = Истина;
		Элементы.Касса.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.СуммаНДСИтог.Видимость = Ложь;
		Элементы.СтавкаНДС.Видимость = Ложь;
		Элементы.Договор.Видимость = Ложь;
		Элементы.Налог.Видимость = Ложь;
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходИзКассы(Форма)
		ИЛИ ФормыДокументовДеньгиКлиентСервер.ЭтоРасходСоСчета(Форма) 
		ИЛИ ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
		
		Элементы.ПериодРегистрации.Видимость = Ложь;
		Элементы.ВыплатыЗаработнойПлаты.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		Элементы.ВыплатаРегЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		// БЗКБ
		Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходИзКассы(Форма)
			Или ФормыДокументовДеньгиКлиентСервер.ЭтоРасходСоСчета(Форма)
			Или ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
			Элементы.ВыплатыРегламентированнойЗаработнойПлаты.Видимость = Ложь;
		КонецЕсли;
		// Конец БЗКБ
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВидНалогаИСрокУплаты", "Видимость", Ложь);
		
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходИзКассы(Форма) Тогда
		
		Элементы.НомерСумки.Видимость = Ложь;
		Элементы.КассаККМ.Видимость = Ложь;
		Элементы.СчетОрганизации.Видимость = Ложь;
		Элементы.ГруппаОписьСдаваемыхНаличныхДенег.Видимость = Ложь;
	
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходСоСчета(Форма) Тогда
		
		Элементы.ПодразделениеЗатраты.Видимость = Ложь;
		Элементы.НаправлениеДеятельностиЗатраты.Видимость = Ложь;
		
		Элементы.РасчетыПоЭквайрингу.Видимость = Ложь;
		Элементы.ЭквайринговыйТерминал.Видимость = Ложь;
		Элементы.ДоговорЭквайринга.Видимость = Ложь;
		Элементы.ДоговорЭквайрингаНадпись.Видимость = Ложь;
		Элементы.СуммаПлатежаЭквайринг.Видимость = Ложь;
		Элементы.СуммаКомиссииДокумента.Видимость = Ложь;
		
		Элементы.СчетПолучателя.Видимость = Ложь;
		Элементы.Касса.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеВКассу(Форма) Тогда
		
		Элементы.КассаККМ.Видимость = Ложь;
		Элементы.РозничнаяВыручкаСуммовойУчетСтруктурнаяЕдиница.Видимость = Ложь;
		Элементы.ПокупкаВалюты.Видимость = Ложь;
		Элементы.ПродажаВалюты.Видимость = Ложь;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаПлатежа.Видимость = Ложь;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
		Элементы.ДокументыПланированияРасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
		Элементы.СчетФактураНадпись.Видимость = Ложь;
		
		Элементы.СчетОрганизации.Видимость = Ложь;
		Элементы.РасчетыСПодотчетником.Видимость = Ложь;
		
	КонецЕсли;

	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеНаСчет(Форма) Тогда
		
		Элементы.ПокупкаВалюты.Видимость = Ложь;
		Элементы.ПродажаВалюты.Видимость = Ложь;
		Элементы.ВидНалога.Видимость = Ложь;
		
		Элементы.СчетКонтрагента.Видимость = Ложь;
		Элементы.СчетФактураНадпись.Видимость = Ложь;
		Элементы.ПокупкаВалютыДоговор.Видимость = Ложь;
		Элементы.ПродажаВалютыДоговор.Видимость = Ложь;
		
		// Эквайринг
		Элементы.РасчетыПоЭквайрингу.Видимость = Ложь;
		Элементы.ЭквайринговыйТерминал.Видимость = Ложь;
		Элементы.ДоговорЭквайринга.Видимость = Ложь;
		Элементы.ДоговорЭквайрингаНадпись.Видимость = Ложь;
		Элементы.СуммаПлатежаЭквайринг.Видимость = Ложь;
		Элементы.СуммаКомиссииЭквайринг.Видимость = Ложь;
		Элементы.СуммаКомиссииДокумента.Видимость = Ложь;
		// Конец Эквайринг
		
		// Курьерские компании и почта
		Элементы.ДоговорСАгентом.Видимость = Ложь;
		Элементы.СуммаПлатежаАгент.Видимость = Ложь;
		Элементы.СуммаУдержаноАгентом.Видимость = Ложь;
		Элементы.ДобавитьДополнительныйРеквизитОбработкаМенеджерПодсказок_РасчетыСКурьерскойКомпанией.Видимость = Ложь;
		Элементы.РасчетыСАгентом.Видимость = Ложь;
		Элементы.СтавкаНДСРасчетыСАгентом.Видимость = Ложь;
		Элементы.СуммаНДСРасчетыСАгентом.Видимость = Ложь;
		
		Элементы.СчетПлательщика.Видимость = Ложь;
		Элементы.Касса.Видимость = Ложь;
		Элементы.РасчетыСПодотчетником.Видимость = Ложь;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура УстановитьВидимостьВводаНаОсновании(Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "НовыйМеханизмИнкассации") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НовыйМеханизмИнкассации", Форма.Объект.НовыйМеханизмИнкассации);
		ДополнительныеПараметры.Вставить("КассаККМ", форма.Объект.КассаККМ);
	Иначе
		ДополнительныеПараметры = Неопределено;
	КонецЕсли;
	
	СписокОснований = ПолучитьСписокДляВыбораДокументаОснования(Форма.ИмяФормы, Форма.Объект.ВидОперации, ДополнительныеПараметры);
	Форма.Элементы.ДокументОснованиеНадпись.Видимость = СписокОснований.Количество() > 0;
	
КонецПроцедуры

Процедура УстановитьВидимостьИтогов(Форма)
	
	РасшифровкаВидна = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") 
					ИЛИ Форма.Объект.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
					ИЛИ Форма.Объект.ПоложениеПодразделения = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти
					ИЛИ Форма.Объект.ПоложениеПроекта = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
					
	Форма.Элементы.СуммаПлатежа.Видимость = РасшифровкаВидна;
	Форма.Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма'");
	Форма.Элементы.СуммаРасчетов.Видимость = Ложь;
	Форма.Элементы.СуммаНДС.Видимость = Ложь;
	
КонецПроцедуры

Процедура ОпределитьВидимостьНастроекУчетаВНалогообложенииДляОтчетаЭквайера(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
		И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам Тогда
		 Возврат;
	КонецЕсли; 
	
	Форма.ВидимостьУчитыватьВНУ = Элементы.ГруппаУчетВНУ.Видимость;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "Патент") Тогда
		Если НЕ Элементы.ГруппаУчетВНУ.Видимость Тогда
			Форма.ВидимостьПатент		  = Ложь;
		Иначе
			Форма.ВидимостьПатент		  = Элементы.Патент.Видимость;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		Элементы.НалогообложениеНДС.Видимость = Ложь;
		Элементы.ЭквайринговыеОперацииНалоговыйУчет.Видимость = Истина;
	Иначе
		Элементы.НалогообложениеНДС.Видимость = Истина;
		Элементы.ЭквайринговыеОперацииНалоговыйУчет.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьОтображениеНалоговогоУчетаВТабличнойЧасти(Форма);
	
КонецПроцедуры

Процедура ОбновитьПредставлениеКурсовойРазницыПокупкаВалюты(Форма)
	
	ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	
	Если Форма.Объект.ВалютаДенежныхСредств = ВалютаУчета Тогда
		КурсоваяРазница = 0;
	Иначе
		КурсВалютыУчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУчета, Форма.Объект.Дата);
		СуммаВНациональнойВалюте = Форма.Объект.СуммаДокумента * Форма.КурсЦБ / Форма.КратностьЦБ;
		СуммаПоКурсуЦБ = Окр(СуммаВНациональнойВалюте / КурсВалютыУчета.Курс * КурсВалютыУчета.Кратность, 2);
		КурсоваяРазница = СуммаПоКурсуЦБ - Форма.Объект.СуммаУчета;
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = 'Курсовая разница %1 = %2 %3'");
	
	Если КурсоваяРазница > 0 Тогда
		ПредставлениеКурсовойРазницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НСтр("ru = '(доход)'"), КурсоваяРазница, Форма.ВалютаУчета.СимвольноеПредставление);
		Форма.Элементы.ДекорацияКурсоваяРазница.ЦветТекста = ЦветаСтиля.ЦветСуммыПоступления;
	ИначеЕсли КурсоваяРазница < 0 Тогда
		КурсоваяРазница = - КурсоваяРазница;
		ПредставлениеКурсовойРазницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НСтр("ru = '(расход)'"), КурсоваяРазница, Форма.ВалютаУчета.СимвольноеПредставление);
		Форма.Элементы.ДекорацияКурсоваяРазница.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
	Иначе // курсовой разницы нет
		ПредставлениеКурсовойРазницы = НСтр("ru = 'Курсовой разницы нет'");
		Форма.Элементы.ДекорацияКурсоваяРазница.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	КонецЕсли; 
	
	Форма.Элементы.ДекорацияКурсоваяРазница.Заголовок = ПредставлениеКурсовойРазницы;
	
КонецПроцедуры

Процедура ОбновитьПредставлениеКурсовойРазницыПродажаВалюты(Форма)
	
	Если Форма.Объект.ПродажаВалютыКратность = 0 Тогда
		Форма.Объект.ПродажаВалютыКратность = 1;
	КонецЕсли;
	
	Если Форма.КратностьЦБ = 0 Тогда
		Форма.КратностьЦБ = 1;
	КонецЕсли;
	
	КурсоваяРазница = Окр(Форма.Объект.СуммаУчета
		* (Форма.Объект.ПродажаВалютыКурс / Форма.Объект.ПродажаВалютыКратность - Форма.КурсЦБ / Форма.КратностьЦБ), 2);
	
	ШаблонПредставления = НСтр("ru = 'Курсовая разница %1 = %2 %3'");
	
	Если КурсоваяРазница > 0 Тогда
		СтрокаДоход = НСтр("ru = '(доход)'");
		ПредставлениеКурсовойРазницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			СтрокаДоход, КурсоваяРазница, Форма.ВалютаУчета.СимвольноеПредставление);
		Форма.Элементы.ДекорацияПродажаВалютыКурсоваяРазница.ЦветТекста = ЦветаСтиля.ЦветСуммыПоступления;
	ИначеЕсли КурсоваяРазница < 0 Тогда
		КурсоваяРазница = - КурсоваяРазница;
		СтрокаРасход = НСтр("ru = '(расход)'");
		ПредставлениеКурсовойРазницы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			СтрокаРасход, КурсоваяРазница, Форма.ВалютаУчета.СимвольноеПредставление);
		Форма.Элементы.ДекорацияПродажаВалютыКурсоваяРазница.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
	Иначе // курсовой разницы нет
		ПредставлениеКурсовойРазницы = НСтр("ru = 'Курсовой разницы нет'");
		Форма.Элементы.ДекорацияПродажаВалютыКурсоваяРазница.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	КонецЕсли; 
	
	Форма.Элементы.ДекорацияПродажаВалютыКурсоваяРазница.Заголовок = ПредставлениеКурсовойРазницы;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыВидовОпераций(Форма)
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходСоСчета(Форма) Тогда
		Форма.ВидОперацииПоставщику = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
		Форма.ВидОперацииЭквайринг = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты;
		Форма.ВидОперацииКредит = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит;
		Форма.ВидОперацииПокупателю = Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
		Форма.ВидОперацииВыдачаЗаймаСотруднику = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику;
		Форма.ВидОперацииНашейОрганизации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации;
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоРасходИзКассы(Форма) Тогда
		Форма.ВидОперацииПоставщику = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
		Форма.ВидОперацииПокупателю = Перечисления.ВидыОперацийРасходИзКассы.Покупателю;
		Форма.ВидОперацииВыдачаЗаймаСотруднику = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику;
		Форма.ВидОперацииНашейОрганизации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации;
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеВКассу(Форма) Тогда
		Форма.ВидОперацииОтПокупателя = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
		Форма.ВидОперацииОтПоставщика = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика;
		Форма.ВидОперацииВозвратЗаймаСотрудником = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником;
		Форма.ВидОперацииОтНашейОрганизации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтНашейОрганизации;
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеНаСчет(Форма) Тогда
		Форма.ВидОперацииОтПокупателя = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
		Форма.ВидОперацииЭквайринг = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам;
		Форма.ВидОперацииКредит = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам;
		Форма.ВидОперацииОтПоставщика = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика;
		Форма.ВидОперацииОтКурьерскойКомпанииПочты = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтКурьерскойКомпанииПочты;
		Форма.ВидОперацииВозвратЗаймаСотрудником = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником;
		Форма.ВидОперацииОтНашейОрганизации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтНашейОрганизации;
	КонецЕсли;
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоОперацияПоПлатежнымКартам(Форма) Тогда
		Форма.ВидОперацииОплата = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя;
		Форма.ВидОперацииВозврат = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВидовОпераций(Форма)
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоОперацияПоПлатежнымКартам(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ФормыДокументовДеньгиКлиентСервер.ТипДокументаСтрокой(Форма);
	Элементы = Форма.Элементы;
	ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций(ТипДокумента, Элементы.ВидОперации.СписокВыбора);
	
КонецПроцедуры

Процедура ВзаиморасчетыПриСозданииНаСервере(Форма)
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеНаСчет(Форма)
		ИЛИ ФормыДокументовДеньгиКлиентСервер.ЭтоПоступлениеВКассу(Форма) Тогда
		
		Если Форма.Объект.ВидОперации = Форма.ВидОперацииОтНашейОрганизации Тогда
			Форма.ВидОперацииПомощника = Форма.ВидОперацииОтНашейОрганизации;
		Иначе
			Форма.ВидОперацииПомощника = Форма.ВидОперацииОтПокупателя;
		КонецЕсли;
	Иначе
		Если Форма.Объект.ВидОперации = Форма.ВидОперацииНашейОрганизации Тогда
			Форма.ВидОперацииПомощника = Форма.ВидОперацииНашейОрганизации;
		Иначе
			Форма.ВидОперацииПомощника = Форма.ВидОперацииПоставщику;
		КонецЕсли;
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.ВзаиморасчетыДеньгиПриСозданииНаСервере(Форма);
	
КонецПроцедуры

Процедура ДобавитьПервуюСтрокуРасшифровкиПлатежа(Форма)
	
	Объект = Форма.Объект;
	
	Если ФормыДокументовДеньгиКлиентСервер.ВидОперацииБезРасшифровки(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.СпособРазнесенияОплатыДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент);
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю Тогда
			Объект.РасшифровкаПлатежа[0].ПризнакАванса = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьКурсаВалюты(Форма)
	
	Форма.Элементы.Курс.Видимость = (Форма.ВалютаДенежныхСредств <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту());
	
КонецПроцедуры

Процедура ЗаполнитьДоговорПоУмолчанию(Форма)
	
	Объект = Форма.Объект;
	
	Если ФормыДокументовДеньгиКлиентСервер.ВидОперацииБезДоговора(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Параметры = Неопределено Тогда
		ЗаполненПоОснованию = Ложь;
	Иначе
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Параметры, "ДокументОснование") Тогда
			ЗаполненПоОснованию = ЗначениеЗаполнено(Форма.Параметры.ДокументОснование);
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Параметры, "Основание") Тогда
			ЗаполненПоОснованию = ЗначениеЗаполнено(Форма.Параметры.Основание);
		Иначе
			ЗаполненПоОснованию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.РасшифровкаПлатежа.Количество() > 0 И НЕ ЗаполненПоОснованию Тогда
		Если НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
			МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
			СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Объект.Ссылка, Объект.ВидОперации);
			Объект.РасшифровкаПлатежа[0].Договор = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
				Объект.Контрагент, Объект.Организация, СписокВидовДоговоров);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
			КурсВалютыДоговора = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
				?(ЗначениеЗаполнено(Объект.Дата),  Объект.Дата, ТекущаяДатаСеанса()),
				Новый Структура("Валюта", Объект.РасшифровкаПлатежа[0].Договор.ВалютаРасчетов));
			Объект.РасшифровкаПлатежа[0].Курс = ?(КурсВалютыДоговора.Курс = 0, 1, КурсВалютыДоговора.Курс);
			Объект.РасшифровкаПлатежа[0].Кратность = ?(КурсВалютыДоговора.Кратность = 0, 1, КурсВалютыДоговора.Кратность);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКорреспонденцию(Форма)
	
	Объект = Форма.Объект;
	
	Если ФормыДокументовДеньгиКлиентСервер.ВидОперацииЛичныеСредстваПредпринимателя(Объект.ВидОперации) Тогда
		Объект.Корреспонденция = ПланыСчетов.Управленческий.НераспределеннаяПрибыль;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
		Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
	КонецЕсли;
	
	// Заполняем корреспонденцию, если она не отображается
	Если НЕ ПолучитьФункциональнуюОпцию("ОтображатьСчетаУчета") Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее Тогда
			
			Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеДоходы;
			
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.НаРасходы Тогда
			
			Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
			
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты Тогда
			
			Объект.Корреспонденция = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторамиИКредиторами;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛичныеСредстваПредпринимателяОчиститьОрганизацию(Форма)
	
	Объект = Форма.Объект;
	
	Если ФормыДокументовДеньгиКлиентСервер.ВидОперацииЛичныеСредстваПредпринимателя(Объект.ВидОперации) Тогда
		
		Если Объект.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Объект.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область КредитыЗаймы

Процедура НастроитьЭлементДоговораЗайма(Форма)
	
	Элементы = Форма.Элементы;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ДоговорЗаймаСотруднику") Тогда
		
		Элементы.ДоговорЗаймаСотруднику.Доступность = НЕ Форма.Объект.Подотчетник.Пустая();
		
		Если Элементы.ДоговорЗаймаСотруднику.Доступность Тогда
			Элементы.ДоговорЗаймаСотруднику.ПодсказкаВвода = "";
		Иначе
			Элементы.ДоговорЗаймаСотруднику.ПодсказкаВвода = НСтр("ru = 'Чтобы выбрать договор, выберите сотрудника'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДоговорКредита.Доступность = НЕ Форма.Объект.Контрагент.Пустая();
	Если Элементы.ДоговорКредита.Доступность Тогда
		Элементы.ДоговорКредита.ПодсказкаВвода = "";
	Иначе
		Элементы.ДоговорКредита.ПодсказкаВвода = НСтр("ru = 'Чтобы выбрать договор, выберите банк'");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеСотрудникПриИзменении(Сотрудник, Дата, Организация)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("ДоговорКредитаЗайма", Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Сотрудник, Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции

Процедура ЗаполнитьИнформациюПоВыдачеЗайма(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалПриход
		|ПОМЕСТИТЬ ВременнаяТаблицаВыданныеРанееСуммы
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
		|			,
		|			,
		|			,
		|			ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|				И Организация = &Организация) КАК РасчетыПоКредитамИЗаймамОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	СУММА(ВременнаяТаблицаВыданныеРанееСуммы.ОсновнойДолгВалПриход) КАК ОсновнойДолгВалПриход,
		|	ДоговорКредитаЗайма.СуммаДокумента
		|ИЗ
		|	ВременнаяТаблицаВыданныеРанееСуммы КАК ВременнаяТаблицаВыданныеРанееСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорКредитаИЗайма КАК ДоговорКредитаЗайма
		|		ПО ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов = ДоговорКредитаЗайма.ВалютаРасчетов
		|ГДЕ
		|	ДоговорКредитаЗайма.Ссылка = &ДоговорКредитаЗайма
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	ДоговорКредитаЗайма.СуммаДокумента";
	
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	Запрос.УстановитьПараметр("Организация", Форма.Компания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ШаблонСуммаЗайма = НСтр("ru='Сумма займа: %1 (%2)'");
	ШаблонОстатокДолга = НСтр("ru='Осталось выдать:  %1 (%2)'");
	ШаблонОстатокДолгаОсталосьВыдать = НСтр("ru='Осталось выдать:  %1 (%2). Уже выдано %3 (%4).'");
	Если Выборка.Следующий() Тогда
		НадписьИнформацияПоКредиту = СтрШаблон(ШаблонСуммаЗайма, Выборка.СуммаДокумента, Выборка.ВалютаРасчетов);
		Если Выборка.СуммаДокумента < Выборка.ОсновнойДолгВалПриход Тогда
			НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонОстатокДолгаОсталосьВыдать, 
													(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалПриход), 
													Выборка.ВалютаРасчетов, Выборка.ОсновнойДолгВалПриход, 
													Выборка.ВалютаРасчетов);
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ИначеЕсли Выборка.СуммаДокумента = Выборка.ОсновнойДолгВалПриход Тогда
			НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонОстатокДолга, 0, Выборка.ВалютаРасчетов);
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонОстатокДолгаОсталосьВыдать, 
													(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалПриход), 
													Выборка.ВалютаРасчетов, 
													Выборка.ОсновнойДолгВалПриход,
													Выборка.ВалютаРасчетов);
		КонецЕсли;
	Иначе
		НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонОстатокДолга, Объект.ДоговорКредитаЗайма.СуммаДокумента, Объект.ДоговорКредитаЗайма.ВалютаРасчетов);
		НадписьИнформацияПоКредиту = СтрШаблон(ШаблонСуммаЗайма, Объект.ДоговорКредитаЗайма.СуммаДокумента, Объект.ДоговорКредитаЗайма.ВалютаРасчетов);
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюПоВозвратуЗайма(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.Период КАК Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаОсновногоДолга КАК СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаПроцентов КАК СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаКомиссии КАК СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовНаименование
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПоследних(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ОсновнойДолгВалОстаток) КАК ОсновнойДолгВалОстаток,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов КАК ДоговорКредитаЗаймаВалютаРасчетов,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ПроцентыВалОстаток) КАК ПроцентыВалОстаток,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.КомиссияВалОстаток) КАК КомиссияВалОстаток,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовНаименование
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Остатки(, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК РасчетыПоКредитамИЗаймамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.Период КАК Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаОсновногоДолга КАК СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаПроцентов КАК СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаКомиссии КАК СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовНаименование
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПервых(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПервых";
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Запрос.УстановитьПараметр("ДатаСрезаПоследних", НачалоДня(Объект.Дата));
	Иначе
		Запрос.УстановитьПараметр("ДатаСрезаПоследних", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	Если Объект.ДоговорКредитаЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику Тогда
		Множитель = 1;
	Иначе
		Множитель = -1;
	КонецЕсли;
	
	ИнформацияПоКредитуЗайму = "";
	
	ВыборкаГрафик = МРезультатов[0].Выбрать();
	ВыборкаГрафикБудущиеМесяцы = МРезультатов[2].Выбрать();
	
	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Если ВыборкаГрафикБудущиеМесяцы.Следующий() Тогда
		
		Если НЕ (НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДатаСеанса(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафикБудущиеМесяцы.Период)) Тогда
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		НадписьИнформацияПоКредиту = НадписьИнформацияПоКредиту(Объект, ВыборкаГрафикБудущиеМесяцы);
		
	ИначеЕсли ВыборкаГрафик.Следующий() Тогда
		
		Если НЕ (НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДатаСеанса(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафик.Период)) Тогда
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
			
		НадписьИнформацияПоКредиту = НадписьИнформацияПоКредиту(Объект, ВыборкаГрафик);
		
	Иначе
		
		НадписьИнформацияПоКредиту = НСтр("ru='Дата платежа: <не определена>'");
		
	КонецЕсли;
	
	ШаблонНадписьОстатокДолга = НСтр("ru='Остаток долга: %1. Сумма процентов: %2. Комиссия: %3 (%4)'");
	
	ВыборкаОстатки = МРезультатов[1].Выбрать();
	ШаблонНадписьОстатокДолга = НСтр("ru='Остаток долга: %1. Сумма процентов: %2. Комиссия: %3 (%4)'");
	Если ВыборкаОстатки.Следующий() Тогда
		
		Остаток = Формат(Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток, "ЧДЦ=2; ЧН=0");
		СуммаПроцентов = Формат(Множитель * ВыборкаОстатки.ПроцентыВалОстаток, "ЧДЦ=2; ЧН=0");
		Комиссия = Формат(Множитель * ВыборкаОстатки.КомиссияВалОстаток, "ЧДЦ=2; ЧН=0");
		Валюта = ВыборкаОстатки.ВалютаРасчетовНаименование;
		
		НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонНадписьОстатокДолга, Остаток, СуммаПроцентов, Комиссия, Валюта);
		
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток >= 0 
			И (Множитель * ВыборкаОстатки.ПроцентыВалОстаток < 0 ИЛИ Множитель * ВыборкаОстатки.КомиссияВалОстаток < 0) Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток < 0 Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;
	Иначе
		
		НадписьОстатокДолгаПоКредиту = ИнформацияПоКредитуЗайму + НСтр("ru='Остаток долга: <не определен>'");
		
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
		
КонецПроцедуры

Процедура ЗаполнитьИнформациюПоОплатеКредита(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПоследних(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ОсновнойДолгВалОстаток) КАК ОсновнойДолгВалОстаток,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ПроцентыВалОстаток) КАК ПроцентыВалОстаток,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.КомиссияВалОстаток) КАК КомиссияВалОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Остатки(, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК РасчетыПоКредитамИЗаймамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПервых(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПервых";
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Запрос.УстановитьПараметр("ДатаСрезаПоследних", НачалоДня(Объект.Дата));
	Иначе
		Запрос.УстановитьПараметр("ДатаСрезаПоследних", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	Если Объект.ДоговорКредитаЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику Тогда
		Множитель = 1;
	Иначе
		Множитель = -1;
	КонецЕсли;
	
	ВыборкаГрафик = МРезультатов[0].Выбрать();
	ВыборкаГрафикБудущиеМесяцы = МРезультатов[2].Выбрать();
	
	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Если ВыборкаГрафикБудущиеМесяцы.Следующий() Тогда
		
		Если НЕ (НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДатаСеанса(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафикБудущиеМесяцы.Период)) Тогда
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		НадписьИнформацияПоКредиту = НадписьИнформацияПоКредиту(Объект, ВыборкаГрафикБудущиеМесяцы);
		
	ИначеЕсли ВыборкаГрафик.Следующий() Тогда
		
		Если НЕ (НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДатаСеанса(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафик.Период)) Тогда
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		НадписьИнформацияПоКредиту = НадписьИнформацияПоКредиту(Объект, ВыборкаГрафик);
		
	Иначе
		НадписьИнформацияПоКредиту = НСтр("ru='Дата платежа: <не определена>'");
	КонецЕсли;
	
	ВыборкаОстатки = МРезультатов[1].Выбрать();
	ШаблонНадписьОстатокДолга = НСтр("ru='Остаток долга: %1. Сумма процентов: %2. Комиссия: %3 (%4)'");
		
	Если ВыборкаОстатки.Следующий() Тогда
		
		Остаток = Формат(Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток, "ЧДЦ=2; ЧН=0");
		СуммаПроцентов = Формат(Множитель * ВыборкаОстатки.ПроцентыВалОстаток, "ЧДЦ=2; ЧН=0");
		Комиссия = Формат(Множитель * ВыборкаОстатки.КомиссияВалОстаток, "ЧДЦ=2; ЧН=0");
		Валюта = ВыборкаОстатки.ВалютаРасчетовПредставление;
		
		НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонНадписьОстатокДолга, Остаток, СуммаПроцентов, Комиссия, Валюта);
		
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток >= 0 
			И (Множитель * ВыборкаОстатки.ПроцентыВалОстаток < 0 ИЛИ Множитель * ВыборкаОстатки.КомиссияВалОстаток < 0) Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток < 0 Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;
	Иначе
		
		НадписьОстатокДолгаПоКредиту = НСтр("ru='Остаток долга: <не определен>'");
		
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
		
КонецПроцедуры

Процедура ЗаполнитьИнформациюПоПоступлениюКредита(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалРасход
		|ПОМЕСТИТЬ ВременнаяТаблицаВыданныеРанееСуммы
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
		|			,
		|			,
		|			,
		|			ДоговорКредитаЗайма = &ДоговорЗаймаСотруднику
		|				И Организация = &Организация) КАК РасчетыПоКредитамИЗаймамОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	СУММА(ВременнаяТаблицаВыданныеРанееСуммы.ОсновнойДолгВалРасход) КАК ОсновнойДолгВалРасход,
		|	ДоговорЗаймаСотруднику.СуммаДокумента
		|ИЗ
		|	ВременнаяТаблицаВыданныеРанееСуммы КАК ВременнаяТаблицаВыданныеРанееСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорКредитаИЗайма КАК ДоговорЗаймаСотруднику
		|		ПО ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов = ДоговорЗаймаСотруднику.ВалютаРасчетов
		|ГДЕ
		|	ДоговорЗаймаСотруднику.Ссылка = &ДоговорЗаймаСотруднику
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	ДоговорЗаймаСотруднику.СуммаДокумента";
	
	Запрос.УстановитьПараметр("ДоговорЗаймаСотруднику", Объект.ДоговорКредитаЗайма);
	Запрос.УстановитьПараметр("Организация", Форма.Компания);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Подотчетник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ШаблонНадписьИнформацияПоКредиту = НСтр("ru='Сумма кредита: %1 (%2)'");
	ШаблонНадписьОстатокДолга = НСтр("ru='Осталось получить: %1 (%2)'");
	ШаблонНадписьОстатокДолгаПолучено = НСтр("ru='Осталось получить: %1 (%2). Уже получено %3 (%4)'");
	Если Выборка.Следующий() Тогда
		
		НадписьИнформацияПоКредиту = СтрШаблон(ШаблонНадписьИнформацияПоКредиту, Выборка.СуммаДокумента, Выборка.ВалютаРасчетов);
		
		Если Выборка.СуммаДокумента < Выборка.ОсновнойДолгВалРасход Тогда
			
			НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонНадписьОстатокДолгаПолучено,
													(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалРасход),
													Выборка.ВалютаРасчетов,
													Выборка.ОсновнойДолгВалРасход,
													Выборка.ВалютаРасчетов);
			
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			
		ИначеЕсли Выборка.СуммаДокумента = Выборка.ОсновнойДолгВалРасход Тогда
			НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонНадписьОстатокДолга, 0, Выборка.ВалютаРасчетов);
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонНадписьОстатокДолгаПолучено,
													(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалРасход),
													Выборка.ВалютаРасчетов,
													Выборка.ОсновнойДолгВалРасход,
													Выборка.ВалютаРасчетов);
		КонецЕсли;
	Иначе
		НадписьИнформацияПоКредиту = СтрШаблон(ШаблонНадписьИнформацияПоКредиту, Объект.ДоговорКредитаЗайма.СуммаДокумента, Объект.ДоговорКредитаЗайма.ВалютаРасчетов);
		НадписьОстатокДолгаПоКредиту = СтрШаблон(ШаблонНадписьОстатокДолга, Объект.ДоговорКредитаЗайма.СуммаДокумента, Объект.ДоговорКредитаЗайма.ВалютаРасчетов);
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
	
КонецПроцедуры

Функция НадписьИнформацияПоКредиту(Объект, Выборка)
	
	ШаблонИнформацияПоКредиту = НСтр("ru='Дата платежа: %1. Сумма долга: %2. Сумма процентов: %3. Комиссия: %4 (%5)'");
	
	Если НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДатаСеанса(), Объект.Дата)) = НачалоМесяца(Выборка.Период) Тогда
		ШаблонДатыПлатежа = НСтр("ru='%1'");
	Иначе
		ШаблонДатыПлатежа = НСтр("ru='%1 (не в тек. месяце)'");
	КонецЕсли;
	
	ДатаПлатежа = СтрШаблон(ШаблонДатыПлатежа, Формат(Выборка.Период, "ДФ=dd.MM.yyyy"));
	СуммаДолга = Формат(Выборка.СуммаОсновногоДолга, "ЧДЦ=2; ЧН=0");
	СуммаПроцентов = Формат(Выборка.СуммаПроцентов, "ЧДЦ=2; ЧН=0");
	СуммаКомиссии = Формат(Выборка.СуммаКомиссии, "ЧДЦ=2; ЧН=0");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка, "ВалютаРасчетовПредставление") Тогда
		Валюта = Выборка.ВалютаРасчетовПредставление;
	Иначе
		Валюта = Выборка.ВалютаРасчетовНаименование;
	КонецЕсли;
	
	Возврат СтрШаблон(ШаблонИнформацияПоКредиту, ДатаПлатежа, СуммаДолга, СуммаПроцентов, СуммаКомиссии, Валюта);
	
КонецФункции

#КонецОбласти

#Область ВидыОпераций

Процедура НастроитьФормуПокупателю(Форма, ВидОперации)
	
	Если  ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Покупателю
		И ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		И ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.Покупателю Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Элементы.РасчетыСКонтрагентом.Видимость = Истина;
	Элементы.РасшифровкаПлатежаПодбор.Видимость = Ложь;
	Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Ложь;
	
	Элементы.ГруппаКонтрагент.Видимость = Истина;
	Элементы.Контрагент.Видимость = Истина;
	Элементы.Контрагент.Заголовок = НСтр("ru='Покупатель'");
	
	НовыйМассив = Новый Массив();
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
	НовыйМассив.Добавить(НоваяСвязь);
	Если НЕ Константы.УчетПоКомпании.Получить() Тогда
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
		НовыйМассив.Добавить(НоваяСвязь);
	КонецЕсли;
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
	Элементы.РасшифровкаПлатежаДоговор.СвязиПараметровВыбора = НовыеСвязи;
	
	Элементы.СуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
	Элементы.СуммаРасчетов.Видимость = НЕ Форма.УчетВалютныхОпераций;
	Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
	Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Всего'");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "НалогообложениеНДС") Тогда
		Элементы.СуммаНДС.Видимость = Форма.Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	Иначе
		Элементы.СуммаНДС.Видимость = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "СтраницыРасчетовСКонтрагентом") Тогда
		Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаРучноеЗаполнение;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДС", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетКонтрагента", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаНДСИтог", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтавкаНДС", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорПлатежногоАгента", "Видимость", Истина);
	
КонецПроцедуры

Процедура НастроитьФормуПоставщикуНашейОрганизации(Форма, ВидОперации)
	
	Если  ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		И ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		И ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		И ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации
		И ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.Оплата Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Элементы.РасчетыСКонтрагентом.Видимость = Истина;
	Элементы.РасшифровкаПлатежаПодбор.Видимость = Истина;
	Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Истина;
	
	Элементы.ГруппаКонтрагент.Видимость = Истина;
	Элементы.Контрагент.Видимость = Истина;
	Элементы.Контрагент.Заголовок = НСтр("ru='Поставщик'");
	
	НовыйМассив = Новый Массив();
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
	НовыйМассив.Добавить(НоваяСвязь);
	Если НЕ Константы.УчетПоКомпании.Получить() Тогда
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
		НовыйМассив.Добавить(НоваяСвязь);
	КонецЕсли;
	
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
	Элементы.РасшифровкаПлатежаДоговор.СвязиПараметровВыбора = НовыеСвязи;
	
	Элементы.СуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
	Элементы.СуммаРасчетов.Видимость = НЕ Форма.УчетВалютныхОпераций;
	Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
	Элементы.СуммаНДС.Видимость = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПомощникИВариантЗаполнения", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДС", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорПлатежногоАгента", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетКонтрагента", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаНДСИтог", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтавкаНДС", "Видимость", Истина);
	
КонецПроцедуры

Процедура НастроитьФормуПрочиеРасчеты(Форма, ВидОперации)
	
	Если  ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
		И ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
		И ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.ПрочиеРасчеты Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ПрочиеРасчетыДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	Элементы.РасшифровкаПлатежаПрочиеРасчетыДоговор.Видимость = Ложь;
	Элементы.Корреспонденция.Видимость = Истина;
	Элементы.РасчетыПрочие.Видимость = Истина;
	Элементы.СуммаПлатежа.Видимость = Форма.УчетВалютныхОпераций;
	Элементы.СуммаРасчетов.Видимость = НЕ Форма.УчетВалютныхОпераций;
	Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
	Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Всего'");
	
	Элементы.СуммаНДС.Видимость = Ложь;
	
	Элементы.ГруппаКонтрагент.Видимость = Истина;
	Элементы.Контрагент.Видимость = Истина;
	Элементы.Контрагент.Заголовок = НСтр("ru='Контрагент'");
	Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Истина;
	УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Форма, Ложь);
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Идентификатор = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущаяСтрока = Идентификатор;
		РасчетыРаботаСФормамиВызовСервера.ЗаполнитьСписокВыбораВалютЭлементаФормы(Элементы.РасшифровкаПлатежаПрочиеРасчетыКурс, Объект.РасшифровкаПлатежа[0].Договор, Объект.Дата);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорПлатежногоАгента", "Видимость", Истина);
	
КонецПроцедуры

Процедура НастроитьФормуПрочее(Форма, ВидОперации)
	
	Если  ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Прочее
		И ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Прочее
		И ВидОперации <> Перечисления.ВидыОперацийПлатежноеПоручение.Прочее Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Элементы.Корреспонденция.Видимость = Истина;
	УстановитьВидимостьИтогов(Форма);
	УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Форма, Ложь);
	
	Если ФормыДокументовДеньгиКлиентСервер.ЭтоПлатежноеПоручение(Форма) Тогда
		Элементы.ГруппаКонтрагент.Видимость = Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетКонтрагента", "Видимость", Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорПлатежногоАгента", "Видимость", Истина);
	
КонецПроцедуры

#КонецОбласти

Процедура ИзменитьВидГруппыДополнительно(Форма)
	
	Элементы = Форма.Элементы;
	КоличествоВидимых = 0;
	
	Элементы.Переместить(Элементы.Дополнительно, Элементы.СтраницыВидовОпераций);
	
	Для каждого Страница Из Элементы.СтраницыВидовОпераций.ПодчиненныеЭлементы Цикл
		Если Страница.Видимость Тогда
			КоличествоВидимых = КоличествоВидимых + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоВидимых <= 1 Тогда
		Элементы.Переместить(Элементы.Дополнительно, Форма, Элементы.СтраницыВидовОпераций);
		Элементы.Дополнительно.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Элементы.Дополнительно.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		Элементы.Дополнительно.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатью(Форма)
	
	Объект = Форма.Объект;
	Параметры = Форма.Параметры;
	
	СозданПоШаблону = Параметры.ЗначенияЗаполнения.Свойство("ШаблонДокумента") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ШаблонДокумента);
	СтатьяИзПараметров = Параметры.ЗначенияЗаполнения.Свойство("Статья") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Статья);
	СтатьяИзОснования = (ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПоступлениеДСПлан") 
						ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПеремещениеДСПлан")
						ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходДСПлан")
						И НЕ Параметры.Основание.СтатьяДвиженияДенежныхСредств.Пустая())
						ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПлатежноеПоручение");
						
	Если НЕ СозданПоШаблону И НЕ СтатьяИзПараметров Тогда
		
		Если СтатьяИзОснования Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "УчитыватьВНУ") Тогда
				Объект.УчитыватьВНУ = РегламентированнаяОтчетностьУСН.НужноУчитыватьВНУ(Объект.Статья, Объект.ВидОперации, Объект.Организация, Объект.Дата)
			КонецЕсли;
		Иначе
			УстановитьСтатьюДДС(Форма);
			Если НЕ Объект.Контрагент.Пустая() ИЛИ Объект.ПоложениеСтатьи = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				УстановитьСтатьиДДСВРасшифровкеПлатежа(Форма);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выводит информационное сообщение, если в документе указан способ зачета Авто и выбран Счет на оплату
//
// Параметры:
//  Форма				 - Форма	 - Форма денежного документа
//
Процедура ПроверитьСообщитьОЗаполненномСчетеПриАвтоЗачете(Форма)

	Для Каждого СтрокаТЧ Из Форма.Объект.РасшифровкаПлатежа Цикл
		Если СтрокаТЧ.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто
			И ЗначениеЗаполнено(СтрокаТЧ.СчетНаОплату) Тогда
			
			СтрокаСообщения = НСтр("ru = 'В строке %1 выбран способ зачета Автоматически и указан Счет на оплату.
				|Рекомендуется выбрать способ зачета Вручную, иначе Счет на оплату будет проигнорирован.'");
			ИндексСтроки = Форма.Объект.РасшифровкаПлатежа.Индекс(СтрокаТЧ);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИндексСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Форма.РеквизитФормыВЗначение("Объект"), СтрокаТЧ.СчетНаОплату);

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти