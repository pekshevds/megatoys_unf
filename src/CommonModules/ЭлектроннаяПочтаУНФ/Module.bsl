
#Область ПрограммныйИнтерфейс

// Выполняет отправку сообщений с помощью SMTP.
// Использование параметров аналогично РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(),
// за исключением порядка их следования в функции.
//
// Параметры:
//  ПараметрыПисьма - Структура - содержит всю необходимую информацию о письме.
//    См. описание РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(), дополнительно добавляется поле
//    * Заголовки - Соответствие - ключ - ИмяПоля, значение - ЗначениеПоля для передачи в УстановитьПолеЗаголовка(),
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись электронной почты.
// 
// Возвращаемое значение:
//  Структура - ключи: 
//    * Идентификатор - Строка - идентификатор События
//    * ИдентификаторыСообщений - Массив - идентификаторы сообщений (RFC 822)
//
Функция ОтправитьПочтовоеСообщение(Знач ПараметрыПисьма, Знач УчетнаяЗапись) Экспорт
	
	Возврат РаботаСПочтовымиСообщениямиУНФ.ОтправитьПочтовоеСообщение(ПараметрыПисьма, УчетнаяЗапись);
	
КонецФункции

// Выполняет загрузку сообщений с почтового сервера по команде пользователя.
//
// Параметры:
//  Параметры		 - Структура - ключи: 
//    * РежимЗагрузки - Строка - ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения()
//      или ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения(),
//    * ОтборПоКонтакту - СправочникСсылка.КонтактныеЛица, СправочникСсылка.Контрагенты, Неопределено - отбор по контакту,
//  АдресХранилища	 - Строка - адрес во временном хранилище, куда будут помещены результаты выполнения задания.
//
Процедура ЗагрузитьПочтуПоКомандеПользователя(Знач Параметры, Знач АдресХранилища) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	РезультатыЗагрузки = Новый Массив;
	НастройкиУчетныхЗаписей = РегистрыСведений.УчетныеЗаписиПользователя.НастройкаПользователя(ТекущийПользователь);
	
	ЕстьУчетныеЗаписиДляЗагрузки = Ложь;
	
	Для каждого Настройка Из НастройкиУчетныхЗаписей Цикл
		Если Настройка.ЗагружатьПочту Тогда
			ЕстьУчетныеЗаписиДляЗагрузки = Истина;
			РезультатЗагрузки = ЗагрузитьПочту(Настройка.УчетнаяЗапись, ТекущийПользователь, Параметры.РежимЗагрузки);
			РезультатыЗагрузки.Добавить(РезультатЗагрузки);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьУчетныеЗаписиДляЗагрузки Тогда
		ПредставлениеПользователя = Строка(ТекущийПользователь);
		ТекстСообщения = НСтр("ru='Отсутствуют доступные учетные записи электронной почты для загрузки пользователем: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ПредставлениеПользователя);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатыЗагрузки, АдресХранилища);
	
КонецПроцедуры

// Загружает содержание почтового сообщения с почтового сервера.
//
// Параметры:
//  Параметры		 - Структура - ключи:
//    * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты,
//    * Идентификатор - Строка - идентификатор События,
//    * ВходящееИсходящееСобытие - Перечисление.ВходящееИсходящееСобытие,
//  АдресХранилища	 - Строка - адрес во временном хранилище, куда будут помещены данные загруженного события.
//
Процедура ЗагрузитьСодержаниеСообщения(Знач Параметры, Знач АдресХранилища) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр("ru = 'Не указана учетная запись для задания ""ЗагрузитьСодержаниеСообщения()"".'");
	КонецЕсли;
	
	Если ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(Параметры.УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр(ПолучитьТекстТребуетсяАвторизация());
	КонецЕсли;
	
	РаботаСПочтовымиСообщениямиУНФ.ЗагрузитьСодержаниеСообщенияИнтернетПочты(Параметры.Идентификатор, Параметры.ВходящееИсходящееСобытие, Параметры.УчетнаяЗапись, АдресХранилища);
	
КонецПроцедуры

// Возвращает соответствие адресов электронной почты и контактов.
//
// Параметры:
//  АдресаЭП - Массив - массив строк адресов электронной почты.
// 
// Возвращаемое значение:
//  Соответствие - Соответствие адресов электронной почты и ссылок
//  на контакты (контрагенты или контактные лица).
//
Функция СопоставленныеКонтактыПоАдресамЭП(АдресаЭП) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(АдресаЭП) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьКонтрагентыКонтактыПоАдресамЭП(АдресаЭП, Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьЛидыПоАдресамЭП(АдресаЭП, Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запускает фоновое задание для сопоставления контакта и адреса электронной почты в Событиях.
//
// Параметры:
//  Контакт				 - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица,
//  АдресЭП				 - Строка - адрес электронной почты,
//  ИдентификаторФормы	 - УникальныйИдентификатор - идентификатор формы для запуска фонового задания.
//
Процедура СопоставитьВФонеКонтактИАдресЭПВСобытиях(Знач Контакт, Знач АдресЭП, Знач ИдентификаторФормы) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресЭП) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Контакт", Контакт);
	ПараметрыЗадания.Вставить("АдресЭП", АдресЭП);
	
	НаименованиеЗадания = НСтр("ru = 'Сопоставление контактов и адресов ЭП в событиях'");
	ИмяПроцедуры        = "ЭлектроннаяПочтаУНФ.СопоставитьКонтактИАдресЭПВСобытиях";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	Результат = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыЗадания, ПараметрыВыполнения);
	
КонецПроцедуры

// Фоновое задание для сопоставления контакта и адреса электронной почты в События.
//
// Параметры:
//  Параметры		 - Структура - ключи:
//    * Контакт - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица,
//    * АдресЭП - Строка - адрес электронной почты,
//  АдресХранилища	 - Строка - адрес во временном хранилище, требуется
//  для совместимости с ЗапуститьВыполнениеВФоне().
//
Процедура СопоставитьКонтактИАдресЭПВСобытиях(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СобытиеУчастники.Ссылка
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СобытиеУчастники.Контакт) = ТИП(СТРОКА)
	|	И СобытиеУчастники.КакСвязаться = &АдресЭП
	|	И СобытиеУчастники.Ссылка.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)");
	Запрос.УстановитьПараметр("АдресЭП", Параметры.АдресЭП);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Событие = Выборка.Ссылка.ПолучитьОбъект();
		Событие.УстановитьСсылкиУчастниковПоАдресуЭП(Параметры.Контакт, Параметры.АдресЭП);
		Событие.ЗаполнитьРеквизитСписокУчастников();
		Событие.ОбменДанными.Загрузка = Истина;
		Событие.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список для авто подбора из классификатора контактов
//
// Параметры:
//  СписокАвтоПодбораКонтрагента - СписокЗначений - список, полученный из классификатора контактов по полю КакСвязаться,
//  Событие						 - ДокументСсылка.Событие - Событие, из которого будет получен заполняться список.
//
Процедура ЗаполнитьСписокАвтоПодбораКонтрагентаИзСобытия(СписокАвтоПодбораКонтрагента, Событие) Экспорт
	
	Если Не ЗначениеЗаполнено(Событие) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Событие) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СобытиеУчастники.КакСвязаться
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СобытиеУчастники.Контакт) = ТИП(СТРОКА)
	|	И СобытиеУчастники.Ссылка = &Ссылка
	|	И СобытиеУчастники.Ссылка.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)");
	Запрос.УстановитьПараметр("Ссылка", Событие);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.КакСвязаться) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокАвтоПодбора = Справочники.КлассификаторКонтактов.СписокАвтоПодбора(
		Выборка.КакСвязаться,
		Истина,
		Тип("СправочникСсылка.Контрагенты"),
		Неопределено);
		
		Для Каждого ТекЭлемент Из СписокАвтоПодбора Цикл
			СписокАвтоПодбораКонтрагента.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление, ТекЭлемент.Пометка, ТекЭлемент.Картинка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Метод для организации блокировки идентификаторов писем в разрезе учетных записей электронной почты
// и предотвращения коллизий при параллельной работе заданий загрузки сообщений с почтового сервера.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты.
// 
// Возвращаемое значение:
//  БлокировкаДанных - вновь созданная блокировка данных.
//
Функция НоваяБлокировкаИдентификаторовПисем(Знач УчетнаяЗапись) Экспорт
	
	Результат = Новый БлокировкаДанных;
	
	ЭлементБлокировкиИдентификаторыСобытий = Результат.Добавить("РегистрСведений.ИдентификаторыСобытий");
	ЭлементБлокировкиИдентификаторыСобытий.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
	
	ЭлементБлокировкиИдентификаторыСообщений = Результат.Добавить("РегистрСведений.ИдентификаторыСообщений");
	ЭлементБлокировкиИдентификаторыСообщений.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
	
	ЭлементБлокировкиИдентификаторыПисемДляОтложеннойПривязки = Результат.Добавить("РегистрСведений.ИдентификаторыПисемДляОтложеннойПривязки");
	ЭлементБлокировкиИдентификаторыПисемДляОтложеннойПривязки.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьПриОткрытии(Знач ВариантЗагрузки) Экспорт
	
	Возврат ВариантЗагрузки <> Перечисления.ВариантыЗагрузкиПисем.ТекстыИВложения;
	
КонецФункции

Функция СледуетСинхронизироватьУдаление(Знач ВариантСинхронизации) Экспорт
	
	Если ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.ПросмотрИУдаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СледуетСинхронизироватьПросмотр(Знач ВариантСинхронизации) Экспорт
	
	Если ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.Просмотр Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.ПросмотрИУдаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаЭлектроннойПочты;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Функция используется для заполнения отправителей письма, как с печатными формами, так и без них.
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
// Возвращаемое значение:
//  Массив - Массив структур с ключами:
//   * Представление - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица
//   * Адрес - Строка
//   * ВидПочтовогоАдреса - не используется
//
Функция ПодготовленныеЭлектронныеАдресаПолучателей(МассивОбъектов) Экспорт
	
	Получатели = Новый СписокЗначений;
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") ИЛИ ТипЗнч(МассивОбъектов) = Тип("ФиксированныйМассив") Тогда
		
		ТипыМетаданныхСодержащиеПартнерскиеEmail = УправлениеНебольшойФирмойКонтактнаяИнформацияСервер.ПолучитьТипыМетаданныхСодержащиеПартнерскиеEmail();
		
		Для каждого ОбъектМассива Из МассивОбъектов Цикл
			
			Если НЕ ЗначениеЗаполнено(ОбъектМассива) Тогда 
				
				Продолжить; 
				
			ИначеЕсли ТипЗнч(ОбъектМассива) = Тип("СправочникСсылка.Контрагенты") Тогда 
				
				// Актуально для печати из справочника, например, прайс-лист из Справочники.Контрагенты
				ЗначенияСтруктурыВСписокЗначений(Получатели, Новый Структура("Контрагент", ОбъектМассива));
				Продолжить;
				
			ИначеЕсли ТипЗнч(ОбъектМассива) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				
				ЗначенияСтруктурыВСписокЗначений(Получатели, Новый Структура("Контрагент", ОбъектМассива.Владелец));
				Продолжить;
				
			КонецЕсли;
			
			МетаданныеОбъекта = ОбъектМассива.Метаданные();
			
			ИменаРеквизитовСодержащиеEmail = Новый Массив;
			
			// Проверим все реквизиты переданного объекта
			Для каждого ЭлементМетаданных Из МетаданныеОбъекта.Реквизиты Цикл
				
				ОбъектСодержитEmail(ЭлементМетаданных, ТипыМетаданныхСодержащиеПартнерскиеEmail, ИменаРеквизитовСодержащиеEmail);
				
			КонецЦикла;
			
			Если ИменаРеквизитовСодержащиеEmail.Количество() > 0 Тогда
				
				ЗначенияСтруктурыВСписокЗначений(Получатели, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектМассива,
					ИменаРеквизитовСодержащиеEmail));
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УправлениеНебольшойФирмойКонтактнаяИнформацияСервер.ПодготовитьЭлектронныеАдресаПолучателей(Получатели, Истина);
	
КонецФункции //ПолучитьПодготовленныеЭлектронныеАдресаПолучателей()

// Функция используется для заполнения отправителей письма, как с печатными формами, так и без них.
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
// Возвращаемое значение:
//  Массив - Массив структур с ключами:
//   * Представление - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица
//   * Адрес - Строка
//   * ВидПочтовогоАдреса - не используется
//
Функция ПодготовленныеНомераТелефоновПолучателей(МассивОбъектов) Экспорт
	
	Получатели = Новый СписокЗначений;
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") ИЛИ ТипЗнч(МассивОбъектов) = Тип("ФиксированныйМассив") Тогда
		
		ТипыМетаданныхСодержащиеПартнерскиеEmail = УправлениеНебольшойФирмойКонтактнаяИнформацияСервер.ПолучитьТипыМетаданныхСодержащиеПартнерскиеEmail();
		
		Для каждого ОбъектМассива Из МассивОбъектов Цикл
			
			Если НЕ ЗначениеЗаполнено(ОбъектМассива) Тогда 
				
				Продолжить; 
				
			ИначеЕсли ТипЗнч(ОбъектМассива) = Тип("СправочникСсылка.Контрагенты") Тогда 
				
				// Актуально для печати из справочника, например, прайс-лист из Справочники.Контрагенты
				ЗначенияСтруктурыВСписокЗначений(Получатели, Новый Структура("Контрагент", ОбъектМассива));
				Продолжить;
				
			ИначеЕсли ТипЗнч(ОбъектМассива) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				
				ЗначенияСтруктурыВСписокЗначений(Получатели, Новый Структура("Контрагент", ОбъектМассива.Владелец));
				Продолжить;
				
			КонецЕсли;
			
			МетаданныеОбъекта = ОбъектМассива.Метаданные();
			
			ИменаРеквизитовСодержащиеEmail = Новый Массив;
			
			// Проверим все реквизиты переданного объекта
			Для каждого ЭлементМетаданных Из МетаданныеОбъекта.Реквизиты Цикл
				
				ОбъектСодержитEmail(ЭлементМетаданных, ТипыМетаданныхСодержащиеПартнерскиеEmail, ИменаРеквизитовСодержащиеEmail);
				
			КонецЦикла;
			
			Если ИменаРеквизитовСодержащиеEmail.Количество() > 0 Тогда
				
				ЗначенияСтруктурыВСписокЗначений(Получатели, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектМассива,
					ИменаРеквизитовСодержащиеEmail));
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УправлениеНебольшойФирмойКонтактнаяИнформацияСервер.ПодготовитьНомераТелефоновПолучателей(Получатели, Истина);
	
КонецФункции //ПолучитьПодготовленныеЭлектронныеАдресаПолучателей()

// Процедура заполняет параметры отправки электронного письма при печати документов.
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм = Неопределено) Экспорт
	
	ПараметрыОтправки.Получатель = ПодготовленныеЭлектронныеАдресаПолучателей(МассивОбъектов);
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	ПараметрыОтправки.Вставить("Отправитель", ?(ДоступныеУчетныеЗаписи.Количество() > 0, ДоступныеУчетныеЗаписи[0].Ссылка, Неопределено));
	
	ЗаполнитьТемуТекстОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры //ЗаполнитьПараметрыОтправки()

// Функция формирует представление заголовка документа.
//
// Возвращаемое значение:
//  Строка - представление документа в виде номера и даты в кратком формате
Функция ЗаголовокДокумента(ДокументСсылка) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат "";
	Иначе
		Возврат СтрШаблон(НСтр("ru='%1 № %2 от %3 '"), ДокументСсылка.Метаданные().Синоним,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументСсылка.Номер, Истина, Истина),
			Формат(ДокументСсылка.Дата, НСтр("ru='ДФ=''дд ММММ гггг ""г.""'''")));
	КонецЕсли;

КонецФункции //ЗаголовокДокумента()

// Процедура переопределяет отображение подменю "Отправить" в формах
//
// Параметры:
//  ЭлементыФормы	 - ЭлементыФормы	 - элементы формы
//
Процедура УстановитьОтображениеКомандОтправкиСообщений(ЭлементыФормы) Экспорт
	
	НастроенаОтправкаSMS = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ПодменюОтправить",
	"Видимость",
	НастроенаОтправкаSMS);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы,
		"ФормаОбщаяКомандаОтправитьПоЭлектроннойПочтеSMSОтключены", 
		"Видимость",
		НЕ НастроенаОтправкаSMS);
		
КонецПроцедуры

// Функция показывает используется ли работа с событиями в приложении
// 
// Возвращаемое значение:
//  Булево - признак использования событий в программе
//
Функция ИспользуетсяРаботаССобытиями() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСобытия");
	
КонецФункции

Функция СопоставленныеАдресатыПоАдресамЭП(АдресаЭП) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(АдресаЭП) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьАдресатовПисьмаПоАдресамЭП(АдресаЭП, Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СопоставитьАдресатовПисьмаПриЗаписиКонтактаCRM(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	МассивАдресатов = Новый Массив;
	Для Каждого Адрес Из Источник.КонтактнаяИнформация Цикл
		Если Адрес.Тип <> Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Продолжить;
		КонецЕсли;
		МассивАдресатов.Добавить(Адрес.АдресЭП);
	КонецЦикла;
	
	ТаблицаАдресатов = Справочники.АдресатыПисем.АдресатыПисемПоКакСвязаться(МассивАдресатов);
		
	НаборЗаписейАдресатов = РегистрыСведений.СвязиАдресатКонтактCRM.СоздатьНаборЗаписей();
	НаборЗаписейАдресатов.Отбор.КонтактCRM.Установить(Источник.Ссылка);
	СоответствиеАдресатов = Новый Соответствие;
	СоответствиеСвязей = Новый Соответствие;
	
	Для Каждого СтрокаКИ Из Источник.КонтактнаяИнформация Цикл
		
		Если СтрокаКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеАдресаты = ТаблицаАдресатов.НайтиСтроки(Новый Структура("Адресат", НРег(СокрЛП(СтрокаКИ.АдресЭП))));
		
		Если НайденныеАдресаты.Количество() <> 0 Тогда
			АдресатПисьма = НайденныеАдресаты[0].Ссылка;
		ИначеЕсли СоответствиеАдресатов[СтрокаКИ.АдресЭП] <> Неопределено Тогда
			АдресатПисьма = СоответствиеАдресатов[СтрокаКИ.АдресЭП];
		Иначе
			АдресатПисьма = Справочники.АдресатыПисем.НовыйАдресатПисьмаПоДаннымКонтакта(Источник.Ссылка, 
				СтрокаКИ.АдресЭП);
			СоответствиеАдресатов.Вставить(СтрокаКИ.АдресЭП, АдресатПисьма);
		КонецЕсли;
		
		Если СоответствиеСвязей[АдресатПисьма] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСвязь = НаборЗаписейАдресатов.Добавить();
		НоваяСвязь.КонтактCRM = Источник.Ссылка;
		НоваяСвязь.Адресат = АдресатПисьма;
		СоответствиеСвязей.Вставить(АдресатПисьма, Источник);
		
	КонецЦикла;
	
	НаборЗаписейАдресатов.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Устанавливает или снимает флаг Непрочитанное у документов Событие (письмо).
//
// Параметры:
//  События - ДокументСсылка.Событие
//
Процедура ПометитьКакПрочтенныеНепрочтенные(Событие) Экспорт
	
	Если ТипЗнч(Событие) = Тип("Массив") Тогда
		МассивСобытий = Событие;
	Иначе
		МассивСобытий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Событие);
	КонецЕсли;
	
	Если МассивСобытий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументСобытие.Ссылка КАК Событие,
	|	ДокументСобытие.УчетнаяЗапись КАК УчетнаяЗапись
	|ИЗ
	|	Документ.Событие КАК ДокументСобытие
	|ГДЕ
	|	ДокументСобытие.Ссылка В(&События)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФлагиПисем.Непрочитанное КАК Непрочитанное
	|ИЗ
	|	РегистрСведений.ФлагиПисем КАК ФлагиПисем
	|ГДЕ
	|	ФлагиПисем.Событие В(&События)
	|	И ФлагиПисем.Непрочитанное";
	Запрос.УстановитьПараметр("События", МассивСобытий);
	Результат = Запрос.ВыполнитьПакет();
	
	ЕстьНепрочитанныеПисьма = Не Результат[1].Пустой();
	Если ЕстьНепрочитанныеПисьма Тогда
		НовоеЗначениеФлагаНепрочитанное = Ложь;
	Иначе
		НовоеЗначениеФлагаНепрочитанное = Истина;
	КонецЕсли;
	
	ВыборкаСобытия = Результат[0].Выбрать();
	Пока ВыборкаСобытия.Следующий() Цикл
		ФлагиПисьма = Новый Структура;
		ФлагиПисьма.Вставить("Непрочитанное", НовоеЗначениеФлагаНепрочитанное);
		РегистрыСведений.ФлагиПисем.ИзменитьФлагиПисьма(ВыборкаСобытия.УчетнаяЗапись, ВыборкаСобытия.Событие, ФлагиПисьма);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСпам(Событие) Экспорт
	
	Если ТипЗнч(Событие) = Тип("Массив") Тогда
		МассивСобытий = Событие;
	Иначе
		МассивСобытий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Событие);
	КонецЕсли;
	
	Если МассивСобытий.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СодержимоеПочтовыхЯщиков.ПочтовыйЯщик.ВидПапки КАК ТипПочтовогоЯщика
	|ИЗ
	|	РегистрСведений.СодержимоеПочтовыхЯщиков КАК СодержимоеПочтовыхЯщиков
	|ГДЕ
	|	СодержимоеПочтовыхЯщиков.Событие В(&События)";
	Запрос.УстановитьПараметр("События", МассивСобытий);
	СодержимоеПочтовыхЯщиков = Запрос.Выполнить().Выбрать();
	Пока СодержимоеПочтовыхЯщиков.Следующий() Цикл
		Если СодержимоеПочтовыхЯщиков.ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Спам Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПометитьКакСпам(Событие) Экспорт
	
	Если ТипЗнч(Событие) = Тип("Массив") Тогда
		МассивСобытий = Событие;
	Иначе
		МассивСобытий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Событие);
	КонецЕсли;
	
	Если МассивСобытий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Событие Из МассивСобытий Цикл
		УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Событие, "УчетнаяЗапись");
		ИспользуютсяПочтовыеЯщики = ИспользуютсяПочтовыеЯщики(УчетнаяЗапись);
		ПочтовыйЯщик = Справочники.ПочтовыеЯщики.ПочтовыйЯщикПоТипу(Перечисления.ТипыПочтовыхЯщиков.Спам);
		РегистрыСведений.СодержимоеПочтовыхЯщиков.ПоместитьВПочтовыйЯщик(УчетнаяЗапись, ПочтовыйЯщик, Событие);
		Если ИспользуютсяПочтовыеЯщики Тогда
			ПочтовыйЯщикУчетнойЗаписи = Справочники.ПочтовыеЯщикиУчетныхЗаписей.ПочтовыйЯщикПоТипу(УчетнаяЗапись, Перечисления.ТипыПочтовыхЯщиков.Спам);
			РегистрыСведений.СодержимоеПочтовыхЯщиковУчетныхЗаписей.ПоместитьВПочтовыйЯщик(УчетнаяЗапись, ПочтовыйЯщикУчетнойЗаписи, Событие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УбратьИзСпама(Событие) Экспорт
	
	Если ТипЗнч(Событие) = Тип("Массив") Тогда
		МассивСобытий = Событие;
	Иначе
		МассивСобытий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Событие);
	КонецЕсли;
	
	Если МассивСобытий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Событие Из МассивСобытий Цикл
		УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Событие, "УчетнаяЗапись");
		ИспользуютсяПочтовыеЯщики = ИспользуютсяПочтовыеЯщики(УчетнаяЗапись);
		ТипПочтовогоЯщика = ТипПочтовогоЯщикаПоДаннымСобытия(Событие);
		ПочтовыйЯщик = Справочники.ПочтовыеЯщики.ПочтовыйЯщикПоТипу(ТипПочтовогоЯщика);
		РегистрыСведений.СодержимоеПочтовыхЯщиков.ПоместитьВПочтовыйЯщик(УчетнаяЗапись, ПочтовыйЯщик, Событие);
		Если ИспользуютсяПочтовыеЯщики Тогда
			ПочтовыйЯщикУчетнойЗаписи = Справочники.ПочтовыеЯщикиУчетныхЗаписей.ПочтовыйЯщикПоТипу(УчетнаяЗапись, ТипПочтовогоЯщика);
			РегистрыСведений.СодержимоеПочтовыхЯщиковУчетныхЗаписей.ПоместитьВПочтовыйЯщик(УчетнаяЗапись, ПочтовыйЯщикУчетнойЗаписи, Событие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереместитьВПочтовыйЯщик(Событие, ПочтовыйЯщикУчетнойЗаписи) Экспорт
	
	Если ТипЗнч(Событие) = Тип("Массив") Тогда
		МассивСобытий = Событие;
	Иначе
		МассивСобытий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Событие);
	КонецЕсли;
	
	Если МассивСобытий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументСобытие.Ссылка КАК Событие,
	|	ДокументСобытие.УчетнаяЗапись КАК УчетнаяЗапись
	|ИЗ
	|	Документ.Событие КАК ДокументСобытие
	|ГДЕ
	|	ДокументСобытие.Ссылка В(&События)";
	Запрос.УстановитьПараметр("События", МассивСобытий);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСобытий = Результат.Выбрать();
	Пока ДанныеСобытий.Следующий() Цикл
		ТипПочтовогоЯщика = Справочники.ПочтовыеЯщикиУчетныхЗаписей.ТипПочтовогоЯщика(ПочтовыйЯщикУчетнойЗаписи);
		Если ЗначениеЗаполнено(ТипПочтовогоЯщика) Тогда
			ПочтовыйЯщик = Справочники.ПочтовыеЯщики.ПочтовыйЯщикПоТипу(ТипПочтовогоЯщика);
			РегистрыСведений.СодержимоеПочтовыхЯщиков.ПоместитьВПочтовыйЯщик(ДанныеСобытий.УчетнаяЗапись, ПочтовыйЯщик, ДанныеСобытий.Событие);
		КонецЕсли;
		РегистрыСведений.СодержимоеПочтовыхЯщиковУчетныхЗаписей.ПоместитьВПочтовыйЯщик(ДанныеСобытий.УчетнаяЗапись, ПочтовыйЯщикУчетнойЗаписи, ДанныеСобытий.Событие);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписьюСобытия(Объект) Экспорт
	
	Если Объект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		ПометкаУдаленияДоЗаписи = Ложь;
	Иначе
		ПометкаУдаленияДоЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ПометкаУдаления");
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ЭлектроннаяПочтаУНФ", Новый Структура);
	Объект.ДополнительныеСвойства.ЭлектроннаяПочтаУНФ.Вставить("ПометкаУдаленияДоЗаписи", ПометкаУдаленияДоЗаписи);
	
	СодержаниеHTML = Объект.СодержаниеHTML;
	Если Объект.ЭтоНовый()
		И Не ПустаяСтрока(СодержаниеHTML)
		И Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		
		Объект.СодержаниеHTML = Гипертекст.ОчищенныйHTMLОтНежелательногоКонтента(СодержаниеHTML);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.СодержаниеHTML) Тогда
		Объект.Содержание = СокрЛП(Гипертекст.ПолучитьТекстИзHTML(Объект.СодержаниеHTML));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиСобытия(Объект) Экспорт
	
	Если Объект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ЗагрузкаПочты")
		И Объект.ДополнительныеСвойства.ЗагрузкаПочты Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяПочтовыеЯщики = ИспользуютсяПочтовыеЯщики(Объект.УчетнаяЗапись);
	
	Если Объект.ДополнительныеСвойства.Свойство("ТекущийПочтовыйЯщик") Тогда
		ТекущийПочтовыйЯщик = Объект.ДополнительныеСвойства.ТекущийПочтовыйЯщик;
	Иначе
		ТекущийПочтовыйЯщик = РегистрыСведений.СодержимоеПочтовыхЯщиков.ПочтовыйЯщикСобытия(Объект.Ссылка);
	КонецЕсли;
	
	ТекущийПочтовыйЯщикУчетнойЗаписи = Неопределено;
	Если ИспользуютсяПочтовыеЯщики Тогда
		Если Объект.ДополнительныеСвойства.Свойство("ТекущийПочтовыйЯщикУчетнойЗаписи") Тогда
			ТекущийПочтовыйЯщикУчетнойЗаписи = Объект.ДополнительныеСвойства.ТекущийПочтовыйЯщикУчетнойЗаписи;
		Иначе
			ТекущийПочтовыйЯщикУчетнойЗаписи = РегистрыСведений.СодержимоеПочтовыхЯщиковУчетныхЗаписей.ПочтовыйЯщикСобытия(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПочтовыйЯщик) Тогда
		ТекущийТипПочтовогоЯщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПочтовыйЯщик, "ВидПапки");
	Иначе
		ТекущийТипПочтовогоЯщика = Неопределено;
	КонецЕсли;
	ОжидаемыйТипПочтовогоЯщика = ТипПочтовогоЯщикаПоДаннымСобытия(Объект);
	
	Если Не ЗначениеЗаполнено(ТекущийПочтовыйЯщик) Или ТекущийТипПочтовогоЯщика <> ОжидаемыйТипПочтовогоЯщика Тогда
		ПочтовыйЯщик = Справочники.ПочтовыеЯщики.ПочтовыйЯщикПоТипу(ОжидаемыйТипПочтовогоЯщика);
		РегистрыСведений.СодержимоеПочтовыхЯщиков.ПоместитьВПочтовыйЯщик(Объект.УчетнаяЗапись, ПочтовыйЯщик, Объект.Ссылка);
	КонецЕсли;
	
	Если ИспользуютсяПочтовыеЯщики И Не ЗначениеЗаполнено(ТекущийПочтовыйЯщикУчетнойЗаписи)
		Или ТекущийТипПочтовогоЯщика <> ОжидаемыйТипПочтовогоЯщика Тогда
		ПочтовыйЯщикУчетнойЗаписи = Справочники.ПочтовыеЯщикиУчетныхЗаписей.ПочтовыйЯщикПоТипу(Объект.УчетнаяЗапись, ОжидаемыйТипПочтовогоЯщика);
		РегистрыСведений.СодержимоеПочтовыхЯщиковУчетныхЗаписей.ПоместитьВПочтовыйЯщик(Объект.УчетнаяЗапись, ПочтовыйЯщикУчетнойЗаписи, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриНастройкеУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	ОбновитьПочтовыеПапки(УчетнаяЗапись.Ссылка);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений
//
Процедура ПриДобавленииСерверныхОповещений(Оповещения) Экспорт
	
	Оповещение = СерверныеОповещения.НовоеСерверноеОповещение(ЭлектроннаяПочтаУНФКлиентСервер.ИмяСерверногоОповещения());
	//Оповещение.ИмяМодуляОтправки  = "ЭлектроннаяПочтаУНФ";
	Оповещение.ИмяМодуляПолучения = "ЭлектроннаяПочтаУНФКлиент";
	Оповещения.Вставить(Оповещение.Имя, Оповещение);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "3.0.3.91",
		"Подсистема.СлужебныеПодсистемы.ЭлектроннаяПочта",
		"Подсистема.CRM.ЭлектроннаяПочта");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "3.0.4.38",
		"Роль.ЧтениеУчетныхЗаписейЭлектроннойПочтыВнедрение",
		"Роль.ЧтениеУчетныхЗаписейЭлектроннойПочты");
	
КонецПроцедуры

// Функция - Адрес адресатов во временном хранилище
//
// Параметры:
//  Адресаты		 - 	массив, состоящий из наименований и адресов ЭП из строки, переданной пользователем;
//  ТипПолучателя	 - 	тип получателя электронного письма.
// 
// Возвращаемое значение:
//  Адрес таблицы значений во временном хранилище, которая содержит все обработанные данные и тип получателя.
//
Функция АдресАдресатовВоВременномХранилище(знач Адресаты, знач ТипПолучателя) Экспорт
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(300);
	
	ТаблицаАдресантов = Новый ТаблицаЗначений;
	ТаблицаАдресантов.Колонки.Добавить("Псевдоним", Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки));
	ТаблицаАдресантов.Колонки.Добавить("ПсевдонимДляПоиска",
		Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки));
	ТаблицаАдресантов.Колонки.Добавить("АдресЭП", Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки));
	ТаблицаАдресантов.Колонки.Добавить("ТипПолучателя",
	Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПолучателейЭлектронногоПисьма"));
	
	Для Каждого ЭлементМассива Из Адресаты Цикл
		Псевдоним = СокрЛП(ЭлементМассива.Псевдоним);
		ПсевдонимДляПоиска = Псевдоним;
		Если ЗначениеЗаполнено(Псевдоним) Тогда
			ПсевдонимДляПоиска = СтрШаблон("%%%1%%", ПсевдонимДляПоиска);
		КонецЕсли;
		
		СтрокаАдресанта = ТаблицаАдресантов.Добавить();
		СтрокаАдресанта.Псевдоним = Псевдоним;
		СтрокаАдресанта.ПсевдонимДляПоиска = ПсевдонимДляПоиска;
		СтрокаАдресанта.АдресЭП = ЭлементМассива.Адрес;
		СтрокаАдресанта.ТипПолучателя = ТипПолучателя;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаАдресантов);
	
КонецФункции

// Загружает данные сообщения с почтового сервера
//
// Параметры:
//  ОбъектИлиСсылкаНаСобытие - ДокументСсылка.Событие, ДокументОбъект.Событие
//  УникальныйИдентификатор - УникальныйИдентификатор
//  ИдентификаторСообщения - Строка
//  СеансовыеДанные - Структура - см РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные
// 
// Возвращаемое значение:
//  - Структура - см ДлительныеОперации.ВыполнитьВФоне
//
Функция ЗагрузитьСообщениеСПочтовогоСервера(
	ОбъектИлиСсылкаНаСобытие,
	УникальныйИдентификатор,
	ИдентификаторСообщения = Неопределено,
	СеансовыеДанные = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектИлиСсылкаНаСобытие) = Тип("ДокументСсылка.Событие") Тогда
		
		Ссылка = ОбъектИлиСсылкаНаСобытие;
		СтруктураДляЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Ссылка, "УчетнаяЗапись, ВходящееИсходящееСобытие");
		
	Иначе
		
		Ссылка = ОбъектИлиСсылкаНаСобытие.Ссылка;
		СтруктураДляЗаписи = ОбъектИлиСсылкаНаСобытие;
		
	КонецЕсли;
	
	УчетнаяЗапись = СтруктураДляЗаписи.УчетнаяЗапись;
	
	Если ИдентификаторСообщения = Неопределено Тогда
		ИдентификаторСообщения =
			РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(СтруктураДляЗаписи.УчетнаяЗапись, Ссылка);
	КонецЕсли;
	
	Если СеансовыеДанные = Неопределено Тогда
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
			Пользователи.ТекущийПользователь(),
			Перечисления.ОбластиДоступаGoogle.Почта,
			УчетнаяЗапись);
	КонецЕсли;
	
	ОбменСGoogle.ИнициализироватьСеансовыеДанные(
		СеансовыеДанные,
		Пользователи.ТекущийПользователь(),
		Перечисления.ОбластиДоступаGoogle.Почта,
		УчетнаяЗапись);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СеансовыеДанные", СеансовыеДанные);
	ПараметрыПроцедуры.Вставить("ВходящееИсходящееСобытие", СтруктураДляЗаписи.ВходящееИсходящееСобытие);
	ПараметрыПроцедуры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыПроцедуры.Вставить("Идентификатор", ИдентификаторСообщения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"ЭлектроннаяПочтаУНФ.ЗагрузитьСодержаниеСообщения",
	ПараметрыПроцедуры,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

#Область РегламентноеЗадание

// Возвращает текущее установлено расписание задания загрузки электронной почты.
// 
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания
//
Функция РасписаниеЗагрузкиЭлектроннойПочты() Экспорт
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаЭлектроннойПочты;
	УстановитьПривилегированныйРежим(Истина);
	Задание = РегламентныеЗаданияСервер.Задание(РегламентноеЗадание);
	Если Задание <> Неопределено Тогда
		Возврат Задание.Расписание;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Возвращает текущее значение использования задания загрузки электронной почты.
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаданиеЗагрузкиЭлектроннойПочтыИспользуется() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаЭлектроннойПочты;
	УстановитьПривилегированныйРежим(Истина);
	Задание = РегламентныеЗаданияСервер.Задание(РегламентноеЗадание);
	Возврат Задание <> Неопределено И Задание.Использование;
	
КонецФункции

// Изменяет признак использование или расписание текущего задания загрузки почты.
// При отсутствии текущего задания, создается новое.
//
// Параметры:
//  Использование - Булево
//  Расписание - РасписаниеРегламентногоЗадания
//
Процедура ИзменитьЗаданиеЗагрузкиЭлектроннойПочты(Использование, Расписание = Неопределено) Экспорт
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаЭлектроннойПочты;
	
	УстановитьПривилегированныйРежим(Истина);
	Задание = РегламентныеЗаданияСервер.Задание(РегламентноеЗадание);
	
	НадоСоздатьЗадание = Использование И Задание = Неопределено;
	Если НадоСоздатьЗадание Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗадание);
		ПараметрыЗадания.Вставить("Использование", Использование);
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", ?(ОбщегоНазначения.РежимОтладки(), 20, 3600));
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		Если Расписание = Неопределено Тогда
			ПараметрыЗадания.Вставить("Расписание", РасписаниеЗагрузкиЭлектроннойПочтыПоУмолчанию());
		Иначе
			ПараметрыЗадания.Вставить("Расписание", Расписание);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегламентноеЗадание.Ключ) Тогда
			ПараметрыЗадания.Вставить("Ключ", РегламентноеЗадание.Ключ);
		КонецЕсли;
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Возврат;
	КонецЕсли;
	
	НадоИзменитьЗадание = Задание <> Неопределено И Задание.Использование <> Использование Или Расписание <> Неопределено;
	Если НадоИзменитьЗадание Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Использование);
		Если Расписание <> Неопределено Тогда
			ПараметрыЗадания.Вставить("Расписание", Расписание);
		КонецЕсли;
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ПереместитьПросмотрСобытий(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПросмотрСобытий.Событие КАК Событие,
	|	ПросмотрСобытий.Событие.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ПросмотрСобытий.Просмотрено КАК Просмотрено
	|ИЗ
	|	РегистрСведений.ПросмотрСобытий КАК ПросмотрСобытий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиПисем КАК ФлагиПисем
	|		ПО ПросмотрСобытий.Событие = ФлагиПисем.Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействияСПисьмами КАК ДействияСПисьмами
	|		ПО ПросмотрСобытий.Событие = ДействияСПисьмами.Событие
	|ГДЕ
	|	(НЕ ПросмотрСобытий.Просмотрено
	|				И ФлагиПисем.Событие ЕСТЬ NULL
	|			ИЛИ ПросмотрСобытий.Просмотрено
	|				И ДействияСПисьмами.Событие ЕСТЬ NULL)";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПросмотрСобытий = Результат.Выбрать();
	
	ОбработаноСобытий = 0;
	КоличествоОшибок = 0;
	
	Пока ПросмотрСобытий.Следующий() Цикл
		Попытка
			Если ПросмотрСобытий.Просмотрено Тогда
				МенеджерЗаписи = РегистрыСведений.ДействияСПисьмами.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.УчетнаяЗапись = ПросмотрСобытий.УчетнаяЗапись;
				МенеджерЗаписи.Событие = ПросмотрСобытий.Событие;
				МенеджерЗаписи.Действие = Перечисления.ДействияСПисьмом.УстановкаФлага;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ФлагиПисем.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.УчетнаяЗапись = ПросмотрСобытий.УчетнаяЗапись;
			МенеджерЗаписи.Событие = ПросмотрСобытий.Событие;
			МенеджерЗаписи.Непрочитанное = Не ПросмотрСобытий.Просмотрено;
			МенеджерЗаписи.Записать(Истина);
			
			ОбработаноСобытий = ОбработаноСобытий + 1;
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноСобытий = 0 И КоличествоОшибок <> 0 Тогда
		ТекстСообщения = НСтр("ru='Процедуре ПереместитьПросмотрСобытий не удалось обработать ни одной записи'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = КоличествоОшибок = 0;
	
КонецПроцедуры

Процедура ОбработатьПереходНаРаботуСПочтовымиЯщиками(Параметры) Экспорт
	
	ПочтовыеЯщикиПоТипам = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПочтовыеЯщики.Ссылка КАК Ссылка,
	|	ПочтовыеЯщики.ВидПапки КАК ВидПапки
	|ИЗ
	|	Справочник.ПочтовыеЯщики КАК ПочтовыеЯщики
	|ГДЕ
	|	ПочтовыеЯщики.ВидПапки <> ЗНАЧЕНИЕ(Перечисление.ТипыПочтовыхЯщиков.ПустаяСсылка)";
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ПочтовыеЯщикиПоТипам.Вставить(Результат.ВидПапки, Результат.Ссылка);
	КонецЦикла;
	
	ПорцияПисем = 1000;
	ОбработаноПисем = 0;
	КоличествоОшибок = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ДокументСобытие.Ссылка КАК Ссылка,
	|	ДокументСобытие.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ДокументСобытие.ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие,
	|	ДокументСобытие.Дата КАК Дата,
	|	ДокументСобытие.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА СпамСобытий.Спам ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ СпамСобытий.Спам
	|	КОНЕЦ КАК Спам,
	|	ВЫБОР
	|		КОГДА ИдентификаторыСообщений.ИдентификаторСообщения ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Отправлено
	|ИЗ
	|	Документ.Событие КАК ДокументСобытие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпамСобытий КАК СпамСобытий
	|		ПО ДокументСобытие.Ссылка = СпамСобытий.Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыСообщений КАК ИдентификаторыСообщений
	|		ПО ДокументСобытие.Ссылка = ИдентификаторыСообщений.Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СодержимоеПочтовыхЯщиков КАК СодержимоеПочтовыхЯщиков
	|		ПО ДокументСобытие.Ссылка = СодержимоеПочтовыхЯщиков.Событие
	|ГДЕ
	|	ДокументСобытие.ТипСобытия = &ТипСобытия
	|	И СодержимоеПочтовыхЯщиков.ПочтовыйЯщик ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументСобытие.НачалоСобытия УБЫВ";
	Запрос.УстановитьПараметр("ТипСобытия", Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
	
	ДокументСобытие = Запрос.Выполнить().Выбрать();
	Пока ДокументСобытие.Следующий() Цикл
		Попытка
			Если Не ДокументСобытие.Отправлено Тогда
				ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Черновики;
			ИначеЕсли ДокументСобытие.ПометкаУдаления Тогда
				ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Удаленные;
			ИначеЕсли ДокументСобытие.Спам Тогда
				ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Спам;
			ИначеЕсли ДокументСобытие.Отправлено Тогда
				Если ДокументСобытие.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
					ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Отправленные;
				Иначе
					ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Входящие;
				КонецЕсли;
			Иначе
				ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Входящие;
			КонецЕсли;
			ПочтовыйЯщик = ПочтовыеЯщикиПоТипам.Получить(ТипПочтовогоЯщика);
			РегистрыСведений.СодержимоеПочтовыхЯщиков.ПоместитьВПочтовыйЯщик(ДокументСобытие.УчетнаяЗапись, ПочтовыйЯщик, ДокументСобытие.Ссылка);
			ОбработаноПисем = ОбработаноПисем + 1;
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноПисем = 0 И КоличествоОшибок <> 0 Тогда
		ТекстСообщения = НСтр("ru='Процедуре ОбработатьПереходНаРаботуСПочтовымиЯщиками не удалось обработать ни одной записи'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru='Процедура ОбработатьПереходНаРаботуСПочтовымиЯщиками обработала очередную порцию событий: %1 из %2'"), ОбработаноПисем, ПорцияПисем);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = КоличествоОшибок = 0 И ОбработаноПисем < ПорцияПисем;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регламентного задания ЗагрузкаЭлектроннойПочты
//
Процедура ЗаданиеЗагрузитьПочту() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаЭлектроннойПочты);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиЗагрузки = РегистрыСведений.УчетныеЗаписиПользователя.НастройкиПользователей();
	УчетныеЗаписиДляЗагрузки = УчетныеЗаписиДляЗагрузки(НастройкиЗагрузки);
	
	Если УчетныеЗаписиДляЗагрузки.Количество() = 0 Тогда
		ОтключитьЗаданиеЗагрузкиПочты();
		Возврат;
	КонецЕсли;
	
	РезультатыЗагрузки = Новый Массив;
	Для каждого УчетнаяЗапись Из УчетныеЗаписиДляЗагрузки Цикл
		Если РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.ПревышеноДопустимоеКоличествоОшибок(УчетнаяЗапись) Тогда
			ОтключитьЗагрузкуПочтыДляУчетнойЗаписи(УчетнаяЗапись);
			Продолжить;
		КонецЕсли;
		
		Если ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(УчетнаяЗапись) Тогда
			ВызватьИсключение НСтр(ПолучитьТекстТребуетсяАвторизация());
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ПараметрыОтбора.Вставить("ЗагружатьПочту", Истина);
		ПользователиУчетнойЗаписи = ВыгрузитьКолонкуПоПараметрамОтбора(НастройкиЗагрузки, "Пользователь", ПараметрыОтбора);
		
		Если ПользователиУчетнойЗаписи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатЗагрузки = ЗагрузитьПочту(УчетнаяЗапись, ПользователиУчетнойЗаписи);
		РезультатыЗагрузки.Добавить(РезультатЗагрузки);
	КонецЦикла;
	
	ОповеститьКлиентскийСеансОНовыхПисьмах(РезультатыЗагрузки);
	
КонецПроцедуры

// Обработчик регламентного задания ОчисткаТекстаИВложенийСтарыхЭлектронныхПисем
//
Процедура ОчисткаТекстаИВложенийСтарыхЭлектронныхПисем() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаТекстаИВложенийСтарыхЭлектронныхПисем);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоМесяцевОчисткиВложенийЭлектронныхПисем = Константы.КоличествоМесяцевОчисткиВложенийЭлектронныхПисем.Получить();
	Если КоличествоМесяцевОчисткиВложенийЭлектронныхПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытиеПрисоединенныеФайлы.Ссылка КАК Файл,
	|	Событие.Ссылка КАК Событие
	|ИЗ
	|	Справочник.СобытиеПрисоединенныеФайлы КАК СобытиеПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Событие КАК Событие
	|		ПО СобытиеПрисоединенныеФайлы.ВладелецФайла = Событие.Ссылка
	|ГДЕ
	|	Событие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)
	|	И Событие.Дата <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1 * &КоличествоМесяцевОчисткиВложенийЭлектронныхПисем)
	|	И ВЫБОР
	|			КОГДА Событие.ВходящееИсходящееСобытие = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Исходящее)
	|				ТОГДА Событие.НачалоСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СобытиеПрисоединенныеФайлы.ЭтоВложениеЭлектронногоПисьма
	|ИТОГИ ПО
	|	Событие";
	
	Запрос.УстановитьПараметр("КоличествоМесяцевОчисткиВложенийЭлектронныхПисем", КоличествоМесяцевОчисткиВложенийЭлектронныхПисем);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивФайлов = Новый Массив();
	
	ВыборкаСобытие = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСобытие.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.Событие");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ВыборкаСобытие.Событие);
			БлокировкаДанных.Заблокировать();
			
			ВыборкаДетальныеЗаписи = ВыборкаСобытие.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ВыполнитьОчисткуДанныхОФайле(ВыборкаДетальныеЗаписи.Файл);
				МассивФайлов.Добавить(ВыборкаДетальныеЗаписи.Файл);
				
			КонецЦикла;
			
			СобытиеОбъект = ВыборкаСобытие.Событие.ПолучитьОбъект();
			СобытиеОбъект.ЗагрузитьПриОткрытии = Истина;
			СобытиеОбъект.ОбменДанными.Загрузка = Истина;
			СобытиеОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(НСтр("ru='ОчисткиЭлектронныхПисем.Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,, ВыборкаСобытие.Событие, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
	КонецЦикла;
	
	Если МассивФайлов.Количество() Тогда
		УдалениеПомеченныхОбъектов.УдалитьПомеченныеОбъекты(МассивФайлов,"Упрощенный");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки НастроитьУчетныеЗаписиТекущегоПользователя на событие ПриЗаписи элемента справочника УчетныеЗаписиЭлектроннойПочты
//
// Параметры:
//  Источник - СправочникОбъект.УчетныеЗаписиЭлектроннойПочты,
//  Отказ	 - Булево.
//
Процедура НастроитьУчетныеЗаписиТекущегоПользователяПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ТекущийПользователь, "ОсновнаяУчетнаяЗаписьЭлектроннойПочты")) Тогда
		РегистрыСведений.НастройкиПользователей.Установить(Источник.Ссылка, "ОсновнаяУчетнаяЗаписьЭлектроннойПочты");
	КонецЕсли;
	
	Если Источник.ИспользоватьДляПолучения Тогда
		РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.ОчиститьЗарегистрированныеОшибки(Источник.Ссылка);
		РегистрыСведений.УчетныеЗаписиПользователя.УстановитьПризнакЗагружатьПочту(ТекущийПользователь, Источник.Ссылка, Истина);
	КонецЕсли;
	
	ВключитьЗаданиеЗагрузкиЭлектроннойПочты(Источник);
	
КонецПроцедуры

// Функция - Картинка участника по типу контакта
//
// Параметры:
//  Контакт			 - 	 контакт, в который будет добавлен индекс картинки;
//  ВидыКонтрагентов - 	 соответствие, содержащее вид контрагента для определения индекса картинки.
// 
// Возвращаемое значение:
//   Индекс картинки, определенный для контакта на основе его типа.
//
Функция КартинкаУчастникаПоТипуКонтакта(Контакт, ВидыКонтрагентов) Экспорт
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат 4;
	ИначеЕсли ВидыКонтрагентов[Контакт] = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		Возврат 3;
	ИначеЕсли ВидыКонтрагентов[Контакт] = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
		Возврат 3;
	ИначеЕсли ВидыКонтрагентов[Контакт] <> Неопределено Тогда
		Возврат 2;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.АдресатыПисем") ИЛИ НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат 0;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат 6;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьПочтовыеПапки(Знач УчетнаяЗапись, ОбновитьСправочникПочтовыхЯщиков = Истина) Экспорт
	
	СохраненныеЗначения = Новый Соответствие;
	
	НаборЗаписей = РегистрыСведений.НастройкиЗагрузкиПисем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборЗаписей.Прочитать();
	
	Для Каждого ТекНастройка Из НаборЗаписей Цикл
		
		Если Не ЗначениеЗаполнено(ТекНастройка.ВариантЗагрузки)
			И Не ЗначениеЗаполнено(ТекНастройка.ВариантСинхронизации) Тогда
			Продолжить;
		КонецЕсли;
		
		СохраненныеЗначения[ТекНастройка.ПочтоваяПапка] = Новый Структура;
		СохраненныеЗначения[ТекНастройка.ПочтоваяПапка].Вставить("ВариантЗагрузки", ТекНастройка.ВариантЗагрузки);
		СохраненныеЗначения[ТекНастройка.ПочтоваяПапка].Вставить("ВариантСинхронизации", ТекНастройка.ВариантСинхронизации);
		СохраненныеЗначения[ТекНастройка.ПочтоваяПапка].Вставить("ВариантСостояния", ТекНастройка.ВариантСостояния);
		СохраненныеЗначения[ТекНастройка.ПочтоваяПапка].Вставить("ОтветственныйДляНовыхПисем",
		ТекНастройка.ОтветственныйДляНовыхПисем);
		
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	
	ПочтовыеЯщикиСервера = РаботаСПочтовымиСообщениямиУНФ.ПочтовыеЯщикиСервера(УчетнаяЗапись);
	
	Для Каждого ТекЯщик Из ПочтовыеЯщикиСервера.ПочтовыеЯщики Цикл
		
		НоваяНастройка = НаборЗаписей.Добавить();
		НоваяНастройка.УчетнаяЗапись = УчетнаяЗапись;
		НоваяНастройка.ПочтоваяПапка = ТекЯщик;
		
		СуществующаяНастройка = СохраненныеЗначения[НоваяНастройка.ПочтоваяПапка];
		Если ЗначениеЗаполнено(СуществующаяНастройка) Тогда
			НоваяНастройка.ВариантЗагрузки            = СуществующаяНастройка.ВариантЗагрузки;
			НоваяНастройка.ВариантСинхронизации       = СуществующаяНастройка.ВариантСинхронизации;
			НоваяНастройка.ВариантСостояния           = СуществующаяНастройка.ВариантСостояния;
			НоваяНастройка.ОтветственныйДляНовыхПисем = СуществующаяНастройка.ОтветственныйДляНовыхПисем;
		ИначеЕсли ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикВходящие(ТекЯщик) Тогда
			НоваяНастройка.ВариантЗагрузки      = Перечисления.ВариантыЗагрузкиПисем.ТекстыИВложения;
			НоваяНастройка.ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать;
			НоваяНастройка.ВариантСостояния     = Перечисления.ВариантыСостоянияНовыхПисем.ЗапланированоИЗавершено;
		ИначеЕсли ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикОтправленные(ТекЯщик) Тогда
			НоваяНастройка.ВариантЗагрузки      = Перечисления.ВариантыЗагрузкиПисем.ТолькоЗаголовки;
			НоваяНастройка.ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать;
			НоваяНастройка.ВариантСостояния     = Перечисления.ВариантыСостоянияНовыхПисем.Завершено;
		Иначе
			НоваяНастройка.ВариантЗагрузки      = Перечисления.ВариантыЗагрузкиПисем.НеЗагружать;
			НоваяНастройка.ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать;
			НоваяНастройка.ВариантСостояния     = Перечисления.ВариантыСостоянияНовыхПисем.Завершено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбновитьСправочникПочтовыхЯщиков Тогда
		ОбновитьСправочникПочтовыхЯщиков(УчетнаяЗапись, ПочтовыеЯщикиСервера.ПочтовыеЯщики, ПочтовыеЯщикиСервера.СимволРазделитель);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ИспользуютсяПочтовыеЯщики(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПочтовыеЯщикиУчетныхЗаписей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПочтовыеЯщикиУчетныхЗаписей КАК ПочтовыеЯщикиУчетныхЗаписей
	|ГДЕ
	|	ПочтовыеЯщикиУчетныхЗаписей.Владелец = &Владелец
	|	И НЕ ПочтовыеЯщикиУчетныхЗаписей.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", УчетнаяЗапись);
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция ИмяСобытияЖР() Экспорт
	
	Возврат НСтр("ru='ЭлектроннаяПочтаУНФ'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаПочты

Функция ЗагрузитьПочту(УчетнаяЗапись, ПользователиУчетнойЗаписи, РежимЗагрузки = Неопределено)
	
	ПредставлениеУчетнойЗаписи = Строка(УчетнаяЗапись);
	Комментарий = НСтр("ru='Начало загрузки почты %1'");
	Комментарий = СтрШаблон(Комментарий, УчетнаяЗапись);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Информация,, УчетнаяЗапись, Комментарий);
	
	Если РежимЗагрузки = Неопределено Тогда
		РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения();
	КонецЕсли;
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("ЗагруженоПисем", 0);
	РезультатЗагрузки.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	РезультатЗагрузки.Вставить("СсылкаНаСобытие", Неопределено);
	РезультатЗагрузки.Вставить("ТекстОшибки", "");
	РезультатЗагрузки.Вставить("Пользователи", Новый Массив);
	Если ТипЗнч(ПользователиУчетнойЗаписи) = Тип("Массив") Тогда
		РезультатЗагрузки.Пользователи = ПользователиУчетнойЗаписи;
	Иначе
		РезультатЗагрузки.Пользователи.Добавить(ПользователиУчетнойЗаписи);
	КонецЕсли;
	
	Если РезультатЗагрузки.Пользователи.Количество() = 0 Тогда
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	Если РезультатЗагрузки.Пользователи.Количество() = 1 Тогда
		Пользователь = РезультатЗагрузки.Пользователи[0];
	Иначе
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Попытка
		ИспользуютсяПочтовыеЯщики = ИспользуютсяПочтовыеЯщики(УчетнаяЗапись);
		
		ЗаголовокПрогресса = СтрШаблон(НСтр("ru = 'Получение почты ""%1""'"), ПредставлениеУчетнойЗаписи);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗаголовокПрогресса", ЗаголовокПрогресса);
		ДополнительныеПараметры.Вставить("РежимЗагрузки", РежимЗагрузки);
		ДополнительныеПараметры.Вставить("ИспользуютсяПочтовыеЯщики", ИспользуютсяПочтовыеЯщики);
		
		ДлительныеОперации.СообщитьПрогресс(0, ДополнительныеПараметры.ЗаголовокПрогресса);
		
		Если ИспользуютсяПочтовыеЯщики Тогда
			РаботаСПочтовымиСообщениямиУНФ.ВыгрузитьПеремещениеПисемВПочтовыхЯщиках(УчетнаяЗапись, ДополнительныеПараметры);
		КонецЕсли;
		
		Результат = РаботаСПочтовымиСообщениямиУНФ.СинхронизироватьСодержимоеПочтовыхЯщиков(УчетнаяЗапись, ДополнительныеПараметры);
		Результат.ЗагруженныеСообщения.Колонки.Добавить("Событие", Новый ОписаниеТипов("ДокументСсылка.Событие"));
		Результат.ЗагруженныеСообщения.Колонки.Добавить("Перемещенное", Новый ОписаниеТипов("Булево"));
		Результат.ЗагруженныеСообщения.Колонки.Добавить("Новое", Новый ОписаниеТипов("Булево"));
		
		ДлительныеОперации.СообщитьПрогресс(50, ЗаголовокПрогресса);
		
		НастройкиПочтовыхЯщиков = Неопределено;
		Если ДополнительныеПараметры.Свойство("ОписаниеПочтовыхЯщиков") Тогда
			НастройкиПочтовыхЯщиков = ДополнительныеПараметры.ОписаниеПочтовыхЯщиков;
		КонецЕсли;
		
		ОписаниеУчетнойЗаписи = Новый Структура;
		ОписаниеУчетнойЗаписи.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ОписаниеУчетнойЗаписи.Вставить("Пользователь", Пользователь);
		ОписаниеУчетнойЗаписи.Вставить("РежимЗагрузки", РежимЗагрузки);
		ОписаниеУчетнойЗаписи.Вставить("НастройкиПочтовыхЯщиков", НастройкиПочтовыхЯщиков);
		ОписаниеУчетнойЗаписи.Вставить("АдресЭПУчетнойЗаписи", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты"));
		ОписаниеУчетнойЗаписи.Вставить("ИспользуютсяПочтовыеЯщики", ИспользуютсяПочтовыеЯщики);
		
		ФлагиСообщений = ФлагиЗагруженныхСообщений(ОписаниеУчетнойЗаписи, Результат.ЗагруженныеСообщения);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ФлагиСообщений, Результат.ФлагиСообщений, Истина);
		
		СоздатьСобытияНаОснованииЗагруженныхСообщений(ОписаниеУчетнойЗаписи, Результат.ЗагруженныеСообщения);
		СохранитьПеремещениеПисемВПочтовыхЯщиках(ОписаниеУчетнойЗаписи, Результат.ЗагруженныеСообщения);
		СохранитьФлагиСообщений(ОписаниеУчетнойЗаписи, Результат.ЗагруженныеСообщения, ФлагиСообщений);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Новое", Истина);
		Строки = Результат.ЗагруженныеСообщения.НайтиСтроки(ПараметрыОтбора);
		РезультатЗагрузки.ЗагруженоПисем = Строки.Количество();
		РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.ОчиститьЗарегистрированныеОшибки(УчетнаяЗапись);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Комментарий = НСтр("ru='Ошибка загрузки почты %1
		|%2'");
		Комментарий = СтрШаблон(Комментарий, ПредставлениеУчетнойЗаписи, ТекстОшибки);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,, УчетнаяЗапись, Комментарий);
		
		РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.ЗарегистрироватьОшибку(УчетнаяЗапись, ИнформацияОбОшибке);
		РезультатЗагрузки.ТекстОшибки = ТекстОшибки;
	КонецПопытки;
	
	Комментарий = НСтр("ru='Конец загрузки почты %1'");
	Комментарий = СтрШаблон(Комментарий, ПредставлениеУчетнойЗаписи);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Информация,, УчетнаяЗапись, Комментарий);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

Процедура СоздатьСобытияНаОснованииЗагруженныхСообщений(ОписаниеУчетнойЗаписи, ЗагруженныеСообщения)
	
	Если ЗагруженныеСообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если адресов не слишком много, то сопоставляем их все сразу: так быстрее.
	// Если адресов много, то для предотвращения нехватки памяти, будем сопоставлять индивидуально для каждого сообщения.
	АдресаУчастников = АдресаУчастников(ЗагруженныеСообщения);
	СопоставленныеКонтактыПоАдресамЭП = ОбработатьИнтернетПочтовыеСообщения_СопоставитьКонтакты(АдресаУчастников);
	
	ЗагруженныеИдентификаторыСообщений = Новый Массив;
	Для каждого ОписаниеСообщения Из ЗагруженныеСообщения Цикл
		ЗагруженныеИдентификаторыСообщений.Добавить(ОписаниеСообщения.ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
	КонецЦикла;
	СобытияПоЗагруженнымИдентификаторамСообщений = РегистрыСведений.ИдентификаторыСообщений.СобытияПоИдентификаторамСообщений(ОписаниеУчетнойЗаписи.УчетнаяЗапись, ЗагруженныеИдентификаторыСообщений);
	ОтправленныеСобытияПоИдентификаторамСообщений = РегистрыСведений.ИдентификаторыСообщений.ОтправленныеСобытияПоИдентификаторамСообщений(ОписаниеУчетнойЗаписи.УчетнаяЗапись);
	ОтправленныеСобытияПоВсемИдентификаторамСообщений = РегистрыСведений.ИдентификаторыСообщений.ОтправленныеСобытияПоВсемИдентификаторамСообщений(ОписаниеУчетнойЗаписи.УчетнаяЗапись);
	
	КоличествоОбработанныхИнтернетПочтовыхСообщений = 0;
	Для каждого ОписаниеСообщения Из ЗагруженныеСообщения Цикл
		
		ПроцентЗагруженных = Окр(КоличествоОбработанныхИнтернетПочтовыхСообщений / ЗагруженныеСообщения.Количество() * 100);
		Если ПроцентЗагруженных >= 50 Тогда
			ПроцентПрогресса = 75;
		Иначе
			ПроцентПрогресса = 50;
		КонецЕсли;
		ЗаголовокПрогресса = СтрШаблон(НСтр("ru = 'Получение почты ""%1"": загружено %2 из %3'"),
			ОписаниеУчетнойЗаписи.УчетнаяЗапись, КоличествоОбработанныхИнтернетПочтовыхСообщений,
			ЗагруженныеСообщения.Количество());
		ДлительныеОперации.СообщитьПрогресс(ПроцентПрогресса, ЗаголовокПрогресса);
		
		ИдентификаторСообщения = ЭлектроннаяПочтаУНФКлиентСервер.СократитьУгловыеСкобки(ОписаниеСообщения.ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
		
		Для каждого Идентификатор Из ОписаниеСообщения.ИнтернетПочтовоеСообщение.Идентификатор Цикл
			Событие = ОтправленныеСобытияПоИдентификаторамСообщений[ИдентификаторСообщения];
			Если Не ЗначениеЗаполнено(Событие) Тогда
				Событие = СобытияПоЗагруженнымИдентификаторамСообщений[Идентификатор];
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Событие) Тогда
				Событие = СобытияПоЗагруженнымИдентификаторамСообщений[ИдентификаторСообщения];
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Событие) Тогда
				Событие = ОтправленныеСобытияПоВсемИдентификаторамСообщений[ИдентификаторСообщения];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Событие) Тогда
				ОписаниеСообщения.Событие = Событие;
				ОписаниеСообщения.Перемещенное = Истина;
				Продолжить;
			КонецЕсли;
			
			Событие = ЗаписатьСобытие(ОписаниеУчетнойЗаписи, ОписаниеСообщения, Идентификатор, СопоставленныеКонтактыПоАдресамЭП);
			ОписаниеСообщения.Событие = Событие;
			ОписаниеСообщения.Новое = Истина;
			
			КоличествоОбработанныхИнтернетПочтовыхСообщений = КоличествоОбработанныхИнтернетПочтовыхСообщений + 1;
		КонецЦикла;
		
		Если ОписаниеСообщения.Перемещенное И ЗначениеЗаполнено(ОписаниеСообщения.Событие) Тогда
			РегистрыСведений.ИдентификаторыСобытий.УдалитьИдентификаторы(ОписаниеУчетнойЗаписи.УчетнаяЗапись, ОписаниеСообщения.Событие);
			Для каждого Идентификатор Из ОписаниеСообщения.ИнтернетПочтовоеСообщение.Идентификатор Цикл
				РегистрыСведений.ИдентификаторыСобытий.ЗаписатьИдентификатор(ОписаниеУчетнойЗаписи.УчетнаяЗапись, ОписаниеСообщения.Событие, Идентификатор);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АдресаУчастников(Знач ТаблицаИнтернетПочтовыхСообщений)
	
	Результат = Новый Массив;
	
	Для Каждого ОписаниеПочтовогоСообщения Из ТаблицаИнтернетПочтовыхСообщений Цикл
		
		Если ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикОтправленные(ОписаниеПочтовогоСообщения.ПочтовыйЯщик) Тогда
			
			Для Каждого ТекПолучатель Из ОписаниеПочтовогоСообщения.ИнтернетПочтовоеСообщение.Получатели Цикл
				НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
				Если Результат.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
					Результат.Добавить(НормализованныйАдресПолучателя)
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекПолучатель Из ОписаниеПочтовогоСообщения.ИнтернетПочтовоеСообщение.Копии Цикл
				НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
				Если Результат.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
					Результат.Добавить(НормализованныйАдресПолучателя)
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекПолучатель Из ОписаниеПочтовогоСообщения.ИнтернетПочтовоеСообщение.СлепыеКопии Цикл
				НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
				Если Результат.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
					Результат.Добавить(НормализованныйАдресПолучателя)
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			НормализованныйАдресОтправителя = НормализованныйАдрес(ОписаниеПочтовогоСообщения.ИнтернетПочтовоеСообщение.Отправитель.Адрес);			
			Если Результат.Найти(НормализованныйАдресОтправителя) = Неопределено Тогда
				Результат.Добавить(НормализованныйАдресОтправителя);
			КонецЕсли;
			
			Для Каждого ТекПолучатель Из ОписаниеПочтовогоСообщения.ИнтернетПочтовоеСообщение.Получатели Цикл
				НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
				Если Результат.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
					Результат.Добавить(НормализованныйАдресПолучателя)
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекПолучатель Из ОписаниеПочтовогоСообщения.ИнтернетПочтовоеСообщение.Копии Цикл
				НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
				Если Результат.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
					Результат.Добавить(НормализованныйАдресПолучателя)
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкаПочтовогоЯщика(НастройкиПочтовыхЯщиков, ИмяПочтовогоЯщика)
	
	Для каждого НастройкаПочтовогоЯщика Из НастройкиПочтовыхЯщиков Цикл
		Если НастройкаПочтовогоЯщика.ПочтовыйЯщик = ИмяПочтовогоЯщика Тогда
			Возврат НастройкаПочтовогоЯщика.ДополнительныеПараметры;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ВариантЗагрузки", Перечисления.ВариантыЗагрузкиПисем.ТолькоЗаголовки);
	Результат.Вставить("ВариантСинхронизации", Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать);
	Результат.Вставить("ВариантСостояния", Перечисления.ВариантыСостоянияНовыхПисем.ЗапланированоИЗавершено);
	Результат.Вставить("ОтветственныйДляНовыхПисем", Справочники.Пользователи.ПустаяСсылка());
	Возврат Результат;
	
КонецФункции

Процедура СохранитьПеремещениеПисемВПочтовыхЯщиках(ОписаниеУчетнойЗаписи, ЗагруженныеСообщения)
	
	Если ЗагруженныеСообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОписаниеУчетнойЗаписи.ИспользуютсяПочтовыеЯщики Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПочтовыхЯщиков = ЗагруженныеСообщения.ВыгрузитьКолонку("ПочтовыйЯщик");
	ИменаПочтовыхЯщиков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИменаПочтовыхЯщиков);
	ПочтовыеЯщикиУчетнойЗаписи = Справочники.ПочтовыеЯщикиУчетныхЗаписей.ПочтовыеЯщикиПоИменам(ОписаниеУчетнойЗаписи.УчетнаяЗапись, ИменаПочтовыхЯщиков);
	МассивПочтовыхЯщиков = Новый Массив;
	Для каждого КлючЗначение Из ПочтовыеЯщикиУчетнойЗаписи Цикл
		МассивПочтовыхЯщиков.Добавить(КлючЗначение.Значение);
	КонецЦикла;
	ТипыПочтовыхЯщиков = Справочники.ПочтовыеЯщикиУчетныхЗаписей.ТипыПочтовыхЯщиков(МассивПочтовыхЯщиков);
	
	Для каждого ОписаниеСообщения Из ЗагруженныеСообщения Цикл
		Если Не ЗначениеЗаполнено(ОписаниеСообщения.Событие) Тогда
			Продолжить;
		КонецЕсли;
		ПочтовыйЯщикУчетнойЗаписи = ПочтовыеЯщикиУчетнойЗаписи.Получить(ОписаниеСообщения.ПочтовыйЯщик);
		ТипПочтовогоЯщика = ТипыПочтовыхЯщиков.Получить(ПочтовыйЯщикУчетнойЗаписи);
		Если ЗначениеЗаполнено(ТипПочтовогоЯщика) Тогда
			ПочтовыйЯщик = Справочники.ПочтовыеЯщики.ПочтовыйЯщикПоТипу(ТипПочтовогоЯщика);
			РегистрыСведений.СодержимоеПочтовыхЯщиков.ПоместитьВПочтовыйЯщик(ОписаниеУчетнойЗаписи.УчетнаяЗапись, ПочтовыйЯщик, ОписаниеСообщения.Событие);
		КонецЕсли;
		РегистрыСведений.СодержимоеПочтовыхЯщиковУчетныхЗаписей.ПоместитьВПочтовыйЯщик(ОписаниеУчетнойЗаписи.УчетнаяЗапись, ПочтовыйЯщикУчетнойЗаписи, ОписаниеСообщения.Событие, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ФлагиЗагруженныхСообщений(ОписаниеУчетнойЗаписи, ЗагруженныеСообщения)
	
	ФлагиСообщений = Новый Соответствие;
	Для каждого ОписаниеСообщения Из ЗагруженныеСообщения Цикл
		Для каждого Идентификатор Из ОписаниеСообщения.ИнтернетПочтовоеСообщение.Идентификатор Цикл
			ФлагиСообщений.Вставить(Идентификатор, ОписаниеСообщения.ФлагиСообщения);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ФлагиСообщений;
	
КонецФункции

Процедура СохранитьФлагиСообщений(ОписаниеУчетнойЗаписи, ЗагруженныеСообщения, ФлагиСообщений)
	
	Если ФлагиСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	Для каждого ФлагСообщения Из ФлагиСообщений Цикл
		Идентификаторы.Добавить(ФлагСообщения.Ключ);
	КонецЦикла;
	СобытияДляУстановкиФлагов = РегистрыСведений.ИдентификаторыСобытий.СобытияПоИдентификаторам(ОписаниеУчетнойЗаписи.УчетнаяЗапись, Идентификаторы);
	
	Если СобытияДляУстановкиФлагов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФлагиПисем = Новый ТаблицаЗначений;
	ФлагиПисем.Колонки.Добавить("УчетнаяЗапись");
	ФлагиПисем.Колонки.Добавить("Событие");
	ФлагиПисем.Колонки.Добавить("Непрочитанное");
	ФлагиПисем.Колонки.Добавить("Помеченное");
	
	Для каждого ФлагСообщения Из ФлагиСообщений Цикл
		Событие = СобытияДляУстановкиФлагов.Получить(ФлагСообщения.Ключ);
		Если Не ЗначениеЗаполнено(Событие) Тогда
			Продолжить;
		КонецЕсли;
		
		ФлагиПисьма = СтрокаТаблицыЗначенийПоЗначениямКолонок(ФлагиПисем, Новый Структура("УчетнаяЗапись, Событие", ОписаниеУчетнойЗаписи.УчетнаяЗапись, Событие));
		ФлагиПисьма.Непрочитанное = Не ФлагСообщения.Значение.Прочитанное;
		ФлагиПисьма.Помеченное = ФлагСообщения.Значение.Помеченное;
	КонецЦикла;
	
	РегистрыСведений.ФлагиПисем.ИзменитьФлагиПисем(ОписаниеУчетнойЗаписи.УчетнаяЗапись, ФлагиПисем, Истина);
	
КонецПроцедуры

Функция ОбработатьИнтернетПочтовыеСообщения_СопоставитьКонтакты(АдресаУчастников)
	
	СопоставленныеКонтактыПоАдресамЭП = Неопределено;
	Если АдресаУчастников.Количество() <= ЭлектроннаяПочтаУНФКлиентСервер.МаксимальноеКоличествоПакетноСопоставляемыхАдресов() Тогда
		СопоставленныеКонтактыПоАдресамЭП = СопоставленныеАдресатыПоАдресамЭП(АдресаУчастников);
	КонецЕсли;
	
	Возврат СопоставленныеКонтактыПоАдресамЭП;
	
КонецФункции

Функция ЗаписатьСобытие(ОписаниеУчетнойЗаписи, ОписаниеСообщения, Идентификатор, СопоставленныеКонтакты)
	
	НастройкаПочтовогоЯщика = НастройкаПочтовогоЯщика(ОписаниеУчетнойЗаписи.НастройкиПочтовыхЯщиков, ОписаниеСообщения.ПочтовыйЯщик);
	
	Результат = Документы.Событие.ПустаяСсылка();
	Блокировка = НоваяБлокировкаИдентификаторовПисем(ОписаниеУчетнойЗаписи.УчетнаяЗапись);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		СобытияПоИдентификатору = РегистрыСведений.ИдентификаторыСобытий.СобытияПоИдентификаторам(
		ОписаниеУчетнойЗаписи.УчетнаяЗапись, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор));
		Если ЗначениеЗаполнено(СобытияПоИдентификатору) Тогда
			ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Возможно, запущено несколько заданий загрузки почты: сообщение с идентификатором %1 уже записано.'"),
			Идентификатор);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		НовоеСобытие = Документы.Событие.СоздатьДокумент();
		НовоеСобытие.ДополнительныеСвойства.Вставить("СопоставленныеКонтакты", СопоставленныеКонтакты);
		НовоеСобытие.ДополнительныеСвойства.Вставить("Идентификатор", Идентификатор);
		НовоеСобытие.ДополнительныеСвойства.Вставить("ИдентификаторыСообщений", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеСообщения.ИнтернетПочтовоеСообщение.ИдентификаторСообщения));
		НовоеСобытие.ДополнительныеСвойства.Вставить("ЗагрузкаПочты", Истина);
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ИнтернетПочтовоеСообщение", ОписаниеСообщения.ИнтернетПочтовоеСообщение);
		ЗначенияЗаполнения.Вставить("УчетнаяЗапись", ОписаниеУчетнойЗаписи.УчетнаяЗапись);
		ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
		ЗначенияЗаполнения.Вставить("ВариантЗагрузки", НастройкаПочтовогоЯщика.ВариантЗагрузки);
		Если ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикОтправленные(ОписаниеСообщения.ПочтовыйЯщик) Тогда
			ЗначенияЗаполнения.Вставить("ВходящееИсходящееСобытие", Перечисления.ВходящееИсходящееСобытие.Исходящее);
		Иначе
			ЗначенияЗаполнения.Вставить("ВходящееИсходящееСобытие", Перечисления.ВходящееИсходящееСобытие.Входящее);
		КонецЕсли;
		
		НовоеСобытие.ТипСобытия = ЗначенияЗаполнения.ТипСобытия;
		НовоеСобытие.ВходящееИсходящееСобытие = ЗначенияЗаполнения.ВходящееИсходящееСобытие;
		НовоеСобытие.УчетнаяЗапись = ЗначенияЗаполнения.УчетнаяЗапись;
		НовоеСобытие.ЗагрузитьПриОткрытии = Не ОписаниеСообщения.СодержаниеПолучено;
		НовоеСобытие.Заполнить(ЗначенияЗаполнения);
		ЗаполнитьСобытиеПоНастройкамПочтовогоЯщика(НовоеСобытие, НастройкаПочтовогоЯщика, ОписаниеСообщения.ФлагиСообщения);
		
		Если ОписаниеСообщения.ФлагиСообщения.Помеченное Тогда
			НовоеСобытие.Важность = Перечисления.ВариантыВажности.Высокая;
		КонецЕсли;
		НовоеСобытие.Автор = ОписаниеУчетнойЗаписи.Пользователь;
		Если Не ЗначениеЗаполнено(НовоеСобытие.Ответственный) Тогда
			НовоеСобытие.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ОписаниеУчетнойЗаписи.Пользователь, "ОсновнойОтветственный");
		КонецЕсли;
		
		ЭлектроннаяПочтаУНФПереопределяемый.ПриСозданииСобытияНаОснованииИнтернетПочтовогоСообщения(НовоеСобытие, ОписаниеСообщения.ИнтернетПочтовоеСообщение);
		НовоеСобытие.Записать();
		ЭлектроннаяПочтаУНФПереопределяемый.ПослеСозданияСобытияНаОснованииИнтернетПочтовогоСообщения(НовоеСобытие, ОписаниеСообщения.ИнтернетПочтовоеСообщение);
		
		ТипПочтовогоЯщика = ТипПочтовогоЯщикаПоДаннымСобытия(НовоеСобытие);
		ПочтовыйЯщик = Справочники.ПочтовыеЯщики.ПочтовыйЯщикПоТипу(ТипПочтовогоЯщика);
		РегистрыСведений.СодержимоеПочтовыхЯщиков.ПоместитьВПочтовыйЯщик(НовоеСобытие.УчетнаяЗапись, ПочтовыйЯщик, НовоеСобытие.Ссылка);
		РегистрыСведений.ОтказалисьОтРассылки.ЗарегистрироватьОтказОтРассылкиЕслиТребуется(ОписаниеСообщения.ИнтернетПочтовоеСообщение.Тема, ОписаниеСообщения.ИнтернетПочтовоеСообщение.Отправитель);
		
		Результат = НовоеСобытие.Ссылка;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ИмяСобытия = НСтр("ru = 'Загрузка заголовков сообщений электронной почты'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = НСтр("ru='Ошибка при создании события с темой: ""%1"" от ""%2""
		|По причине: %3'");
		ТекстОшибки = СтрШаблон(ТекстОшибки,
			ОписаниеСообщения.ИнтернетПочтовоеСообщение.Тема,
			ОписаниеСообщения.ИнтернетПочтовоеСообщение.ДатаОтправления,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		Результат = Документы.Событие.ПустаяСсылка();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСобытиеПоНастройкамПочтовогоЯщика(НовоеСобытие, НастройкаПочтовогоЯщика, ФлагиСообщения)
	
	Если Не НовоеСобытие.ЗагрузитьПриОткрытии Тогда
		НовоеСобытие.ЗагрузитьПриОткрытии = ЗагрузитьПриОткрытии(НастройкаПочтовогоЯщика.ВариантЗагрузки);
	КонецЕсли;
	
	СледуетСинхронизироватьПросмотр = СледуетСинхронизироватьПросмотр(НастройкаПочтовогоЯщика.ВариантСинхронизации);
	//ЗаполнитьСостояние(НовоеСобытие, НастройкаПочтовогоЯщика.ВариантСостояния, СледуетСинхронизироватьПросмотр, ФлагиСообщения);
	Если ЗначениеЗаполнено(НастройкаПочтовогоЯщика.ОтветственныйДляНовыхПисем) Тогда
		НовоеСобытие.Ответственный = НастройкаПочтовогоЯщика.ОтветственныйДляНовыхПисем;
	КонецЕсли;
	
	Если НастройкаПочтовогоЯщика.ВариантСостояния = Перечисления.ВариантыСостоянияНовыхПисем.ЗапланированоИЗавершено Тогда
		Если СледуетСинхронизироватьПросмотр И Не ФлагиСообщения.Прочитанное Тогда
			НовоеСобытие.Состояние = Справочники.СостоянияСобытий.Запланировано;
		Иначе
			НовоеСобытие.Состояние = Справочники.СостоянияСобытий.Завершено;
		КонецЕсли;
	ИначеЕсли НастройкаПочтовогоЯщика.ВариантСостояния = Перечисления.ВариантыСостоянияНовыхПисем.Завершено Тогда
		НовоеСобытие.Состояние = Справочники.СостоянияСобытий.Завершено;
	ИначеЕсли НастройкаПочтовогоЯщика.ВариантСостояния = Перечисления.ВариантыСостоянияНовыхПисем.Запланировано Тогда
		НовоеСобытие.Состояние = Справочники.СостоянияСобытий.Запланировано;
	ИначеЕсли НастройкаПочтовогоЯщика.ВариантСостояния = Перечисления.ВариантыСостоянияНовыхПисем.Отменено Тогда
		НовоеСобытие.Состояние = Справочники.СостоянияСобытий.Отменено;
	Иначе
		НовоеСобытие.Состояние = Справочники.СостоянияСобытий.Завершено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьЗаданиеЗагрузкиПочты()
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка электронной почты по расписанию'", ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Предупреждение,,,
	НСтр("ru = 'Задание загрузки почты было отключено, так как отсутствуют учетные записи с признаком ""Получать почту"".
	|Проверьте настройки в диалоге ""Больше возможностей"" - ""Персональные настройки"" - ""Почта и SMS"" - ""Мои учетные записи"".'",
	ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

Процедура ОтключитьЗагрузкуПочтыДляУчетнойЗаписи(УчетнаяЗапись)
	
	РегистрыСведений.УчетныеЗаписиПользователя.ОтключитьПризнакЗагружатьПочту(УчетнаяЗапись);
	
	ТекстПредупреждения = НСтр("ru = 'Загрузка электронной почты для учетной записи ""%1"" приостановлена из-за большого количества ошибок.
		|Проверьте настройки в диалоге ""Больше возможностей"" - ""Персональные настройки"" - ""Почта и SMS"" - ""Мои учетные записи"".'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, УчетнаяЗапись);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка электронной почты по расписанию'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,,, ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область ПочтовыеЯщики

Процедура ОбновитьСправочникПочтовыхЯщиков(УчетнаяЗапись, ПочтовыеПапкиНаСервере, СимволРазделитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПочтовыеЯщикиУчетныхЗаписей.Ссылка КАК Ссылка,
	|	ПочтовыеЯщикиУчетныхЗаписей.ПометкаУдаления КАК ПометкаУдаления,
	|	ПочтовыеЯщикиУчетныхЗаписей.НаименованиеНаСервере КАК НаименованиеНаСервере,
	|	ПочтовыеЯщикиУчетныхЗаписей.Родитель.Ссылка КАК РодительСсылка,
	|	ПочтовыеЯщикиУчетныхЗаписей.Родитель.НаименованиеНаСервере КАК РодительНаименованиеНаСервере
	|ИЗ
	|	Справочник.ПочтовыеЯщикиУчетныхЗаписей КАК ПочтовыеЯщикиУчетныхЗаписей
	|ГДЕ
	|	ПочтовыеЯщикиУчетныхЗаписей.Владелец = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	ДанныеПочтовыхПапок = Запрос.Выполнить().Выгрузить();
	ПочтовыеПапки = ДанныеПочтовыхПапок.ВыгрузитьКолонку("НаименованиеНаСервере");
	ПочтовыеПапкиКУдалению = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПочтовыеПапки, ПочтовыеПапкиНаСервере);
	ПочтовыеПапкиКСозданию = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПочтовыеПапкиНаСервере, ПочтовыеПапки);
	ПочтовыеПапкиНеизмененные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПочтовыеПапки, ПочтовыеПапкиКУдалению);
	ДеревоПапокКСозданию = РазложитьПочтовыеПапкиВДерево(ПочтовыеПапкиКСозданию, СимволРазделитель);
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого ИмяПапки Из ПочтовыеПапкиКУдалению Цикл
			ДанныеПапки = ДанныеПочтовыхПапок.Найти(ИмяПапки, "НаименованиеНаСервере");
			ПапкаОбъект = ДанныеПапки.Ссылка.ПолучитьОбъект();
			ПапкаОбъект.УстановитьПометкуУдаления(Истина, Истина);
			ПапкаОбъект.Записать();
		КонецЦикла;
		
		Для каждого Строка Из ДанныеПочтовыхПапок Цикл
			Если ПочтовыеПапкиНеизмененные.Найти(Строка.НаименованиеНаСервере) <> Неопределено
				И Строка.ПометкаУдаления Тогда
				ПапкаОбъект = Строка.Ссылка.ПолучитьОбъект();
				ПапкаОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
				ПапкаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		
		СоздатьДеревоПочтовыхЯщиковВСправочнике(УчетнаяЗапись, ДеревоПапокКСозданию.Строки);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Почта", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьДеревоПочтовыхЯщиковВСправочнике(УчетнаяЗапись, ПочтовыеПапки, Родитель = Неопределено)
	
	Для каждого ТекущаяСтрока Из ПочтовыеПапки Цикл
		ПапкаОбъект = Справочники.ПочтовыеЯщикиУчетныхЗаписей.СоздатьЭлемент();
		ПапкаОбъект.Владелец = УчетнаяЗапись;
		ПапкаОбъект.Родитель = Родитель;
		ПапкаОбъект.Наименование = ТекущаяСтрока.Наименование;
		ПапкаОбъект.НаименованиеНаСервере = ТекущаяСтрока.НаименованиеНаСервере;
		ПапкаОбъект.ПредопределеноПочтовымСервером = Истина;
		Если ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикВходящие(ТекущаяСтрока.Наименование) Тогда
			ПапкаОбъект.ВидПапки = Перечисления.ТипыПочтовыхЯщиков.Входящие;
		ИначеЕсли ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикИсходящие(ТекущаяСтрока.Наименование) Тогда
			ПапкаОбъект.ВидПапки = Перечисления.ТипыПочтовыхЯщиков.Исходящие;
		ИначеЕсли ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикОтправленные(ТекущаяСтрока.Наименование) Тогда
			ПапкаОбъект.ВидПапки = Перечисления.ТипыПочтовыхЯщиков.Отправленные;
		ИначеЕсли ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикСПАМ(ТекущаяСтрока.Наименование) Тогда
			ПапкаОбъект.ВидПапки = Перечисления.ТипыПочтовыхЯщиков.Спам;
		ИначеЕсли ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикУдаленные(ТекущаяСтрока.Наименование) Тогда
			ПапкаОбъект.ВидПапки = Перечисления.ТипыПочтовыхЯщиков.Удаленные;
		ИначеЕсли ЭлектроннаяПочтаУНФКлиентСервер.ЭтоЯщикЧерновики(ТекущаяСтрока.Наименование) Тогда
			ПапкаОбъект.ВидПапки = Перечисления.ТипыПочтовыхЯщиков.Черновики;
		Иначе
			ПапкаОбъект.ВидПапки = Перечисления.ТипыПочтовыхЯщиков.ПустаяСсылка();
		КонецЕсли;
		ПапкаОбъект.Записать();
		
		Если ТекущаяСтрока.Строки.Количество() <> 0 Тогда
			СоздатьДеревоПочтовыхЯщиковВСправочнике(УчетнаяЗапись, ТекущаяСтрока.Строки, ПапкаОбъект.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаДереваПоЗначениюКолонки(СтрокиДерева, ИмяКолонки, ЗначениеКолонки)
	
	Результат = Неопределено;
	
	Для каждого ТекущаяСтрока Из СтрокиДерева Цикл
		Если ТекущаяСтрока[ИмяКолонки] = ЗначениеКолонки Тогда
			Результат = ТекущаяСтрока;
			Прервать;
		Иначе
			СтрокаДерева = СтрокаДереваПоЗначениюКолонки(ТекущаяСтрока.Строки, ИмяКолонки, ЗначениеКолонки);
			Если СтрокаДерева <> Неопределено Тогда
				Результат = СтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазложитьПочтовыеПапкиВДерево(ПочтовыеЯщики, СимволРазделитель)
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Наименование", ТипСтрока);
	Дерево.Колонки.Добавить("НаименованиеНаСервере", ТипСтрока);
	
	Для каждого ИмяПочтовогоЯщика Из ПочтовыеЯщики Цикл
		СоставИмениПочтовогоЯщика = СтрРазделить(ИмяПочтовогоЯщика, СимволРазделитель);
		СтрокиДерева = Дерево.Строки;
		
		НаименованиеНаСервере = "";
		Для каждого ВложенноеИмяПочтовогоЯщика Из СоставИмениПочтовогоЯщика Цикл
			МассивИмен = Новый Массив;
			Если ЗначениеЗаполнено(НаименованиеНаСервере) Тогда
				МассивИмен.Добавить(НаименованиеНаСервере);
			КонецЕсли;
			МассивИмен.Добавить(ВложенноеИмяПочтовогоЯщика);
			НаименованиеНаСервере = СтрСоединить(МассивИмен, СимволРазделитель);
			
			НоваяСтрока = Неопределено;
			Для каждого СтрокаДерева Из СтрокиДерева Цикл
				Если СтрокаДерева.НаименованиеНаСервере = НаименованиеНаСервере Тогда
					НоваяСтрока = СтрокаДерева;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = СтрокиДерева.Добавить();
				НоваяСтрока.Наименование = ВложенноеИмяПочтовогоЯщика;
				НоваяСтрока.НаименованиеНаСервере = НаименованиеНаСервере;
			КонецЕсли;
			
			СтрокиДерева = НоваяСтрока.Строки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции

Функция ТипПочтовогоЯщикаПоДаннымСобытия(Событие)
	
	Если ТипЗнч(Событие) = Тип("ДокументОбъект.Событие") Тогда
		ДанныеСобытия = Событие;
		ЭтоОтправленноеПисьмо = Событие.ДополнительныеСвойства.Свойство("Идентификатор") Или Событие.ДополнительныеСвойства.Свойство("ИдентификаторыСообщений");
	Иначе
		ДанныеСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие, "ПометкаУдаления,ВходящееИсходящееСобытие,УчетнаяЗапись,Ссылка");
		ЭтоОтправленноеПисьмо = Ложь;
	КонецЕсли;
	
	Если Не ЭтоОтправленноеПисьмо Тогда
		ИдентификаторСобытия = РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(ДанныеСобытия.УчетнаяЗапись, ДанныеСобытия.Ссылка);
		ЭтоОтправленноеПисьмо = ЗначениеЗаполнено(ИдентификаторСобытия);
	КонецЕсли;
	
	Если ДанныеСобытия.ПометкаУдаления Тогда
		ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Удаленные;
	ИначеЕсли Не ЭтоОтправленноеПисьмо Тогда
		ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Черновики;
	ИначеЕсли ДанныеСобытия.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
		ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Отправленные;
	Иначе
		ТипПочтовогоЯщика = Перечисления.ТипыПочтовыхЯщиков.Входящие;
	КонецЕсли;
	
	Возврат ТипПочтовогоЯщика;
	
КонецФункции

#КонецОбласти

Функция ПолучитьАдресатовПисьмаПоАдресамЭП(АдресаЭП, Результат)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АдресатыПисем.Ссылка КАК Контакт,
	|	АдресатыПисем.Адресат КАК АдресЭП
	|ИЗ
	|	Справочник.АдресатыПисем КАК АдресатыПисем
	|ГДЕ
	|	АдресатыПисем.Адресат В(&АдресаЭП)");
	
	Запрос.УстановитьПараметр("АдресаЭП", АдресаЭП);
	РезультатЗапроса = Запрос.Выполнить();
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаАдресЭП = НРег(СокрЛП(Выборка.АдресЭП));
		
		Если Результат[ВыборкаАдресЭП] = Неопределено Тогда
			Результат[ВыборкаАдресЭП] = Новый Массив;
		КонецЕсли;
		
		Если Результат[ВыборкаАдресЭП].Найти(Выборка.Контакт) = Неопределено Тогда
			Результат[ВыборкаАдресЭП].Добавить(Выборка.Контакт);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьАдресатовПисьма(Событие, Знач ПочтовоеСообщение, Знач СопоставленныеКонтакты, АдресЭПУчетнойЗаписи = "") Экспорт
	
	Если СопоставленныеКонтакты = Неопределено Тогда
		СопоставленныеКонтакты = СопоставленныеКонтактыИзПочтовогоСообщения(ПочтовоеСообщение);
	КонецЕсли;
	
	Если Событие.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		
		ЗаполнитьКонтактыОбработатьПолучателя(Событие,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.Отправитель,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.ОтКого);
		
		ЗаполнитьКонтактыОбработатьПолучателей(Событие,
		ПочтовоеСообщение,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.Получатели,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому, АдресЭПУчетнойЗаписи);
		
		ЗаполнитьКонтактыОбработатьПолучателей(Событие,
		ПочтовоеСообщение,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.Копии,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.Копия);

	Иначе
		
		ЗаполнитьКонтактыОбработатьПолучателей(Событие,
		ПочтовоеСообщение,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.Получатели,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому);
		
		ЗаполнитьКонтактыОбработатьПолучателей(Событие,
		ПочтовоеСообщение,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.Копии,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.Копия);
		
		ЗаполнитьКонтактыОбработатьПолучателей(Событие,
		ПочтовоеСообщение,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.СлепыеКопии,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.СкрытаяКопия);
		
	КонецЕсли;
	
	Для Каждого АдресЭП Из ОбщегоНазначенияКлиентСервер.СвернутьМассив(Событие.Участники.ВыгрузитьКолонку("КакСвязаться")) Цикл
		Событие.ОчиститьДублиУчастников(АдресЭП);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТекстТребуетсяАвторизация()
	Возврат "ru = 'Требуется настройка авторизации на почтовом сервере.'";
КонецФункции

// Добавляет в массив имя метаданных содержащих e-mail
//
//
Процедура ОбъектСодержитEmail(МетаданныеОбъектаРеквизита, ТипыМетаданныхСодержащиеПартнерскиеEmail, ИменаРеквизитовСодержащиеEmail)
	
	Если НЕ ТипыМетаданныхСодержащиеПартнерскиеEmail.НайтиПоЗначению(МетаданныеОбъектаРеквизита.Тип) = Неопределено Тогда
		
		ИменаРеквизитовСодержащиеEmail.Добавить(МетаданныеОбъектаРеквизита.Имя);
		
	КонецЕсли;
	
КонецПроцедуры //ОбъектСодержитEmail()

// Процедура заполняет тему и текст параметров отправки электронного письма при печати документов.
// Параметры совпадают с параметрами передаваемыми в процедуру Печать() модулей менеджеров документов.
//
Процедура ЗаполнитьТемуТекстОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм)
	
	Тема  = "";
	Текст = "";
	
	ПредставлениеЗаголовкаДокумента = "";
	ПредставлениеДляКого = "";
	ПредставлениеОтКого = "";
	
	ПечатаютсяДокументы = МассивОбъектов.Количество() > 0 И ОбщегоНазначения.ВидОбъектаПоСсылке(МассивОбъектов[0]) = "Документ";
	
	Если ПечатаютсяДокументы Тогда
		Если МассивОбъектов.Количество() = 1 Тогда
			ПредставлениеЗаголовкаДокумента = ЗаголовокДокумента(МассивОбъектов[0]);
		Иначе
			ПредставлениеЗаголовкаДокумента = "Документы: ";
			Для Каждого ОбъектДляПечати Из МассивОбъектов Цикл
				ПредставлениеЗаголовкаДокумента = ПредставлениеЗаголовкаДокумента + ?(ПредставлениеЗаголовкаДокумента = "Документы: ", "", "; ")
					+ ЗаголовокДокумента(ОбъектДляПечати);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураТиповОбъектыПечати = РазложитьСписокПоТипамОбъектов(МассивОбъектов);
	
	ОрганизацияПоПисьму = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Организация", ОписаниеТиповИзСтроки("Организации"));
	КонтрагентПоПисьму  = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Контрагент",  ОписаниеТиповИзСтроки("Контрагенты"));
	
	Если ЗначениеЗаполнено(КонтрагентПоПисьму) Тогда
		ПредставлениеДляКого = "для " + ПолучитьПредставлениеУчастника(КонтрагентПоПисьму);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияПоПисьму) Тогда
		ПредставлениеОтКого = "от " + ПолучитьПредставлениеУчастника(ОрганизацияПоПисьму);
	КонецЕсли;
	
	ДопустимаяДлинаТемы = Метаданные.Документы.Событие.Реквизиты.Тема.Тип.КвалификаторыСтроки.Длина;
	Если СтрДлина(ПредставлениеЗаголовкаДокумента + ПредставлениеДляКого + ПредставлениеОтКого) > ДопустимаяДлинаТемы Тогда
		ПредставлениеОтКого = "";
	КонецЕсли;
	Если СтрДлина(ПредставлениеЗаголовкаДокумента + ПредставлениеДляКого + ПредставлениеОтКого) > ДопустимаяДлинаТемы Тогда
		ПредставлениеДляКого = "";
	КонецЕсли;
	Если СтрДлина(ПредставлениеЗаголовкаДокумента + ПредставлениеДляКого + ПредставлениеОтКого) > ДопустимаяДлинаТемы Тогда
		ПредставлениеЗаголовкаДокумента = "";
		Если ПечатаютсяДокументы Тогда
			ПредставлениеЗаголовкаДокумента = "Документы: ";
			Для каждого КлючИЗначение Из СтруктураТиповОбъектыПечати Цикл
				ПредставлениеЗаголовкаДокумента = ПредставлениеЗаголовкаДокумента + ?(ПредставлениеЗаголовкаДокумента = "Документы: ", "", "; ")
					+ ?(ПустаяСтрока(КлючИЗначение.Ключ.ПредставлениеСписка), КлючИЗначение.Ключ.Синоним, КлючИЗначение.Ключ.ПредставлениеСписка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 %3'"),
		ПредставлениеЗаголовкаДокумента,
		ПредставлениеДляКого,
		ПредставлениеОтКого);
		
	Если НЕ (ПараметрыОтправки.Свойство("Тема") И ЗначениеЗаполнено(ПараметрыОтправки.Тема)) Тогда
		ПараметрыОтправки.Вставить("Тема", СократитьДвойныеПробелы(Тема));
	КонецЕсли;
	
	Если НЕ (ПараметрыОтправки.Свойство("Текст") И ЗначениеЗаполнено(ПараметрыОтправки.Текст)) Тогда
		ПараметрыОтправки.Вставить("Текст", СократитьДвойныеПробелы(Текст));
	КонецЕсли;
	
КонецПроцедуры

// Функция получает значение основного печатаемого реквизита для участников электронного письма.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Контрагенты, СправочникСсылка.Организации	 - Ссылка на участника для которого необходимо получить представление
// Возвращаемое значение:
//  Строка - значение представления
//
Функция ПолучитьПредставлениеУчастника(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ИменаРеквизитовОбъекта = Новый Соответствие;
	
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Контрагенты"), "НаименованиеПолное");
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Организации"), "Наименование");
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИменаРеквизитовОбъекта[ТипЗнч(Ссылка)]);
	
КонецФункции 

// Функция заменяет двойные пробелы одинарными.
//
// Параметры:
//  ИсходнаяСтрока	 - Строка
// Возвращаемое значение:
//  Строка - Строка без двойных пробелов
//
Функция СократитьДвойныеПробелы(ИсходнаяСтрока)
	
	Счетчик = 0;
	
	Пока СтрНайти(ИсходнаяСтрока, "  ") > 0  Цикл
		
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "  ", " ");
		
		Счетчик = Счетчик + 1;
		Если Счетчик >= 1000 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СокрП(ИсходнаяСтрока);
	
КонецФункции

// Функция возвращает описание ссылочных типов по входящей строке.
//
// Параметры:
//  СтрокаОписанияТипов	 - Строка	 - Строка с именами справочников, разделенных запятыми
// Возвращаемое значение:
//  ОписаниеТипов
//
Функция ОписаниеТиповИзСтроки(СтрокаОписанияТипов)

	СтруктураДопустимыхТипов 	= Новый Структура(СтрокаОписанияТипов);
	МассивДопустимыхТипов 		= Новый Массив;
	
	Для каждого ЭлементСтруктуры Из СтруктураДопустимыхТипов Цикл
		
		МассивДопустимыхТипов.Добавить(Тип("СправочникСсылка."+ЭлементСтруктуры.Ключ));
		
	КонецЦикла; 
	
	Возврат Новый ОписаниеТипов(МассивДопустимыхТипов);
	
КонецФункции 

// Функция раскладывает список значений на соответствие по типам значений.
//
// Параметры:
//  МассивОбъектов - <СписокЗначений> - список объектов различного вида
//
// Возвращаемое значение:
//   Соответствие   - соответствие в котором Ключ = Метаданные типа, Значение = массив объектов этого типа
//
Функция РазложитьСписокПоТипамОбъектов(СписокОбъектов)
	
	СтруктураТипов = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		
		МетаданныеДокумента = Объект.Метаданные();
		
		Если СтруктураТипов.Получить(МетаданныеДокумента) = Неопределено Тогда
			МассивДокументов = Новый Массив;
			СтруктураТипов.Вставить(МетаданныеДокумента, МассивДокументов);
		КонецЕсли;
		
		СтруктураТипов[МетаданныеДокумента].Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СтруктураТипов;
	
КонецФункции

// Список реквизитов исключенных из поиска 
//
Функция ИсключенияПоискаОбщихРеквизитов()
	
	СвойстваИсключения = Новый Массив;
	СвойстваИсключения.Добавить("Организация");
	
	Исключения = Новый Соответствие;
	Исключения.Вставить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка().Метаданные(), СвойстваИсключения);
	
	Возврат Исключения;
	
КонецФункции

// Возвращает ссылку на значение реквизита который должен быть одинаков во всех объектах списка. 
// Если значение реквизита в документах списка различается, то возвращается Неопределено
//
// Параметры:
//  ОбъектыПечати  - <СписокЗначений> - список объектов, в которых ищем контрагента
//
// Возвращаемое значение:
//   <СправочникСсылка>, Неопределено - ссылка-значение реквизита, которая содержится во всех объектах, Неопределено - иначе
//
Функция ПолучитьЗначениеОбщегоРеквизита(СтруктураТипов, ИмяРеквизита, ОписаниеДопустимыхТипов)
	Перем ТекстЗапроса;
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПоОбъекту = "
	|	%ИмяОбъекта%.%ИмяРеквизита% КАК %ИмяРеквизита%
	|ИЗ
	|	%ТипОбъекта%.%ИмяОбъекта% КАК %ИмяОбъекта%
	|ГДЕ
	|	%ИмяОбъекта%.Ссылка В(&СписокОбъектов%ИмяОбъекта%)";
	
	ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту, "%ИмяРеквизита%", ИмяРеквизита);
	ИсключенияПоискаОбщихРеквизитов = ИсключенияПоискаОбщихРеквизитов();
	
	Для каждого КлючИЗначение Из СтруктураТипов Цикл
		
		Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваИсключения = ИсключенияПоискаОбщихРеквизитов.Получить(КлючИЗначение.Ключ);
		Если СвойстваИсключения <> Неопределено И СвойстваИсключения.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоДокумент(КлючИЗначение.Ключ) Тогда
			ТипОбъекта = "Документ";
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(КлючИЗначение.Ключ) Тогда
			ТипОбъекта = "Справочник";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = КлючИЗначение.Ключ.Имя;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса+"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ";
			
		Иначе
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстЗапросаПоОбъекту, "%ТипОбъекта%", ТипОбъекта);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", ИмяОбъекта);
		
		Запрос.УстановитьПараметр("СписокОбъектов" + ИмяОбъекта, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Если Выборка.Следующий() Тогда
				Возврат ОписаниеДопустимыхТипов.ПривестиЗначение(Выборка[ИмяРеквизита]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НормализованныйАдрес(АдресЭП)
	
	Возврат НРег(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(АдресЭП, ""));
	
КонецФункции

Функция ПолучитьКонтрагентыКонтактыПоАдресамЭП(АдресаЭП, Результат)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контакт,
	|	КонтрагентыКонтактнаяИнформация.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.АдресЭП В(&АдресаЭП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП В(&АдресаЭП)");
	
	Запрос.УстановитьПараметр("АдресаЭП", АдресаЭП);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаАдресЭП = НРег(Выборка.АдресЭП);
		
		Если Результат[ВыборкаАдресЭП] = Неопределено Тогда
			Результат[ВыборкаАдресЭП] = Новый Массив;
		КонецЕсли;
		
		Если Результат[ВыборкаАдресЭП].Найти(Выборка.Контакт) = Неопределено Тогда
			Если ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
				Результат[ВыборкаАдресЭП].Вставить(0, Выборка.Контакт);
			Иначе
				Результат[ВыборкаАдресЭП].Добавить(Выборка.Контакт);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЛидыПоАдресамЭП(АдресаЭП, Результат)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЛидыКонтактнаяИнформация.Ссылка КАК Контакт,
	|	ЛидыКонтактнаяИнформация.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Лиды.КонтактнаяИнформация КАК ЛидыКонтактнаяИнформация
	|ГДЕ
	|	ЛидыКонтактнаяИнформация.АдресЭП В(&АдресаЭП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛидыКонтактнаяИнформация.Ссылка,
	|	ЛидыКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.КонтактыЛидов.КонтактнаяИнформация КАК ЛидыКонтактнаяИнформация
	|ГДЕ
	|	ЛидыКонтактнаяИнформация.АдресЭП В(&АдресаЭП)");

	Запрос.УстановитьПараметр("АдресаЭП", АдресаЭП);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаАдресЭП = НРег(Выборка.АдресЭП);
		
		Если Результат[ВыборкаАдресЭП] = Неопределено Тогда
			Результат[ВыборкаАдресЭП] = Новый Массив;
		КонецЕсли;
		
		Если Результат[ВыборкаАдресЭП].Найти(Выборка.Контакт) = Неопределено Тогда
			Если ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Лиды") Тогда
				Результат[ВыборкаАдресЭП].Вставить(0, Выборка.Контакт);
			Иначе
				Результат[ВыборкаАдресЭП].Добавить(Выборка.Контакт);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Процедура добавляет значения структуры в список значений
//
// СписокЗначений - список значений, в который будут добавлены значения структуры;
// СтруктураСоЗначениями - структура значения которой будут добавлены в список значений;
// ДобавлятьДубликаты - флаг, который регулирует добавление 
//
Процедура ЗначенияСтруктурыВСписокЗначений(СписокЗначений, СтруктураСоЗначениями, ДобавлятьДубликаты = Ложь)
	
	Для Каждого ЭлементСтруктуры Из СтруктураСоЗначениями Цикл

		Если Не ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			Продолжить;
		КонецЕсли;

		Если Не ДобавлятьДубликаты И СписокЗначений.НайтиПоЗначению(ЭлементСтруктуры.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СписокЗначений.Добавить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ);

	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОчисткуДанныхОФайле(ФайлСсылка)
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка)).ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ФайлСсылка);
		БлокировкаДанных.Заблокировать();
		
		ФайлСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		// Записать ошибку в журнал регистрации.
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОчисткиЭлектронныхПисем.Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,, ФайлСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Функция СтрокаТаблицыЗначенийПоЗначениямКолонок(ТаблицаЗначений, ПараметрыОтбора)
	
	Строки = ТаблицаЗначений.НайтиСтроки(ПараметрыОтбора);
	Если Строки.Количество() <> 0 Тогда
		Возврат Строки[0];
	КонецЕсли;
	
	НоваяСтрока = ТаблицаЗначений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыОтбора);
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция УчетныеЗаписиДляЗагрузки(НастройкиЗагрузки)
	
	Результат = Новый Массив;
	Для каждого НастройкаЗагрузки Из НастройкиЗагрузки Цикл
		Если НастройкаЗагрузки.ЗагружатьПочту
			И Результат.Найти(НастройкаЗагрузки.УчетнаяЗапись) = Неопределено Тогда
			Результат.Добавить(НастройкаЗагрузки.УчетнаяЗапись);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьКолонкуПоПараметрамОтбора(ТаблицаЗначений, ИмяКолонки, ПараметрыОтбора)
	
	Результат = Новый Массив;
	Строки = ТаблицаЗначений.НайтиСтроки(ПараметрыОтбора);
	Для каждого Строка Из Строки Цикл
		Результат.Добавить(Строка[ИмяКолонки]);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ОповеститьКлиентскийСеансОНовыхПисьмах(РезультатыЗагрузки)
	
	КоличествоЗагруженныхПисем = 0;
	Для каждого РезультатЗагрузки Из РезультатыЗагрузки Цикл
		КоличествоЗагруженныхПисем = КоличествоЗагруженныхПисем + РезультатЗагрузки.ЗагруженоПисем;
	КонецЦикла;
	
	Если КоличествоЗагруженныхПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОповещения = ЭлектроннаяПочтаУНФКлиентСервер.ИмяСерверногоОповещения();
	СерверныеОповещения.ОтправитьСерверноеОповещение(ИмяОповещения, РезультатыЗагрузки, Неопределено, Истина);
	
КонецПроцедуры

Функция РасписаниеЗагрузкиЭлектроннойПочтыПоУмолчанию()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели   = ДниНедели;
	Расписание.Месяцы      = Месяцы;
	Расписание.ПериодПовтораВТечениеДня = ?(ОбщегоНазначения.РежимОтладки(), 5, 180);
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
	
КонецФункции

Процедура ВключитьЗаданиеЗагрузкиЭлектроннойПочты(Источник)
	
	Если Не Источник.ИспользоватьДляПолучения Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Недействителен Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяУчетнаяЗапись = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты");
	Если СистемнаяУчетнаяЗапись = Неопределено Тогда
		СистемнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка <> &СистемнаяУчетнаяЗапись
	|	И УчетныеЗаписиЭлектроннойПочты.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("СистемнаяУчетнаяЗапись", СистемнаяУчетнаяЗапись);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьЗаданиеЗагрузкиЭлектроннойПочты(Истина);
	
КонецПроцедуры

// Возвращает массив адресов электронной почты, полученный из строки.
//
// Параметры:
//  Письма - массив ссылок на электронные письма.
// 
// Возвращаемое значение:
//  Массив - массив структур с полями:
//    * Данные - ИнтернетПочтовоеСообщение,
//    * Идентификатор - Строка,
//    * Письмо - Документы.Событие.Ссылка.
//
Функция ИнтернетПочтовыеСообщенияПисем(Знач Письма) Экспорт
	
	МассивДанных = ВыделенныеПисьмаДляВложения(Письма);
	
	МассивПисем = Новый Массив;
	
	Для Каждого Письмо Из МассивДанных Цикл
		
		ИнтернетПС = НовоеИнтернетПочтовоеСообщение(Письмо);
		
		СтруктураПисьма = Новый Структура;
		СтруктураПисьма.Вставить("Данные", ИнтернетПС);
		СтруктураПисьма.Вставить("Идентификатор", Письмо.ИДФайлаЭлектронногоПисьма);
		СтруктураПисьма.Вставить("Письмо", Письмо.Письмо);
		
		МассивПисем.Добавить(СтруктураПисьма);
		
	КонецЦикла;
	
	Возврат МассивПисем;
	
КонецФункции

Функция ВыделенныеПисьмаДляВложения(Письма)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Событие.Ссылка КАК СсылкаПисьма,
	|	Событие.Тема КАК Тема,
	|	Событие.Важность КАК Важность,
	|	Событие.СодержаниеHTML КАК СодержаниеHTML,
	|	Событие.Представление КАК Представление,
	|	Событие.Участники.(
	|		Контакт КАК Контакт,
	|		КакСвязаться КАК КакСвязаться,
	|		ТипПолучателяЭлектронногоПисьма КАК ТипПолучателя
	|	) КАК Участники,
	|	СобытиеПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	СобытиеПрисоединенныеФайлы.Расширение КАК Расширение,
	|	СобытиеПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,
	|	СобытиеПрисоединенныеФайлы.Наименование КАК Наименование,
	|	Событие.УчетнаяЗапись КАК УчетнаяЗапись,
	|	СобытиеПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.Событие КАК Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СобытиеПрисоединенныеФайлы КАК СобытиеПрисоединенныеФайлы
	|		ПО (Событие.Ссылка = СобытиеПрисоединенныеФайлы.ВладелецФайла)
	|ГДЕ
	|	Событие.Ссылка В (&Письма)
	|ИТОГИ ПО
	|	СсылкаПисьма КАК СсылкаПисьма";
	
	Запрос.УстановитьПараметр("Письма", Письма);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Возврат ДанныеПолученныхПисемДляВложения(Выборка);
	
КонецФункции

Функция ДанныеПолученныхПисемДляВложения(Выборка)
	
	МассивДанных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеВложений = Новый Соответствие;
		ДочерниеЗаписи = Выборка.Выбрать();
		СтруктураУчастников = Новый Структура;
		
		Пока ДочерниеЗаписи.Следующий() Цикл
			Если Не ЗначениеЗаполнено(СтруктураУчастников) Тогда
				ОбработатьУчастниковПисьма(ДочерниеЗаписи, СтруктураУчастников);
			КонецЕсли;
			
			Если ДочерниеЗаписи.Ссылка <> Null Тогда
				Вложения = ДанныеВложенияПисьма(ДочерниеЗаписи);
				Для Каждого Элемент Из Вложения Цикл
					ДанныеВложений.Вставить(Элемент.Ключ, Элемент.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтруктураУчастников.Отправитель) Тогда
			Отправитель = СтруктураУчастников.Отправитель;
		Иначе
			Отправитель= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Выборка.УчетнаяЗапись,
			"АдресЭлектроннойПочты, ИмяПользователя");
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура("Тема, ИДФайлаЭлектронногоПисьма");
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		ДанныеЗаполнения.Вставить("Кому", СтруктураУчастников.Кому);
		ДанныеЗаполнения.Вставить("Копия", СтруктураУчастников.Копия);
		ДанныеЗаполнения.Вставить("СкрытаяКопия", СтруктураУчастников.СкрытаяКопия);
		ДанныеЗаполнения.Вставить("ИмяФайла", Выборка.Представление);
		ДанныеЗаполнения.Вставить("ТипТекста" , "HTML");
		ДанныеЗаполнения.Вставить("ИмяОтправителя", Отправитель.ИмяПользователя);
		ДанныеЗаполнения.Вставить("АдресОтправителя", Отправитель.АдресЭлектроннойПочты);
		ДанныеЗаполнения.Вставить("Кодировка", "utf-8");
		ДанныеЗаполнения.Вставить("Тело", Выборка.СодержаниеHTML);
		ДанныеЗаполнения.Вставить("Важность",
		ВажностьИнтернетПочтовогоСообщенияИзПеречисления(Выборка.Важность));
		ДанныеЗаполнения.Вставить("Вложения", ДанныеВложений);
		ДанныеЗаполнения.Вставить("Письмо", Выборка.СсылкаПисьма);
		ДанныеЗаполнения.Вставить("ЭтоОткрытиеВложенногоПисьма", ЗначениеЗаполнено(ДанныеЗаполнения.Письмо));
		
		МассивДанных.Добавить(ДанныеЗаполнения);
	КонецЦикла;
	
	Возврат МассивДанных;
КонецФункции

// Обрабатывает вложения писем для дальнейшего добавления в ИнтернетПочтовоеСообщение
Функция ДанныеВложенияПисьма(Выборка)
	
	ДанныеВложения = Новый Соответствие;
	Если Выборка.ПометкаУдаления Тогда 
		Возврат ДанныеВложения;
	КонецЕсли;
	
	Данные = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка);
	Если Выборка.Расширение = "msg" Или Выборка.Расширение = "eml" Тогда
		ИнтернетПС = Новый ИнтернетПочтовоеСообщение;
		ИнтернетПС.УстановитьИсходныеДанные(Данные);
		Данные = ИнтернетПС;
	КонецЕсли;
	
	Наименование = СтрШаблон(НСтр("ru = '%1.%2'"), Выборка.Наименование, Выборка.Расширение);
	
	Значение = Новый Структура;
	Значение.Вставить("ДвоичныеДанные", Данные);
	Значение.Вставить("Кодировка", "utf-8");
	Значение.Вставить("Идентификатор", Выборка.ИДФайлаЭлектронногоПисьма);
	
	ДанныеВложения.Вставить(Наименование, Значение);
	
	Возврат ДанныеВложения;
	
КонецФункции

Процедура ОбработатьУчастниковПисьма(Знач Выборка, СтруктураУчастников)
	
	СтруктураУчастников.Вставить("Кому", Новый Массив);
	СтруктураУчастников.Вставить("Копия", Новый Массив);
	СтруктураУчастников.Вставить("СкрытаяКопия", Новый Массив);
	СтруктураУчастников.Вставить("Отправитель", Новый Структура);
	
	УчастникиВыборка = Выборка.Участники.Выбрать();
	
	Пока УчастникиВыборка.Следующий() Цикл
		
		СтруктураПолучателя = Новый Структура("Представление, Адрес");
		СтруктураПолучателя.Представление = УчастникиВыборка.Контакт;
		СтруктураПолучателя.Адрес = УчастникиВыборка.КакСвязаться;
		
		Тип = УчастникиВыборка.ТипПолучателя;
		
		Если Тип = Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому Тогда
			СтруктураУчастников.Кому.Добавить(СтруктураПолучателя);
		ИначеЕсли Тип = Перечисления.ТипыПолучателейЭлектронногоПисьма.ОтКого Тогда
			СтруктураУчастников.Отправитель.Вставить("ИмяПользователя", СтруктураПолучателя.Представление);
			СтруктураУчастников.Отправитель.Вставить("АдресЭлектроннойПочты", СтруктураПолучателя.Адрес);
		ИначеЕсли Тип = Перечисления.ТипыПолучателейЭлектронногоПисьма.Копия Тогда
			СтруктураУчастников.Копия.Добавить(СтруктураПолучателя);
		Иначе Тип = Перечисления.ТипыПолучателейЭлектронногоПисьма.СкрытаяКопия;
			СтруктураУчастников.СкрытаяКопия.Добавить(СтруктураПолучателя);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

// Возвращает важность интернет-почтового сообщения из перечисления ВажностьПисем
Функция ВажностьИнтернетПочтовогоСообщенияИзПеречисления(Важность)
	
	Если Важность = Перечисления.ВариантыВажности.Высокая Тогда
		Возврат ВажностьИнтернетПочтовогоСообщения.Высокая;
	ИначеЕсли Важность = Перечисления.ВариантыВажности.Низкая Тогда
		Возврат ВажностьИнтернетПочтовогоСообщения.Низкая;
	Иначе
		Возврат ВажностьИнтернетПочтовогоСообщения.Обычная;
	КонецЕсли;
	
КонецФункции

// Возвращает тип содержимого и расширение файла по MIME типу
//
// Параметры:
//  Майм-тип - Строка.
// 
// Возвращаемое значение:
//  Структура - структура с полями:
//  * ТипСодержимого - Перечисления.ТипыСодержимогоФайлов,
//  * Расширение - Строка.
//
Функция ТипСодержимогоИРасширениеПоMIMEТипу(MIMEТип) Экспорт
	
	MIMEТипВНижнемРегистре = НРег(MIMEТип);
	Если MIMEТипВНижнемРегистре = "text/plain" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.Текст1251, "txt");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/xml" ИЛИ MIMEТипВНижнемРегистре = "text/xml" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.xml, "xml");
	ИначеЕсли MIMEТипВНижнемРегистре = "text/html" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.html, "html");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/pdf" ИЛИ MIMEТипВНижнемРегистре = "application/x-pdf"
		ИЛИ MIMEТипВНижнемРегистре = "application/acrobat" ИЛИ MIMEТипВНижнемРегистре = "applications/vnd.pdf"
		ИЛИ MIMEТипВНижнемРегистре = "text/pdf" ИЛИ MIMEТипВНижнемРегистре = "text/x-pdf" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.pdf, "pdf");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/rtf" ИЛИ MIMEТипВНижнемРегистре = "application/x-rtf"
		ИЛИ MIMEТипВНижнемРегистре = "text/richtext" ИЛИ MIMEТипВНижнемРегистре = "text/rtf" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.rtf, "rtf");
	ИначеЕсли MIMEТипВНижнемРегистре = "image/tiff" ИЛИ MIMEТипВНижнемРегистре = "image/tif"
		ИЛИ MIMEТипВНижнемРегистре = "image/x-tiff" ИЛИ MIMEТипВНижнемРегистре = "image/x-tif"
		ИЛИ MIMEТипВНижнемРегистре = "application/tiff" ИЛИ MIMEТипВНижнемРегистре = "application/tif"
		ИЛИ MIMEТипВНижнемРегистре = "application/x-tiff" ИЛИ MIMEТипВНижнемРегистре = "application/x-tif" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.tiff, "tiff");
	ИначеЕсли MIMEТипВНижнемРегистре = "image/jpeg" ИЛИ MIMEТипВНижнемРегистре = "image/jpg"
		ИЛИ MIMEТипВНижнемРегистре = "application/jpg" ИЛИ MIMEТипВНижнемРегистре = "application/x-jpg"
		ИЛИ MIMEТипВНижнемРегистре = "image/pjpeg" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.jpeg, "jpeg");
	ИначеЕсли MIMEТипВНижнемРегистре = "image/png" ИЛИ MIMEТипВНижнемРегистре = "image/x-png"
		ИЛИ MIMEТипВНижнемРегистре = "application/png" ИЛИ MIMEТипВНижнемРегистре = "application/x-png"
		ИЛИ MIMEТипВНижнемРегистре = "image/gif" ИЛИ MIMEТипВНижнемРегистре = "image/vnd.wap.wbmp" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.png, "png");
	ИначеЕсли MIMEТипВНижнемРегистре = "image/gif" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.png, "gif");
	ИначеЕсли MIMEТипВНижнемРегистре = "image/bmp" ИЛИ MIMEТипВНижнемРегистре = "image/x-bmp"
		ИЛИ MIMEТипВНижнемРегистре = "image/x-bitmap" ИЛИ MIMEТипВНижнемРегистре = "image/x-xbitmap"
		ИЛИ MIMEТипВНижнемРегистре = "image/x-win-bitmap" ИЛИ MIMEТипВНижнемРегистре = "image/x-windows-bmp"
		ИЛИ MIMEТипВНижнемРегистре = "image/ms-bmp" ИЛИ MIMEТипВНижнемРегистре = "image/x-ms-bmp"
		ИЛИ MIMEТипВНижнемРегистре = "application/bmp" ИЛИ MIMEТипВНижнемРегистре = "application/x-bmp"
		ИЛИ MIMEТипВНижнемРегистре = "application/x-win-bitmap" ИЛИ MIMEТипВНижнемРегистре = "application/preview"
		ИЛИ MIMEТипВНижнемРегистре = "image/vnd.wap.wbmp" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.png, "bmp");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/msword" ИЛИ MIMEТипВНижнемРегистре = "application/doc"
		ИЛИ MIMEТипВНижнемРегистре = "appl/text" ИЛИ MIMEТипВНижнемРегистре = "application/vnd.msword"
		ИЛИ MIMEТипВНижнемРегистре = "application/vnd.ms-word" ИЛИ MIMEТипВНижнемРегистре = "application/winword"
		ИЛИ MIMEТипВНижнемРегистре = "application/word" ИЛИ MIMEТипВНижнемРегистре = "application/x-msw6"
		ИЛИ MIMEТипВНижнемРегистре = "application/x-msword" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.ms_word, "doc");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/vnd.ms-excel" ИЛИ MIMEТипВНижнемРегистре = "application/excel"
		ИЛИ MIMEТипВНижнемРегистре = "application/msexcell" ИЛИ MIMEТипВНижнемРегистре = "application/x-msexcel"
		ИЛИ MIMEТипВНижнемРегистре = "application/x-excel" ИЛИ MIMEТипВНижнемРегистре = "application/x-msexcel"
		ИЛИ MIMEТипВНижнемРегистре = "application/x-dos_ms_excel" ИЛИ MIMEТипВНижнемРегистре = "application/xls" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.ms_excel, "xls");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/vnd.oasis.opendocument.text"
		ИЛИ MIMEТипВНижнемРегистре = "application/x-vnd.oasis.opendocument.text" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.odf_text, "odt");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/vnd.oasis.opendocument.spreadsheet" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.odf_spreadsheet, "ods");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/vnd.openxmlformats-officedocument.wordprocessingml.document" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.oxml_word, "docx");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.oxml_spreadsheet, "xlsx");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/x-pkcs7-signature" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.sgn, "sgn");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/zip" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.Неизвестный, "zip");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/x-rar-compressed" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.Неизвестный, "rar");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/gzip" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.Неизвестный, "gz");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/x-tar" Тогда
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.Неизвестный, "tar");
	ИначеЕсли MIMEТипВНижнемРегистре = "application/octet-stream"
		ИЛИ MIMEТипВНижнемРегистре = "application/x-www-form-urlencoded" Тогда // "unknown"
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.Неизвестный, "bin");
	Иначе
		Возврат Новый Структура("ТипСодержимого, Расширение", Перечисления.ТипыСодержимогоФайлов.ПустаяСсылка(), "");
	КонецЕсли;
	
КонецФункции

// Возвращает результат проверки на наличие присоединенных файлов у письма
//
// Параметры:
//  Письмо - ссылка на письмо.
// 
// Возвращаемое значение:
//  Булево - есть ли вложения у письма в базе.
//
Функция ЕстьЛиПрисоединенныеФайлы(Письмо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Событие.Ссылка КАК СсылкаПисьма,
	|	СобытиеПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Событие КАК Событие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СобытиеПрисоединенныеФайлы КАК СобытиеПрисоединенныеФайлы
	|		ПО Событие.Ссылка = СобытиеПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	Событие.Ссылка В(&Письмо)";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Метод для создания нового объекта ИнтернетПочтовоеСообщение
// в соответствии с переданными параметрами письма.
//
// Параметры:
//  ПараметрыПисьма	 - Структура - см. описание РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение().
// 
// Возвращаемое значение:
//  ИнтернетПочтовоеСообщение - созданный объект.
//
Функция НовоеИнтернетПочтовоеСообщение(Знач ПараметрыПисьма) Экспорт
	
	Возврат РаботаСПочтовымиСообщениямиУНФ.НовоеИнтернетПочтовоеСообщение(ПараметрыПисьма);
	
КонецФункции

// Возвращает массив идентификаторов связанных сообщений.
//
// Параметры:
//  СтрокаИдентификаторов	 - Строка - идентификаторы, разделенные пробелом.
// 
// Возвращаемое значение:
//  Массив - массив идентификаторов связанных сообщений.
//
Функция ИдентификаторыСвязанныхСообщений(СтрокаИдентификаторов) Экспорт
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СтрокаИдентификаторов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из СтрРазделить(СтрокаИдентификаторов, " ") Цикл
		ТекИдентификатор = ЭлектроннаяПочтаУНФКлиентСервер.СократитьУгловыеСкобки(ТекЭлемент);
		Если ЗначениеЗаполнено(ТекИдентификатор) Тогда
			Результат.Добавить(ТекИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив всех адресов электронной почты из контактной информации
// для указанного контрагента или контактного лица.
//
// Параметры:
//  Контакт	 - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица - ссылка на контакт.
// 
// Возвращаемое значение:
//  Массив - массив строк адресов электронной почты указанного контакта.
//
Функция ВсеАдресаЭлектроннойПочтыКонтакта(Контакт) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контакт,
	|	КонтрагентыКонтактнаяИнформация.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контакт
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка = &Контакт
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязиКонтрагентКонтакт.Контрагент,
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Контакт) КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.АдресЭП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат.Найти(НРег(Выборка.АдресЭП)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(НРег(Выборка.АдресЭП));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив адресов электронной почты, полученный из строки.
//
// Параметры:
//  АдресаЭлектроннойПочты	 - Строка - адреса электронной почты в строке.
// 
// Возвращаемое значение:
//  Массив - массив структур с полями:
//    * Адрес - Строка,
//    * ОтображаемоеИмя - Строка.
//
Функция АдресаЭлектроннойПочтыИзСтроки(АдресаЭлектроннойПочты) Экспорт
	
	Результат = Новый Массив;
	
	НачальнаяПозиция = 1;
	ПромежуточнаяПозиция = 0;
	Пока НачальнаяПозиция < СтрДлина(АдресаЭлектроннойПочты) Цикл
		
		АдресИОтображаемоеИмя = АдресЭлектроннойПочтыИзСтроки(АдресаЭлектроннойПочты, НачальнаяПозиция, ПромежуточнаяПозиция);
		Если Не ЗначениеЗаполнено(АдресИОтображаемоеИмя.Адрес) И Не ЗначениеЗаполнено(АдресИОтображаемоеИмя.ОтображаемоеИмя) Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(АдресИОтображаемоеИмя);
		
		НачальнаяПозиция = ПромежуточнаяПозиция + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разбирает адрес электронной почты из строки и возвращает в виде структуры
// с полями Адрес и ОтображаемоеИмя.
//
// Параметры:
//  АдресаЭлектроннойПочты	 - Строка - строка с адресами электронной почты,
//  НачальнаяПозиция		 - Число - начальная позиция в строке, с которой
//  будет производиться разбор адреса электронной почты,
//  ПромежуточнаяПозиция	 - Число - промежуточная позиция в строке, до которой
//  будет производиться разбор адреса электронной почты.
// 
// Возвращаемое значение:
//  Структура - разобранный адрес электронной почты в формате структуры с полями:
//    * Адрес - Строка - адрес электронной почты,
//    * ОтображаемоеИмя - Строка - отображаемое имя.
//
Функция АдресЭлектроннойПочтыИзСтроки(АдресаЭлектроннойПочты, НачальнаяПозиция = 1, ПромежуточнаяПозиция = 0) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Адрес", "");
	Результат.Вставить("ОтображаемоеИмя", "");
	
	ПромежуточнаяПозиция = СтрНайти(АдресаЭлектроннойПочты, ",", НаправлениеПоиска.СНачала, НачальнаяПозиция);
	Если ПромежуточнаяПозиция = 0 Тогда
		ПромежуточнаяПозиция = СтрДлина(АдресаЭлектроннойПочты);
	КонецЕсли;
	
	ПозицияОткрывающейУгловойСкобки = СтрНайти(АдресаЭлектроннойПочты, "<", НаправлениеПоиска.СНачала, НачальнаяПозиция);
	Если ПозицияОткрывающейУгловойСкобки = 0 Или ПозицияОткрывающейУгловойСкобки > ПромежуточнаяПозиция Тогда
		Если ПромежуточнаяПозиция = СтрДлина(АдресаЭлектроннойПочты) Тогда
			Результат.Адрес = СокрЛП(Сред(АдресаЭлектроннойПочты, НачальнаяПозиция));
		Иначе
			Результат.Адрес = СокрЛП(Сред(АдресаЭлектроннойПочты, НачальнаяПозиция, ПромежуточнаяПозиция - НачальнаяПозиция));
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	ПозицияЗакрывающейУгловойСкобки = СтрНайти(АдресаЭлектроннойПочты, ">", НаправлениеПоиска.СНачала, ПозицияОткрывающейУгловойСкобки);
	Если ПозицияЗакрывающейУгловойСкобки = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПромежуточнаяПозиция = СтрНайти(АдресаЭлектроннойПочты, ",", НаправлениеПоиска.СНачала, ПозицияЗакрывающейУгловойСкобки);
	Если ПромежуточнаяПозиция = 0 Тогда
		ПромежуточнаяПозиция = СтрДлина(АдресаЭлектроннойПочты);
	КонецЕсли;
	
	ДлинаАдреса = ПозицияЗакрывающейУгловойСкобки - ПозицияОткрывающейУгловойСкобки;
	Если ДлинаАдреса <= 1 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПозицияКоммерческогоЭт = СтрНайти(АдресаЭлектроннойПочты, "@", НаправлениеПоиска.СНачала, ПозицияОткрывающейУгловойСкобки);
	Если ПозицияКоммерческогоЭт < ПозицияОткрывающейУгловойСкобки
		ИЛИ ПозицияКоммерческогоЭт > ПозицияЗакрывающейУгловойСкобки Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Адрес = Сред(АдресаЭлектроннойПочты, ПозицияОткрывающейУгловойСкобки + 1, ДлинаАдреса - 1);
	Результат.ОтображаемоеИмя = СокрЛП(Сред(АдресаЭлектроннойПочты, НачальнаяПозиция, ПозицияОткрывающейУгловойСкобки - НачальнаяПозиция));
	Результат.ОтображаемоеИмя = СтрЗаменить(Результат.ОтображаемоеИмя, "\""", "&quot;");
	Результат.ОтображаемоеИмя = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Результат.ОтображаемоеИмя);
	Результат.ОтображаемоеИмя = СтрЗаменить(Результат.ОтображаемоеИмя, "&quot;", """");
	Результат.ОтображаемоеИмя = СокрЛП(Результат.ОтображаемоеИмя);
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеПоляЗаголовкаПисьма(Знач ЗаголовокПисьма, Знач Поле) Экспорт
	
	СимволыПереводаСтроки = Новый Массив;
	СимволыПереводаСтроки.Добавить(Символы.ВК);
	СимволыПереводаСтроки.Добавить(Символы.ВТаб);
	СимволыПереводаСтроки.Добавить(Символы.ПС);
	СимволыПереводаСтроки.Добавить(Символы.ПФ);
	СимволыПереводаСтроки.Добавить(Символы.Таб);
	СимволыПереводаСтроки.Добавить(Символ(32));
	
	КоличествоСтрок = СтрЧислоСтрок(ЗаголовокПисьма);
	Для Индекс = 1 По КоличествоСтрок Цикл
		Строка = СтрПолучитьСтроку(ЗаголовокПисьма, Индекс);
		Если СтрНайти(НРег(Строка), НРег(Поле) + ":") <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Результат = Сред(Строка, СтрДлина(Поле) + 3);
		Для ВнутреннийИндекс = Индекс + 1 По КоличествоСтрок Цикл
			Строка = СтрПолучитьСтроку(ЗаголовокПисьма, ВнутреннийИндекс);
			Если СимволыПереводаСтроки.Найти(Лев(Строка, 1)) = Неопределено Тогда
				Прервать;
			КонецЕсли;
			Результат = Результат + " " + Сред(Строка, 2);
		КонецЦикла;
		Возврат Результат;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Заполняет участников в указанном Событии, полученные в Почтовом сообщении.
//
// Параметры:
//  Событие					 - ДокументОбъект.Событие - Событие, в котором необходимо заполнить участников,
//  ПочтовоеСообщение		 - ИнтернетПочтовоеСообщение, Структура - данные, по которым будет заполняться участники,
//  СопоставленныеКонтакты	 - Соответствие - соответствие адресов электронной почты и ссылок на участников события.
//
Процедура ЗаполнитьКонтакты(Событие, Знач ПочтовоеСообщение, Знач СопоставленныеКонтакты) Экспорт
	
	Если СопоставленныеКонтакты = Неопределено Тогда
		СопоставленныеКонтакты = СопоставленныеКонтактыИзПочтовогоСообщения(ПочтовоеСообщение);
	КонецЕсли;
	
	Если Событие.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		
		ЗаполнитьКонтактыОбработатьПолучателя(Событие,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.Отправитель,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.ОтКого);
		
	Иначе
		
		ЗаполнитьКонтактыОбработатьПолучателей(Событие,
		ПочтовоеСообщение,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.Получатели,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.Кому);
		
		ЗаполнитьКонтактыОбработатьПолучателей(Событие,
		ПочтовоеСообщение,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.Копии,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.Копия);
		
		ЗаполнитьКонтактыОбработатьПолучателей(Событие,
		ПочтовоеСообщение,
		СопоставленныеКонтакты,
		ПочтовоеСообщение.СлепыеКопии,
		Перечисления.ТипыПолучателейЭлектронногоПисьма.СкрытаяКопия);
		
	КонецЕсли;
	
	Для Каждого АдресЭП Из ОбщегоНазначенияКлиентСервер.СвернутьМассив(Событие.Участники.ВыгрузитьКолонку("КакСвязаться")) Цикл
		Событие.ОчиститьДублиУчастников(АдресЭП);
	КонецЦикла;
	
КонецПроцедуры

// Устарела. Будет удалена в следующей версии программы.
// Возвращает заголовок для информирования пользователя о ходе выполнения задания загрузки заголовков писем.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись,
//  для которой выполняется задание загрузки заголовков писем,
//  ОтборПоКонтакту	 - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица - для случая,
//  когда выполняется загрузка переписки по указанному контрагенту или контактному лицу.
// 
// Возвращаемое значение:
//  Строка - представление заголовка для информирования пользователя
//  о ходе выполнения задания загрузки заголовков писем.
//
Функция ЗаголовокПрогресса(Знач УчетнаяЗапись, Знач ОтборПоКонтакту) Экспорт
	
	Если ЗначениеЗаполнено(ОтборПоКонтакту) Тогда
		Возврат СтрШаблон(НСтр("ru = 'Загружается переписка с ""%1"" из ""%2""'"), ОтборПоКонтакту, УчетнаяЗапись);
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Получение почты ""%1""'"), УчетнаяЗапись);
	КонецЕсли;
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Метод для создания нового объекта РезультатЗагрузкиЗаголовков.
// 
// Возвращаемое значение:
//  Структура - ключи: 
//    * Загружено - Число,
//    * ЗагруженныеСобытия - Соответствие,
//    * СсылкаНаСобытие - ДокументСсылка.Событие,
//    * ДатаОтправления - Дата.
//
Функция НовыйРезультатЗагрузкиЗаголовков() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Загружено", 0);
	Результат.Вставить("ЗагруженоПисем", 0);
	Результат.Вставить("ЗагруженныеСобытия", Новый Соответствие);
	Результат.Вставить("СсылкаНаСобытие", Документы.Событие.ПустаяСсылка());
	Результат.Вставить("ДатаОтправления", '00010101');
	
	Возврат Результат;
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Добавляет в результат загрузки заголовков сведения о вновь обработанном Событии.
//
// Параметры:
//  РезультатЗагрузкиЗаголовков	 - Структура - ключи:
//    * ЗагруженныеСобытия - Соответствие - хранит ссылки на загруженные события,
//    * Загружено - Число - количество загруженных,
//    * ДатаОтправления - Дата - граничная дата отправления письма, установка зависит от параметра РежимЗагрузки,
//    * СсылкаНаСобытие - ДокументСсылка.Событие - ссылка на последнее загруженное Событие,
//  СсылкаНаСобытие				 - ДокументСсылка.Событие - ссылка на последнее загруженное Событие,
//  ДатаОтправления				 - Дата - дата отправления письма,
//  РежимЗагрузки				 - Строка - ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения()
//                                 или ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения().
//
Процедура ОбработатьРезультатЗагрузкиЗаголовков(РезультатЗагрузкиЗаголовков, СсылкаНаСобытие, ДатаОтправления, РежимЗагрузки) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаСобытие) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузкиЗаголовков.ЗагруженныеСобытия[СсылкаНаСобытие] = Истина;
	
	РезультатЗагрузкиЗаголовков.Загружено = РезультатЗагрузкиЗаголовков.ЗагруженныеСобытия.Количество();
	
	Если РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
		
		Если РезультатЗагрузкиЗаголовков.ДатаОтправления < ДатаОтправления Тогда
			РезультатЗагрузкиЗаголовков.ДатаОтправления = ДатаОтправления;
			РезультатЗагрузкиЗаголовков.СсылкаНаСобытие = СсылкаНаСобытие;
		КонецЕсли;
		
	ИначеЕсли РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения() Тогда
		
		Если РезультатЗагрузкиЗаголовков.ДатаОтправления > ДатаОтправления
			Или Не ЗначениеЗаполнено(РезультатЗагрузкиЗаголовков.ДатаОтправления) Тогда
			РезультатЗагрузкиЗаголовков.ДатаОтправления = ДатаОтправления;
			РезультатЗагрузкиЗаголовков.СсылкаНаСобытие = СсылкаНаСобытие;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяем контакты для документа "Событие"
//
// Параметры:
//  Событие					 - ДокументОбъект.Событие - Событие, в котором необходимо заполнить участников,
//  ПочтовоеСообщение		 - ИнтернетПочтовоеСообщение, Структура - данные, по которым будет заполняться участники,
//  СопоставленныеКонтакты	 - Соответствие - соответствие адресов электронной почты и ссылок на участников события.
//  Получатели	 - ИнтернетПочтовыеАдреса - коллекция почтовых адресов из ИнтернетПочтовоеСообщение.
//  ТипПолучателяЭлектронногоПисьма	 - Перечисление.ТипыПолучателейЭлектронногоПисьма - тип получателя электронного письма.
//
Процедура ЗаполнитьКонтактыОбработатьПолучателей(Событие, Знач ПочтовоеСообщение, Знач СопоставленныеКонтакты,
	Получатели, ТипПолучателяЭлектронногоПисьма, АдресЭПУчетнойЗаписи = "") Экспорт
	
	Если СопоставленныеКонтакты = Неопределено Тогда
		СопоставленныеКонтакты = СопоставленныеКонтактыИзПочтовогоСообщения(ПочтовоеСообщение);
	КонецЕсли;
	
	Для Каждого Получатель Из Получатели Цикл
		ЗаполнитьКонтактыОбработатьПолучателя(Событие, СопоставленныеКонтакты, Получатель,
		ТипПолучателяЭлектронногоПисьма, АдресЭПУчетнойЗаписи);
	КонецЦикла;
	
КонецПроцедуры

// Определяем контакт для документа "Событие"
//
// Параметры:
//  Событие					 - ДокументОбъект.Событие - Событие, в котором необходимо заполнить участников,
//  СопоставленныеКонтакты	 - Соответствие - соответствие адресов электронной почты и ссылок на участников события.
//  Получатель	 - ИнтернетПочтовыйАдрес - почтовый адрес из ИнтернетПочтовыеАдреса.
//  ТипПолучателяЭлектронногоПисьма	 - Перечисление.ТипыПолучателейЭлектронногоПисьма - тип получателя электронного письма.
//
Процедура ЗаполнитьКонтактыОбработатьПолучателя(Событие,
	Знач СопоставленныеКонтакты,
	Получатель,
	ТипПолучателяЭлектронногоПисьма,
	АдресЭПУчетнойЗаписи = "") Экспорт
	
	НормализованныйАдресПолучателя = НормализованныйАдрес(Получатель.Адрес);
	Контакты = СопоставленныеКонтакты[НормализованныйАдресПолучателя];
	Если Событие.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее 
		И НРег(СокрЛП(АдресЭПУчетнойЗаписи)) = НормализованныйАдресПолучателя Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакты) Тогда
		Для Каждого Контакт Из Контакты Цикл
			ДобавитьУчастникаСобытия(Событие, Контакт, НормализованныйАдресПолучателя, ТипПолучателяЭлектронногоПисьма);
			Прервать;
		КонецЦикла;
	Иначе
		ДобавитьУчастникаСобытия(
		Событие,
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Получатель.ОтображаемоеИмя),
		НормализованныйАдресПолучателя,
		ТипПолучателяЭлектронногоПисьма);
		НовыйУчастник = Событие.Участники[Событие.Участники.Количество()-1];
		СопоставленныеКонтакты[НормализованныйАдресПолучателя] = Новый Массив;
		СопоставленныеКонтакты[НормализованныйАдресПолучателя].Добавить(НовыйУчастник.Контакт);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьУдалениеСобытий(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УдалениеСобытий.Событие КАК Событие,
	|	ПросмотрСобытий.Просмотрено КАК Просмотрено
	|ИЗ
	|	РегистрСведений.ИдентификаторыСобытий КАК ИдентификаторыСобытий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалениеСобытий КАК УдалениеСобытий
	|		ПО ИдентификаторыСобытий.Событие = УдалениеСобытий.Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПросмотрСобытий КАК ПросмотрСобытий
	|		ПО ИдентификаторыСобытий.Событие = ПросмотрСобытий.Событие
	|ГДЕ
	|	ИдентификаторыСобытий.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.УдалениеСобытий.УдалитьЗапись(Выборка.Событие);
		Если Выборка.Просмотрено <> Null Тогда
			РегистрыСведений.ПросмотрСобытий.УдалитьЗапись(Выборка.Событие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПросмотрСобытий(УчетнаяЗапись, ИдентификаторыНепрочитанныхПисем) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПросмотрСобытий.Событие КАК Событие,
	|	ПросмотрСобытий.Просмотрено КАК Просмотрено
	|ИЗ
	|	РегистрСведений.ИдентификаторыСобытий КАК ИдентификаторыСобытий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПросмотрСобытий КАК ПросмотрСобытий
	|		ПО ИдентификаторыСобытий.Событие = ПросмотрСобытий.Событие
	|ГДЕ
	|	ИдентификаторыСобытий.УчетнаяЗапись = &УчетнаяЗапись
	|	И ПросмотрСобытий.Просмотрено");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ПросмотрСобытий.УдалитьЗапись(Выборка.Событие);
	КонецЦикла;
	
	НепрочитанныеСобытия = РегистрыСведений.ИдентификаторыСобытий.СобытияПоИдентификаторам(УчетнаяЗапись, ИдентификаторыНепрочитанныхПисем);
	Для каждого Событие Из НепрочитанныеСобытия Цикл
		РегистрыСведений.ПросмотрСобытий.ДобавитьОжиданиеПросмотра(Событие.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьУчастникаСобытия(Событие, Контакт, КакСвязаться, ТипПолучателяЭлектронногоПисьма = Неопределено)
	
	Если Событие.КонтактУжеЯвляетсяУчастником(Контакт, ТипПолучателяЭлектронногоПисьма) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйУчастник = Событие.Участники.Добавить();
	Если ЗначениеЗаполнено(ТипПолучателяЭлектронногоПисьма) Тогда
		НовыйУчастник.ТипПолучателяЭлектронногоПисьма = ТипПолучателяЭлектронногоПисьма;
	Иначе
		НовыйУчастник.ТипПолучателяЭлектронногоПисьма = ПредопределенноеЗначение("Перечисление.ТипыПолучателейЭлектронногоПисьма.Кому");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контакт) ИЛИ ТипЗнч(Контакт) = Тип("Строка") Тогда
		Контакт = Справочники.АдресатыПисем.НовыйАдресатПисьмаПоДаннымКонтакта(Контакт, КакСвязаться);
	КонецЕсли;
	
	НовыйУчастник.Контакт = Контакт;
	НовыйУчастник.КакСвязаться = КакСвязаться;
	
КонецПроцедуры

// Устарела. Будет удалена в следующей версии программы.
// Возвращает массив контрагентов и контактных лиц связанных с указанным адресом электронной почты.
//
// Параметры:
//  Контакт	 - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица,
//  АдресЭП	 - Строка - адрес электронной почты.
// 
// Возвращаемое значение:
//  Массив - контрагенты и контактные лица, в контактной информации которых встречается
//  указанный адрес электронной почты.
//
Функция СвязанныеКонтрагентыИКонтактныеЛица(Контакт, АдресЭП) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	
	"ВЫБРАТЬ
	|	&Контакт КАК Контакт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Контакт) КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО (КонтактныеЛицаКонтактнаяИнформация.Ссылка = СвязиКонтрагентКонтакт.Контакт)
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязиКонтрагентКонтакт.Контрагент
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контакт = &Контакт) КАК СвязиКонтрагентКонтакт
	|		ПО КонтактныеЛица.Ссылка = СвязиКонтрагентКонтакт.Контакт
	|ГДЕ
	|	СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("АдресЭП", АдресЭП);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
	Результат,
	Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контакт"),
	Истина);
	
	Возврат Результат;
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы.
// Инициировать получение доступных учетных записей электронной почты
// Параметры:
//   ДляОтправки - Булево - Если установлено Истина, то будут выбирать только записи, с которых можно отправлять почту
//   ДляПолучения   - Булево - Если установлено Истина, то будут выбирать только записи, по которым можно получать почту
//   ВключатьСистемнуюУчетнуюЗапись - Булево - включать системную учетную запись, если доступна
//
// Возвращаемое значение:
//   ДоступныеУчетныеЗаписи - ТаблицаЗначений - С колонками:
//    Ссылка       - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Ссылка на учетную запись
//    Наименование - Строка - Наименование учетной записи
//    Адрес        - Строка - Адрес электронной почты
//
Функция ДоступнаяУчетнаяЗапись(знач ДляОтправки = Неопределено, знач ДляПолучения  = Неопределено, 
	знач ВключатьСистемнуюУчетнуюЗапись = Истина) Экспорт

	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(ДляОтправки, ДляПолучения, ВключатьСистемнуюУчетнуюЗапись);
	
	Возврат ?(ДоступныеУчетныеЗаписи.Количество() > 0, ДоступныеУчетныеЗаписи[0].Ссылка, Неопределено);
	
КонецФункции

// Возвращает соответствие адресов электронной почты для всех контактов,
// встречающихся в переданном сообщении.
//
// Параметры:
//  ПочтовоеСообщение - ИнтернетПочтовоеСообщение - почтовое сообщение,
//                      контакты из которого нужно сопоставить.
// 
// Возвращаемое значение:
//  Соответствие - Соответствие адресов электронной почты и ссылок
//  на контакты (контрагенты или контактные лица).
//
Функция СопоставленныеКонтактыИзПочтовогоСообщения(Знач ПочтовоеСообщение)
	
	АдресаЭП = Новый Массив;
	
	НормализованныйАдресОтправителя = НормализованныйАдрес(ПочтовоеСообщение.Отправитель.Адрес);
	
	Если ЗначениеЗаполнено(НормализованныйАдресОтправителя)
		И АдресаЭП.Найти(НормализованныйАдресОтправителя) = Неопределено Тогда
		АдресаЭП.Добавить(НормализованныйАдресОтправителя);
	КонецЕсли;

	Для Каждого ТекПолучатель Из ПочтовоеСообщение.Получатели Цикл
		НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
		Если Не ЗначениеЗаполнено(НормализованныйАдресПолучателя) Тогда
			Продолжить;
		КонецЕсли;
		Если АдресаЭП.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
			АдресаЭП.Добавить(НормализованныйАдресПолучателя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекПолучатель Из ПочтовоеСообщение.Копии Цикл
		НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
		Если Не ЗначениеЗаполнено(НормализованныйАдресПолучателя) Тогда
			Продолжить;
		КонецЕсли;
		Если АдресаЭП.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
			АдресаЭП.Добавить(НормализованныйАдресПолучателя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекПолучатель Из ПочтовоеСообщение.СлепыеКопии Цикл
		НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
		Если Не ЗначениеЗаполнено(НормализованныйАдресПолучателя) Тогда
			Продолжить;
		КонецЕсли;
		Если АдресаЭП.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
			АдресаЭП.Добавить(НормализованныйАдресПолучателя);
		КонецЕсли;
	КонецЦикла;

	Возврат СопоставленныеАдресатыПоАдресамЭП(АдресаЭП);
	
КонецФункции

#КонецОбласти
