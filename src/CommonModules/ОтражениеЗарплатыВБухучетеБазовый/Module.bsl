////////////////////////////////////////////////////////////////////////////////
// Отражение зарплаты в бухучете базовая реализация.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует соответствие видов операций по зарплате и статей расходов.
//
//	Параметры - нет
//
// Возвращаемое значение:
// 		Соответствие - Ключ - тип ПеречислениеСсылка.ВидыОперацийПоЗарплате
//					Значение - тип СправочникСсылка.СтатьиРасходовЗарплата.
//
Функция СоответствиеВидОперацииСтатьяРасходов() Экспорт

	СоответствиеСпособовРасчетов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	
	ВидыОперацийМенеджер 	= Перечисления.ВидыОперацийПоЗарплате;
	СпособРасчетовМенеджер 	= Перечисления.СпособыРасчетовСФизическимиЛицами;
	
	СоответствиеОпераций = Новый Соответствие;
	Для каждого ЗначениеПеречисления Из ВидыОперацийМенеджер Цикл
	
		Если ЗначениеПеречисления = ВидыОперацийМенеджер.АлиментыПрочиеИсполнительныеЛистыКонтрагенты Тогда
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.РасчетыСКонтрагентами]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.ВознаграждениеПлатежногоАгентаКонтрагенты Тогда
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.РасчетыСКонтрагентами]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.ПрочиеРасчетыСПерсоналом Тогда
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.ПрочиеРасчетыСПерсоналом]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.Дивиденды Тогда
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.Дивиденды]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.ДивидендыСотрудников Тогда
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.ДивидендыСотрудникам]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.НДФЛДоходыКонтрагентов Тогда
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.РасчетыСКонтрагентами]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.НДФЛРасчетыСБывшимиСотрудниками Тогда
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.РасчетыСКонтрагентами]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.НДФЛПрочиеРасчетыСПерсоналом Тогда
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.ПрочиеРасчетыСПерсоналом]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.НФДЛДивиденды Тогда
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.Дивиденды]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.НФДЛДивидендыСотрудникам Тогда	
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.ДивидендыСотрудникам]);
		ИначеЕсли ЗначениеПеречисления = ВидыОперацийМенеджер.НачисленоПроцентовПоЗайму Тогда	
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, Справочники.СтатьиРасходовЗарплата.ПустаяСсылка());
		Иначе
			СоответствиеОпераций.Вставить(ЗначениеПеречисления, СоответствиеСпособовРасчетов[СпособРасчетовМенеджер.ОплатаТруда]);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СоответствиеОпераций;

КонецФункции

// Возвращает структуру с настройкой бухучета сотрудника на указанную дату.
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудник
//  ДатаАктуальности - Дата - дата на которую получаем способ отражения.
//
// Возвращаемое значение:
// 	Структура - содержит свойства
//		* СпособОтраженияЗарплатыВБухучете - Справочник.СпособыОтраженияЗарплатыВБухУчете
//		* ОтношениеКЕНВД - Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.
//		* Период - Дата - дата на которую установлено значение настроек.
//
Функция НастройкаБухучетаЗарплатыСотрудника(Сотрудник, ДатаАктуальности) Экспорт
	
	БухучетСотрудника = Новый Структура("СпособОтраженияЗарплатыВБухучете, ОтношениеКЕНВД, Период");
	БухучетСотрудника.СпособОтраженияЗарплатыВБухучете = Справочники.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка();
	БухучетСотрудника.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка();
	БухучетСотрудника.Период = Дата(1,1,1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ДатаАктуальности);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетЗарплатыСотрудников.Период КАК Период,
	|	БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетЗарплатыСотрудников.ОтношениеКЕНВД КАК ОтношениеКЕНВД
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыСотрудников.СрезПоследних(&ДатаСреза, Сотрудник = &Сотрудник) КАК БухучетЗарплатыСотрудников";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(БухучетСотрудника, Выборка);
	КонецЕсли;
	
	Возврат БухучетСотрудника;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет в переданной коллекции строк поля бухучета. 
//
// Параметры:
// 	КоллекцияСтрокВзносов - Массив - содержит ссылки на строки таблицы значений
// 					со структурой см ОтражениеЗарплатыВБухучете.НоваяТаблицыОтражениеВУчетеСтраховыеВзносы
// Организация - СправочникСсылка.Организации
// Период - Дата.
//
Процедура РаспределитьВзносыПоБазеПоУмолчанию(КоллекцияСтрокВзносов, Организация, Период) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для каждого СтрокаТЗ Из КоллекцияСтрокВзносов Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Организация = Организация;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаНачала) Тогда
			НоваяСтрока.ДатаНачала = Период;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.ДатаНачала КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.Выполнить();
	
	СоздатьВТНастройкиБухучета(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиБезБухучета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СведенияОБухучете.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете
	|ИЗ
	|	ВТСотрудники КАК СтрокиБезБухучета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК СведенияОБухучете
	|		ПО СтрокиБезБухучета.ИдентификаторСтроки = СведенияОБухучете.ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	БухучетСтрок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		БухучетСтрок.Вставить(Выборка.ИдентификаторСтроки, Выборка.СпособОтраженияЗарплатыВБухучете);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из КоллекцияСтрокВзносов Цикл
		СтрокаТЗ.СпособОтраженияЗарплатыВБухучете = БухучетСтрок[СтрокаТЗ.ИдентификаторСтроки];
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоДокументу(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения, СтрокаСписокТаблиц) Экспорт
	
	ОтражениеВРегламентированномУчетеНастройкиОрганизаций = ОтражениеЗарплатыВБухучете.ОтражениеВРегламентированномУчетеНастройкиОрганизаций();
	
	Если Не ОтражениеВРегламентированномУчетеНастройкиОрганизаций.ФормироватьПроводкиВКонцеПериодаПоОрганизациям[Организация] Тогда
		
		// Получим структуру с результатами отражения зарплаты
		// структура РезультатОтраженияЗарплатыДляБухучета
		// ключ - имя таблицы, значение - таблица значений с полученными данными
		// в структуре присутствуют все таблицы, а заполнены только те, которые входят в СтрокаСписокТаблиц.
		ДанныеДляОтражения = ДанныеДляОтраженияЗарплатыВБухучетеПоДаннымДляПроведения(ПериодРегистрации, Организация, СтрокаСписокТаблиц, ДанныеДляПроведения);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
			
			ЕстьДвижениеВыплатаОтпусковЗаСчетРезерва = Ложь;
			Если ТипЗнч(Движения) = Тип("Структура") Тогда
				ЕстьДвижениеВыплатаОтпусковЗаСчетРезерва = Движения.Свойство("ОценочныеОбязательстваПоСотрудникам");
			Иначе
				ЕстьДвижениеВыплатаОтпусковЗаСчетРезерва = Движения.Найти("ОценочныеОбязательстваПоСотрудникам") <> Неопределено;
			КонецЕсли;

			Если ЕстьДвижениеВыплатаОтпусковЗаСчетРезерва Тогда
				
				ДокументСсылка = Движения.ОценочныеОбязательстваПоСотрудникам.Отбор.Регистратор.Значение;  
				
				Модуль = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
				
				Если Не Модуль.ЕстьНастройкиРезерваОтпусков(Организация, ПериодРегистрации) Тогда
					МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
					НастройкиРезервовОтпусков = МодульРезервОтпусков.НастройкиРезервовОтпусков(Организация, ПериодРегистрации);
					
					Если НастройкиРезервовОтпусков.ФормироватьРезервБУ Тогда
						
						НачисленныеОтпуска = ОтражениеЗарплатыВБухучете.НоваяТаблицаНачисленоЗаСчетРезерва();
						
						ПараметрыДляСписанияРасходов = МодульРезервОтпусков.ПараметрыДляСписанияРасходовПоОплатеОтпуска();
						ПараметрыДляСписанияРасходов.Организация 				= Организация;
						ПараметрыДляСписанияРасходов.ПериодРегистрации 			= ПериодРегистрации;
						ПараметрыДляСписанияРасходов.НачисленнаяЗарплатаИВзносы = ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы;
						ПараметрыДляСписанияРасходов.НачисленныеОтпуска 		= НачисленныеОтпуска;
						ПараметрыДляСписанияРасходов.ДокументСсылка 			= ДокументСсылка;
						МодульРезервОтпусков.СписатьРасходыПоОтпускамЗаСчетОценочныхОбязательств(ПараметрыДляСписанияРасходов);
						
						МодульРезервОтпусков.СформироватьДвиженияВыплатаОтпусковЗаСчетРезерва(Движения, Отказ, Организация, ПериодРегистрации, НачисленныеОтпуска);
						ДвиженияВыплатаОтпусковЗаСчетРезерва = Движения.ОценочныеОбязательстваПоСотрудникам.Выгрузить();
						МодульРезервОтпусков.СформироватьДвиженияСписаниеРезерваОтпусков (Движения, Отказ, Организация, ПериодРегистрации, ДвиженияВыплатаОтпусковЗаСчетРезерва);
						
					КонецЕсли;
				КонецЕсли;
				
				Если Модуль.ФормируютсяРезервыВОрганизации(Организация, ПериодРегистрации)
					Или Модуль.ФормируютсяРезервыВОрганизации(Организация, ДобавитьМесяц(ПериодРегистрации, -12)) Тогда
					
					ТаблицаВыплатаЗаСчетРезерва = ОтражениеЗарплатыВБухучете.НоваяТаблицаНачисленоЗаСчетРезерва();
					
					ПараметрыДляСписанияРасходов = Модуль.ПараметрыДляСписанияРасходов();
					ПараметрыДляСписанияРасходов.Организация 				= Организация;
					ПараметрыДляСписанияРасходов.ПериодРегистрации 			= ПериодРегистрации;
					ПараметрыДляСписанияРасходов.НачисленнаяЗарплатаИВзносы = ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы;
					ПараметрыДляСписанияРасходов.ВыплатаЗаСчетРезерва 		= ТаблицаВыплатаЗаСчетРезерва;
					ПараметрыДляСписанияРасходов.ДокументСсылка 			= ДокументСсылка;
					Модуль.СписатьРасходыЗаСчетОценочныхОбязательств(ПараметрыДляСписанияРасходов);
					
					Модуль.СформироватьДвиженияВыплатаЗаСчетРезерва(Движения, Отказ, Организация, ПериодРегистрации, ТаблицаВыплатаЗаСчетРезерва);
					ДвиженияВыплатаЗаСчетРезерва = Движения.ОценочныеОбязательстваПоСотрудникам.Выгрузить();
					Модуль.СформироватьДвиженияСписаниеРезерва(Движения, Отказ, Организация, ПериодРегистрации, ДвиженияВыплатаЗаСчетРезерва);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтражениеЗарплатыВБухучете.СвернутьДанныеДляОтраженияЗарплатыВБухучете(ДанныеДляОтражения, "Сотрудник,Начисление,ДатаНачала");
		
		// формирование проводок
		ОтражениеЗарплатыВБухучетеПереопределяемый.СформироватьДвижения(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляОтражения);
		
	КонецЕсли;

КонецПроцедуры

// Создает временную таблицу ВТНачисленияСДаннымиЕНВД 
//		Поля таблицы ВТНачисленияСДаннымиЕНВД
//			Сотрудник
//			Начисление
//			ДатаНачала
//			ДоляЕНВД, число от 0 до 1.
//
// Параметры:
// 		Организация
//		ПериодРегистрации
//		МенеджерВременныхТаблиц, содержит временные таблицы
//			ВТНачисления - начисления, которые дополняются долей ЕНВД.
//
Процедура ДополнитьСведенияОДоходахДаннымиОЕНВДПриРасчете(Организация, ПериодРегистрации, МенеджерВременныхТаблиц) Экспорт

	УдалитьВТ = Новый Массив;
	
	ПлательщикЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, ПериодРегистрации);
	
	Если Не ПлательщикЕНВД Тогда
		// не используется ЕНВД, создадим таблицу с нулевой долей ЕНВД
		ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДНулеваяДоляЕНВД(МенеджерВременныхТаблиц);
		Возврат;
	КонецЕсли;
		
	ОтражениеЗарплатыВУчете.СоздатьВТНачислениеУдержаниеВидОперации(МенеджерВременныхТаблиц);
	УдалитьВТ.Добавить("ВТНачислениеУдержаниеВидОперации");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	СписокНачислений.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокНачислений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СписокНачислений.Начисление КАК Начисление,
	|	ЕСТЬNULL(НачисленияВидОперации.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)) КАК ВидОперации,
	|	СписокНачислений.ДатаНачала КАК ДатаНачала,
	|	СписокНачислений.ДатаОкончания КАК ДатаОкончания,
	|	СписокНачислений.Сумма КАК Сумма,
	|	ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка) КАК ДокументОснование,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТНачисленияДляРаспределения
	|ИЗ
	|	ВТНачисления КАК СписокНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО СписокНачислений.Сотрудник = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУдержаниеВидОперации КАК НачисленияВидОперации
	|		ПО СписокНачислений.Начисление = НачисленияВидОперации.НачислениеУдержание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.ПодразделениеОрганизации КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ВидОперации КАК ВидОперации,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТНачисленияДляРаспределения КАК Начисления";
	РезультатЗапроса = Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТНачисленияДляРаспределения");
	
	ПроцентЕНВД= ОтражениеЗарплатыВБухучете.ПроцентЕНВД(Организация, ПериодРегистрации);
	Если ПроцентЕНВД = Неопределено Тогда
		ОтражениеЗарплатыВБухучете.ПроверитьНеобходимостьРегистрацииПроцентаЕНВДНаТекущийМесяцВызватьИсключение(Организация, ПериодРегистрации, МенеджерВременныхТаблиц, "ВТНачисленияДляРаспределения");
	КонецЕсли;

	
	ТаблицаНачислений = ОтражениеЗарплатыВУчете.НоваяТаблицаНачислений();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(), Выборка);
	КонецЦикла;
	БухучетНачислений = БухучетНачислений(Организация, ПериодРегистрации, ТаблицаНачислений);
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, БухучетНачислений, "ВТБухучетНачислений");
	УдалитьВТ.Добавить("ВТБухучетНачислений");
	
	ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДПоТаблицеБухучетНачислений(Запрос.МенеджерВременныхТаблиц, "ВТБухучетНачислений", "ВТНачисленияДляРаспределения");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);

КонецПроцедуры

Процедура ЗаполнитьРегистрациюВНалоговомОрганеВКоллекцииСтрок(Организация, Период, КоллекцияНачисленныйНДФЛ) Экспорт
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация,"ЮридическоеФизическоеЛицо");
	ОрганизацияЮрлицо = ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	
	Если ТипЗнч(КоллекцияНачисленныйНДФЛ) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаНДФЛ = КоллекцияНачисленныйНДФЛ.Выгрузить();
	Иначе
		// передана таблица значений
		
		ТаблицаНДФЛ = КоллекцияНачисленныйНДФЛ.Скопировать();
		
		Если КоллекцияНачисленныйНДФЛ.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
			КоллекцияНачисленныйНДФЛ.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПоляСвертки = "КодНалоговогоОргана";
	Если ОрганизацияЮрлицо Тогда
		ПоляСвертки = ПоляСвертки + ",КПП";
	КонецЕсли;
	ПоляДополнительногоОтбора = ПоляСвертки;
	Если Период < УчетНДФЛ.ДатаПереходаНаКодыОКТМО() Тогда
		ПоляСвертки = ПоляСвертки + ",КодПоОКАТО";
	Иначе
		ПоляСвертки = ПоляСвертки + ",КодПоОКТМО";
	КонецЕсли;
	
	ТаблицаНДФЛ.Свернуть(ПоляСвертки);
	ТаблицаНДФЛ.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВНалоговомОргане,
	|	РегистрацииВНалоговомОргане.КодПоОКАТО КАК КодПоОКАТО,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
	|	РегистрацииВНалоговомОргане.КПП КАК КПП,
	|	РегистрацииВНалоговомОргане.Код КАК КодНалоговогоОргана
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &Организация";
	ДействующиеРегистрации = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура(ПоляСвертки);
	ОтборДополнительный = Новый Структура(ПоляДополнительногоОтбора);
	
	Для каждого СтрокаТЗ Из ТаблицаНДФЛ Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		Регистрации = ДействующиеРегистрации.НайтиСтроки(Отбор);
		Если Регистрации.Количество() > 0 Тогда
			СтрокаТЗ.РегистрацияВНалоговомОргане = Регистрации[0].РегистрацияВНалоговомОргане;
		Иначе
			ЗаполнитьЗначенияСвойств(ОтборДополнительный, СтрокаТЗ);
			Регистрации = ДействующиеРегистрации.НайтиСтроки(ОтборДополнительный);
			Если Регистрации.Количество() > 0 Тогда
				СтрокаТЗ.РегистрацияВНалоговомОргане = Регистрации[0].РегистрацияВНалоговомОргане;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКоллекции Из КоллекцияНачисленныйНДФЛ Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаКоллекции);
		Регистрации = ТаблицаНДФЛ.НайтиСтроки(Отбор);
		Если Регистрации.Количество() > 0 Тогда
			СтрокаКоллекции.РегистрацияВНалоговомОргане = Регистрации[0].РегистрацияВНалоговомОргане;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает начисленные суммы по сотрудникам.
// 	Параметры:
// 		Организация - СправочникСсылка.Организации
// 		Сотрудники - Массив
// 		НачалоПериода - Дата
// 		КонецПериода - Дата
//
// Возвращаемое значение:
// 		ТаблицаЗначений, содержит колонки
// 			* Сотрудник - СправочникСсылка.Сотрудники
// 			* Сумма - Число
//
Функция НачисленияПоОплатеТрудаДляРасчетаОценочныхОбязательств(Организация, Сотрудники, НачалоПериода, КонецПериода) Экспорт
	
	НачисленияБазы = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(БазовыеНачисленияОплатаТруда());
	
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Периоды = Новый Массив;
	ТекущийПериод = НачалоМесяца(НачалоПериода);
	Пока ТекущийПериод <= КонецПериода Цикл
		Периоды.Добавить(ТекущийПериод);
		ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
	КонецЦикла;
	
	Для каждого Период Из Периоды Цикл
		ТаблицаНачислений = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНачислений(Организация, Период, Сотрудники);
		Для каждого СтрокаТЗ Из ТаблицаНачислений Цикл
			Если НачисленияБазы[СтрокаТЗ.Начисление] <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(Начисления);
	
	Возврат Начисления;
	
КонецФункции

Функция СреднийЗаработокСотрудниковДляОценочныхОбязательств(СотрудникиДляОбработки, Период) Экспорт

	СреднийЗаработок = Новый ТаблицаЗначений;
	СреднийЗаработок.Колонки.Добавить("Сотрудник", 		Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СреднийЗаработок.Колонки.Добавить("СреднийЗаработок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ДатаРасчетаСреднего = НачалоМесяца(ДобавитьМесяц(Период, 1));
	
	Для каждого Сотрудник Из СотрудникиДляОбработки Цикл
	
		НоваяСтрока = СреднийЗаработок.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.СреднийЗаработок = СреднийЗаработокОбщийСотрудника(Сотрудник, ДатаРасчетаСреднего);
	
	КонецЦикла;
	
	Возврат СреднийЗаработок;
	
КонецФункции

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтражениеЗарплатыВБухучете", "ПериодРегистрации", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыСотрудников", "Период", "БухгалтерскийУчетЗарплаты", "Сотрудник.ГоловнаяОрганизация");
	
КонецПроцедуры

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ОтражениеЗарплатыВБухучете);
	
КонецПроцедуры

Процедура ПриЗаписиКонстантыИспользоватьНачислениеЗарплаты(Объект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Если Константы.ДанныеДляБухучетПоставляютсяВнешнейПрограммой.Получить() = Объект.Значение Тогда
		Константы.ДанныеДляБухучетПоставляютсяВнешнейПрограммой.Установить(Не Объект.Значение);
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.6";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучетеБазовый.УстановитьЗначениеДанныеДляБухучетПоставляютсяВнешнейПрограммой";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.6";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ЗарплатаКадры.СтатьиРасходовЗарплатаНачальноеЗаполнениеПоСпособамРасчетов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0a2a867f-0d6c-4fd3-8cb8-ea9fa4c0ee69");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение справочника Статьи расходов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.7";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучете.ЗаполнитьСтатьюРасходовВДокументеОтражениеЗарплатыВБухучете";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5ebfc016-52c3-4a57-8659-6ab38f58333c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в документе ""Отражение зарплаты в бухучете.""'");

КонецПроцедуры

// Сведения об учете затрат

Функция ДобавитьПолеСведенийОбУчетеЗатрат(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУчетеЗатрат(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУчетеЗатрат", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбУчетеЗатрат(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУчетеЗатрат(КритерииПоиска, УсловиеПоиска) Экспорт
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУчетеЗатрат(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		Если ИмяПоля = ВРег("ДатаНачала")
			Или ИмяПоля = ВРег("ДатаОкончания") Тогда
			
			Если ИмяПоля = ВРег("ДатаНачала") Тогда
				УсловиеПоиска.ВидСравнения = ">=";
			Иначе
				УсловиеПоиска.ВидСравнения = "<=";
			КонецЕсли;
			
		ИначеЕсли ИмяПоля <> ВРег("Период") Тогда
		
			Если ИмяПоля = ВРег("УчетЗатратПериодРегистрации") Тогда
				УсловиеПоиска.ЛевоеЗначение = "Период";
				
			ИначеЕсли ИмяПоля = ВРег("УчетЗатратДокументОснование") Тогда
				УсловиеПоиска.ЛевоеЗначение = "ДокументОснование";
				
			КонецЕсли;
			
			КритерийДобавлен = Истина;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.БухучетЗарплатыСотрудников", УсловиеПоиска);
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУчетеЗатрат(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОбУчетеЗатрат") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОбУчетеЗатрат(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбУчетеЗатрат КАК БухучетЗарплатыСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = БухучетЗарплатыСотрудников.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = БухучетЗарплатыСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОбУчетеЗатрат");
	
КонецПроцедуры

Функция ЗапросВТСведенияОбУчетеЗатрат(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОбУчетеЗатрат = "ВТСведенияОбУчетеЗатрат")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("БухучетЗарплатыСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД.Вставить("СпособОтраженияЗарплатыВБухучете", "СпособОтраженияЗарплатыВБухучетеРегистра");
	ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД.Вставить("ОтношениеКЕНВД", "ОтношениеКЕНВДРегистра");
	ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД.Вставить("СтатьяФинансирования", "СтатьяФинансированияРегистра");
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"БухучетЗарплатыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	МАКСИМУМ(БухучетЗарплатыСотрудников.ПериодЗаписи) КАК ПериодЗаписи
		|ПОМЕСТИТЬ ВТПоследниеПериодыСведенияОбУчетеЗатрат
		|ИЗ
		|	ВТБухучетЗарплатыСотрудниковСрезПоследних КАК БухучетЗарплатыСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетЗарплатыСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	БухучетЗарплатыСотрудников.ПериодЗаписи,
		|	МАКСИМУМ(БухучетЗарплатыСотрудников.ДокументОснование) КАК ДокументОснование
		|ПОМЕСТИТЬ ВТПоследниеДокументыСведенияОбУчетеЗатрат
		|ИЗ
		|	ВТПоследниеПериодыСведенияОбУчетеЗатрат КАК ПоследниеПериодыСведенияОбУчетеЗатрат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетЗарплатыСотрудниковСрезПоследних КАК БухучетЗарплатыСотрудников
		|		ПО ПоследниеПериодыСведенияОбУчетеЗатрат.Сотрудник = БухучетЗарплатыСотрудников.Сотрудник
		|			И ПоследниеПериодыСведенияОбУчетеЗатрат.ПериодЗаписи = БухучетЗарплатыСотрудников.ПериодЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	БухучетЗарплатыСотрудников.ПериодЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетЗарплатыСотрудников.Период,
		|	БухучетЗарплатыСотрудников.ПериодЗаписи,
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	БухучетЗарплатыСотрудников.ДокументОснование,
		|	БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплатыСотрудников.ОтношениеКЕНВД,
		|	БухучетЗарплатыСотрудников.СтатьяФинансирования
		|ПОМЕСТИТЬ ВТСведенияОбУчетеЗатрат
		|ИЗ
		|	ВТПоследниеДокументыСведенияОбУчетеЗатрат КАК ПоследниеПериодыСведенияОбУчетеЗатрат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетЗарплатыСотрудниковСрезПоследних КАК БухучетЗарплатыСотрудников
		|		ПО ПоследниеПериодыСведенияОбУчетеЗатрат.Сотрудник = БухучетЗарплатыСотрудников.Сотрудник
		|			И ПоследниеПериодыСведенияОбУчетеЗатрат.ПериодЗаписи = БухучетЗарплатыСотрудников.ПериодЗаписи
		|			И ПоследниеПериодыСведенияОбУчетеЗатрат.ДокументОснование = БухучетЗарплатыСотрудников.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБухучетЗарплатыСотрудниковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПоследниеПериодыСведенияОбУчетеЗатрат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПоследниеДокументыСведенияОбУчетеЗатрат";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСведенияОбУчетеЗатрат", ИмяВТСведенияОбУчетеЗатрат);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(
		ЗапросВТИмяРегистраСрез.Текст, ТекстЗапроса);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция НеобходимыСведенияОбУчетеЗатрат(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УчетЗатратПериодРегистрации")
		Или ИмяПоля = ВРег("СпособОтраженияЗарплатыВБухучете")
		Или ИмяПоля = ВРег("ОтношениеКЕНВД")
		Или ИмяПоля = ВРег("СтатьяФинансирования")
		Или ИмяПоля = ВРег("УчетЗатратДокументОснование");
		
КонецФункции

Функция ПутьКДаннымСведенийОбУчетеЗатрат(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("УчетЗатратПериодРегистрации") Тогда
		ПутьКДанным = "	БухучетЗарплатыСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("УчетЗатратДокументОснование") Тогда
		ПутьКДанным = "	БухучетЗарплатыСотрудников.ДокументОснование";
	Иначе
		ПутьКДанным = "	БухучетЗарплатыСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДанныеДляОтраженияЗарплатыВБухучете

Функция ДанныеДляОтраженияЗарплатыВБухучете(Организация, ПериодРегистрации) Экспорт

	ДанныеДляОтражения = ОтражениеЗарплатыВБухучете.НоваяСтруктураДанныеДляОтраженияЗарплатыВБухучете();
	
	ТаблицаНачислений = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНачислений(Организация, ПериодРегистрации);
	БухучетНачислений = БухучетНачислений(Организация, ПериодРегистрации, ТаблицаНачислений);
	
	ТаблицаВзносов = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеВзносов(Организация, ПериодРегистрации);
	БухучетВзносов = ОтражениеЗарплатыВБухучете.БухучетСтраховыхВзносов(Организация, ПериодРегистрации, ТаблицаВзносов, БухучетНачислений);
	
	ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы 	= БухучетНачисленийИВзносов(БухучетНачислений, БухучетВзносов);
	БухучетНачислений 	= Неопределено;
	БухучетВзносов 		= Неопределено;
	
	ТаблицаНДФЛ = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНДФЛ(Организация, ПериодРегистрации);
	ДанныеДляОтражения.НачисленныйНДФЛ = ОтражениеЗарплатыВБухучете.БухучетНДФЛ(ТаблицаНДФЛ);
	
	ТаблицаУдержаний = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеУдержаний(Организация, ПериодРегистрации);
	БухучетУдержаний = БухучетУдержаний(ТаблицаУдержаний);
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(БухучетУдержаний);
	ДанныеДляОтражения.УдержаннаяЗарплата = БухучетУдержаний;
	
	Возврат ДанныеДляОтражения;

КонецФункции

// Функция формирует структуру с данными отражения зарплаты для бухучета.
//
// Параметры:
//  Организация, тип СправочникСсылка.Организации.
//  ПериодРегистрации - тип дата, первое число месяца.
//  СтрокаСписокТаблиц - Тип Строка, в строке переданы имена таблиц, которые необходимо заполнить
//				         имена таблиц соответствуют именам табличных частей документа ОтражениеЗарплатыВБухучете.
//  Отказ - Булево
//  ДанныеДляПроведения - Структура, ключ - имя регистра, значение - таблица значений с движениями документа
//						это источник данных, если Неопределено, тогда источник данных - движения регистров.
//
// Возвращаемое значение
// 		Структура ДанныеДляОтражения
//			Ключ - имя таблицы, соответствует именам табличных частей документа ОтражениеЗарплатыВБухучете.
//			Значение - таблица значений, соответствующая структуре табличных частей документа ОтражениеЗарплатыВБухучете.
//
Функция ДанныеДляОтраженияЗарплатыВБухучетеПоДаннымДляПроведения(ПериодРегистрации, Организация, СтрокаСписокТаблиц, РезультатыРасчетаЗарплаты)
	
	ДанныеДляОтражения = ОтражениеЗарплатыВБухучете.НоваяСтруктураДанныеДляОтраженияЗарплатыВБухучете();
	
	Если СтрНайти(СтрокаСписокТаблиц, "НачисленнаяЗарплатаИВзносы") > 0 Тогда
		
		СтраховыеВзносы = РезультатыРасчетаЗарплаты.СтраховыеВзносы;
		Если СтраховыеВзносы = Неопределено Тогда
			СтраховыеВзносы = Новый ТаблицаЗначений;
		КонецЕсли;	
		ТаблицаВзносов = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеВзносовПоТаблице(СтраховыеВзносы, ПериодРегистрации);
		
		НачисленияУдержания = РезультатыРасчетаЗарплаты.НачисленияУдержания;
		Если НачисленияУдержания = Неопределено Тогда
			НачисленияУдержания = Новый ТаблицаЗначений;
		КонецЕсли;
		ТаблицаНачислений = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНачисленийПоТаблице(НачисленияУдержания);
		
		ДоговорыГПХ = Новый Соответствие;
		Для каждого СтрокаТЗ Из ТаблицаНачислений Цикл
			Если СтрокаТЗ.Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги
				Или СтрокаТЗ.Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа Тогда
				ДоговорыГПХ.Вставить(СтрокаТЗ.ДокументОснование, Истина);
			КонецЕсли;
		КонецЦикла;
		
		БухучетНачислений = БухучетНачислений(Организация, ПериодРегистрации, ТаблицаНачислений);
		Если СтраховыеВзносы.Количество() > 0 Тогда
			ТаблицаВсехНачислений = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНачислений(Организация, ПериодРегистрации);
			СтрокиКУдалению = Новый Массив;
			Для каждого СтрокаТЗ Из ТаблицаВсехНачислений Цикл
				Если (СтрокаТЗ.Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги
					Или СтрокаТЗ.Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
					И ДоговорыГПХ[СтрокаТЗ.ДокументОснование] = Неопределено Тогда
					СтрокиКУдалению.Добавить(СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаВсехНачислений.Удалить(СтрокаКУдалению);
			КонецЦикла;
			БухучетВсехНачислений = БухучетНачислений(Организация, ПериодРегистрации, ТаблицаВсехНачислений);
			БухучетВзносов = ОтражениеЗарплатыВБухучете.БухучетСтраховыхВзносов(Организация, ПериодРегистрации, ТаблицаВзносов, БухучетВсехНачислений);
		Иначе
			БухучетВзносов = ОтражениеЗарплатыВБухучете.БухучетСтраховыхВзносов(Организация, ПериодРегистрации, ТаблицаВзносов, БухучетНачислений);
		КонецЕсли;
		ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы = БухучетНачисленийИВзносов(БухучетНачислений, БухучетВзносов);
		
	КонецЕсли;
	
	Если СтрНайти(СтрокаСписокТаблиц, "НачисленныйНДФЛ") > 0 Тогда
		
		НачисленияУдержания = РезультатыРасчетаЗарплаты.НачисленияУдержания;
		Если НачисленияУдержания = Неопределено Тогда
			НачисленияУдержания = Новый ТаблицаЗначений;
		КонецЕсли;
		ТаблицаНДФЛ = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНДФЛПоТаблице(НачисленияУдержания);
		
		ДанныеДляОтражения.НачисленныйНДФЛ = ОтражениеЗарплатыВБухучете.БухучетНДФЛ(ТаблицаНДФЛ);
		
	КонецЕсли;
	
	Если СтрНайти(СтрокаСписокТаблиц, "УдержаннаяЗарплата") > 0 Тогда
		
		НачисленияУдержания = РезультатыРасчетаЗарплаты.НачисленияУдержания;
		Если НачисленияУдержания = Неопределено Тогда
			НачисленияУдержания = Новый ТаблицаЗначений;
		КонецЕсли;
		ТаблицаУдержаний = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеУдержанийПоТаблице(НачисленияУдержания);
		БухучетУдержаний = БухучетУдержаний(ТаблицаУдержаний);
		ОтражениеЗарплатыВУчете.СвернутьТаблицу(БухучетУдержаний);
		ДанныеДляОтражения.УдержаннаяЗарплата = БухучетУдержаний;
		
	КонецЕсли;

	Возврат ДанныеДляОтражения;
	
КонецФункции

Функция БухучетНачислений(Организация, Период, ТаблицаНачислений)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ПериодРегистрации", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	&Организация КАК Организация,
	|	НачисленияДляРаспределения.Сотрудник КАК Сотрудник,
	|	НачисленияДляРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДляРаспределения.Подразделение КАК Подразделение,
	|	НачисленияДляРаспределения.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияДляРаспределения.Начисление КАК Начисление,
	|	НачисленияДляРаспределения.ВидОперации КАК ВидОперации,
	|	НачисленияДляРаспределения.ДатаНачала КАК ДатаНачала,
	|	НачисленияДляРаспределения.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияДляРаспределения.Сумма КАК Сумма,
	|	НачисленияДляРаспределения.ДокументОснование КАК ДокументОснование,
	|	НачисленияДляРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорамГПХ
	|ИЗ
	|	&ТаблицаНачислений КАК НачисленияДляРаспределения
	|ГДЕ
	|	НачисленияДляРаспределения.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	&Организация КАК Организация,
	|	НачисленияДляРаспределения.Сотрудник КАК Сотрудник,
	|	НачисленияДляРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДляРаспределения.Подразделение КАК Подразделение,
	|	НачисленияДляРаспределения.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияДляРаспределения.ВидОперации КАК ВидОперации,
	|	НачисленияДляРаспределения.Начисление КАК Начисление,
	|	НачисленияДляРаспределения.ДатаНачала КАК ДатаНачала,
	|	НачисленияДляРаспределения.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияДляРаспределения.Сумма КАК Сумма,
	|	НачисленияДляРаспределения.ДокументОснование КАК ДокументОснование,
	|	НачисленияДляРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТНачисленияБезДоговоровГПХ
	|ИЗ
	|	&ТаблицаНачислений КАК НачисленияДляРаспределения
	|ГДЕ
	|	НЕ НачисленияДляРаспределения.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги))";
	Запрос.Выполнить();
	
	СоздатьВТБухучетНачисленийБезДоговоровГПХ(Организация, Период, Запрос.МенеджерВременныхТаблиц);
	СоздатьВТБухучетНачисленийПоДоговорам(Организация, Период, Запрос.МенеджерВременныхТаблиц);
		
	// Объединение сведений о бухучете начислений и начислений по договорам.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	БухучетНачислений.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	|	БухучетНачислений.Организация КАК Организация,
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	БухучетНачислений.ВидОперации КАК ВидОперации,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.ДатаОкончания КАК ДатаОкончания,
	|	БухучетНачислений.ДокументОснование КАК ДокументОснование,
	|	СУММА(БухучетНачислений.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		БухучетНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		БухучетНачисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		БухучетНачисления.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	|		БухучетНачисления.Организация КАК Организация,
	|		БухучетНачисления.Сотрудник КАК Сотрудник,
	|		БухучетНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|		БухучетНачисления.Подразделение КАК Подразделение,
	|		БухучетНачисления.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|		БухучетНачисления.Начисление КАК Начисление,
	|		БухучетНачисления.ВидОперации КАК ВидОперации,
	|		БухучетНачисления.ДатаНачала КАК ДатаНачала,
	|		БухучетНачисления.ДатаОкончания КАК ДатаОкончания,
	|		БухучетНачисления.ДокументОснование КАК ДокументОснование,
	|		БухучетНачисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|		БухучетНачисления.СтатьяРасходов КАК СтатьяРасходов,
	|		БухучетНачисления.Сумма КАК Сумма,
	|		БухучетНачисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
	|	ИЗ
	|		ВТБухучетНачисленийБезДоговоровГПХ КАК БухучетНачисления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БухучетНачисления.ПериодРегистрации,
	|		БухучетНачисления.ИдентификаторСтроки,
	|		БухучетНачисления.ПериодПринятияРасходов,
	|		БухучетНачисления.Организация,
	|		БухучетНачисления.Сотрудник,
	|		БухучетНачисления.ФизическоеЛицо,
	|		БухучетНачисления.Подразделение,
	|		БухучетНачисления.Подразделение,
	|		БухучетНачисления.Начисление,
	|		БухучетНачисления.ВидОперации,
	|		БухучетНачисления.ДатаНачала,
	|		БухучетНачисления.ДатаОкончания,
	|		БухучетНачисления.ДокументОснование,
	|		БухучетНачисления.СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачисления.СтатьяФинансирования,
	|		БухучетНачисления.СтатьяРасходов,
	|		БухучетНачисления.Сумма,
	|		БухучетНачисления.ОблагаетсяЕНВД
	|	ИЗ
	|		ВТБухучетНачисленийПоДоговорам КАК БухучетНачисления) КАК БухучетНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачислений.ОблагаетсяЕНВД,
	|	БухучетНачислений.ДатаОкончания,
	|	БухучетНачислений.ИдентификаторСтроки,
	|	БухучетНачислений.ВидОперации,
	|	БухучетНачислений.ПериодПринятияРасходов,
	|	БухучетНачислений.Организация,
	|	БухучетНачислений.ДокументОснование,
	|	БухучетНачислений.ПериодРегистрации,
	|	БухучетНачислений.СтатьяРасходов,
	|	БухучетНачислений.Сотрудник,
	|	БухучетНачислений.СтатьяФинансирования,
	|	БухучетНачислений.ФизическоеЛицо,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.Начисление,
	|	БухучетНачислений.Подразделение,
	|	БухучетНачислений.ДатаНачала,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция БухучетНачисленийИВзносов(БухучетНачислений, БухучетВзносов)
	
	НачислениеВидТрудаДляНУ = ОтражениеЗарплатыВБухучете.НачислениеВидНачисленияОплатыТрудаДляНУ();
	
	Таблица = ОтражениеЗарплатыВБухучете.НоваяТаблицаБухучетНачисленнаяЗарплатаИВзносы();
	
	Для каждого СтрокаТЗ Из БухучетНачислений Цикл
		Если СтрокаТЗ.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников
			Или СтрокаТЗ.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из БухучетВзносов Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(Таблица);
	
	Для каждого СтрокаТЗ Из Таблица Цикл
		СтрокаТЗ.ВидНачисленияОплатыТрудаДляНУ = НачислениеВидТрудаДляНУ[СтрокаТЗ.Начисление];
	КонецЦикла;
		
	Возврат Таблица;
	
КонецФункции

Функция БухучетУдержаний(ТаблицаУдержаний)

	НоваяТаблицаУдержаний = ОтражениеЗарплатыВБухучете.НоваяТаблицаБухучетУдержаннаяЗарплата();
	
	ВидыОпераций = ОтражениеЗарплатыВБухучете.ВидыОперацийУдержанийТребующиеВводаДокументаОснования();
	ВидыОперацийДокументаОснования = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВидыОпераций);
	
	Для каждого СтрокаТЗ Из ТаблицаУдержаний Цикл
		ИсключаемыеСвойства = "ДокументОснование";
		Если ВидыОперацийДокументаОснования[СтрокаТЗ.ВидОперации] = Истина Тогда
			ИсключаемыеСвойства = Неопределено;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяТаблицаУдержаний.Добавить(), СтрокаТЗ,, ИсключаемыеСвойства);
	КонецЦикла;
	
	Возврат НоваяТаблицаУдержаний;

КонецФункции

#КонецОбласти

#Область БухучетНачислений

Процедура СоздатьВТБухучетНачисленийБезДоговоровГПХ(Организация, ПериодРегистрации, МенеджерВременныхТаблиц)
	
	УдалитьВТ = Новый Массив;
	
	ЕстьЕНВД    = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, ПериодРегистрации);
	ПроцентЕНВД = ОтражениеЗарплатыВБухучете.ПроцентЕНВД(Организация, ПериодРегистрации);
	
	// Получим сведения о настройке бухучета для начислений сотрудников.
	СоздатьВТНастройкиБухучетаНачисленийСотрудников(МенеджерВременныхТаблиц, "ВТНачисленияБезДоговоровГПХ", Организация, ПериодРегистрации);
	УдалитьВТ.Добавить("ВТНастройкиБухучетаНачисленийСотрудников");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПроцентЕНВД", ?(ПроцентЕНВД = Неопределено, 0, ПроцентЕНВД));
	Запрос.УстановитьПараметр("ЕстьЕНВД", ЕстьЕНВД);
	
	РасходыБезСпособаОтражения = Новый Массив;
	РасходыБезСпособаОтражения.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
	РасходыБезСпособаОтражения.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	РасходыБезСпособаОтражения.Добавить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты);
	Запрос.УстановитьПараметр("РасходыБезСпособаОтражения", РасходыБезСпособаОтражения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.ВидОперации КАК ВидОперации,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Начисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ Начисления.ДатаНачала < Начисления.ПериодРегистрации
	|			ТОГДА Начисления.ПериодРегистрации
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодПринятияРасходов,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|			ТОГДА СведенияОБухучетеНачисленийСотрудников.ОтношениеКЕНВД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	СведенияОБухучетеНачисленийСотрудников.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
	|				И ВидыРасчета.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РаспределятьПоБазе,
	|	ВидыРасчета.ВходитВБазуРКИСН КАК ВходитВБазуРКИСН,
	|	ВЫБОР
	|		КОГДА ВидыРасчета.ВидОперацииПоЗарплате В (&РасходыБезСпособаОтражения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасходыБезСпособаОтражения
	|ПОМЕСТИТЬ ВТСписокНачислений
	|ИЗ
	|	ВТНачисленияБезДоговоровГПХ КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучетаНачисленийСотрудников КАК СведенияОБухучетеНачисленийСотрудников
	|		ПО Начисления.ИдентификаторСтроки = СведенияОБухучетеНачисленийСотрудников.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
	|		ПО Начисления.Начисление = ВидыРасчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокНачислений.Организация КАК Организация,
	|	СписокНачислений.Сотрудник КАК Сотрудник,
	|	СписокНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокНачислений.Подразделение КАК Подразделение,
	|	СписокНачислений.ДатаНачала КАК ДатаНачала,
	|	СписокНачислений.ДатаОкончания КАК ДатаОкончания,
	|	СписокНачислений.ВидОперации КАК ВидОперации,
	|	СписокНачислений.Начисление КАК Начисление,
	|	СписокНачислений.ДокументОснование КАК ДокументОснование,
	|	СписокНачислений.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	|	ВЫБОР
	|		КОГДА СписокНачислений.РасходыБезСпособаОтражения
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)
	|		ИНАЧЕ СписокНачислений.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	СписокНачислений.РаспределятьПоБазе КАК РаспределятьПоБазе,
	|	СписокНачислений.ВходитВБазуРКИСН КАК ВходитВБазуРКИСН,
	|	ВЫБОР
	|		КОГДА СписокНачислений.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|			ТОГДА ВЫБОР
	|					КОГДА ОтношениеКЕНВДЗатратНаЗарплату.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|						ТОГДА ВЫРАЗИТЬ(СписокНачислений.Сумма * &ПроцентЕНВД / 100 КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ СписокНачислений.Сумма - (ВЫРАЗИТЬ(СписокНачислений.Сумма * &ПроцентЕНВД / 100 КАК ЧИСЛО(15, 2)))
	|				КОНЕЦ
	|		ИНАЧЕ СписокНачислений.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СписокНачислений.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|					ТОГДА ОтношениеКЕНВДЗатратНаЗарплату.Ссылка
	|				ИНАЧЕ СписокНачислений.ОтношениеКЕНВД
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД
	|ПОМЕСТИТЬ ВТБухучетНачисленийВременная
	|ИЗ
	|	ВТСписокНачислений КАК СписокНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ОтношениеКЕНВДЗатратНаЗарплату КАК ОтношениеКЕНВДЗатратНаЗарплату
	|		ПО (ОтношениеКЕНВДЗатратНаЗарплату.Ссылка В (ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД), ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)))
	|			И (СписокНачислений.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СУММА(БухучетНачислений.Сумма) КАК Сумма
	|ИЗ
	|	ВТБухучетНачисленийВременная КАК БухучетНачислений
	|ГДЕ
	|	БухучетНачислений.ВходитВБазуРКИСН
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачислений.Сотрудник,
	|	БухучетНачислений.Подразделение,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.ОблагаетсяЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СписокНачислений.Сотрудник КАК Сотрудник,
	|	СписокНачислений.Подразделение КАК Подразделение,
	|	СписокНачислений.Сумма КАК Сумма,
	|	СписокНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	СписокНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
	|ИЗ
	|	ВТБухучетНачисленийВременная КАК СписокНачислений
	|ГДЕ
	|	СписокНачислений.РаспределятьПоБазе";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.Количество();
	БазаНачислений = Результат[КоличествоРезультатов-2].Выгрузить();
	НачисленияДляРаспределения = Результат[КоличествоРезультатов-1].Выгрузить();
		
	Начисления = НачисленияДляРаспределения.СкопироватьКолонки();
	
	Отбор = Новый Структура("Сотрудник,Подразделение");
	БазаНачислений.Индексы.Добавить("Сотрудник,Подразделение");
	
	Для каждого СтрокаНачисления Из НачисленияДляРаспределения Цикл
		
		Отбор.Сотрудник = СтрокаНачисления.Сотрудник;
		Отбор.Подразделение = СтрокаНачисления.Подразделение;
		СтрокиБазы = БазаНачислений.НайтиСтроки(Отбор);
		
		Если СтрокиБазы.Количество() > 0 Тогда
			
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиБазы,"Сумма");
			Результаты = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаНачисления.Сумма, Коэффициенты);
			
			Если Результаты = Неопределено Тогда
				НоваяСтрока = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для Каждого СтрокаБазы Из СтрокиБазы Цикл
				
				НоваяСтрока = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				НоваяСтрока.Сумма = Результаты[Индекс];
				НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СтрокаБазы.СпособОтраженияЗарплатыВБухучете;
				НоваяСтрока.ОблагаетсяЕНВД = СтрокаБазы.ОблагаетсяЕНВД;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	Начисления.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТНачисленияПоБазе
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	БухучетНачислений.Организация КАК Организация,
	|	БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.ДатаОкончания КАК ДатаОкончания,
	|	БухучетНачислений.ВидОперации КАК ВидОперации,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	НачисленияДляРаспределения.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СУММА(БухучетНачислений.Сумма) КАК Сумма,
	|	БухучетНачислений.ДокументОснование КАК ДокументОснование,
	|	БухучетНачислений.ПериодПринятияРасходов КАК ПериодПринятияРасходов
	|ПОМЕСТИТЬ ВТБухучетНачисленийБезДоговоровГПХ
	|ИЗ
	|	(ВЫБРАТЬ
	|		БухучетНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|		БухучетНачислений.Организация КАК Организация,
	|		БухучетНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		БухучетНачислений.Сотрудник КАК Сотрудник,
	|		БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|		БухучетНачислений.Подразделение КАК Подразделение,
	|		БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|		КОНЕЦПЕРИОДА(БухучетНачислений.ДатаНачала, МЕСЯЦ) КАК ДатаОкончания,
	|		БухучетНачислений.ВидОперации КАК ВидОперации,
	|		БухучетНачислений.Начисление КАК Начисление,
	|		НачисленияПоБазе.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачислений.Подразделение КАК ПодразделениеУчетаЗатрат,
	|		НачисленияПоБазе.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|		НачисленияПоБазе.Сумма КАК Сумма,
	|		БухучетНачислений.ДокументОснование КАК ДокументОснование,
	|		БухучетНачислений.ПериодПринятияРасходов КАК ПериодПринятияРасходов
	|	ИЗ
	|		ВТСписокНачислений КАК БухучетНачислений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоБазе КАК НачисленияПоБазе
	|			ПО БухучетНачислений.ИдентификаторСтроки = НачисленияПоБазе.ИдентификаторСтроки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БухучетНачислений.ПериодРегистрации,
	|		БухучетНачислений.Организация,
	|		БухучетНачислений.ИдентификаторСтроки,
	|		БухучетНачислений.Сотрудник,
	|		БухучетНачислений.ФизическоеЛицо,
	|		БухучетНачислений.Подразделение,
	|		БухучетНачислений.ДатаНачала,
	|		КОНЕЦПЕРИОДА(БухучетНачислений.ДатаНачала, МЕСЯЦ),
	|		БухучетНачислений.ВидОперации,
	|		БухучетНачислений.Начисление,
	|		БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|		БухучетНачислений.Подразделение,
	|		БухучетНачислений.ОблагаетсяЕНВД,
	|		БухучетНачислений.Сумма,
	|		БухучетНачислений.ДокументОснование,
	|		БухучетНачислений.ПериодПринятияРасходов
	|	ИЗ
	|		ВТБухучетНачисленийВременная КАК БухучетНачислений
	|	ГДЕ
	|		НЕ БухучетНачислений.РаспределятьПоБазе) КАК БухучетНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияБезДоговоровГПХ КАК НачисленияДляРаспределения
	|		ПО БухучетНачислений.ИдентификаторСтроки = НачисленияДляРаспределения.ИдентификаторСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачислений.Подразделение,
	|	БухучетНачислений.Начисление,
	|	БухучетНачислений.Сотрудник,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.ВидОперации,
	|	БухучетНачислений.ПериодРегистрации,
	|	БухучетНачислений.Организация,
	|	НачисленияДляРаспределения.СтатьяРасходов,
	|	БухучетНачислений.ДатаНачала,
	|	БухучетНачислений.ИдентификаторСтроки,
	|	БухучетНачислений.ПериодПринятияРасходов,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.ФизическоеЛицо,
	|	БухучетНачислений.ОблагаетсяЕНВД,
	|	БухучетНачислений.ДатаОкончания,
	|	БухучетНачислений.ДокументОснование";
	
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТБухучетНачисленийВременная");
	УдалитьВТ.Добавить("ВТНачисленияПоБазе");
	УдалитьВТ.Добавить("ВТСписокНачислений");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);

КонецПроцедуры

Процедура СоздатьВТБухучетНачисленийПоДоговорам(Организация, ПериодРегистрации, МенеджерВременныхТаблиц) Экспорт
	
	ЕстьЕНВД = ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, ПериодРегистрации);
	
	СтатьиРасходовПоСпособамРасчетов  = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	РасчетыСКонтрагентами = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЕстьЕНВД", ЕстьЕНВД);
	Запрос.УстановитьПараметр("РасчетыСКонтрагентами", РасчетыСКонтрагентами);
	
	УдалитьВТ = Новый Массив;
	
	// Получим сведения о настройке бухучета для договорников.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ДатаНачала КАК Период,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСотрудникиДляПолученияНастроек
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Начисления";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиДляПолученияНастроек");
	
	СоздатьВТНастройкиБухучета(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДляПолученияНастроек");
	УдалитьВТ.Добавить("ВТНастройкиБухучета");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОБухучетеЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА СведенияОБухучетеЗарплатыСотрудников.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|					ИНАЧЕ СведенияОБухучетеЗарплатыСотрудников.ОтношениеКЕНВД
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТБухучетСотрудниковПоДоговорам
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК СведенияОБухучетеЗарплатыСотрудников
	|		ПО Начисления.ИдентификаторСтроки = СведенияОБухучетеЗарплатыСотрудников.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЕСТЬNULL(НачисленияПоДоговорам.СпособОтраженияЗарплатыВБухучете, УсловияДоговораГПХ.СпособОтраженияЗарплатыВБухучете) КАК СпособОтраженияЗарплатыВБухучете,
	|	ЕСТЬNULL(НачисленияПоДоговорам.ОтношениеКЕНВД, УсловияДоговораГПХ.ОтношениеКЕНВД) КАК ОтношениеКЕНВД,
	|	ЕСТЬNULL(НачисленияПоДоговорам.Сумма, УсловияДоговораГПХ.Сумма) КАК Сумма,
	|	ЕСТЬNULL(НачисленияПоДоговорам.СуммаЕНВД, УсловияДоговораГПХ.СуммаЕНВД) КАК СуммаЕНВД
	|ПОМЕСТИТЬ ВТБухучетДокументов
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|		ПО Начисления.ДокументОснование = НачисленияПоДоговорам.ДоговорАкт
	|			И Начисления.ПериодРегистрации = НачисленияПоДоговорам.МесяцНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|		ПО Начисления.ДокументОснование = УсловияДоговораГПХ.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА БухучетДокументов.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|				ИЛИ БухучетДокументов.СпособОтраженияЗарплатыВБухучете ЕСТЬ NULL
	|			ТОГДА БухучетСотрудников.СпособОтраженияЗарплатыВБухучете
	|		ИНАЧЕ БухучетДокументов.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА БухучетДокументов.ОтношениеКЕНВД ЕСТЬ NULL
	|							ИЛИ БухучетДокументов.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|						ТОГДА БухучетСотрудников.ОтношениеКЕНВД
	|					ИНАЧЕ БухучетДокументов.ОтношениеКЕНВД
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|	КОНЕЦ КАК ОтношениеКЕНВД,
	|	Начисления.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БухучетДокументов.Сумма, 0) = 0
	|			ТОГДА 0
	|		КОГДА Начисления.Сумма = БухучетДокументов.Сумма
	|			ТОГДА БухучетДокументов.СуммаЕНВД
	|		ИНАЧЕ ВЫРАЗИТЬ(БухучетДокументов.СуммаЕНВД * (ВЫРАЗИТЬ(Начисления.Сумма / БухучетДокументов.Сумма КАК ЧИСЛО(25, 10))) КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаЕНВД
	|ПОМЕСТИТЬ ВТУчетДоговоровВременная
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетДокументов КАК БухучетДокументов
	|		ПО Начисления.ИдентификаторСтроки = БухучетДокументов.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетСотрудниковПоДоговорам КАК БухучетСотрудников
	|		ПО Начисления.ИдентификаторСтроки = БухучетСотрудников.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетДоговоров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	УчетДоговоров.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	УчетДоговоров.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	УчетДоговоров.Сумма КАК Сумма,
	|	УчетДоговоров.СуммаЕНВД КАК СуммаЕНВД,
	|	ВЫБОР
	|		КОГДА УчетДоговоров.Сумма = УчетДоговоров.СуммаЕНВД
	|				ИЛИ УчетДоговоров.СуммаЕНВД = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РассчитыватьДолюЕНВД,
	|	ВЫБОР
	|		КОГДА УчетДоговоров.Сумма = 0
	|			ТОГДА 0
	|		ИНАЧЕ УчетДоговоров.СуммаЕНВД / УчетДоговоров.Сумма
	|	КОНЕЦ КАК ДоляЕНВД
	|ПОМЕСТИТЬ ВТУчетДоговоров
	|ИЗ
	|	ВТУчетДоговоровВременная КАК УчетДоговоров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.ПериодРегистрации КАК ПериодПринятияРасходов,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	&РасчетыСКонтрагентами КАК СтатьяРасходов,
	|	УчетДоговоров.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА УчетДоговоров.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|					ТОГДА ВЫБОР
	|							КОГДА УчетДоговоров.РассчитыватьДолюЕНВД
	|								ТОГДА ОтношениеКЕНВДЗатратНаЗарплату.Ссылка
	|							КОГДА УчетДоговоров.ДоляЕНВД = 0
	|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|						КОНЕЦ
	|				ИНАЧЕ УчетДоговоров.ОтношениеКЕНВД
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА УчетДоговоров.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|				И УчетДоговоров.РассчитыватьДолюЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ОтношениеКЕНВДЗатратНаЗарплату.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|						ТОГДА УчетДоговоров.СуммаЕНВД
	|					ИНАЧЕ УчетДоговоров.Сумма - УчетДоговоров.СуммаЕНВД
	|				КОНЕЦ
	|		ИНАЧЕ УчетДоговоров.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Начисления.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТБухучетНачисленийПоДоговорам
	|ИЗ
	|	ВТНачисленияПоДоговорамГПХ КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетДоговоров КАК УчетДоговоров
	|		ПО Начисления.ИдентификаторСтроки = УчетДоговоров.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ОтношениеКЕНВДЗатратНаЗарплату КАК ОтношениеКЕНВДЗатратНаЗарплату
	|		ПО (ОтношениеКЕНВДЗатратНаЗарплату.Ссылка В (ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД), ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)))
	|			И (УчетДоговоров.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом))
	|			И (УчетДоговоров.РассчитыватьДолюЕНВД)";
	
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТБухучетСотрудниковПоДоговорам");
	УдалитьВТ.Добавить("ВТУчетДоговоров");
	УдалитьВТ.Добавить("ВТУчетДоговоровВременная");
	УдалитьВТ.Добавить("ВТБухучетДокументов");
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеЕНВД

// Создает временную таблицу с данными ЕНВД.
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу ВТНачисления с полями
// 				* Сотрудник
// 				* ДатаНачала
// 	Организация - СправочникСсылка.Организации.
// 	Период - Дата.
//
Процедура СоздатьВТНачисленияСДаннымиЕНВДПоЕжемесячнойДоле(МенеджерВТ, Организация, Период) Экспорт
	
	ЕжемесячнаяДоляЕНВД = 0;
	ПроцентЕНВД = ОтражениеЗарплатыВБухучете.ПроцентЕНВД(Организация, Период);
	Если ПроцентЕНВД = 100 Тогда
		ЕжемесячнаяДоляЕНВД = 1;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЕжемесячнаяДоляЕНВД", ЕжемесячнаяДоляЕНВД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ДатаНачала КАК Период,
	|	&Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСотрудникиДляПолученияНастроек
	|ИЗ
	|	ВТНачисления КАК Начисления";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиДляПолученияНастроек");
	
	СоздатьВТНастройкиБухучета(МенеджерВТ, "ВТСотрудникиДляПолученияНастроек");
	УдалитьВТ.Добавить("ВТНастройкиБухучета");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)
	|			ТОГДА &ЕжемесячнаяДоляЕНВД
	|		КОГДА НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЕНВД
	|ПОМЕСТИТЬ ВТНачисленияСДаннымиЕНВД
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК НастройкиБухучета
	|		ПО Начисления.Сотрудник = НастройкиБухучета.Сотрудник
	|			И Начисления.ДатаНачала = НастройкиБухучета.Период";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);

КонецПроцедуры

Функция ТребуетсяРегистрацияПроцентаЕНВД(МенеджерВТ, ИмяИсходнойВТ, Организация, Период) Экспорт
	
	УдалитьВТ = Новый Массив;
	
	СоздатьВТНастройкиБухучетаНачисленийСотрудников(МенеджерВТ, ИмяИсходнойВТ, Организация, Период);
	УдалитьВТ.Добавить("ВТНастройкиБухучетаНачисленийСотрудников");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОБухучете.ОтношениеКЕНВД
	|ИЗ
	|	ВТНастройкиБухучетаНачисленийСотрудников КАК СведенияОБухучете
	|ГДЕ
	|	СведенияОБухучете.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом)";
	Результат = Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, УдалитьВТ);
	
	Возврат Не Результат.Пустой();

КонецФункции

#КонецОбласти

#Область ОбслуживаниеОценочныхОбязательств

// Заполняет параметры для расчета оценочных обязательств по отпускам.
//
// Параметры:
// 	Организация         - СправочникСсылка.Организации
// 	ПериодРегистрации   - Дата
// 	ПараметрыДляРасчета - Структура - параметры, которые будут заполняться, 
//                        см. ОтражениеЗарплатыВБухучете.ОписаниеПараметровДляРасчетаОценочныхОбязательствОтпусков.
// 	Сотрудники          - Массив, Неопределенно
//
Процедура ЗаполнитьПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, ПараметрыДляРасчета, Сотрудники) Экспорт

	НачисленнаяЗарплатаИВзносы = НачисленияИВзносыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, Сотрудники);
	ФондОплатыТрудаИСтраховыеВзносы = ОтражениеЗарплатыВБухучете.ФондОплатыТрудаИСтраховыеВзносыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, НачисленнаяЗарплатаИВзносы);
	
	ФондОплатыТрудаИСтраховыеВзносы.Колонки.Удалить("ДатаНачала");
	ФондОплатыТрудаИСтраховыеВзносы.Колонки.Удалить("Начисление");
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(ФондОплатыТрудаИСтраховыеВзносы);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФондОплатыТрудаИСтраховыеВзносы, ПараметрыДляРасчета.ФондОплатыТрудаИСтраховыеВзносы);
	
	ОстаткиОтпусковДляРасчетаОценочныхОбязательств = ОтражениеЗарплатыВБухучете.ОстаткиОтпусковДляРасчетаОценочныхОбязательств(Организация, ПериодРегистрации, Сотрудники, "Подразделение");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстаткиОтпусковДляРасчетаОценочныхОбязательств, ПараметрыДляРасчета.ОстаткиОтпусков);
	ПараметрыДляРасчета.ОстаткиОтпусков.Колонки.Удалить("ДатаНачала");
	
	НастройкиБухучетаСотрудников = НастройкиБухучетаСотрудниковДляРасчетаОбязательств(Организация, ПериодРегистрации, Сотрудники);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НастройкиБухучетаСотрудников, ПараметрыДляРасчета.НастройкиБухучетаСотрудников);
	ПараметрыДляРасчета.НастройкиБухучетаСотрудников.Колонки.Удалить("ДатаНачала");

КонецПроцедуры

Функция НачисленияИВзносыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, Сотрудники)
	
	ТаблицаНачислений = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНачислений(Организация, ПериодРегистрации, Сотрудники);
	БухучетНачислений = БухучетНачислений(Организация, ПериодРегистрации, ТаблицаНачислений);
	
	ТаблицаВзносов = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеВзносов(Организация, ПериодРегистрации, Сотрудники);
	БухучетВзносов = ОтражениеЗарплатыВБухучете.БухучетСтраховыхВзносов(Организация, ПериодРегистрации, ТаблицаВзносов, БухучетНачислений);
	
	Возврат БухучетНачисленийИВзносов(БухучетНачислений, БухучетВзносов);
	
КонецФункции

Процедура ЗаполнитьПараметрыПолученияФОТОрганизацийДляОценочныхОбязательствОтпусков(Организации, Период, ТаблицаПараметров) Экспорт
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.Сотрудники = Неопределено;
	НоваяСтрока.БазовыеНачисления = БазовыеНачисленияОтпуска();

КонецПроцедуры

Процедура ЗаполнитьПараметрыПолученияФОТСотрудниковДляОценочныхОбязательствОтпусков(СотрудникиДляОбработки, Период, ПараметрыПолученияФОТ) Экспорт

	ПараметрыПолученияФОТ.Сотрудники = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(СотрудникиДляОбработки);
	ПараметрыПолученияФОТ.БазаОтпускаПоСреднемуЗаработку = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(БазовыеНачисленияОтпуска());

КонецПроцедуры

Функция БазовыеНачисленияОтпуска()

	СписокКатегорий = Новый Массив;
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКатегорий", СписокКатегорий);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Процедура ЗаполнитьСведенияОбОтпускахСотрудниковДляОценочныхОбязательств(СведенияОбОтпусках, СотрудникиДляОбработки, Организация, Период) Экспорт

	ДатаРасчетаСреднего = НачалоМесяца(ДобавитьМесяц(Период, 1));
	
	Для каждого Сотрудник Из СотрудникиДляОбработки Цикл
	
		НоваяСтрока = СведенияОбОтпусках.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.СреднийЗаработок = СреднийЗаработокОбщийСотрудника(Сотрудник, ДатаРасчетаСреднего);
	
	КонецЦикла;
	
КонецПроцедуры

Функция СреднийЗаработокОбщийСотрудника(Сотрудник, ДатаНачалаСобытия)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
	Иначе
		Возврат 0;
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ДатаПриема");
	Если КадровыеДанные.Количество() = 0 Тогда
		// Сотрудник не принят на работу.
		Возврат 0;
	Иначе
		Если ЗначениеЗаполнено(КадровыеДанные[0].ДатаПриема) И КадровыеДанные[0].ДатаПриема > ДатаНачалаСобытия Тогда
			// Дата начала события раньше, чем сотрудник принят на работу.
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	ДатаПриемаНаРаботу = КадровыеДанные[0].ДатаПриема;
	
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -12);
	НачалоПериода = Макс(НачалоПериода, НачалоМесяца(ДатаПриемаНаРаботу));
	
	ОкончаниеПериода = НачалоМесяца(ДатаНачалаСобытия) - 1;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ГоловнаяОрганизация");
	
	ДанныеДляРасчета = МодульРасчетЗарплатыДляНебольшихОрганизаций.ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(Сотрудник, Организация, НачалоПериода, ОкончаниеПериода);
	
	ОтработанноеВремяДляСреднегоОбщий = Новый ТаблицаЗначений; 
	ОтработанноеВремяДляСреднегоОбщий.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ОтработанноеВремяДляСреднегоОбщий.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	ОтработанноеВремяДляСреднегоОбщий.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для каждого ДанныеОВремени Из ДанныеДляРасчета.ДанныеОВремени Цикл
		СтрокаДанныхОВремени = ОтработанноеВремяДляСреднегоОбщий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхОВремени, ДанныеОВремени);
		СтрокаДанныхОВремени.Сотрудник = Сотрудник;
	КонецЦикла;
	
	СреднийЗаработокОбщий = Новый ТаблицаЗначений; 
	СреднийЗаработокОбщий.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СреднийЗаработокОбщий.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СреднийЗаработокОбщий.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для каждого ДанныеОНачислениях Из ДанныеДляРасчета.ДанныеОНачислениях Цикл
		СтрокаДанныеОНачислениях = СреднийЗаработокОбщий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныеОНачислениях, ДанныеОНачислениях);
		СтрокаДанныеОНачислениях.Сотрудник = Сотрудник;
	КонецЦикла;
	
	ТаблицыПоСотруднику = Новый Структура;
	ТаблицыПоСотруднику.Вставить("ДанныеОНачислениях", СреднийЗаработокОбщий);
	ТаблицыПоСотруднику.Вставить("ДанныеОВремени", ОтработанноеВремяДляСреднегоОбщий);
	
	ПараметрыПолученияДанныхСреднего = МодульРасчетЗарплатыДляНебольшихОрганизаций.ПараметрыПолученияДанныхСреднегоОбщего();
	ПараметрыПолученияДанныхСреднего.Вставить("ТаблицыПоСотруднику", 	ТаблицыПоСотруднику); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаПериода",  	НачалоПериода); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаОкончанияПериода",	ОкончаниеПериода); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаСобытия", 		ДатаНачалаСобытия);		
	
	ДанныеРасчетаСреднегоЗаработка = МодульРасчетЗарплатыДляНебольшихОрганизаций.ДанныеРасчетаСреднегоЗаработкаОбщего(ПараметрыПолученияДанныхСреднего);
	
	Возврат ДанныеРасчетаСреднегоЗаработка.Итоги.СреднедневнойЗаработок;	

КонецФункции

// Получает настройки бухучета сотрудников для расчета оценочных обязательств.
//
// Параметры:
// 	ТаблицаСотрудников - ТаблицаЗначений - содержит колонки
// 			* Сотрудник
// 			* Подразделение
// 	Организация - СправочникСсылка.Организации.
// 	Период - Дата.
//
// Возвращаемое значение:
// 	ТаблицаЗначений
//
Функция НастройкиБухучетаДляРасчетаОбязательств(ТаблицаСотрудников, Организация, Период) Экспорт
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	&Период КАК Период,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Подразделение КАК Подразделение,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК Таблица";
	Запрос.Выполнить();
	
	СоздатьВТНастройкиБухучета(МенеджерВТ, "ВТСотрудники");
	
	Запрос.УстановитьПараметр("ЕстьЕНВД", ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, Период));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиБухучета.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|				И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД
	|ИЗ
	|	ВТНастройкиБухучета КАК НастройкиБухучета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ТаблицаСотрудников
	|		ПО НастройкиБухучета.ИдентификаторСтроки = ТаблицаСотрудников.ИдентификаторСтроки";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции 

Функция НастройкиБухучетаСотрудниковДляРасчетаОбязательств(Организация, Период, Сотрудники)

	НастройкиБухучетаСотрудников = ОтражениеЗарплатыВБухучете.НоваяТаблицаНастройкиБухучетаСотрудников();
	
	КадровыеДанныеСтрока = "Подразделение";
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.Организация      = Организация;
		ПараметрыПолучения.НачалоПериода    = НачалоМесяца(Период);
		ПараметрыПолучения.ОкончаниеПериода = КонецМесяца(Период);
		ПараметрыПолучения.Вставить("КадровыеДанные", КадровыеДанныеСтрока);
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
	Иначе
		ТаблицаСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, КадровыеДанныеСтрока, КонецМесяца(Период));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&Период КАК Период,
	|	Таблица.Подразделение КАК Подразделение,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК Таблица";
	Запрос.Выполнить();
	
	СоздатьВТНастройкиБухучета(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	
	Запрос.УстановитьПараметр("ЕстьЕНВД", ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, Период));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Организация КАК Организация,
	|	НастройкиБухучета.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Подразделение КАК Подразделение,
	|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|				И НастройкиБухучета.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОблагаетсяЕНВД,
	|	1 КАК ДоляРаспределения
	|ИЗ
	|	ВТНастройкиБухучета КАК НастройкиБухучета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ТаблицаСотрудников
	|		ПО НастройкиБухучета.ИдентификаторСтроки = ТаблицаСотрудников.ИдентификаторСтроки";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НастройкиБухучетаСотрудников.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат НастройкиБухучетаСотрудников;

КонецФункции

// Возвращает бухучет начислений, входящий в базу расчета оценочных обязательств.
//
// 	Параметры:
// 		Организация - СправочникСсылка.Организации
// 		Сотрудники - Массив
// 		НачалоПериода – Дата 
// 		КонецПериода – Дата
// 		ОбязательстваПоОтпускам - Булево
// 		БазовыеНачисления - Массив, Неопределено.
//
// Возвращаемое значение:
// 		ТаблицаЗначений, содержит колонки
// 			* Сотрудник - СправочникСсылка.Сотрудники
// 			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
// 			* Подразделение - СправочникСсылка.ПодразделенияОрганизаций
// 			* ПодразделениеУчетаЗатрат - СправочникСсылка.ПодразделенияОрганизаций
// 			* МестоВСтруктуреПредприятия - ОпределяемыйТип.МестоВСтруктуреПредприятия
// 			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
// 			* СпособОтраженияЗарплатыВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете
// 			* Сумма - Число.
//
Функция БухучетБазовыхНачисленийОценочныхОбязательств(Организация, Сотрудники, НачалоПериода, КонецПериода, ОбязательстваПоОтпускам, БазовыеНачисления) Экспорт
	
	Периоды = Новый Массив;
	ТекущийПериод = НачалоМесяца(НачалоПериода);
	Пока ТекущийПериод <= КонецПериода Цикл
		Периоды.Добавить(ТекущийПериод);
		ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
	КонецЦикла;
	
	БухучетБазовыхНачислений = Новый ТаблицаЗначений;
	БухучетБазовыхНачислений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	БухучетБазовыхНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БухучетБазовыхНачислений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	БухучетБазовыхНачислений.Колонки.Добавить("ПодразделениеУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	БухучетБазовыхНачислений.Колонки.Добавить("МестоВСтруктуреПредприятия", Метаданные.ОпределяемыеТипы.МестоВСтруктуреПредприятия.Тип);
	БухучетБазовыхНачислений.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	БухучетБазовыхНачислений.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	БухучетБазовыхНачислений.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	МассивТиповНачисления = Новый Массив;
	МассивТиповНачисления.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисления.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	
	БухучетНачислений = БухучетБазовыхНачислений.СкопироватьКолонки();
	БухучетНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов(МассивТиповНачисления));
	
	Для каждого Период Из Периоды Цикл
		ТаблицаНачислений = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеНачислений(Организация, Период, Сотрудники);
		БухучетНачисленийЗаПериод = БухучетНачислений(Организация, Период, ТаблицаНачислений);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(БухучетНачисленийЗаПериод, БухучетНачислений);
	КонецЦикла;
	
	Если ОбязательстваПоОтпускам Тогда
		НачисленияДляОтбора = БазовыеНачисленияОтпуска();
	ИначеЕсли Не ЗначениеЗаполнено(БазовыеНачисления) Тогда
		НачисленияДляОтбора = БазовыеНачисленияОплатаТруда();
	Иначе
		НачисленияДляОтбора = БазовыеНачисления;
	КонецЕсли;
	
	НачисленияБазы = Новый Соответствие;
	Для каждого Начисление Из НачисленияДляОтбора Цикл
		НачисленияБазы.Вставить(Начисление, Истина);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из БухучетНачислений Цикл
		Если НачисленияБазы[СтрокаТЗ.Начисление] <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(БухучетБазовыхНачислений.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(БухучетБазовыхНачислений);
	
	ОбработанныеСотрудники = ОбщегоНазначения.ВыгрузитьКолонку(БухучетБазовыхНачислений, "Сотрудник", Истина);
	СотрудникиСБухучетом = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ОбработанныеСотрудники);
	
	СотрудникиБезБухучета = Новый Массив;
	Для каждого Сотрудник Из Сотрудники Цикл
		Если СотрудникиСБухучетом[Сотрудник] = Неопределено Тогда
			СотрудникиБезБухучета.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Если СотрудникиБезБухучета.Количество() > 0 Тогда
		
		КадровыеДанныеСтрока = "Подразделение";
		ТаблицаСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиБезБухучета, КадровыеДанныеСтрока, КонецМесяца(КонецПериода));
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Период", КонецМесяца(КонецПериода));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&Период КАК Период,
		|	Таблица.Сотрудник КАК Сотрудник,
		|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Таблица.Подразделение КАК Подразделение,
		|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудников КАК Таблица";
		Запрос.Выполнить();
		
		СоздатьВТНастройкиБухучета(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Подразделение КАК Подразделение,
		|	Сотрудники.Подразделение КАК ПодразделениеУчетаЗатрат,
		|	НастройкиБухучета.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	100 КАК Сумма
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК НастройкиБухучета
		|		ПО Сотрудники.Сотрудник = НастройкиБухучета.Сотрудник";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(БухучетБазовыхНачислений.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат БухучетБазовыхНачислений;

КонецФункции

// Возвращает страховые взносы по сотрудникам.
// 	Параметры:
// 		Организация - СправочникСсылка.Организации
// 		Период - Дата
// 		Сотрудники - Массив
// 		ОбязательстваПоОтпускам - Булево
// 		БазовыеНачисления - Массив, Неопределено.
//
// Возвращаемое значение:
// 		ТаблицаЗначений, содержит колонки
// 			* Сотрудник - СправочникСсылка.Сотрудники
// 			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
// 			* СтраховыеВзносы - Число
// 			* ФССНесчастныеСлучаи - Число
//
Функция ИсчисленныеВзносыДляРасчетаОценочныхОбязательств(Организация, Период, Сотрудники, ОбязательстваПоОтпускам, БазовыеНачисления) Экспорт

	Взносы = ОтражениеЗарплатыВУчете.ДанныеДляОтражениеВУчетеВзносов(Организация, Период, Сотрудники);
	
	Если ОбязательстваПоОтпускам Тогда
		НачисленияДляОтбора = БазовыеНачисленияОтпуска();
	ИначеЕсли Не ЗначениеЗаполнено(БазовыеНачисления) Тогда
		НачисленияДляОтбора = БазовыеНачисленияОплатаТруда();
	Иначе
		НачисленияДляОтбора = БазовыеНачисления;
	КонецЕсли;
	
	НачисленияБазы = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(НачисленияДляОтбора);
	
	ТаблицаВзносов = Новый ТаблицаЗначений;
	ТаблицаВзносов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаВзносов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносов.Колонки.Добавить("СтраховыеВзносы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВзносов.Колонки.Добавить("ФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для каждого СтрокаТЗ Из Взносы Цикл
		
		Если НачисленияБазы[СтрокаТЗ.Начисление] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаВзносов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, "Сотрудник,ФизическоеЛицо");
		Если СтрокаТЗ.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ФССНС Тогда
			НоваяСтрока.ФССНесчастныеСлучаи = СтрокаТЗ.Сумма;
		Иначе
			НоваяСтрока.СтраховыеВзносы = СтрокаТЗ.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаВзносов);
	
	Возврат ТаблицаВзносов;

КонецФункции

Функция БазовыеНачисленияОплатаТруда() Экспорт

	СписокКатегорий = Новый Массив;
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКатегорий", СписокКатегорий);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	

КонецФункции

#КонецОбласти

#Область ПолучениеНастроекБухучета

// Получает настройки бухучета.
// Результат помещается во временную таблицу ВТНастройкиБухучета.
//
// Поля таблицы ВТНастройкиБухучета
// 			* ИдентификаторСтроки
// 			* Организация
// 			* Сотрудник
// 			* Период
// 			* СтатьяФинансирования
// 			* СпособОтраженияЗарплатыВБухучете
// 			* ОтношениеКЕНВД
//
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит таблицу с именем, указанном в параметре ИмяИсходнойВТ.
// 			Таблица должна содержать поля:
// 			* Организация
// 			* Сотрудник
// 			* Период
// 			* ИдентификаторСтроки
// 	ИмяИсходнойВТ - Строка - имя временной таблицы для получения настроек.
//
Процедура СоздатьВТНастройкиБухучета(МенеджерВТ, ИмяИсходнойВТ)
	
	ИменаВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Организация КАК Организация,
	|	Таблица.Период КАК Период
	|ПОМЕСТИТЬ ВТОтборОрганизаций
	|ИЗ
	|	ИмяИсходнойВТ КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериоды.Организация КАК Организация,
	|	МаксимальныеПериоды.Период КАК Период,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетЗарплаты.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗаполнен,
	|	БухучетЗарплаты.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВДЗаполнено
	|ПОМЕСТИТЬ ВТБухучетОрганизаций
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Организация КАК Организация,
	|		Организации.Период КАК Период,
	|		МАКСИМУМ(БухучетЗарплатыОрганизаций.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТОтборОрганизаций КАК Организации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплатыОрганизаций
	|			ПО Организации.Организация = БухучетЗарплатыОрганизаций.Организация
	|				И Организации.Период >= БухучетЗарплатыОрганизаций.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Организации.Организация,
	|		Организации.Период) КАК МаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплаты
	|		ПО МаксимальныеПериоды.Организация = БухучетЗарплаты.Организация
	|			И МаксимальныеПериоды.ПериодРегистра = БухучетЗарплаты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Период КАК Период
	|ПОМЕСТИТЬ ВТОтборСотрудников
	|ИЗ
	|	ИмяИсходнойВТ КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериоды.Сотрудник КАК Сотрудник,
	|	МаксимальныеПериоды.Период КАК Период,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетЗарплаты.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗаполнен,
	|	БухучетЗарплаты.ОтношениеКЕНВД <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка) КАК ОтношениеКЕНВДЗаполнено
	|ПОМЕСТИТЬ ВТБухучетСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сотрудники.Сотрудник КАК Сотрудник,
	|		Сотрудники.Период КАК Период,
	|		МАКСИМУМ(БухучетЗарплатыСотрудников.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТОтборСотрудников КАК Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников
	|			ПО Сотрудники.Сотрудник = БухучетЗарплатыСотрудников.Сотрудник
	|				И Сотрудники.Период >= БухучетЗарплатыСотрудников.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Сотрудники.Сотрудник,
	|		Сотрудники.Период) КАК МаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплаты
	|		ПО МаксимальныеПериоды.Сотрудник = БухучетЗарплаты.Сотрудник
	|			И МаксимальныеПериоды.ПериодРегистра = БухучетЗарплаты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БухучетСотрудников.СпособОтраженияЗаполнен, ЛОЖЬ)
	|			ТОГДА БухучетСотрудников.СпособОтраженияЗарплатыВБухучете
	|		КОГДА ЕСТЬNULL(БухучетОрганизаций.СпособОтраженияЗаполнен, ЛОЖЬ)
	|			ТОГДА БухучетОрганизаций.СпособОтраженияЗарплатыВБухучете
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БухучетСотрудников.ОтношениеКЕНВДЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетСотрудников.ОтношениеКЕНВД
	|		КОГДА ЕСТЬNULL(БухучетОрганизаций.ОтношениеКЕНВДЗаполнено, ЛОЖЬ)
	|			ТОГДА БухучетОрганизаций.ОтношениеКЕНВД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|	КОНЕЦ КАК ОтношениеКЕНВД
	|ПОМЕСТИТЬ ВТНастройкиБухучета
	|ИЗ
	|	ИмяИсходнойВТ КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетСотрудников КАК БухучетСотрудников
	|		ПО Таблица.Сотрудник = БухучетСотрудников.Сотрудник
	|			И Таблица.Период = БухучетСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетОрганизаций КАК БухучетОрганизаций
	|		ПО Таблица.Период = БухучетОрганизаций.Период
	|			И Таблица.Организация = БухучетОрганизаций.Организация";
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТОтборОрганизаций");
	УдалитьВТ.Добавить("ВТБухучетОрганизаций");
	УдалитьВТ.Добавить("ВТОтборСотрудников");
	УдалитьВТ.Добавить("ВТБухучетСотрудников");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяИсходнойВТ", ИмяИсходнойВТ);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТНастройкиБухучетаНачисленийСотрудников(МенеджерВТ, ИмяИсходнойВТ, Организация, Период)

	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Организация КАК Организация,
	|	Таблица.ДатаНачала КАК Период,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСотрудникиДляПолученияНастроек
	|ИЗ
	|	ИмяИсходнойВТ КАК Таблица";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяИсходнойВТ", ИмяИсходнойВТ);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСотрудникиДляПолученияНастроек");

	СоздатьВТНастройкиБухучета(МенеджерВТ, "ВТСотрудникиДляПолученияНастроек");
	УдалитьВТ.Добавить("ВТНастройкиБухучета");
	
	Запрос.УстановитьПараметр("ЕстьЕНВД", ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, Период));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА БухучетНачислений.Ссылка ЕСТЬ NULL
	|			ТОГДА БухучетСотрудников.СпособОтраженияЗарплатыВБухучете
	|		КОГДА БухучетНачислений.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)
	|			ТОГДА БухучетСотрудников.СпособОтраженияЗарплатыВБухучете
	|		ИНАЧЕ БухучетНачислений.СпособОтраженияЗарплатыВБухучете
	|	КОНЕЦ КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &ЕстьЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА БухучетНачислений.Ссылка ЕСТЬ NULL
	|						ТОГДА БухучетСотрудников.ОтношениеКЕНВД
	|					КОГДА БухучетНачислений.ОтношениеКЕНВД = ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка)
	|						ТОГДА БухучетСотрудников.ОтношениеКЕНВД
	|					ИНАЧЕ БухучетНачислений.ОтношениеКЕНВД
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД)
	|	КОНЕЦ КАК ОтношениеКЕНВД
	|ПОМЕСТИТЬ ВТНастройкиБухучетаНачисленийСотрудников
	|ИЗ
	|	ИмяИсходнойВТ КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНастройкиБухучета КАК БухучетСотрудников
	|		ПО Таблица.ИдентификаторСтроки = БухучетСотрудников.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК БухучетНачислений
	|		ПО Таблица.Начисление = БухучетНачислений.Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяИсходнойВТ", ИмяИсходнойВТ);
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);

КонецПроцедуры

#КонецОбласти

#Область Прочие

// Удаление роли из пользовательских профилей.
//
Процедура УдалитьРольОтражениеЗарплатыВБухгалтерскомУчете() Экспорт
	
	ИмяРоли = "? ОтражениеЗарплатыВБухгалтерскомУчете";
	МассивРолей = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.ОтражениеЗарплатыВБухгалтерскомУчете") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеОтраженияЗарплатыВБухучете");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеОценочныхОбязательствЗарплатаКадры");
		МассивРолей.Добавить("ЧтениеНастроекОценочныхОбязательствЗарплатаКадры");
	КонецЕсли;
	
	СоответствиеРолей = Новый Соответствие;
	СоответствиеРолей.Вставить(ИмяРоли, МассивРолей);
	УправлениеДоступом.ЗаменитьРолиВПрофилях(СоответствиеРолей);

КонецПроцедуры

Функция ИспользуетсяЕНВД() Экспорт

	Возврат Ложь;
	
КонецФункции

Процедура СоздатьВТНачисленияСДаннымиЕНВД(Организация, Период, МенеджерВременныхТаблиц, НачисленияПоСотрудникам) Экспорт
	
	ТаблицаНачислений = ОтражениеЗарплатыВУчете.НоваяТаблицаНачислений();
	Для каждого СтрокаТЗ Из НачисленияПоСотрудникам Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(), СтрокаТЗ);
	КонецЦикла;
	БухучетНачислений = БухучетНачислений(Организация, Период, ТаблицаНачислений);
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, БухучетНачислений, "ВТБухучетНачислений");
	ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, "ВТБухучетНачислений", "ВТНачисления");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ОтражениеЗарплатыВБухучете, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтражениеЗарплатыВБухучетеПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура УстановитьЗначениеДанныеДляБухучетПоставляютсяВнешнейПрограммой(ПараметрыОбновления = Неопределено) Экспорт
	
	Если Константы.ДанныеДляБухучетПоставляютсяВнешнейПрограммой.Получить() = Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		Константы.ДанныеДляБухучетПоставляютсяВнешнейПрограммой.Установить(Не Константы.ИспользоватьНачислениеЗарплаты.Получить());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
