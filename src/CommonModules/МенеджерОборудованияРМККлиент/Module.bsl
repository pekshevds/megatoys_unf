
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновляет текущее рабочее место с учетом имени компьютера.
//
// Возвращаемое значение:
//  Результат - Булево - признак успешного обновления параметра сеанса.
//
Функция ОбновитьРабочееМестоПользователя() Экспорт
	
	Результат = Истина;

	#Если Не ВебКлиент Тогда
		ИмяКомпьютераРабочегоМеста = ИмяКомпьютера();
	#Иначе
		ИмяКомпьютераРабочегоМеста = НСтр("ru = 'WebКлиент'");
	#КонецЕсли
	
	ИдентификаторРабочегоМеста = МенеджерОборудованияКлиентСервер.ИдентификаторКлиентаДляРабочегоМеста();
	
	ДанныеПроверки = Новый Структура();
	ДанныеПроверки =
		МенеджерОборудованияРМКВызовСервера.АктуальноеРабочееМестоПользователя(ИдентификаторРабочегоМеста,
			ИмяКомпьютераРабочегоМеста);
	
	Если ДанныеПроверки.Свойство("ЗаменитьРабочееМесто")
			И ДанныеПроверки.ЗаменитьРабочееМесто
			И ДанныеПроверки.Свойство("АктуальноеРабочееМесто") Тогда
			
				РабочееМесто = ДанныеПроверки.АктуальноеРабочееМесто;
				Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
				
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПодключаемоеОборудование

#Область ДисплейПокупателя

// Возвращает структуру для вывода информации на дисплей покупателя.
//
// Возвращаемое значение:
//  ИсходныеДанные - Структура.
//
Функция ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя() Экспорт

	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("Операция");
	ИсходныеДанные.Вставить("ИспользоватьПодключаемоеОборудование");
	ИсходныеДанные.Вставить("ДанныеДляОтображения");
	ИсходныеДанные.Вставить("СуммаСкидки");
	ИсходныеДанные.Вставить("СуммаИтого");
	
	Возврат ИсходныеДанные;

КонецФункции

// Возвращает структуру для обновления дисплея покупателя.
//
// Возвращаемое значение:
//  ИсходныеДанные - Структура.
//
Функция ИсходныеДанныеДляОбновленияДанныхНаДисплееПокупателя() Экспорт
	
	ИсходныеДанные = ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя();
	ИсходныеДанные.Вставить("ОтображатьТолькоИтоги");
	ИсходныеДанные.Вставить("ТекущаяСтрока");
	ИсходныеДанные.Вставить("Товары");
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Обновление информации, выводимой на дисплей покупателя.
//
// Параметры:
//  ИсходныеДанные - Структура.
//  ОбъектВладелец - УправляемаяФорма.
//	УникальныйИдентификатор - ИдентификаторФормы
//
Процедура ОбновитьДанныеНаДисплееПокупателя(ИсходныеДанные, ОбъектВладелец, УникальныйИдентификатор) Экспорт
	
	Операция								= ИсходныеДанные.Операция;
	ОтображатьТолькоИтоги					= ИсходныеДанные.ОтображатьТолькоИтоги;
	ТекущаяСтрока							= ИсходныеДанные.ТекущаяСтрока;
	Товары									= ИсходныеДанные.Товары;
	ДанныеДляОтображения					= ИсходныеДанные.ДанныеДляОтображения;
	ИспользоватьПодключаемоеОборудование	= ИсходныеДанные.ИспользоватьПодключаемоеОборудование;
	СуммаСкидки								= ИсходныеДанные.СуммаСкидки;
	СуммаИтого								= ИсходныеДанные.СуммаИтого;
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		Если Товары.Количество() > 0 Тогда
			ТекущаяСтрока = Товары[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		СуммаТовара = 0;
	Иначе
		
		СуммаТовара = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
		ИнформацияОТоваре = СокрЛП(ТекущаяСтрока.Номенклатура);
		
		Если НЕ ОтображатьТолькоИтоги Тогда
			
			ДанныеДляОтображения.ТоварНаименование = ИнформацияОТоваре;
			ДанныеДляОтображения.ТоварЦена = ФорматСумм(ТекущаяСтрока.Цена);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ПредставлениеСкидки = НСтр("ru = ''");
		
		ИспользуемоеКоличество = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка),
			ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
			
		СуммаСтрокиТовара = ТекущаяСтрока.Цена * ИспользуемоеКоличество;
		
		Скидка = СуммаСтрокиТовара - ТекущаяСтрока.Сумма;
		
		Если НЕ (СуммаСтрокиТовара = 0) И(Скидка > 0.01 ИЛИ Скидка < -0.01) Тогда
			
			ПредставлениеСкидки = НСтр("ru = '%1 %2 (%1 %3)'");
			
			Коэффициент = ?(Скидка > 0, 1, -1);
			ЗнакСкидки = ?(Скидка > 0, "-", "+");
			
			ОбщийПроцентСкидкиСтрокой = СтрШаблон(НСтр("ru = '%1%%'"),
				Формат(Коэффициент * Окр(100 * Скидка / СуммаСтрокиТовара, 2, 1), НСтр("ru = 'ЧДЦ=2'")));
			СуммаСкидкиСтрокой = ФорматСумм(Коэффициент * Скидка);
			
			ПредставлениеСкидки = СтрШаблон(ПредставлениеСкидки, ЗнакСкидки, СуммаСкидкиСтрокой,
				ОбщийПроцентСкидкиСтрокой);
			
		КонецЕсли;
		
		Если НЕ ОтображатьТолькоИтоги Тогда
			
			ДанныеДляОтображения.ТоварСумма			= ФорматСумм(ТекущаяСтрока.Сумма);
			ДанныеДляОтображения.ТоварКоличество	= ИспользуемоеКоличество;
			ДанныеДляОтображения.ТоварСкидка		= ПредставлениеСкидки;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеДляОтображения.СуммаИтого		= ФорматСумм(СуммаИтого);
	ДанныеДляОтображения.СуммаСкидки	= ФорматСумм(СуммаСкидки);
	
	ИсходныеДанные = ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя();
	ИсходныеДанные.ИспользоватьПодключаемоеОборудование	= ИспользоватьПодключаемоеОборудование;
	ИсходныеДанные.Операция								= Операция;
	ИсходныеДанные.ДанныеДляОтображения					= ДанныеДляОтображения;
	ИсходныеДанные.СуммаСкидки							= СуммаСкидки;
	ИсходныеДанные.СуммаИтого							= СуммаИтого;
	
	ВывестиИнформациюНаДисплейПокупателя(ИсходныеДанные, ОбъектВладелец, УникальныйИдентификатор, Скидка);
	
КонецПроцедуры

// Вывод информации на дисплей покупателя.
//
// Параметры:
//  ИсходныеДанные - Структура
//		*Операция - Строка
//		*ИспользоватьПодключаемоеОборудование - Булево
//		*ДанныеДляОтображения - Строка
//		*СуммаСкидки - Число
//		*СуммаИтого - Число
//  ОбъектВладелец - УправляемаяФорма.
//  УникальныйИдентификатор - ИдентификаторФормы.
//  СуммаСкидкиНаТовар - Число.
//
Процедура ВывестиИнформациюНаДисплейПокупателя(ИсходныеДанные, ОбъектВладелец, УникальныйИдентификатор,
	СуммаСкидкиНаТовар = 0) Экспорт
	
	Операция								= ИсходныеДанные.Операция;
	ДанныеДляОтображения					= ИсходныеДанные.ДанныеДляОтображения;
	ИспользоватьПодключаемоеОборудование	= ИсходныеДанные.ИспользоватьПодключаемоеОборудование;
	СуммаСкидки								= ИсходныеДанные.СуммаСкидки;
	СуммаИтого								= ИсходныеДанные.СуммаИтого;

	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	БазовыйШаблон = СтрШаблон("%1%2", НСтр("ru = '%1'"), " ");
	ШаблонДваПараметра = НСтр("ru = '%1 %2'");
	
	ВыводитьИтоги				= Ложь;
	ТекстПриПростое				= НСтр("ru = 'ДОБРО ПОЖАЛОВАТЬ'");
	ТекстВНерабочемСостоянии	= НСтр("ru = 'КАССА НЕ РАБОТАЕТ'");
	
	Строка1			= НСтр("ru = ''");
	Строка2			= НСтр("ru = ''");
	ВыравниватьВправо	= Ложь;
	
	Если Операция = "НачалоРаботы" Тогда
		
		Строка1 = ТекстПриПростое;
		ОборудованиеДисплеиПокупателяКлиент.НачатьОчисткуДисплеяПокупателя(Неопределено, ОбъектВладелец, Неопределено);
		
	ИначеЕсли Операция = "Оплата" Тогда
		
		Строка1 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'ВНЕСЕНО:'"), ДанныеДляОтображения.Оплата);
		Строка2 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'СДАЧА:'"), ДанныеДляОтображения.Сдача);
		
	ИначеЕсли Операция = "ОжиданиеОплаты" Тогда
		
		ДанныеДляОтображения.СуммаИтого	= Формат(СуммаИтого, НСтр("ru = 'ЧДЦ=2;ЧГ=;ЧН=0.00'"));
		ДанныеДляОтображения.СуммаСкидки	= Формат(СуммаСкидки, НСтр("ru = 'ЧДЦ=2;ЧГ='"));
		
		Строка1 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'ИТОГО:'"), ДанныеДляОтображения.СуммаИтого);
		
		Если НЕ ПустаяСтрока(ДанныеДляОтображения.СуммаСкидки) Тогда
			Строка2 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'СКИДКА:'"), ДанныеДляОтображения.СуммаСкидки);
		КонецЕсли;
		
	ИначеЕсли Операция = "ОтменаОплаты" Тогда
		Строка1 = НСтр("ru = 'ОТМЕНА ОПЛАТЫ'");
	ИначеЕсли Операция = "ДобавлениеТовара" ИЛИ Операция = "УдалениеТовара"
		ИЛИ Операция = "ИзменениеКоличества" ИЛИ Операция = "ИзменениеЦены" Тогда
		
		Если Операция = "ДобавлениеТовара" Тогда
			ОборудованиеДисплеиПокупателяКлиент.НачатьОчисткуДисплеяПокупателя(Неопределено, ОбъектВладелец, Неопределено);
		КонецЕсли;
		
		ИнформацияНаименование = ДанныеДляОтображения.ТоварНаименование;
		
		Если ВыводитьИтоги Тогда
			
			
			НачалоСтроки = ?(Операция = "УдалениеТовара", "СТОРНО", "ЦЕНА");
			ЛокализованноеНачалоСтроки = СтрШаблон(НСтр("ru = '%1:'"), НачалоСтроки);
			
			Строка1 = СтрШаблон(БазовыйШаблон, ЛокализованноеНачалоСтроки);
			
			Если НЕ ДанныеДляОтображения.ТоварКоличество = 1
				ИЛИ Операция = "ИзменениеКоличества" ИЛИ Операция = "УдалениеТовара" Тогда
					Строка1 = СтрШаблон(НСтр("ru = '%1%2x'"), Строка1, Строка(ДанныеДляОтображения.ТоварКоличество));
			КонецЕсли;
			
			Строка1 = СтрШаблон(ШаблонДваПараметра, Строка1, ДанныеДляОтображения.ТоварЦена);
			Строка2 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'ИТОГО:'"), ДанныеДляОтображения.СуммаИтого);
			
		Иначе
			
			ВыравниватьВправо	= Истина;
			Строка1				= СтрШаблон(БазовыйШаблон, ДанныеДляОтображения.ТоварНаименование);
			Строка2				= СтрШаблон(БазовыйШаблон, ДанныеДляОтображения.ТоварЦена);
			
			Если Операция = "ИзменениеЦены" 
				И СуммаСкидкиНаТовар <> 0 Тогда
					Строка2	= СтрШаблон(НСтр("ru = 'СКИДКА: %1'"), ДанныеДляОтображения.ТоварСкидка);
			КонецЕсли;
			
			Если Не ПустаяСтрока(Строка1) Тогда
				
				Если НЕ ДанныеДляОтображения.ТоварКоличество = 1
					ИЛИ Операция = "ИзменениеКоличества"
					ИЛИ Операция = "УдалениеТовара" Тогда
							Строка2 = СтрШаблон( НСтр("ru = '%1x%2=%3'"), ДанныеДляОтображения.ТоварКоличество, Строка2,
								ДанныеДляОтображения.ТоварСумма);
					КонецЕсли;
					
				Если Операция = "УдалениеТовара" Тогда
					Строка2 = СтрШаблон( НСтр("ru = '-%1'"), Строка2);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Операция = "Аннулирование" Тогда
		Строка1 = НСтр("ru = 'ЧЕК АННУЛИРОВАН'");
	ИначеЕсли Операция = "ОтложитьЧек" Тогда
		Строка1 = НСтр("ru = 'ЧЕК ОТЛОЖЕН'");
	ИначеЕсли Операция = "ВозвратТовара" Тогда
		Строка1 = НСтр("ru = 'ВОЗВРАТ ТОВАРА'");
	ИначеЕсли Операция = "Сервис" Тогда
		Строка1 = ТекстВНерабочемСостоянии;
	ИначеЕсли Операция = "Коррекция" Тогда
		Строка1 = НСтр("ru = 'КОРРЕКЦИЯ'");
	КонецЕсли;
	
	// Дисплей Posua-vfd не обновляет вторую строку, если на нее передать пустую строку.
	Если ПустаяСтрока(Строка2) Тогда
		Строка2 = СтрШаблон(НСтр("ru = '%1'")," ");
	КонецЕсли;
	
	ТекстКОтправкеНаДисплей = СтрШаблон( НСтр("ru = '%1%2%3'"), Строка1, Символы.ПС, Строка2);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ОбъектВладелец);
		
	ПараметрыОперации = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя(ТекстКОтправкеНаДисплей);
	ОборудованиеДисплеиПокупателяКлиент.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеОЗавершении, ОбъектВладелец,,
		ПараметрыОперации);
		
КонецПроцедуры

#КонецОбласти

#Область СканерШтрихкода

// Завершение обработки данных по коду.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  ИсходныеДанные - Структура - См. РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду.
//  ИмяТабличнойЧасти - Строка - имя табличной части.
//
// Возвращаемое значение:
//  ИдентификаторСтроки - Число, Неопределено.
//
Функция ИдентификаторНайденнойСтроки(Форма, ИсходныеДанные, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	Если ИсходныеДанные.Свойство("АктивироватьСтроку", ИдентификаторСтроки) Тогда
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			
			Форма.ТекущийЭлемент = Форма.Элементы[ИмяТабличнойЧасти];
			Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = ИдентификаторСтроки;
			ЭлементУпаковок = Форма.Элементы.Найти(ИмяТабличнойЧасти + "КоличествоУпаковок");
			
			Если ЭлементУпаковок <> Неопределено Тогда
				Форма.Элементы[ИмяТабличнойЧасти].ТекущийЭлемент = ЭлементУпаковок;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

#Область Обмен_с_ЕГАИС

// Заполняет данные в случае успешной передачи чека в ЕГАИС.
//
// Параметры:
//  Изменения - Массив - массив изменений данных.
//  ПараметрыВыполнения - Структура - параметры выполнения операции.
//
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ТипЗнч(ЭлементДанных) = Тип("Структура") И ЭлементДанных.Свойство("ТекстОшибки") Тогда
			Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать	= НЕ ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки		= ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека", Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

// Заполняет данные в случае передачи отмены чека в ЕГАИС
//
// Параметры:
//  Изменения - Массив - массив изменений данных.
//  ПараметрыВыполнения - Структура - параметры выполнения операции.
//
Процедура ПослеПередачиОтменыЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ТипЗнч(ЭлементДанных) = Тип("Структура") И ЭлементДанных.Свойство("ТекстОшибки") Тогда
			Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает строковое представление суммы в национальной валюте.
//
// Параметры:
//  Сумма - Число
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ФорматСумм(Сумма)
	
	Сумма = ?(Сумма < 0, - Сумма, Сумма);
	ПредставлениеВалюты = ОбщегоНазначенияРМККлиент.ПредставлениеВалюты();
	
	Возврат СтрШаблон("%1 %2", Формат(Сумма, НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧН=0.00'")), ПредставлениеВалюты);
	
КонецФункции

#КонецОбласти
