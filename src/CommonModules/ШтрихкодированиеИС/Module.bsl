#Область ПрограммныйИнтерфейс

// Выполняет инициализацию и заполнение параметров сканирования по переданному контексту.
// Параметры сканирования необходимы для анализа и обработки штрихкодов маркируемой продукции.
//
// Параметры:
//  Контекст - Неопределено, Структура, ВыборкаИзРезультатаЗапроса, ФормаКлиентскогоПриложения - Источник данных для формирования параметров сканирования.
//  ФормаВыбора - ФормаКлиентскогоПриложения - Форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок.
//
// Возвращаемое значение:
//  См. ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования
Функция ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено, ПараметрыРежимаИсправленияОшибок = Неопределено) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования();
	
	ШтрихкодированиеИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	ПараметрыСканирования.ПодсистемаИСМПСуществует = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП");
	
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок);
	ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции, ПараметрыРежимаИсправленияОшибок);
	ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

// Выполняет обработку штрихкода и возвращает результат этой обработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ВходящиеДанные - Структура - Исходные данные, включающие только значение штрихкода и количество,
//                               либо уже полноценные заполненные данные штрихкода, которые нуждаются в обработке.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
// Возвращаемое значение:
//  См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьВводШтрихкода(Форма, ВходящиеДанные, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	ДанныеШтрихкода = ОбщегоНазначения.СкопироватьРекурсивно(ВходящиеДанные);
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	ШтрихкодированиеИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода, ТипЗнч(ВходящиеДанные) = Тип("Структура"));
	
	Если ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода)
		И (ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
		
		Возврат РезультатОбработкиШтрихкодаМаркируемойПродукцииПослеУточнения(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	ДанныеШтрихкодаСписок = Новый Массив;
	ДанныеШтрихкодаСписок.Добавить(ДанныеШтрихкода);
	
	ДанныеПоШтрихкодам    = ИнициализацияДанныхПоШтрихкодам();
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = Ложь;
	ДанныеПоШтрихкодам.ЭтоОбработкаВводаШтрихкода = Истина;
	
	ЗаписыватьЛогиПроверкиКодовМаркировки = ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП;
	
	Если ЗаписыватьЛогиПроверкиКодовМаркировки Тогда
		
		МодульЛогированиеЗапросовИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
		МодульЛогированиеЗапросовИСМП.НастроитьДанныеПоШтрихкодам(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			Истина);
		
	КонецЕсли;
	
	// Логирование исходного значения штрихкода со сканера
	ПараметрыЛогированияЗапросов = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
	
	ДанныеЗаписи          = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.Штрихкод = ДанныеШтрихкодаСписок;
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования);
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	РезультатыПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Если РезультатыПроверок.Количество() > 0 Тогда
		
		Результат = РезультатыПроверок[ДанныеКодовМаркировки[0].Штрихкод];
		Если Результат.ОткрытьФормуВводаКодаМаркировки Тогда
			ОчиститьОтложенныеКодыМаркировки(ПараметрыСканирования.КэшМаркируемойПродукции)
		Иначе
			ОчиститьКэшМаркируемойПродукции(ПараметрыСканирования.КэшМаркируемойПродукции);
		КонецЕсли;
		
		Если ЗаписыватьЛогиПроверкиКодовМаркировки Тогда
			
			МодульЛогированиеЗапросовИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
			МодульЛогированиеЗапросовИСМП.НастроитьДанныеПоШтрихкодам(
				ДанныеПоШтрихкодам,
				ПараметрыСканирования,
				Ложь);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	
	// В режиме одиночного сканирования всегда должен быть только 1 результат обработки
	// иначе форма документа не сможет корректно обработать данные.
	ПроверитьСоответствиеДетализацииРежимуСканирования(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ЕстьОшибки = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = (ТипЗнч(Форма) = Тип("УникальныйИдентификатор"));
	
	РезультатыОбработок = ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, Форма, РезультатыПроверок);
	
	// Логирование результатов разбора штрихкода
	ДанныеЗаписи                           = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.РезультатРазбораШтрихКода = РезультатыОбработок;
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	Если ЗаписыватьЛогиПроверкиКодовМаркировки Тогда
		
		МодульЛогированиеЗапросовИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
		МодульЛогированиеЗапросовИСМП.НастроитьДанныеПоШтрихкодам(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			Ложь);
	
		Для Каждого СтрокаТаблицы Из РезультатыОбработок Цикл
			
			Если Не ТипЗнч(СтрокаТаблицы.Значение.ДанныеШтрихкода) = Тип("Структура")
				Или Не СтрокаТаблицы.Значение.ДанныеШтрихкода.Свойство("АдресЛогаЗапросов") Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.Значение.ДанныеШтрихкода.АдресЛогаЗапросов = ДанныеПоШтрихкодам.ЛогированиеЗапросов.АдресЛогаЗапросов;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатыОбработок[ДанныеКодовМаркировки[0].Штрихкод];
	
КонецФункции

// Заполняет таблицу "ДанныеКодовМаркировки" данными разбора кода и сведениями по номенклатуре на основании штрихкода EAN,
// входящего в состав кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияДанныхПоШтрихкодам.
//  СписокДанныхШтрихкода - Массив Из Структура.
//  ПараметрыСканирования - См. ПараметрыСканирования
//  КешДанныхРазбора - Неопределено, Соответствие - Известный кешированный результат разбора кодов маркировки
Процедура ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, СписокДанныхШтрихкода, ПараметрыСканирования, КешДанныхРазбора = Неопределено) Экспорт
	
	ЗаполнитьДанныеКодовМаркировкиВходящимиДанными(ДанныеПоШтрихкодам, СписокДанныхШтрихкода, ПараметрыСканирования);
	НормализоватьИРазобратьНаСоставляющиеКодыМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, КешДанныхРазбора);
	ЗаполнитьДанныеКодовМаркировкиПоДаннымУПД(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеRFID(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьСведенияПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		Или ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.УстановитьПризнакОтказаОтПроверкиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	МассивСтрокКЗаполнению = Новый Массив;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("ВидПродукции",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И (Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
				Или СтрокаДанных.МаркируемаяПродукция = Неопределено
				// Поддержка переходного периода: АТП, эмиттированные как табак
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак)
			Или (ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
				И СтрокаДанных.МаркируемаяПродукция = Неопределено) Тогда
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаДанных.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаДанных.Характеристика;
			МассивСтрокКЗаполнению.Добавить(СтрокаДанных);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И СтрокаДанных.ЭтоКодВводаОстатков
			И СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 1 Тогда
			СтрокаДанных.ВидПродукции = СтрокаДанных.ВидыПродукцииКодаМаркировки[0];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеПоВидуПродукции.Номенклатура         КАК Номенклатура,
	|	ДанныеПоВидуПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
	|	ДанныеПоВидуПродукции.ВидПродукции         КАК ВидПродукции,
	|	&ТребуетВзвешивания                        КАК ТребуетВзвешивания,
	|	&ПроизвольнаяЕдиницаУчета                  КАК ПроизвольнаяЕдиницаУчета
	|ИЗ
	|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|";
	ИнтеграцияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(Запрос.Текст, "ОписаниеИС", "ДанныеПоВидуПродукции.Номенклатура");
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаНоменклатуры);
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	ТаблицаНоменклатуры.Индексы.Добавить("Номенклатура");
	
	ИдентификаторыОшибок = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "ПроверятьСтруктуруКодовМаркировки") Тогда
		ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	Иначе
		ПроверятьСтруктуруКодовМаркировки = Ложь;
	КонецЕсли;
	
	ОбщиеМодули = Неопределено;
	НастройкиРазбора = Неопределено;
	ДанныеКодовМаркировкиДляПерезаполнения = Новый Массив;
	
	Для Каждого СтрокаДанных Из МассивСтрокКЗаполнению Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаДанных.Номенклатура);
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки <> Неопределено Тогда
			
			НайденнаяСтрока = НайденныеСтроки[0];
			
			СтрокаДанных.ВидПродукции             = НайденнаяСтрока.ВидПродукции;
			СтрокаДанных.МаркируемаяПродукция     = НайденнаяСтрока.МаркируемаяПродукция;
			СтрокаДанных.ТребуетВзвешивания       = НайденнаяСтрока.ТребуетВзвешивания;
			СтрокаДанных.ПроизвольнаяЕдиницаУчета = НайденнаяСтрока.ПроизвольнаяЕдиницаУчета;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.ВидПродукции = СтрокаДанных.ВидПродукции;
			КонецЕсли;
			
			Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
				И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетНесколькимШаблонам Тогда
				
				РезультатыРазборы = Новый Массив;
				Для Каждого РезультатРазбора Из СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора Цикл
					
					Если РезультатРазбора.ВидыПродукции.Найти(СтрокаДанных.ВидПродукции) <> Неопределено Тогда
						РезультатыРазборы.Добавить(РезультатРазбора);
					КонецЕсли;
					
				КонецЦикла;
				
				Если РезультатыРазборы.Количество() = 1 Тогда
					
					Если НастройкиРазбора = Неопределено Тогда
						
						ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
						ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация = Истина;
						Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
							ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками =
								(ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
						КонецЕсли;
						
						НастройкиРазбора = Новый Структура;
						НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
						НастройкиРазбора.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки());
						НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
						
						ОбщиеМодули = ОбщиеМодулиПодсистем();
						
					КонецЕсли;
					
					ПримечаниеКРазборуШтрихкода = Неопределено;
					ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
						СтрокаДанных.Штрихкод, НастройкиРазбора.Кеш, СтрокаДанных.ВидПродукции, ПримечаниеКРазборуШтрихкода,
						НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
					
					Если ДанныеРазбора <> Неопределено Тогда
						
						СтрокаДанных.ДанныеРазбора = ДанныеРазбора;
						СтрокаДанных.ПримечаниеКРазборуШтрихкода = ПримечаниеКРазборуШтрихкода;
						
						ДанныеКодовМаркировкиДляПерезаполнения.Добавить(СтрокаДанных);
						
						ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанных, ОбщиеМодули);
						
						// Восстанавливать структуру кода маркировки
						Если Не ПроверятьСтруктуруКодовМаркировки
							И ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
							
							МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
							МодульШтрихкодированиеИСМП.ПроверитьПолныйКодМаркировкиПоДаннымРазбора(
								СтрокаДанных.ДанныеРазбора, СтрокаДанных, ПараметрыСканирования);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеКодовМаркировкиДляПерезаполнения.Количество() Тогда
		ЗаполнитьСведенияПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировкиДляПерезаполнения);
	КонецЕсли;
	
КонецПроцедуры

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары». 
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
//  Упаковки              - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Массив упаковок, по которому формируются вложенные штрихкоды.
//                        - Массив из см. ШтрихкодированиеИСМП.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам -
//	                         Штрикходы упаковок документа, с дополнительным данными частичного выбытия.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЗаполнитьСведенияПоШтрихкодамEAN - Булево - Заполнять данные по штрихкодам EAN.
//  СортироватьДанные - Булево - Выполнить сортировку данных
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив Из Строка - Массив штрихкодов, которые необходимо сопоставить с номенклатурой.
//   * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции.
//   * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке:
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//   * ЕстьОшибки - Булево - если были ошибки при получении данных из сервиса.
//   * ТребуетсяОбновлениеКлючаСессии - Булево - если были ошибки при получении данных из сервиса.
//   * ТекстОшибки - Строка - ошибка при получении данных из сервиса.
Функция ВложенныеШтрихкодыУпаковок(Упаковки, ПараметрыСканирования = Неопределено, ЗаполнитьСведенияПоШтрихкодамEAN = Ложь, СортироватьДанные = Ложь) Экспорт
	
	Если Упаковки.Количество() = 0 Тогда
		
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		Возврат ВложенныеШтрихкоды;
		
	КонецЕсли;
	
	МассивУпаковок      = Упаковки;
	ПараметрыДополнения = Неопределено;
	
	Если ТипЗнч(Упаковки[0]) <> Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		
		ПараметрыДополнения = ПараметрыДополненияВложенныхШтрихкодовУпаковок();
		МассивУпаковок = Новый Массив;
		Для Каждого ЭлементМассиваУпаковок Из Упаковки Цикл
			МассивУпаковок.Добавить(ЭлементМассиваУпаковок.ШтрихкодУпаковки);
			
			//@skip-check query-in-loop
			Если ТребуетсяЧастичноеВыбытие(ПараметрыСканирования)
				И ЗначениеЗаполнено(ЭлементМассиваУпаковок.ЧастичноеВыбытиеКоличество)
				И ЗначениеЗаполнено(ЭлементМассиваУпаковок.ЧастичноеВыбытиеВариантУчета) Тогда
				
				ЭлементЧастичногоВыбытия = НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие();
				ЗаполнитьЗначенияСвойств(ЭлементЧастичногоВыбытия, ЭлементМассиваУпаковок);
				ЭлементЧастичногоВыбытия.Количество = ЭлементМассиваУпаковок.ЧастичноеВыбытиеКоличество;
				
				ПараметрыДополнения.ДанныеЧастичногоВыбытия.Вставить(
					ЭлементМассиваУпаковок.ШтрихкодУпаковки,
					ЭлементЧастичногоВыбытия);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	ВложенныеШтрихкоды = ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ПараметрыСканирования);
	ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
	
	Если ЗаполнитьСведенияПоШтрихкодамEAN Тогда
		ДобавленныеСтроки = Новый Массив;
	Иначе
		ДобавленныеСтроки = Неопределено;
	КонецЕсли;
	
	ПараметрыДополненияТаблицыДанныеКодовМаркировки = ПараметрыДополненияТаблицыДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ВложенныеШтрихкоды.ДеревоУпаковок);
	ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;
	
	ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам, ВложенныеШтрихкоды.ДеревоУпаковок, ДобавленныеСтроки, ПараметрыСканирования,
		ПараметрыДополненияТаблицыДанныеКодовМаркировки);
	
	ДопустимаТабачнаяПродукция = ДопустимаТабачнаяПродукция(ПараметрыСканирования);
	ДопустимаПродукцияИСМП     = ДопустимаПродукцияИСМП(ПараметрыСканирования);
	
	Если ДопустимаТабачнаяПродукция Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	НормализоватьДанныеВложенныхШтрихкодов(
		ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	Если ЗаполнитьСведенияПоШтрихкодамEAN Тогда
		ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДобавленныеСтроки);
	КонецЕсли;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		Или ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			ПараметрыДополнения);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамСпецификой(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			ПараметрыДополнения);
		
	КонецЕсли;
	
	Если СортироватьДанные Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВложенныеШтрихкоды, "ДеревоУпаковок") Тогда
			ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Сортировать("Штрихкод", Истина);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВложенныеШтрихкоды, "МаркированныеТовары") Тогда
			ВложенныеШтрихкоды.МаркированныеТовары.Сортировать("Штрихкод");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Получает из справочника «Штрихкоды упаковок» данные по массиву значений штрихкодов.
//
// Параметры:
// 	ЗначенияШтрихкодов - Массив из Строка,
// 	Массив из СтрокаТаблицыЗначений: См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам - Массив штрихкодов.
//  ТипыУпаковок - Массив Из ПеречислениеСсылка.ТипыУпаковок - Коллекция типов упаковок, по которым будет 
//       установлено условие для формирования запроса.
//  ПроверкаНаGS1 - Булево - Добавляет в поиск значение штрихкода без скобок, только для упаковок GS1.
//  УчитыватьОСУ  - Булево - Признак необходимости получения информации по штрихкодам ОСУ
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Штрихкод - Строка - Штрихкод.
//   * Ссылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
//   * ЗначениеШтрихкода - Строка - Значение штрихкода из элемента справочника.
//   * ДатаУпаковки - Дата - Дата формирования упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * ХешСумма - Строка - Хэш сумма упаковки.
Функция ШтрихкодыУпаковок(ЗначенияШтрихкодов, ТипыУпаковок = Неопределено, ПроверкаНаGS1 = Ложь, УчитыватьОСУ = Истина) Экспорт
	
	ШтрихкодыУпаковок = Новый ТаблицаЗначений;
	// Исходные данные
	ШтрихкодыУпаковок.Колонки.Добавить("Штрихкод",             Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	// Данные из справочника ШтрихкодыУпаковокТоваров
	ШтрихкодыУпаковок.Колонки.Добавить("Ссылка",               Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ШтрихкодыУпаковок.Колонки.Добавить("ЗначениеШтрихкода",    Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ШтрихкодыУпаковок.Колонки.Добавить("ТипШтрихкода",         Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ШтрихкодыУпаковок.Колонки.Добавить("ТипУпаковки",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ШтрихкодыУпаковок.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ШтрихкодыУпаковок.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ШтрихкодыУпаковок.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ШтрихкодыУпаковок.Колонки.Добавить("ХешСумма",             Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ШтрихкодыУпаковок.Колонки.Добавить("ХешСуммаНормализации", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ШтрихкодыУпаковок.Колонки.Добавить("ДатаУпаковки",         Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ШтрихкодыУпаковок.Колонки.Добавить("ШтрихкодСовпадает",    Новый ОписаниеТипов("Булево"));
	ШтрихкодыУпаковок.Колонки.Добавить("Количество",                        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ШтрихкодыУпаковок.Колонки.Добавить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	Если ЗначенияШтрихкодов.Количество() = 0 Тогда
		Возврат ШтрихкодыУпаковок;
	КонецЕсли;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("Штрихкод",              Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаШтрихкодов.Колонки.Добавить("ХэшШтрихкода",          Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаШтрихкодов.Колонки.Добавить("ХэшИсходногоШтрихкода", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаШтрихкодов.Колонки.Добавить("ЭтоДобавленный",        Новый ОписаниеТипов("Булево"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИсходныйШтрихкод",      Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаШтрихкодов.Колонки.Добавить("ЭтоОСУ",                Новый ОписаниеТипов("Булево"));
	ТаблицаШтрихкодов.Колонки.Добавить("ХешСумма",              Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	
	ГруппировкаОбъемноСортовогоУчетаПоGTIN = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ГруппировкаОбъемноСортовогоУчетаПоGTIN = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN");
	КонецЕсли;
	
	Для Каждого ЭлементЗначения Из ЗначенияШтрихкодов Цикл
		
		Штрихкод             = ЭлементЗначения;
		ХешСуммаНормализации = Неопределено;
		ЭтоОСУ               = Ложь;
		
		Если ТипЗнч(ЭлементЗначения) = Тип("СтрокаТаблицыЗначений")
			Или ТипЗнч(ЭлементЗначения) = Тип("СтрокаДереваЗначений")
			Или ТипЗнч(ЭлементЗначения) = Тип("Структура") Тогда
			
			Штрихкод             = ЭлементЗначения.Штрихкод;
			ХешСуммаНормализации = ЭлементЗначения.ХешСуммаНормализации;
			
			Если ЭлементЗначения.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				ЭтоОСУ = Истина;
			ИначеЕсли ГруппировкаОбъемноСортовогоУчетаПоGTIN <> Неопределено
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементЗначения, "ТипУпаковки")
					И ЭлементЗначения.ТипУпаковки = ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
				ЭтоОСУ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Не УчитыватьОСУ И ЭтоОСУ)
			Или (УчитыватьОСУ И ЭтоОСУ И Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементЗначения, "ХешСумма")) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод              = Штрихкод;
		НоваяСтрока.ХэшШтрихкода          = ИнтеграцияИС.ХешированиеДанныхSHA256(Штрихкод);
		НоваяСтрока.ИсходныйШтрихкод      = НоваяСтрока.Штрихкод;
		НоваяСтрока.ХэшИсходногоШтрихкода = НоваяСтрока.ХэшШтрихкода;
		Если ЭтоОСУ Тогда
			НоваяСтрока.ЭтоОСУ   = ЭтоОСУ;
			НоваяСтрока.ХешСумма = ЭлементЗначения.ХешСумма;
		КонецЕсли;
		
		Если ПроверкаНаGS1 И СтрНачинаетсяС(Штрихкод, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
			Если ПараметрыШтрихкода.Результат = Неопределено
				Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеШтрихкодаБезСкобок = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ПараметрыШтрихкода.Результат, Ложь, "");
			Если Не ЗначениеЗаполнено(ЗначениеШтрихкодаБезСкобок)
				Или ЗначениеШтрихкодаБезСкобок = Штрихкод Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока2 = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока2.Штрихкод     = ЗначениеШтрихкодаБезСкобок;
			НоваяСтрока2.ХэшШтрихкода = ИнтеграцияИС.ХешированиеДанныхSHA256(ЗначениеШтрихкодаБезСкобок);
			НоваяСтрока2.ЭтоДобавленный        = Истина;
			НоваяСтрока2.ИсходныйШтрихкод      = НоваяСтрока.ИсходныйШтрихкод;
			НоваяСтрока2.ХэшИсходногоШтрихкода = НоваяСтрока.ХэшИсходногоШтрихкода;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ХешСуммаНормализации) Тогда
			НоваяСтрока2 = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока2.Штрихкод              = Штрихкод;
			НоваяСтрока2.ХэшШтрихкода          = ХешСуммаНормализации;
			НоваяСтрока2.ЭтоДобавленный        = Истина;
			НоваяСтрока2.ИсходныйШтрихкод      = НоваяСтрока.ИсходныйШтрихкод;
			НоваяСтрока2.ХэшИсходногоШтрихкода = НоваяСтрока.ХэшИсходногоШтрихкода;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаШтрихкодов.Штрихкод              КАК Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода          КАК ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный        КАК ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод      КАК ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода КАК ХэшИсходногоШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоОСУ                КАК ЭтоОСУ,
	|	ТаблицаШтрихкодов.ХешСумма              КАК ХешСумма
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХэшШтрихкода,
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод                 КАК Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода             КАК ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный           КАК ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод         КАК ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода    КАК ХэшИсходногоШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка            КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Количество                        КАК Количество,
	|	ШтрихкодыУпаковокТоваров.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|	ШтрихкодыУпаковокТоваров.ХешСумма             КАК ХешСумма,
	|	ШтрихкодыУпаковокТоваров.ХешСуммаНормализации КАК ХешСуммаНормализации
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаШтрихкодов.ХэшШтрихкода = ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И ВЫБОР
	|		КОГДА ТаблицаШтрихкодов.ЭтоОСУ ТОГДА
	|			ТаблицаШтрихкодов.ХешСумма = ШтрихкодыУпаковокТоваров.ХешСумма
	|		ИНАЧЕ
	|			ИСТИНА
	|		КОНЕЦ
	|	И 1 = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия,
	|	ШтрихкодыУпаковокТоваров.Количество,
	|	ШтрихкодыУпаковокТоваров.КоличествоПотребительскихУпаковок,
	|	ШтрихкодыУпаковокТоваров.ХешСумма,
	|	ШтрихкодыУпаковокТоваров.ХешСуммаНормализации
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаШтрихкодов.ХэшШтрихкода = ШтрихкодыУпаковокТоваров.ХешСуммаНормализации
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И 1 = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода,
	|	ТаблицаШтрихкодов.ЭтоДобавленный,
	|	ТаблицаШтрихкодов.ИсходныйШтрихкод,
	|	ТаблицаШтрихкодов.ХэшИсходногоШтрихкода,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия,
	|	ШтрихкодыУпаковокТоваров.Количество,
	|	ШтрихкодыУпаковокТоваров.КоличествоПотребительскихУпаковок,
	|	ШтрихкодыУпаковокТоваров.ХешСумма,
	|	ШтрихкодыУпаковокТоваров.ХешСуммаНормализации
	|ИЗ
	|	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаШтрихкодов.Штрихкод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|		И ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода = """"
	|		И ШтрихкодыУпаковокТоваров.ХешСуммаНормализации = """"
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И 1 = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода КАК ХэшШтрихкода,
	|	МАКСИМУМ(ДанныеШтрихкодовУпаковок.ДатаУпаковки) КАК ДатаУпаковки
	|ПОМЕСТИТЬ МаксимальныеДаты
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШтрихкодовУпаковок.Штрихкод              КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ЭтоДобавленный        КАК ЭтоДобавленный,
	|	ДанныеШтрихкодовУпаковок.ИсходныйШтрихкод      КАК ИсходныйШтрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшИсходногоШтрихкода КАК ХэшИсходногоШтрихкода,
	|	ДанныеШтрихкодовУпаковок.Ссылка                КАК Ссылка,
	|	ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода     КАК ЗначениеШтрихкода,
	|	ДанныеШтрихкодовУпаковок.ХешСумма              КАК ХешСумма,
	|	ДанныеШтрихкодовУпаковок.ХешСуммаНормализации  КАК ХешСуммаНормализации,
	|	ДанныеШтрихкодовУпаковок.ДатаУпаковки          КАК ДатаУпаковки,
	|	ДанныеШтрихкодовУпаковок.ТипШтрихкода          КАК ТипШтрихкода,
	|	ДанныеШтрихкодовУпаковок.ТипУпаковки           КАК ТипУпаковки,
	|	ДанныеШтрихкодовУпаковок.Номенклатура          КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика        КАК Характеристика,
	|	ДанныеШтрихкодовУпаковок.Серия                 КАК Серия,
	|	ДанныеШтрихкодовУпаковок.Количество                        КАК Количество,
	|	ДанныеШтрихкодовУпаковок.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|	ДанныеШтрихкодовУпаковок.Штрихкод = ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода КАК ШтрихкодСовпадает
	|ПОМЕСТИТЬ ДанныеДляАнализа
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДаты КАК МаксимальныеДаты
	|		ПО ДанныеШтрихкодовУпаковок.Штрихкод = МаксимальныеДаты.Штрихкод
	|			И ДанныеШтрихкодовУпаковок.ДатаУпаковки = МаксимальныеДаты.ДатаУпаковки
	|			И ДанныеШтрихкодовУпаковок.ХэшШтрихкода = МаксимальныеДаты.ХэшШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляАнализа.Штрихкод              КАК Штрихкод,
	|	ДанныеДляАнализа.ЭтоДобавленный        КАК ЭтоДобавленный,
	|	ДанныеДляАнализа.ИсходныйШтрихкод      КАК ИсходныйШтрихкод,
	|	ДанныеДляАнализа.ХэшИсходногоШтрихкода КАК ХэшИсходногоШтрихкода,
	|	ДанныеДляАнализа.Ссылка                КАК Ссылка,
	|	ДанныеДляАнализа.ЗначениеШтрихкода     КАК ЗначениеШтрихкода,
	|	ДанныеДляАнализа.ХешСумма              КАК ХешСумма,
	|	ДанныеДляАнализа.ХешСуммаНормализации  КАК ХешСуммаНормализации,
	|	ДанныеДляАнализа.ДатаУпаковки          КАК ДатаУпаковки,
	|	ДанныеДляАнализа.ТипШтрихкода          КАК ТипШтрихкода,
	|	ДанныеДляАнализа.ТипУпаковки           КАК ТипУпаковки,
	|	ДанныеДляАнализа.Номенклатура          КАК Номенклатура,
	|	ДанныеДляАнализа.Характеристика        КАК Характеристика,
	|	ДанныеДляАнализа.Серия                 КАК Серия,
	|	ВЫБОР
	|		КОГДА ДанныеДляАнализа.Количество = 0 И ДанныеДляАнализа.КоличествоПотребительскихУпаковок = 0
	|			ТОГДА 1
	|			ИНАЧЕ ДанныеДляАнализа.Количество
	|	КОНЕЦ                                  КАК Количество,
	|	ДанныеДляАнализа.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|	ДанныеДляАнализа.ШтрихкодСовпадает     КАК ШтрихкодСовпадает
	|ИЗ
	|	ДанныеДляАнализа КАК ДанныеДляАнализа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоДобавленный,
	|	ШтрихкодСовпадает УБЫВ
	|ИТОГИ ПО
	|	ХэшИсходногоШтрихкода";
	
	Если ЗначениеЗаполнено(ТипыУпаковок) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 = 1", "ШтрихкодыУпаковокТоваров.ТипУпаковки В(&ТипыУпаковок)");
		Запрос.УстановитьПараметр("ТипыУпаковок", ТипыУпаковок);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ШтрихкодыУпаковок;
	КонецЕсли;
	
	ВыборкаИсходныйШтрихкод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИсходныйШтрихкод.Следующий() Цикл
		ВыборкаДетальныхЗаписей = ВыборкаИсходныйШтрихкод.Выбрать();
		ВыборкаДетальныхЗаписей.Следующий();
		
		ДанныеУпаковки = ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеУпаковки, ВыборкаДетальныхЗаписей);
		ДанныеУпаковки.Штрихкод          = ВыборкаДетальныхЗаписей.ИсходныйШтрихкод;
		ДанныеУпаковки.ШтрихкодСовпадает = (ДанныеУпаковки.Штрихкод = ДанныеУпаковки.ЗначениеШтрихкода);
	КонецЦикла;
	
	ШтрихкодыУпаковок.Индексы.Добавить("Штрихкод, ХешСумма");
	ШтрихкодыУпаковок.Индексы.Добавить("Штрихкод, ХешСуммаНормализации");
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Производит анализ дерева упаковок на продукцию.
//
// Параметры:
//  ДеревоМаркируемойПродукции - ДеревоЗначений - Иерархия хранения маркируемой продукции с упаковками.
//  ЗначенияШтрихкодов - Неопределено, Массив Из СтрокаДереваЗначений - Массив, который будет дополнен штрихкодами, которые в наличии.
//  НаличиеКолонок - Структура, Неопределено - служебная структура для проверки по колонке "НедопустимыйКодМаркировки"
// Возвращаемое значение:
//  Массив Из СтрокаДереваЗначений - Штрихкоды, которые имеют статус "В Наличии" и содержатся в дереве упаковок.
Функция ЗначенияШтрихкодовИзДереваМаркируемойПродукции(ДеревоМаркируемойПродукции, ЗначенияШтрихкодов = Неопределено, НаличиеКолонок = Неопределено) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Если НаличиеКолонок = Неопределено Тогда
		НаличиеКолонок = Новый Структура;
		НаличиеКолонок.Вставить("НедопустимыйКодМаркировки", ДеревоМаркируемойПродукции.Колонки.Найти("НедопустимыйКодМаркировки") <> Неопределено);
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркируемойПродукции.Строки Цикл
		
		ЗначенияШтрихкодовИзДереваМаркируемойПродукции(СтрокаДерева, Результат, НаличиеКолонок);
		
		Если Не (ПустаяСтрока(СтрокаДерева.Штрихкод)
				Или (НаличиеКолонок.НедопустимыйКодМаркировки И СтрокаДерева.НедопустимыйКодМаркировки)) Тогда
			Результат.Добавить(СтрокаДерева);
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
			СтрокаДерева.Штрихкод = СтрШаблон(
				"(02)%1(37)%2",
				СтрокаДерева.GTIN,
				Формат(СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок, "ЧГ=0;"));
			Результат.Добавить(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит анализ дерева упаковок на продукцию с недопустимым статусом кодов маркировки
//
// Параметры:
//  ДеревоМаркируемойПродукции - ДеревоЗначений - Иерархия хранения маркируемой продукции с упаковками.
//  ЗначенияШтрихкодов - Соответствие Из Строка - Соответствие, которое будет дополнен штрихкодами, имеющими недопустимый статус.
// Возвращаемое значение:
//  Соответствие Из Строка - Штрихкоды, которые имеют недопустимый статус и содержатся в дереве упаковок.
Функция ЗначенияНедопустимыхШтрихкодовИзДереваМаркируемойПродукции(ДеревоМаркируемойПродукции, ЗначенияШтрихкодов = Неопределено) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Соответствие;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркируемойПродукции.Строки Цикл
		
		ЗначенияНедопустимыхШтрихкодовИзДереваМаркируемойПродукции(СтрокаДерева, Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.Штрихкод) И СтрокаДерева.НедопустимыйКодМаркировки Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "НормализованныйШтрихкод") Тогда
				Результат.Вставить(СтрокаДерева.НормализованныйШтрихкод, СтрокаДерева);
			Иначе
				Результат.Вставить(СтрокаДерева.Штрихкод, СтрокаДерева);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары» по ссылке на документ.
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому необходимо осуществить
//  отбор формирования вложенных штрихкодов.
//  Детализация - Неопределено, ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Детализация,
//  с которой необходимо сформировать вложенные штрихкоды.
//  ОтключитьИспользованиеСервиса - Булево - Истина, если не требуется образение в сервис.
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив Из Строка - Массив штрихкодов, которые необходимо сопоставить с номенклатурой,
//   * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции,
//   * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке,
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ВидПродукции = Неопределено, Детализация = Неопределено, ОтключитьИспользованиеСервиса = Ложь) Экспорт
	
	ДанныеШапки = ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
	ПараметрыСканирования = ПараметрыСканирования(ДанныеШапки,,ВидПродукции);
	
	ВложенныеШтрихкоды = Неопределено;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		ВложенныеШтрихкоды = МодульШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
	ИначеЕсли ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		Если ОтключитьИспользованиеСервиса Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
		КонецЕсли;
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		ВложенныеШтрихкоды = МодульШтрихкодированиеМОТП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ДокументСсылка, ПараметрыСканирования);
	ИначеЕсли ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		Если ОтключитьИспользованиеСервиса Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
		КонецЕсли;
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМП");
		ВложенныеШтрихкоды = МодульШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(
			ДокументСсылка, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Обновляет информацию, находяющуюся во временном хранилище, адрес которого, как правило,
//   хранится в реквизите формы «КэшМаркируемойПродукции».
// Выполняемые действия:
//   * Формирование данных кеша маркируемой продукции (если оно не производилось ранее).
//   * Удаление из кеша неактуальных данных (после удаления штрихкодов упаковок).
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обновить кэш маркируемой продукции.
//  ПараметрыСканирования - Структура, Неопределено - см. ПараметрыСканирования.
Процедура ОбновитьКэшМаркируемойПродукции(Форма, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда
		ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
		Возврат;
	КонецЕсли;
	
	УпаковкиОбъекта = УпаковкиОбъекта(Форма, ПараметрыСканирования);
	ЗначенияВложенныхШтрихкодовМарок = ЗначенияВложенныхШтрихкодовУпаковок(УпаковкиОбъекта);
	
	НовыйОбработанныеКодыМаркировки = Новый Соответствие;
	Для Каждого Штрихкод Из ЗначенияВложенныхШтрихкодовМарок Цикл
		НовыйОбработанныеКодыМаркировки.Вставить(Штрихкод, ОбработанныеКодыМаркировки.Получить(Штрихкод));
	КонецЦикла;
	
	КэшМаркируемойПродукции.ОбработанныеКодыМаркировки = НовыйОбработанныеКодыМаркировки;
	ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
	
КонецПроцедуры

// Формирует кэш маркируемой продукции по данными формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо сформировать кэш маркируемой продукции.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура СформироватьКэшМаркируемойПродукции(Форма, ПараметрыСканирования = Неопределено) Экспорт
	
	ПараметрыСканированияИнициализированыЛокально = Ложь;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
		ПараметрыСканированияИнициализированыЛокально = Истина;
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	КэшМаркируемойПродукции    = ИнициализацияКэшаМаркируемойПродукции();
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	КоллекцияВсехШтрихкодовДерева(ШтрихкодыУпаковок.ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	Иначе
		
		КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, Форма.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции") Тогда
			Форма.КэшМаркируемойПродукции = КэшМаркируемойПродукции;
		КонецЕсли;
		
		Если Не ПараметрыСканированияИнициализированыЛокально Тогда
			ПараметрыСканирования.КэшМаркируемойПродукции = КэшМаркируемойПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает штрихкод GS1 в формате со скобками к передаче в компоненту печати штрихкодов.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод
//  ТипКода - Число - Тип кода (см. документацию по компоненте печати штрихкодов)
//  ТипВходныхДанных - Число - Тип входных данных [Входящий / Исходящий]
// Возвращаемое значение:
//  Строка - Штрихкод для передачи в компоненту печати
Функция КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, ТипКода, ТипВходныхДанных = Неопределено) Экспорт
	
	ЗначениеШтрихкодаДляКомпоненты = СокрЛП(ЗначениеШтрихкода);
	
	Если (ТипКода = 2 Или ТипКода = 17 Или ТипКода = 24) Тогда
		ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкодаДляКомпоненты);
		Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
			Если ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
				Или ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
				Если ТипВходныхДанных = Неопределено Тогда
					ЗначениеШтрихкодаДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
						ЧтениеШтрихкода.Результат, Истина);
				Иначе
					ЗначениеШтрихкодаДляКомпоненты = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(
						ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
							ЧтениеШтрихкода.Результат, Ложь,
							ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины()));
					ТипВходныхДанных = 1;
				КонецЕсли;
			ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC
				И ТипВходныхДанных <> Неопределено Тогда
				ЗначениеШтрихкодаДляКомпоненты = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(
					ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Ложь, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеШтрихкодаДляКомпоненты;
	
КонецФункции

// Структура, описывающая результат обработки штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеШтрихкода - Неопределено, Структура - Результат анализа штрихкода, все данные, которые удалось по нему собрать.
// Возвращаемое значение:
//  Структура - Описание:
//   * ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции ИС.
//   * ИзмененныеСтроки - Массив Из СтрокаТабличнойЧасти - Строки документа, которые были изменены в процессе обработки штрихкодов.
//   * ДобавленныеСтроки - Массив Из СтрокаТабличнойЧасти - Строки документа, которые были добавлены в процессе обработки штрихкодов.
//   * ОшибкаВидаПродукции - Булево - Признак, указывающий, что штрихкод относится к виду продукции, который не поддерживается.
//   * ДополнительныеПараметры - Неопределено -
//   * ЕстьОшибкиВДеревеУпаковок - Булево - Признак, указывающий, что где-то в дереве упаковок присутствует ошибка.
//   * АдресДереваУпаковок - Строка - Адрес временного хранилища, где хранится дерево упаковок.
//   * ТекстОшибки - Строка - Текст ошибки, на которую стоит обратить внимание.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ЕстьОшибки - Булево - Признак, указывающий, что есть ошибки в данных штрихкода.
//   * ШтрихкодыПродукцииДляСопоставления - Массив Из Строка - Массив неизвестных штрихкодов EAN, которые необходимо сопоставить перед обработкой.
//   * ТребуетсяСопоставлениеНоменклатуры - Булево - Признак, указывающий на то, что перед обработкой необходимо сопоставить номенклатуру штрихкодам EAN.
//   * ИсходныеДанные - Произвольный - Данные, которые поступили на вход для обработки.
//   * ТребуетсяОбработкаШтрихкода - Булево - Признак, указывающий, что данные штрихкода не удалось обработать по стандартному алгоритму.
//   * ТребуетсяВыборНоменклатуры - Булево - Признак, указывающий на необходимость выбора номенклатуры.
//   * ПараметрыВыбораНоменклатуры - Структура - Параметры, участвующие в отборе при выборе номенклатуры в диалоговом окне.
//   * ДанныеШтрихкода - Структура -
Функция ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования = Неопределено, ДанныеШтрихкода = Неопределено) Экспорт
	
	ВидыПродукции = Неопределено;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено И ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		ВидыПродукции = Новый Массив;
		ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Новый Структура;
	
	// Для выбора значений на клиенте.
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяСопоставлениеНоменклатуры",      Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборНоменклатуры",              Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборСерии",                     Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода",             Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеДанных",                Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеКоэффициентовУпаковок", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеСоставаУпаковки",       Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяПроверкаСредствамиККТ",          Ложь);
	РезультатОбработкиШтрихкода.Вставить("ПроверкаСредствамиККТЗавершена",          Ложь);
	РезультатОбработкиШтрихкода.Вставить("ВложенныеШтрихкодыДляПроверкиККТ",        Новый Массив());
	
	РезультатОбработкиШтрихкода.Вставить("ОткрытьФормуВводаКодаМаркировки",    Ложь);
	РезультатОбработкиШтрихкода.Вставить("ДанныеШтрихкода",                    ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораНоменклатуры",        Новый Структура);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные",                     Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыУточненияДанных",           Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ИспользоватьОбработкуНаКлиенте",     Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбработкаШтрихкодаБезМарки",         Ложь);
	
	// Неявное уточнение веса
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяПерезаписьШтрихкодаУпаковки", Ложь);
	
	// Для вывода сообщения об ошибке.
	РезультатОбработкиШтрихкода.Вставить("Штрихкод",     "");
	РезультатОбработкиШтрихкода.Вставить("ТипШтрихкода", Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТипУпаковки",  Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТекстОшибки",  "");
	
	РезультатОбработкиШтрихкода.Вставить("ПараметрыОшибки",                  Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибки",                       Ложь);
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибкиВДеревеУпаковок",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбщаяОшибка",                      Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаДопустимостиВидовПродукции", Ложь);
	
	РезультатОбработкиШтрихкода.Вставить("АдресДереваУпаковок",                 "");
	РезультатОбработкиШтрихкода.Вставить("АдресУточнениеКоэффициентовУпаковок", "");
	РезультатОбработкиШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	
	// Для обработки строк табличной части.
	РезультатОбработкиШтрихкода.Вставить("ДобавленныеСтроки", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ИзмененныеСтроки",  Новый Массив);
	
	РезультатОбработкиШтрихкода.Вставить("ВидыПродукции",     Новый Массив);
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат РезультатОбработкиШтрихкода;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено Тогда
		РезультатОбработкиШтрихкода.ТипУпаковки = ДанныеШтрихкода.ТипУпаковки;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ВидыПродукции = ВидыПродукции;
	
	Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукции)Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		
	КонецЕсли;
	
	Если ПрисутствуетПродукцияИСМП(ВидыПродукции) Или ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Получает данные реквизитов шапки документа.
//  Имена реквизитов собираются по метаданным документа.
// 
// Параметры:
//  ВходноеЗначение - ДокументСсылка, ДокументОбъект, ДанныеФормыСтруктура - Ссылка на документ.
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения реквизитов переданного документа, включая ссылку на документ,
//	см. ОбщегоНазначения.ЗначенияРеквизитовОбъекта
Функция ПолучитьСтруктуруРеквизитовДокумента(ВходноеЗначение) Экспорт
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВходноеЗначение)) Тогда
		ИсточникДанных            = ВходноеЗначение;
		ЗаполнятьИтоговоеЗначение = Ложь;
	Иначе
		ИсточникДанных            = ВходноеЗначение.Ссылка;
		ЗаполнятьИтоговоеЗначение = Истина;
	КонецЕсли;
	
	КоллекцияРеквизитов = ИсточникДанных.Метаданные().Реквизиты;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Ссылка");
	МассивИменРеквизитов.Добавить("Дата");
	МассивИменРеквизитов.Добавить("Номер");
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		МассивИменРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	ВозвращаемоеЗначение = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных, МассивИменРеквизитов);
	
	Если ЗаполнятьИтоговоеЗначение Тогда
		Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВходноеЗначение, ИмяРеквизита) Тогда
				ВозвращаемоеЗначение[ИмяРеквизита] = ВходноеЗначение[ИмяРеквизита];
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВходноеЗначение.Пустая() Тогда
		ВозвращаемоеЗначение.Ссылка = ВходноеЗначение;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанных, ВидПродукции) Экспорт
	
	ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	ПримечаниеКРазборуШтрихкода = СтрокаДанных.ПримечаниеКРазборуШтрихкода;
	
	Если ПримечаниеКРазборуШтрихкода <> Неопределено 
		И ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиСоответствуетНесколькимШаблонам
		Тогда
		
		Для Каждого ДанныеРазбора Из ПримечаниеКРазборуШтрихкода.РезультатРазбора Цикл
			Если ДанныеРазбора.ВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
				СтрокаДанных.ДанныеРазбора = ДанныеРазбора;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Данные, заполняемые в процессе обработки штрихкодов
// 
// Параметры:
//  ИндексироватьТаблицы - Булево - Индексировать таблицы
// 
// Возвращаемое значение:
//  Структура -- сводные данные по штрихкодам:
// ДанныеКодовМаркировки - Массив, ТаблицаЗначений.
Функция ИнициализацияДанныхПоШтрихкодам(ИндексироватьТаблицы = Истина) Экспорт
	
	ДанныеПоШтрихкодам = Новый Структура;
	
	ДанныеПоШтрихкодам.Вставить("ВидыПродукции", Новый Массив);
	// Используется если вид продукции АТП или классический табак будет определен познее
	ДанныеПоШтрихкодам.Вставить("ПрисутствуетТабачнаяПродукция", Ложь);
	
	ДанныеПоШтрихкодам.Вставить("ДанныеКодовМаркировки",     ИнициализацияТаблицыДанныхКодовМаркировки(ИндексироватьТаблицы));
	ДанныеПоШтрихкодам.Вставить("ВложенныеШтрихкоды",        Неопределено);
	ДанныеПоШтрихкодам.Вставить("ДеревоПоДаннымСервиса",     Неопределено);
	ДанныеПоШтрихкодам.Вставить("СведенияОбОрганизациях",    Неопределено);
	
	// ИСМП
	ДанныеПоШтрихкодам.Вставить("ПредставленияСтатусовИСМП",                  Неопределено);
	ДанныеПоШтрихкодам.Вставить("ТребуетсяЧастичноеВыбытиеИСМП",              Неопределено);
	ДанныеПоШтрихкодам.Вставить("ОтключитьЗапросВСервисПоОперацииИПродукции", Ложь);
	
	// Ошибки
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибкиВДеревеУпаковок",        Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибки",                       Ложь);
	ДанныеПоШтрихкодам.Вставить("ТребуетсяОбновлениеКлючаСессии",   Ложь);
	ДанныеПоШтрихкодам.Вставить("ОшибкаДопустимостиВидовПродукции", Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьКодыМаркировкиВводаОстатков",  Ложь);
	ДанныеПоШтрихкодам.Вставить("ТекстОшибки",                      "");
	
	ДанныеПоШтрихкодам.Вставить("ТребуетсяСопоставление",           Ложь);
	
	ДанныеПоШтрихкодам.Вставить("ЭтоСканированиеВФормеПроверкиИПодбора", Ложь);
	ДанныеПоШтрихкодам.Вставить("ЭтоОбработкаВводаШтрихкода",            Ложь);
	
	// ТСД
	ДанныеПоШтрихкодам.Вставить("ИерархическаяЗагрузкаИзТСД", Ложь);
	ДанныеПоШтрихкодам.Вставить("ЗаменыШтрихкодов",           Неопределено);
	
	// Уточнения
	ДанныеПоШтрихкодам.Вставить("УточнитьУПользователя",              Новый Массив);
	ДанныеПоШтрихкодам.Вставить("СтрокиДляСохраненияКодовМаркировки", Новый Соответствие);
	ДанныеПоШтрихкодам.Вставить("ЗаполнитьФлагТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN", Истина);
	
	// Логирование запросов
	ДанныеПоШтрихкодам.Вставить("ЛогированиеЗапросов", Новый Структура());
	ДанныеПоШтрихкодам.ЛогированиеЗапросов.Вставить("Используется",      Ложь);
	ДанныеПоШтрихкодам.ЛогированиеЗапросов.Вставить("ИдентификаторЛога", Неопределено);
	ДанныеПоШтрихкодам.ЛогированиеЗапросов.Вставить("АдресЛогаЗапросов", Неопределено);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Иинициализация таблицы данных кода маркировки. В данную таблицу собирается вся информация по введенному штрихкоду.
// 
// Параметры:
//  ИндексироватьТаблицы - Булево - Индексировать таблицы
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * ШтрихкодBase64 - Строка - Штрихкод, закодированный по алгоритму BASE64.
// * Штрихкод - Строка - Значение штрихкода.
// * GTIN - Строка - Штрихкод в формате GTIN.
// * EAN - Строка - Штрихкод в формате EAN.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
// * Упаковка - ОпределяемыйТип.Упаковка - Упаковка.
// * Коэффициент - Число - количество маркируемой продукции в типовой упаковке с известным GTIN.
// * КоличествоПотребительскихУпаковок - Число - количество индивидуальных потребительских упаковок в текцущей
// * ПредставлениеНоменклатуры - Строка - Строковое представление номенклатуры.
// * ВидыПродукцииКодаМаркировки - Массив из ПеречислениеСсылка.ВидыПродукцииИС - список видов продукции кода маркировки.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
// * МаркируемаяПродукция - Булево - Истина, если продукция имеет марку.
// * Идентифицирован - Булево - Истина, если по коду маркировки удалось найти или создать элемент справочника "Штрихкоды упаковок товаров".
// * ТребуетсяСопоставление - Булево - Истина, если по штрихкоду EAN не найдена номенклатура и требуется сопоставить штрихкод номенклатуре.
// * ТребуетсяОбработкаШтрихкода - Булево - Истина, если штрихкод EAN требуется обработать вне библиотеки (например это не номенклатура).
// * СписокНоменклатуры - Массив из Структура - 
// * Входящий - Булево - Истина, если данный штрихкод был передан для обработки.
// * НайденВоВложенныхУпаковках - Булево - Истина, если переданный входящий штрихкод найден во вложенных упаковках.
// * ЭтоШтрихкодНоменклатуры - Булево - Истина, если введенный штрихкод является штрихкодом номенклатуры.
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки штрихкода.
// * СоставКодаМаркировки - (См. РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки).
// * ЭтоКодВводаОстатков - Булево - Истина, если штрихкод является штрихкодом ввода остатков.
// * ОбработатьБезМаркировки - Булево - Истина, если номенклатуру с кодом маркировки требуется обработать без учета марки.
// * АдресДереваУпаковок - Строка - Указатель на временное хранилища дерева упаковок.
// * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// * ТекстОшибки - Строка - текст ошибки обработки штрихкода.
// * ДополнительныеПараметры - Произвольный - дополнительные параметры.
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника "Штрихкоды упаковок товаров".
// * Количество - Число - количество товара в базовых ед. изм. по коду маркировки
// * ТребуетВзвешивания - Булево - признак "Потребительские упаковки номенклатуры требуют индивидуального взвешивания"
// * ПроизвольнаяЕдиницаУчета - Булево - признак "Индивидуальный КМ не соответствует единице учета"
Функция ИнициализацияТаблицыДанныхКодовМаркировки(ИндексироватьТаблицы = Истина) Экспорт
	
	ДанныеКодовМаркировки = Новый ТаблицаЗначений;
	
	ДанныеКодовМаркировки.Колонки.Добавить("ШтрихкодBase64",            Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("Штрихкод",                  Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("GTIN",                      Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("EAN",                       Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("Номенклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Характеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Серия",                     Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Упаковка",                  Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Коэффициент",                               Новый ОписаниеТипов("Булево, Число", Новый КвалификаторыЧисла(18,8,ДопустимыйЗнак.Неотрицательный)));
	ДанныеКодовМаркировки.Колонки.Добавить("ПлановоеКоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
	ДанныеКодовМаркировки.Колонки.Добавить("Количество",                        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДанныеКодовМаркировки.Колонки.Добавить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДанныеКодовМаркировки.Колонки.Добавить("ПредставлениеНоменклатуры",         Новый ОписаниеТипов("Строка"));
	
	ДанныеКодовМаркировки.Колонки.Добавить("ВидПродукции",                  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеКодовМаркировки.Колонки.Добавить("ВидыПродукцииКодаМаркировки",   Новый ОписаниеТипов("Массив"));
	// Требуется если в текущий момент нет возможности определить вид продукции: АТП или классический табак
	ДанныеКодовМаркировки.Колонки.Добавить("ПрисутствуетТабачнаяПродукция", Новый ОписаниеТипов("Булево"));
	
	ДанныеКодовМаркировки.Колонки.Добавить("МаркируемаяПродукция",        Новый ОписаниеТипов("Число, Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетВзвешивания",          Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",    Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("Идентифицирован",             Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяСопоставление",                                            Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN", Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяОбработкаШтрихкода",                                       Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяВыборСерии",                                               Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("СписокНоменклатуры",          Новый ОписаниеТипов("Массив"));
	ДанныеКодовМаркировки.Колонки.Добавить("Входящий",                    Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("НайденВоВложенныхУпаковках",  Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ЭтоШтрихкодНоменклатуры",     Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ВидУпаковки",                 Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеКодовМаркировки.Колонки.Добавить("СоставКодаМаркировки",        Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("ЭтоКодВводаОстатков",         Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("СтрокаДерева",                Неопределено); // Основное дерево упаковок
	ДанныеКодовМаркировки.Колонки.Добавить("ПримечаниеКРазборуШтрихкода", Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("РодительскаяУпаковка",        Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ДанныеРазбора",               Неопределено);
	
	ДанныеКодовМаркировки.Колонки.Добавить("ДанныеRFID",                  Неопределено); // Неопределено - данные с RFID-метки не считаны
	ДанныеКодовМаркировки.Колонки.Добавить("GTINПотребительскойУпаковки", Метаданные.ОпределяемыеТипы.GTIN.Тип); // Для заполнения группы ОСУ
	
	// Для поиска КМ без учета МРЦ
	ДанныеКодовМаркировки.Колонки.Добавить("НормализованныйШтрихкод",     Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ХешСуммаНормализации",        Новый ОписаниеТипов("Строка"));
	
	ДанныеКодовМаркировки.Колонки.Добавить("НоменклатураСопоставленаПоУПД", Новый ОписаниеТипов("Булево"));
	
	// Для отказа от обработанных и необработанных ШК
	ДанныеКодовМаркировки.Колонки.Добавить("ОбработатьБезМаркировки",     Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("АдресДереваУпаковок",         Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТипУпаковки",                 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТипШтрихкода",                Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТекстОшибки",                 Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ПараметрыОшибки",             Неопределено);
	
	ДанныеКодовМаркировки.Колонки.Добавить("ДополнительныеПараметры",     Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("ШтрихкодУпаковки",            Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	// Проверки не пройдены, дальнейшая обработка не требуется
	ДанныеКодовМаркировки.Колонки.Добавить("ОбработанСОшибками",          Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("АдресЛогаЗапросов",           Новый ОписаниеТипов("Строка"));
	
	// Произошло уточнение кода маркировки на клиенте требующее перезаписи штрихкода упаковки
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяОбновлениеШтрихкода", Новый ОписаниеТипов("Булево"));
	
	Если ИндексироватьТаблицы Тогда
		ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеКодовМаркировки);
	КонецЕсли;
	
	Возврат ДанныеКодовМаркировки;
	
КонецФункции

Процедура ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеКодовМаркировки) Экспорт
	
	ДанныеКодовМаркировки.Индексы.Добавить("НормализованныйШтрихкод");
	ДанныеКодовМаркировки.Индексы.Добавить("Штрихкод");
	ДанныеКодовМаркировки.Индексы.Добавить("EAN");
	
КонецПроцедуры

// Инициализирует структуру, являющуюся аналогом строки таблицы См. ИнициализацияТаблицыДанныхКодовМаркировки
// Может инициалироваться значением штрихкода, после разбора которого заполняются соответствующие свойства структуры.
// 
// Параметры:
// 	КодМаркировки - Строка - Значение штрихкода.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	ПользовательскиеПараметрыРазбораКодаМаркировки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки.
// 	Настройки - см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки.
// Возвращаемое значение:
//  См. ИнициализироватьНовуюСтруктуруОбработкиШтрихкода
Функция НоваяСтруктураОбработкиШтрихкода(КодМаркировки = Неопределено, ВидПродукции = Неопределено, ПользовательскиеПараметрыРазбораКодаМаркировки = Неопределено, Настройки = Неопределено) Экспорт
	
	СтруктураЗначения = ИнициализироватьНовуюСтруктуруОбработкиШтрихкода();
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		СтруктураЗначения.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркировки) Тогда
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			КодМаркировки, ВидПродукции, ПримечаниеКРезультатуРазбора, Настройки, ПользовательскиеПараметрыРазбораКодаМаркировки);
		Если ДанныеРазбора = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru ='Не удалось разобрать код маркировки: %1
				          |%2'"),
				СтрЗаменить(КодМаркировки, Символ(29), "<GS>"),
				ПримечаниеКРезультатуРазбора.ТекстОшибки);
		КонецЕсли;
		
		СтруктураЗначения.ИсходныйШтрихкод        = КодМаркировки;
		СтруктураЗначения.Штрихкод                = ДанныеРазбора.НормализованныйКодМаркировки;
		СтруктураЗначения.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
		СтруктураЗначения.ТипШтрихкода            = ДанныеРазбора.ТипШтрихкода;
		СтруктураЗначения.ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
		СтруктураЗначения.СоставКодаМаркировки    = ДанныеРазбора.СоставКодаМаркировки;
		
		Если ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
			СтруктураЗначения.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		КонецЕсли;
		
		СтруктураЗначения.ДанныеРазбора = ДанныеРазбора;
		
	КонецЕсли;
	
	Возврат СтруктураЗначения;
	
КонецФункции

// Инициализирует структуру, являющуюся аналогом строки таблицы См. ИнициализацияТаблицыДанныхКодовМаркировки
// Может инициалироваться значением штрихкода, после разбора которого заполняются соответствующие свойства структуры.
// 
// Параметры:
// 	КодМаркировки - Строка - Значение штрихкода.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	Настройки - см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки.
// Возвращаемое значение:
// 	Структура - Описание:
// * GTIN - Строка - GTIN
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - Вид упаковки.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// * Штрихкод - Строка - Значение штрихкода.
Функция НоваяСтруктураОбработкиШтрихкодаУпрощенныйРазбор(КодМаркировки = Неопределено, ВидПродукции = Неопределено, НастройкиРазбора = Неопределено) Экспорт
	
	СтруктураЗначения = ИнициализироватьНовуюСтруктуруОбработкиШтрихкода();
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		СтруктураЗначения.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркировки) Тогда
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
			КодМаркировки, НастройкиРазбора.Кеш, ВидПродукции, ПримечаниеКРезультатуРазбора,
			НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
		Если ДанныеРазбора = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru ='Не удалось разобрать код маркировки: %1
				          |%2'"),
				СтрЗаменить(КодМаркировки, Символ(29), "<GS>"),
				ПримечаниеКРезультатуРазбора.ТекстОшибки);
		КонецЕсли;
		
		СтруктураЗначения.ИсходныйШтрихкод        = КодМаркировки;
		СтруктураЗначения.Штрихкод                = ДанныеРазбора.НормализованныйКодМаркировки;
		СтруктураЗначения.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
		СтруктураЗначения.ТипШтрихкода            = ДанныеРазбора.ТипШтрихкода;
		СтруктураЗначения.ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
		СтруктураЗначения.СоставКодаМаркировки    = ДанныеРазбора.СоставКодаМаркировки;
		
		Если ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
			СтруктураЗначения.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		КонецЕсли;
		
		СтруктураЗначения.ДанныеРазбора = ДанныеРазбора;
		
	КонецЕсли;
	
	Возврат СтруктураЗначения;
	
КонецФункции

// Инициализирует и заполняет структуру, являющуюся аналогом строки таблицы См. ИнициализацияТаблицыДанныхКодовМаркировки
// по данным разбора переданного кода маркировки.
// 
// Параметры:
// 	КодМаркировки - Строка - Значение штрихкода.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	ДанныеРазбора - см. РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки
// Возвращаемое значение:
// 	Структура - Описание:
// * GTIN - Строка - GTIN
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - Вид упаковки.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// * Штрихкод - Строка - Значение штрихкода.
Функция НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(КодМаркировки, ВидПродукции = Неопределено, ДанныеРазбора) Экспорт
	
	СтруктураЗначения = ИнициализироватьНовуюСтруктуруОбработкиШтрихкода();
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		СтруктураЗначения.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	СтруктураЗначения.ИсходныйШтрихкод        = КодМаркировки;
	СтруктураЗначения.Штрихкод                = ДанныеРазбора.НормализованныйКодМаркировки;
	СтруктураЗначения.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	СтруктураЗначения.ТипШтрихкода            = ДанныеРазбора.ТипШтрихкода;
	СтруктураЗначения.ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
	СтруктураЗначения.СоставКодаМаркировки    = ДанныеРазбора.СоставКодаМаркировки;
	
	Если ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
		СтруктураЗначения.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	КонецЕсли;
	
	СтруктураЗначения.ДанныеРазбора = ДанныеРазбора;
		
	Возврат СтруктураЗначения;
	
КонецФункции

// Выполняет поиск акцизных марок в дереве упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//  ЗначенияШтрихкодов - Массив Из Строка - Массив найденных штрихкодов.
//
// Возвращаемое значение:
//  Массив Из Строка - Найденные штрихкоды.
Функция ЗначенияШтрихкодовДереваУпаковок(ДеревоУпаковок, ЗначенияШтрихкодов = Неопределено) Экспорт 
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЗначенияШтрихкодовДереваУпаковок(СтрокаДерева, Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.Штрихкод) Тогда
			Результат.Добавить(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует структура параметров, необходимую для выполнения действия и заполняет ее
// (См. ВыполнитьДействие).
//
// Параметры:
//  РезультатВыбора - Произвольный - Результат уточнения информации у пользователя
//  РезультатОбработкиШтрихкода - См. ИнициализироватьРезультатОбработкиШтрихкода.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений
// Возвращаемое значение:
//  Структура - Описание - Заполняет структуру параметров значениями
Функция ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РезультатВыбора",             РезультатВыбора);
	ПараметрыВыбора.Вставить("РезультатОбработкиШтрихкода", РезультатОбработкиШтрихкода);
	ПараметрыВыбора.Вставить("КэшированныеЗначения",        КэшированныеЗначения);
	
	Возврат ПараметрыВыбора;

КонецФункции

// Возвращает пустую структуру обработки штрихкода
// 
// Возвращаемое значение:
//  Структура - Инициализировать новую структуру обработки штрихкода:
// * ИсходныйШтрихкод - Произвольный -
// * Штрихкод - Произвольный -
// * ТипШтрихкода - Произвольный -
// * ВидПродукции - Произвольный -
// * ВидУпаковки - Произвольный -
// * GTIN - Произвольный -
// * НаименованиеВладельца - Произвольный -
// * ПредставлениеНоменклатуры - Произвольный -
// * СоставКодаМаркировки - Произвольный - 
// * ДанныеРазбора - Произвольный - 
// * ВидыПродукцииКодаМаркировки - Массив Из ПеречислениеСсылка.ВидыПродукцииИС -
// * АдресЛогаЗапросов - Произвольный -
// * НормализованныйШтрихкод - Строка -
// * ХешСуммаНормализации - Строка -
Функция ИнициализироватьНовуюСтруктуруОбработкиШтрихкода()
	
	СтруктураЗначения = Новый Структура();
	СтруктураЗначения.Вставить("ИсходныйШтрихкод");
	СтруктураЗначения.Вставить("Штрихкод");
	СтруктураЗначения.Вставить("ТипШтрихкода");
	СтруктураЗначения.Вставить("ВидПродукции");
	СтруктураЗначения.Вставить("ВидУпаковки");
	СтруктураЗначения.Вставить("GTIN");
	
	СтруктураЗначения.Вставить("НаименованиеВладельца");
	СтруктураЗначения.Вставить("ПредставлениеНоменклатуры");
	СтруктураЗначения.Вставить("СоставКодаМаркировки");
	СтруктураЗначения.Вставить("ДанныеРазбора");
	СтруктураЗначения.Вставить("ВидыПродукцииКодаМаркировки", Новый Массив());
	СтруктураЗначения.Вставить("АдресЛогаЗапросов");

	// Для поиска КМ без учета МРЦ
	СтруктураЗначения.Вставить("НормализованныйШтрихкод", "");
	СтруктураЗначения.Вставить("ХешСуммаНормализации", "");

	Возврат СтруктураЗначения;
	
КонецФункции

// Выполняет действие после уточнения информации у пользователя
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкоды.
//  Действие - Строка - Идентификатор необходимого действия.
//  Параметры - См. ИнициализироватьПараметрыОбработкиВыбора.
// Возвращаемое значение:
//  Структура, Неопределено - Результат выполнения действия.
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт
	
	Если Действие = "ОбработатьУточнениеДанных" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	ВидыПродукции = Параметры.РезультатОбработкиШтрихкода.ВидыПродукции;
	Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		РезультатВыполнения = МодульШтрихкодированиеЕГАИС.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатВыполнения = МодульШтрихкодированиеМОТП.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Если ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		РезультатВыполнения = МодульШтрихкодированиеИСМПСлужебный.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Инициализирует структуру, которая будет содержать в себе всю собранную и проанализированную информацию 
// по значению штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Информация по штрихкоду:
//   * МаркируемаяПродукция - Булево - Истина, если номенклатура данных штрихкода является маркируемой.
//   * ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция элементов перечисления видов продукции 
//        ИС, которые были идентифицированы по данным штрихкода.
//   * ДополнительныеПараметры - Произвольный - дополнительные параметры.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//   * Штрихкод - Строка - Значение штрихкода.
//   * Упаковка - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника верхнего уровня.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода маркированного товара.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки маркированного товара.
//   * ТекстОшибки - Строка - описание ошибки.
//   * МаркированныеТовары - Массив - коллекция товаров, подлежащих маркировке.
//   * Количество - Число - количество единиц маркируемой продукции.
//   * ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
//   * ПредставлениеНоменклатуры - Строка - Строковое представление номенклатуры.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
Функция ИнициализироватьДанныеШтрихкода(ПараметрыСканирования = Неопределено) Экспорт
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;

	Если ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	ЗначенияПоУмолчанию = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Добавить();
	
	ДанныеШтрихкода = Новый Структура;
	Для Каждого Колонка Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Колонки Цикл
		ДанныеШтрихкода.Вставить(Колонка.Имя, ЗначенияПоУмолчанию[Колонка.Имя]);
	КонецЦикла;
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Формирует структуру обязательных колонок для таблицы - Маркированные товары, путем добавления к структуре общих
// колонок. (См. ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Возвращаемое значение:
//  Структура - Описание:
//   * СтрокаДерева - Неопределено - колонка строки дерева упаковок.
Функция КолонкиТаблицыМаркированныеТовары() Экспорт
	
	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	КоллекцияОбязательныхКолонок.Вставить("СтрокаДерева");
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Формирует структуру обязательных колонок для дерева значений - Дерево упаковок, путем добавления к структуре общих
// колонок. (См. ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Возвращаемое значение:
//  Структура - Описание:
//   * ТекстОшибки - Строка - текст ошибки в строке дерева.
//   * ЕстьОшибки - Булево - Истина, если есть ошибки в строке дерева.
//   * ХешСумма - Неопределено - Хэш сумма упаковки.
//   * ТипУпаковки - Неопределено - Тип упаковки.
Функция КолонкиДереваУпаковок() Экспорт
	
	КоллекцияОбязательныхКолонок = ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	
	КоллекцияОбязательныхКолонок.Вставить("ТипУпаковки", Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ЕстьОшибки",  Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("EAN",         Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("GTIN",        Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("Коэффициент",                               Новый ОписаниеТипов("Булево, Число",,,Новый КвалификаторыЧисла(18, 8, ДопустимыйЗнак.Неотрицательный)));
	КоллекцияОбязательныхКолонок.Вставить("ПлановоеКоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
	
	КоллекцияОбязательныхКолонок.Вставить("НормализованныйШтрихкод", Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ХешСумма",                Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ХешСуммаНормализации",    Новый ОписаниеТипов("Строка"));
	
	КоллекцияОбязательныхКолонок.Вставить("НедопустимыйКодМаркировки", Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("Входящий",                  Новый ОписаниеТипов("Булево"));
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Инициализирует таблицу значений - Маркированные товары.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Состав колонок таблицы определен в процедуре КолонкиТаблицыМаркированныеТовары.
Функция ИнициализироватьТаблицуМаркированныеТовары() Экспорт
	
	КолонкиТаблицы = КолонкиТаблицыМаркированныеТовары();
	
	МаркированныеТовары = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из КолонкиТаблицы Цикл
		
		МаркированныеТовары.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Возврат МаркированныеТовары;
	
КонецФункции

// Инициализировать таблицу уточнения коэффициентов упаковок.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Инициализировать таблицу уточнения коэффициентов упаковок:
// * GTIN - Строка - 
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС -
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС -
// * КоличествоПотребительскихУпаковок - Число -
// * Номенклатура - ОпределяемыйТип.Номенклатура -
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры -
// * Серия - ОпределяемыйТип.СерияНоменклатуры -
// * Упаковка - ОпределяемыйТип.Упаковка -
// * ПредставлениеСодержимоеУпаковки - Произвольный -
Функция ИнициализироватьТаблицуУточненияКоэффициентовУпаковок() Экспорт
	
	УточнениеКоэффициентовУпаковок = Новый ТаблицаЗначений;
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("GTIN",                              Метаданные.ОпределяемыеТипы.GTIN.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("ВидУпаковки",                       Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("ВидПродукции",                      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("КоличествоПотребительскихУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("Упаковка",       Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	
	УточнениеКоэффициентовУпаковок.Индексы.Добавить("GTIN");
	
	Возврат УточнениеКоэффициентовУпаковок;
	
КонецФункции

// Инициализирует дерево значений - Дерево упаковок.
//
// Параметры:
//  ШтрихкодBase64 - Булево - Признак необходимости добавления колонки ШтрихкодBase64
//
// Возвращаемое значение:
//  ДеревоЗначений - состав колонок определяется в КолонкиДереваУпаковок.
Функция ИнициализироватьДеревоУпаковок(ШтрихкодBase64 = Ложь) Экспорт
	
	КолонкиДереваУпаковок = КолонкиДереваУпаковок();
	ДеревоУпаковок = Новый ДеревоЗначений;
	
	Для Каждого КлючЗначение Из КолонкиДереваУпаковок Цикл
		
		ДеревоУпаковок.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение)
		
	КонецЦикла;
	
	Если ШтрихкодBase64 Тогда
		ДеревоУпаковок.Колонки.Добавить("ШтрихкодBase64", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Выполняет обработку данных штрихкода для единицы маркируемой продукции. Обработка происходит в модуле соответствующей
// виду продукции подсистеме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа, обработки.
//  ДанныеШтрихкода - См. ИнициализироватьДанныеШтрихкода
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//   См. ИнициализироватьРезультатОбработкиШтрихкода
Функция РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = Неопределено;
	
	Если ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции, ДанныеШтрихкода) Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, Неопределено, Ложь);
	КонецЕсли;
	
	Если ДанныеШтрихкода.МаркируемаяПродукция <> Истина
		И ДанныеШтрихкода.ДанныеРазбора = Неопределено
		
		// Передача штрихкода для обработки на сторону прикладного решения
		// Документы подсистемы ЕГАИС умеют самостоятельно обрабатывать штрихкоды немаркированной алкогольной продукции
		И Не ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки Тогда
		
		РезультатДобавления = РезультатДобавленияНемаркируемойПродукции(ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		РезультатДобавления = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		РезультатДобавления = МодульШтрихкодированиеИСМПСлужебный.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма);
		
	Иначе // Штрихкод не относящийся к библиотеке
		
		РезультатДобавления = РезультатДобавленияНемаркируемойПродукции(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

// Сценарий: данные по штрихкоду были получены ранее, а пользователь выполнил 
//   уточнение данных (выбор номенклатуры, серии, ввод кода маркировки итп).
//
Функция РезультатОбработкиШтрихкодаМаркируемойПродукцииПослеУточнения(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	ДанныеШтрихкодаВКоллекции = Новый Массив;
	ШтрихкодированиеИСКлиентСервер.ОбновитьНеобходимостьУточненияДанных(ДанныеШтрихкода);
	ДанныеШтрихкодаВКоллекции.Добавить(ДанныеШтрихкода);
	
	// При преобразовании строки таблицы значений в структуру ДанныеШтрихкода методом СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру
	// происходит удаление колонки СтрокаДерева. Поэтому перед обработкой структуры колонка СтрокаДерева возвращается.
	ДанныеШтрихкода.Вставить("СтрокаДерева", Неопределено);
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	ДанныеПоШтрихкодам.ДанныеКодовМаркировки = ДанныеШтрихкодаВКоллекции;
	
	СтрокиДляСохраненияКодовМаркировки = Новый Соответствие;
	
	// Требуется применить сохраненный выбор автоматически.
	ОтметитьНовыеИИзмененныеШтрихкодыУпаковок(ДанныеПоШтрихкодам, СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	ОбновитьШтрихкодыУпаковок(СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования);
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = (ТипЗнч(Форма) = Тип("УникальныйИдентификатор"));
	
	РезультатыОбработок = ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Ложь, Форма, Новый Соответствие);
	Возврат РезультатыОбработок[ДанныеШтрихкода.Штрихкод];
	
КонецФункции

// Формирует таблицу значений данных по штрихкодам EAN.
//
// Параметры:
//  ШтрихкодыEAN - Массив из Строка - Штрихкоды EAN.
//  ПараметрыСканирования - см. ПараметрыСканирования - параметры сканирования.
//  GTINПотребительскихУпаковок - Соответствие - GTIN потребительских упаковок.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * Упаковка - ОпределяемыйТип.Упаковка - Упаковка.
//   * ШтрихкодEAN - Строка - Штрихкод.
//   * ПредставлениеНоменклатуры - Строка - Представление номенклатуры.
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//   * ВидУпаковкиИС - ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки (из коэффициента регистра ОписаниеGTINИС)
//   * МаркируемаяПродукция - Булево - Истина, если продукция является маркируемой.
//   * ТребуетВзвешивания - Булево - Истина, если продукция требует взвешивания индивидуальных упаковок.
//   * ПроизвольнаяЕдиницаУчета - Булево - Истина, учетная единица не равняется индивидуальному КМ.
//   * Коэффициент - Число - количество товара в групповой или стандартной логистической монотоварной упаковке
//   * КоличествоПотребительскихУпаковок - Число - количество минимальных потребительских упаковок в EAN
//   * Количество - Число - количество товара (заполняется только для весовых штрихкодов)
//   * ТребуетсяОбработкаШтрихкода - Булево - Истина если штрихкод не следует обрабатывать библиотекой
//   * ДанныеШтрихкода - Структура,Неопределено - Результат получения данных по штрихкоду (для обработки вне библиотеки)
Функция ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования = Неопределено, GTINПотребительскихУпаковок = Неопределено) Экспорт
	
	ДанныеПоШтрихкодамEAN = Новый ТаблицаЗначений;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Номенклатура",                Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Характеристика",              Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Серия",                       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Упаковка",                    Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ШтрихкодEAN",                 Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Весовой",                     Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПредставлениеНоменклатуры",   Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидПродукции",                Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("МаркируемаяПродукция",        Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Количество",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ТребуетсяОбработкаШтрихкода", Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ДанныеШтрихкода");
	ДанныеПоШтрихкодамEAN.Индексы.Добавить("ШтрихкодEAN");
	
	Если ШтрихкодыEAN.Количество() = 0 Тогда
		Возврат ДанныеПоШтрихкодамEAN;
	КонецЕсли;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Набор",                       Новый ОписаниеТипов("Булево"));
	
	ДополнительныеПредставленияШтрихкодов = Новый Соответствие;
	
	Для Каждого ШтрихкодEAN Из ШтрихкодыEAN Цикл
		
		НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
		НоваяСтрока.ШтрихкодEAN = ШтрихкодEAN;
		
		//GTIN
		GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
		Если GTIN <> ШтрихкодEAN Тогда
			НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
			НоваяСтрока.ШтрихкодEAN = GTIN;
			ДополнительныеПредставленияШтрихкодов.Вставить(GTIN, ШтрихкодEAN);
		КонецЕсли;
		
		Если ШтрихкодированиеИСКлиентСервер.ЭтоEANИлиGTIN(GTIN) Тогда
			
			//EAN13
			Если Лев(GTIN, 1) = "0" Тогда
				EAN13 = Сред(GTIN, 2);
				Если EAN13 <> ШтрихкодEAN Тогда
					НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
					НоваяСтрока.ШтрихкодEAN = EAN13;
					ДополнительныеПредставленияШтрихкодов.Вставить(EAN13, ШтрихкодEAN);
				КонецЕсли;
			КонецЕсли;
			
			//UPC
			Если Лев(GTIN, 2) = "00" Тогда
				UPC = Сред(GTIN, 3);
				Если UPC <> ШтрихкодEAN Тогда
					НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
					НоваяСтрока.ШтрихкодEAN = UPC;
					ДополнительныеПредставленияШтрихкодов.Вставить(UPC, ШтрихкодEAN);
				КонецЕсли;
			КонецЕсли;
			
			//EAN8
			Если Лев(GTIN, 6) = "000000" Тогда
				EAN8 = Сред(GTIN, 7);
				Если EAN8 <> ШтрихкодEAN Тогда
					НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
					НоваяСтрока.ШтрихкодEAN = EAN8;
					ДополнительныеПредставленияШтрихкодов.Вставить(EAN8, ШтрихкодEAN);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШтрихкодированиеИСПереопределяемый.ПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN);
	
	КолонкиСтрокой = Новый Массив;
	Для Каждого Колонка Из ДанныеПоШтрихкодамEAN.Колонки Цикл
		КолонкиСтрокой.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодамEAN Цикл
		Если ДополнительныеПредставленияШтрихкодов.Получить(СтрокаТаблицы.ШтрихкодEAN) <> Неопределено Тогда
			СтрокаТаблицы.ШтрихкодEAN = ДополнительныеПредставленияШтрихкодов.Получить(СтрокаТаблицы.ШтрихкодEAN);
		КонецЕсли;
	КонецЦикла;
	ДанныеПоШтрихкодамEAN.Свернуть(СтрСоединить(КолонкиСтрокой, ","));
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Коэффициент",                               Новый ОписаниеТипов("Число"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПлановоеКоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ТребуетВзвешивания",                        Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",                  Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидУпаковкиИС",                             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЧастичноеВыбытиеВариантУчета",              Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИСМП"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЕмкостьПотребительскойУпаковки",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры Цикл
			
			ШтрихкодEAN           = КлючИЗначение.Ключ;     // Строка
			ВариантыСопоставления = КлючИЗначение.Значение; // Массив Из Структура: {Номенклатура, Характеристика, Серия}
			
			Для Каждого ВариантСопоставления Из ВариантыСопоставления Цикл
				
				Отбор = Новый Структура("ШтрихкодEAN, Номенклатура, Характеристика");
				ЗаполнитьЗначенияСвойств(Отбор, ВариантСопоставления);
				Отбор.ШтрихкодEAN = ШтрихкодEAN;
				
				Если ДанныеПоШтрихкодамEAN.НайтиСтроки(Отбор).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВариантСопоставления);
				
				НоваяСтрока.ШтрихкодEAN          = ШтрихкодEAN;
				НоваяСтрока.ВидПродукции         = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
				НоваяСтрока.МаркируемаяПродукция = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИндексСтроки = ДанныеПоШтрихкодамEAN.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ДанныеСтроки = ДанныеПоШтрихкодамEAN[ИндексСтроки];
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
			И Не ДанныеСтроки.ТребуетсяОбработкаШтрихкода Тогда
			ДанныеПоШтрихкодамEAN.Удалить(ДанныеСтроки);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	НаборGTIN = Новый Массив;
	УникальныеGTIN = Новый Соответствие;
	НаборНоменклатуры = Новый Массив;
	УникальнаяНоменклатура = Новый Соответствие;
	Для Каждого ЭлементДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		Если ЭлементДанных.ТребуетсяОбработкаШтрихкода Тогда
			Продолжить;
		КонецЕсли;
		
		GTINСтроки = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ЭлементДанных.ШтрихкодEAN);
		Если УникальныеGTIN[GTINСтроки] = Неопределено Тогда
			НаборGTIN.Добавить(GTINСтроки);
			УникальныеGTIN.Вставить(GTINСтроки, Истина);
		КонецЕсли;
		
		Если УникальнаяНоменклатура[ЭлементДанных.Номенклатура] = Неопределено Тогда
			НаборНоменклатуры.Добавить(ЭлементДанных.Номенклатура);
			УникальнаяНоменклатура.Вставить(ЭлементДанных.Номенклатура, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ОписанияНоменклатуры = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(НаборНоменклатуры);
	ОписанияGTIN = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(НаборGTIN);
	
	ДопустимаПродукцияИСМП = ДопустимаПродукцияИСМП(ПараметрыСканирования);
	
	СозданиеНаборов = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("СозданиеНаборов")
		И ПараметрыСканирования.СозданиеНаборов;
	
	// Заполнение коэффициентов упаковок (учетное количество в упаковке) и количества потребительских кодов в упаковке
	Для Каждого ЭлементДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		Если Не ДопустимаПродукцияИСМП
			И ЭлементДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
			ЭлементДанных.МаркируемаяПродукция = Ложь;
		КонецЕсли;
		
		Если ЭлементДанных.ТребуетсяОбработкаШтрихкода Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНоменклатуры = ОписанияНоменклатуры.Получить(ЭлементДанных.Номенклатура);
		
		Если ОписаниеНоменклатуры <> Неопределено Тогда
			КоэффициентПересчета = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
			ЭлементДанных.ТребуетВзвешивания             = (КоэффициентПересчета = 0);
			ЭлементДанных.ПроизвольнаяЕдиницаУчета       = (КоэффициентПересчета <> 1);
			ЭлементДанных.ЧастичноеВыбытиеВариантУчета   = ОписаниеНоменклатуры.ВариантЧастичногоВыбытия;
			ЭлементДанных.ЕмкостьПотребительскойУпаковки = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
		КонецЕсли;
		
		GTINСтроки = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ЭлементДанных.ШтрихкодEAN);
		
		Если ЗначениеЗаполнено(GTINСтроки) Тогда
			ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки = (GTINПотребительскихУпаковок <> Неопределено И GTINПотребительскихУпаковок[GTINСтроки] <> Неопределено);
		Иначе
			ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки = Ложь;
		КонецЕсли;
		
		ОписаниеGTIN = ОписанияGTIN.Получить(GTINСтроки);
		Если ОписаниеGTIN = Неопределено
			И ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки Тогда
			ОписаниеGTIN = Новый Структура(
				"ВидУпаковки, КоличествоПотребительскихУпаковок",
				Перечисления.ВидыУпаковокИС.Потребительская, 1);
		КонецЕсли;
		
		Если ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки
			И ОписаниеGTIN <> Неопределено
			И ОписаниеGTIN.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И ОписаниеGTIN.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'GTIN %1 найден в составе кода маркировки потребительской упаковки.
					           |В регистре Описание GTIN ИС %1 соответствует виду упаковки: %2.
					           |GTIN логистических, групповых и потребительских упаковок должны быть различными.'"),
					GTINСтроки, ОписаниеGTIN.ВидУпаковки));
			ОписаниеGTIN = Новый Структура(
				"ВидУпаковки, КоличествоПотребительскихУпаковок",
				Перечисления.ВидыУпаковокИС.Потребительская, 1);
		КонецЕсли;
		
		Если ЭлементДанных.Набор Тогда
			ЭлементДанных.ВидУпаковкиИС = Перечисления.ВидыУпаковокИС.Набор;
		КонецЕсли;
		
		// Коэффициент, заданный для упаковки имеет приоритет перед коэффициентом из Описания GTIN
		Если ЗначениеЗаполнено(ЭлементДанных.Упаковка)
			И Не ЭлементДанных.ТребуетВзвешивания Тогда
			
			ЭлементДанных.Коэффициент = ЭлементДанных.Количество;
			
			ЭлементДанных.ПлановоеКоличествоПотребительскихУпаковок = ЭлементДанных.Количество / КоэффициентПересчета;
			Если ЗначениеЗаполнено(ОписаниеGTIN) И ЗначениеЗаполнено(ОписаниеGTIN.ВидУпаковки) Тогда
				ЭлементДанных.ВидУпаковкиИС = ОписаниеGTIN.ВидУпаковки;
			ИначеЕсли ЭлементДанных.ПлановоеКоличествоПотребительскихУпаковок = 1 Тогда
				ЭлементДанных.ВидУпаковкиИС = Перечисления.ВидыУпаковокИС.Потребительская;
			КонецЕсли;
		
		ИначеЕсли ЗначениеЗаполнено(ОписаниеGTIN) Тогда
			
			ПлановоеКоличествоПотребительскихУпаковок = ОписаниеGTIN.КоличествоПотребительскихУпаковок;
			Если ПлановоеКоличествоПотребительскихУпаковок = 0
				И (Не СозданиеНаборов И ОписаниеGTIN.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
				ПлановоеКоличествоПотребительскихУпаковок = 1;
			КонецЕсли;
			
			ЭлементДанных.ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок;
			
			Если ЭлементДанных.ТребуетВзвешивания Тогда
				ЭлементДанных.Коэффициент = 0;
			Иначе
				ЭлементДанных.Количество  = ПлановоеКоличествоПотребительскихУпаковок * КоэффициентПересчета;
				ЭлементДанных.Коэффициент = ПлановоеКоличествоПотребительскихУпаковок * КоэффициентПересчета;
			КонецЕсли;
			
			ЭлементДанных.ВидУпаковкиИС = ОписаниеGTIN.ВидУпаковки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодамEAN.Колонки.Удалить("Набор");
	ДанныеПоШтрихкодамEAN.Индексы.Добавить("ШтрихкодEAN");
	
	Возврат ДанныеПоШтрихкодамEAN;
	
КонецФункции

// Выполняет полную проверку на ошибки данных штрихкодов с учетом индивидуальных проверок по видам продукции ИС.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  Булево - Истина, если есть ошибки в данных.
Функция ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ТребуетсяСопоставление
		Или ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеПараметруСканированияТолькоМаркируемаяПродукция(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаВложенностьСтандартныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьДоступныеОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);

	ШтрихкодированиеИСПереопределяемый.ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	
	Если ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Или Не ЕстьОшибки Тогда
		
		ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
		
		Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
			И ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			МодульШтрихкодированиеЕГАИС.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
			И(ПрисутствуетТабачнаяПродукция(ВидыПродукции)
				Или ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
			И (ПрисутствуетПродукцияИСМП(ВидыПродукции)
				Или ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков) Тогда
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			МодульШтрихкодированиеИСМПСлужебный.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибки И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
		
		ЗаполнитьИнформациюПоОшибкеВДеревеУпаковок(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Процедура ПроверитьСоответствиеДетализацииРежимуСканирования(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДопустимыеВидыУпаковок = Новый Соответствие;
	ДопустимыеВидыУпаковок.Вставить(Перечисления.ВидыУпаковокИС.Потребительская, Истина);
	
	Если ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
		Или Не ЗначениеЗаполнено(ПараметрыСканирования.ДетализацияСтруктурыХранения) Тогда
		ДопустимыеВидыУпаковок.Вставить(Перечисления.ВидыУпаковокИС.Групповая, Истина);
		ДопустимыеВидыУпаковок.Вставить(Перечисления.ВидыУпаковокИС.Набор, Истина);
	КонецЕсли;
	
	Если ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
		Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
		Или Не ЗначениеЗаполнено(ПараметрыСканирования.ДетализацияСтруктурыХранения) Тогда
		ДопустимыеВидыУпаковок.Вставить(Перечисления.ВидыУпаковокИС.Логистическая, Истина);
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеВидыУпаковок.Получить(СтрокаДанных.ВидУпаковки) = Неопределено Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДанныеПоШтрихкодам.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Запрещено сканировать логистические упаковки в форму документа с детализацией %1.
					           |Сканирование таких кодов необходимо выполнять в форме проверки и подбора.'"),
					ПараметрыСканирования.ДетализацияСтруктурыХранения);
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				ДанныеПоШтрихкодам.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Запрещено сканировать групповые упаковки в форму документа с детализацией %1.
					           |Сканирование таких кодов необходимо выполнять в форме проверки и подбора.'"),
					ПараметрыСканирования.ДетализацияСтруктурыХранения);
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				ДанныеПоШтрихкодам.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Запрещено сканировать упаковки наборов в форму документа с детализацией %1.
					           |Сканирование таких кодов необходимо выполнять в форме проверки и подбора.'"),
					ПараметрыСканирования.ДетализацияСтруктурыХранения);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьИнформациюПоОшибкеВДеревеУпаковок(СтрокаДереваУпаковок, ДанныеКодовМаркировки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаДерева Из СтрокаДереваУпаковок.Строки Цикл
		
		ЕстьОшибкиВоВложенныхСтроках = ЗаполнитьИнформациюПоОшибкеВДеревеУпаковок(СтрокаДерева, ДанныеКодовМаркировки);
		
		НайденнаяСтрока = ДанныеКодовМаркировки.Найти(СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если Не ПустаяСтрока(НайденнаяСтрока.ТекстОшибки) Тогда
				СтрокаДерева.ТекстОшибки = НайденнаяСтрока.ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				ЕстьОшибки = Истина;
			ИначеЕсли ПустаяСтрока(НайденнаяСтрока.ТекстОшибки) И Не ПустаяСтрока(СтрокаДерева.ТекстОшибки) Тогда
				НайденнаяСтрока.ТекстОшибки     = СтрокаДерева.ТекстОшибки;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ПараметрыОшибки") Тогда
					НайденнаяСтрока.ПараметрыОшибки = СтрокаДерева.ПараметрыОшибки;
				КонецЕсли;
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(НайденнаяСтрока.ТекстОшибки) И ЕстьОшибкиВоВложенныхСтроках Тогда
				ЕстьОшибки = Истина;
				СтрокаДерева.ТекстОшибки = ТекстОшибкиОшибкаВДеревеУпаковок();
				НайденнаяСтрока.ТекстОшибки = ТекстОшибкиОшибкаВДеревеУпаковок();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Получение информации по коллекции штрихкодов
// 
// Параметры:
//  Штрихкоды - Массив - коллекция штрихкодов
//  ПараметрыСканирования - См. ПараметрыСканирования
//  КэшированныеЗначения - Структура - Содержит закэшированные значения
// Возвращаемое значение:
//  См. ИнициализацияДанныхПоШтрихкодам
Функция ДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения = Неопределено) Экспорт
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам(Ложь);
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, Штрихкоды, ПараметрыСканирования);
	ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеКодовМаркировки);
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

Процедура ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма = Неопределено) Экспорт
	
	Если ДанныеПоШтрихкодам.ТребуетсяСопоставление Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПроверкаКодовМаркировкиИСМП = Ложь;
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ЭтоПроверкаКодовМаркировкиИСМП = Истина;
	КонецЕсли;

	ЭтоОтчетПроизводственнойЛинии = Ложь;
	Если ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
		И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		ЭтоОтчетПроизводственнойЛинии = Истина;
	КонецЕсли;
	
	Если Не ЭтоПроверкаКодовМаркировкиИСМП
		И Не ЭтоОтчетПроизводственнойЛинии Тогда
		ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, Неопределено, ПараметрыСканирования);
		ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, Неопределено, ПараметрыСканирования);
		ЗаполнитьДанныеИзвестныхСозданныхНаборов(ДанныеПоШтрихкодам, Неопределено, ПараметрыСканирования)
	КонецЕсли;
	
	Если Не ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования)
		И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ОпределениеВидаПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Если вид продукции определить не удалось
	ПроверитьВидПродукцииУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если (ЭтоПроверкаКодовМаркировкиИСМП
		Или ЭтоОтчетПроизводственнойЛинии)
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок <> Неопределено Тогда
		
		ПараметрыСозданияШтрихкодов = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
		ПараметрыСозданияШтрихкодов.ИмяКолонкиКоличествоПотребительскихУпаковок = "КоличествоПотребительскихУпаковок";
		Справочники.ШтрихкодыУпаковокТоваров.ЗаполнитьШтрихкодыУпаковокИКоличествоПоДеревуМаркируемойПродукции(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСозданияШтрихкодов);
		
		Для Каждого ЭлементДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			Если ЗначениеЗаполнено(ЭлементДанных.СтрокаДерева)
				И Не ЗначениеЗаполнено(ЭлементДанных.ШтрихкодУпаковки)
				И ЗначениеЗаполнено(ЭлементДанных.СтрокаДерева.ШтрихкодУпаковки) Тогда
				ЭлементДанных.ШтрихкодУпаковки = ЭлементДанных.СтрокаДерева.ШтрихкодУпаковки;
				ЭлементДанных.Количество       = ЭлементДанных.СтрокаДерева.Количество;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение флага МаркируемаяПродукция для кодов, добавленных в процессе заполнения данных по штрихкодам
	ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	// В процессе сложной иерархической загрузки данных из ТСД
	// оптимальным вариантом будет нормализация дерева на последнем этапе обработки.
	Если ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД Тогда
		НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ТребуетсяСопоставление
		Или ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД
		И ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ОтметитьНовыеИИзмененныеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки);
	
	ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		// После выполнения ЗаполнитьПоДаннымУточнения или ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора
		// незаполненная номенклатура могла заполниться. После заполнения номенклатуры необходимо пересчитать количество
		ДанныеКодовМаркировкиДляПересчетаКоличества = Новый Массив;
		Для Каждого КлючИЗначение Из ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки Цикл
			Если КлючИЗначение.Ключ.Количество = 0
				И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(КлючИЗначение.Ключ.ВидПродукции, Истина) Тогда
				ДанныеКодовМаркировкиДляПересчетаКоличества.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДанныеКодовМаркировкиДляПересчетаКоличества, ПараметрыСканирования);
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьGTINПотребительскихУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	ОбновитьШтрихкодыУпаковок(ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования);
	
	ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

//Проверяет необходимость уточнения данных по штрихкодам у пользователя.
//   Здесь будут собраны все проверки из других источников.
//
// Параметры:
//  ДанныеПоШтрихкодам - см. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДанныеДокументаОснования = Неопределено;
	Если ИнтеграцияИС.СерииИспользуются() Тогда
		СформироватьДанныеДокументаОснования(ПараметрыСканирования);
		Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
			ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаДанных.Входящий Тогда
			Продолжить;
		ИначеЕсли Не ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.СтрокаДерева <> Неопределено
			И ПроверитьНеобходимостьУточнения(СтрокаДанных.СтрокаДерева, ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования, ДанныеДокументаОснования) Тогда
			ДанныеПоШтрихкодам.УточнитьУПользователя.Добавить(СтрокаДанных.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Проверяет необходимость уточнения кода маркировки в составе упаковки, общее
//   * Проверка заполнения номенклатуры.
//   * Проверка заполнения серии (если она указана в документе-основании).
//   * Запуск специфичных проверок по подсистемам.
//
// Параметры:
//   СтрокаДерева - СтрокаДереваЗначений - проверяемый разобранный штрихкод в составе упаковки.
//   ДанныеКодовМаркировки - см. ИнициализироватьТаблицуМаркированныеТовары
//   ПараметрыСканирования - см. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//   ДанныеДокументаОснования - Неопределено, ТаблицаЗначений - данные документа-основания для проверки указания серий.
//
// Возвращаемое значение:
//   Булево - по проверяемой упаковке требуется уточнение данных.
//
Функция ПроверитьНеобходимостьУточнения(СтрокаДерева, ДанныеКодовМаркировки, ПараметрыСканирования, ДанныеДокументаОснования)
	
	ТребуетсяУточнение = Ложь;
	Для Каждого ВложенныйЭлемент Из СтрокаДерева.Строки Цикл
		ТребуетсяУточнение = ТребуетсяУточнение Или ПроверитьНеобходимостьУточнения(ВложенныйЭлемент, ДанныеКодовМаркировки, ПараметрыСканирования, ДанныеДокументаОснования);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаДерева.GTIN) И СтрокаДерева.Строки.Количество() = 0 Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			ТребуетсяУточнение = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.Серия) Тогда
			
			Если ДанныеДокументаОснования<>Неопределено Тогда
				СтрокиДокументаОснования = ДанныеДокументаОснования.НайтиСтроки(
					Новый Структура("Номенклатура,Характеристика", СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика));
			Иначе
				СтрокиДокументаОснования = Новый Массив;
			КонецЕсли;
			
			Если СтрокиДокументаОснования.Количество() = 1
					И ЗначениеЗаполнено(СтрокиДокументаОснования[0].Серия) Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
					
					Серия = СтрокиДокументаОснования[0].Серия;
					СтрокаДерева.Серия = Серия;
					
					НовыеРеквизиты = Новый Структура;
					НовыеРеквизиты.Вставить("Серия", Серия);
					
					Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
						СтрокаДерева.ШтрихкодУпаковки, НовыеРеквизиты);
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
					СтрокаКодаМаркировки = ДанныеКодовМаркировки.Найти(СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
				Иначе
					СтрокаКодаМаркировки = ДанныеКодовМаркировки.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
				КонецЕсли;
				ТребуетсяУточнение = ТребуетсяУточнение Или СтрокаКодаМаркировки.ТребуетсяВыборСерии;
			КонецЕсли;
		ИначеЕсли СтрокаДерева.Коэффициент = 0 И СтрокаДерева.Количество = 0 Тогда
			ТребуетсяУточнение = Истина;
		КонецЕсли;
		
		Если Не ТребуетсяУточнение Тогда
			Если ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП().Найти(СтрокаДерева.ВидПродукции)<>Неопределено Тогда
				ТребуетсяУточнение = МодульСпецификиИСМП().ПроверитьНеобходимостьУточнения(СтрокаДерева, ПараметрыСканирования);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяУточнение;
	
КонецФункции

#Область МодулиСпецифики

Функция МодульСпецификиИСМП(ТекущийМодуль = Неопределено)
	Если ТекущийМодуль = Неопределено Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
	Иначе
		Возврат ТекущийМодуль;
	КонецЕсли;
КонецФункции

#КонецОбласти

// Проверяет значения массива ВидыПродукции на вхождение допустимых видов продукции параметров сканирования.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если каждый элемент массива ВидыПродукции присутствует в допустимых видах продукции.
Функция ВидыПродукцииПоддерживаются(ВидыПродукции, ПараметрыСканирования) Экспорт
	
	ВидыПродукцииПоддерживаются = Истина;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		
		Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
			ВидыПродукцииПоддерживаются = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыПродукцииПоддерживаются;
	
КонецФункции

// Дополняет данные штрихкодов специфичными данными, характерными для каждого вида продукции ИС
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
		И ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		И (ПрисутствуетТабачнаяПродукция(ВидыПродукции)
		Или ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
		И ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	// Дозаполнение МРЦ, ГоденДо и т.п. в данных кодов маркировки по составу кода маркировки
	НаличиеКолонокСоставаКодаМаркировкиВДанных = Новый Соответствие;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если СтрокаДанных.СоставКодаМаркировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтрокаДанных.СоставКодаМаркировки Цикл
			
			ИмяСвойства = КлючИЗначение.Ключ;
			
			ЕстьСвойство = НаличиеКолонокСоставаКодаМаркировкиВДанных.Получить(ИмяСвойства);
			Если ЕстьСвойство = Неопределено Тогда
				ЕстьСвойство = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, ИмяСвойства);
				НаличиеКолонокСоставаКодаМаркировкиВДанных.Вставить(ИмяСвойства, ЕстьСвойство);
			КонецЕсли;
			
			Если ЕстьСвойство
				И Не ЗначениеЗаполнено(СтрокаДанных[ИмяСвойства]) Тогда
				СтрокаДанных[ИмяСвойства] = КлючИЗначение.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет представления статусов, владельцев и прочую дополнительную информацию
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
			И ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
			И(ПрисутствуетТабачнаяПродукция(ВидыПродукции)
			Или ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
		
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
			И ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Кэширует данные обработанных штрихкодов путем помещения их в хранилище значений.
//
// Параметры:
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ДанныеШтрихкода - См. ИнициализироватьДанныеШтрихкода
//  РезультатДобавления - См. ИнициализироватьРезультатОбработкиШтрихкода
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
Процедура ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатДобавления, ДеревоУпаковок = Неопределено) Экспорт
	
	Если РезультатДобавления = Неопределено
		Или Не ПараметрыСканирования.КонтрольУникальностиКодовМаркировки
		Или Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) 
		Или ДанныеШтрихкода = Неопределено
		Или (РезультатДобавления.Свойство("ТребуетсяАвторизацияИСМП")
			И РезультатДобавления.ТребуетсяАвторизацияИСМП)
		Или ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки)
		И (РезультатДобавления.ЕстьОшибкиВДеревеУпаковок ИЛИ ДеревоУпаковок <> Неопределено) Тогда
		
		Если РезультатДобавления.ЕстьОшибкиВДеревеУпаковок Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ПоместитьДанныеСтрокДереваВСоответствие(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	Иначе
		
		Если ЗначениеЗаполнено(РезультатДобавления.ТекстОшибки) Или ДанныеШтрихкода.Штрихкод = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ОбработанныеКодыМаркировки.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает данные документа основания из временного хранилища. В случае отсутствия данных в хранилище - формирует их.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Описание:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры.
//   * Количество - Число - количество единиц.
Функция ДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
			
			СформироватьДанныеДокументаОснования(ПараметрыСканирования);
			
		КонецЕсли;
		
		Возврат ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Формирует данные документа основания и помещает их во временное хранилище.
//
// Параметры:
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура СформироватьДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)
		И Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		
		ТаблицаДанныхДокументаОснования = ИнициализицияТаблицыДанныхДокумента(ПараметрыСканирования);
		ДанныеСформированы = Ложь;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПВЕТИС");
			Модуль.СформироватьДанныеДокументаОснования(
				ТаблицаДанныхДокументаОснования, ПараметрыСканирования.ДокументОснование, ДанныеСформированы);
		КонецЕсли;
		
		Если Не ДанныеСформированы Тогда
			ШтрихкодированиеИСПереопределяемый.СформироватьДанныеДокументаОснования(
				ПараметрыСканирования, ТаблицаДанныхДокументаОснования);
		КонецЕсли;
		
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура");
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика");
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика, Серия");
		
		ПараметрыСканирования.АдресДанныхДокументаОснования = ПоместитьВоВременноеХранилище(
			ТаблицаДанныхДокументаОснования,
			ПараметрыСканирования.ИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает данные документа из формы в которой происходит сканирование. 
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма данные таблицы "Товары" требуется получить.
//   ПараметрыСканирования - Структура, Неопределено - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//
// Возвращаемое значение:
// 	Структура:
// 	 * ДанныеПоТоварам - Неопределено, ТаблицаЗначений, ДанныеФормыКоллекция - см. ИнициализицияТаблицыДанныхДокумента.
// 	 * ДанныеПоШтрихкодамУпаковок - Соответствие Из КлючИЗначение:
// 	                                 * Ключ     - СправочникСсылка.ШтрихкодыУпаковокТоваров - Сохраненный в документе штрихкод упаковки.
// 	                                 * Значение - см. ШтрихкодированиеИС.НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие.
Функция ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования, ПоместитьВоВременноеХранилище = Ложь)
	
	СтандартнаяОбработка = Истина;
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДанныеПоТоварам",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПоШтрихкодамУпаковок", Новый Соответствие());
	
	ШтрихкодированиеИСПереопределяемый.ПриФормированииДанныхТабличнойЧастиТовары(
		Форма, ВозвращаемоеЗначение.ДанныеПоТоварам, ?(ПоместитьВоВременноеХранилище, ПараметрыСканирования, Неопределено), СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Обработка") Тогда // формы проверки и подбора
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодобраннаяМаркируемаяПродукция") Тогда
				ВозвращаемоеЗначение.ДанныеПоТоварам = Форма.ПодобраннаяМаркируемаяПродукция;
			КонецЕсли;
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары")
				И Форма.Объект.Товары.Количество() > 0
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "Номенклатура")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "Характеристика")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "Серия") Тогда
					ВозвращаемоеЗначение.ДанныеПоТоварам = Форма.Объект.Товары;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ШтрихкодированиеИСПереопределяемый.ПриФормированииДанныхПоШтрихкодамУпаковокДокумента(
		Форма, ВозвращаемоеЗначение.ДанныеПоШтрихкодамУпаковок, ПараметрыСканирования);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет поиск в массиве ВидыПродукции алкогольной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена алкогольная продукция.
Функция ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Экспорт
	
	Результат = ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено;
	Результат = Результат Или ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Пиво) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск в массиве ВидыПродукции табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена табачная продукция.
Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//Выполняет поиск в массиве ВидыПродукции продукции ИС МП.
//
//Параметры:
//   ВидыПродукции - Массив - Коллекция видов продукции ИС.
//   ВключаяТабачнуюПродукцию  - Булево - Признак включения табачной продукции.
//   ВключатьМолочнуюПродукцию - Булево - Признак включения молочной продукции.
//
//Возвращаемое значение:
//   Булево - Истина, если в массиве есть продукция ИС МП.
//
Функция ПрисутствуетПродукцияИСМП(ВидыПродукции, ВключаяТабачнуюПродукцию = Ложь, ВключатьМолочнуюПродукцию = Истина) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, ВключаяТабачнуюПродукцию, ВключатьМолочнуюПродукцию) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет поиск в массиве ВидыПродукции продукции из натурального меха.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена продукция из натурального меха.
Функция ПрисутствуетПродукцияИзНатуральногоМеха(ВидыПродукции) Экспорт
	
	Результат = ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Помещает настройки выбора маркируемой продукции в хранилище настроек данных формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой необходимо сохранить настройки.
//  Ссылка - ДокументСсылка - Ссылка на объект.
Процедура СохранитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	СохраняемыеНастройки = Новый Структура;
	СохраняемыеНастройки.Вставить("СохраненВыборПоМаркируемойПродукции", Форма.СохраненВыборПоМаркируемойПродукции);
	СохраняемыеНастройки.Вставить("ДанныеВыбораПоМаркируемойПродукции",  Форма.ДанныеВыбораПоМаркируемойПродукции);
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Ссылка, "ДанныеВыбораМаркируемойПродукции", СохраняемыеНастройки);
	
КонецПроцедуры

// Восстанавливает сохраненные настройки выбора маркируемой продукции и помещает их в данные формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой необходимо сохранить настройки.
//  Ссылка - ДокументСсылка - Ссылка на объект.
Процедура ВосстановитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	НастройкиВыбораМаркируемойПродукции = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Ссылка, "ДанныеВыбораМаркируемойПродукции");
	Если ЗначениеЗаполнено(Ссылка) И НастройкиВыбораМаркируемойПродукции <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, НастройкиВыбораМаркируемойПродукции);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки по штрихкодам до формирования данных по ним.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
// Возвращаемое значение:
//  Соответствие - Ключ - Штрихкод, значение результат его проверки.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ДанныеДокументаОснования = Неопределено;
	
	РезультатПроверок = Новый Соответствие;
	
	Шаблон = Неопределено;
	ГрупповаяЗагрузка = ДанныеКодовМаркировки.Количество() > 1;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		РезультатПроверки = ПроверкаТребуетсяОбработкаШтрихкода(СтрокаДанных);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ПроверкаОшибкиПриРазбореКодаМаркировки(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, ГрупповаяЗагрузка);
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = КонтрольНаДопустимыеВидыПродукции(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, ГрупповаяЗагрузка);
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ПроверитьНаСоответствиеДокументуОснованиюЧастично(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, ГрупповаяЗагрузка);
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		//@skip-check query-in-loop
		РезультатПроверки = ПроверкаШтрихкодаНаУжеДобавленный(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, ГрупповаяЗагрузка);
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ТребуетсяОткрытьФормуВводаКодаМаркировки(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ДопустимаМаркируемаяПродукция = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияЕГАИС");
		ДопустимаМаркируемаяПродукция = Модуль.ИспользуетсяМаркируемаяПродукция();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
		Если Модуль.ИспользуетсяМаркируемаяПродукция() Тогда
			
			ДопустимаМаркируемаяПродукция = Истина;
			
			Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
				И (ПрисутствуетТабачнаяПродукция(ДанныеПоШтрихкодам.ВидыПродукции)
				Или ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция) Тогда
				
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
				РезультатПроверокМОТП = Модуль.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
					ДанныеПоШтрихкодам, ПараметрыСканирования);
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатПроверок, РезультатПроверокМОТП, Ложь);
				
			КонецЕсли;
			
			Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
				И ПрисутствуетПродукцияИСМП(ДанныеПоШтрихкодам.ВидыПродукции) Тогда
				
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				РезультатПроверокИСМП = Модуль.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
					ДанныеПоШтрихкодам, ПараметрыСканирования);
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатПроверок, РезультатПроверокИСМП, Ложь);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Шаблон = Неопределено;
	Если Не ДопустимаМаркируемаяПродукция Тогда
		Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
			Если РезультатПроверок.Получить(СтрокаДанных.Штрихкод) = Неопределено Тогда
				СтрокаДанных.ОбработанСОшибками = Истина;
				ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, Истина);
				РезультатПроверок.Вставить(
					СтрокаДанных.Штрихкод,
					РезультатДобавленияНемаркируемойПродукции(ДанныеШтрихкода, ПараметрыСканирования));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатПроверок;
	
КонецФункции

// Выполняет инициализацию структуры Вложенные штрихкоды.
//
// Параметры:
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
//  ИнициализироватьМаркированныеТовары - Булево - Признак инициализации таблицы МаркированныеТовары
// 
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив - коллекция штрихкодов, которым требуется сопоставить номенклатуру
//   * ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция видов продукции ИС, которые присутствуют в дереве упаковок
//   * МаркированныеТовары - См. ИнициализироватьТаблицуМаркированныеТовары
//   * ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
Функция ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок = Неопределено, ИнициализироватьМаркированныеТовары = Истина) Экспорт
	
	ВложенныеШтрихкоды = Новый Структура;
	
	Если ДеревоУпаковок = Неопределено Тогда
		ВложенныеШтрихкоды.Вставить("ДеревоУпаковок", ИнициализироватьДеревоУпаковок());
	Иначе
		ВложенныеШтрихкоды.Вставить("ДеревоУпаковок", ДеревоУпаковок);
	КонецЕсли;
	
	Если ИнициализироватьМаркированныеТовары Тогда
		ВложенныеШтрихкоды.Вставить("МаркированныеТовары", ИнициализироватьТаблицуМаркированныеТовары());
	КонецЕсли;
	
	ВложенныеШтрихкоды.Вставить("ВидыПродукции",                      Новый Массив);
	ВложенныеШтрихкоды.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	
	// Ошибки
	ВложенныеШтрихкоды.Вставить("ЕстьОшибки",                       Ложь);
	ВложенныеШтрихкоды.Вставить("ТребуетсяОбновлениеКлючаСессии",   Ложь);
	ВложенныеШтрихкоды.Вставить("ТекстОшибки",                      "");
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Формирует структуру Вложенные штрихкоды для упаковок на основании существующих данных в ИБ.
//
// Параметры:
//  МассивУпаковок - Массив - Коллекция элементов справочника Штрихкоды упаковок.
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  См. ИнициализацияВложенныхШтрихкодов
Функция ВложенныеШтрихкодыИзвестныхУпаковок(МассивУпаковок, ПараметрыСканирования = Неопределено) Экспорт
	
	Если МассивУпаковок.Количество() = 0 Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		Возврат ВложенныеШтрихкоды;
	КонецЕсли;
	
	ВложенныеШтрихкоды = ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ПараметрыСканирования);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Передает управление обработки данных штрихкодов в модуль менеджера объекта или модуль общей формы.
// Выполняет кэширование данных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеШтрихкода - Структура - сведения по штрихкоду.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		РезультатОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый.ОбработатьДанныеШтрихкодаДляОбщейФормы(
			Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОбработки);
	ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы, Метаданные.Обработки.ПроверкаКодовМаркировкиИСМП.ПолноеИмя()) Тогда
		МодульДляОбработки = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
		РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	Иначе
		МодульДляОбработки = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
		РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	КонецЕсли;
	
	ДеревоУпаковок = Неопределено;
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	КонецЕсли;
	
	ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок);
	Форма.Модифицированность = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
	
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Передает управление обработки данных штрихкодов в модуль менеджера объекта или модуль общей формы.
// Выполняет кэширование данных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеШтрихкода - Структура - сведения по штрихкоду.
//  ПараметрыСканирования - См. ПараметрыСканирования.
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьДанныеШтрихкодаНемаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	Результат = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	Результат.ОбработкаШтрихкодаБезМарки = Истина;
	Результат.ДанныеШтрихкода = ДанныеШтрихкода;
	Возврат Результат;
	
КонецФункции

// Возвращает модуль, в котором требуется выполнить обработку штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
// Возвращаемое значение:
//  ОбщийМодуль, ФормаКлиентскогоПриложения - Модуль, в котором требуется выполнить обработку штрихкодов.
Функция МодульДляОбработки(Форма) Экспорт

	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		МодульДляОбработки = Форма;
	Иначе
		МодульДляОбработки = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Возврат МодульДляОбработки;
	
КонецФункции

// Выполняется инициализация структуры кэширования данных маркируемой продукции.
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ОтложенныеКодыМаркировки - Массив из Структура -   Коды маркировки, по которым требуется выполнить постобработку.
// * ОбработанныеКодыМаркировки - Соответствие Из Строка - Ключ - код маркировки, значение - информация по коду маркировки.
// * ДанныеДляУточненияСведенийПользователя - Структура - данные для уточнения:
//  ** Операция - Строка, Неопределено - Операция
//  ** Данные   - Произвольный, Неопределено - Данные
Функция ИнициализацияКэшаМаркируемойПродукции() Экспорт
	
	КэшМаркируемойПродукции = Новый Структура;
	КэшМаркируемойПродукции.Вставить("ОбработанныеКодыМаркировки",             Новый Соответствие);
	КэшМаркируемойПродукции.Вставить("ОтложенныеКодыМаркировки",               Новый Массив);
	КэшМаркируемойПродукции.Вставить("ДанныеДляУточненияСведенийПользователя", Новый Структура("Операция, Данные"));
	
	Возврат КэшМаркируемойПродукции;
	
КонецФункции

// Выполняет инициализацию кэша для формы объекта, необходимого для обработки маркируемой продукции.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма объекта.
Процедура ИнициализироватьКэшМаркируемойПродукции(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции")
		И Не ЭтоАдресВременногоХранилища(Форма.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ИнициализацияКэшаМаркируемойПродукции();
		Форма.КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает отложенные коды маркировки в кеше маркируемой продукции
// 
// Параметры:
//  АдресИлиФормаКэшаМаркируемойПродукции  - ФормаКлиентскогоПриложения - Форма, на которой находится кеш
//                                         - Строка - Адрес временного хранилища кеша маркируемой продукции
Процедура ОчиститьОтложенныеКодыМаркировки(АдресИлиФормаКэшаМаркируемойПродукции) Экспорт

	Если ТипЗнч(АдресИлиФормаКэшаМаркируемойПродукции) = Тип("ФормаКлиентскогоПриложения") Тогда
		АдресКэшаМаркируемойПродукции = АдресИлиФормаКэшаМаркируемойПродукции.КэшМаркируемойПродукции;
	ИначеЕсли ТипЗнч(АдресИлиФормаКэшаМаркируемойПродукции) = Тип("Строка") Тогда
		АдресКэшаМаркируемойПродукции = АдресИлиФормаКэшаМаркируемойПродукции;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(АдресКэшаМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(АдресКэшаМаркируемойПродукции);
	КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Очистить();
	
	ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, АдресКэшаМаркируемойПродукции);
	
КонецПроцедуры

// Формирует данные кодов маркировок на основании данных формы и помещает их во временное хранилище.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ОчиститьОтложенныеКоды - Булево - необходимость очистки отложенных для повторной обработки водов маркировки.
Процедура ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования, ОчиститьОтложенныеКоды = Ложь) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции)
		Или ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	
	Если ОчиститьОтложенныеКоды Тогда
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Очистить();
	КонецЕсли;
	
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда
		
		ШтрихкодыУпаковок = ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
		КоллекцияВсехШтрихкодовДерева(
			ШтрихкодыУпаковок.ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);
		
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает кеш маркируемой продукции
// 
// Параметры:
//  АдресИлиФормаКэшаМаркируемойПродукции  - ФормаКлиентскогоПриложения - Форма, на которой находится кеш
//                                         - Строка - Адрес временного хранилища кеша маркируемой продукции
Процедура ОчиститьКэшМаркируемойПродукции(АдресИлиФормаКэшаМаркируемойПродукции) Экспорт
	
	Если ТипЗнч(АдресИлиФормаКэшаМаркируемойПродукции) = Тип("ФормаКлиентскогоПриложения") Тогда
		АдресКэшаМаркируемойПродукции = АдресИлиФормаКэшаМаркируемойПродукции.КэшМаркируемойПродукции;
	ИначеЕсли ТипЗнч(АдресИлиФормаКэшаМаркируемойПродукции) = Тип("Строка") Тогда
		АдресКэшаМаркируемойПродукции = АдресИлиФормаКэшаМаркируемойПродукции;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(АдресКэшаМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(АдресКэшаМаркируемойПродукции);
	КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Очистить();
	КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "";
	КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные = Новый Массив;
	КэшМаркируемойПродукции.ОбработанныеКодыМаркировки.Очистить();
	
	ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, АдресКэшаМаркируемойПродукции);
	
КонецПроцедуры

// Создает элемент справочника штрихкоды упаковок на основании данных штрихкода.
//
// Параметры:
//  ДанныеШтрихкода - См. ИнициализироватьДанныеШтрихкода.
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на созданный элемент справочника.
Функция СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		Возврат ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И Не ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой Тогда
		
		Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
				ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			Иначе
				ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
		Иначе
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеШтрихкода);
	
	Если ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		Если Не ЗначениеЗаполнено(ДанныеНовойУпаковки.Количество) Тогда
			Если Не ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
				ДанныеНовойУпаковки.Количество = 1;
				ДанныеШтрихкода.Количество = 1;
			Иначе
				ДанныеНовойУпаковки.Количество = ДанныеШтрихкода.Коэффициент;
				ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
				ДанныеШтрихкода.Количество = ДанныеШтрихкода.Коэффициент;
			КонецЕсли;
		Иначе
			Если ДанныеШтрихкода.Количество <> 1 Тогда
				ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеНовойУпаковки.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеШтрихкода.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор
		И КоличествоСоответствуетИндивидуальнойПотребительскойУпаковке(ДанныеШтрихкода) Тогда
		
		Если (ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Или ДанныеШтрихкода.ПрисутствуетТабачнаяПродукция)
				И ДанныеШтрихкода.КоличествоПотребительскихУпаковок > 1 Тогда
			ДанныеНовойУпаковки.Количество = ДанныеНовойУпаковки.Количество * ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
		ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции)
				И ДанныеШтрихкода.КоличествоПотребительскихУпаковок > 1 Тогда
			ДанныеНовойУпаковки.Количество = ДанныеНовойУпаковки.Количество * ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
		Иначе
			Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.КоличествоПотребительскихУпаковок)
				И ДанныеШтрихкода.КоличествоПотребительскихУпаковок <> ДанныеШтрихкода.Коэффициент Тогда
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
	КонецЕсли;
	
	Поля = Новый Структура("ЧастичноеВыбытие", Ложь);
	ЗаполнитьЗначенияСвойств(Поля, ДанныеШтрихкода);
	Если Поля.ЧастичноеВыбытие Тогда
		Если ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура Тогда
			ДанныеНовойУпаковки.Номенклатура = ДанныеШтрихкода.ЧастичноеВыбытиеНоменклатура;
			ДанныеНовойУпаковки.Характеристика = ДанныеШтрихкода.ЧастичноеВыбытиеХарактеристика;
		КонецЕсли;
		Описание = РегистрыСведений.ОписаниеНоменклатурыИС.ПолучитьОписание(ДанныеНовойУпаковки.Номенклатура).Получить(ДанныеНовойУпаковки.Номенклатура);
		Если Описание.КоличествоВПотребительскойУпаковке <> 1 Тогда
			ДанныеНовойУпаковки.Количество = Описание.КоличествоВПотребительскойУпаковке;
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
		Иначе
			ДанныеНовойУпаковки.Количество = 1;
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 0;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаписи = Неопределено;
	Если ДанныеНовойУпаковки.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		ПараметрыЗаписи = Новый Структура("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
	КонецЕсли;
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки,,ПараметрыЗаписи);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

Функция КоличествоСоответствуетИндивидуальнойПотребительскойУпаковке(ДанныеШтрихкода)
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		Возврат ДанныеШтрихкода.КоличествоПотребительскихУпаковок = 1;
	Иначе
		Возврат ДанныеШтрихкода.Количество = 1;
	КонецЕсли;
КонецФункции

// Дополняет коллекции Дерево упаковок и таблицу значений маркируемая продукция в данных по штрихкодам значениями
// вложенных штрихкодов.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ВложенныеШтрихкодыПоДаннымСервиса - См. ИнициализацияВложенныхШтрихкодов
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ОтборПоВидуПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - фильтр для добавления
//  КопируемыеКолонки - Неопределено, Строка - колонки которые будут скопированы
Процедура ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, ВложенныеШтрихкодыПоДаннымСервиса, ПараметрыСканирования, ОтборПоВидуПродукции = Неопределено, КопируемыеКолонки = Неопределено) Экспорт
	
	Если ВложенныеШтрихкодыПоДаннымСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыПоДаннымСервиса;
		Возврат;
	КонецЕсли;
	
	ДеревоИзвестныхУпаковок       = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	ДеревоУпаковокПоДаннымСервиса = ВложенныеШтрихкодыПоДаннымСервиса.ДеревоУпаковок;
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		СоответствиеСтарыхИНовыхСтрокДерева = Новый Соответствие;
	Иначе
		СоответствиеСтарыхИНовыхСтрокДерева = Неопределено;
	КонецЕсли;
	
	ИмяПоляИндекса = "НормализованныйШтрихкод";
	СоответствиеСтрокДереваУпаковок = ПроверкаИПодборПродукцииИСКлиентСервер.СоответствиеСтрокДереваУпаковок(
		ДеревоИзвестныхУпаковок, ИмяПоляИндекса);
	
	СтрокиДереваКУдалению = Новый Соответствие;
	ЕстьКолонкаСодержитСерыеКоды = ДеревоУпаковокПоДаннымСервиса.Колонки.Найти("СодержитСерыеКоды") <> Неопределено;
	
	Для Каждого СтрокаИсточника Из ДеревоУпаковокПоДаннымСервиса.Строки Цикл
		
		НеДополнятьСтрокиДерева = Ложь;
		
		НайденнаяСтрока = СоответствиеСтрокДереваУпаковок[СтрокаИсточника[ИмяПоляИндекса]];
		Если НайденнаяСтрока = Неопределено Тогда
			СтрокаПриемника = ДеревоИзвестныхУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		Иначе
			СтрокаПриемника = НайденнаяСтрока;
			
			Если НайденнаяСтрока.Строки.Количество()
				И Не (ЕстьКолонкаСодержитСерыеКоды
				      И СтрокаИсточника.СодержитСерыеКоды И СтрокаИсточника.Строки.Количество() = 0) Тогда
				
				НеДополнятьСтрокиДерева = Истина;
				// Если дополняемый узел дерева уже имеет вложенные строки, то
				// строки из источника игнорируются (указанное поведение используется в документе Маркировка товаров).
				// В случае, если дерево упаковок по данным ТСД дополняется вложениями, например, блоки табака дополняются пачками.
				СоответствиеВложенныхСтрокДереваУпаковокИсточника = ПроверкаИПодборПродукцииИСКлиентСервер.СоответствиеСтрокДереваУпаковок(
					СтрокаИсточника, ИмяПоляИндекса);
				Для Каждого КлючИЗначение Из СоответствиеВложенныхСтрокДереваУпаковокИсточника Цикл
					
					ВложеннаяСтрокаИсточника = КлючИЗначение.Значение;
					
					СтрокаДереваПриемника = СоответствиеСтрокДереваУпаковок[КлючИЗначение.Ключ];
					Если СтрокаДереваПриемника = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если КопируемыеКолонки <> Неопределено
						И Не ЗначениеЗаполнено(СтрокаДереваПриемника.Номенклатура) Тогда
						ЗаполнитьЗначенияСвойств(СтрокаДереваПриемника, ВложеннаяСтрокаИсточника, КопируемыеКолонки);
					Иначе
						ИсходноеЗначениеВходящий = СтрокаДереваПриемника.Входящий;
						ЗаполнитьЗначенияСвойств(СтрокаДереваПриемника, ВложеннаяСтрокаИсточника);
						СтрокаДереваПриемника.Входящий = ИсходноеЗначениеВходящий;
					КонецЕсли;
					
					Если СтрокаДереваПриемника.Строки.Количество() = 0
						И ВложеннаяСтрокаИсточника.Строки.Количество() > 0 Тогда
						
						Если СоответствиеСтарыхИНовыхСтрокДерева <> Неопределено Тогда
							СоответствиеСтарыхИНовыхСтрокДерева.Вставить(ВложеннаяСтрокаИсточника, СтрокаДереваПриемника);
						КонецЕсли;
						
						ДополнитьДеревоУпаковок(
							СтрокаДереваПриемника, ВложеннаяСтрокаИсточника,
							СоответствиеСтарыхИНовыхСтрокДерева, ОтборПоВидуПродукции);
						
					КонецЕсли;
					
					Если ЕстьКолонкаСодержитСерыеКоды И ВложеннаяСтрокаИсточника.СодержитСерыеКоды И ВложеннаяСтрокаИсточника.Строки.Количество() = 0 Тогда
						ЗаполнитьСтрокиДереваКУдалению(СтрокаДереваПриемника.Строки, СтрокиДереваКУдалению);
						СтрокаДереваПриемника.Строки.Очистить();
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЕстьКолонкаСодержитСерыеКоды
				И СтрокаИсточника.СодержитСерыеКоды И СтрокаИсточника.Строки.Количество() = 0 Тогда
				ЗаполнитьСтрокиДереваКУдалению(СтрокаПриемника.Строки, СтрокиДереваКУдалению);
				СтрокаПриемника.КоличествоПотребительскихУпаковок = СтрокаИсточника.КоличествоПотребительскихУпаковок;
				СтрокаПриемника.Строки.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если СоответствиеСтарыхИНовыхСтрокДерева <> Неопределено Тогда
			СоответствиеСтарыхИНовыхСтрокДерева.Вставить(СтрокаИсточника, СтрокаПриемника);
		КонецЕсли;
		
		Если НеДополнятьСтрокиДерева Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьДеревоУпаковок(
			СтрокаПриемника, СтрокаИсточника, СоответствиеСтарыхИНовыхСтрокДерева, ОтборПоВидуПродукции);
		
	КонецЦикла;
	
	Индекс = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки[Индекс];
		
		Если СтрокаДанных.СтрокаДерева <> Неопределено
			И СтрокиДереваКУдалению[СтрокаДанных.СтрокаДерева] <> Неопределено Тогда
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Удалить(СтрокаДанных);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет текст запроса получения признаков номенклатуры: 
//   * МаркируемаяПродукция,
//   * ВидПродукции.
// Помещает признаки во временную таблицу "СвойстваМаркируемойПродукции".
// 
// Параметры:
//  ТаблицаИсточник - Строка - имя временной таблицы запроса-источника данных.
// Возвращаемое значение:
//  Строка - Текст формирования временной таблицы запроса.
//
Функция ТекстЗапросаСвойстваМаркируемойПродукции(ТаблицаИсточник = "ДанныеШтрихкодовУпаковок") Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура               КАК Номенклатура,
	|	МАКСИМУМ(ЛОЖЬ)                                      КАК МаркируемаяПродукция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка) КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ТаблицаИсточник КАК ДанныеШтрихкодовУпаковок
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИсточник", ТаблицаИсточник);
	
	ШтрихкодированиеИСПереопределяемый.ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапроса, ТаблицаИсточник);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняет сравнение двух деревьев значений: Дерево по данным информационной базы, сформированнное на базе справочника
//   "Штрихкоды упаковок товаров" и дерева, полученного из сервиса государственной ИС.
// 
// Параметры:
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок.
//  ДеревоУпаковокПоДаннымСервиса - ДеревоЗначений - Дерево, полученное из сервиса государственной ИС.
//  ЕстьРасхождения - Булево - Истина, если выявлено расхождение при сравнении.
//  ПараметрыСканирования - См. ПараметрыСканирования.
//  ПолноеСравнениеДеревьев - Булево - сравнить деревья, даже если ШтрихкодУпаковки не записан в базу 
//                                     (используется при сравнении дерева упаковок отчетов производственной линии).
Процедура ВыявитьРасхожденияВСоставахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса,
	ЕстьРасхождения, ПараметрыСканирования = Неопределено, ПолноеСравнениеДеревьев = Ложь) Экспорт
	
	КэшПроверенныхСтрок        = Новый Соответствие;
	ИсходныеЗначенияШтрихкодов = Новый Соответствие;
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "НормализованныйШтрихкод";
	
	ШтрихкодированиеИССлужебный.НормализоватьДеревоЗначенийРекурсивно(
		ДеревоУпаковок, ПараметрыНормализацииКМ, ИсходныеЗначенияШтрихкодов);
	
	ШтрихкодированиеИССлужебный.НормализоватьДеревоЗначенийРекурсивно(
		ДеревоУпаковокПоДаннымСервиса, ПараметрыНормализацииКМ, ИсходныеЗначенияШтрихкодов);
	
	ДеревоУпаковокДляСравнения = Новый Структура;
	ДеревоУпаковокДляСравнения.Вставить("Строки", Новый Массив);
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
			И Не ЗначениеЗаполнено(СтрокаДерева.ТекстОшибки) 
			Или ПолноеСравнениеДеревьев Тогда
			ДеревоУпаковокДляСравнения.Строки.Добавить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	ВыявитьРасхожденияВСтрокахДеревьев(
		ДеревоУпаковокДляСравнения, ДеревоУпаковокПоДаннымСервиса, КэшПроверенныхСтрок, ЕстьРасхождения,
		ТекстОшибкиОтсутствуетПоДаннымСервисаИСМП(), Истина);
	ВыявитьРасхожденияВСтрокахДеревьев(
		ДеревоУпаковокПоДаннымСервиса, ДеревоУпаковок, КэшПроверенныхСтрок, ЕстьРасхождения,
		ТекстОшибкиОтсутствуетПоДаннымИнформационнойБазы(), Ложь, ПараметрыСканирования);
	
	Для Каждого КлючИЗначение Из ИсходныеЗначенияШтрихкодов Цикл
		
		СтрокаДерева                         = КлючИЗначение.Ключ;
		СтрокаДерева.НормализованныйШтрихкод = КлючИЗначение.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет контроль заполнения серии с учетом сохраненного ранее выбора пользователя.
// 
// Параметры:
//  ПравилаПроверкиНаОшибки - Структура - набор правил:
//   * КонтрольСерий - Массив - строки дерева упаковок или данных штрихкода, где требуется указание серии.
//  ПараметрыСканирования - См. ПараметрыСканирования.
Процедура ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(ПравилаПроверкиНаОшибки, ПараметрыСканирования) Экспорт
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий")
		И ПравилаПроверкиНаОшибки.КонтрольСерий.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСерий Цикл
			
			СтрокаДанных.ТребуетсяВыборСерии = Истина;
			
			Если ДанныеСохраненногоВыбора <> Неопределено
				И СтрокаДанных.Номенклатура = ДанныеСохраненногоВыбора.Номенклатура
				И СтрокаДанных.Характеристика = ДанныеСохраненногоВыбора.Характеристика
				И СтрокаДанных.Серия = ДанныеСохраненногоВыбора.Серия Тогда
				СтрокаДанных.ТребуетсяВыборСерии = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует вложенные штрихкоды без учета специфики маркируемой продукции.
//
// Параметры:
//  МассивУпаковок - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - Список штрихкодов упаковок.
//  ПараметрыСканирования     - См. ПараметрыСканирования.
// Возвращаемое значение:
//  См. ИнициализацияВложенныхШтрихкодов
Функция ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ПараметрыСканирования)
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ВложенныеШтрихкоды              = ИнициализацияВложенныхШтрихкодов();
	
	Запрос = Новый Запрос(ТекстЗапросаСоставаУпаковокВИерархии());
	
	КоллекцияУпаковок = ОбщегоНазначения.СкопироватьРекурсивно(МассивУпаковок, Ложь);
	
	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;
	
	ДопустимыСтрокиДанныхБезВидаПродукции = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ОпределениеВидаПродукцииИСМП")
		И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		ДетализацияСоставаНабора = ПараметрыСканирования.СозданиеНаборов;
	Иначе
		ДетализацияСоставаНабора = Истина;
	КонецЕсли;
	
	ОбщиеМодули                    = ОбщиеМодулиПодсистем();
	ТолькоУчитываемыеВидыПродукции = Не ДопустимыСтрокиДанныхБезВидаПродукции;
	
	ПустоеЗначениеНоменклатуры = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	НастройкиРазбора = Новый Структура;
	НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбора.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, ТолькоУчитываемыеВидыПродукции));
	НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок",           КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ПустоеЗначениеНоменклатуры);
		//@skip-check query-in-loop
		Выборка = Запрос.Выполнить().Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				ТекущаяУпаковка = Выборка["УпаковкаУровень" + ТекущийУровень];
				
				Если Не ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
					Прервать;
				КонецЕсли;
				
				Значение = СоответствиеСтрокДереваУпаковок[ТекущаяУпаковка];
				Если Значение = Неопределено Тогда
					
					Если Не ДетализацияСоставаНабора
						И ТипЗнч(РодительскиеДанные) = Тип("СтрокаДереваЗначений")
						И РодительскиеДанные.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
						И РодительскиеДанные.ТипУпаковки <> Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
						Продолжить;
					КонецЕсли;
					
					РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
					ЗаполнитьСтрокуДереваУпаковокПоВыборке(
						РодительскиеДанные, Выборка, ТекущийУровень, ОбщиеМодули,
						НастройкиРазбора, ПараметрыСканирования);
					ЗаполнитьСтрокуДереваУпаковокПоПараметрамУказанияСерий(
						РодительскиеДанные, ПараметрыСканирования);
					ЗаполнитьСтрокуДереваПоДаннымРазбораШтрихкода(
						РодительскиеДанные, ОбщиеМодули, НастройкиРазбора, ПараметрыСканирования);
					
					СоответствиеСтрокДереваУпаковок.Вставить(ТекущаяУпаковка, РодительскиеДанные);
					
					Если ЗначениеЗаполнено(РодительскиеДанные.ВидПродукции) Тогда
						ВложенныеШтрихкоды.ВидыПродукции.Добавить(РодительскиеДанные.ВидПродукции);
					КонецЕсли;
					
				Иначе
					
					РодительскиеДанные = Значение;
					
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда
					КоллекцияУпаковок.Добавить(ТекущаяУпаковка);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.ОтборПоВидуПродукции
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		ОтобратьСтрокиДереваПоВидуПродукции(
			ВложенныеШтрихкоды.ДеревоУпаковок,
			СоответствиеСтрокДереваУпаковок,
			ПараметрыСканирования.ДопустимыеВидыПродукции[0]);
	КонецЕсли;
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	ИспользуетсяСоответствиеШтрихкодовСтрокДерева = Ложь;
	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ИспользуетсяСоответствиеШтрихкодовСтрокДерева") Тогда
		ИспользуетсяСоответствиеШтрихкодовСтрокДерева = ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева;
	КонецЕсли;
	
	Если Не ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
			КэшУпаковокВерхнегоУровня = Новый Соответствие;
			
			СтрокаДерева = КлючЗначение.Значение;
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				
				НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
				НоваяСтрока.СтрокаДерева           = СтрокаДерева;
				НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева, КэшУпаковокВерхнегоУровня);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ВложенныеШтрихкоды.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВложенныеШтрихкоды.ВидыПродукции);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Для заполненной серии в известной упаковке может возникнуть необходимость не учитывать ее для документа
//
Процедура ЗаполнитьСтрокуДереваУпаковокПоПараметрамУказанияСерий(СтрокаДерева, ПараметрыСканирования)
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыСканирования.ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.Серия) Тогда
		Возврат;
	ИначеЕсли Не ИнтеграцияИС.ТребуетсяВыборСерии(СтрокаДерева, ПараметрыСканирования) Тогда
		СтрокаДерева.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	КонецЕсли;
	
КонецПроцедуры

// Определяет допустимость обработки продукции ИС МП по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВключаяТабачнуюПродукцию - Булево - допустимость обработки в т.ч. табачной продукции
// Возвращаемое значение:
//  Булево - Истина, если допустима.
Функция ДопустимаПродукцияИСМП(ПараметрыСканирования, ВключаяТабачнуюПродукцию = Ложь) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				И ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
			Возврат Не ПараметрыСканирования.ОбрабатыватьПивоВЕГАИС;
		ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, ВключаяТабачнуюПродукцию) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработатьУточнениеДанныхДляФормыПроверкиИПодбора(РезультатВыбора, РезультатОбработки, ПараметрыСканирования, КэшированныеЗначения) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") Тогда
		// Уточнены данные по упаковке
		РезультатОбработки.ТребуетсяУточнениеДанных = Ложь;
		РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки = Ложь;
		Возврат;
	ИначеЕсли РезультатВыбора.Свойство("ШтрихкодУпаковки") Тогда
		// Уточнены данные - введен код маркировки
		Если ТипЗнч(РезультатОбработки.ДанныеШтрихкода) = Тип("Структура") Тогда
			ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
			Для Каждого КлючИЗначение Из РезультатВыбора Цикл
				Если ЗначениеЗаполнено(КлючИЗначение.Значение)
					Или Не ДанныеШтрихкода.Свойство(КлючИЗначение.Ключ) Тогда
					ДанныеШтрихкода.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			Если РезультатВыбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И РезультатВыбора.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
				ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ДанныеШтрихкода = РезультатВыбора;
		КонецЕсли;
		РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
		РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = Ложь;
	Иначе
		
		Если РезультатВыбора.Свойство("ДанныеВыбора") Тогда
			ДанныеВыбора = РезультатВыбора.ДанныеВыбора;
		КонецЕсли;
		
		РезультатОбработки.ТребуетсяВыборСерии = Ложь;
		
		Если РезультатВыбора.ЗапомнитьВыбор Тогда
			ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = РезультатВыбора.ДанныеВыбора;
		КонецЕсли;
		
		Если ТипЗнч(РезультатОбработки.ДанныеШтрихкода) = Тип("Структура") Тогда
			ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
		Иначе
			ДанныеШтрихкода = ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		КонецЕсли;
		
		// Флаг может быть сброшен в Ложь при добавлении в форму проверки и подбора GTIN как ОСУ
		Если ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры И ДанныеВыбора.ЭтоШтрихкодНоменклатуры Тогда
			РезультатОбработки = ОбработатьУточнениеНоменклатуры(ПараметрыСканирования, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
			Возврат;
		КонецЕсли;
		Если ДанныеШтрихкода.Свойство("ТребуетсяВыборСерии") Тогда
			ДанныеШтрихкода.ТребуетсяВыборСерии = Ложь;
		КонецЕсли;
		Если ДанныеШтрихкода.Свойство("ТребуетсяВыборВСД") Тогда
			ДанныеШтрихкода.ТребуетсяВыборВСД = Ложь;
		КонецЕсли;
		
		ПерезаписатьШтрихкодУпаковки     = ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода;
		ИменаСвойств                     = Новый Массив;
		ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(ДанныеШтрихкода, ПараметрыСканирования);
		
		ЭтоДобавлениеОСУПоGTIN =
			ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			И ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры
			И Не ДанныеВыбора.ЭтоШтрихкодНоменклатуры;
		
		Если ДанныеВыбора.Свойство("ТребуетВзвешивания") Тогда
			ДанныеШтрихкода.ТребуетВзвешивания = ДанныеВыбора.ТребуетВзвешивания;
			ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета = ДанныеВыбора.ПроизвольнаяЕдиницаУчета;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из ДанныеВыбора Цикл
			
			ИмяСвойства = КлючЗначение.Ключ;
			Если Не ДанныеШтрихкода.Свойство(ИмяСвойства) Тогда
				Продолжить;
			ИначеЕсли Не ДанныеШтрихкода.ТребуетВзвешивания
				И Не ЭтоСтрокаДанныхЧастичногоВыбытия
				И Не ЭтоДобавлениеОСУПоGTIN
				И ИмяСвойства = "Количество" Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоЗаменаНоменклатуры = (ЭтоСтрокаДанныхЧастичногоВыбытия
				И ДанныеВыбора.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура
				И (ИмяСвойства = "Номенклатура"
				Или ИмяСвойства = "Характеристика"
				Или ИмяСвойства = "Упаковка"
				Или ИмяСвойства = "ЧастичноеВыбытиеНоменклатура"
				Или ИмяСвойства = "ЧастичноеВыбытиеХарактеристика"));
			
			Если Не ЗначениеЗаполнено(КлючЗначение.Значение) И Не ЭтоЗаменаНоменклатуры
				Или ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяСвойства = "Номенклатура"
				Или ИмяСвойства = "Характеристика"
				Или ИмяСвойства = "Серия"
				Или ИмяСвойства = "Количество" И Не ЭтоСтрокаДанныхЧастичногоВыбытия
				Или ИмяСвойства = "КоличествоПотребительскихУпаковок" Тогда
				ПерезаписатьШтрихкодУпаковки = ПараметрыСканирования.СоздаватьШтрихкодУпаковки;
				ИменаСвойств.Добавить(ИмяСвойства);
			КонецЕсли;
			
			Если ИмяСвойства = "ГоденДо"
				Или ИмяСвойства = "ИдентификаторПроисхожденияВЕТИС" Тогда
				ИменаСвойств.Добавить(ИмяСвойства);
			КонецЕсли;
			
			ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение;
			
		КонецЦикла;
		
		Если ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода Тогда
			ИмяСвойства = "Количество"; // Может быть присвоено на клиенте в напрямую в данные штрихкода из весов
			Если ИменаСвойств.Найти(ИмяСвойства) = Неопределено Тогда
				ИменаСвойств.Добавить(ИмяСвойства);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
		
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
			ДанныеШтрихкода.ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(ДанныеШтрихкода.Номенклатура);
		КонецЕсли;
		
		Если Не ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
			Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
				Модуль.ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки);
			КонецЕсли;
			Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				Модуль.ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки);
			КонецЕсли;
		КонецЕсли;
		
		РазобратьШтрихкод = Ложь;
		
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
			
			ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
			ДанныеШтрихкода.ШтрихкодBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(РезультатОбработки.Штрихкод);
			
			РазобратьШтрихкод = Истина;
			
		КонецЕсли;
		
		// Флаг сброшен в Ложь при добавлении в форму проверки и подбора GTIN как ОСУ
		Если ЭтоДобавлениеОСУПоGTIN Тогда
			
			ДанныеШтрихкода.Штрихкод = ДанныеВыбора.КодМаркировки;
			ДанныеШтрихкода.ШтрихкодBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ДанныеВыбора.КодМаркировки);
			ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка();
			
			РазобратьШтрихкод = Истина;
			
		КонецЕсли;
		
		Если РазобратьШтрихкод Тогда
			
			ДанныеШтрихкода.ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
				ДанныеШтрихкода.Штрихкод,
				ДанныеШтрихкода.ВидПродукции,
				ДанныеШтрихкода.ПримечаниеКРазборуШтрихкода,
				Неопределено,
				Неопределено);
			
		КонецЕсли;
		
		Если ИменаСвойств.Количество() > 0 Тогда
			ДополнитьДеревоУпаковокИШтрихкодыУпаковокУточненнымиДанными(ДанныеШтрихкода, ИменаСвойств, ПерезаписатьШтрихкодУпаковки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
			И ПерезаписатьШтрихкодУпаковки Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
				Блокировка.Заблокировать();
				
				ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода,, ПараметрыСканирования);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				
				ВызватьИсключение ПодробноеПредставлениеОшибки;
				
			КонецПопытки;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
			И ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) Тогда
			
			ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
			
		// Считали RFID-метку, но номер КиЗ еще не получен
		ИначеЕсли ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			И ДанныеШтрихкода.ДанныеRFID <> Неопределено
			И Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) Тогда
			
			РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = Истина;
			
		КонецЕсли;
		
		РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
		
	КонецЕсли;
	
	РезультатОбработки.ТребуетсяУточнениеДанных = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработкаДанныхПоШтрихкодамУспешноЗавершена(РезультатОбработки) Экспорт
	
	Если РезультатОбработки.ЕстьОшибки
		Или РезультатОбработки.ТребуетсяУточнениеДанных
		Или РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки
		Или РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры
		Или РезультатОбработки.ОткрытьФормуВводаКодаМаркировки Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(СтрокаДанных, ДанныеРазбора) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеРазбора.ВидУпаковки) Тогда
		СтрокаДанных.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
		ДанныеРазбора.ВидУпаковки = СтрокаДанных.ВидУпаковки;
	КонецЕсли;
	
КонецПроцедуры

// Параметры дополнения вложенных штрихкодов упаковок для заполнения дерева упаковок и маркированных товаров.
// 
// Возвращаемое значение:
//  Структура - Параметры дополнения вложенных штрихкодов упаковок:
// * ДанныеЧастичногоВыбытия - Соответствие:
//                                         * Ключ    - СправочникСсылка.ШтрихкодыУпаковокТоваров - штрихкод упаковки.
//                                         * Значение - см. НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие.
Функция ПараметрыДополненияВложенныхШтрихкодовУпаковок() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДанныеЧастичногоВыбытия", Новый Соответствие());
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

 // Создает и возвращает новый элемент дополнения вложенных штрихкодов упаковок.
// 
// Возвращаемое значение:
//  Структура - Новый элемент дополнения вложенных штрихкодов упаковок частичное выбытие:
// * Количество                     - Число                                                 - Числитель частичного выбытия (часть выбываемой упаковки).
// * ЧастичноеВыбытиеВариантУчета   - ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИСМП - Настроенный вариант учета
// * ЧастичноеВыбытиеНоменклатура   - ОпределяемыйТип.Номенклатура                          - Подменная номенклатура, если поддерживает вариант учета.
// * ЧастичноеВыбытиеХарактеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры            - Подменная характеристика, если поддерживает вариант учета.
Функция НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Количество");
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеВариантУчета");
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеНоменклатура");
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеХарактеристика");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает список элементов штрихкодов упаковок, находящихся на форме объекта.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Список элементов штрихкодов формы объекта.
Функция УпаковкиОбъекта(Форма, ПараметрыСканирования)
	
	УпаковкиОбъекта = Новый Массив;
	
	Если ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = Неопределено Тогда
		Возврат УпаковкиОбъекта;
	КонецЕсли;
	
	ТабличнаяЧастьШтрихкодыУпаковок = Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];
	
	ИменаКолонокШтрихкодовУпаковок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина);
	
	Для Каждого ИмяКолонки Из ИменаКолонокШтрихкодовУпаковок Цикл
		
		УпаковкиТабЧасти = ТабличнаяЧастьШтрихкодыУпаковок.Выгрузить(,ИмяКолонки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УпаковкиОбъекта, УпаковкиТабЧасти, Истина);
		
	КонецЦикла;
	
	Возврат УпаковкиОбъекта;
	
КонецФункции

// Сравнивает Дерево значений 1 и Дерево значений 2. Фиксирует расхождения.
// 
// Параметры:
//  ДеревоЗначений1 - ДеревоЗначений - Дерево №1
//  ДеревоЗначений2 - ДеревоЗначений - Дерево №2
//  КэшПроверенныхСтрок - Соответствие Из СтрокаДереваЗначений - Кэш проверенных строк
//  ЕстьРасхождения - Булево - Истина, если выявлено расхождение при сравнении
//  ТекстОшибки - Строка - Текст сообщения при обнаружении расхождения
//  ПерваяИтерация - Булево - Признак выполнения первой итерации сравнения
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ВыявитьРасхожденияВСтрокахДеревьев(ДеревоЗначений1, ДеревоЗначений2, КэшПроверенныхСтрок, ЕстьРасхождения,
	ТекстОшибки, ПерваяИтерация, ПараметрыСканирования = Неопределено)
	
	ВидДетализации = Перечисления.ДетализацияСтруктурыХраненияИС;
	
	ТипСтрокаДереваЗначений = Тип("СтрокаДереваЗначений");
	Если ТипЗнч(ДеревоЗначений2) = ТипСтрокаДереваЗначений Тогда
		ЕстьКолонкаСодержитСерыеКоды = ДеревоЗначений2.Владелец().Колонки.Найти("СодержитСерыеКоды") <> Неопределено;
	Иначе
		ЕстьКолонкаСодержитСерыеКоды = Ложь;
	КонецЕсли;
	
	СозданиеНаборов = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("СозданиеНаборов")
		И ПараметрыСканирования.СозданиеНаборов;
	
	ИндексНормализованныйШтрихкод = Новый Соответствие();
	Для Каждого СтрокаДереваИндекс Из ДеревоЗначений2.Строки Цикл
		ИндексНормализованныйШтрихкод.Вставить(СтрокаДереваИндекс.НормализованныйШтрихкод, СтрокаДереваИндекс);
	КонецЦикла;
	
	Для Каждого СтрокаДерева1 Из ДеревоЗначений1.Строки Цикл
		
		СоответствующаяСтрокаДерева2 = КэшПроверенныхСтрок.Получить(СтрокаДерева1);
		Если СоответствующаяСтрокаДерева2 <> Неопределено Тогда
			ВыявитьРасхожденияВСтрокахДеревьев(
				СтрокаДерева1, СоответствующаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения,
				ТекстОшибки, ПерваяИтерация, ПараметрыСканирования);
			Продолжить;
		КонецЕсли;
		
		Если ПерваяИтерация Тогда
			
			НайденнаяСтрокаДерева2 = ИндексНормализованныйШтрихкод.Получить(СтрокаДерева1.НормализованныйШтрихкод);
			Если НайденнаяСтрокаДерева2 = Неопределено Тогда
				
				Если ЕстьКолонкаСодержитСерыеКоды
					И ДеревоЗначений2.СодержитСерыеКоды Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДеревоЗначений2.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
					И Не СозданиеНаборов Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева1.ТекстОшибки = ТекстОшибки;
				СтрокаДерева1.ЕстьОшибки  = Истина;
				ЕстьРасхождения = Истина;
				
			Иначе
				КэшПроверенныхСтрок.Вставить(НайденнаяСтрокаДерева2, СтрокаДерева1);
				ВыявитьРасхожденияВСтрокахДеревьев(
					СтрокаДерева1, НайденнаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения,
					ТекстОшибки, ПерваяИтерация, ПараметрыСканирования);
			КонецЕсли;
			
		Иначе
		
			Если ПараметрыСканирования <> Неопределено
				И (ПараметрыСканирования.ДетализацияСтруктурыХранения = ВидДетализации.КоробаСГрупповымиУпаковками
					Или ПараметрыСканирования.ДетализацияСтруктурыХранения = ВидДетализации.ГрупповыеУпаковки)
				И СтрокаДерева1.Родитель <> Неопределено
				И (СтрокаДерева1.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
					Или СтрокаДерева1.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыСканирования <> Неопределено
				И ПараметрыСканирования.ДетализацияСтруктурыХранения = ВидДетализации.ПалетыСМонотоварнымиКоробами
				И СтрокаДерева1.Родитель <> Неопределено
				И СтрокаДерева1.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ЗначениеЗаполнено(СтрокаДерева1.Родитель.GTIN) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрокаДерева2 = ИндексНормализованныйШтрихкод.Получить(СтрокаДерева1.НормализованныйШтрихкод);
			Если НайденнаяСтрокаДерева2 = Неопределено Тогда
				НоваяСтрокаДерева2 = ДеревоЗначений2.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева2, СтрокаДерева1);
				НоваяСтрокаДерева2.СоставКодаМаркировки = СтрокаДерева1.СоставКодаМаркировки;
				НоваяСтрокаДерева2.ТипШтрихкода         = СтрокаДерева1.ТипШтрихкода;
				НоваяСтрокаДерева2.ТекстОшибки          = ТекстОшибки;
				НоваяСтрокаДерева2.ЕстьОшибки           = Истина;
				ЕстьРасхождения = Истина;
				Пока НоваяСтрокаДерева2.Родитель <> Неопределено Цикл
					НоваяСтрокаДерева2 = НоваяСтрокаДерева2.Родитель;
					Если Не ЗначениеЗаполнено(НоваяСтрокаДерева2.ТекстОшибки) Тогда
						НоваяСтрокаДерева2.ТекстОшибки = ТекстОшибки;
					КонецЕсли;
					НоваяСтрокаДерева2.ЕстьОшибки = Истина;
				КонецЦикла;
				ИндексНормализованныйШтрихкод.Вставить(НоваяСтрокаДерева2.НормализованныйШтрихкод, НоваяСтрокаДерева2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Если (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
			Или ВидПродукции = Неопределено) Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
			Модуль.ЗаполнитьПараметрыСканирования(
				ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок.
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок.
Процедура ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции, ПараметрыРежимаИсправленияОшибок = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции)
			Или Не ЗначениеЗаполнено(ВидПродукции) Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
			Модуль.ЗаполнитьПараметрыСканирования(Контекст, ВидПродукции, ПараметрыСканирования, ПараметрыРежимаИсправленияОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует соответствие, ключ которого - строка дерева, значение - структура, свойства и значения которой равны
// строке дерева.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  Соответствие - Соответствие Из СтрокаДереваЗначений - Ключ - строка дерева, значение - структура значений строки дерева.
Процедура ПоместитьДанныеСтрокДереваВСоответствие(СтрокиДерева, Соответствие)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДерева);
		Соответствие.Вставить(СтрокаДерева.НормализованныйШтрихкод, ДанныеШтрихкода);
		ПоместитьДанныеСтрокДереваВСоответствие(СтрокаДерева.Строки, Соответствие);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет информацию по EAN кодов маркировки по данным ИБ. Информация помещается в таблицу ДанныеПоШтрихкодам.ДанныеКодовМаркировки.
// 
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ПараметрыСканирования.
//  ДанныеКодовМаркировки - Массив, ТаблицаЗначений, Неопределено - Фильтр для обработки
Процедура ЗаполнитьСведенияПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ДанныеКодовМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыEAN                             = Новый Массив;
	КодыМаркировкиДляПолученияСведенийИзПула = Новый Массив;
	
	ЕстьДопустимыеВидыПродукции  = Ложь;
	ДопустимаТабачнаяПродукция   = ДопустимаТабачнаяПродукция(ПараметрыСканирования);
	ДопустимаПродукцияИСМП       = ДопустимаПродукцияИСМП(ПараметрыСканирования);
	ЗапрашиватьДанныеСервисаИСМП = Ложь;
	
	Если ДопустимаТабачнаяПродукция Или ДопустимаПродукцияИСМП Тогда
		ЕстьДопустимыеВидыПродукции = Истина;
		Если ТипЗнч(ДанныеКодовМаркировки) = Тип("Массив") Тогда
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки[0].Владелец();
		Иначе
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки;
		КонецЕсли;
		ЗапрашиватьДанныеСервисаИСМП = ПараметрыСканирования.Свойство("ЗапрашиватьДанныеСервисаИСМП")
			И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;
	
	УникальныеШтрихкодыEAN = Новый Соответствие;
	GTINПотребительскихУпаковок = Новый Соответствие;
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
	НормализованныеКодыМаркировкиДляПолученияСведенийИзПула = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если ЕстьДопустимыеВидыПродукции
			И ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			КодыМаркировкиДляПолученияСведенийИзПула.Добавить(СтрокаДанных.Штрихкод);
			НормализованныеКодыМаркировкиДляПолученияСведенийИзПула.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных.Штрихкод);
		ИначеЕсли ЕстьДопустимыеВидыПродукции
			И ПрисутствуетТабачнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			Если СтрокаДанных.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
				И СтрокаДанных.СоставКодаМаркировки.ВключаетМРЦ Тогда
				
				НормализованныйКод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДанных.ДанныеРазбора,
					СтрокаДанных.ВидПродукции,
					ПараметрыНормализацииКМ);
				
				КодыМаркировкиДляПолученияСведенийИзПула.Добавить(НормализованныйКод);
				НормализованныеКодыМаркировкиДляПолученияСведенийИзПула.Вставить(СтрокаДанных.Штрихкод, НормализованныйКод);
			Иначе
				КодыМаркировкиДляПолученияСведенийИзПула.Добавить(СтрокаДанных.Штрихкод);
				НормализованныеКодыМаркировкиДляПолученияСведенийИзПула.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных.Штрихкод);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДанных.ЭтоКодВводаОстатков Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			// Код маркировки алкогольной продукции
			Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено
			Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) <> Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			СтрокаДанных.ТребуетсяСопоставление = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаДанных.EAN) И ПустаяСтрока(СтрокаДанных.GTIN) Тогда
			ШтрихкодДляПоиска = СтрокаДанных.Штрихкод;
		Иначе
			Если ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
				СтрокаДанных.EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СтрокаДанных.GTIN);
			КонецЕсли;
			ШтрихкодДляПоиска = СтрокаДанных.EAN;
		КонецЕсли;
		
		Если УникальныеШтрихкодыEAN[ШтрихкодДляПоиска] = Неопределено Тогда
			ШтрихкодыEAN.Добавить(ШтрихкодДляПоиска);
			УникальныеШтрихкодыEAN.Вставить(ШтрихкодДляПоиска, Истина);
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И GTINПотребительскихУпаковок[СтрокаДанных.GTIN] = Неопределено Тогда
			GTINПотребительскихУпаковок.Вставить(СтрокаДанных.GTIN, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КодыМаркировкиДляПолученияСведенийИзПула.Количество() Тогда
		ДанныеПулаПоКодамМаркировки = РегистрыСведений["ПулКодовМаркировкиСУЗ"].ДанныеКодовМаркировки(КодыМаркировкиДляПолученияСведенийИзПула);
	КонецЕсли;
	
	ИнформацияПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок);
	
	ДанныеДокументаОснования = Неопределено;
	Если ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		ДанныеДокументаОснования = ДанныеДокументаОснования(ПараметрыСканирования);
	КонецЕсли;
	
	ШаблоныГрупповыхУпаковок = Новый Соответствие;
	ШаблоныНаборов = Новый Соответствие;
	ШаблоныГрупповыхУпаковокИНаборов = Новый Соответствие;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		МодульИнтеграцияИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСервер");
		Для Каждого Шаблон Из МодульИнтеграцияИСМПКлиентСервер.ШаблоныГрупповыхУпаковок() Цикл
			ШаблоныГрупповыхУпаковокИНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Групповая);
			ШаблоныГрупповыхУпаковок.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Групповая);
		КонецЦикла;
		Для Каждого Шаблон Из МодульИнтеграцияИСМПКлиентСервер.ШаблоныНаборов() Цикл
			ШаблоныГрупповыхУпаковокИНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Набор);
			ШаблоныНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Набор);
		КонецЦикла;
	КонецЕсли;
	
	КэшДанныеОрганизаций = Новый Соответствие();
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		ДанныеПулаПоКоду = Неопределено;
		Если ДанныеПулаПоКодамМаркировки <> Неопределено Тогда
			ДанныеПулаПоКоду = ДанныеПулаПоКодамМаркировки.Найти(
				НормализованныеКодыМаркировкиДляПолученияСведенийИзПула[СтрокаДанных.Штрихкод], "КодМаркировки");
		КонецЕсли;
		
		КодМаркировкиЗаполненПоПулу = Ложь;
		
		Если ДанныеПулаПоКоду <> Неопределено Тогда
			
			СтрокаДанных.ЕстьВПулеКодовМаркировки = Истина;
			СтрокаДанных.ПолныйКодМаркировки      = ДанныеПулаПоКоду.ПолныйКодМаркировки;
			
			Если Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
				СтрокаДанных.ЭтоКодВводаОстатков = ДанныеПулаПоКоду.МаркировкаОстатков;
			КонецЕсли;
			
			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
				И Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
				СтрокаДанных.ПредставлениеНоменклатуры = РегистрыСведений.ПулКодовМаркировкиСУЗ.ПредставлениеКИЗ(ДанныеПулаПоКоду);
			КонецЕсли;
			
			// Оптимизация. Заполнение способа ввода в оборот из Пула кодов маркировки
			Если Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
				
				Если ЗначениеЗаполнено(ДанныеПулаПоКоду.СпособВводаВОборот)
					И Не ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) Тогда
					
					СтрокаДанных.СпособВводаВОборот = ДанныеПулаПоКоду.СпособВводаВОборот;
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						СтрокаДанных.СтрокаДерева.СпособВводаВОборот = СтрокаДанных.СпособВводаВОборот;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП Тогда
				
					Организация = ДанныеПулаПоКоду.Организация;
					
					СведенияОбОрганизации = КэшДанныеОрганизаций.Получить(Организация);
					
					Если СведенияОбОрганизации = Неопределено
						И ДанныеПоШтрихкодам.СведенияОбОрганизациях <> Неопределено Тогда
						СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[Организация];
						КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
					КонецЕсли;
					
					Если СведенияОбОрганизации = Неопределено Тогда
						СведенияОбОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация);
						КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
					КонецЕсли;
					
					Если СведенияОбОрганизации <> Неопределено Тогда
						СтрокаДанных.ИННВладельца = СведенияОбОрганизации.ИНН;
						СтрокаДанных.Владелец     = Организация;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
					
					ПоляЗаполнения = Новый Структура("ВидПродукции, ВидУпаковки, ТипУпаковки");
					ПоляЗаполнения.ВидПродукции = ДанныеПулаПоКоду.ВидПродукции;
					
					ВидУпаковкиПоШаблону = ШаблоныГрупповыхУпаковокИНаборов[ДанныеПулаПоКоду.Шаблон];
					Если ВидУпаковкиПоШаблону = Перечисления.ВидыУпаковокИС.Групповая Тогда
						ПоляЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
						ПоляЗаполнения.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
					ИначеЕсли ВидУпаковкиПоШаблону = Перечисления.ВидыУпаковокИС.Набор Тогда
						ПоляЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
						ПоляЗаполнения.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
					Иначе
						ПоляЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
						ПоляЗаполнения.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаДанных, ПоляЗаполнения);
					
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, ПоляЗаполнения);
					КонецЕсли;
					
				КонецЕсли;
			
				Если Не СтрокаДанных.НоменклатураСопоставленаПоУПД
					И ЗначениеЗаполнено(ДанныеПулаПоКоду.Номенклатура) Тогда
					
					СтрокаДанных.Номенклатура   = ДанныеПулаПоКоду.Номенклатура;
					СтрокаДанных.Характеристика = ДанныеПулаПоКоду.Характеристика;
					СтрокаДанных.ВидПродукции   = ДанныеПулаПоКоду.ВидПродукции;
					
					СтрокаДанных.ПроизвольнаяЕдиницаУчета = ДанныеПулаПоКоду.ПроизвольнаяЕдиницаУчета;
					СтрокаДанных.ТребуетВзвешивания       = ДанныеПулаПоКоду.ТребуетВзвешивания;
					
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						СтрокаДанных.СтрокаДерева.Номенклатура   = СтрокаДанных.Номенклатура;
						СтрокаДанных.СтрокаДерева.Характеристика = СтрокаДанных.Характеристика;
						СтрокаДанных.СтрокаДерева.ВидПродукции   = СтрокаДанных.ВидПродукции;
					КонецЕсли;
					
					СтрокаДанных.ТребуетсяСопоставление = Ложь;
					КодМаркировкиЗаполненПоПулу = Истина;
				ИначеЕсли СтрокаДанных.ЭтоКодВводаОстатков Тогда
					СтрокаДанных.ТребуетсяСопоставление = Ложь;
					КодМаркировкиЗаполненПоПулу = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТребуетсяСопоставление = Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			Или СтрокаДанных.ТребуетсяСопоставление;
		
		ЗначениеПоиска = ?(ЗначениеЗаполнено(СтрокаДанных.EAN), СтрокаДанных.EAN, СтрокаДанных.Штрихкод);
		
		Если ЗначениеЗаполнено(СтрокаДанных.EAN) Тогда
			EAN  = СтрокаДанных.EAN;
			GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(EAN);
		Иначе
			EAN  = "";
			GTIN = "";
			Если РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ЗначениеПоиска) Тогда
				EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(ЗначениеПоиска);
				Если ЗначениеЗаполнено(EAN) Тогда
					GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(EAN);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		UPC = Неопределено;
		Если Лев(EAN, 1) = "0"
			И СтрДлина(EAN) = 13 Тогда
			UPC = Сред(EAN, 2);
		КонецЕсли;
		
		ЭтоШтрихкодНоменклатуры = Ложь;
		Если СтрокаДанных.Штрихкод = ЗначениеПоиска
			Или СтрокаДанных.Штрихкод = EAN
			Или СтрокаДанных.Штрихкод = GTIN
			Или СтрокаДанных.Штрихкод = UPC Тогда
			ЭтоШтрихкодНоменклатуры = Истина;
		КонецЕсли;
		
		РезультатПоискаУникален = Неопределено;
		ВидПродукцииУникален    = Неопределено;
		
		НайденныеШтрихкодыEAN = ИнформацияПоШтрихкодамEAN.НайтиСтроки(Новый Структура("ШтрихкодEAN", ЗначениеПоиска));
		ВариантовВыбора = НайденныеШтрихкодыEAN.Количество();
		
		Для Каждого СтрокаИнформации Из НайденныеШтрихкодыEAN Цикл
			
			// Штрихкоды не требующие обработки библиотекой
			Если СтрокаИнформации.ТребуетсяОбработкаШтрихкода Тогда
				СтрокаДанных.ТребуетсяОбработкаШтрихкода = Истина;
				СтрокаДанных.ДополнительныеПараметры = СтрокаИнформации.ДанныеШтрихкода;
				Прервать;
			КонецЕсли;
			
			Если ТребуетсяСопоставление Тогда
				ВариантовВыбора = ВариантовВыбора - 1;
				Если Не СтрокаДанных.НоменклатураСопоставленаПоУПД Тогда
					// Если вариантов выбора несколько - отфильтруем подходящие. Если не подходят все - оставим 1 для вывода ошибки
					Если Не (РезультатПоискаУникален = Неопределено И ВариантовВыбора = 0) Тогда
						// Маркируемая продукция
						Если ПараметрыСканирования.ТолькоМаркируемаяПродукция
								И Не СтрокаИнформации.МаркируемаяПродукция Тогда
							Продолжить;
						// Соответствие документу-основанию
						ИначеЕсли ДанныеДокументаОснования <> Неопределено
							И ДанныеДокументаОснования.НайтиСтроки(
								Новый Структура(
									"Номенклатура,Характеристика",
									СтрокаИнформации.Номенклатура, СтрокаИнформации.Характеристика)).Количество() = 0 Тогда
							Продолжить;
						// Соответствие пулу
						ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ЕстьВПулеКодовМаркировки")
							И СтрокаДанных.ЕстьВПулеКодовМаркировки
								И ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
								И (РезультатПоискаУникален = Истина
									Или СтрокаИнформации.Номенклатура <> СтрокаДанных.Номенклатура
									Или СтрокаИнформации.Характеристика <> СтрокаДанных.Характеристика) Тогда
							Продолжить;
						ИначеЕсли Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
								И Не ЭтоШтрихкодНоменклатуры
								И ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина).Найти(СтрокаИнформации.ВидПродукции) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаИнформации.Номенклатура <> СтрокаДанных.Номенклатура
					Или СтрокаИнформации.Характеристика <> СтрокаДанных.Характеристика Тогда
					Продолжить;
				КонецЕсли;
				
				Если РезультатПоискаУникален = Неопределено Тогда
					РезультатПоискаУникален = Истина;
				ИначеЕсли РезультатПоискаУникален = Истина Тогда
					РезультатПоискаУникален = СтрокаДанных.Номенклатура = СтрокаИнформации.Номенклатура
						И СтрокаДанных.Характеристика = СтрокаИнформации.Характеристика
						И СтрокаДанных.Серия = СтрокаИнформации.Серия;
				КонецЕсли;
				
				Если ВидПродукцииУникален = Неопределено Тогда
					ВидПродукцииУникален = Истина;
				ИначеЕсли ВидПродукцииУникален = Истина Тогда
					ВидПродукцииУникален = СтрокаДанных.ВидПродукции = СтрокаИнформации.ВидПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если Не ЗапрашиватьДанныеСервисаИСМП И СтрокаДанных.НоменклатураСопоставленаПоУПД
					Или Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
					Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
						СтрокаДанных.ВидПродукции, СтрокаИнформации.ВидУпаковкиИС, СтрокаДанных.ДанныеРазбора) Тогда
						СтрокаДанных.ВидУпаковки = СтрокаИнформации.ВидУпаковкиИС;
						Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
						Иначе 
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				// Флаг взводится, если вид упаковки определен по данным ЭДО
				СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Ложь;
			КонецЕсли;
			
			Если КодМаркировкиЗаполненПоПулу Тогда
				//@skip-check query-in-loop
				Если ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации, "ЧастичноеВыбытиеВариантУчета,ЕмкостьПотребительскойУпаковки");
				КонецЕсли;
				// В данных пула отсутствуют сведения об упаковке
				Если СтрокаДанных.Номенклатура = СтрокаИнформации.Номенклатура Тогда
					СтрокаДанных.Упаковка = СтрокаИнформации.Упаковка;
				КонецЕсли;
			Иначе
				
				Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
					И СтрокаДанных.ОбработатьБезМаркировки Тогда
					// Количество будет заполнено пользователем в форме уточнения данных
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации,, "Количество, ВидПродукции, ПлановоеКоличествоПотребительскихУпаковок, Коэффициент");
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации,, "Количество, ВидПродукции");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаИнформации.ВидПродукции) Тогда
					СтрокаДанных.ВидПродукции = СтрокаИнформации.ВидПродукции;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) 
					И СтрокаДанных.ДанныеРазбора = Неопределено Тогда
					УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанных, СтрокаДанных.ВидПродукции);
				КонецЕсли;
				Если СтрокаИнформации.Весовой Тогда
					СтрокаДанных.Количество = СтрокаИнформации.Количество;
				ИначеЕсли СтрокаИнформации.ТребуетВзвешивания Тогда
					СтрокаДанных.Количество = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДанных.EAN = "" Тогда
				СтрокаДанных.EAN = EAN;
			КонецЕсли;
			
			Если ЭтоШтрихкодНоменклатуры Тогда
				
				СтрокаДанных.ЭтоШтрихкодНоменклатуры = Истина;
				СтрокаДанных.Идентифицирован         = Истина;
				
				Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
					И СтрокаДанных.ОбработатьБезМаркировки Тогда
					// Вид продукции определен по команде Добавить без кода маркировки в форме проверки и подбора
				Иначе
					ТипШтрихкодаСтрока = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(СтрокаДанных.Штрихкод);
					СтрокаДанных.ТипШтрихкода = ШтрихкодированиеИСКлиентСервер.ТипШтрихкодаПоСтроке(ТипШтрихкодаСтрока);
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				СтрокаДанных.Идентифицирован = Истина;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = 1;
				Если СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = СтрокаИнформации.Коэффициент;
				ИначеЕсли Не СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = 1;
				КонецЕсли;
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если СтрокаДанных.ДополнительныеПараметры = Неопределено Тогда
					СтрокаДанных.ДополнительныеПараметры = Новый Структура;
				КонецЕсли;
				СтрокаДанных.ДополнительныеПараметры.Вставить("ВидУпаковкиПоGTIN", СтрокаИнформации.ВидУпаковкиИС);
			КонецЕсли;
			
			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц") Тогда
				КоличествоПотребительскихУпаковокGTIN02 = СтрокаДанных.СоставКодаМаркировки.КоличествоВложенныхЕдиниц;
				Если КоличествоПотребительскихУпаковокGTIN02 <> Неопределено Тогда
					
					ПлановоеКоличествоПотребительскихУпаковок = СтрокаИнформации.ПлановоеКоличествоПотребительскихУпаковок;
					Если ПлановоеКоличествоПотребительскихУпаковок = 0 
						И GTINПотребительскихУпаковок[СтрокаДанных.GTIN] <> Неопределено Тогда
						ПлановоеКоличествоПотребительскихУпаковок = 1;
					КонецЕсли;
					
					СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок * КоличествоПотребительскихУпаковокGTIN02;
					СтрокаДанных.Коэффициент                               = СтрокаИнформации.Коэффициент              * КоличествоПотребительскихУпаковокGTIN02;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДанных.ТребуетВзвешивания
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("МассаНеттоВКг")
				И СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг <> Неопределено Тогда
				СтрокаДанных.Количество = СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг;
			КонецЕсли;
			
			Если Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
				И Не СтрокаДанных.ТребуетВзвешивания
				И ЗначениеЗаполнено(СтрокаДанных.Коэффициент) Тогда
				СтрокаДанных.Количество = СтрокаДанных.Коэффициент;
			КонецЕсли;
			
			СтрокаДанных.КоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			
			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			КонецЕсли;
			
			СтрокаДанных.ТребуетсяСопоставление = Ложь;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаИнформации);
				СтрокаДанных.СтрокаДерева.Коэффициент = СтрокаДанных.Коэффициент;
			КонецЕсли;
			
			Если Не КодМаркировкиЗаполненПоПулу И ТребуетсяСопоставление Тогда
				ДанныеУточнения = Новый Структура("Номенклатура, Характеристика, Серия, Упаковка, ПредставлениеНоменклатуры");
				ЗаполнитьЗначенияСвойств(ДанныеУточнения, СтрокаИнформации);
				СтрокаДанных.СписокНоменклатуры.Добавить(ДанныеУточнения);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не КодМаркировкиЗаполненПоПулу И РезультатПоискаУникален = Ложь Тогда
			
			СтрокаДанных.Номенклатура   = Неопределено;
			СтрокаДанных.Характеристика = Неопределено;
			СтрокаДанных.Серия          = Неопределено;
			СтрокаДанных.Упаковка       = Неопределено;
			
			ИменаКолонокЗаполнения = "Номенклатура, Характеристика, Серия, Упаковка";
			//@skip-check query-in-loop
			Если ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
				СтрокаДанных.ЧастичноеВыбытиеВариантУчета   = Неопределено;
				СтрокаДанных.ЕмкостьПотребительскойУпаковки = Неопределено;
				СтрокаДанных.ЧастичноеВыбытиеНоменклатура   = Неопределено;
				СтрокаДанных.ЧастичноеВыбытиеХарактеристика = Неопределено;
				ИменаКолонокЗаполнения = ИменаКолонокЗаполнения + ", ЧастичноеВыбытиеВариантУчета, ЕмкостьПотребительскойУпаковки, ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика";
			КонецЕсли;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, ИменаКолонокЗаполнения);
			КонецЕсли;
			
			СтрокаДанных.ПредставлениеНоменклатуры = СтрШаблон(
				НСтр("ru = '%1 ( + еще %2 )'"),
				Лев(СтрокаДанных.СписокНоменклатуры[0].ПредставлениеНоменклатуры, 20),
				СтрокаДанных.СписокНоменклатуры.Количество() - 1);
			
		Иначе
			СтрокаДанных.СписокНоменклатуры.Очистить();
		КонецЕсли;
		
		Если Не КодМаркировкиЗаполненПоПулу И ВидПродукцииУникален = Ложь Тогда
			
			СтрокаДанных.ВидПродукции = Неопределено;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидПродукции");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеПулаПоКоду <> Неопределено
			И Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
				
				Если ШаблоныГрупповыхУпаковок[ДанныеПулаПоКоду.Шаблон] <> Неопределено Тогда
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
					СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				ИначеЕсли ШаблоныНаборов[ДанныеПулаПоКоду.Шаблон] <> Неопределено Тогда
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
					СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
				Иначе
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
					СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
				КонецЕсли;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидУпаковки, ТипУпаковки");
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
				И ЗначениеЗаполнено(ДанныеПулаПоКоду.Номенклатура) Тогда
				
				СтрокаДанных.Номенклатура   = ДанныеПулаПоКоду.Номенклатура;
				СтрокаДанных.Характеристика = ДанныеПулаПоКоду.Характеристика;
				СтрокаДанных.ВидПродукции   = ДанныеПулаПоКоду.ВидПродукции;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Номенклатура   = СтрокаДанных.Номенклатура;
					СтрокаДанных.СтрокаДерева.Характеристика = СтрокаДанных.Характеристика;
					СтрокаДанных.СтрокаДерева.ВидПродукции   = СтрокаДанных.ВидПродукции;
				КонецЕсли;
				
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
			И СтрокаДанных.КоличествоПотребительскихУпаковок > 1
			И ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(СтрокаДанных.ДанныеРазбора.ВидУпаковки, СтрокаДанных.ДанныеРазбора) Тогда
			СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
			СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидУпаковки, ТипУпаковки");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет информацию по коэффициентам вложенности упаковок. Информация помещается в таблицу ДанныеПоШтрихкодам.ДанныеКодовМаркировки.
// 
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияТаблицыДанныхКодовМаркировки
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ДанныеКодовМаркировки - Неопределено, Массив, ТаблицаЗначений -
Процедура ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ДанныеКодовМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыEAN = Новый Массив;
	УникальныеШтрихкодыEAN = Новый Соответствие;
	GTINПотребительскихУпаковок = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл

		ШтрихкодДляПоиска = ?(ПустаяСтрока(СтрокаДанных.EAN), СтрокаДанных.Штрихкод, СтрокаДанных.EAN);
		
		Если Не ЗначениеЗаполнено(ШтрихкодДляПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		Если УникальныеШтрихкодыEAN[ШтрихкодДляПоиска] = Неопределено Тогда
			ШтрихкодыEAN.Добавить(ШтрихкодДляПоиска);
			УникальныеШтрихкодыEAN.Вставить(ШтрихкодДляПоиска, Истина);
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
			GTINПотребительскихУпаковок.Вставить(СтрокаДанных.GTIN, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДанныеКодовМаркировки) = Тип("Массив")
		И ДанныеКодовМаркировки.Количество() Тогда
		ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки[0].Владелец();
	Иначе
		ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;
	
	ИнформацияПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок);
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		ЗначениеПоиска = СтрокаДанных.EAN;
		
		НайденныеШтрихкодыEAN = ИнформацияПоШтрихкодамEAN.НайтиСтроки(Новый Структура("ШтрихкодEAN", ЗначениеПоиска));
		
		Для Каждого СтрокаИнформации Из НайденныеШтрихкодыEAN Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
				И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
					СтрокаДанных.ВидПродукции,
					СтрокаИнформации.ВидУпаковкиИС,
					СтрокаДанных.ДанныеРазбора) Тогда
					
					СтрокаДанных.ВидУпаковки = СтрокаИнформации.ВидУпаковкиИС;
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДанных.Коэффициент                               = СтрокаИнформации.Коэффициент;
			СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = СтрокаИнформации.ПлановоеКоличествоПотребительскихУпаковок;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = 1;
				Если СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = СтрокаИнформации.Коэффициент;
				ИначеЕсли Не СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если СтрокаДанных.ДополнительныеПараметры = Неопределено Тогда
					СтрокаДанных.ДополнительныеПараметры = Новый Структура;
				КонецЕсли;
				СтрокаДанных.ДополнительныеПараметры.Вставить("ВидУпаковкиПоGTIN", СтрокаИнформации.ВидУпаковкиИС);
			КонецЕсли;
			
			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц") Тогда
				КоличествоПотребительскихУпаковокGTIN02 = СтрокаДанных.СоставКодаМаркировки.КоличествоВложенныхЕдиниц;
				Если КоличествоПотребительскихУпаковокGTIN02 <> Неопределено Тогда
					
					ПлановоеКоличествоПотребительскихУпаковок = СтрокаИнформации.ПлановоеКоличествоПотребительскихУпаковок;
					Если ПлановоеКоличествоПотребительскихУпаковок = 0 
						И GTINПотребительскихУпаковок[СтрокаДанных.GTIN] <> Неопределено Тогда
						ПлановоеКоличествоПотребительскихУпаковок = 1;
					КонецЕсли;
					
					СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок * КоличествоПотребительскихУпаковокGTIN02;
					СтрокаДанных.Коэффициент                               = СтрокаИнформации.Коэффициент              * КоличествоПотребительскихУпаковокGTIN02;
					
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
				И СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок > 1
				И ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(СтрокаДанных.ДанныеРазбора.ВидУпаковки, СтрокаДанных.ДанныеРазбора) Тогда
				СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			КонецЕсли;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.ВидУпаковки                               = СтрокаДанных.ВидУпаковки;
				СтрокаДанных.СтрокаДерева.Коэффициент                               = СтрокаДанных.Коэффициент;
				СтрокаДанных.СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
			Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ТекстОшибки);
		
		Если Не ЕстьОшибки И ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
			
			ЭтоКодВводаОстатков = ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДанных.GTIN);
			
			СтрокаДанных.ЭтоКодВводаОстатков    = ЭтоКодВводаОстатков;
			СтрокаДанных.МаркируемаяПродукция   = Истина;
			СтрокаДанных.ТребуетсяСопоставление = Не ЭтоКодВводаОстатков И Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеRFID(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	
	Если ДопустимаПродукцияИзНатуральногоМеха(ПараметрыСканирования)
		И ПрисутствуетПродукцияИзНатуральногоМеха(ВидыПродукции) Тогда
		
		СтрокиДляЗаполнения = Новый Массив;
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
				И ЗначениеЗаполнено(СтрокаДанных.Штрихкод) Тогда
				СтрокиДляЗаполнения.Добавить(СтрокаДанных);
			КонецЕсли;
			
		КонецЦикла;
		
		РегистрыСведений.ДанныеRFIDИСМП.ЗаполнитьДанныеRFID(СтрокиДляЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет первоначальное заполнение таблицы "ДанныеКодовМаркировки" на основании "ДанныеШтрихкодов".
// 
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияДанныхПоШтрихкодам.
//  СписокДанныхШтрихкода - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ЗаполнитьДанныеКодовМаркировкиВходящимиДанными(ДанныеПоШтрихкодам, СписокДанныхШтрихкода, ПараметрыСканирования)
	
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	Если Не ДанныеПоШтрихкодам.ЭтоОбработкаВводаШтрихкода
		И ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		
		Если КэшМаркируемойПродукции <> Неопределено
			И КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Количество() > 0 Тогда
			
			Для Каждого ОтложенныйКод Из КэшМаркируемойПродукции.ОтложенныеКодыМаркировки Цикл
				ШтрихкодированиеИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ОтложенныйКод);
				НоваяСтрока = ДанныеКодовМаркировки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтложенныйКод);
				НоваяСтрока.Входящий = Истина;
			КонецЦикла;
			
			КэшМаркируемойПродукции.ОтложенныеКодыМаркировки = Новый Массив;
			ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнятьДанныеRFID = Неопределено;
	
	ДанныеRFID = Неопределено;
	ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеRFID", ДанныеRFID);
	
	СоответствиеВидовПродукции = Новый Соответствие;
	
	Для Каждого ДанныеШтрихкода Из СписокДанныхШтрихкода Цикл
		
		НоваяСтрока = ДанныеКодовМаркировки.Добавить();
		НоваяСтрока.Штрихкод   = СокрЛП(ДанныеШтрихкода.Штрихкод);
		НоваяСтрока.Количество = ДанныеШтрихкода.Количество;
		НоваяСтрока.Входящий   = Истина;
		
		Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура") 
			И ДанныеШтрихкода.Свойство("ВидУпаковки")
			И ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
			И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки") Тогда
			НоваяСтрока.ОбработатьБезМаркировки = ДанныеШтрихкода.ОбработатьБезМаркировки;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
			И ДанныеШтрихкода.Свойство("ШтрихкодBase64") Тогда
			НоваяСтрока.ШтрихкодBase64 = ДанныеШтрихкода.ШтрихкодBase64;
		Иначе
			НоваяСтрока.ШтрихкодBase64 = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
		КонецЕсли;
		
		Если ЗаполнятьДанныеRFID = Неопределено Тогда
			ЗаполнятьДанныеRFID = (ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
				И ДанныеШтрихкода.Свойство("ДанныеRFID")
				И ДанныеШтрихкода.Свойство("ВидПродукции")
				И ДанныеШтрихкода.Свойство("ВидУпаковки")
				И ДанныеШтрихкода.ДанныеRFID <> Неопределено);
		КонецЕсли;
		
		Если ЗаполнятьДанныеRFID Тогда
			
			НоваяСтрока.МаркируемаяПродукция = Истина;
			НоваяСтрока.ДанныеRFID   = ДанныеШтрихкода.ДанныеRFID;
			НоваяСтрока.GTIN         = ДанныеШтрихкода.ДанныеRFID.GTIN;
			НоваяСтрока.ВидПродукции = ДанныеШтрихкода.ВидПродукции;
			НоваяСтрока.ВидУпаковки  = ДанныеШтрихкода.ВидУпаковки;
			НоваяСтрока.ВидыПродукцииКодаМаркировки.Добавить(НоваяСтрока.ВидПродукции);
			
			СоответствиеВидовПродукции.Вставить(ДанныеШтрихкода.ВидПродукции, Истина);
			
		ИначеЕсли ДанныеRFID <> Неопределено Тогда
			НоваяСтрока.ДанныеRFID = ДанныеRFID;
			НоваяСтрока.GTIN       = ДанныеRFID.GTIN;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.GTIN) Тогда
			НоваяСтрока.EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(НоваяСтрока.GTIN);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеВидовПродукции Цикл
		Если ДанныеПоШтрихкодам.ВидыПродукции.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет структуру с общими модулями.
// 
// Возвращаемое значение:
//  Структура - общие модули подсистемы ИСМП:
// * ШтрихкодированиеИСМП - ОбщийМодуль - одноименный общий модуль,
// * ШтрихкодированиеМОТП - ОбщийМодуль - одноименный общий модуль.
//  Булево - Ложь если подсистема не встроена
Функция ОбщиеМодулиПодсистем() Экспорт
	
	ОбщиеМодули = Новый Структура;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбщиеМодули.Вставить("ШтрихкодированиеМОТП", ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП"));
	ОбщиеМодули.Вставить("ШтрихкодированиеИСМП", ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМП"));
	
	Возврат ОбщиеМодули;
	
КонецФункции

// Выполняет проверку на вхождение в код недопустимых символов
// 
// Параметры:
// 	СтрокаДанных - СтрокаДереваЗначений: См. ИнициализироватьДеревоУпаковок - Строка дерева
//               - СтрокаТаблицыЗначений: См. ИнициализацияТаблицыДанныхКодовМаркировки - Строка данных
Процедура ПроверитьСтрокуДанныхНаВхождениеНедопустимыхСимволов(СтрокаДанных) Экспорт
	
	Если СтрНайти(СтрокаДанных.Штрихкод, "¶") Тогда
		СтрокаДанных.ТекстОшибки = СтрШаблон(НСтр("ru = 'Недопустимый символ: %1'"), "¶");
	ИначеЕсли СтрНайти(СтрокаДанных.Штрихкод, Символы.Таб)
		Или СтрНайти(СтрокаДанных.Штрихкод, Символы.ПС) Тогда
		СтрокаДанных.ТекстОшибки = НСтр("ru = 'Код не может содержать переносы строк и табуляции'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет разбор штрихкодов (кодов маркировки) в таблице "ДанныеКодовМаркировки"
// 
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ПараметрыСканирования
//  КешДанныхРазбора      - Неопределено, Структура -
//  ДанныеКодовМаркировки - Неопределено, Массив, ТаблицаЗначений -
Процедура НормализоватьИРазобратьНаСоставляющиеКодыМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, КешДанныхРазбора = Неопределено, ДанныеКодовМаркировки = Неопределено)
	
	ОбщиеМодули = ОбщиеМодулиПодсистем();
	
	ДопустимыСтрокиДанныхБезВидаПродукции = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ОпределениеВидаПродукцииИСМП")
		И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП;
	
	Если ДопустимыСтрокиДанныхБезВидаПродукции Тогда
		НастройкиРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь);
		ВидыПродукции                  = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	Иначе
		НастройкиРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки();
		ВидыПродукции                  = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "СохранятьКодыМаркировкиВПулИСМП") Тогда
		СохранятьКодыМаркировкиВПулИСМП = ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП;
	Иначе
		СохранятьКодыМаркировкиВПулИСМП = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "ПроверятьСтруктуруКодовМаркировки") Тогда
		ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	Иначе
		ПроверятьСтруктуруКодовМаркировки = Ложь;
	КонецЕсли;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация = СохранятьКодыМаркировкиВПулИСМП;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками =
			(ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
	КонецЕсли;
	
	НастройкиРазбора = Новый Структура;
	НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбора.Вставить("Общие",            НастройкиРазбораКодаМаркировки);
	НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	СоответствиеВидовПродукции = Новый Соответствие;
	
	ИдентификаторыОшибок = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверитьСтрокуДанныхНаВхождениеНедопустимыхСимволов(СтрокаДанных);
		
		ДанныеРазбораИПримечание = Неопределено;
		
		Если КешДанныхРазбора <> Неопределено Тогда
			ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаДанных.Штрихкод];
			Если ДанныеРазбораИПримечание <> Неопределено Тогда
				
				ДанныеРазбора                            = ДанныеРазбораИПримечание.ДанныеРазбора;
				СтрокаДанных.ПримечаниеКРазборуШтрихкода = ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода;
				СтрокаДанных.ДанныеРазбора               = ДанныеРазбора;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеРазбораИПримечание = Неопределено Тогда
			ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
				СтрокаДанных.Штрихкод, НастройкиРазбора.Кеш, ВидыПродукции, СтрокаДанных.ПримечаниеКРазборуШтрихкода,
				НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
			
			СтрокаДанных.ДанныеРазбора = ДанныеРазбора;
		КонецЕсли;
		
		Если ДанныеРазбора <> Неопределено Тогда
			
			ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанных, ОбщиеМодули);
			
			// Восстанавливать структуру кода маркировки
			Если Не ПроверятьСтруктуруКодовМаркировки
				И ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
				
				МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				МодульШтрихкодированиеИСМП.ПроверитьПолныйКодМаркировкиПоДаннымРазбора(
					ДанныеРазбора, СтрокаДанных, ПараметрыСканирования);
				
			КонецЕсли;
			
		ИначеЕсли ДанныеРазбора = Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетНесколькимШаблонам Тогда
			
			GTIN = Неопределено;
			Для Каждого РезультатРазбора Из СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора Цикл
				Если РезультатРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
					Если GTIN = Неопределено Тогда
						GTIN = РезультатРазбора.СоставКодаМаркировки.GTIN;
					ИначеЕсли GTIN <> РезультатРазбора.СоставКодаМаркировки.GTIN Тогда
						GTIN = "";
					КонецЕсли;
				Иначе
					GTIN = "";
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(GTIN) Тогда
				
				СтрокаДанных.EAN  = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
				СтрокаДанных.GTIN = GTIN;
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСтрокуДанныхКодовМаркировкиСНеопределеннымСоставомКода(СтрокаДанных);
			
		КонецЕсли;
		
		СоответствиеВидовПродукции.Вставить(СтрокаДанных.ВидПродукции, Истина);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеВидовПродукции Цикл
		Если ДанныеПоШтрихкодам.ВидыПродукции.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДанныхКодовМаркировкиСНеопределеннымСоставомКода(СтрокаДанных)
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(СтрокаДанных.Штрихкод);
	Если ЭтоGTIN И СтрДлина(СтрокаДанных.Штрихкод) = 14 Тогда
		СтрокаДанных.EAN  = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(СтрокаДанных.Штрихкод);
		СтрокаДанных.GTIN = СтрокаДанных.Штрихкод;
	ИначеЕсли ЭтоGTIN Тогда
		СтрокаДанных.EAN  = СтрокаДанных.Штрихкод;
		СтрокаДанных.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаДанных.Штрихкод);
	Иначе
		
		ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
		ПримечаниеКРазборуШтрихкода = СтрокаДанных.ПримечаниеКРазборуШтрихкода;
		
		Если ПримечаниеКРазборуШтрихкода <> Неопределено 
			И ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиСоответствуетНесколькимШаблонам
			Тогда
			
			GTINЗаполнен                         = Ложь;
			СоставКодаМаркировки                 = Неопределено;
			ДанныеСоставаКодаМаркировкиСовпадают = Истина;
			СоответствиеНормализованныхКодов     = Новый Соответствие;
			СоответствиеТиповШтрихкода           = Новый Соответствие;
			Для Каждого ДанныеРазбора Из ПримечаниеКРазборуШтрихкода.РезультатРазбора Цикл
				
				Если Не GTINЗаполнен И ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
					СтрокаДанных.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
					СтрокаДанных.EAN  = ДанныеРазбора.СоставКодаМаркировки.EAN;
					GTINЗаполнен = Истина;
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокаДанных.ВидыПродукцииКодаМаркировки, ДанныеРазбора.ВидыПродукции, Ложь);
				СоответствиеНормализованныхКодов.Вставить(ДанныеРазбора.НормализованныйКодМаркировки, Истина);
				СоответствиеТиповШтрихкода.Вставить(ДанныеРазбора.ТипШтрихкода, Истина);
				Если СоставКодаМаркировки = Неопределено Тогда
					
					СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
					
				Иначе
					
					Если Не ОбщегоНазначения.ДанныеСовпадают(СоставКодаМаркировки, ДанныеРазбора.СоставКодаМаркировки)
						Или Не ОбщегоНазначения.ДанныеСовпадают(ДанныеРазбора.СоставКодаМаркировки, СоставКодаМаркировки) Тогда
						ДанныеСоставаКодаМаркировкиСовпадают = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СоответствиеНормализованныхКодов.Количество() = 1 Тогда
				
				Для Каждого КлючИЗначение Из СоответствиеНормализованныхКодов Цикл
					СтрокаДанных.НормализованныйШтрихкод = КлючИЗначение.Ключ;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ХешСуммаНормализации)
					И СтрокаДанных.ХешСуммаНормализации <> ИнтеграцияИС.ХэшСуммаСтроки(СтрокаДанных.НормализованныйШтрихкод) Тогда
					СтрокаДанных.ХешСуммаНормализации = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Если СоответствиеТиповШтрихкода.Количество() = 1 Тогда
				Для Каждого КлючИЗначение Из СоответствиеТиповШтрихкода Цикл
					СтрокаДанных.ТипШтрихкода = КлючИЗначение.Ключ;
				КонецЦикла;
			КонецЕсли;
			
			Если ДанныеСоставаКодаМаркировкиСовпадают Тогда
				СтрокаДанных.СоставКодаМаркировки = СоставКодаМаркировки;
			КонецЕсли;
			
			СтрокаДанных.Штрихкод = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(
				СтрокаДанных.Штрихкод, "");
			
		Иначе
			
			СтрокаДанных.Штрихкод = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(
				СтрокаДанных.Штрихкод, "");
			СтрокаДанных.НормализованныйШтрихкод = СтрокаДанных.Штрихкод;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет разбор штрихкода строки таблицы "ДанныеКодовМаркировки" и заполняет строку данными разбора.
// 
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений: См. ИнициализацияТаблицыДанныхКодовМаркировки.
//  ОбщиеМодули  - Структура - Общие модули.
Процедура ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанных, ОбщиеМодули)
	
	ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
	
	Если ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
		СтрокаДанных.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		СтрокаДанных.EAN  = ДанныеРазбора.СоставКодаМаркировки.EAN;
	КонецЕсли;
	
	СтрокаДанных.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
	Если Не (ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
		И СтрНачинаетсяС(СтрокаДанных.Штрихкод, "(")) Тогда
		СтрокаДанных.Штрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	КонецЕсли;
	СтрокаДанных.ТипШтрихкода = ДанныеРазбора.ТипШтрихкода;
	
	ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(СтрокаДанных, ДанныеРазбора);
	
	Если ДанныеРазбора.ВидыПродукции.Количество() = 1 Тогда
		СтрокаДанных.ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
	КонецЕсли;
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
	ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.АкцизнаяМаркаСНомеромИСерией Тогда
		СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	КонецЕсли;
	
	СтрокаДанных.ВидыПродукцииКодаМаркировки = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРазбора.ВидыПродукции, Ложь);
	// АТП или классический табак - будет определено позднее.
	СтрокаДанных.ПрисутствуетТабачнаяПродукция = Ложь;
	Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 2 Тогда
		Если (СтрокаДанных.ВидыПродукцииКодаМаркировки[0] = Перечисления.ВидыПродукцииИС.Табак
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки[0] = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки[0] = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция)
			И (СтрокаДанных.ВидыПродукцииКодаМаркировки[1] = Перечисления.ВидыПродукцииИС.Табак
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки[1] = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки[1] = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция) Тогда
			СтрокаДанных.ПрисутствуетТабачнаяПродукция = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Количество по коду маркировки определяется в процессе обработки.
	Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() Тогда
		СтрокаДанных.Количество = 0;
	КонецЕсли;
	
	СтрокаДанных.НормализованныйШтрихкод = СтрокаДанных.Штрихкод;
	Если ЗначениеЗаполнено(СтрокаДанных.ХешСуммаНормализации)
		И СтрокаДанных.ХешСуммаНормализации <> ИнтеграцияИС.ХэшСуммаСтроки(СтрокаДанных.НормализованныйШтрихкод) Тогда
		СтрокаДанных.ХешСуммаНормализации = "";
	КонецЕсли;

	// Нормализация используется для поиска КМ без учета МРЦ.
	// Для табачных пачек и блоков нормализованный код не содержит МРЦ.
	// Для логистические упаковки GS1-128 нормализованный код не содержит скобок.
	// Для остальной маркированной продукции нормализованный штрихкод равен штрихкоду.
	ВключаяТабачнуюПродукцию = Истина;
	Если ПрисутствуетПродукцияИСМП(ДанныеРазбора.ВидыПродукции, ВключаяТабачнуюПродукцию) Тогда
		ОбщиеМодули.ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(СтрокаДанных, ДанныеРазбора);
	КонецЕсли;
	
	Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		// Количество из тега 30
		Если ДанныеРазбора.СоставКодаМаркировки.Свойство("Коэффициент") Тогда
			Коэффициент = ДанныеРазбора.СоставКодаМаркировки.Коэффициент;
			Если Коэффициент <> Неопределено Тогда
				СтрокаДанных.Коэффициент = ДанныеРазбора.СоставКодаМаркировки.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДанных.СоставКодаМаркировки.Свойство("МассаНеттоВКг") Тогда
			МассаНеттоВКг = СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг;
			Если МассаНеттоВКг <> Неопределено Тогда
				СтрокаДанных.Количество = МассаНеттоВКг;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает состав колонок, который является общим для дерева упаковок и таблицы значений маркированные товары.
//
// Возвращаемое значение:
//  Структура - Описание:
//   * ТипШтрихкода - Неопределено, ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
//   * УпаковкаВерхнегоУровня - Неопределено -
//   * ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции кода маркировки.
//   * Серия - Неопределено, ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - Неопределено, ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Штрихкод - Неопределено, Строка - Штрихкод.
//   * ШтрихкодУпаковки - Неопределено, СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//   * ИдентификаторСтроки - Неопределено, Строка - Идентификатор.
Функция ОбщиеКолонкиКоллекцийВложенныхШтрихкодов()
	
	КоллекцияОбязательныхКолонок = Новый Структура;
	КоллекцияОбязательныхКолонок.Вставить("ИдентификаторСтроки");
	КоллекцияОбязательныхКолонок.Вставить("ШтрихкодУпаковки");
	КоллекцияОбязательныхКолонок.Вставить("Штрихкод");
	КоллекцияОбязательныхКолонок.Вставить("Номенклатура");
	КоллекцияОбязательныхКолонок.Вставить("Характеристика");
	КоллекцияОбязательныхКолонок.Вставить("Серия");
	КоллекцияОбязательныхКолонок.Вставить("Упаковка");
	КоллекцияОбязательныхКолонок.Вставить("ЭтоКодВводаОстатков",      Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("Количество",               Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("МаркируемаяПродукция",     Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ТребуетВзвешивания",       Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ПроизвольнаяЕдиницаУчета", Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПотребительскихУпаковокПоДаннымИБ", Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПоДаннымИБ",                        Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("ВидПродукции");
	КоллекцияОбязательныхКолонок.Вставить("УпаковкаВерхнегоУровня");
	КоллекцияОбязательныхКолонок.Вставить("ТипШтрихкода");
	КоллекцияОбязательныхКолонок.Вставить("ВидУпаковки");
	КоллекцияОбязательныхКолонок.Вставить("СоставКодаМаркировки");
	КоллекцияОбязательныхКолонок.Вставить("ДанныеРазбора");
	КоллекцияОбязательныхКолонок.Вставить("ПараметрыОшибки");
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

#Область ПроверкаНаОшибки

// Выполняет контроль на соответствие маркируемой продукции по документу основания.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ДанныеДокументаОснования - Неопределено, ТаблицаЗначений - кешированные данные документа-основания
//
// Возвращаемое значение:
//  Структура, Неопределено - См. ИнициализироватьРезультатОбработкиШтрихкода, ошибка несоответствия документу-основанию, если она выявлена 
//   до получения данных по кодам маркировки (по EAN/GTIN).
Функция ПроверитьНаСоответствиеДокументуОснованиюЧастично(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования)
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не (ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеДокументаОснования = Неопределено Тогда
		ДанныеДокументаОснования = ДанныеДокументаОснования(ПараметрыСканирования);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
		Возврат Неопределено;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура",   СтрокаДанных.Номенклатура);
	ПараметрыПоиска.Вставить("Характеристика", СтрокаДанных.Характеристика);
	
	НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
	// Допустимо не указывать серию в одном из документов
	ИначеЕсли Не (ЗначениеЗаполнено(НайденныеСтроки[0].Серия) И ЗначениеЗаполнено(СтрокаДанных.Серия)) Тогда
		Возврат Неопределено;
	Иначе
		ПараметрыПоиска.Вставить("Серия", СтрокаДанных.Серия);
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
		
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаДанных.ТекстОшибки                = ТекстОшибкиНеСоответствуетДокументуОснованию();
		РезультатОбработки                      = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ТекстОшибки = СтрокаДанных.ТекстОшибки;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Выполняет контроль на соответствие маркируемой продукции по документу основания.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаСоответствиеДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументаОснования = ДанныеДокументаОснования(ПараметрыСканирования);
	ТекстОшибки = ТекстОшибкиНеСоответствуетДокументуОснованию();
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено
		Или Не ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("МаркированныеТовары")
		Или ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары.Количество() = 0 Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл 
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   СтрокаДанных.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", СтрокаДанных.Характеристика);
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
			// Допустимо не указывать серию в одном из документов
			ИначеЕсли Не (ЗначениеЗаполнено(НайденныеСтроки[0].Серия) И ЗначениеЗаполнено(СтрокаДанных.Серия)) Тогда
				Продолжить;
			Иначе
				ПараметрыПоиска.Вставить("Серия", СтрокаДанных.Серия);
				НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ЕстьОшибки = Истина;
				СтрокаДанных.ТекстОшибки = ТекстОшибки;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
					СтрокаДанных.СтрокаДерева.ЕстьОшибки  = Истина;
					СтрокаДанных.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		Для Каждого СтрокаМаркированныеТовары Из МаркированныеТовары Цикл
			
			СтрокаДанных = Неопределено;
			Если СтрокаМаркированныеТовары.СтрокаДерева <> Неопределено Тогда
				ПараметрыОтбора = Новый Структура(
					"НормализованныйШтрихкод",
					СтрокаМаркированныеТовары.СтрокаДерева.НормализованныйШтрихкод);
				НайденныеСтроки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() Тогда
					СтрокаДанных = НайденныеСтроки[0];
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДанных = Неопределено Тогда
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   СтрокаДанных.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", СтрокаДанных.Характеристика);
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
			// Допустимо не указывать серию в одном из документов
			ИначеЕсли Не (ЗначениеЗаполнено(НайденныеСтроки[0].Серия)
				И ЗначениеЗаполнено(СтрокаДанных.Серия)) Тогда
				Продолжить;
			Иначе
				ПараметрыПоиска.Вставить("Серия", СтрокаДанных.Серия);
				НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ЕстьОшибки = Истина;
				СтрокаДанных.ТекстОшибки = ТекстОшибки;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
					СтрокаДанных.СтрокаДерева.ЕстьОшибки  = Истина;
					СтрокаДанных.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет контроль на соответствие маркируемой продукции по документу основания.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаВложенностьСтандартныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.КонтролироватьСтандартнуюВложенность Тогда
		Возврат;
	ИначеЕсли ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.СтрокаДерева <> Неопределено
			И СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок > 1 Тогда
			
			ФактическоеКоличествоПотребительскихУпаковок = СтрокаДанных.КоличествоПотребительскихУпаковок;
			
			// Проверка пустых упаковок - отдельная функция.
			Если ФактическоеКоличествоПотребительскихУпаковок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПлановоеКоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			
			Если ПлановоеКоличествоПотребительскихУпаковок <> ФактическоеКоличествоПотребительскихУпаковок Тогда
				
				ТекстОшибки = ТекстОшибкиНеСоответствуетСтандартнойУпаковке(
					СтрокаДанных.Штрихкод,
					ПлановоеКоличествоПотребительскихУпаковок, ФактическоеКоличествоПотребительскихУпаковок);
				
				ЕстьОшибки = Истина;
				
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаДанных.ТекстОшибки                     = ТекстОшибки;
				СтрокаДанных.СтрокаДерева.ЕстьОшибки         = Истина;
				СтрокаДанных.СтрокаДерева.ТекстОшибки        = ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку на соответствие вида продукции номенклатуры виду продукции, вычисленному по значению кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимыСтрокиДанныхБезВидаПродукции = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ОпределениеВидаПродукцииИСМП")
		И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыдаватьОшибку = Истина;
		ЭтоКодМаркировкиИСМП = СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() > 1;
		Если ЭтоКодМаркировкиИСМП И ДопустимыСтрокиДанныхБезВидаПродукции Тогда
			ВыдаватьОшибку = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И ПараметрыСканирования.ТолькоМаркируемаяПродукция
			И ВыдаватьОшибку Тогда
			
			СтрокаДанных.ТекстОшибки = ТекстОшибкиНеЗаданВидПродукцииНоменклатуры(СтрокаДанных.Номенклатура);
			ЕстьОшибки = Истина;
			
			Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаДанных.СтрокаДерева.ЕстьОшибки         = Истина;
				СтрокаДанных.СтрокаДерева.ТекстОшибки        = СтрокаДанных.ТекстОшибки;
			КонецЕсли;
			
		ИначеЕсли Не СтрокаДанных.ЭтоШтрихкодНоменклатуры И ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(СтрокаДанных.ВидПродукции) = Неопределено Тогда
			
			ЭтоСменаАТП = СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
				И СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Табак) <> Неопределено;
			
			Если НЕ ЭтоСменаАТП Тогда
				СтрокаДанных.ТекстОшибки = ТекстОшибкиШтрихкодСоответствуетВидамПродукции(СтрокаДанных.ВидыПродукцииКодаМаркировки);
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку вида продукции: при сканировании неизвестной упаковки, ее вид продукции должен быть известен.
// 
// Параметры:
// 	ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
// 	ПараметрыСканирования - См. ПараметрыСканирования
//
Процедура ПроверитьВидПродукцииУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДопустимыхВидовПродукцииИСМП = ПараметрыСканирования.ДопустимыеВидыПродукции.Количество();
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.ПустаяСсылка()) <> Неопределено Тогда
		КоличествоДопустимыхВидовПродукцииИСМП = КоличествоДопустимыхВидовПродукцииИСМП - 1;
	КонецЕсли;
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено Тогда
		КоличествоДопустимыхВидовПродукцииИСМП = КоличествоДопустимыхВидовПродукцииИСМП - 1;
	КонецЕсли;
	Если КоличествоДопустимыхВидовПродукцииИСМП < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		ИначеЕсли СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		ИначеЕсли СтрокаДанных.Идентифицирован Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.ТекстОшибки = ТекстОшибкиНеопределеннойУпаковки();
		
		Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
			ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			СтрокаДанных.СтрокаДерева.ЕстьОшибки         = Истина;
			СтрокаДанных.СтрокаДерева.ТекстОшибки        = СтрокаДанных.ТекстОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку на повторное сканирование кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли; 
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	// Проверка для упаковок
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ПроверитьСтрокиДереваНаУжеДобавленные(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок Или ЕстьОшибки;
	Иначе
		ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(
			ДанныеПоШтрихкодам,
			ОбработанныеКодыМаркировки,
			ЕстьОшибки,
			ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку видов продукции данных по штрихкодам на вхождение в массив допустимых видов продукции, который
// задан в параметрах сканирования.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	ДопустимыСтрокиДанныхБезВидаПродукции = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ОпределениеВидаПродукцииИСМП")
		И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП;
	
	Отказ                = Ложь;
	ИдентификаторыОшибок = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	УчитываемыеВидыМаркируемойПродукции = Неопределено;
	
	ДопустимаАТП = ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.АльтернативныйТабак) <> Неопределено;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		ВидыПродукции = Новый Массив;
		
		ВыдаватьОшибку = Истина;
		ЭтоКодМаркировкиИСМП = СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() > 1;
		Если ЭтоКодМаркировкиИСМП И ДопустимыСтрокиДанныхБезВидаПродукции Тогда
			ВыдаватьОшибку = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
			
			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
				И ДопустимаАТП Тогда
				ВыдаватьОшибку = ЗначениеЗаполнено(СтрокаДанных.Номенклатура);
			Иначе
				ВыдаватьОшибку = Истина;
			КонецЕсли;
			
			Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(СтрокаДанных.ВидПродукции) = Неопределено
				И ВыдаватьОшибку
				И ВидыПродукции.Найти(СтрокаДанных.ВидПродукции) = Неопределено Тогда
				ВидыПродукции.Добавить(СтрокаДанных.ВидПродукции);
			КонецЕсли;
			
		ИначеЕсли ВыдаватьОшибку
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции Тогда
			
			РезультатРазбора = СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора;
			Для Каждого Элемент Из РезультатРазбора Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукции, Элемент.ВидыПродукции, Истина);
			КонецЦикла;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Если ВидыПродукции.Количество() > 0 Тогда
			
			Отказ = Истина;
			
			Если УчитываемыеВидыМаркируемойПродукции = Неопределено Тогда
				УчитываемыеВидыМаркируемойПродукции = ИнтеграцияИС.УчитываемыеВидыМаркируемойПродукции();
			КонецЕсли;
			
			ВидыПродукцииПоКоторымВыключенУчет = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВидыПродукции, УчитываемыеВидыМаркируемойПродукции);
			Если ВидыПродукцииПоКоторымВыключенУчет.Количество() Тогда
				СтрокаДанных.ТекстОшибки = ТекстОшибкиШтрихкодСоответствуетВидамПродукции(ВидыПродукцииПоКоторымВыключенУчет, Истина);
			Иначе
				СтрокаДанных.ТекстОшибки = ТекстОшибкиШтрихкодСоответствуетВидамПродукции(ВидыПродукции);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОшибки                                          = ?(Отказ, Истина, ЕстьОшибки);
	ДанныеПоШтрихкодам.ОшибкаДопустимостиВидовПродукции = ?(Отказ, Истина, ДанныеПоШтрихкодам.ОшибкаДопустимостиВидовПродукции);
	
КонецПроцедуры

Процедура ПроверитьНаСоответствиеПараметруСканированияТолькоМаркируемаяПродукция(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ТолькоМаркируемаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И СтрокаДанных.МаркируемаяПродукция <> Истина
			И ПараметрыСканирования.ТолькоМаркируемаяПродукция Тогда
			
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Номенклатура %1 является немаркируемой'"),
				СтрокаДанных.Номенклатура);
			ЕстьОшибки = Истина;
			
			Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаДанных.СтрокаДерева.ЕстьОшибки         = Истина;
				СтрокаДанных.СтрокаДерева.ТекстОшибки        = СтрокаДанных.ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет коллекцию обработанные штрихкоды на повторный ввод.
//
// Параметры:
//  ОбработанныеШтрихкоды - Соответствие - штрихкоды, которые удалось обработать.
//  МаркируемаяПродукцияДокумента - Соответствие - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ДанныеПоШтрихкодам, МаркируемаяПродукцияДокумента, ЕстьОшибки, ПараметрыСканирования)
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл 
		
		//@skip-check query-in-loop
		Если Не СтрокаДанных.Входящий Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		ИначеЕсли ТребуетсяЧастичноеВыбытие(ПараметрыСканирования)
			И ИнтеграцияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(СтрокаДанных.ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МаркируемаяПродукцияДокумента[СтрокаДанных.Штрихкод] <> Неопределено Тогда
			СтрокаДанных.ТекстОшибки = ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет штрихкоды строк дерева упаковок на попытку повторного ввода.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  МаркируемаяПродукцияДокумента - Соответствие - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Функция ПроверитьСтрокиДереваНаУжеДобавленные(СтрокиДерева, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Если МаркируемаяПродукцияДокумента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьОшибкиВУпаковке = Ложь;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Если МаркируемаяПродукцияДокумента[СтрокаДерева.Штрихкод] <> Неопределено Тогда
			
			СтрокаДерева.ЕстьОшибки = Истина;
			СтрокаДерева.ТекстОшибки = ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
			ЕстьОшибкиВУпаковке = Истина;
			
		ИначеЕсли ПроверитьСтрокиДереваНаУжеДобавленные(СтрокаДерева.Строки, МаркируемаяПродукцияДокумента, ЕстьОшибки) Тогда
			
			СтрокаДерева.ЕстьОшибки = Истина;
			СтрокаДерева.ТекстОшибки = ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибкиВУпаковке = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОшибкиВУпаковке;
	
КонецФункции

// Проверяет штрихкоды строк дерева упаковок на попытку повторной продажи или возврата.
//
// Параметры:
//  ДанныеПоШтрихкодам - см. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - см. ПараметрыСканирования.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьДоступныеОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если Не ПараметрыСканирования.Свойство("ЗапрашиватьДанныеСервисаИСМП")
		Или ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок <> "Продажа"
		И ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок <> "Возврат" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа" Тогда
		ТекстОшибки = НСтр("ru='Продана ранее по данным информационной базы'");
	Иначе
		ТекстОшибки = НСтр("ru='Уже в наличии по данным информационной базы'");
	КонецЕсли;
	
	ОстаткиМаркируемойПродукции = ОпределитьОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено
		Или Не ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("МаркированныеТовары") Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			//@skip-check query-in-loop
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки)
				Или ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
					И ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(СтрокаДанных, ПараметрыСканирования) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ОстаткиМаркируемойПродукции.Найти(СтрокаДанных.ШтрихкодУпаковки, "ШтрихкодУпаковки");
			
			УсловиеВыполнено = НайденнаяСтрока.Доступно >= 1;
			Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат" Тогда
				УсловиеВыполнено = Не УсловиеВыполнено;
			КонецЕсли;
			
			Если Не УсловиеВыполнено Тогда
				
				СтрокаДанных.ТекстОшибки = ТекстОшибки;
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаМарки Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			Если СтрокаМарки.СтрокаДерева.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ОстаткиМаркируемойПродукции.Найти(СтрокаМарки.ШтрихкодУпаковки, "ШтрихкодУпаковки");
			
			УсловиеВыполнено = НайденнаяСтрока.Доступно >= 1;
			Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат" Тогда
				УсловиеВыполнено = Не УсловиеВыполнено;
			КонецЕсли;
			
			Если Не УсловиеВыполнено Тогда
				СтрокаМарки.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаМарки.СтрокаДерева.ЕстьОшибки  = Истина;
				
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Инициализирует таблицу значений для контроля остатков маркируемой продукции.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Код маркировки.
// * Доступно - Число - Остаток маркируемой продукции.
Функция ИнициализацияТаблицыПроверкиОстатков()

	КвалификаторыЧисла  = Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Любой);

	ОстаткиМаркируемойПродукции = Новый ТаблицаЗначений;
	ОстаткиМаркируемойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ОстаткиМаркируемойПродукции.Колонки.Добавить("Доступно",         Новый ОписаниеТипов("Число", КвалификаторыЧисла));

	Возврат ОстаткиМаркируемойПродукции;

КонецФункции

// Выполняет инициализацию и заполнение таблицы остатков, необходимых для контроля.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ПараметрыСканирования.
// Возвращаемое значение:
//  ТаблицаЗначений - См. ИнициализацияТаблицыПроверкиОстатков.
Функция ОпределитьОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ОстаткиМаркируемойПродукции = ИнициализацияТаблицыПроверкиОстатков();
	
	ОстаткиПоУмолчанию = Новый Структура("Продажа, Возврат", 1, -1);
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			СтрокаОстатки = ОстаткиМаркируемойПродукции.Добавить();
			СтрокаОстатки.ШтрихкодУпаковки = СтрокаДанных.ШтрихкодУпаковки;
			СтрокаОстатки.Доступно = ОстаткиПоУмолчанию[ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок];
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТовары Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			СтрокаОстатки = ОстаткиМаркируемойПродукции.Добавить();
			СтрокаОстатки.ШтрихкодУпаковки = СтрокаТовары.ШтрихкодУпаковки;
			СтрокаОстатки.Доступно = ОстаткиПоУмолчанию[ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок];
		КонецЦикла;
		
	КонецЕсли;
	
	ШтрихкодированиеИСПереопределяемый.ПриОпределенииОстатковМаркируемойПродукции(
		ОстаткиМаркируемойПродукции, ПараметрыСканирования);
	
	ОстаткиМаркируемойПродукции.Индексы.Добавить("ШтрихкодУпаковки");
	
	Возврат ОстаткиМаркируемойПродукции;
	
КонецФункции

Функция ТребуетсяОткрытьФормуВводаКодаМаркировки(СтрокаДанных, ПараметрыСканирования)
	
	Результат = Неопределено;
	
	ЭтоЗапросКодаМаркировкиПослеСчитыванияEAN = СтрокаДанных.ЭтоШтрихкодНоменклатуры
		И СтрокаДанных.МаркируемаяПродукция = Истина
		И ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
		И ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
		И СтрокаДанных.ОбработатьБезМаркировки = Ложь
		И ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки;
	
	ЭтоЗапросКодаМаркировкиПослеСчитыванияRFID = СтрокаДанных.ДанныеRFID <> Неопределено
		И Не ЗначениеЗаполнено(СтрокаДанных.Штрихкод);
	
	Если ЭтоЗапросКодаМаркировкиПослеСчитыванияEAN
		Или ЭтоЗапросКодаМаркировкиПослеСчитыванияRFID Тогда
		
		ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
		Результат = РезультатОбработкиТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаОшибкиПриРазбореКодаМаркировки(СтрокаДанных, ПараметрыСканирования)
	
	Если ПустаяСтрока(СтрокаДанных.ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	Если НайтиНедопустимыеСимволыXML(СтрокаДанных.Штрихкод) = 0 Тогда
		РезультатОбработки.Штрихкод = СтрокаДанных.Штрихкод;
	КонецЕсли;
	РезультатОбработки.ЕстьОшибки  = Истина;
	РезультатОбработки.ТекстОшибки = СтрокаДанных.ТекстОшибки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПроверкаТребуетсяОбработкаШтрихкода(СтрокаДанных)
	
	Если Не СтрокаДанных.ТребуетсяОбработкаШтрихкода Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	Если НайтиНедопустимыеСимволыXML(СтрокаДанных.Штрихкод) = 0 Тогда
		РезультатОбработки.Штрихкод = СтрокаДанных.Штрихкод;
	КонецЕсли;
	РезультатОбработки.ТребуетсяОбработкаШтрихкода  = Истина;
	Если СтрокаДанных.ДополнительныеПараметры <> Неопределено Тогда
		РезультатОбработки.ДанныеШтрихкода = СтрокаДанных.ДополнительныеПараметры;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет проверку на допустимость обработки вида продукции ИС. Допустимые виды продукции задаются в параметрах
// сканирования.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений Из (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция КонтрольНаДопустимыеВидыПродукции(СтрокаДанных, ПараметрыСканирования)
	
	РезультатОбработки = Неопределено;
	
	ВидПродукцииИС = СтрокаДанных.ВидПродукции;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииИС) Тогда
		
		ИдентификаторыОшибок = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
		Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции Тогда
			
			ВидыПродукцииИС = Новый Массив;
			
			РезультатРазбора = СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора;
			Для Каждого Элемент Из РезультатРазбора Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукцииИС, Элемент.ВидыПродукции, Истина);
			КонецЦикла;
			
			РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, ВидыПродукцииИС);
			
		ИначеЕсли ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 0
			И СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() > 0 Тогда
			
			РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, СтрокаДанных.ВидыПродукцииКодаМаркировки);
			
		// Сканирование немаркируемой продукции в форме проверки и подбора
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1
			И ПараметрыСканирования.ДопустимыеВидыПродукции[0] <> ВидПродукцииИС Тогда
			
			РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, НСтр("ru = 'Немаркируемая продукция'"));
			
		КонецЕсли;
		
		Возврат РезультатОбработки;
		
	КонецЕсли;
	
	ДопустимВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
	Если Не ДопустимВидПродукции Тогда
		
		РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, ВидПродукцииИС);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет проверку кода маркировки на уже обработанный, путем поиска в кэше обработанных кодов маркировки.
// 
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений Из (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ПроверкаШтрихкодаНаУжеДобавленный(СтрокаДанных, ПараметрыСканирования)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Штрихкод = СтрокаДанных.Штрихкод;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	Если ОбработанныеКодыМаркировки.Получить(Штрихкод) = Неопределено
		Или ТребуетсяЧастичноеВыбытие(ПараметрыСканирования)
			И ИнтеграцияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
			СтрокаДанных.ВидПродукции,
			ПараметрыСканирования.ВидОперацииИСМП) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
	
	СтрокаДанных.ТекстОшибки                = ТекстОшибкиУжеДобавленаВДокумент();
	РезультатОбработки                      = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	РезультатОбработки.ДанныеШтрихкода      = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
	РезультатОбработки.ЕстьОшибки           = Истина;
	РезультатОбработки.ТекстОшибки          = ТекстОшибкиУжеДобавленаВДокумент();
	
	Возврат РезультатОбработки;
	
КонецФункции

#Область ТекстыОшибок

// Возвращает текст ошибки, что вид продукции не поддерживается.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений Из (См. ИнициализироватьТаблицуМаркированныеТовары).
//  ПоддерживаемыеВидыПродукции - Массив - Список допустимых видов продукции.
//  ВидПродукцииШтрихкода - ПеречислениеСсылка.ВидыПродукцииИС, Массив - вид продукции штрихкода.
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиНеПоддерживаетсяВидПродукции(СтрокаДанных, ПоддерживаемыеВидыПродукции, ВидПродукцииШтрихкода)
	
	ПредставлениеВидаПродукции = НСтр("ru = '<нет данных>'");
	Если ЗначениеЗаполнено(ВидПродукцииШтрихкода) Тогда
		Если ТипЗнч(ВидПродукцииШтрихкода) = Тип("Массив") Тогда
			ПредставлениеВидаПродукции = СтрСоединить(ВидПродукцииШтрихкода, ", ");
		Иначе
			ПредставлениеВидаПродукции = Строка(ВидПродукцииШтрихкода);
		КонецЕсли;
	КонецЕсли;
	
	Позиция = НайтиНедопустимыеСимволыXML(СтрокаДанных.Штрихкод);
	Если Позиция > 0 Тогда
		СтрокаДанных.Штрихкод = Лев(СтрокаДанных.Штрихкод, Позиция - 1);
	КонецЕсли;
	ПредставлениеШтрихкода = ШтрихкодированиеИСКлиентСервер.ПредставлениеШтрихкода(СтрокаДанных.Штрихкод);
	
	Если ПоддерживаемыеВидыПродукции.Количество() = 0 Тогда
		ПоддерживаемыеВидыПродукцииСтрокой = НСтр("ru = 'Не определены'");
	Иначе
		ПоддерживаемыеВидыПродукцииСтрокой = СтрСоединить(ПоддерживаемыеВидыПродукции, ", ");
	КонецЕсли;
	
	Фрагмент1 = НСтр("ru = 'Считанный код'");
	Фрагмент2 = Новый ФорматированнаяСтрока(
		ПредставлениеШтрихкода, Новый Шрифт(,,,,Истина),
		ЦветаСтиля.ЦветГиперссылкиГосИС,,
		"СкопироватьШтриховойКодВБуферОбмена");
	Фрагмент3 = СтрШаблон(НСтр("ru='опознан как %1.'"), НРег(ПредставлениеВидаПродукции));
	Фрагмент4 = СтрШаблон(НСтр("ru='Ожидаемые виды продукции: %1.'"), ПоддерживаемыеВидыПродукцииСтрокой);
	
	ТекстОшибки = Новый ФорматированнаяСтрока(Фрагмент1, " ", Фрагмент2, " ", Фрагмент3, Символы.ПС, Фрагмент4);
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ТекстОшибкиНеСоответствуетСтандартнойУпаковке(КодУпаковки, СтандартныйРазмер, ВложеноПоДаннымСервиса)
	
	ШаблонОшибки = НСтр("ru = 'По данным ГИС МТ в упаковке %3 ед. из %2'");
	Возврат СтрШаблон(
		ШаблонОшибки,
		КодУпаковки, СтандартныйРазмер, ВложеноПоДаннымСервиса);
	
КонецФункции

Функция ТекстОшибкиНеЗаданВидПродукцииНоменклатуры(Номенклатура)
	
	ШаблонОшибки =  НСтр("ru = 'Не задан вид продукции номенклатуры %1'");
	Возврат СтрШаблон(ШаблонОшибки, Номенклатура);
	
КонецФункции

Функция ТекстОшибкиШтрихкодСоответствуетВидамПродукции(ВидыПродукцииКодаМаркировки, ВыключенУчет = Ложь)
	
	ПредставлениеВидовПродукцииКода = СтрСоединить(ВидыПродукцииКодаМаркировки, ",");
	
	Если ВыключенУчет Тогда
		ШаблонОшибки = НСтр("ru = 'В информационной базе выключен учет по видам продукции: %1'");
	Иначе
		ШаблонОшибки = НСтр("ru = 'Значение штрихкода соответствует недопустимым видам продукции: %1'");
	КонецЕсли;
	
	Возврат СтрШаблон(ШаблонОшибки, ПредставлениеВидовПродукцииКода);
	
КонецФункции

Функция ТекстОшибкиНеопределеннойУпаковки()
	
	Возврат НСтр("ru = 'Отсканируйте код логистической упаковки в соответствующей форме
	                   |проверки и подбора маркируемой продукции'");
	
КонецФункции

Функция ТекстОшибкиНеСоответствуетДокументуОснованию()
	
	Возврат НСтр("ru = 'Не соответствует документу-основанию'");
	
КонецФункции

Функция ТекстОшибкиОтсутствуетПоДаннымСервисаИСМП()
	
	Возврат НСтр("ru='Отсутствует по данным сервиса ИС МП.'");
	
КонецФункции

Функция ТекстОшибкиОтсутствуетПоДаннымИнформационнойБазы()
	
	Возврат НСтр("ru='Отсутствует по данным ИБ.'");
	
КонецФункции

// Возвращает шаблон ошибки уже добавлена в документ.
//
// Возвращаемое значение:
//  Строка - Шаблон ошибки.
Функция ТекстОшибкиУжеДобавленаВДокумент() Экспорт
	
	Возврат НСтр("ru='Уже добавлена в документ'");
	
КонецФункции

Функция ТекстОшибкиТребуетсяУточнениеКоличества() Экспорт
	
	Возврат НСтр("ru='Требуется индивидуальное считывание с указанием веса'");
	
КонецФункции

Функция ТекстОшибкиТолькоВесоваяПродукция(СтрокаДанных) Экспорт
	
	ПредставлениеШтрихкода = ШтрихкодированиеИСКлиентСервер.ПредставлениеШтрихкода(СтрокаДанных.Штрихкод);
	
	Возврат СтрШаблон(НСтр("ru = 'Считанный код %1 не требует уточнения веса.
	                             |Отсканируйте код весовой продукции.'"), ПредставлениеШтрихкода);
	
КонецФункции

Функция ТекстОшибкиОбрабатываетсяПовторно()
	
	Возврат НСтр("ru='Обрабатывается повторно'");
	
КонецФункции

Функция ТекстОшибкиОшибкаВДеревеУпаковок()
	
	Возврат НСтр("ru='Проблемы с содержимым'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФормированиеИОбработкаРезультата

#Область РезультатНеТребуетУточненияДанных

// Формирует результат обработки штрихкодов для кодов маркировки, данные которых не удалось сформировать в связи с их
// отсутствием.
//
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(Форма, ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ИсходныеДанные = Новый Структура(
		"Штрихкод, Количество",
		ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество);
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.ИсходныеДанные = ИсходныеДанные;
	
	Если ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			
			Если ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки
				Или ДанныеШтрихкода.ОбработатьБезМаркировки
				Или Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
				
				ДанныеШтрихкода.ОбработатьБезМаркировки = Истина;
				ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры = Истина;
				
				РезультатОбработки = РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
				
			Иначе
				
				РезультатОбработки = РезультатОбработкиТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Форма);
				
			КонецЕсли;
			
		Иначе
			
			ДанныеДляСопоставленияНоменклатуры = Новый Структура;
			ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные",          ИсходныеДанные);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", Новый Массив);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ПараметрыСканирования",   ПараметрыСканирования);
			ДанныеДляСопоставленияНоменклатуры.ШтрихкодыКСопоставлению.Добавить(ИсходныеДанные);
			
			КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
			КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
			КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные   = ДанныеДляСопоставленияНоменклатуры;
			
			РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
			РезультатОбработки.ШтрихкодыПродукцииДляСопоставления.Добавить(ИсходныеДанные);
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
			
			РезультатОбработки.ТекстОшибки = НСтр("ru = 'Упаковка не найдена'");
			РезультатОбработки.ЕстьОшибки  = Истина;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			
			РезультатОбработки.ТребуетсяОбработкаШтрихкода = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для кодов маркировки, в данных которых выявлены ошибки.
//
// Параметры:
//  ДанныеШтрихкодов - См. ИнициализацияДанныхПоШтрихкодам.
//  ДанныеШтрихкода - См. ИнициализироватьДанныеШтрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ФормаУникальныйИдентификатор - ФормаКлиентскогоПриложения, УникальныйИдентификатор - идентификатор, по которому 
//    помещается дерево упаковок во временное хранилище.
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиШтрихкодаПриОшибках(ДанныеШтрихкодов, ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор) Экспорт
	
	Если ДанныеШтрихкодов.ЕстьОшибки Тогда
		
		ДанныеШтрихкода.ТекстОшибки = ДанныеШтрихкодов.ТекстОшибки;
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатДобавления.ТекстОшибки = ДанныеШтрихкодов.ТекстОшибки;
		РезультатДобавления.ЕстьОшибки  = ДанныеШтрихкодов.ЕстьОшибки;
		РезультатДобавления.ОбщаяОшибка = Истина;
		
		Возврат РезультатДобавления;
		
	КонецЕсли;
	
	// Условие для дерева.
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(ДанныеШтрихкода.ВидУпаковки)
		И ДанныеШтрихкодов.ВложенныеШтрихкоды <> Неопределено Тогда
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатДобавления.Штрихкод     = ДанныеШтрихкода.Штрихкод;
		РезультатДобавления.ТипШтрихкода = ДанныеШтрихкода.ТипШтрихкода;
		Если ТипЗнч(ФормаУникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
			РезультатДобавления.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок, ФормаУникальныйИдентификатор);
		Иначе
			РезультатДобавления.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок, ФормаУникальныйИдентификатор.УникальныйИдентификатор);
		КонецЕсли;
		РезультатДобавления.ЕстьОшибкиВДеревеУпаковок = ДанныеШтрихкодов.ЕстьОшибкиВДеревеУпаковок;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ПараметрыОшибки")
			И ДанныеШтрихкода.ПараметрыОшибки <> Неопределено Тогда
			РезультатДобавления.ПараметрыОшибки = ДанныеШтрихкода.ПараметрыОшибки;
		КонецЕсли;
		
	Иначе
		
		Если ДанныеШтрихкода.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Алкогольная)<>Неопределено
			Или (Не ДопустимаПродукцияИСМП(ПараметрыСканирования,Истина)
				И ДанныеШтрихкода.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Пиво)<>Неопределено) Тогда
			
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			РезультатДобавления = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукцииПриОшибках(ДанныеШтрихкода);
			
		ИначеЕсли ПрисутствуетТабачнаяПродукция(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки) Тогда
			
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования);
			
		ИначеЕсли ПрисутствуетПродукцияИСМП(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки) Тогда
			
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			РезультатДобавления = МодульШтрихкодированиеИСМПСлужебный.РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования);
			
		Иначе
			
			РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
			РезультатДобавления.ТекстОшибки = ДанныеШтрихкода.ТекстОшибки;
			РезультатДобавления.ЕстьОшибки  = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

#КонецОбласти

#Область РезультатТребуетУточненияДанных

Функция РезультатОбработкиТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Форма = Неопределено)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = Истина;
	РезультатОбработки.ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СоответствиеШтрихкодовКСопоставлению = Новый Соответствие;
	ШтрихкодыКСопоставлению = Новый Массив;
	ОтложенныеКодыМаркировки = Новый Массив;
	
	ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		ТребуетсяСопоставлениеНоменклатуры = Ложь;
		Если СтрокаДанных.Входящий И СтрокаДанных.ЭтоКодВводаОстатков И Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			// Штрихкод добавляется в отложенные коды, не сопоставляется
		ИначеЕсли СтрокаДанных.ТребуетсяСопоставление
			И ПараметрыСканирования.СопоставлятьНоменклатуру
			И Не СтрокаДанных.ОбработанСОшибками Тогда
			ТребуетсяСопоставлениеНоменклатуры = Истина;
		КонецЕсли;
		
		ЭтоКодМаркировки = Истина;
		Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиНеСоответствуетНиОдномуШаблону Тогда
			ЭтоКодМаркировки = Ложь;
		КонецЕсли;
		
		Если СтрокаДанных.Входящий И ЭтоКодМаркировки Тогда
			
			ОтложенныйКод = Новый Структура(
				"Штрихкод, ШтрихкодBase64, Количество",
				СтрокаДанных.Штрихкод,
				СтрокаДанных.ШтрихкодBase64,
				СтрокаДанных.Количество);
				
			Если ЗначениеЗаполнено(ОтложенныйКод.ШтрихкодBase64) Тогда
				ОтложенныйКод.Вставить("Штрихкод", ОтложенныйКод.ШтрихкодBase64);
				ОтложенныйКод.Вставить("ФорматBase64", Истина);
			КонецЕсли;
			
			ОтложенныеКодыМаркировки.Добавить(ОтложенныйКод);
			
		КонецЕсли;
		
		Если ТребуетсяСопоставлениеНоменклатуры Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанных.EAN) Тогда
				ШтрихкодКСопоставлению = СтрокаДанных.EAN;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
				ШтрихкодКСопоставлению = СтрокаДанных.GTIN;
			Иначе
				ШтрихкодКСопоставлению = СтрокаДанных.Штрихкод;
			КонецЕсли;
			
			Если СоответствиеШтрихкодовКСопоставлению[ШтрихкодКСопоставлению] = Неопределено Тогда
				
				ШтрихкодыКСопоставлению.Добавить(
					Новый Структура(
						"Штрихкод, Количество", ШтрихкодКСопоставлению, 1));
				
				СоответствиеШтрихкодовКСопоставлению.Вставить(ШтрихкодКСопоставлению, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура;
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные",          Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество));
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ПараметрыСканирования",   ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодBase64) Тогда
			ДанныеДляСопоставленияНоменклатуры.ИсходныеДанные.Штрихкод = ДанныеШтрихкода.ШтрихкодBase64;
			ДанныеДляСопоставленияНоменклатуры.ИсходныеДанные.Вставить("ФорматBase64", Истина);
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки = ОтложенныеКодыМаркировки;
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные = ДанныеДляСопоставленияНоменклатуры;
		
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
	РезультатОбработки.ДанныеШтрихкода                    = ДанныеШтрихкода;
	РезультатОбработки.ШтрихкодыПродукцииДляСопоставления = ШтрихкодыКСопоставлению;
	РезультатОбработки.Штрихкод                           = ДанныеШтрихкода.Штрихкод;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае когда 1 штрихкод сопоставлен
//   2 номенклатурным позициям в ИБ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеНоменклатуры(ДанныеШтрихкода, ПараметрыСканирования)
	
	РезультатОбработкиШтрихкода = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных = Истина;
	РезультатОбработкиШтрихкода.ДанныеШтрихкода = ДанныеШтрихкода;
	
	ПараметрыВыбора = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	
	Номенклатура   = Новый Массив;
	Характеристика = Новый Массив;
	Для Каждого Структура Из ДанныеШтрихкода.СписокНоменклатуры Цикл
		Если ЗначениеЗаполнено(Структура.Номенклатура) Тогда
			Номенклатура.Добавить(Структура.Номенклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(Структура.Характеристика) Тогда
			Характеристика.Добавить(Структура.Характеристика);
		КонецЕсли;
	КонецЦикла;
	
	Если Номенклатура.Количество() = 1 Тогда
		Номенклатура = Номенклатура[0];
	КонецЕсли;
	
	Если Характеристика.Количество() = 1 Тогда
		Характеристика = Характеристика[0];
	КонецЕсли;
	
	ПараметрыВыбора.Номенклатура          = Номенклатура;
	ПараметрыВыбора.Характеристика        = Характеристика;
	ПараметрыВыбора.КодМаркировки         = ДанныеШтрихкода.Штрихкод;
	ПараметрыВыбора.ШтрихкодEAN           = ДанныеШтрихкода.EAN;
	ПараметрыВыбора.ПараметрыСканирования = ПараметрыСканирования;
	
	РезультатОбработкиШтрихкода.ПараметрыУточненияДанных = ПараметрыВыбора;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае когда 1 штрихкод сопоставлен
//   2 номенклатурным позициям в ИБ.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ИнициализацияДанныхПоШтрихкодам).
//  УточнениеКоэффициентовУпаковок - ТаблицаЗначений - Таблица для уточнения коэффициетов упаковок.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеКоэффициентаУпаковок(ДанныеШтрихкода, УточнениеКоэффициентовУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	АдресУточнениеКоэффициентовУпаковок = ПоместитьВоВременноеХранилище(УточнениеКоэффициентовУпаковок, Новый УникальныйИдентификатор);
	
	ОтложенныеКодыМаркировки = Новый Массив;
	
	ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		ЭтоКодМаркировки = Истина;
		Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиНеСоответствуетНиОдномуШаблону Тогда
			ЭтоКодМаркировки = Ложь;
		КонецЕсли;
		
		Если СтрокаДанных.Входящий
			И ЭтоКодМаркировки
			// ОСУ: Сканирование GTIN - Уточнение вида упаковки по GTIN - Уточнение количества потребительских упаковок
			И Не (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И СтрокаДанных.КоличествоПотребительскихУпаковок = 0) Тогда
			
			ОтложенныйКод = Новый Структура(
				"Штрихкод, ШтрихкодBase64, Количество",
				СтрокаДанных.Штрихкод,
				СтрокаДанных.ШтрихкодBase64,
				СтрокаДанных.Количество);
			
			Если ЗначениеЗаполнено(ОтложенныйКод.ШтрихкодBase64) Тогда
				ОтложенныйКод.Вставить("Штрихкод", ОтложенныйКод.ШтрихкодBase64);
				ОтложенныйКод.Вставить("ФорматBase64", Истина);
			КонецЕсли;
			
			ОтложенныеКодыМаркировки.Добавить(ОтложенныйКод);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		ДанныеДляУточненияКоэффициентовУпаковок = Новый Структура;
		ДанныеДляУточненияКоэффициентовУпаковок.Вставить("ИсходныеДанные",                      Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество));
		ДанныеДляУточненияКоэффициентовУпаковок.Вставить("АдресУточнениеКоэффициентовУпаковок", АдресУточнениеКоэффициентовУпаковок);
		ДанныеДляУточненияКоэффициентовУпаковок.Вставить("ПараметрыСканирования",               ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодBase64) Тогда
			ДанныеДляУточненияКоэффициентовУпаковок.ИсходныеДанные.Штрихкод = ДанныеШтрихкода.ШтрихкодBase64;
			ДанныеДляУточненияКоэффициентовУпаковок.ИсходныеДанные.Вставить("ФорматBase64", Истина);
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки = ОтложенныеКодыМаркировки;
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "УточнениеКоэффициентовУпаковок";
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные   = ДанныеДляУточненияКоэффициентовУпаковок;
		
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ТребуетсяУточнениеКоэффициентовУпаковок = Истина;
	РезультатОбработки.ДанныеШтрихкода                         = ДанныеШтрихкода;
	РезультатОбработки.АдресУточнениеКоэффициентовУпаковок     = АдресУточнениеКоэффициентовУпаковок;
	РезультатОбработки.Штрихкод                                = ДанныеШтрихкода.Штрихкод;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется обработать неизвестный код маркировки ввода остатков.
//
// Параметры:
//  ДанныеШтрихкода - См. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - см. ПараметрыСканирования.
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.Штрихкод        = ДанныеШтрихкода.Штрихкод;
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется обработать неизвестный код групповой упаковки.
//
// Параметры:
//  ДанныеШтрихкода - (См. ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеКоличества(ДанныеШтрихкода) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.Штрихкод        = ДанныеШтрихкода.Штрихкод;
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае сканирования упаковки.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеУпаковки(ДанныеШтрихкода, ПараметрыСканирования)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки = Истина;
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#Область РезультатКодНеОтноситсяКБиблиотеке

Функция РезультатДобавленияНемаркируемойПродукции(ДанныеШтрихкода, ПараметрыСканирования)
	
	РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатДобавления.ДанныеШтрихкода = ДанныеШтрихкода;
	РезультатДобавления.ИсходныеДанные = Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество);
	ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
	РезультатДобавления.ОбработкаШтрихкодаБезМарки = ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура);
	РезультатДобавления.ТребуетсяОбработкаШтрихкода = Истина;
	
	Возврат РезультатДобавления;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗапросыИТекстыЗапросов

// Возвращает текст запроса получения состава упаковок в иерархии.
Функция ТекстЗапросаСоставаУпаковокВИерархии()
	
	ТекстЗапросаИсходныеДанные =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка                            КАК ШтрихкодУпаковки,
	|	ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка) КАК ШтрихкодРодительскойУпаковки,
	|	""""                                                       КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ 
	|	ШтрихкодыУпаковокТоваров.Ссылка В (&МассивУпаковок)
	|;
	|";
	
	ТекстЗапросаСоставаУпаковок = ТекстЗапросаИсходныеДанные + ТекстЗапросаВложенныхШтрихкодов(Неопределено);
	
	Возврат ТекстЗапросаСоставаУпаковок;
	
КонецФункции

// Возвращает текст запроса для формирования структуры "Вложенные штрихкоды" на основании исходных данных.
// 
// Параметры:
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы, где сформированы исходные данные.
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки                  КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодУпаковки                     КАК УпаковкаУровень0,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.ИдентификаторСтроки
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодРодительскойУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ИсходныеДанные.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ИсходныеДанные.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ИсходныеДанные.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ИсходныеДанные.УпаковкаУровень3             КАК УпаковкаУровень3,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень3  КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень0 ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура   КАК Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковокДляГруппировки
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеДляГруппировки.Номенклатура,
	|	ДанныеДляГруппировки.Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ДанныеШтрихкодовУпаковокДляГруппировки КАК ДанныеДляГруппировки
	|ГДЕ ДанныеДляГруппировки.Номенклатура <> &НоменклатураПустаяСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляГруппировки.Номенклатура,
	|	ДанныеДляГруппировки.Характеристика
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШтрихкодовУпаковок.Номенклатура КАК Номенклатура,
	|	&ТребуетВзвешивания                   КАК ТребуетВзвешивания,
	|	&ПроизвольнаяЕдиницаУчета             КАК ПроизвольнаяЕдиницаУчета
	|ПОМЕСТИТЬ СвойстваНоменклатурыИС
	|ИЗ ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|%ТекстЗапросаСвойстваМаркируемойПродукции%
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0                   КАК УпаковкаУровень0,
	|	ДанныеУпаковок.ИдентификаторСтроки                КАК УпаковкаУровень0ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипШтрихкода      КАК УпаковкаУровень0ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипУпаковки       КАК УпаковкаУровень0ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень0.ЗначениеШтрихкода КАК УпаковкаУровень0Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура      КАК УпаковкаУровень0Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика    КАК УпаковкаУровень0Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень0.Серия             КАК УпаковкаУровень0Серия,
	|	ДанныеУпаковок.УпаковкаУровень0.ХешСумма             КАК УпаковкаУровень0ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень0.ХешСуммаНормализации КАК УпаковкаУровень0ХешСуммаНормализации,
	|	ДанныеУпаковок.УпаковкаУровень0.Количество           КАК УпаковкаУровень0Количество,
	|	ДанныеУпаковок.УпаковкаУровень0.КоличествоПотребительскихУпаковок КАК УпаковкаУровень0КоличествоПотребительскихУпаковок,
	|	ЕСТЬNULL(СвойстваПродукцииУровень0.ВидПродукции, Неопределено)    КАК УпаковкаУровень0ВидПродукции,
	|	ЕСТЬNULL(СвойстваПродукцииУровень0.МаркируемаяПродукция, ЛОЖЬ)    КАК УпаковкаУровень0МаркируемаяПродукция,
	|	СвойстваНоменклатурыИСУровень0.ТребуетВзвешивания       КАК УпаковкаУровень0ТребуетВзвешивания,
	|	СвойстваНоменклатурыИСУровень0.ПроизвольнаяЕдиницаУчета КАК УпаковкаУровень0ПроизвольнаяЕдиницаУчета,
	|
	|	ДанныеУпаковок.УпаковкаУровень1                   КАК УпаковкаУровень1,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень1        КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода      КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки       КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода КАК УпаковкаУровень1Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура      КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика    КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия             КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма             КАК УпаковкаУровень1ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСуммаНормализации КАК УпаковкаУровень1ХешСуммаНормализации,
	|	ДанныеУпаковок.УпаковкаУровень1.Количество           КАК УпаковкаУровень1Количество,
	|	ДанныеУпаковок.УпаковкаУровень1.КоличествоПотребительскихУпаковок КАК УпаковкаУровень1КоличествоПотребительскихУпаковок,
	|	ЕСТЬNULL(СвойстваПродукцииУровень1.ВидПродукции, Неопределено)    КАК УпаковкаУровень1ВидПродукции,
	|	ЕСТЬNULL(СвойстваПродукцииУровень1.МаркируемаяПродукция, ЛОЖЬ)    КАК УпаковкаУровень1МаркируемаяПродукция,
	|	СвойстваНоменклатурыИСУровень1.ТребуетВзвешивания       КАК УпаковкаУровень1ТребуетВзвешивания,
	|	СвойстваНоменклатурыИСУровень1.ПроизвольнаяЕдиницаУчета КАК УпаковкаУровень1ПроизвольнаяЕдиницаУчета,
	|	
	|	ДанныеУпаковок.УпаковкаУровень2                   КАК УпаковкаУровень2,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень2        КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода      КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки       КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода КАК УпаковкаУровень2Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура      КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика    КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия             КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма             КАК УпаковкаУровень2ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСуммаНормализации КАК УпаковкаУровень2ХешСуммаНормализации,
	|	ДанныеУпаковок.УпаковкаУровень2.Количество           КАК УпаковкаУровень2Количество,
	|	ДанныеУпаковок.УпаковкаУровень2.КоличествоПотребительскихУпаковок КАК УпаковкаУровень2КоличествоПотребительскихУпаковок,
	|	ЕСТЬNULL(СвойстваПродукцииУровень2.ВидПродукции, Неопределено)    КАК УпаковкаУровень2ВидПродукции,
	|	ЕСТЬNULL(СвойстваПродукцииУровень2.МаркируемаяПродукция, ЛОЖЬ)    КАК УпаковкаУровень2МаркируемаяПродукция,
	|	СвойстваНоменклатурыИСУровень2.ТребуетВзвешивания       КАК УпаковкаУровень2ТребуетВзвешивания,
	|	СвойстваНоменклатурыИСУровень2.ПроизвольнаяЕдиницаУчета КАК УпаковкаУровень2ПроизвольнаяЕдиницаУчета,
	|	
	|	ДанныеУпаковок.УпаковкаУровень3                   КАК УпаковкаУровень3,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень3        КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода      КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки       КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода КАК УпаковкаУровень3Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура      КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика    КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия             КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма             КАК УпаковкаУровень3ХешСумма,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСуммаНормализации КАК УпаковкаУровень3ХешСуммаНормализации,
	|	ДанныеУпаковок.УпаковкаУровень3.Количество           КАК УпаковкаУровень3Количество,
	|	ДанныеУпаковок.УпаковкаУровень3.КоличествоПотребительскихУпаковок КАК УпаковкаУровень3КоличествоПотребительскихУпаковок,
	|	ЕСТЬNULL(СвойстваПродукцииУровень3.ВидПродукции, Неопределено)    КАК УпаковкаУровень3ВидПродукции,
	|	ЕСТЬNULL(СвойстваПродукцииУровень3.МаркируемаяПродукция, ЛОЖЬ)    КАК УпаковкаУровень3МаркируемаяПродукция,
	|	СвойстваНоменклатурыИСУровень3.ТребуетВзвешивания    КАК УпаковкаУровень3ТребуетВзвешивания,
	|	СвойстваНоменклатурыИСУровень3.ПроизвольнаяЕдиницаУчета КАК УпаковкаУровень3ПроизвольнаяЕдиницаУчета
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень0
	|		ПО ДанныеУпаковок.УпаковкаУровень0.Номенклатура = СвойстваПродукцииУровень0.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень1
	|		ПО ДанныеУпаковок.УпаковкаУровень1.Номенклатура = СвойстваПродукцииУровень1.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень2
	|		ПО ДанныеУпаковок.УпаковкаУровень2.Номенклатура = СвойстваПродукцииУровень2.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень3
	|		ПО ДанныеУпаковок.УпаковкаУровень3.Номенклатура = СвойстваПродукцииУровень3.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНоменклатурыИС КАК СвойстваНоменклатурыИСУровень0
	|		ПО ДанныеУпаковок.УпаковкаУровень0.Номенклатура = СвойстваНоменклатурыИСУровень0.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНоменклатурыИС КАК СвойстваНоменклатурыИСУровень1
	|		ПО ДанныеУпаковок.УпаковкаУровень1.Номенклатура = СвойстваНоменклатурыИСУровень1.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНоменклатурыИС КАК СвойстваНоменклатурыИСУровень2
	|		ПО ДанныеУпаковок.УпаковкаУровень2.Номенклатура = СвойстваНоменклатурыИСУровень2.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНоменклатурыИС КАК СвойстваНоменклатурыИСУровень3
	|		ПО ДанныеУпаковок.УпаковкаУровень3.Номенклатура = СвойстваНоменклатурыИСУровень3.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеШтрихкодовУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СвойстваМаркируемойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|";
	
	ИнтеграцияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеИС", "ДанныеШтрихкодовУпаковок.Номенклатура");
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"%ТекстЗапросаСвойстваМаркируемойПродукции%",
		ТекстЗапросаСвойстваМаркируемойПродукции());
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоОтсканированномуШК

// Собирает данные по маркируемой продукции, которые хранятся в ИБ. Обновляет данные штрихкодов упаковок.
//
// Параметры:
//  ДанныеПоШтрихкодам    - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ДобавленныеСтроки     - Массив Из СтрокаТаблицыЗначений: См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//                        - Неопределено
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//  ЗаполнитьПоСсылкам    - Булево - Выполнить считывание данных из ссылок ШтрихкодУпаковки добавленных строк
Процедура ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ДобавленныеСтроки, ПараметрыСканирования, ЗаполнитьПоСсылкам = Ложь) Экспорт
	
	ШтрихкодыМаркируемойПродукции = Новый Массив;
	Если ДобавленныеСтроки = Неопределено Тогда
		ДобавленныеСтроки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДобавленныеСтроки Цикл
		
		Если ЗаполнитьПоСсылкам Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
				ШтрихкодыМаркируемойПродукции.Добавить(СтрокаДанных.ШтрихкодУпаковки);
			КонецЕсли;
			
		Иначе
			
			// Пропуск строки по флагу ОбработанСОшибками не требуется,
			// так как в этом случае будет заполнено некорректное представление
			// в строках, требующих уточнения номенклатуры.
			
			Если ЗначениеЗаполнено(СтрокаДанных.Штрихкод)
				И (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					Или Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
					Или (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
						И Не ПараметрыСканирования.СозданиеНаборов)) Тогда
				ШтрихкодыМаркируемойПродукции.Добавить(СтрокаДанных);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШтрихкодыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполнитьПоСсылкам Тогда
		ТипыУпаковок = Неопределено;
	Иначе
		ТипыУпаковок = Новый Массив;
		ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	КонецЕсли;
	
	НайденныеУпаковки = ДанныеШтрихкодовУпаковок(ШтрихкодыМаркируемойПродукции, ТипыУпаковок);
	
	Если НайденныеУпаковки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиЗаполнения = ИменаКолонокДляЗаполнения().Номенклатура;
	КолонкиЗаполнения.Вставить("ТипУпаковки",  Истина);
	КолонкиЗаполнения.Вставить("ВидУпаковки",  Истина);
	КолонкиЗаполнения.Вставить("ВидПродукции", Истина);
	КолонкиЗаполненияСтрокой = Неопределено;
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации();
	ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "КодМаркировки";
	
	Для Каждого НайденнаяУпаковка Из НайденныеУпаковки Цикл
		
		СтрокаДанныхКодаМаркировки = Неопределено;
		Если ЗаполнитьПоСсылкам Тогда
			СтрокаДанныхКодаМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(НайденнаяУпаковка.ШтрихкодУпаковки, "ШтрихкодУпаковки");
		КонецЕсли;
		
		Если СтрокаДанныхКодаМаркировки = Неопределено Тогда
			СтрокаДанныхКодаМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(НайденнаяУпаковка.Штрихкод, "Штрихкод");
		КонецЕсли;
		
		Если СтрокаДанныхКодаМаркировки = Неопределено Тогда
			
			ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
				НайденнаяУпаковка.Штрихкод,
				ПараметрыСканирования.ДопустимыеВидыПродукции);
			
			Если ДанныеРазбора <> Неопределено
				И ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
				
				ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
				
				НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);
				
				СтрокаДанныхКодаМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(НормализованныйШтрихкод, "НормализованныйШтрихкод");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДанныхКодаМаркировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанныхКодаМаркировки.ШтрихкодУпаковки = НайденнаяУпаковка.ШтрихкодУпаковки;
		
		СтрокаДанныхКодаМаркировки.Идентифицирован = ЗначениеЗаполнено(НайденнаяУпаковка.Номенклатура)
		                                           Или ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.Номенклатура)
		                                           Или СтрокаДанныхКодаМаркировки.СписокНоменклатуры.Количество();
		СтрокаДанныхКодаМаркировки.ТребуетсяСопоставление = Ложь;
		
		Если Не ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.ВидУпаковки) Тогда
			СтрокаДанныхКодаМаркировки.ТипУпаковки = НайденнаяУпаковка.ТипУпаковки;
			Если СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
			ИначеЕсли СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
				И ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.Номенклатура) Тогда
				СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
			ИначеЕсли СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
				И ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.Номенклатура) Тогда
				СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
			Иначе
				СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяУпаковка.Номенклатура) Тогда
			
			СтрокаДанныхКодаМаркировки.ВидПродукции   = НайденнаяУпаковка.ВидПродукции;
			СтрокаДанныхКодаМаркировки.Номенклатура   = НайденнаяУпаковка.Номенклатура;
			СтрокаДанныхКодаМаркировки.Характеристика = НайденнаяУпаковка.Характеристика;
			Если ИнтеграцияИС.ТребуетсяВыборСерии(СтрокаДанныхКодаМаркировки, ПараметрыСканирования) Тогда
				СтрокаДанныхКодаМаркировки.Серия = НайденнаяУпаковка.Серия;
			КонецЕсли;
			
			Если СтрокаДанныхКодаМаркировки.СписокНоменклатуры.Количество() Тогда
				Для Каждого ВариантСопоставления Из СтрокаДанныхКодаМаркировки.СписокНоменклатуры Цикл
					Если ВариантСопоставления.Номенклатура = НайденнаяУпаковка.Номенклатура
						И ВариантСопоставления.Характеристика = НайденнаяУпаковка.Характеристика Тогда
						СтрокаДанныхКодаМаркировки.ПредставлениеНоменклатуры = ВариантСопоставления.ПредставлениеНоменклатуры;
						СтрокаДанныхКодаМаркировки.СписокНоменклатуры.Очистить();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтрокаДанныхКодаМаркировки.МаркируемаяПродукция     = НайденнаяУпаковка.МаркируемаяПродукция;
			СтрокаДанныхКодаМаркировки.ТребуетВзвешивания       = НайденнаяУпаковка.ТребуетВзвешивания;
			СтрокаДанныхКодаМаркировки.ПроизвольнаяЕдиницаУчета = НайденнаяУпаковка.ПроизвольнаяЕдиницаУчета;
			
			// В случае ЗаполнитьПоСсылкам = Ложь в методе могут считываться только потребительские известные упаковки
			// по данным информационной базы.
			Если Не ЗаполнитьПоСсылкам Тогда
				СтрокаДанныхКодаМаркировки.КоличествоПотребительскихУпаковок = ?(НайденнаяУпаковка.КоличествоПотребительскихУпаковок = 0,
					НайденнаяУпаковка.Количество, НайденнаяУпаковка.КоличествоПотребительскихУпаковок);
				СтрокаДанныхКодаМаркировки.Количество = НайденнаяУпаковка.Количество;
			КонецЕсли;
			
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(НайденнаяУпаковка.ВидПродукции);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.Номенклатура) Тогда
			ОтметитьКОбновлению(ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки, СтрокаДанныхКодаМаркировки, Неопределено);
		ИначеЕсли Не СтрокаДанныхКодаМаркировки.ЭтоКодВводаОстатков
				И Не СтрокаДанныхКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
				И Не СтрокаДанныхКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			СтрокаДанныхКодаМаркировки.ТребуетсяСопоставление = СтрокаДанныхКодаМаркировки.СписокНоменклатуры.Количество() = 0;
		ИначеЕсли СтрокаДанныхКодаМаркировки.ЭтоКодВводаОстатков Тогда
			СтрокаДанныхКодаМаркировки.Количество = 1;
		КонецЕсли;
		
		Если СтрокаДанныхКодаМаркировки.СтрокаДерева <> Неопределено Тогда
			
			Если КолонкиЗаполненияСтрокой = Неопределено Тогда
				ИменаКолонок = Новый Массив;
				Для Каждого Колонка Из СтрокаДанныхКодаМаркировки.СтрокаДерева.Владелец().Колонки Цикл
					Если КолонкиЗаполнения[Колонка.Имя] <> Неопределено Тогда
						ИменаКолонок.Добавить(Колонка.Имя);
					КонецЕсли;
				КонецЦикла;
				КолонкиЗаполненияСтрокой = СтрСоединить(ИменаКолонок, ",");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДанныхКодаМаркировки.СтрокаДерева, СтрокаДанныхКодаМаркировки, КолонкиЗаполненияСтрокой);
			
			// В случае ЗаполнитьПоСсылкам = Истина в методе могут считываться групповые и логистические упаковки
			// в иерархии дерева, полученного по данным сервиса.
			Если ЗаполнитьПоСсылкам Тогда
				СтрокаДанныхКодаМаркировки.СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(НайденнаяУпаковка.КоличествоПотребительскихУпаковок = 0,
					НайденнаяУпаковка.Количество, НайденнаяУпаковка.КоличествоПотребительскихУпаковок);
				СтрокаДанныхКодаМаркировки.СтрокаДерева.КоличествоПоДаннымИБ = НайденнаяУпаковка.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДанныхКодаМаркировки.ЭтоКодВводаОстатков Тогда
			ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует данные по маркируемой продукции, информации о которой нет в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеПоШтрихкодам.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует данные штрихкодов упаковок.
//
// Параметры:
//  СтрокиТаблицы - Массив Из СтрокаТаблицыЗначений - Массив из строк таблицы значний типа 
//  См. ИнициализацияТаблицыДанныхКодовМаркировки
//  ТипыУпаковок - Массив - список из ПеречислениеСсылка.ТипыУпаковок - Коллекция типов упаковок, по которым будет 
//       установлено условие для формирования запроса.
//  ПроверкаНаGS1 - Булево - Добавляет в поиск значение штрихкода без скобок, только для упаковок GS1.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Данные штрихкодов упаковок:
//   * Штрихкод - Строка - Значение штрихкода.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   * ДатаУпаковки - Дата - Дата формирования упаковки.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * Количество - Число - Количество единиц товара соответствующее штрихкоду
//   * МаркируемаяПродукция - Булево - Истина, если продкция подлежит маркированию.
//   * ТребуетВзвешивания - Булево - Истина, если потребительские упаковки номенклатуры требуют взвешивания
//   * ПроизвольнаяЕдиницаУчета - Булево - Истина, если учетная единица номенклатуры отличается от индивидуального КМ
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
Функция ДанныеШтрихкодовУпаковок(СтрокиТаблицы, ТипыУпаковок = Неопределено, ПроверкаНаGS1 = Ложь) Экспорт
	
	ДанныеШтрихкодовУпаковок = Новый ТаблицаЗначений;
	// Исходные данные
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	// Данные из справочника ШтрихкодыУпаковокТоваров
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ШтрихкодУпаковки",     Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ТипУпаковки",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("Количество",                        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ДатаУпаковки",         Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	// Данные из переопределения
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ВидПродукции",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("МаркируемаяПродукция",     Новый ОписаниеТипов("Булево"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ТребуетВзвешивания",       Новый ОписаниеТипов("Булево"));
	ДанныеШтрихкодовУпаковок.Колонки.Добавить("ПроизвольнаяЕдиницаУчета", Новый ОписаниеТипов("Булево"));
	
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат ДанныеШтрихкодовУпаковок;
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	Если ТипЗнч(СтрокиТаблицы[0]) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		
		ШтрихкодыУпаковок = СтрокиТаблицы;
		
		ТекстЗапросаДанныеШтрихкодовУпаковок =
			"ВЫБРАТЬ
			|	ТаблицаШтрихкодыУпаковок.ЗначениеШтрихкода КАК Штрихкод,
			|	ТаблицаШтрихкодыУпаковок.Ссылка            КАК ШтрихкодУпаковки,
			|	ТаблицаШтрихкодыУпаковок.ДатаУпаковки      КАК ДатаУпаковки,
			|	ТаблицаШтрихкодыУпаковок.ТипУпаковки    КАК ТипУпаковки,
			|	ТаблицаШтрихкодыУпаковок.Номенклатура   КАК Номенклатура,
			|	ТаблицаШтрихкодыУпаковок.Характеристика КАК Характеристика,
			|	ТаблицаШтрихкодыУпаковок.Серия          КАК Серия,
			|	ТаблицаШтрихкодыУпаковок.Количество                        КАК Количество,
			|	ТаблицаШтрихкодыУпаковок.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок
			|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК ТаблицаШтрихкодыУпаковок
			|ГДЕ
			|	ТаблицаШтрихкодыУпаковок.Ссылка В (&ШтрихкодыУпаковок)
			|ИНДЕКСИРОВАТЬ ПО
			|	ТаблицаШтрихкодыУпаковок.Номенклатура";
		
		СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);
		
	Иначе
		
		ШтрихкодыУпаковок = ШтрихкодыУпаковок(СтрокиТаблицы, ТипыУпаковок, ПроверкаНаGS1);
		
		Если ШтрихкодыУпаковок.Количество() = 0 Тогда
			Возврат ДанныеШтрихкодовУпаковок;
		КонецЕсли;
		
		ТекстЗапросаДанныеШтрихкодовУпаковок =
			"ВЫБРАТЬ
			|	ШтрихкодыУпаковок.Штрихкод       КАК Штрихкод,
			|	ШтрихкодыУпаковок.Ссылка         КАК ШтрихкодУпаковки,
			|	ШтрихкодыУпаковок.ДатаУпаковки   КАК ДатаУпаковки,
			|	ШтрихкодыУпаковок.ТипУпаковки    КАК ТипУпаковки,
			|	ШтрихкодыУпаковок.Номенклатура   КАК Номенклатура,
			|	ШтрихкодыУпаковок.Характеристика КАК Характеристика,
			|	ШтрихкодыУпаковок.Серия          КАК Серия,
			|	ШтрихкодыУпаковок.Количество                        КАК Количество,
			|	ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок
			|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
			|ИЗ
			|	&ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура";
		
		СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);
		
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);
	
	СписокЗапросов.Добавить(ТекстЗапросаСвойстваМаркируемойПродукции());

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Штрихкод                 КАК Штрихкод,
		|	ДанныеШтрихкодовУпаковок.ШтрихкодУпаковки         КАК ШтрихкодУпаковки,
		|	ДанныеШтрихкодовУпаковок.ДатаУпаковки             КАК ДатаУпаковки,
		|	ДанныеШтрихкодовУпаковок.ТипУпаковки              КАК ТипУпаковки,
		|	ДанныеШтрихкодовУпаковок.Номенклатура             КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика           КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Серия                    КАК Серия,
		|	ДанныеШтрихкодовУпаковок.Количество                        КАК Количество,
		|	ДанныеШтрихкодовУпаковок.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
		|	СвойстваМаркируемойПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
		|	&ТребуетВзвешивания                               КАК ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета                         КАК ПроизвольнаяЕдиницаУчета,
		|	СвойстваМаркируемойПродукции.ВидПродукции         КАК ВидПродукции
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
		|		ПО &ТоварыОписаниеНоменклатурыИС";
	ИнтеграцияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеИС", "ДанныеШтрихкодовУпаковок.Номенклатура");
		
	СписокЗапросов.Добавить(ТекстЗапроса, "ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Результат = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	ДанныеШтрихкодовУпаковок = Результат["ШтрихкодыУпаковок"];
	
	Возврат ДанныеШтрихкодовУпаковок;
	
КонецФункции

// Заполняет строку дерева упаковок по выборке запроса с учетом уровня.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка результата запроса.
//  Уровень - Число - Уровень строки дерева.
	
Процедура ЗаполнитьСтрокуДереваУпаковокПоВыборке(СтрокаДерева, Выборка, Уровень, ОбщиеМодули,
		НастройкиРазбора, ПараметрыСканирования = Неопределено)
	
	СозданиеНаборов = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("СозданиеНаборов")
		И ПараметрыСканирования.СозданиеНаборов;
	
	Если Уровень = 0 Тогда
		СтрокаДерева.ШтрихкодУпаковки                            = Выборка.УпаковкаУровень0;
		СтрокаДерева.ИдентификаторСтроки                         = Выборка.УпаковкаУровень0ИдентификаторСтроки;
		СтрокаДерева.ТипУпаковки                                 = Выборка.УпаковкаУровень0ТипУпаковки;
		СтрокаДерева.ТипШтрихкода                                = Выборка.УпаковкаУровень0ТипШтрихкода;
		СтрокаДерева.Штрихкод                                    = Выборка.УпаковкаУровень0Штрихкод;
		СтрокаДерева.Номенклатура                                = Выборка.УпаковкаУровень0Номенклатура;
		СтрокаДерева.Характеристика                              = Выборка.УпаковкаУровень0Характеристика;
		СтрокаДерева.ХешСумма                                    = Выборка.УпаковкаУровень0ХешСумма;
		СтрокаДерева.ХешСуммаНормализации                        = Выборка.УпаковкаУровень0ХешСуммаНормализации;
		СтрокаДерева.Серия                                       = Выборка.УпаковкаУровень0Серия;
		СтрокаДерева.ВидПродукции                                = Выборка.УпаковкаУровень0ВидПродукции;
		СтрокаДерева.МаркируемаяПродукция                        = Выборка.УпаковкаУровень0МаркируемаяПродукция;
		СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(Выборка.УпаковкаУровень0КоличествоПотребительскихУпаковок = 0,
			Выборка.УпаковкаУровень0Количество, Выборка.УпаковкаУровень0КоличествоПотребительскихУпаковок);
		СтрокаДерева.КоличествоПоДаннымИБ                        = Выборка.УпаковкаУровень0Количество;
		СтрокаДерева.ТребуетВзвешивания                          = Выборка.УпаковкаУровень0ТребуетВзвешивания;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета                    = Выборка.УпаковкаУровень0ПроизвольнаяЕдиницаУчета;
	ИначеЕсли Уровень = 1 Тогда
		СтрокаДерева.ШтрихкодУпаковки                            = Выборка.УпаковкаУровень1;
		СтрокаДерева.ИдентификаторСтроки                         = Выборка.УпаковкаУровень1ИдентификаторСтроки;
		СтрокаДерева.ТипУпаковки                                 = Выборка.УпаковкаУровень1ТипУпаковки;
		СтрокаДерева.ТипШтрихкода                                = Выборка.УпаковкаУровень1ТипШтрихкода;
		СтрокаДерева.Штрихкод                                    = Выборка.УпаковкаУровень1Штрихкод;
		СтрокаДерева.Номенклатура                                = Выборка.УпаковкаУровень1Номенклатура;
		СтрокаДерева.Характеристика                              = Выборка.УпаковкаУровень1Характеристика;
		СтрокаДерева.ХешСумма                                    = Выборка.УпаковкаУровень1ХешСумма;
		СтрокаДерева.ХешСуммаНормализации                        = Выборка.УпаковкаУровень1ХешСуммаНормализации;
		СтрокаДерева.Серия                                       = Выборка.УпаковкаУровень1Серия;
		СтрокаДерева.ВидПродукции                                = Выборка.УпаковкаУровень1ВидПродукции;
		СтрокаДерева.МаркируемаяПродукция                        = Выборка.УпаковкаУровень1МаркируемаяПродукция;
		СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(Выборка.УпаковкаУровень1КоличествоПотребительскихУпаковок = 0,
			Выборка.УпаковкаУровень1Количество, Выборка.УпаковкаУровень1КоличествоПотребительскихУпаковок);
		СтрокаДерева.КоличествоПоДаннымИБ                        = Выборка.УпаковкаУровень1Количество;
		СтрокаДерева.ТребуетВзвешивания                          = Выборка.УпаковкаУровень1ТребуетВзвешивания;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета                    = Выборка.УпаковкаУровень1ПроизвольнаяЕдиницаУчета;
	ИначеЕсли Уровень = 2 Тогда
		СтрокаДерева.ШтрихкодУпаковки                            = Выборка.УпаковкаУровень2;
		СтрокаДерева.ИдентификаторСтроки                         = Выборка.УпаковкаУровень2ИдентификаторСтроки;
		СтрокаДерева.ТипУпаковки                                 = Выборка.УпаковкаУровень2ТипУпаковки;
		СтрокаДерева.ТипШтрихкода                                = Выборка.УпаковкаУровень2ТипШтрихкода;
		СтрокаДерева.Штрихкод                                    = Выборка.УпаковкаУровень2Штрихкод;
		СтрокаДерева.Номенклатура                                = Выборка.УпаковкаУровень2Номенклатура;
		СтрокаДерева.Характеристика                              = Выборка.УпаковкаУровень2Характеристика;
		СтрокаДерева.ХешСумма                                    = Выборка.УпаковкаУровень2ХешСумма;
		СтрокаДерева.ХешСуммаНормализации                        = Выборка.УпаковкаУровень2ХешСуммаНормализации;
		СтрокаДерева.Серия                                       = Выборка.УпаковкаУровень2Серия;
		СтрокаДерева.ВидПродукции                                = Выборка.УпаковкаУровень2ВидПродукции;
		СтрокаДерева.МаркируемаяПродукция                        = Выборка.УпаковкаУровень2МаркируемаяПродукция;
		СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(Выборка.УпаковкаУровень2КоличествоПотребительскихУпаковок = 0,
			Выборка.УпаковкаУровень2Количество, Выборка.УпаковкаУровень2КоличествоПотребительскихУпаковок);
		СтрокаДерева.КоличествоПоДаннымИБ                        = Выборка.УпаковкаУровень2Количество;
		СтрокаДерева.ТребуетВзвешивания                          = Выборка.УпаковкаУровень2ТребуетВзвешивания;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета                    = Выборка.УпаковкаУровень2ПроизвольнаяЕдиницаУчета;
	ИначеЕсли Уровень = 3 Тогда
		СтрокаДерева.ШтрихкодУпаковки                            = Выборка.УпаковкаУровень3;
		СтрокаДерева.ИдентификаторСтроки                         = Выборка.УпаковкаУровень3ИдентификаторСтроки;
		СтрокаДерева.ТипУпаковки                                 = Выборка.УпаковкаУровень3ТипУпаковки;
		СтрокаДерева.ТипШтрихкода                                = Выборка.УпаковкаУровень3ТипШтрихкода;
		СтрокаДерева.Штрихкод                                    = Выборка.УпаковкаУровень3Штрихкод;
		СтрокаДерева.Номенклатура                                = Выборка.УпаковкаУровень3Номенклатура;
		СтрокаДерева.Характеристика                              = Выборка.УпаковкаУровень3Характеристика;
		СтрокаДерева.ХешСумма                                    = Выборка.УпаковкаУровень3ХешСумма;
		СтрокаДерева.ХешСуммаНормализации                        = Выборка.УпаковкаУровень3ХешСуммаНормализации;
		СтрокаДерева.Серия                                       = Выборка.УпаковкаУровень3Серия;
		СтрокаДерева.ВидПродукции                                = Выборка.УпаковкаУровень3ВидПродукции;
		СтрокаДерева.МаркируемаяПродукция                        = Выборка.УпаковкаУровень3МаркируемаяПродукция;
		СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = ?(Выборка.УпаковкаУровень3КоличествоПотребительскихУпаковок = 0,
			Выборка.УпаковкаУровень3Количество, Выборка.УпаковкаУровень3КоличествоПотребительскихУпаковок);
		СтрокаДерева.КоличествоПоДаннымИБ                        = Выборка.УпаковкаУровень3Количество;
		СтрокаДерева.ТребуетВзвешивания                          = Выборка.УпаковкаУровень3ТребуетВзвешивания;
		СтрокаДерева.ПроизвольнаяЕдиницаУчета                    = Выборка.УпаковкаУровень3ПроизвольнаяЕдиницаУчета;
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	Если ПараметрыСканирования <> Неопределено
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		И ЗначениеЗаполнено(СтрокаДерева.Серия)
		И ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено
		И Не ИнтеграцияИС.ТребуетсяВыборСерии(СтрокаДерева, ПараметрыСканирования) Тогда
		СтрокаДерева.Серия = Неопределено;
	КонецЕсли;
	
	Если ПараметрыСканирования <> Неопределено
		И Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		
		ВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
		
		ДанныеРазбора = ЗаполнитьСтрокуДереваПоДаннымРазбораШтрихкода(
			СтрокаДерева, ОбщиеМодули, НастройкиРазбора, ПараметрыСканирования);
		Если ДанныеРазбора <> Неопределено
			И ДанныеРазбора.ВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
			СтрокаДерева.ВидПродукции = ВидПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
	// Предварительное заполнение Вида упаковки
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		Если СтрокаДерева.Родитель <> Неопределено
			И СтрокаДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			И СтрокаДерева.Родитель.Номенклатура <> СтрокаДерева.Номенклатура Тогда
			СтрокаДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC
		Или СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
		Или СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
		И СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		// В документе маркировки требуется точное определение вида упаковки
		И Не СозданиеНаборов Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
		И СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.ТипУпаковки)
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
		И СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ > 1 
		// В документе маркировки требуется точное определение вида упаковки
		И Не СозданиеНаборов Тогда
		СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСтрокуДереваПоДаннымРазбораШтрихкода(СтрокаДерева, ОбщиеМодули, НастройкиРазбора, ПараметрыСканирования = Неопределено)
	
	Если СтрокаДерева.СоставКодаМаркировки <> Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) И ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	Иначе
		ВидыПродукции = СтрокаДерева.ВидПродукции;
	КонецЕсли;
	
	ПримечаниеКРезультатуРазбора = Неопределено;
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
		СтрокаДерева.Штрихкод, НастройкиРазбора.Кеш, ВидыПродукции, ПримечаниеКРезультатуРазбора,
		НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
	
	Если ДанныеРазбора = Неопределено
		И НастройкиРазбора.Общие.ТолькоУчитываемыеВидыПродукции
		И ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки().КодМаркировкиСоответствуетДругимВидамПродукции Тогда
		
		ВидыПродукцииДляРазбора = ВидыПродукции;
		Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
			Виды = ВидыПродукции;
		Иначе
			Виды = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыПродукции);
		КонецЕсли;
		ВыключенныеВидыПродукции = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Виды, НастройкиРазбора.Общие.ДоступныеВидыПродукции);
		Если ВыключенныеВидыПродукции.Количество() Тогда
			НастройкиРазбора.Общие = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь);
		КонецЕсли;
		Если СтрокаДерева.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
			И СтрокаДерева.ВидПродукции = ВидыПродукции Тогда
			ВидыПродукцииДляРазбора = Новый Массив();
			ВидыПродукцииДляРазбора.Добавить(Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
			ВидыПродукцииДляРазбора.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		КонецЕсли;
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
			СтрокаДерева.Штрихкод, НастройкиРазбора.Кеш, ВидыПродукцииДляРазбора, ПримечаниеКРезультатуРазбора,
			НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
		
	КонецЕсли;
	
	Если ДанныеРазбора <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) И ДанныеРазбора.ВидыПродукции.Количество() = 1 Тогда
			СтрокаДерева.ВидПродукции = ДанныеРазбора.ВидыПродукции[0];
		КонецЕсли;
		
		СтрокаДерева.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
		СтрокаДерева.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
		СтрокаДерева.ДанныеРазбора        = ДанныеРазбора;
		
		ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(СтрокаДерева, ДанныеРазбора);
		
		Если ДанныеРазбора.СоставКодаМаркировки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеРазбора.СоставКодаМаркировки);
		КонецЕсли;
		
		ВключаяТабачнуюПродукцию = Истина;
		Если ПрисутствуетПродукцияИСМП(ДанныеРазбора.ВидыПродукции, ВключаяТабачнуюПродукцию) Тогда
			ОбщиеМодули.ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(СтрокаДерева, ДанныеРазбора);
		КонецЕсли;
		
	Иначе
		
		СтрокаДерева.ВидУпаковки = Неопределено;
		СтрокаДерева.ЕстьОшибки  = Истина;
		СтрокаДерева.ТекстОшибки = ПримечаниеКРезультатуРазбора.ТекстОшибки;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
		// Нормализация используется для поиска КМ без учета МРЦ.
		// Для табачных пачек и блоков нормализованный код не содержит МРЦ.
		// Для логистические упаковки GS1-128 нормализованный код не содержит скобок.
		// Для остальной маркированной продукции нормализованный штрихкод равен штрихкоду.
		СтрокаДерева.НормализованныйШтрихкод = СтрокаДерева.Штрихкод;
	КонецЕсли;
	
	Возврат ДанныеРазбора;
	
КонецФункции

// Выполняет поиск по значениям штрихкодов в справочнике штрихкоды упаковок. Если элемент справочника найден - добавляет
// штрихкод в ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок и удаляет из ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.
//
// Параметры:
//  ШтрихкодыУпаковок - Массив из СтрокаТаблицыЗначений: См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//
// Возвращаемое значение:
//  ТаблицаЗначений - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
Функция НайтиУпаковкиПоШтрихкодам(ШтрихкодыУпаковок)
	
	ТипыУпаковокДляКоробок = ИнтеграцияИСКлиентСервер.ТипыУпаковокДляКоробок();
	
	Возврат ШтрихкодыУпаковок(ШтрихкодыУпаковок, ТипыУпаковокДляКоробок, Истина);
	
КонецФункции

// Дополняет структуру "Данные по штрихкодам" информацией по известным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ДанныеКодовМаркировкиКОбработке - Массив Из СтрокаТаблицыЗначений - Строки данных кодов маркировки для обработки
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
Процедура ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ДанныеКодовМаркировкиКОбработке = Неопределено, ПараметрыСканирования) Экспорт
	
	ШтрихкодИСтрокаДанныхКодаМаркировки = Новый Соответствие;
	ШтрихкодыУпаковокДляОпределения     = Новый Массив;
	
	Если ДанныеКодовМаркировкиКОбработке = Неопределено Тогда
		ДанныеКодовМаркировкиКОбработке = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировкиКОбработке Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки, Истина, Ложь)
			И ЗначениеЗаполнено(СтрокаДанных.Штрихкод)
			И Не СтрокаДанных.Идентифицирован Тогда
			ШтрихкодыУпаковокДляОпределения.Добавить(СтрокаДанных);
			ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДанных.Штрихкод] = СтрокаДанных;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШтрихкодыУпаковокДляОпределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеМодули = ОбщиеМодулиПодсистем();
	
	НайденныеУпаковки = НайтиУпаковкиПоШтрихкодам(ШтрихкодыУпаковокДляОпределения);
	Если НайденныеУпаковки.Количество() > 0 Тогда
		
		Для Каждого НайденнаяУпаковка Из НайденныеУпаковки Цикл
			
			СтрокаДанныхКодаМаркировки = ШтрихкодИСтрокаДанныхКодаМаркировки[НайденнаяУпаковка.Штрихкод];
			СтрокаДанныхКодаМаркировки.ШтрихкодУпаковки = НайденнаяУпаковка.Ссылка;
			СтрокаДанныхКодаМаркировки.Номенклатура     = НайденнаяУпаковка.Номенклатура;
			СтрокаДанныхКодаМаркировки.Характеристика   = НайденнаяУпаковка.Характеристика;
			СтрокаДанныхКодаМаркировки.Серия            = НайденнаяУпаковка.Серия;
			
			СтрокаДанныхКодаМаркировки.КоличествоПотребительскихУпаковок = ?(НайденнаяУпаковка.КоличествоПотребительскихУпаковок = 0,
				НайденнаяУпаковка.Количество, НайденнаяУпаковка.КоличествоПотребительскихУпаковок);
			СтрокаДанныхКодаМаркировки.Количество = НайденнаяУпаковка.Количество;
			
			СтрокаДанныхКодаМаркировки.ТипУпаковки     = НайденнаяУпаковка.ТипУпаковки;
			СтрокаДанныхКодаМаркировки.Идентифицирован = Истина;
			
			Если Не ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.ВидУпаковки)
				И СтрокаДанныхКодаМаркировки.ДанныеРазбора <> Неопределено
				И ЗначениеЗаполнено(СтрокаДанныхКодаМаркировки.ВидПродукции) Тогда
				
				ДоступныеВидыУпаковок = СтрокаДанныхКодаМаркировки.ДанныеРазбора.ВидыУпаковокПоВидамПродукции[СтрокаДанныхКодаМаркировки.ВидПродукции];
				Если СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
					И ДоступныеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Набор) <> Неопределено Тогда
					СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
				ИначеЕсли СтрокаДанныхКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
					И ДоступныеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Групповая) <> Неопределено
					И ДоступныеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Набор) = Неопределено Тогда
					СтрокаДанныхКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
				КонецЕсли;
				
				Если СтрокаДанныхКодаМаркировки.СтрокаДерева <> Неопределено Тогда
					СтрокаДанныхКодаМаркировки.СтрокаДерева.ВидУпаковки = СтрокаДанныхКодаМаркировки.ВидУпаковки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Для известных упаковок требуется вернуть ошибку при сканировании упаковки чужого вида продукции
		ОтборПоВидуПродукции = ПараметрыСканирования.ОтборПоВидуПродукции;
		ПараметрыСканирования.ОтборПоВидуПродукции = Ложь;
		ВложенныеШтрихкодыИзвестныхУпаковок = ВложенныеШтрихкодыИзвестныхУпаковок(
			НайденныеУпаковки.ВыгрузитьКолонку("Ссылка"), ПараметрыСканирования);
		ПараметрыСканирования.ОтборПоВидуПродукции = ОтборПоВидуПродукции;
		
		// Изменяем исходное значение штрихкода, на значение сохраненное в БД
		СтрокиДляИзмененияШтрихкода = НайденныеУпаковки.НайтиСтроки(Новый Структура("ШтрихкодСовпадает", Ложь));
		Если СтрокиДляИзмененияШтрихкода.Количество() > 0
			И ДанныеПоШтрихкодам.ЗаменыШтрихкодов = Неопределено Тогда
			ДанныеПоШтрихкодам.ЗаменыШтрихкодов = Новый Соответствие;
		КонецЕсли;
		Для Каждого СтрокаДляИзмененияШтрихкода Из СтрокиДляИзмененияШтрихкода Цикл
			
			СтрокаДанныхКодаМаркировки = ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДляИзмененияШтрихкода.Штрихкод];
			
			// Данные о заменах нужны для поиска результатов обработки в механизмах загрузки данных из ТСД
			ДанныеПоШтрихкодам.ЗаменыШтрихкодов.Вставить(СтрокаДанныхКодаМаркировки.Штрихкод, СтрокаДляИзмененияШтрихкода.ЗначениеШтрихкода);
			
			СтрокаДанныхКодаМаркировки.Штрихкод = СтрокаДляИзмененияШтрихкода.ЗначениеШтрихкода;
			ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанныхКодаМаркировки, ОбщиеМодули);
			
		КонецЦикла;
		
		Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
			Или ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
			
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
			
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		Иначе
			ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
				ДанныеПоШтрихкодам, ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования);
		КонецЕсли;
		
		ИменаКолонокДляКопированияСвойств = Новый Массив;
		ИменаКолонокДляКопированияСвойств.Добавить("ШтрихкодУпаковки"); // Ссылка на справочник ШтрихкодыУпаковокТоваров
		ИменаКолонокДляКопированияСвойств.Добавить("Номенклатура");     // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("Характеристика");   // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("Серия");            // Данные из справочника
		
		ИменаКолонокДляКопированияСвойств.Добавить("ВидПродукции");         // Данные из справочника. Через номенклатуру
		ИменаКолонокДляКопированияСвойств.Добавить("МаркируемаяПродукция"); // Данные из справочника. Через номенклатуру
		ИменаКолонокДляКопированияСвойств.Добавить("ТипШтрихкода");         // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("ТипУпаковки");          // Данные из справочника
		
		ИменаКолонокДляКопированияСвойств.Добавить("ТребуетВзвешивания");       // Данные из регистра Описание номенклатуры ИС.
		ИменаКолонокДляКопированияСвойств.Добавить("ПроизвольнаяЕдиницаУчета"); // Данные из регистра Описание номенклатуры ИС.
		
		ПараметрыДополненияТаблицыДанныеКодовМаркировки = ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ИменаКолонокДляКопированияСвойств);
		ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;
		
		ДобавленныеСтроки = Новый Массив;
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДобавленныеСтроки,
			ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);
		
		ОтключеноЗапрашиватьДанныеСервисаИСМП = Ложь;
		Если ПараметрыСканирования.Свойство("ЗапрашиватьДанныеСервисаИСМП")
			И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
			ОтключеноЗапрашиватьДанныеСервисаИСМП = Истина;
		КонецЕсли;
		НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		Если ОтключеноЗапрашиватьДанныеСервисаИСМП Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Истина;
		КонецЕсли;
		
		ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДобавленныеСтроки);
		
		ВидыПродукцииДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ВидыПродукции;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукцииДерева, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по известным наборам (режим создания наборов).
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам
//  ДанныеКодовМаркировкиКОбработке - Массив Из СтрокаТаблицыЗначений - Строки данных кодов маркировки для обработки
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
Процедура ЗаполнитьДанныеИзвестныхСозданныхНаборов(ДанныеПоШтрихкодам, ДанныеКодовМаркировкиКОбработке = Неопределено, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.СозданиеНаборов Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодИСтрокаДанныхКодаМаркировки = Новый Соответствие;
	ШтрихкодыУпаковокДляОпределения     = Новый Массив;
	
	Если ДанныеКодовМаркировкиКОбработке = Неопределено Тогда
		ДанныеКодовМаркировкиКОбработке = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировкиКОбработке Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И Не СтрокаДанных.Идентифицирован Тогда
			ШтрихкодыУпаковокДляОпределения.Добавить(СтрокаДанных);
			ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДанных.Штрихкод] = СтрокаДанных;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШтрихкодыУпаковокДляОпределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеМодули = ОбщиеМодулиПодсистем();
	
	НайденныеУпаковки = ШтрихкодыУпаковок(ШтрихкодыУпаковокДляОпределения, Перечисления.ТипыУпаковок.МаркированныйТовар, Истина);
	Если НайденныеУпаковки.Количество() > 0 Тогда
		
		Для Каждого НайденнаяУпаковка Из НайденныеУпаковки Цикл
			
			СтрокаДанныхКодаМаркировки = ШтрихкодИСтрокаДанныхКодаМаркировки[НайденнаяУпаковка.Штрихкод];
			СтрокаДанныхКодаМаркировки.ШтрихкодУпаковки = НайденнаяУпаковка.Ссылка;
			СтрокаДанныхКодаМаркировки.Номенклатура     = НайденнаяУпаковка.Номенклатура;
			СтрокаДанныхКодаМаркировки.Характеристика   = НайденнаяУпаковка.Характеристика;
			СтрокаДанныхКодаМаркировки.Серия            = НайденнаяУпаковка.Серия;
			
			СтрокаДанныхКодаМаркировки.КоличествоПотребительскихУпаковок = ?(НайденнаяУпаковка.КоличествоПотребительскихУпаковок = 0,
				НайденнаяУпаковка.Количество, НайденнаяУпаковка.КоличествоПотребительскихУпаковок);
			СтрокаДанныхКодаМаркировки.Количество = НайденнаяУпаковка.Количество;
			
			СтрокаДанныхКодаМаркировки.ТипУпаковки      = НайденнаяУпаковка.ТипУпаковки;
			СтрокаДанныхКодаМаркировки.Идентифицирован  = Истина;
			
		КонецЦикла;
		
		// Для известных упаковок требуется вернуть ошибку при сканировании упаковки чужого вида продукции
		ОтборПоВидуПродукции = ПараметрыСканирования.ОтборПоВидуПродукции;
		ПараметрыСканирования.ОтборПоВидуПродукции = Ложь;
		ВложенныеШтрихкодыИзвестныхУпаковок = ВложенныеШтрихкодыИзвестныхУпаковок(
			НайденныеУпаковки.ВыгрузитьКолонку("Ссылка"), ПараметрыСканирования);
		ПараметрыСканирования.ОтборПоВидуПродукции = ОтборПоВидуПродукции;
		
		// Изменяем исходное значение штрихкода, на значение сохраненное в БД
		СтрокиДляИзмененияШтрихкода = НайденныеУпаковки.НайтиСтроки(Новый Структура("ШтрихкодСовпадает", Ложь));
		Если СтрокиДляИзмененияШтрихкода.Количество() > 0
			И ДанныеПоШтрихкодам.ЗаменыШтрихкодов = Неопределено Тогда
			ДанныеПоШтрихкодам.ЗаменыШтрихкодов = Новый Соответствие;
		КонецЕсли;
		Для Каждого СтрокаДляИзмененияШтрихкода Из СтрокиДляИзмененияШтрихкода Цикл
			
			СтрокаДанныхКодаМаркировки = ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДляИзмененияШтрихкода.Штрихкод];
			
			// Данные о заменах нужны для поиска результатов обработки в механизмах загрузки данных из ТСД
			ДанныеПоШтрихкодам.ЗаменыШтрихкодов.Вставить(СтрокаДанныхКодаМаркировки.Штрихкод, СтрокаДляИзмененияШтрихкода.ЗначениеШтрихкода);
			
			СтрокаДанныхКодаМаркировки.Штрихкод = СтрокаДляИзмененияШтрихкода.ЗначениеШтрихкода;
			ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанныхКодаМаркировки, ОбщиеМодули);
			
		КонецЦикла;
		
		Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
			Или ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
			
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
			
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		Иначе
			ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
				ДанныеПоШтрихкодам, ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования);
		КонецЕсли;
		
		ИменаКолонокДляКопированияСвойств = Новый Массив;
		ИменаКолонокДляКопированияСвойств.Добавить("ШтрихкодУпаковки"); // Ссылка на справочник ШтрихкодыУпаковокТоваров
		ИменаКолонокДляКопированияСвойств.Добавить("Номенклатура");     // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("Характеристика");   // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("Серия");            // Данные из справочника
		
		ИменаКолонокДляКопированияСвойств.Добавить("ВидПродукции");         // Данные из справочника. Через номенклатуру
		ИменаКолонокДляКопированияСвойств.Добавить("МаркируемаяПродукция"); // Данные из справочника. Через номенклатуру
		ИменаКолонокДляКопированияСвойств.Добавить("ТипШтрихкода");         // Данные из справочника
		ИменаКолонокДляКопированияСвойств.Добавить("ТипУпаковки");          // Данные из справочника
		
		ИменаКолонокДляКопированияСвойств.Добавить("ТребуетВзвешивания");       // Данные из регистра Описание номенклатуры ИС.
		ИменаКолонокДляКопированияСвойств.Добавить("ПроизвольнаяЕдиницаУчета"); // Данные из регистра Описание номенклатуры ИС.
		
		ПараметрыДополненияТаблицыДанныеКодовМаркировки = ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ИменаКолонокДляКопированияСвойств);
		ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;
		
		ДобавленныеСтроки = Новый Массив;
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДобавленныеСтроки,
			ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);
		
		ОтключеноЗапрашиватьДанныеСервисаИСМП = Ложь;
		Если ПараметрыСканирования.Свойство("ЗапрашиватьДанныеСервисаИСМП")
			И ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Ложь;
			ОтключеноЗапрашиватьДанныеСервисаИСМП = Истина;
		КонецЕсли;
		НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		Если ОтключеноЗапрашиватьДанныеСервисаИСМП Тогда
			ПараметрыСканирования.ЗапрашиватьДанныеСервисаИСМП = Истина;
		КонецЕсли;
		
		ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДобавленныеСтроки, ПараметрыСканирования);
		
		ВидыПродукцииДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ВидыПродукции;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукцииДерева, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИменаКолонокДляЗаполнения() Экспорт
	
	КолонкиНоменклатура = Новый Соответствие;
	КолонкиНоменклатура.Вставить("Номенклатура",                  Истина);
	КолонкиНоменклатура.Вставить("Характеристика",                Истина);
	КолонкиНоменклатура.Вставить("Серия",                         Истина);
	КолонкиНоменклатура.Вставить("ТребуетВзвешивания",            Истина);
	КолонкиНоменклатура.Вставить("ПроизвольнаяЕдиницаУчета",      Истина);
	КолонкиНоменклатура.Вставить("МаркируемаяПродукция",          Истина);
	КолонкиНоменклатура.Вставить("СкоропортящаясяПродукция",      Истина);
	КолонкиНоменклатура.Вставить("НоменклатураСопоставленаПоУПД", Истина);
	КолонкиНоменклатура.Вставить("Упаковка",                      Истина);
	
	КолонкиИсключения = Новый Соответствие;
	КолонкиИсключения.Вставить("Входящий", Истина);
	
	КолонкиИсключения.Вставить("СоставКодаМаркировки",    Истина);
	КолонкиИсключения.Вставить("ДанныеРазбора",           Истина);
	КолонкиИсключения.Вставить("НормализованныйШтрихкод", Истина);
	КолонкиИсключения.Вставить("ХешСуммаНормализации",    Истина);
	КолонкиИсключения.Вставить("ПараметрыОшибки",         Истина);
	КолонкиИсключения.Вставить("ТекстОшибки",             Истина);
	
	// Штрихкод - попадает в Прочее.
	// Заполнение штрихкода требуется при замене кодов с МРЦ - без МРЦ
	
	КолонкиКоличество = Новый Соответствие;
	КолонкиКоличество.Вставить("Количество",                        Истина);
	КолонкиКоличество.Вставить("КоличествоПотребительскихУпаковок", Истина);
	КолонкиКоличество.Вставить("КоличествоГрупповыхУпаковок",       Истина);
	КолонкиКоличество.Вставить("ПлановоеКоличествоПотребительскихУпаковок", Истина);
	КолонкиКоличество.Вставить("Коэффициент",                               Истина);
	
	КолонкиСлужебные = Новый Соответствие;
	КолонкиСлужебные.Вставить("EAN",                      Истина);
	КолонкиСлужебные.Вставить("GTIN",                     Истина);
	КолонкиСлужебные.Вставить("ТипУпаковки",              Истина);
	КолонкиСлужебные.Вставить("ТипШтрихкода",             Истина);
	КолонкиСлужебные.Вставить("ПолныйКодМаркировки",      Истина);
	КолонкиСлужебные.Вставить("ЕстьВПулеКодовМаркировки", Истина);
	КолонкиСлужебные.Вставить("ЭтоКодВводаОстатков",      Истина);
	
	// ВидПродукци и ВидУпаковки - сведения, получаемые и по данным сервиса и по данным ИБ
	
	КолонкиДанныеСервиса = Новый Соответствие;
	КолонкиДанныеСервиса.Вставить("РодительскаяУпаковка",                Истина);
	КолонкиДанныеСервиса.Вставить("ИННВладельца",                        Истина);
	КолонкиДанныеСервиса.Вставить("ИННАгента",                           Истина);
	КолонкиДанныеСервиса.Вставить("СпособВводаВОборот",                  Истина);
	КолонкиДанныеСервиса.Вставить("ДатаПроизводства",                    Истина);
	КолонкиДанныеСервиса.Вставить("Статус",                              Истина);
	КолонкиДанныеСервиса.Вставить("ОсобоеСостояние",                     Истина);
	КолонкиДанныеСервиса.Вставить("ЧастичноеВыбытиеВыведено",            Истина);
	КолонкиДанныеСервиса.Вставить("ЧастичноеВыбытиеОстаток",             Истина);
	КолонкиДанныеСервиса.Вставить("ЧастичноеВыбытиеНеКорректныйОстаток", Истина);
	КолонкиДанныеСервиса.Вставить("МРЦ",                       Истина);
	КолонкиДанныеСервиса.Вставить("ВСеройЗоне",                Истина);
	КолонкиДанныеСервиса.Вставить("СодержитСерыеКоды",         Истина);
	КолонкиДанныеСервиса.Вставить("ГоденДо",                   Истина);
	КолонкиДанныеСервиса.Вставить("ПредставлениеНоменклатуры", Истина);
	КолонкиДанныеСервиса.Вставить("ПредставлениеСтатуса",      Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Номенклатура",  КолонкиНоменклатура);
	ВозвращаемоеЗначение.Вставить("Исключения",    КолонкиИсключения);
	ВозвращаемоеЗначение.Вставить("Количество",    КолонкиКоличество);
	ВозвращаемоеЗначение.Вставить("Служебные",     КолонкиСлужебные);
	ВозвращаемоеЗначение.Вставить("ДанныеСервиса", КолонкиДанныеСервиса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПараметрыДополненияТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ДеревоУпаковок, ИменаКолонокДляКопированияСвойств = "", ЭтоЗагрузкаИзТСД = Ложь) Экспорт
	
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	Если ТипЗнч(ДеревоУпаковок) = Тип("СтрокаДереваЗначений") Тогда
		ДеревоУпаковокИсточник = ДеревоУпаковок.Владелец();
	Иначе
		ДеревоУпаковокИсточник = ДеревоУпаковок;
	КонецЕсли;
	
	Если ИменаКолонокДляКопированияСвойств = Неопределено
		Или ИменаКолонокДляКопированияСвойств = "" Тогда
		
		ИменаКолонокДляКопированияСвойств = Новый Массив;
		Для Каждого КолонкаДерева Из ДеревоУпаковок.Колонки Цикл
			
			ИмяКолонки = КолонкаДерева.Имя;
			Если ДанныеКодовМаркировки.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаКолонокДляКопированияСвойств.Добавить(ИмяКолонки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ИменаКолонокДляКопированияСвойств) = Тип("Массив") Тогда
		
		ИменаКолонокДляЗаполнения = ИменаКолонокДляЗаполнения();
		
		ПараметрыСлиянияДанных = Новый Структура;
		ПараметрыСлиянияДанных.Вставить("ЗаполнятьНоменклатуру", Ложь);
		ПараметрыСлиянияДанных.Вставить("ЗаполнятьКоличество",   Ложь);
		ПараметрыСлиянияДанных.Вставить("КолонкиНоменклатуры",   "");
		ПараметрыСлиянияДанных.Вставить("КолонкиДанныеСервиса",  "");
		ПараметрыСлиянияДанных.Вставить("Прочие",                Новый Массив);
		ПараметрыСлиянияДанных.Вставить("ИменаКолонокДляКопированияСвойств", СтрСоединить(ИменаКолонокДляКопированияСвойств, ","));
		
		КолонкиНоменклатуры  = Новый Массив;
		КолонкиДанныеСервиса = Новый Массив;
		
		Для Каждого ИмяКолонки Из ИменаКолонокДляКопированияСвойств Цикл
			
			Если ДанныеКодовМаркировки.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДеревоУпаковок.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИменаКолонокДляЗаполнения.Исключения[ИмяКолонки] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИменаКолонокДляЗаполнения.Номенклатура[ИмяКолонки] <> Неопределено Тогда
				ПараметрыСлиянияДанных.ЗаполнятьНоменклатуру = Истина;
				КолонкиНоменклатуры.Добавить(ИмяКолонки);
			ИначеЕсли ИменаКолонокДляЗаполнения.ДанныеСервиса[ИмяКолонки] <> Неопределено Тогда
				КолонкиДанныеСервиса.Добавить(ИмяКолонки);
			Иначе
				ПараметрыСлиянияДанных.Прочие.Добавить(ИмяКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыСлиянияДанных.КолонкиНоменклатуры  = СтрСоединить(КолонкиНоменклатуры, ",");
		ПараметрыСлиянияДанных.КолонкиДанныеСервиса = СтрСоединить(КолонкиДанныеСервиса, ",");
		
	ИначеЕсли ТипЗнч(ИменаКолонокДляКопированияСвойств) = Тип("Структура") Тогда
		
		ПараметрыСлиянияДанных = ИменаКолонокДляКопированияСвойств;
		
	КонецЕсли;
	
	ПараметрыДополнения = Новый Структура;
	ПараметрыДополнения.Вставить("ЭтоЗагрузкаИзТСД",       ЭтоЗагрузкаИзТСД);
	ПараметрыДополнения.Вставить("ЗаполнятьСтрокуДерева",  ЭтоЗагрузкаИзТСД);
	ПараметрыДополнения.Вставить("ПараметрыСлиянияДанных", ПараметрыСлиянияДанных);
	
	ПараметрыДополнения.Вставить("ЕстьКолонкаВходящий",    ДеревоУпаковокИсточник.Колонки.Найти("Входящий") <> Неопределено);
	ПараметрыДополнения.Вставить("ЕстьКолонкаТипУпаковки", ДеревоУпаковокИсточник.Колонки.Найти("ТипУпаковки") <> Неопределено);
	
	Возврат ПараметрыДополнения;
	
КонецФункции

Процедура ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ДанныеПоШтрихкодам, ДеревоУпаковок, Изменения = Неопределено, ПараметрыСканирования = Неопределено, ПараметрыДополнения = Неопределено) Экспорт
	
	Если ПараметрыДополнения = Неопределено Тогда
		ПараметрыДополнения = ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДеревоУпаковок);
	КонецЕсли;
	
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ПараметрыОтбора = Новый Структура("НормализованныйШтрихкод");
	
	ЕстьКолонкаСодержитСерыеКоды = Неопределено;
	Если ТипЗнч(Изменения) = Тип("Структура") Тогда
		ЗапоминатьСтрокиСЗаполненнымGTIN = Изменения.Свойство("ЗаполненGTIN");
	Иначе
		ЗапоминатьСтрокиСЗаполненнымGTIN = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, СтрокаДерева, Изменения, ПараметрыСканирования, ПараметрыДополнения);
		
		Если Не ПараметрыДополнения.ЭтоЗагрузкаИзТСД Тогда
			Если ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
				ПараметрыОтбора.НормализованныйШтрихкод = СтрокаДерева.НормализованныйШтрихкод;
				НайденныеСтроки = ДанныеКодовМаркировки.НайтиСтроки(ПараметрыОтбора);
			Иначе
				НайденныеСтроки = ДанныеКодовМаркировки.НайтиСтроки(
					Новый Структура("Штрихкод", СтрокаДерева.Штрихкод));
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПараметрыДополнения.ЭтоЗагрузкаИзТСД И НайденныеСтроки.Количество() Тогда
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ПоляСкопированы = Ложь;
				
				ПроверитьЗаполнениeGTIN = Не ЗначениеЗаполнено(НайденнаяСтрока.GTIN);
				
				Если ПараметрыДополнения.ПараметрыСлиянияДанных.ЗаполнятьНоменклатуру
					И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
					И НайденнаяСтрока.Номенклатура <> СтрокаДерева.Номенклатура Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаДерева, ПараметрыДополнения.ПараметрыСлиянияДанных.КолонкиНоменклатуры);
					ПоляСкопированы = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПараметрыДополнения.ПараметрыСлиянияДанных.КолонкиДанныеСервиса)
					И ЗначениеЗаполнено(СтрокаДерева.Статус)
					И Не ЗначениеЗаполнено(НайденнаяСтрока.Статус) Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаДерева, ПараметрыДополнения.ПараметрыСлиянияДанных.КолонкиДанныеСервиса);
					ПоляСкопированы = Истина;
				КонецЕсли;
				
				Для Каждого ИмяКолонки Из ПараметрыДополнения.ПараметрыСлиянияДанных.Прочие Цикл
					Значение = СтрокаДерева[ИмяКолонки];
					Если ЗначениеЗаполнено(Значение)
						И НайденнаяСтрока[ИмяКолонки] <> Значение Тогда
						Если ИмяКолонки = "GTIN"
							И СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
							// Только потребительские упаковки могут наследовать GTIN из ГИС МТ
						ИначеЕсли ИмяКолонки = "EAN"
							И СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
							// Только потребительские упаковки могут наследовать GTIN из ГИС МТ
						Иначе
							НайденнаяСтрока[ИмяКолонки] = Значение;
							ПоляСкопированы = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ПараметрыДополнения.ЗаполнятьСтрокуДерева
					И НайденнаяСтрока.СтрокаДерева <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока.СтрокаДерева, НайденнаяСтрока, ПараметрыДополнения.ПараметрыСлиянияДанных.ИменаКолонокДляКопированияСвойств);
				КонецЕсли;
				
				Если ТипЗнч(Изменения) = Тип("Структура") Тогда
					Изменения.ИзмененныеСтроки.Добавить(НайденнаяСтрока);
					
					Если ЕстьКолонкаСодержитСерыеКоды = Неопределено Тогда
						ЕстьКолонкаСодержитСерыеКоды = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденнаяСтрока, "СодержитСерыеКоды")
							И Изменения.Свойство("СодержитСерыеКоды");
					КонецЕсли;
					
					Если ЕстьКолонкаСодержитСерыеКоды
						И НайденнаяСтрока.СодержитСерыеКоды
						И Не ЗначениеЗаполнено(НайденнаяСтрока.ШтрихкодУпаковки) Тогда
						Изменения.СодержитСерыеКоды = Истина;
						НайденнаяСтрока.Количество = 0;
					КонецЕсли;
					
				КонецЕсли;
				
				// Если строка дерева уже заполнена, значит дерево пришло в качестве исходных данных (загрузка кодов из заказа)
				Если НайденнаяСтрока.СтрокаДерева = СтрокаДерева Тогда
					Продолжить;
				КонецЕсли;
				
				// Вложенные коды упаковки были дозагружены из ГИС МТ
				НайденнаяСтрока.Идентифицирован = Истина;
				
				Если НайденнаяСтрока.СтрокаДерева = Неопределено
					И ПараметрыДополнения.ЗаполнятьСтрокуДерева Тогда
					НайденнаяСтрока.СтрокаДерева = СтрокаДерева;
					НайденнаяСтрока.НайденВоВложенныхУпаковках = Истина;
				КонецЕсли;
				
				Если ПараметрыДополнения.ЕстьКолонкаТипУпаковки
					И Не ЗначениеЗаполнено(НайденнаяСтрока.ТипУпаковки)
					И ЗначениеЗаполнено(СтрокаДерева.ТипУпаковки) Тогда
					НайденнаяСтрока.ТипУпаковки = СтрокаДерева.ТипУпаковки;
				КонецЕсли;
				
				Если Не ПоляСкопированы Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура)
					И НайденнаяСтрока.СписокНоменклатуры.Количество() = 0
					И Не НайденнаяСтрока.ЭтоКодВводаОстатков
					И ЗначениеЗаполнено(НайденнаяСтрока.GTIN) Тогда
					НайденнаяСтрока.ТребуетсяСопоставление = Истина;
					Если ПроверитьЗаполнениeGTIN И ЗапоминатьСтрокиСЗаполненнымGTIN Тогда
						Изменения.ЗаполненGTIN.Добавить(НайденнаяСтрока);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Входящий = (СтрокаДерева.Родитель = Неопределено Или (ПараметрыДополнения.ЕстьКолонкаВходящий И СтрокаДерева.Входящий));
			
			НоваяСтрока = ДанныеКодовМаркировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
			Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) Тогда
				НоваяСтрока.ВидыПродукцииКодаМаркировки.Добавить(СтрокаДерева.ВидПродукции);
			ИначеЕсли ПараметрыДополнения.ЕстьКолонкаТипУпаковки
				И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				
				ВидыПродукции = ВидПродукцииУпаковкиПоСоставу(СтрокаДерева);
				Если ВидыПродукции.Количество() = 1 И ЗначениеЗаполнено(ВидыПродукции[0]) Тогда
					НоваяСтрока.ВидПродукции = ВидыПродукции[0];
				КонецЕсли;
			Иначе
				ЭлементДляРазбора = Новый Массив;
				ЭлементДляРазбора.Добавить(НоваяСтрока);
				НормализоватьИРазобратьНаСоставляющиеКодыМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования,, ЭлементДляРазбора);
			КонецЕсли;
			
			НоваяСтрока.Входящий            = Входящий;
			НоваяСтрока.Идентифицирован     = Не ПараметрыДополнения.ЭтоЗагрузкаИзТСД;
			НоваяСтрока.ЭтоКодВводаОстатков = ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(НоваяСтрока.Штрихкод);
			
			Если НоваяСтрока.СтрокаДерева = Неопределено
				И ПараметрыДополнения.ЗаполнятьСтрокуДерева Тогда
				НоваяСтрока.СтрокаДерева = СтрокаДерева;
				// При загрузке из ТСД первоначально заполняются вложенные упаковки
				НоваяСтрока.НайденВоВложенныхУпаковках = ПараметрыДополнения.ЭтоЗагрузкаИзТСД;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
				И НоваяСтрока.СписокНоменклатуры.Количество() = 0
				И Не НоваяСтрока.ЭтоКодВводаОстатков
				И ЗначениеЗаполнено(НоваяСтрока.GTIN) Тогда
				НоваяСтрока.ТребуетсяСопоставление = Истина;
			КонецЕсли;
			
			Если ТипЗнч(Изменения) = Тип("Массив") Тогда
				Изменения.Добавить(НоваяСтрока);
			ИначеЕсли ТипЗнч(Изменения) = Тип("Структура") Тогда
				Изменения.ДобавленныеСтроки.Добавить(НоваяСтрока);
				Изменения.ИзмененныеСтроки.Добавить(НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по неизвестным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ЕстьНеизвестныеШтрихкодыУпаковок = Ложь;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками
			Или ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки, Истина, Ложь)
			И Не СтрокаДанных.Идентифицирован Тогда
			ЕстьНеизвестныеШтрихкодыУпаковок = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьНеизвестныеШтрихкодыУпаковок Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено)
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует стоки дерева источника в строки дерева приемника.
//
// Параметры:
//  СтрокаДереваПриемник - КоллекцияСтрокДереваЗначений - Строки дерева приемника.
//  СтрокаДереваИсточник - КоллекцияСтрокДереваЗначений - Строки дерева источника.
//  СоответствиеСтарыхИНовыхСтрокДерева - Соответствие Из Строка - Ключ - строка источника, значение - новая строка приемника.
//  ОтборПоВидуПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - отбор по виду продукции
Процедура ДополнитьДеревоУпаковок(СтрокаДереваПриемник, СтрокаДереваИсточник, СоответствиеСтарыхИНовыхСтрокДерева = Неопределено, ОтборПоВидуПродукции = Неопределено)
	
	Для Каждого СтрокаИсточника Из СтрокаДереваИсточник.Строки Цикл
		
		Если ОтборПоВидуПродукции <> Неопределено
			И СтрокаИсточника.ВидПродукции <> ОтборПоВидуПродукции Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаДереваПриемник.Строки.Добавить();
		
		ИсходноеЗначениеВходящий = НоваяСтрока.Входящий;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		НоваяСтрока.Входящий = ИсходноеЗначениеВходящий;
		
		Если СоответствиеСтарыхИНовыхСтрокДерева <> Неопределено Тогда
			СоответствиеСтарыхИНовыхСтрокДерева.Вставить(СтрокаИсточника, НоваяСтрока);
		КонецЕсли;
		
		ДополнитьДеревоУпаковок(
			НоваяСтрока, СтрокаИсточника, СоответствиеСтарыхИНовыхСтрокДерева, ОтборПоВидуПродукции);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыФункции

// Обрабатывает входящее дерево упаковок из ИСМП- строки, не соответствующие условию отбора по виду продукции - удаляются
//  из дерева.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - строки для проверки на соотвествие виду продукции.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для отбора строк дерева.
//  ПараметрыПроверки - Неопределено, Структура  - служебный параметр, при первом вызове передавать Неопределено.
Процедура ОтобратьСтрокиДереваИСМППоВидуПродукции(ДеревоУпаковок, //СоответствиеСтрокДереваУпаковок,
		ВидПродукции, ПараметрыПроверки = Неопределено) Экспорт
	
	ПерваяИтерация = Ложь;
	МассивУдаляемыхСтрок = Новый Массив;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПерваяИтерация = Истина;
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("УдалитьТекущуюУпаковку", Ложь);
	КонецЕсли;
	
	Для Каждого СтрокаДерева из ДеревоУпаковок.Строки Цикл
		
		Если ПерваяИтерация Тогда
			ПараметрыПроверки.УдалитьТекущуюУпаковку = Ложь;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОтобратьСтрокиДереваИСМППоВидуПродукции(СтрокаДерева, ВидПродукции, ПараметрыПроверки);
		ИначеЕсли (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
			И СтрокаДерева.ВидПродукции <> ВидПродукции Тогда
			ПараметрыПроверки.УдалитьТекущуюУпаковку = Истина;
		КонецЕсли;
		
		Если ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			Если ПерваяИтерация Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Если СтрокаДерева.ВидПродукции <> ВидПродукции Тогда
				ПараметрыПроверки.УдалитьТекущуюУпаковку = Истина;
				Если ПерваяИтерация Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Не ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			СтрокаДерева.ВидПродукции = ВидПродукции; // заполнить вид для мультитоварной упаковки
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПерваяИтерация Тогда
		
		Для Каждого СтрокаДерева из МассивУдаляемыхСтрок Цикл
			ДеревоУпаковок.Строки.Удалить(СтрокаДерева);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает входящее дерево упаковок - строки, не соответствующие условию отбора по виду продукции - удаляются
//  из дерева и соотвествия штрихкодов и строк дерева.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - строки для проверки на соотвествие виду продукции.
//  СоответствиеСтрокДереваУпаковок - Соответствие - соотвествие штриходов упаковок и строк дерева.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для отбора строк дерева.
//  ПараметрыПроверки - Неопределено, Структура  - служебный параметр, при первом вызове передавть неопределено.
Процедура ОтобратьСтрокиДереваПоВидуПродукции(ДеревоУпаковок, СоответствиеСтрокДереваУпаковок,
		ВидПродукции, ПараметрыПроверки = Неопределено)
	
	ПерваяИтерация = Ложь;
	УдаляемыеСтрокиДерева = Новый Соответствие;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПерваяИтерация = Истина;
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("УдалитьТекущуюУпаковку", Ложь);
	КонецЕсли;
	
	Для Каждого СтрокаДерева из ДеревоУпаковок.Строки Цикл
		Если ПерваяИтерация Тогда
			ПараметрыПроверки.УдалитьТекущуюУпаковку = Ложь;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество()>0 Тогда
			ОтобратьСтрокиДереваПоВидуПродукции(СтрокаДерева, СоответствиеСтрокДереваУпаковок,
			                                     ВидПродукции, ПараметрыПроверки);
		КонецЕсли;
		
		Если ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			Если ПерваяИтерация Тогда
				ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
				УдаляемыеСтрокиДерева.Вставить(СтрокаДерева, Истина);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			Или (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
				И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
				И СтрокаДерева.ВидПродукции <> ВидПродукции)
			Или (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
				И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И СтрокаДерева.Строки.Количество() = 0) Тогда
			Если (ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Или Не ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции))
				И СтрокаДерева.ВидПродукции <> ВидПродукции Тогда
				ПараметрыПроверки.УдалитьТекущуюУпаковку = Истина;
				Если ПерваяИтерация Тогда
					ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
					УдаляемыеСтрокиДерева.Вставить(СтрокаДерева, Истина);
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			И СтрокаДерева.ВидПродукции <> ВидПродукции Тогда
			ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
			УдаляемыеСтрокиДерева.Вставить(СтрокаДерева, Истина);
		ИначеЕсли Не ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			СтрокаДерева.ВидПродукции = ВидПродукции; // заполнить вид для мультитоварной упаковки
		КонецЕсли;
	
	КонецЦикла;
	
	Если ПерваяИтерация Тогда
		
		Для Каждого КлючИЗначение Из УдаляемыеСтрокиДерева Цикл
			ДеревоУпаковок.Строки.Удалить(КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет строки дерева из соответствия "Штрихкод, СтрокаДерева"
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - строки, которые будут удалены из соотвествия
//  СоответствиеСтрокДереваУпаковок - Соответствие - соотвествие штриходов упаковок и строк дерева
Процедура ОчиститьСоответствиеСтрокДерева(ДеревоУпаковок, СоответствиеСтрокДереваУпаковок)
	
	СоответствиеСтрокДереваУпаковок.Удалить(ДеревоУпаковок.ШтрихкодУпаковки);
	Для Каждого СтрокаДерева из ДеревоУпаковок.Строки Цикл
		ОчиститьСоответствиеСтрокДерева(СтрокаДерева, СоответствиеСтрокДереваУпаковок);
	КонецЦикла;
	
КонецПроцедуры

// Определяет вид продукции упаковки по вложенной продукции.
//
// Параметры:
//  СтрокаДереваУпаковки - СтрокаДереваЗначений - строка дерева упаковок
//
// Возвращаемое значение:
//  Массив - массив вложенных видов продукции.
Функция ВидПродукцииУпаковкиПоСоставу(СтрокаДереваУпаковки)
	
	ВидыПродукции = Новый Массив;
	Для Каждого СтрокаДерева из СтрокаДереваУпаковки.Строки Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ВидыПродукцииВложенные =  ВидПродукцииУпаковкиПоСоставу(СтрокаДерева);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукции, ВидыПродукцииВложенные);
		КонецЕсли;
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ВидыПродукции.Добавить(СтрокаДерева.ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукции);
	
КонецФункции

// Возвращает строку верхнего уровня для строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  КэшУпаковокВерхнегоУровня - Соответствие - ключ - Строка дерева, значение - элемент справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  СтрокаДереваЗначений - строка верхнего уровня дерева.
Функция СтрокаДереваВерхнегоУровня(СтрокаДерева, КэшУпаковокВерхнегоУровня)
	
	УпаковкаВерхнегоУровня = КэшУпаковокВерхнегоУровня.Получить(СтрокаДерева);
	Если УпаковкаВерхнегоУровня <> Неопределено Тогда
		Возврат УпаковкаВерхнегоУровня;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева.Родитель, КэшУпаковокВерхнегоУровня);
		
		КэшУпаковокВерхнегоУровня.Вставить(СтрокаДерева, УпаковкаВерхнегоУровня);
		
		Возврат УпаковкаВерхнегоУровня;
		
	Иначе
		
		Возврат СтрокаДерева;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПолучениеТекущихДанныхДокумента

// Заполняет коллекцию "МаркируемаяПродукцияДокумента" данными строк дерева.
//
// Параметры:
//  ДеревоУпаковок - Дерево значений - иерархия маркируемой продукции.
//  ОбработанныеКодыМаркировки - Соответствие - Ключ - Значение штрихкода, Значение - Данные штрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура КоллекцияВсехШтрихкодовДерева(СтрокиДереваУпаковок, ОбработанныеКодыМаркировки, ПараметрыСканирования)
	
	Для Каждого СтрокаДерева Из СтрокиДереваУпаковок Цикл
		
		ОбработанныеКодыМаркировки.Вставить(СтрокаДерева.Штрихкод, 
			СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДерева, "Штрихкод,ТекстОшибки,ТипШтрихкода,ТипУпаковки"));
		
		КоллекцияВсехШтрихкодовДерева(СтрокаДерева.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует вложенные штрихкоды по данным табличной части Товары и табличной части элементами штрихкодов упаковок.
//
// Параметры:
//  ДанныеТовары - ТабличнаяЧасть - табличная часть с товарами.
//  ДанныеМаркируемаяПродукция - ТабличнаяЧасть - табличная часть с элементами штрихкодов упаковок.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	ИсточникДанных = Форма;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ИсточникДанных = Форма.Объект;
	КонецЕсли;
	ТабличнаяЧастьШтрихкоды = ИсточникДанных[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	МассивИменКолонокШтрихкодовУпаковки = Новый Массив;
	Для Каждого ИмяКолонки Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина) Цикл
		МассивИменКолонокШтрихкодовУпаковки.Добавить(СокрЛП(ИмяКолонки));
	КонецЦикла;
	
	ЕстьКолонкаШтрихкодУпаковки    = Неопределено;
	ЕстьКолонкаИдентификаторСтроки = Неопределено;
	
	ИспользоватьИдентификаторСтроки = Ложь;
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьШтрихкоды Цикл
		
		Если ЕстьКолонкаШтрихкодУпаковки = Неопределено Тогда
			ЕстьКолонкаШтрихкодУпаковки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ШтрихкодУпаковки");
		КонецЕсли;
		Если ЕстьКолонкаИдентификаторСтроки = Неопределено Тогда
			ЕстьКолонкаИдентификаторСтроки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ИдентификаторСтроки");
		КонецЕсли;
		
		Для Каждого ИмяКолонки Из МассивИменКолонокШтрихкодовУпаковки Цикл
			
			Если ЕстьКолонкаШтрихкодУпаковки Тогда
				ИмяКолонкиШтрихкодРодительскойУпаковки = "ШтрихкодУпаковки";
			Иначе
				ИмяКолонкиШтрихкодРодительскойУпаковки = ИмяКолонки;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ[ИмяКолонки];
			НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ[ИмяКолонкиШтрихкодРодительскойУпаковки];
			Если ЕстьКолонкаИдентификаторСтроки Тогда
				ИспользоватьИдентификаторСтроки = Истина;
				ИдентификаторСтроки             = СтрокаТЧ.ИдентификаторСтроки;
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = ИспользоватьИдентификаторСтроки;
	ТекстЗапроса = ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВложенныеШтрихкоды");
	
	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные",           ТаблицаШтрихкодов);
	Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ШтрихкодыУпаковок = ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы, ПараметрыСканирования);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Формирует вложенные штрихкоды по данным временной таблицы.
//
// Параметры:
//  ВыборкаПерваяИтерация - ВыборкаИзРезультатаЗапроса - РезультатЗапроса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(ВыборкаПерваяИтерация, МенеджерВременныхТаблиц, ПараметрыСканирования) 
	
	ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковкиВерхнегоУровня", Новый Соответствие);
	
	ПродолжатьПоиск    = Истина;
	НомерИтерации      = 1;
	УровнейВложенности = 3;
	
	ОбщиеМодули                    = ОбщиеМодулиПодсистем();
	ПустоеЗначениеНоменклатура     = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	НастройкиРазбора = Новый Структура;
	НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбора.Вставить("Общие",            РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки());
	НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	Пока ПродолжатьПоиск Цикл
		
		Если НомерИтерации = 1 Тогда
			
			Выборка = ВыборкаПерваяИтерация;
			
		Иначе
			
			ИмяВременнойТаблицы = "ВТВложенныеШтрихкодыИсходныеДанные";
			
			ТекстыЗапроса = Новый СписокЗначений;
			ТекстыЗапроса.Добавить(
				СтрШаблон(
					"ВЫБРАТЬ
					|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
					|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
					|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
					|ПОМЕСТИТЬ %1
					|ИЗ
					|	&ИсходныеДанные КАК ИсходныеДанные", ИмяВременнойТаблицы));
			
			ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
			ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
			ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
			ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы             = ИмяВременнойТаблицы;
			ТекстЗапроса = ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
			ТекстыЗапроса.Добавить(ТекстЗапроса, "ВложенныеШтрихкоды");
			
			Если НомерИтерации > 1 Тогда
				ТекстыЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы));
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ИсходныеДанные",           ТаблицаШтрихкодов);
			Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ПустоеЗначениеНоменклатура);
			РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
			Выборка = РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать();
			
		КонецЕсли;
		
		ТаблицаШтрихкодов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				ТекущаяУпаковка = Выборка["УпаковкаУровень" + ТекущийУровень];
				
				Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
					
					Значение = СоответствиеСтрокДереваУпаковок[ТекущаяУпаковка];
					Если Значение = Неопределено Тогда
						РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
						ЗаполнитьСтрокуДереваУпаковокПоВыборке(
							РодительскиеДанные, Выборка, ТекущийУровень, ОбщиеМодули,
							НастройкиРазбора, ПараметрыСканирования);
						
						СоответствиеСтрокДереваУпаковок.Вставить(ТекущаяУпаковка, РодительскиеДанные);
					Иначе
						РодительскиеДанные = Значение;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					
					НоваяСтрока = ТаблицаШтрихкодов.Добавить();
					НоваяСтрока.ШтрихкодУпаковки    = Выборка.УпаковкаУровень3;
					НоваяСтрока.ИдентификаторСтроки = Выборка.УпаковкаУровень3ИдентификаторСтроки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		НомерИтерации   = НомерИтерации + 1;
		ПродолжатьПоиск = ТаблицаШтрихкодов.Количество() > 0;
		
	КонецЦикла;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		Если КлючЗначение.Значение.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗначение.Значение);
			НоваяСтрока.СтрокаДерева = КлючЗначение.Значение;
			НоваяСтрока.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(КлючЗначение.Значение, КэшУпаковокВерхнегоУровня);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

#КонецОбласти

// Определяет по контексту возможность работы с алкоголем.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка, ПеречислениеСсылка.ВидыПродукцииИС -
//  контекст, по которому будет определяться возможность работы с алкогольной продукцией.
// Возвращаемое значение:
//  Булево - Истина, если для контекста разрешена работа с алкогольной продукцией.
Функция ДопустимаАлкогольнаяПродукция(Контекст)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Алкогольная;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Алкогольная);
	
КонецФункции

//Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИС -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с табачной продукцией.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с табачной продукцией.
//
Функция ДопустимаТабачнаяПродукция(Контекст) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(Контекст);
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Табак)
		Или ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.АльтернативныйТабак)
		Или ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция);
	
КонецФункции

// Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИС -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с продукцией из натурального меха.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с продукцией из натурального меха.
//
Функция ДопустимаПродукцияИзНатуральногоМеха(Контекст) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха);
	
КонецФункции

// Возвращает структуру параметров, заполненных по умолчанию, которые необходимы для формирования текста запроса
// вложенных штрихкодов.
//
// Возвращаемое значение:
//  Структура - Описание:
//   * ИмяВременнойТаблицы - Строка - Имя временной таблица, где будут лежать исходные данные, необходимые для формирования
//                                    дерева упаковок и таблицы маркированных товаров(вложенные штрихкоды).
//   * ИспользоватьИдентификаторСтроки - Булево - если табличная часть товары и табличная часть с штрихкодами упаковок
//                                                связана через идентификатор строки.
//   * ДокументСсылка - Неопределено - Ссылка на документ.
Функция ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументСсылка",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ИспользоватьИдентификаторСтроки", Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяВременнойТаблицы",             "ВТВложенныеШтрихкодыИсходныеДанные");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает все вложенные значения штрихкодов по массиву элементов справочника штрихкоды упаковок.
//
// Параметры:
//  КоллекцияУпаковок - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - набор упаковок.
// Возвращаемое значение:
//  Массив Из Строка - Значения штрихкодов.
Функция ЗначенияВложенныхШтрихкодовУпаковок(КоллекцияУпаковок)
	
	ВложенныеЗначенияШтрихкодов = Новый Массив;
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ДеревоУпаковок = ИнициализироватьДеревоУпаковок();
	
	Запрос = Новый Запрос(ТекстЗапросаСоставаУпаковокВИерархии());
	
	ПустоеЗначениеНоменклатуры = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ПродолжатьПоиск            = Истина;
	УровнейВложенности         = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок",           КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ПустоеЗначениеНоменклатуры);
		//@skip-check query-in-loop
		Выборка = Запрос.Выполнить().Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				ТекущаяУпаковка = Выборка["УпаковкаУровень" + ТекущийУровень];
				
				Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
					
					Значение = СоответствиеСтрокДереваУпаковок[ТекущаяУпаковка];
					Если Значение = Неопределено Тогда
						
						ВложенныеЗначенияШтрихкодов.Добавить(
							Выборка[СтрШаблон("УпаковкаУровень%1Штрихкод", ТекущийУровень)]);
						СоответствиеСтрокДереваУпаковок.Вставить(ТекущаяУпаковка, РодительскиеДанные);
						
					Иначе
						РодительскиеДанные = Значение;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					КоллекцияУпаковок.Добавить(ТекущаяУпаковка);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	Возврат ВложенныеЗначенияШтрихкодов;
	
КонецФункции

// Выполняет проверку Данных штрихкода на то, что уже данные обработаны.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// Возвращаемое значение:
//  Булево - Истина, если данные штрихкода не требует повторной обработки.
Функция ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода)
	
	Возврат (ДанныеШтрихкода.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура))
		Или (ДанныеШтрихкода.Свойство("МаркируемаяПродукция") И ДанныеШтрихкода.МаркируемаяПродукция = Истина);
	
КонецФункции

// Выполняет обработку данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если есть ошибки в данных по штрихкодам.
//  ФормаУникальныйИдентификатор - ФормаКлиентскогоПриложения, УникальныйИдентификатор - источник вызова 
//    (если форма, то будет проводиться дополнительная обработка полученных данных соответственно источнику).
//  РезультатыПроверок - Соответствие Из Строка:
//    Ключ - Произвольный - Обработанная строка кода маркировки.
//    Значение - См. ИнициализироватьРезультатОбработкиШтрихкода - Коды маркировки с заранее
//     известным результатом обработки.
// Возвращаемое значение:
//   См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, ФормаУникальныйИдентификатор, РезультатыПроверок) Экспорт
	
	ВложенныеШтрихкоды                      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	РезультатыОбработок                     = Новый Соответствие;
	ТребуетсяСопоставлениеНоменклатуры      = Ложь;
	ТребуетсяВыборНоменклатурыВводаОстатков = Ложь;
	Штрихкодов                              = 0;
	
	СтрокиТаблицыВводаОстатков = Новый Массив;
	
	УточнениеКоэффициентовУпаковок = ИнициализироватьТаблицуУточненияКоэффициентовУпаковок();
	
	ЗаполнитьТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если РезультатыПроверок.Получить(СтрокаТаблицы.Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		// Если штрихкоды были загружены из ТСД с иерархией, то
		// все штрихкоды будут входящими, но обработка требуется только для верхнего уровня
		ВходящийВерхнегоУровня = Ложь;
		Если СтрокаТаблицы.Входящий Тогда
			Если СтрокаТаблицы.СтрокаДерева = Неопределено Тогда
				ВходящийВерхнегоУровня = Истина;
			ИначеЕсли СтрокаТаблицы.СтрокаДерева <> Неопределено
				И СтрокаТаблицы.СтрокаДерева.Родитель = Неопределено Тогда
				ВходящийВерхнегоУровня = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВходящийВерхнегоУровня Тогда
			Штрихкодов = Штрихкодов + 1;
		КонецЕсли;
		
		Если ВходящийВерхнегоУровня И СтрокаТаблицы.ЭтоКодВводаОстатков И Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ТребуетсяВыборНоменклатурыВводаОстатков = Истина;
			СтрокиТаблицыВводаОстатков.Добавить(СтрокаТаблицы);
		ИначеЕсли СтрокаТаблицы.ТребуетсяСопоставление
			И ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
			ТребуетсяСопоставлениеНоменклатуры = Истина;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("GTIN", СтрокаТаблицы.GTIN);
			
			НайденныеСтроки = УточнениеКоэффициентовУпаковок.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОписаниеGTIN = УточнениеКоэффициентовУпаковок.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеGTIN, СтрокаТаблицы);
				Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
					ОписаниеGTIN.ВидУпаковки = Перечисления.ВидыУпаковокИС.ПустаяСсылка();
				Иначе
					ОписаниеGTIN.ВидУпаковки = СтрокаТаблицы.ВидУпаковки;
				КонецЕсли;
			Иначе
				ОписаниеGTIN = НайденныеСтроки[0];
			КонецЕсли;
			
			Если ПустаяСтрока(ОписаниеGTIN.ПредставлениеСодержимоеУпаковки) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеНоменклатуры) Тогда
					ОписаниеGTIN.ПредставлениеСодержимоеУпаковки = СтрокаТаблицы.ПредставлениеНоменклатуры;
				Иначе
					ОписаниеGTIN.ПредставлениеСодержимоеУпаковки = СтрокаТаблицы.Номенклатура;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодсистемаИСМПСуществует = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП");
	Если ПодсистемаИСМПСуществует Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
	КонецЕсли;
	
	Если УточнениеКоэффициентовУпаковок.Количество() > 0
		И ВложенныеШтрихкоды <> Неопределено Тогда
		
		МодульШтрихкодированиеМОТП.РасчетКоэффициентовПоСтатистике(
			ВложенныеШтрихкоды.ДеревоУпаковок,
			УточнениеКоэффициентовУпаковок,
			ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Не ТребуетсяСопоставлениеНоменклатуры Или ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД Тогда
		ОчиститьКэшМаркируемойПродукции(ПараметрыСканирования.КэшМаркируемойПродукции);
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
		ПодсистемаЕГАИССуществует = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС");
		Если ПодсистемаЕГАИССуществует Тогда
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		КонецЕсли;
		Если ПодсистемаИСМПСуществует Тогда
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		КонецЕсли;
	КонецЕсли;
	
	Шаблон = Неопределено;
	ГрупповаяЗагрузка = Штрихкодов > 1;
	ОбщаяОшибка = ЗначениеЗаполнено(ДанныеПоШтрихкодам.ТекстОшибки)
		И Не ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
	
	ТребуетсяУточнениеКоэффициентовУпаковок = (УточнениеКоэффициентовУпаковок <> Неопределено
		И УточнениеКоэффициентовУпаковок.Количество() > 0);
	
	ЭтоМаркировкаТоваровИСМП = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ЭтоМаркировкаТоваровИСМП = ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) = Тип("ДокументСсылка.МаркировкаТоваровИСМП");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		// Если штрихкоды были загружены из ТСД с иерархией, то
		// все штрихкоды будут входящими, но обработка требуется только для верхнего уровня
		ВходящийВерхнегоУровня = Ложь;
		Если СтрокаТаблицы.Входящий Тогда
			Если СтрокаТаблицы.СтрокаДерева = Неопределено Тогда
				ВходящийВерхнегоУровня = Истина;
			ИначеЕсли СтрокаТаблицы.СтрокаДерева <> Неопределено
				И СтрокаТаблицы.СтрокаДерева.Родитель = Неопределено Тогда
				ВходящийВерхнегоУровня = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВходящийВерхнегоУровня Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода    = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаТаблицы, Шаблон, ГрупповаяЗагрузка);
		ВидУпаковки        = ДанныеШтрихкода.ВидУпаковки;
		ВидПродукции       = ДанныеШтрихкода.ВидПродукции;
		РезультатОбработки = Неопределено;
		
		РезультатОбработки = РезультатыПроверок.Получить(СтрокаТаблицы.Штрихкод);
		// Обработка ошибок и уточнений во всех формах
		Если РезультатОбработки <> Неопределено Тогда // Ошибка получена ранее...
		
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ТребуетсяСопоставлениеНоменклатуры
			И Не ТребуетсяУточнениеКоэффициентовУпаковок Тогда
			
			РезультатОбработки = РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования);
			ТребуетсяСопоставлениеНоменклатуры = Ложь;
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ТекстОшибки) Или ОбщаяОшибка Тогда
			
			РезультатОбработки = РезультатОбработкиШтрихкодаПриОшибках(
				ДанныеПоШтрихкодам, ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии Тогда
			
			РезультатОбработки = РезультатОбработкиТребуетсяОбновлениеКлючаСессии(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ТребуетсяВыборНоменклатурыВводаОстатков
			И ДанныеШтрихкодаТребуетсяОбработатьКакМаркировкуОстатков(СтрокаТаблицы, ПараметрыСканирования) Тогда
			
			РезультатОбработки = РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеШтрихкода, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли УточнениеКоэффициентовУпаковок <> Неопределено
			И УточнениеКоэффициентовУпаковок.Количество() > 0 Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеКоэффициентаУпаковок(ДанныеШтрихкода, УточнениеКоэффициентовУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования);
			УточнениеКоэффициентовУпаковок = Неопределено;
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ДанныеПоШтрихкодам.УточнитьУПользователя.Найти(СтрокаТаблицы.Штрихкод) <> Неопределено
			И СтрокаТаблицы.СтрокаДерева <> Неопределено
			И СтрокаТаблицы.СтрокаДерева.Строки.Количество() > 0
			И Не ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			И Не (ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И СтрокаТаблицы.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка) Тогда
			
				РезультатОбработки = РезультатТребуетсяУточнениеУпаковки(ДанныеШтрихкода, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли (ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции)
				И ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И СтрокаТаблицы.КоличествоПотребительскихУпаковок = 0)
			Или ((ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
				Или ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция)
				И ВидУпаковки = Перечисления.ВидыУпаковокИС.ПустаяСсылка())
			Или (ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара
				И СтрокаТаблицы.ТребуетВзвешивания
				И (СтрокаТаблицы.СтрокаДерева = Неопределено Или СтрокаТаблицы.СтрокаДерева.Строки.Количество() = 0)
				
				И Не (ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая И ЭтоМаркировкаТоваровИСМП)
				И Не (ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая И ЭтоМаркировкаТоваровИСМП)
				И Не (ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор И ЭтоМаркировкаТоваровИСМП)
				И (СтрокаТаблицы.Количество = 0
				   Или ПараметрыСканирования.ТолькоВесоваяПродукция))
				
			Или (ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И СтрокаТаблицы.КоличествоПотребительскихУпаковок = 0) Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеКоличества(ДанныеШтрихкода);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли (ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
			И ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная
			И Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			И СтрокаТаблицы.СписокНоменклатуры.Количество() > 1 Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеНоменклатуры(ДанныеШтрихкода, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли Не СтрокаТаблицы.Идентифицирован
			И СтрокаТаблицы.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			
			РезультатОбработки = РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(
				ФормаУникальныйИдентификатор, ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		// При сканировании в форме проверки и подбора
		ИначеЕсли ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			
			Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
				И ИнтеграцияИСКлиентСервер.ВидыПродукцииЕГАИС().Найти(ВидПродукции) <> Неопределено Тогда
				
				РезультатОбработки = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаАкцизнойМарки(
					ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор);
				
			ИначеЕсли ПодсистемаИСМПСуществует
				И ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
				
				РезультатОбработки = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(
					ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор);
				
			ИначеЕсли ПодсистемаИСМПСуществует
				И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции) Тогда
				
				РезультатОбработки = МодульШтрихкодированиеИСМПСлужебный.РезультатОбработкиКодаМаркировки(
					ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор);
				
			Иначе
				
				РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
				РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
				
			КонецЕсли;
			
		// При сканировании в форме документов
		ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			Или ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			Или ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
			
			РезультатОбработки = РезультатОбработкиШтрихкодаМаркируемойПродукции(ФормаУникальныйИдентификатор, ДанныеШтрихкода, ПараметрыСканирования);
			
		// При сканировании в форме документов
		ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			РезультатОбработки = ОбработатьДанныеШтрихкода(ФормаУникальныйИдентификатор, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
			
		// При сканировании в форме РМК
		ИначеЕсли СтрокаТаблицы.МаркируемаяПродукция <> Истина Тогда
			
			РезультатОбработки = ОбработатьДанныеШтрихкодаНемаркируемойПродукции(ФормаУникальныйИдентификатор, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
		РезультатыОбработок.Вставить(ДанныеШтрихкода.Штрихкод, РезультатОбработки);
		
		Если ОбщаяОшибка Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыОбработок;
	
КонецФункции

Функция РезультатОбработкиТребуетсяОбновлениеКлючаСессии(ВидыПродукции, ПараметрыСканирования)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
	
	МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
	МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработки, ПараметрыСканирования);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, ВидыПродукцииИС)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ЕстьОшибки  = Истина;
	РезультатОбработки.ТекстОшибки = ТекстОшибкиНеПоддерживаетсяВидПродукции(
		СтрокаДанных,
		ПараметрыСканирования.ДопустимыеВидыПродукции,
		ВидыПродукцииИС);
	СтрокаДанных.ТекстОшибки       = РезультатОбработки.ТекстОшибки;
	РезультатОбработки.Штрихкод    = СтрокаДанных.Штрихкод;
	
	РезультатОбработки.ОшибкаДопустимостиВидовПродукции = Истина;
	Если ТипЗнч(ВидыПродукцииИС) = Тип("Массив") Тогда
		РезультатОбработки.ВидыПродукции = ВидыПродукцииИС;
	Иначе
		РезультатОбработки.ВидыПродукции.Добавить(ВидыПродукцииИС);
	КонецЕсли;
	
	ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ДанныеШтрихкодаТребуетсяОбработатьКакМаркировкуОстатков(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Не ДанныеШтрихкода.ЭтоКодВводаОстатков Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой
		И ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции <> Неопределено
		И Не ЗначениеЗаполнено(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.Номенклатура)
		И ДанныеШтрихкода.GTIN = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.GTIN Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура);
	
КонецФункции

// Заполняет выбранные номенклатуру, характеристику, серию в случае потокового сканирования (GTIN-уточнение-автовыбор КМ)
//   или при сканировании остаточного КМ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ПараметрыСканирования.
//  ЭлементыДляИзменения - Соответствие Из СтрокаДереваЗначений - 
Процедура ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда
		
		ДанныеУточнения = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения);
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если СтрокаДанных.ОбработанСОшибками Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДанных.ТребуетсяСопоставление 
				И СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
				И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				Если ДанныеУточнения.Свойство("Количество") Тогда
					ДанныеУточнения.Удалить("Количество");
				КонецЕсли;
			КонецЕсли;
			
			ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеУточнения);
			
			// Если в результате уточнения была выбрана номенклатура, то выбор номенклатуры из списка более не требуется
			Если ИзмененныеСвойства["Номенклатура"] <> Неопределено Тогда
				СтрокаДанных.СписокНоменклатуры = Новый Массив;
			КонецЕсли;
			
			Если СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
				ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если Не ДанныеПоШтрихкодам.ЗаполнитьФлагТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN Тогда
		Возврат;
	ИначеЕсли ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		Возврат;
	ИначеЕсли ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
		И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Ложь;
		Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина)
			Или Не ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		ИначеЕсли СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок > 0 Тогда
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда // для набора уточнять плановое количество не требуется
			
			СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Истина;
			
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			ЕстьGTINВСоставеКода = СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("GTIN")
				И СтрокаДанных.СоставКодаМаркировки.GTIN <> Неопределено;
			
			ЭтоGTIN02 = СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц")
				И СтрокаДанных.СоставКодаМаркировки.КоличествоВложенныхЕдиниц <> Неопределено;
			
			СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Не ЭтоGTIN02 И ЕстьGTINВСоставеКода;
			
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			ВидУпаковки = Неопределено;
			Если СтрокаДанных.ДополнительныеПараметры <> Неопределено
				И СтрокаДанных.ДополнительныеПараметры.Свойство("ВидУпаковкиПоGTIN") Тогда
				ВидУпаковки = СтрокаДанных.ДополнительныеПараметры.ВидУпаковкиПоGTIN;
			КонецЕсли;
			
			СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Не ЗначениеЗаполнено(ВидУпаковки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам.ЗаполнитьФлагТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Ложь;
	
КонецПроцедуры

Процедура ОтметитьНовыеИИзмененныеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ЭлементыДляИзменения)
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ТребуетсяСопоставление
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN Тогда
			Продолжить;
		КонецЕсли;
		
		// В справочнике Штрихкоды упаковок номенлатуры должен быть заполнен ТипУпаковки.
		// Тип упаковки может быть заполнен при создании штрихкода по данным вида упаковки.
		Если Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки)
			И Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ТребуетсяОбновлениеШтрихкода Тогда
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, Неопределено);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И ((ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДанных.ТипУпаковки)
					И Не СтрокаДанных.ЭтоШтрихкодНоменклатуры) // При считывании GTIN ОСУ тип упаковки = Монотоварная, но ЭтоШтрихкодНоменклатуры = Истина
				Или (Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
					И ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
					И (СтрокаДанных.МаркируемаяПродукция = Истина
						Или СтрокаДанных.ДанныеРазбора <> Неопределено))) Тогда
			
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, Неопределено);
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства) Экспорт
	
	Изменения = ЭлементыДляИзменения.Получить(СтрокаДанных);
	
	Если Изменения = Неопределено Тогда
		Изменения = Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(ИзмененныеСвойства) = Тип("Соответствие") Тогда
		Для Каждого КлючИЗначение Из ИзмененныеСвойства Цикл
			Изменения.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ИзмененныеСвойства) = Тип("Массив") Тогда
		Для Каждого ИмяРеквизита Из ИзмененныеСвойства Цикл
			Изменения.Добавить(ИмяРеквизита);
		КонецЦикла;
	ИначеЕсли ИзмененныеСвойства = Неопределено Тогда
		Изменения.Добавить("ПерезаписатьОбъект");
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	ЭлементыДляИзменения.Вставить(СтрокаДанных, Изменения);
	
КонецПроцедуры

Процедура ОбновитьШтрихкодыУпаковок(ЭлементыДляИзменения, ПараметрыСканирования)
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого КлючИЗначение Из ЭлементыДляИзменения Цикл
			ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(
				КлючИЗначение.Ключ, КлючИЗначение.Значение, ПараметрыСканирования);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось записать или обновить элементы справочника Штрихкоды упаковок товаров по причине: %1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ГосИС: Запись элементы справочника Штрихкоды упаковок товаров'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ШтрихкодыУпаковокТоваров, Неопределено,
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Приводит данные по штрихкодам в соответствие данным ранее указанными пользователем.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Если ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ТребуетсяСопоставление
			И Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(ДанныеСохраненногоВыбора, СтрокаДанных) Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаДанных.ТребуетсяВыборСерии = Ложь;
		
		Если Не СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			
			ИзмененныеСвойства = ЗаполнитьСохраненнымВыборомДанныеШтрихкода(СтрокаДанных, ДанныеСохраненногоВыбора);
			
			// Если в результате уточнения была выбрана номенклатура, то выбор номенклатуры из списка более не требуется
			Если ИзмененныеСвойства["Номенклатура"] <> Неопределено Тогда
				СтрокаДанных.СписокНоменклатуры = Новый Массив;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДанных.МаркируемаяПродукция = Истина
			И Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
			И ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
			ОтметитьКОбновлению(ЭлементыДляИзменения, СтрокаДанных, ИзмененныеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(ДанныеШтрихкода, ИзмененныеСвойства, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства, ПараметрыСканирования);
	Иначе
		ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Актуализирует данные элемента справочника штрихкоды упаковок.
// 
// Параметры:
//  ДанныеШтрихкода       - Структура - данные штрихкода содержащие элемент справочника.
//  ИзмененныеСвойства    - Массив Из Строка, Неопределено - Имена свойств, которые необходимо установить.
//  ПараметрыСканирования - см. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
Процедура ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства = Неопределено, ПараметрыСканирования = Неопределено)
	
	ТребуетсяЗаписьОбъекта = Ложь;
	
	Если ИзмененныеСвойства = Неопределено
		Или ИзмененныеСвойства.Найти("ПерезаписатьОбъект") <> Неопределено Тогда
		
		ИзменяемыеРеквизиты = Новый Структура("Номенклатура,Характеристика,Серия,ТипШтрихкода,ТипУпаковки,Количество");
		ЗаполнитьЗначенияСвойств(ИзменяемыеРеквизиты, ДанныеШтрихкода);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ПроизвольнаяЕдиницаУчета")
			И ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
			ИзменяемыеРеквизиты.Вставить("КоличествоПотребительскихУпаковок", ДанныеШтрихкода.КоличествоПотребительскихУпаковок);
		КонецЕсли;
		
		ТребуетсяЗаписьОбъекта = Истина;
		
		Если ПараметрыСканирования <> Неопределено
			И ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(ДанныеШтрихкода, ПараметрыСканирования) Тогда
			
			ОтключитьЗаменуСвойств = Новый Соответствие();
			ОтключитьЗаменуСвойств.Вставить("Количество",                        Истина);
			ОтключитьЗаменуСвойств.Вставить("КоличествоПотребительскихУпаковок", Истина);
			
			Если ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета = Перечисления["ВариантыУчетаЧастичногоВыбытияИСМП"]["НастроеннаяНоменклатура"] Тогда
				ОтключитьЗаменуСвойств.Вставить("Номенклатура",   Истина);
				ОтключитьЗаменуСвойств.Вставить("Характеристика", Истина);
				ОтключитьЗаменуСвойств.Вставить("Упаковка",       Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
			Или ИзмененныеСвойства.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Реквизиты = Метаданные.Справочники.ШтрихкодыУпаковокТоваров.Реквизиты;
		ИзменяемыеРеквизиты = Новый Структура;
	
		Для Каждого Свойство Из ИзмененныеСвойства Цикл
			Если Реквизиты.Найти(Свойство) <> Неопределено Тогда
				ТребуетсяЗаписьОбъекта = Истина;
				ИзменяемыеРеквизиты.Вставить(Свойство, ДанныеШтрихкода[Свойство]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ТребуетсяЗаписьОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ШтрихкодыУпаковокТоваров.ЗаполнитьШтрихкодУпаковки(ДанныеШтрихкода.ШтрихкодУпаковки, ИзменяемыеРеквизиты, ОтключитьЗаменуСвойств);
	
КонецПроцедуры

Функция ЗаполнитьСохраненнымВыборомДанныеШтрихкода(ДанныеШтрихкода, СохраненныйВыбор)
	
	ИзмененныеСвойства = Новый Соответствие;
	
	Для Каждого КлючЗначение Из СохраненныйВыбор Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, КлючЗначение.Ключ)
			И ЗначениеЗаполнено(КлючЗначение.Значение)
			И КлючЗначение.Значение <> ДанныеШтрихкода[КлючЗначение.Ключ]
			И (Не ЗначениеЗаполнено(ДанныеШтрихкода[КлючЗначение.Ключ])
				Или КлючЗначение.Ключ = "СкоропортящаясяПродукция") Тогда
			
			ДанныеШтрихкода[КлючЗначение.Ключ] = КлючЗначение.Значение;
			ИзмененныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзмененныеСвойства;
	
КонецФункции

// Помещает дерево упаковок во временное хранилище. Адрес дерева упаковок помещает в каждые данные обработанных штрихкодов.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ВложенныеШтрихкоды                  = Неопределено;
	ВложенныеШтрихкодыИСМПНормализованы = Ложь;
	ВложенныеШтрихкодыМОТПНормализованы = Ложь;
	
	// Если выключены запросы к ГИС МТ, то ненайденные упаковки необходимо преобразовать в дерево
	// для корректной обработке в формах проверки и подбора
	Если Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок
		И ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева // Только для формы проверки
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено
		Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				
				Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
					
					Если ВложенныеШтрихкоды = Неопределено Тогда
						ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
					КонецЕсли;
					
					Если Не ВложенныеШтрихкодыИСМПНормализованы Тогда
						МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
						МодульШтрихкодированиеИСМПСлужебный.НормализоватьДанныеВложенныхШтрихкодов(
							ВложенныеШтрихкоды, ПараметрыСканирования);
						ВложенныеШтрихкодыИСМПНормализованы = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции) Тогда
					
					Если ВложенныеШтрихкоды = Неопределено Тогда
						ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
					КонецЕсли;
					
					Если Не ВложенныеШтрихкодыМОТПНормализованы Тогда
						МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
						МодульШтрихкодированиеМОТП.НормализоватьДанныеВложенныхШтрихкодов(
							ВложенныеШтрихкоды, ПараметрыСканирования);
						ВложенныеШтрихкодыМОТПНормализованы = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаДерева = ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных);
				СтрокаДанных.СтрокаДерева = СтрокаДерева;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
					ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВложенныеШтрихкоды <> Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	СортироватьДанные = ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева;
	Если СортироватьДанные
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, "ДеревоУпаковок")
			И ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок <> Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Сортировать("Штрихкод", Истина);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, "МаркированныеТовары")
			И ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары <> Неопределено Тогда
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары.Сортировать("Штрихкод");
		КонецЕсли;
		
	КонецЕсли;
	
	АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, Идентификатор);
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.АдресДереваУпаковок = АдресДереваУпаковок;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные штрихкода по документу основанию.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Форма - ФормаКлиентскогоПриложения, Неопределено - форма-источник вызова
Процедура ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма)
	
	СформироватьДанныеДокументаОснования(ПараметрыСканирования);
	ДанныеДокументаОснования = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	КонецЕсли;
	
	ДанныеДокумента = Неопределено;
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	ИначеЕсли Форма <> Неопределено Тогда
		ДанныеДокументаИзФормы     = ПолучитьДанныеДокументаИзФормы(Форма, ПараметрыСканирования);
		ДанныеДокумента            = ДанныеДокументаИзФормы.ДанныеПоТоварам;
		ДанныеПоШтрихкодамУпаковок = ДанныеДокументаИзФормы.ДанныеПоШтрихкодамУпаковок;
	КонецЕсли;
	
	ОбновленныеКодыМаркировки = Новый Массив;
	ОбновленаСпецификаИСМП = Ложь;
	
	ОбновлятьСерии = ИнтеграцияИС.СерииИспользуются();
	
	МодульСпецификиИСМП = Неопределено;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбновлена = Ложь;
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
			МодульСпецификиИСМП = МодульСпецификиИСМП(МодульСпецификиИСМП);
			Если МодульСпецификиИСМП.ЗаполнитьПоДокументуИОснованию(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования, ДанныеДокумента) Тогда
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Серия = СтрокаДанных.Серия;
				КонецЕсли;
				СтрокаОбновлена        = Истина;
				ОбновленаСпецификаИСМП = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина) Тогда
			МодульСпецификиИСМП = МодульСпецификиИСМП(МодульСпецификиИСМП);
			Если МодульСпецификиИСМП.ЗаполнитьПоСтрокуПоДаннымШтрихкодовДокумента(
				ДанныеПоШтрихкодам, СтрокаДанных, ПараметрыСканирования, ДанныеПоШтрихкодамУпаковок) Тогда
				СтрокаОбновлена        = Истина;
				ОбновленаСпецификаИСМП = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновлятьСерии И Не СтрокаОбновлена Тогда
			Если ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаДанных, ДанныеДокументаОснования, ДанныеДокумента) Тогда
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Серия = СтрокаДанных.Серия;
				КонецЕсли;
				СтрокаОбновлена = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыСканирования.СоздаватьШтрихкодУпаковки
			И СтрокаОбновлена
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И ЗначениеЗаполнено(СтрокаДанных.Серия) Тогда
			
			НовыеРеквизиты = Новый Структура("Серия", СтрокаДанных.Серия);
			Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
				СтрокаДанных.ШтрихкодУпаковки, НовыеРеквизиты);
		КонецЕсли;
		
		Если СтрокаОбновлена Тогда
			ОбновленныеКодыМаркировки.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновление данных дерева
	Если ОбновленаСпецификаИСМП Тогда
		МодульСпецификиИСМП.ОбновитьДеревоУпаковок(ДанныеПоШтрихкодам, ОбновленныеКодыМаркировки, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСериюПоДаннымДокументаИОснования(СтрокаСКодомМаркировки, ДанныеДокументаОснования, ДанныеДокумента)
	
	Если Не ЗначениеЗаполнено(СтрокаСКодомМаркировки.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(СтрокаСКодомМаркировки.Серия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
		СтрокаСКодомМаркировки.Номенклатура, СтрокаСКодомМаркировки.Характеристика);
	
	НайденныеСтроки = Новый Массив;
	Если ДанныеДокументаОснования <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	Если НайденныеСтроки.Количество() > 1 И ДанныеДокумента <> Неопределено Тогда
		НайденныеСтроки = ДанныеДокумента.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	
	// Заполнение серией для которой проверка не завершена
	Если ДанныеДокумента <> Неопределено И НайденныеСтроки.Количество() Тогда
		ПроверятьИзКолонкиСтатусПроверки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "СтатусПроверкиГосИС");
		ПроверятьИзКолонкиКоличествоПодобрано = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "КоличествоПодобрано");
		Если Не(ПроверятьИзКолонкиСтатусПроверки Или ПроверятьИзКолонкиКоличествоПодобрано) Тогда
			Возврат Ложь;
		КонецЕсли;
		НайденоСерий = 0;
		Серия = Неопределено;
		Для Каждого ВариантВыбора Из НайденныеСтроки Цикл
			Если ПроверятьИзКолонкиСтатусПроверки И ВариантВыбора.СтатусПроверкиГосИС = 1 Тогда
				Продолжить;
			ИначеЕсли ПроверятьИзКолонкиКоличествоПодобрано И ВариантВыбора.Количество <= ВариантВыбора.КоличествоПодобрано Тогда
				Продолжить;
			КонецЕсли;
			Если НайденоСерий = 0 Тогда
				НайденоСерий = 1;
				Серия = ВариантВыбора.Серия;
			Иначе
				НайденоСерий = НайденоСерий + ?(Серия = ВариантВыбора.Серия, 0, 1);
			КонецЕсли;
		КонецЦикла;
		Если НайденоСерий = 1 Тогда
			СтрокаСКодомМаркировки.Серия = Серия;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверят на дубли коды маркировки в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ПараметрыСканирования.ПроверятьДублиКодовМаркировки = "НеПроверять" Тогда
		Возврат;
	ИначеЕсли ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	КэшДобавляемыхКодовМаркировки = Новый Соответствие;
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, ДеревоУпаковок.Строки, ПараметрыСканирования, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок Или ЕстьОшибки;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаДанных.Входящий Или СтрокаДанных.НайденВоВложенныхУпаковках Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		КонецЕсли;
		
		Если КэшДобавляемыхКодовМаркировки.Получить(СтрокаДанных.Штрихкод) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(СтрокаДанных.Штрихкод, Истина);
		Иначе
			СтрокаДанных.ТекстОшибки = ТекстОшибкиОбрабатываетсяПовторно();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Выполняет проверку по строкам дерева на дубли, которые лежат в кэше. В случе нахождения - добавляет описание ошибки,
//    в противном случае - добавляет в кэш проверенных кодов маркировки.
// 
// Параметры:
//  КэшДобавляемыхКодовМаркировки - Соответствие - Кэш проверяемых кодов.
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева для обхода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокиДерева, ПараметрыСканирования, ЕстьОшибки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ПараметрыСканирования.ПроверятьДублиКодовМаркировки = "Иерархия" Тогда
			ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокаДерева.Строки, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если КэшДобавляемыхКодовМаркировки.Получить(СтрокаДерева.Штрихкод) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(СтрокаДерева.Штрихкод, Истина);
		Иначе
			СтрокаДерева.ТекстОшибки = ТекстОшибкиОбрабатываетсяПовторно();
			СтрокаДерева.ЕстьОшибки  = Истина;
			ЕстьОшибки = Истина;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку данных, которые уточнил пользователь в диалоговом окне.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//   (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	Если РезультатОбработки.ОткрытьФормуВводаКодаМаркировки Тогда
		Возврат ОбработатьВводКодаМаркировки(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	ИначеЕсли ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		Возврат ОбработатьУточнениеНоменклатуры(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат ОбработатьУточнениеДанныхДляУпаковки(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	Иначе
		Возврат ОбработатьУточнениеДанныхДляМаркированногоТовара(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьМассивСтрокДереваПоGTIN(ДеревоУпаковок, GTIN, МассивСтрок)
		
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЗаполнитьМассивСтрокДереваПоGTIN(СтрокаДерева, GTIN, МассивСтрок);
		
		Если СтрокаДерева.GTIN = GTIN Тогда
			МассивСтрок.Добавить(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьУточнениеДанныхДляУпаковки(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)
	
	ДанныеШтрихкода            = РезультатОбработки.ДанныеШтрихкода;
	ПараметрыСканирования      = ПараметрыСканирования(Форма);
	ДанныеКэша                 = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ДанныеДляУточненияСведений = ДанныеКэша.ДанныеДляУточненияСведенийПользователя.Данные;
	
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);
	
	МассивСтрокДерева = Новый Массив;
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") Тогда
		
		//Выбор произведен в форме уточнения данных упаковки. Возможно необходимо перезаписать штрихкоды упаковок.
		СтрокаДерева = ДеревоУпаковок.Строки.Найти(РезультатВыбора, "Штрихкод", Истина);
		Если Не ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			СтрокаДерева.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаДерева, ПараметрыСканирования);
		КонецЕсли;
		Если ДанныеДляУточненияСведений.Найти(СтрокаДерева.Штрихкод) <> Неопределено Тогда
			ДанныеДляУточненияСведений.Удалить(ДанныеДляУточненияСведений.Найти(СтрокаДерева.Штрихкод));
		КонецЕсли;
		
	ИначеЕсли РезультатВыбора.ЗапомнитьВыбор Тогда
		ЗаполнитьМассивСтрокДереваПоGTIN(ДеревоУпаковок, РезультатВыбора.ДанныеВыбора.GTIN, МассивСтрокДерева);
	ИначеЕсли РезультатВыбора.ДанныеВыбора.Свойство("КодМаркировки") Тогда
		НайденнаяСтрокаДерева = ДеревоУпаковок.Строки.Найти(РезультатВыбора.ДанныеВыбора.КодМаркировки, "Штрихкод", Истина);
		МассивСтрокДерева.Добавить(НайденнаяСтрокаДерева);
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
		
		ПерезаписатьШтрихкодУпаковки = ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода;
		Для Каждого КлючЗначение Из РезультатВыбора.ДанныеВыбора Цикл
			
			ИмяСвойства = КлючЗначение.Ключ;
			Если СтрокаДерева.Владелец().Колонки.Найти(ИмяСвойства) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДерева[ИмяСвойства] = КлючЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяСвойства = "Номенклатура"
				Или ИмяСвойства = "Характеристика"
				Или ИмяСвойства = "Серия" Тогда
				ПерезаписатьШтрихкодУпаковки = Истина;
			КонецЕсли;
			
			СтрокаДерева[ИмяСвойства] = КлючЗначение.Значение;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
			И ПерезаписатьШтрихкодУпаковки Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаДерева.ШтрихкодУпаковки);
				Блокировка.Заблокировать();
				
				ОбновитьЭлементШтрихкодовУпаковок(СтрокаДерева,, ПараметрыСканирования);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				
				ВызватьИсключение ПодробноеПредставлениеОшибки;
				
			КонецПопытки;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
			И ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
			
			СтрокаДерева.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаДерева, ПараметрыСканирования);
			
		КонецЕсли;
		
		Если ДанныеДляУточненияСведений.Получить(СтрокаДерева.Штрихкод) <> Неопределено Тогда
			ДанныеДляУточненияСведений.Удалить(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляУточненияСведений.Количество() = 0 Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок);
		ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, ВложенныеШтрихкоды.МаркированныеТовары);
		РезультатОбработки = ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	Иначе
		РезультатОбработки.ДобавленныеСтроки = Новый Массив;
		РезультатОбработки.ИзмененныеСтроки  = Новый Массив;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьУточнениеДанныхДляМаркированногоТовара(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	ПараметрыСканирования = ПараметрыСканирования(Форма);
	
	РезультатОбработки.ТребуетсяВыборСерии = Ложь;
	
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеВыбора                     = РезультатВыбора.ДанныеВыбора;
	ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(ДанныеШтрихкода, ПараметрыСканирования);
	ПерезаписатьШтрихкодУпаковки     = ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода;
	
	Если ДанныеВыбора.Свойство("ТребуетВзвешивания") Тогда
		ДанныеШтрихкода.ТребуетВзвешивания = ДанныеВыбора.ТребуетВзвешивания;
		ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета = ДанныеВыбора.ПроизвольнаяЕдиницаУчета;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеВыбора Цикл
		
		ИмяСвойства = КлючЗначение.Ключ;
		Если Не ДанныеШтрихкода.Свойство(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоЗаменаНоменклатуры = (ЭтоСтрокаДанныхЧастичногоВыбытия
			И ДанныеВыбора.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИСМП.НастроеннаяНоменклатура
			И (ИмяСвойства = "Номенклатура"
			Или ИмяСвойства = "Характеристика"
			Или ИмяСвойства = "Упаковка"
			Или ИмяСвойства = "ЧастичноеВыбытиеНоменклатура"
			Или ИмяСвойства = "ЧастичноеВыбытиеХарактеристика"));
	
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение)
			И Не ЭтоЗаменаНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ДанныеШтрихкода.ТребуетВзвешивания
			И Не ЭтоСтрокаДанныхЧастичногоВыбытия
			И ИмяСвойства = "Количество" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяСвойства = "Номенклатура" И Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			ДанныеШтрихкода.Количество = ДанныеВыбора.Количество;
		КонецЕсли;
		
		Если ИмяСвойства = "Номенклатура"
			Или ИмяСвойства = "Характеристика"
			Или ИмяСвойства = "Серия"
			Или ИмяСвойства = "Количество" И Не ЭтоСтрокаДанныхЧастичногоВыбытия Тогда
			ПерезаписатьШтрихкодУпаковки = Истина;
		КонецЕсли;
		
		ДанныеШтрихкода[ИмяСвойства] = КлючЗначение.Значение;
		
	КонецЦикла;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		ДанныеШтрихкода.ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(ДанныеШтрихкода.Номенклатура);
		Если ТипЗнч(ДанныеШтрихкода.ДанныеРазбора) = Тип("Структура")
				И ДанныеШтрихкода.ДанныеРазбора.Свойство("ВидыУпаковокПоВидамПродукции") Тогда
			ВидыУпаковок = ДанныеШтрихкода.ДанныеРазбора.ВидыУпаковокПоВидамПродукции.Получить(ДанныеШтрихкода.ВидПродукции);
			Если ТипЗнч(ВидыУпаковок) = Тип("Массив") И ВидыУпаковок.Количество() = 1 Тогда
				ДанныеШтрихкода.ВидУпаковки = ВидыУпаковок[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			Модуль.ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки);
		КонецЕсли;
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			Модуль.ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
		ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
		И ПерезаписатьШтрихкодУпаковки Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
			Блокировка.Заблокировать();
			
			ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода,, ПараметрыСканирования);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки)
		И ЭтоАдресВременногоХранилища(РезультатОбработки.АдресДереваУпаковок) Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
		ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	РезультатОбработки = ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;

КонецФункции

Функция ОбработатьУточнениеНоменклатуры(ФормаПараметрыСканирования, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	
	Форма = ФормаПараметрыСканирования;
	Если ТипЗнч(Форма) = Тип("Структура") Тогда
		ПараметрыСканирования = Форма;
		Форма = Неопределено;
	Иначе
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	РезультатОбработки.ТребуетсяВыборСерии = Ложь;
	РезультатОбработки.ТребуетсяУточнениеДанных = Ложь;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеВыбора = РезультатВыбора.ДанныеВыбора;
	ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, ДанныеВыбора);
	
	СвойстваМаркируемойПродукции = ИнтеграцияИС.СвойстваМаркируемойПродукции(
		ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Характеристика);
	ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, СвойстваМаркируемойПродукции);
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
		ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
	КонецЕсли;
	
	ДанныеШтрихкода.СписокНоменклатуры = Новый Массив;
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	РезультатПроверки = ТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования);
	
	Если РезультатПроверки <> Неопределено Тогда
		РезультатОбработки = РезультатПроверки;
	ИначеЕсли Форма <> Неопределено Тогда
		РезультатОбработки = ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат РезультатОбработки;

КонецФункции

Функция ОбработатьВводКодаМаркировки(ФормаПараметрыСканирования, РезультатВыбора, РезультатОбработки, КэшированныеЗначения)
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	
	Форма = ФормаПараметрыСканирования;
	Если ТипЗнч(ФормаПараметрыСканирования) = Тип("Структура") Тогда
		ПараметрыСканирования = Форма;
		Форма = Неопределено;
	Иначе
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из РезультатВыбора Цикл
		Значение = КлючИЗначение.Значение;
		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения = Тип("Строка")
			Или ТипЗначения = Тип("Число")
			Или ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			Если Не ЗначениеЗаполнено(Значение) И ДанныеШтрихкода.Свойство(КлючИЗначение.Ключ) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ДанныеШтрихкода.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РезультатОбработки = ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	
	РезультатОбработки.ТребуетсяПроверкаСредствамиККТ = Ложь;
	РезультатОбработки.ПроверкаСредствамиККТЗавершена = Истина;
	
	Возврат РезультатОбработки;

КонецФункции

// Инициализирует таблицу значений для заполнения данных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
// * Количество - Число - Количество товара.
Функция ИнициализицияТаблицыДанныхДокумента(ПараметрыСканирования) Экспорт
	
	ТаблицаДанныхДокумента = Новый ТаблицаЗначений;
	ТаблицаДанныхДокумента.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	Если ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныхДокумента(ТаблицаДанныхДокумента);
	КонецЕсли;
	
	Возврат ТаблицаДанныхДокумента;
	
КонецФункции

Функция СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаТаблицы, Шаблон = Неопределено, ИспользоватьШаблон = Ложь)
	
	Если ТипЗнч(СтрокаТаблицы) = Тип("СтрокаТаблицыЗначений")
		Или ТипЗнч(СтрокаТаблицы) = Тип("СтрокаДереваЗначений") Тогда
		Если Шаблон <> Неопределено Тогда
			ДанныеСтруктура = Новый Структура(Шаблон);
			ЗаполнитьЗначенияСвойств(ДанныеСтруктура, СтрокаТаблицы);
		Иначе
			ДанныеСтруктура = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
			ДанныеСтруктура.Удалить("СтрокаДерева");
			Если ИспользоватьШаблон Тогда
				Поля = Новый Массив;
				Для Каждого КлючИЗначение Из ДанныеСтруктура Цикл
					Поля.Добавить(КлючИЗначение.Ключ);
				КонецЦикла;
				Шаблон = СтрСоединить(Поля, ",");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДанныеСтруктура = СтрокаТаблицы;
	КонецЕсли;
	
	Возврат ДанныеСтруктура;
	
КонецФункции

// Заполняет таблицу "Маркированные товары" на основании данных дерева упаковок. При заполнении исключаются упаковки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Строка дерева верхнего уровня.
Процедура ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			ТекУпаковкаВерхнегоУровня = СтрокаДерева;
		Иначе
			ТекУпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева           = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = ТекУпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокаДерева.Строки,
			МаркированныеТовары, ТекУпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует структуру результата обработки штрихкодов.
//
// Возвращаемое значение:
//  Структура - Описание:
//  * ШтрихкодыПродукцииДляСопоставления - Массив Из Строка - Штрихкоды, которым небходимо сопоставить номенклатуру.
//  * РезультатыОбработки - Соответствие Из Строка:
//    ** Ключ     - Строка - значение штрихкода
//    ** Значение - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализацияРезультатаОбработкиШтрихкодов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатыОбработки",                Новый Соответствие);
	Результат.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьДеревоУпаковокИШтрихкодыУпаковокУточненнымиДанными(ДанныеШтрихкода, ИменаСвойств, ПерезаписатьШтрихкодУпаковки)
	
	Если Не ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);
	
	ДанныеПоУпаковкам = Новый ТаблицаЗначений;
	ДанныеПоУпаковкам.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	Для Каждого ИмяСвойства Из ИменаСвойств Цикл
		ДанныеПоУпаковкам.Колонки.Добавить(ИмяСвойства, ДеревоУпаковок.Колонки[ИмяСвойства].ТипЗначения);
	КонецЦикла;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		
		Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
			
			Для Каждого ИмяСвойства Из ИменаСвойств Цикл
				СтрокаДерева[ИмяСвойства] = ДанныеШтрихкода[ИмяСвойства];
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПоУпаковкам.Добавить(), СтрокаДерева);
			КонецЕсли;
			
			Для Каждого СтрокаПотребительскойУпаковки Из СтрокаДерева.Строки Цикл
				
				Для Каждого ИмяСвойства Из ИменаСвойств Цикл
					Если ИмяСвойства <> "Количество" Тогда
						СтрокаПотребительскойУпаковки[ИмяСвойства] = ДанныеШтрихкода[ИмяСвойства];
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СтрокаПотребительскойУпаковки.ШтрихкодУпаковки) Тогда
					ЗаполнитьЗначенияСвойств(ДанныеПоУпаковкам.Добавить(), СтрокаПотребительскойУпаковки);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
			
			Для Каждого ИмяСвойства Из ИменаСвойств Цикл
				СтрокаДерева[ИмяСвойства] = ДанныеШтрихкода[ИмяСвойства];
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПоУпаковкам.Добавить(), СтрокаДерева);
			КонецЕсли;
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				// Уточнение мерного количества и серии доступно только при детализации до монотоварных упаковок
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДеревоУпаковок, ДанныеШтрихкода.АдресДереваУпаковок);
	
	Если Не ПерезаписатьШтрихкодУпаковки Или ДанныеПоУпаковкам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
		ЭлементБлокировки.ИсточникДанных = ДанныеПоУпаковкам;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ШтрихкодУпаковки");
		Блокировка.Заблокировать();
		
		Для Каждого ДанныеПоУпаковке Из ДанныеПоУпаковкам Цикл
			ОбновитьЭлементШтрихкодовУпаковок(ДанныеПоУпаковке, ИменаСвойств);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПерезаписатьШтрихкодУпаковки = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКодовМаркировкиПоДаннымУПД(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Или ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеКодовМаркировкиПоДаннымУПД(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки,
			ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДереваКУдалению(СтрокиДереваКУдалению, Соответствие)
	
	Для Каждого СтрокаДерева Из СтрокиДереваКУдалению Цикл
		
		ЗаполнитьСтрокиДереваКУдалению(СтрокаДерева.Строки, Соответствие);
		
		Соответствие.Вставить(СтрокаДерева, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	Если ДанныеПоШтрихкодам <> Неопределено Тогда
		ВозвращаемоеЗначение = ДанныеПоШтрихкодам.ТребуетсяЧастичноеВыбытиеИСМП;
	КонецЕсли;
	Если ВозвращаемоеЗначение = Неопределено Тогда
		Если ПараметрыСканирования <> Неопределено
			И ПараметрыСканирования.Свойство("ТребуетсяЧастичноеВыбытие")
			И ПараметрыСканирования.ТребуетсяЧастичноеВыбытие Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ОписаниеНоменклатурыИС.Номенклатура
				|ИЗ
				|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
				|ГДЕ
				|	ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИСМП.ПустаяСсылка)";
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			ВозвращаемоеЗначение = (Не РезультатЗапроса.Пустой());
		Иначе
			ВозвращаемоеЗначение = Ложь;
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам <> Неопределено Тогда
			ДанныеПоШтрихкодам.ТребуетсяЧастичноеВыбытиеИСМП = ВозвращаемоеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьПроверяемыеGTIN(ТаблицаНоменклатуры, ПроверяемыеGTIN, СоответствиеGTIN, ВключатьGTINОстатков = Истина, ИспользоватьХарактеристики = Истина) Экспорт
	
	МодульШтрихкодированиеИСМППереопределяемый = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМППереопределяемый");
	МодульШтрихкодированиеИСМППереопределяемый.ЗаполнитьПроверяемыеGTIN(
		ТаблицаНоменклатуры, ПроверяемыеGTIN, СоответствиеGTIN, ИспользоватьХарактеристики);
	
	ВГраница = ПроверяемыеGTIN.ВГраница();
	Для Счетчик = 0 По ВГраница Цикл
		Индекс = ВГраница - Счетчик;
		Штрихкод = ПроверяемыеGTIN[Индекс];
		GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(Штрихкод);
		Если ШтрихкодированиеИСКлиентСервер.ЭтоВнутреннийШтрихкод(GTIN) Тогда
			Если Не ВключатьGTINОстатков
				Или Не ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(GTIN) Тогда
				ПроверяемыеGTIN.Удалить(Индекс);
				СоответствиеGTIN.Удалить(Штрихкод);
			КонецЕсли;
		ИначеЕсли Штрихкод <> GTIN Тогда
			Если ПроверяемыеGTIN.Найти(GTIN) = Неопределено Тогда
				ПроверяемыеGTIN.Добавить(GTIN);
				СоответствиеGTIN.Вставить(GTIN, СоответствиеGTIN[Штрихкод]);
			КонецЕсли;
			ПроверяемыеGTIN.Удалить(Индекс);
			СоответствиеGTIN.Удалить(Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ПроцедурыВызовСервера

//Выполняет обработку штрихкодов и возвращает результат этой обработки.
//
//Параметры:
//  ДанныеШтрихкодаСписок - Массив из Строка - значения штрихкодов
//  ПараметрыСканирования - См. ПараметрыСканирования.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  ФормаУникальныйИдентификатор - УникальныйИдентификатор - Идентификатор, по которому будут помещены данные по обработанным
//                                                           штрихкодам в хранилище.
//                               - ФормаКлиентскогоПриложения - Форма, из которой осуществлен вызов
//  КешДанныхРазбора - Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Штрихкод
//   * Значение - Структура - Данные разбора и примечание:
//      * ДанныеРазбора - Структура - Данные разбора штрикхода
//      * ПримечаниеКРезультатуРазбора - Структура - Примечание к результату разбора
//  ВнешниеДанныеПоШтрихкодам - Произвольный - известные данные обработки.
//Возвращаемое значение:
//  Структура:
//    * ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//    * РезультатОбработки - Соответствие Из КлючИЗначение:
//       ** Ключ - Строка - Штрихкод
//       ** Значение - См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьШтрихкоды(ДанныеШтрихкодаСписок, ПараметрыСканирования, КэшированныеЗначения,
	ФормаУникальныйИдентификатор, КешДанныхРазбора = Неопределено, ВнешниеДанныеПоШтрихкодам = Неопределено) Экспорт
	
	Если ВнешниеДанныеПоШтрихкодам = Неопределено Тогда
		
		// На входе массив структур: штрихкод, количество
		ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам(Ложь);
		
		ПодготовитьДанныеКодовМаркировкиДляОбработки(
			ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования, КешДанныхРазбора);
		ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ВнешниеДанныеПоШтрихкодам = ДанныеПоШтрихкодам;
		
	Иначе
		
		ДанныеПоШтрихкодам = ВнешниеДанныеПоШтрихкодам;
		
		ПараметрыДополненияТаблицыДанныеКодовМаркировки = ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, Истина);
		
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,,
			ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);
		ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ЗаполнитьСведенияПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	ЗаписыватьЛогиПроверкиКодовМаркировки = ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП;
	
	Если ЗаписыватьЛогиПроверкиКодовМаркировки Тогда
		
		МодульЛогированиеЗапросовИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
		МодульЛогированиеЗапросовИСМП.НастроитьДанныеПоШтрихкодам(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			Истина,
			ФормаУникальныйИдентификатор);
		
	КонецЕсли;
	
	// Логирование исходного значения штрихкода со сканера
	ПараметрыЛогированияЗапросов = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
	
	ДанныеЗаписи          = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.Штрихкод = ДанныеШтрихкодаСписок;
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	Если ТипЗнч(ФормаУникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = ФормаУникальныйИдентификатор.УникальныйИдентификатор;
		Форма                   = ФормаУникальныйИдентификатор;
	Иначе
		УникальныйИдентификатор = ФормаУникальныйИдентификатор;
		Форма                   = Неопределено;
	КонецЕсли;
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	РезультатПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
		ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ЕстьОшибкиИЧастичнаяОбработкаКодовМаркировкиНедоступна(ПараметрыСканирования, РезультатПроверок, ДанныеПоШтрихкодам) Тогда
		
		// Логирование результатов разбора штрихкода
		ДанныеЗаписи                           = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
		ДанныеЗаписи.РезультатРазбораШтрихКода = РезультатПроверок;
		ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
		
		Если ЗаписыватьЛогиПроверкиКодовМаркировки Тогда
			
			МодульЛогированиеЗапросовИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
			МодульЛогированиеЗапросовИСМП.НастроитьДанныеПоШтрихкодам(
				ДанныеПоШтрихкодам,
				ПараметрыСканирования,
				Ложь,
				ФормаУникальныйИдентификатор);
			
		КонецЕсли;
		
		ОчиститьКэшМаркируемойПродукции(ПараметрыСканирования.КэшМаркируемойПродукции);
		
		Возврат Новый Структура(
			"РезультатыОбработки, ДанныеПоШтрихкодам",
			РезультатПроверок, ДанныеПоШтрихкодам);
			
	КонецЕсли;
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	
	РезультатыОбработки = ОбработатьДанныеШтрихкодов(
		ДанныеПоШтрихкодам, УникальныйИдентификатор, ПараметрыСканирования, РезультатПроверок);
	
	// Логирование результатов разбора штрихкода
	ДанныеЗаписи                           = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.РезультатРазбораШтрихКода = РезультатыОбработки;
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	Если ЗаписыватьЛогиПроверкиКодовМаркировки Тогда
		
		МодульЛогированиеЗапросовИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
		МодульЛогированиеЗапросовИСМП.НастроитьДанныеПоШтрихкодам(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			Ложь,
			ФормаУникальныйИдентификатор);

		Для Каждого СтрокаТаблицы Из РезультатыОбработки Цикл
			
			Если Не ТипЗнч(СтрокаТаблицы.Значение.ДанныеШтрихкода) = Тип("Структура")
				Или Не СтрокаТаблицы.Значение.ДанныеШтрихкода.Свойство("АдресЛогаЗапросов") Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.Значение.ДанныеШтрихкода.АдресЛогаЗапросов = ДанныеПоШтрихкодам.ЛогированиеЗапросов.АдресЛогаЗапросов;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура(
		"РезультатыОбработки, ДанныеПоШтрихкодам",
		РезультатыОбработки, ДанныеПоШтрихкодам);
	
КонецФункции

Функция ЕстьОшибкиИЧастичнаяОбработкаКодовМаркировкиНедоступна(ПараметрыСканирования, РезультатПроверок, ДанныеПоШтрихкодам)
	
	Если РезультатПроверок.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат Истина;
	ИначеЕсли ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД
		И ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Количество() = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Ошибка Из РезультатПроверок Цикл
		Если Ошибка.Значение.ОбщаяОшибка Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет обработку данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор, по которому будут помещены данные по обработанным
//                                                      штрихкодам в хранилище.
//  ПараметрыСканирования - См. ПараметрыСканирования
//  РезультатыПроверок - Массив Из См. ИнициализироватьРезультатОбработкиШтрихкода - Коды маркировки с заранее
//     известным результатом обработки.
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Штрихкод
//   * Значение - См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьДанныеШтрихкодов(ДанныеПоШтрихкодам, УникальныйИдентификатор, ПараметрыСканирования, РезультатыПроверок)
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = (ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор"));
	
	ЕстьОшибки = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	РезультатыОбработки = ОбработатьДанныеПоШтрихкодам(
		ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, УникальныйИдентификатор, РезультатыПроверок);
	
	ДеревоУпаковок = ?(
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено,
		Неопределено,
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
	
	ОшибкиПриОбработке = Ложь;
	ДанныеДляКэширования = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатыОбработки Цикл
		
		РезультатОбработки = КлючИЗначение.Значение;
		
		ЕстьОшибкиПриОбработке = ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки)
			Или РезультатОбработки.ЕстьОшибки
			Или РезультатОбработки.ЕстьОшибкиВДеревеУпаковок
			Или (РезультатОбработки.ТребуетсяПроверкаСредствамиККТ
				И Не РезультатОбработки.ПроверкаСредствамиККТЗавершена);
		
		Если РезультатОбработки.ОбщаяОшибка
			Или РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры
			Или РезультатОбработки.ТребуетсяУточнениеКоэффициентовУпаковок
			Или (ЕстьОшибкиПриОбработке И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД) Тогда
			
			ОшибкиПриОбработке = Истина;
			Прервать;
			
		Иначе
			
			Если ЕстьОшибкиПриОбработке
				И ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДляКэширования.Добавить(
				Новый Структура(
					"ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок",
					РезультатОбработки.ДанныеШтрихкода,
					РезультатОбработки,
					ДеревоУпаковок));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОшибкиПриОбработке Тогда
		
		Для Каждого ДанныеКэша Из ДанныеДляКэширования Цикл
			
			ЗакэшироватьОбработанныеШтрихкоды(
				ПараметрыСканирования, ДанныеКэша.ДанныеШтрихкода,
				ДанныеКэша.РезультатОбработки, ДанныеКэша.ДеревоУпаковок);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатыОбработки;
	
КонецФункции

Процедура ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ДанныеПоШтрихкодам.ВидыПродукции                 = Новый Массив;
	ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция = Ложь;
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	
	СоответствиеВидовПродукции = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(ЭлементДанных.ВидПродукции) Тогда
			ДобавитьЭлемент = СоответствиеВидовПродукции[ЭлементДанных.ВидПродукции] = Неопределено;
			Если ДобавитьЭлемент Тогда
				СоответствиеВидовПродукции.Вставить(ЭлементДанных.ВидПродукции, Истина);
				ДанныеПоШтрихкодам.ВидыПродукции.Добавить(ЭлементДанных.ВидПродукции);
			КонецЕсли;
		ИначеЕсли ЭлементДанных.ПрисутствуетТабачнаяПродукция Тогда
			ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция = Истина;
		ИначеЕсли ЭлементДанных.ЭтоКодВводаОстатков Тогда
			ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
