////////////////////////////////////////////////////////////////////////////////
// Подсистема "Развитие бизнеса"
//
// Процедуры и функции для работы с формулами показателей
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

// Процедура производит расчет формулы
//
// Параметры:
//  ФормулаСтрокой			 - Строка	 - Строка, которая содержит формулу
//  СтруктураОперандов		 - Структура	 - Операнды формулы с их значениями
//  РасчетныеДанные			 - Структура	 - Результат расчетов
//  ОкруглятьВБольшуюСторону - Булево	 - Признак округления в большую сторону
//  ПравилоОкругления		 - Перечисления.ПорядкиОкругления	 - Порядок округления
//
Процедура РасчетДанныхПоФормуле(Знач ФормулаСтрокой, СтруктураОперандов, РасчетныеДанные, ОкруглятьВБольшуюСторону = Неопределено, ПравилоОкругления = Неопределено) Экспорт
	
	Если РасчетныеДанные = Неопределено Тогда
		РасчетныеДанные = СоздатьСтруктуруРасчетныхДанных();
	КонецЕсли;
	
	Если СтруктураОперандов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ФормулаСтрокой, "#ЕСЛИ") > 0 Тогда
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#ЕСЛИ",		"?(");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#ТОГДА",		",");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#ИНАЧЕ",		",");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, "#КОНЕЦЕСЛИ",	")");
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, Символы.ПС,	"");
	КонецЕсли;
	
	Для каждого Операнд Из СтруктураОперандов Цикл
		ФормулаСтрокой = СтрЗаменить(ФормулаСтрокой, Операнд.Ключ, Операнд.Значение);
	КонецЦикла;
	
	Попытка
		
		РассчитаннаяСумма = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаСтрокой);
		
		Если ЗначениеЗаполнено(РассчитаннаяСумма)
			И ЗначениеЗаполнено(ОкруглятьВБольшуюСторону)
			И ЗначениеЗаполнено(ПравилоОкругления) Тогда
			
			РасчетныеДанные.Сумма = ОкруглитьЧислоПоПравилу(РассчитаннаяСумма, ОкруглятьВБольшуюСторону, ПравилоОкругления);
			
		Иначе
			РасчетныеДанные.Сумма = РассчитаннаяСумма;
		КонецЕсли;
		
	Исключение
		
		РасчетныеДанные.ОшибкаРасчета	= Истина;
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура добавляет значение операнда в структуру операндов
//
// Параметры:
//  СоответствиеОперандов	 - Соответствие	 - Соответствие операндов и их значений
//  Операнд					 - Строка	 - Идентификатор операнда
//  Значение				 - Число	 - Значение операнда
//
Процедура ДобавитьОперандВСтруктуру(СоответствиеОперандов, Операнд, Знач Значение) Экспорт
	
	Если ТипЗнч(СоответствиеОперандов) <> Тип("Соответствие") Тогда
		
		СоответствиеОперандов = Новый Соответствие;
		
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=");
	КонецЕсли;
	
	СоответствиеОперандов.Вставить(Операнд, Значение);
	
КонецПроцедуры

// Функция возвращает показатель по переданному идентификатору
//
// Параметры:
//  Идентификатор	 - Строка	 - Идентификатор показателя
//  ИсключаяСсылку	 - СправочникСсылка.ПоказателиБизнеса	 - Показатель, который необходимо игнорировать при поиске
// 
// Возвращаемое значение:
//  СправочникСсылка.ПоказателиБизнеса - Найденный показатель
//
Функция НайтиПоказательПоИдентификатору(Идентификатор, ИсключаяСсылку = Неопределено) Экспорт
	
	Результат = Новый Структура("ИдентификаторЗанят,Показатель,ТипПоказателя", Ложь, Неопределено, Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоказателиБизнеса.Ссылка КАК Показатель,
	|	ПоказателиБизнеса.ТипПоказателя КАК ТипПоказателя
	|ИЗ
	|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса
	|ГДЕ
	|	ПоказателиБизнеса.ИдентификаторПоказателя = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ИсключаяСсылку = Выборка.Показатель Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.ИдентификаторЗанят	= Истина;
		Результат.Показатель 			= Выборка.Показатель;
		Результат.ТипПоказателя 		= Выборка.ТипПоказателя;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура получает идентификаторы операндов из строки формулы 
//
// Параметры:
//  Формула	 - Строка	 - Строка формулы
//  Операнды - Массив	 - Массив найденных операндов
//
Процедура ПарсингФормулыНаИдентификаторыОперандов(Формула, Операнды) Экспорт
	
	ТекстФормулы = СокрЛП(Формула);
	
	Если ПустаяСтрока(Формула) Тогда
		Возврат;
	КонецЕсли;
	
	СимволНачалоОперанда = СтрокаНачалаОперанда();
	СимволКонецОперанда	 = СтрокаКонцаОперанда();
	
	КоличествоОперандов = СтрЧислоВхождений(ТекстФормулы, СимволНачалоОперанда);
	
	Пока КоличествоОперандов > 0 Цикл
		
		НачалоОперанда	= Найти(ТекстФормулы, СимволНачалоОперанда);
		КонецОперанда	= Найти(ТекстФормулы, СимволКонецОперанда);
		
		Операнд 		= Сред(ТекстФормулы, НачалоОперанда, КонецОперанда - НачалоОперанда + 1);
		Идентификатор	= СтрЗаменить(СтрЗаменить(Операнд, СимволНачалоОперанда, ""), СимволКонецОперанда, "");
		Операнды.Добавить(Идентификатор);
		
		КоличествоОперандов = КоличествоОперандов - СтрЧислоВхождений(ТекстФормулы, Операнд);
		ТекстФормулы 		= СтрЗаменить(ТекстФормулы, Операнд, "");
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицу операндов формулы
//
// Параметры:
//  ХранилищеФормул	 - Строка, Массив	 - Одна или несколько строк формул
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица операндов формулы
//
Функция ПолучитьТаблицуОперандовФормулы(ХранилищеФормул) Экспорт
	
	Операнды = Новый ТаблицаЗначений;
	Операнды.Колонки.Добавить("Операнд");
	Операнды.Колонки.Добавить("Показатель");
	Операнды.Колонки.Добавить("ТипПоказателя");
	
	Операнды.Индексы.Добавить("Операнд");
	
	Если ТипЗнч(ХранилищеФормул) = Тип("Строка") Тогда
		
		ПарсингФормулыНаОперанды(ХранилищеФормул, Операнды);
		
	ИначеЕсли ТипЗнч(ХранилищеФормул) = Тип("Массив") Тогда
		
		Для каждого ЭлементМассива Из ХранилищеФормул Цикл
			
			ПарсингФормулыНаОперанды(ЭлементМассива, Операнды);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Операнды;
	
КонецФункции

// Процедура проверяет формулу на синтаксическую корректность
//
// Параметры:
//  Ошибки	 - Массив	 - Список для помещения ошибок
//  Формула	 - Строка	 - Строка формулы
//
Процедура ПроверитьФормулу(Ошибки, Формула) Экспорт
	
	Перем СоответствиеОперандов, РасчетныеДанные;
	
	ЗначениеВсехОперандов = 10; // При проверке формулы значения всех операндов принимаем равным 10
	
	ТекстФормулы = СокрЛП(Формула);
	
	Если СтрЧислоВхождений(ТекстФормулы, СтрокаНачалаОперанда()) <> СтрЧислоВхождений(ТекстФормулы, СтрокаКонцаОперанда()) Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых операндов не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
	Если СтрЧислоВхождений(ТекстФормулы, "(") <> СтрЧислоВхождений(ТекстФормулы, ")") Тогда
		
		ТекстОшибки = НСтр("ru ='Количество открытых скобок не равно количеству закрытых.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
	ТаблицаОперандов = ПолучитьТаблицуОперандовФормулы(Формула);
	
	Для каждого Строка Из ТаблицаОперандов Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Показатель) Тогда
			
			ТекстОшибки = НСтр("ru ='Не распознан операнд %1.
										|Проверьте правильность написания формулы.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Операнд);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
			
		КонецЕсли;
		
		ДобавитьОперандВСтруктуру(СоответствиеОперандов, Строка.Операнд, ЗначениеВсехОперандов);
		
	КонецЦикла;
	
	РасчетДанныхПоФормуле(ТекстФормулы, СоответствиеОперандов, РасчетныеДанные);
		
	Если РасчетныеДанные.ОшибкаРасчета Тогда
		
		ТекстОшибки = НСтр("ru ='При расчете возникли ошибки. Проверьте правильность написания формулы.
			|Подробное описание:'") + Символы.ПС + РасчетныеДанные.ТекстОшибки;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Формула", ТекстОшибки, "");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет переданную формулу на бесконечный цикл
//
// Параметры:
//  Показатель		 - СправочникСсылка.ПоказателиБизнеса	 - Ссылка на показатель
//  ТекущийРодитель	 - СправочникСсылка.ПоказателиБизнеса	 - Родитель переданного показателя
//  Формула			 - Строка	 - Строка с формулой
//  Ошибки			 - Массив	 - Массив для возврата ошибок
//
Процедура ПроверитьФормулуНаБесконечныйЦикл(Показатель, ТекущийРодитель, Формула, Ошибки) Экспорт
	
	ТаблицаОперандов = ПолучитьТаблицуОперандовФормулы(Формула);
	
	РодителиПоказателя = Новый Массив;
	ПолучитьРодителейПоказателяРекурсивно(ТекущийРодитель, РодителиПоказателя);
	
	Для каждого СтрокаОперанда Из ТаблицаОперандов Цикл
		
		Если СтрокаОперанда.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Группа Тогда
			
			Если РодителиПоказателя.Найти(СтрокаОперанда.Показатель) <> Неопределено Тогда
				ТекстОшибки = НСтр("ru ='Текущий показатель входит в группу ""%1"", ее нельзя использовать в данной формуле'");
				Ошибки.Добавить(СтрШаблон(ТекстОшибки, СтрокаОперанда.Показатель));
			КонецЕсли;
			
		ИначеЕсли СтрокаОперанда.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
			ПроверитьФормулуНаБесконечныйЦиклРекурсивно(СтрокаОперанда.Показатель, РодителиПоказателя, Ошибки)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицу приоритетов формул переданного дерева
//
// Параметры:
//  ДеревоОтчета						 - ДеревоЗначений - Дерево с данными отчета
//  ИдентификаторыПоказателейДляФормул	 - Соответствие	  - Идентификаторы для поиска показателей в дереве
//  ДеревоФормы	 - ДанныеФормыДерево	  - Заполняется только при вызове из формы бюджета
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с порядком вычисления формул
//
Функция СформироватьТаблицуПриоритетовФормул(ДеревоОтчета, ИдентификаторыПоказателейДляФормул, ДеревоФормы = Неопределено) Экспорт
	
	ТаблицаПриоритетовФормул = ИнициализироватьТаблицуПриоритетовФормул();
	ЗаполнитьТаблицуПриоритетовФормулРекурсивно(ДеревоОтчета, ИдентификаторыПоказателейДляФормул, ТаблицаПриоритетовФормул, ДеревоФормы);
	ТаблицаПриоритетовФормул.Сортировать("Приоритет,Порядок");
	
	Возврат ТаблицаПриоритетовФормул;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонстантныеЗначения

Функция СтрокаКонцаОперанда() Экспорт
	
	Возврат "]";
	
КонецФункции

Функция СтрокаНачалаОперанда() Экспорт
	
	Возврат "[";
	
КонецФункции

#КонецОбласти

#Область Формулы

Функция СоздатьСтруктуруРасчетныхДанных()
	
	Возврат Новый Структура("Сумма, ОшибкаРасчета, ТекстОшибки", 0, Ложь, "")
	
КонецФункции // ()

Процедура ПарсингФормулыНаОперанды(Формула, Операнды)
	
	ТекстФормулы = СокрЛП(Формула);
	
	Если ПустаяСтрока(Формула) Тогда
		Возврат;
	КонецЕсли;
	
	СимволНачалоОперанда = СтрокаНачалаОперанда();
	СимволКонецОперанда	 = СтрокаКонцаОперанда();
	
	КоличествоОперандов = СтрЧислоВхождений(ТекстФормулы, СимволНачалоОперанда);
	
	Пока КоличествоОперандов > 0 Цикл
		
		НачалоОперанда	= Найти(ТекстФормулы, СимволНачалоОперанда);
		КонецОперанда	= Найти(ТекстФормулы, СимволКонецОперанда);
		
		Операнд 		= Сред(ТекстФормулы, НачалоОперанда, КонецОперанда - НачалоОперанда + 1);
		Идентификатор	= СтрЗаменить(СтрЗаменить(Операнд, СимволНачалоОперанда, ""), СимволКонецОперанда, "");
		Результат		= НайтиПоказательПоИдентификатору(Идентификатор);
		
		Если Операнды.Найти(Операнд, "Операнд") <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НовыйОперанд = Операнды.Добавить();
		НовыйОперанд.Операнд			= Операнд;
		НовыйОперанд.Показатель			= Результат.Показатель;
		НовыйОперанд.ТипПоказателя 		= Результат.ТипПоказателя;
		
		КоличествоОперандов = КоличествоОперандов - СтрЧислоВхождений(ТекстФормулы, Операнд);
		ТекстФормулы 		= СтрЗаменить(ТекстФормулы, Операнд, "");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ПолучитьРодителейПоказателяРекурсивно(ТекущийРодитель, РодителиПоказателя)
	
	Если ТекущийРодитель.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РодителиПоказателя.Добавить(ТекущийРодитель);
	РодительРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "Родитель");
	ПолучитьРодителейПоказателяРекурсивно(РодительРодителя, РодителиПоказателя);
	
КонецПроцедуры

Процедура ПроверитьФормулуНаБесконечныйЦиклРекурсивно(Показатель, РодителиПоказателя, Ошибки)
	
	Формула = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "СтрокаФормулы");
	ТаблицаОперандов = ПолучитьТаблицуОперандовФормулы(Формула);
	
	Для каждого СтрокаОперанда Из ТаблицаОперандов Цикл
		
		Если СтрокаОперанда.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Группа Тогда
			
			Если РодителиПоказателя.Найти(СтрокаОперанда.Показатель) <> Неопределено Тогда
				ТекстОшибки = НСтр("ru ='Показатель ""%1"" использует группу ""%2"", в которую входит текущий показатель. Его нельзя использовать в данной формуле'");
				Ошибки.Добавить(СтрШаблон(ТекстОшибки, Показатель, СтрокаОперанда.Показатель));
			КонецЕсли;
			
		ИначеЕсли СтрокаОперанда.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
			ПроверитьФормулуНаБесконечныйЦиклРекурсивно(СтрокаОперанда.Показатель, РодителиПоказателя, Ошибки)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОкруглитьЧислоПоПравилу(Число, ОкруглятьВБольшуюСторону, ПравилоОкругления)
	Перем Результат; // Возвращаемый результат.
	
	Если НЕ ЗначениеЗаполнено(Число) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ОкруглятьВБольшуюСторону <> Истина
		И ОкруглятьВБольшуюСторону <> Ложь Тогда
		
		ОкруглятьВБольшуюСторону = Ложь;
		
	КонецЕсли;
	
	ПорядокОкругления0_01 = Перечисления.ПорядкиОкругления.Окр0_01;
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	ПорядокОкругления	= ?(ЗначениеЗаполнено(ПравилоОкругления), ПравилоОкругления, ПорядокОкругления0_01);
	Порядок 			= Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону = Истина Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЦенуПоПравилам()

// Процедура рекурсивно заполняет таблицу с приоритетами расчета формул из последнего параметра
//
// Параметры:
//  СтрокиДерева						 - ДеревоЗначений	 - Дерево с данными отчета
//  ИдентификаторыПоказателейДляФормул	 - Соответствие	 - Идентификаторы для поиска показателей в дереве
//  ТаблицаПриоритетовФормул			 - ТаблицаЗначений	 - Таблица с порядком вычисления формул
//
Процедура ЗаполнитьТаблицуПриоритетовФормулРекурсивно(СтрокиДерева, ИдентификаторыПоказателейДляФормул, ТаблицаПриоритетовФормул, ДеревоФормы)
	
	ЭтоДеревоФормы = ДеревоФормы <> Неопределено;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
				
				Операнды = Новый Массив;
				ПарсингФормулыНаИдентификаторыОперандов(СтрокаДерева.СтрокаФормулы, Операнды);
				
				ЕстьФормула = Ложь;
				Для каждого Операнд Из Операнды Цикл
					СтрокаОперанда = ИдентификаторыПоказателейДляФормул.Получить(Операнд);
					Если СтрокаОперанда = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если ИдентификаторыПоказателейДляФормул <> Неопределено Тогда
						Если ЭтоДеревоФормы Тогда
							СтрокаОперанда = ДеревоФормы.НайтиПоИдентификатору(СтрокаОперанда);
						КонецЕсли;
						Если СтрокаОперанда.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
							ЕстьФормула = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ЭтоДеревоФормы Тогда
					Родитель = СтрокаДерева.ПолучитьРодителя();
				Иначе
					Родитель = СтрокаДерева.Родитель;
				КонецЕсли;
				
				Приоритет = ?(Родитель = Неопределено, 2, 0); // Формулы внутри групп должны считаться раньше
				Если ЕстьФормула Тогда
					Приоритет = Приоритет + 1;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаПриоритетовФормул.Добавить();
				НоваяСтрока.Формула = СтрокаДерева;
				НоваяСтрока.Приоритет = Приоритет;
				НоваяСтрока.Порядок = СтрокаДерева.Порядок;
				
		КонецЕсли;
		
		Если ЭтоДеревоФормы Тогда
			Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
				ЗаполнитьТаблицуПриоритетовФормулРекурсивно(СтрокаДерева.ПолучитьЭлементы(), ИдентификаторыПоказателейДляФормул, ТаблицаПриоритетовФормул, ДеревоФормы);
			КонецЕсли;
		Иначе
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ЗаполнитьТаблицуПриоритетовФормулРекурсивно(СтрокаДерева.Строки, ИдентификаторыПоказателейДляФормул, ТаблицаПриоритетовФормул, ДеревоФормы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает новую таблицу приоритетов формул
//
Функция ИнициализироватьТаблицуПриоритетовФормул()
	
	ТаблицаПриоритетовФормул = Новый ТаблицаЗначений;
	ТаблицаПриоритетовФормул.Колонки.Добавить("Формула");
	ТаблицаПриоритетовФормул.Колонки.Добавить("Приоритет");
	ТаблицаПриоритетовФормул.Колонки.Добавить("Порядок");
	
	Возврат ТаблицаПриоритетовФормул;
	
КонецФункции

#КонецОбласти


