#Область СлужебныйПрограммныйИнтерфейс

// Проверяет необходимость переиздания указанного сертификата для использования в ЭДО.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация для проверки.
//  Сертификат - СертификатКриптографии - сертификат для проверки.
//  ТребуетсяПереиздание - Булево - признак необходимости переиздать сертификат для ЭДО.
//
Процедура ТребуетсяПереизданиеСертификатаЭДО(Знач Организация, Знач Сертификат, ТребуетсяПереиздание) Экспорт
	
	СсылкаНаСертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(Сертификат);
	
	Если ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СертификатыУчетныхЗаписей.ИдентификаторЭДО КАК ИдентификаторОрганизации
		|ИЗ
		|	СертификатыУчетныхЗаписей КАК СертификатыУчетныхЗаписей";
		
		Отбор = СинхронизацияЭДО.НовыйОтборСертификатовУчетныхЗаписей();
		Отбор.Сертификат = "&Сертификат";
		ЗапросСертификатов = СинхронизацияЭДО.ЗапросСертификатовУчетныхЗаписей("СертификатыУчетныхЗаписей", Отбор);
		
		Запросы = Новый Массив;
		Запросы.Добавить(ЗапросСертификатов);
		
		ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
		ИтоговыйЗапрос.УстановитьПараметр("Сертификат", СсылкаНаСертификат);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = ИтоговыйЗапрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ТребуетсяПереиздание = Не Результат.Пустой();
	Иначе
		ТребуетсяПереиздание = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует настройки подключения ЭДО.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация для подключения ЭДО.
//  КодФНС - Строка - код налогового органа организации.
//  Настройки - Строка - инициализированные настройки.
//
Процедура ИнициализироватьНастройкиПодключенияЭДО(Знач Организация, Знач КодФНС, Настройки) Экспорт
	
	Параметры = СинхронизацияЭДОКлиентСервер.НовыеПараметрыПодключенияЭДО();
	Параметры.Организация = Организация;
	Параметры.КодНалоговогоОргана = КодФНС;
	Параметры.ОператорЭДО = "2AE"; // Калуга Астрал.
	Параметры.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	Параметры.НаименованиеУчетнойЗаписи = СтрШаблон(НСтр("ru = '%1, %2'"), Параметры.Организация, Параметры.СпособОбменаЭД);
	Параметры.НазначениеУчетнойЗаписи = НСтр("ru = 'Основная'");
	Параметры.ПринятыУсловияИспользования = Истина;
	
	КонтактнаяИнформация = ИнтеграцияБСПБЭД.КонтактнаяИнформацияОбъекта(Организация, "ЮрАдресОрганизации");
	Параметры.АдресОрганизации         = КонтактнаяИнформация.Представление;
	Параметры.АдресОрганизацииЗначение = КонтактнаяИнформация.Значение;
		
	Операция = СинхронизацияЭДОКлиентСервер.НоваяОперацияПодключенияЭДО(Параметры);
	
	Настройки = ИнтеграцияБРОЭДОСлужебный.ОперацияЭДОВСтроку(Операция);
	
КонецПроцедуры

// Инициализирует настройки переиздания сертификата криптографии.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация для переиздания сертификата.
//  КодФНС - Строка - код налогового органа организации.
//  Сертификат - СертификатКриптографии - сертификат для переиздания.
//  Настройки - Строка - инициализированные настройки.
//
Процедура ИнициализироватьНастройкиПереизданияСертификатаЭДО(Знач Организация, Знач КодФНС, Знач Сертификат, Настройки) Экспорт
	
	СсылкаНаСертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(Сертификат);
	
	Параметры = СинхронизацияЭДОКлиентСервер.НовыеПараметрыОбновленияСертификата();
	Параметры.Организация = Организация;
	Параметры.Сертификат  = СсылкаНаСертификат;
	
	Операция = СинхронизацияЭДОКлиентСервер.НоваяОперацияОбновленияСертификата(Параметры);
	
	Настройки = ИнтеграцияБРОЭДОСлужебный.ОперацияЭДОВСтроку(Операция);
	
КонецПроцедуры

// Проверяет корректность настроек операции ЭДО (подключение ЭДО, переиздание сертификата).
//
// Параметры:
//  Настройки - Строка - настройки для проверки.
//                       См. ИнициализироватьНастройкиПодключенияЭДО.
//                       См. ИнициализироватьНастройкиПереизданияСертификатаЭДО.
//  НастройкиКорректны - Булево - результат проверки настроек.
//
Процедура ПроверитьНастройкиРегистрацииЭДО(Знач Настройки, НастройкиКорректны) Экспорт
	
	Операция = ИнтеграцияБРОЭДОСлужебный.ОперацияЭДОИзСтроки(Настройки);
	
	НастройкиКорректны = ИнтеграцияБРОЭДОСлужебный.ОперацияЭДОКорректна(Операция);
	
КонецПроцедуры

// Выгружает электронные документы для предоставления в ФНС.
// Предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  УчетныеДокументы - Массив - массив ссылок на документы информационной базы.
//  УникальныйИдентификатор - УникальныйИдентификатор - будет использован для помещения файлов выгрузки во временное хранилище.
//
// Возвращаемое значение:
//  Соответствие - соответствие документов ИБ:
//    * Ключ     - ДокументСсылка - ссылка на документ-владелец электронного документа.
//    * Значение - Массив Из Структура - параметры электронных документов, с ключами:
//       * ТипФайла - Строка - возможные значения: "ФайлВыгрузки", "ЭЦП", "ФайлПодтверждения", "ЭЦППодтверждения".
//       * КНД      - Строка - КНД выгружаемого электронного документа, заполняется только для файла выгрузки и файла подтверждения.
//       * ИмяФайла - Строка - имя выгружаемого файла.
//       * АдресВременногоХранилища - Строка - адрес временного хранилища с данными файлов выгрузки.
//
Функция ВыгрузкаДокументовДляПередачиВФНС(УчетныеДокументы, УникальныйИдентификатор) Экспорт
	
	ДанныйФайлов = ЭлектронныеДокументыЭДО.ДанныеФайловЭлектронныхДокументовДляВыгрузкиВФНС(
		УчетныеДокументы, УникальныйИдентификатор);
	
	КонверторТипов = Новый Соответствие;
	КонверторТипов.Вставить("ОсновнойТитул", "ФайлВыгрузки");
	КонверторТипов.Вставить("ОтветныйТитул", "ФайлПодтверждения");
	КонверторТипов.Вставить("ОсновнаяПодпись", "ЭЦП");
	КонверторТипов.Вставить("ОтветнаяПодпись", "ЭЦППодтверждения");
		
	Результат = Новый Соответствие;
	
	Для каждого Данные Из ДанныйФайлов Цикл
		
		НаборОписанийФайлов = Новый Массив;
		
		Для каждого Файл Из Данные.Значение Цикл
		
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("ТипФайла", КонверторТипов[Файл.Тип]);
			ОписаниеФайла.Вставить("ИмяФайла", Файл.Имя);
			ОписаниеФайла.Вставить("КНД", Файл.КНД);
			ОписаниеФайла.Вставить("АдресВременногоХранилища", Файл.Данные);
			
			НаборОписанийФайлов.Добавить(ОписаниеФайла);
		
		КонецЦикла;
		
		Результат.Вставить(Данные.Ключ, НаборОписанийФайлов);
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Выгружает электронные документы для предоставления в ФНС.
//
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  Структура - Структура результатов обработки и соответствия файлов:
//  * РезультатыОбработки - Соответствие Из КлючИЗначение - Результаты обработки документов по организациям:
//   ** Ключ - Строка - Наименование организации
//   ** Значение - См. НоваяСтруктураРезультатовОбработки 
//  * СоответствиеФайлов - Соответствие Из КлючИЗначение:
//   ** Ключ - Строка - Имя файла
//   ** Значение - ДвоичныеДанные - Двоичные данные файла
//  * Ошибки - Массив Из См. НоваяОшибка
Функция СформироватьФайлыВыгрузкиЭДДляФНС(Знач ЭлектронныеДокументы) Экспорт
	
	Результат = Новый Структура("РезультатыОбработки, СоответствиеФайлов, Ошибки",
		Новый Соответствие, Новый Соответствие, Новый Массив);
	
	Если ЭлектронныеДокументы.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеОбъектовУчета = ДанныеОбъектовУчетаДляВыгрузкиЭДДляФНС(ЭлектронныеДокументы);
	ЭлектронныеДокументыДляВыгрузки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	Запрос.УстановитьПараметр("ТипыДокументовЭДОВыгрузкиДляФНС", ТипыДокументовЭДОВыгрузкиДляФНС());
	Запрос.Текст = ЭлектронныеДокументыЭДО.ТекстЗапросаДляВыгрузкиЭДДляФНС();
	ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл

		ПакетыДокументовДляВыгрузки = НоваяСтруктураПакетовДляВыгрузки();
		РезультатОбработкиПоОрганизации = НоваяСтруктураРезультатовОбработки();
		
		Организация = ВыборкаПоОрганизации.Организация;
		ОрганизацияПредставление = ВыборкаПоОрганизации.ОрганизацияПредставление;
		ВыборкаДокументов = ВыборкаПоОрганизации.Выбрать();
	
		Пока ВыборкаДокументов.Следующий() Цикл
		
			ЭлектронныеДокументыДляВыгрузки.Добавить(ВыборкаДокументов.ЭлектронныйДокумент);
			ДанныеДокумента = НоваяСтруктураДанныеДокументаДляВыгрузки();
			ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаДокументов);
				
			Если ДанныеДокумента.ТипДокументаНеПодходитДляВыгрузки Тогда
				ОбработатьНепредназначенныйДляВыгрузкиЭД(ДанныеДокумента, ПакетыДокументовДляВыгрузки);
				Продолжить;
			КонецЕсли;
				
			РаспределитьЭлектронныеДокументыПоПакетам(ДанныеДокумента, ПакетыДокументовДляВыгрузки);
			
		КонецЦикла;
		
		Если ПакетыДокументовДляВыгрузки.Формализованные.Количество() Тогда
			ВыгрузитьФормализованныеДокументы(Организация, ДанныеОбъектовУчета, ПакетыДокументовДляВыгрузки,
				Результат.СоответствиеФайлов, РезультатОбработкиПоОрганизации, Результат.Ошибки);
		КонецЕсли;
			
		Если ПакетыДокументовДляВыгрузки.НеформализованныеОфис.Количество()
			ИЛИ ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке.Количество() Тогда
			ВыгрузитьНЕФормализованныеДокументы(Организация, ПакетыДокументовДляВыгрузки, 
				Результат.СоответствиеФайлов, РезультатОбработкиПоОрганизации, Результат.Ошибки);
		КонецЕсли;
		
		Если ПакетыДокументовДляВыгрузки.Необработанные.Количество() Тогда
			ВыгрузитьСписокНеобработанныхДокументов(ОрганизацияПредставление, ПакетыДокументовДляВыгрузки, 
				Результат.СоответствиеФайлов, РезультатОбработкиПоОрганизации);
		КонецЕсли;
		
		РезультатОбработкиПоОрганизации.КоличествоДокументов = 
			РезультатОбработкиПоОрганизации.КоличествоВФормализованномВиде
			+ РезультатОбработкиПоОрганизации.КоличествоСНанесениемШтамповЭП
			+ РезультатОбработкиПоОрганизации.КоличествоСОтдельнымиШтампамиЭП
			+ РезультатОбработкиПоОрганизации.КоличествоНеВыгружено;
		
		Результат.РезультатыОбработки.Вставить(ОрганизацияПредставление, РезультатОбработкиПоОрганизации);
		
	КонецЦикла;
	
	НеобработанныеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ЭлектронныеДокументы,
		ЭлектронныеДокументыДляВыгрузки);
	Для Каждого НеобработанныйДокумент Из НеобработанныеДокументы Цикл
		ТекстОшибки = СтрШаблон(НСтр("ru='Документ ""%1"" не подлежит выгрузке для предоставления в ФНС'"),
			НеобработанныйДокумент);
		ДобавитьОшибкуОбработки(Результат.Ошибки, НеобработанныйДокумент, ТекстОшибки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает свойства объектов учета, которые будут отражаться в едином списке документов, представляемых по требованию ФНС.
// Для объекта учета должны существовать электронные документы по завершенным обменам, не помеченные на удаление и 
// имеющие один из следующих типов:
// УПД, СчетФактура, ТоварнаяНакладная, АктВыполненныхРабот, АктНаПередачуПрав,
// УКД, КорректировочныйСчетФактура, СоглашениеОбИзмененииСтоимости,
// АктОРасхождениях.
//
// Параметры:
//  ОбъектыУчета - Массив - массив ссылок на объекты учета электронных документов.
//                       Если параметр указан, требуется заполнить свойства только указанных объектов.
//                       Если параметр не указан или массив пустой, тогда требуется заполнить свойства
//                       для всех объектов учета, по которым ЭДО завершен.
//
// Возвращаемое значение:
//   Соответствие - Соответствие объектов учета и видов электронных документов:
//    * Ключ     - ДокументСсылка - ссылка на документ учета.
//    * Значение - Строка - тип электронного документа, который следует преобразовать
//                 к строковому представлению определенного формата.
//                 Возможные значения:
//                 УПД, СчетФактура, ТоварнаяНакладнаяТОРГ12, АктПриемкиСдачиРабот, АктНаПередачуПрав,
//                 УКД, КорректировочныйСчетФактура, ДокументОбИзмененииСтоимости,
//                 ПередачаТоваров, ПередачаУслуг, АктОРасхождениях.
Функция СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(ОбъектыУчета = Неопределено) Экспорт

	СвойстваДокументов = ЭлектронныеДокументыЭДО.СвойстваЭлектронныхДокументовДляВыгрузкиВФНС(ОбъектыУчета);
	
	КонверторКНД = Новый Соответствие;
	КонверторКНД.Вставить("1175010", "ПередачаТоваров");
	КонверторКНД.Вставить("1175012", "ПередачаУслуг");
	
	КонверторТипов = Новый Соответствие;
	КонверторТипов.Вставить(Перечисления.ТипыДокументовЭДО.УПД, "УПД");
	КонверторТипов.Вставить(Перечисления.ТипыДокументовЭДО.СчетФактура, "СчетФактура");
	КонверторТипов.Вставить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная, "ТоварнаяНакладнаяТОРГ12");
	КонверторТипов.Вставить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот, "АктПриемкиСдачиРабот");
	КонверторТипов.Вставить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав, "АктНаПередачуПрав");
	КонверторТипов.Вставить(Перечисления.ТипыДокументовЭДО.УКД, "УКД");
	КонверторТипов.Вставить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура, "КорректировочныйСчетФактура");
	КонверторТипов.Вставить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости, "ДокументОбИзмененииСтоимости");
	КонверторТипов.Вставить(Перечисления.ТипыДокументовЭДО.АктОРасхождениях, "АктОРасхождениях");
	
	Результат = Новый Соответствие;
	
	Для каждого Свойство Из СвойстваДокументов Цикл
	
		Тип = КонверторКНД[Свойство.КНД];
		
		Если Не ЗначениеЗаполнено(Тип) Тогда
			
			Тип = КонверторТипов[Свойство.Тип];
		
		КонецЕсли;
		
		Если Тип = Неопределено Тогда
			Тип = "";
		КонецЕсли;
		
		Результат.Вставить(Свойство.ОбъектУчета, Тип);
		
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыгрузкаЭлектронныхДокументовДляФНС

// Обрабатывает электронные документы в зависимости от типа регламента и типа документа, распределяет
// в соответствующие массивы документов пакетов для выгрузки.
// 
// Параметры:
//  ДанныеДокумента - см. НоваяСтруктураДанныеДокументаДляВыгрузки
//  ПакетыДокументовДляВыгрузки - см. НоваяСтруктураПакетовДляВыгрузки
//
Процедура РаспределитьЭлектронныеДокументыПоПакетам(ДанныеДокумента, ПакетыДокументовДляВыгрузки)

	ФайлДокумента = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(
		ДанныеДокумента.ЭлектронныйДокумент);
	
	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлДокумента);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ДобавитьДокументВПакетСОшибкой(ПакетыДокументовДляВыгрузки, ДанныеДокумента.ЭлектронныйДокумент, ТекстОшибки);
		Возврат;
	КонецПопытки;

	Если ДанныеДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент Тогда
		
		Если НЕ ФайлПодлежитПечати(ДанныеДокумента, ДанныеФайла, ПакетыДокументовДляВыгрузки) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартPDFA3 = РаботаСФайламиБЭД.ЭтоФайлФорматаPDFА3(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла).Результат;
		
		Если СтандартPDFA3
			И ЗначениеЗаполнено(ДанныеДокумента.НомерДокумента)
			И ЗначениеЗаполнено(ДанныеДокумента.ДатаДокумента) Тогда
			ПакетыДокументовДляВыгрузки.Формализованные.Добавить(ДанныеДокумента);
		Иначе
			Если РаботаСФайламиБЭД.ВозможноДобавитьШтампЭП(ДанныеФайла.Расширение) Тогда
				ПакетыДокументовДляВыгрузки.НеформализованныеОфис.Добавить(ДанныеДокумента);
			Иначе
				ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке.Добавить(ДанныеДокумента);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлектронныеДокументыЭДО.ДляТипаДокументаЕстьФорматНоНетРегламента(ДанныеДокумента.ТипДокумента) 
		И РаботаСФайламиБЭД.ЭтоXML(ДанныеФайла.Расширение) Тогда
			
		ПакетыДокументовДляВыгрузки.Формализованные.Добавить(ДанныеДокумента);
		
	ИначеЕсли ДанныеДокумента.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный Тогда
		
		Если НЕ ФайлПодлежитПечати(ДанныеДокумента, ДанныеФайла, ПакетыДокументовДляВыгрузки) Тогда
			Возврат;
		КонецЕсли;
		
		Если РаботаСФайламиБЭД.ВозможноДобавитьШтампЭП(ДанныеФайла.Расширение) Тогда
			ПакетыДокументовДляВыгрузки.НеформализованныеОфис.Добавить(ДанныеДокумента);
		Иначе
			ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке.Добавить(ДанныеДокумента);
		КонецЕсли;
		
	Иначе
		ПакетыДокументовДляВыгрузки.Формализованные.Добавить(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Выгружает формализованные документы в архив по формату БРО, заполняет результаты обработки документов по организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  ДанныеОбъектовУчета - см. ДанныеОбъектовУчетаДляВыгрузкиЭДДляФНС
//  ПакетыДокументовДляВыгрузки - см. НоваяСтруктураПакетовДляВыгрузки
//  ДанныеФайловСДвоичнымиДанными - Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Имя файла
//   * Значение - ДвоичныеДанные - Двоичные данные файла
//  РезультатОбработкиПоОрганизации - см. НоваяСтруктураРезультатовОбработки
//  Ошибки - Массив Из См. НоваяОшибка
Процедура ВыгрузитьФормализованныеДокументы(Организация, ДанныеОбъектовУчета, ПакетыДокументовДляВыгрузки,
	ДанныеФайловСДвоичнымиДанными, РезультатОбработкиПоОрганизации, Ошибки)

	ОписьВыгрузки = НоваяТаблицаОписиВыгрузкиЭДДляФНС();
	АдресКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	
	ЗаполнитьОписьИВыгрузитьВКаталог(
		ОписьВыгрузки,
		АдресКаталога,
		ПакетыДокументовДляВыгрузки,
		ДанныеОбъектовУчета);
	
	ИмяФайлаОписания = АдресКаталога + "описание.xml";
	Если ОписьВыгрузки.Количество()
		И НЕ СформироватьФайлОписанияВыгрузкиЭДДляФНС(Организация, ОписьВыгрузки, ИмяФайлаОписания) Тогда
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
		Возврат;
	КонецЕсли;

	Файлы = НайтиФайлы(АдресКаталога, ПолучитьМаскуВсеФайлы());
	Если Файлы.Количество() = 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось выгрузить документы по Организации ""%1"".'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация);
		ДобавитьОшибкуОбработки(Ошибки, Организация, ТекстСообщения);
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
		Возврат;
	КонецЕсли;
	
	НазваниеАрхива = ИмяФайлаКонтейнераВыгрузкиФормализованныхЭДДляФНС(Организация); 
	ПоместитьФайлыКаталогаВАрхив(Файлы, АдресКаталога, НазваниеАрхива, ДанныеФайловСДвоичнымиДанными);
	
	РезультатОбработкиПоОрганизации.КоличествоВФормализованномВиде = 
		ПакетыДокументовДляВыгрузки.Формализованные.Количество();
	РезультатОбработкиПоОрганизации.НаименованиеАрхиваФормализованных = НазваниеАрхива;
	
КонецПроцедуры

// Выгружает неформализованные документы в архивы в зависимости от необходимых действий
// заполняет результаты обработки документов по организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  ПакетыДокументовДляВыгрузки - см. НоваяСтруктураПакетовДляВыгрузки
//  ДанныеФайловСДвоичнымиДанными - Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Имя файла
//   * Значение - ДвоичныеДанные - Двоичные данные файла
//  РезультатОбработкиПоОрганизации - см. НоваяСтруктураРезультатовОбработки
//  Ошибки - Массив Из См. НоваяОшибка
Процедура ВыгрузитьНЕФормализованныеДокументы(Организация, ПакетыДокументовДляВыгрузки, 
	ДанныеФайловСДвоичнымиДанными, РезультатОбработкиПоОрганизации, Ошибки)
	
	АдресКаталогаФайлыСоШтампами = РаботаСФайламиБЭД.ВременныйКаталог();
	НомерКонтейнера = "1";
	НазваниеАрхиваСНанесеннымиШтампами = ИмяФайлаКонтейнераВыгрузкиНЕФормализованныхЭДДляФНС(Организация, 
		НомерКонтейнера);
	
	Сч = 0;
	КоличествоДокументов = ПакетыДокументовДляВыгрузки.НеформализованныеОфис.Количество()
		+ ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке.Количество();
	СообщениеПрогрессОфис = НСтр("ru='""%1"" - попытка сохранить в PDF и добавить штамп электронной подписи.
		|Выполнена обработка %2 из %3 неформализованных документов'");
	СообщениеПрогрессРучнаяОбработка = НСтр("ru='""%1"" - сохранение штампа электронной подписи отдельным файлом.
		|Выполнена обработка %2 из %3 неформализованных документов'");

	// Обработка документов с вставкой штампов ЭП
	НеобработанныеСОшибкой = Новый Массив;
	Для Каждого Элемент Из ПакетыДокументовДляВыгрузки.НеформализованныеОфис Цикл
		Документ = Элемент.ЭлектронныйДокумент;
		ИнформацияОтправителя = ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииОтправителяДляВыгрузкиФНС(Документ);
		ИнформацияПолучателя = ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииПолучателяДляВыгрузкиФНС(Документ);
		РезультатПроверкиПодписей = ПроверкаПодписейДокументаВыполнена(Документ, ИнформацияОтправителя,
			ИнформацияПолучателя);
		Если РезультатПроверкиПодписей.Результат Тогда
			
			ДлительныеОперации.СообщитьПрогресс(, СтрШаблон(СообщениеПрогрессОфис, Документ, Сч, КоличествоДокументов));
			
			ДанныеФайла = ДанныеФайлаНеформализованногоЭД(Документ);
			Попытка 
				ШтампЭП = ЭлектронныеДокументыЭДО.ДанныеШтампаЭППоДаннымСообщенияЭДО(ДанныеФайла.Владелец);
				СсылкаНаВизуализацию = РаботаСФайламиБЭД.ВизуализацияДокументаСШтампомЭП(
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ШтампЭП, ДанныеФайла.Расширение);
			Исключение
				ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке.Добавить(Элемент);
				Продолжить;
			КонецПопытки;
			
			Если СсылкаНаВизуализацию = Неопределено Тогда
				ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке.Добавить(Элемент);
				Продолжить;
			КонецЕсли;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СсылкаНаВизуализацию);
			ДвоичныеДанныеФайла.Записать(АдресКаталогаФайлыСоШтампами + ДанныеФайла.Наименование + ".pdf");
			Сч = Сч + 1;
		Иначе	
			ДобавитьДокументВПакетСОшибкой(ПакетыДокументовДляВыгрузки, Документ, РезультатПроверкиПодписей.ТекстОшибки);
			НеобработанныеСОшибкой.Добавить(Элемент);
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	ФайлыСоШтампами = НайтиФайлы(АдресКаталогаФайлыСоШтампами, ПолучитьМаскуВсеФайлы());
	Если ФайлыСоШтампами.Количество() Тогда
		ПоместитьФайлыКаталогаВАрхив(ФайлыСоШтампами, АдресКаталогаФайлыСоШтампами, НазваниеАрхиваСНанесеннымиШтампами,
			ДанныеФайловСДвоичнымиДанными);
	Иначе
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталогаФайлыСоШтампами);
	КонецЕсли;
	
	ПакетыДокументовДляВыгрузки.НеформализованныеОфис = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПакетыДокументовДляВыгрузки.НеформализованныеОфис, ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке);
	ПакетыДокументовДляВыгрузки.НеформализованныеОфис = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПакетыДокументовДляВыгрузки.НеформализованныеОфис, НеобработанныеСОшибкой);
	
	// Обработка документов без вставки штампов ЭП
	АдресКаталогаФайлыБезШтампов = РаботаСФайламиБЭД.ВременныйКаталог();
	Если ПакетыДокументовДляВыгрузки.НеформализованныеОфис.Количество() Тогда
		НомерКонтейнера = "2";
	КонецЕсли;
	НазваниеАрхиваСДокументамиДляОбработки = ИмяФайлаКонтейнераВыгрузкиНЕФормализованныхЭДДляФНС(Организация, 
		НомерКонтейнера);
	НеобработанныеСОшибкой = Новый Массив;
	Для Каждого Элемент Из ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке Цикл
		Документ = Элемент.ЭлектронныйДокумент;
		ИнформацияОтправителя = ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииОтправителяДляВыгрузкиФНС(Документ);
		ИнформацияПолучателя = ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииПолучателяДляВыгрузкиФНС(Документ);
		РезультатПроверкиПодписей = ПроверкаПодписейДокументаВыполнена(Документ, ИнформацияОтправителя,
			ИнформацияПолучателя);
		Если РезультатПроверкиПодписей.Результат Тогда
			
			ДлительныеОперации.СообщитьПрогресс(, СтрШаблон(СообщениеПрогрессРучнаяОбработка, 
				Документ, Сч, КоличествоДокументов));
			
			ДанныеФайла = ДанныеФайлаНеформализованногоЭД(Документ);
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(АдресКаталогаФайлыБезШтампов + ДанныеФайла.ИмяФайла);
			// Сохраняем штамп ЭП отдельным файлом
			ДанныеШтампаЭП = ЭлектронныеДокументыЭДО.ДанныеШтампаЭППоДаннымСообщенияЭДО(ДанныеФайла.Владелец);
			ДвоичныеДанныеШтампаЭП = ДанныеШтампаЭП.ПолучитьДвоичныеДанные();
			ДвоичныеДанныеШтампаЭП.Записать(АдресКаталогаФайлыБезШтампов + ДанныеФайла.Наименование + "_ShtampPodpisi.png");
			Сч = Сч + 1;
		Иначе
			ДобавитьДокументВПакетСОшибкой(ПакетыДокументовДляВыгрузки, Документ, РезультатПроверкиПодписей.ТекстОшибки);
			НеобработанныеСОшибкой.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
		
	ФайлыБезШтампов = НайтиФайлы(АдресКаталогаФайлыБезШтампов, ПолучитьМаскуВсеФайлы());
	Если ФайлыБезШтампов.Количество() Тогда
		ПоместитьФайлыКаталогаВАрхив(ФайлыБезШтампов, АдресКаталогаФайлыБезШтампов, НазваниеАрхиваСДокументамиДляОбработки,
			ДанныеФайловСДвоичнымиДанными);
	Иначе
		РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталогаФайлыБезШтампов);
	КонецЕсли;
	
	ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке, НеобработанныеСОшибкой);
	
	// Формирование результатов обработки
	РезультатОбработкиПоОрганизации.КоличествоСНанесениемШтамповЭП = 
		ПакетыДокументовДляВыгрузки.НеформализованныеОфис.Количество();
	Если РезультатОбработкиПоОрганизации.КоличествоСНанесениемШтамповЭП <> 0 Тогда
		РезультатОбработкиПоОрганизации.НаименованиеАрхиваСНанесениемШтампов = НазваниеАрхиваСНанесеннымиШтампами;
	КонецЕсли;
	
	РезультатОбработкиПоОрганизации.КоличествоСОтдельнымиШтампамиЭП = 
		ПакетыДокументовДляВыгрузки.НеформализованныеКОбработке.Количество();
	Если РезультатОбработкиПоОрганизации.КоличествоСОтдельнымиШтампамиЭП <> 0 Тогда
		РезультатОбработкиПоОрганизации.НаименованиеАрхиваСОтдельнымиШтампами = НазваниеАрхиваСДокументамиДляОбработки;
	КонецЕсли;
	
	Если ФайлыСоШтампами.Количество() = 0
		И ФайлыБезШтампов.Количество() = 0 
		Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось выгрузить документы по Организации ""%1"".'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация);
		ДобавитьОшибкуОбработки(Ошибки, Организация, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Выгружает файл списка необработанных документов с ошибками и навигационными ссылками в формате txt,
// заполняет результаты обработки документов по организации
// 
// Параметры:
//  Организация - Строка - Наименование организации
//  ПакетыДокументовДляВыгрузки - см. НоваяСтруктураПакетовДляВыгрузки
//  ДанныеФайловСДвоичнымиДанными - Соответствие Из КлючИЗначение:
//   * Ключ - Строка - ИмяФайла
//   * Значение - ДвоичныеДанные - Двоичные данные файла
//  РезультатОбработкиПоОрганизации - см. НоваяСтруктураРезультатовОбработки
//
Процедура ВыгрузитьСписокНеобработанныхДокументов(Организация, ПакетыДокументовДляВыгрузки, 
	ДанныеФайловСДвоичнымиДанными, РезультатОбработкиПоОрганизации)

	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	
	Сч = 0;
	Для Каждого Элемент Из ПакетыДокументовДляВыгрузки.Необработанные Цикл
		Сч = Сч + 1;
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Элемент.ЭлектронныйДокумент);
		СтрокаШаблон = НСтр("ru='%1. ""%2"" Навигационная ссылка: %3
			|Причина: %4'");
		Строка = СтрШаблон(СтрокаШаблон, Сч, Элемент.ЭлектронныйДокумент, НавигационнаяСсылка, Элемент.ТекстОшибки);
		ТекстовыйДокумент.ДобавитьСтроку(Строка);
	КонецЦикла;
	
	НаименованиеОрганизации = СтроковыеФункции.СтрокаЛатиницей(Организация);
	ОбработанноеНаименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		НаименованиеОрганизации, "");
	
	ИмяФайла = СтрШаблон("%1 %2", ОбработанноеНаименование, "neobrabotannye dokumenty.txt");
	Поток = Новый ПотокВПамяти();
	ТекстовыйДокумент.Записать(Поток, КодировкаТекста.UTF8);
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	ДанныеФайловСДвоичнымиДанными.Вставить(ИмяФайла, ДвоичныеДанные);
	
	РезультатОбработкиПоОрганизации.КоличествоНеВыгружено = ПакетыДокументовДляВыгрузки.Необработанные.Количество();
	РезультатОбработкиПоОрганизации.НаименованиеФайлаСНевыгруженными = ИмяФайла; //АПК:1036 не проверять строку на орфографию.
	
КонецПроцедуры

// Возвращает новую таблицу для описи электронных документов для выгрузки в ФНС.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Пустая таблица описи выгружаемых для ФНС формализованных документов:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//   * ТипДокументаЭДО - ПеречислениеСсылка.ТипыДокументовЭДО
//   * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//   * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//   * КНД - Строка - Номер по классификатору налоговых документов
//   * НаправлениеЭДО - ПеречислениеСсылка.НаправленияЭДО 
//   * НомерДокумента - Строка
//   * ДатаДокумента - Дата
//   * НомерДокументаОснования - Строка
//   * ДатаДокументаОснования - Дата
//   * ИмяФайлаДанных - Строка - Наименование файла информации отправителя
//   * ИмяФайлаПодписи - Строка - Наименование файла подписи информации отправителя
//   * РазмерФайлаДанных - Число - Размер файла информации отправителя
//   * РазмерФайлаПодписи - Число - Размер файла подписи информации отправителя
//   * КНДПодтверждения - Строка - Номер по классификатору налоговых документов
//   * ИмяФайлаДанныхПодтверждения - Строка - Наименование файла информации получателя
//   * ИмяФайлаПодписиПодтверждения - Строка - Наименование файла подписи информации получателя
//   * РазмерФайлаДанныхПодтверждения - Число - Размер файла информации получателя
//   * РазмерФайлаПодписиПодтверждения - Число - Размер файла подписи информации получателя
//
Функция НоваяТаблицаОписиВыгрузкиЭДДляФНС()
	
	ТЗ = Новый ТаблицаЗначений;
	
	МассивТиповЭД = Новый Массив;
	МассивТиповЭД.Добавить(Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"));
	МассивТиповЭД.Добавить(Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	ТипЭлектронныйДокумент = Новый ОписаниеТипов(МассивТиповЭД);
	
	ТЗ.Колонки.Добавить("ЭлектронныйДокумент", ТипЭлектронныйДокумент);
	ТЗ.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип);
	ТЗ.Колонки.Добавить("ТипДокументаЭДО", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ТЗ.Колонки.Добавить("ТипЭлементаРегламента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
	ТЗ.Колонки.Добавить("ТипРегламента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРегламентовЭДО"));
	ТЗ.Колонки.Добавить("КНД", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("НаправлениеЭДО", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	ТЗ.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ДатаДокумента", Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("НомерДокументаОснования", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ДатаДокументаОснования", Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("ИмяФайлаДанных", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИмяФайлаПодписи", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("РазмерФайлаДанных", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("РазмерФайлаПодписи", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КНДПодтверждения", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИмяФайлаДанныхПодтверждения", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИмяФайлаПодписиПодтверждения", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("РазмерФайлаДанныхПодтверждения", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("РазмерФайлаПодписиПодтверждения", Новый ОписаниеТипов("Число"));
	
	Возврат ТЗ;
	
КонецФункции

// Возвращает новую структуру для формирования результатов обработки документов для выгрузки в ФНС.
// 
// Возвращаемое значение:
//  Структура - новая структура результатов обработки:
//   * КоличествоДокументов - Число - общее число документов.
//   * КоличествоВФормализованномВиде - Число - количество документов в формализованном виде.
//   * НаименованиеАрхиваФормализованных - Строка - наименование архива формализованных документов.
//   * КоличествоСНанесениемШтамповЭП - Число - количество документов, на которых удалось нанести штамп ЭП.
//   * НаименованиеАрхиваСНанесениемШтампов - Строка - наименование архива неформализованных документов
//                                                     с нанесенными штампами ЭП.
//   * КоличествоСОтдельнымиШтампамиЭП - Число - количество документов, на которых НЕ удалось нанести штамп ЭП.
//   * НаименованиеАрхиваСОтдельнымиШтампами - Строка - наименование архива неформализованных документов
//                                                      с отдельными штампами ЭП.
//   * КоличествоНеВыгружено - Число - количество документов, которые не удалось выгрузить.
//   * НаименованиеФайлаСНевыгруженными - Строка - наименование текстового файла, в котором указаны невыгруженные //АПК:1036 не проверять строку на орфографию.
//                                                 документы с указанием причины и навигационной ссылкой.
//
Функция НоваяСтруктураРезультатовОбработки() 
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("КоличествоДокументов", 0);
	РезультатОбработки.Вставить("КоличествоВФормализованномВиде", 0);
	РезультатОбработки.Вставить("НаименованиеАрхиваФормализованных", "");
	РезультатОбработки.Вставить("КоличествоСНанесениемШтамповЭП", 0);
	РезультатОбработки.Вставить("НаименованиеАрхиваСНанесениемШтампов", "");
	РезультатОбработки.Вставить("КоличествоСОтдельнымиШтампамиЭП", 0);
	РезультатОбработки.Вставить("НаименованиеАрхиваСОтдельнымиШтампами", "");
	РезультатОбработки.Вставить("КоличествоНеВыгружено", 0);
	РезультатОбработки.Вставить("НаименованиеФайлаСНевыгруженными", ""); //АПК:1036 не проверять строку на орфографию.
	
	Возврат РезультатОбработки;

КонецФункции

// Возвращает новую структуру для обработки документов для выгрузки в ФНС.
// 
// Возвращаемое значение:
//  Структура - Новая структура пакетов для выгрузки:
//   * Формализованные - Массив Из см. НоваяСтруктураДанныеДокументаДляВыгрузки
//   * НеформализованныеОфис - Массив Из см. НоваяСтруктураДанныеДокументаДляВыгрузки
//   * НеформализованныеКОбработке - Массив Из см. НоваяСтруктураДанныеДокументаДляВыгрузки
//   * Необработанные - Массив Из см. НоваяСтруктураНеобработанныеДокументы
//
Функция НоваяСтруктураПакетовДляВыгрузки()
		
	ПакетыДокументовДляВыгрузки = Новый Структура;
	ПакетыДокументовДляВыгрузки.Вставить("Формализованные", Новый Массив);
	ПакетыДокументовДляВыгрузки.Вставить("НеформализованныеОфис", Новый Массив);
	ПакетыДокументовДляВыгрузки.Вставить("НеформализованныеКОбработке", Новый Массив);
	ПакетыДокументовДляВыгрузки.Вставить("Необработанные", Новый Массив);

	Возврат ПакетыДокументовДляВыгрузки;
	
КонецФункции

// Возвращает новую структуру для данных документа для выгрузки в ФНС.
// 
// Возвращаемое значение:
//  Структура - Новая структура данные документа для выгрузки:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//   * Организация - ОпределяемыйТип.Организация - организация электронного документа
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент электронного документа
//   * НомерДокумента - Строка - номер электронного документа
//   * ДатаДокумента - Дата - дата электронного документа
//   * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО - тип регламента электронного документа
//   * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - тип электронного документа
//   * ТипДокументаНеПодходитДляВыгрузки - Булево - информация о возможности выгрузки документа для ФНС
//   * НаправлениеЭДО - ПеречислениеСсылка.НаправленияЭДО - направление сообщения электронного документа
//   * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - тип регламента электронного документа
//   * ТипДокументаЭДО - ПеречислениеСсылка.ТипыДокументовЭДО - тип документа сообщения электронного документа
//
Функция НоваяСтруктураДанныеДокументаДляВыгрузки() 
	
	ДанныеДокументаДляВыгрузки = Новый Структура;
	ДанныеДокументаДляВыгрузки.Вставить("ЭлектронныйДокумент", Неопределено);
	ДанныеДокументаДляВыгрузки.Вставить("Организация", Неопределено);
	ДанныеДокументаДляВыгрузки.Вставить("Контрагент", Неопределено);
	ДанныеДокументаДляВыгрузки.Вставить("НомерДокумента", "");
	ДанныеДокументаДляВыгрузки.Вставить("ДатаДокумента", Дата(1, 1, 1));
	ДанныеДокументаДляВыгрузки.Вставить("ТипРегламента", Перечисления.ТипыРегламентовЭДО.ПустаяСсылка());
	ДанныеДокументаДляВыгрузки.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	ДанныеДокументаДляВыгрузки.Вставить("ТипДокументаНеПодходитДляВыгрузки", Ложь);
	ДанныеДокументаДляВыгрузки.Вставить("НаправлениеЭДО", Перечисления.НаправленияЭДО.ПустаяСсылка());
	ДанныеДокументаДляВыгрузки.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	ДанныеДокументаДляВыгрузки.Вставить("ТипДокументаЭДО", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	
	Возврат ДанныеДокументаДляВыгрузки;
	
КонецФункции

// Возвращает новую структуру для необработанных документы.
// 
// Возвращаемое значение:
//  Структура - Новая структура необработанные документы:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО 
//   * ТекстОшибки - Строка
//
Функция НоваяСтруктураНеобработанныеДокументы()
	
	НеобработанныеДокументы = Новый Структура;

	НеобработанныеДокументы.Вставить("ЭлектронныйДокумент", Неопределено);
	НеобработанныеДокументы.Вставить("ТекстОшибки", "");
	
	Возврат НеобработанныеДокументы;
	
КонецФункции

// Возвращает новую структуру для записи ошибок.
//
// Возвращаемое значение:
//  Структура:
//   * КлючДанных - ЛюбаяСсылка
//   * ТекстОшибки - Строка	
Функция НоваяОшибка()
	
	НоваяОшибка = Новый Структура;
	НоваяОшибка.Вставить("КлючДанных", Неопределено);
	НоваяОшибка.Вставить("ТекстОшибки", "");
	
	Возврат НоваяОшибка;	
	
КонецФункции

// Возвращает данные объектов учета по электронным документам. Используется в выгрузке для ФНС.
//
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  ТаблицаЗначений - Данные объектов учета электронных документов:
//   * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//   * НомерДоговора - Строка
//   * ДатаДоговора - Дата
//
Функция ДанныеОбъектовУчетаДляВыгрузкиЭДДляФНС(Знач ЭлектронныеДокументы)
	
	ДанныеОбъектовУчета = ИнтеграцияЭДО.ОбъектыУчетаАктуальныхЭлектронныхДокументов(ЭлектронныеДокументы);
	ДанныеОбъектовУчета.Колонки.Добавить("НомерДоговора", Новый ОписаниеТипов("Строка"));
	ДанныеОбъектовУчета.Колонки.Добавить("ДатаДоговора", Новый ОписаниеТипов("Дата"));
	
	ОбъектыУчета = ДанныеОбъектовУчета.ВыгрузитьКолонку("ОбъектУчета");
	ДанныеДокументовОснований = ИнтеграцияЭДО.ПолучитьНомерДатаДоговораДокументов(ОбъектыУчета);
	
	Если ТипЗнч(ДанныеДокументовОснований) = Тип("Соответствие") Тогда
		
		Для каждого ДанныеОбъектаУчета Из ДанныеОбъектовУчета Цикл
			ДанныеДокументаОснования = ДанныеДокументовОснований.Получить(ДанныеОбъектаУчета.ОбъектУчета);
			Если ТипЗнч(ДанныеДокументаОснования) <> Тип("Структура") Тогда
				ДанныеДокументаОснования = Новый Структура;
			КонецЕсли;
			ДанныеДокументаОснования.Свойство("НомерДоговора", ДанныеОбъектаУчета.НомерДоговора);
			ДанныеДокументаОснования.Свойство("ДатаДоговора", ДанныеОбъектаУчета.ДатаДоговора);
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеОбъектовУчета.Индексы.Добавить("ЭлектронныйДокумент");
	
	Возврат ДанныеОбъектовУчета;
	
КонецФункции

// Формирует файл описания выгрузки электронных документов для ФНС по заполненной таблице описи, сохраняет в каталог.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация, по документам которой составлена опись
//  ТЗОписи - См. НоваяТаблицаОписиВыгрузкиЭДДляФНС
//  ИмяФайла - Строка - Адрес, куда нужно сохранить файл
//
// Возвращаемое значение:
//  Булево - Истина, если файл сформирован
//
Функция СформироватьФайлОписанияВыгрузкиЭДДляФНС(Знач Организация, Знач ТЗОписи, Знач ИмяФайла)
	
	Ошибки = Неопределено; // Служебная переменная для хранения списка возникших ошибок
	
	ИмяРеквизитаНаименование = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагентаДляСообщенияПользователю");
	ИмяРеквизитаИНН = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКПП = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ШаблонСтрокиПолучаемыхРеквизитов = "%1, %2, %3";
	ИменаПолучаемыхРеквизитов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСтрокиПолучаемыхРеквизитов, ИмяРеквизитаНаименование, ИмяРеквизитаИНН, ИмяРеквизитаКПП);
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ИменаПолучаемыхРеквизитов);
	
	ПространствоИменСхемы = "Upload2Statements";
	
	Попытка
		
		Файл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ДатаВыгрузки = ТекущаяДатаСеанса();
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "1.03", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ДатаВыгрузки", Формат(ДатаВыгрузки, "ДФ=dd.MM.yyyy"), Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "ВремяВыгрузки", Формат(ДатаВыгрузки, "ДФ=HH:mm:ss"), Истина, Ошибки);
		
		СвОрганизация = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Организация", ПространствоИменСхемы);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрганизация, "Наименование", РеквизитыОрганизации[ИмяРеквизитаНаименование], Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрганизация, "ИНН", РеквизитыОрганизации[ИмяРеквизитаИНН], Истина, Ошибки);
		Если СтрДлина(РеквизитыОрганизации[ИмяРеквизитаИНН]) = 10 Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрганизация, "КПП", РеквизитыОрганизации[ИмяРеквизитаКПП], Истина, Ошибки);
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Организация", СвОрганизация, Истина, Ошибки);
		
		СвКонтрагенты = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Контрагенты", ПространствоИменСхемы);
		ИДКонтрагентов = Новый Соответствие;
		
		Для Каждого СтрокаОписи Из ТЗОписи Цикл
			
			Если ИДКонтрагентов[СтрокаОписи.Контрагент] = Неопределено Тогда
				
				РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОписи.Контрагент, ИменаПолучаемыхРеквизитов);
				ИДКонтрагента = РеквизитыКонтрагента[ИмяРеквизитаИНН] + РеквизитыКонтрагента[ИмяРеквизитаКПП];
				ИДКонтрагентов.Вставить(СтрокаОписи.Контрагент, ИДКонтрагента);
				
				СвКонтрагент = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Контрагенты.Контрагент", ПространствоИменСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвКонтрагент, "Идентификатор", ИДКонтрагента, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвКонтрагент, "Наименование", РеквизитыКонтрагента[ИмяРеквизитаНаименование], Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвКонтрагент, "ИНН", РеквизитыКонтрагента[ИмяРеквизитаИНН], Истина, Ошибки);
				Если СтрДлина(РеквизитыКонтрагента[ИмяРеквизитаИНН]) = 10 Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвКонтрагент, "КПП", РеквизитыКонтрагента[ИмяРеквизитаКПП], Истина, Ошибки);
				КонецЕсли;
				СвКонтрагенты.Контрагент.Добавить(СвКонтрагент);
				
			КонецЕсли;
			
			СвДокумент = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
			
			КодВидаДокументаБРО = КодВидаДокументаБРОПоСвойствамЭДО(СтрокаОписи.ТипРегламента,
				СтрокаОписи.ТипДокументаЭДО, СтрокаОписи.ТипЭлементаРегламента);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "Вид", КодВидаДокументаБРО, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "КНД", СтрокаОписи.КНД, Истина, Ошибки);
			Направление = ?(СтрокаОписи.НаправлениеЭДО = Перечисления.НаправленияЭДО.Входящий, "0", "1");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "Направление", Направление, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "Номер", СтрокаОписи.НомерДокумента, Истина, Ошибки);
			ДатаДок = Формат(СтрокаОписи.ДатаДокумента, "ДФ=dd.MM.yyyy");
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "Дата", ДатаДок, Истина, Ошибки);
			Если ЗначениеЗаполнено(СтрокаОписи.ДатаДокументаОснования)
				И ЗначениеЗаполнено(СтрокаОписи.НомерДокументаОснования) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "НомерДокОсн", СтрокаОписи.НомерДокументаОснования, , Ошибки);
				ДатаДок = Формат(СтрокаОписи.ДатаДокументаОснования, "ДФ=dd.MM.yyyy");
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ДатаДокОсн", ДатаДок, , Ошибки);
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ИдКонтрагента", ИДКонтрагентов[СтрокаОписи.Контрагент], Истина, Ошибки);
			
			СвФайл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.ФайлДок", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаДанных, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаДанных, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "КНД", СтрокаОписи.КНД, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлДок", СвФайл, Истина, Ошибки);
			
			СвФайл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.ФайлЭЦП", ПространствоИменСхемы);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаПодписи, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаПодписи, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлЭЦП", СвФайл, Истина, Ошибки);
			
			Если ЗначениеЗаполнено(СтрокаОписи.ИмяФайлаДанныхПодтверждения) Тогда
				
				СвФайл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.ФайлДокПодтверждения", ПространствоИменСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаДанныхПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаДанныхПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "КНД", СтрокаОписи.КНДПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлДокПодтверждения", СвФайл, , Ошибки);
				
				СвФайл = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Файл.Документ.ФайлЭЦППодтверждения", ПространствоИменСхемы);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаПодписиПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаПодписиПодтверждения, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлЭЦППодтверждения", СвФайл, , Ошибки);
				
			КонецЕсли;
			
			Файл.Документ.Добавить(СвДокумент);
			
		КонецЦикла;
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Файл, "Контрагенты", СвКонтрагенты, Истина, Ошибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(Ошибки) Тогда
			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		РаботаСФайламиБЭД.СохранитьXDTO(Файл, ИмяФайла, Ложь, "windows-1251");
		
		Возврат Истина;
		
	Исключение
		
		ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = НСтр("ru = 'Не удалось создать файл описания выгрузки:'") + Символы.ПС + ТекстСообщения;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Формирование выгрузки ЭД в 1С-Отчетность'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Возвращает типы документов ЭДО, подходящих для выгрузки для предоставления в ФНС.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ТипыДокументовЭДО - Типы документов ЭДО, подходящие для выгрузки в ФНС
//
Функция ТипыДокументовЭДОВыгрузкиДляФНС()

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.СчетФактура);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.АктОРасхождениях);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.АктСверки);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг);
	МассивТипов.Добавить(Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент);
	Возврат МассивТипов;

КонецФункции

// Заполняет опись выгрузки и выгружает файлы в каталог.
// 
// Параметры:
//  ОписьВыгрузки - см. НоваяТаблицаОписиВыгрузкиЭДДляФНС
//  АдресКаталога - Строка - Адрес временного каталога для записи файлов
//  ПакетыДокументовДляВыгрузки - см. НоваяСтруктураПакетовДляВыгрузки
//  ДанныеОбъектовУчета - см. ДанныеОбъектовУчетаДляВыгрузкиЭДДляФНС
//
Процедура ЗаполнитьОписьИВыгрузитьВКаталог(ОписьВыгрузки, АдресКаталога, ПакетыДокументовДляВыгрузки, 
	ДанныеОбъектовУчета)

	МассивНеобработанныхДанных = Новый Массив;
	Для Каждого Элемент Из ПакетыДокументовДляВыгрузки.Формализованные Цикл
		
		Документ = Элемент.ЭлектронныйДокумент;
		ИнформацияОтправителя = ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииОтправителяДляВыгрузкиФНС(Документ);
		ИнформацияПолучателя = ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииПолучателяДляВыгрузкиФНС(Документ);
		
		РезультатПроверкиПодписей = ПроверкаПодписейДокументаВыполнена(Документ, ИнформацияОтправителя, 
			ИнформацияПолучателя);
		Если Не РезультатПроверкиПодписей.Результат Тогда
			ДобавитьДокументВПакетСОшибкой(ПакетыДокументовДляВыгрузки, Документ, РезультатПроверкиПодписей.ТекстОшибки);
			МассивНеобработанныхДанных.Добавить(Элемент);
			Продолжить;
		КонецЕсли;
		
		ЭлементОписи = ОписьВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементОписи, Элемент);
		ЗаполнитьНомерДатаОснованияВЭлементеОписи(ЭлементОписи, ДанныеОбъектовУчета, Документ);
		
		ВыгрузитьФайлыИнформацииОтправителяПолучателя(
			ЭлементОписи,
			АдресКаталога,
			ИнформацияОтправителя,
			ИнформацияПолучателя);
			
	КонецЦикла;
	ПакетыДокументовДляВыгрузки.Формализованные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПакетыДокументовДляВыгрузки.Формализованные, МассивНеобработанныхДанных);
	
КонецПроцедуры

// Выгружает файлы Информации отправителя (основной и подпись) и Информации получателя (если есть, основной и подпись).
// 
// Параметры:
//  ЭлементОписи - СтрокаТаблицыЗначений: См. НоваяТаблицаОписиВыгрузкиЭДДляФНС
//  АдресКаталога - Строка - Адрес каталога
//  ИнформацияОтправителя - См. ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииОтправителяДляВыгрузкиФНС
//  ИнформацияПолучателя - См. ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииПолучателяДляВыгрузкиФНС
//
Процедура ВыгрузитьФайлыИнформацииОтправителяПолучателя(ЭлементОписи, АдресКаталога, 
	ИнформацияОтправителя, ИнформацияПолучателя)
	
	ЭлементОписи.ИмяФайлаДанных = ИнформацияОтправителя.ИмяФайла;
	ЭлементОписи.РазмерФайлаДанных = ИнформацияОтправителя.Размер;
	ЭлементОписи.КНД = ИнформацияОтправителя.КНД;
	
	ДанныеЭД = ИнформацияОтправителя.ДвоичныеДанные;
	ДанныеЭД.Записать(АдресКаталога + ИнформацияОтправителя.ИмяФайла);
		
	МассивСтруктурПодписей = ИнформацияОтправителя.УстановленныеПодписи;	

	СтруктураПодписи = МассивСтруктурПодписей[0];
	ИмяФайлаПодписи = ИнформацияОтправителя.ИмяФайла + "SGN.sgn";
	СтруктураПодписи.Подпись.Записать(АдресКаталога + ИмяФайлаПодписи);
	ЭлементОписи.ИмяФайлаПодписи = ИмяФайлаПодписи;
	ЭлементОписи.РазмерФайлаПодписи = ДанныеЭД.Размер();

	Если ЗначениеЗаполнено(ИнформацияПолучателя.ИмяФайла) Тогда
		
		ЭлементОписи.ИмяФайлаДанныхПодтверждения = ИнформацияПолучателя.ИмяФайла;
		ЭлементОписи.РазмерФайлаДанныхПодтверждения = ИнформацияПолучателя.Размер;
		ЭлементОписи.КНДПодтверждения = ИнформацияПолучателя.КНД;
		
		ДанныеЭД = ИнформацияПолучателя.ДвоичныеДанные;
		ДанныеЭД.Записать(АдресКаталога + ИнформацияПолучателя.ИмяФайла);
		
		МассивСтруктурПодписей = ИнформацияПолучателя.УстановленныеПодписи;
		
		СтруктураПодписи = МассивСтруктурПодписей[0];
		ИмяФайлаПодписиПодтверждения = ИнформацияПолучателя.ИмяФайла + "SGN.sgn";
		СтруктураПодписи.Подпись.Записать(АдресКаталога + ИмяФайлаПодписиПодтверждения);
		ЭлементОписи.ИмяФайлаПодписиПодтверждения = ИмяФайлаПодписиПодтверждения;
		ЭлементОписи.РазмерФайлаПодписиПодтверждения = ДанныеЭД.Размер();
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить номер дата основания в элементе описи по данным объекта учета.
// 
// Параметры:
//  ЭлементОписи - СтрокаТаблицыЗначений - элемент описи:
//   * НомерДокументаОснования - Строка, Неопределено - номер документа основания
//   * ДатаДокументаОснования - Дата, Неопределено - дата документа основания
//  ДанныеОбъектовУчета - ТаблицаЗначений - Данные объектов учета:
//   * НомерДоговора - Строка
//   * ДатаДоговора - Дата
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Процедура ЗаполнитьНомерДатаОснованияВЭлементеОписи(ЭлементОписи, ДанныеОбъектовУчета, ЭлектронныйДокумент)

	ДанныеОбъектаУчета = ДанныеОбъектовУчета.Найти(ЭлектронныйДокумент, "ЭлектронныйДокумент");
	Если ДанныеОбъектаУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеОбъектаУчета.ОбъектУчета) Тогда
		ЭлементОписи.НомерДокументаОснования = ДанныеОбъектаУчета.НомерДоговора;
		ЭлементОписи.ДатаДокументаОснования = ДанныеОбъектаУчета.ДатаДоговора;
	КонецЕсли;
			
КонецПроцедуры

// Возвращает данные файла неформализованного ЭД.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Неопределено, 
//  См. РаботаСФайлами.ДанныеФайла
// 
Функция ДанныеФайлаНеформализованногоЭД(ЭлектронныйДокумент)
	
	ФайлЭлектронногоДокумента = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
	Если Не ЗначениеЗаполнено(ФайлЭлектронногоДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлЭлектронногоДокумента);
	
	Возврат ДанныеФайла; 
	
КонецФункции

// Поместить файлы каталога в архив во временном хранилище.
// 
// Параметры:
//  Файлы - Массив из Файл - Файлы для помещения во временное хранилище
//  АдресКаталога - Строка - Адрес каталога для удаления временных файлов
//  НазваниеАрхива - Строка - Наименование файла архива
//  ДанныеФайловСДвоичнымиДанными - Соответствие Из КлючИЗначение:
//   * Ключ - Строка - ИмяФайла
//   * Значение - ДвоичныеДанные - Двоичные данные файла
//
Процедура ПоместитьФайлыКаталогаВАрхив(Файлы, АдресКаталога, НазваниеАрхива, ДанныеФайловСДвоичнымиДанными)

	СодержимоеКонтейнера = Новый Массив;
	Для Каждого Файл Из Файлы Цикл
		СодержимоеКонтейнера.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	ДвоичныеДанныеКонтейнера = РаботаСФайламиБЭД.СформироватьАрхивФайлов(СодержимоеКонтейнера);
	ДанныеФайловСДвоичнымиДанными.Вставить(НазваниеАрхива, ДвоичныеДанныеКонтейнера);
	
	РаботаСФайламиБЭД.УдалитьВременныеФайлы(АдресКаталога);
	
КонецПроцедуры

// Проверяет подписи электронного документа на возможность выгрузки.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО 
//  ИнформацияОтправителя - см. ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииОтправителяДляВыгрузкиФНС
//  ИнформацияПолучателя - см. ЭлектронныеДокументыЭДО.ДанныеФайлаИнформацииПолучателяДляВыгрузкиФНС
// 
// Возвращаемое значение:
//  Структура - Структура результатов проверки подписей:
//  * Результат - Булево
//  * ТекстОшибки - Строка
//
Функция ПроверкаПодписейДокументаВыполнена(ЭлектронныйДокумент, ИнформацияОтправителя, 
	ИнформацияПолучателя = Неопределено)
	
	Результат = Новый Структура("Результат, ТекстОшибки", Истина, "");
	
	Если НЕ ЕстьПодписиВДанныхФайла(ИнформацияОтправителя) Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выгрузить подпись по документу.'");
		Результат.Результат = Ложь;
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИнформацияПолучателя)
		И ЗначениеЗаполнено(ИнформацияПолучателя.ИмяФайла)
		И НЕ ЕстьПодписиВДанныхФайла(ИнформацияПолучателя) Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выгрузить ответную подпись по документу.'");
		Результат.Результат = Ложь;
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Есть подписи в данных файла.
// 
// Параметры:
//  ДанныеФайла - см. РаботаСФайламиБЭД.ДанныеФайла
// 
// Возвращаемое значение:
//  Булево - Есть подписи в данных файла
//
Функция ЕстьПодписиВДанныхФайла(ДанныеФайла)
	
	Подписи = ДанныеФайла.УстановленныеПодписи;
	Возврат ТипЗнч(Подписи) = Тип("Массив") И Подписи.Количество() > 0;
	
КонецФункции

// Возвращает имя файла контейнера формализованных документов, в соответствии с утвержденным ФНС форматом.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Строка - Имя файла контейнера выгрузки
//
Функция ИмяФайлаКонтейнераВыгрузкиФормализованныхЭДДляФНС(Организация)

	ИмяРеквизитаИНН = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКПП = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИменаПолучаемыхРеквизитов = СтрШаблон("%1, %2", ИмяРеквизитаИНН, ИмяРеквизитаКПП);
	
	ЗнаковВИННЮЛ = 12;
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ИменаПолучаемыхРеквизитов);
	ИНН = СокрЛП(РеквизитыОрганизации[ИмяРеквизитаИНН]);
	ИДОтправителя = ИНН + ?(СтрДлина(ИНН) = ЗнаковВИННЮЛ, "", СокрЛП(РеквизитыОрганизации[ИмяРеквизитаКПП]));
	ИДВыгрузки = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddЧЧммсс");
	
	ИмяФайла = СтрШаблон("EDI_%1_%2.zip", ИДОтправителя, ИДВыгрузки);
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	Возврат ИмяФайла;
	
КонецФункции

// Возвращает имя файла контейнера НЕ формализованных документов
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//  НомерКонтейнера - Строка 
// 
// Возвращаемое значение:
//  Строка - Имя файла контейнера выгрузки
//
Функция ИмяФайлаКонтейнераВыгрузкиНЕФормализованныхЭДДляФНС(Организация, НомерКонтейнера)

	ИмяРеквизитаИНН = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКПП = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИменаПолучаемыхРеквизитов = СтрШаблон("%1, %2", ИмяРеквизитаИНН, ИмяРеквизитаКПП);
	
	ЗнаковВИННЮЛ = 12;
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ИменаПолучаемыхРеквизитов);
	ИНН = СокрЛП(РеквизитыОрганизации[ИмяРеквизитаИНН]);
	ИДОтправителя = ИНН + ?(СтрДлина(ИНН) = ЗнаковВИННЮЛ, "", СокрЛП(РеквизитыОрганизации[ИмяРеквизитаКПП]));
	ИДВыгрузки = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddЧЧммсс");
	
	ИмяФайла = СтрШаблон("NEFORM_%1_%2_%3.zip", НомерКонтейнера, ИДОтправителя, ИДВыгрузки);
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	Возврат ИмяФайла;
	
КонецФункции

// Формирует текст ошибки для не предназначенного для выгрузки электронного документа, добавляет информацию 
// в соответствующий массив документов пакета для выгрузки.
// 
// Параметры:
//  ДанныеДокумента - см. НоваяСтруктураДанныеДокументаДляВыгрузки
//  ПакетыДокументовДляВыгрузки - см. НоваяСтруктураПакетовДляВыгрузки
//
Процедура ОбработатьНеПредназначенныйДляВыгрузкиЭД(ДанныеДокумента, ПакетыДокументовДляВыгрузки)

	ШаблонОшибки = НСтр("ru = 'Тип документа ""%1"" не предназначен для предоставления в ФНС.'");
	ТекстОшибки = СтрШаблон(ШаблонОшибки, ДанныеДокумента.ТипДокумента);
	ДобавитьДокументВПакетСОшибкой(ПакетыДокументовДляВыгрузки, ДанныеДокумента.ЭлектронныйДокумент, ТекстОшибки);
	
КонецПроцедуры

// Возвращает информацию о возможности печати файлов по его расширению, добавляет информацию в соответствующий 
// массив документов пакета для выгрузки.
// 
// Параметры:
//  ДанныеДокумента - см. НоваяСтруктураДанныеДокументаДляВыгрузки
//  ДанныеФайла - см. РаботаСФайлами.ДанныеФайла
//  ПакетыДокументовДляВыгрузки - см. НоваяСтруктураПакетовДляВыгрузки
//  
// Возвращаемое значение:
//  Булево - Файл подлежит печати
//
Функция ФайлПодлежитПечати(ДанныеДокумента, ДанныеФайла, ПакетыДокументовДляВыгрузки)
	
	Если Не РаботаСФайламиБЭД.ФайлПодлежитПечати(ДанныеФайла.Расширение) Тогда
		ТекстОшибки = НСтр("ru = 'Основной файл документа не является печатным.'");
		ДобавитьДокументВПакетСОшибкой(ПакетыДокументовДляВыгрузки, ДанныеДокумента.ЭлектронныйДокумент, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Добавляет в пакет необработанных документов документ с ошибкой.
// 
// Параметры:
//  ПакетыДокументовДляВыгрузки - См. НоваяСтруктураПакетовДляВыгрузки
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  					- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ТекстОшибки - Строка
Процедура ДобавитьДокументВПакетСОшибкой(ПакетыДокументовДляВыгрузки, ЭлектронныйДокумент, ТекстОшибки)
	
	ДокументСОшибкой = НоваяСтруктураНеобработанныеДокументы();
	ДокументСОшибкой.ЭлектронныйДокумент = ЭлектронныйДокумент;
	ДокументСОшибкой.ТекстОшибки = ТекстОшибки;
	ПакетыДокументовДляВыгрузки.Необработанные.Добавить(ДокументСОшибкой);
	
КонецПроцедуры

// Добавляет ошибку с ключом данных в список ошибок обработки.
// 
// Параметры:
//  Ошибки - Массив Из См. НоваяОшибка
//  КлючДанных - ЛюбаяСсылка
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуОбработки(Ошибки, КлючДанных, ТекстОшибки)
	
	Ошибка = НоваяОшибка();
	Ошибка.КлючДанных = КлючДанных;
	Ошибка.ТекстОшибки = ТекстОшибки;
	Ошибки.Добавить(Ошибка);
	
КонецПроцедуры

#КонецОбласти

// Возвращает код вида документа по свойствам ЭДО
// 
// Параметры:
// 	ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 	ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// Возвращаемое значение:
// 	- Строка
// 	- Неопределено
//
Функция КодВидаДокументаБРОПоСвойствамЭДО(ТипРегламента, ТипДокумента, ТипЭлементаРегламента)
	
	КодВидДокумента = Неопределено;
	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный Тогда
			КодВидДокумента = "01";
		Иначе
			КодВидДокумента = "07";
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот Тогда
		Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			КодВидДокумента = "02";
		Иначе
			КодВидДокумента = "06";
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда
		Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			КодВидДокумента = "03";
		Иначе
			КодВидДокумента = "05";
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный Тогда
			КодВидДокумента = "04";
		Иначе
			КодВидДокумента = "08";
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости Тогда
		
		КодВидДокумента = "08";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав Тогда
		
		КодВидДокумента = "07";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктОРасхождениях Тогда
		
		КодВидДокумента = "09";
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктСверкиВзаиморасчетов Тогда
		Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			КодВидДокумента = "10";
		Иначе
			КодВидДокумента = "11";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.АктПриемкиСтроительныхРаботУслуг Тогда
		Если ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
			КодВидДокумента = "12";
		Иначе
			КодВидДокумента = "13";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорнойДокумент Тогда
		КодВидДокумента = "14";
	КонецЕсли;
	
	Возврат КодВидДокумента;
	
КонецФункции

#КонецОбласти