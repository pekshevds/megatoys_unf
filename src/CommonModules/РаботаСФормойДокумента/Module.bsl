
#Область ПрограммныйИнтерфейс

Функция ПредставлениеДокументаОснования(ДокОснование) Экспорт
	
	// для пустых ссылок возвращаем неопределено
	Если НЕ ЗначениеЗаполнено(ДокОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.СсылкаСуществует(ДокОснование) Тогда
		Возврат Строка(ДокОснование);
	Иначе
		Возврат "НетОбъекта";
	КонецЕсли;
	
КонецФункции

// Настроить группу ЦеныИВалюта.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, в которой настраивается группа ЦеныИВалюта.
Процедура НастроитьГруппуЦеныИВалюты(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина = Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина - 2;

		Если Форма.Элементы.Найти("ВидОперации") = Неопределено Тогда
			Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина = Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина - 2;
		КонецЕсли;

	КонецЕсли;

	Если (ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныеКарты") <> Истина И Форма.Элементы.Найти(
		"СчитатьДисконтнуюКарту") <> Неопределено) Или (Форма.Элементы.Найти("СчитатьДисконтнуюКарту") <> Неопределено
		И Форма.Элементы.СчитатьДисконтнуюКарту.Видимость = Ложь) Тогда

		Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина = Форма.Элементы.ЦеныИВалюта.МаксимальнаяШирина + 4;

	КонецЕсли;

КонецПроцедуры

// Настраивает элементы группы Грузоперевозки переданной формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой настраивается группа Грузоперевозки.
//	Организация - СправочникСсылка.Организации
//	Контрагент - СправочникСсылка.Контрагенты
Процедура НастроитьГруппуГрузоперевозки(Форма, Знач Организация, Знач Контрагент) Экспорт
	
	Элементы = Форма.Элементы;
	
	ГрузоотправительОнЖе = Форма.ГрузоотправительОнЖе;
	ГрузополучательОнЖе = Форма.ГрузополучательОнЖе;
	
	СтруктураЗаголовков = Новый Структура("Организация, Контрагент");
	ЗаполнитьСтруктуруЗаголовковГрузоперевозки(СтруктураЗаголовков, Организация, Контрагент);
			
	Элементы.Грузоотправитель.Видимость = НЕ Форма.ГрузоотправительОнЖе;
	Элементы.ГрузоотправительОрганизация.Заголовок = СтруктураЗаголовков.Организация;	
	Элементы.ГрузоотправительОрганизация.Видимость = Форма.ГрузоотправительОнЖе;		
	
	Элементы.Грузополучатель.Видимость = НЕ Форма.ГрузополучательОнЖе;
	Элементы.ГрузополучательКонтрагент.Заголовок = СтруктураЗаголовков.Контрагент;
	Элементы.ГрузополучательКонтрагент.Видимость = Форма.ГрузополучательОнЖе;
	
КонецПроцедуры

// Настраивает видимость группы с информацией о новых реквизитах
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - настраиваемая форма
//  ГруппаИнформации - Строка - имя группы, видимость которой настраивается
//  ИмяНастройки - Строка - название настройки
//  ИмяКлючаОбъекта - Строка - указывается, когда ключ объекта не формируется из имени формы
Процедура НастроитьВидимостьГруппыИнформации(Форма, ГруппаИнформации, ИмяНастройки, ИмяКлючаОбъекта = "") Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ПустаяСтрока(ИмяКлючаОбъекта) Тогда
		ИмяКлючаОбъекта = Форма.ИмяФормы;
	КонецЕсли;
	
	ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяНастройки);
										
	Если ЗначениеНастройки = Неопределено Тогда
		ПоказыватьИнформациюПоНовойСхемеРеквизитовПечати = Истина;
	Иначе
		ПоказыватьИнформациюПоНовойСхемеРеквизитовПечати = ЗначениеНастройки;
	КонецЕсли;
	
	Элементы[ГруппаИнформации].Видимость = ПоказыватьИнформациюПоНовойСхемеРеквизитовПечати;
	
КонецПроцедуры

// Сохраняет настройку отображения группы с информацией о новых реквизитах
// Параметры:
//  ИмяФормы - Строка - Имя формы для формирования ключа объекта
//  ИмяНастройки - Строка - название настройки
//  ЗначениеНастройки - Произвольный - сохраняемое значение настройки
//  ИмяКлючаОбъекта - Строка - указывается, когда ключ объекта не формируется из имени формы
Процедура СохранитьВидимостьГруппыИнформации(ИмяФормы, ИмяНастройки, ЗначениеНастройки, ИмяКлючаОбъекта = "") Экспорт
	
	Если ПустаяСтрока(ИмяКлючаОбъекта) Тогда
		ИмяКлючаОбъекта = ИмяФормы;
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта, ИмяНастройки, ЗначениеНастройки);
	
КонецПроцедуры

// Устарела. Следует использовать ОтчетыУНФ.ПолучитьПереопределенныйКомпоновщикНастроек
// или ОтчетыУНФВызовСервера.ПолучитьПереопределенныйКомпоновщикНастроек.
//
Функция ПолучитьКомпоновщикНастроекСервер(СвойстваОтчета, ПараметрыИОтборы = Неопределено) Экспорт
	
	Если ПараметрыИОтборы = Неопределено Тогда
		ПараметрыИОтборы = Новый Массив;
	КонецЕсли;
	
	Возврат ОтчетыУНФ.ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РеквизитыДокументаОснования(ДокОснование) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокОснование, "Номер,Дата,НомерВходящегоДокумента,ДатаВходящегоДокумента");

КонецФункции

Процедура УдалитьНедоступныеВидыОперацийДокументов(Операции) Экспорт
	
	//Комиссия
	Если НЕ ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента);
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
	КонецЕсли;
	//Переработка
	Если НЕ ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку);
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки);
	КонецЕсли;
	//ОтветХранение
	Если НЕ ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветХранение") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветХранение);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветХранения);
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ПередачаЗапасовНаОтветХранение") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветХранения);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение);
	КонецЕсли;
	//Корректировки
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийСчетФактура.Корректировка);
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиПоступлений") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка);
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций") И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиПоступлений") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	КонецЕсли;	
	
	//Работы
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы") Тогда
		УдалитьОперацию(Операции, Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОперацию(Операции, ЗначениеУдаления)
	
	Если ТипЗнч(Операции) = Тип("СписокЗначений") Тогда
		СтрокаДляУдаления = Операции.НайтиПоЗначению(ЗначениеУдаления);
		Если СтрокаДляУдаления<>Неопределено Тогда
			Операции.Удалить(СтрокаДляУдаления);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Операции) = Тип("ДеревоЗначений") Тогда
		НайтиУдалитьВДереве(Операции, ЗначениеУдаления);
	КонецЕсли;

КонецПроцедуры

Процедура НайтиУдалитьВДереве(Операции, ЗначениеУдаления)
	
	Для Каждого Док Из Операции.Строки Цикл
		
		ПодчиненныеОперации = док.Строки;
		Для Каждого операция Из ПодчиненныеОперации Цикл
			Если операция.ВидОперации = ЗначениеУдаления Тогда
				ПодчиненныеОперации.Удалить(операция);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Док Из Операции.Строки Цикл
		Если Док.Строки.Количество()=0 Тогда
			Операции.Строки.Удалить(Док);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаВариантаОтчета(ИмяОтчета, КлючВарианта) Экспорт
	
	Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Отчет."+ИмяОтчета);
	Возврат ВариантыОтчетов.ВариантОтчета(Отчет, КлючВарианта);
	
КонецФункции

Процедура ЗаполнитьСтруктуруЗаголовковГрузоперевозки(Заголовки, Организация, Контрагент)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Заголовки.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование");
	Иначе
		Заголовки.Организация = НСтр("ru='<организация не выбрана>'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Заголовки.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Наименование");
	Иначе
		Заголовки.Контрагент = НСтр("ru='<покупатель не выбран>'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССериямиНоменклатуры

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища
Функция ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресЗапасовВХранилище, КлючСвязи, ПараметрыИменаПолей=Неопределено) Экспорт
	
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилища(Объект, АдресЗапасовВХранилище, КлючСвязи, ПараметрыИменаПолей);
	
КонецФункции // ПолучитьСерииНоменклатурыИзХранилища()

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилищаДляПоляВвода
Функция ПолучитьСерииНоменклатурыИзХранилищаДляПоляВвода(Объект, АдресЗапасовВХранилище) Экспорт
	
	Возврат СерииНоменклатурыУНФ.ПолучитьСерииНоменклатурыИзХранилищаДляПоляВвода(Объект, АдресЗапасовВХранилище);
	
КонецФункции // ПолучитьСерииНоменклатурыИзХранилища()

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФ.ПолучитьСерияИзХранилища
Функция ПолучитьСерияИзХранилища(Объект, АдресЗапасовВХранилище) Экспорт
	
	СерииНоменклатурыУНФ.ПолучитьСерияИзХранилища(Объект, АдресЗапасовВХранилище);
	
КонецФункции // ПолучитьСерииНоменклатурыИзХранилища()

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры
Функция ПараметрыПодбораСерийНоменклатуры(ДокОбъект, УИДФормы, ИДСтроки, РежимПодбора = Неопределено, ИмяТЧ="Запасы", ИмяТЧСерийНоменклатуры="СерииНоменклатуры", ИмяПоляКлючСвязи = "КлючСвязи",
	ЭтоОприходование = Ложь) Экспорт
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатуры(ДокОбъект, УИДФормы, ИДСтроки, РежимПодбора, ИмяТЧ, ИмяТЧСерийНоменклатуры, ИмяПоляКлючСвязи, ЭтоОприходование);
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФ.ПодготовитьПараметрыСерийНоменклатуры
Функция ПодготовитьПараметрыСерийНоменклатуры(ДокОбъект, ТекСтрокаДанные, УИДФормы, ИмяТЧ = "Запасы", ИмяТЧСерийНоменклатуры="СерииНоменклатуры", ИмяПоляКлючСвязи = "КлючСвязи",
	ЭтоОприходование = Ложь) Экспорт
	
	Возврат СерииНоменклатурыУНФ.ПодготовитьПараметрыСерийНоменклатуры(ДокОбъект, ТекСтрокаДанные, УИДФормы, ИмяТЧ, ИмяТЧСерийНоменклатуры, ИмяПоляКлючСвязи, ЭтоОприходование);
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатурыВПолеВвода
Функция ПараметрыПодбораСерийНоменклатурыВПолеВвода(ДокОбъект, УИДФормы, РежимПодбора = Неопределено) Экспорт
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатурыВПолеВвода(ДокОбъект, УИДФормы, РежимПодбора);
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатурыДляРемонтов
Функция ПараметрыПодбораСерийНоменклатурыДляРемонтов(ДокОбъект, УИДФормы, РежимПодбора = Неопределено) Экспорт
	
	Возврат СерииНоменклатурыУНФ.ПараметрыПодбораСерийНоменклатурыДляРемонтов(ДокОбъект, УИДФормы, РежимПодбора);
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФ.ПолучитьДанныеНоменклатураПриИзменении
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные) Экспорт
	
	Возврат СерииНоменклатурыУНФ.ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
КонецФункции

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФ.РассчитатьСуммуВСтрокеТабличнойЧасти
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС) Экспорт
	
	СерииНоменклатурыУНФ.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Устарела. Будет удалена в следующей версии программы. 
// См. СерииНоменклатурыУНФВызовСервера.ЗаполнитьКлючиСвязи
Процедура ЗаполнитьКлючиСвязи(Объект, ИмяТЧ, ИмяПоляКлючСвязи = "КлючСвязи") Экспорт
	
	СерииНоменклатурыУНФ.ЗаполнитьКлючиСвязи(Объект, ИмяТЧ, ИмяПоляКлючСвязи);
	
КонецПроцедуры // ЗаполнитьКлючиСвязиВТабличнойЧастиТовары()

#КонецОбласти