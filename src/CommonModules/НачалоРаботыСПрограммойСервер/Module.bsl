#Область ПрограммныйИнтерфейс

// Добавляет необходимые параметры работы клиента при запуске.
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Параметры.Вставить("ПоказатьОкноНачалоРаботыСПрограммой", ПоказатьОкноНачалоРаботыСПрограммой());
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПередЗапускомПрограммы
Процедура ПередЗапускомПрограммы() Экспорт
	
	ПоказатьОкноНачалоРаботыСПрограммой = ПоказатьОкноНачалоРаботыСПрограммой();
	Если Не ПоказатьОкноНачалоРаботыСПрограммой Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИнтерфейсНачалаРаботы();
	
КонецПроцедуры

// Регистрирует обработчики поставляемых данных.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - таблица обработчиков.
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = "Константа.ДатаПервогоВходаВСистему";
	Обработчик.КодОбработчика = 01;
	Обработчик.Обработчик = НачалоРаботыСПрограммойСервер;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = "Константа.ДатаПервогоВходаВСистему" Тогда
		
		Загружать = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
// @skip-check module-empty-method
//
// Параметры:
//   Дескриптор   - ОбъектXDTO - Дескриптор.
//   ПутьКФайлу   - Строка - Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
// @skip-check module-empty-method
// 
// Параметры:
//  Дескриптор - ОбъектXDTO - дескриптор
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт 
	
КонецПроцедуры

// Установить стандартный интерфейс.
// 
// Параметры:
//  ИмяПользователя - Неопределено, Строка - Имя пользователя
Процедура УстановитьСтандартныйИнтерфейс(ИмяПользователя = Неопределено) Экспорт
	
	Если ИмяПользователя = Неопределено Тогда
		
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
		
		УстановитьПривилегированныйРежим(Истина);
		ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(ТекущийПользователь.ИдентификаторПользователяИБ);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПрочитанныеСвойства <> Неопределено Тогда
			
			ИмяПользователя = ПрочитанныеСвойства.Имя;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (МобильноеПриложениеВызовСервера.ЕстьОграничениеМобильногоУНФ()
		И НЕ МобильноеПриложениеВызовСервера.ЕстьПробныйПериод())
		ИЛИ (МобильноеПриложениеВызовСервера.ЕстьОграничениеМобильногоУНФ20()
		И НЕ МобильноеПриложениеВызовСервера.ЕстьПробныйПериод()) Тогда
		РабочийСтолУНФ.УстановитьСоставФорм(, ИмяПользователя);
	Иначе
		
		Лево = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		Лево.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
		Лево.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
		
		НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		НастройкиСостава.Лево.Добавить(Лево);
		
		Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
		Настройки.УстановитьСостав(НастройкиСостава);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки, ,
			ИмяПользователя);
		
		СоставФорм = Новый СоставФормНачальнойСтраницы;
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.ПульсБизнеса.Форма.ПульсБизнеса");
		СоставФорм.ПраваяКолонка.Добавить("ОбщаяФорма.НовостиИИнформационныйЦентр");
		СоставФорм.ПраваяКолонка.Добавить("Обработка.ТекущиеДела.Форма");

		НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
		НачальнаяСтраница.УстановитьСоставФорм(СоставФорм);

		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НачальнаяСтраница, ,
			ИмяПользователя);
	КонецЕсли;
	
КонецПроцедуры

// Установить интерфейс начала работы.
// 
// Параметры:
//  ИмяФормы - Строка - Имя формы
Процедура УстановитьИнтерфейсНачалаРаботы(ИмяФормы = "") Экспорт
	
	Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	Настройки.УстановитьСостав(НастройкиСостава);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки);
	
	Если ПустаяСтрока(ИмяФормы) Тогда
		
		ИмяФормы = "Обработка.НачалоРаботыСПрограммой.Форма";
		
	КонецЕсли;
	
	НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить(ИмяФормы);
	НачальнаяСтраница.УстановитьСоставФорм(СоставФорм);
	
	СохранитьНастройкиНачальнойСтраницы(НачальнаяСтраница);
	
КонецПроцедуры

// Обработка закрытия формы начала работы.
// 
// Параметры:
//  РезультатФормыНачалаРаботы - Структура
//  ПараметрыНачалаРаботы  - Структура
//  ОбработкаЗавершена - Булево
Процедура ОбработкаЗакрытияФормыНачалаРаботы(РезультатФормыНачалаРаботы, ПараметрыНачалаРаботы, ОбработкаЗавершена) Экспорт

	ОбновитьПользователя(РезультатФормыНачалаРаботы, ПараметрыНачалаРаботы);

	ВыполнитьЗаполнениеПоВидуБизнеса(РезультатФормыНачалаРаботы);

	ОбновитьЗаписатьОрганизации(РезультатФормыНачалаРаботы);

	ЗафиксироватьОкончаниеПервогоВходаВПрограмму(ПараметрыНачалаРаботы);

	ОбработкаЗавершена = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоказатьОкноНачалоРаботыСПрограммой()
	
	ПоказатьОкноНачалоРаботыСПрограммой = Ложь;
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат ПоказатьОкноНачалоРаботыСПрограммой;
	КонецЕсли;
	
	ПоказатьОкноНачалоРаботыСПрограммой = Не ЗначениеЗаполнено(Константы.ДатаПервогоВходаВСистему.Получить());
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ПоказатьОкноНачалоРаботыСПрограммой = (ПоказатьОкноНачалоРаботыСПрограммой
			И Пользователи.ЭтоПолноправныйПользователь());
	КонецЕсли;
	
	Возврат ПоказатьОкноНачалоРаботыСПрограммой;
	
КонецФункции

Процедура СохранитьНастройкиНачальнойСтраницы(НачальнаяСтраница)
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НачальнаяСтраница);
	
КонецПроцедуры

Процедура ОбновитьПользователя(ЗначенияРеквизитов, ПараметрыНачалаРаботы)

	Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.Пользователь) Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();

	Попытка

		Если ПараметрыНачалаРаботы.РазделениеВключено Тогда

			ПользовательОбъект = ЗначенияРеквизитов.Пользователь.ПолучитьОбъект();
			ПользовательОбъект.Заблокировать();

		Иначе

			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
		
			// Доступно только в локальном режиме
			ПользовательОбъект.Наименование = ЗначенияРеквизитов.ПользовательИмя;

			ОписаниеПользователяИБ = Новый Структура;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("Имя", ЗначенияРеквизитов.ПользовательИмя);
			ОписаниеПользователяИБ.Вставить("ПолноеИмя", ЗначенияРеквизитов.ПользовательИмя);
			ОписаниеПользователяИБ.Вставить("Пароль", ЗначенияРеквизитов.ПользовательПароль);
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Истина);
			ОписаниеПользователяИБ.Вставить("ПарольУстановлен", Истина);
			ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора", Истина);

			ДоступныеРоли = Новый Массив;
			ДоступныеРоли.Добавить(Метаданные.Роли.АдминистраторСистемы.Имя);
			ДоступныеРоли.Добавить(Метаданные.Роли.ПолныеПрава.Имя);

			ОписаниеПользователяИБ.Вставить("Роли", ДоступныеРоли);

			ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			ПользовательОбъект.ДополнительныеСвойства.Вставить("СозданиеАдминистратора", НСтр(
				"ru = 'Создание первого администратора.'"));

			ПользовательОбъект.Служебный = Ложь;

		КонецЕсли;

		Если Не ПустаяСтрока(ЗначенияРеквизитов.ПользовательТелефон) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПользовательОбъект,
				ЗначенияРеквизитов.ПользовательТелефон, ВидКИ);
		КонецЕсли;

		Если Не ПустаяСтрока(ЗначенияРеквизитов.ПользовательEmail) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПользовательОбъект,
				ЗначенияРеквизитов.ПользовательEmail, ВидКИ);
		КонецЕсли;

		Если Не ПустаяСтрока(ЗначенияРеквизитов.ПользовательСайт) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.СайтПользователя;
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПользовательОбъект,
				ЗначенияРеквизитов.ПользовательСайт, ВидКИ);
		КонецЕсли;

		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПользовательОбъект, Ложь, Истина);

		Если ЗначенияРеквизитов.Свойство("РазрешитьИнтерактивноеОткрытие") Тогда
			Пользователи.УстановитьПравоОткрытияВнешнихОтчетовИОбработок(
				ЗначенияРеквизитов.РазрешитьИнтерактивноеОткрытие);
		КонецЕсли;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ВыполнитьЗаполнениеПоВидуБизнеса(ЗначенияРеквизитов)
	
	Если НЕ ЗначенияРеквизитов.Свойство("ВидБизнесаОрганизации")
		ИЛИ ТипЗнч(ЗначенияРеквизитов.ВидБизнесаОрганизации) <> Тип("СписокЗначений")
		ИЛИ ЗначенияРеквизитов.ВидБизнесаОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ВсеИдентификаторы = "";
		Для каждого ВидБизнеса Из ЗначенияРеквизитов.ВидБизнесаОрганизации Цикл
			
			ИдентификаторВидаБизнеса = ИдентификаторВидаБизнеса(ВидБизнеса.Значение);
			Если ИдентификаторВидаБизнеса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ВсеИдентификаторы <> "" Тогда
				ВсеИдентификаторы = ВсеИдентификаторы + ";";
			КонецЕсли;
			ВсеИдентификаторы = ВсеИдентификаторы + ИдентификаторВидаБизнеса;
			
			ЗаполнитьНастройкиПоВидуБизнеса(ВидБизнеса.Значение);
			
		КонецЦикла;
		
		Если ВсеИдентификаторы <> "" Тогда
			Константы.ВидБизнесаОрганизации.Установить(ВсеИдентификаторы);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		// Не вызывать исключение, чтобы не нагружать пользователя при старте.
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьЗаписатьОрганизации(ЗначенияРеквизитов)
	
	// ЗначенияРеквизитов.Организации.Выгрузить() - в толстом приводит к ошибке
	ТаблицаОрганизаций = Обработки.НачалоРаботыСПрограммой.Создать().Организации.Выгрузить();
	КоличествоОрганизаций = ЗначенияРеквизитов.Организации.Количество();
	Для Счетчик = 0 По КоличествоОрганизаций - 1 Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОрганизаций.Добавить(), ЗначенияРеквизитов.Организации[Счетчик]);
	КонецЦикла;
	
	Если КоличествоОрганизаций > 1 Тогда
		Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
		Константы.НеИспользоватьНесколькоОрганизаций.Установить(Ложь);
	КонецЕсли;
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
		НачатьТранзакцию();
		Попытка
			ОрганизацияОбъект = СтрокаОрганизации.Ссылка.ПолучитьОбъект();
			Если ОрганизацияОбъект = Неопределено Тогда
				ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
				ОрганизацияОбъект.УстановитьСсылкуНового(СтрокаОрганизации.Ссылка);
				ОрганизацияОбъект.ПроизводственныйКалендарь = ГрафикиРаботыУНФ.КалендарьПоПроизводственномуКалендарюРФ();
			КонецЕсли;
			ОрганизацияОбъект.Заблокировать();
			
			Если СтрокаОрганизации.СистемаНалогообложения = 0 Тогда
				ОрганизацияОбъект.ВидСтавкиНДСПоУмолчанию = Перечисления.ВидыСтавокНДС.Общая;
			Иначе
				ОрганизацияОбъект.ВидСтавкиНДСПоУмолчанию =  Перечисления.ВидыСтавокНДС.БезНДС;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, СтрокаОрганизации);
			Если ОрганизацияОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ОрганизацияОбъект.ИспользуетсяОтчетность = (СтрокаОрганизации.ЕстьУСН Или СтрокаОрганизации.ЕстьАУСН);
				ФизическоеЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
				ФизическоеЛицо.Наименование = СтрокаОрганизации.Фамилия + ?(ПустаяСтрока(СтрокаОрганизации.Имя), "",
					" " + СтрокаОрганизации.Имя) + ?(ПустаяСтрока(СтрокаОрганизации.Отчество), "", " "
					+ СтрокаОрганизации.Отчество);
				ФизическоеЛицо.Записать();
				ОрганизацияОбъект.ФизическоеЛицо = ФизическоеЛицо.Ссылка;
				
				МенеджерЗаписиФизЛица = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписиФизЛица, СтрокаОрганизации, "Фамилия, Имя, Отчество");
				МенеджерЗаписиФизЛица.Период = '19800101';
				МенеджерЗаписиФизЛица.ФизическоеЛицо = ФизическоеЛицо.Ссылка;
				МенеджерЗаписиФизЛица.Записать(Истина);
				
				МенеджерЗаписиДокументыФизЛиц = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
				МенеджерЗаписиДокументыФизЛиц.Период = '19800101';
				МенеджерЗаписиДокументыФизЛиц.ФизЛицо = ФизическоеЛицо.Ссылка;
				МенеджерЗаписиДокументыФизЛиц.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
				МенеджерЗаписиДокументыФизЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
				МенеджерЗаписиДокументыФизЛиц.Записать(Истина);
				
			КонецЕсли;
				
			МенеджерЗаписи = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = '20000101';
			МенеджерЗаписи.Организация = СтрокаОрганизации.Ссылка;
			МенеджерЗаписи.ПлательщикЕНВД = СтрокаОрганизации.ЕстьЕНВД;
			МенеджерЗаписи.ПрименяетсяПатент = СтрокаОрганизации.ЕстьПатент;
				
			Если СтрокаОрганизации.СистемаНалогообложения = 0 Тогда
				МенеджерЗаписи.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
				МенеджерЗаписи.ПлательщикУСН = Ложь;
				
			ИначеЕсли СтрокаОрганизации.СистемаНалогообложения = 1 Тогда
				
				МенеджерЗаписи.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
				МенеджерЗаписи.ПлательщикУСН = Истина;
				МенеджерЗаписи.ОбъектНалогообложения = СтрокаОрганизации.ВидыОбъектовНалогообложения;
				МенеджерЗаписи.СтавкаНалога = СтрокаОрганизации.СтавкаНалога;
				
			ИначеЕсли СтрокаОрганизации.СистемаНалогообложения = 2 Или СтрокаОрганизации.СистемаНалогообложения = 3 Тогда
				МенеджерЗаписи.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок;
				МенеджерЗаписи.ПлательщикУСН = Ложь;  
			ИначеЕсли СтрокаОрганизации.СистемаНалогообложения = 4 Тогда	
				МенеджерЗаписи.СистемаНалогообложения = Перечисления.СистемыНалогообложения.АУСН;
				МенеджерЗаписи.ПлательщикУСН = Ложь;  
				МенеджерЗаписи.ПрименяетсяАУСН = Истина;
				МенеджерЗаписи.ПрименяетсяПатент = Ложь;
				МенеджерЗаписи.ОбъектНалогообложения = СтрокаОрганизации.ВидыОбъектовНалогообложения;
				МенеджерЗаписи.СтавкаНалога = СтрокаОрганизации.СтавкаНалога		
				
			КонецЕсли;
				
			ОрганизацияОбъект.Записать();
			МенеджерЗаписи.Записать(Истина);  
			
			Если СтрокаОрганизации.СистемаНалогообложения = 4 Тогда
				МенеджерЗаписи = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносовУНФ.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = НачалоМесяца(ТекущаяДатаСеанса());
				МенеджерЗаписи.ГоловнаяОрганизация = СтрокаОрганизации.Ссылка;
				МенеджерЗаписи.ВидТарифа = Справочники.ВидыТарифовСтраховыхВзносовУНФ.АУСН;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Организации,, ТекстОшибки);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяСобытияЖР()
	
	Возврат НСтр("ru='Стартовое окно'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Процедура ЗафиксироватьОкончаниеПервогоВходаВПрограмму(ПараметрыНачалаРаботы)
	
	Константы.ДатаПервогоВходаВСистему.Установить(ТекущаяДатаСеанса());
	Константы.ВерсияНачалаРаботыСПрограммой.Установить(ПараметрыНачалаРаботы.ВерсияДанныхОсновнойКонфигурации);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПоВидуБизнеса(ВидБизнеса)
	
	Если НЕ ЗначениеЗаполнено(ВидБизнеса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидБизнеса = "ОптоваяТорговля" Тогда
		
		Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Установить(Истина);
		Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки.Установить(Истина);
		Константы.ФункциональнаяОпцияИспользоватьСверкиВзаиморасчетов.Установить(Истина);
		
	ИначеЕсли ВидБизнеса = "РозничнаяТорговля" Тогда
		
		Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Установить(Истина);
		Константы.ФункциональнаяОпцияИспользоватьПечатьЭтикетокИЦенников.Установить(Истина);
		Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Установить(Истина);
		Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки.Установить(Истина);
		Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Установить(Истина);
		Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Установить(Истина);
		ДисконтныеКартыУНФСервер.ПроверитьИСоздатьУсловиеПоДисконтнойКарте();
		
	ИначеЕсли ВидБизнеса = "РаботыУслуги" Тогда
		
		Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы.Установить(Истина);
		
	ИначеЕсли ВидБизнеса = "ИнтернетМагазин" Тогда
		
		Константы.ИспользоватьИнтеграциюСИнтернетМагазином.Установить(Истина);
		
	ИначеЕсли ВидБизнеса = "Производство" Тогда
		
		Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Установить(Истина);
		Константы.ФункциональнаяОпцияИспользоватьТехоперации.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторВидаБизнеса(ВыбранныйВидБизнеса)
	
	ВидыБизнеса = ВидыБизнеса();
	
	Для каждого ВидБизнеса Из ВидыБизнеса Цикл
		Если ВидБизнеса.Код = ВыбранныйВидБизнеса Тогда
			Возврат ВидБизнеса.Идентификатор;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВидыБизнеса()
	
	ВидыБизнеса = Новый Массив;
	
	ВидБизнесаОписание = Новый Структура;
	ВидБизнесаОписание.Вставить("Представление", НСтр("ru='Оптовая торговля'"));
	ВидБизнесаОписание.Вставить("Код",           "ОптоваяТорговля");
	ВидБизнесаОписание.Вставить("Идентификатор", "72c52f8c-ef35-46ec-9aa1-bf666b4dc336");
	ВидыБизнеса.Добавить(ВидБизнесаОписание);
	
	ВидБизнесаОписание = Новый Структура;
	ВидБизнесаОписание.Вставить("Представление", НСтр("ru='Розница'"));
	ВидБизнесаОписание.Вставить("Код",           "РозничнаяТорговля");
	ВидБизнесаОписание.Вставить("Идентификатор", "4d9eaf34-2c37-43d3-9fa0-d2611144a805");
	ВидыБизнеса.Добавить(ВидБизнесаОписание);
	
	ВидБизнесаОписание = Новый Структура;
	ВидБизнесаОписание.Вставить("Представление", НСтр("ru='Работы и услуги'"));
	ВидБизнесаОписание.Вставить("Код",           "РаботыУслуги");
	ВидБизнесаОписание.Вставить("Идентификатор", "fde119b3-1c23-4415-83d0-e19e527a2c26");
	ВидыБизнеса.Добавить(ВидБизнесаОписание);
	
	ВидБизнесаОписание = Новый Структура;
	ВидБизнесаОписание.Вставить("Представление", НСтр("ru='Интернет-магазин'"));
	ВидБизнесаОписание.Вставить("Код",           "ИнтернетМагазин");
	ВидБизнесаОписание.Вставить("Идентификатор", "13df7e69-33d5-4eba-b300-691b2d12ebf9");
	ВидыБизнеса.Добавить(ВидБизнесаОписание);
	
	ВидБизнесаОписание = Новый Структура;
	ВидБизнесаОписание.Вставить("Представление", НСтр("ru='Производство'"));
	ВидБизнесаОписание.Вставить("Код",           "Производство");
	ВидБизнесаОписание.Вставить("Идентификатор", "123040c0-72e1-4eeb-b4c5-fc7d9ecb1e0a");
	ВидыБизнеса.Добавить(ВидБизнесаОписание);
	
	Возврат ВидыБизнеса;
	
КонецФункции

#КонецОбласти
