#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ПредставлениеКонфигурации = ВозможностиПриложения.ПредставлениеКонфигурации();
	Параметры.Вставить("ПредставлениеКонфигурации", ПредставлениеКонфигурации);
	
КонецПроцедуры

// См. ТарификацияПереопределяемый.ПриФормированииСпискаУслуг
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	УслугиУНФ = Новый Массив;
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторУслугиРозница());
	Услуга.Вставить("Наименование", НСтр("ru = 'Розница'"));
	Услуга.Вставить("ТипУслуги", Перечисления.ТипыУслуг.Безлимитная);
	УслугиУНФ.Добавить(Услуга);
	
	НовыйПоставщикУНФ = Новый Структура;
	НовыйПоставщикУНФ.Вставить("Идентификатор", ИдентификаторПоставщикаУНФ());
	НовыйПоставщикУНФ.Вставить("Наименование", НСтр("ru = '1С:УНФ'"));
	НовыйПоставщикУНФ.Вставить("Услуги", УслугиУНФ);
	
	ПоставщикиУслуг.Добавить(НовыйПоставщикУНФ);
	
КонецПроцедуры

// Идентификатор услуги "Розница"
// 
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторУслугиРозница() Экспорт

	Возврат "Розница";

КонецФункции

// Идентификатор поставщика УНФ.
// 
// Возвращаемое значение:
//  Строка
Функция ИдентификаторПоставщикаУНФ() Экспорт
	Возврат "1С_УНФ";
КонецФункции

// Идентификатор поставщика Касса.
// 
// Возвращаемое значение:
//  Строка
Функция ИдентификаторПоставщикаКасса() Экспорт
	Возврат "1С_Касса";
КонецФункции

// См. ТарификацияПереопределяемый.ПриОбновленииДоступныхЛицензий
Процедура ПриОбновленииДоступныхЛицензий(ПараметрыЛицензии) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторУслуги = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЛицензии.Услуга, "Идентификатор");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИдентификаторУслуги = ИдентификаторУслугиРозница() Тогда
		ВозможностиПриложения.ПриПодключенииУслугиРозница();
	КонецЕсли;
		
КонецПроцедуры

// См. ТарификацияПереопределяемый.ПриОбновленииДоступныхЛицензий
Процедура ПриУдаленииДоступныхЛицензий(ПараметрыЛицензии) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторУслуги = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЛицензии.Услуга, "Идентификатор");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИдентификаторУслуги = ИдентификаторУслугиРозница() Тогда
		ВозможностиПриложения.ПриОтключенииУслугиРозница();
	КонецЕсли;
		
КонецПроцедуры

// См. ТарификацияПереопределяемый.ПриИзмененииСостоянияАктивацииЛицензии
Процедура ПриИзмененииСостоянияАктивацииЛицензии(ДанныеОЛицензии, ЛицензияАктивирована) Экспорт

	РеквизитыУслуги = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОЛицензии.Услуга,
		"ПоставщикУслуги, Идентификатор");

	ИдентификаторПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыУслуги.ПоставщикУслуги,
		"Идентификатор");
	Если ИдентификаторПоставщика = ИдентификаторПоставщикаКасса() И РеквизитыУслуги.Идентификатор
		= ИдентификаторУслугиКасса() Тогда
		ВыполнитьАктивациюЛицензииКоличествоКасс(ДанныеОЛицензии.ИмяЛицензии, ЛицензияАктивирована);
	КонецЕсли;

КонецПроцедуры

// Выполняет попытку отмены регистрации на сервере тарификации кассового аппарата.
// 
// Параметры: 
//  ИдентификаторЛицензии - Строка - Идентификатор лицензии
//  УдалениеОбъекта - Булево - флаг удаления кассового аппарата.
//  ОтменитьДляВсехОбластей - Булево - Отменить для всех областей
//  КодОбластиДанных - Число - Код области данных
// 
// Возвращаемое значение:
//  Булево - флаг успешной отмены регистрации.
Функция ОтменаРегистрацииКассыНаСервереТарификации(ИдентификаторЛицензии, УдалениеОбъекта = Истина,
	ОтменитьДляВсехОбластей = Ложь, КодОбластиДанных = 0) Экспорт
	
	// Тариф проверяем только во Фреше.
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИдентификаторЛицензии) Тогда
		Возврат Ложь;
	КонецЕсли;

	ИдентификаторОперации = Новый УникальныйИдентификатор;

	ТарифноеОграничение = ОграничениеКоличествоКассПоТарифу();

	ЛицензияИспользуется = ПроверкаИспользованияЛицензииКоличествоКасс(ИдентификаторЛицензии, ТарифноеОграничение);

	Если ЛицензияИспользуется = Неопределено Тогда
		Возврат Истина;
	Иначе
		Если Не ЛицензияИспользуется Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Попытка
		Если РаботаВМоделиСервиса.СеансЗапущенБезРазделителей() Тогда
			Результат = Тарификация.ОсвободитьЛицензиюУникальнойУслуги(ТарифноеОграничение.Поставщик,
				ТарифноеОграничение.Идентификатор, ИдентификаторЛицензии, ИдентификаторОперации, КодОбластиДанных, ,
				ОтменитьДляВсехОбластей);
		Иначе
			Результат = Тарификация.ОсвободитьЛицензиюУникальнойУслуги(ТарифноеОграничение.Поставщик,
				ТарифноеОграничение.Идентификатор, ИдентификаторЛицензии, ИдентификаторОперации, , ,
				ОтменитьДляВсехОбластей);
		КонецЕсли;
		Если Результат Тогда
			Тарификация.ПодтвердитьОперацию(ИдентификаторОперации);
			Возврат Истина;
		Иначе
			Тарификация.ОтменитьОперацию(ИдентификаторОперации);
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Ограничение количество касс по тарифу.
// 
// Возвращаемое значение:
//  Структура - Ограничение количество касс по тарифу:
//   * Идентификатор - Строка
//   * Наименование - Строка
//   * ТипУслуги - ПеречислениеСсылка.ТипыУслуг
//   * Поставщик - Строка
Функция ОграничениеКоличествоКассПоТарифу() Экспорт

	ТарифноеОграничение = Новый Структура;
	ТарифноеОграничение.Вставить("Идентификатор", ИдентификаторУслугиКасса());
	ТарифноеОграничение.Вставить("Наименование", НСтр("ru = 'Количество подключенных ККМ (по рег. номеру)'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	ТарифноеОграничение.Вставить("ТипУслуги", Перечисления.ТипыУслуг.Уникальная);
	ТарифноеОграничение.Вставить("Поставщик", ИдентификаторПоставщикаКасса());

	Возврат ТарифноеОграничение;

КонецФункции

// Идентификатор услуги "КоличествоКасс"
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторУслугиКасса() Экспорт
	Возврат "КоличествоКасс";
КонецФункции

// Ссылка на личный кабинет абонента.
// 
// Возвращаемое значение:
//  Строка - Ссылка на личный кабинет абонента
Функция СсылкаНаЛичныйКабинетАбонента() Экспорт

	СсылкаНаЛичныйКабинет = ИнформационныйЦентрСервер.КонтекстнаяСсылкаПоИдентификатору(НСтр("ru ='ЛичныйКабинет'",
		ОбщегоНазначения.КодОсновногоЯзыка()));

	Возврат СсылкаНаЛичныйКабинет.Адрес;

КонецФункции

// Выполняет проверку и попытку регистрации на сервере тарификации кассового аппарата.
//
// Параметры:
//  ИдентификаторЛицензии - Строка - Идентификатор лицензии
// 
// Возвращаемое значение:
//  Булево - флаг успешной проверки и регистрации кассы
Функция ПодключениеКассыПоТарифу(ИдентификаторЛицензии) Экспорт
	
	// Тариф проверяем только во Фреше.
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Результат = Истина;
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИдентификаторЛицензии) Тогда
		Возврат Ложь;
	КонецЕсли;

	ТарифноеОграничение = ОграничениеКоличествоКассПоТарифу();

	ЛицензияИспользуется = ПроверкаИспользованияЛицензииКоличествоКасс(ИдентификаторЛицензии, ТарифноеОграничение);

	Если ЛицензияИспользуется = Неопределено Тогда
		Результат = Ложь;
	Иначе
		Если ЛицензияИспользуется Тогда
			Результат = ЛицензияИспользуется;
		Иначе
			Результат = ЗанятьЛицензииКоличествоКасс(ИдентификаторЛицензии, ТарифноеОграничение);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Розница в режиме сервиса.
// 
// Возвращаемое значение:
//  Булево
Функция РозницаВРежимеСервиса() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторПоставщикаУНФ = ИдентификаторПоставщикаУНФ();
	ИдентификаторУслугиРозница = ИдентификаторУслугиРозница();
	
	ЗарегистрированаУслугаРозница = Тарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(ИдентификаторПоставщикаУНФ,
		ИдентификаторУслугиРозница);
		
	Если ТипЗнч(ЗарегистрированаУслугаРозница) <> Тип("Булево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УслугаРозницаТарифицируется = УслугаТарифицируется(ИдентификаторУслугиРозница, ИдентификаторПоставщикаУНФ);
	
	Возврат ЗарегистрированаУслугаРозница И УслугаРозницаТарифицируется;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьАктивациюЛицензииКоличествоКасс(ИмяЛицензии, ЛицензияАктивирована) Экспорт

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	КассовыйАппарат = ИнтеграцияОбменШтрихМ.ПолучитьКассуПоИдентификаторуЛицензии(ИмяЛицензии);
	Если Не ЗначениеЗаполнено(КассовыйАппарат) Тогда
		// Это ошибочная регистрация. Надо освободить лицензию.
		Отмена = ОтменаРегистрацииКассыНаСервереТарификации(ИмяЛицензии, Ложь);
		Если Не Отмена Тогда
			Сообщение = СтрШаблон(НСтр("ru = 'Не освобождена лицензия для ККМ с регистрационным номером: %1'", КодЯзыка),
				ИмяЛицензии);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Деактивация лицензии.'", КодЯзыка),
				УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ОтключенаЛицензия = ИнтеграцияОбменШтрихМ.ПолучитьРеквизитыКассыШтрихМ(КассовыйАппарат).ОтключенаЛицензия;
	ИзменитьОтключение = Ложь;
	Если ОтключенаЛицензия И ЛицензияАктивирована Тогда
		ИзменитьОтключение = Истина;
	ИначеЕсли Не ОтключенаЛицензия И Не ЛицензияАктивирована Тогда
		ИзменитьОтключение = Истина;
	КонецЕсли;

	Если ИзменитьОтключение Тогда
		КассовыйАппаратОбъект = КассовыйАппарат.ПолучитьОбъект();
		Если КассовыйАппаратОбъект = Неопределено Тогда
			// Это ошибочная регистрация. Надо освободить лицензию.
			Отмена = ОтменаРегистрацииКассыНаСервереТарификации(ИмяЛицензии, Ложь);
			Если Не Отмена Тогда
				Сообщение = СтрШаблон(НСтр("ru = 'Не освобождена лицензия для ККМ с регистрационным номером: %1'",
					КодЯзыка), ИмяЛицензии);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Деактивация лицензии.'", КодЯзыка),
					УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ЗаписьРегистра = РегистрыСведений.НастройкиКассыШтрихМ.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.КассаККМ = КассовыйАппарат;
		ЗаписьРегистра.Прочитать();
		ЗаписьРегистра.ОтключенаЛицензия = Не ЛицензияАктивирована;
		ЗаписьРегистра.Записать();

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверкаИспользованияЛицензииКоличествоКасс(ИдентификаторЛицензии, ТарифноеОграничение = Неопределено)

	ЛицензияИспользуется = Неопределено;

	Если ТарифноеОграничение = Неопределено Тогда
		ТарифноеОграничение = ОграничениеКоличествоКассПоТарифу();
	КонецЕсли;

	ИмяСобытия = НСтр(
		"ru = 'Тарификация.Проверка наличия лицензии уникальной услуги из приложения'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаголовокКомментария = ЗаголовокКомментария(ТарифноеОграничение.Поставщик, ТарифноеОграничение.Идентификатор,
		ИдентификаторЛицензии);
	Попытка
		ЛицензияИспользуется = Тарификация.ЗарегистрированаЛицензияУникальнойУслуги(ТарифноеОграничение.Поставщик,
			ТарифноеОграничение.Идентификатор, ИдентификаторЛицензии);
	Исключение;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий);
	КонецПопытки;

	Возврат ЛицензияИспользуется;

КонецФункции

// Заголовок комментария для ЖР.
//
// Параметры:
//  ИдентификаторПоставщика - Строка - идентификатор поставщика
//  ИдентификаторУслуги - Строка - идентификатор услуги
//  ИдентификаторЛицензии - Строка - идентификатор лицензии
//  КоличествоЛицензий - Число - количество занимаемых лицензий
//  ИдентификаторОперации  - Строка - идентификатор операции
//
// Возвращаемое значение:
//  строка - заголовок комментария.
//
Функция ЗаголовокКомментария(ИдентификаторПоставщика, ИдентификаторУслуги, ИдентификаторЛицензии = Неопределено,
	КоличествоЛицензий = 1, ИдентификаторОперации = Неопределено)

	Шаблон = НСтр("ru = 'Идентификатор поставщика: %1
				  |Идентификатор услуги: %2
				  |Идентификатор лицензии: %3
				  |Количество лицензий: %4
				  |Идентификатор операции: %5'");

	Результат = СтрШаблон(Шаблон, ИдентификаторПоставщика, ИдентификаторУслуги, ИдентификаторЛицензии,
		КоличествоЛицензий, ИдентификаторОперации);

	Возврат Результат;

КонецФункции

// Записывает ошибку в ЖР при операциях с лицензиями.
//
// Параметры:
//  ИмяСобытия - Строка - имя события ЖР.
//  ЗаголовокКомментария - Строка - заголовок комментария ошибки.
//  Комментарий - Строка - комментарий ошибки.
//
Процедура ЗаписатьОшибку(ИмяСобытия, ЗаголовокКомментария, Комментарий)

	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ЗаголовокКомментария + Символы.ПС
		+ Символы.ПС + Комментарий);

КонецПроцедуры

// Выполняет попытку регистрации на сервере тарификации кассового аппарата.
//
// Параметры:
//  Ссылка - СправочникСсылка.КассовыеАппараты - ссылка на кассовый аппарат.
//
// Возвращаемое значение:
//  Структура - структура с ключами
//    * Результат - Булево - результат выполнения (Истина = лицензия успешно получена).
//    * ДоступноЛицензий - Число - максимально доступное абоненту количество лицензий на указанную услугу.
//    * ЗанятоЛицензий - Число - количество уже полученных (использованных) лицензий на услугу.
//   Выполняет попытку регистрации на сервере тарификации кассового аппарата.
// 
// Параметры:
//  ИдентификаторЛицензии - Строка - Идентификатор лицензии
//  ТарифноеОграничение - см. ОграничениеКоличествоКассПоТарифу
// 
// Возвращаемое значение:
//  Булево - Занять лицензии количество касс
Функция ЗанятьЛицензииКоличествоКасс(ИдентификаторЛицензии, ТарифноеОграничение = Неопределено)

	Ответ = ОтветЗанятияЛицензий();

	Если ТарифноеОграничение = Неопределено Тогда
		ТарифноеОграничение = ОграничениеКоличествоКассПоТарифу();
	КонецЕсли;

	ИдентификаторОперации = Новый УникальныйИдентификатор;

	Ответ = Тарификация.ЗанятьЛицензиюУникальнойУслуги(ТарифноеОграничение.Поставщик, ТарифноеОграничение.Идентификатор,
		ИдентификаторЛицензии, ИдентификаторОперации);

	Если Ответ.Результат Тогда
		Попытка
			Тарификация.ПодтвердитьОперацию(ИдентификаторОперации);
			Возврат Истина;
		Исключение
			Тарификация.ОтменитьОперацию(ИдентификаторОперации);
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Возвращает структуру ответа занятия услуги со значениями по умолчанию.
// 
// Возвращаемое значение:
//  Структура - ответ со значениями по умолчанию
Функция ОтветЗанятияЛицензий()

	Ответ = Новый Структура;
	Ответ.Вставить("Результат", Ложь);
	Ответ.Вставить("ДоступноЛицензий", 0);
	Ответ.Вставить("ЗанятоЛицензий", 0);

	Возврат Ответ;
КонецФункции

Функция УслугаТарифицируется(ИдентификаторУслуги, ИдентификаторПоставщика)
	
	Услуга = Тарификация.УслугаПоИдентификаторуИИдентификаторуПоставщика(ИдентификаторУслуги, ИдентификаторПоставщика,
		Ложь);
	
	Если Услуга = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Услуга, "Тарифицируется");
	Возврат Результат;
	
КонецФункции

#КонецОбласти
