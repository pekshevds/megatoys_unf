#Область ПрограммныйИнтерфейс

// Возвращает Истина, если в информационной базе используется
// обмен с мобильными приложениями.
//
Функция ИспользоватьОбменСМобильнымиПриложениями() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменСМобильнымиПриложениями");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область КодыПодключения

// Заполняет таблицу кодов подключения пользователей настройки.
//
// Параметры:
//   КодыПодключения - ДанныеФормыКоллекция - Таблица с колонками:
//     * Пользователь - СправочникСсылка.Пользователи - пользователь настройки обмена
//     * КодПодключения - Картинка - QR-код подключения пользователя
//     * ПисьмоОтправлено - Булево - признак успешной или не успешной отправки кода на email
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//   МассивПользователей - Массив из СправочникСсылка.Пользователи
//   ТабличныйДокумент - ТабличныйДокумент - для вывода кодов подключения на печать
//
Процедура ЗаполнитьКодыПодключения(
		КодыПодключения,
		УзелОбмена,
		МассивПользователей,
		ТабличныйДокумент = Неопределено) Экспорт
	
	КодыПодключения.Очистить();
	
	Макет = Обработки.УправлениеМобильнымиПриложениями.ПолучитьМакет("QRКодПодключения");
	Область = Макет.ПолучитьОбласть("Строка|Колонка");
	ОбластьГраница = Макет.ПолучитьОбласть("Граница|Колонка");
	Рисунок = Область.Рисунки.ШтрихКод;
	
	Эталон = Справочники.ПодключаемоеОборудование.ПолучитьМакет("МакетДляОпределенияКоэффициентовЕдиницИзмерения");
	КоличествоМиллиметровВПикселеВысота = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	КоличествоМиллиметровВПикселеШирина = Эталон.Рисунки.Квадрат100Пикселей.Ширина / 100;
	ШиринаШтрихкода = Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселеШирина);
	ВысотаШтрихкода = Окр(Рисунок.Высота / КоличествоМиллиметровВПикселеВысота);
	
	АдресПубликации = Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить();
	Если ТипЗнч(УзелОбмена) = Тип("Структура") Тогда
		Если УзелОбмена.Свойство("АдресПубликации") Тогда
			АдресПубликации = УзелОбмена.АдресПубликации;
		КонецЕсли;
	КонецЕсли;
		
	КодУзла = УзелОбмена.Код;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
		Если НЕ СеансЗапущенБезРазделителей Тогда
			ТекущаяОбласть = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
			Попытка
				МодульПрограммныйИнтерфейсСервиса = ОбщегоНазначения.ОбщийМодуль("ПрограммныйИнтерфейсСервиса");
				СвойстваПриложения = МодульПрограммныйИнтерфейсСервиса.СвойстваПриложения(ТекущаяОбласть);
				АдресПубликации = СвойстваПриложения.АдресПриложения;
			Исключение
				АдресПубликации = "";
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоГрупповаяНастройка = МассивПользователей.Количество() > 1;
	Для Каждого УчастникНастройки Из МассивПользователей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			УчастникНастройки.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательНастройки = ПользовательИБ.Имя;
		ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ПользовательНастройки);
		ПользовательНастройки = Base64Строка(ДвоичныеДанные);

		СтрокаДляКодирования = АдресПубликации + ";"
			+ КодУзла + ";"
			+ ПользовательНастройки + ";";
			
		Область.Параметры.Пользователь = УчастникНастройки.Наименование;
		Область.Параметры.НастройкаОбмена = УзелОбмена.Наименование;
		ДанныеQRКода = ПолучитьШтрихкод(ШиринаШтрихкода, ВысотаШтрихкода, СтрокаДляКодирования);
		Рисунок.Картинка = ДанныеQRКода.Картинка;
		
		Область.Параметры.СтрокаПодключения = СтрокаДляКодирования;
		
		Если ТабличныйДокумент <> Неопределено Тогда
			Если Не ТабличныйДокумент.ПроверитьВывод(Область) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокумент.Вывести(Область);
			Если ЭтоГрупповаяНастройка Тогда
				ТабличныйДокумент.Вывести(ОбластьГраница);
			КонецЕсли;
		КонецЕсли;
		
		Строка = КодыПодключения.Добавить();
		Строка.Пользователь = УчастникНастройки;
		Строка.КодПодключения = ДанныеQRКода.Картинка;
	КонецЦикла;
	
КонецПроцедуры

// Отправляет пользователям настройки обмена электронные письма с кодами подключения
// к приложению.
// Возвращает Истина в случае успешного завершения отправки.
// Возвращает Ложь, если нет доступной учетной записи для отправки электронных писем.
//
// Параметры:
//   КодыПодключения - ДанныеФормыКоллекция - Таблица с колонками:
//     * Пользователь - СправочникСсылка.Пользователи - пользователь настройки обмена
//     * КодПодключения - Картинка - QR-код подключения пользователя
//     * ПисьмоОтправлено - Булево - признак успешной или не успешной отправки кода на email
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//
Функция ОтправитьКодыПодключения(КодыПодключения, УзелОбмена) Экспорт
	
	// Выбираем первую доступную запись электронной почты
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		ТекстСообщения =
			НСтр("ru = 'Не обнаружены доступные учетные записи электронной почты, обратитесь к администратору системы.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
	
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подключение к приложению %1'"), УзелОбмена.МобильноеПриложение);
		
	ТелоПисьма =
		НСтр("ru = 'Откройте приложение и отсканируйте QR-код.
		|
		|Пользователь: %1
		|Настройка: %2
		|
		|Данное письмо сформировано автоматически и не требует ответа.'");
		
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя");
	
	Для Каждого Строка Из КодыПодключения Цикл
		АдресЭлектроннойПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Строка.Пользователь,ВидКонтактнойИнформации);
			
		Если ПустаяСтрока(АдресЭлектроннойПочты) Тогда
			Продолжить;
		КонецЕсли;
	
		ПараметрыПисьма = Новый Структура;
		
		ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
		ПараметрыПисьма.Вставить("Кому", АдресЭлектроннойПочты);
		Тело = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма,
			Строка.Пользователь, УзелОбмена.Наименование);
		ПараметрыПисьма.Вставить("Тело", Тело);
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Строка.КодПодключения.ПолучитьДвоичныеДанные());

		Вложения = Новый Массив;
		ОписаниеВложения = Новый Структура;
		ОписаниеВложения.Вставить("Представление", "QR-код.jpg");
		ОписаниеВложения.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		Вложения.Добавить(ОписаниеВложения);
		ПараметрыПисьма.Вставить("Вложения", Вложения);
		
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
		Строка.ПисьмоОтправлено = Истина;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

// Конструктор структуры настроек приложения.
//
// Возвращаемое значение
//   НастройкаПриложения - Структура:
//     * ЭтоОтбор - Булево - Необходимость помещения элемента в таблицу отборов
//     * ОбязательноеЗаполнение - Булево - Признак обязательного заполнения элемента
//     * ИмяФункциональнойОпции - Строка - Имя опции, от которого зависит отображение и доступность элемента
//     * ГруппаФормы - Строка - Имя группы для помещения создаваемого элемента
//     * ПорядокВГруппе - Число - Для настройки порядка следования элементов
//
Функция НастройкаПриложения() Экспорт
	
	НастройкаПриложения = Новый Структура;
	НастройкаПриложения.Вставить("ЭтоОтбор", Ложь);
	НастройкаПриложения.Вставить("ОбязательноеЗаполнение", Ложь);
	НастройкаПриложения.Вставить("ИмяФункциональнойОпции", "");
	НастройкаПриложения.Вставить("ГруппаФормы", Неопределено);
	НастройкаПриложения.Вставить("ПорядокВГруппе", 99);
	НастройкаПриложения.Вставить("ОбрабатыватьПоведениеПриИзменении", Ложь);
	НастройкаПриложения.Вставить("ОбрабатыватьПоведениеАвтоПодбор", Ложь);
	НастройкаПриложения.Вставить("Подсказка", "");
	НастройкаПриложения.Вставить("ИдентификаторСтроки", "");
	НастройкаПриложения.Вставить("ИдентификаторКолонки", "");
	НастройкаПриложения.Вставить("ЗаголовокКолонки", "");
	НастройкаПриложения.Вставить("ВыбиратьГруппу", Ложь);
	                  
	Возврат НастройкаПриложения;
	
КонецФункции

// Конструктор структуры параметров предопределенного приложения.
//
Функция ПараметрыПриложения() Экспорт
	
	ПараметрыПриложения = Новый Структура();
	ПараметрыПриложения.Вставить("Наименование");
	ПараметрыПриложения.Вставить("ВариантНастройки");
	ПараметрыПриложения.Вставить("ВерсияПриложения");
	ПараметрыПриложения.Вставить("КраткаяИнформация");
	ПараметрыПриложения.Вставить("СайтПриложения");
	ПараметрыПриложения.Вставить("Разработчик");
	ПараметрыПриложения.Вставить("СайтРазработчика");
	ПараметрыПриложения.Вставить("ИдентификаторПриложенияGoogle", "");
	ПараметрыПриложения.Вставить("ИдентификаторПриложенияApple", "");
	ПараметрыПриложения.Вставить("ИдентификаторПриложенияWindows", "");
	
	Возврат ПараметрыПриложения;
	
КонецФункции

// Конструктор структуры группы формы приложения.
//
// Возвращаемое значение
//   ГруппаФормы - Структура:
//     * Имя - Строка - Имя создаваемого элемента формы
//     * Заголовок - Строка - Заголовок создаваемого элемента формы
//
Функция ГруппаФормы() Экспорт
	
	ГруппаФормы = Новый Структура;
	ГруппаФормы.Вставить("Имя", "");
	ГруппаФормы.Вставить("Заголовок", "");
	ГруппаФормы.Вставить("Горизонтально", Ложь);
	
	Возврат ГруппаФормы;
	
КонецФункции

#КонецОбласти

#Область МобильноеПриложение

// Возвращает версию формата обмена мобильного приложения
//
// Параметры:
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение узла обмена
//
// Возвращаемое значение
//   ВерсияФорматаОбмена - Строка - текущая версия формата обмена мобильного приложения
//
Функция ВерсияФорматаОбмена(МобильноеПриложение) Экспорт
	
	ВерсияФорматаОбмена = "";
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриОпределенииВерсииФорматаОбмена(
		ВерсияФорматаОбмена, МобильноеПриложение);
	
	Возврат ВерсияФорматаОбмена;
КонецФункции

// Возвращает описание приложения.
//
// Параметры:
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение
//
// Возвращаемое значение:
//   Строка - URL-адрес приложения, текст HTML документа
//
Функция ПолучитьОписаниеПриложения(МобильноеПриложение) Экспорт
	
	ОписаниеПриложения = "";
	СтандартнаяОбработка = Истина;
	
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриОпределенииОписанияПриложения(
		МобильноеПриложение, ОписаниеПриложения, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ОписаниеПриложения = МобильноеПриложение.СайтПриложения;
	КонецЕсли;
	
	Возврат ОписаниеПриложения;
	
КонецФункции

// Возвращает картинку с QR-кодом для скачивания приложения.
//
// Параметры:
//   МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение
//   УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы, в которой требуется отобразить QR-код
//
// Возвращаемое значение:
//   Строка - адрес QR-кода приложения во временном хранилище
//
Функция ПолучитьСсылкуНаСкачивание(МобильноеПриложение, УникальныйИдентификатор) Экспорт
	
	АдресСсылкиGooglePlay = "";
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриПолученииСсылкиНаСкачивание(
		МобильноеПриложение, УникальныйИдентификатор, АдресСсылкиGooglePlay);
	
	Возврат АдресСсылкиGooglePlay;
	
КонецФункции

// Возвращает адрес временного хранилища иконки мобильного приложения.
//
// Параметры:
//   МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение
//   УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы, в которой требуется отобразить превью
//
// Возвращаемое значение:
//   Строка - адрес иконки во временном хранилище
//
Функция ПревьюПриложения(МобильноеПриложение, УникальныйИдентификатор) Экспорт
	
	ДвоичныеДанныеИконки = Неопределено;
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриПолученииИконкиПриложения(
		МобильноеПриложение, ДвоичныеДанныеИконки);
	
	Превью = "";
	Если ДвоичныеДанныеИконки <> Неопределено Тогда
		Превью = ПоместитьВоВременноеХранилище(ДвоичныеДанныеИконки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Превью;

КонецФункции

// Возвращает результат проверки варианта настройки мобильного приложения.
//
// Параметры:
//  МобильноеПриложение - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//  ВариантНастройки - Строка - проверяемый вариант настройки
//
// Возвращаемое значение:
//  Булево - истина, когда вариант настройки уже используется.
//
Функция ПроверитьВариантНастройкиМобильногоПриложения(МобильноеПриложение, ВариантНастройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МобильноеПриложение);
	Запрос.УстановитьПараметр("ВариантНастройки", ВариантНастройки);
	Запрос.Текст = "ВЫБРАТЬ
	|	МобильныеПриложения.ВариантНастройки КАК ВариантНастройки
	|ИЗ
	|	Справочник.МобильныеПриложения КАК МобильныеПриложения
	|ГДЕ
	|	НЕ МобильныеПриложения.Ссылка = &Ссылка
	|	И МобильныеПриложения.ВариантНастройки = &ВариантНастройки";
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

// Возвращает список поддерживаемых мобильных приложений
//
// Возвращаемое значение:
//   СписокПриложений - Массив - содержит массив мобильных приложений
//
Функция СписокМобильныхПриложений() Экспорт
	
	СписокПриложений = Новый Массив;
	СтандартнаяОбработка = Истина;
	
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриОпределенииСпискаМобильныхПриложений(
		СписокПриложений, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		СписокПриложений.Очистить();
		ВыборкаМобильныеПриложения = Справочники.МобильныеПриложения.Выбрать();
		Пока ВыборкаМобильныеПриложения.Следующий() Цикл
			Если ВыборкаМобильныеПриложения.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			СписокПриложений.Добавить(ВыборкаМобильныеПриложения.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокПриложений;
КонецФункции

#КонецОбласти

#Область ПланОбмена

#Область ДанныеУзлаОбмена

// Возвращает новый префикс для данных мобильного устройства.
//
// Возвращаемое значение:
//  НовыйПрефиксДляДанныхМобильногоУстройства - Строка - новый префикс
//
Функция НовыйПрефиксДляДанныхМобильногоУстройства() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйПрефиксДляДанныхМобильногоУстройства = "АА";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОбменСМобильнымиПриложениями.ПрефиксДляДанныхМобильногоУстройства КАК СТРОКА(2)) КАК ПрефиксДляДанныхМобильногоУстройства
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена() + " КАК ОбменСМобильнымиПриложениями
	|ГДЕ
	|	НЕ ОбменСМобильнымиПриложениями.ПрефиксДляДанныхМобильногоУстройства = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрефиксДляДанныхМобильногоУстройства УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат НовыйПрефиксДляДанныхМобильногоУстройства;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	ТекущийПрефикс = Выборка.ПрефиксДляДанныхМобильногоУстройства;
	
	ПервыйСимвол = Макс(1040, КодСимвола(ТекущийПрефикс, 1));
	ВторойСимвол = Макс(1040, КодСимвола(ТекущийПрефикс, 2));
	
	Если ВторойСимвол < 1071 Тогда
		ВторойСимвол = ВторойСимвол + 1;
	Иначе
		ВторойСимвол = 1040;
		ПервыйСимвол = ПервыйСимвол + 1;
		Если ПервыйСимвол > 1071 Тогда
			// Нумерация закончилась.
			ПервыйСимвол = 1071;
			ВторойСимвол = 1071;
		КонецЕсли;
	КонецЕсли;
	
	НовыйПрефиксДляДанныхМобильногоУстройства = Символ(ПервыйСимвол)+Символ(ВторойСимвол);
	
	Возврат НовыйПрефиксДляДанныхМобильногоУстройства;
КонецФункции

// Возвращает результат проверки префикса для данных мобильного устройства.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//  Префикс - Строка - проверяемый префикс для данных мобильного устройства.
//
// Возвращаемое значение:
//  Булево - истина, когда префикс уже используется на другом узле.
//
Функция ПроверитьПрефиксДляДанныхМобильногоУстройства(УзелОбмена, Префикс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОбменСМобильнымиПриложениями.ПрефиксДляДанныхМобильногоУстройства КАК СТРОКА(2)) КАК ПрефиксДляДанныхМобильногоУстройства
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена() + " КАК ОбменСМобильнымиПриложениями
	|ГДЕ
	|	НЕ ОбменСМобильнымиПриложениями.Ссылка = &Ссылка
	|	И (ВЫРАЗИТЬ(ОбменСМобильнымиПриложениями.ПрефиксДляДанныхМобильногоУстройства КАК СТРОКА(2))) = &Префикс");
	
	Запрос.УстановитьПараметр("Ссылка", УзелОбмена);
	Запрос.УстановитьПараметр("Префикс", Префикс);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

// Завершает настройку узла обмена.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//
Процедура ПослеЗаписиНастройки(УзелОбмена) Экспорт
	
	Если УзелОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ИмяПланаОбмена = УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена();
		ИмяПараметра = "СтандартныеПодсистемы.ОбменДанными.ПравилаРегистрации."
			+ ИмяПланаОбмена;
		ПравилаРегистрацииОбновлены = СтандартныеПодсистемыСервер.ПараметрРаботыПрограммы(ИмяПараметра);
		Если ПравилаРегистрацииОбновлены = Неопределено Тогда
			ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными(Истина);
			ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
		КонецЕсли;
	КонецЕсли;

	РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНастройкаЗавершена(УзелОбмена);
	
	СтандартнаяОбработка = Истина;
	УправлениеМобильнымиПриложениямиПереопределяемый.ПослеЗаписиНастройки(УзелОбмена, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбмена = УзелОбмена.НастройкиОбмена.Получить();
	Если НастройкиОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из НастройкиОбмена.Отбор.Элементы Цикл
		ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Если ПравоеЗначение.Количество() > 0 Тогда
				ТипЗначения = ТипЗнч(ПравоеЗначение[0].Значение);
			КонецЕсли;
		Иначе
			ТипЗначения = ТипЗнч(ПравоеЗначение);
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если УзелОбмена.Метаданные().Состав.Содержит(ОбъектМетаданных) Тогда
			Если ЗначениеЗаполнено(ПравоеЗначение) И ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Для Каждого ЭлементСписка Из ПравоеЗначение Цикл
						ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСписка.Значение);
					КонецЦикла;
				Иначе
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ПравоеЗначение);
				КонецЕсли;
			Иначе
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ОбъектМетаданных);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;  
	
КонецПроцедуры

// Выполняет действия перед записью настройки узла обмена.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//
Процедура ПередЗаписьюНастройки(ВариантНастройки, СтруктураПараметровОтбора) Экспорт
	
	СтандартнаяОбработка = Истина;
	УправлениеМобильнымиПриложениямиПереопределяемый.ПередЗаписьюНастройки(ВариантНастройки, СтруктураПараметровОтбора, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаУзлаОбмена

// Заполняет настройки компоновщика по схеме компоновки настроек мобильного приложения.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных, в котором необходимо заполнить настройки
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение узла обмена
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - настройки для заполнения
//
Процедура ЗаполнитьНастройкиКомпоновщика(КомпоновщикНастроек,
		МобильноеПриложение, НастройкиКомпоновки = Неопределено) Экспорт
	
	СхемаКомпоновки = Неопределено;
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриПолученииСхемыКомпоновкиНастроек(
		МобильноеПриложение, СхемаКомпоновки);
	
	Если СхемаКомпоновки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если НастройкиКомпоновки = Неопределено Тогда
		НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию; 
	Иначе
		АктуализироватьЭлементыОтбора(НастройкиКомпоновки, СхемаКомпоновки.НастройкиПоУмолчанию);
	КонецЕсли;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор());
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
КонецПроцедуры

// Добавляет на форму узла обмена реквизиты и элементы, соответствующие настройкам мобильного приложения.
// Заполняет отборы из компоновщика настроек в реквизиты формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма узла обмена
//  ГруппаФормы - ГруппаФормы - группа, в которой будут располагаться настройки приложения
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных для заполнения
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение узла обмена
//
Процедура ОтрисоватьФормуУзла(Форма, ГруппаФормы, КомпоновщикНастроек, МобильноеПриложение) Экспорт
	
	НастройкиПриложения = НастройкиПриложения(МобильноеПриложение);
	ДобавитьНастройкиПриложенияНаФорму(Форма, ГруппаФормы, КомпоновщикНастроек, НастройкиПриложения);
	СоответствиеНастроекВидовДокументов = Новый Соответствие;
	УстановитьОтборыКомпоновщикаВРеквизитыФормы(Форма, КомпоновщикНастроек, НастройкиПриложения, СоответствиеНастроекВидовДокументов);
	ОпределитьСписокВыбораНаименования(Форма, МобильноеПриложение, НастройкиПриложения);
	УстановитьНачальныеНастройкиФормы(Форма, МобильноеПриложение, КомпоновщикНастроек, СоответствиеНастроекВидовДокументов);   
	
КонецПроцедуры

// Обработчик изменения полей формы узла обмена, которые содержат обязательные настройки приложения.
//
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма узла обмена
//  ИмяНастройки - Строка - имя элемента формы, который был изменен и является обязательным
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение узла обмена
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных с настройками приложения
//
Процедура ОбязательнаяНастройкаПриИзменении(Форма, ИмяНастройки, МобильноеПриложение, КомпоновщикНастроек) Экспорт
	
	НастройкиПриложения = НастройкиПриложения(МобильноеПриложение);
	ОпределитьСписокВыбораНаименования(Форма, МобильноеПриложение, НастройкиПриложения);
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриИзмененииОбязательнойНастройки(ИмяНастройки, КомпоновщикНастроек);
	
КонецПроцедуры

// Заполняет отбор компоновщика настроек реквизитами формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма узла обмена
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных для заполнения
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение узла обмена
//
Процедура УстановитьРеквизитыФормыВОтборыКомпоновщика(Форма, КомпоновщикНастроек, МобильноеПриложение) Экспорт
	
	НастройкиПриложения = НастройкиПриложения(МобильноеПриложение);
	Для Каждого ТекущаяНастройка Из НастройкиПриложения Цикл
		ИмяНастройки = ТекущаяНастройка.Ключ;
		ЗначениеНастройки = ТекущаяНастройка.Значение;     
		Если Не ЗначениеНастройки.ЭтоОтбор Тогда
			Если НастройкаИспользуется(ЗначениеНастройки) Тогда   
				Если ЗначениеЗаполнено(ЗначениеНастройки.ИдентификаторКолонки) Тогда       
					СтруктураОтбора = Новый Структура("ВидДокумента", ЗначениеНастройки.ИдентификаторСтроки); 
					МассивСтрокТаблицы = Форма.ТаблицаНастроекВидовДокументов.НайтиСтроки(СтруктураОтбора);     
					Если МассивСтрокТаблицы.Количество() > 0 Тогда   
						СтрокаТаблицы = МассивСтрокТаблицы[0];
						ЗначениеНастройкиТаблицы = СтрокаТаблицы[ЗначениеНастройки.ИдентификаторКолонки]; 
						
						ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КомпоновщикНастроек.Настройки.Отбор,
							ИмяНастройки, ЗначениеНастройкиТаблицы, ВидСравненияКомпоновкиДанных.Равно,,
							ЗначениеЗаполнено(ЗначениеНастройкиТаблицы));
					КонецЕсли;
				Иначе
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КомпоновщикНастроек.Настройки.Отбор,
						ИмяНастройки, Форма[ИмяНастройки], ВидСравненияКомпоновкиДанных.Равно,,
						ЗначениеЗаполнено(Форма[ИмяНастройки]));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
 
// Удаляет из настроек компоновки данных элементы отбора, отсутствующие в настройках по умолчанию
// Добавляет присутствующие только настройках по умолчанию элементы отбора
//
// Параметры:
//  НастройкиКомпоновки - настройки компоновки данных, сохраненные в узле обмена
//  НастройкиПоУмолчанию - настройки компоновки данных по умолчанию
//
Процедура АктуализироватьЭлементыОтбора(НастройкиКомпоновки, НастройкиПоУмолчанию) Экспорт     
	
	МассивУдаляемыхЭлементовОтбора = Новый Массив;
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл  
		ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;    
		ЕстьВНастройкахПоУмолчанию = Ложь;
		Для Каждого ЭлементОтбораПоУмолчанию Из НастройкиПоУмолчанию.Отбор.Элементы Цикл     
			Если ЭлементОтбораПоУмолчанию.ЛевоеЗначение = ЛевоеЗначение Тогда
				ЕстьВНастройкахПоУмолчанию = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		Если Не ЕстьВНастройкахПоУмолчанию Тогда
			МассивУдаляемыхЭлементовОтбора.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлементОтбора Из МассивУдаляемыхЭлементовОтбора Цикл    
		НастройкиКомпоновки.Отбор.Элементы.Удалить(УдаляемыйЭлементОтбора);
	КонецЦикла;     
	
	МассивДобавляемыхЭлементовОтбора = Новый Массив;
	Для Каждого ЭлементОтбора Из НастройкиПоУмолчанию.Отбор.Элементы Цикл  
		ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;    
		ЕстьВТекущихНастройках = Ложь;
		Для Каждого ЭлементОтбораПоУмолчанию Из НастройкиКомпоновки.Отбор.Элементы Цикл     
			Если ЭлементОтбораПоУмолчанию.ЛевоеЗначение = ЛевоеЗначение Тогда
				ЕстьВТекущихНастройках = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		Если Не ЕстьВТекущихНастройках Тогда
			МассивДобавляемыхЭлементовОтбора.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
 	Для Каждого ДобавляемыйЭлементОтбора Из МассивДобавляемыхЭлементовОтбора Цикл    
		НовыйЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));   
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ДобавляемыйЭлементОтбора);
	КонецЦикла;     

КонецПроцедуры

// Обработчик изменения полей формы узла обмена, для которых указано наличие обработчика.
//
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма узла обмена
//  ИмяНастройки - Строка - имя элемента формы, который был изменен и является обязательным
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение узла обмена
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных с настройками приложения
//
Процедура ОбрабатыватьПоведениеПриИзмененииСервер(Форма, ИмяНастройки, МобильноеПриложение, КомпоновщикНастроек) Экспорт
	
	ОбработатьПоведениеЭлементаПриИзменении(Форма, ИмяНастройки);
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриИзмененииОбрабатываемогоЭлемента(ИмяНастройки, КомпоновщикНастроек);
	
КонецПроцедуры

// Обработчик изменения полей формы узла обмена, для которых указано наличие обработчика.
//
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма узла обмена
//  ИмяНастройки - Строка - имя элемента формы, который был изменен и является обязательным
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение узла обмена
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных с настройками приложения
//
Процедура ОбрабатыватьПоведениеАвтоПодборСервер(Форма, ИмяНастройки, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Если ИмяНастройки = "ВидЗаказаПокупателяДляСборки" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			Если Ожидание = 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказовПокупателей"), ПараметрыПолученияДанных);
			КонецЕсли;   
		КонецЕсли;   
	ИначеЕсли ИмяНастройки = "СостояниеЗаказаДляСборки" Тогда  
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыПолученияДанных.Вставить("ВидЗаказа", Форма.ВидЗаказаПокупателяДляСборки);
			ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
 		КонецЕсли;   
	ИначеЕсли ИмяНастройки = "ВидЗаказаПокупателяСобран" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			Если Ожидание = 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказовПокупателей"), ПараметрыПолученияДанных);
			КонецЕсли;   
		КонецЕсли;   
	ИначеЕсли ИмяНастройки = "СостояниеЗаказаСобран" Тогда   
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыПолученияДанных.Вставить("ВидЗаказа", Форма.ВидЗаказаПокупателяСобран);
			ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
		КонецЕсли;    
		
	ИначеЕсли ИмяНастройки = "ВидЗаказаПокупателяЗаданиеТорговомуПредставителю" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			Если Ожидание = 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказовПокупателей"), ПараметрыПолученияДанных);
			КонецЕсли;   
		КонецЕсли;   
	ИначеЕсли ИмяНастройки = "СостояниеЗаданиеТорговомуПредставителю" Тогда   
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыПолученияДанных.Вставить("ВидЗаказа", Форма.ВидЗаказаПокупателяЗаданиеТорговомуПредставителю);
			ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
		КонецЕсли;    
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РегистрацияИзменений

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник       - ДокументОбъект - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения документа.
// 
Процедура ОбменСМобильнымиПриложениямиПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента(
		ИмяПланаОбмена(), Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры


// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник     - РегистрРасчетаНаборЗаписей - набор записей, передаваемый
//                 в подписку на событие ПередЗаписью.
//  Отказ        - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  Замещение    - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
// 
Процедура УправлениеМобильнымиПриложениямиЗарегистрироватьИзменениеРегистраПередЗаписью(Источник, Отказ, Замещение) Экспорт    
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра(ИмяПланаОбмена(), Источник, Отказ, Замещение);   
	
КонецПроцедуры


// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник       - СправочникОбъект - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура УправлениеМобильнымиПриложениямиЗарегистрироватьИзменениеСправочникаПередЗаписью(Источник, Отказ) Экспорт    
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью(ИмяПланаОбмена(), Источник, Отказ);      
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КодыПодключения

Функция ПолучитьШтрихкод(ШиринаШтрихкода, ВысотаШтрихкода, Штрихкод)
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина"            , ШиринаШтрихкода);
	ПараметрыШтрихкода.Вставить("Высота"            , ВысотаШтрихкода);
	ПараметрыШтрихкода.Вставить("ТипКода"           , 16);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст"   , Истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта"      , 12);
	ПараметрыШтрихкода.Вставить("УголПоворота"      , 0);
	ПараметрыШтрихкода.Вставить("Штрихкод"          , Штрихкод);
	ПараметрыШтрихкода.Вставить("ПрозрачныйФон"     , Ложь);
	ПараметрыШтрихкода.Вставить("Масштабировать"    , Ложь);
	Возврат ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	
КонецФункции

#КонецОбласти

#Область ПланОбмена

Функция ИмяПланаОбмена()
	
	Возврат УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена();
	
КонецФункции

#Область ФормаУзлаОбмена

Процедура ДобавитьНастройкиПриложенияНаФорму(Форма, ГруппаФормы, КомпоновщикНастроек, НастройкиПриложения)
	
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхЭлементовГрупп = Новый Массив;
	Для Каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл  
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") И СтрНачинаетсяС(Элемент.Имя, "ГруппаНастроек") Тогда
			МассивУдаляемыхЭлементовГрупп.Добавить(Элемент);
		Иначе
			МассивУдаляемыхРеквизитов.Добавить(Элемент.ПутьКДанным);
		КонецЕсли;
	КонецЦикла;
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	Для Каждого УдаленныйРеквизит Из МассивУдаляемыхРеквизитов Цикл
		ЭлементКУдалению = Форма.Элементы.Найти(УдаленныйРеквизит);
		Если ЭлементКУдалению <> Неопределено Тогда
			Форма.Элементы.Удалить(ЭлементКУдалению);
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого ЭлементФормы Из МассивУдаляемыхЭлементовГрупп Цикл
		Форма.Элементы.Удалить(ЭлементФормы);
	КонецЦикла;     
	
	ТаблицаСортировки = Новый ТаблицаЗначений;  
	ТаблицаСортировки.Колонки.Добавить("ИмяЭлемента");
	ТаблицаСортировки.Колонки.Добавить("ИмяГруппы");
	ТаблицаСортировки.Колонки.Добавить("Порядок");
	ТаблицаСортировки.Колонки.Добавить("Настройка");
	Для Каждого ТекущаяНастройка Из НастройкиПриложения Цикл
		ЗначениеНастройки = ТекущаяНастройка.Значение;
		Если ЗначениеЗаполнено(ЗначениеНастройки.ИдентификаторКолонки) Тогда 
			ИмяЭлемента = ЗначениеНастройки.ИдентификаторКолонки;
		Иначе
			ИмяЭлемента = ТекущаяНастройка.Ключ;
		КонецЕсли;   
		Если ТаблицаСортировки.Найти(ИмяЭлемента, "ИмяЭлемента") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСортировки = ТаблицаСортировки.Добавить();       
		СтрокаСортировки.ИмяЭлемента = ИмяЭлемента;
		СтрокаСортировки.Настройка = ТекущаяНастройка;
		Если ЗначениеНастройки.Свойство("ГруппаФормы") И ЗначениеНастройки.ГруппаФормы <> Неопределено Тогда     
			СтрокаСортировки.ИмяГруппы = ЗначениеНастройки.ГруппаФормы;
		КонецЕсли;
		Если ЗначениеНастройки.Свойство("ПорядокВГруппе") И ЗначениеНастройки.ПорядокВГруппе <> Неопределено Тогда     
			СтрокаСортировки.Порядок = ЗначениеНастройки.ПорядокВГруппе;
		КонецЕсли;  
	КонецЦикла;  
	ТаблицаСортировки.Сортировать("Порядок");
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивОбязательныхНастроек = Новый Массив;    
	МассивНастроекСоСпискомДоступныхЗначений = Новый Массив;    
	Для Каждого СтрокаСортировки Из ТаблицаСортировки Цикл
		ИмяНастройки = СтрокаСортировки.Настройка.Ключ;
		ЗначениеНастройки = СтрокаСортировки.Настройка.Значение;
		Если ЗначениеНастройки.ЭтоОтбор Тогда
			Продолжить;
		ИначеЕсли Не НастройкаИспользуется(ЗначениеНастройки) Тогда
			Продолжить;
		КонецЕсли;
		ПолеКомпоновки = НастройкиКомпоновки.ДоступныеПоляОтбора.НайтиПоле(
			Новый ПолеКомпоновкиДанных(ИмяНастройки));
		Если ПолеКомпоновки <> Неопределено Тогда
			Если ЗначениеЗаполнено(ЗначениеНастройки.ИдентификаторКолонки) Тогда 
				НовыйРеквизит = Новый РеквизитФормы(
				ЗначениеНастройки.ИдентификаторКолонки, ПолеКомпоновки.Тип, "ТаблицаНастроекВидовДокументов", ЗначениеНастройки.ЗаголовокКолонки); 
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);   
				НастройкиПриложения.Вставить(ЗначениеНастройки.ИдентификаторКолонки, ЗначениеНастройки);      
			Иначе	
				НовыйРеквизит = Новый РеквизитФормы(
				ИмяНастройки, ПолеКомпоновки.Тип,, ПолеКомпоновки.Заголовок);
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
				Если ЗначениеНастройки.ОбязательноеЗаполнение Тогда
					МассивОбязательныхНастроек.Добавить(ИмяНастройки);
				КонецЕсли;  
				Если ПолеКомпоновки.ДоступныеЗначения <> Неопределено 
					И ПолеКомпоновки.ДоступныеЗначения.Количество() > 0 Тогда
					МассивНастроекСоСпискомДоступныхЗначений.Добавить(ИмяНастройки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;    
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);   
	
	Для Каждого ДобавленныйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		НовыйЭлемент = ДобавленныйРеквизит.Имя;
		Если Форма.Элементы.Найти(НовыйЭлемент) = Неопределено Тогда   
			ЭлементСоответствия = НастройкиПриложения.Получить(НовыйЭлемент);     
			Если Не ЗначениеЗаполнено(ЭлементСоответствия.ИдентификаторКолонки) Тогда
				ГруппаНовогоЭлемента = ГруппаФормы;
				Если ТипЗнч(ЭлементСоответствия.ГруппаФормы) = Тип("Структура")  Тогда 
					ГруппаНастроекФормы = ЭлементСоответствия.ГруппаФормы;       
					ЭлементГруппаНастроекФормы = Форма.Элементы.Найти(ГруппаНастроекФормы.Имя) ;
					Если ЭлементГруппаНастроекФормы = Неопределено Тогда
						ЭлементГруппаНастроекФормы = Форма.Элементы.Добавить(ГруппаНастроекФормы.Имя, Тип("ГруппаФормы"), ГруппаФормы);   
						ЭлементГруппаНастроекФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;    
						ЭлементГруппаНастроекФормы.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;      
						Если ГруппаНастроекФормы.Свойство("Горизонтально") И ГруппаНастроекФормы.Горизонтально Тогда
							ЭлементГруппаНастроекФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;    
						Иначе
							ЭлементГруппаНастроекФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;    
						КонецЕсли;
						ЭлементГруппаНастроекФормы.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
						Если ЗначениеЗаполнено(ГруппаНастроекФормы.Заголовок) Тогда
							ЭлементГруппаНастроекФормы.Заголовок = ГруппаНастроекФормы.Заголовок;                                              
							ЭлементГруппаНастроекФормы.ОтображатьЗаголовок = Истина;      
						КонецЕсли;   
						ЭлементГруппаНастроекФормы.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаФормы;
						ЭлементГруппаНастроекФормы.ШрифтЗаголовка = ШрифтыСтиля.ОбычныйШрифтТекста;
					КонецЕсли;
					ГруппаНовогоЭлемента = ЭлементГруппаНастроекФормы;
				КонецЕсли;
				
				ЭлементФормы = Форма.Элементы.Добавить(НовыйЭлемент, Тип("ПолеФормы"), ГруппаНовогоЭлемента);
				ЭлементФормы.ПутьКДанным = НовыйЭлемент;     
				Если МассивНастроекСоСпискомДоступныхЗначений.Найти(НовыйЭлемент) <> Неопределено Тогда    
					ПолеКомпоновки = НастройкиКомпоновки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(НовыйЭлемент));
					ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;     
					ЭлементФормы.РедактированиеТекста = Ложь;
					ЭлементФормы.РежимВыбораИзСписка = Истина;
					Для Каждого ЭлементСписка Из ПолеКомпоновки.ДоступныеЗначения Цикл
						ЭлементФормы.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
					КонецЦикла;
				ИначеЕсли ТипЗнч(Форма[НовыйЭлемент]) = Тип("Булево") Тогда
					ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
					ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				Иначе
					ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
					Если МассивОбязательныхНастроек.Найти(НовыйЭлемент) <> Неопределено Тогда
						ЭлементФормы.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
				КонецЕсли;        
				ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
			Иначе
				ЭлементФормы = Форма.Элементы.Добавить(НовыйЭлемент, Тип("ПолеФормы"), Форма.Элементы.ТаблицаНастроекВидовДокументов);   
				ЭлементФормы.ПутьКДанным = "ТаблицаНастроекВидовДокументов."+НовыйЭлемент;     
				ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
				ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
			КонецЕсли;          
			
			ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ОбрабатыватьПоведениеПриИзменении");  
			
			Если ЭлементСоответствия.ОбрабатыватьПоведениеАвтоПодбор Тогда
				ЭлементФормы.УстановитьДействие("АвтоПодбор", "Подключаемый_ОбрабатыватьПоведениеАвтоПодбор");
			КонецЕсли;
			
			Если ЭлементСоответствия.Свойство("Подсказка") И ЗначениеЗаполнено("ЭлементСоответствия.Подсказка")  Тогда   
				ЭлементФормы.Подсказка = ЭлементСоответствия.Подсказка;     
			КонецЕсли;      
			
			Если ЭлементСоответствия.ВыбиратьГруппу Тогда   
				ЭлементФормы.ВыборГруппИЭлементов  = ГруппыИЭлементы.Группы;     
			КонецЕсли;   
			
		КонецЕсли;
	КонецЦикла;  
	
	
КонецПроцедуры

Функция ЗначениеЭлементаОтбораИзПользовательскихНастроек(КомпоновщикНастроек, ИмяЭлемента)
	
	Если ТипЗнч(КомпоновщикНастроек) <> Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор,
		ИмяЭлемента);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(ИмяЭлемента,
			ИдентификаторПользовательскойНастройки);
		ЭлементПользовательскихНастроек = 
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскихНастроек <> Неопределено 
			И ЭлементПользовательскихНастроек.Использование Тогда
				Возврат ЭлементПользовательскихНастроек.ПравоеЗначение;
		Иначе
			Если ЭлементПользовательскихНастроек = Неопределено
				И ЭлементОтбора.Использование Тогда
					Возврат ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция НастройкиПриложения(МобильноеПриложение)
	
	НастройкиПриложения = Новый Соответствие;
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриОпределенииНастроекПриложения(
		МобильноеПриложение, НастройкиПриложения);
		
	Возврат НастройкиПриложения;
	
КонецФункции

Процедура ОпределитьСписокВыбораНаименования(Форма, МобильноеПриложение, НастройкиПриложения)

	Наименование = Форма.Элементы.Наименование;
	Наименование.СписокВыбора.Очистить();

	Если Не ЗначениеЗаполнено(МобильноеПриложение) Тогда
		Наименование.КнопкаВыпадающегоСписка = Ложь;
		Возврат;
	КонецЕсли;
	
	УправлениеМобильнымиПриложениямиПереопределяемый.ПриОпределенииСпискаВыбораНаименования(
		Форма, Наименование, МобильноеПриложение, НастройкиПриложения);
		
	Наименование.КнопкаВыпадающегоСписка = Наименование.СписокВыбора.Количество() > 0;

КонецПроцедуры

Процедура УстановитьОтборыКомпоновщикаВРеквизитыФормы(Форма, КомпоновщикНастроек, НастройкиПриложения, СоответствиеНастроекВидовДокументов)
	
	Для каждого ТекущаяНастройка Из НастройкиПриложения Цикл
		ИмяРеквизита = ТекущаяНастройка.Ключ;
		ЗначениеНастройки = ТекущаяНастройка.Значение;
		Если НЕ НастройкаИспользуется(ЗначениеНастройки) Тогда
			УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек, ИмяРеквизита);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеНастройки.ИдентификаторКолонки) Тогда     
			СоответствиеНастроекВидовДокументов.Вставить(ИмяРеквизита, ЗначениеЭлементаОтбораИзПользовательскихНастроек(КомпоновщикНастроек, ИмяРеквизита));
			УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек, ИмяРеквизита);
		ИначеЕсли НЕ ЗначениеНастройки.ЭтоОтбор Тогда
			Форма[ИмяРеквизита] = ЗначениеЭлементаОтбораИзПользовательскихНастроек(КомпоновщикНастроек, ИмяРеквизита);
			УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек, ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкаИспользуется(ЗначениеНастройки)
	
	ИспользованиеНастройки = Истина;
	Если НЕ ПустаяСтрока(ЗначениеНастройки.ИмяФункциональнойОпции) Тогда
		Если НЕ ПолучитьФункциональнуюОпцию(ЗначениеНастройки.ИмяФункциональнойОпции) Тогда
			ИспользованиеНастройки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИспользованиеНастройки;
	
КонецФункции

Процедура ОбработатьПоведениеЭлементаПриИзменении(Форма, ИмяНастройки, НачальнаяНастройка = Ложь)

	Если ИмяНастройки = "ИспользоватьДиспетчеризациюЗаданий" Тогда
		Кладовщик = Форма.Элементы.Кладовщик;
		Кладовщик.АвтоОтметкаНезаполненного = Форма.ИспользоватьДиспетчеризациюЗаданий;
		Кладовщик.Видимость = Форма.ИспользоватьДиспетчеризациюЗаданий;
	ИначеЕсли ИмяНастройки = "ВидЗаказаПокупателяДляСборки" Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			Форма.СостояниеЗаказаДляСборки = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(Форма.ВидЗаказаПокупателяДляСборки);
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "ВидЗаказаПокупателяСобран" Тогда 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			Форма.СостояниеЗаказаСобран = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(Форма.ВидЗаказаПокупателяСобран);
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "ВидЗаказаПокупателяЗаданиеТорговомуПредставителю" Тогда 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			Форма.СостояниеЗаданиеТорговомуПредставителю = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(Форма.ВидЗаказаПокупателяЗаданиеТорговомуПредставителю);
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "РегистрироватьОплатыПКО" Тогда
		
		Касса = Форма.Элементы.Касса;
		Касса.АвтоОтметкаНезаполненного = Форма.РегистрироватьОплатыПКО;
		Касса.Видимость = Форма.РегистрироватьОплатыПКО;  
		
		СтатьяДДСНаличные = Форма.Элементы.СтатьяДДСНаличные;
		СтатьяДДСНаличные.АвтоОтметкаНезаполненного = Форма.РегистрироватьОплатыПКО;
		СтатьяДДСНаличные.Видимость = Форма.РегистрироватьОплатыПКО;   
	ИначеЕсли ИмяНастройки = "РегистрироватьОплатыПоПлатежнымКартам" Тогда

		Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКартами") Тогда
			ЭквайринговыйТерминал = Форма.Элементы.ЭквайринговыйТерминал;
			ЭквайринговыйТерминал.АвтоОтметкаНезаполненного = Форма.РегистрироватьОплатыПоПлатежнымКартам;
			ЭквайринговыйТерминал.Видимость = Форма.РегистрироватьОплатыПоПлатежнымКартам;
			
			СтатьяДДСЭквайринг = Форма.Элементы.СтатьяДДСЭквайринг; 
			СтатьяДДСЭквайринг.АвтоОтметкаНезаполненного = Форма.РегистрироватьОплатыПоПлатежнымКартам;
			СтатьяДДСЭквайринг.Видимость = Форма.РегистрироватьОплатыПоПлатежнымКартам;
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "ИспользоватьСвободныйВводПоступлений" Тогда    
		Если Форма.ИспользоватьСвободныйВводПоступлений Тогда
			Форма.ВыгружатьВсеТовары = Истина;
		КонецЕсли;
	ИначеЕсли ИмяНастройки = "ИспользоватьСвободныйВводСборок" Тогда
		Если Форма.ИспользоватьСвободныйВводСборок Тогда
			Форма.ВыгружатьВсеТовары = Истина;
		КонецЕсли;
	КонецЕсли;  

	Если Не НачальнаяНастройка Тогда
		Форма.Модифицированность = Истина;
		Форма.БылаМодифицированность = Истина;
	КонецЕсли;

КонецПроцедуры  

Процедура УстановитьНачальныеНастройкиФормы(Форма, МобильноеПриложение, КомпоновщикНастроек, СоответствиеНастроекВидовДокументов)

	Если ЗначениеЗаполнено(МобильноеПриложение) И МобильноеПриложение.ВариантНастройки = "Кладовщик" Тогда 
		ОбработатьПоведениеЭлементаПриИзменении(Форма, "ИспользоватьДиспетчеризациюЗаданий", Истина);    
		
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда         
			Форма.Магазин = Справочники.СтруктурныеЕдиницы.ОсновнойСклад();   
			Форма.СостояниеЗаказаСобран = Справочники.СостоянияЗаказовПокупателей.Завершен;   
			Форма.СостояниеЗаказаПоставщикуПринят = Справочники.СостоянияЗаказовПоставщикам.Завершен;   

			ШаблонНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, %2'"),
				МобильноеПриложение,
				?(ЗначениеЗаполнено(Форма.Магазин), Форма.Магазин, НСтр("ru = '<Склад не указан>'")));      
			Форма.Элементы.Наименование.СписокВыбора.Очистить();				
			Форма.Элементы.Наименование.СписокВыбора.Добавить(ШаблонНаименования);
		КонецЕсли;       
		
		НастройкиКомпоновки = КомпоновщикНастроек.Настройки;     
		
		МассивДобавляемыхСтрок = Новый Массив;       
		МассивДобавляемыхСтрок.Добавить("Приемка");
		МассивДобавляемыхСтрок.Добавить("Сборка");
		МассивДобавляемыхСтрок.Добавить("Пересчет");

		Для Каждого ДобавляемаяСтрока Из МассивДобавляемыхСтрок Цикл     
			СтрокаТаблицы = Форма.ТаблицаНастроекВидовДокументов.Добавить();    
			СтрокаТаблицы.ВидДокумента = ДобавляемаяСтрока;
			Для Каждого НастройкаВидаДокумента Из СоответствиеНастроекВидовДокументов Цикл  
				Если Найти(НастройкаВидаДокумента.Ключ,ДобавляемаяСтрока) > 0 Тогда
					ИмяНастройки = СтрЗаменить(НастройкаВидаДокумента.Ключ, ДобавляемаяСтрока+"_", "");
					СтрокаТаблицы[ИмяНастройки] = НастройкаВидаДокумента.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла; 
		
	ИначеЕсли ЗначениеЗаполнено(МобильноеПриложение) И МобильноеПриложение.ВариантНастройки = "Заказы" Тогда 
		ОбработатьПоведениеЭлементаПриИзменении(Форма, "РегистрироватьОплатыПКО", Истина);    
		ОбработатьПоведениеЭлементаПриИзменении(Форма, "РегистрироватьОплатыПоПлатежнымКартам", Истина);    
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			СостояниеЗаданиеТорговомуПредставителю = Форма.Элементы.СостояниеЗаданиеТорговомуПредставителю;
			СостояниеЗаданиеТорговомуПредставителю.РежимВыбораИзСписка = Истина;
			СостояниеЗаданиеТорговомуПредставителю.СписокВыбора.Очистить(); 
			Запрос = Новый Запрос;   
			Запрос.УстановитьПараметр("СостояниеЗавершен", Справочники.СостоянияЗаказовПокупателей.Завершен);
			Запрос.Текст = "ВЫБРАТЬ
			               |	СостоянияЗаказовПокупателей.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.СостоянияЗаказовПокупателей КАК СостоянияЗаказовПокупателей
			               |ГДЕ
			               |	СостоянияЗаказовПокупателей.Ссылка <> &СостояниеЗавершен";    
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда    
				МассивСостояний = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
				СостояниеЗаданиеТорговомуПредставителю.СписокВыбора.ЗагрузитьЗначения(МассивСостояний);
			КонецЕсли;    
		КонецЕсли;  
			
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда         
			 Форма.Касса = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию();      
			 Форма.СтатьяДДСНаличные = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;    
			 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКартами") Тогда
				 Форма.СтатьяДДСЭквайринг = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;  
			 КонецЕсли;      
			 
			ШаблонНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
				Форма.Объект.Пользователь, МобильноеПриложение);
			Форма.Элементы.Наименование.СписокВыбора.Очистить();				
			Форма.Элементы.Наименование.СписокВыбора.Добавить(ШаблонНаименования);
		КонецЕсли;  
		
		Форма.Элементы.ТаблицаНастроекВидовДокументов.Видимость = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(МобильноеПриложение) И МобильноеПриложение.ВариантНастройки = "ПроверкаЦенников" Тогда 
		ИспользоватьПодключаемоеОборудование = Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Получить();
		Если Не ИспользоватьПодключаемоеОборудование Тогда
			Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Установить(Истина);
		КонецЕсли;
		
		ИспользоватьОбменСПодключаемымОборудованиемOffline = Константы.ИспользоватьОбменСПодключаемымОборудованиемOffline.Получить();
		Если Не ИспользоватьОбменСПодключаемымОборудованиемOffline Тогда
			Константы.ИспользоватьОбменСПодключаемымОборудованиемOffline.Установить(Истина);
		КонецЕсли;  
		Если НЕ ЗначениеЗаполнено(Форма.РабочееМесто) Тогда
			Форма.РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();       
		КонецЕсли; 
		
		Форма.Элементы.ТаблицаНастроекВидовДокументов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область МетодыИВыраженияСистемыКомпоновкиДанных

// Удаляет отбор из настроек и пользовательских настроек отчета.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек из которых будет удален отбор.
//  ИмяЭлемента - Строка - имя элемента, который будет удален.
//
Процедура УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) <> Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор, ИмяЭлемента);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		
		ЭлементПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскихНастроек <> Неопределено Тогда
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Удалить(ИдентификаторПользовательскойНастройки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти





