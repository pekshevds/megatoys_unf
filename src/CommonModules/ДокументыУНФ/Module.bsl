
#Область ПрограммныйИнтерфейс

// Обработчик события ПриИзменении поля ввода Дата на сервере.
// Присваивает реквизиту формы ДатаДокумента новое значение даты.
// Очищает номер документа при изменении его даты за границы периодичности.
// Устанавливает поле ДанныеДляИзмененияДаты.ВалютаКурсКратность для пересчета табличной части Предоплата.
// 
// Параметры:
//  ДанныеДляИзмененияДаты - см. ДокументыУНФКлиент.ДанныеДляИзмененияДаты
//  Форма - ФормаКлиентскогоПриложения
//  Объект - ДанныеФормыСтруктура
Процедура ДатаПриИзменении(ДанныеДляИзмененияДаты, Форма, Объект) Экспорт
	
	Форма.ДатаДокумента = Объект.Дата;
	
	ОчиститьНомерДокументаВСлучаеНеобходимости(Объект, ДанныеДляИзмененияДаты.ДатаПередИзменением);
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВалютаДокумента") Тогда
		Валюта = Объект.ВалютаДокумента;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВалютаРасчетов") Тогда
		Валюта = Форма.ВалютаРасчетов;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВалютаДенежныхСредств") Тогда
		Валюта = Объект.ВалютаДенежныхСредств;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшЗначений") Тогда
		КэшЗначений = Форма.КэшЗначений;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КэшЗначений, "ВалютаРасчетов") Тогда
			Валюта = КэшЗначений.ВалютаРасчетов;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляИзмененияДаты.ВалютаКурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Объект.Дата);
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Организация на сервере.
// Очищает номер документа.
// Заполняет поле "Компания" в форме документа.
// Заполняет поля "ПодписьРуководителя" и "Подпись главного бухгалтера" в документе.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Объект - ДанныеФормыСтруктура
Процедура ОрганизацияПриИзменении(Форма, Объект) Экспорт
	
	ЗначенияДляЗаполненияФормы = Новый Структура;
	ЗначенияДляЗаполненияФормы.Вставить("Компания", Константы.УчетПоКомпании.Компания(Объект.Организация));
	
	ЗаполнитьЗначенияСвойств(Форма, ЗначенияДляЗаполненияФормы);
	
	ЗначенияДляЗаполненияОбъекта = Новый Структура;
	ЗначенияДляЗаполненияОбъекта.Вставить("Номер", "");
	
	ПодписьДокументовУНФ.ДополнитьПодписямиОрганизации(ЗначенияДляЗаполненияОбъекта, Объект);
	
	НалогиУНФ.ЗаполнитьНДСВключенВСтоимостьВДокументе(Объект);
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияДляЗаполненияОбъекта);

КонецПроцедуры

// Заполняет структуру настроек сброса количества персональными настройками пользователя
//
// Параметры:
//  Настройки - см. ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества
//
Процедура ЗаполнитьНастройкиКоличества(Настройки) Экспорт
	
	НастройкаУстанавливатьКоличество = 
		УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("СбрасыватьКоличествоПриИзмененииНоменклатуры");
		
	Если НастройкаУстанавливатьКоличество = Перечисления.ВариантыСбросаКоличества.НеСбрасывать Тогда
		СбрасыватьКоличество = Ложь;
		НовоеКоличество = 1;
	ИначеЕсли НастройкаУстанавливатьКоличество = Перечисления.ВариантыСбросаКоличества.ДоНуля Тогда
		СбрасыватьКоличество = Истина;
		НовоеКоличество = 0;
	Иначе
		СбрасыватьКоличество = Истина;
		НовоеКоличество = 1;
	КонецЕсли;
	
	ЗапрашиватьСбросКоличества = НЕ ЗначениеЗаполнено(НастройкаУстанавливатьКоличество);
	НастройкаСбросКоличества = ХранилищеСистемныхНастроек.Загрузить("ОбщиеНастройкиФорм", "ЗапрашиватьСбросКоличества");
	Если НастройкаСбросКоличества <> Неопределено Тогда
		ЗапрашиватьСбросКоличества = НастройкаСбросКоличества;
	КонецЕсли;
	
	Настройки.СбрасыватьКоличество = СбрасыватьКоличество;
	Настройки.НовоеКоличествоПриИзмененииНоменклатуры = НовоеКоличество;
	Настройки.ЗапрашиватьСбросКоличества = ЗапрашиватьСбросКоличества;
	
КонецПроцедуры

#Область СтруктураПодчинения

// Заполняет переданное дерево структурой подчинения от переданного документа.
//
// Параметры:
//  Документ - ДокументСсылка 
//  Дерево - ДеревоЗначений - дерево, которое заполнят структурой подчиненности 
//  УжеВСписке - Соответствие - хранит ссылки на документы, уже выведенные в дерево 
//  ТолькоСсылки - Булево - показывает, надо ли выводить все дерево или построить дерево только из ссылок
Процедура ЗаполнитьДеревоСтруктуройПодчинения(Знач Документ, Дерево, УжеВСписке, ТолькоСсылки = Ложь) Экспорт
	
	КэшРеквизитовДокументов = Новый Соответствие;
	ВывестиРодительскиеДокументы(Документ, Дерево, УжеВСписке, ТолькоСсылки);
	ВывестиПодчиненныеДокументы(Дерево, КэшРеквизитовДокументов, УжеВСписке, ТолькоСсылки);
	
КонецПроцедуры

// Возвращает список реквизитов переданного документа, внося его в переданный список.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка 
//  УжеВСписке - Соответствие - хранит ссылки на документы, уже выведенные в дерево
//
// Возвращаемое значение:
//  СписокРеквизитов - СписокЗначений
Функция СписокРеквизитовДокумента(ДокументСсылка, УжеВСписке) Экспорт
	
	СписокРеквизитов = Новый СписокЗначений;
	ЗаполнитьСписокРеквизитовДокументаСКэшем(СписокРеквизитов, ДокументСсылка.Метаданные(), УжеВСписке, ДокументСсылка);
	
	Возврат СписокРеквизитов;
	
КонецФункции

// Процедура выполняет вывод родительских документов
//
// Параметры:
//  Документ - ДокументСсылка
//  Дерево - ДеревоЗначений - дерево, которое заполнят структурой подчиненности 
//  УжеВСписке - Соответствие - хранит ссылки на документы, уже выведенные в дерево 
//  ТолькоСсылки - Булево - показывает, надо ли выводить все дерево или построить дерево только из ссылок
Процедура ВывестиРодительскиеДокументыОкончание(Документ, Дерево, УжеВСписке, ТолькоСсылки = Ложь) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	ДокументыСоВходящимиДанными = ДокументыСоВходящимиДанными();
	ЭтоДокументСВходящимНомеромИДатой = ДокументыСоВходящимиДанными.Найти(МетаданныеДокумента.Имя) <>  Неопределено;
	
	СтрокаДерева = Дерево.ПолучитьЭлементы().Добавить();
	Выборка = ВыборкаРодительскихДокументов(Документ, МетаданныеДокумента, ЭтоДокументСВходящимНомеромИДатой);
	Если Выборка.Следующий() Тогда
		
		ЭтоКорректировочноеУведомлениеОбОстатках = Ложь;
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров")
			И Выборка.НомерКорректировки > 0 Тогда
			ЭтоКорректировочноеУведомлениеОбОстатках = Истина;
		КонецЕсли;
		
		СтрокаДерева.Ссылка = Выборка.Ссылка;
		
		Если ТолькоСсылки Тогда
			Дерево = СтрокаДерева;
			Возврат;
		КонецЕсли;
		
		СтрокаДерева.ВидДокумента = Выборка.Метаданные;
		СтрокаДерева.ВалютаДокумента = Выборка.ВалютаДокумента;
		СтрокаДерева.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаДерева.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
		СтрокаДерева.Проведен = Выборка.Проведен;
		СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
		СтрокаДерева.ВидОперации = Выборка.ВидОперации;
		СтрокаДерева.ВходящееИсходящееСобытие = Выборка.ВходящееИсходящееСобытие;
		СтрокаДерева.Картинка = НомерКартинки(СтрокаДерева);
		СтрокаДерева.ПроведениеРазрешено = Выборка.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		СтрокаДерева.Организация = Выборка.Организация; 
		СтрокаДерева.Номер = Выборка.Номер; 
		СтрокаДерева.Ответственный = Выборка.Ответственный;
		
		Если ТипЗнч(СтрокаДерева.Ссылка) = Тип("ДокументСсылка.Событие") Тогда
			
			КонтрагентДокумента = КонтрагентДокументаСобытие(СтрокаДерева.Ссылка);
			Если КонтрагентДокумента = "Несколько" Тогда
				СтрокаДерева.НесколькоКонтрагентов = Истина;
			Иначе
				СтрокаДерева.Контрагент = КонтрагентДокумента;
			КонецЕсли;
			
		Иначе
			СтрокаДерева.Контрагент = Выборка.Контрагент;
		КонецЕсли;
		
		СтрокаДерева.Автор = Выборка.Автор;
		СтрокаДерева.СостояниеЗаказа = Выборка.СостояниеЗаказа;
		СтрокаДерева.Состояние = Выборка.Состояние;
		
		Если ЭтоДокументСВходящимНомеромИДатой Тогда
			
			НомерВходящий = ?(ЗначениеЗаполнено(Выборка.НомерВходящий), Выборка.НомерВходящий, "");
			
			ЛокализованныйФорматДата = "ДЛФ=Д";
			ДатаДокумента = Формат(Выборка.ДатаВходящего, ЛокализованныйФорматДата);
			Если ПустаяСтрока(ДатаДокумента) Тогда
				
				ДатаДокумента = Формат(Выборка.Ссылка.Дата, ЛокализованныйФорматДата);
				
			КонецЕсли;
			
			ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
			
			СтрокаДерева.ДокументПредставление = СтрШаблон(НСтр("ru ='%1 %2 (вх. %3) от %4'"), МетаданныеДокумента.Синоним, ПредставлениеНомера, НомерВходящий, ДатаДокумента);
			
		Иначе
			
			ПредставлениеДокумента = Выборка.Представление;
			
			Если ЭтоКорректировочноеУведомлениеОбОстатках Тогда
				ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, НСтр("ru='Уведомление'"), НСтр("ru='Корректировочное уведомление'"));
			КонецЕсли;
			
			СтрокаДерева.ДокументПредставление = ПредставлениеДокумента;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаДерева.Ссылка = Документ;
		Если ТолькоСсылки Тогда
			Дерево = СтрокаДерева;
			Возврат;
		КонецЕсли;
		СтрокаДерева.ВалютаДокумента = Выборка.ВалютаДокумента;
		СтрокаДерева.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаДерева.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
		СтрокаДерева.Проведен = Выборка.Проведен;
		СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
		СтрокаДерева.ВидОперации = Выборка.ВидОперации;
		СтрокаДерева.ВходящееИсходящееСобытие = Выборка.ВходящееИсходящееСобытие;
		СтрокаДерева.Картинка = НомерКартинки(СтрокаДерева);
		СтрокаДерева.ПроведениеРазрешено = Документ.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		СтрокаДерева.Организация = Выборка.Организация;
		СтрокаДерева.Номер = Выборка.Номер; 
		СтрокаДерева.Ответственный = Выборка.Ответственный;
		СтрокаДерева.ДокументПредставление = Строка(Документ);
		
		Если ТипЗнч(СтрокаДерева.Ссылка) = Тип("ДокументСсылка.Событие") Тогда
			
			КонтрагентДокумента = КонтрагентДокументаСобытие(СтрокаДерева.Ссылка);
			Если КонтрагентДокумента = "Несколько" Тогда
				СтрокаДерева.НесколькоКонтрагентов = Истина;
			Иначе
				СтрокаДерева.Контрагент = КонтрагентДокумента;
			КонецЕсли;
			
		Иначе
			СтрокаДерева.Контрагент = Выборка.Контрагент;
		КонецЕсли;
		
		СтрокаДерева.Автор = Выборка.Автор;
		СтрокаДерева.СостояниеЗаказа = Выборка.СостояниеЗаказа;
		СтрокаДерева.Состояние = Выборка.Состояние;
		
	КонецЕсли;
	
	Дерево = СтрокаДерева;
	
КонецПроцедуры

// Процедура осуществляет вывод подчиненных документов.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений 
//  КэшРеквизитовДокумента - Соответствие 
//  УжеВСписке - Соответствие - хранит ссылки на документы, уже выведенные в дерево 
//  ТолькоСсылки - Булево - показывает, надо ли выводить все дерево или построить дерево только из ссылок (по умолчанию - Ложь) 
//  ТекущийДокумент - ДокументСсылка - документ, для которого выводятся подчиненные элементы (по умолчанию Неопределено) 
Процедура ВывестиПодчиненныеДокументы(СтрокаДерева, КэшРеквизитовДокумента, УжеВСписке, ТолькоСсылки = Ложь, ТекущийДокумент = Неопределено) Экспорт
	
	Если ТекущийДокумент = Неопределено Тогда
		ТекущийДокумент = СтрокаДерева.Ссылка;
	КонецЕсли;
	
	Таблица = ПолучитьСписокПодчиненныхДокументов(ТекущийДокумент);
	КэшПоТипамДокументов = Новый Соответствие;
	
	ДокументыСоВходящимиДанными = ДокументыСоВходящимиДанными();
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;
		ИмяДокумента = МетаданныеДокумента.Имя;
		СинонимДокумента = МетаданныеДокумента.Синоним;
		
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента, КэшРеквизитовДокумента);
		
		СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
			КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	Если КэшПоТипамДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаПодчиненныхДокументов(КэшПоТипамДокументов, КэшРеквизитовДокумента);
	Пока Выборка.Следующий() Цикл
		
		ЭтоКорректировочноеУведомлениеОбОстатках = Ложь;
		Если Не ТолькоСсылки Тогда
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров")
				И Выборка.НомерКорректировки > 0 Тогда
				ЭтоКорректировочноеУведомлениеОбОстатках = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если УжеВСписке[Выборка.Ссылка] = Неопределено Тогда
			
			НоваяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			
			Если ТолькоСсылки Тогда
				УжеВСписке.Вставить(Выборка.Ссылка, Истина);
				ВывестиПодчиненныеДокументы(НоваяСтрока, КэшРеквизитовДокумента, УжеВСписке, ТолькоСсылки);
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока.СуммаДокумента = Выборка.СуммаДокумента;
			НоваяСтрока.ВалютаДокумента = Выборка.ВалютаДокумента;
			НоваяСтрока.Комментарий = ПреобразоватьМногострочнуюСтроку(Выборка.Комментарий);
			НоваяСтрока.Проведен = Выборка.Проведен;
			НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;
			НоваяСтрока.ВидОперации = Выборка.ВидОперации;
			НоваяСтрока.ВходящееИсходящееСобытие = Выборка.ВходящееИсходящееСобытие;
			НоваяСтрока.Картинка = НомерКартинки(НоваяСтрока);
			НоваяСтрока.ВидДокумента = Выборка.Метаданные;
			НоваяСтрока.ПроведениеРазрешено = Выборка.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
			НоваяСтрока.Организация = Выборка.Организация; 
			НоваяСтрока.Номер = Выборка.Номер; 
			НоваяСтрока.Ответственный = Выборка.Ответственный;
			
			Если ТипЗнч(НоваяСтрока.Ссылка) = Тип("ДокументСсылка.Событие") Тогда
				
				КонтрагентДокумента = КонтрагентДокументаСобытие(НоваяСтрока.Ссылка);
				Если КонтрагентДокумента = "Несколько" Тогда
					НоваяСтрока.НесколькоКонтрагентов = Истина;
				Иначе
					НоваяСтрока.Контрагент = КонтрагентДокумента;
				КонецЕсли;
				
			Иначе
				НоваяСтрока.Контрагент = Выборка.Контрагент;
			КонецЕсли;
			
			НоваяСтрока.Автор = Выборка.Автор;
			НоваяСтрока.СостояниеЗаказа = Выборка.СостояниеЗаказа;
			НоваяСтрока.Состояние = Выборка.Состояние;
			
			МетаданныеДокументаСсылки = Выборка.Ссылка.Метаданные();
			ЭтоДокументСВходящимНомеромИДатой = ДокументыСоВходящимиДанными.Найти(МетаданныеДокументаСсылки.Имя) <>  Неопределено;
			Если ЭтоДокументСВходящимНомеромИДатой Тогда
				
				НомерВходящий = ?(ЗначениеЗаполнено(Выборка.НомерВходящий), Выборка.НомерВходящий, "<..>");
				
				ЛокализованныйФорматДата = "ДЛФ=Д";
				ДатаДокумента = Формат(Выборка.ДатаВходящего, ЛокализованныйФорматДата);
				Если ПустаяСтрока(ДатаДокумента) Тогда
					
					ДатаДокумента = Формат(Выборка.Ссылка.Дата, ЛокализованныйФорматДата);
					
				КонецЕсли;
				
				ПредставлениеНомера = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
				
				НоваяСтрока.ДокументПредставление = СтрШаблон(НСтр("ru ='%1 %2 (вх. %3) от %4'"), КэшПоТипамДокументов[Выборка.Метаданные].Синоним, ПредставлениеНомера, НомерВходящий, ДатаДокумента);
				
			Иначе
				
				ПредставлениеДокумента = Выборка.Представление;
				
				Если ЭтоКорректировочноеУведомлениеОбОстатках Тогда
					ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, НСтр("ru='Уведомление'"), НСтр("ru='Корректировочное уведомление'"));
				КонецЕсли;
				
				НоваяСтрока.ДокументПредставление = ПредставлениеДокумента;
				
				
			КонецЕсли;
			
			УжеВСписке.Вставить(Выборка.Ссылка, Истина);
			ВывестиПодчиненныеДокументы(НоваяСтрока, КэшРеквизитовДокумента, УжеВСписке, ТолькоСсылки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив наименований типов документов со входящими данными.
//
// Возвращаемое значение:
//  ДокументыСоВходящимиДанными - Массив
Функция ДокументыСоВходящимиДанными() Экспорт
	
	ДокументыСоВходящимиДанными = Новый Массив(5);
	ДокументыСоВходящимиДанными[0] = "ПриходнаяНакладная";
	ДокументыСоВходящимиДанными[1] = "СчетФактураПолученный";
	ДокументыСоВходящимиДанными[2] = "ЗаказПоставщику";
	ДокументыСоВходящимиДанными[3] = "СчетНаОплатуПоставщика";
	ДокументыСоВходящимиДанными[4] = "ДополнительныеРасходы";
	
	Возврат ДокументыСоВходящимиДанными;
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции 

// Устарела. Будет удалена в следующей версии программы.
// Определяет ситуацию, когда при изменении своей даты документ оказывается в другом периоде нумерации
// документов, в этом случае следует присвоить документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - Дата - новая дата документа 
//  НачальнаяДатаДокумента - Дата - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат, следует присвоить новый номер когда разность дат ненулевая
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	РазностьДат = РазностьДат(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента);
	Возврат РазностьДат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Хозяйственные операции
	ДокументМетаданные = Источник.Метаданные();
	Если ДокументМетаданные.Реквизиты.Найти("ХозяйственнаяОперация") <> Неопределено Тогда
		Если ДокументМетаданные.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
			Источник.ХозяйственнаяОперация = ХозяйственнаяОперация(Источник.ВидОперации, Источник.Ссылка);
		ИначеЕсли ДокументМетаданные.Реквизиты.Найти("ВидДоговора") <> Неопределено Тогда
			Источник.ХозяйственнаяОперация = ХозяйственнаяОперация(Источник.ВидДоговора, Источник.Ссылка);
		Иначе
			Источник.ХозяйственнаяОперация = ХозяйственнаяОперация(ДокументМетаданные.Имя, Источник.Ссылка);
		КонецЕсли;
	КонецЕсли;
	// Конец Хозяйственные операции
	
	ДокументыУНФПереопределяемый.ПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Функция ПредставленияОбъектовМетаданных() Экспорт
	
	Результат = Новый Соответствие;
	Для Каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		Результат[Документы[ОбъектМетаданных.Имя].ПустаяСсылка()] = ОбъектМетаданных.Представление();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Когда при изменении даты документ оказывается в другом периоде нумерации, процедура очищает номер документа,
// чтобы при записи документу присвоился новый уникальный номер.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура
//  ДатаПередИзменением - Дата
Процедура ОчиститьНомерДокументаВСлучаеНеобходимости(Объект, ДатаПередИзменением)
	
	РазностьДат = РазностьДат(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	Если РазностьДат <> 0 Тогда
		Объект.Номер = "";
	КонецЕсли;
	
КонецПроцедуры

Функция РазностьДат(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента)
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		РазностьДат = 0;
	КонецЕсли;
	
	Возврат РазностьДат
	
КонецФункции

Функция ХозяйственнаяОперация(ВидОперации, СсылкаНаДокумент)
	
	Возврат ХозяйственныеОперацииСервер.ХозяйственнаяОперацияПоВидуОперацииДокумента(ВидОперации, СсылкаНаДокумент);
	
КонецФункции

#Область СтруктураПодчинения

// Процедура выполняет вывод родительских документов.
//
Процедура ВывестиРодительскиеДокументы(ДокументСсылка, Дерево, УжеВСписке, ТолькоСсылки = Ложь)
	
	СписокРеквизитов = СписокРеквизитовДокумента(ДокументСсылка, УжеВСписке);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеДокументы(СписокРеквизитов[0].Значение, Дерево, УжеВСписке, ТолькоСсылки);
	КонецЕсли;
	
	ВывестиРодительскиеДокументыОкончание(ДокументСсылка, Дерево, УжеВСписке, ТолькоСсылки);
	
КонецПроцедуры

// Возвращает выборку родительских документов по данному документу
Функция ВыборкаРодительскихДокументов(ДокументСсылка, МетаданныеДокумента, ЭтоДокументСВходящимНомеромИДатой = Ложь)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, #Валюта, #Сумма, 
	|#Организация, #ДатаВходящего, #Номер, #НомерВходящий, #Комментарий, #Ответственный, #Контрагент,
	|#СостояниеЗаказа, #Автор, #ВидОперации, #Состояние, #ВходящееИсходящееСобытие, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
	| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДенежныхСредств КАК ВалютаДокумента");
	// Эквайринг
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаРасчетов") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаРасчетов КАК ВалютаДокумента");
	// Конец Эквайринг
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние,", "#Состояние, #НомерКорректировки,");
	Если МетаданныеДокумента.Реквизиты.Найти("НомерКорректировки") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерКорректировки", "НомерКорректировки КАК НомерКорректировки");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерКорректировки", "NULL КАК НомерКорректировки");
	КонецЕсли;
	
	Если МетаданныеДокумента.Имя = "СчетФактура"
		ИЛИ МетаданныеДокумента.Имя = "СчетФактураПолученный" Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента + СуммаНДСДокумента КАК СуммаДокумента");
		
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
		
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Всего") <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "Всего КАК СуммаДокумента");
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "0 КАК СуммаДокумента");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "Организация КАК Организация");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "NULL КАК Организация");
	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "Ответственный КАК Ответственный");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "NULL КАК Ответственный");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("СостояниеЗаказа") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "СостояниеЗаказа КАК СостояниеЗаказа");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "NULL КАК СостояниеЗаказа");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Состояние") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "Состояние КАК Состояние");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Выполнена") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", 
			"ВЫБОР КОГДА Выполнена ТОГДА &ТекстВыполненнойЗадачи ИНАЧЕ &ТекстНеВыполненнойЗадачи КОНЕЦ КАК Состояние");
		Запрос.УстановитьПараметр("ТекстВыполненнойЗадачи", НСтр("ru='Выполнена'"));
		Запрос.УстановитьПараметр("ТекстНеВыполненнойЗадачи", НСтр("ru='Не выполнена'"));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "NULL КАК Состояние");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Автор") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "Автор КАК Автор");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "NULL КАК Автор");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "ВидОперации КАК ВидОперации");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ТипСобытия") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", 
			"ТипСобытия КАК ВидОперации");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "NULL КАК ВидОперации");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВходящееИсходящееСобытие") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееСобытие", 
			"ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееСобытие", "NULL КАК ВходящееИсходящееСобытие");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "Контрагент КАК Контрагент");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "NULL КАК Контрагент");
	КонецЕсли;
	
	СтрокаЗамены = СтрШаблон("%1 КАК ДатаВходящего", ?(ЭтоДокументСВходящимНомеромИДатой, "ДатаВходящегоДокумента", "Null"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДатаВходящего", СтрокаЗамены);
	
	СтрокаЗамены = СтрШаблон("%1 КАК НомерВходящий", ?(ЭтоДокументСВходящимНомеромИДатой, "НомерВходящегоДокумента", "Null"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерВходящий", СтрокаЗамены);
	
	Если Найти(МетаданныеДокумента.ПолноеИмя(),"Документ") > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "NULL КАК Номер");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Комментарий КАК Комментарий");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Тема") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", 
			"ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Тема) = ТИП(Справочник.ТемыСобытий) ТОГДА ВЫРАЗИТЬ(Тема КАК Справочник.ТемыСобытий).Наименование ИНАЧЕ ВЫРАЗИТЬ(Тема КАК СТРОКА) КОНЕЦ КАК Комментарий");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Описание") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Описание КАК Комментарий");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", """"" КАК Комментарий");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Возвращает выборку подчиненных документов по данному документу
Функция ВыборкаПодчиненныхДокументов(КэшПоТипамДокументов, КэшРеквизитовДокумента)
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение Из КэшПоТипамДокументов Цикл
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
		|ВЫБРАТЬ ", "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|Дата, Ссылка, Проведен, ПометкаУдаления, Представление,  """ + КлючИЗначение.Ключ + """ КАК Метаданные, #Валюта, #Сумма, #Организация, #ДатаВходящего, 
		|#НомерВходящий, #Номер, #Комментарий, #Ответственный, #СостояниеЗаказа, #Автор, #ВидОперации, #ВходящееИсходящееСобытие, #Контрагент, #Состояние 
		|ИЗ Документ." + КлючИЗначение.Ключ + "
		|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";  
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВалютаДокумента"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
		ИначеЕсли КэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВалютаДенежныхСредств"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДенежныхСредств КАК ВалютаДокумента");
			// Эквайринг
		ИначеЕсли КэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВалютаРасчетов"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаРасчетов КАК ВалютаДокумента");
			// Конец Эквайринг
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние ", "#Состояние, #НомерКорректировки");
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["НомерКорректировки"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерКорректировки", "НомерКорректировки КАК НомерКорректировки");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерКорректировки", "NULL КАК НомерКорректировки");
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "СчетФактура"
			ИЛИ КлючИЗначение.Ключ = "СчетФактураПолученный" Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента + СуммаНДСДокумента КАК СуммаДокумента");
			
		ИначеЕсли КэшРеквизитовДокумента[КлючИЗначение.Ключ]["СуммаДокумента"] Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
			
		ИначеЕсли КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Всего"] Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "Всего КАК СуммаДокумента");
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "0 КАК СуммаДокумента");
			
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Организация"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "Организация КАК Организация");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Организация", "NULL КАК Организация");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["ДатаВходящего"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДатаВходящего", "ДатаВходящегоДокумента КАК ДатаВходящего");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДатаВходящего", "NULL КАК ДатаВходящего");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["НомерВходящий"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерВходящий", "НомерВходящегоДокумента КАК НомерВходящий");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НомерВходящий", "NULL КАК НомерВходящий");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Номер"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "Номер КАК Номер");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Номер", "NULL КАК Номер");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Ответственный"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "Ответственный КАК Ответственный");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ответственный", "NULL КАК Ответственный");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["СостояниеЗаказа"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "СостояниеЗаказа КАК СостояниеЗаказа");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СостояниеЗаказа", "NULL КАК СостояниеЗаказа");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВходящееИсходящееСобытие"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееСобытие", "ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееСобытие", "NULL КАК ВходящееИсходящееСобытие");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Состояние"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "Состояние КАК Состояние");
		ИначеЕсли КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Выполнена"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", 
			"ВЫБОР КОГДА Выполнена ТОГДА &ТекстВыполненнойЗадачи ИНАЧЕ &ТекстНеВыполненнойЗадачи КОНЕЦ КАК Состояние");
			Запрос.УстановитьПараметр("ТекстВыполненнойЗадачи", НСтр("ru='Выполнена'"));
			Запрос.УстановитьПараметр("ТекстНеВыполненнойЗадачи", НСтр("ru='Не выполнена'"));
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Состояние", "NULL КАК Состояние");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Автор"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "Автор КАК Автор");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Автор", "NULL КАК Автор");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВидОперации"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "ВидОперации КАК ВидОперации");
		ИначеЕсли КэшРеквизитовДокумента[КлючИЗначение.Ключ]["ТипСобытия"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", 
			"ТипСобытия КАК ВидОперации");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВидОперации", "NULL КАК ВидОперации");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Контрагент"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "Контрагент КАК Контрагент");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Контрагент", "NULL КАК Контрагент");
		КонецЕсли;
		
		Если КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Комментарий"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Комментарий КАК Комментарий");
		ИначеЕсли КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Тема"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", 
			"ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Тема) = ТИП(Справочник.ТемыСобытий) ТОГДА ВЫРАЗИТЬ(Тема КАК Справочник.ТемыСобытий).Наименование ИНАЧЕ ВЫРАЗИТЬ(Тема КАК СТРОКА) КОНЕЦ КАК Комментарий");
		ИначеЕсли КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Описание"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", "Описание КАК Комментарий");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Комментарий", """"" КАК Комментарий");
		КонецЕсли;
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование)
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава Из Метаданные.КритерииОтбора.СтруктураПодчиненности.Состав Цикл
		
		Если НЕ ЭлементСостава.Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным);
		
		Если НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ Объект" + СтруктураПутьКДанным.ВидОбъекта + "." + СтруктураПутьКДанным.ИмяРеквизита
			+ " = &ЗначениеКритерияОтбора";
			
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".") - 1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
		|ВЫБРАТЬ") + "
		|Объект" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК Объект" + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Если ТекстЗапроса<>"" Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе	
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
КонецФункции

// Функция возвращает путь к объекту метаданных
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
//
// Параметры:
//  ПутьКДанным - строка.
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
//
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным)
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 По 3 Цикл
		
		Точка = СтрНайти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 По 5  Цикл 
			
			Точка = СтрНайти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если Структура.ТипОбъекта = "Документ" Тогда
		Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
	Иначе
		Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // РазобратьПутьКОбъектуМетаданных()

Процедура ЗаполнитьСписокРеквизитовДокументаСКэшем(СписокРеквизитов, МетаданныеДокумента, УжеВСписке, ДокументСсылка)
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип Из ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				
				Если ЗначениеРеквизита <> Неопределено
					И Не ЗначениеРеквизита.Пустая()
					И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
					И УжеВСписке[ЗначениеРеквизита] = Неопределено
					И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено
					И ЗначениеРеквизита <> ДокументСсылка Тогда
					СписокРеквизитов.Добавить(ЗначениеРеквизита, Формат(ЗначениеРеквизита.Дата, "ДФ=yyyyMMddЧЧММсс"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		Если МетаданныеДокумента = Метаданные.Документы.СверкаВзаиморасчетов Тогда
			
			Прервать;
			
		КонецЕсли;
		
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип Из ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ Из СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ Из СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// базовый тип
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					 И Метаданные.Документы.Содержит(МетаданныеЗначения)
					 И УжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						СписокРеквизитов.Добавить(ЗначениеРеквизита, Формат(ЗначениеРеквизита.Дата,
							"ДФ=yyyyMMddЧЧММсс"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СписокРеквизитов.СортироватьПоПредставлению();
	УжеВСписке.Вставить(ДокументСсылка, Истина);
КонецПроцедуры

// Процедура дополняет кэш метаданных.
//
Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента, КэшРеквизитовДокумента)
	
	РеквизитыДокументаКэш = КэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокументаКэш = Неопределено Тогда
		
		РеквизитыДокументаКэш = Новый Соответствие;
		РеквизитыДокументаКэш.Вставить("ВалютаДокумента",			МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВалютаДенежныхСредств",	МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВалютаРасчетов",			МетаданныеДокумента.Реквизиты.Найти("ВалютаРасчетов") <> Неопределено); // Эквайринг
		РеквизитыДокументаКэш.Вставить("СуммаДокумента",			МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Комментарий",				МетаданныеДокумента.Реквизиты.Найти("Комментарий") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Тема",						МетаданныеДокумента.Реквизиты.Найти("Тема") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Организация",				МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено); 
		РеквизитыДокументаКэш.Вставить("ДатаВходящего",			МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено); 
		РеквизитыДокументаКэш.Вставить("НомерВходящий",			МетаданныеДокумента.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено); 
		РеквизитыДокументаКэш.Вставить("Номер",					МетаданныеДокумента.Реквизиты.Найти("Номер") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Ответственный",			МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено);
		
		РеквизитыДокументаКэш.Вставить("Автор",			МетаданныеДокумента.Реквизиты.Найти("Автор") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВидОперации",			МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Контрагент",			МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("СостояниеЗаказа",			МетаданныеДокумента.Реквизиты.Найти("СостояниеЗаказа") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Состояние",			МетаданныеДокумента.Реквизиты.Найти("Состояние") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Выполнена", МетаданныеДокумента.Реквизиты.Найти("Выполнена") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ТипСобытия",			МетаданныеДокумента.Реквизиты.Найти("ТипСобытия") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("ВходящееИсходящееСобытие",			МетаданныеДокумента.Реквизиты.Найти("ВходящееИсходящееСобытие") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("НомерКорректировки",			МетаданныеДокумента.Реквизиты.Найти("НомерКорректировки") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Всего",			МетаданныеДокумента.Реквизиты.Найти("Всего") <> Неопределено);
		РеквизитыДокументаКэш.Вставить("Описание", МетаданныеДокумента.Реквизиты.Найти("Описание") <> Неопределено);
		
		Если РеквизитыДокументаКэш["Номер"] = Ложь Тогда
			
			Попытка
				
				ЕстьНомер = ТипЗнч(МетаданныеДокумента.СтандартныеРеквизиты.Номер);
				ЕстьНомер = Истина;
				
			Исключение
				
				ЕстьНомер = Ложь;
				
			КонецПопытки;
			
			РеквизитыДокументаКэш["Номер"] = ЕстьНомер;
			
		КонецЕсли;
		
		КэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокументаКэш);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает номер картинки.
//
Функция НомерКартинки(СтрокаДерева)
	
	Если ТипЗнч(СтрокаДерева.Ссылка) <> Тип("ДокументСсылка.Событие") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 3;
		ИначеЕсли СтрокаДерева.Проведен Тогда
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли; 
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Запись") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 23;
		Иначе
			Возврат 14;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЛичнаяВстреча") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 20;
		Иначе
			Возврат 11;
		КонецЕсли;
	КонецЕсли; 
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТелефонныйЗвонок") Тогда
		Если СтрокаДерева.ВходящееИсходящееСобытие = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Входящее") Тогда
			Если СтрокаДерева.ПометкаУдаления Тогда
				Возврат 17;
			Иначе
				Возврат 8;
			КонецЕсли;
		Иначе
			Если СтрокаДерева.ПометкаУдаления Тогда
				Возврат 18;
			Иначе
				Возврат 9;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо") Тогда
		Если СтрокаДерева.ВходящееИсходящееСобытие = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Входящее") Тогда
			Если СтрокаДерева.ПометкаУдаления Тогда
				Возврат 15;
			Иначе
				Возврат 6;
			КонецЕсли;
		Иначе
			Если СтрокаДерева.ПометкаУдаления Тогда
				Возврат 16;
			Иначе
				Возврат 7;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.Прочее") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 22;
		Иначе
			Возврат 13;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ВидОперации = ПредопределенноеЗначение("Перечисление.ТипыСобытий.СообщениеSMS") Тогда
		Если СтрокаДерева.ПометкаУдаления Тогда
			Возврат 21;
		Иначе
			Возврат 12;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция КонтрагентДокументаСобытие(СсылкаНаДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытиеУчастники.Контакт КАК Контрагент
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|ГДЕ
	|	СобытиеУчастники.Ссылка = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(СобытиеУчастники.Контакт) = ТИП(Справочник.Контрагенты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда 
		Возврат "Несколько";
	ИначеЕсли Выборка.Количество() = 1 Тогда 
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Контрагент;
		КонецЦикла;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьМногострочнуюСтроку(МногострочнаяСтрока)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МногострочнаяСтрока, Символы.ПС, Истина);
	Возврат СтрСоединить(МассивСтрок, " ");
	
КонецФункции

#КонецОбласти

#КонецОбласти