////////////////////////////////////////////////////////////////////////////////
// Работа с iCalendar (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Преобразовывает местную дату в формат iCalendar, основанный на ISO 8601.
//
// Параметры:
//  Дата - Дата - исходное значение даты в формате ДатаВремя.
//  ФорматДаты - Строка - текстовое обозначение требуемого формата даты.
//  ТипДаты - Строка - текстовое обозначение требуемого типа даты.
//
// Возвращаемое значение:
//  Строка - содержит дату в формате iCalendar, в соответствии с ISO 8601.
//
Функция ДатаФорматаICalendar(Дата, ФорматДаты = "УниверсальноеВремя", ТипДаты = "") Экспорт
	
	Результат = "";
	Если ФорматДаты = "ТолькоДата" И ТипДаты = "ДатаНачала" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1;VALUE=DATE:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата, "ДФ=yyyyMMdd"));
	ИначеЕсли ФорматДаты = "ТолькоДата" И ТипДаты = "ДатаОкончания" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1;VALUE=DATE:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата + 86400, "ДФ=yyyyMMdd"));
	ИначеЕсли ФорматДаты = "ТолькоДата" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1;VALUE=DATE:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата, "ДФ=yyyyMMdd"));
	ИначеЕсли ФорматДаты = "ВремяСЧасовымПоясом" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата, "ДФ=yyyyMMddTHHmmss"));
	ИначеЕсли ФорматДаты = "УниверсальноеВремя" Тогда
		Результат = Формат(УниверсальноеВремя(Дата), "ДФ=yyyyMMddTHHmmssZ");
	Иначе
		Результат = Формат(УниверсальноеВремя(Дата), "ДФ=yyyyMMddTHHmmssZ");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Кодирует текстовую строку в iCalendar, согласно RFC 5545.
//
// Параметры:
//  Строка - Строка - описание события внешнего календаря в формате CalDAV.
//
// Возвращаемое значение:
//  Строка - строка с описанием события внешнего календаря, закодированная согласно RFC 5545.
//
Функция КодироватьСтрокуВiCalendar(Строка) Экспорт
	
	СтрокаiCalendar = СтрЗаменить(Строка, "\", "\\");
	СтрокаiCalendar = СтрЗаменить(СтрокаiCalendar, ";", "\;");
	СтрокаiCalendar = СтрЗаменить(СтрокаiCalendar, ",", "\,");
	СтрокаiCalendar = СтрЗаменить(СтрокаiCalendar, Символы.ПС, "\n");
	
	Возврат СтрокаiCalendar;
	
КонецФункции

// Раскодирует текстовую строку формата iCalendar, согласно RFC 5545.
//
// Параметры:
//  СтрокаiCalendar - Строка - описание события внешнего календаря в формате CalDAV.
//
// Возвращаемое значение:
//  Строка - строка с описанием события внешнего календаря, раскодированная согласно RFC 5545.
//
Функция РаскодироватьСтрокуiCalendar(СтрокаiCalendar) Экспорт
	
	Строка = СтрЗаменить(СтрокаiCalendar, "\n", Символы.ПС);
	Строка = СтрЗаменить(Строка, "\N", Символы.ПС);
	Строка = СтрЗаменить(Строка, "\,", ",");
	Строка = СтрЗаменить(Строка, "\;", ";");
	Строка = СтрЗаменить(Строка, "\\", "\");
	
	Возврат Строка;
	
КонецФункции

// Преобразовывает строку формата iCalendar в структуру, содержащую параметры события в требуемом формате.
//
// Параметры:
//  СтрокаiCalendar - Строка - описание события внешнего календаря в формате CalDAV.
//
// Возвращаемое значение:
//  Структура - описание события внешнего календаря в требуемом формате.
//
Функция СтруктураiCalendar(СтрокаiCalendar) Экспорт
	
	Результат = Новый Структура;
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаiCalendar, Символы.ПС);
	ЧтениеСобытия = Ложь;
	ЧтениеЗадачи = Ложь;
	
	ЧтениеНапоминания = Ложь;
	МассивНапоминания = Новый Массив;
	
	ЧтениеОписания = Ложь;
	МассивОписания = Новый Массив;
	ПерваяСтрокаОписания = "";
	
	ЧтениеОстальногоОписания = Ложь;
	МассивОстальногоОписания = Новый Массив;
	ОстальноеОписание = "";
	
	ЧтениеRRULE = Ложь;
	МассивRRULE = Новый Массив;
	
	ЧтениеEXDATE = Ложь;
	МассивEXDATE = Новый Массив;
	ЧастиEXDATE = Новый Массив;
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Если ЧтениеОписания И СтрНачинаетсяС(Строка, " ") Тогда
			МассивОписания.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеОписания И Не СтрНачинаетсяС(Строка, " ") Тогда
			ПерваяСтрокаОписания = СтрСоединить(МассивОписания, "");
			ПерваяСтрокаОписания = РаботаСICalendar.РаскодироватьСтрокуiCalendar(ПерваяСтрокаОписания);
			ЧтениеОписания = Ложь;
		КонецЕсли;
		
		Если ЧтениеОстальногоОписания И СтрНачинаетсяС(Строка, " ") Тогда
			МассивОстальногоОписания.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеОстальногоОписания И Не СтрНачинаетсяС(Строка, " ") Тогда
			ОстальноеОписание = СтрСоединить(МассивОстальногоОписания, "");
			ОстальноеОписание = РаботаСICalendar.РаскодироватьСтрокуiCalendar(ОстальноеОписание);
			ЧтениеОстальногоОписания = Ложь;
		КонецЕсли;
		
		Если ЧтениеRRULE И СтрНачинаетсяС(Строка, " ") Тогда
			МассивRRULE.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеRRULE И Не СтрНачинаетсяС(Строка, " ") Тогда
			ЧтениеRRULE = Ложь;
		КонецЕсли;
		
		Если ЧтениеEXDATE И СтрНачинаетсяС(Строка, " ") Тогда
			МассивEXDATE.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеEXDATE И Не СтрНачинаетсяС(Строка, " ") Тогда
			ЧтениеEXDATE = Ложь;
			ЧастиEXDATE.Добавить(СтрСоединить(МассивEXDATE));
		КонецЕсли;
		
		Если СокрЛП(Строка) = "BEGIN:VEVENT" Тогда
			ЧтениеСобытия = Истина;
		ИначеЕсли СокрЛП(Строка) = "END:VEVENT" Тогда
			Если МассивНапоминания.Количество() > 0 Тогда
				Результат.Вставить("Напоминания", МассивНапоминания);
			КонецЕсли;
			Прервать;
		ИначеЕсли СокрЛП(Строка) = "BEGIN:VALARM" Тогда
			ЧтениеНапоминания = Истина;
		ИначеЕсли СокрЛП(Строка) = "END:VALARM" Тогда
			ЧтениеНапоминания = Ложь;
		ИначеЕсли СокрЛП(Строка) = "BEGIN:VTODO" Тогда
			ЧтениеЗадачи = Истина;
		ИначеЕсли СокрЛП(Строка) = "END:VTODO" Тогда
			Если Не Результат.Свойство("ДатаНачала") И Не Результат.Свойство("ДатаОкончания") Тогда
				Результат.Вставить("ДатаНачала", Результат.ДатаСоздания);
				Результат.Вставить("ДатаОкончания", Результат.ДатаСоздания);
			КонецЕсли;
			Если Не Результат.Свойство("Выполнена") Тогда
				Результат.Вставить("Выполнена", Ложь);
			КонецЕсли;
			ЧтениеЗадачи = Ложь;
		КонецЕсли;
		
		Если ЧтениеСобытия Тогда
			
			Если ЧтениеНапоминания Тогда
				Если Лев(Строка, СтрДлина("TRIGGER")) = "TRIGGER" Тогда
					Напоминание = ПолучитьНапоминание(Строка);
					МассивНапоминания.Добавить(Напоминание);
				КонецЕсли;
			Иначе
				Если Лев(Строка, СтрДлина("UID")) = "UID" Тогда
					Результат.Вставить("ТипОбъекта", "Событие");
					Результат.Вставить("Идентификатор", СтрЗаменить(СокрЛП(Строка), "UID:", ""));
				ИначеЕсли Лев(Строка, СтрДлина("DTSTART")) = "DTSTART" Тогда
					Результат.Вставить("ДатаНачала", ВыделитьВремя(Строка, "DTSTART"));
					Если Результат.ДатаНачала = Неопределено Тогда
						Возврат Неопределено;
					КонецЕсли;
				ИначеЕсли Лев(Строка, СтрДлина("DTEND")) = "DTEND" Тогда
					Результат.Вставить("ДатаОкончания", ВыделитьВремя(Строка, "DTEND"));
					Если Результат.ДатаОкончания = Неопределено Тогда
						Возврат Неопределено;
					КонецЕсли;
				ИначеЕсли Лев(Строка, СтрДлина("SUMMARY")) = "SUMMARY" Тогда
					ЧтениеОписания = Истина;
					МассивОписания = Новый Массив;
					МассивОписания.Добавить(СтрЗаменить(Строка, "SUMMARY:", ""));
				ИначеЕсли Лев(Строка, СтрДлина("DESCRIPTION")) = "DESCRIPTION" Тогда
					ЧтениеОстальногоОписания = Истина;
					МассивОстальногоОписания = Новый Массив;
					МассивОстальногоОписания.Добавить(СтрЗаменить(Строка, "DESCRIPTION:", ""));
				ИначеЕсли Лев(Строка, СтрДлина("RRULE")) = "RRULE" Тогда
					ЧтениеRRULE = Истина;
					МассивRRULE = Новый Массив;
					МассивRRULE.Добавить(Строка);
				ИначеЕсли Лев(Строка, СтрДлина("EXDATE")) = "EXDATE" Тогда
					ЧтениеEXDATE = Истина;
					МассивEXDATE = Новый Массив;
					МассивEXDATE.Добавить(Строка);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧтениеЗадачи Тогда
			Если Лев(Строка, СтрДлина("UID")) = "UID" Тогда
				Результат.Вставить("ТипОбъекта", "Задача");
				Результат.Вставить("Идентификатор", СтрЗаменить(СокрЛП(Строка), "UID:", ""));
			ИначеЕсли Лев(Строка, СтрДлина("SUMMARY")) = "SUMMARY" Тогда
				ЧтениеОписания = Истина;
				МассивОписания = Новый Массив;
				МассивОписания.Добавить(СтрЗаменить(Строка, "SUMMARY:", ""));
			ИначеЕсли Лев(Строка, СтрДлина("CREATED")) = "CREATED" Тогда
				Результат.Вставить("ДатаСоздания", ВыделитьДату(Строка, "CREATED"));
			ИначеЕсли Лев(Строка, СтрДлина("DUE")) = "DUE" Тогда
				Результат.Вставить("ДатаНачала", ВыделитьДату(Строка, "DUE"));
				Результат.Вставить("ДатаОкончания", Результат.ДатаНачала);
			ИначеЕсли Лев(Строка, СтрДлина("COMPLETED")) = "COMPLETED" ИЛИ Лев(Строка, СтрДлина("STATUS:COMPLETED")) = "STATUS:COMPLETED" Тогда
				Результат.Вставить("Выполнена", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Описание = ПерваяСтрокаОписания;
	Если ЗначениеЗаполнено(ОстальноеОписание) Тогда
		Описание = Описание + Символы.ПС + ОстальноеОписание;
	КонецЕсли;
	Результат.Вставить("Наименование", ПерваяСтрокаОписания);
	Результат.Вставить("Описание", ОстальноеОписание);
	
	Возврат Результат;
	
КонецФункции

// Формирует описание календаря в виде строки
// для вставки в файл формата .ics или тело HTTP запроса.
//
// Параметры:
//  СобытияКалендаря - ТаблицаЗначений - описание событий календаря во внутреннем формате см. ОбменСВнешнимиКалендарями.НовоеОписаниеСобытийКалендаря.
//  Организатор - Строка - адрес электронной почты организатора.
//
// Возвращаемое значение:
//  Строка - тело файла формата .ics или HTTP запроса.
//
Функция СобытияiCalendar(СобытияКалендаря, Организатор = Неопределено) Экспорт
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	"BEGIN:VCALENDAR
	|VERSION:2.0
	|PRODID:%1
	|METHOD:PUBLISH", ИдентификаторПриложенияiCalendar());
	Для Каждого Событие Из СобытияКалендаря Цикл
		Результат = Результат + Символы.ПС + СобытиеiCalendar(Событие, Организатор, Событие.ВремяНапоминания);
	КонецЦикла;
	Результат = Результат + Символы.ПС + "END:VCALENDAR";
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторПриложенияiCalendar()

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"-//%1//%2//%3//RU", Метаданные.Поставщик, Метаданные.Синоним, Метаданные.Версия);

КонецФункции

Функция ВыделитьВремя(СтрокаВремени, Параметр)
	
	Попытка
		
		СтрокаВремениИсходноеЗначение = СтрокаВремени;
		ЧасовойПояс = Неопределено;
		СтрокаВремени = СтрЗаменить(СтрокаВремени, Параметр, "");
		Если СтрНачинаетсяС(СтрокаВремени, ";VALUE=DATE:") Тогда
			СтрокаВремени = СтрЗаменить(СтрокаВремени, ";VALUE=DATE:", "");
			ВыделенноеВремя = НачалоДня(Дата(СтрокаВремени));
		ИначеЕсли Лев(СтрокаВремени, 1) = ";" Тогда
			СтрокаВремени = СтрЗаменить(СтрокаВремени, ";TZID=", "");
			Позиция = СтрНайти(СтрокаВремени, ":");
			ЧасовойПояс = Лев(СтрокаВремени, Позиция - 1);
			ЧасовойПояс = НормализованныйЧасовойПояс(ЧасовойПояс);
			СтрокаВремени = Прав(СтрокаВремени, СтрДлина(СтрокаВремени) - Позиция);
			СтрокаВремени = СтрЗаменить(СтрокаВремени, "T", "");
			СтрокаВремени = СтрЗаменить(СтрокаВремени, "Z", "");
			ВыделенноеВремя = МестноеВремя(УниверсальноеВремя(Дата(СтрокаВремени), ЧасовойПояс));
		Иначе
			СтрокаВремени = СтрЗаменить(СтрокаВремени, ":", "");
			СтрокаВремени = СтрЗаменить(СтрокаВремени, "T", "");
			СтрокаВремени = СтрЗаменить(СтрокаВремени, "Z", "");
			УниверсальноеВремя = Дата(СтрокаВремени);
			ВыделенноеВремя = МестноеВремя(УниверсальноеВремя);
		КонецЕсли;
		
		Возврат ВыделенноеВремя;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Синхронизация календарей.DAV'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка обработки времени события: %1%2%3'"),
			СтрокаВремениИсходноеЗначение, Символы.ПС,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ИнформацияОбОшибке);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ВыделитьДату(СтрокаВремени, Параметр)

	ЧасовойПояс = Неопределено;
	СтрокаВремени = СтрЗаменить(СтрокаВремени, Параметр, "");
	Если СтрНачинаетсяС(СтрокаВремени, ";VALUE=DATE:") Тогда
		СтрокаВремени = СтрЗаменить(СтрокаВремени, ";VALUE=DATE:", "");
		ВыделенноеВремя = НачалоДня(Дата(СтрокаВремени));
	ИначеЕсли Лев(СтрокаВремени, 1) = ";" Тогда
		СтрокаВремени = СтрЗаменить(СтрокаВремени, ";TZID=", "");
		Позиция = СтрНайти(СтрокаВремени, ":");
		ЧасовойПояс = Лев(СтрокаВремени, Позиция - 1);
		ЧасовойПояс = НормализованныйЧасовойПояс(ЧасовойПояс);
		СтрокаВремени = Прав(СтрокаВремени, СтрДлина(СтрокаВремени) - Позиция);
		СтрокаВремени = СтрЗаменить(СтрокаВремени, "T", "");
		ВыделенноеВремя = МестноеВремя(УниверсальноеВремя(Дата(СтрокаВремени), ЧасовойПояс));
	Иначе
		СтрокаВремени = СтрЗаменить(СтрокаВремени, ":", "");
		Позиция = СтрНайти(СтрокаВремени, "T");
		СтрокаВремени = Лев(СтрокаВремени, Позиция - 1);
		ВыделенноеВремя = НачалоДня(Дата(СтрокаВремени));
	КонецЕсли;
	
	Возврат ВыделенноеВремя;
	
КонецФункции

Функция СобытиеiCalendar(ОписаниеСобытия, Организатор, ВремяНапоминания)
	
	МассивСобытиеiCalendar = Новый Массив;

	Если ОписаниеСобытия.Выполнена = Неопределено Тогда
		
		ВесьДень = ОписаниеСобытия.ДатаНачала = НачалоДня(ОписаниеСобытия.ДатаНачала)
			И ОписаниеСобытия.ДатаОкончания = КонецДня(ОписаниеСобытия.ДатаОкончания);
		ФорматДаты = ?(ВесьДень, "ТолькоДата", "ВремяСЧасовымПоясом");
		
		МассивСобытиеiCalendar.Добавить("BEGIN:VEVENT");
		
		Если ЗначениеЗаполнено(Организатор) Тогда
			МассивСобытиеiCalendar.Добавить("ORGANIZER:mailto:" + Организатор);
		КонецЕсли;
		
		МассивСобытиеiCalendar.Добавить("UID:" + ОписаниеСобытия.Идентификатор);
		
		МассивСобытиеiCalendar.Добавить("DTSTART;" + РаботаСICalendar.ДатаФорматаICalendar(
			ОписаниеСобытия.ДатаНачала,
			ФорматДаты,
			"ДатаНачала"));
		
		МассивСобытиеiCalendar.Добавить("DTEND;" + РаботаСICalendar.ДатаФорматаICalendar(
			ОписаниеСобытия.ДатаОкончания,
			ФорматДаты,
			"ДатаОкончания"));
		
		МассивСобытиеiCalendar.Добавить("DTSTAMP:" + РаботаСICalendar.ДатаФорматаICalendar(ОписаниеСобытия.ДатаНачала));
		
		Если ОписаниеСобытия.ТипОбъекта = "Событие" Тогда
	    	ПолноеОписаниеСобытия = ОписаниеСобытия.Наименование + Символы.ПС + ОписаниеСобытия.Описание;
		Иначе
			ПолноеОписаниеСобытия = ОписаниеСобытия.Описание;
		КонецЕсли;
		МассивСобытиеiCalendar.Добавить("SUMMARY:" + ТекстОписанияФорматаiCalendar(ОписаниеСобытия.Наименование));
		ТекстЗаметкиФорматаiCalendar = ТекстЗаметкиФорматаiCalendar(ПолноеОписаниеСобытия);
		Если ЗначениеЗаполнено(ТекстЗаметкиФорматаiCalendar) Тогда
			МассивСобытиеiCalendar.Добавить(ТекстЗаметкиФорматаiCalendar);
		КонецЕсли;
		
		Если ОписаниеСобытия <> Неопределено Тогда
			
			Для каждого Напоминание Из ОписаниеСобытия.Напоминания  Цикл
				НапоминаниеiCalendar = НапоминаниеiCalendar(Напоминание.ИнтервалВремениНапоминания);
				Если ЗначениеЗаполнено(НапоминаниеiCalendar) Тогда
					МассивСобытиеiCalendar.Добавить(НапоминаниеiCalendar);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		МассивСобытиеiCalendar.Добавить("END:VEVENT");
		
	Иначе
		МассивСобытиеiCalendar.Добавить("BEGIN:VTODO");
		МассивСобытиеiCalendar.Добавить("UID:" + ОписаниеСобытия.Идентификатор);
		МассивСобытиеiCalendar.Добавить("SUMMARY:" + ТекстОписанияФорматаiCalendar(ОписаниеСобытия.Наименование));
		МассивСобытиеiCalendar.Добавить("DUE;VALUE=DATE:" + Формат(ОписаниеСобытия.ДатаНачала, "ДФ=yyyyMMdd"));
		Если ОписаниеСобытия.Выполнена Тогда
			МассивСобытиеiCalendar.Добавить("COMPLETED:" + Формат(ОписаниеСобытия.ДатаНачала, "ДФ=yyyyMMddTHHmmssZ"));
			МассивСобытиеiCalendar.Добавить("STATUS:COMPLETED");
			
		КонецЕсли;
		МассивСобытиеiCalendar.Добавить("END:VTODO");

	КонецЕсли;

	Возврат СтрСоединить(МассивСобытиеiCalendar, Символы.ПС);
	
КонецФункции

Функция ТекстОписанияФорматаiCalendar(Знач ТекстОписания)
	
	ТекстОписания = СтрПолучитьСтроку(ТекстОписания, 1);
	
	ТекстОписания = КодироватьСтрокуВiCalendar(ТекстОписания);
	
	ДлинаПервойСтроки = 65;
	Если СтрДлина(ТекстОписания) <= ДлинаПервойСтроки Тогда
		Возврат ТекстОписания;
	КонецЕсли;
	
	МассивТекстОписанияФорматаiCalendar = Новый Массив;
	МассивТекстОписанияФорматаiCalendar.Добавить(Лев(ТекстОписания, ДлинаПервойСтроки));
	ТекстОписания = Сред(ТекстОписания, ДлинаПервойСтроки + 1);
	
	ДлинаОстальныхСтрок = 72;
	Пока ЗначениеЗаполнено(ТекстОписания) Цикл
		МассивТекстОписанияФорматаiCalendar.Добавить(Лев(ТекстОписания, ДлинаОстальныхСтрок));
		ТекстОписания = ?(СтрДлина(ТекстОписания) > ДлинаОстальныхСтрок,
			Сред(ТекстОписания, ДлинаОстальныхСтрок + 1),
			"");
	КонецЦикла;
	ТекстОписанияФорматаiCalendar = СтрСоединить(МассивТекстОписанияФорматаiCalendar, Символы.ПС + " ");
	
	Возврат ТекстОписанияФорматаiCalendar;
	
КонецФункции

Функция ТекстЗаметкиФорматаiCalendar(Знач ТекстОписания)
	
	ПозицияРазделителяСтроки = СтрНайти(ТекстОписания, Символы.ПС);
	Если СтрНайти(ТекстОписания, Символы.ПС) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОписания = Сред(ТекстОписания, ПозицияРазделителяСтроки + 1);
	Если Не ЗначениеЗаполнено(ТекстОписания) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОписания = КодироватьСтрокуВiCalendar(ТекстОписания);
	
	ДлинаПервойСтроки = 61;
	Если СтрДлина(ТекстОписания) <= ДлинаПервойСтроки Тогда
		Возврат Символы.ПС + "DESCRIPTION:" + ТекстОписания;
	КонецЕсли;
	
	МассивТекстЗаметкиФорматаiCalendar = Новый Массив;
	МассивТекстЗаметкиФорматаiCalendar.Добавить(Символы.ПС + "DESCRIPTION:" + Лев(ТекстОписания, ДлинаПервойСтроки));
	ТекстОписания = Сред(ТекстОписания, ДлинаПервойСтроки + 1);
	
	ДлинаОстальныхСтрок = 72;
	Пока ЗначениеЗаполнено(ТекстОписания) Цикл
		МассивТекстЗаметкиФорматаiCalendar.Добавить(Лев(ТекстОписания, ДлинаОстальныхСтрок));
		ТекстОписания = ?(СтрДлина(ТекстОписания) > ДлинаОстальныхСтрок,
			Сред(ТекстОписания, ДлинаОстальныхСтрок + 1),
			"");
	КонецЦикла;
	ТекстЗаметкиФорматаiCalendar = СтрСоединить(МассивТекстЗаметкиФорматаiCalendar, Символы.ПС + " ");
	
	Возврат ТекстЗаметкиФорматаiCalendar;
	
КонецФункции

// Возвращает нормализованный часовой пояс, приведенный к формату платформы:
// - в случае, если пояс имеет формат "GMT+0300", добавляем ":", например, "GMT+03:00".
// 
// Параметры:
//  ЧасовойПояс - Строка - Часовой пояс
// 
// Возвращаемое значение:
//  Строка - нормализованный часовой пояс.
//  
Функция НормализованныйЧасовойПояс(ЧасовойПояс)
	
	Если СтрНачинаетсяС(ВРег(ЧасовойПояс), "GMT")
		И СтрДлина(ЧасовойПояс) = 8
		И СтрНайти(ЧасовойПояс, ":") = 0 Тогда
		
		// В случае, если пояс имеет формат "GMT+0300", добавляем ":", например, "GMT+03:00".
		НормализованныйЧасовойПояс = СтрШаблон("%1:%2", Лев(ЧасовойПояс, 6), Прав(ЧасовойПояс, 2));
		
	Иначе
		
		НормализованныйЧасовойПояс = ЧасовойПояс;
		
	КонецЕсли;
	
	Возврат НормализованныйЧасовойПояс;
	
КонецФункции

Функция ПолучитьНапоминание(Время)
	
	Позиция = СтрДлина(Время) - СтрНайти(Время, ":");
	ВремяНапоминания = Прав(Время, Позиция);
	ДоСобытия = Истина;		
	ИмяИсточника = "НачалоСобытия";
	Если СтрНайти(ВремяНапоминания, "-P") > 0 ИЛИ СтрНайти(ВремяНапоминания, "-PT") > 0 Тогда
		ВремяНапоминания = СтрЗаменить(ВремяНапоминания, "-PT", "");
		ВремяНапоминания = СтрЗаменить(ВремяНапоминания, "-P", "");
	ИначеЕсли СтрНайти(ВремяНапоминания, "P") > 0 ИЛИ СтрНайти(ВремяНапоминания, "PT") > 0 Тогда
		ВремяНапоминания = СтрЗаменить(ВремяНапоминания, "PT", "");
		ВремяНапоминания = СтрЗаменить(ВремяНапоминания, "P", "");
		ДоСобытия = Ложь;                                         
		ИмяИсточника = "ОкончаниеСобытия";
	КонецЕсли;
	
	Если Прав(ВремяНапоминания, 1) = "S" Тогда
		ВремяВСек = 1;
	ИначеЕсли Прав(ВремяНапоминания, 1) = "M" Тогда
		ВремяВСек = 60;
	ИначеЕсли Прав(ВремяНапоминания, 1) = "H" Тогда
		ВремяВСек = 3600;
	ИначеЕсли Прав(ВремяНапоминания, 1) = "D" Тогда
		ВремяВСек = 86400;
	ИначеЕсли Прав(ВремяНапоминания, 1) = "W" Тогда
		ВремяВСек = 604800;
	КонецЕсли;
	
	ВремяВСек = Лев(ВремяНапоминания, СтрДлина(ВремяНапоминания) - 1) * ВремяВСек;
	
	Напоминание = Новый Структура;
	Напоминание.Вставить("ИмяИсточника", ИмяИсточника);
	Напоминание.Вставить("ДоСобытия", ДоСобытия);
	Напоминание.Вставить("ВремяНапоминания", ВремяВСек);
	
	Возврат Напоминание;
	
КонецФункции

Функция НапоминаниеiCalendar(Секунд)

	Результат = "";
	Если Не Секунд > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Минут = Цел(Секунд/60);	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
	|BEGIN:VALARM
	|ACTION:DISPLAY
	|DESCRIPTION:Event reminder
	|TRIGGER:-PT%1M
	|X-WR-ALARMUID:%2
	|END:VALARM",
	Минут,
	Новый УникальныйИдентификатор);
	Возврат Результат;

КонецФункции

#КонецОбласти