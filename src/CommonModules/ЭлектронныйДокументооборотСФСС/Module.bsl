#Область ПрограммныйИнтерфейс

// Выполняет фоновую загрузку сообщений, при получении которых ранее возникала ошибка соединения.
Процедура ФоноваяОтправкаЗапросовСЭДО() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФоноваяОтправкаЗапросовСЭДО);
	
	УдалитьУстаревшиеЗапросыИзОчередиФоновойЗагрузки();
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Организации = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	Если Организации.Количество() = 0 Тогда
		ОтключитьФоновыйОбменСЭДО();
		Возврат;
	КонецЕсли;
	
	// Отключаем выполнения задания в пиковые часы.
	Если ВремяЗапускаЗаданияПопадаетВПиковыеЧасы() Тогда
		ТекстСобытия = НСтр("ru='Фоновая загрузка сообщений СЭДО не будет выполняться в пиковое время.'");
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		Возврат;
	КонецЕсли;
	
	УспешноВыполненныеЗапросы = Новый Массив;
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЗапросыДляПовторнойОтправкиСЭДО.Идентификатор КАК Идентификатор,
		|	ЗапросыДляПовторнойОтправкиСЭДО.Организация КАК Организация,
		|	ЗапросыДляПовторнойОтправкиСЭДО.КодСостояния КАК КодСостояния
		|ИЗ
		|	РегистрСведений.ЗапросыДляПовторнойОтправкиСЭДО КАК ЗапросыДляПовторнойОтправкиСЭДО
		|ГДЕ
		|	НЕ ЗапросыДляПовторнойОтправкиСЭДО.БылПолученОтветСервера
		|	И ЗапросыДляПовторнойОтправкиСЭДО.ИдентификаторОсновногоЗапроса = """"";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = Запрос.Выполнить().Выгрузить();
	
	Если Набор.Количество() = 0 Тогда
		ОтключитьФоновыйОбменСЭДО();
		Возврат;
	КонецЕсли;
	
	ТекстСобытия = НСтр("ru='Запущена фоновая загрузка сообщений СЭДО, по которым возникла ошибка соединения в клиентском сеансе.'");
	ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
	
	Ошибки = Новый ТаблицаЗначений;
	Ошибки.Колонки.Добавить("ТекстОшибки");
	НомерСообщения = 1;
	Для Каждого Запрос Из Набор Цикл
		
		Идентификатор = Запрос.Идентификатор;
		Организация = Запрос.Организация;
		
		Шаблон = НСтр("ru='Фоновое получение данных сообщения СЭДО %1 по организации %2.'");
		ТекстСобытия = СтрШаблон(Шаблон, Идентификатор, Организация);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		
		Запись = РегистрыСведений.ЗапросыДляПовторнойОтправкиСЭДО.СоздатьМенеджерЗаписи();
		Запись.Организация = Организация;
		Запись.Идентификатор = Идентификатор;
		Запись.Прочитать();
		
		ТекстЗапроса = Запись.ДанныеЗапроса.Получить();
		АдресЗапроса = ПоместитьВоВременноеХранилище(ТекстЗапроса);
		Попытка
			РезультатОтправкиЗапроса = КонтекстЭДОСервер.ОтправитьЗапросСервисуСЭДОФСС(
				Организация, Запись.Операция, АдресЗапроса);
		Исключение
			Ошибка = Ошибки.Добавить();
			Ошибка.ТекстОшибки = НСтр("ru='При отправке запроса на сервер СЭДО возникла ошибка.'");
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Шаблон = НСтр("ru='При отправке запроса на сервер СЭДО по сообщению %1 возникла ошибка:'")
				+ Символы.ПС + "%2";
			ТекстОшибки = СтрШаблон(Шаблон, Идентификатор, ТекстОшибки);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		КонецПопытки;
		
		БылаОшибкаСоединения = Ложь;
		Если НЕ ПриВыполненииЗапросаВозниклаОшибкаСоединения(РезультатОтправкиЗапроса) Тогда
			
			// Был получен ответ сервера.
			Запись.БылПолученОтветСервера = Истина;
			// Очищаем данные запроса.
			Запись.ДанныеЗапроса = Неопределено;
			// Помещаем в регистр данные ответа.
			ТекстОтвета= ПолучитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAP);
			Запись.ДанныеОтвета = Новый ХранилищеЗначения(ТекстОтвета, Новый СжатиеДанных(9));
			
			Шаблон = НСтр("ru='Сообщение СЭДО %1 по организации %2 было успешно загружено в регламентном задании.'");
			ТекстСобытия = СтрШаблон(Шаблон, Идентификатор, Организация);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
			
		Иначе
			
			// Сохраняем данные запроса в случае ошибки.
			ПараметрыЗапроса = ЭлектронныйДокументооборотСФССКлиентСервер.ПараметрыСохраненияЗапросаСЭДОФСС(
				Организация, Запись.Операция);
			ОписаниеОшибки = РезультатОтправкиЗапроса.ОписаниеОшибки;
			ПараметрыЗапроса.ОписаниеОшибки 		= ОписаниеОшибки;
			ПараметрыЗапроса.АдресЗапросаSOAP 		= АдресЗапроса;
			ПараметрыЗапроса.АдресОтветаSOAP 		= РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAP;
			ПараметрыЗапроса.АдресРесурса 			= РезультатОтправкиЗапроса.АдресРесурса;
			ПараметрыЗапроса.АдресСервера 			= РезультатОтправкиЗапроса.АдресСервера;
			ПараметрыЗапроса.КодСостояния 			= РезультатОтправкиЗапроса.КодСостояния;
			ПараметрыЗапроса.ТипВзаимодействияСЭДО 	= Запись.ТипВзаимодействия;
			ПараметрыЗапроса.УдалятьИзХранилища 	= Истина;
			СохранитьДанныеЗапросаСЭДО(ПараметрыЗапроса);
			
			Запись.ОписаниеОшибки = ОписаниеОшибки;
			Запись.ОшибкаСоединения = РезультатОтправкиЗапроса.ОшибкаСоединения;
			
			БылаОшибкаСоединения = Истина;
			
		КонецЕсли;
		
		Запись.КодСостояния = РезультатОтправкиЗапроса.КодСостояния;
		Запись.ДатаПопыткиПодключения = ТекущаяДатаНаСервере();
		Запись.КоличествоПопыток = Запись.КоличествоПопыток + 1;
		
		Попытка
			Запись.Записать();
		Исключение
			Ошибка = Ошибки.Добавить();
			Ошибка.ТекстОшибки = НСтр("ru='При записи данных регистра ЗапросыДляПовторнойОтправкиСЭДО возникла ошибка.'");
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Шаблон = НСтр("ru='При записи данных регистра ЗапросыДляПовторнойОтправкиСЭДО возникла ошибка:'")
				+ Символы.ПС + "%1";
			ТекстОшибки = СтрШаблон(Шаблон, ТекстОшибки);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки);
		КонецПопытки;
		
		Если ЭтоАдресВременногоХранилища(АдресЗапроса) Тогда
			УдалитьИзВременногоХранилища(АдресЗапроса);
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAP) Тогда
			УдалитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAP);
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAPДвоичныеДанные) Тогда
			УдалитьИзВременногоХранилища(РезультатОтправкиЗапроса.АдресЗашифрованногоОтветаSOAPДвоичныеДанные);
		КонецЕсли;
		
		// Делаем случайную задержку между запросами для снижения нагрузки на сервер СЭДО
		// и для более равноменого распределения запросов.
		ТекущаяДата = ТекущаяДатаСеанса();
		Генератор = Новый ГенераторСлучайныхЧисел;
		Если БылаОшибкаСоединения И НомерСообщения < Набор.Количество() Тогда
			ВремяЗадержки = 1200 + Генератор.СлучайноеЧисло(0, 600);
			ТребуетсяДлительноеОжидание = Истина;
			Прервать;
		Иначе
			ВремяЗадержки = 30 + Генератор.СлучайноеЧисло(0, 30);
		КонецЕсли;
		
		Шаблон = НСтр("ru='Между запросами к серверу СЭДО будет сделана задержка %1 секунд.'");
		ТекстСобытия = СтрШаблон(Шаблон, ВремяЗадержки);
		ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		РезультатЗадержки = Задержка(ТекущаяДата, ВремяЗадержки);
		
		ЗадержкаПоФакту = ТекущаяДатаСеанса() - ТекущаяДата;
		Если НЕ РезультатЗадержки Тогда
			Шаблон = НСтр("ru='Между запросами к серверу СЭДО не удалось сделать задержку %1 секунд. Время задержки составило %2 секунд.'");
			ТекстСобытия = СтрШаблон(Шаблон, ВремяЗадержки, ЗадержкаПоФакту);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		Иначе
			Шаблон = НСтр("ru='Между запросами к серверу СЭДО была сделана задержка %1 секунд. Фактическое время задержки составило %2 секунд.'");
			ТекстСобытия = СтрШаблон(Шаблон, ВремяЗадержки, ЗадержкаПоФакту);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);
		КонецЕсли;
		
		НомерСообщения = НомерСообщения + 1;
		
	КонецЦикла;
	
	Если НЕ ТребуетсяДлительноеОжидание Тогда
		ВключитьФоновыйОбменСЭДО();
	Иначе
		ВключитьФоновыйОбменСЭДО(ВремяЗадержки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Ошибки.Свернуть("ТекстОшибки");
	Если Ошибки.Количество() > 0 Тогда
		СписокОшибок = Ошибки.ВыгрузитьКолонку("ТекстОшибки");
		ТекстыОшибок = СтрСоединить(СписокОшибок);
		ТекстОшибкиЗадания = НСтр("ru='При фоновом получении данных из СЭДО возникли ошибки:'")
			+ Символы.ПС + ТекстыОшибок + Символы.ПС
			+ Символы.ПС + НСтр("ru='Подробную информацию об ошибках см. в технологическом журнале.'");
		ВызватьИсключение(ТекстОшибкиЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обмен с сервером СЭДО ФСС из фонового задания.
Процедура ВыполнитьОбменСФСС() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменСФСС);

	УстановитьПривилегированныйРежим(Истина);

	// Удаляем устаревшие записи из регистра фоновой загрузки сообщений.
	УдалитьУстаревшиеЗапросыИзОчередиФоновойЗагрузки();
	
	Организации = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();

	Если Организации.Количество() = 0 Тогда
		ОтключитьОбменСФСС();
		Возврат;
	КонецЕсли;

	КлючКоличествоОшибокСоединения = "КоличествоОшибокСоединения";
	КоличествоОшибокСоединения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъектаОбщихНастроек(),
		КлючКоличествоОшибокСоединения, 0);
		
	КлючДатыЗагрузкиАктуальныхСообщенийПоОрганизациям = "ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям";
	ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъектаОбщихНастроек(),
		КлючДатыЗагрузкиАктуальныхСообщенийПоОрганизациям,
		Новый Соответствие);
	Если НЕ ТипЗнч(ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям) = Тип("Соответствие") Тогда
		ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям = Новый Соответствие;
	КонецЕсли;

	БылиОшибки = Ложь;
	БылиБлокировкиИзЗаЧастыхЗапросов = Ложь;
	БылиОшибкиСоединения = Ложь;
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки");
	Минута = 60;
	Для каждого Организация Из Организации Цикл

		РегистрационныйНомерФСС = РегистрационныйНомерФССОрганизации(Организация);
		Если ПустаяСтрока(РегистрационныйНомерФСС) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаПолученияАктуальныхСообщений = ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям[Организация];
		Если ДатаПолученияАктуальныхСообщений = Неопределено Тогда
			ДатаПолученияАктуальныхСообщений = Дата(1, 1, 1);
		КонецЕсли;
		ТекущаяДата = Неопределено;
		ДатыПолученияСообщений = КонтекстЭДО.ПолучитьДатыПолученияСообщений(Организация, ТекущаяДата);

		ДатаУспешнойЗагрузкиИдентификаторов = Неопределено;
		Для каждого ДатаПолученияСообщений из ДатыПолученияСообщений Цикл
			
			Если НЕ ЗначениеЗаполнено(ДатаПолученияСообщений.Дата)
				И (ТекущаяДатаНаСервере() - ДатаПолученияАктуальныхСообщений) < 3600 * 24 Тогда
				// Актуальные сообщения уже были сегодня получены.
				Продолжить;
			КонецЕсли;
			
			Шаблон = НСтр("ru='Получение списка входящих сообщений из СЭДО ФСС по организации %1 за дату %2.'");
			Шаблон = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Шаблон, Истина);
			ОписаниеСобытия = СтрШаблон(Шаблон, Организация, ДатаПолученияСообщений.Дата);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ОписаниеСобытия);
			
			Если ЗначениеЗаполнено(ДатаПолученияСообщений.Дата) Тогда
				Результат = МетаданныеВходящихСообщенийСЭДОФСС(Организация, ДатаПолученияСообщений);
			Иначе
				Результат = МетаданныеВходящихСообщенийСЭДОФСС(Организация);
			КонецЕсли;

			Если НЕ Результат.Выполнено Тогда
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				СтрокаОшибки.ТекстОшибки = Строка(Организация) + ", " + Результат.ОписаниеОшибки ;
				Шаблон = НСтр("ru='При получении списка входящих сообщений из СЭДО ФСС по организации %1 %2 произошла ошибка: %3.'");
				Шаблон = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Шаблон, Истина);
				ОписаниеОшибки = СтрШаблон(Шаблон, Организация, РегистрационныйНомерФСС, Результат.ОписаниеОшибки);
				ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ОписаниеОшибки);
				БылиОшибкиСоединения = Результат.ОшибкаСоединения;
				БылиОшибки = Истина;
				Если Результат.ВозниклаБлокировкаИзЗаЧастыхЗапросов Тогда
					БылиБлокировкиИзЗаЧастыхЗапросов = Истина;
					БылиОшибкиСоединения = Ложь;
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
			ДатаУспешнойЗагрузкиИдентификаторов = ПолучитьДатуПолученияСообщений(ДатаПолученияСообщений);
			
			Если НЕ ЗначениеЗаполнено(ДатаУспешнойЗагрузкиИдентификаторов) Тогда
				// Запоминием дату получения актуальных сообщений.
				ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям[Организация] = ТекущаяДатаНаСервере();
			Иначе
				ДатаУспешнойЗагрузкиИдентификаторов = ДатаУспешнойЗагрузкиИдентификаторов + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДатаУспешнойЗагрузкиИдентификаторов) Тогда
			// Сохраняем дату успешного получения списка входящих сообщений.
			КонтекстЭДО.СохранитьДатуСеансаОбменаСЭДОФСС(Организация, ДатаУспешнойЗагрузкиИдентификаторов);
		КонецЕсли;

	КонецЦикла;

	ОдинРазВСутки = Ложь;
	МаксимальноеКоличествоОшибокСоединенияПодряд = 24;
	Если БылиОшибкиСоединения Тогда
		КоличествоОшибокСоединения = КоличествоОшибокСоединения + 1;
		Если КоличествоОшибокСоединения >= МаксимальноеКоличествоОшибокСоединенияПодряд Тогда
			// Если были ошибки подключения и они повторялись 24 и более раз подряд,
			// то меняем расписание рег.задания.
			ОдинРазВСутки = Истина;
		КонецЕсли;
	Иначе
		КоличествоОшибокСоединения = 0;
	КонецЕсли;
	
	Если ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации) Тогда
		ВключитьОбменСФСС(ОдинРазВСутки, БылиБлокировкиИзЗаЧастыхЗапросов);
	Иначе
		ОтключитьОбменСФСС();
	КонецЕсли;

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъектаОбщихНастроек(),
		КлючКоличествоОшибокСоединения,
		КоличествоОшибокСоединения);

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъектаОбщихНастроек(),
		КлючДатыЗагрузкиАктуальныхСообщенийПоОрганизациям,
		ДатыЗагрузкиАктуальныхСообщенийПоОрганизациям);
		
	Если БылиОшибки Тогда
		ТаблицаОшибок.Свернуть("ТекстОшибки");
		Ошибки = ТаблицаОшибок.ВыгрузитьКолонку("ТекстОшибки");
		ТекстыОшибок = СтрСоединить(Ошибки);
		ОписаниеОшибки = НСтр("ru='В регламентном задании загрузки списка входящих сообщений СЭДО ФСС происходили ошибки:'")
			+ Символы.ПС + ТекстыОшибок + Символы.ПС + Символы.ПС
			+ НСтр("ru='Подробную информацию об ошибках см. в технологическом журнале.'");;
		ОписаниеОшибки = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ОписаниеОшибки, Истина);
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Возвращает признак необходимости запуска регламентного задания обмена
// по заданной организации.
// см.также ЭлектронныйДокументооборотСФССПереопределяемый.ПроверитьНеобходимостьЗапускаРегламентногоЗадания
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой нужно проверить необходимость запуска.
// Возвращаемое значение:
//   Булево - Истина, если для организации требуется запуск рег.задания.
Функция ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации) Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации);
	
КонецФункции

// Получает метаданные входящих сообщений на сервере СЭДО ФСС и возвращает список входящих.
// Параметры:
//   Организация - организация, для которой нужно получить входящие.
//   ДатаСообщений - дата, на которую нужно получить список входящих.
// Возвращаемое значение:
//   Результат             - Структура:
//     * Выполнено         - Булево - признак успешного выполнения операции.
//     * ОписаниеОшибки    - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//     * ДанныеСообщений   - Структура - структура с полями:
//         * Идентификатор          - Строка - идентификатор сообщения.
//         * Тип                    - Число  - тип сообщения согласно спецификации.
//         * Получатель             - Строка - идентификатор получателя.
//         * ТребуетсяПодтверждение - Булево - требуется подтверждение о прочтении сообщения.
//         * Новое                  - Булево - признак того, что это новое сообщение, данные которого ещё не были загружены.
//
Функция МетаданныеВходящихСообщенийСЭДОФСС(Организация, ДатаСообщений = Неопределено) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДОСервер.МетаданныеВходящихСообщенийСЭДОФСС(Организация, ДатаСообщений);
	
	Возврат Результат;
	
КонецФункции

// Включает регламентное задание обмена с сервером СЭДО ФСС.
Процедура ВключитьОбменСФСС(ОдинРазВСутки = Ложь, БылиБлокировкиИзЧастыхЗапросов = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Генератор = Новый ГенераторСлучайныхЧисел;
	КоличествоСекундВЧасе = 3600;
	Если ОдинРазВСутки Тогда
		ПериодПовтораВТечениеДня = 0;
	Иначе
		Если БылиБлокировкиИзЧастыхЗапросов Тогда
			ТаймаутМеждуHTTPЗапросамиСЭДО = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ТаймаутМеждуHTTPЗапросамиСЭДО",
				"Таймаут",
				300);
			ПериодПовтораВТечениеДня = ТаймаутМеждуHTTPЗапросамиСЭДО
				+ Генератор.СлучайноеЧисло(0, ТаймаутМеждуHTTPЗапросамиСЭДО);
		Иначе
			ПериодПовтораВТечениеДня = КоличествоСекундВЧасе / 2;
			// Добавляем случайную составляющую для более равномерной загрузки сервера СЭДО.
			ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня + Генератор.СлучайноеЧисло(0, 600);
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() > 0 Тогда
		ПараметрыЗадания = Задания[0];
		Если ПараметрыЗадания.Использование Тогда
			Если ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня <> ПериодПовтораВТечениеДня
				ИЛИ НЕ ЗначениеЗаполнено(ПараметрыЗадания.Расписание.ВремяНачала) Тогда
				ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
				Если НЕ ЗначениеЗаполнено(ПараметрыЗадания.Расписание.ВремяНачала) Тогда
					ПараметрыЗадания.Расписание.ВремяНачала = Дата(1, 1, 1, 10, 0, 0);
					ПараметрыЗадания.Расписание.ВремяКонца = Дата(1, 1, 1, 8, 0, 0);
				КонецЕсли;
				НовыеПараметры = Новый Структура;
				НовыеПараметры.Вставить("Расписание", ПараметрыЗадания.Расписание);
				НовыеПараметры.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
				НовыеПараметры.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
				РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыЗадания.УникальныйИдентификатор, НовыеПараметры);
			КонецЕсли;
			Возврат;
		Иначе
			ОтключитьОбменСФСС();
		КонецЕсли;
	КонецЕсли;
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
	Расписание.ПериодПовтораДней 		= 1;
	Расписание.ВремяНачала = Дата(1, 1, 1, 10, 0, 0);
	Расписание.ВремяКонца = Дата(1, 1, 1, 8, 0, 0);

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбменСФСС);
	ПараметрыЗадания.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("Наименование",
		ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(НСтр("ru='Обмен с ФСС'"), Истина));
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Отключает регламентное задание обмена с сервером СЭДО ФСС.
Процедура ОтключитьОбменСФСС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Ключ", ИдентификаторРегламентногоЗадания());
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого Задание Из НайденныеЗадания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменСФСС;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ФоноваяОтправкаЗапросовСЭДО;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие - 
//    * Ключ - псевдоним метода, например ОчиститьОбластьДанных.
//    * Значение - имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных.
//        В качестве значения можно указать Неопределено, в этом случае считается что имя 
//        совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменСФСС.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ФоноваяОтправкаЗапросовСЭДО.ИмяМетода);
	
КонецПроцедуры

// Возвращает массив новых сообщений СЭДО ФСС.
// Параметры:
//   Отбор - Структура - параметры отбора сообщений.
//     * Организация - СправочникСсылка.Организации, Массив - организация(и) для отбора по организациям.
//     * Тип - Число, Массив - тип(ы) сообщения(ий) для отбора по типу. Необязательный.
//     * ТребуетсяПодтверждение - Булево - признак отбора сообщений требующих подтверждение. Необязательный.
// Возвращаемое значение:
//   Таблица значений с колонками:
//     * Идентификатор - Строка - идентификатор сообщения.
//     * Организация - СправочникСсылка.Организации - организация сообщения.
//     * Тип - Число - тип сообщения.
Функция НовыеСообщенияСЭДОФСС(Знач Отбор = Неопределено) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
		Организации = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
		Отбор.Вставить("Организация", Организации);
	КонецЕсли;
	
	Организация = Отбор.Организация;
	Результат = КонтекстЭДОСервер.НовыеСообщенияСЭДОФСС(Организация, Отбор);
	
	Возврат Результат;
	
КонецФункции

Функция ПриПолученииСпискаНовыхСообщенийСЭДО(Организация, ДанныеСообщений) Экспорт
	
	Обработанные = Новый Массив;
	ЭлектронныйДокументооборотСФССПереопределяемый.
		ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Организация, ДанныеСообщений, Обработанные);
	Возврат Обработанные;
	
КонецФункции

Функция ПриПолученииСодержимогоСообщенияСЭДО(Организация, ДанныеСообщения) Экспорт
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Обработано", Ложь);
	РезультатОбработки.Вставить("ОшибкаОбработки", Ложь);
	РезультатОбработки.Вставить("ОписаниеОшибки", "");
	
	ТипСообщенияОшибкиЛогическогоКонтроля = "14";
	ТипСообщенийОтветаНаПодтверждениеОПолучении = "11";
	ТипСообщенийПодтвержденияОПолучении = "6";
	ТипСообщенийРезультПодпискиСтрахователя = "12";
	ТипСообщенийОтветСтрахователяНаЗапросКП = "313";
	ТипСообщенийОтветСтрахователяНаЗапросВП = "314";
	ТипыСообщенийСДОФССДоходнаяЧасть = ПолучитьТипыСообщенийСДОФССДоходнаяЧасть();
	Если ДанныеСообщения.Тип = ТипСообщенияОшибкиЛогическогоКонтроля Тогда
		
		// Сообщение об ошибке логического контроля.
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
		ДанныеОшибки = КонтекстЭДО.
			ДанныеОшибокЛогическогоКонтроляСЭДОФСС(Организация, ДанныеСообщения);
		Если НЕ ДанныеОшибки.ИсходноеСообщениеНайдено Тогда
			// Не нашли исходное сообщение.
			РезультатОбработки.ОшибкаОбработки = Истина;
			Шаблон = НСтр("ru='Для сообщения %1 с типом %2 не найдены данные исходящего сообщения:'");
			ОписаниеОшибки = СтрШаблон(Шаблон, ДанныеСообщения.Идентификатор, ДанныеСообщения.Тип);
			РезультатОбработки.ОписаниеОшибки = ОписаниеОшибки + Символы.ПС
				+ ДанныеОшибки.ОшибкаПоиска;
			Возврат РезультатОбработки;
		КонецЕсли;
		
		Если ДанныеОшибки.ДанныеИсходногоСообщения.Тип = ТипСообщенийПодтвержденияОПолучении Тогда
			// Это ошибка лог.контроля сообщения подтверждения о получении.
			КонтекстЭДО.ОбработатьОшибкуЛогическогоКонтроляПодтвержденияОПолучении(ДанныеОшибки);
			РезультатОбработки.Обработано = Истина;
		ИначеЕсли ДанныеОшибки.ДанныеИсходногоСообщения.Тип = ТипСообщенийОтветСтрахователяНаЗапросКП
			ИЛИ ДанныеОшибки.ДанныеИсходногоСообщения.Тип = ТипСообщенийОтветСтрахователяНаЗапросВП Тогда
			// Это ошибка лог.контроля сообщения ответа на запрос документов.
			КонтекстЭДО.ОбработатьОшибкуЛогическогоКонтроляОтветаНаЗапросДокументов(ДанныеОшибки);
			РезультатОбработки.Обработано = Истина;
		Иначе
			// Вызываем переопределяемый метод.
			ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибокЛогическогоКонтроляСЭДО(
				Организация,
				ДанныеОшибки.ДанныеИсходногоСообщения,
				ДанныеОшибки.ОшибкиКонтроля,
				РезультатОбработки);
		КонецЕсли;
			
	ИначеЕсли ДанныеСообщения.Тип = ТипСообщенийОтветаНаПодтверждениеОПолучении Тогда
		
		// Ответ на подтверждение о получении.
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		РезультатРазбора = КонтекстЭДО.РазобратьОтветНаПодтверждениеОПОлучении(Организация, ДанныеСообщения);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеПолученияОтветаНаПодтверждениеОПрочтении(Организация, РезультатРазбора.РезультатыПодтверждений, РезультатОбработки);
		
	ИначеЕсли ДанныеСообщения.Тип = ТипСообщенийРезультПодпискиСтрахователя Тогда
		
		// Результат подписки страхователя на оповещения по ЭЛН.
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КонтекстЭДО.РазобратьРезультатПодпискиСтрахователя(Организация, ДанныеСообщения);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
			
	ИначеЕсли НЕ ТипыСообщенийСДОФССДоходнаяЧасть.Найти(ДанныеСообщения.Тип) = Неопределено Тогда
		
		// Входящие сообщения СЭДО ФСС.
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КонтекстЭДО.ПослеРасшифровкиВходящиеСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		
	Иначе
		
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РегистрационныйНомерФССОрганизации(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОписаниеОшибки = НСтр("ru='Попытка получить регистрационный номер СФР(бывш. ФСС) организации по пустому значению.'");
		Событие = НСтр("ru = 'Обмен с СФР(бывш. ФСС)'");
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		Возврат "";
	КонецЕсли;
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СвойстваОрганизации = КонтекстЭДО.СвойстваОрганизацииДляОбмена(Организация);

	Возврат СвойстваОрганизации.РегистрационныйНомерФСС;
	
КонецФункции

// Возвращает массив организация, у которых активирован обмен с ФСС в настройках.
// Возвращаемое значение:
//   Массив - массив ссылок типа СправочникСсылка.Организации.
//
Функция ОрганизацииИспользующиеОбменФСС() Экспорт
	
	Возврат СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
КонецФункции

// Возвращает данные входящего сообщения по идентификатору.
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой нужно получить входящие.
//   Идентификатор - Строка - идентификатор сообщения.
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с данными сообщения, колонки:
//     *Идентификатор - Строка - идентификатор сообщения.
//     *Организация - СправочникСсылка.Организации - организация получатель.
//     *Тип - Строка - тип сообщения.
//     *Получетель - Строка - регистрационный номер ФСС получателя.
//     *ТребуетсяПодтверждение - Булево - Истина, если требуется подтверждение о получении.
//     *Содержимое - ХранилищеЗначения - хранилище значений с данными сообщения.
//     *Новое - Булево - Истина, если содержимое сообщения не получено.
//     *Дата - Дата - дата сообщения.
//     *ДатаЗагрузки - Дата - дата получения содержимого сообщения.
//     *ДатаОтправкиПодтверждения - Дата - дата отправки подтверждения о получении.
//     *ДатаПолученияИзвещенияОПолученииПодтверждения - Дата - дата получения извещения о получении подтверждения.
//     *ДатаПолученияОшибкиПодтверждения - Дата - дата получении ошибки подтверждения.
//     *ДатаСоздания - Дата - дата создания записи в регистре.
//     *ОшибкаОбработкиСообщения - Дата - дата обработки сообщения.
//     *ОшибкаПодтверждения - Строка - текст ошибки подтверждения о получении.
//     *ПодтверждениеОтправлено - Булево - Истина, если подтверждения о получении отправлено.
//     *СрокДействия - Дата - срок действия сообщения.
//
Функция ДанныеВходящегоСообщенияСЭДОФСС(Организация, Идентификатор) Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("Идентификатор", Идентификатор);
	
	Возврат КонтекстЭДО.СообщенияСЭДОФСС(Отбор);
	
КонецФункции

// Возвращает данные входящего сообщения по идентификатору.
// Параметры:
//   ТипСообщения                 - Число     - тип сообщения СЭДО из спецификации типов документов,
//   СодержимоеИлиАдресСообщения  - Строка    - текст выгрузки сообщения СЭДО по спецификации типов документов или
//                                - Строка    - адрес во временном хранилище, по которому содержится строка или двоичные
//                                              данные в кодировке utf-8 текста выгрузки сообщения СЭДО по спецификации
//                                              типов документов
//   Организация                  - СправочникСсылка.Организации - организация отправитель,
//   ОписаниеОшибки               - Строка    - шаблон текста сообщения, возвращаемого в ключе "ОписаниеОшибки"
//                                              результата оповещения обратного вызова при неудаче отправки,
//                                              с подстановкой текста ошибки вместо %1, например:
//                                              НСтр("ru = 'Не удалось подписать организацию на оповещения об изменении состояний ЭЛН сотрудников.'") + Символы.ПС + "%1",
//   РегистрационныйНомерФСС      - Строка    - регистрационный номер ФСС (дополнительный код ФСС в случае филиала),
//                                              при пустом значении подставляется здесь из организации.
//   ТипВзаимодействия            - Число     - для МЧД задать 3.
//   СвойстваДляОбмена            - Структура - при значении Неопределено заполняется автоматически, при типе
//                                              взаимодействия 3 (МЧД) можно передать структуру с реквизитами
//                                              "ОГРН", "ИНН", "КПП", "СНИЛС"
// Возвращаемое значение:
//   Структура - переданные параметры отправки сообщения (незаполненные могут вычисляться) для передачи в процедуру
//               "ЭлектронныйДокументооборотСФССКлиент.ОтправитьСообщениеСЭДО", параметр "ПараметрыСообщения".
//
Функция ПараметрыОтправитьСообщениеСЭДО(
		ТипСообщения = 0,
		СодержимоеИлиАдресСообщения = "",
		Организация = Неопределено,
		ОписаниеОшибки = "",
		РегистрационныйНомерФСС = "",
		ТипВзаимодействия = Неопределено,
		СвойстваДляОбмена = Неопределено) Экспорт
	
	Результат = ЭлектронныйДокументооборотСФССКлиентСервер.ПараметрыОтправитьСообщениеСЭДО(ТипСообщения,
		СодержимоеИлиАдресСообщения,
		Организация,
		ОписаниеОшибки,
		РегистрационныйНомерФСС,
		ТипВзаимодействия,
		СвойстваДляОбмена);
	
	Возврат Результат;
	
КонецФункции

// Возвращает флаг использования тестового сервера при обмене данными ЭЛН и по СЭДО.
// Параметры:
//   Организация - СправочникСсылка.Организации
// Возвращаемое значение:
//   Булево - флаг использования тестового сервера при обмене данными ЭЛН и по СЭДО
//
Функция ТестовыйРежим(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбменаФСС.ТестовыйСерверФССЭЛН КАК ТестовыйСерверФССЭЛН
		|ИЗ
		|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|ГДЕ
		|	НастройкиОбменаФСС.Организация = &ОрганизацияСсылка
		|	И (НастройкиОбменаФСС.Пользователь ЕСТЬ NULL
		|	ИЛИ НастройкиОбменаФСС.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))");
	
	Запрос.УстановитьПараметр("ОрганизацияСсылка", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Выборка.ТестовыйСерверФССЭЛН;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру параметров, необходимых для создания информационной панели в объектах ЗУП
// 
// Возвращаемое значение:
//  Структура - Параметры, необходимые для создания информационной панели в объектах ЗУП
//
Функция ПараметрыИнформационнойПанелиБРО() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	// Если форма вызывается из формы списка без отбора по организации,
	// или в форме нет организации, то оставьте равным Неопределено
	ДополнительныеПараметры.Вставить("Организация", Неопределено);
	// Группа, в которой надо разместить элементы информационной панели
	ДополнительныеПараметры.Вставить("Группа", Неопределено);
	ДополнительныеПараметры.Вставить("Форма", Неопределено);
	// Указывает на то, относится ли объект к СЭДО или нет
	// В зависимости от этого текст на панели будет меняться
	ДополнительныеПараметры.Вставить("ЭтоСЭДО", Ложь);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Перерисовывает и при необходимости создает элементы информационной панели БРО в объектах ЗУП
//
// Параметры:
//  ПараметрыОтображения - Структура - Параметры, необходимые для создания информационной панели в объектах ЗУП
//                         Шаблон для описания параметров возвращает метод ПараметрыИнформационнойПанелиБРО()
// 
Процедура ОбновитьИнформационнуюПанельБРО(ПараметрыОтображения) Экспорт
	
	ДокументооборотСКО.ОбновитьИнформационнуюПанельБРО(
		ПараметрыОтображения,
		Перечисления.ТарифыОператораЭДО.КадровыеРешения);

КонецПроцедуры

Функция ВидыДокументовСЭДОФССДоходнаяЧасть() Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ВидыДокументов = КонтекстЭДО.ПолучитьВидыДокументовСЭДОФССДоходнаяЧасть();
	
	Возврат ВидыДокументов;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура СохранитьДанныеЗапросаСЭДО(ПараметрыСохранения) Экспорт
	
	ОписаниеОшибки = ПараметрыСохранения.ОписаниеОшибки;
	АдресЗапросаSOAP = ПараметрыСохранения.АдресЗапросаSOAP;
	АдресОтветаSOAP = ПараметрыСохранения.АдресОтветаSOAP;
	Дата = ПараметрыСохранения.Дата;
	УдалятьИзХранилища = ПараметрыСохранения.УдалятьИзХранилища;
	
	Если ЭтоАдресВременногоХранилища(АдресЗапросаSOAP) Тогда
		ДанныеЗапроса = СтрокаИзДанныхПоАдресу(АдресЗапросаSOAP);
		Если УдалятьИзХранилища Тогда
			УдалитьИзВременногоХранилища(АдресЗапросаSOAP);
		КонецЕсли;
	Иначе
		ДанныеЗапроса = "";
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресОтветаSOAP) Тогда
		ДанныеОтвета = СтрокаИзДанныхПоАдресу(АдресОтветаSOAP);
		Если УдалятьИзХранилища Тогда
			УдалитьИзВременногоХранилища(АдресОтветаSOAP);
		КонецЕсли;
	Иначе
		ДанныеОтвета = "";
	КонецЕсли;
	
	Запись = РегистрыСведений.ЖурналЗапросовКСерверамФСС.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыСохранения);
	
	Запись.Идентификатор = Новый УникальныйИдентификатор;
	Запись.ДанныеЗапроса = Новый ХранилищеЗначения(ДанныеЗапроса, Новый СжатиеДанных(9));
	Если Дата = Неопределено Тогда
		Запись.Дата = ТекущаяДатаНаСервере();
	Иначе
		Запись.Дата = Дата;
	КонецЕсли;
	Запись.ОтветСервера = Новый ХранилищеЗначения(ДанныеОтвета, Новый СжатиеДанных(9));
	Запись.Записать();
	
КонецПроцедуры

Функция ПриВыполненииЗапросаВозниклаОшибкаСоединения(ДанныеЗапроса) Экспорт
	
	АдресСервераЗаполнен = ЗначениеЗаполнено(ДанныеЗапроса.АдресСервера);
	Если НЕ АдресСервераЗаполнен Тогда
		Возврат Ложь;
	КонецЕсли;

	КодыВозвратаПовторнойОтправки = КодыВозвратаПовторнойОтправки();

	Если НЕ ЗначениеЗаполнено(ДанныеЗапроса.КодСостояния) Тогда
		КодСостояния = 0;
	Иначе
		КодСостояния = Число(ДанныеЗапроса.КодСостояния);
	КонецЕсли;
	
	ВнутренняяОшибкаСервера = Ложь;
	АдресОтвета = "";
	Если ДанныеЗапроса.Свойство("АдресРасшифрованногоОтветаSOAP") Тогда
		АдресОтвета = ДанныеЗапроса.АдресРасшифрованногоОтветаSOAP;
	ИначеЕсли ДанныеЗапроса.Свойство("АдресЗашифрованногоОтветаSOAP") Тогда
		АдресОтвета = ДанныеЗапроса.АдресЗашифрованногоОтветаSOAP;
	КонецЕсли;
	Если КодСостояния = 500 И НЕ ПустаяСтрока(АдресОтвета) Тогда
		Если ЭтоАдресВременногоХранилища(АдресОтвета) Тогда
			Ответ = ПолучитьИзВременногоХранилища(АдресОтвета);
			Ответ = ВРег(Ответ);
			СтрокаПоиска = ВРег("500 Internal Server Error");
			ВнутренняяОшибкаСервера = СтрНайти(Ответ, СтрокаПоиска) > 0;
		КонецЕсли;
	КонецЕсли;
	
	КодВСпискеКодовОшибкиСоединения = НЕ КодыВозвратаПовторнойОтправки.Найти(КодСостояния) = Неопределено;
	Возврат АдресСервераЗаполнен
		И (КодВСпискеКодовОшибкиСоединения ИЛИ ВнутренняяОшибкаСервера);
	
КонецФункции

Функция КоличествоЗапросовВОчередиАвтоматическойЗагрузки(Организация = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоЗапросов", 0);
	Результат.Вставить("КоличествоОрганизаций", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗапросыДляПовторнойОтправкиСЭДО.Идентификатор) КАК КоличествоЗапросов,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗапросыДляПовторнойОтправкиСЭДО.Организация) КАК КоличествоОрганизаций
	               |ИЗ
	               |	РегистрСведений.ЗапросыДляПовторнойОтправкиСЭДО КАК ЗапросыДляПовторнойОтправкиСЭДО
	               |ГДЕ
	               |	НЕ ЗапросыДляПовторнойОтправкиСЭДО.БылПолученОтветСервера";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст + " И ЗапросыДляПовторнойОтправкиСЭДО.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатВыполнения = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатВыполнения.Выгрузить();
	Результат.КоличествоЗапросов = Выборка[0].КоличествоЗапросов;
	Результат.КоличествоОрганизаций = Выборка[0].КоличествоОрганизаций;
	
	Возврат Результат;
	
КонецФункции

// Включает регламентное задание фонового обмена с сервером СЭДО ФСС.
Функция ВключитьФоновыйОбменСЭДО(ПериодПовтораВТечениеДня = 0) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Выполнено");
	Результат.Вставить("ОписаниеОшибки");

	УстановитьПривилегированныйРежим(Истина);
	
	Если ПериодПовтораВТечениеДня = 0 Тогда
		Генератор = Новый ГенераторСлучайныхЧисел();
		// Задаем случайную задержку между запусками чтобы распределить по времени нагрузку на сервер СЭДО.
		ТекущаяДата = ТекущаяДатаСеанса();
		Час = Час(ТекущаяДата);
		Если Час > 8 И Час < 20 Тогда
			ПериодПовтораВТечениеДня = 6000 + Генератор.СлучайноеЧисло(0, 2400);
		Иначе
			ПериодПовтораВТечениеДня = 2400 + Генератор.СлучайноеЧисло(0, 1200);
		КонецЕсли;
	КонецЕсли;
	
	Шаблон = НСтр("ru='Будет установлен интервал запуска задания фоновой загрузки сообщений СЭДО %1 секунд.'");
	ТекстСобытия = СтрШаблон(Шаблон, ПериодПовтораВТечениеДня);
	ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Информация, ТекстСобытия);

	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО());
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() > 0 Тогда
		ПараметрыЗадания = Задания[0];
		Если ПараметрыЗадания.Использование Тогда
			Если ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня <> ПериодПовтораВТечениеДня Тогда
				ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
				Если НЕ ЗначениеЗаполнено(ПараметрыЗадания.Расписание.ВремяНачала) Тогда
					ПараметрыЗадания.Расписание.ВремяНачала = Дата(1, 1, 1, 9, 0, 0);
					ПараметрыЗадания.Расписание.ВремяКонца = Дата(1, 1, 1, 8, 0, 0);
				КонецЕсли;
				НовыеПараметры = Новый Структура;
				НовыеПараметры.Вставить("Расписание", ПараметрыЗадания.Расписание);
				НовыеПараметры.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
				НовыеПараметры.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
				РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыЗадания.УникальныйИдентификатор, НовыеПараметры);
			КонецЕсли;
			Результат.Выполнено = Истина;
			Возврат Результат;
		Иначе
			ОтключитьФоновыйОбменСЭДО();
		КонецЕсли;
	КонецЕсли;

	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
	Расписание.ПериодПовтораДней 		= 1;
	Расписание.ВремяНачала = Дата(1, 1, 1, 9, 0, 0);
	Расписание.ВремяКонца = Дата(1, 1, 1, 8, 0, 0);

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ФоноваяОтправкаЗапросовСЭДО);
	ПараметрыЗадания.Вставить("Ключ", ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО());
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
	Наименование = НСтр("ru='Фоновая отправка запросов в СЭДО СФР'");
	ПараметрыЗадания.Вставить("Наименование", Наименование);

	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);

	УстановитьПривилегированныйРежим(Ложь);

	Результат.Выполнено = Истина;
	Возврат Результат;

КонецФункции

Функция ВключеноЗаданиеФоновогоОбменаСЭДО() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО());
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Задания.Количество() > 0 И Задания[0].Использование;
	
КонецФункции

Функция ПолучитьДатуПолученияСообщений(ДатыСообщений)
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.ПолучитьДатуПолученияСообщений(ДатыСообщений);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторРегламентногоЗадания()
	
	Возврат "ОбменСФСС";
	
КонецФункции

Функция СписокДопустимыхОрганизацийВОбъектахОбменаФСС()
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(НСтр("ru = 'Автоматический обмен с СЭДО СФР'"), Истина);
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурнал(Уровень, ТекстСобытия, Данные = Неопределено)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), Уровень, , Данные, ТекстСобытия);
	
КонецПроцедуры

Функция КлючОбъектаОбщихНастроек()
	
	Возврат "ЭлектронныйДокументооборотСФСС";
	
КонецФункции

Функция ПолучитьТипыСообщенийСДОФССДоходнаяЧасть()
	
	Результат = Новый Массив;
	
	// типы сообщений с 300 по 319 СЭДО ФСС
	Для К = 300 по 312 Цикл
		ТипСообщения = Строка(К);
		Результат.Добавить(ТипСообщения);
	КонецЦикла;
	
	Результат.Добавить(Строка(315));
	Результат.Добавить(Строка(316));
	Результат.Добавить(Строка(318));
	Результат.Добавить(Строка(319));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоличествоОтветовНаТребованияСФР(Ссылки, ТолькоОтправленные = Ложь) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьКоличествоОтветовНаТребованияСФР(Ссылки, ТолькоОтправленные);
	
КонецФункции

Функция ТребующиеСкорогоПодтвержденияСФР(Организация = Неопределено, Все = Ложь) Экспорт
	
	Сегодня = ТекущаяДатаСеанса();
	
	Таблица = ТребующиеПодтвержденияСФР(Организация);
	
	Требования = Новый Массив;
	Для каждого Строка Из Таблица Цикл
		РазностьДней = ТребованияФНС.РазностьДнейИсправленная(Строка, Сегодня);
		ЭтоНужныйДокумент = РазностьДней <= 2 И РазностьДней >-60 И НЕ Все ИЛИ Все;
		
		Если ЭтоНужныйДокумент Тогда
			Требования.Добавить(Строка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат Требования;
	
КонецФункции

Функция ТребующиеПодтвержденияСФР(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящийДокументСЭДОФСС.Ссылка КАК Ссылка,
	|	ВходящийДокументСЭДОФСС.МаксимальнаяДатаПодтверждения КАК ПодтвердитьДо,
	|	ВходящийДокументСЭДОФСС.Организация КАК Организация
	|ИЗ
	|	Документ.ВходящийДокументСЭДОФСС КАК ВходящийДокументСЭДОФСС
	|ГДЕ
	|	ВходящийДокументСЭДОФСС.ДатаОтправкиПодтверждения = ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА НЕ ВходящийДокументСЭДОФСС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИНАЧЕ ВходящийДокументСЭДОФСС.Организация = &Организация
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Организация", 
		?(Организация = Неопределено, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), Организация));
		
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Функция ТребующиеСкорогоОтветаСФР(Организация = Неопределено) Экспорт
	
	Сегодня = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящийДокументСЭДОФСС.Ссылка КАК Ссылка,
	|	ВходящийДокументСЭДОФСС.МаксимальнаяДатаОтправкиОтвета КАК ОтветитьДо,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтветаИзмененная
	|ИЗ
	|	Документ.ВходящийДокументСЭДОФСС КАК ВходящийДокументСЭДОФСС
	|ГДЕ
	|	ВходящийДокументСЭДОФСС.ДатаОтправкиОтветаНаЗапрос = ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА НЕ ВходящийДокументСЭДОФСС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИНАЧЕ ВходящийДокументСЭДОФСС.Организация = &Организация
	|		КОНЕЦ
	|	И (ВходящийДокументСЭДОФСС.ТипСообщения = ""303""
	|			ИЛИ ВходящийДокументСЭДОФСС.ТипСообщения = ""308"")";
	
	Запрос.УстановитьПараметр("Организация", 
		?(Организация = Неопределено, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Требования = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ДатаОтветаИзмененная) Тогда
			ДатаОтвета = Выборка.ДатаОтветаИзмененная;
		Иначе
			ДатаОтвета = Выборка.ОтветитьДо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаОтвета) Тогда
			Продолжить;
		КонецЕсли;
	
		РазностьДней = ТребованияФНС.РазностьДатПоКалендарю(Сегодня, ДатаОтвета).Дельта;
		Если РазностьДней <= 2 И РазностьДней >-60 Тогда
			Требования.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Требования;
	
КонецФункции

Процедура ЗаписатьВРегистрИзвлеченныеДанныеТребованийСФР(Ссылка) Экспорт
	
	Корректно = 
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВходящийДокументСЭДОФСС")
		И ЗначениеЗаполнено(Ссылка);
	
	Если НЕ Корректно Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияИзРегистра = ДанныеРегистраИзвлеченныеДанныеТребованийСФР(Ссылка);
	
	Если ИнформацияИзРегистра.ЕстьДанные Тогда
		
		ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребованийСФР(Ссылка, ИнформацияИзРегистра.ДнейДоОтвета);
		
		ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребованийСФР(Ссылка, ЗначенияЗаполнения);
		
	Иначе
		
		ЗначенияЗаполнения = СвойстваЗаписиРегистраИзвлеченныеДанныеТребованийСФР(Ссылка,, Истина);
		ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребованийСФР(Ссылка, ЗначенияЗаполнения);
			
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеРегистраИзвлеченныеДанныеТребованийСФР(Ссылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьДанные", Ложь);
	Результат.Вставить("Ссылка", Ссылка);
	Регистр = Метаданные.РегистрыСведений.СвойстваОтветовНаТребованияФСС;
	Для каждого Реквизиты Из Регистр.Реквизиты Цикл
		Результат.Вставить(Реквизиты.Имя, Реквизиты.Тип.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросДанных.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.СвойстваОтветовНаТребованияФСС КАК СвойстваОтветовНаТребованияФСС
	|ГДЕ
	|	СвойстваОтветовНаТребованияФСС.Ссылка = &Ссылка";
	
	Выборка = ЗапросДанных.Выполнить().Выгрузить();
	Если Выборка.Количество() = 1 Тогда
		
		СтрокаВыборки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка[0]);
		
		ЗаполнитьЗначенияСвойств(Результат, СтрокаВыборки);
		Результат.Вставить("ЕстьДанные", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваЗаписиРегистраИзвлеченныеДанныеТребованийСФР(Ссылка, ДнейДоОтвета = 0, ПервоначальноеЗаполнение = Ложь)
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ПервоначальноеЗаполнение Тогда
		
		ДатаОтправки = Ссылка.ВходящаяДата;
		ЗначенияЗаполнения.Вставить("ДатаОтправкиТребования", ДатаОтправки);
		
	КонецЕсли;
	
	Если ДнейДоОтвета <> 0 Тогда
		ЗначенияЗаполнения.Вставить("ДнейДоОтвета",  ДнейДоОтвета);
		ЗначенияЗаполнения.Вставить("ТребуетОтвета", Истина);
	КонецЕсли;
	
	ДатаПодтверждения = Ссылка.ДатаОтправкиПодтверждения;
	ЗначенияЗаполнения.Вставить("ДатаПодтверждения", ДатаПодтверждения);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ОтветыНаТребования = КонтекстЭДОСервер.ПолучитьКоличествоОтветовНаТребования(Ссылка,,Ложь);
	КоличествоОтветов  = ОтветыНаТребования.Получить(Ссылка);
	ЗначенияЗаполнения.Вставить("КоличествоОтветов", КоличествоОтветов);
	
	Если КоличествоОтветов > 0 Тогда
		
		ДатаОтвета = Ссылка.ДатаОтправкиОтветаНаЗапрос;
		ЗначенияЗаполнения.Вставить("ДатаОтвета", ДатаОтвета);
		
		Состояния = СостоянияОтветов(Ссылка);
		
		Если Состояния.ЕстьКритическиеОшибки Тогда
			ЗначенияЗаполнения.Вставить("ЕстьКритическаяОшибкаОтвета", Истина);
		КонецЕсли;
		
		Если Состояния.ОтветНеПринят Тогда
			ЗначенияЗаполнения.Вставить("ОтветНеПринят", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;

КонецФункции

Функция СостояниеОтвета(Ответ)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ДополнительныеПараметры = Новый Структура("ПолучатьДаты, ПолучатьОшибкиОтправки", Ложь, Истина);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(
		Ответ,
		,
		ДополнительныеПараметры);
		
	Если ТекущееСостояние = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийЭтапОтправки = ТекущееСостояние.ТекущийЭтапОтправки;
	
	Если ТекущийЭтапОтправки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийЭтапОтправки.Вставить("ЕстьКритическиеОшибки", ТекущееСостояние.ЕстьКритическиеОшибки);
	
	Возврат ТекущийЭтапОтправки;

КонецФункции

Функция СостоянияОтветов(Требование)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Ответы = КонтекстЭДОСервер.ОтветыНаТребованиеФСС(Требование);

	ЕстьКритическиеОшибки = Ложь;
	ОтветНеПринят = Ложь;
	Для каждого Ответ Из Ответы Цикл
		
		Состояние = СостояниеОтвета(Ответ);
		Если Состояние = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Состояние.ЕстьКритическиеОшибки Тогда
			ЕстьКритическиеОшибки = Истина;
		КонецЕсли;
		
		Если Состояние.СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота Тогда
			ОтветНеПринят = Истина;
		КонецЕсли;
	
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОтветНеПринят", ОтветНеПринят);
	ДополнительныеПараметры.Вставить("ЕстьКритическиеОшибки", ЕстьКритическиеОшибки);
	
	Возврат ДополнительныеПараметры;

КонецФункции

Функция ОбновитьИнформациюВРегистреИзвлеченныеДанныеТребованийСФР(СсылкаОтправки, ДанныеЗаписи) Экспорт
	
	Результат = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		СтруктураКлюча = Новый Структура("Ссылка", СсылкаОтправки);
		Ключ = РегистрыСведений.СвойстваОтветовНаТребованияФСС.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СвойстваОтветовНаТребованияФСС");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаОтправки);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СвойстваОтветовНаТребованияФСС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(СсылкаОтправки);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Ссылка = СсылкаОтправки;
		КонецЕсли;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция МосковскоеВремя()
	
	ТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();
	ЧасовойПоясМСК = "Europe/Moscow";
	ТекущаяДата = МестноеВремя(ТекущаяУниверсальнаяДата, ЧасовойПоясМСК);
	
	Возврат ТекущаяДата;
	
КонецФункции

Функция ВремяЗапускаЗаданияПопадаетВПиковыеЧасы()
	
	Результат = Ложь;
	
	ПиковыеИнтервалы = Новый Массив;
	ИнтервалОбразец = Новый Структура("С, По", 0, 0);
	Интервал = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИнтервалОбразец);
	Интервал.С = 8;
	Интервал.По = 10;
	ПиковыеИнтервалы.Добавить(Интервал);
	Интервал = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИнтервалОбразец);
	Интервал.С = 12;
	Интервал.По = 13;
	ПиковыеИнтервалы.Добавить(Интервал);
	Интервал = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИнтервалОбразец);
	Интервал.С = 15;
	Интервал.По = 16;
	ПиковыеИнтервалы.Добавить(Интервал);
	
	МосковскоеВремя = МосковскоеВремя();
	ТекущийЧас = Час(МосковскоеВремя);
	Для каждого ПиковыйИнтервал Из ПиковыеИнтервалы Цикл
		Если ТекущийЧас >= ПиковыйИнтервал.С И ТекущийЧас < ПиковыйИнтервал.По Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Задержка(ВремяСтарта, ВремяВСекундах, НомерВызова = 1)
	
	НемаршрутизируемыйАдрес = "10.255.255.1";
	СоединениеHTTP = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(
		НемаршрутизируемыйАдрес,
		"",
		ВремяВСекундах);
	HTTPЗапрос = Новый HTTPЗапрос("timeout");
	Попытка
		Ответ = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
	КонецПопытки;
	
	Если НомерВызова > 200 Тогда
		// Ограничиваем рекурсию.
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Если (ВремяСтарта + ВремяВСекундах) > ТекущаяДата Тогда
		НомерВызова = НомерВызова + 1;
		ОсталосьВремени = ВремяСтарта + ВремяВСекундах - ТекущаяДата + 1;
		Задержка(ТекущаяДата, ОсталосьВремени, НомерВызова);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОтключитьФоновыйОбменСЭДО()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Ключ", ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО());
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого Задание Из НайденныеЗадания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляем устаревшие записи из регистра фоновой загрузки сообщений.
Функция УдалитьУстаревшиеЗапросыИзОчередиФоновойЗагрузки()
	
	// Удаляются запросы, ответ на которые не был получены за определенный период.
	ВремяЖизниЗапроса = 3600 * 24 * 3;
	ДатаОтсечкиБезОтвета = ТекущаяДатаНаСервере() - ВремяЖизниЗапроса;
	ВремяЖизниЗапроса = 3600 * 24 * 14;
	ДатаОтсечкиСОтветом = ТекущаяДатаНаСервере() - ВремяЖизниЗапроса;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапросыДляПовторнойОтправкиСЭДО.Идентификатор КАК Идентификатор,
	               |	ЗапросыДляПовторнойОтправкиСЭДО.Организация КАК Организация,
	               |	ЗапросыДляПовторнойОтправкиСЭДО.КодСостояния КАК КодСостояния
	               |ИЗ
	               |	РегистрСведений.ЗапросыДляПовторнойОтправкиСЭДО КАК ЗапросыДляПовторнойОтправкиСЭДО
	               |ГДЕ
	               |	(ЗапросыДляПовторнойОтправкиСЭДО.Дата < &ДатаОтсечкиБезОтвета
	               |				И НЕ ЗапросыДляПовторнойОтправкиСЭДО.БылПолученОтветСервера
	               |			ИЛИ ЗапросыДляПовторнойОтправкиСЭДО.Дата < &ДатаОтсечкиСОтветом
	               |				И ЗапросыДляПовторнойОтправкиСЭДО.БылПолученОтветСервера)";
	Запрос.УстановитьПараметр("ДатаОтсечкиБезОтвета", ДатаОтсечкиБезОтвета);
	Запрос.УстановитьПараметр("ДатаОтсечкиСОтветом", ДатаОтсечкиСОтветом);
	РезультатВыполнить = Запрос.Выполнить();
	Если РезультатВыполнить.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;

	Набор = РезультатВыполнить.Выгрузить();

	Для Каждого Запрос Из Набор Цикл
		Запись = РегистрыСведений.ЗапросыДляПовторнойОтправкиСЭДО.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = Запрос.Идентификатор;
		Запись.Организация = Запрос.Организация;
		Запись.Прочитать();
		Запись.Удалить();
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ТекущаяДатаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

Функция СтрокаИзДанныхПоАдресу(Адрес)
	
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда
		Возврат "";
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Чтение = Новый ЧтениеДанных(Данные);
		Результат = Чтение.ПрочитатьСимволы();
		Чтение.Закрыть();
	Иначе
		Результат = Данные;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КодыВозвратаПовторнойОтправки()
	
	Коды = Новый Массив;
	Коды.Добавить(504);
	Коды.Добавить(502);
	Коды.Добавить(404);
	Коды.Добавить(403);
	Коды.Добавить(0);
	
	Возврат Коды;
	
КонецФункции

Функция ИдентификаторРегламентногоЗаданияФоновогоОбменаСЭДО()
	
	Возврат "ФоноваяОтправкаЗапросовСЭДО";
	
КонецФункции

#КонецОбласти