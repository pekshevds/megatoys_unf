#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.РазрешеноИзменятьСтруктуру = Ложь;
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	Настройки.События.ПослеЗаполненияПанелиБыстрыхНастроек = Истина;

	СоответствиеСтрок = Новый Структура();
    СоответствиеСтрок.Вставить("Номенклатура",   "Номенклатура");
    СоответствиеСтрок.Вставить("Характеристика", "Характеристика");
    СоответствиеСтрок.Вставить("Количество", 	 "Количество");

	ПоляДляИзменения  = "Номенклатура, Характеристика";
	
	ПереопределяемыеКоманды	= Новый Структура();
	ПереопределяемыеКоманды.Вставить(
		"ГрупповоеИзменениеОбъектов", 
		Новый Структура("ТипКоманды, ПоляДляИзменения", "ГрупповоеИзменениеОбъектов", ПоляДляИзменения));
		
	ПереопределяемыеКоманды.Вставить(
		"КопироватьСтрокиВБуфер", 	   
		Новый Структура("ТипКоманды, СоответствиеСтрок", "КопироватьСтрокиВБуфер", СоответствиеСтрок));

	Настройки.Вставить("ПереопределяемыеКоманды", ПереопределяемыеКоманды);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	УстановитьТегиВариантов(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

// Выводит и группирует элементы формы, связанные с пользовательскими настройками.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   ПараметрыОбновления - Структура
//                       - Неопределено
//
Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыОбновления) Экспорт
	
	Ном = 0;
	
	Для Каждого ЭлементНастройки Из Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		ОписаниеПараметра = "";
        ИмяЭлемента		  = СтрШаблон("КомпоновщикНастроекПользовательскиеНастройкиЭлемент%1Значение", Ном);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементНастройки, "Параметр") 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
			
			Если ЭлементНастройки.Параметр = Новый ПараметрКомпоновкиДанных("КоличествоПериодовАнализа") Тогда
				ОписаниеПараметра = НСтр("ru = 'При пустом значении, количество периодов считается автоматически по выбранному периоду отчета.'");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеПараметра) Тогда

			Форма.Элементы[ИмяЭлемента].Подсказка 			 = ОписаниеПараметра;
			Форма.Элементы[ИмяЭлемента].ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
			
		КонецЕсли;
		
		Ном = Ном + 1;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);
	РаботаССегментами.ОпределитьВидимостьОтбораПоСегментуВОтчете(Форма);
	ОтчетыУНФ.ОбновитьВидимостьОтбораОрганизация(Форма.Отчет.КомпоновщикНастроек);
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские
//                                                                                 настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	
	ПользовательскиеНастройкиМодифицированы = Ложь;
	УправлениеНебольшойФирмойОтчеты.ИсправитьНастройкиГруппировок(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
	НастройкиОтчета = КомпоновщикНастроек.Настройки;
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(НастройкиОтчета);
	
	СуммаПроцентов = ПараметрыОтчета.ПроцентAКласса + ПараметрыОтчета.ПроцентBКласса + ПараметрыОтчета.ПроцентCКласса;
	Если СуммаПроцентов <> 100 Тогда
		ВызватьИсключение "Сумма процентов критериев распределения по АВС-классам должна быть равна 100%";
	КонецЕсли; 
	
	ОтчетыУНФ.СтандартизироватьСхему(СхемаКомпоновкиДанных);
	ОтчетыУНФ.ДобавитьВычисляемыеПоля(СхемаКомпоновкиДанных);
	
	УправлениеНебольшойФирмойОтчеты.УстановитьМакетОформленияОтчета(НастройкиОтчета);
	
	РезультатРаспределения = ПолучитьРезультатРаспределения(ПараметрыОтчета);
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаКлассовОбъектов", РезультатРаспределения);
	
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ЭлементСтруктуры.Выбор.Элементы.Очистить();
			ПолеПоиска = Новый ПолеКомпоновкиДанных(ПараметрыОтчета.ПараметрАнализа);
			НайденноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.Элементы.Найти(ПолеПоиска);
			Если НайденноеПоле <> Неопределено Тогда
				ВыбранноеПоле = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеПоиска;
				ВыбранноеПоле.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыУсловногоОформления = ПараметрыОтчета.НастройкиОтчета.УсловноеОформление.Элементы;
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из ЭлементыУсловногоОформления Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ОформлениеПараметраАнализа" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		ЭлементыУсловногоОформления.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЭлементУсловногоОформления = ЭлементыУсловногоОформления.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(230, 230, 230));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ОформлениеПараметраАнализа";
	ЭлементУсловногоОформления.Представление = "Оформление параметра анализа";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПараметрыОтчета.ПараметрАнализа);
	ОформляемоеПоле.Использование = Истина;
	
	Если ПараметрыОтчета.ОбъектАнализа = "Номенклатура" 
		И ПараметрыОтчета.ЕстьХарактеристики Тогда
		
		НовоеПоле = СхемаКомпоновкиДанных.НаборыДанных.КлассификацияОбъектов.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = "Характеристика";
		НовоеПоле.ПутьКДанным = "Характеристика";
		НовоеПоле.Роль.Измерение = Истина;
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		
		НоваяСвязь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
		НоваяСвязь.ВыражениеИсточник = "Характеристика";
		НоваяСвязь.ВыражениеПриемник = "Характеристика";
		НоваяСвязь.НаборДанныхИсточник = "КлассификацияОбъектов";
		НоваяСвязь.НаборДанныхПриемник = "ДанныеПоПродажам";
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);

	// Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	// Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	ТаблицаЗафиксирована = Ложь;

	ДокументРезультат.ФиксацияСверху = 0;
	
	// Основной цикл вывода отчета
	ОбластиКУдалению = Новый Массив;
	КоличествоДиаграмм = 0;
	Пока Истина Цикл
		// Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();

		Если ЭлементРезультата = Неопределено Тогда
			// Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
		Иначе
			// Зафиксируем шапку
			Если  Не ТаблицаЗафиксирована 
				  И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
				  И ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда

				ТаблицаЗафиксирована = Истина;
				ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;

			КонецЕсли;
			// Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
	Для каждого Область Из ОбластиКУдалению Цикл
		ДокументРезультат.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЦикла;
	
	ОтчетыУНФ.ОбработатьДиаграммыТабличногоДокумента(ДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	// АПК:216-выкл
	НастройкиВариантов["ABCXYZАнализПродажПоНоменклатуре"].Теги = НСТР("ru = 'Номенклатура,Продажи'");
	НастройкиВариантов["ABCXYZАнализПродажПоКатегориямНоменклатуры"].Теги = НСТР("ru = 'Категории,Продажи'");
	НастройкиВариантов["ABCXYZАнализПродажПоПокупателям"].Теги = НСТР("ru = 'Покупатели,Контрагенты,Продажи,CRM'");
	НастройкиВариантов["ABCXYZАнализПродажПоМенеджерам"].Теги = НСТР("ru = 'Менеджеры,Сотрудники,Продажи'");
	// АПК:216-вкл
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	// АПК:216-выкл
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ABCXYZАнализПродажПоНоменклатуре"].СвязанныеПоля,
		"Номенклатура", "Справочник.Номенклатура");
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ABCXYZАнализПродажПоКатегориямНоменклатуры"].СвязанныеПоля,
		"Номенклатура.КатегорияНоменклатуры", "Справочник.КатегорииНоменклатуры");
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ABCXYZАнализПродажПоПокупателям"].СвязанныеПоля,
		"Контрагент", "Справочник.Контрагенты");
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["ABCXYZАнализПродажПоМенеджерам"].СвязанныеПоля,
		"Ответственный", "Справочник.Сотрудники");
	// АПК:216-вкл
	
КонецПроцедуры
 
Функция ПолучитьРезультатРаспределения(ПараметрыОтчета)

	Запрос = Новый Запрос;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ПараметрыОтчета.НастройкиОтчета);
	
	Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных.ДанныеПоПродажам.Запрос;
	
	ЕстьХарактеристики = СтрНайти(Запрос.Текст, "Характеристика") <> 0 И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ПараметрыОтчета.Вставить("ЕстьХарактеристики", ЕстьХарактеристики);
	
	Если Не ЕстьХарактеристики Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Сумма),
		|	СУММА(Себестоимость),
		|	СУММА(ВаловаяПрибыль)
		|ПО
		|	ПродажиОбороты.Период ПЕРИОДАМИ("+ПараметрыОтчета.Периодичность+", &НачалоПериода, &КонецПериода),
		|	ОбъектАнализа КАК ОбъектАнализа";
	Иначе
		Запрос.Текст = Запрос.Текст +
		"
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Сумма),
		|	СУММА(Себестоимость),
		|	СУММА(ВаловаяПрибыль)
		|ПО
		|	ПродажиОбороты.Период ПЕРИОДАМИ("+ПараметрыОтчета.Периодичность+", &НачалоПериода, &КонецПериода),
		|	ОбъектАнализа КАК ОбъектАнализа,
		|	Характеристика";
	КонецЕсли;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));

	КвалификаторЧисла = Новый КвалификаторыЧисла(15, 2);
	ОписаниеТипаЧисло = Новый ОписаниеТипов(Массив, КвалификаторЧисла);
	
	ТаблицаКлассовОбъектов = Новый ТаблицаЗначений;
	ТаблицаКлассовОбъектов.Колонки.Добавить("Объект");
	ТаблицаКлассовОбъектов.Колонки.Добавить("Характеристика");
	ТаблицаКлассовОбъектов.Колонки.Добавить("КлассABC");
	ТаблицаКлассовОбъектов.Колонки.Добавить("КлассXYZ");
	ТаблицаКлассовОбъектов.Колонки.Добавить("КоэффициентВариации", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("СреднееЗначение", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("Доля", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("РаспределениеПоПериодам");
	ТаблицаКлассовОбъектов.Колонки.Добавить("Сумма", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("Себестоимость", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("ВаловаяПрибыль", ОписаниеТипаЧисло);
	ТаблицаКлассовОбъектов.Колонки.Добавить("Количество", ОписаниеТипаЧисло);
	
	ЗаполнитьТаблицуКлассовОбъектов(Результат, ТаблицаКлассовОбъектов, ПараметрыОтчета);
	
	Возврат ТаблицаКлассовОбъектов;
	
КонецФункции

// Процедура заполняет данными таблицу значений, распределяет объекты отчета по АВС-классам
// 
// Параметры
//  Выборка                - ВыборкаИзРезультатаЗапроса, по группировке объекта отчета
//  ТаблицаКлассовОбъектов - таблица значений, таблица с распределенными объектами отчета по классам
//
// Возвращаемые значения
//  НЕТ
//
Процедура ЗаполнитьТаблицуКлассовОбъектов(Результат, ТаблицаКлассовОбъектов, ПараметрыОтчета)

	ПараметрАнализа = ПараметрыОтчета.ПараметрАнализа;
	
	КоличествоПериодовАнализа 	= ПараметрыОтчета.КоличествоПериодовАнализа;
	ПараметрXКлассаНач 			= ПараметрыОтчета.ПараметрXКлассаНач;
	ПараметрXКлассаКон 			= ПараметрыОтчета.ПараметрXКлассаКон;
	ПараметрYКлассаНач 			= ПараметрыОтчета.ПараметрYКлассаНач;
	ПараметрYКлассаКон 			= ПараметрыОтчета.ПараметрYКлассаКон;
	ПараметрZКлассаНач 			= ПараметрыОтчета.ПараметрZКлассаНач;
	ПараметрZКлассаКон 			= ПараметрыОтчета.ПараметрZКлассаКон;
	
	Если ПараметрыОтчета.ОбъектАнализа = "Номенклатура"
		И ПараметрыОтчета.ЕстьХарактеристики Тогда
		
		ВыборкаОбъектовАнализа = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОбъектАнализа");
		Пока ВыборкаОбъектовАнализа.Следующий() Цикл
			
			ВыборкаОбъектов = ВыборкаОбъектовАнализа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
			Пока ВыборкаОбъектов.Следующий() Цикл
				
				СуммаПараметровЗаВсеПериоды = ВыборкаОбъектов[ПараметрАнализа];
				
				СреднееЗначениеПараметра = ?(КоличествоПериодовАнализа = 0, 0, (СуммаПараметровЗаВсеПериоды/КоличествоПериодовАнализа));
				
				СуммаПодкоренногоВыражения = 0;
				НомерПериода = 0;
				
				РаспределениеПоПериодам = Новый Соответствие;
				
				ВыборкаПериодов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
				Пока ВыборкаПериодов.Следующий() Цикл
					
					Если ВыборкаПериодов.Период = NULL Тогда
						Продолжить;
					Иначе
						Если ВыборкаПериодов[ПараметрАнализа] = NULL Тогда
							СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((0 - СреднееЗначениеПараметра), 2);
							РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,0);
						Иначе
							СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((ВыборкаПериодов[ПараметрАнализа] - СреднееЗначениеПараметра), 2);
							РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,ВыборкаПериодов[ПараметрАнализа]);
						КонецЕсли; 
					КонецЕсли; 
					
				КонецЦикла;
				
				ЗначениеКорня = SQRT(?(КоличествоПериодовАнализа = 0, 0, (СуммаПодкоренногоВыражения/КоличествоПериодовАнализа)));
				
				КоэффОтносительнойВариации = ?(СреднееЗначениеПараметра = 0, 0, (ЗначениеКорня*100/СреднееЗначениеПараметра));
				КоэффОтносительнойВариации = ?(КоэффОтносительнойВариации<0,-КоэффОтносительнойВариации,КоэффОтносительнойВариации);
				
				НоваяСтрока = ТаблицаКлассовОбъектов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОбъектов);
				НоваяСтрока.Объект                  = ВыборкаОбъектов.ОбъектАнализа;
				НоваяСтрока.КоэффициентВариации     = КоэффОтносительнойВариации;
				НоваяСтрока.СреднееЗначение         = СреднееЗначениеПараметра;
				НоваяСтрока.РаспределениеПоПериодам = РаспределениеПоПериодам;
				
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		ВыборкаОбъектов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОбъектАнализа");
		Пока ВыборкаОбъектов.Следующий() Цикл
			
			СуммаПараметровЗаВсеПериоды = ВыборкаОбъектов[ПараметрАнализа];
			
			СреднееЗначениеПараметра = ?(КоличествоПериодовАнализа = 0, 0, (СуммаПараметровЗаВсеПериоды/КоличествоПериодовАнализа));
			
			СуммаПодкоренногоВыражения = 0;
			НомерПериода = 0;
			
			РаспределениеПоПериодам = Новый Соответствие;
			
			ВыборкаПериодов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			Пока ВыборкаПериодов.Следующий() Цикл
				
				Если ВыборкаПериодов.Период = NULL Тогда
					Продолжить;
				Иначе
					Если ВыборкаПериодов[ПараметрАнализа] = NULL Тогда
						СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((0 - СреднееЗначениеПараметра), 2);
						РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,0);
					Иначе
						СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((ВыборкаПериодов[ПараметрАнализа] - СреднееЗначениеПараметра), 2);
						РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,ВыборкаПериодов[ПараметрАнализа]);
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла;
			
			ЗначениеКорня = SQRT(?(КоличествоПериодовАнализа = 0, 0, (СуммаПодкоренногоВыражения/КоличествоПериодовАнализа)));
			
			КоэффОтносительнойВариации = ?(СреднееЗначениеПараметра = 0, 0, (ЗначениеКорня*100/СреднееЗначениеПараметра));
			КоэффОтносительнойВариации = ?(КоэффОтносительнойВариации<0,-КоэффОтносительнойВариации,КоэффОтносительнойВариации);
			
			НоваяСтрока = ТаблицаКлассовОбъектов.Добавить();
			НоваяСтрока.Объект                  = ВыборкаОбъектов.ОбъектАнализа;
			НоваяСтрока.КоэффициентВариации     = КоэффОтносительнойВариации;
			НоваяСтрока.СреднееЗначение         = СреднееЗначениеПараметра;
			НоваяСтрока.РаспределениеПоПериодам = РаспределениеПоПериодам;
			НоваяСтрока.Сумма = ВыборкаОбъектов.Сумма;
			НоваяСтрока.Себестоимость = ВыборкаОбъектов.Себестоимость;
			НоваяСтрока.ВаловаяПрибыль = ВыборкаОбъектов.ВаловаяПрибыль;
			НоваяСтрока.Количество = ВыборкаОбъектов.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаКлассовОбъектов.Сортировать("КоэффициентВариации ВОЗР");

	Для каждого Строки Из ТаблицаКлассовОбъектов Цикл
		
		Если Строки.КоэффициентВариации >= ПараметрXКлассаНач И Строки.КоэффициентВариации <= ПараметрXКлассаКон Тогда
			Строки.КлассXYZ = "X-класс";
		ИначеЕсли Строки.КоэффициентВариации > ПараметрYКлассаНач И Строки.КоэффициентВариации <= ПараметрYКлассаКон Тогда
			Строки.КлассXYZ = "Y-класс";
		ИначеЕсли Строки.КоэффициентВариации > ПараметрZКлассаНач И Строки.КоэффициентВариации <= ПараметрZКлассаКон Тогда
			Строки.КлассXYZ = "Z-класс";
		Иначе
			Строки.КлассXYZ = "<Не определен>";
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаКлассовОбъектов.Сортировать(ПараметрАнализа + " ВОЗР");
	
	ВсегоСумма = ТаблицаКлассовОбъектов.Итог(ПараметрАнализа);

	СуммаВысокая = Окр((ВсегоСумма * ПараметрыОтчета.ПроцентAКласса / 100), 2);
	СуммаСредняя = Окр((ВсегоСумма * ПараметрыОтчета.ПроцентBКласса / 100), 2);
	СуммаНизкая = ВсегоСумма - СуммаВысокая - СуммаСредняя;

	СуммаНакопления = 0;
	Для каждого Строки Из ТаблицаКлассовОбъектов Цикл
		
		СуммаНакопления = СуммаНакопления + Строки[ПараметрАнализа];
		
		Если СуммаНакопления <= СуммаНизкая Тогда
			ABCКлассификация = "C-класс";
		ИначеЕсли СуммаНакопления <= (СуммаНизкая + СуммаСредняя) Тогда
			ABCКлассификация = "B-класс";
		Иначе
			ABCКлассификация = "A-класс";
		КонецЕсли;
		
		Строки.КлассABC = ABCКлассификация;
		Строки.Доля     = ?(ВсегоСумма=0,0,Строки[ПараметрАнализа]/ВсегоСумма*100);
		
	КонецЦикла;
	
	СтрокаСортировки = "КлассABC, КлассXYZ";
	ТаблицаКлассовОбъектов.Сортировать(СтрокаСортировки + ", "+ ПараметрАнализа + " УБЫВ");
	
КонецПроцедуры

Функция ПодготовитьПараметрыОтчета(НастройкиОтчета)
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"              , Ложь);
	ПараметрыОтчета.Вставить("Периодичность"                  , Перечисления.Периодичность.Месяц);
	ПараметрыОтчета.Вставить("ОбъектАнализа"                  , "Номенклатура");
	ПараметрыОтчета.Вставить("ПараметрАнализа"                , "Сумма");
	ПараметрыОтчета.Вставить("ПроцентAКласса"                 , 80);
	ПараметрыОтчета.Вставить("ПроцентBКласса"                 , 15);
	ПараметрыОтчета.Вставить("ПроцентCКласса"                 , 5);
	ПараметрыОтчета.Вставить("КоличествоПериодовАнализа"      , 0);
	ПараметрыОтчета.Вставить("ПараметрXКлассаНач"             , 0);
	ПараметрыОтчета.Вставить("ПараметрXКлассаКон"             , 10);
	ПараметрыОтчета.Вставить("ПараметрYКлассаНач"             , 10);
	ПараметрыОтчета.Вставить("ПараметрYКлассаКон"             , 25);
	ПараметрыОтчета.Вставить("ПараметрZКлассаНач"             , 25);
	ПараметрыОтчета.Вставить("ПараметрZКлассаКон"             , 10000);
	
	Для Каждого КлючПараметра Из ПараметрыОтчета Цикл
		
		ПолеПараметра  = Новый ПараметрКомпоновкиДанных(КлючПараметра.Ключ);
		ПараметрОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметра);

		Если ПараметрОтчета <> Неопределено
			И ПараметрОтчета.Использование Тогда
			
			ПараметрыОтчета[КлючПараметра.Ключ] = ПараметрОтчета.Значение;
			
		КонецЕсли;
		
	КонецЦикла;

	ПараметрОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СтПериод"));
	Период		   = ПараметрОтчета.Значение;
	
	Если ПараметрыОтчета.КоличествоПериодовАнализа = 0 Тогда
		
		ДатаПеребора 		= Период.ДатаНачала;
        КоличествоПериодов  = 0;
		Периодичность		= ПараметрыОтчета.Периодичность;
		
		Пока ДатаПеребора <= Период.ДатаОкончания Цикл
			
			КоличествоПериодов  = КоличествоПериодов + 1;
			ДатаПеребора 		= ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(
				КонецДня(ДатаПеребора), 
				Периодичность, 
				КоличествоПериодов);
			
		КонецЦикла;
		
		ПараметрыОтчета.КоличествоПериодовАнализа = МАКС(1, КоличествоПериодов - 1);
		
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьЗаголовок Тогда
		
		Периодичность			  = ПараметрыОтчета.Периодичность;
		КоличествоПериодовАнализа = ПараметрыОтчета.КоличествоПериодовАнализа;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
			ПараметрыОтчета,
			ПодготовитьПараметрыВыводаЗаголовкаОтчета(Период, Периодичность, КоличествоПериодовАнализа, НастройкиОтчета));
		
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("НастройкиОтчета"                , НастройкиОтчета);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ПодготовитьПараметрыВыводаЗаголовкаОтчета(Период, Периодичность, КоличествоПериодовАнализа, НастройкиОтчета)
	
	Заголовок 						= НСтр("ru = 'ABC/XYZ - анализ продаж'");
	ПараметрыВключаемыеВТекстОтбора = Новый Массив;
	
	ПараметрВывода = НастройкиОтчета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
	Если ПараметрВывода <> Неопределено
		И ПараметрВывода.Использование Тогда
		Заголовок = ПараметрВывода.Значение;
	КонецЕсли;
	
	ПараметрПериодичность = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));
	Если ПараметрПериодичность <> Неопределено
		И ПараметрПериодичность.Использование
		И ЗначениеЗаполнено(ПараметрПериодичность.Значение) Тогда
		
		ПараметрПериодичность.ПредставлениеПользовательскойНастройки = "Периодичность";
		ПараметрыВключаемыеВТекстОтбора.Добавить(ПараметрПериодичность);
		
	КонецЕсли;
	
	ПараметрОбъектАнализа = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОбъектАнализа"));
	Если ПараметрОбъектАнализа <> Неопределено
		И ПараметрОбъектАнализа.Использование Тогда
		
		ПараметрОбъектАнализа.ПредставлениеПользовательскойНастройки = "Объект анализа";
		ПараметрыВключаемыеВТекстОтбора.Добавить(ПараметрОбъектАнализа);
		
	КонецЕсли;
	
	ПараметрДляАнализа = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПараметрАнализа"));
	Если ПараметрДляАнализа <> Неопределено
		И ПараметрДляАнализа.Использование Тогда
		
		ПараметрДляАнализа.ПредставлениеПользовательскойНастройки = "Параметр анализа";
		ПараметрыВключаемыеВТекстОтбора.Добавить(ПараметрДляАнализа);
		
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода"                  , Период.ДатаНачала);
	ПараметрыОтчета.Вставить("КонецПериода"                   , Период.ДатаОкончания);
	ПараметрыОтчета.Вставить("Заголовок"                      , Заголовок);
	ПараметрыОтчета.Вставить("ПараметрыВключаемыеВТекстОтбора", ПараметрыВключаемыеВТекстОтбора);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли