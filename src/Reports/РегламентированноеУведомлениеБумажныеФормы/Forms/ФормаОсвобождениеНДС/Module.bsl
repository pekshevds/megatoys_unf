
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Данные = Неопределено;
	Параметры.Свойство("Данные", Данные);
	Параметры.Свойство("ДатаНачало", ДатаНачало);
	НазваниеФормыНалогиИОтчеты = "ОбщаяФорма.НалогиИОтчеты";
	
	Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОсвобождениеОтУплатыНДС;
	УведомлениеОСпецрежимахНалогообложения.НачальныеОперацииПриСозданииНаСервере(ЭтотОбъект);
	УведомлениеОСпецрежимахНалогообложения.СформироватьСпискиВыбора(ЭтотОбъект, "СпискиВыбора2020_Подписант");
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		СформироватьДеревоСтраниц();
		УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
		УведомлениеОСпецрежимахНалогообложения.ЗагрузитьДанныеПростогоУведомления(ЭтотОбъект, Данные, ПредставлениеУведомления)
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Организация = Параметры.Ключ.Организация;
		ЗагрузитьДанные(Параметры.Ключ);
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Организация = Параметры.ЗначениеКопирования.Организация;
		ЗагрузитьДанные(Параметры.ЗначениеКопирования);
		ОперацияКопирования = Истина;
	Иначе
		Параметры.Свойство("Организация", Объект.Организация);
		Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
		СформироватьДеревоСтраниц();
		УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
		ДополнитьДеревоСтраниц(Параметры.СписокЛистовДерева);
		ЗаполнитьНачальныеДанные();
	КонецЕсли;
	
	НастройкаВидимостиБаннера(Истина);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	Заголовок = УведомлениеОСпецрежимахНалогообложения.ДополнитьЗаголовокУведомления(Заголовок, Объект.Организация);
	Если Не ДанныеУведомления.Титульная.Свойство("ПРИЗНАК_НП_ПОДВАЛ") Тогда
		ТабДокБП3 = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(ЭтотОбъект, "Титульная_ОсвобождениеОтУплатыНДС_БП3");
		Для Каждого Обл Из ТабДокБП3.Области Цикл 
			Если Не ДанныеУведомления.Титульная.Свойство(Обл.Имя)
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина Тогда 
				
				ДанныеУведомления.Вставить(Обл.Имя);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьНачальныеДанные_501();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = РазрешитьВыгружатьСОшибками;
	Если ОперацияКопирования Тогда 
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Копирование отчета не предусмотрено'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерИзмененияНастроекУчетаНДСНажатие(Элемент)
	Элементы.ГруппаНеобходимоИзменитьНастройкиУчета.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БаннерИзмененияНастроекУчетаНДСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНалогиИОтчеты" Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзмененыНастройкиУчетаНДС", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("ОсвобождениеОтУплатыНДС", Истина);
		ПараметрыФормы.Вставить("ДатаОсвобожденияОтУплатыНДС", ДанныеУведомления.Титульная.ДатаНачало);
		ОткрытьФорму(НазваниеФормыНалогиИОтчеты, ПараметрыФормы, ЭтотОбъект ,,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура Очистить(Команда)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОчиститьУведомление(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОчисткаОтчета() Экспорт
	Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
	СформироватьДеревоСтраниц();
	УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
	ЗаполнитьНачальныеДанные();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеДанные() Экспорт
	Титульная = ДанныеУведомления.Титульная;
	Титульная.ДатаНачало = ДатаНачало;
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		СтрокаСведений = "ИННЮЛ,КППЮЛ,НаимЮЛПол,АдрЮР,ТелОрганизации";
		ДП = ?(ЗначениеЗаполнено(Объект.ДатаПодписи), Объект.ДатаПодписи, ТекущаяДатаСеанса());
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, ДП, СтрокаСведений);
		Титульная["НПЛ"] = СведенияОбОрганизации.НаимЮЛПол;
		Титульная["ИННКПП"] = СведенияОбОрганизации.ИННЮЛ + "/" + СведенияОбОрганизации.КППЮЛ;
		Титульная["АддрТел1"] = СведенияОбОрганизации.АдрЮР;
		Титульная["АддрТел2"] = СведенияОбОрганизации.ТелОрганизации;
		Титульная["НаименованиеНПЛ"] = СведенияОбОрганизации.НаимЮЛПол;
		Титульная["ДатаОт"] = Объект.ДатаПодписи;
		
		КИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса(), Ложь);
		Если ТипЗнч(КИ) = Тип("ТаблицаЗначений")
			И КИ.Количество() = 1
			И КИ.Колонки.Найти("Значение") <> Неопределено Тогда 
			
			Титульная["АддрТел1"] = КИ[0].Представление;
		КонецЕсли;
	Иначе 
		СтрокаСведений = "ИННФЛ,ФИО,ТелДом,АдрПрописки";
		ДП = ?(ЗначениеЗаполнено(Объект.ДатаПодписи), Объект.ДатаПодписи, ТекущаяДатаСеанса());
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, ДП, СтрокаСведений);
		Титульная["НПЛ"] = СведенияОбОрганизации.ФИО;
		Титульная["ИННКПП"] = СведенияОбОрганизации.ИННФЛ;
		Титульная["АддрТел1"] = СведенияОбОрганизации.АдрПрописки;
		Титульная["АддрТел2"] = СведенияОбОрганизации.ТелДом;
		Титульная["НаименованиеНПЛ"] = СведенияОбОрганизации.ФИО;
		Титульная["ДатаОт"] = Объект.ДатаПодписи;
		
		КИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса(), Ложь);
		Если ТипЗнч(КИ) = Тип("ТаблицаЗначений")
			И КИ.Количество() = 1
			И КИ.Колонки.Найти("Значение") <> Неопределено Тогда 
			
			Титульная["АддрТел1"] = КИ[0].Представление;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьНачальныеДанные_501();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеДанные_501()
	ДанныеУведомленияТитульный = ДанныеУведомления["Титульная"];
	ДанныеУведомленияТитульный.Вставить("КодНО", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код"));
	Объект.ДатаПодписи = ТекущаяДатаСеанса();
	ДанныеУведомленияТитульный.Вставить("ДАТА_ПОДПИСИ", Объект.ДатаПодписи);
	
	ЭтоЮЛ = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация);
	Если ЭтоЮЛ Тогда
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ,ТелОрганизации";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
									Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		Если СтрНачинаетсяС(СведенияОбОрганизации.ТелОрганизации, "+7") Тогда 
			СведенияОбОрганизации.ТелОрганизации = Сред(СведенияОбОрганизации.ТелОрганизации, 3);
		КонецЕсли;
		ДанныеУведомленияТитульный.Вставить("ИНН", СведенияОбОрганизации.ИННЮЛ);
		ДанныеУведомленияТитульный.Вставить("Наименование", СведенияОбОрганизации.НаимЮЛПол);
		ДанныеУведомленияТитульный.Вставить("КПП", СведенияОбОрганизации.КППЮЛ);
		ДанныеУведомленияТитульный.Вставить("Тлф", СведенияОбОрганизации.ТелОрганизации);
	Иначе
		СтрокаСведений = "ИННФЛ,ФИО,ТелДом";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
									Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН", СведенияОбОрганизации.ИННФЛ);
		ДанныеУведомленияТитульный.Вставить("Наименование", СведенияОбОрганизации.ФИО);
		ДанныеУведомленияТитульный.Вставить("Тлф", СведенияОбОрганизации.ТелДом);
	КонецЕсли;
	
	Реквизиты = РегистрацияВНОСервер.ДанныеРегистрации(Объект.РегистрацияВИФНС);
	ДанныеУведомленияТитульный.Вставить("КодНО", Реквизиты.Код);
	ДанныеУведомленияТитульный.Вставить("КПП", Реквизиты.КПП);
	
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		УведомлениеОСпецрежимахНалогообложения.УстановитьПредставителяПоФизЛицу(ЭтотОбъект);
	Иначе
		УведомлениеОСпецрежимахНалогообложения.УстановитьПредставителяПоОрганизации(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоРегистрацииВИФНС()
	Реквизиты = РегистрацияВНОСервер.ДанныеРегистрации(Объект.РегистрацияВИФНС);
	ПредставлениеУведомления.Области["КодНО"].Значение = Реквизиты.Код;
	ПредставлениеУведомления.Области["КПП"].Значение = Реквизиты.КПП;
	ДанныеУведомленияТитульный = ДанныеУведомления["Титульная"];
	ДанныеУведомленияТитульный.Вставить("КодНО", ПредставлениеУведомления.Области["КодНО"].Значение);
	ДанныеУведомленияТитульный.Вставить("КПП", ПредставлениеУведомления.Области["КПП"].Значение);
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		УведомлениеОСпецрежимахНалогообложения.УстановитьПредставителяПоФизЛицу(ЭтотОбъект);
	Иначе
		УведомлениеОСпецрежимахНалогообложения.УстановитьПредставителяПоОрганизации(ЭтотОбъект);
	КонецЕсли;
	
	ДанныеУведомленияТитульный.Вставить("ПРИЗНАК_НП_ПОДВАЛ", ПредставлениеУведомления.Области["ПРИЗНАК_НП_ПОДВАЛ"].Значение);
	ДанныеУведомленияТитульный.Вставить("НаимДок", ПредставлениеУведомления.Области["НаимДок"].Значение);
	ДанныеУведомленияТитульный.Вставить("НаимОргПред", ПредставлениеУведомления.Области["НаимОргПред"].Значение);
	ДанныеУведомленияТитульный.Вставить("ДАТА_ПОДПИСИ", ПредставлениеУведомления.Области["ДАТА_ПОДПИСИ"].Значение);
	ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение);
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоСтраниц() Экспорт
	ДеревоСтраниц.ПолучитьЭлементы().Очистить();
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Уведомление";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Титульная_ОсвобождениеОтУплатыНДС_БП3";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Титульная";
	Стр001.МакетыПФ = "Печать_MXL_Форма_ОсвобождениеОтУплатыНДС";
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОбластей()
	Области = Новый Соответствие;
	Области[2] = "ШапкаКнигаПродаж,ЗаголовокКнигаПродаж,ОписаниеВыручкиКнигаПродаж,ВыручкаКнигаПродаж,ПодвалКнигаПродаж";
	Области[3] = "Шапка,ЗаголовокБаланс,ОписаниеВыручки,Выручка,Подвал";
	Области[4] = "Шапка,ЗаголовокИП,ОписаниеВыручки,Выручка,Подвал";
	Области[5] = "Шапка,ЗаголовокУСН,ОписаниеВыручки,Выручка,Подвал";
	Возврат Области;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьСтроку(ИсхСтр, СимвПеренос)
	Результат = "";
	ТекСчетчик = 0;
	Для Каждого Слово Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИсхСтр, " .,;") Цикл 
		Результат = Результат + Слово;
		ТекСчетчик = ТекСчетчик + СтрДлина(Слово);
		Если ТекСчетчик > СимвПеренос Тогда 
			Результат = Результат + Символы.ПС;
			ТекСчетчик = 0;
		Иначе
			Результат = Результат + " ";
		КонецЕсли;
	КонецЦикла;
	Возврат СокрЛП(Результат);
КонецФункции

&НаСервере
Процедура ДополнитьДеревоСтраниц(СписокЛистовДерева)
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	
	Области = ПолучитьОписаниеОбластей();
	Для Инд = 2 По 5 Цикл 
		ЭСЗ = СписокЛистовДерева.НайтиПоЗначению(Инд);
		Если ЭСЗ <> Неопределено Тогда 
			Стр001 = КорневойУровень.Добавить();
			Стр001.Наименование = ПреобразоватьСтроку(ЭСЗ.Представление, 14);
			Стр001.ИндексКартинки = 1;
			Стр001.ИмяМакета = "";
			Стр001.Многостраничность = Ложь;
			Стр001.Многострочность = Истина;
			Стр001.УИД = Новый УникальныйИдентификатор;
			Стр001.ИДНаименования = "Лист" + Инд;
			
			ДанныеСтраницы = Новый Структура;
			Макет = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(ЭтотОбъект, "Форма_ДополнительныеВыпискиНДС");
			Для Каждого Обл Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Области[Инд], ",") Цикл 
				Для Каждого Ит Из Макет.ПолучитьОбласть(Обл).Области Цикл 
					Если Ит.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
						И Ит.СодержитЗначение = Истина Тогда 
						
						ДанныеСтраницы.Вставить(Ит.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ДанныеУведомления.Вставить(Стр001.ИДНаименования, ДанныеСтраницы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтраницПриАктивизацииСтроки(Элемент)
	Если УведомлениеОСпецрежимахНалогообложенияКлиент.НеобходимоФормированиеТабличногоДокумента(ЭтотОбъект, Элемент, ЭтотОбъект["УИДПереключение"]) Тогда
		ОтключитьОбработчикОжидания("ДеревоСтраницПриАктивизацииСтрокиЗавершение");
		ПодключитьОбработчикОжидания("ДеревоСтраницПриАктивизацииСтрокиЗавершение", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтраницПриАктивизацииСтрокиЗавершение() Экспорт 
	ПредУИД = ЭтотОбъект["УИДПереключение"];
	Элемент = Элементы.ДеревоСтраниц;
	
	ПоказатьТекущуюСтраницу(Элемент.ТекущиеДанные.ИмяМакета);
КонецПроцедуры

&НаСервере
Процедура ПоказатьТекущуюСтраницу(ИмяМакета)
	ПредставлениеУведомления.Очистить();
	ТекущийМакет = ИмяМакета;
	Если ЗначениеЗаполнено(ТекущийМакет) Тогда 
		Макет = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(ЭтотОбъект, ИмяМакета);
		ПредставлениеУведомления.Вывести(Макет.ПолучитьОбласть("ОсновнаяЧасть"));
		СтрДанных = ДанныеУведомления[ТекущееИДНаименования];
		Для Каждого Обл Из ПредставлениеУведомления.Области Цикл 
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение Тогда 
				
				СтрДанных.Свойство(Обл.Имя, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ПредставлениеУведомления.Области.ДатаНачало.Защита = Истина;
		ПредставлениеУведомления.Области.ДатаНачало.ЦветФона = Новый Цвет(255, 255, 255);
	ИначеЕсли СтрНачинаетсяС(ТекущееИДНаименования, "Лист") Тогда 
		ПредставлениеУведомления.Очистить();
		Области = ПолучитьОписаниеОбластей();
		Макет = УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетТабличногоДокумента(ЭтотОбъект, "Форма_ДополнительныеВыпискиНДС");
		Для Каждого Обл Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Области[Число(Прав(ТекущееИДНаименования, 1))], ",") Цикл 
			ПредставлениеУведомления.Вывести(Макет.ПолучитьОбласть(Обл));
		КонецЦикла;
		СтрДанных = ДанныеУведомления[ТекущееИДНаименования];
		Для Каждого Обл Из ПредставлениеУведомления.Области Цикл 
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение Тогда 
				
				СтрДанных.Свойство(Обл.Имя, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, Область, Истина);
	Если ТекущееИДНаименования = "Лист2" Тогда 
		РасчетСтраницы2(ДанныеУведомления["Лист2"]);
		ВыводИтоговСтраница2();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьДанные() Экспорт
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Дата = ТекущаяДатаСеанса() 
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоСтраниц", РеквизитФормыВЗначение("ДеревоСтраниц"));
	СтруктураПараметров.Вставить("ДанныеУведомления", ДанныеУведомления);
	СтруктураПараметров.Вставить("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Документ.Записать();
	ЗначениеВДанныеФормы(Документ, Объект);
	Модифицированность = Ложь;
	Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, " (создание)", "");
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиУведомления(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(СсылкаНаДанные)
	СтруктураПараметров = СсылкаНаДанные.Ссылка.ДанныеУведомления.Получить();
	ДанныеУведомления = СтруктураПараметров.ДанныеУведомления;
	ЗначениеВРеквизитФормы(СтруктураПараметров.ДеревоСтраниц, "ДеревоСтраниц");
	СтруктураПараметров.Свойство("РазрешитьВыгружатьСОшибками", РазрешитьВыгружатьСОшибками);
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьДанные();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь,ВыполняемоеОповещение = Неопределено) Экспорт 
	
	СохранитьДанные();
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	Закрыть(Неопределено);
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru='Вы уверены, что уведомление уже сдано?'"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБРО(Команда)
	ПечатьБРОНаСервере();
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтотОбъект, "Открыть", Ложь, СтруктураРеквизитовУведомления.СписокПечатаемыхЛистов);
КонецПроцедуры

&НаСервере
Процедура ПечатьБРОНаСервере()
	УведомлениеОСпецрежимахНалогообложения.ПечатьУведомленияБРО(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Доступность = Ложь;
	РезультатВыполнения = ЗаполнитьАвтоНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершениеПослеЗаполнения", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется заполнение по данным информационной базы'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершениеПослеЗаполнения(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	Доступность = Истина;
	
	Если РезультатЗагрузки = Неопределено
		ИЛИ РезультатЗагрузки.Статус <> "Выполнено" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить автозаполнение...'"));
		Возврат;
	КонецЕсли;

	ЗагрузитьПодготовленныеДанные();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", Объект.Организация);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ВидУведомления", Объект.ВидУведомления);
	ПараметрыОтчета.Вставить("ДатаНачало", ДанныеУведомления.Титульная.ДатаНачало);
	
	Контейнер = Новый Структура();
	
	ЭтаФормаИмя = СтрЗаменить(ИмяФормы, "Отчет.", "");
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 7);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне_Уведомления",
		Новый Структура("ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер", ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер),
		ПараметрыВыполненияВФоне);
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
	АдресХранилища       = РезультатВыполнения.АдресРезультата;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	ПараметрыСтраницы = Неопределено;
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) = Тип("Структура")
		И СтруктураДанных.Свойство("Контейнер")
		И ТипЗнч(СтруктураДанных.Контейнер) = Тип("Структура") Тогда 
		Для Каждого КЗ Из ДанныеУведомления Цикл 
			Если СтруктураДанных.Контейнер.Свойство(КЗ.Ключ, ПараметрыСтраницы) Тогда 
				ЗаполнитьЗначенияСвойств(КЗ.Значение, ПараметрыСтраницы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеУведомления.Свойство("Лист2") Тогда 
		РасчетСтраницы2(ДанныеУведомления["Лист2"]);
	КонецЕсли;
	ПоказатьТекущуюСтраницу(ДеревоСтраниц.НайтиПоИдентификатору(Элементы.ДеревоСтраниц.ТекущаяСтрока).ИмяМакета);
	
	Модифицированность = Истина;
	Доступность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетСтраницы2(Данные)
	ОТЧ = Новый ОписаниеТипов("Число");
	Для Гр = 4 по 12 Цикл 
		ГрСтр = "КнигаПродаж" + Формат(Гр, "ЧЦ=2; ЧВН=");
		Тот = 0;
		Для Инд = 1 По 12 Цикл 
			Тот = Тот + ОТЧ.ПривестиЗначение(Данные[ГрСтр + Формат(Инд, "ЧЦ=2; ЧВН=")]);
		КонецЦикла;
		Данные[ГрСтр + "13"] = Тот;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыводИтоговСтраница2()
	Для Гр = 4 по 12 Цикл 
		ГрСтр = "КнигаПродаж" + Формат(Гр, "ЧЦ=2; ЧВН=") + "13";
		ПредставлениеУведомления.Области[ГрСтр].Значение = ДанныеУведомления["Лист2"][ГрСтр];
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НастройкаВидимостиБаннера(ПриСоздании = Ложь)
	ЭтаФормаИмя = СтрЗаменить(ИмяФормы, "Отчет.", "");
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 7);
	
	Если ПриСоздании Тогда 
		ПараметрыОтчета = Новый Структура("Организация, ДатаНачало, ПриСозданииФормы",
			Объект.Организация, ДанныеУведомления.Титульная.ДатаНачало, Истина);
		Показатели = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
			ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
		Элементы.БаннерИзмененияНастроекУчетаНДС.Заголовок = Показатели.ЗаголовокБаннера;
		Элементы.ГруппаНеобходимоИзменитьНастройкиУчета.ЦветФона = Показатели.ЦветФонаБаннераИзмененияНастроекУчетаНДС;
		Элементы.КотикБаннерИзмененияНастроекУчетаНДС.Картинка = Показатели.КотикБаннерИзмененияНастроекУчетаНДС;
		Элементы.ЗакрытьБаннерИзмененияНастроекУчетаНДС.Картинка = Показатели.ЗакрытьБаннерИзмененияНастроекУчетаНДС;
		Показатели.Свойство("НазваниеФормыНалогиИОтчеты", НазваниеФормыНалогиИОтчеты);
	Иначе
		ПараметрыОтчета = Новый Структура("Организация, ДатаНачало", Объект.Организация, ДанныеУведомления.Титульная.ДатаНачало);
		Показатели = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
			ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	КонецЕсли;
	
	ДатаОсвобожденияОтУплаты = Неопределено;
	Показатели.Свойство("ДатаОсвобожденияОтУплаты", ДатаОсвобожденияОтУплаты);
	Элементы.ГруппаНеобходимоИзменитьНастройкиУчета.Видимость = Не ЗначениеЗаполнено(ДатаОсвобожденияОтУплаты);
КонецПроцедуры

&НаКлиенте
Процедура ИзмененыНастройкиУчетаНДС(Результат, ДополнительныеПараметры) Экспорт
	НастройкаВидимостиБаннера();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияВыбор(Элемент, Область, СтандартнаяОбработка)
	Если Область.Имя = "ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ" Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораПодписантаЗавершение", ЭтотОбъект, Неопределено);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораФИО(ЭтотОбъект, СтандартнаяОбработка, "ПредставлениеУведомления",
																	"ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ОписаниеОповещения);
		Возврат;
	ИначеЕсли Область.Имя = "КодНО" Тогда 
		СтандартнаяОбработка = Ложь;
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораРегистрацииВИФНС(ЭтотОбъект, Область.Имя);
	Иначе
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПредставлениеУведомленияВыбор(ЭтотОбъект, Область, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Инфо = ДополнительныеПараметры.Инфо;
	
	Если Результат <> Неопределено Тогда 
		Объект.РегистрацияВИФНС = Результат;
		УстановитьДанныеПоРегистрацииВИФНС();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПодписантаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОткрытьФормуВыбораПодписантаЗавершение(ЭтотОбъект, Результат);
КонецПроцедуры

#Область ОтправкаВФНС
////////////////////////////////////////////////////////////////////////////////
// Отправка в ФНС
&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры
#КонецОбласти

&НаСервере
Функция ПроверитьВыгрузкуНаСервере()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	ТаблицаОшибок = ПроверитьВыгрузкуНаСервере();
	Если ТаблицаОшибок.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам", Новый Структура("ТаблицаОшибок", ТаблицаОшибок), ЭтотОбъект, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "УведомлениеОСпецрежимахНалогообложения_НавигацияПоОшибкам" Тогда 
		УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаОповещенияНавигацииПоОшибкам(ЭтотОбъект, Параметр, Источник);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура СформироватьXML(Команда)
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВыгружатьСОшибками(Команда)
	РазрешитьВыгружатьСОшибками = Не РазрешитьВыгружатьСОшибками;
	Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = РазрешитьВыгружатьСОшибками;
	Модифицированность = Истина;
КонецПроцедуры
