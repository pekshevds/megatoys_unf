
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("АдресСхемы") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ДанныеРасшифровки") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("Расшифровка") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Параметры.ДанныеРасшифровки);
	
	ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("АдресСхемы", Параметры.АдресСхемы);
	ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Вставить("Отбор", Параметры.Отбор);
	
	ПараметрыРасшифровки = Новый Структура;
	СоответствиеЗаголовка = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из ДанныеРасшифровки.Элементы.Получить(Параметры.Расшифровка).ПолучитьПоля() Цикл
		ПараметрыРасшифровки.Вставить(ТекЭлемент.Поле, ТекЭлемент.Значение);
	КонецЦикла;
	
	ЗаполнитьСоответствиеЗаголовка(СоответствиеЗаголовка);
	
	Отбор = ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Отбор;
	РезультатОбработкиРасшифровки(ПараметрыРасшифровки, Отбор);
	
	Заголовок = СтрШаблон(НСтр("ru = 'Расшифровка: %1'"), СоответствиеЗаголовка.Получить(ПараметрыРасшифровки.ТипСчета));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РезультатОбработкиРасшифровки(ПараметрыРасшифровки, Отбор)
	
	Макет = Отчеты.ПрибылиИУбытки.ПолучитьМакет("МакетРасшифровка");
	Макет.Параметры.Найти("ПериодНачало").Значение = Отбор.СтПериод.ДатаНачала;
	Макет.Параметры.Найти("ПериодКонец").Значение = Отбор.СтПериод.ДатаОкончания;
	Макет.Параметры.Найти("ТипСчета").Значение = ПараметрыРасшифровки.ТипСчета;
	Макет.Параметры.Найти("Организация").Значение = Отбор.Организация;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Макет, Макет.НастройкиПоУмолчанию, ДанныеРасшифровки);
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	АдресРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	АдресСхемы = ПоместитьВоВременноеХранилище(Макет, УникальныйИдентификатор);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеЗаголовка(СоответствиеЗаголовка)

	СоответствиеЗаголовка.Вставить(Перечисления.ТипыСчетов.Доходы, НСтр("ru = 'Выручка от продажи товаров, работ, услуг'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыСчетов.СебестоимостьПродаж, НСтр("ru = 'Себестоимость продажи товаров, работ, услуг'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыСчетов.Расходы, НСтр("ru = 'Косвенные расходы'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыСчетов.ПрочиеДоходы, НСтр("ru = 'Прочие доходы'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыСчетов.ПрочиеРасходы, НСтр("ru = 'Прочие расходы'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыСчетов.ПрибылиУбытки, НСтр("ru = 'Прибыль (убыток) до налогообложения'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыСчетов.НалогНаПрибыль, НСтр("ru = 'Налог на прибыль'"));

КонецПроцедуры

&НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	ОбработкаРасшифровки.ПоказатьВыборДействия(Новый ОписаниеОповещения("ПослеВыбораДействия", ЭтотОбъект), Расшифровка, , , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДействия(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(, ПараметрВыполненногоДействия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти