#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиВариантов["Основной"].Теги = НСтр("ru = 'Запасы,Склады,Закупки,Неликвид,Номенклатура'");
	ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиВариантов["Основной"].СвязанныеПоля, "Номенклатура", "Справочник.Номенклатура");
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские
//                                                                                 настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);

	ВспомогательныеПараметры = Новый Массив;
	
	ВспомогательныеПараметры.Добавить("СравниватьСПредыдущимПериодом");
	ВспомогательныеПараметры.Добавить("СравниватьСАналогичнымПериодомПрошлогоГода");
	
	НастройкиОтчета 	 	= КомпоновщикНастроек.Настройки;
	ПараметрыОтчета 	 	= ПодготовитьПараметрыОтчета(НастройкиОтчета);
	
	Периодичность		 	= XMLСтрока(ПараметрыОтчета.Периодичность);
    НачалоПериода		 	= ПараметрыОтчета.НачалоПериода;
	КонецПериода		 	= ПараметрыОтчета.КонецПериода;
	ИсключатьДни		 	= ПараметрыОтчета.ИсключатьДниОтсутствияТовара;
	
	ТаблицаОтчета		 	= ТаблицаДанныхОтчета(НачалоПериода, КонецПериода, Периодичность, ИсключатьДни);
    КлючПоиска			 	= "Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия";

	ТаблицаОтчета.Индексы.Добавить(КлючПоиска);
	
	Если ПараметрыОтчета.СравниватьСАналогичнымПериодомПрошлогоГода Тогда
		
		НачалоПериодаСравнение 	= ДобавитьМесяц(НачалоПериода, -12);
		КонецПериодаСравнение 	= ДобавитьМесяц(КонецПериода, -12);
		
		// Получим данные по аналогичному периоду прошлого года и загрузим их в таблицу отчета.
		ТаблицаОтчетаСравнение  = ТаблицаДанныхОтчета(
			НачалоПериодаСравнение, 
			КонецПериодаСравнение, 
			Периодичность, 
			ИсключатьДни);
			
		Для Каждого СтрОтчета Из ТаблицаОтчета Цикл
				
			ОтборДляПоиска = Новый Структура(КлючПоиска);
			ЗаполнитьЗначенияСвойств(ОтборДляПоиска, СтрОтчета);
			
			МассивСтрок = ТаблицаОтчетаСравнение.НайтиСтроки(ОтборДляПоиска);
			
			Если МассивСтрок.Количество() > 0 Тогда

				СтрОтчета.ОстатокЗаПрошлыйГод				= МассивСтрок[0].Остаток;
				СтрОтчета.РасходЗаПрошлыйГод				= МассивСтрок[0].Расход;
				СтрОтчета.СреднийОбъемЗаПрошлыйГод 			= МассивСтрок[0].СреднийОбъем;
				СтрОтчета.КоличествоДнейПериодаЗаПрошлыйГод	= МассивСтрок[0].КоличествоДнейПериода;
				
			КонецЕсли;																  
			
		КонецЦикла;	
		
		АналогичныйПериодПрошлогоГода 				= Новый СтандартныйПериод;
		АналогичныйПериодПрошлогоГода.Вариант 		= ВариантСтандартногоПериода.ПроизвольныйПериод;
		АналогичныйПериодПрошлогоГода.ДатаНачала 	= НачалоПериодаСравнение;
		АналогичныйПериодПрошлогоГода.ДатаОкончания = КонецПериодаСравнение;
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиОтчета, 
			"АналогичныйПериодПрошлогоГода", 
			АналогичныйПериодПрошлогоГода);

	Иначе
		ВспомогательныеПараметры.Добавить("АналогичныйПериодПрошлогоГода");
	КонецЕсли;
	
	Если ПараметрыОтчета.СравниватьСПредыдущимПериодом Тогда
		
		ПредыдущийПериод = ПредыдущийПериод(НачалоПериода, КонецПериода);
		
		ТаблицаОтчетаСравнение  = ТаблицаДанныхОтчета(
			ПредыдущийПериод.ДатаНачала, 
			ПредыдущийПериод.ДатаОкончания, 
			Периодичность, 
			ИсключатьДни);
			
		Для Каждого СтрОтчета Из ТаблицаОтчета Цикл
				
			ОтборДляПоиска = Новый Структура(КлючПоиска);
			ЗаполнитьЗначенияСвойств(ОтборДляПоиска, СтрОтчета);
			
			МассивСтрок = ТаблицаОтчетаСравнение.НайтиСтроки(ОтборДляПоиска);
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				СтрОтчета.ОстатокПредыдущийПериод				= МассивСтрок[0].Остаток;
				СтрОтчета.РасходПредыдущийПериод				= МассивСтрок[0].Расход;
				СтрОтчета.СреднийОбъемПредыдущийПериод 			= МассивСтрок[0].СреднийОбъем;
				СтрОтчета.КоличествоДнейПериодаПредыдущийПериод	= МассивСтрок[0].КоличествоДнейПериода;
				
			КонецЕсли;																  
			
		КонецЦикла;	
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ПредыдущийПериод", ПредыдущийПериод);
		
	Иначе
		ВспомогательныеПараметры.Добавить("ПредыдущийПериод");
	КонецЕсли;
	
	СтруктураПараметры 	= Новый Структура("ТаблицаОтчета", ТаблицаОтчета);
	
	// настройка динамических полей
	Поля 	= Новый СписокЗначений;
	
	Поля.Добавить("СреднийСрокХраненияЗаПрошлыйГод", , ПараметрыОтчета.СравниватьСАналогичнымПериодомПрошлогоГода);
	Поля.Добавить("ДинамикаЗаПрошлыйГод", , ПараметрыОтчета.СравниватьСАналогичнымПериодомПрошлогоГода);

	Поля.Добавить("СреднийСрокХраненияПредыдущийПериод", , ПараметрыОтчета.СравниватьСПредыдущимПериодом);
	Поля.Добавить("ДинамикаПредыдущийПериод", , ПараметрыОтчета.СравниватьСПредыдущимПериодом);
	
	Для Каждого Поле Из Поля Цикл
		УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, Поле.Значение, Поле.Пометка);
	КонецЦикла;	
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(
		"ВнешниеНаборыДанных",
		ПоместитьВоВременноеХранилище(СтруктураПараметры));
	
	ОтчетыУНФ.ПриКомпоновкеРезультата(
		КомпоновщикНастроек,
		СхемаКомпоновкиДанных,
		ДокументРезультат,
		ДанныеРасшифровки,
		СтандартнаяОбработка);

	СкрытьВспомогательныеПараметрыОтчета(
		СхемаКомпоновкиДанных, 
		КомпоновщикНастроек, 
		ДокументРезультат, 
		ВспомогательныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьПараметрыОтчета(НастройкиОтчета)
	
	ПараметрПериод 								= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "СтПериод");
	НачалоПериода 								= ПараметрПериод.Значение.ДатаНачала;
	КонецПериода  								= ПараметрПериод.Значение.ДатаОкончания;
	
	ПараметрПериодичность 						= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Периодичность");
	Периодичность 								= ПараметрПериодичность.Значение;
	
	ПараметрВыводитьЗаголовок 					= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек, 
		"ВыводитьЗаголовок");
		
	ВыводитьЗаголовок 							= ПараметрВыводитьЗаголовок.Использование И ПараметрВыводитьЗаголовок.Значение;
	
	Заголовок 									= НСтр("ru = 'Оборачиваемость запасов'");

	ПараметрВывода 								= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек, 
		"ИсключатьДниОтсутствияТовара");
		
	ИсключатьДниОтсутствияТовара 				= ПараметрВывода.Использование И ПараметрВывода.Значение;

	ПараметрВывода 								= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек, 
		"СравниватьСПредыдущимПериодом");
		
	СравниватьСПредыдущимПериодом 				= ПараметрВывода.Использование И ПараметрВывода.Значение;
	
	ПараметрВывода 								= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек, 
		"СравниватьСАналогичнымПериодомПрошлогоГода");
		
	СравниватьСАналогичнымПериодомПрошлогоГода 	= ПараметрВывода.Использование И ПараметрВывода.Значение;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода", 								НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода", 								КонецПериода);
	ПараметрыОтчета.Вставить("Периодичность", 								Периодичность);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок", 							ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("Заголовок", 									Заголовок);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета", 						"ОборачиваемостьЗапасов");
	ПараметрыОтчета.Вставить("НастройкиОтчета", 							НастройкиОтчета);
	ПараметрыОтчета.Вставить("ИсключатьДниОтсутствияТовара", 				ИсключатьДниОтсутствияТовара);
	ПараметрыОтчета.Вставить("СравниватьСПредыдущимПериодом", 				СравниватьСПредыдущимПериодом);
	ПараметрыОтчета.Вставить("СравниватьСАналогичнымПериодомПрошлогоГода", 	СравниватьСАналогичнымПериодомПрошлогоГода);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ТаблицаДанныхОтчета(НачалоПериода, КонецПериода, Периодичность, ИсключатьДниОтсутствияТовара)

	// Получим таблицу с объемами
	СКД = ПолучитьМакет("СхемаСреднийОбъем");
	СКД.НаборыДанных.НаборДанныхСреднийОбъем.Запрос = СтрЗаменить(
		СКД.НаборыДанных.НаборДанныхСреднийОбъем.Запрос, 
		"МЕСЯЦ", 
		Периодичность);
		
	КомпоновщикНастроекДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроекДанных.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	СкопироватьЭлементыОтбора(СКД, КомпоновщикНастроекДанных.Настройки.Отбор, КомпоновщикНастроек.Настройки.Отбор);

	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекДанных, "НачалоПериода", НачалоПериода);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекДанных, "КонецПериода", 	КонецПериода);
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 		= КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроекДанных.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), , );
	ПроцессорКомпоновки 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);	
	Таблица 				= Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Таблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Если Таблица.Колонки.Найти("Характеристика") = Неопределено Тогда
		Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("СчетУчета") = Неопределено Тогда
		Таблица.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий"));
	КонецЕсли;
	
	Если Таблица.Колонки.Найти("Партия") = Неопределено Тогда
		Таблица.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	КонецЕсли;
	
	// Рассчитаем средний объем	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстаткиИОбороты.Организация КАК Организация,
	|	ЗапасыОстаткиИОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстаткиИОбороты.СчетУчета КАК СчетУчета,
	|	ЗапасыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗапасыОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗапасыОстаткиИОбороты.Партия КАК Партия,
	|	НАЧАЛОПЕРИОДА(ЗапасыОстаткиИОбороты.Период, НЕДЕЛЯ) КАК Период,
	|	ЗапасыОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход,
	|	ЗапасыОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	|	ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
	|ПОМЕСТИТЬ ТаблицаСреднийОбъем
	|ИЗ
	|	&ТаблицаСреднийОбъем КАК ЗапасыОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстаткиИОбороты.Организация КАК Организация,
	|	ЗапасыОстаткиИОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстаткиИОбороты.СчетУчета КАК СчетУчета,
	|	ЗапасыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗапасыОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗапасыОстаткиИОбороты.Партия КАК Партия,
	|	ЗапасыОстаткиИОбороты.Период КАК Период,
	|	ЗапасыОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	|	ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	|	ЗапасыОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход
	|ИЗ
	|	ТаблицаСреднийОбъем КАК ЗапасыОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	СтруктурнаяЕдиница,
	|	СчетУчета,
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	Период
	|ИТОГИ
	|	СУММА(КоличествоНачальныйОстаток),
	|	СУММА(КоличествоКонечныйОстаток),
	|	СУММА(КоличествоРасход)
	|ПО
	|	Организация,
	|	СтруктурнаяЕдиница,
	|	СчетУчета,
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	Период ПЕРИОДАМИ(НЕДЕЛЯ, &НачалоПериода, &КонецПериода)");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕДЕЛЯ", 	XMLСтрока(Периодичность));
	Запрос.УстановитьПараметр("НачалоПериода", 			НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 			КонецПериода);
	Запрос.УстановитьПараметр("ТаблицаСреднийОбъем", 	Таблица);
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет();
	РезультатЗапроса 		= МассивРезультатов[1];
	
	ТаблицаРезультат 		= РезультатЗапроса.Выгрузить();
	
	ТаблицаИсточник    	  	= ПолучитьТаблицуИсточник(ТаблицаРезультат);
	КоличествоДнейПериода 	= (КонецПериода + 1 - НачалоПериода)/(60*60*24);
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаСтруктурнаяЕдиница = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтруктурнаяЕдиница");
		Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
			ВыборкаСчетУчета = ВыборкаСтруктурнаяЕдиница.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетУчета");
			Пока ВыборкаСчетУчета.Следующий() Цикл
				ВыборкаНоменклатура = ВыборкаСчетУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
				Пока ВыборкаНоменклатура.Следующий() Цикл
					ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
					Пока ВыборкаХарактеристика.Следующий() Цикл
						ВыборкаПартия = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партия");
						Пока ВыборкаПартия.Следующий() Цикл
							
							Счетчик 					= 0;
							ПерваяСтрока				= Истина;
							Сумма 						= 0;
							КоличествоРасход 			= 0;
							КоличествоНачальныйОстаток 	= 0;
							КоличествоКонечныйОстаток 	= 0;
							
							НоваяСтрока = ТаблицаИсточник.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПартия);
							
							ВыборкаПериод = ВыборкаПартия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
							Пока ВыборкаПериод.Следующий() Цикл
								
								Если ВыборкаПериод.КоличествоНачальныйОстаток <> NULL Тогда  
									
									КоличествоНачальныйОстаток = ВыборкаПериод.КоличествоНачальныйОстаток;
									КоличествоКонечныйОстаток  = ВыборкаПериод.КоличествоКонечныйОстаток;    
									КоличествоРасход		   = ВыборкаПериод.КоличествоРасход;
									
								КонецЕсли; 
								
								Сумма		 = Сумма + ?(ПерваяСтрока, КоличествоНачальныйОстаток, 0) + КоличествоКонечныйОстаток;
								ПерваяСтрока = Ложь;
								
								Если Не ИсключатьДниОтсутствияТовара 
									ИЛИ КоличествоКонечныйОстаток <> 0 
									ИЛИ КоличествоНачальныйОстаток <> 0 
									ИЛИ КоличествоРасход <> 0 Тогда

									Счетчик = Счетчик + 1;
									
								КонецЕсли;
								
							КонецЦикла;
							
							Если Счетчик = 0 Тогда
								НоваяСтрока.СреднийОбъем = 0;
							Иначе
							    НоваяСтрока.СреднийОбъем = Сумма / (Счетчик + 1);
							КонецЕсли;
							
							НоваяСтрока.КоличествоДнейПериода = КоличествоДнейПериода;
							НоваяСтрока.Остаток 			  = КоличествоКонечныйОстаток;
							НоваяСтрока.Расход 				  = ВыборкаПартия.КоличествоРасход;
							
						КонецЦикла;
					КонецЦикла;	
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла; 

	Возврат ТаблицаИсточник; 	
	
КонецФункции

Функция ПолучитьТаблицуИсточник(ТаблицаРезультат)        

	ТаблицаИсточник  = ТаблицаРезультат.СкопироватьКолонки();
	НовыеКолонки	 = Новый Структура("СреднийОбъем, Расход, Остаток, 
		|СреднийОбъемЗаПрошлыйГод, РасходЗаПрошлыйГод, ОстатокЗаПрошлыйГод,
		|СреднийОбъемПредыдущийПериод, РасходПредыдущийПериод, ОстатокПредыдущийПериод");

	Для Каждого НоваяКолонка Из НовыеКолонки Цикл
		ТаблицаИсточник.Колонки.Добавить(НоваяКолонка.Ключ, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	КонецЦикла;

	НовыеКолонки	 = Новый Структура("КоличествоДнейПериода,
		|КоличествоДнейПериодаЗаПрошлыйГод,
		|КоличествоДнейПериодаПредыдущийПериод");
	
	Для Каждого НоваяКолонка Из НовыеКолонки Цикл
		ТаблицаИсточник.Колонки.Добавить(НоваяКолонка.Ключ, ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	КонецЦикла;

	Возврат ТаблицаИсточник;
	
КонецФункции

Функция ПредыдущийПериод(Знач ДатаНачала, Знач ДатаКонца)

	ПредыдущийПериод 		 = Новый СтандартныйПериод;
	ПредыдущийПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
	Если НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала) И КонецДня(ДатаКонца) = КонецМесяца(ДатаКонца) Тогда
		// Случай, когда период установлен кратным месяцу. Посчитаем количество лет и месяцев.
		КоличествоЛет 	  = Год(ДатаКонца) - Год(ДатаНачала);
		КоличествоМесяцев = Месяц(ДатаКонца) - Месяц(ДатаНачала) + 1;
		
		ВычестьМесяцев = -(КоличествоМесяцев + КоличествоЛет * 12);
		
		ПредыдущийПериод.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ДатаНачала, ВычестьМесяцев));
		ПредыдущийПериод.ДатаОкончания  = КонецМесяца(ДобавитьМесяц(ДатаКонца,   ВычестьМесяцев));
	Иначе
		// Общий случай, когда период установлен кратным одному дню.
		РазностьДатСекунд = ДатаКонца - ДатаНачала;
		ПредыдущийПериод.ДатаНачала = ДатаНачала - РазностьДатСекунд - 1;
		ПредыдущийПериод.ДатаОкончания  = ДатаКонца  - РазностьДатСекунд - 1;
	КонецЕсли;	
	
	Возврат ПредыдущийПериод;
КонецФункции

// Копирует элементы из одной коллекции в другую
Процедура СкопироватьЭлементыОтбора(СКД, ПриемникЗначения, ИсточникЗначения) 
	
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	ПриемникЭлементов.Очистить();
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		ВыбранныеПоля = СКД.НастройкиПоУмолчанию.Выбор.Элементы;
		Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
			Если ЭлементИсточник.ЛевоеЗначение = ВыбранноеПоле.Поле Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
				ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает/снимает признак использования у выбранного поля СКД.
//
// Параметры:
//  ЭлементыВыбора  - КоллекцияВыбранныхПолейКомпоновкиДанных - Выбранные поля.
//  ИмяПоля  		- Строка - Имя анализируемого поля.
//  Использование   - Булево - Устанавливаемый признак использования.
//
Процедура УстановитьСнятьИспользованиеУВыбранногоПоля(ЭлементыВыбора, ИмяПоля = "Характеристика", Использование = Истина)
	Для Каждого ЭлементВыбора Из ЭлементыВыбора Цикл
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Если ТипЗнч(ЭлементВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			
			Если ЭлементВыбора.Поле = ПолеКомпоновки Тогда
				ЭлементВыбора.Использование = Использование;
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ЭлементВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			
			УстановитьСнятьИспользованиеУВыбранногоПоля(ЭлементВыбора.Элементы, ИмяПоля, Использование);
			
		Иначе
			Продолжить;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

// Процедура удаляет строки с вспомогательными параметрами из секции параметров отчета.
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки.
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//		ТабличныйДокумент - ТабличныйДокумент - результат вывода отчета.
//		ПараметрыОтчета - Массив из Строка - имена параметров отчета.
//
Процедура СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ТабличныйДокумент, ПараметрыОтчета)
	СкрываемыеПараметрыОтчета = Новый Массив;
	Для Каждого ПараметрОтчета Из ПараметрыОтчета Цикл
		ДобавитьПредставленияПараметраВМассив(СхемаКомпоновкиДанных,
			КомпоновщикНастроек,
			СкрываемыеПараметрыОтчета,
			ПараметрОтчета);
	КонецЦикла;
	
	Для Каждого СкрываемыйПараметрОтчета Из СкрываемыеПараметрыОтчета Цикл 
		ВосстановитьЗаголовокПараметров = Ложь;
		
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СкрываемыйПараметрОтчета);
		Если НайденнаяОбласть <> Неопределено 
			И НайденнаяОбласть.РежимИзмененияРазмераКолонки = РежимИзмененияРазмера.Обычный Тогда
			УдаляемаяОбласть = ТабличныйДокумент.Область(НайденнаяОбласть.Верх,, НайденнаяОбласть.Низ);
			
			Если СтрНайти(ТабличныйДокумент.Область(НайденнаяОбласть.Верх, НайденнаяОбласть.Лево - 1).Текст, 
					НСтр("ru= 'Параметры:'")) > 0 Тогда
				ВосстановитьЗаголовокПараметров = Истина;
				Строка = НайденнаяОбласть.Верх;
				Колонка = НайденнаяОбласть.Лево - 1;
			КонецЕсли;
			
			ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			Если ВосстановитьЗаголовокПараметров
				И ПустаяСтрока(ТабличныйДокумент.Область(Строка, Колонка + 1, Строка, Колонка + 1).Текст) Тогда
				ВосстановитьЗаголовокПараметров = Ложь;
			КонецЕсли;
			
			Если ВосстановитьЗаголовокПараметров Тогда
				ТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Текст = НСтр("ru= 'Параметры:'");
			КонецЕсли;
			
			Если ТабличныйДокумент.ФиксацияСверху <> 0 Тогда
				ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ФиксацияСверху - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура осуществляет поиск представлений параметров по их имени
// и помещает найденные представления в переданный массив.
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема отчета
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		Параметры - Массив - скрываемые из табличного документа отчета параметры
//		ИмяПараметра - Строка - имя скрываемого параметра отчета.
//
Процедура ДобавитьПредставленияПараметраВМассив(СхемаКомпоновкиДанных, КомпоновщикНастроек, Параметры, ИмяПараметра)
	Параметр = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
	Если Не Параметр = Неопределено Тогда
		ЗаголовокПараметра = Параметр.Заголовок;
		
		ПараметрКомпоновки = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ИмяПараметра);
		Если ЗначениеЗаполнено(ПараметрКомпоновки.ИдентификаторПользовательскойНастройки) Тогда
			ИдентификаторНастройки = ПараметрКомпоновки.ИдентификаторПользовательскойНастройки;
			Если НЕ КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки) = Неопределено Тогда
				ПользовательскоеПредставлениеПараметра = "";
			Иначе
				ПользовательскоеПредставлениеПараметра = ПараметрКомпоновки.ПредставлениеПользовательскойНастройки;
			КонецЕсли;
		Иначе
			ПользовательскоеПредставлениеПараметра = ПараметрКомпоновки.ПредставлениеПользовательскойНастройки;
		КонецЕсли;
		
		Параметры.Добавить(ЗаголовокПараметра);
		Параметры.Добавить(ПользовательскоеПредставлениеПараметра);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли