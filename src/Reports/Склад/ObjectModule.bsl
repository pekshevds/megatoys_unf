#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Задать настройки формы отчета.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Форма отчета
//  КлючВарианта - Строка						 - Ключ загружаемого варианта
//  Настройки	 - Структура					 - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// Процедура - Обработчик заполнения настроек отчета и варианта
//
// Параметры:
//  НастройкиОтчета		 - Структура - Настройки отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиОтчета 
//  НастройкиВариантов	 - Структура - Настройки варианта отчета, подробнее см. процедуру ОтчетыУНФ.ИнициализироватьНастройкиВарианта
//
Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	УстановитьТегиВариантов(НастройкиВариантов);
	ДобавитьОписанияСвязанныхПолей(НастройкиВариантов);
	
КонецПроцедуры

#КонецОбласти

// Обработчик контекстного открытия отчета
//
// Параметры:
//  Объект		 - Произвольный	 - Источник контекстного открытия отчета
//  ПолеСвязи	 - Строка		 - Поле из настроек связи контекстного открытия
//  Отборы		 - Структура	 - Изменяемая структура отборов отчета
//  Отказ		 - Булево		 - Признак отмены открытия отчета
//
Процедура ПриКонтекстномОткрытии(Объект, ПолеСвязи, Отборы, Отказ) Экспорт
	
	Если ПолеСвязи = "ЗаказПокупателя" ИЛИ ПолеСвязи = "РасходнаяНакладная" Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект);
		
		Если ПолеСвязи = "ЗаказПокупателя" Тогда
			
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "СтруктурнаяЕдиницаРезерв", Истина);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
			|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика
			|ИЗ
			|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
			|ГДЕ
			|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказПокупателяЗапасы.Номенклатура,
			|	ЗаказПокупателяЗапасы.Характеристика
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказПокупателяМатериалы.Номенклатура,
			|	ЗаказПокупателяМатериалы.Характеристика
			|ИЗ
			|	Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателяМатериалы
			|ГДЕ
			|	ЗаказПокупателяМатериалы.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказПокупателяМатериалы.Номенклатура,
			|	ЗаказПокупателяМатериалы.Характеристика";
			
		ИначеЕсли ПолеСвязи = "РасходнаяНакладная" Тогда
			
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "СтруктурнаяЕдиница", Истина);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
			|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика
			|ИЗ
			|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
			|ГДЕ
			|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РасходнаяНакладнаяЗапасы.Номенклатура,
			|	РасходнаяНакладнаяЗапасы.Характеристика";
			
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		НоменклатураДокумента = Новый СписокЗначений;
		ТаблицаНоменклатура = Результат.Скопировать();
		ТаблицаНоменклатура.Свернуть("Номенклатура");
		НоменклатураДокумента.ЗагрузитьЗначения(ТаблицаНоменклатура.ВыгрузитьКолонку("Номенклатура"));
		Отборы.Вставить("Номенклатура", НоменклатураДокумента);
		
		ХарактеристикиДокумента = Новый СписокЗначений;
		ТаблицаХарактеристики = Результат.Скопировать();
		ТаблицаХарактеристики.Свернуть("Характеристика");
		ХарактеристикиДокумента.ЗагрузитьЗначения(ТаблицаХарактеристики.ВыгрузитьКолонку("Характеристика"));
		Отборы.Вставить("Характеристика", ХарактеристикиДокумента);
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "ПоложениеСклада, Организация", Истина);
		Если РеквизитыОбъекта.ПоложениеСклада <> Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти 
			И ЗначениеЗаполнено(Склад) Тогда
			Отборы.Вставить("СтруктурнаяЕдиница", Склад);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") 
			И НЕ Константы.УчетПоКомпании.Получить()
			И ЗначениеЗаполнено(РеквизитыОбъекта.Организация) Тогда
			Отборы.Вставить("Организация", РеквизитыОбъекта.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетыУНФ.ФормаОтчетаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеВариантаНаСервере
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма отчета
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных	 - Загружаемые настройки КД
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПреобразоватьСтарыеНастройки(Форма, НовыеНастройкиКД);	
	ОтчетыУНФ.ОбновитьВидимостьОтбораОрганизация(Форма.Отчет.КомпоновщикНастроек);	
	ОтчетыУНФ.ФормаОтчетаПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД);
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеПользовательскихНастроекНаСервере
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения				 - Форма отчета
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Загружаемые пользовательские
//                                                                                 настройки КД
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ОтчетыУНФ.ПеренестиПараметрыЗаголовкаВНастройки(КомпоновщикНастроек.Настройки, НовыеПользовательскиеНастройкиКД);	
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ОтчетыУНФ.ОбъединитьСПользовательскимиНастройками(КомпоновщикНастроек);
	ОтчетыУНФ.ПриКомпоновкеРезультата(КомпоновщикНастроек, СхемаКомпоновкиДанных, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьТегиВариантов(НастройкиВариантов)
	
	НастройкиВариантов["Ведомость"].Теги = НСтр("ru = 'Запасы,Закупки,Номенклатура,Склады,Товары,Ячейка,Ордер'");
	НастройкиВариантов["Остатки"].Теги = НСтр("ru = 'Запасы,Закупки,Номенклатура,Склады,Товары,Ячейка,Ордер'");
	НастройкиВариантов["ОстаткиПоЯчейкам"].Теги = НСтр("ru = 'Запасы,Номенклатура,Склады,Товары,Ячейка'");
	
КонецПроцедуры

Процедура ДобавитьОписанияСвязанныхПолей(НастройкиВариантов)
	
	Для Каждого НастройкиТекВарианта Из НастройкиВариантов Цикл
		Если НастройкиТекВарианта.Ключ = "ОстаткиПоЯчейкам" Тогда
			Продолжить;
		КонецЕсли;
		ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиТекВарианта.Значение.СвязанныеПоля, "СтруктурнаяЕдиница", 
			"Справочник.СтруктурныеЕдиницы");
		ОтчетыУНФ.ДобавитьОписаниеПривязки(НастройкиТекВарианта.Значение.СвязанныеПоля, "Номенклатура", 
			"Справочник.Номенклатура",,, Истина);
	КонецЦикла;
	
	СтруктураВарианта = НастройкиВариантов["ОстаткиПоЯчейкам"];
	ОтчетыУНФ.ДобавитьОписаниеПривязки(СтруктураВарианта.СвязанныеПоля, "Номенклатура", 
		"Справочник.Номенклатура");
	ОтчетыУНФ.ДобавитьОписаниеПривязки(СтруктураВарианта.СвязанныеПоля, "ЗаказПокупателя", 
		"Документ.ЗаказПокупателя",, Истина);
	ОтчетыУНФ.ДобавитьОписаниеПривязки(СтруктураВарианта.СвязанныеПоля, "РасходнаяНакладная", 
		"Документ.РасходнаяНакладная",, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли