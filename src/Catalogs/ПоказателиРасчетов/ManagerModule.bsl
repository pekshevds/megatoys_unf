#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов.
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов
// 
// Параметры:
//   КодыЯзыков - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.КодыЯзыков
//   Элементы   - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.Элементы
//   ТабличныеЧасти - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.ТабличныеЧасти
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	// Сумма продаж по ответственному (СПО)
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("СуммуПродажПоОтветственному") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "СуммуПродажПоОтветственному";
		Элемент.Наименование = НСтр("ru='Сумму продаж по ответственному'");
		Элемент.ПроизвольныйЗапрос = Истина;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Запрос;
		Элемент.Используется = Истина;
		
		ПараметрыЗапроса = ТабличныеЧасти.ПараметрыЗапроса.СКопировать();
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ВалютаУчетаКурс";
		ЭлементТЧ.Представление = НСтр("ru='ВалютаУчетаКурс'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ВалютаДокументаКратность";
		ЭлементТЧ.Представление = НСтр("ru='ВалютаДокументаКратность'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ВалютаДокументаКурс";
		ЭлементТЧ.Представление = НСтр("ru='ВалютаДокументаКурс'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ВалютаУчетаКратность";
		ЭлементТЧ.Представление = НСтр("ru='ВалютаУчетаКратность'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "НачалоПериода";
		ЭлементТЧ.Представление = НСтр("ru='НачалоПериода'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "КонецПериода";
		ЭлементТЧ.Представление = НСтр("ru='КонецПериода'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "Организация";
		ЭлементТЧ.Представление = НСтр("ru='Организация'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "Подразделение";
		ЭлементТЧ.Представление = НСтр("ru='Подразделение'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "Сотрудник";
		ЭлементТЧ.Представление = НСтр("ru='Сотрудник'");
		
		Элемент.ПараметрыЗапроса = ПараметрыЗапроса;
		Элемент.Запрос = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(Продажи.Сумма * &ВалютаУчетаКурс * &ВалютаДокументаКратность / (&ВалютаДокументаКурс * &ВалютаУчетаКратность), 0)) КАК СуммаПродаж
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Сумма >= 0
		|	И Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Продажи.Организация = &Организация
		|	И Продажи.Подразделение = &Подразделение
		|	И Продажи.Ответственный = &Сотрудник
		|	И (ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.АктВыполненныхРабот) ССЫЛКА Документ.АктВыполненныхРабот
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОПереработке) ССЫЛКА Документ.ОтчетОПереработке
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОРозничныхПродажах) ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РасходнаяНакладная) ССЫЛКА Документ.РасходнаяНакладная
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЧекККМ) ССЫЛКА Документ.ЧекККМ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Продажи.Ответственный";
	КонецЕсли;
	
	
	// Фиксированная сумма
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ФиксированнаяСумма") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "ФиксированнаяСумма";
		Элемент.Наименование = НСтр("ru='Фиксированная сумма'");
		Элемент.ПроизвольныйЗапрос = Ложь;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Ручной;
		Элемент.Используется = Истина;
	КонецЕсли;
	
	
	// Норма дней
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаДней") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "НормаДней";
		Элемент.Наименование = НСтр("ru='Норма дней (производственный календарь)'");
		Элемент.ПроизвольныйЗапрос = Истина;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Запрос;
		Элемент.Используется = Истина;
		
		ПараметрыЗапроса = ТабличныеЧасти.ПараметрыЗапроса.СКопировать();
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "Организация";
		ЭлементТЧ.Представление = НСтр("ru='Организация'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ПериодРегистрации";
		ЭлементТЧ.Представление = НСтр("ru='Период регистрации'");
		
		Элемент.ПараметрыЗапроса = ПараметрыЗапроса;
		Элемент.Запрос =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК НормаДней
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
	КонецЕсли;
	
	
	// Норма часов
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаЧасов") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "НормаЧасов";
		Элемент.Наименование = НСтр("ru='Норма часов (производственный календарь)'");
		Элемент.ПроизвольныйЗапрос = Истина;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Запрос;
		Элемент.Используется = Истина;
		
		ПараметрыЗапроса = ТабличныеЧасти.ПараметрыЗапроса.Скопировать();
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "Организация";
		ЭлементТЧ.Представление = НСтр("ru='Организация'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ПериодРегистрации";
		ЭлементТЧ.Представление = НСтр("ru='Период регистрации'");
		
		Элемент.ПараметрыЗапроса = ПараметрыЗапроса;
		Элемент.Запрос =
		"ВЫБРАТЬ
		|	СУММА(8) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
	КонецЕсли;
	
	
	// Норма дней по графику
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаДнейГрафикСотрудника") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "НормаДнейГрафикСотрудника";
		Элемент.Наименование = НСтр("ru='Норма дней (график работы сотрудника)'");
		Элемент.ПроизвольныйЗапрос = Истина;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Запрос;
		Элемент.Используется = Истина;
		
		ПараметрыЗапроса = ТабличныеЧасти.ПараметрыЗапроса.Скопировать();
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ПериодРегистрации";
		ЭлементТЧ.Представление = НСтр("ru='Период регистрации'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ГрафикРаботы";
		ЭлементТЧ.Представление = НСтр("ru='График работы'");
		
		Элемент.ПараметрыЗапроса = ПараметрыЗапроса;
		Элемент.Запрос =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДЕНЬ(ГрафикиРаботы.ВремяНачала)) КАК НормаДней
		|ИЗ
		|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|	И ГрафикиРаботы.ВремяНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ГрафикиРаботы.Год = ГОД(&ПериодРегистрации)";
	КонецЕсли;
	
	
	// Норма часов по графику
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаЧасовГрафикСотрудника") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "НормаЧасовГрафикСотрудника";
		Элемент.Наименование = НСтр("ru='Норма часов (график работы сотрудника)'");
		Элемент.ПроизвольныйЗапрос = Истина;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Запрос;
		Элемент.Используется = Истина;
		
		ПараметрыЗапроса = ТабличныеЧасти.ПараметрыЗапроса.Скопировать();
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ПериодРегистрации";
		ЭлементТЧ.Представление = НСтр("ru='Период регистрации'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "ГрафикРаботы";
		ЭлементТЧ.Представление = НСтр("ru='График работы'");
		
		Элемент.ПараметрыЗапроса = ПараметрыЗапроса;
		Элемент.Запрос =
		"ВЫБРАТЬ
		|	СУММА(ГрафикиРаботы.ЧасыРаботы) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|	И ГрафикиРаботы.ВремяНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ГрафикиРаботы.Год = ГОД(&ПериодРегистрации)";
	КонецЕсли;
	
	
	// Отработано дней
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ОтработаноДней") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "ОтработаноДней";
		Элемент.Наименование = НСтр("ru='Отработано дней'");
		Элемент.ПроизвольныйЗапрос = Ложь;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Ручной;
		Элемент.Используется = Истина;
	КонецЕсли;
	
	
	// Отработано часов
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ОтработаноЧасов") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "ОтработаноЧасов";
		Элемент.Наименование = НСтр("ru='Отработано часов'");
		Элемент.ПроизвольныйЗапрос = Ложь;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Ручной;
		Элемент.Используется = Истина;
	КонецЕсли;
	
	
	// Тарифная ставка
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ТарифнаяСтавка") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "ТарифнаяСтавка";
		Элемент.Наименование = НСтр("ru='Тарифная ставка'");
		Элемент.ПроизвольныйЗапрос = Ложь;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Ручной;
		Элемент.Используется = Истина;
	КонецЕсли;
	
	
	// Отработано по заданиям
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("ОтработаноЧасовПоЗаданиям") Тогда
		Элемент = Элементы.Добавить();
		Элемент.Идентификатор = "ОтработаноЧасовПоЗаданиям";
		Элемент.Наименование = НСтр("ru='Отработано часов по заданиям'");
		Элемент.ПроизвольныйЗапрос = Истина;
		Элемент.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Запрос;
		Элемент.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаРаботу");
		
		
		ПараметрыЗапроса = ТабличныеЧасти.ПараметрыЗапроса.Скопировать();
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "НачалоПериода";
		ЭлементТЧ.Представление = НСтр("ru='Начало периода'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "КонецПериода";
		ЭлементТЧ.Представление = НСтр("ru='Конец периода'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "Сотрудник";
		ЭлементТЧ.Представление = НСтр("ru='Сотрудник'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "Организация";
		ЭлементТЧ.Представление = НСтр("ru='Организация'");
		
		ЭлементТЧ = ПараметрыЗапроса.Добавить();
		ЭлементТЧ.Имя = "Подразделение";
		ЭлементТЧ.Представление = НСтр("ru='Подразделение'");
		
		Элемент.ПараметрыЗапроса = ПараметрыЗапроса;
		Элемент.Запрос =
		"ВЫБРАТЬ
		|	Источник.ЗагрузкаФактОборот
		|ИЗ
		|	РегистрНакопления.ЗаданияНаРаботу.Обороты(&НачалоПериода, &КонецПериода, Авто, ) КАК Источник
		|ГДЕ
		|	Источник.Сотрудник = &Сотрудник
		|	И Источник.СтруктурнаяЕдиница = &Подразделение
		|	И Источник.Организация = &Организация";
	КонецЕсли;
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлемента
//
// Параметры:
//  Объект                  - СправочникОбъект.ВидыКонтактнойИнформации - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения объекта.
//  ДополнительныеПараметры - Структура:
//   * ПредопределенныеДанные - ТаблицаЗначений - данные заполненные в процедуре ПриНачальномЗаполненииЭлементов.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	Объект.УстановитьНовыйКод();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Функция - Шаблон процедуры подключаемого показателя расчета
//
// Параметры:
//  ИдентификаторПоказателяРасчета	 - Строка - идентификатор показателя
// 
// Возвращаемое значение:
//  Строка - шаблон процедуры
//
Функция ШаблонПроцедурыПодключаемогоПоказателяРасчета(ИдентификаторПоказателяРасчета) Экспорт
	
	// АПК:1299-выкл проектное решение
	ШаблонПроцедуры = 
		НСтр("ru = '
		|// Процедура заполняет выполняет расчет показателя в документе расчета зарплаты
		|//
		|// Параметры:
		|//  ПараметрыПроцедуры - Структура:
		|//     * РезультатРасчета - Число - в эту переменную следует поместить результат расчета
		|//     * СтруктураПараметров  - Структура параметров строки расчета
		|//     * ПоказательРасчета - СправочникСсылка.ПоказателиРасчетов - рассчитываемый показатель
		|//     * ТекстОшибки - Строка - текст ошибки
		|//
		|Процедура РассчитатьПоказательРасчета_%1(ПараметрыПроцедуры) Экспорт
		|	
		|	// Вставить содержимое процедуры.
		|	
		|КонецПроцедуры'");
	// АПК:1299-вкл
	
	АдаптированныйИдентификатор = СтрЗаменить(ИдентификаторПоказателяРасчета, "-", "_");
	ШаблонПроцедуры = СтрШаблон(ШаблонПроцедуры, АдаптированныйИдентификатор);
	
	Возврат ШаблонПроцедуры;
	
КонецФункции

// Процедура - Установить признак использования при обновлении
//
Процедура УстановитьПризнакИспользованияПриОбновлении() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПараметрыРасчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПоказателиРасчетов КАК ПараметрыРасчетов";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбъектПараметр = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектПараметр.Заблокировать();
			ОбъектПараметр.Используется = Истина;
			ОбъектПараметр.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru='Установить признак используется для параметров расчетов'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СообщениеОбОшибке, УровеньЖурналаРегистрации.Ошибка, , , 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДополнитьПараметрыРасчета() Экспорт
		
	// Норма дней по графику
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаДнейГрафикСотрудника") Тогда
		
		ПараметрРасчетовНормаДней = СоздатьЭлемент();
		ПараметрРасчетовНормаДней.Наименование 		 = "Норма дней (график работы сотрудника)";
		ПараметрРасчетовНормаДней.Идентификатор 	 = "НормаДнейГрафикСотрудника";
		ПараметрРасчетовНормаДней.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаДней.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Запрос;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаДней.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ГрафикРаботы";
		НовыйПараметрЗапроса.Представление 			 = "График работы";
		
		ПараметрРасчетовНормаДней.Запрос 			 = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДЕНЬ(ГрафикиРаботы.ВремяНачала)) КАК НормаДней
		|ИЗ
		|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|	И ГрафикиРаботы.ВремяНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ГрафикиРаботы.Год = ГОД(&ПериодРегистрации)";
		
		ПараметрРасчетовНормаДней.Записать();
		
	КонецЕсли;
	
	// Норма часов по графику
	Если НЕ ЗарплатаУНФВызовСервера.ПараметрРасчетаСуществует("НормаЧасовГрафикСотрудника") Тогда
		
		ПараметрРасчетовНормаЧасов = СоздатьЭлемент();
		ПараметрРасчетовНормаЧасов.Наименование 	  = "Норма часов (график работы сотрудника)";
		ПараметрРасчетовНормаЧасов.Идентификатор 	  = "НормаЧасовГрафикСотрудника";
		ПараметрРасчетовНормаЧасов.ПроизвольныйЗапрос = Истина;
		ПараметрРасчетовНормаЧасов.ТипПоказателяРасчетов = Перечисления.ТипыПоказателейРасчета.Запрос;
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ПериодРегистрации";
		НовыйПараметрЗапроса.Представление 			 = "Период регистрации";
		НовыйПараметрЗапроса 						 = ПараметрРасчетовНормаЧасов.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 					 = "ГрафикРаботы";
		НовыйПараметрЗапроса.Представление 			 = "График работы";
		
		ПараметрРасчетовНормаЧасов.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(ГрафикиРаботы.ЧасыРаботы) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
		|	И ГрафикиРаботы.ВремяНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ГрафикиРаботы.Год = ГОД(&ПериодРегистрации)";
		ПараметрРасчетовНормаЧасов.Записать();
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("СобственныйВызов") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Параметры.Вставить("СобственныйВызов");
		Отбор = Новый Структура;
		Отбор.Вставить("Используется", Истина);
		Параметры.Вставить("Отбор", Отбор);
		СтандартныйСписок = ПолучитьДанныеВыбора(Параметры);
		ДанныеВыбора = СтандартныйСписок;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
