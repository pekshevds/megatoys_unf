
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Организация", "Объект.Организация");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
			Объект.НачалоПериода = НачалоГода(ТекущаяДатаСеанса());
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
			Объект.КонецПериода = КонецГода(ТекущаяДатаСеанса());
		КонецЕсли;
		ЗаполнитьБазовыеНачисления();
		
		ПриПолученииДанныхНаСервере();
		
		ПроверитьЗаполнитьВидРасчетаРезерва();
		
	КонецЕсли;
	
	КонтекстныйВызов = Параметры.КонтекстныйВызов;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СинхронизироватьНастройки(Объект);
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.ВидыРасчетовРезерва.Количество() = 0 Тогда
		ОбновитьНастройкиВидовРасчетаПриИзмененииОрганизации();
	Иначе
		ПоказатьВопросОбОчисткеПриИзмененииПоказателя("Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезервПриИзменении(Элемент)
	
	Если Объект.ВидыРасчетовРезерва.Количество() = 0 Тогда
		ОбновитьПараметрыРасчетаРезерва();
	Иначе
		ПоказатьВопросОбОчисткеПриИзмененииПоказателя("Резерв");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРезерваПриИзменении(Элемент)
	
	Объект.ВидыРасчетовРезерва.Очистить();
	ЭтоРасчетОтпуска = Объект.ВидРезерва = ВидРезерваОтпуск;
	ПроверитьЗаполнитьВидРасчетаРезерва();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПериодаПриИзменении(Элемент)
	
	Объект.КонецПериода = КонецГода(Объект.НачалоПериода);
	ПроверитьСоответствиеПериодов();
	ОбновитьПараметрыРасчетаРезерва();
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПериодаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьРезервНУПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНачисленияПриИзменении(Элемент)
	
	ВидНачисленияПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РасчетнаяБаза(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастройки", АдресТаблицыИсключенийРасчетнойБазыФондаОплатыТруда());
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или ОбособленноеПодразделение);
	
	Оповещение = Новый ОписаниеОповещения("РасчетнаяБазаЗавершениеРедактирования", ЭтотОбъект);
	ОткрытьФорму("Справочник.НастройкиРасчетаРезервовПоОплатеТруда.Форма.ФормаНастройкаРасчетнойБазы",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация);
		ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация,"ОбособленноеПодразделение");
	Иначе
		ГоловнаяОрганизация       = Справочники.Организации.ПустаяСсылка();
		ОбособленноеПодразделение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазваниеПараметраРасчетаРезервов()
	
	ОписаниеОбъекта = Новый Структура();
	ОписаниеОбъекта.Вставить("Организация",   Объект.Организация);
	ОписаниеОбъекта.Вставить("Резерв",        Объект.Резерв);
	ОписаниеОбъекта.Вставить("НачалоПериода", Объект.НачалоПериода);
	ОписаниеОбъекта.Вставить("КонецПериода",  Объект.КонецПериода);
	
	Объект.Наименование       = НаименованиеНастройки(ОписаниеОбъекта);
	Объект.ПолноеНаименование = ПолноеНаименованиеНастройки(ОписаниеОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиВидовРасчетаПриИзмененииОрганизации()
	
	ОрганизацияПриИзмененииНаСервере();
	ОбновитьПараметрыРасчетаРезерва();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыРасчетаРезерва()
	
	СформироватьНазваниеПараметраРасчетаРезервов();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеНастройки(Источник)
	
	Возврат РезервыПоОплатеТруда.НаименованиеНастройки(Источник);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолноеНаименованиеНастройки(Источник)
	
	Возврат РезервыПоОплатеТруда.ПолноеНаименованиеНастройки(Источник);
	
КонецФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиЗарплата3Бухгалтерия3");
		НастройкиОбмена = Неопределено;
		ОбменИспользуется = Модуль.ОбменИспользуется(Объект.Организация, НастройкиОбмена);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТрудаДляНебольшихОрганизацийПереопределяемый");
			Модуль.ОбменИспользуется(ОбменИспользуется);
		КонецЕсли;
	КонецЕсли;
	
	ФормироватьРезервБУ = Истина;
	
	ОрганизацияСсылка = Объект.Организация;
	Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ОрганизацияСсылка);
		ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка,"ОбособленноеПодразделение");
		
		ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнаяОрганизация,"ЮридическоеФизическоеЛицо");
		ЭтоФизЛицо = ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	ОрганизацияПрежнееЗначение = Объект.Организация;
	РезервПрежнееЗначение      = Объект.Резерв;
	ВидРезерваПрежнееЗначение  = Объект.ВидРезерва;
	
	ВидРезерваОтпуск = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	ЭтоРасчетОтпуска = Объект.ВидРезерва = ВидРезерваОтпуск;
	
	Если Объект.ВидыРасчетовРезерва.Количество() > 0 Тогда
		ВидРачетаРезерва = Объект.ВидыРасчетовРезерва[0].ВидРасчетаРезерва;
		Если ЗначениеЗаполнено(ВидРачетаРезерва) Тогда
			ВидНачисления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРачетаРезерва, "ВидРасчета");
		КонецЕсли;
	КонецЕсли;
	УстановитьПризнакНастройкиПоказателей();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидНачисленияПриИзмененииНаСервере()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТрудаДляНебольшихОрганизаций");
		Модуль.УстановитьВидыРасчетовРезервовПоОплатеТруда(Объект, ВидНачисления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакНастройкиПоказателей()
	
	МассивВидовРасчетов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВидыРасчетовРезерва, "ВидРасчетаРезерва", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВидовРасчетов", МассивВидовРасчетов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка КАК ВидРасчетаРезерва,
	|	ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета КАК ВидРасчета
	|ИЗ
	|	Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
	|ГДЕ
	|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка В(&МассивВидовРасчетов)";
	
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Объект.ВидыРасчетовРезерва Цикл
		
		ВидРасчетаРезерва = СтрокаТаблицы.ВидРасчетаРезерва;
		
		ТекущаяСтрокаНастройки = ТаблицаРезультата.Найти(ВидРасчетаРезерва);
		Если ТекущаяСтрокаНастройки <> Неопределено Тогда
			СтрокаТаблицы.ВидРасчета = ТекущаяСтрокаНастройки.ВидРасчета;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбОчисткеПриИзмененииПоказателя(ИмяПоказателя)
	
	Если ЗначениеЗаполнено(ЭтотОбъект[ИмяПоказателя + "ПрежнееЗначение"])
		И ЭтотОбъект[ИмяПоказателя + "ПрежнееЗначение"] <> Объект[ИмяПоказателя] Тогда
		
		ТекстВопроса = НСтр("ru = 'Вид начисления будет обновлен.
		|Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ПоказательПриИзмененииЗавершение", ЭтотОбъект, "ВидРезерва");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ОбновитьНастройкиВидовРасчета(ИмяПоказателя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПриИзмененииЗавершение(Ответ, ИмяПоказателя) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьНастройкиВидовРасчета(ИмяПоказателя);
	Иначе
		Объект[ИмяПоказателя]= ЭтотОбъект[ИмяПоказателя + "ПрежнееЗначение"];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиВидовРасчета(ИмяПоказателя)
	
	Объект.ВидыРасчетовРезерва.Очистить();
	ВидНачисления = "";
	
	ЭтотОбъект[ИмяПоказателя + "ПрежнееЗначение"] = Объект[ИмяПоказателя];
	
	Если ИмяПоказателя = "Организация" Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ИмяПоказателя = "ВидРезерва" Тогда
		ЭтоРасчетОтпуска = Объект.ВидРезерва = ВидРезерваОтпуск;
	ИначеЕсли ИмяПоказателя = "Организация"
		Или ИмяПоказателя = "Резерв" Тогда
		ОбновитьПараметрыРасчетаРезерва();
	КонецЕсли;
	ПроверитьЗаполнитьВидРасчетаРезерва();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПроверитьСоответствиеПериодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеПериодов(Отказ = Ложь)
	
	ТекстОшибки = "";
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ТекстОшибки  = НСтр("ru = 'Дата начала периода не может быть пустой'");
		ИмяРеквизита = "ГодПериода";
		Отказ        = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы  = Форма.Элементы;
	Объект    = Форма.Объект;
	
	Элементы.Организация.ТолькоПросмотр                         = Форма.ОбособленноеПодразделение;
	Элементы.ГруппаШапка.ТолькоПросмотр                         = Форма.ОбособленноеПодразделение;
	Элементы.ГруппаНастраиваемая.ТолькоПросмотр                 = Форма.ОбособленноеПодразделение;
	
	МетодНачисленияРезервовНормативный = ПредопределенноеЗначение("Перечисление.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод");
	
	ЭтоФизЛицо          = Форма.ЭтоФизЛицо;
	ФормироватьРезервНУ = Объект.ФормироватьРезервНУ;
	
	Элементы.ГруппаНастройкиРезерваНеПоддерживаются.Видимость = ЭтоФизЛицо;
	
	Элементы.Резерв.Видимость = Не Форма.КонтекстныйВызов;
	
	// Группа НУ
	Элементы.ГруппаПараметрыРасчетаРезервовНУ.Доступность = ФормироватьРезервНУ;
	
	Элементы.РасчетнаяБазаБУ.Видимость    = Не Форма.ЭтоРасчетОтпуска;
	
	// Видимость в зависимости от использования обмена
	Элементы.ВидРезерва.Видимость                       = Не Форма.ОбменИспользуется;
	Элементы.ГруппаБухгалтерскийУчет.Видимость          = Не Форма.ОбменИспользуется;
	Элементы.ГруппаПараметрыРасчетаРезервовНУ.Видимость = Не Форма.ОбменИспользуется;
	Элементы.ФормироватьРезервБУ.Видимость              = Форма.ОбменИспользуется;
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыИсключенийРасчетнойБазыФондаОплатыТруда()
	
	ТаблицаРасчетнаяБазаФондаОплатыТруда = Объект.ИсключенияИзРасчетнойБазыФондаОплатыТруда.Выгрузить();
	АдресНастройки = ПоместитьВоВременноеХранилище(ТаблицаРасчетнаяБазаФондаОплатыТруда, УникальныйИдентификатор);
	Возврат АдресНастройки;
	
КонецФункции

&НаКлиенте
Процедура РасчетнаяБазаЗавершениеРедактирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗагрузитьТаблицуИсключенийРасчетнойБазыФондаОплатыТруда(Результат);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуИсключенийРасчетнойБазыФондаОплатыТруда(АдресНастройки)
	
	Объект.ИсключенияИзРасчетнойБазыФондаОплатыТруда.Загрузить(ПолучитьИзВременногоХранилища(АдресНастройки));
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнитьВидРасчетаРезерва()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТрудаДляНебольшихОрганизаций");
		Модуль.ПроверитьЗаполнитьВидРасчетаРезерва(Объект, ВидНачисления);
	КонецЕсли;
	ВидНачисленияПриИзмененииНаСервере();
	ЗаполнитьБазовыеНачисления();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазовыеНачисления()
	
	Если ЭтоРасчетОтпуска Тогда
		Объект.ИсключенияИзРасчетнойБазыФондаОплатыТруда.Очистить();
	Иначе
		ИсключенияИзРасчетнойБазы = РезервыПоОплатеТруда.ИсключенияИзРасчетнойБазы();
		Объект.ИсключенияИзРасчетнойБазыФондаОплатыТруда.Загрузить(ИсключенияИзРасчетнойБазы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

