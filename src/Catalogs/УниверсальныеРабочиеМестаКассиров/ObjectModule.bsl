#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Обновляем отборы на настроенном узле.
	УзелУРМКСсылка = ПланыОбмена.ОбменСУРМК.НайтиПоРеквизиту("УРМК",Ссылка);
	
	ДанныеИзменены = Ложь;
	
	Если ОбщегоНазначения.СсылкаСуществует(УзелУРМКСсылка) Тогда
		
		Если ТорговыйОбъект <> УзелУРМКСсылка.ТорговыйОбъект Тогда
			ДанныеИзменены = Истина;
		КонецЕсли;
		
		КассыККМУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелУРМКСсылка, "КассыККМ").Выгрузить();
		МассивКассыККМУзла = КассыККМУзла.ВыгрузитьКолонку("КассаККМ");
		
		Если Не ОбщегоНазначения.ДанныеСовпадают(МассивКассыККМУзла, КассыККМ.ВыгрузитьКолонку("КассаККМ")) Тогда
			ДанныеИзменены = Истина;
		КонецЕсли;

	КонецЕсли;

	Если ДанныеИзменены Тогда
		
		НачатьТранзакцию();
		Попытка
		    Блокировка = Новый БлокировкаДанных;
		    ЭлементБлокировки = Блокировка.Добавить("ПланОбмена.ОбменСУРМК");
		    ЭлементБлокировки.УстановитьЗначение("Ссылка", УзелУРМКСсылка);
		    Блокировка.Заблокировать();
			
			УзелУРМКОбъект = УзелУРМКСсылка.ПолучитьОбъект();

			УзелУРМКОбъект.ТорговыйОбъект = ТорговыйОбъект;
			
			СтруктураПараметров = ИнтеграцияУРМКСлужебный.СтруктураОбщихПараметров();
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
			
			ИнтеграцияУРМКПереопределяемый.ПриИзмененииОбщихПараметров(СтруктураПараметров, "ТорговыйОбъект");
			УзелУРМКОбъект.ВидЦен = СтруктураПараметров.ВидЦен;
			
			МассивКассыККМ = КассыККМ.ВыгрузитьКолонку("КассаККМ");
			ТаблицаОрганизаций = ИнтеграцияУРМКСлужебный.ОрганизацииУРМК(КассыККМ.Выгрузить());
			
			Настройки = Новый Структура;
			Настройки.Вставить("КассыККМ", Новый Структура("КассаККМ", МассивКассыККМ));
			
			Если ТаблицаОрганизаций.Количество() > 0 Тогда
				МассивОрганизации = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация"); 
				Настройки.Вставить("Организации", Новый Структура("Организация", МассивОрганизации));
			КонецЕсли;
			
			Для Каждого Элемент Из Настройки Цикл
				Ключ = Элемент.Ключ;
				Значение = Элемент.Значение;

				ЗаполнитьТаблицуУзлаПланаОбмена(УзелУРМКОбъект, Значение, Ключ);
			КонецЦикла;

			УзелУРМКОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить запись настроек узла: %Узел% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Узел%", УзелУРМКСсылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка на использование КассККМ с другим значением ТорговыйОбъект.
	ПустаяСсылкаКассаККМ = Метаданные.ОпределяемыеТипы.КассаККМУРМК.Тип.ПривестиЗначение();
	ПустаяСсылкаТорговыйОбъект = Метаданные.ОпределяемыеТипы.ТорговыйОбъектУРМК.Тип.ПривестиЗначение();
	
	ТорговыйОбъектТипРеквизитаСтрокой = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(ПустаяСсылкаТорговыйОбъект));
	ИмяРеквизитаТорговыйОбъект = ИнтеграцияУРМКСлужебный.ИменаРеквизитовПоТипу(ПустаяСсылкаКассаККМ, Тип(ТорговыйОбъектТипРеквизитаСтрокой), "Подразделение");
	
	Если ЗначениеЗаполнено(ИмяРеквизитаТорговыйОбъект)
		И ЕстьРасхожденияТорговыеОбъекты(ИмяРеквизитаТорговыйОбъект) Тогда
		
		ТекстОшибки = НСтр("ru = 'В списке присутствуют Кассы ККМ с другим значением реквизита Торговый объект (%1)'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяРеквизитаТорговыйОбъект);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		
	КонецЕсли;
	
	// Проверка на использование КассККМ по которым уже есть настроенный УРМК.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УРМК.Ссылка.Наименование КАК Наименование,
	|	УРМККассыККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	Справочник.УниверсальныеРабочиеМестаКассиров.КассыККМ КАК УРМККассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УниверсальныеРабочиеМестаКассиров КАК УРМК
	|		ПО (УРМККассыККМ.Ссылка = УРМК.Ссылка)
	|ГДЕ
	|	УРМК.ТорговыйОбъект = &ТорговыйОбъект
	|	И УРМККассыККМ.КассаККМ В(&КассыККМ)
	|	И НЕ УРМК.Ссылка = &Ссылка
	|";
	
	МассивКассыККМ = КассыККМ.ВыгрузитьКолонку("КассаККМ");
	
	Запрос.УстановитьПараметр("КассыККМ", МассивКассыККМ);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ШаблонСообщения = НСтр("ru = 'УРМК с такими же параметрами уже существует
									 |%1 :
									 |КассаККМ - %2'"); 
		
		СтрокаСообщения = СтрШаблон(ШаблонСообщения, Выборка.Наименование, Выборка.КассаККМ); 
		
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения,,,,Отказ);
	КонецЕсли;
	
	// Проверка на дублирование строк.
	ТабКассыККМ = КассыККМ.Выгрузить();
	ТабКассыККМ.Свернуть("КассаККМ");
	Если КассыККМ.Количество() <> ТабКассыККМ.Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Запись не выполнена. Дублируются строки'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	КонецЕсли;
	
	// Ограничение на две кассы ККМ.
	Если КассыККМ.Количество() > 2 Тогда
		ТекстОшибки = НСтр("ru = 'Запись не выполнена. Использование более двух касс ККМ не поддерживается'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	КонецЕсли;

	Если ИнтеграцияУРМКПереопределяемый.РазрешенРасширенныйРежимНастройкиОбменаУРМК() Тогда
		
		Если КассыККМ.Количество() > 1 Тогда
			ПроверяемыеРеквизиты.Добавить("РаспределениеНоменклатуры");
		КонецЕсли;
		
		Если ГруппыКатегории = 0 Тогда
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РаспределениеНоменклатуры.КатегорияНоменклатуры");
		Иначе
			ЗаполнениеОбъектовУНФ.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "РаспределениеНоменклатуры.ГруппаНоменклатуры");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьРасхожденияТорговыеОбъекты(ИмяРеквизитаТорговыйОбъект)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	таб.КассаККМ КАК КассаККМ
		|ПОМЕСТИТЬ таб
		|ИЗ
		|	&КассыККМ КАК таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	[ТорговыйОбъект] КАК ТорговыйОбъект
		|ИЗ
		|	таб КАК таб
		|ГДЕ
		|	НЕ [ТорговыйОбъект] = &ТорговыйОбъект
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТорговыйОбъект]", "таб.КассаККМ." +ИмяРеквизитаТорговыйОбъект);

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КассыККМ", КассыККМ.Выгрузить());
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ЗаполнитьТаблицуУзлаПланаОбмена(Узел, СтруктураТабличнойЧасти, ИмяТаблицы)
	
	ТаблицаУзла = Узел[ИмяТаблицы];
	
	ТаблицаУзла.Очистить();
	
	Для Каждого Элемент Из СтруктураТабличнойЧасти Цикл
		
		Пока ТаблицаУзла.Количество() < Элемент.Значение.Количество() Цикл
			ТаблицаУзла.Добавить();
		КонецЦикла;
		
		ТаблицаУзла.ЗагрузитьКолонку(Элемент.Значение, Элемент.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли