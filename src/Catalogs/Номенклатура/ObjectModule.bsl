#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
	
Перем ЭтоНовый; // Показывает, что был записан новый объект. Используются в обработчике события ПриЗаписи.
Перем ЕдиницаИзмеренияПередЗаписью;
	
#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		
		ПроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗапасов");
		Если НЕ ЭтоНабор Тогда
			ПроверяемыеРеквизиты.Добавить("МетодОценки");
			ПроверяемыеРеквизиты.Добавить("СпособПополнения");
		КонецЕсли; 
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		ПроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		
		Если ЭтоАгентскаяУслуга Тогда
			ПроверяемыеРеквизиты.Добавить("Поставщик");
			ПроверяемыеРеквизиты.Добавить("Договор");
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		
		ПроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция Тогда
		
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		ПроверяемыеРеквизиты.Добавить("НаправлениеДеятельности");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗатрат");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаЗапасов");
		ПроверяемыеРеквизиты.Добавить("СчетУчетаДоходов");
		Если Не ПроизвольныйНоминал Тогда
			ПроверяемыеРеквизиты.Добавить("Номинал");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") 
		И НЕ ЭтоГруппа И ИспользоватьСерииНоменклатуры И Не ЗначениеЗаполнено(ПолитикаУчетаСерий) Тогда
		ПроверяемыеРеквизиты.Добавить("ПолитикаУчетаСерий");
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И ИспользоватьНаборыЕдиницИзмерения И Не ЗначениеЗаполнено(НаборЕдиницИзмерения) Тогда
		ПроверяемыеРеквизиты.Добавить("НаборЕдиницИзмерения");
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И НЕ ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
	КонецЕсли;
	
	Если Не ЭтоГруппа И ЗначениеЗаполнено(СрокГодности) И Не ЗначениеЗаполнено(ЕдиницаИзмеренияСрокаГодности) Тогда
		ПроверяемыеРеквизиты.Добавить("ЕдиницаИзмеренияСрокаГодности");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Для корректной работы логики системы, необходимо обязательное заполнение ряда реквизитов зависящих от типа номенклатуры.
// Во избежание проблем с незаполненными реквизитами, а так же работы логики системы в целом, перед вызовом процедуры необходимо 
// заполнять реквизит объекта ТипНоменклатурыПоУмолчанию или передать реквизит и его значение в ДанныеЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения<>Неопределено И ДанныеЗаполнения.Свойство("ЭтоГруппа") И ДанныеЗаполнения.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И ТипЗнч(ТекстЗаполнения) = Тип("Строка") И ЗначениеЗаполнено(ТекстЗаполнения) Тогда
		НаименованиеПолное = ТекстЗаполнения;
		Наименование = ТекстЗаполнения;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("КатегорияНоменклатуры")
		И ЗначениеЗаполнено(ДанныеЗаполнения.КатегорияНоменклатуры) Тогда
		
		Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(ДанныеЗаполнения.КатегорияНоменклатуры) Тогда
			ДанныеЗаполнения.Удалить("КатегорияНоменклатуры");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат
	КонецЕсли;
	
	Если Не ДанныеЗаполнения = Неопределено Тогда
		 ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		 СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	СчетУчетаЗатратПоУмолчанию = ?(ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга 
	ИЛИ НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить(),
	ПланыСчетов.Управленческий.КоммерческиеРасходы,
	ПланыСчетов.Управленческий.НезавершенноеПроизводство);
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		
		Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗапасов) Тогда
			СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
		КонецЕсли;
		
		Если НЕ ЭтоНабор Тогда
			
			Если Не ЗначениеЗаполнено(МетодОценки) Тогда 
				МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СпособПополнения) Тогда
				СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
			КонецЕсли;
			
		КонецЕсли; 
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		
		Если ЭтоАгентскаяУслуга Тогда
			
			Если Не ЗначениеЗаполнено(Поставщик) Или Не ЗначениеЗаполнено(Договор) Тогда
				ЭтоАгентскаяУслуга = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		
		Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция Тогда
		
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗапасов) Тогда
			СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаДоходов) Тогда
			СчетУчетаДоходов = ПланыСчетов.Управленческий.ПрочиеДоходы;
		КонецЕсли;
		
		Если Не ПроизвольныйНоминал Тогда
			
			Если Не ЗначениеЗаполнено(Номинал) И ИспользоватьСерииНоменклатуры Тогда
				ПроизвольныйНоминал = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеПолное) Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		КатегорияНоменклатуры = КатегорииНоменклатурыСервер.ЗначениеЗаполненияКатегории();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Коэффициент должен быть заполнен в любом случае
	Если КоэффициентЕдиницыДляОтчетов = 0 Тогда
		КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
	
	// Требуется заполнять служебные свойства в режиме ОбменДанными.Загрузка
	Если ОбменДанными.Загрузка И ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОбновлениеИнформационнойБазы
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ОбновлениеИнформационнойБазы

	ДатаИзменения = ТекущаяДата();
	
	Если НЕ ЭтоГруппа И ПометкаУдаления = Истина Тогда 
		
		ИсключитьИзПрайсЛистов = Истина;
		
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		КатегорииНоменклатурыСервер.ПроверкаЗаполненияСвойствПередЗаписью(ЭтотОбъект, Отказ);
		АлкогольнаяПродукция = ЗначениеЗаполнено(ВидАлкогольнойПродукции)
			Или ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная
			Или ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Пиво;
		Если ЗначениеЗаполнено(ВидАлкогольнойПродукции)
			И НЕ ЗначениеЗаполнено(ВидПродукцииИС) Тогда
			ВидПродукцииИС = ИнтеграцияИСУНФ.ВидПродукцииИСПоВидуАлкогольнойПродукции(ВидАлкогольнойПродукции);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНовый = ЭтоНовый();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// для КиЗ и номенклатуры, которая маркируется КиЗ учет сериный номеров обязателен 
	Если НЕ ЭтоГруппа
		И (ВидМаркировки = Перечисления.ВидыМаркировки.КонтрольныйИдентификационныйЗнак
			ИЛИ ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция) Тогда
		
		//ИспользоватьСерииНоменклатуры = Истина;
		Если НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется()
			И НЕ (ИспользоватьСерииНоменклатуры И ИспользоватьУникальныеСерии И ЗначениеЗаполнено(ПолитикаУчетаСерий)) Тогда
			ТекстСообщения = "Для ведения учета продукции ГИСМ необходимо выполнить настройки:
			| - Включить использование серий номенклатуры (флажок ""Использовать серии номенклатуры"")
			| - Включить использование уникальных серий (флажок ""Использовать уникальные серии"")
			| - Указать политику учета серий (поле ""Политика учета серий"")";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Если ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция
			И НЕ ЗначениеЗаполнено(ВидПродукцииИС) Тогда
			ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
		КонецЕсли;
		
	КонецЕсли;
	
	// для маркировки = киз - ставим, что это КИЗ
	Если НЕ ЭтоГруппа Тогда
		КизГИСМ = (ВидМаркировки = Перечисления.ВидыМаркировки.КонтрольныйИдентификационныйЗнак);
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		
		ЕдиницаИзмеренияПередЗаписью = Ссылка.ЕдиницаИзмерения;
		
		Если ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.ВидРабот
			И ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Операция
			И ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Работа
			И НЕ ФиксированнаяСтоимость Тогда
			ФиксированнаяСтоимость = Истина;
		КонецЕсли;
		
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ВидРабот
			ИЛИ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция
			ИЛИ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
			Тогда
			ИспользоватьХарактеристики = Ложь;
			ПроверятьЗаполнениеХарактеристики = Ложь;
			ПроверятьЗаполнениеПартий = Ложь;
		КонецЕсли;
		
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат 
			И ИспользоватьСерииНоменклатуры И Не ИспользоватьУникальныеСерии Тогда
			ИспользоватьУникальныеСерии = Истина;
		КонецЕсли;
		
		Если Не ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			ИспользоватьПартии = Ложь;
		КонецЕсли;
		
		ПроверятьЗаполнениеХарактеристики = ?(Не ИспользоватьХарактеристики, Ложь, ПроверятьЗаполнениеХарактеристики);
		ПроверятьЗаполнениеПартий = ?(Не ИспользоватьПартии, Ложь, ПроверятьЗаполнениеПартий); 
		
		Если Не ЗначениеЗаполнено(ПризнакПредметаРасчета) И РозничныеПродажиСервер.ТребуетсяПризнакПредметаРасчета(ТипНоменклатуры) Тогда
			ПризнакПредметаРасчета = РозничныеПродажиСервер.ПолучитьПризнакПредметаРасчетаКатегории(КатегорияНоменклатуры, ТипНоменклатуры, ВидПродукцииИС, ВидМаркировки);			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		РегистрыСведений.ОбъектыИнтеграцииCRM.ПередЗаписьюОбъекта(ЭтотОбъект);
	КонецЕсли;
	
	// Прослеживаемость
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас И ЗначениеЗаполнено(ТоварнаяНоменклатураВЭД) Тогда
		ПрослеживаемыйТовар = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяНоменклатураВЭД, "ПрослеживаемыйТовар", Истина);
	ИначеЕсли Не ЭтоГруппа Тогда
		ПрослеживаемыйТовар = Ложь;
	КонецЕсли;
	// Конец Прослеживаемость
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбъектКопирования.ЭтоГруппа Тогда
		
		ФайлКартинки = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
		ПрослеживаемыйКомплект = Ложь;
		Штрихкод = "";
		
		Если ЗначениеЗаполнено(ПолитикаУчетаСерий) И НЕ ИспользоватьСерииНоменклатуры Тогда
			ПолитикаУчетаСерий = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Требуется заполнять служебные свойства в режиме ОбменДанными.Загрузка
	Если ОбменДанными.Загрузка И ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		КатегорииНоменклатурыСервер.ПроверкаЗаполненияСвойствПриЗаписи(ЭтотОбъект, КатегорияНоменклатуры, Отказ);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		ЗаписатьГруппуВРегистр();
		Возврат;
	Иначе
		ПеренестиНастройкиПолитикСерийИзКатегории();
		ЗаписатьИнформациюОСменеЕдиницыИзмерения(Отказ);
	КонецЕсли;
	
	Если ЭтоНабор Тогда
		Если ИспользоватьХарактеристики Тогда
			УдалитьХарактеристикуПоУмолчанию();
		Иначе
			ОчисткаОбщегоСоставаНабора();
		КонецЕсли;
	КонецЕсли;
	
	РегистрыСведений.ОбъектыИнтеграцииCRM.ПриЗаписиОбъекта(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УзелТовары = ОбменСКассовымСерверомШтрихМПереопределяемый.УзелТовары();
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелТовары, Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьГруппуВРегистр()
	
	НаборЗаписей = РегистрыСведений.ИерархияНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Ссылка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Номенклатура = Ссылка;
	НоваяЗапись.ПометкаУдаленияГруппы = ПометкаУдаления;
	НоваяЗапись.КартинкаГруппы = ?(ПометкаУдаления, 1, 0);
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОСменеЕдиницыИзмерения(Отказ)
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияПередЗаписью) И Не ЕдиницаИзмеренияПередЗаписью = ЕдиницаИзмерения Тогда
	
		МенеджерЗаписи = РегистрыСведений.ИсторияИзмененийЕдиницИзмерения.СоздатьМенеджерЗаписи();
	
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.ВладелецЕдиницыИзмерения = Ссылка;
		МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
		МенеджерЗаписи.СтараяЕдиницаИзмерения = ЕдиницаИзмеренияПередЗаписью;
		МенеджерЗаписи.НоваяЕдиницаИзмерения = ЕдиницаИзмерения;

		МенеджерЗаписи.Записать()
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиНастройкиПолитикСерийИзКатегории()
	
	Если Не ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Владелец", КатегорияНоменклатуры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолитикиУчетаСерий.Организация КАК Организация,
	|	ПолитикиУчетаСерий.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПолитикиУчетаСерий.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|ИЗ
	|	РегистрСведений.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ПолитикиУчетаСерий.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Количество() Тогда 
		Возврат 
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПолитикиУчетаСерий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(Ссылка);
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Владелец = Ссылка;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ОчисткаОбщегоСоставаНабора()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоставНаборов.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоставНаборов КАК СоставНаборов
	|ГДЕ
	|	СоставНаборов.НоменклатураНабора = &Ссылка
	|	И СоставНаборов.Общий";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Набор = РегистрыСведений.СоставНаборов.СоздатьНаборЗаписей();
		Набор.Отбор.НоменклатураНабора.Установить(Ссылка);
		Набор.Отбор.Общий.Установить(Истина);
		Набор.Записать(Истина);
	КонецЕсли; 
	
КонецПроцедуры

// Производит очистку в регистра сведений значение характеристики по умолчанию если номенклатура - Набор
//
Процедура УдалитьХарактеристикуПоУмолчанию()
	
	НаборЗаписей = РегистрыСведений.ЗначенияНоменклатурыПоУмолчанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Ссылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти 

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли