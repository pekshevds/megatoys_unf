
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	НаборСвойств_Справочник_Сотрудники = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Сотрудники");
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ПараметрыКонтактнойИнформации= УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыКонтактнойИнформации.ИмяЭлементаДляРазмещения = Элементы.КонтактнаяИнформация.Имя;
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, ФизическоеЛицо, ПараметрыКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	Если Параметры.ОшибкиЗаполнения Тогда
		ПроверкаДанных.ВывестиСообщенияОбОшибкахЗаполнения("Объект", Параметры.ПереченьОшибок);
	КонецЕсли;
	
	ОтобразитьИзменениеФизЛица();
	ОтобразитьИзменениеКадровойИнформации();
	
	ПолучитьАктуальныйДокументФизическогоЛица();
	
	УстановитьЗаголовокКадровыхДанных(ЭтотОбъект);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата") Тогда
		Элементы.ГруппаРабота.Видимость = Истина;
	Иначе
		Элементы.ГруппаРабота.Видимость = Ложь;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.ГруппаРабота.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");
	
	Если ЗначениеЗаполнено(Объект.Физлицо) Тогда
		ПрочитатьБанковскийСчетПоУмолчанию(Объект.Физлицо.БанковскийСчетПоУмолчанию);
	КонецЕсли;
	
	Если Параметры.Свойство("НеобходимаОтметкаФизЛицо") Тогда
		НеобходимаОтметкаФизЛицо = Параметры.НеобходимаОтметкаФизЛицо;
	КонецЕсли;
	
	Элементы.ГруппаВычетыНДФЛ.Видимость = Элементы.ГруппаРабота.Видимость;
	ОтобразитьИзменениеВычетовНДФЛ();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	Если НеобходимаОтметкаФизЛицо Тогда
		СообщениеФизЛицо = Новый СообщениеПользователю;
		СообщениеФизЛицо.Поле = "Объект.Физлицо";
		СообщениеФизЛицо.Текст = НСтр(
			"ru = 'Выберите из списка или запишите сотрудника для создания нового элемента'");
		СообщениеФизЛицо.Сообщить();
	КонецЕсли;
	
	УстановитьМаскуНомераСчета();
	
	ОбновитьЗаголовокСвернутойГруппыИдентификаторы();
	
	ОбработатьПодключениеОборудованияПриОткрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "ИзменилисьСчетаСотрудники" Тогда
		Объект.СчетРасчетовСПерсоналом = Параметр.СчетРасчетовСПерсоналом;
		Объект.СчетРасчетовСПодотчетниками = Параметр.СчетРасчетовСПодотчетниками;
		Объект.СчетРасчетовПоПерерасходу = Параметр.СчетРасчетовПоПерерасходу;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ФизическиеЛица" И Параметр = Объект.Физлицо Тогда
		ОтобразитьИзменениеФизЛица();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяДокументФизЛиц" Тогда
		ОтобразитьИзменениеФизЛица();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеПоКадровомуУчету" Тогда
		ОтобразитьИзменениеКадровойИнформации();
		УстановитьЗаголовокКадровыхДанных(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Физлицо Тогда
		ПрочитатьБанковскийСчетПоУмолчанию(Параметр.НовыйОсновнойСчет);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыВычеты" И Параметр = Объект.ФизЛицо Тогда
		ПрочитатьСведенияОВычетахНДФЛРегл();
		УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
	КонецЕсли;	
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		ОбработатьСобытиеОповещенияПодключаемогоОборудования(ИмяСобытия, Параметр);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Запись" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(
		ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ФизическоеЛицо);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если ЗначениеЗаполнено(Объект.Физлицо) Или СоздатьФизЛицоАвтоматически Тогда
		ЗаписатьДанныеПоФизЛицу(Отказ);
		ТекущийОбъект.ФизЛицо = Объект.Физлицо;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверятьУникальностьТН", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОтобразитьИзменениеФизЛица();
	ОтобразитьИзменениеВычетовНДФЛ();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Не ПустаяСтрока(ОсновнойСчет_Номер) И Не ЗначениеЗаполнено(ОсновнойСчет_Банк) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , "Заполнение", НСтр("ru = 'Банк'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ОсновнойСчет_Банк", , Отказ);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОсновнойСчет_Банк) И ПустаяСтрока(ОсновнойСчет_Номер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , "Заполнение", НСтр("ru = 'Номер счета'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ОсновнойСчет_Номер", , Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, ФизическоеЛицо, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ЗначениеЗаполнено(ТекущийОбъект.Физлицо) Тогда
		ЗначениеВРеквизитФормы(ТекущийОбъект.Физлицо.ПолучитьОбъект(), "ФизическоеЛицо");
	КонецЕсли;
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ФизическоеЛицо);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)

	Если Не Объект.Недействителен Тогда
		Возврат;
	КонецЕсли;

	Если ЭлементОсновной() Тогда
		ПараметрыОповещения = Новый Структура;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияПредупрежденияНедействителен", ЭтотОбъект,
			ПараметрыОповещения);
		ПоказатьПредупреждение(ОповещениеОЗакрытии, НСтр(
			"ru = 'Для установки ""Недействителен"" необходимо снять свойство ""Основной"" у данного сотрудника.'"), ,
			НСтр("ru = 'Элемент выбран основным'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияНедействителен(Параметры) Экспорт
	Объект.Недействителен = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФизлицоПриИзменении(Элемент)
	ОтобразитьИзменениеФизЛица();
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	НаименованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьРедактированиеДокументовФизическогоЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура ВычетыПоНДФЛНаДетейНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияВычетаНаДетей", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛСтандартныеВычетыНаДетей.Форма.ФормаЗаполненияСтандартныхВычетовДляДетей",
			Новый Структура("Сотрудник", Объект.Ссылка), ЭтотОбъект, , , , оп,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмущественныйВычетНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если Не ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияИмущественного", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛИмущественныйВычет.Форма.ФормаЗаполненияИмущественныхВычетов",
			Новый Структура("Сотрудник", Объект.Ссылка), , , , , оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоциальныйВычетНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если Не ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияСоциального", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛСоциальныеВычеты.Форма.ФормаЗаполненияСоциальныхВычетов",
			Новый Структура("Сотрудник", Объект.Ссылка), , , , , оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйЛичныйВычетНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Не ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияЛичного", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛСтандартныеЛичныеВычеты.Форма.ФормаЗаполненияСтандартныхЛичныхВычетов",
			Новый Структура("Сотрудник", Объект.Ссылка), , , , , оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтандартныеВычетыРеглНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если Не ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияВычетовНаДетейРегл", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИзФормыСотрудника", Истина);
		Если ЗначениеЗаполнено(СтандартныеВычетыДокумент) Тогда
			ПараметрыФормы.Вставить("Ключ", СтандартныеВычетыДокумент);
		Иначе
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Действие", "ЗаполнитьПоПараметрамЗаполнения");
			ДанныеЗаполнения.Вставить("Месяц", ДанныеВычетовНДФЛ.ТекущийМесяц);
			ДанныеЗаполнения.Вставить("Организация", Объект.ГоловнаяОрганизация);
			ДанныеЗаполнения.Вставить("Сотрудник", Объект.ФизическоеЛицо);
			
			Если ДанныеВычетовНДФЛ.ЛичныйВычетУпр.Сумма > 0 И ЗначениеЗаполнено(ДанныеВычетовНДФЛ.ЛичныйВычетУпр.КодВычета) Тогда
				ДанныеЗаполнения.Вставить("ИзменитьЛичныйВычет", Истина);
				ДанныеЗаполнения.Вставить("КодВычетаЛичный", ДанныеВычетовНДФЛ.ЛичныйВычетУпр.КодВычета);
			КонецЕсли;
			
			Если ДанныеВычетовНДФЛ.ВычетНаДетейУпр.Сумма > 0 Тогда
				ПараметрыФормы.Вставить("ОчищатьВычетыНаДетей", Ложь);
				ДанныеЗаполнения.Вставить("ИзменитьВычетыНаДетей", Истина);
				Для Каждого СтрВычет Из ДанныеВычетовНДФЛ.ВычетНаДетейУпр.КодыВычетов Цикл
					СтрокиВычетов = Новый Массив;
					СтрокиВычетов.Добавить(Новый Структура("КодВычета, ДействуетДо", СтрВычет.КодВычета, СтрВычет.ПериодЗавершения));
				КонецЦикла;
				ДанныеЗаполнения.Вставить("Вычеты", СтрокиВычетов);
			КонецЕсли;
			
			Если НЕ ДанныеЗаполнения.Свойство("ИзменитьЛичныйВычет") И НЕ ДанныеЗаполнения.Свойство("Вычеты") Тогда
				ДанныеЗаполнения.Вставить("ИзменитьВычетыНаДетей", Истина);
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить("ИзменитьВычетыНаДетей", Истина);
			
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
		КонецЕсли;
		ОткрытьФорму("Документ.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.ФормаОбъекта",
			ПараметрыФормы, , , , , оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоциальныйВычетРеглНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияИмущественныхВычетовРегл", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИзФормыСотрудника", Истина);
		Если ЗначениеЗаполнено(УведомлениеОВычетахДокумент) Тогда
			ПараметрыФормы.Вставить("Ключ", УведомлениеОВычетахДокумент);
		Иначе
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Действие", "ЗаполнитьПоПараметрамЗаполнения");
			ДанныеЗаполнения.Вставить("НалоговыйПериод", Год(ДанныеВычетовНДФЛ.ТекущийМесяц));
			ДанныеЗаполнения.Вставить("Организация", Объект.ГоловнаяОрганизация);
			ДанныеЗаполнения.Вставить("Сотрудник", Объект.ФизическоеЛицо);
			ДанныеЗаполнения.Вставить("ПрименятьВычетыС", ДанныеВычетовНДФЛ.ТекущийМесяц);
			ДанныеЗаполнения.Вставить("НомерУведомления", "");
			ДанныеЗаполнения.Вставить("ДатаУведомления", Дата(1, 1, 1));
			ДанныеЗаполнения.Вставить("КодНалоговогоОргана", "");
			Если ДанныеВычетовНДФЛ.ИмущественныйВычетУпр.Сумма > 0 Тогда
				ДанныеЗаполнения.Вставить("РасходыНаСтроительствоПриобретение", ДанныеВычетовНДФЛ.ИмущественныйВычетУпр.РасходыПриобретение);
				ДанныеЗаполнения.Вставить("ПроцентыПоКредитам", ДанныеВычетовНДФЛ.ИмущественныйВычетУпр.ПроцентыПоКредиту);
				ДанныеЗаполнения.НомерУведомления = ДанныеВычетовНДФЛ.ИмущественныйВычетУпр.НомерУведомления;
				ДанныеЗаполнения.ДатаУведомления = ДанныеВычетовНДФЛ.ИмущественныйВычетУпр.ДатаУведомления;
				ДанныеЗаполнения.КодНалоговогоОргана = ДанныеВычетовНДФЛ.ИмущественныйВычетУпр.КодИФНС;
			КонецЕсли;
			
			Если ДанныеВычетовНДФЛ.СоциальныйВычетУпр.Сумма > 0
				И ДанныеВычетовНДФЛ.СоциальныйВычетУпр.Свойство("ВидРасходов")
				И (НЕ ЗначениеЗаполнено(ДанныеЗаполнения.НомерУведомления)
				ИЛИ ДанныеЗаполнения.НомерУведомления = ДанныеВычетовНДФЛ.СоциальныйВычетУпр.НомерУведомления) Тогда
				ДанныеЗаполнения.НомерУведомления = ДанныеВычетовНДФЛ.СоциальныйВычетУпр.НомерУведомления;
				ДанныеЗаполнения.ДатаУведомления = ДанныеВычетовНДФЛ.СоциальныйВычетУпр.ДатаУведомления;
				ДанныеЗаполнения.КодНалоговогоОргана = ДанныеВычетовНДФЛ.СоциальныйВычетУпр.КодИФНС;
				ДанныеЗаполнения.Вставить("" + ДанныеВычетовНДФЛ.СоциальныйВычетУпр.ВидРасходов, ДанныеВычетовНДФЛ.СоциальныйВычетУпр.Сумма);
			КонецЕсли;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
		КонецЕсли;
		ОткрытьФорму("Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.ФормаОбъекта",
			ПараметрыФормы, , , , , оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоходыПредыдущееМестоРаботыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФизическоеЛицо", Объект.ФизЛицо);
	ПараметрыФормы.Вставить("ГоловнаяОрганизация", Объект.ГоловнаяОрганизация);
	
	оп = Новый ОписаниеОповещения("ОповещениеЗаполненияДоходыСПредыдущегоМестаРаботыРегл", ЭтотОбъект);

	ОткрытьФорму("Справочник.Сотрудники.Форма.ДоходыСПредыдущегоМестаРаботы",
					ПараметрыФормы, , , , , оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", , Элемент);

КонецПроцедуры

&НаКлиенте
Процедура БанкОчистка(Элемент, СтандартнаяОбработка)

	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");

КонецПроцедуры

&НаКлиенте
Процедура БанкСоздание(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаОбъекта", , Элемент);

КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранноеЗначение = "ЗагрузитьКлассификатор" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ЗагрузкаКлассификатораБанков.Форма.Форма");
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.КлассификаторБанков") Тогда
		Возврат;
	КонецЕсли;

	НайденныйБанк = БанкиУНФВызовСервера.СсылкаНаБанкИзКлассификатора(ВыбранноеЗначение);
	Если ЗначениеЗаполнено(НайденныйБанк) Тогда
		ВыбранноеЗначение = НайденныйБанк;
	Иначе
		Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	ИзменилиБанковскийСчет = Истина;

КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ДанныеВыбора = БанкиУНФВызовСервера.БанкАвтоПодборДанныеВыбора(Текст);

КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	ИзменилиБанковскийСчет = Истина;
	ЯвляетсяБанкомРФ = ЯвляетсяБанкомРФ(ОсновнойСчет_Банк);
	УстановитьМаскуНомераСчета();
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	ИзменилиБанковскийСчет = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

	ТекущийТекстНомераСчета = СтрЗаменить(Текст, " ", "");

	Если ЯвляетсяБанкомРФ И ТекущийТекстНомераСчета <> Неопределено Тогда

		ДлинаСчетаРФ = БанковскиеПравилаКлиентСервер.ДлинаНомераСчета();
		КоличествоЦифрВСчете = СтрДлина(ТекущийТекстНомераСчета);

		Если ДлинаСчетаРФ <> КоличествоЦифрВСчете Тогда
			ТекстСообщения = НСтр("ru = 'Осталось ввести %1'");
			СклоняемыйТекст = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
							НСтр("ru = ';%1 цифру;;%1 цифры;%1 цифр;%1 цифры'"), ДлинаСчетаРФ - КоличествоЦифрВСчете);

			Элементы.НомерСчета.Подсказка = СтрШаблон(ТекстСообщения, СклоняемыйТекст);
		Иначе
			Элементы.НомерСчета.Подсказка = "";
		КонецЕсли;

	Иначе
		Элементы.НомерСчета.Подсказка = "";
	КонецЕсли;

	ОсновнойСчет_Номер = ТекущийТекстНомераСчета;
	ИзменилиБанковскийСчет = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодПриИзменении(Элемент)
	
	Объект.ШтрихКод = СокрЛП(Объект.ШтрихКод);
	ОбновитьЗаголовокСвернутойГруппыИдентификаторы();
	
КонецПроцедуры

&НаКлиенте
Процедура МагнитныйКодПриИзменении(Элемент)
	
	Объект.МагнитныйКод = СокрЛП(Объект.МагнитныйКод);
	ОбновитьЗаголовокСвернутойГруппыИдентификаторы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИсторияИмущественныхВычетов(Команда)

	Если Не ПроверитьСотрудникаНаНовый() Тогда
		ОткрытьФорму("РегистрСведений.НДФЛИмущественныйВычет.ФормаСписка", Новый Структура("Отбор",
			Новый Структура("Сотрудник", Объект.Ссылка)));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияСоциальныхВычетов(Команда)

	Если Не ПроверитьСотрудникаНаНовый() Тогда
		ОткрытьФорму("РегистрСведений.НДФЛСоциальныеВычеты.ФормаСписка", Новый Структура("Отбор",
			Новый Структура("Сотрудник", Объект.Ссылка)));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияЛичныхВычетов(Команда)
	Если Не ПроверитьСотрудникаНаНовый() Тогда
		ОткрытьФорму("РегистрСведений.НДФЛСтандартныеЛичныеВычеты.ФормаСписка", Новый Структура("Отбор",
			Новый Структура("Сотрудник", Объект.Ссылка)));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВсеЗаявленияВычетыНаДетей(Команда)
	
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		СотрудникиКлиент.ОткрытьЖурналЗаявленийНаВычеты(Объект.Физлицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьСтандартныеВычеты(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Сотрудник", Объект.ФизЛицо);
	ЗначенияЗаполнения.Вставить("Организация", Объект.ГоловнаяОрганизация);
	ЗначенияЗаполнения.Вставить("Месяц", НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса()));

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("ИзФормыСотрудника", Истина);
	
	ОповещениеЗакрытие = Новый ОписаниеОповещения("ОповещениеЗакрытиеПрекращениеСтандартныхВычетовРегл", ЭтаФорма);
	ОткрытьФорму("Документ.ПрекращениеСтандартныхВычетовНДФЛ.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПриемНаРаботу(Команда)

	Если (Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность) И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",
		Новый Структура("Сотрудник, ПринятьНаРаботу", Объект.Ссылка, Истина), ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОформитьУвольнение(Команда)

	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",
		Новый Структура("Сотрудник, Организация, ОформитьУвольнение", Объект.Ссылка,
		КлючТекущиеКадровыеДанныеСотрудников.Организация, Истина), ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДолжность(Команда)

	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",
		Новый Структура("Сотрудник, Организация, ИзменитьДолжность", Объект.Ссылка,
		КлючТекущиеКадровыеДанныеСотрудников.Организация, Истина), ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОклад(Команда)

	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",
		Новый Структура("Сотрудник, Организация, ИзменитьОклад", Объект.Ссылка,
		КлючТекущиеКадровыеДанныеСотрудников.Организация, Истина), ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	ФизическоеЛицо.Наименование = Объект.Наименование;
КонецПроцедуры

&НаКлиенте
Процедура Справка2НДФЛ(Команда)

	ТекущаяОрганизация = КлючТекущиеКадровыеДанныеСотрудников.Организация;
	Если Не ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ТекущаяОрганизация = РегламентированнаяОтчетностьУСН.ПолучитьТекущуюОрганизациюДляЦелейЗадачОтчетности();
	КонецЕсли;

	Если Не ПроверитьСотрудникаНаНовый() Тогда
		Если Модифицированность И Не Записать() Тогда
			Возврат;
		КонецЕсли;
		ПараметрДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если ПроверкаДанныхКлиент.ВыполнитьПроверкуДанныхДляСправки2НФДЛ(
			ПараметрДата, ТекущаяОрганизация, Объект.Ссылка) Тогда
			ОткрытьФорму("Документ.СправкаНДФЛУНФ.Форма.ФормаДокумента", Новый Структура("Сотрудник, Организация",
				Объект.Ссылка, ТекущаяОрганизация), ЭтотОбъект, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборСвойств_Справочник_Сотрудники);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);

	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПечатьШтрихКода(Команда)

	Если Не ЗначениеЗаполнено(Объект.ШтрихКод) Тогда
		Возврат;
	КонецЕсли;

	ТабДок = ТабличныйДокументСШтрихКодом();

	ТабДок.Показать();

КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьШтрихКод(Команда)
	Объект.ШтрихКод = СформироватьШтрихкодEAN13();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЭлементОсновной()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей["ОсновнойОтветственный"]);
	Запрос.УстановитьПараметр("Значение", Объект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Настройка КАК Настройка,
	|	НастройкиПользователей.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка = &Настройка
	|	И НастройкиПользователей.Значение = &Значение";

	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

&НаСервере
Процедура ЗаписатьДанныеПоФизЛицу(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Физлицо) Тогда
		ФизическоеЛицо.Наименование = Объект.Наименование;
	КонецЕсли;
	
	ФизЛицо = РеквизитФормыВЗначение("ФизическоеЛицо", Тип("СправочникОбъект.ФизическиеЛица"));
	УстановитьБанковскийСчетПоУмолчанию(ФизЛицо);
	ФизЛицо.Записать();
	
	Если ИзменилиБанковскийСчет Тогда
		ЗаписатьБанковскийСчетПоУмолчанию(Физлицо);
	КонецЕсли;
	
	Объект.Физлицо = ФизЛицо.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАктуальнуюКадровуюИнформациюОСотруднике(Сотрудник, КлючТекущаяКадроваяИнформация)

	ЗаполнитьЗначенияСвойств(КлючТекущаяКадроваяИнформация,
		РегистрыСведений.ТекущиеКадровыеДанныеСотрудниковУНФ.СоздатьМенеджерЗаписи());
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.Организация,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаУвольнения,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.СтруктурнаяЕдиница,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ТекущаяТарифнаяСтавка,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ВалютаТарифнойСтавки
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудниковУНФ КАК ТекущиеКадровыеДанныеСотрудниковУНФ
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(КлючТекущаяКадроваяИнформация, Выборка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьИзменениеФизЛица()

	Если ЗначениеЗаполнено(Объект.Физлицо) Тогда
		ЗначениеВРеквизитФормы(Объект.Физлицо.ПолучитьОбъект(), "ФизическоеЛицо");
	ИначеЕсли Не ТолькоПросмотр Тогда
		ЗначениеВРеквизитФормы(Справочники.ФизическиеЛица.СоздатьЭлемент(), "ФизическоеЛицо");
		СоздатьФизЛицоАвтоматически = Истина;
	КонецЕсли;
	
	ПолучитьАктуальныйДокументФизическогоЛица();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИзменениеКадровойИнформации()
	ПолучитьАктуальнуюКадровуюИнформациюОСотруднике(Объект.Ссылка, КлючТекущиеКадровыеДанныеСотрудников);

	Если Не ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема) Или (ЗначениеЗаполнено(
		КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема) И ЗначениеЗаполнено(
		КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения)) Тогда
		Если ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения) Тогда
			Элементы.ОформитьПриемНаРаботу.Видимость = Ложь;
		Иначе
		// Есть возможность принять сотрудника
			Элементы.ОформитьПриемНаРаботу.Видимость = Истина;
		КонецЕсли;
		Элементы.ОформитьУвольнение.Видимость = Ложь;
		Элементы.ИзменитьДолжность.Видимость = Ложь;
		Элементы.ИзменитьОклад.Видимость = Ложь;
	Иначе
		Элементы.ОформитьПриемНаРаботу.Видимость = Ложь;
		Элементы.ОформитьУвольнение.Видимость = Истина;
		Элементы.ИзменитьДолжность.Видимость = Истина;
		Элементы.ИзменитьОклад.Видимость = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьСотрудникаНаНовый()

	Если Объект.Ссылка.Пустая() И Не Записать() Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Доступно после записи данного сотрудника'"));
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ОпределитьИмущественныйВычет()

	Если Объект.Ссылка.Пустая() Тогда
		ИмущественныйВычет = НадписьЗаполнитьИмущественныеВычетыСотрудника();
		Элементы.ИмущественныйВычет.Подсказка = ИмущественныйВычет;
		Возврат;
	КонецЕсли;
	ЗапросПоИмущественномуВычету = Новый Запрос;
	ЗапросПоИмущественномуВычету.Текст =
	"ВЫБРАТЬ
	|	НДФЛИмущественныйВычетСрезПоследних.Представление КАК Представление,
	|	НДФЛИмущественныйВычетСрезПоследних.СуммаРасходов КАК СуммаРасходов,
	|	НДФЛИмущественныйВычетСрезПоследних.ПроцентыПоКредиту КАК ПроцентыПоКредиту,
	|	НДФЛИмущественныйВычетСрезПоследних.КодИФНС КАК КодИФНС,
	|	НДФЛИмущественныйВычетСрезПоследних.НомерУведомления КАК НомерУведомления,
	|	НДФЛИмущественныйВычетСрезПоследних.ДатаУведомления КАК ДатаУведомления,
	|	НДФЛИмущественныйВычетСрезПоследних.Применяется КАК Применяется
	|ИЗ
	|	РегистрСведений.НДФЛИмущественныйВычет.СрезПоследних КАК НДФЛИмущественныйВычетСрезПоследних
	|ГДЕ
	|	НДФЛИмущественныйВычетСрезПоследних.Сотрудник = &Сотрудник";
	ЗапросПоИмущественномуВычету.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	
	ДанныеИмущественныйВычетУпр = Новый Структура("Сумма", 0);
	Выборка = ЗапросПоИмущественномуВычету.Выполнить().Выбрать();
	Если Выборка.Следующий() И Не ПустаяСтрока(Выборка.Представление) Тогда
		ИмущественныйВычет = Выборка.Представление;
		Если Выборка.Применяется Тогда
			ДанныеИмущественныйВычетУпр.Вставить("РасходыПриобретение", Выборка.СуммаРасходов);
			ДанныеИмущественныйВычетУпр.Вставить("ПроцентыПоКредиту", Выборка.ПроцентыПоКредиту);
			ДанныеИмущественныйВычетУпр.Вставить("КодИФНС", Выборка.КодИФНС);
			ДанныеИмущественныйВычетУпр.Вставить("НомерУведомления", Выборка.НомерУведомления);
			ДанныеИмущественныйВычетУпр.Вставить("ДатаУведомления", Выборка.ДатаУведомления);
			ДанныеИмущественныйВычетУпр.Сумма = Выборка.СуммаРасходов + Выборка.ПроцентыПоКредиту;
		КонецЕсли;
	Иначе
		ИмущественныйВычет = НадписьЗаполнитьИмущественныеВычетыСотрудника();
	КонецЕсли;
	Элементы.ИмущественныйВычет.Подсказка = ИмущественныйВычет;
	ДанныеВычетовНДФЛ.Вставить("ИмущественныйВычетУпр", ДанныеИмущественныйВычетУпр);
КонецПроцедуры

&НаСервере
Процедура ОпределитьСоциальныйВычет()

	Если Объект.Ссылка.Пустая() Тогда
		СоциальныйВычет = НадписьЗаполнитьСоциальныеВычетыСотрудника();
		Элементы.СоциальныйВычет.Подсказка = СоциальныйВычет;
		Возврат;
	КонецЕсли;
	ЗапросПоСоциальномуВычету = Новый Запрос;
	ЗапросПоСоциальномуВычету.Текст =
	"ВЫБРАТЬ
	|	НДФЛСоциальныеВычетыСрезПоследних.Представление КАК Представление,
	|	НДФЛСоциальныеВычетыСрезПоследних.СуммаРасходов КАК СуммаРасходов,
	|	ЕСТЬNULL(ВычетыНДФЛ.Код, """") КАК КодВычета,
	|	НДФЛСоциальныеВычетыСрезПоследних.НомерУведомления КАК НомерУведомления,
	|	НДФЛСоциальныеВычетыСрезПоследних.ДатаУведомления КАК ДатаУведомления,
	|	НДФЛСоциальныеВычетыСрезПоследних.КодИФНС КАК КодИФНС,
	|	НДФЛСоциальныеВычетыСрезПоследних.Применяется КАК Применяется
	|ИЗ
	|	РегистрСведений.НДФЛСоциальныеВычеты.СрезПоследних КАК НДФЛСоциальныеВычетыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|		ПО НДФЛСоциальныеВычетыСрезПоследних.КодВычета = ВычетыНДФЛ.Ссылка
	|ГДЕ
	|	НДФЛСоциальныеВычетыСрезПоследних.Сотрудник = &Сотрудник";
	ЗапросПоСоциальномуВычету.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	
	ДанныеСоциальныйВычетУпр = Новый Структура("Сумма", 0);
	Выборка = ЗапросПоСоциальномуВычету.Выполнить().Выбрать();
	Если Выборка.Следующий() И Не ПустаяСтрока(Выборка.Представление) Тогда
		СоциальныйВычет = Выборка.Представление;
		Если Выборка.Применяется Тогда
			ДанныеСоциальныйВычетУпр.Вставить("КодИФНС", Выборка.КодИФНС);
			ДанныеСоциальныйВычетУпр.Вставить("НомерУведомления", Выборка.НомерУведомления);
			ДанныеСоциальныйВычетУпр.Вставить("ДатаУведомления", Выборка.ДатаУведомления);
			
			КодВычета = СокрЛП(Выборка.КодВычета);
			Если КодВычета = "320" Тогда
				ДанныеСоциальныйВычетУпр.Вставить("ВидРасходов", "РасходыНаСвоеОбучение");
			ИначеЕсли КодВычета = "321" Тогда
				ДанныеСоциальныйВычетУпр.Вставить("ВидРасходов", "РасходыНаОбучениеДетей");
			ИначеЕсли КодВычета = "324" Тогда
				ДанныеСоциальныйВычетУпр.Вставить("ВидРасходов", "РасходыНаЛечение");
			ИначеЕсли КодВычета = "325" Тогда
				ДанныеСоциальныйВычетУпр.Вставить("ВидРасходов", "СтраховыеВзносыНаМедУслуги");
			ИначеЕсли КодВычета = "326" Тогда
				ДанныеСоциальныйВычетУпр.Вставить("ВидРасходов", "РасходыНаДорогостоящееЛечение");
			ИначеЕсли КодВычета = "329" Тогда
				ДанныеСоциальныйВычетУпр.Вставить("ВидРасходов", "ВзносыНаДобровольноеСтрахованиеЖизни");
			ИначеЕсли КодВычета = "323" Тогда
				ДанныеСоциальныйВычетУпр.Вставить("ВидРасходов", "РасходыНаЛекарства");
			ИначеЕсли КодВычета = "324" Тогда
				ДанныеСоциальныйВычетУпр.Вставить("ВидРасходов", "РасходыНаЛечение");
			ИначеЕсли КодВычета = "329" Тогда
				ДанныеСоциальныйВычетУпр.Вставить("ВидРасходов", "РасходыНаФизкультуруИСпорт");
			КонецЕсли;
			ДанныеСоциальныйВычетУпр.Сумма = Выборка.СуммаРасходов;
		КонецЕсли;
	Иначе
		СоциальныйВычет = НадписьЗаполнитьСоциальныеВычетыСотрудника();
	КонецЕсли;
	Элементы.СоциальныйВычет.Подсказка = СоциальныйВычет;
	ДанныеВычетовНДФЛ.Вставить("СоциальныйВычетУпр", ДанныеСоциальныйВычетУпр);

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияИмущественного(Результат, Параметры) Экспорт
	ОпределитьИмущественныйВычет();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияСоциального(Результат, Параметры) Экспорт
	ОпределитьСоциальныйВычет();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОпределитьЛичныйВычет()

	Если Объект.Ссылка.Пустая() Тогда
		СтандартныйЛичныйВычет = НадписьСтандартныеЛичныеВычетыСотрудника();
		Элементы.СтандартныйЛичныйВычет.Подсказка = СтандартныйЛичныйВычет;
		Возврат;
	КонецЕсли;
	ЗапросПоЛичномуВычету = Новый Запрос;
	ЗапросПоЛичномуВычету.Текст =
	"ВЫБРАТЬ
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.Представление КАК Представление,
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.Применяется КАК Применяется,
	|	ЕСТЬNULL(ВидыВычетовНДФЛ.Ссылка, ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)) КАК ВычетРегл,
	|	ЕСТЬNULL(РазмерВычетовНДФЛСрезПоследних.Размер, 0) КАК Сумма
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеЛичныеВычеты.СрезПоследних КАК НДФЛСтандартныеЛичныеВычетыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерВычетовНДФЛ.СрезПоследних КАК РазмерВычетовНДФЛСрезПоследних
	|				ПО ВидыВычетовНДФЛ.Ссылка = РазмерВычетовНДФЛСрезПоследних.КодВычета
	|			ПО ВычетыНДФЛ.Код = ВидыВычетовНДФЛ.Код
	|		ПО НДФЛСтандартныеЛичныеВычетыСрезПоследних.КодВычета = ВычетыНДФЛ.Ссылка
	|ГДЕ
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.Сотрудник = &Сотрудник";
	ЗапросПоЛичномуВычету.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	
	ДанныеЛичныйВычет = Новый Структура("Сумма", 0);
	Выборка = ЗапросПоЛичномуВычету.Выполнить().Выбрать();
	Если Выборка.Следующий() И Не ПустаяСтрока(Выборка.Представление) Тогда
		СтандартныйЛичныйВычет = Выборка.Представление;
		Если Выборка.Применяется Тогда
			ДанныеЛичныйВычет.Вставить("КодВычета", Выборка.ВычетРегл);
			ДанныеЛичныйВычет.Сумма = Выборка.Сумма;
		КонецЕсли;
	Иначе
		СтандартныйЛичныйВычет = НадписьСтандартныеЛичныеВычетыСотрудника();
	КонецЕсли;
	Элементы.СтандартныйЛичныйВычет.Подсказка = СтандартныйЛичныйВычет;
	ДанныеВычетовНДФЛ.Вставить("ЛичныйВычетУпр", ДанныеЛичныйВычет);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияЛичного(Результат, Параметры) Экспорт
	ОпределитьЛичныйВычет();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВычетаНаДетей(КоличествоДетей, СуммаВычета)
	
	ТекстВычета = "";
	Если КоличествоДетей > 0 Тогда
		ФормыЧислительного = НСтр("ru = ';%1 ребенок;;%1 ребенка;%1 детей;%1 ребенка'");
		ТекстКоличествоДетей = СтрокаСЧислом(ФормыЧислительного, КоличествоДетей, ВидЧисловогоЗначения.Количественное);
		
		ВычетовНаСумму = Формат(СуммаВычета, "ЧЦ=10; ЧДЦ=0; ЧРГ=' '; ЧН=0");
		
		ТекстВычета = СтрШаблон(НСтр("ru = '%1, вычетов на сумму %2 руб.'"), ТекстКоличествоДетей, ВычетовНаСумму);
	КонецЕсли;
	
	Возврат ТекстВычета;
КонецФункции

&НаСервере
Процедура ОпределитьВычетНаДетей()

	Если Объект.Ссылка.Пустая() Тогда
		ВычетыПоНДФЛНаДетей = НадписьДоступноПослеЗаписи();
		Элементы.ВычетыПоНДФЛНаДетей.Подсказка = ВычетыПоНДФЛНаДетей;
		Возврат;
	КонецЕсли;

	ЗапросПоВычетуНаДетей = Новый Запрос;
	ЗапросПоВычетуНаДетей.Текст =
	"ВЫБРАТЬ
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник КАК Сотрудник,
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета КАК КодВычетаУпр,
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.НомерСтрокиСРебенком КАК НомерСтрокиСРебенком,
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.ПериодЗавершения КАК ПериодЗавершения
	|ПОМЕСТИТЬ ВТДанныеВычетов
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеВычетыНаДетей.СрезПоследних КАК НДФЛСтандартныеВычетыНаДетейСрезПоследних
	|ГДЕ
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеВычетов.Сотрудник КАК Сотрудник,
	|	ВТДанныеВычетов.НомерСтрокиСРебенком КАК НомерСтрокиСРебенком,
	|	ВТДанныеВычетов.ПериодЗавершения КАК ПериодЗавершения,
	|	МАКСИМУМ(ВидыВычетовНДФЛ.Ссылка) КАК КодВычетаРегл
	|ИЗ
	|	ВТДанныеВычетов КАК ВТДанныеВычетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|			ПО (ВидыВычетовНДФЛ.Код = ВычетыНДФЛ.Код)
	|		ПО ВТДанныеВычетов.КодВычетаУпр = ВычетыНДФЛ.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеВычетов.Сотрудник,
	|	ВТДанныеВычетов.НомерСтрокиСРебенком,
	|	ВТДанныеВычетов.ПериодЗавершения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСРебенком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТДанныеВычетов.Сотрудник) КАК КоличествоДетей,
	|	СУММА(РазмерВычетов.Размер) КАК СуммаВычета
	|ИЗ
	|	ВТДанныеВычетов КАК ВТДанныеВычетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов.СрезПоследних КАК РазмерВычетов
	|		ПО ВТДанныеВычетов.КодВычетаУпр = РазмерВычетов.КодВычета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеВычетов.Сотрудник";
	ЗапросПоВычетуНаДетей.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	РезультатыЗапроса = ЗапросПоВычетуНаДетей.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	ДанныеВычетаНаДетей = Новый Структура("Сумма", 0);
	Если Выборка.Следующий() И Выборка.КоличествоДетей > 0 Тогда
		ВычетыПоНДФЛНаДетей = ТекстВычетаНаДетей(Выборка.КоличествоДетей, Выборка.СуммаВычета);
		ДанныеВычетаНаДетей.Сумма = Выборка.СуммаВычета;
		ДанныеВычетаНаДетей.Вставить("КоличествоДетей", Выборка.КоличествоДетей);
		ДанныеВычетаНаДетей.Вставить("КодыВычетов", Новый Массив);
		ВыборкаКодыВычетов = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
		Пока ВыборкаКодыВычетов.Следующий() Цикл
			СтрокаВычета = Новый Структура;
			СтрокаВычета.Вставить("КодВычета", ВыборкаКодыВычетов.КодВычетаРегл);
			СтрокаВычета.Вставить("ПериодЗавершения", ВыборкаКодыВычетов.ПериодЗавершения);
			ДанныеВычетаНаДетей.КодыВычетов.Добавить(СтрокаВычета);
		КонецЦикла;
	Иначе
		ВычетыПоНДФЛНаДетей = НадписьЗаполнитьВычетыНаДетей();
	КонецЕсли;
	Элементы.ВычетыПоНДФЛНаДетей.Подсказка = ВычетыПоНДФЛНаДетей;
	ДанныеВычетовНДФЛ.Вставить("ВычетНаДетейУпр", ДанныеВычетаНаДетей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияВычетаНаДетей(Результат, Параметры) Экспорт
	ОпределитьВычетНаДетей();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКадровыхДанных(Форма)

	КлючТекущиеКадровыеДанныеСотрудников = Форма.КлючТекущиеКадровыеДанныеСотрудников;
	ДинамическиеПараметры = Новый Массив;
	Если Не ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='не трудоустроен'"));
	ИначеЕсли ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения) Тогда
		ТекстУволенИДатаУвольнения = СтрШаблон(
			НСтр("ru='уволен. Дата увольнения %1'"), Формат(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
			"ДЛФ=DD;"));
		ДинамическиеПараметры.Добавить(ТекстУволенИДатаУвольнения);
	Иначе
		ТекстПринятНаРаботу = СтрШаблон(
			НСтр("ru='принят на работу %1'"), Формат(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема, "ДЛФ=DD;"));
		ТекстДолжность = СтрШаблон(НСтр("ru='должность %1'"), КлючТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность);
		ТекстОклад = СтрШаблон(НСтр("ru='оклад %1 %2'"), КлючТекущиеКадровыеДанныеСотрудников.ТекущаяТарифнаяСтавка,
			КлючТекущиеКадровыеДанныеСотрудников.ВалютаТарифнойСтавки);
		ДинамическиеПараметры.Добавить(ТекстПринятНаРаботу);
		ДинамическиеПараметры.Добавить(ТекстДолжность);
		ДинамическиеПараметры.Добавить(ТекстОклад);
	КонецЕсли;

	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаРабота", ДинамическиеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВычетов(НаДетей = "", Личный = "", Имущественный = "", Социальный = "")
	Результат = Новый Структура;
	Результат.Вставить("ВычетНаДетей", ?(ЗначениеЗаполнено(НаДетей), НаДетей, НСтр("ru = 'на детей'")));
	Результат.Вставить("ЛичныйВычет", ?(ЗначениеЗаполнено(Личный), Личный, НСтр("ru = 'личный'")));
	Результат.Вставить("ИмущественныйВычет", ?(ЗначениеЗаполнено(Имущественный), Имущественный, НСтр("ru = 'имущественные'")));
	Результат.Вставить("СоциальныйВычет", ?(ЗначениеЗаполнено(Социальный), Социальный, НСтр("ru = 'социальные'")));
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеВычетовДляЗаголовка(СтруктураВычетов, ТипВычетов, ТекстВычетовПолный)
	
	ТекстВычетовКраткий = ТекстВычетов();
	ВычетыКратко = Новый Массив;
	ВычетыПолностью = Новый Массив;
	Для Каждого Элемент Из ТекстВычетовКраткий Цикл
		ИмяСвойстваВычетов = Элемент.Ключ + ТипВычетов;
		Если НЕ СтруктураВычетов.Свойство(ИмяСвойстваВычетов) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураВычетов[ИмяСвойстваВычетов].Сумма > 0 Тогда
			ВычетыКратко.Добавить(Элемент.Значение);
			ВычетыПолностью.Добавить(ТекстВычетовПолный[Элемент.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	ТекстВычеты = "";
	Если ВычетыКратко.Количество() > 1 Тогда
		ПоследнийВычет = ВычетыКратко[ВычетыКратко.Количество() - 1];
		ВычетыКратко.Удалить(ВычетыКратко.Количество() - 1);
		ТекстВычеты = СтрШаблон(НСтр("ru = '%1 и %2'"), СтрСоединить(ВычетыКратко, ", "), ПоследнийВычет);
	ИначеЕсли ВычетыКратко.Количество() > 0 Тогда
		ТекстВычеты = ВычетыКратко[0];
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ВычетыКраткоТекст", ТекстВычеты);
	Результат.Вставить("ВычетыПолностью", ВычетыПолностью);
	Результат.Вставить("ВсегоВычетов", ВычетыПолностью.Количество());
	
	Возврат Результат;
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокВычетовНДФЛ(Форма)
	
	ПолныеЗаголовкиУпр = ТекстВычетов(Форма.ВычетыПоНДФЛНаДетей, Форма.СтандартныйЛичныйВычет,
							Форма.ИмущественныйВычет, Форма.СоциальныйВычет);
	ДанныеЗаголовкаУпр = ДанныеВычетовДляЗаголовка(Форма.ДанныеВычетовНДФЛ, "Упр", ПолныеЗаголовкиУпр);
	
	ПолныеЗаголовкиРегл = ТекстВычетов(Форма.СтандартныеВычетыРегл, Форма.СтандартныеВычетыРегл,
							Форма.СоциальныйВычетРегл, Форма.СоциальныйВычетРегл);
	ДанныеЗаголовкаРегл = ДанныеВычетовДляЗаголовка(Форма.ДанныеВычетовНДФЛ, "Регл", ПолныеЗаголовкиРегл);
	
	ТекстПустыеВычеты = НСтр("ru = 'отсутствуют'");
	СокращенныйТекст = ДанныеЗаголовкаУпр.ВсегоВычетов > 1 ИЛИ ДанныеЗаголовкаРегл.ВсегоВычетов > 1;
	
	ЕстьОтличияУпрРегл = Ложь;
	ТекстВычетыРегл = "";
	Если Форма.ЕстьВычетыРеглУчет Тогда
		Если Форма.ДанныеВычетовНДФЛ.ЛичныйВычетУпр.Сумма <> Форма.ДанныеВычетовНДФЛ.ЛичныйВычетРегл.Сумма
			ИЛИ Форма.ДанныеВычетовНДФЛ.ВычетНаДетейУпр.Сумма <> Форма.ДанныеВычетовНДФЛ.ВычетНаДетейРегл.Сумма
			ИЛИ Форма.ДанныеВычетовНДФЛ.ИмущественныйВычетУпр.Сумма <> Форма.ДанныеВычетовНДФЛ.ИмущественныйВычетРегл.Сумма
			ИЛИ Форма.ДанныеВычетовНДФЛ.СоциальныйВычетУпр.Сумма <> Форма.ДанныеВычетовНДФЛ.СоциальныйВычетРегл.Сумма Тогда
			ЕстьОтличияУпрРегл = Истина;
		КонецЕсли;
		
		Если СокращенныйТекст Тогда
			ТекстВычетыРегл = ДанныеЗаголовкаРегл.ВычетыКраткоТекст;
		ИначеЕсли ДанныеЗаголовкаРегл.ВсегоВычетов > 0 Тогда
			ТекстВычетыРегл = ДанныеЗаголовкаРегл.ВычетыПолностью[0];
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстВычетыРегл) Тогда
			ТекстВычетыРегл = ТекстПустыеВычеты;
		КонецЕсли;
	КонецЕсли;
	
	ТекстВычетыУпр = "";
	Если СокращенныйТекст Тогда
		ТекстВычетыУпр = ДанныеЗаголовкаУпр.ВычетыКраткоТекст;
	ИначеЕсли ДанныеЗаголовкаУпр.ВсегоВычетов > 0 Тогда
		ТекстВычетыУпр = ДанныеЗаголовкаУпр.ВычетыПолностью[0];
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВычетыУпр) Тогда
		ТекстВычетыУпр = ТекстПустыеВычеты;
	КонецЕсли;
	
	ДинамическиеПараметры = Новый Массив;
	Если ЕстьОтличияУпрРегл Тогда
		ДинамическиеПараметры.Добавить(СтрШаблон(НСтр("ru = 'Упр. учет: %1'"), ТекстВычетыУпр));
		ДинамическиеПараметры.Добавить(СтрШаблон(НСтр("ru = 'Регл. учет: %1'"), ТекстВычетыРегл));
	Иначе
		ДинамическиеПараметры.Добавить(ТекстВычетыУпр);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаВычетыНДФЛ", ДинамическиеПараметры);
КонецПроцедуры

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив из Строка - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)

	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;

	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов()

	ДанныеПоФизЛицуДоступныКРедактированию = ЗначениеЗаполнено(Объект.Физлицо) Или СоздатьФизЛицоАвтоматически;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НадписьСтандартныеЛичныеВычетыСотрудника()
	Возврат НСтр("ru = '<<Заполнить стандартные личные вычеты сотрудника>>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьДоступноПослеЗаписи()
	Возврат НСтр("ru = '<<Доступно после записи>>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьЗаполнитьВычетыНаДетей()
	Возврат НСтр("ru = '<<Заполнить вычеты на детей>>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьЗаполнитьИмущественныеВычетыСотрудника()
	Возврат НСтр("ru = '<<Заполнить имущественные вычеты сотрудника>>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьЗаполнитьСоциальныеВычетыСотрудника()
	Возврат НСтр("ru = '<<Заполнить социальные вычеты сотрудника>>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьЗаполнитьСтандартныеВычетыСотрудникаРегл()
	Возврат НСтр("ru = '<<Заполнить вычеты на детей или личный вычет>>'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьЗаполнитьИмущественныеСоциальныеВычетыСотрудникаРегл()
	Возврат НСтр("ru = '<<Заполнить имущественные или социальные вычеты>>'");
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьШтрихкодEAN13()
	Возврат РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13Сотрудник();
КонецФункции

&НаСервере
Функция ТабличныйДокументСШтрихКодом()

	Результат = Новый ТабличныйДокумент;

	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Ширина = 200;
	ПараметрыШтрихкода.Высота = 100;
	ПараметрыШтрихкода.УровеньКоррекцииQR = 0;
	ПараметрыШтрихкода.Штрихкод = Объект.ШтрихКод;
	ПараметрыШтрихкода.ТипКода = 99;
	ПараметрыШтрихкода.ОтображатьТекст = Истина;
	ПараметрыШтрихкода.РазмерШрифта = 11;
	ПараметрыШтрихкода.УголПоворота = 0;

	ИзображениеШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);

	МакетШК = Справочники.Сотрудники.ПолучитьМакет("ШтрихКодСотрудника");

	ОбластьМакета = МакетШК.ПолучитьОбласть("ОбластьСотрудник");
	ОбластьМакета.Параметры.Сотрудник = Объект.Наименование;
	Результат.Вывести(ОбластьМакета);

	ОбластьМакета = МакетШК.ПолучитьОбласть("ОбластьКартинка");
	НовыйРисунок = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	НовыйРисунок.Картинка = ИзображениеШтрихкода.Картинка;
	НовыйРисунок.Верх = 3;
	НовыйРисунок.Лево = 20;
	НовыйРисунок.Ширина = 60;
	НовыйРисунок.Высота = 30;
	Результат.Вывести(ОбластьМакета);

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбновитьЗаголовокСвернутойГруппыИдентификаторы()
	
	СтрокаШтрихкод = "";
	Если ЗначениеЗаполнено(Объект.ШтрихКод) Тогда
		СтрокаШтрихкод = СтрШаблон(НСтр("ru='Штрихкод: %1'"), Объект.ШтрихКод);
	КонецЕсли;
	
	СтрокаМагнитныйКод = "";
	Если ЗначениеЗаполнено(Объект.МагнитныйКод) Тогда
		СтрокаМагнитныйКод = СтрШаблон(НСтр("ru='Номер карты: %1'"), Объект.МагнитныйКод);
	КонецЕсли;
	
	МассивКодов = Новый Массив;
	
	Если ЗначениеЗаполнено(СтрокаШтрихкод) Тогда
		
		МассивКодов.Добавить(СтрокаШтрихкод);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаМагнитныйКод) Тогда
		
		МассивКодов.Добавить(СтрокаМагнитныйКод);
		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СтрокаШтрихкод) И НЕ ЗначениеЗаполнено(СтрокаМагнитныйКод) Тогда
		
		СтрокаЗаголовокГруппы = НСтр("ru='Штрихкод и номер карты'");
		
	Иначе
		
		СтрокаЗаголовокГруппы = СтрСоединить(МассивКодов, " • ");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НастройкиИдентификаторов", 
		"ЗаголовокСвернутогоОтображения", СтрокаЗаголовокГруппы);
	
КонецПроцедуры

#Область ДокументыФизическогоЛица

&НаКлиенте
Процедура НачатьРедактированиеДокументовФизическогоЛица()
	
	Продолжение = Новый ОписаниеОповещения("РедактироватьДокументыФизическогоЛица", ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗадатьВопросПередРедактированиемДокументовФизическогоЛица(Продолжение);
	Иначе
		ВыполнитьОбработкуОповещения(Продолжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПередРедактированиемДокументовФизическогоЛица(Продолжение)
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Записать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Отмена'"));
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаПередРедактированиемДокументовФизическогоЛица", ЭтотОбъект, Продолжение);
	
	ТекстВопроса = НСтр("ru='Переход к заполнению сведений документов возможен только после записи.
		|Записать?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПередРедактированиемДокументовФизическогоЛица(Результат, Продолжение) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	ВыполнитьОбработкуОповещения(Продолжение);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДокументыФизическогоЛица(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещениеЗаполненияДокументаФизическогоЛица", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФизЛицо", Объект.Физлицо);
	ОткрытьФорму("РегистрСведений.ДокументыФизическихЛиц.Форма.ФормаЗаполненияСведений", ПараметрыФормы,,,,, ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАктуальныйДокументФизическогоЛица()
	
	Документ = РегистрыСведений.ДокументыФизическихЛиц.ПолучитьПредставлениеДокументаПоФизЛицу(Объект.Физлицо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияДокументаФизическогоЛица(Результат, Параметры) Экспорт
	
	ПолучитьАктуальныйДокументФизическогоЛица();
	
КонецПроцедуры

#КонецОбласти

#Область БанковскийСчетПоУмолчанию

&НаСервере
Процедура ПрочитатьБанковскийСчетПоУмолчанию(БанковскийСчетПоУмолчанию)
	
	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");
	
	Если ЗначениеЗаполнено(БанковскийСчетПоУмолчанию) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчетПоУмолчанию, "Банк, НомерСчета");
		ОсновнойСчет_Банк = ЗначенияРеквизитов.Банк;
		ОсновнойСчет_Номер = ЗначенияРеквизитов.НомерСчета;
		ЯвляетсяБанкомРФ = ЯвляетсяБанкомРФ(ОсновнойСчет_Банк);
		ИзменилиБанковскийСчет = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетПоУмолчанию(ФизЛицо)

	Если Не ЗначениеЗаполнено(ОсновнойСчет_Банк) Или ПустаяСтрока(ОсновнойСчет_Номер)
		Или Не ДанныеПоФизЛицуДоступныКРедактированию Тогда

		Возврат;
	КонецЕсли;

	Если ТипЗнч(ОсновнойСчет_Банк) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ОсновнойСчет_Банк = БанкиУНФ.БанкИзКлассификатора(ОсновнойСчет_Банк);
	КонецЕсли;

	Если ФизЛицо.ЭтоНовый() Тогда
	// Если сотрудник новый, банковский счет надо создавать новый
		НадоСоздаватьНовый = Истина;
	Иначе
	// Для существующего сотрудника, надо проверять наличие банковского счета с такими же ключевыми полями

		Запрос = Новый Запрос;
		Запрос.Текст = "
					   |ВЫБРАТЬ ПЕРВЫЕ 1
					   |	БанковскиеСчета.Ссылка
					   |ИЗ
					   |	Справочник.БанковскиеСчета КАК БанковскиеСчета
					   |ГДЕ
					   |	БанковскиеСчета.Владелец = &Владелец
					   |	И БанковскиеСчета.Банк = &Банк
					   |	И БанковскиеСчета.НомерСчета = &НомерСчета";

		Запрос.УстановитьПараметр("Владелец", Физлицо.Ссылка);
		Запрос.УстановитьПараметр("Банк", ОсновнойСчет_Банк);
		Запрос.УстановитьПараметр("НомерСчета", ОсновнойСчет_Номер);

		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);

		Если РезультатЗапроса.Пустой() Тогда
			// Нет банковского счета с такими ключевыми полями
			Если ЗначениеЗаполнено(Физлицо.БанковскийСчетПоУмолчанию) Тогда
				// Модифицируется существующий основной счет
				НадоСоздаватьНовый = Ложь;
			Иначе
				// Создается новый
				НадоСоздаватьНовый = Истина;
			КонецЕсли;
		Иначе
			// Банковский счет есть, устанавливаем его в качестве основного
			НадоСоздаватьНовый = Ложь;
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Физлицо.БанковскийСчетПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НадоСоздаватьНовый Тогда
		Физлицо.БанковскийСчетПоУмолчанию = Справочники.БанковскиеСчета.ПолучитьСсылку();
		ИзменилиБанковскийСчет = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьБанковскийСчетПоУмолчанию(Физлицо)

	Если Не ЗначениеЗаполнено(ОсновнойСчет_Банк) Или ПустаяСтрока(ОсновнойСчет_Номер)
		Или Не ДанныеПоФизЛицуДоступныКРедактированию Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	БанковскийСчетОбъект = Физлицо.БанковскийСчетПоУмолчанию.ПолучитьОбъект();

	Если БанковскийСчетОбъект = Неопределено Тогда
		
		// Создание
		БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		БанковскийСчетОбъект.УстановитьСсылкуНового(Физлицо.БанковскийСчетПоУмолчанию);
		БанковскийСчетОбъект.Заполнить(Физлицо.Ссылка);

	Иначе

		БанковскийСчетОбъект.Заблокировать();

	КонецЕсли;
	
	// Внесение изменений
	БанковскийСчетОбъект.Банк = ОсновнойСчет_Банк;
	БанковскийСчетОбъект.НомерСчета = ОсновнойСчет_Номер;
	БанковскийСчетОбъект.СформироватьНаименование();
	
	// Запись объекта
	БанковскийСчетОбъект.Записать();

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЯвляетсяБанкомРФ(Банк)
	
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Страна = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Страна");
	Возврат (Страна = Справочники.СтраныМира.Россия);
	
КонецФункции

&НаКлиенте
Процедура УстановитьМаскуНомераСчета()

	Если ЯвляетсяБанкомРФ Тогда
		Элементы.НомерСчета.Маска = "99999999999999999999";
	Иначе
		Элементы.НомерСчета.Маска = "";
		Элементы.НомерСчета.Подсказка = "";
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область НДФЛРеглУчет

&НаСервере
Процедура ОтобразитьИзменениеВычетовНДФЛ()
	ДанныеВычетовНДФЛ = Новый Структура;
	
	Если НЕ Элементы.ГруппаВычетыНДФЛ.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВычетовНДФЛ.Вставить("ТекущийМесяц", НачалоМесяца(ТекущаяДатаСеанса()));
	ОпределитьИмущественныйВычет();
	ОпределитьСоциальныйВычет();
	ОпределитьЛичныйВычет();
	ОпределитьВычетНаДетей();
		
	ЕстьВычетыРеглУчет = (Объект.ГоловнаяОрганизация.ИспользуетсяОтчетность = Истина
						И ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность")							
						И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыДляНебольшихОрганизаций"));
								
	Элементы.ГруппаВычетыРеглУчет.Видимость = ЕстьВычетыРеглУчет;
	Элементы.ДекорацияВычетыУпрУчет.Видимость = ЕстьВычетыРеглУчет;
	ПрочитатьСведенияОВычетахНДФЛРегл();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСведенияОВычетахНДФЛРегл()
	Если ЕстьВычетыРеглУчет Тогда
		ОпределитьСтандартныеВычетыРегл();
		ОпределитьИмущественныйВычетРегл();	
		ОпределитьДоходыПредыдущееМестоРаботыРегл();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОпределитьСтандартныеВычетыРегл()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации
	               |ПОМЕСТИТЬ ВТПоследниеМесяцы
	               |ИЗ
	               |	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	               |ГДЕ
	               |	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
	               |	И СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации <= &ТекущийМесяц
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	СУММА(СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей) КАК КоличествоДетей,
	               |	СтандартныеВычетыНаДетейНДФЛ.Регистратор КАК Регистратор,
	               |	СтандартныеВычетыНаДетейНДФЛ.КодВычета КАК КодВычета,
	               |	ИСТИНА КАК НаДетей,
	               |	"""" КАК НаименованиеВычета
	               |ПОМЕСТИТЬ ВТТекущиеВычеты
	               |ИЗ
	               |	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеМесяцы КАК ВТПоследниеМесяцы
	               |		ПО СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = ВТПоследниеМесяцы.ФизическоеЛицо
	               |			И СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации = ВТПоследниеМесяцы.МесяцРегистрации
	               |ГДЕ
	               |	СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации <= &ТекущийМесяц
	               |	И СтандартныеВычетыНаДетейНДФЛ.ДействуетДо > &ТекущийМесяц
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо,
	               |	СтандартныеВычетыНаДетейНДФЛ.Регистратор,
	               |	СтандартныеВычетыНаДетейНДФЛ.КодВычета
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.ФизическоеЛицо,
	               |	0,
	               |	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.Регистратор,
	               |	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.КодВычетаЛичный,
	               |	ЛОЖЬ,
	               |	ВЫРАЗИТЬ(ВидыВычетовНДФЛ.ПолноеНаименование КАК СТРОКА(500))
	               |ИЗ
	               |	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ.СрезПоследних(, ФизическоеЛицо = &ФизическоеЛицо) КАК СтандартныеВычетыФизическихЛицНДФЛСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	               |		ПО СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.КодВычетаЛичный = ВидыВычетовНДФЛ.Ссылка
	               |ГДЕ
	               |	НЕ ВидыВычетовНДФЛ.Код ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТекущиеВычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	СУММА(ВТТекущиеВычеты.КоличествоДетей) КАК КоличествоДетей,
	               |	СУММА(ЕСТЬNULL(РазмерВычетов.Размер, 0)) КАК СуммаВычета,
	               |	ВТТекущиеВычеты.Регистратор КАК Заявление,
	               |	ВТТекущиеВычеты.НаДетей КАК НаДетей,
	               |	МАКСИМУМ(ВТТекущиеВычеты.НаименованиеВычета) КАК НаименованиеВычета
	               |ИЗ
	               |	РегистрСведений.ПрименениеСтандартныхВычетовПоНДФЛ.СрезПоследних КАК ПрименениеСтандартныхВычетовПоНДФЛСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущиеВычеты КАК ВТТекущиеВычеты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерВычетовНДФЛ.СрезПоследних КАК РазмерВычетов
	               |			ПО ВТТекущиеВычеты.КодВычета = РазмерВычетов.КодВычета
	               |		ПО (ВТТекущиеВычеты.ФизическоеЛицо = ПрименениеСтандартныхВычетовПоНДФЛСрезПоследних.ФизическоеЛицо)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТТекущиеВычеты.ФизическоеЛицо,
	               |	ВТТекущиеВычеты.Регистратор,
	               |	ВТТекущиеВычеты.НаДетей
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НаДетей";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.Физлицо);
	Запрос.УстановитьПараметр("ТекущийМесяц", ТекущаяДатаСеанса());
	
	СтандартныеВычетыДокумент = Неопределено;
	ДанныеВычетНаДетей = Новый Структура("Сумма", 0);
	ДанныеЛичныйВычет = Новый Структура("Сумма", 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтандартныеВычетыДокумент = Выборка.Заявление;
		Если Выборка.НаДетей Тогда
			ДанныеВычетНаДетей.Вставить("КоличествоДетей", Выборка.КоличествоДетей);
			ДанныеВычетНаДетей.Сумма = Выборка.СуммаВычета;
		Иначе
			ДанныеЛичныйВычет.Вставить("НаименованиеВычета", Выборка.НаименованиеВычета);
			ДанныеЛичныйВычет.Сумма = Выборка.СуммаВычета;
		КонецЕсли;
	КонецЦикла;
	ДанныеВычетовНДФЛ.Вставить("ЛичныйВычетРегл", ДанныеЛичныйВычет);
	ДанныеВычетовНДФЛ.Вставить("ВычетНаДетейРегл", ДанныеВычетНаДетей);
	
	ТекстВычеты = "";
	Если ДанныеВычетНаДетей.Сумма > 0 Тогда
		ТекстВычеты = ТекстВычетаНаДетей(ДанныеВычетНаДетей.КоличествоДетей, ДанныеВычетНаДетей.Сумма);
	КонецЕсли;
	Если ДанныеЛичныйВычет.Сумма > 0 Тогда
		ТекстЛичныйВычет = СтрШаблон(НСтр("ru = 'Личный вычет %1 руб.'"), ДанныеЛичныйВычет.Сумма);
		Если ЗначениеЗаполнено(ТекстВычеты) Тогда
			ТекстВычеты = СтрШаблон("%1, %2", ТекстВычеты, СтрШаблон(НСтр("ru = 'личный вычет %1 руб.'"), ДанныеЛичныйВычет.Сумма));
		Иначе
			ТекстВычеты = ДанныеЛичныйВычет.НаименованиеВычета;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВычеты) Тогда
		СтандартныеВычетыРегл = НадписьЗаполнитьСтандартныеВычетыСотрудникаРегл();
		Элементы.ГруппаУправлениеСтандартнымиВычетамиРегл.Видимость = Ложь;
	Иначе
		СтандартныеВычетыРегл = ТекстВычеты;
		Элементы.ГруппаУправлениеСтандартнымиВычетамиРегл.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОпределитьИмущественныйВычетРегл()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИмущественныеВычетыНДФЛ.Регистратор КАК Регистратор,
	               |	ИмущественныеВычетыНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ИмущественныеВычетыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ИмущественныеВычетыНДФЛ.КодВычета КАК КодВычета,
	               |	ИмущественныеВычетыНДФЛ.Сумма КАК Сумма,
	               |	ИмущественныеВычетыНДФЛ.Год КАК Год,
	               |	ИмущественныеВычетыНДФЛ.МесяцРегистрации КАК МесяцРегистрации
	               |ПОМЕСТИТЬ ВТДанныеВычетов
	               |ИЗ
	               |	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	               |ГДЕ
	               |	ИмущественныеВычетыНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	               |	И ИмущественныеВычетыНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
	               |	И ИмущественныеВычетыНДФЛ.Регистратор ССЫЛКА Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВТДанныеВычетов.КодВычета КАК КодВычета,
	               |	МАКСИМУМ(ВТДанныеВычетов.МесяцРегистрации) КАК МесяцРегистрации
	               |ПОМЕСТИТЬ ВТПоследниеПериодыВычетов
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.КодВычета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор КАК УведомлениеОПравеНаВычет,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год КАК НалоговыйПериод,
	               |	ВТДанныеВычетов.Сумма КАК РасходыНаСтроительствоПриобретение,
	               |	0 КАК ПроцентыПоКредитам,
	               |	0 КАК ПроцентыПриПерекредитовании,
	               |	0 КАК РасходыНаСвоеОбучение,
	               |	0 КАК РасходыНаОбучениеДетей,
	               |	0 КАК РасходыНаЛечение,
	               |	0 КАК СтраховыеВзносыНаМедУслуги,
	               |	0 КАК РасходыНаДорогостоящееЛечение,
	               |	0 КАК ВзносыНаДобровольноеСтрахованиеЖизни,
	               |	0 КАК РасходыНаЛекарства,
	               |	0 КАК РасходыНаФизкультуруИСпорт
	               |ПОМЕСТИТЬ ВТВычетыПоВидам
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код311))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	ВТДанныеВычетов.Сумма,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код312))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	0,
	               |	ВТДанныеВычетов.Сумма,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код318))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	0,
	               |	0,
	               |	ВТДанныеВычетов.Сумма,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код320о))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ВТДанныеВычетов.Сумма,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код321))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ВТДанныеВычетов.Сумма,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код324))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ВТДанныеВычетов.Сумма,
	               |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код325))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ВТДанныеВычетов.Сумма,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код326))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ВТДанныеВычетов.Сумма,
	               |	0,
	               |	0
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код329))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ВТДанныеВычетов.Сумма,
	               |	0
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код323))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТДанныеВычетов.Регистратор,
	               |	ВТДанныеВычетов.ГоловнаяОрганизация,
	               |	ВТДанныеВычетов.ФизическоеЛицо,
	               |	ВТДанныеВычетов.Год,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	ВТДанныеВычетов.Сумма
	               |ИЗ
	               |	ВТДанныеВычетов КАК ВТДанныеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеПериодыВычетов КАК ВТПоследниеПериодыВычетов
	               |		ПО ВТДанныеВычетов.ГоловнаяОрганизация = ВТПоследниеПериодыВычетов.ГоловнаяОрганизация
	               |			И ВТДанныеВычетов.ФизическоеЛицо = ВТПоследниеПериодыВычетов.ФизическоеЛицо
	               |			И ВТДанныеВычетов.КодВычета = ВТПоследниеПериодыВычетов.КодВычета
	               |			И ВТДанныеВычетов.МесяцРегистрации = ВТПоследниеПериодыВычетов.МесяцРегистрации
	               |			И (ВТДанныеВычетов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код329Спорт))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ВТВычетыПоВидам.УведомлениеОПравеНаВычет) КАК УведомлениеОПравеНаВычет,
	               |	ВТВычетыПоВидам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ВТВычетыПоВидам.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВТВычетыПоВидам.НалоговыйПериод КАК НалоговыйПериод,
	               |	СУММА(ВТВычетыПоВидам.РасходыНаСтроительствоПриобретение) КАК РасходыНаСтроительствоПриобретение,
	               |	СУММА(ВТВычетыПоВидам.ПроцентыПоКредитам) КАК ПроцентыПоКредитам,
	               |	СУММА(ВТВычетыПоВидам.ПроцентыПриПерекредитовании) КАК ПроцентыПриПерекредитовании,
	               |	СУММА(ВТВычетыПоВидам.РасходыНаСвоеОбучение) КАК РасходыНаСвоеОбучение,
	               |	СУММА(ВТВычетыПоВидам.РасходыНаОбучениеДетей) КАК РасходыНаОбучениеДетей,
	               |	СУММА(ВТВычетыПоВидам.РасходыНаЛечение) КАК РасходыНаЛечение,
	               |	СУММА(ВТВычетыПоВидам.СтраховыеВзносыНаМедУслуги) КАК СтраховыеВзносыНаМедУслуги,
	               |	СУММА(ВТВычетыПоВидам.РасходыНаДорогостоящееЛечение) КАК РасходыНаДорогостоящееЛечение,
	               |	СУММА(ВТВычетыПоВидам.ВзносыНаДобровольноеСтрахованиеЖизни) КАК ВзносыНаДобровольноеСтрахованиеЖизни,
	               |	СУММА(ВТВычетыПоВидам.РасходыНаЛекарства) КАК РасходыНаЛекарства,
	               |	СУММА(ВТВычетыПоВидам.РасходыНаФизкультуруИСпорт) КАК РасходыНаФизкультуруИСпорт
	               |ИЗ
	               |	ВТВычетыПоВидам КАК ВТВычетыПоВидам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТВычетыПоВидам.ГоловнаяОрганизация,
	               |	ВТВычетыПоВидам.ФизическоеЛицо,
	               |	ВТВычетыПоВидам.НалоговыйПериод";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.Физлицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Объект.ГоловнаяОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеСоциальныйВычет = Новый Структура("Сумма", 0);
	ДанныеИмущественныйВычет = Новый Структура("Сумма", 0);
	
	ОбщаяСумма = 0;
	НалоговыйПериод = "";
	СоставляющиеВычетов = Новый Массив;
	Если Выборка.Следующий() Тогда
		УведомлениеОВычетахДокумент = Выборка.УведомлениеОПравеНаВычет;
		НалоговыйПериод = Формат(Выборка.НалоговыйПериод, "ЧГ=0");
		ОбщаяСумма = Выборка.РасходыНаСтроительствоПриобретение
					+ Выборка.ПроцентыПоКредитам
					+ Выборка.ПроцентыПриПерекредитовании
					+ Выборка.РасходыНаСвоеОбучение
					+ Выборка.РасходыНаОбучениеДетей
					+ Выборка.СтраховыеВзносыНаМедУслуги
					+ Выборка.РасходыНаЛечение
					+ Выборка.РасходыНаДорогостоящееЛечение
					+ Выборка.ВзносыНаДобровольноеСтрахованиеЖизни
					+ Выборка.РасходыНаЛекарства
					+ Выборка.РасходыНаФизкультуруИСпорт;
					
		Если Выборка.РасходыНаСтроительствоПриобретение > 0 Тогда
			СоставляющиеВычетов.Добавить(СтрШаблон(НСтр("ru = 'жилье - %1'"), Выборка.РасходыНаСтроительствоПриобретение));
			ДанныеИмущественныйВычет.Вставить("РасходыПриобретение", Выборка.РасходыНаСтроительствоПриобретение);
			ДанныеИмущественныйВычет.Сумма = ДанныеИмущественныйВычет.Сумма + ДанныеИмущественныйВычет.РасходыПриобретение;
		КонецЕсли;
		
		Если Выборка.ПроцентыПоКредитам + Выборка.ПроцентыПриПерекредитовании > 0 Тогда
			СоставляющиеВычетов.Добавить(СтрШаблон(НСтр("ru = 'проценты по кредитам - %1'"), Выборка.ПроцентыПоКредитам + Выборка.ПроцентыПриПерекредитовании));
			ДанныеИмущественныйВычет.Вставить("ПроцентыПоКредиту", Выборка.ПроцентыПоКредитам + Выборка.ПроцентыПриПерекредитовании);
			ДанныеИмущественныйВычет.Сумма = ДанныеИмущественныйВычет.Сумма + ДанныеИмущественныйВычет.ПроцентыПоКредиту;
		КонецЕсли;
		
		Если Выборка.РасходыНаСвоеОбучение + Выборка.РасходыНаОбучениеДетей > 0 Тогда
			СоставляющиеВычетов.Добавить(СтрШаблон(НСтр("ru = 'обучение - %1'"), Выборка.РасходыНаСвоеОбучение + Выборка.РасходыНаОбучениеДетей));
			ДанныеСоциальныйВычет.Сумма = Выборка.РасходыНаСвоеОбучение + Выборка.РасходыНаОбучениеДетей;
		КонецЕсли;		
		
		Если Выборка.СтраховыеВзносыНаМедУслуги > 0 Тогда
			СоставляющиеВычетов.Добавить(СтрШаблон(НСтр("ru = 'страховые взносы на мед. услуги - %1'"), Выборка.СтраховыеВзносыНаМедУслуги));
			ДанныеСоциальныйВычет.Сумма = Выборка.СтраховыеВзносыНаМедУслуги;
		КонецЕсли;
		
		Если Выборка.РасходыНаЛечение + Выборка.РасходыНаДорогостоящееЛечение > 0 Тогда
			СоставляющиеВычетов.Добавить(СтрШаблон(НСтр("ru = 'лечение - %1'"), Выборка.РасходыНаЛечение + Выборка.РасходыНаДорогостоящееЛечение));
			ДанныеСоциальныйВычет.Сумма = Выборка.РасходыНаЛечение + Выборка.РасходыНаДорогостоящееЛечение;
		КонецЕсли;
		
		Если Выборка.ВзносыНаДобровольноеСтрахованиеЖизни > 0 Тогда
			СоставляющиеВычетов.Добавить(СтрШаблон(НСтр("ru = 'взносы на страхование жизни - %1'"), Выборка.ВзносыНаДобровольноеСтрахованиеЖизни));
			ДанныеСоциальныйВычет.Сумма = Выборка.ВзносыНаДобровольноеСтрахованиеЖизни;
		КонецЕсли;
		
		Если Выборка.РасходыНаЛекарства > 0 Тогда
			СоставляющиеВычетов.Добавить(СтрШаблон(НСтр("ru = 'лекарства - %1'"), Выборка.РасходыНаЛекарства));
			ДанныеСоциальныйВычет.Сумма = Выборка.РасходыНаЛекарства;
		КонецЕсли;
		
		Если Выборка.РасходыНаФизкультуруИСпорт > 0 Тогда
			СоставляющиеВычетов.Добавить(СтрШаблон(НСтр("ru = 'физкультуру и спорт - %1'"), Выборка.РасходыНаФизкультуруИСпорт));
			ДанныеСоциальныйВычет.Сумма = Выборка.РасходыНаФизкультуруИСпорт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщаяСумма > 0 Тогда
		Если СоставляющиеВычетов.Количество() > 1 Тогда
			СоциальныйВычетРегл = СтрШаблон(НСтр("ru = 'На %1 год за расходы на %3 и др.'"),
											НалоговыйПериод,
											ОбщаяСумма,
											СоставляющиеВычетов[0]);
		Иначе
			СоциальныйВычетРегл = СтрШаблон(НСтр("ru = 'На %1 год за расходы на %2'"), НалоговыйПериод, СтрСоединить(СоставляющиеВычетов, "," + Символы.ПС));
		КонецЕсли;
	Иначе
		СоциальныйВычетРегл = НадписьЗаполнитьИмущественныеСоциальныеВычетыСотрудникаРегл();
	КонецЕсли;
	ДанныеВычетовНДФЛ.Вставить("ИмущественныйВычетРегл", ДанныеИмущественныйВычет);
	ДанныеВычетовНДФЛ.Вставить("СоциальныйВычетРегл", ДанныеСоциальныйВычет);
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоходыПредыдущееМестоРаботыРегл()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ДоходыПредыдущегоМестаРаботыНДФЛ.МесяцНалоговогоПериода) КАК МесяцНалоговогоПериода,
	               |	ДоходыПредыдущегоМестаРаботыНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ДоходыПредыдущегоМестаРаботыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТДоходыПредыдущееМестоРаботыПоследнийМесяц
	               |ИЗ
	               |	РегистрСведений.ДоходыПредыдущегоМестаРаботыНДФЛ КАК ДоходыПредыдущегоМестаРаботыНДФЛ
	               |ГДЕ
	               |	ДоходыПредыдущегоМестаРаботыНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	               |	И ДоходыПредыдущегоМестаРаботыНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоходыПредыдущегоМестаРаботыНДФЛ.ГоловнаяОрганизация,
	               |	ДоходыПредыдущегоМестаРаботыНДФЛ.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоходыПредыдущегоМестаРаботыНДФЛ.Размер КАК Размер,
	               |	ВТДоходыПредыдущееМестоРаботыПоследнийМесяц.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	               |ИЗ
	               |	ВТДоходыПредыдущееМестоРаботыПоследнийМесяц КАК ВТДоходыПредыдущееМестоРаботыПоследнийМесяц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоходыПредыдущегоМестаРаботыНДФЛ КАК ДоходыПредыдущегоМестаРаботыНДФЛ
	               |		ПО ВТДоходыПредыдущееМестоРаботыПоследнийМесяц.МесяцНалоговогоПериода = ДоходыПредыдущегоМестаРаботыНДФЛ.МесяцНалоговогоПериода
	               |			И ВТДоходыПредыдущееМестоРаботыПоследнийМесяц.ГоловнаяОрганизация = ДоходыПредыдущегоМестаРаботыНДФЛ.ГоловнаяОрганизация
	               |			И ВТДоходыПредыдущееМестоРаботыПоследнийМесяц.ФизическоеЛицо = ДоходыПредыдущегоМестаРаботыНДФЛ.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Объект.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДоходыПредыдущееМестоРаботы = СтрШаблон(НСтр("ru = 'Доходы с предыдущего места работы: %1 руб.'"), Выборка.Размер);
	Иначе
		ДоходыПредыдущееМестоРаботы = "<<Заполнить доходы с предыдущего места работы>>";
	КонецЕсли;
	Элементы.ДоходыПредыдущееМестоРаботы.Подсказка = ДоходыПредыдущееМестоРаботы;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияВычетовНаДетейРегл(РезультатЗаполнения, ДополнительныеПараметры) Экспорт
	ОпределитьСтандартныеВычетыРегл();
	УстановитьЗаголовокВычетовНДФЛ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияИмущественныхВычетовРегл(РезультатЗаполнения, ДополнительныеПараметры) Экспорт
	ОпределитьИмущественныйВычетРегл();
	УстановитьЗаголовокВычетовНДФЛ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияДоходыСПредыдущегоМестаРаботыРегл(РезультатЗаполнения, ДополнительныеПараметры) Экспорт
	ОпределитьДоходыПредыдущееМестоРаботыРегл();
	УстановитьЗаголовокВычетовНДФЛ(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗакрытиеПрекращениеСтандартныхВычетовРегл(РезультатЗаполнения, ДополнительныеПараметры) Экспорт
	ОпределитьСтандартныеВычетыРегл();
	УстановитьЗаголовокВычетовНДФЛ(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)

	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры
&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ПодключаемоеОборудование

&НаКлиенте
Процедура ОбработатьПодключениеОборудованияПриОткрытии()
	
	ПоддерживаемыеТипыОборудования = Новый Массив();
	ПоддерживаемыеТипыОборудования.Добавить("СчитывательМагнитныхКарт");
	ПоддерживаемыеТипыОборудования.Добавить("СканерШтрихкода");
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект); 
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, ПоддерживаемыеТипыОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеКода(Знач Код, Знач ТипКода)
	
	Код = СокрЛП(Код);
	Если ЗначениеЗаполнено(Код) Тогда
		Объект[ТипКода] = Код;
		ОбновитьЗаголовокСвернутойГруппыИдентификаторы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеОповещенияПодключаемогоОборудования(ИмяСобытия, Параметр)
	
	Если Параметр.Количество() > 0 Тогда
		
		Если ИмяСобытия = "TracksData" Тогда
			
			ОбработатьПолучениеКода(Параметр[0], "МагнитныйКод");
			
		ИначеЕсли ИмяСобытия = "ScanData" Тогда
			
			ОбработатьПолучениеКода(Параметр[0], "Штрихкод");
			
		ИначеЕсли ИмяСобытия = "ScanDataBase64" Тогда
			
			СимволыШтрихкодBase64 = Base64Значение(Параметр[0]);
			ОбработатьПолучениеКода(СимволыШтрихкодBase64, "Штрихкод");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
