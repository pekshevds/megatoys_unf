
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";

КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Процедура для перехода на новый механизм сопоставления номенклатуры БЭД, 
// переносить данные из Справочник.Номенклатура поставщика в РегистрыСведений.НоменклатураКонтрагентовБЭД.
Процедура ПеренестиНоменклатуруПоставщиковВРегистрБЭД(Параметры) Экспорт
	
	Пока Истина Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	НоменклатураПоставщиков.Владелец КАК Владелец,
		|	МАКСИМУМ(НоменклатураПоставщиков.Номенклатура) КАК Номенклатура,
		|	МАКСИМУМ(НоменклатураПоставщиков.Характеристика) КАК Характеристика,
		|	МАКСИМУМ(НоменклатураПоставщиков.Артикул) КАК Артикул,
		|	НоменклатураПоставщиков.Идентификатор КАК Идентификатор,
		|	МАКСИМУМ(НоменклатураКонтрагентовБЭД.Номенклатура) КАК СопоставленнаяНоменклатура,
		|	МАКСИМУМ(НоменклатураПоставщиков.Наименование) КАК Наименование
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
		|		ПО НоменклатураПоставщиков.Владелец = НоменклатураКонтрагентовБЭД.Владелец
		|			И НоменклатураПоставщиков.Идентификатор = НоменклатураКонтрагентовБЭД.Идентификатор
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И НоменклатураПоставщиков.Идентификатор <> """"
		|	И НоменклатураКонтрагентовБЭД.Номенклатура ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоставщиков.Идентификатор,
		|	НоменклатураПоставщиков.Владелец
		|ИТОГИ ПО
		|	Владелец";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		ВыборкаПоВладельцу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоВладельцу.Следующий() Цикл
			Набор = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьНаборЗаписей();
			Набор.Отбор.Владелец.Установить(ВыборкаПоВладельцу.Владелец);
			Набор.Прочитать();
			Выборка = ВыборкаПоВладельцу.Выбрать();
			Пока Выборка.Следующий() Цикл
				Запись = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
		КонецЦикла;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
		
КонецПроцедуры

// Поля загрузки данных из внешнего источника.
// 
// Параметры:
//  ТаблицаПолейЗагрузки - см. ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьТаблицуПолейОписанияЗагрузки
//  НастройкиЗагрузкиДанных - см. ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере
//
Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт

	ОписанияТиповПолей = ЗагрузкаДанныхИзВнешнегоИсточника.НовыйОписанияТиповПолейЗагрузки();

	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Родитель", НСтр(
		"ru = 'Группа'"), ОписанияТиповПолей.ОписаниеТиповСтрока100, ОписаниеТиповКолонка, , , , );

	ИмяГруппыПолей = "НоменклатураПоставщиков";
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АртикулПоставщика", НСтр(
		"ru = 'Артикул поставщика'"), ОписанияТиповПолей.ОписаниеТиповСтрока25, ОписаниеТиповКолонка, ИмяГруппыПолей,
		1, , Истина);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИдентификаторПоставщика",
		НСтр("ru = 'Идентификатор поставщика'"), ОписанияТиповПолей.ОписаниеТиповСтрока110, ОписаниеТиповКолонка,
		ИмяГруппыПолей, 2, , Истина);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки,
		"НоменклатураПоставщиковНаименование", НСтр("ru = 'Номенклатура поставщиков (наименование)'"),
		ОписанияТиповПолей.ОписаниеТиповСтрока100, ОписаниеТиповКолонка, ИмяГруппыПолей, 3, , Истина);

	ИмяГруппыПолей = "Номенклатура";
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПоляНоменклатуры(ТаблицаПолейЗагрузки, ОписаниеТиповКолонка,
		ОписанияТиповПолей, НастройкиЗагрузкиДанных);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПоляХарактеристики(ТаблицаПолейЗагрузки, ОписанияТиповПолей);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Остаток", НСтр(
		"ru = 'Остаток'"), ОписанияТиповПолей.ОписаниеТиповСтрока25, ОписанияТиповПолей.ОписаниеТиповЧисло10_0);

	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СрокПополнения", НСтр(
		"ru = 'Срок пополнения'"), ОписанияТиповПолей.ОписаниеТиповСтрока25, ОписанияТиповПолей.ОписаниеТиповЧисло10_0);
	
	// ДополнительныеРеквизиты
	НаборСвойств_Справочник_НоменклатураПоставщиков = УправлениеСвойствами.НаборСвойствПоИмени(
		"Справочник_НоменклатураПоставщиков");
	ЗагрузкаДанныхИзВнешнегоИсточника.ПодготовитьСоответствиеПоДополнительнымРеквизитам(НастройкиЗагрузкиДанных,
		НаборСвойств_Справочник_НоменклатураПоставщиков);

	Если НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда

		ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, ИмяПоля, НСтр(
			"ru = 'Дополнительные реквизиты'"), ОписанияТиповПолей.ОписаниеТиповСтрока150,
			ОписанияТиповПолей.ОписаниеТиповСтрока11, , , , , , Истина, НаборСвойств_Справочник_НоменклатураПоставщиков);

	КонецЕсли;

КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата) Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	ОбновлятьДанные				= НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	ФиксированныйШаблон			= НастройкиЗагрузкиДанных.ФиксированныйШаблон;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура поставщика по Артикулу, Идентификатору, Наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуруПоставщиков(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных);		
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
		
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);
		
		КонецЕсли; 
		
		// Характеристика по Владельцу и Наименованию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Остаток
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Остаток, СтрокаТаблицыФормы.Остаток_ВходящиеДанные);
		
		// Срок пополнения
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СрокПополнения, СтрокаТаблицыФормы.СрокПополнения_ВходящиеДанные);
				
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	СтрокаТаблицыФормы._СтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиков);
	
	ИмяСлужебногоПоля_ЗагрузкаВПриложениеВозможна = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	ИмяСлужебногоПоля_ЗаполненыНеПолностью = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗаполненыНеПолностью();
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля_ЗагрузкаВПриложениеВозможна] = СтрокаТаблицыФормы._СтрокаСопоставлена
											ИЛИ (ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
												И ЗначениеЗаполнено(СтрокаТаблицыФормы.НоменклатураПоставщиковНаименование));
												
	СтрокаТаблицыФормы[ИмяСлужебногоПоля_ЗаполненыНеПолностью] = НЕ СтрокаТаблицыФормы._СтрокаСопоставлена
		И НЕ ПустаяСтрока(СтрокаТаблицыФормы.НоменклатураПоставщиковНаименование)
		И НЕ ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
		
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	НастройкиЗагрузкиДанных			= СтруктураДанных.НастройкиЗагрузкиДанных;
	ОбновлятьСуществующие			= СтруктураДанных.НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	СоздаватьЕслиНеСопоставлено		= СтруктураДанных.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено;
	ТаблицаСопоставленияДанных		= СтруктураДанных.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных				= ТаблицаСопоставленияДанных.Количество();
	КоличествоЗаписейТранзакции		= 0;
	ТранзакцияОткрыта				= Ложь;
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
	Попытка
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			Если НЕ ТранзакцияОткрыта 
				И КоличествоЗаписейТранзакции = 0 Тогда
				
				НачатьТранзакцию();
				ТранзакцияОткрыта = Истина;
				
			КонецЕсли;
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			
			СогласованноеСостояниеСтроки = (СтрокаТаблицы._СтрокаСопоставлена И ОбновлятьСуществующие) 
				ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И СоздаватьЕслиНеСопоставлено);
				
			Если ЗагрузкаВПриложениеВозможна И СогласованноеСостояниеСтроки Тогда
				
				КоличествоЗаписейТранзакции = КоличествоЗаписейТранзакции + 1;
				
				Если СтрокаТаблицы._СтрокаСопоставлена Тогда
					
					ЭлементСправочника = СтрокаТаблицы.НоменклатураПоставщиков.ПолучитьОбъект();
					ЭлементСправочника.Заблокировать();
					
				Иначе
					
					ЭлементСправочника = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
					ЭлементСправочника.Владелец = НастройкиЗагрузкиДанных.КонтрагентПоставщик;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураПоставщиковНаименование) Тогда
					ЭлементСправочника.Наименование = СтрокаТаблицы.НоменклатураПоставщиковНаименование;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.АртикулПоставщика) Тогда
					ЭлементСправочника.Артикул = СтрокаТаблицы.АртикулПоставщика;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.ИдентификаторПоставщика) Тогда
					ЭлементСправочника.Идентификатор = СтрокаТаблицы.ИдентификаторПоставщика;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Остаток) Тогда
					ЭлементСправочника.Остаток = СтрокаТаблицы.Остаток;
				КонецЕсли;
				Если НЕ ПустаяСтрока(СтрокаТаблицы.СрокПополнения) Тогда
					ЭлементСправочника.СрокПополнения = СтрокаТаблицы.СрокПополнения;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					ЭлементСправочника.Номенклатура = СтрокаТаблицы.Номенклатура;
				КонецЕсли;
				
				Если ИспользоватьХарактеристики И НЕ ПустаяСтрока(СтрокаТаблицы.Характеристика) Тогда
					ЭлементСправочника.Характеристика = СтрокаТаблицы.Характеристика;
				КонецЕсли;
				
				Если НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточника.ОбработатьВыбранныеДополнительныеРеквизиты(ЭлементСправочника, СтрокаТаблицы._СтрокаСопоставлена, СтрокаТаблицы, НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
					
				КонецЕсли;
				
				ЭлементСправочника.Записать();
				
			КонецЕсли;
			
			ИндексТекущейСтроки	= ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы);
			ТекстПрогресса		= СтрШаблон(НСтр("ru ='Обработано %1 из %2 строк...'"), ИндексТекущейСтроки, РазмерТаблицыДанных);
			
			ДлительныеОперации.СообщитьПрогресс(Цел(ИндексТекущейСтроки * 100 / РазмерТаблицыДанных), ТекстПрогресса);
			
			Если ТранзакцияОткрыта
				И КоличествоЗаписейТранзакции > ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумЗаписейВОднойТранзакции() Тогда
				
				ЗафиксироватьТранзакцию();
				ТранзакцияОткрыта = Ложь;
				КоличествоЗаписейТранзакции = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТранзакцияОткрыта 
			И КоличествоЗаписейТранзакции > 0 Тогда
			
			ЗафиксироватьТранзакцию();
			ТранзакцияОткрыта = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка данных'", "ru"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.НоменклатураПоставщиков, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат;
		
	КонецПопытки;
	
	Если ТранзакцияОткрыта Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

#КонецОбласти

//+mega
Функция НоменклатураПоставщика(Поставщик, Номенклатура = Неопределено)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Ссылка
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Владелец = &Поставщик
	|	И НЕ НоменклатураПоставщиков.ПометкаУдаления
	|	И НЕ НоменклатураПоставщиков.ЭтоГруппа";
	
	Если Номенклатура <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"
		|	И НоменклатураПоставщиков.Номенклатура = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка;
КонецФункции

Функция НоменклатураПоДаннымНоменклатурыПоставщика(Поставщик, Наименование = Неопределено, Артикул = Неопределено, Идентификатор = Неопределено)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Владелец = &Поставщик
	|	И НЕ НоменклатураПоставщиков.ПометкаУдаления
	|	И НЕ НоменклатураПоставщиков.ЭтоГруппа";
	
	
	
	//|	И НоменклатураПоставщиков.Наименование = &Наименование
	//|	И НоменклатураПоставщиков.Артикул = &Артикул
	//|	И НоменклатураПоставщиков.Идентификатор = &Идентификатор";
	
	Если Наименование <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"
		|	И НоменклатураПоставщиков.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Наименование);
	КонецЕсли;
	
	Если Артикул <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"
		|	И НоменклатураПоставщиков.Артикул = &Артикул";
		Запрос.УстановитьПараметр("Артикул", Артикул);
	КонецЕсли;
	
	Если Идентификатор <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"
		|	И НоменклатураПоставщиков.Идентификатор = &Идентификатор";
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	КонецЕсли;
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка;
КонецФункции

Функция ДанныеНоменклатурыПоставщика(НоменклатураПоставщика)Экспорт 
	
	Структура = Новый Структура;
	Структура.Вставить("Наименование", "");
	Структура.Вставить("Артикул", "");
	Структура.Вставить("Код", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураПоставщиков.Наименование КАК Наименование,
	|	НоменклатураПоставщиков.Артикул КАК Артикул,
	|	НоменклатураПоставщиков.Идентификатор КАК Код
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Ссылка = &НоменклатураПоставщика";
	
	Запрос.УстановитьПараметр("НоменклатураПоставщика", НоменклатураПоставщика);
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
	КонецЦикла;
	Возврат Структура;
КонецФункции
//-mega

#КонецЕсли

