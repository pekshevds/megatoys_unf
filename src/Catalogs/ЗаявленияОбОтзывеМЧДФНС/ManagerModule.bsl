#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗагрузкаЭлементаСправочника

Функция ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующийИлиСсылка = Ложь, Подпись = Неопределено) Экспорт
	
	ДанныеЗаявления = Новый Структура;
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	ДокументОбработки = ПодготовитьДокументDOM(ТекущиеДанные);
	
	Если ЭтоФайл Тогда
		ТекущиеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	ДанныеЗаявления.Вставить("ДанныеВыгрузки", ТекущиеДанные);
	
	ТекущиеДанные = Подпись;
	Если Подпись <> Неопределено Тогда
		Если ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
			ТекущиеДанные = Подпись;
		ИначеЕсли ЭтоАдресВременногоХранилища(Подпись) Тогда
			ТекущиеДанные = ПолучитьИзВременногоХранилища(Подпись);
		ИначеЕсли ТипЗнч(Подпись) = Тип("Строка") И НайтиФайлы(Подпись).Количество() > 0 Тогда
			ТекущиеДанные = Новый ДвоичныеДанные(Подпись);
		КонецЕсли;
	КонецЕсли;
	ДанныеЗаявления.Вставить("ДанныеПодписи", ТекущиеДанные);
	
	СведенияФайла = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл");
	Если СведенияФайла.Количество() = 1 Тогда
		ЭлементВыборки = СведенияФайла[0];
		ИмяФайлаВыгрузки = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИдФайл");
		Если ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ДанныеЗаявления.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки + ".xml");
		КонецЕсли;
	КонецЕсли;
	
	СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвЗаяв");
	Если СведенияДоверенности.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверенности[0];
		ДанныеЗаявления.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомДовер"));
		ДанныеЗаявления.Вставить("УникальныйИдентификаторДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИдДовер"));
		ДанныеЗаявления.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаНач", '00010101'));
		ДанныеЗаявления.Вставить("ДатаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаОтз", '00010101'));
		ДанныеЗаявления.Вставить("СведенияОбИнформационнойСистеме", ПолучитьЗначениеДокумента(ЭлементВыборки, "СведСистОтм", ""));
		ДанныеЗаявления.Вставить("ПричинаОтзыва", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПричОтз", ""));
		ДанныеЗаявления.Вставить("КодНалоговогоОрганаПредставления", ПолучитьЗначениеДокумента(ДокументОбработки, "//Файл/Документ/@КодНО", ""));
	КонецЕсли;
	
	ДанныеЗаявления.Вставить("ФИО", Новый Массив);
	ДанныеЗаявления.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеЗаявления.Вставить("ТипОрганизации", "");
	СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/НПЮЛ");
	СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/НПФЛ");
	СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ИО");
	
	Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
		ДанныеЗаявления.ТипОрганизации = "ЮЛ";
		СведенияДоверителя = СведенияДоверителяЮЛ;
	ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
		ДанныеЗаявления.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяФЛ;
	Иначе
		ДанныеЗаявления.ТипОрганизации = "ИО";
		СведенияДоверителя = СведенияДоверителяИО; 
	КонецЕсли;
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если СведенияДоверителя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверителя[0];
		Если ДанныеЗаявления.ТипОрганизации = "ЮЛ" Тогда
			ДанныеЗаявления.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
			
			ДанныеЗаявления.Вставить("ЛицоБезДовФЛ_Должность", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@Должность"));	
			
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвОрг/@НаимОрг"));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвОрг/@ИННЮЛ"));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвОрг/@КПП"));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "ЛицоБезДов/СвОрг/@ОГРН"));
			
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@НаимОрг"));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@ИННЮЛ"));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@КПП"));
			ДанныеЗаявления.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОрг/@ОГРН")); 
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеЗаявления.ДоверительЮЛ_КПП);
			
		ИначеЕсли ДанныеЗаявления.ТипОрганизации = "ИО" Тогда
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
			ДанныеЗаявления.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимИО"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеЗаявления.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			
			ПризнакГражданства = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ПрГражд");
			Если ПризнакГражданства = 1 Тогда
				ДанныеЗаявления.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
			Иначе
				ДанныеЗаявления.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			КонецЕсли;
			ИННФЛ = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ИННФЛ");
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеЗаявления.ДоверительЮЛ_КПП);
			
		ИначеЕсли ДанныеЗаявления.ТипОрганизации = "ФЛ" Тогда
			ДанныеЗаявления.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
			ДанныеЗаявления.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
			ДанныеЗаявления.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаРожд", '00010101'));
			
			ДокументИП = Новый Структура;
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@СерНомДок"));
			ДокументИП.Вставить("СерДок", СерияНомер.Серия);
			ДокументИП.Вставить("НомДок", СерияНомер.Номер);
			ДокументИП.Вставить("ДатаДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ДатаДок", '00010101'));
			ДокументИП.Вставить("ВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@ВыдДок"));
			ДокументИП.Вставить("КодВыдДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВыдДок"));
			ДокументИП.Вставить("ВидДок", ПолучитьЗначениеДокумента(ЭлементВыборки, "УдЛичн/@КодВидДок", Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка()));
			ДокументИП.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
			ДанныеЗаявления.УдостоверенияЛичности.Добавить(ДокументИП);
			
			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеЗаявления.ДоверительФЛ_ИНН);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияПодписанта = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Подписант");
	Если СведенияПодписанта.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПодписанта[0];
		
		НоваяСтрока = Новый Структура;
		
		ДанныеЗаявления.Вставить("ЛицоБезДовФЛ", "");
		ДанныеЗаявления.Вставить("ЛицоБезДовФЛ_Телефон", ПолучитьЗначениеДокумента(ЭлементВыборки, "@Тлф"));
		НоваяСтрока.Вставить("Фамилия", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Фамилия"));
		НоваяСтрока.Вставить("Имя", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Имя"));
		НоваяСтрока.Вставить("Отчество", ПолучитьЗначениеДокумента(ЭлементВыборки, "ФИО/@Отчество"));
		Если ДанныеЗаявления.ТипОрганизации = "ФЛ" Тогда
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ);
		Иначе
			НоваяСтрока.Вставить("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук);
			Если ДанныеЗаявления.ТипОрганизации = "ЮЛ" И ДанныеЗаявления.Свойство("ЛицоБезДовФЛ")
				И НЕ ЗначениеЗаполнено(ДанныеЗаявления.ЛицоБезДовФЛ) И (ЗначениеЗаполнено(НоваяСтрока.Фамилия)
				ИЛИ ЗначениеЗаполнено(НоваяСтрока.Имя) ИЛИ ЗначениеЗаполнено(НоваяСтрока.Отчество)) Тогда
				ДанныеЗаявления.ЛицоБезДовФЛ = ДокументооборотСКОКлиентСервер.ПолучитьПредставлениеФИО(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
				
		ДанныеЗаявления.ФИО.Добавить(НоваяСтрока);
	КонецЕсли;
	
	ДанныеЗаявления.Вставить("Доверитель",
		НайтиЭлементИБ(Справочники.Организации.ПустаяСсылка(), РеквизитыПоискаОрганизации));
	Если НЕ ЗначениеЗаполнено(ДанныеЗаявления.Доверитель) И ДанныеЗаявления.Свойство("ДоверительЮЛ_НаимОрг")
		И ЗначениеЗаполнено(ДанныеЗаявления.ДоверительЮЛ_НаимОрг) Тогда
		ДанныеЗаявления.Доверитель = ДанныеЗаявления.ДоверительЮЛ_НаимОрг;
	КонецЕсли;
	
	ДанныеЗаявления.Вставить("Организация", ?(Подпись = Неопределено
		ИЛИ НЕ ДанныеЗаявления.Свойство("Представитель")
		ИЛИ ТипЗнч(ДанныеЗаявления.Представитель) <> Тип("СправочникСсылка.Организации"),
		ДанныеЗаявления.Доверитель, ДанныеЗаявления.Представитель));
		
	Возврат ДанныеЗаявления;
	
КонецФункции

Функция ЗагрузитьЭлементИзФайлаОбмена(
		ВходящиеДанные,
		ОбновлятьСуществующийИлиСсылка = Ложь,
		Подпись = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Ошибка", "");
	
	ДанныеПодготовленны = 0;
	КлючевыеРеквизиты = "";
	ТекстОшибки = "";
	Успешно = Истина;
	
	Попытка
		ДанныеДоверенности = ДанныеИзФайлаОбмена(ВходящиеДанные, ОбновлятьСуществующийИлиСсылка, Подпись);
	Исключение
		Результат.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Успешно = Ложь;
	КонецПопытки;
	
	
	Если Успешно Тогда
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			КлючевыеРеквизиты = "ДоверительФЛ_ИНН";
		Иначе
			КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
		КонецЕсли;
		
		КлючевыеРеквизиты = КлючевыеРеквизиты + ", НомерДоверенности, УникальныйИдентификаторДоверенности,  ДатаВыдачи";
		
		КлючевыеРеквизиты = Новый Структура(КлючевыеРеквизиты);
		
		Для Каждого СтрокаКлюча Из КлючевыеРеквизиты Цикл
			Если ДанныеДоверенности.Свойство(СтрокаКлюча.Ключ) 
				И ЗначениеЗаполнено(ДанныеДоверенности[СтрокаКлюча.Ключ]) Тогда
				ДанныеПодготовленны = ДанныеПодготовленны + 1;
			ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника'") + ":  " + СтрокаКлюча.Ключ;
			Иначе
				ТекстОшибки = ТекстОшибки + ", " + СтрокаКлюча.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		Если КлючевыеРеквизиты.Количество() = ДанныеПодготовленны Тогда
			ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующийИлиСсылка);
			Результат.Ссылка = ТекущийЭлемент;
			Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
				Результат.Выполнено = Истина;
			Иначе
				Результат.Ошибка = НСтр("ru = 'Не удалось запись элемент справочника. Подробности в журнале регистрации'");
			КонецЕсли;
		Иначе
			Результат.Ошибка = ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ВыгрузитьЭлементВФайлОбмена(
		СправочникСсылка,
		ИдентификаторФайла = "",
		КодНалоговогоОрганаПолучателя = "",
		ОпределятьКодНалоговогоОрганаПолучателя = Ложь,
		ФорматДоверенностиПоПриказуФНС = Ложь,
		ПроверитьВыгрузку = Ложь,
		ПараметрыВозврата = Неопределено) Экспорт
	
	ПараметрыВозвратаВызова = Новый Структура;
	ПараметрыВозвратаВызова.Вставить("ВозвращатьАдресВоВременномХранилище", Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьИмяФайлаСРасширением", 		Ложь);
	ПараметрыВозвратаВызова.Вставить("ВозвращатьПриложеннуюПодпись", 		Ложь);
	Если ПараметрыВозврата <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВозвратаВызова, ПараметрыВозврата);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Содержимое", 	"");
	Результат.Вставить("ИмяФайла", 		"");
	
	Если ПараметрыВозвратаВызова.ВозвращатьПриложеннуюПодпись Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникСсылка,
			"ИмяФайлаВыгрузки, ФайлВырузки, ЭлектроннаяПодпись");
		ДанныеВыгрузки = РеквизитыОбъекта.ФайлВырузки.Получить();
		ДанныеПодписи = РеквизитыОбъекта.ЭлектроннаяПодпись.Получить();
		Если ЗначениеЗаполнено(РеквизитыОбъекта.ИмяФайлаВыгрузки) И ДанныеВыгрузки <> Неопределено
			И ДанныеПодписи <> Неопределено Тогда
			
			Результат = Новый Массив;
			
			АдресВыгрузки = ПоместитьВоВременноеХранилище(ДанныеВыгрузки, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", РеквизитыОбъекта.ИмяФайлаВыгрузки, АдресВыгрузки));
			
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
				РеквизитыОбъекта.ИмяФайлаВыгрузки).ИмяБезРасширения + "_SGN_"
				+ нрег(Строка(Новый УникальныйИдентификатор())) + ".sgn";
			АдресПодписи = ПоместитьВоВременноеХранилище(ДанныеПодписи, Новый УникальныйИдентификатор);
			Результат.Добавить(Новый Структура("Имя, Адрес", ИмяФайлаПодписи, АдресПодписи));
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьВыгрузку Тогда
		РезультатыПроверки = ПроверитьВозможностьВыгрузки(СправочникСсылка);
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Для каждого РезультатПроверки Из РезультатыПроверки Цикл
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(РезультатПроверки.ТекстОшибки);
			КонецЦикла;
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
				НСтр("ru = 'Не удалось сформировать заявление на отзыв доверенности'"));
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСправочника = ДанныеИзИнформационнойБазы(СправочникСсылка);
	
	ИдентификаторФайла = ?(ЗначениеЗаполнено(ИдентификаторФайла),
		ИдентификаторФайла, СправочникСсылка.УникальныйИдентификатор());
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОрганаПолучателя) Тогда
		Если ОпределятьКодНалоговогоОрганаПолучателя И ЗначениеЗаполнено(ДанныеСправочника.Организация) Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ЭтоКрупнейший    = ДокументооборотСКО.ЭтоКрупнейший(ДанныеСправочника.Организация);
			КодНОКрупнейшего = ДокументооборотСКО.КодНОКрупнейшего(ДанныеСправочника.Организация);
			
			УстановитьПривилегированныйРежим(Ложь);
			КодНалоговогоОрганаПолучателя = ?(ЭтоКрупнейший,
				СокрЛП(КодНОКрупнейшего), ДанныеСправочника.КодНО);
		Иначе
			КодНалоговогоОрганаПолучателя = ДанныеСправочника.КодНО;
		КонецЕсли;
	КонецЕсли;
	ИННКПП = ?(ЗначениеЗаполнено(ДанныеСправочника.ДоверительЮЛ_ИНН),
		СокрЛП(ДанныеСправочника.ДоверительЮЛ_ИНН) + СокрЛП(ДанныеСправочника.ДоверительЮЛ_КПП),
		СокрЛП(ДанныеСправочника.ДоверительФЛ_ИНН));
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Результат.ИмяФайла = "ON_OFFDOVER_"
		+ КодНалоговогоОрганаПолучателя
		+ "_" + СокрЛП(ДанныеСправочника.КодНО)
		+ "_" + ИННКПП
		+ "_" + Формат(ДатаСеанса, "ДФ=yyyyMMdd")
		+ "_" + СокрЛП(ИдентификаторФайла);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// фомирование раздела Файл
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИдФайл", Результат.ИмяФайла);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВерсФорм", "5.01");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xsi:noNamespaceSchemaLocation", "ON_OFFDOVER_1_884_00_05_01_01.xsd", Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance", Ложь);

	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодНО", СокрЛП(ДанныеСправочника.КодНО));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КНД", ДанныеСправочника.КНД);
	
	// фомирование раздела Сведения о заявлении
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЗаяв");
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НомДовер", СокрЛП(ДанныеСправочника.Номер));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИдДовер", СокрЛП(ДанныеСправочника.УникальныйИдентификаторДоверенности));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаНач", ДанныеСправочника.ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаОтз", ДанныеСправочника.ДатаОтзыва);
	Если ЗначениеЗаполнено(ДанныеСправочника.ПричинаОтзыва) Тогда
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПричОтз", СокрЛП(ДанныеСправочника.ПричинаОтзыва), Истина);
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения о доверителе
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверит");
	
	Если ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ИО" Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("ИО");
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимИО", СокрЛП(ДанныеСправочника.ДоверительЮЛ_НаимОрг));
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
			
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвРукОП");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН, Ложь);
		Если ДанныеСправочника.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "1");
		ИначеЕсли ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_Гражданство) Тогда
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "2");
		Иначе
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ПрГражд", "3");
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли ДанныеСправочника.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("НПЮЛ");
		
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", СокрЛП(ДанныеСправочника.ДоверительЮЛ_НаимОрг));
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ДоверительЮЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ДоверительЮЛ_КПП);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ДоверительЮЛ_ОГРН);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвРукОрг");
	
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Должность", СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Должность), Ложь);
		Если ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОрг");
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "НаимОрг", СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_НаимОрг));
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННЮЛ", ДанныеСправочника.ЛицоБезДовЮЛ_ИНН);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КПП", ДанныеСправочника.ЛицоБезДовЮЛ_КПП);
			ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРН", ДанныеСправочника.ЛицоБезДовЮЛ_ОГРН, Ложь);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("НПФЛ");
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ИННФЛ", ДанныеСправочника.ДоверительФЛ_ИНН);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ОГРНИП", ДанныеСправочника.ДоверительФЛ_ОГРН, Ложь);
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаРожд", ДанныеСправочника.ДоверительФЛ_ДатаРождения, Ложь);
		
		Если ТипЗнч(ДанныеСправочника.ЛицоБезДовФЛ_ВидДок) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
			КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
				ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
		Иначе
			КодВидаДокумента = ДанныеСправочника.ЛицоБезДовФЛ_ВидДок;
		КонецЕсли;
		ВыгрузитьУдостоверениеУзла(ЗаписьXML,
				СокрЛП(КодВидаДокумента),
				СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_СерДок),
				СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_НомДок),
				Формат(ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок, "ДФ=dd.MM.yyyy"),
				СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок),
				СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок));
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// фомирование раздела Сведения об подписанте доверителя
	ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	Если ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовФЛ_Телефон) Тогда
		ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Тлф", СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Телефон));
	КонецЕсли;
	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	ВыгрузитьФИОУзла(ЗаписьXML, СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Фамилия),
		СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Имя), СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_Отчество));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Результат.Содержимое = ЗаписьXML.Закрыть();
	
	Если ПараметрыВозвратаВызова.ВозвращатьИмяФайлаСРасширением Тогда
		Результат.ИмяФайла = Результат.ИмяФайла + ".xml";
	КонецЕсли;
	
	Если ПараметрыВозвратаВызова.ВозвращатьАдресВоВременномХранилище Тогда
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(Результат.Содержимое, "windows-1251");
		АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		Результат = Новый Структура("Имя, Адрес", Результат.ИмяФайла, АдресФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПроверитьВозможностьВыгрузки(ОбъектИлиСсылка) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка.ЗаявленияОбОтзывеМЧДФНС") Тогда
		Заявление = ОбъектИлиСсылка.ПолучитьОбъект();
	Иначе
		Заявление = ОбъектИлиСсылка;
	КонецЕсли;
	
	// основные
	Если НЕ ЗначениеЗаполнено(Заявление.УникальныйИдентификаторДоверенности) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан уникальный идентификатор доверенности'"), "УникальныйИдентификаторДоверенности"));
	КонецЕсли; 			
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ГодДатыСеанса = Год(ДатаСеанса);
	МинимальнаяДата = Дата(1900, 1, 1);
	ГодМаксимальнойДаты = Цел((ГодДатыСеанса + 50) / 100) * 100 + 99;
	МаксимальнаяДата = Дата(ГодМаксимальнойДаты, 1, 1);
	МаксимальнаяДата = КонецГода(МаксимальнаяДата);
	
	Если НЕ СтрДлина(СокрЛП(Заявление.УникальныйИдентификаторДоверенности)) = 36 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Уникальный идентификатор доверенности указан не верно. Он должен содержать 36 символов.'"), "УникальныйИдентификаторДоверенности"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заявление.ДатаВыдачи) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата выдачи'"), "ДатаВыдачи"));
	ИначеЕсли Заявление.ДатаВыдачи < МинимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль раньше %1'"),
				Формат(МинимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	ИначеЕсли Заявление.ДатаВыдачи > МаксимальнаяДата Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			СтрШаблон(
				НСтр("ru = 'Дата выдачи не может быль позднее %1'"),
				Формат(МаксимальнаяДата, "ДЛФ=Д")),
			"ДатаВыдачи"));
	КонецЕсли; 
	
	//Дата отзыва доверенности, проверить что бы она не была раньше, чем текущий день
	Если НЕ ЗначениеЗаполнено(Заявление.ДатаОтзыва) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задана дата отзыва'"), "ДатаОтзыва"));
	КонецЕсли;
		
		//Дата отзыва доверенности, проверить что бы она не была раньше, чем Дата выдачи
	Если Заявление.ДатаОтзыва < Заявление.ДатаВыдачи Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Дата отзыва не может быть раньше даты выдачи'"), "ДатаОтзыва"));
	КонецЕсли;
	
	// доверитель
	
	Доверитель_ЮридическоеЛицо = ЗначениеЗаполнено(Заявление.ДоверительЮЛ_ИНН);
	
	Если Доверитель_ЮридическоеЛицо Тогда
		Если НЕ ЗначениеЗаполнено(Заявление.ДоверительЮЛ_НаимОрг) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Заявление.ДоверительЮЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН организации доверителя'"), "Доверитель"));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Заявление.ДоверительЮЛ_ИНН, Ложь) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Заявление.ДоверительЮЛ_КПП) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан КПП организации доверителя'"), "Доверитель"));
		ИначеЕсли СтрДлина(Заявление.ДоверительЮЛ_КПП) <> 9 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный КПП организации доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если Заявление.ДоверительЮЛ_ИностраннаяОрганизация Тогда
												
			СтрокиФИО = Заявление.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Заявление.ДоверительФЛ_ИНН)
				И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				Заявление.ДоверительФЛ_ИНН, Истина) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ИНН руководителя обособленного подразделения доверителя'"), "Доверитель"));
			КонецЕсли;
							
		Иначе
			Если НЕ ЗначениеЗаполнено(Заявление.ДоверительЮЛ_ОГРН) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задан ОГРН организации доверителя'"), "Доверитель"));
			ИначеЕсли СтрДлина(Заявление.ДоверительЮЛ_ОГРН) <> 13 Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Указан некорректный ОГРН организации доверителя'"), "Доверитель"));
			КонецЕсли;
			
			ЛицоБезДов_ЮридическоеЛицо = ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_ИНН);
			
			Если ЛицоБезДов_ЮридическоеЛицо Тогда
				Если НЕ ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_НаимОрг) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задано наименование управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_ИНН) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан ИНН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
					Заявление.ЛицоБезДовЮЛ_ИНН, Ложь) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ИНН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_КПП) Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Не задан КПП управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				ИначеЕсли СтрДлина(Заявление.ЛицоБезДовЮЛ_КПП) <> 9 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный КПП управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Заявление.ЛицоБезДовЮЛ_ОГРН) И СтрДлина(Заявление.ЛицоБезДовЮЛ_ОГРН) <> 13 Тогда
					Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
						НСтр("ru = 'Указан некорректный ОГРН управляющей организации, действующей без доверенности'"), "ЛицоБезДовЮЛ"));
				КонецЕсли;
			КонецЕсли;
			
			СтрокиФИО = Заявление.ФИО.НайтиСтроки(Новый Структура("Владелец",
				ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительРук")));
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задана фамилия физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
			
			Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
				Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
					НСтр("ru = 'Не задано имя физического лица со стороны доверителя'"), "ЛицоБезДовФЛ"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокиФИО = Заявление.ФИО.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		
		Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Фамилия) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана фамилия доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиФИО.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиФИО[0].Имя) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано имя доверителя'"), "Доверитель"));
		КонецЕсли;
		
		СтрокиУдостоверений = Заявление.УдостоверенияЛичности.НайтиСтроки(Новый Структура("Владелец",
			ПредопределенноеЗначение("Перечисление.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ")));
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ВидДок) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан вид документа доверителя'"), "Доверитель"));
		КонецЕсли;
		
		КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
			?(СтрокиУдостоверений.Количество() = 0, "", СтрокиУдостоверений[0].ВидДок));
		Если ЗначениеЗаполнено(КодВидаДокумента) И КодВидаДокумента <> "07" И КодВидаДокумента <> "10"
			И КодВидаДокумента <> "11" И КодВидаДокумента <> "12" И КодВидаДокумента <> "13" И КодВидаДокумента <> "15"
			И КодВидаДокумента <> "19" И КодВидаДокумента <> "21" И КодВидаДокумента <> "24" Тогда
			
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Вид документа доверителя не поддерживается'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтрокиУдостоверений[0].СерДок)
			+ СокрЛП(СтрокиУдостоверений[0].НомДок)) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не заданы серия и номер документа доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() <> 0 И СтрДлина(СокрЛП(СтрокиУдостоверений[0].СерДок)
			+ СокрЛП(СтрокиУдостоверений[0].НомДок)) > 25 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Длина серии и номера документа доверителя больше 25 символов'"), "Доверитель"));
		КонецЕсли;
		
		Если СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].ДатаДок) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задана дата выдачи документа доверителя'"), "Доверитель"));
		ИначеЕсли СтрокиУдостоверений[0].ДатаДок < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи документа доверителя не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		ИначеЕсли СтрокиУдостоверений[0].ДатаДок > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата выдачи документа доверителя не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		КонецЕсли;
		
		Если (СтрокиУдостоверений.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтрокиУдостоверений[0].КодВыдДок))
			И КодВидаДокумента = "21" Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задано наименование органа, выдавшего документ доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Заявление.ДоверительФЛ_ИНН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ИНН доверителя'"), "Доверитель"));
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			Заявление.ДоверительФЛ_ИНН, Истина) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ИНН доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Заявление.ДоверительФЛ_ОГРН) Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Не задан ОГРНИП доверителя'"), "Доверитель"));
		ИначеЕсли СтрДлина(Заявление.ДоверительФЛ_ОГРН) <> 15 Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				НСтр("ru = 'Указан некорректный ОГРНИП доверителя'"), "Доверитель"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Заявление.ДоверительФЛ_ДатаРождения)
			И Заявление.ДоверительФЛ_ДатаРождения < МинимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата рождения доверителя не может быль раньше %1'"),
					Формат(МинимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		ИначеЕсли ЗначениеЗаполнено(Заявление.ДоверительФЛ_ДатаРождения)
			И Заявление.ДоверительФЛ_ДатаРождения > МаксимальнаяДата Тогда
			Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
				СтрШаблон(
					НСтр("ru = 'Дата рождения доверителя не может быль позднее %1'"),
					Формат(МаксимальнаяДата, "ДЛФ=Д")),
				"Доверитель"));
		КонецЕсли;
	КонецЕсли;
		
	// налоговые органы
	
	Если НЕ ЗначениеЗаполнено(Заявление.КодНалоговогоОрганаПредставления) Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Не задан код налогового органа - получателя'"), "КодНалоговогоОрганаПредставления"));
	ИначеЕсли СтрДлина(Заявление.КодНалоговогоОрганаПредставления) <> 4 Тогда
		Результат.Добавить(Новый Структура("ТекстОшибки, Поле",
			НСтр("ru = 'Указан некорректный код налогового органа - получателя'"), "КодНалоговогоОрганаПредставления"));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСведенияЗаявленияОбОтзывеМЧДФНС(СправочникСсылка) Экспорт
	
	ДанныеСправочника = ДанныеИзИнформационнойБазы(СправочникСсылка);
	
	// структура с результатом
	Сведения = Новый Структура;
	
	// добавляем код НО
	Сведения.Вставить("КодНО", СокрЛП(ДанныеСправочника.КодНО));
	Сведения.Вставить("КодыНО", ДанныеСправочника.КодыНО);
	
	// формируем структуру с учетными сведениями о самой доверенности
	УчетныеСведенияОДоверенности = Новый Структура;
	УчетныеСведенияОДоверенности.Вставить("Номер",
		?(ЗначениеЗаполнено(ДанныеСправочника.Номер), СокрЛП(ДанныеСправочника.Номер), "БН"));
	УчетныеСведенияОДоверенности.Вставить("Дата", ДанныеСправочника.ДатаВыдачи);
	УчетныеСведенияОДоверенности.Вставить("ДатаОкончания", ДанныеСправочника.ДатаОкончания);
	Сведения.Вставить("УчСвДов", УчетныеСведенияОДоверенности);
	
	// формируем сведения о представляемом лице
	СведенияОПредставляемомЛице = Новый Структура;
	СведенияОПредставляемомЛице.Вставить("ЯвляетсяФЛ", НЕ ЗначениеЗаполнено(ДанныеСправочника.ДоверительЮЛ_ИНН));
	Если СведенияОПредставляемомЛице.ЯвляетсяФЛ Тогда
		// общие сведения
		КодСтраныГражданства = ?(ЗначениеЗаполнено(ДанныеСправочника.ДоверительФЛ_Гражданство),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСправочника.ДоверительФЛ_Гражданство, "Код"), "");
		
		СведенияОПредставляемомЛице.Вставить("ИННФЛ", 		СокрЛП(ДанныеСправочника.ДоверительФЛ_ИНН));
		СведенияОПредставляемомЛице.Вставить("ОГРНИП", 		СокрЛП(ДанныеСправочника.ДоверительФЛ_ОГРН));
		СведенияОПредставляемомЛице.Вставить("Гражданство", СокрЛП(КодСтраныГражданства));
		СведенияОПредставляемомЛице.Вставить("ДатаРожд", 	ДанныеСправочника.ДоверительФЛ_ДатаРождения);
		
		// формируем структуру с Ф.И.О.
		ФИОПредпринимателя = Новый Структура;
		ФИОПредпринимателя.Вставить("Фамилия", 	ДанныеСправочника.ЛицоБезДовФЛ_Фамилия);
		ФИОПредпринимателя.Вставить("Имя", 		ДанныеСправочника.ЛицоБезДовФЛ_Имя);
		ФИОПредпринимателя.Вставить("Отчество", ДанныеСправочника.ЛицоБезДовФЛ_Отчество);
		СведенияОПредставляемомЛице.Вставить("ФИО", ФИОПредпринимателя);
		
		// формируем структуру со сведениями об удостоверении личности
		КодВидаДокумента = ДокументооборотСКОВызовСервера.ПолучитьКодВидаДокументаФизическогоЛица(
			ДанныеСправочника.ЛицоБезДовФЛ_ВидДок);
		
		УдЛичнПредпринимателя = Новый Структура;
		УдЛичнПредпринимателя.Вставить("ВидДок", СокрЛП(КодВидаДокумента));
		УдЛичнПредпринимателя.Вставить("СерНомДок", СокрЛП(СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_СерДок) + " "
			+ СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_НомДок)));
		УдЛичнПредпринимателя.Вставить("ДатаДок", ДанныеСправочника.ЛицоБезДовФЛ_ДатаДок);
		УдЛичнПредпринимателя.Вставить("ВыдДок", СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_ВыдДок));
		УдЛичнПредпринимателя.Вставить("КодВыдДок", СокрЛП(ДанныеСправочника.ЛицоБезДовФЛ_КодВыдДок));
		СведенияОПредставляемомЛице.Вставить("УдЛичн", УдЛичнПредпринимателя);
		
	Иначе
		// общие сведения
		СведенияОПредставляемомЛице.Вставить("НаимОрг", СокрЛП(ДанныеСправочника.ДоверительЮЛ_НаимОрг));
		СведенияОПредставляемомЛице.Вставить("ИННЮЛ", СокрЛП(ДанныеСправочника.ДоверительЮЛ_ИНН));
		СведенияОПредставляемомЛице.Вставить("КПП", СокрЛП(ДанныеСправочника.ДоверительЮЛ_КПП));
		СведенияОПредставляемомЛице.Вставить("ОГРН", СокрЛП(ДанныеСправочника.ДоверительЮЛ_ОГРН));
		
		// формируем структуру со сведениями о руководителе
		ФИОРуководителяОрганизации = Новый Структура;
		ФИОРуководителяОрганизации.Вставить("Фамилия", 	ДанныеСправочника.ЛицоБезДовФЛ_Фамилия);
		ФИОРуководителяОрганизации.Вставить("Имя", 		ДанныеСправочника.ЛицоБезДовФЛ_Имя);
		ФИОРуководителяОрганизации.Вставить("Отчество", ДанныеСправочника.ЛицоБезДовФЛ_Отчество);
		СвРукОргЮЛ = Новый Структура;
		СвРукОргЮЛ.Вставить("ИННФЛ", СокрЛП(ДанныеСправочника.ДоверительФЛ_ИНН));
		СвРукОргЮЛ.Вставить("ФИО", ФИОРуководителяОрганизации);
		СведенияОПредставляемомЛице.Вставить("СвРукОрг", СвРукОргЮЛ);
	КонецЕсли;
	Сведения.Вставить("СвПредст", СведенияОПредставляемомЛице);
	
	// формируем сведения о доверителе
	СвДовер = Новый Структура;
	СвДовер.Вставить("ПрДов", ?(ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН), 2, 1));
	
	Если ЗначениеЗаполнено(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН) Тогда
		// общие сведения
		ДоверительЮЛ = Новый Структура;
		ДоверительЮЛ.Вставить("НаимОрг", 	СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_НаимОрг));
		ДоверительЮЛ.Вставить("ИННЮЛ", 		СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_ИНН));
		ДоверительЮЛ.Вставить("КПП", 		СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_КПП));
		ДоверительЮЛ.Вставить("ОГРН", 		СокрЛП(ДанныеСправочника.ЛицоБезДовЮЛ_ОГРН));
		
		// сведения о руководителе
		СвРукОрг = Новый Структура;
		СвРукОрг.Вставить("ИННФЛ", "");
		ФИОРуководителяОрганизации = Новый Структура;
		ФИОРуководителяОрганизации.Вставить("Фамилия", 	"");
		ФИОРуководителяОрганизации.Вставить("Имя", 		"");
		ФИОРуководителяОрганизации.Вставить("Отчество", "");
		СвРукОрг.Вставить("ФИО", ФИОРуководителяОрганизации);
		ДоверительЮЛ.Вставить("СвРукОрг", СвРукОрг);
		
		СвДовер.Вставить("СвЮЛ", ДоверительЮЛ);
	КонецЕсли;
	Сведения.Вставить("СвДовер", СвДовер);
		
	// возвращаем полученную структуру
	Возврат Сведения;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
		"ПрисоединитьДополнительныеТаблицы
		|ЭтотСписок КАК ЭтотСписок
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Владельцы
		|	ПО Владельцы.Ссылка = ЭтотСписок.Организация
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
		|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = Владельцы.Ссылка
		|;
		|РазрешитьЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)
		|ИЛИ ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БазовыйФункционалDOM

// https://soltau.ru/index.php/themes/dev/item/413

Функция ПодготовитьДокументDOM(ВходящиеДанные)
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе	
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска)
	
	Результат = Новый Массив;

	ДокументВладелец = УзелВладелец.ДокументВладелец;
	РазыменовательИмен = Новый РазыменовательПространствИменDOM(ДокументВладелец);
	НашлиЭлементы = ДокументВладелец.ВычислитьВыражениеXPath(ТекстПоиска, УзелВладелец, РазыменовательИмен);
	
	ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	Пока ОчереднойЭлемент <> Неопределено Цикл
		Результат.Добавить(ОчереднойЭлемент);
		ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)
	
	Результат = ПредставлениеДаты;
	
	МассивСтроки = СтрРазделить(ПредставлениеДаты, ".", Ложь);
	
	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[2]) = 4 Тогда
		Результат = МассивСтроки[2] + МассивСтроки[1] + МассивСтроки[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеПола(ПредставлениеПола)
	
	Если ПредставлениеПола = "2" Тогда
		Результат = Перечисления.ПолФизическогоЛица.Женский;
	Иначе
		Результат = Перечисления.ПолФизическогоЛица.Мужской;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеСтраны(ПредставлениеСтраны)
	
	Результат = Справочники.СтраныМира.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеСтраны) Тогда
		Результат = Справочники.СтраныМира.НайтиПоКоду(ПредставлениеСтраны);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеВидаДокумента(ПредставлениеДокумента)
	
	ВсеВарианты = Новый Соответствие;
	ВсеВарианты.Вставить("07", "Военный билет");
	ВсеВарианты.Вставить("10", "Паспорт иностранного гражданина");
	ВсеВарианты.Вставить("11", "Свидетельство о рассмотрении ходатайства о признании лица беженцем на территории Российской Федерации по существу");
	ВсеВарианты.Вставить("12", "Вид на жительство в Российской Федерации");
	ВсеВарианты.Вставить("13", "Удостоверение беженца");
	ВсеВарианты.Вставить("15", "Разрешение на временное проживание в Российской Федерации");
	ВсеВарианты.Вставить("19", "Свидетельство о предоставлении временного убежища на территории Российской Федерации");
	ВсеВарианты.Вставить("21", "Паспорт гражданина Российской Федерации");
	ВсеВарианты.Вставить("24", "Удостоверение личности военнослужащего Российской Федерации");
	
	Результат = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
		Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
			Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", ПредставлениеДокумента);
		ИначеЕсли Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодФНС") <> Неопределено Тогда
			Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодФНС", ПредставлениеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПредставлениеСерияНомер(ПредставлениеСерияНомер)
	
	Результат = Новый Структура;
	Результат.Вставить("Серия", ПредставлениеСерияНомер);
	Результат.Вставить("Номер", "");
	
	МассивСтроки = СтрРазделить(ПредставлениеСерияНомер, " ", Ложь);
	
	Если МассивСтроки.Количество() > 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0] + " " + МассивСтроки[1]);
		МассивСтроки.Удалить(0);
		МассивСтроки.Удалить(0);
		Результат.Вставить("Номер", СтрСоединить(МассивСтроки, " "));
	ИначеЕсли МассивСтроки.Количество() = 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0]);
		Результат.Вставить("Номер", МассивСтроки[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиЭлементИБ(ЗначениеПоУмолчанию, ФильтрыПоиска)
	
	Результат = ЗначениеПоУмолчанию;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектПоиска.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗаявленияОбОтзывеМЧДФНС КАК ОбъектПоиска
	|ГДЕ
	|	НЕ ОбъектПоиска.ПометкаУдаления
	|{ГДЕ
	|	ОбъектПоиска.Ссылка.*}";
	
	МетаданныеОбъекта = ЗначениеПоУмолчанию.Метаданные();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ЗаявленияОбОтзывеМЧДФНС", МетаданныеОбъекта.ПолноеИмя());
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	Для Каждого СтрокаКлюча Из ФильтрыПоиска Цикл
		НовыйОтбор = Построитель.Отбор.Добавить("Ссылка." + СтрокаКлюча.Ключ);
		НовыйОтбор.Использование = Истина;
		НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
		НовыйОтбор.Значение = СтрокаКлюча.Значение;
	КонецЦикла;
	
	Запрос = Построитель.ПолучитьЗапрос();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() И Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент документа DOM, проверяет что оно одно и пытается получить значение и привести тип.
//
Функция ПолучитьЗначениеДокумента(УзелВладелец, ТекстПоиска, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	
	ВыборкаЭлементов = ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска);
	
	Если ВыборкаЭлементов.Количество() = 1 Тогда
		
		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ЭлементВыборки.ЗначениеУзла;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеПола(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.СтраныМира") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеСтраны(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеВидаДокумента(ПредставлениеЗначения);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьАтрибутУзлаXML(данныеXML, ИмяАтрибута, ЗначениеАтрибута, ВыгружатьПустые = Истина)
	
	ПредставлениеЗначения = ЗначениеВыгрузкиXML(ЗначениеАтрибута);
	
	Если ВыгружатьПустые ИЛИ ЗначениеЗаполнено(ЗначениеАтрибута) Тогда 
		данныеXML.ЗаписатьНачалоАтрибута(ИмяАтрибута);
		данныеXML.ЗаписатьТекст(ПредставлениеЗначения);
		данныеXML.ЗаписатьКонецАтрибута();
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеВыгрузкиXML(ЗначениеВыгрузки)
	
	Результат = Строка(ЗначениеВыгрузки);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыгрузки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеВыгрузки) = Тип("Дата") Тогда
		Результат = Формат(ЗначениеВыгрузки, "ДФ=dd.MM.yyyy");
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.СтраныМира") Тогда
		Результат = ЗначениеВыгрузки.Код;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Если Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодМВД") <> Неопределено Тогда
			Результат = ЗначениеВыгрузки.КодМВД;
		ИначеЕсли Метаданные.Справочники.ВидыДокументовФизическихЛиц.Реквизиты.Найти("КодФНС") <> Неопределено Тогда
			Результат = ЗначениеВыгрузки.КодФНС;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеВыгрузки) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
		Если ЗначениеВыгрузки = Перечисления.ПолФизическогоЛица.Женский Тогда
			Результат = "2";
		Иначе	
			Результат = "1";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭлементаСправочника

Функция ЗаписатьЭлементСправочника(ДанныеЗаявления, ОбновлятьСуществующийИлиСсылка)
	
	Результат = Неопределено;
	НашлиЭлемент = Неопределено;
	
	Если ТипЗнч(ОбновлятьСуществующийИлиСсылка) = Тип("СправочникСсылка.ЗаявленияОбОтзывеМЧДФНС") Тогда
		НашлиЭлемент = ОбновлятьСуществующийИлиСсылка;
		
	ИначеЕсли ОбновлятьСуществующийИлиСсылка = Истина Тогда
		СтрокаПоиска = Новый Структура;
		СтрокаПоиска.Вставить("НомерДоверенности", ДанныеЗаявления.НомерДоверенности);
		СтрокаПоиска.Вставить("ДатаВыдачи", ДанныеЗаявления.ДатаВыдачи);
		СтрокаПоиска.Вставить("Организация", ДанныеЗаявления.Организация);
		НашлиЭлемент = НайтиЭлементИБ(Справочники.ЗаявленияОбОтзывеМЧДФНС.ПустаяСсылка(), СтрокаПоиска);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = Справочники.ЗаявленияОбОтзывеМЧДФНС.СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
		Для Каждого СтрокаРеквизита Из ОбъектСправочника.Метаданные().Реквизиты Цикл
			ОбъектСправочника[СтрокаРеквизита.Имя] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	// здесь переносим значения реквизитов
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеЗаявления);
	
	ТабличныеЧасти = Новый Структура;
	ТабличныеЧасти.Вставить("ФИО", ДанныеЗаявления.ФИО);
	ТабличныеЧасти.Вставить("УдостоверенияЛичности", ДанныеЗаявления.УдостоверенияЛичности);
	
	Для Каждого СтрокаТЧ Из ТабличныеЧасти Цикл
		ТекущаяТЧ = ОбъектСправочника[СтрокаТЧ.Ключ];
		ТекущаяТЧ.Очистить();
		Для Каждого НоваяСтрока Из СтрокаТЧ.Значение Цикл
			ДобавленнаяСтрока = ТекущаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НоваяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеЗаявления.Свойство("ДанныеВыгрузки") И ДанныеЗаявления.ДанныеВыгрузки <> Неопределено Тогда
		ОбъектСправочника.ФайлВырузки = Новый ХранилищеЗначения(ДанныеЗаявления.ДанныеВыгрузки, Новый СжатиеДанных(9));
	КонецЕсли;
	Если ДанныеЗаявления.Свойство("ДанныеПодписи") И ДанныеЗаявления.ДанныеПодписи <> Неопределено Тогда
		ОбъектСправочника.ЭлектроннаяПодпись = Новый ХранилищеЗначения(ДанныеЗаявления.ДанныеПодписи,
			Новый СжатиеДанных(9));
	КонецЕсли;
	
	Удачно = Ложь;
	
	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗаявленияОбОтзывеМЧДФНС");
		Если НЕ ОбъектСправочника.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
		КонецЕсли;	
		
		Удачно = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			ОбъектСправочника.Записать();
			
		Исключение
			ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Ошибка изменения заявления об отзыве доверенности.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,,,
				ДанныеОшибки);
			Удачно = Ложь;
		КонецПопытки;
		
		Если Удачно Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

Функция ДанныеИзИнформационнойБазы(СправочникСсылка)

	Результат = Новый Структура;
	Результат.Вставить("КодНО", "");
	Результат.Вставить("КНД", "1110311");
	Результат.Вставить("КодыНО", Новый Массив);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Владелец КАК Владелец,
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Фамилия КАК Фамилия,
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Имя КАК Имя,
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Отчество КАК Отчество
		|ИЗ
		|	Справочник.ЗаявленияОбОтзывеМЧДФНС.ФИО КАК ЗаявленияОбОтзывеМЧДФНСФИО
		|ГДЕ
		|	ЗаявленияОбОтзывеМЧДФНСФИО.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявленияОбОтзывеМЧДФНС.НомерДоверенности КАК НомерДоверенности,
		|	ЗаявленияОбОтзывеМЧДФНС.ДатаВыдачи КАК ДатаВыдачи,
		|	ЗаявленияОбОтзывеМЧДФНС.ДатаОтзыва КАК ДатаОтзыва,
		|	ЗаявленияОбОтзывеМЧДФНС.КодНалоговогоОрганаПредставления КАК КодНалоговогоОрганаПредставления,
		|	ЗаявленияОбОтзывеМЧДФНС.СведенияОбИнформационнойСистеме КАК СведенияОбИнформационнойСистеме,
		|	ЗаявленияОбОтзывеМЧДФНС.УникальныйИдентификаторДоверенности КАК УникальныйИдентификаторДоверенности,
		|	ЗаявленияОбОтзывеМЧДФНС.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
		|	ЗаявленияОбОтзывеМЧДФНС.ПричинаОтзыва КАК ПричинаОтзыва,
		|	ЗаявленияОбОтзывеМЧДФНС.Организация КАК Организация,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_ИностраннаяОрганизация КАК ДоверительЮЛ_ИностраннаяОрганизация,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_КПП КАК ДоверительЮЛ_КПП,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_ОГРН КАК ДоверительЮЛ_ОГРН,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_НаимРегОрг КАК ДоверительЮЛ_НаимРегОрг,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_РегНомер КАК ДоверительЮЛ_РегНомер,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_КодНПРег КАК ДоверительЮЛ_КодНПРег,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_ОГРН КАК ДоверительФЛ_ОГРН,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_Гражданство КАК ДоверительФЛ_Гражданство,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительФЛ_ДатаРождения КАК ДоверительФЛ_ДатаРождения,
		|	ЗаявленияОбОтзывеМЧДФНС.ДоверительЮЛ_НаимОрг КАК ДоверительЮЛ_НаимОрг,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовЮЛ_НаимОрг КАК ЛицоБезДовЮЛ_НаимОрг,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовЮЛ_ИНН КАК ЛицоБезДовЮЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовЮЛ_КПП КАК ЛицоБезДовЮЛ_КПП,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовЮЛ_ОГРН КАК ЛицоБезДовЮЛ_ОГРН,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_ИНН КАК ЛицоБезДовФЛ_ИНН,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_СНИЛС КАК ЛицоБезДовФЛ_СНИЛС,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_Гражданство КАК ЛицоБезДовФЛ_Гражданство,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_ДатаРождения КАК ЛицоБезДовФЛ_ДатаРождения,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_Должность КАК ЛицоБезДовФЛ_Должность,
		|	ЗаявленияОбОтзывеМЧДФНС.ЛицоБезДовФЛ_Телефон КАК ЛицоБезДовФЛ_Телефон
		|ИЗ
		|	Справочник.ЗаявленияОбОтзывеМЧДФНС КАК ЗаявленияОбОтзывеМЧДФНС
		|ГДЕ
		|	ЗаявленияОбОтзывеМЧДФНС.Ссылка = &СправочникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.Владелец КАК Владелец,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.ВидДок КАК ВидДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.СерДок КАК СерДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.НомДок КАК НомДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.ДатаДок КАК ДатаДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.ВыдДок КАК ВыдДок,
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.КодВыдДок КАК КодВыдДок
		|ИЗ
		|	Справочник.ЗаявленияОбОтзывеМЧДФНС.УдостоверенияЛичности КАК ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности
		|ГДЕ
		|	ЗаявленияОбОтзывеМЧДФНСУдостоверенияЛичности.Ссылка = &СправочникСсылка";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СправочникСсылка", СправочникСсылка);	
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
		
	ВыборкаПодписантов = ПакетЗапросов[0].Выгрузить();
	ВыборкаДокументов = ПакетЗапросов[2].Выгрузить();
	
	ПустойПодписант = Новый Структура("Имя, Отчество, Фамилия", "", "", "");
	ПустойДокумент = Новый Структура("ВидДок, СерДок, НомДок, ДатаДок, ВыдДок, КодВыдДок", "", "", "", "", "", "", "");
	
	ВыборкаИнформации = ПакетЗапросов[1].Выбрать();
	Если ВыборкаИнформации.Следующий() Тогда
		Результат.Вставить("КодНО", ВыборкаИнформации.КодНалоговогоОрганаПредставления);
		Результат.Вставить("Номер", ВыборкаИнформации.НомерДоверенности);
		Результат.Вставить("ДатаОтзыва", ВыборкаИнформации.ДатаОтзыва);
		Результат.Вставить("ДатаВыдачи", ВыборкаИнформации.ДатаВыдачи);
		Результат.Вставить("УникальныйИдентификаторДоверенности", ВыборкаИнформации.УникальныйИдентификаторДоверенности);
		Результат.Вставить("СведенияОбИнформационнойСистеме", ВыборкаИнформации.СведенияОбИнформационнойСистеме);
		Результат.Вставить("ПричинаОтзыва", ВыборкаИнформации.ПричинаОтзыва);
		
		// информация об доверителе
		Результат.Вставить("Организация", ВыборкаИнформации.Организация);
		Результат.Вставить("ИностраннаяОрганизация", ВыборкаИнформации.ДоверительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить("ДоверительЮЛ_ИНН", ВыборкаИнформации.ДоверительЮЛ_ИНН);
		Результат.Вставить("ДоверительЮЛ_КПП", ВыборкаИнформации.ДоверительЮЛ_КПП);
		Результат.Вставить("ДоверительЮЛ_ОГРН", ВыборкаИнформации.ДоверительЮЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_ИНН", ВыборкаИнформации.ДоверительФЛ_ИНН);
		Результат.Вставить("ДоверительФЛ_ОГРН", ВыборкаИнформации.ДоверительФЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_Гражданство", ВыборкаИнформации.ДоверительФЛ_Гражданство);
		Результат.Вставить("ДоверительФЛ_ДатаРождения", ВыборкаИнформации.ДоверительФЛ_ДатаРождения);
		Результат.Вставить("ДоверительЮЛ_НаимОрг", ВыборкаИнформации.ДоверительЮЛ_НаимОрг);
		
		Если Результат.ИностраннаяОрганизация Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ИО");
		ИначеЕсли ЗначениеЗаполнено(Результат.ДоверительЮЛ_ИНН) Тогда
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ЮЛ");
		Иначе
			Результат.Вставить("ДоверительЮЛ_ТипОрганизации", "ФЛ");
		КонецЕсли;
		
		// информация об подписанте
		Результат.Вставить("ЛицоБезДовЮЛ_НаимОрг", ВыборкаИнформации.ЛицоБезДовЮЛ_НаимОрг);
		Результат.Вставить("ЛицоБезДовЮЛ_ИНН", ВыборкаИнформации.ЛицоБезДовЮЛ_ИНН);
		Результат.Вставить("ЛицоБезДовЮЛ_КПП", ВыборкаИнформации.ЛицоБезДовЮЛ_КПП);
		Результат.Вставить("ЛицоБезДовЮЛ_ОГРН", ВыборкаИнформации.ЛицоБезДовЮЛ_ОГРН);
		Результат.Вставить("ЛицоБезДовФЛ_Должность", ВыборкаИнформации.ЛицоБезДовФЛ_Должность);
		Результат.Вставить("ЛицоБезДовФЛ_Телефон", ВыборкаИнформации.ЛицоБезДовФЛ_Телефон);
		
		Если Результат.ДоверительЮЛ_ТипОрганизации = "ФЛ" Тогда
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
		Иначе
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук));
		КонецЕсли;
		
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ЛицоБезДовФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ЛицоБезДовФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ЛицоБезДовФЛ_Фамилия", НашлиФИО.Фамилия);
		
		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец", Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;
		
		Результат.Вставить("ЛицоБезДовФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ЛицоБезДовФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ЛицоБезДовФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ЛицоБезДовФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ЛицоБезДовФЛ_КодВыдДок", НашлиДок.КодВыдДок);
						
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьФИОУзла(ЗаписьXML, Фамилия, Имя, Отчество)
	
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Фамилия", Фамилия);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Имя", Имя);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "Отчество", Отчество, Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьУдостоверениеУзла(
				ЗаписьXML, 
				ВидДокумента,
				СерияДокумента,
				НомерДокумента,
				ДатаВыдачи,
				Выдан,
				КодПодразделения)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("УдЛичн");
	
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодВидДок", ВидДокумента);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "СерНомДок", СокрЛП(СерияДокумента + " " + НомерДокумента));
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ДатаДок", ДатаВыдачи);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "ВыдДок", Выдан, Ложь);
	ЗаписатьАтрибутУзлаXML(ЗаписьXML, "КодВыдДок", КодПодразделения, Ложь);
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
