#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОбновлениеИнформационнойБазы
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ОбновлениеИнформационнойБазы
	
	Если НЕ Отказ И НЕ ЭтоГруппа Тогда
		
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_Спецификации", "НаборСвойствСпецификации");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_КомплектацииНоменклатуры", "НаборСвойствКомплектацииНоменклатуры");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_ХарактеристикиНоменклатуры", "НаборСвойствХарактеристики");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_Номенклатура", "НаборСвойств");
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		
		ЗначениеЗаполненияКатегории = КатегорииНоменклатурыСервер.ЗначениеЗаполненияКатегории();
		Если ЗначениеЗаполненияКатегории = Ссылка Тогда
			КатегорииНоменклатурыСервер.ЗаписатьЗначениеЗаполненияКатегории(Справочники.КатегорииНоменклатуры.БезКатегории);
		КонецЕсли;
		
	КонецЕсли;
	
	// Шаблоны наименований
	Если НЕ ЭтоГруппа Тогда
		
		ЭтоНовый = Ложь;
		Если ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
			ЭтоНовый = ДополнительныеСвойства.ЭтоНовый;
		КонецЕсли;
		
		Если ЭтоНовый Тогда
			
			ШаблоныНаименований.СоздатьШаблоныПоУмолчанию(Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	// Конец Шаблоны наименований
	
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		НаборСвойств = Неопределено;
		НаборСвойствХарактеристики = Неопределено;
		ПорядокСортировки.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ПриКопировании()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЭтоГруппа И ИспользоватьСерииНоменклатуры И Не ЗначениеЗаполнено(ПолитикаУчетаСерий) Тогда
		ПроверяемыеРеквизиты.Добавить("ПолитикаУчетаСерий");
	КонецЕсли;
	
	Если Не ЭтоГруппа И РозничныеПродажиСервер.ТребуетсяПризнакПредметаРасчета(ТипНоменклатурыПоУмолчанию) Тогда
		ПроверяемыеРеквизиты.Добавить("ПризнакПредметаРасчета");
	КонецЕсли;	

КонецПроцедуры

// Для корректной работы логики системы, необходимо обязательное заполнение ряда реквизитов зависящих от типа номенклатуры.
// Во избежание проблем с незаполненными реквизитами, а так же работы логики системы в целом, перед вызовом процедуры необходимо 
// заполнять реквизит объекта ТипНоменклатурыПоУмолчанию или передать реквизит и его значение в ДанныеЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения<>Неопределено И ДанныеЗаполнения.Свойство("ЭтоГруппа") И ДанныеЗаполнения.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат
	КонецЕсли;
	
	Если Не ДанныеЗаполнения = Неопределено Тогда
		 ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		 СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	СчетУчетаЗатратПоУмолчанию = ?(ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Услуга 
	ИЛИ НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить(),
	ПланыСчетов.Управленческий.КоммерческиеРасходы,
	ПланыСчетов.Управленческий.НезавершенноеПроизводство);
	
	Если ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас Тогда
		
		Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗапасов) Тогда
			СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(МетодОценки) Тогда 
			МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СпособПополнения) Тогда
			СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
		КонецЕсли;

	ИначеЕсли ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Работа Тогда
		
		Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Операция Тогда
		
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		
	ИначеЕсли ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
			СчетУчетаЗатрат = СчетУчетаЗатратПоУмолчанию;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаЗапасов) Тогда
			СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СчетУчетаДоходов) Тогда
			СчетУчетаДоходов = ПланыСчетов.Управленческий.ПрочиеДоходы;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли