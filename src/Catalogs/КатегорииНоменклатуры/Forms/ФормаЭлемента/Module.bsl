#Область ОписаниеПеременных

&НаКлиенте
Перем ПорядокСортировкиИзменен;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьСписокТипов();
	КонецЕсли;
	
	Если Не Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Операция);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты")
		Тогда
		НайденнаяОперация = Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	УправлениеВидимостью(ЭтотОбъект);
	
	ОбъектМетаданных = Справочники.Номенклатура.ПустаяСсылка().Метаданные();
	РазрешеноРедактированиеНоменклатуры = ПравоДоступа("Добавление", ОбъектМетаданных) Или ПравоДоступа("Изменение",
		ОбъектМетаданных);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриСозданииНаСервереФормаВидаНоменклатуры(ЭтотОбъект, Объект.Ссылка, Элементы.ГруппаРаботаСНоменклатурой);
	Элементы.ГруппаРаботаСНоменклатурой.Доступность = РазрешеноРедактированиеНоменклатуры;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	// СтандартныеПодсистемы.ОбновлениеИнформационнойБазы
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ОбновлениеИнформационнойБазы
	
	// ПризнакПредметаРасчета
	Элементы.ПризнакПредметаРасчета.Видимость = РозничныеПродажиСервер.ТребуетсяПризнакПредметаРасчета(Объект.ТипНоменклатурыПоУмолчанию);
	УстановитьПризнакПоляДляСортировки(); 
	
	Если Не Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() Тогда
		Элементы.ГруппаХарактеристики.Видимость = Ложь;
	КонецЕсли;
	
	// ИнтеграцияГОСИС
	// ВЕТИС
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Элементы.ГруппаВЕТИС.Видимость = Ложь;
	КонецЕсли;
	//Конец ВЕТИС
	
	ФОИспользоватьПодсистемуПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство");
	
	ВестиСведенияДляДекларацийПоАлкогольнойПродукции = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ВестиУчетМаркировкиПродукцииВГИСМ = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется();
	ВестиУчетПодконтрольныхТоваровВЕТИС = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	ВестиУчетМаркируемойПродукцииИСМП = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	ВестиУчетМаркируемойПродукцииЗЕРНО = ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО"); 
	
	// Заполним список выбора доступных видов продукции ИС.
	Элементы.ВидПродукцииИС.СписокВыбора.Очистить();
	Если ВестиСведенияДляДекларацийПоАлкогольнойПродукции Тогда
		Элементы.ВидПродукцииИС.СписокВыбора.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
	КонецЕсли;
	Если ВестиУчетМаркируемойПродукцииИСМП Тогда
		УчитываемыеВидыМаркируемойПродукции = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
		Для Каждого ВидПродукции Из УчитываемыеВидыМаркируемойПродукции Цикл
			Элементы.ВидПродукцииИС.СписокВыбора.Добавить(ВидПродукции);
		КонецЦикла;
	КонецЕсли;
	Если ВестиУчетПодконтрольныхТоваровВЕТИС Тогда
		Элементы.ВидПродукцииИС.СписокВыбора.Добавить(Перечисления.ВидыПродукцииИС.ПодконтрольнаяПродукцияВЕТИС);
	КонецЕсли;
	Если ВестиУчетМаркируемойПродукцииЗЕРНО Тогда
		УчитываемыеВидыПродукцииЗЕРНО = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции();
		Для Каждого ВидПродукции Из УчитываемыеВидыПродукцииЗЕРНО Цикл
			Элементы.ВидПродукцииИС.СписокВыбора.Добавить(ВидПродукции);
		КонецЦикла;
	КонецЕсли;
	// Сохраним доступность ранее указанного значения.
	Если ЗначениеЗаполнено(Объект.ВидПродукцииИС)
		И Элементы.ВидПродукцииИС.СписокВыбора.НайтиПоЗначению(Объект.ВидПродукцииИС) = Неопределено Тогда
		Элементы.ВидПродукцииИС.СписокВыбора.Добавить(Объект.ВидПродукцииИС);
	КонецЕсли;
	Элементы.ВидПродукцииИС.СписокВыбора.СортироватьПоЗначению();
	// Конец ИнтеграцияГОСИС
	
	ИнициализироватьНаборыСвойств();
	
	ИспользоватьСтаруюПечатьЦенников = ПолучитьФункциональнуюОпцию("ИспользоватьСтаруюОбработкуПечатиЦенников");
	Если ИспользоватьСтаруюПечатьЦенников Тогда
		Элементы.ШаблонЦенникаБПО.Видимость = Ложь;
	Иначе
		Элементы.ШаблонЦенника.Видимость = Ложь;
		Элементы.ШаблонЭтикетки.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияРеквизитовПоУмолчанию();
	
	Если Параметры.Свойство("ИмяРеквизита") И ЗначениеЗаполнено(Параметры.ИмяРеквизита) Тогда
		ИмяРеквизитаДляПозиционирования = Параметры.ИмяРеквизита;
		СпозиционироватьсяНаРеквизитеИВыделитьГруппу();
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
		Элементы.СпособПополнения.СписокВыбора.Добавить(Перечисления.СпособыПополненияЗапасов.Производство);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		Элементы.СпособПополнения.СписокВыбора.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализироватьНаборыСвойств();
	
	ЗаполнитьСписокДопРеквизитов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриЗаписиНаСервереФормаВидаНоменклатуры(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПеречитыватьОбъектПослеЗаписи Тогда
		Прочитать();
	КонецЕсли;
	
	ОбъектНаборСвойств = Объект.НаборСвойств.ПолучитьОбъект();
	ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	Индекс = 0;
	Для каждого Свойство Из СвойстваНоменклатуры Цикл
		
		Строка = ТЧ.Найти(Свойство.Ссылка, "Свойство");
		ТЧ.Сдвинуть(Строка, Индекс - ТЧ.Индекс(Строка));
		Индекс = Индекс + 1;
		
	КонецЦикла;
	ОбъектНаборСвойств.Записать();
	
	ОбъектНаборСвойств = Объект.НаборСвойствХарактеристики.ПолучитьОбъект();
	ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	Индекс = 0;
	Для каждого Свойство Из СвойстваХарактеристики Цикл
		
		Строка = ТЧ.Найти(Свойство.Ссылка, "Свойство");
		ТЧ.Сдвинуть(Строка, Индекс - ТЧ.Индекс(Строка));
		Индекс = Индекс + 1;
		
	КонецЦикла;
	ОбъектНаборСвойств.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Если ПорядокСортировкиИзменен Тогда
		Оповестить("СортировкаИзменена", Объект.Ссылка);
	КонецЕсли;
	
	Оповестить("Запись_КатегорииНоменклатуры", Объект.Ссылка);
	
	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НеПредлагатьСохранять Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ВЕТИС
	СгенерироватьШаблонНаименованияПартии(Неопределено);
	// КонецВЕТИС
	
	УправлениеВидимостью(ЭтотОбъект);
	УстановитьВидимостьСчетовУчета();
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи) 
	
	ПорядокСортировкиИзменен = Ложь;
	МассивТекущихСвойств = Новый Массив;
	
	Для Каждого СтрокаСортировки Из Объект.ПорядокСортировки Цикл
		МассивТекущихСвойств.Добавить(СтрокаСортировки.Свойство);
	КонецЦикла;
	
	Объект.ПорядокСортировки.Очистить();
	
	Для Каждого СтрокаТаблицыСвойстваХарактеристики Из СвойстваХарактеристики Цикл
		Если СтрокаТаблицыСвойстваХарактеристики.Сортировать
			Тогда
			НоваяСтрока = Объект.ПорядокСортировки.Добавить();
			НоваяСтрока.Свойство = СтрокаТаблицыСвойстваХарактеристики.Ссылка;
			
			ПорядокСортировкиИзменен = ?(МассивТекущихСвойств.Найти(НоваяСтрока.Свойство) = Неопределено, Истина, Ложь);        
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПорядокСортировкиИзменен И Не МассивТекущихСвойств.Количество() = Объект.ПорядокСортировки.Количество()
		Тогда
		ПорядокСортировкиИзменен = Истина;
	КонецЕсли;
	
	Если Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		И Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		И Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") 
		Тогда
		Объект.ИспользоватьХарактеристики = Ложь;
		Объект.ПроверятьЗаполнениеХарактеристики = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеЗначенияИспользоватьХарактеристики" Тогда
		Элементы.ГруппаХарактеристики.Видимость = Параметр
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборыДополнительныхРеквизитовИСведений"
		ИЛИ ИмяСобытия = "Запись_ДополнительныеРеквизитыИСведения" Тогда
		ЗаполнитьСписокДопРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПродукцииИСПриИзменении(Элемент)
	
	УстановитьПризнакПодакцизныйТовар();
	Объект.ПризнакПредметаРасчета = ПолучитьОжидаемыйПризнакПредметаРасчета(Объект.ТипНоменклатурыПоУмолчанию, Объект.ВидПродукцииИС, Объект.ВидМаркировки, Объект.ПодакцизныйТовар);

КонецПроцедуры

&НаКлиенте
Процедура ВидМаркировкиПриИзменении(Элемент)
	НастроитьГруппуМаркировки();
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "ГИСМ");
	УстановитьНастройкиСерийПоУмолчаниюГИСМ();
	Объект.ПризнакПредметаРасчета = ПолучитьОжидаемыйПризнакПредметаРасчета(Объект.ТипНоменклатурыПоУмолчанию, Объект.ВидПродукцииИС, Объект.ВидМаркировки, Объект.ПодакцизныйТовар);
КонецПроцедуры

&НаКлиенте
Процедура ТипНоменклатурыПоУмолчаниюПриИзменении(Элемент)
	
	УправлениеВидимостью(ЭтотОбъект);
	
	Если Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		И Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		И Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") 
		Тогда
		Объект.ИспользоватьХарактеристики = Ложь;
		Объект.ПроверятьЗаполнениеХарактеристики = Ложь;
	КонецЕсли;
	
	Если Не Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
		Объект.Производитель = Неопределено;
		Объект.ПодакцизныйТовар = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодакцизныйТовар", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИмпортнаяАлкогольнаяПродукция", "Видимость", Ложь);
	КонецЕсли;

	Если Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
		Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.БезНДС");
	КонецЕсли;
	
	Если Элементы.СпособПополнения.Видимость Тогда
		Если Не ЗначениеЗаполнено(Объект.СпособПополнения) Тогда
			Объект.СпособПополнения = ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка");
		КонецЕсли;
	Иначе
		Объект.СпособПополнения = ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.ПустаяСсылка");
	КонецЕсли;
	
	Если Элементы.НаправлениеДеятельности.Видимость Тогда
		Если Не ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ОсновноеНаправление");
		КонецЕсли;
	Иначе
		Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка");
	КонецЕсли;
	
	Если Элементы.МетодОценки.Видимость И Не ЗначениеЗаполнено(Объект.МетодОценки) Тогда
		Объект.МетодОценки = ПредопределенноеЗначение("Перечисление.МетодОценкиЗапасов.ПоСредней");
	КонецЕсли;
	
	Если Элементы.ВидСтавкиНДС.Видимость Тогда
		Если Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
			Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.БезНДС");
		Иначе
			Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Общая");
		КонецЕсли;
	Иначе
		Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.ПустаяСсылка");
	КонецЕсли;
	
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	ТипНоменклатурыПоУмолчаниюПриИзмененииНаСервере()
	
КонецПроцедуры 

&НаСервере
Процедура ТипНоменклатурыПоУмолчаниюПриИзмененииНаСервере()
	
	УстановитьВидимостьСчетовУчета();
	УстановитьЗначенияСчетовУчетаПоУмолчанию(); 
	
	// ПризнакПредметаРасчета
	ТребуетсяПризнакПредметаРасчета = РозничныеПродажиСервер.ТребуетсяПризнакПредметаРасчета(Объект.ТипНоменклатурыПоУмолчанию);
	Элементы.ПризнакПредметаРасчета.Видимость = ТребуетсяПризнакПредметаРасчета;
	Объект.ПризнакПредметаРасчета = ПолучитьОжидаемыйПризнакПредметаРасчета(Объект.ТипНоменклатурыПоУмолчанию, Объект.ВидПродукцииИС, Объект.ВидМаркировки, Объект.ПодакцизныйТовар);
	
КонецПроцедуры
&НаКлиенте
Процедура ПодконтрольнаяПродукцияВЕТИСПриИзменении(Элемент)
	
	УправлениеВидимостью(ЭтотОбъект);
	
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "ВетИС");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартииПриИзменении(Элемент)
	
	Если Объект.ИспользоватьЗаписьСкладскогоЖурналаВЕТИСПартии Тогда
		
		Элементы.ГруппаДатыПроизводства.Доступность = Истина;
		Элементы.ГруппаСрокаГодности.Доступность = Истина;
		
	Иначе
		
		Элементы.ГруппаДатыПроизводства.Доступность = Ложь;
		Элементы.ГруппаСрокаГодности.Доступность = Ложь;
		Объект.ИспользоватьДатуПроизводстваПартии = Ложь;
		Объект.ИспользоватьСрокГодностиПартии = Ложь;
		
	КонецЕсли;
	
	СгенерироватьШаблонНаименованияПартии(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСтавкиНДСПриИзменении(Элемент)
	Элементы.ДекорацияСтавкиНДСПодсказка.Видимость = Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Общая")
	ИЛИ Объект.ВидСтавкиНДС = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.ОбщаяРасчетная");
	
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "УчетнаяИнформация");
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.Склад.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "УчетнаяИнформация"); 
КонецПроцедуры

&НаКлиенте
Процедура ПодакцизныйТоварПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "УчетнаяИнформация");
	Объект.ПризнакПредметаРасчета = ПолучитьОжидаемыйПризнакПредметаРасчета(Объект.ТипНоменклатурыПоУмолчанию, Объект.ВидПродукцииИС, Объект.ВидМаркировки, Объект.ПодакцизныйТовар);
КонецПроцедуры

&НаКлиенте
Процедура МетодОценкиПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "УчетнаяИнформация");
КонецПроцедуры

&НаКлиенте
Процедура ВидАлкогольнойПродукцииПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "АлкогольнаяПродукция");
	УстановитьПризнакПодакцизныйТовар();
КонецПроцедуры

&НаКлиенте
Процедура СпособПополненияПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "ЗакупкаИПроизводство");
КонецПроцедуры

&НаКлиенте
Процедура ИмпортнаяАлкогольнаяПродукцияПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "ЗакупкаИПроизводство");
КонецПроцедуры

&НаКлиенте
Процедура СтранаПроисхожденияПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "ЗакупкаИПроизводство");
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "Хранение");
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "Хранение");
КонецПроцедуры

&НаКлиенте
Процедура ЦеноваяГруппаПриИзменении(Элемент)
	НоменклатураВДокументахКлиент.ОбновитьЗаголовкиГрупп(ЭтотОбъект, "ПрайсЛист");
КонецПроцедуры

&НаКлиенте
Процедура ВесовойПриИзменении(Элемент)
	Если Объект.Весовой И Объект.ЗапретитьВводДробногоКоличества Тогда
		Объект.ЗапретитьВводДробногоКоличества = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьВводДробногоКоличестваПриИзменении(Элемент)
	Если Объект.Весовой И Объект.ЗапретитьВводДробногоКоличества Тогда
		Объект.Весовой = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСвойстваНоменклатуры

&НаКлиенте
Процедура СвойстваНоменклатурыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСтрокиТаблицыДопРеквизитов(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьДопРеквизит(НаборСвойств_Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	
	ВыборСтрокиТаблицыДопРеквизитов(Элемент.ТекущиеДанные.Ссылка);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыПередУдалением(Элемент, Отказ)
	
	Для каждого УдаляемаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		УдаляемоеСвойство = СвойстваНоменклатуры.НайтиПоИдентификатору(УдаляемаяСтрока).Ссылка;
		СвойстваНоменклатурыПередУдалениемНаСервере(УдаляемоеСвойство);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СвойстваНоменклатурыПередУдалениемНаСервере(УдаляемоеСвойство)
	
	ОбъектНаборСвойств = Объект.НаборСвойств.ПолучитьОбъект();
	ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	Строка = ТЧ.Найти(УдаляемоеСвойство, "Свойство");
	ТЧ.Удалить(Строка);
	ОбъектНаборСвойств.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СвойстваНоменклатурыОбработкаВыбораНаСервере(ВыбранноеЗначение);
	Модифицированность = Истина;
	ЗаполнитьСписокСвойствТекущегоНабора(НаборСвойств_Номенклатура);
	
КонецПроцедуры

&НаСервере
Процедура СвойстваНоменклатурыОбработкаВыбораНаСервере(МассивВыбранныхЗначений)
	
	Для каждого ВыбранноеЗначение Из МассивВыбранныхЗначений Цикл
		
		Если ВыбранноеЗначение.НаборСвойств <> Объект.НаборСвойств
			И ВыбранноеЗначение.НаборСвойств = Объект.НаборСвойствХарактеристики Тогда
			
			ВыбранноеЗначениеОбъект = ВыбранноеЗначение.ПолучитьОбъект();
			ВыбранноеЗначениеОбъект.НаборСвойств = Объект.НаборСвойствХарактеристики;
			ВыбранноеЗначениеОбъект.Записать();
			
		КонецЕсли;
		
		ОбъектНаборСвойств = Объект.НаборСвойств.ПолучитьОбъект();
		ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
		Строка = ТЧ.Добавить();
		Строка.Свойство = ВыбранноеЗначение;
		ОбъектНаборСвойств.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСвойстваХарактеристики

&НаКлиенте
Процедура СвойстваХарактеристикиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСтрокиТаблицыДопРеквизитов(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьДопРеквизит(НаборСвойств_ХарактеристикиНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущийЭлемент.Имя = "СвойстваХарактеристикиСортировать" 
		Тогда	
		ВыборСтрокиТаблицыДопРеквизитов(Элемент.ТекущиеДанные.Ссылка);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиПередУдалением(Элемент, Отказ)
	
	УдаляемоеСвойство = Элемент.ТекущиеДанные.Ссылка;
	СвойстваХарактеристикиПередУдалениемНаСервере(УдаляемоеСвойство);
		
КонецПроцедуры

&НаСервере
Процедура СвойстваХарактеристикиПередУдалениемНаСервере(УдаляемоеСвойство)

	ОбъектНаборСвойств = Объект.НаборСвойствХарактеристики.ПолучитьОбъект();
	ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	Строка = ТЧ.Найти(УдаляемоеСвойство, "Свойство");
	
	Если Не Строка = Неопределено Тогда
		ТЧ.Удалить(Строка);
		ОбъектНаборСвойств.Записать();
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Свойство", УдаляемоеСвойство);
	
	СтрокиСортировки = Объект.ПорядокСортировки.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаСортировки Из СтрокиСортировки Цикл
		Объект.ПорядокСортировки.Удалить(СтрокаСортировки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СвойстваХарактеристикиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СвойстваХарактеристикиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	Модифицированность = Истина;
	ЗаполнитьСписокСвойствТекущегоНабора(НаборСвойств_ХарактеристикиНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура СвойстваХарактеристикиОбработкаВыбораНаСервере(МассивВыбранныхЗначений)
	
	Для каждого ВыбранноеЗначение Из МассивВыбранныхЗначений Цикл
		
		Если ВыбранноеЗначение.НаборСвойств = Объект.НаборСвойств
			И ВыбранноеЗначение.НаборСвойств <> Объект.НаборСвойствХарактеристики Тогда
			
			ВыбранноеЗначениеОбъект = ВыбранноеЗначение.ПолучитьОбъект();
			ВыбранноеЗначениеОбъект.НаборСвойств = Объект.НаборСвойствХарактеристики;
			ВыбранноеЗначениеОбъект.Записать();
			
		КонецЕсли;
		
		ОбъектНаборСвойств = Объект.НаборСвойствХарактеристики.ПолучитьОбъект();
		ТЧ = ОбъектНаборСвойств.ДополнительныеРеквизиты;
		Строка = ТЧ.Добавить();
		Строка.Свойство = ВыбранноеЗначение;
		ОбъектНаборСвойств.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьНаборыСвойств()

	Если Не ЗначениеЗаполнено(НаборСвойств_Номенклатура) Тогда
		НаборСвойств_Номенклатура = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НаборСвойств_ХарактеристикиНоменклатуры) Тогда
		НаборСвойств_ХарактеристикиНоменклатуры = УправлениеСвойствами.НаборСвойствПоИмени(
		"Справочник_ХарактеристикиНоменклатуры");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СпозиционироватьсяНаРеквизитеИВыделитьГруппу()
	
	Если Не ЗначениеЗаполнено(ИмяРеквизитаДляПозиционирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизитаДляПозиционирования = "Производитель" Тогда
		 ИмяРеквизитаДляПозиционирования = "ИмпортнаяАлкогольнаяПродукция"
	 КонецЕсли;
	 
	РеквизитПозиционирования = Элементы.Найти(ИмяРеквизитаДляПозиционирования);
	
	Если РеквизитПозиционирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСвойствоЭлементаФормы(РеквизитПозиционирования, "ШрифтЗаголовка") Тогда
		РеквизитПозиционирования.ШрифтЗаголовка = Новый Шрифт(, 11, Истина);
	КонецЕсли;
	
	ТекущийЭлемент = РеквизитПозиционирования;
	РеквизитПозиционирования.АктивизироватьПоУмолчанию = Истина;
	
	Если ТипЗнч(РеквизитПозиционирования.Родитель) = Тип("ГруппаФормы") Тогда
		РеквизитПозиционирования.Родитель.ШрифтЗаголовка = Новый Шрифт(, 13, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСвойствоЭлементаФормы(ЭлементФормы, СвойствоЭлемента)
	
	СтруктураСвойств = Новый Структура;
	СтруктураСвойств.Вставить(СвойствоЭлемента, NULL);
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, ЭлементФормы);
	
	Возврат ?(СтруктураСвойств[СвойствоЭлемента] = NULL, Ложь, Истина);

КонецФункции

&НаСервере
Процедура УстановитьНастройкиСерийПоУмолчаниюГИСМ()
	
	СерииНоменклатурыУНФ.УстановитьНастройкиСерийПоУмолчаниюГИСМ(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакПодакцизныйТовар()
	
	МаркируемаяПродукцияПодакцизная = (Объект.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"))
								Или (Объект.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"))
								Или (Объект.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"))
								Или (Объект.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"))
								Или ЗначениеЗаполнено(Объект.ВидАлкогольнойПродукции);
	Объект.ПодакцизныйТовар = МаркируемаяПродукцияПодакцизная;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьГруппуМаркировки()
	
	Если Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.НеМаркируется") Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Ложь;
		Элементы.ТНВЭДГИСМ.Видимость = ЛОжь;
	ИначеЕсли Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.КонтрольныйИдентификационныйЗнак") Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Истина;
		Элементы.ТНВЭДГИСМ.Видимость = ЛОжь;
	ИначеЕсли Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.МаркируемаяПродукция") Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Ложь;
		Элементы.ТНВЭДГИСМ.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТипов()
	
	Список = Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора;
	
	ОграничениеТипаНоменклатуры = Неопределено;
	Параметры.ЗначенияЗаполнения.Свойство("ТипНоменклатуры", ОграничениеТипаНоменклатуры);
	
	Если НЕ ОграничениеТипаНоменклатуры = Неопределено Тогда
		Если (ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("Массив") Или ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("ФиксированныйМассив")) 
			И ОграничениеТипаНоменклатуры.Количество() > 0 Тогда
			
			Список.Очистить();
			Для каждого Тип Из ОграничениеТипаНоменклатуры Цикл
				Список.Добавить(Тип);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
			
			Список.Очистить();
			Список.Добавить(ОграничениеТипаНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Операция);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ТипНоменклатурыПоУмолчанию.СписокВыбора.НайтиПоЗначению(Объект.ТипНоменклатурыПоУмолчанию) = Неопределено Тогда
		Объект.ТипНоменклатурыПоУмолчанию = Список.Получить(0).Значение;
	КонецЕсли;
	
	Если Список.Количество() = 1 Тогда
		Элементы.ТипНоменклатурыПоУмолчанию.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТипДополнительногоРеквизитаСодержитЗначенияСвойств(ТипЗначения)
	
	Возврат ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"))
		ИЛИ ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокСвойствТекущегоНабора(ВладелецНабораЭлементов)
	
	Если ВладелецНабораЭлементов = НаборСвойств_Номенклатура Тогда
		НаборСвойств = Объект.НаборСвойств;
		Таблица = СвойстваНоменклатуры;
	ИначеЕсли ВладелецНабораЭлементов = НаборСвойств_ХарактеристикиНоменклатуры Тогда
		НаборСвойств = Объект.НаборСвойствХарактеристики;
		Таблица = СвойстваХарактеристики;
	КонецЕсли;
	
	Таблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДопРеквизиты.Свойство КАК Ссылка,
	|	ДопРеквизиты.НомерСтроки КАК НомерСтрокиДляСортировки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
	|ГДЕ
	|	ДопРеквизиты.Ссылка = &НаборСвойств
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Заголовок = Выборка.Ссылка.Заголовок;
		
		Если ТипДополнительногоРеквизитаСодержитЗначенияСвойств(Выборка.Ссылка.ТипЗначения) Тогда
			
			НоваяСтрока.ТипЗначения = Строка(Новый ОписаниеТипов(Выборка.Ссылка.ТипЗначения,,
				"СправочникСсылка.ЗначенияСвойствОбъектовИерархия,СправочникСсылка.ЗначенияСвойствОбъектов"));
			
			ПредставлениеЗначений = ПредставлениеЗначенийСвойств(Выборка.Ссылка);
			Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначения) Тогда
				ПредставлениеЗначений = ПредставлениеЗначений + ", ";
			КонецЕсли;
			
			НоваяСтрока.ТипЗначения = ПредставлениеЗначений + НоваяСтрока.ТипЗначения;
			
		Иначе
			
			НоваяСтрока.ТипЗначения = Строка(Выборка.Ссылка.ТипЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеЗначенийСвойств(ДополнительныйРеквизит)
	
	Запрос = Новый Запрос;
	ВладелецДополнительныхЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныйРеквизит,
		"ВладелецДополнительныхЗначений");
	Если ЗначениеЗаполнено(ВладелецДополнительныхЗначений) Тогда
		Запрос.УстановитьПараметр("Владелец", ВладелецДополнительныхЗначений);
	Иначе
		Запрос.УстановитьПараметр("Владелец", ДополнительныйРеквизит);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 4
	|	ЗначенияСвойствОбъектов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &Владелец
	|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
	|	И НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 4
	|	ЗначенияСвойствОбъектовИерархия.Наименование
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
	|ГДЕ
	|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец
	|	И НЕ ЗначенияСвойствОбъектовИерархия.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &Владелец
	|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
	|ГДЕ
	|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПервыеЗначения = РезультатыЗапроса[0].Выгрузить().ВыгрузитьКолонку("Наименование");
	
	Если ПервыеЗначения.Количество() = 0 Тогда
		Если РезультатыЗапроса[1].Пустой() Тогда
			ПредставлениеЗначений = НСтр("ru = 'Значения еще не введены'");
		Иначе
			ПредставлениеЗначений = НСтр("ru = 'Значения помечены на удаление'");
		КонецЕсли;
	Иначе
		ПредставлениеЗначений = "";
		Номер = 0;
		Для каждого Значение Из ПервыеЗначения Цикл
			Номер = Номер + 1;
			Если Номер = 4 Тогда
				ПредставлениеЗначений = ПредставлениеЗначений + ",...";
				Прервать;
			КонецЕсли;
			ПредставлениеЗначений = ПредставлениеЗначений + ?(Номер > 1, ", ", "") + Значение;
		КонецЦикла;
	КонецЕсли;
	
	ПредставлениеЗначений = "<" + ПредставлениеЗначений + ">";
	
	Возврат ПредставлениеЗначений;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакПоляДляСортировки()
	
	Если Объект.ПорядокСортировки.Количество()
		Тогда
		Для Каждого СтрокаПорядокСортировки Из Объект.ПорядокСортировки Цикл
			
			СтрокаССортировкой = СвойстваХарактеристики.НайтиСтроки(Новый Структура("Ссылка", СтрокаПорядокСортировки.Свойство));
			
			Если СтрокаССортировкой.Количество()
				Тогда
				СтрокаССортировкой[0].Сортировать = Истина;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДопРеквизитов()
	
	ЗаполнитьСписокСвойствТекущегоНабора(НаборСвойств_Номенклатура);
	ЗаполнитьСписокСвойствТекущегоНабора(НаборСвойств_ХарактеристикиНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтрокиТаблицыДопРеквизитов(Свойство)
	
	ПараметрыФормы = Новый Структура("Ключ", Свойство);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Форма.ФормаЭлемента", 
		ПараметрыФормы, 
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизит(ВладелецНабораЭлементов)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Перед началом управления свойствами необходимо записать объект. Записать?'");
		
		ДополнительныеПараметры = Новый Структура("ВладелецНабораЭлементов", ВладелецНабораЭлементов);
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьДопРеквизитЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуВыбораДопРеквизита(ВладелецНабораЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизитЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораДопРеквизита(ДополнительныеПараметры.ВладелецНабораЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДопРеквизита(ВладелецНабораЭлементов)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДополнительноеСведение = Ложь;
	ВыбранныеДопРеквизиты = ВыбранныеДопРеквизитыНабора(ВладелецНабораЭлементов);
	
	Отбор = Новый Структура("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
	НаборыСвойств = Новый Массив;
	НаборыСвойств.Добавить(Объект.НаборСвойств);
	НаборыСвойств.Добавить(Объект.НаборСвойствХарактеристики);
	Отбор.Вставить("НаборСвойств", НаборыСвойств);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
	ПараметрыФормы.Вставить("ВыбранныеЗначения", ВыбранныеДопРеквизиты);
	
	Если ЗначениеЗаполнено(Объект.НаборСвойств)
		И ВладелецНабораЭлементов = НаборСвойств_Номенклатура Тогда
		ПараметрыФормы.Вставить("НаборСвойств", Объект.НаборСвойств);
	ИначеЕсли ЗначениеЗаполнено(Объект.НаборСвойствХарактеристики)
		И ВладелецНабораЭлементов = НаборСвойств_ХарактеристикиНоменклатуры Тогда
		ПараметрыФормы.Вставить("НаборСвойств", Объект.НаборСвойствХарактеристики);
	Иначе
		ПараметрыФормы.Вставить("НаборСвойств", ВладелецНабораЭлементов);
	КонецЕсли;
	
	ВладелецФормыВыбора = ТаблицаФормыДопРеквизитов(ВладелецНабораЭлементов);
	
	ОткрытьФорму("Справочник.КатегорииНоменклатуры.Форма.ФормаВыбораДополнительногоРеквизита",
		ПараметрыФормы, 
		ВладелецФормыВыбора,
		УникальныйИдентификатор);
	
КонецПроцедуры

// Функция возвращает массив выбранных доп. реквизитов соответствующего набора.
//
&НаКлиенте
Функция ВыбранныеДопРеквизитыНабора(ВладелецНабораЭлементов)
	
	ДопРеквизитыНабора = Новый Массив;
	КоллекцияДопРеквизитов = КоллекцияДопРеквизитов(ЭтотОбъект, ВладелецНабораЭлементов);
	
	Для каждого ЭлементКоллекции Из КоллекцияДопРеквизитов Цикл
		ДопРеквизитыНабора.Добавить(ЭлементКоллекции.Ссылка);
	КонецЦикла;
	
	Возврат ДопРеквизитыНабора;
	
КонецФункции

// Функция возвращает таблицу формы - таблицу доп. реквизитов,
// относящуюся к нужному набору.
//
&НаКлиенте
Функция ТаблицаФормыДопРеквизитов(ВладелецНабораЭлементов)
	
	Если ВладелецНабораЭлементов = НаборСвойств_Номенклатура Тогда
		Возврат Элементы.СвойстваНоменклатуры;
	ИначеЕсли ВладелецНабораЭлементов = НаборСвойств_ХарактеристикиНоменклатуры Тогда
		Возврат Элементы.СвойстваХарактеристики;
	КонецЕсли;
	
КонецФункции

// Функция возвращает коллекцию - таблицу доп. реквизитов,
// относящуюся к нужному набору (набору товаров и услуг, характеристик).
//
&НаКлиенте
Функция КоллекцияДопРеквизитов(Форма, ВладелецНабораЭлементов)
	
	Если ВладелецНабораЭлементов = НаборСвойств_Номенклатура Тогда
		Возврат Форма.СвойстваНоменклатуры;
	ИначеЕсли ВладелецНабораЭлементов = НаборСвойств_ХарактеристикиНоменклатуры Тогда
		Возврат Форма.СвойстваХарактеристики;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(Форма) 
	
	Форма.Элементы.ГруппаСвойстваНоменклатурыХарактеристики.Доступность = Истина;
	
	Форма.Элементы.Весовой.Видимость = (Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	
	// ВЕТИС
	Форма.Элементы.ГруппаПараметровВЕТИС.Доступность = Форма.Объект.ПодконтрольнаяПродукцияВЕТИС;
	// Конец ВЕТИС
	
	Форма.Элементы.ВидСтавкиНДС.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), Истина, Ложь);
	
	Форма.Элементы.СпособПополнения.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"), Истина, Ложь);
	
	Форма.Элементы.СрокИсполненияЗаказа.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"), Истина, Ложь);
	
	Форма.Элементы.МетодОценки.Видимость = Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	
	Форма.Элементы.Склад.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), Истина, Ложь);
	
	Форма.Элементы.Ячейка.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), Истина, Ложь);
								
	Форма.Элементы.НаправлениеДеятельности.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
								ИЛИ Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), Истина, Ложь);
	
	Форма.Элементы.ГруппаАлкогольнаяПродукция.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") 
															И Форма.ВестиСведенияДляДекларацийПоАлкогольнойПродукции, Истина, Ложь);
		
	Форма.Элементы.ГруппаВЕТИС.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") 
											И Форма.ВестиУчетПодконтрольныхТоваровВЕТИС, Истина, Ложь);

	Форма.Элементы.ГруппаМаркировка.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") 
												И Форма.ВестиУчетМаркировкиПродукцииВГИСМ, Истина, Ложь);

	Форма.Элементы.ГруппаПродукцияИС.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"),
													Истина, Ложь);
	
	Форма.Элементы.ГруппаПрайсЛист.Видимость = ?(Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), Ложь, Истина);
	
	Если Не Форма.Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПодакцизныйТовар", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ИмпортнаяАлкогольнаяПродукция", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьШаблонНаименованияПартии(Элемент)
	
	Элементы.ГруппаПараметровВЕТИС.Подсказка = ИнтеграцияВЕТИСУНФКлиент.СгенерироватьШаблонНаименованияПартии(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	Элементы.СчетУчетаЗапасов.Видимость = ?((НЕ ЗначениеЗаполнено(Объект.ТипНоменклатурыПоУмолчанию))
		 ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас
		 ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат,
		Истина,
		Ложь);
	
	Элементы.СчетУчетаЗатрат.Видимость = ?((НЕ ЗначениеЗаполнено(Объект.ТипНоменклатурыПоУмолчанию))
		 ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас
		 ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Работа
		 ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Операция
		 ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Услуга
		 ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат,
		Истина,
		Ложь);
	
	Элементы.СчетУчетаДоходов.Видимость = ?((НЕ ЗначениеЗаполнено(Объект.ТипНоменклатурыПоУмолчанию))
		 ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат,
		Истина,
		Ложь);
		
	Если Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас
		ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Услуга Тогда
		СебестоимостьБезНДС = ПолучитьФункциональнуюОпцию("СебестоимостьБезНДС");
		Элементы.СчетУчетаНДСПоПриобретеннымЦенностям.Видимость = СебестоимостьБезНДС;
		Элементы.СчетУчетаНДСПоРеализации.Видимость = СебестоимостьБезНДС;
	Иначе
		Элементы.СчетУчетаНДСПоПриобретеннымЦенностям.Видимость = Ложь;
		Элементы.СчетУчетаНДСПоРеализации.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияСчетовУчетаПоУмолчанию()
	
	Объект.СчетУчетаЗапасов = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
	Если Не ЗначениеЗаполнено(Объект.ТипНоменклатурыПоУмолчанию)
		Или Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		Или Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
		Объект.СчетУчетаЗапасов = Справочники.Номенклатура.СчетУчетаЗапасов();
	КонецЕсли;
	
	Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
	Если Не ЗначениеЗаполнено(Объект.ТипНоменклатурыПоУмолчанию)
		Или Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		Или Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
		Или Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция")
		Или Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
		Если ФОИспользоватьПодсистемуПроизводство Тогда
			Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.НезавершенноеПроизводство");
		Иначе
			Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
	КонецЕсли;
	
	Объект.СчетУчетаДоходов = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
	Если Объект.ТипНоменклатурыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
		Объект.СчетУчетаДоходов = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПрочиеДоходы");
	КонецЕсли;
	
	Объект.СчетУчетаНДСПоПриобретеннымЦенностям = ПредопределенноеЗначение("ПланСчетов.Управленческий.НДСПоПриобретеннымЦенностям");
	Объект.СчетУчетаНДСПоРеализации = ПредопределенноеЗначение("ПланСчетов.Управленческий.Продажи_НДС");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияРеквизитовПоУмолчанию()
	
	УстановитьВидимостьСчетовУчета();
	
	// НДС
	
	Элементы.ВидСтавкиНДС.Видимость = ?(Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Услуга
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Работа
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, Истина, Ложь);
	
	Элементы.ВидСтавкиНДС.РежимВыбораИзСписка = Истина;
	Элементы.ВидСтавкиНДС.СписокВыбора.Очистить();
	СоответствиеСтавок = Справочники.СтавкиНДС.СоответствиеСтавокНДС(ТекущаяДатаСеанса());
	Для Каждого ЗначениеСоответствия Из СоответствиеСтавок Цикл
		Если ЗначениеЗаполнено(ЗначениеСоответствия.Значение) Тогда
			Элементы.ВидСтавкиНДС.СписокВыбора.Добавить(ЗначениеСоответствия.Ключ,
			Строка(ЗначениеСоответствия.Значение));
		КонецЕсли;
	КонецЦикла;
	Элементы.ДекорацияСтавкиНДСПодсказка.Видимость = Элементы.ВидСтавкиНДС.Видимость И (Объект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая
	ИЛИ Объект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ОбщаяРасчетная);
	// Конец НДС
	
	Элементы.СпособПополнения.Видимость = ?(Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас, Истина, Ложь);
	
	Элементы.Склад.Видимость = ?(Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас, Истина, Ложь);
	Элементы.Ячейка.Видимость = ?(Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, Истина, Ложь);
	
	Элементы.НаправлениеДеятельности.Видимость = ?(Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Услуга
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Работа
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, Истина, Ложь);
	
	Элементы.СрокИсполненияЗаказа.Видимость = ?(Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Услуга
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Работа, Истина, Ложь);
	
	Элементы.МетодОценки.Видимость = Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.Запас
								ИЛИ Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		УстановитьЗначенияСчетовУчетаПоУмолчанию();
		Если Элементы.СпособПополнения.Видимость Тогда
			Объект.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
		Иначе
			Объект.СпособПополнения = Перечисления.СпособыПополненияЗапасов.ПустаяСсылка();
		КонецЕсли;
		
		Если Элементы.НаправлениеДеятельности.Видимость Тогда
			Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		Иначе
			Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
		КонецЕсли;
		
		Если Элементы.МетодОценки.Видимость Тогда
			Объект.МетодОценки = Перечисления.МетодОценкиЗапасов.ПоСредней;
		КонецЕсли;
		
		Если Элементы.ВидСтавкиНДС.Видимость Тогда
			Если Объект.ТипНоменклатурыПоУмолчанию = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
				Объект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.БезНДС;
			Иначе
				Объект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
			КонецЕсли;
		Иначе
			Объект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ПустаяСсылка();
		КонецЕсли;
		
		Объект.СрокИсполненияЗаказа = 1;
		
		Объект.ПризнакПредметаРасчета = ПолучитьОжидаемыйПризнакПредметаРасчета(Объект.ТипНоменклатурыПоУмолчанию, Объект.ВидПродукцииИС, Объект.ВидМаркировки, Объект.ПодакцизныйТовар);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_НажатиеРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеГиперссылки(ЭтотОбъект, Элемент, СтандартнаяОбработка,
		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
		
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиРаботаСНоменклатурой(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеГиперссылки(ЭтотОбъект, Элемент, СтандартнаяОбработка,
		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_НачалоВыбораРаботаСНоменклатурой(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ВыбратьОбъектСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка, Ложь,
		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОчисткаРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеОчиститьКатегорию(ЭтотОбъект);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_НажатиеРежимОбновленияРаботаСНоменклатурой(Элемент)
	
	РаботаСНоменклатуройКлиент.НажатиеРежимОбновления(ЭтотОбъект, ПодготовитьДанныеФормы(),
		Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект));
		
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОткрытьРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ОткрытьКарточкуОбъектаСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыВыбораОбъектаСервиса(ДанныеОбъекта, ДополнительныеПараметры) Экспорт 
	
	РаботаСНоменклатуройКлиент.ОбработкаОповещенияЗакрытиеФормыВыбора(
		ДанныеОбъекта, ДополнительныеПараметры, ПодготовитьДанныеФормы(),
			Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыЗаполненияОбъекта(ПараметрыЗакрытияФормы, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы)
	
	РаботаСНоменклатурой.ЗаполнитьРеквизитыФормы(ЭтотОбъект, ПараметрыЗакрытияФормы);
	
	Если СвойстваНоменклатуры.Количество() <> 0 ИЛИ СвойстваХарактеристики.Количество() <> 0 Тогда
		Элементы.ГруппаСвойстваНоменклатурыХарактеристики.Доступность = Ложь;
		ПеречитыватьОбъектПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеФормы()
	
	Возврат РаботаСНоменклатурой.ПодготовитьДанныеДляИнтерактивногоЗаполнения(ЭтотОбъект);
			
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьОжидаемыйПризнакПредметаРасчета(ТипНоменклатуры, ВидПродукцииИС, ВидМаркировки, ПодакцизныйТовар = Ложь)
	
	Результат = РозничныеПродажиСервер.ПолучитьОжидаемыйПризнакПредметаРасчета(ТипНоменклатуры, ВидПродукцииИС, ВидМаркировки, ПодакцизныйТовар); 
	Возврат Результат;
	
КонецФункции

#КонецОбласти
