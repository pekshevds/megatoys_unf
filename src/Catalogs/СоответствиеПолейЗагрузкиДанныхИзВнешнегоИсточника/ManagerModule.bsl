#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Доступные поля загрузки данных из внешнего источника
// 
// Параметры:
// 	ОбъектЗагрузки - СправочникСсылка.ИдентификаторыОбъектовМетаданных - .
// 	ИмяТабличнойЧасти - Строка - .
// 	ВключаяДополнительныеРеквизиты - Булево - .
// 	ПолноеИмяОбъектаЗаполнения - Строка - .
// Возвращаемое значение:
// 	Структура - поля, доступные для загрузки данных из внешнего источника
Функция ДоступныеПоляЗагрузкиДанныхИзВнешнегоИсточника(ОбъектЗагрузки, ИмяТабличнойЧасти = "",
	ВключаяДополнительныеРеквизиты = Ложь, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	Перем ТаблицаПолейЗагрузки;

	ДоступныеПоляЗагрузкиДанных = Новый Структура;
	Если Не ЗначениеЗаполнено(ОбъектЗагрузки) Тогда

		Возврат ДоступныеПоляЗагрузкиДанных;

	КонецЕсли;

	НастройкиЗагрузкиДанных = ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьНастройкиФормыПомощникаЗагрузкиПоУмолчанию();
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Не ПустаяСтрока(ИмяТабличнойЧасти));
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяОбъектаЗаполнения", ПолноеИмяОбъектаЗаполнения);

	ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьТаблицуПолейОписанияЗагрузки(ТаблицаПолейЗагрузки);

	МенеджерОбъектаЗагрузки = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектЗагрузки.ПолноеИмя);
	МенеджерОбъектаЗагрузки.ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных);

	Для Каждого СтрокаТаблицы Из ТаблицаПолейЗагрузки Цикл

		Если СтрокаТаблицы.ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов() Тогда

			Продолжить;

		КонецЕсли;

		ДоступныеПоляЗагрузкиДанных.Вставить(СтрокаТаблицы.ИмяПоля, СтрокаТаблицы.ПредставлениеПоля);

	КонецЦикла;

	Если ВключаяДополнительныеРеквизиты Тогда

		Владелец = ВладелецДополнительныхРеквизитовПоПолномуИмени(ОбъектЗагрузки.ПолноеИмя);
		Если Владелец <> Неопределено Тогда

			ЗагрузкаДанныхИзВнешнегоИсточника.ПодготовитьСоответствиеПоДополнительнымРеквизитам(
				НастройкиЗагрузкиДанных, Владелец);

			Для Каждого ЭлементСоответствия Из НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов Цикл

				ДоступныеПоляЗагрузкиДанных.Вставить(ЭлементСоответствия.Значение, ЭлементСоответствия.Ключ);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Возврат ДоступныеПоляЗагрузкиДанных;

КонецФункции

// Поставляемая настройка по идентификатору.
// 
// Параметры:
//  ИдентификаторНастройки - УникальныйИдентификатор - Идентификатор настройки
// 
// Возвращаемое значение:
//  Структура - Поставляемая настройка по идентификатору:
// 		* ВерсияНастройки - Число - версия настройки
// 		* Настройка - Строка - настройка строкой JSON
//
Функция ПоставляемаяНастройкаПоИдентификатору(ИдентификаторНастройки) Экспорт

	Если ИдентификаторНастройки = ИдентификаторWildberriesУведомлениеОВыкупе() Тогда

		Возврат ПоставляемаяНастройкаWildberriesУведомлениеОВыкупе();

	ИначеЕсли ИдентификаторНастройки = ИдентификаторWildberriesДетальный() Тогда

		Возврат ПоставляемаяНастройкаWildberriesДетальный();

	ИначеЕсли ИдентификаторНастройки = ИдентификаторOzonПозаказный() Тогда

		Возврат ПоставляемаяНастройкаOzonПозаказный();

	ИначеЕсли ИдентификаторНастройки = ИдентификаторOzonСводный() Тогда

		Возврат ПоставляемаяНастройкаOzonСводный();

	КонецЕсли;

КонецФункции

// Настройку в таблицу.
// 
// Параметры:
//  ПоставляемаяНастройка - Строка - Поставляемая настройка
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Настройку в таблицу:
// 		* НомерКолонки - Число -
// 		* ИмяПоля - Строка - имя поля
// 		* ПредставлениеПоля - Строка - представление поля
//
Функция НастройкуВТаблицу(ПоставляемаяНастройка) Экспорт

	ТаблицаНастроек = ПустаяТаблицаНастройки();

	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ПоставляемаяНастройка);
	МассивПолей = ПрочитатьJSON(Чтение);

	Для Каждого Поле Из МассивПолей Цикл
		Запись = ТаблицаНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Поле);
	КонецЦикла;

	ТаблицаНастроек.Сортировать("НомерКолонки");

	Возврат ТаблицаНастроек;

КонецФункции

// Найти по идентификатору поставляемой настройки.
// 
// Параметры:
//  ИдентификаторПоставляемогоЭлемента - УникальныйИдентификатор - Идентификатор поставляемого элемента
//  ПроверятьВерсиюНастройки - Булево - Проверять версию настройки
// 
// Возвращаемое значение:
//  СправочникСсылка.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника, Произвольный - Найти по идентификатору
//                                                                                      поставляемой настройки
//
Функция НайтиПоИдентификаторуПоставляемойНастройки(ИдентификаторПоставляемогоЭлемента, 
			ПроверятьВерсиюНастройки = Ложь) Экспорт
			
	Если ИдентификаторПоставляемогоЭлемента = Неопределено Тогда
		Возврат Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.ПустаяСсылка();
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.Ссылка
				   |ИЗ
				   |	Справочник.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника КАК СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника
				   |ГДЕ
				   |	СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.ИдентификаторПоставляемогоЭлемента = &ИдентификаторПоставляемогоЭлемента
				   |	И НЕ СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.Недействителен";
	Запрос.УстановитьПараметр("ИдентификаторПоставляемогоЭлемента", ИдентификаторПоставляемогоЭлемента);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.СоответствиеПолейЗагрузкиДанныхИзВнешнегоИсточника.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СоответствиеСсылка = Выборка.Ссылка;
		Если ПроверятьВерсиюНастройки 
			И СоответствиеСсылка.ВерсияПоставляемойНастройки < ВерсияПоставляемойНастройки() Тогда

			ОбновитьЭлементПоставляемойНастройки(СоответствиеСсылка);

		КонецЕсли;
		Возврат СоответствиеСсылка;
	КонецЕсли;

КонецФункции

// Идентификатор wildberries уведомление о выкупе.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Идентификатор wildberries уведомление о выкупе
//
Функция ИдентификаторWildberriesУведомлениеОВыкупе() Экспорт

	Возврат Новый УникальныйИдентификатор("1befe6fc-2cf5-11ed-a261-0242ac120002");

КонецФункции

// Идентификатор wildberries детальный.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Идентификатор wildberries детальный
//
Функция ИдентификаторWildberriesДетальный() Экспорт

	Возврат Новый УникальныйИдентификатор("f853a22e-2d0d-11ed-a261-0242ac120002");

КонецФункции

// Идентификатор ozon позаказный.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Идентификатор ozon позаказный
//
Функция ИдентификаторOzonПозаказный() Экспорт

	Возврат Новый УникальныйИдентификатор("283cc024-2cf5-11ed-a261-0242ac120002");

КонецФункции

// Идентификатор ozon сводный.
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Идентификатор ozon сводный
//
Функция ИдентификаторOzonСводный() Экспорт

	Возврат Новый УникальныйИдентификатор("d116a416-3809-11ed-a261-0242ac120002");

КонецФункции

// Версия поставляемой настройки.
// 
// Возвращаемое значение:
//  Число - Версия поставляемой настройки
//
Функция ВерсияПоставляемойНастройки() Экспорт

	Возврат 712221932;

КонецФункции

// Структура поиска строк уведомление о выкупе wildberries.
// 
// Возвращаемое значение:
//  Структура - Структура поиска строк уведомление о выкупе wildberries:
// 		* СтрокаПоискаНомера - Строка - строка поиска номера
// 		* СтрокаПоискаДаты - Строка - строка поиска даты
// 		* АдресОбластиШапки - Строка - адрес области шапки
// 		* СтрокаПоискаПодвала - Строка - строка поиска подвала
// 		* ВысотаПодвала - Число - высота подвала
// 		* УдаляемыеКолонки - Массив из Строка - названия колонок
//
Функция СтруктураПоискаСтрокУведомлениеОВыкупеWildberries() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("СтрокаПоискаНомера", НСтр("ru='УВЕДОМЛЕНИЕ О ВЫКУПЕ №'"));
	Результат.Вставить("СтрокаПоискаДаты", НСтр("ru = 'ОТ'"));
	Результат.Вставить("АдресОбластиШапки", "R1:R9");
	Результат.Вставить("СтрокаПоискаПодвала", НСтр("ru='Итого:'"));
	Результат.Вставить("ВысотаПодвала", 13);
	УдаляемыеКолонки = Новый Массив;
	УдаляемыеКолонки.Добавить("C1");
	Результат.Вставить("УдаляемыеКолонки", УдаляемыеКолонки);

	Возврат Результат;

КонецФункции

// Структура поиска строк отчет с детализацией wildberries.
// 
// Возвращаемое значение:
//  Структура - Структура поиска строк отчет с детализацией wildberries:
// 		* НомерНачальнойСтроки - Число - номер начальной строки
// 		* НомерКолонкиПоставка - Число - номер колонки поставка
// 		* НомерКолонкиТипДокумента - Число - номер колонки тип документа
// 		* НомерКолонкиКоличество - Число - номер колонки количество
// 		* НомерКолонкиСтрана - Число - номер колонки страна
// 		* НомерКолонкиОбоснованияДляОплаты - Число - номер колонки обоснования оплаты
// 		* ОбоснованияПродажи - Массив из Строка - ключевые значения продажи
// 		* ОбоснованияВозврата - Массив из Строка - ключевые значения возвратов
// 		* ТипДокументаПродажа - Строка - тип документа продажа
// 		* ТипДокументаВозврат - Строка - тип документа возврат
//
Функция СтруктураПоискаСтрокОтчетСДетализациейWildberries() Экспорт

	Соответствие = НайтиПоИдентификаторуПоставляемойНастройки(ИдентификаторWildberriesДетальный());
	
	Результат = Новый Структура;
	Результат.Вставить("НомерНачальнойСтроки", 2);
	ОбоснованияПродажи = Новый Массив;
	ОбоснованияПродажи.Добавить("ПРОДАЖА");
	ОбоснованияПродажи.Добавить("КОРРЕКТНАЯ ПРОДАЖА");
	Результат.Вставить("ОбоснованияПродажи", ОбоснованияПродажи);
	ОбоснованияВозврата = Новый Массив;
	ОбоснованияВозврата.Добавить("ВОЗВРАТ");
	Результат.Вставить("ОбоснованияВозврата", ОбоснованияВозврата);
	Результат.Вставить("ТипДокументаПродажа", "ПРОДАЖА");
	Результат.Вставить("ТипДокументаВозврат", "ВОЗВРАТ");
	
	Найден = Соответствие.СоответствияПолей.Найти("НомерПоставки");
	Если Найден <> Неопределено Тогда
		Результат.Вставить("НомерКолонкиПоставка", Найден.НомерКолонки);
	КонецЕсли;
	
	Найден = Соответствие.СоответствияПолей.Найти("ТипДокумента");
	Если Найден <> Неопределено Тогда
		Результат.Вставить("НомерКолонкиТипДокумента", Найден.НомерКолонки);
	КонецЕсли;
	
	Найден = Соответствие.СоответствияПолей.Найти("Количество");
	Если Найден <> Неопределено Тогда
		Результат.Вставить("НомерКолонкиКоличество", Найден.НомерКолонки);
	КонецЕсли;
	
	Найден = Соответствие.СоответствияПолей.Найти("Страна");
	Если Найден <> Неопределено Тогда
		Результат.Вставить("НомерКолонкиСтрана", Найден.НомерКолонки);
	КонецЕсли;
	
	Найден = Соответствие.СоответствияПолей.Найти("ОбоснованиеДляОплаты");
	Если Найден <> Неопределено Тогда
		Результат.Вставить("НомерКолонкиОбоснованияДляОплаты", Найден.НомерКолонки);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Структура поиска строк отчет позаказный ozon.
// 
// Возвращаемое значение:
//  Структура - Структура поиска строк отчет позаказный ozon:
// 		* СтрокаПоискаНомера - Строка - Строка поиска номера
// 		* СтрокаПоискаДаты - Строка - строка поиска даты
// 		* АдресОбластиШапки - Строка - адрес области шапки
// 		* СтрокаПоискаПодвала - Строка - строка поиска подвала
// 		* УдаляемыеКолонки - Массив из Строка - массив удаляемых колонок
// 		* НомерКолонкиТовар - Число - номер колонки товар
// 		* СтартовыйНомерСтроки - Число - стартовый номер строки
// 		* НомерКолонкиКоличествоПродажа - Число - номер колонки количество продажи
// 		* НомерКолонкиКоличествоВозврат - Число - номер колонки количество возврат
// 		* НомерКолонкиЦенаВозврат - Число - номер колонки цена возврат
// 		* НомерКолонкиЦенаПродажи - Число - номер колонки цена продажи
// 		* ВысотаПодвала - Число - высота подвала
//
Функция СтруктураПоискаСтрокОтчетПозаказныйOzon() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СтрокаПоискаНомера"		, НСтр("ru='Отчет реализации №'"));
	Результат.Вставить("СтрокаПоискаДаты"		, НСтр("ru='Реализация товаров за период с'")); 
	Результат.Вставить("СтрокаПоискаКонтрагента", НСтр("ru='Плательщик'"));  
	
	Результат.Вставить("АдресОбластиШапки"		, "R1:R12");
	Результат.Вставить("СтрокаПоискаПодвала"	, НСтр("ru='Всего к начислению:'"));  
	
	УдаляемыеКолонки = Новый Массив;
	УдаляемыеКолонки.Добавить("C1");
	УдаляемыеКолонки.Добавить("C2");
	УдаляемыеКолонки.Добавить("C3"); 
	
	Результат.Вставить("УдаляемыеКолонки"				, УдаляемыеКолонки);
	Результат.Вставить("НомерКолонкиТовар"				, 1);
	Результат.Вставить("СтартовыйНомерСтроки"			, 2);
	Результат.Вставить("НомерКолонкиКоличествоПродажа"	, 16); 
	Результат.Вставить("НомерКолонкиКоличествоВозврат"	, 25); 
	
	Результат.Вставить("НомерКолонкиСуммаВозврат"		, 26);   
	Результат.Вставить("НомерКолонкиСуммаПродажа"		, 17); 
	
	Результат.Вставить("НомерКолонкиЦенаВозврат"		, 23); 
	Результат.Вставить("НомерКолонкиЦенаПродажи"		, 15); 
	Результат.Вставить("ВысотаПодвала"					, 10);

	Возврат Результат;
	
КонецФункции

// Структура поиска строк отчет сводный ozon.
// 
// Возвращаемое значение:
//  Структура - Структура поиска строк отчет сводный ozon:
// 		* СтрокаПоискаНомера - Строка - строка поиска номера
// 		* СтрокаПоискаДаты - Строка - строка поиска даты
// 		* АдресОбластиШапки - Строка - адрес области шапки
// 		* СтрокаПоискаПодвала - Строка - строка поиска подвала
// 		* УдаляемыеКолонки - Массив из Строка - массив удаляемых колонок
// 		* НомерКолонкиТовар - Число - номер колонки товар
// 		* СтартовыйНомерСтроки - Число - стартовый номер строки
// 		* НомерКолонкиКоличествоПродажа - Число - номер колонки количество продажа
// 		* НомерКолонкиКоличествоВозврат - Число - номер колонки количество возврат
// 		* НомерКолонкиЦенаВозврат - Число - номер колонки цена возврат
// 		* НомерКолонкиЦенаПродажи - Число - номер колонки цена продажи
// 		* ВысотаПодвала - Число - высота подвала
//
Функция СтруктураПоискаСтрокОтчетСводныйOzon() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("СтрокаПоискаНомера"		, НСтр("ru='Отчет реализации №'"));
	Результат.Вставить("СтрокаПоискаДаты"		, НСтр("ru='Реализация товаров за период с'"));  
	Результат.Вставить("СтрокаПоискаКонтрагента", НСтр("ru='Плательщик'"));  

	Результат.Вставить("АдресОбластиШапки"		, "R1:R13");
	Результат.Вставить("СтрокаПоискаПодвала"	, НСтр("ru='Всего к начислению:'"));  
	
	УдаляемыеКолонки = Новый Массив;
	УдаляемыеКолонки.Добавить("C15");
	УдаляемыеКолонки.Добавить("C4");
	УдаляемыеКолонки.Добавить("C2");
	УдаляемыеКолонки.Добавить("C1");  
	
	Результат.Вставить("УдаляемыеКолонки"				, УдаляемыеКолонки);
	Результат.Вставить("НомерКолонкиТовар"				, 4); 
	Результат.Вставить("СтартовыйНомерСтроки"			, 2);
	Результат.Вставить("НомерКолонкиКоличествоПродажа"	, 7);    
	Результат.Вставить("НомерКолонкиЦенаПродажи"		, 8);   
	Результат.Вставить("НомерКолонкиСуммаВозврат"		, 15); 
	Результат.Вставить("НомерКолонкиКоличествоВозврат"	, 18); 
	Результат.Вставить("НомерКолонкиЦенаВозврат"		, 19); 
	Результат.Вставить("ВысотаПодвала"					, 10);

	Возврат Результат;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов.
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт

КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов
// 
// Параметры:
//   КодыЯзыков - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.КодыЯзыков
//   Элементы - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.Элементы
//   ТабличныеЧасти - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.ТабличныеЧасти
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	ВерсияПоставляемойНастройки = ВерсияПоставляемойНастройки();
	Элемент = Элементы.Добавить();
	Элемент.Наименование = НСтр("ru='Wildberries. Уведомление о выкупе'");
	ПолныйПутьОбъектаЗагрузки = "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы";
	ОписаниеОбъектаЗагрузки = ЗагрузкаДанныхИзВнешнегоИсточника.ОбъектЗагрузкиПоПолномуИмени(ПолныйПутьОбъектаЗагрузки);
	Элемент.ОбъектЗагрузки = ОписаниеОбъектаЗагрузки.ОбъектЗагрузки;
	Элемент.ИмяТабличнойЧасти = ОписаниеОбъектаЗагрузки.ИмяТабличнойЧасти;
	ИдентификаторНастройки = ИдентификаторWildberriesУведомлениеОВыкупе();
	Элемент.ИдентификаторПоставляемогоЭлемента = ИдентификаторНастройки;
	Элемент.ПоставляемаяНастройка = ПоставляемаяНастройкаПоИдентификатору(ИдентификаторНастройки).Настройка;
	Элемент.ВерсияПоставляемойНастройки = ВерсияПоставляемойНастройки;

	Элемент = Элементы.Добавить();
	Элемент.Наименование = НСтр("ru='Wildberries. Детальный отчет о продажах'");
	ПолныйПутьОбъектаЗагрузки = "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы";
	ОписаниеОбъектаЗагрузки = ЗагрузкаДанныхИзВнешнегоИсточника.ОбъектЗагрузкиПоПолномуИмени(ПолныйПутьОбъектаЗагрузки);
	Элемент.ОбъектЗагрузки = ОписаниеОбъектаЗагрузки.ОбъектЗагрузки;
	Элемент.ИмяТабличнойЧасти = ОписаниеОбъектаЗагрузки.ИмяТабличнойЧасти;
	ИдентификаторНастройки = ИдентификаторWildberriesДетальный();
	Элемент.ИдентификаторПоставляемогоЭлемента = ИдентификаторНастройки;
	Элемент.ПоставляемаяНастройка = ПоставляемаяНастройкаПоИдентификатору(ИдентификаторНастройки).Настройка;
	Элемент.ВерсияПоставляемойНастройки = ВерсияПоставляемойНастройки;

	Элемент = Элементы.Добавить();
	Элемент.Наименование = НСтр("ru='Ozon. Отчет о продажах позаказный'");
	ПолныйПутьОбъектаЗагрузки = "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы";
	ОписаниеОбъектаЗагрузки = ЗагрузкаДанныхИзВнешнегоИсточника.ОбъектЗагрузкиПоПолномуИмени(ПолныйПутьОбъектаЗагрузки);
	Элемент.ОбъектЗагрузки = ОписаниеОбъектаЗагрузки.ОбъектЗагрузки;
	Элемент.ИмяТабличнойЧасти = ОписаниеОбъектаЗагрузки.ИмяТабличнойЧасти;
	ИдентификаторНастройки = ИдентификаторOzonПозаказный();
	Элемент.ИдентификаторПоставляемогоЭлемента = ИдентификаторНастройки;
	Элемент.ПоставляемаяНастройка = ПоставляемаяНастройкаПоИдентификатору(ИдентификаторНастройки).Настройка;
	Элемент.ВерсияПоставляемойНастройки = ВерсияПоставляемойНастройки;
	
	Элемент = Элементы.Добавить();
	Элемент.Наименование = НСтр("ru='Ozon. Отчет о продажах сводный'");
	ПолныйПутьОбъектаЗагрузки = "Документ.ОтчетКомиссионера.ТабличнаяЧасть.Запасы";
	ОписаниеОбъектаЗагрузки = ЗагрузкаДанныхИзВнешнегоИсточника.ОбъектЗагрузкиПоПолномуИмени(ПолныйПутьОбъектаЗагрузки);
	Элемент.ОбъектЗагрузки = ОписаниеОбъектаЗагрузки.ОбъектЗагрузки;
	Элемент.ИмяТабличнойЧасти = ОписаниеОбъектаЗагрузки.ИмяТабличнойЧасти;
	ИдентификаторНастройки = ИдентификаторOzonСводный();
	Элемент.ИдентификаторПоставляемогоЭлемента = ИдентификаторНастройки;
	Элемент.ПоставляемаяНастройка = ПоставляемаяНастройкаПоИдентификатору(ИдентификаторНастройки).Настройка;
	Элемент.ВерсияПоставляемойНастройки = ВерсияПоставляемойНастройки;

КонецПроцедуры

// Вызывается при начальном заполнении элемента объекта. Если в процедуре ПриНастройкеНачальногоЗаполненияЭлементов
// свойство ПриНачальномЗаполненииЭлемента = Истина.
//
// Параметры:
//  Объект                  - Произвольный - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт

	Объект.ЗаполнитьНастройкиПолей(Объект.ПоставляемаяНастройка);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВладелецДополнительныхРеквизитовПоПолномуИмени(ПолноеИмя)

	Если СтрНайти(ПолноеИмя, "Справочник.КонтактныеЛица") > 0 Тогда

		Возврат УправлениеСвойствами.НаборСвойствПоИмени("Справочник_КонтактныеЛица");

	ИначеЕсли СтрНайти(ПолноеИмя, "Справочник.Контрагенты") > 0 Тогда

		Возврат УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Контрагенты");

	ИначеЕсли СтрНайти(ПолноеИмя, "Справочник.Лиды") > 0 Тогда

		Возврат УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Лиды");

	ИначеЕсли СтрНайти(ПолноеИмя, "Справочник.Номенклатура") > 0 Тогда

		Возврат УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура");

	ИначеЕсли СтрНайти(ПолноеИмя, "Справочник.ХарактеристикиНоменклатуры") > 0 Тогда

		Возврат УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ХарактеристикиНоменклатуры");

	ИначеЕсли СтрНайти(ПолноеИмя, "Справочник.Спецификации") > 0 Тогда

		Возврат УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Спецификации");

	Иначе

		Возврат Неопределено;

	КонецЕсли;

КонецФункции

Функция ПоставляемаяНастройкаWildberriesУведомлениеОВыкупе()
	// АПК:1297-выкл.
	Настройка =
	"[{'НомерКолонки': 1, 'ИмяПоля': 'Артикул','ПредставлениеПоля': 'Артикул'},
	|{'НомерКолонки': 2, 'ИмяПоля': 'НоменклатураНаименование','ПредставлениеПоля': 'Номенклатура (наименование)'},
	|{'НомерКолонки': 3, 'ИмяПоля': 'Количество','ПредставлениеПоля': 'Количество'},
	|{'НомерКолонки': 4, 'ИмяПоля': 'Сумма','ПредставлениеПоля': 'Сумма'},
	|{'НомерКолонки': 5, 'ИмяПоля': 'СтавкаНДС','ПредставлениеПоля': 'Ставка НДС'}, 
	|{'НомерКолонки': 6, 'ИмяПоля': 'СуммаНДС','ПредставлениеПоля': 'Сумма НДС'}]"; 
	// АПК:1297-вкл.
	ВерсияНастройки = ВерсияПоставляемойНастройки();

	Возврат Новый Структура("ВерсияНастройки, Настройка", ВерсияНастройки, Настройка);

КонецФункции

Функция ПоставляемаяНастройкаWildberriesДетальный()
	// АПК:1297-выкл.
	Настройка = "[{'НомерКолонки': 2, 'ИмяПоля': 'НомерПоставки','ПредставлениеПоля': 'Номер поставки'},
				|{'НомерКолонки': 10, 'ИмяПоля': 'ТипДокумента','ПредставлениеПоля': 'Тип документа'},
				|{'НомерКолонки': 44, 'ИмяПоля': 'Страна','ПредставлениеПоля': 'Страна'},
				|{'НомерКолонки': 11, 'ИмяПоля': 'ОбоснованиеДляОплаты','ПредставлениеПоля': 'Обоснование для оплаты'},
				|{'НомерКолонки': 6, 'ИмяПоля': 'Артикул','ПредставлениеПоля': 'Артикул'},
				|{'НомерКолонки': 7, 'ИмяПоля': 'НоменклатураНаименование','ПредставлениеПоля': 'Номенклатура (наименование)'},
				|{'НомерКолонки': 9, 'ИмяПоля': 'Штрихкод','ПредставлениеПоля': 'Штрихкод'},
				|{'НомерКолонки': 14, 'ИмяПоля': 'Количество','ПредставлениеПоля': 'Количество'},
				|{'НомерКолонки': 15, 'ИмяПоля': 'ЦенаПередачи','ПредставлениеПоля': 'Цена передачи'},
				|{'НомерКолонки': 16, 'ИмяПоля': 'Цена','ПредставлениеПоля': 'Цена'}]";
	// АПК:1297-вкл.
	ВерсияНастройки = ВерсияПоставляемойНастройки();
	Возврат Новый Структура("ВерсияНастройки, Настройка", ВерсияНастройки, Настройка);

КонецФункции

Функция ПоставляемаяНастройкаOzonПозаказный()
	// АПК:1297-выкл.
	Настройка = "[{'НомерКолонки': 1, 'ИмяПоля': 'НоменклатураНаименование','ПредставлениеПоля': 'Номенклатура (наименование)'},
				|{'НомерКолонки': 2, 'ИмяПоля': 'Артикул','ПредставлениеПоля': 'Артикул'},
				|{'НомерКолонки': 5, 'ИмяПоля': 'ЦенаПередачи','ПредставлениеПоля': 'Цена передачи'},
				|{'НомерКолонки': 7, 'ИмяПоля': 'Цена','ПредставлениеПоля': 'Цена'},
				|{'НомерКолонки': 8, 'ИмяПоля': 'Количество','ПредставлениеПоля': 'Количество'}]"; 
	// АПК:1297-вкл.
	ВерсияНастройки = ВерсияПоставляемойНастройки();
	Возврат Новый Структура("ВерсияНастройки, Настройка", ВерсияНастройки, Настройка);

КонецФункции

Функция ПоставляемаяНастройкаOzonСводный()
	// АПК:1297-выкл.
	Настройка = "[{'НомерКолонки': 1, 'ИмяПоля': 'НоменклатураНаименование','ПредставлениеПоля': 'Номенклатура (наименование)'},
				|{'НомерКолонки': 2, 'ИмяПоля': 'Артикул','ПредставлениеПоля': 'Артикул'},
				|{'НомерКолонки': 5, 'ИмяПоля': 'ЦенаПередачи','ПредставлениеПоля': 'Цена передачи'},
				|{'НомерКолонки': 7, 'ИмяПоля': 'Цена','ПредставлениеПоля': 'Цена'},
				|{'НомерКолонки': 8, 'ИмяПоля': 'Количество','ПредставлениеПоля': 'Количество'}]"; 
	// АПК:1297-вкл.
	ВерсияНастройки = ВерсияПоставляемойНастройки();
	Возврат Новый Структура("ВерсияНастройки, Настройка", ВерсияНастройки, Настройка);

КонецФункции

Функция ПустаяТаблицаНастройки()

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ИмяПоля", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаЗначений.Колонки.Добавить("ПредставлениеПоля", ОбщегоНазначения.ОписаниеТипаСтрока(255));

	Возврат ТаблицаЗначений;

КонецФункции

Процедура ОбновитьЭлементПоставляемойНастройки(СоответствиеСсылка)

	СоответствиеОбъект = СоответствиеСсылка.ПолучитьОбъект();
	СоответствиеОбъект.Заблокировать();
	СтруктураЭлемента = ПоставляемаяНастройкаПоИдентификатору(
		СоответствиеСсылка.ИдентификаторПоставляемогоЭлемента);
	НоваяНастройка = СтруктураЭлемента.Настройка;
	СоответствиеОбъект.ВерсияПоставляемойНастройки = СтруктураЭлемента.ВерсияНастройки;
	СоответствиеОбъект.ПоставляемаяНастройка = НоваяНастройка;
	СоответствиеОбъект.ЗаполнитьНастройкиПолей(НоваяНастройка);
	СоответствиеОбъект.Записать();

КонецПроцедуры

#КонецОбласти

#КонецЕсли