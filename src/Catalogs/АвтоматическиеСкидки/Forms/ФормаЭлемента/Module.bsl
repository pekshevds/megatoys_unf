
#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// Чтобы уменьшить количество бесконтекстных вызовов сервера.
	СпособПредоставленияПроцент = Перечисления.СпособыПредоставленияСкидокНаценок.Процент;
	СпособПредоставленияСумма = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
	СпособПредоставленияВидЦен = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦен;
	СпособПредоставленияОкругление = Перечисления.СпособыПредоставленияСкидокНаценок.Округление;
	СпособПредоставленияКоличествоБонусами = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов;
	СпособПредоставленияПроцентБонусами = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов;
	СпособПредоставленияСообщение = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение;
	СпособПредоставленияПодарок = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок;
	СпособПредоставленияПромокод = Перечисления.СпособыПредоставленияСкидокНаценок.Промокод;
	СпособПредоставленияРасширение = Перечисления.СпособыПредоставленияСкидокНаценок.Расширение;
	ВариантОграниченияПоНоменклатуре = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре;
	ВариантОграниченияПоКатегориям = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоКатегориям;
	ВариантОграниченияПоЦеновымГруппам = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоЦеновымГруппам;
	ВариантОграниченияПоСегментамНоменклатуры = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоСегменту;
	ВариантОграниченияПоКонтрагентам = Перечисления.ВариантыОграниченийСкидокПоКонтрагентам.ПоКонтрагентам;
	ВариантОграниченияПоСегментамКонтрагентов = Перечисления.ВариантыОграниченийСкидокПоКонтрагентам.ПоСегментуКонтрагентов;
	ВариантОграниченияПоКонтрагентамДоИзменения = Объект.ВариантОграниченияПоПолучателям;
	
	НазначениеРозница = Перечисления.НазначенияАвтоматическихСкидок.Розница;
	НазначениеОпт = Перечисления.НазначенияАвтоматическихСкидок.Опт;
	ОбластьВДокументе = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	ЭтаФорма.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Если Объект.ЭтоПравилоНачисленияБонусов Тогда
		СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийСпособовНачисленияБонусов(Элементы.СпособПредоставления.СписокВыбора);
	Иначе
		СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийСпособовПредоставленияСкидки(Элементы.СпособПредоставления.СписокВыбора);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.ЕстьУсловияПоДК Тогда
			ДобавитьУсловиеПоСкидке();
			Объект.Наименование = СформироватьАвтоНаименованиеНаСервере();
		КонецЕсли;
		
	Иначе
		
		СформироватьАвтоНаименованиеНаСервере();
		
	КонецЕсли;
	
	// Используется ли АвтоНаименование
	Если СтрНайти(Объект.Наименование, "Округление до") > 0
		И (СтрНайти(Объект.Наименование, "в строке") > 0 ИЛИ СтрНайти(Объект.Наименование, "в документе") > 0)
		Тогда
		ИспользуетсяАвтоНаименование = Истина;
	КонецЕсли; 
	Для каждого ВариантНаименования Из Элементы.Наименование.СписокВыбора Цикл
		Если Объект.Наименование = ВариантНаименования.Значение Тогда
			ИспользуетсяАвтоНаименование = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Определим видимость реквизита доп. упорядочивания.
	Если Объект.УдалитьРеквизитДопУпорядочивания > 0 Тогда
		Элементы.РеквизитДопУпорядочивания.Видимость = Истина;
	Иначе
		Если Объект.Родитель.Пустая() Тогда
			ТекВариантСовместногоПрименения = Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить();
		Иначе
			ТекВариантСовместногоПрименения = Объект.Родитель.ВариантСовместногоПрименения;
		КонецЕсли;
		
		Элементы.РеквизитДопУпорядочивания.Видимость = (ТекВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение 
														ИЛИ ТекВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение);
	КонецЕсли;
		
	ОбновитьПризнакиЭтоГруппа();
	
	ТекущаяДата = ТекущаяДата();
	
	ОбновитьДоступностьТочекВыдачиСообщенийКассиру();
	ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантОграниченияПоНоменклатуре;
	Элементы.ДекорацияРодительВариантСовместногоПрименения.Заголовок = Строка(Объект.Родитель.ВариантСовместногоПрименения);
	Элементы.ДекорацияРодительВариантСовместногоПрименения.Видимость = Не Объект.Родитель.Пустая();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Родитель", "Видимость", Не Объект.ЭтоПравилоНачисленияБонусов);
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	ИспользуютсяСегментыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
	УправлениеВидимостьюНаСервере();
	УстановитьУсловноеОформлениеФормы();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Промокоды, 
		"СкидкаНаценка",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		РассылкиПромокодов, 
		"ПредлагаемаяСкидка",
		?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Null),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);				
			
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.НоменклатураГруппыЦеновыеГруппы.ЭтоГруппа", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "НоменклатураГруппыЦеновыеГруппыХарактеристика");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<Не используется>'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "УсловиеПредоставления_Запись" Тогда
		ОбновитьАвтонаименование(Истина, Истина);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораПодарка(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат.АдресКорзиныВХранилище) Тогда
		ПолучитьПодаркиИзХранилища(Результат.АдресКорзиныВХранилище, "НаборПодарков");		
		ПредставлениеНастроекПодарков();
	КонецЕсли; 
	
КонецПроцедуры

// Функция получает список товаров из временного хранилища
//
// Параметры:
//  АдресПодарковВХранилище - Строка - строка, содержащая электронные адреса
//  ИмяТабличнойЧасти - Строка - Имя табличной части, в которую необходимо поместить подарки
&НаСервере
Процедура ПолучитьПодаркиИзХранилища(АдресПодарковВХранилище, ИмяТабличнойЧасти)	
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПодарковВХранилище);
	
	НоваяСтрока = Неопределено;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда

			ОбработатьДобавлениеСтрокиЗапасов(НоваяСтрока, ИмяТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ПолучитьЗапасыИзХранилища()	

&НаСервере
Процедура ОбработатьДобавлениеСтрокиЗапасов(НоваяСтрока, ИмяТабличнойЧасти = "Подарки")
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, 
		"ТипНоменклатуры, Вес, Объем, ЭтоНабор, СпособРасчетаЦеныНабора");
	
	СтруктураДанныеНоменклатуры = Новый Структура();
	СтруктураДанныеНоменклатуры.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
	СтруктураДанныеНоменклатуры.Вставить("Характеристика", НоваяСтрока.Характеристика);

	СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
	СтруктураДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
	// Характеристики
	НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики
		Тогда
		НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
	КонецЕсли;
	// Конец Характеристики
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
// Возвращаемое значение:
//  - Структура - Значения зависимых от номенклатуры полей строки
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики", Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики", Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",
			СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли;
	// Конец Характеристики
	
	Возврат СтруктураДанные;
		
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Дата начала больше даты окончания.'");
		Сообщение.Поле = "Объект.ДатаНачала";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "НаборПодарков";
	ПараметрыПодбора = Новый Структура("ТолькоНоменклатураИКоличество", Истина);
	ОбработчикПодбора = Новый ОписаниеОповещения("ОбработкаПодбораПодарка", ЭтотОбъект);
	ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, 
																		ИмяТабличнойЧасти, 
																		ПараметрыПодбора, 
																		ОбработчикПодбора);
	
КонецПроцедуры // ПодборВыполнить()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Обработчик механизма "Свойства".
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	КоличествоУсловийЗаПромокод = 0;
	Для каждого ТекущееУсловие Из Объект.УсловияПредоставления Цикл
		Если ТекущееУсловие.УсловиеПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПромокод Тогда
			ЕстьУсловияПредъявленПромокод = Истина;
			КоличествоУсловийЗаПромокод = КоличествоУсловийЗаПромокод + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоУсловийЗаПромокод > 1 Тогда
		Отказ = Истина;			
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Возможно использование только одного условия на предъявленный промокод.'");
		Сообщение.Поле = "Объект.УсловияПредоставления";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();		
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура ВариантПредоставленияСкидкиПоПолучателямПриИзмененииЗавершение(РезультатОтвета, ДополнительныеПараметры) Экспорт

	Если РезультатОтвета <> КодВозвратаДиалога.Да Тогда
		Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоКонтрагентамДоИзменения;
		Возврат;
	КонецЕсли;
	
	ВариантОграниченияПоКонтрагентамДоИзменения = Объект.ВариантОграниченияПоПолучателям;
	
	УправлениеВидимостьюНаСервере();
	
	Если ВариантОграниченияПоКонтрагентамДоИзменения = ВариантОграниченияПоКонтрагентам Тогда
		Объект.ПолучателиСкидкиСегменты.Очистить();
	Иначе
		Объект.ПолучателиСкидкиКонтрагенты.Очистить();
	КонецЕсли;
		
КонецПроцедуры

// Процедура обновляет наименование, если пользователь не менял его вручную.
//
&НаКлиенте
Процедура ОбновитьАвтонаименование(Обновить = Истина, УстановитьМодифицированность = Ложь)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) ИЛИ (Обновить И ИспользуетсяАвтоНаименование И Не НаименованиеИзмененоПользователем) Тогда
		Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
		ИспользуетсяАвтоНаименование = Истина;
		
		Если УстановитьМодифицированность Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает сформированное автонаименование.
//
&НаКлиенте
Функция СформироватьАвтоНаименованиеНаКлиенте()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = "";
	
	Если Объект.СпособПредоставления = СпособПредоставленияПроцент Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + НСтр("ru = '%'");
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияСумма Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + " " + Объект.ВалютаПредоставления;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияВидЦен Тогда
		
		СтрокаНаименования = "Вид цен - " + Объект.ВидЦен;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПроцентБонусами Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + НСтр("ru = '% баллами'");
		Если ЗначениеЗаполнено(Объект.БонуснаяПрограмма) Тогда
			СтрокаНаименования = СтрокаНаименования + " """ + Объект.БонуснаяПрограмма + """";
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияКоличествоБонусами Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + " " + НСтр("ru = 'баллов'");
		Если ЗначениеЗаполнено(Объект.БонуснаяПрограмма) Тогда
			СтрокаНаименования = СтрокаНаименования + " """ + Объект.БонуснаяПрограмма + """";
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияОкругление Тогда
		
		СтрокаНаименования = НСтр("ru = 'Округление до '") + Объект.ПорядокОкругления;
		Если Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в документе'");
		ИначеЕсли Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в строке'");
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияСообщение Тогда
		
		СтрокаНаименования = НСтр("ru = 'Сообщение кассиру'");
		
		Если Объект.МоментВыдачиСообщения = ПредопределенноеЗначение("Перечисление.ТочкиВыдачиСообщенияКассиру.ВМоментРасчетаСкидок") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' при расчете'");
		ИначеЕсли Объект.МоментВыдачиСообщения = ПредопределенноеЗначение("Перечисление.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' при оформлении'");
		КонецЕсли;
		
		Если Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в документе'");
		ИначеЕсли Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в строке'");
		КонецЕсли;

	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПодарок Тогда
		
		СтрокаНаименования = НСтр("ru = 'Подарок'");
		
		Если Объект.ПодарокИзКорзиныПокупателя Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' из корзины покупателя'");
		Иначе
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' на кассе'");
		КонецЕсли; 
		
		Если Объект.ЛюбойПодарокИзСписка Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' на выбор'");
		КонецЕсли;
				
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПромокод Тогда

		СтрокаНаименования = НСтр("ru = 'Промокод на следующую покупку'");
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияРасширение Тогда

		СтрокаНаименования = НСтр("ru = 'Произвольная скидка'");
		
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Если Объект.УсловияПредоставления.Количество() = 1 Тогда
		СтрокаНаименования = СтрокаНаименования + " ("+Объект.УсловияПредоставления[0].УсловиеПредоставления+")";
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	ИначеЕсли Объект.УсловияПредоставления.Количество() > 1 Тогда
		
		КоличествоУсловий = Объект.УсловияПредоставления.Количество();
		
		Если КоличествоУсловий >= 2 Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = '(несколько условий)'");
			Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		КонецЕсли;
		
	ИначеЕсли Объект.УсловияПредоставления.Количество() = 0 Тогда
		СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'без условий'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	СуммаВДокументе = (Объект.СпособПредоставления = СпособПредоставленияСумма И Объект.ОбластьПредоставления = ОбластьВДокументе);
	Если Объект.НоменклатураГруппыЦеновыеГруппы.Количество() > 0 И НЕ СуммаВДокументе Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', с уточнением'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Если (Объект.ПолучателиСкидкиКонтрагенты.Количество() > 0 И Объект.Назначение <> НазначениеРозница) 
		ИЛИ (Объект.ПолучателиСкидкиСклады.Количество() > 0 И Объект.Назначение <> НазначениеОпт) Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', указаны получатели'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Если Объект.ВремяПоДнямНедели.Количество() > 0 Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', по расписанию'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Возврат СтрокаНаименования;

КонецФункции

// Функция возвращает сформированное автонаименование.
//
&НаСервере
Функция СформироватьАвтоНаименованиеНаСервере()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = "";
	
	Если Объект.СпособПредоставления = СпособПредоставленияПроцент Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + НСтр("ru = '%'");
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияСумма Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + " " + Объект.ВалютаПредоставления;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияВидЦен Тогда
		
		СтрокаНаименования = "Вид цен - " + Объект.ВидЦен;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПроцентБонусами Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + НСтр("ru = '% баллами'");
		Если ЗначениеЗаполнено(Объект.БонуснаяПрограмма) Тогда
			СтрокаНаименования = СтрокаНаименования + """" + Объект.БонуснаяПрограмма + """";
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияКоличествоБонусами Тогда
		
		СтрокаНаименования = "" + Объект.ЗначениеСкидкиНаценки + " " + НСтр("ru = 'баллов'");
		Если ЗначениеЗаполнено(Объект.БонуснаяПрограмма) Тогда
			СтрокаНаименования = СтрокаНаименования + """" + Объект.БонуснаяПрограмма + """";
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияОкругление Тогда
		
		СтрокаНаименования = НСтр("ru = 'Округление до '") + Объект.ПорядокОкругления;
		Если Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в документе'");
		ИначеЕсли Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в строке'");
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияСообщение Тогда
		
		СтрокаНаименования = НСтр("ru = 'Сообщение кассиру'");
		
		Если Объект.МоментВыдачиСообщения = ПредопределенноеЗначение("Перечисление.ТочкиВыдачиСообщенияКассиру.ВМоментРасчетаСкидок") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' при расчете'");
		ИначеЕсли Объект.МоментВыдачиСообщения = ПредопределенноеЗначение("Перечисление.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' при оформлении'");
		КонецЕсли;
		
		Если Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в документе'");
		ИначеЕсли Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' в строке'");
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПодарок Тогда
		
		СтрокаНаименования = НСтр("ru = 'Подарок'");
		
		Если Объект.ПодарокИзКорзиныПокупателя Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' из корзины покупателя'");
		Иначе
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' на кассе'");
		КонецЕсли; 
		
		Если Объект.ЛюбойПодарокИзСписка Тогда
			СтрокаНаименования = СтрокаНаименования + НСтр("ru = ' на выбор'");
		КонецЕсли;

	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПромокод Тогда

		СтрокаНаименования = НСтр("ru = 'Промокод на следующую покупку'");

	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияРасширение Тогда

		СтрокаНаименования = НСтр("ru = 'Произвольная скидка'");

	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Если Объект.УсловияПредоставления.Количество() = 1 Тогда
		
		СтрокаНаименования = СтрокаНаименования + " ("+Объект.УсловияПредоставления[0].УсловиеПредоставления+")";
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		
	ИначеЕсли Объект.УсловияПредоставления.Количество() > 1 Тогда
		
		КоличествоУсловий = Объект.УсловияПредоставления.Количество();
		
		Если КоличествоУсловий >= 2 Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = '(несколько условий)'");
			Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		КонецЕсли;
		
	ИначеЕсли Объект.УсловияПредоставления.Количество() = 0 Тогда
		
		СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'без условий'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		
	КонецЕсли;
	
	СуммаВДокументе = (Объект.СпособПредоставления = СпособПредоставленияСумма И Объект.ОбластьПредоставления = ОбластьВДокументе);
	Если Объект.НоменклатураГруппыЦеновыеГруппы.Количество() > 0 И НЕ СуммаВДокументе Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', с уточнением'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Если (Объект.ПолучателиСкидкиКонтрагенты.Количество() > 0 И Объект.Назначение <> НазначениеРозница) 
		ИЛИ (Объект.ПолучателиСкидкиСклады.Количество() > 0 И Объект.Назначение <> НазначениеОпт) Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', указаны получатели'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Если Объект.ВремяПоДнямНедели.Количество() > 0 Тогда
		СтрокаНаименования = СтрокаНаименования + НСтр("ru = ', по расписанию'");
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Возврат СтрокаНаименования;

КонецФункции

// Функция возвращает вариант совместного применения автоматических скидок актуальный для текущей скидки.
//
&НаСервереБезКонтекста
Функция ПолучитьТекущийВариантСовместногоПрименения(Родитель)

	Если Родитель.Пустая() Тогда
		Возврат Константы.ВариантыСовместногоПримененияСкидокНаценок.Получить();
	Иначе
		Возврат Родитель.ВариантСовместногоПрименения;
	КонецЕсли;

КонецФункции // ПолучитьТекущийВариантСовместногоПриме()

&НаСервере
Процедура ОбновитьПризнакиЭтоГруппа()
	
	Если Объект.ВариантОграниченияПоНоменклатуре <> ПредопределенноеЗначение("Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре") Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатуры = Объект.НоменклатураГруппыЦеновыеГруппы.Выгрузить(, "ЗначениеУточнения").ВыгрузитьКолонку("ЗначениеУточнения");
	Если МассивНоменклатуры.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ПараметрыНоменклатуры = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПараметрыНоменклатуры.Вставить(Выборка.Ссылка, Выборка.ЭтоГруппа);
		КонецЦикла; 
		
		Для каждого Стр Из Объект.НоменклатураГруппыЦеновыеГруппы Цикл
			Если НЕ ЗначениеЗаполнено(Стр.ЗначениеУточнения) ИЛИ ТипЗнч(Стр.ЗначениеУточнения) <> Тип("СправочникСсылка.Номенклатура") Тогда
				Стр.ЭтоГруппа = Ложь;
			Иначе
				Стр.ЭтоГруппа = ПараметрыНоменклатуры.Получить(Стр.ЗначениеУточнения);
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловиеПоСкидке()
	
	Условие = ДисконтныеКартыУНФСервер.ПолучитьЕдинственноеУсловиеПоДисконтнымКартам();
	Если Не Условие = Неопределено Тогда
		НовоеУсловие = Объект.УсловияПредоставления.Добавить();
		НовоеУсловие.УсловиеПредоставления = Условие;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru='Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.ЗапасыКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРассылку(Команда)
	СоздатьМассовуюРассылку();
КонецПроцедуры 
&НаКлиенте
Процедура СоздатьРассылкуСервиса(Команда)
	СоздатьМассовуюРассылку(Истина);
КонецПроцедуры 
&НаКлиенте
Процедура СоздатьМассовуюРассылку(РассылкаСервиса = Ложь)
	ПарметрыРассылки = Новый Структура;
	ПарметрыРассылки.Вставить("СпособОтправки", ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email"));
	ПарметрыРассылки.Вставить("ПредлагаемаяСкидка", Объект.Ссылка);
	ИмяФормыРассылки = "Документ.МассоваяРассылка.Форма.ФормаДокумента";
	Если РассылкаСервиса Тогда
		ИмяФормыРассылки = "Документ.МассоваяРассылка.Форма.РассылкаСервиса";
	КонецЕсли;
	ОткрытьФорму(ИмяФормыРассылки, ПарметрыРассылки); 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРассылкуВыделенныхПромокодов(Команда)
	СоздатьМассовуюРассылкуВыделенныхПромокодов();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРассылкуВыделенныхПромокодовСервис(Команда)
	СоздатьМассовуюРассылкуВыделенныхПромокодов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМассовуюРассылкуВыделенныхПромокодов(РассылкаСервиса = Ложь)
	ПарметрыРассылки = Новый Структура;
	ПарметрыРассылки.Вставить("СпособОтправки", ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email"));
	ПарметрыРассылки.Вставить("ПредлагаемаяСкидка", Объект.Ссылка);
	ВыделенныеПромокоды = Новый Массив;
	Для Каждого Идентификатор Из Элементы.Промокоды.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Элементы.Промокоды.ДанныеСтроки(Идентификатор);
		Если Не ТекущаяСтрока.Отправлен Тогда
			ВыделенныеПромокоды.Добавить(ТекущаяСтрока.Промокод);
		КонецЕсли;
	КонецЦикла;
	ПарметрыРассылки.Вставить("Промокоды", ВыделенныеПромокоды);
	ИмяФормыРассылки = "Документ.МассоваяРассылка.Форма.ФормаДокумента";
	Если РассылкаСервиса Тогда 
		ИмяФормыРассылки = "Документ.МассоваяРассылка.Форма.РассылкаСервиса";
	КонецЕсли;
	ОткрытьФорму(ИмяФормыРассылки, ПарметрыРассылки); 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

&НаСервереБезКонтекста
Функция УсловияСодержатТребованияПромокода(УсловияПредоставленияНаФорме)
	МассивУсловий = УсловияПредоставленияНаФорме.Выгрузить(,).ВыгрузитьКолонку("УсловиеПредоставления");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияПредоставленияСкидокНаценок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
	|ГДЕ
	|	УсловияПредоставленияСкидокНаценок.Ссылка В(&Условия)
	|	И УсловияПредоставленияСкидокНаценок.УсловиеПредоставления = Значение(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод)";
	Запрос.УстановитьПараметр("Условия", МассивУсловий);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
		
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
		
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияДопРеквизита()
	
	ПараметрыФормы = Новый Структура;

  	ТекущийНаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_АвтоматическиеСкидки");
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ТекущийНаборСвойств);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура УстановитьИдентификаторДляРасчетаВРасширенииКлиент()

	Если Не ЗначениеЗаполнено(Объект.ИдентификаторДляРасчетаВРасширении) Тогда

		АдаптированныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
		Объект.ИдентификаторДляРасчетаВРасширении = АдаптированныйИдентификатор;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьИдентификаторДляРасчетаВРасширении()

	Если Не ЗначениеЗаполнено(Объект.ИдентификаторДляРасчетаВРасширении) Тогда

		АдаптированныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
		Объект.ИдентификаторДляРасчетаВРасширении = АдаптированныйИдентификатор;

	КонецЕсли;

КонецПроцедуры


#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура управляет видимостью элементов в зависимости о варианта ограничения, способа и области предоставления скидки.
//
&НаСервере
Процедура УправлениеВидимостьюНаСервере()

	Если Объект.СпособПредоставления = СпособПредоставленияОкругление Тогда
		Элементы.ОсновныеРеквизитыСкидка.Видимость = Истина;
		Элементы.СпособПредоставления.Видимость = Ложь;
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Истина;
		Элементы.ГруппаСообщение.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыПодарки.Видимость = Ложь;
		Элементы.ГруппаПодарок.Видимость = Ложь;		
		Элементы.ГруппаПромокод.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыРасширение.Видимость = Ложь;
		Элементы.ДекорацияПодсказка.Видимость = Истина;
		Элементы.ДекорацияПодсказка.Заголовок = НСтр("ru = 'Округление корректирует размер автоматической скидки так, чтобы 'Всего' документа/строки было округлено до заданного порядка, с учетом всех скидок и НДС строки/документа.'");
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияВидЦен Тогда
		Элементы.ОсновныеРеквизитыСкидка.Видимость = Истина;
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Истина;
		Элементы.ГруппаОкругление.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыПодарки.Видимость = Ложь;
		Элементы.ГруппаПодарок.Видимость = Ложь;
		Элементы.ГруппаПромокод.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыРасширение.Видимость = Ложь;
		Элементы.ДекорацияПодсказка.Видимость = Истина;
		Элементы.ДекорацияПодсказка.Заголовок = НСтр("ru = 'Автоматическая скидка установит выбранный вид цен. Скидка составит разницу к текущей цене.'");
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияСообщение Тогда
		Элементы.ОсновныеРеквизитыСкидка.Видимость = Истина;
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость = Истина;
		Элементы.ОсновныеРеквизитыПодарки.Видимость = Ложь;
		Элементы.ГруппаПодарок.Видимость = Ложь;
		Элементы.ГруппаПромокод.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыРасширение.Видимость = Ложь;
		Элементы.ДекорацияПодсказка.Видимость = Истина;
		Элементы.ДекорацияПодсказка.Заголовок = НСтр("ru = 'Кассиру будет выведено сообщение.'");
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПодарок Тогда
		Элементы.ОсновныеРеквизитыСкидка.Видимость = Истина;
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыПодарки.Видимость = Истина;
		Элементы.ГруппаПодарок.Видимость = Истина;
		Элементы.ГруппаПромокод.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыРасширение.Видимость = Ложь;
		Элементы.ДекорацияПодсказка.Видимость = Истина;
		Элементы.ДекорацияПодсказка.Заголовок = НСтр("ru = 'Покупателю будет предоставлен подарок.'");
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияПромокод Тогда
		Элементы.ОсновныеРеквизитыСкидка.Видимость = Ложь;
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыПодарки.Видимость = Ложь;
		Элементы.ГруппаПодарок.Видимость = Ложь;
		Элементы.ГруппаПромокод.Видимость = Истина;
		Элементы.ДекорацияПодсказка.Видимость = Истина;
		Элементы.ОсновныеРеквизитыРасширение.Видимость = Ложь;
		Элементы.ДекорацияПодсказка.Заголовок = НСтр("ru = 'Покупателю будет предоставлен промокод на следующую покупку.'");
	ИначеЕсли Объект.СпособПредоставления = СпособПредоставленияРасширение Тогда
		Элементы.ОсновныеРеквизитыСкидка.Видимость = Ложь;
		Элементы.ГруппаСкидки.Видимость = Ложь;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыПодарки.Видимость = Ложь;
		Элементы.ГруппаПодарок.Видимость = Ложь;
		Элементы.ГруппаПромокод.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыРасширение.Видимость = Истина;
		Элементы.ДекорацияПодсказка.Видимость = Ложь;
	Иначе	
		Элементы.ОсновныеРеквизитыСкидка.Видимость = Истина;
		Элементы.ГруппаСкидки.Видимость = Истина;
		Элементы.ВидЦен.Видимость = Ложь;
		Элементы.ГруппаОкругление.Видимость = Ложь;
		Элементы.ГруппаСообщение.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыПодарки.Видимость = Ложь;
		Элементы.ГруппаПодарок.Видимость = Ложь;
		Элементы.ГруппаПромокод.Видимость = Ложь;
		Элементы.ОсновныеРеквизитыРасширение.Видимость = Ложь;
		Элементы.ДекорацияПодсказка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.БонуснаяПрограмма.Видимость = Объект.ЭтоПравилоНачисленияБонусов;
	Элементы.ОбластьПредоставления.Видимость = Не Объект.ЭтоПравилоНачисленияБонусов;
	Элементы.ЗначениеСкидкиНаценки.Заголовок = ?(Объект.ЭтоПравилоНачисленияБонусов, НСтр("ru = 'Начисление'"), НСтр("ru = 'Скидка'"));
	Элементы.ГруппаСовместноеПрименение.Видимость = Не объект.ЭтоПравилоНачисленияБонусов;
	
	Если Объект.ВариантОграниченияПоНоменклатуре.Пустая() Тогда
		Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре;
	КонецЕсли;
	
	СуммаВДокументе = ((Объект.СпособПредоставления = СпособПредоставленияСумма Или Объект.СпособПредоставления = СпособПредоставленияКоличествоБонусами)
						И Объект.ОбластьПредоставления = ОбластьВДокументе) ИЛИ Объект.СпособПредоставления = СпособПредоставленияВидЦен;
		
	ЭтоСложнаяСкидка = Объект.СпособПредоставления = СпособПредоставленияРасширение 
						ИЛИ Объект.СпособПредоставления = СпособПредоставленияПодарок
						ИЛИ Объект.СпособПредоставления = СпособПредоставленияСообщение
						ИЛИ Объект.СпособПредоставления = СпособПредоставленияПромокод;
	Элементы.Уточнения.Видимость = Не СуммаВДокументе И Не ЭтоСложнаяСкидка;
	Если Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Номенклатура'");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
		Элементы.ДекорацияПодсказкаУточнения.Заголовок = НСтр("ru = 'Заполните уточнения, если требуется, чтобы у определенных товаров или групп товаров значение скидки отличалось от основного значения. Если список не заполнен, то для всех позиций номенклатуры используется основное значение скидки.'");
		
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Истина;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Истина;
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоКатегориям Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Категория номенклатуры'");
		
		Элементы.ДекорацияПодсказкаУточнения.Заголовок = НСтр(
			"ru = 'Заполните уточнения, если требуется, чтобы у товаров определенных категорий значение скидки отличалось от основного значения. Если список не заполнен, то для всех категорий используется основное значение скидки.'");
		
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Ложь;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Истина;
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоЦеновымГруппам Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Ценовая группа'");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы");
		
		Элементы.ДекорацияПодсказкаУточнения.Заголовок = НСтр("ru = 'Заполните уточнения, если требуется, чтобы у товаров определенных ценовых групп значение скидки отличалось от основного значения. Если список не заполнен, то для всех ценовых групп используется основное значение скидки.'");
		
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Ложь;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Ложь;
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоСегментамНоменклатуры Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Сегмент номенклатуры'");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");	
		Элементы.ДекорацияПодсказкаУточнения.Заголовок =  НСтр("ru = 'Заполните уточнения, если требуется, чтобы у товаров определенных сегментов значение скидки отличалось от основного значения. Если список не заполнен, то для всех сегментов используется основное значение скидки.'");
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Ложь;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ВалютаПредоставления.Видимость = (Объект.СпособПредоставления = СпособПредоставленияСумма);
	
	Если Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Округление") Тогда
		ЭтоСкидка = Ложь;
	Иначе
		ЭтоСкидка = Истина;
	КонецЕсли;
	
	//Элементы.ОсновныеРеквизитыСкидка.Видимость = ЭтоСкидка;
	Элементы.ОсновныеРеквизитыОкругление.Видимость = НЕ ЭтоСкидка;
	Элементы.ГруппаВремяПоДнямНедели.Видимость = ЭтоСкидка;
	Элементы.ГруппаПериодДействия.Видимость = ЭтоСкидка;
	Элементы.ГруппаСовместноеПрименение.Видимость = ЭтоСкидка;	
	Элементы.ИдентификаторДляРасчетаВРасширении.Видимость = Объект.СпособПредоставления = СпособПредоставленияРасширение;

	
	Если Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов") Тогда
		Элементы.ДекорацияБаллыПроценты.Заголовок = "(%)";
		Элементы.ДекорацияБаллыПроценты.Видимость = Истина;
	ИначеЕсли Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов") Тогда
		Элементы.ДекорацияБаллыПроценты.Заголовок = НСтр("ru = '(баллы)'");
		Элементы.ДекорацияБаллыПроценты.Видимость = Истина;
	Иначе
		Элементы.ДекорацияБаллыПроценты.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоКонтрагентам
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ВариантОграниченияПоПолучателям) Тогда
		Элементы.СтраницыПолучателиСкидкиСегментыКонтрагенты.ТекущаяСтраница = 
			Элементы.ГруппаПолучателиКонтрагенты;
	ИначеЕсли Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоСегментамКонтрагентов Тогда
		Элементы.СтраницыПолучателиСкидкиСегментыКонтрагенты.ТекущаяСтраница = 
			Элементы.ГруппаПолучателиСегменты;
	КонецЕсли;
	
	Если НЕ ИспользуютсяСегментыНоменклатуры Тогда
		СписокВыбораОграниченийПоНоменклатуре = Элементы.ВариантОграниченияПоНоменклатуре.СписокВыбора;
		ВариантПереключателя = 
			СписокВыбораОграниченийПоНоменклатуре.НайтиПоЗначению(ВариантОграниченияПоСегментамНоменклатуры);
		Если ВариантПереключателя <> Неопределено Тогда
			СписокВыбораОграниченийПоНоменклатуре.Удалить(ВариантПереключателя);
		КонецЕсли;
	КонецЕсли;
	ОбновитьВидимостьПромокодов();
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура БонуснаяПрограммаПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВариантОграниченияПоНоменклатуре.
//
&НаКлиенте
Процедура ВариантОграниченияПоНоменклатуреПриИзменении(Элемент)
	
	Если Объект.НоменклатураГруппыЦеновыеГруппы.Количество() > 0 Тогда
		Описание = Новый ОписаниеОповещения("ВариантОграниченияПоНоменклатуреПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, НСтр("ru = 'Таблица уточнений будет очищена. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Изменение варианта уточнения'"));
	Иначе
		ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантОграниченияПоНоменклатуре;
		УправлениеВидимостьюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВариантОграниченияПоНоменклатуре (завершение после ответа на вопрос об удалении строк в ТЧ).
//
&НаКлиенте
Процедура ВариантОграниченияПоНоменклатуреПриИзмененииЗавершение(РезультатОтвета, ДополнительныеПараметры) Экспорт

	Если РезультатОтвета <> КодВозвратаДиалога.Да Тогда
		Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуреДоИзменения;
		Возврат;
	КонецЕсли;
	
	ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантОграниченияПоНоменклатуре;
	УправлениеВидимостьюНаСервере();
	Объект.НоменклатураГруппыЦеновыеГруппы.Очистить();
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента СпособПредоставления.
//
&НаКлиенте
Процедура СпособПредоставленияПриИзменении(Элемент)
	
	СпособПредоставленияПриИзмененииСервер();
	Объект.ЗначениеСкидкиНаценки = 0;
	
	ПоказатьСтраницуУточнений = Ложь;
	Для каждого ТекущаяСтрока Из Объект.НоменклатураГруппыЦеновыеГруппы Цикл
	
		ТекущаяСтрока.ЗначениеСкидкиНаценки = 0;
		ПоказатьСтраницуУточнений = Истина;
		
	КонецЦикла;
	
	Если ПоказатьСтраницуУточнений Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаУточненияОграниченияИРасписание;
		Элементы.СтраницыУточненийИОграничений.ТекущаяСтраница = Элементы.Уточнения;
		
		СуммаВДокументе = (Объект.СпособПредоставления = СпособПредоставленияСумма 
							И Объект.ОбластьПредоставления = ОбластьВДокументе);
							
		Если Не СуммаВДокументе Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Скидки очищены!");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ОбластьПредоставления.
//
&НаКлиенте
Процедура ОбластьПредоставленияПриИзменении(Элемент)
	
	УправлениеВидимостьюНаСервере();
	ОбновитьАвтонаименование(Истина);
	ПредставлениеНастроекПодарков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОкругленияПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);

КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента Наименование.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеИзмененоПользователем = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЗначениеСкидкиНаценки.
//
&НаКлиенте
Процедура ЗначениеСкидкиНаценкиПриИзменении(Элемент)
	
	Если Объект.СпособПредоставления = СпособПредоставленияПроцент Тогда
		Если Объект.ЗначениеСкидкиНаценки > 100 Тогда
			ТекстСообщения = НСтр("ru = 'Процент скидки должен быть не более 100%'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, 
																,
																"ЗначениеСкидкиНаценки",
																"Объект");
			Объект.ЗначениеСкидкиНаценки = 0;
		КонецЕсли;
	КонецЕсли;
	ОбновитьАвтонаименование(Истина);

КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента Родитель.
//
&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	РодительПриИзмененииНаСервере();
	
КонецПроцедуры

// Серверная часть процедуры РодительПриИзменении.
//
&НаСервере
Процедура РодительПриИзмененииНаСервере()
	
	ТекВариантСовместногоПрименения = ПолучитьТекущийВариантСовместногоПрименения(Объект.Родитель);
	
	ВидимостьДопУпорядочивания = (Объект.УдалитьРеквизитДопУпорядочивания > 0
		ИЛИ ТекВариантСовместногоПрименения = ПредопределенноеЗначение("Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение")
		ИЛИ ТекВариантСовместногоПрименения = ПредопределенноеЗначение("Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Умножение"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "РеквизитДопУпорядочивания", "Видимость", ВидимостьДопУпорядочивания);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ДекорацияРодительВариантСовместногоПрименения", "Заголовок", Строка(ТекВариантСовместногоПрименения));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ДекорацияРодительВариантСовместногоПрименения", "Видимость", Не Объект.Родитель.Пустая());
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента Назначение.
//
&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	ОбновитьДоступностьТочекВыдачиСообщенийКассиру();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОграниченияПоКонтрагентамПриИзменении(Элемент)
	
	Если (Объект.ПолучателиСкидкиКонтрагенты.Количество() > 0 
		И Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоСегментамКонтрагентов)
		ИЛИ (Объект.ПолучателиСкидкиСегменты.Количество()> 0 
		И Объект.ВариантОграниченияПоПолучателям = ВариантОграниченияПоКонтрагентам) Тогда
		
		Описание = Новый ОписаниеОповещения("ВариантПредоставленияСкидкиПоПолучателямПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, НСтр("ru = 'Таблица уточнений будет очищена. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,НСтр("ru = 'Изменение варианта уточнения'"));
	Иначе
		ВариантОграниченияПоКонтрагентамДоИзменения = Объект.ВариантОграниченияПоПолучателям;
		УправлениеВидимостьюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	ОбновитьВалютуПредоставления();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВалютуПредоставления()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		Объект.ВалютаПредоставления = Объект.ВидЦен.ВалютаЦены;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпособПредоставленияПриИзмененииСервер()
	
	УправлениеВидимостьюНаСервере();
	Если Объект.СпособПредоставления = СпособПредоставленияРасширение Тогда
		УстановитьИдентификаторДляРасчетаВРасширении();
	КонецЕсли;
	Элементы.ИдентификаторДляРасчетаВРасширении.Видимость = Объект.СпособПредоставления = СпособПредоставленияРасширение;
	
	ОбновитьВалютуПредоставления();
		
КонецПроцедуры

&НаКлиенте
Процедура СхемаВыдачиПодаркаПриИзменении(Элемент)
	Если СхемаВыдачиПодарка = "ИзКорзины" Тогда
		Объект.ПодарокИзКорзиныПокупателя = Истина;
		Объект.УчитыватьПодарокКакПродажу = Истина;
	ИначеЕсли СхемаВыдачиПодарка = "НаКассеВЧек" Тогда
		Объект.ПодарокИзКорзиныПокупателя = Ложь;
		Объект.УчитыватьПодарокКакПродажу = Истина;
	ИначеЕсли СхемаВыдачиПодарка = "НаКассеСписать" Тогда
		Объект.ПодарокИзКорзиныПокупателя = Ложь;
		Объект.УчитыватьПодарокКакПродажу = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СчетЗатратПодарка) Тогда
		Объект.СчетЗатратПодарка = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
	КонецЕсли;
	ПредставлениеНастроекПодарков();
	ОбновитьАвтонаименование(Истина);
		
КонецПроцедуры

// Открывает форму создания доп. реквизита.
//
&НаКлиенте
Процедура СоздатьНовыйДопРеквизит(Команда)
	
	ПараметрыФормы = ПараметрыСозданияДопРеквизита();
	ОткрытьФорму(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
		ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийТабличныхЧастей

// Процедура - обработчик события ПриИзменении элемента УсловияПредоставления формы.
//
&НаКлиенте
Процедура УсловияПредоставленияПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	ОбновитьВидимостьПромокодов();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении ТЧ ВремяПоДнямНедели формы.
//
&НаКлиенте
Процедура ВремяПоДнямНеделиПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении ТЧ ПолучателиСкидкиКонтрагенты формы.
//
&НаКлиенте
Процедура ПолучателиСкидкиПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении ТЧ ПолучателиСкидкиСклады формы.
//
&НаКлиенте
Процедура ПолучателиСкидкиСкладыПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении колонки ЗначениеСкидки в ТЧ НоменклатураГруппыЦеновыеГруппы формы.
//
&НаКлиенте
Процедура НоменклатураГруппыЦеновыеГруппыЗначениеСкидкиНаценкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НоменклатураГруппыЦеновыеГруппы.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если Объект.СпособПредоставления = СпособПредоставленияПроцент Тогда
			Если ТекущаяСтрока.ЗначениеСкидкиНаценки > 100 Тогда
				ТекстСообщения = НСтр("ru = 'Процент скидки должен быть не более 100%'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, 
																	,
																	"НоменклатураГруппыЦеновыеГруппы["+(ТекущаяСтрока.НомерСтроки-1)+"].ЗначениеСкидкиНаценки",
																	"Объект");
				ТекущаяСтрока.ЗначениеСкидкиНаценки = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении ТЧ НоменклатураГруппыЦеновыеГруппы формы.
//
&НаКлиенте
Процедура НоменклатураГруппыЦеновыеГруппыПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования ТЧ ВремяПоДнямНедели формы.
//
&НаКлиенте
Процедура ВремяПоДнямНеделиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Выбран = Истина;
		Элемент.ТекущиеДанные.ВремяНачала = '00010101000000';
		Элемент.ТекущиеДанные.ВремяОкончания = '00010101235959';
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура управляет возможными точками выдачи сообщения кассиру для способа предоставления скидки - сообщение.
//
&НаСервере
Процедура ОбновитьДоступностьТочекВыдачиСообщенийКассиру()
	ТекстПодсказки = "";
	
	ТочкаПослеОформления = ПредопределенноеЗначение("Перечисление.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека");
	ТочкаПриРасчете = ПредопределенноеЗначение("Перечисление.ТочкиВыдачиСообщенияКассиру.ВМоментРасчетаСкидок");
	ТочкаПоУмолчанию = ТочкаПриРасчете;	
	ДополнительныеТочки = Новый Массив;
	Если Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение") Тогда
		Если Объект.Назначение = Перечисления.НазначенияАвтоматическихСкидок.Розница Тогда
			ТочкаПоУмолчанию = ТочкаПослеОформления;
			ДополнительныеТочки.Добавить(ТочкаПриРасчете);
		Иначе         
			ТекстПодсказки = "В опте показ сообщений поддерживается только в момент расчета скидки";
		КонецЕсли;		
	ИначеЕсли Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияСкидокНаценок.Подарок") Тогда
		ТочкаПоУмолчанию = ТочкаПослеОформления;
		ДополнительныеТочки.Добавить(ТочкаПриРасчете);
	КонецЕсли;
	
	ДоступныеТочкиВывода = Новый массив;
	ДоступныеТочкиВывода.Добавить(ТочкаПоУмолчанию);
	
	Для каждого ДополнительнаяТочка Из ДополнительныеТочки Цикл
		ДоступныеТочкиВывода.Добавить(ДополнительнаяТочка);
	КонецЦикла;

	Элементы.МоментВыдачиСообщения.Подсказка = ТекстПодсказки;
	Элементы.МоментВыдачиСообщения.СписокВыбора.Очистить();
	Элементы.МоментВыдачиСообщения.СписокВыбора.ЗагрузитьЗначения(ДоступныеТочкиВывода); 
	Если ДоступныеТочкиВывода.Найти(Объект.МоментВыдачиСообщения) = неопределено Тогда
		Объект.МоментВыдачиСообщения = ТочкаПоУмолчанию;
	КонецЕсли;
	ДоступностьВыбораТочки = Истина;
	Если ДоступныеТочкиВывода.Количество() = 1 Тогда 
		ДоступностьВыбораТочки = Ложь;
	КонецЕсли;
	Элементы.МоментВыдачиСообщения.Доступность = ДоступностьВыбораТочки;
	
КонецПроцедуры

Процедура ОбновитьВидимостьПромокодов()
	ТребуетсяПромокод = УсловияСодержатТребованияПромокода(Объект.УсловияПредоставления);
	Элементы.ГруппаПромокоды.Видимость = ТребуетсяПромокод;
	Элементы.СтраницаРассылкаПромокодов.Видимость = ТребуетсяПромокод;
	
	Если ТребуетсяПромокод Тогда
 		СервисМассовойРассылки = МассовыеРассылкиИнтеграция.ПодключенныйСервис();
	   	ИспользоватьМассовыеРассылкиИнтеграция = ПолучитьФункциональнуюОпцию("ИспользоватьМассовыеРассылкиИнтеграция")
			И ЗначениеЗаполнено(СервисМассовойРассылки);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоздатьМассовуюРассылкуСервиса", "Видимость", ИспользоватьМассовыеРассылкиИнтеграция);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПромокодыОтправитьПромокодыСервис", "Видимость", ИспользоватьМассовыеРассылкиИнтеграция);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПромокодыКонтекстноеМенюОтправитьПромокодыСервис", "Видимость", ИспользоватьМассовыеРассылкиИнтеграция);
		
		ПредставлениеСервиса = МассовыеРассылкиИнтеграция.ПредставлениеСервиса(СервисМассовойРассылки);
		Элементы.СоздатьМассовуюРассылкуСервиса.Заголовок = СтрШаблон(НСтр("ru='Создать рассылку %1'"), ПредставлениеСервиса);
		Элементы.ПромокодыОтправитьПромокодыСервис.Заголовок = СтрШаблон(НСтр("ru='Отправить выделенные промокоды %1'"), ПредставлениеСервиса);
		Элементы.ПромокодыКонтекстноеМенюОтправитьПромокодыСервис.Заголовок = СтрШаблон(НСтр("ru='Отправить выделенные промокоды %1'"), ПредставлениеСервиса);
		
		Если НЕ ПравоДоступа("Редактирование", Метаданные.Документы.МассоваяРассылка) Тогда
			Элементы.СоздатьМассовуюРассылку.Видимость = Ложь;
			Элементы.СоздатьМассовуюРассылкуСервиса.Видимость = Ложь;
			Элементы.ПромокодыОтправитьПромокоды.Видимость = Ложь;
			Элементы.ПромокодыОтправитьПромокодыСервис.Видимость = Ложь;
			Элементы.ПромокодыКонтекстноеМенюОтправитьПромокоды.Видимость = Ложь;
			Элементы.ПромокодыКонтекстноеМенюОтправитьПромокодыСервис.Видимость = Ложь;			
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ДобавитьГруппуНоменклатурыКатегорийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		НоваяСтрока = Объект.НоменклатураГруппыЦеновыеГруппы.Добавить();
		НоваяСтрока.ЗначениеУточнения = РезультатЗакрытия;
		Элементы.НоменклатураГруппыЦеновыеГруппы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Если Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре Тогда
			НоваяСтрока.ЭтоГруппа = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗакрытия, "ЭтоГруппа");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьГруппуНоменклатурыКатегорийЗавершение", ЭтотОбъект);
	Если Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоКатегориям Тогда
		ПараметрыОткрытия = Новый Структура("");
		ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаВыбораГруппы", ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуКонтрагентовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		НоваяСтрока = Объект.ПолучателиСкидкиКонтрагенты.Добавить();
		НоваяСтрока.Получатель = РезультатЗакрытия;
		Элементы.ПолучателиСкидки.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуКонтрагентов(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьГруппуКонтрагентовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбораГруппы",, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПризнакиЭтоГруппа();
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(Промокоды.Отбор, 
		"СкидкаНаценка",
		,
		Объект.Ссылка, 
		ВидСравненияКомпоновкиДанных.Равно, 
		Истина);
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(РассылкиПромокодов.Отбор, 
		"ПредлагаемаяСкидка",
		,
		Объект.Ссылка, 
		ВидСравненияКомпоновкиДанных.Равно, 
		Истина);
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОбновитьПризнакиЭтоГруппа();
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина, "НоменклатураГруппыЦеновыеГруппы");
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНастроекПодарков()
	
	Элементы.ПодарокИзСписка.Видимость = Объект.НаборПодарков.Количество() > 1;
	//Если Объект.ПодарокИзКорзиныПокупателя Тогда
	//	Элементы.ПодарокИзСписка.Подсказка = НСтр("ru = 'Скидка будет предоставлена только на один товар в корзине'");
	//Иначе
	//	Элементы.ПодарокИзСписка.Подсказка = НСтр("ru = 'При оформлении продажи, продавец должен будет выбрать один подарок к выдаче'");
	//КонецЕсли;
	Если Объект.ОбластьПредоставления = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
		Элементы.СхемаВыдачиПодаркаНаКассеВЧек.Подсказка = НСтр("ru = 'Выданный подарок будет добавлен в чек покупателя со 100% скидкой, равномерно распределенной по документу'");
	Иначе
		Элементы.СхемаВыдачиПодаркаНаКассеВЧек.Подсказка = НСтр("ru = 'Выданный подарок будет добавлен в чек покупателя со 100% скидкой'");
	КонецЕсли;
	Элементы.СчетЗатратПодарка.Доступность = Не Объект.УчитыватьПодарокКакПродажу И Не Объект.ПодарокИзКорзиныПокупателя; 
	Элементы.ДаритьТолькоПолныйКомплект.Видимость = Объект.ПодарокИзКорзиныПокупателя И Не Объект.ЛюбойПодарокИзСписка;
	ВариантПодаркаКомплекта = ?(Объект.ЛюбойПодарокИзСписка, "ОдинНаВыбор", "ВсеИзСписка");
		
КонецПроцедуры

&НаКлиенте
Процедура НаборПодарковНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НаборПодарков.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("НаборПодарковПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		НаборПодарковНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаборПодарковПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	НаборПодарковНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура НаборПодарковНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.НаборПодарков.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Характеристика = Неопределено;
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;

КонецПроцедуры

&НаКлиенте
Процедура НаборПодарковПослеУдаления(Элемент)
	
	Если Объект.НаборПодарков.Количество() <= 1 Тогда
		Объект.ЛюбойПодарокИзСписка = Ложь;
	КонецЕсли;
	ПредставлениеНастроекПодарков();
	
КонецПроцедуры

&НаКлиенте
Процедура НаборПодарковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования) 
	
	ПредставлениеНастроекПодарков(); 
	
КонецПроцедуры

&НаКлиенте
Процедура НаборПодарковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.ПодарокИзКорзиныПокупателя = Истина И Объект.УчитыватьПодарокКакПродажу = Истина Тогда
		СхемаВыдачиПодарка = "ИзКорзины";
	ИначеЕсли Объект.ПодарокИзКорзиныПокупателя = Ложь И Объект.УчитыватьПодарокКакПродажу = Истина Тогда
		СхемаВыдачиПодарка = "НаКассеВЧек";
	ИначеЕсли Объект.ПодарокИзКорзиныПокупателя = Ложь И Объект.УчитыватьПодарокКакПродажу = Ложь Тогда
		СхемаВыдачиПодарка = "НаКассеСписать";
	Иначе
		// Настройки рассогласованы, подарок из корзины не может не учитываться как продажа
		Объект.УчитыватьПодарокКакПродажу = Истина;
		СхемаВыдачиПодарка = "ИзКорзины";
	КонецЕсли;
	ПредставлениеНастроекПодарков();  

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГенерацииПромокодов()
	ПараметрыОткрытия = Новый Структура("СкидкаНаценка", Объект.Ссылка);
	ОткрытьФорму("Обработка.ГенерацияПромокодов.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект); 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПромокоды(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для добавления промокодов, скидку (наценку) требуется записать.'");
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	Иначе
		ОткрытьФормуГенерацииПромокодов();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		УстановитьИдентификаторДляРасчетаВРасширенииКлиент();
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИдентификаторАвтоматическойСкидки", Объект.ИдентификаторДляРасчетаВРасширении);
	ОткрытьФорму("ОбщаяФорма.ПомощникПодключенияПроцедурыРасширения", ПараметрыОткрытия, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КомплектПодарковПриИзменении(Элемент)
	Объект.ЛюбойПодарокИзСписка = ВариантПодаркаКомплекта = "ОдинНаВыбор";
	ПредставлениеНастроекПодарков();
КонецПроцедуры

#КонецОбласти

