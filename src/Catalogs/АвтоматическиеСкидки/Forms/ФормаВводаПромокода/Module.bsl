
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	ОчисткаПромокодаВДокументе = "ОчиститьПромокод";
	СчитываниеПромокода = "ВводПромокода";
	РежимВводаПромокода = СчитываниеПромокода;
	
	Параметры.Свойство("Промокод", Промокод);
	ПроверитьПромокодНаДействительность();
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И НЕ ЗаблокироватьВводДанных Тогда
			// Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			Промокод = Штрихкод;
			ПроверитьПромокодНаДействительность();
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	Если Не ПромокодДоступен Тогда
		// Кнопка нажата во время редактирования 
		Возврат;
	КонецЕсли;
	ПараметрыЗакрытия = Новый Структура;
	Если РежимВводаПромокода = ОчисткаПромокодаВДокументе Тогда
		ПараметрыЗакрытия.Вставить("Промокод", "");
	Иначе
		ПараметрыЗакрытия.Вставить("Промокод", Промокод);
		Условие = ПолучитьУсловиеДляПромокода(Промокод);
		Если ЗначениеЗаполнено(Условие) Тогда
			ПараметрыЗакрытия.Вставить("УсловиеПредоставленияСкидки", Условие);
		КонецЕсли;
	КонецЕсли;

	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУсловиеДляПромокода(Промокод)
	Результат = Неопределено;
	УсловияПромокодов = ПромокодыУНФ.УсловияПримененияПромокодов(Промокод);
	Результат = УсловияПромокодов[Промокод];
	Возврат Результат;
КонецФункции


&НаКлиенте
Процедура ПромокодПриИзменении(Элемент)
	ПроверитьПромокодНаДействительность();
КонецПроцедуры

&НаСервере
Процедура ПроверитьПромокодНаДействительность()
	ПодсказкаВводаПромокода = НСтр("ru = 'Введите или просканируйте промокод на скидку, предоставленный покупателем.'");
	Если ЗначениеЗаполнено(Промокод) Тогда
		ДоступноПрименений = РегистрыНакопления.ДоступностьПромокодов.ДоступноПримененийПромокода(Промокод,,ПодсказкаВводаПромокода );
		Если ДоступноПрименений = Неопределено Тогда
			ПромокодДоступен = Ложь;
		Иначе
			ПромокодДоступен = ДоступноПрименений > 0;
		КонецЕсли;
	Иначе
		ПромокодДоступен = Истина;
	КонецЕсли;
	Элементы.ДекорацияПодсказка.Заголовок = ПодсказкаВводаПромокода;
	ОбновлениеДоступностиПромокода();
КонецПроцедуры

Процедура ОбновлениеДоступностиПромокода()
	Элементы.Готово.Доступность = ПромокодДоступен;
	Элементы.ДекорацияУспех.Видимость = ПромокодДоступен И ЗначениеЗаполнено(Промокод);
	Элементы.ДекорацияОшибка.Видимость = Не ПромокодДоступен;
КонецПроцедуры

&НаКлиенте
Процедура РежимВводаПромокодаПриИзменении(Элемент)	
	Если ЗначениеЗаполнено(Промокод) 
		И РежимВводаПромокода = СчитываниеПромокода Тогда
		ПроверитьПромокодНаДействительность();
	Иначе
		ПромокодДоступен = Истина;
	КонецЕсли;
	ОбновлениеДоступностиПромокода();
	УстановитьДоступностьВводаПромокода();
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьДоступностьВводаПромокода()
	ЗаблокироватьВводДанных = РежимВводаПромокода = ОчисткаПромокодаВДокументе;
	Элементы.ГруппаВводПромокода.Доступность = Не ЗаблокироватьВводДанных;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТекущийЭлемент = Элементы.Промокод;
КонецПроцедуры
