#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйИнтерфейс

// Процедура заполняет массив документов физ. лиц
//
Функция ДокументФизЛицаПоВиду(Период, ФизическоеЛицо, ВидДокумента = Неопределено) Экспорт
	
	ДокументыФизическихЛиц = Новый Массив;
	ДанныеДокумента = Новый Структура("ФизическоеЛицо, ВидДокумента, Серия, Номер, ДатаВыдачи, СрокДействия, КемВыдан, КодПодразделения, ЯвляетсяДокументомУдостоверяющимЛичность, Представление");
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		Возврат ДокументыФизическихЛиц;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		
		Период = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК ФизическоеЛицо
	|	,ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента
	|	,ДокументыФизическихЛицСрезПоследних.Серия КАК Серия
	|	,ДокументыФизическихЛицСрезПоследних.Номер КАК Номер
	|	,ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи
	|	,ДокументыФизическихЛицСрезПоследних.СрокДействия КАК СрокДействия
	|	,ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан
	|	,ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК КодПодразделения
	|	,ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность КАК ЯвляетсяДокументомУдостоверяющимЛичность
	|	,ДокументыФизическихЛицСрезПоследних.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Период, ФизЛицо = &ФизЛицо И &УсловиеПоискаПоВидуДокумента) КАК ДокументыФизическихЛицСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи УБЫВ";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицо);
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоискаПоВидуДокумента", "ВидДокумента = &ВидДокумента");
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
		
	Иначе
		
		Запрос.УстановитьПараметр("УсловиеПоискаПоВидуДокумента", Истина); // выберем все документы
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
		ДокументыФизическихЛиц.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДокументыФизическихЛиц;
	
КонецФункции // ДокументФизЛицаПоВиду()

// Возвращает список физлиц с похожим наименованием.
// Параметры:
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое уже сопоставлено.
//
Функция ПодобратьСписокФизЛиц(Фамилия, Имя = "", Отчество = "", ФизическоеЛицоСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФИОФизическихЛиц.ФизическоеЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
		|ГДЕ
		|	ФИОФизическихЛиц.ФизическоеЛицо <> &ФизЛицо
		|	И ФИОФизическихЛиц.Фамилия ПОДОБНО &Фамилия";
	
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("Фамилия", Фамилия + "%");
	
	Если Не ПустаяСтрока(Имя) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ФИОФизическихЛиц.Имя = &Имя";
		Запрос.УстановитьПараметр("Имя", Имя + "%");
	КонецЕсли;
	
	Если Не ПустаяСтрока(Отчество) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ФИОФизическихЛиц.Отчество = &Отчество";
		Запрос.УстановитьПараметр("Отчество", Отчество + "%");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
	
КонецФункции

// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
//                 включает фамилию и инициалы, если Ложь - фамилию и полностью
//                 имя и отчество.
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 "Фамилия",
//                 "Имя"
//                 "Отчество"
//                 "Представление (Фамилия И.О.)"
//                 "Подразделение"
//                 "ДокументВид"
//                 "ДокументСерия"
//                 "ДокументНомер"
//                 "ДокументДатаВыдачи"
//                 "ДокументКемВыдан"
//                 "ДокументКодПодразделения".
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
	
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза", ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Константы.УчетПоКомпании.Компания(Организация));
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	Сотрудники.Подразделение,
	|	Сотрудники.ТабельныйНомер,
	|	Сотрудники.Должность,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК ДокументНомер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДокументДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК ДокументКемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК ДокументКодПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеЛица.Ссылка КАК ФизЛицо
	|	ИЗ
	|		Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ГДЕ
	|		ФизическиеЛица.Ссылка = &ФизЛицо) КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаСреза, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизЛица.ФизЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|				&ДатаСреза,
	|				Физлицо = &ФизЛицо
	|					И ЯвляетсяДокументомУдостоверяющимЛичность) КАК ДокументыФизическихЛицСрезПоследних
	|		ПО ФизЛица.ФизЛицо = ДокументыФизическихЛицСрезПоследних.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			Сотрудники.Сотрудник.Код КАК ТабельныйНомер,
	|			Сотрудники.Сотрудник.Физлицо КАК ФизЛицо,
	|			Сотрудники.Должность КАК Должность,
	|			Сотрудники.СтруктурнаяЕдиница КАК Подразделение
	|		ИЗ
	|			РегистрСведений.Сотрудники.СрезПоследних(
	|					&ДатаСреза,
	|					Сотрудник.Физлицо = &ФизЛицо
	|						И Организация = &Организация
	|						И Сотрудник.ТипЗанятости = ЗНАЧЕНИЕ(Перечисление.ТипыЗанятости.ОсновноеМестоРаботы)) КАК Сотрудники
	|		ГДЕ
	|			Сотрудники.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		
	|		УПОРЯДОЧИТЬ ПО
	|			Сотрудники.Сотрудник.ТипЗанятости.Порядок УБЫВ) КАК Сотрудники
	|		ПО ФизЛица.ФизЛицо = Сотрудники.ФизЛицо";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Данные.Следующий();
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, Подразделение, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
								|ПредставлениеДокумента");

	ЗаполнитьЗначенияСвойств(Результат, Данные);

	Результат.Представление = ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество, ФИОКратко);
	Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);
	
	Возврат Результат;
	
КонецФункции // ДанныеФизЛица()

Функция ДолжностиФизическогоЛица(Организация, ФизическоеЛицо) Экспорт
	
	// Сортировка строк в результирующей таблице:
	// - должности из регистра подписантов;
	// - должности с основного места работы;
	// - должности по совместительству;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодписиДокументов.ФизическоеЛицо
	|	,Значение(Перечисление.ТипыЗанятости.ОсновноеМестоРаботы) КАК ТипЗанятости
	|	,Неопределено КАК Подразделение
	|	,ПодписиДокументов.Должность
	|	,Истина КАК СведенияИзПодписантов
	|ПОМЕСТИТЬ ДанныеПодписанта
	|ИЗ Справочник.Подписи КАК ПодписиДокументов
	|ГДЕ НЕ ПодписиДокументов.ПравоОтозвано И ПодписиДокументов.Организация = &Организация И ПодписиДокументов.ФизическоеЛицо = &ФизическоеЛицо
	|
	|;Выбрать
	|	СпрСотрудники.Ссылка КАК Сотрудник
	|	,СпрСотрудники.Физлицо КАК ФизическоеЛицо
	|	,СпрСотрудники.ТипЗанятости
	|ПОМЕСТИТЬ СотрудникиФизическогоЛица
	|ИЗ Справочник.Сотрудники КАК СпрСотрудники
	|ГДЕ СпрСотрудники.Физлицо = &ФизическоеЛицо
	|
	|;Выбрать
	|	СотрудникиФизическогоЛица.ФизическоеЛицо
	|	,СотрудникиФизическогоЛица.ТипЗанятости
	|	,РегистрСведенийОСотрудниках.СтруктурнаяЕдиница КАК Подразделение
	|	,РегистрСведенийОСотрудниках.Должность
	|	,Ложь КАК СведенияИзПодписантов
	|ПОМЕСТИТЬ ДанныеОПриемеНаРаботу
	|ИЗ СотрудникиФизическогоЛица КАК СотрудникиФизическогоЛица
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(, Организация = &Организация) КАК РегистрСведенийОСотрудниках
	|ПО СотрудникиФизическогоЛица.Сотрудник = РегистрСведенийОСотрудниках.Сотрудник
	|	И РегистрСведенийОСотрудниках.Организация = &Организация
	|
	|;Выбрать
	|	ДанныеПодписанта.ФизическоеЛицо, ДанныеПодписанта.ТипЗанятости, ДанныеПодписанта.Подразделение, ДанныеПодписанта.Должность, ДанныеПодписанта.СведенияИзПодписантов
	|ИЗ ДанныеПодписанта КАК ДанныеПодписанта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеОПриемеНаРаботу.ФизическоеЛицо, ДанныеОПриемеНаРаботу.ТипЗанятости, ДанныеОПриемеНаРаботу.Подразделение, ДанныеОПриемеНаРаботу.Должность, ДанныеОПриемеНаРаботу.СведенияИзПодписантов
	|ИЗ ДанныеОПриемеНаРаботу КАК ДанныеОПриемеНаРаботу
	|УПОРЯДОЧИТЬ ПО СведенияИзПодписантов Убыв, ТипЗанятости ВОЗР";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получение представления для документа, удостоверяющего личность.
//
// Параметры
//  ДанныеФизЛица - Коллекция данных физ. лица (структура, строка таблицы, ...),
//                 содержащая значения: ДокументВид, ДокументСерия,
//                 ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан.  
//
// Возвращаемое значение:
//   Строка - Представление документа, удостоверяющего личность.
//
Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица)
	
	Возврат Строка(ДанныеФизЛица.ДокументВид) + " серия " +
			ДанныеФизЛица.ДокументСерия       + ", номер " +
			ДанныеФизЛица.ДокументНомер       + ", выданный " +
			Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДанныеФизЛица.ДокументКемВыдан;
			
КонецФункции // ПолучитьПредставлениеДокументаФизЛица()

// Функция формирует фамилию, имя и отчество одной строкой.
//
// Параметры
//  Фамилия      - фамилия физ. лица
//  Имя          - имя физ. лица
//  Отчество     - отчество физ. лица
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица
//                 включает фамилию и инициалы, если Ложь - фамилию и полностью
//                 имя и отчество.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина)
	
	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
				?(НЕ ПустаяСтрока(Отчество) , 
				Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя + 
				?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
	КонецЕсли;

КонецФункции // ПолучитьФамилиюИмяОтчество()

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		МодульЗащитаПерсональныхДанных = ОбщегоНазначения.ОбщийМодуль("ЗащитаПерсональныхДанных");
		МодульЗащитаПерсональныхДанных.ДобавитьКомандуПечатиСогласияНаОбработкуПерсональныхДанных(КомандыПечати);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если Не Параметры.Отбор.Свойство("Недействителен") Тогда
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

Процедура ЗаполнитьДанныеПанелиКонтактнаяИнформация(ВладелецКИ, ДанныеПанелиКонтактнойИнформации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ФизическиеЛицаКонтактнаяИнформация.Тип КАК Тип,
	|	ФизическиеЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление,
	|	ФизическиеЛицаКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	ФизическиеЛицаКонтактнаяИнформация.Значение КАК Значение
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛицо", ВладелецКИ);
	ДанныеКИ = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеКИ.Следующий() Цикл
		НоваяСтрока = Новый Структура;
		Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ДанныеКИ.Значение);
		НоваяСтрока.Вставить("Отображение", Строка(ДанныеКИ.Вид) + ": " + ДанныеКИ.Представление + ?(ПустаяСтрока(Комментарий), "", ", " + Комментарий));
		НоваяСтрока.Вставить("ИндексПиктограммы", КонтактнаяИнформацияПанельУНФ.ИндексПиктограммыПоТипу(ДанныеКИ.Тип));
		НоваяСтрока.Вставить("ТипОтображаемыхДанных", "ЗначениеКИ");
		НоваяСтрока.Вставить("ВладелецКИ", ВладелецКИ);
		НоваяСтрока.Вставить("ПредставлениеКИ", ДанныеКИ.Представление);
		НоваяСтрока.Вставить("ТипКИ", ДанныеКИ.Тип);
		ДанныеПанелиКонтактнойИнформации.Добавить(НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗаполнитьРеквизитыИзПотребителя.
Процедура ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	Если Не ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		
		Если МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMPrivatePerson") Тогда
			
			// Заполним данные физ. лица.
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ФИО, ДатаРождения");
			
			ОбъектXDTO.name = Реквизиты.ФИО;
			ОбъектXDTO.birthDay = Реквизиты.ДатаРождения;
			
		ИначеЕсли МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMUser") Тогда
			
			// Найдем пользователя, соответствующего физ. лицу.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Пользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
				|	И НЕ Пользователи.ПометкаУдаления");
			Запрос.УстановитьПараметр("ФизическоеЛицо", СсылкаНаПотребитель);
			ВыборкаПользователи = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаПользователи.Количество() = 1 Тогда
				// Заполним данные пользователя.
				ВыборкаПользователи.Следующий();
				МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(
					Прокси,
					ОбъектXDTO,
					ВыборкаПользователи.Ссылка);
			Иначе
				// Заполним имеющиеся данные.
				ИнтеграцияС1СДокументооборотБЗК.ЗаполнитьФизическоеЛицо(
					СсылкаНаПотребитель,
					Прокси,
					ОбъектXDTO);
			КонецЕсли;
			
		ИначеЕсли МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMEmployee") Тогда
			
			// Найдем сотрудника, соответствующего физ. лицу.
			Сотрудник = Неопределено;
			СотрудникиФизическогоЛица = КадровыйУчет.СотрудникиФизическихЛиц(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаПотребитель));
			КолВоСотрудников = СотрудникиФизическогоЛица.Количество();
			Если КолВоСотрудников = 1 Тогда
				// Если по физ. лицу числится единственный сотрудник - выберем его.
				Сотрудник = СотрудникиФизическогоЛица[0].Сотрудник;
			ИначеЕсли КолВоСотрудников > 1 Тогда
				// Если по физ. лицу есть несколько сотрудников - найдем основного.
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ВТРабочиеМестаСотрудников.Организация КАК Организация,
					|	ВТРабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
					|ИЗ
					|	ВТРабочиеМестаСотрудников КАК ВТРабочиеМестаСотрудников");
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				ДатаСведений = ТекущаяДатаСеанса();
				ПараметрыЗапроса = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(
					СотрудникиФизическогоЛица.ВыгрузитьКолонку("Сотрудник"),
					ДатаСведений,
					ДатаСведений);
				КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(
					Запрос.МенеджерВременныхТаблиц,
					Истина,
					ПараметрыЗапроса);
				ОрганизацииФизЛиц = Запрос.Выполнить().Выбрать();
				Если ОрганизацииФизЛиц.Количество() = 1 Тогда
					// Если физ. лицо работает сразу в нескольких организациях - нужного основного сотрудника
					// однозначно определить не получится. Если в одной организации - выберем основного сотрудника
					// по данной организации.
					ОрганизацииФизЛиц.Следующий();
					Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(
						ОрганизацииФизЛиц.ФизическоеЛицо,
						ОрганизацииФизЛиц.Организация,
						ДатаСведений);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				// Заполним данные из найденного сотрудника.
				МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(
					Прокси,
					ОбъектXDTO,
					Сотрудник);
			Иначе
				// Найдем пользователя, соответствующего физ. лицу.
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Пользователи.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Пользователи КАК Пользователи
					|ГДЕ
					|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
					|	И НЕ Пользователи.ПометкаУдаления");
				Запрос.УстановитьПараметр("ФизическоеЛицо", СсылкаНаПотребитель);
				ВыборкаПользователи = Запрос.Выполнить().Выбрать();
				Если ВыборкаПользователи.Количество() = 1 Тогда
					// Заполним данные пользователя.
					ВыборкаПользователи.Следующий();
					МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(
						Прокси,
						ОбъектXDTO,
						ВыборкаПользователи.Ссылка);
				Иначе
					// Заполним имеющиеся данные.
					ИнтеграцияС1СДокументооборотБЗК.ЗаполнитьФизическоеЛицо(
						СсылкаНаПотребитель,
						Прокси,
						ОбъектXDTO);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMPartyRowContact")
				Или МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMParty") Тогда
			
			// Физ. лицо является стороной документа или контактным лицом стороны.
			// Заполним вспомогательные реквизиты объекта XDTO составного типа.
			ИнтеграцияС1СДокументооборотБЗК.ЗаполнитьИнформациюОПользователе(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриСозданииПоСсылке.
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС) Экспорт
	
	Если Не (ОбъектXDTO.objectId.type = "DMPrivatePerson"
			И ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.ФизическиеЛица")) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектИС.ФИО = ОбъектXDTO.name;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		
		Если МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "birthDay") Тогда
			ОбъектИС.ДатаРождения = ОбъектXDTO.birthDay;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ДополнитьСоответствиеТипов.
Процедура ДополнитьСоответствиеТипов(Таблица) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотБазоваяФункциональность");
		МодульИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
			Таблица, "DMPrivatePerson", Тип("СправочникСсылка.ФизическиеЛица"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИнициалы(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Инициалы = """"
		|	И ФизическиеЛица.Имя <> """"";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	// АПК:1328-выкл Блокировку выполнит ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных
	Выборка = Запрос.Выполнить().Выбрать();
	// АПК:1328-вкл
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "Справочник.ФизическиеЛица", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ФизическоеЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФизическоеЛицоОбъект.Инициалы = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыПоИмениОтчеству(
			ФизическоеЛицоОбъект.Имя, ФизическоеЛицоОбъект.Отчество);
		
		// АПК:1327-выкл Блокировка выполнена ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФизическоеЛицоОбъект);
		// АПК:1327-вкл
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли