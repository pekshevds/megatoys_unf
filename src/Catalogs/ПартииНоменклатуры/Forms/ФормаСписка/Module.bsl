
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец") Тогда
		
		Номенклатура = Параметры.Отбор.Владелец;
		
		// Прослеживаемость
		Если Параметры.Свойство("ПроверятьРеквизитИспользоватьПартии")
			И Параметры.ПроверятьРеквизитИспользоватьПартии Тогда
			ИспользоватьПартии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьПартии");
			Если Не ИспользоватьПартии Тогда
				Отказ = Истина;
				
				ТекстСообщения = НСтр("ru = 'Для номенклатуры не ведется учет по партиям!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// Конец Прослеживаемость
		
		Если НЕ ЗначениеЗаполнено(Номенклатура)
			ИЛИ НЕ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Партии хранятся только для запасов'");
			Элементы.Список.ТолькоПросмотр = Истина; 
			
		// Наборы
		ИначеЕсли Номенклатура.ЭтоНабор Тогда
			
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Партии недоступны для наборов'");
			Элементы.Список.ТолькоПросмотр = Истина;
		
		КонецЕсли;
		
		ДоступностьФормаИспользоватьКакОсновную = Истина;
		
	Иначе
		ДоступностьФормаИспользоватьКакОсновную = Ложь;
	КонецЕсли;
	
	Элементы.ОтборВладелецПартии.СписокВыбора.Добавить("<Без владельца>", "<Без владельца>");
	
	Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		
		ВидОперации = ?(Параметры.Свойство("ОперацияДокумента") И ЗначениеЗаполнено(Параметры.ОперацияДокумента), Параметры.ОперацияДокумента, Неопределено);
		НалогообложениеНДС = ?(Параметры.Свойство("НалогообложениеНДС") И ЗначениеЗаполнено(Параметры.НалогообложениеНДС), Параметры.НалогообложениеНДС, Неопределено);
		
		Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Статус") Тогда
			СтатусПартии = Новый СписокЗначений;
			СтатусОтбора = Параметры.Отбор.Статус;
			
			Если ТипЗнч(СтатусОтбора) = Тип("ФиксированныйМассив") 
				ИЛИ ТипЗнч(СтатусОтбора) = Тип("Массив") Тогда
				
				Для Каждого ЭлементМассива Из СтатусОтбора Цикл
					СтатусПартии.Добавить(ЭлементМассива);
				КонецЦикла;
				
			Иначе
				СтатусПартии.Добавить(СтатусОтбора);
			КонецЕсли;
		Иначе
			ВидОперации = ?(Параметры.Свойство("ОперацияДокумента") И ЗначениеЗаполнено(Параметры.ОперацияДокумента), Параметры.ОперацияДокумента, Неопределено);
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОперацииИлиХозОперацииСтатусуПартии(ЭтаФорма, ВидОперации);
		КонецЕсли;
		
		Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
		Элементы.ОтборСтатус.Доступность = Ложь;
		ЭтаФорма.ЗакрыватьПриВыборе = Истина; 
		Элементы.ГруппаИспользованияПартийПоиск.Видимость = Ложь;
		Элементы.ГруппаИспользованияПартийУправлениеПоиском.Видимость = Ложь;
		Элементы.ГруппаИспользованияПартийПоискДляФормыВыбора.Видимость = Истина;
		Элементы.ГруппаИспользованияПартийУправлениеПоискомДляФормыВыбора.Видимость = Истина;
		
		Если СтатусПартии.Количество()
			Тогда
			
			Если ТипЗнч(СтатусПартии) = Тип("СписокЗначений") Тогда
				Для Каждого СтрокаСписка Из СтатусПартии Цикл
					УстановитьМеткуИОтборСписка("Статус", Элементы.ГруппаОтборСтатус.Имя, СтрокаСписка.Значение);
				КонецЦикла;
			Иначе
				УстановитьМеткуИОтборСписка("Статус", Элементы.ГруппаОтборСтатус.Имя, СтатусПартии);
			КонецЕсли;
			
			Если Параметры.Свойство("ВладелецПартии") И ЗначениеЗаполнено(Параметры.ВладелецПартии) Тогда
				УстановитьМеткуИОтборСписка("ВладелецПартии", Элементы.ГруппаОтборВладелецПартии.Имя, Параметры.ВладелецПартии);
				УстановитьМеткуИОтборСписка("ВладелецПартии", Элементы.ГруппаОтборВладелецПартии.Имя, Справочники.Контрагенты.ПустаяСсылка(), "<Без владельца>");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		//УНФ.ОтборыСписка
		РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект);
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список,,,,, Ложь);
		//Конец УНФ.ОтборыСписка
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура)
		Тогда
		
		ФОДляИсключения = Новый СписокЗначений;
		
		Если НЕ ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
			ФОДляИсключения.Добавить(Перечисления.СтатусыПартий.ТоварыНаКомиссии)
		КонецЕсли;
		
		Если НЕ ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветХранение") Тогда
			ФОДляИсключения.Добавить(Перечисления.СтатусыПартий.ОтветственноеХранение)
		КонецЕсли;
		
		Если НЕ ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
			ФОДляИсключения.Добавить(Перечисления.СтатусыПартий.ДавальческоеСырье)
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("ФОДляИсключения",ФОДляИсключения);
	Иначе
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,"ГДЕ
		|	НЕ СправочникПартииНоменклатуры.Статус В (&ФОДляИсключения)","");
		
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЗапретКомиссионныхПартийБезВладельца = Константы.ЗапретКомиссионныхПартийБезВладельца.Получить();
	
	Если Параметры.ДополнительныеПараметры.Свойство("КонтрольЗаполненияВладельца") Тогда 
		Список.Параметры.УстановитьЗначениеПараметра("ЗапретКомиссионныхПартийБезВладельца", ЗапретКомиссионныхПартийБезВладельца);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ЗапретКомиссионныхПартийБезВладельца", Ложь);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьОтборНедействительная(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если Не ФормаВладельца = Неопределено
		И ТипЗнч(ФормаВладельца) = Тип("ФормаКлиентскогоПриложения")
		И ФормаВладельца.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		ИспользоватьПартии = ФормаВладельца.Объект.ИспользоватьПартии;
		ПроверятьЗаполнениеПартий = ФормаВладельца.Объект.ПроверятьЗаполнениеПартий;
		ЗаблокироватьКомандыМеню(Не ИспользоватьПартии);
		
		ЭтоНабор = ФормаВладельца.Объект.ЭтоНабор;
		
		Если Не ФормаВладельца.Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") 
			Или ЭтоНабор Тогда
			Элементы.ИспользоватьПартии.Доступность = Ложь;
			ИспользоватьПартии = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ИспользоватьПартии.Видимость = Ложь;
		Элементы.ПроверятьЗаполнениеПартий.Видимость = Ложь;
	КонецЕсли;
	
	Если ФормаВладельца = Неопределено Или ФормаВладельца.ТолькоПросмотр Тогда
		
		Элементы.ФормаИспользоватьКакОсновную.Доступность = Ложь;
		Элементы.ИспользоватьПартии.Доступность = Ложь;
		Элементы.ПроверятьЗаполнениеПартий.Доступность = Ложь;
	Иначе
		Элементы.ПроверятьЗаполнениеПартий.Доступность = ИспользоватьПартии;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		
		Если Не Элементы.Список.РежимВыбора Тогда
			//УНФ.ОтборыСписка
			СохранитьНастройкиОтборов();
			//Конец УНФ.ОтборыСписка
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект,,,, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПартияЗаписана"
		Тогда
		
		Если Параметр.ЭтоНовый И Не Параметр.Недействителен Тогда
			Партия = Параметр.Ссылка;
			Статус = Параметр.Статус;
			
			Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы") И ПроверятьЗаполнениеПартий Тогда
				ИспользоватьКакОсновнуюСерверПерваяПартия(Партия);
			ИначеЕсли Не Статус = ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы") Тогда
				ИспользоватьКакОсновнуюСерверПерваяПартия(Партия);
			КонецЕсли;
		КонецЕсли;
		
		ЗаблокироватьВозможностьУстановкиПартииКакОсновной(Параметр.Недействителен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПартииПриИзменении(Элемент)
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьКомандыМеню(Не ИспользоватьПартии);
	
	Элементы.ПроверятьЗаполнениеПартий.Доступность = ИспользоватьПартии;
	ПроверятьЗаполнениеПартий = ?(Не ИспользоватьПартии, Ложь, ПроверятьЗаполнениеПартий);
	
	ФормаВладельца.Объект.ИспользоватьПартии = ИспользоватьПартии;
	ФормаВладельца.Объект.ПроверятьЗаполнениеПартий = ПроверятьЗаполнениеПартий;
	
	ФормаВладельца.Модифицированность = Истина;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКакОсновную(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Список.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) И СтрокаТабличнойЧасти.Свойство("Ссылка") Тогда
		ИспользоватьКакОсновнуюСервер(СтрокаТабличнойЧасти.Ссылка,СтрокаТабличнойЧасти.Основная);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.ПартииНоменклатуры") И Не ЭтаФорма.ЗакрыватьПриВыборе Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока);
		ПараметрыФормы.Вставить("ИспользоватьПартии", ИспользоватьПартии);
		
		ОткрытьФорму("Справочник.ПартииНоменклатуры.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
	Если Элементы.Список.РежимВыбора Тогда 
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено Тогда
			
			Если ТекущиеДанные.Свойство("ЗапретВыбораПартии") И ТекущиеДанные.ЗапретВыбораПартии Тогда
				СтандартнаяОбработка = Ложь;
				ПоказатьПредупреждение(,НСтр("ru = 'Для выбора доступны партии с заполненным владельцем.'"));
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьОтборыНажатие(Элемент)
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	Элементы.ДекорацияРазвернутьОтборы.Видимость = НЕ НовоеЗначениеВидимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
УстановитьГруппировкиДинамическогоСпискаСогласноОтбору();
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
УстановитьГруппировкиДинамическогоСпискаСогласноОтбору();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительную(Команда)
	
	Элементы.ПоказыватьНедействительную.Пометка = Не Элементы.ПоказыватьНедействительную.Пометка;
	
	УстановитьОтборНедействительная(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЗаполнениеПартийПриИзменении(Элемент)
	
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца = Неопределено
		Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВладельца.Объект.ПроверятьЗаполнениеПартий = ПроверятьЗаполнениеПартий;
	ФормаВладельца.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ТекущиеДанные.Свойство("ЗапретВыбораПартии") И ТекущиеДанные.ЗапретВыбораПартии Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(,НСтр("ru = 'Для выбора доступны партии с заполненным владельцем.'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Номенклатура)Тогда
		ПроверитьИспользованиеПартийВНоменклатуре();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеПартийВНоменклатуре()
	
	Если Не Номенклатура.ИспользоватьПартии Тогда
		НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
		НоменклатураОбъект.ИспользоватьПартии = Истина;
		НоменклатураОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаблокироватьВозможностьУстановкиПартииКакОсновной();
	
КонецПроцедуры

#КонецОбласти

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	СтрокаТабличнойЧасти = Элементы.Список.ТекущиеДанные;
	
	Если НЕ СтрокаТабличнойЧасти=Неопределено И СтрокаТабличнойЧасти.Свойство("РодительскаяГруппировкаСтроки") И  НЕ Копирование Тогда
		
		Отказ = Истина;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИспользоватьПартии", ИспользоватьПартии);
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
		
		Если Не Элементы.Список.РежимВыбора Тогда
			
			Если СтрокаТабличнойЧасти.Свойство("Статус") Тогда
				СтатусДляСоздания = СтрокаТабличнойЧасти.Статус;
			Иначе
				ОтборПоСтатусам = Новый Структура("ИмяГруппыРодителя", "ГруппаОтборСтатус");
				СтрокиПоСтатусам = ДанныеМеток.НайтиСтроки(ОтборПоСтатусам);
				
				ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("МассивСтатусов");
				
				МассивСтатусов = Новый Массив;
				Для Каждого СтрокаМассива Из СтрокиПоСтатусам Цикл
					МассивСтатусов.Добавить(СтрокаМассива.Метка);
				КонецЦикла;
				ПараметрыОткрытия.ЗначенияЗаполнения.МассивСтатусов = МассивСтатусов;
				
				СтатусДляСоздания = ?(СтрокиПоСтатусам.Количество() >= 1,СтрокиПоСтатусам[СтрокиПоСтатусам.Количество()-1].Метка, Неопределено)
			КонецЕсли;
			
			ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ВладелецПартии");
			
			Если СтрокаТабличнойЧасти.Свойство("ВладелецПартии") Тогда
				ПараметрыОткрытия.ЗначенияЗаполнения.ВладелецПартии = СтрокаТабличнойЧасти.ВладелецПартии;
			КонецЕсли;
			
		Иначе
			
			ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
			ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("МассивСтатусов");
			
			ОтборПоСтатусам = Новый Структура("ИмяГруппыРодителя", "ГруппаОтборСтатус");
			СтрокиПоСтатусам = ДанныеМеток.НайтиСтроки(ОтборПоСтатусам);
			
			Если СтрокаТабличнойЧасти.Свойство("Статус") И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Статус) Тогда
				СтатусДляСоздания = СтрокаТабличнойЧасти.Статус;
			ИначеЕсли СтрокиПоСтатусам.Количество() >= 1 Тогда
				СтатусДляСоздания = СтрокиПоСтатусам[СтрокиПоСтатусам.Количество()-1].Метка;
			КонецЕсли;
			
			МассивСтатусов = Новый Массив;
			Для Каждого СтрокаМассива Из СтрокиПоСтатусам Цикл
				МассивСтатусов.Добавить(СтрокаМассива.Метка);
			КонецЦикла;
			
			ПараметрыОткрытия.ЗначенияЗаполнения.МассивСтатусов = МассивСтатусов; 
			
			ОтборПоВладельцам = Новый Структура("ИмяГруппыРодителя", "ГруппаОтборВладелецПартии");
			СтрокиПоВладельцам = ДанныеМеток.НайтиСтроки(ОтборПоВладельцам);
			
			ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ВладелецПартии");
			
			Если СтрокиПоВладельцам.Количество() >= 1 Тогда
				ПараметрыОткрытия.ЗначенияЗаполнения.ВладелецПартии = СтрокиПоВладельцам[СтрокиПоВладельцам.Количество()-1].Метка;
			ИначеЕсли СтрокаТабличнойЧасти.Свойство("ВладелецПартии") Тогда
				ПараметрыОткрытия.ЗначенияЗаполнения.ВладелецПартии = СтрокаТабличнойЧасти.ВладелецПартии;
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Владелец",Номенклатура);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Статус",СтатусДляСоздания);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("НалогообложениеНДС",НалогообложениеНДС);
		
		ОткрытьФорму("Справочник.ПартииНоменклатуры.ФормаОбъекта",ПараметрыОткрытия,ЭтаФорма);
		
	ИначеЕсли НЕ Копирование Тогда
		
		Отказ = Истина;
		
		ОтборПоСтатусам = Новый Структура("ИмяГруппыРодителя", "ГруппаОтборСтатус");
		СтрокиПоСтатусам = ДанныеМеток.НайтиСтроки(ОтборПоСтатусам);
		
		СтатусДляСоздания = ?(СтрокиПоСтатусам.Количество() >= 1,СтрокиПоСтатусам[СтрокиПоСтатусам.Количество()-1].Метка, ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		
		ОтборПоВладельцам = Новый Структура("ИмяГруппыРодителя", "ГруппаОтборВладелецПартии");
		СтрокиПоВладельцам = ДанныеМеток.НайтиСтроки(ОтборПоВладельцам);
		
		МассивСтатусов = Новый Массив;
		Для Каждого СтрокаМассива Из СтрокиПоСтатусам Цикл
			МассивСтатусов.Добавить(СтрокаМассива.Метка);
		КонецЦикла;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИспользоватьПартии", ИспользоватьПартии);
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("МассивСтатусов");
		ПараметрыОткрытия.ЗначенияЗаполнения.МассивСтатусов = МассивСтатусов;
		
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Владелец",Номенклатура);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Статус",СтатусДляСоздания);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("НалогообложениеНДС",НалогообложениеНДС);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ВладелецПартии", ?(СтрокиПоВладельцам.Количество() >= 1,СтрокиПоВладельцам[СтрокиПоВладельцам.Количество()-1].Метка, Неопределено));
		
		ОткрытьФорму("Справочник.ПартииНоменклатуры.ФормаОбъекта",ПараметрыОткрытия,ЭтаФорма);
		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыПартииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыПартииНоменклатуры");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДопРеквизитаПереключатель()
	
	РеквизитОснование = ТекущийЭлемент.Имя;
	ЗначениеТекРеквизита = ЭтаФорма[ТекущийЭлемент.Имя];
	
	УстановитьОтборДинамическогоСписка(РеквизитОснование,,Ложь,,Ложь);
	
	Если ЗначениеТекРеквизита = 1
		Тогда
		УстановитьОтборДинамическогоСписка(РеквизитОснование, Истина,, ВидСравненияКомпоновкиДанных.Равно, Ложь)
	ИначеЕсли ЗначениеТекРеквизита = 2
		Тогда
		УстановитьОтборДинамическогоСписка(РеквизитОснование, Ложь,, ВидСравненияКомпоновкиДанных.Равно, Ложь);
		УстановитьОтборДинамическогоСписка(РеквизитОснование, Неопределено,, ВидСравненияКомпоновкиДанных.НеЗаполнено, Ложь);
	Иначе
		УстановитьОтборДинамическогоСписка(РеквизитОснование,,Ложь,,Ложь)
	КонецЕсли;
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДопРеквизита()

ВыполнитьДействияПриИзмененииРеквизита();

КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДопРеквизитаСТипомЧислоНачалоИнтервала()

	РеквизитОснование = СтрЗаменить(ТекущийЭлемент.Имя,"_НачалоИнтервала","");
	ЗначениеТекРеквизита = ЭтотОбъект[ТекущийЭлемент.Имя];
	
	Если ЗначениеЗаполнено(ЗначениеТекРеквизита) Тогда
		УстановитьОтборДинамическогоСписка(РеквизитОснование, ЗначениеТекРеквизита, ,
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно, Ложь);
	Иначе
		УстановитьОтборДинамическогоСписка(РеквизитОснование, , Ложь, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, Ложь);
	КонецЕсли;

КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДопРеквизитаСТипомЧислоОкончаниеИнтервала()
	
	РеквизитОснование = СтрЗаменить(ТекущийЭлемент.Имя,"_ОкончаниеИнтервала","");
	ЗначениеТекРеквизита = ЭтотОбъект[ТекущийЭлемент.Имя];
	
	Если ЗначениеЗаполнено(ЗначениеТекРеквизита) Тогда
		УстановитьОтборДинамическогоСписка(РеквизитОснование, ЗначениеТекРеквизита, ,
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, Ложь);
	Иначе
		УстановитьОтборДинамическогоСписка(РеквизитОснование, , Ложь, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Блокирует доступность элементов командного и контекстного меню в зависимости от условия
//
&НаКлиенте
Процедура ЗаблокироватьКомандыМеню(ПоказательДоступности = Истина)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаИзменить", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСоздать", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаСкопировать", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКнопкаПометитьНаУдаление", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопировать", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменить", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаУстановитьПометкуУдаления", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздать", "Доступность", НЕ ПоказательДоступности);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИспользоватьКакОсновную", "Доступность", НЕ ПоказательДоступности);
	
КонецПроцедуры

// Производит запись в регистр сведений значение партии по умолчанию для номенклатуры
//
&НаСервере
Процедура ИспользоватьКакОсновнуюСервер(Партия, ТекЗначение)
	
	НаборЗаписей = РегистрыСведений.ПартииКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Партия.Владелец);
	НаборЗаписей.Отбор.Статус.Установить(Партия.Статус);
	НаборЗаписей.Отбор.Контрагент.Установить(Партия.ВладелецПартии);
	
	Если ТекЗначение = Ложь Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура = Партия.Владелец;
		НоваяЗапись.Статус = Партия.Статус;
		НоваяЗапись.Партия = Партия;
		НоваяЗапись.Контрагент = Партия.ВладелецПартии;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	Элементы.Список.Обновить();
	Элементы.Список.ТекущаяСтрока = Партия;
	
КонецПроцедуры

// Устанавливает отборы и динамического списка при изменении доп. реквизита
//
&НаКлиенте
Процедура ВыполнитьДействияПриИзмененииРеквизита(РеквизитОснование = Неопределено, ЗначениеТекРеквизита = Неопределено, ЭтоДопРеквизит = Истина, ИмяПоляОтбора = "")
	
	РеквизитОснование = ?(ЗначениеЗаполнено(РеквизитОснование), РеквизитОснование, ТекущийЭлемент.Имя);
	ЗначениеТекРеквизита = ?(ЗначениеЗаполнено(ЗначениеТекРеквизита), ЗначениеТекРеквизита,ЭтаФорма[ТекущийЭлемент.Имя]);
	
	Если НЕ ЗначениеТекРеквизита = Неопределено
		Тогда
		УстановитьОтборДинамическогоСписка(РеквизитОснование, ЗначениеТекРеквизита,, ВидСравненияКомпоновкиДанных.ВСписке,, ЭтоДопРеквизит, ИмяПоляОтбора)
	Иначе
		УстановитьОтборДинамическогоСписка(РеквизитОснование,,Ложь, ВидСравненияКомпоновкиДанных.ВСписке,, ЭтоДопРеквизит, ИмяПоляОтбора)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппировкиДинамическогоСпискаСогласноОтбору()
	
	ОтборПоСтатусам = Новый Структура("ИмяГруппыРодителя", "ГруппаРезультатаОтбора_ОтборСтатус");
	СтрокиПоСтатусам = ДанныеМеток.НайтиСтроки(ОтборПоСтатусам);
	СписокСтатусов = Новый СписокЗначений;
	
	Для Каждого СтрокаОтбораПоСтатусу Из СтрокиПоСтатусам Цикл
		СписокСтатусов.Добавить(СтрокаОтбораПоСтатусу.Метка);
	КонецЦикла;
	
	ОтборПоВладельцам = Новый Структура("ИмяГруппыРодителя", "ГруппаРезультатаОтбора_ОтборВладелецПартии");
	СтрокиПоВладельцам = ДанныеМеток.НайтиСтроки(ОтборПоВладельцам);
	СписокВладельцев = Новый СписокЗначений;
	
	Для Каждого СтрокаОтбораПоВладельцу Из СтрокиПоВладельцам Цикл
		СписокВладельцев.Добавить(СтрокаОтбораПоВладельцу.Метка);
	КонецЦикла;
	
	Если ЭтаФорма.Параметры.Свойство("Отбор") //Форма еще не открыта
		Тогда
		
		Для Каждого ЭлементНастроек Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			
			Если ТипЗнч(ЭлементНастроек) = Тип("СтруктураНастроекКомпоновкиДанных")
				Тогда
				НаименованиеГруппировки = Строка(ЭлементНастроек);
				Элементы.Наименование.Заголовок = СтрЗаменить(НаименованиеГруппировки,","," /") + " / Партия";
			КонецЕсли;
		КонецЦикла;
		
		Если НаименованиеГруппировки = ""
			Тогда
			УстановитьГруппировкиДинамическогоСписка(СписокСтатусов, СписокВладельцев);
		КонецЕсли;
	Иначе
		УстановитьГруппировкиДинамическогоСписка(СписокСтатусов, СписокВладельцев);
	КонецЕсли;
	
КонецПроцедуры

// Производит запись в регистр сведений значение партии по умолчанию для номенклатуры
//
&НаСервере
Процедура ИспользоватьКакОсновнуюСерверПерваяПартия(Партия)
	
	Если ЗначениеЗаполнено(Номенклатура) 
		И Не Номенклатура.Ссылка.ПроверятьЗаполнениеПартий 
		И ПроверятьЗаполнениеПартий Тогда
		
		НаборЗаписей = РегистрыСведений.ПартииКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Партия.Владелец);
		НаборЗаписей.Отбор.Статус.Установить(Партия.Статус);
		НаборЗаписей.Отбор.Контрагент.Установить(Партия.ВладелецПартии);
		
		Если Не НаборЗаписей.Количество() И КоличествоПартий(Партия) = 1 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Номенклатура = Партия.Владелец;
			НоваяЗапись.Статус = Партия.Статус;
			НоваяЗапись.Партия = Партия;
			НоваяЗапись.Контрагент = Партия.ВладелецПартии;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'При установке созданной партии признака - Партия по умолчанию, произошла ошибка! Установите данный признак вручную.
				|Дополнительное описание: %ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество партий по владельцу в разрезе статусов и поставщиков
//
&НаСервере
Функция КоличествоПартий(Партия)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Владелец", Партия.Владелец);
	Запрос.УстановитьПараметр("Статус", Партия.Статус);
	Запрос.УстановитьПараметр("ВладелецПартии", Партия.ВладелецПартии);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПартииНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
	               |ГДЕ
	               |	ПартииНоменклатуры.Владелец = &Владелец
	               |	И ПартииНоменклатуры.ВладелецПартии = &ВладелецПартии
	               |	И ПартииНоменклатуры.Статус = &Статус";
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Количество();
	
КонецФункции

// Устанавливает группировки динамического списка в разрезе Статуса и Владельца партии
//
&НаСервере
Процедура УстановитьГруппировкиДинамическогоСписка(СтатусПартии = Неопределено, ВладельцыПартии = Неопределено)
	
	Список.Группировка.Элементы.Очистить();
	
	УровниГруппировок = ДанныеУровнейГруппировокДляДинамическогоСписка(СтатусПартии,ВладельцыПартии);
	
	Если УровниГруппировок.КоличествоВладельцевПартии > 1 И УровниГруппировок.КоличествоСтатусов > 1
		Тогда
		
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("Статус");
		
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("ВладелецПартии");
		
		Элементы.Статус.Видимость = Ложь;
		Элементы.ВладелецПартии.Видимость = Ложь;
		Элементы.Наименование.Заголовок = НСтр("ru = 'Статус / Владелец партии / Партия'");
		
	ИначеЕсли УровниГруппировок.КоличествоВладельцевПартии = 1 И УровниГруппировок.КоличествоСтатусов > 1
		Тогда
		
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("Статус");
		
		Элементы.Статус.Видимость = Ложь;
		Элементы.ВладелецПартии.Видимость = Истина;
		Элементы.Наименование.Заголовок = НСтр("ru = 'Статус / Партия'");
		
	ИначеЕсли УровниГруппировок.КоличествоВладельцевПартии > 1 И УровниГруппировок.КоличествоСтатусов = 1
		Тогда
		
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("ВладелецПартии");
		
		Элементы.Статус.Видимость = Истина;
		Элементы.ВладелецПартии.Видимость = Ложь;
		Элементы.Наименование.Заголовок = НСтр("ru = 'Владелец партии / Партия'");
		
	Иначе 
		
		Элементы.Наименование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.Наименование.Заголовок = НСтр("ru = 'Наименование'");
	
		Элементы.Статус.Видимость = Истина;
		Элементы.ВладелецПартии.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные уровней группировок динамического списка
//
&НаСервере
Функция ДанныеУровнейГруппировокДляДинамическогоСписка(СтатусПартии = Неопределено, ВладельцыПартии = Неопределено)
	
	СписокСтатусов = Новый СписокЗначений;
	
	Если Не СтатусПартии = Неопределено 
		Тогда
		Если Не ТипЗнч(СтатусПартии) = Тип("СписокЗначений")
			Тогда
			СписокСтатусов.Добавить(СтатусПартии);
		Иначе
			СписокСтатусов = СтатусПартии;
		КонецЕсли;
	КонецЕсли;
	
	СписокВладельцев = Новый СписокЗначений;
	
	Если Не ВладельцыПартии = Неопределено 
		Тогда
		Если Не ТипЗнч(ВладельцыПартии) = Тип("СписокЗначений")
			Тогда
			СписокВладельцев.Добавить(ВладельцыПартии);
		Иначе
			СписокВладельцев = ВладельцыПартии;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляГруппировок = Новый Структура;
	ДанныеДляГруппировок.Вставить("КоличествоВладельцевПартии",0);
	ДанныеДляГруппировок.Вставить("КоличествоСтатусов",0);
	
	Если ЗначениеЗаполнено(Номенклатура)
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПартииНоменклатуры.ВладелецПартии) КАК КоличествоВладельцевПартии,
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПартииНоменклатуры.Статус) КАК КоличествоСтатусов
		               |ИЗ
		               |	Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
		               |ГДЕ
		               |	ПартииНоменклатуры.Владелец = &Владелец
		               |	И ПартииНоменклатуры.Статус В(&СписокСтатусов)
		               |	И ПартииНоменклатуры.ВладелецПартии В(&ВладельцыПартии)";
		
		Если СписокСтатусов.Количество()
			Тогда
			Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ПартииНоменклатуры.Статус В(&СписокСтатусов)","");
		КонецЕсли;
		
		Если СписокВладельцев.Количество()
			Тогда
			Запрос.УстановитьПараметр("ВладельцыПартии", СписокВладельцев);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ПартииНоменклатуры.ВладелецПартии В(&ВладельцыПартии)","");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеДляГруппировок.КоличествоВладельцевПартии = Выборка.КоличествоВладельцевПартии;
			ДанныеДляГруппировок.КоличествоСтатусов = Выборка.КоличествоСтатусов;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДляГруппировок;
	
КонецФункции

// Устанавливает отбор динамического списка
//
&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ЗаголовокПоля, ПравоеЗначение = Неопределено, ИспользованиеОтбора = Истина, ВидСравненияОтбора, УстановитьМетку = Истина, ЭтоДопРеквизит = Истина, ИмяПоляОтбора = "")
	
	ИмяРеквизитаПоля = СтрЗаменить(ЗаголовокПоля,"ДопРеквизит_","");
	
	Если ЭтоДопРеквизит Тогда
		НаименованиеДопРеквизитаДляОтбора = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",ИмяРеквизитаПоля);
		ИмяПоляОтбора = "Ссылка."+НаименованиеДопРеквизитаДляОтбора.Наименование;
	Иначе
		ИмяПоляОтбора = "Ссылка." + ?(ИмяПоляОтбора = "",ЗаголовокПоля, ИмяПоляОтбора);
	КонецЕсли;
	
	Если НЕ ПравоеЗначение = Неопределено И УстановитьМетку Тогда
		
		ПредставлениеЭлементаОтбора = ?(Не ЗначениеЗаполнено(Строка(ПравоеЗначение)), "<Без владельца>", Строка(ПравоеЗначение));
		РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбора, "ГруппаРезультатаОтбора_" + ЗаголовокПоля, ПравоеЗначение, ПредставлениеЭлементаОтбора);
		
		Если Не ТипЗнч(ЭтаФорма[ЗаголовокПоля]) = Тип("Булево")
			Тогда
			ЭтаФорма[ЗаголовокПоля] = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыОтбора = ПолеОтбора(Список.Отбор, ИмяПоляОтбора, ВидСравненияОтбора);
	
	Если ЭлементыОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке
		Тогда
		СписокОтбора = Новый СписокЗначений;
		
		ОтборСтрок = Новый Структура();
		ОтборСтрок.Вставить("ИмяПоляОтбора", ИмяПоляОтбора);
		
		МассивСтрок = ДанныеМеток.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			СписокОтбора.Добавить(СтрокаМассива.Метка);
		КонецЦикла;
		
		ЗначениеОтбора = СписокОтбора;
		
	Иначе
		ЗначениеОтбора = ?(ПравоеЗначение = "<Без владельца>", Справочники.Контрагенты.ПустаяСсылка(),ПравоеЗначение);
	КонецЕсли;
	
	Для Каждого НайденныйЭлемент Из ЭлементыОтбора Цикл
		
		НовыйОтбор = НайденныйЭлемент;
		
		НовыйОтбор.Использование = ИспользованиеОтбора;
		НовыйОтбор.ПравоеЗначение = ЗначениеОтбора;
		
		Если ЗначениеЗаполнено(ВидСравненияОтбора) Тогда
			НовыйОтбор.ВидСравнения = ВидСравненияОтбора;
		КонецЕсли;

	
	КонецЦикла;
	
	УстановитьГруппировкиДинамическогоСпискаСогласноОтбору();
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

// Находит поле отбора в динамическом списке
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолеОтбора(ГруппаЭлементовОтбора, ПутьКДаннымПоля, ВидСравненияОтбора = Неопределено)
	
	МассивНайденныхЭлементов = Новый Массив;
	
	Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	
	Если ВидСравненияОтбора = Неопределено Тогда
		Для каждого ЭлементОтбора Из ГруппаЭлементовОтбора.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Для каждого ЭлементГруппы Из ЭлементОтбора.Элементы Цикл
					Если  ЭлементГруппы.ЛевоеЗначение = Поле Тогда
						МассивНайденныхЭлементов.Добавить(ЭлементГруппы);
					КонецЕсли
				КонецЦикла;
			ИначеЕсли  ЭлементОтбора.ЛевоеЗначение=Поле Тогда
				МассивНайденныхЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Для каждого ЭлементОтбора Из ГруппаЭлементовОтбора.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Для каждого ЭлементГруппы Из ЭлементОтбора.Элементы Цикл
					Если  ЭлементГруппы.ЛевоеЗначение = Поле И ЭлементГруппы.ВидСравнения = ВидСравненияОтбора Тогда
						МассивНайденныхЭлементов.Добавить(ЭлементГруппы);
					КонецЕсли
				КонецЦикла;
			ИначеЕсли  ЭлементОтбора.ЛевоеЗначение=Поле И ЭлементОтбора.ВидСравнения = ВидСравненияОтбора Тогда
				МассивНайденныхЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат ?( Не МассивНайденныхЭлементов.Количество(),Неопределено,МассивНайденныхЭлементов);
	
КонецФункции

// Устанавливает условное оформление формы для недействительных партий
//
&НаСервере
Процедура УстановитьУсловноеОформление()

		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Список.Недействителен", Истина, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "Наименование");
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
		
		Если ЗапретКомиссионныхПартийБезВладельца Тогда
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Список.ЗапретВыбораПартии", Истина, ВидСравненияКомпоновкиДанных.Равно);
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "Наименование");
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "Статус");
			РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "Родитель");
			РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти);
			
		КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборНедействительная(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Недействителен",
		Ложь,
		,
		,
		Не Форма.Элементы.ПоказыватьНедействительную.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьВозможностьУстановкиПартииКакОсновной(ЗначениеПараметра = Неопределено)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Не ДоступностьФормаИспользоватьКакОсновную Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИспользоватьКакОсновную", "Доступность", Ложь);
		Возврат;
	КонецЕсли;
	
	РеквизитСуществует = Элементы.Список.ТекущиеДанные.Свойство("Недействителен");
	
	Если РеквизитСуществует И ЗначениеПараметра = Неопределено Тогда
		Недействителен = Элементы.Список.ТекущиеДанные.Недействителен;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИспользоватьКакОсновную", "Доступность", Не Недействителен);
	ИначеЕсли РеквизитСуществует И Не ЗначениеПараметра = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИспользоватьКакОсновную", "Доступность", Не ЗначениеПараметра);
	ИначеЕсли Не РеквизитСуществует Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИспользоватьКакОсновную", "Доступность", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_") + 1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ИмяРеквизитаСписка = "Список";
	ИмяТЧДанныеМеток = "ДанныеМеток";
	ИмяТЧДанныеОтборов = "ДанныеОтборов";
	ИмяГруппыОтборов = "ГруппаОтборы";
	ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчанию";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМеток";
		ИмяТЧДанныеОтборов = "ДанныеОтборов";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Статус", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВладелецПартииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВладелецПартии", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеОтборы(Команда)
	СброситьВсеМеткиОтбораНаСервере();
КонецПроцедуры

&НаСервере
Процедура СброситьВсеМеткиОтбораНаСервере()
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, Список);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
