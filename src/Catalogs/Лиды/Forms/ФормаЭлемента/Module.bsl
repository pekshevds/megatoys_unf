
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ПараметрыКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыКонтактнойИнформации.ИмяЭлементаДляРазмещения = Элементы.КонтактнаяИнформация.Имя;
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	НаборСвойств_Справочник_Лиды = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Лиды");
	// Конец СтандартныеПодсистемы.Свойства
	
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);

	Если НЕ ЗначениеЗаполнено(Объект.ДатаЗавершенияРаботы) Тогда
		ТекущийЭлемент = Элементы.НаименованиеКомпании;
	КонецЕсли;
	
	Параметры.Свойство("СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта", СопоставитьКонтактИАдресЭПВСобытияхПослеЗаписиОбъекта);
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	УстановитьНастройкиКонтроляДублей();
	СозданКопированием = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПриСозданииПриЧтенииНаСервере();
	КонецЕсли;
	
	ОбязательноЗаполнятьИсточникВЛидах = 
		РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательностьЗаполненияРеквизита("Лид", "ИсточникПривлечения");
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЛидЗамененНаДубль Тогда
		ОповеститьОЗаписиНового(Объект.Ссылка);
		Оповестить("Запись_Лид", Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="Запись_СостоянияЛидов" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостояния_Лид" И Параметр <> Неопределено Тогда
		
		ЛидИзменен = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЛидИзменен = Параметр.Найти(Объект.Ссылка);
		ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.Лиды") Тогда
			ЛидИзменен = Параметр = Объект.Ссылка;
		КонецЕсли;
		
		Если ЛидИзменен = Неопределено ИЛИ (ТипЗнч(ЛидИзменен) = Тип("Булево") И ЛидИзменен = Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Прочитать();
		УправлениеФормой();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИмяЭлементаДляРазмещения = Элементы.КонтактнаяИнформация.Имя;
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, ИмяЭлементаДляРазмещения);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииПриЧтенииНаСервере();
	СостояниеПередЗавершением = СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
		ТекущийОбъект.Ссылка,Справочники.СостоянияЛидов.Завершен);
	Элементы.СостояниеЛидаРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
	?(СостояниеПередЗавершением = Неопределено, ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЛида(),СостояниеПередЗавершением));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СозданКопированием И Элементы.ФормаПроверитьЛидаНаДубли.Видимость Тогда
		
		Состояние(НСтр("ru='Проверка лида на дубли'"), 49);
		ПроверитьКонтрагентаНаДублиСервер();
		Состояние(НСтр("ru='Проверка лида на дубли'"), 100);
		
		ПоказатьСообщениеОДублях();
	КонецЕсли;
	
	Если Элементы.ДублиНаименованиеКомпании.Видимость
		ИЛИ Элементы.ДублиНаименование.Видимость ИЛИ ДублиКИ.Количество() > 0 Тогда
		ПоказатьПредупреждениеОДублях();
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		ПараметрыЗаписи.Вставить("ЗаписьНового", Истина);
	КонецЕсли;
	
	ТегированиеОбъектов.ПередЗаписьюНаСервере(ЭтотОбъект,ТекущийОбъект);
	
	НомераТелефонов = Новый Массив;
	АдресаЭП = Новый Массив;
	
	Для Каждого СтрокаКЛ Из ДанныеКонтактныхЛиц Цикл
		Для Каждого СтрокаКИ Из СтрокаКЛ.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
				НомераТелефонов.Добавить(СтрЗаменить(КонтактнаяИнформацияУНФ.ПреобразоватьТелефонДляПоиска(СтрокаКИ.Представление), "+", ""));
			КонецЕсли;
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И Не ПустаяСтрока(СтрокаКИ.Представление) Тогда
				АдресаЭП.Добавить(СтрокаКИ.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НомераТелефоновКонтактаЛида", НомераТелефонов);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("АдресаЭПКонтактовЛида", АдресаЭП);
	
	МассивСтрок = Новый Массив;
	Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКЛ.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок.Добавить(Символы.ПС);
		КонецЕсли;
		
		МассивСтрок.Добавить(ДанныеКЛ.Наименование);
		
		Для Каждого ДанныеКИ Из ДанныеКЛ.КонтактнаяИнформация Цикл
			Если ПустаяСтрока(ДанныеКИ.Представление) Тогда
				Продолжить;
			КонецЕсли;
			МассивСтрок.Добавить(ДанныеКИ.Представление);
		КонецЦикла;
		
	КонецЦикла;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОсновныеСведенияКонтактныхЛиц", МассивСтрок);
	
	Если ПроигнорированоСообщениеОДублях Тогда 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоЗаписьДубля");
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СообщениеОДублированииИнформации", СообщениеОДублированииИнформации);
	КонецЕсли;
	
	ПроигнорированоСообщениеОДублях = Ложь;
	СообщениеОДублированииИнформации = "";

	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьДанныеКонтактныхЛиц(Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЗаписьНового") Тогда
		ОповеститьОЗаписиНового(Объект.Ссылка);
	КонецЕсли;
	
	Оповестить("Запись_Лид", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЗаполнитьИОбновитьКонтактныеЛица();
	
	Элементы.СостояниеЛидаРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЛидов.Завершен));
	
	УправлениеФормой();
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
			
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	ПроверитьЗаполнениеКонтактныхЛиц(Отказ);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаименованиеКомпанииПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	ОбновитьНаименованиеЛида();
	
	Если НЕ ПроверятьЮрНазваниеНаДубли И ПроверятьПредставлениеНаДубли Тогда
		ПроверитьНаДубли("Наименование");
	КонецЕсли;
	
	Если НЕ ПроверятьЮрНазваниеНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.НаименованиеКомпании)) Тогда
		Элементы.ДублиНаименованиеКомпании.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПроверитьНаДубли("НаименованиеКомпании");

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеКонтактногоЛица_ПриИзменении(Элемент)
	
	ИндексКЛ = Число(Сред(Элемент.Имя, СтрДлина("НаименованиеКонтакт_")+1));
	ДанныеКонтактныхЛиц[ИндексКЛ].Изменен = Истина;
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		ОбновитьНаименованиеЛида();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СокрЛП(ДанныеКонтактныхЛиц[ИндексКЛ].Наименование)) Тогда
		ПоказатьСкрытьНадписьОДубляхНаименованияКЛ(ИндексКЛ, Ложь);
		Возврат;
	КонецЕсли;

	Если НЕ ПроверятьПредставлениеНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНаименованиеКонтактаНаДубли(ИндексКЛ);
	
	ЗаголовкиГрупп = ЗаголовкиГруппКонтакта(ДанныеКонтактныхЛиц[ИндексКЛ]);
	
	Элементы["Контакт_"+ИндексКЛ].ЗаголовокСвернутогоОтображения = ЗаголовкиГрупп.ЗаголовокСвернутойГруппы;
	Элементы["Контакт_"+ИндексКЛ].Заголовок 					 = ЗаголовкиГрупп.ЗаголовокГруппы;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЛидаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЛидов"), ПараметрыПолученияДанных);
		ДанныеВыбора = ДанныеВыбораСостояния;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдаленныеКонтактыНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецКонтакта", Объект.Ссылка);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыКонтактов",ЭтотОбъект);
	ОткрытьФорму("Справочник.КонтактыЛидов.Форма.ФормаСпискаУдаленныхКонтактов",ПараметрыФормы,,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ДублиПоПолномуНаименованиюНажатие(Элемент)
	
	ПараметрыДублей = Новый Структура;	
	
	ПараметрыДублей.Вставить("НаименованиеПолное", НаименованиеКомпанииДляПоискаДублей);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДублиПоПредставлениюНажатие(Элемент)
	
	ПараметрыДублей = Новый Структура;
	МассивКонтактов = Новый Массив;
	
	ПараметрыДублей.Вставить("Наименование", НаименованиеДляПоискаДублей);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВПрограммеПриИзменении(Элемент)
	
	Если НЕ ПроверятьПредставлениеНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.Наименование)) Тогда
		Элементы.ДублиНаименование.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	НаименованиеДляПоискаДублей = НаименованиеДляПоискаДублей(Объект.Наименование);
	ПроверитьНаДубли("Наименование");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьВсеКонтакты(Команда)
	
	ПоказыватьВсеКонтакты = Истина;
	ОбновитьЭлементыКонтактныхЛиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВКлиента(Команда)
	
	НовыйКонтрагент = ПеревестиВКлиентаСервер();
	
	Если НовыйКонтрагент = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	Оповестить("Запись_Лид", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Ключ", НовыйКонтрагент);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВНекачественныйЛид(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПеревестиВНекачественныйЛидСервер();
		Оповестить("Запись_Лид", Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросПереводВНекачественного",ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Данные еще не записаны." + 
	Символы.ПС + " Перевод лида в некачественного возможен только после записи данных." +
	Символы.ПС + " Данные будут записаны'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	ВернутьВРаботуСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборСвойств_Справочник_Лиды);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйКонтакт(Команда)
	
	ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
	ИндексСтроки = ДанныеКонтактныхЛиц.Индекс(ДанныеКЛ);
	ОбновитьЭлементыКонтактныхЛиц(ИндексСтроки);
	ТекущийЭлемент = Элементы["НаименованиеКонтакт_" + ИндексСтроки];
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВКлиентаИЗаказ(Команда)
	НовыйКонтрагент = ПеревестиВКлиентаСервер();
	
	Если НовыйКонтрагент = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("Запись_Лид", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Основание", НовыйКонтрагент);
	ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаДокумента", ПараметрыФормы);
	
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПеревода(Команда)
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаНастройкиПереноса");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛидаНаДубли(Команда)
	
	Состояние(НСтр("ru='Проверка лида на дубли'"), 49);
	ПроверитьКонтрагентаНаДублиСервер();
	Состояние(НСтр("ru='Проверка лида на дубли'"), 100);
	
	ПоказатьСообщениеОДублях();
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПредставления

&НаКлиенте
Процедура ОбработкаОповещенияВыбораНаименования(ЗначениеВыбора, ДопПараметры) Экспорт
	Объект.Наименование = ЗначениеВыбора.Значение;
КонецПроцедуры

#КонецОбласти

#Область Теги

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеВводаТегаОбработкаВыбораСервер(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОбработкаВыбораСервер(ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТегированиеОбъектов.ПолеВводаТегаОбработкаВыбора(ЭтотОбъект, ИмяЭлемента, ВыбранноеЗначение, СтандартнаяОбработка);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолеВводаТегаОкончаниеВводаТекстаСервер(Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТегированиеОбъектов.ПолеВводаТегаОкончаниеВводаТекста(ЭтотОбъект, Текст, СтандартнаяОбработка);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОблакоТеговОбработкаНавигационнойСсылкиСервер(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	ТегированиеОбъектов.ОблакоТеговОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	КонтактнаяИнформацияКонтактногоЛицаПриИзменении(Элемент);
	КонтактнаяИнформацияПриИзменении(Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
	КонтактнаяИнформацияКонтактногоЛицаПриИзменении(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры
&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	Если Результат.Свойство("ИмяЭлементаДляРазмещения") Тогда
		ИмяЭлементаДляРазмещения = Результат.ИмяЭлементаДляРазмещения;
	Иначе
		ОписаниеКИ = УправлениеКонтактнойИнформациейУНФКлиентСервер.ОписаниеРеквизитаКонтактнойИнформации(ЭтотОбъект, Результат.ИмяРеквизита);
		ИмяЭлементаДляРазмещения = ОписаниеКИ.ИмяЭлементаДляРазмещения;
	КонецЕсли;
	Результат.Вставить("ПостфиксИмяРеквизита", ИмяЭлементаДляРазмещения);
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	Если НЕ Объект.КонтактыПеренесены И Объект.УдалитьКонтакты.Количество() > 0 Тогда
		ЛидОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Лиды"));
		Справочники.Лиды.ПеренестиКонтактыЛидаВСправочникКонтактыЛидов(ЛидОбъект);
		ЗначениеВДанныеФормы(ЛидОбъект, Объект);
	КонецЕсли;
	
	КлассификаторОПФ.Загрузить(РегламентированныеДанныеПовтИсп.КлассификаторОрганизационноПравовыхФорм());
	
	ТегированиеОбъектов.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект,Объект);
	
	ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц();
	ОбновитьЭлементыКонтактныхЛиц();
	
	Если Параметры.Свойство("ДанныеИзКонтактнойФормы") Тогда
		ЗаполнитьПоДаннымКонтактнойФормы(Параметры);
	КонецЕсли;
	
	Если Параметры.Свойство("КонтактКакСвязаться", КонтактКакСвязаться) Тогда
		ЗаполнитьКонтактКакСвязаться();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);

	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		ИЛИ Элементы.ПредставлениеВПрограмме.СписокВыбора.НайтиПоЗначению(Объект.Наименование) <> Неопределено
		ИЛИ (ДанныеКонтактныхЛиц.Количество() > 0 И Элементы.ПредставлениеВПрограмме.СписокВыбора.НайтиПоЗначению(ДанныеКонтактныхЛиц[0].Наименование) <> Неопределено);
		
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Лиды);
	
	Элементы.ПолеТекста.Видимость = ЭтоНекачественныйЛид() ИЛИ ЛидПереведенВПокупателя();
	Элементы.ПредставлениеВПрограмме.МаксимальнаяШирина = 43;
	
	Если ЭтоНекачественныйЛид() ИЛИ ЛидПереведенВПокупателя() Тогда
		Элементы.ГруппаЗавершенияРаботы.Заголовок = НСтр("ru='Результат от '") + Формат(Объект.ДатаЗавершенияРаботы,"ДЛФ=Д");
		Элементы.СостояниеЛида.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элементы.ГруппаЗавершенияРаботы.Заголовок = НСтр("ru='Результат'");
		Элементы.СостояниеЛида.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Если ЛидПереведенВПокупателя() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Контрагент = Справочники.Лиды.СвязанныйКонтрагент(Объект.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
		
		Текст = Новый ФорматированнаяСтрока(НСтр("ru='Лид переведен в покупателя ' "));
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаКонтрагент = Новый ФорматированнаяСтрока(Строка(Контрагент),,,,ПолучитьНавигационнуюСсылку(Контрагент));
			ПолеТекста = Новый ФорматированнаяСтрока(Текст,СтрокаКонтрагент);
		Иначе
			ПолеТекста = Текст;
		КонецЕсли;
		
		Элементы.ПолеТекста.АвтоМаксимальнаяШирина = Истина;
		
	КонецЕсли;
	
	Если ЭтоНекачественныйЛид() Тогда
		ПолеТекста= Новый ФорматированнаяСтрока(НСтр("ru='Некачественный лид'"));
		Элементы.СостояниеЛида.ОтображениеПодсказки =ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
	ТолькоПросмотр = ЛидПереведенВПокупателя() ИЛИ НЕ МожноРедактировать;
	
	Элементы.ОблакоТегов.Доступность  = НЕ ЭтоНекачественныйЛид();
	Элементы.ГруппаКнопок.Видимость   = НЕ (ЭтоНекачественныйЛид() ИЛИ ЛидПереведенВПокупателя());
	Элементы.ВернутьВРаботу.Видимость = ЭтоНекачественныйЛид();
	
	Элементы.КолонкаСлева.Доступность             = НЕ ЭтоНекачественныйЛид();
	Элементы.ДополнительнаяИнформация.Доступность = НЕ ЭтоНекачественныйЛид();
	
	Элементы.ПричинаНеуспешногоЗавершенияРаботы.Видимость = ЭтоНекачественныйЛид();
	Элементы.ЗаметкиЗавершенияРаботы.Видимость            = ЭтоНекачественныйЛид();
	Элементы.УдаленныеКонтакты.Видимость = ЕстьУдаленныеКонтакты();
	
	Если ОбязательноЗаполнятьИсточникВЛидах Тогда
		Элементы.ИсточникПривлечения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Элементы.ФормаПроверитьЛидаНаДубли.Видимость = ПроверятьПредставлениеНаДубли ИЛИ ПроверятьАдресЭПНаДубли 
		ИЛИ ПроверятьНомерТелефонаНаДубли ИЛИ ПроверятьЮрНазваниеНаДубли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ОбязательныеДляЗаполненияРеквизиты = РегистрыСведений.ОбязательностьЗаполненияРеквизитов.ОбязательныеДляЗаполненияРеквизитыОбъекта("Лид");
	
	Для Каждого Реквизит Из ОбязательныеДляЗаполненияРеквизиты Цикл
				
		Если ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", 
			"Источник привлечения"),,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект[%1]", Реквизит),,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПеревестиВКлиентаСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЛидОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Лиды"));
	ТегированиеОбъектов.ПередЗаписьюНаСервере(ЭтотОбъект, ЛидОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ЛидОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Возврат Справочники.Лиды.ПолучитьСоздатьКонтрагента(ЛидОбъект);
	
КонецФункции

&НаСервере
Процедура ПеревестиВНекачественныйЛидСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	Объект.ДатаЗавершенияРаботы = ТекущаяДатаСеанса();
	Объект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид;
	Объект.СостояниеЛида = Справочники.СостоянияЛидов.Завершен;
	
	Элементы.СостояниеЛидаРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(Объект.Ссылка,
		Справочники.СостоянияЛидов.Завершен));
	Модифицированность = Истина;
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ВернутьВРаботуСервер()
	Объект.СостояниеЛида =  СостоянияЛидов.ПолучитьСостояниеЛидаПередЗавершением(
		Объект.Ссылка,Справочники.СостоянияЛидов.Завершен);
	Объект.ПричинаНеуспешногоЗавершенияРаботы = Неопределено;
	Объект.ВариантЗавершения = Неопределено;
	Объект.ДатаЗавершенияРаботы = Дата('00010101');
	Объект.ЗаметкиЗавершенияРаботы = Неопределено;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПереводВНекачественного(Результат,ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПеревестиВНекачественныйЛидСервер();
	
КонецПроцедуры

&НаСервере
Функция ЛидПереведенВПокупателя()
	
	Возврат ЗначениеЗаполнено(Объект.ДатаЗавершенияРаботы) 
		И Объект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя;
	
КонецФункции

&НаСервере
Функция ЭтоНекачественныйЛид()
	
	Возврат ЗначениеЗаполнено(Объект.ПричинаНеуспешногоЗавершенияРаботы)
		ИЛИ Объект.ВариантЗавершения = Перечисления.ВариантЗавершенияРаботыСЛидом.НекачественныйЛид;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораНаименования(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокВыбора = Элементы.ПредставлениеВПрограмме.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Не ПустаяСтрока(Объект.НаименованиеКомпании) Тогда
		
		Форма.ОрганизационноПравоваяФорма = УправлениеНебольшойФирмойКлиентСервер.ВыделитьИзНаименованияОПФ(Форма.КлассификаторОПФ, Объект.НаименованиеКомпании);
		
		СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		
		Если НЕ ПустаяСтрока(Форма.ОрганизационноПравоваяФорма.КраткаяФорма) Тогда
			СписокВыбора.Вставить(0, Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ + " " + Форма.ОрганизационноПравоваяФорма.КраткаяФорма);
			СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.КраткаяФорма + " " + Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ДанныеКонтактныхЛиц.Количество() > 0 И Не ПустаяСтрока(Форма.ДанныеКонтактныхЛиц[0].Наименование) Тогда
		СписокВыбора.Добавить(Строка(Форма.ДанныеКонтактныхЛиц[0].Наименование));
	КонецЕсли;
	
	Форма.Элементы.ПредставлениеВПрограмме.КнопкаВыпадающегоСписка = СписокВыбора.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименованиеЛида()
	
	Если НЕ ФормироватьНаименованиеАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПредставлениеВПрограмме.СписокВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Наименование = Элементы.ПредставлениеВПрограмме.СписокВыбора[0].Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымКонтактнойФормы(Параметры)
	
	ДанныеКФ = Параметры.ДанныеИзКонтактнойФормы;
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Параметры.Контакт;
	КонецЕсли;
	
	Если ДанныеКонтактныхЛиц.Количество() = 0 ИЛИ ЗначениеЗаполнено(ДанныеКонтактныхЛиц[0].Наименование) Тогда
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
	Иначе
		ДанныеКЛ = ДанныеКонтактныхЛиц[0];
	КонецЕсли;
	
	ДанныеКЛ.Изменен = Истина;
	ИндексКЛ = ДанныеКонтактныхЛиц.Индекс(ДанныеКЛ);
	ОбновитьЭлементыКонтактныхЛиц();
	ИмяЭлементаДляРазмещения = ДанныеКонтактныхЛиц[ИндексКЛ].ИмяЭлементаДляРазмещения;
	
	ДанныеКЛ.Наименование = Параметры.Контакт;
	Если ДанныеКФ["НомераТелефонов"].Количество()>0 Тогда
		КИТелефон = ДанныеКФ["НомераТелефонов"][0];
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактаЛида;
		ДанныеКИ = Новый Структура;
		ДанныеКИ.Вставить("Представление", КИТелефон);
		ДанныеКИ.Вставить("Вид", ВидКИ);
		ДанныеКИ.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		УправлениеКонтактнойИнформациейУНФ.ДобавитьКонтактнуюИнформациюНаФорму(ЭтотОбъект, Объект, ДанныеКИ);
	КонецЕсли;
	
	Для Каждого КИ Из ДанныеКФ["АдресаЭП"] Цикл
		ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактаЛида;
		ДанныеКИ = Новый Структура;
		ДанныеКИ.Вставить("Представление", КИ);
		ДанныеКИ.Вставить("Вид", ВидКИ);
		ДанныеКИ.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		УправлениеКонтактнойИнформациейУНФ.ДобавитьКонтактнуюИнформациюНаФорму(ЭтотОбъект, Объект, ДанныеКИ);
	КонецЦикла;
	
	Для Каждого КИ Из ДанныеКФ["Скайп"] Цикл
		ВидКИ = Справочники.ВидыКонтактнойИнформации.SkypeКонтактаЛида;
		ДанныеКИ = Новый Структура;
		ДанныеКИ.Вставить("Представление", КИ);
		ДанныеКИ.Вставить("Вид", ВидКИ);
		ДанныеКИ.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		УправлениеКонтактнойИнформациейУНФ.ДобавитьКонтактнуюИнформациюНаФорму(ЭтотОбъект, Объект, ДанныеКИ);
	КонецЦикла;
	
	Для Каждого КИ Из ДанныеКФ["Другое"] Цикл
		ВидКИ = Справочники.ВидыКонтактнойИнформации.МессенджерКонтактаЛида;
		ДанныеКИ = Новый Структура;
		ДанныеКИ.Вставить("Представление", КИ);
		ДанныеКИ.Вставить("Вид", ВидКИ);
		ДанныеКИ.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		УправлениеКонтактнойИнформациейУНФ.ДобавитьКонтактнуюИнформациюНаФорму(ЭтотОбъект, Объект, ДанныеКИ);
	КонецЦикла;
	
	ПроверитьКонтрагентаНаДублиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

&НаСервере
Процедура ЗаполнитьКонтактКакСвязаться()
	
	Если КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailКомпанииЛида");
	ИначеЕсли КонтактКакСвязаться.ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ВидКИ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонКомпанииЛида");
	КонецЕсли;
	Если ВидКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = КонтактКакСвязаться.Контакт;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеКомпании) Тогда
		Объект.НаименованиеКомпании = КонтактКакСвязаться.Контакт;
		ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	КонецЕсли;
	
	ДанныеКИ = Новый Структура;
	ДанныеКИ.Вставить("Представление", КонтактКакСвязаться.КакСвязаться);
	ДанныеКИ.Вставить("Вид", ВидКИ);
	ДанныеКИ.Вставить("ИмяЭлементаДляРазмещения", Элементы.КонтактнаяИнформация.Имя);
	УправлениеКонтактнойИнформациейУНФ.ДобавитьКонтактнуюИнформациюНаФорму(ЭтотОбъект, Объект, ДанныеКИ);
	
	ПроверитьКонтрагентаНаДублиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияКонтактногоЛицаПриИзменении(Элемент)
	
	ОписаниеРеквизита = УправлениеКонтактнойИнформациейУНФКлиентСервер.ОписаниеРеквизитаКонтактнойИнформации(ЭтотОбъект, Элемент.Имя);
	Если ОписаниеРеквизита = Неопределено И СтрНачинаетсяС(НРег(Элемент.Имя), НРег("Комментарий")) Тогда
		ИмяЭлемента = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Комментарий"));
		ОписаниеРеквизита = УправлениеКонтактнойИнформациейУНФКлиентСервер.ОписаниеРеквизитаКонтактнойИнформации(ЭтотОбъект, ИмяЭлемента);
	КонецЕсли;
	
	Если ОписаниеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаДляРазмещения = ОписаниеРеквизита.ИмяЭлементаДляРазмещения;
	Если ИмяЭлементаДляРазмещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлементаДляРазмещения, "КонтактнаяИнформацияКонтакт_") = 0 Тогда
		// Поле контактной информации контрагента.
		Возврат;
	КонецЕсли;
	
	Индекс = СтрЗаменить(ИмяЭлементаДляРазмещения, "КонтактнаяИнформацияКонтакт_", "");
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Индекс) Тогда
		ДанныеКонтактныхЛиц[Число(Индекс)].Изменен = Истина;
	КонецЕсли;
	
	КонтактнаяИнформацияКонтактногоЛицаПриИзмененииСервер(Элемент.Имя, Индекс);
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияКонтактногоЛицаПриИзмененииСервер(ИмяЭлемента, ИндексКЛ)
	
	ЭтоРедактированиеПоляКИ = Не СтрНачинаетсяС(НРег(ИмяЭлемента), НРег("Комментарий"));
	Если ЭтоРедактированиеПоляКИ Тогда
		ОписаниеКИ = УправлениеКонтактнойИнформациейУНФ.ОписаниеРеквизитаКонтактнойИнформации(ЭтотОбъект, ИмяЭлемента);
		ПроверитьКИНаДубли(ОписаниеКИ, ИндексКЛ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриИзменении(ИмяЭлемента)
	
	ЭтоРедактированиеПоляКИ = Не СтрНачинаетсяС(НРег(ИмяЭлемента), НРег("Комментарий"));
	Если ЭтоРедактированиеПоляКИ Тогда
		ОписаниеКИ = УправлениеКонтактнойИнформациейУНФ.ОписаниеРеквизитаКонтактнойИнформации(ЭтотОбъект, ИмяЭлемента);
		ПроверитьКИНаДубли(ОписаниеКИ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактыЛида

&НаСервере
Функция ЕстьУдаленныеКонтакты()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактыЛидов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактыЛидов КАК КонтактыЛидов
	|ГДЕ
	|	КонтактыЛидов.ПометкаУдаления
	|	И Владелец = &ТекущийЛид";
	
	Запрос.УстановитьПараметр("ТекущийЛид", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаСервере
Процедура ЗаписатьДанныеКонтактныхЛиц(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого ДанныеКЛ Из ДанныеКонтактныхЛиц Цикл
		
		Если ПустаяСтрока(ДанныеКЛ.Наименование) Тогда
			УдалитьНезаполненныйКонтакт(ДанныеКЛ);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ДанныеКЛ.Изменен Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
			КонтактноеЛицоОбъект = ДанныеКЛ.КонтактноеЛицо.ПолучитьОбъект();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) ИЛИ КонтактноеЛицоОбъект = Неопределено Тогда
			// Создание
			КонтактноеЛицоОбъект = Справочники.КонтактыЛидов.СоздатьЭлемент();
		КонецЕсли;
		
		КонтактноеЛицоОбъект.Владелец = ТекущийОбъект.Ссылка;
		// Внесение изменений
		ЗаполнитьЗначенияСвойств(КонтактноеЛицоОбъект, ДанныеКЛ, "Наименование");
		
		УправлениеКонтактнойИнформацией.ПриЗаписиНаСервереСвязанныхВладельцевКИ(ЭтотОбъект, КонтактноеЛицоОбъект, ДанныеКЛ, Отказ);
		
		// Запись объекта
		КонтактноеЛицоОбъект.Записать();
		
		// Сохранение ссылки на созданный объект
		ДанныеКЛ.КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИОбновитьКонтактныеЛица()
	
	ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц();
	ОбновитьЭлементыКонтактныхЛиц();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеИКонтактнуюИнформацию(Знач КлассификаторСсылка, Знач ИмяЭлемента = "")
	
	ДанныеКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	КлассификаторСсылка,
	"Title, JSON");
	
	Если ДанныеКонтактныхЛиц.Количество() = 0 Тогда
		ДанныеКонтактныхЛиц.Добавить();
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяЭлемента) Тогда
		ИндексЭлемента = 0;
	Иначе
		ИндексЭлемента = Число(СтрЗаменить(ИмяЭлемента, "НаименованиеКонтакт_", ""));
	КонецЕсли;
	
	Если ИндексЭлемента = 0 Тогда
		Объект.Наименование = ДанныеКонтакта.Title;
	КонецЕсли;
	
	ДанныеКонтактныхЛиц[ИндексЭлемента].Наименование = ДанныеКонтакта.Title;
	ДанныеКонтактныхЛиц[ИндексЭлемента].Изменен = Истина;
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактноеЛицо = Неопределено;
	
	Справочники.КлассификаторКонтактов.ЗаполнитьКонтактнуюИнформациюИзJSON(
	ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактнаяИнформация,
	ДанныеКонтакта.JSON,
	ТипЗнч(ДанныеКонтактныхЛиц[ИндексЭлемента].КонтактноеЛицо));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКонтактнойИнформацииКонтактныхЛиц()
	
	Если ЗначениеЗаполнено(КлассификаторДляЗаполненияКИ) Тогда
		ЗаполнитьНаименованиеИКонтактнуюИнформацию(КлассификаторДляЗаполненияКИ);
		Возврат;
	КонецЕсли;
	
	ДанныеКонтактныхЛиц.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактыЛидов.Ссылка КАК КонтактноеЛицо,
	|	КонтактыЛидов.Наименование КАК Наименование,
	|	КонтактыЛидов.Код КАК Код
	|ПОМЕСТИТЬ втКонтакты
	|ИЗ
	|	Справочник.КонтактыЛидов КАК КонтактыЛидов
	|ГДЕ
	|	КонтактыЛидов.Владелец = &Владелец
	|	И НЕ КонтактыЛидов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКонтакты.КонтактноеЛицо КАК КонтактноеЛицо,
	|	втКонтакты.Наименование КАК Наименование
	|ИЗ
	|	втКонтакты КАК втКонтакты
	|
	|УПОРЯДОЧИТЬ ПО
	|	втКонтакты.Код,
	|	Наименование";
	
	Запрос.УстановитьПараметр("Владелец",				Объект.Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаКонтакты = МассивРезультатов[1].Выбрать();
	Отбор = Новый Структура("КонтактноеЛицо");
	
	Пока ВыборкаКонтакты.Следующий() Цикл
		
		Отбор.КонтактноеЛицо = ВыборкаКонтакты.КонтактноеЛицо;
		
		ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеКЛ, ВыборкаКонтакты, "КонтактноеЛицо,Наименование");
		ДанныеКЛ.Ссылка = ДанныеКЛ.КонтактноеЛицо;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоКонтактовДляПоказаПоУмолчанию()
	Возврат 6;
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыКонтактныхЛиц(Знач ИндексОбновляемогоКонтакта = Неопределено)
	
	Если ИндексОбновляемогоКонтакта <> Неопределено
		И ИндексОбновляемогоКонтакта > КоличествоКонтактовДляПоказаПоУмолчанию() - 1
		И Не ПоказыватьВсеКонтакты Тогда
		ПоказыватьВсеКонтакты = Истина;
		ИндексОбновляемогоКонтакта = Неопределено;
	КонецЕсли;
	
	Если ИндексОбновляемогоКонтакта = 0 И ДанныеКонтактныхЛиц.Количество() = 1 Тогда
		ИндексОбновляемогоКонтакта = Неопределено;
	КонецЕсли;
	
	УдалитьПрограммноСозданныеЭлементыКонтактныхЛиц(ИндексОбновляемогоКонтакта);
	
	Если ПоказыватьВсеКонтакты Тогда
		ПоследнийИндексКонтакта = ДанныеКонтактныхЛиц.Количество() - 1;
	ИначеЕсли ДанныеКонтактныхЛиц.Количество() > КоличествоКонтактовДляПоказаПоУмолчанию() Тогда
		ПоследнийИндексКонтакта = КоличествоКонтактовДляПоказаПоУмолчанию() - 1;
	ИначеЕсли ДанныеКонтактныхЛиц.Количество() <> 0 Тогда
		ПоследнийИндексКонтакта = ДанныеКонтактныхЛиц.Количество() - 1;
	Иначе
		ПоследнийИндексКонтакта = -1;
	КонецЕсли;
	
	ЕстьПоказанныеКонтакты = Ложь;
	
	Для ИндексКонтакта = 0 По ПоследнийИндексКонтакта Цикл
		
		ДанныеКонтактногоЛица = ДанныеКонтактныхЛиц[ИндексКонтакта];
		
		Если ИндексОбновляемогоКонтакта <> Неопределено И ИндексКонтакта <> ИндексОбновляемогоКонтакта Тогда
			Продолжить;
		КонецЕсли;
		
		// Для первого контактного лица элементы формы созданы в конфигураторе
		Если ИндексКонтакта > 0 Тогда
			
			ЕстьПоказанныеКонтакты = Истина;
			ГруппаКонтактногоЛица = Элементы.Добавить("Контакт_" + ИндексКонтакта, Тип("ГруппаФормы"), Элементы.ВсеКонтакты);
			ГруппаКонтактногоЛица.Вид = Элементы.Контакт_0.Вид;
			ГруппаКонтактногоЛица.Отображение = Элементы.Контакт_0.Отображение;
			ГруппаКонтактногоЛица.Группировка = Элементы.Контакт_0.Группировка;
			ГруппаКонтактногоЛица.ОтображатьЗаголовок = Элементы.Контакт_0.ОтображатьЗаголовок;
			ГруппаКонтактногоЛица.Поведение = Элементы.Контакт_0.Поведение;
			ГруппаКонтактногоЛица.ОтображениеУправления = Элементы.Контакт_0.ОтображениеУправления;
			ГруппаКонтактногоЛица.ЦветТекстаЗаголовка = Элементы.Контакт_0.ЦветТекстаЗаголовка;
			
			ЗаголовкиГрупп = ЗаголовкиГруппКонтакта(ДанныеКонтактныхЛиц[ИндексКонтакта]);
			
			ГруппаКонтактногоЛица.ЗаголовокСвернутогоОтображения = ЗаголовкиГрупп.ЗаголовокСвернутойГруппы;
			ГруппаКонтактногоЛица.Заголовок 					 = ЗаголовкиГрупп.ЗаголовокГруппы;
			
			Если НЕ ДанныеКонтактныхЛиц[ИндексКонтакта].ГруппаРазвернута 
				ИЛИ НЕ ЗначениеЗаполнено(ДанныеКонтактныхЛиц[ИндексКонтакта].КонтактноеЛицо) Тогда
				ГруппаКонтактногоЛица.Скрыть();
			КонецЕсли;
			
			ПолеНаименование = Элементы.Добавить("НаименованиеКонтакт_" + ИндексКонтакта, Тип("ПолеФормы"), ГруппаКонтактногоЛица);
			ПолеНаименование.Вид = Элементы.НаименованиеКонтакт_0.Вид;
			ПолеНаименование.ПутьКДанным = "ДанныеКонтактныхЛиц[" + ИндексКонтакта + "].Наименование";
			ПолеНаименование.ПоложениеЗаголовка = Элементы.НаименованиеКонтакт_0.ПоложениеЗаголовка;
			ПолеНаименование.ПодсказкаВвода = Элементы.НаименованиеКонтакт_0.ПодсказкаВвода;
			
			ПолеНаименование.АвтоМаксимальнаяШирина = Элементы.НаименованиеКонтакт_0.АвтоМаксимальнаяШирина;
			ПолеНаименование.МаксимальнаяШирина = Элементы.НаименованиеКонтакт_0.МаксимальнаяШирина;
			ПолеНаименование.КнопкаВыбора = Элементы.НаименованиеКонтакт_0.КнопкаВыбора;
			ПолеНаименование.КнопкаВыпадающегоСписка = Элементы.НаименованиеКонтакт_0.КнопкаВыпадающегоСписка;
			ПолеНаименование.КнопкаСоздания = Элементы.НаименованиеКонтакт_0.КнопкаСоздания;
			ПолеНаименование.КнопкаОткрытия = Элементы.НаименованиеКонтакт_0.КнопкаОткрытия;
			
			ПолеНаименование.УстановитьДействие("ПриИзменении", "Подключаемый_НаименованиеКонтактногоЛица_ПриИзменении");
			
			ГруппаКИ = Элементы.Добавить("КонтактнаяИнформацияКонтакт_" + ИндексКонтакта, Тип("ГруппаФормы"), ГруппаКонтактногоЛица);
			ГруппаКИ.Вид = Элементы.КонтактнаяИнформацияКонтакт_0.Вид;
			ГруппаКИ.Отображение = Элементы.КонтактнаяИнформацияКонтакт_0.Отображение;
			ГруппаКИ.Группировка = Элементы.КонтактнаяИнформацияКонтакт_0.Группировка;
			ГруппаКИ.ОтображатьЗаголовок = Элементы.КонтактнаяИнформацияКонтакт_0.ОтображатьЗаголовок;
			ГруппаКИ.Ширина = Элементы.КонтактнаяИнформацияКонтакт_0.Ширина;
			ГруппаКИ.РастягиватьПоГоризонтали = Элементы.КонтактнаяИнформацияКонтакт_0.РастягиватьПоГоризонтали;
		Иначе
			ЕстьПоказанныеКонтакты = Истина;
			ЗаголовкиГрупп = ЗаголовкиГруппКонтакта(ДанныеКонтактныхЛиц[0]);
			ГруппаКИ = Элементы.КонтактнаяИнформацияКонтакт_0;
			Элементы.Контакт_0.ЗаголовокСвернутогоОтображения = ЗаголовкиГрупп.ЗаголовокСвернутойГруппы;
			Элементы.Контакт_0.Заголовок 					  = ЗаголовкиГрупп.ЗаголовокГруппы;
			Элементы.Контакт_0.Скрыть();
		КонецЕсли;
		
		ДанныеКонтактногоЛица.ИмяЭлементаДляРазмещения = ГруппаКИ.Имя;
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервереСвязанныхВладельцевКИ(ЭтотОбъект, ДанныеКонтактногоЛица);
		
	КонецЦикла;
	
	ПоказаноКонтактов = ПоследнийИндексКонтакта + 1;
	ВсегоКонтактов = ДанныеКонтактныхЛиц.Количество();
	ОсталосьКонтактов = ВсегоКонтактов - ПоказаноКонтактов;
	ПоказаныВсеКонтакты = (ПоказаноКонтактов = ВсегоКонтактов);
	
	Элементы.ПоказатьВсеКонтакты.Видимость = Не ПоказаныВсеКонтакты;
	Если Не ПоказаныВсеКонтакты Тогда
		Элементы.ДекорацияНетКонтактовОтступ.МаксимальнаяШирина = 33;
		Элементы.ПоказатьВсеКонтакты.Заголовок = СтрШаблон(НСтр("ru = 'показать еще (%1)'"), ОсталосьКонтактов);
	КонецЕсли;
	//Элементы.ДекорацияНетКонтактовОтступ.МаксимальнаяШирина = 47;
	Элементы.Контакт_0.Видимость = ЕстьПоказанныеКонтакты;
	Элементы.ГруппаНетКонтактныхЛиц.Видимость = Не ЕстьПоказанныеКонтакты;
	Элементы.УдаленныеКонтакты.Видимость = ЕстьУдаленныеКонтакты();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПрограммноСозданныеЭлементыКонтактныхЛиц(ИндексОбновляемогоКонтакта = Неопределено)
	
	УдаляемыеЭлементы = Новый Массив;
	// Группа первого контактного лица создана в конфигураторе
	Для ИндексГруппы = 1 По Элементы.ВсеКонтакты.ПодчиненныеЭлементы.Количество()-1 Цикл
		Если ИндексОбновляемогоКонтакта = Неопределено Или ИндексГруппы = ИндексОбновляемогоКонтакта Тогда
			УдаляемыеЭлементы.Добавить(Элементы.ВсеКонтакты.ПодчиненныеЭлементы[ИндексГруппы]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактныхЛиц(Отказ)
	
	// Проверка на заполненность ФИО контактного лица, если введена контактная информация
	Для Каждого ДанныеКонтактногоЛица Из ДанныеКонтактныхЛиц Цикл
		
		Если Не ПустаяСтрока(ДанныеКонтактногоЛица.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ДанныеКонтактныхЛиц[" + ДанныеКонтактныхЛиц.Индекс(ДанныеКонтактногоЛица) + "].Наименование";
		Для Каждого СтрокаТаблицы Из ДанныеКонтактногоЛица.КонтактнаяИнформация Цикл
			Если Не ПустаяСтрока(СтрокаТаблицы.Значение) Или Не ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'ФИО контакта не заполнено.'"),,,ИмяРеквизита, Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНезаполненныйКонтакт(ДанныеКЛ)
	
	Если НЕ ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	КИНезаполнено = 0;
	Для Каждого ДанныеКИ Из ДанныеКЛ.КонтактнаяИнформация Цикл
		Если ЗначениеЗаполнено(ДанныеКИ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		КИНезаполнено = КИНезаполнено + 1;
	КонецЦикла;
	
	Если КИНезаполнено <> ДанныеКЛ.КонтактнаяИнформация.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактноеЛицоОбъект = ДанныеКЛ.КонтактноеЛицо.ПолучитьОбъект();
	КонтактноеЛицоОбъект.ПометкаУдаления = Истина;	
	КонтактноеЛицоОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыКонтактов(Результат, ДополнительныеПараметры) Экспорт
	Прочитать();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовкиГруппКонтакта(ДанныеКЛ)
	
	ЗаголовокСвернутойГруппы = Новый Массив;
	ЗаголовокГруппы			 = Новый Массив;

	Если ЗначениеЗаполнено(ДанныеКЛ.КонтактноеЛицо) Тогда
		
		Если ЗначениеЗаполнено(ДанныеКЛ.Наименование) Тогда
			ЗаголовокСвернутойГруппы.Добавить(ДанныеКЛ.Наименование);
			ЗаголовокГруппы.Добавить(ДанныеКЛ.Наименование);
		Иначе
			ЗаголовокСвернутойГруппы.Добавить(НСтр("ru = '<Не указано>'"));
			ЗаголовокГруппы.Добавить(НСтр("ru = '<Не указано>'"));
		КонецЕсли;
		
		ОтборПоТелефону = Новый Структура("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		ТипКИТелефон = ДанныеКЛ.КонтактнаяИнформация.НайтиСтроки(ОтборПоТелефону);
		Если ТипКИТелефон.Количество() > 0 Тогда
			
			МассивСтрокКИ = Новый Массив;
			
			Если ЗначениеЗаполнено(ТипКИТелефон[0].Представление) Тогда
				МассивСтрокКИ.Добавить(ТипКИТелефон[0].Представление);
			КонецЕсли;
			
			Если ТипКИТелефон.Количество() > 1 Тогда
				МассивСтрокКИ.Добавить(СтрШаблон(НСтр("ru = '(еще %1)'"), ТипКИТелефон.Количество() - 1));
			КонецЕсли;
			
			Если МассивСтрокКИ.Количество() > 0 Тогда
				ЗаголовокСвернутойГруппы.Добавить(СтрСоединить(МассивСтрокКИ, Символы.НПП));
			КонецЕсли;
		КонецЕсли;
		
		ОтборПоПочте = Новый Структура("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		ТипКИПочта = ДанныеКЛ.КонтактнаяИнформация.НайтиСтроки(ОтборПоПочте);
		
		Если ТипКИПочта.Количество() > 0 Тогда
			
			МассивСтрокКИ = Новый Массив;
			Если ЗначениеЗаполнено(ТипКИПочта[0].Представление) Тогда
				МассивСтрокКИ.Добавить(ТипКИПочта[0].Представление);
			КонецЕсли;
			
			Если ТипКИПочта.Количество() > 1 Тогда
				МассивСтрокКИ.Добавить(СтрШаблон(НСтр("ru = '(еще %1)'"), ТипКИПочта.Количество() - 1));
			КонецЕсли;
			
			Если МассивСтрокКИ.Количество() > 0 Тогда
				ЗаголовокСвернутойГруппы.Добавить(СтрСоединить(МассивСтрокКИ, Символы.НПП));
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеКЛ.Наименование) Тогда
			ЗаголовокСвернутойГруппы.Добавить(СтрШаблон(НСтр("ru = '%1 (создание)'"), ДанныеКЛ.Наименование));
			ЗаголовокГруппы.Добавить(СтрШаблон(НСтр("ru = '%1 (создание)'"), ДанныеКЛ.Наименование));
		Иначе
			ЗаголовокСвернутойГруппы.Добавить(НСтр("ru = 'Контакт (создание)'"));
			ЗаголовокГруппы.Добавить(НСтр("ru = 'Контакт (создание)'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("ЗаголовокСвернутойГруппы", 	СтрСоединить(ЗаголовокСвернутойГруппы, ", "));
	Заголовки.Вставить("ЗаголовокГруппы",			СтрСоединить(ЗаголовокГруппы, ", "));
	
	Возврат Заголовки;
	
КонецФункции

#КонецОбласти

#Область КонтрольДублей

&НаСервере
Процедура УстановитьНастройкиКонтроляДублей()
	
	Элементы.ДублиНаименование.Видимость       = Ложь;
	Элементы.ДублиНаименованиеКомпании.Видимость = Ложь;

	НастройкиКонтроляДублейЛиды = Константы.НастройкиКонтроляДублейЛиды.Получить().Получить();
	
	Если НастройкиКонтроляДублейЛиды <> Неопределено Тогда
		ПроверятьПредставлениеНаДубли = НастройкиКонтроляДублейЛиды.Получить("ПроверятьНаименование");
		ПроверятьЮрНазваниеНаДубли    = НастройкиКонтроляДублейЛиды.Получить("ПроверятьЮрНазвание");
		ПроверятьНомерТелефонаНаДубли = НастройкиКонтроляДублейЛиды.Получить("ПроверятьТелефон");
		ПроверятьАдресЭПНаДубли       = НастройкиКонтроляДублейЛиды.Получить("ПроверятьАдресЭП");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьНаДубли(Реквизит)
	
	Если Реквизит = "НаименованиеКомпании" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НаименованиеКомпании) Тогда
			Возврат;
		КонецЕсли;
		НаименованиеКомпанииДляПоискаДублей = НаименованиеДляПоискаДублей(ЭтотОбъект.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
	КонецЕсли;

	Если Реквизит = "Наименование" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Возврат;
		КонецЕсли;
		НаименованиеДляПоискаДублей = НаименованиеДляПоискаДублей(Объект.Наименование);
	КонецЕсли;
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	(Контрагенты.НаименованиеПолное ПОДОБНО &Наименование
	|			ИЛИ Контрагенты.Наименование ПОДОБНО &Наименование)";
	
	ЗапросКонтрагенты.УстановитьПараметр("Наименование", ЭтотОбъект[Реквизит + "ДляПоискаДублей"]);
	ЗапросКонтрагенты.УстановитьПараметр("Ссылка", Объект.Ссылка);
	УстановитьПривилегированныйРежим(Истина);
	Результат = ЗапросКонтрагенты.Выполнить();
			
	Если Результат.Пустой() Тогда
		
		ЗапросКонтакты = Новый Запрос;
		ЗапросКонтакты.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контакты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК Контакты
		|ГДЕ
		|	Контакты.Наименование ПОДОБНО &Наименование";
		
		ЗапросКонтакты.УстановитьПараметр("Наименование", ЭтотОбъект[Реквизит + "ДляПоискаДублей"]);
		Результат = ЗапросКонтакты.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ЗапросЛиды = Новый Запрос;
			ЗапросЛиды.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Лиды.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Лиды КАК Лиды
			|ГДЕ
			|	НЕ Лиды.Ссылка = &Ссылка
			|	И Лиды.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя)
			|	И (Лиды.Наименование ПОДОБНО &Наименование
			|			ИЛИ Лиды.НаименованиеКомпании ПОДОБНО &Наименование)";
			
			ЗапросЛиды.УстановитьПараметр("Ссылка", Объект.Ссылка);
			ЗапросЛиды.УстановитьПараметр("Наименование", ЭтотОбъект[Реквизит + "ДляПоискаДублей"]);
			Результат = ЗапросЛиды.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Элементы["Дубли"+Реквизит].Видимость = НЕ Результат.Пустой();

КонецПроцедуры

&НаСервере
Процедура ПроверитьНаименованиеКонтактаНаДубли(ИндексКЛ)
	
	ПредставлениеКонтакта = ЭтотОбъект.ДанныеКонтактныхЛиц[ИндексКЛ].Наименование;
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеКонтакта) Тогда
		Возврат;
	КонецЕсли;
		
	НаименованиеКонтактаДляПоискаДублей = НаименованиеДляПоискаДублей(ПредставлениеКонтакта);
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &Наименование";
	
	ЗапросКонтрагенты.УстановитьПараметр("Наименование", НаименованиеКонтактаДляПоискаДублей);
	ЗапросКонтрагенты.УстановитьПараметр("Ссылка", Объект.Ссылка);
	УстановитьПривилегированныйРежим(Истина);
	Результат = ЗапросКонтрагенты.Выполнить();
			
	Если Результат.Пустой() Тогда
		
		ЗапросКонтакты = Новый Запрос;
		ЗапросКонтакты.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	Контакты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК Контакты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, ) КАК СвязиКонтрагентКонтакт
		|		ПО (СвязиКонтрагентКонтакт.Контакт = Контакты.Ссылка)
		|ГДЕ
		|	Контакты.Наименование ПОДОБНО &Наименование
		|	И НЕ СвязиКонтрагентКонтакт.Контрагент = &Ссылка
		|	И НЕ Контакты.Ссылка = &Контакт
		|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ";
		
		ЗапросКонтакты.УстановитьПараметр("Ссылка", Объект.Ссылка);
		ЗапросКонтакты.УстановитьПараметр("Контакт", ДанныеКонтактныхЛиц[ИндексКЛ].КонтактноеЛицо);
		ЗапросКонтакты.УстановитьПараметр("Наименование", НаименованиеКонтактаДляПоискаДублей);
		Результат = ЗапросКонтакты.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ЗапросЛиды = Новый Запрос;
			ЗапросЛиды.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Лиды.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Лиды КАК Лиды
			|ГДЕ
			|	НЕ Лиды.Ссылка = &Ссылка
			|	И Лиды.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя)
			|	И (Лиды.Наименование ПОДОБНО &Наименование
			|			ИЛИ Лиды.НаименованиеКомпании ПОДОБНО &Наименование)";
			
			ЗапросЛиды.УстановитьПараметр("Ссылка", Объект.Ссылка);
			ЗапросЛиды.УстановитьПараметр("Наименование", НаименованиеКонтактаДляПоискаДублей);
			Результат = ЗапросЛиды.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	ПоказатьСкрытьНадписьОДубляхНаименованияКЛ(ИндексКЛ, НЕ Результат.Пустой());

КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьНадписьОДубляхНаименованияКЛ(ИндексКЛ, ЕстьДубли)
	
	КЛ = ЭтотОбъект.ДанныеКонтактныхЛиц[ИндексКЛ];
	
	Если НЕ ЕстьДубли Тогда
		
		ЭлементКЛ = Элементы.Найти("СообщениеОДубляхКЛ_"+ Строка(ИндексКЛ));
		Если ЭлементКЛ <> Неопределено Тогда
			Элементы.Удалить(ЭлементКЛ);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	СообщениеОДублях = Элементы.Найти("СообщениеОДубляхКЛ_"+ Строка(ИндексКЛ));
	Если СообщениеОДублях = Неопределено Тогда
		СообщениеОДублях = Элементы.Добавить("СообщениеОДубляхКЛ_" + Строка(ИндексКЛ), Тип("ДекорацияФормы"), Элементы["Контакт_" + ИндексКЛ]);
	КонецЕсли;	
	СообщениеОДублях.Заголовок = НСтр("ru = 'Найдены дубли по представлению'");
	СообщениеОДублях.Гиперссылка = Истина;
	СообщениеОДублях.УстановитьДействие("Нажатие", "Подключаемый_СообщениеОДубляхКЛНажатие");
	Элементы.Переместить(СообщениеОДублях, Элементы["Контакт_" + ИндексКЛ], Элементы["КонтактнаяИнформацияКонтакт_" + ИндексКЛ]);
	СообщениеОДублях.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКИНаДубли(ДанныеКИ, ИндексКЛ = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ДанныеКИ.Представление) И ДублиКИ.Количество() <> 0 Тогда
		УдалитьНеактивныеДублиИЭлементы(ИндексКЛ);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКИ.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ТипКИАдресЭП = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ТипКИНомер   = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	Если ДанныеКИ.Тип <> ТипКИАдресЭП И ДанныеКИ.Тип <> ТипКИНомер Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКИ.Тип = ТипКИАдресЭП И НЕ ПроверятьАдресЭПНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКИ.Тип = ТипКИНомер И НЕ ПроверятьНомерТелефонаНаДубли Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.АдресЭПДляПоиска ПОДОБНО &ПредставлениеКИ";
	
	ПоисковоеВыражение = ДанныеКИ.Представление;
	
	Если ДанныеКИ.Тип = ТипКИНомер Тогда
		ПоисковоеВыражение = КонтактнаяИнформацияУНФ.ПреобразоватьНомерДляКонтактнойИнформации(ДанныеКИ.Представление);
		ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "+", "");
		Если СтрНачинаетсяС(ПоисковоеВыражение, "7") Тогда
			ПоисковоеВыражение = Сред(ПоисковоеВыражение, 2, СтрДлина(ПоисковоеВыражение) - 1);
		КонецЕсли;

		ЗапросКонтрагенты.Текст = СтрЗаменить(ЗапросКонтрагенты.Текст, "АдресЭП", "НомерТелефона");
	КонецЕсли;
	
	ЗапросКонтрагенты.УстановитьПараметр("ПредставлениеКИ", "%" + ПоисковоеВыражение + "%");
	УстановитьПривилегированныйРежим(Истина);
	Результат = ЗапросКонтрагенты.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ЗапросКонтакты = Новый Запрос;
		ЗапросКонтакты.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контакты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК Контакты
		|ГДЕ
		|	Контакты.АдресЭПДляПоиска ПОДОБНО &ПредставлениеКИ";
		
		Если ДанныеКИ.Тип = ТипКИНомер Тогда
			ЗапросКонтакты.Текст = СтрЗаменить(ЗапросКонтакты.Текст, "АдресЭП", "НомерТелефона");
		КонецЕсли;
		
		ЗапросКонтакты.УстановитьПараметр("ПредставлениеКИ", "%" + ПоисковоеВыражение + "%");
		
		Результат = ЗапросКонтакты.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			ЗапросЛиды = Новый Запрос;
			ЗапросЛиды.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Лиды.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Лиды КАК Лиды
			|ГДЕ
			|	НЕ Лиды.Ссылка = &Ссылка
			|	И Лиды.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантЗавершенияРаботыСЛидом.ПереведенВПокупателя)
			|	И Лиды.АдресЭПДляПоиска ПОДОБНО &ПредставлениеКИ";
			
			Если ДанныеКИ.Тип = ТипКИНомер Тогда
				ЗапросЛиды.Текст = СтрЗаменить(ЗапросЛиды.Текст, "АдресЭП", "НомерТелефона");
			КонецЕсли;
			
			ЗапросЛиды.УстановитьПараметр("Ссылка", Объект.Ссылка);
			ЗапросЛиды.УстановитьПараметр("ПредставлениеКИ", "%" + ПоисковоеВыражение + "%");
			Результат = ЗапросЛиды.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьДубли = НЕ Результат.Пустой();
	ПоказатьСкрытьНадписьОДубляхКИ(ДанныеКИ, ЕстьДубли, ИндексКЛ);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьНадписьОДубляхКИ(ДанныеКИ, ЕстьДубли, ИндексКЛ = Неопределено)
	
	УдалитьНеактивныеДублиИЭлементы(ИндексКЛ);
	
	Дубли = ДублиКИ.НайтиСтроки(Новый Структура("Представление", ДанныеКИ.Представление));
	
	Если Дубли.Количество() <> 0 Тогда
		СообщениеОДублях = Элементы.Найти("СообщениеОДублях_" + Строка(Дубли[0].ИндексДекорации));
		СообщениеОДублях.Видимость = ЕстьДубли;
		Возврат;
	КонецЕсли;

	Если НЕ ЕстьДубли Тогда
		Возврат;
	КонецЕсли;
	
	ДублиКИ.Сортировать("ИндексДекорации УБЫВ");
	
	НовыйДубль = ДублиКИ.Добавить();
	НовыйДубль.ИмяЭлемента     = ДанныеКИ.ИмяРеквизита;
	НовыйДубль.ТипКИ           = ДанныеКИ.Тип;
	НовыйДубль.Представление   = ДанныеКИ.Представление;
	НовыйДубль.ИндексДекорации = ДублиКИ[0].ИндексДекорации + 1;
	НовыйДубль.ЭтоДубльКЛ      = ?(ИндексКЛ = Неопределено, Ложь, Истина);
	НовыйДубль.ИндексКЛ        = ?(ИндексКЛ = Неопределено, 0, ИндексКЛ);
	
	ГруппаЗначенияКИ = Элементы[ДанныеКИ.ИмяРеквизита].Родитель.Родитель.Родитель;
	ГруппаТекущегоЗначенияКИ = Элементы[ДанныеКИ.ИмяРеквизита].Родитель.Родитель;
	ГруппаСоседнегоЗначенияКИ = УправлениеКонтактнойИнформациейУНФ.СледующийЭлементВКоллекцииПочиненных(ГруппаЗначенияКИ.ПодчиненныеЭлементы, ГруппаТекущегоЗначенияКИ);
	
	СообщениеОДублях = Элементы.Добавить("СообщениеОДублях_" + Строка(НовыйДубль.ИндексДекорации), Тип("ДекорацияФормы"), ГруппаЗначенияКИ);
	СообщениеОДублях.Заголовок = СообщенияОДубляхКИПоТипу(ДанныеКИ.Тип);
	СообщениеОДублях.Гиперссылка = Истина;
	СообщениеОДублях.УстановитьДействие("Нажатие", "Подключаемый_СообщениеОДубляхНажатие");
	
	Если ГруппаСоседнегоЗначенияКИ <> Неопределено Тогда
		Элементы.Переместить(СообщениеОДублях, ГруппаЗначенияКИ, ГруппаСоседнегоЗначенияКИ);
	КонецЕсли;
		
	СообщениеОДублях.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция СообщенияОДубляхКИПоТипу(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат НСтр("ru = 'Найдены дубли по e-mail'");
	КонецЕсли;
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат НСтр("ru = 'Найдены дубли по номеру телефона'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УдалитьНеактивныеДублиИЭлементы(ИндексКЛ = Неопределено)
	
	Если ДублиКИ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндекс = ДублиКИ.Количество() - 1;
	
	Пока ТекущийИндекс >= 0 Цикл
		
		Дубль = ДублиКИ[ТекущийИндекс];
		ТекущийИндекс = ТекущийИндекс - 1;
		Если ИндексКЛ = Неопределено И Дубль.ЭтоДубльКЛ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексКЛ = Неопределено И Дубль.ЭтоДубльКЛ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексКЛ <> Неопределено И НЕ Дубль.ЭтоДубльКЛ Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеКИ = УправлениеКонтактнойИнформациейУНФ.ОписаниеРеквизитаКонтактнойИнформации(ЭтотОбъект, Дубль.ИмяЭлемента);
		Если ОписаниеКИ.Представление = Дубль.Представление Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.Удалить(Элементы["СообщениеОДублях_"+ Строка(Дубль.ИндексДекорации)]);
		ДублиКИ.Удалить(ДублиКИ.Индекс(Дубль));
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентаНаДублиКИ()
	
	Для каждого ДанныеКИ Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Если СтрНачинаетсяС(ДанныеКИ.ИмяЭлементаДляРазмещения, "КонтактнаяИнформацияКонтакт_") Тогда
			// Это контактная информация контактого лица.
			Продолжить;
		КонецЕсли;
		ПроверитьКИНаДубли(ДанныеКИ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НаименованиеДляПоискаДублей(Наименование)
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(Наименование))Тогда
		Возврат "";
	КонецЕсли;
	
	ПоисковоеВыражение = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Наименование);
	
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "-", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, " ", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, "(", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ")", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, ".", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
	ПоисковоеВыражение = СтрЗаменить(ПоисковоеВыражение, """", "%");
	
	Возврат СокрЛП("%"+ПоисковоеВыражение+"%");
	
КонецФункции

&НаСервере
Процедура ОбработатьВыборДублей(ВыбранныйКонтрагент)
	
	ЗакрыватьПриВыборе = Ложь;
	ЗначениеВРеквизитФормы(ВыбранныйКонтрагент.ПолучитьОбъект(), "Объект");
	УдалитьЭлементыДублейКИ();
	ДублиКИ.Очистить();	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОДублях()
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыПредупреждениеДублей",ЭтотОбъект);
	ТекстПредупреждения = ТекстПредупрежденияПоДублям();

	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Проигнорировать и записать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстПредупреждения, СписокКнопок,,КодВозвратаДиалога.Отмена, НСтр("ru = 'Контроль дублей'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыПредупреждениеДублей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СозданКопированием = Ложь;
	ПроигнорированоСообщениеОДублях = Истина;
	СообщениеОДублированииИнформации = ТекстПредупрежденияПоДублям(Истина);
	
	УдалитьЭлементыДублейКИ();
	Элементы.ДублиНаименование.Видимость       = Ложь;
	Элементы.ДублиНаименованиеКомпании.Видимость = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыДублейКИ()
	
	Для Каждого Дубль Из ДублиКИ Цикл
		Элементы.Удалить(Элементы["СообщениеОДублях_"+ Строка(Дубль.ИндексДекорации)]);
	КонецЦикла;
	
	Для Каждого Контакт Из ДанныеКонтактныхЛиц Цикл
		
		ИндексКЛ = ДанныеКонтактныхЛиц.Индекс(Контакт);
		
		Если Элементы.Найти("СообщениеОДубляхКЛ_"+ Строка(ИндексКЛ)) <> Неопределено Тогда
			Элементы.Удалить(Элементы["СообщениеОДубляхКЛ_"+ Строка(ИндексКЛ)]);
		КонецЕсли;
		
	КонецЦикла;
	
	ДублиКИ.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентаНаДублиСервер()
	
	Если ПроверятьПредставлениеНаДубли  Тогда
		ПроверитьНаДубли("Наименование");
	КонецЕсли;
	
	Если ПроверятьЮрНазваниеНаДубли Тогда
		ПроверитьНаДубли("НаименованиеКомпании");
	КонецЕсли;
		
	УдалитьЭлементыДублейКИ();
	ПроверитьКонтрагентаНаДублиКИ();
	
	Для Каждого Контакт Из ДанныеКонтактныхЛиц Цикл
		
		ИндексКЛ = ДанныеКонтактныхЛиц.Индекс(Контакт);
		ПроверитьНаименованиеКонтактаНаДубли(ИндексКЛ);
		
		Для каждого ДанныеКИ Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если СтрНачинаетсяС(ДанныеКИ.ИмяЭлементаДляРазмещения, "КонтактнаяИнформацияКонтакт_") Тогда
				ПроверитьКИНаДубли(ДанныеКИ, ИндексКЛ);
			КонецЕсли;
		КонецЦикла
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТекстПредупрежденияПоДублям(СообщениеПриЗаписи = Ложь)
	
	МассивСтрок = Новый Массив;
	
	Если Элементы.ДублиНаименование.Видимость Тогда
		МассивСтрок.Добавить(НСтр("ru = 'представлению'"));
	КонецЕсли;
	
	Если Элементы.ДублиНаименованиеКомпании.Видимость Тогда
		МассивСтрок.Добавить(НСтр("ru = 'юр. названию'"));
	КонецЕсли;
	
	Для Каждого Контакт Из ДанныеКонтактныхЛиц Цикл
		
		ИндексКЛ = ДанныеКонтактныхЛиц.Индекс(Контакт);
		
		Если Элементы.Найти("СообщениеОДубляхКЛ_"+Строка(ИндексКЛ)) <> Неопределено Тогда
			МассивСтрок.Добавить(НСтр("ru = 'имени контакта'"));
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ДублиПоНомеру = ДублиКИ.НайтиСтроки(Отбор);
	Если ДублиПоНомеру.Количество() > 0 Тогда
		МассивСтрок.Добавить(НСтр("ru = 'номеру телефона'"));
	КонецЕсли;
	
	Отбор = Новый Структура("ТипКИ", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ДублиПоАдресуЭП = ДублиКИ.НайтиСтроки(Отбор);
	Если ДублиПоАдресуЭП.Количество() > 0 Тогда
		МассивСтрок.Добавить(НСтр("ru = 'e-mail'"));
	КонецЕсли;
	
	Если СообщениеПриЗаписи Тогда
		Возврат НСтр("ru = 'Проигнорировано сообщение о дублировании информации по '") + СтрСоединить(МассивСтрок,", ");
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Найдены дубли по '") + СтрСоединить(МассивСтрок,", ");
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеОДублях()
	
	Если НЕ Элементы.ДублиНаименование.Видимость И НЕ Элементы.ДублиНаименованиеКомпании.Видимость 
		И ДублиКИ.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дублей не найдено'"));
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупрежденияПоДублям());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СообщениеОДубляхКЛНажатие(Элемент)
	
	ПоложениеИндекса = СтрНайти(Элемент.Имя, "_", НаправлениеПоиска.СКонца);
	ИндексДекорации  = Число(Сред(Элемент.Имя, ПоложениеИндекса+1));
	
	НаименованиеКЛ = ЭтотОбъект.ДанныеКонтактныхЛиц[ИндексДекорации].Наименование;
	
	ПараметрыДублей = Новый Структура;
	МассивКонтактов = Новый Массив;
	Для Каждого Контакт Из ЭтотОбъект.ДанныеКонтактныхЛиц Цикл
		МассивКонтактов.Добавить(Контакт.КонтактноеЛицо);
	КонецЦикла;
	
	ПараметрыДублей.Вставить("Наименование", НаименованиеДляПоискаДублей(НаименованиеКЛ));
	ПараметрыДублей.Вставить("ИсключаяКонтакты", МассивКонтактов);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СообщениеОДубляхНажатие(Элемент)
	
	ПоложениеИндекса = СтрНайти(Элемент.Имя, "_", НаправлениеПоиска.СКонца);
	ИндексДекорации  = Число(Сред(Элемент.Имя, ПоложениеИндекса+1));
	
	СтрокиДублиКИ = ДублиКИ.НайтиСтроки(Новый Структура("ИндексДекорации", ИндексДекорации));
	Если СтрокиДублиКИ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Дубль = СтрокиДублиКИ[0];
	
	ДанныеКИ = УправлениеКонтактнойИнформациейУНФКлиентСервер.ОписаниеРеквизитаКонтактнойИнформации(ЭтотОбъект, Дубль.ИмяЭлемента);
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДублей = Новый Структура;
	МассивКонтактов = Новый Массив;
	Для Каждого Контакт Из ЭтотОбъект.ДанныеКонтактныхЛиц Цикл
		МассивКонтактов.Добавить(Контакт.КонтактноеЛицо);
	КонецЦикла;
	ПараметрыДублей.Вставить("ПредставлениеКИ", ДанныеКИ.Представление);
	ПараметрыДублей.Вставить("ТипКИ",           ДанныеКИ.Тип);
	ПараметрыДублей.Вставить("ИсключаяКонтакты", МассивКонтактов);
	ПараметрыДублей.Вставить("СсылкаНаРедактируемыйОбъект", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
	ОткрытьФорму("Справочник.Лиды.Форма.ФормаВыбораДублей", ПараметрыДублей, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено И РезультатЗакрытия.Свойство("ВыбранДубльЛида") Тогда
		
		ОбработатьВыборДублей(РезультатЗакрытия.ВыбранныйЛид);
		Элементы.ДублиНаименование.Видимость = Ложь;
		Элементы.ДублиНаименованиеКомпании.Видимость = Ложь;
		ЛидЗамененНаДубль = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
