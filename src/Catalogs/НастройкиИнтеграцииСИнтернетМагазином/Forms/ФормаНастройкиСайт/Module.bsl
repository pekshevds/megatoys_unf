
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДиагностикаТоварПриИзмененииСервер();
	
	Если Параметры.Свойство("ЭтоСоздание") Тогда
		ЭтоСоздание = Параметры.ЭтоСоздание;
	КонецЕсли;

	ЭтаФорма.ВкладкаОбслуживаниеВниманиеЗначения = Новый Структура;
	
	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено();
	ЭтоЛокальныйРежим = ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме");
	УчетНоменклатурыПоставщиков = ПолучитьФункциональнуюОпцию("УчетНоменклатурыПоставщиков");
	ИспользоватьПодсистемуРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы");
	РазделУслугиДоступен = НЕ ОбщегоНазначенияУНФ.ЭтоРозница();
	
	Элементы.ЗаписьНаУслугиПункт.Видимость = РазделУслугиДоступен;
	
	Элементы.СтраницыЗаписьНаУслуги.ТекущаяСтраница =
	?(ИспользоватьПодсистемуРаботы, Элементы.СтраницаЗаписьНаУслугиНастройка, Элементы.СтраницаЗаписьНаУслугиПустая);
	
	НастроитьРасписаниеРегламентногоЗадания = "Настроить расписание регламентного задания";
	НастроитьРасписаниеРегламентногоЗаданияПолныйОбмен = "Настроить расписание полного обмена";
	Элементы.НастроитьРасписаниеРегламентногоЗаданияПолныйОбмен.Доступность = Объект.ИспользоватьПолныйОбмен;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.ВалютаДляПодстановкиВЗаказы = Константы.ВалютаУчета.Получить();
		Объект.ТипИсточникаИнтеграции = ПредопределенноеЗначение("Перечисление.ТипыИсточниковИнтеграции.Сайт");
		Объект.ДатаСоздания = ТекущаяДатаСеанса();
		Объект.ДатаНачалаВыгрузкиЗаказов = НачалоМесяца(ТекущаяДатаСеанса());
		Объект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
		Объект.СостояниеЗаказа = ПолучитьСостояниеЗаказаПокупателя(Объект.ВидЗаказа);
		Объект.СостояниеЗаказНаряда = Объект.СостояниеЗаказа;
		Объект.СпособУстановкиДатыОтгрузкиЗаказаКоличествоДней = 0;
		НастройкиПоискаКонтрагентовПредставление = "";
		СпособИдентификацииКонтрагентовПриИзмененииНаСервереБезКонтекста(Объект.НастройкиПоискаКонтрагентов, НастройкиПоискаКонтрагентовПредставление);
		
		Если Параметры.Свойство("УзелОбменаССайтом") Тогда
			
			ЭтоПеренос = Истина;
			
			Объект.УзелОбменаССайтом = Параметры.УзелОбменаССайтом;
			
			ЗаполнитьЗначенияСвойств(Объект, Объект.УзелОбменаССайтом,,
			"Код,ПометкаУдаления,Наименование,СоответствиеСтатусовЗаказов,ВидыЦен,СоответствиеВидовОплат,СоответствиеСлужбДоставки,СтруктураКаталога,СоответствиеПолейНоменклатуры");
			
			Объект.СоответствиеСтатусовЗаказов.Загрузить(Объект.УзелОбменаССайтом.СоответствиеСтатусовЗаказов.Выгрузить());
			Объект.ВидыЦен.Загрузить(Объект.УзелОбменаССайтом.ВидыЦен.Выгрузить());
			Объект.СоответствиеВидовОплат.Загрузить(Объект.УзелОбменаССайтом.СоответствиеВидовОплат.Выгрузить());
			Объект.СоответствиеСлужбДоставки.Загрузить(Объект.УзелОбменаССайтом.СоответствиеСлужбДоставки.Выгрузить());
			Объект.СтруктураКаталога.Загрузить(Объект.УзелОбменаССайтом.СтруктураКаталога.Выгрузить());
			Объект.СоответствиеПолейНоменклатуры.Загрузить(Объект.УзелОбменаССайтом.СоответствиеПолейНоменклатуры.Выгрузить());
			Объект.ТипСайта = Объект.УзелОбменаССайтом.ПротоколОбменаCMS;
			Объект.Логин = Объект.УзелОбменаССайтом.ИмяПользователя;
			
			УстановитьПривилегированныйРежим(Истина);
			Объект.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.УзелОбменаССайтом, "Пароль");
			УстановитьПривилегированныйРежим(Ложь);
			
			Модифицированность = Истина;
		КонецЕсли;
		
		ВариантВыгрузкиФайловОбмена = 1;
		
	Иначе
		КодНастроек = Объект.Ссылка.УникальныйИдентификатор();
		НастроитьРасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗадания();
		Если Объект.РасписаниеРегламентногоЗаданияПолныйОбмен <> "" Тогда
			НастроитьРасписаниеРегламентногоЗаданияПолныйОбмен = ПолучитьРасписаниеРегламентногоЗаданияПолныйОбмен();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( Объект.ТипБулевоЗначенияДляВыгрузки ) Тогда
		Объект.ТипБулевоЗначенияДляВыгрузки = ИнтеграцияСИнтернетМагазиномСервер.ТипБулевоЗначенияДляВыгрузкиПоУмолчанию();
	КонецЕсли;
	
	НастройкиЗаписьНаУслугиИнтернетМагазина.Параметры.УстановитьЗначениеПараметра("НастройкаИнтеграции", Объект.Ссылка);
	Элементы.СтраницаИнформацияОбменаЧерезВебСервисРежимСервиса.Видимость = НЕ ЭтоЛокальныйРежим;
	
	Элементы.СтраницаИнформацияОбменаЧерезВебСервисРежимСервиса.Видимость = НЕ ЭтоЛокальныйРежим;
	Если НЕ ЭтоЛокальныйРежим Тогда
		СсылкаНаИнформационнуюБазу = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		АдресВебСервиса = СтрШаблон("%1/ws/SiteExchange?wsdl", СсылкаНаИнформационнуюБазу);
		АдресВебСервиса2 = СтрШаблон("%1/ws/SiteExchange2?wsdl", СсылкаНаИнформационнуюБазу);
	КонецЕсли;
	
	ОбновитьДанныеНаСервере();
	ОбновитьОтображениеНаСервере();
	
	ВыполнитьДействияПриСозданииНаСервере();
	
	Элементы.ГруппаКоманднаяПанель.Видимость = Объект.НастройкаЗавершена;
	
	Элементы.ГруппаОбмены.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	Элементы.ИспользоватьРегламентныеЗаданияПояснение.Видимость = Не Объект.ИспользоватьРегламентныеЗадания;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа)
	
	Возврат ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	
КонецФункции

&НаСервере
Процедура ВыполнитьДействияПриСозданииНаСервере()
	
	ЗаполнитьГиперссылкиЦенСервер();
	
	ЗаполнитьТаблицуКаталоговСервер();
	
	УстановитьПараметрыТаблицыКаталоговСервер();
	
	УстановитьТипЗначенийСпискаГруппТаблицыКаталоговСервер();
	
	Если ЗначениеЗаполнено(Объект.НастройкиПоискаКонтрагентов) Тогда
		НастройкиПоискаКонтрагентовПредставление = ПоискКонтрагентовПредставление(ОбменССайтом.ЧтениеJSONВСтруктуру(Объект.НастройкиПоискаКонтрагентов));
	КонецЕсли;
	
	НастройкиВыгрузкиРеквизитовПредставление = НастройкиВыгрузкиРеквизитовПредставление(Объект.НастройкиВыгрузкиРеквизитов,Объект.НастройкиВыгрузкиДопРеквизитовНоменклатуры);
	НастройкиВыгрузкиДопРеквизитовЗаказовПредставление = НастройкиВыгрузкиДопРеквизитовЗаказовПредставление(Объект.НастройкиВыгрузкиДопРеквизитовЗаказов);
	
	Элементы.ГруппаВыгружатьОстатокПоставщиков.ТолькоПросмотр = Не УчетНоменклатурыПоставщиков;
	
	ЗаполнитьСписокВыбораСоответствиеПолейНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоискаПоКонтактнойИнформацииЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия<>Неопределено И ТипЗнч(РезультатЗакрытия) = Тип("Соответствие") Тогда
		
		НастройкиПоискаКонтрагентовПредставление = ПоискКонтрагентовПредставление(РезультатЗакрытия);
		Объект.НастройкиПоискаКонтрагентов = НастройкиПоискаКонтрагентовНаСервереБезКонтекста(РезультатЗакрытия);
		ЭтотОбъект.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПоискаКонтрагентовНаСервереБезКонтекста(НастройкиПоискаКонтрагентов)
	
	Возврат ИнтеграцияСИнтернетМагазиномСервер.ЗаписьJSONВСтруктуру(НастройкиПоискаКонтрагентов);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораСоответствиеПолейНоменклатуры()
	
	СписокВыбораСоответствиеПолейНоменклатуры = Элементы.СоответствиеПолейНоменклатурыНаименованиеПоля1С.СписокВыбора;
	СписокВыбораСоответствиеПолейНоменклатуры.Добавить("Наименование", НСтр("ru = 'Наименование'"));
	СписокВыбораСоответствиеПолейНоменклатуры.Добавить("НаименованиеПолное", НСтр("ru = 'Наименование для печати'"));
	СписокВыбораСоответствиеПолейНоменклатуры.Добавить("Комментарий", НСтр("ru = 'Описание'"));
	СписокВыбораСоответствиеПолейНоменклатуры.Добавить("Штрихкод", НСтр("ru = 'Штрихкод'"));
	СписокВыбораСоответствиеПолейНоменклатуры.Добавить("Артикул", НСтр("ru = 'Артикул'"));
	СписокВыбораСоответствиеПолейНоменклатуры.Добавить("Код", НСтр("ru = 'Код'"));
	СписокВыбораСоответствиеПолейНоменклатуры.Добавить("СтранаПроисхождения", НСтр("ru = 'Страна происхождения'"));
	СписокВыбораСоответствиеПолейНоменклатуры.Добавить("Вес", НСтр("ru = 'Вес'"));
	
	ТаблицаСвойств = УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов("Справочник_Номенклатура", "ДополнительныеРеквизиты");
	Для Каждого ДопРеквизит Из ТаблицаСвойств Цикл
		СписокВыбораСоответствиеПолейНоменклатуры.Добавить(ДопРеквизит.Свойство.Имя, ДопРеквизит.Свойство);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиВыгрузкиРеквизитовПредставление(НастройкиВыгрузкиРеквизитов, НастройкиВыгрузкиДопРеквизитовНоменклатуры)
	
	СтрокаПредставление = "<Реквизиты не выбраны>";
	
	Если НастройкиВыгрузкиРеквизитов = "" И НастройкиВыгрузкиДопРеквизитовНоменклатуры = "" Тогда
		Возврат СтрокаПредставление;
	КонецЕсли;
	
	СтрокаПредставление = "";
	
	Если НастройкиВыгрузкиРеквизитов <> "" Тогда
		СтруктураНастройки = ОбменССайтомСлужебныйВызовСервера.ЧтениеJSONВСтруктуру(НастройкиВыгрузкиРеквизитов, Ложь);
		Для Каждого СтрокаНастроек Из СтруктураНастройки Цикл
			СтрокаПредставление = СтрокаПредставление + СтрокаНастроек.Ключ + ", ";
		КонецЦикла;
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление)-2);
	КонецЕсли;
	
	Если НастройкиВыгрузкиДопРеквизитовНоменклатуры <> "" Тогда
		
		СтрокаПредставление = СтрокаПредставление + ?(СтрокаПредставление = "","",", ");
		
		СтруктураНастройки = ОбменССайтомСлужебныйВызовСервера.ЧтениеJSONВСтруктуру(НастройкиВыгрузкиДопРеквизитовНоменклатуры, Ложь);
		Для Каждого СтрокаНастроек Из СтруктураНастройки Цикл
			СтрокаПредставление = СтрокаПредставление + СтрокаНастроек.Ключ + ", ";
		КонецЦикла;
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление)-2);
	КонецЕсли;
	
	Возврат СтрокаПредставление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиВыгрузкиДопРеквизитовЗаказовПредставление(НастройкиВыгрузкиДопРеквизитовЗаказов)
	
	СтрокаПредставление = "";
	Если НастройкиВыгрузкиДопРеквизитовЗаказов = "" Тогда
		СтрокаПредставление = "<Реквизиты не выбраны>";
	Иначе
		СтруктураНастройки = ОбменССайтомСлужебныйВызовСервера.ЧтениеJSONВСтруктуру(НастройкиВыгрузкиДопРеквизитовЗаказов, Ложь);
		Для Каждого СтрокаНастроек Из СтруктураНастройки Цикл
			СтрокаПредставление = СтрокаПредставление + СтрокаНастроек.Ключ + ", ";
		КонецЦикла;
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление)-2);
	КонецЕсли;
	
	Возврат СтрокаПредставление;
	
КонецФункции

&НаКлиенте
Процедура НастройкиВыгрузкиРеквизитовПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьРеквизитыЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НастройкиВыгрузкиРеквизитов" , Объект.НастройкиВыгрузкиРеквизитов);
	ПараметрыФормы.Вставить("НастройкиВыгрузкиДопРеквизитов" , Объект.НастройкиВыгрузкиДопРеквизитовНоменклатуры);
	ПараметрыФормы.Вставить("НастройкиВыгрузкиДопРеквизитовНоменклатурыИспользовать" , Объект.НастройкиВыгрузкиДопРеквизитовНоменклатурыИспользовать);
	ПараметрыФормы.Вставить("НастройкаИнтеграции" , Объект.Ссылка);
	
	ОткрытьФорму("Справочник.НастройкиИнтеграцииСИнтернетМагазином.Форма.ФормаВыбораРеквизитов", 
	ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВыгрузкиДопРеквизитовЗаказовПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДопРеквизитыЗаказовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.Форма.ФормаВыбораРеквизитов", 
	Новый Структура("НастройкиВыгрузкиДопРеквизитовЗаказов, ЗаказПокупателя", Объект.НастройкиВыгрузкиДопРеквизитовЗаказов, Объект.Ссылка), 
	ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца );
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРеквизитыЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.НастройкиВыгрузкиРеквизитов.Количество()=0 Тогда
		Объект.НастройкиВыгрузкиРеквизитов = "";
	Иначе
		Объект.НастройкиВыгрузкиРеквизитов = ОбменССайтомСлужебныйВызовСервера.ЗаписьJSONВСтруктуру(ВыбранныйЭлемент.НастройкиВыгрузкиРеквизитов);
	КонецЕсли;
	
	Если ВыбранныйЭлемент.НастройкиВыгрузкиДопРеквизитов.Количество()=0 Тогда
		Объект.НастройкиВыгрузкиДопРеквизитовНоменклатуры = "";
	Иначе
		Объект.НастройкиВыгрузкиДопРеквизитовНоменклатуры = ОбменССайтомСлужебныйВызовСервера.ЗаписьJSONВСтруктуру(ВыбранныйЭлемент.НастройкиВыгрузкиДопРеквизитов);
	КонецЕсли;
	
	Объект.НастройкиВыгрузкиДопРеквизитовНоменклатурыИспользовать = Истина;
	
	НастройкиВыгрузкиРеквизитовПредставление = НастройкиВыгрузкиРеквизитовПредставление(Объект.НастройкиВыгрузкиРеквизитов,Объект.НастройкиВыгрузкиДопРеквизитовНоменклатуры);
	Модифицированность = Истина;
	
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДопРеквизитыЗаказовЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.НастройкиВыгрузкиДопРеквизитов.Количество()=0 Тогда
		Объект.НастройкиВыгрузкиДопРеквизитовЗаказов = "";
	Иначе
		Объект.НастройкиВыгрузкиДопРеквизитовЗаказов = ОбменССайтомСлужебныйВызовСервера.ЗаписьJSONВСтруктуру(ВыбранныйЭлемент.НастройкиВыгрузкиДопРеквизитов);
	КонецЕсли;
	
	НастройкиВыгрузкиДопРеквизитовЗаказовПредставление = НастройкиВыгрузкиДопРеквизитовЗаказовПредставление(Объект.НастройкиВыгрузкиДопРеквизитовЗаказов);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДублированиеДоставки(ИмяКолонки)
	
	СоответствиеСлужбаДоставкиНаСайте = Элементы.СоответствиеСлужбДоставки.ТекущиеДанные.СлужбаДоставкиНаСайте;
	СоответствиеСлужбаДоставки1С = Элементы.СоответствиеСлужбДоставки.ТекущиеДанные.СлужбаДоставки;
	
	Если НЕ ПустаяСтрока(СоответствиеСлужбаДоставкиНаСайте) Тогда
		Найдено = Объект.СоответствиеСлужбДоставки.НайтиСтроки(Новый Структура("СлужбаДоставкиНаСайте", СоответствиеСлужбаДоставкиНаСайте));
		Если Найдено.Количество() > 1 Тогда
			ИмяКолонки = "СлужбаДоставкиНаСайте";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СоответствиеСлужбыДоставкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = "";
	Если НЕ ПроверитьДублированиеДоставки(ИмяКолонки) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Такая служба доставки уже указана в другой строке таблицы!'"),
		Объект.Ссылка,
		ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
		"Объект.СоответствиеСлужбДоставки", Объект.СоответствиеСлужбДоставки.Индекс(Элементы.СоответствиеСлужбДоставки.ТекущиеДанные) + 1, ИмяКолонки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоискКонтрагентовПредставление(СоответствиеНастройки)
	
	СтрокаПредставление = "";
	СписокНастроекВПорядкеПриоритета = Новый СписокЗначений;
	Для Каждого элНастройки Из СоответствиеНастройки Цикл
		
		Если элНастройки.Ключ = "ВариантПоиска" ИЛИ элНастройки.Ключ = "СовпадениеВсехПолей" Тогда
			Продолжить;
		КонецЕсли;
		
		Если элНастройки.Значение.Получить("КонтрагентыПометка") = Истина
			ИЛИ элНастройки.Значение.Получить("КонтактныеЛицаПометка") = Истина
			Тогда
			
			СписокНастроекВПорядкеПриоритета.Добавить(элНастройки.Значение.Получить("Порядок"), элНастройки.Значение.Получить("Значение"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокНастроекВПорядкеПриоритета.СортироватьПоЗначению();
	
	Для Каждого СтрокаНастроек Из СписокНастроекВПорядкеПриоритета Цикл
		СтрокаПредставление = СтрокаПредставление + СтрокаНастроек + ", ";
	КонецЦикла;
	
	Если СтрокаПредставление="" Тогда
		СтрокаПредставление = "<Настройка не заполнена>";
	Иначе
		СтрокаПредставление = Лев(СтрокаПредставление, СтрДлина(СтрокаПредставление)-2);
	КонецЕсли;
	
	Возврат СтрокаПредставление;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГиперссылкиЦенСервер()
	
	СписокВидовЦенСтрока = "";
	Для Каждого СтрокаВидовЦен Из Объект.ВидыЦен Цикл 
		
		НовыйЭлемент = СписокВидовЦен.Добавить();
		НовыйЭлемент.Значение = СтрокаВидовЦен.ВидЦен;
		
		СписокВидовЦенСтрока = СписокВидовЦенСтрока + ?(СписокВидовЦенСтрока = "", "", "; ")
			+ СтрокаВидовЦен.ВидЦен.Наименование;
		
	КонецЦикла;
	Элементы.ВыбратьВидыЦенНоменклатуры.Заголовок = СтрШаблон(НСтр("ru = 'Вид цен: %1'"), СписокВидовЦенСтрока);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенУслуг) Тогда
		Элементы.ВыбратьВидЦенУслуг.Заголовок = СтрШаблон(НСтр("ru = 'Вид цен: %1'"), Объект.ВидЦенУслуг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеНаКлиенте();

	Если Объект.НастройкаЗавершена Тогда
		ПоказатьСтраницуТовары();
		
		ДиагностикаЗаполнитьСписокВыбораКаталоговТоваров();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьОтображениеВремениЗапускаНаКлиенте", 0.1, Истина );
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	НаименованиеКраткое = "";
	
	Если Объект.ВыгружатьНаСайт Тогда
		НаименованиеКраткое = Объект.АдресСайта;
	Иначе
		НаименованиеКраткое = Объект.КаталогВыгрузки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = СтрШаблон("%1 (%2)", НаименованиеКраткое, Объект.ДатаСоздания);
	КонецЕсли;
	
	Если Объект.ОбменТоварами И ТаблицаКаталогов.Количество() = 0 Тогда
		
		Отказ = Истина;
		
		Сообщение = НСтр("ru = 'Таблица каталогов не заполнена.'");
		Поле = "ТаблицаКаталогов";
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение, Объект.Ссылка, Поле);
		
	КонецЕсли;
	
	Если Объект.ОбменТоварами И СписокВидовЦен.Количество() = 0 Тогда
		
		Отказ = Истина;
		
		Сообщение = НСтр("ru = 'Не выбраны виды цен на вкладке ""Товары"".'");
		Поле = "ВыбратьВидыЦенНоменклатуры";
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение, Объект.Ссылка, Поле);
		
	КонецЕсли;
	
	Если Объект.ОбменЗаписьНаУслуги И НЕ ЗначениеЗаполнено(Объект.ВидЦенУслуг) Тогда
		
		Отказ = Истина;
		
		Сообщение = НСтр("ru = 'Вид цен для услуг не выбран.'");
		Поле = "ВыбратьВидЦенУслуг";
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение, Объект.Ссылка, Поле);
		
	КонецЕсли;
	
	Если НЕ Объект.ВыгружатьКартинки И Объект.ОбязательноеНаличиеФотографий Тогда
		Объект.ОбязательноеНаличиеФотографий = Ложь;
	КонецЕсли; 
	
	Если НЕ УчетНоменклатурыПоставщиков И Объект.ВыгружатьОстатокПоставщиков Тогда
		Объект.ВыгружатьОстатокПоставщиков = Ложь;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнтеграцияСИнтернетМагазином" Тогда
		ОбновитьДанныеПослеОбмена();
	ИначеЕсли ИмяСобытия = "ЛогНастройкиИзменены" Тогда
		ФормаЛогВидимостьОбновитьСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовЭлементовФормы

&НаКлиенте
Процедура ИнтеграцииКартинкаНажатие(Элемент)
	ПоказатьСтраницуИнтеграции();
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцииНадписьНажатие(Элемент)
	ПоказатьСтраницуИнтеграции();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДоставкуПриИзменении(Элемент)
	
	ОбновитьОтображениеНаКлиенте();
	
	Если Не Объект.ИспользоватьДоставку Тогда
		Объект.СоответствиеСлужбДоставки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОперациюВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтотОбъект.Прочитать();
	ОбновитьДанныеНаСервере();
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменТолькоИзменения(Команда)
	ЗапуститьОперациюВФоне();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКартинкаНажатие(Элемент)
	ПоказатьСтраницуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНадписьНажатие(Элемент)
	ПоказатьСтраницуТовары();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКартинкаНажатие(Элемент)
	ПоказатьСтраницуЗаказы();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНадписьНажатие(Элемент)
	ПоказатьСтраницуЗаказы();
КонецПроцедуры

&НаКлиенте
Процедура СтатусыЗаказаКартинкаНажатие(Элемент)
	ПоказатьСтраницуСтатусыЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура СтатусыЗаказаНадписьНажатие(Элемент)
	ПоказатьСтраницуСтатусыЗаказа();
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаКартинкаНажатие(Элемент)
	ПоказатьСтраницуДоставка();
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаНадписьНажатие(Элемент)
	ПоказатьСтраницуДоставка();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартинкаНажатие(Элемент)
	ПоказатьСтраницуОплата();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНадписьНажатие(Элемент)
	ПоказатьСтраницуОплата();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноНадписьНажатие(Элемент)
	ПоказатьСтраницуДополнительно();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноКартинкаНажатие(Элемент)
	ПоказатьСтраницуДополнительно();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьНаУслугиКартинкаНажатие(Элемент)
	ПоказатьСтраницуЗаписьНаУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьНаУслугиНадписьНажатие(Элемент)
	ПоказатьСтраницуЗаписьНаУслуги();
КонецПроцедуры 

&НаКлиенте
Процедура ПриветствиеКартинкаНажатие(Элемент)
	ПоказатьСтраницуПриветствие();
КонецПроцедуры

&НаКлиенте
Процедура ПриветствиеНадписьНажатие(Элемент)
	ПоказатьСтраницуПриветствие();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаТоваровНадписьНажатие(Элемент)
	ЗагрузитьТоварыИнтернетМагазинаНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаТоваровКартинкаНажатие(Элемент)
	ЗагрузитьТоварыИнтернетМагазинаНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НачатьНастройку(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",1);
	Элементы.КнопкаНачатьНастройку.КнопкаПоУмолчанию = Ложь;
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад4(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	
	Если РазделУслугиДоступен Тогда
		
		ДобавитьНастройкуНаКлиенте("Дополнительно",2);
		ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",1);
		ДобавитьНастройкуНаКлиенте("Товары",0);
		
	Иначе
		
		ДобавитьНастройкуНаКлиенте("Дополнительно",1);
		ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
		ДобавитьНастройкуНаКлиенте("Товары",0);
	КонецЕсли;
	
	ДобавитьНастройкуНаКлиенте("Товары",0);
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее4(Команда)
	
	Отказ = Ложь;
	
	Если Объект.ОбменТоварами Тогда
		
		Если НЕ ЗначениеЗаполнено(ТаблицаКаталогов) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните таблицу каталогов",, "ТаблицаКаталогов", "Объект", Отказ);
		КонецЕсли;

		Если Объект.ОбменТоварами И СписокВидовЦен.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбраны виды цен.",, "ВыбратьВидыЦенНоменклатуры", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",1);
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад5(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",1);
	ДобавитьНастройкуНаКлиенте("Заказы",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее5(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",1);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад6(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",1);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее6(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",1);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад7(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",1);
	ДобавитьНастройкуНаКлиенте("Доставка",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее7(Команда)
	
	Отказ = Ложь;
	
	Если Объект.СоответствиеСлужбДоставки.Количество() Тогда
		
		Для Каждого Стр Из Объект.СоответствиеСлужбДоставки Цикл
			Если Стр.СпособДоставки <> ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз")
				И НЕ ЗначениеЗаполнено(Стр.СлужбаДоставки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните колонку ""Служба доставки"" в таблице.",,"СоответствиеСлужбДоставки","Объект", Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",2);
	ДобавитьНастройкуНаКлиенте("Оплата",1);
	
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад8(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",1);
	ДобавитьНастройкуНаКлиенте("Оплата",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее8(Команда)
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",2);
	ДобавитьНастройкуНаКлиенте("Оплата",2);

	ДобавитьНастройкуНаКлиенте("Интеграции", 2);
	ДобавитьНастройкуНаКлиенте("ТехническомуСпециалисту", 2);
	
	ОбновитьОтображениеНаКлиенте();
	ПоказатьСтраницуИнтеграции();

КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад9(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",2);
	ДобавитьНастройкуНаКлиенте("Оплата",1);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее9(Команда)
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",2);
	ДобавитьНастройкуНаКлиенте("Заказы",2);
	ДобавитьНастройкуНаКлиенте("СтатусыЗаказа",2);
	ДобавитьНастройкуНаКлиенте("Доставка",2);
	ДобавитьНастройкуНаКлиенте("Оплата",2);
	ДобавитьНастройкуНаКлиенте("Интеграции", 2);
	ДобавитьНастройкуНаКлиенте("ТехническомуСпециалисту", 2);
	
	ОбновитьОтображениеНаКлиенте();
	ПоказатьСтраницуИнтеграции();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад2(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",1);
	ДобавитьНастройкуНаКлиенте("Дополнительно",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее2(Команда)
	
	Отказ = Ложь;
	
	Если Объект.ВыгружатьНаСайт Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.АдресСайта) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Адрес сайта""",, "АдресСайта", "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Логин) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Логин""",, "Логин", "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Пароль) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Пароль""",, "Пароль", "Объект", Отказ);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.КаталогВыгрузки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Каталог выгрузки""",,"КаталогВыгрузки","Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Файл загрузки заказов""",,"ФайлЗагрузки","Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	НастройкиЗаписьНаУслугиИнтернетМагазина.Параметры.УстановитьЗначениеПараметра("НастройкаИнтеграции", Объект.Ссылка);
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	
	Если РазделУслугиДоступен Тогда
		ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги", 1);
	Иначе
		ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги", 2);
		ДобавитьНастройкуНаКлиенте("Товары", 1);
	КонецЕсли;

	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад3(Команда)
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",1);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",0);
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалее3(Команда)
	
	Отказ = Ложь;
	
	Если Объект.ОбменЗаписьНаУслуги Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦенУслуг) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Вид цен услуг""",, "ВидЦенУслуг", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНастройкуНаКлиенте("Приветствие",2);
	ДобавитьНастройкуНаКлиенте("Дополнительно",2);
	ДобавитьНастройкуНаКлиенте("ЗаписьНаУслуги",2);
	ДобавитьНастройкуНаКлиенте("Товары",1);
	
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощьКартинкаНажатие(Элемент)
	
	ОткрытьИнструкцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощьНадписьНажатие(Элемент)
	
	ОткрытьИнструкцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОповещениеПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОповещенияКартинкаНажатие(Элемент)
	ПоказатьСтраницуОповещение();
КонецПроцедуры

&НаКлиенте
Процедура ОповещенияНадписьНажатие(Элемент)
	ПоказатьСтраницуОповещение();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстПодсказки10ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗаписьНаУслугиВКонтакте" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок" , "ЗаписьНаУслуги сообщества ВКонтакте в 1С");
		ПараметрыФормы.Вставить("ИмяМакета" , "ПодсказкаЗаписьНаУслуги");
		
		ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаПодсказки",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьИнтеграциюНаКлиенте(Команда)
	УдалитьИнтеграцию();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДанныеПослеОбмена()
	ОбновитьДанныеПослеОбменаНаСервере();
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПослеОбменаНаСервере()
	
	ЭтотОбъект.Прочитать();
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСсылкуНаСтрокуАвторизацииНаКлиенте(ЭтоСообщество = Ложь) Экспорт
	
	НастройкиУзла = Новый Структура;
	НастройкиУзла.Вставить("МагазинДляИнтеграции" , Объект.МагазинДляИнтеграции);
	НастройкиУзла.Вставить("КодПриложения" , Объект.КодПриложения);
	НастройкиУзла.Вставить("ИдентификаторГруппы" , Объект.ИдентификаторГруппы);
	
	Возврат ПолучитьСсылкуНаСтрокуАвторизацииНаСервереБезКонтекста(НастройкиУзла, ЭтоСообщество);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаСтрокуАвторизацииНаСервереБезКонтекста(НастройкиУзла, ЭтоСообщество) Экспорт
	
	Возврат ПланыОбмена.ИнтеграцияСМагазинамиСоцСетей.ПолучитьСсылкуНаСтрокуАвторизации(НастройкиУзла, ЭтоСообщество);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОтображениеВремениЗапускаНаКлиенте() Экспорт
	
	Если Объект.НастройкаЗавершена Тогда
		ОбновитьОтображениеВремениЗапускаИСтатистикуОбмена();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеВремениЗапускаИСтатистикуОбмена()

	СостояниеОбменаВыгрузкаНаСайтНомерКартинки = 4;
	СостояниеОбменаЗагрузкаССайтаНомерКартинки = 4;

	Элементы.СостояниеОбменаВыгрузкаНаСайтОшибка.Видимость = Ложь;
	Элементы.СостояниеОбменаВыгрузкаНаСайтДата.Видимость = Ложь;
	Элементы.СостояниеОбменаВыгрузкаНаСайтСтатистика.Видимость = Ложь;

	Элементы.СостояниеОбменаЗагрузкаССайтаОшибка.Видимость = Ложь;
	Элементы.СостояниеОбменаЗагрузкаССайтаДата.Видимость = Ложь;
	Элементы.СостояниеОбменаЗагрузкаССайтаСтатистика.Видимость = Ложь;
	
	ДатаПоследнегоЗапускаОбмена = Дата( "00010101" );
	ДатаПоследнегоЗапускаОбменаСтр = "--:--";
	
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияОбменовИнтернетМагазина.ДействиеПриОбмене КАК ДействиеПриОбмене,
		|	СостоянияУспешныхОбменовИнтернетМагазина.ДатаОкончания КАК ДатаУспешногоОбмена,
		|	СостоянияОбменовИнтернетМагазина.ДатаОкончания КАК ДатаОкончания,
		|	СостоянияОбменовИнтернетМагазина.РезультатВыполненияОбмена КАК РезультатВыполненияОбмена,
		|	СостоянияОбменовИнтернетМагазина.ПоследнийТекстОшибки КАК ПоследнийТекстОшибки,
		|	СостоянияУспешныхОбменовИнтернетМагазина.Данные КАК Данные
		|ИЗ
		|	РегистрСведений.СостоянияОбменовИнтернетМагазина КАК СостоянияОбменовИнтернетМагазина
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияУспешныхОбменовИнтернетМагазина КАК СостоянияУспешныхОбменовИнтернетМагазина
		|		ПО (СостоянияУспешныхОбменовИнтернетМагазина.НастройкаИнтеграции = &НастройкаИнтеграции)
		|			И (СостоянияУспешныхОбменовИнтернетМагазина.ДействиеПриОбмене = СостоянияОбменовИнтернетМагазина.ДействиеПриОбмене)
		|ГДЕ
		|	СостоянияОбменовИнтернетМагазина.НастройкаИнтеграции = &НастройкаИнтеграции";

	Запрос.УстановитьПараметр("НастройкаИнтеграции", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьОшибкиОбмена = Ложь;
	ЗапросВыборка = РезультатЗапроса.Выбрать();
	Пока ЗапросВыборка.Следующий() Цикл
	
		ДатаПоследнегоЗапускаОбмена = Макс( ЗапросВыборка.ДатаОкончания, ДатаПоследнегоЗапускаОбмена );
		ДанныеХранилище = ЗапросВыборка.Данные;
		Если ТипЗнч( ДанныеХранилище ) = Тип( "ХранилищеЗначения" ) Тогда
			Данные = ДанныеХранилище.Получить();
		Иначе
			Данные = Неопределено;
		КонецЕсли;
		
		Если ЗапросВыборка.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных Тогда
			
			Если ЗапросВыборка.ДатаУспешногоОбмена = ЗапросВыборка.ДатаОкончания 
			Или Не ЗначениеЗаполнено( ЗапросВыборка.ДатаУспешногоОбмена ) Тогда
				Элементы.СостояниеОбменаВыгрузкаНаСайтДата.Заголовок = "";
			Иначе
				Элементы.СостояниеОбменаВыгрузкаНаСайтДата.Заголовок = " ( последняя успешная выгрузка: " + ЗапросВыборка.ДатаУспешногоОбмена + " )";
				Элементы.СостояниеОбменаВыгрузкаНаСайтДата.Видимость = Истина;
			КонецЕсли;
			
			Если ЗапросВыборка.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
				СостояниеОбменаВыгрузкаНаСайтНомерКартинки = 0;
				
				СостояниеОбменаВыгрузкаНаСайтОшибкаТекст = "";
				
				ВыгруженныеТоварыИнтернетМагазинаСтатистика = 
				ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Данные, 
				"ВыгруженныеТоварыИнтернетМагазинаСтатистика", Неопределено );
				
				Если ВыгруженныеТоварыИнтернетМагазинаСтатистика <> Неопределено Тогда
					ВыгруженныеТоварыИнтернетМагазинаСтатистикаСтрокой = ВыгруженныеТоварыИнтернетМагазинаСтатистикаСтрокойПолучить( ВыгруженныеТоварыИнтернетМагазинаСтатистика );
					Элементы.СостояниеОбменаВыгрузкаНаСайтСтатистика.Видимость = Истина;
					Элементы.СостояниеОбменаВыгрузкаНаСайтСтатистика.Заголовок = ВыгруженныеТоварыИнтернетМагазинаСтатистикаСтрокой;
				КонецЕсли;
				
			Иначе
				
				Элементы.СостояниеОбменаВыгрузкаНаСайтСтатистика.Заголовок = "";
				
				СостояниеОбменаВыгрузкаНаСайтНомерКартинки = 2;
				
				Элементы.СостояниеОбменаВыгрузкаНаСайтОшибка.Видимость = Истина;
				СостояниеОбменаВыгрузкаНаСайтОшибкаТекст = ЗапросВыборка.ПоследнийТекстОшибки;
				
				ЕстьОшибкиОбмена = Истина;
			КонецЕсли;

		ИначеЕсли ЗапросВыборка.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных Тогда
            
			Если ЗапросВыборка.ДатаУспешногоОбмена = ЗапросВыборка.ДатаОкончания Тогда
				Элементы.СостояниеОбменаЗагрузкаССайтаДата.Заголовок = "";
			Иначе
				Элементы.СостояниеОбменаЗагрузкаССайтаДата.Заголовок = " ( последняя успешная загрузка: " + ЗапросВыборка.ДатаУспешногоОбмена + " )";
				Элементы.СостояниеОбменаЗагрузкаССайтаДата.Видимость = Истина;
			КонецЕсли;

			Если ЗапросВыборка.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
				СостояниеОбменаЗагрузкаССайтаНомерКартинки = 0;
				
				СостояниеОбменаЗагрузкаССайтаОшибкаТекст = "";
			Иначе
				СостояниеОбменаЗагрузкаССайтаНомерКартинки = 2;
				
				Элементы.СостояниеОбменаЗагрузкаССайтаОшибка.Видимость = Истина;
				СостояниеОбменаЗагрузкаССайтаОшибкаТекст = ЗапросВыборка.ПоследнийТекстОшибки;
				
				ЕстьОшибкиОбмена = Истина;
			КонецЕсли;

			ЗаказыСтатистика = 
			ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Данные, 
			"ЗаказыСтатистика", Неопределено );
			
			Если ЗаказыСтатистика = Неопределено Тогда
				Элементы.СостояниеОбменаЗагрузкаССайтаСтатистика.Заголовок = "";
			Иначе
				ЗаказыСтатистикаСтрокой = ЗаказыСтатистикаСтрокойПолучить( ЗаказыСтатистика );
				Элементы.СостояниеОбменаЗагрузкаССайтаСтатистика.Видимость = Истина;
				Элементы.СостояниеОбменаЗагрузкаССайтаСтатистика.Заголовок = ЗаказыСтатистикаСтрокой;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено( ДатаПоследнегоЗапускаОбмена ) Тогда
		ДатаПоследнегоЗапускаОбменаСтр = "" + ДатаПоследнегоЗапускаОбмена;
	КонецЕсли;
	
	ТекстПоследнегоЗапуска = Новый ФорматированнаяСтрока( ДатаПоследнегоЗапускаОбменаСтр, ШрифтыСтиля.ВажнаяНадписьШрифт );
	ТекстПоследнегоЗапуска = Новый ФорматированнаяСтрока( "Последний запуск синхронизации: ", ТекстПоследнегоЗапуска );
	
	Элементы.ДекорацияДатаПоследнегоЗапуска.Заголовок = ТекстПоследнегоЗапуска;
	
	ЭтаФорма.ВкладкаОбслуживаниеВниманиеЗначения.Вставить( "ЕстьОшибкиОбмена", ЕстьОшибкиОбмена );
	ФормаВкладкаОбслуживаниеВниманиеУстановитьСервер();
	
КонецПроцедуры

&НаСервере
Функция ВыгруженныеТоварыИнтернетМагазинаСтатистикаСтрокойПолучить( ВыгруженныеТоварыИнтернетМагазинаСтатистика )
	Стр = "";
	Если ТипЗнч( ВыгруженныеТоварыИнтернетМагазинаСтатистика ) <> Тип( "Соответствие" ) Тогда
		Возврат Стр;
	КонецЕсли;
	
	Для Каждого КаталогЭлемент Из ВыгруженныеТоварыИнтернетМагазинаСтатистика Цикл
	    
	    Если ТипЗнч( КаталогЭлемент.Значение ) <> Тип( "Соответствие" ) Тогда
	    	Продолжить;
	    КонецЕсли;
	    
		Если СтрДлина( Стр ) > 0 Тогда
			Стр = Стр + Символы.ПС;
		КонецЕсли;
		
		Значения = КаталогЭлемент.Значение;
		
		Стр = Стр + Значения.Получить( "КаталогНаименование" ) + ":";
		
		Добавлено = Значения.Получить( Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ТоварДобавить );
		Если Добавлено = Неопределено Тогда
			Добавлено = 0;
		КонецЕсли;

		Изменено = Значения.Получить( Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ТоварИзменить );
		Если Изменено = Неопределено Тогда
			Изменено = 0;
		КонецЕсли;

		Удалено = Значения.Получить( Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ТоварУдалить );
		Если Удалено = Неопределено Тогда
			Удалено = 0;
		КонецЕсли;
		
		Стр = Стр + " добавлено " + Добавлено + ", изменено " + Изменено + ", удалено " + Удалено + ".";
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

&НаСервере
Функция ЗаказыСтатистикаСтрокойПолучить( ЗаказыСтатистика )

	Стр = "";
	Если ТипЗнч( ЗаказыСтатистика ) <> Тип( "Структура" ) Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПолученоЗаказов = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( ЗаказыСтатистика, "ОбработаноНаЗагрузке", 0 );
	ПолученоОплат = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( ЗаказыСтатистика, "ОбработаноНаЗагрузкеОплат", 0 );
	Стр = Стр + "Получено заказов " + ПолученоЗаказов + ", получено оплат " + ПолученоОплат + ".";
	
	Возврат Стр;
КонецФункции

&НаСервере
Процедура ДобавитьНастройкуНаНаСервере(ИмяСтраницы, Статус = 0)
	
	МассивСтрок = Объект.СостояниеНастроек.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
	
	Если МассивСтрок.количество() Тогда
		ТекНастройка = МассивСтрок[0];
	Иначе
		ТекНастройка = Объект.СостояниеНастроек.Добавить();
	КонецЕсли;
	
	ТекНастройка.ИмяСтраницы = ИмяСтраницы;
	ТекНастройка.Статус = Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНастройкуНаКлиенте(ИмяСтраницы, Статус = 0)
	
	МассивСтрок = Объект.СостояниеНастроек.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
	
	Если МассивСтрок.количество() Тогда
		ТекНастройка = МассивСтрок[0];
	Иначе
		ТекНастройка = Объект.СостояниеНастроек.Добавить();
	КонецЕсли;
	
	ТекНастройка.ИмяСтраницы = ИмяСтраницы;
	ТекНастройка.Статус = Статус;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользоватьВидыЗаказовПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей");
	УчетПоНесколькимПодразделениям = ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям");
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ИспользоватьГруппыДоступаКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаКонтрагентов");
	
	СписокСкладов.ЗагрузитьЗначения(Объект.СтруктурныеЕдиницы.Выгрузить(,"СтруктурнаяЕдиница").ВыгрузитьКолонку("СтруктурнаяЕдиница"));
	
	ОбновитьОтображениеВремениЗапускаИСтатистикуОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеНаСервере()

	ЭтаФорма.Заголовок = "Интеграция с интернет-магазином: " + ?( ПустаяСтрока( Объект.Наименование ), "Новая", Объект.Наименование );	
	
	Если Объект.НастройкаЗавершена Тогда
	
		ДобавитьНастройкуНаНаСервере("Интеграции", 2);
		ДобавитьНастройкуНаНаСервере("ТехническомуСпециалисту", 2);
		
		Для Каждого Стр Из Объект.СостояниеНастроек Цикл
			Элементы["СтраницыЭтапыНастройки" + Стр.ИмяСтраницы].ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы + "2"];
			Элементы["ГруппаНижнееМеню" + Стр.ИмяСтраницы].Видимость = Ложь;
		КонецЦикла;
		
		Элементы.ГруппаПоздравление.Видимость = Ложь;
		Элементы.СтраницыВариантаПоздравления.Видимость = Ложь;
		Элементы.ЗагрузкаТоваровПункт.Доступность = Истина;
		Элементы.ГруппаКоманднаяПанель.Видимость = Истина;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ДобавитьНастройкуНаНаСервере("Приветствие",1);
		ДобавитьНастройкуНаНаСервере("Дополнительно");
		ДобавитьНастройкуНаНаСервере("ЗаписьНаУслуги");
		ДобавитьНастройкуНаНаСервере("Товары");
		ДобавитьНастройкуНаНаСервере("Заказы");
		ДобавитьНастройкуНаНаСервере("СтатусыЗаказа");
		ДобавитьНастройкуНаНаСервере("Доставка");
		ДобавитьНастройкуНаНаСервере("Оплата");
		ДобавитьНастройкуНаНаСервере("Интеграции");
		ДобавитьНастройкуНаНаСервере("ТехническомуСпециалисту");
		
	Иначе
		
	КонецЕсли;
	
	Элементы.ПереходURLАдминЗоны.Видимость = ЗначениеЗаполнено(Объект.ИдентификаторСайта1СUMI); 
	Элементы.ВариантВыгрузкиФайловОбмена.Видимость = Не РазделениеВключено;
	Элементы.ГруппаДиагностикаТовараОтбор.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакПоПунктуНаКлиенте(ИмяПункта)
	
	Для Каждого Стр Из Объект.СостояниеНастроек Цикл

		Если Стр.Статус = 2 Тогда
			СтатусДляОтображения = "0";
		Иначе
			СтатусДляОтображения = Стр.Статус;
		КонецЕсли;
	
		Элементы["СтраницыЭтапыНастройки" + Стр.ИмяСтраницы].ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы + СтатусДляОтображения];
		Элементы["" + Стр.ИмяСтраницы + "Надпись"].Шрифт = Новый Шрифт();
	КонецЦикла;
	
	Элементы["СтраницыЭтапыНастройки" + ИмяПункта].ТекущаяСтраница = Элементы["Страница" + ИмяПункта + "1"];
	
	Элементы["" + ИмяПункта + "Надпись"].Шрифт = Новый Шрифт("Arial",8,Истина);
	
	Элементы.СтраницыПунктыМеню.ТекущаяСтраница = Элементы["Страница" + ИмяПункта];
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеНаКлиенте()
	
	ВариантВыгрузкиФайловОбмена = ?(Объект.ВыгружатьНаСайт, 1, 0);
	
	Элементы.ВариантВыгрузкиФайловОбмена.Видимость = Не РазделениеВключено;
	
	Элементы.СтраницыВариантыВыгрузки.ТекущаяСтраница =
	?(Объект.ВыгружатьНаСайт, Элементы.СтраницаВариантВыгрузкиНаСайт, Элементы.СтраницаВариантВыгрузкиВКаталогНаДиске);
	
	Элементы.СтраницыЗаписьНаУслугиВыбор.ТекущаяСтраница =
	?(Объект.ОбменЗаписьНаУслуги, Элементы.СтраницаЗаписьНаУслугиИспользовать, Элементы.СтраницаЗаписьНаУслугиНеИспользовать);
	
	//Элементы.СтраницыОбменЗаказами.ТекущаяСтраница =
	//?(Объект.ОбменЗаказами, Элементы.СтраницаОбменЗаказамиИспользовать, Элементы.СтраницаОбменЗаказамиНеИспользовать);
	Элементы.СтраницаОбменЗаказамиИспользовать.Видимость = Объект.ОбменЗаказами;
	Элементы.ГруппаВыгружатьЗаказыНаСайт.Видимость = Объект.ВыгружатьЗаказыНаСайт;
	
	
	Элементы.СтраницыВыгружатьИзмененияНоменклатуры.ТекущаяСтраница =
	?(Объект.ОбменТоварами, Элементы.СтраницаВыгружатьИзмененияНоменклатурыИспользовать, Элементы.СтраницаВыгружатьИзмененияНоменклатурыНеИспользовать);
	
	Элементы.СтраницыОбменТоварами.ТекущаяСтраница =
	?(Объект.ОбменТоварами, Элементы.СтраницаОбменТоварамиИспользовать, Элементы.СтраницаОбменТоварамиНеИспользовать);
	
	Элементы.СтраницыСтатусыЗаказа.ТекущаяСтраница =
	?(Объект.ОбмениватьсяСтатусамиЗаказа, Элементы.СтраницаСтатусыЗаказаИспользовать, Элементы.СтраницаСтатусыЗаказаНеИспользовать);
	
	Элементы.СтраницыДоставка.ТекущаяСтраница =
	?(Объект.ИспользоватьДоставку, Элементы.СтраницаДоставкаИспользовать, Элементы.СтраницаДоставкаНеИспользовать);
	
	Элементы.СтраницыОплата.ТекущаяСтраница =
	?(Объект.ПодчиненныеДокументы, Элементы.СтраницаОплатаИспользовать, Элементы.СтраницаОплатаНеИспользовать);
	
	Элементы.СтраницыОповещения.ТекущаяСтраница =
	?(Объект.ИспользоватьОповещения, Элементы.СтраницаОповещенияИспользовать, Элементы.СтраницаОповещенияНеИспользовать);

	Элементы.СтраницаОповещенияИспользовать.Видимость = Объект.ИспользоватьОповещения;
	Элементы.СтраницаОповещенияНеИспользовать.Видимость = Не Объект.ИспользоватьОповещения;
	
	Элементы.СтраницыНастройкиПоискаКонтрагентов.ТекущаяСтраница =
	?(Объект.СпособИдентификацииКонтрагентов = ПредопределенноеЗначение("Перечисление.СпособыИдентификацииКонтрагентов.СоздаватьИскатьПоТелефонуEmail")
	, Элементы.СтраницаНастройкиПоискаКонтрагентовИспользовать
	, Элементы.СтраницаНастройкиПоискаКонтрагентовНеИспользовать);
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		
		ЕстьПереходПоСтранице = Ложь;
		Для Каждого Стр Из Объект.СостояниеНастроек Цикл
			
			Элементы["СтраницыЭтапыНастройки" + Стр.ИмяСтраницы].ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы + Стр.Статус];
			
			Если Стр.Статус = 1 Тогда
				ЕстьПереходПоСтранице = Истина;
				Элементы.СтраницыПунктыМеню.ТекущаяСтраница = Элементы["Страница" + Стр.ИмяСтраницы];
				Элементы["" + Стр.ИмяСтраницы + "Надпись"].Шрифт = Новый Шрифт("Arial",8,Истина);
			Иначе
				Элементы["" + Стр.ИмяСтраницы + "Надпись"].Шрифт = Новый Шрифт;
			КонецЕсли;
			
			Элементы["" + Стр.ИмяСтраницы + "Пункт"].Доступность = (Стр.Статус <> 0);
			
		КонецЦикла;
		
		Если Не ЕстьПереходПоСтранице Тогда
			Объект.НастройкаЗавершена = Истина;
			Записать();
			ОбновитьОтображениеНаСервере();
			Элементы.ГруппаПоздравление.Видимость = Истина;
			Элементы.СтраницыВариантаПоздравления.Видимость = Истина;
			Элементы.СтраницыВариантаПоздравления.ТекущаяСтраница = Элементы.СтраницаПоздравлениеПочтиВсе;
		КонецЕсли;
	КонецЕсли;

	Если Объект.НастройкаЗавершена Тогда
		Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	ПроверитьОткрытьФормуПодтверждения();
	
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
	
	ОбновитьОтображениеНаКлиентеТипБулевоЗначенияДляВыгрузкиПредставление();
	
	ФормаЛогВидимостьОбновитьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОткрытьФормуПодтверждения() Экспорт
	
	Если ТребуетсяРучноеПодтверждение Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтрокаURL", СтрокаURL);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьОтображениеНаКлиентеЗавершение", ЭтаФорма);
		
		ОткрытьФорму("ПланОбмена.ИнтеграцияСМагазинамиСоцСетей.Форма.ФормаПодтверждения", ПараметрыФормы, ЭтаФорма
		,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИнтернетМагазинаНаКлиенте()
	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСайта" , Объект.АдресСайта);
	ПараметрыФормы.Вставить("Логин" , Объект.Логин);
	ПараметрыФормы.Вставить("Пароль" , Объект.Пароль);
	ПараметрыФормы.Вставить("ТипСайта" , Объект.ТипСайта);
	ПараметрыФормы.Вставить("ОсновнаяОрганизация" , Объект.ОрганизацияДляПодстановкиВЗаказы);
	ПараметрыФормы.Вставить("НастройкаИнтеграции" , Объект.Ссылка);
	ПараметрыФормы.Вставить("ЭтоЗагрузка" , Истина);
	
	ОткрытьФорму("Обработка.ЗагрузитьДанныеСайта.Форма.Форма", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОперациюВФоне(ПолныйОбмен = Ложь)
	
	Если ЭтаФорма.Модифицированность = Истина Тогда
		Записать();
	КонецЕсли;
	
	ВыгружатьТолькоИзменения = НЕ (Объект.ВыполнятьПолнуюВыгрузкуПринудительно Или ПолныйОбмен);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаИнтеграции", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВыгружатьТолькоИзменения", ВыгружатьТолькоИзменения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьОперациюВФонеЗавершение", ЭтаФорма);

	ОткрытьФорму("Справочник.НастройкиИнтеграцииСИнтернетМагазином.Форма.ФормаВыполнениеОбмена", ПараметрыФормы,
	ЭтаФорма, Объект.Ссылка,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуТовары()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуЗаказы()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Заказы");
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьСтраницуСтатусыЗаказа()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("СтатусыЗаказа");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуДоставка()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Доставка");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуОплата()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Оплата");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуИнтеграции()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Интеграции");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуДополнительно() 
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Дополнительно");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуЗаписьНаУслуги()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("ЗаписьНаУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуПриветствие()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("Приветствие");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуОповещение()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуТехническомуСпециалисту()
	
	Если НЕ Объект.НастройкаЗавершена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПризнакПоПунктуНаКлиенте("ТехническомуСпециалисту");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкцию()
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://its.1c.ru/db/metod81/content/6586");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИнтеграциюНаСервере()
	
	Объект.ПометкаУдаления = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнтеграцию()
	
	Оповещение = Новый ОписаниеОповещения("УдалитьИнтеграциюЗавершение", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Вы уверены?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОпубликоватьПодменюНажатие(Элемент)
	
	Список = Новый СписокЗначений;
	Список.Добавить("ЗарегистрироватьЦенуИКоличествоКОбмену", НСтр("ru='Зарегистрировать цену и количество к обмену'"), Ложь);
	Список.Добавить("ВыполнитьПолнуюВыгрузку", НСтр("ru='Выполнить полную выгрузку'"), Ложь);
	Список.Добавить("УдалитьЗарегистрированныеИзменения", НСтр("ru='Удалить зарегистрированные изменения'"), Ложь);
	Список.Добавить("ОткрытьФормуСобытияОбмена", НСтр("ru='События обмена в ЖР'"), Ложь);
	Список.Добавить("УдалитьИнтеграцию", НСтр("ru='Удалить интеграцию'"), Ложь);
	
	Оповещение = Новый ОписаниеОповещения("ФормаОпубликоватьПослеВыбораПодменю", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ФормаОпубликоватьПодменю);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОпубликоватьПослеВыбораПодменю(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "УдалитьИнтеграцию" Тогда
		НачатьУдалениеИнтеграции();
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ЗарегистрироватьВсеДанныеКОбмену" Тогда
		ЗарегистрироватьВсеДанныеКОбменуНаКлиенте();
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ЗарегистрироватьЦенуИКоличествоКОбмену" Тогда
		ЗарегистрироватьЦенуИКоличествоКОбменуНаКлиенте();
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "УдалитьЗарегистрированныеИзменения" Тогда
		УдалитьЗарегистрированныеИзменения();
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ОткрытьФормуОбменаСсайтом" Тогда
		ОткрытьФормуОбменаСсайтом();
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ОткрытьФормуСобытияОбмена" Тогда
		ОткрытьФормуСобытияОбмена();
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ВыполнитьПолнуюВыгрузку" Тогда
		ВыполнитьПолнуюВыгрузку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСобытияОбмена()
	
	ПараметрыФормы = Новый Структура("Данные", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнуюВыгрузку()
	
	Объект.ВыполнятьПолнуюВыгрузкуПринудительно = Истина;
	ЭтаФорма.Модифицированность = Истина;
	ЗапуститьОперациюВФоне(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУдалениеИнтеграции()
	
	Оповещение = Новый ОписаниеОповещения("УдалитьИнтеграциюЗавершение", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Удалить текущую интеграцию?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнтеграциюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьИнтеграциюНаСервере();
	Оповестить("ОбновитьИнтеграцияСИнтернетМагазином");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗарегистрированныеИзменения()
	
	УдалитьЗарегистрированныеИзмененияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбменаСсайтом()
	
	ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.Форма.ФормаСписка",,Неопределено, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗарегистрированныеИзмененияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.УзелОбменаТовары) Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Объект.УзелОбменаТовары);
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.УзелОбменаУслуги) Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Объект.УзелОбменаУслуги);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УзелОбменаЗаказы) Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(Объект.УзелОбменаЗаказы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписания(РасписаниеЗадания, ЭтоПолныйОбмен = Ложь)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеЗадания);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Расписание", РасписаниеЗадания);
	ДополнительныеПараметры.Вставить("ЭтоПолныйОбмен", ЭтоПолныйОбмен);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьНастройкуРасписанияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		ВыполнитьНастройкуРасписанияЗавершениеНаСервере(ДополнительныеПараметры.Расписание, ДополнительныеПараметры.ЭтоПолныйОбмен);
		
		Если ДополнительныеПараметры.ЭтоПолныйОбмен = Истина Тогда
			НастроитьРасписаниеРегламентногоЗаданияПолныйОбмен = ДополнительныеПараметры.Расписание;
		Иначе
			НастроитьРасписаниеРегламентногоЗадания = ДополнительныеПараметры.Расписание;
		КонецЕсли;
		
	Иначе
		ВыполнитьНастройкуРасписанияЗавершениеНаСервере(Расписание, ДополнительныеПараметры.ЭтоПолныйОбмен);
		
		Если ДополнительныеПараметры.ЭтоПолныйОбмен = Истина Тогда
			НастроитьРасписаниеРегламентногоЗаданияПолныйОбмен = Расписание;
		Иначе
			НастроитьРасписаниеРегламентногоЗадания = Расписание;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНастройкуРасписанияЗавершениеНаСервере(Расписание, ЭтоПолныйОбмен = Ложь) Экспорт
	
	Если ЭтоПолныйОбмен = Истина Тогда
	
		Если РазделениеВключено 
		И Расписание.ПериодПовтораВТечениеДня > 0 И Расписание.ПериодПовтораВТечениеДня < 7200 Тогда
			Расписание.ПериодПовтораВТечениеДня = 7200;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Минимальное время запуска фонового задания полного обмена 2 часа.");
		КонецЕсли;
		
		Объект.РасписаниеРегламентногоЗаданияПолныйОбмен = ЗначениеВСтрокуВнутр(Расписание);
		
	Иначе
		
		Если РазделениеВключено 
		И Расписание.ПериодПовтораВТечениеДня > 0 И Расписание.ПериодПовтораВТечениеДня < 300 Тогда
			Расписание.ПериодПовтораВТечениеДня = 300;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Минимальное время запуска фонового задания 5 минут.");
		КонецЕсли;
		
		Объект.РасписаниеРегламентногоЗадания = ЗначениеВСтрокуВнутр(Расписание);
		
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область БольшеВозможностей

&НаКлиенте
Процедура ПредложитьВозможностьНажатие(Элемент)
	
	ТекстДляПисьма = НСтр("ru = 'Опишите, каких возможностей вам не хватает для ""Интеграция с Интернет магазинами"":'");
	Тег = НСтр("ru = 'Интеграция с Интернет магазинами'");
	
	УправлениеНебольшойФирмойКлиент.ПредложитьВозможностьНажатие(Тег, ТекстДляПисьма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйМагазин(Команда)
	
	ОткрытьФорму("Справочник.НастройкиИнтеграцииСИнтернетМагазином.Форма.ФормаНастройкиСайт",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьВсеДанныеКОбменуНаСервере()
	
	Если ЭтаФорма.Модифицированность = Истина Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УзелОбменаТовары) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураКаталогаИнтернетМагазина.Номенклатура КАК СсылкаДанные
		|ИЗ
		|	РегистрСведений.СтруктураКаталогаИнтернетМагазина КАК СтруктураКаталогаИнтернетМагазина
		|ГДЕ
		|	СтруктураКаталогаИнтернетМагазина.НастройкаИнтеграции = &НастройкаИнтеграции
		|	И СтруктураКаталогаИнтернетМагазина.Номенклатура <> ЗНАЧЕНИЕ(справочник.номенклатура.Пустаяссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтруктураКаталогаИнтернетМагазина.Номенклатура";
		
		Запрос.УстановитьПараметр("НастройкаИнтеграции", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(Объект.УзелОбменаТовары, ВыборкаДетальныеЗаписи.СсылкаДанные);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВсеДанныеКОбмену(Команда)
	ЗарегистрироватьВсеДанныеКОбменуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьЦенуИКоличествоКОбмену(Команда)
	ЗарегистрироватьЦенуИКоличествоКОбменуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВсеДанныеКОбменуНаКлиенте()
	Объект.ВыполнятьПолнуюВыгрузкуПринудительно = Истина;
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьЦенуИКоличествоКОбменуНаКлиенте()
	ЗарегистрироватьВсеДанныеКОбменуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстПодсказки14ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗагрузитьТоварыИнтернетМагазинаНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстПодсказки14Нажатие(Элемент)
	ЗагрузитьТоварыИнтернетМагазинаНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СписокСкладовПриИзменении(Элемент)
	
	Объект.СтруктурныеЕдиницы.Очистить();
	Для Каждого Стр Из СписокСкладов Цикл
		Если ЗначениеЗаполнено(Стр.Значение) Тогда
			НовСтр = Объект.СтруктурныеЕдиницы.Добавить();
			НовСтр.СтруктурнаяЕдиница = Стр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкладовОчистка(Элемент, СтандартнаяОбработка)
	Объект.СтруктурныеЕдиницы.Очистить();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВариантВыгрузкиФайловОбменаПриИзменении(Элемент)
	
	Объект.ВыгружатьНаСайт = (ВариантВыгрузкиФайловОбмена = 1);
	Объект.ИспользоватьОптимизированныйОбменКартинок = Объект.ВыгружатьНаСайт;
	
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	
	Записать();
	
	Результат = ПроверитьСоединениеНаСервереБезКонтекста(Объект.Ссылка);
	
	ПоказатьПредупреждение(,Результат.Текст);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСоединениеНаСервереБезКонтекста(НастройкаИнтеграции)
	
	Возврат ИнтеграцияСИнтернетМагазиномСервер.ВыполнитьТестовоеПодключениеКСайту(НастройкаИнтеграции);
	
КонецФункции

// Процедура - обработчик события НачалоВыбора поля ввода КаталогВыгрузки.
//
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		ОтветОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершить", ЭтотОбъект);
		ЗадатьВопросУстановкиРасширения(ОтветОповещения);
		
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог обмена'");
	Диалог.Каталог = Объект.КаталогВыгрузки;
	
	Диалог.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.КаталогВыгрузки = Диалог.Каталог;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ФайлЗагрузки.
//
&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ФайлЗагрузкиНачалоВыбораЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбораЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
		Возврат;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.Заголовок = НСтр("ru = 'Выберите xml-файл с заказами'");
	Диалог.ПолноеИмяФайла = Объект.ФайлЗагрузки;
	Диалог.Фильтр = НСтр("ru = 'Документ XML'") + " (*.xml)|*.xml";
	
	Диалог.Показать(Новый ОписаниеОповещения("ФайлЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		Объект.ФайлЗагрузки = Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросУстановкиРасширения(ОповещениеВопроса)
	
	ТекстВопроса= НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами.
	|Установить расширение работы с файлами ?'");
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеВопроса", ОповещениеВопроса);
	
	ОтветОповещения = Новый ОписаниеОповещения("ВопросУстановитьРасширениеЗавершить", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОтветОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУстановитьРасширениеЗавершить(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		УстановитьРасширениеОповещение = ДополнительныеПараметры.ОповещениеВопроса;
		
		НачатьУстановкуРасширенияРаботыСФайлами(УстановитьРасширениеОповещение);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаписьНаУслуги

&НаКлиенте
Процедура ОбменЗаписьНаУслугиПриИзменении(Элемент)
	
	НастройкиЗаписьНаУслугиИнтернетМагазина.Параметры.УстановитьЗначениеПараметра("НастройкаИнтеграции", Объект.Ссылка);
	
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьВидыЦенУслуг(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьВидыЦенУслугЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦенУслугЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено И ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.ВидыЦен") Тогда
		Объект.ВидЦенУслуг = РезультатВыбора;
		Элементы.ВыбратьВидЦенУслуг.Заголовок = СтрШаблон(НСтр("ru = 'Вид цен: %1'"), РезультатВыбора);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиУслугВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактирования(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактирования(ТекСтрока = Неопределено)
	
	ПараметрыФормы = Новый Структура("ИсточникЗаписи, НастройкаИнтеграции", 
	ПредопределенноеЗначение("Перечисление.ЗаписьНаУслугиИсточник.Сайт"),
	Объект.Ссылка);
	
	Если ТекСтрока <> Неопределено И ТекСтрока.РодительскаяГруппировкаСтроки = Неопределено Тогда
		ПараметрыФормы.Вставить("Услуга", ТекСтрока.Услуга);
	ИначеЕсли ТекСтрока <> Неопределено Тогда
		ПараметрыФормы.Вставить("Услуга", ТекСтрока.РодительскаяГруппировкаСтроки.Ключ);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФормаРедактированияОбработкаВыбора", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиЗаписьНаУслугиИнтернетМагазина.Форма.ФормаРедактирования", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаРедактированияОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.НастройкиЗаписьНаУслугиИнтернетМагазина.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменЗаказамиПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПодчиненныеДокументыПриИзменении(Элемент)
	
	ОбновитьОтображениеНаКлиенте();
	
	Если Не Объект.ПодчиненныеДокументы Тогда
		Объект.СоответствиеВидовОплат.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособИдентификацииКонтрагентовПриИзменении(Элемент)
	
	ОбновитьОтображениеНаКлиенте();
	
	Если Объект.НастройкиПоискаКонтрагентов = "" Тогда
		СпособИдентификацииКонтрагентовПриИзмененииНаСервереБезКонтекста(Объект.НастройкиПоискаКонтрагентов, НастройкиПоискаКонтрагентовПредставление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СпособИдентификацииКонтрагентовПриИзмененииНаСервереБезКонтекста(НастройкиПоискаКонтрагентов, НастройкиПоискаКонтрагентовПредставление)
	
	Если НастройкиПоискаКонтрагентов = "" Тогда
		НастройкиПоискаКонтрагентов = ИнтеграцияСИнтернетМагазиномСервер.ЗаписьJSONВСтруктуру(ИнтеграцияСИнтернетМагазиномСервер.ПоляПоискаКонтрагентовПоУмолчанию(Истина));
		НастройкиПоискаКонтрагентовПредставление = ПоискКонтрагентовПредставление(ИнтеграцияСИнтернетМагазиномСервер.ЧтениеJSONВСтруктуру(НастройкиПоискаКонтрагентов));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиПоискаКонтрагентов(НастройкиПоискаКонтрагентов)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ШаблонНастройкиПоискаКонтрагентов", ИнтеграцияСИнтернетМагазиномСервер.ПоляПоискаКонтрагентов());
	Результат.Вставить("НастройкиПоиска", ИнтеграцияСИнтернетМагазиномСервер.ЧтениеJSONВСтруктуру(НастройкиПоискаКонтрагентов));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НастройкиПоискаКонтрагентовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ПолучитьНастройкиПоискаКонтрагентов(Объект.НастройкиПоискаКонтрагентов);
	
	ШаблонНастройкиПоискаКонтрагентов = Результат.ШаблонНастройкиПоискаКонтрагентов;
	НастройкиПоиска = Результат.НастройкиПоиска;
	
	Для Каждого стр Из ШаблонНастройкиПоискаКонтрагентов Цикл
		
		ИмяПоляПоиска = стр.Получить("Значение");
		СохраненныеНастройки = НастройкиПоиска.Получить(ИмяПоляПоиска);
		Если СохраненныеНастройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого сохраненноеЗначение Из СохраненныеНастройки Цикл
			
			Если стр.Получить(сохраненноеЗначение.Ключ) <> Неопределено Тогда
				
				стр.Вставить(сохраненноеЗначение.Ключ, сохраненноеЗначение.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если НастройкиПоиска.Получить("ВариантПоиска")<>Неопределено Тогда
		ВариантПоиска = НастройкиПоиска.Получить("ВариантПоиска");
	Иначе
		ВариантПоиска = 0;
	КонецЕсли;
	
	СоответствиеНастроек = Новый Структура("НастройкиПоиска", ШаблонНастройкиПоискаКонтрагентов);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастройкиПоискаСоответствие", СоответствиеНастроек);
	ПараметрыОткрытия.Вставить("ВариантПоиска", ВариантПоиска);
	ПараметрыОткрытия.Вставить("ЗаголовокФормы", НСтр("ru = 'Настройки сопоставления контрагентов при загрузке с сайта'"));
	ПараметрыОткрытия.Вставить("ЗаголовокПоляПоиска", НСтр("ru = 'Данные сайта для поиска покупателя в 1С'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиПоискаПоКонтактнойИнформацииЗакрытие", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиПоискаПоКонтактнойИнформации", ПараметрыОткрытия, ЭтотОбъект
	,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаписьНаУслугу(Команда)
	
	ОткрытьФормуРедактирования();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписьНаУслугу(Команда)
	
	ТекДанные = Элементы.НастройкиЗаписьНаУслугиИнтернетМагазина.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекДанные, "Услуга") Тогда
		ТекУслуга = ТекДанные.Услуга;
	Иначе
		ТекУслуга = ТекДанные.РодительскаяГруппировкаСтроки.Ключ;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("УдалитьЗаписьНаУслугуЗавершение", ЭтотОбъект, ТекУслуга);
	ПоказатьВопрос(ОповещениеОЗакрытии, СтрШаблон(НСтр("ru = 'Удалить настройки для услуги ""%1""?'"),ТекУслуга), РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьУслугуНаСервереБезКонтекста(Услуга, НастройкаИнтеграции)
	
	НЗ = РегистрыСведений.НастройкиЗаписьНаУслугиИнтернетМагазина.СоздатьНаборЗаписей();
	НЗ.Отбор.ИсточникЗаписи.Установить(Перечисления.ЗаписьНаУслугиИсточник.Сайт);
	НЗ.Отбор.НастройкаИнтеграции.Установить(НастройкаИнтеграции);
	НЗ.Отбор.Услуга.Установить(Услуга);
	НЗ.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаписьНаУслугуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		УдалитьУслугуНаСервереБезКонтекста(ДополнительныеПараметры, Объект.Ссылка);
		Элементы.НастройкиЗаписьНаУслугиИнтернетМагазина.Обновить();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкиЗаписьНаУслугиИнтернетМагазинаПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОткрытьФормуРедактирования(ТекСтрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастройкиЗаписьНаУслугиИнтернетМагазинаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого стр Из Строки Цикл
		стр.Значение.Данные.УслугаРесурс = стр.Ключ.Ресурс;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦенНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокВидовЦен", СписокВидовЦен);
	
	ОткрытьФорму("Справочник.НастройкиИнтеграцииСИнтернетМагазином.Форма.ФормаВыбораВидовЦен",ПараметрыФормы,ЭтаФорма,,,, 
	Новый ОписаниеОповещения("ВыбратьВидыЦенНоменклатурыЗавершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦенНоменклатурыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыбора) = Тип("СписокЗначений") Тогда
		
		СписокВидовЦен = РезультатВыбора;
		
		СписокВидовЦенСтрока = "";
		Для Каждого ЭлементСЗ Из СписокВидовЦен Цикл
			
			СписокВидовЦенСтрока = СписокВидовЦенСтрока + ?(СписокВидовЦенСтрока = "","","; ") + ЭлементСЗ.Представление;
			
		КонецЦикла;
		Элементы.ВыбратьВидыЦенНоменклатуры.Заголовок = СтрШаблон(НСтр("ru = 'Виды цен: %1'"), СписокВидовЦенСтрока);
		
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.ВидыЦен") Тогда
	
		СписокВидовЦен.Очистить();
		СписокВидовЦен.Добавить(РезультатВыбора, РезультатВыбора);
		Элементы.ВыбратьВидыЦенНоменклатуры.Заголовок = СтрШаблон(НСтр("ru = 'Вид цен: %1'"), РезультатВыбора);
		
	КонецЕсли;
	
	Модифицированность = Истина;

	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаписьНаУслугиИнтернетМагазинаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОткрытьФормуРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКаталоговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаКаталоговРучнаяНастройкаКаталога" Тогда
		
		ТекДанные = Элемент.ТекущиеДанные;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НастройкаИнтеграции", Объект.Ссылка);
		СтруктураПараметров.Вставить("ОтборГруппыКатегорииНоменклатуры", Объект.ОтборГруппыКатегорииНоменклатуры);
		СтруктураПараметров.Вставить("ТаблицаКаталоговГруппы", ТекДанные.Группы);
		СтруктураПараметров.Вставить("ИдентификаторКаталога", ТекДанные.ИдентификаторКаталога);
		СтруктураПараметров.Вставить("АдресНастроекСтруктурыКаталога", ТекДанные.АдресНастроекСтруктурыКаталога);
		СтруктураПараметров.Вставить("РучнаяНастройкаКаталога", ТекДанные.РучнаяНастройкаКаталога);
		СтруктураПараметров.Вставить("ТекущаяСтрокаИдентификатор", ТекДанные.ТекущаяСтрокаИдентификатор);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаСтруктурыКаталогаЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.НастройкиИнтеграцииСИнтернетМагазином.Форма.НастройкаСтруктурыКаталога", СтруктураПараметров, ЭтотОбъект,,,,ОписаниеОповещения);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаКаталоговОтборПредставление" Тогда
	
		ТекущиеДанные = Элементы.ТаблицаКаталогов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		ОткрытьФормуОтбораКаталога( ТекущиеДанные.АдресНастроекКомпоновки );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКаталоговПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьКаталогЗавершение", ЭтотОбъект), 
	НСтр("ru = 'Настройки структуры каталога и идентификатор каталога будут удалены. Продолжить?'"),
	РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Или Копирование Тогда
		Если ПустаяСтрока( Элемент.ТекущиеДанные.ОтборПредставление ) Тогда
			Элемент.ТекущиеДанные.ОтборПредставление = ТаблицаКаталоговОтборПредставлениеПоУмолчанию();
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
		Элемент.ТекущиеДанные.Каталог = "Каталог " + Формат( ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ='yyyy.MM.dd HH:mm:ss'" );
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.Группы.Количество() = 1
		И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Группы[0].Значение) 
		И Элемент.ТекущиеДанные.Группы[0].Представление = НадписьВсеЭлементыСписка)
		ИЛИ Элемент.ТекущиеДанные.Группы.Количество() = 0 Тогда
		
		НовыйСписокГрупп = Новый СписокЗначений;
		
		Если Объект.ОтборГруппыКатегорииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
			ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
			Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		
		НовыйСписокГрупп.ТипЗначения = ТипЗначений;
		НовыйСписокГрупп.Добавить(Неопределено, НадписьВсеЭлементыСписка);
		Элемент.ТекущиеДанные.Группы = НовыйСписокГрупп;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаКаталоговОтборПредставлениеПоУмолчанию()
	Возврат "Не установлен";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаКаталоговОтборПредставлениеУстановлен()
	Возврат "Установлен";
КонецФункции

&НаКлиенте
Процедура УдалитьКаталогЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Модифицированность = Истина;
		ТаблицаКаталогов.Удалить(Элементы.ТаблицаКаталогов.ТекущиеДанные);

		Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
		ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередОкончаниемРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = НЕ ПроверитьУникальностьИдентификатора();
	
КонецПроцедуры

// Процедура - обработчик события ПриОкончанииРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыбранныеГруппыСерверБезКонтекста(Элемент.ТекущиеДанные.Группы, НадписьВсеЭлементыСписка, Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов);
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторКаталога) Тогда
		Элемент.ТекущиеДанные.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.Каталог) Тогда
		Элемент.ТекущиеДанные.Каталог = НСтр("ru = 'Каталог товаров'") + " " + ВРег(СокрЛП(Лев(Элемент.ТекущиеДанные.ИдентификаторКаталога, 8)));
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьВыбранныеГруппыСерверБезКонтекста(СписокГрупп, НадписьВсеЭлементыСписка, ВыборГруппИЭлементов)
	
	ГруппыВыбраны = Ложь;
	
	Если ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
		// Удаляем не группы номенклатуры.
		МассивУдалить = Новый Массив;
		Для Каждого ЭлементСЗ Из СписокГрупп Цикл
			
			ТекГруппа = ЭлементСЗ.Значение;
			Если ЗначениеЗаполнено(ТекГруппа) И НЕ ТекГруппа.ЭтоГруппа Тогда
				МассивУдалить.Добавить(ЭлементСЗ);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекГруппа) Тогда
				ЭлементСЗ.Представление = Строка(ЭлементСЗ.Значение);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекГруппа) И НЕ ЗначениеЗаполнено(ЭлементСЗ.Представление) Тогда
				ЭлементСЗ.Представление = ОбменССайтом.НадписьНетГруппы();
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементМУ Из МассивУдалить Цикл
			СписокГрупп.Удалить(ЭлементМУ);
		КонецЦикла;
	КонецЕсли;
	
	// Удаляем дубли и подчиненные элементы.
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		Если НЕ МассивУдалить.Найти(ЭлементСЗ) = НеОпределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекГруппа = ЭлементСЗ.Значение;
		
		Для Каждого ЭлементСпискаВложенный Из СписокГрупп Цикл
			
			Если НЕ МассивУдалить.Найти(ЭлементСпискаВложенный) = НеОпределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекГруппа)
				ИЛИ НЕ ЗначениеЗаполнено(ЭлементСпискаВложенный.Значение) Тогда
				// Пропускаем элемент "Все" и "Нет группы"
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементСпискаВложенный = ЭлементСЗ
				И ЭлементСпискаВложенный.Значение = ТекГруппа Тогда
				
				МассивУдалить.Добавить(ЭлементСпискаВложенный);
				
			Иначе
				
				Если ЭлементСпискаВложенный.Значение.ПринадлежитЭлементу(ТекГруппа) Тогда
					
					МассивУдалить.Добавить(ЭлементСпискаВложенный);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементМУ Из МассивУдалить Цикл
		
		СписокГрупп.Удалить(ЭлементМУ);
		
	КонецЦикла;
	
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		Если ЗначениеЗаполнено(ЭлементСЗ.Значение) ИЛИ ЗначениеЗаполнено(ЭлементСЗ.Представление) Тогда
			
			ГруппыВыбраны = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ГруппыВыбраны Тогда
		
		СписокГрупп.Очистить();
		СписокГрупп.Добавить(Неопределено, НадписьВсеЭлементыСписка);
		
	КонецЕсли;
	
КонецПроцедуры

 &НаКлиенте
Функция ПроверитьУникальностьИдентификатора()
	
	ИдентификаторКаталога = Элементы.ТаблицаКаталогов.ТекущиеДанные.ИдентификаторКаталога;
	Найдено = ТаблицаКаталогов.НайтиСтроки(Новый Структура("ИдентификаторКаталога", ИдентификаторКаталога));
	ИдентификаторыУникальны = Найдено.Количество() = 1;
	
	Если НЕ ИдентификаторыУникальны Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Идентификатор каталога должен быть уникальным!'"),
		Объект.Ссылка,
		ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
		"ТаблицаКаталогов", ТаблицаКаталогов.Индекс(Элементы.ТаблицаКаталогов.ТекущиеДанные) + 1, "ИдентификаторКаталога"));
		
		Элементы.ТаблицаКаталогов.ТекущиеДанные.ИдентификаторКаталога = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	Возврат ИдентификаторыУникальны;
	
КонецФункции

// Процедура - обработчик команды НастроитьОтбор.
//
&НаКлиенте
Процедура НастроитьОтбор(Команда)
	
	Если Элементы.ТаблицаКаталогов.ТекущиеДанные = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуОтбораКаталога(Элементы.ТаблицаКаталогов.ТекущиеДанные.АдресНастроекКомпоновки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборГруппыКатегорииНоменклатурыПриИзменении(Элемент)

	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
	
	Если ТаблицаКаталогов.Количество()>0 Тогда
		ТаблицаКаталогов.Очистить();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УстановитьПараметрыТаблицыКаталоговКлиент", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыТаблицыКаталоговКлиент()
	
	ЗаголовокТаблицы = НСтр("ru = 'Таблица каталогов (соответствие групп номенклатуры каталогам на сайте)'");
	Если Объект.ОтборГруппыКатегорииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		ЗаголовокКолонки = НСтр("ru = 'Группы номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		ЗаголовокКолонки = НСтр("ru = 'Категории номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	КонецЕсли;
	
	Элементы.ГруппаТаблицаКаталогов.Заголовок = ЗаголовокТаблицы;
	Элементы.ТаблицаКаталоговГруппыКатегории.Заголовок = ЗаголовокКолонки;
	Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСтруктурыКаталогаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Элементы.ТаблицаКаталогов.ТекущиеДанные.РучнаяНастройкаКаталога = Результат.ДетализацияОтбора;
	Элементы.ТаблицаКаталогов.ТекущиеДанные.ТекущаяСтрокаИдентификатор = Результат.ТекущаяСтрокаИдентификатор;
	Элементы.ТаблицаКаталогов.ТекущиеДанные.АдресНастроекСтруктурыКаталога = Результат.АдресВХранилище;
	
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
	
КонецПроцедуры 

Процедура ОчиститьУдаленныеНастройкиСтруктурыКаталога()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураКаталогаИнтернетМагазина.ИдентификаторКаталога КАК ИдентификаторКаталога
	|ИЗ
	|	РегистрСведений.СтруктураКаталогаИнтернетМагазина КАК СтруктураКаталогаИнтернетМагазина
	|ГДЕ
	|	СтруктураКаталогаИнтернетМагазина.НастройкаИнтеграции = &НастройкаИнтеграции";
	Запрос.УстановитьПараметр("НастройкаИнтеграции", Объект.Ссылка);
	
	СохраненныеИдентификаторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторКаталога");
	Для Каждого Идентификатор Из СохраненныеИдентификаторы Цикл
		
		Если ТаблицаКаталогов.НайтиСтроки(Новый Структура("ИдентификаторКаталога", Идентификатор)).Количество() = 0 Тогда
			
			НЗ = РегистрыСведений.СтруктураКаталогаИнтернетМагазина.СоздатьНаборЗаписей();
			НЗ.Отбор.НастройкаИнтеграции.Установить(Объект.Ссылка);
			НЗ.Отбор.ИдентификаторКаталога.Установить(Идентификатор);
			НЗ.Записать(Истина);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьНастройкиСтруктурыКаталога(СтрокаТаблицыКаталогов)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыКаталогов.АдресНастроекСтруктурыКаталога) Тогда
		// не было изменений
		Возврат;
	КонецЕсли;
	
	НЗ = РегистрыСведений.СтруктураКаталогаИнтернетМагазина.СоздатьНаборЗаписей();
	НЗ.Отбор.НастройкаИнтеграции.Установить(Объект.Ссылка);
	НЗ.Отбор.ИдентификаторКаталога.Установить(СтрокаТаблицыКаталогов.ИдентификаторКаталога);
	
	СохраненныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекСтруктурыКаталога);
	СохраненныеДанные.ЗаполнитьЗначения(СтрокаТаблицыКаталогов.ИдентификаторКаталога, "ИдентификаторКаталога");
	СохраненныеДанные.Свернуть("НастройкаИнтеграции, ИдентификаторКаталога, Номенклатура, ГруппаКаталога, РодительИдентификатор, 
	|Идентификатор, РодительГруппа, РодительКатегория, ЭтоГруппа");
	
	НЗ.Загрузить(СохраненныеДанные);
	НЗ.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначенийСпискаГруппТаблицыКаталоговСервер()
	
	Если Объект.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Иначе
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	КонецЕсли;	
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
		СтрокаТаблицыКаталогов.Группы.ТипЗначения = ТипЗначений;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыТаблицыКаталоговСервер()
	
	ЗаголовокТаблицы = НСтр("ru = 'Таблица каталогов (соответствие групп номенклатуры каталогам на сайте)'");
	Если Объект.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
		ЗаголовокКолонки = НСтр("ru = 'Группы номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		ЗаголовокКолонки = НСтр("ru = 'Категории номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	КонецЕсли;
	
	Элементы.ГруппаТаблицаКаталогов.Заголовок = ЗаголовокТаблицы;
	Элементы.ТаблицаКаталоговГруппыКатегории.Заголовок = ЗаголовокКолонки;
	Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКаталоговСервер()
	
	НадписьВсеЭлементыСписка = ОбменССайтом.НадписьВсеГруппы();
	
	Если ЭтоПеренос И Объект.Ссылка.Пустая() Тогда
		СохраненнаяТаблицаКаталогов = Объект.УзелОбменаССайтом.СохраненнаяТаблицаКаталогов.Получить(); 
	Иначе
		СохраненнаяТаблицаКаталогов = РеквизитФормыВЗначение("Объект").СохраненнаяТаблицаКаталогов.Получить();
	КонецЕсли;
	
	Если НЕ ТипЗнч(СохраненнаяТаблицаКаталогов) = Тип("ТаблицаЗначений") Тогда
		
		СоздатьКаталогПоУмолчаниюСервер();
		
	Иначе
		
		Для Каждого СтрокаСохраненнойТаблицыКаталогов Из СохраненнаяТаблицаКаталогов Цикл
			
			НоваяСтрока = ТаблицаКаталогов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСохраненнойТаблицыКаталогов);
			
			ХранилищеНастроекКомпоновки = СтрокаСохраненнойТаблицыКаталогов.ХранилищеНастроекКомпоновки.Получить();
			НоваяСтрока.АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(ХранилищеНастроекКомпоновки, УникальныйИдентификатор);
			
			ОтборИспользуется = ИнтеграцияСИнтернетМагазиномСервер.НастройкиКомпоновкиДанныхОтборИспользуется( ХранилищеНастроекКомпоновки );
			НоваяСтрока.ОтборПредставление = 
			?( ОтборИспользуется, ТаблицаКаталоговОтборПредставлениеУстановлен(), ТаблицаКаталоговОтборПредставлениеПоУмолчанию() );
			
		КонецЦикла;
		
		Если ТаблицаКаталогов.Количество() = 0 Тогда
			
			СоздатьКаталогПоУмолчаниюСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКаталогПоУмолчаниюСервер()
	
	НоваяСтрока = ТаблицаКаталогов.Добавить();
	НоваяСтрока.Каталог = НСтр("ru = 'Основной каталог товаров'");
	НоваяСтрока.Группы.Добавить(Неопределено, НадписьВсеЭлементыСписка);
	НоваяСтрока.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	НоваяСтрока.ОтборПредставление = ТаблицаКаталоговОтборПредставлениеПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКаталоговГруппыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Группы = Элементы.ТаблицаКаталогов.ТекущиеДанные.Группы;
	
	Если Группы.Количество() = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(Группы[0].Значение) 
			И Объект.ОтборГруппыКатегорииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
			
			Группы.Очистить();
		ИначеЕсли НЕ ЗначениеЗаполнено(Группы[0].Значение) И Группы[0].Представление = НадписьВсеЭлементыСписка Тогда
			Группы.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтбораКаталога(АдресНастроекКомпоновки)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресНастроекКомпоновки", АдресНастроекКомпоновки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуОтбораКаталогаЗавершение", ЭтотОбъект);
	
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.НастройкиИнтеграцииСИнтернетМагазином.Форма.ФормаНастройкиОтбора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтбораКаталогаЗавершение(НастройкиКомпоновки, ДополнительныеПараметры) Экспорт
	
	Если НастройкиКомпоновки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКомпоновкиДанных = НастройкиКомпоновки.НастройкиКомпоновкиДанных;
	ОтборПредставление = НастройкиКомпоновки.ОтборПредставление;
	
	Модифицированность = Истина;
	АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	
	ТаблицаКаталоговТекущиеДанные = Элементы.ТаблицаКаталогов.ТекущиеДанные;
	ТаблицаКаталоговТекущиеДанные.АдресНастроекКомпоновки = АдресНастроекКомпоновки;
	
	ОтборИспользуется = Не ПустаяСтрока( ОтборПредставление );
	ТаблицаКаталоговТекущиеДанные.ОтборПредставление = 
	?( ОтборИспользуется, ТаблицаКаталоговОтборПредставлениеУстановлен(), ТаблицаКаталоговОтборПредставлениеПоУмолчанию() );
	
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
КонецПроцедуры

&НаСервере
Процедура ФормаВкладкаОбслуживаниеВниманиеУстановитьСервер()
	ВкладкаОбслуживаниеВниманиеВидимость = Ложь;
	Для Каждого Элемент Из ЭтаФорма.ВкладкаОбслуживаниеВниманиеЗначения Цикл
		Если Элемент.Значение = Истина Тогда
			ВкладкаОбслуживаниеВниманиеВидимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.ДекорацияВкладкаОбслуживаниеВнимание.Видимость = ВкладкаОбслуживаниеВниманиеВидимость;
	Элементы.ДекорацияВкладкаОбслуживаниеВниманиеПустая.Видимость = Не ВкладкаОбслуживаниеВниманиеВидимость;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен()
	Если Объект.НастройкаЗавершена = Ложь Тогда
		Объект.НеобходимоВыполнитьПолныйОбмен = Ложь;
	КонецЕсли;
	Элементы.ГруппаПолныйОбменДанными.Видимость = Объект.НеобходимоВыполнитьПолныйОбмен;

	ЭтаФорма.ВкладкаОбслуживаниеВниманиеЗначения.Вставить( "НеобходимоВыполнитьПолныйОбмен", Объект.НеобходимоВыполнитьПолныйОбмен );
	ФормаВкладкаОбслуживаниеВниманиеУстановитьСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение видов цен.
	ВидыЦен = ТекущийОбъект.ВидыЦен;
	ВидыЦен.Очистить();
	
	Для Каждого ЭлементСЗ Из СписокВидовЦен Цикл 
		
		НоваяСтрока = ВидыЦен.Добавить();
		НоваяСтрока.ВидЦен = ЭлементСЗ.Значение;
		
	КонецЦикла;
	
	Если ЭтоПеренос И Объект.Ссылка.Пустая() Тогда
		СохраненнаяТаблицаКаталогов = Объект.УзелОбменаССайтом.СохраненнаяТаблицаКаталогов.Получить();
	КонецЕсли;
	
	// Таблицы каталогов и услуг.
	ТаблицаКаталоговСохранить(ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ТаблицаКаталоговСохранить(ТекущийОбъект)
	
	ТаблицаКаталоговТЗ = ДанныеФормыВЗначение(ТаблицаКаталогов, Тип("ТаблицаЗначений"));
	ТаблицаКаталоговТЗ.Колонки.Добавить("ХранилищеНастроекКомпоновки", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталоговТЗ Цикл
		
		Если ЭтоАдресВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки) Тогда
			НастройкиКомпоновки = ПолучитьИзВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки);
			СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки = Новый ХранилищеЗначения(НастройкиКомпоновки);
		КонецЕсли;
		
		ОбновитьНастройкиСтруктурыКаталога(СтрокаТаблицыКаталогов);
	КонецЦикла;
	
	ТаблицаКаталоговТЗ.Колонки.Удалить("АдресНастроекКомпоновки");
	ТаблицаКаталоговТЗ.Колонки.Удалить("АдресНастроекСтруктурыКаталога");
	ТаблицаКаталоговТЗ.Колонки.Удалить("ОтборПредставление");
	
	ТекущийОбъект.СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталоговТЗ);
	
	ОчиститьУдаленныеНастройкиСтруктурыКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкрытьФормуРеквизитов(Команда)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкрытьФормуРеквизитовЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура();
	ЗаполнитьПараметрыФормыНаСервере(ПараметрыФормы);
	
	ОткрытьФорму("Справочник.НастройкиИнтеграцииСИнтернетМагазином.Форма.ФормаВыбораРеквизитов", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыНаСервере(ПараметрыФормы)
	
	ПараметрыФормы.Вставить("СоответствиеПолейНоменклатуры", ОбщегоНазначения.ТаблицаЗначенийВМассив(Объект.СоответствиеПолейНоменклатуры));
	ПараметрыФормы.Вставить("СоответствиеДополнительныхПолейНоменклатуры", ОбщегоНазначения.ТаблицаЗначенийВМассив(Объект.СоответствиеДополнительныхПолейНоменклатуры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОкрытьФормуРеквизитовЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СоответствиеПолейНоменклатуры.Очистить();
	Для Каждого Стр Из ВыбранныйЭлемент.СоответствиеПолейНоменклатуры Цикл
		НовСтр = Объект.СоответствиеПолейНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	
	Объект.СоответствиеДополнительныхПолейНоменклатуры.Очистить();
	Для Каждого Стр Из ВыбранныйЭлемент.СоответствиеДополнительныхПолейНоменклатуры Цикл
		НовСтр = Объект.СоответствиеДополнительныхПолейНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтатусыЗаказовССайта(Команда)
	
	ЗагрузитьСтатусыЗаказовССайтаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтатусыЗаказовССайтаНаСервере()
	
	ОписаниеОшибки = "";
	НастройкиСайта = ЗагрузитьНастройкиСайта(ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(НастройкиСайта) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить список платежных систем с сайта!'")
		+Символы.ПС + ОписаниеОшибки);
		Возврат;
	КонецЕсли; 
	
	Если НастройкиСайта.Свойство("Статусы") Тогда
		Объект.СоответствиеСтатусовЗаказов.Очистить();
		Для Каждого стр Из НастройкиСайта.Статусы Цикл
			
			НовСтр = Объект.СоответствиеСтатусовЗаказов.Добавить();
			НовСтр.ИДСтатусаЗаказаНаСайте = стр.Ид;
			НовСтр.СтатусЗаказаНаСайте = стр.Название;
			
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиСайта(ОписаниеОшибки)
	
	НастройкиСайта = Новый Структура;
	Если Объект.ТипСайта = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.Битрикс") Тогда
		СтрокаXML = ИнтеграцияСИнтернетМагазиномСервер.ЗагрузитьНастройкиБитрикс(Объект.Ссылка);
	ИначеЕсли Объект.ТипСайта = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.UMI") Тогда
		СтрокаXML = ИнтеграцияСИнтернетМагазиномСервер.ЗагрузитьНастройкиUMI(Объект.Ссылка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаXML = "" Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось подключиться к сайту!'"));
		Возврат Неопределено;
	КонецЕсли; 
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "Статусы" ИЛИ ЧтениеXML.Имя = "Cтатусы" Тогда
			// Битрикс возвращает имя узла с английской буквой "С" в слове "Статусы"
			МассивСтатусы = ПрочитатьЭлементы(ЧтениеXML, ЧтениеXML.Имя);
			НастройкиСайта.Вставить("Статусы", МассивСтатусы);
		ИначеЕсли ЧтениеXML.Имя = "ПлатежныеСистемы" Тогда
			МассивВидыОплат = ПрочитатьЭлементы(ЧтениеXML, "ПлатежныеСистемы");
			НастройкиСайта.Вставить("ПлатежныеСистемы", МассивВидыОплат);
		ИначеЕсли ЧтениеXML.Имя = "СлужбыДоставки" Тогда
			МассивСлужбыДоставки = ПрочитатьЭлементы(ЧтениеXML, "СлужбыДоставки");
			НастройкиСайта.Вставить("СлужбыДоставки", МассивСлужбыДоставки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НастройкиСайта;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСлужбыДоставкиССайтаНаСервере()
	
	ОписаниеОшибки = "";
	НастройкиСайта = ЗагрузитьНастройкиСайта(ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(НастройкиСайта) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить список служб доставки с сайта!'")
		+Символы.ПС + ОписаниеОшибки);
		Возврат;
	КонецЕсли; 
	
	Если НастройкиСайта.Свойство("СлужбыДоставки") Тогда
		Объект.СоответствиеСлужбДоставки.Очистить();
		Для Каждого стр Из НастройкиСайта.СлужбыДоставки Цикл
			
			НовСтр = Объект.СоответствиеСлужбДоставки.Добавить();
			НовСтр.ИдСлужбыДоставкиНаСайте = стр.Ид;
			НовСтр.СлужбаДоставкиНаСайте = стр.Название;
			
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСлужбыДоставкиССайта(Команда)
	ЗагрузитьСлужбыДоставкиССайтаНаСервере();
КонецПроцедуры

&НаСервере
Функция ПрочитатьЭлементы(ЧтениеXML, ИмяКорневогоУзла)
	
	МассивЗначений = Новый Массив;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = ИмяКорневогоУзла И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураЗначений = Новый Структура;
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.Имя = "Элемент" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяЭлемента = ЧтениеXML.Имя;
				ЧтениеXML.Прочитать();
				ЗначениеЭлемента = ЧтениеXML.Значение;
				
				СтруктураЗначений.Вставить(ИмяЭлемента, ЗначениеЭлемента);
			КонецЕсли;
			
		КонецЦикла;
		
		МассивЗначений.Добавить(СтруктураЗначений);
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьВидыОплатССайта(Команда)
	
	ЗагрузитьВидыОплатССайтаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВидыОплатССайтаНаСервере()
	
	ОписаниеОшибки = "";
	НастройкиСайта = ЗагрузитьНастройкиСайта(ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(НастройкиСайта) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить виды оплат систем с сайта!'")
		+Символы.ПС + ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Если НастройкиСайта.Свойство("ПлатежныеСистемы") Тогда
		Объект.СоответствиеВидовОплат.Очистить();
		Для Каждого стр Из НастройкиСайта.ПлатежныеСистемы Цикл
			
			НовСтр = Объект.СоответствиеВидовОплат.Добавить();
			НовСтр.ИдСпособаОплатыНаСайте = стр.Ид;
			НовСтр.СпособОплатыНаСайте = стр.Название;
			Если стр.Свойство("ТипОплаты") Тогда
				Если стр.ТипОплаты = "Безналичная оплата" Тогда
					НовСтр.ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Безналичные;
				ИначеЕсли стр.ТипОплаты = "Эквайринговая оплата" Тогда
					НовСтр.ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Эквайринг;
				ИначеЕсли стр.ТипОплаты = "Наличная оплата" Тогда
					НовСтр.ТипОплатыНаСайте = Перечисления.ТипыОплатНаСайте.Наличные;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбменТоварамиПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстПодсказки11ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.СоздатьСайт.Форма.Форма",,ЭтаФорма);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПереходURLАдминЗоныНажатие(Элемент, СтандартнаяОбработка)
	
	URLСайта = Объект.ПереходURLАдминЗоны;
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(URLСайта) Тогда
		Если НЕ Лев(URLСайта, 4) = "http" Тогда
			URLСайта = "https://" + URLСайта;
		КонецЕсли;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(URLСайта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерPostman(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", "Пример Postman");
	ПараметрыОткрытия.Вставить("КлючПодсказки", "ПомощникНастроекОбменаССайтом_postman_example");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерPHP(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", "Пример Postman");
	ПараметрыОткрытия.Вставить("КлючПодсказки", "ПомощникНастроекОбменаССайтом_PHP_example");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КакОпубликоватьВебСервис(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", "Публикация на web-сервере");
	ПараметрыОткрытия.Вставить("КлючПодсказки", "ПомощникНастроекОбменаССайтом_ОбменЧерезВебСервис");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	КодНастроек = Объект.Ссылка.УникальныйИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ТипСайтаПриИзменении(Элемент)
	
	Объект.ПротоколОбменаCMS = Объект.ТипСайта;
	
	Если Объект.ТипСайта = ПредопределенноеЗначение("Перечисление.ПротоколыОбменаCMS.UMI") Тогда
		Элементы.ОбменЗаписьНаУслуги.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ОбменЗаписьНаУслуги.ТолькоПросмотр = Истина;
		Объект.ОбменЗаписьНаУслуги = Ложь;
		Объект.ИдентификаторКаталогаУслуг = "";
		Объект.СостояниеЗаказНаряда = Неопределено;
	КонецЕсли;
	
	ОбновитьОтображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбменаСсайтомКнопка(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуОбменаСсайтомЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеОЗакрытии, НСтр("ru = 'Вы уверены?
	|После выполнения операции необходимо заново запустить периодический обмен.'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбменаСсайтомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуОбменаСсайтомНаСервере();
		ОткрытьФормуОбменаСсайтом();
		
		Оповестить("ЗакрытьФормуСпискаНастройкиИнтеграцииСИнтернетМагазином");
		
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьФормуОбменаСсайтомНаСервере()
	
	Справочники.НастройкиИнтеграцииСИнтернетМагазином.ОтключитьИнтеграцииСИнтернетМагазином();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРегламентногоЗаданияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыполнитьНастройкуРасписания(ПолучитьРасписаниеРегламентногоЗадания());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасписаниеРегламентногоЗадания()
	
	РасписаниеРегламентногоЗадания = Неопределено;
	
	Если Объект.РасписаниеРегламентногоЗадания <> "" Тогда
		Попытка
			РасписаниеРегламентногоЗадания = ЗначениеИзСтрокиВнутр(Объект.РасписаниеРегламентногоЗадания);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(РасписаниеРегламентногоЗадания) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания =
		ИнтеграцияСИнтернетМагазиномСервер.ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
	КонецЕсли;
	
	Возврат РасписаниеРегламентногоЗадания;
	
КонецФункции

&НаСервере
Функция ПолучитьРасписаниеРегламентногоЗаданияПолныйОбмен()
	
	РасписаниеРегламентногоЗаданияПолныйОбмен = Неопределено;
	
	Если Объект.РасписаниеРегламентногоЗаданияПолныйОбмен <> "" Тогда
		Попытка
			РасписаниеРегламентногоЗаданияПолныйОбмен = ЗначениеИзСтрокиВнутр(Объект.РасписаниеРегламентногоЗаданияПолныйОбмен);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(РасписаниеРегламентногоЗаданияПолныйОбмен) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗаданияПолныйОбмен =
		ИнтеграцияСИнтернетМагазиномСервер.ПолучитьРасписаниеРегламентногоЗаданияПолныйОбменПоУмолчанию();
	КонецЕсли;
	
	Возврат РасписаниеРегламентногоЗаданияПолныйОбмен;
	
КонецФункции

&НаКлиенте
Процедура ОбмениватьсяСтатусамиЗаказаПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияПолныйОбменНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыполнитьНастройкуРасписания(ПолучитьРасписаниеРегламентногоЗаданияПолныйОбмен(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПолныйОбменПриИзменении(Элемент)
	Элементы.НастроитьРасписаниеРегламентногоЗаданияПолныйОбмен.Доступность = Объект.ИспользоватьПолныйОбмен;
	
	Если Объект.ИспользоватьПолныйОбмен Тогда
		ВыполнитьНастройкуРасписания(ПолучитьРасписаниеРегламентногоЗаданияПолныйОбмен(), Истина);
	Иначе
		Объект.РасписаниеРегламентногоЗаданияПолныйОбмен = "";
		НастроитьРасписаниеРегламентногоЗаданияПолныйОбмен = "Настроить расписание полного обмена";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЛогОткрыть(Команда)
	ПараметрыФормы = Новый Структура( "УчетнаяЗапись", Объект.Ссылка );
	ОткрытьФорму( "РегистрСведений.ОбменСВнешнимиСистемамиЛогирование.ФормаСписка", ПараметрыФормы, , ЭтотОбъект.УникальныйИдентификатор );
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияОбменаССайтом( Результат, ДополнительныеПараметры ) Экспорт
	Если ТипЗнч( ДополнительныеПараметры ) = Тип( "ФормаКлиентскогоПриложения" ) Тогда
		ФормаОбмена = ДополнительныеПараметры;
		Если ФормаОбмена.Открыта() Тогда
			ФормаОбмена.Закрыть();
		КонецЕсли;
	КонецЕсли;
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаИнтеграции = Объект.Ссылка;
	
	Если Результат.Статус = "Ошибка" Тогда
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Выполнение обмена с сайтом'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), "Ошибка", Результат.ПодробноеПредставлениеОшибки, , Истина);
		
		СообщениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполнение обмена с сайтом прервано по причине:
		|%1 '"),
		Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю( СообщениеТекст );
		
		Возврат;
	КонецЕсли;
    
    РезультатВыполнения = ПолучитьИзВременногоХранилища( Результат.АдресРезультата );
    
	Если Результат.Свойство( "Сообщения" ) Тогда
		Если Результат.Сообщения.Количество() > 0 Тогда
			// группировка сообщений
			Сообщения = Новый Массив;
			Для Каждого СообщениеЭлемент Из Результат.Сообщения Цикл
				Если Сообщения.Найти( СообщениеЭлемент.Текст ) = Неопределено Тогда
					Сообщения.Добавить( СообщениеЭлемент.Текст );
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СообщениеТекст Из Сообщения Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю( СообщениеТекст );
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1 ""%2""'"),
	Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДЛФ=DT"),
	НастройкаИнтеграции) 
	,,
	НСтр("ru = 'Обмен с сайтом завершен'"),
	БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗавершенСеансОбменаССайтом", НастройкаИнтеграции);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтчетСформировать( НастройкаИнтернетМагазина, ФлагПодробно = Ложь )
	
	ПараметрыКонтекст = Новый Структура;
	ПараметрыКонтекст.Вставить( "ОтчетРежимПодробно", ФлагПодробно );
	Отчет = ИнтеграцияСИнтернетМагазиномСервер.ИнтернетМагазинОтчетПоДаннымДляВыгрузкиПолучить( НастройкаИнтернетМагазина, ПараметрыКонтекст );
	
	Возврат Отчет;
КонецФункции

&НаКлиенте
Процедура ПоКнопкеОтчетПодробноСформировать(Команда)

	НастройкаИнтернетМагазина = Объект.Ссылка;
	Отчет = ОтчетСформировать( НастройкаИнтернетМагазина, Истина );
	Если ТипЗнч( Отчет ) <> Тип( "ТабличныйДокумент" ) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр( "ru = 'Отчет не сформирован'" ) );
		Возврат;
	КонецЕсли;
	
	ОтчетЗаголовок = "" + НастройкаИнтернетМагазина + ": Данные для выгрузки " + Формат( ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyy-MM-dd-HH-mm-ss" );
	Отчет.Показать( ОтчетЗаголовок );
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКнопкеОтчетКраткоСформировать(Команда)

	НастройкаИнтернетМагазина = Объект.Ссылка;
	Отчет = ОтчетСформировать( НастройкаИнтернетМагазина, Ложь );
	Если ТипЗнч( Отчет ) <> Тип( "ТабличныйДокумент" ) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр( "ru = 'Отчет не сформирован'" ) );
		Возврат;
	КонецЕсли;
	
	ОтчетЗаголовок = "" + НастройкаИнтернетМагазина + ": Данные для выгрузки " + Формат( ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=yyyy-MM-dd-HH-mm-ss" );
	Отчет.Показать( ОтчетЗаголовок );

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	Элементы.ГруппаОбмены.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	Элементы.ИспользоватьРегламентныеЗаданияПояснение.Видимость = Не Объект.ИспользоватьРегламентныеЗадания;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьБлокПолныйОбменДаннымиНеТребуется()
	Объект.НеобходимоВыполнитьПолныйОбмен = Ложь;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолныйОбменДаннымиНеТребуется(Команда)
	СкрытьБлокПолныйОбменДаннымиНеТребуется();
КонецПроцедуры

&НаКлиенте
Процедура ПолныйОбменДаннымиВыполнить(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		ЭтаФорма.Записать();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения( "ФормаВыполнениеОбменаЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаИнтеграции", Объект.Ссылка );
	ПараметрыФормы.Вставить("ВыгружатьТолькоИзменения", Ложь);
	
	ОткрытьФорму("Справочник.НастройкиИнтеграцииСИнтернетМагазином.Форма.ФормаВыполнениеОбмена",
	ПараметрыФормы,
	ЭтаФорма,
	ЭтаФорма.УникальныйИдентификатор,
	,
	ЭтаФорма.НавигационнаяСсылка,
	ОписаниеОповещения,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыполнениеОбменаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Оповестить( "ОбновитьИнтеграцияСИнтернетМагазином" );
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЦеныПриИзменении(Элемент)
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьТоварыТолькоСНеНулевойЦенойПриИзменении(Элемент)
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
КонецПроцедуры

&НаКлиенте
Процедура ОбязательноеНаличиеФотографийПриИзменении(Элемент)
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьОтносительныеПутиИзображенийБезДвоичныхДанныхПриИзменении(Элемент)
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьКартинкиПриИзменении(Элемент)
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьОстатокПоставщиковПриИзменении(Элемент)
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьОстаткиПоСкладамПриИзменении(Элемент)
	Объект.НеобходимоВыполнитьПолныйОбмен = Истина;
	ОбновитьОтображениеНаФормеНеобходимоВыполнитьПолныйОбмен();
КонецПроцедуры

&НаКлиенте
Процедура ТипБулевоЗначенияДляВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ОписаниеОповещения = Новый ОписаниеОповещения( "ТипБулевоЗначенияДляВыгрузкиПослеВыбора", ЭтотОбъект );
	
	Конструктор = Новый КонструкторФорматнойСтроки( Объект.ТипБулевоЗначенияДляВыгрузки );
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов( "Булево" );
	Конструктор.Показать( ОписаниеОповещения );
КонецПроцедуры

&НаКлиенте
Процедура ТипБулевоЗначенияДляВыгрузкиПослеВыбора( Значение, Параметры ) Экспорт
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ТипБулевоЗначенияДляВыгрузки = Значение;
	ОбновитьОтображениеНаКлиентеТипБулевоЗначенияДляВыгрузкиПредставление();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеНаКлиентеТипБулевоЗначенияДляВыгрузкиПредставление()
	Элементы.ТипБулевоЗначенияДляВыгрузкиПредставление.Заголовок = 
	"Истина -> " + Формат( Истина, Объект.ТипБулевоЗначенияДляВыгрузки )
	+ "; Ложь -> " + Формат( Ложь, Объект.ТипБулевоЗначенияДляВыгрузки );
КонецПроцедуры

&НаКлиенте
Процедура ТипБулевоЗначенияДляВыгрузкиПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиентеТипБулевоЗначенияДляВыгрузкиПредставление();
КонецПроцедуры

&НаКлиенте
Процедура ТехническомуСпециалистуКартинкаНажатие(Элемент)
	ПоказатьСтраницуТехническомуСпециалисту();
КонецПроцедуры

&НаКлиенте
Процедура ТехническомуСпециалистуНадписьНажатие(Элемент)
	ПоказатьСтраницуТехническомуСпециалисту();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДиагностикаТовараРезультатКартинкуИзПрисоединенногоФайлаНаФормуДобавить( Файл, Форма, ЭлементИмя, ЭлементРодительИмя )

	КартинкаАдрес = ИнтеграцияСМаркетплейсамиСервер.ПрисоединенныйФайлВоВременноеХранилище( Файл, Форма.УникальныйИдентификатор );

	Элемент = Неопределено;
	
	Реквизиты = Новый Массив;
	Реквизит = Новый РеквизитФормы( ЭлементИмя, Новый ОписаниеТипов( "Строка" ) );
	Реквизиты.Добавить( Реквизит );
	
	Форма.ИзменитьРеквизиты( Реквизиты );
	
	Элемент = Форма.Элементы.Добавить( ЭлементИмя, Тип( "ПолеФормы" ), Форма.Элементы[ ЭлементРодительИмя ] );
	Элемент.Вид = ВидПоляФормы.ПолеКартинки;
	Элемент.ПутьКДанным = ЭлементИмя;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.Ширина = 10;
	Элемент.Высота = 4;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.Рамка = Новый Рамка( ТипРамкиЭлементаУправления.БезРамки );
	Элемент.РазмерКартинки = РазмерКартинки.Пропорционально;
	
	Форма[ ЭлементИмя ] = КартинкаАдрес;
	
	Возврат Элемент;
КонецФункции

&НаСервере
Функция ДиагностикаТовараРезультатНаФормеОбновить( ДиагностикаРезультат, ПараметрыКонтекст )

	Результат = Новый Структура;
	
	Элементы.ДиагностикаТовараРезультатКратко.Видимость = Истина;
	Элементы.ДиагностикаТовараРезультатПодробно.Видимость = Истина;

	ЭтаФорма.ДиагностикаТовараРезультатПодробноИзображенияКонтейнерыКоличество = 1;
	
	Элементы.ДиагностикаТовараРезультатКаталогПредставление.Заголовок = ДиагностикаРезультат.КаталогНаименование 
	+ Символы.ПС + ДиагностикаРезультат.КаталогИдентификатор;
	
	СтрРекомендации = СтрСоединить( ДиагностикаРезультат.Рекомендации, Символы.ПС );
	
	Если ПустаяСтрока( СтрРекомендации ) Тогда
		Элементы.ДиагностикаТовараРезультатПодробноРекомендации.Заголовок = "";
		Элементы.ДиагностикаТовараРезультатПодробноРекомендации.Видимость = Ложь;
	Иначе
		Элементы.ДиагностикаТовараРезультатПодробноРекомендации.Заголовок = СтрРекомендации;
		Элементы.ДиагностикаТовараРезультатПодробноРекомендации.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ДиагностикаТовараГотовКВыгрузкеНадпись.Видимость = 
	(ДиагностикаРезультат.ТоварВходитВКаталог = Истина И ДиагностикаРезультат.ТоварВходитВПредложения = Истина);
	
	Если ДиагностикаРезультат.ВыгруженныеРанееТовары.Количество() = 0 Тогда
		// товар еще не выгружался на сайт
		ВыгруженныеРанееТоварыПояснение = "Не выгружался на сайт.";
	Иначе
		ВыгруженныеРанееТоварыСтрока = ДиагностикаРезультат.ВыгруженныеРанееТовары[ 0 ];
		Если ВыгруженныеРанееТоварыСтрока.Действие = Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ТоварУдалить Тогда
			ВыгруженныеРанееТоварыПояснение = "Удален с сайта " + ВыгруженныеРанееТоварыСтрока.ДатаВыгрузки + ".";
		Иначе
			ВыгруженныеРанееТоварыПояснениеДополнение = "";
			Если ДиагностикаРезультат.ТоварВходитВКаталог = Ложь Тогда
				ВыгруженныеРанееТоварыПояснениеДополнение = Символы.ПС + "Будет удален с сайта при следующем ""Полном обмене"".";
			КонецЕсли;
			ВыгруженныеРанееТоварыПояснение = "Выгружен на сайт " + ВыгруженныеРанееТоварыСтрока.ДатаВыгрузки
			 + "." + ВыгруженныеРанееТоварыПояснениеДополнение;
		КонецЕсли;
	КонецЕсли;
	Элементы.ДиагностикаТовараРезультатПодробноВыгруженныеРанееПояснение.Заголовок = ВыгруженныеРанееТоварыПояснение;
	Элементы.ДиагностикаТовараРезультатПодробноВыгруженныеРанееПояснение.Видимость = Истина;
	
	// Каталог
	Если ДиагностикаРезультат.ТоварВходитВКаталог = Истина Тогда
		ДиагностикаТовараРезультатВходитВКаталогНомерКартинки = 0;
		Элементы.ДиагностикаТовараРезультатПодробноКаталогПояснение.Видимость = Ложь;

		Элементы.ДиагностикаТовараРезультатПодробноГруппировка1.Видимость = Истина;
	Иначе
		
		// товара нет в каталоге
		
		ДиагностикаТовараРезультатВходитВКаталогНомерКартинки = 2;
		Элементы.ДиагностикаТовараРезультатПодробноКаталогПояснение.Видимость = ПустаяСтрока( СтрРекомендации );
		
		ДиагностикаТовараРезультатВходитВПредложенияНомерКартинки = 2;
		ДиагностикаТовараРезультатЕстьЦенаНомерКартинки = 2;
		ДиагностикаТовараРезультатЕстьОстатокНомерКартинки = 2;
		ДиагностикаТовараРезультатЕстьИзображенияНомерКартинки = 2;
		
		Возврат Результат;
	КонецЕсли;
	
	// Изображения
	Если ДиагностикаРезультат.ЕстьИзображенияНоменклатуры = Истина
		Или ДиагностикаРезультат.ЕстьИзображенияХарактеристики = Истина
		Тогда
		ДиагностикаТовараРезультатЕстьИзображенияНомерКартинки = 0;
		Элементы.ДиагностикаТовараРезультатПодробноИзображенияПояснение.Видимость = Ложь;
	Иначе
		ДиагностикаТовараРезультатЕстьИзображенияНомерКартинки = 2;
		Элементы.ДиагностикаТовараРезультатПодробноИзображенияПояснение.Видимость = ДиагностикаРезультат.ТоварВходитВКаталог;
	КонецЕсли;
	
	// Изображения
	ДиагностикаТовараРезультатНаФормеИзображенияОбновить( ДиагностикаРезультат );
	
	
	// Предложения
	Если ДиагностикаРезультат.ТоварВходитВПредложения = Истина Тогда
		ДиагностикаТовараРезультатВходитВПредложенияНомерКартинки = 0;
		Элементы.ДиагностикаТовараРезультатПодробноПредложенияПояснение.Видимость = Ложь;
	Иначе
		ДиагностикаТовараРезультатВходитВПредложенияНомерКартинки = 2;
		Элементы.ДиагностикаТовараРезультатПодробноПредложенияПояснение.Видимость =
		(ДиагностикаРезультат.ТоварВходитВКаталог И ПустаяСтрока( СтрРекомендации ));
		
		ДиагностикаТовараРезультатЕстьЦенаНомерКартинки = 2;
		ДиагностикаТовараРезультатЕстьОстатокНомерКартинки = 2;
		Возврат Результат;
	КонецЕсли;
	
	// Цены
	
	Если ДиагностикаРезультат.Цены.Количество() > 0 Тогда
		
		ДиагностикаТовараРезультатЕстьЦенаНомерКартинки = 0;
		Элементы.ДиагностикаТовараРезультатПодробноЦеныПояснение.Видимость = Ложь;
		
		Для Каждого ЦеныСтрока Из ДиагностикаРезультат.Цены Цикл
			ДиагностикаТовараРезультатЦеныСтрока = ДиагностикаТовараРезультатЦены.Добавить();
			ЗаполнитьЗначенияСвойств( ДиагностикаТовараРезультатЦеныСтрока, ЦеныСтрока );
		КонецЦикла;
		
	Иначе
		ДиагностикаТовараРезультатЕстьЦенаНомерКартинки = 2;
		Элементы.ДиагностикаТовараРезультатПодробноЦеныПояснение.Видимость = ДиагностикаРезультат.ТоварВходитВКаталог;
	КонецЕсли;
	
	ДиапазонЦенСтрокой = ?( ДиагностикаРезультат.ЦенаМинимальная = ДиагностикаРезультат.ЦенаМаксимальная, 
	Формат( ДиагностикаРезультат.ЦенаМаксимальная, "ЧДЦ=2; ЧН=0,00" ), 
	Формат( ДиагностикаРезультат.ЦенаМинимальная, "ЧДЦ=2; ЧН=0,00" ) + " - " 
	+ Формат( ДиагностикаРезультат.ЦенаМаксимальная, "ЧДЦ=2; ЧН=0,00" ));
	
	ЦеныКоличествоСтрок = ДиагностикаТовараРезультатЦены.Количество();
	Элементы.ДиагностикаТовараРезультатЦены.Заголовок = "Выгружаемые цены ( строк " + ЦеныКоличествоСтрок
	+ "; " + ДиапазонЦенСтрокой + " )";
	
	ВысотаВСтрокахТаблицы = Макс( 2, ЦеныКоличествоСтрок );
	Если ЦеныКоличествоСтрок = 0 Тогда
		Элементы.ДиагностикаТовараРезультатЦены.Видимость = Ложь;
	Иначе
		Элементы.ДиагностикаТовараРезультатЦены.Видимость = Истина;
		Элементы.ДиагностикаТовараРезультатЦены.ВысотаВСтрокахТаблицы = ВысотаВСтрокахТаблицы;
	КонецЕсли;
	
	// Остатки
	Если ДиагностикаРезультат.Остаток > 0 Тогда
		
		ДиагностикаТовараРезультатЕстьОстатокНомерКартинки = 0;
		Элементы.ДиагностикаТовараРезультатПодробноОстаткиПояснение.Видимость = Ложь;
		
		Для Каждого ОстаткиСтрока Из ДиагностикаРезультат.Остатки Цикл
			ДиагностикаТовараРезультатОстаткиСтрока = ДиагностикаТовараРезультатОстатки.Добавить();
			ЗаполнитьЗначенияСвойств( ДиагностикаТовараРезультатОстаткиСтрока, ОстаткиСтрока );
		КонецЦикла;
		
	Иначе
		ДиагностикаТовараРезультатЕстьОстатокНомерКартинки = 2;
		Элементы.ДиагностикаТовараРезультатПодробноОстаткиПояснение.Видимость = ДиагностикаРезультат.ТоварВходитВКаталог;
	КонецЕсли;
	ОстаткиКоличествоСтрок = ДиагностикаТовараРезультатОстатки.Количество();
	Элементы.ДиагностикаТовараРезультатОстатки.Заголовок = "Выгружаемые остатки ( строк " + ОстаткиКоличествоСтрок + ", итого " + ДиагностикаРезультат.Остаток + " )";
	ВысотаВСтрокахТаблицы = Макс( 2, ОстаткиКоличествоСтрок );
	Если ОстаткиКоличествоСтрок = 0 Тогда
		Элементы.ДиагностикаТовараРезультатОстатки.Видимость = Ложь;
	Иначе
		Элементы.ДиагностикаТовараРезультатОстатки.Видимость = Истина;
		Элементы.ДиагностикаТовараРезультатОстатки.ВысотаВСтрокахТаблицы = ВысотаВСтрокахТаблицы;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ДиагностикаТовараРезультатНаФормеИзображенияОбновить( ДиагностикаРезультат )
	ОсновныхПараметровОбмена = ИнтеграцияСИнтернетМагазиномСервер.ПолучитьСтруктуруОсновныхПараметровОбмена();
	РазрешенныеТипыКартинок = ОсновныхПараметровОбмена.РазрешенныеТипыКартинок;
	РазрешенныеТипыФайлов = ОсновныхПараметровОбмена.РазрешенныеТипыФайлов;
    
    ИзображенияКоличество = 0;
	Для Каждого ФайлыСтрока Из ДиагностикаРезультат.Файлы Цикл
		
		ФайлРасширение = ФайлыСтрока.Расширение;
		Если РазрешенныеТипыКартинок.Найти( ФайлРасширение ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИзображенияКоличество = ИзображенияКоличество + 1;
	КонецЦикла;
	
	ИзображенияНаФормеКонтейнерыИмя = ИзображенияНаФормеКонтейнерыИмяПолучить();
	НомерИзображенияПП = 0;
	НомерКонтейнераПП = 0;
	МаксимальноеКоличествоИзображенийВКонтейнере = 7;
	Для Каждого ФайлыСтрока Из ДиагностикаРезультат.Файлы Цикл
		
		Файл = ФайлыСтрока.Файл;
		ФайлРасширение = ФайлыСтрока.Расширение;
		Если РазрешенныеТипыКартинок.Найти( ФайлРасширение ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НомерКонтейнераПП > ИзображенияНаФормеКонтейнерыИмя.ВГраница() Тогда
			Прервать;
		КонецЕсли;
		
		ЭлементРодительИмя = ИзображенияНаФормеКонтейнерыИмя[ НомерКонтейнераПП ];
		
		НомерИзображенияПП = НомерИзображенияПП + 1;
		ЭлементИмя = "ДиагностикаТовараРезультатКартинкаАдрес" + Формат( НомерИзображенияПП, "ЧГ=0" );
		ДиагностикаТовараРезультатКартинкуИзПрисоединенногоФайлаНаФормуДобавить( Файл, ЭтаФорма, ЭлементИмя, ЭлементРодительИмя );
		
		Если НомерИзображенияПП%МаксимальноеКоличествоИзображенийВКонтейнере = 0 Тогда
			НомерКонтейнераПП = НомерКонтейнераПП + 1;
		КонецЕсли;
		
	КонецЦикла;
	Если НомерИзображенияПП = ИзображенияКоличество Тогда
		Элементы.ДиагностикаТовараРезультатПодробноИзображения.Заголовок = "Изображения ( " + ИзображенияКоличество + " )";
	Иначе
		Элементы.ДиагностикаТовараРезультатПодробноИзображения.Заголовок = "Изображения ( показаны " + НомерИзображенияПП + " из " + ИзображенияКоличество + " )";
	КонецЕсли;
	Элементы.ДиагностикаТовараРезультатПодробноИзображения.Видимость = ДиагностикаРезультат.ЕстьИзображенияНоменклатуры;
	Элементы.КнопкаДиагностикаТовараИзображенияПоказатьВсе.Видимость = (ИзображенияКоличество > МаксимальноеКоличествоИзображенийВКонтейнере);

КонецПроцедуры

&НаКлиенте
Функция ДиагностикаКаталогиТоваровДляВыбораИзСпискаПолучить()
	
	КаталогиТоваров = Новый СписокЗначений;
	Для Каждого ТаблицаКаталоговСтрока Из ЭтаФорма.ТаблицаКаталогов Цикл
		КаталогиТоваров.Добавить( ТаблицаКаталоговСтрока.ИдентификаторКаталога, "" + ТаблицаКаталоговСтрока.Каталог + " ( " + ТаблицаКаталоговСтрока.ИдентификаторКаталога + " )" );
	КонецЦИкла;
	
	Возврат КаталогиТоваров;
КонецФункции

&НаКлиенте
Процедура ДиагностикаЗаполнитьСписокВыбораКаталоговТоваров()

	ДиагностикаИдентификаторКаталога = "";
	
	СписокВыбора = Элементы.ДиагностикаИдентификаторКаталога.СписокВыбора;
	СписокВыбора.Очистить();
	
	НастройкаИнтернетМагазина = Объект.Ссылка;
	Если Не ЗначениеЗаполнено( НастройкаИнтернетМагазина ) Тогда
		Возврат;
	КонецЕсли;
	
	КаталогиТоваровДляВыбора = ДиагностикаКаталогиТоваровДляВыбораИзСпискаПолучить();
	Для Каждого КаталогиТоваровДляВыбораЭлемент Из КаталогиТоваровДляВыбора Цикл
		СписокВыбора.Добавить( КаталогиТоваровДляВыбораЭлемент.Значение, КаталогиТоваровДляВыбораЭлемент.Представление );
	КонецЦикла;
	
	Если СписокВыбора.Количество() > 0 Тогда
		ДиагностикаИдентификаторКаталога = СписокВыбора[ 0 ].Значение; 
		
		Если СписокВыбора.Количество() = 1 Тогда
			Элементы.ДиагностикаИдентификаторКаталога.Видимость = Ложь;
		Иначе
			Элементы.ДиагностикаИдентификаторКаталога.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		Элементы.ДиагностикаИдентификаторКаталога.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДиагностикаТовараВыполнитьИОбновитьНаФорме()
	
	ДиагностикаТовараРезультатНаФормеСброситьНаСервере();

	НастройкаИнтернетМагазина = Объект.Ссылка;
    Если Не ЗначениеЗаполнено( НастройкаИнтернетМагазина ) Тогда
    	ОбщегоНазначения.СообщитьПользователю( "Диагностика товара: Настройка интернет-магазина не выбрана." );
    	Возврат Ложь;
    КонецЕсли;

	КаталогИдентификатор = ЭтаФорма.ДиагностикаИдентификаторКаталога;
    Если Не ЗначениеЗаполнено( КаталогИдентификатор ) Тогда
    	ОбщегоНазначения.СообщитьПользователю( "Диагностика товара: Каталог не выбран." );
    	Возврат Ложь;
    КонецЕсли;

	Номенклатура = ЭтаФорма.ДиагностикаНоменклатура;
    Если Не ЗначениеЗаполнено( Номенклатура ) Тогда
    	ОбщегоНазначения.СообщитьПользователю( "Диагностика товара: Номенклатура не выбрана." );
    	Возврат Ложь;
    КонецЕсли;

	Характеристика = ЭтаФорма.ДиагностикаХарактеристика;
	

	ПараметрыКонтекст = Новый Структура;
	ПараметрыКонтекст.Вставить( "ОтчетРежимПодробно", Истина );
	ПараметрыКонтекст.Вставить( "ОтчетФормироватьПечатнуюФорму", Ложь );
	
	ПараметрыКонтекст.Вставить( "НастройкаИнтернетМагазина", НастройкаИнтернетМагазина );
	ПараметрыКонтекст.Вставить( "КаталогИдентификатор", КаталогИдентификатор );
	ПараметрыКонтекст.Вставить( "Номенклатура", Номенклатура );
	ПараметрыКонтекст.Вставить( "Характеристика", Характеристика );
	
	ПараметрыКонтекст.Вставить( "ДиагностикаТовараОтборНоменклатура", Номенклатура );
	
	ДиагностикаРезультат = ИнтеграцияСИнтернетМагазиномСервер.ДиагностикаТовараВыполнить( ПараметрыКонтекст );
	Если ДиагностикаРезультат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДиагностикаТовараРезультатНаФормеОбновить( ДиагностикаРезультат, ПараметрыКонтекст );

	ЭтаФорма.ДиагностикаРезультатАдрес = ПоместитьВоВременноеХранилище( ДиагностикаРезультат, ЭтаФорма.УникальныйИдентификатор );
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПоКнопкеДиагностикаТовараВыполнить(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю( "Необходимо записать изменения настроек для выполнения диагностики." );
		Возврат;
	КонецЕсли;
	
	Время001 = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Результат = ДиагностикаТовараВыполнитьИОбновитьНаФорме();
	
	Время002 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДлительностьМс = Время002 - Время001;
	
КонецПроцедуры

&НаСервере
Процедура ДиагностикаТовараРезультатНаФормеСброситьНаСервере()
	
	Если Не ПустаяСтрока( ДиагностикаРезультатАдрес ) Тогда
		УдалитьИзВременногоХранилища( ДиагностикаРезультатАдрес );
	КонецЕсли;
	
	Если Элементы.ДиагностикаТовараРезультатПодробно.Видимость = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДиагностикаТовараРезультатКратко.Видимость = Ложь;
	
	Элементы.ДиагностикаТовараРезультатПодробно.Видимость = Ложь;
	
	Элементы.ДиагностикаТовараРезультатКаталогПредставление.Заголовок = "";
	ДиагностикаТовараРезультатВходитВКаталогНомерКартинки = 4;
	ДиагностикаТовараРезультатВходитВПредложенияНомерКартинки = 4;
	ДиагностикаТовараРезультатЕстьЦенаНомерКартинки = 4;
	ДиагностикаТовараРезультатЕстьОстатокНомерКартинки = 4;
	ДиагностикаТовараРезультатЕстьИзображенияНомерКартинки = 4;
	
    ДиагностикаТовараРезультатЦены.Очистить();
    Элементы.ДиагностикаТовараРезультатЦены.Видимость = Ложь;

    ДиагностикаТовараРезультатОстатки.Очистить();
    Элементы.ДиагностикаТовараРезультатОстатки.Видимость = Ложь;
    
    Элементы.ДиагностикаТовараРезультатОстатки.Заголовок = "Остатки";
    Элементы.ДиагностикаТовараРезультатЦены.Заголовок = "Цены";
    
	Элементы.ДиагностикаТовараРезультатПодробноКаталогПояснение.Видимость = Ложь;
	Элементы.ДиагностикаТовараРезультатПодробноПредложенияПояснение.Видимость = Ложь;
	Элементы.ДиагностикаТовараРезультатПодробноЦеныПояснение.Видимость = Ложь;
	Элементы.ДиагностикаТовараРезультатПодробноОстаткиПояснение.Видимость = Ложь;
	Элементы.ДиагностикаТовараРезультатПодробноИзображенияПояснение.Видимость = Ложь;
	Элементы.ДиагностикаТовараГотовКВыгрузкеНадпись.Видимость = Ложь;
	Элементы.ДиагностикаТовараРезультатПодробноВыгруженныеРанееПояснение.Видимость = Ложь;
	
	Элементы.ДиагностикаТовараРезультатПодробноГруппировка1.Видимость = Ложь;
	Элементы.ДиагностикаТовараРезультатПодробноИзображения.Видимость = Ложь;
	
    
    // Изображения
	
	ДиагностикаТовараРезультатНаФормеИзображенияСброситьНаСервере();
    
КонецПроцедуры

Процедура ДиагностикаТовараРезультатНаФормеИзображенияСброситьНаСервере()
	Элементы.ДиагностикаТовараРезультатПодробноИзображения.Заголовок = "Изображения:";
	
	РеквизитыФормыИмяДляУдаления = Новый Массив;
    ИзображенияНаФормеКонтейнерыИмя = ИзображенияНаФормеКонтейнерыИмяПолучить();
	Для Каждого КонтейнерИмя Из ИзображенияНаФормеКонтейнерыИмя Цикл
		ЭлементыИзображения = Элементы[ КонтейнерИмя ].ПодчиненныеЭлементы;
		Для Каждого Элемент Из ЭлементыИзображения Цикл
			РеквизитыФормыИмяДляУдаления.Добавить( Элемент.Имя );
		КонецЦикла;
	КонецЦикла;

    Для Каждого ЭлементИмя Из РеквизитыФормыИмяДляУдаления Цикл
    	Элементы.Удалить( Элементы[ ЭлементИмя ] );
    КонецЦикла;
    
    ИзменитьРеквизиты( , РеквизитыФормыИмяДляУдаления );

КонецПроцедуры

Функция ИзображенияНаФормеКонтейнерыИмяПолучить()

	КонтейнерыИмя = Новый Массив;
	Для Номер = 1 По ЭтаФорма.ДиагностикаТовараРезультатПодробноИзображенияКонтейнерыКоличество Цикл
		КонтейнерыИмя.Добавить( "ДиагностикаТовараРезультатПодробноИзображенияКонтейнер" + Формат( Номер, "ЧГ=0" ))
	КонецЦикла;
	
	Возврат КонтейнерыИмя;
	
КонецФункции

&НаКлиенте
Процедура ДиагностикаТовараРезультатСбросить()
	ДиагностикаТовараРезультатНаФормеСброситьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДиагностикаТоварПриИзмененииСервер()

	ИспользоватьХарактеристики = Ложь;
	Если ЗначениеЗаполнено( ДиагностикаНоменклатура ) Тогда
		ИспользоватьХарактеристики = НоменклатураИспользоватьХарактеристики( ДиагностикаНоменклатура );
		ЭтаФорма.Элементы.ДиагностикаХарактеристика.Видимость = ИспользоватьХарактеристики;
	Иначе
		ЭтаФорма.Элементы.ДиагностикаХарактеристика.Видимость = Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено( ДиагностикаНоменклатура ) Тогда 
	
		Если ИспользоватьХарактеристики = Ложь Тогда
	    	ДиагностикаТовараВыполнитьИОбновитьНаФорме();
	    Иначе
			Если ЗначениеЗаполнено( ДиагностикаХарактеристика ) Тогда
				ДиагностикаТовараВыполнитьИОбновитьНаФорме();
			Иначе
				ДиагностикаТовараРезультатНаФормеСброситьНаСервере();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ДиагностикаТовараРезультатНаФормеСброситьНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДиагностикаТоварПриИзменении(Элемент)

	ДиагностикаТоварПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагностикаХарактеристикаПриИзменении(Элемент)

	Если ЗначениеЗаполнено( ДиагностикаХарактеристика ) Тогда
		ДиагностикаТовараВыполнитьИОбновитьНаФорме();
	Иначе
		ДиагностикаТовараРезультатСбросить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураИспользоватьХарактеристики( Номенклатура )
	Если ЗначениеЗаполнено( Номенклатура ) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Номенклатура, "ИспользоватьХарактеристики" );
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ИдентификаторКаталогаПриИзменении(Элемент)

	Если ЗначениеЗаполнено( ДиагностикаНоменклатура ) Тогда 
	
	    ИспользоватьХарактеристики = НоменклатураИспользоватьХарактеристики( ДиагностикаНоменклатура );
	    
		Если ИспользоватьХарактеристики = Ложь Тогда
	    	ДиагностикаТовараВыполнитьИОбновитьНаФорме();
	    Иначе
			Если ЗначениеЗаполнено( ДиагностикаХарактеристика ) Тогда
				ДиагностикаТовараВыполнитьИОбновитьНаФорме();
			Иначе
				ДиагностикаТовараРезультатНаФормеСброситьНаСервере();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ДиагностикаТовараРезультатНаФормеСброситьНаСервере();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "ДиагностикаРегистрСведенийЦеныНоменклатуры" Тогда
		СтандартнаяОбработка = Ложь;

		ПараметрыФормы = Новый Структура( "Отбор", Новый Структура( "Номенклатура", ДиагностикаНоменклатура ) );
		ОткрытьФорму( "РегистрСведений.ЦеныНоменклатуры.ФормаСписка", ПараметрыФормы, ЭтаФорма );
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ДиагностикаПрисоединенныеФайлы" Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено( ДиагностикаХарактеристика ) Тогда
			ПараметрыФормы = Новый Структура( "ВладелецФайла", ДиагностикаХарактеристика );
			ОткрытьФорму( "Справочник.НоменклатураПрисоединенныеФайлы.ФормаСписка", ПараметрыФормы, ЭтаФорма );
		Иначе
			ПараметрыФормы = Новый Структура( "ВладелецФайла", ДиагностикаНоменклатура );
			ОткрытьФорму( "Справочник.ХарактеристикиНоменклатурыПрисоединенныеФайлы.ФормаСписка", ПараметрыФормы, ЭтаФорма );
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ДиагностикаНоменклатура" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПоказатьЗначение( , ДиагностикаНоменклатура );
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ДиагностикаНачать" Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.ГруппаДиагностикаТовараОтбор.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДиагностикаТовараИзображенияПоказатьВсе()

	Если ПустаяСтрока( ЭтаФорма.ДиагностикаРезультатАдрес ) Тогда
		Возврат;
	КонецЕсли;
	
	ДиагностикаРезультат = ПолучитьИзВременногоХранилища( ЭтаФорма.ДиагностикаРезультатАдрес );
	Если ТипЗнч( ДиагностикаРезультат ) <> Тип( "Структура" ) Тогда
		Возврат;
	КонецЕсли;

	ДиагностикаТовараРезультатНаФормеИзображенияСброситьНаСервере();

	ЭтаФорма.ДиагностикаТовараРезультатПодробноИзображенияКонтейнерыКоличество = 10;

	ДиагностикаТовараРезультатНаФормеИзображенияОбновить( ДиагностикаРезультат );
	
	Элементы.КнопкаДиагностикаТовараИзображенияПоказатьВсе.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДиагностикаТовараИзображенияПоказатьВсе(Команда)
	ДиагностикаТовараИзображенияПоказатьВсе();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстОшибки( Заголовок, Текст )
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку( Объект.Наименование );
	ТекстовыйДокумент.ДобавитьСтроку( "");
	ТекстовыйДокумент.ДобавитьСтроку( "---" );
	ТекстовыйДокумент.ДобавитьСтроку( "" );
	ТекстовыйДокумент.ДобавитьСтроку( Текст );
	ТекстовыйДокумент.Показать( Заголовок );
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбменаВыгрузкаНаСайтОшибкаНажатие(Элемент)
	ПоказатьТекстОшибки( "Ошибка при выгрузке на сайт", СостояниеОбменаВыгрузкаНаСайтОшибкаТекст );
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбменаЗагрузкаССайтаОшибкаНажатие(Элемент)
	ПоказатьТекстОшибки( "Ошибка при загрузке с сайта", СостояниеОбменаЗагрузкаССайтаОшибкаТекст );
КонецПроцедуры


&НаКлиенте
Процедура Декорация12Нажатие(Элемент)
	Элементы.ГруппаДиагностикаТовараОтбор.Видимость = Истина;
	Элементы.ДекорацияВыполнитьДиагностикуТовара.Видимость = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура КнопкаВыполнитьДиагностикуТовараНачать(Команда)
	Элементы.ГруппаДиагностикаТовараОтбор.Видимость = Истина;
	Элементы.КнопкаВыполнитьДиагностикуТовараНачать.Видимость = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура КнопкаВыгрузитьДанныеДляТехническойПоддержки(Команда)
	УчетнаяЗапись = Объект.Ссылка;
	ВыгрузитьДанныеДляТехническойПоддержкиФайлыПолучить( УчетнаяЗапись );
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеДляТехническойПоддержкиФайлыПолучить( УчетнаяЗапись )
	
	ДополнительныеПараметры = Новый Структура( "УчетнаяЗапись", УчетнаяЗапись );
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания( ЭтотОбъект );
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.Заголовок = "Подготовка данных для технической поддержки";
	ПараметрыОжидания.ТекстСообщения = "Операция может занять несколько минут.";
	ОповещениеОЗавершении = Новый ОписаниеОповещения( "ВыгрузитьДанныеДляТехническойПоддержкиЗавершение", ЭтотОбъект, ДополнительныеПараметры );
	ДлительнаяОперация = ВыгрузитьДанныеДляТехническойПоддержки( УчетнаяЗапись, УникальныйИдентификатор );
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьДанныеДляТехническойПоддержки( УчетнаяЗапись, УникальныйИдентификатор )

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Интернет магазины. Получение файлов для технической поддержки.'");

	ИмяМетода = "ИнтеграцияСИнтернетМагазиномСервер.ДанныеДляТехническойПоддержкиZipФайлПолучить";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись );

КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанныеДляТехническойПоддержкиЗавершение( РезультатЗадания, ДополнительныеПараметры ) Экспорт

	УчетнаяЗапись = ДополнительныеПараметры.УчетнаяЗапись;
	
	Если РезультатЗадания = Неопределено Или РезультатЗадания.Статус <> "Выполнено" Тогда
		ШаблонОшибки = НСтр("ru = 'Не удалось получить файлы ""%1"" по причине: %2'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции'");
		ПодробноеПредставлениеОшибки = ?(РезультатЗадания = Неопределено, ПредставлениеНеизвестнойОшибки, РезультатЗадания.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОшибки,
		УчетнаяЗапись,
		ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлАдрес = РезультатЗадания.АдресРезультата;
	
	УчетнаяЗаписьНаименование = ЗначениеРеквизитаОбъектаПолучить( УчетнаяЗапись, "Наименование" );
	УчетнаяЗаписьНаименованиеДляИмениФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла( УчетнаяЗаписьНаименование, "-" );
	
	АрхивИмяФайла = Формат( ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ='yyyy-MM-dd HH-mm-ss'" )
	 + " Данные для технической поддержки ( " + УчетнаяЗаписьНаименованиеДляИмениФайла + " ).zip";

	ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла;
	ОписаниеПередаваемогоФайла.Имя = АрхивИмяФайла;
	ОписаниеПередаваемогоФайла.Хранение = ФайлАдрес;
	
    Файлы = Новый Массив;
    Файлы.Добавить( ОписаниеПередаваемогоФайла );

	ОписаниеОповещения = Новый ОписаниеОповещения("ДанныеДляТехническойПоддержкиВыгрузитьСохранитьФайлыЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.СохранитьФайлы( ОписаниеОповещения, Файлы );

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъектаПолучить( Ссылка, ИмяРеквизита )
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Ссылка, ИмяРеквизита);
КонецФункции

&НаКлиенте
Процедура ДанныеДляТехническойПоддержкиВыгрузитьСохранитьФайлыЗавершение( Результат, ДополнительныеПараметры ) Экспорт
	
	Если Результат = Неопределено Или Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Результат Цикл
		УдалитьИзВременногоХранилища( Элемент.Хранение );
	КонецЦикла;

	Файл = Новый Файл(Результат[0].ПолноеИмя);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПутьДоКаталога", Файл.Путь );
	
	ОписаниеОповещенияОткрытьКаталогПриНажатии = Новый ОписаниеОповещения( "ОткрытьКаталогПриНажатии", ЭтотОбъект, ПараметрыОповещения);
	
	ПоказатьОповещениеПользователя( "Запись файлов для технической поддержки завершена",
	ОписаниеОповещенияОткрытьКаталогПриНажатии,
	"Записан файл " + Файл.Имя + Символы.ПС
	+ "Перейти в каталог: " + Файл.Путь,
	БиблиотекаКартинок.ВыполненоУспешно
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогПриНажатии( Параметры ) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьПроводник( Параметры.ПутьДоКаталога );
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияНеобходимоВыполнитьПолныйОбмен3Нажатие(Элемент)
	СкрытьБлокПолныйОбменДаннымиНеТребуется();
КонецПроцедуры


&НаКлиенте
Процедура КнопкаЗаказыССайтаОткрыть(Команда)
	ПараметрыФормы = Новый Структура( "УчетнаяЗапись", Объект.Ссылка );
	ОткрытьФорму( "РегистрСведений.ЗаказыПокупателейССайта.ФормаСписка", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЛогированиеВключеноПолучить( УчетнаяЗапись )
	Возврат ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись );
КонецФункции

&НаСервере
Процедура ФормаЛогВидимостьОбновитьСервер()
	ЛогВключен = ЛогированиеВключеноПолучить( Объект.Ссылка );
	
	ЭтаФорма.ПоказатьВопросОбОтключенииЛогаПередЗакрытиемФормы = ЛогВключен;
	
	Элементы.ГруппаЛогВыключить.Видимость = ЛогВключен;
	Если Элементы.ГруппаИнструментыАдминистратора.Скрыта() Тогда
		Элементы.ГруппаИнструментыАдминистратора.Показать();
	КонецЕсли;

	ЭтаФорма.ВкладкаОбслуживаниеВниманиеЗначения.Вставить( "ЛогВключен", ЛогВключен );
	ФормаВкладкаОбслуживаниеВниманиеУстановитьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЛогВыключить(Команда)
	ЛогированиеВыключитьСервер( Объект.Ссылка );
	ФормаЛогВидимостьОбновитьСервер();
	Оповестить( "ЛогНастройкиИзменены", , ЭтаФорма );
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЛогированиеВыключитьСервер( УчетнаяЗапись )
	ОбменСВнешнимиСистемамиЛогирование.ЛогированиеВключеноЗначениеУстановить( УчетнаяЗапись, Ложь );
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемФормыВопросОтключениеЛогаЗавершение( Результат, Параметры ) Экспорт
	
	ЭтаФорма.ПоказатьВопросОбОтключенииЛогаПередЗакрытиемФормы = Ложь;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЛогированиеВыключитьСервер( Объект.Ссылка );
	КонецЕсли;
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбОтключенииЛогаПередЗакрытиемФормы() Экспорт
	
	ОповещениеВопросЗавершение = Новый ОписаниеОповещения( "ПередЗакрытиемФормыВопросОтключениеЛогаЗавершение", ЭтаФорма );

	ВопросТекст = 
	"Рекомендуется использовать Лог только для расследования проблемных ситуаций." + Символы.ПС
	+ "Запись создает дополнительную нагрузку на сервер 1С." + Символы.ПС + Символы.ПС
	+ "Отключить запись в Лог ?";
	ПоказатьВопрос( ОповещениеВопросЗавершение, ВопросТекст, РежимДиалогаВопрос.ДаНет, , , "Запись в Лог включена" );

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Объект.НастройкаЗавершена = Истина Тогда
		Если ЭтаФорма.ПоказатьВопросОбОтключенииЛогаПередЗакрытиемФормы = Истина Тогда
			ПоказатьВопросОбОтключенииЛогаПередЗакрытиемФормы();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОплатыССайтаОткрыть(Команда)
	ПараметрыФормы = Новый Структура( "УчетнаяЗапись", Объект.Ссылка );
	ОткрытьФорму( "РегистрСведений.ОплатыПокупателейССайта.ФормаСписка", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОбновитьОтображениеСостоянияСинхронизации(Команда)
	ОбновитьОтображениеВремениЗапускаНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЗаказыНаСайтПриИзменении(Элемент)
	ОбновитьОтображениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСоответствияОбъектовИнтернетМагазинаОткрыть(Команда)
	КлючИнтеграции = ИнтеграцияСИнтернетМагазиномПовтИсп.ПолучитьКлючПоНастройке( Объект.Ссылка );
	Отбор = Новый Структура( "КлючИнтеграции", КлючИнтеграции );
	ПараметрыФормы = Новый Структура( "Отбор", Отбор );
	ОткрытьФорму( "РегистрСведений.СоответствияОбъектовИнтернетМагазина.ФормаСписка", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
КонецПроцедуры
