#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает состав сегмента
//
// Параметры:
//  Сегмент	 - СправочникСсылка.СегментНоменклатуры, Массив	 - сегменты для которых необходимо получить состав
//  СпособДобавления - ПеречисленияСсылка.СпособыДобавленияВСегмент - способ добавления в сегмент (вручную, по правилам)
// Возвращаемое значение:
//  Массив - массив номенклатуры, входящей в сегмент
//
Функция ПолучитьСоставСегмента(Сегмент, СпособДобавления = Неопределено) Экспорт
	
	ОтборПоСегменту = Новый Массив;
	Если ТипЗнч(Сегмент) <> Тип("Массив") Тогда
		ОтборПоСегменту.Добавить(Сегмент);
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСегменту, Сегмент);
	КонецЕсли;
	
	МассивНоменклатуры = 
		РегистрыСведений.СоставСегментаНоменклатуры.СоставВыбранногоСегмента(ОтборПоСегменту, СпособДобавления);
	
	Возврат МассивНоменклатуры;
	
КонецФункции

// Процедура обновляет состав сегмента по заданным правилам
//
// Параметры:
//  Сегмент	 - СправочникСсылка.СегментНоменклатуры	 - сегмент для которого необходимо обновить состав
//  СКД - СхемаКомпоновкиДанных - схема, по правилам который будет получен состав сегмента
//
Процедура ОбновитьСоставСегментаПоПравилам(Сегмент, СКД = Неопределено) Экспорт
	
	РегистрыСведений.СоставСегментаНоменклатуры.ОбновитьСоставВыбранногоСегментаПоПравилам(Сегмент, СКД);
		
КонецПроцедуры

// Процедура добавляет выбранных вручную контрагентов в сегмент
//
// Параметры:
//  Сегмент			 - СправочникСсылка.Сегмент	 - сегмент, который нужно обновить
//  СоставСегмента	 - Массив					 - контрагенты, которых нужно добавить в сегмент
//
Процедура ОбновитьСоставСегментаВручную(Сегмент, СоставСегмента) Экспорт
	
	РегистрыСведений.СоставСегментаНоменклатуры.ОбновитьСоставВыбранногоСегментаВручную(Сегмент, СоставСегмента);
		
КонецПроцедуры

// Вставляет строки табличной части из буфер обмена в табличную часть.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Данные объекта, в котором расположена табличная часть.
//  ИмяТЧ  - Строка - Имя таблицы формы, в которой буду производиться вставка/копирование строк.
//  ЭлементыФормы           - ВсеЭлементыФормы - Элементы формы, на которой расположена табличная часть.
//  КоличествоСкопированных - Число - Получит значение количества строк, находящихся в буфере обмена.
//  КоличествоВставленных   - Число - Получит значение количества вставленных строк.
Процедура ВставитьСтроки(Объект, ИмяТЧ, ЭлементыФормы, КоличествоСкопированных, КоличествоВставленных) Экспорт
	
	ВыделенныеСтроки = ЭлементыФормы[ИмяТЧ].ВыделенныеСтроки;
	ВыделенныеСтроки.Очистить();
	
	ДобавляемыеСтроки = ХранилищеОбщихНастроек.Загрузить("БуферОбменаТабличныеЧасти", "Строки");
	Если ДобавляемыеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСкопированных = ДобавляемыеСтроки.Количество();
	ИсключаяКолонки 		= "";
	
	Реквизиты				= Новый Массив;
	
	Для каждого РеквизитТЧ Из Объект.РеквизитФормыВЗначение("СвояНоменклатура").Колонки Цикл
		Реквизиты.Добавить(Новый Структура("Имя, Тип", РеквизитТЧ.Имя, РеквизитТЧ.ТипЗначения));
	КонецЦикла;

	Для Каждого РеквизитТЧ Из Реквизиты Цикл
		
		Если ДобавляемыеСтроки.Колонки.Найти(РеквизитТЧ.Имя) = Неопределено Тогда
			Если ЗначениеЗаполнено(ИсключаяКолонки) Тогда
				ИсключаяКолонки = ИсключаяКолонки + ",";
			КонецЕсли;
			ИсключаяКолонки = ИсключаяКолонки + РеквизитТЧ.Имя;
			Продолжить;
		КонецЕсли;
		
		ИтераторЗначений = 0;
		ПараметрыУсловия = Новый Структура;
		ДопустимыеЗначения = Новый Массив;
		
		Если ЭлементыФормы.Найти(ИмяТЧ + РеквизитТЧ.Имя) <> Неопределено Тогда
			ПараметрыВыбора = ЭлементыФормы[ИмяТЧ + РеквизитТЧ.Имя].ПараметрыВыбора;
		Иначе
			ПараметрыВыбора = РеквизитТЧ.ПараметрыВыбора;
		КонецЕсли;
		
		Для каждого ПараметрВыбора Из ПараметрыВыбора Цикл
			
			Если СтрНайти(ПараметрВыбора.Имя, "Отбор.") <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеРеквизита = Прав(ПараметрВыбора.Имя, СтрДлина(ПараметрВыбора.Имя) - СтрДлина("Отбор."));
			ПредставлениеПараметраВыбора = "Параметры.Строка." + РеквизитТЧ.Имя + "." + ПредставлениеРеквизита;
			
			УсловиеРеквизита = "";
			
			Если ТипЗнч(ПараметрВыбора.Значение) = Тип("ФиксированныйМассив") ИЛИ ТипЗнч(ПараметрВыбора.Значение) = Тип("Массив") Тогда
				Для каждого ЗначениеРеквизита Из ПараметрВыбора.Значение Цикл
					
					Если ЗначениеЗаполнено(УсловиеРеквизита) Тогда
						УсловиеРеквизита = УсловиеРеквизита + "ИЛИ "
					КонецЕсли;
					
					ДопустимыеЗначения.Добавить(ЗначениеРеквизита);
					УсловиеРеквизита = УсловиеРеквизита + ПредставлениеПараметраВыбора + "=Параметры.ДопустимыеЗначения[" + ИтераторЗначений + "] ";
					ИтераторЗначений = ИтераторЗначений + 1;
					
				КонецЦикла;
			Иначе
				ДопустимыеЗначения.Добавить(ПараметрВыбора.Значение);
				УсловиеРеквизита = УсловиеРеквизита + ПредставлениеПараметраВыбора + "=Параметры.ДопустимыеЗначения[" + ИтераторЗначений + "] ";
				ИтераторЗначений = ИтераторЗначений + 1;
			КонецЕсли;
			
			УсловиеРеквизитаПоТипуИ = "";
			УсловиеРеквизитаПоТипуИЛИ = "";
			ТипыРеквизита = РеквизитТЧ.Тип.Типы();
			Если ТипыРеквизита.Количество() > 1 Тогда
				
				Для каждого Тип Из ТипыРеквизита Цикл
					
					ОбъектМетаданныхПоТипу = Метаданные.НайтиПоТипу(Тип);
					Если ОбъектМетаданныхПоТипу = Неопределено Тогда
						
						Если ЗначениеЗаполнено(УсловиеРеквизитаПоТипуИЛИ) Тогда
							УсловиеРеквизитаПоТипуИЛИ = УсловиеРеквизитаПоТипуИЛИ + " ИЛИ ";
						КонецЕсли;
						
						ДопустимыеЗначения.Добавить(Тип);
						УсловиеРеквизитаПоТипуИЛИ = УсловиеРеквизитаПоТипуИЛИ + "ТипЗнч(Параметры.Строка." + РеквизитТЧ.Имя + ")" + "=Параметры.ДопустимыеЗначения[" + ИтераторЗначений + "] ";
						ИтераторЗначений = ИтераторЗначений + 1;
						
					ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданныхПоТипу)
						ИЛИ ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданныхПоТипу) Тогда
						
						Если ОбъектМетаданныхПоТипу.Реквизиты.Найти(ПредставлениеРеквизита) = Неопределено Тогда
							
							Если ЗначениеЗаполнено(УсловиеРеквизитаПоТипуИЛИ) Тогда
								УсловиеРеквизитаПоТипуИЛИ = УсловиеРеквизитаПоТипуИЛИ + " ИЛИ ";
							КонецЕсли;
							
							ДопустимыеЗначения.Добавить(Тип);
							УсловиеРеквизитаПоТипуИЛИ = УсловиеРеквизитаПоТипуИЛИ + "ТипЗнч(Параметры.Строка." + РеквизитТЧ.Имя + ")" + "=Параметры.ДопустимыеЗначения[" + ИтераторЗначений + "] ";
							ИтераторЗначений = ИтераторЗначений + 1;
							
						Иначе
							
							Если ЗначениеЗаполнено(УсловиеРеквизитаПоТипуИ) Тогда
								УсловиеРеквизитаПоТипуИ = УсловиеРеквизитаПоТипуИ + " ИЛИ ";
							Иначе
								УсловиеРеквизитаПоТипуИ = УсловиеРеквизитаПоТипуИ + "(";
							КонецЕсли;
							
							ДопустимыеЗначения.Добавить(Тип);
							УсловиеРеквизитаПоТипуИ = УсловиеРеквизитаПоТипуИ + "ТипЗнч(Параметры.Строка." + РеквизитТЧ.Имя + ")" + "=Параметры.ДопустимыеЗначения[" + ИтераторЗначений + "] ";
							ИтераторЗначений = ИтераторЗначений + 1;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				УсловиеРеквизитаПоТипуИ = УсловиеРеквизитаПоТипуИ + ")";
				
				УсловиеРеквизита = СтрШаблон(
					"(%1 И (%2))%3",
					УсловиеРеквизитаПоТипуИ,
					УсловиеРеквизита,
					?(ЗначениеЗаполнено(УсловиеРеквизитаПоТипуИЛИ), " ИЛИ " + УсловиеРеквизитаПоТипуИЛИ, ""));
				
			КонецЕсли;
			
			ПараметрыУсловия.Вставить("ДопустимыеЗначения", ДопустимыеЗначения);
			ДобавляемыеСтроки = НайтиПоУсловию(ДобавляемыеСтроки, РеквизитТЧ.Имя, УсловиеРеквизита, РеквизитТЧ.Тип, ПараметрыУсловия);
			
		КонецЦикла;
		
	КонецЦикла;
	
	КолонкиКоторыеНеКопируются = "СерииНоменклатуры, СерииНоменклатурыОприходование, КлючСвязи, КлючСвязиСерииНоменклатуры";
	
	НоваяСтрока = Неопределено;
	Для каждого Строка Из ДобавляемыеСтроки Цикл
		
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		
		ИсключаяКолонкиНовый = "";
		
		Для каждого Колонка Из Реквизиты Цикл
			Если СтрНайти(ИсключаяКолонки, Колонка.Имя) <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(КолонкиКоторыеНеКопируются, Колонка.Имя) <> 0 Тогда
				ИсключаяКолонкиНовый = ИсключаяКолонкиНовый + "," + Колонка.Имя;
				Продолжить;
			КонецЕсли;
			
			Если НЕ Колонка.Тип.СодержитТип(ТипЗнч(Строка[Колонка.Имя])) Тогда
				ИсключаяКолонкиНовый = ИсключаяКолонкиНовый + "," + Колонка.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , ИсключаяКолонкиНовый);
		
		ВыделенныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	КоличествоВставленных = ДобавляемыеСтроки.Количество();
	
	Если НоваяСтрока <> Неопределено Тогда
		ЭлементыФормы[ИмяТЧ].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиПоУсловию(ТЗ, РеквизитОтбора, Условие, ДопустимыеТипы, Параметры)
	
	НоваяТЗ = ТЗ.СкопироватьКолонки();
	
	Для каждого Строка Из ТЗ Цикл
		
		Параметры.Вставить("Строка", Строка);
		
		ПодходящаяСтрока = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Строка[РеквизитОтбора]) Тогда
			ПодходящаяСтрока = Истина;
		ИначеЕсли ДопустимыеТипы.СодержитТип(ТипЗнч(Строка[РеквизитОтбора])) Тогда
			ПодходящаяСтрока = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Условие, Параметры);
		КонецЕсли;
		
		Если ПодходящаяСтрока Тогда
			НоваяСтрока = НоваяТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НоваяТЗ;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Наименование");
	Поля.Добавить("Обновляемый");
	Поля.Добавить("ПометкаУдаления");
	Поля.Добавить("ЭтоГруппа");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.ЭтоГруппа Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеСегментовНоменклатуры.Сегмент КАК Сегмент,
	|	ФормированиеСегментовНоменклатуры.ДатаПоследнегоФормирования КАК ДатаПоследнегоФормирования
	|ИЗ
	|	РегистрСведений.ФормированиеСегментовНоменклатуры КАК ФормированиеСегментовНоменклатуры
	|ГДЕ
	|	ФормированиеСегментовНоменклатуры.Сегмент = &Сегмент";
	
	Запрос.УстановитьПараметр("Сегмент", Данные.Ссылка); 
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаОбновления = Дата(1, 1, 1, 0, 0, 0);
	
	Пока Выборка.Следующий() Цикл
		ДатаОбновления = Выборка.ДатаПоследнегоФормирования;	
	КонецЦикла;
	
	Состояние = "";
	ДатаСтрокой = "";
	Если НачалоДня(ДатаОбновления) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДатаСтрокой = СтрШаблон(НСтр("ru = 'сегодня в %1'"), Формат(ДатаОбновления, "ДФ = ЧЧ:мм"));
	Иначе
		ДатаСтрокой = Формат(ДатаОбновления, "ДФ = дд.ММ.гггг ЧЧ:мм");
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаОбновления) Тогда
		Состояние = СтрШаблон(НСтр("ru = '(сформирован %1)'"), ДатаСтрокой);
	Иначе
		Состояние = НСтр("ru='(не сформирован)'");
	КонецЕсли;
			
	Представление = СтрШаблон(НСтр("ru = '%1 %2'"), Данные.Наименование, Состояние);
	
КонецПроцедуры

#КонецОбласти

