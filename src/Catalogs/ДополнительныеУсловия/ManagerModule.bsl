#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает типовые условия для заполнения печатных форм.
// Если существует сохраненная пустая настройка типового условия, то возвращает пустую ссылку.
//
//  Параметры:
//    Настройка - ПланВидовХарактеристикСсылка.НастройкиПользователей
//    Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//    СправочникСсылка.ДополнительныеУсловия 
//
Функция ПолучитьТиповыеУсловия(Настройка = Неопределено, Организация = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеУсловия.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеУсловия КАК ДополнительныеУсловия
	|ГДЕ
	|	ДополнительныеУсловия.ИмяМакета = ""ТиповыеУсловия""";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТиповыеУсловия = Выборка.Ссылка;
	Иначе
		ТиповыеУсловия = Справочники.ДополнительныеУсловия.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =	
		"ВЫБРАТЬ
		|	НастройкиПользователей.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Пользователь = &Пользователь
		|	И НастройкиПользователей.Настройка = &Настройка
		|	И НастройкиПользователей.Значение = &Значение
		|";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("Настройка", Настройка);
		Запрос.УстановитьПараметр("Значение", ПустаяСсылка());
		
		Если Организация <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "	И НастройкиПользователей.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", Организация);		
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Количество() <> 0 Тогда
			ТиповыеУсловия = ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТиповыеУсловия;
	
КонецФункции

// Устарела. Будет удалена в следующей версии.
//
Процедура ЗаполнениеТиповыхДополнительныхУсловий() Экспорт

	ТиповыеМакеты = Новый Структура;
	МетаданныеМакеты = Метаданные.Справочники.ДополнительныеУсловия.Макеты;
	Для Каждого МетаМакета Из МетаданныеМакеты Цикл
		ТиповыеМакеты.Вставить(МетаМакета.Имя, МетаМакета);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеУсловия.ИмяМакета
	|ИЗ
	|	Справочник.ДополнительныеУсловия КАК ДополнительныеУсловия
	|ГДЕ
	|	ДополнительныеУсловия.ИмяМакета <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если ТиповыеМакеты.Свойство(Выборка.ИмяМакета) Тогда
			// Второй раз не добавляем
			ТиповыеМакеты.Удалить(Выборка.ИмяМакета);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ТиповыеМакеты Цикл
	
		Попытка
		
			ДополнительныеУсловияОбъект = Справочники.ДополнительныеУсловия.СоздатьЭлемент();
			ДополнительныеУсловияОбъект.Наименование 	= КлючИЗначение.Значение.Синоним;
			ДополнительныеУсловияОбъект.ИмяМакета		= КлючИЗначение.Ключ;
			
			Макет = Справочники.ДополнительныеУсловия.ПолучитьМакет(КлючИЗначение.Ключ);
			ДополнительныеУсловияОбъект.ТекстУсловий = Макет.ПолучитьТекст();
			
			ДополнительныеУсловияОбъект.Записать();
			
		Исключение
	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать дополнительные условия: %1 по причине:
					|%2'"),
					КлючИЗначение.Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ДополнительныеУсловия, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеВерсииИБ

// Определяет настройки начального заполнения элементов.
//
// Параметры:
//  Настройки - Структура - настройки заполнения
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов
// 
// Параметры:
//   КодыЯзыков - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.КодыЯзыков
//   Элементы   - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.Элементы
//   ТабличныеЧасти - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.ТабличныеЧасти
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.Наименование = НСтр("ru='Типовые условия'");
	Элемент.ИмяМакета = "ТиповыеУсловия";
	Элемент.ТекстУсловий = ТекстУсловий("ТиповыеУсловия");
	
	Элемент = Элементы.Добавить();
	Элемент.Наименование = НСтр("ru='Оказание услуг'");
	Элемент.ИмяМакета = "ОказаниеУслуг";
	Элемент.ТекстУсловий = ТекстУсловий("ОказаниеУслуг");
	
	Элемент = Элементы.Добавить();
	Элемент.Наименование = НСтр("ru='Продажа и доставка товара'");
	Элемент.ИмяМакета = "ПродажаИДоставкаТовара";
	Элемент.ТекстУсловий = ТекстУсловий("ПродажаИДоставкаТовара");
	
	Элемент = Элементы.Добавить();
	Элемент.Наименование = НСтр("ru='Продажа товара на условиях самовывоза'");
	Элемент.ИмяМакета = "ПродажаТовараНаУсловияхСамовывоза";
	Элемент.ТекстУсловий = ТекстУсловий("ПродажаТовараНаУсловияхСамовывоза");
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлемента
//
// Параметры:
//  Объект                  - СправочникОбъект.ВидыКонтактнойИнформации - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения объекта.
//  ДополнительныеПараметры - Структура:
//   * ПредопределенныеДанные - ТаблицаЗначений - данные заполненные в процедуре ПриНачальномЗаполненииЭлементов.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	Объект.УстановитьНовыйКод();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстУсловий(ИмяМакета)
	
	Макет = Справочники.ДополнительныеУсловия.ПолучитьМакет(ИмяМакета);
	Возврат Макет.ПолучитьТекст();
	
КонецФункции

#КонецОбласти

#КонецЕсли
