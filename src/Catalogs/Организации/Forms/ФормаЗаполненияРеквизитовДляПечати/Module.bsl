
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	// ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект); // для проверки внедрения БСП
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если 1 = 0 Тогда
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект); // для проверки внедрения БСП
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Не ПравоДоступа("Изменение", Объект.Ссылка.Метаданные()) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяМенеджераПечати");
	ПараметрыОткрытия.Вставить("ИменаМакетов");
	ПараметрыОткрытия.Вставить("ПараметрКоманды");
	ПараметрыОткрытия.Вставить("ПараметрыПечати");
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Параметры);

	УстановитьКлючСохраненияПоложенияОкна();

	// СтандартныеПодсистемы.КонтактнаяИнформация
	СкрываемыеВиды = Новый Массив;
	РазмещеныНаФорме = Новый Соответствие;
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Истина);
	
	ВидыКИ = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(Справочники.Организации.ПустаяСсылка());
	Для каждого ВидКИ Из ВидыКИ Цикл
		Если РазмещеныНаФорме.Получить(ВидКИ.Ссылка) = Неопределено Тогда
			СкрываемыеВиды.Добавить(ВидКИ.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметры.ИмяЭлементаДляРазмещения = Элементы.ГруппаЮрАдрес.Имя;
	ДополнительныеПараметры.РазмещеныНаФорме = РазмещеныНаФорме;
	ДополнительныеПараметры.РазрешитьДобавлениеПолей = Ложь;
	ДополнительныеПараметры.СкрываемыеВиды = СкрываемыеВиды;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

	ИменаРеквизитовДляЗаполнения = РеквизитыОрганизацииДляЗаполнения(Параметры.ИменаРеквизитовДляЗаполнения);

	Если ВсеТребуемыеРеквизитыЗаполнены(ИменаРеквизитовДляЗаполнения) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если РегистрыСведений.СчетчикиПодсказок.ПревышеноЗначение(
		Перечисления.ВидыПодсказок.РеквизитыОрганизацииДляПечати, 5, , Параметры.Ключ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	НастроитьЭлементыФормы(ИменаРеквизитовДляЗаполнения);

	Если ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда
		АдресЛоготипа = НавигационнаяСсылкаКартинки(
		Объект.ФайлЛоготип, УникальныйИдентификатор);
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПечать) Тогда
		АдресФаксимильнойПечати = НавигационнаяСсылкаКартинки(
		Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьКлючСохраненияПоложенияОкна()

	Если ТипЗнч(ПараметрыОткрытия.ПараметрыПечати) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если Не ПараметрыОткрытия.ПараметрыПечати.Свойство("Идентификатор") Тогда
		Возврат;
	КонецЕсли;

	КлючСохраненияПоложенияОкна = СтрШаблон("%1/%2", Параметры.Ключ, ПараметрыОткрытия.ПараметрыПечати.Идентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия <> "Запись_Файл" Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИмяРеквизитаДляПомещаемогоИзображения) Тогда
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;

	Объект[ИмяРеквизитаДляПомещаемогоИзображения] = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);

	ФайлыСКартинками = НовоеОписаниеФайлыСКартинками();

	ЭтотОбъект[ФайлыСКартинками[ИмяРеквизитаДляПомещаемогоИзображения]] = НавигационнаяСсылкаКартинки(
		Объект[ИмяРеквизитаДляПомещаемогоИзображения], УникальныйИдентификатор);

	ИмяРеквизитаДляПомещаемогоИзображения = "";

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)

	ОбработатьНажатиеКартинки("ФайлЛоготип", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)

	ОбработатьНажатиеКартинки("ФайлФаксимильнаяПечать", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", , Элемент);

КонецПроцедуры

&НаКлиенте
Процедура БанкОчистка(Элемент, СтандартнаяОбработка)

	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");

КонецПроцедуры

&НаКлиенте
Процедура БанкСоздание(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаОбъекта", , Элемент);

КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранноеЗначение = "ЗагрузитьКлассификатор" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ЗагрузкаКлассификатораБанков.Форма.Форма");
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.КлассификаторБанков") Тогда
		Возврат;
	КонецЕсли;

	НайденныйБанк = БанкиУНФВызовСервера.СсылкаНаБанкИзКлассификатора(ВыбранноеЗначение);
	Если ЗначениеЗаполнено(НайденныйБанк) Тогда
		ВыбранноеЗначение = НайденныйБанк;
	Иначе
		Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ДанныеВыбора = БанкиУНФВызовСервера.БанкАвтоПодборДанныеВыбора(Текст);

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Закрыть();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКарточкуЛоготипа(Команда)

	ОткрытьКарточкуФайла("ФайлЛоготип");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФаксимильнойПечати(Команда)

	ОткрытьКарточкуФайла("ФайлФаксимильнаяПечать");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЛоготип(Команда)

	ДобавитьИзображение("ФайлЛоготип");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФаксимильнуюПечать(Команда)

	ДобавитьИзображение("ФайлФаксимильнаяПечать");

КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛоготип(Команда)

	УдалитьФайлКартинки("ФайлЛоготип");

КонецПроцедуры

&НаКлиенте
Процедура УдалитьФаксимильнуюПечать(Команда)

	УдалитьФайлКартинки("ФайлФаксимильнаяПечать");

КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)

	Если НомерСчетаУказанНекорректно() Тогда
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		ЗаписатьДанныеОбъекта();
		Модифицированность = Ложь;
	КонецЕсли;

	ОткрытьФорму(
	"ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, Строка(Новый УникальныйИдентификатор));

	Если БольшеНеПредлагатьЗаполнятьНедостающиеПоляПриПечати Тогда
		ОтключитьСчетчикПодсказок(Объект.Ссылка);
		Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры
&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере
Функция РеквизитыОрганизацииДляЗаполнения(ИменаРеквизитовДляЗаполнения)

	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	ИменаРеквизитовДляЗаполнения, , Истина, Истина);

КонецФункции

&НаСервере
Функция ВсеТребуемыеРеквизитыЗаполнены(ИменаРеквизитовДляЗаполнения)

	Для Каждого ТекРеквизит Из ИменаРеквизитовДляЗаполнения Цикл

		Если ТекРеквизит = "ЮрАдрес" Тогда
			Если НеЗаполненЮрАдрес() Тогда
				Возврат Ложь;
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Объект[ТекРеквизит]) Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаСервере
Функция ВидимостьГруппыЮрАдрес(ИменаРеквизитовДляЗаполнения)

	Если ИменаРеквизитовДляЗаполнения.Найти("ЮрАдрес") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат НеЗаполненЮрАдрес();

КонецФункции

&НаСервере
Функция НеЗаполненЮрАдрес()
	
	Для Каждого Элемент Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если Элемент.ЭтоИсторическаяКонтактнаяИнформация Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			
			Если Не ЗначениеЗаполнено(ЭтотОбъект[Элемент.ИмяРеквизита]) Тогда
				Возврат Истина;
			КонецЕсли;
			
			Возврат ЭтотОбъект[Элемент.ИмяРеквизита] = НСтр("ru = 'Заполнить'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ВидимостьГруппыРеквизитыОрганизации(ИменаРеквизитовДляЗаполнения)

	Если ИменаРеквизитовДляЗаполнения.Найти("ИНН") = Неопределено И ИменаРеквизитовДляЗаполнения.Найти("КПП")
		= Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
		Возврат Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.КПП) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Функция ВидимостьГруппыБанковскийСчет(ИменаРеквизитовДляЗаполнения)

	Если ИменаРеквизитовДляЗаполнения.Найти("БанковскийСчетПоУмолчанию") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетПоУмолчанию) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Функция ВидимостьГруппыЛоготип(ИменаРеквизитовДляЗаполнения)

	Возврат ИменаРеквизитовДляЗаполнения.Найти("ФайлЛоготип") <> Неопределено;

КонецФункции

&НаСервере
Функция ВидимостьГруппыФаксимильнаяПечать(ИменаРеквизитовДляЗаполнения)

	Возврат ИменаРеквизитовДляЗаполнения.Найти("ФайлФаксимильнаяПечать") <> Неопределено;

КонецФункции

&НаСервере
Функция ВидимостьГруппыЛоготипИПечать(ИменаРеквизитовДляЗаполнения)

	Если ВидимостьГруппыЛоготип(ИменаРеквизитовДляЗаполнения) И Не ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда
		Возврат Истина;
	КонецЕсли;

	Если ВидимостьГруппыФаксимильнаяПечать(ИменаРеквизитовДляЗаполнения) И Не ЗначениеЗаполнено(
		Объект.ФайлФаксимильнаяПечать) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормы(ИменаРеквизитовДляЗаполнения)

	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");

	Элементы.ГруппаРеквизиты.Видимость = ВидимостьГруппыРеквизитыОрганизации(ИменаРеквизитовДляЗаполнения);
	Элементы.КПП.Видимость = Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Элементы.ГруппаБанковскийСчет.Видимость = ВидимостьГруппыБанковскийСчет(ИменаРеквизитовДляЗаполнения);
	Элементы.ГруппаЮрАдрес.Видимость = ВидимостьГруппыЮрАдрес(ИменаРеквизитовДляЗаполнения);

	Элементы.ЛеваяКолонка.Видимость = Элементы.ГруппаРеквизиты.Видимость Или Элементы.ГруппаБанковскийСчет.Видимость
		Или Элементы.ГруппаЮрАдрес.Видимость;

	Элементы.ГруппаЛоготип.Видимость = ВидимостьГруппыЛоготип(ИменаРеквизитовДляЗаполнения);
	Элементы.ГруппаФаксимильнаяПечать.Видимость = ВидимостьГруппыФаксимильнаяПечать(ИменаРеквизитовДляЗаполнения);

	Элементы.СправочникОрганизацииНапечататьПомощникРаботыФаксимильнойПечати.Видимость = Элементы.ГруппаФаксимильнаяПечать.Видимость;

	Элементы.ГруппаЛоготипИПечать.Видимость = ВидимостьГруппыЛоготипИПечать(ИменаРеквизитовДляЗаполнения);

	Если Элементы.ГруппаЛоготип.Видимость И Элементы.ГруппаФаксимильнаяПечать.Видимость Тогда
		Возврат;
	КонецЕсли;

	Элементы.ГруппаЛоготипИПечать.ОтображатьЗаголовок = Ложь;
	Элементы.ГруппаЛоготип.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаФаксимильнаяПечать.ОтображатьЗаголовок = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтключитьСчетчикПодсказок(Организация)

	РегистрыСведений.СчетчикиПодсказок.ОтключитьСчетчик(
	Перечисления.ВидыПодсказок.РеквизитыОрганизацииДляПечати, 10, , Организация);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеОбъекта()

	Отказ = Ложь;
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	УстановитьБанковскийСчетПоУмолчанию();
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, Объект);
	Записать();
	ОбработатьУдалениеПрисоединяемыхФайловПриЗаписи();

КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетПоУмолчанию()

	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Банк) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		Банк = БанкиУНФ.БанкИзКлассификатора(Банк);
	КонецЕсли;

	БанковскийСчетПоПараметрам = БанковскийСчетПоПараметрам(Объект.Ссылка, Банк, НомерСчета);
	Если ЗначениеЗаполнено(БанковскийСчетПоПараметрам) Тогда
		Объект.БанковскийСчетПоУмолчанию = БанковскийСчетПоПараметрам;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.БанковскийСчетПоУмолчанию) Тогда
		БанковскийСчет = Объект.БанковскийСчетПоУмолчанию.ПолучитьОбъект();
		БанковскийСчет.Заблокировать();
	Иначе
		БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		БанковскийСчет.Заполнить(Объект.Ссылка);
	КонецЕсли;

	БанковскийСчет.Банк = Банк;
	БанковскийСчет.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
	БанковскийСчет.НомерСчета = НомерСчета;
	БанковскийСчет.СформироватьНаименование();
	БанковскийСчет.Записать();

	Объект.БанковскийСчетПоУмолчанию = БанковскийСчет.Ссылка;

КонецПроцедуры

&НаСервереБезКонтекста
Функция БанковскийСчетПоПараметрам(Владелец, Банк, НомерСчета)

	Результат = Справочники.БанковскиеСчета.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Банк = &Банк
	|	И БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &НомерСчета";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовоеОписаниеФайлыСКартинками()

	Результат = Новый Соответствие;
	Результат["ФайлЛоготип"] = "АдресЛоготипа";
	Результат["ФайлФаксимильнаяПечать"] = "АдресФаксимильнойПечати";

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)

	Результат = "";

	Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
		Возврат Результат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Попытка

		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы = ИдентификаторФормы;

		Результат = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ДополнительныеПараметры).СсылкаНаДвоичныеДанныеФайла;

	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = "";
	КонецПопытки;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбработатьНажатиеКартинки(ИмяРеквизитаСКартинкой, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаСКартинкой]) Тогда
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Объект[ИмяРеквизитаСКартинкой], УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;

	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект[ИмяРеквизитаСКартинкой]) Тогда
		ДобавитьИзображение(ИмяРеквизитаСКартинкой);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(ИмяРеквизитаСКартинкой)

	ЗаблокироватьДанныеФормыДляРедактирования();

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НачатьПомещениеИзображения(ИмяРеквизитаСКартинкой);
		Возврат;
	КонецЕсли;

	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ДобавитьИзображениеПродолжение", ЭтотОбъект, Параметры);

	ПоказатьВопрос(
	ОбработчикОповещенияОЗакрытии, НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'"),
		РежимДиалогаВопрос.ОКОтмена);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеПродолжение(Ответ, Параметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;

	Если Не Параметры.Форма.Записать() Тогда
		Возврат;
	КонецЕсли;

	НачатьПомещениеИзображения(Параметры);

КонецПроцедуры

&НаКлиенте
Процедура НачатьПомещениеИзображения(ИмяРеквизитаСКартинкой)

	ИмяРеквизитаДляПомещаемогоИзображения = ИмяРеквизитаСКартинкой;

	ФильтрФайловИзображений = РаботаСФайламиУНФКлиентСервер.ФильтрФайловИзображений();

	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, ФильтрФайловИзображений);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлКартинки(ИмяРеквизита)

	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = НоваяСтруктураКэшЗначений();
	КонецЕсли;

	Модифицированность = Истина;

	ДобавитьВСписокУдаляемых(ИмяРеквизита);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокУдаляемых(ИмяРеквизита)

	Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Возврат;
	КонецЕсли;

	КэшЗначений.УдаляемыеФайлы[Объект[ИмяРеквизита]] = Истина;
	Объект[ИмяРеквизита] = ПредопределенноеЗначение("Справочник.ОрганизацииПрисоединенныеФайлы.ПустаяСсылка");
	ФайлыСКартинками = НовоеОписаниеФайлыСКартинками();
	ЭтотОбъект[ФайлыСКартинками[ИмяРеквизита]] = "";

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(ИмяРеквизитаСКартинкой)

	ПоказатьЗначение( , Объект[ИмяРеквизитаСКартинкой]);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НоваяСтруктураКэшЗначений()

	Результат = Новый Структура;
	Результат.Вставить("УдаляемыеФайлы", Новый Соответствие);
	Результат.Вставить("ИменаФайлов", Новый Соответствие);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ОбработатьУдалениеПрисоединяемыхФайловПриЗаписи()

	Если Не ЗначениеЗаполнено(КэшЗначений) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого КлючиИЗначение Из КэшЗначений.УдаляемыеФайлы Цикл
		ОбъектФайл = КлючиИЗначение.Ключ.ПолучитьОбъект();
		Если ОбъектФайл <> Неопределено Тогда
			ОбъектФайл.Заблокировать();
			ОбъектФайл.Удалить();
		КонецЕсли;
	КонецЦикла;

	КэшЗначений.УдаляемыеФайлы.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)

	НомерСчета = ТолькоЦифрыИзСтроки(НомерСчета);

КонецПроцедуры

&НаКлиенте
Функция ТолькоЦифрыИзСтроки(ВходящаяСтрока)

	Результат = "";

	Для Итератор = 1 По СтрДлина(ВходящаяСтрока) Цикл

		Символ = Сред(ВходящаяСтрока, Итератор, 1);
		ЭтоЦифра = СтрНайти("0123456789", Символ) > 0;

		Если ЭтоЦифра Тогда
			Результат = Результат + Символ;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция НомерСчетаУказанНекорректно()

	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СтрДлина(НомерСчета) = 20 Тогда
		Возврат Ложь;
	КонецЕсли;

	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Требуется указать строго 20 цифр.'"), , "НомерСчета");

	Возврат Истина;

КонецФункции

#КонецОбласти