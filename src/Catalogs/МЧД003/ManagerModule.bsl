// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	МашиночитаемыеДоверенности.ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация,
		СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	МашиночитаемыеДоверенности.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Дополняет массив доверенностями версии 003 по отбору
// 
// Параметры:
//  Отбор - см. МашиночитаемыеДоверенности.НовыйОтборМЧД
//  Доверенности - Массив Из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МЧД003
//  
Процедура ДополнитьСписокДоверенностейПоОтбору(Отбор, Доверенности) Экспорт

	Если ТипЗнч(Отбор.Сертификат) = Тип("СертификатКриптографии") Тогда
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Отбор.Сертификат);
	Иначе
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Отбор.Сертификат);
	КонецЕсли;
	
	ПредставительИНН = СвойстваСубъектаСертификата.ИНН;

	РеквизитыДоверителя = НовыеРеквизитыОтбора();
	РеквизитыДоверителя.ИНН = Отбор.Доверитель.ИНН;
	РеквизитыПредставителя = НовыеРеквизитыОтбора();
	РеквизитыПредставителя.ИНН =  ПредставительИНН;
	
	ТаблицаДоверенностей = 
		ПолучитьДоверенностиПоОтбору(РеквизитыДоверителя, РеквизитыПредставителя, ТекущаяДатаСеанса());
	
	Для Каждого СтрокаТЗ Из ТаблицаДоверенностей Цикл
		Доверенности.Добавить(СтрокаТЗ.Ссылка);
	КонецЦикла;

КонецПроцедуры

// Параметры:
//  ФайлДоверенности - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Строка
Функция ПолучитьСНИЛСЛицДействующихБезДоверенностиПоФайлу(ФайлДоверенности) Экспорт
	РезультатЧтения = ПрочитатьОбъектМЧД(ФайлДоверенности);
	ОбъектМЧД = РезультатЧтения.ОбъектМЧД; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
	СведенияОДоверителях = ОбъектМЧД.Документ.Довер.СвДоверит; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
	ТипыДоверителей = ТипыДоверителей();
	Для Каждого СведенияОДоверителе Из СведенияОДоверителях Цикл
		Если СведенияОДоверителе.ТипДоверит = ТипыДоверителей.ЮридическоеЛицо Тогда
			ЛицаБезДоверенности = СведенияОДоверителе.Доверит.РосОргДовер.ЛицоБезДов; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
			Для Каждого ЛицоБезДоверенности Из ЛицаБезДоверенности Цикл
				Если ЛицоБезДоверенности.СвФЛ <> Неопределено Тогда
					Возврат ЛицоБезДоверенности.СвФЛ.СНИЛС;
				КонецЕсли;
				Если ЛицоБезДоверенности.СВЮЛ <> Неопределено Тогда
					СписокФизЛиц = ЛицоБезДоверенности.СВЮЛ.СвФЛ; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвФЛТип
					Для Каждого ФизЛицо Из СписокФизЛиц Цикл
						Возврат ФизЛицо.СНИЛС;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СведенияОДоверителе.ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
			Возврат СведенияОДоверителе.Доверит.ИПДовер.СНИЛС;
		КонецЕсли;
	КонецЦикла;
	Возврат "";
КонецФункции

// Получает ИНН и КПП доверителей
// 
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003
//  
// Возвращаемое значение:
//  Массив Из Структура:
//   * ИНН - Строка
//   * КПП - Строка
//
Функция ПолучитьИННКППДоверителей(Доверенность) Экспорт
	
	ДанныеДоверителей = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МЧД003Доверители.ИНН,
		|	МЧД003Доверители.КПП
		|ИЗ
		|	Справочник.МЧД003.Доверители КАК МЧД003Доверители
		|ГДЕ
		|	МЧД003Доверители.Ссылка = &Доверенность
		|	И МЧД003Доверители.ТипДоверителя <> """"
		|	И МЧД003Доверители.ИНН <> """"
		|СГРУППИРОВАТЬ ПО
		|	МЧД003Доверители.ИНН,
		|	МЧД003Доверители.КПП";
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеИННКПП = Новый Структура("ИНН, КПП");
		ЗаполнитьЗначенияСвойств(ДанныеИННКПП, Выборка);
		ДанныеДоверителей.Добавить(ДанныеИННКПП);
	КонецЦикла;
	
	Возврат ДанныеДоверителей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаПодписи

// Возвращает сведения МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеСведенияМЧД
//  
Функция СведенияМЧД(МЧД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МЧД003.ДатаВыдачи КАК ДатаВыдачи,
		|	МЧД003.СрокДействия КАК ДатаОкончания,
		|	МЧД003.НомерДоверенности КАК НомерДоверенности,
		|	МЧД003.ПолномочияОграничены КАК ПолномочияОграничены,
		|	МЧД003.ДатаПрекращения КАК ДатаОтзыва,
		|	МЧД003.Верна КАК Верна,
		|	МЧД003.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МЧД003.ДатаПрекращения > ДАТАВРЕМЯ(1, 1, 1) КАК Отозвана,
		|	МЧД003.ВариантЗаполненияПолномочий КАК ВариантЗаполненияПолномочий
		|ПОМЕСТИТЬ Доверенность
		|ИЗ
		|	Справочник.МЧД003 КАК МЧД003
		|ГДЕ
		|	МЧД003.Ссылка = &МЧД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	МЧД003Доверители.ИНН КАК ИННДоверителя
		|ПОМЕСТИТЬ Доверители
		|ИЗ
		|	Справочник.МЧД003.Доверители КАК МЧД003Доверители
		|ГДЕ
		|	МЧД003Доверители.Ссылка = &МЧД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МЧД003Представители.ИНН КАК ИННПредставителя
		|ИЗ
		|	Справочник.МЧД003.Представители КАК МЧД003Представители
		|ГДЕ
		|	МЧД003Представители.Ссылка = &МЧД
		|
		|УПОРЯДОЧИТЬ ПО
		|	МЧД003Представители.НомерСтроки";
	
	Запрос.УстановитьПараметр("МЧД", МЧД);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();;
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = МашиночитаемыеДоверенности.НовыеСведенияМЧД();
	Результат.Ссылка = МЧД;
	Результат.СовместныеПолномочия = Ложь;
	Результат.ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(МЧД);
	
	Выборка = Запрос.МенеджерВременныхТаблиц.Таблицы.Получить("Доверенность").ПолучитьДанные().Выбрать();
	Выборка.Следующий();
	Реквизиты = "НомерДоверенности, ДатаВыдачи, ДатаОкончания, ПолномочияОграничены, ДатаОтзыва, Верна, 
				|СтатусВРеестреФНС, Отозвана";
	ЗаполнитьЗначенияСвойств(Результат, Выборка, Реквизиты);
	Результат.Подписана = Результат.Верна;
	Результат.ПолномочияУказаныИзКлассификатора = МашиночитаемыеДоверенности.ПолномочияМЧДУказаныИзКлассификатора( ,
		Выборка.ВариантЗаполненияПолномочий);
	
	Выборка = Запрос.МенеджерВременныхТаблиц.Таблицы.Получить("Доверители").ПолучитьДанные().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка, "ИННДоверителя");
	
	Выборка = РезультатЗапроса.Выбрать();
	Результат.НесколькоПредставителей = Выборка.Количество() > 1;
	Пока Выборка.Следующий() Цикл
		Результат.ИННПредставителей.Добавить(Выборка.ИННПредставителя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДоверенности

// Загружает МЧД по сведениям из реестра ФНС
// 
// Параметры:
//  СведенияРеестраФНС - см. МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностиНаСервереМЧД
// 
// Возвращаемое значение:
//  см. МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД
Функция ЗагрузитьМЧД(СведенияРеестраФНС) Экспорт
	
	Результат = МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД();
	
	ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
	ДополнительныеСведения.ДатаЗагрузки = СведенияРеестраФНС.ДатаЗагрузкиИзРеестра;
	ДополнительныеСведения.СтатусВРеестреФНС = МашиночитаемыеДоверенностиКлиентСервер.СтатусВРеестреФНС(
		СведенияРеестраФНС.ЧастичныеДанные.СтатусДоверенности);
		
	РезультатЗагрузки = ЗагрузитьМЧДИзФайла(СведенияРеестраФНС.ПолныеДанные.ДанныеАрхива,, ДополнительныеСведения);
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.МЧД) Тогда
		Результат.Сведения = СведенияМЧД(РезультатЗагрузки.МЧД);
	Иначе
		Результат.ОписаниеОшибки = РезультатЗагрузки.ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Загружает в элемент справочника данные из архива с файлом МЧД и подписями.
// Перезаполняет если доверенность с таким номером и двоичными существует, иначе создает новый элемент справочника.
//
// Параметры:
//  ДанныеФайла - ДвоичныеДанные, Строка - Двоичные данные архива или адрес во временном хранилище,
//  			- см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД.
//  МЧД			- СправочникСсылка.МЧД003
//  ДополнительныеСведения - См. МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД
//  						- Неопределено
//
// Возвращаемое значение:
//  Структура:
//  * МЧД - СправочникСсылка.МЧД003
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  * ДанныеДляПроверки - См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  * ДанныеДляПроверки - Неопределено
//  * ТекстОшибки - Строка -
Функция ЗагрузитьМЧДИзФайла(ДанныеФайла, МЧД = Неопределено, ДополнительныеСведения = Неопределено) Экспорт

	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;

	Результат = Новый Структура;
	Результат.Вставить("МЧД", ПустаяСсылка());
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", ТребуетсяПроверкаМЧДНаКлиенте);
	Результат.Вставить("ДанныеДляПроверки", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
	
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		ДанныеАрхива = ДанныеФайла;
	Иначе
		ДанныеАрхива = МашиночитаемыеДоверенности.ПрочитатьАрхив(ДанныеФайла);
	КонецЕсли;
	
	Если ДанныеАрхива = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	ДанныеДляПроверки.ДанныеДоверенности = ДанныеАрхива.ДанныеДоверенности;
	ДанныеДляПроверки.ДанныеПодписи = ДанныеАрхива.ДанныеПодписи;
	Результат.ДанныеДляПроверки = ДанныеДляПроверки;
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = ДанныеАрхива.ДанныеДоверенности;
	ДанныеДляЗагрузки.ДанныеПодписи = ДанныеАрхива.ДанныеПодписи;
	ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = ДанныеАрхива.ДанныеПодписиЗаявленияНаОтмену;
	Если ДанныеАрхива.Свойство("ДанныеПодписей") Тогда
		ДанныеДляЗагрузки.ДанныеПодписей = ДанныеАрхива.ДанныеПодписей;
	Иначе
		ДанныеДляЗагрузки.ДанныеПодписей.Добавить(ДанныеАрхива.ДанныеПодписи);
	КонецЕсли;

	Если ДополнительныеСведения = Неопределено Тогда
		ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
	КонецЕсли;

	РезультатЗагрузки = ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки, ТребуетсяПроверкаМЧДНаКлиенте, Истина,
		ДополнительныеСведения, МЧД, Ложь);
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;

	Если Не РезультатЗагрузки.Выполнено Тогда
		ВидОперации = НСтр("ru = 'Загрузка машиночитаемой доверенности из файла.'");
		ТекстОшибки = НСтр("ru = 'Ошибка при заполнении доверенности из файла:'") + Символы.ПС
			+ РезультатЗагрузки.Ошибка;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;

	Результат.МЧД = РезультатЗагрузки.Ссылка;

	Возврат Результат;

КонецФункции

// Загружает элемент справочника из файла обмена.
// 
// Параметры:
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  ОбновлятьСуществующий - Булево - Если Истина, то будет обновлен существующий элемент, если он найден.
//  ДополнительныеСведения - Структура - Если переданы, то будут заполнены в элементе справочника.
//  МЧД	- СправочникСсылка.МЧД003
//  ЭтоРучноеСоздание - Булево - Признак создания МЧД вручную через форму
// 
// Возвращаемое значение:
//  Структура - Результат загрузки:
//   * Выполнено - Булево - Признак успешности выполнения загрузки.
//   * Ссылка - Неопределено, СправочникСсылка.МЧД003 - Ссылка на элемент справочника.
//   * Ошибка - Строка - Текст ошибки, если не удалось загрузить элемент.
//   * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки, ТребуетсяПроверкаМЧДНаКлиенте, ОбновлятьСуществующий = Ложь,
	ДополнительныеСведения = Неопределено, МЧД = Неопределено, ЭтоРучноеСоздание) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);
		
	РезультатЧтения = ДанныеДляЗагрузкиМЧД(ДанныеДляЗагрузки.ДанныеДоверенности);
	ДанныеДоверенности = РезультатЧтения.ДанныеДляЗаполнения;
	Если ДанныеДоверенности = Неопределено Тогда
		Результат.Ошибка = РезультатЧтения.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДополнительныеСведения) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеДоверенности, ДополнительныеСведения, Истина);
	КонецЕсли;
		
	ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий, ДанныеДляЗагрузки,
		ТребуетсяПроверкаМЧДНаКлиенте, ЭтоРучноеСоздание, МЧД);
	Результат.Ссылка = ТекущийЭлемент;
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;
	Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
		Результат.Выполнено = Истина;
	Иначе
		Результат.Ошибка = НСтр("ru = 'Не удалось записать элемент справочника. Подробности в журнале регистрации.'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Заполняет и записывает элемент справочника.
//
// Параметры:
//  ДанныеДоверенности - См. НовыеДанныеДляЗаполнения
//  ОбновлятьСуществующий - Булево - Обновлять существующий
//  ДанныеДляЗагрузки - См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  ЭтоРучноеСоздание - Булево - Признак создания МЧД вручную через форму
//  МЧД	- СправочникСсылка.МЧД003
// 
//  Возвращаемое значение:
//   СправочникСсылка.МЧД003 - Ссылка на элемент справочника.
//
Функция ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий, ДанныеДляЗагрузки,
	ТребуетсяПроверкаМЧДНаКлиенте, ЭтоРучноеСоздание, МЧД = Неопределено)
	
	Результат = ПустаяСсылка();
	НашлиЭлемент = Неопределено;
	
	Если ЗначениеЗаполнено(МЧД) Тогда
		НашлиЭлемент = МЧД;
	КонецЕсли;
	
	Если ОбновлятьСуществующий И Не ЗначениеЗаполнено(НашлиЭлемент) Тогда
		НашлиЭлемент = НайтиПоРеквизиту("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
	КонецЕсли;

	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	ДанныеДляПроверки.ДанныеДоверенности = ДанныеДляЗагрузки.ДанныеДоверенности;
	ДанныеДляПроверки.ДанныеПодписи = ДанныеДляЗагрузки.ДанныеПодписи;
	
	Если МашиночитаемыеДоверенности.ТребуетсяПерезаполнениеМЧД(
		ОбъектСправочника, ДанныеДляЗагрузки, МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003()) Тогда
		ПерезаполнитьОбъектМЧД(ОбъектСправочника, ДанныеДоверенности, ДанныеДляЗагрузки);
	Иначе
		Если (ДанныеДоверенности.Свойство("СтатусВРеестреФНС")
			И ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка()
			И ДанныеДоверенности.СтатусВРеестреФНС <> ОбъектСправочника.СтатусВРеестреФНС) Тогда
			ОбъектСправочника.СтатусВРеестреФНС = ДанныеДоверенности.СтатусВРеестреФНС;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДоверенности.Свойство("Комментарий") Тогда
		ОбъектСправочника.Комментарий = ДанныеДоверенности.Комментарий;
	КонецЕсли;
	
	МашиночитаемыеДоверенности.ЗаполнитьПодписанаВерна(
		ОбъектСправочника, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте,
		МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003());
	
	ОтсутствуетВозможностьПроверитьНаСервере = Не ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере();
	ЭтоПровереннаяРеестроваяМЧД =
		МашиночитаемыеДоверенности.ЭтоПровереннаяРеестроваяМЧД(ДанныеДляПроверки, ДанныеДоверенности);
	
	Если ЭтоПровереннаяРеестроваяМЧД И ОтсутствуетВозможностьПроверитьНаСервере Тогда
		ОбъектСправочника.Верна = Истина;
	КонецЕсли;
	
	Если ЭтоРучноеСоздание И Не ЗначениеЗаполнено(ОбъектСправочника.СтатусВРеестреФНС) Тогда
		ОбъектСправочника.ДополнительныеСвойства.Вставить("НеЗаписыватьВЖурнал");
	КонецЕсли;
	
	Удачно = Ложь;
	
	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("Справочник.МЧД003");
		ЭлементБлокировки.УстановитьЗначение("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Если Не ОбъектСправочника.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
		КонецЕсли;
	
		Удачно = Истина;
	
		НачатьТранзакцию();
	
		Попытка
			Блокировка.Заблокировать();
			ОбъектСправочника.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИмяСобытия = НСтр("ru = 'Ошибка изменения МЧД.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДанныеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ДанныеОшибки);
			Удачно = Ложь;
		КонецПопытки;
	
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак того что МЧД нуждается в перезаполнении и перепроверке на сервере.
//
//	Параметры:
//	 Доверенность - СправочникОбъект.МЧД003
//	 НовыеДанные - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//
//	Возвращаемое значение:
//	 Булево
Функция ТребуетсяПерезаполнениеМЧД(Доверенность, НовыеДанные) Экспорт
	
	ИзменилсяФайлМЧД = (Доверенность.ФайлМЧД.Получить() <> НовыеДанные.ДанныеДоверенности);
	Если ИзменилсяФайлМЧД Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ИзменилисьДанныеОтзыва = ЗначениеЗаполнено(НовыеДанные.ДанныеПодписиЗаявленияНаОтмену)
		И Не ЗначениеЗаполнено(Доверенность.ДатаПрекращения);
	Если ИзменилисьДанныеОтзыва Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Доверенность.Подписи.Количество() > 0 Тогда
		
		Если Доверенность.Подписи.Количество() <> НовыеДанные.ДанныеПодписей.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого Строка Из Доверенность.Подписи Цикл
			ПодписьНайдена = Ложь;
			ТекущаяПодпись = Строка.Подпись.Получить();
			Для Каждого НоваяПодпись Из НовыеДанные.ДанныеПодписей Цикл
				Если ТекущаяПодпись = НоваяПодпись Тогда
					ПодписьНайдена = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПодписьНайдена Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет объект МЧД.
// 
// Параметры:
//  МЧД - СправочникОбъект.МЧД003
//  ДанныеДляЗаполнения - см. НовыеДанныеДляЗаполнения
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
Процедура ПерезаполнитьОбъектМЧД(МЧД, ДанныеДляЗаполнения, ДанныеДляЗагрузки)
	
	МЧД.Подписи.Очистить();
	МЧД.Доверители.Очистить();
	МЧД.Представители.Очистить();
	МЧД.Полномочия.Очистить();
	МЧД.ДатаПрекращения = '00010101';
	МЧД.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка();
	МЧД.ПроверкаВыполнена = Ложь;
	МЧД.ПротоколПроверки = Неопределено;
	МЧД.Верна = Ложь;
	МЧД.ТекстовоеПолномочие = "";
	МЧД.ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.ПустаяСсылка();
	
	Если ДанныеДляЗагрузки.Свойство("ДанныеМЧД") Тогда
		МЧД.ФайлМЧД = Новый ХранилищеЗначения(ДанныеДляЗагрузки.ДанныеМЧД, Новый СжатиеДанных(9));
	Иначе
		МЧД.ФайлМЧД = Новый ХранилищеЗначения(ДанныеДляЗагрузки.ДанныеДоверенности, Новый СжатиеДанных(9));
	КонецЕсли;
	ПереченьСвойств = "НомерДоверенности, ДатаВыдачи, СрокДействия, ПолномочияОграничены, ТекстовоеПолномочие,
		|ВариантЗаполненияПолномочий, СовместныеПолномочия, СтатусВРеестреФНС";
	ЗаполнитьЗначенияСвойств(МЧД, ДанныеДляЗаполнения, ПереченьСвойств);
	
	МашиночитаемыеДоверенности.ЗаполнитьРеквизитыОтзыва(МЧД, ДанныеДляЗагрузки);
	
	Для Каждого ДанныеУчастника Из ДанныеДляЗаполнения.Доверители Цикл
		
		Доверитель = МЧД.Доверители.Добавить();
		ЗаполнитьЗначенияСвойств(Доверитель, ДанныеУчастника, "ИНН, КПП, ОГРН, СНИЛС");
		Доверитель.ТипДоверителя = ДанныеУчастника.ТипУчастника;
		
	КонецЦикла;
	
	Для Каждого ДанныеУчастника Из ДанныеДляЗаполнения.Представители Цикл
		
		Представитель = МЧД.Представители.Добавить();
		ЗаполнитьЗначенияСвойств(Представитель, ДанныеУчастника, "ИНН, КПП, ОГРН, СНИЛС");
		Представитель.ТипПредставителя = ДанныеУчастника.ТипУчастника;
		
	КонецЦикла;
	
	Для Каждого Подпись Из ДанныеДляЗагрузки.ДанныеПодписей Цикл
		СтрокаТЧ = МЧД.Подписи.Добавить();
		СтрокаТЧ.Подпись = Новый ХранилищеЗначения(Подпись, Новый СжатиеДанных(9));
	КонецЦикла;
	
	Для Каждого ДанныеПолномочия Из ДанныеДляЗаполнения.Полномочия Цикл
		
		Полномочие = МЧД.Полномочия.Добавить();
		ЗаполнитьЗначенияСвойств(Полномочие, ДанныеПолномочия, "Мнемоника, Код, Наименование");
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает двоичные данные машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные машиночитаемой доверенности.
//
Функция ПолучитьДвоичныеДанныеМЧД(Ссылка) Экспорт
		
	ФайлМЧД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ФайлМЧД");
	Возврат ФайлМЧД.Получить();
	
КонецФункции

// Возвращает двоичные данные заявления на отзыв машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные заявления на отзыв машиночитаемой доверенности.
//
Функция ПолучитьДвоичныеДанныеЗаявленияНаОтзыв(Ссылка) Экспорт
		
	НомерДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерДоверенности");
	РезультатВыгрузки = МашиночитаемыеДоверенности.ВыгрузитьЗаявлениеНаОтменуМЧД(НомерДоверенности, "Отзыв");
	СтрокаXML = РезультатВыгрузки.Содержимое;
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(СтрокаXML, "windows-1251");
	
КонецФункции

// Формирует новые данные участника (доверителя или представителя).
// 
// Возвращаемое значение:
//  Структура - Новые данные участника: 
// * ТипУчастника - Строка
// * ИНН - Строка
// * КПП - Строка
// * ОГРН - Строка
// * СНИЛС - Строка - в формате 999-999-999 99
Функция НовыеДанныеУчастника()
	
	Результат = Новый Структура();
	Результат.Вставить("ТипУчастника", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("ОГРН", "");
	Результат.Вставить("СНИЛС", "");
	Возврат Результат;
	
КонецФункции

// Формирует новые данные машиночитаемого полномочия.
// 
// Возвращаемое значение:
//  Структура - Новые данные участника:
// * Мнемоника    - Строка
// * Код          - Строка
// * Наименование - Строка
Функция НовыеДанныеМашиночитаемогоПолномочия()
	
	Результат = Новый Структура();
	
	Результат.Вставить("Мнемоника",    "");
	Результат.Вставить("Код",          "");
	Результат.Вставить("Наименование", "");

	Возврат Результат;
	
КонецФункции

Функция ПолучитьУчастника_ЮридическоеЛицо(ДанныеXDTO)
	
	Участник = НовыеДанныеУчастника();
	Участник.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ИННЮЛ", "");
	Участник.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "КПП", "");
	Участник.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ОГРН", "");
	Возврат Участник;
	
КонецФункции

Функция ПолучитьУчастника_ИндивидуальныйПредприниматель(ДанныеXDTO)
	
	Участник = НовыеДанныеУчастника();
	Участник.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ИННФЛ", "");
	Участник.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ОГРНИП", "");
	Участник.СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "СНИЛС", "");
	Возврат Участник;
	
КонецФункции

Функция ПолучитьУчастника_ФизическоеЛицо(ДанныеXDTO)
	
	Участник = НовыеДанныеУчастника();
	Участник.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ИННФЛ", "");
	Участник.СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "СНИЛС", "");
	Возврат Участник;
	
КонецФункции

Функция ПолучитьУчастника_ФилиалЮридическогоЛица(ДанныеXDTO)
	
	Возврат ПолучитьУчастника_ЮридическоеЛицо(ДанныеXDTO);
	
КонецФункции

Функция ПолучитьУчастника_ИностраннаяОрганизация(ДанныеXDTO)
	
	Участник = НовыеДанныеУчастника();
	Участник.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ИННЮЛ", "");
	Участник.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "КПП", "");
	Возврат Участник;
	
КонецФункции

Функция ПолучитьУчастника_ФилиалИностраннойОрганизации(ДанныеXDTO)
	
	Возврат ПолучитьУчастника_ИностраннаяОрганизация(ДанныеXDTO);
	
КонецФункции

// Новые данные для загрузки МЧД.
// 
// Возвращаемое значение:
//  Структура - Новые данные для загрузки МЧД:
//  * НомерДоверенности - Строка
//  * ДатаВыдачи - Дата
//  * СрокДействия - Дата
//  * ПолномочияОграничены - Булево
//  * СовместныеПолномочия - Булево
//  * Доверители - Массив из см. НовыеДанныеУчастника
//  * Представители - Массив из см. НовыеДанныеУчастника
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  * Полномочия - Массив из см. НовыеДанныеМашиночитаемогоПолномочия
//  * ТекстовоеПолномочие - Строка
//  * ВариантЗаполненияПолномочий - ПеречислениеСсылка.ВариантыЗаполненияПолномочийМЧД
Функция НовыеДанныеДляЗаполнения()
	
	ДанныеДляЗагрузки = Новый Структура();
	ДанныеДляЗагрузки.Вставить("НомерДоверенности", "");
	ДанныеДляЗагрузки.Вставить("ДатаВыдачи", '00010101');
	ДанныеДляЗагрузки.Вставить("СрокДействия", '00010101');
	ДанныеДляЗагрузки.Вставить("ПолномочияОграничены", Истина);
	ДанныеДляЗагрузки.Вставить("СовместныеПолномочия", Ложь);
	ДанныеДляЗагрузки.Вставить("Доверители", Новый Массив());
	ДанныеДляЗагрузки.Вставить("Представители", Новый Массив());
	ДанныеДляЗагрузки.Вставить("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	ДанныеДляЗагрузки.Вставить("Полномочия", Новый Массив());
	ДанныеДляЗагрузки.Вставить("ТекстовоеПолномочие", "");
	ДанныеДляЗагрузки.Вставить("ВариантЗаполненияПолномочий", Перечисления.ВариантыЗаполненияПолномочийМЧД.ПустаяСсылка());
	
	Возврат ДанныеДляЗагрузки;
	
КонецФункции

// Возвращает данные, полученные из файла обмена.
// 
// Параметры:
//  ДанныеМЧД - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Структура:
//  * ТекстОшибки - Строка
//  * ДанныеДляЗаполнения - См. НовыеДанныеДляЗаполнения
//  * ДанныеДляЗаполнения - Неопределено
Функция ДанныеДляЗагрузкиМЧД(ДанныеМЧД)
	
	Результат = Новый Структура("ТекстОшибки, ДанныеДляЗаполнения", "", Неопределено);
	РезультатЧтения = ПрочитатьОбъектМЧД(ДанныеМЧД);
	ОбъектМЧД = РезультатЧтения.ОбъектМЧД;
	
	Если ОбъектМЧД = Неопределено Тогда
		Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияМЧД(ОбъектМЧД);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеДляЗаполненияМЧД(ОбъектМЧД)

	ДанныеДляЗаполнения = НовыеДанныеДляЗаполнения();
	
	СвДовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Довер.СвДов", Неопределено);
	Если СвДовXDTO <> Неопределено Тогда
		Сведения = СвДовXDTO;
	КонецЕсли;
	
	СвПереДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Передов.СвПереДовер", Неопределено);
	Если СвПереДоверXDTO <> Неопределено Тогда
		Сведения = СвПереДоверXDTO;
	КонецЕсли;
	
	ДанныеДляЗаполнения.НомерДоверенности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Сведения, "НомДовер", "");
	ДанныеДляЗаполнения.ДатаВыдачи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Сведения, "ДатаВыдДовер", '00010101', "Дата");
	ДанныеДляЗаполнения.СрокДействия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Сведения, "СрокДейст", '00010101', "Дата");
	
	ЗаполнитьДоверителей(ДанныеДляЗаполнения.Доверители, ОбъектМЧД);
	ЗаполнитьПредставителей(ДанныеДляЗаполнения.Представители, ОбъектМЧД);
	ЗаполнитьДанныеПолномочий(ДанныеДляЗаполнения, ОбъектМЧД);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции	

// Заполняет представителей.
// 
// Параметры:
//  МассивУчастников - Массив из см. НовыеДанныеУчастника
//  ОбъектМЧД - ОбъектXDTO
Процедура ЗаполнитьПредставителей(МассивУчастников, ОбъектМЧД)
	
	ТипыПредставителей = ТипыПредставителей();
	
	ПредставителиXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Довер.СвУпПред", , , Истина, Неопределено);
	Если ПредставителиXDTO = Неопределено Тогда
	    ПредставителиXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Передов.СвПолучПолн", , , Истина, Неопределено);
	КонецЕсли;
	
	Для Каждого ПредставительXDTO Из ПредставителиXDTO Цикл
		
		Участник = Неопределено;
		ТипУчастника = ПредставительXDTO.ТипПред;
		
		Если ТипУчастника = ТипыПредставителей.ЮридическоеЛицо Тогда
			СведОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведОрг");
			Участник = ПолучитьУчастника_ЮридическоеЛицо(СведОргXDTO);
		ИначеЕсли ТипУчастника = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			СведИПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИП");
			Участник = ПолучитьУчастника_ИндивидуальныйПредприниматель(СведИПXDTO);			
		ИначеЕсли ТипУчастника = ТипыПредставителей.ФизическоеЛицо Тогда	
			СведФизЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФизЛ");
			Участник = ПолучитьУчастника_ФизическоеЛицо(СведФизЛXDTO);
		ИначеЕсли ТипУчастника = ТипыПредставителей.ФилиалЮридическогоЛица Тогда
			СведФилиалXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФилиал");
			Участник = ПолучитьУчастника_ФилиалЮридическогоЛица(СведФилиалXDTO);
		ИначеЕсли ТипУчастника = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда	
			СведИОXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИО");
			Участник = ПолучитьУчастника_ФилиалИностраннойОрганизации(СведИОXDTO);
		КонецЕсли;	
		
		Если Участник <> Неопределено Тогда
			Участник.ТипУчастника = ТипУчастника;
			МассивУчастников.Добавить(Участник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет доверителей.
// 
// Параметры:
//  МассивУчастников - Массив из см. НовыеДанныеУчастника
//  ОбъектМЧД - ОбъектXDTO
Процедура ЗаполнитьДоверителей(МассивУчастников, ОбъектМЧД)
	
	ТипыДоверителей = ТипыДоверителей();
	ТипыПредставителей = ТипыПредставителей();
	ДаНет = Новый Структура("Да, Нет", "1", "0"); // Классификатор из формата
	
	СвДоверитXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Довер.СвДоверит", , , Истина, Неопределено); // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
	Если СвДоверитXDTO <> Неопределено Тогда
		Для Каждого ДоверительXDTO Из СвДоверитXDTO Цикл	
			
			Участник = Неопределено;
			ТипУчастника = ДоверительXDTO.ТипДоверит;
			
			Если ТипУчастника = ТипыДоверителей.ЮридическоеЛицо Тогда
				СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.РосОргДовер.СвРосОрг");
				Участник = ПолучитьУчастника_ЮридическоеЛицо(СвРосОргXDTO);
				Если ДоверительXDTO.Доверит.РосОргДовер.ЕИОФЛ = ДаНет.Да Тогда
					ЛицоБезДоверенности = ДоверительXDTO.Доверит.РосОргДовер.ЛицоБезДов.Получить(0); // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
					Участник.СНИЛС = Строка(ЛицоБезДоверенности.СвФЛ.СНИЛС);
				КонецЕсли;
			ИначеЕсли ТипУчастника = ТипыДоверителей.ИностраннаяОрганизация Тогда
				СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИнОргДовер.СвИнОрг");
				Участник = ПолучитьУчастника_ИностраннаяОрганизация(СвИнОргXDTO);
			ИначеЕсли ТипУчастника = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
				ИПДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИПДовер");
				Участник = ПолучитьУчастника_ИндивидуальныйПредприниматель(ИПДоверXDTO);
			ИначеЕсли ТипУчастника = ТипыДоверителей.ФизическоеЛицо Тогда
				ФЛДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ФЛДовер");
				Участник = ПолучитьУчастника_ФизическоеЛицо(ФЛДоверXDTO);
			КонецЕсли;
			
			Если Участник <> Неопределено Тогда
				Участник.ТипУчастника = ТипУчастника;
				МассивУчастников.Добавить(Участник);
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;	
	
	СвПередПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Передов.СвПередПолн", , , Истина, Неопределено);
	Если СвПередПолнXDTO <> Неопределено Тогда
		Для Каждого ДоверительXDTO Из СвПередПолнXDTO Цикл
			
			Участник = Неопределено;
			ТипУчастника = ДоверительXDTO.ТипПерПолн;
			
			Если ТипУчастника = ТипыПредставителей.ЮридическоеЛицо Тогда
				СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.РосОргПерПолн.СвРосОрг");
				Участник = ПолучитьУчастника_ЮридическоеЛицо(СвРосОргXDTO);
			ИначеЕсли ТипУчастника = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда	
				ИППерПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.ИППерПолн");
				Участник = ПолучитьУчастника_ИндивидуальныйПредприниматель(ИППерПолнXDTO);
			ИначеЕсли ТипУчастника = ТипыПредставителей.ФизическоеЛицо Тогда	
				ФЛПерПолнЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.ФЛПерПолн");
				Участник = ПолучитьУчастника_ФизическоеЛицо(ФЛПерПолнЛXDTO);
			ИначеЕсли ТипУчастника = ТипыПредставителей.ФилиалЮридическогоЛица Тогда	
				СвФилXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.ФилПерПолн.СвФил");
				Участник = ПолучитьУчастника_ФилиалЮридическогоЛица(СвФилXDTO);
			ИначеЕсли ТипУчастника = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда	
				СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.ИнПерПолн.СвИнОрг");
				Участник = ПолучитьУчастника_ФилиалИностраннойОрганизации(СвИнОргXDTO);
			КонецЕсли;	
			
			Если Участник <> Неопределено Тогда
				Участник.ТипУчастника = ТипУчастника;
				МассивУчастников.Добавить(Участник);
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет полномочия и связанные реквизиты.
// 
// Параметры:
//  ДанныеДляЗаполнения - см. НовыеДанныеДляЗаполнения
//  ОбъектМЧД           - ОбъектXDTO
Процедура ЗаполнитьДанныеПолномочий(ДанныеДляЗаполнения, ОбъектМЧД)
	
	СведенияОПолномочиях = ОбъектМЧД.Документ.Довер.СвПолн; // см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвПолнТип
	
	ДанныеДляЗаполнения.ПолномочияОграничены = Истина;
	ДанныеДляЗаполнения.СовместныеПолномочия = СведенияОПолномочиях.ПрСовмПолн = "2"; 
	
	Если СведенияОПолномочиях.ТипПолн = ТипыПолномочий().Текстовое Тогда
		
		ДанныеДляЗаполнения.ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.Текст;
		ДанныеДляЗаполнения.ТекстовоеПолномочие = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОПолномочиях,
			"ТекстПолн", "");
		
		ДанныеДляЗаполнения.ПолномочияОграничены =
			НЕ МашиночитаемыеДоверенностиКлиентСервер.ЭтоТекстПолныхПолномочий(ДанныеДляЗаполнения.ТекстовоеПолномочие);
			
	Иначе
		
		ДанныеДляЗаполнения.ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.КлассификаторФНС;
		
		МашиночитаемыеПолномочия = СведенияОПолномочиях.МашПолн;
		Если ТипЗнч(МашиночитаемыеПолномочия) <> Тип("СписокXDTO") Тогда
			МашиночитаемыеПолномочия = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МашиночитаемыеПолномочия);
		КонецЕсли;
		
		Для Каждого Полномочие Из МашиночитаемыеПолномочия Цикл
		
			ДанныеПолномочия = НовыеДанныеМашиночитаемогоПолномочия();
			ДанныеПолномочия.Мнемоника    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "МнПолн", "");
			ДанныеПолномочия.Код          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "КодПолн", "");
			ДанныеПолномочия.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "НаимПолн", "");
			
			ДанныеДляЗаполнения.Полномочия.Добавить(ДанныеПолномочия);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Читает XDTO-объект МЧД из двоичных данных.
// 
// Параметры:
//  ДанныеМЧД - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Структура:
// * ТекстОшибки - Строка
// * ОбъектМЧД - Неопределено
//             - ОбъектXDTO
Функция ПрочитатьОбъектМЧД(ДанныеМЧД)
	
	Результат = Новый Структура();
	Результат.Вставить("ОбъектМЧД", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
		
	Попытка
		
		РезультатЧтения = МашиночитаемыеДоверенности.ПрочитатьДанныеXML(ДанныеМЧД);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		Результат.ОбъектМЧД = РезультатЧтения.ДанныеДоверенности;
		
	Исключение
		
		ВидОперации = НСтр("ru = 'Загрузка машиночитаемой доверенности из файла.'");
		ТекстОшибки = НСтр("ru = 'Ошибка при чтении файла доверенности: файл не соответствует формату ФНС.'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;		
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Формирует типы представителей.
// 
// Возвращаемое значение:
//  Структура:
// * ЮридическоеЛицо - Строка
// * ИндивидуальныйПредприниматель - Строка
// * ФизическоеЛицо - Строка
// * ФилиалЮридическогоЛица - Строка
// * ФилиалИностраннойОрганизации - Строка
Функция ТипыПредставителей()
	
	Результат = Новый Структура();
	Результат.Вставить("ЮридическоеЛицо", "1");
	Результат.Вставить("ИндивидуальныйПредприниматель", "2");
	Результат.Вставить("ФизическоеЛицо", "3");
	Результат.Вставить("ФилиалЮридическогоЛица", "4");
	Результат.Вставить("ФилиалИностраннойОрганизации", "5");
	Возврат Результат;
	
КонецФункции

// Формирует типы доверителей.
// 
// Возвращаемое значение:
//  Структура:
// * ЮридическоеЛицо - Строка
// * ИностраннаяОрганизация - Строка
// * ИндивидуальныйПредприниматель - Строка
// * ФизическоеЛицо - Строка
Функция ТипыДоверителей()
	
	Результат = Новый Структура();
	Результат.Вставить("ЮридическоеЛицо", "1");
	Результат.Вставить("ИностраннаяОрганизация", "2");
	Результат.Вставить("ИндивидуальныйПредприниматель", "3");
	Результат.Вставить("ФизическоеЛицо", "4");
	Возврат Результат;
	
КонецФункции

// Формирует типы доверителей.
// 
// Возвращаемое значение:
//  Структура:
// * Текстовое      - Строка - текстовое человекочитаемое полномочие.
// * Машиночитаемое - Строка - машиночитаемое полномочие.
Функция ТипыПолномочий()
	
	Результат = Новый Структура();
	Результат.Вставить("Текстовое", "0");
	Результат.Вставить("Машиночитаемое", "1");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаДоверенности

// Выгружает данные доверенности в zip архив, в составе которого содержатся xml файл доверенности, подпись
// и файл визуализации.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Структура - Выгрузить данные доверенности:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево - Истина, если выгрузить данные не удалось.
// * ТекстОшибки - Строка - заполнено, если свойство Ошибка = Истина.
Функция ВыгрузитьДанныеДоверенности(Ссылка) Экспорт
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ОписаниеФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	РезультатВыгрузки.Вставить("Ошибка", Ложь);
	РезультатВыгрузки.Вставить("ТекстОшибки", "");
	
	Если Ссылка.Пустая() Тогда
		
		РезультатВыгрузки.Ошибка = Истина;
		РезультатВыгрузки.ТекстОшибки = НСтр("ru = 'Не указана выгружаемая доверенность'");
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ДанныеМЧД = ДанныеДоверенностиДляКонтейнера(Ссылка);
	
	Подпись = ДанныеМЧД.Подпись.ДвоичныеДанные;
	ДвоичныеДанныеДоверенности = ДанныеМЧД.Доверенность.ДвоичныеДанные;
	
	Файлы = Новый Массив(); // Массив из Строка
	
	ИмяВременногоКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	ИмяФайлаДоверенностьБезРасширения = ПолучитьИмяФайлаМЧД(Ссылка);
	ИмяФайлаДоверенность = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".xml";
	ИмяФайлаПодпись = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".p7s";
	
	ДвоичныеДанныеДоверенности.Записать(ИмяФайлаДоверенность);
	Файлы.Добавить(ИмяФайлаДоверенность);
	
	Подпись.Записать(ИмяФайлаПодпись);
	Файлы.Добавить(ИмяФайлаПодпись);
	
	ИмяФайлаВизуализация = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".pdf";
	РезультатЧтенияМЧД = ПрочитатьОбъектМЧД(ДвоичныеДанныеДоверенности);
	Если РезультатЧтенияМЧД.ОбъектМЧД <> Неопределено Тогда
		ТабличныйДокумент = ТабличныйДокументМЧД(РезультатЧтенияМЧД.ОбъектМЧД);
		ТабличныйДокумент.Записать(ИмяФайлаВизуализация, ТипФайлаТабличногоДокумента.PDF);
		Файлы.Добавить(ИмяФайлаВизуализация);
	КонецЕсли;
		
	Архив = РаботаСФайламиБЭД.СформироватьАрхивФайлов(Файлы);
	УдалитьФайлы(ИмяВременногоКаталога);
	
	РезультатВыгрузки.ОписаниеФайла.ИмяФайла = ИмяФайлаДоверенностьБезРасширения + ".zip";
	РезультатВыгрузки.ОписаниеФайла.ДвоичныеДанные = Архив;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

// Определяет наличие у пользователя прав на изменение МЧД003.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть право на изменение, иначе Ложь.
//
Функция ЕстьПравоИзменения() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.МЧД003);

КонецФункции

// Получает организацию доверителя с приоритетом по учетной записи ЭДО
//
// Параметры:
//  ДанныеДоверителей - Массив Из Структура:
//   * ИНН - Строка
//   * КПП - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. ОпределяемыйТип.Организация
Функция ПолучитьОрганизациюДоверителяПоИННКПП(ДанныеДоверителей) Экспорт
	
	Результат = Неопределено;
	ОрганизацииДоверителей = Новый Массив();
	
	Для Каждого ДанныеДоверителя Из ДанныеДоверителей Цикл
		Организация = ОбщегоНазначенияБЭД.НайтиСсылку("Организации", , ДанныеДоверителя);
		ОрганизацииДоверителей.Добавить(Организация);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОрганизацииДоверителей) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОрганизацииСУчетнойЗаписью = СинхронизацияЭДО.ОрганизацииСУчетнойЗаписью(ОрганизацииДоверителей);
	
	Если ЗначениеЗаполнено(ОрганизацииСУчетнойЗаписью) Тогда
		Результат = ОрганизацииСУчетнойЗаписью[0];
	Иначе
		Результат = ОрганизацииДоверителей[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Дополняет результат номерами доверенностей по участникам.
// 
// Параметры:
//  Результат - Структура:
//  * НомераДоверенностей - Массив из Строка
//  * ОшибкиПроверкиПолномочий - Массив из см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочий
//  ДоверительИНН - Строка
//  ПредставительИНН - Строка
//  ДействительныеНаДату - Дата
//  ЭлектронныйДокумент - Неопределено
//  					- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Процедура ДополнитьНомерамиДоверенностейПоУчастникам(Результат, ДоверительИНН, ПредставительИНН, ДействительныеНаДату,
	ЭлектронныйДокумент) Экспорт
	
	РеквизитыДоверителя = НовыеРеквизитыОтбора();
	РеквизитыДоверителя.ИНН = ДоверительИНН;
	РеквизитыПредставителя = НовыеРеквизитыОтбора();
	РеквизитыПредставителя.ИНН =  ПредставительИНН;
	
	Доверенности = ПолучитьДоверенностиПоОтбору(РеквизитыДоверителя, РеквизитыПредставителя, ДействительныеНаДату);
	
	Для Каждого СтрокаТЗ Из Доверенности Цикл
		
		Если Результат.НомераДоверенностей.Найти(СтрокаТЗ.НомерДоверенности) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ВозможнаАвтопроверкаПолномочий = ВозможнаАвтопроверкаПолномочий(СтрокаТЗ);

		Если ВозможнаАвтопроверкаПолномочий Тогда

			Если СтрокаТЗ.ПолномочияОграничены И ЭлектронныйДокумент <> Неопределено Тогда

				РезультатПроверки = МашиночитаемыеДоверенности.ПроверитьПолномочияДоверенности(
						СтрокаТЗ.Ссылка, ЭлектронныйДокумент);

				Если Не РезультатПроверки.Успех Тогда

					Ошибка = МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочий();
					Ошибка.Доверенность = СтрокаТЗ.Представление;
					Ошибка.НомерДоверенности = СтрокаТЗ.НомерДоверенности;
					Ошибка.ТекстОшибки = РезультатПроверки.ТекстОшибки;
					Результат.ОшибкиПроверкиПолномочий.Добавить(Ошибка);
					Продолжить;

				КонецЕсли;

			КонецЕсли;

			Результат.НомераДоверенностей.Вставить(0, СтрокаТЗ.НомерДоверенности);
			Продолжить;

		Иначе

			Ошибка = МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочий();
			Ошибка.Доверенность = СтрокаТЗ.Представление;
			Ошибка.НомерДоверенности = СтрокаТЗ.НомерДоверенности;
			Ошибка.ТекстОшибки = МашиночитаемыеДоверенности.ТекстОшибкиНеНастроенаАвтопроверка();
			Результат.ОшибкиПроверкиПолномочий.Добавить(Ошибка);
			Продолжить;

		КонецЕсли;

		Результат.НомераДоверенностей.Добавить(СтрокаТЗ.НомерДоверенности);
		
	КонецЦикла;
	
КонецПроцедуры

// Ищет последнюю выданную МЧД формата 003.
//
// Параметры:
// 	Отбор - см. МашиночитаемыеДоверенности.НовыйОтборМЧД
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Результат - Структура:
//   * Доверенность - СправочникСсылка.МЧД003
//   * ОшибкиПроверкиПолномочий - Соответствие из КлючИЗначение:
//    ** Ключ - СправочникСсылка.МЧД003
//    ** Значение - см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочийПриПодписании
//
Процедура ПолучитьПоследнююВыданнуюДоверенность(Отбор, ЭлектронныйДокумент, Результат) Экспорт
	
	Организация = Отбор.Доверитель;
	РеквизитыОрганизации = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(Организация);
	Доверитель = НовыеРеквизитыОтбора();
	ЗаполнитьЗначенияСвойств(Доверитель, РеквизитыОрганизации, "ИНН, КПП");
	
	Сертификат = Отбор.Сертификат;
	СвойстваСубъектаСертификата = Неопределено;
	
	Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Тогда
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
	Иначе
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	КонецЕсли;
	
	Представитель = НовыеРеквизитыОтбора();
	ЗаполнитьЗначенияСвойств(Представитель, СвойстваСубъектаСертификата, "ИНН, СНИЛС");
	Представитель.ИНН = СвойстваСубъектаСертификата.ИНН;
	Представитель.СНИЛС = ПредставлениеСНИЛС(СвойстваСубъектаСертификата.СНИЛС);
	Доверенности = ПолучитьДоверенностиПоОтбору(Доверитель, Представитель, ТекущаяДатаСеанса());
	
	Если Доверенности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкиПроверкиПолномочий = Новый Соответствие();
	
	Для Каждого СтрокаТЗ Из Доверенности Цикл
		
		ВозможнаАвтопроверкаПолномочий = ВозможнаАвтопроверкаПолномочий(СтрокаТЗ);
		
		Если ВозможнаАвтопроверкаПолномочий Тогда
			
			ЭтоТекстПолныхПолномочий = 
				МашиночитаемыеДоверенностиКлиентСервер.ЭтоТекстПолныхПолномочий(СтрокаТЗ.ТекстовоеПолномочие);
				
			Если ЭтоТекстПолныхПолномочий Тогда
				Результат.Доверенность = СтрокаТЗ.Ссылка;
				Результат.ОшибкиПроверкиПолномочий = Новый Соответствие();
				Возврат;
			КонецЕсли;
			
			РезультатПроверки = МашиночитаемыеДоверенности.ПроверитьПолномочияДоверенности(
				СтрокаТЗ.Ссылка, ЭлектронныйДокумент);
		
			Если РезультатПроверки.Успех Тогда
				
				Результат.Доверенность = СтрокаТЗ.Ссылка;
				Результат.ОшибкиПроверкиПолномочий = Новый Соответствие();
				Возврат;
				
			Иначе
				
				Ошибка = МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочийПриПодписании();
				Ошибка.Доверенность = СтрокаТЗ.Ссылка;
				Ошибка.ЭлектронныйДокумент = ЭлектронныйДокумент;
				Ошибка.ТекстОшибки = РезультатПроверки.ТекстОшибки;
				ОшибкиПроверкиПолномочий.Вставить(СтрокаТЗ.Ссылка, Ошибка);
				
			КонецЕсли;
		
		Иначе
			
			Ошибка = МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочийПриПодписании();
			Ошибка.Доверенность = СтрокаТЗ.Ссылка;
			Ошибка.ЭлектронныйДокумент = ЭлектронныйДокумент;
			Ошибка.ТекстОшибки = МашиночитаемыеДоверенности.ТекстОшибкиНеНастроенаАвтопроверка();
			ОшибкиПроверкиПолномочий.Вставить(СтрокаТЗ.Ссылка, Ошибка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			Результат.ОшибкиПроверкиПолномочий, ОшибкиПроверкиПолномочий, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив ссылок МЧД 
//
// Параметры:
// 	Доверитель - см. НовыеРеквизитыОтбора 
// 	Представитель - см. НовыеРеквизитыОтбора 
// 	ДействительныеНаДату - Дата
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * НомерДоверенности - Строка
//  * ДатаВыдачи - Дата
//  * ДатаОкончания - Дата
//  * Отозвана - Булево
//  * ДатаОтзыва - Дата
//  * ПолномочияОграничены - Булево
//  * ФайлМЧД - ХранилищеЗначения
//  * Верна - Булево
//  * Ссылка - СправочникСсылка.МЧД003
//  * Представление - Строка
//  * ПравилоПроверки - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
//  * ПолномочияУказаныИзКлассификатора - Булево
Функция ПолучитьДоверенностиПоОтбору(Доверитель, Представитель, ДействительныеНаДату)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Доверенности.Ссылка.НомерДоверенности КАК НомерДоверенности,
		|	Доверенности.Ссылка.ДатаВыдачи КАК ДатаВыдачи,
		|	Доверенности.Ссылка.СрокДействия КАК ДатаОкончания,
		|	Доверенности.Ссылка.ДатаПрекращения > ДАТАВРЕМЯ(1, 1, 1) КАК Отозвана,
		|	Доверенности.Ссылка.ДатаПрекращения КАК ДатаОтзыва,
		|	Доверенности.Ссылка.ПолномочияОграничены КАК ПолномочияОграничены,
		|	Доверенности.Ссылка.ТекстовоеПолномочие КАК ТекстовоеПолномочие,
		|	Доверенности.Ссылка.ФайлМЧД КАК ФайлМЧД,
		|	Доверенности.Ссылка.Верна КАК Верна,
		|	Доверенности.Ссылка КАК Ссылка,
		|	Доверенности.Ссылка.Представление КАК Представление,
		|	Доверенности.Ссылка.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	ЕСТЬNULL(ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки,
		|		ЗНАЧЕНИЕ(Справочник.ПравилаПроверкиПолномочийМЧД.ПустаяСсылка)) КАК ПравилоПроверки,
		|	Доверенности.Ссылка.ВариантЗаполненияПолномочий = ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.КлассификаторФНС) КАК
		|		ПолномочияУказаныИзКлассификатора
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		МЧД003Доверители.Ссылка
		|	ИЗ
		|		Справочник.МЧД003.Доверители КАК МЧД003Доверители
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Представители КАК МЧД003Представители
		|			ПО МЧД003Доверители.Ссылка = МЧД003Представители.Ссылка
		|	ГДЕ
		|		МЧД003Доверители.ТипДоверителя В (&Доверители)
		|		И ВЫБОР
		|			КОГДА &ДоверительИНН > """"
		|			И МЧД003Доверители.ИНН > """"
		|				ТОГДА МЧД003Доверители.ИНН = &ДоверительИНН
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		И ВЫБОР
		|			КОГДА &ДоверительКПП > """"
		|			И МЧД003Доверители.КПП > """"
		|				ТОГДА МЧД003Доверители.КПП = &ДоверительКПП
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		И ВЫБОР
		|			КОГДА &ДоверительОГРН > """"
		|			И МЧД003Доверители.ОГРН > """"
		|				ТОГДА МЧД003Доверители.ОГРН = &ДоверительОГРН
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		И ВЫБОР
		|			КОГДА &ДоверительСНИЛС > """"
		|			И МЧД003Доверители.СНИЛС > """"
		|				ТОГДА МЧД003Доверители.СНИЛС = &ДоверительСНИЛС
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		И МЧД003Представители.ТипПредставителя В (&Представители)
		|		И ВЫБОР
		|			КОГДА &ПредставительИНН > """"
		|			И МЧД003Представители.ИНН > """"
		|				ТОГДА МЧД003Представители.ИНН = &ПредставительИНН
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		И ВЫБОР
		|			КОГДА &ПредставительКПП > """"
		|			И МЧД003Представители.КПП > """"
		|				ТОГДА МЧД003Представители.КПП = &ПредставительКПП
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		И ВЫБОР
		|			КОГДА &ПредставительОГРН > """"
		|			И МЧД003Представители.ОГРН > """"
		|				ТОГДА МЧД003Представители.ОГРН = &ПредставительОГРН
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		И ВЫБОР
		|			КОГДА &ПредставительСНИЛС > """"
		|			И МЧД003Представители.СНИЛС > """"
		|				ТОГДА МЧД003Представители.СНИЛС = &ПредставительСНИЛС
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		И НЕ МЧД003Доверители.Ссылка.ПометкаУдаления
		|		И НЕ МЧД003Представители.Ссылка.ПометкаУдаления
		|		И НЕ МЧД003Доверители.Ссылка.СовместныеПолномочия
		|		И НЕ МЧД003Представители.Ссылка.СовместныеПолномочия) КАК Доверенности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
		|		ПО Доверенности.Ссылка = ПравилаПроверкиПолномочийПоМЧД.Доверенность";
		
	ДоверительИНН = СокрЛП(Доверитель.ИНН);
	ДоверительКПП = СокрЛП(Доверитель.КПП);
	Доверители = Новый Массив(); // Массив Из Строка
	ТипыДоверителей = ТипыДоверителей();
	
	Если СтрДлина(ДоверительИНН) = 12 Тогда
		Доверители.Добавить(ТипыДоверителей.ИндивидуальныйПредприниматель);
		Доверители.Добавить(ТипыДоверителей.ФизическоеЛицо);
	ИначеЕсли СтрДлина(ДоверительИНН) = 10 Тогда
		Доверители.Добавить(ТипыДоверителей.ЮридическоеЛицо);
	КонецЕсли;
	
	ПредставительИНН = СокрЛП(Представитель.ИНН);
	ПредставительКПП = СокрЛП(Представитель.КПП);
	Представители = Новый Массив(); // Массив Из Строка
	ТипыПредставителей = ТипыПредставителей();
	
	Если СтрДлина(ПредставительИНН) = 12 Тогда
		Представители.Добавить(ТипыПредставителей.ИндивидуальныйПредприниматель);
		Представители.Добавить(ТипыПредставителей.ФизическоеЛицо);
	ИначеЕсли СтрДлина(ПредставительИНН) = 10 Тогда
		Представители.Добавить(ТипыПредставителей.ЮридическоеЛицо);
		Если ЗначениеЗаполнено(ПредставительКПП) Тогда
			Представители.Добавить(ТипыПредставителей.ФилиалЮридическогоЛица);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Доверители", Доверители);
	Запрос.УстановитьПараметр("ДоверительИНН", ДоверительИНН);
	Запрос.УстановитьПараметр("ДоверительКПП", ДоверительКПП);
	Запрос.УстановитьПараметр("ДоверительСНИЛС", "");
	Запрос.УстановитьПараметр("ДоверительОГРН", "");
	Запрос.УстановитьПараметр("Представители", Представители);
	Запрос.УстановитьПараметр("ПредставительИНН", ПредставительИНН);
	Запрос.УстановитьПараметр("ПредставительКПП", ПредставительКПП);
	Запрос.УстановитьПараметр("ПредставительОГРН", "");
	Запрос.УстановитьПараметр("ПредставительСНИЛС", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаМЧД = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаМЧД.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваДоверенности = МашиночитаемыеДоверенности.НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, Выборка);

		ДоверенностьДействует = МашиночитаемыеДоверенности.ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности,
			ДействительныеНаДату);
		
		Если ДоверенностьДействует Тогда
			СтрокаТаблицыМЧД = ТаблицаМЧД.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыМЧД, Выборка);
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаМЧД;
	
КонецФункции

// Формирует структуру реквизитов отбора МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * ИНН - Строка
// * КПП - Строка
// * ОГРН - Строка
// * СНИЛС - Строка
Функция НовыеРеквизитыОтбора()
	
	Результат = Новый Структура();
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("ОГРН", "");
	Результат.Вставить("СНИЛС", "");
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеСНИЛС(СНИЛС)
	
	Результат = "";
	Цифры = "0123456789";
	
	Для Позиция = 0 По СтрДлина(СНИЛС) - 1 Цикл
		
		Символ = Сред(СНИЛС, Позиция, 1);
		
		Если СтрНайти(Цифры, Символ) Тогда
			
			Длина = СтрДлина(Результат);
			
			Если Длина = 3 ИЛИ Длина = 7 Тогда
				Результат = Результат + "-";
			ИначеЕсли Длина = 11 Тогда
				Результат = Результат + " ";
			КонецЕсли;
			
			Результат = Результат + Сред(СНИЛС, Позиция, 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

// Идентифицирует нереестровую МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭтоНереестроваяМЧД(МЧД) Экспорт
	ДанныеДоверенностиМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, "Подписана, СтатусВРеестреФНС");
	Возврат ДанныеДоверенностиМЧД.Подписана И НЕ ЗначениеЗаполнено(ДанныеДоверенностиМЧД.СтатусВРеестреФНС);
КонецФункции

// Возвращает подписи доверенности
// 
// Параметры:
//  МЧД - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Массив из ДвоичныеДанные
//  
Функция ПодписиДоверенности(МЧД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МЧД003Подписи.Подпись
		|ИЗ
		|	Справочник.МЧД003.Подписи КАК МЧД003Подписи
		|ГДЕ
		|	МЧД003Подписи.Ссылка = &МЧД
		|
		|УПОРЯДОЧИТЬ ПО
		|	МЧД003Подписи.НомерСтроки";
	
	Запрос.УстановитьПараметр("МЧД", МЧД);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Подпись.Получить());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные доверенности для транспортного контейнера.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  См. ТранспортныеКонтейнерыЭДО.НовоеОписаниеДанныхДоверенности
Функция ДанныеДоверенностиДляКонтейнера(Доверенность) Экспорт
	
	ИмяФайлаБезРасширения = ПолучитьИмяФайлаМЧД(Доверенность);
	Реквизиты = "ФайлМЧД, ДатаВыдачи, СрокДействия, НомерДоверенности, Доверители";
	СвойстваДоверенности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность, Реквизиты);
	
	ДанныеДоверенности = ТранспортныеКонтейнерыЭДО.НовоеОписаниеДанныхДоверенности();
	ДанныеДоверенности.ЭтоФайловаяДоверенность = ЭтоНереестроваяМЧД(Доверенность);
	ДанныеДоверенности.Доверенность.ДвоичныеДанные = СвойстваДоверенности.ФайлМЧД.Получить();
	ДанныеДоверенности.Доверенность.ИмяФайла = ИмяФайлаБезРасширения + ".xml";
	ДанныеДоверенности.Подпись.ДвоичныеДанные = ПодписиДоверенности(Доверенность)[0];
	ДанныеДоверенности.Подпись.ИмяФайла = ИмяФайлаБезРасширения + ".p7s";
	ДанныеДоверенности.ДатаВыдачи = СвойстваДоверенности.ДатаВыдачи;
	ДанныеДоверенности.ДатаОкончания = СвойстваДоверенности.СрокДействия;
	
	ДанныеДоверенности.НомерДоверенности = СвойстваДоверенности.НомерДоверенности;
	
	ВыборкаДоверители = СвойстваДоверенности.Доверители.Выбрать();
	Пока ВыборкаДоверители.Следующий() Цикл
		ДанныеДоверенности.ДоверительИНН = ВыборкаДоверители.ИНН;
		Прервать;
	КонецЦикла;
	
	ДанныеДоверенности.СсылкаНаРеестр = МашиночитаемыеДоверенности.СведенияОбИнформационнойСистеме();
	
	Возврат ДанныеДоверенности;
	
КонецФункции

// Возвращает имя файла машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Строка - Имя файла машиночитаемой доверенности.
Функция ПолучитьИмяФайлаМЧД(Ссылка) Экспорт
		
	Реквизиты = "ДатаОтправки, НомерДоверенности";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);

	ЭлементыИмениФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФорматыЭДО_ФНС.ПространствоИмен_МЧД_003());
	ДатаФайла = ?(ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаОтправки), ЗначенияРеквизитов.ДатаОтправки,
		ТекущаяДатаСеанса());
	ЭлементыИмениФайла.Добавить(Формат(ДатаФайла, "ДФ=ггггММдд;"));
	ЭлементыИмениФайла.Добавить(ЗначенияРеквизитов.НомерДоверенности);

	Возврат СтрСоединить(ЭлементыИмениФайла, "_");
	
КонецФункции

// Ищет доверенности
// 
// Параметры:
//  НомерДоверенности - Строка
//  ИННДоверителя - Строка
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.МЧД003
Функция НайтиДоверенности(НомерДоверенности, ИННДоверителя = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МЧД003Доверители.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МЧД003.Доверители КАК МЧД003Доверители
		|ГДЕ
		|	МЧД003Доверители.Ссылка.НомерДоверенности = &НомерДоверенности
		|	И НЕ (&ИНН > """"
		|	И МЧД003Доверители.ИНН <> &ИНН)
		|	И МЧД003Доверители.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ИНН", ИННДоверителя);
	Запрос.УстановитьПараметр("НомерДоверенности", НомерДоверенности);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Проверяет доступность автопроверки полномочий для доверенности
// 
// Параметры:
//  СтрокаТЗ - СтрокаТаблицыЗначений Из см. ПолучитьДоверенностиПоОтбору
// 
// Возвращаемое значение:
//  Булево - Истина, если автопроверка возможна
//  
Функция ВозможнаАвтопроверкаПолномочий(СтрокаТЗ) Экспорт
	Возврат НЕ СтрокаТЗ.ПолномочияОграничены
		ИЛИ МашиночитаемыеДоверенности.ПравилоНастроено(СтрокаТЗ.ПравилоПроверки)
		ИЛИ (СтрокаТЗ.ПолномочияОграничены И СтрокаТЗ.ПолномочияУказаныИзКлассификатора);
КонецФункции

// Формирует представление полномочия
// 
// Параметры:
//  Код          - Строка
//  Наименование - Строка
// 
// Возвращаемое значение:
//  Строка - сформированное по шаблону представление
//
Функция СформироватьПредставлениеПолномочия(Код, Наименование) Экспорт
	
	Возврат СтрШаблон("%1; %2", Код, Наименование);
	
КонецФункции

// Получает данные МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
//
Функция ПолучитьДанныеМЧД(МЧД) Экспорт

	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД,
		"НомерДоверенности, Доверители");
	ДанныеМЧД = МашиночитаемыеДоверенности.НовыеДанныеДоверенности();
	ДанныеМЧД.НомерДоверенности = РеквизитыМЧД.НомерДоверенности;
	
	ВыборкаДоверители = РеквизитыМЧД.Доверители.Выбрать();
	Пока ВыборкаДоверители.Следующий() Цикл
		ДанныеМЧД.ИННДоверителя = ВыборкаДоверители.ИНН;
		Прервать;
	КонецЦикла;

	Возврат ДанныеМЧД;
	
КонецФункции

// Возвращает идентификатор машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Строка - Идентификатор машиночитаемой доверенности.
//
Функция ПолучитьИдентификаторМЧД(Ссылка) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерДоверенности");
КонецФункции

// Возвращает описание запроса для подписания.
// 
// Параметры:
//  ИмяВременнойТаблицы - Строка
//  ОбъектыДействий - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
// 
// Возвращаемое значение:
//  см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросДляПодписания(ИмяВременнойТаблицы, ОбъектыДействий) Экспорт

	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();

	МеткаВременнойТаблицы = "ПОМЕСТИТЬ #ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "#ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;

	ТипыДоверителей = ТипыДоверителей();
	
	ТаблицаДанныхМЧД = Новый ТаблицаЗначений;
	ТаблицаДанныхМЧД.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.МЧД003"));
	ТаблицаДанныхМЧД.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаДанныхМЧД.Колонки.Добавить("СНИЛСДоверителя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(14)));
	ТаблицаДанныхМЧД.Колонки.Добавить("СтатусВРеестреФНС", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС"));
	
	ВыбранныеМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОбъектыДействий.МЧД, "Доверители, СтатусВРеестреФНС");
	Для Каждого ТекущаяМЧД Из ВыбранныеМЧД Цикл
		
		НоваяСтрока = ТаблицаДанныхМЧД.Добавить();
		НоваяСтрока.Ссылка = ТекущаяМЧД.Ключ;
		НоваяСтрока.СтатусВРеестреФНС = ТекущаяМЧД.Значение.СтатусВРеестреФНС;
		ТекущийДоверитель = ТекущаяМЧД.Значение.Доверители.Выбрать();
		
		Пока ТекущийДоверитель.Следующий() Цикл
			ДанныеДоверителя = Новый Структура;
			ДанныеДоверителя.Вставить("ИНН", ТекущийДоверитель.ИНН);
			ДанныеДоверителя.Вставить("КПП", ТекущийДоверитель.КПП);
			ДанныеДоверителя.Вставить("ОГРН", ТекущийДоверитель.ОГРН);
			ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Организации",
				НоваяСтрока.Организация,, ДанныеДоверителя);
			НоваяСтрока.СНИЛСДоверителя = ТекущийДоверитель.СНИЛС;
		КонецЦикла;
	КонецЦикла;
	
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ТаблицаДанныхМЧД", ТаблицаДанныхМЧД);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанныхМЧД.Ссылка КАК Ссылка,
	|	ТаблицаДанныхМЧД.Организация КАК Организация,
	|	ТаблицаДанныхМЧД.СНИЛСДоверителя КАК СНИЛСДоверителя,
	|	ТаблицаДанныхМЧД.СтатусВРеестреФНС КАК СтатусВРеестреФНС
	|ПОМЕСТИТЬ ТаблицаДанныхМЧД
	|ИЗ
	|	&ТаблицаДанныхМЧД КАК ТаблицаДанныхМЧД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенности.Ссылка КАК Ссылка,
	|	МашиночитаемыеДоверенности.Организация КАК Организация,
	|	МашиночитаемыеДоверенности.СНИЛСДоверителя КАК СНИЛСДоверителя,
	|	МАКСИМУМ(ЕСТЬNULL(УчетныеЗаписиЭДО.ИдентификаторЭДО, """")) КАК ИдентификаторОрганизации,
	|	МашиночитаемыеДоверенности.СтатусВРеестреФНС КАК СтатусВРеестреФНС
	|ПОМЕСТИТЬ #ИмяВременнойТаблицы
	|ИЗ
	|	ТаблицаДанныхМЧД КАК МашиночитаемыеДоверенности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО МашиночитаемыеДоверенности.Организация = УчетныеЗаписиЭДО.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	МашиночитаемыеДоверенности.Ссылка,
	|	МашиночитаемыеДоверенности.Организация,
	|	МашиночитаемыеДоверенности.СНИЛСДоверителя,
	|	МашиночитаемыеДоверенности.СтатусВРеестреФНС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторОрганизации,
	|	УчетныеЗаписиЭДО.Организация КАК Организация
	|ПОМЕСТИТЬ ИдентификаторыОрганизации
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|ГДЕ
	|	УчетныеЗаписиЭДО.Организация В
	|			(ВЫБРАТЬ
	|				ТаблицаДанныхМЧД.Организация
	|			ИЗ
	|				ТаблицаДанныхМЧД КАК ТаблицаДанныхМЧД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДанныхМЧД";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы, ЗначениеВременнойТаблицы);

	ОписаниеЗапроса.Текст = ТекстЗапроса;

	Возврат ОписаниеЗапроса;

КонецФункции

#Область ПредставлениеДоверенности

// Возвращает табличный документ МЧД.
// 
// Параметры:
//  ДоверенностьXDTO - См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
// 
// Возвращаемое значение:
//   ТабличныйДокумент - ТабличныйДокумент -  табличный документ МЧД
//
Функция ТабличныйДокументМЧД(ДоверенностьXDTO) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ИмяМакета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("КарточкаМЧД_%1", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = ПолучитьМакет(ИмяМакета);
	
	ДокументXDTO = ДоверенностьXDTO.Документ;
	
	ДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументXDTO, "Довер", Неопределено);
	Если ДоверXDTO <> Неопределено Тогда
		ВывестиДоверенность(ТабличныйДокумент, Макет, ДоверXDTO);
	КонецЕсли; 
	
	ПередовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументXDTO, "Передов", Неопределено);
	Если ПередовXDTO <> Неопределено Тогда
		ВывестиПередоверие(ТабличныйДокумент, Макет, ПередовXDTO);
	КонецЕсли;	
		
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиДоверенность(ТабличныйДокумент, Макет, Доверенность)
	
	ТипыДоверителей = ТипыДоверителей();
	ТипыПредставителей = ТипыПредставителей();
	
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	
	ВывестиШапку(ТабличныйДокумент, Макет, Доверенность.СвДов);
	
	СвДоверитXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Доверенность, "СвДоверит", , , Истина);
	
	ЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ЗаголовокОбласти.Параметры.ТекстЗаголовка = 
		?(СвДоверитXDTO.Количество() > 1, НСтр("ru='Сведения о доверителях'"), НСтр("ru='Сведения о доверителе'"));
	ТабличныйДокумент.Вывести(ЗаголовокОбласти);	
	
	Для Каждого ДоверительXDTO Из СвДоверитXDTO Цикл	
		
		Если ДоверительXDTO.ТипДоверит = ТипыДоверителей.ЮридическоеЛицо Тогда
						
			СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.РосОргДовер.СвРосОрг");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СвРосОргXDTO);
			
			ЛицоБезДовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.РосОргДовер.ЛицоБезДов", , , Истина);
			
			Для Каждого ЛицоБезДоверенностиXDTO Из ЛицоБезДовXDTO Цикл
				ВывестиЛицоБезДоверенности(ТабличныйДокумент, Макет, ЛицоБезДоверенностиXDTO);
			КонецЦикла;
			
		ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ИностраннаяОрганизация Тогда	
			
			СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИнОргДовер.СвИнОрг");
			ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СвИнОргXDTO);
			
			СвРукОПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИнОргДовер.СвРукОП", , , Истина);
			
			Для Каждого РуководительXDTO Из СвРукОПXDTO Цикл
				
				Заголовок = НСтр("ru='Сведения о подписанте'");
				ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
				ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
				
				ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, РуководительXDTO);
				
			КонецЦикла;	
			
		ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
			
			ИПДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИПДовер");
			ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ИПДоверXDTO);
			
		ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ФизическоеЛицо Тогда	
			
			Заголовок = НСтр("ru='Сведения о подписанте'");
			ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);

			ФЛДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ФЛДовер");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, ФЛДоверXDTO);
						
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		
	КонецЦикла;	
	
	СвУпПредXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Доверенность, "СвУпПред", , , Истина);
	
	ЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ЗаголовокОбласти.Параметры.ТекстЗаголовка = 
		?(СвУпПредXDTO.Количество() > 1, НСтр("ru='Сведения о представителях'"), НСтр("ru='Сведения о представителе'"));
	ТабличныйДокумент.Вывести(ЗаголовокОбласти);	
		
	Для Каждого ПредставительXDTO Из СвУпПредXDTO Цикл

		Если ПредставительXDTO.ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда

			СведОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведОрг");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СведОргXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда	

			СведИПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИП");
			ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, СведИПXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФизическоеЛицо Тогда	
			
			Заголовок = НСтр("ru='Сведения о доверенном лице'");
			ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			СведФизЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФизЛ");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СведФизЛXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФилиалЮридическогоЛица Тогда	
			
			СведФилиалXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФилиал");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СведФилиалXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
			
			СведИОXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИО");
			ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СведИОXDTO);
			
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		
	КонецЦикла;
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о полномочиях'");
	ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
	
	ВывестиПолномочия(ТабличныйДокумент, Макет, Доверенность.СвПолн);
	ТабличныйДокумент.Вывести(ОбластьРазделитель);
	
	СвНотУдXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Доверенность, "СвНотУд", Неопределено); 
	Если СвНотУдXDTO <> Неопределено Тогда
		
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о нотариальном удостоверении'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		
		ВывестиНотариальноеУдостоверение(ТабличныйДокумент, Макет, СвНотУдXDTO);
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ВывестиПередоверие(ТабличныйДокумент, Макет, Передоверие)
	
	ТипыПредставителей = ТипыПредставителей();
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ВывестиШапку(ТабличныйДокумент, Макет, Передоверие.СвПереДовер);
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о первоначальной доверенности'");
	ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
	ВывестиСведенияПервоначальнойДоверенности(ТабличныйДокумент, Макет, Передоверие.СвПервДовер);
	
    СвПередовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Передоверие, "СвПередов", Неопределено);
	Если СвПередовXDTO <> Неопределено Тогда
		
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о доверенности, на основании которой осуществляется передоверие'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиСведенияПервоначальнойДоверенности(ТабличныйДокумент, Макет, СвПередовXDTO);
		
	КонецЕсли;	
	
	СвПередПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Передоверие, "СвПередПолн", , , Истина);
	
	ЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ЗаголовокОбласти.Параметры.ТекстЗаголовка = 
		?(СвПередПолнXDTO.Количество() > 1, НСтр("ru='Лица, передавшие полномочия'"), НСтр("ru='Лицо, передавшее полномочия'"));
	ТабличныйДокумент.Вывести(ЗаголовокОбласти);
	
	Для Каждого ПредставительXDTO Из СвПередПолнXDTO Цикл
		
		Если ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ЮридическоеЛицо Тогда
			
			СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.РосОргПерПолн.СвРосОрг");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СвРосОргXDTO);
			
			ЛицоБезДовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.РосОргПерПолн.ЛицоБезДов", , , Истина);
			
			ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
			ПроизвольныйЗаголовок.Параметры.Заголовок = 
				?(ЛицоБезДовXDTO.Количество() > 1, НСтр("ru='Представители'"), НСтр("ru='Представитель'"));
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			Для Каждого ЛицоБезДоверенностиXDTO Из ЛицоБезДовXDTO Цикл
				ВывестиЛицоБезДоверенности(ТабличныйДокумент, Макет, ЛицоБезДоверенностиXDTO);
			КонецЦикла;
			
		ИначеЕсли ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда	
			
			ИППерПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ИППерПолн");
			ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ИППерПолнXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ФизическоеЛицо Тогда	
			
			ФЛПерПолнЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ФЛПерПолн");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, ФЛПерПолнЛXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ФилиалЮридическогоЛица Тогда	
			
			СвФилXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ФилПерПолн.СвФил");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СвФилXDTO);
			
			ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
			ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Руководитель филиала (обособленного подразделения) юридического лица'");
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			СвРукФилXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ФилПерПолн.СвРукФил");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СвРукФилXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
			
			СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ИнПерПолн.СвИнОрг");
			ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СвИнОргXDTO);
			
			СвРукОПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ИнПерПолн.СвРукОП", , , Истина);
			
			ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
			ПроизвольныйЗаголовок.Параметры.Заголовок = 
				?(СвРукОПXDTO.Количество() > 1, НСтр("ru='Сведения о руководителях'"), НСтр("ru='Сведения о руководителе'"));
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			Для Каждого РуководительXDTO Из СвРукОПXDTO Цикл
				ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, РуководительXDTO);
			КонецЦикла;
			
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		
	КонецЦикла;
	
	СвПолучПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Передоверие, "СвПолучПолн", , , Истина);
	
	ЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ЗаголовокОбласти.Параметры.ТекстЗаголовка = 
		?(СвПолучПолнXDTO.Количество() > 1, НСтр("ru='Лица, получившие полномочия'"), НСтр("ru='Лицо, получившее полномочия'"));
	ТабличныйДокумент.Вывести(ЗаголовокОбласти);
	
	Для Каждого ПредставительXDTO Из СвПолучПолнXDTO Цикл
		
		Если ПредставительXDTO.ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда
			
			СведОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведОрг");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СведОргXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда	
			
			СведИПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИП");
			ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, СведИПXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФизическоеЛицо Тогда	
			
			СведФизЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФизЛ");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СведФизЛXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФилиалЮридическогоЛица Тогда	
			
			СведФилиалXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФилиал");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СведФилиалXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
			
			СведИОXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИО");
			ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СведИОXDTO);
			
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		
	КонецЦикла;	
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о полномочиях'");
	ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
	
	ВывестиПолномочия(ТабличныйДокумент, Макет, Передоверие.СвПолн);
	ТабличныйДокумент.Вывести(ОбластьРазделитель);
	
	СвНотУдXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Передоверие, "СвНотУд", Неопределено); 
	Если СвНотУдXDTO <> Неопределено Тогда
		
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о нотариальном удостоверении'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		
		ВывестиНотариальноеУдостоверение(ТабличныйДокумент, Макет, СвНотУдXDTO);
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВывестиШапку(ТабличныйДокумент, Макет, Доверенность)
	
	ВидДоверенностиXDTO = Новый Соответствие();
	ВидДоверенностиXDTO.Вставить("1", НСтр("ru='С возможностью отзыва'"));
	ВидДоверенностиXDTO.Вставить("2", НСтр("ru='Без возможности отзыва'"));
	
	ПередовериеДоверенностиXDTO = Новый Соответствие();
	ПередовериеДоверенностиXDTO.Вставить("1", НСтр("ru='Без права передоверия'"));
	ПередовериеДоверенностиXDTO.Вставить("2", НСтр("ru='Однократное передоверие'"));
	ПередовериеДоверенностиXDTO.Вставить("2", НСтр("ru='С правом передоверия'"));
	
	ПередовериеБезотзывнойДоверенностиXDTO = Новый Соответствие();
	ПередовериеБезотзывнойДоверенностиXDTO.Вставить("1", НСтр("ru='С возможностью передоверия'"));
	ПередовериеБезотзывнойДоверенностиXDTO.Вставить("2", НСтр("ru='Невозможно'"));
	
	УсловиеОтзываБезотзывнойДоверенностиXDTO = Новый Соответствие();
	УсловиеОтзываБезотзывнойДоверенностиXDTO.Вставить("1", НСтр("ru='По истечению срока действия'"));
	УсловиеОтзываБезотзывнойДоверенностиXDTO.Вставить("2", НСтр("ru='По условию'"));
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.НомерДоверенности = Доверенность.НомДовер;
	Шапка.Параметры.ДатаВыдачи = Доверенность.ДатаВыдДовер;
	Шапка.Параметры.СрокДействия = Доверенность.СрокДейст;
	Шапка.Параметры.ВидДоверенности = ВидДоверенностиXDTO[Доверенность.ВидДовер];
	Шапка.Параметры.ПравоПередоверия = ПередовериеДоверенностиXDTO[Доверенность.ПрПередов];
	ТабличныйДокумент.Вывести(Шапка);
	
	БезотзывXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Доверенность, "Безотзыв", Неопределено);
	Если БезотзывXDTO <> Неопределено Тогда
		
		БезотзывнаяДоверенность = Макет.ПолучитьОбласть("БезотзывнаяДоверенность");
		БезотзывнаяДоверенность.Параметры.ПравоПередоверия = ПередовериеБезотзывнойДоверенностиXDTO[БезотзывXDTO.ПрПерБезДов];
		БезотзывнаяДоверенность.Параметры.УсловиеОтзыва = УсловиеОтзываБезотзывнойДоверенностиXDTO[БезотзывXDTO.УслОтзыва];
		ТабличныйДокумент.Вывести(БезотзывнаяДоверенность);
		
		Если БезотзывXDTO.УслОтзыва = "2" Тогда
			УсловиеОтзываБезотзывнойДоверенности = Макет.ПолучитьОбласть("УсловиеОтзываБезотзывнойДоверенности");
			УсловиеОтзываБезотзывнойДоверенности.Параметры.УсловиеОтзыва =
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(БезотзывXDTO, "ОписУслОт", "");
			ТабличныйДокумент.Вывести(УсловиеОтзываБезотзывнойДоверенности);
		КонецЕсли;	
		
	КонецЕсли
	
КонецПроцедуры	

Процедура ВывестиСведенияПервоначальнойДоверенности(ТабличныйДокумент, Макет, ПервоначальнаяДоверенность)
	
	ТипыДоверителей = ТипыДоверителей();
	
	ТипДоверенностиXDTO = Новый Соответствие();
	ТипДоверенностиXDTO.Вставить("1", НСтр("ru='Первоначальная доверенность'"));
	ТипДоверенностиXDTO.Вставить("2", НСтр("ru='Доверенность, выданная в порядке передоверия'"));
	
	ФормаДоверенностиXDTO = Новый Соответствие();
	ФормаДоверенностиXDTO.Вставить("1", НСтр("ru='В электронной форме в машиночитаемом виде'"));
	ФормаДоверенностиXDTO.Вставить("2", НСтр("ru='На бумажном носителе'"));
	
	НомДоверПерв = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "НомДоверПерв", "");
	Если Не ПустаяСтрока(НомДоверПерв) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Номер первоначальной доверенности'"); 
		ПроизвольныеСведения.Параметры.Текст = НомДоверПерв;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	НомДоверN = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "НомДоверN", "");
	Если Не ПустаяСтрока(НомДоверN) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Номер доверенности, на основании которой осуществляется передоверие'"); 
		ПроизвольныеСведения.Параметры.Текст = НомДоверN;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
		
	СведенияПервоначальнойДоверенности = Макет.ПолучитьОбласть("СведенияПервоначальнойДоверенности");
	СведенияПервоначальнойДоверенности.Параметры.ДатаВыдачи = ПервоначальнаяДоверенность.ДатаВыдДовер;
	СведенияПервоначальнойДоверенности.Параметры.СрокДействия = ПервоначальнаяДоверенность.СрокДейст;
	СведенияПервоначальнойДоверенности.Параметры.ТипДоверенности = ТипДоверенностиXDTO[ПервоначальнаяДоверенность.ПрДовер];	
	СведенияПервоначальнойДоверенности.Параметры.ФормаДоверенности = ФормаДоверенностиXDTO[ПервоначальнаяДоверенность.ФормДовер];
	ТабличныйДокумент.Вывести(СведенияПервоначальнойДоверенности);	
	
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	СвДоверПервXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "СвДоверПерв", Неопределено, , Истина);
	Если СвДоверПервXDTO <> Неопределено Тогда
		Для Каждого ДоверительXDTO Из СвДоверПервXDTO Цикл	
		
			Если ДоверительXDTO.ТипДоверит = ТипыДоверителей.ЮридическоеЛицо Тогда
				
				СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.РосОргДовер.СвРосОрг");
				ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СвРосОргXDTO);
				
				ЛицоБезДовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.РосОргДовер.ЛицоБезДов", , , Истина);
				
				ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
				ПроизвольныйЗаголовок.Параметры.Заголовок = 
					?(ЛицоБезДовXDTO.Количество() > 1, НСтр("ru='Представители'"), НСтр("ru='Представитель'"));
				ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
				
				Для Каждого ЛицоБезДоверенностиXDTO Из ЛицоБезДовXDTO Цикл
					ВывестиЛицоБезДоверенности(ТабличныйДокумент, Макет, ЛицоБезДоверенностиXDTO);
				КонецЦикла;
				
			ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ИностраннаяОрганизация Тогда	
				
				СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИнОргДовер.СвИнОрг");
				ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СвИнОргXDTO);
				
				СвРукОПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИнОргДовер.СвРукОП", , , Истина);
				
				ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
				ПроизвольныйЗаголовок.Параметры.Заголовок = 
					?(СвРукОПXDTO.Количество() > 1, НСтр("ru='Сведения о руководителях'"), НСтр("ru='Сведения о руководителе'"));
				ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
				
				Для Каждого РуководительXDTO Из СвРукОПXDTO Цикл
					ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, РуководительXDTO);
				КонецЦикла;	
				
			ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
				
				ИПДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИПДовер");
				ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ИПДоверXDTO);
				
			ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ФизическоеЛицо Тогда	
				
				ФЛДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ФЛДовер");
				ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ФЛДоверXDTO);
							
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьРазделитель);
			
		КонецЦикла;
	КонецЕсли;	
	
	СвНотДействXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "СвНотДейств", Неопределено);
	Если СвНотДействXDTO <> Неопределено Тогда
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о нотариусе'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиНотариуса(ТабличныйДокумент, Макет, СвНотДействXDTO);
	КонецЕсли;
	
	ВриоНотXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "ВриоНот", Неопределено);
	Если ВриоНотXDTO <> Неопределено Тогда
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о ВРИО нотариуса'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиНотариуса(ТабличныйДокумент, Макет, ВриоНотXDTO, Истина);
	КонецЕсли;

КонецПроцедуры	
	
Процедура ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, ЮридическоеЛицо)

	СведенияЮридическогоЛица = Макет.ПолучитьОбласть("СведенияЮридическогоЛица");
	СведенияЮридическогоЛица.Параметры.Наименование = ЮридическоеЛицо.НаимОрг;
	СведенияЮридическогоЛица.Параметры.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮридическоеЛицо, "ИННЮЛ", "");
	СведенияЮридическогоЛица.Параметры.КПП = ЮридическоеЛицо.КПП;
	СведенияЮридическогоЛица.Параметры.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮридическоеЛицо, "ОГРН", "");
	ТабличныйДокумент.Вывести(СведенияЮридическогоЛица);
	
	АдрРегXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮридическоеЛицо, "АдрРег", Неопределено);
	Если АдрРегXDTO <> Неопределено Тогда
		ВывестиАдрес(ТабличныйДокумент, Макет, АдрРегXDTO);
	КонецЕсли;
	
	ДокПдтвXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮридическоеЛицо, "ДокПдтв", Неопределено);
	Если ДокПдтвXDTO <> Неопределено Тогда
		ВывестиДокументПодтверждающийПолномочия(ТабличныйДокумент, Макет, ДокПдтвXDTO);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, ИностранноеЮридическоеЛицо)

	СведенияИностранногоЮридическогоЛица = Макет.ПолучитьОбласть("СведенияИностранногоЮридическогоЛица");
	СведенияИностранногоЮридическогоЛица.Параметры.Наименование = ИностранноеЮридическоеЛицо.НаимИО;
	СведенияИностранногоЮридическогоЛица.Параметры.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИностранноеЮридическоеЛицо, "ИННЮЛ", "");
	СведенияИностранногоЮридическогоЛица.Параметры.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИностранноеЮридическоеЛицо, "КПП", "");
	ТабличныйДокумент.Вывести(СведенияИностранногоЮридическогоЛица);
	
	АдрМНФактXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИностранногоЮридическогоЛица, "АдрМНФакт", Неопределено);
	Если АдрМНФактXDTO <> Неопределено Тогда
		ВывестиАдрес(ТабличныйДокумент, Макет, АдрМНФактXDTO);
	КонецЕсли;
	
	АдрСтрРег = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИностранногоЮридическогоЛица, "АдрСтрРег", "");
	Если Не ПустаяСтрока(АдрСтрРег) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Адрес юр. лица на территории государства, в котором оно зарегистрировано'"); 
		ПроизвольныеСведения.Параметры.Текст = АдрСтрРег;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ИндивидуальныйПредприниматель)

	СведенияИндивидуальногоПредпринимателя = Макет.ПолучитьОбласть("СведенияИндивидуальногоПредпринимателя");
	СведенияИндивидуальногоПредпринимателя.Параметры.Наименование =
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИндивидуальныйПредприниматель, "НаимИП", "");
	СведенияИндивидуальногоПредпринимателя.Параметры.ИНН = ИндивидуальныйПредприниматель.ИННФЛ;	
	СведенияИндивидуальногоПредпринимателя.Параметры.ОГРН = ИндивидуальныйПредприниматель.ОГРНИП;
	СведенияИндивидуальногоПредпринимателя.Параметры.СНИЛС = ИндивидуальныйПредприниматель.СНИЛС;
	
	СведФЛXDTO = ИндивидуальныйПредприниматель.СведФЛ;
	СведенияИндивидуальногоПредпринимателя.Параметры.ФИО = МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(СведФЛXDTO.ФИО);
	СведенияИндивидуальногоПредпринимателя.Параметры.ДатаРождения = 
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "ДатаРожд", '00010101');
	ТабличныйДокумент.Вывести(СведенияИндивидуальногоПредпринимателя);
	
	АдрМЖXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "АдрМЖ", Неопределено);
	Если АдрМЖXDTO <> Неопределено Тогда
		ВывестиАдрес(ТабличныйДокумент, Макет, АдрМЖXDTO);
	КонецЕсли;
	
	УдЛичнФЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "УдЛичнФЛ", Неопределено);
	Если УдЛичнФЛXDTO <> Неопределено Тогда
		ВывестиУдостоверениеЛичности(ТабличныйДокумент, Макет, УдЛичнФЛXDTO);
	КонецЕсли;
	
	ДокПдтвXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИндивидуальныйПредприниматель, "ДокПдтв", Неопределено);
	Если ДокПдтвXDTO <> Неопределено Тогда
		ВывестиДокументПодтверждающийПолномочия(ТабличныйДокумент, Макет, ДокПдтвXDTO);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, ФизическоеЛицо)
	
	СведФЛXDTO = ФизическоеЛицо.СведФЛ;
	СведенияФизическогоЛица = Макет.ПолучитьОбласть("СведенияФизическогоЛица");
	СведенияФизическогоЛица.Параметры.ФИО = МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(СведФЛXDTO.ФИО);
	СведенияФизическогоЛица.Параметры.ДатаРождения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "ДатаРожд", '00010101');
	СведенияФизическогоЛица.Параметры.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "ИННФЛ", "");
	СведенияФизическогоЛица.Параметры.СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "СНИЛС", "");
	СведенияФизическогоЛица.Параметры.Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "Должность", "");
	ТабличныйДокумент.Вывести(СведенияФизическогоЛица);
	
	АдрМЖXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "АдрМЖ", Неопределено);
	Если АдрМЖXDTO <> Неопределено Тогда
		ВывестиАдрес(ТабличныйДокумент, Макет, АдрМЖXDTO);
	КонецЕсли;
	
	УдЛичнФЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "УдЛичнФЛ", Неопределено);
	Если УдЛичнФЛXDTO <> Неопределено Тогда
		ВывестиУдостоверениеЛичности(ТабличныйДокумент, Макет, УдЛичнФЛXDTO);
	КонецЕсли;
	
	ДокПдтвXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "ДокПдтв", Неопределено);
	Если ДокПдтвXDTO <> Неопределено Тогда
		ВывестиДокументПодтверждающийПолномочия(ТабличныйДокумент, Макет, ДокПдтвXDTO);
	КонецЕсли;
	
	СведРукопXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "СведРукоп", Неопределено);
	Если СведРукопXDTO <> Неопределено Тогда
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Рукоприкладчик'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СведРукопXDTO);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЛицоБезДоверенности(ТабличныйДокумент, Макет, ЛицоБезДоверенности)
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	
	СВЮЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СВЮЛ", Неопределено);
	Если СВЮЛXDTO <> Неопределено Тогда
		
		Заголовок = НСтр("ru='Сведения о лице, действующем без доверенности'");
		ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		
		ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СВЮЛXDTO.СвЮЛЕИО);
		СвФЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СВЮЛXDTO, "СвФЛ", , , Истина);
		Для Каждого ФизическоеЛицоXDTO Из СвФЛXDTO Цикл
			
			Заголовок = НСтр("ru='Сведения о подписанте'");
			ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, ФизическоеЛицоXDTO);							
		КонецЦикла;
	КонецЕсли;
	
	СвФЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СвФЛ", Неопределено);
	Если СвФЛXDTO <> Неопределено Тогда
		
		Заголовок = НСтр("ru='Сведения о подписанте'");
		ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);

		ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СвФЛXDTO);
	КонецЕсли;
	
	СвИПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СвИП", Неопределено);
	Если СвИПXDTO <> Неопределено Тогда
		
		Заголовок = НСтр("ru='Сведения о лице, действующем без доверенности'");
		ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);

		ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, СвИПXDTO);
	КонецЕсли;
	
	ПолномочияXDTO = Новый Соответствие();
	ПолномочияXDTO.Вставить("1", НСтр("ru='Индивидуальные полномочия'"));
	ПолномочияXDTO.Вставить("2", НСтр("ru='Совместные полномочия'"));
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Вид полномочий единоличного исполнительного органа'"); 
	ПроизвольныеСведения.Параметры.Текст = ПолномочияXDTO[ЛицоБезДоверенности.ПолнЮЛ];
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

Процедура ВывестиАдрес(ТабличныйДокумент, Макет, Адрес)
	
	АдрРФ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Адрес, "АдрРФ", "");
	Если Не ПустаяСтрока(АдрРФ) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Адрес в Российской Федерации'"); 
		ПроизвольныеСведения.Параметры.Текст = АдрРФ;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	ФИАСАдрРФ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Адрес, "ФИАСАдрРФ", "");
	Если Не ПустаяСтрока(ФИАСАдрРФ) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='ФИАС адрес в Российской Федерации'"); 
		ПроизвольныеСведения.Параметры.Текст = ФИАСАдрРФ;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	ИдФИАС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Адрес, "ИдФИАС", "");
	Если Не ПустаяСтрока(ИдФИАС) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Идентификатор адреса по ФИАС'"); 
		ПроизвольныеСведения.Параметры.Текст = ИдФИАС;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВывестиУдостоверениеЛичности(ТабличныйДокумент, Макет, УдостоверениеЛичности)
	
	СерияНомер = СтрРазделить(УдостоверениеЛичности.СерНомДок, " ");
	СерияДокумента = ?(СерияНомер.Количество() > 0, СерияНомер[0], "");
	НомерДокумента = ?(СерияНомер.Количество() > 1, СерияНомер[1], "");
	Если СерияНомер.Количество() > 2 Тогда
		СерияДокумента = УдостоверениеЛичности.СерНомДок;
		НомерДокумента = "";
	КонецЕсли;
	
	ДанныеУдостоверенияЛичности = МашиночитаемыеДоверенности.НовыеДанныеУдостоверенияЛичности();
	ДанныеУдостоверенияЛичности.СерДок = СерияДокумента;
	ДанныеУдостоверенияЛичности.НомДок = НомерДокумента;
	ДанныеУдостоверенияЛичности.ДатаДок = УдостоверениеЛичности.ДатаДок;
	ДанныеУдостоверенияЛичности.ВыдДок = УдостоверениеЛичности.ВыдДок;
	ДанныеУдостоверенияЛичности.ВидДок = УдостоверениеЛичности.КодВидДок;
	ДанныеУдостоверенияЛичности.КодВыдДок = УдостоверениеЛичности.КодВыдДок;
	
	ПредставлениеУдостоверения = МашиночитаемыеДоверенности.ПолучитьПредставлениеУдостоверение(ДанныеУдостоверенияЛичности);
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Документ удостоверяющий личность'"); 
	ПроизвольныеСведения.Параметры.Текст = ПредставлениеУдостоверения;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

Процедура ВывестиДокументПодтверждающийПолномочия(ТабличныйДокумент, Макет, ДокументПодтверждающийПолномочия)
	
	МассивСтрок = Новый Массив;
	
	НаимДокПдтв = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументПодтверждающийПолномочия, "НаимДокПдтв", "");
	Если Не ПустаяСтрока(НаимДокПдтв) Тогда
		Текст = НСтр("ru = 'Наименование документа'") + ": " + НаимДокПдтв;
		МассивСтрок.Добавить(Текст);
	КонецЕсли;	
	
	ДатаВыд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументПодтверждающийПолномочия, "ДатаВыд", Неопределено);
	Если ДатаВыд <> Неопределено Тогда
		Текст = НСтр("ru = 'Дата выдачи документа'") + ": " + Формат(ДатаВыд, "ДЛФ=ДД");
		МассивСтрок.Добавить(Текст);
	КонецЕсли;
	
	КемВыд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументПодтверждающийПолномочия, "КемВыд", "");
	Если Не ПустаяСтрока(КемВыд) Тогда
		Текст = НСтр("ru = 'Наименование органа, выдавшего документ'") + ": " + КемВыд;
		МассивСтрок.Добавить(Текст);
	КонецЕсли;
	
	СвУдДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументПодтверждающийПолномочия, "СвУдДок", "");
	Если Не ПустаяСтрока(СвУдДок) Тогда
		Текст = НСтр("ru = 'Сведения об удостоверении документа'") + ": " + СвУдДок;
		МассивСтрок.Добавить(Текст);
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда
	    ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Документ, подтверждающий полномочия лица'"); 
		ПроизвольныеСведения.Параметры.Текст = СтрСоединить(МассивСтрок, ". ");
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ВывестиПолномочия(ТабличныйДокумент, Макет, Полномочия)
	
	ТипыПолномочийXDTO = Новый Структура();
	ТипыПолномочийXDTO.Вставить("Текстовые", "0");
	ТипыПолномочийXDTO.Вставить("Машиночитаемые", "1");
	
	Если Полномочия.ТипПолн = ТипыПолномочийXDTO.Текстовые Тогда
		
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Текстовое содержание полномочия'"); 
		ПроизвольныеСведения.Параметры.Текст =
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочия, "ТекстПолн", "");
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
		
	ИначеЕсли Полномочия.ТипПолн = ТипыПолномочийXDTO.Машиночитаемые Тогда	
		
		МашПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочия, "МашПолн", Неопределено, , Истина);
		Если МашПолнXDTO <> Неопределено Тогда
			Для Каждого ПолномочиеXDTO Из МашПолнXDTO Цикл
				
				ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныйТекст");
				ПроизвольныеСведения.Параметры.Текст = ПолномочиеXDTO.КодПолн + " " + ПолномочиеXDTO.НаимПолн;
				ТабличныйДокумент.Вывести(ПроизвольныеСведения);
				
				ОгрСвПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПолномочиеXDTO, "ОгрСвПолн", Неопределено, , Истина);
				Если ОгрСвПолнXDTO <> Неопределено Тогда
					
					МассивОграничений = Новый Массив;
					
					Для Каждого ОграничениеXDTO Из ОгрСвПолнXDTO Цикл	
						
						Текст = Строка(ОграничениеXDTO.ИдОгр) + ". "
							+ НСтр("ru='Код ограничения'") + ": " + ОграничениеXDTO.КодОгр + ", "
							+ НСтр("ru='наименование ограничения'") + ": " + ОграничениеXDTO.НаимОгр;
							
						КодЗначОгр = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОграничениеXDTO, "КодЗначОгр", "");
						Если Не ПустаяСтрока(КодЗначОгр) Тогда
							Текст = Текст + ", " + НСтр("ru='код значения для ограничения'") + ": " + КодЗначОгр;
						КонецЕсли;	
						
						ТексЗначОгр = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОграничениеXDTO, "ТексЗначОгр", "");
						Если Не ПустаяСтрока(ТексЗначОгр) Тогда
							Текст = Текст + ", " + НСтр("ru='текст значение для ограничения'") + ": " + ТексЗначОгр;
						КонецЕсли;
						
						МассивОграничений.Добавить(Текст);
						
					КонецЦикла;
					
					Если МассивОграничений.Количество() > 0 Тогда
						ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
						ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Ограничения к полномочию'"); 
						ПроизвольныеСведения.Параметры.Текст = СтрСоединить(МассивОграничений, Символы.ПС);
						ТабличныйДокумент.Вывести(ПроизвольныеСведения);
					КонецЕсли;
					
				КонецЕсли;	
					
			КонецЦикла;
			
			Разделитель = Макет.ПолучитьОбласть("ПроизвольныйТекст");
			ТабличныйДокумент.Вывести(Разделитель);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Тип полномочий'"); 
	ПроизвольныеСведения.Параметры.Текст = ?(Полномочия.ПрСовмПолн = "2", 
		НСтр("ru='Полномочия осуществляются совместно'"),
		НСтр("ru='Полномочия индивидуальны'"));
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

Процедура ВывестиНотариальноеУдостоверение(ТабличныйДокумент, Макет, НотариальноеУдостоверение)

	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Место совершения доверенности'"); 
	ПроизвольныеСведения.Параметры.Текст = НотариальноеУдостоверение.МестоДовер;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о нотариусе'");
	ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
	ВывестиНотариуса(ТабличныйДокумент, Макет, НотариальноеУдостоверение.СвНотДейств);
		
	ВриоНотXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НотариальноеУдостоверение, "ВриоНот", Неопределено);
	Если ВриоНотXDTO <> Неопределено Тогда
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о ВРИО нотариуса'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиНотариуса(ТабличныйДокумент, Макет, ВриоНотXDTO, Истина);
	КонецЕсли;	
	
	ДопСвНотДовер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НотариальноеУдостоверение, "ДопСвНотДовер", "");
	Если Не ПустаяСтрока(ДопСвНотДовер) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Дополнительные сведения'"); 
		ПроизвольныеСведения.Параметры.Текст = ДопСвНотДовер;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	ИнСвУдНадпис = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НотариальноеУдостоверение, "ИнСвУдНадпис", "");
	Если Не ПустаяСтрока(ИнСвУдНадпис) <> Неопределено Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Иные сведения удостоверительной надписи'"); 
		ПроизвольныеСведения.Параметры.Текст = ИнСвУдНадпис;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	МассивПодписей = Новый Массив;
	ПодпРукописXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НотариальноеУдостоверение, "ПодпРукопис", , , Истина);
	Для Каждого ПодписьXDTO Из ПодпРукописXDTO Цикл
		Подпись = МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(ПодписьXDTO.ФИООтв);
		МассивПодписей.Добавить(Подпись);
	КонецЦикла;
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = 
		?(ПодпРукописXDTO.Количество() > 1, НСтр("ru='Рукописные подписи'"), НСтр("ru='Рукописная подпись'"));
	ПроизвольныеСведения.Параметры.Текст = СтрСоединить(МассивПодписей, Символы.ПС);
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

Процедура ВывестиНотариуса(ТабличныйДокумент, Макет, Нотариус, ЭтоВРИО = Ложь)
	
	Если ЭтоВРИО Тогда
		ФИО = МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(Нотариус.ФИОВриоНот);
	Иначе
		ФИО = МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(Нотариус.ФИОНотДейств);
	КонецЕсли;	
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='ФИО'"); 
	ПроизвольныеСведения.Параметры.Текст = ФИО;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Должность'"); 
	ПроизвольныеСведения.Параметры.Текст = Нотариус.Должность;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Регистрационный номер в Минюсте'"); 
	ПроизвольныеСведения.Параметры.Текст = Нотариус.РегНомНот;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

// Возвращает текстовое представление полномочий доверенности
// 
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Строка
//  
Функция ТекстПолномочий(Доверенность) Экспорт
	
	ВариантУказанияПолномочий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "ВариантЗаполненияПолномочий");
	
	КодыПолномочий = Новый Массив;
	ТекстыПолномочий = Новый Массив;
	
	Если ВариантУказанияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.Текст Тогда
		ТекстовоеПолномочие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "ТекстовоеПолномочие");
		ТекстыПолномочий.Добавить(ТекстовоеПолномочие);
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МЧД003Полномочия.Код,
			|	МЧД003Полномочия.Наименование
			|ИЗ
			|	Справочник.МЧД003.Полномочия КАК МЧД003Полномочия
			|ГДЕ
			|	МЧД003Полномочия.Ссылка = &Доверенность";
		
		Запрос.УстановитьПараметр("Доверенность", Доверенность);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			КодыПолномочий.Добавить(Выборка.Код);
			ПредставлениеПолномочия = СформироватьПредставлениеПолномочия(Выборка.Код, Выборка.Наименование);
			ТекстыПолномочий.Добавить(ПредставлениеПолномочия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокиПолномочий = Новый Массив();
	
	Если КодыПолномочий.Количество() > 0 Тогда
		СтрокиПолномочий.Добавить(НСтр("ru = 'Коды полномочий:'") + " " + СтрСоединить(КодыПолномочий, ", "));
	КонецЕсли;
	
	Если ТекстыПолномочий.Количество() > 0 Тогда
		
		Если ТекстыПолномочий.Количество() = 1 Тогда
			СтрокиПолномочий.Добавить(ТекстыПолномочий[0]);
		Иначе
			Для Счетчик = 1 По ТекстыПолномочий.Количество() Цикл
				Индекс = Счетчик-1;
				СтрокаПолномочий = СтрШаблон("%1. %2", Счетчик, ТекстыПолномочий[Индекс]);
				СтрокиПолномочий.Добавить(СтрокаПолномочий);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиПолномочий, Символы.ПС);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
