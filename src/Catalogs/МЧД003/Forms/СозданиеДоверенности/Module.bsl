// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбщегоНазначенияБЭД.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	ЦветРамкиПоУмолчанию = Новый Цвет;
	НачальноеЗаполнениеРеквизитов();
	НазначитьСобытиеПриИзмененииДляПолейФормы();
	ЗаполнитьСписокРегионов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	КлючУникальности = Доверенность[0].Документ[0].Довер[0].СвДов[0].НомДовер;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность И Не ЗавершениеРаботы Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Доверенность не была сохранена. Выйти без сохранения?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("Подключаемый_ВопросОЗакрытииЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ЗаполнениеСубъектовДоверенностиПоОбъектамПрикладнойКонфигурации

#Область Доверитель

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверит_ДоверительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборДоверителяЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповДоверителя, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверит_ДоверительАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;		
		ДанныеВыбора = Подбор(Текст, СписокВыбораТиповДоверителя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверит_ДоверительПриИзменении(Элемент)
	ПерезаполнитьСведенияОДоверителе(Доверенность[0].Документ[0].Довер[0].СвДоверит[0]._Доверитель);
КонецПроцедуры

#КонецОбласти

#Область ЛицоБезДоверенности

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенностиНачалоВыбора(Элемент,
	ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборЛицаБезДоверенностиЗавершение",
		ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповЛицаБезДоверенности, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенностиАвтоПодбор(Элемент, Текст,
	ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Подбор(Текст, СписокВыбораТиповЛицаБезДоверенности);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенностиПриИзменении(Элемент)
	ПерезаполнитьСведенияОЛицеБезДоверенности(
		Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0]._ЛицоБезДоверенности);
КонецПроцедуры

#КонецОбласти

#Область Представитель

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПред_ПредставительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборПредставителяЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповПредставителя, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПред_ПредставительАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Подбор(Текст, СписокВыбораТиповПредставителя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПред_ПредставительПриИзменении(Элемент)
	ПерезаполнитьСведенияОПредставителе(Доверенность[0].Документ[0].Довер[0].СвУпПред[0]._Представитель);
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ФизическоеЛицо

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвФЛ_ФизическоеЛицоНачалоВыбора(Элемент,
	ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборФизическогоЛицаЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповФизическогоЛица, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвФЛ_ФизическоеЛицоПриИзменении(Элемент)
	ПерезаполнитьСведенияОФизическомЛице(
		Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0].СВЮЛ[0].СвФЛ[0]._ФизическоеЛицо);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвФЛ_ФизическоеЛицоАвтоПодбор(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = Подбор(Текст, СписокВыбораТиповФизическогоЛица);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнТипПолнПриИзменении(Элемент)
	Если Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТипПолн = ТипыПолномочий().Текстовые Тогда
		ОтображаемаяГруппа = Элементы.ГруппаТекстовыеПолномочия;
	Иначе
		ОтображаемаяГруппа = Элементы.ГруппаМашиночитаемыеПолномочия;
	КонецЕсли;
	ПоказатьГруппу(Элементы.ГруппаТипыПолномочий, ОтображаемаяГруппа);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДовДатаВыдДоверПриИзменении(Элемент)
	ПриИзмененииДаты(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДовСрокДейстПриИзменении(Элемент)
	ПриИзмененииДаты(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоверенностьДокументДоверСвПолнМашПолн

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнМашПолнПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
	ДобавитьНовоеМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнМашПолнПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьТекущееМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнМашПолнПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьТекущееМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнМашПолнПриИзменении(Элемент)
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоверенностьДокументДоверСвУпПред

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПредПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
	ДобавитьНовогоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПредПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьТекущегоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПредПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьТекущегоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПредПриИзменении(Элемент)
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвУпПред);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодписатьИЗарегистрировать(Команда)
	Если ЗаписатьДоверенность() Тогда
		Модифицированность = Ложь;
		Элементы.ГруппаСозданиеДоверенности.Доступность = Ложь;
		ОбработчикПослеПодписания = Новый ОписаниеОповещения("Подключаемый_ПодписатьИЗарегистрироватьЗавершение",
			ЭтотОбъект);
		МашиночитаемыеДоверенностиКлиент.ПодписатьЗарегистрироватьМЧД(Истина, ОбработчикПослеПодписания,
			СсылкаНаДоверенность, , МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003());
	КонецЕсли;
КонецПроцедуры

#Область МашинныеПолномочия

&НаКлиенте
Процедура ДобавитьМашинноеПолномочие(Команда)
	ДобавитьНовоеМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМашинноеПолномочие(Команда)
	ИзменитьТекущееМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМашинноеПолномочие(Команда)
	УдалитьТекущееМашинноеПолномочие();
КонецПроцедуры

#КонецОбласти

#Область Представители

&НаКлиенте
Процедура ДобавитьПредставителя(Команда)
	ДобавитьНовогоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредставителя(Команда)
	ИзменитьТекущегоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредставителя(Команда)
	УдалитьТекущегоПредставителя();
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Перечисления

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДоверенностей()
	Возврат Новый ФиксированнаяСтруктура("Обычная, Безотзывная", "1", "2");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПризнакВозможностиПередоверия()
	Возврат Новый ФиксированнаяСтруктура("БезПередоверия, Однократное, ПоследующееПередоверие", "1", "2", "3");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПризнакСовместныхПолномочий()
	Возврат Новый ФиксированнаяСтруктура("Индивидуальные, Совместные", "1", "2");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыПолномочий()
	Возврат Новый ФиксированнаяСтруктура("Текстовые, Машиночитаемые", "0", "1");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыДоверителей()
	ТипыДоверителей = Новый Структура;
	ТипыДоверителей.Вставить("ЮридическоеЛицо", "1");
	ТипыДоверителей.Вставить("ИностраннаяОрганизация", "2");
	ТипыДоверителей.Вставить("ИндивидуальныйПредприниматель", "3");
	ТипыДоверителей.Вставить("ФизическоеЛицо", "4");
	Возврат Новый ФиксированнаяСтруктура(ТипыДоверителей);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыПредставителей()
	ТипыПредставителей = Новый Структура;
	ТипыПредставителей.Вставить("ЮридическоеЛицо", "1");
	ТипыПредставителей.Вставить("ИндивидуальныйПредприниматель", "2");
	ТипыПредставителей.Вставить("ФизическоеЛицо", "3");
	ТипыПредставителей.Вставить("ФилиалЮридическогоЛица", "4");
	ТипыПредставителей.Вставить("ФилиалИностраннойОрганизации", "5");
	Возврат Новый ФиксированнаяСтруктура(ТипыПредставителей);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлассификаторДаНет()
	Возврат Новый ФиксированнаяСтруктура("Нет, Да", "0", "1");
КонецФункции

#КонецОбласти

#Область ЗаполнениеРеквизитов

#Область СпискиТипов

&НаСервере
Процедура ЗаполнитьСпискиВыбораТипов()
	ТипыСубъектов = Новый Структура("ФизическоеЛицо, Организация, Контрагент",
		Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип.Типы(), Метаданные.ОпределяемыеТипы.Организация.Тип.Типы(),
		Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.Типы());
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить(ТипыСубъектов.Организация, Новый Массив);
	ПравилаЗаполнения[ТипыСубъектов.Организация].Добавить(СписокВыбораТиповДоверителя);
	ПравилаЗаполнения[ТипыСубъектов.Организация].Добавить(СписокВыбораТиповЛицаБезДоверенности);
	ПравилаЗаполнения[ТипыСубъектов.Организация].Добавить(СписокВыбораТиповПредставителя);
	ПравилаЗаполнения.Вставить(ТипыСубъектов.Контрагент, Новый Массив);
	ПравилаЗаполнения[ТипыСубъектов.Контрагент].Добавить(СписокВыбораТиповЛицаБезДоверенности);
	ПравилаЗаполнения[ТипыСубъектов.Контрагент].Добавить(СписокВыбораТиповПредставителя);
	ПравилаЗаполнения.Вставить(ТипыСубъектов.ФизическоеЛицо, Новый Массив);
	ПравилаЗаполнения[ТипыСубъектов.ФизическоеЛицо].Добавить(СписокВыбораТиповЛицаБезДоверенности);
	ПравилаЗаполнения[ТипыСубъектов.ФизическоеЛицо].Добавить(СписокВыбораТиповПредставителя);
	ПравилаЗаполнения[ТипыСубъектов.ФизическоеЛицо].Добавить(СписокВыбораТиповФизическогоЛица);

	ШаблонПредставления = НСтр("ru='Выбрать %1';");
	Для Каждого КлючИЗначение Из ТипыСубъектов Цикл
		Для Каждого ТипСубъекта Из КлючИЗначение.Значение Цикл
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипСубъекта);
			Если МетаданныеТипа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВариантыИмени = Новый Структура("Синоним, ПредставлениеОбъекта", "", "");
			ЗаполнитьЗначенияСвойств(ВариантыИмени, МетаданныеТипа);
			ВыбранноеИмя = ?(ЗначениеЗаполнено(ВариантыИмени.ПредставлениеОбъекта), ВариантыИмени.ПредставлениеОбъекта,
				ВариантыИмени.Синоним);
			Представление = СтрШаблон(ШаблонПредставления, ПолучитьСклоненияСтроки(НРег(ВыбранноеИмя), ,
				"ПД=Винительный;")[0]);
			СпискиНазначения = ПравилаЗаполнения[КлючИЗначение.Значение];
			Если ТипЗнч(СпискиНазначения) = Тип("Массив") Тогда
				Для Каждого СписокТипов Из СпискиНазначения Цикл
					СписокТипов.Добавить(ТипСубъекта, Представление);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Подбор(Знач СтрокаПоиска, Знач СписокТипов)
	Лимит = 10;
	ПараметрыПодбора = Новый Структура("СтрокаПоиска, СпособПоискаСтроки", СтрокаПоиска,
		СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть);
	ИтоговыйСписок = Новый СписокЗначений;
	Индекс = 1;
	Для Каждого ЭлементСписка Из СписокТипов Цикл
		ТекущийТип = ЭлементСписка.Значение;
		МетаданныеИсточника = Метаданные.НайтиПоТипу(ТекущийТип);
		Если ТипЗнч(МетаданныеИсточника) <> Тип("Неопределено") И Метаданные.Справочники.Содержит(МетаданныеИсточника) Тогда
			ИмяСправочника = МетаданныеИсточника.Синоним;
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеИсточника.ПолноеИмя());
			ДанныеВыбора = Менеджер.ПолучитьДанныеВыбора(ПараметрыПодбора);
			Для Каждого ЭлементВыбора Из ДанныеВыбора Цикл
				ЧастиПредставления = Новый Массив(2);
				ЧастиПредставления[0] = ЭлементВыбора.Представление;
				ЧастиПредставления[1] = Новый ФорматированнаяСтрока(СтрШаблон(" [%1]", ИмяСправочника), ,
					ЦветаСтиля.НедоступныйДляВыбораЭлементБЭД);
				ИтоговыйСписок.Добавить(ЭлементВыбора.Значение, Новый ФорматированнаяСтрока(ЧастиПредставления));
				Если Индекс >= Лимит Тогда
					Возврат ИтоговыйСписок;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйСписок;
КонецФункции

#КонецОбласти

#Область Автозаполнение

&НаСервере
Процедура ПерезаполнитьСведенияОДоверителе(Доверитель)
	Модифицированность = Истина;
	СведенияОДоверителе = Доверенность[0].Документ[0].Довер[0].СвДоверит;
	СведенияОДоверителе.Очистить();
	СоздатьРекурсивно(СведенияОДоверителе, "Доверенность.Документ.Довер.СвДоверит");
	ДоверительПоУмолчанию(ЭтотОбъект);
	Если ЗначениеЗаполнено(Доверитель) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Доверитель)) Тогда
		СведенияОДоверителе[0]._Доверитель = Доверитель;
		СтруктураСведений = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(Доверитель);
		ДополнительныеСведения = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Доверитель);
		ТипыДоверителей = ТипыДоверителей();
		Если ИнтеграцияЭДО.ЭтоФизЛицо(Доверитель) Тогда
			СведенияОДоверителе[0].ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель;
			СведенияОбИП = СведенияОДоверителе[0].Доверит[0].ИПДовер[0];
			СведенияОбИП.НаимИП = СтруктураСведений.Наименование;
			СведенияОбИП.ИННФЛ = СтруктураСведений.ИНН;
			СведенияОбИП.ОГРНИП = СтруктураСведений.ОГРН;
			СведенияОбИП.СНИЛС = СтруктураСведений.СНИЛС;
			СведенияОбИП.СведФЛ[0].ФИО[0].Фамилия = СтруктураСведений.Фамилия;
			СведенияОбИП.СведФЛ[0].ФИО[0].Имя = СтруктураСведений.Имя;
			СведенияОбИП.СведФЛ[0].ФИО[0].Отчество = СтруктураСведений.Отчество;
			СведенияОбИП.СведФЛ[0].ДатаРожд = СтруктураСведений.ДатаРождения;
			ПоказатьГруппу(Элементы.ГруппаДоверитель, Элементы.ГруппаДоверитель_ИндивидуальныйПредприниматель);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаДоверитель_ИндивидуальныйПредприниматель,
				Истина);
		Иначе
			СведенияОДоверителе[0].ТипДоверит = ТипыДоверителей.ЮридическоеЛицо;
			СведенияОЮрЛице = СведенияОДоверителе[0].Доверит[0].РосОргДовер[0].СвРосОрг[0];
			СведенияОЮрЛице.НаимОрг = СтруктураСведений.Наименование;
			СведенияОЮрЛице.ИННЮЛ = СтруктураСведений.ИНН;
			СведенияОЮрЛице.КПП = СтруктураСведений.КПП;
			СведенияОЮрЛице.ОГРН = СтруктураСведений.ОГРН;
			СведенияОЮрЛице.АдрРег[0].Регион = СтруктураСведений.КодРегиона;
			СведенияОЮрЛице.АдрРег[0].АдрРФ = ДополнительныеСведения.ЮридическийАдрес;
			ПерезаполнитьСведенияОЛицеБезДоверенности(СтруктураСведений.РуководительФизЛицо);
			ПоказатьГруппу(Элементы.ГруппаДоверитель, Элементы.ГруппаДоверитель_ЮридическоеЛицо);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаДоверитель_ЮридическоеЛицо, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОЛицеБезДоверенности(ЛицоБезДоверенности)
	Модифицированность = Истина;
	СведенияОЛицеБезДоверенности = Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов;
	СведенияОЛицеБезДоверенности.Очистить();
	СоздатьРекурсивно(СведенияОЛицеБезДоверенности,
		"Доверенность.Документ.Довер.СвДоверит.Доверит.РосОргДовер.ЛицоБезДов");
	ЛицоБезДоверенностиПоУмолчанию(ЭтотОбъект);
	ТипЗначения = ТипЗнч(ЛицоБезДоверенности);
	ДаНет = КлассификаторДаНет();
	Если ЗначениеЗаполнено(ЛицоБезДоверенности) И ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		СведенияОЛицеБезДоверенности[0]._ЛицоБезДоверенности = ЛицоБезДоверенности;
		Если Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип.СодержитТип(ТипЗначения) Тогда
			Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОФЛ = ДаНет.Да;
			Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК = ДаНет.Нет;
			Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП = ДаНет.Нет;
			СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(ЛицоБезДоверенности);
			СведенияОФизЛице = СведенияОЛицеБезДоверенности[0].СвФЛ[0];
			СведенияОФизЛице.ИННФЛ = СтруктураСведений.ИНН;
			СведенияОФизЛице.СНИЛС = СтруктураСведений.СтраховойНомерПФР;
			ЗаполнитьТаблицуТипаСведФЛ(СведенияОФизЛице.СведФЛ[0], СтруктураСведений);
			ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности, Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо, Истина);
		Иначе
			СтруктураСведений = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ЛицоБезДоверенности);
			Если ИнтеграцияЭДО.ЭтоФизЛицо(ЛицоБезДоверенности) Тогда
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОФЛ = ДаНет.Нет;
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК = ДаНет.Нет;
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП = ДаНет.Да;
				СведенияОбИП = СведенияОЛицеБезДоверенности[0].СвИП[0];
				СведенияОбИП.НаимИП = СтруктураСведений.ПолноеНаименование;
				СведенияОбИП.ИННФЛ = СтруктураСведений.ИНН;
				СведенияОбИП.ОГРНИП = СтруктураСведений.ОГРН;
				СведенияОбИП.СведФЛ[0].ФИО[0].Фамилия = СтруктураСведений.Фамилия;
				СведенияОбИП.СведФЛ[0].ФИО[0].Имя = СтруктураСведений.Имя;
				СведенияОбИП.СведФЛ[0].ФИО[0].Отчество = СтруктураСведений.Отчество;
				ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности,
					Элементы.ГруппаЛицоБезДоверенности_ИндивидуальныйПредприниматель);
				СброситьОформлениеЭлементовФормы(ЭтотОбъект,
					Элементы.ГруппаЛицоБезДоверенности_ИндивидуальныйПредприниматель, Истина);
			Иначе
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОФЛ = ДаНет.Нет;
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК = ДаНет.Да;
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП = ДаНет.Нет;
				СведенияОЮрЛице = СведенияОЛицеБезДоверенности[0].СВЮЛ[0].СвЮЛЕИО[0];
				СведенияОЮрЛице.НаимОрг = СтруктураСведений.ПолноеНаименование;
				СведенияОЮрЛице.ИННЮЛ = СтруктураСведений.ИНН;
				СведенияОЮрЛице.КПП = СтруктураСведений.КПП;
				СведенияОЮрЛице.ОГРН = СтруктураСведений.ОГРН;
				СведенияОЮрЛице.АдрРег[0].АдрРФ = СтруктураСведений.ЮридическийАдрес;
				СведенияОЮрЛице.АдрРег[0].Регион = РаботаСАдресами.СведенияОбАдресе(
					СтруктураСведений.ЮридическийАдресXML).КодРегиона;
				ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности, Элементы.ГруппаЛицоБезДоверенности_ЮридическоеЛицо);
				Если Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(ТипЗначения) Тогда
					РегистрационныеДанные = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(ЛицоБезДоверенности);
					Если ЗначениеЗаполнено(РегистрационныеДанные.РуководительФизЛицо) Тогда
						ПерезаполнитьСведенияОФизическомЛице(РегистрационныеДанные.РуководительФизЛицо);
					КонецЕсли;
				КонецЕсли;
				СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаЛицоБезДоверенности_ЮридическоеЛицо, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОПредставителе(Представитель)
	Модифицированность = Истина;
	СведенияОПредставителе = Доверенность[0].Документ[0].Довер[0].СвУпПред;
	СведенияОПредставителе.Очистить();
	СоздатьРекурсивно(СведенияОПредставителе, "Доверенность.Документ.Довер.СвУпПред");
	ПредставительПоУмолчанию(ЭтотОбъект);
	ТипЗначения = ТипЗнч(Представитель);
	ТипыПредставителей = ТипыПредставителей();
	Если ЗначениеЗаполнено(Представитель) И ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		СведенияОПредставителе[0]._Представитель = Представитель;
		Если Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип.СодержитТип(ТипЗначения) Тогда
			СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(Представитель);
			СведенияОПредставителе[0].ТипПред = ТипыПредставителей.ФизическоеЛицо;
			СведенияОФизЛице = СведенияОПредставителе[0].Пред[0].СведФизЛ[0];
			СведенияОФизЛице.ИННФЛ = СтруктураСведений.ИНН;
			СведенияОФизЛице.СНИЛС = СтруктураСведений.СтраховойНомерПФР;
			ЗаполнитьТаблицуТипаСведФЛ(СведенияОФизЛице.СведФЛ[0], СтруктураСведений);
			ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_ФизическоеЛицо);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаПредставитель_ФизическоеЛицо, Истина);
		Иначе
			СтруктураСведений = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Представитель);
			Если ИнтеграцияЭДО.ЭтоФизЛицо(Представитель) Тогда
				СведенияОПредставителе[0].ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель;
				СведенияОбИП = СведенияОПредставителе[0].Пред[0].СведИП[0];
				СведенияОбИП.НаимИП = СтруктураСведений.ПолноеНаименование;
				СведенияОбИП.ИННФЛ = СтруктураСведений.ИНН;
				СведенияОбИП.ОГРНИП = СтруктураСведений.ОГРН;
				СведенияОбИП.СведФЛ[0].ФИО[0].Фамилия = СтруктураСведений.Фамилия;
				СведенияОбИП.СведФЛ[0].ФИО[0].Имя = СтруктураСведений.Имя;
				СведенияОбИП.СведФЛ[0].ФИО[0].Отчество = СтруктураСведений.Отчество;
				ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_ИндивидуальныйПредприниматель);
				СброситьОформлениеЭлементовФормы(ЭтотОбъект,
					Элементы.ГруппаПредставитель_ИндивидуальныйПредприниматель, Истина);
			Иначе
				СведенияОПредставителе[0].ТипПред = ТипыПредставителей.ЮридическоеЛицо;
				СведенияОЮрЛице = СведенияОПредставителе[0].Пред[0].СведОрг[0];
				СведенияОЮрЛице.НаимОрг = СтруктураСведений.ПолноеНаименование;
				СведенияОЮрЛице.ИННЮЛ = СтруктураСведений.ИНН;
				СведенияОЮрЛице.КПП = СтруктураСведений.КПП;
				СведенияОЮрЛице.ОГРН = СтруктураСведений.ОГРН;
				СведенияОЮрЛице.АдрРег[0].АдрРФ = СтруктураСведений.ЮридическийАдрес;
				ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_Организация);
				СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаПредставитель_Организация, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОФизическомЛице(ФизическоеЛицо)
	Модифицированность = Истина;
	СведенияОФизическомЛице = Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0].СВЮЛ[0].СвФЛ;
	СведенияОФизическомЛице.Очистить();
	СоздатьРекурсивно(СведенияОФизическомЛице,
		"Доверенность.Документ.Довер.СвДоверит.Доверит.РосОргДовер.ЛицоБезДов.СВЮЛ.СвФЛ");
	Если ЗначениеЗаполнено(ФизическоеЛицо) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ФизическоеЛицо)) Тогда
		СведенияОФизическомЛице[0]._ФизическоеЛицо = ФизическоеЛицо;
		СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(ФизическоеЛицо);
		СведенияОФизическомЛице[0].ИННФЛ = СтруктураСведений.ИНН;
		СведенияОФизическомЛице[0].СНИЛС = СтруктураСведений.СтраховойНомерПФР;
		ЗаполнитьТаблицуТипаСведФЛ(СведенияОФизическомЛице[0].СведФЛ[0], СтруктураСведений);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуТипаСведФЛ(СведФЛ, СтруктураСведений)
	СведФЛ.ФИО[0].Фамилия = СтруктураСведений.Фамилия;
	СведФЛ.ФИО[0].Имя = СтруктураСведений.Имя;
	СведФЛ.ФИО[0].Отчество = СтруктураСведений.Отчество;
	СведФЛ.ДатаРожд = СтруктураСведений.ДатаРождения;
	Ключи = "КемВыдан, ДатаВыдачи, КодФНС, КодПодразделения, Серия, Номер";
	СведенияУдостоверения = Новый Структура(Ключи);
	ЗаполнитьЗначенияСвойств(СведенияУдостоверения, СтруктураСведений);
	СведФЛ.УдЛичнФЛ[0].ВыдДок = СведенияУдостоверения.КемВыдан;
	СведФЛ.УдЛичнФЛ[0].ДатаДок = СведенияУдостоверения.ДатаВыдачи;
	СведФЛ.УдЛичнФЛ[0].КодВидДок = СведенияУдостоверения.КодФНС;
	СведФЛ.УдЛичнФЛ[0].КодВыдДок = СведенияУдостоверения.КодПодразделения;
	СведФЛ.УдЛичнФЛ[0].СерНомДок = СтрШаблон("%1 %2", СведенияУдостоверения.Серия, СведенияУдостоверения.Номер);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьсписокРегионов()
	
	СписокРегионов = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		СписокРегионов = МодульАдресныйКлассификатор.СубъектыРФ();
	КонецЕсли;
	
	Если СписокРегионов = Неопределено Тогда
		Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргАдрРегРегион.РежимВыбораИзСписка = Ложь;
		Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион.РежимВыбораИзСписка
			= Ложь;
	Иначе
		
		Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргАдрРегРегион.РежимВыбораИзСписка = Истина;
		Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион.РежимВыбораИзСписка
			= Истина;
		
		Для Каждого Регион Из СписокРегионов Цикл
			Код = ?(Регион.КодСубъектаРФ < 10, "0"+ Строка(Регион.КодСубъектаРФ), Строка(Регион.КодСубъектаРФ));
			Наименование = Код + " " + Регион.Наименование;
			
			Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргАдрРегРегион.СписокВыбора
				.Добавить(Код, Наименование);
				
			Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион.СписокВыбора
				.Добавить(Код, Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура СоздатьРекурсивно(НовыйОбъект, Путь)
	Запись = НовыйОбъект.Добавить();
	Для Каждого Реквизит Из ПолучитьРеквизиты(Путь) Цикл
		Если Реквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			СоздатьРекурсивно(Запись[Реквизит.Имя], СтрШаблон("%1.%2", Путь, Реквизит.Имя));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ДоверительПоУмолчанию(Форма)
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0]._Доверитель = "";
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].ТипДоверит = ТипыДоверителей().ЮридическоеЛицо;
	ПоказатьГруппу(Форма.Элементы.ГруппаДоверитель, Форма.Элементы.ГруппаДоверитель_ЮридическоеЛицо);
	СброситьОформлениеЭлементовФормы(Форма, Форма.Элементы.ГруппаДоверитель_ЮридическоеЛицо, Истина);
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК = КлассификаторДаНет().Нет;
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП = КлассификаторДаНет().Нет;
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОФЛ = КлассификаторДаНет().Да;
	ЛицоБезДоверенностиПоУмолчанию(Форма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЛицоБезДоверенностиПоУмолчанию(Форма)
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0].ПолнЮЛ = ПризнакСовместныхПолномочий().Индивидуальные;
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0]._ЛицоБезДоверенности = "";
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0]._ЛицоБезДоверенности = "";
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0].СВЮЛ[0].СвФЛ[0]._ФизическоеЛицо = "";
	ПоказатьГруппу(Форма.Элементы.ГруппаЛицоБезДоверенности, Форма.Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо);
	СброситьОформлениеЭлементовФормы(Форма, Форма.Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо, Истина);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПредставительПоУмолчанию(Форма)
	Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред[0]._Представитель = "";
	Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред[0]._НомерСтроки = "1";
	Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред[0].ТипПред = ТипыПредставителей().ФизическоеЛицо;
	ПоказатьГруппу(Форма.Элементы.ГруппаПредставитель, Форма.Элементы.ГруппаПредставитель_ФизическоеЛицо);
	СброситьОформлениеЭлементовФормы(Форма, Форма.Элементы.ГруппаПредставитель_ФизическоеЛицо, Истина);
	ПоказатьГруппу(Форма.Элементы.ГруппаПредставленияПредставителей, Форма.Элементы.ГруппаОдинПредставитель);
	ОбновитьВидимостьКомандТаблицыПредставителей(Форма);
КонецПроцедуры

&НаСервере
Процедура НачальноеЗаполнениеРеквизитов()
	ЗаполнитьСпискиВыбораТипов();
	ЗаполнитьСписокВидовДокументовФизическогоЛица();
	СоздатьРекурсивно(Доверенность, "Доверенность");
	Доверенность[0].ВерсФорм = "EMCHD_1";
	Доверенность[0].ПрЭлФорм = "00000000";
	Доверенность[0].Документ[0].Довер[0].СвДов[0].НомДовер = МашиночитаемыеДоверенности.ПолучитьНомерМЧД().НомерДоверенности;
	Доверенность[0].ИдФайл = "ON_EMCHD_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд;") + "_"
		+ Доверенность[0].Документ[0].Довер[0].СвДов[0].НомДовер;
	Доверенность[0].Документ[0].Передов.Очистить();
	Доверенность[0].Документ[0].Довер[0].СвДов[0].ВнНомДовер = Доверенность[0].Документ[0].Довер[0].СвДов[0].НомДовер;
	Доверенность[0].Документ[0].Довер[0].СвДов[0].СведСист = "https://m4d.nalog.gov.ru/";
	Доверенность[0].Документ[0].Довер[0].СвДов[0].ВидДовер = ВидыДоверенностей().Обычная;
	Доверенность[0].Документ[0].Довер[0].СвДов[0].ПрПередов = ПризнакВозможностиПередоверия().БезПередоверия;
	Доверенность[0].Документ[0].Довер[0].СвДов[0].КодНОДейст.Очистить();
	ДоверительПоУмолчанию(ЭтотОбъект);
	ПредставительПоУмолчанию(ЭтотОбъект);
	Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТипПолн = ТипыПолномочий().Текстовые;
	Доверенность[0].Документ[0].Довер[0].СвПолн[0].ПрСовмПолн = ПризнакСовместныхПолномочий().Индивидуальные;
	Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТекстПолн = МашиночитаемыеДоверенностиКлиентСервер.ПредставлениеНеограниченныхПолномочий();
	Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн.Очистить();
	ПоказатьГруппу(Элементы.ГруппаТипыПолномочий, Элементы.ГруппаТекстовыеПолномочия);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура НазначитьСобытиеПриИзмененииДляПолейФормы()
	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			Обработчик = Элемент.ПолучитьДействие("ПриИзменении");
			Если Не ЗначениеЗаполнено(Обработчик) Тогда
				Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_СброситьОформлениеЭлемента");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьГруппу(Родитель, Потомок)
	Для Каждого ВложеннаяГруппа Из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ВложеннаяГруппа) = Тип("ГруппаФормы") Тогда
			ВложеннаяГруппа.Видимость = ВложеннаяГруппа = Потомок;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьОформлениеЭлементовФормы(Форма, Элемент, Рекурсивно = Ложь)
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ЦветРамки") Тогда
		Элемент.ЦветРамки = Форма.ЦветРамкиПоУмолчанию;
	КонецЕсли;
	Если Рекурсивно И ТипЗнч(Элемент) = Тип("ГруппаФормы") Или ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			СброситьОформлениеЭлементовФормы(Форма, ПодчиненныйЭлемент, Рекурсивно);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьКомандТаблицыПредставителей(Форма)
	
	Форма.Элементы.ДобавитьПредставителя.Доступность = ЗначениеЗаполнено(
		Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред[0]._Представитель);
		
	КоличествоПредставителейБольшеОдного = Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред.Количество() > 1;
		
	Форма.Элементы.ИзменитьПредставителя.Видимость = КоличествоПредставителейБольшеОдного;
	Форма.Элементы.УдалитьПредставителя.Видимость = КоличествоПредставителейБольшеОдного;
	Форма.Элементы.ПереместитьВверхПредставителя.Видимость = КоличествоПредставителейБольшеОдного;
	Форма.Элементы.ПереместитьВнизПредставителя.Видимость = КоличествоПредставителейБольшеОдного;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьКомандТаблицыПолномочий(Форма)
	ЭтоМашинныеПолномочия = Форма.Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТипПолн
		= ТипыПолномочий().Машиночитаемые;
	ЕстьПолномочия = ЗначениеЗаполнено(Форма.Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн);
	Форма.Элементы.ГруппаКомандыМашиночитаемыхПолномочий.Видимость = ЭтоМашинныеПолномочия;
	Если ЭтоМашинныеПолномочия Тогда
		Форма.Элементы.ИзменитьМашинноеПолномочие.Доступность = ЕстьПолномочия;
		Форма.Элементы.УдалитьМашинноеПолномочие.Доступность = ЕстьПолномочия;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СброситьОформлениеЭлемента(Элемент)
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовДокументовФизическогоЛица()
	Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛСведФЛУдЛичнФЛКодВидДок.СписокВыбора.Очистить();
	Элементы.ДоверенностьДокументДоверСвУпПредПредСведИПСведФЛУдЛичнФЛКодВидДок.СписокВыбора.Очистить();
	ВидыДокументов = МашиночитаемыеДоверенностиКлиентСервер.ВидыДокументовФизическихЛиц();
	
	Для Каждого ВидДокумента Из ВидыДокументов Цикл
		Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛСведФЛУдЛичнФЛКодВидДок.СписокВыбора
			.Добавить(ВидДокумента.Ключ, ВидДокумента.Значение);
		Элементы.ДоверенностьДокументДоверСвУпПредПредСведИПСведФЛУдЛичнФЛКодВидДок.СписокВыбора
			.Добавить(ВидДокумента.Ключ, ВидДокумента.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНумерациюТаблицы(Таблица)
	Индекс = 1;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы._НомерСтроки <> Индекс Тогда
			СтрокаТаблицы._НомерСтроки = Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РаботаСОбъектамиПрикладнойКонфигурации

&НаКлиенте
Процедура НачатьВыборЗначенияСубъекта(ОбработчикВыбораЗначения, СписокТипов, Элемент)
	КоличествоТипов = СписокТипов.Количество();
	ОбработчикВыбораТипа = Новый ОписаниеОповещения("Подключаемый_ВыборТипаСубъектаЗавершение", ЭтотОбъект,
		Новый Структура("ОбработчикВыбораЗначения", ОбработчикВыбораЗначения));
	Если КоличествоТипов = 0 Тогда
		Возврат;
	ИначеЕсли КоличествоТипов = 1 Тогда
		ВыполнитьОбработкуОповещения(ОбработчикВыбораТипа, СписокТипов[0]);
	Иначе
		ПоказатьВыборИзМеню(ОбработчикВыбораТипа, СписокТипов, Элемент);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ВыбранныйТип - ЭлементСпискаЗначений:
//  * Значение - Тип - тип субъекта, для которого нужно открыть форму выбора
//  ДополнительныеПараметры - Структура:
//  * ОбработчикВыбораЗначения - ОписаниеОповещения
&НаКлиенте
Процедура Подключаемый_ВыборТипаСубъектаЗавершение(ВыбранныйТип, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранныйТип) = Тип("ЭлементСпискаЗначений") Тогда
		ПоказатьВводЗначения(ДополнительныеПараметры.ОбработчикВыбораЗначения, Неопределено,
			ВыбранныйТип.Представление, ВыбранныйТип.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборДоверителяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	Для Каждого ЭлементСписка Из СписокВыбораТиповДоверителя Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОДоверителе(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборЛицаБезДоверенностиЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	Для Каждого ЭлементСписка Из СписокВыбораТиповЛицаБезДоверенности Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОЛицеБезДоверенности(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборПредставителяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	Для Каждого ЭлементСписка Из СписокВыбораТиповПредставителя Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОПредставителе(ВыбранноеЗначение);
	КонецЕсли;
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборФизическогоЛицаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	Для Каждого ЭлементСписка Из СписокВыбораТиповФизическогоЛица Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОФизическомЛице(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборМашинногоПолномочияЗавершение(Результат, ИдентификаторСтроки = Неопределено) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если ИдентификаторСтроки = Неопределено Тогда
			ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн.Добавить();
		Иначе
			ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн.НайтиПоИдентификатору(
					ИдентификаторСтроки);
		КонецЕсли;
	КонецЕсли;
	Если ТекущиеДанные <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		ТекущиеДанные.МнПолн = Результат.Мнемоника;
		ТекущиеДанные.КодПолн = Результат.КодКлассификатора;
		ТекущиеДанные.НаимПолн = Результат.Полномочие;
		ТекущиеДанные._Полномочие = МашиночитаемыеДоверенностиКлиентСервер.СформироватьПредставлениеПолномочия(
				Результат.КодКлассификатора, Результат.Полномочие);
		Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаМашиночитаемыеПолномочия, Истина);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВводПредставителяЗавершение(Результат, ИдентификаторСтроки = Неопределено) Экспорт
	Если ТипЗнч(Результат) = Тип("Строка") И ЭтоАдресВременногоХранилища(Результат) Тогда
		ЗаполнитьПредставителя(Результат, ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставителя(АдресХранилища, ИдентификаторСтроки)
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения[0]._Представитель) Тогда
		ТекстОшибки = НСтр("ru='Представитель не выбран';");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ПредставительУжеУказан(ДанныеЗаполнения[0], ИдентификаторСтроки) Тогда
		ТекстОшибки = НСтр("ru='Представитель уже указан в списке';");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	Иначе
		Если ИдентификаторСтроки = Неопределено Тогда
			ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвУпПред.Добавить();
		Иначе
			ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвУпПред.НайтиПоИдентификатору(ИдентификаторСтроки);
		КонецЕсли;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные._Представитель = ДанныеЗаполнения[0]._Представитель;
			ТекущиеДанные.ТипПред = ДанныеЗаполнения[0].ТипПред;
			ЗначениеВДанныеФормы(ДанныеЗаполнения[0].Пред, ТекущиеДанные.Пред);
			Элементы.ДоверенностьДокументДоверСвУпПред.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
			ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителей, Элементы.ГруппаНесколькоПредставителей);
			Элементы.ДекорацияЗаголовокГруппыПредставителей.Заголовок = НСтр("ru='Сведения о представителях'");
			ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвУпПред);
КонецПроцедуры

&НаСервере
Функция ПредставительУжеУказан(Представитель, ТекущийИдентификатор)
	
	КлючНовогоПредставителя = ПолучитьКлючПредставителя(Представитель);
	
	ТаблицаПредставителей = Доверенность[0].Документ[0].Довер[0].СвУпПред; // ДанныеФормыКоллекция
	
	Для Каждого Пред Из ТаблицаПредставителей Цикл
		
		Если Пред.ПолучитьИдентификатор() = ТекущийИдентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если Представитель.ТипПред <> Пред.ТипПред Тогда
			Продолжить;
		КонецЕсли;
		
		КлючПредставителя = ПолучитьКлючПредставителя(Пред);
		
		Если КлючНовогоПредставителя = КлючПредставителя Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючПредставителя(Представитель)
	
	Разделитель = "/";
	ТипыПредставителей = ТипыПредставителей();
	Ключ = "";
	
	ТипПредставителя = Представитель.ТипПред;
	ДанныеПредставителя = Представитель.Пред[0];
	
	Если ТипПредставителя = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
		Ключ = ДанныеПредставителя.СведИО[0].ИННЮЛ + Разделитель + ДанныеПредставителя.СведИО[0].КПП;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
		Ключ = ДанныеПредставителя.СведИП[0].ОГРНИП + Разделитель + ДанныеПредставителя.СведИП[0].СНИЛС;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ЮридическоеЛицо Тогда
		Ключ = ДанныеПредставителя.СведОрг[0].ИННЮЛ + Разделитель + ДанныеПредставителя.СведОрг[0].КПП;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ФизическоеЛицо Тогда
		Ключ = ДанныеПредставителя.СведФизЛ[0].СНИЛС;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ФилиалЮридическогоЛица Тогда
		Ключ = ДанныеПредставителя.СведФилиал[0].ИННЮЛ + Разделитель + ДанныеПредставителя.СведФилиал[0].КПП;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДоверенности

&НаСервере
Процедура ЗаполнитьРекурсивно(Приемник, Источник, ПутьДоИсточника, ПоляСОшибкамиЗначенияРеквизита)
	РеквизитыИсточника = ПолучитьРеквизиты(ПутьДоИсточника);
	Для Каждого РеквизитИсточника Из РеквизитыИсточника Цикл
		Если ЭтоСлужебныйРеквизит(РеквизитИсточника) Или Не ЗначениеЗаполнено(Источник[РеквизитИсточника.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		РеквизитПриемника = Приемник.Свойства().Получить(РеквизитИсточника.Имя);
		Если ТипЗнч(РеквизитПриемника) <> Тип("Неопределено") Тогда
			НовыйПуть = СтрШаблон("%1.%2", ПутьДоИсточника, РеквизитИсточника.Имя);
			ЭтоСписок = РеквизитПриемника.ВерхняяГраница <> 1;
			ЭтоОбъект = ТипЗнч(РеквизитПриемника.Тип) = Тип("ТипОбъектаXDTO");
			Если ЭтоСписок Тогда
				Список = Приемник.ПолучитьСписок(РеквизитПриемника);
				Если ЭтоОбъект Тогда
					Для Каждого ЭлементСпискаИсточника Из Источник[РеквизитИсточника.Имя] Цикл
						ВложенныйОбъект = ФабрикаXDTO.Создать(РеквизитПриемника.Тип);
						ЗаполнитьРекурсивно(ВложенныйОбъект, ЭлементСпискаИсточника, НовыйПуть,
							ПоляСОшибкамиЗначенияРеквизита);
						Список.Добавить(ВложенныйОбъект);
					КонецЦикла;
				Иначе
					Для Каждого ЭлементСпискаИсточника Из Источник[РеквизитИсточника.Имя] Цикл
						Попытка
							Список.Добавить(ЭлементСпискаИсточника._Значение);
						Исключение
							Поле = СтрСоединить(СтрРазделить(НовыйПуть, ".", Ложь), "[0].");
							ОбщегоНазначения.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(
								ИнформацияОбОшибке()), , Поле);
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ЭтоОбъект Тогда
				ВложенныйОбъект = ФабрикаXDTO.Создать(РеквизитПриемника.Тип);
				ЗаполнитьРекурсивно(ВложенныйОбъект, Источник[РеквизитИсточника.Имя][0], НовыйПуть,
					ПоляСОшибкамиЗначенияРеквизита);
				Приемник.Установить(РеквизитПриемника, ВложенныйОбъект);
			Иначе
				Попытка
					ПроверитьЗначениеРеквизита(РеквизитПриемника, Источник[РеквизитИсточника.Имя]);
					Приемник.Установить(РеквизитПриемника, Источник[РеквизитИсточника.Имя]);
				Исключение
					Поле = СтрСоединить(СтрРазделить(НовыйПуть, ".", Ложь), "[0].");
					ОбщегоНазначения.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(
						ИнформацияОбОшибке()), , Поле);
						
					ПоляСОшибкамиЗначенияРеквизита.Вставить(Поле, Истина);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойствоXDTOОбязательноКЗаполнению(Свойство)
	Возврат Не (Свойство.ВозможноПустое Или Свойство.НижняяГраница < 1);
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСлужебныйРеквизит(Реквизит)
	Возврат СтрНачинаетсяС(Реквизит.Имя, "_");
КонецФункции

&НаСервере
Процедура СброситьНеподдерживаемыеИАльтернативныеСвойства(Объект)
	Объект.Документ.Сбросить("Передов");
	СвДов = Объект.Документ.Довер.СвДов; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДовТип
	СвДов.Сбросить("Безотзыв");
	СвДоверит = Объект.Документ.Довер.СвДоверит; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
	ТипыДоверителей = ТипыДоверителей();
	ДаНет = КлассификаторДаНет();
	Для Каждого Доверитель Из СвДоверит Цикл
		Если Доверитель.ТипДоверит = ТипыДоверителей.ЮридическоеЛицо Тогда
			ЕстьУК = Доверитель.Доверит.РосОргДовер.ЕИОУК = ДаНет.Да;
			ЕстьИП = Доверитель.Доверит.РосОргДовер.ЕИОИП = ДаНет.Да;
			ЕстьФЛ = Доверитель.Доверит.РосОргДовер.ЕИОФЛ = ДаНет.Да;
			Доверитель.Доверит.РосОргДовер.СвРосОрг.Сбросить("ДокПдтв");
			Лица = Доверитель.Доверит.РосОргДовер.ЛицоБезДов; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
			Для Каждого Лицо Из Лица Цикл
				Если ЕстьУК И Лицо.СВЮЛ <> Неопределено Тогда
					Лицо.СВЮЛ.СвЮЛЕИО.Сбросить("ДокПдтв");
					ФизЛица = Лицо.СВЮЛ.СвФЛ; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвФЛТип
					Для Каждого ФизЛицо Из ФизЛица Цикл
						ФизЛицо.Сбросить("ДокПдтв");
						ФизЛицо.СведФЛ.Сбросить("АдрМЖ");
						ФизЛицо.СведФЛ.Сбросить("УдЛичнФЛ");
					КонецЦикла;
				Иначе
					Лицо.Сбросить("СВЮЛ");
				КонецЕсли;
				Если ЕстьИП И Лицо.СвИП <> Неопределено Тогда
					Лицо.СвИП.Сбросить("ДокПдтв");
					Лицо.СвИП.СведФЛ.Сбросить("АдрМЖ");
					Лицо.СвИП.СведФЛ.Сбросить("УдЛичнФЛ");
				Иначе
					Лицо.Сбросить("СвИП");
				КонецЕсли;
				Если ЕстьФЛ И Лицо.СвФЛ <> Неопределено Тогда
					Лицо.СвФЛ.Сбросить("ДокПдтв");
					Лицо.СвФЛ.СведФЛ.Сбросить("АдрМЖ");
					Лицо.СвФЛ.СведФЛ.Сбросить("УдЛичнФЛ");
				Иначе
					Лицо.Сбросить("СвФЛ");
				КонецЕсли;
			КонецЦикла;
		Иначе
			Доверитель.Доверит.Сбросить("РосОргДовер");
		КонецЕсли;
		Если Доверитель.ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
			Доверитель.Доверит.ИПДовер.Сбросить("ДокПдтв");
			Доверитель.Доверит.ИПДовер.СведФЛ.Сбросить("АдрМЖ");
			Доверитель.Доверит.ИПДовер.СведФЛ.Сбросить("УдЛичнФЛ");
		Иначе
			Доверитель.Доверит.Сбросить("ИПДовер");
		КонецЕсли;
		Доверитель.Доверит.Сбросить("ИнОргДовер");
		Доверитель.Доверит.Сбросить("ФЛДовер");
	КонецЦикла;
	Объект.Документ.Довер.Сбросить("СвНотУд");
	СвПолн = Объект.Документ.Довер.СвПолн; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвПолнТип
	Если СвПолн.ТипПолн = ТипыПолномочий().Текстовые Тогда
		СвПолн.Сбросить("МашПолн");
	Иначе
		СвПолн.Сбросить("ТекстПолн");
		Для Каждого Полномочие Из СвПолн.МашПолн Цикл
			Полномочие.Сбросить("ОгрСвПолн");
		КонецЦикла;
	КонецЕсли;
	Представители = Объект.Документ.Довер.СвУпПред; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвУпПредТип
	ТипыПредставителей = ТипыПредставителей();
	Для Каждого Представитель Из Представители Цикл
		Если Представитель.ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда
			Представитель.Пред.СведОрг.Сбросить("ДокПдтв");
			Представитель.Пред.СведОрг.Сбросить("АдрРег");
		Иначе
			Представитель.Пред.Сбросить("СведОрг");
		КонецЕсли;
		Если Представитель.ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			Представитель.Пред.СведИП.Сбросить("ДокПдтв");
			Представитель.Пред.СведИП.СведФЛ.Сбросить("АдрМЖ");
		Иначе
			Представитель.Пред.Сбросить("СведИП");
		КонецЕсли;
		Если Представитель.ТипПред = ТипыПредставителей.ФизическоеЛицо Тогда
			Представитель.Пред.СведФизЛ.Сбросить("ДокПдтв");
			Представитель.Пред.СведФизЛ.СведФЛ.Сбросить("АдрМЖ");
		Иначе
			Представитель.Пред.Сбросить("СведФизЛ");
		КонецЕсли;
		Представитель.Пред.Сбросить("СведИО");
		Представитель.Пред.Сбросить("СведФилиал");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СобратьОбъект()
	ПространствоИмен = "urn://x-artefacts/EMCHD_1";
	Тип = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(0).Тип;
	Объект = ФабрикаXDTO.Создать(Тип); // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
	
	ПоляСОшибкамиЗначенияРеквизита = Новый Соответствие();
	
	ЗаполнитьРекурсивно(Объект, Доверенность[0], "Доверенность", ПоляСОшибкамиЗначенияРеквизита);
	СброситьНеподдерживаемыеИАльтернативныеСвойства(Объект);
	
	КомпозитныйОбъект = Новый Структура;
	КомпозитныйОбъект.Вставить("Объект", Объект);
	КомпозитныйОбъект.Вставить("ПоляСОшибкамиЗначенияРеквизита", ПоляСОшибкамиЗначенияРеквизита);
	
	Возврат КомпозитныйОбъект;
КонецФункции

&НаСервере
Процедура ПроверитьОбъектПоСхеме(Объект, ТекущийПуть)
	ТекстОшибки = НСтр("ru='обязательное поле';");
	Для Каждого Свойство Из Объект.Свойства() Цикл
		ТребуетЗаполнения = СвойствоXDTOОбязательноКЗаполнению(Свойство);
		ЭтоСписок = Свойство.ВерхняяГраница <> 1;
		ЭтоОбъект = ТипЗнч(Свойство.Тип) = Тип("ТипОбъектаXDTO");
		Индекс = 0;
		Если ЭтоСписок Тогда
			Для Каждого ЭлементСписка Из Объект.ПолучитьСписок(Свойство) Цикл
				НовыйПуть = СтрШаблон("%1.%2[%3]", ТекущийПуть, Свойство.Имя, Индекс);
				Если ЭтоОбъект Тогда
					ПроверитьОбъектПоСхеме(ЭлементСписка, НовыйПуть);
				ИначеЕсли ТребуетЗаполнения И Не ЗначениеЗаполнено(ЭлементСписка) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , НовыйПуть);
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		ИначеЕсли ТребуетЗаполнения И Не Объект.Установлено(Свойство) Тогда
			НовыйПуть = СтрШаблон("%1.%2", ТекущийПуть, Свойство.Имя);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , НовыйПуть);
		ИначеЕсли ЭтоОбъект Тогда
			ВложенныйОбъект = Объект.Получить(Свойство);
			Если ТипЗнч(ВложенныйОбъект) = Тип("ОбъектXDTO") Тогда
				НовыйПуть = СтрШаблон("%1.%2[%3]", ТекущийПуть, Свойство.Имя, Индекс);
				ПроверитьОбъектПоСхеме(ВложенныйОбъект, НовыйПуть);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьУсловныеПоля(Объект, ПоляСОшибкамиЗначенияРеквизита)
	СписокДоверителей = Объект.Документ.Довер.СвДоверит; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
	ТипыДоверителей = ТипыДоверителей();
	ДаНет = КлассификаторДаНет();
	ТекстОшибки = НСтр("ru='обязательное поле';");
	Для Каждого ЭлементДоверитель Из СписокДоверителей Цикл
		Если ЭлементДоверитель.ТипДоверит = ТипыДоверителей.ЮридическоеЛицо Тогда
			Если ЭлементДоверитель.Доверит.РосОргДовер = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
					Элементы.ДоверенностьДокументДоверСвДоверит_Доверитель.ПутьКДанным);
			Иначе
				СведенияОбОрганизации = ЭлементДоверитель.Доверит.РосОргДовер.СвРосОрг; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвОргТип
				Если Не ЗначениеЗаполнено(СведенияОбОрганизации.ИННЮЛ) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргИННЮЛ.ПутьКДанным);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргОГРН.ПутьКДанным);
				КонецЕсли;
				Если СведенияОбОрганизации.АдрРег <> Неопределено И Не ЗначениеЗаполнено(
						СведенияОбОрганизации.АдрРег.АдрРФ) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргАдрРегАдрРФ.ПутьКДанным);
				КонецЕсли;
				ЕстьУК = ЭлементДоверитель.Доверит.РосОргДовер.ЕИОУК = ДаНет.Да;
				ЕстьИП = ЭлементДоверитель.Доверит.РосОргДовер.ЕИОИП = ДаНет.Да;
				ЕстьФЛ = ЭлементДоверитель.Доверит.РосОргДовер.ЕИОФЛ = ДаНет.Да;
				СписокЛиц = ЭлементДоверитель.Доверит.РосОргДовер.ЛицоБезДов; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
				Для Каждого ЭлементЛицо Из СписокЛиц Цикл
					Если ЕстьИП И ЭлементЛицо.СвИП = Неопределено Тогда
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
							Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенности.ПутьКДанным);
					КонецЕсли;
					Если ЕстьУК И ЭлементЛицо.СВЮЛ = Неопределено Тогда
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
							Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенности.ПутьКДанным);
					ИначеЕсли ЭлементЛицо.СВЮЛ <> Неопределено Тогда
						СведенияОбУК = ЭлементЛицо.СВЮЛ.СвЮЛЕИО; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвОргТип
						Если Не ЗначениеЗаполнено(СведенияОбУК.ИННЮЛ) Тогда
							ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
								Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИОИННЮЛ.ПутьКДанным);
						КонецЕсли;
						Если Не ЗначениеЗаполнено(СведенияОбУК.ОГРН) Тогда
							ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
								Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИООГРН.ПутьКДанным);
						КонецЕсли;
						Если СведенияОбУК.АдрРег <> Неопределено И Не ЗначениеЗаполнено(СведенияОбУК.АдрРег.АдрРФ) Тогда
							ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
								Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИОАдрРегАдрРФ.ПутьКДанным);
						КонецЕсли;
						СписокФЛ = ЭлементЛицо.СВЮЛ.СвФЛ; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвФЛТип
						Для Каждого ЭлементФЛ Из СписокФЛ Цикл
							Если Не ЗначениеЗаполнено(ЭлементФЛ.СНИЛС) Тогда
								ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
									Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвФЛСНИЛС.ПутьКДанным);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ЕстьФЛ И ЭлементЛицо.СвФЛ = Неопределено Тогда
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
							Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенности.ПутьКДанным);
					ИначеЕсли ЭлементЛицо.СвФЛ <> Неопределено Тогда
						Если Не ЗначениеЗаполнено(ЭлементЛицо.СвФЛ.СНИЛС) Тогда
							ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
								Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСвФЛСНИЛС.ПутьКДанным);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЭлементДоверитель.ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
			Если ЭлементДоверитель.Доверит.ИПДовер = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
					Элементы.ДоверенностьДокументДоверСвДоверит_Доверитель.ПутьКДанным);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТипыПредставителей = ТипыПредставителей();
	СписокПредставителей = Объект.Документ.Довер.СвУпПред; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвУпПредТип
	Для Каждого ЭлементПредставитель Из СписокПредставителей Цикл
		Если ЭлементПредставитель.ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда
			Если ЭлементПредставитель.Пред.СведОрг = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
					Элементы.ДоверенностьДокументДоверСвУпПред_Представитель.ПутьКДанным);
			Иначе
				Если Не ЗначениеЗаполнено(ЭлементПредставитель.Пред.СведОрг.ИННЮЛ) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвУпПредПредСведОргИННЮЛ.ПутьКДанным);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЭлементПредставитель.Пред.СведОрг.ОГРН) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвУпПредПредСведОргОГРН.ПутьКДанным);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементПредставитель.ТипПред = ТипыПредставителей.ФизическоеЛицо Тогда
			Если ЭлементПредставитель.Пред.СведФизЛ = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
					Элементы.ДоверенностьДокументДоверСвУпПред_Представитель.ПутьКДанным);
			Иначе
				Если Не ЗначениеЗаполнено(ЭлементПредставитель.Пред.СведФизЛ.ИННФЛ) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛИННФЛ.ПутьКДанным);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЭлементПредставитель.Пред.СведФизЛ.СНИЛС) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛСНИЛС.ПутьКДанным);
				КонецЕсли;
				СведенияОФизЛице = ЭлементПредставитель.Пред.СведФизЛ.СведФЛ; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СведФЛТип
				Если Не ЗначениеЗаполнено(СведенияОФизЛице.ДатаРожд) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛСведФЛДатаРожд.ПутьКДанным);
				КонецЕсли;
				Если СведенияОФизЛице.УдЛичнФЛ = Неопределено Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛСведФЛУдЛичнФЛКодВидДок.ПутьКДанным);
				Иначе
					Если СведенияОФизЛице.УдЛичнФЛ.КодВидДок = "21" Тогда // Паспорт гражданина Российской Федерации
						Если СведенияОФизЛице.УдЛичнФЛ.ВыдДок = Неопределено Тогда
							ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
								Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛСведФЛУдЛичнФЛВыдДок.ПутьКДанным);
						КонецЕсли;
						Если СведенияОФизЛице.УдЛичнФЛ.КодВыдДок = Неопределено Тогда
							ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
								Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛСведФЛУдЛичнФЛКодВыдДок.ПутьКДанным);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементПредставитель.ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			Если ЭлементПредставитель.Пред.СведИП = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
					Элементы.ДоверенностьДокументДоверСвУпПред_Представитель.ПутьКДанным);
			Иначе
				СведенияОФизЛице = ЭлементПредставитель.Пред.СведИП.СведФЛ; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СведФЛТип
				Если Не ЗначениеЗаполнено(СведенияОФизЛице.ДатаРожд) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвУпПредПредСведИПСведФЛДатаРожд.ПутьКДанным);
				КонецЕсли;
				Если СведенияОФизЛице.УдЛичнФЛ = Неопределено Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
						Элементы.ДоверенностьДокументДоверСвУпПредПредСведИПСведФЛУдЛичнФЛКодВидДок.ПутьКДанным);
				Иначе
					Если СведенияОФизЛице.УдЛичнФЛ.КодВидДок = "21" Тогда // Паспорт гражданина Российской Федерации 
						Если СведенияОФизЛице.УдЛичнФЛ.ВыдДок = Неопределено Тогда
							ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
								Элементы.ДоверенностьДокументДоверСвУпПредПредСведИПСведФЛУдЛичнФЛВыдДок.ПутьКДанным);
						КонецЕсли;
						Если СведенияОФизЛице.УдЛичнФЛ.КодВыдДок = Неопределено Тогда
							ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
								Элементы.ДоверенностьДокументДоверСвУпПредПредСведИПСведФЛУдЛичнФЛКодВыдДок.ПутьКДанным);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Полномочия = Объект.Документ.Довер.СвПолн; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвПолнТип
	Если Полномочия.ТипПолн = ТипыПолномочий().Текстовые Тогда
		ПутьКДанным = Элементы.ДоверенностьДокументДоверСвПолнТекстПолн.ПутьКДанным;
		
		Если Не ЗначениеЗаполнено(Полномочия.ТекстПолн)
			И ПоляСОшибкамиЗначенияРеквизита.Получить(ПутьКДанным) = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПутьКДанным);
		КонецЕсли;
		
	Иначе
		Если Полномочия.МашПолн.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ,
				Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ПутьКДанным);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаписатьДоверенность()
	ПолучитьСообщенияПользователю(Истина);
	ПроверитьЗаполнение(); // проверка элементов "расширяющих" схему формата, например ссылочное поле Доверитель
	
	КомпозитныйОбъект = СобратьОбъект();
	Объект = КомпозитныйОбъект.Объект;
	ПоляСОшибкамиЗначенияРеквизита = КомпозитныйОбъект.ПоляСОшибкамиЗначенияРеквизита;
	
	ПроверитьОбъектПоСхеме(Объект, "Доверенность[0]");
	
	ПроверитьУсловныеПоля(Объект, ПоляСОшибкамиЗначенияРеквизита);
	
	Ошибки = ПолучитьСообщенияПользователю(Истина);
	ЕстьОшибки = ЗначениеЗаполнено(Ошибки);
	Если ЕстьОшибки Тогда
		ОбработатьОшибки(Ошибки);
		Возврат Ложь;
	Иначе
		ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
		ДанныеДляЗагрузки.ДанныеДоверенности = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Объект, Ложь, КодировкаТекста.UTF8);
		ДополнительныеСведения = Новый Структура("Комментарий", Комментарий);
		Результат = Справочники.МЧД003.ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки, Ложь, Истина,
			ДополнительныеСведения, СсылкаНаДоверенность, Истина);
		Если Результат.Выполнено Тогда
			СсылкаНаДоверенность = Результат.Ссылка;
			Возврат Истина;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(Результат.Ошибка);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПроверитьЗначениеРеквизита(Реквизит, Значение)
	Если Реквизит = Неопределено ИЛИ ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеБезМаски = СокрЛП(Значение); // Убираем пробелы, которые могли добавиться маской ввода
	
	Фасет = Реквизит.Тип.Фасеты.Получить(ВидФасетаXDTO.Длина);
	
	Если Фасет <> Неопределено Тогда
		ДопустимоеЗначениеРеквизита = Число(Фасет.Значение);
		
		Если СтрДлина(ЗначениеБезМаски) <> ДопустимоеЗначениеРеквизита Тогда
			СтрШаблон = НСтр("ru = 'Количество символов должно быть %1'");
			ТекстОшибки = СтрШаблон(СтрШаблон, ДопустимоеЗначениеРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Фасет = Реквизит.Тип.Фасеты.Получить(ВидФасетаXDTO.МаксДлина);
	
	Если Фасет <> Неопределено Тогда
		ДопустимоеЗначениеРеквизита = Число(Фасет.Значение);
		
		Если СтрДлина(ЗначениеБезМаски) > ДопустимоеЗначениеРеквизита Тогда
			СтрШаблон = НСтр("ru = 'Количество символов не должно быть более %1'");
			ТекстОшибки = СтрШаблон(СтрШаблон, ДопустимоеЗначениеРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Фасет = Реквизит.Тип.Фасеты.Получить(ВидФасетаXDTO.МинДлина);
	
	Если Фасет <> Неопределено Тогда
		ДопустимоеЗначениеРеквизита = Число(Фасет.Значение);
		
		Если ДопустимоеЗначениеРеквизита > 1 И СтрДлина(ЗначениеБезМаски) < ДопустимоеЗначениеРеквизита Тогда
			СтрШаблон = НСтр("ru = 'Количество символов не должно быть менее %1'");
			ТекстОшибки = СтрШаблон(СтрШаблон, ДопустимоеЗначениеРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибок

&НаСервере
Функция НайтиРеквизитПоПолюОшибки(Ошибка)
	ЧастиПути = СтрРазделить(Ошибка.Поле, ".", Ложь);
	Граница = ЧастиПути.ВГраница();
	Если Граница > 1 Тогда
		ИмяПоля = ЧастиПути[Граница];
		ЧастиПути.Удалить(Граница);
		ПутьКТаблице = СтрСоединить(ЧастиПути, ".");
		Попытка
			РеквизитыТаблицы = ПолучитьРеквизиты(ПутьКТаблице);
		Исключение
			РеквизитыТаблицы = Новый Массив;
		КонецПопытки;
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			Если Реквизит.Имя = ИмяПоля Тогда
				Возврат Реквизит;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПодобратьЭлементФормыПоРеквизиту(Реквизит)
	ПолныйПуть = СтрШаблон("%1.%2", Реквизит.Путь, Реквизит.Имя);
	ПредполагаемоеИмя = СтрСоединить(СтрРазделить(ПолныйПуть, "[0].", Ложь), "");
	Возврат Элементы.Найти(ПредполагаемоеИмя);
КонецФункции

&НаСервере
Функция РазобратьОшибкиПоГруппам(Ошибки)
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("ОбщийРаздел", Новый Массив);
	СтруктураОшибок.Вставить("РазделДоверителей", Новый Массив);
	СтруктураОшибок.Вставить("РазделПредставителей", Новый Массив);
	СтруктураОшибок.Вставить("РазделПолномочий", Новый Массив);
	СтруктураОшибок.Вставить("Прочее", Новый Массив);

	Для Каждого Ошибка Из Ошибки Цикл
		Реквизит = НайтиРеквизитПоПолюОшибки(Ошибка);
		Если Реквизит = Неопределено Тогда
			СтруктураОшибок.Прочее.Добавить(Ошибка);
		Иначе
			ТекстСообщения = СтрШаблон("	%1 - %2", Реквизит.Заголовок, Ошибка.Текст);
			Если СтрНачинаетсяС(Реквизит.Путь, "Доверенность[0].Документ[0].Довер[0].СвДоверит[0]") Тогда
				СтруктураОшибок.РазделДоверителей.Добавить(ТекстСообщения);
			ИначеЕсли СтрНачинаетсяС(Реквизит.Путь, "Доверенность[0].Документ[0].Довер[0].СвУпПред[0]") Тогда
				СтруктураОшибок.РазделПредставителей.Добавить(ТекстСообщения);
			ИначеЕсли СтрНачинаетсяС(Реквизит.Путь, "Доверенность[0].Документ[0].Довер[0].СвПолн[0]") Тогда
				СтруктураОшибок.РазделПолномочий.Добавить(ТекстСообщения);
			Иначе
				СтруктураОшибок.ОбщийРаздел.Добавить(ТекстСообщения);
			КонецЕсли;

			ЭлементФормы = ПодобратьЭлементФормыПоРеквизиту(Реквизит);
			Если ЭлементФормы <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				ЭлементФормы, "ЦветРамки") Тогда
				ЭлементФормы.ЦветРамки = ЦветаСтиля.ЦветОтрицательногоЧисла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураОшибок;
КонецФункции

// Подсвечивает незаполненные элементы.
// Временная замена платформенному механизму, до исправления ошибки.
// 
// Параметры:
//  Ошибки - ФиксированныйМассив Из СообщениеПользователю
&НаСервере
Процедура ОбработатьОшибки(Ошибки)
	СтруктураОшибок = РазобратьОшибкиПоГруппам(Ошибки);

	Если ЗначениеЗаполнено(СтруктураОшибок.ОбщийРаздел) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить общие сведения доверенности:
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(СтруктураОшибок.ОбщийРаздел,
			Символы.ПС)));
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураОшибок.РазделДоверителей) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить сведения о доверителе:
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(
			СтруктураОшибок.РазделДоверителей, Символы.ПС)));
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураОшибок.РазделПредставителей) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить сведения о представителе(ях):
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(
			СтруктураОшибок.РазделПредставителей, Символы.ПС)));
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураОшибок.РазделПолномочий) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить полномочия:
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(СтруктураОшибок.РазделПолномочий,
			Символы.ПС)));
	КонецЕсли;

	Для Каждого Ошибка Из СтруктураОшибок.Прочее Цикл
		Ошибка.Сообщить();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область МашинныеПолномочия

&НаКлиенте
Процедура ДобавитьНовоеМашинноеПолномочие()
	ОбработкаВыбора = Новый ОписаниеОповещения("Подключаемый_ВыборМашинногоПолномочияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.КлассификаторПолномочийФНСМЧД003.Форма.ФормаВыбора", ,
		Элементы.ДоверенностьДокументДоверСвПолнМашПолн_Полномочие, УникальныйИдентификатор, , , ОбработкаВыбора,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущееМашинноеПолномочие()
	ТекущиеДанные = Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("КодКлассификатора", ТекущиеДанные.КодПолн);
		ОбработкаВыбора = Новый ОписаниеОповещения("Подключаемый_ВыборМашинногоПолномочияЗавершение", ЭтотОбъект,
			Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("Справочник.КлассификаторПолномочийФНСМЧД003.Форма.ФормаВыбора", ПараметрыФормы,
			Элементы.ДоверенностьДокументДоверСвПолнМашПолн_Полномочие, УникальныйИдентификатор, , , ОбработкаВыбора,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущееМашинноеПолномочие()
	ТекущиеДанные = Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн.Удалить(
			Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущиеДанные);
	КонецЕсли;
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаМашиночитаемыеПолномочия, Истина);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн);
КонецПроцедуры

#КонецОбласти

#Область Представители

&НаКлиенте
Процедура ДобавитьНовогоПредставителя()
	ОбработчикВводаДоверителя = Новый ОписаниеОповещения("Подключаемый_ВводПредставителяЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.МЧД003.Форма.ДобавлениеПредставителя", , ЭтотОбъект, , , , ОбработчикВводаДоверителя);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущегоПредставителя()
	ТекущиеДанные = Элементы.ДоверенностьДокументДоверСвУпПред.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		ОбработчикВводаДоверителя = Новый ОписаниеОповещения("Подключаемый_ВводПредставителяЗавершение", ЭтотОбъект,
			ИдентификаторСтроки);
		ПараметрыФормы = Новый Структура("ХранилищеДанных", ПоместитьДанныеПредставителяВХранилище(ИдентификаторСтроки));
		ОткрытьФорму("Справочник.МЧД003.Форма.ДобавлениеПредставителя", ПараметрыФормы, ЭтотОбъект, , , ,
			ОбработчикВводаДоверителя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущегоПредставителя()
	СведенияОПредставителях = Доверенность[0].Документ[0].Довер[0].СвУпПред;
	СведенияОПредставителях.Удалить(Элементы.ДоверенностьДокументДоверСвУпПред.ТекущиеДанные);
	КоличествоЗаписей = СведенияОПредставителях.Количество();
	Если КоличествоЗаписей = 0 Тогда
		СоздатьРекурсивно(СведенияОПредставителях.Добавить(), Доверенность.Документ.Довер.СвУпПред);
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителей, Элементы.ГруппаОдинПредставитель);
		ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_ФизическоеЛицо);
		Элементы.ДекорацияЗаголовокГруппыПредставителей.Заголовок = НСтр("ru='Сведения о представителе';");
	ИначеЕсли КоличествоЗаписей = 1 Тогда
		ТипыПредставителей = ТипыПредставителей();
		Если Доверенность[0].Документ[0].Довер[0].СвУпПред[0].ТипПред
			= ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			ОтображаемаяГруппа = Элементы.ГруппаПредставитель_ИндивидуальныйПредприниматель;
		ИначеЕсли Доверенность[0].Документ[0].Довер[0].СвУпПред[0].ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда
			ОтображаемаяГруппа = Элементы.ГруппаПредставитель_Организация;
		Иначе
			ОтображаемаяГруппа = Элементы.ГруппаПредставитель_ФизическоеЛицо;
		КонецЕсли;
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителей, Элементы.ГруппаОдинПредставитель);
		ПоказатьГруппу(Элементы.ГруппаПредставитель, ОтображаемаяГруппа);
		Элементы.ДекорацияЗаголовокГруппыПредставителей.Заголовок = НСтр("ru='Сведения о представителях';");
	КонецЕсли;
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвУпПред);
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПоместитьДанныеПредставителяВХранилище(Знач ИдентификаторСтроки)
	ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвУпПред.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекущиеДанные <> Неопределено Тогда
		РеквизитыТаблицы = ПолучитьРеквизиты("Доверенность.Документ.Довер.СвУпПред");
		ДанныеЗаполнения = Новый ТаблицаЗначений;
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			ДанныеЗаполнения.Колонки.Добавить(Реквизит.Имя, Реквизит.ТипЗначения, Реквизит.Заголовок);
		КонецЦикла;
		ТекущаяЗапись = ДанныеЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяЗапись, ТекущиеДанные);
		ТекущаяЗапись.Пред = ДанныеФормыВЗначение(ТекущиеДанные.Пред, Тип("ТаблицаЗначений"));
		Возврат ПоместитьВоВременноеХранилище(ДанныеЗаполнения, УникальныйИдентификатор);
	КонецЕсли;
	Возврат "";
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВопросОЗакрытииЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписатьИЗарегистрироватьЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") И ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ПолучитьСтатусВРеестреФНС();
	Иначе
		Элементы.ГруппаСозданиеДоверенности.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДаты(ИмяЭлемента)
	
	ПустаяДата = '00010101';
	СвДов = Доверенность[0].Документ[0].Довер[0].СвДов[0];
	
	Если ЗначениеЗаполнено(СвДов.СрокДейст)
		И СвДов.ДатаВыдДовер > КонецДня(СвДов.СрокДейст) Тогда
		СвДов.ДатаВыдДовер = ПустаяДата;
		ТекстСообщения = НСтр("ru = 'Дата выдачи доверенности больше даты окончания. Введите корректную дату'"); 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвДов.СрокДейст)
		И КонецДня(СвДов.СрокДейст) < ТекущаяДатаСеанса() Тогда
		СвДов.СрокДейст = ПустаяДата;
		ТекстСообщения = НСтр("ru = 'Дата окончания срока доверенности меньше текущей. Введите корректную дату'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	СрокДействияМенееДопустимого = ЗначениеЗаполнено(СвДов.ДатаВыдДовер)
		И ЗначениеЗаполнено(СвДов.СрокДейст)
		И КонецДня(СвДов.СрокДейст) > ТекущаяДатаСеанса()
		И НачалоДня(СвДов.СрокДейст) - ТекущаяДатаСеанса() < 24*60*60;

	Если СрокДействияМенееДопустимого Тогда
		СвДов.СрокДейст = ПустаяДата;
		ТекстСообщения = НСтр("ru = 'Срок действия доверенности должен быть не менее двух дней с момента регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Если ИмяЭлемента = Элементы.ДоверенностьДокументДоверСвДовДатаВыдДовер.Имя И ЗначениеЗаполнено(СвДов.ДатаВыдДовер) 
		Или ИмяЭлемента = Элементы.ДоверенностьДокументДоверСвДовСрокДейст.Имя И ЗначениеЗаполнено(СвДов.СрокДейст) Тогда
		
		СброситьОформлениеЭлементовФормы(ЭтаФорма, Элементы[ИмяЭлемента]);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусВРеестреФНС()
	
	ПараметрыФормы = Новый Структура("Ключ", СсылкаНаДоверенность);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьСтатусВРеестреФНСЗавершение", ЭтотОбъект);

	ОткрытьФорму("Справочник.МЧД003.Форма.РегистрацияВРеестреФНС", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусВРеестреФНСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Ложь;
	Закрыть(СсылкаНаДоверенность);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти