#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)
	|	И ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПользователяКассираДляПечатиЧека(пДокумент, пИсточникФИО) Экспорт
	
	ПользовательКассирДляПечати = Неопределено;
	ТекущийИсточникФИО = Неопределено;
	
	Если пИсточникФИО = Неопределено Тогда
		// Если в документе не были получены данные кассы ККМ, то получим нужный реквизит здесь.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КассыККМ.ИсточникФИОКассираВЧеке КАК ИсточникФИОКассираВЧеке
			|ИЗ
			|	Справочник.КассыККМ КАК КассыККМ
			|ГДЕ
			|	КассыККМ.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", пДокумент.КассаККМ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ТекущийИсточникФИО = ВыборкаДетальныеЗаписи.ИсточникФИОКассираВЧеке;
		КонецЕсли;
	Иначе
		ТекущийИсточникФИО = пИсточникФИО;
	КонецЕсли;
	
	Если ТекущийИсточникФИО = ПредопределенноеЗначение("Перечисление.ИсточникиФИОКассираВЧекеККМ.Ответственный") Тогда
		// Для документов, в которых нет ответственного, возвращаем автора.
		Если пДокумент.Ссылка.Метаданные().Реквизиты.Найти("Ответственный") = Неопределено Тогда 
			ПользовательКассирДляПечати = пДокумент.Автор;
		Иначе
			ПользовательКассирДляПечати = пДокумент.Ответственный;
			Если ЗаполнениеОбъектовУНФ.ЭтоДокументОтгрузкиСПоложениемОтветственного(пДокумент.Ссылка)
				И пДокумент.ПоложениеОтветственный = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				ПользовательИзТЧ = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(пДокумент["Запасы"], "Ответственный");
				Если ЗначениеЗаполнено(ПользовательИзТЧ) Тогда
					ПользовательКассирДляПечати = ПользовательИзТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекущийИсточникФИО = ПредопределенноеЗначение("Перечисление.ИсточникиФИОКассираВЧекеККМ.Автор")
		Или Не ЗначениеЗаполнено(ТекущийИсточникФИО) Тогда
		ПользовательКассирДляПечати = пДокумент.Автор;
	КонецЕсли;
	
	Возврат ПользовательКассирДляПечати;
	
КонецФункции

#КонецОбласти

// Функция получает блокируемые реквизиты объекта.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ВалютаДенежныхСредств");
	Результат.Добавить("Владелец");
	Результат.Добавить("СтруктурнаяЕдиница");
	Результат.Добавить("Подразделение");
	Результат.Добавить("ТипКассы");
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Функция определяет кассу кассу по умолчанию.
//
// Возвращает кассу ККМ, если найдена одна касса.
// Возвращает Неопределено, если касса не найдена или касс больше одной.
//
// Возвращаемое значение:
//	СправочникСсылка.КассыККМ - Найденная касса ККМ
//
Функция ПолучитьКассуККМПоУмолчанию(ТипКассыККМ = Неопределено) Экспорт
	
	Если ТипКассыККМ = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	КассыККМ.Ссылка КАК КассаККМ
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	НЕ КассыККМ.ПометкаУдаления");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	КассыККМ.Ссылка КАК КассаККМ
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	НЕ КассыККМ.ПометкаУдаления
		|	И КассыККМ.ТипКассы = &ТипКассы");
		
		Запрос.УстановитьПараметр("ТипКассы", ТипКассыККМ);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий()
	Тогда
		КассаККМ = Выборка.КассаККМ;
	Иначе
		КассаККМ = Неопределено;
	КонецЕсли;
	
	Возврат КассаККМ;

КонецФункции // ПолучитьКассуПоУмолчанию()

// Функция определяет кассу кассу по умолчанию.
//
// Возвращает кассу ККМ, если найдена одна касса.
// Возвращает Неопределено, если касса не найдена или касс больше одной.
//
// Возвращаемое значение:
//	СправочникСсылка.КассыККМ - Найденная касса ККМ
//
Функция ПолучитьКассуККМПоЭкземпляруОборудования(Оборудование) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ПодключаемоеОборудование = &Оборудование
	|	И НЕ КассыККМ.ПометкаУдаления");
	Запрос.УстановитьПараметр("Оборудование", Оборудование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КассаККМ = Выборка.КассаККМ;
	Иначе
		КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	КонецЕсли;
	
	Возврат КассаККМ;

КонецФункции // ПолучитьКассуККМПоЭкземпляруОборудования() 

// Функция определяет кассу кассу по умолчанию.
//
// Возвращает кассу ККМ, если найдена одна касса.
// Возвращает Неопределено, если касса не найдена или касс больше одной.
//
// Возвращаемое значение:
//	СправочникСсылка.КассыККМ - Найденная касса ККМ
//
Функция ПолучитьКассуККМПоЭкземпляруОфлайнОборудования(Оборудование) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ОфлайнОборудование = &Оборудование
	|	И НЕ КассыККМ.ПометкаУдаления");
	Запрос.УстановитьПараметр("Оборудование", Оборудование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КассаККМ = Выборка.КассаККМ;
	Иначе
		КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	КонецЕсли;
	
	Возврат КассаККМ;

КонецФункции // ПолучитьКассуККМПоЭкземпляруОфлайнОборудования()


Функция ПолучитьРеквизитыКассыККМ(Знач КассаККМ) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("ПодписьКассира");
	СтруктураРеквизитов.Вставить("Подразделение");
	СтруктураРеквизитов.Вставить("ПодписьЗаведующегоОтделом");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("ПодписьРуководителя");
	СтруктураРеквизитов.Вставить("ВидЦен");
	СтруктураРеквизитов.Вставить("СуммаВключаетНДС");
	СтруктураРеквизитов.Вставить("ВалютаДокумента");
	СтруктураРеквизитов.Вставить("ТипКассы");
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("ФискальноеУстройство");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	КассыККМ.СтруктурнаяЕдиница.ПодписьМОЛ КАК ПодписьКассира,
	|	КассыККМ.Подразделение КАК Подразделение,
	|	КассыККМ.Подразделение.ПодписьМОЛ КАК ПодписьЗаведующегоОтделом,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.Владелец.ПодписьРуководителя КАК ПодписьРуководителя,
	|	КассыККМ.СтруктурнаяЕдиница.РозничныйВидЦен КАК ВидЦен,
	|	КассыККМ.СтруктурнаяЕдиница.РозничныйВидЦен.ЦенаВключаетНДС КАК СуммаВключаетНДС,
	|	КассыККМ.ВалютаДенежныхСредств КАК ВалютаДокумента,
	|	КассыККМ.ТипКассы КАК ТипКассы,
	|	КассыККМ.ПодключаемоеОборудование КАК ФискальноеУстройство
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Ссылка = &КассаККМ");
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		
		Если НЕ ЗначениеЗаполнено(Выборка.ВидЦен) Тогда
			
			СтруктураРеквизитов.ВидЦен = Справочники.ВидыЦен.Оптовая;
			СтруктураРеквизитов.СуммаВключаетНДС = Справочники.ВидыЦен.Оптовая.ЦенаВключаетНДС;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ИнтеграцияСПлатежнымиСистемамиУНФПовтИсп.ИнтеграцияДоступна() Тогда	
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Справочник.КассыККМ";
		КомандаПечати.Идентификатор = "КассоваяСсылкаА5Широкий";
		КомандаПечати.Представление = НСтр("ru = 'Кассовый QR-код (А5 широкий)'");
	
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Справочник.КассыККМ";
		КомандаПечати.Идентификатор = "КассоваяСсылкаА5ТолькоЛого";
		КомандаПечати.Представление = НСтр("ru = 'Кассовый QR-код (А5 только логотипы)'");
	
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Справочник.КассыККМ";
		КомандаПечати.Идентификатор = "КассоваяСсылкаА5Узкий";
		КомандаПечати.Представление = НСтр("ru = 'Кассовый QR-код (А5 узкий)'");
	
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Справочник.КассыККМ";
		КомандаПечати.Идентификатор = "КассоваяСсылкаА5УзкийГоризонтальный";
		КомандаПечати.Представление = НСтр("ru = 'Кассовый QR-код (А5 узкий горизонтальный)'");
	
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Справочник.КассыККМ";
		КомандаПечати.Идентификатор = "КассоваяСсылкаА6Квадратный";
		КомандаПечати.Представление = НСтр("ru = 'Кассовый QR-код (А6 квадратный)'");
	
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Справочник.КассыККМ";
		КомандаПечати.Идентификатор = "КассоваяСсылкаА6Круглый";
		КомандаПечати.Представление = НСтр("ru = 'Кассовый QR-код (А6 круглый)'");

	КонецЕсли;
	
КонецПроцедуры

// Формирует печатные формы объекта.
//
// Параметры:
//  МассивОбъектов - Массив из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - ссылки
//                   на объекты которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные параметры печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами печатных областей, куда распечатан объект;
//  ПараметрыВывода - Структура - параметры сформированных табличных документов.
//
Процедура Печать(
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода) Экспорт
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КассоваяСсылкаА5Широкий") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ТипПечати", 1);
		СинонимМакета = НСтр("ru = 'Кассовый QR-код (А5 широкий)'");
		ИдентификаторМакета = "КассоваяСсылкаА5Широкий";
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КассоваяСсылкаА5ТолькоЛого") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ТипПечати", 2);
		СинонимМакета = НСтр("ru = 'Кассовый QR-код (А5 только логотипы)'");
		ИдентификаторМакета = "КассоваяСсылкаА5ТолькоЛого";
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КассоваяСсылкаА5Узкий") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ТипПечати", 3);
		СинонимМакета = НСтр("ru = 'Кассовый QR-код (А5 узкий)'");
		ИдентификаторМакета = "КассоваяСсылкаА5Узкий";
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КассоваяСсылкаА5УзкийГоризонтальный") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ТипПечати", 4);
		СинонимМакета = НСтр("ru = 'Кассовый QR-код (А5 узкий горизонтальный)'");
		ИдентификаторМакета = "КассоваяСсылкаА5УзкийГоризонтальный";
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КассоваяСсылкаА6Квадратный") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ТипПечати", 5);
		СинонимМакета = НСтр("ru = 'Кассовый QR-код (А6 квадратный)'");
		ИдентификаторМакета = "КассоваяСсылкаА6Квадратный";
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КассоваяСсылкаА6Круглый") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ТипПечати", 6);
		СинонимМакета = НСтр("ru = 'Кассовый QR-код (А6 круглый)'");
		ИдентификаторМакета = "КассоваяСсылкаА6Круглый";
		
	КонецЕсли;
	
	Для Каждого КассаСсылка Из МассивОбъектов Цикл

		НастройкаКассыККМ = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(КассаСсылка, "КассовыеСсылкиСБП");

		Если НастройкаКассыККМ = Неопределено
			ИЛИ Не НастройкаКассыККМ.ИспользоватьКассовыйQRКодСБП Тогда

			ВызватьИсключение НСтр("ru = 'Не установлен признак использования кассовых QR-кодов.'");
			
		Иначе
			
			ДанныеКассы	= НастройкаКассыККМ.СпособыОплаты.Получить(НастройкаКассыККМ.СпособОплатыДляПечати);
			
			Если ДанныеКассы = Неопределено Тогда			
				ВызватьИсключение НСтр("ru = 'Не сформирован кассовый QR-код.'");
			КонецЕсли;
			
		КонецЕсли;

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИдентификаторМакета,
			СинонимМакета,
			ПереводыСБПc2b.КарточкаКассовойСсылки(ДанныеКассы, ПараметрыПечати));
				
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли