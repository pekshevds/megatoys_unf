#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	УстановитьДоступностьИТекстПодсказкиАвтоматическогоРасчета();
	УстановитьТекстДекорацииПредупреждения();

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	НастроитьТаблицуПравилОкругленияСервер(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.РегистрыСведений.ЦеныНоменклатуры,
		НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	НастроитьВидимостьРеквизитовВалюты();
	
	УстановитьТекстДекорацииПредупреждения();

	УстановитьКэшЗначений();

	Если Параметры.Свойство("ТекущийЭлемент") Тогда

		ТекущийЭлемент = Элементы[Параметры.ТекущийЭлемент];
		Если Параметры.ТекущийЭлемент = "ЗаполнятьИзОснования" Тогда

			Элементы.ГруппаЗаполнятьИзОснования.ЦветФона = WindowsЦвета.Подсказка;
			КэшЗначений.ПоказатьИнформационноеПолеРасширения = Ложь;

		КонецЕсли;

	КонецЕсли;

	ЗаполнитьСписокВыбораСхемКомпоновки();

	УстановитьПараметрыВыбораБазовогоВидаЦены();

	ИспользоватьРасширеннуюНастройкуОкругления = ИспользуютсяРасширенныеНастройкиОкругления(ЭтотОбъект);

	ОбновитьПредставлениеУточнениеНастроекОкругления();
	ОбновитьПредставлениеУточнениеНастроекРасчета();

	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Параметры.Свойство("РассчитыватьАвтоматически")
		И Не Параметры.РассчитыватьАвтоматически Тогда

		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитыватьАвтоматически",
			"Доступность", Ложь);
		Элементы.РассчитыватьАвтоматически.РасширеннаяПодсказка.Заголовок = НСтр(
			"ru = 'Не может использоваться в розничных складах и продажах.'");
		КэшЗначений.Вставить("РассчитыватьАвтоматически", Ложь);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда

		Объект.ВалютаЦены = КэшЗначений.НациональнаяВалюта;

	КонецЕсли;

	ДанныеОчередиЦен = ОбновитьДанныеОчередиРасчетаЦенНаСервере(Объект.Ссылка);
	КоличествоЗаписейВОчередиЦен = ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен;
	ВакантныйНомерОчередиРасчетаЦен = ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен;

	Пример = 987654.321;
	Если ПустаяСтрока(Объект.ФорматЦены) Тогда

		Объект.ФорматЦены = "ЧЦ='15'; ЧДЦ='2'";

	КонецЕсли;

	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПсихологическоеОкругление, Объект.ПорядокОкругления,
		Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаВидимостьИдентификатора",
		"Пометка", Объект.КоличествоПопытокСлужебный > 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлужебныеРеквизиты", "Видимость",
		Объект.КоличествоПопытокСлужебный > 1);

	ВидимостьКнопкиРасчетаЦен = Не Объект.РассчитыватьАвтоматически И (Объект.ТипВидаЦен = КэшЗначений.ДинамическийПроцент
		Или Объект.ТипВидаЦен = КэшЗначений.ДинамическийФормула);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРассчитатьЦены", "Видимость",
		ВидимостьКнопкиРасчетаЦен);
	ОтсутствуютЗаписиЦен = ОтсутствуютЗаписиЦен(Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТипВидаЦен", "Доступность",
		ОтсутствуютЗаписиЦен);
		
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();

	ТолькоПросмотр = ТолькоПросмотр Или Не РазрешеноРедактированиеЦенДокументов;

	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);

	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда

		Элементы.ЦенаВключаетНДС.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.ЦенаВключаетНДС.Заголовок = ?(Объект.ЦенаВключаетНДС, НСтр("ru ='Цена включает НДС'"), НСтр(
			"ru ='НДС сверху'"));
		Элементы.ФорматЦены.Доступность = Ложь;

	Иначе

		Элементы.ФорматЦены.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.ВидыЦен);

	КонецЕсли;

	УстановитьУсловноеОформление();
	
	РаботаСФормойДокумента.НастроитьВидимостьГруппыИнформации(ЭтотОбъект, "ГруппаПодсказкаСкидки",
		"ПоказыватьПодсказкуСкидки");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УстановитьВидимостьЭлементов();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();
	ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания();
	УстановитьЗаголовкиСлужебныхКоманд();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если Параметры.Свойство("ТекущийЭлемент") И Параметры.ТекущийЭлемент = "ЗаполнятьИзОснования" Тогда

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасширение", "Видимость", Ложь);

	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	ПараметрыОповещения = Новый Структура("РассчитыватьАвтоматически", Объект.РассчитыватьАвтоматически);
	Оповестить("ИзменилсяРозничныйВидЦены", ПараметрыОповещения, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Перем Ошибки;

	Если Объект.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда

		ЦенообразованиеФормулыСервер.ПроверитьФормулу(Ошибки, Объект.Формула);
		Для Каждого СтрокаЦеновойГруппы Из Объект.ЦеновыеГруппы Цикл

			ЦенообразованиеФормулыСервер.ПроверитьФормулу(Ошибки, СтрокаЦеновойГруппы.Формула);

		КонецЦикла;

	КонецЕсли;

	Если Объект.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический Тогда

		ПроверитьЗначениеВалюты(Ошибки);

	Иначе

		Справочники.ВидыЦен.ПроверитьДублированиеЦеновыхГрупп(Ошибки, Объект.ЦеновыеГруппы.Выгрузить());

	КонецЕсли;

	Если Ошибки <> Неопределено Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("СправочникВидЦенЗапись");
	// СтандартныеПодсистемы.ОценкаПроизводительности

	Объект.ЦеныАктуальны = (Объект.ТипВидаЦен = КэшЗначений.Статический) Или (Объект.ТипВидаЦен
		= КэшЗначений.ПроизвольныйЗапрос) Или (Объект.ТипВидаЦен = КэшЗначений.Расширение);

КонецПроцедуры //ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьВсеТекущиеЦены", КэшЗначений.ИзмененаВалюта);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПропуститьРегистрациюОчередиЦен", ПропуститьРегистрациюОчередиЦен);

	Если ТекущийОбъект.ТипВидаЦен = Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос Тогда

		Если Не ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
			Если КэшЗначений.ХранилищеСхемыКомпоновкиДанных <> Неопределено Тогда
				ДанныеХранилищаСхемыКомпоновкиДанных = КэшЗначений.ХранилищеСхемыКомпоновкиДанных.Получить();
				Если Не ЦенообразованиеСервер.ПроверитьСхемуКомпоновкиДанных(
					ДанныеХранилищаСхемыКомпоновкиДанных) Тогда
					Отказ = Истина;
				КонецЕсли;
			Иначе
				СтрокаОшибки = НСтр("ru = 'Необходимо настроить схему компоновки данных для заполнения цен.'");
				ОбщегоНазначения.СообщитьПользователю(
					СтрокаОшибки, Объект.Ссылка, , , Отказ);
			КонецЕсли;
		КонецЕсли;

		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = КэшЗначений.ХранилищеНастроекКомпоновкиДанных;
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных    = КэшЗначений.ХранилищеСхемыКомпоновкиДанных;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);

	Если Объект.ЗаполнятьИзОснования <> КэшЗначений.ЗаполнятьИзОснования Тогда

		ПараметрыИзменения = Новый Структура;
		ПараметрыИзменения.Вставить("ВидЦен", Объект.Ссылка);
		ПараметрыИзменения.Вставить("Значение", Объект.ЗаполнятьИзОснования);

		Оповестить("ИзменитьФлагЗаполнятьИзОснования", ПараметрыИзменения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиКСкидкам" Тогда
		СтандартнаяОбработка = Ложь;
		Если АвтоматическиеСкидкиВключены() Тогда
			ПараметрыФормыСкидок = Новый Структура("АвтоматическиеСкидки", Истина);
			ОткрытьФорму("Обработка.ВидыСкидокНаценокРучныеИАвтоматические.Форма.Форма", ПараметрыФормыСкидок);
		Иначе 
			РежимРаботы = Новый ФиксированнаяСтруктура(УправлениеНебольшойФирмойПовтИсп.РежимРаботыПрограммы());
			ЭтоПолноправныйПользователь = РежимРаботы.ЭтоАдминистраторПрограммы Или РежимРаботы.ЭтоАдминистраторСистемы;
			Если ЭтоПолноправныйПользователь Тогда
				ПараметрыЕБВ = Новый Структура("СтрокаПоиска", НСтр("ru = 'Процент'"));
				ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаПрограммы",ПараметрыЕБВ);
			Иначе
				ПоказатьПредупреждение(, НСтр("ru='В программе отключена возможность использования автоматических скидок. 
				|Обратитесь к администратору для ее включения.'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Инструкция" Тогда
		СтандартнаяОбработка = Ложь;
		Если Объект.Ссылка.Пустая() Тогда
			УстановитьИдентификаторДляРасчетаВРасширении();
		КонецЕсли;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИдентификаторВидаЦен", Объект.ИдентификаторДляРасчетаВРасширении);
		ОткрытьФорму("ОбщаяФорма.ПомощникПодключенияПроцедурыРасширения", ПараметрыОткрытия, , , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда // Не локализуется
		Если Источник = "ФункциональнаяУчетВалютныхОпераций" Тогда // Не локализуется
			НастроитьВидимостьРеквизитовВалюты();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РассчитыватьАвтоматическиРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	Отбор = Новый Структура("НавигационнаяСсылка", НавигационнаяСсылкаФорматированнойСтроки);
	СтрокиСкладов = СкладыДляПереходаПоСсылке.НайтиСтроки(Отбор)[0].Склад;
	ПараметрыОткрытия.Вставить("Ключ", СтрокиСкладов);
	ПараметрыОткрытия.Вставить("ТекущийЭлемент", "РозничныйВидЦен");
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)

#Если МобильныйКлиент Тогда

	Элементы.ЦенаВключаетНДС.Заголовок = ?(Объект.ЦенаВключаетНДС, НСтр("ru ='Цена включает НДС'"), НСтр(
		"ru ='НДС сверху'"));

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ТипВидаЦенПриИзменении(Элемент)

	Объект.РассчитыватьАвтоматически = (Объект.ТипВидаЦен <> КэшЗначений.Статический) И (Объект.ТипВидаЦен
		<> КэшЗначений.ПроизвольныйЗапрос) И (Объект.ТипВидаЦен <> КэшЗначений.Расширение)
		И КэшЗначений.РассчитыватьАвтоматически;

	Объект.ЗаполнятьИзОснования = Ложь;

	Объект.ЦеныАктуальны = (Объект.ТипВидаЦен = КэшЗначений.Статический) И (Объект.ТипВидаЦен
		= КэшЗначений.ПроизвольныйЗапрос) И (Объект.ТипВидаЦен = КэшЗначений.Расширение);

	Если Объект.ТипВидаЦен = КэшЗначений.Расширение Тогда
		УстановитьИдентификаторДляРасчетаВРасширении();
	КонецЕсли;

	Объект.БазовыйВидЦен = Неопределено;

	УстановитьВидимостьЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ПримерПриИзменении(Элемент)

	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПсихологическоеОкругление, Объект.ПорядокОкругления,
		Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);

КонецПроцедуры

&НаКлиенте
Процедура ПорядокОкругленияПриИзменении(Элемент)

	ПриИзмененииНастроекОкругленияФормы();
	НастроитьТаблицуПравилОкругленияСервер(ЭтотОбъект);
	УстановитьВидимостьПолейОкругления();
	ОбновитьПредставлениеУточнениеНастроекОкругления();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

	ПриИзмененииФорматаЦен();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

КонецПроцедуры

&НаКлиенте
Процедура ФорматЦеныНажатие(Элемент, СтандартнаяОбработка)

#Если Не МобильныйКлиент Тогда

	СтандартнаяОбработка = Ложь;

	Конструктор = Новый КонструкторФорматнойСтроки(Объект.ФорматЦены);
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Число");
	Конструктор.Показать(Новый ОписаниеОповещения("ФорматированиеЦеныЗавершение", ЭтотОбъект));

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьВБольшуюСторонуПриИзменении(Элемент)

	ПриИзмененииФорматаЦен();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРегламентныеИФоновыеЗаданияНажатие(Элемент)

	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентныеИФоновыеЗадания");

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязиВидовЦенНажатие(Элемент)

	ОткрытьФорму("РегистрСведений.СвязиВидовЦенСлужебный.ФормаСписка");

КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ПриИзменении элемента формы "БазовыйВидЦен"
//
// Имеет смысл только для динамических типов цен, т.к. из базовых берется валюта и 
// значение параметра ЦенаВключаетНДС
//
Процедура БазовыйВидЦенПриИзменении(Элемент)

	ДанныеБазовойЦены 		= ПолучитьДанныеБазовойЦены(Объект.БазовыйВидЦен);

	Объект.ВалютаЦены 		= ДанныеБазовойЦены.ВалютаЦены;
	Объект.ЦенаВключаетНДС 	= ДанныеБазовойЦены.ЦенаВключаетНДС;

КонецПроцедуры // БазовыйВидЦенПриИзменении()

&НаКлиенте
Процедура ФормулаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьКонструкторФормулы();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	СообщениеПользователю = "";
	СформироватьНовыйИдентификатор(СообщениеПользователю);

	Если Не ПустаяСтрока(СообщениеПользователю) Тогда

		ПоказатьПредупреждение( , СообщениеПользователю, , НСтр("ru ='Внимание!'"));

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьАвтоматическиПриИзменении(Элемент)

	ВидимостьКнопкиРасчетаЦен = Не Объект.РассчитыватьАвтоматически И (Объект.ТипВидаЦен <> КэшЗначений.Статический)
		И (Объект.ТипВидаЦен <> КэшЗначений.ПроизвольныйЗапрос);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРассчитатьЦены", "Видимость",
		ВидимостьКнопкиРасчетаЦен);
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьИТекстПодсказкиАвтоматическогоРасчета();
	УстановитьТекстДекорацииПредупреждения();

КонецПроцедуры

&НаКлиенте
Процедура ЦеныАктуальныПриИзменении(Элемент)

	КэшЗначений.РучнаяКорректировкаФлага = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРегистрациюПриЗаписиПриИзменении(Элемент)

	УстановитьЗаголовокКомандыЗаписатьИЗакрыть();

КонецПроцедуры

&НаКлиенте
Процедура ВалютаЦеныПриИзменении(Элемент)

	УстановитьЗаголовкиСлужебныхКоманд();
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ЕстьЗаписиВДругойВалюте(Объект.Ссылка) Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбИзмененииВалюты", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Удалить все цены по виду цены?'");	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);		
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРасширеннуюНастройкуОкругленияПриИзменении(Элемент)

	ПриИзмененииНастроекОкругленияФормы();
	НастроитьТаблицуПравилОкругленияСервер(ЭтотОбъект);

	УстановитьВидимостьПолейОкругления();
	ОбновитьПредставлениеУточнениеНастроекОкругления();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

КонецПроцедуры

&НаКлиенте
Процедура ПсихологическоеОкруглениеПриИзменении(Элемент)

	ПриИзмененииНастроекОкругленияФормы();
	НастроитьТаблицуПравилОкругленияСервер(ЭтотОбъект);
	УстановитьВидимостьПолейОкругления();
	ОбновитьПредставлениеУточнениеНастроекОкругления();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

	ПриИзмененииФорматаЦен();
	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

КонецПроцедуры

&НаКлиенте
Процедура УточнениеНастроекОкругленияПредставлениеОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастройкиУточнения("УточнениеНастроекОкругления");

КонецПроцедуры

&НаКлиенте
Процедура УточнениеНастроекРасчетаЗависимыхПредставлениеОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастройкиУточнения("УточнениеПороговСрабатывания");

КонецПроцедуры

&НаКлиенте
Процедура ПорогСрабатыванияПриУвеличенииПриИзменении(Элемент)

	ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания();

КонецПроцедуры

&НаКлиенте
Процедура ПорогСрабатыванияПриУменьшенииПриИзменении(Элемент)

	ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания();

КонецПроцедуры

&НаКлиенте
Процедура НесколькоВалютДляЦенПриИзменении(Элемент)
	
	ОбработатьИзменениеВалютныхНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьЦеныИзВнешнегоИсточника(Команда)

	Если Объект.ТипВидаЦен <> КэшЗначений.Статический И Объект.ТипВидаЦен <> КэшЗначений.ПроизвольныйЗапрос Тогда

		ТекстСообщения = НСтр("ru ='Загрузка предназначена только для статических видов цен.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения, 15, НСтр("ru ='Загрузить цены из внешнего источника'"));
		Возврат;

	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		НастройкиЗагрузкиДанных.Вставить("ОбщееЗначение", Объект.Ссылка);

	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект,
		НастройкиЗагрузкиДанных);

	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных,
		ОписаниеОповещения, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФормулу(Команда)

	ОткрытьКонструкторФормулы();

КонецПроцедуры

&НаКлиенте
Процедура УточнитьРасчетПоЦеновымГруппам(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипВидаЦен", Объект.ТипВидаЦен);
	ПараметрыОткрытия.Вставить("Формула", Объект.Формула);
	ПараметрыОткрытия.Вставить("БазовыйВидЦен", Объект.БазовыйВидЦен);
	ПараметрыОткрытия.Вставить("Процент", Объект.Процент);
	ПараметрыОткрытия.Вставить("ЦеновыеГруппы", Объект.ЦеновыеГруппы);
	ПараметрыОткрытия.Вставить("Наименование", Объект.Наименование);

	ОписаниеОповещения = Новый ОписаниеОповещения("УточнитьРасчетПоЦеновымГруппамЗавершение", ЭтотОбъект);

	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаЭлементаЦеновыеГруппы", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура СлужебныеРеквизиты(Команда)

	Элементы.ФормаВидимостьИдентификатора.Пометка = Не Элементы.ФормаВидимостьИдентификатора.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлужебныеРеквизиты", "Видимость",
		Элементы.ФормаВидимостьИдентификатора.Пометка);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВсеЦеныВВалютуВидаЦен(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ЕстьЗаписиВДругойВалюте(Объект.Ссылка) Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветПересчетаВалютныхЦен", ЭтотОбъект);
		ТекстВопроса = СтрШаблон(НСтр("ru='Пересчитать цены в %1 по курсу на дату цен?'"), Объект.ВалютаЦены);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЦены(Команда)

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ТекстВопроса = НСтр("ru ='Внимание!
							|Все цены по этой колонке прайс-листа будут удалены. 
							|Продолжить?'");

		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветВопросаПроУдалениеЦен", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	Иначе

		ТекстСообщения = НСтр("ru ='Операция имеет смыл только для записанных объектов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОчередьРасчетаЦен(Команда)

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ТекстВопроса = НСтр("ru ='Внимание!
							|Очередь расчета цен будет очищена.
							|Продолжить?'");

		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветВопросаОчисткиОчередиЦен", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	Иначе

		ТекстСообщения = НСтр("ru ='Операция имеет смыл только для записанных объектов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦены(Команда)

	Если Модифицированность = Истина Тогда

		ТекстВопроса = НСтр("ru ='Для расчета цен необходимо записать текущий объект.
							|Записать и продолжить?'");

		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаОЗаписиВидаЦен", ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	Иначе

		ВыполнитьРасчетЦенНаСервере();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезРегистрацииНовыхЦен(Команда)

	ПропуститьРегистрациюОчередиЦен = Истина;

	Записать();
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОчередиРасчетаЦен(Команда)

	ДанныеОчередиЦен = ОбновитьДанныеОчередиРасчетаЦенНаСервере(Объект.Ссылка);
	КоличествоЗаписейВОчередиЦен = ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен;
	ВакантныйНомерОчередиРасчетаЦен = ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСКД(Команда)
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрШаблон(НСтр(
		"ru = 'Настройте схему компоновки данных для вида цены ""%1""'"), Объект.Наименование);
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище();

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПомещатьНастройкиВСхемуКомпоновкиДанных", Ложь);
	ПараметрыФормы.Вставить("РедактироватьСхемуКомпоновкиДанных", Истина);
	ПараметрыФормы.Вставить("ЗагрузитьСхемуИзФайла", Истина);
	ПараметрыФормы.Вставить("НастраиватьОтбор", Истина);
	ПараметрыФормы.Вставить("НастраиватьПараметры", Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", Адреса.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных", Адреса.НастройкиКомпоновкиДанных);
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);

	ПараметрыОписанияОповещения = Новый Структура("Адреса", Адреса);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхЗавершение", ЭтотОбъект,
		ПараметрыОписанияОповещения);

	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы, , , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДляВключенияОпцииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасчетыРаботаСФормамиКлиент.ОткрытьДиалогВключенияНесколькихВалют();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзменениеВалютныхНастроек()
	
	Если Не Объект.НесколькоВалютДляЦен 
		И ЗначениеЗаполнено(Объект.Ссылка)
		И ЕстьЗаписиВДругойВалюте(Объект.Ссылка) Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветПересчетаВалютныхЦен", ЭтотОбъект);
		ТекстВопроса = СтрШаблон(НСтр("ru='Пересчитать цены в %1 по курсу на дату цен?'"), Объект.ВалютаЦены);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветПересчетаВалютныхЦен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		ПересчитатьЦеныВалютуВидаЦен();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		
		Объект.НесколькоВалютДляЦен = НЕ Объект.НесколькоВалютДляЦен;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦеныВалютуВидаЦен()
	
	ДлительнаяОперация = НачатьПересчетЦенВВалютуВидаЦен(Объект.Ссылка, УникальныйИдентификатор);

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПересчетаЦенВВалюту", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = СтрШаблон(НСтр("ru = 'Пересчет цен %1 в валюту %2'"),
		Объект.Наименование, Объект.ВалютаЦены);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьПересчетЦенВВалютуВидаЦен(ВидЦен, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидЦен", ВидЦен);
	СтруктураПараметров.Вставить("ВалютаРезультат", ВидЦен.ВалютаЦены);

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"Справочники.ВидыЦен.ПересчитатьЦеныВВалюту", СтруктураПараметров);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатПересчетаЦенВВалюту(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		РезультатПересчета = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатПересчета = Истина Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Цены пересчитаны'"), , 
				НСтр("ru = 'Выполнен пересчет в валюту вида цен'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗаписиВДругойВалюте(ВидЦен)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.ВидЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.ВидЦен = &ВидЦен
	|	И ЦеныНоменклатуры.ВидЦен.ВалютаЦены <> ЦеныНоменклатуры.ВалютаЦены
	|	И ЦеныНоменклатуры.ВалютаЦены <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатуры.ВидЦен";
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовкиСлужебныхКоманд()
	
	ЗаголовокПересчета = СтрШаблон(НСтр("ru='Пересчитать все цены в %1'"), Объект.ВалютаЦены);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьВсеЦеныВВалютуВидаЦен", 
		"Заголовок", ЗаголовокПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Адреса = ДополнительныеПараметры.Адреса;

	АдресХранилищаНастройкиКомпоновщика = Результат;

	Если ЗначениеЗаполнено(АдресХранилищаНастройкиКомпоновщика) Тогда
		ПрименитьИзмененияКСхемеКомпоновкиДанных(Адреса.СхемаКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФорматированиеЦеныЗавершение(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Объект.ФорматЦены = ?(ПустаяСтрока(Результат), "ЧЦ='15'; ЧДЦ='2'", Результат);
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПсихологическоеОкругление, Объект.ПорядокОкругления,
		Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОЗаписиВидаЦен(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда

		ВыполнитьРасчетЦенНаСервере();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветВопросаОчисткиОчередиЦен(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда

		ОчиститьОчередьРасчетаЦенНаСервере();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветВопросаПроУдалениеЦен(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда

		УдалитьЗаписиРегистраЦенПоТекущемуЭлементу(Объект.Ссылка);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УточнитьРасчетПоЦеновымГруппамЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда

		Модифицированность = Истина;

		Объект.ЦеновыеГруппы.Очистить();
		Для Каждого СтрокаТаблицы Из Результат.ЦеновыеГруппы Цикл

			НоваяСтрока = Объект.ЦеновыеГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Результат = КодВозвратаДиалога.Да Тогда

		Результат.Свойство("Формула", Объект.Формула);
		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбИзмененииВалюты(ОтветПользователя, ДополнительныеПараметры) Экспорт

	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда

		КэшЗначений.ИзмененаВалюта = Истина;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьКэшЗначений()

	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ИзмененаВалюта", Ложь);
	КэшЗначений.Вставить("Статический", Перечисления.ТипыВидовЦен.Статический);
	КэшЗначений.Вставить("ДинамическийПроцент", Перечисления.ТипыВидовЦен.ДинамическийПроцент);
	КэшЗначений.Вставить("ДинамическийФормула", Перечисления.ТипыВидовЦен.ДинамическийФормула);
	КэшЗначений.Вставить("ПроизвольныйЗапрос", Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос);
	КэшЗначений.Вставить("Расширение", Перечисления.ТипыВидовЦен.Расширение);
	КэшЗначений.Вставить("РучнаяКорректировкаФлага", Ложь);
	КэшЗначений.Вставить("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	КэшЗначений.Вставить("ПараметрыДлительнойОперации", Новый Структура);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("РезультатЗагрузки", Неопределено);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", "");
	КэшЗначений.Вставить("РассчитыватьАвтоматически", Истина);
	КэшЗначений.Вставить("ХранилищеНастроекКомпоновкиДанных", Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных);
	КэшЗначений.Вставить("ХранилищеСхемыКомпоновкиДанных", Объект.Ссылка.ХранилищеСхемыКомпоновкиДанных);
	КэшЗначений.Вставить("ФОУчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	КэшЗначений.Вставить("ЗаполнятьИзОснования", Объект.ЗаполнятьИзОснования);
	КэшЗначений.Вставить("ПоказатьИнформационноеПолеРасширения", Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСхемКомпоновки()
	Перем ПризнакПредопределенногоМакета;
	Перем Макет;
	Перем Макеты;
	Перем ДлинаПризнакаПредопределенногоМакета;
	// Заполнение списка схем компоновки данных.
	ПризнакПредопределенногоМакета = ВРег("Предопределенный");
	ДлинаПризнакаПредопределенногоМакета = СтрДлина(ПризнакПредопределенногоМакета);
	Макеты = Метаданные.Справочники.ВидыЦен.Макеты;

	Для Каждого Макет Из Макеты Цикл
		Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			Если ВРег(Прав(Макет.Имя, ДлинаПризнакаПредопределенногоМакета)) = ПризнакПредопределенногоМакета Тогда

				Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольная'"));
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроекОкругленияФормы()

	Объект.ПравилаОкругленияЦены.Очистить();
	НоваяСтрока = Объект.ПравилаОкругленияЦены.Добавить();
	НоваяСтрока.ТочностьОкругления = Объект.ПорядокОкругления;
	НоваяСтрока.ПсихологическоеОкругление = Объект.ПсихологическоеОкругление;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()

	ЭтоСтатический 			= (Объект.ТипВидаЦен = КэшЗначений.Статический);
	ЭтоДинамическийПроцент 	= (Объект.ТипВидаЦен = КэшЗначений.ДинамическийПроцент);
	ЭтоДинамическийФормула 	= (Объект.ТипВидаЦен = КэшЗначений.ДинамическийФормула);
	ЭтоПроизвольныйСКД		= (Объект.ТипВидаЦен = КэшЗначений.ПроизвольныйЗапрос);
	ЭтоРасширение			= (Объект.ТипВидаЦен = КэшЗначений.Расширение);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитыватьАвтоматически", "Видимость",
		(Не ЭтоСтатический) И (Не ЭтоПроизвольныйСКД) И (Не ЭтоРасширение));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УточнитьРасчетПоЦеновымГруппам",
		"Видимость", (Не ЭтоСтатический) И (Не ЭтоПроизвольныйСКД) И Не (ЭтоРасширение));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДинамическийПроцент", "Видимость",
		ЭтоДинамическийПроцент);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВалютаЦены", "Видимость",
		Не ЭтоДинамическийПроцент);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДинамическийФормула", "Видимость",
		ЭтоДинамическийФормула);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПроизвольныйСКД", "Видимость",
		ЭтоПроизвольныйСКД);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРасширение", "Видимость",
		ЭтоРасширение И КэшЗначений.ПоказатьИнформационноеПолеРасширения);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнятьИзОснования", "Видимость",
		ЭтоСтатический Или ЭтоПроизвольныйСКД Или ЭтоРасширение);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НесколькоВалютДляЦен", "Видимость",
		Не Объект.РассчитыватьАвтоматически И КэшЗначений.ФОУчетВалютныхОпераций);
		
	Если Объект.РассчитыватьАвтоматически Тогда
		Объект.НесколькоВалютДляЦен = Ложь;
	КонецЕсли;

	УстановитьВидимостьПолейОкругления();
	УстановитьЗаголовокКомандыЗаписатьИЗакрыть();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКомандыЗаписатьИЗакрыть()

	ТипВидаЦенБазовый = Объект.ТипВидаЦен = КэшЗначений.Статический Или Объект.ТипВидаЦен = КэшЗначений.ПроизвольныйЗапрос
		Или Объект.ТипВидаЦен = КэшЗначений.Расширение;

	Если ТипВидаЦенБазовый Или ПропуститьРегистрациюОчередиЦен Тогда

		ТекстЗаголовка = "";

	Иначе

		ТекстЗаголовка = НСтр("ru ='Регистрировать новые цены и закрыть'");

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "Заголовок",
		ТекстЗаголовка);

КонецПроцедуры

// Получает детальные данные из базовой цены
// используется только если текущий элемент имеет 
// динамический вид
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеБазовойЦены(БазовыйВидЦен)

	Возврат Новый Структура("ВалютаЦены, ЦенаВключаетНДС", ?(ЗначениеЗаполнено(БазовыйВидЦен),
		БазовыйВидЦен.ВалютаЦены, Справочники.Валюты.ПустаяСсылка()), ?(ЗначениеЗаполнено(БазовыйВидЦен),
		БазовыйВидЦен.ЦенаВключаетНДС, Ложь));

КонецФункции // ПолучитьДанныеБазовойЦены()

&НаСервереБезКонтекста
Функция ОбновитьДанныеОчередиРасчетаЦенНаСервере(ВидЦенСсылка)

	ДанныеОчередиЦен = Новый Структура("КоличествоЗаписейВОчередиЦен, ВакантныйНомерОчередиРасчетаЦен", 0, 0);

	Если ЗначениеЗаполнено(ВидЦенСсылка) Тогда

		Запрос = Новый Запрос("ВЫБРАТЬ КОЛИЧЕСТВО(*) КАК КоличествоЗаписейВОчередиЦен ИЗ РегистрСведений.ОчередьРасчетаЦен ГДЕ ВидЦенРасчетный = &ВидЦенРасчетный");
		Запрос.УстановитьПараметр("ВидЦенРасчетный", ВидЦенСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда

			ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен = Выборка.КоличествоЗаписейВОчередиЦен;

		КонецЕсли;

	КонецЕсли;

	ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен = Константы.ВакантныйНомерОчередиРасчетаЦен.Получить();

	Возврат ДанныеОчередиЦен;

КонецФункции

&НаСервере
// Процедура создает новый идентификатор вида цены.
// В последствии данный идентификатор может использоваться в формулах.
//
Процедура СформироватьНовыйИдентификатор(СообщениеПользователю)

	Если Не ПустаяСтрока(Объект.Ссылка) Тогда

		ОписаниеИспользования = ПроверитьВидЦенНаИспользованиеВФормулах(Объект.Ссылка);
		Если ОписаниеИспользования <> Неопределено Тогда

			ШаблонСообщения = НСтр("ru ='Необходимо проверить формулы динамических видов цен:%1'");

			ВидыЦенСтрокой = "";
			Для Каждого СтруктураОписания Из ОписаниеИспользования Цикл

				ВидыЦенСтрокой = ВидыЦенСтрокой + Символы.ПС + СтруктураОписания.Наименование;

			КонецЦикла;

			СообщениеПользователю = СтрШаблон(ШаблонСообщения, ВидыЦенСтрокой);

			ЗаписьЖурналаРегистрации(ЦенообразованиеСервер.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение, Метаданные.Справочники.ВидыЦен, Объект.Ссылка,
				СообщениеПользователю);

		КонецЕсли;

	КонецЕсли;

	ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(Объект.ИдентификаторФормул, Объект.Наименование);

КонецПроцедуры // СформироватьНовыйИдентификатор()

&НаКлиенте
// Процедура открывает конструктор формулы
//
Процедура ОткрытьКонструкторФормулы()

	ПараметрыФормулы = Новый Структура("Ссылка, Формула", Объект.Ссылка, Объект.Формула);

	ОписаниеОповещения = Новый ОписаниеОповещения("КонструкторФормулЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыЦен.Форма.КонструкторФормул", ПараметрыФормулы, Элементы.Формула, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры // ОткрытьКонструкторФормулы()

&НаСервере
Процедура УдалитьЗаписиРегистраЦенПоТекущемуЭлементу(ВидЦен)

	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда

		ВызватьИсключение НСтр("ru ='Действие доступно только администратору.'");

	КонецЕсли;

	Справочники.ВидыЦен.УдалитьВсеЦеныПоВидуЦен(ВидЦен);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетЦенНаСервере()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВидЦен", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("РасчетИзВидаЦен", Истина);
		ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФорматаЦен()

	ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен();

	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПсихологическоеОкругление, Объект.ПорядокОкругления,
		Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);

КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьПример(ЧисловоеЗначение, ПсихологическоеОкругление, ПорядокОкругления, ОкруглятьВБольшуюСторону,
	ФорматнаяСтрока)

	ЦенаПример = ЦенообразованиеСервер.ОкруглитьЦену(ЧисловоеЗначение, ПорядокОкругления, ОкруглятьВБольшуюСторону);
	ЦенаПример = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(ЦенаПример, ПсихологическоеОкругление);

	Возврат Формат(ЦенаПример, ФорматнаяСтрока);

КонецФункции

&НаКлиенте
Процедура ОбновитьЗаголовокСвернутогоГруппыОкругленияЦен()

	СтруктураЗаголовка = Новый Структура("ТретийПараметр, ЧетвертыйПараметр", "", "");

	ПервыйПараметр = ?(ИспользоватьРасширеннуюНастройкуОкругления, НСтр("ru = 'Цены по диапазонам'"), НСтр(
		"ru = 'Все цены'"));
	СтруктураЗаголовка.Вставить("ПервыйПараметр", ПервыйПараметр);

	ВторойПараметр = ?(Не Объект.ОкруглятьВБольшуюСторону, НСтр("ru = 'Арифметическим'"), НСтр(
		"ru = 'В большую сторону'"));
	СтруктураЗаголовка.Вставить("ВторойПараметр", ВторойПараметр);
	СтруктураЗаголовка.Вставить("ИспользоватьРасширеннуюНастройкуОкругления",
		ИспользоватьРасширеннуюНастройкуОкругления);
	СтруктураЗаголовка.Вставить("ПорядокОкругления", Объект.ПорядокОкругления);
	СтруктураЗаголовка.Вставить("ПсихологическоеОкругление", Объект.ПсихологическоеОкругление);

	ЗаголовокСвернутого = ЦенообразованиеКлиентСервер.ПолучитьКраткоеОписаниеСпособаОкругленияВидаЦены(
		СтруктураЗаголовка);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФорматЦен",
		"ЗаголовокСвернутогоОтображения", ЗаголовокСвернутого);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания()

	ПервыйПараметр = ?(ЗначениеЗаполнено(Объект.ПорогСрабатыванияПриУвеличении), НСтр("ru = 'при >='")
		+ Объект.ПорогСрабатыванияПриУвеличении + "% ", "");

	ВторойПараметр = ?(ЗначениеЗаполнено(Объект.ПорогСрабатыванияПриУменьшении), НСтр("ru = 'при <='")
		+ Объект.ПорогСрабатыванияПриУменьшении + "% ", "");

	ТретийПараметр = ?(Объект.ПорогиСрабатывания.Количество() > 0, НСтр("ru = 'есть уточнения по ценовым группам'"), "");

	ИлиПараметр = ?(ЗначениеЗаполнено(ПервыйПараметр) И ЗначениеЗаполнено(ВторойПараметр), НСтр("ru = 'или'"), "");
	ИПараметр = ?((ЗначениеЗаполнено(ПервыйПараметр) Или ЗначениеЗаполнено(ВторойПараметр)) И ЗначениеЗаполнено(
		ТретийПараметр), НСтр("ru = 'и'"), "");

	Если Не ЗначениеЗаполнено(ПервыйПараметр) И Не ЗначениеЗаполнено(ВторойПараметр) И Не ЗначениеЗаполнено(
		ТретийПараметр) Тогда

		ЗаголовокСвернутого = НСтр("ru = 'Пороги расчета цен: не используются'");

	Иначе

		ШаблонСтроки = НСтр("ru = 'Пороги расчета цен: %1 %2 %3 %4 %5'");
		ЗаголовокСвернутого = СтрШаблон(ШаблонСтроки, ПервыйПараметр, ИлиПараметр, ВторойПараметр, ИПараметр,
			ТретийПараметр);

	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПорогиСрабатывания",
		"ЗаголовокСвернутогоОтображения", ЗаголовокСвернутого);

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеУточнениеНастроекРасчета()

	Если Объект.ПорогиСрабатывания.Количество() = 0 Тогда
		УточнениеНастроекРасчетаЗависимыхПредставление = Новый ФорматированнаяСтрока(НСтр(
			"ru = 'Настроить пороги расчета цен'"), , , , "Изменить");
	Иначе

		Если Объект.ПорогиСрабатывания.Количество() > 1 Или (Объект.ПорогиСрабатывания.Количество() = 1) Тогда
			РасшифровкаНастроекРасчета = НСтр("ru = '%1%2'");

			Порог = Объект.ПорогиСрабатывания[0];

			ПерваяСтрока = СтрШаблон(НСтр("ru = '%1 >= %2%% или <= %3%%'"), Порог.ЦеноваяГруппа,
				Порог.ПорогСрабатыванияПриУвеличении, Порог.ПорогСрабатыванияПриУменьшении);

			КоличествоОстальных = Объект.ПорогиСрабатывания.Количество() - 1;

			ВтораяСтрока = "";
			Если КоличествоОстальных > 0 Тогда

				ВтораяСтрока = СтрШаблон(" %1 %2", НСтр("ru = 'и еще'"), КоличествоОстальных);

			КонецЕсли;

			РасшифровкаНастроекРасчета = СтрШаблон(РасшифровкаНастроекРасчета, ПерваяСтрока, ВтораяСтрока);

		Иначе

			РасшифровкаНастроекРасчета = НСтр("ru = 'Настроить пороги расчета цен'");

		КонецЕсли;

		УточнениеНастроекРасчетаЗависимыхПредставление = Новый ФорматированнаяСтрока(РасшифровкаНастроекРасчета, , , ,
			"Изменить");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтсутствуютЗаписиЦен(ТекущаяСсылка)

	Если Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда

		Возврат Истина;

	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 РегистрСведений.ЦеныНоменклатуры.Номенклатура ГДЕ РегистрСведений.ЦеныНоменклатуры.ВидЦен = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ТекущаяСсылка);
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Пустой();

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВидЦенНаИспользованиеВФормулах(ВидЦен)

	Возврат ЦенообразованиеФормулыСервер.ПроверитьВидЦенНаИспользованиеВФормулах(ВидЦен);

КонецФункции

&НаСервере
Процедура ПроверитьЗначениеВалюты(Ошибки)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ Склады.Ссылка КАК Склад ИЗ Справочник.СтруктурныеЕдиницы КАК Склады ГДЕ Склады.РозничныйВидЦен = &РозничныйВидЦен");
	Запрос.УстановитьПараметр("РозничныйВидЦен", Объект.Ссылка);

	РезультатВыполненияЗапроса = Запрос.Выполнить();
	Если РезультатВыполненияЗапроса.Пустой() Тогда

		Возврат;

	КонецЕсли;

	Если Объект.ВалютаЦены <> КэшЗначений.НациональнаяВалюта Тогда

		ТекстСообщения = НСтр(
			"ru = 'Текущий вид цен используется в розничных структурных единицах, поэтому для него можно использовать только национальную валюту.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.ВалютаЦены", ТекстСообщения, "");

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьОчередьРасчетаЦенНаСервере()

	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда

		ВызватьИсключение НСтр("ru ='Действие доступно только администратору.'");

	КонецЕсли;

	НаборЗаписей = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦенРасчетный.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Записать(Истина);

	ДанныеОчередиЦен = ОбновитьДанныеОчередиРасчетаЦенНаСервере(Объект.Ссылка);
	КоличествоЗаписейВОчередиЦен = ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен;
	ВакантныйНомерОчередиРасчетаЦен = ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен;

КонецПроцедуры

&НаСервере
Функция СкладыПоВидуЦены()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЦены", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
				   |	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
				   |	СтруктурныеЕдиницы.Наименование КАК Наименование
				   |ИЗ
				   |	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
				   |ГДЕ
				   |	НЕ СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
				   |	И СтруктурныеЕдиницы.РозничныйВидЦен = &ВидЦены";
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура УстановитьДоступностьИТекстПодсказкиАвтоматическогоРасчета()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Склады = СкладыПоВидуЦены();
	Если Склады.Количество() > 0 И Не Объект.РассчитыватьАвтоматически Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитыватьАвтоматически",
			"Доступность", Ложь);
		НачалоЗаголовка = Новый ФорматированнаяСтрока(НСтр(
			"ru = 'Флаг заблокирован, так как вид цен выбран в следующих складах:'") + Символы.ПС);
		МассивЗаголовка = Новый Массив;
		МассивЗаголовка.Добавить(НачалоЗаголовка);
		СкладыДляПереходаПоСсылке.Очистить();
		Для Каждого Склад Из Склады Цикл

			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Склад.Ссылка);
			МассивСтроки = Новый Массив;
			МассивСтроки.Добавить(" • ");
			НаименованиеСкладаСтрока = Новый ФорматированнаяСтрока(Склад.Наименование + Символы.ПС, , , ,
				НавигационнаяСсылка);
			МассивСтроки.Добавить(НаименованиеСкладаСтрока);

			МассивЗаголовка.Добавить(МассивСтроки);
			Запись = СкладыДляПереходаПоСсылке.Добавить();
			Запись.НавигационнаяСсылка = НавигационнаяСсылка;
			Запись.Склад = Склад.Ссылка;
		КонецЦикла;
		Элементы.РассчитыватьАвтоматически.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(МассивЗаголовка);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстДекорацииПредупреждения()

	ПредупреждениеВидимо = Не Объект.ЦеныАктуальны И ЗначениеЗаполнено(Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость",
		ПредупреждениеВидимо);
	Если ПредупреждениеВидимо Тогда

		Если Объект.РассчитыватьАвтоматически Тогда
			ТекстЗаголовка1 = НСтр("ru = 'Были зафиксированы изменения, которые влияют на расчет цен.'");
			ТекстЗаголовка2 = НСтр(
				"ru = 'В ближайшее время будут автоматически актуализированы цены по этой колонке прайс-листа.'");
		Иначе
			ТекстЗаголовка1 = НСтр("ru = 'Были зафиксированы изменения, которые влияют на расчет цен.'");
			ТекстЗаголовка2 = НСтр(
				"ru = 'Цены необходимо рассчитать. Для этого нажмите кнопку ""Установить цены""'");
		КонецЕсли;

		Элементы.ДекорацияПредупреждение.РасширеннаяПодсказка.Заголовок 
			= СтрШаблон("%1%2", ТекстЗаголовка1, ТекстЗаголовка2);
		Элементы.ДекорацияПредупреждение.РасширеннаяПодсказка.ЦветТекста = ЦветаСтиля.КрасныйТекстСтрок;

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуютсяРасширенныеНастройкиОкругления(Форма)

	ИспользоватьРасширеннуюНастройкуОкругления = Ложь;

	Если Форма.Объект.ПравилаОкругленияЦены.Количество() = 1
		И Форма.Объект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0
		И Форма.Объект.ПравилаОкругленияЦены[0].ПсихологическоеОкругление = 0 Тогда

		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;

	ИначеЕсли Форма.Объект.ПравилаОкругленияЦены.Количество() >= 1 Тогда

		ИспользоватьРасширеннуюНастройкуОкругления = Истина;

	Иначе

		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;

	КонецЕсли;

	Возврат ИспользоватьРасширеннуюНастройкуОкругления;

КонецФункции

&НаСервере
Функция ПоместитьВХранилищеСтрокиТабличнойЧасти(ВидВызова)

	Если ВидВызова = "УточнениеНастроекОкругления" Тогда
		Таблица = Объект.ПравилаОкругленияЦены.Выгрузить();
	КонецЕсли;

	Если ВидВызова = "УточнениеПороговСрабатывания" Тогда
		Таблица = Объект.ПорогиСрабатывания.Выгрузить();
	КонецЕсли;

	Возврат ПоместитьВоВременноеХранилище(Таблица);

КонецФункции

&НаСервере
Процедура ЗагрузитьТабличнуюЧасть(ПереданнаяТаблица, ТекущаяТаблица)
	ТекущаяТаблица.Очистить();
	ТекущаяТаблица.Загрузить(ПереданнаяТаблица);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиУточнений(Параметры)

	ВидВызова = Параметры.ВидВызова;
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;

	Если ДополнительныеПараметры.Количество() Тогда
		ЗаполнитьЗначенияСвойств(Объект, ДополнительныеПараметры);
	КонецЕсли;

	ПереданнаяТаблица = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);

	Если ВидВызова = "УточнениеПороговСрабатывания" Тогда

		ТекущаяТаблица = Объект.ПорогиСрабатывания;
		ЗагрузитьТабличнуюЧасть(ПереданнаяТаблица, ТекущаяТаблица);

		ОбновитьПредставлениеУточнениеНастроекРасчета();

	ИначеЕсли ВидВызова = "УточнениеНастроекОкругления" Тогда

		ТекущаяТаблица = Объект.ПравилаОкругленияЦены;
		ЗагрузитьТабличнуюЧасть(ПереданнаяТаблица, ТекущаяТаблица);

		ОбновитьПредставлениеУточнениеНастроекОкругления();

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьТаблицуПравилОкругленияСервер(Форма)

	Если Форма.Объект.ПравилаОкругленияЦены.Количество() > 0 Тогда
		Форма.Объект.ПравилаОкругленияЦены.Сортировать("НижняяГраницаДиапазонаЦен");
	КонецЕсли;

	МаксимальныйИндекс = Форма.Объект.ПравилаОкругленияЦены.Количество() - 1;
	Для Индекс = 0 По МаксимальныйИндекс Цикл

		Если Форма.Объект.ПравилаОкругленияЦены.Количество() = 1
			И Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен = 0 Тогда

			ЦеновойДиапазон = НСтр("ru = 'Все цены'");

		Иначе

			Если Индекс = МаксимальныйИндекс Тогда

				ЦеновойДиапазон = НСтр("ru = 'Свыше %НачалоДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%",
					Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен);

			Иначе

				ЦеновойДиапазон = НСтр("ru = 'От %НачалоДиапазона% до %ОкончаниеДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%",
					Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен);
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%ОкончаниеДиапазона%",
					Форма.Объект.ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен);

			КонецЕсли;

			Если ЗначениеЗаполнено(Форма.Объект.ВалютаЦены) Тогда
				ЦеновойДиапазон = ЦеновойДиапазон + " " + Форма.Объект.ВалютаЦены;
			КонецЕсли;

		КонецЕсли;

		Форма.Объект.ПравилаОкругленияЦены[Индекс].ЦеновойДиапазон = ЦеновойДиапазон;

		УстановитьПример(Форма, Индекс);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаУточненийЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не Результат = Неопределено Тогда

		ЗаполнитьНастройкиУточнений(Результат);

		Модифицированность = Истина;

		ОбновитьЗаголовокСвернутогоГруппыПороговСрабатывания();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеУточнениеНастроекОкругления()

	Если Объект.ПравилаОкругленияЦены.Количество() = 0 Тогда
		УточнениеНастроекОкругленияПредставление = Новый ФорматированнаяСтрока(НСтр(
			"ru = 'Настроить округление цен по диапазонам'"), , , , "Изменить");
	Иначе

		Если Объект.ПравилаОкругленияЦены.Количество() > 1 Или (Объект.ПравилаОкругленияЦены.Количество() = 1
			И Объект.ПравилаОкругленияЦены[0].ТочностьОкругления <> 0) Тогда

			РасшифровкаЦеновыхДиапазонов = НСтр("ru = '%1%2'");
			ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=; ЧГ=0";

			Правило = Объект.ПравилаОкругленияЦены[0];
			Если Правило.ТочностьОкругления = 0 Тогда
				ПерваяСтрока = СтрШаблон("%1 %2", Правило.ЦеновойДиапазон, НСтр("ru = 'не округлять'"));
			Иначе
				ФорматПервойСтроки = Формат(Правило.ТочностьОкругления, ФорматнаяСтрока);
				СтрокаТочности = НСтр("ru = 'с точностью'");
				ПерваяСтрока = СтрШаблон("%1 %2 %3", Правило.ЦеновойДиапазон, СтрокаТочности, ФорматПервойСтроки);
			КонецЕсли;

			КоличествоОстальных = Объект.ПравилаОкругленияЦены.Количество() - 1;

			ВтораяСтрока = "";
			Если КоличествоОстальных > 0 Тогда

				ВтораяСтрока = СтрШаблон(" %1 %2 ", НСтр("ru = 'и еще'"), КоличествоОстальных);

			КонецЕсли;

			РасшифровкаЦеновыхДиапазонов = СтрШаблон(РасшифровкаЦеновыхДиапазонов, ПерваяСтрока, ВтораяСтрока);

		Иначе

			РасшифровкаЦеновыхДиапазонов = НСтр("ru = 'Настроить округление цен по диапазонам'");

		КонецЕсли;

		УточнениеНастроекОкругленияПредставление = Новый ФорматированнаяСтрока(РасшифровкаЦеновыхДиапазонов, , , ,
			"Изменить");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПолейОкругления()

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПримерИТочность", "Видимость",
		Не ИспользоватьРасширеннуюНастройкуОкругления);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УточнениеНастроекОкругленияПредставление",
		"Видимость", ИспользоватьРасширеннуюНастройкуОкругления);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПример(Форма, Индекс)

	ЧислоПример = 987654.321;
	СлагаемоеПример = 1000;
	ДелительПример = 2;
	ЧислоСТочкойПример = 0.11;

	Если Форма.Объект.ПравилаОкругленияЦены.Количество() > 1 Тогда
		НижняяГраница = Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен;
		Если Индекс = Форма.Объект.ПравилаОкругленияЦены.Количество() - 1 Тогда
			ВерхняяГраница = НижняяГраница + СлагаемоеПример;
		Иначе
			ВерхняяГраница = Форма.Объект.ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен;
		КонецЕсли;
		ЧислоПример = НижняяГраница + Окр((ВерхняяГраница - НижняяГраница) / ДелительПример, 15, 2);
		Если ЧислоПример + ЧислоСТочкойПример < ВерхняяГраница Тогда
			ЧислоПример = ЧислоПример + ЧислоСТочкойПример;
		КонецЕсли;
	КонецЕсли;

	Если Форма.Объект.ПравилаОкругленияЦены[Индекс].ТочностьОкругления <> 0
		Или Форма.Объект.ПравилаОкругленияЦены[Индекс].ПсихологическоеОкругление <> 0 Тогда

		Цена = ЦенообразованиеСервер.ОкруглитьЦену(ЧислоПример,
			Форма.Объект.ПравилаОкругленияЦены[Индекс].ТочностьОкругления, Форма.Объект.ОкруглятьВБольшуюСторону);

		Значение = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(
			Цена, Форма.Объект.ПравилаОкругленияЦены[Индекс].ПсихологическоеОкругление);

		ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=; ЧГ=0";
		ШаблонСтроки = НСтр("ru = 'Округлять %1 до %2'");
		Параметр1 = Формат(ЧислоПример, ФорматнаяСтрока);
		Параметр2 = Формат(Значение, ФорматнаяСтрока);
		Форма.Объект.ПравилаОкругленияЦены[Индекс].Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСтроки, Параметр1, Параметр2);

	Иначе
		Форма.Объект.ПравилаОкругленияЦены[Индекс].Подсказка = НСтр("ru = 'Не округлять'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиУточнения(ВидВызова)

	АдресВХранилище = ПоместитьВХранилищеСтрокиТабличнойЧасти(ВидВызова);

	ДополнительныеПараметры = Новый Структура;

	ДополнительныеПараметры.Вставить("ВалютаЦены", Объект.ВалютаЦены);
	ДополнительныеПараметры.Вставить("ОкруглятьВБольшуюСторону", Объект.ОкруглятьВБольшуюСторону);
	ДополнительныеПараметры.Вставить("ТочностьОкругления", Объект.ПорядокОкругления);
	ДополнительныеПараметры.Вставить("ВидВызова", ВидВызова);

	СтруктураПараметров = Новый Структура("АдресВХранилище, ДополнительныеПараметры", АдресВХранилище,
		ДополнительныеПараметры);
	ОповещениеПослеУточнения = Новый ОписаниеОповещения("НастройкаУточненийЗавершение", ЭтотОбъект);

	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаНастройкиУточнений", СтруктураПараметров, ЭтотОбъект, , , ,
		ОповещениеПослеУточнения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище()

	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Или КэшЗначений.ХранилищеСхемыКомпоновкиДанных = Неопределено Тогда

		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(
			Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;

	Иначе

		СхемаКомпоновкиДанных = КэшЗначений.ХранилищеСхемыКомпоновкиДанных.Получить();

	КонецЕсли;

	Если СхемаКомпоновкиДанных = Неопределено Тогда

		СхемаКомпоновкиДанных = Справочники.ВидыЦен.СформироватьНовуюСхемуКомпоновкиДанных();

	КонецЕсли;

	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	// Настройки
	Настройки = КэшЗначений.ХранилищеНастроекКомпоновкиДанных.Получить();
	Если ЗначениеЗаполнено(Настройки) Тогда

		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);

	КонецЕсли;

	Возврат Адреса;

КонецФункции

&НаСервере
Процедура ПрименитьИзмененияКСхемеКомпоновкиДанных(АдресСхемыКомпоновкиДанныхВХранилище, АдресНастроекКомпоновкиДанных)

	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда

		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(
			Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных.
		СхемаКомпоновкиИзХранилища = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		Если ЦенообразованиеСервер.ПолучитьXML(СхемаИНастройки.СхемаКомпоновкиДанных) <> СхемаКомпоновкиИзХранилища Тогда

			КэшЗначений.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиИзХранилища);

		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка

			ИсточникДоступныхНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИНастройки.СхемаКомпоновкиДанных);
			КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);

		Исключение

			СтрокаОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(СтрокаОшибки);

		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ЦенообразованиеСервер.ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки())
			<> ЦенообразованиеСервер.ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда

			ДанныеВременногоХранилища = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
			КэшЗначений.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ДанныеВременногоХранилища);

		Иначе

			КэшЗначений.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);

		КонецЕсли;

	Иначе

		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		Если ЦенообразованиеСервер.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных) Тогда

			КэшЗначений.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);

			НастройкиПоУмолчанию = ЦенообразованиеСервер.ПолучитьНастройкиКомпоновкиПоУмолчанию(СхемаКомпоновкиДанных);

			Если ЦенообразованиеСервер.ПолучитьXML(НастройкиПоУмолчанию) <> ЦенообразованиеСервер.ПолучитьXML(
				ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда

				ДанныеВременногоХранилищаНастроек = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
				КэшЗначений.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ДанныеВременногоХранилищаНастроек);

			Иначе

				КэшЗначений.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораБазовогоВидаЦены()

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ТипыВидовЦен.Статический);
	МассивТипов.Добавить(Перечисления.ТипыВидовЦен.ПроизвольныйЗапрос);
	МассивТипов.Добавить(Перечисления.ТипыВидовЦен.Расширение);

	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипВидаЦен", Новый ФиксированныйМассив(МассивТипов));

	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	Элементы.БазовыйВидЦен.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИдентификаторДляРасчетаВРасширении()

	Если Не ЗначениеЗаполнено(Объект.ИдентификаторДляРасчетаВРасширении) Тогда

		АдаптированныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
		Объект.ИдентификаторДляРасчетаВРасширении = АдаптированныйИдентификатор;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Цвет текста ошибок расчета
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();

	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ЦветОсобогоТекстаРМК;
	Оформление.Использование 	= Истина;

	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Больше;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.КоличествоПопытокСлужебный");
	Отбор.ПравоеЗначение 	= 1;

	ОформляемоеПоле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле			= Новый ПолеКомпоновкиДанных("КоличествоПопытокСлужебный");
	ОформляемоеПоле.Использование	= Истина;

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьРеквизитовВалюты()
	
	Если ВозможностиПриложения.ЭтоРозница()
		ИЛИ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
		Элементы.ВалютаДляВключенияОпции.Видимость = Ложь;
	Иначе
		Элементы.ВалютаДляВключенияОпции.Видимость = Истина;
		ВалютаДляВключенияОпции = Константы.НациональнаяВалюта.Получить();
		Элементы.ВалютаДляВключенияОпции.СписокВыбора.Добавить(Строка(ВалютаДляВключенияОпции));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АвтоматическиеСкидкиВключены()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");  
КонецФункции 

#Область ДлительныеОперации

&НаКлиенте
Процедура ОбработатьРезультатВыполненияФоновогоЗадания(РезультатЗагрузки, ДополнительныеПараметры) Экспорт

	Если РезультатЗагрузки = Неопределено Тогда

		Возврат;

	КонецЕсли;

	КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки = РезультатЗагрузки;

	Заголовок = НСтр("ru ='Загрузка цен'");
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки.Статус = "Выполнено" Тогда

		ТекстОповещения = НСтр("ru ='Цены номенклатуры.
							   |Загрузка данных завершена.'");

		ПоказатьОповещениеПользователя(ТекстОповещения, , Заголовок);

	ИначеЕсли КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки.Статус = "Ошибка" Тогда

		ПоказатьОповещениеПользователя(РезультатЗагрузки.КраткоеПредставлениеОшибки, , Заголовок);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиПодготовленныхДанных()

	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки.Статус <> "Выполняется" Тогда

		ОбработатьРезультатВыполненияФоновогоЗадания(КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки,
			Неопределено);
		Возврат;

	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияФоновогоЗадания", ЭтотОбъект, Неопределено);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения		= НСтр("ru ='Загрузка цен из внешнего источника'");
	ПараметрыОжидания.ВыводитьОкноОжидания	= Истина;

	ДлительныеОперацииКлиент.ОжидатьЗавершение(КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки, Обработчик,
		ПараметрыОжидания);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда

		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда

			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);

			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата",
				ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(
				НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);

		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда

			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			ПослеОбработкиПодготовленныхДанных();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)

	Если ЗначениеЗаполнено(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания) Тогда

		ДлительныеОперации.ОтменитьВыполнениеЗадания(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания);
		КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания = Неопределено;

	КонецЕсли;

	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыПроцедуры.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(
		РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка цен из внешнего источника'");
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;

	ИмяМетода = "РегистрыСведений.ЦеныНоменклатуры.ОбработатьПодготовленныеДанные";
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);

	КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки		= РезультатФоновогоЗадания;
	КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания	= РезультатФоновогоЗадания.ИдентификаторЗадания;

КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)

	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Наименование");
	Реквизиты.Добавить("ИдентификаторФормул");

	ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект, Реквизиты);

КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ДекорацияПодсказкаСкидкиЗакрытьНажатие(Элемент)
	Элементы.ГруппаПодсказкаСкидки.Видимость = Ложь;
	СохранитьНастройкуПоказыватьПодсказкуСкидки();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуПоказыватьПодсказкуСкидки()

	РаботаСФормойДокумента.СохранитьВидимостьГруппыИнформации(ИмяФормы,
		"ПоказыватьПодсказкуСкидки", Ложь);
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти