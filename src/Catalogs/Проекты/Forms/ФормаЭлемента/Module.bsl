#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	НаборСвойств_Справочник_Проекты = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Проекты");
	// Конец СтандартныеПодсистемы.Свойства
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ДоступныДоходыИРасходы = ПравоДоступа("Просмотр",Метаданные.Отчеты.ДоходыИРасходы);
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	Если ДоступныДоходыИРасходы Тогда 
		Если Объект.Ссылка.Пустая() Тогда
			Элементы.ГруппаОжиданиеГистограммы.Видимость = Ложь;
			Элементы.ГруппаОжиданиеКольцевой.Видимость = Ложь;
			Элементы.ДополнительнаяИнформация.Видимость = Ложь;
			ЗаполнитьДиаграммыТестовымиЗначениями();
		Иначе
			РезультатФоновогоЗадания = ЗапуститьФоновоеЗадание();
		КонецЕсли;
	Иначе
		Элементы.ДополнительнаяИнформация.Видимость = Ложь;
		Элементы.Отступ.Видимость = Ложь;
		Элементы.ГруппаДиаграммы.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ГруппаДиаграммы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ДекорацияМеждуДатами.Видимость = Ложь;
		Элементы.Комментарий.Высота = 3;
		Элементы.ГруппаРеквизиты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ДополнительнаяИнформация.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	
	БылаПерестроенаКольцеваяДиаграмма = Ложь;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	Если ДоступныДоходыИРасходы Тогда
		ПроверитьФоновоеЗадание();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборСвойств_Справочник_Проекты);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанных = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент);
	Объект.Договор = СтруктураДанных.Договор;
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура ДиаграммаВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	Период = СписокДатИзГистограммы.НайтиПоЗначению(ЗначениеДиаграммы.Точка.Значение);
	
	Если ТипПериода = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		ПерестроитьГистограммуКМесяцам(Период.Представление, Ложь);
	ИначеЕсли ТипПериода = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		ПерестроитьГистограммуКМесяцам(Период.Представление, Истина);
	Иначе
		ПерестроитьКольцевуюДиаграмму(Период.Представление, ЗначениеДиаграммы.Серия.Значение);
		СписокДатИзГистограммы.Добавить(Период.Значение, Период.Представление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиаграммыНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Или ДоходыИРасходы.Количество() < 1 Тогда
		Возврат;
	КонецЕсли;
	
	КольцеваяДиаграмма.Очистить();
	ГистограммаПоПериодам.Очистить();
	Если БылаПерестроенаКольцеваяДиаграмма Тогда
		КольцеваяДиаграмма.ОбластьЗаголовка.Верх = 0.99;
		КольцеваяДиаграмма.ОбластьЗаголовка.Лево = 0.42;
	КонецЕсли;
	
	ЗаполнитьДиаграммы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиКОтчету();
	 
КонецПроцедуры

&НаКлиенте
Процедура ПрибыльУбытокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиКОтчету();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиКОтчету();
	
КонецПроцедуры

&НаКлиенте
Процедура РентабельностьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиКОтчету();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция готовит и возвращает структуру с данными контрагента
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент));
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьФоновоеЗадание()
	
	Если РезультатФоновогоЗадания <> Неопределено Тогда
		Если РезультатФоновогоЗадания.Статус = "Выполняется" Тогда
			Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеВыполнено", ЭтотОбъект);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания,Обработчик,ПараметрыОжидания);
		ИначеЕсли РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
			Элементы.ГруппаОжиданиеГистограммы.Видимость = Ложь;
			Элементы.ГруппаОжиданиеКольцевой.Видимость = Ложь;
			ЗаполнитьДанныеДоходыИРасходы(РезультатФоновогоЗадания.АдресРезультата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗадание()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ДатаНачала = НачалоМесяца(ПолучитьДатуНачала(Объект.ДатаНачала));
	ДатаОкончания = ПолучитьДатуОкончания(Объект.ДатаОкончания,ТекущаяДатаСеанса());
	
	РезультатДлительнойОперации = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,"Справочники.Проекты.ПолучитьДоходыИРасходыПоПроекту",
		Объект.Ссылка,ДатаНачала,ДатаОкончания);
	
	Возврат РезультатДлительнойОперации;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		Элементы.ГруппаОжиданиеГистограммы.Видимость = Ложь;
		Элементы.ГруппаОжиданиеКольцевой.Видимость = Ложь;
		ЗаполнитьДанныеДоходыИРасходы(Результат.АдресРезультата);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДоходыИРасходы(АдресРезультата)
	
	ТаблицаСАналитикой = ПолучитьИзВременногоХранилища(АдресРезультата);
	ДоходыИРасходы.Загрузить(ТаблицаСАналитикой);
	
	СуммаДоходов = ДоходыИРасходы.Итог("Доход");
	СуммаРасходов = ДоходыИРасходы.Итог("Расход");
	
	Элементы.Доход.Заголовок = ФорматированныйДоходИлиРасход(СуммаДоходов, Истина);
	Элементы.Расход.Заголовок = ФорматированныйДоходИлиРасход(СуммаРасходов, Ложь);
	Элементы.ПрибыльУбыток.Заголовок = ФорматированнаяПрибыльИлиУбыток(СуммаДоходов, СуммаРасходов);
	Элементы.Рентабельность.Заголовок = ФорматированнаяРентабельность(СуммаДоходов, СуммаРасходов);
	
	Если ЗначениеЗаполнено(ДоходыИРасходы) Тогда
		ЗаполнитьДиаграммы(Истина);
	Иначе
		ЗаполнитьДиаграммыТестовымиЗначениями();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммы(ОбновитьГраницыЗаголовка)
	
	СписокДатИзГистограммы.Очистить();
	МаксЗначениеШкалы = 0;
	СерияДоходы = ГистограммаПоПериодам.УстановитьСерию(ПолучитьДоход());
	СерияДоходы.Цвет = ЦветаСтиля.ЦветДоходаВПроекте;
	СерияРасходы = ГистограммаПоПериодам.УстановитьСерию(ПолучитьРасход());
	СерияРасходы.Цвет = ЦветаСтиля.ЦветРасходаВПроекте;
	КольцеваяДиаграмма.ОтображатьЛегенду = Ложь;
	КольцеваяДиаграмма.ОбластьЗаголовка.Текст = ПолучитьДоходыИРасходы();
	Если ОбновитьГраницыЗаголовка Тогда
		КольцеваяДиаграмма.ОбластьЗаголовка.Верх = 0.32;
		КольцеваяДиаграмма.ОбластьЗаголовка.Лево = 0.42;
	КонецЕсли;
	
	ДатаНачала = ПолучитьДатуНачала(Объект.ДатаНачала, ДоходыИРасходы);
	ДатаОкончания = ПолучитьДатуОкончания(Объект.ДатаОкончания, ТекущаяДатаСеанса(), ДоходыИРасходы);
	
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Если КоличествоМесяцевМеждуДатами(ДатаНачала, ДатаОкончания) <= 12 Тогда
			Пока НачалоМесяца(ДатаНачала) <= ДатаОкончания Цикл
				Точка = ГистограммаПоПериодам.УстановитьТочку(ФорматированнаяДатаПоМесяцу(ДатаНачала));
				СписокДатИзГистограммы.Добавить(ФорматированнаяДатаПоМесяцу(ДатаНачала), ДатаНачала);
				Результат = ПолучитьДанныеЗаМесяц(ДатаНачала,МаксЗначениеШкалы);
				ДатаНачала = ДобавитьМесяц(ДатаНачала,1);
				Если Результат.МаксимальноеЗначение > МаксЗначениеШкалы Тогда
					МаксЗначениеШкалы = Результат.МаксимальноеЗначение;
				КонецЕсли;
				ГистограммаПоПериодам.УстановитьЗначение(Точка,СерияДоходы,Результат.Доход);
				ГистограммаПоПериодам.УстановитьЗначение(Точка,СерияРасходы,Результат.Расход);
			КонецЦикла;
			ТипПериода = Перечисления.Периодичность.Месяц;
		ИначеЕсли КоличествоМесяцевМеждуДатами(ДатаНачала, ДатаОкончания) <= 36 Тогда
			Пока НачалоМесяца(ДатаНачала) <= ДатаОкончания Цикл
				ТекКвартал = ФорматированнаяДатаПоКварталу(ДатаНачала);
				СписокДатИзГистограммы.Добавить(ТекКвартал, ДатаНачала);
				Точка = ГистограммаПоПериодам.УстановитьТочку(ФорматированнаяДатаПоКварталу(ДатаНачала));
				ДоходПоКварталу = 0;
				РасходПоКварталу = 0;
				Пока ФорматированнаяДатаПоКварталу(ДатаНачала) = ТекКвартал Цикл
					Результат = ПолучитьДанныеЗаМесяц(ДатаНачала,МаксЗначениеШкалы);
					ДоходПоКварталу = ДоходПоКварталу + Результат.Доход;
					РасходПоКварталу = РасходПоКварталу + Результат.Расход;
					Если Макс(ДоходПоКварталу, РасходПоКварталу) > МаксЗначениеШкалы Тогда
						МаксЗначениеШкалы = Макс(ДоходПоКварталу, РасходПоКварталу);
					КонецЕсли;
					Если НачалоМесяца(ДатаНачала) > ДатаОкончания Тогда
						Прервать;
					КонецЕсли;
					ДатаНачала = ДобавитьМесяц(ДатаНачала, 1);
				КонецЦикла;
				ГистограммаПоПериодам.УстановитьЗначение(Точка,СерияДоходы,ДоходПоКварталу);
				ГистограммаПоПериодам.УстановитьЗначение(Точка,СерияРасходы,РасходПоКварталу);
			КонецЦикла;
			ТипПериода = Перечисления.Периодичность.Квартал;
		Иначе
			Пока НачалоМесяца(ДатаНачала) <= ДатаОкончания Цикл
				ТекГод = ФорматированнаяДатаПоГоду(ДатаНачала);
				Точка = ГистограммаПоПериодам.УстановитьТочку(ТекГод);
				СписокДатИзГистограммы.Добавить(ТекГод, ДатаНачала);
				ДоходПоГоду = 0;
				РасходПоГоду = 0;
				Пока ФорматированнаяДатаПоГоду(ДатаНачала) = ТекГод Цикл
					Результат = ПолучитьДанныеЗаМесяц(ДатаНачала,МаксЗначениеШкалы);
					ДоходПоГоду = ДоходПоГоду + Результат.Доход;
					РасходПоГоду = РасходПоГоду + Результат.Расход;
					Если Макс(ДоходПоГоду, РасходПоГоду) > МаксЗначениеШкалы Тогда
						МаксЗначениеШкалы = Макс(ДоходПоГоду, РасходПоГоду);
					КонецЕсли;
					Если НачалоМесяца(ДатаНачала) > ДатаОкончания Тогда
						Прервать;
					КонецЕсли;
					ДатаНачала = ДобавитьМесяц(ДатаНачала, 1);
				КонецЦикла;
				ГистограммаПоПериодам.УстановитьЗначение(Точка,СерияДоходы,ДоходПоГоду);
				ГистограммаПоПериодам.УстановитьЗначение(Точка,СерияРасходы,РасходПоГоду);
			КонецЦикла;
			ТипПериода = Перечисления.Периодичность.Год;
		КонецЕсли;
	КонецЕсли;
	СуммаДоходов = ДоходыИРасходы.Итог("Доход");
	СуммаРасходов = ДоходыИРасходы.Итог("Расход");
	
	ГистограммаПоПериодам.ОсьЗначений.МаксимальноеЗначение = МаксЗначениеШкалы * 1.2;
	ГистограммаПоПериодам.ОсьЗначений.СпособОпределенияМаксимальногоЗначения = 
		СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;
	
	Точка = КольцеваяДиаграмма.УстановитьТочку("");
	Серия = КольцеваяДиаграмма.УстановитьСерию(ПолучитьДоход());
	Серия.Цвет = ЦветаСтиля.ЦветДоходаВПроекте;
	КольцеваяДиаграмма.УстановитьЗначение(Точка,Серия,СуммаДоходов);
	Серия = КольцеваяДиаграмма.УстановитьСерию(ПолучитьРасход());
	Серия.Цвет = ЦветаСтиля.ЦветРасходаВПроекте;
	КольцеваяДиаграмма.УстановитьЗначение(Точка,Серия,СуммаРасходов);
	
	Элементы.Доход.Заголовок = ФорматированныйДоходИлиРасход(СуммаДоходов, Истина);
	Элементы.Расход.Заголовок = ФорматированныйДоходИлиРасход(СуммаРасходов, Ложь);
	Элементы.ПрибыльУбыток.Заголовок = ФорматированнаяПрибыльИлиУбыток(СуммаДоходов, СуммаРасходов);
	Элементы.Рентабельность.Заголовок = ФорматированнаяРентабельность(СуммаДоходов, СуммаРасходов);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЗаМесяц(ДатаНачала, МаксЗначениеШкалы)
	МаксПоПериоду = МаксЗначениеШкалы;
	ДоходПоПериоду = 0;
	РасходПоПериоду = 0;
	СписокДатИзГистограммы.Добавить(Год(ДатаНачала), ДатаНачала);
	ДанныеТаблицы = ДоходыИРасходы.Выгрузить();
	СтрокиИзПериода = ДанныеТаблицы.НайтиСтроки(Новый Структура("Период", НачалоМесяца(ДатаНачала)));
	Если СтрокиИзПериода.Количество() > 0 Тогда
		Для Каждого СтрокаТЗ Из СтрокиИзПериода Цикл
			Если СтрокаТЗ.Доход > 0 И СтрокаТЗ.Расход > 0 Тогда
				ДоходПоПериоду = ДоходПоПериоду + СтрокаТЗ.Доход;
				РасходПоПериоду = РасходПоПериоду + СтрокаТЗ.Расход;
			ИначеЕсли СтрокаТЗ.Доход > 0 Тогда
				ДоходПоПериоду = ДоходПоПериоду + СтрокаТЗ.Доход;
			ИначеЕсли СтрокаТЗ.Расход > 0 Тогда
				РасходПоПериоду = РасходПоПериоду + СтрокаТЗ.Расход;
			КонецЕсли;
			Если Макс(ДоходПоПериоду, РасходПоПериоду) > МаксПоПериоду Тогда
				МаксПоПериоду = Макс(ДоходПоПериоду, РасходПоПериоду);
			КонецЕсли;
		КонецЦикла;
		СписокДатИзГистограммы.Добавить(ФорматированнаяДатаПоМесяцу(ДатаНачала),НачалоМесяца(ДатаНачала));
	КонецЕсли;;
	Результат = Новый Структура;
	Результат.Вставить("Доход", ДоходПоПериоду);
	Результат.Вставить("Расход", РасходПоПериоду);
	Результат.Вставить("МаксимальноеЗначение", МаксПоПериоду);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьДиаграммыТестовымиЗначениями()
	
	Элементы.ГистограммаПоПериодам.ТолькоПросмотр = Истина;
	Элементы.КольцеваяДиаграмма.ТолькоПросмотр = Истина;
	
	ГенераторЧисел = Новый ГенераторСлучайныхЧисел;
	СуммаДоходов = 0;
	СуммаРасходов = 0;
	
	КольцеваяДиаграмма.ОтображатьЛегенду = Ложь;
	КольцеваяДиаграмма.ОбластьЗаголовка.Текст = ПолучитьДоходыИРасходы();
	КольцеваяДиаграмма.ОбластьЗаголовка.Верх = 0.31;
	КольцеваяДиаграмма.ОбластьЗаголовка.Лево = 0.42;
	
	СерияДоходы = ГистограммаПоПериодам.УстановитьСерию(ПолучитьДоход());
	СерияДоходы.Цвет = ЦветНетДанных(Ложь);
	СерияРасходы = ГистограммаПоПериодам.УстановитьСерию(ПолучитьРасход());
	СерияРасходы.Цвет = ЦветНетДанных(Истина);
	ТекДата = НачалоГода(ТекущаяДатаСеанса());
	
	МассивМесяцев = Новый Массив;
	
	Для НомерМесяца = 0 По 11 Цикл
		СтрокаСМесяцем = СтрШаблон("%1 %2",Лев(Формат(ТекДата,"ДФ=ММММ"),3), Формат(ТекДата,"ДФ=гг"));
		МассивМесяцев.Добавить(СтрокаСМесяцем);
		ТекДата = ДобавитьМесяц(ТекДата,1);
	КонецЦикла;
	
	Для Каждого Месяц Из МассивМесяцев Цикл
		Точка = ГистограммаПоПериодам.УстановитьТочку(Месяц);
		Доход = ГенераторЧисел.СлучайноеЧисло(5000, 100000);
		Расход = ГенераторЧисел.СлучайноеЧисло(5000, 100000);
		СуммаДоходов = СуммаДоходов + Доход;
		СуммаРасходов = СуммаРасходов + Расход;
		ГистограммаПоПериодам.УстановитьЗначение(Точка, СерияДоходы, Доход);
		ГистограммаПоПериодам.УстановитьЗначение(Точка, СерияРасходы, Расход);
	КонецЦикла;
	
	Точка = КольцеваяДиаграмма.УстановитьТочку("");
	Серия = КольцеваяДиаграмма.УстановитьСерию(ПолучитьДоход());
	Серия.Цвет = ЦветНетДанных(Ложь);
	КольцеваяДиаграмма.УстановитьЗначение(Точка,Серия,СуммаДоходов);
	Серия = КольцеваяДиаграмма.УстановитьСерию(ПолучитьРасход());
	Серия.Цвет = ЦветНетДанных(Истина);
	КольцеваяДиаграмма.УстановитьЗначение(Точка,Серия,СуммаРасходов);
	
КонецПроцедуры

&НаСервере
Процедура ПерестроитьКольцевуюДиаграмму(Период, ТипОборота)
	
	ДоходЗаПериод = 0;
	РасходЗаПериод = 0;
	
	КольцеваяДиаграмма.Очистить();
	КольцеваяДиаграмма.ОтображатьЛегенду = Истина;
	КольцеваяДиаграмма.ОбластьЗаголовка.Текст = ВРег(Строка(ТипОборота));
	КольцеваяДиаграмма.ОбластьЗаголовка.Низ = 0.01;
	КольцеваяДиаграмма.ОбластьЗаголовка.Верх = 0.96;
	КольцеваяДиаграмма.ОбластьЗаголовка.Лево = 0.17;
	КольцеваяДиаграмма.ОбластьЗаголовка.Расположение = РасположениеОбластиЗаголовкаДиаграммы.УказываетсяРасположение;
	ДанныеТаблицы = ДоходыИРасходы.Выгрузить();
	СтрокиИзПериода = ДанныеТаблицы.НайтиСтроки(Новый Структура("Период", НачалоМесяца(Период)));
	Точка = КольцеваяДиаграмма.УстановитьТочку("");
	Для Каждого СтрокаТЗ Из СтрокиИзПериода Цикл
		Если ТипОборота = ПолучитьДоход() Тогда
			Если СтрокаТЗ.Доход > 0 Тогда
				Серия = КольцеваяДиаграмма.УстановитьСерию(СтрокаТЗ.Статья);
				КольцеваяДиаграмма.УстановитьЗначение(Точка,Серия,СтрокаТЗ.Доход);
			КонецЕсли;
		Иначе
			Если СтрокаТЗ.Расход > 0 Тогда
				Серия = КольцеваяДиаграмма.УстановитьСерию(СтрокаТЗ.Статья);
				КольцеваяДиаграмма.УстановитьЗначение(Точка,Серия,СтрокаТЗ.Расход);
			КонецЕсли;
		КонецЕсли;
		ДоходЗаПериод = ДоходЗаПериод + СтрокаТЗ.Доход;
		РасходЗаПериод = РасходЗаПериод + СтрокаТЗ.Расход;
	КонецЦикла;
	БылаПерестроенаКольцеваяДиаграмма = Истина;
	
	Элементы.Доход.Заголовок = ФорматированныйДоходИлиРасход(ДоходЗаПериод, Истина);
	Элементы.Расход.Заголовок = ФорматированныйДоходИлиРасход(РасходЗаПериод, Ложь);
	Элементы.ПрибыльУбыток.Заголовок = ФорматированнаяПрибыльИлиУбыток(ДоходЗаПериод, РасходЗаПериод);
	Элементы.Рентабельность.Заголовок = ФорматированнаяРентабельность(ДоходЗаПериод, РасходЗаПериод);
	
	Если ЭтоМобильныйКлиент Тогда
		КольцеваяДиаграмма.ОбластьЗаголовка.Лево = 0.42;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерестроитьГистограммуКМесяцам(Период, ЭтоГод)
	
	МаксЗначениеШкалы = 0;
	
	ГистограммаПоПериодам.Очистить();
	СерияДоходы = ГистограммаПоПериодам.УстановитьСерию(ПолучитьДоход());
	СерияДоходы.Цвет = ЦветаСтиля.ЦветДоходаВПроекте;
	СерияРасходы = ГистограммаПоПериодам.УстановитьСерию(ПолучитьРасход());
	СерияРасходы.Цвет = ЦветаСтиля.ЦветРасходаВПроекте;
	
	Если ЭтоГод Тогда
		ДатаНачала = НачалоГода(Период);
		ДатаОкончания = КонецГода(Период);
	Иначе
		ДатаНачала = НачалоКвартала(Период);
		ДатаОкончания = КонецКвартала(Период);
	КонецЕсли;
	
	Пока НачалоМесяца(ДатаНачала) <= ДатаОкончания Цикл
		Точка = ГистограммаПоПериодам.УстановитьТочку(ФорматированнаяДатаПоМесяцу(ДатаНачала));
		Результат = ПолучитьДанныеЗаМесяц(ДатаНачала,МаксЗначениеШкалы);
		ДатаНачала = ДобавитьМесяц(ДатаНачала,1);
		Если Результат.МаксимальноеЗначение > МаксЗначениеШкалы Тогда
			МаксЗначениеШкалы = Результат.МаксимальноеЗначение;
		КонецЕсли;
		ГистограммаПоПериодам.УстановитьЗначение(Точка,СерияДоходы,Результат.Доход);
		ГистограммаПоПериодам.УстановитьЗначение(Точка,СерияРасходы,Результат.Расход);
	КонецЦикла;
	
	ГистограммаПоПериодам.ОсьЗначений.МаксимальноеЗначение = МаксЗначениеШкалы * 1.2;
	ГистограммаПоПериодам.ОсьЗначений.СпособОпределенияМаксимальногоЗначения =
		СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;
	
	ТипПериода = Перечисления.Периодичность.Месяц;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматированныйДоходИлиРасход(СуммаОперации, ЭтоДоход)
	
	ТекстТипаОперации = ?(ЭтоДоход, ПолучитьДоход() + ":", ПолучитьРасход() + ":");
	СуммаОперацииСтрокой = Формат(СуммаОперации, "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
	ПозицияРазделителя = СтрНайти(СуммаОперацииСтрокой, ",");
	
	ФорматРезультата = НСтр("ru = '<span style=""color : ТекстВторостепеннойНадписи"">%1 <a href=""ДоходыИРасходы"">%2<span style=""color : ТекстВторостепеннойНадписи; font : ШрифтДробнойЧастиДенегПодчеркнутый"">%3</span></a> <span style=""color : ТекстВторостепеннойНадписи"">%4</span>'");
	ФорматированныйТекст = СтроковыеФункции.ФорматированнаяСтрока(ФорматРезультата,ТекстТипаОперации,
		Лев(СуммаОперацииСтрокой, ПозицияРазделителя),Сред(СуммаОперацииСтрокой, ПозицияРазделителя+1),
		Константы.ВалютаУчета.Получить().СимвольноеПредставление);
	
	Возврат ФорматированныйТекст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФорматированнаяРентабельность(СуммаДоходов, СуммаРасходов)
	
	Если СуммаДоходов > 0 Тогда
		ЗначениеРентабельности = Формат(((СуммаДоходов - СуммаРасходов) * 100)/СуммаДоходов,НСтр("ru= 'ЧДЦ=0; ЧФ=""Ч%""; ЧН='"));
	ИначеЕсли СуммаДоходов = 0 И СуммаРасходов = 0 Тогда
		ЗначениеРентабельности = ПолучитьНетДанных();
	ИначеЕсли СуммаРасходов > 0 И СуммаДоходов = 0 Тогда
		ЗначениеРентабельности = Формат(-100,НСтр("ru = 'ЧДЦ=0; ЧФ=""Ч%""'"));
	КонецЕсли;
	
	ФорматРезультата = НСтр("ru = '<span style=""color : ТекстВторостепеннойНадписи"">%1 <a href=""ДоходыИРасходы"">%2</a></span>'");
	ФорматированныйТекст = СтроковыеФункции.ФорматированнаяСтрока(ФорматРезультата,ПолучитьРентабельность(),ЗначениеРентабельности);
	
	Возврат ФорматированныйТекст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФорматированнаяПрибыльИлиУбыток(СуммаДоходов, СуммаРасходов)
	
	РазностьСумм = СуммаДоходов - СуммаРасходов;
	РазностьСуммСтрокой = Формат(РазностьСумм, "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
	ПозицияРазделителя = СтрНайти(РазностьСуммСтрокой, ",");
	
	ТипОборота = ?(РазностьСумм > 0, ПолучитьПрибыльИлиУбыток(Истина), ПолучитьПрибыльИлиУбыток(Ложь));
	
	ФорматРезультата = НСтр("ru = '<span style=""color : ТекстВторостепеннойНадписи"">%1 <a href=""ДоходыИРасходы"">%2<span style=""color : ТекстВторостепеннойНадписи; font : ШрифтДробнойЧастиДенегПодчеркнутый"">%3</span></a> <span style=""color : ТекстВторостепеннойНадписи"">%4</span>'");
	ФорматированныйТекст = СтроковыеФункции.ФорматированнаяСтрока(ФорматРезультата,ТипОборота,Лев(РазностьСуммСтрокой, ПозицияРазделителя),
		Сред(РазностьСуммСтрокой, ПозицияРазделителя+1),Константы.ВалютаУчета.Получить().СимвольноеПредставление);
	
	Возврат ФорматированныйТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяДатаПоМесяцу(ТекДата)
	
	ДатаДляФорматирования = Формат(ТекДата,НСтр("ru = 'ДФ=''ММММ гг'''"));
	Месяц = Лев(ДатаДляФорматирования, 3);
	Год = Прав(ДатаДляФорматирования, 2);
	Возврат СтрШаблон("%1 %2", Месяц, Год);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяДатаПоКварталу(ТекДата)
	
	ЭлементыДаты = СтрРазделить(Формат(ТекДата, НСтр("ru = 'ДФ=''к гггг'''")), " ", Ложь);
	ФорматированнаяДата = СтрШаблон("%1 %2 %3", ЭлементыДаты[0], НСтр("ru= 'квартал'"), ЭлементыДаты[1]);
	Возврат ФорматированнаяДата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяДатаПоГоду(ТекДата)
	
	Возврат СтрЗаменить(Строка(Год(ТекДата)), Символы.НПП, "");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветНетДанных(ЭтоТемный)
	
	Если ЭтоТемный Тогда
		Возврат Новый Цвет(180,180,180);
	Иначе
		Возврат Новый Цвет(200,200,200);
	КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНетДанных()
	
	Возврат НСтр("ru='Нет данных'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРентабельность() 
	
	Возврат НСтр("ru='Рентабельность:'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПрибыльИлиУбыток(ЭтоПрибыль)
	
	Возврат ?(ЭтоПрибыль, НСтр("ru = 'Прибыль:'"), НСтр("ru = 'Убыток:'"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоход()
	
	Возврат НСтр("ru = 'Доход'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРасход()
	
	Возврат НСтр("ru = 'Расход'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоходыИРасходы()
	
	Возврат НСтр("ru = 'ДОХОДЫ И РАСХОДЫ'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоМесяцевМеждуДатами(ДатаНачала, ДатаОкончания)
	
	МесяцНачала = Месяц(ДатаНачала);
	МесяцОкончания = Месяц(ДатаОкончания);
	ГодовМеждуДатами = Год(ДатаОкончания) - Год(ДатаНачала);
	Возврат МесяцОкончания - МесяцНачала + ГодовМеждуДатами * 12;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуНачала(ДатаНачалаИзДокумента, ДоходыИРасходы = Неопределено) 
	
	Если ЗначениеЗаполнено(ДатаНачалаИзДокумента) Тогда
		ДатаНачала = ДатаНачалаИзДокумента;
	Иначе
		Если ЗначениеЗаполнено(ДоходыИРасходы) Тогда
			Документ = ДоходыИРасходы.Получить(0);
			ДатаНачала = Документ.Период;
		Иначе
			Возврат '00010101';
		КонецЕсли;
	КонецЕсли;
	Возврат ДатаНачала;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуОкончания(ДатаОкончанияИзДокумента, ТекДатаСеанса = Неопределено, ДоходыИРасходы = Неопределено)
	Если ЗначениеЗаполнено(ДатаОкончанияИзДокумента) Тогда
		ДатаОкончания = ДатаОкончанияИзДокумента;
	Иначе
		Если ЗначениеЗаполнено(ДоходыИРасходы) Тогда
			Документ = ДоходыИРасходы.Получить(ДоходыИРасходы.Количество() - 1);
			ДатаОкончания = Документ.Период;
		Иначе
			Возврат ТекДатаСеанса;
		КонецЕсли;
	КонецЕсли;
	Возврат ДатаОкончания;
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаВариантаОтчета(ИмяОтчета, КлючВарианта)
	
	Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Отчет." + ИмяОтчета);
	Возврат ВариантыОтчетов.ВариантОтчета(Отчет, КлючВарианта);
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКОтчету()

	Период = Новый СтандартныйПериод;
	ОтборРасшифровки = Новый Структура;
	ОтборРасшифровки.Вставить("Проект", Объект.Ссылка);

	Если КольцеваяДиаграмма.ОбластьЗаголовка.Текст = ПолучитьДоходыИРасходы() Тогда
		Период.ДатаНачала = ПолучитьДатуНачала(Объект.ДатаНачала, ДоходыИРасходы);
		Период.ДатаОкончания = КонецМесяца(ПолучитьДатуОкончания(Объект.ДатаОкончания, ОбщегоНазначенияКлиент.ДатаСеанса(), ДоходыИРасходы));
	Иначе
		Период.ДатаНачала = НачалоМесяца(СписокДатИзГистограммы[СписокДатИзГистограммы.Количество() - 1].Представление);
		Период.ДатаОкончания = КонецМесяца(СписокДатИзГистограммы[СписокДатИзГистограммы.Количество() - 1].Представление);
	КонецЕсли;
	ОтборРасшифровки.Вставить("СтПериод", Период);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОткрытия.Вставить("Отбор", ОтборРасшифровки);
	Вариант = СсылкаВариантаОтчета("ДоходыИРасходы", "ДоходыИРасходыПоПроектам");
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, Вариант, ПараметрыОткрытия);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
