#Область ОписаниеПеременных

&НаКлиенте
Перем СтэкСтраниц; // История переходов для возврата по кнопке назад

&НаКлиенте
Перем ДанныеСчитывателя; // Кэш данных считывателя магнитной карты

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Функция возвращает любой реквизит вида дисконтной карты.
//
// Параметры:
//  Владелец - СправочникСсылка.ВидыДисконтныхКарт - вид дисконтной карты.
//  Реквизит - Строка - Имя реквизита владельца.
//
&НаСервереБезКонтекста
Функция ПолучитьРеквизитВидаДисконтнойКарты(Владелец, Реквизит)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДисконтныхКарт."+Реквизит+" КАК Реквизит
		|ИЗ
		|	Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
		|ГДЕ
		|	ВидыДисконтныхКарт.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Реквизит;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ЭтоИменнаяКарта(Объект.ВидДисконтнойКарты)()

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	РежимОчисткиДисконтнойКартыВДокументе = "ОчиститьКарту";
	РежимСчитыванияКарты = "СчитываниеКарты";
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если 1=0 Тогда
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект); // для проверки внедрения БСП
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	// УНФ.ПанельКонтактнойИнформации
	// Контактная информация потребуется для создания именных дисконтных карт, при выборе контрагента - владельца карты
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "ГруппаНомерТелефонаКонтактнаяИнформация");	
	Элементы.ДанныеПанелиКонтактнойИнформацииПиктограмма.Видимость = Ложь;
	// Конец УНФ.ПанельКонтактнойИнформации
	
	
	Контрагент = Параметры.Контрагент;
	
	Если ОсновнойТипКода.Пустая() Тогда
		ОсновнойТипКода = ДисконтныеКартыУНФСервер.ПолучитьОсновнойТипКодаДисконтнойКарты();
	КонецЕсли;
	
	ИспользоватьРучнойВвод = Истина;
	Если Параметры.Свойство("НеИспользоватьРучнойВвод") Тогда
		ИспользоватьРучнойВвод = Не Параметры.НеИспользоватьРучнойВвод; 
		Элементы.ГруппаКодКарты.Видимость = ИспользоватьРучнойВвод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КодКарты) Тогда
		
		// При считывании в форме списка было найдено несколько карт с данным кодом,
		// требуется предложить карты на выбор пользователю.
		ОбработатьПолученныйКодНаСервере(Параметры.КодКарты, Параметры.ТипКода, Истина);
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаВыборДисконтнойКарты;
		
	ИначеЕсли Параметры.Свойство("ДисконтнаяКарта") И ЗначениеЗаполнено(Параметры.ДисконтнаяКарта) Тогда
		
		// Если в документе уже выбрана ДК, заполним предварительно ее данные, и позволим пользователю отменить ввод карты.
		ДисконтнаяКартаДляЗаполнения = Параметры.ДисконтнаяКарта;
		
	Иначе
		
		Если ЗначениеЗаполнено(ОсновнойТипКода) Тогда
			ТипКода = ОсновнойТипКода;
		Иначе
			ТипКода = Перечисления.ТипыКодовКарт.Штрихкод;
		КонецЕсли;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСчитываниеДисконтнойКарты;
		
	КонецЕсли;
	
	Элементы.СтраницыКнопкиНазад.ТекущаяСтраница = Элементы.СтраницыКнопкиНазад.ПодчиненныеЭлементы.КнопкаНазадОтсутствует;
	Элементы.СтраницыКнопкиДалее.ТекущаяСтраница = Элементы.СтраницыКнопкиДалее.ПодчиненныеЭлементы.КнопкаГотово;
	
   	ОбновитьСпособыВводаКарты();
	
	НастроитьПолеВводаТелефонаПочты();
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпособыВводаКарты()
	НадписьСчитываниеДисконтнойКарты = ПолучитьТекстПодсказки(ИспользоватьРучнойВвод, РежимСчитыванияКарты, ОсновнойТипКода);
	Если Не ИспользоватьРучнойВвод Тогда
		ТипыДоступныеДляВводаТолькоТорговымОборудованием = Новый Массив;
		ТипыДоступныеДляВводаТолькоТорговымОборудованием.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод"));
		ТипыДоступныеДляВводаТолькоТорговымОборудованием.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод"));
		Элементы.ТипКода.СписокВыбора.ЗагрузитьЗначения(ТипыДоступныеДляВводаТолькоТорговымОборудованием);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпособыВводаКартыКлиент()
	НадписьСчитываниеДисконтнойКарты = ПолучитьТекстПодсказки(ИспользоватьРучнойВвод, РежимСчитыванияКарты, ОсновнойТипКода);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстПодсказки(ИспользоватьРучнойВвод, РежимСчитыванияКарты, ОсновнойТипКода)
	РежимОчисткиДисконтнойКартыВДокументе = "ОчиститьКарту";

	Если РежимСчитыванияКарты = РежимОчисткиДисконтнойКартыВДокументе Тогда
		Текст = НСтр("ru = 'Дисконтна карта в документе не будет применена
		                   |нажмите ""Готово"" для отмены скидок по дисконтной карте в документе'");
	ИначеЕсли ИспользоватьРучнойВвод Тогда
		Если Не ЗначениеЗаполнено(ОсновнойТипКода) Тогда
			Текст = НСтр("ru = 'Считайте дисконтную карту при помощи сканера штрихкода
			                   |(считывателя магнитных карт) или введите код вручную'");
		ИначеЕсли ОсновнойТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод") Тогда
			Текст = НСтр("ru = 'Считайте дисконтную карту при помощи считывателя
			                   |магнитных карт или введите магнитный код вручную'");
		ИначеЕсли ОсновнойТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод") Тогда
			Текст = НСтр("ru = 'Считайте дисконтную карту при помощи сканера
			                   |штрихкода или введите штрихкод вручную'");
		ИначеЕсли ОсновнойТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда
			Текст = НСтр("ru = 'Введите номер телефона покупателя
			                   |при помощи клавиатуры вручную'");
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ОсновнойТипКода) Тогда
			Текст = НСтр("ru = 'Считайте дисконтную карту при помощи сканера штрихкода
			                   |(считывателя магнитных карт)'");
		ИначеЕсли ОсновнойТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод") Тогда
			Текст = НСтр("ru = 'Считайте дисконтную карту при помощи считывателя
			                   |магнитных карт'");
		ИначеЕсли ОсновнойТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод") Тогда
			Текст = НСтр("ru = 'Считайте дисконтную карту при помощи сканера
			                   |штрихкода'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтэкСтраниц = Новый Массив;
	
	Если ЗначениеЗаполнено(ДисконтнаяКартаДляЗаполнения) Тогда
		// Дисконтная карта в документе уже была введена, заполним форму исходя из нее, и позволим пользователю убрать ее.
		ПараметрыДК = РеквизитыДисконтнойКарты(ДисконтнаяКартаДляЗаполнения);
		ДисконтнаяКартаДляЗаполнения = Неопределено;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыДК);
	Иначе
		ОбновитьВидимостьВводаНомераТелефона();
	КонецЕсли;
	СформироватьЗаголовокФормы();
	Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.НомерТелефона;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.КодКарты;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода,СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыДисконтнойКарты(ДисконтнаяКарта)
	ДанныеКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДисконтнаяКарта, "КодКартыШтрихкод, КодКартыМагнитный, Владелец.ТипКарты");
	Результат = Новый Структура();
	Если ДанныеКарты.ВладелецТипКарты = ПредопределенноеЗначение("Перечисление.ТипыКарт.Магнитная") Тогда
		Результат.Вставить("КодКарты", ДанныеКарты.КодКартыМагнитный);
		Результат.Вставить("ТипКода", ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод"));
	Иначе
		Результат.Вставить("КодКарты", ДанныеКарты.КодКартыШтрихкод);
		Результат.Вставить("ТипКода", ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод"));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ЗаблокироватьВводДанных Тогда
			Возврат;
		КонецЕсли;
		Если ИмяСобытия = "ScanData" Тогда
			ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод");
			ОбработатьШтрихкоды(ДисконтныеКартыУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
			Параметр.Очистить();
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод");
			ОбработатьДанныеСчитывателяМагнитныхКарт(Параметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "ВладелецФормы")
		И Источник.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента"
		И Источник.ВладелецФормы = ЭтотОбъект
		И ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр) Тогда
		//Записан владелец карты		
		Объект.ВладелецКарты = Параметр;
		ПерейтиНаСтраницу(Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеДисконтнойКарты);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события Очистка элемента ТипКода.
//
&НаКлиенте
Процедура ТипКодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события Выбор в таблице значений НайденныеДисконтныеКарты.
//
&НаКлиенте
Процедура НайденныеДисконтныеКартыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ДалееОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВидДисконтнойКарты.
//
&НаКлиенте
Процедура ВидДисконтнойКартыПриИзменении(Элемент)
	
	НастройкаВидимостиЭлементовПоВидуКартыНаСервере();
	Объект.Наименование = ДисконтныеКартыУНФВызовСервера.УстановитьНаименованиеДисконтнойКарты(Объект.Владелец, Объект.ВладелецКарты, Объект.КодКартыШтрихкод, Объект.КодКартыМагнитный);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВладелецКарты.
//
&НаКлиенте
Процедура ВладелецКартыПриИзменении(Элемент)
	
	Объект.Наименование = ДисконтныеКартыУНФВызовСервера.УстановитьНаименованиеДисконтнойКарты(Объект.Владелец, Объект.ВладелецКарты, Объект.КодКартыШтрихкод, Объект.КодКартыМагнитный);	
	ОбновитьПанельКонтактнойИнформацииСервер();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерТелефонаКонтрагентаСоответствуетПоиску(ПолныйНомерТелефона, ИскомыйНомер)
	
	Результат = Ложь;

	ЗапросПроверкиТелефона = Новый Запрос;
	ЗапросПроверкиТелефона.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК ПроверкаПройдена
	|ГДЕ
	|	&НомерТелефона ПОДОБНО &ИскомыйНомерТелефона";
	ЗапросПроверкиТелефона.УстановитьПараметр("НомерТелефона", ПолныйНомерТелефона);
	ПарметрДляПоиска = ИскомыйНомер;
	Если СтрНайти(ИскомыйНомер,"*") = 1 Тогда
		ПарметрДляПоиска = "%" + Прав(ПарметрДляПоиска, СтрДлина(ПарметрДляПоиска) - 1);
	ИначеЕсли Не СтрНайти(ИскомыйНомер,"%") = 1 Тогда
		ПарметрДляПоиска = "%" + ПарметрДляПоиска;
	КонецЕсли;
	ЗапросПроверкиТелефона.УстановитьПараметр("ИскомыйНомерТелефона", ПарметрДляПоиска);
	Если Не ЗапросПроверкиТелефона.Выполнить().Пустой() Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведенияОТелефоне(Контрагенты)
	
	Результат = Новый Соответствие();
	ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКИ.Дата = ТекущаяДата();
	ОтборКИ.ТипыКонтактнойИнформации.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Контрагенты, ОтборКИ);
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		КонтактыКонтрагента = Результат.Получить(СтрокаКИ.Объект);
		Если КонтактыКонтрагента = Неопределено Тогда
			Результат.Вставить(СтрокаКИ.Объект, Новый Массив()); 
			КонтактыКонтрагента = Результат.Получить(СтрокаКИ.Объект);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
			СведенияОТелефоне = УправлениеКонтактнойИнформацией.СведенияОТелефоне(СтрокаКИ.ЗначенияПолей);
			КонтактыКонтрагента.Добавить(СведенияОТелефоне);
		Иначе
			КонтактыКонтрагента.Добавить(СтрокаКИ.Представление);
		КонецЕсли;		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Процедура - обработчик события ПриИзменении элемента КодКартыШтрихкод.
//
&НаКлиенте
Процедура КодКартыШтрихкодПриИзменении(Элемент)
	
	Объект.Наименование = ДисконтныеКартыУНФВызовСервера.УстановитьНаименованиеДисконтнойКарты(Объект.Владелец, Объект.ВладелецКарты, Объект.КодКартыШтрихкод, Объект.КодКартыМагнитный);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента КодКартыМагнитный.
//
&НаКлиенте
Процедура КодКартыМагнитныйПриИзменении(Элемент)
	
	Объект.Наименование = ДисконтныеКартыУНФВызовСервера.УстановитьНаименованиеДисконтнойКарты(Объект.Владелец, Объект.ВладелецКарты, Объект.КодКартыШтрихкод, Объект.КодКартыМагнитный);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

// Процедура - обработчик команды Назад формы.
//
&НаКлиенте
Процедура Назад(Команда)
	
	Если СтэкСтраниц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = СтэкСтраниц[СтэкСтраниц.Количество()-1];
	СтэкСтраниц.Удалить(СтэкСтраниц.Количество()-1);
	
	Если СтэкСтраниц.Количество() = 0 Тогда
		Элементы.СтраницыКнопкиНазад.ТекущаяСтраница = Элементы.СтраницыКнопкиНазад.ПодчиненныеЭлементы.КнопкаНазадОтсутствует;
	КонецЕсли;
	
	Элементы.СтраницыКнопкиДалее.ТекущаяСтраница = Элементы.СтраницыКнопкиДалее.ПодчиненныеЭлементы.КнопкаГотово;
	
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

// Процедура - обработчик команды Далее формы.
//
&НаКлиенте
Процедура Далее(Команда)
	
	ОтключитьОбработчикОжидания("ДалееОбработчикОжидания");
	
	ОчиститьСообщения();
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСчитываниеДисконтнойКарты Тогда
		Если РежимСчитыванияКарты = РежимОчисткиДисконтнойКартыВДокументе Тогда
			ОчиститьКарту(Неопределено);
			Возврат;
		КонецЕсли;

		ТекстСообщения = Неопределено;
		ДанныеПоиска = КодКарты;
		ИмяРеквизита = "КодКарты";
		Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона")Тогда
			ДанныеПоиска = НомерТелефона;
			ИмяРеквизита = "НомерТелефона";
			Если  Не ЗначениеЗаполнено(НомерТелефона) Тогда
				ТекстСообщения = НСтр("ru = 'Номер телефона не заполнен.'");			
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(КодКарты) Тогда
			Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод") Тогда
				ТекстСообщения = НСтр("ru = 'Штрихкод не заполнен.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Магнитный код не заполнен.'");
			КонецЕсли;
		КонецЕсли;
		Если Не ТекстСообщения = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				,
				ИмяРеквизита);
			
			Возврат;
		КонецЕсли;
		ОбработатьПолученныйКодНаКлиенте(ДанныеПоиска, ТипКода, Ложь);
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаВыборДисконтнойКарты Тогда
		
		ТекущиеДанные = Элементы.НайденныеДисконтныеКарты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
				
				ОбработатьВыборДисконтнойКарты(ТекущиеДанные);
			Иначе
				
				Объект.Владелец = ТекущиеДанные.ВидКарты;
				
				Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
					Объект.ВладелецКарты = ТекущиеДанные.Контрагент;
				ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
					Объект.ВладелецКарты = Контрагент;
				КонецЕсли;
				Объект.КодКартыМагнитный = ТекущиеДанные.МагнитныйКод;
				Объект.КодКартыШтрихкод = ТекущиеДанные.Штрихкод;
				
				НастройкаВидимостиЭлементовПоВидуКартыНаСервере();
				Объект.Наименование = ДисконтныеКартыУНФВызовСервера.УстановитьНаименованиеДисконтнойКарты(Объект.Владелец, Объект.ВладелецКарты, Объект.КодКартыШтрихкод, Объект.КодКартыМагнитный);
				
				Если ТекущиеДанные.ЭтоИменнаяКарта И Не ЗначениеЗаполнено(Объект.ВладелецКарты) Тогда
					СозданиеПокупателяТелефон = НомерТелефона;
					ПерейтиНаСтраницу(Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеКонтрагента);	
					Если ЗначениеЗаполнено(СозданиеПокупателяТелефон) Тогда
						ОткрытьРедактированиеТелефонаВДиалоге();
					КонецЕсли;
				Иначе
					ПерейтиНаСтраницу(Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеДисконтнойКарты);	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеКонтрагента Тогда
		
		ОтменитьПереход = Ложь;
		Если Не ЗначениеЗаполнено(СозданиеПокупателяФИО) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Введите ФИО",, "СозданиеПокупателяФИО");
			ОтменитьПереход = Истина;
		КонецЕсли;
		ВидКИТелефон = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента");
		Если Не ЗначениеЗаполнено(СозданиеПокупателяТелефон) 
			И ЗначениеРеквизитаОбъекта(ВидКИТелефон, "ОбязательноеЗаполнение") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Введите телефон", ,"СозданиеПокупателяТелефон");
			ОтменитьПереход = Истина;
		КонецЕсли;
		ВидКИпочта = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтрагента");
		Если Не ЗначениеЗаполнено(СозданиеПокупателяEMail)
			И ЗначениеРеквизитаОбъекта(ВидКИпочта, "ОбязательноеЗаполнение") Тогда
			ОтменитьПереход = Истина;
			ОбщегоНазначенияКлиент.СообщитьПользователю("Введите Email",, "СозданиеПокупателяEMail");
		КонецЕсли;
		Если Не ОтменитьПереход
			И Не ЗначениеЗаполнено(Объект.ВладелецКарты) Тогда
			ДанныеВладельцаКарты = Новый Структура;
			ДанныеВладельцаКарты.Вставить("Клиент", СозданиеПокупателяФИО);
			ДанныеВладельцаКарты.Вставить("АдресЭП", СозданиеПокупателяEMail);
			ДанныеВладельцаКарты.Вставить("НомерТелефона", СозданиеПокупателяТелефон);
			ДанныеВладельцаКарты.Вставить("ДатаРождения", СозданиеПокупателяДатаРождения);
			
			Объект.ВладелецКарты = СерверЛояльностиПоставщикДанныхУНФ.СоздатьВладельцаКарты(ДанныеВладельцаКарты);
			
		КонецЕсли;
		Если Не ОтменитьПереход Тогда	
			ПерейтиНаСтраницу(Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеДисконтнойКарты);
			ИндексСтраницыСозданияКонтрагента = СтэкСтраниц.Найти(Элементы.ГруппаСозданиеКонтрагента);
			Если ЗначениеЗаполнено(ИндексСтраницыСозданияКонтрагента) Тогда
				СтэкСтраниц.Удалить(ИндексСтраницыСозданияКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеДисконтнойКарты Тогда
		
		Если ЗаписатьДисконтнуюКарту() Тогда
		
			ПараметрыЗакрытия = Новый Структура("ДисконтнаяКарта, СчитанаДисконтнаяКарта", Объект.Ссылка, Ложь);
			Закрыть(ПараметрыЗакрытия);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКарту(Команда)
	ПараметрыЗакрытия = Новый Структура("ДисконтнаяКарта, СчитанаДисконтнаяКарта", ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка"), Ложь);
	Закрыть(ПараметрыЗакрытия);
КонецПроцедуры

// Функция записывает текущий объект и возвращает Истина в случае успешной записи
//
&НаСервере
Функция ЗаписатьДисконтнуюКарту()

	Если ПроверитьЗаполнение() Тогда
		Попытка
			Записать();
			Возврат Истина;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецПопытки;			
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Процедура формирует заголовок формы в зависимости от текущей страницы и выбранной строки в таблице значений найденных
// дисконтных карт или видов дисконтных карт
//
&НаКлиенте
Процедура СформироватьЗаголовокФормы()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСчитываниеДисконтнойКарты Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		Если ЗаблокироватьВводДанных Тогда
			ЭтаФорма.Заголовок = НСтр("ru = 'Отмена применения дисконтной карты'");
		Иначе
			ЭтаФорма.Заголовок = НСтр("ru = 'Считывание дисконтной карты'");
		КонецЕсли;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаВыборДисконтнойКарты Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ТекущиеДанные = Элементы.НайденныеДисконтныеКарты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
				ЭтаФорма.Заголовок = НСтр("ru = 'Выбор дисконтной карты'");
			Иначе
				ЭтаФорма.Заголовок = НСтр("ru = 'Выбор вида новой дисконтной карты'");
			КонецЕсли;
		Иначе
			Если НайденныеДисконтныеКарты.Количество() > 0 
				И Не ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда
				Если ЗначениеЗаполнено(НайденныеДисконтныеКарты[0].Ссылка) Тогда
					ЭтаФорма.Заголовок = НСтр("ru = 'Выбор дисконтной карты'");
				Иначе
					ЭтаФорма.Заголовок = НСтр("ru = 'Выбор вида новой дисконтной карты'");
				КонецЕсли;
			Иначе
				ЭтаФорма.Заголовок = НСтр("ru = 'Выбор дисконтной карты \ вида новой дисконтной карты'");
			КонецЕсли;
		КонецЕсли;			
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеДисконтнойКарты Тогда
	
		ЭтаФорма.АвтоЗаголовок = Истина;
		ЭтаФорма.Заголовок = "";
		Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда						
			ТекстПодсказки = НСтр("ru = 'Номер телефона владельца карты не совпадает с тем, 
			|по которому осуществлялся поиск: %1'");
			ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПодсказки, НомерТелефонаДляПоиска);
			Элементы.ДекорацияОшибкаНомерТелефонаНеправильныйНомер.Подсказка = ТекстПодсказки;
		КонецЕсли;

	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеКонтрагента Тогда
	
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = НСтр("ru = 'Ввод информации о покупателе'");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды СкопироватьШКвМК формы.
//
&НаКлиенте
Процедура СкопироватьШКвМК(Команда)
	
	Объект.КодКартыМагнитный = Объект.КодКартыШтрихкод;
	Объект.Наименование = ДисконтныеКартыУНФВызовСервера.УстановитьНаименованиеДисконтнойКарты(Объект.Владелец, Объект.ВладелецКарты, Объект.КодКартыШтрихкод, Объект.КодКартыМагнитный);
	
КонецПроцедуры

// Процедура - обработчик команды СкопироватьМКвШК формы.
//
&НаКлиенте
Процедура СкопироватьМКвШК(Команда)
	
	Объект.КодКартыШтрихкод = Объект.КодКартыМагнитный;
	Объект.Наименование = ДисконтныеКартыУНФВызовСервера.УстановитьНаименованиеДисконтнойКарты(Объект.Владелец, Объект.ВладелецКарты, Объект.КодКартыШтрихкод, Объект.КодКартыМагнитный);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСчитыванияКартыПриИзменении(Элемент)
	ЗаблокироватьВводДанных = Ложь;
	Если РежимСчитыванияКарты = РежимОчисткиДисконтнойКартыВДокументе Тогда
		ЗаблокироватьВводДанных  = Истина;
	КонецЕсли;
	Элементы.ГруппаКодКарты.Доступность = Не ЗаблокироватьВводДанных;
	
	ОбновитьСпособыВводаКартыКлиент();
	СформироватьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЮрлицо(Команда)
	КонтактнаяИнформацияДляДобавления = Новый Структура;
	МассивКИ = Новый Массив;
	Если ЗначениеЗаполнено(СозданиеПокупателяТелефон) Тогда
		ВидКИТелефон = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента");
		КонтактнаяИнформацияДляДобавления = Новый Структура;
		КонтактнаяИнформацияДляДобавления.Вставить("ДобавитьКИ", Истина);
		КонтактнаяИнформацияДляДобавления.Вставить("Представление", СозданиеПокупателяТелефон);
		Если ЗначениеЗаполнено(СозданиеПокупателяДанныеНомераТелефона) Тогда
			КонтактнаяИнформацияДляДобавления.Вставить("Значение",КонтактнаяИнформацияВJSON(СозданиеПокупателяДанныеНомераТелефона, ВидКИТелефон));
		Иначе
			КонтактнаяИнформацияДляДобавления.Вставить("Значение", КонтактнаяИнформацияВJSON(СозданиеПокупателяТелефон, ВидКИТелефон ));			
		КонецЕсли;
		КонтактнаяИнформацияДляДобавления.Вставить("Комментарий", НСтр("ru = 'Указан при выдаче дисконтной карты'"));
		КонтактнаяИнформацияДляДобавления.Вставить("ВидКИ", ВидКИТелефон);
		МассивКИ.Добавить(КонтактнаяИнформацияДляДобавления);
	КонецЕсли;
	Если ЗначениеЗаполнено(СозданиеПокупателяEMail) Тогда
		КонтактнаяИнформацияДляДобавления = Новый Структура;
		ВидКИEMail = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтрагента");
		КонтактнаяИнформацияДляДобавления.Вставить("ДобавитьКИ", Истина);
		КонтактнаяИнформацияДляДобавления.Вставить("Представление", СозданиеПокупателяEMail);
		
		КонтактнаяИнформацияДляДобавления.Вставить("Значение", КонтактнаяИнформацияВJSON(СозданиеПокупателяEMail, ВидКИEMail ));
		КонтактнаяИнформацияДляДобавления.Вставить("Комментарий", НСтр("ru = 'Указан при выдаче дисконтной карты'"));
		КонтактнаяИнформацияДляДобавления.Вставить("ВидКИ", ВидКИEMail );
		МассивКИ.Добавить(КонтактнаяИнформацияДляДобавления);
	КонецЕсли;	
	ДополнительныеПараметры = Новый Структура;
	Если ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") 
		ИЛИ ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		ДополнительныеПараметры.Вставить("ЧекККМ", Истина);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВладелецФормы.Объект, "ВидОперации") Тогда
		ДополнительныеПараметры.Вставить("ВидОперации", ВладелецФормы.Объект.ВидОперации);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЮрлицоПродолжение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура("ТекстЗаполнения, ДобавитьКонтактнуюИнформацию, НеобходимоОповеститьОЗаписиНового, ДополнительныеПараметры",
										СозданиеПокупателяФИО, МассивКИ, Истина, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура настраивает условное оформление и отборы формы.
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НайденныеДисконтныеКарты.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДисконтныеКарты.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДисконтныеКарты.АвтоматическаяРегистрацияПриПервомСчитывании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет());
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);

КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

// Процедура обрабатывает данные штрихкода, которые передаются из обработки оповещения формы.
//
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСчитываниеДисконтнойКарты Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	ОбработатьПолученныйКодНаКлиенте(МассивШтрихкодов[0].Штрихкод, ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод"), Ложь);
	
КонецПроцедуры

// Процедура обрабатывает данные со считывателя магнитных карт, которые передаются из обработки оповещения формы.
//
&НаКлиенте
Процедура ОбработатьДанныеСчитывателяМагнитныхКарт(Данные)
	
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСчитываниеДисконтнойКарты Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСчитывателя = Данные;
	ПодключитьОбработчикОжидания("ОбработатьПолученныйКодНаКлиентеВОбработкеОжидания", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПерейтиНаСтраницу(Страница)
	
	СтэкСтраниц.Добавить(Элементы.Страницы.ТекущаяСтраница);
	Элементы.Страницы.ТекущаяСтраница = Страница;
	Элементы.СтраницыКнопкиНазад.ТекущаяСтраница = Элементы.СтраницыКнопкиНазад.ПодчиненныеЭлементы.КнопкаНазад;
	ЗаголовокГотово = НСтр("ru = 'Готово'");
	
	Если Страница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаВыборДисконтнойКарты Тогда
		Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод") Тогда
			Текст = НСтр("ru = 'Обнаружено несколько дисконтных карт с магнитным кодом ""%1"".
			                   |Выберите подходящую карту.'");
			НадписьВыборДисконтнойКарты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КодКарты);
		ИначеЕсли ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда			
			Текст = НСтр("ru = 'Обнаружено несколько дисконтных карт для покупателя с номером телефона ""%1"".
			                   |Выберите подходящую карту.'");
			НадписьВыборДисконтнойКарты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НомерТелефона);
		Иначе
			Текст = НСтр("ru = 'Обнаружено несколько дисконтных карт со штрихкодом ""%1"".
			                   |Выберите подходящую карту.'");
			НадписьВыборДисконтнойКарты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КодКарты);
		КонецЕсли;
		ЗаголовокГотово = НСтр("ru = 'Далее >>'");
	ИначеЕсли Страница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеКонтрагента Тогда
		ЗаголовокГотово = НСтр("ru = 'Далее >>'");
	ИначеЕсли Страница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаСозданиеДисконтнойКарты Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	
	Элементы.Готово.Заголовок = ЗаголовокГотово;
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

// Функция проверяет магнитный код на соответствие шаблону и возвращает список ДК, магнитный код или штрихкод.
//
&НаСервере
Функция ОбработатьПолученныйКодНаСервере(Данные, ТипКодаКарты, Предобработка, ЕстьНайденныеКарты = Ложь)
	
	ЕстьНайденныеКарты = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеДисконтныеКарты.Очистить();
	
	ТипКода = ТипКодаКарты;
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		// При вызове функции параметр "Предобработка" будем устанавливать в значение Ложь, чтобы не использовались шаблоны
		// магнитных карт. В качестве кода карты будет использоваться строка, полученная конкатенацией строк со всех магнитных дорожек.
		// В большинстве дисконтных карт используется только одна дорожка, на которой записан только номер карты в формате ";КодКарты?".
		Если Предобработка Тогда
			КодКарты = Данные[0]; // Данные 3х дорожек магнитной карты. На данный момент не используется. Можно использовать если карта не найдена.
			                         // В случае, когда карта не соответствует ни одному шаблону, то будет выдано предупреждение,
			                         // но кнопка "Готова" в форме нажата не будет.
			ДисконтныеКарты = ДисконтныеКартыУНФВызовСервера.НайтиДисконтныеКартыПоДаннымСоСчитывателяМагнитныхКарт(Данные, ТипКода);
		Иначе
			Если ТипЗнч(Данные) = Тип("Массив") Тогда
				КодКарты = Данные[0];
			Иначе
				КодКарты = Данные;
			КонецЕсли;
			ДисконтныеКартыУНФВызовСервера.ПодготовитьКодКартыПоНастройкамПоУмолчанию(КодКарты);
			ДисконтныеКарты = ДисконтныеКартыУНФСервер.НайтиДисконтныеКартыПоМагнитномуКоду(КодКарты);
		КонецЕсли;
		
		Элементы.НайденныеДисконтныеКартыМагнитныйКод.Видимость = Истина;
	ИначеЕсли ТипКода = Перечисления.ТипыКодовКарт.НомерТелефона Тогда
		
		НомерТелефонаДляПоиска = Данные;
		ДисконтныеКарты = ПодготовитьСписокКартПоНомеруТелефона(Данные);
		
		Элементы.НайденныеДисконтныеКартыМагнитныйКод.Видимость = Ложь;		
	Иначе
		КодКарты = Данные;
		ДисконтныеКарты = ДисконтныеКартыУНФВызовСервера.НайтиДисконтныеКартыПоШтрихкоду(КодКарты);
		
		Элементы.НайденныеДисконтныеКартыМагнитныйКод.Видимость = Ложь;
	КонецЕсли;
	
	МассивКонтрагентов = Новый Массив;
	Для Каждого СтрокаТЧ Из ДисконтныеКарты.ЗарегистрированныеДисконтныеКарты Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент) И СтрокаТЧ.ЭтоИменнаяКарта
			И МассивКонтрагентов.Найти(СтрокаТЧ.Контрагент) = Неопределено Тогда
			МассивКонтрагентов.Добавить(СтрокаТЧ.Контрагент);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ДисконтныеКарты.НеЗарегистрированныеДисконтныеКарты Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент) И СтрокаТЧ.ЭтоИменнаяКарта
			И МассивКонтрагентов.Найти(СтрокаТЧ.Контрагент) = Неопределено Тогда
			МассивКонтрагентов.Добавить(СтрокаТЧ.Контрагент);
		КонецЕсли;
	КонецЦикла;
	НомераТелефона = ПодготовитьОписанияНомеровТелефонаКонтрагентов(МассивКонтрагентов, НомерТелефонаДляПоиска);
	
	Для Каждого СтрокаТЧ Из ДисконтныеКарты.ЗарегистрированныеДисконтныеКарты Цикл
		
		ЕстьНайденныеКарты = Истина;
		
		НоваяСтрока = НайденныеДисконтныеКарты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
        ТелефонныйНомер = НомераТелефона[НоваяСтрока.Контрагент];
		Если ТелефонныйНомер = Неопределено Тогда
			ТелефонныйНомер = "";
		Иначе 
			ТелефонныйНомер = " • " + ТелефонныйНомер;
		КонецЕсли;
		ПодсказкаКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '• Клиент: %1%2'"), Строка(НоваяСтрока.Контрагент), ТелефонныйНомер);
		ПредставлениеВидаКарты = "• " + Строка(СтрокаТЧ.ВидКарты)+?(СтрокаТЧ.ЭтоИменнаяКарта, " (Именная, ", " (")+СтрокаТЧ.ТипКарты+")";			
		НоваяСтрока.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 %3'"), СтрокаТЧ.Ссылка, ПодсказкаКонтрагента, ПредставлениеВидаКарты);
	КонецЦикла;
	
	ЕстьПравоСоздаватьКонтрагентов = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	Если ДисконтныеКарты.ЗарегистрированныеДисконтныеКарты.Количество() = 0 
		ИЛИ (ТипКода = Перечисления.ТипыКодовКарт.НомерТелефона
			// Если найдена только одна карта, то ситуация однозначна, не усложнять сценарий дополнительными окнами ввода.
			// Для случая, когда в базе ошибочные данные, и нужно создать новую карту - придется вручную создать контрагента.
			И Не ДисконтныеКарты.ЗарегистрированныеДисконтныеКарты.Количество() = 1) Тогда
		Для Каждого СтрокаТЧ Из ДисконтныеКарты.НеЗарегистрированныеДисконтныеКарты Цикл			
			ПодсказкаКонтрагента = "";
			Если СтрокаТЧ.ЭтоИменнаяКарта Тогда
				Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
					ПодсказкаКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Клиент: %1'"), Строка(СтрокаТЧ.Контрагент));
				ИначеЕсли ЕстьПравоСоздаватьКонтрагентов Тогда
					ПодсказкаКонтрагента = НСтр("ru = '• Создать клиента'")
				Иначе
					// Не будем предлагать создать контрагента
					Продолжить;
				КонецЕсли;
	            ТелефонныйНомер = НомераТелефона[СтрокаТЧ.Контрагент];
				Если ТелефонныйНомер = Неопределено Тогда
					ТелефонныйНомер = " • " + Данные;
				Иначе 
					ТелефонныйНомер = " • " + ТелефонныйНомер;
				КонецЕсли;
				ПодсказкаКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1%2'"), ПодсказкаКонтрагента, ТелефонныйНомер); 
	        КонецЕсли;
			НоваяСтрока = НайденныеДисконтныеКарты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			ПредставлениеВидаКарты = "• " + Строка(СтрокаТЧ.ВидКарты)+?(СтрокаТЧ.ЭтоИменнаяКарта, " (Именная, ", " (")+СтрокаТЧ.ТипКарты+")";			
			НоваяСтрока.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать карту %1 %2'"), ПодсказкаКонтрагента, ПредставлениеВидаКарты);
		КонецЦикла;
	КонецЕсли;
	НайденныеДисконтныеКарты.Сортировать("Ссылка Возр, Контрагент Возр");
	
	Возврат НайденныеДисконтныеКарты.Количество() > 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьОписанияНомеровТелефонаКонтрагентов(Контрагенты, ИскомыйНомер)
	Результат = Новый Соответствие;
	СведенияОНомерахТелефона = ПолучитьСведенияОТелефоне(Контрагенты);
	Для Каждого Контрагент Из Контрагенты Цикл
		ТелефонныйНомер = Неопределено;
		ОписанияНомеровТелефона = СведенияОНомерахТелефона[Контрагент];
		Если ОписанияНомеровТелефона = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ОписаниеНомераТелефона Из ОписанияНомеровТелефона Цикл
			ПолныйНомерТелефона = ПолучитьНомерТелефонаИзОписания(ОписаниеНомераТелефона);
			Если НомерТелефонаКонтрагентаСоответствуетПоиску(ПолныйНомерТелефона, ИскомыйНомер) Тогда
				ТелефонныйНомер = ПолучитьНомерТелефонаИзОписания(ОписаниеНомераТелефона, Истина);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТелефонныйНомер = Неопределено И ОписанияНомеровТелефона.Количество() > 0 Тогда					
			ОписаниеНомераТелефона = ОписанияНомеровТелефона[0];
			ТелефонныйНомер = ПолучитьНомерТелефонаИзОписания(ОписаниеНомераТелефона, Истина);
		КонецЕсли;
		Если ТелефонныйНомер = Неопределено Тогда
			Результат.Вставить(Контрагент, "");
		Иначе
			Результат.Вставить(Контрагент, ТелефонныйНомер);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерТелефонаИзОписания(ОписаниеНомераТелефона, ДляПредставления = Ложь)
	ПолныйНомерТелефона = "";
	Если ТипЗнч(ОписаниеНомераТелефона) = Тип("Строка") Тогда
		ПолныйНомерТелефона = ОписаниеНомераТелефона;
	ИначеЕсли ТипЗнч(ОписаниеНомераТелефона) = Тип("Структура")
		И ОписаниеНомераТелефона.Свойство("Представление") 
		И ДляПредставления Тогда
		ПолныйНомерТелефона = ОписаниеНомераТелефона.Представление;
	ИначеЕсли ТипЗнч(ОписаниеНомераТелефона) = Тип("Структура")
		И ОписаниеНомераТелефона.Свойство("КодСтраны") И ОписаниеНомераТелефона.Свойство("КодГорода") И ОписаниеНомераТелефона.Свойство("НомерТелефона") Тогда		
		Если ДляПредставления Тогда
			ПолныйНомерТелефона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '+%1(%2)%3"), ОписаниеНомераТелефона.КодСтраны, ОписаниеНомераТелефона.КодГорода, ОписаниеНомераТелефона.НомерТелефона);
		Иначе
			ПолныйНомерТелефона = ПолучитьТолькоЧисловыеСимволы(ОписаниеНомераТелефона.КодСтраны) 
									+ ПолучитьТолькоЧисловыеСимволы(ОписаниеНомераТелефона.КодГорода) 
									+ ПолучитьТолькоЧисловыеСимволы(ОписаниеНомераТелефона.НомерТелефона);
		КонецЕсли;
	КонецЕсли;
	Возврат ПолныйНомерТелефона;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТолькоЧисловыеСимволы(НомерТелефона)

   СимволыРазделители = СтрСоединить(СтрРазделить(НомерТелефона, "0123456789", Ложь));
   Возврат СтрСоединить(СтрРазделить(НомерТелефона, СимволыРазделители, Ложь));

КонецФункции


&НаСервере
Функция ПодготовитьСписокКартПоНомеруТелефона(Данные)
	ПараметрыФормы = Новый Структура("ИмяФормы", ЭтотОбъект.ИмяФормы);
	ФильтрПоискаПоШтрихкоду = Новый Структура;
	ПоследниеЦифрыТелефона = Сред(НомерТелефонаДляПоиска, 2);
	Если СтрНачинаетсяС(НомерТелефонаДляПоиска, "*")
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеЦифрыТелефона) Тогда
		// Пользователь мог ввести для поиска, например, только последние 4 цифры в формате "*хххх"
		
		ФильтрПоискаПоШтрихкоду.Вставить("ШаблонНомерТелефона");
		ФильтрПоискаПоШтрихкоду.Вставить("ПоследниеЦифрыТелефона");
		НомерТелефонаДляПоиска = "%" + ПоследниеЦифрыТелефона;
		
	ИначеЕсли СтрНачинаетсяС(НомерТелефонаДляПоиска, "8")
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеЦифрыТелефона) Тогда
		// Пользователь мог ввести номер для поиска в формате 89ххххххххх (с восьмеркой вместо +7)
		
		ФильтрПоискаПоШтрихкоду.Вставить("ШаблонНомерТелефона");
		ФильтрПоискаПоШтрихкоду.Вставить("ПоследниеЦифрыТелефона");
		НомерТелефонаДляПоиска = "%" + ПоследниеЦифрыТелефона;
		
	ИначеЕсли СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерТелефонаДляПоиска) Тогда
		// Пользователь мог ввести номер для поиска в формате 9ххххххххх (без лидирующих "*", +7 или 8)
		ФильтрПоискаПоШтрихкоду.Вставить("ШаблонНомерТелефона");
		ФильтрПоискаПоШтрихкоду.Вставить("ПоследниеЦифрыТелефона");
		НомерТелефонаДляПоиска = "%" + НомерТелефонаДляПоиска;
	Иначе
		ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
	КонецЕсли;
	ПараметрыФормы.Вставить("ФильтрПоискаПоШтрихкоду", ФильтрПоискаПоШтрихкоду);
	
	ДанныеШтрихкода = Новый Структура;
	РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду(НомерТелефонаДляПоиска, ПараметрыФормы, ДанныеШтрихкода);
	
	Результат = Новый Структура;
	Результат.Вставить("ЗарегистрированныеДисконтныеКарты", Новый Массив);
	Результат.Вставить("НеЗарегистрированныеДисконтныеКарты", Новый Массив);	
	СписокВидовКартНеНужноСоздание = Новый Массив;
	КонтрагентыБезДК = Новый Массив();
	Для Каждого НайденнаяКарта Из ДанныеШтрихкода.ЗначенияПоиска Цикл		
		ОписаниеКарты = ДисконтныеКартыУНФСервер.ПолучитьСтруктуруДанныхДисконтнойКарты();
		Если ТипЗнч(НайденнаяКарта.Владелец) = Тип("СправочникСсылка.ДисконтныеКарты") Тогда
			ДанныеДК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденнаяКарта.Владелец, "КодКартыШтрихкод, КодКартыМагнитный, Ссылка, ВладелецКарты, Владелец.ТипКарты, Владелец.ЭтоИменнаяКарта, Владелец");
			ОписаниеКарты.Вставить("Штрихкод", ДанныеДК.КодКартыШтрихкод);
			ОписаниеКарты.Вставить("МагнитныйКод", ДанныеДК.КодКартыМагнитный);
			ОписаниеКарты.Вставить("Ссылка", ДанныеДК.Ссылка);
			ОписаниеКарты.Вставить("ВидКарты", ДанныеДК.Владелец);
			ОписаниеКарты.Вставить("ТипКарты", ДанныеДК.ВладелецТипКарты);
			ОписаниеКарты.Вставить("ЭтоИменнаяКарта", ДанныеДК.ВладелецЭтоИменнаяКарта);
			ОписаниеКарты.Вставить("Контрагент", ДанныеДК.ВладелецКарты);
			ОписаниеКарты.Вставить("ЭтоИменнаяКарта", ДанныеДК.ВладелецЭтоИменнаяКарта);
			
			// Дадим возможность создать любую карту, даже если найдена ДК (если у нас ошибка, или номер перешел другому человеку)
			// СписокВидовКартНеНужноСоздание.Добавить(ДанныеДК.Владелец);
			
			Результат.ЗарегистрированныеДисконтныеКарты.Добавить(ОписаниеКарты);
		ИначеЕсли ТипЗнч(НайденнаяКарта.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если КонтрагентыБезДК.Найти(НайденнаяКарта.Владелец) = Неопределено Тогда
				КонтрагентыБезДК.Добавить(НайденнаяКарта.Владелец);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДобавитьШаблоныНенайденныхКарт = ПолучитьШаблоныДляСозданияКартПоНомеруТелефона();
	Для Каждого ОписаниеШаблонаКарты Из ДобавитьШаблоныНенайденныхКарт Цикл
		Если НЕ ОписаниеШаблонаКарты.ЭтоИменнаяКарта Тогда
			// Не именные карты не находятся по номеру телефона, поэтому не будем предлагать их создавать
			Продолжить;
		КонецЕсли;
		Результат.НеЗарегистрированныеДисконтныеКарты.Добавить(ОписаниеШаблонаКарты);
		Для Каждого КонтрагентБезДК Из КонтрагентыБезДК Цикл
			Если КонтрагентБезДК = Контрагент Тогда
				// Этот контрагент фигурирует в изначальном шаблоне "по-умолчанию"
				Продолжить;
			КонецЕсли;
			ШаблонКонтрагента = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеШаблонаКарты);
			ШаблонКонтрагента.Контрагент = КонтрагентБезДК;
			Результат.НеЗарегистрированныеДисконтныеКарты.Добавить(ШаблонКонтрагента);
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьШаблоныДляСозданияКартПоНомеруТелефона(КромеВидовКарт = Неопределено)
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ДисконтныеКарты.ПустаяСсылка) КАК Ссылка,
	|	"""" КАК Наименование,
	|	"""" КАК Штрихкод,
	|	"""" КАК МагнитныйКод,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ВидыКарт.Ссылка КАК ВидКарты,
	|	ВидыКарт.ЭтоИменнаяКарта КАК ЭтоИменнаяКарта,
	|	ВидыКарт.ТипКарты КАК ТипКарты,
	|	ВидыКарт.ШаблонДисконтнойКарты КАК ШаблонДисконтнойКарты
	|ИЗ
	|	Справочник.ВидыДисконтныхКарт КАК ВидыКарт
	|ГДЕ
	|	НЕ ВидыКарт.Ссылка В (&ВидыДКИсключить)
	|	И НЕ ВидыКарт.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВидыДКИсключить", ?(КромеВидовКарт = Неопределено, Новый Массив(), КромеВидовКарт));
	ВыбРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыбРезультат.Следующий() Цикл
		ОписаниеКарты = ДисконтныеКартыУНФСервер.ПолучитьСтруктуруДанныхДисконтнойКарты();		
		ЗаполнитьЗначенияСвойств(ОписаниеКарты, ВыбРезультат);
		Если ВыбРезультат.ЭтоИменнаяКарта Тогда      
			// Контрагент из документа, для которого ищем карту
			ОписаниеКарты.Контрагент = Контрагент;
		КонецЕсли;
		Результат.Добавить(ОписаниеКарты);
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Функция проверяет магнитный код на соответствие шаблону и устанавливает магнитный код или штрихкод элемента справочника.
//
&НаКлиенте
Процедура ОбработатьПолученныйКодНаКлиенте(Данные, ПолученныйТипКода, Предобработка)
	
	Перем ЕстьНайденныеКарты;
	
	Результат = ОбработатьПолученныйКодНаСервере(Данные, ПолученныйТипКода, Предобработка, ЕстьНайденныеКарты);
	Если Не Результат Тогда
		
		ИмяРеквизитаОшибки = "КодКарты";
		Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод") Тогда
			ТекстСообщения = НСтр("ru = 'Карта со штрихкодом ""%1"" не зарегистрирована и нет ни одного подходящего вида дисконтных карт.'");
		ИначеЕсли ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда
			ТекстСообщения = НСтр("ru = 'Карта клиента с номером телефона ""%1"" не зарегистрирована и нет ни одного подходящего вида дисконтных карт.'");
			ИмяРеквизитаОшибки = "НомерТелефона";
		Иначе
			ТекстСообщения = НСтр("ru = 'Карта с магнитным кодом ""%1"" не зарегистрирована и нет ни одного подходящего вида дисконтных карт.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭтотОбъект[ИмяРеквизитаОшибки]),
			,
			ИмяРеквизитаОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	Если НайденныеДисконтныеКарты.Количество() > 1 ИЛИ НЕ ЕстьНайденныеКарты Тогда
		ПерейтиНаСтраницу(Элементы.Страницы.ПодчиненныеЭлементы.ГруппаВыборДисконтнойКарты);
		Если ЕстьНайденныеКарты Тогда		
			Текст = НСтр("ru = 'Обнаружено несколько подходящих дисконтных карт.
			                   |Выберите карту.'");
			НадписьВыборДисконтнойКарты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КодКарты);
		Иначе // Только виды карт для регистрации новой карты.
			ИмяРеквизитаОшибки = "КодКарты";
			Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод") Тогда
				Текст = НСтр("ru = 'Карта со штрихкодом ""%1"" не зарегистрирована.
			                   |Выберите подходящий вид карты для регистрации новой дисконтной карты.'");
			ИначеЕсли ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда
				Текст = НСтр("ru = 'Карта покупателя с номером телефона ""%1"" не зарегистрирована.
			                   |Выберите подходящий вид карты для регистрации новой дисконтной карты.'");
				ИмяРеквизитаОшибки = "НомерТелефона";
			Иначе
				Текст = НСтр("ru = 'Карта с магнитным кодом ""%1"" не зарегистрирована.
			                   |Выберите подходящий вид карты для регистрации новой дисконтной карты.'");			   
			КонецЕсли;				   
			НадписьВыборДисконтнойКарты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ЭтотОбъект[ИмяРеквизитаОшибки]);
		КонецЕсли;
	ИначеЕсли НайденныеДисконтныеКарты.Количество() = 1 И ЕстьНайденныеКарты Тогда
		ОбработатьВыборДисконтнойКарты(НайденныеДисконтныеКарты[0]);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пользователем определенной дисконтной карты.
//
&НаКлиенте
Процедура ОбработатьВыборДисконтнойКарты(ТекущиеДанные)
	
	ДисконтнаяКартаДляЗаполнения = ТекущиеДанные.Ссылка;
	ПодключитьОбработчикОжидания("ОбработатьВыборДисконтнойКартыОбработчикОжидания", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДисконтнойКартыОбработчикОжидания()
	
	ПараметрыЗакрытия = Новый Структура("ДисконтнаяКарта, СчитанаДисконтнаяКарта", ДисконтнаяКартаДляЗаполнения, Истина);
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

// Функция проверяет магнитный код на соответствие шаблону и устанавливает магнитный код элемента справочника или
// показывает список ДК или видов ДК.
//
&НаКлиенте
Процедура ОбработатьПолученныйКодНаКлиентеВОбработкеОжидания()
	
	ОбработатьПолученныйКодНаКлиенте(ДанныеСчитывателя, ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод"), Истина);
	
КонецПроцедуры

// Процедура нажимает кнопку Далее в обработке ожидания после изменения кода карты или выбора дисконтной карты (вида дисконтной карты).
//
&НаКлиенте
Процедура ДалееОбработчикОжидания()
	
	Далее(Команды["Далее"]);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура СоздатьЮрлицоПродолжение(Результат, ДополнительныеПараметры) Экспорт
	СозданныйКонтрагент = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Ссылка", СозданныйКонтрагент) 
		И ЗначениеЗаполнено(СозданныйКонтрагент) 
		И СсылкаСуществует(СозданныйКонтрагент) Тогда
		Объект.ВладелецКарты = СозданныйКонтрагент;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СсылкаСуществует(ПроверяемаяСсылка)
	Возврат ОбщегоНазначения.СсылкаСуществует(ПроверяемаяСсылка);
КонецФункции

#КонецОбласти 

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияВJSON(КонтактнаяИнформация, ВидКИ)
	Результат = Неопределено;
	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Тогда
		Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(КонтактнаяИнформация, ВидКИ);
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Структура") Тогда
		//Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(КонтактнаяИнформация, ВидКИ)
		Результат = КонтактнаяИнформация.Значение;
	КонецЕсли;
	Возврат Результат;
КонецФункции
#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура настраивает видимость элементов в зависимости от реквизитов вида дисконтной карты.
//
&НаСервере
Процедура НастройкаВидимостиЭлементовПоВидуКартыНаСервере()
	
	Если Не Объект.Владелец.Пустая() Тогда
		Именная = ПолучитьРеквизитВидаДисконтнойКарты(Объект.Владелец, "ЭтоИменнаяКарта");
		ТипКарты = ПолучитьРеквизитВидаДисконтнойКарты(Объект.Владелец, "ТипКарты");
	Иначе
		Именная = Ложь;
		ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыКарт.ПустаяСсылка");		
	КонецЕсли;
	
	Элементы.ВладелецКарты.АвтоОтметкаНезаполненного = Именная;
	
	Элементы.ВладелецКарты.Видимость = Именная;
	Элементы.ЭтоИменнаяКарта.Видимость = Именная;
	
	Элементы.КодКартыМагнитный.Видимость = (ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыКарт.Магнитная")
	                                        Или ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыКарт.Смешанная"));
	Элементы.КодКартыШтрихкод.Видимость = (ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыКарт.Штриховая")
	                                        Или ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыКарт.Смешанная"));
											
	Если ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыКарт.Смешанная") Тогда
		Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод") Тогда
			Элементы.СкопироватьМКвШК.Видимость = Ложь;
			Элементы.СкопироватьШКвМК.Видимость = Истина;
		Иначе
			Элементы.СкопироватьМКвШК.Видимость = Истина;
			Элементы.СкопироватьШКвМК.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.СкопироватьМКвШК.Видимость = Ложь;
		Элементы.СкопироватьШКвМК.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКодаПриИзменении(Элемент)
	ОбновитьВидимостьВводаНомераТелефона();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьВводаНомераТелефона()
	ВводНомераТелефона = Ложь;
	Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда
		ВводНомераТелефона = Истина;
	КонецЕсли;
	Элементы.НомерТелефона.Видимость = ВводНомераТелефона;
	Элементы.КодКарты.Видимость = НЕ ВводНомераТелефона;
КонецПроцедуры

#Область ПанельКонтактнойИнформации

&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	Если ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда
		Элементы.ГруппаНомерТелефонаВладельцаКарты.Видимость = Истина;
	Иначе
		// Панель с контактной информацией и предупреждениями не требуется, если поиск карты не велся по номеру телефона
		Элементы.ГруппаНомерТелефонаВладельцаКарты.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, Объект.ВладелецКарты);
	ИзбыточнаяИнформация = Новый Массив;
	Для Каждого КИ Из ЭтотОбъект.ДанныеПанелиКонтактнойИнформации Цикл
		Если КИ.ВладелецКИ <> Объект.ВладелецКарты Тогда
			ИзбыточнаяИнформация.Добавить(КИ);
		ИначеЕсли НЕ КИ.ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			ИзбыточнаяИнформация.Добавить(КИ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КИ Из ИзбыточнаяИнформация Цикл
		ЭтотОбъект.ДанныеПанелиКонтактнойИнформации.Удалить(КИ);
	КонецЦикла;
	Элементы.ДанныеПанелиКонтактнойИнформации.ВыделенныеСтроки.Очистить();
	Элементы.ДанныеПанелиКонтактнойИнформации.ТекущаяСтрока = Неопределено;
	ВысотаСпискаТелефонов = Макс(Мин(ЭтотОбъект.ДанныеПанелиКонтактнойИнформации.Количество(),4), 1);
	Элементы.ДанныеПанелиКонтактнойИнформации.Высота = ВысотаСпискаТелефонов;
	Если ВысотаСпискаТелефонов < ЭтотОбъект.ДанныеПанелиКонтактнойИнформации.Количество() Тогда
		Элементы.ДанныеПанелиКонтактнойИнформации.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьАвтоматически;
	КонецЕсли;
	НомерТелефонаДляПоиска = СтрЗаменить(НомерТелефонаДляПоиска, "%", "");
	ОтобразитьОшибкуВыбораКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОшибкуВыбораКонтрагента()
	
	Элементы.ГруппаНомерТелефонаОшибкаДругойКонтрагент.Видимость = Ложь;
	Элементы.ГруппаНомерТелефонаОшибкаНетТелефона.Видимость = Ложь;
	Элементы.ГруппаНомерТелефонаОшибкаНеправильныйНомер.Видимость = Ложь;
	Если ЗначениеЗаполнено(Контрагент) 
		И ЗначениеЗаполнено(Объект.ВладелецКарты)
		И НЕ Объект.ВладелецКарты = Контрагент Тогда
		Элементы.ГруппаНомерТелефонаОшибкаДругойКонтрагент.Видимость = Истина;
		Возврат;
	ИначеЕсли ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона")
		И ЭтотОбъект.ДанныеПанелиКонтактнойИнформации.Количество() = 0 Тогда
		Элементы.ГруппаНомерТелефонаОшибкаНетТелефона.Видимость = Истина;
		Возврат;
	ИначеЕсли НЕ ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.НомерТелефона") Тогда
		// Дальнейшие проверки не требуются
		Возврат;		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ВладелецКарты) Тогда
		// Пока не указан владелец карты, не будем проверять номера телефонов
		Возврат;
	КонецЕсли;
	
	ИскомыйНомерНайден = Ложь;
	СведенияОНомерахТелефонаКонтрагентов = ПолучитьСведенияОТелефоне(Объект.ВладелецКарты);
	Для Каждого ОписаниеНомераТелефона Из СведенияОНомерахТелефонаКонтрагентов[Объект.ВладелецКарты] Цикл
		ПолныйНомерТелефона = ПолучитьНомерТелефонаИзОписания(ОписаниеНомераТелефона);
		ИскомыйНомерБезПлюса = СтрЗаменить(НомерТелефонаДляПоиска, "+", "");
		Если НомерТелефонаКонтрагентаСоответствуетПоиску(ПолныйНомерТелефона, ИскомыйНомерБезПлюса) Тогда
			ИскомыйНомерНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Элементы.ГруппаНомерТелефонаОшибкаНеправильныйНомер.Видимость = Не ИскомыйНомерНайден;
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// На форме создания дисконтной карты, контакты выводятся только для информации
	// КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока,
	//     Поле, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	Элементы.ДанныеПанелиКонтактнойИнформации.ВыделенныеСтроки.Очистить();
	Элементы.ДанныеПанелиКонтактнойИнформации.ТекущаяСтрока = Неопределено;
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	// На форме создания дисконтной карты, контакты выводятся только для информации
	// КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект.ВладелецКарты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаДругойКонтрагентИсправить(Команда)
	Объект.ВладелецКарты = Контрагент;
	ВладелецКартыПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаНетТелефонаИсправить(Команда)
	ОткрытьФормуКонтаргентаДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаНеправильныйНомерИсправить(Команда)
	ОткрытьФормуКонтаргентаДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтаргентаДляРедактирования()
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьКонтактнуюИнформацию", ЭтаФорма);
	КонтактнаяИнформацияДляДобавления = Новый Структура;
	КонтактнаяИнформацияДляДобавления.Вставить("ДобавитьКИ", Истина);
	КонтактнаяИнформацияДляДобавления.Вставить("ПредставлениеКИ", СтрЗаменить(НомерТелефонаДляПоиска, "%", ""));
	КонтактнаяИнформацияДляДобавления.Вставить("ВидКИ", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"));
	ПараметрыФормы = Новый Структура("Ключ, ДобавитьКонтактнуюИнформацию", Объект.ВладелецКарты, КонтактнаяИнформацияДляДобавления);
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтактнуюИнформацию(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьПанельКонтактнойИнформацииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СозданиеПокупателяТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьРедактированиеТелефонаВДиалоге();
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьРедактированиеТелефонаВДиалоге()
	ВидКИТелефон = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента");
	ЗначениеКИ = ?(ЗначениеЗаполнено(СозданиеПокупателяДанныеНомераТелефона), СозданиеПокупателяДанныеНомераТелефона.Значение, УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(СозданиеПокупателяТелефон, ВидКИТелефон));
	ПараметрыФормы = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
						ВидКИТелефон,
						ЗначениеКИ,
						СозданиеПокупателяТелефон,
						"");
						
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("НомерТелефонаЗавершениеРедактированияВДиалоге", ЭтотОбъект, ДополнительныеПараметры);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, ЭтотОбъект, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаЗавершениеРедактированияВДиалоге(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		// Обработка результата
		СозданиеПокупателяТелефон = ПолучитьПредоставлениеКонтактнойИнформации(Результат);
		СозданиеПокупателяДанныеНомераТелефона = Результат;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредоставлениеКонтактнойИнформации(КонтактнаяИнформация)
	Возврат УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(КонтактнаяИнформация)
КонецФункции

&НаСервере
Процедура НастроитьПолеВводаТелефонаПочты()
	ПолеВводаТелефон = Элементы.СозданиеПокупателяТелефон;
	ВидКИТелефон = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента");
	ИнформацияОВидеКИТелефон = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидКИТелефон, "Тип, Наименование, ВидРедактирования, ВидПоляДругое, ВводитьНомерПоМаске, МаскаНомераТелефона, ПометкаУдаления, ХранитьИсториюИзменений, ОбязательноеЗаполнение");	
	Если ИнформацияОВидеКИТелефон.ВидРедактирования = "Диалог" Тогда
		ПолеВводаТелефон.РедактированиеТекста = Ложь;
	КонецЕсли;
	Если ИнформацияОВидеКИТелефон.ВводитьНомерПоМаске Тогда 
		НомерТелефонаСоответствуетМаске = УправлениеКонтактнойИнформациейСлужебный.НомерТелефонаСоответствуетМаске(СозданиеПокупателяТелефон, ИнформацияОВидеКИТелефон.МаскаНомераТелефона);	
		Если ПустаяСтрока(СозданиеПокупателяТелефон) ИЛИ НомерТелефонаСоответствуетМаске Тогда
			ПолеВводаТелефон.Маска = ИнформацияОВидеКИТелефон.МаскаНомераТелефона;
		КонецЕсли;
	КонецЕсли;
	Если ИнформацияОВидеКИТелефон.ОбязательноеЗаполнение Тогда
		ПолеВводаТелефон.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	ПолеВводаПочта = Элементы.СозданиеПокупателяEMail;
	ВидКИПочта = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтрагента");
	ИнформацияОВидеКИПочта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидКИПочта, "Тип, Наименование, ВидРедактирования, ВидПоляДругое, ВводитьНомерПоМаске, МаскаНомераТелефона, ПометкаУдаления, ХранитьИсториюИзменений, ОбязательноеЗаполнение");	
	Если ИнформацияОВидеКИПочта.ОбязательноеЗаполнение Тогда
		ПолеВводаПочта.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции

#КонецОбласти

#КонецОбласти