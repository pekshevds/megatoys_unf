
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ПараметрыКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыКонтактнойИнформации.ИмяЭлементаДляРазмещения = Элементы.КонтактнаяИнформация.Имя;
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	НаборСвойств_Справочник_СтруктурныеЕдиницы = УправлениеСвойствами.НаборСвойствПоИмени(
		"Справочник_СтруктурныеЕдиницы");
	// Конец СтандартныеПодсистемы.Свойства
	
	ТипСтруктурнойЕдиницыРозница = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	ТипСтруктурнойЕдиницыРозницаСуммовойУчет = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет;
	ТипСтруктурнойЕдиницыСклад = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	ТипСтруктурнойЕдиницыПодразделение = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
	ТипСтруктурнойЕдиницыМагазин = Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов;
	ЭтоУНФ = ОбщегоНазначенияУНФ.ЭтоУНФ();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОрдерныйСклад", "Доступность",
		Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыСклад Или Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозница);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РозничныйВидЦен", "Видимость",
		Объект.ТипСтруктурнойЕдиницы <> ТипСтруктурнойЕдиницыПодразделение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ОбработкаВидыСкидокНаценокРучныеИАвтоматическиеОткрытьОкругления", "Видимость", Объект.ТипСтруктурнойЕдиницы
		<> ТипСтруктурнойЕдиницыПодразделение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"Автоперемещение", "Видимость", ЭтоУНФ);
		
	УчетРозничныхПродаж = ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж");
	Элементы.ОбработкаМенеджерПодсказокТиповыеСхемыУчета_Розница.Видимость = Элементы.РозничныйВидЦен.Видимость И УчетРозничныхПродаж;
	Элементы.ТипСтруктурнойЕдиницы.ОтображениеПодсказки = ?(Элементы.РозничныйВидЦен.Видимость И УчетРозничныхПродаж, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам")
		Или Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		Или ВСправочникеОтсутствуетСтруктурнаяЕдиницаСТипомСклад() Тогда
		Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж")
		ИЛИ Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
		Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		Если ПолучитьФункциональнуюОпцию("СуммовойУчетВРознице")
			ИЛИ Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
			Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов);
	
	Если Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		ИЛИ Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		  И Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Количество() = 1 Тогда
		Объект.ТипСтруктурнойЕдиницы = Элементы.ТипСтруктурнойЕдиницы.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.РозничныйВидЦен.Доступность = НЕ Объект.ОрдерныйСклад;
	
	ОтметкаНезаполненного = (Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозница
		ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозницаСуммовойУчет);

	
	Элементы.РозничныйВидЦен.АвтоОтметкаНезаполненного = ОтметкаНезаполненного;
	Элементы.РозничныйВидЦен.ОтметкаНезаполненного = ОтметкаНезаполненного;
	
	ГоловныеОрганизацииОбособленногоПодразделения();
	
	ЭтоПодразделение = (Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыПодразделение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация", "Видимость", ЭтоПодразделение);
	
	РеквизитыГоловнойОрганизацииВидны = ЭтоПодразделение И ЗначениеЗаполнено(Объект.ГоловнаяОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизацияИНН",					"Видимость", РеквизитыГоловнойОрганизацииВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КПП", 										"Видимость", РеквизитыГоловнойОрганизацииВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЦифровойИндексОбособленногоПодразделения",	"Видимость", РеквизитыГоловнойОрганизацииВидны);
	
	ИспользуетсяПриемНаОтветХранение = ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветХранение");
	Если ИспользуетсяПриемНаОтветХранение Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УсловияХранения", "Видимость", (Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыСклад));
		
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветТекстаНекорректногоЗаполнения = ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента;
	РежимИсправленияОшибок = Параметры.ОшибкиЗаполнения;
	Если РежимИсправленияОшибок Тогда
		ПроверкаДанных.ВывестиСообщенияОбОшибкахЗаполнения("Объект", Параметры.ПереченьОшибок);
		ОтметитьОшибки(Параметры.ПереченьОшибок);
	КонецЕсли;
	
	
	ЭтоМагазин = Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыМагазин;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Родитель)
		И Объект.Родитель.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыМагазин Тогда
		Объект.РозничныйВидЦен = Объект.Родитель.РозничныйВидЦен
	КонецЕсли;
	
	Элементы.ОрдерныйСклад.Видимость = Не ЭтоМагазин;
	Элементы.ГруппаПечать.Видимость = Не ЭтоМагазин;
	Элементы.МОЛ.Видимость = Не ЭтоМагазин;
	
	ТипСтруктурнойЕдиницы = Объект.ТипСтруктурнойЕдиницы;
	
	Элементы.ГруппаВидУчетаОрдерныхСкладов.Видимость = Объект.ОрдерныйСклад;
	Элементы.ГруппаИспользовать.Видимость = Объект.ОрдерныйСклад;
	
	ИспользоватьОрдерныйСклад = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад");
	
	Если Не ИспользоватьОрдерныйСклад И Объект.ОрдерныйСклад Тогда
		Элементы.ГруппаОрдерныйУчет.Видимость = Истина;
	Иначе
		Элементы.ГруппаОрдерныйУчет.Видимость = ИспользоватьОрдерныйСклад;
	КонецЕсли;
	
		
	Если ЗначениеЗаполнено(Объект.ВидУчетаОрдерныхСкладов) И НЕ Объект.ВидУчетаОрдерныхСкладов = Перечисления.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом Тогда
		Элементы.УчетОстатковПоЯчейкам.Видимость = Истина;
	Иначе 
		Элементы.УчетОстатковПоЯчейкам.Видимость = Ложь;
	КонецЕсли;
	
	ВидУчетаОрдерныхСкладовСсылка = Объект.ВидУчетаОрдерныхСкладов;
	УчетОстатковПоЯчейкамСсылка = Объект.УчетОстатковПоЯчейкам;
	
	ОпределитьНастройкиПолейДляСкладаУправляющейСистемы();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если Параметры.Свойство("ТекущийЭлемент") Тогда
		ТекущийЭлемент = Элементы[Параметры.ТекущийЭлемент];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьТекстПодсказкиВЗависимостиОтТипа();
	УстановитьТекстПодсказкиВЗависимостиОВидаУчетаОрдерногоСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилисьСчетаСтруктурныеЕдиницы" Тогда
		Объект.СчетУчетаВРознице = Параметр.СчетУчетаВРознице;
		Объект.СчетУчетаНаценки = Параметр.СчетУчетаНаценки;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяРозничныйВидЦены" Тогда
		Если Параметр.РассчитыватьАвтоматически 
			И ЗначениеЗаполнено(Объект.РозничныйВидЦен) Тогда
			
			ТекстСообщения = НСтр("ru = 'У вида цен ""%ВидЦен%"" включен режим автоматического расчета цен.'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦен%", Объект.РозничныйВидЦен);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.РозничныйВидЦен");
			
			Объект.РозничныйВидЦен = Неопределено;
		Иначе     			
			Объект.РозничныйВидЦен = Источник.Объект.Ссылка;			
		КонецЕсли;			
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ВидыЦен.Форма.ФормаВыбора" Тогда  		
		Объект.РозничныйВидЦен = ВыбранноеЗначение;		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", ТекущийОбъект.ЭтоНовый());
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад") Тогда
		Оповестить("Запись_Склад", Объект.Ссылка);
	КонецЕсли;
	
	Оповестить("Запись_СтруктурнаяЕдиница", Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ИзмененныеКонстанты") Тогда
		Для каждого ИмяКонстанты Из ПараметрыЗаписи.ИзмененныеКонстанты Цикл
			Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
		КонецЦикла;
	КонецЕсли;
	
	ВидУчетаОрдерныхСкладовСсылка = Объект.ВидУчетаОрдерныхСкладов;
	УчетОстатковПоЯчейкамСсылка = Объект.УчетОстатковПоЯчейкам;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") И ПараметрыЗаписи.ЭтоНовый Тогда
		ИзмененныеКонстанты = ПроверитьУстановитьФОУчетПоНесколькимСкладамПодразделениям(Объект.ТипСтруктурнойЕдиницы);
		ПараметрыЗаписи.Вставить("ИзмененныеКонстанты", ИзмененныеКонстанты);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура МОЛПриИзменении(Элемент)
	
	Объект.ПодписьМОЛ = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьМОЛПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодписьМОЛ) Тогда
		
		Объект.МОЛ = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	ДеталиПодписи = ПолучитьДанныеПодписи(Объект.ПодписьМОЛ);
	Объект.МОЛ = ДеталиПодписи.ФизическоеЛицо;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСтруктурнойЕдиницыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТипСтруктурнойЕдиницы) Тогда
		
		ОчиститьСообщения();
		
		Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов") Тогда
			Если НЕ ИзменениеТипаДоступно() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыСклад Или Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозница Тогда
			
			Элементы.ОрдерныйСклад.Доступность = Истина;
		Иначе
			
		Элементы.ОрдерныйСклад.Доступность = Ложь;
		Объект.ОрдерныйСклад = Ложь;
			
		КонецЕсли;
		
		Если ИспользуетсяПриемНаОтветХранение Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УсловияХранения", "Видимость", (Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыСклад));
			
		КонецЕсли;
		
		Элементы.РозничныйВидЦен.Видимость = (
			Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозница
			ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыСклад
			ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозницаСуммовойУчет
			ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыМагазин);
		
		Элементы.ОбработкаМенеджерПодсказокТиповыеСхемыУчета_Розница.Видимость = Элементы.РозничныйВидЦен.Видимость И УчетРозничныхПродаж;
		Элементы.ТипСтруктурнойЕдиницы.ОтображениеПодсказки = ?(Элементы.РозничныйВидЦен.Видимость И УчетРозничныхПродаж, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
		
		ОтметкаНезаполненного = (Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозница ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозницаСуммовойУчет);

		Элементы.РозничныйВидЦен.АвтоОтметкаНезаполненного = ОтметкаНезаполненного;
		Элементы.РозничныйВидЦен.ОтметкаНезаполненного = ОтметкаНезаполненного;
		
	Иначе
		
		Элементы.ОрдерныйСклад.Видимость = Истина;
		Элементы.ОрдерныйСклад.Доступность = Ложь;
		Объект.ОрдерныйСклад = Ложь;
		
	КонецЕсли;
	
	ЭтоМагазин = Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыМагазин;
	
	Элементы.ОрдерныйСклад.Видимость = Не ЭтоМагазин;
	Элементы.ГруппаПечать.Видимость = Не ЭтоМагазин;
	Элементы.МОЛ.Видимость = Не ЭтоМагазин;
	
	Объект.МОЛ = ?(ЭтоМагазин, Неопределено, Объект.МОЛ);
	
	Элементы.ОбработкаВидыСкидокНаценокРучныеИАвтоматическиеОткрытьОкругления.Видимость = НЕ (Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыПодразделение);
	
	ЭтоПодразделение = (Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация",						"Видимость", ЭтоПодразделение);
	
	РеквизитыГоловнойОрганизацииВидны = ЭтоПодразделение И ЗначениеЗаполнено(Объект.ГоловнаяОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизацияИНН",					"Видимость", РеквизитыГоловнойОрганизацииВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КПП", 										"Видимость", РеквизитыГоловнойОрганизацииВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЦифровойИндексОбособленногоПодразделения",	"Видимость", РеквизитыГоловнойОрганизацииВидны);
	
	УстановитьТекстПодсказкиВЗависимостиОтТипа();
	
	ТипСтруктурнойЕдиницы = Объект.ТипСтруктурнойЕдиницы;
	
КонецПроцедуры

&НаСервере
Функция ИзменениеТипаДоступно()
	
	Если ЕстьДвиженияПоСтруктурнойЕдинице() Тогда
		
		ТекстСообщения = НСтр("ru ='Структурная единица имеет движения по регистрам. Установка данного типа не возможна.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ТипСтруктурнойЕдиницы", "Объект");
		Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницы;
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Родитель) И Не Объект.Родитель.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыПодразделение Тогда
		Объект.Родитель = Неопределено;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	Родитель = Объект.Родитель;
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		
		Если Не Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыПодразделение Тогда
			РодительПриИзмененииСервер(Родитель);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииСервер(Родитель)
	
	Если Родитель.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыМагазин Тогда
		
		Если Не Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыПодразделение Тогда
			Объект.РозничныйВидЦен = Родитель.РозничныйВидЦен;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВыборГруппы", Истина);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		СтруктураОтбора = Новый Структура("ТипСтруктурнойЕдиницы", ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение"));
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		
		ОткрытьФорму("Справочник.СтруктурныеЕдиницы.ФормаВыбора", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоперемещениеЗапасовНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникПеремещения", Объект.ИсточникПеремещения);
	СтруктураПараметров.Вставить("ПолучательПеремещения", Объект.ПолучательПеремещения);
	СтруктураПараметров.Вставить("ПолучательОтходов", Объект.ПолучательОтходов);
	СтруктураПараметров.Вставить("ИсточникСписанияНаРасходы", Объект.ИсточникСписанияНаРасходы);
	СтруктураПараметров.Вставить("ПолучательСписанияНаРасходы", Объект.ПолучательСписанияНаРасходы);
	СтруктураПараметров.Вставить("ИсточникПередачиВЭксплуатацию", Объект.ИсточникПередачиВЭксплуатацию);
	СтруктураПараметров.Вставить("ПолучательПередачиВЭксплуатацию", Объект.ПолучательПередачиВЭксплуатацию);
	СтруктураПараметров.Вставить("ИсточникВозвратаИзЭксплуатации", Объект.ИсточникВозвратаИзЭксплуатации);
	СтруктураПараметров.Вставить("ПолучательВозвратаИзЭксплуатации", Объект.ПолучательВозвратаИзЭксплуатации);
	
	СтруктураПараметров.Вставить("ЯчейкаИсточникаПеремещения", Объект.ЯчейкаИсточникаПеремещения);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяПеремещения", Объект.ЯчейкаПолучателяПеремещения);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяОтходов", Объект.ЯчейкаПолучателяОтходов);
	СтруктураПараметров.Вставить("ЯчейкаИсточникаСписанияНаРасходы", Объект.ЯчейкаИсточникаСписанияНаРасходы);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяСписанияНаРасходы", Объект.ЯчейкаПолучателяСписанияНаРасходы);
	СтруктураПараметров.Вставить("ЯчейкаИсточникаПередачиВЭксплуатацию", Объект.ЯчейкаИсточникаПередачиВЭксплуатацию);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяПередачиВЭксплуатацию", Объект.ЯчейкаПолучателяПередачиВЭксплуатацию);
	СтруктураПараметров.Вставить("ЯчейкаИсточникаВозвратаИзЭксплуатации", Объект.ЯчейкаИсточникаВозвратаИзЭксплуатации);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяВозвратаИзЭксплуатации", Объект.ЯчейкаПолучателяВозвратаИзЭксплуатации);
	
	СтруктураПараметров.Вставить("ТипСтруктурнойЕдиницы", Объект.ТипСтруктурнойЕдиницы);
	
	Оповещение = Новый ОписаниеОповещения("АвтоперемещениеЗапасовНажатиеЗавершение",ЭтотОбъект);
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаАвтоперемещенияЗапасов", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры // АвтоперемещениеЗапасовНажатие()

&НаКлиенте
Процедура РозничныйВидЦенПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.РозничныйВидЦен) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьДанныеРозничногоВидаЦен(Объект.РозничныйВидЦен);
	
	Если СтруктураДанных.РассчитыватьАвтоматически Тогда
		
		ТекстСообщения = НСтр("ru = 'У вида цен ""%ВидЦен%"" включен режим автоматического расчета цен.'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦен%", СтруктураДанных.НаименованиеВидаЦен);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.РозничныйВидЦен");
		
		Объект.РозничныйВидЦен = Неопределено;
		
	КонецЕсли;
	
	Если НЕ СтруктураДанных.ВалютаЦены = СтруктураДанных.НациональнаяВалюта Тогда
		
		ТекстСообщения = НСтр("ru = 'У вида цен ""%ВидЦен%"", для розничной структурной единицы, должна быть задана национальная валюта (%НацВалюта%).'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦен%", СтруктураДанных.НаименованиеВидаЦен);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НацВалюта%", СтруктураДанных.НациональнаяВалюта);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.РозничныйВидЦен");
		
		Объект.РозничныйВидЦен = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры //РозничныйВидЦенПриИзменении()

&НаКлиенте
Процедура ОрдерныйСкладПриИзменении(Элемент)
	
	Если НЕ Объект.ОрдерныйСклад И Не ИзменениеКлючевыхРеквизитовВидаУчетаОстатковДоступно() Тогда
		
		Если ЗначениеЗаполнено(ВидУчетаОрдерныхСкладовСсылка) 
			И Не ВидУчетаОрдерныхСкладовСсылка = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом") Тогда
			
			Объект.ОрдерныйСклад = Истина;
			ТекстСообщения = НСтр("ru = 'По ордерному складу существуют движения по остаткам документов. Изменение вида склада невозможно.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			ЭтаФорма.Модифицированность = Ложь;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.РозничныйВидЦен.Доступность = НЕ Объект.ОрдерныйСклад;
	
	Элементы.ГруппаВидУчетаОрдерныхСкладов.Видимость = Объект.ОрдерныйСклад;
	Элементы.ГруппаИспользовать.Видимость = Объект.ОрдерныйСклад;
	
	Если Не Объект.ОрдерныйСклад Тогда
		Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.ПустаяСсылка");
		
		Объект.ИспользоватьОрдернуюСхемуПриОтгрузке = Ложь;
		Объект.ИспользоватьОрдернуюСхемуПриПеремещении = Ложь;
		Объект.ИспользоватьОрдернуюСхемуПриПоступлении = Ложь;
	Иначе
		Объект.ИспользоватьОрдернуюСхемуПриОтгрузке = Истина;
		Объект.ИспользоватьОрдернуюСхемуПриПеремещении = Истина;
		Объект.ИспользоватьОрдернуюСхемуПриПоступлении = Истина;
	КонецЕсли;
	
	Если Объект.ОрдерныйСклад И НЕ ЗначениеЗаполнено(Объект.ВидУчетаОрдерныхСкладов) Тогда
		Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом");
	КонецЕсли;
	
	Если Не Объект.ОрдерныйСклад Тогда
		Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаОрдерныхСкладовПриИзменении(Элемент)
	
	ПроверятьДвиженияПоТоварамНаСкладах = Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам")
											Или Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам");
	
	Если Не ИзменениеКлючевыхРеквизитовВидаУчетаОстатковДоступно(ПроверятьДвиженияПоТоварамНаСкладах) Тогда
		
		Объект.ВидУчетаОрдерныхСкладов = ВидУчетаОрдерныхСкладовСсылка;
		ТекстСообщения = НСтр("ru = 'По складу существуют движения. Изменение вида учета остатков по документам недоступно.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Если Не ЗначениеЗаполнено(ВидУчетаОрдерныхСкладовСсылка) Тогда
			Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом")
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Ложь;
		
		Возврат;
		
	КонецЕсли;

	Если НЕ Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом") Тогда
		Элементы.УчетОстатковПоЯчейкам.Видимость = Истина;
	Иначе 
		Объект.УчетОстатковПоЯчейкам = Ложь;
		Элементы.УчетОстатковПоЯчейкам.Видимость = Ложь;
	КонецЕсли;
	
	Объект.УчетОстатковПоЯчейкам = Ложь;
	
	УстановитьТекстПодсказкиВЗависимостиОВидаУчетаОрдерногоСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура УчетОстатковПоЯчейкамПриИзменении(Элемент)
	
	Если Не ИзменениеКлючевыхРеквизитовВидаУчетаОстатковДоступно() Тогда
		Объект.УчетОстатковПоЯчейкам = УчетОстатковПоЯчейкамСсылка;
		ТекстСообщения = НСтр("ru = 'По складу существуют движения. Изменение контроля остатков по ячейкам недоступно.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	ЭтоПодразделение = (Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение"));
	
	РеквизитыГоловнойОрганизацииВидны = ЭтоПодразделение И ЗначениеЗаполнено(Объект.ГоловнаяОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизацияИНН",					"Видимость", РеквизитыГоловнойОрганизацииВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КПП", 										"Видимость", РеквизитыГоловнойОрганизацииВидны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЦифровойИндексОбособленногоПодразделения",	"Видимость", РеквизитыГоловнойОрганизацииВидны);
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если Не Объект.Недействителен Тогда Возврат КонецЕсли;
	
	Если ЭлементОсновной() Тогда
		ПараметрыОповещения = Новый Структура();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияПредупрежденияНедействителен", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьПредупреждение(ОповещениеОЗакрытии, НСтр("ru = 'Для установки ""Недействителен"" необходимо выбрать основным другой элемент справочника.'"), , НСтр("ru = 'Элемент выбран основным'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияНедействителен(Параметры) Экспорт
	Объект.Недействителен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РозничныйВидЦенАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПолученияДанных.Отбор.Вставить("РассчитыватьАвтоматически", Ложь);
	ДанныеВыбора = ЦенообразованиеВызовСервера.ВидЦеныАвтоПодборДанныеВыбора(Текст, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура РозничныйВидЦенОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура("РассчитыватьАвтоматически", Ложь);
	ДанныеВыбора = ЦенообразованиеВызовСервера.ВидЦеныАвтоПодборДанныеВыбора(Текст, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура РозничныйВидЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("РассчитыватьАвтоматически", Ложь));
	ПараметрыФормы.Вставить("ПоказатьПодсказкуОтбора", Истина);
	
	ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РозничныйВидЦенСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РассчитыватьАвтоматически", Ложь);	
	ПараметрыФормы.Вставить("Наименование", Элемент.ТекстРедактирования);
	
	ОткрытьФорму("Справочник.ВидыЦен.ФормаОбъекта", ПараметрыФормы, Элемент,,,,,);  	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборСвойств_Справочник_СтруктурныеЕдиницы);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОпределитьНастройкиПолейДляСкладаУправляющейСистемы()
	
	ЭтаФорма.ТолькоПросмотр = Объект.СкладУправляющейСистемы;
	
	Если Не Объект.СкладУправляющейСистемы Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьСкладУправляющейСистемы", "Видимость", Ложь);
		Возврат
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГлобальныеКоманды", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОсновныеРеквизиты", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОрдерныйУчет", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПечать", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтактнаяИнформация", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДополнительныеРеквизиты", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПрочее", "Видимость", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНедействителен", "Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Функция ИзменениеКлючевыхРеквизитовВидаУчетаОстатковДоступно(ПроверятьДвиженияПоТоварамНаСкладах = Ложь) 
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат СкладскойУчетСервер.ИзмненениеВидУчетаДостпуно(Объект.Ссылка, ПроверятьДвиженияПоТоварамНаСкладах);

КонецФункции

&НаКлиенте
Процедура УстановитьТекстПодсказкиВЗависимостиОВидаУчетаОрдерногоСклада()
	
	Если ЗначениеЗаполнено(Объект.ВидУчетаОрдерныхСкладов) 
		И НЕ Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.ПоСкладуВЦелом") Тогда
		Элементы.ГруппаВидУчетаОрдерныхСкладовПодсказки.Видимость = Истина;
	Иначе
		Элементы.ГруппаВидУчетаОрдерныхСкладовПодсказки.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстПодсказки = "";
	
	Если Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.УчетОстатковПоСкладскимОрдерам") Тогда
		ТекстПодсказки = НСтр("ru ='При поступлении/отгрузке товаров, первичными документами являются приходные/расходные складские ордера. На их основании вводятся дальнейшие документы поступления/отгрузки.'");
	КонецЕсли;
	
	Если Объект.ВидУчетаОрдерныхСкладов = ПредопределенноеЗначение("Перечисление.ВидыУчетаОрдерныхСкладов.УчетОстатковПоПрочимДокументам") Тогда
		ТекстПодсказки = НСтр("ru ='При поступлении/отгрузке на основании первичных документов необходимо оформить приходные/расходные складские ордера.'");
	КонецЕсли;
	
	Элементы.ДекорацияПодсказка1.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстПодсказкиВЗависимостиОтТипа()
	
	Если ЗначениеЗаполнено(Объект.ТипСтруктурнойЕдиницы) И Не Элементы.ГруппаПодсказка.Видимость Тогда
		Элементы.ГруппаПодсказка.Видимость = Истина;
	КонецЕсли;
	
	ТекстПодсказки = "";
	
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад") Тогда
		ТекстПодсказки = НСтр("ru ='Возможна торговля оптом и в розницу. 
									|Право редактирования цен определяется настройками пользователя.'");
	КонецЕсли;
	
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница") Тогда
		ТекстПодсказки = НСтр("ru ='Возможна только розничная торговля. 
									|Цены в чеках ККМ и отчетах о розничных продажах менять вручную нельзя.'");
	КонецЕсли;
	
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет") Тогда
		ТекстПодсказки = НСтр("ru ='Возможна только розничная торговля. 
									|Цены в чеках ККМ и отчетах о розничных продажах менять вручную нельзя. 
									|Учет поступления и выбытия товаров только в денежном выражении.'");
	КонецЕсли;
	
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.МагазинГруппаСкладов") Тогда
		ТекстПодсказки = НСтр("ru ='Объект аналитики объединяющий группу структурных единиц (склады, торговые точки). 
									|Не участвует в движениях. Может быть выбран в качестве основного магазина или группы в настройках пользователя. 
									|Имеет только один уровень вложенности элементов.'");
	КонецЕсли;
	
	Если Объект.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		ТекстПодсказки = НСтр("ru ='Объект накопления затрат. 
									|Используется как аналитика учета доходов и расходов, финансового результата, планирования продаж, учета зарплаты и прочих. 
									|В производстве, перемещения на подразделение являются отложенными затратами идущими на себестоимость продукции.'");
		Элементы.ДекорацияПодсказкаОтступ.Ширина = 9;
	Иначе
		Элементы.ДекорацияПодсказкаОтступ.Ширина = 12;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстПодсказки) Тогда
		Элементы.ГруппаПодсказка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияПодсказка.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Функция ЭлементОсновной()
	
	Если Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		Настройка = ПланыВидовХарактеристик.НастройкиПользователей["ОсновноеПодразделение"]
	Иначе
		Настройка = ПланыВидовХарактеристик.НастройкиПользователей["ОсновнойСклад"]
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Настройка", Настройка);
	Запрос.УстановитьПараметр("Значение", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Настройка КАК Настройка,
	|	НастройкиПользователей.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка = &Настройка
	|	И НастройкиПользователей.Значение = &Значение";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПодписи(ПодписьМОЛ)
	
	СтруктураДанных	 = Новый Структура;
	
	СтруктураДанных.Вставить("ФизическоеЛицо",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписьМОЛ, "ФизическоеЛицо"));
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру данных по полученному виду цен
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеРозничногоВидаЦен(РозничныйВидЦен)
	
	СтруктураДанных	 = Новый Структура;
	
	СтруктураДанных.Вставить("НаименованиеВидаЦен",			РозничныйВидЦен.Наименование);
	СтруктураДанных.Вставить("НациональнаяВалюта",			Константы.НациональнаяВалюта.Получить());
	СтруктураДанных.Вставить("ВалютаЦены", 					РозничныйВидЦен.ВалютаЦены);
	СтруктураДанных.Вставить("РассчитыватьАвтоматически", 	РозничныйВидЦен.РассчитыватьАвтоматически);

	Возврат СтруктураДанных;
	
КонецФункции //ПолучитьДанныеРозничногоВидаЦен()

&НаСервере
Процедура ОтметитьОшибки(ПереченьОшибок)
	
	ЦветПодсветки = ЦветТекстаНекорректногоЗаполнения;
	
	Если ПереченьОшибок.Получить("ПредставлениеКИ_1")<> Неопределено Тогда
		НайденныеСтроки = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Попытка
				Элементы.ВидКИ_1.ЦветТекста = ЦветПодсветки;
			Исключение
			КонецПопытки;
		КонецЕсли;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидКИ_1";
		СтрокаОписанияОшибки.ИмяГруппы = "КонтактнаяИнформация";
		Элементы.КонтактнаяИнформация.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоперемещениеЗапасовНажатиеЗавершение(ПараметрыЗаполнения,Параметры) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения);
		
		Если НЕ Модифицированность 
			И ПараметрыЗаполнения.Модифицированность Тогда
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Процедура ГоловныеОрганизацииОбособленногоПодразделения()
	
	СписокВыбораОрганизаций = Элементы.ГоловнаяОрганизация.СписокВыбора;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяСсылка", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И (Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ Организации.ГоловнаяОрганизация = Организации.Ссылка)
	|	И Организации.Ссылка <> &ТекущаяСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокВыбораОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВСправочникеОтсутствуетСтруктурнаяЕдиницаСТипомСклад()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Функция ЕстьДвиженияПоСтруктурнойЕдинице()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	РегистрНакопления.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ЗапасыНаСкладах.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах КАК ЗапасыНаСкладах
	|ГДЕ
	|	ЗапасыНаСкладах.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Процедура устанавливает функциональную опцию ФункциональнаяОпцияУчетПоНесколькимСкладам и ФункциональнаяОпцияУчетПоНесколькимПодразделениям 
// при записи второго склада / подразделения в форме объекта или списка справочника СтруктурныеЕдиницы
&НаСервере
Функция ПроверитьУстановитьФОУчетПоНесколькимСкладамПодразделениям(ТипСтруктурнойЕдиницы)
	
	Результат = Новый Массив;
	
	Если ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		// Установим ФО УчетПоНесколькимПодразделениям, если записано больше одного подразделения
		ТекущееЗначениеНесколькоПодразделений = Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить();
		Если НЕ ТекущееЗначениеНесколькоПодразделений Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктурныеЕдиницы.Ссылка) КАК КоличествоПодразделений
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|ГДЕ
			|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
			|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Выборка.КоличествоПодразделений > 1 Тогда
				Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Установить(Истина);
				Результат.Добавить("ФункциональнаяОпцияУчетПоНесколькимПодразделениям");
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Установим ФО УчетПоНесколькимСкладам, если записано больше одного подразделения
		ТекущееЗначениеНесколькоСкладов = Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить();
		Если НЕ ТекущееЗначениеНесколькоСкладов Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктурныеЕдиницы.Ссылка) КАК КоличествоСкладов
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
			|ГДЕ
			|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы <> ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
			|	И НЕ СтруктурныеЕдиницы.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Выборка.КоличествоСкладов > 1 Тогда
				Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Установить(Истина);
				Результат.Добавить("ФункциональнаяОпцияУчетПоНесколькимСкладам");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры
&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	УправлениеКонтактнойИнформациейУНФ.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, , Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#КонецОбласти
