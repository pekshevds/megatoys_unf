
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеСостоянияЗавершен(УсловноеОформление,
		ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен"),
		"Объект.ПорядокСостояний.Состояние",
		"ПорядокСостояний");
		
	ОтображатьЗадачиПроизводства = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство");
	ИспользоватьПроцессы         = ПолучитьФункциональнуюОпцию("ИспользоватьПроцессыСостояний");
	ТолькоПросмотрЗадач = НЕ Пользователи.ЭтоПолноправныйПользователь();
	ИндексСозданныхЭлементов = 3;
	
	Если Параметры.Свойство("НастройкаПроцессов") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПроцессы;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"СтраницаПроцессы", 
		"Видимость", 
		ИспользоватьПроцессы);

	ЗаполнитьТаблицуПроцессов();
	ОбновитьЭлементыПроцессов();
	УстановитьФлагиПроцессов();
		
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	ЗаполнитьСписокВыбораСостоянияВыполнения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СостоянияЗаказНарядов" Тогда
		УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВидыЗаказНарядов", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	СохранитьДанныеПроцессов(ТекущийОбъект)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СостояниеВыполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораСостоянияВыполнения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПорядокСостояний.НайтиСтроки(Новый Структура("Состояние", ВыбранноеЗначение)).Количество() = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выбранного состояния нет среди используемых в виде заказ-наряда.'"),
			,
			"Объект.СостояниеВыполнения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСостоянийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандВверхВниз();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСостоянийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму("Справочник.СостоянияЗаказНарядов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСостоянийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если Объект.ПорядокСостояний.НайтиСтроки(Новый Структура("Состояние", ВыбранноеЗначение)).Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если Элемент.ТекущаяСтрока = Неопределено Или ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен") Тогда
			НоваяСтрока = Объект.ПорядокСостояний.Добавить();
		Иначе
			НоваяСтрока = Объект.ПорядокСостояний.Вставить(Объект.ПорядокСостояний.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).НомерСтроки-1);
		КонецЕсли;
		НоваяСтрока.Состояние = ВыбранноеЗначение;
		
		Элемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСостоянийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ЗапрещеноИзменениеПорядка = Ложь;
	
	СтрокаПорядкаСостояний = Объект.ПорядокСостояний.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Если СтрокаПорядкаСостояний <> Неопределено
		И СтрокаПорядкаСостояний.Состояние = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен") Тогда
		
		ЗапрещеноИзменениеПорядка = Истина;
	КонецЕсли;
	
	Если Не ЗапрещеноИзменениеПорядка И Строка <> Неопределено Тогда
		СтрокаПорядкаСостояний = Объект.ПорядокСостояний.НайтиПоИдентификатору(Строка);
		Если СтрокаПорядкаСостояний <> Неопределено
			И СтрокаПорядкаСостояний.Состояние = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен") Тогда
			
			ЗапрещеноИзменениеПорядка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапрещеноИзменениеПорядка Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВсе(Команда)
	
	ДобавитьВсеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ПереместитьСтрокуТЧ(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьСтрокуТЧ(1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеПоЦветамСостоянийСервер()
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеПоЦветамСостояний(УсловноеОформление,
		Метаданные.Справочники.СостоянияЗаказНарядов.ПолноеИмя(),
		"Объект.ПорядокСостояний.Состояние",
		"ПорядокСостояний");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияЗаказНарядов.Ссылка КАК Состояние,
		|	ВЫБОР
		|		КОГДА СостоянияЗаказНарядов.Ссылка = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказНарядов.Завершен)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.СостоянияЗаказНарядов КАК СостоянияЗаказНарядов
		|ГДЕ
		|	СостоянияЗаказНарядов.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	СостоянияЗаказНарядов.Наименование";
	
	Состояния = Запрос.Выполнить().Выгрузить();
	
	Объект.ПорядокСостояний.Загрузить(Состояния);
	ОбновитьПроцессы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтрокуТЧ(Смещение)
	
	Если Элементы.ПорядокСостояний.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПорядка = Объект.ПорядокСостояний.НайтиПоИдентификатору(Элементы.ПорядокСостояний.ТекущаяСтрока);
	Если СтрокаПорядка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаПорядка.НомерСтроки + Смещение = 0
		Или СтрокаПорядка.НомерСтроки + Смещение > Объект.ПорядокСостояний.Количество()
		Или Объект.ПорядокСостояний[СтрокаПорядка.НомерСтроки+Смещение-1].Состояние = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен") Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.ПорядокСостояний.Сдвинуть(СтрокаПорядка.НомерСтроки-1, Смещение);
	УстановитьДоступностьКомандВверхВниз();
	ОбновитьПроцессы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандВверхВниз()
	
	Данные = Элементы.ПорядокСостояний.ТекущиеДанные;
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗавершен = Данные.Состояние = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен");
	
	Элементы.ПорядокСостояний.ИзменятьПорядокСтрок			= Не ЭтоЗавершен;
	Элементы.ПорядокСостоянийПереместитьВниз.Доступность	= Не ЭтоЗавершен;
	Элементы.ПорядокСостоянийПереместитьВверх.Доступность	= Не ЭтоЗавершен;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСостоянияВыполнения(Форма)
	
	Форма.Элементы.СостояниеВыполнения.СписокВыбора.Очистить();
	Для Каждого СтрокаСостояния Из Форма.Объект.ПорядокСостояний Цикл
		Форма.Элементы.СостояниеВыполнения.СписокВыбора.Добавить(СтрокаСостояния.Состояние);
	КонецЦикла;
	
КонецПроцедуры

#Область УправлениеЭлементамиПроцессов

&НаСервере
Процедура УстановитьОформлениеДекорацииЗаголовка(Декорация, ЭталонныйЭлемент, Заголовок)
	
	Декорация.Вид = ЭталонныйЭлемент.Вид;
	Декорация.ГоризонтальноеПоложение = ЭталонныйЭлемент.ГоризонтальноеПоложение;
	Декорация.ГоризонтальноеПоложениеВГруппе = ЭталонныйЭлемент.ГоризонтальноеПоложениеВГруппе;
	Декорация.Заголовок = Заголовок;
	Декорация.Ширина = ЭталонныйЭлемент.Ширина;
	Декорация.Видимость = ЭталонныйЭлемент.Видимость;
	Декорация.РастягиватьПоГоризонтали = ЭталонныйЭлемент.РастягиватьПоГоризонтали;
	Декорация.Высота = ЭталонныйЭлемент.Высота;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыПроцессов()

	Если НЕ ИспользоватьПроцессы Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ПорядокСостояний.Количество() = 0 Тогда
		Элементы.ГруппаЗаголовкиСостояний.Видимость = Ложь;
	Иначе
		Элементы.ГруппаЗаголовкиСостояний.Видимость = Истина;
	КонецЕсли;
	
	УдалитьПодчиненныеЭлементы();
	ЗаполнитьЗаголовкиСостояний();
	
	ГруппыПроцессов = Процессы.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина));
	
	Для Каждого Группа Из ГруппыПроцессов Цикл
		
		ИндексГруппы = Группа.ИндексГруппы;
		Если ИндексГруппы < ИндексСозданныхЭлементов Тогда
			ГруппаЗаголовка = Элементы["ГруппаДействий_"+ИндексГруппы];
			ГруппаОтступа = Элементы["ОтступыГруппыДействий_"+ИндексГруппы];
		Иначе
			ГруппаЗаголовка = Элементы.Добавить("ГруппаДействий_" + ИндексГруппы, Тип("ГруппаФормы"), Элементы.ДействияПоЗаказу);
			УстановитьОформлениеГруппы(ГруппаЗаголовка, Элементы.ГруппаДействий_0);
			
			ДекорацияНадпись = Элементы.Добавить("ЗаголовокДействия_" + ИндексГруппы, Тип("ДекорацияФормы"), ГруппаЗаголовка);
			УстановитьОформлениеДекорацииЗаголовка(ДекорацияНадпись, Элементы.ЗаголовокДействия_0, Группа.Наименование);
			ДекорацияНадпись.Подсказка = Группа.ПодсказкаГруппы;
			ДекорацияНадпись.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
			
			ГруппаОтступа = Элементы.Добавить("ОтступыГруппыДействий_" + ИндексГруппы, Тип("ГруппаФормы"), ГруппаЗаголовка);
			УстановитьОформлениеГруппы(ГруппаОтступа, Элементы.ОтступыГруппыДействий_0);
		КонецЕсли;

		ИндексСостояния = 0;
		ОбработанныеСостояния = Новый Массив;
		
		Для Каждого Состояние Из Объект.ПорядокСостояний Цикл
			
			Если ОбработанныеСостояния.Найти(Состояние.Состояние) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДекорацияНадпись = Элементы.Добавить("ГруппаДействия_"+ ИндексГруппы + "_Состояние_"+ИндексСостояния, Тип("ДекорацияФормы"), ГруппаОтступа);
			УстановитьОформлениеДекорацииЗаголовка(ДекорацияНадпись, 
				Элементы.ГруппаДействия_0_Состояние_ЗавершенУспешно, 
				Элементы.ГруппаДействия_0_Состояние_ЗавершенУспешно.Заголовок);
				
			ИндексСостояния = ИндексСостояния + 1;
			ОбработанныеСостояния.Добавить(Состояние.Состояние);
		КонецЦикла;
		
		ДействияГруппы = Процессы.НайтиСтроки(Новый Структура("КлючГруппы", Группа.Ключ));
		
		Для Каждого Действия Из ДействияГруппы Цикл
			
			ИндексДействия = Действия.ИндексДействия;
			
			Если ИндексГруппы < ИндексСозданныхЭлементов Тогда
				
				ГруппаЗаголовка = Элементы["ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия];
				ГруппаОтступа = Элементы["ФлагиГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия];
				
			Иначе
				ГруппаЗаголовка = Элементы.Добавить("ГруппаДействий_" + ИндексГруппы + "_Действие_" + ИндексДействия, Тип("ГруппаФормы"), Элементы.ДействияПоЗаказу);
				УстановитьОформлениеГруппы(ГруппаЗаголовка, Элементы.ГруппаДействий_0_Действие_0);
				
				ДекорацияНадпись = Элементы.Добавить("ГруппаДействий_" + ИндексГруппы + "_Действие_"+ИндексДействия+"_Заголовок", Тип("ДекорацияФормы"), ГруппаЗаголовка);
				ДекорацияНадпись.Вид = Элементы.ГруппаДействий_0_Действие_0_Заголовок.Вид;
				ДекорацияНадпись.ГоризонтальноеПоложение = Элементы.ГруппаДействий_0_Действие_0_Заголовок.ГоризонтальноеПоложение;
				ДекорацияНадпись.ГоризонтальноеПоложениеВГруппе = Элементы.ГруппаДействий_0_Действие_0_Заголовок.ГоризонтальноеПоложениеВГруппе;
				ДекорацияНадпись.Заголовок = Действия.Наименование;
				ДекорацияНадпись.Ширина = Элементы.ГруппаДействий_0_Действие_0_Заголовок.Ширина;
				ДекорацияНадпись.Видимость = Элементы.ГруппаДействий_0_Действие_0_Заголовок.Видимость;
				ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.ГруппаДействий_0_Действие_0_Заголовок.РастягиватьПоГоризонтали;
				ДекорацияНадпись.Гиперссылка = Действия.ЭтоЗадачаАссистента;
				ДекорацияНадпись.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
				Если Действия.ЭтоЗадачаАссистента Тогда
					ДекорацияНадпись.УстановитьДействие("Нажатие", "Подключаемый_ОткрытьФормуЗадачи");
				КонецЕсли;
				
				ГруппаОтступа = Элементы.Добавить("ФлагиГруппыДействий_" + ИндексГруппы + "_Действие_"+ ИндексДействия, Тип("ГруппаФормы"), ГруппаЗаголовка);
				УстановитьОформлениеГруппы(ГруппаОтступа, Элементы.ФлагиГруппаДействий_0_Действие_0);
			КонецЕсли;
	
			ИндексСостояния = 0;
			ОбработанныеСостояния = Новый Массив;
			
			Для Каждого Состояние Из Объект.ПорядокСостояний Цикл
				
				Если ОбработанныеСостояния.Найти(Состояние.Состояние) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Состояние.Состояние = Справочники.СостоянияЗаказНарядов.Завершен Тогда
					
					Если ИндексГруппы < ИндексСозданныхЭлементов Тогда
						
						ДекорацияНадпись = Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенУспешно"];
						ДекорацияНадпись.Картинка = Элементы.ДекорацияНетКартинки.Картинка;
						ДекорацияНадпись.Гиперссылка = НЕ ТолькоПросмотрЗадач И НЕ Действия.ЭтоЗадачаАссистента;
						Если ДекорацияНадпись.Гиперссылка Тогда
							ДекорацияНадпись.УстановитьДействие("Нажатие", Действия.ОбработкаНажатия);
						КонецЕсли; 
						
						ДекорацияНадпись = Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенОтменен"];
						ДекорацияНадпись.Картинка = Элементы.ДекорацияНетКартинки.Картинка;
						ДекорацияНадпись.Гиперссылка = НЕ ТолькоПросмотрЗадач И НЕ Действия.ЭтоЗадачаАссистента;
						Если ДекорацияНадпись.Гиперссылка Тогда
							ДекорацияНадпись.УстановитьДействие("Нажатие", Действия.ОбработкаНажатия);
						КонецЕсли;
						
						ИндексСостояния = ИндексСостояния + 1;
						ОбработанныеСостояния.Добавить(Состояние.Состояние);
						Продолжить;
					КонецЕсли;
					
					ДекорацияНадпись = Элементы.Добавить("Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенУспешно", Тип("ДекорацияФормы"), ГруппаОтступа);
					ДекорацияНадпись.Вид = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Вид;
					ДекорацияНадпись.Картинка = Элементы.ДекорацияНетКартинки.Картинка;
					ДекорацияНадпись.Гиперссылка = НЕ ТолькоПросмотрЗадач И НЕ Действия.ЭтоЗадачаАссистента;
					ДекорацияНадпись.ГоризонтальноеПоложениеВГруппе = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.ГоризонтальноеПоложениеВГруппе;
					ДекорацияНадпись.Заголовок = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Заголовок;
					ДекорацияНадпись.Ширина = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Ширина;
					ДекорацияНадпись.Видимость = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Видимость;
					ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.РастягиватьПоГоризонтали;
					ДекорацияНадпись.Высота = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Высота;
					Если ДекорацияНадпись.Гиперссылка Тогда
						ДекорацияНадпись.УстановитьДействие("Нажатие", Действия.ОбработкаНажатия);
					КонецЕсли;
					
					ДекорацияНадпись = Элементы.Добавить("Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенОтменен", Тип("ДекорацияФормы"), ГруппаОтступа);
					ДекорацияНадпись.Вид = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Вид;
					ДекорацияНадпись.Картинка = Элементы.ДекорацияНетКартинки.Картинка;
					ДекорацияНадпись.Гиперссылка =  НЕ ТолькоПросмотрЗадач И НЕ Действия.ЭтоЗадачаАссистента;
					ДекорацияНадпись.ГоризонтальноеПоложениеВГруппе = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.ГоризонтальноеПоложениеВГруппе;
					ДекорацияНадпись.Заголовок = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Заголовок;
					ДекорацияНадпись.Ширина = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Ширина;
					ДекорацияНадпись.Видимость = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Видимость;
					ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.РастягиватьПоГоризонтали;
					ДекорацияНадпись.Высота = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Высота;
					Если ДекорацияНадпись.Гиперссылка Тогда
						ДекорацияНадпись.УстановитьДействие("Нажатие", Действия.ОбработкаНажатия);
					КонецЕсли;
				
					ИндексСостояния = ИндексСостояния + 1;
					ОбработанныеСостояния.Добавить(Состояние.Состояние);
					Продолжить;
					
				КонецЕсли;
				
				ДекорацияНадпись = Элементы.Добавить("Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_Состояние_"+ ИндексСостояния, Тип("ДекорацияФормы"), ГруппаОтступа);
				ДекорацияНадпись.Вид = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Вид;
				ДекорацияНадпись.Картинка = Элементы.ДекорацияНетКартинки.Картинка;
				ДекорацияНадпись.Гиперссылка = НЕ ТолькоПросмотрЗадач И НЕ Действия.ЭтоЗадачаАссистента;
				ДекорацияНадпись.ГоризонтальноеПоложениеВГруппе = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.ГоризонтальноеПоложениеВГруппе;
				ДекорацияНадпись.Заголовок = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Заголовок;
				ДекорацияНадпись.Ширина = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Ширина;
				ДекорацияНадпись.Видимость = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Видимость;
				ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.РастягиватьПоГоризонтали;
				ДекорацияНадпись.Высота = Элементы.Флаг_ГруппаДействий_0_Действие_0_СостояниеЗавершенУспешно.Высота;
				Если ДекорацияНадпись.Гиперссылка Тогда
					ДекорацияНадпись.УстановитьДействие("Нажатие", Действия.ОбработкаНажатия);
				КонецЕсли;
				
				ИндексСостояния = ИндексСостояния + 1;
				ОбработанныеСостояния.Добавить(Состояние.Состояние);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПереместитьЭлементыЗавершения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиСостояний()
	
	ИндексСостояния = 0;
	ШиринаСостояния = 19;
	ЦветЗавершенногоСостояния = Неопределено;
	ГруппаСостояний = Элементы.ГруппаЗаголовкиСостояний;
	
	ОбработанныеСостояния = Новый Массив;
	Для Каждого Состояние Из Объект.ПорядокСостояний Цикл
		
		Если ОбработанныеСостояния.Найти(Состояние.Состояние) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Состояние.Состояние = Справочники.СостоянияЗаказНарядов.Завершен Тогда
			ЦветЗавершенногоСостояния = Состояние.Состояние.Цвет.Получить();
			ОбработанныеСостояния.Добавить(Состояние.Состояние);
			Продолжить;
		КонецЕсли;
		
		ГруппаЗаголовка = Элементы.Добавить("Состояние_" + ИндексСостояния, Тип("ГруппаФормы"), ГруппаСостояний);
		УстановитьОформлениеГруппы(ГруппаЗаголовка, Элементы.Состояние_ЗавершенУспешно);
		
		ДекорацияНадпись = Элементы.Добавить("ЗаголовокСостояние_" + ИндексСостояния, Тип("ДекорацияФормы"), ГруппаЗаголовка);
		ДекорацияНадпись.Вид = Элементы.ЗаголовокСостояние_ЗавершенУспешно.Вид;
		ДекорацияНадпись.ГоризонтальноеПоложение = Элементы.ЗаголовокСостояние_ЗавершенУспешно.ГоризонтальноеПоложение;
		ДекорацияНадпись.ГоризонтальноеПоложениеВГруппе = Элементы.ЗаголовокСостояние_ЗавершенУспешно.ГоризонтальноеПоложениеВГруппе;
		ДекорацияНадпись.Заголовок = Строка(Состояние.Состояние);
		ДекорацияНадпись.Ширина = ШиринаСостояния;
		ДекорацияНадпись.Видимость = Элементы.ЗаголовокСостояние_ЗавершенУспешно.Видимость;
		ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.ЗаголовокСостояние_ЗавершенУспешно.РастягиватьПоГоризонтали;
		
		ДекорацияНадпись = Элементы.Добавить("ЛинияСостояние_" + ИндексСостояния, Тип("ДекорацияФормы"), ГруппаЗаголовка);
		ДекорацияНадпись.Вид = Элементы.ЛинияСостояние_ЗавершенУспешно.Вид;
		ДекорацияНадпись.Заголовок = Элементы.ЛинияСостояние_ЗавершенУспешно.Заголовок;
		ДекорацияНадпись.Ширина = ШиринаСостояния;
		ДекорацияНадпись.Видимость = Элементы.ЛинияСостояние_ЗавершенУспешно.Видимость;
		ДекорацияНадпись.РастягиватьПоГоризонтали = Элементы.ЛинияСостояние_ЗавершенУспешно.РастягиватьПоГоризонтали;
		ДекорацияНадпись.ГоризонтальноеПоложение = Элементы.ЛинияСостояние_ЗавершенУспешно.ГоризонтальноеПоложение;
		ДекорацияНадпись.ГоризонтальноеПоложениеВГруппе = Элементы.ЛинияСостояние_ЗавершенУспешно.ГоризонтальноеПоложениеВГруппе;
		ЦветСостояния = Состояние.Состояние.Цвет.Получить();
		
		Если ЦветСостояния <> Неопределено Тогда
			ДекорацияНадпись.ЦветТекста = ЦветСостояния;
		КонецЕсли;
		
		ИндексСостояния = ИндексСостояния + 1; 
		ОбработанныеСостояния.Добавить(Состояние.Состояние);
		
	КонецЦикла;

	Элементы.Переместить(Элементы.Состояние_ЗавершенУспешно, Элементы.ГруппаЗаголовкиСостояний);
	Элементы.Переместить(Элементы.Состояние_ЗавершенОтменен, Элементы.ГруппаЗаголовкиСостояний);
	
	Если ЦветЗавершенногоСостояния <> Неопределено Тогда
		Элементы.ЛинияСостояние_ЗавершенУспешно.ЦветТекста = ЦветЗавершенногоСостояния;
		Элементы.ЛинияСостояние_ЗавершенОтменен.ЦветТекста = ЦветЗавершенногоСостояния;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеГруппы(ДобавляемаяГруппа, ГруппаФормы)
	
	ДобавляемаяГруппа.Вид = ГруппаФормы.Вид;
	ДобавляемаяГруппа.Отображение = ГруппаФормы.Отображение;
	ДобавляемаяГруппа.Группировка = ГруппаФормы.Группировка;
	ДобавляемаяГруппа.ОтображатьЗаголовок = ГруппаФормы.ОтображатьЗаголовок;
	ДобавляемаяГруппа.ЦветФона = ГруппаФормы.ЦветФона;
	ДобавляемаяГруппа.СквозноеВыравнивание = ГруппаФормы.СквозноеВыравнивание;
	ДобавляемаяГруппа.Объединенная = ГруппаФормы.Объединенная;
	ДобавляемаяГруппа.Ширина = ГруппаФормы.Ширина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПроцессов()
	
	Процессы.Очистить();
	
	НоваяГруппа = Процессы.Добавить();
	НоваяГруппа.ЭтоГруппа = Истина;
	НоваяГруппа.ИндексГруппы	  = 0;
	НоваяГруппа.Ключ	  = "СостояниеВыполнения";
	НоваяГруппа.Наименование = НСтр("ru = 'Реализация работ, услуг, товаров'");
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 0;
	НовоеДействие.ИндексДействия	  = 0;
	НовоеДействие.Ключ	  = "НастройкаСостояниеВыполнения";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.НаФорме;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
	НовоеДействие.Наименование = НСтр("ru = 'Состояние выполнения'");
	НовоеДействие.КлючГруппы   = "СостояниеВыполнения";
	НовоеДействие.ОбработкаНажатия = "Подключаемый_НажатиеФлагСостояниеВыполнения";
	
	НоваяГруппа = Процессы.Добавить();
	НоваяГруппа.ЭтоГруппа = Истина;
	НоваяГруппа.ИндексГруппы	  = 1;
	НоваяГруппа.Ключ	  = "КорректировкаЗаказа";
	НоваяГруппа.Наименование = НСтр("ru = 'Корректировка заказа'");
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 1;
	НовоеДействие.ИндексДействия	  = 0;
	НовоеДействие.Ключ	  = "ОбязательноеЗаполнениеПричиныОтмены";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.НаФорме;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
	НовоеДействие.Наименование = НСтр("ru = 'Обязательно заполнять поле ""Причина отмены товара""'");
	НовоеДействие.КлючГруппы   = "КорректировкаЗаказа";
	НовоеДействие.ОбработкаНажатия = "Подключаемый_НажатиеФлагОбязательноЗаполнение";
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 1;
	НовоеДействие.ИндексДействия = 1;
	НовоеДействие.Ключ	  = "Предупреждать о неотгруженных товарах";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.НаФорме;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ТолькоВПоследнемСостоянии;
	НовоеДействие.Наименование = НСтр("ru = 'Предпреждать о неотгруженных товарах при завершении заказа'");
	НовоеДействие.КлючГруппы   = "КорректировкаЗаказа";	
	НовоеДействие.ОбработкаНажатия = "Подключаемый_НажатиеЗапрещатьЗавершениеНеотгруженныхЗаказов";
	
	НоваяГруппа = Процессы.Добавить();
	НоваяГруппа.ЭтоГруппа = Истина;
	НоваяГруппа.ИндексГруппы = 2;
	НоваяГруппа.Ключ	  = "ОбщиеНастройки";
	НоваяГруппа.Наименование = НСтр("ru = 'Общие настройки (для всех видов)'");
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 2;
	НовоеДействие.ИндексДействия = 0;
	НовоеДействие.Ключ	  = "ЗапрещатьИзмененияПрошлыхПериодов";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.НаФорме;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
	НовоеДействие.Наименование = НСтр("ru = 'Запрещать изменения прошлых периодов'");
	НовоеДействие.КлючГруппы   = "ОбщиеНастройки";
	НовоеДействие.ОбработкаНажатия = "Подключаемый_НажатиеЗапрещатьИзменениеПрошлыхПериодов";
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 2;
	НовоеДействие.ИндексДействия = 1;
	НовоеДействие.Ключ	  = "Версионирование";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.НаФорме;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ТолькоВПервомСостоянии;
	НовоеДействие.Наименование = НСтр("ru = 'Хранить историю изменений (заказ покупателя, заказ-наряд)'");
	НовоеДействие.КлючГруппы   = "ОбщиеНастройки";
	НовоеДействие.ОбработкаНажатия = "Подключаемый_НажатиеХранитьИсториюИзменений";
		
	НоваяГруппа = Процессы.Добавить();
	НоваяГруппа.ЭтоГруппа = Истина;
	НоваяГруппа.ИндексГруппы	  = 3;
	НоваяГруппа.Ключ	  = "ОтправитьОповещение";
	НоваяГруппа.Наименование = НСтр("ru = 'Даша, отправь оповещение'");
	НоваяГруппа.ПодсказкаГруппы = 
	НСтр("ru = 'В программе реализован «Ассистент управления нашей фирмой» – Даша. 
	|Даша, как и обычный сотрудник, выполняет поручения в 1С:УНФ. 
	|Например, обрабатывает заказы при получении оплаты или отгрузке.
	|
	|При изменении состояния заказа Даша может оповестить клиента, менджера. '");
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 3;
	НовоеДействие.ИндексДействия = 0;
	НовоеДействие.Ключ	  = "ОповещениеКлиентаОбИзмененииСостоянияЗаказа";
	НовоеДействие.КлючГруппы   = "ОтправитьОповещение";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.ВнешняяНастройка;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
	НовоеДействие.Наименование = НСтр("ru = 'Оповести клиента'");
	НовоеДействие.ЭтоЗадачаАссистента   = Истина;
	НовоеДействие.ИмяФормыЗадачиАссистента   = "Обработка.АссистентУправления.Форма.ОповещениеКлиентаОбИзмененииСостоянияЗаказа";
	НовоеДействие.ИдентификаторГруппыАссистента   = "ОповещениеКлиентаОбИзмененииСостоянияЗаказа";
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 3;
	НовоеДействие.ИндексДействия = 1;
	НовоеДействие.Ключ	  = "ОповеститьСотрудника";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.ВнешняяНастройка;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
	НовоеДействие.Наименование = НСтр("ru = 'Оповести сотрудника'");
	НовоеДействие.КлючГруппы   = "ОтправитьОповещение";
	НовоеДействие.ЭтоЗадачаАссистента   = Истина;
	НовоеДействие.ИмяФормыЗадачиАссистента   = "Обработка.АссистентУправления.Форма.ОповещениеПользователяОбИзмененииСостоянияЗП";
	НовоеДействие.ИдентификаторГруппыАссистента   = "ОповещениеПользователяОбИзмененииСостоянияЗаказаПокупателя";

	НоваяГруппа = Процессы.Добавить();
	НоваяГруппа.ЭтоГруппа = Истина;
	НоваяГруппа.ИндексГруппы = 4;
	НоваяГруппа.Ключ	  = "СвязанныеЗаказы";
	НоваяГруппа.Наименование = НСтр("ru = 'Даша, измени состояние связанных заказов'");
	НоваяГруппа.ПодсказкаГруппы = 
	НСтр("ru = 'В программе реализован «Ассистент управления нашей фирмой» – Даша (CRM - Сервис - Ассистент управления нашей фирмой). 
	|Даша, как и обычный сотрудник, выполняет поручения в 1С:УНФ. 
	|Например, обрабатывает заказы при получении оплаты или отгрузке.
	|
	|При изменении состояния заказа Даша может изменить состояние связанных заказов. '");
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 4;
	НовоеДействие.ИндексДействия = 0;
	НовоеДействие.Ключ	  = "ИзменитьЗаказПоставщику";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.ВнешняяНастройка;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
	НовоеДействие.Наименование = НСтр("ru = 'Измени состояние заказа поставщику'");
	НовоеДействие.КлючГруппы   = "СвязанныеЗаказы";
	НовоеДействие.ЭтоЗадачаАссистента   = Истина;
	НовоеДействие.ИмяФормыЗадачиАссистента   = "Обработка.АссистентУправления.Форма.ДействияСЗаказомПоставщикуПоСостояниюСвязанныхЗаказов";
	НовоеДействие.ИдентификаторГруппыАссистента   = "ИзменениеСостоянияЗаказаПоставщикуПоСостояниюЗаказовПокупателей";
	
	Если ОтображатьЗадачиПроизводства Тогда
		НовоеДействие = Процессы.Добавить();
		НовоеДействие.ИндексГруппы	  = 4;
		НовоеДействие.ИндексДействия = 1;
		НовоеДействие.Ключ	  = "ИзменитьЗаказНаПроизводство";
		НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.ВнешняяНастройка;
		НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
		НовоеДействие.Наименование = НСтр("ru = 'Изменени состояние заказа на производство'");
		НовоеДействие.КлючГруппы   = "СвязанныеЗаказы";
		НовоеДействие.ЭтоЗадачаАссистента   = Истина;
		НовоеДействие.ИмяФормыЗадачиАссистента   = "Обработка.АссистентУправления.Форма.ДействияСЗаказомНаПроизводствоПоСостояниюСвязанныхЗаказов";
		НовоеДействие.ИдентификаторГруппыАссистента   = "ИзменениеСостоянияЗаказаНаПроизводствоПоСостояниюЗаказовПокупателей";
	КонецЕсли;
	
	НоваяГруппа = Процессы.Добавить();
	НоваяГруппа.ЭтоГруппа = Истина;
	НоваяГруппа.ИндексГруппы	  = 5;
	НоваяГруппа.Ключ	  = "ПереводЗаказаВСостояние";
	НоваяГруппа.Наименование = НСтр("ru = 'Даша, переведи заказ в состояние'");
	НоваяГруппа.ПодсказкаГруппы = 
	НСтр("ru = 'В программе реализован «Ассистент управления нашей фирмой» – Даша (CRM - Сервис - Ассистент управления нашей фирмой). 
	|Даша, как и обычный сотрудник, выполняет поручения в 1С:УНФ. 
	|Например, обрабатывает заказы при получении оплаты или отгрузке.
	|
	|При выполнении определенных действий в программе Даша может перевести заказ в указанное состояние. '");
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 5;
	НовоеДействие.ИндексДействия = 0;
	НовоеДействие.Ключ	  = "ИзменениеСтатусаОплаты";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.ВнешняяНастройка;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
	НовоеДействие.Наименование = НСтр("ru = 'При изменении статуса оплаты'");
	НовоеДействие.КлючГруппы   = "ПереводЗаказаВСостояние";
	НовоеДействие.ЭтоЗадачаАссистента   = Истина;
	НовоеДействие.ИмяФормыЗадачиАссистента   = "Обработка.АссистентУправления.Форма.ИзменениеСостоянияЗаказаПриОплате";
	НовоеДействие.ИдентификаторГруппыАссистента   = "ИзменениеСостоянияЗаказаПриОплате";
	
	
	НовоеДействие = Процессы.Добавить();
	НовоеДействие.ИндексГруппы	  = 5;
	НовоеДействие.ИндексДействия = 1;
	НовоеДействие.Ключ	  = "ИзменениеСостоянияЗаказаПоставщику";
	НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.ВнешняяНастройка;
	НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
	НовоеДействие.Наименование = НСтр("ru = 'При изменении состояния заказа поставщику'");
	НовоеДействие.КлючГруппы   = "ПереводЗаказаВСостояние";
	НовоеДействие.ЭтоЗадачаАссистента   = Истина;
	НовоеДействие.ИмяФормыЗадачиАссистента   = "Обработка.АссистентУправления.Форма.ДействияСЗаказомПокупателяПоСостояниюСвязанныхЗаказов";
	НовоеДействие.ИдентификаторГруппыАссистента   = "ИзменениеСостоянияЗаказаПокупателяПоСостояниюЗаказовПоставщикам";
	
	Если ОтображатьЗадачиПроизводства Тогда
		НовоеДействие = Процессы.Добавить();
		НовоеДействие.ИндексГруппы	  = 5;
		НовоеДействие.ИндексДействия = 2;
		НовоеДействие.Ключ	  = "ИзменениеСостоянияЗаказаНаПроизводство";
		НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.ВнешняяНастройка;
		НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
		НовоеДействие.Наименование = НСтр("ru = 'При изменении состояния заказа на производство'");
		НовоеДействие.КлючГруппы   = "ПереводЗаказаВСостояние";
		НовоеДействие.ЭтоЗадачаАссистента   = Истина;
		НовоеДействие.ИмяФормыЗадачиАссистента   = "Обработка.АссистентУправления.Форма.ДействияСЗаказомПокупателяПоСостояниюСвязанныхЗаказов";
		НовоеДействие.ИдентификаторГруппыАссистента   = "ИзменениеСостоянияЗаказаПокупателяПоСостояниюЗаказовНаПроизводство";
		
		НовоеДействие = Процессы.Добавить();
		НовоеДействие.ИндексГруппы	  = 5;
		НовоеДействие.ИндексДействия = 3;
		НовоеДействие.Ключ	  = "ИзменениеСостоянияЗаказаПоставщикаИНаПроизводство";
		НовоеДействие.ТипНастройки = Перечисления.ТипыНастройкиПроцессовСостояний.ВнешняяНастройка;
		НовоеДействие.ВидНастройки = Перечисления.ВидыНастройкиПроцессовСостояний.ВоВсехСостояниях;
		НовоеДействие.Наименование = НСтр("ru = 'При изменении состояния заказа поставщика и заказа на производство'");
		НовоеДействие.КлючГруппы   = "ПереводЗаказаВСостояние";
		НовоеДействие.ЭтоЗадачаАссистента   = Истина;
		НовоеДействие.ИмяФормыЗадачиАссистента   = "Обработка.АссистентУправления.Форма.ДействияСЗаказомПокупателяПоСостояниюСвязанныхЗаказов";
		НовоеДействие.ИдентификаторГруппыАссистента   = "ИзменениеСостоянияЗаказаПокупателяПоСостояниюЗаказовПоставщикамИНаПроизводство";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИндексГруппы(ИмяГруппы)
	
	ИмяГруппыДляПоиска = Сред(ИмяГруппы, СтрДлина("Флаг_ГруппаДействий_")+1);
	ИндексПервойГруппы = СтрНайти(ИмяГруппыДляПоиска, "_",НаправлениеПоиска.СНачала);
	ИндексГруппы = Число(Лев(ИмяГруппыДляПоиска, ИндексПервойГруппы - 1)); 
	
	Возврат ИндексГруппы;
	
КонецФункции

&НаСервере
Функция ИндексДействия(ИмяГруппы)
	
	ИндексПервогоЧисла = СтрНайти(ИмяГруппы, "_",НаправлениеПоиска.СКонца);
	ИндексДействия = Число(Прав(ИмяГруппы, СтрДлина(ИмяГруппы) - ИндексПервогоЧисла));
	
	Возврат ИндексДействия;
	
КонецФункции

&НаСервере
Функция КартинкаДействия(Используется)
	
	Если Используется Тогда
		Возврат БиблиотекаКартинок.ФлагВключен;
	Иначе
		Возврат БиблиотекаКартинок.ФлагОтключен;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПереместитьЭлементыЗавершения()
	
	ИндексГруппы = 0;
	Пока ИндексГруппы < ИндексСозданныхЭлементов Цикл
		
		ИндексДействия = 0;
		ПроцессыГруппы = Процессы.НайтиСтроки(Новый Структура("ИндексГруппы, ЭтоГруппа", ИндексГруппы, Ложь));
		Количество = ПроцессыГруппы.Количество();
		
		Пока ИндексДействия < Количество Цикл
			ЭлементУспешно = Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенУспешно"];
			ЭлементОтменен = Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенОтменен"];
			Группа = Элементы["ФлагиГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия];
		
			Элементы.Переместить(ЭлементУспешно, Группа);
			Элементы.Переместить(ЭлементОтменен, Группа);
			ИндексДействия = ИндексДействия + 1;
		КонецЦикла;
		
		ИндексГруппы = ИндексГруппы + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеДействияПроцессов

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуЗадачи(Элемент)
	
	ИмяГруппы = Элемент.Родитель.Имя;
	ИндексПервогоЧисла = СтрНайти(ИмяГруппы, "_",НаправлениеПоиска.СКонца);
	ИмяГруппыДляПоиска = Сред(ИмяГруппы, СтрДлина("ГруппаДействий_")+1);
	ИндексПервойГруппы = СтрНайти(ИмяГруппыДляПоиска, "_",НаправлениеПоиска.СНачала);
	
	ИндексДействия = Число(Прав(ИмяГруппы, СтрДлина(ИмяГруппы) - ИндексПервогоЧисла));
	ИндексГруппы = Число(Лев(ИмяГруппыДляПоиска, ИндексПервойГруппы - 1)); 
	
	Действие = Процессы.НайтиСтроки(Новый Структура("ИндексГруппы, ИндексДействия, ЭтоГруппа", ИндексГруппы, ИндексДействия, Ложь));
	
	ИмяФормыАссистента = Действие[0].ИмяФормыЗадачиАссистента;
	ИдентификаторГруппы = Действие[0].ИдентификаторГруппыАссистента;;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыЗадачи",ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторГруппы", ИдентификаторГруппы);
	ОткрытьФорму(ИмяФормыАссистента, ПараметрыФормы ,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеФлагОбязательноЗаполнение(Элемент)
	
	Группа = Элемент.Родитель;
	ИндексЭлемента = Группа.ПодчиненныеЭлементы.Индекс(Элемент);
	ЭлементВключается = Элемент.Картинка = БиблиотекаКартинок.ФлагОтключен;
	Элемент.Картинка = КартинкаДействия(ЭлементВключается);
	Модифицированность = Истина;
	ИзмененыНастройкиОбязательностиЗаполнения = Истина;
	
	Если НЕ ЭлементВключается Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементГалочки ИЗ Группа.ПодчиненныеЭлементы Цикл
		ИндексГалочки = Группа.ПодчиненныеЭлементы.Индекс(ЭлементГалочки);
		
		Если ИндексГалочки > ИндексЭлемента Тогда
			ЭлементГалочки.Картинка = Элемент.Картинка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеЗапрещатьЗавершениеНеотгруженныхЗаказов(Элемент)
	
	ЭлементВключается = Элемент.Картинка = БиблиотекаКартинок.ФлагОтключен;
	Элемент.Картинка = КартинкаДействия(ЭлементВключается);
	Модифицированность = Истина;
	ИзмененыНастройкиЗапретаЗавершения = Истина; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеХранитьИсториюИзменений(Элемент)
	
	ИзмененыНастройкиВерсионирования = Истина;
	ГруппаВерсионирования = Элементы.ФлагиГруппаДействий_2_Действие_1;
	
	Если Элемент <> ГруппаВерсионирования.ПодчиненныеЭлементы[0] Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.Картинка = БиблиотекаКартинок.ФлагВключен Тогда
		Элемент.Картинка = БиблиотекаКартинок.ФлагОтключен;
	Иначе
		Элемент.Картинка = БиблиотекаКартинок.ФлагВключен;
	КонецЕсли;
	
	Для Каждого ЭлементГруппы Из ГруппаВерсионирования.ПодчиненныеЭлементы Цикл
		Если ЭлементГруппы = Элемент Тогда
			Продолжить;
		КонецЕсли;
		ЭлементГруппы.Картинка = КартинкаЗадачиАссистента(Элемент.Картинка = БиблиотекаКартинок.ФлагВключен);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеЗапрещатьИзменениеПрошлыхПериодов(Элемент)
	
	Элемент.Картинка = КартинкаДействия(Элемент.Картинка = БиблиотекаКартинок.ФлагОтключен);
	ГруппаФлагов = Элемент.Родитель;
	
	Модифицированность = Истина;
	ИзмененыНастройкиДатыЗапретаИзменений = Истина;
	
	Если СтрНайти(Элемент.Имя, "СостояниеЗавершен") <> 0 Тогда
		
		Для Каждого ЭлементГруппы Из ГруппаФлагов.ПодчиненныеЭлементы Цикл
			Если ЭлементГруппы = Элемент ИЛИ СтрНайти(ЭлементГруппы.Имя, "СостояниеЗавершен") = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЭлементГруппы.Картинка = Элемент.Картинка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеФлагСостояниеВыполнения(Элемент)
	
	ЭлементВключается = Элемент.Картинка = БиблиотекаКартинок.ФлагОтключен;
	Группа = Элементы.ФлагиГруппаДействий_0_Действие_0;
	ИмяГруппы = Элемент.Родитель.Имя;
	ИндексГруппы   = ИндексГруппы(ИмяГруппы);
	ИндексДействия = ИндексДействия(ИмяГруппы);
	ГруппаДействия = Элементы["ФлагиГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия];
	ИндексСостояния = ГруппаДействия.ПодчиненныеЭлементы.Индекс(Элемент);
	ИндексЭлемента = Группа.ПодчиненныеЭлементы.Индекс(Элемент);
	
	Если ИндексСостояния > Объект.ПорядокСостояний.Количество() - 1 Тогда
		ИндексСостояния = ИндексСостояния - 1;
	КонецЕсли;
	
	Объект.СостояниеВыполнения = Объект.ПорядокСостояний[ИндексСостояния].Состояние;
	УстановитьФлагиСостояниеВыполнения();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область АссистентУправления

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыЗадачи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЗакрытиеФормыЗадачиСервер(Результат);
		
КонецПроцедуры 

&НаСервере
Процедура ОбработатьЗакрытиеФормыЗадачиСервер(Результат)
	
	ИнформационнаяБазаПодключена = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	АссистентПодключен = АссистентУправления.Подключен();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьЗадачиВРаботе(Результат.ГруппаЗадач);
	
	Если НЕ ИнформационнаяБазаПодключена Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ АссистентПодключен Тогда
		Возврат;
	КонецЕсли;
	
	ОбсуждениеСоздано = АссистентУправления.ПолучитьОбсуждениеЖурналРаботыАссистента() <> Неопределено;
	
	Если НЕ ОбсуждениеСоздано Тогда
		Попытка
			СоздатьОбсуждение();
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Результат.АвторИзменений) И Результат.НужноДобавитьВОбсуждение Тогда
		Попытка
			АссистентУправления.ОбновитьУчастниковЖурналРаботыАссистента(Результат.АвторИзменений);
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьЗадачиВРаботе(ИдентификаторГруппы = Неопределено)
	
	ОтборПоГруппе = Ложь;
	Если ИдентификаторГруппы = Неопределено Тогда
		ОтборПоГруппе = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиАссистента.Ссылка КАК Ссылка,
	|	ЗадачиАссистента.Родитель.ИдентификаторГруппы КАК ИдентификаторГруппы,
	|	ЗадачиАссистента.Используется КАК Используется
	|ПОМЕСТИТЬ ИспользуемыеЗадачиАссистента
	|ИЗ
	|	Справочник.ЗадачиАссистентаУправления КАК ЗадачиАссистента
	|ГДЕ
	|	(&ОтборПоГруппе
	|			ИЛИ ЗадачиАссистента.Родитель.ИдентификаторГруппы = &ИдентификаторГруппы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользуемыеЗадачиАссистента.ИдентификаторГруппы КАК ИдентификаторГруппы,
	|	ИспользуемыеЗадачиАссистента.Используется КАК Используется,
	|	ЗначениеЗаполнения.Ссылка КАК Ссылка,
	|	ЗначениеЗаполнения.Параметр КАК Параметр,
	|	ЗначениеЗаполнения.Значение КАК Значение
	|ИЗ
	|	ИспользуемыеЗадачиАссистента КАК ИспользуемыеЗадачиАссистента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиАссистентаУправления.ЗначенияЗаполнения КАК ЗначениеЗаполнения
	|		ПО (ЗначениеЗаполнения.Ссылка = ИспользуемыеЗадачиАссистента.Ссылка)
	|ГДЕ
	|	(ЗначениеЗаполнения.Параметр = ""СостояниеЗаказа""
	|			ИЛИ ЗначениеЗаполнения.Параметр = ""СостояниеЗаказаПокупателя""
	|			ИЛИ ЗначениеЗаполнения.Параметр = ""ВариантЗавершения""
	|			ИЛИ ЗначениеЗаполнения.Параметр = ""ВариантЗавершенияЗаказаПокупателя"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИспользуемыеЗадачиАссистента.ИдентификаторГруппы,
	|	ИспользуемыеЗадачиАссистента.Используется,
	|	ПараметрыУсловияЗадач.Ссылка,
	|	ПараметрыУсловияЗадач.Параметр,
	|	ПараметрыУсловияЗадач.Значение
	|ИЗ
	|	ИспользуемыеЗадачиАссистента КАК ИспользуемыеЗадачиАссистента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиАссистентаУправления.ПараметрыУсловия КАК ПараметрыУсловияЗадач
	|		ПО (ПараметрыУсловияЗадач.Ссылка = ИспользуемыеЗадачиАссистента.Ссылка)
	|ГДЕ
	|	(ПараметрыУсловияЗадач.Параметр = ""СостояниеЗаказа""
	|			ИЛИ ПараметрыУсловияЗадач.Параметр = ""СостояниеЗаказаПокупателя""
	|			ИЛИ ПараметрыУсловияЗадач.Параметр = ""ВариантЗавершения""
	|			ИЛИ ПараметрыУсловияЗадач.Параметр = ""ВариантЗавершенияЗаказаПокупателя"")";
	
	Запрос.УстановитьПараметр("ОтборПоГруппе", ОтборПоГруппе);
	Запрос.УстановитьПараметр("ИдентификаторГруппы", ИдентификаторГруппы);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаЗадач = Результат.Выгрузить();
	ТаблицаЗадач.Колонки.Добавить("Состояние", Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказНарядов, ПеречислениеСсылка.ВариантыЗавершенияЗаказа"));
	
	Для Каждого Строка Из ТаблицаЗадач Цикл
		
		СостояниеЗаказа = Строка.Значение.Получить();
		Строка.Состояние = СостояниеЗаказа;
		
		ДействиеЗадачи = Процессы.НайтиСтроки(Новый Структура("ИдентификаторГруппыАссистента", Строка.ИдентификаторГруппы));
		
		Если ДействиеЗадачи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексГруппы = ДействиеЗадачи[0].ИндексГруппы;
		ИндексДействия = ДействиеЗадачи[0].ИндексДействия;

		Для Каждого Состояние Из Объект.ПорядокСостояний Цикл
			
			ИндексСостояния = Объект.ПорядокСостояний.Индекс(Состояние); 
			Если Состояние.Состояние = Справочники.СостоянияЗаказНарядов.Завершен Тогда
				Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенУспешно"].Картинка = КартинкаЗадачиАссистента(Ложь);
				Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенОтменен"].Картинка = КартинкаЗадачиАссистента(Ложь);
				ИндексСостояния = ИндексСостояния + 1;
				Продолжить;
			КонецЕсли;
			Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_Состояние_"+ ИндексСостояния].Картинка = КартинкаЗадачиАссистента(Ложь);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЗадач Цикл
		
		ДействиеЗадачи = Процессы.НайтиСтроки(Новый Структура("ИдентификаторГруппыАссистента", Строка.ИдентификаторГруппы));
		
		Если ДействиеЗадачи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексГруппы = ДействиеЗадачи[0].ИндексГруппы;
		ИндексДействия = ДействиеЗадачи[0].ИндексДействия;
		
		СостояниеЗадачи = Строка.Состояние;
		
		Если СтрНайти(Строка.Параметр, "СостояниеЗаказа") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексыСостояний = Объект.ПорядокСостояний.НайтиСтроки(Новый Структура("Состояние", СостояниеЗадачи));
		
		Если ИндексыСостояний.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСостояния = Объект.ПорядокСостояний.Индекс(ИндексыСостояний[0]);
		Если СостояниеЗадачи = Справочники.СостоянияЗаказНарядов.Завершен Тогда
			
			ВариантЗавершенияУспешно = ТаблицаЗадач.НайтиСтроки(Новый Структура("Ссылка, Состояние", Строка.Ссылка, Перечисления.ВариантыЗавершенияЗаказа.Успешно));
			ВариантЗавершенияОтменен = ТаблицаЗадач.НайтиСтроки(Новый Структура("Ссылка, Состояние", Строка.Ссылка, Перечисления.ВариантыЗавершенияЗаказа.Отменен));
					
			Если ВариантЗавершенияУспешно.Количество() = 0 И ВариантЗавершенияОтменен.Количество() = 0 Тогда
				Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенУспешно"].Картинка = КартинкаЗадачиАссистента(Строка.Используется);
				Продолжить;
			КонецЕсли;
			
			Если ВариантЗавершенияУспешно.Количество() <> 0 Тогда
				Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенУспешно"].Картинка = КартинкаЗадачиАссистента(Строка.Используется);
			КонецЕсли;
			
			Если ВариантЗавершенияОтменен.Количество() <> 0 Тогда
				Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_СостояниеЗавершенОтменен"].Картинка = КартинкаЗадачиАссистента(Строка.Используется);
			КонецЕсли;
			
		Иначе
			Элементы["Флаг_ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия+"_Состояние_"+ ИндексСостояния].Картинка = КартинкаЗадачиАссистента(Строка.Используется);			
		КонецЕсли;
		
	КонецЦикла;


КонецПроцедуры

&НаСервере
Функция КартинкаЗадачиАссистента(Используется)
	
	Если Используется Тогда
		Возврат БиблиотекаКартинок.Готово_16;
	Иначе
		Возврат Элементы.ДекорацияНетКартинки.Картинка;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура СоздатьОбсуждение()
	
	Если АссистентУправления.ПолучитьОбсуждениеЖурналРаботыАссистента() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АссистентУправления.СоздатьОбсуждениеЖурналРаботыАссистента();
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхПроцессов

&НаСервере
Процедура СохранитьДанныеПроцессов(ТекущийОбъект)
	
	ЗаписатьНастройкиВерсионирования();
	ЗаписатьНастройкиДатыЗапрета();
	ЗаполнитьДанныеОбязательностиЗаполнения(ТекущийОбъект);
	ЗаполнитьДанныеЗапретаЗавершения(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиВерсионирования()
	
	Если НЕ ИзмененыНастройкиВерсионирования Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьВерсионированиеОбъектов = Константы.ИспользоватьВерсионированиеОбъектов.Получить();
	
	Если Элементы.ФлагиГруппаДействий_1_Действие_1.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьВерсионированиеОбъектов Тогда
		Константы.ИспользоватьВерсионированиеОбъектов.Установить(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипОбъектаВерсионирования) Тогда
		ТипОбъектаВерсионирования = ТипОбъектаВерсионирования();
	КонецЕсли;
	
	Если Элементы.ФлагиГруппаДействий_1_Действие_1.ПодчиненныеЭлементы[0].Картинка = БиблиотекаКартинок.ФлагВключен Тогда
		ВерсионированиеОбъектов.ЗаписатьНастройкуВерсионированияПоОбъекту(ТипОбъектаВерсионирования, 
			Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриПроведении,
			Перечисления.СрокиХраненияВерсий.Бессрочно);
	Иначе
		ВерсионированиеОбъектов.ЗаписатьНастройкуВерсионированияПоОбъекту(ТипОбъектаВерсионирования, 
			Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать,
			Перечисления.СрокиХраненияВерсий.Бессрочно);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиДатыЗапрета()
	
	Если НЕ ИзмененыНастройкиДатыЗапретаИзменений Тогда
		Возврат;
	КонецЕсли;
	
	Группа = Элементы.ФлагиГруппаДействий_2_Действие_0;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел КАК Раздел,
	|	ДатыЗапретаИзменения.Объект КАК Объект,
	|	ДатыЗапретаИзменения.Пользователь КАК Пользователь,
	|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета,
	|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета КАК ОписаниеДатыЗапрета,
	|	ДатыЗапретаИзменения.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Раздел.Наименование = ""Заказ-наряд""";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	РазделДатыЗапрета = РазделДатыЗапрета();
	
	ИндексСостояния = 0;
	Для Каждого Флаг ИЗ Группа.ПодчиненныеЭлементы Цикл
		
		Состояние = Объект.ПорядокСостояний.Получить(ИндексСостояния).Состояние;
		
		Если Состояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
			ИндексСостояния = ИндексСостояния + 1;
		КонецЕсли;
		
		ЗаписиВРегистре = Таблица.НайтиСтроки(Новый Структура("Объект, Пользователь, ДатаЗапрета", 
			Состояние, 
			Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей, 
			Дата('39991231')));
			
		
		Если ЗаписиВРегистре.Количество() = 0 И Флаг.Картинка = БиблиотекаКартинок.ФлагВключен Тогда
			ЗаписатьДатуЗапретаСОписанием(РазделДатыЗапрета, Состояние, Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей, Дата('39991231'),,);
		КонецЕсли;
		
		Если ЗаписиВРегистре.Количество() <> 0 И Флаг.Картинка = БиблиотекаКартинок.ФлагОтключен Тогда
			Запись = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ЗаписиВРегистре[0]); 
			Запись.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДатуЗапретаСОписанием(Знач Раздел, Знач Объект, Знач Пользователь, Знач ДатаЗапрета, Знач ВнутреннееОписаниеДатыЗапрета, Знач Комментарий)
	
	Если Не ЗначениеЗаполнено(ДатаЗапрета) Тогда
		ДатаЗапрета = '39991231';
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Раздел              = Раздел;
	МенеджерЗаписи.Объект              = Объект;
	МенеджерЗаписи.Пользователь        = Пользователь;
	МенеджерЗаписи.ДатаЗапрета         = ДатаЗапрета;
	МенеджерЗаписи.ОписаниеДатыЗапрета = ВнутреннееОписаниеДатыЗапрета;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбязательностиЗаполнения(ТекущийОбъект)
	
	Если НЕ ИзмененыНастройкиОбязательностиЗаполнения Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппаНастроек = Элементы.ФлагиГруппаДействий_1_Действие_0;
	
	ПроцессыВида = ПроцессыВида("ОбработкаПроверкиЗаполнения");
	
	Если ПроцессыВида.Количество() = 0 Тогда
		ПроцессыВидаОбъект = Справочники.ПроцессыСостоянийЗаказов.СоздатьЭлемент();
		ПроцессыВидаОбъект.Предмет = "ЗаказНаряд";
		ПроцессыВидаОбъект.ВидЗаказа = ТекущийОбъект.Ссылка;
	Иначе
		ПроцессыВидаОбъект = ПроцессыВида[0].Ссылка.ПолучитьОбъект();
	КонецЕсли;
		
	ИндексСостояния = 0;
	
	СтрокиПричиныОтмены = ПроцессыВидаОбъект.ОбработкаПроверкиЗаполнения.НайтиСтроки(Новый Структура("ИмяРеквизита", "ОтмененныеЗапасы.ПричинаОтмены"));
	
	Для Каждого Строка Из СтрокиПричиныОтмены Цикл
		ПроцессыВидаОбъект.ОбработкаПроверкиЗаполнения.Удалить(Строка);
	КонецЦикла;
	
	Для Каждого Элемент Из ГруппаНастроек.ПодчиненныеЭлементы Цикл
		Состояние = ТекущийОбъект.ПорядокСостояний.Получить(ИндексСостояния).Состояние;
		
		Если Элемент.Картинка = БиблиотекаКартинок.ФлагОтключен Тогда
			Если Состояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
				ИндексСостояния = ИндексСостояния + 1;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		НоваяПроверка = ПроцессыВидаОбъект.ОбработкаПроверкиЗаполнения.Добавить();
		НоваяПроверка.ИмяРеквизита = "ОтмененныеЗапасы.ПричинаОтмены";
		НоваяПроверка.Состояние = Состояние;
		
		Если Состояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
			ИндексСостояния = ИндексСостояния + 1;
		Иначе
			ВариантЗавершения = ВариантЗавершения(Элемент.Имя);
			НоваяПроверка.ВариантЗавершения = ВариантЗавершения;
		КонецЕсли;
		
	КонецЦикла;
	
	ПроцессыВидаОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЗапретаЗавершения(ТекущийОбъект)
	
	Если НЕ ИзмененыНастройкиЗапретаЗавершения Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппаНастроек = Элементы.ФлагиГруппаДействий_1_Действие_1;
	
	ПроцессыВида = ПроцессыВида("ОбработкаПроведения");
	
	Если ПроцессыВида.Количество() = 0 Тогда
		ПроцессыВидаОбъект = Справочники.ПроцессыСостоянийЗаказов.СоздатьЭлемент();
		ПроцессыВидаОбъект.Предмет = "ЗаказНаряд";
		ПроцессыВидаОбъект.ВидЗаказа = ТекущийОбъект.Ссылка;
	Иначе
		ПроцессыВидаОбъект = ПроцессыВида[0].Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	СтрокиПричиныОтмены = ПроцессыВидаОбъект.ОбработкаПроведения.НайтиСтроки(Новый Структура("Свойство", "ПолностьюОтгружен"));
	
	Для Каждого Строка Из СтрокиПричиныОтмены Цикл
		ПроцессыВидаОбъект.ОбработкаПроведения.Удалить(Строка);
	КонецЦикла;
	
	ИндексСостояния = 0;
	
	Для Каждого Элемент Из ГруппаНастроек.ПодчиненныеЭлементы Цикл
		
		Состояние = ТекущийОбъект.ПорядокСостояний.Получить(ИндексСостояния).Состояние;
		
		Если Состояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
			ИндексСостояния = ИндексСостояния + 1;
			Продолжить;
		КонецЕсли;
		
		Если Элемент.Картинка <> БиблиотекаКартинок.ФлагВключен Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяПроверка = ПроцессыВидаОбъект.ОбработкаПроведения.Добавить();
		НоваяПроверка.Свойство = "ПолностьюОтгружен";
		НоваяПроверка.Состояние = Состояние;
		ВариантЗавершения = ВариантЗавершения(Элемент.Имя);
		НоваяПроверка.ВариантЗавершения = ВариантЗавершения;
		
	КонецЦикла;
	
	ПроцессыВидаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеФлаговПроцессов

Процедура УстановитьФлагиПроцессов()
	
	Если Объект.ПорядокСостояний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОпределитьЗадачиВРаботе();
	УстановитьФлагиВерсионирования();
	УстановитьФлагиДатыЗапретаИзменений();
	УстановитьФлагиОбязательноеЗаполнениеПричины();
	УстановитьФлагиЗапретЗавершения(); 
	УстановитьФлагиСостояниеВыполнения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиСостояниеВыполнения()
	
	СостояниеВыполненияВСписке = Объект.ПорядокСостояний.НайтиСтроки(Новый Структура("Состояние", Объект.СостояниеВыполнения));
	Если СостояниеВыполненияВСписке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаЭлемента = Элементы.ФлагиГруппаДействий_0_Действие_0;
	ИндексСостоянияВыполнения = Объект.ПорядокСостояний.Индекс(СостояниеВыполненияВСписке[0]);
	
	Индекс = 0;
	Для Каждого Элемент Из ГруппаЭлемента.ПодчиненныеЭлементы Цикл
		
		Элемент.Картинка = КартинкаДействия(Индекс >= ИндексСостоянияВыполнения);
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиВерсионирования()
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьВерсионированиеОбъектов = Константы.ИспользоватьВерсионированиеОбъектов.Получить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиВерсионированияОбъектов.ТипОбъекта КАК ТипОбъекта,
	|	НастройкиВерсионированияОбъектов.Вариант КАК ВариантВерсионирования,
	|	НастройкиВерсионированияОбъектов.СрокХраненияВерсий КАК СрокХраненияВерсий
	|ИЗ
	|	РегистрСведений.НастройкиВерсионированияОбъектов КАК НастройкиВерсионированияОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|		ПО (ИдентификаторыОбъектовМетаданных.Ссылка = НастройкиВерсионированияОбъектов.ТипОбъекта)
	|ГДЕ ПолноеИмя = ""Документ.ЗаказПокупателя""";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Таблица = Запрос.Выполнить().Выгрузить(); 
	
	Для Каждого Флаг Из Элементы.ФлагиГруппаДействий_2_Действие_1.ПодчиненныеЭлементы Цикл
		
		ВерсионированиеИспользуется = Таблица.Количество() <> 0 И Таблица[0].ВариантВерсионирования <> Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать;
		ВерсионированиеИспользуется = ВерсионированиеИспользуется И ИспользоватьВерсионированиеОбъектов;
		
		Индекс = Элементы.ФлагиГруппаДействий_2_Действие_1.ПодчиненныеЭлементы.Индекс(Флаг);
		
		Если Индекс = 0 Тогда
			Флаг.Картинка = КартинкаДействия(ВерсионированиеИспользуется);
			Продолжить;
		КонецЕсли;
		
		Флаг.Картинка = КартинкаЗадачиАссистента(ВерсионированиеИспользуется);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиДатыЗапретаИзменений()
	
	УстановитьПривилегированныйРежим(Истина);
	ДатыЗапретаВключены = Константы.ИспользоватьДатыЗапретаИзменения.Получить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел КАК Раздел,
	|	ДатыЗапретаИзменения.Объект КАК Объект,
	|	ДатыЗапретаИзменения.Пользователь КАК Пользователь,
	|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета,
	|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета КАК ОписаниеДатыЗапрета,
	|	ДатыЗапретаИзменения.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Раздел.Наименование = ""Заказ-наряд""";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Таблица = Запрос.Выполнить().Выгрузить(); 
	
	ИндексСостояния = 0;
	Для Каждого Флаг Из Элементы.ФлагиГруппаДействий_2_Действие_0.ПодчиненныеЭлементы Цикл
		
		Если НЕ ДатыЗапретаВключены Тогда
			Флаг.Картинка = БиблиотекаКартинок.ФлагОтключен;
			Если  Объект.ПорядокСостояний[ИндексСостояния].Состояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
				ИндексСостояния = ИндексСостояния + 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЕстьНастройкаСостояния = Таблица.НайтиСтроки(Новый Структура("Объект", Объект.ПорядокСостояний[ИндексСостояния].Состояние));
		
		Если ЕстьНастройкаСостояния.Количество() <> 0 Тогда
			Флаг.Картинка = БиблиотекаКартинок.ФлагВключен;
		Иначе 
			Флаг.Картинка = БиблиотекаКартинок.ФлагОтключен;
		КонецЕсли; 
		
		Если  Объект.ПорядокСостояний[ИндексСостояния].Состояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
			ИндексСостояния = ИндексСостояния + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиОбязательноеЗаполнениеПричины()
	
	ГруппаНастроек = Элементы.ФлагиГруппаДействий_1_Действие_0;
	ИндексСостояния = 0;
	
	ПроцессыВида = ПроцессыВида("ОбработкаПроверкиЗаполнения");
	
	Для Каждого Элемент Из ГруппаНастроек.ПодчиненныеЭлементы Цикл
		
		Состояние = Объект.ПорядокСостояний.Получить(ИндексСостояния).Состояние;
		ВариантЗавершения = ВариантЗавершения(Элемент.Имя);
		
		СтрокаПравила = ПроцессыВида.НайтиСтроки(Новый Структура("Состояние, ВариантЗавершения", Состояние, ВариантЗавершения));
		Элемент.Картинка = КартинкаДействия(СтрокаПравила.Количество() > 0);
				
		Если Состояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
			ИндексСостояния = ИндексСостояния + 1;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиЗапретЗавершения()
	
	ГруппаНастроек = Элементы.ФлагиГруппаДействий_1_Действие_1;
	ИндексСостояния = 0;
	
	ПроцессыВида = ПроцессыВида("ОбработкаПроведения");
	
	Для Каждого Элемент Из ГруппаНастроек.ПодчиненныеЭлементы Цикл
		
		Состояние = Объект.ПорядокСостояний.Получить(ИндексСостояния).Состояние;
		Если Состояние <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
			ИндексСостояния = ИндексСостояния + 1;
			Продолжить;
		КонецЕсли;
		
		ВариантЗавершения = ВариантЗавершения(Элемент.Имя);
		СтрокаПравила = ПроцессыВида.НайтиСтроки(Новый Структура("Состояние, ВариантЗавершения", Состояние, ВариантЗавершения));
		Элемент.Картинка = КартинкаДействия(СтрокаПравила.Количество() > 0);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ВариантЗавершения(ИмяЭлемента)
	
	ИмяВариантаЗавершения = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрНайти(ИмяЭлемента, "_", НаправлениеПоиска.СКонца));
	Если ИмяВариантаЗавершения = "СостояниеЗавершенУспешно" Тогда
		Возврат Перечисления.ВариантыЗавершенияЗаказа.Успешно;
	ИначеЕсли ИмяВариантаЗавершения = "СостояниеЗавершенОтменен" Тогда
		Возврат Перечисления.ВариантыЗавершенияЗаказа.Отменен;
	Иначе
		Возврат Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТипОбъектаВерсионирования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК ТипОбъекта
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя = ""Документ.ЗаказПокупателя""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ТипОбъекта;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция РазделДатыЗапрета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазделыДатыЗапретаИзменений.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.РазделыДатЗапретаИзменения КАК РазделыДатыЗапретаИзменений
	|ГДЕ
	|	РазделыДатыЗапретаИзменений.Наименование = ""Заказ-наряд""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПроцессыВида(ИмяТаблицы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПроцессов(ИмяТаблицы);
	Запрос.УстановитьПараметр("ВидЗаказа", Объект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПроцессов(ИмяТаблицы)
	
	Если ИмяТаблицы = "ОбработкаПроверкиЗаполнения" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПроцессыСостоянийЗаказов.Ссылка КАК Ссылка,
		|	ПроцессыОбработкаПроверкиЗаполнения.НомерСтроки КАК НомерСтроки,
		|	ПроцессыОбработкаПроверкиЗаполнения.Состояние КАК Состояние,
		|	ПроцессыОбработкаПроверкиЗаполнения.ИмяРеквизита КАК ИмяРеквизита,
		|	ПроцессыОбработкаПроверкиЗаполнения.ВариантЗавершения КАК ВариантЗавершения
		|ИЗ
		|	Справочник.ПроцессыСостоянийЗаказов КАК ПроцессыСостоянийЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроцессыСостоянийЗаказов.ОбработкаПроверкиЗаполнения КАК ПроцессыОбработкаПроверкиЗаполнения
		|		ПО (ПроцессыСостоянийЗаказов.Ссылка = ПроцессыОбработкаПроверкиЗаполнения.Ссылка)
		|ГДЕ
		|	ПроцессыСостоянийЗаказов.ВидЗаказа = &ВидЗаказа
		|	И ПроцессыСостоянийЗаказов.Предмет = ""ЗаказНаряд""";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПроцессыСостоянийЗаказов.Ссылка КАК Ссылка,
		|	ПроцессыОбработкаПроведения.НомерСтроки КАК НомерСтроки,
		|	ПроцессыОбработкаПроведения.Состояние КАК Состояние,
		|	ПроцессыОбработкаПроведения.ВариантЗавершения КАК ВариантЗавершения,
		|	ПроцессыОбработкаПроведения.Свойство КАК Свойство
		|ИЗ
		|	Справочник.ПроцессыСостоянийЗаказов КАК ПроцессыСостоянийЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроцессыСостоянийЗаказов.ОбработкаПроведения КАК ПроцессыОбработкаПроведения
		|		ПО ПроцессыСостоянийЗаказов.Ссылка = ПроцессыОбработкаПроведения.Ссылка
		|ГДЕ
		|	ПроцессыСостоянийЗаказов.ВидЗаказа = &ВидЗаказа
		|	И ПроцессыСостоянийЗаказов.Предмет = ""ЗаказНаряд""";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ОбновитьПроцессы()
	
	ЗаполнитьТаблицуПроцессов();
	ОбновитьЭлементыПроцессов();
	УстановитьФлагиПроцессов();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодчиненныеЭлементы()
	
	УдаляемыеЭлементы = Новый Массив;
	
	УдалитьЭлементыЗаголовков(УдаляемыеЭлементы);
	УдалитьЭлементыДействий(УдаляемыеЭлементы);
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыЗаголовков(УдаляемыеЭлементы)
	
	Для Каждого Элемент Из Элементы.ГруппаЗаголовкиСостояний.ПодчиненныеЭлементы Цикл
		Если СтрНайти(Элемент.Имя, "Завершен") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыДействий(УдаляемыеЭлементы)
	
	ГруппыПроцессов = Процессы.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина));
	
	Для Каждого Группа Из ГруппыПроцессов Цикл
		
		ИндексГруппы = Группа.ИндексГруппы;
		ДействияГруппы = Процессы.НайтиСтроки(Новый Структура("КлючГруппы", Группа.Ключ));
		
		ГруппаОтступа = Элементы.Найти("ОтступыГруппыДействий_"+ИндексГруппы);
		
		Если ГруппаОтступа <> Неопределено Тогда
			
			Для ИндексЭлемента = 0 По ГруппаОтступа.ПодчиненныеЭлементы.Количество()-1 Цикл
				
				ЭлементУдаления = ГруппаОтступа.ПодчиненныеЭлементы[ИндексЭлемента];
				Если СтрНайти(ЭлементУдаления.Имя, "Завершен") <> 0 Тогда
					Продолжить;
				КонецЕсли;
				УдаляемыеЭлементы.Добавить(ГруппаОтступа.ПодчиненныеЭлементы[ИндексЭлемента]);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИндексГруппы >= ИндексСозданныхЭлементов Тогда
			ГруппаЗаголовкаДействия = Элементы.Найти("ГруппаДействий_"+ИндексГруппы);
			Если ГруппаЗаголовкаДействия <> Неопределено Тогда
				УдаляемыеЭлементы.Добавить(ГруппаЗаголовкаДействия);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Действие Из ДействияГруппы Цикл
			
			ИндексДействия = Действие.ИндексДействия;
			ГруппаДействия = Элементы.Найти("ФлагиГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия);
			
			Если ГруппаДействия <> Неопределено Тогда
				Для ИндексЭлемента = 0 По ГруппаДействия.ПодчиненныеЭлементы.Количество()-1 Цикл
					ЭлементУдаления = ГруппаДействия.ПодчиненныеЭлементы[ИндексЭлемента];
					Если СтрНайти(ЭлементУдаления.Имя, "Завершен") <> 0 Тогда
						Продолжить;
					КонецЕсли;
					
					УдаляемыеЭлементы.Добавить(ГруппаДействия.ПодчиненныеЭлементы[ИндексЭлемента]);
					
				КонецЦикла;
			КонецЕсли;
			
					
			Если ИндексГруппы < ИндексСозданныхЭлементов Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаУдаления = Элементы.Найти("ГруппаДействий_"+ИндексГруппы+"_Действие_"+ИндексДействия);
				
			Если ГруппаУдаления <> Неопределено Тогда
				УдаляемыеЭлементы.Добавить(ГруппаУдаления);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСостоянийПриИзменении(Элемент)
	ОбновитьПроцессы();
КонецПроцедуры

#КонецОбласти
