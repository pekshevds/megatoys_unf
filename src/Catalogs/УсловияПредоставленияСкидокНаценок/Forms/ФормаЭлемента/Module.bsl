
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РазрешеноРедактированиеЦенДокументов = УправлениеДоступомУНФ.РазрешеноРедактированиеЦенДокументов();
	ЭтаФорма.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	ИспользуютсяСегментыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	ВариантПоСегменту = Перечисления.ВариантПредоставленияСкидкиПоНоменклатуре.ПоСегментуНоменклатуры;
	ВариантПоНоменклатуре = Перечисления.ВариантПредоставленияСкидкиПоНоменклатуре.ПоНоменклатуре;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	ПолучитьОграниченияКонфигурации();
	
	СкидкиНаценкиСерверПереопределяемый.ПолучитьСписокЗначенийУсловийПредоставленияСкидки(Элементы.УсловиеПредоставления.СписокВыбора);
	
	ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантПредоставленияСкидкиПоНоменклатуре;
	
	УсловиеПредоставленияПриИзмененииНаСервере();
	ВариантПредоставленияСкидкиПриИзменении();
	КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере();
	ВидПериодаПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Наименование = СформироватьАвтоНаименованиеНаСервере();
	Иначе
		СформироватьАвтоНаименованиеНаСервере();
	КонецЕсли;
	
	ЗаполнитьПризнакиВТЧ();
	
	Для каждого ВариантНаименования Из Элементы.Наименование.СписокВыбора Цикл
		Если Объект.Наименование = ВариантНаименования.Значение Тогда
			ИспользуетсяАвтоНаименование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Ложь;
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	СтруктураДоступныхСхем = Справочники.УсловияПредоставленияСкидокНаценок.СписокСхемСКД();
	Если ЗначениеЗаполнено(Объект.Ссылка) 
		И (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос
			ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.Расширение) Тогда
		СхемаКомпановкиДанныхУсловия = Объект.Ссылка.ХранилищеСхемыКомпоновкиДанных.Получить();
		НастройкиСКД = Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных.Получить();		
		Если СхемаКомпановкиДанныхУсловия = Неопределено Тогда
			// Схема не выбрана. Обнулим схему. 
			Объект.ИмяСхемыКомпоновкиДанных = "";			
		КонецЕсли;
		ОбработатьИзменениеСхемыСКД(СхемаКомпановкиДанныхУсловия, НастройкиСКД);
	Конецесли;
	Для Каждого ОписаниеСхемы Из СтруктураДоступныхСхем.ТиповыеСхемы Цикл
		Элементы.ПроизвольныйЗапросИмяСхемыКомпоновкиДанных.СписокВыбора.Добавить(ОписаниеСхемы.Ключ, ОписаниеСхемы.Значение);
	КонецЦикла;
	Элементы.ПроизвольныйЗапросИмяСхемыКомпоновкиДанных.СписокВыбора.Добавить("Произвольная", "Произвольная");
	Для Каждого ОписаниеСхемы Из СтруктураДоступныхСхем.СхемыРасширений Цикл
		Элементы.РасширениеИмяСхемыКомпоновкиДанных.СписокВыбора.Добавить(ОписаниеСхемы.Ключ, ОписаниеСхемы.Значение);
	КонецЦикла;
	Элементы.РасширениеИмяСхемыКомпоновкиДанных.СписокВыбора.Добавить("Произвольная", "Произвольная");
	Если Элементы.РасширениеИмяСхемыКомпоновкиДанных.СписокВыбора.Количество() > 1 Тогда
		Элементы.РасширениеНадписьДляПользователя.Видимость = Ложь;
	Иначе
		Элементы.РасширениеГруппаСхемаСКД.Видимость = Ложь;			
		Элементы.РасширениеНастройкаКомпановкиДанныхНастройкиОтбор.Видимость = Ложь;		
	КонецЕсли;
	ИмяСхемыСКДНаФорме = Объект.ИмяСхемыКомпоновкиДанных;
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьПризнакиВТЧ();
	
	ТипПолучателяСкидкиПредыдущий = ТипПолучателяСкидки;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура заполняет значения реквизитов ХарактеристикиИспользуются и ЭтоГруппа (добавлены в форме)
//
&НаСервере
Процедура ЗаполнитьПризнакиВТЧ()

	Для Каждого ТекущаяСтрока Из Объект.КомплектПокупки Цикл
		ТекущаяСтрока.ХарактеристикиИспользуются = ТекущаяСтрока.Номенклатура.ИспользоватьХарактеристики;
		ТекущаяСтрока.ЭтоГруппа = ТекущаяСтрока.Номенклатура.ЭтоГруппа;
	КонецЦикла;
	Для Каждого ТекущаяСтрока Из Объект.ОтборПродажПоНоменклатуре Цикл
		ТекущаяСтрока.ХарактеристикиИспользуются = ТекущаяСтрока.Номенклатура.ИспользоватьХарактеристики;
		ТекущаяСтрока.ЭтоГруппа = ТекущаяСтрока.Номенклатура.ЭтоГруппа;
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОбновитьАвтонаименование(Модифицированность);
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьПризнакиВТЧ();
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("УсловиеПредоставления_Запись");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.Расширение 
		И Не ЗначениеЗаполнено(АдресСхемыКомпановкиДанных) Тогда 
		ТекстСообщения = НСтр("ru = 'Подключите расширение для проверки произвольного условия, согласно инструкции, после чего, укажите схему компановки данных из расширения.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "РасширениеИмяСхемыКомпоновкиДанных", "Объект.ИмяСхемыКомпоновкиДанных", Отказ);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении элемента ВалютаОграничения.
//
&НаКлиенте
Процедура ВалютаОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ЗначениеУсловияПредоставления.
//
&НаКлиенте
Процедура ЗначениеУсловияПредоставленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

// Процедура - обработчик события АвтоПодбор элемента Наименование.
//
&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СформироватьАвтоНаименованиеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента Наименование.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеИзмененоПользователем = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ОбластьОграничения.
//
&НаКлиенте
Процедура ОбластьОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ТипСравнения.
//
&НаКлиенте
Процедура ТипСравненияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента УсловиеПредоставления формы.
//
&НаКлиенте
Процедура УсловиеПредоставленияПриИзменении(Элемент)
	
	УсловиеПредоставленияПриИзмененииНаСервере();
	Объект.Наименование = "";
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Серверная часть процедура УсловиеПредоставленияПриИзменении - обработчика события ПриИзменении элемента
// УсловиеПредоставления формы.
//
&НаСервере
Процедура УсловиеПредоставленияПриИзмененииНаСервере()
	
	Элементы.ЗаОбъемПродаж.Видимость					= (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж
													   ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
	ЭтоУсловиеЗаРазовыйОбъемПродаж = Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж;
	ЭтоПроизвольныйЗапрос = Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос;
	ЭтоРасширение = Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.Расширение;
	Если НЕ (ЭтоУсловиеЗаРазовыйОбъемПродаж
		ИЛИ ЭтоПроизвольныйЗапрос
		ИЛИ ЭтоРасширение) Тогда
		Объект.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
	КонецЕсли;
	Элементы.ОбластьОграничения.Видимость				= ЭтоУсловиеЗаРазовыйОбъемПродаж;
	
	Элементы.ГруппаПерваяСтрока_Накопление.Видимость	= (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
	Элементы.ЗаКомплектПокупки.Видимость				= (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки);
	Элементы.ЗаДисконтнуюКарту.Видимость				= (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту);
	Элементы.ЗаРучнуюАктивацию.Видимость				= (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаАктивациюВручную);	
	Элементы.ПроизвольныйЗапрос.Видимость				= (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос);	
	Элементы.ЗаДеньРождения.Видимость					= (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаДеньРождения);
	Элементы.ЗаПромокод.Видимость						= (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПромокод);	
	
	
	Элементы.ОбластьОграничения.Доступность = Истина;
	Элементы.ВариантПредоставленияСкидкиПоНоменклатуре.Видимость = ИспользуютсяСегментыНоменклатуры;
	
	// Произвольные условия и расширения
	Если (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос 
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.Расширение) Тогда
		Макеты = Справочники.УсловияПредоставленияСкидокНаценок.СписокСхемСКД();
		СтруктураМакетов = Новый Структура;
		Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос Тогда
			СтруктураМакетов = Макеты.ТиповыеСхемы;
		ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.Расширение Тогда
			СтруктураМакетов = Макеты.СхемыРасширений;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ИмяСхемыКомпоновкиДанных)
			И Не СтруктураМакетов.Свойство(Объект.ИмяСхемыКомпоновкиДанных) Тогда
			Объект.ИмяСхемыКомпоновкиДанных = "";
		КонецЕсли;
		Если Объект.ИмяСхемыКомпоновкиДанных = "" Тогда		
			// Установим первый по счету макет из доступных
			Объект.ИмяСхемыКомпоновкиДанных = ПолучитьПервыйКлючСтруктуры(СтруктураМакетов);
			ИмяСхемыСКДНаФорме = Объект.ИмяСхемыКомпоновкиДанных;			
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ИмяСхемыКомпоновкиДанных) Тогда			
			СхемаКомпоновкиДанныхПриИзмененииНаСервере(Ложь);
		КонецЕсли; 
		ПодсказкаОбластьОграничения = "";
		Если Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе") Тогда
			ПодсказкаОбластьОграничения = НСтр("ru = 'Скидка будет применена к документу целиком. Если в отборах используются поля с окончанием ""... (строка)"", то скидка будет применена ко всему документу, если в будет хотя бы одна строка, удовлетворяющая условию.'");
		Иначе
			ПодсказкаОбластьОграничения = НСтр("ru = 'Скидка будет применена к каждой отдельной строке. Используется для проверки значений строки таблицы товаров, представленных полями с окончанием ""... (строка)"". Допустимо использование дополнительных отборов на реквизиты шапки документа, или итогов по таблице товаров.'");
		КонецЕсли;
		Элементы.ПроизвольныйЗапросОбластьОграничения.Подсказка = ПодсказкаОбластьОграничения;
		Элементы.РасширениеОбластьОграничения.Подсказка = ПодсказкаОбластьОграничения;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента КритерийОграниченияПримененияЗаОбъемПродаж формы.
//
&НаКлиенте
Процедура КритерийПримененияЗаОбъемПродажПриИзменении(Элемент)
	
	КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере();
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

// Серверная часть процедура КритерийПримененияЗаОбъемПродажПриИзменении - обработчика события ПриИзменении элемента
// КритерийОграниченияПримененияЗаОбъемПродаж формы.
//
&НаСервере
Процедура КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере()
	
	Если Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество Тогда
		
		Элементы.ВалютаОграничения.Видимость = Ложь;
		Элементы.ЗначениеУсловияПредоставления.ФорматРедактирования = Формат("ЧДЦ=3");
		
	Иначе
		
		Элементы.ВалютаОграничения.Видимость = ИспользуютсяВалюты;
		Элементы.ЗначениеУсловияПредоставления.ФорматРедактирования = Формат("ЧДЦ=2");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ВидПериодаПриИзмененииНаСервере()
	
	Элементы.Периодичность.Видимость = (Объект.ВидПериода <> ПредопределенноеЗначение("Перечисление.ВидыПериодовДляНакопительныхСкидок.ВесьПериод"));
	Если Не ЗначениеЗаполнено(Объект.Периодичность) И Элементы.Периодичность.Видимость Тогда
		Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	ВидПериодаПриИзмененииНаСервере();
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДисконтнойКартыПриИзменении(Элемент)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПредоставленияСкидкиПоНоменклатуреПриИзменении(Элемент)
	
	Если (Объект.ОтборПродажПоНоменклатуре.Количество() > 0 
		И Объект.ВариантПредоставленияСкидкиПоНоменклатуре = ВариантПоСегменту)
		ИЛИ (Объект.ОтборПродажПоСегменту.Количество()> 0 
		И Объект.ВариантПредоставленияСкидкиПоНоменклатуре = ВариантПоНоменклатуре) Тогда
		
		Описание = Новый ОписаниеОповещения("ВариантПредоставленияСкидкиПоНоменклатуреПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, НСтр("ru = 'Таблица уточнений будет очищена. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, НСтр("ru = 'Изменение варианта уточнения'"));
	Иначе
		ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантПредоставленияСкидкиПоНоменклатуре;
		ВариантПредоставленияСкидкиПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПромокодаПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаРучнуюАктивациюОбластьОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СхемаКомпоновкиДанныхПриИзменении(Элемент)	
	СхемаКомпоновкиДанныхПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РасширениеОбластьОграниченияПриИзменении(Элемент)
	УсловиеПредоставленияПриИзмененииНаСервере();// Обновить подсказки	
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйЗапросОбластьОграниченияПриИзменении(Элемент)
	УсловиеПредоставленияПриИзмененииНаСервере();// Обновить подсказки	
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомплектПокупки

// Процедура - обработчик события ПриИзменении в колонке Номенклатура ТЧ КомплектПокупки формы.
//
&НаКлиенте
Процедура КомплектПокупкиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КомплектПокупки.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьСбросКоличества И СбрасыватьКоличество
		И СтрокаТабличнойЧасти.Количество <> НовоеКоличествоПриИзмененииНоменклатуры Тогда
		
		ДопПараметр = Новый Структура();
		ДопПараметр.Вставить("Элемент", Элемент);
		ДопПараметр.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
		Оповещение = Новый ОписаниеОповещения("КомплектПокупкиПодтверждениеСбросаКоличестваЗавершение",
			ЭтотОбъект, ДопПараметр);
		ОткрытьФорму("ОбщаяФорма.ПодтверждениеСбросаКоличества", , , , , , Оповещение);
		
	Иначе
		
		Если СбрасыватьКоличество Тогда
			НовоеКоличество = НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		КомплектПокупкиНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиПодтверждениеСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗапрашиватьСбросКоличества = Результат.ЗапрашиватьСбросКоличества;
		Если НЕ ЗапрашиватьСбросКоличества Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		КонецЕсли;
		Если Результат.СбрасыватьКоличество Тогда
			НовоеКоличество = Результат.НовоеКоличествоПриИзмененииНоменклатуры;
		Иначе
			НовоеКоличество = ДополнительныеПараметры.Количество;
		КонецЕсли;
	Иначе
		НовоеКоличество = ДополнительныеПараметры.Количество;
	КонецЕсли;
	
	КомплектПокупкиНоменклатураПриИзмененииПродолжить(ДополнительныеПараметры.Элемент, НовоеКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиНоменклатураПриИзмененииПродолжить(Элемент, НовоеКоличество)

	СтрокаТабличнойЧасти = Элементы.КомплектПокупки.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = НовоеКоличество;
	СтрокаТабличнойЧасти.ХарактеристикиИспользуются = СтруктураДанные.ХарактеристикиИспользуются;
	СтрокаТабличнойЧасти.ЭтоГруппа = СтруктураДанные.ЭтоГруппа;
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления ТЧ КомплектПокупки формы.
//
&НаКлиенте
Процедура КомплектПокупкиПослеУдаления(Элемент)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти.Количество = НовоеКоличествоПриИзмененииНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриОкончанииРедактирования ТЧ КомплектПокупки формы.
//
&НаКлиенте
Процедура КомплектПокупкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыОтборПродажПоНоменклатуре

// Процедура - обработчик события ПриОкончанииРедактирования ТЧ ОтборПродажПоНоменклатуре формы.
//
&НаКлиенте
Процедура ОтборПродажПоНоменклатуреПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления ТЧ ОтборПродажПоНоменклатуре формы.
//
&НаКлиенте
Процедура ОтборПродажПоНоменклатуреПослеУдаления(Элемент)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении в колонке Номенклатура ТЧ ОтборПродажПоНоменклатуре формы.
//
&НаКлиенте
Процедура ОтборПродажПоНоменклатуреНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОтборПродажПоНоменклатуре.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ХарактеристикиИспользуются = СтруктураДанные.ХарактеристикиИспользуются;
	СтрокаТабличнойЧасти.ЭтоГруппа = СтруктураДанные.ЭтоГруппа;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьГруппуНоменклатурыЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличества(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтрокаПоиска", НСтр("ru = 'Сбрасывать количество при изменении номенклатуры'"));
	Оповещение = Новый ОписаниеОповещения("НастройкаСбросаКоличестваЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаНастройкиПользователя", СтруктураПараметров, , , , ,
		Оповещение);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, 
		Элементы.КомплектПокупкиКонтекстноеМенюНастройкаСбросаКоличества, "Нажатие");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСбросаКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастройкиКоличества = ПолучитьНастройкиИзмененияКоличества();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиКоличества);
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВариантПредоставленияСкидкиПоНоменклатуреПриИзмененииЗавершение(РезультатОтвета, ДополнительныеПараметры) Экспорт

	Если РезультатОтвета <> КодВозвратаДиалога.Да Тогда
		Объект.ВариантПредоставленияСкидкиПоНоменклатуре = ВариантОграниченияПоНоменклатуреДоИзменения;
		Возврат;
	КонецЕсли;
	
	ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантПредоставленияСкидкиПоНоменклатуре;
	
	ВариантПредоставленияСкидкиПриИзменении();
	
	Если ВариантОграниченияПоНоменклатуреДоИзменения = ВариантПоСегменту Тогда
		Объект.ОтборПродажПоНоменклатуре.Очистить();
	Иначе
		Объект.ОтборПродажПоСегменту.Очистить();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВариантПредоставленияСкидкиПриИзменении()
	
	Если Объект.ВариантПредоставленияСкидкиПоНоменклатуре = Перечисления.ВариантПредоставленияСкидкиПоНоменклатуре.ПоСегментуНоменклатуры Тогда
		Элементы.ПодсказкаОтборПродажПоНоменклатуре.Заголовок = НСтр("ru = 'Заполните список сегментов, если требуется учитывать объем продаж только определенного сегмента номенклатуры. Если список не заполнен, то объем продаж рассчитывается без ограничения по сегменту.'");
		Элементы.СтраницыОтбораПоНоменклатуре.ТекущаяСтраница = Элементы.СтраницаОтборПоСегментуНоменклатуры;
	Иначе
		Элементы.ПодсказкаОтборПродажПоНоменклатуре.Заголовок = НСтр("ru = 'Заполните список номенклатуры, если требуется учитывать объем продаж только определенного списка номенклатуры 
		|или групп номенклатуры. Если список не заполнен, то объем продаж рассчитывается без ограничения по номенклатуре.'");
		Элементы.СтраницыОтбораПоНоменклатуре.ТекущаяСтраница = Элементы.СтраницаОтборПоНоменклатуре;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуНоменклатурыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		НоваяСтрока = Объект.ОтборПродажПоНоменклатуре.Добавить();
		НоваяСтрока.Номенклатура = РезультатЗакрытия;
		Элементы.ОтборПродажПоНоменклатуре.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

// Процедура определят использование валют.
//
&НаСервере
Процедура ПолучитьОграниченияКонфигурации()

	ИспользуютсяВалюты = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");

КонецПроцедуры

// Функция возвращает краткий состав табличной части в виде строки.
//
&НаКлиенте
Функция ОписаниеТабличнойЧастиКлиент(ИмяТаблицы, ИмяРеквизита, КоличествоЭлементов = 0)

	ОписаниеТаблицы = "";
	
	НомерЭлемента = 0;
	Для каждого ЭлементТаблицы Из Объект[ИмяТаблицы] Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		Если Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) = НомерЭлемента Тогда
			ОписаниеТаблицы = ОписаниеТаблицы + "... ,";
		ИначеЕсли Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) < НомерЭлемента Тогда
			Прервать;
		Иначе
			ОписаниеТаблицы = ОписаниеТаблицы + Строка(ЭлементТаблицы[ИмяРеквизита]) + ", ";
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОписаниеТаблицы = "" Тогда
	
		ОписаниеТаблицы = Лев(ОписаниеТаблицы, СтрДлина(ОписаниеТаблицы) - 2);
	
	КонецЕсли;
	
	Возврат ОписаниеТаблицы;

КонецФункции

// Функция возвращает краткий состав табличной части в виде строки.
//
&НаСервере
Функция ОписаниеТабличнойЧастиСервер(ИмяТаблицы, ИмяРеквизита, КоличествоЭлементов = 0)

	ОписаниеТаблицы = "";
	
	НомерЭлемента = 0;
	Для каждого ЭлементТаблицы Из Объект[ИмяТаблицы] Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		Если Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) = НомерЭлемента Тогда
			ОписаниеТаблицы = ОписаниеТаблицы + "... ,";
		ИначеЕсли Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) < НомерЭлемента Тогда
			Прервать;
		Иначе
			ОписаниеТаблицы = ОписаниеТаблицы + Строка(ЭлементТаблицы[ИмяРеквизита]) + " ,";
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОписаниеТаблицы = "" Тогда
	
		ОписаниеТаблицы = Лев(ОписаниеТаблицы, СтрДлина(ОписаниеТаблицы) - 2);
	
	КонецЕсли;
	
	Возврат ОписаниеТаблицы;

КонецФункции

// Процедура обновляет наименование, если пользователь не менял его вручную.
//
&НаКлиенте
Процедура ОбновитьАвтонаименование(Обновить = Истина)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) ИЛИ (Обновить И ИспользуетсяАвтоНаименование И Не НаименованиеИзмененоПользователем) Тогда
		Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
		ИспользуетсяАвтоНаименование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает сформированное автонаименование.
//
&НаКлиенте
Функция СформироватьАвтоНаименованиеНаКлиенте()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	Если Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж") Тогда
		СтрокаНаименования = ""+?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), "Кол-во", Объект.КритерийОграниченияПримененияЗаОбъемПродаж) + " " + 
		?(Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе"),НСтр("ru = 'в документе'"),НСтр("ru = 'в строке'")) + " "+Объект.ТипСравнения + " "+Объект.ЗначениеУсловияОграничения + 
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), НСтр("ru = ' ед.'"), " "+Объект.ВалютаОграничения);
		Если Объект.ОтборПродажПоНоменклатуре.Количество() > 0 Тогда
			СтрокаНаименования = СтрокаНаименования + ": " + ОписаниеТабличнойЧастиКлиент("ОтборПродажПоНоменклатуре", "Номенклатура");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") Тогда
		СтрокаНаименования = ""+?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), "Кол-во", Объект.КритерийОграниченияПримененияЗаОбъемПродаж) + " за " + 
		Объект.ВидПериода + " " + ?(Объект.ВидПериода = ПредопределенноеЗначение("Перечисление.ВидыПериодовДляНакопительныхСкидок.ВесьПериод"), "", Объект.Периодичность) + " " + Объект.ТипСравнения + " "+Объект.ЗначениеУсловияОграничения + 
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), НСтр("ru = ' ед.'"), " "+Объект.ВалютаОграничения);
		Если Объект.ОтборПродажПоНоменклатуре.Количество() > 0 Тогда
			СтрокаНаименования = СтрокаНаименования + ": " + ОписаниеТабличнойЧастиКлиент("ОтборПродажПоНоменклатуре", "Номенклатура");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки") Тогда
		СтрокаНаименования = НСтр("ru = 'Комплект:'");
		СтрокаНаименования = СтрокаНаименования + " " + ОписаниеТабличнойЧастиКлиент("КомплектПокупки", "Номенклатура");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту") Тогда
		СтрокаНаименования = НСтр("ru = 'Предъявлена дисконтная карта'");
		Если ЗначениеЗаполнено(Объект.ВидДисконтнойКарты) Тогда
			СтрокаНаименования = СтрокаНаименования + ": " + Объект.ВидДисконтнойКарты;
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДеньРождения") Тогда
		СтрокаНаименования = НСтр("ru = 'За покупку в день рождения'");
		Если ЗначениеЗаполнено(Объект.ДнейПередДнемРождения) Тогда
			СтрокаНаименования = СтрокаНаименования + " (" + Объект.ДнейПередДнемРождения + НСтр("ru = 'д. перед'");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДнейПослеДняРождения) Тогда
			СтрокаНаименования = СтрокаНаименования + ?(ЗначениеЗаполнено(Объект.ДнейПередДнемРождения), ", ", " (");
			СтрокаНаименования = СтрокаНаименования + Объект.ДнейПослеДняРождения + НСтр("ru = 'д. после)'");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод") Тогда
		СтрокаНаименования = НСтр("ru = 'Предъявлен промокод'");
		Если ЗначениеЗаполнено(Объект.ШаблонПромокода) Тогда
			СтрокаНаименования = СтрокаНаименования + " (" + НСтр("ru = 'Шаблон: '") + Объект.ШаблонПромокода + ")";
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаАктивациюВручную") Тогда
		СтрокаНаименования = НСтр("ru = 'Активирована вручную'");
		Если Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'для строки'");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос") Тогда
		СтрокаНаименования = НСтр("ru = 'Произвольное условие'");
		Если Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'для строки'");
		КонецЕсли;
		Если Объект.СхемаСКДМодифицированаВручную Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = '(запрос модифицирован)'");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.Расширение") Тогда
		СтрокаНаименования = НСтр("ru = 'Расширение'");
		Если Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'для строки'");
		КонецЕсли;
		Если Объект.СхемаСКДМодифицированаВручную Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = '(запрос модифицирован)'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции

// Функция возвращает сформированное автонаименование.
//
&НаСервере
Функция СформироватьАвтоНаименованиеНаСервере()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
		СтрокаНаименования = ""+?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество, "Кол-во", Объект.КритерийОграниченияПримененияЗаОбъемПродаж) + " " + 
		?(Объект.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе,НСтр("ru = 'в документе'"),НСтр("ru = 'в строке'")) + " "+Объект.ТипСравнения + " "+Объект.ЗначениеУсловияОграничения + 
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество, НСтр("ru = ' ед.'"), " "+Объект.ВалютаОграничения);
		Если Объект.ОтборПродажПоНоменклатуре.Количество() > 0 Тогда
			СтрокаНаименования = СтрокаНаименования + ": " + ОписаниеТабличнойЧастиСервер("ОтборПродажПоНоменклатуре", "Номенклатура");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") Тогда
		СтрокаНаименования = ""+?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), "Кол-во", Объект.КритерийОграниченияПримененияЗаОбъемПродаж) + " за " + 
		Объект.ВидПериода + " " + ?(Объект.ВидПериода = ПредопределенноеЗначение("Перечисление.ВидыПериодовДляНакопительныхСкидок.ВесьПериод"), "", Объект.Периодичность) + " " + Объект.ТипСравнения + " "+Объект.ЗначениеУсловияОграничения + 
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), НСтр("ru = ' ед.'"), " "+Объект.ВалютаОграничения);
		Если Объект.ОтборПродажПоНоменклатуре.Количество() > 0 Тогда
			СтрокаНаименования = СтрокаНаименования + ": " + ОписаниеТабличнойЧастиСервер("ОтборПродажПоНоменклатуре", "Номенклатура");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки Тогда
		СтрокаНаименования = НСтр("ru = 'Комплект:'");
		СтрокаНаименования = СтрокаНаименования + " " + ОписаниеТабличнойЧастиСервер("КомплектПокупки", "Номенклатура");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДисконтнуюКарту") Тогда
		СтрокаНаименования = НСтр("ru = 'Предъявлена дисконтная карта'");
		Если ЗначениеЗаполнено(Объект.ВидДисконтнойКарты) Тогда
			СтрокаНаименования = СтрокаНаименования + ": " + Объект.ВидДисконтнойКарты;
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаДеньРождения") Тогда
		СтрокаНаименования = НСтр("ru = 'За покупку в день рождения'");
		Если ЗначениеЗаполнено(Объект.ДнейПередДнемРождения) Тогда
			СтрокаНаименования = СтрокаНаименования + " (" + Объект.ДнейПередДнемРождения + НСтр("ru = 'д. перед'");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДнейПослеДняРождения) Тогда
			СтрокаНаименования = СтрокаНаименования + ?(ЗначениеЗаполнено(Объект.ДнейПередДнемРождения), ", ", " (");
			СтрокаНаименования = СтрокаНаименования + Объект.ДнейПослеДняРождения + НСтр("ru = 'д. после)'");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПромокод") Тогда
		СтрокаНаименования = НСтр("ru = 'Предъявлен промокод'");
		Если ЗначениеЗаполнено(Объект.ШаблонПромокода) Тогда
			СтрокаНаименования = СтрокаНаименования + " (" + НСтр("ru = 'Шаблон: '") + Объект.ШаблонПромокода + ")";
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаАктивациюВручную") Тогда
		СтрокаНаименования = НСтр("ru = 'Активирована вручную'");
		Если Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'для строки'");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос") Тогда
		СтрокаНаименования = НСтр("ru = 'Произвольное условие'");
		Если Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'для строки'");
		КонецЕсли;
		Если Объект.СхемаСКДМодифицированаВручную Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = '(запрос модифицирован)'");
		КонецЕсли;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.Расширение") Тогда
		СтрокаНаименования = НСтр("ru = 'Расширение'");
		Если Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке") Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'для строки'");
		КонецЕсли;
		Если Объект.СхемаСКДМодифицированаВручную Тогда
			СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = '(запрос модифицирован)'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзмененияКоличества()
	
	НастройкиКоличества = ДокументыУНФКлиентСервер.ПараметрыСбросаКоличества();
	ДокументыУНФ.ЗаполнитьНастройкиКоличества(НастройкиКоличества);
	Возврат НастройкиКоличества;
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("ХарактеристикиИспользуются", СтруктураДанные.Номенклатура.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ЭтоГруппа", СтруктураДанные.Номенклатура.ЭтоГруппа);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПроизвольныйЗапрос
		ИЛИ ТекущийОбъект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.Расширение Тогда
		
		СсылкаУсловие = ТекущийОбъект.Ссылка;
		ПараметрУсловие = НастройкаКомпановкиДанных.Настройки.ПараметрыДанных.Элементы.Найти("Условие");
		Если Не ПараметрУсловие = Неопределено Тогда
			Если Не ЗначениеЗаполнено(СсылкаУсловие) Тогда
				СсылкаУсловие = Справочники.УсловияПредоставленияСкидокНаценок.ПолучитьСсылку(Новый УникальныйИдентификатор());
				ТекущийОбъект.УстановитьСсылкуНового(СсылкаУсловие);
			КонецЕсли;		
			ПараметрУсловие.Значение = СсылкаУсловие;
		КонецЕсли;
		
		// Данные объекты используются только для возможности редактировать настройки в интерфейсе
		Настройки = НастройкаКомпановкиДанных.ПолучитьНастройки();
		СхемаКомпановкиДанныхУсловия = ПолучитьИзВременногоХранилища(АдресСхемыКомпановкиДанных);
		ПараметрУсловие = СхемаКомпановкиДанныхУсловия.Параметры.Найти("Условие");
		Если Не ПараметрУсловие = Неопределено Тогда
			Если Не ЗначениеЗаполнено(СсылкаУсловие) Тогда
				СсылкаУсловие = Справочники.УсловияПредоставленияСкидокНаценок.ПолучитьСсылку(Новый УникальныйИдентификатор());
				ТекущийОбъект.УстановитьСсылкуНового(СсылкаУсловие);
			КонецЕсли;		
			ПараметрУсловие.Значение = СсылкаУсловие;
		КонецЕсли;
		
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпановкиДанныхУсловия);
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		
		// Фактически, для выполнения будет использоваться уже заранее скомпанованный макет.
		// Для каждого отдельного документа будут обновляться значения параметров, и данные в менеджере временных таблиц
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпановкиДанныхУсловия, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ТекущийОбъект.ХранилищеСкомпанованногоМакета = Новый ХранилищеЗначения(МакетКомпоновки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СхемаКомпоновкиДанныхПриИзмененииНаСервере(СохранитьНастройки = Истина)
	НастройкиДоИзменения = Неопределено;
	Если СохранитьНастройки Тогда
		НастройкиДоИзменения = НастройкаКомпановкиДанных.ПолучитьНастройки();
	КонецЕсли;
	СхемаКомпановкиДанныхУсловия = Неопределено;
	Попытка
		СхемаКомпановкиДанныхУсловия = Справочники.УсловияПредоставленияСкидокНаценок.ПолучитьМакет(Объект.ИмяСхемыКомпоновкиДанных);		
		Объект.СхемаСКДМодифицированаВручную = Ложь;
	Исключение
		СхемаКомпановкиДанныхУсловия = Неопределено;
	КонецПопытки;
	Если Не СхемаКомпановкиДанныхУсловия = Неопределено Тогда
		ОбработатьИзменениеСхемыСКД(СхемаКомпановкиДанныхУсловия, НастройкиДоИзменения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСхемыСКД(СхемаКомпановкиДанныхУсловия, НастройкиДоИзменеиня = Неопределено)
	Если ЗначениеЗаполнено(АдресСхемыКомпановкиДанных) Тогда
		ПоместитьВоВременноеХранилище(СхемаКомпановкиДанныхУсловия, АдресСхемыКомпановкиДанных);
	Иначе
		АдресСхемыКомпановкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпановкиДанныхУсловия, УникальныйИдентификатор);
	КонецЕсли;
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпановкиДанных);
	НастройкаКомпановкиДанных.Инициализировать(ИсточникНастроек);
	Если ЗначениеЗаполнено(НастройкиДоИзменеиня) Тогда
		НастройкаКомпановкиДанных.ЗагрузитьНастройки(НастройкиДоИзменеиня);
		НастройкаКомпановкиДанных.Восстановить();
	Иначе
		НастройкаКомпановкиДанных.ЗагрузитьНастройки(СхемаКомпановкиДанныхУсловия.НастройкиПоУмолчанию);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрУсловие = НастройкаКомпановкиДанных.Настройки.ПараметрыДанных.Элементы.Найти("Условие");
		Если Не ПараметрУсловие = Неопределено Тогда
			ПараметрУсловие.Значение = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСхемуСКД(Команда)

	АдресСхемыДляРедактирования = ПоместитьКопиюСхемыВоВременноеХранилище(АдресСхемыКомпановкиДанных, УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр(
		"ru = 'Настройте схему компоновки данных для условия скидки '");

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПомещатьНастройкиВСхемуКомпоновкиДанных", Ложь);
	ПараметрыФормы.Вставить("РедактироватьСхемуКомпоновкиДанных", Истина);
	ПараметрыФормы.Вставить("ЗагрузитьСхемуИзФайла", Истина);
	ПараметрыФормы.Вставить("НастраиватьОтбор", Истина);
	ПараметрыФормы.Вставить("НастраиватьПараметры", Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыДляРедактирования);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных", ПоместитьНастройкиСКДВоВременноеХранилище());
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
	
	ДополнительныеПараметры = Новый Структура("АдресСхемыДляРедактирования", АдресСхемыДляРедактирования);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы, , , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьКопиюСхемыВоВременноеХранилище(АдресСхемы, УникальныйИдентификатор)
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	Возврат ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор)
КонецФункции

&НаКлиенте
Процедура ОткрытьМастерПроизвольногоУсловия(Команда)

	//АдресСхемыДляРедактирования = ПоместитьКопиюСхемыВоВременноеХранилище(АдресСхемыКомпановкиДанных, УникальныйИдентификатор);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	//ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыДляРедактирования);
	//ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных", ПоместитьНастройкиСКДВоВременноеХранилище());

	//ДополнительныеПараметры = Новый Структура("АдресСхемыДляРедактирования", АдресСхемыДляРедактирования);
	//ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	//ОткрытьФорму("Справочник.УсловияПредоставленияСкидокНаценок.Форма.ФормаПодсказкиРасширение", ПараметрыФормы, , , , , ОписаниеОповещения,
	ОткрытьФорму("Справочник.УсловияПредоставленияСкидокНаценок.Форма.ФормаПодсказкиРасширение", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры 

&НаСервере
Функция ПоместитьНастройкиСКДВоВременноеХранилище()
	Возврат ПоместитьВоВременноеХранилище(НастройкаКомпановкиДанных.ПолучитьНастройки(), УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт

	РедактироватьСхемуКомпоновкиДанныхЗавершениеНаСервере(Результат, ДополнительныеПараметры);
	Если Модифицированность Тогда
		ОбновитьАвтонаименование(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РедактироватьСхемуКомпоновкиДанныхЗавершениеНаСервере(Результат, ДополнительныеПараметры) Экспорт

 	АдресХранилищаНастройкиКомпоновщика = Результат;

	Если ЗначениеЗаполнено(АдресХранилищаНастройкиКомпоновщика) Тогда
		// Схема могла быть модифицирована
		АдресИзмененнойСхемы = Неопределено;
		Если ДополнительныеПараметры.Свойство("АдресСхемыДляРедактирования", АдресИзмененнойСхемы) Тогда
			ТиповаяСхема = Справочники.УсловияПредоставленияСкидокНаценок.ПолучитьМакет(Объект.ИмяСхемыКомпоновкиДанных);
			НоваяСхема = ПолучитьИзВременногоХранилища(АдресИзмененнойСхемы);
			Если ЦенообразованиеСервер.ПолучитьXML(НоваяСхема) = ЦенообразованиеСервер.ПолучитьXML(ТиповаяСхема) Тогда
				Объект.СхемаСКДМодифицированаВручную = Ложь;
			Иначе
				Объект.СхемаСКДМодифицированаВручную = Истина;
				ИмяСхемыСКДНаФорме = "Произвольная";
				ПоместитьВоВременноеХранилище(НоваяСхема, АдресСхемыКомпановкиДанных);
				ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпановкиДанных);
				НастройкаКомпановкиДанных.Инициализировать(ИсточникНастроек);
			КонецЕсли;
		КонецЕсли;

		НовыеНастройки = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика);		
		НастройкаКомпановкиДанных.ЗагрузитьНастройки(НовыеНастройки);
		НастройкаКомпановкиДанных.Восстановить();
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПервыйКлючСтруктуры(АнализируемаяСтруктура)
	Результат = Неопределено;
	Если Не ТипЗнч(АнализируемаяСтруктура) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Для Каждого ЭлементСтруктуры Из АнализируемаяСтруктура Цикл
		Результат = ЭлементСтруктуры.Ключ;
		Прервать;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьМастерПроизвольногоУсловия(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ИмяСхемыКомпоновкиДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Стандартная обработка изменит имя в реквизите формы, а имя в реквизите объекта обновим следующим образом.
	Если ВыбранноеЗначение = "Произвольная" Тогда
		// Имя схемы в реквизите объекта останется прежним, чтобы корректно сработала процедура подготовки параметров
		// А имя на форме изменится на "Произвольная" - так пользователю будет очевидно, что схема редактировалась вручную
		Объект.СхемаСКДМодифицированаВручную = Истина;
	ИначеЕсли Объект.СхемаСКДМодифицированаВручную Тогда		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'Схема компоновки была ранее модифицирована вручную. Отменить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияВыбраннойСхемы", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ПослеИзмененияВыбраннойСхемы(КодВозвратаДиалога.Да, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
	КонецЕсли;
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияВыбраннойСхемы(Значение, ДополнительныеПараметры) Экспорт
	НовоеИмяСхемы = Неопределено;
	Если Значение = КодВозвратаДиалога.Да 
		И Не ДополнительныеПараметры = Неопределено 
		И ДополнительныеПараметры.Свойство("ВыбранноеЗначение", НовоеИмяСхемы)
		И Не НовоеИмяСхемы = "Произвольная" Тогда
		ИмяСхемыСКДНаФорме = НовоеИмяСхемы;
		Объект.ИмяСхемыКомпоновкиДанных = НовоеИмяСхемы ;
		СхемаКомпоновкиДанныхПриИзменении(Неопределено);		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

