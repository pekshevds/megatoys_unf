#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Автор) Тогда
		Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый);
	
	АссистентУправления.УдалитьЗапланированныеЗаписиЗадачи(Ссылка);
	ЗапланироватьНовыеЗадачи();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПередВыполнениемЗадачи(Предмет, Источник, ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

Процедура ВыполнитьЗадачу(Предмет, Источник, ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ВидОповещения = Перечисления.ВидОповещенияПоПоказателям.ПриИзменении Тогда
		ДанныеОПоказателях = ЗначенияПоказателейПриИзменении();
	Иначе
		ДанныеОПоказателях = ЗначенияПоказателейРегулярный();
	КонецЕсли;
	
	ЭтоОтправкаСообщенияОбсуждения = ЭтоОтправкаСообщенияОбсуждения();
	ЭтоОтправкаEmail = ЭтоОтправкаEmail();
	ПоказателиИТипЗначения = ПолучитьЭтоПроцентПоказателей();
	
	Если Не ЭтоОтправкаEmail И Не ЭтоОтправкаСообщенияОбсуждения Тогда
		ТекстОшибки = НСтр("ru='Не заполнен ни адрес электронной почты, ни обсуждение для отправки сообщения.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ВидОповещения = Перечисления.ВидОповещенияПоПоказателям.ПриИзменении Тогда
		СформироватьКарточкуАнализаБизнеса();
		ТекстСообщения = ТекстСообщенияОЗначенияхПоказателейПриИзменении(ДанныеОПоказателях, ЭтоОтправкаEmail, ПоказателиИТипЗначения);
	Иначе
		ТекстСообщения = ТекстСообщенияОЗначенияхПоказателейРегулярный(ДанныеОПоказателях, ЭтоОтправкаEmail, ПоказателиИТипЗначения);
	КонецЕсли;
	
	ДанныеСообщенияОПоказателях = ДанныеСообщенияОПоказателях(ДанныеОПоказателях);
	
	Если ЭтоОтправкаEmail Тогда
		НастройкиОтчетов = Новый Массив;
		
		Для Каждого ВидОтчета Из ДанныеСообщенияОПоказателях.ИспользуемыеВидыОтчетов Цикл
			ДобавитьПользовательскиеНастройки(НастройкиОтчетов, ВидОтчета, ДанныеСообщенияОПоказателях);
		КонецЦикла;
		
		НастройкиОтчета = Новый Структура;
		НастройкиОтчета.Вставить("СсылкаВарианта", Справочники.ВариантыОтчетов.НайтиПоНаименованию("Анализ бизнеса"));
		НастройкиОтчета.Вставить("ПользовательскиеНастройкиКД", НастройкиОтчетов);
		СоздатьEmail(ТекстСообщения, НастройкиОтчета);
		
	Иначе
		ДанныеСообщения = ОбсужденияУНФ.НовыйДанныеСообщения();
		ДанныеСообщения.Текст = ТекстСообщения;
		ДанныеСообщения.Данные = ДанныеСообщенияОПоказателях;
		ДобавитьКнопкуДействияДляСообщения(ДанныеОПоказателях, ДанныеСообщения.Действия);
		СоздатьСообщениеОбсуждения(ДанныеСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияЗадачи(Предмет, Источник, ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если НеобходимоПоприветствовать Тогда
		СброситьПризнакНеобходимоПоприветствовать();
	КонецЕсли;
	ЗапланироватьНовыеЗадачи();
	
КонецПроцедуры

Процедура ПоприветствоватьПользователяПередПервымВыполнением() Экспорт
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Используется Тогда
		Возврат;
	КонецЕсли;
	
	Если АссистентУправления.Подключен() Тогда 
		
		ЭтоОтправкаСообщенияОбсуждения = ЭтоОтправкаСообщенияОбсуждения();
		ЭтоОтправкаEmail = ЭтоОтправкаEmail();
		
		Если Не ЭтоОтправкаEmail И Не ЭтоОтправкаСообщенияОбсуждения Тогда
			ТекстОшибки = НСтр("ru='Не заполнен ни адрес электронной почты, ни обсуждение для отправки сообщения.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ДанныеСообщения = ОбсужденияУНФ.НовыйДанныеСообщения();
		Если ВидОповещения = Перечисления.ВидОповещенияПоПоказателям.Регулярный Тогда
			ДанныеСообщения.Текст = ТекстСообщенияПриветствиеПередПервымВыполнениемРегулярный();
		Иначе
			ДанныеСообщения.Текст = ТекстСообщенияПриветствиеПередПервымВыполнениемПриИзменении();
		КонецЕсли;
		ДанныеСообщения.Получатель = Пользователи.АвторизованныйПользователь();
		СоздатьСообщениеОбсуждения(ДанныеСообщения, Истина);
		
	КонецЕсли;
	
	НовыеЗадачиКВыполнению = АссистентУправления.НовыйТаблицаРегулярныхЗадачКВыполнению();
	НоваяЗадача = НовыеЗадачиКВыполнению.Добавить();
	НоваяЗадача.Дата = НачалоДня(ТекущаяДатаСеанса());
	НоваяЗадача.Задача = Ссылка;
	
	АссистентУправления.ЗапланироватьВыполнениеРегулярныхЗадач(НовыеЗадачиКВыполнению);
	АссистентУправления.ВыполнитьРегулярныеЗадачиСейчасВФоне();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапланироватьНовыеЗадачи()
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Используется Тогда
		Возврат;
	КонецЕсли;
	
	НовыеЗадачиКВыполнению = АссистентУправления.НовыйТаблицаРегулярныхЗадачКВыполнению();
	Справочники.ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.ЗапланироватьЗадачиКВыполнению(
		НовыеЗадачиКВыполнению, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка), ВидОповещения, ПериодичностьОтправки);
	Если НовыеЗадачиКВыполнению.Количество() <> 0 Тогда
		АссистентУправления.ЗапланироватьВыполнениеРегулярныхЗадач(НовыеЗадачиКВыполнению);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияПоказателейРегулярный()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПоказателиБизнеса.ТекстЗапросаДляОтчета(Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы, Перечисления.ПланФакт.Факт, Перечисления.Периодичность.Месяц);
	
	Запрос.УстановитьПараметр("СценарийПланирования", Справочники.СценарииПланирования.Фактический);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = ПоказателиБизнеса.ТекстЗапросаДляОтчета(Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток, Перечисления.ПланФакт.Факт, Перечисления.Периодичность.Месяц);
	ПоказателиДенежныйПоток = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПоказатель Из ПоказателиДенежныйПоток Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказатель);
	КонецЦикла;
	
	Запрос.Текст = ПоказателиБизнеса.ТекстЗапросаДляОтчета(Перечисления.ВидыФинансовыхОтчетов.Баланс, Перечисления.ПланФакт.Факт, Перечисления.Периодичность.Месяц);
	ПоказателиБаланс = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПоказатель Из ПоказателиБаланс Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказатель);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияПоказателейПриИзменении()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПоказателиБизнеса.ТекстЗапросаДляОтчета(Показатели.Получить(0).Показатель.ВидОтчета, Перечисления.ПланФакт.Факт, ПериодВПериодичность(), Истина);
	
	ПериодЗапроса = НачалоКонецПериода(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СценарийПланирования", Справочники.СценарииПланирования.Фактический);
	Запрос.УстановитьПараметр("НачалоПериода", ПериодЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПериодЗапроса.КонецПериода);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЭтоПроцентПоказателей()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиБизнеса.Ссылка КАК Ссылка,
	|	ПоказателиБизнеса.ЭтоПроцент КАК ЭтоПроцент
	|ИЗ
	|	Справочник.ПоказателиБизнеса КАК ПоказателиБизнеса";
	
	ПоказателиИТипЗначения = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПоказателиИТипЗначения.Вставить(Выборка.Ссылка, Выборка.ЭтоПроцент);
	КонецЦикла;
	
	Возврат ПоказателиИТипЗначения;

КонецФункции

Функция ТекстСообщенияПриветствиеПередПервымВыполнениемРегулярный()
	
	ТекстСообщения = НСтр("ru='Я буду следить за показателями бизнеса, чтобы Вы смогли сосредоточиться на своих делах 
	|и не беспокоиться о них.
	|
	|%1 %2 я буду отправлять сводку о показателях «%3» Вам %4.'");
	ДобавитьТекстДобрыйДень(ТекстСообщения);
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПериодичностьВыполненияЗадач(), 
	ИнтервалВыполненияЗадачТекстом(), ПоказателиВЗадачеТекстом(), ТипОповещения());
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ТекстСообщенияПриветствиеПередПервымВыполнениемПриИзменении()
	
	ТекстСообщения = НСтр("ru='Я буду заботиться о вашем бизнесе, следить за показателями и уведомлять Вас о любых 
	|изменениях. Мы сможем вместе улучшить результаты и достигнуть новых высот.
	|
	|При изменении показателей «%1» я буду отправлять Вам сообщение %2, но не чаще, чем раз в %3.'");
	ДобавитьТекстДобрыйДень(ТекстСообщения);
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПоказателиВЗадачеТекстом(), ТипОповещения(), ПериодичностьВыполненияЗадачТекстом());
	
	Возврат ТекстСообщения;
	
КонецФункции

Процедура ДобавитьТекстДобрыйДень(ТекстСообщения)
	
	КомпонентыСтроки = Новый Массив;
	КомпонентыСтроки.Добавить(НСтр("ru='Добрый день!'")); // АПК:374
	КомпонентыСтроки.Добавить(Символы.ПС);
	КомпонентыСтроки.Добавить(Символы.ПС);
	КомпонентыСтроки.Добавить(ТекстСообщения);
	ТекстСообщения = СтрСоединить(КомпонентыСтроки);
	
КонецПроцедуры

Процедура ДобавитьТекстПодписи(ТекстСообщения)
	
	КомпонентыСтроки = Новый Массив;
	КомпонентыСтроки.Добавить(ТекстСообщения);
	КомпонентыСтроки.Добавить(Символы.ПС);
	КомпонентыСтроки.Добавить(Символы.ПС);
	КомпонентыСтроки.Добавить(НСтр("ru='С уважением, Даша
	|Ассистент 1С:Управление нашей фирмой'"));
	ТекстСообщения = СтрСоединить(КомпонентыСтроки);
	
КонецПроцедуры

Функция ТекстСообщенияОЗначенияхПоказателейРегулярный(ДанныеОПоказателях, ЭтоОтправкаEmail, ПоказателиИТипЗначения)
	
	Если ДанныеОПоказателях.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Данные по показателям «%1» отсутствуют'"), ПоказателиВЗадачеТекстом());
		Если ЭтоОтправкаEmail Тогда
			ДобавитьТекстДобрыйДень(ТекстСообщения);
			ДобавитьТекстПодписи(ТекстСообщения);
		КонецЕсли;
		Возврат ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru='Вот сводка по показателям за последнее время:
		|
		|%1'");
	КонецЕсли;
	
	ПредыдущаяСуммаПоПоказателям = ПредыдущаяСуммаПоПоказателям(Показатели.ВыгрузитьКолонку("Показатель"));
	
	Если ЭтоОтправкаEmail Тогда
		ДобавитьТекстДобрыйДень(ТекстСообщения);
		ДобавитьТекстПодписи(ТекстСообщения);
	КонецЕсли;
	
	ТекстСообщенияСтроки = Новый Массив;
	Для каждого СтрокаПоказатель Из Показатели Цикл
		
		Показатель = СтрокаПоказатель.Показатель;
		РассчитатьСуммуПоПоказателю(Показатель, ДанныеОПоказателях);
		
		СтрокаСПоказателем = ДанныеОПоказателях.Найти(Показатель, "Показатель");
		
		Если ЗначениеЗаполнено(СтрокаСПоказателем) Тогда
			ТекстСообщенияСтрокаШаблон = ТекстСообщенияЕстьДанныеПоПоказателю(Показатель, СтрокаСПоказателем, ПоказателиИТипЗначения, ПредыдущаяСуммаПоПоказателям);
		Иначе
			ТекстСообщенияСтрокаШаблон = СтрШаблон(НСтр("ru='Сумма по показателю «%1» отсутствует'"), Показатель);
		КонецЕсли;
		
		ТекстСообщенияСтроки.Добавить(ТекстСообщенияСтрокаШаблон);
		
	КонецЦикла;
	
	ТекстСообщенияВсеПоказателиСтрокой = СтрСоединить(ТекстСообщенияСтроки, Символы.ПС);
	Возврат СтрШаблон(ТекстСообщения, ТекстСообщенияВсеПоказателиСтрокой);
	
КонецФункции

Процедура РассчитатьСуммуПоПоказателю(Показатель, ДанныеОПоказателях)

	Если ДанныеОПоказателях.Найти(Показатель, "Показатель") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Показатель.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
		РассчитатьПоФормуле(Показатель, ДанныеОПоказателях);
	ИначеЕсли Показатель.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Группа Тогда
		РассчитатьПоГруппе(Показатель, ДанныеОПоказателях);
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьПоФормуле(Показатель, ДанныеОПоказателях)

	ЗависимыеПоказатели = Новый Массив;
	Справочники.ПоказателиБизнеса.ПолучитьЗависимыеПоказателиРекурсивно(Показатель, ЗависимыеПоказатели);
	Для Сч = 0 По ЗависимыеПоказатели.ВГраница() Цикл
		ЗависимыйПоказатель = ЗависимыеПоказатели[ЗависимыеПоказатели.ВГраница() - Сч];
		Если ЗависимыйПоказатель.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
			Идентификаторы = Новый Массив;
			ПоказателиБизнесаФормулы.ПарсингФормулыНаИдентификаторыОперандов(ЗависимыйПоказатель.СтрокаФормулы, Идентификаторы);
			РассчитатьЗначениеКолонкиПоФормуле(ЗависимыйПоказатель, Идентификаторы, ДанныеОПоказателях);
		ИначеЕсли ЗависимыйПоказатель.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Группа Тогда
			РассчитатьПоГруппе(ЗависимыйПоказатель, ДанныеОПоказателях);
		Иначе
			Если НЕ ЗначениеЗаполнено(ДанныеОПоказателях.Найти(ЗависимыйПоказатель, "Показатель")) Тогда
				СтрокаПоказателя = ДанныеОПоказателях.Добавить();
				СтрокаПоказателя.Показатель = ЗависимыйПоказатель;
				СтрокаПоказателя.Сумма = 0;
				СтрокаПоказателя.ИдентификаторПоказателя = Показатель.ИдентификаторПоказателя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьПоГруппе(Показатель, ДанныеОПоказателях)

	ЗависимыеПоказатели = Новый Массив;
	Справочники.ПоказателиБизнеса.ПолучитьЗависимыеПоказателиРекурсивно(Показатель, ЗависимыеПоказатели);
	СуммаПоГруппе = 0;
	Для Сч = 0 По ЗависимыеПоказатели.ВГраница() - 1 Цикл
		ЗависимыйПоказатель = ЗависимыеПоказатели[ЗависимыеПоказатели.ВГраница() - Сч];
		Если ЗависимыйПоказатель.ТипПоказателя = Перечисления.ТипыПоказателейБизнеса.Формула Тогда
			РассчитатьПоФормуле(ЗависимыйПоказатель, ДанныеОПоказателях);
		КонецЕсли;
		НайденныйПоказатель = ДанныеОПоказателях.Найти(ЗависимыйПоказатель, "Показатель");
		Если ЗначениеЗаполнено(НайденныйПоказатель)
			И НайденныйПоказатель.Показатель.ТипПоказателя <> Перечисления.ТипыПоказателейБизнеса.Группа Тогда
			СуммаПоГруппе = СуммаПоГруппе + НайденныйПоказатель.Сумма;
		КонецЕсли;
	КонецЦикла;
	СтрокаРассчитанногоПоказателя = ДанныеОПоказателях.Добавить();
	СтрокаРассчитанногоПоказателя.Показатель = Показатель;
	СтрокаРассчитанногоПоказателя.Сумма = СуммаПоГруппе;
	СтрокаРассчитанногоПоказателя.ИдентификаторПоказателя = Показатель.ИдентификаторПоказателя;

КонецПроцедуры

Функция ТекстСообщенияОЗначенияхПоказателейПриИзменении(ДанныеОПоказателях, ЭтоОтправкаEmail, ПоказателиИТипЗначения)
	
	Если ДанныеОПоказателях.Количество() = 0 Тогда
		Возврат НСтр("ru='По показателю нет данных'");
	КонецЕсли;
	
	Если ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.Динамика Тогда
		ТекстСообщения = НСтр("ru='За %1 динамика по показателю «%2» стала %3.
		|Для получения больших подробностей ознакомьтесь с отчетом.'");
		Если ВидИзменения = Перечисления.ИзменениеЗначенияПоказателя.Увеличение Тогда
			ФактическоеЗначениеСтрокой = НСтр("ru='увеличиваться'");
		Иначе
			ФактическоеЗначениеСтрокой = НСтр("ru='уменьшаться'");
		КонецЕсли;
	ИначеЕсли ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.СравнениеСПоказателем Тогда
		ТекстСообщения = НСтр("ru='Значение показателя «%1» стало %2 %3, что %4 показателя «%5», значение которого составляет %6 %7
	|Для получения больших подробностей ознакомьтесь с отчетом.'");
	Иначе
		ТекстСообщения = НСтр("ru='Значение показателя «%1» стало %2 %3 Рекомендуемое значение для данного показателя %4 %5
	|Для получения больших подробностей ознакомьтесь с отчетом.'");
	КонецЕсли;
	
	Если ЭтоОтправкаEmail Тогда
		ДобавитьТекстДобрыйДень(ТекстСообщения);
		ДобавитьТекстПодписи(ТекстСообщения);
	КонецЕсли;
	
	СтрокаПоказателя = Показатели.Получить(0);
	ДанныеКарточки = Справочники.КарточкиАнализаБизнеса.ПолучитьДанныеКарточки(ПолучитьКарточкуАнализаБизнеса());
	
	Если ДанныеКарточки.ОценкаХорошо Тогда
		Возврат СтрШаблон(НСтр("ru='Значение показателя «%1» в норме.'"), СтрокаПоказателя.Показатель);
	Иначе
		Возврат ТекстСообщенияПоказательНеВНорме(ТекстСообщения, СтрокаПоказателя, ФактическоеЗначениеСтрокой, ПоказателиИТипЗначения, ДанныеКарточки);
	КонецЕсли;
	
КонецФункции

Функция ИнтервалВыполненияЗадачТекстом()
	
	ВремяОтправленияЗадач = Справочники.ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.ВремяОтправленияЗадач(ВидОповещения);
	
	Если ПериодичностьОтправки = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно Тогда
		Текст = ИнтервалПоЧасам(ВремяОтправленияЗадач);
	ИначеЕсли ПериодичностьОтправки = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно Тогда
		Текст = ИнтервалПоДням(ВремяОтправленияЗадач);
	ИначеЕсли ПериодичностьОтправки = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно Тогда
		Текст = ИнтервалПоДатам(ВремяОтправленияЗадач);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ИнтервалПоЧасам(ВремяОтправленияЗадач)
	
	Если ВремяОтправленияЗадач = 8 Тогда
		Текст = НСтр("ru='с 8 - 12'");
	ИначеЕсли ВремяОтправленияЗадач = 12 Тогда
		Текст = НСтр("ru='с 12 - 16'");
	ИначеЕсли ВремяОтправленияЗадач = 16 Тогда
		Текст = НСтр("ru='с 16 - 20'");
	Иначе
		Текст = СтрШаблон(НСтр("ru='с %1 - %2'"), ВремяОтправленияЗадач - 1, ВремяОтправленияЗадач + 1);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ИнтервалПоДням(ВремяОтправленияЗадач)
	
	Если ВремяОтправленияЗадач = 0 Тогда
		Текст = НСтр("ru='по понедельникам'");
	ИначеЕсли ВремяОтправленияЗадач = 1 Тогда
		Текст = НСтр("ru='по вторникам'");
	ИначеЕсли ВремяОтправленияЗадач = 2 Тогда
		Текст = НСтр("ru='по средам'");
	ИначеЕсли ВремяОтправленияЗадач = 3 Тогда
		Текст = НСтр("ru='по четвергам'");
	ИначеЕсли ВремяОтправленияЗадач = 4 Тогда
		Текст = НСтр("ru='по пятницам'");
	ИначеЕсли ВремяОтправленияЗадач = 5 Тогда
		Текст = НСтр("ru='по субботам'");
	Иначе
		Текст = НСтр("ru='по воскресеньям'");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ИнтервалПоДатам(ВремяОтправленияЗадач)
	
	Возврат СтрШаблон(НСтр("ru='%1-го числа'"), ВремяОтправленияЗадач);
	
КонецФункции

Функция ПериодичностьВыполненияЗадач()
	
	Возврат Справочники.ЗадачиАссистентаПоРаботеСПоказателямиБизнеса.ПериодичностьОтправленияЗадач(ВидОповещения);
	
КонецФункции

Функция ПериодичностьВыполненияЗадачТекстом()

	ПериодичностьВыполнения = ПериодичностьВыполненияЗадач();
	
	Если ПериодичностьВыполнения = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно Тогда
		ТекстПериодичности = НСтр("ru='день'");
	ИначеЕсли ПериодичностьВыполнения = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно Тогда
		ТекстПериодичности = НСтр("ru='неделю'");
	Иначе
		ТекстПериодичности = НСтр("ru='месяц'");
	КонецЕсли;
	
	Возврат ТекстПериодичности;

КонецФункции

Функция ПоказателиВЗадачеТекстом()
	
	Возврат СтрСоединить(Показатели.ВыгрузитьКолонку("Показатель"), ", ");
	
КонецФункции

Функция ЭтоОтправкаEmail()
	
	Возврат ЗначениеЗаполнено(УчетнаяЗапись) И ЗначениеЗаполнено(ПользовательДляОповещения);
	
КонецФункции

Функция ЭтоОтправкаСообщенияОбсуждения()
	
	Если СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеЛичногоОбсужденияПользователю
		И ЗначениеЗаполнено(ПользовательДляОповещения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СпособОповещения = Перечисления.СпособОповещенияАссистентаУправления.СообщениеОбщегоОбсуждения
		И ЗначениеЗаполнено(ИдентификаторОбщегоОбсуждения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура СоздатьEmail(ТекстСообщения, НастройкиОтчета)
	
	ПредставлениеПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательДляОповещения, "Наименование");
	КонтактнаяИнформацияПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ПользовательДляОповещения, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, Ложь);
	АдресаЭлектроннойПочты = Новый Массив;
	СоответствиеАдресов = Новый Соответствие;
	Для каждого ДанныеКонтактнойИнформации Из КонтактнаяИнформацияПользователя Цикл
		ОписаниеПолучателя = Новый Структура;
		ОписаниеПолучателя.Вставить("Адрес", ДанныеКонтактнойИнформации.Представление);
		ОписаниеПолучателя.Вставить("Представление", ПредставлениеПолучателя);
		АдресаЭлектроннойПочты.Добавить(ОписаниеПолучателя);
		СоответствиеАдресов.Вставить(ПредставлениеПолучателя, ДанныеКонтактнойИнформации.Представление);
	КонецЦикла;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", АдресаЭлектроннойПочты);
	ПараметрыПисьма.Вставить("Тема", НСтр("ru='Сводка по показателям бизнеса'"));
	ПараметрыПисьма.Вставить("Тело", ТекстСообщения);
	ПараметрыПисьма.Вставить("ТипТекста", ТипТекстаПочтовогоСообщения.ПростойТекст);
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	
	МассивФорматов = Новый Массив;
	МассивФорматов.Добавить(Перечисления.ФорматыСохраненияОтчетов.PDF);
	ОтчетыРассылка = РассылкаОтчетов.ОтчетыДляРассылки();
	
	Для Каждого Настройки Из НастройкиОтчета.ПользовательскиеНастройкиКД Цикл
		СтрокаОтчета = ОтчетыРассылка.Добавить();
		СтрокаОтчета.Отчет = НастройкиОтчета.СсылкаВарианта;
		СтрокаОтчета.Настройки = Настройки;
		СтрокаОтчета.Форматы = МассивФорматов;
		СтрокаОтчета.ОтправлятьЕслиПустой = Истина;
	КонецЦикла;
	
	ПараметрыДоставки = Новый Структура;
	ПараметрыДоставки.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыДоставки.Вставить("Автор", Автор);
	ПараметрыДоставки.Вставить("ПараметрыПисьма", ПараметрыПисьма);
	ПараметрыДоставки.Вставить("ИспользоватьЭлектроннуюПочту", Истина);
	ПараметрыДоставки.Вставить("Получатели", СоответствиеАдресов);
	ПараметрыДоставки.Вставить("ЗаполнитьСпособДоставкиВШаблонеСообщения", Ложь);
	ПараметрыДоставки.Вставить("ШаблонТекста", ТекстСообщения);

	РассылкаОтчетов.ВыполнитьРассылку(ОтчетыРассылка, ПараметрыДоставки, НСтр("ru='Сводка по показателям'"));
	
КонецПроцедуры

Процедура СоздатьСообщениеОбсуждения(ДанныеСообщения, ОтправитьСейчас = Ложь)
	
	Если ЗначениеЗаполнено(ИдентификаторОбщегоОбсуждения) Тогда
		ДанныеСообщения.Объект = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторОбщегоОбсуждения);
	ИначеЕсли ЗначениеЗаполнено(ПользовательДляОповещения) Тогда
		ДанныеСообщения.Объект = ПользовательДляОповещения;
	Иначе
		ТекстОшибки = НСтр("ru='У задачи не заполнены параметры: ""Пользователь для оповещения"" или ""Общее обсуждение"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	ДанныеСообщения.Автор = АссистентУправления.ПользовательАссистент();
	
	Если ОтправитьСейчас Тогда
		ОбсужденияУНФ.СоздатьСообщение(ДанныеСообщения);
	Иначе
		ОбсужденияУНФ.СоздатьСообщениеОтложенно(ДанныеСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СброситьПризнакНеобходимоПоприветствовать()
	
	ОбменДаннымиЗагрузка = ОбменДанными.Загрузка;
	ОбменДанными.Загрузка = Истина;
	НеобходимоПоприветствовать = Ложь;
	Записать();
	ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
КонецПроцедуры

Процедура ДобавитьКнопкуДействияДляСообщения(ДанныеОстатков, ДействияСообщения)
	
	Если ДанныеОстатков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДействияСообщения.Добавить("Подробнее...", НСтр("ru='отчет'"));
	
КонецПроцедуры

Функция ДанныеСообщенияОПоказателях(ДанныеОПоказателях)
	
	Если ДанныеОПоказателях.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидОтчета = Показатели.Получить(0).Показатель.ВидОтчета;
	ИспользуемыеВидыОтчетов = Новый Массив;
	ИспользуемыеВидыОтчетов.Добавить(ВидОтчета);
	НесколькоВидовОтчета = Ложь;
	
	Для Каждого Показатель Из Показатели Цикл
		Если ИспользуемыеВидыОтчетов.Найти(Показатель.Показатель.ВидОтчета) = Неопределено Тогда
			НесколькоВидовОтчета = Истина;
			ИспользуемыеВидыОтчетов.Добавить(Показатель.Показатель.ВидОтчета);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("НачалоПериода", НачалоГода(ТекущаяДатаСеанса()));
	ДанныеСообщения.Вставить("КонецПериода", КонецМесяца(ТекущаяДатаСеанса()));
	ДанныеСообщения.Вставить("НесколькоВидовОтчета", НесколькоВидовОтчета);
	ДанныеСообщения.Вставить("ИспользуемыеВидыОтчетов", ИспользуемыеВидыОтчетов);
	ДанныеСообщения.Вставить("ВидОповещения", ВидОповещения);
	ДанныеСообщения.Вставить("ВидОтчета", ВидОтчета);
	
	Если ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДоходыРасходы Тогда
		ДанныеСообщения.Вставить("АктивныйОтчет", "ДекорацияДоходыРасходы");
	ИначеЕсли ВидОтчета = Перечисления.ВидыФинансовыхОтчетов.ДенежныйПоток Тогда
		ДанныеСообщения.Вставить("АктивныйОтчет", "ДекорацияДенежныйПоток");
	Иначе
		ДанныеСообщения.Вставить("АктивныйОтчет", "ДекорацияБаланс");
	КонецЕсли;
	
	ДанныеСообщения.Вставить("ВидОповещения", ВидОповещения);
	Если ВидОповещения = Перечисления.ВидОповещенияПоПоказателям.ПриИзменении 
		И ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.Динамика Тогда
		ДанныеСообщения.Вставить("Периодичность", Периодичность);
	Иначе
		ДанныеСообщения.Вставить("Периодичность", Перечисления.Периодичность.Месяц);
	КонецЕсли;
	
	Возврат ДанныеСообщения;
	
КонецФункции

Процедура СформироватьКарточкуАнализаБизнеса()
	
	КарточкаАнализаБизнеса = ПолучитьКарточкуАнализаБизнеса();
	
	Если КарточкаАнализаБизнеса <> Неопределено Тогда
		ИзменитьКарточку(КарточкаАнализаБизнеса);
	Иначе
		СоздатьКарточку();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьКарточку(КарточкаАнализаБизнеса)
	
	НачатьТранзакцию();
	Попытка
		
		ОбъектКарточки = КарточкаАнализаБизнеса.ПолучитьОбъект();
		ОбъектКарточки.Заблокировать();
		ЗаполнитьЗначенияСвойств(ОбъектКарточки, ПолучитьПараметрыДляЗаполненияКарточки());
		ОбъектКарточки.Записать();
		ОбъектКарточки.Разблокировать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьКарточку()
	
	ПараметрыКарточки = ПолучитьПараметрыДляЗаполненияКарточки();
	Справочники.КарточкиАнализаБизнеса.СформироватьКарточкуПоПараметрам(ПараметрыКарточки);
	
КонецПроцедуры

Функция ПолучитьПараметрыДляЗаполненияКарточки()
	
	Показатель = Показатели.Получить(0).Показатель;
	ПараметрыКарточки = Новый Структура;
	ПараметрыКарточки.Вставить("ВидОтчета", Показатель.ВидОтчета);
	ПараметрыКарточки.Вставить("ИмяПоказателя", Показатель.Наименование);
	ПараметрыКарточки.Вставить("Имя", Показатель.Наименование);
	ПараметрыКарточки.Вставить("ПерваяСтрокаЗаголовка", Показатель.Наименование);
	ПараметрыКарточки.Вставить("ПоказательБизнеса", Показатель.Ссылка);
	ПараметрыКарточки.Вставить("ВариантПроверки", ВариантПроверки);
	ПараметрыКарточки.Вставить("ВидСравненияЗначений", ПолучитьОбратныйВидСравнения());
	ПараметрыКарточки.Вставить("ВидИзменения", ВидИзменения);
	ПараметрыКарточки.Вставить("Период", Период);
	ПараметрыКарточки.Вставить("Периодичность", Периодичность);
	ПараметрыКарточки.Вставить("ЗначениеДляСравнения", ЗначениеДляСравнения);
	ПараметрыКарточки.Вставить("ВидКарточки", Перечисления.ВидыКарточекАнализаБизнеса.КонтрольПоказателей);
	
	Если ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.СравнениеСПоказателем Тогда
		ПараметрыКарточки.Вставить("ИмяПоказателяСравнение", ЗначениеДляСравнения.Наименование);
	КонецЕсли;
	
	Возврат ПараметрыКарточки;
	
КонецФункции

Функция ПолучитьОбратныйВидСравнения()
	
	Если ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Больше Тогда
		ОбратныйВидСравнения = Перечисления.ВидСравненияЗначений.МеньшеИлиРавно;
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.БольшеИлиРавно Тогда
		ОбратныйВидСравнения = Перечисления.ВидСравненияЗначений.Меньше;
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Меньше Тогда
		ОбратныйВидСравнения = Перечисления.ВидСравненияЗначений.БольшеИлиРавно;
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.МеньшеИлиРавно Тогда
		ОбратныйВидСравнения = Перечисления.ВидСравненияЗначений.Больше;
	ИначеЕсли ВидСравненияЗначений = Перечисления.ВидСравненияЗначений.Равно Тогда
		ОбратныйВидСравнения = Перечисления.ВидСравненияЗначений.НеРавно;
	Иначе // Не равно
		ОбратныйВидСравнения = Перечисления.ВидСравненияЗначений.Равно;
	КонецЕсли;
	
	Возврат ОбратныйВидСравнения;
	
КонецФункции

Функция ПолучитьКарточкуАнализаБизнеса()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КарточкиАнализаБизнеса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КарточкиАнализаБизнеса КАК КарточкиАнализаБизнеса
		|ГДЕ
		|	КарточкиАнализаБизнеса.ВидКарточки = &ВидКарточки
		|	И КарточкиАнализаБизнеса.ПоказательБизнеса = &ПоказательБизнеса
		|	И КарточкиАнализаБизнеса.ВариантПроверки = &ВариантПроверки
		|	И НЕ КарточкиАнализаБизнеса.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВариантПроверки", ВариантПроверки);
	Запрос.УстановитьПараметр("ВидКарточки", Перечисления.ВидыКарточекАнализаБизнеса.КонтрольПоказателей);
	Запрос.УстановитьПараметр("ПоказательБизнеса", Показатели.Получить(0).Показатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции

Процедура РассчитатьЗначениеКолонкиПоФормуле(Показатель, Идентификаторы, ДанныеОПоказателях)
	
	СоответствиеОперандов = Новый Соответствие;
	
	Если ДанныеОПоказателях.Найти(Показатель, "Показатель") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		СтрокаПоказателя = ДанныеОПоказателях.Найти(Идентификатор, "ИдентификаторПоказателя");
		Если СтрокаПоказателя = Неопределено Тогда
			ЗначениеОперанда = 0;
		Иначе
			ЗначениеОперанда = СтрокаПоказателя.Сумма;
		КонецЕсли;
		Операнд = "[" + Идентификатор + "]";
		ПоказателиБизнесаФормулы.ДобавитьОперандВСтруктуру(СоответствиеОперандов, Операнд, ЗначениеОперанда);
	КонецЦикла;
	
	Результат = Неопределено;
	ПоказателиБизнесаФормулы.РасчетДанныхПоФормуле(Показатель.СтрокаФормулы, СоответствиеОперандов, Результат); 
	
	Если НЕ Результат.ОшибкаРасчета Тогда
		СтрокаРассчитанногоПоказателя = ДанныеОПоказателях.Добавить();
		СтрокаРассчитанногоПоказателя.Показатель = Показатель;
		СтрокаРассчитанногоПоказателя.Сумма = Результат.Сумма;
		СтрокаРассчитанногоПоказателя.ИдентификаторПоказателя = Показатель.ИдентификаторПоказателя;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредыдущаяСуммаПоПоказателям(СписокПоказателей)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммыПоПоказателямБизнесаИзАссистентаСрезПоследних.Сумма КАК Сумма,
	|	СуммыПоПоказателямБизнесаИзАссистентаСрезПоследних.Показатель КАК Показатель
	|ИЗ
	|	РегистрСведений.СуммыПоПоказателямБизнесаИзАссистента.СрезПоследних(
	|			,
	|			Задача = &Задача
	|				И Показатель В (&Показатели)) КАК СуммыПоПоказателямБизнесаИзАссистентаСрезПоследних";
	
	Запрос.УстановитьПараметр("Задача", Ссылка);
	Запрос.УстановитьПараметр("Показатели", СписокПоказателей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТипОповещения()

	Возврат ?(ЭтоОтправкаEmail(), НСтр("ru='на почту'"), НСтр("ru='в обсуждение'"));

КонецФункции

Функция НачалоКонецПериода(Дата)
	
	Результат = Новый Структура;
	СерединаГода = 7;
	
	Если Период = Перечисления.ДоступныеПериодыОтчета.Месяц Тогда
		Результат.Вставить("НачалоПериода", НачалоМесяца(Дата));
		Результат.Вставить("КонецПериода", КонецМесяца(Дата));
	ИначеЕсли Период = Перечисления.ДоступныеПериодыОтчета.Квартал Тогда
		Результат.Вставить("НачалоПериода", НачалоКвартала(Дата));
		Результат.Вставить("КонецПериода", КонецКвартала(Дата));
	ИначеЕсли Период = Перечисления.ДоступныеПериодыОтчета.Полугодие Тогда
		Результат.Вставить("НачалоПериода", Дата(Год(Дата), ?(Месяц(Дата) < СерединаГода, 1, СерединаГода), 1));
		Результат.Вставить("КонецПериода", ДобавитьМесяц(Результат.НачалоПериода, 6) - 1);
	Иначе // Год
		Результат.Вставить("НачалоПериода", НачалоГода(Дата));
		Результат.Вставить("КонецПериода", КонецГода(Дата));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПериодВПериодичность()
	
	Если Период = Перечисления.ДоступныеПериодыОтчета.Месяц Тогда
		Возврат Перечисления.Периодичность.Месяц;
	ИначеЕсли Период = Перечисления.ДоступныеПериодыОтчета.Квартал Тогда
		Возврат Перечисления.Периодичность.Квартал;
	ИначеЕсли Период = Перечисления.ДоступныеПериодыОтчета.Полугодие Тогда
		Возврат Перечисления.Периодичность.Полугодие;
	Иначе // Год
		Возврат Перечисления.Периодичность.Год;
	КонецЕсли;
	
КонецФункции

Функция ТекстСообщенияЕстьДанныеПоПоказателю(Показатель, СтрокаСПоказателем, ПоказателиИТипЗначения, ПредыдущаяСуммаПоПоказателям)

	СуммаПоказателя = Окр(СтрокаСПоказателем.Сумма, 2);
	ЭтоПроцент = ПоказателиИТипЗначения.Получить(Показатель);
	СимволПослеСуммы = ?(ЭтоПроцент, НСтр("ru='%'"), Константы.ВалютаУчета.Получить());
	Если ЗначениеЗаполнено(ПредыдущаяСуммаПоПоказателям) Тогда
		СтрокаСПредыдущейСуммой = ПредыдущаяСуммаПоПоказателям.Найти(Показатель, "Показатель");
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаСПредыдущейСуммой) Тогда
		ПредыдущаяСумма = СтрокаСПредыдущейСуммой.Сумма;
		Если СуммаПоказателя > ПредыдущаяСумма Тогда
			ТекстСообщенияСтрокаШаблон = СтрШаблон(НСтр("ru='«%1» - составляет %2 %3, что больше предыдущей сводки на %4 %5'"),
			Показатель, СуммаПоказателя, СимволПослеСуммы, СуммаПоказателя - ПредыдущаяСумма, СимволПослеСуммы);
		ИначеЕсли СуммаПоказателя < ПредыдущаяСумма Тогда
			ТекстСообщенияСтрокаШаблон = СтрШаблон(НСтр("ru='«%1» - составляет %2 %3, что меньше предыдущей сводки на %4 %5'"),
			Показатель, СуммаПоказателя, СимволПослеСуммы, ПредыдущаяСумма - СуммаПоказателя, СимволПослеСуммы);
		Иначе
			ТекстСообщенияСтрокаШаблон = СтрШаблон(НСтр("ru='«%1» - составляет %2 %3, изменения с предыдущей сводки отсутствуют'"),
			Показатель, СуммаПоказателя, СимволПослеСуммы);
		КонецЕсли;
	Иначе
		ТекстСообщенияСтрокаШаблон = СтрШаблон(НСтр("ru='«%1» - составляет %2 %3'"), Показатель, СуммаПоказателя, СимволПослеСуммы);
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.СуммыПоПоказателямБизнесаИзАссистента.СоздатьНаборЗаписей();
	Запись = НаборЗаписей.Добавить();
	Запись.Задача = Ссылка;
	Запись.Показатель = Показатель;
	Запись.Сумма = СуммаПоказателя;
	Запись.Период = ТекущаяДатаСеанса();
	НаборЗаписей.Записать(Ложь);
	
	Возврат ТекстСообщенияСтрокаШаблон;

КонецФункции

Функция ТекстСообщенияПоказательНеВНорме(ТекстСообщения, СтрокаПоказателя, ФактическоеЗначениеСтрокой, ПоказателиИТипЗначения, ДанныеКарточки)

	Если ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.Динамика Тогда
		Возврат СтрШаблон(ТекстСообщения, НРег(Строка(Период)), СтрокаПоказателя.Показатель, ФактическоеЗначениеСтрокой);
	ИначеЕсли ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.СравнениеСПоказателем Тогда
		СимволПослеСуммы = ?(ПоказателиИТипЗначения.Получить(СтрокаПоказателя.Показатель), "%.", Константы.ВалютаУчета.Получить());
		Возврат СтрШаблон(ТекстСообщения, СтрокаПоказателя.Показатель, Окр(ДанныеКарточки.СуммаПоказателя, 2), СимволПослеСуммы, 
		НРег(Строка(ВидСравненияЗначений)), ЗначениеДляСравнения, ДанныеКарточки.ЗначениеДляСравнения, СимволПослеСуммы);
	Иначе
		СимволПослеСуммы = ?(ПоказателиИТипЗначения.Получить(СтрокаПоказателя.Показатель), "%.", Константы.ВалютаУчета.Получить());
		Возврат СтрШаблон(ТекстСообщения, СтрокаПоказателя.Показатель, Окр(ДанныеКарточки.СуммаПоказателя, 2), СимволПослеСуммы, 
		ДанныеКарточки.ЗначениеДляСравнения, СимволПослеСуммы);
	КонецЕсли;

КонецФункции

Процедура ДобавитьПользовательскиеНастройки(Настройки, ВидОтчета, ДанныеСообщенияОПоказателях)

	СтПериод = Новый СтандартныйПериод; 
	СтПериод.ДатаНачала = ДанныеСообщенияОПоказателях.НачалоПериода; 
	СтПериод.ДатаОкончания = ДанныеСообщенияОПоказателях.КонецПериода;
	
	ОтчетАнализБизнеса = Отчеты.АнализБизнеса.Создать();
	ПользовательскиеНастройки = ОтчетАнализБизнеса.КомпоновщикНастроек.ПользовательскиеНастройки;
	ПользовательскиеНастройки.Элементы[0].Значение = ВидОтчета;
	ПользовательскиеНастройки.Элементы[0].Использование = Истина;
	ПользовательскиеНастройки.Элементы[1].Значение = Перечисления.ПланФакт.Факт;
	ПользовательскиеНастройки.Элементы[2].Значение = СтПериод;
	ПользовательскиеНастройки.Элементы[3].Значение = Справочники.СценарииПланирования.Фактический;
	Если ВариантПроверки = Перечисления.ВариантыПроверокАнализаБизнеса.Динамика Тогда
		ПользовательскиеНастройки.Элементы[4].Значение = Периодичность;
	Иначе 
		ПользовательскиеНастройки.Элементы[4].Значение = Перечисления.Периодичность.Месяц;
	КонецЕсли;
	
	Настройки.Добавить(ПользовательскиеНастройки);

КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли