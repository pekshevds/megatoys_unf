
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Наименование = Объект.Наименование;
	
	Если ТипЗнч( Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВестиРасчетыПоЗаказам = Ложь;
	Иначе
		ВестиРасчетыПоЗаказам = Объект.Владелец.ВестиРасчетыПоЗаказам;
	КонецЕсли;
	
	УчетВалюты = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	ОповеститьОЗаписиДоговора = Параметры.ОповеститьОЗаписиДоговора;
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		ЗаполнитьВидЦен(Истина);
		ЗаполнитьВидЦенКонтрагента();
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			
			ОрганизацияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнаяОрганизация");
			Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
				Объект.Организация = ОрганизацияПоУмолчанию;
			Иначе
				Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
		Объект.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
		
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаРасчетов) Тогда
			Объект.ВалютаРасчетов = НациональнаяВалюта;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Параметры.ТекстЗаполнения) Тогда
			Объект.НомерДоговора = Параметры.ТекстЗаполнения;
		КонецЕсли;
		
		Если Объект.ВалютаРасчетов = НациональнаяВалюта Тогда
			Объект.РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
		Объект.СпособРаспределенияПоЗаказам = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Контрагенты") И НЕ Объект.Владелец.Пустая()
			И НЕ ЗначениеЗаполнено(Объект.ВариантЗаполненияДатыОтгрузки) Тогда

			ЭтоПокупатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Покупатель");
			Если ЭтоПокупатель = Истина Тогда		
				СписокНастроек = Обработки.НастройкаЗаполненияДатыОтгрузки.СписокНастроекДатыОтгрузки();
				НаборКонстант = Константы.СоздатьНабор(СписокНастроек);		
				НаборКонстант.Прочитать();
				ЗаполнитьЗначенияСвойств(Объект, НаборКонстант, СписокНастроек);	
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьВидКонтрагента();
	
	Если Не ЗначениеЗаполнено(Объект.СпособРаспределенияПоЗаказам) Тогда
		ЗначениеМодифицированностиФормы = ЭтаФорма.Модифицированность;
		Объект.СпособРаспределенияПоЗаказам = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
		ЭтаФорма.Модифицированность = ЗначениеМодифицированностиФормы;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СпособВыставленияДокументов) Тогда
		ЗначениеМодифицированностиФормы = ЭтаФорма.Модифицированность;
		Объект.СпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.Автоматически;
		ЭтаФорма.Модифицированность = ЗначениеМодифицированностиФормы;
	КонецЕсли;
	
	ДатаНачалаДоИзменения = ТекущаяДатаСеанса();
	
	ИспользоватьОбменДанными = Истина;
	
	УстановитьСписокВыбораВидовДоговора();
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// Эквайринг
	ВалютаРасчетов = Объект.ВалютаРасчетов;
	// Конец Эквайринг
	
	// Кредиты
	ОбновитьРеквизитыКредита();
	// Конец Кредиты
	
	// Биллинг
	БиллингНастроитьВидимостьЭлементов();
	ЗаполнитьПолучателейРассылки();
	// Конец Биллинг
	
	// Взаиморасчеты
	ВзаиморасчетыПриСозданииНаСервере();
	// Конец Взаиморасчеты
	
	// Интеркампани
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Элементы.Владелец.Заголовок = НСтр("ru = 'Организация-продавец'");
		Элементы.Владелец.Подсказка = НСтр("ru = 'Владелец договора - организация-продавец'");
		Элементы.Организация.Заголовок = НСтр("ru = 'Организация-владелец'");
	КонецЕсли;
	// Конец Интеркампани
	
	// ДатаОтгрузки
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Контрагенты")
		И (Объект.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем
			ИЛИ Объект.ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером) Тогда 
		ЗаполнитьТекстСсылкиДатыОтгрузки();		
	КонецЕсли;
	// Конец ДатаОтгрузки
	
	УстановитьВидимостьИДоступность();
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	Если Параметры.Свойство("ВыделитьЭлемент") Тогда
		ЭлементФормы = Элементы[Параметры.ВыделитьЭлемент];
		РазвернутьВышестоящиеГруппы(ЭлементФормы);
		НовыйЦветФона = ЦветаСтиля.БыстрыеНастройкиФонГруппы;
		ЭлементФормы.ЦветФона = НовыйЦветФона;
		ТекущийЭлемент = ЭлементФормы;
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И ЭлементФормы.Вид <> ВидПоляФормы.ПолеНадписи
			Или ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			ЭлементФормы.ТолькоПросмотр = Ложь;
		Иначе
			ЭлементФормы.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиУНФ.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	НаборСвойств_Справочник_ДоговорыКонтрагентов = УправлениеСвойствами.НаборСвойствПоИмени(
		"Справочник_ДоговорыКонтрагентов");
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	НапоминанияПользователяУНФ.УстановитьОтображениеКомандОрганайзера(Элементы);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);
	
	ПечатьДокументовУНФ.КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(ЭтаФорма, Элементы.ПодменюПечать, Элементы.ПодменюДоговорКонтрагента);
	Элементы.КомандыПечатиДоговорКонтрагента.Вид = ВидГруппыФормы.ГруппаКнопок;
	ШаблоныПечатиОфисныхДокументов.ОпределитьВидимостьКомандШаблоновПечати(Элементы.ФормаОткрытьШаблоныПечатиДоговоровКонтрагентов);
	
	// Автонумерация
	ПолучитьАвтоНумерациюДоговораИНомер();
	// Конец Автонумерация
	
	// ЭДО
	Элементы.ГруппаЭДО.Видимость = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ИспользуютсяМаркировкиВЭДО();
	// Конец ЭДО
	
	ПроверитьНомерНаДубли();
	
	ШаблоныНаименований.ИнициализироватьНастройкиФормированияНаименований(ЭтотОбъект, ШаблоныНаименованийНастройки);
	Если Объект.Ссылка.Пустая() И ПустаяСтрока(Объект.Наименование) И Не ПустаяСтрока(Объект.НомерДоговора) Тогда
		ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования = Истина;
		РедактируемоеСвойствоЗначение = Объект.НомерДоговора;
		ЭлементСпискаСвойств = ШаблоныНаименованийНастройки.СписокСвойств.НайтиПоЗначению("НомерДоговора");
		Если ЭлементСпискаСвойств <> Неопределено Тогда
			ЭлементСпискаСвойств.Представление = РедактируемоеСвойствоЗначение;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеНалогПоУмолчанию = СпособЗаполненияСтавкиНДСПоДоговоруПоУмолчанию();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Функция СпособЗаполненияСтавкиНДСПоДоговоруПоУмолчанию()
	СпособЗаполненияСтавкиНДС = Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(Объект.Ссылка);
	Если ЗначениеЗаполнено(СпособЗаполненияСтавкиНДС) Тогда
		ПредставлениеСпособа = СпособЗаполненияСтавкиНДС;
	Иначе
		ПредставлениеСпособа = НСтр("ru = 'не установлено'");
	КонецЕсли;
	ПоясняющийТекст = СтрШаблон(НСтр("ru = 'По умолчанию: %1'"), ПредставлениеСпособа);
	Возврат Новый ФорматированнаяСтрока(ПоясняющийТекст, , ЦветаСтиля.ПоясняющийТекст);
КонецФункции
	
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДоговорОбслуживанияДатаОкончания = Объект.ДоговорОбслуживанияДатаОкончания;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ПереноситьУдержанныеСуммыНаРасчетыСПоставщиком 
		И Не ЗначениеЗаполнено(Объект.ДоговорСоСлужбойДоставки) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Поле = "Объект.ДоговорСоСлужбойДоставки";
		Сообщение.Текст = НСтр("ru='Выберите договор со службой доставки.'");
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		// Биллинг
		Если Объект.ЭтоДоговорОбслуживания Тогда
			ЗаполнитьПолучателейРассылки();
		КонецЕсли;
		
		ОпределитьДоступностьУчетаЗаказовПриПередачуНаКомиссию(Истина);
		ЗаполнитьВидКонтрагента();
		
		Если ВестиРасчетыПоЗаказам Тогда
			
			Если Объект.НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
				ЭтаФорма.Модифицированность = Истина;
				Объект.НеУчитыватьЗаказыПриПередачеНаКомиссию = Ложь;
			КонецЕсли;
			
			УстановитьЗаголовокКомиссия(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НастройкаАвтонумерацииДоговоров" Тогда
		ПолучитьАвтоНумерациюДоговораИНомер();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ШаблоныНаименований" Тогда
		ШаблоныНаименованийКлиент.ОбработкаОповещенияШаблоныНаименованийПослеЗаписи(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Эквайринг
	Если Не Объект.Ссылка.Пустая() Тогда
		ПроверитьВозможностьИзменений(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец Эквайринг
	
	// Биллинг
	Если Объект.ЭтоДоговорОбслуживания И НЕ Объект.ПометкаУдаления Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ВТНоменклатураИЦены
		|ИЗ
		|	Справочник.ТарифныеПланыДоговоровОбслуживания.УчетНоменклатуры КАК ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЗаключенияДоговора, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|ГДЕ
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Ссылка = &ТарифныйПлан
		|	И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ФормированиеЦены = ЗНАЧЕНИЕ(Перечисление.БиллингФормированиеЦеныНоменклатуры.ПоВидуЦенДоговора)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатураИЦены.Номенклатура,
		|	ВТНоменклатураИЦены.Характеристика,
		|	ВТНоменклатураИЦены.Цена
		|ИЗ
		|	ВТНоменклатураИЦены КАК ВТНоменклатураИЦены
		|ГДЕ
		|	ВТНоменклатураИЦены.Цена = 0";
		
		Запрос.УстановитьПараметр("ДатаЗаключенияДоговора", Объект.ДоговорОбслуживанияДатаНачала);
		Запрос.УстановитьПараметр("ВидЦен", Объект.ВидЦен);
		Запрос.УстановитьПараметр("ТарифныйПлан", Объект.ДоговорОбслуживанияТарифныйПлан);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Для номенклатуры ""%1"" не установлена цена по виду цен ""%2"" на дату начала действия договора (%3).'"),
					Справочники.Номенклатура.Представление(Выборка.Номенклатура, Выборка.Характеристика),
					Объект.ВидЦен,
					Формат(Объект.ДоговорОбслуживанияДатаНачала, "ДЛФ=Д")
				),
				Выборка.Номенклатура,
				,,
				Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучателиРассылкиПерезаполнить Тогда
		ТекущийОбъект.ДоговорОбслуживанияПолучателиРассылки.Очистить();
		Для каждого Стр Из ПолучателиРассылки Цикл
			
			Если НЕ Стр.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТекущийОбъект.ДоговорОбслуживанияПолучателиРассылки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			
		КонецЦикла;
	КонецЕсли;
	// Конец Биллинг
	
	// Обработчик механизма "Свойства".
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Биллинг
	Если ТекущийОбъект.Наименование <> Наименование
		И ЗначениеЗаполнено(Объект.ДоговорОбслуживанияНаправлениеДеятельности) Тогда
		
		ИзмененоНаправлениеДеятельности = 
		Справочники.ДоговорыКонтрагентов.ПереименоватьНаправлениеДеятельностиДляДоговораОбслуживания(
			Объект.ДоговорОбслуживанияНаправлениеДеятельности,
			Объект.Владелец,
			Объект.Наименование,
			Наименование);
		
		Наименование = ТекущийОбъект.Наименование;
		
	КонецЕсли;
	
	// Кредиты
	Если Объект.ЭтоДоговорКредита Тогда
		Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			СоздатьТерминалНаСервере();
		КонецЕсли;
	КонецЕсли;
	// Конец Кредиты
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если Справочники.ДоговорыКонтрагентов.ЭтоОсновнойДоговор(ТекущийОбъект.Ссылка) Тогда
		Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// Биллинг
	Если ИзмененоНаправлениеДеятельности Тогда
		ОповеститьОбИзменении(Объект.ДоговорОбслуживанияНаправлениеДеятельности);
	КонецЕсли;
	Если ОповеститьОЗаписиДоговора Тогда
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли;
	Если ИзмененаНастройкаДатыОтгрузки Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Владелец", Объект.Владелец);
		Оповестить("ИзмененаНастройкаДатыОтгрузкиВДоговоре", СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(ТекущаяАвтонумерация) Тогда 
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
		СтруктураПараметров.Вставить("НастройкиНумерации", ТекущаяАвтонумерация);
		Нумерация.ОсвободитьНомер(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) 
		Или Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		
		Объект.ПроцентКомиссионногоВознаграждения = 0;
		Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
			Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается")
		КонецЕсли;
			
	Иначе
		Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Истина;
	КонецЕсли;
	
	УстановитьЗаголовокКомиссия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержатьКомиссионноеВознаграждениеПриИзменении(Элемент)
	
	УстановитьЗаголовокКомиссия(ЭтаФорма);
	
	Если Объект.УдержатьКомиссионноеВознаграждение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Ложь);
		Объект.НоменклатураДляОтраженияСуммыБезВознаграждения = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьЗаказыПриПередачеНаКомиссиюПриИзменении(Элемент)
	
	Если Объект.НеУчитыватьЗаказыПриПередачеНаКомиссию И ЕстьДвиженияПоЗаказам() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'По договору есть движения по заказам. Изменение не возможно.'"));
		Объект.НеУчитыватьЗаказыПриПередачеНаКомиссию = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановитьЗаголовокКомиссия(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)
	УстановитьЗаголовокКомиссия(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УслугаКомиссионногоВознагражденияПриИзменении(Элемент)
	УстановитьЗаголовокКомиссия(ЭтаФорма);
	
	Если (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомитентом")
		ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером"))
		И Не ЗначениеЗаполнено(Объект.ДоговорУслугиКомиссионногоВознаграждения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения", "ОтметкаНезаполненного", ЗначениеЗаполнено(Объект.УслугаКомиссионногоВознаграждения));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения1", "ОтметкаНезаполненного", ЗначениеЗаполнено(Объект.УслугаКомиссионногоВознаграждения));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения", "ОтметкаНезаполненного", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения1", "ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорУслугиКомиссионногоВознагражденияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДоговорУслугиКомиссионногоВознаграждения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения", "ОтметкаНезаполненного", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорУслугиКомиссионногоВознаграждения1ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДоговорУслугиКомиссионногоВознаграждения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения1", "ОтметкаНезаполненного", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугаАгентскогоВознагражденияПриИзменении(Элемент)
	
	Если (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомитентом")
		ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером"))
		И Не ЗначениеЗаполнено(Объект.ДоговорУслугиКомиссионногоВознаграждения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения1", "ОтметкаНезаполненного", ЗначениеЗаполнено(Объект.УслугаКомиссионногоВознаграждения));
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения1", "ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаДоставкиПриИзменении(Элемент)
	УстановитьЗаголовокДоставка(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПереноситьУдержанныеСуммыНаРасчетыСПоставщикомПриИзменении(Элемент)
	
	Элементы.ДоговорСоСлужбойДоставки.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.ДоговорСоСлужбойДоставки)
																И Объект.ПереноситьУдержанныеСуммыНаРасчетыСПоставщиком;
	
	УстановитьЗаголовокДоставка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоСлужбойДоставкиПриИзменении(Элемент)
	
	УстановитьЗаголовокДоставка(ЭтаФорма);
	
	Элементы.ДоговорСоСлужбойДоставки.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.ДоговорСоСлужбойДоставки)
																И Объект.ПереноситьУдержанныеСуммыНаРасчетыСПоставщиком;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДоговораПриИзменении(Элемент)
	НомерОтредактирован = Истина;
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "НомерДоговора");
	ОбновитьНаименования();
	ПроверитьНомерНаДубли();
КонецПроцедуры // НомерДоговораПриИзменении()

&НаКлиенте
Процедура ДатаДоговораПриИзменении(Элемент)
	
	ПолучитьАвтоНумерациюДоговораИНомер();
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "ДатаДоговора");
	ЗаполнитьДатуНачалаДоговораОбслуживания();
	ОбновитьНаименования();
	
КонецПроцедуры // ДатаДоговораПриИзменении()

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ПолучитьАвтоНумерациюИЗаполнитьВидКонтрагента();
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Владелец");
	ОбновитьНаименования();
	
	// Биллинг
	Если Объект.ЭтоДоговорОбслуживания Тогда
		ЗаполнитьПолучателейРассылки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРасчетовПриИзменении(Элемент)
	
	Если Объект.ВалютаРасчетов = НациональнаяВалюта Тогда
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;
	
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "ВалютаРасчетов");
	ОбновитьНаименования();
	
	УправлениеФормой();
	
КонецПроцедуры // ВалютаРасчетовПриИзменении()

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	УстановитьЗаголовокЦенообразование(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиНаценкиПриИзменении(Элемент)
	
	УстановитьЗаголовокЦенообразование(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиНаценкиОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоДоговорОбслуживанияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорОбслуживанияПериодичность) Тогда
		Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц");
	КонецЕсли;
	Если Объект.ЭтоДоговорОбслуживания И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 0 Тогда
		ОпределитьДатуВыставленияДокументов()
	КонецЕсли;
	
	БиллингНастроитьВидимостьЭлементов();
	ЗаполнитьДатуНачалаДоговораОбслуживания();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбслуживанияДатаНачалаПриИзменении(Элемент)
	
	ПроверитьКорректностьДатыОкончанияДоговора();
	
	УправлениеФормой();
	ОпределитьДатуВыставленияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбслуживанияДатаОкончанияПриИзменении(Элемент)
	
	ПроверитьКорректностьДатыОкончанияДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьДатыОкончанияДоговора()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорОбслуживанияДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДоговорОбслуживанияДатаОкончания < Объект.ДоговорОбслуживанияДатаНачала Тогда
		
		Объект.ДоговорОбслуживанияДатаОкончания = ДоговорОбслуживанияДатаОкончания;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Поле = "Объект.ДоговорОбслуживанияДатаОкончания";
		Сообщение.Текст = НСтр("ru='Дата окончания действия договора обслуживания не может быть раньше даты начала.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	ДоговорОбслуживанияДатаОкончания = Объект.ДоговорОбслуживанияДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбслуживанияПериодичностьПриИзменении(Элемент)
	
	УправлениеФормой();
	ОпределитьДатуВыставленияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбслуживанияТарифныйПланПриИзменении(Элемент)
	
	УстановитьЗаголовокБиллинг(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоМесяцамДеньРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Направление > 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 31
		ИЛИ Направление < 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоКварталамДеньРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Направление > 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 31
		ИЛИ Направление < 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоПолугодиямДеньРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Направление > 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 31
		ИЛИ Направление < 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоГодамДеньРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Направление > 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 31
		ИЛИ Направление < 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоМесяцамДеньПриИзменении(Элемент)
	
	Если Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 1 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 1;
	ИначеЕсли Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 31 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 31;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоКварталамДеньПриИзменении(Элемент)
	
	Если Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 1 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 1;
	ИначеЕсли Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 31 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 31;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоПолугодиямДеньПриИзменении(Элемент)
	
	Если Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 1 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 1;
	ИначеЕсли Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 31 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 31;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоГодамДеньПриИзменении(Элемент)
	
	Если Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 1 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 1;
	ИначеЕсли Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 31 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 31;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиРассылкиПриИзменении(Элемент)
	
	ПолучателиРассылкиПерезаполнить = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Наименование");
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ДоговорКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	ПолучитьАвтоНумерациюДоговораИНомер();
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "ВидДоговора");
	ОбновитьНаименования();
	
	УстановитьВидимостьИДоступность();
	
	Если Не Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоров.Прочее") Тогда
		Объект.ПереноситьУдержанныеСуммыНаРасчетыСПоставщиком = Ложь;
		Объект.ДоговорСоСлужбойДоставки = Неопределено;
	КонецЕсли;
	
	Если Не Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером") Тогда
		Объект.НеУчитыватьЗаказыПриПередачеНаКомиссию = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПолучитьАвтоНумерациюДоговораИНомер();
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Организация");
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРазнесенияОплатыПоУмолчаниюПриИзменении(Элемент)
	УстановитьЗаголовокВзаиморасчеты(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СпособЗачетаПредоплатыПоУмолчаниюПриИзменении(Элемент)
	УстановитьЗаголовокВзаиморасчеты(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПроверкиДублейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "ПоказатьДубли") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = ПараметрыОткрытияФормыДублей();
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтотОбъект);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаСписка", ПараметрыФормы, Элемент,,,,ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоДоговорЭквайрингаПриИзменении(Элемент)
	
	ПроверитьВозможностьСнятияОпцииЭквайринг();
	
	Если Объект.ЭтоДоговорЭквайринга Тогда
		Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоров.Прочее");
		Объект.ЭтоДоговорКредита = Ложь;
	Иначе
		Объект.КонтрольВзаиморасчетовЭквайринг = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВзаиморасчетовЭквайрингПриИзменении(Элемент)
	
	ПроверитьВозможностьСнятияОпцииЭквайринг();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетКомиссииВОтчетеЭквайераПриИзменении(Элемент)
	
	ПроверитьВозможностьСнятияОпцииЭквайринг();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		Объект.АвтоматическиРегистрироватьЦены = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АвтоматическиРегистрироватьЦены", "Доступность", ЗначениеЗаполнено(Объект.ВидЦенКонтрагента));
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Наименование <> Элементы.Наименование.ТекстРедактирования Тогда
		
		Объект.Наименование = Элементы.Наименование.ТекстРедактирования;
		НаименованиеПриИзменении(Элементы.Наименование);
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеНачалоВыбора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	ПолучитьАвтоНумерациюДоговораИНомер();
КонецПроцедуры

&НаКлиенте
Процедура КатегорияДоговораПриИзменении(Элемент)
	ПолучитьАвтоНумерациюДоговораИНомер();
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если Не Объект.Недействителен Тогда Возврат КонецЕсли;
	
	Если ЭлементОсновной() Тогда
		ПараметрыОповещения = Новый Структура();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияПредупрежденияНедействителен", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьПредупреждение(ОповещениеОЗакрытии, НСтр("ru = 'Для установки ""Недействителен"" необходимо установить свойство ""Основной"" другому договору.'"), , НСтр("ru = 'Элемент выбран основным'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияНедействителен(Параметры) Экспорт
	Объект.Недействителен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПризнакАгентаПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиВыделятьВознаграждениеВЧекеПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастроитьПроцентАгентскогоВознагражденияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОткрытьФормуСтавкиАгентскогоВознаграждения();
	Иначе
		
		ТекстВопроса = НСтр("ru='Перед настройкой необходимо записать договор. Записать?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросЗаписатьПередНастройкойВознаграждения",
			ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросЗаписатьПередНастройкойВознаграждения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда
			ОткрытьФормуСтавкиАгентскогоВознаграждения();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаДатыОтгрузкиНажатие(Элемент)
	
	ПараметрыНастроек = Новый Структура("ДоговорКонтрагента", Объект);
	Оповещение = Новый ОписаниеОповещения("НастройкаДатыОтгрузкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.НастройкаЗаполненияДатыОтгрузки.Форма.ФормаНастроек", ПараметрыНастроек, , , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДатыОтгрузкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
	
		ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
		ИзмененаНастройкаДатыОтгрузки = Истина;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЗаполнитьТекстСсылкиДатыОтгрузки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыбытияМаркируемойПродукцииПриИзменении(Элемент)
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ОткрытьШаблоныПечатиДоговоровКонтрагентов(Команда)
	
	ШаблоныПечатиОфисныхДокументовКлиент.ОткрытьШаблоныПечатиОфисныхДокументов(
	ПредопределенноеЗначение("Перечисление.НазначенияШаблоновПечатиОфисныхДокументов.ДоговорКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаправлениеДеятельности(Команда)
	СоздатьНаправлениеДеятельностиВопрос();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборСвойств_Справочник_ДоговорыКонтрагентов);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНомер(Команда)
	ПолучитьАвтоНумерациюДоговораИНомер(Истина);
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "НомерДоговора");
	ОбновитьНаименования();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьАвтоНумерациюИЗаполнитьВидКонтрагента();
	
	ЗаполнитьВидКонтрагента();
	ПолучитьАвтоНумерациюДоговораИНомер();
	
КонецПроцедуры

&НаСервере
Функция ЕстьДвиженияПоЗаказам()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ЗапасыПереданные.Заказ КАК Заказ
	|ИЗ
	|	РегистрНакопления.ЗапасыПереданные КАК ЗапасыПереданные
	|ГДЕ
	|	ЗапасыПереданные.Договор = &Ссылка
	|	И ТИПЗНАЧЕНИЯ(ЗапасыПереданные.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|			И НЕ ЗапасыПереданные.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ЭлементОсновной()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Договор = &Ссылка";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Процедура заполняет вид цен контрагента в зависимости от вида договора.
//
// ВидДоговора - ПеречислениеСсылка.ВидыДоговоров
// Контрагент - Справочник.Контрагенты
//
&НаСервере
Процедура ЗаполнитьВидЦенКонтрагента()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Справочник.ВидыЦенКонтрагентов КАК ЦеныКонтрагента ГДЕ ЦеныКонтрагента.Владелец = &Владелец И НЕ ЦеныКонтрагента.ПометкаУдаления");
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Объект.ВидЦенКонтрагента = Выборка.Ссылка;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПолучитьПараметрыЭлементаПоВидуДоговора()

// Процедура заполняет вид цен контрагента в зависимости от вида договора.
//
// ВидДоговора - ПеречислениеСсылка.ВидыДоговоров
// Контрагент - Справочник.Контрагенты
//
&НаСервере
Процедура ЗаполнитьВидЦен(ЭтоНовый = Ложь)
	
	Если ЭтоНовый Тогда
		
		ВидЦенПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнойВидЦенПродажи");
		
		Если ЗначениеЗаполнено(ВидЦенПродажи) Тогда
			
			Объект.ВидЦен = ВидЦенПродажи;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидЦен()

&НаСервере
Процедура ЗаполнитьВидКонтрагента()
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		Элементы.Владелец.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Владелец) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Элементы.Владелец.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Возврат;
	КонецЕсли;
	
	ВидыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец, "Покупатель,Поставщик,ПрочиеОтношения");
	МассивСтрокВидов = Новый Массив;
	
	Если ВидыКонтрагента.Покупатель Тогда
		МассивСтрокВидов.Добавить(НСтр("ru = 'Покупатель'"));
	КонецЕсли;
	
	Если ВидыКонтрагента.Поставщик Тогда
		МассивСтрокВидов.Добавить(НСтр("ru = 'Поставщик'"));
	КонецЕсли;
	
	Если ВидыКонтрагента.ПрочиеОтношения Тогда
		МассивСтрокВидов.Добавить(НСтр("ru = 'Прочие'"));
	КонецЕсли;
	
	Если МассивСтрокВидов.Количество() = 0 Тогда
		Элементы.Владелец.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Возврат;
	КонецЕсли;
	
	Элементы.Владелец.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Элементы.Владелец.РасширеннаяПодсказка.Заголовок = СтрСоединить(МассивСтрокВидов, НСтр("ru = '; '"));
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы.
//
&НаКлиенте
Процедура УправлениеФормой()
	
	Если Объект.ВалютаРасчетов = НациональнаяВалюта Тогда
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Ложь;
		Элементы.ВалютаРасчетов.АвтоМаксимальнаяШирина = Истина;
	Иначе
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Истина;
		Элементы.ВалютаРасчетов.АвтоМаксимальнаяШирина = Ложь;
		Элементы.ВалютаРасчетов.МаксимальнаяШирина = 32;
	КонецЕсли;
	
	// Биллинг
	Элементы.ВыставлениеДокументовПоНеделямДень.Видимость     = Ложь;
	Элементы.ВыставлениеДокументовПоМесяцамДень.Видимость     = Ложь;
	Элементы.ВыставлениеДокументовПоКварталамДень.Видимость   = Ложь;
	Элементы.ВыставлениеДокументовПоКварталамМесяц.Видимость  = Ложь;
	Элементы.ВыставлениеДокументовПоПолугодиямДень.Видимость  = Ложь;
	Элементы.ВыставлениеДокументовПоПолугодиямМесяц.Видимость = Ложь;
	Элементы.ВыставлениеДокументовПоГодамДень.Видимость       = Ложь;
	Элементы.ВыставлениеДокументовПоГодамМесяц.Видимость      = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДоговорОбслуживанияПериодичность) Тогда
		Если Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Неделя") Тогда
			Элементы.ВыставлениеДокументовПоНеделямДень.Видимость     = Истина;
		ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц") Тогда
			Элементы.ВыставлениеДокументовПоМесяцамДень.Видимость     = Истина;
		ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Квартал") Тогда
			Элементы.ВыставлениеДокументовПоКварталамДень.Видимость   = Истина;
			Элементы.ВыставлениеДокументовПоКварталамМесяц.Видимость  = Истина;
		ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Полгода") Тогда
			Элементы.ВыставлениеДокументовПоПолугодиямДень.Видимость  = Истина;
			Элементы.ВыставлениеДокументовПоПолугодиямМесяц.Видимость = Истина;
		ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Год") Тогда
			Элементы.ВыставлениеДокументовПоГодамДень.Видимость       = Истина;
			Элементы.ВыставлениеДокументовПоГодамМесяц.Видимость      = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АвтоматическиРегистрироватьЦены", "Доступность", ЗначениеЗаполнено(Объект.ВидЦенКонтрагента));
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

// Процедура формирует соответствие видов договора.
//
&НаСервере
Процедура УстановитьСписокВыбораВидовДоговора()
	
	Если Константы.ФункциональнаяОпцияПередачаТоваровНаКомиссию.Получить() Тогда
		Элементы.ВидДоговора.СписокВыбора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") ИЛИ ПолучитьФункциональнуюОпцию("АгентскиеУслуги") Тогда
		Элементы.ВидДоговора.СписокВыбора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
	КонецЕсли;	
	
КонецПроцедуры // УстановитьСписокВыбораВидовДоговора()

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.СтатьяДДСПоУмолчанию.Видимость = ПравоДоступа("Чтение",
		Метаданные.Справочники.СтатьиДвиженияДенежныхСредств);
		
	ЭтоБанковскийПлатежныйАгент = Объект.ПризнакАгента = Перечисления.ПризнакиАгента.БанковскийПлатежныйАгент 
								ИЛИ Объект.ПризнакАгента = Перечисления.ПризнакиАгента.БанковскийПлатежныйСубагент;
	
	ЭтоПлатежныйАгент = Объект.ПризнакАгента = Перечисления.ПризнакиАгента.ПлатежныйАгент
						ИЛИ Объект.ПризнакАгента = Перечисления.ПризнакиАгента.ПлатежныйСубагент;
						
	ЭтоДоговорПрочее = Объект.ВидДоговора = Перечисления.ВидыДоговоров.Прочее;
	ДоступенЭквайринг = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКартами") И ЭтоДоговорПрочее;
	
	// Эквайринг
	Элементы.ГруппаЭквайринг.Видимость = ДоступенЭквайринг;
	Элементы.ГруппаНастройкиЭквайринга.Видимость = Объект.ЭтоДоговорЭквайринга;
	// Конец Эквайринг
	
	// Кредиты
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКредит", "Видимость", ЭтоДоговорПрочее);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчет",				"Видимость", Объект.ЭтоДоговорКредита);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроцентКомиссииЗаКредит",		"Видимость", Объект.ЭтоДоговорКредита);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтрольВзаиморасчетовКредит",	"Видимость", Объект.ЭтоДоговорКредита);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасчетКомиссии",				"Видимость", Объект.ЭтоДоговорКредита);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчет",				"Доступность", Не ЗначениеЗаполнено(ЭквайринговыйТерминал));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроцентКомиссииЗаКредит",		"Доступность", Не ЗначениеЗаполнено(ЭквайринговыйТерминал));
	// Конец Кредиты
	
	ЭтоДоговорСКомиссионером = Объект.ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером;
	ЭтоДоговорСКомитентом = Объект.ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом;
	
	// Способ заполнения НДС в документах поставщика, комиссионера
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНалог",		"Видимость",
		Объект.ВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком
		ИЛИ ЭтоДоговорСКомиссионером);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеНалогПоУмолчанию",		"Видимость",
		НЕ ЗначениеЗаполнено(Объект.СпособЗаполненияСтавкиНДС) ИЛИ Объект.СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически);
	// Конец Способ заполнения НДС в документах поставщика, комиссионера
	
	ОтображатьГруппуКомиссия = ЭтоДоговорСКомитентом И НЕ ЭтоПлатежныйАгент И НЕ ЭтоБанковскийПлатежныйАгент;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКомиссия", "Видимость"
	, ЭтоДоговорСКомиссионером ИЛИ ОтображатьГруппуКомиссия);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НеУчитыватьЗаказыПриПередачеНаКомиссию", "Видимость", ЭтоДоговорСКомиссионером);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", ЭтоДоговорСКомиссионером);
	
	Если ЭтоДоговорСКомиссионером ИЛИ ЭтоДоговорСКомитентом Тогда
		МассивПараметров = Новый Массив;
		
		Если ЭтоДоговорСКомитентом Тогда
			ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
		Иначе
			ВидДоговора = Новый Массив;
			ВидДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			ВидДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		КонецЕсли;
		
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", ВидДоговора));
		Элементы.ДоговорУслугиКомиссионногоВознаграждения.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ДоговорУслугиКомиссионногоВознаграждения1.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения1", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения1", "Видимость", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УслугаКомиссионногоВознаграждения) И Не ЗначениеЗаполнено(Объект.ДоговорУслугиКомиссионногоВознаграждения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения", "ОтметкаНезаполненного", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорУслугиКомиссионногоВознаграждения1", "ОтметкаНезаполненного", Истина);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДоставка", "Видимость", Объект.ВидДоговора = Перечисления.ВидыДоговоров.Прочее);
	
	Если Не ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) 
		Или Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроцентКомиссионногоВознаграждения", "Доступность", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроцентКомиссионногоВознаграждения", "Доступность", Истина);
	КонецЕсли;
	
	ОпределитьДоступностьУчетаЗаказовПриПередачуНаКомиссию();
	
	Если Объект.ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом Тогда
		
		Элементы.ПризнакАгента.СписокВыбора.Очистить();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаБиллинг", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПризнакАгента", "Видимость", Истина);
		
		Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
			Элементы.ПризнакАгента.СписокВыбора.Добавить(Перечисления.ПризнакиАгента.Комиссионер);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("АгентскиеУслуги") Тогда
			Элементы.ПризнакАгента.СписокВыбора.Добавить(Перечисления.ПризнакиАгента.Агент);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки") Тогда
			Элементы.ПризнакАгента.СписокВыбора.Добавить(Перечисления.ПризнакиАгента.Поверенный);
			Элементы.ПризнакАгента.СписокВыбора.Добавить(Перечисления.ПризнакиАгента.ПлатежныйАгент);
			Элементы.ПризнакАгента.СписокВыбора.Добавить(Перечисления.ПризнакиАгента.ПлатежныйСубагент);
			Элементы.ПризнакАгента.СписокВыбора.Добавить(Перечисления.ПризнакиАгента.БанковскийПлатежныйАгент);
			Элементы.ПризнакАгента.СписокВыбора.Добавить(Перечисления.ПризнакиАгента.БанковскийПлатежныйСубагент);
		КонецЕсли;
		
		ДоступноНесколькоПризнаковАгента = Элементы.ПризнакАгента.СписокВыбора.Количество() > 1;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПризнакАгента", "Видимость", ДоступноНесколькоПризнаковАгента);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРеквизитыЧека", "Видимость", ЭтоПлатежныйАгент ИЛИ ЭтоБанковскийПлатежныйАгент);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПараметрыБанковскогоПлатежногоАгента", "Видимость", ЭтоБанковскийПлатежныйАгент);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАгентскоеВознаграждение", "Видимость", ЭтоПлатежныйАгент ИЛИ ЭтоБанковскийПлатежныйАгент);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПроцентАгентскогоВознаграждения", "Доступность", Объект.АвтоматическиВыделятьВознаграждениеВЧеке);
		
		Если НЕ ЗначениеЗаполнено(Объект.ПризнакАгента) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПризнакАгента", "ТолькоПросмотр", Ложь);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПризнакАгента", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаАгентскоеВознаграждение", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРеквизитыЧека", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаБиллинг", "Видимость", Истина);
	КонецЕсли;
	
	// Интеркампани
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидДоговора", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Родитель", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КатегорияДоговора", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЭквайринг", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКредит", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Комментарий", "Высота", 1);
	КонецЕсли;
	// Конец Интеркампани
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НоменклатураДляОтраженияСуммыБезВознаграждения", "Видимость", Объект.УдержатьКомиссионноеВознаграждение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДатаОтгрузки", "Видимость", 
		ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Контрагенты")
		И (Объект.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем
			ИЛИ Объект.ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером));
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЦеныКонтрагента",
		"Видимость", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));

КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьУчетаЗаказовПриПередачуНаКомиссию(ПолучатьЗначениеРеквизита = Ложь)
	
	Если ПолучатьЗначениеРеквизита Тогда
		ВестиРасчетыПоЗаказам = Объект.Владелец.ВестиРасчетыПоЗаказам;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НеУчитыватьЗаказыПриПередачеНаКомиссию", "Доступность", Не ВестиРасчетыПоЗаказам);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАвтоНумерациюДоговораИНомер(НовыйНомерСуществующегоДоговора = Ложь)
	ПредыдущаяАвтонумерация = ТекущаяАвтонумерация;
	СтруктураНумерация = Нумерация.АктуальнаяНастройкаНумерации(Объект);
	Если СтруктураНумерация <> Неопределено Тогда
		ТекущаяАвтонумерация = СтруктураНумерация.Ссылка;
		Элементы.ДекорацияАвтонумерация.Заголовок = СтрШаблон(НСтр("ru = 'Автонумерация %1'"),
			СтруктураНумерация.Наименование);
		Элементы.ГруппаАвтонумерация.Видимость = Истина;
		Элементы.НомерДоговора.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		ТекущаяАвтонумерация = Справочники.НастройкиНумерацииДоговоровКонтрагентов.ПустаяСсылка();
		Элементы.ДекорацияАвтонумерация.Заголовок = НСтр("ru = 'Настроить автонумерацию'");
		Элементы.ГруппаАвтонумерация.Видимость = Ложь;
		Элементы.НомерДоговора.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредыдущаяАвтонумерация) Тогда
		ИзменилсяГодДоговора = ПредыдущаяАвтонумерация.Периодичный И Год(ДатаНачалаДоИзменения) <> Год(Объект.ДатаДоговора);
		Если ПредыдущаяАвтонумерация <> ТекущаяАвтонумерация ИЛИ ИзменилсяГодДоговора Тогда
			СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
			СтруктураПараметров.Вставить("НастройкиНумерации", ПредыдущаяАвтонумерация);
			Если ИзменилсяГодДоговора Тогда
				СтруктураПараметров.Вставить("ДатаДоговора", 	ДатаНачалаДоИзменения);
				ДатаНачалаДоИзменения = Объект.ДатаДоговора;
			КонецЕсли;
			Нумерация.ОсвободитьНомер(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНумерация <> Неопределено И 
		(НовыйНомерСуществующегоДоговора ИЛИ Не СтруктураНумерация.РучнаяНумерация) Тогда
		ПрисвоитьНомер(НовыйНомерСуществующегоДоговора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрисвоитьНомер(НовыйНомерСуществующегоДоговора)
	
	Если (ЗначениеЗаполнено(Объект.Ссылка) Или НомерОтредактирован)
		И НЕ НовыйНомерСуществующегоДоговора Тогда
		Возврат;
	КонецЕсли;
	
	// Присвоение номера
	Если ЗначениеЗаполнено(ТекущаяАвтонумерация) Тогда
		
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("НастройкиНумерации", ТекущаяАвтонумерация);
		ПараметрыФормирования.Вставить("Контрагент", Объект.Владелец);
		ПараметрыФормирования.Вставить("КатегорияДоговора", Объект.КатегорияДоговора);
		ПараметрыФормирования.Вставить("ДатаДоговора", ?(ЗначениеЗаполнено(Объект.ДатаДоговора), Объект.ДатаДоговора, ДатаНачалаДоИзменения));
		
		Нумерация.СформироватьЧисловойНомерДокумента(ПараметрыФормирования, Объект.ЧисловойНомер);
		
		ПараметрыФормирования.Вставить("ЧисловойНомер", Объект.ЧисловойНомер);
		
		ОписанияОшибок = Новый СписокЗначений;
		Нумерация.СформироватьСтроковыйНомерДокумента(ПараметрыФормирования, Объект.НомерДоговора, ОписанияОшибок);
		
		Модифицированность = Истина;
		
		Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
			ОбщегоНазначения.СообщитьПользователю(
				ОписаниеОшибки.Представление,,
			ОписаниеОшибки.Значение,
					"Объект");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСтавкиАгентскогоВознаграждения()
	
	Отбор		   = Новый Структура("ДоговорКонтрагента", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.ПроцентыВознагражденияПоДоговорам.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстСсылкиДатыОтгрузки()

	Элементы.ДекорацияНастройкаДатыОтгрузки.Заголовок = 
		Обработки.НастройкаЗаполненияДатыОтгрузки.ПолучитьЗаголовок(Объект);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьВышестоящиеГруппы(ЭлементФормы)

	Родитель = ЭлементФормы.Родитель;
	
	Если Родитель = ЭтотОбъект Тогда
		Возврат;
	Иначе
		Если Родитель.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			Родитель.Показать();
			РазвернутьВышестоящиеГруппы(Родитель);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ЗаголовкиСвернутогоОтображенияГрупп

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокВзаиморасчеты(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.СпособРазнесенияОплатыПоУмолчанию) Тогда
		ПараметрРазноситьОплату = СтрШаблон(НСтр("ru='Разносить оплату %1'"), Объект.СпособРазнесенияОплатыПоУмолчанию);
		ДинамическиеПараметры.Добавить(ПараметрРазноситьОплату);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СпособЗачетаПредоплатыПоУмолчанию) Тогда
		ПараметрЗачитыватьОплату = СтрШаблон(НСтр("ru='Зачитывать предоплату %1'"),
			Объект.СпособЗачетаПредоплатыПоУмолчанию);
		ДинамическиеПараметры.Добавить(ПараметрЗачитыватьОплату);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаВзаиморасчеты", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКомиссия(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Объект.УдержатьКомиссионноеВознаграждение Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Вознаграждение удерживается'"));
		
		Если ЗначениеЗаполнено(Объект.НоменклатураДляОтраженияСуммыБезВознаграждения) Тогда
			ТекстЗаголовка = НСтр("ru = 'Номенклатура: %1'");
			ДинамическиеПараметры.Добавить(СтрШаблон(ТекстЗаголовка, Строка(Объект.НоменклатураДляОтраженияСуммыБезВознаграждения)));
		КонецЕсли;
		
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='Вознаграждение не удерживается'"));
	КонецЕсли;
	
	Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером") Тогда
		Если Не Форма.ВестиРасчетыПоЗаказам Тогда
			Если Объект.НеУчитыватьЗаказыПриПередачеНаКомиссию Тогда
				ДинамическиеПараметры.Добавить(НСтр("ru='Без заказов'"));
			Иначе
				ДинамическиеПараметры.Добавить(НСтр("ru='По заказам'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
		ТекстЗаголовка = НСтр("ru='Способ расчета: %1'");
		ДинамическиеПараметры.Добавить(СтрШаблон(ТекстЗаголовка, Строка(Объект.СпособРасчетаКомиссионногоВознаграждения)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) 
		И НЕ Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		ТекстЗаголовка = НСтр("ru='%1 %2'");
		ДинамическиеПараметры.Добавить(СтрШаблон(ТекстЗаголовка, Строка(Объект.ПроцентКомиссионногоВознаграждения), "%"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УслугаКомиссионногоВознаграждения) Тогда
		ТекстЗаголовка = НСтр("ru = 'Услуга: %1'");
		ДинамическиеПараметры.Добавить(СтрШаблон(ТекстЗаголовка, Строка(Объект.УслугаКомиссионногоВознаграждения)));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаКомиссия", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокДоставка(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.УслугаДоставки) Тогда
		ПараметрУслуга = СтрШаблон(НСтр("ru='Услуга %1'"), Объект.УслугаДоставки);
		ДинамическиеПараметры.Добавить(ПараметрУслуга);
	КонецЕсли;
	
	Если Объект.ПереноситьУдержанныеСуммыНаРасчетыСПоставщиком Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Переносить удержанные суммы'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДоговорСоСлужбойДоставки) Тогда
		ПараметрДоговорСоСлужбойДоставки = СтрШаблон(НСтр("ru='Договор со службой доставки %1'"),
			Объект.ДоговорСоСлужбойДоставки);
		ДинамическиеПараметры.Добавить(ПараметрДоговорСоСлужбойДоставки);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаДоставка", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВсеЗаголовкиСвернутогоОтображения(Форма)
	
	УстановитьЗаголовокЦенообразование(Форма);
	УстановитьЗаголовокБиллинг(Форма);
	УстановитьЗаголовокВзаиморасчеты(Форма);
	УстановитьЗаголовокКомиссия(Форма);
	УстановитьЗаголовокДоставка(Форма);
	УстановитьЗаголовокЭквайринг(Форма);
	УстановитьЗаголовокКредит(Форма);
	УстановитьЗаголовокЭДО(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЦенообразование(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ПараметрВидЦен = СтрШаблон(НСтр("ru='Вид цен %1'"), Объект.ВидЦен);
		ДинамическиеПараметры.Добавить(ПараметрВидЦен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		ПараметрВидСкидкиНаценки = СтрШаблон(НСтр("ru='Вид скидки, наценки %1'"), Объект.ВидСкидкиНаценки);
		ДинамическиеПараметры.Добавить(ПараметрВидСкидкиНаценки);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаЦенообразование", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокБиллинг(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Объект.ЭтоДоговорОбслуживания И ЗначениеЗаполнено(Объект.ДоговорОбслуживанияТарифныйПлан) Тогда
		ПараметрТарифныйПлан = СтрШаблон(НСтр("ru='Тарифный план %1'"), Объект.ДоговорОбслуживанияТарифныйПлан);
		ДинамическиеПараметры.Добавить(ПараметрТарифныйПлан);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаБиллинг", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЭквайринг(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Объект.ЭтоДоговорЭквайринга Тогда
		ПараметрИспользуется = НСтр("ru='Используется'");
		ДинамическиеПараметры.Добавить(ПараметрИспользуется);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаЭквайринг", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКредит(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Объект.ЭтоДоговорКредита Тогда
		ПараметрИспользуется = НСтр("ru='Используется'");
		ДинамическиеПараметры.Добавить(ПараметрИспользуется);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаКредит", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЭДО(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ВариантВыбытияМаркируемойПродукции) Тогда
		ПараметрИспользуется = СтрШаблон(НСтр("ru='Выбытие маркируемой продукции %1'"), Объект.ВариантВыбытияМаркируемойПродукции);
		ДинамическиеПараметры.Добавить(ПараметрИспользуется);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаЭДО", ДинамическиеПараметры);
	
КонецПроцедуры

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив	 - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)
	
	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
		НазваниеГруппы,
		"ЗаголовокСвернутогоОтображения", 
		ЗаголовокТекст);
	
КонецПроцедуры

#КонецОбласти

#Область Эквайринг

// Если есть остатки движения по регистру накопления РасчетыПоЭквайрингу, то менять значение флага не рекомендуется.
// Если установлен флаг "Кассовый метод учета доходов и расходов", то опцию также не рекомендуется менять.
//
&НаСервере
Процедура ПроверитьВозможностьСнятияОпцииЭквайринг()
	
	СоставТекстаОшибки = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("КассовыйМетодУчетаДоходовИРасходов") И НЕ Объект.Ссылка.Пустая() Тогда
		СоставТекстаОшибки.Добавить(НСтр(
			"ru = 'При установленной опции ""Кассовый метод учета доходов и расходов"" изменение опции не рекомендуется.'"));
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() И РегистрыНакопления.РасчетыПоЭквайрингу.ЕстьДвиженияПоДоговоруЭквайринга(Объект.Ссылка) Тогда
	
		СоставТекстаОшибки.Добавить(НСтр(
			"ru = 'В программе уже содержатся данные об эквайринговых операциях по данному договору. Изменение опции не рекомендуется.
			|Выполнить анализ можно в отчете ""Расчеты по эквайрингу (сводно)"" с детализацией до регистратора. Отчет вызывается из раздела ""Деньги"".'"));
	
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(СоставТекстаОшибки, Символы.ПС);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьИзменений(Отказ)
	
	Если ВалютаРасчетов = Объект.ВалютаРасчетов Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Договор
	|ИЗ
	|	Справочник.СпособыОплаты КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Договор = &Договор";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекстСообщения = НСтр(
			"ru = 'В базе присутствуют эквайринговые терминалы, в которых выбран текущий договор.
			|Изменение валюты расчетов запрещено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВалютаРасчетов", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Биллинг

&НаКлиенте
Процедура СоздатьНаправлениеДеятельностиВопрос()
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Перед созданием направления действия необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьНаправлениеДеятельностиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СоздатьНаправлениеДеятельностиДляДоговораОбслуживания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаправлениеДеятельностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	СоздатьНаправлениеДеятельностиДляДоговораОбслуживания();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНаправлениеДеятельностиДляДоговораОбслуживания()
	
	Объект.ДоговорОбслуживанияНаправлениеДеятельности = 
		Справочники.ДоговорыКонтрагентов.СоздатьНаправлениеДеятельностиДляДоговораОбслуживания(Объект.Владелец, Объект.Ссылка);
	Записать();
	
	БиллингНастроитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура БиллингНастроитьВидимостьЭлементов()
	
	Если Объект.ЭтоДоговорОбслуживания Тогда
		Элементы.ГруппаБиллингНастройки.Видимость = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ГруппаБиллингНастройки.Видимость = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		Возврат;
	КонецЕсли;
	
	ИспользоватьНаправленияДеятельности = Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Получить();
	
	Если НЕ ИспользоватьНаправленияДеятельности Тогда
		Элементы.ДоговорОбслуживанияНаправлениеДеятельности.Видимость = Ложь;
		Элементы.ГруппаСоздатьНаправлениеДеятельности.Видимость = Ложь;
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
			ИЛИ ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.Ссылка.ЭтоДоговорОбслуживания Тогда
			// Это новый объект или существующий, который становится договором обслуживания.
			// Направление деятельности создается автоматически.
			Элементы.ДоговорОбслуживанияНаправлениеДеятельности.Видимость = Истина;
			Элементы.ГруппаСоздатьНаправлениеДеятельности.Видимость = Ложь;
		Иначе
			// Это существующий договор обслуживания.
			// Направление деятельности создается вручную, если не было создано ранее.
			Элементы.ДоговорОбслуживанияНаправлениеДеятельности.Видимость = ЗначениеЗаполнено(Объект.ДоговорОбслуживанияНаправлениеДеятельности);
			Элементы.ГруппаСоздатьНаправлениеДеятельности.Видимость = НЕ ЗначениеЗаполнено(Объект.ДоговорОбслуживанияНаправлениеДеятельности);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПолучателейРассылки()
	
	ПолучателиРассылки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ДоговорыКонтрагентовДоговорОбслуживанияПолучателиРассылки.Контакт КАК Контакт,
	|	ДоговорыКонтрагентовДоговорОбслуживанияПолучателиРассылки.АдресЭП КАК АдресЭП
	|ПОМЕСТИТЬ ВТВыбранныеПолучатели
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.ДоговорОбслуживанияПолучателиРассылки КАК ДоговорыКонтрагентовДоговорОбслуживанияПолучателиРассылки
	|ГДЕ
	|	ДоговорыКонтрагентовДоговорОбслуживанияПолучателиРассылки.Ссылка = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛОЖЬ КАК Пометка,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контакт,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК АдресЭП
	|ПОМЕСТИТЬ ВТВсеПолучатели
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
	|	И КонтрагентыКонтактнаяИнформация.Тип = &ТипКИ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	ЛОЖЬ,
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	СвязиКонтрагентКонтакт.Контрагент = &Контрагент
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип = &ТипКИ
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыбранныеПолучатели.Пометка КАК Пометка,
	|	ВТВыбранныеПолучатели.Контакт КАК Контакт,
	|	ВТВыбранныеПолучатели.АдресЭП КАК АдресЭП
	|ИЗ
	|	ВТВыбранныеПолучатели КАК ВТВыбранныеПолучатели
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТВсеПолучатели.Пометка,
	|	ВТВсеПолучатели.Контакт,
	|	ВТВсеПолучатели.АдресЭП
	|ИЗ
	|	ВТВсеПолучатели КАК ВТВсеПолучатели
	|ГДЕ
	|	НЕ ВТВсеПолучатели.АдресЭП В
	|				(ВЫБРАТЬ
	|					ВТВыбранныеПолучатели.АдресЭП
	|				ИЗ
	|					ВТВыбранныеПолучатели КАК ВТВыбранныеПолучатели)";
	
	Запрос.УстановитьПараметр("Контрагент", Объект.Владелец);
	Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПолучателиРассылки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуНачалаДоговораОбслуживания()
	
	Если Объект.ЭтоДоговорОбслуживания
		И НЕ ЗначениеЗаполнено(Объект.ДоговорОбслуживанияДатаНачала)
		И ЗначениеЗаполнено(Объект.ДатаДоговора) Тогда
		
		Объект.ДоговорОбслуживанияДатаНачала = Объект.ДатаДоговора;
		ОпределитьДатуВыставленияДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДатуВыставленияДокументов()
	
	Если Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Неделя") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = ДеньНедели(Объект.ДоговорОбслуживанияДатаНачала);
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = 0;
		
	ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(Объект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(Объект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = 0;
		
	ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Квартал") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(Объект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(Объект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = Месяц(Объект.ДоговорОбслуживанияДатаНачала) - Месяц(НачалоКвартала(Объект.ДоговорОбслуживанияДатаНачала)) + 1;
		
	ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Полгода") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(Объект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(Объект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = ?(Месяц(Объект.ДоговорОбслуживанияДатаНачала) > 6, Месяц(Объект.ДоговорОбслуживанияДатаНачала) - 6, Месяц(Объект.ДоговорОбслуживанияДатаНачала));
		
	ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Год") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(Объект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(Объект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = Месяц(Объект.ДоговорОбслуживанияДатаНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
	// УНФ. Шаблоны наименований
	ШаблоныНаименований.ЗаполнитьСписокСвойствОбъекта(ЭтотОбъект);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-check module-unused-method
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Взаиморасчеты

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере();
	
	Если ТипЗнч( Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Объект.СпособЗачетаПредоплатыПоУмолчанию =  РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаПредоплатыПоУмолчанию();
		Объект.СпособРазнесенияОплатыПоУмолчанию =  РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаПредоплатыПоУмолчанию();
	Иначе
		Если Объект.СпособЗачетаПредоплатыПоУмолчанию.Пустая() Тогда
			Объект.СпособЗачетаПредоплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект, Объект.Владелец, Истина);
		КонецЕсли;
		Если Объект.СпособРазнесенияОплатыПоУмолчанию.Пустая() Тогда
			Объект.СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект, Объект.Владелец, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("Договор", Объект.Родитель);
	ПараметрыОткрытия.Вставить("ВидДоговора", Объект.ВидДоговора);
	ПараметрыОткрытия.Вставить("ТекущаяАвтонумерация", ТекущаяАвтонумерация);
	ОткрытьФорму("Справочник.НастройкиНумерацииДоговоровКонтрагентов.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект,
		УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ПроверитьНомерНаДубли()
	
	ОписаниеОшибки = "";
	
	Если ПустаяСтрока(Объект.НомерДоговора) Тогда
		Элементы.ПредставлениеПроверкиДублей.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка <> &Ссылка
	|	И ДоговорыКонтрагентов.НомерДоговора = &НомерДоговора";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("НомерДоговора", СокрЛП(Объект.НомерДоговора));
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.Текст = Запрос.Текст +"
		| И ДоговорыКонтрагентов.Организация = &Организация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяАвтонумерация) Тогда
		Если ЗначениеЗаполнено(ТекущаяАвтонумерация.ВидДоговора) Тогда
			Запрос.УстановитьПараметр("ВидДоговора", ТекущаяАвтонумерация.ВидДоговора);
			Запрос.Текст = Запрос.Текст +"
			| И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяАвтонумерация.Договор) Тогда
			Запрос.УстановитьПараметр("Родитель", ТекущаяАвтонумерация.Договор);
			Запрос.Текст = Запрос.Текст +"
			| И ДоговорыКонтрагентов.Родитель = &Родитель";
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	КоличествоДублей = Запрос.Выполнить().Выгрузить().Количество();
	УстановитьПривилегированныйРежим(Ложь);
	Если КоличествоДублей = 0 Тогда
		Элементы.ПредставлениеПроверкиДублей.Видимость = Ложь;
	Иначе
		Элементы.ПредставлениеПроверкиДублей.Видимость = Истина;
		СтруктураПараметровСообщенияОДублях = Новый Структура;
		Если КоличествоДублей = 1 Тогда
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоДублей", НСтр("ru = 'один'"));
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'договор'"));
		ИначеЕсли КоличествоДублей < 5 Тогда
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоДублей", КоличествоДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'договора'"));
		Иначе
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоДублей", КоличествоДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'договоров'"));
		КонецЕсли;
		ОписаниеОшибки = НСтр("ru = 'С таким номером есть [КоличествоДублей] [СклонениеКонтрагентов]'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ОписаниеОшибки, СтруктураПараметровСообщенияОДублях);
		ПредставлениеПроверкиДублей = Новый ФорматированнаяСтрока(ОписаниеОшибки, , ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента, , "ПоказатьДубли");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПроверитьНомерНаДубли();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыДублей()
	
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("НомерДоговора", СокрЛП(Объект.НомерДоговора));
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяАвтонумерация) Тогда
		Если ЗначениеЗаполнено(ТекущаяАвтонумерация.ВидДоговора) Тогда
			Отбор.Вставить("ВидДоговора", ТекущаяАвтонумерация.ВидДоговора);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяАвтонумерация.Договор) Тогда
			Отбор.Вставить("Родитель", ТекущаяАвтонумерация.Договор);
		КонецЕсли;
	КонецЕсли;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Возврат ПараметрыФормы;
КонецФункции

&НаКлиенте
Процедура НомерДоговораРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПереходВЕБВ" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтрокаПоиска", "Договоры");
		
		ОткрытьФорму("Обработка.НастройкаПрограммы.Форма",
			ПараметрыФормы);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Кредиты

&НаСервере
Процедура ОбновитьРеквизитыКредита()
	
	Если Объект.ЭтоДоговорКредита Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			МассивТерминалов = ЭквайринговыеОперацииСервер.ПолучитьТерминалыПоДоговору(Объект.Ссылка);
			Если МассивТерминалов.Количество() > 0 Тогда
				ЭквайринговыйТерминал = МассивТерминалов[0];
				БанковскийСчет = ЭквайринговыйТерминал.БанковскийСчетЭквайринг;
				ПроцентКомиссииЗаКредит = ?(ЭквайринговыйТерминал.ВидыПлатежныхКарт.Количество() > 0, ЭквайринговыйТерминал.ВидыПлатежныхКарт[0].ПроцентКомиссии, 0);
			Иначе
				БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
			КонецЕсли;
		Иначе
			БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
		КонецЕсли;
		
	Иначе
		
		БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		ПроцентКомиссииЗаКредит = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоДоговорКредитаПриИзменении(Элемент)
	
	Если Не Объект.ЭтоДоговорКредита Тогда
		ПроверитьВозможностьСнятияОпцииКредит();
	Иначе
		Объект.ЭтоДоговорЭквайринга = Ложь;
	КонецЕсли;
	
	Если Объект.ЭтоДоговорКредита Тогда
		Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоров.Прочее");
	КонецЕсли;
	
	ОбновитьРеквизитыКредита();
	
	УстановитьВидимостьИДоступность();
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьСнятияОпцииКредит()
	
	ТекстОшибки = "";
	
	Если Не Объект.Ссылка.Пустая() И РегистрыНакопления.РасчетыПоЭквайрингу.ЕстьДвиженияПоДоговоруЭквайринга(Объект.Ссылка) Тогда
	
		ТекстОшибки = НСтр(
		"ru = 'В программе уже содержатся данные об операциях по данному договору. Изменение опции не рекомендуется.
		|Выполнить анализ можно в отчете ""Расчеты по эквайрингу (сводно)"" с детализацией до регистратора. Отчет вызывается из раздела ""Деньги"".'");
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТерминалНаСервере()
	
	НовыйТерминал = Справочники.СпособыОплаты.СоздатьЭлемент();
	НовыйТерминал.Наименование = СтрШаблон("%1 (%2%3); ""%4""", Объект.Владелец, ПроцентКомиссииЗаКредит, "%",
		Объект.Наименование);
	
	НовыйТерминал.Организация = Объект.Организация;
	НовыйТерминал.СчетУчета = ПланыСчетов.Управленческий.РасчетыСРазнымиДебиторами;
	НовыйТерминал.СчетЗатрат = ПланыСчетов.Управленческий.ПрочиеРасходы;
	
	НовыйТерминал.БанковскийСчетЭквайринг = БанковскийСчет;
	НовыйТерминал.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	НовыйТерминал.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
	
	НовыйТерминал.Касса = НовыйТерминал.Организация.КассаПоУмолчанию;
	
	НовыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	
	НовыйТерминал.Эквайрер = Объект.Владелец;
	НовыйТерминал.Договор = Объект.Ссылка;
	
	НовыйТерминал.УдалитьДляКредита = Истина;
	НовыйТерминал.Тип = Перечисления.ТипыСпособовОплат.Кредит;
	
	СтрокаНовыйВидПлатежнойКарты = НовыйТерминал.ВидыПлатежныхКарт.Добавить();
	СтрокаНовыйВидПлатежнойКарты.ВидПлатежнойКарты = НСтр("ru = 'Кредит'");
	СтрокаНовыйВидПлатежнойКарты.ПроцентКомиссии = ПроцентКомиссииЗаКредит;
	
	НовыйТерминал.Записать();
	ЭквайринговыйТерминал = НовыйТерминал.Ссылка;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныНаименований

&НаКлиенте
Процедура Подключаемый_НаименованиеНачалоВыбора()
	
	Если ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования Тогда
		СформироватьНаименования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НаименованиеОбработкаВыбора", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныНаименованийНастройки.СформированныеНаименования,
		Элементы.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ОбработатьРезультатВыбора(Результат.Значение, Результат.Представление);
	ШаблоныНаименованийКлиент.НаименованиеОбработкаВыбора(
		ЭтотОбъект, ВыбранноеЗначение, , Объект.Наименование, ПредопределенноеЗначение(
		"Перечисление.ВидыНаименованийОбъектов.ДоговорКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименования()
	
	ШаблоныНаименованийКлиент.ОбновитьНаименование(
		ЭтотОбъект, Объект.Наименование, ПредопределенноеЗначение(
		"Перечисление.ВидыНаименованийОбъектов.ДоговорКонтрагента"));
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление)
	
	Возврат ШаблоныНаименований.ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление);
	
КонецФункции

&НаСервере
Процедура СформироватьНаименования()
	
	ШаблоныНаименований.СформироватьНаименования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияПриИзменении(Элемент)
	
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "СрокДействия");
	ОбновитьНаименования();
	
КонецПроцедуры

#КонецОбласти

