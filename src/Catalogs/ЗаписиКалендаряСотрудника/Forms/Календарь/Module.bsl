
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийЭлементЦвета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	УстановитьНастройкиВыбораВремениНовойЗадачи();
	УстановитьВидимостьЭлементов();
	ВосстановитьНастройки();
	Если ЭтоВыборВремениЗадачи Тогда
		ДатаОтображения = ДатаНовойЗадачи;
	Иначе
		ДатаОтображения = ТекущаяДатаСеанса();
	КонецЕсли;
	ВосстановитьНастройкиОтборов();
	ПрочитатьДоступныеКалендари();
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	УстановитьУсловноеОформлениеНаВесьДень();
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриСменеДатыОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НастройкиОтображения, ВыбранноеЗначение);
			СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ИсточникЗаписейКалендаряСотрудника"
		Или ИмяСобытия = "Запись_ЗаписиКалендаряПодготовкиОтчетности" Тогда
		
		ОбновитьДанныеПланировщикаСервер();
		
	ИначеЕсли ИмяСобытия = "Запись_КалендарьСотрудника" Тогда
		
		ОбработатьЗаписьКалендаряСервер();
		
	ИначеЕсли ИмяСобытия = "ОчиститьСеансовыеДанные" Тогда
		
		СеансовыеДанные = Новый Структура;
		
	ИначеЕсли ИмяСобытия = "Запись_ЗадачаСотрудника" Тогда
		
		ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
		
	ИначеЕсли ИмяСобытия = "Календарь_ОбновитьСписокДоступныхКалендарей" Тогда
		
		ПрочитатьДоступныеКалендари();
		
	ИначеЕсли ИмяСобытия = "Календарь_ОбновитьНастройкиСинхронизации" Тогда
		
		НастроитьГруппуНастроитьУчетныеЗаписи();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	//УНФ.ОтборыСписка
	СохранитьНастройкиОтборов();
	//Конец УНФ.ОтборыСписка
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаНовойЗадачиПриИзменении(Элемент)
	
	ПриСменеДатыОтображения(ДатаНовойЗадачи);
	ЗаполнитьДатыНачалаОкончанияНовойЗадачиВОбъекте(ЭтотОбъект);
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаНовойЗадачиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяНачалаНовойЗадачи = Неопределено;
	ВремяОкончанияНовойЗадачи = Неопределено;
	
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияНовойЗадачиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяНачалаНовойЗадачи = Неопределено;
	ВремяОкончанияНовойЗадачи = Неопределено;
	
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаНовойЗадачиПриИзменении(Элемент)
	
	СместитьВремяОкончанияНовойЗадачиАвтоматическиПриИзменении();
	ЗаполнитьДатыНачалаОкончанияНовойЗадачиВОбъекте(ЭтотОбъект);
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияНовойЗадачиПриИзменении(Элемент)
	
	СместитьВремяНачалаНовойЗадачиАвтоматическиПриИзменении();
	ЗаполнитьДатыНачалаОкончанияНовойЗадачиВОбъекте(ЭтотОбъект);
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗадачаКалендарьПриИзменении(Элемент)
	
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрБезСрокаПриИзменении(Элемент)
	ЗаполнитьЗадачиНаВесьДеньКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПросроченоПриИзменении(Элемент)
	ЗаполнитьЗадачиНаВесьДеньКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	ПриСменеДатыОтображения();
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриИзменении(Элемент)
	
	ДатаНовойЗадачи = ДатаОтображения;
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДеньОтложенно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТегиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("Теги.Тег", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗавершенныеПриИзменении(Элемент)
	УстановитьОтборПоЗавершенным();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриАктивизацииДаты(Элемент)
	
	ПриСменеДатыОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстроеСозданиеЗадачиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НоваяЗадачаБыстроеСоздание = СоздатьЗадачуСервер(Текст);
	Если НЕ ЗначениеЗаполнено(НоваяЗадачаБыстроеСоздание) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНовойЗадачи = Новый Структура("НоваяЗадача", НоваяЗадачаБыстроеСоздание);
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	ПараметрыНовойЗадачи.Вставить("Список", "ЗадачиНаВесьДеньКалендарь");
	
	ОбновитьТекущийЭлементСписка(ПараметрыНовойЗадачи);
	ПоказатьОповещениеПользователя(НСтр("ru='Создание:'"),
		ПолучитьНавигационнуюСсылку(НоваяЗадачаБыстроеСоздание),
		СтрШаблон(НСтр("ru='%1'"),НоваяЗадачаБыстроеСоздание),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоВыборВремениЗадачи Тогда
		ОбновитьВремяНовойЗадачи(Начало, Конец);
		ОбновитьДанныеПланировщикаИЗадачиНаВесьДеньОтложенно();
	Иначе
		ПоказатьВыборТипаСоздаваемойЗадачи(Начало, Конец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыделенныйЭлемент.Значение.ЗаписьКалендаря) Тогда
			ОбрабатываемыйЭлемент = Новый Структура;
			
			Если ТипЗнч(ВыделенныйЭлемент.Значение.ЗаписьКалендаря) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
				ОбрабатываемыйЭлемент.Вставить("Источник", ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
			Иначе
				ОбрабатываемыйЭлемент.Вставить("Источник", ВыделенныйЭлемент.Значение.Источник);
			КонецЕсли;
			
			ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
			ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
			ОбрабатываемыйЭлемент.Вставить("Начало",				ВыделенныйЭлемент.Начало);
			ОбрабатываемыйЭлемент.Вставить("Конец",					ВыделенныйЭлемент.Конец);
			ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		Иначе
			ОбновитьВремяНовойЗадачи(ВыделенныйЭлемент.Начало, ВыделенныйЭлемент.Конец);
		КонецЕсли;
		
	КонецЦикла;
	
	ОтменаРедактирования = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		Если ТипЗнч(ВыделенныйЭлемент.Значение.ЗаписьКалендаря) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			ОбрабатываемыйЭлемент.Вставить("Источник", ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		Иначе
			ОбрабатываемыйЭлемент.Вставить("Источник", ВыделенныйЭлемент.Значение.Источник);
		КонецЕсли;
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
		ОбрабатываемыйЭлемент.Вставить("ПометкаУдаления",		Истина);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	Отказ = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	Если ВариантПериода = "Месяц" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекущаяДатаСеанса) Тогда
			ДатаОтображения = ТекущаяДатаСеанса;
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало < Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, -1);
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало > Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, 1);
		КонецЕсли;
		
		ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
		Планировщик.ТекущиеПериодыОтображения.Очистить();
		Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
		
		Планировщик.ИнтервалыФона.Очистить();
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	Иначе
		
		ДатаОтображения = ТекущиеПериодыОтображения[0].Начало;
		
	КонецЕсли;
	
	ПриСменеДатыОтображения();
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДеньОтложенно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранКалендарьПриИзменении(Элемент)
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЦветКалендарьНажатие(Элемент)
	
	ТекущийЭлементЦвета = Элемент;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияЦветНажатие", ЭтотОбъект);
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Цвет", Элемент.ЦветФона);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораЦветаУНФ", ПараметрыОткрытияФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаВесьДеньКалендарьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаВесьДеньКалендарь.ТекущиеДанные.Задача) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ",Элементы.ЗадачиНаВесьДеньКалендарь.ТекущиеДанные.Задача);
	ФормаЗадачи = ИмяФормыЗадачиПоТипу(Элементы.ЗадачиНаВесьДеньКалендарь.ТекущиеДанные.Задача);
	Если ФормаЗадачи = "" Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ФормаЗадачи, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВидГруппыВнешнегоКалендаря(Элемент)

	ИмяГруппы = СтрШаблон("ГруппаВнешнийКалендарьСписок_%1", Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрНайти(Элемент.Имя, "_")));
	ГруппаКалендарей = Элементы[ИмяГруппы];
	Если ГруппаКалендарей <> Неопределено И ТипЗнч(ГруппаКалендарей) = Тип("ГруппаФормы")Тогда
		ГруппаКалендарей.Видимость = Не ГруппаКалендарей.Видимость;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВремяНовойЗадачи(Команда)
	
	Закрыть(ПараметрыВыбораВремениЗадачи());
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеПланировщикаСервер();
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	ПрочитатьДоступныеКалендари();
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря", Новый Структура("НастройкиОтображения", НастройкиОтображения), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКалендарь(Команда)
	
	ОткрытьФорму("Справочник.КалендариСотрудников.ФормаОбъекта", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	СинхронизироватьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонныйЗвонок(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + Команда.Имя));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЛичнаяВстреча(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + Команда.Имя));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Прочее(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + Команда.Имя));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНаРаботуВнутреннее(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаданиеНаРаботу.Внутреннее"));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.ЗаданиеНаРаботу.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНаРаботуВнешнее(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаданиеНаРаботу.Внешнее"));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.ЗаданиеНаРаботу.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	ПараметрыФормы = Новый Структура("СозданиеЗадачиКонтактЦентр", Истина);
	ОткрытьФорму("Документ.ЗадачаСотрудника.Форма.ФормаДокумента",ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЦветаПоказанныхКалендарей()
	
	Цвета = Новый Массив;
	
	Для Каждого Календарь Из ДоступныеКалендари Цикл
		
		ЦветКалендаря = Календарь.ЦветКалендаря;
		Если Цвета.Найти(ЦветКалендаря) = Неопределено Тогда
			Цвета.Добавить(ЦветКалендаря);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Цвета;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияЦветНажатие(НовыйЦвет, ДополнительныеПараметры) Экспорт
	
	Если НовыйЦвет = Неопределено Или НовыйЦвет = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = Число(Сред(ТекущийЭлементЦвета.Имя, СтрДлина("ЦветКалендарь_")+1));
	ТекКалендарь = ДоступныеКалендари[Индекс];
	ТекКалендарь.ЦветКалендаря = НовыйЦвет;
	
	ПоменятьЦветДекорацииЦветаКалендаря(НовыйЦвет, Индекс);
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПоменятьЦветДекорацииЦветаКалендаря(НовыйЦвет, Индекс)
	
	ДекорацияЦветаКалендаря = Элементы.Найти("ЦветКалендарь_" + Строка(Индекс));
	Если ДекорацияЦветаКалендаря <> Неопределено Тогда
		ДекорацияЦветаКалендаря.ЦветФона = НовыйЦвет;
		ДекорацияЦветаКалендаря.ЦветТекста = НовыйЦвет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеДатыОтображения(НоваяДатаОтображения = Неопределено)
	
	Если НоваяДатаОтображения <> Неопределено Тогда
		ДатаОтображения = НоваяДатаОтображения;
	КонецЕсли;
	ДатаНовойЗадачи = ДатаОтображения;
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	
	Элементы.ДатаОтображения.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	ХранилищеСистемныхНастроек.Сохранить("ОтображениеЗавершенных", "ОтображениеЗавершенных_Календарь",ОтборЗавершенные);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, ВРаботе);
	Если ХранилищеСистемныхНастроек.Загрузить("ОтображениеЗавершенных", "ОтображениеЗавершенных_Календарь") = Неопределено Тогда
		ОтборЗавершенные = Истина;
	Иначе
		ОтборЗавершенные = ХранилищеСистемныхНастроек.Загрузить("ОтображениеЗавершенных", "ОтображениеЗавершенных_Календарь");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНаВесьДень()
	
	ЦветаПоказанныхКалендарей = ЦветаПоказанныхКалендарей();
	
	Для каждого Цвет Из ЦветаПоказанныхКалендарей Цикл
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(
			НовоеУсловноеОформление.Отбор,
			"ЗадачиНаВесьДеньКалендарь.ЦветКалендаря",
			Цвет,
			ВидСравненияКомпоновкиДанных.Равно);
		
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗадачиНаВесьДеньКалендарьПредставление.Имя);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗадачиНаВесьДеньКалендарьДатаСтрокой.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", Цвет);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИмяФормыЗадачиПоТипу(Задача)
	
	ИмяФормыЗадачи = "";
	Если ТипЗнч(Задача) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		ИмяФормыЗадачи = "Документ.ЗадачаСотрудника.Форма.ФормаДокумента";
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.Событие") Тогда
		ИмяФормыЗадачи = "Документ.Событие.Форма.ФормаСобытия";
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ЗаданиеНаРаботу") Тогда
		ИмяФормыЗадачи = "Документ.ЗаданиеНаРаботу.Форма.ФормаДокумента";
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ИмяФормыЗадачи = "Документ.ЗаказПокупателя.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		ИмяФормыЗадачи = "Документ.ЗаказНаПроизводство.ФормаОбъекта";
	КонецЕсли;
	
	Возврат ИмяФормыЗадачи;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоЗавершенным()
	ВРаботе.Параметры.УстановитьЗначениеПараметра("ОтборПоЗавершенным", НЕ ОтборЗавершенные);
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика()
	
	Если Не ЗначениеЗаполнено(Элементы.Планировщик.ВыделенныеЭлементы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеЭлемента = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Если Не ЗначениеЗаполнено(ЗначениеЭлемента.ЗаписьКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента.Источник)
		И ТипЗнч(ЗначениеЭлемента.Источник) = Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности")
		И ЗначениеЭлемента.Календарь = ПредопределенноеЗначение("Справочник.КалендариСотрудников.КалендарьНалогов") Тогда
		
		ДанныеФормыЗадачи = ПолучитьДанныеФормыЗадачи(ЗначениеЭлемента.Источник);
		Если Не ПустаяСтрока(ДанныеФормыЗадачи.ИмяФормы) Тогда
			ОткрытьФорму(ДанныеФормыЗадачи.ИмяФормы, ДанныеФормыЗадачи.ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеЭлемента.Источник) И ТипЗнч(ЗначениеЭлемента.ЗаписьКалендаря) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		
		ПоказатьЗначение(,ЗначениеЭлемента.Источник);
		
	ИначеЕсли ТипЗнч(ЗначениеЭлемента.ЗаписьКалендаря) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		ПоказатьЗначение(,ЗначениеЭлемента.ЗаписьКалендаря);
	ИначеЕсли Не ЗначениеЗаполнено(ЗначениеЭлемента.Источник) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗначениеЭлемента.ЗаписьКалендаря);
		ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФормыЗадачи(ЗаписьКалендаряНалоговойОтчетности)
	
	Результат = Новый Структура("ИмяФормы, ПараметрыФормы", "", Новый Структура);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьКалендаряНалоговойОтчетности, "Состояние,Организация,СобытиеКалендаря");
	
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.СобытиеКалендаря) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПараметрыФормы.Вставить("Состояние", ЗначенияРеквизитов.Состояние);
	Результат.ПараметрыФормы.Вставить("Организация", ЗначенияРеквизитов.Организация);
	Результат.ПараметрыФормы.Вставить("СобытиеКалендаря", ЗначенияРеквизитов.СобытиеКалендаря);
	
	Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.СобытиеКалендаря, "Задача");
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИмяФормы = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьИмяФормыПоЗадачеИСостоянию(Задача, Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ФормаВсеКалендари.Видимость = Пользователи.ЭтоПолноправныйПользователь();
	Элементы.ФормаСписокЗаписейКалендаря.Видимость = Элементы.ФормаВсеКалендари.Видимость;
	
	Элементы.ГруппаВыборВремени.Видимость = ЭтоВыборВремениЗадачи;
	Элементы.ГруппаДобавлениеЗадач.Видимость = НЕ ЭтоВыборВремениЗадачи;
	
	НастроитьГруппуНастроитьУчетныеЗаписи();
	
КонецПроцедуры

&наСервере
Процедура НастроитьГруппуНастроитьУчетныеЗаписи()
	
	Если ПравоДоступа("Редактирование", Метаданные.Справочники.УчетныеЗаписиВнешнихКалендарей)
		И ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.НастройкиСинхронизацииСВнешнимиКалендарями) Тогда
		
		Если Не СинхронизацияСGoogle()
		И Справочники.УчетныеЗаписиВнешнихКалендарей.УчетныеЗаписиПользователя(АвторизованныйПользователь).Количество() = 0 Тогда
			Элементы.ГруппаСинхронизировать.Видимость = Истина;
			Элементы.ГруппаСинхронизация.Видимость = Ложь;
			Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаНастроитьУчетныеЗаписи;
		Иначе
			Элементы.ГруппаСинхронизировать.Видимость = Ложь;
			Элементы.ГруппаСинхронизация.Видимость = Истина;
		КонецЕсли;
		Элементы.НастроитьСинхронизацию.Видимость = Истина;
		
	Иначе
		Элементы.ГруппаСинхронизировать.Видимость = Ложь;
		Элементы.ГруппаСинхронизация.Видимость = Ложь;
		Элементы.НастроитьСинхронизацию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ВариантПериода = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		Элементы.ВариантПериода.СписокВыбора[0].Значение);
	
	НастройкиОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"Отображение",
		Неопределено);
	
	Если НастройкиОтображения = Неопределено Тогда
		
		НастройкиОтображения = Новый Структура;
		НастройкиОтображения.Вставить("НачалоРабочегоДня",		0);
		НастройкиОтображения.Вставить("ОкончаниеРабочегоДня",	23);
		НастройкиОтображения.Вставить("ОтображатьТекущуюДату",	Истина);
		
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИОбновитьДанныеПланировщикаСервер()
	
	СохранитьНастройки();
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		ВариантПериода);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"Отображение",
		НастройкиОтображения);
	
	СохранитьНастройкиДоступныхКалендарей();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДоступныхКалендарей()
	
	НастройкиДоступныхКалендарей = РеквизитФормыВЗначение("ДоступныеКалендари");
	НастройкиДоступныхКалендарей.Колонки.Удалить("Наименование");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		НастройкиДоступныхКалендарей);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеНовойЗадачиДляПланировщика()
	
	ОписаниеНовойЗадачиДляПланировщика = Новый ТаблицаЗначений;
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("ЗаписьКалендаря", Новый ОписаниеТипов("ДокументСсылка.ЗадачаСотрудника"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Конец", Новый ОписаниеТипов("Дата"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Источник", Новый ОписаниеТипов("ДокументСсылка.ЗадачаСотрудника"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("НомерСтрокиИсточника", Новый ОписаниеТипов("Число"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Календарь", Новый ОписаниеТипов("СправочникСсылка.КалендариСотрудников"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("РедактированиеЗапрещено", Новый ОписаниеТипов("Булево"));
	
	Если ЭтоВыборВремениЗадачи
		И ЗначениеЗаполнено(ВремяНачалаНовойЗадачи)
		И ЗначениеЗаполнено(ВремяОкончанияНовойЗадачи) Тогда
		НоваяСтрока = ОписаниеНовойЗадачиДляПланировщика.Добавить();
		НоваяСтрока.ЗаписьКалендаря = Документы.ЗадачаСотрудника.ПустаяСсылка();
		НоваяСтрока.Наименование = НоваяЗадача.Описание;
		НоваяСтрока.Начало = ДатаНовойЗадачи + (ВремяНачалаНовойЗадачи - НачалоДня(ВремяНачалаНовойЗадачи));
		НоваяСтрока.Дата = ДатаНовойЗадачи;
		НоваяСтрока.Конец = ДатаНовойЗадачи + (ВремяОкончанияНовойЗадачи - НачалоДня(ВремяОкончанияНовойЗадачи));
		НоваяСтрока.Описание = НоваяЗадача.Описание;
		НоваяСтрока.Источник = Неопределено;
		НоваяСтрока.НомерСтрокиИсточника = 0;
		НоваяСтрока.Календарь = НоваяЗадача.Календарь;
		НоваяСтрока.РедактированиеЗапрещено = Ложь;
	КонецЕсли;
	
	Возврат ОписаниеНовойЗадачиДляПланировщика;
	
КонецФункции

&НаСервере
Функция ОписаниеНовойЗадачиДляСпискаВесьДень()
	
	ОписаниеНовойЗадачиДляПланировщика = Новый ТаблицаЗначений;
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗадачаСотрудника"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Источник", Новый ОписаниеТипов("ДокументСсылка.ЗадачаСотрудника"));
	ОписаниеНовойЗадачиДляПланировщика.Колонки.Добавить("Календарь", Новый ОписаниеТипов("СправочникСсылка.КалендариСотрудников"));
	
	Если ЭтоВыборВремениЗадачи
		И НЕ ЗначениеЗаполнено(ВремяОкончанияНовойЗадачи) Тогда
		НоваяСтрока = ОписаниеНовойЗадачиДляПланировщика.Добавить();
		НоваяСтрока.Ссылка = Документы.ЗадачаСотрудника.ПустаяСсылка();
		НоваяСтрока.Наименование = НоваяЗадача.Описание;
		НоваяСтрока.Начало = ДатаНовойЗадачи + (ВремяНачалаНовойЗадачи - НачалоДня(ВремяНачалаНовойЗадачи));
		НоваяСтрока.Дата = ДатаНовойЗадачи;
		НоваяСтрока.Окончание = ДатаНовойЗадачи + (ВремяОкончанияНовойЗадачи - НачалоДня(ВремяОкончанияНовойЗадачи));
		НоваяСтрока.Описание = НоваяЗадача.Описание;
		НоваяСтрока.Источник = Неопределено;
		НоваяСтрока.Календарь = НоваяЗадача.Календарь;
	КонецЕсли;
	
	Возврат ОписаниеНовойЗадачиДляПланировщика;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПланировщикаСервер()
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	
	УстановитьОтображениеПланировщика();
	
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
	
	ВыбранныеКалендари = Новый Массив;
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		Если СтрокаКалендаря.Выбран Тогда
			ВыбранныеКалендари.Добавить(СтрокаКалендаря.Календарь);
		КонецЕсли;
	КонецЦикла;
	
	ТекстПоЗаказуНаПроизводство = "";
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаПроизводство, Пользователи.АвторизованныйПользователь()) Тогда
		ТекстПоЗаказуНаПроизводство = 
		"ВЫБРАТЬ
		|	ЗаказНаПроизводство.Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаписиКалендаря.Источник КАК Источник
		|ПОМЕСТИТЬ втИсточники
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаря
		|ГДЕ
		|	ЗаписиКалендаря.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиКалендаря.Начало < &ДатаОкончания
		|	И ЗаписиКалендаря.Окончание > &ДатаНачала
		|	И ЗаписиКалендаря.Календарь В(&ВыбранныеКалендари)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Событие.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втРазрешенныеИсточники
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаданиеНаРаботу.Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
		|ГДЕ
		|	ЗаданиеНаРаботу.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка
		|ИЗ
		|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
		|ГДЕ
		|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|"
		+ ТекстПоЗаказуНаПроизводство+
		" ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаря,
		|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
		|	ЗаписиКалендаряСотрудника.Начало КАК Начало,
		|	ЗаписиКалендаряСотрудника.Начало КАК Дата,
		|	ЗаписиКалендаряСотрудника.Окончание КАК Конец,
		|	ЗаписиКалендаряСотрудника.Описание КАК Описание,
		|	ЗаписиКалендаряСотрудника.Источник КАК Источник,
		|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
		|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
		|	ЗаписиКалендаряСотрудника.РедактированиеЗапрещено КАК РедактированиеЗапрещено
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Источник В
		|			(ВЫБРАТЬ
		|				втРазрешенныеИсточники.Ссылка
		|			ИЗ
		|				втРазрешенныеИсточники)
		|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиКалендаряСотрудника.Начало < &ДатаОкончания
		|	И ЗаписиКалендаряСотрудника.Окончание > &ДатаНачала
		|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари) 
		|	И &ФильтрПоТегам "
		+СтрокаФильтровКалендарь("ОтветственныйИсточника","Завершено", Ложь)+
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	ВЫРАЗИТЬ(Задачи.Описание КАК Строка(1000)),
		|	Задачи.ДатаНачала,
		|	Задачи.Дата,
		|	Задачи.ДатаОкончания,
		|	Задачи.Описание,
		|	Задачи.Основание,
		|	0,
		|	Задачи.Календарь,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ЗадачаСотрудника КАК Задачи
		|ГДЕ
		|	Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ДатаНачала < &ДатаОкончания
		|	И Задачи.ДатаОкончания > &ДатаНачала
		|	И Задачи.Календарь В (&ВыбранныеКалендари) "
		+ СтрокаФильтровКалендарь("Ответственный","Выполнена", Истина) +
		" УПОРЯДОЧИТЬ ПО
		|	Начало";
	
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДанных.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДанных.ДатаОкончания);
	Запрос.УстановитьПараметр("ВыбранныеКалендари", ВыбранныеКалендари);
	Запрос.УстановитьПараметр("ФильтрПоТегам", Истина);
	УстановитьПараметрыФильтров(Запрос);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДобавитьЗаписьНаКалендарь(Выборка);
	КонецЦикла;
	
	Для каждого ОписаниеНовойЗадачи Из ОписаниеНовойЗадачиДляПланировщика() Цикл
		ДобавитьЗаписьНаКалендарь(ОписаниеНовойЗадачи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьНаКалендарь(ОписаниеЗаписиКалендаря)
	
	ЭлементПланировщика = Планировщик.Элементы.Добавить(ОписаниеЗаписиКалендаря.Начало, ОписаниеЗаписиКалендаря.Конец);
	ЭлементПланировщика.Значение = Новый Структура;
	ЭлементПланировщика.Значение.Вставить("Календарь", ОписаниеЗаписиКалендаря.Календарь);
	ЭлементПланировщика.Значение.Вставить("ЗаписьКалендаря", ОписаниеЗаписиКалендаря.ЗаписьКалендаря);
	ЭлементПланировщика.Значение.Вставить("Источник", ОписаниеЗаписиКалендаря.Источник);
	ЭлементПланировщика.Значение.Вставить("РедактированиеЗапрещено", ОписаниеЗаписиКалендаря.РедактированиеЗапрещено);
	ЭлементПланировщика.Значение.Вставить("НомерСтрокиИсточника", ОписаниеЗаписиКалендаря.НомерСтрокиИсточника);
	ЭлементПланировщика.Текст = ОписаниеЗаписиКалендаря.Наименование;
	ЭлементПланировщика.Подсказка = ОписаниеЗаписиКалендаря.Описание;
	
	Если ЗначениеЗаполнено(ОписаниеЗаписиКалендаря.Источник) И ТипЗнч(ОписаниеЗаписиКалендаря.ЗаписьКалендаря) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОписаниеЗаписиКалендаря.Источник);
		ЭлементПланировщика.Картинка = МенеджерИсточника.КартинкаЗаписиКалендаря(ОписаниеЗаписиКалендаря.Источник);
		ЭлементПланировщика.ЦветТекста = МенеджерИсточника.ЦветТекстаЗаписиКалендаря(ОписаниеЗаписиКалендаря.Источник);
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеЗаписиКалендаря.ЗаписьКалендаря) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		ЭлементПланировщика.Картинка = БиблиотекаКартинок.ЗадачаСотрудникаПлоская;
	КонецЕсли;

	НайденныеСтроки = ДоступныеКалендари.НайтиСтроки(Новый Структура("Календарь", ОписаниеЗаписиКалендаря.Календарь));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЭлементПланировщика.ЦветФона = НайденныеСтроки[0].ЦветКалендаря;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПланировщика()
	
	Если ВариантПериода = "День" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMMM'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПериодДанных(ВариантПериода, ДатаОтображения)
	
	Результат = Новый Структура("ДатаНачала, ДатаОкончания");
	
	Если ВариантПериода = "День" Тогда
		Результат.ДатаНачала	= НачалоДня(ДатаОтображения);
		Результат.ДатаОкончания	= КонецДня(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		Результат.ДатаНачала	= НачалоНедели(ДатаОтображения);
		Результат.ДатаОкончания	= КонецНедели(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		Результат.ДатаНачала	= НачалоНедели(НачалоМесяца(ДатаОтображения));
		Результат.ДатаОкончания	= КонецНедели(КонецМесяца(ДатаОтображения));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы)
	
	Возврат Справочники.ЗаписиКалендаряСотрудника.СохранитьИзмененияЗаписейКалендарей(ОбрабатываемыеЭлементы);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьДатыОтображения(Форма)
	
	ПолеКалендаря = Форма.Элементы.ДатаОтображения;
	
	ПолеКалендаря.ВыделенныеДаты.Очистить();
	
	Если Форма.ВариантПериода = "Месяц" Тогда
		// Для варианта "Месяц" выделенные даты календаря отличаются от фактического периода.
		// Фактический период должен быть кратен 7 дням (недели).
		// Но в поле календаря выделяются даты только в пределах месяца.
		ПериодДанных = Новый Структура("ДатаНачала, ДатаОкончания");
		ПериодДанных.ДатаНачала		= НачалоМесяца(Форма.ДатаОтображения);
		ПериодДанных.ДатаОкончания	= КонецМесяца(Форма.ДатаОтображения);
	Иначе
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
	КонецЕсли;
	
	ТекДата = ПериодДанных.ДатаНачала;
	
	Пока ТекДата < ПериодДанных.ДатаОкончания Цикл
		ПолеКалендаря.ВыделенныеДаты.Добавить(ТекДата);
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПланировщикаИЗадачиНаВесьДеньОтложенно()
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаИЗадачиНаВесьДеньКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПланировщикаИЗадачиНаВесьДеньКлиент()
	
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДоступныхКалендарей()
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ГруппаЭлементов Из Элементы.ДоступныеКалендари.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ГруппаЭлементов);
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

	ТекущийКалендарь = Неопределено;
	ГруппаМоиКалендари = Элементы.Добавить("ГруппаМоиКалендари", Тип("ГруппаФормы"), Элементы.ДоступныеКалендари);
	ГруппаМоиКалендари.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаМоиКалендари.Заголовок = НСтр("ru = 'Мои календари'");
	ГруппаМоиКалендари.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаМоиКалендари.ОтображатьЗаголовок = Истина;
	ДекорацияМоиКалендари = Элементы.Добавить("ЗаголовокМоиКалендари", Тип("ДекорацияФормы"), ГруппаМоиКалендари);
	ДекорацияМоиКалендари.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияМоиКалендари.Шрифт = ШрифтыСтиля.ШрифтПодписиТабличногоПоляЭПД;
	
	ГруппаВнешнегоКалендаряСписок = ГруппаМоиКалендари;
	ОтображатьЗаголовок = Истина;
	
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		
		Индекс = ДоступныеКалендари.Индекс(СтрокаКалендаря);
		Если ЗначениеЗаполнено(СтрокаКалендаря.ВнешнийКалендарь) И ТекущийКалендарь <> СтрокаКалендаря.ВнешнийКалендарь Тогда
			
			ГруппаВнешнегоКалендаря = Элементы.Добавить("ГруппаВнешнийКалендарь" + Индекс, Тип("ГруппаФормы"), ГруппаМоиКалендари);
			ГруппаВнешнегоКалендаря.Вид = ВидГруппыФормы.ОбычнаяГруппа; 
			ГруппаВнешнегоКалендаря.ОтображатьЗаголовок = Ложь;
			ГруппаВнешнегоКалендаря.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
			ГруппаВнешнегоКалендаряЗаголовок = Элементы.Добавить("ГруппаВнешнийКалендарьЗаголовок_" + Индекс, Тип("ГруппаФормы"), ГруппаВнешнегоКалендаря);
			ГруппаВнешнегоКалендаряЗаголовок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаВнешнегоКалендаряЗаголовок.ОтображатьЗаголовок = Ложь;
			ГруппаВнешнегоКалендаряЗаголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаВнешнегоКалендаряЗаголовок.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
			ГруппаВнешнегоКалендаряЗаголовок.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			
			ДекорацияЛоготип = Элементы.Добавить("ВнешнийКалендарьЛоготип_" + Индекс, Тип("ДекорацияФормы"), ГруппаВнешнегоКалендаряЗаголовок);
			ДекорацияЛоготип.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияЛоготип.РазмерКартинки = РазмерКартинки.АвтоРазмер;
			Если ДоступныеКалендари[Индекс].Провайдер = Перечисления.ТипыСинхронизацииКалендарей.Google Тогда
				ДекорацияЛоготип.Картинка = БиблиотекаКартинок.GoogleКалендарь14;
			ИначеЕсли ДоступныеКалендари[Индекс].Провайдер = Перечисления.ТипыСинхронизацииКалендарей.Яндекс Тогда
				ДекорацияЛоготип.Картинка = БиблиотекаКартинок.ЯндексКалендарь15;
			ИначеЕсли ДоступныеКалендари[Индекс].Провайдер = Перечисления.ТипыСинхронизацииКалендарей.mailru Тогда
				ДекорацияЛоготип.Картинка = БиблиотекаКартинок.MailRuКалендарь14;
			ИначеЕсли ДоступныеКалендари[Индекс].Провайдер = Перечисления.ТипыСинхронизацииКалендарей.iCloud Тогда
				ДекорацияЛоготип.Картинка = БиблиотекаКартинок.iCloudКалендарь15;
			КонецЕсли;
			
			ДекорацияАккаунт = Элементы.Добавить("ВнешнийКалендарьЗаголовок_" + Индекс, Тип("ДекорацияФормы"), ГруппаВнешнегоКалендаряЗаголовок);
			ДекорацияАккаунт.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияАккаунт.Заголовок = СтрокаКалендаря.ВнешнийКалендарь;
			ДекорацияАккаунт.Гиперссылка = Истина;
			ДекорацияАккаунт.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
			Если Не ДоступныеКалендари[Индекс].Провайдер = Перечисления.ТипыСинхронизацииКалендарей.Google И Не ДоступныеКалендари[Индекс].УчетнаяЗаписьСтатус
				ИЛИ (ДоступныеКалендари[Индекс].Провайдер = Перечисления.ТипыСинхронизацииКалендарей.Google И Не СинхронизацияСGoogle())
				Тогда
				ДекорацияАккаунт.ЦветТекста = ЦветаСтиля.ДосьеРамкаСтрокиЦвет;
				ТекстСинхронизацияВыключена = СтрШаблон(НСтр("ru = 'Синхронизация для %1 выключена.'"), СтрокаКалендаря.ВнешнийКалендарь);
				ТекстПодсказки = НСтр("ru = 'Для включения перейдите в персональные настройки ""Обмен с календарями""'");
				ДекорацияАккаунт.Подсказка = СтрШаблон(НСтр("ru = '%1%2%3'"), ТекстСинхронизацияВыключена, Символы.ПС, ТекстПодсказки);
			Иначе
				ДекорацияАккаунт.ЦветТекста = ЦветаСтиля.ЦветАкцента;
			КонецЕсли;
			ДекорацияАккаунт.УстановитьДействие("Нажатие", "Подключаемый_ОбновитьВидГруппыВнешнегоКалендаря");
			
			ГруппаВнешнегоКалендаряСписок = Элементы.Добавить("ГруппаВнешнийКалендарьСписок_" + Индекс, Тип("ГруппаФормы"), ГруппаВнешнегоКалендаря);
			ГруппаВнешнегоКалендаряСписок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаВнешнегоКалендаряСписок.ОтображатьЗаголовок = Ложь;
			ГруппаВнешнегоКалендаряСписок.Заголовок = ?(ЗначениеЗаполнено(СтрокаКалендаря.ВнешнийКалендарь), СтрокаКалендаря.ВнешнийКалендарь, СтрокаКалендаря.Логин);
			ГруппаВнешнегоКалендаряСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаВнешнегоКалендаряСписок.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
			ГруппаВнешнегоКалендаряСписок.ОтображатьОтступСлева = Ложь;
			ГруппаВнешнегоКалендаряСписок.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
			ГруппаВнешнегоКалендаряСписок.Скрыть();
			ГруппаВнешнегоКалендаряСписок.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			
			ОтображатьЗаголовок = Истина;
			ТекущийКалендарь = СтрокаКалендаря.ВнешнийКалендарь;
		КонецЕсли;
		
		ГруппаКалендаря = Элементы.Добавить("ГруппаКалендарь_" + Индекс, Тип("ГруппаФормы"), ГруппаВнешнегоКалендаряСписок);
		ГруппаКалендаря.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКалендаря.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКалендаря.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаКалендаря.ОтображатьЗаголовок = Ложь;
		
		ФлагВыбран = Элементы.Добавить("ВыбранКалендарь_" + Индекс, Тип("ПолеФормы"), ГруппаКалендаря);
		ФлагВыбран.Вид = ВидПоляФормы.ПолеФлажка;
		ФлагВыбран.ПутьКДанным = "ДоступныеКалендари[" + Индекс + "].Выбран";
		ФлагВыбран.Заголовок = СтрокаКалендаря.Наименование;
		ФлагВыбран.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ФлагВыбран.УстановитьДействие("ПриИзменении", "Подключаемый_ВыбранКалендарьПриИзменении");
		
		ДекорацияОтступ = Элементы.Добавить("ОтступКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		
		КартинкаЦвета = Элементы.Добавить("ЦветКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		КартинкаЦвета.Вид = ВидДекорацииФормы.Надпись;
		КартинкаЦвета.ЦветФона = СтрокаКалендаря.ЦветКалендаря;
		КартинкаЦвета.ЦветТекста = СтрокаКалендаря.ЦветКалендаря;
		КартинкаЦвета.Гиперссылка = Истина;
		КартинкаЦвета.Заголовок = " ";
		КартинкаЦвета.Ширина = 2;
		КартинкаЦвета.Высота = 1;
		КартинкаЦвета.УстановитьДействие("Нажатие", "Подключаемый_ЦветКалендарьНажатие");
		ОтображатьЗаголовок = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКалендаряСервер()
	
	ПрочитатьДоступныеКалендари();
	ОбновитьДанныеПланировщикаСервер();
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДоступныеКалендари()
	
	НастроитьГруппуНастроитьУчетныеЗаписи();
	ДоступныеКалендари.Очистить();
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		Новый ТаблицаЗначений);
	
	// Раньше сохранение происходило в качестве номера картинки в поле ВариантЦвета
	// Теперь можно использовать любые цвета, которые сохраняются в обычное поле типа "Цвет" - ЦветКалендаря
	СохраненВариантЦвета = (НастройкиДоступныхКалендарей.Колонки.Найти("ВариантЦвета") <> Неопределено);
	Если СохраненВариантЦвета Тогда
		
		Если НастройкиДоступныхКалендарей.Колонки.Найти("ЦветКалендаря") = Неопределено Тогда
			НастройкиДоступныхКалендарей.Колонки.Добавить("ЦветКалендаря");
		КонецЕсли;
		
		ЦветаПоНомеруКартинки = ОбменСGoogle.ЦветаПоНомеруКартинки();
		
		Для Каждого НастройкаКалендаря Из НастройкиДоступныхКалендарей Цикл
			НастройкаКалендаря.ЦветКалендаря = ЦветаПоНомеруКартинки.Получить(НастройкаКалендаря.ВариантЦвета);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаКалендарей = Справочники.КалендариСотрудников.ДоступныеСотрудникуКалендари();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКалендарей.Календарь КАК Календарь,
	|	ТаблицаКалендарей.Наименование КАК Наименование,
	|	ТаблицаКалендарей.ЯвляетсяВладельцем КАК ЯвляетсяВладельцем,
	|	ТаблицаКалендарей.Недействителен КАК Недействителен,
	|	ТаблицаКалендарей.КоличествоСотрудников КАК КоличествоСотрудников
	|	ПОМЕСТИТЬ ТаблицаКалендарей
	|ИЗ
	|	&ТаблицаКалендарей КАК ТаблицаКалендарей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКалендарей.Календарь КАК Календарь,
	|	ТаблицаКалендарей.Наименование КАК Наименование,
	|	ТаблицаКалендарей.Календарь.id КАК id,
	|	ТаблицаКалендарей.ЯвляетсяВладельцем КАК ЯвляетсяВладельцем,
	|	ВЫБОР
	|		КОГДА ТаблицаКалендарей.Календарь.id = """" И НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря.Пользователь = &Пользователь ТОГДА
	|			НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря.Наименование
	|		КОГДА НЕ ТаблицаКалендарей.Календарь.id = """" ТОГДА ""Google""
	|	КОНЕЦ КАК ВнешнийКалендарь,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьDAVНаименование КАК КалендарьDAVНаименование,
	|	НастройкиСинхронизацииСВнешнимиКалендарями.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря.ПометкаУдаления ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК УчетнаяЗаписьСтатус,
	|		ВЫБОР
	|			КОГДА НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря ЕСТЬ NULL ТОГДА
	|				ЛОЖЬ
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ КАК НаличиеУчетнойЗаписи,
	|	ВЫБОР
	|		КОГДА ТаблицаКалендарей.Календарь.id = """" И НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря.Пользователь = &Пользователь ТОГДА
	|			НастройкиСинхронизацииСВнешнимиКалендарями.УчетнаяЗаписьВнешнегоКалендаря.Провайдер
	|		КОГДА НЕ ТаблицаКалендарей.Календарь.id = """" ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСинхронизацииКалендарей.Google)
	|	КОНЕЦ КАК Провайдер
	|ИЗ
	|	ТаблицаКалендарей
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСинхронизацииСВнешнимиКалендарями КАК НастройкиСинхронизацииСВнешнимиКалендарями
	|	ПО ТаблицаКалендарей.Календарь = НастройкиСинхронизацииСВнешнимиКалендарями.КалендарьСотрудника
	|УПОРЯДОЧИТЬ ПО
	|		НаличиеУчетнойЗаписи, ВнешнийКалендарь, КалендарьDAVНаименование");
	Запрос.УстановитьПараметр("ТаблицаКалендарей", ТаблицаКалендарей);
	Запрос.УстановитьПараметр("Пользователь", АвторизованныйПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаКалендарей = РезультатЗапроса.Выгрузить();
	
	ЧислоДляГенерацииСлучайного = 0;
	ЕстьНовыеПрисвоенныеЦвета = Ложь;
	Для Каждого СтрокаТаблицы Из ТаблицаКалендарей Цикл
		
		НоваяСтрока = ДоступныеКалендари.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Календарь,Наименование,ВнешнийКалендарь,Провайдер,Статус,УчетнаяЗаписьСтатус");
		
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(СтрокаТаблицы.Календарь);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "ЦветКалендаря,Выбран");
			
		Иначе
			
			НоваяСтрока.ЦветКалендаря = РаботаСЦветомСервер.СлучайныйСветлыйЦвет(ЧислоДляГенерацииСлучайного);
			ЧислоДляГенерацииСлучайного = ЧислоДляГенерацииСлучайного + 100;
			ЕстьНовыеПрисвоенныеЦвета = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Выбран", Истина);
	Если ДоступныеКалендари.НайтиСтроки(Отбор).Количество() = 0 Тогда
		
		Отбор.Удалить("Выбран");
		Отбор.Вставить("Календарь");
		Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
			Отбор.Календарь = СтрокаКалендаря.Календарь;
			СтрокаКалендаря.Выбран = ТаблицаКалендарей.НайтиСтроки(Отбор)[0].ЯвляетсяВладельцем;
		КонецЦикла;
		
	КонецЕсли;
	
	// Если были старые настройки через ВариантЦвета, то сохраняем новые (СохраненВариантЦвета)
	Если СохраненВариантЦвета Или ЕстьНовыеПрисвоенныеЦвета Тогда
		СохранитьНастройкиДоступныхКалендарей();
	КонецЕсли;
	
	ОбновитьЭлементыДоступныхКалендарей();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПериода(Форма)
	
	Если Форма.ВариантПериода = "День" Тогда
		
		ФорматДаты = НСтр("ru = 'ДФ=''дддд, д МММ'''");
		Форма.ПредставлениеПериода = Формат(Форма.ДатаОтображения, ФорматДаты);
		
	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда
		
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
		ФорматДатыНачала = НСтр("ru = 'ДФ=''д МММ'''");
		ФорматДатыОкончания = НСтр("ru = 'ДФ=''д МММ гггг'''");
		Форма.ПредставлениеПериода = СтрШаблон("%1 - %2",
			Формат(ПериодДанных.ДатаНачала, ФорматДатыНачала),
			Формат(ПериодДанных.ДатаОкончания, ФорматДатыОкончания));
		
	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда
		
		Форма.ПредставлениеПериода = ПредставлениеПериода(НачалоМесяца(Форма.ДатаОтображения), КонецМесяца(Форма.ДатаОтображения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборТипаСоздаваемойЗадачи(Начало, Конец)
	
	ВыбранныеКалендари = ДоступныеКалендари.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Начало", Начало);
	ЗначенияЗаполнения.Вставить("Окончание", Конец);
	Если ВыбранныеКалендари.Количество() = 1 Тогда
		ЗначенияЗаполнения.Вставить("Календарь", ВыбранныеКалендари[0].Календарь);
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборТипаДелаЗавершение",ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Обработка.КонтактЦентр.Форма.СозданиеИзКалендаря", ПараметрыФормы,,,,,ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗадачуСервер(Текст)
	
	Попытка
		Задача = Документы.ЗадачаСотрудника.СоздатьДокумент();
		Задача.Описание = Текст;
		Задача.Заполнить(Неопределено);
		Задача.Записать();
	Исключение	
		Возврат Документы.ЗадачаСотрудника.ПустаяСсылка();
	КонецПопытки;
	
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	Возврат Задача.Ссылка;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПланировщикаИЗадачиНаВесьДень()
	ОбновитьДанныеПланировщикаСервер();
	ЗаполнитьЗадачиНаВесьДеньКалендарь();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗадачиНаВесьДеньКалендарь()
	
	ЗадачиНаВесьДеньКалендарь.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиКалендаряСотрудника.Источник КАК Источник,
	|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
	|	ЗаписиКалендаряСотрудника.Начало КАК ДатаНачала,
	|	ЗаписиКалендаряСотрудника.Окончание КАК ДатаОкончания,
	|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
	|	ЗаписиКалендаряСотрудника.Описание КАК Содержание,
	|	ЗаписиКалендаряСотрудника.ОтветственныйИсточника КАК Ответственный,
	|	ЗаписиКалендаряСотрудника.Завершено КАК Состояние
	|ПОМЕСТИТЬ ВТ_Источники
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	|ГДЕ
	|	ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
	|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари)
	|	И ЗаписиКалендаряСотрудника.Источник <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Источники.Источник КАК Ссылка,
	|	"""" КАК СостояниеИсточника,
	|	ВТ_Источники.Состояние КАК Состояние,
	|	0 КАК Картинка,
	|	ВТ_Источники.Содержание КАК Содержание,
	|	"""" КАК Основание,
	|	ВТ_Источники.Ответственный КАК Ответственный,
	|	ВТ_Источники.Наименование КАК Наименование,
	|	ВТ_Источники.ДатаНачала КАК Начало,
	|	ВТ_Источники.ДатаНачала КАК ДатаСоздания,
	|	ВТ_Источники.ДатаОкончания КАК Окончание,
	|	ВТ_Источники.Календарь КАК Календарь,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК Отступ,
	|	0 КАК КартинкаКалендаря,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК ДатаОбъединенная,
	|	Задачи.Теги.(
	|		"""" КАК Тег
	|	) КАК Теги
	|ИЗ
	|	ВТ_Источники КАК ВТ_Источники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗадачаСотрудника КАК Задачи
	|		ПО (Задачи.Ссылка = ВТ_Источники.Источник)
	|ГДЕ
	|	(НЕ ВТ_Источники.Состояние
	|			И &ОтборПоЗавершенным
	|		ИЛИ ИСТИНА
	|			И НЕ &ОтборПоЗавершенным)
	|	И ВТ_Источники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ВТ_Источники.ДатаНачала <= &ДатаОкончания
	|	И ВТ_Источники.ДатаНачала >= &ДатаНачала 
	|	ИЛИ (&ФильтрПросрочено И ВТ_Источники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|	И ВТ_Источники.ДатаОкончания < &ТекущаяДатаСеанса)"
	+ СтрокаФильтровКалендарь("ВТ_Источники.Ответственный","Состояние", Ложь)+
	"ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задачи.Ссылка,
	|	ВЫБОР
	|		КОГДА Задачи.Выполнена
	|			ТОГДА ""Выполнена""
	|		ИНАЧЕ ""Завершена""
	|	КОНЕЦ,
	|	Задачи.Выполнена,
	|	6,
	|	"""",
	|	Задачи.Основание,
	|	Задачи.Ответственный,
	|	ВЫРАЗИТЬ(Задачи.Описание КАК СТРОКА(1000)),
	|	Задачи.ДатаНачала,
	|	Задачи.Дата,
	|	Задачи.ДатаОкончания,
	|	Задачи.Календарь,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)),
	|	0,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)),
	|	Задачи.Теги.(
	|		Тег
	|	)
	|ИЗ
	|	Документ.ЗадачаСотрудника КАК Задачи
	|ГДЕ
	|	Задачи.ПометкаУдаления = ЛОЖЬ
	|	И Задачи.Календарь В(&ВыбранныеКалендари)
	|	И (НЕ Задачи.Выполнена
	|			И &ОтборПоЗавершенным
	|		ИЛИ ИСТИНА
	|			И НЕ &ОтборПоЗавершенным)
	|	И (Задачи.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Задачи.ДатаНачала <= &ДатаОкончания
	|	И Задачи.ДатаНачала >= &ДатаНачала 
	|	ИЛИ (&ФильтрБезСрока И Задачи.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|	И Задачи.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)))
	|	ИЛИ (&ФильтрПросрочено И Задачи.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|	И Задачи.ДатаОкончания < &ТекущаяДатаСеанса)" 
	+СтрокаФильтровКалендарь("Ответственный","Выполнена", Истина)+
	" УПОРЯДОЧИТЬ ПО
	|	Начало, ДатаСоздания УБЫВ";
	
	ВыбранныеКалендари = Новый Массив;
	Для Каждого Календарь Из ДоступныеКалендари Цикл
		Если НЕ Календарь.Выбран Тогда 
			Продолжить;
		КонецЕсли;
		ВыбранныеКалендари.Добавить(Календарь.Календарь);
	КонецЦикла;

	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВыбранныеКалендари", ВыбранныеКалендари);
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДанных.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДанных.ДатаОкончания);
	Запрос.УстановитьПараметр("ФильтрБезСрока", ФильтрБезСрока);
	Запрос.УстановитьПараметр("ФильтрПросрочено", ФильтрПросрочено);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ОтборПоЗавершенным", НЕ ОтборЗавершенные);
	УстановитьПараметрыФильтров(Запрос);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДобавитьЗаписьВСписокВесьДень(Выборка);
	КонецЦикла;
	
	Для каждого ОписаниеЗаписи Из ОписаниеНовойЗадачиДляСпискаВесьДень() Цикл
		ДобавитьЗаписьВСписокВесьДень(ОписаниеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВСписокВесьДень(ОписаниеЗаписи)
	
	НоваяСтрока = ЗадачиНаВесьДеньКалендарь.Добавить();
	НоваяСтрока.Задача = ОписаниеЗаписи.Ссылка;
	
	Если ЗначениеЗаполнено(ОписаниеЗаписи.Окончание) И ОписаниеЗаписи.Окончание < ТекущаяДатаСеанса() Тогда
		НоваяСтрока.Просрочено = 1;
	КонецЕсли;
	Если ВариантПериода = "День" ИЛИ НЕ ЗначениеЗаполнено(ОписаниеЗаписи.Начало) Тогда
		Если ЗначениеЗаполнено(ОписаниеЗаписи.Окончание) Тогда
			НоваяСтрока.ДатаСтрокой = Формат(ОписаниеЗаписи.Начало, "ДФ='ddd, d MMMM'");
		КонецЕсли;
		НоваяСтрока.Представление = ОписаниеЗаписи.Наименование;
	ИначеЕсли (ВариантПериода = "Неделя" ИЛИ ВариантПериода = "Месяц") И ЗначениеЗаполнено(ОписаниеЗаписи.Начало) Тогда
		НоваяСтрока.ДатаСтрокой = Формат(ОписаниеЗаписи.Начало, "ДФ='ddd, d MMMM'");
		НоваяСтрока.Представление = ОписаниеЗаписи.Наименование;
	КонецЕсли;
	НайденныеСтроки = ДоступныеКалендари.НайтиСтроки(Новый Структура("Календарь", ОписаниеЗаписи.Календарь));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НоваяСтрока.ЦветКалендаря = НайденныеСтроки[0].ЦветКалендаря;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийЭлементСписка(ПараметрыНовойЗадачи)
	
	Если ТипЗнч(ПараметрыНовойЗадачи) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы[ПараметрыНовойЗадачи.Список].Обновить();
	ТекущийЭлемент = Элементы[ПараметрыНовойЗадачи.Список];
	Элементы[ПараметрыНовойЗадачи.Список].ТекущаяСтрока = ПараметрыНовойЗадачи.НоваяЗадача;
	
КонецПроцедуры

&НаСервере
Функция СтрокаФильтровКалендарь(ИмяПоляОтветственный, ИмяПоляЗавершено, ЕстьПолеТег)
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ЭлементОтбора Из ВРаботе.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Период" Тогда
			Продолжить;
		КонецЕсли;
		Если (ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений"))
			И ЭлементОтбора.ПравоеЗначение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Теги.Тег" И ЕстьПолеТег Тогда
			МассивСтрок.Добавить(" И Теги.Тег В (&Теги) ");
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "Ответственный" Тогда
			МассивСтрок.Добавить(СтрШаблон(" И %1 В (&Ответственный) ", ИмяПоляОтветственный));
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборЗавершенные Тогда
		МассивСтрок.Добавить(" И ИСТИНА ");
	Иначе
		МассивСтрок.Добавить(СтрШаблон(" И НЕ %1 ", ИмяПоляЗавершено));
	КонецЕсли;
	
	СтрокаФильтров = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Возврат СтрокаФильтров;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыФильтров(Запрос)
	
	Для Каждого ЭлементОтбора Из ВРаботе.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Период" Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Массив") И ЭлементОтбора.ПравоеЗначение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Теги.Тег" Тогда
			Запрос.УстановитьПараметр("ФильтрПоТегам", ЭлементОтбора.ПравоеЗначение.Количество()=0);
			Запрос.УстановитьПараметр("Теги",ЭлементОтбора.ПравоеЗначение);
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "Ответственный" Тогда
			Запрос.УстановитьПараметр("Ответственный",ЭлементОтбора.ПравоеЗначение);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли;
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения,
		,,,"ФильтрыНастройкиИДопИнфо","ОтборТеги,ОтборОтветственный,ОтборЗавершенные");
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ВРаботе, ИмяПоляОтбораСписка,,Истина);
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	УстановитьЗаголовокГруппыОтборов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокГруппыОтборов()
	Если ПроверитьОтборУстановлен(ЭтотОбъект, "ГруппаФильтры", "ДанныеМеток") Тогда
		Элементы.ГруппаФильтрыНастройкиИДопИнфо.Заголовок = НСтр("ru = 'Фильтры (установлены)'");
	Иначе
		Элементы.ГруппаФильтрыНастройкиИДопИнфо.Заголовок = НСтр("ru = 'Фильтры'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьОтборУстановлен(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток)
	
	РеквизитыОтбораПравойПанели = "ОтборТеги,ОтборОтветственный";
	ОтборУстановлен = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтборПериод") 
		И ЗначениеЗаполнено(Форма.ОтборПериод) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	// ... реквизит "ДанныеМеток".
	Попытка
		Если Форма[ИмяТЧДанныеМеток].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Если РеквизитыОтбораПравойПанели <> "" Тогда
		СтруктураРеквизитыОтбора = ОбщегоНазначенияПереопределяемый.СтрокаВСтруктуру(РеквизитыОтбораПравойПанели, ",");
		
		Для Каждого КлючЗначение Из СтруктураРеквизитыОтбора Цикл
			Если ЗначениеЗаполнено(Форма[КлючЗначение.Ключ]) Тогда
				Если ТипЗнч(Форма[КлючЗначение.Ключ]) = Тип("Булево") Тогда
					ОтборУстановлен = Форма[КлючЗначение.Ключ];
				Иначе
					Возврат Истина;
				КонецЕсли;
				
				Если ОтборУстановлен Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОтборУстановлен;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, ВРаботе, МеткаИД,,,,"ФильтрыНастройкиИДопИнфо","ОтборТеги,ОтборОтветственный,ОтборЗавершенные");
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	УстановитьЗаголовокГруппыОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаДелаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(Результат.ЗначенияЗаполнения.ДанныеЗаписиКалендаря.ИмяФормы, Результат);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаЗадачиНаВесьДень.Видимость = Ложь;
	Элементы.ПанельНастроек.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаНастроитьУчетныеЗаписи.Видимость = Ложь;
	Элементы.ГруппаПрогрессСинхронизации.Видимость = Ложь;
	Элементы.ПредставлениеПериода.АвтоМаксимальнаяШирина = Истина;
	Элементы.ГруппаФильтрыНастройкиИДопИнфо.Поведение=ПоведениеОбычнойГруппы.Обычное;
	
	Элементы.Переместить(Элементы.ФормаСегодня,Элементы.ГруппаВариантПериода);
	Элементы.Переместить(Элементы.ФильтрыНастройкиИДопИнфо,Элементы.ГруппаКалендарь);
	Элементы.Переместить(Элементы.ДатаОтображения,Элементы.ФильтрыНастройкиИДопИнфо,Элементы.ГруппаКалендарь);
	
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтотОбъект,"ФильтрыНастройкиИДопИнфо","ОтборТеги,ОтборОтветственный,ОтборЗавершенные",,,Истина);
	
КонецПроцедуры

#Область ВыборВремениНовойЗадачи

&НаСервере
Процедура УстановитьНастройкиВыбораВремениНовойЗадачи()
	
	Если НЕ Параметры.Свойство("ВыборВремениЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВыборВремениЗадачи = Истина;
	
	Если Параметры.ВыборВремениЗадачи.Свойство("ТекстНовойЗадачи") Тогда
		ТекстНовойЗадачи = СтрШаблон(НСтр("ru='%1 <новая задача>'"), Параметры.ВыборВремениЗадачи.ТекстНовойЗадачи);
	Иначе
		ТекстНовойЗадачи = НСтр("ru='<новая задача>'");
	КонецЕсли;
	
	НоваяЗадача.Описание = ТекстНовойЗадачи;
	Параметры.ВыборВремениЗадачи.Свойство("ДатаНачала", НоваяЗадача.ДатаНачала);
	Параметры.ВыборВремениЗадачи.Свойство("ДатаОкончания", НоваяЗадача.ДатаОкончания);
	Параметры.ВыборВремениЗадачи.Свойство("Календарь", НоваяЗадача.Календарь);
	
	Если Не ЗначениеЗаполнено(НоваяЗадача.ДатаНачала) Тогда
		НоваяЗадача.ДатаНачала = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьДатыНачалаОкончанияНовойЗадачиНаФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатыНачалаОкончанияНовойЗадачиНаФорме(Форма)
	
	Форма.ДатаНовойЗадачи = Форма.НоваяЗадача.ДатаНачала;
	Форма.ВремяНачалаНовойЗадачи = Форма.НоваяЗадача.ДатаНачала;
	Форма.ВремяОкончанияНовойЗадачи = Форма.НоваяЗадача.ДатаОкончания;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатыНачалаОкончанияНовойЗадачиВОбъекте(Форма)
	
	Форма.НоваяЗадача.ДатаНачала = Форма.ДатаНовойЗадачи;
	Форма.НоваяЗадача.ДатаОкончания = Форма.ДатаНовойЗадачи;
	
	Если ЗначениеЗаполнено(Форма.ВремяНачалаНовойЗадачи) Тогда
		Форма.НоваяЗадача.ДатаНачала = Форма.НоваяЗадача.ДатаНачала
			+ (Форма.ВремяНачалаНовойЗадачи - НачалоДня(Форма.ВремяНачалаНовойЗадачи));
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ВремяОкончанияНовойЗадачи) Тогда
		Форма.НоваяЗадача.ДатаОкончания = Форма.НоваяЗадача.ДатаОкончания
			+ (Форма.ВремяОкончанияНовойЗадачи - НачалоДня(Форма.ВремяОкончанияНовойЗадачи));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СместитьВремяНачалаНовойЗадачиАвтоматическиПриИзменении()
	
	Если Не ЗначениеЗаполнено(ВремяОкончанияНовойЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяНачалаНовойЗадачи) Тогда
		ВремяНачалаНовойЗадачи = ВремяОкончанияНовойЗадачи - 1800;
		Возврат;
	КонецЕсли;
	
	Если ВремяОкончанияНовойЗадачи <= ВремяНачалаНовойЗадачи Тогда
		ВремяНачалаНовойЗадачи = ВремяОкончанияНовойЗадачи - (НоваяЗадача.ДатаОкончания - НоваяЗадача.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СместитьВремяОкончанияНовойЗадачиАвтоматическиПриИзменении()
	
	Если Не ЗначениеЗаполнено(ВремяНачалаНовойЗадачи) Тогда
		ВремяОкончанияНовойЗадачи = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяОкончанияНовойЗадачи) Тогда
		ВремяОкончанияНовойЗадачи = ВремяНачалаНовойЗадачи + 1800;
		Возврат;
	КонецЕсли;
	
	Если ВремяНачалаНовойЗадачи >= ВремяОкончанияНовойЗадачи Тогда
		ВремяОкончанияНовойЗадачи = ВремяНачалаНовойЗадачи + (НоваяЗадача.ДатаОкончания - НоваяЗадача.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораВремениЗадачи()
	
	Результат = Новый Структура;
	Результат.Вставить("Календарь", НоваяЗадача.Календарь);
	Результат.Вставить("ДатаНачала", НоваяЗадача.ДатаНачала);
	Результат.Вставить("ДатаОкончания", НоваяЗадача.ДатаОкончания);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВремяНовойЗадачи(Начало, Конец)
	
	ВремяНачалаНовойЗадачи = Начало;
	ВремяОкончанияНовойЗадачи = Конец;
	
	ЗаполнитьДатыНачалаОкончанияНовойЗадачиВОбъекте(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура СинхронизироватьНаКлиенте()
	
	Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаПрогрессСинхронизации;
	Элементы.ГруппаСинхронизировать.Видимость = Истина;
	ПодключитьОбработчикОжидания("ПродолжитьСинхронизироватьНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСинхронизироватьНаКлиенте()
	
	Задание = ЗаданиеСинхронизироватьНаСервере();
	
	Если Задание = Неопределено Тогда
		Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаНастроитьУчетныеЗаписи;
		Возврат;
	КонецЕсли;
	
	Если НастроенаСинхронизацияСGoogle
		И ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		НачатьАвторизацию();
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеСинхронизации", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАвторизацию()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаТокена", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ОписанияОбластейДоступа", ОбменСGoogleКлиентСервер.ОписанияОбластейДоступаКалендарь());
	ОткрытьФорму("РегистрСведений.СеансовыеДанныеGoogle.Форма.ЗапросТокена", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	СеансовыеДанные = Результат;
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаНастроитьУчетныеЗаписи;
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеСинхронизации(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСинхронизировать.Видимость = Ложь;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряСотрудника"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.КалендариСотрудников"));
		ОбработатьЗаписьКалендаряСервер();
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеСинхронизироватьНаСервере()
	
	// Здесь у функции есть побочный эффект - инициализация сеансовых данных.
	// Так сделано для экономии серверного вызова.
	СеансовыеДанные = Неопределено;
	СинхронизацияСGoogle = СинхронизацияСGoogle();
	Если СинхронизацияСGoogle Тогда
		ОбменСGoogle.ИнициализироватьУзелПланаОбменаДляКалендаряGoogle();
		ОбменСGoogle.ИнициализироватьСеансовыеДанные(СеансовыеДанные, АвторизованныйПользователь,
			Перечисления.ОбластиДоступаGoogle.Календарь);
	КонецЕсли;
	
	Если Не СинхронизацияСGoogle
		И Справочники.УчетныеЗаписиВнешнихКалендарей.УчетныеЗаписиПользователя(АвторизованныйПользователь).Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("ОбменСВнешнимиКалендарями.СинхронизироватьВсеКалендари",
		СеансовыеДанные, ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СинхронизацияСGoogle()
	
	ИдентификацияПриложенияGoogle = Константы.ИдентификацияПриложенияGoogle.Получить() <> "";
	ОтключенныеОбластиДоступа = РегистрыСведений.СеансовыеДанныеGoogle.ОтключенныеОбластиДоступа(
		Пользователи.АвторизованныйПользователь());
		
	СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		АвторизованныйПользователь, Перечисления.ОбластиДоступаGoogle.Календарь);
	ЗаполненТокенДоступа = Не ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные);
	
	СинхронизацияКалендаряGoogle = ОтключенныеОбластиДоступа.Найти(
		Перечисления.ОбластиДоступаGoogle.Календарь) = Неопределено;
	
	НастроенаСинхронизацияСGoogle = ИдентификацияПриложенияGoogle И СинхронизацияКалендаряGoogle И ЗаполненТокенДоступа;
	
	Возврат НастроенаСинхронизацияСGoogle;
	
КонецФункции

&НаКлиенте
Процедура НастроитьСинхронизацию(Команда)
	ОткрытьФорму("Справочник.УчетныеЗаписиВнешнихКалендарей.Форма.ОбменСКалендарями");
КонецПроцедуры

#КонецОбласти

#Область ОбменСВнешнимиКалендарями

&НаКлиенте
Процедура СинхронизироватьСВнешнимиКалендарями(Команда)
	
	Если Элементы.ГруппаСинхронизировать.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуСинхронизации(Элемент)
	Индекс = Число(СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя,"КнопкаВнешнийКалендарь",""));
	ОчиститьСообщения();
	
	Если Индекс > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДанныеПодключения", ДоступныеКалендари[Индекс].УчетнаяЗаписьВнешнегоКалендаря);
		ОткрытьФорму("Справочник.УчетныеЗаписиВнешнихКалендарей.Форма.ДобавитьНовоеПодключение", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти