#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийКонтрагент; // Для проверки в событии "ПриАктивизацииСтроки", что текущая строка была изменена

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиСписка()
	
	ТекущаяСтрока = Элементы.СписокБанковскиеВыписки.ТекущиеДанные;
	
	РасчетыРаботаСФормамиКлиент.ОбновлениеИтоговПриАктивизацииСтрокиСписка(ЭтаФорма, ТекущаяСтрока, "БанкИКасса");
	
КонецПроцедуры // ОбработатьАктивизациюСтрокиСписка()

&НаСервере
Процедура НастройкаСортировкиИГруппировкиВДинамическихСписках()
	
	// Рекомендуется ограничивать сортировку и группировку по "сложным" полям, которые получены
	// с помощью оператора ВЫБОР и могут содержать значения различных типов.
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ВидОперации");
	МассивПолей.Добавить("Аналитика");
	
	СписокБанковскиеВыписки.УстановитьОграниченияИспользованияВГруппировке(МассивПолей);
	СписокБанковскиеВыписки.УстановитьОграниченияИспользованияВПорядке(МассивПолей);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкаСортировкиИГруппировкиВДинамическихСписках();
	
	СписокОрганизаций = ДвижениеДенежныхСредствСервер.ПолучитьСписокВыбораОрганизаций();
	
	РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям = ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям");
	ВестиУчетРасчетовСБанкомЭквайрером = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером");
	
	// Отборы
	// Банк и касса
	ПрочитатьРасчетныеСчетаИКассы();
	// Конец Отборы
	
	// Итоги
	РасчетыРаботаСФормамиВызовСервера.НастроитьПанельИтоговПриСозданииНаСервере(ЭтаФорма, "БанкИКасса");
	// Конец Итоги
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.ПоступлениеНаСчет);
	Элементы.ЗагрузитьИзФайла.Видимость = МожноРедактировать;
	Элементы.ФормаВыгрузитьВКлиентБанк.Видимость = МожноРедактировать;
	
	// Установим видимость закладки в зависимости от функциональной опции.
	Элементы.СтраницаОперацииПоПлатежнымКартам.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКартами");
	
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(СписокПлатежныхПоручений);
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(СписокБанковскиеВыписки);
	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(СписокОперацииПоПлатежнымКартам);
	
	//УНФ.ОтборыСписка
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект,,"ПредопределенныеОтборыПоУмолчаниюБанковскиеВыписки");
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект, "ГруппаОтборыПлатежныхПоручений", "ПредопределенныеОтборыПоУмолчаниюПлатежныхПоручений");
	РаботаСОтборами.ОпределитьПорядокПредопределенныхОтборов(ЭтотОбъект, "ГруппаОтборыОперацииПоПлатежнымКартам", "ПредопределенныеОтборыПоУмолчаниюОперацииПоПлатежнымКартам");
	
	// установим пустые значения параметров запроса списка
	СписокКассИСчетов = Новый Массив;
	СписокБанковскиеВыписки.Параметры.УстановитьЗначениеПараметра("БезОтбора", Истина);
	СписокБанковскиеВыписки.Параметры.УстановитьЗначениеПараметра("СписокКассИСчетов", СписокКассИСчетов);
	
	СтруктураИменЭлементовБанковскиеВыписки = Новый Структура;
	СтруктураИменЭлементовБанковскиеВыписки.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфо");
	СтруктураИменЭлементовБанковскиеВыписки.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборы");
	СтруктураИменЭлементовБанковскиеВыписки.Вставить("ПраваяПанель", "ПраваяПанель");
	СтруктураИменЭлементовБанковскиеВыписки.Вставить("ОтборПериод", "ОтборПериодБанковскиеВыписки");
	СтруктураИменЭлементовБанковскиеВыписки.Вставить("ПредставлениеПериода", "ПредставлениеПериода");
	
	СтруктураИменЭлементовПлатежныхПоручений = Новый Структура;
	СтруктураИменЭлементовПлатежныхПоручений.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоПлатежныхПоручений");
	СтруктураИменЭлементовПлатежныхПоручений.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыПлатежныхПоручений");
	СтруктураИменЭлементовПлатежныхПоручений.Вставить("ПраваяПанель", "ПраваяПанельПлатежныхПоручений");
	СтруктураИменЭлементовПлатежныхПоручений.Вставить("ОтборПериод", "ОтборПериодПлатежныхПоручений");
	СтруктураИменЭлементовПлатежныхПоручений.Вставить("ПредставлениеПериода", "ПредставлениеПериодаПлатежныхПоручений");
	
	СтруктураИменЭлементовОперацииПоПлатежнымКартам = Новый Структура;
	СтруктураИменЭлементовОперацииПоПлатежнымКартам.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоОперацииПоПлатежнымКартам");
	СтруктураИменЭлементовОперацииПоПлатежнымКартам.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыОперацииПоПлатежнымКартам");
	СтруктураИменЭлементовОперацииПоПлатежнымКартам.Вставить("ПраваяПанель", "ПраваяПанельОперацииПоПлатежнымКартам");
	СтруктураИменЭлементовОперацииПоПлатежнымКартам.Вставить("ОтборПериод", "ОтборПериодОперацииПоПлатежнымКартам");
	СтруктураИменЭлементовОперацииПоПлатежнымКартам.Вставить("ПредставлениеПериода", "ПредставлениеПериодаОперацииПоПлатежнымКартам");
	
	Если Параметры.Свойство("ЭтоНачальнаяСтраница") Тогда
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокБанковскиеВыписки, "СписокБанковскиеВыписки", СтруктураИменЭлементовБанковскиеВыписки,,,,"ДанныеМетокБанковскиеВыписки",,"ДанныеОтборовБанковскиеВыписки");
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокПлатежныхПоручений, "СписокПлатежныхПоручений", СтруктураИменЭлементовПлатежныхПоручений,,,, "ДанныеМетокПлатежныхПоручений",,"ДанныеОтборовПлатежныхПоручений", "ГруппаОтборыПлатежныхПоручений");
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, СписокОперацииПоПлатежнымКартам, "СписокОперацииПоПлатежнымКартам", СтруктураИменЭлементовОперацииПоПлатежнымКартам,,,, "ДанныеМетокОперацииПоПлатежнымКартам",, "ДанныеОтборовОперацииПоПлатежнымКартам", "ГруппаОтборыОперацииПоПлатежнымКартам");
		
		ЭтоНачальнаяСтраница = Ложь;
	Иначе
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Ложь, СтруктураИменЭлементовБанковскиеВыписки);
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Ложь, СтруктураИменЭлементовОперацииПоПлатежнымКартам);
		РаботаСОтборами.СвернутьРазвернутьОтборыНаСервере(ЭтотОбъект, Ложь, СтруктураИменЭлементовПлатежныхПоручений);
		ПредставлениеПериода	= РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Неопределено);
		ПредставлениеПериодаПлатежныхПоручений	= РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Неопределено);
		ПредставлениеПериодаОперацииПоПлатежнымКартам   = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Неопределено);
		
		ЭтоНачальнаяСтраница = Истина;
		
		РаботаСОтборамиКлиентСервер.УстановитьОтображениеКомандыСброситьВсеОтборы(ЭтотОбъект, "ДанныеМетокБанковскиеВыписки");
		РаботаСОтборамиКлиентСервер.УстановитьОтображениеКомандыСброситьВсеОтборы(ЭтотОбъект, "ДанныеМетокПлатежныхПоручений");
		РаботаСОтборамиКлиентСервер.УстановитьОтображениеКомандыСброситьВсеОтборы(ЭтотОбъект, "ДанныеМетокОперацииПоПлатежнымКартам");
	КонецЕсли;
	
	НастроитьПанелиОтборов();
	//Конец УНФ.ОтборыСписка
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"УНФ.Обработка.БанкИКасса",
		"ФормаСписка",
		Неопределено,
		НСтр("ru='Новости: Банк и касса'"),
		Ложь,
		Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Истина),
		"ПриОткрытии");
	// Конец ИнтернетПоддержкаПользователей.Новости
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СписокПлатежныхПоручений.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).ТипЗначения;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	ИспользуютсяПереводыВПути = РегистрыСведений.ПрименениеПереводовВПути.ИспользуютсяПереводыВПути();
	Если ИспользуютсяПереводыВПути Тогда
		Элементы.ПодменюПеремещение.Видимость = Истина;
		Элементы.ПодменюПеремещениеБез57Счета.Видимость = Ложь;
	Иначе
		Элементы.ПодменюПеремещение.Видимость = Ложь;
		Элементы.ПодменюПеремещениеБез57Счета.Видимость = Истина;
	КонецЕсли;
	
	ОтборСчетИКасса = Справочники.Кассы.ПустаяСсылка();
	
	ДвижениеДенежныхСредствСервер.СформироватьСписокКомандСозданияДокументов(ЭтотОбъект, "ПодменюБанкПоступление", "ПоступлениеНаСчет", "СписокБанковскиеВыписки");
	ДвижениеДенежныхСредствСервер.СформироватьСписокКомандСозданияДокументов(ЭтотОбъект, "ПодменюКассаПоступление", "ПоступлениеВКассу", "СписокБанковскиеВыписки");
	ДвижениеДенежныхСредствСервер.СформироватьСписокКомандСозданияДокументов(ЭтотОбъект, "ПодменюБанкРасход", "РасходСоСчета", "СписокБанковскиеВыписки");
	ДвижениеДенежныхСредствСервер.СформироватьСписокКомандСозданияДокументов(ЭтотОбъект, "ПодменюКассаРасход", "РасходИзКассы", "СписокБанковскиеВыписки");
	ДвижениеДенежныхСредствСервер.СформироватьСписокКомандСозданияДокументов(ЭтотОбъект, "ПодменюСоздатьПлатежноеПоручение", "ПлатежноеПоручение", "СписокПлатежныхПоручений");
	ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций("ПлатежноеПоручение", Элементы.ОтборВидОперацииПлатежныхПоручений.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	// Флаги над списком на закладке "Поступление и расход".
	ОтборБанк			= Настройки.Получить("ОтборБанк");
	ОтборКасса			= Настройки.Получить("ОтборКасса");
	НастроитьОтборДинамическогоСпискаБанкКасса();
	
	ОтборПоступления	= Настройки.Получить("ОтборПоступления");
	НастроитьОтборДинамическогоСпискаПоВидуДвижения("СписокБанковскиеВыписки", "ЭтоПоступление", ОтборПоступления);
	
	ОтборРасход			= Настройки.Получить("ОтборРасход");
	НастроитьОтборДинамическогоСпискаПоВидуДвижения("СписокБанковскиеВыписки", "ЭтоРасход", ОтборРасход);
	
	ОтборПеремещения	= Настройки.Получить("ОтборПеремещения");
	НастроитьОтборДинамическогоСпискаПоВидуДвижения("СписокБанковскиеВыписки", "ЭтоПеремещение", ОтборПеремещения);
	
	//Итоги
	РасчетыРаботаСФормамиВызовСервера.ПередЗагрузкойНастроекИтогов(ЭтаФорма, Настройки);
	//Конец Итоги
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//Итоги
	РасчетыРаботаСФормамиВызовСервера.ПриЗагрузкеНастроекИтогов(ЭтаФорма, Настройки);
	//Конец Итоги
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ЗагрузитьИзФайлаФрагмент(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПлатежныхПоручений

&НаКлиенте
Процедура СписокПлатежныхПорученийПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура СписокБанковскиеВыпискиПриАктивизацииСтроки(Элемент)
	
	Если ВариантОтображенияИтогов = ВедомостьЗаДень Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры // БанковскиеВыпискиПриАктивизацииСтроки()

&НаКлиенте
Процедура СписокБанковскиеВыпискиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ИмяДокумента = РаботаСФормойДокументаКлиент.ИмяДокументаПоТипу(Параметр);
	Если ИмяДокумента = "ПеремещениеДС" Тогда
		ДвиженияДенежныхСредствКлиент.СоздатьДокумент(ИмяДокумента, "", ДанныеМетокБанковскиеВыписки, "СписокПлатежныхПоручений", ПолучитьПараметрыПеремещенияДС("ПеремещениеИзКассыНаСчет"));
	ИначеЕсли ИмяДокумента = "ОперацияПоПлатежнымКартам" Тогда
		ДвиженияДенежныхСредствКлиент.СоздатьДокумент(ИмяДокумента, "", ДанныеМетокБанковскиеВыписки, "СписокОперацииПоПлатежнымКартам");
	Иначе
		ДвиженияДенежныхСредствКлиент.СоздатьДокумент(ИмяДокумента, "", ДанныеМетокБанковскиеВыписки, "СписокБанковскиеВыписки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОповещениеОбИзмененииДолга" Тогда
		Если ВариантОтображенияИтогов = ВедомостьЗаДень Тогда
			Подключаемый_ОбработатьАктивизациюСтрокиСписка();
		ИначеЕсли ВариантОтображенияИтогов <> НеОтображатьИтоги Тогда // Итоги по валюте (за период) и остаток в валюте.
			НастройкаИтоговЗавершениеНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ПеремещениеДС" ИЛИ
		ИмяСобытия = "Запись_ПоступлениеВКассу" ИЛИ
		ИмяСобытия = "Запись_ПоступлениеНаСчет" ИЛИ
		ИмяСобытия = "Запись_РасходИзКассы" ИЛИ
		ИмяСобытия = "Запись_РасходСоСчета" Тогда
		Если Параметр.Свойство("Ссылка") Тогда
			Элементы.СписокБанковскиеВыписки.ТекущаяСтрока = Параметр.Ссылка;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ПлатежноеПоручение" Тогда
		Если Параметр.Свойство("Ссылка") Тогда
			Элементы.СписокПлатежныхПоручений.ТекущаяСтрока = Параметр.Ссылка;
		КонецЕсли;		
	ИначеЕсли ИмяСобытия = "Запись_ОперацияПоПлатежнымКартам" Тогда
		Если Параметр.Свойство("Ссылка") Тогда
			Элементы.СписокОперацииПоПлатежнымКартам.ТекущаяСтрока = Параметр.Ссылка;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "НастройкиИтоговИзменены" Тогда
		РасчетыРаботаСФормамиКлиент.ОбработкаОповещенияОбИзмененииНастроекИтогов(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ВедомостьПерейти(Команда)
	
	ОткрытьФорму("Отчет.ДенежныеСредства.Форма", Новый Структура("КлючВарианта, СформироватьПриОткрытии", "Ведомость", Истина));
	
КонецПроцедуры // ВедомостьПерейти()

&НаКлиенте
Процедура ВедомостьПерейтиКОтчетуПоЭквайрингу(Команда)
	
	Если ВестиУчетРасчетовСБанкомЭквайрером Тогда
		Если РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям Тогда
			ОткрытьФорму("Отчет.КонтрольОперацийЭквайринга.Форма", Новый Структура("СформироватьПриОткрытии", Истина));
		Иначе
			ОткрытьФорму("Отчет.РасчетыПоЭквайрингу.Форма", Новый Структура("КлючВарианта, СформироватьПриОткрытии", "ОсновнойБезРазнесенияПоОперациямОплаты", Истина));
		КонецЕсли;
	Иначе
		ОткрытьФорму("Отчет.ОплатаПлатежнымиКартами.Форма", Новый Структура("СформироватьПриОткрытии", Истина));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды ВыгрузитьВКлиентБанк.
//
&НаКлиенте
Процедура ВыгрузитьВКлиентБанк(Команда)
	
	ПараметрыОткрытия = Новый Структура("НачПериода, КонПериода, БанковскийСчетОрганизации", 
		ОтборПериодПлатежныхПоручений.ДатаНачала, ОтборПериодПлатежныхПоручений.ДатаОкончания, );
	ТекущиеДанные = Элементы.СписокПлатежныхПоручений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.БанковскийСчет) Тогда
		БанковскийСчетОрганизации = ТекущиеДанные.БанковскийСчет;
		ПараметрыОткрытия.Вставить("БанковскийСчетОрганизации", БанковскийСчетОрганизации);
	КонецЕсли;
	Если ТекущиеДанные <> Неопределено И ОтборПериодПлатежныхПоручений.ДатаНачала = '00010101' И ОтборПериодПлатежныхПоручений.ДатаОкончания = '00010101' Тогда
		ПараметрыОткрытия.Вставить("НачПериода", НачалоДня(ТекущиеДанные.Дата));
		ПараметрыОткрытия.Вставить("КонПериода", КонецДня(ТекущиеДанные.Дата));
	КонецЕсли;
		
	Если РасчетыРаботаСФормамиВызовСервера.ПроверитьИспользованиеКлиентБанкаБП() Тогда
		ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыОткрытия);
	Иначе
		ОткрытьФорму("Обработка.КлиентБанкУНФ.Форма.ФормаВыгрузка", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьВКлиентБанк()

&НаКлиенте
Процедура СоздатьПоШаблону(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ПоказатьВыборШаблонаДляСозданияДокументаИзСписка(
	"Документ.ПлатежноеПоручение",
	СписокПлатежныхПоручений.КомпоновщикНастроек.Настройки.Отбор.Элементы,
	Элементы.СписокПлатежныхПоручений.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоШаблонуОперациюПоПлатежнойКарте(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ПоказатьВыборШаблонаДляСозданияДокументаИзСписка(
	"Документ.ОперацияПоПлатежнымКартам",
	СписокОперацииПоПлатежнымКартам.КомпоновщикНастроек.Настройки.Отбор.Элементы,
	Элементы.СписокОперацииПоПлатежнымКартам.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ЗагрузитьИзФайлаФрагмент();
	
КонецПроцедуры // ЗагрузитьИзФайла()

&НаКлиенте
Процедура ЗагрузитьИзФайлаФрагмент(ПараметрБанковскийСчет = Неопределено)
	
	Если ПараметрБанковскийСчет = Неопределено Тогда
		СтруктураПрямогоОбмена = КлиентБанкВызовСервера.ПолучитьСтруктуруПрямогоОбмена();
		Если СтруктураПрямогоОбмена.БанковскийСчет = Неопределено Тогда // Есть несколько счетов, нужно выбирать.
			Отбор = Новый Структура("ЭтоСчетОрганизации", Истина);
			ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаВыбораБезВладельца", Новый Структура("ТекущаяСтрока, Отбор", СтруктураПрямогоОбмена.БанковскийСчет, Отбор), ЭтотОбъект);
		ИначеЕсли СтруктураПрямогоОбмена.БанковскийСчет.Пустая() Тогда  // Нет ни одной настройки обмена с банками, можно сразу выбирать файл загрузки.
			УправлениеНебольшойФирмойКлиент.ЗагрузитьДанныеИзФайлаВыписки(УникальныйИдентификатор);
		Иначе // Один счет, можно сразу подставить его.
			Если РасчетыРаботаСФормамиВызовСервера.ПроверитьИспользованиеКлиентБанкаБП() Тогда
				ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", СтруктураПрямогоОбмена);
			Иначе
				ОткрытьФорму("Обработка.КлиентБанкУНФ.Форма.ФормаЗагрузка", СтруктураПрямогоОбмена);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтруктураОбмена = КлиентБанкВызовСервера.ПолучитьСтруктуруОбмена(ПараметрБанковскийСчет);
		Если НЕ СтруктураОбмена.ПрямойОбмен Тогда
			КлиентБанкКлиент.ЗагрузитьДанныеИзФайлаВыписки(УникальныйИдентификатор, СтруктураОбмена);
		Иначе
			Если РасчетыРаботаСФормамиВызовСервера.ПроверитьИспользованиеКлиентБанкаБП() Тогда
				ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", СтруктураОбмена);
			Иначе
				ОткрытьФорму("Обработка.КлиентБанкУНФ.Форма.ФормаЗагрузка", СтруктураОбмена);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработчикКомандСозданияДокумента(Команда)
	
	ДвиженияДенежныхСредствКлиент.ВыполнитьКомандуСозданияДокумента(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПлатежныхПорученийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("СозданиеФормыПлатежноеПоручение");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОткрытиеФормыПлатежноеПоручение");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ИнтернетПоддержкаПользователей.Новости
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, "ПриОткрытии");
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.Новости


// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокПлатежныхПоручений);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокПлатежныхПоручений, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокПлатежныхПоручений);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Отборы

&НаКлиенте
Процедура ОтборПоступленияПриИзменении(Элемент)
	
	НастроитьОтборДинамическогоСпискаПоВидуДвижения("СписокБанковскиеВыписки", "ЭтоПоступление", ОтборПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписанияПриИзменении(Элемент)
	
	НастроитьОтборДинамическогоСпискаПоВидуДвижения("СписокБанковскиеВыписки", "ЭтоРасход", ОтборРасход);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПеремещенияПриИзменении(Элемент)
	
	НастроитьОтборДинамическогоСпискаПоВидуДвижения("СписокБанковскиеВыписки", "ЭтоПеремещение", ОтборПеремещения);
	
КонецПроцедуры

// Процедура установки отбора в динамическом списке.
//
&НаСервере
Процедура НастроитьОтборДинамическогоСпискаПоВидуДвижения(ИмяСписка, ИмяПоля, Использование)
	
	ЧислоИзмененных = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
		ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		ИмяПоля,
		,
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		Использование,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Если ЧислоИзмененных = 0 Тогда
		
		ГруппаДеловыеОтношения = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, ИмяСписка);
		
		Если ГруппаДеловыеОтношения = Неопределено Тогда
			ГруппаДеловыеОтношения = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ЭтотОбъект[ИмяСписка].КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
				ИмяСписка,
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаДеловыеОтношения,
			ИмяПоля,
			ВидСравненияКомпоновкиДанных.Равно,
			Истина,
			,
			Использование,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанкПриИзменении(Элемент)
	
	НастроитьОтборДинамическогоСпискаБанкКасса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКассаПриИзменении(Элемент)
	
	НастроитьОтборДинамическогоСпискаБанкКасса();
	
КонецПроцедуры

// Процедура установки отбора в динамическом списке.
//
&НаСервере
Процедура НастроитьОтборДинамическогоСпискаБанкКасса()
	
	Если ОтборБанк И Не ОтборКасса Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокБанковскиеВыписки,
			"ЭтоБанк",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина);
	ИначеЕсли Не ОтборБанк И ОтборКасса Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокБанковскиеВыписки,
			"ЭтоКасса",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокБанковскиеВыписки,
			"ЭтоБанк",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокБанковскиеВыписки,
			"ЭтоКасса",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасчетныеСчетаИКассы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кассы.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Кассы.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Кассы.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(БанковскиеСчета.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО БанковскиеСчета.Владелец = Организации.Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаКасс = МассивРезультатов[0].Выбрать();
	ВыборкаСчетов = МассивРезультатов[1].Выбрать();
	
	Элементы.ОтборСчетИКасса.СписокВыбора.Очистить();
	Элементы.ОтборСчетПлатежныхПоручений.СписокВыбора.Очистить();
	
	Пока ВыборкаСчетов.Следующий() Цикл
		Элементы.ОтборСчетИКасса.СписокВыбора.Добавить(ВыборкаСчетов.Ссылка, ВыборкаСчетов.Представление,, БиблиотекаКартинок.Банк);
	КонецЦикла;
	ВыборкаСчетов.Сбросить();
	Пока ВыборкаСчетов.Следующий() Цикл
		Элементы.ОтборСчетПлатежныхПоручений.СписокВыбора.Добавить(ВыборкаСчетов.Ссылка,,, БиблиотекаКартинок.Банк);
	КонецЦикла;
	Пока ВыборкаКасс.Следующий() Цикл
		Элементы.ОтборСчетИКасса.СписокВыбора.Добавить(ВыборкаКасс.Ссылка, ВыборкаКасс.Представление,, БиблиотекаКартинок.Касса);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПанелиОтборов()
	
	ОтборПлатежныхПоручений = "ОтборВидОперацииПлатежныхПоручений,ОтборКонтрагентПлатежныхПоручений,ОтборСчетПлатежныхПоручений,ОтборВалютаПлатежныхПоручений,ОтборАвторПлатежныхПоручений,ОтборОрганизацияПлатежныхПоручений";
	ОтборОперацииПоПлатежнымКартам  = "ОтборВидОперацииОперацииПоПлатежнымКартам,ОтборБанкЭквайрерОперацииПоПлатежнымКартам,ОтборКонтрагентОперацииПоПлатежнымКартам,ОтборЭквайринговыйТерминалОперацииПоПлатежнымКартам,ОтборАвторОперацииПоПлатежнымКартам,ОтборОрганизацияОперацииПоПлатежнымКартам";
	
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтаФорма, "ПраваяПанельПлатежныхПоручений", "ДанныеМетокПлатежныхПоручений", ОтборПлатежныхПоручений, "ДекорацияРазвернутьОтборыПлатежныхПоручений,СвернутьОтборыПлатежныхПоручений",Истина);
	РаботаСОтборами.НастроитьПанельОтборовМобильныйКлиент(ЭтаФорма, "ПраваяПанельОперацииПоПлатежнымКартам", "ДанныеМетокОперацииПоПлатежнымКартам", ОтборОперацииПоПлатежнымКартам, "ДекорацияРазвернутьОтборыОперацииПоПлатежнымКартам,СвернутьОтборыОперацииПоПлатежнымКартам",Истина);
	
КонецПроцедуры
 

#Область ОтборПоПериоду

&НаКлиенте
Процедура НастройкаИнтервала(Команда)
	
	УстановитьПериодНаКлиенте("СписокБанковскиеВыписки");
	
КонецПроцедуры

// Процедура настраивает период динамического списка.
//
&НаКлиенте
Процедура УстановитьПериодНаКлиенте(ИмяСписка, ПараметрСтандартныйПериод = Неопределено)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПериодЗавершение", ЭтотОбъект, Новый Структура("ИмяСписка", ИмяСписка));
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ЭтотОбъект.Элементы[ИмяСписка].Период;
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

// Процедура настраивает период динамического списка (если требуется интерактивный выбор периода).
//
&НаКлиенте
Процедура УстановитьПериодЗавершение(Результат, Параметры) Экспорт
	
	УстановитьПериодЗавершениеНаСервере(Результат, Параметры);
	
КонецПроцедуры

// Процедура настривает период динамического списка на сервере (если требуется интерактивный выбор периода).
//
&НаСервере
Процедура УстановитьПериодЗавершениеНаСервере(Результат, Параметры)
	
	Если Результат <> Неопределено Тогда
		
		Элементы[Параметры.ИмяСписка].Период.Вариант = Результат.Вариант;
		Элементы[Параметры.ИмяСписка].Период.ДатаНачала = Результат.ДатаНачала;
		Элементы[Параметры.ИмяСписка].Период.ДатаОкончания = Результат.ДатаОкончания;
		Элементы[Параметры.ИмяСписка].Обновить();
		
		ВидПериодаЖурнала = ПолучитьПредставлениеПериода(Результат, " - ");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает представление стандартного периода.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериода(СтандартныйПериод, Разделитель = " по ")
	
	ДатаНачала = СтандартныйПериод.ДатаНачала;
	ДатаОкончания = СтандартныйПериод.ДатаОкончания;
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат "Интервал: <За все время>";
	ИначеЕсли СтандартныйПериод.Вариант <> ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Возврат "Интервал: <" + СтандартныйПериод.Вариант + ">";
	ИначеЕсли Год(ДатаНачала) = Год(ДатаОкончания) И Месяц(ДатаНачала) = Месяц(ДатаОкончания) Тогда
		Возврат "Интервал: " + Формат(ДатаНачала, "ДФ=dd")+Разделитель+Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
	ИначеЕсли Год(ДатаНачала) = Год(ДатаОкончания) Тогда
		Возврат "Интервал: " + Формат(ДатаНачала, "ДФ=dd.MM")+Разделитель+Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "Интервал: " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy")+Разделитель+Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура НастройкаИтогов(Команда)
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ВариантОтображенияИтогов", ВариантОтображенияИтогов);
	СтруктураПараметров.Вставить("ВалютаВедомости", ОтборВалютаВедомости);
	СтруктураПараметров.Вставить("ВалютаОстатков", ОтборВалютаОстатков);
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиИтоговБанкИКасса", 
		СтруктураПараметров, 
		ЭтотОбъект, 
		УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("НастройкаИтоговЗавершение", ЭтотОбъект), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИтоговЗавершение(РезультатЗавершения, ПараметрыЗавершения) Экспорт
	
	Если ТипЗнч(РезультатЗавершения) = Тип("Структура") Тогда
		
		ВариантОтображенияИтогов = РезультатЗавершения.ВариантОтображенияИтогов;
		ОтборВалютаВедомости = РезультатЗавершения.ВалютаВедомости;
		ОтборВалютаОстатков = РезультатЗавершения.ВалютаОстатков;
		
		НастройкаИтоговЗавершениеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаИтоговЗавершениеНаСервере()

	РасчетыРаботаСФормамиВызовСервера.НастройкаИтоговЗавершениеНаСервере(ЭтаФорма);

КонецПроцедуры
 

&НаКлиенте
Процедура ПерейтиКВалютам(Команда)
	
	ОткрытьФорму("Справочник.Валюты.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИтогиКонтекстноеМеню(Команда)
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуИтоговКонтекстноеМеню(ЭтаФорма, "БанкИКасса");
	
КонецПроцедуры


#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДИНАМИЧЕСКОГО СПИСКА

// Выбор значения отбора в поле отбора
&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокБанковскиеВыписки", "Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокБанковскиеВыписки", "ОрганизацияДляОтбора", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетИКассаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокБанковскиеВыписки", "СчетКассаДляОтбора", Элемент.Родитель.Имя, ВыбранноеЗначение,, "СписокКассИСчетов");
	ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокБанковскиеВыписки", "Автор", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторПлатежныхПорученийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокПлатежныхПоручений", "Автор", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторОперацииПоПлатежнымКартамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокОперацииПоПлатежнымКартам", "Автор", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПоПлатежнымКартамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокПлатежныхПоручений", "Состояние", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетИКассаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		Для каждого ЭлементСписка Из Элементы.ОтборСчетИКасса.СписокВыбора Цикл
			Позиция = Найти(НРег(ЭлементСписка.Представление), НРег(Текст));
			Если Позиция=0 Тогда
				Продолжить;
			КонецЕсли;
			МассивСоставляющих = Новый Массив;
			МассивСоставляющих.Добавить(Лев(ЭлементСписка.Представление, Позиция-1));
			МассивСоставляющих.Добавить(Новый ФорматированнаяСтрока(Сред(ЭлементСписка.Представление, Позиция, СтрДлина(Текст)), Новый Шрифт(Новый Шрифт, , , Истина), Новый Цвет(0, 150, 70)));
			МассивСоставляющих.Добавить(Сред(ЭлементСписка.Представление, Позиция+СтрДлина(Текст)));
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(МассивСоставляющих), , ЭлементСписка.Картинка);
		КонецЦикла; 
		Если ДанныеВыбора.Количество()>0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	КонецЕсли; 		
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаСервере
Процедура УстановитьМеткуИОтборСписка(СписокДляОтбора, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="", ИмяПараметраЗапроса="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	Если СписокДляОтбора = "СписокПлатежныхПоручений" Тогда
		ИмяТЧДанныеМеток = "ДанныеМетокПлатежныхПоручений";
	ИначеЕсли СписокДляОтбора = "СписокОперацииПоПлатежнымКартам" Тогда
		ИмяТЧДанныеМеток = "ДанныеМетокОперацииПоПлатежнымКартам";
	Иначе
		ИмяТЧДанныеМеток = "ДанныеМетокБанковскиеВыписки";
	КонецЕсли;
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения, СписокДляОтбора, ИмяПараметраЗапроса, ИмяТЧДанныеМеток);
	
	Если ИмяПараметраЗапроса="" Тогда
		
		РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЭтотОбъект[СписокДляОтбора], ИмяПоляОтбораСписка, СписокДляОтбора,, ИмяТЧДанныеМеток);
		
	Иначе
		
		СтруктураОтбораМеток = Новый Структура("ИмяПараметраЗапроса", ИмяПараметраЗапроса);
		НайденныеСтроки = ЭтотОбъект[ИмяТЧДанныеМеток].НайтиСтроки(СтруктураОтбораМеток);
		МассивОтбора = Новый Массив;
		Для каждого стр Из НайденныеСтроки Цикл
			МассивОтбора.Добавить(стр.Метка);
		КонецЦикла;
		ЭтотОбъект[СписокДляОтбора].Параметры.УстановитьЗначениеПараметра("БезОтбора", НайденныеСтроки.Количество()=0);
		ЭтотОбъект[СписокДляОтбора].Параметры.УстановитьЗначениеПараметра(ИмяПараметраЗапроса, МассивОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяГруппыРодителя = СокрЛП(Элемент.Родитель.Имя);
	Если СтрНачинаетсяС(ИмяГруппыРодителя, "МеткаПП_") Тогда
		ИмяРеквизитаСписка = "СписокПлатежныхПоручений";
		ИмяТЧДанныеМеток = "ДанныеМетокПлатежныхПоручений";
		ИмяТЧДанныеОтборов = "ДанныеОтборовПлатежныхПоручений";
		НачалоИмениМетки = "МеткаПП_";
	ИначеЕсли СтрНачинаетсяС(ИмяГруппыРодителя, "МеткаЭ_") Тогда
		ИмяРеквизитаСписка = "СписокОперацииПоПлатежнымКартам";
		ИмяТЧДанныеМеток = "ДанныеМетокОперацииПоПлатежнымКартам";
		НачалоИмениМетки = "МеткаЭ_";
		ИмяТЧДанныеОтборов = "ДанныеОтборовОперацииПоПлатежнымКартам";
	Иначе
		ИмяРеквизитаСписка = "СписокБанковскиеВыписки";
		ИмяТЧДанныеМеток = "ДанныеМетокБанковскиеВыписки";
		ИмяТЧДанныеОтборов = "ДанныеОтборовБанковскиеВыписки";
		НачалоИмениМетки = "МеткаБВ_";
	КонецЕсли;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина(НачалоИмениМетки)+1);
	
	УдалитьМеткуОтбора(МеткаИД, ИмяРеквизитаСписка, ИмяТЧДанныеМеток, ИмяТЧДанныеОтборов);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД, ИмяРеквизитаСписка, ИмяТЧДанныеМеток, ИмяТЧДанныеОтборов)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, ЭтотОбъект[ИмяРеквизитаСписка], МеткаИД, ИмяРеквизитаСписка, ИмяТЧДанныеМеток,,,,ИмяТЧДанныеОтборов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода, СобытиеОповещения", "ОтборПериодБанковскиеВыписки", "ПредставлениеПериода", "ОповещениеОбИзмененииДолга");
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "СписокБанковскиеВыписки", "Дата", СтруктураИменЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПлатежныхПорученийНажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода", "ОтборПериодПлатежныхПоручений", "ПредставлениеПериодаПлатежныхПоручений");
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "СписокПлатежныхПоручений", "Дата", СтруктураИменЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОперацииПоПлатежнымКартамНажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода", "ОтборПериодОперацииПоПлатежнымКартам", "ПредставлениеПериодаОперацииПоПлатежнымКартам");
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "СписокОперацииПоПлатежнымКартам", "Дата", СтруктураИменЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	Если НЕ ЭтоНачальнаяСтраница Тогда
		
		СтруктураИменЭлементовБанковскиеВыписки = Новый Структура;
		СтруктураИменЭлементовБанковскиеВыписки.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфо");
		СтруктураИменЭлементовБанковскиеВыписки.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборы");
		СтруктураИменЭлементовБанковскиеВыписки.Вставить("ПраваяПанель", "ПраваяПанель");
		СтруктураИменЭлементовБанковскиеВыписки.Вставить("ОтборПериод", "ОтборПериодБанковскиеВыписки");
		
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "СписокБанковскиеВыписки",СтруктураИменЭлементовБанковскиеВыписки,,,"ДанныеМетокБанковскиеВыписки","ДанныеОтборовБанковскиеВыписки");
		
		СтруктураИменЭлементовПлатежныхПоручений = Новый Структура;
		СтруктураИменЭлементовПлатежныхПоручений.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоПлатежныхПоручений");
		СтруктураИменЭлементовПлатежныхПоручений.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыПлатежныхПоручений");
		СтруктураИменЭлементовПлатежныхПоручений.Вставить("ПраваяПанель", "ПраваяПанельПлатежныхПоручений");
		СтруктураИменЭлементовПлатежныхПоручений.Вставить("ОтборПериод", "ОтборПериодПлатежныхПоручений");
		
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "СписокПлатежныхПоручений", СтруктураИменЭлементовПлатежныхПоручений,,, "ДанныеМетокПлатежныхПоручений", "ДанныеОтборовПлатежныхПоручений", "ГруппаОтборыПлатежныхПоручений");
		
		СтруктураИменЭлементовОперацииПоПлатежнымКартам = Новый Структура;
		СтруктураИменЭлементовОперацииПоПлатежнымКартам.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоОперацииПоПлатежнымКартам");
		СтруктураИменЭлементовОперацииПоПлатежнымКартам.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыОперацииПоПлатежнымКартам");
		СтруктураИменЭлементовОперацииПоПлатежнымКартам.Вставить("ПраваяПанель", "ПраваяПанельОперацииПоПлатежнымКартам");
		СтруктураИменЭлементовОперацииПоПлатежнымКартам.Вставить("ОтборПериод", "ОтборПериодОперацииПоПлатежнымКартам");
		
		РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, "СписокОперацииПоПлатежнымКартам", СтруктураИменЭлементовОперацииПоПлатежнымКартам,,, "ДанныеМетокОперацииПоПлатежнымКартам", "ДанныеОтборовОперацииПоПлатежнымКартам", "ГруппаОтборыОперацииПоПлатежнымКартам");
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьОтборыПлатежныхПорученийНажатие(Элемент)
	
	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоПлатежныхПоручений");
	СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыПлатежныхПоручений");
	СтруктураИменЭлементов.Вставить("ПраваяПанель", "ПраваяПанельПлатежныхПоручений");
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфоПлатежныхПоручений.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьОтборыОперацииПоПлатежнымКартамНажатие(Элемент)
	
	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоОперацииПоПлатежнымКартам");
	СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыОперацииПоПлатежнымКартам");
	СтруктураИменЭлементов.Вставить("ПраваяПанель", "ПраваяПанельОперацииПоПлатежнымКартам");
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфоОперацииПоПлатежнымКартам.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьОтборыПлатежныхПорученийНажатие(Элемент)
	
	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоПлатежныхПоручений");
	СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыПлатежныхПоручений");
	СтруктураИменЭлементов.Вставить("ПраваяПанель", "ПраваяПанельПлатежныхПоручений");
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфоПлатежныхПоручений.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьОтборыОперацииПоПлатежнымКартамНажатие(Элемент)
	
	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", "ФильтрыНастройкиИДопИнфоОперацииПоПлатежнымКартам");
	СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", "ДекорацияРазвернутьОтборыОперацииПоПлатежнымКартам");
	СтруктураИменЭлементов.Вставить("ПраваяПанель", "ПраваяПанельОперацииПоПлатежнымКартам");
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфоОперацииПоПлатежнымКартам.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ПоискМетки= ЭтаФорма.ТекущийЭлемент.Имя;
	Если СтрЗаканчиваетсяНа(ПоискМетки, "ПлатежныхПоручений") Тогда
		ИмяРеквизитаСписка = "СписокПлатежныхПоручений";
		ИмяТЧДанныеМеток = "ДанныеМетокПлатежныхПоручений";
		ИмяТЧДанныеОтборов = "ДанныеОтборовПлатежныхПоручений";
		ИмяГруппыОтборов = "ГруппаОтборыПлатежныхПоручений";
		ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчаниюПлатежныхПоручений";
	ИначеЕсли СтрЗаканчиваетсяНа(ПоискМетки, "ОперацииПоПлатежнымКартам") Тогда
		ИмяРеквизитаСписка = "СписокОперацииПоПлатежнымКартам";
		ИмяТЧДанныеМеток = "ДанныеМетокОперацииПоПлатежнымКартам";
		ИмяТЧДанныеОтборов = "ДанныеОтборовОперацииПоПлатежнымКартам";
		ИмяГруппыОтборов = "ГруппаОтборыОперацииПоПлатежнымКартам";
		ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчаниюОперацииПоПлатежнымКартам";
	Иначе
		ИмяРеквизитаСписка = "СписокБанковскиеВыписки";
		ИмяТЧДанныеМеток = "ДанныеМетокБанковскиеВыписки";
		ИмяТЧДанныеОтборов = "ДанныеОтборовБанковскиеВыписки";
		ИмяГруппыОтборов = "ГруппаОтборы";
		ИмяПредопределенныеОтборыПоУмолчанию = "ПредопределенныеОтборыПоУмолчаниюБанковскиеВыписки";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаСписка", ИмяРеквизитаСписка);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеМеток", ИмяТЧДанныеМеток);
	ДополнительныеПараметры.Вставить("ИмяТЧДанныеОтборов", ИмяТЧДанныеОтборов);
	ДополнительныеПараметры.Вставить("ИмяГруппыОтборов", ИмяГруппыОтборов);
	ДополнительныеПараметры.Вставить("ИмяПредопределенныеОтборыПоУмолчанию", ИмяПредопределенныеОтборыПоУмолчанию);
	
	РаботаСОтборамиКлиент.НастроитьОтборыНажатие(ЭтотОбъект, ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры), ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияФормыСНастройкамиОтборов(ДополнительныеПараметры)
	
	Возврат РаботаСОтборами.ПараметрыДляОткрытияФормыСНастройкамиОтборов(ЭтотОбъект, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура НастройкаОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОтборовЗавершениеНаСервере(Результат.АдресВыбранныеОтборы, Результат.АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОтборовЗавершениеНаСервере(АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ИмяРеквизитаСписка = "Список";
		ИмяТЧДанныеМеток = "ДанныеМетокБанковскиеВыписки";
		ИмяТЧДанныеОтборов = "ДанныеОтборовБанковскиеВыписки";
	Иначе
		ИмяРеквизитаСписка = ДополнительныеПараметры.ИмяРеквизитаСписка;
		ИмяТЧДанныеМеток = ДополнительныеПараметры.ИмяТЧДанныеМеток;
		ИмяТЧДанныеОтборов = ДополнительныеПараметры.ИмяТЧДанныеОтборов;
	КонецЕсли;
	
	РаботаСОтборами.НастройкаОтборовЗавершение(ЭтотОбъект, АдресВыбранныеОтборы, АдресУдаленныеОтборы, ДополнительныеПараметры);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборПриИзменении(Элемент)
	
	Подключаемый_ОтборПриИзмененииНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборПриИзмененииНаСервере(ЭлементИмя, ЭлементРодительИмя)
	
	ИмяРеквизитаСписка = Прав(ЭлементИмя, СтрДлина(ЭлементИмя)-СтрНайти(ЭлементИмя, "_", НаправлениеПоиска.СНачала));
	ИмяРеквизитаСписка = Лев(ИмяРеквизитаСписка, СтрНайти(ИмяРеквизитаСписка,"_", НаправлениеПоиска.СНачала)-1);
	
	Если ИмяРеквизитаСписка = "СписокПлатежныхПоручений" Тогда
		ИмяТЧДанныеМеток = "ДанныеМетокПлатежныхПоручений";
		ИмяТЧДанныеОтборов = "ДанныеОтборовПлатежныхПоручений";
	ИначеЕсли ИмяРеквизитаСписка = "СписокОперацииПоПлатежнымКартам" Тогда
		ИмяТЧДанныеМеток = "ДанныеМетокОперацииПоПлатежнымКартам";
		ИмяТЧДанныеОтборов = "ДанныеОтборовОперацииПоПлатежнымКартам";
	Иначе
		ИмяТЧДанныеМеток = "ДанныеМетокБанковскиеВыписки";
		ИмяТЧДанныеОтборов = "ДанныеОтборовБанковскиеВыписки";
	КонецЕсли;
	
	РаботаСОтборами.Подключаемый_ОтборПриИзменении(ЭтотОбъект, ЭлементИмя, ЭлементРодительИмя, ИмяРеквизитаСписка, ИмяТЧДанныеМеток, ИмяТЧДанныеОтборов);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОтборОчистка(Элемент)
	
	Подключаемый_ОтборОчисткаНаСервере(Элемент.Имя, Элемент.Родитель.Имя)
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОтборОчисткаНаСервере(ЭлементИмя, ЭлементРодительИмя)

	ИмяРеквизитаСписка = Прав(ЭлементИмя, СтрДлина(ЭлементИмя)-СтрНайти(ЭлементИмя, "_", НаправлениеПоиска.СНачала));
	ИмяРеквизитаСписка = Лев(ИмяРеквизитаСписка, СтрНайти(ИмяРеквизитаСписка,"_", НаправлениеПоиска.СНачала)-1);
	
	Если ИмяРеквизитаСписка = "СписокПлатежныхПоручений" Тогда
		ИмяТЧДанныеМеток = "ДанныеМетокПлатежныхПоручений";
		ИмяТЧДанныеОтборов = "ДанныеОтборовПлатежныхПоручений";
	ИначеЕсли ИмяРеквизитаСписка = "СписокОперацииПоПлатежнымКартам" Тогда
		ИмяТЧДанныеМеток = "ДанныеМетокОперацииПоПлатежнымКартам";
		ИмяТЧДанныеОтборов = "ДанныеОтборовОперацииПоПлатежнымКартам";
	Иначе
		ИмяТЧДанныеМеток = "ДанныеМетокБанковскиеВыписки";
		ИмяТЧДанныеОтборов = "ДанныеОтборовБанковскиеВыписки";
	КонецЕсли;
	
	РаботаСОтборами.Подключаемый_ОтборОчистка(ЭтотОбъект, ЭлементИмя, ИмяРеквизитаСписка, ИмяТЧДанныеМеток, ИмяТЧДанныеОтборов);

КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеОтборы(Команда)
	
	ПоискМетки= ЭтаФорма.ТекущийЭлемент.Имя;
	Если СтрЗаканчиваетсяНа(ПоискМетки, "ПлатежныхПоручений") Тогда
		ИмяРеквизитаСписка = "СписокПлатежныхПоручений";
		ИмяТЧДанныеМеток = "ДанныеМетокПлатежныхПоручений";
		ИмяТЧДанныеОтборов = "ДанныеОтборовПлатежныхПоручений";
		СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода", "ОтборПериодПлатежныхПоручений", "ПредставлениеПериодаПлатежныхПоручений");
	ИначеЕсли СтрЗаканчиваетсяНа(ПоискМетки, "ОперацииПоПлатежнымКартам") Тогда
		ИмяРеквизитаСписка = "СписокОперацииПоПлатежнымКартам";
		ИмяТЧДанныеМеток = "ДанныеМетокОперацииПоПлатежнымКартам";
		ИмяТЧДанныеОтборов = "ДанныеОтборовОперацииПоПлатежнымКартам";
		СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода", "ОтборПериодОперацииПоПлатежнымКартам", "ПредставлениеПериодаОперацииПоПлатежнымКартам");
	Иначе
		ИмяРеквизитаСписка = "СписокБанковскиеВыписки";
		ИмяТЧДанныеМеток = "ДанныеМетокБанковскиеВыписки";
		ИмяТЧДанныеОтборов = "ДанныеОтборовБанковскиеВыписки";
		СтруктураИменЭлементов = Новый Структура("ОтборПериод, ПредставлениеПериода, СобытиеОповещения", "ОтборПериодБанковскиеВыписки", "ПредставлениеПериода", "ОповещениеОбИзмененииДолга");
	КонецЕсли;
	
	РаботаСОтборамиКлиент.СброситьОтборПоПериоду(ЭтотОбъект, ИмяРеквизитаСписка, "Дата", СтруктураИменЭлементов);
	СброситьВсеМеткиОтбораНаСервере(ИмяРеквизитаСписка, ИмяТЧДанныеМеток, СтруктураИменЭлементов, ИмяТЧДанныеОтборов);

КонецПроцедуры

&НаСервере
Процедура СброситьВсеМеткиОтбораНаСервере(ИмяРеквизитаСписка, ИмяТЧДанныеМеток, СтруктураИменЭлементов, ИмяТЧДанныеОтборов)
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, ЭтаФорма[ИмяРеквизитаСписка],, ИмяРеквизитаСписка,ИмяТЧДанныеМеток,СтруктураИменЭлементов, ИмяТЧДанныеОтборов);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Дата1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.СписокБанковскиеВыписки.ТекущиеДанные <> Неопределено Тогда
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.ДатаНачала = Элементы.СписокБанковскиеВыписки.ТекущиеДанные.Дата;
		ПериодОтчета.ДатаОкончания = Элементы.СписокБанковскиеВыписки.ТекущиеДанные.Дата;
		ПараметрыОтчета = Новый Структура("СтПериод", ПериодОтчета);
	Иначе
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.ДатаНачала = '00010101';
		ПериодОтчета.ДатаОкончания = '00010101';
		ПараметрыОтчета = Новый Структура("СтПериод", ПериодОтчета);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ДенежныеСредства.Форма", Новый Структура("КлючВарианта, СформироватьПриОткрытии, Отбор", "ВедомостьВВалюте", Истина, ПараметрыОтчета));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкаИтогов(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВалюта1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкаИтогов(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаВыводаИтоговНажатие(Элемент)
	
	НастройкаИтогов(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОстатокВВалютеНажатие(Элемент)
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала = ТекущаяДата();
	ПериодОтчета.ДатаОкончания = ТекущаяДата();
	ПараметрыОтчета = Новый Структура("СтПериод, Валюта", ПериодОтчета, ОтборВалютаОстатков);
	
	ОткрытьФорму("Отчет.ДенежныеСредства.Форма", Новый Структура("КлючВарианта, СформироватьПриОткрытии, Отбор", "ОстаткиВВалюте", Истина, ПараметрыОтчета));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВедомостьПоВалютеНажатие(Элемент)
	
	ПараметрыОтчета = Новый Структура("СтПериод, Валюта", ОтборПериодБанковскиеВыписки, ОтборВалютаВедомости);
	ОткрытьФорму("Отчет.ДенежныеСредства.Форма", Новый Структура("КлючВарианта, СформироватьПриОткрытии, Отбор", "ВедомостьВВалюте", Истина, ПараметрыОтчета));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВалютаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокБанковскиеВыписки", "Валюта", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьФормуНастройкиИтоговНажатие(Элемент)
	
	НастройкаИтогов(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоШаблонуДокументДвиженияДС(Команда)
	
	ЗаполнениеОбъектовУНФКлиент.ПоказатьВыборШаблонаДляСозданияДокументаИзСписка(
	"ЖурналДокументов.ДокументыПоБанкуИКассе",
	СписокБанковскиеВыписки.КомпоновщикНастроек.Настройки.Отбор.Элементы,
	Элементы.СписокБанковскиеВыписки.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборХозОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.БанкИКасса.Форма.ФормаВыбораВидаОперации",,,,,,
		Новый ОписаниеОповещения("ОтборХозОперацияНачалоВыбораЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборХозОперацияНачалоВыбораЗавершение(РезультатЗавершения, ПараметрыЗавершения) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗавершения) Тогда
		Если ТипЗнч(РезультатЗавершения) = Тип("Строка") Тогда
			УстановитьМеткуИОтборСписка("СписокБанковскиеВыписки", "ХозяйственнаяОперация", "ГруппаОтборХозОперация",
				"Перемещение. " + РезультатЗавершения);
		Иначе
			УстановитьМеткуИОтборСписка("СписокБанковскиеВыписки", "ХозяйственнаяОперация", "ГруппаОтборХозОперация",
				РезультатЗавершения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОперацииПлатежныхПорученийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокПлатежныхПоручений", "ВидОперации", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОперацииОперацииПоПлатежнымКартамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокОперацииПоПлатежнымКартам", "ВидОперации", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПлатежныхПорученийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокПлатежныхПоручений", "Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанкЭквайрерОперацииПоПлатежнымКартамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокОперацииПоПлатежнымКартам", "Эквайрер", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОперацииПоПлатежнымКартамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокОперацииПоПлатежнымКартам", "Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСчетПлатежныхПорученийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокПлатежныхПоручений", "БанковскийСчет", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВалютаПлатежныхПорученийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокПлатежныхПоручений", "ВалютаДокумента", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПлатежныхПорученийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокПлатежныхПоручений", "Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОперацииПоПлатежнымКартамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокОперацииПоПлатежнымКартам", "Организация", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЭквайринговыйТерминалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СписокОперацииПоПлатежнымКартам", "ЭквайринговыйТерминал", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВКлиентБанкаТекущийДокумент(Команда)
	
	ТекущиеДанные = Элементы.СписокПлатежныхПоручений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо выделить документ, который хотите выгрузить в клиент-банка.'"));
		Возврат;
	КонецЕсли;
	
	СписокВыгрузки = Новый СписокЗначений;
	СписокВыгрузки.Добавить(ТекущиеДанные.Ссылка);
	ПараметрыОткрытия = Новый Структура("СписокПлатежек, БанковскийСчет", СписокВыгрузки, ТекущиеДанные.БанковскийСчет);
	ОткрытьФорму("Обработка.КлиентБанкУНФ.Форма.СохранениеПлатежек", ПараметрыОткрытия,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли;
	
КонецПроцедуры

#Область ПеремещениеДС

&НаСервереБезКонтекста
Функция ПолучитьПараметрыПеремещенияДС(ИмяКоманды)
	
	Если ИмяКоманды = "ПеремещениеИзКассыНаСчет" Тогда
		ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные;
		ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные;
	ИначеЕсли ИмяКоманды = "ПеремещениеСоСчетаВКассу" Тогда
		ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные;
		ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Наличные;
	ИначеЕсли ИмяКоманды = "ПеремещениеМеждуСчетами" Тогда
		ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные;
		ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Безналичные;
	ИначеЕсли ИмяКоманды = "ПеремещениеМеждуКассами" Тогда
		ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные;
		ТипДенежныхСредствПолучатель = Перечисления.ТипыДенежныхСредств.Наличные;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура("ТипДенежныхСредств, ТипДенежныхСредствПолучатель", 
		ТипДенежныхСредств, ТипДенежныхСредствПолучатель));
		
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура ПеремещениеИзКассыНаСчет(Команда)
	
	ДвиженияДенежныхСредствКлиент.СоздатьДокумент("РасходИзКассы", "ВзносНаличнымиВБанк", ДанныеМетокБанковскиеВыписки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеСоСчетаВКассу(Команда)
	
	ДвиженияДенежныхСредствКлиент.СоздатьДокумент("ПоступлениеВКассу", "ПолучениеНаличныхВБанке", ДанныеМетокБанковскиеВыписки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеМеждуСчетами(Команда)
	
	ДвиженияДенежныхСредствКлиент.СоздатьДокумент("РасходСоСчета", "ПереводНаДругойСчет", ДанныеМетокБанковскиеВыписки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеМеждуКассами(Команда)
	
	ДвиженияДенежныхСредствКлиент.СоздатьДокумент("ПеремещениеДС", "ПеремещениеДС", ДанныеМетокБанковскиеВыписки, "СписокБанковскиеВыписки",
		ПолучитьПараметрыПеремещенияДС(Команда.Имя));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеВзносНаличнымиБанк(Команда)
	
	ДвиженияДенежныхСредствКлиент.СоздатьДокумент("ПоступлениеНаСчет", "ВзносНаличными", ДанныеМетокБанковскиеВыписки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходСнятиеНаличныхБанк(Команда)
	
	ДвиженияДенежныхСредствКлиент.СоздатьДокумент("РасходСоСчета", "СнятиеНаличных", ДанныеМетокБанковскиеВыписки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеПереводСДругогоСчетаБанк(Команда)
	
	ДвиженияДенежныхСредствКлиент.СоздатьДокумент("ПоступлениеНаСчет", "ПереводСДругогоСчета", ДанныеМетокБанковскиеВыписки);
	
КонецПроцедуры

#КонецОбласти

#Область ОперацияПоПлатежнымКартам

&НаКлиенте
Процедура ОплатаКартойПоступлениеОплатыОтПокупателя(Команда)
	
	ДвиженияДенежныхСредствКлиент.СоздатьДокумент("ОперацияПоПлатежнымКартам", "ПоступлениеОплатыОтПокупателя",
		ДанныеМетокОперацииПоПлатежнымКартам, "СписокОперацииПоПлатежнымКартам");
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойВозвратОплатыПокупателю(Команда)
	
	ДвиженияДенежныхСредствКлиент.СоздатьДокумент("ОперацияПоПлатежнымКартам", "ВозвратОплатыПокупателю",
		ДанныеМетокОперацииПоПлатежнымКартам, "СписокОперацииПоПлатежнымКартам");
	
КонецПроцедуры

#КонецОбласти
