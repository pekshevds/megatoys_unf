#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем БылиОшибки Экспорт;
Перем Таймаут Экспорт;
Перем Приложение Экспорт;
Перем ВерсияDTO Экспорт;
Перем ВерсияAPI Экспорт;
Перем МенеджерКонвертации Экспорт;
Перем ТипОбъектаРазмерПакета Экспорт;
Перем ИменаСобытийЖР Экспорт;

Перем ВестиПротокол;
Перем СтруктураURI;
Перем АдресТокена;
Перем HTTPСоединение;
Перем АдресРесурсаAPI;
Перем ТипОбъектаАдресРесурса;
Перем ТипОбъектаАдресРесурсаЗапрос;
Перем ОписаниеКлиентскогоПриложения;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

Процедура Инициализировать(ПриложениеДляОбмена, ПодготовитьДанныеДляТехПоддержки) Экспорт
	
	БылиОшибки 	= Ложь;
	Таймаут 	= 100;
	
	Приложение 		= ПриложениеДляОбмена;
	ВестиПротокол 	= ПодготовитьДанныеДляТехПоддержки Или Константы.РегистрироватьВЖурналеСобытийЗапросы.Получить();
	ИменаСобытийЖР 	= ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	АдресТокена 	= ИнтеграцияУправлениеПерсоналом.АдресХраненияТокенаПриложения(Приложение);
	
	ОписаниеКлиентскогоПриложения = ОписаниеКлиентскогоПриложения();
	
	НастройкиПодключения = ИнтеграцияУправлениеПерсоналом.НастройкиПодключения(Приложение);
	АдресПриложения = НастройкиПодключения.АдресПриложения;
	ВерсияDTO 		= НастройкиПодключения.ВерсияDTO;
	ВерсияAPI 		= НастройкиПодключения.ВерсияAPI;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПриложения);
	
	ЗаполнитьТипОбъектаРазмерПакета();
	ОбновитьИнициализациюПриСмениВерсииAPI();
	СоздатьНовоеHTTPСоединение();
	
	МенеджерКонвертации = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерКонвертации(Приложение); 
	ИнтеграцияУправлениеПерсоналомПереопределяемый.ИнициализацияПараметровМенеджераОбмена(ЭтотОбъект);

КонецПроцедуры

Процедура СоздатьНовоеHTTPСоединение()
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	КонецЕсли;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Или ВРег(СтруктураURI.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
КонецПроцедуры

Функция ОписаниеКлиентскогоПриложения()

	СистемнаяИнформация = Новый СистемнаяИнформация; 
	ВерсияПлатформы = СтрШаблон("%1%2", "1C/", СистемнаяИнформация.ВерсияПриложения);
	
	ВариантРаботы = ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(), "File", "ClientServer");
	РежимРазделения = ?(ОбщегоНазначения.РазделениеВключено(),"; Splitted","");
	РежимРаботы = СтрШаблон("%1%2%3%4", "(", ВариантРаботы, РежимРазделения, ")");
	
	ВерсияПодсистемы = "";
	ВерсииПодсистем = ОбновлениеИнформационнойБазы.ВерсииПодсистем();
	СтрокаТЗ = ВерсииПодсистем.Найти("ЗарплатаКадрыБазовая", "ИмяПодсистемы");
	Если СтрокаТЗ <> Неопределено Тогда
		ВерсияПодсистемы = СтрокаТЗ.Версия;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПодсистемы) Тогда
		ТекущееПриложение = СтрШаблон("%1/%2 HRLib/%3", ОбщегоНазначения.ИдентификаторИнтернетПоддержкиКонфигурации(), Метаданные.Версия, ВерсияПодсистемы);
	Иначе
		ТекущееПриложение = СтрШаблон("%1/%2", ОбщегоНазначения.ИдентификаторИнтернетПоддержкиКонфигурации(), Метаданные.Версия);
	КонецЕсли;
	
	Возврат СтрШаблон("%1 %2 %3", ВерсияПлатформы, РежимРаботы, ТекущееПриложение);

КонецФункции

Процедура ОбновитьИнициализациюПриСмениВерсииAPI() Экспорт

	АдресРесурсаAPI = АдресРесурсаAPI();
	ЗаполнитьТипОбъектаАдресРесурса();
	ЗаполнитьТипОбъектаАдресРесурсаЗапрос();

КонецПроцедуры

Процедура ЗаполнитьТипОбъектаАдресРесурса()
	
	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	
	Описание = Новый Соответствие;
	Описание.Вставить(МенеджерТипОбъекта.ФизическоеЛицо, 				РесурсФизическиеЛица());
	Описание.Вставить(МенеджерТипОбъекта.Организация, 					РесурсОрганизации());
	Описание.Вставить(МенеджерТипОбъекта.Подразделение, 				РесурсПодразделения());
	Описание.Вставить(МенеджерТипОбъекта.Должность, 					РесурсДолжности());
	Описание.Вставить(МенеджерТипОбъекта.Сотрудник, 					РесурсСотрудники());
	Описание.Вставить(МенеджерТипОбъекта.ГрафикРаботы, 					РесурсГрафикиРаботы());
	Описание.Вставить(МенеджерТипОбъекта.ДолжностьПоШтатномуРасписанию, РесурсШтатноеРасписание()); 
	
	ТипОбъектаАдресРесурса = Описание;
	
КонецПроцедуры

Процедура ЗаполнитьТипОбъектаАдресРесурсаЗапрос()
	
	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом;
	
	Описание = Новый Соответствие;
	Описание.Вставить(МенеджерТипОбъекта.ФизическоеЛицо, 				РесурсЗапросФизическиеЛица());
	Описание.Вставить(МенеджерТипОбъекта.Организация, 					РесурсЗапросОрганизации());
	Описание.Вставить(МенеджерТипОбъекта.Подразделение, 				РесурсЗапросПодразделения());
	Описание.Вставить(МенеджерТипОбъекта.Должность, 					РесурсЗапросДолжности());
	Описание.Вставить(МенеджерТипОбъекта.ДолжностьПоШтатномуРасписанию, РесурсЗапросШтатноеРасписание());
	Описание.Вставить(МенеджерТипОбъекта.Сотрудник, 					РесурсЗапросСотрудники());
	Описание.Вставить(МенеджерТипОбъекта.ГрафикРаботы, 					РесурсЗапросГрафикиРаботы());
	Описание.Вставить(МенеджерТипОбъекта.ГрафикОтпусковПодразделения, 	РесурсЗапросГрафикОтпусковПодразделения());  
	Описание.Вставить(МенеджерТипОбъекта.ЗапросСправки2НДФЛ, 			РесурсЗапросСправки2НДФЛ());
	Описание.Вставить(МенеджерТипОбъекта.ЗапросСправкиСМестаРаботы, 	РесурсЗапросСправкиСРаботы());
	Описание.Вставить(МенеджерТипОбъекта.Оффер, 						РесурсЗапросОффера());
	
	ТипОбъектаАдресРесурсаЗапрос = Описание;
	
КонецПроцедуры

Процедура ЗаполнитьТипОбъектаРазмерПакета()
	
	ТипОбъектаРазмерПакета = ИнтеграцияУправлениеПерсоналомОбмен.ТипОбъектаРазмерПакета(Приложение); 

КонецПроцедуры

Процедура ОбновитьВерсиюDTO()
	
	МенеджерКонвертации.ВерсияDTO = ВерсияDTO;
	МенеджерКонвертации.ОбновитьИнициализациюПриСмениВерсииDTO();
	
КонецПроцедуры

#КонецОбласти

#Область АдресаРесурсовAPI

Функция ВсеРесурсы() Экспорт

	ВсеРесурсы = Новый Массив;
	ВсеРесурсы.Добавить(РесурсФизическиеЛица());
	ВсеРесурсы.Добавить(РесурсЗапросФизическиеЛица());
	ВсеРесурсы.Добавить(РесурсОрганизации());
	ВсеРесурсы.Добавить(РесурсЗапросОрганизации());
	ВсеРесурсы.Добавить(РесурсПодразделения());
	ВсеРесурсы.Добавить(РесурсЗапросПодразделения());
	ВсеРесурсы.Добавить(РесурсДолжности());
	ВсеРесурсы.Добавить(РесурсЗапросДолжности());
	ВсеРесурсы.Добавить(РесурсШтатноеРасписание());
	ВсеРесурсы.Добавить(РесурсЗапросШтатноеРасписание());
	ВсеРесурсы.Добавить(РесурсСотрудники());
	ВсеРесурсы.Добавить(РесурсЗапросСотрудники());
	ВсеРесурсы.Добавить(РесурсФайлы());
	ВсеРесурсы.Добавить(РесурсЗапросФайлы());
	ВсеРесурсы.Добавить(РесурсПолучениеВсехИзменений());
	ВсеРесурсы.Добавить(РесурсГрафикиРаботы());
	ВсеРесурсы.Добавить(РесурсЗапросГрафикиРаботы());
	ВсеРесурсы.Добавить(РесурсЗапросГрафикОтпусковПодразделения());
	ВсеРесурсы.Добавить(РесурсЗапросСправки2НДФЛ());
	ВсеРесурсы.Добавить(РесурсЗапросСправкиСРаботы());
	ВсеРесурсы.Добавить(РесурсЗапросОффера());
	
	ВсеРесурсы.Добавить(РесурсПинг());

	Возврат ВсеРесурсы;

КонецФункции

Функция АдресРесурсаAPI()
	
	РесурсAPI = "/api";
	
	Если Не ПустаяСтрока(ВерсияAPI) Тогда
		РесурсAPI = СтрШаблон("%1/v%2", РесурсAPI, ВерсияAPI);
	КонецЕсли;
	
	Возврат РесурсAPI;
	
КонецФункции

Функция РесурсВерсияAPI()

	Возврат "/api/apiVersions";

КонецФункции

Функция РесурсФизическиеЛица()
	
	Возврат "/persons";
	
КонецФункции

Функция РесурсЗапросФизическиеЛица()
	
	Возврат "/persons/{ID}";
	
КонецФункции

Функция РесурсФизическиеЛицаАктивные()

	Возврат "/persons/active";

КонецФункции

Функция РесурсОрганизации()
	
	Возврат "/employers";
	
КонецФункции 

Функция РесурсЗапросОрганизации()
	
	Возврат "/employers/{ID}";
	
КонецФункции

Функция РесурсПодразделения()
	
	Возврат "/divisions";
	
КонецФункции

Функция РесурсЗапросПодразделения()
	
	Возврат "/divisions/{ID}";
	
КонецФункции

Функция РесурсДолжности()
	
	Возврат "/positions";
	
КонецФункции

Функция РесурсЗапросДолжности()
	
	Возврат "/positions/{ID}";
	
КонецФункции

Функция РесурсШтатноеРасписание()
	
	Возврат "/stafflist-positions";
	
КонецФункции

Функция РесурсЗапросШтатноеРасписание()
	
	Возврат "/stafflist-positions/{ID}";
	
КонецФункции

Функция РесурсСотрудники()
	
	Возврат "/employees";
	
КонецФункции

Функция РесурсЗапросСотрудники()
	
	Возврат "/employees/{ID}";
	
КонецФункции

Функция РесурсФайлы()
	
	Возврат "/files";
	
КонецФункции

Функция РесурсЗапросФайлы()
	
	Возврат "/files/{ID}";
	
КонецФункции

Функция РесурсПолучениеВсехИзменений()
	
	Возврат "/data/updates";
	
КонецФункции

Функция РесурсГрафикиРаботы()
	
	Возврат "/work-schedules";
	
КонецФункции

Функция РесурсЗапросГрафикиРаботы()
	
	Возврат "/work-schedules/{ID}";
	
КонецФункции

Функция РесурсЗапросГрафикОтпусковПодразделения()
	
	Возврат "/vacations-schedule-draft/divisions/{ID}";
	
КонецФункции

Функция РесурсЗапросСправки2НДФЛ()
	
	Возврат "/forms-2-ndfl/requests/{ID}";
	
КонецФункции

Функция РесурсЗапросСправкиСРаботы()
	
	Возврат "/employment-certificates/requests/{ID}";
	
КонецФункции

Функция РесурсЗапросОффера()
	
	Возврат "/recruitment/offers/{ID}";
	
КонецФункции

Функция РесурсПинг()
	
	Возврат "/ping";
	
КонецФункции

#КонецОбласти

#Область Обмен

// Выполняет проверку настроек подключения к приложению.
//
// Параметры:
// 		НастройкиПодключения - Структура
// 			* АдресПриложения - Строка
// 			* Ключи - Структура
// 				* ИдентификаторКлиента
// 				* СекретКлиента
//
Функция ПроверитьНастройкиПодключения(НастройкиПодключения) Экспорт
	
	Результат = Новый Структура("КодСостояния,СообщениеОбОшибке");
	
	АдресПриложения = НастройкиПодключения.АдресПриложения;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПриложения);
	СоздатьНовоеHTTPСоединение();
	
	Ответ = НовыйТокен(НастройкиПодключения.Ключи);
	Токен = Ответ.Токен;
	Если Ответ.НеактуальныеКлючи Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Неактуальные ключи аутентификации.'");
	ИначеЕсли Не ЗначениеЗаполнено(Ответ.Токен) Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ сервера. Подробнее см в Журнале регистрации.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.СообщениеОбОшибке) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Ответ = Неопределено; 
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", ОписаниеКлиентскогоПриложения);
	Заголовки.Вставить("formatVersion", ВерсияDTO);
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПолныйАдресРесурса = СтрШаблон("/%1%2%3", СтруктураURI.ПутьНаСервере, АдресРесурсаAPI, РесурсПинг());
	Запрос = Новый HTTPЗапрос(ПолныйАдресРесурса, Заголовки);
	ИмяМетода = "GET";
	Попытка
		Ответ = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуПолученияОтвета(ИмяМетода, Запрос, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить ответ сервера. Подробнее см в Журнале регистрации.'");
	КонецПопытки;
	
	ОбъектВерсииФормата = Неопределено;
	Если Ответ = Неопределено Тогда
		Результат.КодСостояния = Неопределено;
	Иначе
		Результат.КодСостояния = Ответ.КодСостояния;
		Если Ответ.КодСостояния >= 300 Тогда
			ЗаписатьОшибкуВызова(ИмяМетода, Запрос, Ответ, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ПроверитьВерсиюФорматаОбмена() Экспорт
	
	Ответ = РезультатЗапросаВерсииФормата();
	Если Ответ.Использовать = Истина Тогда
		Если ЗначениеЗаполнено(Ответ.ОбъектВерсииФормата) Тогда
			УстановитьВерсииОбмена(Ответ.ОбъектВерсииФормата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатВыгрузкиУдаления(ОбъектыКУдалению, ТипОбъекта) Экспорт
	
	Результат = НовыйРезультатВыгрузки();
	
	АдресРесурса = ТипОбъектаАдресРесурса[ТипОбъекта];

	// Соответствие: Ключ - Ссылка, Значение - Идентификатор.
	СсылкаПубличныйИдентификатор = ИнтеграцияУправлениеПерсоналомОбмен.СсылкаПубличныйИдентификатор(ОбъектыКУдалению, ТипОбъекта);
	Для каждого Ссылка Из ОбъектыКУдалению Цикл
		Идентификатор = СсылкаПубличныйИдентификатор[Ссылка];
		Если Не ЗначениеЗаполнено(Идентификатор) Тогда
			Результат.ОтменитьРегистрацию(Ссылка);
		ИначеЕсли ВыгрузитьУдалениеОбъекта(АдресРесурса, Идентификатор) Тогда
			Результат.Выгружено.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Ссылки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ссылки, Результат.Выгружено);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ссылки, Результат.ОтменитьРегистрацию);
	
	УстановитьОтметкуНеВыгружался(Ссылки, ТипОбъекта);
	
	Возврат Результат;

КонецФункции

Функция РезультатВыгрузкиОбъектов(ДанныеОбъектов, ТипОбъекта) Экспорт
	
	Результат = НовыйРезультатВыгрузки();
	Результат.ОтменитьРегистрацию = ДанныеОбъектов.ОтменитьРегистрацию;
	
	Если Не ЗначениеЗаполнено(ДанныеОбъектов.ТаблицаДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо Тогда
		ВыгрузитьФотографии(ДанныеОбъектов.ТаблицаДанных);
	КонецЕсли;
	
	РезультатКонвертации = МенеджерКонвертации.ВыполнитьКонвертациюВОбъектыDTO(ДанныеОбъектов.ТаблицаДанных, ТипОбъекта);
	Если Не ЗначениеЗаполнено(РезультатКонвертации.Данные) Тогда
		Возврат Результат;
	КонецЕсли;
	
	АдресРесурса 	= ТипОбъектаАдресРесурса[ТипОбъекта];
	ПолеКлюча 		= МенеджерКонвертации.ТипОбъектаПолеКлюча[ТипОбъекта];
	РазмерПакета 	= ТипОбъектаРазмерПакета[ТипОбъекта];
	Если Не ЗначениеЗаполнено(РазмерПакета) Тогда
		РазмерПакета = 100;
	КонецЕсли;
	ТипОбъектаКлюча = МенеджерКонвертации.ТипОбъектаТипКлюча[ТипОбъекта];
	РегистрироватьВыгрузку = (ТипОбъекта = ТипОбъектаКлюча);
	
	РезультатВыгрузки = РезультатВыгрузкиКоллекции(АдресРесурса, РезультатКонвертации.Данные, ПолеКлюча, РазмерПакета);
	ИнтеграцияУправлениеПерсоналомОбмен.ЗаполнитьРезультатРезультатамиВыгрузки(Приложение, Результат, РезультатВыгрузки, ТипОбъектаКлюча, АдресРесурса, РегистрироватьВыгрузку);
	
	Результат.БылиОшибки = РезультатВыгрузки.БылиОшибки;
	БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
	Возврат Результат;
	
КонецФункции

Функция ПовторнаяЗагрузкаОбъектов(ТипОбъекта, Идентификаторы) Экспорт
	
	Результат = Новый Структура("БылиОшибки,ОбъектыDTO,НетОбъектов", Ложь);
	
	ШаблонАдресРесурса = ТипОбъектаАдресРесурсаЗапрос[ТипОбъекта];
	Если Не ЗначениеЗаполнено(ШаблонАдресРесурса) Тогда
		БылиОшибки = Истина;
		ШаблонОписания = НСтр("ru = 'Отсутствует ресурс загрузки объекта: %1.'");
		Комментарий = СтрШаблон(ШаблонОписания, Строка(ТипОбъекта));
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	КонецЕсли;
	
	ОбъектыDTO = Новый Массив;
	НетОбъектов = Новый Массив;
	Для каждого Идентификатор Из Идентификаторы Цикл
		
		ОбъектDTO = Неопределено;
		
		АдресРесурса = СтрЗаменить(ШаблонАдресРесурса, "{ID}", Идентификатор);
		Ответ = HTTPОтветСервера(ПараметрыЗапроса(АдресРесурса, "GET"));
		Если Ответ = Неопределено Тогда
			Результат.БылиОшибки = Истина;
		ИначеЕсли Ответ.КодСостояния = 200 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ИменаСвойствСоЗначениямиДата = МенеджерКонвертации.ИменаСвойствСоЗначениямиДата();
			ОбъектDTO = ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.ISO, "ВосстановлениеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудникаМенеджерОбмена"),, ИменаСвойствСоЗначениямиДата);	
			ОбъектыDTO.Добавить(ОбъектDTO);
		ИначеЕсли Ответ.КодСостояния = 404 Тогда
			// объект не найден
			НетОбъектов.Добавить(Идентификатор);
		Иначе
			Результат.БылиОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ОбъектыDTO 	= ОбъектыDTO;
	Результат.НетОбъектов 	= НетОбъектов;
	
	Возврат Результат;

КонецФункции

Функция ЗагрузитьИзменения(ВерсияИзменений, Лимит) Экспорт

	Результат = ИнтеграцияУправлениеПерсоналомОбмен.НовыйРезультатЗагрузкиИзменений();
	
	Версия = Формат(ВерсияИзменений + 1, "ЧН=0; ЧГ=0");
	АдресРесурса = РесурсПолучениеВсехИзменений();
	АдресРесурса = СтрШаблон("%1?version=%2&limit=%3", АдресРесурса, Версия, Лимит);

	Ответ = HTTPОтветСервера(ПараметрыЗапроса(АдресРесурса, "GET"));
	Если Ответ = Неопределено Тогда
		Результат.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ИменаСвойствСоЗначениямиДата = МенеджерКонвертации.ИменаСвойствСоЗначениямиДата();
		Результат.ОбъектВсеИзменения = ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.ISO, "ВосстановлениеJSON", ЭтотОбъект,, ИменаСвойствСоЗначениямиДата);
	ИначеЕсли Ответ.КодСостояния = 204 Тогда
		// нет изменений
	Иначе
		Результат.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция РезультатЗагрузкиФайла(ИдентификаторФайла) Экспорт
	
	Результат = Новый Структура("ОписаниеОшибки,ДвоичныеДанныеФайла");
	
	ШаблонРесурса = РесурсЗапросФайлы();
	РесурсСервиса = СтрЗаменить(ШаблонРесурса,"{ID}", ИдентификаторФайла);
	ПараметрыЗапроса = ПараметрыЗапроса(РесурсСервиса, "GET");
	ПараметрыЗапроса.ЗапросФайла = Истина;
	Ответ = HTTPОтветСервера(ПараметрыЗапроса);
	Если Ответ = Неопределено Или Не Ответ.КодСостояния = 200 Тогда
		ШаблонОписания = НСтр("ru = 'Ошибка загрузки файла %1 из приложения.'");
		Результат.ОписаниеОшибки = СтрШаблон(ШаблонОписания, ИдентификаторФайла);
	Иначе
		Результат.ДвоичныеДанныеФайла = Ответ.ПолучитьТелоКакДвоичныеДанные();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатАктивацииФизическихЛиц(Данные) Экспорт

	Данные = Новый Массив;
	АдресРесурса = РесурсФизическиеЛицаАктивные();
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ФизическоеЛицо;
	РазмерПакета = ТипОбъектаРазмерПакета[ТипОбъекта];
	Если Не ЗначениеЗаполнено(РазмерПакета) Тогда
		РазмерПакета = 100;
	КонецЕсли;
	
	РезультатВыгрузки = РезультатВыгрузкиКоллекции(АдресРесурса, Данные, РазмерПакета);
	
	БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	Возврат РезультатВыгрузки;

КонецФункции


#КонецОбласти

#Область РегистрацияВЖурналеРегистрации

Функция ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос)

	АдресСервера = СтрШаблон("%1://%2", СтруктураURI.Схема, СтруктураURI.ИмяСервера);
	ЗапросТекст = СтрШаблон("%1 %2%3%4", ИмяМетода, АдресСервера, HTTPЗапрос.АдресРесурса);
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		ИначеЕсли Не ЗначениеЗаполнено(ЗначениеЗаголовка) Тогда
			ЗначениеЗаголовка = "<null>";
		КонецЕсли;
		ЗапросТекст = СтрШаблон("%1%2%3: %4",ЗапросТекст, Символы.ПС, Заголовок.Ключ, ЗначениеЗаголовка);
	КонецЦикла;
	
	Возврат ЗапросТекст;

КонецФункции

Функция ОписаниеОтветаЗапросаДляЖР(HTTPОтвет, ЗапросФайла)

	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		Если Не ЗапросФайла Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(ТелоОтвета) Тогда
				ОтветТекст = СтрШаблон("%1%2%2%4", ОтветТекст, Символы.ПС, Символы.ПС, ТелоОтвета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветТекст;

КонецФункции

Процедура ЗаписатьСобытиеЗапросВЖурналРегистрации(ИмяМетода, HTTPЗапрос, ОтправкаФайла)

	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос);
	
	ТелоЗапроса = "";
	Если Не ОтправкаФайла Тогда
		ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
		
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ТелоЗапроса);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Запрос, УровеньЖурналаРегистрации.Информация,,,Комментарий);

КонецПроцедуры

Процедура ЗаписатьСобытиеОтветВЖурналРегистрации(ИмяМетода, HTTPЗапрос, HTTPОтвет, ЗапросФайла)

	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос);
	ОтветТекст  = ОписаниеОтветаЗапросаДляЖР(HTTPОтвет, ЗапросФайла);
	
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Ответ, УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуПолученияОтвета(ИмяМетода, HTTPЗапрос, ПодробноеПредставлениеОшибки)
	
	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос);
	ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");

	ШаблонОписания = "%1
	|%2
	|%3";
	
	Комментарий = СтрШаблон(ШаблонОписания, ЗапросТекст, ОтветТекст, ПодробноеПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВызова(ИмяМетода, HTTPЗапрос, HTTPОтвет, ЗапросФайла)
	
	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ИмяМетода, HTTPЗапрос);
	ОтветТекст  = ОписаниеОтветаЗапросаДляЖР(HTTPОтвет, ЗапросФайла);
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуЧтенияJSON(ОтветСтрока, ОписаниеОшибки)

	ШаблонОписания = НСтр(
	"ru = 'Ошибка чтения JSON:
	|Описание ошибки:
	|%1
	|Строка JSON:
	|%2'");
	
	ОтветСтрокаПустой = НСтр("ru = '<пустая строка>'");
	ОтветСтрока = ?(Не ЗначениеЗаполнено(ОтветСтрока), ОтветСтрокаПустой, ОтветСтрока);
	Комментарий = СтрШаблон(ШаблонОписания, ОписаниеОшибки, ОтветСтрока);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Процедура ЗаписатьОшибкуПреобразованияJSON(Свойство, Значение)
	
	ШаблонОписания = НСтр("ru = 'Ошибка преобразования в JSON
	|Свойство: %1
	|Значение: %2, %3'");
	
	Комментарий = СтрШаблон(ШаблонОписания, Свойство, ТипЗнч(Значение), Строка(Значение));
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры


#КонецОбласти

#Область ПолучениеТокенаАутентификации

Функция ТокенАутентификации()
	
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		АдресТокена, "Токен,СрокГодностиТокена");
	
	Если ДанныеВБезопасномХранилище.Токен <> Неопределено
		И ДанныеВБезопасномХранилище.СрокГодностиТокена <> Неопределено Тогда
		
		Если ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеВБезопасномХранилище.СрокГодностиТокена Тогда
			Возврат НовыйТокенАутентификации().Токен;
		Иначе
			Возврат ДанныеВБезопасномХранилище.Токен;
		КонецЕсли;
		
	Иначе
		Возврат НовыйТокенАутентификации().Токен;
	КонецЕсли;
	
КонецФункции

Функция НовыйТокенАутентификации()
	
	Результат = Новый Структура("Токен,НеактуальныеКлючи",,Ложь);
	
	КлючиПриложения = ИнтеграцияУправлениеПерсоналом.КлючиПриложения(Приложение);
	Если КлючиПриложения = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заданы ключи приложения.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Ответ = НовыйТокен(КлючиПриложения);
	ЗаполнитьЗначенияСвойств(Результат, Ответ);
	Если ЗначениеЗаполнено(Ответ.Токен) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресТокена,Ответ.Токен, "Токен");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресТокена,Ответ.СрокГодностиТокена, "СрокГодностиТокена");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НовыйТокен(КлючиПриложения)
	
	Результат = Новый Структура("Токен,СрокГодностиТокена,НеактуальныеКлючи",,,Ложь);
	
	СтрокаBase64 = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(СтрШаблон("%1:%2", КлючиПриложения.ИдентификаторКлиента, КлючиПриложения.СекретКлиента)));
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", ОписаниеКлиентскогоПриложения);
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", СтрШаблон("Basic %1", СтрокаBase64));
	Запрос = Новый HTTPЗапрос("/auth/oidc/token", Заголовки);
	Запрос.УстановитьТелоИзСтроки("grant_type=client_credentials");
	
	Попытка
		Ответ = HTTPСоединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписатьОшибкуПолученияОтвета("POST", Запрос, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
		Если РезультатЧтенияJSON.Свойство("id_token") Тогда
			Результат.Токен = РезультатЧтенияJSON["id_token"];
			Результат.СрокГодностиТокена = ТекущаяУниверсальнаяДатаВМиллисекундах() + 3600*100;
		Иначе
			ШаблонТекста = НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'");
			Комментарий = СтрШаблон(ШаблонТекста, Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ОтветОшибка = ОбъектОтвета["error"];
		Если ОтветОшибка <> Неопределено Тогда
			Сообщение = ОтветОшибка["message"];
			Если Сообщение <> Неопределено И СтрНайти(Сообщение, "User name or password is invalid") > 0 Тогда
				Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
				ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
				Результат.НеактуальныеКлючи = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Результат.НеактуальныеКлючи Тогда
			ШаблонТекста = НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'");
			Комментарий = СтрШаблон(ШаблонТекста, Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен,УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 401 Тогда
		
		Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен,УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		Результат.НеактуальныеКлючи = Истина;
		
	Иначе
		
		ШаблонТекста = НСтр("ru = 'Не удалось получить токен аутентификации.
			|Сервер вернул код:%1
			|%2'");
		Комментарий = СтрШаблон(ШаблонТекста, Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен,УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗапросыКСерверу

Функция ПараметрыЗапроса(АдресРесурса, ИмяМетода, СтрокаТела = "", ОписаниеФайла = Неопределено)

	ПараметрыЗапроса = Новый Структура("
	|АдресРесурса,
	|ИмяМетода,
	|СтрокаТела,
	|ОписаниеФайла,
	|РазрешенныйКодОтвета,
	|ЗапросФайла");
	
	ПараметрыЗапроса.АдресРесурса 	= АдресРесурса;
	ПараметрыЗапроса.ИмяМетода 		= ИмяМетода;
	ПараметрыЗапроса.СтрокаТела 	= СтрокаТела;
	ПараметрыЗапроса.ОписаниеФайла 	= ОписаниеФайла;
	ПараметрыЗапроса.ЗапросФайла 	= Ложь;
	
	Возврат ПараметрыЗапроса;

КонецФункции

Функция HTTPОтветСервераВерсииФормата()
	
	РесурсПриложения = РесурсВерсияAPI();
	ИмяМетода = "GET";
	
	Ответ = Неопределено; 
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", ОписаниеКлиентскогоПриложения);
	
	Токен = ТокенАутентификации();
	Если Не ЗначениеЗаполнено(Токен) Тогда
		БылиОшибки  = Истина;
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	АдресРесурса = СтрШаблон("/%1%2", СтруктураURI.ПутьНаСервере, РесурсПриложения);
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ИмяМетода, Запрос, Ложь);
	КонецЕсли;
	
	Попытка
		Ответ = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуПолученияОтвета(ИмяМетода, Запрос, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Ответ = Неопределено;
		БылиОшибки  = Истина;
	КонецПопытки;
	
	Если ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ИмяМетода, Запрос, Ответ, Ложь);
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 401 Тогда
		
		СоздатьНовоеHTTPСоединение();
		
		Токен = ТокенАутентификации();
		Если Не ЗначениеЗаполнено(Токен) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
		Если ВестиПротокол Тогда
			ЗаписатьСобытиеЗапросВЖурналРегистрации(ИмяМетода, Запрос, Ложь);
		КонецЕсли;
		Попытка
			Ответ = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
		Исключение
			ЗаписатьОшибкуПолученияОтвета(ИмяМетода, Запрос, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Ответ = Неопределено;
		КонецПопытки;
		Если ВестиПротокол Тогда
			ЗаписатьСобытиеОтветВЖурналРегистрации(ИмяМетода, Запрос, Ответ, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния >= 300 И Ответ.КодСостояния <> 404 Тогда
		ЗаписатьОшибкуВызова(ИмяМетода, Запрос, Ответ, Ложь);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция РезультатЗапросаВерсииФормата()

	Результат = Новый Структура("Использовать,ОбъектВерсииФормата", Ложь);
	Ответ = HTTPОтветСервераВерсииФормата();
	Если Ответ = Неопределено Тогда
		// не удалось получить ответ сервера
		Возврат Результат;
	Иначе
		Если Ответ.КодСостояния = 404 Тогда
			Результат.Использовать = Ложь;
		ИначеЕсли Ответ.КодСостояния = 200 Тогда
			Результат.Использовать = Истина;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			Попытка
				ОбъектDTO = ПрочитатьJSON(ЧтениеJSON, Истина);
				ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУпралениеПерсоналом.ВерсииФормата;
				Результат.ОбъектВерсииФормата = МенеджерКонвертации.ВыполнитьКонвертациюИзОбъектовDTO(ОбъектDTO, ТипОбъекта);
			Исключение
				ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция HTTPОтветСервера(ПараметрыЗапроса)
	
	АдресРесурса 			= ПараметрыЗапроса.АдресРесурса;
	ИмяМетода 				= ПараметрыЗапроса.ИмяМетода;
	СтрокаТела 				= ПараметрыЗапроса.СтрокаТела;
	ОписаниеФайла 			= ПараметрыЗапроса.ОписаниеФайла;
	РазрешенныйКодОтвета 	= ПараметрыЗапроса.РазрешенныйКодОтвета;
	
	Ответ = Неопределено;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", ОписаниеКлиентскогоПриложения);
	Заголовки.Вставить("formatVersion", ВерсияDTO);
	
	Токен = ТокенАутентификации();
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	ДвоичныеДанныеФайла = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
		ДвоичныеДанныеФайла = ОписаниеФайла.ДвоичныеДанныеФайла;
		ТипКонтента = ТипКонтента(ОписаниеФайла.Расширение);
		Заголовки.Вставить("Content-Type", ТипКонтента);
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	ПолныйАдресРесурса = СтрШаблон("/%1%2%3", СтруктураURI.ПутьНаСервере, АдресРесурсаAPI, АдресРесурса);
	
	Запрос = Новый HTTPЗапрос(ПолныйАдресРесурса, Заголовки);
	
	ОтправкаФайла = Ложь;
	Если ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда
		Запрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеФайла);
		ОтправкаФайла = Истина;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	КонецЕсли;
	
	Если ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ИмяМетода, Запрос, ОтправкаФайла);
	КонецЕсли;
	
	Попытка
		Ответ = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуПолученияОтвета(ИмяМетода, Запрос, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Ответ = Неопределено;
		БылиОшибки  = Истина;
	КонецПопытки;
	
	Если ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ИмяМетода, Запрос, Ответ, ПараметрыЗапроса.ЗапросФайла);
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 401 Тогда
		СоздатьНовоеHTTPСоединение();
		Токен = ТокенАутентификации();
		Если Не ЗначениеЗаполнено(Токен) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
		Если ВестиПротокол Тогда
			ЗаписатьСобытиеЗапросВЖурналРегистрации(ИмяМетода, Запрос, ОтправкаФайла);
		КонецЕсли;
		Попытка
			Ответ = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
		Исключение
			ЗаписатьОшибкуПолученияОтвета(ИмяМетода, Запрос, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Ответ = Неопределено;
		КонецПопытки;
		Если ВестиПротокол Тогда
			ЗаписатьСобытиеОтветВЖурналРегистрации(ИмяМетода, Запрос, Ответ, ПараметрыЗапроса.ЗапросФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния >= 300
		И Не (Ответ.КодСостояния = 404 И ИмяМетода = "DELETE")
		И Ответ.КодСостояния <> РазрешенныйКодОтвета Тогда
		ЗаписатьОшибкуВызова(ИмяМетода, Запрос, Ответ, ПараметрыЗапроса.ЗапросФайла);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаОбъектов

Функция РезультатВыгрузкиКоллекции(АдресРесурса, Данные, ПолеКлюча = "", РазмерПакета = 100)

	РезультатВыгрузки = НовыйРезультатВыгрузки();
	
	Пакеты = Новый Массив;
	Если Данные.Количество() > РазмерПакета Тогда
		ДанныеПакета = Новый Массив;
		СчПакета = 0;
		Для Ид=0 По Данные.ВГраница() Цикл
			Если СчПакета = РазмерПакета Тогда
				Пакеты.Добавить(ДанныеПакета);
				СчПакета = 0;
				ДанныеПакета = Новый Массив;
			КонецЕсли;
			СчПакета = СчПакета + 1;
			ДанныеПакета.Добавить(Данные[Ид]);
		КонецЦикла;
		Пакеты.Добавить(ДанныеПакета);
	Иначе
		Пакеты.Добавить(Данные);
	КонецЕсли;
	
	Для каждого Пакет Из Пакеты Цикл
		
		СтрокаТела = СформироватьJSON(Пакет);
		Ответ = HTTPОтветСервера(ПараметрыЗапроса(АдресРесурса, "PUT", СтрокаТела));
		
		ЕстьПолеКлюча = Не ПустаяСтрока(ПолеКлюча);
		Если Ответ = Неопределено Тогда
			РезультатВыгрузки.БылиОшибки = Истина;
		ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Тогда
			Для Каждого ЭлементПакета Из Пакет Цикл
				Если ЕстьПолеКлюча Тогда
					ЭлементКоллекции = ЭлементПакета[ПолеКлюча];
				Иначе
					ЭлементКоллекции = ЭлементПакета;
				КонецЕсли;
				РезультатВыгрузки.Выгружено.Добавить(ЭлементКоллекции);
			КонецЦикла;
		ИначеЕсли Ответ.КодСостояния = 400 Тогда
			
			РезультатВыгрузки.БылиОшибки = Истина;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			
			Попытка
				ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			Исключение
				ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			Результат = ОбъектОтвета["result"];
			Если Результат <> Неопределено Тогда
				Для Каждого ЭлементРезультат Из Результат Цикл
					ЭлементПакета = Пакет[Число(ЭлементРезультат["position"]) - 1];
					Если ЕстьПолеКлюча Тогда
						ЭлементКоллекции = ЭлементПакета[ПолеКлюча];
					Иначе
						ЭлементКоллекции = ЭлементПакета;
					КонецЕсли;
					РезультатВыгрузки.Выгружено.Добавить(ЭлементКоллекции);
				КонецЦикла;
			КонецЕсли;
			
			КоличествоЭлементов = Пакет.Количество();
			Ошибки = ОбъектОтвета["errors"];
			Если Ошибки <> Неопределено Тогда
				Для Каждого ЭлементОшибки Из Ошибки Цикл
					ПозицияВКоллекции = ЭлементОшибки["position"];
					Если ПозицияВКоллекции <> Неопределено Тогда
						НомерПозиции = Число(ПозицияВКоллекции);
						Если НомерПозиции <= КоличествоЭлементов Тогда
							ЭлементПакета = Пакет[НомерПозиции - 1];
							Если ЕстьПолеКлюча Тогда
								ЭлементКоллекции = ЭлементПакета[ПолеКлюча];
							Иначе
								ЭлементКоллекции = ЭлементПакета;
							КонецЕсли;
							РезультатВыгрузки.НеВыгружено.Вставить(ЭлементКоллекции, ОписаниеОшибкиВыгрузки(ЭлементОшибки));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			РезультатВыгрузки.БылиОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ОписаниеОшибкиВыгрузки(ОбъектОшибка)
	
	Попытка
		Результат = НСтр("ru = 'Тип ошибки: %1
						|Код ошибки: %2
						|Описание: %3
						|Подробно:'");
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат, ОбъектОшибка["error"]["type"], ОбъектОшибка["error"]["code"], ОбъектОшибка["error"]["description"]);
	
		Для Каждого КлючЗначение Из ОбъектОшибка["error"]["value"] Цикл
			Результат = Результат + Символы.ПС + КлючЗначение.Ключ + ": " + КлючЗначение.Значение;
		КонецЦикла;
	Исключение
		Результат = НСтр("ru = 'Неизвестное описание ошибки.'");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьУдалениеОбъекта(АдресРесурса, ПубличныйИдентификатор)
	
	АдресРесурсаОбъекта = СтрШаблон("%1/%2", АдресРесурса, ПубличныйИдентификатор);
	
	Ответ = HTTPОтветСервера(ПараметрыЗапроса(АдресРесурсаОбъекта, "DELETE"));
	Если Ответ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Или Ответ.КодСостояния = 404 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыгрузитьДвоичныеДанныеФайла(ДвоичныеДанные, Расширение)
	
	ОписаниеФайла = Новый Структура("ДвоичныеДанныеФайла,Расширение",ДвоичныеДанные,Расширение);
	Ответ = HTTPОтветСервера(ПараметрыЗапроса(РесурсФайлы(), "POST",,ОписаниеФайла));
	Если Ответ = Неопределено Или Ответ.КодСостояния >= 300 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	Попытка
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектОтвета.Получить("fileID");
	
КонецФункции

Процедура ВыгрузитьФотографии(ТаблицаДанных)
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.АдресФотографии) Тогда
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанныеФотографии = ПолучитьИзВременногоХранилища(СтрокаТЗ.АдресФотографии);
		Если ТипЗнч(ДвоичныеДанныеФотографии) <> Тип("ДвоичныеДанные") Тогда
			Продолжить;
		КонецЕсли;
		
		РазмерФайла = ДвоичныеДанныеФотографии.Размер();
		
		МаксимальныйРазмерПринимаемогоФайла = ИнтеграцияУправлениеПерсоналомКлиентСервер.МаксимальныйРазмерПринимаемогоФайла();
		Если РазмерФайла > МаксимальныйРазмерПринимаемогоФайла Тогда
			МаксимальныйРазмер = МаксимальныйРазмерПринимаемогоФайла/1024/1024; 
			ТекстСообщения = НСтр("ru = 'Размер фотографии %1Мб, превышает максимально допустимый %2Мб: %3.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РазмерФайла, МаксимальныйРазмер, Строка(СтрокаТЗ.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Расширение = ИнтеграцияУправлениеПерсоналом.РасширениеФайлаКартинки(ДвоичныеДанныеФотографии);
		Если Расширение = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неизвестный формат картинки фотографии: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТЗ.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ИдентификаторФайла = ВыгрузитьДвоичныеДанныеФайла(ДвоичныеДанныеФотографии, Расширение);
		Если ИдентификаторФайла = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка публикации файла фотографии: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТЗ.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ПостфиксИмени = НСтр("ru = 'Фотография'");
		ИмяФайла = СтрШаблон("%1 %2.%3",Строка(СтрокаТЗ.ФизическоеЛицо), ПостфиксИмени, Расширение);
		
		ОписаниеФайла = Новый Структура("ИдентификаторФайла,ИмяФайла,Расширение,Размер");
		ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
		ОписаниеФайла.ИмяФайла 		= ИмяФайла;
		ОписаниеФайла.Расширение 	= Расширение;
		ОписаниеФайла.Размер 		= РазмерФайла;
		
		СтрокаТЗ.Фотография = ОписаниеФайла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ФормированиеВосстановлениеJSON

Функция СформироватьJSON(Значение)
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( ,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON, "ПреобразованиеJSON", ЭтотОбъект);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	БылиОшибки = Истина;
	Отказ = Истина;
	ЗаписатьОшибкуПреобразованияJSON(Свойство, Значение);
	
	Возврат Неопределено;
	
КонецФункции

Функция ВосстановлениеJSON(Знач Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	Исключение
		Результат = Дата(1,1,1);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаУстановкаВерсийОбмена

Процедура УстановитьВерсииОбмена(НовыеВерсии)
	
	ТекущаяВерсияDTO = ВерсияDTO;
	ТекущаяВерсияAPI = ВерсияAPI;
	
	// Версия API обрабатывается до в версии DTO.
	Если НовыеВерсии.ВерсияAPI <> ВерсияAPI Тогда
		НоваяВерсияAPI = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(НовыеВерсии.ВерсияAPI, ИнтеграцияУправлениеПерсоналом.ВерсииAPI(Приложение));
		Если НоваяВерсияAPI <> ВерсияAPI Тогда
			ВерсияAPI = НоваяВерсияAPI;
			ОбновитьИнициализациюПриСмениВерсииAPI();
			ИнтеграцияУправлениеПерсоналом.УстановитьНовуюВерсиюAPI(Приложение, ТекущаяВерсияAPI, ВерсияAPI);
		КонецЕсли;
	КонецЕсли;
	
	Если НовыеВерсии.ВерсияDTO <> ВерсияDTO Тогда
		НоваяВерсияDTO = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(НовыеВерсии.ВерсияDTO, ИнтеграцияУправлениеПерсоналом.ВерсииDTO(Приложение));
		Если НоваяВерсияDTO <> ВерсияDTO Тогда
			ВерсияDTO = НоваяВерсияDTO;
			ОбновитьВерсиюDTO();
			ИнтеграцияУправлениеПерсоналом.УстановитьНовуюВерсиюDTO(Приложение, ТекущаяВерсияDTO, ВерсияDTO);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция НовыйРезультатВыгрузки()
	
	Результат = Новый Структура;
	Результат.Вставить("Выгружено", 			Новый Массив);
	Результат.Вставить("ОтменитьРегистрацию", 	Новый Массив);
	Результат.Вставить("БылиОшибки", 			Ложь);
	Результат.Вставить("НеВыгружено", 			Новый Соответствие);
	Возврат Результат;
	
КонецФункции

// Тип контента по расширению файла для заголовка Content-Type.
Функция ТипКонтента(Расширение)

	ТипКонтента = "application/octet-stream";
	РасширениеФайла = НРег(Расширение);
	Если РасширениеФайла = "jpg"
		Или РасширениеФайла = "jpeg"
		Или РасширениеФайла = "jpe"
		Или РасширениеФайла = "jfif" Тогда
		ТипКонтента = "image/jpeg";
	ИначеЕсли РасширениеФайла = "png" Тогда
		ТипКонтента = "image/png";
	ИначеЕсли РасширениеФайла = "gif" Тогда
		ТипКонтента = "image/gif";
	ИначеЕсли РасширениеФайла = "tiff" Тогда
		ТипКонтента = "image/tiff";
	ИначеЕсли РасширениеФайла = "webp" Тогда
		ТипКонтента = "image/webp";
	ИначеЕсли РасширениеФайла = "bmp" Тогда
		ТипКонтента = "image/vnd.wap.wbmp";
	КонецЕсли;
	
	Возврат ТипКонтента;

КонецФункции

Функция УстановитьОтметкуНеВыгружался(МассивСсылок, ТипОбъекта)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("Ссылки", МассивСсылок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.Приложение КАК Приложение,
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	ЛОЖЬ КАК Выгружался
	|ИЗ
	|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК Таблица
	|ГДЕ
	|	Таблица.ТипОбъекта = &ТипОбъекта
	|	И Таблица.Приложение = &Приложение
	|	И Таблица.Ссылка В(&Ссылки)
	|	И Таблица.Выгружался";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом");
			ЭлементБлокировки.ИсточникДанных = Таблица;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			Блокировка.Заблокировать();
			
			Для каждого СтрокаТЗ Из Таблица Цикл
				МенеджерЗаписи = РегистрыСведений.ВыгруженныеОбъектыУправлениеПерсоналом.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти 

#КонецЕсли






